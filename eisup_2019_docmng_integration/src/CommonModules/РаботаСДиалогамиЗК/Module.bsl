
Процедура ВакансияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если ДанныеСтроки.Закрыта Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
	Если Не ДанныеСтроки.Закрыта И ЗначениеЗаполнено(ДанныеСтроки.ПлановаяДатаЗакрытия) И ДанныеСтроки.ПлановаяДатаЗакрытия < ОбщегоНазначенияЗК.ПолучитьРабочуюДату() Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры

// Выводит строки показателей в списке регистра сведений плановых начислений
//
Процедура ОформитьСтрокиПлановыхНачислений(Элемент, мСведенияОВидахРасчета, ОформленияСтрок) Экспорт
	
	ДлинаСуток = 86400;
	
	Для каждого Строка Из ОформленияСтрок Цикл
		
		ДанныеСтроки = Строка.ДанныеСтроки;
		ВидРасчета = ДанныеСтроки.ВидРасчета;
		
		Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
			
			СведенияОВидеРасчета = РаботаСДиалогамиПереопределяемый.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
			
			ЕстьПоказатели = Ложь;
			Для СчПоказателей = 1 По 6 Цикл
				Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
					ВидимостьПоказателяИВалюты = Истина;
					Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
						ЕстьПоказатели = Истина;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;
					ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
						ВидимостьПоказателяИВалюты = Ложь;
						ЕстьПоказатели = Истина;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Истина;	
						Строка.Ячейки["ТарифныйРазряд" + СчПоказателей].Видимость = Истина;
					Иначе
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;
					КонецЕсли;
					Если ВидимостьПоказателяИВалюты Тогда
						Строка.Ячейки["Показатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
						Строка.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
						Если Строка.Ячейки["Показатель" + СчПоказателей].Видимость Тогда
							Строка.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
						КонецЕсли;
					Иначе
						Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
					КонецЕсли;
				Иначе
					Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;				
					Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если не ЕстьПоказатели Тогда
				Строка.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
				Строка.Ячейки["Показатель1"].Видимость = Истина;
				Строка.Ячейки["Валюта1"].Видимость = Истина;
				Строка.Ячейки["НаименованиеПоказательТР1"].Видимость = Ложь;
				Строка.Ячейки["ТарифныйРазряд1"].Видимость = Ложь;
			КонецЕсли;
			Строка.Ячейки.Показатели.Видимость = Ложь;
			
			// События завершения
			Если ДанныеСтроки.ВидРасчетаЗавершения = Неопределено Тогда
				
				Для СчПоказателей = 1 По 6 Цикл
					
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость				= Ложь;
					Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость				= Ложь;
					Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость					= Ложь;
					
				КонецЦикла;
				
			Иначе
				
				СведенияОВидеРасчета = РаботаСДиалогамиПереопределяемый.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ДанныеСтроки.ВидРасчетаЗавершения);
				
				Показатели = Ложь;
				Для СчПоказателей = 1 По 6 Цикл
					Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
						
						ВидимостьПоказателяИВалюты = Истина;
						Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
							Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Истина;
							ЕстьПоказатели = Истина;
							Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
							Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость = Ложь;
						ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
							ВидимостьПоказателяИВалюты = Ложь;
							ЕстьПоказатели = Истина;
							Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
							Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Истина;
							Строка.Ячейки["ТарифныйРазряд" + СчПоказателей + "Завершения"].Видимость = Истина;
						Иначе
							Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость = Ложь;
						КонецЕсли;
						Если ВидимостьПоказателяИВалюты Тогда
							Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
							Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
							Если Строка.Ячейки["Показатель" + СчПоказателей].Видимость Тогда
								Строка.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
							КонецЕсли;
						Иначе
							Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость = Ложь;
						КонецЕсли;
					Иначе
						Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Ложь;
						Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость = Ложь;					
						Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				Если не ЕстьПоказатели Тогда
					Строка.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
					Строка.Ячейки["Показатель1Завершения"].Видимость = Истина;
					Строка.Ячейки["Валюта1Завершения"].Видимость = Истина;
					Строка.Ячейки["НаименованиеПоказательТР1Завершения"].Видимость = Ложь;
					Строка.Ячейки["ТарифныйРазряд1Завершения"].Видимость = Ложь;
				КонецЕсли;			
				Строка.Ячейки.ПоказателиЗавершения.Видимость = Ложь;
				
			КонецЕсли; 
		Иначе
			
			СведенияОВидеРасчета = РаботаСДиалогамиПереопределяемый.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ДанныеСтроки.ВидРасчета);
			
			Строка.Ячейки["НаименованиеПоказатель1"].Видимость	= Истина;
			Строка.Ячейки["НаименованиеПоказательТР1"].Видимость	= Ложь;
			Строка.Ячейки["ТарифныйРазряд1"].Видимость			= Ложь;
			Строка.Ячейки["Показатель1"].Видимость				= Истина;
			Строка.Ячейки["Валюта1"].Видимость					= Истина;
			
			Строка.Ячейки["НаименованиеПоказатель1"].УстановитьТекст(СведенияОВидеРасчета["Показатель1Наименование"]);
			
			Для СчПоказателей = 2 По 6 Цикл
				
				Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей ].Видимость	= Ложь;
				Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;
				Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость				= Ложь;
				Строка.Ячейки["Показатель" + СчПоказателей].Видимость					= Ложь;
				Строка.Ячейки["Валюта" + СчПоказателей].Видимость						= Ложь;
				
			КонецЦикла;
			
			Строка.Ячейки.Показатели.Видимость = Ложь;
			
			Если ДанныеСтроки.ВидРасчетаЗавершения = Неопределено Тогда
				
				Для СчПоказателей = 1 По 6 Цикл
					
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость		= Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость				= Ложь;
					Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость					= Ложь;
					Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость						= Ложь;
					
				КонецЦикла;
				
			Иначе
				
				Строка.Ячейки["НаименованиеПоказатель1" + "Завершения"].Видимость		= Ложь;
				Строка.Ячейки["НаименованиеПоказательТР1" + "Завершения"].Видимость	= Ложь;
				Строка.Ячейки["ТарифныйРазряд1" + "Завершения"].Видимость				= Ложь;
				Строка.Ячейки["Показатель1" + "Завершения"].Видимость					= Истина;
				Строка.Ячейки["Валюта1" + "Завершения"].Видимость						= Истина;
				
				
				Для СчПоказателей = 2 По 6 Цикл
					
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость		= Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость				= Ложь;
					Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость					= Ложь;
					Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость						= Ложь;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Строка.Ячейки.ПоказателиЗавершения.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

// Выводит строки показателей в списке регистра сведений плановых удержаний
//
Процедура ОформитьСтрокиПлановыхУдержаний(Элемент, мСведенияОВидахРасчета, ОформленияСтрок) Экспорт
	
	ДлинаСуток = 86400;
	
	Для каждого Строка Из ОформленияСтрок Цикл
		
		ДанныеСтроки = Строка.ДанныеСтроки;
		ВидРасчета = ДанныеСтроки.ВидРасчета;
		
		СведенияОВидеРасчета = РаботаСДиалогамиПереопределяемый.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
		
		ЕстьПоказатели = Ложь;
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				ВидимостьПоказателяИВалюты = Истина;
				Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
					ЕстьПоказатели = Истина;
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				Иначе
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
				Если ВидимостьПоказателяИВалюты Тогда
					Строка.Ячейки["Показатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];		
					Строка.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
				Иначе
					Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;		
					Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			Иначе
				Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;		
				Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;			
			КонецЕсли;
			
		КонецЦикла;
		
		Если не ЕстьПоказатели Тогда		
			Строка.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
			Строка.Ячейки["Показатель1"].Видимость = Истина;		
			Строка.Ячейки["Валюта1"].Видимость = Истина;		
		КонецЕсли;	
		Строка.Ячейки.Показатели.Видимость = Ложь;
		
		// События завершения
		Если Не ЗначениеЗаполнено(ДанныеСтроки.ДействиеЗавершения) ИЛИ ДанныеСтроки.ДействиеЗавершения = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
			
			Для СчПоказателей = 1 По 6 Цикл
				Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость	= Ложь;
				Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость				= Ложь;
				Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость					= Ложь;
			КонецЦикла;
			
		Иначе		
			
			ЕстьПоказатели = Ложь;
			Для СчПоказателей = 1 По 6 Цикл
				
				Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
					ВидимостьПоказателяИВалюты = Истина;
					Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей+ "Завершения"].Видимость = Истина;
						ЕстьПоказатели = Истина;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей+ "Завершения"].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
					Иначе
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей+ "Завершения"].Видимость = Ложь;
					КонецЕсли;
					Если ВидимостьПоказателяИВалюты Тогда
						Строка.Ячейки["Показатель" + СчПоказателей+ "Завершения"].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];		
						Строка.Ячейки["Валюта" + СчПоказателей+ "Завершения"].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
					Иначе
						Строка.Ячейки["Показатель" + СчПоказателей+ "Завершения"].Видимость = Ложь;		
						Строка.Ячейки["Валюта" + СчПоказателей+ "Завершения"].Видимость = Ложь;
					КонецЕсли;
				Иначе
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей+ "Завершения"].Видимость = Ложь;
					Строка.Ячейки["Показатель" + СчПоказателей+ "Завершения"].Видимость = Ложь;		
					Строка.Ячейки["Валюта" + СчПоказателей+ "Завершения"].Видимость = Ложь;			
				КонецЕсли;
				
			КонецЦикла;
			
			Если не ЕстьПоказатели Тогда		
				Строка.Ячейки.НаименованиеПоказатель1Завершения.Видимость = Истина;
				Строка.Ячейки["Показатель1Завершения"].Видимость = Истина;		
				Строка.Ячейки["Валюта1Завершения"].Видимость = Истина;		
			КонецЕсли;	
			Строка.Ячейки.ПоказателиЗавершения.Видимость = Ложь;
		КонецЕсли;
		
		
		Если Элемент.Колонки.ПериодЗавершения.Видимость Тогда
			Строка.Ячейки.ПериодЗавершения.ОтображатьТекст = Истина;
			Строка.Ячейки.ПериодЗавершения.УстановитьТекст(Формат(ДанныеСтроки.ПериодЗавершения - ДлинаСуток, "ДФ=dd.MM.yyyy"));
		КонецЕсли;	
		
		
	КонецЦикла;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

// Процедура проверяет соответсвие страхового номера ПФР требованиям, устанавливает цвет
// текста в поле ввода и подсказку
//
// Параметры
//  СтраховойНомерПФР  - страховой номер физлица для проверки
//  ПолеВвода  - поле ввода в котором вводится ИНН
//
Процедура ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(СтраховойНомерПФР, ПолеВвода) Экспорт
	
	Если ЗначениеЗаполнено(СтрЗаменить(Лев(СтраховойНомерПФР,11),"-","")) и Не РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомерПФР) Тогда
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветОсобогоТекста;
		ПолеВвода.Подсказка = "Ошибка в страховом номере";
	Иначе
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВвода.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода()

// Выводит строки показателей в документах ввода плановых начислений и удержаний
//
//	Параметры:
//		ДанныеСтроки - данные строки документа
//		ОформлениеСтроки - оформление строки документа
//		СведенияОВидахРасчета - соответствие содержащие сведения о видах расчетах документа 
//
Процедура ПриВыводеСтрокиНачисленийИУдержаний(ДанныеСтроки, ОформлениеСтроки, СведенияОВидахРасчета) Экспорт
	
	ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
	
	СведенияОВидеРасчета = РаботаСДиалогамиПереопределяемый.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.ВидРасчета, "ПриРасчете");					
	
	ЕстьПоказатели = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСтрокиВидРасчета) Тогда
		
		ЕстьПоказатели = Ложь; 
		СчПоказателей = 0;
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ЕстьПоказатели = Истина;
				
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
				ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"];
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
				
				// размеры показателя будут доступны только для видимых и изменяемых показателей
				Если ВидимостьПоказателя Тогда
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется
					Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически
					Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно;
				КонецЕсли;
				
				// если отображается наименование - пропишем текст
				Если ВидимостьНаименованияПоказателя Тогда		
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
					ВидимостьПоказателя = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"];
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр	= Не ВидимостьПоказателя Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
					Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"];			
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);			
				КонецЕсли;
				
				Если ВидимостьПоказателя Тогда
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				КонецЕсли;
				
			Иначе
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если не ЕстьПоказатели Тогда
			ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.УстановитьТекст("<рассчитываются автоматически>");
			ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость			= Истина;
			ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр				= Истина;
		КонецЕсли;
	Иначе
		
		Для СчПоказателей = 1 По 6 Цикл
			// настроим видимость ячеек
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
	
КонецПроцедуры //ПриВыводеСтрокиНачисленийИУдержаний

// Выводит в колонке Способ расчета списка в.р. вместо слов "Произвольная формула"
//	эту самую формулу
// Работает в контексте обработчика ПриПолученииДанных. 
// Предполагается, что в соответствующем табличном поле есть колонка СпособРасчета,
// 	а в списке присутствуют: Ссылка и ФормулаРасчетаПредставление
//
//	Параметры:
//		ОформленияСтрок - коллекция оформлений строки табличного поля списка в.р.
//
Процедура ВыводПроизвольнойФормулыВСтрокахСпискаВидовРасчета(ОформленияСтрок) Экспорт

	МассивВР = Новый Массив;
	ИмяПВР = Неопределено;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если ДанныеСтроки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			МассивВР.Добавить(ДанныеСтроки.Ссылка);
			Если ИмяПВР = Неопределено Тогда
				ИмяПВР = ДанныеСтроки.Ссылка.Метаданные().Имя
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВР.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияОрганизацийПоказатели.Ссылка КАК Ссылка,
	|	НачисленияОрганизацийПоказатели.НомерСтроки КАК НомерСтроки,
	|	НачисленияОрганизацийПоказатели.Показатель.Наименование КАК Показатель
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК НачисленияОрганизацийПоказатели
	|ГДЕ
	|	НачисленияОрганизацийПоказатели.Ссылка В(&Ссылки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Ссылки", МассивВР);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОсновныеНачисленияОрганизаций", ИмяПВР);
	Показатели = Запрос.Выполнить().Выгрузить();
	Показатели.Индексы.Добавить("Ссылка");
	СтруктураОтбора = Новый Структура("Ссылка");
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			СтруктураОтбора.Ссылка = ДанныеСтроки.Ссылка;
			ФормулаРасчета	= СтрЗаменить(ДанныеСтроки.ФормулаРасчетаПредставление, "ПроведениеРасчетов.", "");
			Описание = ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Показатели.Скопировать(СтруктураОтбора), "Текст");
			Ячейки.СпособРасчета.УстановитьТекст(Описание);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Процедура вызывается формирования кнопки "Подбор" для формы видов расчетов Планов Видов Расчетов.
//
// Параметры:
//  СсылкаПВР 	   	   - ссылка на ПВР;
//  ФормаЭлемента 	   - Форма вида расчета.
//  СтруктураДействий  - структура с действиями, которые будут вызывать формируемые кнопки
//  ВедущиеВидыРасчета - булево, Истина - если нужно формировать кнопку в командной
//						 панели ТЧ "ВедущиеВидыРасчета".
//
Процедура СоздатьКнопкуПодбораДляПВР(СсылкаПВР, ФормаЭлемента, СтруктураДействий, ВедущиеВидыРасчета = Ложь) Экспорт
	
	МассивДоступныхТипов = Новый Массив;
	
	КоллекцияБазовыхВидовРасчета = Метаданные.ПланыВидовРасчета[СсылкаПВР.Метаданные().Имя].БазовыеВидыРасчета;
	КнопкаБазовыхРасчетов = ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор;
	
	Если КоллекцияБазовыхВидовРасчета.Количество() > 1 Тогда
		
		КнопкаБазовыхРасчетов.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		
		Если ВедущиеВидыРасчета Тогда
			КнопкаВедущихРасчетов = ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор;
			КнопкаВедущихРасчетов.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		КонецЕсли;
		
		Для каждого СтрокаКоллекции Из КоллекцияБазовыхВидовРасчета Цикл
			
			ДействиеПоКнопке = СтруктураДействий.ПодМенюБазовыхВидовРасчета;
			НоваяКнопкаБазовые = КнопкаБазовыхРасчетов.Кнопки.Добавить(СтрокаКоллекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКоллекции.Синоним, ДействиеПоКнопке);
			НоваяКнопкаБазовые.ИзменяетДанные = Истина;
			
			
			Если ВедущиеВидыРасчета Тогда
				
				ДействиеПоКнопке = СтруктураДействий.ПодМенюВедущихВидовРасчета;
				НоваяКнопкаВедущие = КнопкаВедущихРасчетов.Кнопки.Добавить(СтрокаКоллекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКоллекции.Синоним, ДействиеПоКнопке);
				НоваяКнопкаВедущие.ИзменяетДанные = Истина;
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКоллекции.Имя));
				
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		КнопкаБазовыхРасчетов.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		КнопкаБазовыхРасчетов.Действие  = СтруктураДействий.КнопкаБазовыхВидовРасчета;
		
		Если ВедущиеВидыРасчета Тогда
			
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Действие = СтруктураДействий.КнопкаВедущихВидовРасчета;
			
			Для каждого СтрокаКоллекции Из КоллекцияБазовыхВидовРасчета Цикл
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКоллекции.Имя));
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВедущиеВидыРасчета Тогда
		
		ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(МассивДоступныхТипов);
		Если КоллекцияБазовыхВидовРасчета.Количество() = 1 Тогда
			ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ВыбиратьТип = Ложь;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // СоздатьКнопкуПодбораДляПВР()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРЕДСТАВЛЕНИЯ ИНФОРМАЦИИ В ФОРМЕ

// По описателям состояния расчетного документа (флажкам) формирует текст инфо-строки и важность сообщения
//
// Параметры
//	НеЗаполнен,ЗаполненСОшибками,Рассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Отсторнирован - булево (все)
//		описывают достижение документом того или иного состояния
//
// Возвращаемое значение:
//	Структура из двух строковых значений - ТекстСообщения и ВажностьСообщения
//
Функция ПолучитьОписаниеРасчетногоДокумента(Заполнен = Ложь, ЗаполненСОшибками = Ложь, Рассчитан = Ложь, Проведен = Ложь, ЭтоИсправление = Ложь, ДокументИсправлен = Ложь, Отсторнирован = Ложь, ИмеетПродолжение = Ложь, ЯвляетсяПродолжением = Ложь) Экспорт 
	
	ТекстСообщения = "";
	ВажностьСообщения = "";
	
	Если Не Заполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ не заполнен";
	ИначеЕсли ЭтоИсправление Тогда
		ТекстСообщения = "Документ является исправлением документа прошлого периода; ";
		Если ДокументИсправлен Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			Если Не Рассчитан Тогда
				ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		ИначеЕсли ЗаполненСОшибками Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "поля документа заполнены не полностью или неверно";
		ИначеЕсли Не Рассчитан Тогда
			ВажностьСообщения = "ВажнаяИнформация";
			ТекстСообщения = ТекстСообщения + "документ не рассчитан";
		ИначеЕсли Рассчитан И Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан, но не проведен";
		ИначеЕсли Рассчитан И Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан и проведен";
		КонецЕсли;
	ИначеЕсли ДокументИсправлен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ ";
		Если Не Рассчитан Тогда
			ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
	ИначеЕсли Отсторнирован Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ был отменен полностью (отсторнирован); редактирование документа запрещено";
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Поля документа заполнены не полностью или неверно";
	ИначеЕсли Не Рассчитан Тогда
		ВажностьСообщения = "ВажнаяИнформация";
		ТекстСообщения = "Документ не рассчитан";
	ИначеЕсли Рассчитан И Не Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ рассчитан, но не проведен";
	ИначеЕсли Рассчитан И Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ рассчитан и проведен";
	КонецЕсли;
	
	ТекстПродолжений = "";
	Если ЯвляетсяПродолжением Тогда
		ТекстПродолжений = "Этот больничный является б/л-продолжением. ";
	КонецЕсли;
	Если ИмеетПродолжение Тогда
		ТекстПродолжений = ТекстПродолжений + "Этот больничный имеет продолжение. ";
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСообщения,ВажностьСообщения", ТекстПродолжений + ТекстСообщения, ВажностьСообщения)
	
КонецФункции

Функция ПолучитьОписаниеКадровогоДокумента(Заполнен = Ложь, ЗаполненСОшибками = Ложь, Проведен = Ложь, ЭтоИсправление = Ложь, ДокументИсправлен = Ложь, ПеренесенИз77 = Ложь)
	
	ТекстСообщения = "";
	ВажностьСообщения = "";
	
	Если ПеренесенИз77 Тогда
		ВажностьСообщения = "ВажнаяИнформация";
		ТекстСообщения = "Документ перенесен из программы ""1С:Зарплата и кадры 7.7"". При проведении документа движения формироваться не будут";
		
	ИначеЕсли Не Заполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ не заполнен";
		
	ИначеЕсли ЭтоИсправление Тогда
		ТекстСообщения = "Документ является исправлением документа; ";
		Если ДокументИсправлен Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		ИначеЕсли ЗаполненСОшибками Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "поля документа заполнены не полностью или неверно";
		ИначеЕсли Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "не проведен";
		ИначеЕсли Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "проведен";
		КонецЕсли;
		
	ИначеЕсли ДокументИсправлен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ ";
		ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Поля документа заполнены не полностью или неверно";
		
	ИначеЕсли Не Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ не проведен";
		
	ИначеЕсли Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ проведен";
		
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСообщения,ВажностьСообщения", ТекстСообщения, ВажностьСообщения)
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ В ФОРМЕ

// Процедура заполняет вычисляемую колонку ТЧ документа "ТабельныйНомерСтрока"
//
// Параметры
//  ТЧДокумента  – Табличное поле
//  ОформленияСтрок – Коллекция значений типа ОформлениеСтроки табличного поля ТЧДокумента
//
Процедура УстановитьЗначенияКолонкиТабельныйНомерСтрока(ТЧДокумента, ОформленияСтрок) Экспорт
	
	Если ТЧДокумента.Колонки.Найти("ТабельныйНомерСтрока") = Неопределено 
		Или Не ТЧДокумента.Колонки.ТабельныйНомерСтрока.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	МассивСотрудников = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		МассивСотрудников.Добавить(СтрокаТабличнойЧасти.ДанныеСтроки.Сотрудник);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Код КАК ТабельныйНомер,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&парамМассивСотрудников)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамМассивСотрудников", МассивСотрудников);
	
	ТабельныеНомера = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТабельныеНомера[Выборка.Сотрудник] = Выборка.ТабельныйНомер;
	КонецЦикла; 
	
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		СтрокаТабличнойЧасти.Ячейки.ТабельныйНомерСтрока.УстановитьТекст(ТабельныеНомера[СтрокаТабличнойЧасти.Ячейки.Сотрудник.Значение]);
	КонецЦикла;
	
КонецПроцедуры // УстановитьЗначенияКолонкиТабельныйНомерСтрока()

// управляет валютой в зависимости от способа расчета
//
Процедура ПриИзмененииВидаРасчета(ИмяОбъекта,Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалюта) Экспорт
	
	СведенияОВидеРасчета = РаботаСДиалогамиПереопределяемый.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Значение);
	
	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей]) И 
				СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = мВалюта;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				Если СчПоказателей <= СведенияОВидеРасчета.ФактКоличествоПоказателей Тогда
					ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
					ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = ПоказательВР.Валюта;
				КонецЕсли;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей] = 0;
			КонецЕсли;
		Иначе
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей]		= Справочники.Валюты.ПустаяСсылка();
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей]	= 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ПриИзмененииВидаРасчета

// Процедура обслуживает обработчики события НачалоВыбора ЭУ "СторнируемыйДокумент" или "ДокументОснование" табличной части
Процедура ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, Форма, Ссылка, Организация, СтандартнаяОбработка, ЭтоОсновныеНачисления, ДокументМенеджер = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ДокументМенеджер = Неопределено Тогда
		
		ИмяРегистра = ?(ЭтоОсновныеНачисления, "ОсновныеНачисленияРаботниковОрганизаций", "ДополнительныеНачисленияРаботниковОрганизаций");	
		
		СпискиРегистраторов = глЗначениеПеременной("глСпискиРегистраторов");
		СписокДляВыбора = Новый СписокЗначений;
		СпискиРегистраторов.Свойство(ИмяРегистра, СписокДляВыбора);
		
		ЭлементСписка = Форма.ВыбратьИзСписка(СписокДляВыбора,Элемент,);
		
		Если Не ЭлементСписка = Неопределено Тогда
			ФормаВыбора = ЭлементСписка.Значение.ПолучитьФормуВыбора( , Элемент, Ссылка);
			Если Не ЭлементСписка.Значение = Документы.Сторнирование Тогда
				ФормаВыбора.Отбор.Организация.Установить(Организация);
			КонецЕсли;
			ФормаВыбора.ПараметрТекущаяСтрока	= ?(ТипЗнч(ЭлементСписка.Значение.ПустаяСсылка()) = ТипЗнч(Элемент.Значение), Элемент.Значение, Неопределено);
			ФормаВыбора.Открыть();
		КонецЕсли;
		
	Иначе
		
		ФормаВыбора = ДокументМенеджер.ПолучитьФормуВыбора( , Элемент, Ссылка);
		Если Не ДокументМенеджер = Документы.Сторнирование Тогда
			ФормаВыбора.Отбор.Организация.Установить(Организация);
		КонецЕсли;
		ФормаВыбора.ПараметрТекущаяСтрока	= Элемент.Значение;
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнениеОтбораПоОрганизацииПоУмолчанию(Форма, ЭлементОтбора = Неопределено, ЭлементФормы, ПараметрОтборПоРегистратору = Неопределено, ИспользоватьГоловнуюОрганизацию = Истина, ТекущийПользователь, ТекстЗаголовка = Неопределено) Экспорт
	
	ЭлементФормы.ТолькоПросмотр = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрОтборПоРегистратору) Тогда
		
		МетаданныеДокумента = ПараметрОтборПоРегистратору.Метаданные();
		
		Если МетаданныеДокумента.Реквизиты.Найти("СторнируемыйДокумент") <> Неопределено Тогда
			
			МетаданныеДокумента 		= ПараметрОтборПоРегистратору.СторнируемыйДокумент.Метаданные();
			ПараметрОтборПоРегистратору = ПараметрОтборПоРегистратору.СторнируемыйДокумент;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
			
			Если ИспользоватьГоловнуюОрганизацию Тогда
				Организация = ОбщегоНазначенияЗК.ГоловнаяОрганизация(ПараметрОтборПоРегистратору.Организация);
			Иначе
				Организация = ПараметрОтборПоРегистратору.Организация;
			КонецЕсли;
			
			ЭлементОтбора.Значение = Организация;
			ЭлементФормы.ТолькоПросмотр = Истина;
			Если ТекстЗаголовка <> Неопределено Тогда
				Форма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			КонецЕсли; 
			
		КонецЕсли;
		
		ЭлементОтбора.Использование = Истина;
		
	Иначе
		
		Если ИспользоватьГоловнуюОрганизацию Тогда 
			Организация = ОбщегоНазначенияЗК.ГоловнаяОрганизация(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация"));
		Иначе
			Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация");
		КонецЕсли;
		
		Если ЭлементОтбора <> Неопределено Тогда
			ЭлементОтбора.Значение = Организация;
			ЭлементОтбора.Использование = Не Организация.Пустая();
		КонецЕсли;
		
		Если ТекстЗаголовка <> Неопределено Тогда
			Если Организация.Пустая() Тогда
				Форма.Заголовок = СтрЗаменить(ТекстЗаголовка,ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации"),ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организаций"));
			Иначе 
				Форма.Заголовок = ТекстЗаголовка + Организация;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ИЗМЕНЕНИЯ ВИДИМОСТИ ПАНЕЛЕЙ

// Процедура управляет отображением панелей формы путем свертки в низ
// Пареметры
//	 Панель - контейнер, в котором находятся расчетный листок и разделитель
//	 ОтображатьПанель - булево, неопределено - инициализация при открытии формы
//	 Надпись - заголовок расчетного листка
//	 ПанельРасчетногоЛистка - панель расчетного листка
//	 Разделитель - разделитель верхней и нижней панели
//
Процедура ИзменитьВидимостьПанелиРасчетногоЛистка(Панель, ОтображатьПанель = Неопределено, Надпись, ПанельРасчетногоЛистка, Разделитель) Экспорт
	
	// Инициализация при открытии формы
	Если ОтображатьПанель = Неопределено Тогда
		ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ;
		Разделитель.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ОтображатьПанель Тогда
		Если ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			
			// развернем панель, привязки на форме остались правильные
			ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// перепривяжем ЭУ для работы с развернутой панелью
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Низ);
			ПанельРасчетногоЛистка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Надпись, ГраницаЭлементаУправления.Низ);
			
		КонецЕсли;
	Иначе
		Если ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			
			// перепривяжем ЭУ перед сверткой панели в низ
			ПанельРасчетногоЛистка.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
			Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПанельРасчетногоЛистка, ГраницаЭлементаУправления.Верх);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Надпись, ГраницаЭлементаУправления.Верх);
			ПанельРасчетногоЛистка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельРасчетногоЛистка, ГраницаЭлементаУправления.Низ);
			ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ;
			
		КонецЕсли;
	КонецЕсли;
	
	Разделитель.Доступность = ОтображатьПанель;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЛАНОВ ВИДОВ РАСЧЕТА

Процедура УстановитьОтборыИСверткуПоказателей(ЭлементыФормы, Показатели, ПроизвольнаяФормулаРасчета = Истина) Экспорт
	
	ПоказателиДляОтбора = Новый СписокЗначений;
	Если ПроизвольнаяФормулаРасчета Тогда
		Для Каждого СтрокаПоказатель Из Показатели Цикл
			Показатель = СтрокаПоказатель.Показатель;
			Если Показатель.ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется И Не Показатель.Предопределенный
				И Не (Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
				И Не (Показатель.ТарифнаяСтавка ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
				ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная 
				ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)Тогда
				
				ПоказателиДляОтбора.Добавить(Показатель);
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.Использование = Истина;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.ВидСравнения = ВидСравнения.ВСписке;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.Значение = ПоказателиДляОтбора;
	КонецЕсли;
	
	РаботаСДиалогами.ИзменитьВидимостьПанелиПоВертикалиНиз(ЭлементыФормы.ПанельПредставлениеФормулы, ПоказателиДляОтбора.Количество() <> 0, ЭлементыФормы.СпособРасчетаПредставление, ЭлементыФормы.ПанельПоказателей, ЭлементыФормы.РазделительПоказателей)
	
КонецПроцедуры

Функция ПроверитьПВРНаПустыеСтрокиВТЧ(ВидРасчета, ЕстьВытесняющиеВидыРасчета = Ложь) Экспорт
	
	КоничествоСтрок = ВидРасчета.БазовыеВидыРасчета.Количество() - 1;
	НомерСтроки = 0;
	Пока НомерСтроки <= КоничествоСтрок Цикл
		СтрокаБазовыйРасчет = ВидРасчета.БазовыеВидыРасчета[НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаБазовыйРасчет.ВидРасчета) Тогда
			ВидРасчета.БазовыеВидыРасчета.Удалить(НомерСтроки );
			КоничествоСтрок = КоничествоСтрок - 1;
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоничествоСтрок = ВидРасчета.ВедущиеВидыРасчета.Количество() - 1;
	НомерСтроки = 0;
	Пока НомерСтроки <= КоничествоСтрок Цикл
		СтрокаВедущийРасчет = ВидРасчета.ВедущиеВидыРасчета[НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаВедущийРасчет.ВидРасчета) Тогда
			ВидРасчета.ВедущиеВидыРасчета.Удалить(НомерСтроки );
			КоничествоСтрок = КоничествоСтрок - 1;
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВытесняющиеВидыРасчета Тогда
		
		КоничествоСтрок = ВидРасчета.ВытесняющиеВидыРасчета.Количество() - 1;
		НомерСтроки = 0;
		Пока НомерСтроки <= КоничествоСтрок Цикл
			СтрокаВытесняющейРасчет = ВидРасчета.ВытесняющиеВидыРасчета[НомерСтроки];
			Если Не ЗначениеЗаполнено(СтрокаВытесняющейРасчет.ВидРасчета) Тогда
				ВидРасчета.ВытесняющиеВидыРасчета.Удалить(НомерСтроки );
				КоничествоСтрок = КоничествоСтрок - 1;
			Иначе
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецФункции

// Процедура открывает редактор формуль расчета из вида расчета
//
// Параметры
//  ФормаПВР  - форма вида расчета из которой вызывается редактор формул расчета
//	Показатели - таблица показателей 
//  Наименование - наименование вида расчета
//  ФормулаРасчета - формула расчета
//
Процедура ОткрытьФормуРедактированияФормулы(ФормаПВР, Показатели, Наименование, ФормулаРасчетаПредставление, ВидРасчета, ВидПВР = "") Экспорт 
	
	РедакторФормулРасчета = ПолучитьОбщуюФорму("РедакторФормулРасчета", ФормаПВР);
	РедакторФормулРасчета.Заголовок = "Редактирование формулы расчета: " + Наименование;
	
	ПоказателиДляФормыВвода = Новый СписокЗначений;
	
	Для Каждого Показатель Из Показатели Цикл
		
		ПоказателиДляФормыВвода.Добавить(Показатель.Показатель);
		
	КонецЦикла;
	
	ФормулаРасчета = ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчетаПредставление, Показатели, "Текст", Истина);
	
	РедакторФормулРасчета.ВидРасчета		= ВидРасчета;
	РедакторФормулРасчета.Показатели		= ПоказателиДляФормыВвода;
	РедакторФормулРасчета.ФормулаРасчета	= ФормулаРасчета;
	РедакторФормулРасчета.ФормулаРасчетаПредставление	= ФормулаРасчетаПредставление;
	РедакторФормулРасчета.ВидПВР			= ВидПВР;
	РедакторФормулРасчета.Открыть();

КонецПроцедуры //ОткрытьФормуРедактированияФормулы

// Процедура открывает форму выбора ПланыВидовРасчета.ОсновныеНачисленияОрганизаций
// Отборы передаются в структуре СтруктураПараметровОтбора
//
// Параметры:
//	Владелец 			- владелец формы
//	Ключ 				- ключ, ссылка на ЭУ из которого открывается форма
//	СтруктураПараметровОтбора - Структура с параметрами отбора
//	СтандартнаяОбработка- Булево
//	ТекущееЗначение 	- ссылка на элемент, на котором необходимо спозиционироваться при открытии формы
//  СписокПредопределенныхВР - список значений с предопределенными ВР, для установки отбора, когда в структуре
//							   параметров отбора есть ключ - Предопределенный	
//
Процедура ОткрытьФормуВыбораОсновныеНачисленияОрганизаций(Владелец, Ключ, СтруктураПараметровОтбора, СтандартнаяОбработка, ТекущееЗначение = Неопределено, СписокПредопределенныхВР = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора(, Владелец, Ключ);
	Если ТекущееЗначение <> Неопределено Тогда
		ФормаВыбора.НачальноеЗначениеВыбора = ТекущееЗначение;
	КонецЕсли;
	
	//установим отборы
	Для Каждого ЭлементСтруктуры Из СтруктураПараметровОтбора Цикл
		ИмяОтбора 	   = ЭлементСтруктуры.Ключ;
		Если ИмяОтбора = "Предопределенный" и ТипЗнч(СписокПредопределенныхВР) = Тип("СписокЗначений") Тогда
			ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
			ФормаВыбора.Отбор.Ссылка.Значение = СписокПредопределенныхВР;
			ФормаВыбора.Отбор.Ссылка.Использование = Истина;
		Иначе
			СписокОтбора = Новый СписокЗначений;
			СписокОтбора.ЗагрузитьЗначения(ЭлементСтруктуры.Значение);
			ФормаВыбора.Отбор[ИмяОтбора].ВидСравнения = ВидСравнения.ВСписке;
			ФормаВыбора.Отбор[ИмяОтбора].Значение = СписокОтбора;
			ФормаВыбора.Отбор[ИмяОтбора].Использование = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ ДОПОЛНИТЕЛЬНЫХ КОЛОНОК В ТАБЛИЧНЫХ ПОЛЯХ ДОКУМЕНТОВ
	
Процедура СохранитьСтруктуруВидимостиДополнительныхКолонок(ИмяДокумента, СтруктураДанныхОВидимостиДополнительныхКолонок) Экспорт
	
	СохранитьЗначение(ИмяДокумента + "СтруктураДанныхОВидимостиДополнительныхКолонок", СтруктураДанныхОВидимостиДополнительныхКолонок);
	
КонецПроцедуры

Процедура ПоказатьСкрытьДополнительныеКолонкиТабличногоПоля(ДополнительныеКолонкиТабличногоПоля, ВидимостьДополнительныхКолонок, КоманднаяПанельТабличногоПоля)Экспорт
	
	Для Каждого КолонкаТабличногоПоля Из ДополнительныеКолонкиТабличногоПоля Цикл
		КолонкаТабличногоПоля.Видимость = ВидимостьДополнительныхКолонок;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ КОНТРОЛЯ ПЕРИОДИЧЕСКИХ ВЫПЛАТ
	
Процедура ПроверитьДанныеОПериодическихВыплатах(Ссылка, Отказ, ПерерассчитываемыйДокумент = Неопределено, ДанныеДокумента = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	НаборЗаписей = ПроведениеРасчетов.ПолучитьНаборПериодическихВыплатПоДокументу(Ссылка, ДанныеДокумента);
	
	Запрос.УстановитьПараметр("НаборЗаписей", НаборЗаписей);
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);	
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НаборЗаписей.ПериодНачисления,
	|	НаборЗаписей.Сотрудник,
	|	НаборЗаписей.ВидРасчета,
	|	НаборЗаписей.ДокументОснование
	|ПОМЕСТИТЬ НаборЗаписей
	|ИЗ
	|	&НаборЗаписей КАК НаборЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодическиеНачисления.ВидРасчета КАК ВидРасчета,
	|	ПериодическиеНачисления.Сотрудник,
	|	ПериодическиеНачисления.ПериодНачисления,
	|	ПериодическиеНачисления.Регистратор
	|ПОМЕСТИТЬ СуществующиеЗаписи
	|ИЗ
	|	РегистрСведений.ПериодическиеНачисления КАК ПериодическиеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборЗаписей КАК НаборЗаписей
	|		ПО ПериодическиеНачисления.ПериодНачисления = НаборЗаписей.ПериодНачисления
	|			И ПериодическиеНачисления.Сотрудник = НаборЗаписей.Сотрудник
	|			И ПериодическиеНачисления.ВидРасчета = НаборЗаписей.ВидРасчета
	|			И ПериодическиеНачисления.Регистратор <> НаборЗаписей.ДокументОснование";
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
	ТекстЗапроса = ТекстЗапроса + "	
	|			И (ПериодическиеНачисления.Регистратор <> &ПерерассчитываемыйДокумент)";
	КонецЕсли;
	
	// поместим в таблицу записи, которые сделаны отсторнированными документами
	ТекстЗапроса = ТекстЗапроса + "	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сторнирование.Ссылка КАК ДокументСторно,
	|	СуществующиеЗаписи.Регистратор
	|ПОМЕСТИТЬ ДокументыСторно
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Сторнирование КАК Сторнирование
	|		ПО СуществующиеЗаписи.Регистратор = Сторнирование.СторнируемыйДокумент
	|;
	|";
	
	// поместим записи, которые сделаны исправленными документами
	ТекстЗапроса = ТекстЗапроса + "	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка КАК ДокументИсправление,
	|	СуществующиеЗаписи.ВидРасчета,
	|	СуществующиеЗаписи.Сотрудник,
	|	СуществующиеЗаписи.Регистратор
	|ПОМЕСТИТЬ ДокументыИсправления
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
	|		ПО СуществующиеЗаписи.Регистратор = НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.ПерерассчитываемыйДокумент
	|			И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.Проведен
	|			И СуществующиеЗаписи.Сотрудник = НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник
	|			И СуществующиеЗаписи.ВидРасчета = НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПремииРаботниковОрганизацийНачисления.Ссылка,
	|	СуществующиеЗаписи.ВидРасчета,
	|	СуществующиеЗаписи.Сотрудник,
	|	СуществующиеЗаписи.Регистратор
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацийНачисления
	|		ПО СуществующиеЗаписи.Регистратор = ПремииРаботниковОрганизацийНачисления.Ссылка.ПерерассчитываемыйДокумент
	|			И ПремииРаботниковОрганизацийНачисления.Ссылка.Проведен
	|			И СуществующиеЗаписи.Сотрудник = ПремииРаботниковОрганизацийНачисления.Сотрудник
	|			И СуществующиеЗаписи.ВидРасчета = ПремииРаботниковОрганизацийНачисления.Ссылка.ВидРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка,
	|	СуществующиеЗаписи.ВидРасчета,
	|	СуществующиеЗаписи.Сотрудник,
	|	СуществующиеЗаписи.Регистратор
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления
	|		ПО СуществующиеЗаписи.Регистратор = РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.ПерерассчитываемыйДокумент
	|			И РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.Проведен
	|			И СуществующиеЗаписи.Сотрудник = РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Сотрудник
	|			И СуществующиеЗаписи.ВидРасчета = РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.ВидРасчета
	|;
	|";
	
	// выбираем те записи, которых нет ни в отсторнированных документах, ни в исправленных
	ТекстЗапроса = ТекстЗапроса + "	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуществующиеЗаписи.ВидРасчета КАК ВидРасчета,
	|	СуществующиеЗаписи.Сотрудник,
	|	СуществующиеЗаписи.ПериодНачисления,
	|	СуществующиеЗаписи.Регистратор
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыСторно КАК ДокументыСторно
	|		ПО СуществующиеЗаписи.Регистратор = ДокументыСторно.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИсправления КАК ДокументыИсправления
	|		ПО СуществующиеЗаписи.Регистратор = ДокументыИсправления.Регистратор
	|			И СуществующиеЗаписи.ВидРасчета = ДокументыИсправления.ВидРасчета
	|			И СуществующиеЗаписи.Сотрудник = ДокументыИсправления.Сотрудник
	|ГДЕ
	|	ДокументыИсправления.ДокументИсправление ЕСТЬ NULL 
	|	И ДокументыСторно.ДокументСторно ЕСТЬ NULL 
	|ИТОГИ ПО
	|	ВидРасчета";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаПоВидамРасчета = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоВидамРасчета.Следующий() Цикл
		Выборка = ВыборкаПоВидамРасчета.Выбрать();
		ТекстСотрудники = "";
		Сотрудников = 0;
		Пока Выборка.Следующий() Цикл
			Сотрудников = Сотрудников + 1;
			Если Сотрудников > 3 Тогда
				ТекстСотрудники = ТекстСотрудники + " и др.";
				Прервать;
			КонецЕсли;
			ТекстСотрудники = ТекстСотрудники + ?(ЗначениеЗаполнено(ТекстСотрудники), ", ", "") + ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Сотрудник); 
		КонецЦикла;
		Если Сотрудников = 1 Тогда
			ТекстВопроса = "Сотруднику " + ТекстСотрудники + " " 
			+ ВыборкаПоВидамРасчета.ВидРасчета + " уже начислена в этом периоде. 
			|Начислить повторно?";
		ИначеЕсли Сотрудников > 1 Тогда
			ТекстВопроса = "Сотрудникам " + ТекстСотрудники + " " 
			+ ВыборкаПоВидамРасчета.ВидРасчета + " уже начислена в этом периоде.
			|Начислить повторно?";
		Иначе
			Продолжить;
		КонецЕсли;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

Процедура УстановитьДоступностьФормыДляРедактирования(ДокументОбъект, ФормаДокумента) Экспорт
	
	Если НЕ ФормаДокумента.ТолькоПросмотр Тогда
		ФормаДокумента.ТолькоПросмотр = НастройкаПравДоступа.ДокументВЗакрытомПериоде(ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьФормыДляРедактирования

Процедура УстановитьЗаголовокФормыЗаписиФизлица(СтрокаОписания, ФизЛицо, ФормаЗаписи) Экспорт
	
	ФормаЗаписи.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	ФормаЗаписи.Заголовок = СтрокаОписания + ": " + ОбщегоНазначения.ПолучитьПредставленияОбъектов(ФизЛицо);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТКРЫТИЯ ФОРМ ОБЪЕКТОВ

// Процедура открывает форму списка регистра сведений ШтатноеРасписаниеОрганизаций
//
// Параметры
//		СтруктураПараметрыФормы - структура, содержит параметры которые необходимо передать в форму
//					или значения реквизитов обработки.
//					Ключ - имя реквизита формы или экспортной переменной, значение - его значение
//
Процедура ОткрытьФормуШтатноеРасписаниеОрганизаций(СтруктураПараметрыФормы = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураПараметрыФормы) = Тип("Массив") Тогда
		МассивПараметров = СтруктураПараметрыФормы;
		СтруктураПараметрыФормыПриОткрытии = ?(МассивПараметров.Количество() > 0, МассивПараметров[0], Неопределено);
	Иначе
		СтруктураПараметрыФормыПриОткрытии = СтруктураПараметрыФормы;
	КонецЕсли;
	
	Форма = РегистрыСведений.ШтатноеРасписаниеОрганизаций.ПолучитьФорму("ФормаСписка");
	Если СтруктураПараметрыФормыПриОткрытии <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, СтруктураПараметрыФормыПриОткрытии);
	КонецЕсли;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ОткрытьФормуЭлементаОрганизация(Организация, ИмяСтраницы = Неопределено, ИмяТекущегоЭлемента = Неопределено) Экспорт
	
	Если ТипЗнч(Организация) = Тип("Массив") Тогда
		МассивПараметров = Организация;
		ИмяТекущегоЭлемента = ?(МассивПараметров.Количество() = 3, МассивПараметров[2], Неопределено);
		ИмяСтраницы = ?(МассивПараметров.Количество() > 1, МассивПараметров[1], Неопределено);
		ОрганизацияДляОткрытия = ?(МассивПараметров.Количество() > 0, МассивПараметров[0], Неопределено);
	Иначе
		ОрганизацияДляОткрытия = Организация;
	КонецЕсли;
	
	Если ОрганизацияДляОткрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ОрганизацияДляОткрытия.ПолучитьФорму("ФормаЭлемента");
	Форма.Открыть();
	
	Если ИмяСтраницы <> Неопределено Тогда
		Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = Форма.ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(ИмяСтраницы);
	КонецЕсли;
	
	Если ИмяТекущегоЭлемента <> Неопределено Тогда
		Форма.ТекущийЭлемент = Форма.ЭлементыФормы.Найти(ИмяТекущегоЭлемента);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ

// В документах на одного сотрудника (отпуск, б/л и пр.) в зависимости от состояния 
// 	документа кнопки исправлений либо не показываются вообще, либо показывается одна из них
//
// Параметры
//	ПериодРегистрацииДокумента - дата - определяет месяц начисления документа
//  ДокументИсправлен, ДокументСторнирован - булево, флажки состояния документа
//	Кнопки - коллекция кнопок соответствующей панели документа
//  КнопкаИсправление, КнопкаОтменаИсправление - кнопки-эталоны
//
Процедура УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрацииДокумента, ДокументИсправлен, ДокументСторнирован, Кнопки, КнопкаИсправление, КнопкаОтменаИсправление) Экспорт
	
	Если Кнопки.Найти(КнопкаИсправление.Имя) <> Неопределено Или Кнопки.Найти(КнопкаОтменаИсправление.Имя) <> Неопределено Тогда
		СтароеИмя = Кнопки[Кнопки.Количество() - 1].Имя;
		НовоеИмя = "";
		Если Не ДокументСторнирован Тогда // Документ не был отсторнирован
			Если ДокументИсправлен Тогда  // Документ исправлен
				НовоеИмя = КнопкаОтменаИсправление.Имя;
			ИначеЕсли ПериодРегистрацииДокумента < НачалоМесяца(ОбщегоНазначенияЗК.ПолучитьРабочуюДату()) Тогда
				НовоеИмя = КнопкаИсправление.Имя;
			КонецЕсли;
		КонецЕсли;
		Если НовоеИмя <> СтароеИмя Тогда
			Кнопки.Удалить(Кнопки.Количество() - 1);
			Если НовоеИмя = КнопкаОтменаИсправление.Имя Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
			ИначеЕсли НовоеИмя = КнопкаИсправление.Имя Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправление);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не ДокументСторнирован Тогда // Документ не был отсторнирован
		Если ДокументИсправлен Тогда  // Документ исправлен
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
		ИначеЕсли ПериодРегистрацииДокумента < НачалоМесяца(ОбщегоНазначенияЗК.ПолучитьРабочуюДату()) Тогда
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает новый документ, заполняет его данными исправляемого документа 
// 	и предъявляет пользователю для дальнейшей работы
//
// Параметры
//	ИсправляемыйДокумент - тип ДокументОбъект.<Имя документа> - документ, для которого вводится исправление
//  ФормаИсправляемогоДокумента - форма этого документа
//  Сотрудники - массив сотрудников, по которым выполняется исправление; необязательный, если не указан - по всем
//
Функция ВвестиДокументИсправление(ИсправляемыйДокумент, ФормаИсправляемогоДокумента = Неопределено, Сотрудники = Неопределено, ПериодРегистрации = Неопределено) Экспорт 
	
	МД = ИсправляемыйДокумент.Метаданные();
	
	Если ИсправляемыйДокумент.Проведен ИЛИ МД.Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
		Если ФормаИсправляемогоДокумента <> Неопределено Тогда
			ТекстВопроса = "Для исправления необходимо записать документ. Продолжить?";
			Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ИсправляемыйДокумент, ФормаИсправляемогоДокумента, ТекстВопроса) Тогда
				Возврат Неопределено
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументОбъект.ПереносДанных") Тогда
			Исправление = Документы.НачислениеЗарплатыРаботникамОрганизаций.СоздатьДокумент();
		Иначе
			Исправление = Документы[МД.Имя].СоздатьДокумент();
		КонецЕсли;
		Если МД.Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
			Исправление.ПериодРегистрации = Макс(?(ЗначениеЗаполнено(ПериодРегистрации),ПериодРегистрации,НачалоМесяца(ОбщегоНазначенияЗК.ПолучитьРабочуюДату())),ДобавитьМесяц(ИсправляемыйДокумент.ПериодРегистрации,1));
		КонецЕсли;
		Исправление.ЗаполнитьПоПерерассчитываемомуДокументу(ИсправляемыйДокумент, Сотрудники);
		ФормаДокумента = Исправление.ПолучитьФорму(,,ИсправляемыйДокумент.Ссылка);
		ФормаДокумента.Открыть();
		
		Возврат ФормаДокумента
		
	Иначе
		РаботаСДиалогами.ВывестиПредупреждение("Исправить можно только проведенный документ!");
		Возврат Неопределено
		
	КонецЕсли;
	
КонецФункции

// Процедура собирает данные о существующих документах-исправлениях всех уровней,
// 	и формирует текст информирования пользователя, показывает его и запрашивает согласие 
// 	пользователя на удаление исправлений.
// 	Если пользователь согласился, очищает в найденных документах-исправлениях  
// 	поле, содержащее исправляемый документ и помечает документы на удаление.
//
// Параметры
//	ИсправленныйДокумент - тип ДокументСсылка.<Имя документа> - ошибочно исправленный документ
//	ИмяРеквизитаИсправляемыйДокумент - тип строка - имя поле, содержащего исправляемый документ 
//
Процедура ОтменитьИсправлениеДокумента(ИсправленныйДокумент, ИмяРеквизитаИсправляемыйДокумент = "ПерерассчитываемыйДокумент") Экспорт 
	
	МетаданныеДокумента = ИсправленныйДокумент.Метаданные();
	РежимПоиска = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "КритерийОтбора","ТаблицаДокумента");	
	ИмяДокумента = МетаданныеДокумента.Имя;
	Если ИмяДокумента = "ПереносДанных" Тогда // документ является исключением, т.к. исправляется документом другого вида
		ИмяДокумента = "НачислениеЗарплатыРаботникамОрганизаций"
	КонецЕсли;
	
	ИсправленияКОтмене = Новый Массив;
	Исправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ИсправленныйДокумент, РежимПоиска, ИмяДокумента, ИмяРеквизитаИсправляемыйДокумент);
	Пока ЗначениеЗаполнено(Исправление) Цикл
		
		Если РежимПоиска = "КритерийОтбора" Тогда
			ИсправлениеСледующегоУровня = Новый Массив;
			Для каждого Значение Из Исправление Цикл
				ИсправленияКОтмене.Добавить(Значение);
				Для каждого ЗначениеСледующегоУровня Из ПроведениеРасчетов.ПолучитьДокументИсправление(Значение, РежимПоиска, ИмяДокумента, ИмяРеквизитаИсправляемыйДокумент) Цикл
					ИсправлениеСледующегоУровня.Добавить(ЗначениеСледующегоУровня);
				КонецЦикла;
			КонецЦикла;
			Исправление = ИсправлениеСледующегоУровня;
		Иначе
			ИсправленияКОтмене.Добавить(Исправление);
			Исправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Исправление, РежимПоиска, ИмяДокумента, ИмяРеквизитаИсправляемыйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоИсправлений = ИсправленияКОтмене.Количество();
	Если ВсегоИсправлений <> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Исправления",ИсправленияКОтмене);
		
		Если МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МИНИМУМ(Документы.ПериодРегистрации) КАК ПериодРегистрацииС,
			|	МАКСИМУМ(Документы.ПериодРегистрации) КАК ПериодРегистрацииПо,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы.ПериодРегистрации) КАК ВсегоПериодовРегистрации
			|ИЗ
			|	Документ." + ИмяДокумента + " КАК Документы
			|ГДЕ
			|	Документы.Ссылка В (&Исправления)";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МИНИМУМ(Документы.Дата) КАК ПериодРегистрацииС,
			|	МАКСИМУМ(Документы.Дата) КАК ПериодРегистрацииПо,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(Документы.Дата, МЕСЯЦ)) КАК ВсегоПериодовРегистрации
			|ИЗ
			|	Документ." + ИмяДокумента + " КАК Документы
			|ГДЕ
			|	Документы.Ссылка В (&Исправления)";
		КонецЕсли;
		Запрос.Выполнить();
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если Выборка.ВсегоПериодовРегистрации = 1 Тогда
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г."
		ИначеЕсли Выборка.ВсегоПериодовРегистрации = 2 Тогда
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г. и "; 
			Месяц = Формат(Выборка.ПериодРегистрацииПо, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = ОписаниеПериода + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г." 
		Иначе
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 2, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = "в период с " + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г. по "; 
			Месяц = Формат(Выборка.ПериодРегистрацииПо, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 1, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = ОписаниеПериода + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г." 
		КонецЕсли;
		
		ТекстВопроса =  ОбщегоНазначения.ФормаМножественногоЧисла("Найден ","Найдено ","Найдено ",ВсегоИсправлений) + ВсегоИсправлений 
			+ ОбщегоНазначения.ФормаМножественногоЧисла(" документ-исправление"," документа-исправления"," документов-исправлений",ВсегоИсправлений) 
			+ ОбщегоНазначения.ФормаМножественногоЧисла(", зарегистрированный ",", зарегистрированных ",", зарегистрированных ",ВсегоИсправлений) 
			+ ОписаниеПериода + " Отменить исправления?";
		
		Ответ  = РаботаСДиалогами.ЗадатьВопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, КодВозвратаДиалога.ОК);
		Если Ответ = КодВозвратаДиалога.ОК Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			Заголовок = ОбщегоНазначения.КомментарийРасчета("Удаление документов-исправлений");
			Если ВсегоИсправлений > 1 Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Для Сч = 1 По ВсегоИсправлений Цикл
				Значение = ИсправленияКОтмене[ВсегоИсправлений - Сч];
				Документ = Значение.ПолучитьОбъект();
				ОбщегоНазначения.КомментарийРасчета("Документ №" + Документ.Номер + " от " + Документ.Дата + " обработан успешно. ", Заголовок, "Открыть", Значение);
				Документ[ИмяРеквизитаИсправляемыйДокумент] = Неопределено;
				Документ.ПометкаУдаления = Истина;
				Попытка
					Документ.Записать(?(Документ.Проведен, РежимЗаписиДокумента.ОтменаПроведения,РежимЗаписиДокумента.Запись));
				Исключение
					Если ВсегоИсправлений > 1 Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					ОбщегоНазначения.КомментарийРасчета("Документ №" + Документ.Номер + " от " + Документ.Дата + " удалить не удалось! Процедура отмены исправлений отменена. ", , "Открыть", Значение,Перечисления.ВидыСообщений.Ошибка);
					ОбработкаКомментариев.ПоказатьСообщения();
					Возврат;
				КонецПопытки;
			КонецЦикла;
			Если ВсегоИсправлений > 1 Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			ОбработкаКомментариев.ПоказатьСообщения();
			
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает имя и доступность кнопки ТекущийСотрудник механизма исправлений
//
// Параметры
//	ТипДанных - тип Тип.- определяет тип переданного текущего элемента: Сотрудник или Физлицо
//  ТекущийСотрудник - тип СправочникСсылка.СотрудникиОрганизаций или СправочникСсылка.ФизическиеЛица, текущий сотрудник формы
//  СотрудникиСИсправлениями - тип Соответствие, содержит всех сотрудников, чьи расчеты уже подвергались исправлениям
//  Кнопка - описываемая кнопка командной панели
//  ИмяБезСотрудника - строка, имя кнопки "по умолчанию"
//
Функция ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипДанных, ТекущийСотрудник, СотрудникиСИсправлениями, Кнопка, ИмяБезСотрудника = "Расчеты текущего сотрудника", ИмяССотрудником = "Расчеты") Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		Кнопка.Текст = ИмяБезСотрудника;
		Кнопка.Доступность = Истина;
		Возврат ""
		
	Иначе
		
		ФИО = ОбщегоНазначения.ПредставлениеРаботника(ТекущийСотрудник, 2);
		
		Кнопка.Текст = ИмяССотрудником + " " + ФИО;
		Кнопка.Доступность = (СотрудникиСИсправлениями[ТекущийСотрудник] = Неопределено);
		
		Возврат ФИО;
		
	КонецЕсли;
	
КонецФункции

// Процедура показывает документы исправления
// Параметры
//	ФормаДокумента - форма документа, из которой вызвана команда показа исправлений
//	Ссылка - ссылка на текущий документ, исправления которого необходимо показать
//  ДокументыИсправление - Массив документов, которые исправляли текущий документ
//	ДокументСторнирование - ссылка на документ Сторнирование, который сторнировал текущий документ
//
Процедура ПоказатьИсправления(ФормаДокумента, Ссылка, ДокументыИсправление, ДокументСторнирование = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ДокументыИсправление) Тогда
		Если ТипЗнч(ДокументыИсправление) = Тип("Массив") Тогда
			Если ДокументыИсправление.Количество() = 1 Тогда
				// если документ-исправление один, то откроем его
				ДокументыИсправление[0].ПолучитьФорму(, ФормаДокумента).Открыть();
				
			Иначе
				// откроем список документов, которые исправили текущий
				Форма = КритерииОтбора.ДокументыИсправления.ПолучитьФорму(, ФормаДокумента);
				Форма.ИсходныйДокумент = Ссылка;
				Форма.Открыть();
				
			КонецЕсли;
			
		Иначе
			// если документ-исправление один, то откроем его
			ДокументыИсправление.ПолучитьФорму(, ФормаДокумента).Открыть();
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДокументСторнирование) Тогда
		ДокументСторнирование.ПолучитьФорму(, ФормаДокумента).Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОписаниеСостоянияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, ДокументыИсправление) Экспорт
	
	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(ДокументыИсправление);
	
	НеЗаполнен = Не ЗначениеЗаполнено(ЭтотОбъект.Организация) Или ЭтотОбъект.РаботникиОрганизации.Количество() = 0;
	
	ЗаполненСОшибками =
		ЭтотОбъект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0
		ИЛИ ЭтаФорма.ДокументЗаполненСОшибками();
		
	ПеренесенИз77 = ЭтотОбъект.ДанныеПрошлойВерсии;
		
	ОписаниеСостоянияДокумента = ПолучитьОписаниеКадровогоДокумента(
		Не НеЗаполнен,
		ЗаполненСОшибками,
		ЭтотОбъект.Проведен,
		ЭтоИсправление,
		ДокументИсправлен,
		ПеренесенИз77);
	РаботаСДиалогами.ПоказатьИнформациюОДокументе(
		ЭтаФорма.ЭлементыФормы.НадписьПредупреждение,
		ЭтаФорма.ЭлементыФормы.ПолеКартинкиПредупреждение,
		ОписаниеСостоянияДокумента.ТекстСообщения,
		ОписаниеСостоянияДокумента.ВажностьСообщения);
	
КонецПроцедуры

Функция ПолучитьСотрудниковСКадровымиИсправлениями(ДокументыИсправление, ИмяДок)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Сотрудник
	|ИЗ
	|	Документ." + ИмяДок + ".РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка В(&Исправления)
	|	И Док.Сторно";
	
	Возврат ПроведениеРасчетов.СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса, ДокументыИсправление);
	
КонецФункции

Процедура УстановитьКнопкиИсправленияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументИсправлен, ИсправленВесьДокумент, ДокументыИсправление, СотрудникиИсправление)
	
	Если СотрудникиИсправление = Неопределено Тогда
		КнопкаИсправлениеВесьДокумент		= СтруктураМенюИсправление.ИсправлениеВесьДокумент;
		КнопкаОтменаИсправление				= СтруктураМенюИсправление.ОтменаИсправление;
	Иначе
		МенюИсправление						= СтруктураМенюИсправление.МенюИсправление;
		КнопкаИсправлениеТекущийСотрудник	= СтруктураМенюИсправление.ИсправлениеТекущийСотрудник;
		КнопкаИсправлениеВесьДокумент		= СтруктураМенюИсправление.ИсправлениеВесьДокумент;
		КнопкаИсправлениеСписокСотрудников	= СтруктураМенюИсправление.ИсправлениеСписокСотрудников;
		КнопкаОтменаИсправление				= СтруктураМенюИсправление.ОтменаИсправление;
	КонецЕсли;
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(ДокументыИсправление);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для Каждого СтрокаТЧ Из ЭтотОбъект.РаботникиОрганизации Цикл
				ИсправленВесьДокумент = СотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Кнопки = ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки;
	Если СотрудникиИсправление = Неопределено Тогда
		Если ДокументИсправлен Тогда
			Если Кнопки.Найти("Исправить") <> Неопределено Тогда
				Кнопки.Удалить(Кнопки.Исправить);
			КонецЕсли;
			Если Кнопки.Найти("ОтменитьИсправление") = Неопределено Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
			КонецЕсли;
			
		Иначе
			Если Кнопки.Найти("ОтменитьИсправление") <> Неопределено Тогда
				Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			КонецЕсли;
			Если Кнопки.Найти("Исправить") = Неопределено Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправлениеВесьДокумент.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправлениеВесьДокумент);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, МенюИсправление);
			
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправлениеТекущийСотрудник);
			
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправлениеВесьДокумент);
			
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность	= Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность		= Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность	= Не ИсправленВесьДокумент;
		
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
			
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Управляет видимостью элементов формы, зависящих от наличия исправленного документа
//
Процедура ОбновитьДоступностьЭлементовФормыДляКадровыхИсправлений(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление)
	
	ЭтоИсправление		= ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйДокумент);
	ДокументИсправлен	= ЗначениеЗаполнено(ДокументыИсправление);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если СотрудникиИсправление <> Неопределено И ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из ЭтотОбъект.РаботникиОрганизации Цикл
			ИсправленВесьДокумент = СотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭтаФорма.ТолькоПросмотр = ДокументИсправлен;
	УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	ЭтаФорма.ЭлементыФормы.Организация.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр Или ЭтоИсправление;
	
	УстановитьКнопкиИсправленияКадровогоДокумента(
		ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументИсправлен, ИсправленВесьДокумент, ДокументыИсправление, СотрудникиИсправление);
	
	Элементы = ЭтаФорма.ЭлементыФормы;
	
	Элементы.ПанельОткрытьИсправление.Свертка	= ?(ДокументИсправлен,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	Элементы.ПанельОткрытьИсходный.Свертка		= ?(ЭтоИсправление,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	
	Если СотрудникиИсправление <> Неопределено И Не ЭтаФорма.ТолькоПросмотр Тогда
		МожноЗаполнять = Не ЭтоИсправление;
		СоставМенюЗаполнить = Неопределено;
		Если Элементы.ДействияФормы.Кнопки.Найти("ПодменюЗаполнить") <> Неопределено Тогда
			СоставМенюЗаполнить = Элементы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
		КонецЕсли;
		Если Элементы.КоманднаяПанельРаботникиОрганизации.Кнопки.Найти("ПодменюЗаполнить") <> Неопределено Тогда
			СоставМенюЗаполнить = Элементы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить.Кнопки;
		КонецЕсли;
		Если СоставМенюЗаполнить <> Неопределено Тогда
			Для Каждого Кнопка Из СоставМенюЗаполнить Цикл
				Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель Тогда
					Кнопка.Доступность = МожноЗаполнять
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

Функция ОбновитьТекущегоСотрудникаДляКадровыхИсправлений(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник)
	
	ТекущиеДанные	= ЭтаФорма.ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		НовыйСотрудник = ТекущиеДанные.Сотрудник;
	Иначе
		НовыйСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ФИО = "";
	
	// Установим имя и доступность кнопки ТекущийСотрудник механизма исправлений
	Если ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.Найти("Исправить") <> Неопределено И ТекущийСотрудник <> НовыйСотрудник Тогда
		ФИО = ОбновитьКнопкуИсправленияРасчетовСотрудника(
			ТипЗнч(НовыйСотрудник),
			НовыйСотрудник,
			СотрудникиИсправление,
			ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник,
			"Строки текущего сотрудника",
			"Строки")
	КонецЕсли;
	
	ТекущийСотрудник = НовыйСотрудник;
	
КонецФункции


Процедура ИсправлениеКадровыхДокументовПередОткрытием(ЭтотОбъект, ЭтаФорма, ДокументыИсправление, СотрудникиИсправление) Экспорт
	
	Если Не ЭтотОбъект.ЭтоНовый() Тогда
		ДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ЭтотОбъект.Ссылка, "КритерийОтбора");
		ОбновитьОписаниеСостоянияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, ДокументыИсправление);
		Если ЗначениеЗаполнено(ДокументыИсправление) Тогда
			СотрудникиИсправление = ПолучитьСотрудниковСКадровымиИсправлениями(ДокументыИсправление, ЭтотОбъект.Метаданные().Имя);
		КонецЕсли;
		
	Иначе
		РаботаСДиалогами.ПоказатьИнформациюОДокументе(
			ЭтаФорма.ЭлементыФормы.НадписьПредупреждение,
			ЭтаФорма.ЭлементыФормы.ПолеКартинкиПредупреждение,
			"Документ не заполнен",
			"СообщениеОПроблемах");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовПриОткрытии(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление = Неопределено, СотрудникиИсправление = Неопределено) Экспорт
	
	Если СотрудникиИсправление = Неопределено Тогда
		СтруктураМенюИсправление = Новый Структура;
		СтруктураМенюИсправление.Вставить("ИсправлениеВесьДокумент",		ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить);
		СтруктураМенюИсправление.Вставить("ОтменаИсправление",				ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление);
	Иначе
		МенюИсправление = ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
		СтруктураМенюИсправление = Новый Структура;
		СтруктураМенюИсправление.Вставить("МенюИсправление",				МенюИсправление);
		СтруктураМенюИсправление.Вставить("ИсправлениеТекущийСотрудник",	МенюИсправление.Кнопки.ТекущийСотрудник);
		СтруктураМенюИсправление.Вставить("ИсправлениеВесьДокумент",		МенюИсправление.Кнопки.ВесьДокумент);
		СтруктураМенюИсправление.Вставить("ИсправлениеСписокСотрудников",	МенюИсправление.Кнопки.СписокСотрудников);
		СтруктураМенюИсправление.Вставить("ОтменаИсправление",				ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление);
		ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	КонецЕсли;
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормыДляКадровыхИсправлений(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление);
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление = Неопределено, СотрудникиИсправление = Неопределено) Экспорт
	
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтотОбъект.ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = ЭтотОбъект.Ссылка Тогда
						Если СотрудникиИсправление = Неопределено И ДокументыИсправление = Неопределено Тогда
							ДокументыИсправление = Источник;
							
						ИначеЕсли СотрудникиИсправление <> Неопределено И ДокументыИсправление.Найти(Источник) = Неопределено Тогда
							ДокументыИсправление.Добавить(Источник);
							СотрудникиИсправление = ПолучитьСотрудниковСКадровымиИсправлениями(ДокументыИсправление, ЭтотОбъект.Метаданные().Имя);
							
						КонецЕсли;
						
						ОбновитьДоступностьЭлементовФормыДляКадровыхИсправлений(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовОбработкаВыбора(ЗначениеВыбора, Источник, ЭтотОбъект, ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник) Экспорт
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			ОбновитьТекущегоСотрудникаДляКадровыхИсправлений(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник);
			
		ИначеЕсли ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовПослеЗаписи(ЭтотОбъект) Экспорт
	
	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ЭтотОбъект.ИсправляемыйДокумент), ЭтотОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, КоманднаяПанель, СотрудникиИсправление = Неопределено, ТекущийСотрудник = Неопределено) Экспорт
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	МожноРедактироватьСтроку = (ДанныеСтроки = Неопределено Или Не ДанныеСтроки.Сторно)
		И (СотрудникиИсправление = Неопределено ИЛИ СотрудникиИсправление[ТекущийСотрудник] = Неопределено);
	КоманднаяПанель.Кнопки.Скопировать.Доступность			= МожноРедактироватьСтроку;
	Элемент.КонтекстноеМеню.Кнопки.Скопировать.Доступность	= МожноРедактироватьСтроку;
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовПриАктивизацииСтрокиОбработчикОжидания(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник) Экспорт
	
	ОбновитьТекущегоСотрудникаДляКадровыхИсправлений(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник);
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок, СотрудникиИсправление = Неопределено) Экспорт
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Для Каждого Ячейка Из Ячейки Цикл
				Ячейка.ТолькоПросмотр = Истина;
			КонецЦикла;
		КонецЕсли;
		
		Если СотрудникиИсправление <> Неопределено И СотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовПриОкончанииРедактирования(ОтменаРедактирования, ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник) Экспорт
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьТекущегоСотрудникаДляКадровыхИсправлений(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник);
	КонецЕсли;
	
КонецПроцедуры


Процедура ВвестиКадровоеИсправлениеТекущегоСотрудника(ЭтотОбъект, ЭтаФорма, ТекущийСотрудник) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Не выбран сотрудник для исправления расчетов!");
		Возврат;
	КонецЕсли;
	
	ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ТекущийСотрудник);
	
КонецПроцедуры

Процедура ВвестиКадровоеИсправлениеСпискаСотрудников(ЭтотОбъект, ЭтаФорма, СотрудникиИсправление) Экспорт
	
	Если Не ЭтотОбъект.Проведен Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Исправить можно только проведенный документ!");
		Возврат;
	КонецЕсли;
		
	ТекстВопроса = "Для исправления необходимо записать документ. Продолжить?";
	Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	МД = ЭтотОбъект.Метаданные();
	
	СписокСотрудников = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Сотрудник,
	|	Док.Сотрудник.Наименование КАК Наименование
	|ИЗ
	|	Документ." + МД.Имя + ".РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
			СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
		КонецЕсли;
	КонецЦикла;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, ЭтотОбъект.Ссылка);
	Форма.СписокСотрудников = СписокСотрудников;
	Форма.Заголовок = "Сотрудники документа " + МД.Синоним + " №" + ЭтотОбъект.Номер + " от " + Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	Форма.Открыть();
	
КонецПроцедуры

// Процедура отмены документов-исправлений
//
Процедура ОтменитьКадровоеИсправление(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление = Неопределено, ТекущийСотрудник = Неопределено) Экспорт
	
	ОтменитьИсправлениеДокумента(ЭтотОбъект.Ссылка, "ИсправляемыйДокумент");
	
	ДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ЭтотОбъект.Ссылка, "КритерийОтбора");
	
	Если СотрудникиИсправление <> Неопределено Тогда
		СотрудникиИсправление = ПолучитьСотрудниковСКадровымиИсправлениями(ДокументыИсправление, ЭтотОбъект.Метаданные().Имя);
	КонецЕсли;
	ОбновитьДоступностьЭлементовФормыДляКадровыхИсправлений(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление);
	
	Если СотрудникиИсправление <> Неопределено Тогда
		ОбновитьКнопкуИсправленияРасчетовСотрудника(
			ТипЗнч(ТекущийСотрудник),
			ТекущийСотрудник,
			СотрудникиИсправление,
			ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник,
			"Строки текущего сотрудника",
			"Строки");
	КонецЕсли;
	
	ЭтаФорма.Обновить();
	
КонецПроцедуры

Процедура ОткрытьИсходныйДокумент(ЭтотОбъект, ЭтаФорма) Экспорт
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйДокумент) Тогда
		ЭтотОбъект.ИсправляемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ КОМАНД ГЛАВНОГО МЕНЮ И РАБОЧЕГО СТОЛА

// Функция открывает форму обработки ИндексацияИПерерасчетПособийНаДетей или возвращает ее
Функция ОткрытьПерерасчетПособийНаДетей(Режим = "Перерасчет", ОткрытьФорму = Истина) Экспорт
	
	Если Режим = "Перерасчет" Тогда
		ФормаОбработки = Обработки.ИндексацияИПерерасчетПособийНаДетейЗаСчетФСС.ПолучитьФорму(,,"Перерасчет");
	Иначе
		ФормаОбработки = Обработки.ИндексацияИПерерасчетПособийНаДетейЗаСчетФСС.ПолучитьФорму();
	КонецЕсли;
	
	Если ОткрытьФорму Тогда
		ФормаОбработки.Открыть();
		Возврат Неопределено
	Иначе
		Возврат ФормаОбработки
	КонецЕсли;
	
КонецФункции

Процедура ОткрытьПерерасчетПособийНаДетейИзИнтерфейса() Экспорт
	
	ОткрытьПерерасчетПособийНаДетей("Перерасчет")
	
КонецПроцедуры

Процедура ОткрытьФормуМедицинскогоСтрахования() Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.МедицинскиеСтраховыеПолисы) Тогда
		Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуСписка(,, "ФормаМедицинскогоСтрахования");
		Форма.мРежимРаботыФормы = "ФормаМедицинскогоСтрахования";
		Форма.Открыть();
		
	Иначе
		Предупреждение("Нарушение прав доступа!");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуОстатковОтпусков() Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ОстаткиОтпусковОрганизаций) Тогда
		Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуСписка(,, "ФормаОстатковОтпусков");
		Форма.мРежимРаботыФормы = "ФормаОстатковОтпусков";
		Форма.Открыть();
		
	Иначе
		Предупреждение("Нарушение прав доступа!");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Формирует представление переданного вида дохода с "предметной" точки зрения
//
// Параметры
//  , ВидДохода - СправочникСсылка.ДоходыПоСтраховымВзносам - описываемый вид дохода
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПредставлениеВидаДоходаПоСтраховымВзносам(ВидДохода) Экспорт
	
	Если ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДоговорыГПХ Тогда
		РасшифровкаВидДохода = "Вознаграждения, выплачиваемые по договорам гражданско-правового характера. Облагаются страховыми взносами в ПФР и ФОМС целиком, не облагаются страховыми взносами в ФСС (пункт 2 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.Матпомощь Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ПФР, ФОМС и ФСС частично (пункт 11 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ПФР, ФОМС и ФСС частично (подпункт в) пункта 3 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом Тогда
		РасшифровкаВидДохода = "Является объектом обложения, но не облагается целиком страховыми взносами в ПФР, ФОМС и ФСС на основании части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ (кроме пособий по социальному страхованию за счет ФСС, частично облагаемой материальной помощи и денежного довольствия)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.НеЯвляетсяОбъектом Тогда
		РасшифровкаВидДохода = "Не является объектом обложения страховыми взносами в ПФР, ФОМС и ФСС в соответствии с частями 3 и 4 статьи 7 Федерального закона от 24 июля 2009 года № 212-ФЗ"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ОблагаетсяЦеликом Тогда
		РасшифровкаВидДохода = "Облагается целиком страховыми взносами в ПФР, ФОМС и ФСС"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС Тогда
		РасшифровкаВидДохода = "Не облагаются целиком страховыми взносами в ПФР, ФОМС и ФСС в соответствии с пунктом 1 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.РаспределятьПоБазовымНачислениям Тогда
		РасшифровкаВидДохода = "Порядок учета начисления определяется по расчетной базе"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДенежноеДовольствиеВоеннослужащих Тогда
		РасшифровкаВидДохода = "Не облагается целиком страховыми взносами в ПФР, ФОМС и ФСС в соответствии с пунктом 14 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДенежноеСодержаниеПрокуроров Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ФСС и ФОМС целиком, не облагаются страховыми взносами в ПФР (пункт 1 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ПустаяСсылка() Тогда
		РасшифровкаВидДохода = "Не указан порядок учета начисления для целей исчисления страховых взносов в ПФР, ФОМС и ФСС"
	ИначеЕсли ЗначениеЗаполнено(ВидДохода) Тогда // различные авторские
		РасшифровкаВидДохода = "При исчислении страховых взносов в ПФР, ФОМС учитываются произведенные расходы согласно части 7 статьи 8 Федерального закона от 24 июля 2009 года № 212-ФЗ, не облагаются страховыми взносами в ФСС (пункт 2 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	Иначе
		РасшифровкаВидДохода = "Не отражается в учете для целей исчисления взносов в ПФР, ФОМС и ФСС"
	КонецЕсли;
	
	Возврат РасшифровкаВидДохода	
	
КонецФункции // ПолучитьПредставлениеКодаДоходаПоЕСН()

// Формирует представление переданного вида дохода с "предметной" точки зрения
//
// Параметры
//  , ВидНачисления - ПеречислениеСсылка.ВидыНачисленийОплатыТрудаПоСт255НК - описываемый вид дохода
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПолучитьПредставлениеВидаДоходаПоНУ(ВидНачисления) Экспорт
	
	Если ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп1ст255 Тогда
		РасшифровкаВидНачисления = "Суммы, начисленные по тарифным ставкам, должностным окладам, сдельным расценкам или в процентах от выручки в соответствии с принятыми формами и системами оплаты труда"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп2ст255 Тогда
		РасшифровкаВидНачисления = "Начисления стимулирующего характера, в том числе премии за производственные результаты, надбавки к тарифным ставкам и окладам за профессиональное мастерство, высокие достижения в труде и иные подобные показатели"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп3ст255 Тогда
		РасшифровкаВидНачисления = "Начисления стимулирующего и/или компенсирующего характера, связанные с режимом работы и условиями труда, в том числе надбавки к тарифным ставкам и окладам за работу в ночное время, работу в многосменном режиме, за совмещение профессий, расширение зон обслуживания, за работу в тяжелых, вредных, особо вредных условиях труда, за сверхурочную работу и работу в выходные и праздничные дни, производимые в соответствии с законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп4ст255 Тогда
		РасшифровкаВидНачисления = "Стоимость бесплатно предоставляемых работникам в соответствии с законодательством РФ коммунальных услуг, питания и продуктов, предоставляемого работникам в соответствии с установленным законодательством РФ порядком бесплатного жилья"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп5ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на приобретение (изготовление) выдаваемых в соответствии с законодательством РФ работникам бесплатно либо продаваемых работникам по пониженным ценам форменной одежды и обмундирования (в части стоимости, не компенсируемой работниками), которые остаются в личном постоянном пользовании работников"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп6ст255 Тогда
		РасшифровкаВидНачисления = "Сумма начисленного работникам среднего заработка, сохраняемого на время выполнения ими государственных и (или) общественных обязанностей и в других случаях, предусмотренных законодательством РФ о труде"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп7ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда, сохраняемую работникам на время отпуска, предусмотренного законодательством РФ, фактические расходы на оплату проезда работников и лиц, находящихся у этих работников на иждивении, к месту использования отпуска на территории РФ и обратно; доплата несовершеннолетним за сокращенное рабочее время, расходы на оплату перерывов в работе матерей для кормления ребенка, а также расходы на оплату времени, связанного с прохождением медицинских осмотров"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп8ст255 Тогда
		РасшифровкаВидНачисления = "Денежные компенсации за неиспользованный отпуск в соответствии с трудовым законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп9ст255 Тогда
		РасшифровкаВидНачисления = "Начисления работникам, высвобождаемым в связи с реорганизацией или ликвидацией организации, сокращением численности или штата работников"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп10ст255 Тогда
		РасшифровкаВидНачисления = "Единовременные вознаграждения за выслугу лет (надбавки за стаж работы по специальности) в соответствии с законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп11ст255 Тогда
		РасшифровкаВидНачисления = "Надбавки, обусловленные районным регулированием оплаты труда, в том числе начисления по районным коэффициентам и коэффициентам за работу в тяжелых природно-климатических условиях"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп12ст255 Тогда
		РасшифровкаВидНачисления = "Надбавки за непрерывный стаж работы в районах Крайнего Севера и приравненных к ним местностях, в районах европейского Севера и других районах с тяжелыми природно-климатическими условиями"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп12_1ст255 Тогда
		РасшифровкаВидНачисления = "Стоимость проезда по фактическим расходам и стоимость провоза багажа из расчета не более 5 тонн на семью по фактическим расходам, но не выше тарифов, предусмотренных для перевозок железнодорожным транспортом сотруднику организации, расположенной в районах Крайнего Севера и приравненных к ним местностях, и членам его семьи в случае переезда к новому месту жительства в другую местность в связи с расторжением трудового договора с сотрудником по любым основаниям, в том числе в случае его смерти, за исключением увольнения за виновные действия"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп13ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда, сохраняемую в соответствии с законодательством РФ на время учебных отпусков, предоставляемых работникам, а также расходы на оплату проезда к месту учебы и обратно"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп14ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда за время вынужденного прогула или время выполнения нижеоплачиваемой работы в случаях, предусмотренных законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп15ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на доплату до фактического заработка в случае временной утраты трудоспособности, установленную законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп16ст255 Тогда
		РасшифровкаВидНачисления = "Суммы платежей (взносов) по договорам обязательного страхования, а также суммы платежей (взносов) по договорам добровольного страхования (договорам негосударственного пенсионного обеспечения), заключенным в пользу работников со страховыми организациями (негосударственными пенсионными фондами), имеющими лицензии, выданные в соответствии с законодательством РФ, на ведение соответствующих видов деятельности в РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп17ст255 Тогда
		РасшифровкаВидНачисления = "Суммы, начисленные в размере тарифной ставки или оклада (при выполнении работ вахтовым методом), предусмотренные коллективными договорами, за дни нахождения в пути от места нахождения организации (пункта сбора) к месту работы и обратно, предусмотренные графиком работы на вахте, а также за дни задержки работников в пути по метеорологическим условиям"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп18ст255 Тогда
		РасшифровкаВидНачисления = "Суммы, начисленные за выполненную работу физическим лицам, привлеченным для работы согласно специальным договорам на предоставление рабочей силы с государственными организациями"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп19ст255 Тогда
		РасшифровкаВидНачисления = "В случаях, предусмотренных законодательством РФ, начисления по основному месту работы рабочим, руководителям или специалистам налогоплательщика во время их обучения с отрывом от работы в системе повышения квалификации или переподготовки кадров"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп20ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда работников-доноров за дни обследования, сдачи крови и отдыха, предоставляемые после каждого дня сдачи крови"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп21ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда работников, не состоящих в штате организации, за выполнение ими работ по заключенным договорам гражданско-правового характера (включая договоры подряда), за исключением оплаты труда по договорам гражданско-правового характера, заключенным с индивидуальными предпринимателями"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп22ст255 Тогда
		РасшифровкаВидНачисления = "Предусмотренные законодательством РФ начисления военнослужащим, проходящим военную службу на государственных унитарных предприятиях и в строительных организациях федеральных органов исполнительной власти, в которых законодательством РФ предусмотрена военная служба, и лицам рядового и начальствующего состава органов внутренних дел, Государственной противопожарной службы, предусмотренные федеральными законами, законами о статусе военнослужащих и об учреждениях и органах, исполняющих уголовные наказания в виде лишения свободы"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп23ст255 Тогда
		РасшифровкаВидНачисления = "Доплаты инвалидам, предусмотренные законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп24ст255 Тогда
		РасшифровкаВидНачисления = "Расходы в виде отчислений в резерв на предстоящую оплату отпусков работникам и (или) в резерв на выплату ежегодного вознаграждения за выслугу лет, осуществляемые в соответствии со статьей 324.1 НК"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп25ст255 Тогда
		РасшифровкаВидНачисления = "Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором"
	ИначеЕсли ВидНачисления.Пустая() Тогда
		РасшифровкаВидНачисления = "Не учитывается в расходах на оплату труда"
	КонецЕсли;
	
	Возврат РасшифровкаВидНачисления	
	
КонецФункции // ПолучитьПредставлениеВидаДоходаПоНУ()

 // Выводит надпись и соответствующую ей картинку
//
// Параметры
//  ЭУНадпись, ЭУКартинка - элементы управления формы, соответственно надпись и картинка
//  ТекстСообщения - строка - выводимое сообщение
//  ВажностьСообщения - строка - определяет расцветку текста и картинку
//		допустимые значения: "СообщениеОПроблемах", "ВажнаяИнформация" и "Информация"
//
Процедура ПоказатьИнформациюОДокументе(ЭУНадпись = Неопределено, ЭУКартинка = Неопределено, ТекстСообщения = "", ВажностьСообщения = "") Экспорт 
	
	Если ЭУНадпись = Неопределено Или ЭУКартинка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ВажностьСообщения = "ВажнаяИнформация" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеВажнаяИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияВажнойИнформации;
	ИначеЕсли ВажностьСообщения = "СообщениеОПроблемах" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОПроблемах;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
	ИначеЕсли ВажностьСообщения = "Ошибка" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОшибка;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
	Иначе
		ЭУКартинка.Картинка	= БиблиотекаКартинок.СообщениеИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияИнформации;
	КонецЕсли;
	ЭУНадпись.Заголовок = ТекстСообщения;
	
КонецПроцедуры // ПоказатьИнформациюОДокументе()





