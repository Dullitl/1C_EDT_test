
// В модуле содержатся процедуры и функции механизма загрузки данных из Биллинга

/////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ

// Процедура создает/заменяет строки реквизитов объекта в табличной части "ПоляФайла"
// элемента справочника "абс_ПравилаЗагрузкиПакетовДанных" по переданным в параметре
// старому и новому значениям Объекта
//
// Параметры:
//  ЭлементСправочника - элемент-объект справочника "абс_ПравилаЗагрузкиПакетовДанных"
//  РеквизитНазначения - строка, имя заполняемого реквизита объекта-назначения загрузки
//  СтарыйОбъект - старое значение объекта - ссылка на любой элемент выбранного типа объекта
//  НовыйОбъект - новое значение объекта - ссылка на любой элемент выбранного типа объекта
//  ИмяСтаройТабличнойЧасти - строка, имя старой табличной части объекта (при загрузке в таб. часть)
//  ИмяНовойТабличнойЧасти - строка, имя новой табличной части объекта (при загрузке в таб. часть)
//
Процедура СформироватьСтрокиПравилЗагрузкиПакетаДанныхПоОбъекту(ЭлементСправочника, Знач РеквизитНазначения = "", Знач СтарыйОбъект = Неопределено, Знач НовыйОбъект = Неопределено, Знач ИмяСтаройТабличнойЧасти = "", Знач ИмяНовойТабличнойЧасти = "", Знач ЗагрузкаВТабличнуюЧасть = Ложь) Экспорт
	
	Если РеквизитНазначения = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнениеПоОдномуИТомуЖеОбъекту = Ложь;
	ПерезаполнениеПоОднойИТойЖеТабличнойЧасти = Ложь;
	
	// преобразуем простые типы и ссылки на перечисления к значению Неопределено
	Если СтарыйОбъект <> Неопределено Тогда
		ТипСтарогоОбъекта = ТипЗнч(СтарыйОбъект);
		Если ТипСтарогоОбъекта = Тип("Строка") ИЛИ ТипСтарогоОбъекта = Тип("Число") ИЛИ
			ТипСтарогоОбъекта = Тип("Булево") ИЛИ ТипСтарогоОбъекта = Тип("Дата") Тогда
			СтарыйОбъект = Неопределено;
			// и удалим единственную строку старого объекта
			Сч = ЭлементСправочника.ПоляФайла.Количество() - 1;
			Пока Сч >= 0 Цикл
				Если СокрЛП(ЭлементСправочника.ПоляФайла[Сч].РеквизитНазначения) = СокрЛП(РеквизитНазначения) Тогда
					ЭлементСправочника.ПоляФайла.Удалить(Сч);
				КонецЕсли;
				Сч = Сч - 1;
			КонецЦикла;
		Иначе
			Если Метаданные.Справочники.Найти(СтарыйОбъект.Метаданные().Имя) = Неопределено И
				Метаданные.Документы.Найти(СтарыйОбъект.Метаданные().Имя) = Неопределено Тогда
				// это перечисление или план счетов, поэтому
				СтарыйОбъект = Неопределено;
				Сч = ЭлементСправочника.ПоляФайла.Количество() - 1;
				Пока Сч >= 0 Цикл
					Если СокрЛП(ЭлементСправочника.ПоляФайла[Сч].РеквизитНазначения) = СокрЛП(РеквизитНазначения) Тогда
						ЭлементСправочника.ПоляФайла.Удалить(Сч);
					КонецЕсли;
					Сч = Сч - 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	                                               
	Если НовыйОбъект <> Неопределено Тогда
		ТипНовогоОбъекта = ТипЗнч(НовыйОбъект);
		Если ТипНовогоОбъекта = Тип("Строка") ИЛИ ТипНовогоОбъекта = Тип("Число") ИЛИ
			ТипНовогоОбъекта = Тип("Булево") ИЛИ ТипНовогоОбъекта = Тип("Дата") Тогда
			// добавим одну строку
			НСтрока = ЭлементСправочника.ПоляФайла.Добавить();
			НСтрока.ЗагрузкаВТабличнуюЧасть = Ложь;
			НСтрока.ИмяРеквизита = РеквизитНазначения;
			НСтрока.Объект = НовыйОбъект;
			НСтрока.ПредставлениеРеквизита = НСтрока.ИмяРеквизита;
			НСтрока.РеквизитНазначения = РеквизитНазначения;
			НСтрока.ТабличнаяЧасть = "";
			НовыйОбъект = Неопределено;
		Иначе
			Если Метаданные.Справочники.Найти(НовыйОбъект.Метаданные().Имя) = Неопределено И
				Метаданные.Документы.Найти(НовыйОбъект.Метаданные().Имя) = Неопределено Тогда
				// это перечисление или план счетов, поэтому
				НСтрока = ЭлементСправочника.ПоляФайла.Добавить();
				НСтрока.ЗагрузкаВТабличнуюЧасть = Ложь;
				НСтрока.ИмяРеквизита = РеквизитНазначения;
				НСтрока.Объект = НовыйОбъект;
				НСтрока.ПредставлениеРеквизита = НСтрока.ИмяРеквизита;
				НСтрока.РеквизитНазначения = РеквизитНазначения;
				НСтрока.ТабличнаяЧасть = "";
				НовыйОбъект = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	
	Если Не ЗагрузкаВТабличнуюЧасть И ТипЗнч(СтарыйОбъект) = ТипЗнч(НовыйОбъект) Тогда
		ПерезаполнениеПоОдномуИТомуЖеОбъекту = Истина;
	ИначеЕсли ЗагрузкаВТабличнуюЧасть И ТипЗнч(СтарыйОбъект) = ТипЗнч(НовыйОбъект) И
		ИмяСтаройТабличнойЧасти = ИмяНовойТабличнойЧасти Тогда
		ПерезаполнениеПоОднойИТойЖеТабличнойЧасти = Истина;
	КонецЕсли;
	
	ТаблицаИндексовСтрокСтарых = Новый ТаблицаЗначений;
	ТаблицаИндексовСтрокСтарых.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаИндексовСтрокНовых = Новый ТаблицаЗначений;
	ТаблицаИндексовСтрокНовых.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	
	Если НовыйОбъект <> Неопределено Тогда
		Если Метаданные.Справочники.Найти(НовыйОбъект.Метаданные().Имя) <> Неопределено Тогда
			ЭтоСправочник = Истина;
			ЭтоДокумент = Ложь;
		ИначеЕсли Метаданные.Документы.Найти(НовыйОбъект.Метаданные().Имя) <> Неопределено Тогда
			ЭтоСправочник = Ложь;
			ЭтоДокумент = Истина;
		Иначе
			ЭтоСправочник = Ложь;
			ЭтоДокумент = Ложь;
		КонецЕсли;
		
		СтруктураИменРеквизитов = Новый Структура;
		Если ЗагрузкаВТабличнуюЧасть Тогда
			Для Каждого ТекРеквизит Из НовыйОбъект.Метаданные().ТабличныеЧасти[ИмяНовойТабличнойЧасти].Реквизиты Цикл
				СтруктураИменРеквизитов.Вставить(ТекРеквизит.Имя, Ложь);
			КонецЦикла;
		Иначе
			Для Каждого ТекРеквизит Из НовыйОбъект.Метаданные().Реквизиты Цикл
				СтруктураИменРеквизитов.Вставить(ТекРеквизит.Имя, Ложь);
			КонецЦикла;
			Если ЭтоСправочник Тогда
				Если НовыйОбъект.Метаданные().ДлинаКода > 0 Тогда
					СтруктураИменРеквизитов.Вставить("Код", Ложь);
				КонецЕсли;
				Если НовыйОбъект.Метаданные().ДлинаНаименования > 0 Тогда
					СтруктураИменРеквизитов.Вставить("Наименование", Ложь);
				КонецЕсли;
				Если НовыйОбъект.Метаданные().Владельцы.Количество() > 0 Тогда
					СтруктураИменРеквизитов.Вставить("Владелец", Ложь);
				КонецЕсли;
				Если НовыйОбъект.Метаданные().Иерархический Тогда
					СтруктураИменРеквизитов.Вставить("Родитель", Ложь);
				КонецЕсли;
			ИначеЕсли ЭтоДокумент Тогда
				Если НовыйОбъект.Метаданные().ДлинаНомера > 0 Тогда
					СтруктураИменРеквизитов.Вставить("Номер", Ложь);
				КонецЕсли;
				СтруктураИменРеквизитов.Вставить("Дата", Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗагрузкаВТабличнуюЧасть Тогда // загрузка в табличную часть
		Если ПерезаполнениеПоОднойИТойЖеТабличнойЧасти Тогда
			// ищем только строки новой таб. части и перепроверяем их заполнение
			Если НовыйОбъект <> Неопределено И ИмяНовойТабличнойЧасти <> "" Тогда
				
				ТипНовогоОбъекта = ТипЗнч(НовыйОбъект);
								
				Для Каждого ТекСтрока Из ЭлементСправочника.ПоляФайла Цикл
					Если ТекСтрока.ЗагрузкаВТабличнуюЧасть И ТипЗнч(ТекСтрока.Объект) = ТипНовогоОбъекта И
						ТекСтрока.ТабличнаяЧасть = ИмяНовойТабличнойЧасти И 
						ТекСтрока.РеквизитНазначения = РеквизитНазначения Тогда
						// найдем в табличной части объекта реквизит по имени
						Если СтруктураИменРеквизитов.Свойство(ТекСтрока.ИмяРеквизита) <> Неопределено Тогда
							СтруктураИменРеквизитов[ТекСтрока.ИмяРеквизита] = Истина;
						Иначе // строку необходимо удалить
							НСтрока = ТаблицаИндексовСтрокНовых.Добавить();
							НСтрока.ИндексСтроки = ЭлементСправочника.ПоляФайла.Индекс(ТекСтрока);
						КонецЕсли;							
					КонецЕсли;
				КонецЦикла;
				
				// теперь удалим лишние строки и добавим строки для реквизитов, для которых их еще нет
				ТаблицаИндексовСтрокНовых.Сортировать("ИндексСтроки УБЫВ");
				Для Каждого ТекСтрока Из ТаблицаИндексовСтрокНовых Цикл
					ЭлементСправочника.ПоляФайла.Удалить(ТекСтрока.ИндексСтроки);
				КонецЦикла;
				
				// добавим строки для тех реквизитов, для которых их нет
				Для Каждого ЭлементСтруктуры Из СтруктураИменРеквизитов Цикл
					Если Не ЭлементСтруктуры.Значение Тогда
						НСтрока = ЭлементСправочника.ПоляФайла.Добавить();
						НСтрока.ЗагрузкаВТабличнуюЧасть = Истина;
						НСтрока.Объект = НовыйОбъект;
						НСтрока.ИмяРеквизита = ЭлементСтруктуры.Ключ;
						Если НСтрока.ИмяРеквизита = "Код" ИЛИ НСтрока.ИмяРеквизита = "Наименование" ИЛИ
							НСтрока.ИмяРеквизита = "Номер" ИЛИ НСтрока.ИмяРеквизита = "Владелец" ИЛИ
							НСтрока.ИмяРеквизита = "Родитель" Тогда
							НСтрока.ПредставлениеРеквизита = НСтрока.ИмяРеквизита;
						Иначе
							НСтрока.ПредставлениеРеквизита = НовыйОбъект.Метаданные().ТабличныеЧасти[ИмяНовойТабличнойЧасти].Реквизиты[ЭлементСтруктуры.Ключ].Синоним;
						КонецЕсли;
						НСтрока.ТабличнаяЧасть = ИмяНовойТабличнойЧасти;
						НСтрока.РеквизитНазначения = РеквизитНазначения;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// получим таблицу индексов строк, которые удалим
			Если СтарыйОбъект <> Неопределено И ИмяСтаройТабличнойЧасти <> "" Тогда
				ТипСтарогоОбъекта = ТипЗнч(СтарыйОбъект);
				Для Каждого ТекСтрока Из ЭлементСправочника.ПоляФайла Цикл
					Если ТекСтрока.ЗагрузкаВТабличнуюЧасть И ТипЗнч(ТекСтрока.Объект) = ТипСтарогоОбъекта И
						ТекСтрока.ТабличнаяЧасть = ИмяСтаройТабличнойЧасти И 
						ТекСтрока.РеквизитНазначения = РеквизитНазначения Тогда
						НСтрока = ТаблицаИндексовСтрокСтарых.Добавить();
						НСтрока.ИндексСтроки = ЭлементСправочника.ПоляФайла.Индекс(ТекСтрока);
					КонецЕсли;
				КонецЦикла;
				// удалим строки табличной части
				ТаблицаИндексовСтрокСтарых.Сортировать("ИндексСтроки УБЫВ");
				Для Каждого ТекСтрока Из ТаблицаИндексовСтрокСтарых Цикл
					ЭлементСправочника.ПоляФайла.Удалить(ТекСтрока.ИндексСтроки);
				КонецЦикла;
			КонецЕсли;
			
			// теперь добавим строки для новой табличной части
			Если НовыйОбъект <> Неопределено И ИмяНовойТабличнойЧасти <> "" Тогда
				ТипНовогоОбъекта = ТипЗнч(НовыйОбъект);
				
				// теперь обходом полей файлов будем искать реквизиты и, если нашли, проверять на корректность
				Для Каждого ТекСтрока Из ЭлементСправочника.ПоляФайла Цикл
					Если ТекСтрока.ЗагрузкаВТабличнуюЧасть И ТипЗнч(ТекСтрока.Объект) = ТипНовогоОбъекта И
						ТекСтрока.ТабличнаяЧасть = ИмяНовойТабличнойЧасти И 
						ТекСтрока.РеквизитНазначения = РеквизитНазначения Тогда
						Если СтруктураИменРеквизитов.Свойство(ТекСтрока.ИмяРеквизита) <> Неопределено Тогда
							СтруктураИменРеквизитов[ТекСтрока.ИмяРеквизита] = Истина;
						Иначе
							НСтрока = ТаблицаИндексовСтрокНовых.Добавить();
							НСтрока.ИндексСтроки = ЭлементСправочника.ПоляФайла.Индекс(ТекСтрока);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// удалим лишние строки - по реквизитам, которых нет в данной табличной части
				ТаблицаИндексовСтрокНовых.Сортировать("ИндексСтроки УБЫВ");
				Для Каждого ТекСтрока Из ТаблицаИндексовСтрокНовых Цикл
					ЭлементСправочника.ПоляФайла.Удалить(ТекСтрока.ИндексСтроки);
				КонецЦикла;
				
				// теперь добавим строки по тем реквизитам, для которых их нет
				Для Каждого ЭлементСтруктуры Из СтруктураИменРеквизитов Цикл
					Если Не ЭлементСтруктуры.Значение Тогда
						НСтрока = ЭлементСправочника.ПоляФайла.Добавить();
						НСтрока.ЗагрузкаВТабличнуюЧасть = Истина;
						НСтрока.Объект = НовыйОбъект;
						НСтрока.ИмяРеквизита = ЭлементСтруктуры.Ключ;
						Если НСтрока.ИмяРеквизита = "Код" ИЛИ НСтрока.ИмяРеквизита = "Наименование" ИЛИ
							НСтрока.ИмяРеквизита = "Номер" ИЛИ НСтрока.ИмяРеквизита = "Владелец" ИЛИ
							НСтрока.ИмяРеквизита = "Родитель" Тогда
							НСтрока.ПредставлениеРеквизита = НСтрока.ИмяРеквизита;
						Иначе
							НСтрока.ПредставлениеРеквизита = НовыйОбъект.Метаданные().ТабличныеЧасти[ИмяНовойТабличнойЧасти].Реквизиты[ЭлементСтруктуры.Ключ].Синоним;
						КонецЕсли;
						НСтрока.ТабличнаяЧасть = ИмяНовойТабличнойЧасти;
						НСтрока.РеквизитНазначения = РеквизитНазначения;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	Иначе // загрузка данных объекта
		
		Если ПерезаполнениеПоОдномуИТомуЖеОбъекту Тогда
			// ищем строки по новому объекту, удаляем лишние, добавляем недостающие
			Если НовыйОбъект <> Неопределено Тогда
				ТипНовогоОбъекта = ТипЗнч(НовыйОбъект);
				
				Для Каждого ТекСтрока Из ЭлементСправочника.ПоляФайла Цикл
					Если Не ТекСтрока.ЗагрузкаВТабличнуюЧасть И ТипЗнч(ТекСтрока.Объект) = ТипНовогоОбъекта И
						ТекСтрока.РеквизитНазначения = РеквизитНазначения Тогда
						// ищем в структуре реквизитов добавленные в таб. часть, и если не находим,
						// фиксируем необходимость удаления строки таб. части
						Если СтруктураИменРеквизитов.Свойство(ТекСтрока.ИмяРеквизита) <> Неопределено Тогда
							СтруктураИменРеквизитов[ТекСтрока.ИмяРеквизита] = Истина;
						Иначе
							НСтрока = ТаблицаИндексовСтрокНовых.Добавить();
							НСтрока.ИндексСтроки = ЭлементСправочника.ПоляФайла.Индекс(ТекСтрока);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// удалим из таб. части "ПоляФайла" все строки реквизитов, которых у объекта нет
				ТаблицаИндексовСтрокНовых.Сортировать("ИндексСтроки УБЫВ");
				Для Каждого ТекСтрока Из ТаблицаИндексовСтрокНовых Цикл
					ЭлементСправочника.ПоляФайла.Удалить(ТекСтрока.ИндексСтроки);
				КонецЦикла;
				
				// добавим строки реквизитов объекта, для которых строк нет
				Для Каждого ЭлементСтруктуры Из СтруктураИменРеквизитов Цикл
					Если Не ЭлементСтруктуры.Значение Тогда
						НСтрока = ЭлементСправочника.ПоляФайла.Добавить();
						НСтрока.ЗагрузкаВТабличнуюЧасть = Ложь;
						НСтрока.Объект = НовыйОбъект;
						НСтрока.ИмяРеквизита = ЭлементСтруктуры.Ключ;
						Если НСтрока.ИмяРеквизита = "Код" ИЛИ НСтрока.ИмяРеквизита = "Наименование" ИЛИ
							НСтрока.ИмяРеквизита = "Номер" ИЛИ НСтрока.ИмяРеквизита = "Владелец" ИЛИ
							НСтрока.ИмяРеквизита = "Родитель" Тогда
							НСтрока.ПредставлениеРеквизита = НСтрока.ИмяРеквизита;
						Иначе
							НСтрока.ПредставлениеРеквизита = НовыйОбъект.Метаданные().Реквизиты[ЭлементСтруктуры.Ключ].Синоним;
						КонецЕсли;
						НСтрока.ТабличнаяЧасть = "";
						НСтрока.РеквизитНазначения = РеквизитНазначения;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			// удаляем строки по старому объекту и добавляем по новому
			
			// удалим строки по старому объекту
			Если СтарыйОбъект <> Неопределено Тогда
				ТипСтарогоОбъекта = ТипЗнч(СтарыйОбъект);
				
				Для Каждого ТекСтрока Из ЭлементСправочника.ПоляФайла Цикл
					Если Не ТекСтрока.ЗагрузкаВТабличнуюЧасть И ТипЗнч(ТекСтрока.Объект) = ТипСтарогоОбъекта И
						ТекСтрока.РеквизитНазначения = РеквизитНазначения Тогда
						НСтрока = ТаблицаИндексовСтрокСтарых.Добавить();
						НСтрока.ИндексСтроки = ЭлементСправочника.ПоляФайла.Индекс(ТекСтрока);
					КонецЕсли;
				КонецЦикла;
				
				// собственно, удаление
				ТаблицаИндексовСтрокСтарых.Сортировать("ИндексСтроки УБЫВ");
				Для Каждого ТекСтрока Из ТаблицаИндексовСтрокСтарых Цикл
					ЭлементСправочника.ПоляФайла.Удалить(ТекСтрока.ИндексСтроки);
				КонецЦикла;
				
			КонецЕсли;
			
			// откорректируем/добавим строки по новому объекту
			Если НовыйОбъект <> Неопределено Тогда
				ТипНовогоОбъекта = ТипЗнч(НовыйОбъект);
				
				Для Каждого ТекСтрока Из ЭлементСправочника.ПоляФайла Цикл
					Если Не ТекСтрока.ЗагрузкаВТабличнуюЧасть И ТипЗнч(ТекСтрока.Объект) = ТипНовогоОбъекта И
						ТекСтрока.РеквизитНазначения = РеквизитНазначения Тогда
						// ищем в структуре реквизитов добавленные в таб. часть, и если не находим,
						// фиксируем необходимость удаления строки таб. части
						Если СтруктураИменРеквизитов.Свойство(ТекСтрока.ИмяРеквизита) <> Неопределено Тогда
							СтруктураИменРеквизитов[ТекСтрока.ИмяРеквизита] = Истина;
						Иначе
							НСтрока = ТаблицаИндексовСтрокНовых.Добавить();
							НСтрока.ИндексСтроки = ЭлементСправочника.ПоляФайла.Индекс(ТекСтрока);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// удалим из таб. части "ПоляФайла" все строки реквизитов, которых у объекта нет
				ТаблицаИндексовСтрокНовых.Сортировать("ИндексСтроки УБЫВ");
				Для Каждого ТекСтрока Из ТаблицаИндексовСтрокНовых Цикл
					ЭлементСправочника.ПоляФайла.Удалить(ТекСтрока.ИндексСтроки);
				КонецЦикла;
				
				// добавим строки реквизитов объекта, для которых строк нет
				Для Каждого ЭлементСтруктуры Из СтруктураИменРеквизитов Цикл
					Если Не ЭлементСтруктуры.Значение Тогда
						НСтрока = ЭлементСправочника.ПоляФайла.Добавить();
						НСтрока.ЗагрузкаВТабличнуюЧасть = Ложь;
						НСтрока.Объект = НовыйОбъект;
						НСтрока.ИмяРеквизита = ЭлементСтруктуры.Ключ;
						Если НСтрока.ИмяРеквизита = "Код" ИЛИ НСтрока.ИмяРеквизита = "Наименование" ИЛИ
							НСтрока.ИмяРеквизита = "Номер" ИЛИ НСтрока.ИмяРеквизита = "Владелец" ИЛИ
							НСтрока.ИмяРеквизита = "Родитель" ИЛИ НСтрока.ИмяРеквизита = "Дата" Тогда
							НСтрока.ПредставлениеРеквизита = НСтрока.ИмяРеквизита;
						Иначе
							НСтрока.ПредставлениеРеквизита = НовыйОбъект.Метаданные().Реквизиты[ЭлементСтруктуры.Ключ].Синоним;
						КонецЕсли;
						НСтрока.ТабличнаяЧасть = "";
						НСтрока.РеквизитНазначения = РеквизитНазначения;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли; // НовыйОбъект <> Неопределено
			
		КонецЕсли; // старый и новый объекты совпадают
		
	КонецЕсли; // загрузка в таб. часть или данных объекта
	
КонецПроцедуры

// В процедуре производится чтение данных из файла и загрузка в табличную часть "ДанныеФайла"
// документа "абс_ЗагрузкаДанныхИзБиллинга"
//
// Параметры:
//  ДокументОбъект - объект документа "абс_ЗагрузкаДанныхИзБиллинга", для которого выполняется чтение данных
//                   из файла
//
Процедура ПрочитатьДанныеИзФайла(ДокументОбъект) Экспорт
	
	ТабЧасть = ДокументОбъект.ДанныеФайла;
	ТабЧасть.Очистить();
	
	ТипФайлаЗагрузки = ДокументОбъект.ПравилоЗагрузки.ТипФайлаЗагрузки;
	
	Если Не ЗначениеЗаполнено(ТипФайлаЗагрузки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипФайлаЗагрузки = "*.csv" Тогда
		Разделитель = ДокументОбъект.ПравилоЗагрузки.РазделительФайлаЗагрузки;
		Если Не ЗначениеЗаполнено(Разделитель) Тогда
			Возврат;
		КонецЕсли;
		мПрочитатьТабличныйДокументИзТекста(ТабЧасть, ДокументОбъект.ПутьКФайлу, Разделитель);
	ИначеЕсли ТипФайлаЗагрузки = "*.dbf" Тогда
		мПрочитатьТабличныйДокументИзDBF(ТабЧасть, ДокументОбъект.ПутьКФайлу);
	ИначеЕсли ТипФайлаЗагрузки = "*.xls" Тогда
		мПрочитатьТабличныйДокументИзExcel(ТабЧасть, ДокументОбъект.ПутьКФайлу);
	Иначе
		// ничего не загружаем
	КонецЕсли;
	
КонецПроцедуры

// Функция считывает в табличный документ данные из файла в формате Excel
//
// Параметры:
//  ТабличнаяЧасть     - ТабличнаяЧасть, в которую необходимо прочитать данные
//  ИмяФайла           - имя файла в формате Excel, из которого необходимо прочитать данные
//  НомерЛистаExcel    - номер листа книги Excel, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
Функция мПрочитатьТабличныйДокументИзExcel(ТабличнаяЧасть, ИмяФайла, НомерЛистаExcel = 1) Экспорт
	
	xlLastCell = 11;
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайла);
		Состояние("Обработка файла Microsoft Excel...");
		ExcelЛист = Excel.Sheets(НомерЛистаExcel);
	Исключение
		Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
		Возврат ложь;
		
	КонецПопытки;
	
	ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
	RowCount = ActiveCell.Row;
	ColumnCount = ActiveCell.Column;
	Для Row = 1 По RowCount Цикл
		
		Для Column = 1 По ColumnCount Цикл
			НСтрока = ТабличнаяЧасть.Добавить();
			НСтрока.НомерКолонки = Число(Column);
			НСтрока.НомерСтрокиФайла = Число(Row);
			НСтрока.ЗначениеКолонки = СтрЗаменить(ExcelЛист.Cells(Row,Column).Value, Символы.НПП, "");
		КонецЦикла;
		
	КонецЦикла;
	
	Excel.WorkBooks.Close();
	Excel = 0;
	
	Возврат Истина;
	
КонецФункции // ()

// Функция считывает в табличный документ данные из файла в формате TXT
//
// Параметры:
//  ТабличнаяЧасть     - ТабличнаяЧасть , в которую необходимо прочитать данные
//  ИмяФайла           - имя файла в формате TXT, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
Функция мПрочитатьТабличныйДокументИзТекста(ТабличнаяЧасть, ИмяФайла, Разделитель = ",") Экспорт
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Попытка
		ТекстовыйДокумент.Прочитать(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат Ложь;
	КонецПопытки;
	
	Для ТекущаяСтрока = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ТекущаяКолонка = 0;
		Для каждого Значение Из мРазложитьСтрокуВМассивПодстрок(ТекстовыйДокумент.ПолучитьСтроку(ТекущаяСтрока), Разделитель) Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			НСтрока = ТабличнаяЧасть.Добавить();
			НСтрока.НомерКолонки = ТекущаяКолонка;
			НСтрока.НомерСтрокиФайла = ТекущаяСтрока;
			НСтрока.ЗначениеКолонки = Значение;			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ()

// Функция считывает в табличный документ данные из файла в формате dBase III (*.dbf)
//
// Параметры:
//  ТабличнаяЧасть     - ТабличнаяЧасть, в которую необходимо прочитать данные
//  ИмяФайла           - имя файла в формате TXT, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
Функция мПрочитатьТабличныйДокументИзDBF(ТабличнаяЧасть, ИмяФайла) Экспорт
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	
	XBase  = Новый XBase;
	XBase.Кодировка = КодировкаXBase.OEM;
	Попытка
		XBase.ОткрытьФайл(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат Ложь;
	КонецПопытки;
	
	ТекущаяСтрока = 1;
	
	Рез = XBase.Первая();
	Пока Не XBase.ВКонце() Цикл
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
		ТекущаяКолонка = 0;
		Для каждого Поле Из XBase.поля Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			НСтрока = ТабличнаяЧасть.Добавить();
			НСтрока.НомерКолонки = ТекущаяКолонка;
			НСтрока.НомерСтрокиФайла = ТекущаяСтрока;
			НСтрока.ЗначениеКолонки = XBase.ПолучитьЗначениеПоля(ТекущаяКолонка - 1);
		КонецЦикла;
		
		XBase.Следующая();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ()

// Функция "расщепляет" строку на подстроки, используя заданный
//		разделитель. Разделитель может иметь любую длину.
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например,
//		СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов,
//		три из которых - пустые строки, а
//		СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры:
//		Стр - 			строка, которую необходимо разложить на подстроки.
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция мРазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

// Процедура вызывается из формы документа "абс_ЗагрузкаДанныхИзБиллинга"
// и производит создание и заполнение документов "СчетНаОплатуПокупателю", "РеализацияТоваровУслуг",
// "СчетФактураВыданный"
//
// Параметры:
//  ДокументОбъект - документ "абс_ЗагрузкаДанныхИзБиллинга", из которого вызвана процедура
//
Процедура ЗагрузитьДанныеБиллинга(ДокументОбъект) Экспорт
	
	СписокСообщенийОшибок = "";
	СписокСообщенийПредупреждений = "";
	
	Если ДокументОбъект.Организация.Пустая() Тогда
		Сообщить("В документе загрузки " + СокрЛП(ДокументОбъект) + " не указана Организация.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ОрганизацияДокумента = ДокументОбъект.Организация;
	
	// будем вести списки счетов на оплату, реализаций и счетов фактур, которые хоть один раз были
	// записаны в процессе выполнения процедуры
	СписокОбработанныхДокументов = Новый СписокЗначений;
	
	// сначала запросом получим все необходимые данные
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.НомерСтроки,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.СоздатьСчет,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.СоздатьРеализациюИТоваровУслуг,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.СоздатьСчетФактуру,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.НомерСчета,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.ДатаСчета,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.НомерРеализации,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.ДатаРеализации,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.НомерСФ,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.ДатаСФ,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.Контрагент КАК Контрагент,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.НоменклатураУслуги,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.СодержаниеУслуги,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.Количество,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.СуммаБезНДС,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.СуммаНДС,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.СчетНаОплатуПокупателю,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.РеализацияТоваровИУслуг,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.СчетФактураВыданный,
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.НоменклатурнаяГруппа
	               |ПОМЕСТИТЬ ДанныеДокумента
	               |ИЗ
	               |	Документ.абс_ЗагрузкаДанныхИзБиллинга.ЗагруженныеДанные КАК абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные
	               |ГДЕ
	               |	абс_ЗагрузкаДанныхИзБиллингаЗагруженныеДанные.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ДанныеДляПроверкиРеализации.РеализацияТоваровИУслуг <> &ПустаяРеализация
	               |			ТОГДА ДанныеДляПроверкиРеализации.РеализацияТоваровИУслуг.Номер
	               |		ИНАЧЕ ДанныеДляПроверкиРеализации.НомерРеализации
	               |	КОНЕЦ КАК НомерРеализации,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляПроверкиРеализации.РеализацияТоваровИУслуг <> &ПустаяРеализация
	               |			ТОГДА ДанныеДляПроверкиРеализации.РеализацияТоваровИУслуг.Дата
	               |		ИНАЧЕ ДанныеДляПроверкиРеализации.ДатаРеализации
	               |	КОНЕЦ КАК ДатаРеализации,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляПроверкиРеализации.СчетНаОплатуПокупателю = &ПустойСчет
	               |			ТОГДА ВЫБОР
	               |					КОГДА ДанныеДляПроверкиРеализации.СоздатьСчет
	               |						ТОГДА ДанныеДляПроверкиРеализации.НомерСчета
	               |					ИНАЧЕ """"
	               |				КОНЕЦ
	               |		ИНАЧЕ ДанныеДляПроверкиРеализации.СчетНаОплатуПокупателю.Номер
	               |	КОНЕЦ КАК НомерСчета,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляПроверкиРеализации.СчетФактураВыданный = &ПустойСФ
	               |			ТОГДА ВЫБОР
	               |					КОГДА ДанныеДляПроверкиРеализации.СоздатьСчетФактуру
	               |						ТОГДА ДанныеДляПроверкиРеализации.НомерСФ
	               |					ИНАЧЕ """"
	               |				КОНЕЦ
	               |		ИНАЧЕ ДанныеДляПроверкиРеализации.СчетФактураВыданный.Номер
	               |	КОНЕЦ КАК НомерСФ,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляПроверкиРеализации.СчетНаОплатуПокупателю = &ПустойСчет
	               |			ТОГДА ВЫБОР
	               |					КОГДА ДанныеДляПроверкиРеализации.СоздатьСчет
	               |						ТОГДА ДанныеДляПроверкиРеализации.ДатаСчета
	               |					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				КОНЕЦ
	               |		ИНАЧЕ ДанныеДляПроверкиРеализации.СчетНаОплатуПокупателю.Дата
	               |	КОНЕЦ КАК ДатаСчета,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляПроверкиРеализации.СчетФактураВыданный = &ПустойСФ
	               |			ТОГДА ВЫБОР
	               |					КОГДА ДанныеДляПроверкиРеализации.СоздатьСчетФактуру
	               |						ТОГДА ДанныеДляПроверкиРеализации.ДатаСФ
	               |					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				КОНЕЦ
	               |		ИНАЧЕ ДанныеДляПроверкиРеализации.СчетФактураВыданный.Дата
	               |	КОНЕЦ КАК ДатаСФ,
	               |	ДанныеДляПроверкиРеализации.Контрагент КАК КонтрагентРеализации,
	               |	ДанныеДляПроверкиРеализации.ДоговорКонтрагента КАК ДоговорРеализации,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляПроверкиРеализации.СчетНаОплатуПокупателю = &ПустойСчет
	               |			ТОГДА ДанныеДляПроверкиРеализации.Контрагент
	               |		ИНАЧЕ ДанныеДляПроверкиРеализации.СчетНаОплатуПокупателю.Контрагент
	               |	КОНЕЦ КАК КонтрагентСчета,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляПроверкиРеализации.СчетНаОплатуПокупателю = &ПустойСчет
	               |			ТОГДА ДанныеДляПроверкиРеализации.ДоговорКонтрагента
	               |		ИНАЧЕ ДанныеДляПроверкиРеализации.СчетНаОплатуПокупателю.ДоговорКонтрагента
	               |	КОНЕЦ КАК ДоговорСчета,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляПроверкиРеализации.СчетФактураВыданный = &ПустойСФ
	               |			ТОГДА ДанныеДляПроверкиРеализации.Контрагент
	               |		ИНАЧЕ ДанныеДляПроверкиРеализации.СчетФактураВыданный.Контрагент
	               |	КОНЕЦ КАК КонтрагентСФ,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляПроверкиРеализации.СчетФактураВыданный = &ПустойСФ
	               |			ТОГДА ДанныеДляПроверкиРеализации.ДоговорКонтрагента
	               |		ИНАЧЕ ДанныеДляПроверкиРеализации.СчетФактураВыданный.ДоговорКонтрагента
	               |	КОНЕЦ КАК ДоговорСФ,
	               |	ДанныеДляПроверкиРеализации.НомерСтроки
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	               |		ДанныеДокумента.СоздатьСчет КАК СоздатьСчет,
	               |		ДанныеДокумента.СоздатьРеализациюИТоваровУслуг КАК СоздатьРеализациюИТоваровУслуг,
	               |		ДанныеДокумента.СоздатьСчетФактуру КАК СоздатьСчетФактуру,
	               |		ДанныеДокумента.НомерСчета КАК НомерСчета,
	               |		ДанныеДокумента.ДатаСчета КАК ДатаСчета,
	               |		ДанныеДокумента.НомерРеализации КАК НомерРеализации,
	               |		ДанныеДокумента.ДатаРеализации КАК ДатаРеализации,
	               |		ДанныеДокумента.НомерСФ КАК НомерСФ,
	               |		ДанныеДокумента.ДатаСФ КАК ДатаСФ,
	               |		ДанныеДокумента.Контрагент КАК Контрагент,
	               |		ДанныеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |		ДанныеДокумента.НоменклатураУслуги КАК НоменклатураУслуги,
	               |		ДанныеДокумента.СодержаниеУслуги КАК СодержаниеУслуги,
	               |		ДанныеДокумента.Количество КАК Количество,
	               |		ДанныеДокумента.СуммаБезНДС КАК СуммаБезНДС,
	               |		ДанныеДокумента.СуммаНДС КАК СуммаНДС,
	               |		ДанныеДокумента.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю,
	               |		ДанныеДокумента.РеализацияТоваровИУслуг КАК РеализацияТоваровИУслуг,
	               |		ДанныеДокумента.СчетФактураВыданный КАК СчетФактураВыданный
	               |	ИЗ
	               |		ДанныеДокумента КАК ДанныеДокумента
	               |	ГДЕ
	               |		ДанныеДокумента.СоздатьРеализациюИТоваровУслуг) КАК ДанныеДляПроверкиРеализации
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НомерСчета),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НомерСФ),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДатаСчета),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДатаСФ),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтрагентРеализации),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоговорРеализации)
	               |ПО
	               |	НомерРеализации,
	               |	ДатаРеализации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСчетовНаОплату.СчетНаОплатуПокупателю = &ПустойСчет
	               |			ТОГДА ДанныеДляКонтроляСчетовНаОплату.НомерСчета
	               |		ИНАЧЕ ДанныеДляКонтроляСчетовНаОплату.СчетНаОплатуПокупателю.Номер
	               |	КОНЕЦ КАК НомерСчета,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСчетовНаОплату.СчетНаОплатуПокупателю = &ПустойСчет
	               |			ТОГДА ДанныеДляКонтроляСчетовНаОплату.ДатаСчета
	               |		ИНАЧЕ ДанныеДляКонтроляСчетовНаОплату.СчетНаОплатуПокупателю.Дата
	               |	КОНЕЦ КАК ДатаСчета,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСчетовНаОплату.СчетНаОплатуПокупателю = &ПустойСчет
	               |			ТОГДА ДанныеДляКонтроляСчетовНаОплату.Контрагент
	               |		ИНАЧЕ ДанныеДляКонтроляСчетовНаОплату.СчетНаОплатуПокупателю.Контрагент
	               |	КОНЕЦ КАК КонтрагентСчета,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСчетовНаОплату.СчетНаОплатуПокупателю = &ПустойСчет
	               |			ТОГДА ДанныеДляКонтроляСчетовНаОплату.ДоговорКонтрагента
	               |		ИНАЧЕ ДанныеДляКонтроляСчетовНаОплату.СчетНаОплатуПокупателю.ДоговорКонтрагента
	               |	КОНЕЦ КАК ДоговорСчета,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСчетовНаОплату.РеализацияТоваровИУслуг = &ПустаяРеализация
	               |			ТОГДА ДанныеДляКонтроляСчетовНаОплату.Контрагент
	               |		ИНАЧЕ ДанныеДляКонтроляСчетовНаОплату.РеализацияТоваровИУслуг.Контрагент
	               |	КОНЕЦ КАК КонтрагентРеализации,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСчетовНаОплату.РеализацияТоваровИУслуг = &ПустаяРеализация
	               |			ТОГДА ДанныеДляКонтроляСчетовНаОплату.ДоговорКонтрагента
	               |		ИНАЧЕ ДанныеДляКонтроляСчетовНаОплату.РеализацияТоваровИУслуг.ДоговорКонтрагента
	               |	КОНЕЦ КАК ДоговорРеализации,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСчетовНаОплату.СчетФактураВыданный = &ПустойСФ
	               |			ТОГДА ДанныеДляКонтроляСчетовНаОплату.Контрагент
	               |		ИНАЧЕ ДанныеДляКонтроляСчетовНаОплату.СчетФактураВыданный.Контрагент
	               |	КОНЕЦ КАК КонтрагентСФ,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСчетовНаОплату.СчетФактураВыданный = &ПустойСФ
	               |			ТОГДА ДанныеДляКонтроляСчетовНаОплату.ДоговорКонтрагента
	               |		ИНАЧЕ ДанныеДляКонтроляСчетовНаОплату.СчетФактураВыданный.ДоговорКонтрагента
	               |	КОНЕЦ КАК ДоговорСФ
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	               |		ДанныеДокумента.СоздатьСчет КАК СоздатьСчет,
	               |		ДанныеДокумента.СоздатьРеализациюИТоваровУслуг КАК СоздатьРеализациюИТоваровУслуг,
	               |		ДанныеДокумента.СоздатьСчетФактуру КАК СоздатьСчетФактуру,
	               |		ДанныеДокумента.НомерСчета КАК НомерСчета,
	               |		ДанныеДокумента.ДатаСчета КАК ДатаСчета,
	               |		ДанныеДокумента.НомерРеализации КАК НомерРеализации,
	               |		ДанныеДокумента.ДатаРеализации КАК ДатаРеализации,
	               |		ДанныеДокумента.НомерСФ КАК НомерСФ,
	               |		ДанныеДокумента.ДатаСФ КАК ДатаСФ,
	               |		ДанныеДокумента.Контрагент КАК Контрагент,
	               |		ДанныеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |		ДанныеДокумента.НоменклатураУслуги КАК НоменклатураУслуги,
	               |		ДанныеДокумента.СодержаниеУслуги КАК СодержаниеУслуги,
	               |		ДанныеДокумента.Количество КАК Количество,
	               |		ДанныеДокумента.СуммаБезНДС КАК СуммаБезНДС,
	               |		ДанныеДокумента.СуммаНДС КАК СуммаНДС,
	               |		ДанныеДокумента.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю,
	               |		ДанныеДокумента.РеализацияТоваровИУслуг КАК РеализацияТоваровИУслуг,
	               |		ДанныеДокумента.СчетФактураВыданный КАК СчетФактураВыданный
	               |	ИЗ
	               |		ДанныеДокумента КАК ДанныеДокумента
	               |	ГДЕ
	               |		ДанныеДокумента.СоздатьСчет) КАК ДанныеДляКонтроляСчетовНаОплату
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтрагентСчета),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоговорСчета)
	               |ПО
	               |	НомерСчета,
	               |	ДатаСчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСФ.СчетФактураВыданный = &ПустойСФ
	               |			ТОГДА ДанныеДляКонтроляСФ.НомерСФ
	               |		ИНАЧЕ ДанныеДляКонтроляСФ.СчетФактураВыданный.Номер
	               |	КОНЕЦ КАК НомерСФ,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСФ.СчетФактураВыданный = &ПустойСФ
	               |			ТОГДА ДанныеДляКонтроляСФ.ДатаСФ
	               |		ИНАЧЕ ДанныеДляКонтроляСФ.СчетФактураВыданный.Дата
	               |	КОНЕЦ КАК ДатаСФ,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСФ.СчетФактураВыданный = &ПустойСФ
	               |			ТОГДА ДанныеДляКонтроляСФ.Контрагент
	               |		ИНАЧЕ ДанныеДляКонтроляСФ.СчетФактураВыданный.Контрагент
	               |	КОНЕЦ КАК КонтрагентСФ,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСФ.СчетФактураВыданный = &ПустойСФ
	               |			ТОГДА ДанныеДляКонтроляСФ.ДоговорКонтрагента
	               |		ИНАЧЕ ДанныеДляКонтроляСФ.СчетФактураВыданный.ДоговорКонтрагента
	               |	КОНЕЦ КАК ДоговорСФ,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСФ.РеализацияТоваровИУслуг = &ПустаяРеализация
	               |			ТОГДА ДанныеДляКонтроляСФ.Контрагент
	               |		ИНАЧЕ ДанныеДляКонтроляСФ.РеализацияТоваровИУслуг.Контрагент
	               |	КОНЕЦ КАК КонтрагентРеализации,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСФ.РеализацияТоваровИУслуг = &ПустаяРеализация
	               |			ТОГДА ДанныеДляКонтроляСФ.ДоговорКонтрагента
	               |		ИНАЧЕ ДанныеДляКонтроляСФ.РеализацияТоваровИУслуг.ДоговорКонтрагента
	               |	КОНЕЦ КАК ДоговорРеализации,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСФ.СчетНаОплатуПокупателю = &ПустойСчет
	               |			ТОГДА ДанныеДляКонтроляСФ.Контрагент
	               |		ИНАЧЕ ДанныеДляКонтроляСФ.СчетНаОплатуПокупателю.Контрагент
	               |	КОНЕЦ КАК КонтрагентСчета,
	               |	ВЫБОР
	               |		КОГДА ДанныеДляКонтроляСФ.СчетНаОплатуПокупателю = &ПустойСчет
	               |			ТОГДА ДанныеДляКонтроляСФ.ДоговорКонтрагента
	               |		ИНАЧЕ ДанныеДляКонтроляСФ.СчетНаОплатуПокупателю.ДоговорКонтрагента
	               |	КОНЕЦ КАК ДоговорСчета
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	               |		ДанныеДокумента.СоздатьСчет КАК СоздатьСчет,
	               |		ДанныеДокумента.СоздатьРеализациюИТоваровУслуг КАК СоздатьРеализациюИТоваровУслуг,
	               |		ДанныеДокумента.СоздатьСчетФактуру КАК СоздатьСчетФактуру,
	               |		ДанныеДокумента.НомерСчета КАК НомерСчета,
	               |		ДанныеДокумента.ДатаСчета КАК ДатаСчета,
	               |		ДанныеДокумента.НомерРеализации КАК НомерРеализации,
	               |		ДанныеДокумента.ДатаРеализации КАК ДатаРеализации,
	               |		ДанныеДокумента.НомерСФ КАК НомерСФ,
	               |		ДанныеДокумента.ДатаСФ КАК ДатаСФ,
	               |		ДанныеДокумента.Контрагент КАК Контрагент,
	               |		ДанныеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |		ДанныеДокумента.НоменклатураУслуги КАК НоменклатураУслуги,
	               |		ДанныеДокумента.СодержаниеУслуги КАК СодержаниеУслуги,
	               |		ДанныеДокумента.Количество КАК Количество,
	               |		ДанныеДокумента.СуммаБезНДС КАК СуммаБезНДС,
	               |		ДанныеДокумента.СуммаНДС КАК СуммаНДС,
	               |		ДанныеДокумента.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю,
	               |		ДанныеДокумента.РеализацияТоваровИУслуг КАК РеализацияТоваровИУслуг,
	               |		ДанныеДокумента.СчетФактураВыданный КАК СчетФактураВыданный
	               |	ИЗ
	               |		ДанныеДокумента КАК ДанныеДокумента
	               |	ГДЕ
	               |		ДанныеДокумента.СоздатьСчетФактуру) КАК ДанныеДляКонтроляСФ
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтрагентСФ),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоговорСФ)
	               |ПО
	               |	НомерСФ,
	               |	ДатаСФ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеДокумента.НомерСтроки,
	               |	ДанныеДокумента.СоздатьСчет,
	               |	ДанныеДокумента.СоздатьРеализациюИТоваровУслуг,
	               |	ДанныеДокумента.СоздатьСчетФактуру,
	               |	ДанныеДокумента.НомерСчета,
	               |	ДанныеДокумента.ДатаСчета,
	               |	ДанныеДокумента.НомерРеализации,
	               |	ДанныеДокумента.ДатаРеализации,
	               |	ДанныеДокумента.НомерСФ,
	               |	ДанныеДокумента.ДатаСФ,
	               |	ДанныеДокумента.Контрагент,
	               |	ДанныеДокумента.ДоговорКонтрагента,
	               |	ДанныеДокумента.НоменклатураУслуги,
	               |	ДанныеДокумента.СодержаниеУслуги,
	               |	ДанныеДокумента.Количество,
	               |	ДанныеДокумента.СуммаБезНДС,
	               |	ДанныеДокумента.СуммаНДС,
	               |	ДанныеДокумента.СчетНаОплатуПокупателю,
	               |	ДанныеДокумента.РеализацияТоваровИУслуг,
	               |	ДанныеДокумента.СчетФактураВыданный,
	               |	ДанныеДокумента.НоменклатурнаяГруппа
	               |ИЗ
	               |	ДанныеДокумента КАК ДанныеДокумента";
				   
	Запрос.УстановитьПараметр("ПустойСчет", Документы.СчетНаОплатуПокупателю.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСФ", Документы.СчетФактураВыданный.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяРеализация", Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	// 1 - результат для контроля реализации
	// 2 - результат для контроля счетов на оплату
	// 3 - результат для контроля счетов-фактур
	// 4 - результат для общего контроля заполнения и выполнения обработки
	
	// контроль реализации
	СообщенияОбОшибкахРеализация = "";
	ВыборкаРеализацияНомер = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРеализацияНомер.Следующий() Цикл
		ПредыдущаяДата = Неопределено;
		ЕстьОшибкаДат = Ложь;
		ЕстьОшибкаКонтрагентов = Ложь;
		ЕстьОшибкаДоговоров = Ложь;
		ЕстьРазныеНомераСчета = Ложь;
		ЕстьРазныеНомераСФ = Ложь;
		ЕстьРазныеДатыСчета = Ложь;
		ЕстьРазныеДатыСФ = Ложь;
		ЕстьРазныеКонтрагентыСчета = Ложь;
		ЕстьРазныеКонтрагентыСФ = Ложь;
		ЕстьРазныеДоговорыСчета = Ложь;
		ЕстьРазныеДоговорыСФ = Ложь;
		ВыборкаРеализацияДата = ВыборкаРеализацияНомер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРеализацияДата.Следующий() Цикл
			Если ПредыдущаяДата <> Неопределено Тогда
				Если ПредыдущаяДата <> ВыборкаРеализацияДата.ДатаРеализации И 
					Год(ПредыдущаяДата) = Год(ВыборкаРеализацияДата.ДатаРеализации) И Не ЕстьОшибкаДат Тогда
					СообщенияОбОшибкахРеализация = СообщенияОбОшибкахРеализация + " По реализации №" + СокрЛП(ВыборкаРеализацияНомер.НомерРеализации) + 
													" есть разные даты за " + СокрЛП(Год(ПредыдущаяДата)) + "год." + Символы.ПС;
					ЕстьОшибкаДат = Истина;
				КонецЕсли;
			КонецЕсли;
			ПредыдущаяДата = ВыборкаРеализацияДата.ДатаРеализации;
			// теперь проверим, если количество контрагентов или договоров по одной реализации > 1
			// а также номеров и дат СФ и номеров и дат счетов
			Если ВыборкаРеализацияДата.КонтрагентРеализации > 1 И Не ЕстьОшибкаКонтрагентов Тогда
				СообщенияОбОшибкахРеализация = СообщенияОбОшибкахРеализация + " По реализации №" + СокрЛП(ВыборкаРеализацияНомер.НомерРеализации) +
												" от " + Формат(ВыборкаРеализацияДата.ДатаРеализации, "ДЛФ=D") + " есть разные контрагенты." + Символы.ПС;
				ЕстьОшибкаКонтрагентов = Истина;
			КонецЕсли;
			Если ВыборкаРеализацияДата.ДоговорРеализации > 1 И Не ЕстьОшибкаДоговоров Тогда
				СообщенияОбОшибкахРеализация = СообщенияОбОшибкахРеализация + " По реализации №" + СокрЛП(ВыборкаРеализацияНомер.НомерРеализации) +
												" от " + Формат(ВыборкаРеализацияДата.ДатаРеализации, "ДЛФ=D") + " есть разные договоры." + Символы.ПС;
				ЕстьОшибкаДоговоров = Истина;
			КонецЕсли;
			Если ВыборкаРеализацияДата.НомерСчета > 1 И Не ЕстьРазныеНомераСчета Тогда
				СообщенияОбОшибкахРеализация = СообщенияОбОшибкахРеализация + " По реализации №" + СокрЛП(ВыборкаРеализацияНомер.НомерРеализации) +
												" от " + Формат(ВыборкаРеализацияДата.ДатаРеализации, "ДЛФ=D") + " есть разные номера счетов на оплату." + Символы.ПС;
				ЕстьРазныеНомераСчета = Истина;
			КонецЕсли;
			Если ВыборкаРеализацияДата.ДатаСчета > 1 И Не ЕстьРазныеДатыСчета Тогда
				СообщенияОбОшибкахРеализация = СообщенияОбОшибкахРеализация + " По реализации №" + СокрЛП(ВыборкаРеализацияНомер.НомерРеализации) +
												" от " + Формат(ВыборкаРеализацияДата.ДатаРеализации, "ДЛФ=D") + " есть разные даты счетов на оплату." + Символы.ПС;
				ЕстьРазныеДатыСчета = Истина;
			КонецЕсли;
			Если ВыборкаРеализацияДата.НомерСФ > 1 И Не ЕстьРазныеНомераСФ Тогда
				СообщенияОбОшибкахРеализация = СообщенияОбОшибкахРеализация + " По реализации №" + СокрЛП(ВыборкаРеализацияНомер.НомерРеализации) +
												" от " + Формат(ВыборкаРеализацияДата.ДатаРеализации, "ДЛФ=D") + " есть разные номера счетов-фактур." + Символы.ПС;
				ЕстьРазныеНомераСФ = Истина;
			КонецЕсли;
			Если ВыборкаРеализацияДата.ДатаСФ > 1 И Не ЕстьРазныеДатыСФ Тогда
				СообщенияОбОшибкахРеализация = СообщенияОбОшибкахРеализация + " По реализации №" + СокрЛП(ВыборкаРеализацияНомер.НомерРеализации) +
												" от " + Формат(ВыборкаРеализацияДата.ДатаРеализации, "ДЛФ=D") + " есть разные даты счетов-фактур." + Символы.ПС;
				ЕстьРазныеДатыСФ = Истина;
			КонецЕсли;
			
			ВыборкаРеализацияДетали	= ВыборкаРеализацияДата.Выбрать();
			Пока ВыборкаРеализацияДетали.Следующий() Цикл
				// теперь проверим, чтобы контрагент и договор реализации не отличался от счета и СФ
				Если ВыборкаРеализацияДетали.КонтрагентРеализации <> ВыборкаРеализацияДетали.КонтрагентСчета И Не ЕстьРазныеКонтрагентыСчета Тогда
					СообщенияОбОшибкахРеализация = СообщенияОбОшибкахРеализация + " По реализации №" + СокрЛП(ВыборкаРеализацияНомер.НомерРеализации) +
													" от " + Формат(ВыборкаРеализацияДата.ДатаРеализации, "ДЛФ=D") + " есть счета на оплату с несовпадающим контрагентом." + Символы.ПС;
					ЕстьРазныеКонтрагентыСчета = Истина;
				КонецЕсли;
				Если ВыборкаРеализацияДетали.ДоговорРеализации <> ВыборкаРеализацияДетали.ДоговорСчета И Не ЕстьРазныеДоговорыСчета Тогда
					СообщенияОбОшибкахРеализация = СообщенияОбОшибкахРеализация + " По реализации №" + СокрЛП(ВыборкаРеализацияНомер.НомерРеализации) +
													" от " + Формат(ВыборкаРеализацияДата.ДатаРеализации, "ДЛФ=D") + " есть счета на оплату с несовпадающим договором." + Символы.ПС;
					ЕстьРазныеДоговорыСчета = Истина;
				КонецЕсли;
				Если ВыборкаРеализацияДетали.КонтрагентРеализации <> ВыборкаРеализацияДетали.КонтрагентСФ И Не ЕстьРазныеКонтрагентыСФ Тогда
					СообщенияОбОшибкахРеализация = СообщенияОбОшибкахРеализация + " По реализации №" + СокрЛП(ВыборкаРеализацияНомер.НомерРеализации) +
													" от " + Формат(ВыборкаРеализацияДата.ДатаРеализации, "ДЛФ=D") + " есть счета-фактуры с несовпадающим контрагентом." + Символы.ПС;
					ЕстьРазныеКонтрагентыСФ = Истина;
				КонецЕсли;
				Если ВыборкаРеализацияДетали.ДоговорРеализации <> ВыборкаРеализацияДетали.ДоговорСФ И Не ЕстьРазныеДоговорыСФ Тогда
					СообщенияОбОшибкахРеализация = СообщенияОбОшибкахРеализация + " По реализации №" + СокрЛП(ВыборкаРеализацияНомер.НомерРеализации) +
													" от " + Формат(ВыборкаРеализацияДата.ДатаРеализации, "ДЛФ=D") + " есть счета-фактуры с несовпадающим договором." + Символы.ПС;
					ЕстьРазныеДоговорыСФ = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// контроль счетов на оплату
	СообщенияОбОшибкахСчета = "";
	ВыборкаСчетаНомер = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчетаНомер.Следующий() Цикл
		ПредыдущаяДата = Неопределено;
		ЕстьОшибкаДат = Ложь;
		ЕстьОшибкаКонтрагентов = Ложь;
		ЕстьОшибкаДоговоров = Ложь;
		ЕстьРазныеКонтрагентыСФ = Ложь;
		ЕстьРазныеКонтрагентыРеализация = Ложь;
		ЕстьРазныеДоговорыСФ = Ложь;
		ЕстьРазныеДоговорыРеализация = Ложь;
		ВыборкаСчетаДата = ВыборкаСчетаНомер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетаДата.Следующий() Цикл
			// различные даты по одному номеру в пределах года
			Если ПредыдущаяДата <> Неопределено Тогда
				Если ПредыдущаяДата <> ВыборкаСчетаДата.ДатаСчета И
					Год(ПредыдущаяДата) = Год(ВыборкаСчетаДата.ДатаСчета) И Не ЕстьОшибкаДат Тогда
					СообщенияОбОшибкахСчета = СообщенияОбОшибкахСчета + " По счету №" + СокрЛП(ВыборкаСчетаНомер.НомерСчета) + " есть разные даты за " + 
												Год(ПредыдущаяДата) + " год." + Символы.ПС;
					ЕстьОшибкаДат = Истина;
				КонецЕсли;
			КонецЕсли;
			ПредыдущаяДата = ВыборкаСчетаДата.ДатаСчета;
			// различные контрагенты и договоры по одному счету на оплату
			Если ВыборкаСчетаДата.КонтрагентСчета > 1 И Не ЕстьОшибкаКонтрагентов Тогда
				СообщенияОбОшибкахСчета = СообщенияОбОшибкахСчета + " По счету №" + СокрЛП(ВыборкаСчетаНомер.НомерСчета) + " от " + 
											Формат(ВыборкаСчетаДата.ДатаСчета, "ДЛФ = D") + " есть разные контрагенты." + Символы.ПС;
				ЕстьОшибкаКонтрагентов = Истина;
			КонецЕсли;
			Если ВыборкаСчетаДата.ДоговорСчета > 1 И Не ЕстьОшибкаДоговоров Тогда
				СообщенияОбОшибкахСчета = СообщенияОбОшибкахСчета + " По счету №" + СокрЛП(ВыборкаСчетаНомер.НомерСчета) + " от " + 
											Формат(ВыборкаСчетаДата.ДатаСчета, "ДЛФ = D") + " есть разные договоры." + Символы.ПС;
				ЕстьОшибкаДоговоров = Истина;
			КонецЕсли;
			// проверим отличающихся контрагентов и договоры по реализации и СФ
			ВыборкаСчетаДетали = ВыборкаСчетаДата.Выбрать();
			Пока ВыборкаСчетаДетали.Следующий() Цикл
				Если ВыборкаСчетаДетали.КонтрагентСчета <> ВыборкаСчетаДетали.КонтрагентРеализации И Не ЕстьРазныеКонтрагентыРеализация Тогда
					СообщенияОбОшибкахСчета = СообщенияОбОшибкахСчета + " По счету №" + СокрЛП(ВыборкаСчетаНомер.НомерСчета) + " от " + 
												Формат(ВыборкаСчетаДата.ДатаСчета, "ДЛФ = D") + " есть реализации с несовпадающим контрагентом." + Символы.ПС;
					ЕстьРазныеКонтрагентыРеализация = Истина;
				КонецЕсли;
				Если ВыборкаСчетаДетали.ДоговорСчета <> ВыборкаСчетаДетали.ДоговорРеализации И Не ЕстьРазныеДоговорыРеализация Тогда
					СообщенияОбОшибкахСчета = СообщенияОбОшибкахСчета + " По счету №" + СокрЛП(ВыборкаСчетаНомер.НомерСчета) + " от " + 
												Формат(ВыборкаСчетаДата.ДатаСчета, "ДЛФ = D") + " есть реализации с несовпадающим договором." + Символы.ПС;
					ЕстьРазныеДоговорыРеализация = Истина;
				КонецЕсли;
				Если ВыборкаСчетаДетали.КонтрагентСчета <> ВыборкаСчетаДетали.КонтрагентСФ И Не ЕстьРазныеКонтрагентыСФ Тогда
					СообщенияОбОшибкахСчета = СообщенияОбОшибкахСчета + " По счету №" + СокрЛП(ВыборкаСчетаНомер.НомерСчета) + " от " + 
												Формат(ВыборкаСчетаДата.ДатаСчета, "ДЛФ = D") + " есть счета-фактуры с несовпадающим контрагентом." + Символы.ПС;
					ЕстьРазныеКонтрагентыСФ = Истина;
				КонецЕсли;
				Если ВыборкаСчетаДетали.ДоговорСчета <> ВыборкаСчетаДетали.ДоговорСФ И Не ЕстьРазныеДоговорыСФ Тогда
					СообщенияОбОшибкахСчета = СообщенияОбОшибкахСчета + " По счету №" + СокрЛП(ВыборкаСчетаНомер.НомерСчета) + " от " + 
												Формат(ВыборкаСчетаДата.ДатаСчета, "ДЛФ = D") + " есть счета-фактуры с несовпадающим договором." + Символы.ПС;
					ЕстьРазныеДоговорыСФ = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// контроль счетов-фактур
	СообщенияОбОшибкахСФ = "";
	ВыборкаСФНомер = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСФНомер.Следующий() Цикл
		ПредыдущаяДата = Неопределено;
		ЕстьОшибкаДат = Ложь;
		ЕстьОшибкаКонтрагентов = Ложь;
		ЕстьОшибкаДоговоров = Ложь;
		ЕстьРазныеКонтрагентыСчета = Ложь;
		ЕстьРазныеКонтрагентыРеализация = Ложь;
		ЕстьРазныеДоговорыСчета = Ложь;
		ЕстьРазныеДоговорыРеализация = Ложь;
		ВыборкаСФДата = ВыборкаСФНомер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСФДата.Следующий() Цикл
			// проверим, чтобы не было разных дат по одному номеру в пределах одного года
			Если ПредыдущаяДата <> Неопределено Тогда
				Если ПредыдущаяДата <> ВыборкаСФДата.ДатаСФ И Год(ПредыдущаяДата) = Год(ВыборкаСФДата.ДатаСФ) И
					Не ЕстьОшибкаДат Тогда
					СообщенияОбОшибкахСФ = СообщенияОбОшибкахСФ + " По счету-фактуре №" + СокрЛП(ВыборкаСФНомер.НомерСФ) + " есть разные даты за " + 
											Год(ПредыдущаяДата) + " год." + Символы.ПС;
					ЕстьОшибкаДат = Истина;
				КонецЕсли;
			КонецЕсли;
			ПредыдущаяДата = ВыборкаСФДата.ДатаСФ;
				
			// проверим, чтобы по одному СФ не было строк с разными контрагентами или договорами
			Если ВыборкаСФДата.КонтрагентСФ > 1 И Не ЕстьОшибкаКонтрагентов Тогда
				СообщенияОбОшибкахСФ = СообщенияОбОшибкахСФ + " По счету-фактуре №" + СокрЛП(ВыборкаСФНомер.НомерСФ) + " от " + 
										Формат(ВыборкаСФДата.ДатаСФ, "ДЛФ=D") + " есть разные контрагенты." + Символы.ПС;
				ЕстьОшибкаКонтрагентов = Истина;
			КонецЕсли;
			Если ВыборкаСФДата.ДоговорСФ > 1 И Не ЕстьОшибкаДоговоров Тогда
				СообщенияОбОшибкахСФ = СообщенияОбОшибкахСФ + " По счету-фактуре №" + СокрЛП(ВыборкаСФНомер.НомерСФ) + " от " + 
										Формат(ВыборкаСФДата.ДатаСФ, "ДЛФ=D") + " есть разные договоры." + Символы.ПС;
				ЕстьОшибкаДоговоров = Истина;
			КонецЕсли;
			
			// проверим, чтобы контрагент и договор в СФ совпадали с данными в счетах и реализациях
			ВыборкаСФДетали = ВыборкаСФДата.Выбрать();
			Пока ВыборкаСФДетали.Следующий() Цикл
				Если ВыборкаСФДетали.КонтрагентСФ <> ВыборкаСФДетали.КонтрагентСчета И Не ЕстьРазныеКонтрагентыСчета Тогда
					СообщенияОбОшибкахСФ = СообщенияОбОшибкахСФ + " По счету-фактуре №" + СокрЛП(ВыборкаСФНомер.НомерСФ) + " от " + 
											Формат(ВыборкаСФДата.ДатаСФ, "ДЛФ=D") + " есть счета на оплату с несовпадающим контрагентом." + Символы.ПС;
					ЕстьРазныеКонтрагентыСчета = Истина;
				КонецЕсли;
				Если ВыборкаСФДетали.КонтрагентСФ <> ВыборкаСФДетали.КонтрагентРеализации И Не ЕстьРазныеКонтрагентыРеализация Тогда
					СообщенияОбОшибкахСФ = СообщенияОбОшибкахСФ + " По счету-фактуре №" + СокрЛП(ВыборкаСФНомер.НомерСФ) + " от " + 
											Формат(ВыборкаСФДата.ДатаСФ, "ДЛФ=D") + " есть реализации с несовпадающим контрагентом." + Символы.ПС;
					ЕстьРазныеКонтрагентыРеализация = Истина;
				КонецЕсли;
				Если ВыборкаСФДетали.ДоговорСФ <> ВыборкаСФДетали.ДоговорСчета И Не ЕстьРазныеДоговорыСчета Тогда
					СообщенияОбОшибкахСФ = СообщенияОбОшибкахСФ + " По счету-фактуре №" + СокрЛП(ВыборкаСФНомер.НомерСФ) + " от " + 
											Формат(ВыборкаСФДата.ДатаСФ, "ДЛФ=D") + " есть счета на оплату с несовпадающим договором." + Символы.ПС;
					ЕстьРазныеДоговорыСчета = Истина;
				КонецЕсли;
				Если ВыборкаСФДетали.ДоговорСФ <> ВыборкаСФДетали.ДоговорРеализации И Не ЕстьРазныеДоговорыРеализация Тогда
					СообщенияОбОшибкахСФ = СообщенияОбОшибкахСФ + " По счету-фактуре №" + СокрЛП(ВыборкаСФНомер.НомерСФ) + " от " + 
											Формат(ВыборкаСФДата.ДатаСФ, "ДЛФ=D") + " есть реализации с несовпадающим договором." + Символы.ПС;
					ЕстьРазныеДоговорыРеализация = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаДанных = МассивРезультатов[4].Выгрузить();
	
	// проверим, чтобы все колонки табличной части были корректно заполнены
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		Если ТекСтрока.СоздатьСчетФактуру Тогда
			// проверим, чтобы при установленном флаге создания счета-фактуры был установлен флаг создания
			// документа реализации или указан документ реализации
			Если Не (ТекСтрока.СоздатьРеализациюИТоваровУслуг ИЛИ
				Не ТекСтрока.РеализацияТоваровИУслуг.Пустая()) Тогда
				// счет-фактура не может быть создан без владельца - документа реализации
				СписокСообщенийОшибок = СписокСообщенийОшибок + " - По строке №" + СокрЛП(ТекСтрока.НомерСтроки) + " установлен флаг создания Счета-фактуры, 
										| но нет флага создания реализации и не указан документ реализации." + Символы.ПС;
			КонецЕсли;
			// проверим, чтобы если счет-фактура указан, то он был на реализацию
			Если Не ТекСтрока.СчетФактураВыданный.Пустая() И 
				ТекСтрока.СчетФактураВыданный.ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
				СписокСообщенийОшибок = СписокСообщенийОшибок + " - По строке №" + СокрЛП(ТекСтрока.НомерСтроки) + " установлен флаг создания Счета-фактуры, 
										| и указан счет-фактура выданный с видом, отличным от ""На реализацию""." + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.СоздатьСчет ИЛИ ТекСтрока.СоздатьРеализациюИТоваровУслуг ИЛИ
			ТекСтрока.СоздатьСчетФактуру Тогда
			// проверим, чтобы были указаны: Контрагент, Договор контрагента, СуммаБезНДС, СуммаНДС
			// НоменклатураУслуги
			Если ТекСтрока.Контрагент.Пустая() Тогда
				СписокСообщенийОшибок = СписокСообщенийОшибок + " - В строке №" + СокрЛП(ТекСтрока.НомерСтроки) + " не указан Контрагент." + Символы.ПС;
			КонецЕсли;
			Если ТекСтрока.ДоговорКонтрагента.Пустая() Тогда
				СписокСообщенийОшибок = СписокСообщенийОшибок + " - В строке №" + СокрЛП(ТекСтрока.НомерСтроки) + " не указан Договор контрагента." + Символы.ПС;
			КонецЕсли;
			Если ТекСтрока.НоменклатураУслуги.Пустая() Тогда
				СписокСообщенийОшибок = СписокСообщенийОшибок + " - В строке №" + СокрЛП(ТекСтрока.НомерСтроки) + " не указана Номенклатура услуги." + Символы.ПС;
			КонецЕсли;
			Если ТекСтрока.СуммаБезНДС = 0 Тогда
				СписокСообщенийОшибок = СписокСообщенийОшибок + " - В строке №" + СокрЛП(ТекСтрока.НомерСтроки) + " не указан Сумма без НДС." + Символы.ПС;
			КонецЕсли;
			// проверим, чтобы номенклатура услуги была типа "Услуга"
			Если Не ТекСтрока.НоменклатураУслуги.Пустая() И 
				ТекСтрока.НоменклатураУслуги.ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
				СписокСообщенийОшибок = СписокСообщенийОшибок + " - В строке №" + СокрЛП(ТекСтрока.НомерСтроки) + " Номенклатура не является услугой." + Символы.ПС;
			КонецЕсли;
			// проверим, чтобы владельцем договора был указанный контрагент
			Если Не ТекСтрока.Контрагент.Пустая() И Не ТекСтрока.ДоговорКонтрагента.Пустая() И
				ТекСтрока.Контрагент <> ТекСтрока.ДоговорКонтрагента.Владелец Тогда
				СписокСообщенийОшибок = СписокСообщенийОшибок + " - В строке №" + СокрЛП(ТекСтрока.НомерСтроки) + " Договор не принадлежит Контрагенту строки." + Символы.ПС;
			КонецЕсли;
			// проверим, чтобы договор принадлежал указанной организации
			Если Не ТекСтрока.ДоговорКонтрагента.Пустая() И ТекСтрока.ДоговорКонтрагента.Организация <> ОрганизацияДокумента Тогда
				СписокСообщенийОшибок = СписокСообщенийОшибок + " - В строке №" + СокрЛП(ТекСтрока.НомерСтроки) + " Договор не принадлежит Организации документа." + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрока.СоздатьСчет И Не ТекСтрока.СчетНаОплатуПокупателю.Пустая() ИЛИ
			ТекСтрока.СоздатьРеализациюИТоваровУслуг И Не ТекСтрока.РеализацияТоваровИУслуг.Пустая() ИЛИ
			ТекСтрока.СоздатьСчетФактуру И Не ТекСтрока.СчетФактураВыданный.Пустая() Тогда
			СписокСообщенийПредупреждений = СписокСообщенийПредупреждений + СокрЛП(ТекСтрока.НомерСтроки) + "; "
		КонецЕсли;
	КонецЦикла;
	
	Если СписокСообщенийОшибок <> "" ИЛИ СообщенияОбОшибкахРеализация <> "" ИЛИ
		СообщенияОбОшибкахСФ <> "" ИЛИ СообщенияОбОшибкахСчета <> "" Тогда
		Сообщить("Загрузка не может быть выполнена!", СтатусСообщения.Важное);
		ТекстСообщения = СообщенияОбОшибкахРеализация + СообщенияОбОшибкахСФ + СообщенияОбОшибкахСчета + 
						СписокСообщенийОшибок;
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если СписокСообщенийПредупреждений <> "" Тогда
		КодОтвета = Вопрос("Среди строк табличной части есть такие, в которых указан документ базы данных и одновременно установлен
							| флаг его создания. Такие документы будут перезаписаны. Продолжить загрузку?", РежимДиалогаВопрос.ДаНет);
		Если КодОтвета <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
							
	// все проверки прошли - загрузка
	НачатьТранзакцию();
	
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		Если ТекСтрока.СоздатьСчет Тогда
			// создадим счет на оплату
			РезультатСоздания = СоздатьСчетНаОплату(ТекСтрока, ДокументОбъект, СписокОбработанныхДокументов);
			Если РезультатСоздания <> "" Тогда
				Сообщить("Выполнение загрузки прекращено.", СтатусСообщения.Важное);
				Сообщить(РезультатСоздания);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрока.СоздатьРеализациюИТоваровУслуг Тогда
			// создадим реализацию товаров и услуг
			РезультатСоздания = СоздатьРеализациюТоваровУслуг(ТекСтрока, ДокументОбъект, СписокОбработанныхДокументов);
			Если РезультатСоздания <> "" Тогда
				Сообщить("Выполнение загрузки прекращено.", СтатусСообщения.Важное);
				Сообщить(РезультатСоздания);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрока.СоздатьСчетФактуру Тогда
			// проверим, чтобы был указан документ реализации
			Если ТекСтрока.РеализацияТоваровИУслуг.Пустая() Тогда
				Сообщить("Выполнение загрузки прекращено.", СтатусСообщения.Важное);
				Сообщить(" В строке № " + СокрЛП(ТекСтрока.НомерСтроки) + " не заполнен документ реализации. Он необходим для создания счета-фактуры.");
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;			
			// создадим счет-фактуру выданный
			РезультатСоздания = СоздатьСчетФактуруВыданный(ТекСтрока, ДокументОбъект, СписокОбработанныхДокументов);
			Если РезультатСоздания <> "" Тогда
				Сообщить("Выполнение загрузки прекращено.", СтатусСообщения.Важное);
				Сообщить(РезультатСоздания);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// В процедуре производится сопоставление данных из файла - с целью обнаружения/создания
// ссылок на объекты базы данных
//
// Параметры:
//  ДокументОбъект - документ "абс_ЗагрузкаДанныхИзБиллинга", для которого производится сопоставление
//
Процедура СопоставитьДанныеБиллинга(ДокументОбъект) Экспорт
	
	// сформируем исходные таблицы, которые будем передавать для получения необходимых данных
	
	// ТабличныйДокумент на основании ДОкументОбъект.ДанныеФайла
	ТабДокумент = Новый ТабличныйДокумент;
	
	Для Каждого ТекСтрока Из ДокументОбъект.ДанныеФайла Цикл
		ОбластьТД = ТабДокумент.Область("R" + СтрЗаменить(СтрЗаменить(ТекСтрока.НомерСтрокиФайла, " ", ""), Символы.НПП, "") + 
					"C" + СтрЗаменить(СтрЗаменить(ТекСтрока.НомерКолонки, " ", ""), Символы.НПП, ""));
		ОбластьТД.Текст = СокрЛП(ТекСтрока.ЗначениеКолонки);
	КонецЦикла;
	
	КорректорИндекса = ДокументОбъект.ПравилоЗагрузки.НомерПервойСтрокиДляЗагрузки;
	
	ТаблицаЗагрузки = Новый ТаблицаЗначений;
	Для К = КорректорИндекса По ТабДокумент.ВысотаТаблицы Цикл
		ТаблицаЗагрузки.Добавить();
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("РеквизитНазначения");
	Для Каждого ТекСтрока Из ДокументОбъект.ПравилоЗагрузки.ПравилаЗагрузкиОбъектов Цикл
		
		ТаблицаЗагрузки.Колонки.Добавить(ТекСтрока.РеквизитНазначения);
		
		СтруктураПоиска.РеквизитНазначения = ТекСтрока.РеквизитНазначения;
		МассивСтрок = ДокументОбъект.ПравилоЗагрузки.ПоляФайла.НайтиСтроки(СтруктураПоиска);
		// нам нужны поля "ИмяРеквизита" и "НомерКолонки"
		СтруктураИменНомеров = Новый Структура;
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			СтруктураИменНомеров.Вставить(СтрокаМассива.ИмяРеквизита, СтрокаМассива.НомерКолонки);
		КонецЦикла;
		
		Если ТекСтрока.ЗначениеДляПодстановки <> Неопределено Тогда
			Для К = КорректорИндекса По ТабДокумент.ВысотаТаблицы Цикл
				ТаблицаЗагрузки[К - КорректорИндекса][ТекСтрока.РеквизитНазначения] = ТекСтрока.ЗначениеДляПодстановки;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ТекСтрока.Объект) = Тип("Строка") Тогда
			СтрокаНомераКолонки = ДокументОбъект.ПравилоЗагрузки.ПоляФайла.Найти(ТекСтрока.РеквизитНазначения, "РеквизитНазначения");
			Если СтрокаНомераКолонки <> Неопределено И СтрокаНомераКолонки.НомерКолонки > 0 Тогда
				СопоставитьСтроки(ТабДокумент, ТаблицаЗагрузки, ТекСтрока.РеквизитНазначения, СтрокаНомераКолонки.НомерКолонки, ДокументОбъект.ПравилоЗагрузки.НомерПервойСтрокиДляЗагрузки);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекСтрока.Объект) = Тип("Число") Тогда
			СтрокаНомераКолонки = ДокументОбъект.ПравилоЗагрузки.ПоляФайла.Найти(ТекСтрока.РеквизитНазначения, "РеквизитНазначения");
			Если СтрокаНомераКолонки <> Неопределено И СтрокаНомераКолонки.НомерКолонки > 0 Тогда
				СопоставитьЧисла(ТабДокумент, ТаблицаЗагрузки, ТекСтрока.РеквизитНазначения, СтрокаНомераКолонки.НомерКолонки, ДокументОбъект.ПравилоЗагрузки.НомерПервойСтрокиДляЗагрузки);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекСтрока.Объект) = Тип("Дата") Тогда
			СтрокаНомераКолонки = ДокументОбъект.ПравилоЗагрузки.ПоляФайла.Найти(ТекСтрока.РеквизитНазначения, "РеквизитНазначения");
			Если СтрокаНомераКолонки <> Неопределено И СтрокаНомераКолонки.НомерКолонки > 0 Тогда
				СопоставитьДаты(ТабДокумент, ТаблицаЗагрузки, ТекСтрока.РеквизитНазначения, СтрокаНомераКолонки.НомерКолонки, ДокументОбъект.ПравилоЗагрузки.НомерПервойСтрокиДляЗагрузки);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекСтрока.Объект) = Тип("Булево") Тогда
			СтрокаНомераКолонки = ДокументОбъект.ПравилоЗагрузки.ПоляФайла.Найти(ТекСтрока.РеквизитНазначения, "РеквизитНазначения");
			Если СтрокаНомераКолонки <> Неопределено И СтрокаНомераКолонки.НомерКолонки > 0 Тогда
				СопоставитьБулево(ТабДокумент, ТаблицаЗагрузки, ТекСтрока.РеквизитНазначения, СтрокаНомераКолонки.НомерКолонки, ДокументОбъект.ПравилоЗагрузки.НомерПервойСтрокиДляЗагрузки);
			КонецЕсли;
		ИначеЕсли Метаданные.Перечисления.Найти(ТекСтрока.Объект.Метаданные().Имя) <> Неопределено Тогда
			СтрокаНомераКолонки = ДокументОбъект.ПравилоЗагрузки.ПоляФайла.Найти(ТекСтрока.РеквизитНазначения, "РеквизитНазначения");
			Если СтрокаНомераКолонки <> Неопределено И СтрокаНомераКолонки.НомерКолонки > 0 Тогда
				СопоставитьПеречисление(ТекСтрока.Объект.Метаданные().Имя, ТабДокумент, ТаблицаЗагрузки, ТекСтрока.РеквизитНазначения, СтрокаНомераКолонки.НомерКолонки, ДокументОбъект.ПравилоЗагрузки.НомерПервойСтрокиДляЗагрузки);
			КонецЕсли;
		ИначеЕсли Метаданные.ПланыСчетов.Найти(ТекСтрока.Объект.Метаданные().Имя) <> Неопределено Тогда
			СтрокаНомераКолонки = ДокументОбъект.ПравилоЗагрузки.ПоляФайла.Найти(ТекСтрока.РеквизитНазначения, "РеквизитНазначения");
			Если СтрокаНомераКолонки <> Неопределено И СтрокаНомераКолонки.НомерКолонки > 0 Тогда
				СопоставитьПланСчетов(ТекСтрока.Объект.Метаданные().Имя, ТабДокумент, ТаблицаЗагрузки, ТекСтрока.РеквизитНазначения, СтрокаНомераКолонки.НомерКолонки, ДокументОбъект.ПравилоЗагрузки.НомерПервойСтрокиДляЗагрузки);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Правило) Тогда
			// сопоставим, используя правило
			ПравилоОбъект = ТекСтрока.Правило.ПолучитьОбъект();
			ПравилоОбъект.Инициализация();
			ПравилоОбъект.абс_УстановитьИсточник();
			ПравилоОбъект.абс_ПеревестиТабличнуюЧастьВТаблицуЗначений();
			НомерПервойСтроки = ДокументОбъект.ПравилоЗагрузки.НомерПервойСтрокиДляЗагрузки;
			ПравилоОбъект.ПерваяСтрокаДанныхТабличногоДокумента = ?(НомерПервойСтроки = 0, 1, НомерПервойСтроки);
			// теперь для таблицы значений загружаемых реквизитов проставим номера колонок, из которых берутся
			// значения
			Для Каждого СтрокаРеквизита Из ПравилоОбъект.ТаблицаЗагружаемыхРеквизитов Цикл
				Если СтрокаРеквизита.Пометка Тогда
					// найдем в массиве строк по имени реквизита строку и возьмем из нее номер колонки
					НомерКолонки = 0;
					Если СтруктураИменНомеров.Свойство(СтрокаРеквизита.ИмяРеквизита, НомерКолонки) Тогда
						СтрокаРеквизита.НомерКолонки = НомерКолонки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			// теперь выполним сопоставление
			ПравилоОбъект.ЗагрузитьДанные(ТабДокумент, ТаблицаЗагрузки, ТекСтрока.РеквизитНазначения, ДокументОбъект.Организация);
		Иначе
			// ничего не сопоставляем
		КонецЕсли;
		
	КонецЦикла;
	
	// теперь получили ТаблицуЗагрузки, в которой под каждый реквизит назначения = реквизит документа ДокументОбъект, 
	// будет создана своя колонка; осталось таблицу загрузки перевести в значения реквизитов документа
	// Реквизиты бывают 2 типов: реквизиты объекта и реквизиты табличных частей. Реквизиты объекта возьмем
	// из первой строки таблицы загрузки, в которой этот реквизит заполнен. Реквизиты табличных частей - по количеству
	// строк ТаблицыЗагрузки
	СтруктураЗагруженныхРеквизитов = Новый Структура;
	Для Каждого Реквизит Из ДокументОбъект.Метаданные().Реквизиты Цикл
		Если ТаблицаЗагрузки.Колонки.Найти(Реквизит.Имя) <> Неопределено Тогда
			СтруктураЗагруженныхРеквизитов.Вставить(Реквизит.Имя, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	ТабличныеЧастиДокумента = ДокументОбъект.Метаданные().ТабличныеЧасти;
	
	СтруктураСоответствийТабЧастей = Новый Структура;
	Для Каждого Колонка Из ТаблицаЗагрузки.Колонки Цикл
		ПозицияТочки = Найти(Колонка.Имя, "___");
		Если ПозицияТочки <> 0 Тогда
			ИмяТабЧасти = Лев(Колонка.Имя, ПозицияТочки - 1);
			ИмяРеквизита = Сред(Колонка.Имя, ПозицияТочки + 3);
			ТабЧастьОбъекта = ТабличныеЧастиДокумента.Найти(ИмяТабЧасти);
			Если ТабЧастьОбъекта <> Неопределено И ТабЧастьОбъекта.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
				СтруктураСоответствийТабЧастей.Вставить(Колонка.Имя, Новый Структура(ИмяТабЧасти, ИмяРеквизита));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураСтрокТабЧастей = Новый Структура;
	Для Каждого ТекСтрока Из ТаблицаЗагрузки Цикл
		СтруктураСтрокТабЧастей.Очистить();
		Для Каждого ТекКолонка Из ТаблицаЗагрузки.Колонки Цикл
			// сначала ищем реквизит в структуре реквизитов, а потом - в структуре табличных частей
			УжеЗагружен = Ложь;
			ИменаТабЧастиРеквизита = Неопределено;
			Если СтруктураЗагруженныхРеквизитов.Свойство(ТекКолонка.Имя, УжеЗагружен) Тогда
				// есть реквизит шапки
				Если Не УжеЗагружен И ЗначениеЗаполнено(ТекКолонка.Имя) Тогда
					ДокументОбъект[ТекКолонка.Имя] = ТекСтрока[ТекКолонка.Имя];
					СтруктураЗагруженныхРеквизитов[ТекКолонка.Имя] = Истина;
					УжеЗагружен = Истина;
				КонецЕсли;
			ИначеЕсли СтруктураСоответствийТабЧастей.Свойство(ТекКолонка.Имя, ИменаТабЧастиРеквизита) Тогда
				СтрокаТабЧасти = Неопределено;
				Для Каждого ЭлементСтруктуры Из ИменаТабЧастиРеквизита Цикл // здесь только 1 элемент
					Если Не СтруктураСтрокТабЧастей.Свойство(ЭлементСтруктуры.Ключ, СтрокаТабЧасти) ИЛИ
						СтрокаТабЧасти = Неопределено Тогда
						СтрокаТабЧасти = ДокументОбъект[ЭлементСтруктуры.Ключ].Добавить();
						СтруктураСтрокТабЧастей.Вставить(ЭлементСтруктуры.Ключ, СтрокаТабЧасти);
					КонецЕсли;
					СтрокаТабЧасти[ЭлементСтруктуры.Значение] = ТекСтрока[ТекКолонка.Имя];
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// В процедуре производится перевод данных табличной части "ДанныеФайла" в табличное поле (таблицу значений)
// на форме документа "абс_ЗагрузкаДанныхИзБиллинга"
//
// Параметры:
//  ДокументОбъект - объект документа "абс_ЗагрузкаДанныхИзБиллинга"
//  ФормаДокумента - форма документа, для которой выполняется действие
//
Процедура ПеревестиТабЧастьВТабПолеЗагрузкаДанныхИзБиллинга(ДокументОбъект, ФормаДокумента) Экспорт
	
	ТабПоле = ФормаДокумента.ЭлементыФормы.ТПДанныеФайла;
	ТабЗначТабПоля = ФормаДокумента.ТПДанныеФайла;
	
	ТабЗначТабПоля.Колонки.Очистить();
	ТабПоле.Колонки.Очистить();
	
	ТаблицаНомеровКолонокФайла = ДокументОбъект.ДанныеФайла.Выгрузить(, "НомерКолонки");
	ТаблицаНомеровКолонокФайла.Свернуть("НомерКолонки");
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(999));
	
	// создадим колонки
	Колонка = ТабПоле.Колонки.Добавить("НомерСтроки", "N");
	Колонка.Ширина = 5;
	КолонкаТЗ = ТабЗначТабПоля.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)), "Номер строки", 28);
	Колонка.Данные = "НомерСтроки";
	Для Каждого ТекСтрока Из ТаблицаНомеровКолонокФайла Цикл
		
		ИмяКолонки = "Колонка" + СтрЗаменить(СтрЗаменить(ТекСтрока.НомерКолонки, " ", ""), Символы.НПП, "");
		
		Колонка = ТабПоле.Колонки.Добавить(ИмяКолонки, СокрЛП(ТекСтрока.НомерКолонки));
		КолонкаТЗ = ТабЗначТабПоля.Колонки.Добавить(ИмяКолонки, ОписаниеТипаСтрока, СокрЛП(ТекСтрока.НомерКолонки));
		Колонка.Данные = ИмяКолонки;
		
	КонецЦикла;
	
	// переведем строки
	Для Каждого ТекСтрока Из ДокументОбъект.ДанныеФайла Цикл
		
		ИмяКолонки = "Колонка" + СтрЗаменить(СтрЗаменить(ТекСтрока.НомерКолонки, " ", ""), Символы.НПП, "");
		СтрокаПоНомеру = ТабЗначТабПоля.Найти(ТекСтрока.НомерСтрокиФайла, "НомерСтроки");
		Если СтрокаПоНомеру = Неопределено Тогда
			СтрокаПоНомеру = ТабЗначТабПоля.Добавить();
			СтрокаПоНомеру.НомерСтроки = ТеКСтрока.НомерСтрокиФайла;
		КонецЕсли;
		СтрокаПоНомеру[ИмяКолонки] = ТекСтрока.ЗначениеКолонки;
		
	КонецЦикла;
	
КонецПроцедуры

// В процедуре производится перевод данных табличной части "ДанныеФайла" в табличное поле (таблицу значений)
// на форме документа "абс_ЗагрузкаДанныхИзБиллинга"
//
// Параметры:
//  ДокументОбъект - объект документа "абс_ЗагрузкаДанныхИзБиллинга"
//  ФормаДокумента - форма документа, для которой выполняется действие
//
Процедура ПеревестиТабПолеВТабЧастьЗагрузкаДанныхИзБиллинга(ДокументОбъект, ФормаДокумента) Экспорт
	
	ТабЗначТабПоля = ФормаДокумента.ТПДанныеФайла;
	
	ТабЧасть = ДокументОбъект.ДанныеФайла;
	ТабЧасть.Очистить();
	
	Для Каждого ТекКолонка Из ТабЗначТабПоля.Колонки Цикл
		Если ТекКолонка.Имя = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		НомерКолонки = Число(Сред(ТекКолонка.Имя, 8));
		Для Каждого ТекСтрока Из ТабЗначТабПоля Цикл
			НСтрока = ТабЧасть.Добавить();
			НСтрока.НомерСтрокиФайла = ТекСтрока.НомерСтроки;
			НСтрока.НомерКолонки = НомерКолонки;
			НСтрока.ЗначениеКолонки = ТекСтрока[ТекКолонка.Имя];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
	
// Процедура выполняет открытие формы реквизитов объекта-назначения загрузки
// элемента справочника "абс_ПравилаЗагрузкиПакетовДанных"
//
// Параметры:
//  СправочникОбъект - объект справочника "абс_ПравилаЗагрузкиПакетовДанных",
//                     для которого выполняется открытие формы
//  СписокРеквизитов - список строк-имен реквизитов, уже указанных в таб.части
//                     "ПравилаЗагрузкиОбъектов" справочника
//  ФормаСправочника - форма элемента справочника
//
Процедура ОткрытьФормуЗагружаемыхРеквизитовПравилаЗагрузкиПакетовДанных(СправочникОбъект, СписокРеквизитов = Неопределено, ФормаСправочника) Экспорт
	
	Если ТипЗнч(СправочникОбъект) <> Тип("СправочникОбъект.абс_ПравилаЗагрузкиПакетовДанных") Тогда
		Возврат;
	КонецЕсли;
	
	ФормаРеквизитов = СправочникОбъект.ПолучитьФорму("ФормаВыбораЗагружаемыхРеквизитов");
	ТабЗначений = ФормаРеквизитов.ТПЗагружаемыеРеквизиты;
	ТаблицаДоступныхТипов = ФормаСправочника.мТаблицаОписанийДоступныхТипов;
	
	Если СправочникОбъект.НазначениеЗагрузки = Неопределено Тогда
		ТаблицаДоступныхТипов.Очистить();
		Возврат;
	КонецЕсли;
		
	ТабЗначений.Очистить();
	
	Для Каждого ТекРеквизит Из СправочникОбъект.НазначениеЗагрузки.Метаданные().Реквизиты Цикл
		
		НСтрока = ТабЗначений.Добавить();
		НСтрока.Реквизит = ТекРеквизит.Имя;
		НСтрока.ПредставлениеРеквизита = ТекРеквизит.Синоним;
		НСтрока.ОписаниеТиповРеквизита = ТекРеквизит.Тип;
		
	КонецЦикла;
	
	Для Каждого ТекТабЧасть Из СправочникОбъект.НазначениеЗагрузки.Метаданные().ТабличныеЧасти Цикл
		
		ИмяТабЧасти = ТекТабЧасть.Имя;
		ПредставлениеТабЧасти = СокрЛП(ТекТабЧасть.Синоним);
		
		Для Каждого ТекРеквизит Из ТекТабЧасть.Реквизиты Цикл
			НСтрока = ТабЗначений.Добавить();
			НСтрока.Реквизит = ИмяТабЧасти + "___" + ТекРеквизит.Имя;
			НСтрока.ПредставлениеРеквизита = "Таб. часть """ + ПредставлениеТабЧасти + """, " + ТекРеквизит.Синоним;
			НСтрока.ОписаниеТиповРеквизита = ТекРеквизит.Тип;
		КонецЦикла;
		
	КонецЦикла;
	
	Если СписокРеквизитов <> Неопределено Тогда
		Для Каждого ТекСтрока Из ТабЗначений Цикл
			Если СписокРеквизитов.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
				ТекСтрока.Загружать = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОтветФормы = ФормаРеквизитов.ОткрытьМодально();
	// ответ формы содержит данные таблицы значений ТПЗагружаемыеРеквизиты формы
	
	// заполним табличные части ПравилаЗагрузкиОбъектов и ПоляФайла
	Если ОтветФормы <> Неопределено Тогда
		
		ОтветФормы.Колонки.Реквизит.Имя = "РеквизитНазначения";
		
		СправочникОбъект.ПравилаЗагрузкиОбъектов.Очистить();
		СправочникОбъект.ПоляФайла.Очистить();
		
		Для Каждого ТекСтрока Из ОтветФормы Цикл
			Если ТекСтрока.Загружать Тогда
				НСтрока = СправочникОбъект.ПравилаЗагрузкиОбъектов.Добавить();
				ЗаполнитьЗначенияСвойств(НСтрока, ТекСтрока, "РеквизитНазначения");
				// остальные значения заполним сами
				НСтрока.ЗагрузкаВТабличнуюЧасть = Ложь;
				СтрокаДоступныхТипов = ТаблицаДоступныхТипов.Добавить();
				Если ТекСтрока.ОписаниеТиповРеквизита.Типы().Количество() = 1 Тогда
					НСтрока.Объект = ТекСтрока.ОписаниеТиповРеквизита.ПривестиЗначение();
					НСтрока.ПредставлениеОбъекта = ПолучитьПредставлениеТипаОбъекта(НСтрока.Объект); 
					СтрокаПредставления = Лев(НСтрока.ПредставлениеОбъекта, 8);
					Если СтрокаПредставления = "Документ" ИЛИ СтрокаПредставления = "Справочн" Тогда
						НСтрока.ИспользуетсяПравило = Истина;
					КонецЕсли;
					СтрокаДоступныхТипов.ПредставлениеОбъекта = НСтрока.ПредставлениеОбъекта;
					//НСтрока.ЗначениеДляПодстановки = НСтрока.Объект;
				КонецЕсли;
				СтрокаДоступныхТипов.РеквизитНазначения = НСтрока.РеквизитНазначения;
				СтрокаДоступныхТипов.ДоступныеТипы = ТекСтрока.ОписаниеТиповРеквизита;
				
				// заполним таб. часть ПоляФайла
				
				Если НСтрока.Объект <> Неопределено Тогда
					СформироватьСтрокиПравилЗагрузкиПакетаДанныхПоОбъекту(СправочникОбъект, НСтрока.РеквизитНазначения, , НСтрока.Объект);
				КонецЕсли;
				
			КонецЕсли;			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// По переданному значению функция возвращает строковое представление типа
// Например, если передано Ложь, то функция вернет "Булево"
//
// Параметры:
//  ЗначениеОбъекта - значение любого типа
//
// Возвращаемое значение:
//  Строка - представление типа
//
Функция ПолучитьПредставлениеТипаОбъекта(ЗначениеОбъекта) Экспорт
	
	Если ЗначениеОбъекта = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеОбъекта) = Тип("Строка") Тогда
		Возврат "Строка";
	ИначеЕсли ТипЗнч(ЗначениеОбъекта) = Тип("Число") Тогда
		Возврат "Число";
	ИначеЕсли ТипЗнч(ЗначениеОбъекта) = Тип("Булево") Тогда
		Возврат "Булево";
	ИначеЕсли ТипЗнч(ЗначениеОбъекта) = Тип("Дата") Тогда
		Возврат "Дата";
	Иначе
		ИмяТипаОбъекта = ЗначениеОбъекта.Метаданные().Имя;
		СинонимОбъекта = ЗначениеОбъекта.Метаданные().Синоним;
		Если Метаданные.ПланыСчетов.Найти(ИмяТипаОбъекта) <> Неопределено Тогда
			Возврат "План счетов """ + СокрЛП(СинонимОбъекта) + """";
		ИначеЕсли Метаданные.Перечисления.Найти(ИмяТипаОбъекта) <> Неопределено Тогда
			Возврат "Перечисление """ + СокрЛП(СинонимОбъекта) + """";
		ИначеЕсли Метаданные.Справочники.Найти(ИмяТипаОбъекта) <> Неопределено Тогда
			Возврат "Справочник """ + СокрЛП(СинонимОбъекта) + """";
		ИначеЕсли Метаданные.Документы.Найти(ИмяТипаОбъекта) <> Неопределено Тогда
			Возврат "Документ """ + СокрЛП(СинонимОбъекта) + """";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////
// ЛОКАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ

// Формирует номер документа, добавляя необходимые нули и префиксы к переданной в параметре строке
//
// Параметры:
//  СтрокаНомераДокумента - строка, из которой необходимо получить номер
//  ДокументОбъект - документ, для которого получается номер
//
// Возвращаемое значение:
//  Строка - номер документа
//
Функция ПолучитьНомерДокумента(Знач СтрокаНомераДокумента, ДокументОбъект)
	
	ПрефиксОрганизации = "";
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("Организация") <> Неопределено И
		ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ПрефиксОрганизации = ДокументОбъект.Организация.Префикс;
	КонецЕсли;	
	ПрефиксУзла = "";
	ttk_ОбщегоНазначения.ДобавитьПрефиксУзла(ПрефиксУзла);
	Если ПрефиксУзла <> "" Тогда
		Если Найти(СтрокаНомераДокумента, ПрефиксУзла) = 1 Тогда 
			СтрокаНомераДокумента = Сред(СтрокаНомераДокумента, СтрДлина(ПрефиксУзла) + 1);
		КонецЕсли;
	КонецЕсли;
	Если ПрефиксОрганизации <> "" Тогда
		Если Найти(СтрокаНомераДокумента, ПрефиксОрганизации) = 1 Тогда 
			СтрокаНомераДокумента = Сред(СтрокаНомераДокумента, СтрДлина(ПрефиксОрганизации) + 1);
		КонецЕсли;
	КонецЕсли;
	Если СтрокаНомераДокумента <> "" Тогда
		// создадим новый номер счета
		ДлинаПрефиксов = СтрДлина(ПрефиксУзла) + СтрДлина(ПрефиксОрганизации);
		ДлинаНомераСчета = СтрДлина(СтрокаНомераДокумента);
		НулиСлева = "";
		КоличествоНулейДобавить = ДокументОбъект.Метаданные().ДлинаНомера - ДлинаПрефиксов - ДлинаНомераСчета;
		Если КоличествоНулейДобавить > 0 Тогда
			Для Сч = 1 По КоличествоНулейДобавить Цикл
				НулиСлева = НулиСлева + "0";
			КонецЦикла;
		КонецЕсли;
		СтрокаНомераДокумента = ПрефиксУзла + ПрефиксОрганизации + НулиСлева + СтрокаНомераДокумента;
	КонецЕсли;
	
	Возврат СтрокаНомераДокумента;
	
КонецФункции

// Функция по переданным сумме без НДС и сумме НДС возвращает ставку НДС
//
// Параметры:
//  СуммаБезНДС - Число, сумма без НДС
//  СуммаНДС - Число, сумма НДС
//
// Возвращаемое значение:
//  Значение перечисления "СтавкиНДС"
//
Функция ПолучитьСтавкуНДСПоСуммам(СуммаБезНДС = 0, СуммаНДС = 0)
	
	Если СуммаНДС = 0 ИЛИ СуммаБезНДС = 0 Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	Иначе
		КоэффициентСтавки = СуммаНДС / СуммаБезНДС;
		Если КоэффициентСтавки < 0 Тогда
			КоэффициентСтавки = -КоэффициентСтавки;
		КонецЕсли;
		Если КоэффициентСтавки <= 0.05 Тогда
			Возврат Перечисления.СтавкиНДС.БезНДС;
		ИначеЕсли КоэффициентСтавки <= 0.14 Тогда
			Возврат Перечисления.СтавкиНДС.НДС10;
		ИначеЕсли КоэффициентСтавки <= 0.19 Тогда
			Возврат Перечисления.СтавкиНДС.НДС18;
		Иначе
			Возврат Перечисления.СтавкиНДС.НДС20; // такого быть не должно, но технически допускается
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция возвращает структуру счетов учета расчетов с контрагентом для документа реализации товаров и услуг
//
// Параметры:
//  ДокументРеализации - ДокументОбъект - документ реализации, для которого получаются счета учета
//	ЗаполнятьБУ - Булево, признак необходимости получения счетов учета по БУ
//  ЗаполнятьНУ - Булево, признак необходимости получения счетов учета по НУ
//
// Возвращаемое значение:
//  Структура счетов учета, ключи - строки имен реквизитов документа
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ДокументРеализации, ЗаполнятьБУ = Истина, ЗаполнятьНУ = Истина)

	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат");
	ДатаНачалаИспользованияРасширеннойАналитики = глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");
	
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ДокументРеализации.ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ДокументРеализации.Организация, ДокументРеализации.Контрагент, ДокументРеализации.ДоговорКонтрагента);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",		СчетаУчета.СчетРасчетовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",			СчетаУчета.СчетАвансовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТаре",				СчетаУчета.СчетУчетаТарыПокупателя);
		
		Если НЕ ИспользоватьРасширеннуюАналитику ИЛИ НачалоДня(ДатаНачалаИспользованияРасширеннойАналитики) > НачалоДня(ДокументРеализации.Дата) Тогда
			
			//Эти реквизиты не используются при РА
			СтруктураСчетов.Вставить("СчетУчетаДоходовПоТареБУ",			СчетаУчета.СчетУчетаДоходовПоТареБУ);
			СтруктураСчетов.Вставить("СчетУчетаРасходовПоТареБУ",			СчетаУчета.СчетУчетаРасходовПоТареБУ);
			СтруктураСчетов.Вставить("СтатьяПрочихДоходовРасходовПоТаре",	СчетаУчета.СтатьяПрочихДоходовРасходовПоТаре);
			
			Если ДокументРеализации.ОтражатьВНалоговомУчете Тогда
				СтруктураСчетов.Вставить("СчетУчетаДоходовПоТареНУ",			СчетаУчета.СчетУчетаДоходовПоТареНУ);
				СтруктураСчетов.Вставить("СчетУчетаРасходовПоТареНУ",			СчетаУчета.СчетУчетаРасходовПоТареНУ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;
	
КонецФункции

// В функции создается документ "Счет на оплату покупателю" по переданной строке данных
// либо редактируется существующий документ
//
// Параметры:
//  СтрокаДанных - строка табличной части, содержащая данные для создания документа
//  ДокументОбъект  - документ "абс_ЗагрузкаДанныхИзБиллинга", которым выполняется загрузка
//					  вызвавшая создание документа
//  СписокОбработанныхДокументов - список документов, уже записанных в ходе загрузки,
//								   вызвавшей создание документа
//
// Возвращаемое значение:
//  Строка - признак успешности создания документа (документ записан - "", документ не записан - Номер строки,
//			 по которой не удалось создать счет с сообщением об ошибке)
//
Функция СоздатьСчетНаОплату(СтрокаДанных, ДокументОбъект, СписокОбработанныхДокументов)
	
	// если в строке данных указан счет на оплату, тогда перезаполним его,
	// в противном случае создадим новый
	Если Не СтрокаДанных.СчетНаОплатуПокупателю.Пустая() Тогда
		СчетОбъект = СтрокаДанных.СчетНаОплатуПокупателю.ПолучитьОбъект();
	Иначе
		СчетОбъект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
		// заполним шапку счета
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(СчетОбъект, "Продажа");
		СчетОбъект.Организация = ДокументОбъект.Организация;
		СчетОбъект.СтруктурнаяЕдиница = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		СчетОбъект.УчитыватьНДС = Истина;
		СчетОбъект.СуммаВключаетНДС = Ложь;
		
		// Контрагент и договор контрагента
		СчетОбъект.Контрагент = СтрокаДанных.Контрагент;
		СчетОбъект.ДоговорКонтрагента = СтрокаДанных.ДоговорКонтрагента;
		
		// Номер и дата
		НомерСчета = СокрЛП(СтрокаДанных.НомерСчета);
		Если НомерСчета <> "" Тогда
			СчетОбъект.Номер = ПолучитьНомерДокумента(НомерСчета, СчетОбъект);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.ДатаСчета) Тогда
			СчетОбъект.Дата = СтрокаДанных.ДатаСчета;
		Иначе
			СчетОбъект.Дата = ТекущаяДата();
		КонецЕсли;
		
		Попытка
			СчетОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Возврат "Не удалось записать счет на оплату по строке " + СокрЛП(СтрокаДанных.НомерСтроки) + " по причине: " +
					Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Если СписокОбработанныхДокументов.НайтиПоЗначению(СчетОбъект.Ссылка) = Неопределено Тогда // счет еще не заполнялся в данной загрузке
		
		// Установим организацию
		СчетОбъект.Организация = ДокументОбъект.Организация;
		
		// Номер и дата
		НомерСчета = СтрокаДанных.НомерСчета;
		Если НомерСчета <> "" Тогда
			СчетОбъект.Номер = ПолучитьНомерДокумента(НомерСчета, СчетОбъект);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.ДатаСчета) Тогда
			СчетОбъект.Дата = СтрокаДанных.ДатаСчета;
		Иначе
			СчетОбъект.Дата = ТекущаяДата();
		КонецЕсли;
				
		// Контрагент и договор контрагента
		СчетОбъект.Контрагент = СтрокаДанных.Контрагент;
		СчетОбъект.ДоговорКонтрагента = СтрокаДанных.ДоговорКонтрагента;
		
		// Валюта, курс и кратность
		СчетОбъект.ВалютаДокумента = СчетОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ТаблицаКурса = РегистрыСведений.КурсыВалют.СрезПоследних(КонецДня(СчетОбъект.Дата), Новый Структура("Валюта", СчетОбъект.ВалютаДокумента));
		Если ТаблицаКурса.Количество() > 0 Тогда
			СчетОбъект.КурсВзаиморасчетов = ?(ТаблицаКурса[0].Курс = 0, 1, ТаблицаКурса[0].Курс);
			СчетОбъект.КратностьВзаиморасчетов = ?(ТаблицаКурса[0].Кратность = 0, 1, ТаблицаКурса[0].Кратность);
		Иначе
			СчетОбъект.КурсВзаиморасчетов = 1;
			СчетОбъект.КратностьВзаиморасчетов = 1;
		КонецЕсли;
		
		// комментарий
		СчетОбъект.Комментарий = "### Загружен из биллинга " + Формат(ДокументОбъект.Дата, "ДЛФ=D");
		
		// очистим табличные части и прочие реквизиты документа
		СчетОбъект.Услуги.Очистить();
		СчетОбъект.Товары.Очистить();
		СчетОбъект.ВозвратнаяТара.Очистить();
		СчетОбъект.СоставНабора.Очистить();
		СчетОбъект.СуммаДокумента = 0;
		СчетОбъект.ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		СчетОбъект.Грузоотправитель = Справочники.Контрагенты.ПустаяСсылка();
		СчетОбъект.Грузополучатель = Справочники.Контрагенты.ПустаяСсылка();
		СчетОбъект.КонтактноеЛицоКонтрагента = "";
		
		СписокОбработанныхДокументов.Добавить(СчетОбъект.Ссылка);
		
	КонецЕсли;
	
	// добавим строку услуги
	НСтрока = СчетОбъект.Услуги.Добавить();
	НСтрока.Количество = ?(СтрокаДанных.Количество = 0, 1, СтрокаДанных.Количество);
	НСтрока.Номенклатура = СтрокаДанных.НоменклатураУслуги;
	НСтрока.Содержание = СтрокаДанных.СодержаниеУслуги;
	НСтрока.Сумма = ?(СчетОбъект.УчитыватьНДС И СчетОбъект.СуммаВключаетНДС, СтрокаДанных.СуммаБезНДС + СтрокаДанных.СуммаНДС, СтрокаДанных.СуммаБезНДС);
	НСтрока.СуммаНДС = ?(СтрокаДанных.СуммаБезНДС = 0, 0, СтрокаДанных.СуммаНДС);
	НСтрока.Цена = НСтрока.Сумма / НСтрока.Количество;
	НСтрока.СтавкаНДС = ПолучитьСтавкуНДСПоСуммам(СтрокаДанных.СуммаБезНДС, СтрокаДанных.СуммаНДС);
	
	СчетОбъект.СуммаДокумента = СчетОбъект.СуммаДокумента + НСтрока.Сумма + НСтрока.СуммаНДС;
	
	
	// снимем пометку удаления
	Если СчетОбъект.ПометкаУдаления Тогда
		СчетОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЕсли;
	
	// запишем документ
	Попытка
		СчетОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Возврат "Не удалось записать счет на оплату по строке " + СокрЛП(СтрокаДанных.НомерСтроки) + " по причине: " +
		Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	// в соответствующей строке документа загрузки заполним поле "СчетНаОплатуПокупателю"
	СтрокаДокументаЗагрузки = ДокументОбъект.ЗагруженныеДанные.Найти(СтрокаДанных.НомерСтроки, "НомерСтроки");
	Если СтрокаДокументаЗагрузки <> Неопределено Тогда
		СтрокаДокументаЗагрузки.СчетНаОплатуПокупателю = СчетОбъект.Ссылка;
		СтрокаДанных.СчетНаОплатуПокупателю = СчетОбъект.Ссылка;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// В функции создается документ "Реализация товаров и услуг" по переданной строке данных
// либо редактируется существующий документ
//
// Параметры:
//  СтрокаДанных - строка табличной части, содержащая данные для создания документа
//  ДокументОбъект  - документ "абс_ЗагрузкаДанныхИзБиллинга", которым выполняется загрузка
//					  вызвавшая создание документа
//  СписокОбработанныхДокументов - список документов, уже записанных в ходе загрузки,
//								   вызвавшей создание документа
//
// Возвращаемое значение:
//  Булево - признак успешности создания документа (Истина - документ записан, Ложь - документ не записан)
//
Функция СоздатьРеализациюТоваровУслуг(СтрокаДанных, ДокументОбъект, СписокОбработанныхДокументов)
	
	// если в строке данных указан документ-счет на оплату, тогда
	// получим его, иначе создадим новый
	Если Не СтрокаДанных.РеализацияТоваровИУслуг.Пустая() Тогда
		РеализацияОбъект = СтрокаДанных.РеализацияТоваровИУслуг.ПолучитьОбъект();
	Иначе
		РеализацияОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(РеализацияОбъект, "Продажа", );
		РеализацияОбъект.Организация = ДокументОбъект.Организация;
		РеализацияОбъект.УчитыватьНДС = Истина;
		РеализацияОбъект.СуммаВключаетНДС = Ложь;
		РеализацияОбъект.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		// заполним номер и дату
		Если СтрокаДанных.НомерРеализации <> "" Тогда
			РеализацияОбъект.Номер = ПолучитьНомерДокумента(СокрЛП(СтрокаДанных.НомерРеализации), РеализацияОбъект);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.ДатаРеализации) Тогда
			РеализацияОбъект.Дата = СтрокаДанных.ДатаРеализации;
		Иначе
			РеализацияОбъект.Дата = ТекущаяДата();
		КонецЕсли;
		
		// запишем документ
		Попытка
			РеализацияОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Возврат "Не удалось записать документ реализации по строке " + СокрЛП(СтрокаДанных.НомерСтроки) + " по причине: " +
					Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
	Если СписокОбработанныхДокументов.НайтиПоЗначению(РеализацияОбъект.Ссылка) = Неопределено Тогда // перезаполним шапку документа
		
		// Организация
		РеализацияОбъект.Организация = ДокументОбъект.Организация;
		
		// Контрагент и договор контрагента
		РеализацияОбъект.Контрагент = СтрокаДанных.Контрагент;
		РеализацияОбъект.ДоговорКонтрагента = СтрокаДанных.ДоговорКонтрагента;
		
		// заполним номер и дату
		Если СтрокаДанных.НомерРеализации <> "" Тогда
			РеализацияОбъект.Номер = ПолучитьНомерДокумента(СокрЛП(СтрокаДанных.НомерРеализации), РеализацияОбъект);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.ДатаРеализации) Тогда
			РеализацияОбъект.Дата = СтрокаДанных.ДатаРеализации;
		Иначе
			РеализацияОбъект.Дата = ТекущаяДата();
		КонецЕсли;
		
		// Валюта, курс и кратность
		РеализацияОбъект.ВалютаДокумента = РеализацияОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ТаблицаКурсов = РегистрыСведений.КурсыВалют.СрезПоследних(КонецДня(РеализацияОбъект.Дата), Новый Структура("Валюта", РеализацияОбъект.ВалютаДокумента));
		Если ТаблицаКурсов.Количество() > 0 Тогда
			РеализацияОбъект.КурсВзаиморасчетов = ?(ТаблицаКурсов[0].Курс = 0, 1, ТаблицаКурсов[0].Курс);
			РеализацияОбъект.КратностьВзаиморасчетов = ?(ТаблицаКурсов[0].Кратность = 0, 1, ТаблицаКурсов[0].Кратность);
		Иначе
			РеализацияОбъект.КурсВзаиморасчетов = 1;
			РеализацияОбъект.КратностьВзаиморасчетов = 1;
		КонецЕсли;
		
		// счета учета
		ЗаполнитьЗначенияСвойств(РеализацияОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки(РеализацияОбъект));
		
		// комментарий
		РеализацияОбъект.Комментарий = "### Загружен из биллинга " + Формат(ДокументОбъект.Дата, "ДЛФ=D");
		
		// очистим табличные части и прочие реквизиты
		РеализацияОбъект.Товары.Очистить();
		РеализацияОбъект.Услуги.Очистить();
		РеализацияОбъект.ВозвратнаяТара.Очистить();
		РеализацияОбъект.СерийныеНомера.Очистить();
		РеализацияОбъект.СоставНабора.Очистить();
		РеализацияОбъект.СерийныеНомераСоставНабора.Очистить();
		РеализацияОбъект.ДокументыРасчетовСКонтрагентом.Очистить();
		РеализацияОбъект.СуммаДокумента = 0;
		РеализацияОбъект.ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		РеализацияОбъект.Грузоотправитель = Справочники.Контрагенты.ПустаяСсылка();
		РеализацияОбъект.Грузополучатель = Справочники.Контрагенты.ПустаяСсылка();
		
		// абс_СчетНаОплатуПокупателю
		РеализацияОбъект.абс_СчетНаОплатуПокупателю = СтрокаДанных.СчетНаОплатуПокупателю;
		
		СписокОбработанныхДокументов.Добавить(РеализацияОбъект.Ссылка);
		
	КонецЕсли;
	
	// теперь добавим строку в табличную часть "Услуги"
	НСтрока = РеализацияОбъект.Услуги.Добавить();
	НСтрока.Количество = ?(СтрокаДанных.Количество = 0, 1, СтрокаДанных.Количество);
	НСтрока.Номенклатура = СтрокаДанных.НоменклатураУслуги;
	НСтрока.Содержание = СтрокаДанных.СодержаниеУслуги;
	НСтрока.Сумма = ?(РеализацияОбъект.УчитыватьНДС И РеализацияОбъект.СуммаВключаетНДС, СтрокаДанных.СуммаБезНДС + СтрокаДанных.СуммаНДС, СтрокаДанных.СуммаБезНДС);
	НСтрока.СуммаНДС = ?(СтрокаДанных.СуммаБезНДС = 0, 0, СтрокаДанных.СуммаНДС);
	НСтрока.Цена = НСтрока.Сумма / НСтрока.Количество;
	НСтрока.СтавкаНДС = ПолучитьСтавкуНДСПоСуммам(СтрокаДанных.СуммаБезНДС, СтрокаДанных.СуммаНДС);
	Если РеализацияОбъект.ОтражатьВБухгалтерскомУчете Тогда
		НСтрока.СчетДоходовБУ = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
		НСтрока.СчетРасходовБУ = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
		НСтрока.СубконтоБУ = СтрокаДанных.НоменклатурнаяГруппа;
		Если РеализацияОбъект.ОтражатьВНалоговомУчете Тогда
			НСтрока.СчетДоходовНУ = ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
			НСтрока.СчетРасходовНУ = ПланыСчетов.Налоговый.СебестоимостьПродаж;
			НСтрока.СубконтоНУ = СтрокаДанных.НоменклатурнаяГруппа;
		КонецЕсли;
	КонецЕсли;
	
	// снимем пометку удаления
	Если РеализацияОбъект.ПометкаУдаления Тогда
		РеализацияОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЕсли;
	
	// запишем документ
	РежимЗаписи = ?(РеализацияОбъект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
	Попытка
		РеализацияОбъект.Записать(РежимЗаписи);
	Исключение
		Возврат "Не удалось записать документ реализации по строке " + СокрЛП(СтрокаДанных.НомерСтроки) + " по причине: " +
		Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	// добавим в соответствующую строку документа загрузки "абс_ЗагрузкаДанныхИзБиллинга"
	СтрокаДокументаЗагрузки = ДокументОбъект.ЗагруженныеДанные.Найти(СтрокаДанных.НомерСтроки, "НомерСтроки");
	Если СтрокаДокументаЗагрузки <> Неопределено Тогда
		СтрокаДокументаЗагрузки.РеализацияТоваровИУслуг = РеализацияОбъект.Ссылка;
		СтрокаДанных.РеализацияТоваровИУслуг = РеализацияОбъект.Ссылка;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// В функции создается документ "Счет-фактура выданный" по переданной строке данных
// либо редактируется существующий документ
//
// Параметры:
//  СтрокаДанных - строка табличной части, содержащая данные для создания документа
//  ДокументОбъект  - документ "абс_ЗагрузкаДанныхИзБиллинга", которым выполняется загрузка
//					  вызвавшая создание документа
//  СписокОбработанныхДокументов - список документов, уже записанных в ходе загрузки,
//								   вызвавшей создание документа
//
// Возвращаемое значение:
//  Булево - признак успешности создания документа (Истина - документ записан, Ложь - документ не записан)
//
Функция СоздатьСчетФактуруВыданный(СтрокаДанных, ДокументОбъект, СписокОбработанныхДокументов)
	
	// найдем счет-фактуру, связанный с документом реализации
	СчетФактураРеализации = УчетНДС.НайтиПодчиненныйСчетФактуру(СтрокаДанных.РеализацияТоваровИУслуг, "СчетФактураВыданный");
	
	// счет-фактура может изменяться существующий либо создаваться новый
	Если Не СтрокаДанных.СчетФактураВыданный.Пустая() Тогда
		
		// проверим, чтобы счет-фактура в строке совпадал со счетом-фактурой реализации
		Если СчетФактураРеализации <> Неопределено И СчетФактураРеализации <> СтрокаДанных.СчетФактураВыданный Тогда
			Возврат " В строке № " + СокрЛП(СтрокаДанных.НомерСтроки) + " указан счет-фактура, отличающийся от счета-фактуры документа реализации.";
		КонецЕсли;
		
		СФОбъект = СтрокаДанных.СчетФактураВыданный.ПолучитьОбъект();
		
	Иначе
		
		Если СчетФактураРеализации <> Неопределено Тогда
			// если найден счет-фактура по реализации, значит, его и необходимо использовать
			СФОбъект = СчетФактураРеализации.ПолучитьОбъект();
			
		Иначе
			// создадим новый документ
			СФОбъект = Документы.СчетФактураВыданный.СоздатьДокумент();
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(СФОбъект);
			
			СФОбъект.Организация = ДокументОбъект.Организация;
			СФОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию;
			
			// заполним номер и дату
			Если СтрокаДанных.НомерСФ <> "" Тогда
				СФОбъект.Номер = ПолучитьНомерДокумента(СокрЛП(СтрокаДанных.НомерСФ), СФОбъект);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДанных.ДатаСФ) Тогда
				СФОбъект.Дата = СтрокаДанных.ДатаСФ;
			Иначе
				СФОбъект.Дата = ТекущаяДата();
			КонецЕсли;
			
			// запишем документ
			Попытка
				СФОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Возврат " Не удалось записать счет-фактуру выданный по строке № " + СокрЛП(СтрокаДанных.НомерСтроки) +
						" по причине: " + СокрЛП(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// теперь перезаполним шапку документа и очистим табличные части, если он еще не обрабатывался
	// в этой загрузке
	Если СписокОбработанныхДокументов.НайтиПоЗначению(СФОбъект.Ссылка) = Неопределено Тогда
		
		// очистим все таб. части
		СФОбъект.Авансы.Очистить();
		СФОбъект.ДокументыОснования.Очистить();
		Если СФОбъект.ДатаНомерДокументовОплаты.Количество() > 1 Тогда
			// удалим все строки, кроме первой, а в первой очистим
			Сч = СФОбъект.ДатаНомерДокументовОплаты.Количество() - 1;
			Пока Сч >= 1 Цикл
				СФОбъект.ДатаНомерДокументовОплаты.Удалить(Сч);
				Сч = Сч - 1;
			КонецЦикла;
		КонецЕсли;
		СФОбъект.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента = Дата(1,1,1,0,0,0);
		СФОбъект.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента = "";
		
		// Организация
		СФОбъект.Организация = ДокументОбъект.Организация;
		
		// На всякий случай установим вид счета-фактуры
		СФОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию;
		
		// Контрагент и договор
		СФОбъект.Контрагент = СтрокаДанных.Контрагент;
		СФОбъект.ДоговорКонтрагента = СтрокаДанных.ДоговорКонтрагента;
		
		// перезаполним номер и дату
		Если СтрокаДанных.НомерСФ <> "" Тогда
			СФОбъект.Номер = ПолучитьНомерДокумента(СокрЛП(СтрокаДанных.НомерСФ), СФОбъект);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.ДатаСФ) Тогда
			СФОбъект.Дата = СтрокаДанных.ДатаСФ;
		Иначе
			СФОбъект.Дата = ТекущаяДата();
		КонецЕсли;
		
		// Валюта
		СФОбъект.ВалютаДокумента = СФОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		// Основание
		СтрокаОснования = СФОбъект.ДокументыОснования.Добавить();
		СтрокаОснования.ДокументОснование = СтрокаДанных.РеализацияТоваровИУслуг;
		
		СФОбъект.ДокументОснование = СтрокаДанных.РеализацияТоваровИУслуг;
		
		// сумма документа
		СФОбъект.СуммаДокумента = СтрокаДанных.РеализацияТоваровИУслуг.СуммаДокумента;
		
		СФОбъект.СформированПриВводеНачальныхОстатковНДС = Ложь;
		
		// комментарий
		СФОбъект.Комментарий = "### Загружен из биллинга " + Формат(ДокументОбъект.Дата, "ДЛФ=D");
		
	КонецЕсли;
	
	// добавим строку нового документа-основания, если он еще не добавлен
	СтрокаДокументаОснования = СФОбъект.ДокументыОснования.Найти(СтрокаДанных.РеализацияТоваровИУслуг, "ДокументОснование");
	Если СтрокаДокументаОснования = Неопределено Тогда
		СтрокаДокументаОснования = СФОбъект.ДокументыОснования.Добавить();
		СтрокаДокументаОснования.ДокументОснование = СтрокаДанных.РеализацияТоваровИУслуг;
		СФОбъект.СуммаДокумента = СФОбъект.СуммаДокумента + СтрокаДанных.РеализацияТоваровИУслуг.СуммаДокумента;
	КонецЕсли;
	
	// снимем пометку удаления
	Если СФОбъект.ПометкаУдаления Тогда
		СФОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЕсли;
	
	// запишем документ
	РежимЗаписи = ?(СФОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	
	Попытка
		СФОбъект.Записать(РежимЗаписи);
	Исключение
		Возврат " Не удалось " + ?(РежимЗаписи = РежимЗаписиДокумента.Проведение, "провести", "записать") + " счет-фактуру выданный по строке № " + СокрЛП(СтрокаДанных.НомерСтроки) +
				" по причине: " + СокрЛП(ОписаниеОшибки());
	КонецПопытки;
	
	// добавим в соответствующую строку документа ДокументОбъект
	СтрокаСФВыданного = ДокументОбъект.ЗагруженныеДанные.Найти(СтрокаДанных.НомерСтроки, "НомерСтроки");
	Если СтрокаСФВыданного <> Неопределено Тогда
		СтрокаСФВыданного.СчетФактураВыданный = СФОбъект.Ссылка;
		СтрокаДанных.СчетФактураВыданный = СФОбъект.Ссылка;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// В процедуре производится заполнение колонки "ИмяКолонкиТаблицы" значениями колонки с номером
// "НомерКолонкиТабДокумента" табличного документа "ТабДокумент" во всех строках, начиная со строки
// с номером "НомерПервойСтроки" табличного документа. Значения приводятся к типу Строка.
//
// Параметры:
//  ТабДокумент - табличный документ, из которого производится загрузка
//  ТаблицаЗагрузки - таблица значений, в которую производится загрузка
//  ИмяКолонкиТаблицы - строка - имя колонки таблицы загрузки, в которую загружаются значения
//  НомерКолонкиТабДокумента - число - номер колонки табличного документа, из которого берутся данные
//  НомерПервойСтроки - число - номер, с которого начинается чтение данных в табличном документе
//
Процедура СопоставитьСтроки(ТабДокумент, ТаблицаЗагрузки, ИмяКолонкиТаблицы, НомерКолонкиТабДокумента, НомерПервойСтроки)
	
	НомерТекущейСтроки = 0;
	Для К = НомерПервойСтроки По ТабДокумент.ВысотаТаблицы Цикл
		ТекстЯчейки = СокрЛП(ТабДокумент.Область("R" + Формат(К, "ЧГ=")+ "C" + Формат(НомерКолонкиТабДокумента, "ЧГ=")).Текст);
		ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = СтрЗаменить(ТекстЯчейки, Символы.НПП, "");
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

// В процедуре производится заполнение колонки "ИмяКолонкиТаблицы" значениями колонки с номером
// "НомерКолонкиТабДокумента" табличного документа "ТабДокумент" во всех строках, начиная со строки
// с номером "НомерПервойСтроки" табличного документа. Значения приводятся к типу Число.
//
// Параметры:
//  ТабДокумент - табличный документ, из которого производится загрузка
//  ТаблицаЗагрузки - таблица значений, в которую производится загрузка
//  ИмяКолонкиТаблицы - строка - имя колонки таблицы загрузки, в которую загружаются значения
//  НомерКолонкиТабДокумента - число - номер колонки табличного документа, из которого берутся данные
//  НомерПервойСтроки - число - номер, с которого начинается чтение данных в табличном документе
//
Процедура СопоставитьЧисла(ТабДокумент, ТаблицаЗагрузки, ИмяКолонкиТаблицы, НомерКолонкиТабДокумента, НомерПервойСтроки)
	
	НомерТекущейСтроки = 0;
	Для К = НомерПервойСтроки По ТабДокумент.ВысотаТаблицы Цикл
		ТекстЯчейки = СокрЛП(ТабДокумент.Область("R" + Формат(К, "ЧГ=")+ "C" + Формат(НомерКолонкиТабДокумента, "ЧГ=")).Текст);
		Попытка
			ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = Число(СтрЗаменить(СтрЗаменить(ТекстЯчейки, Символы.НПП, ""), " ", ""));
		Исключение
			ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = 0;
		КонецПопытки;
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

// В процедуре производится заполнение колонки "ИмяКолонкиТаблицы" значениями колонки с номером
// "НомерКолонкиТабДокумента" табличного документа "ТабДокумент" во всех строках, начиная со строки
// с номером "НомерПервойСтроки" табличного документа. Значения приводятся к типу Дата.
//
// Параметры:
//  ТабДокумент - табличный документ, из которого производится загрузка
//  ТаблицаЗагрузки - таблица значений, в которую производится загрузка
//  ИмяКолонкиТаблицы - строка - имя колонки таблицы загрузки, в которую загружаются значения
//  НомерКолонкиТабДокумента - число - номер колонки табличного документа, из которого берутся данные
//  НомерПервойСтроки - число - номер, с которого начинается чтение данных в табличном документе
//
Процедура СопоставитьДаты(ТабДокумент, ТаблицаЗагрузки, ИмяКолонкиТаблицы, НомерКолонкиТабДокумента, НомерПервойСтроки)
	
	НомерТекущейСтроки = 0;
	Для К = НомерПервойСтроки По ТабДокумент.ВысотаТаблицы Цикл
		ТекстЯчейки = СокрЛП(ТабДокумент.Область("R" + Формат(К, "ЧГ=")+ "C" + Формат(НомерКолонкиТабДокумента, "ЧГ=")).Текст);
		// попробуем получить дату 2 способами
		Попытка
			// просто из текста
			ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = Дата(ТекстЯчейки);
		Исключение
			// возможно, дата представлена в виде "15.02.2010 0:00:00" или без нулей
			// ищем первую точку
			ПозицияТочки = Найти(ТекстЯчейки, ".");
			Если ПозицияТочки <> 0 Тогда
				ТекстДень = СокрЛП(Лев(ТекстЯчейки, ПозицияТочки - 1));
				ТекстЯчейки = Сред(ТекстЯчейки, ПозицияТочки + 1);
				ПозицияТочки = Найти(ТекстЯчейки, ".");
				Если ПозицияТочки <> 0 Тогда
					ТекстМесяц = СокрЛП(Лев(ТекстЯчейки, ПозицияТочки - 1));
					ТекстЯчейки = Сред(ТекстЯчейки, ПозицияТочки + 1);
					ТекстГод = СокрЛП(Сред(ТекстЯчейки, 1, 4));
					// попробуем определить время
					ПозицияПробела = Найти(ТекстЯчейки, " ");
					ПозицияДвоеточия = Найти(ТекстЯчейки, ":");
					ТекстЧас = "0";
					ТекстМинута = "0";
					ТекстСекунда = "0";
					Если ПозицияПробела <> 0 И ПозицияДвоеточия <> 0 И ПозицияПробела < ПозицияДвоеточия Тогда
						ТекстЧас = СокрЛП(Сред(ТекстЯчейки, ПозицияПробела + 1, ПозицияДвоеточия - ПозицияПробела - 1));
						ТекстЯчейки = Сред(ТекстЯчейки, ПозицияДвоеточия + 1);
						ПозицияДвоеточия = Найти(ТекстЯчейки, ":");
						Если ПозицияДвоеточия <> 0 Тогда
							ТекстМинута = СокрЛП(Лев(ТекстЯчейки, ПозицияДвоеточия - 1));
							ТекстСекунда = СокрЛП(Сред(ТекстЯчейки, ПозицияДвоеточия + 1));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// попробуем привести все полученные тексты к числам
			Попытка
				ЧислоГод = Число(ТекстГод);
				ЧислоМесяц = Число(ТекстМесяц);
				ЧислоДень = Число(ТекстДень);
				ЧислоЧас = Число(ТекстЧас);
				ЧислоМинута = Число(ТекстМинута);
				ЧислоСекунда = Число(ТекстСекунда);
				ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = Дата(ЧислоГод, ЧислоМесяц, ЧислоДень, ЧислоЧас, ЧислоМинута, ЧислоСекунда);
			Исключение
				ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = Дата(1,1,1,0,0,0);
			КонецПопытки;
		КонецПопытки;
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

// В процедуре производится заполнение колонки "ИмяКолонкиТаблицы" значениями колонки с номером
// "НомерКолонкиТабДокумента" табличного документа "ТабДокумент" во всех строках, начиная со строки
// с номером "НомерПервойСтроки" табличного документа. Значения приводятся к типу Булево.
//
// Параметры:
//  ТабДокумент - табличный документ, из которого производится загрузка
//  ТаблицаЗагрузки - таблица значений, в которую производится загрузка
//  ИмяКолонкиТаблицы - строка - имя колонки таблицы загрузки, в которую загружаются значения
//  НомерКолонкиТабДокумента - число - номер колонки табличного документа, из которого берутся данные
//  НомерПервойСтроки - число - номер, с которого начинается чтение данных в табличном документе
//
Процедура СопоставитьБулево(ТабДокумент, ТаблицаЗагрузки, ИмяКолонкиТаблицы, НомерКолонкиТабДокумента, НомерПервойСтроки)
	
	НомерТекущейСтроки = 0;
	Для К = НомерПервойСтроки По ТабДокумент.ВысотаТаблицы Цикл
		ТекстЯчейки = СокрЛП(ТабДокумент.Область("R" + Формат(К, "ЧГ=")+ "C" + Формат(НомерКолонкиТабДокумента, "ЧГ=")).Текст);
		ТекстЯчейки = СтрЗаменить(СтрЗаменить(ТекстЯчейки, " ", ""), Символы.НПП, "");
		// попробуем привести ТекстЯчейки к типу Булево
		ВрегТекстЯчейки = Врег(ТекстЯчейки);
		Если ВрегТекстЯчейки = "ЛОЖЬ" ИЛИ ВрегТекстЯчейки = "НЕТ" ИЛИ ВрегТекстЯчейки = "FALSE" Тогда
			ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = Ложь;
		ИначеЕсли ВрегТекстЯчейки = "ИСТИНА" ИЛИ ВрегТекстЯчейки = "ДА" ИЛИ ВрегТекстЯчейки = "TRUE" Тогда
			ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = Истина;
		Иначе
			// попробуем привести текст ячейки к числу
			Попытка
				ЧислоТекста = Число(СтрЗаменить(СтрЗаменить(ТекстЯчейки, " ", ""), Символы.НПП, ""));
				Если ЧислоТекста <> 0 Тогда
					ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = Истина;
				Иначе
					ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = Ложь;
				КонецЕсли;
			Исключение
				ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = Ложь;
			КонецПопытки;
		КонецЕсли;
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

// В процедуре производится заполнение колонки "ИмяКолонкиТаблицы" значениями колонки с номером
// "НомерКолонкиТабДокумента" табличного документа "ТабДокумент" во всех строках, начиная со строки
// с номером "НомерПервойСтроки" табличного документа. Значения приводятся к типу ПеречислениеСсылка.
//
// Параметры:
//  ИмяПеречисления - Строка - имя перечисления, значение которого необходимо получить
//  ТабДокумент - табличный документ, из которого производится загрузка
//  ТаблицаЗагрузки - таблица значений, в которую производится загрузка
//  ИмяКолонкиТаблицы - Строка - имя колонки таблицы загрузки, в которую загружаются значения
//  НомерКолонкиТабДокумента - Число - номер колонки табличного документа, из которого берутся данные
//  НомерПервойСтроки - Число - номер, с которого начинается чтение данных в табличном документе
//
Процедура СопоставитьПеречисление(ИмяПеречисления, ТабДокумент, ТаблицаЗагрузки, ИмяКолонкиТаблицы, НомерКолонкиТабДокумента, НомерПервойСтроки)
	
	НомерТекущейСтроки = 0;
	Для К = НомерПервойСтроки По ТабДокумент.ВысотаТаблицы Цикл
		ТекстЯчейки = СокрЛП(ТабДокумент.Область("R" + Формат(К, "ЧГ=")+ "C" + Формат(НомерКолонкиТабДокумента, "ЧГ=")).Текст);
		// попробуем найти по имени значения или по синониму
		ИмяПоиска = Врег(СтрЗаменить(СтрЗаменить(ТекстЯчейки, Символы.НПП, ""), " ", ""));
		Для Каждого ТекЗначение Из Перечисления[ИмяПеречисления] Цикл
			ПредставлениеСинонима = Врег(СтрЗаменить(СтрЗаменить(ТекЗначение.Метаданные().Синоним, Символы.НПП, ""), " ", ""));
			ПредставлениеИмени = Врег(ТекЗначение.Метаданные().Имя);
			Если ПредставлениеИмени = ИмяПоиска ИЛИ ПредставлениеСинонима = ИмяПоиска Тогда
				ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = ТекЗначение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

// В процедуре производится заполнение колонки "ИмяКолонкиТаблицы" значениями колонки с номером
// "НомерКолонкиТабДокумента" табличного документа "ТабДокумент" во всех строках, начиная со строки
// с номером "НомерПервойСтроки" табличного документа. Значения приводятся к типу ПланСчетовСсылка.
//
// Параметры:
//  ИмяПланаСчетов - Строка - имя плана счетов, значения которого необходимо получить
//  ТабДокумент - табличный документ, из которого производится загрузка
//  ТаблицаЗагрузки - таблица значений, в которую производится загрузка
//  ИмяКолонкиТаблицы - строка - имя колонки таблицы загрузки, в которую загружаются значения
//  НомерКолонкиТабДокумента - число - номер колонки табличного документа, из которого берутся данные
//  НомерПервойСтроки - число - номер, с которого начинается чтение данных в табличном документе
//
Процедура СопоставитьПланСчетов(ИмяПланаСчетов, ТабДокумент, ТаблицаЗагрузки, ИмяКолонкиТаблицы, НомерКолонкиТабДокумента, НомерПервойСтроки)
	
	НомерТекущейСтроки = 0;
	Для К = НомерПервойСтроки По ТабДокумент.ВысотаТаблицы Цикл
		ТекстЯчейки = СокрЛП(ТабДокумент.Область("R" + Формат(К, "ЧГ=")+ "C" + Формат(НомерКолонкиТабДокумента, "ЧГ=")).Текст);
		ТекстЯчейкиКод = СтрЗаменить(СтрЗаменить(ТекстЯчейки , " ", ""), Символы.НПП, "");
		// попробуем найти по коду
		Счет = ПланыСчетов[ИмяПланаСчетов].НайтиПоКоду(ТекстЯчейкиКод);
		Если Не Счет.Пустая() Тогда
			ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = Счет;
		Иначе
			Счет = ПланыСчетов[ИмяПланаСчетов].НайтиПоНаименованию(ТекстЯчейки);
			Если Не Счет.Пустая() Тогда
				ТаблицаЗагрузки[НомерТекущейСтроки][ИмяКолонкиТаблицы] = Счет;
			КонецЕсли;
		КонецЕсли;
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

// ФУНКЦИЯ ДЛЯ ЗАЩИТЫ МОДУЛЯ -----------------------------------------------

// Функция возвращает строку, наименование макета Компоненты защиты
//
// Параметры:
//			Нет
//
Функция GetUSBKeyComponentLocation()
	Перем Постфикс;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 тогда
		Постфикс = "Win32";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 тогда
		Постфикс = "Win64";
	КонецЕсли;
	
	
	Макет = Метаданные.ОбщиеМакеты.Найти("КомпонентаЗащиты_Hasp_" + Постфикс);
	Если Макет = Неопределено тогда
		ВызватьИсключение("Макет с образом компоненты защиты не найден");
	КонецЕсли;

	Возврат Макет.ПолноеИмя();
КонецФункции

