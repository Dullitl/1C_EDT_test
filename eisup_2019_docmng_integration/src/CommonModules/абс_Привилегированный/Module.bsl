Функция ВернутьЗапрос(Организация,НачПериода,КонПериода) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Оператор,
	               |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2) КАК ДоговорОператора,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток) КАК СальдоНаНачало,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК ОборотПоДт,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК ОборотПоКт,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток) КАК СальдоНаКонец
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачПериода, &КонПериода, , , Счет = &СчетОператора, , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2)
	               |ИТОГИ
	               |	СУММА(СальдоНаНачало),
	               |	СУММА(ОборотПоДт),
	               |	СУММА(ОборотПоКт),
	               |	СУММА(СальдоНаКонец)
	               |ПО
	               |	Оператор,
	               |	ДоговорОператора";
	
	Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетОператора", ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.10.1"));
	
	Результат = Запрос.Выполнить();
	//Возврат Результат.Выгрузить();
	Возврат Результат;
КонецФункции

Функция ВыполнитьЗапрос(ТекстЗапроса,СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Для каждого Структура из СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(Структура.Ключ,Структура.Значение);	
	КонецЦикла;	
	
	Возврат Запрос.Выполнить();		
	
КонецФункции

Функция СоздатьЗаказПокупателяДляПроектаБезКонтроляПрав(ПроектСсылка, ОрганизацияПроекта, ДатаДокумента) Экспорт
	
	//УстановитьПривилегированныйРежим(Истина); 
	
	ЕСли НЕ Константы.абс_ПроведениеПоМеханизмуПроектногоУчета.Получить() Тогда
		Возврат Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕСли;
	
	ПроектОбъект = ПроектСсылка.ПолучитьОбъект();
	
	НайденнаяСтрока = ПроектОбъект.абс_Заказы.Найти(ОрганизацияПроекта, "Организация");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ПроектОбъект.абс_Заказы.Добавить();
		НайденнаяСтрока.Организация = ОрганизацияПроекта;
	КонецЕсли;
	
	//создание документа "Заказ покупателя"
	ДокЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокЗаказ, "Продажа");
	Если ДатаДокумента = Неопределено Или ДатаДокумента = '0001-01-01' или ДатаДокумента = '0001-01-01-00-00-00' Тогда
		ДокЗаказ.Дата = ТекущаяДата();
	Иначе
		ДокЗаказ.Дата = ДатаДокумента;
	КонецЕсли;
	ДокЗаказ.Организация = ОрганизацияПроекта;
	ДокЗаказ.Проект = ПроектСсылка;
	Попытка  		
		ДокЗаказ.Записать(РежимЗаписиДокумента.Запись);		
	//	Сообщить("В базе данных создан документ: """+Строка(ДокЗаказ.Ссылка)+""" !", СтатусСообщения.Информация);
	Исключение
	//	Сообщить("Не удалось в базе данных создать документ заказ покупателя и установить его для данного проекта по данной организации, по причине: "+ОписаниеОшибки()+" !", СтатусСообщения.Внимание);
		Возврат Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецПопытки;
	
	НайденнаяСтрока.ЗаказПокупателя = ДокЗаказ.Ссылка;
	
	Попытка 
		ПроектОбъект.Записать();
	//	Сообщить("Созданный документ заказ покупателя установлен для данного проекта по данной организации!", СтатусСообщения.Информация);
		Возврат ДокЗаказ.Ссылка;
	Исключение
	//	Сообщить("Не удалось установить созданный документ заказ покупателя для данного проекта по данной организации!", СтатусСообщения.Внимание);
		Возврат Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецПопытки;
	
	//УстановитьПривилегированныйРежим(Ложь);	
	
КонецФункции	

Функция ПолучитьПользователейИнформационнойБазы() Экспорт   //АБС 19351
	
	Возврат  ПользователиИнформационнойБазы.ПолучитьПользователей();
	
КонецФункции

Процедура СформироватьНоменклатурныеГруппыИПроектыБезКонтроляПрав(СсылкаНаЗаявку) Экспорт  
	Документы.абс_ЗаявкаНаПроект.СформироватьНоменклатурныеГруппыИПроекты(СсылкаНаЗаявку);
КонецПроцедуры

//АБС ВСТАВКА 30.11.2014 Навценя

Процедура УдалитьДвиженияРегистратора(Ссылка, БлокироватьДляИзменения = Истина) Экспорт
	
	ИспользованныеРегистры = ПолучитьМассивИспользуемыхРегистров(Ссылка,  Ссылка.Метаданные().Движения);
	
	Для Каждого ИмяРегистра Из ИспользованныеРегистры Цикл
		
		НаборЗаписей = Неопределено;
		Блокировка = Истина;
		
		Если Метаданные.РегистрыНакопления.Найти(ИмяРегистра)<>Неопределено Тогда
			НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра)<>Неопределено Тогда
			НаборЗаписей = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли Метаданные.РегистрыСведений.Найти(ИмяРегистра)<>Неопределено Тогда
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			Блокировка = Ложь;
		КонецЕсли;
		
		Если НаборЗаписей<>Неопределено Тогда
			НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
			Если Блокировка Тогда
				НаборЗаписей.БлокироватьДляИзменения = БлокироватьДляИзменения;
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура СоздатьДокументДвиженийОпераияБух(СтруктураПараметров) Экспорт
	
	СоздаватьДокумент = Ложь;
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.ДокументДвиженийОпераияБух) Тогда
		СоздаватьДокумент = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ДокументДвиженийОпераияБух) Тогда 
		Если СтруктураПараметров.ДокументДвиженийОпераияБух.ПолучитьОбъект() = Неопределено Тогда 
			СоздаватьДокумент = Истина;
		Иначе
			Если СтруктураПараметров.ДокументДвиженийОпераияБух.Организация <> СтруктураПараметров.Орг Тогда 
				СоздаватьДокумент = Истина;
			ИначеЕсли СтруктураПараметров.ДокументДвиженийОпераияБух.ПометкаУдаления <> СтруктураПараметров.ПометкаУдаления Тогда 
				СоздаватьДокумент = Истина;
			ИначеЕсли (СтруктураПараметров.ДокументДвиженийОпераияБух.Дата <> СтруктураПараметров.ДатаПереноса) И (СтруктураПараметров.Статус = Перечисления.абс_СтатусыПереносДанных.Подготовка) Тогда 
				СоздаватьДокумент = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ СоздаватьДокумент Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.ДокументДвиженийОпераияБух) Тогда
		ДокументДвиженийОбъект = Документы.ОперацияБух.СоздатьДокумент();
	Иначе
		ДокументДвиженийОбъект = СтруктураПараметров.ДокументДвиженийОпераияБух.ПолучитьОбъект();
		Если ДокументДвиженийОбъект=Неопределено Тогда
			ДокументДвиженийОбъект = Документы.ОперацияБух.СоздатьДокумент();
		КонецЕсли;
	КонецЕсли;
	
	ДокументДвиженийОбъект.Организация = СтруктураПараметров.Орг;
	ДокументДвиженийОбъект.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	ДокументДвиженийОбъект.Содержание = Строка(СтруктураПараметров.НаправлениеПереноса);
	ДокументДвиженийОбъект.Комментарий = Строка(СтруктураПараметров.Операция); 
	ДокументДвиженийОбъект.ПометкаУдаления = СтруктураПараметров.ПометкаУдаления;
	ДокументДвиженийОбъект.абс_ВидОперацииФилиализация = Перечисления.абс_ВидыОперацийФилиаизация.ПереносДанных; 
	ДокументДвиженийОбъект.Дата = ?(СтруктураПараметров.ДатаПереноса = Неопределено, СтруктураПараметров.Дата, СтруктураПараметров.ДатаПереноса);
	ДокументДвиженийОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	СтруктураПараметров.ДокументДвиженийОпераияБух = ДокументДвиженийОбъект.Ссылка;
	СтруктураПараметров.СоздаватьДокумент = СоздаватьДокумент;
	
КонецПроцедуры

Процедура ЗапонлитьСуммуОперацииБух(ДокументДвиженийОпераияБух) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументДвиженийОпераияБух) Тогда 
		Возврат;	
	КонецЕсли;
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвиженийОпераияБух);
    НаборЗаписей.Прочитать();
		
	Если НаборЗаписей.Количество() > 0 Тогда 	
		ДокументДвиженийОбъект = ДокументДвиженийОпераияБух.ПолучитьОбъект();
		ДокументДвиженийОбъект.СуммаОперации = НаборЗаписей.Итог("Сумма");
		ДокументДвиженийОбъект.ОбменДанными.Загрузка = Истина;
		ДокументДвиженийОбъект.Записать();	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановкаПометкиУдаленияОперацияБух(ДокументДвиженийОпераияБух, ПометкаУдаления) Экспорт
	
	Если ЗначениеЗаполнено(ДокументДвиженийОпераияБух) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументДвиженийОбъект = ДокументДвиженийОпераияБух.ПолучитьОбъект();
	ДокументДвиженийОбъект.ПометкаУдаления = ПометкаУдаления;
	ДокументДвиженийОбъект.ОбменДанными.Загрузка = Истина;
	ДокументДвиженийОбъект.Записать();	
			
КонецПроцедуры

Процедура ОчиститьСуммуОперацииБух(ДокументДвиженийОпераияБух) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументДвиженийОпераияБух) Тогда 
		Возврат;	
	КонецЕсли;
			
	ДокументДвиженийОбъект = ДокументДвиженийОпераияБух.ПолучитьОбъект();
	ДокументДвиженийОбъект.СуммаОперации = 0;
	ДокументДвиженийОбъект.ОбменДанными.Загрузка = Истина;
	ДокументДвиженийОбъект.Записать();
	
КонецПроцедуры

//АБС ВСТАВКА КОНЕЦ

//АБС ВСТАВКА 55879  16.02.2015 10:50:49  Шамов
Функция СоздатьПрочиеДоходыРасходы(Наименование, Родитель) Экспорт
	врОбъект = Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
	врОбъект.Родитель = Родитель;
	врОбъект.абс_Статус = Перечисления.абс_СтатусыНоменклатуры.Использование;
	врОбъект.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет;
	врОбъект.абс_Ответственный = ПараметрыСеанса.ТекущийПользователь;
	врОбъект.Наименование = Наименование;
	врОбъект.абс_Комментарий = "#Автоматическое создание#";
	врОбъект.Записать();   
	Возврат врОбъект.Ссылка;
КонецФункции
//АБС ВСТАВКА 55879 КОНЕЦ
