Функция ОпределитьКорректируемыйДокумент(ДоговорКонтрагента, НомерДокумента, Организация) Экспорт 
	
	//сообщить("ДоговорКонтрагента - " + ДоговорКонтрагента);
	//сообщить("НомерДокумента - " + НомерДокумента);
	//сообщить("Организация - " + Организация);
	
	абс_ИсправляемыйДокументРеализации = документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка();
	Отказ = ложь;
	
	ДоговорДоМиграции = ПолучитьДоговорДоМиграции(ДоговорКонтрагента);   
	//сообщить("ДоговорДоМиграции - " + ДоговорДоМиграции);
	
	Если ЗначениеЗаполнено(ДоговорДоМиграции) Тогда
		//сообщить("Договор найден");
		
		ИсправляемыйДокументДоМиграции = ПолучитьДокументОснованиеКорректировки(ДоговорДоМиграции, НомерДокумента);
		
		ф = найти(НомерДокумента, "/");  
		Если Не ЗначениеЗаполнено(ИсправляемыйДокументДоМиграции) и ф > 0 Тогда
			
			НомерДокумента1 = Сред(НомерДокумента, ф+1, СтрДлина(НомерДокумента)-ф);   
			ИсправляемыйДокументДоМиграции = ПолучитьДокументОснованиеКорректировки(ДоговорДоМиграции, НомерДокумента1);
			
		КонецЕсли;
		
		
		//Сообщить("Корректируемый документ - " + ИсправляемыйДокументДоМиграции );
		
		
		Если ЗначениеЗаполнено(ИсправляемыйДокументДоМиграции) Тогда
			//сообщить("Документ найден");
			СтруктураПараметров = Новый Структура("Филиал,ДЗО", Организация, ДоговорДоМиграции.Организация);     
			МетаданныеДокумента = ИсправляемыйДокументДоМиграции.Метаданные();
			абс_ИсправляемыйДокументРеализации = _ПолучитьДокументРасчетов(ИсправляемыйДокументДоМиграции, СтруктураПараметров, Отказ, "",ДоговорКонтрагента,0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат абс_ИсправляемыйДокументРеализации;
КонецФункции

Функция НайтиДокументОснованиеКорректировки(Организация, НомерДокумента) 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Номер = &Номер
	|	И РеализацияТоваровУслуг.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Номер"		, НомерДокумента);
	Запрос.УстановитьПараметр("Организация"	, Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	ИскатьДокументРасчетов = Ложь;
	
	Попытка 
		ГодРеализации = Число(Лев(НомерДокумента, 2));
		//Если ГодРеализации < 11 Тогда
			ИскатьДокументРасчетов = Истина;
		//КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если ИскатьДокументРасчетов Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументРасчетовСКонтрагентом.Ссылка
		|ИЗ
		|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
		|ГДЕ
		|	ДокументРасчетовСКонтрагентом.Номер = &Номер
		|	И ДокументРасчетовСКонтрагентом.Организация = &Организация");
		
		Запрос.УстановитьПараметр("Номер"		, НомерДокумента);
		Запрос.УстановитьПараметр("Организация"	, Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Возврат Выборка.Ссылка;
			
		КонецЕсли;
	
	КонецЕсли;
	
	
	Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьДоговорДоМиграции(ДоговорПослеМиграции) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка как ДоговорДоМиграции
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ДоговорПослеМиграции = &ДоговорПослеМиграции";
	
	Запрос.УстановитьПараметр("ДоговорПослеМиграции", ДоговорПослеМиграции);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.ДоговорДоМиграции;
	Иначе
		Возврат справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции 

Функция _ПолучитьДокументРасчетов(ДокументОснование, СтруктураПараметров, Отказ, Ошибки,НовыйДоговор,Сумма)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &Организация
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
	|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &ОбъектИсточник";
	
	Запрос.УстановитьПараметр("ОбъектИсточник", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("ОрганизацияПриемник", СтруктураПараметров.Филиал);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ОбъектПриемник;
	Иначе
		
		МетаданныеДокумента = ДокументОснование.Метаданные();

		Док = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
		Док.Дата 				  = абс_СерверныеФункции.ПолучитьДатуСервера();
		Док.Организация           = СтруктураПараметров.Филиал;
		Док.абс_ДокументОснование = ДокументОснование;  
		Док.Контрагент            = НовыйДоговор.Владелец;
		Док.ДоговорКонтрагента    = НовыйДоговор;
		Док.ВалютаДокумента       = НовыйДоговор.ВалютаВзаиморасчетов;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаДокумента",МетаданныеДокумента) Тогда
			Док.СуммаДокумента = Сумма;
		КонецЕсли;
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Запись);	
		Исключение
			Сообщить("Не удалось создать документ учета взаиморасчетов по : "+Символы.ПС+ ДокументОснование +Символы.ПС+ ОписаниеОшибки());			
		КонецПопытки;
		
		абс_Филиализация.ДобавитьСоответствиеОбъектов(ДокументОснование, Док.Ссылка, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
		
		Возврат Док.Ссылка;
		
	КонецЕсли;

КонецФункции 

Функция ПолучитьДокументОснованиеКорректировки(ДоговорДоМиграции, НомерДокумента);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Номер = &НомерДокумента
	|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорДоМиграции);
	Запрос.УстановитьПараметр("НомерДокумента", НомерДокумента);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции 

Функция ИсправляемыйДокументРеализации(СоздаемКорректировкуРеализации, ЭтоДокументПоСторно, Организация, Отказ, НомерДокумента, ДоговорКонтрагента, абс_ИсправляемыйДокументРеализации) Экспорт
		Если СоздаемКорректировкуРеализации Тогда
			абс_ИсправляемыйДокументРеализации = НайтиДокументОснованиеКорректировки(Организация, НомерДокумента);
		КонецЕсли;	
		
		//Проверяем договор на миграцию из КЦ, если была миграция, то создаем документ расчетов с контрагентами (ручной учет)
		Если (не ЗначениеЗаполнено(абс_ИсправляемыйДокументРеализации)) и ЭтоДокументПоСторно Тогда
			
			ДоговорДоМиграции = ПолучитьДоговорДоМиграции(ДоговорКонтрагента);
			
			Если ЗначениеЗаполнено(ДоговорДоМиграции) Тогда
				ИсправляемыйДокументДоМиграции = ПолучитьДокументОснованиеКорректировки(ДоговорДоМиграции, НомерДокумента);
			
				Если ЗначениеЗаполнено(ИсправляемыйДокументДоМиграции) Тогда
					СтруктураПараметров = Новый Структура("Филиал,ДЗО", Организация, ДоговорДоМиграции.Организация);					
					МетаданныеДокумента = ИсправляемыйДокументДоМиграции.Метаданные();
					абс_ИсправляемыйДокументРеализации = _ПолучитьДокументРасчетов(ИсправляемыйДокументДоМиграции, СтруктураПараметров, Отказ, "",ДоговорКонтрагента,0);
				КонецЕсли;
			КонецЕсли;
	
		КонецЕсли;

	Возврат  ЗначениеЗаполнено(абс_ИсправляемыйДокументРеализации)	
КонецФункции

// {{ТТК Лапин А. Заявка № 32998 27.07.2015 начало

// непосредственно Осуществляет перенос выбранных элементов Номенклатуры в 
// в группу с наименованием "Номенклатура для отправки в архив" и кодом "10000247582"
// без контроля прав пользователями с ограничениями
Процедура ПереносВГруппу(ТаблицаНоменклатуры = Неопределено,СчетчикКолваПеренесенныхЭлементов) Экспорт
	
	Если ТаблицаНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикКолваПеренесенныхЭлементов = 0;
	
	//перенос в группу с наименованием "Номенклатура для отправки в архив" и кодом "10000247582"
	УстановитьРодителя = Справочники.Номенклатура.НайтиПоКоду("10000247582");
	
	Для Каждого СтрТЗ ИЗ ТаблицаНоменклатуры Цикл
		СпрСсылка = СтрТЗ.Ссылка;
		СпрОбъект = СпрСсылка.ПолучитьОбъект();
		СпрОбъект.Родитель = УстановитьРодителя;
		СпрОбъект.ОбменДанными.Загрузка = Истина;
		СпрОбъект.Записать();
		СпрОбъект.ОбменДанными.Загрузка = Ложь;
		//Сообщить("Элемент """ + СпрСсылка.Наименование + """ с кодом " + СпрСсылка.Код + " перенесен в группу ""_Новая номенклатура (с 12.02.11)\Номенклатура для отправки в архив"" ");
		
		СчетчикКолваПеренесенныхЭлементов = СчетчикКолваПеренесенныхЭлементов + 1;
		
	КонецЦикла;
	
	
КонецПроцедуры // ПереносВГруппу(ТаблицаНоменклатуры) 
//}}ТТК Лапин А. Заявка № 32998 27.07.2015 окончание

// {{ТТК Лапин А. 17.08.2015 начало
Функция ПолучитьСоздатьДоговорСПокупателемПоНомеруИОрганизации(Номер, КонтрагентВладелец, ОрганизацияПринимающая, ДоговорИсточник) Экспорт
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Номер = &Номер";
	
	ДоговорСПокупателем = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
 	Запрос2.УстановитьПараметр("ВидДоговора",ДоговорСПокупателем);
	
	Если ЗначениеЗаполнено(ОрганизацияПринимающая) И
		ЗначениеЗаполнено(Номер) Тогда
		
		Запрос2.УстановитьПараметр("Организация", ОрганизацияПринимающая);
		Запрос2.УстановитьПараметр("Владелец",КонтрагентВладелец);
 		Запрос2.УстановитьПараметр("Номер", Номер);
		
		РезультатЗапроса = Запрос2.Выполнить().Выгрузить();
		
		
		Если РезультатЗапроса.Количество() = 0 Тогда
			//создать
			НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговор = ДоговорИсточник.Скопировать();
			
			НовыйДоговор.УстановитьНовыйКод("к");
			НовыйДоговор.Организация  = ОрганизацияПринимающая;
			//НовыйДоговор.Владелец     = СтрТЧ.Контрагент;
			//НовыйДоговор.Наименование = СтрТЧ.Договор.Наименование;  // ""+СтрТЧ.Договор.Номер + " от "+Стр.Дата;
			//НовыйДоговор.Номер        = СтрТЧ.Номер;
			
			НовыйДоговор.ОбменДанными = Истина;
			НовыйДоговор.Записать();
			НовыйДоговор.ОбменДанными = Ложь;
			
			// теперь запишем ссылку в реквизит "ДоговорПослеМиграции" у договора по ТТК
			
			ТекДогОбъект = ДоговорИсточник.ПолучитьОбъект();
			ТекДогОбъект.ДоговорПослеМиграции = НовыйДоговор.Ссылка;
			ТекДогОбъект.ОбменДанными.Загрузка = Истина;
			ТекДогОбъект.Записать();
			ТекДогОбъект.ОбменДанными.Загрузка = Ложь;
			
			//СтрТЧ.ДоговорПриемник = НовыйДоговор.Ссылка;
			//Сообщить("создан новый договор-приемник и подставлен в табличную часть " + НовыйДоговор.Ссылка + " и текущему договору прописана ссылка в реквизит ""ДоговорПослеМиграции""");
			
			Возврат НовыйДоговор.Ссылка;
			
		ИначеЕсли РезультатЗапроса.Количество() = 1 Тогда
			//заполним
			ДоговорПриемник = РезультатЗапроса.Получить(0).Ссылка;
			
			ТекДогОбъект = ДоговорИсточник.ПолучитьОбъект();
			ТекДогОбъект.ДоговорПослеМиграции = ДоговорПриемник.Ссылка;
			ТекДогОбъект.ОбменДанными.Загрузка = Истина;
			ТекДогОбъект.Записать();
			ТекДогОбъект.ОбменДанными.Загрузка = Ложь;
			
			Возврат ДоговорПриемник.Ссылка;

		Иначе
			// ОСТАВЛЯЕМ НА УСМОТРЕНИЕ И ВЫБОР ПОЛЬЗОВАТЕЛЯ
			// М.Б. ДАЖЕ ПРЕДВАРИТЕЛЬНЫЙ ОТБОР ПОСТАВИТЬ
			//Сообщить("Найдено более одного договора");
		КонецЕсли;
	   		
	Иначе
		
		Возврат Неопределено;  // проблема
			
	КонецЕсли;
		
			
КонецФункции

//}}ТТК Лапин А. 17.08.2015 окончание


// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
// {{KM WARE Лазаревский К.В. Заявка № 01.09.2015 начало
Функция ПолучитьСоздатьРБП(РБПИсточник, ОрганизацияПринимающая) Экспорт
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = 
	"ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &ОрганизацияИсточник
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
	|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &ОбъектИсточник";
	
 	Запрос2.УстановитьПараметр("ОбъектИсточник", РБПИсточник);
	
	Если ЗначениеЗаполнено(ОрганизацияПринимающая)  Тогда
		
		Запрос2.УстановитьПараметр("ОрганизацияИсточник", РБПИсточник.ПодразделениеОрганизации.Владелец);
		Запрос2.УстановитьПараметр("ОрганизацияПриемник", ОрганизацияПринимающая);
		
		РезультатЗапроса = Запрос2.Выполнить().Выгрузить();
		
		
		Если РезультатЗапроса.Количество() = 0 Тогда
			ГруппаРодитель = Справочники.РасходыБудущихПериодов.НайтиПоНаименованию(ОрганизацияПринимающая.Наименование);
			Если Не ЗначениеЗаполнено(ГруппаРодитель) Тогда
				ГруппаРодитель = Справочники.РасходыБудущихПериодов.НайтиПоНаименованию("_"+ОрганизацияПринимающая.Наименование);
			КонецЕсли;	
			
			
			//создать
			НовыйДоговор = Справочники.РасходыБудущихПериодов.СоздатьЭлемент();
			НовыйДоговор = РБПИсточник.Скопировать();
			НовыйДоговор.Родитель = ГруппаРодитель;
			НовыйДоговор.УстановитьНовыйКод("к");
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
			                      |ИЗ
			                      |	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
			                      |ГДЕ
			                      |	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение
			                      |	И СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация");
			Запрос.УстановитьПараметр("Организация",   ОрганизацияПринимающая);
			Запрос.УстановитьПараметр("Подразделение", РБПИсточник.Подразделение);
			Рез = Запрос.Выполнить().Выбрать();
			Если Рез.Следующий() Тогда
				НовыйДоговор.ПодразделениеОрганизации = Рез.ПодразделениеОрганизации;
			КонецЕсли;
			
//			НовыйДоговор.Организация  = ОрганизацияПринимающая;
			
			НовыйДоговор.ОбменДанными = Истина;
			НовыйДоговор.Записать();
			НовыйДоговор.ОбменДанными = Ложь;
			
			// теперь запишем ссылку в реквизит "ДоговорПослеМиграции" у договора по ТТК
			ЗаписьРегистра = РегистрыСведений.абс_СоответствияОбъектовПереноса.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.ОрганизацияИсточник = РБПИсточник.ПодразделениеОрганизации.Владелец;
			ЗаписьРегистра.ОрганизацияПриемник = ОрганизацияПринимающая;
			ЗаписьРегистра.ОбъектИсточник      = РБПИсточник;
			ЗаписьРегистра.ОбъектПриемник      = НовыйДоговор.Ссылка;
			ЗаписьРегистра.ТипПриемник         = "СправочникСсылка.РасходыБудущихПериодов";
			ЗаписьРегистра.Записать();
			//ТекДогОбъект = РБПИсточник.ПолучитьОбъект();
			//ТекДогОбъект.РБП_ПослеМиграции = НовыйДоговор.Ссылка;
			//ТекДогОбъект.ОбменДанными.Загрузка = Истина;
			//ТекДогОбъект.Записать();
			//ТекДогОбъект.ОбменДанными.Загрузка = Ложь;
			
			
			Возврат НовыйДоговор.Ссылка;
			
		ИначеЕсли РезультатЗапроса.Количество() = 1 Тогда
			//заполним
			ДоговорПриемник = РезультатЗапроса.Получить(0).ОбъектПриемник;
			
			//ТекДогОбъект = РБПИсточник.ПолучитьОбъект();
			//ТекДогОбъект.РБП_ПослеМиграции = ДоговорПриемник.Ссылка;
			//ТекДогОбъект.ОбменДанными.Загрузка = Истина;
			//ТекДогОбъект.Записать();
			//ТекДогОбъект.ОбменДанными.Загрузка = Ложь;
			
			Возврат ДоговорПриемник.Ссылка;

		Иначе
			// ОСТАВЛЯЕМ НА УСМОТРЕНИЕ И ВЫБОР ПОЛЬЗОВАТЕЛЯ
			// М.Б. ДАЖЕ ПРЕДВАРИТЕЛЬНЫЙ ОТБОР ПОСТАВИТЬ
			//Сообщить("Найдено более одного договора");
		КонецЕсли;
	   		
	Иначе
		
		Возврат Неопределено;  // проблема
			
	КонецЕсли;
		
			
КонецФункции

 // ПолучитьСоздатьСклады() }}KM WARE Лазаревский К.В. Заявка № 01.09.2015 окончание
// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
// {{KM WARE Лазаревский К.В. Заявка №34656 23.11.2015 начало
Функция ПолучитьСоздатьСклад(СкладИсточник, ОрганизацияИсточник, ОрганизацияПринимающая) Экспорт
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = 
	"ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &ОрганизацияИсточник
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
	|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &ОбъектИсточник";
	
 	Запрос2.УстановитьПараметр("ОбъектИсточник", СкладИсточник);
	Запрос2.УстановитьПараметр("ОрганизацияИсточник", ОрганизацияИсточник);
	Запрос2.УстановитьПараметр("ОрганизацияПриемник", ОрганизацияПринимающая);
	
	Если ЗначениеЗаполнено(ОрганизацияПринимающая)  Тогда
		
		
		РезультатЗапроса = Запрос2.Выполнить().Выгрузить();
		
		
		Если РезультатЗапроса.Количество() = 0 Тогда
			ГруппаРодитель = Справочники.Склады.НайтиПоНаименованию(ОрганизацияПринимающая.Наименование);
			Если Не ЗначениеЗаполнено(ГруппаРодитель) Тогда
				ГруппаРодитель = Справочники.Склады.НайтиПоНаименованию("_"+ОрганизацияПринимающая.Наименование);
			КонецЕсли;	
			
			
			//создать
			НовыйДоговор = Справочники.Склады.СоздатьЭлемент();
			НовыйДоговор = СкладИсточник.Скопировать();
			НовыйДоговор.Родитель = ГруппаРодитель;
			НовыйДоговор.УстановитьНовыйКод(ОрганизацияПринимающая.Префикс);
			
			НовыйДоговор.ОбменДанными = Истина;
			НовыйДоговор.Записать();
			НовыйДоговор.ОбменДанными = Ложь;
			
			// теперь запишем ссылку в реквизит "ДоговорПослеМиграции" у договора по ТТК
			ЗаписьРегистра = РегистрыСведений.абс_СоответствияОбъектовПереноса.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.ОрганизацияИсточник = ОрганизацияИсточник;
			ЗаписьРегистра.ОрганизацияПриемник = ОрганизацияПринимающая;
			ЗаписьРегистра.ОбъектИсточник      = СкладИсточник;
			ЗаписьРегистра.ОбъектПриемник      = НовыйДоговор.Ссылка;
			ЗаписьРегистра.ТипПриемник         = "СправочникСсылка.Склады";
			ЗаписьРегистра.Записать();
			
			Возврат НовыйДоговор.Ссылка;
			
		ИначеЕсли РезультатЗапроса.Количество() = 1 Тогда
			//заполним
			ДоговорПриемник = РезультатЗапроса.Получить(0).ОбъектПриемник;
			
			Возврат ДоговорПриемник.Ссылка;

		Иначе
			// ОСТАВЛЯЕМ НА УСМОТРЕНИЕ И ВЫБОР ПОЛЬЗОВАТЕЛЯ
			// М.Б. ДАЖЕ ПРЕДВАРИТЕЛЬНЫЙ ОТБОР ПОСТАВИТЬ
			//Сообщить("Найдено более одного договора");
		КонецЕсли;
	   		
	Иначе
		
		Возврат Неопределено;  // проблема
			
	КонецЕсли;
		
			
КонецФункции
 // ПолучитьСоздатьСклады() }}KM WARE Лазаревский К.В. Заявка №34656 23.11.2015 окончание
 
 // <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
// {{KM WARE Лазаревский К.В. Заявка № 01.09.2015 начало
Функция ПолучитьСоздатьНоменклатурыеГруппыСтроительство(НомГруппаИсточник, ОрганизацияПринимающая) Экспорт
	ГруппаСтроительство = Справочники.НоменклатурныеГруппы.НайтиПоКоду("Строительство13");
	ЗапросПрверкаНаСтроительство = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                                            |	1 КАК Поле1
	                                            |ИЗ
	                                            |	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	                                            |ГДЕ
	                                            |	НоменклатурныеГруппы.Ссылка = &Ссылка
	                                            |	И НоменклатурныеГруппы.Ссылка В ИЕРАРХИИ(&Строительство)");
	ЗапросПрверкаНаСтроительство.УстановитьПараметр("Ссылка",        НомГруппаИсточник);
	ЗапросПрверкаНаСтроительство.УстановитьПараметр("Строительство", ГруппаСтроительство);
	Рез = ЗапросПрверкаНаСтроительство.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат НомГруппаИсточник;
	КонецЕсли;
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = 
	"ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &ОрганизацияИсточник
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
	|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &ОбъектИсточник";
	
 	Запрос2.УстановитьПараметр("ОбъектИсточник", НомГруппаИсточник);
	
	Если ЗначениеЗаполнено(ОрганизацияПринимающая)  Тогда
		
		Запрос2.УстановитьПараметр("ОрганизацияИсточник", НомГруппаИсточник.Организация);
		Запрос2.УстановитьПараметр("ОрганизацияПриемник", ОрганизацияПринимающая);
		
		РезультатЗапроса = Запрос2.Выполнить().Выгрузить();
		
		
		Если РезультатЗапроса.Количество() = 0 Тогда
			ГруппаРодитель = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(ОрганизацияПринимающая.Наименование, Ложь, ГруппаСтроительство);
			Если Не ЗначениеЗаполнено(ГруппаРодитель) Тогда
				ГруппаРодитель = Справочники.РасходыБудущихПериодов.НайтиПоНаименованию("_"+ОрганизацияПринимающая.Наименование, Ложь, ГруппаСтроительство);
			КонецЕсли;	
			
			
			//создать
			НовыйДоговор = Справочники.НоменклатурныеГруппы.СоздатьЭлемент();
			НовыйДоговор = НомГруппаИсточник.Скопировать();
			НовыйДоговор.Родитель = ГруппаРодитель;
			НовыйДоговор.УстановитьНовыйКод("к");
			
			НовыйДоговор.Организация  = ОрганизацияПринимающая;
			
			НовыйДоговор.ОбменДанными = Истина;
			НовыйДоговор.Записать();
			НовыйДоговор.ОбменДанными = Ложь;
			
			// теперь запишем ссылку в реквизит "ДоговорПослеМиграции" у договора по ТТК
			ЗаписьРегистра = РегистрыСведений.абс_СоответствияОбъектовПереноса.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.ОрганизацияИсточник = НомГруппаИсточник.Организация;
			ЗаписьРегистра.ОрганизацияПриемник = ОрганизацияПринимающая;
			ЗаписьРегистра.ОбъектИсточник      = НомГруппаИсточник;
			ЗаписьРегистра.ОбъектПриемник      = НовыйДоговор.Ссылка;
			ЗаписьРегистра.ТипПриемник         = "СправочникСсылка.НоменклатурныеГруппы";
			ЗаписьРегистра.Записать();
			//ТекДогОбъект = РБПИсточник.ПолучитьОбъект();
			//ТекДогОбъект.РБП_ПослеМиграции = НовыйДоговор.Ссылка;
			//ТекДогОбъект.ОбменДанными.Загрузка = Истина;
			//ТекДогОбъект.Записать();
			//ТекДогОбъект.ОбменДанными.Загрузка = Ложь;
			
			
			Возврат НовыйДоговор.Ссылка;
			
		ИначеЕсли РезультатЗапроса.Количество() = 1 Тогда
			//заполним
			ДоговорПриемник = РезультатЗапроса.Получить(0).ОбъектПриемник;
			
			//ТекДогОбъект = НоменклатурныеГруппы.ПолучитьОбъект();
			//ТекДогОбъект.РБП_ПослеМиграции = ДоговорПриемник.Ссылка;
			//ТекДогОбъект.ОбменДанными.Загрузка = Истина;
			//ТекДогОбъект.Записать();
			//ТекДогОбъект.ОбменДанными.Загрузка = Ложь;
			
			Возврат ДоговорПриемник.Ссылка;

		Иначе
			// ОСТАВЛЯЕМ НА УСМОТРЕНИЕ И ВЫБОР ПОЛЬЗОВАТЕЛЯ
			// М.Б. ДАЖЕ ПРЕДВАРИТЕЛЬНЫЙ ОТБОР ПОСТАВИТЬ
			//Сообщить("Найдено более одного договора");
		КонецЕсли;
	   		
	Иначе
		
		Возврат Неопределено;  // проблема
			
	КонецЕсли;
		
			
КонецФункции

 // ПолучитьСоздатьНоменклатурыеГруппыСтроительство() }}KM WARE Лазаревский К.В. Заявка № 01.09.2015 окончание
 
  // <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
// {{KM WARE Лазаревский К.В. Заявка № 01.09.2015 начало
Функция ПолучитьСоздатьОбъектыСтроительство(ОбъектСтроительствоИсточник, ОрганизацияПринимающая, ОрганизацияИсточник) Экспорт
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = 
	"ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &ОрганизацияИсточник
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
	|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &ОбъектИсточник";
	
 	Запрос2.УстановитьПараметр("ОбъектИсточник",      ОбъектСтроительствоИсточник);
 	Запрос2.УстановитьПараметр("ОрганизацияПриемник", ОрганизацияПринимающая);
 	Запрос2.УстановитьПараметр("ОрганизацияИсточник", ОрганизацияИсточник);
	
	Если ЗначениеЗаполнено(ОрганизацияПринимающая)  Тогда
		
		РезультатЗапроса = Запрос2.Выполнить().Выгрузить();
		
		
		Если РезультатЗапроса.Количество() = 0 Тогда
			ГруппаРодитель = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(СтрЗаменить(ОрганизацияПринимающая.Наименование, "Макрорегион", "МР"));
			Если Не ЗначениеЗаполнено(ГруппаРодитель) Тогда
				ГруппаРодитель = Справочники.РасходыБудущихПериодов.НайтиПоНаименованию("_"+ОрганизацияПринимающая.Наименование);
			КонецЕсли;	
			
			
			//создать
			НовыйДоговор = Справочники.ОбъектыСтроительства.СоздатьЭлемент();
			НовыйДоговор = ОбъектСтроительствоИсточник.Скопировать();
			НовыйДоговор.Родитель = ГруппаРодитель;
			НовыйДоговор.УстановитьНовыйКод("к");
			
			НовыйДоговор.Организация  = ОрганизацияПринимающая;
			
			НовыйДоговор.ОбменДанными = Истина;
			НовыйДоговор.Записать();
			НовыйДоговор.ОбменДанными = Ложь;
			
			// теперь запишем ссылку в реквизит "ДоговорПослеМиграции" у договора по ТТК
			ЗаписьРегистра = РегистрыСведений.абс_СоответствияОбъектовПереноса.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.ОрганизацияИсточник = ОрганизацияИсточник;
			ЗаписьРегистра.ОрганизацияПриемник = ОрганизацияПринимающая;
			ЗаписьРегистра.ОбъектИсточник      = ОбъектСтроительствоИсточник;
			ЗаписьРегистра.ОбъектПриемник      = НовыйДоговор.ссылка;
			ЗаписьРегистра.ТипПриемник         = "СправочникСсылка.ОбъектыСтроительства";
			ЗаписьРегистра.Записать();
			//ТекДогОбъект = РБПИсточник.ПолучитьОбъект();
			//ТекДогОбъект.РБП_ПослеМиграции = НовыйДоговор.Ссылка;
			//ТекДогОбъект.ОбменДанными.Загрузка = Истина;
			//ТекДогОбъект.Записать();
			//ТекДогОбъект.ОбменДанными.Загрузка = Ложь;
			
			
			Возврат НовыйДоговор;
			
		ИначеЕсли РезультатЗапроса.Количество() = 1 Тогда
			//заполним
			//ДоговорПриемник = РезультатЗапроса.Получить(0).ОбъектПриемник;
			
			//ТекДогОбъект = НоменклатурныеГруппы.ПолучитьОбъект();
			//ТекДогОбъект.РБП_ПослеМиграции = ДоговорПриемник.Ссылка;
			//ТекДогОбъект.ОбменДанными.Загрузка = Истина;
			//ТекДогОбъект.Записать();
			//ТекДогОбъект.ОбменДанными.Загрузка = Ложь;
			
			Возврат РезультатЗапроса.ОбъектПриемник;

		Иначе
			// ОСТАВЛЯЕМ НА УСМОТРЕНИЕ И ВЫБОР ПОЛЬЗОВАТЕЛЯ
			// М.Б. ДАЖЕ ПРЕДВАРИТЕЛЬНЫЙ ОТБОР ПОСТАВИТЬ
			//Сообщить("Найдено более одного договора");
		КонецЕсли;
	   		
	Иначе
		
		Возврат Неопределено;  // проблема
			
	КонецЕсли;
		
			
КонецФункции

 // ПолучитьСоздатьобъектыСтроительство() }}KM WARE Лазаревский К.В. Заявка № 01.09.2015 окончание