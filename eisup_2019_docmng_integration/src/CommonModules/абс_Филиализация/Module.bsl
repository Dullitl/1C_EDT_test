///////////////////////////////////////////////////////////////////////////
// Процедуры операция передачи

//01,02,04,05
Процедура ВнеоборотныеАктивыПередачаИзДЗОВКТТК(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	СтруктураЗапросов = ПолучитьСтруктуруЗапросовОСиНМА();
	
	//БУ
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	//НУ
	мСчетаУчетаНУ = Новый Массив;
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НематериальныеАктивы);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов);
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", КонецДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	//Получение временных таблиц
	Запрос.Текст = СтруктураЗапросов.ВТ_СостояниеОСОрганизацийСрезПоследних;
	Запрос.Выполнить();
	
	Запрос.Текст = СтруктураЗапросов.ВТ_СостояниеНМАОрганизацийСрезПоследних;
	Запрос.Выполнить();
	
	Запрос.Текст = СтруктураЗапросов.ВТ_СобытиеОСОрганизацийИзНастроекСистемы;
	Запрос.Выполнить();
	
	СтруктураДанныхПроцедурыФормированияЗаписей = Новый Структура;
	//1. Обнуление регистров "Стоимость ОС ", "Стоимость ОС (бухгалтерский учет)", "Стоимость ОС (налоговый учет)", "Стоимость НМА (бухгалтерский учет)", "Стоимость НМА (налоговый учет)"
	
	//1.1. Формирование запроса к данным остатков регистра "Стоимость ОС "
	СтрокаОтбора = "ОсновноеСредство В (ВЫБРАТЬ ВТ.ОсновноеСредство КАК ОсновноеСредство ИЗ ВТ_СостояниеОСОрганизацийСрезПоследних КАК ВТ)";
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьОС",,СтрокаОтбора);
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьОС", Запрос.Выполнить());
	
	//1.2. Формирование запроса к данным остатков регистра "Стоимость ОС (бухгалтерский учет)"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьОСБухгалтерскийУчет");
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьОСБухгалтерскийУчет", Запрос.Выполнить());
	
	//1.3. Формирование запроса к данным остатков регистра "Стоимость ОС (налоговый учет)"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьОСНалоговыйУчет");
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьОСНалоговыйУчет", Запрос.Выполнить());
	
	//1.4. Формирование запроса к данным остатков регистра "Стоимость ОС (налоговый учет)"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьНМАБухгалтерскийУчет");
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьНМАБухгалтерскийУчет", Запрос.Выполнить());
	
	//1.5. Формирование запроса к данным остатков регистра "Стоимость ОС (налоговый учет)"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьНМАНалоговыйУчет");
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьНМАНалоговыйУчет", Запрос.Выполнить());
	
	//Предлагаю для обнуления регистров накопления в общем модуле "абс_Филиализация" создать экспортную процедуру, например "СформироватьДвиженияКорректировкиОстатковРегистров", для формирования записей по любым регистрам накопления.
	//Привожу пример параметров для такой процедуры:
	//Параметр 1 - тип "Структура", ключ структуры - имя регистра, по которому будет создаваться набор записей для создания
	//значение структуры - результат запроса к данным остатков по этому регистру
	//Параметр 2 - дата, на которую будут записаны движения по обнулению (по умолчанию "ДатаПереноса")
	//Параметр 3 - Документ-регистратор для создаваемых движений по этому регистру
	//Параметр 4 - значение множителя, на это значение будет производиться умножение значений ресурсов, полученных в результате выборки данных к остатков по этому регистру 
	//			(по умолчанию предлагаю установить значение = 1)
	
	
	//Пример вызова такой процедуры и описание ее алгоритма:
	
	//абс_Филиализация.СформироватьДвиженияКорректировкиОстатковРегистров(СтруктураДанныхПроцедурыФормированияЗаписей, СтруктураПараметров.ДатаПереноса, СтруктураПараметров.ДокументДвижений, -1)
	ЗначениеМножителя = -1;
	Для каждого ЭСтруктурыДанных Из СтруктураДанныхПроцедурыФормированияЗаписей Цикл
		
		НаборЗаписейРега = РегистрыНакопления[ЭСтруктурыДанных.Ключ].СоздатьНаборЗаписей();
		НаборЗаписейРега.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
		НаборЗаписейРега.Прочитать();
		
		РезультатЗапроса = ЭСтруктурыДанных.Значение;
		Если Не РезультатЗапроса.Пустой() Тогда
			НаборЗаписейРега.Очистить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		МетаданныеРегистра = НаборЗаписейРега.Метаданные();
		
		ВыборкаДанных = РезультатЗапроса.Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРега.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанных);
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = КонецДня(СтруктураПараметров.ДатаПереноса);
			НоваяЗапись.Регистратор = СтруктураПараметров.ДокументДвижений;
			Для каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
				НоваяЗапись[МетаданныеРесурса.Имя] = ЗначениеМножителя * ВыборкаДанных[МетаданныеРесурса.Имя];
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписейРега.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРега.Записать(Истина);
		
	КонецЦикла;
	
	//2. Внесение записи о снятии с учета объектов в регистры сведений "Состояние ОС Организаций", "Состояние НМА организаций", "Состояния ОС"
	СтруктураДанныхПроцедурыФормированияЗаписей.Очистить();
	
	//2.1. Внесение записи о снятии с учета в регистр сведений "Состояния ОС"
	Запрос.Текст = СтруктураЗапросов.СостояниеОС_СнятиеСУчета;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СостоянияОС", Запрос.Выполнить());
	
	//2.2. Внесение записи о снятии с учета в регистр сведений "Состояния ОС Организаций"
	Запрос.Текст = СтруктураЗапросов.СостояниеОСОрганизаций_СнятиеСУчета;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СостоянияОСОрганизаций", Запрос.Выполнить());
	
	//2.3. Внесение записи о снятии с учета в регистр сведений "Состояния НМА Организаций"
	Запрос.Текст = СтруктураЗапросов.СостояниеНМАОрганизаций_СнятиеСУчета;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СостоянияНМАОрганизаций", Запрос.Выполнить());
	
	//3. Внесение записи о событии передачи ОС и НМА в КТТК в регистры сведений "События ОС" и "События ОС Организаций"
	Запрос.Текст = СтруктураЗапросов.СобытиеОСОрганизаций_Передача;
	РезультатСобытияОС = Запрос.Выполнить();
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СобытияОС", РезультатСобытияОС);
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СобытияОСОрганизаций", РезультатСобытияОС);
	
	//4. Внесение записи об отмене начисления амортизации в регистры сведений "Начисление амортизации (УУ, БУ, НУ)"
	Запрос.Текст = СтруктураЗапросов.НачислениеАмортизацииОС_Отмена;
	РезультатНачисленияАмортизацииОС = Запрос.Выполнить();
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("НачислениеАмортизацииОС", РезультатНачисленияАмортизацииОС);
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("НачислениеАмортизацииОСБухгалтерскийУчет", РезультатНачисленияАмортизацииОС);
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("НачислениеАмортизацииОСНалоговыйУчет", РезультатНачисленияАмортизацииОС);
	
	//Выполнение формирования записей в регистры сведений
	Для каждого ЭСтруктурыДанных Из СтруктураДанныхПроцедурыФормированияЗаписей Цикл
		
		РезультатЗапроса = ЭСтруктурыДанных.Значение;
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДанных = РезультатЗапроса.Выбрать();
			ВыборкаДанных.Следующий();
			
			НаборЗаписейРега = РегистрыСведений[ЭСтруктурыДанных.Ключ].СоздатьНаборЗаписей();
			НаборЗаписейРега.Отбор.Регистратор.Установить(ВыборкаДанных.Регистратор);
			НаборЗаписейРега.Прочитать();
			НаборЗаписейРега.Очистить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		ВыборкаДанных.Сбросить();
		Пока ВыборкаДанных.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРега.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанных);
		КонецЦикла;
		
		НаборЗаписейРега.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРега.Записать(Истина);
		
	КонецЦикла;
	
	//5. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = ЛОжь;
	Ошибки = Неопределено;
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
	
	
	
КонецПроцедуры

//01,02,03,КВ 
Процедура ОСПередачаИзДЗОВКТТК(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	СтруктураЗапросов = ПолучитьСтруктуруЗапросовОС();
	
	//БУ
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	//НУ
	мСчетаУчетаНУ = Новый Массив;
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ДоходныеВложенияВ_МЦ);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения);
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", КонецДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	//Получение временных таблиц
	Запрос.Текст = СтруктураЗапросов.ВТ_СостояниеОСОрганизацийСрезПоследних;
	Запрос.Выполнить();
	
	
	Запрос.Текст = СтруктураЗапросов.ВТ_СобытиеОСОрганизацийИзНастроекСистемы;
	Запрос.Выполнить();
	
	СтруктураДанныхПроцедурыФормированияЗаписей = Новый Структура;
	//1. Обнуление регистров "Стоимость ОС ", "Стоимость ОС (бухгалтерский учет)", "Стоимость ОС (налоговый учет)", "Стоимость НМА (бухгалтерский учет)", "Стоимость НМА (налоговый учет)"
	
	//1.1. Формирование запроса к данным остатков регистра "Стоимость ОС "
	//СтрокаОтбора = "ОсновноеСредство В (ВЫБРАТЬ ВТ.ОсновноеСредство КАК ОсновноеСредство ИЗ ВТ_СостояниеОСОрганизацийСрезПоследних КАК ВТ)";
	//ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьОС",,СтрокаОтбора);
	//Запрос.Текст = ТекстЗапроса;
	//СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьОС", Запрос.Выполнить());
	
	//1.2. Формирование запроса к данным остатков регистра "Стоимость ОС (бухгалтерский учет)"
	//ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьОСБухгалтерскийУчет");
	//Запрос.Текст = ТекстЗапроса;
	//СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьОСБухгалтерскийУчет", Запрос.Выполнить());
	
	//1.3. Формирование запроса к данным остатков регистра "Стоимость ОС (налоговый учет)"
	//ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьОСНалоговыйУчет");
	//Запрос.Текст = ТекстЗапроса;
	//СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьОСНалоговыйУчет", Запрос.Выполнить());
	
	//1.4. Формирование запроса к данным остатков регистра "Стоимость ОС (налоговый учет)"
	//ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьНМАБухгалтерскийУчет");
	//Запрос.Текст = ТекстЗапроса;
	//СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьНМАБухгалтерскийУчет", Запрос.Выполнить());
	
	//1.5. Формирование запроса к данным остатков регистра "Стоимость ОС (налоговый учет)"
	//ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьНМАНалоговыйУчет");
	//Запрос.Текст = ТекстЗапроса;
	//СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьНМАНалоговыйУчет", Запрос.Выполнить());
	
	//Предлагаю для обнуления регистров накопления в общем модуле "абс_Филиализация" создать экспортную процедуру, например "СформироватьДвиженияКорректировкиОстатковРегистров", для формирования записей по любым регистрам накопления.
	//Привожу пример параметров для такой процедуры:
	//Параметр 1 - тип "Структура", ключ структуры - имя регистра, по которому будет создаваться набор записей для создания
	//значение структуры - результат запроса к данным остатков по этому регистру
	//Параметр 2 - дата, на которую будут записаны движения по обнулению (по умолчанию "ДатаПереноса")
	//Параметр 3 - Документ-регистратор для создаваемых движений по этому регистру
	//Параметр 4 - значение множителя, на это значение будет производиться умножение значений ресурсов, полученных в результате выборки данных к остатков по этому регистру 
	//			(по умолчанию предлагаю установить значение = 1)
	
	
	//Пример вызова такой процедуры и описание ее алгоритма:
	
	//абс_Филиализация.СформироватьДвиженияКорректировкиОстатковРегистров(СтруктураДанныхПроцедурыФормированияЗаписей, СтруктураПараметров.ДатаПереноса, СтруктураПараметров.ДокументДвижений, -1)
	ЗначениеМножителя = -1;
	Для каждого ЭСтруктурыДанных Из СтруктураДанныхПроцедурыФормированияЗаписей Цикл
		
		НаборЗаписейРега = РегистрыНакопления[ЭСтруктурыДанных.Ключ].СоздатьНаборЗаписей();
		НаборЗаписейРега.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
		НаборЗаписейРега.Прочитать();
		
		РезультатЗапроса = ЭСтруктурыДанных.Значение;
		Если Не РезультатЗапроса.Пустой() Тогда
			НаборЗаписейРега.Очистить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		МетаданныеРегистра = НаборЗаписейРега.Метаданные();
		
		ВыборкаДанных = РезультатЗапроса.Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРега.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанных);
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = КонецДня(СтруктураПараметров.ДатаПереноса);
			НоваяЗапись.Регистратор = СтруктураПараметров.ДокументДвижений;
			Для каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
				НоваяЗапись[МетаданныеРесурса.Имя] = ЗначениеМножителя * ВыборкаДанных[МетаданныеРесурса.Имя];
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписейРега.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРега.Записать(Истина);
		
	КонецЦикла;
	
	//2. Внесение записи о снятии с учета объектов в регистры сведений "Состояние ОС Организаций", "Состояние НМА организаций", "Состояния ОС"
	СтруктураДанныхПроцедурыФормированияЗаписей.Очистить();
	
	//2.1. Внесение записи о снятии с учета в регистр сведений "Состояния ОС"
	Запрос.Текст = СтруктураЗапросов.СостояниеОС_СнятиеСУчета;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СостоянияОС", Запрос.Выполнить());
	
	//2.2. Внесение записи о снятии с учета в регистр сведений "Состояния ОС Организаций"
	Запрос.Текст = СтруктураЗапросов.СостояниеОСОрганизаций_СнятиеСУчета;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СостоянияОСОрганизаций", Запрос.Выполнить());
	
	//2.3. Внесение записи о снятии с учета в регистр сведений "Состояния НМА Организаций"
	//Запрос.Текст = СтруктураЗапросов.СостояниеНМАОрганизаций_СнятиеСУчета;
	//СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СостоянияНМАОрганизаций", Запрос.Выполнить());
	
	//3. Внесение записи о событии передачи ОС и НМА в КТТК в регистры сведений "События ОС" и "События ОС Организаций"
	Запрос.Текст = СтруктураЗапросов.СобытиеОСОрганизаций_Передача;
	РезультатСобытияОС = Запрос.Выполнить();
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СобытияОС", РезультатСобытияОС);
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СобытияОСОрганизаций", РезультатСобытияОС);
	
	//4. Внесение записи об отмене начисления амортизации в регистры сведений "Начисление амортизации (УУ, БУ, НУ)"
	Запрос.Текст = СтруктураЗапросов.НачислениеАмортизацииОС_Отмена;
	РезультатНачисленияАмортизацииОС = Запрос.Выполнить();
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("НачислениеАмортизацииОС", РезультатНачисленияАмортизацииОС);
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("НачислениеАмортизацииОСБухгалтерскийУчет", РезультатНачисленияАмортизацииОС);
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("НачислениеАмортизацииОСНалоговыйУчет", РезультатНачисленияАмортизацииОС);
	
	//Выполнение формирования записей в регистры сведений
	Для каждого ЭСтруктурыДанных Из СтруктураДанныхПроцедурыФормированияЗаписей Цикл
		Прервать;
		РезультатЗапроса = ЭСтруктурыДанных.Значение;
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДанных = РезультатЗапроса.Выбрать();
			ВыборкаДанных.Следующий();
			
			НаборЗаписейРега = РегистрыСведений[ЭСтруктурыДанных.Ключ].СоздатьНаборЗаписей();
			НаборЗаписейРега.Отбор.Регистратор.Установить(ВыборкаДанных.Регистратор);
			НаборЗаписейРега.Прочитать();
			НаборЗаписейРега.Очистить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		ВыборкаДанных.Сбросить();
		Пока ВыборкаДанных.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРега.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанных);
		КонецЦикла;
		
		НаборЗаписейРега.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРега.Записать(Истина);
		
	КонецЦикла;
	
	//5. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = ЛОжь;
	Ошибки = Неопределено;
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
	
КонецПроцедуры

//04,05
Процедура НМАПередачаИзДЗОВКТТК(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	СтруктураЗапросов = ПолучитьСтруктуруЗапросовНМА();
	
	//БУ
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	//НУ
	мСчетаУчетаНУ = Новый Массив;
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НематериальныеАктивы);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ПриобретениеНематериальныхАктивов);
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", КонецДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	//Получение временных таблиц
	
	Запрос.Текст = СтруктураЗапросов.ВТ_СостояниеНМАОрганизацийСрезПоследних;
	Запрос.Выполнить();
	
	СтруктураДанныхПроцедурыФормированияЗаписей = Новый Структура;
	//1. Обнуление регистров "Стоимость ОС ", "Стоимость ОС (бухгалтерский учет)", "Стоимость ОС (налоговый учет)", "Стоимость НМА (бухгалтерский учет)", "Стоимость НМА (налоговый учет)"
	
	//1.1. Формирование запроса к данным остатков регистра "Стоимость ОС "
	//СтрокаОтбора = "ОсновноеСредство В (ВЫБРАТЬ ВТ.ОсновноеСредство КАК ОсновноеСредство ИЗ ВТ_СостояниеОСОрганизацийСрезПоследних КАК ВТ)";
	//ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьОС",,СтрокаОтбора);
	//Запрос.Текст = ТекстЗапроса;
	//СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьОС", Запрос.Выполнить());
	//
	//1.2. Формирование запроса к данным остатков регистра "Стоимость ОС (бухгалтерский учет)"
	//ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьОСБухгалтерскийУчет");
	//Запрос.Текст = ТекстЗапроса;
	//СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьОСБухгалтерскийУчет", Запрос.Выполнить());
	//
	//1.3. Формирование запроса к данным остатков регистра "Стоимость ОС (налоговый учет)"
	//ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьОСНалоговыйУчет");
	//Запрос.Текст = ТекстЗапроса;
	//СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьОСНалоговыйУчет", Запрос.Выполнить());
	//
	//1.4. Формирование запроса к данным остатков регистра "Стоимость ОС (налоговый учет)"
	//ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьНМАБухгалтерскийУчет");
	//Запрос.Текст = ТекстЗапроса;
	//СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьНМАБухгалтерскийУчет", Запрос.Выполнить());
	//
	//1.5. Формирование запроса к данным остатков регистра "Стоимость ОС (налоговый учет)"
	//ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтоимостьНМАНалоговыйУчет");
	//Запрос.Текст = ТекстЗапроса;
	//СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтоимостьНМАНалоговыйУчет", Запрос.Выполнить());
	//
	//Предлагаю для обнуления регистров накопления в общем модуле "абс_Филиализация" создать экспортную процедуру, например "СформироватьДвиженияКорректировкиОстатковРегистров", для формирования записей по любым регистрам накопления.
	//Привожу пример параметров для такой процедуры:
	//Параметр 1 - тип "Структура", ключ структуры - имя регистра, по которому будет создаваться набор записей для создания
	//значение структуры - результат запроса к данным остатков по этому регистру
	//Параметр 2 - дата, на которую будут записаны движения по обнулению (по умолчанию "ДатаПереноса")
	//Параметр 3 - Документ-регистратор для создаваемых движений по этому регистру
	//Параметр 4 - значение множителя, на это значение будет производиться умножение значений ресурсов, полученных в результате выборки данных к остатков по этому регистру 
	//			(по умолчанию предлагаю установить значение = 1)
	
	
	//Пример вызова такой процедуры и описание ее алгоритма:
	
	//абс_Филиализация.СформироватьДвиженияКорректировкиОстатковРегистров(СтруктураДанныхПроцедурыФормированияЗаписей, СтруктураПараметров.ДатаПереноса, СтруктураПараметров.ДокументДвижений, -1)
	ЗначениеМножителя = -1;
	Для каждого ЭСтруктурыДанных Из СтруктураДанныхПроцедурыФормированияЗаписей Цикл
		
		НаборЗаписейРега = РегистрыНакопления[ЭСтруктурыДанных.Ключ].СоздатьНаборЗаписей();
		НаборЗаписейРега.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
		НаборЗаписейРега.Прочитать();
		
		РезультатЗапроса = ЭСтруктурыДанных.Значение;
		Если Не РезультатЗапроса.Пустой() Тогда
			НаборЗаписейРега.Очистить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		МетаданныеРегистра = НаборЗаписейРега.Метаданные();
		
		ВыборкаДанных = РезультатЗапроса.Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРега.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанных);
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = КонецДня(СтруктураПараметров.ДатаПереноса);
			НоваяЗапись.Регистратор = СтруктураПараметров.ДокументДвижений;
			Для каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
				НоваяЗапись[МетаданныеРесурса.Имя] = ЗначениеМножителя * ВыборкаДанных[МетаданныеРесурса.Имя];
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписейРега.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРега.Записать(Истина);
		
	КонецЦикла;
	
	//2. Внесение записи о снятии с учета объектов в регистры сведений "Состояние ОС Организаций", "Состояние НМА организаций", "Состояния ОС"
	СтруктураДанныхПроцедурыФормированияЗаписей.Очистить();
	
	//2.1. Внесение записи о снятии с учета в регистр сведений "Состояния ОС"
	
	//2.2. Внесение записи о снятии с учета в регистр сведений "Состояния ОС Организаций"
	
	//2.3. Внесение записи о снятии с учета в регистр сведений "Состояния НМА Организаций"
	Запрос.Текст = СтруктураЗапросов.СостояниеНМАОрганизаций_СнятиеСУчета;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СостоянияНМАОрганизаций", Запрос.Выполнить());
	
	//3. Внесение записи о событии передачи ОС и НМА в КТТК в регистры сведений "События ОС" и "События ОС Организаций"
	
	//4. Внесение записи об отмене начисления амортизации в регистры сведений "Начисление амортизации (УУ, БУ, НУ)"
	
	//Выполнение формирования записей в регистры сведений
	Для каждого ЭСтруктурыДанных Из СтруктураДанныхПроцедурыФормированияЗаписей Цикл
		
		РезультатЗапроса = ЭСтруктурыДанных.Значение;
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДанных = РезультатЗапроса.Выбрать();
			ВыборкаДанных.Следующий();
			
			НаборЗаписейРега = РегистрыСведений[ЭСтруктурыДанных.Ключ].СоздатьНаборЗаписей();
			НаборЗаписейРега.Отбор.Регистратор.Установить(ВыборкаДанных.Регистратор);
			НаборЗаписейРега.Прочитать();
			НаборЗаписейРега.Очистить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		ВыборкаДанных.Сбросить();
		Пока ВыборкаДанных.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРега.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанных);
		КонецЦикла;
		
		НаборЗаписейРега.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРега.Записать(Истина);
		
	КонецЦикла;
	
	//5. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = ЛОжь;
	Ошибки = Неопределено;
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
	
	
	
КонецПроцедуры

//01,02,04,05
Процедура ВнеоборотныеАктивыПриемИзКТТКВФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	СтруктураЗапросов = ПолучитьСтруктуруЗапросовОСиНМА();
	
	//БУ
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	//НУ
	мСчетаУчетаНУ = Новый Массив;
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НематериальныеАктивы);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов);
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	ПериодСреза = НачалоДня(СтруктураПараметров.Период)-1;
	
	//Основной запрос
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодСреза, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", НачалоДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	//Получение временных таблиц
	Запрос.Текст = СтруктураЗапросов.ВТ_СостояниеОСОрганизацийСрезПоследних;
	Запрос.Выполнить();
	
	Запрос.Текст = СтруктураЗапросов.ВТ_СостояниеНМАОрганизацийСрезПоследних;
	Запрос.Выполнить();
	
	//Получение массива ОС для приема
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_СостояниеОСОрганизацийСрезПоследних КАК ВТ";
	МассивОС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	
	//Получение массива НМА для приема
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_СостояниеНМАОрганизацийСрезПоследних КАК ВТ";
	МассивНМА = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НематериальныйАктив");
	
	//=============================================================================
	//Формирование записей по регистрам сведений и накопления по приему из ДЗО
	Для Каждого МетаданноеРегистр из Метаданные.Документы.ПринятиеКУчетуОС.Движения Цикл
		
		Прервать;
		СтруктураОтбораОС = Новый Структура;
		
		Для каждого ИзмерениеРегистра Из МетаданноеРегистр.Измерения Цикл
			Если ИзмерениеРегистра.Тип.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда
				СтруктураОтбораОС.Вставить(ИзмерениеРегистра.Имя, МассивОС);
			КонецЕсли;
		КОнецЦикла;
		
		Если СтруктураОтбораОС.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданноеРегистр) Тогда 
			Если МетаданноеРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки  Тогда 			
				абс_Филиализация.ПеренестиРегистрНакопления(МетаданноеРегистр.Имя, ПериодСреза, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбораОС, Отказ, Ошибки);
			КонецЕсли; 
		КонецЕсли;	
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданноеРегистр) Тогда 
			абс_Филиализация.ПеренестиРегистрСведений(МетаданноеРегистр.Имя, ПериодСреза, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбораОС, Отказ, Ошибки);
		КонецЕсли;	
		
	КонецЦикла;
	
	//==========================================================================
	//Формирование записей по регистрам сведений и накопления по приему из ДЗО
	Для Каждого МетаданноеРегистр из Метаданные.Документы.ПринятиеКУчетуНМА.Движения Цикл
		Прервать;
		СтруктураОтбораНМА = Новый Структура;
		
		Для каждого ИзмерениеРегистра Из МетаданноеРегистр.Измерения Цикл
			Если ИзмерениеРегистра.Тип.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
				СтруктураОтбораНМА.Вставить(ИзмерениеРегистра.Имя, МассивНМА);
			КонецЕсли;
		КОнецЦикла;
		
		Если СтруктураОтбораНМА.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданноеРегистр) Тогда 
			Если МетаданноеРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки  Тогда 			
				абс_Филиализация.ПеренестиРегистрНакопления(МетаданноеРегистр.Имя, ПериодСреза, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбораНМА, Отказ, Ошибки);
			КонецЕсли; 
		КонецЕсли;	
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданноеРегистр) Тогда 
			абс_Филиализация.ПеренестиРегистрСведений(МетаданноеРегистр.Имя, ПериодСреза, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбораНМА, Отказ, Ошибки);
		КонецЕсли;	
		
	КонецЦикла;
	
	//5. Формирование движений по приему из ДЗО по регистрам бухгалтерии БУ и НУ
	абс_Филиализация.СформироватьПроводкиПриемДЗОКТТКБухгалтерскийУчетNEW(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПриемДЗОКТТКНалоговыйУчетNEW(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);	
КонецПроцедуры

//01,02,03,КВ
Процедура ОСПриемИзКТТКВФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	СтруктураЗапросов = ПолучитьСтруктуруЗапросовОС();
	
	//БУ
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	//НУ
	мСчетаУчетаНУ = Новый Массив;
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ДоходныеВложенияВ_МЦ);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения);
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	ПериодСреза = НачалоДня(СтруктураПараметров.Период)-1;
	
	//Основной запрос
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодСреза, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", НачалоДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	//Получение временных таблиц
	Запрос.Текст = СтруктураЗапросов.ВТ_СостояниеОСОрганизацийСрезПоследних;
	Запрос.Выполнить();
	
	
	//Получение массива ОС для приема
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_СостояниеОСОрганизацийСрезПоследних КАК ВТ";
	МассивОС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	
	// Формирование движений по приему из ДЗО по регистрам бухгалтерии БУ и НУ
	
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	
	//=============================================================================
	//Формирование записей по регистрам сведений и накопления по приему из ДЗО
	Для Каждого МетаданноеРегистр из Метаданные.Документы.ПринятиеКУчетуОС.Движения Цикл
		
		СтруктураОтбораОС = Новый Структура;
		
		Для каждого ИзмерениеРегистра Из МетаданноеРегистр.Измерения Цикл
			Если ИзмерениеРегистра.Тип.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда
				СтруктураОтбораОС.Вставить(ИзмерениеРегистра.Имя, МассивОС);
			КонецЕсли;
		КОнецЦикла;
		
		Если СтруктураОтбораОС.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданноеРегистр) Тогда 
			Если МетаданноеРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки  Тогда 			
				абс_Филиализация.ПеренестиРегистрНакопления(МетаданноеРегистр.Имя, ПериодСреза, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбораОС, Отказ, Ошибки);
			КонецЕсли; 
		КонецЕсли;	
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданноеРегистр) Тогда 
			абс_Филиализация.ПеренестиРегистрСведений(МетаданноеРегистр.Имя, ПериодСреза, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбораОС, Отказ, Ошибки);
		КонецЕсли;	
		
	КонецЦикла;
	
	//==========================================================================
	//Формирование записей по регистрам сведений и накопления по приему из ДЗО
	
	
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);	
КонецПроцедуры

//04,05
Процедура НМАПриемИзКТТКВФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	СтруктураЗапросов = ПолучитьСтруктуруЗапросовНМА();
	
	//БУ
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	//НУ
	мСчетаУчетаНУ = Новый Массив;
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НематериальныеАктивы);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ПриобретениеНематериальныхАктивов);
	
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	ПериодСреза = НачалоДня(СтруктураПараметров.Период)-1;
	
	//Основной запрос
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодСреза, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", НачалоДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	
	Запрос.Текст = СтруктураЗапросов.ВТ_СостояниеНМАОрганизацийСрезПоследних;
	Запрос.Выполнить();
	
	//Получение массива НМА для приема
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_СостояниеНМАОрганизацийСрезПоследних КАК ВТ";
	МассивНМА = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НематериальныйАктив");
	
	//=============================================================================
	//Формирование записей по регистрам сведений и накопления по приему из ДЗО
	
	//==========================================================================
	//Формирование записей по регистрам сведений и накопления по приему из ДЗО
	Для Каждого МетаданноеРегистр из Метаданные.Документы.ПринятиеКУчетуНМА.Движения Цикл
		
		СтруктураОтбораНМА = Новый Структура;
		
		Для каждого ИзмерениеРегистра Из МетаданноеРегистр.Измерения Цикл
			Если ИзмерениеРегистра.Тип.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
				СтруктураОтбораНМА.Вставить(ИзмерениеРегистра.Имя, МассивНМА);
			КонецЕсли;
		КОнецЦикла;
		
		Если СтруктураОтбораНМА.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданноеРегистр) Тогда 
			Если МетаданноеРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки  Тогда 			
				абс_Филиализация.ПеренестиРегистрНакопления(МетаданноеРегистр.Имя, ПериодСреза, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбораНМА, Отказ, Ошибки);
			КонецЕсли; 
		КонецЕсли;	
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданноеРегистр) Тогда 
			абс_Филиализация.ПеренестиРегистрСведений(МетаданноеРегистр.Имя, ПериодСреза, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбораНМА, Отказ, Ошибки);
		КонецЕсли;	
		
	КонецЦикла;
	
	//5. Формирование движений по приему из ДЗО по регистрам бухгалтерии БУ и НУ
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);	
КонецПроцедуры

//08.3
Процедура СтроительствоОСПередачаИзДЗОВКТТК(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	КонстантаИзменена  = Ложь;
	Если Константы.абс_ЗаполнятьСпособСтроительстваНаСчет_08_03.Получить() Тогда 
		Константы.абс_ЗаполнятьСпособСтроительстваНаСчет_08_03.Установить(Ложь);
		КонстантаИзменена = Истина;
	КонецЕсли;	
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);    //08.3
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	мСчетаУчетаНУ = Новый Массив;
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.СтроительствоОбъектовОсновныхСредств);   //08.3
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", КонецДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ОбъектыСтроительства) КАК ОбъектСтроительства,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3
	|ПОМЕСТИТЬ ВТ_Хозрасчетный_08_3
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В ИЕРАРХИИ (&СчетаУчетаБУ), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ОбъектыСтроительства) ЕСТЬ НЕ NULL 
	|	И (ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ОбъектыСтроительства)) <> ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)";
	
	
	СтруктураДанныхПроцедурыФормированияЗаписей = Новый Структура;
	//1. Обнуление регистров "Товары организаций", "Партии товаров на складах (бухгалтерский учет)", "Партии товаров на складах (налоговый учет)"
	//==================================================================================================================================================
	
	//1.1. Формирование запроса к данным остатков регистра накопления "Строительство объектов основных средств"
	Запрос.Выполнить();
	СтрокаОтбора = "ОбъектСтроительства В (ВЫБРАТЬ ВТ.ОбъектСтроительства КАК ОбъектСтроительства ИЗ ВТ_Хозрасчетный_08_3 КАК ВТ)";
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("СтроительствоОбъектовОсновныхСредств",,СтрокаОтбора);
	Запрос.Текст = ТекстЗапроса;
	//СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("СтроительствоОбъектовОсновныхСредств", Запрос.Выполнить());
	
	//Предлагаю для обнуления регистров накопления в общем модуле "абс_Филиализация" создать экспортную процедуру, например "СформироватьДвиженияКорректировкиОстатковРегистров", для формирования записей по любым регистрам накопления.
	//Привожу пример параметров для такой процедуры:
	//Параметр 1 - тип "Структура", ключ структуры - имя регистра, по которому будет создаваться набор записей для создания
	//значение структуры - результат запроса к данным остатков по этому регистру
	//Параметр 2 - дата, на которую будут записаны движения по обнулению (по умолчанию "ДатаПереноса")
	//Параметр 3 - Документ-регистратор для создаваемых движений по этому регистру
	//Параметр 4 - значение множителя, на это значение будет производиться умножение значений ресурсов, полученных в результате выборки данных к остатков по этому регистру 
	//			(по умолчанию предлагаю установить значение = 1)
	//Пример вызова такой процедуры и описание ее алгоритма:
	
	//абс_Филиализация.СформироватьДвиженияКорректировкиОстатковРегистров(СтруктураДанныхПроцедурыФормированияЗаписей, СтруктураПараметров.ДатаПереноса, СтруктураПараметров.ДокументДвижений, -1)
	ЗначениеМножителя = -1;
	Для каждого ЭСтруктурыДанных Из СтруктураДанныхПроцедурыФормированияЗаписей Цикл
		Прервать;
		НаборЗаписейРега = РегистрыНакопления[ЭСтруктурыДанных.Ключ].СоздатьНаборЗаписей();
		НаборЗаписейРега.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
		НаборЗаписейРега.Прочитать();
		
		РезультатЗапроса = ЭСтруктурыДанных.Значение;
		Если Не РезультатЗапроса.Пустой() Тогда
			НаборЗаписейРега.Очистить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		МетаданныеРегистра = НаборЗаписейРега.Метаданные();
		
		ВыборкаДанных = РезультатЗапроса.Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРега.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанных);
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = КонецДня(СтруктураПараметров.ДатаПереноса-24*3600);
			НоваяЗапись.Регистратор = СтруктураПараметров.ДокументДвижений;
			Для каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
				НоваяЗапись[МетаданныеРесурса.Имя] = ЗначениеМножителя * ВыборкаДанных[МетаданныеРесурса.Имя];
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписейРега.Записать(Истина);
		
	КонецЦикла;
	//===============================================================================================
	
	//2. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = ЛОжь;
	Ошибки = Неопределено;
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
	Если КонстантаИзменена Тогда 
		Константы.абс_ЗаполнятьСпособСтроительстваНаСчет_08_03.Установить(Не Константы.абс_ЗаполнятьСпособСтроительстваНаСчет_08_03.Получить());
	КонецЕсли;		
	
КонецПроцедуры

//08.3
Процедура СтроительствоОСПередачИзКТТКВФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);    //08.3
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	мСчетаУчетаНУ = Новый Массив;
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.СтроительствоОбъектовОсновныхСредств);   //08.3
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	ПериодОстатков = НачалоДня(СтруктураПараметров.Период)-1;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", НачалоДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ОбъектыСтроительства) КАК ОбъектСтроительства,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В ИЕРАРХИИ (&СчетаУчетаБУ), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ОбъектыСтроительства) ЕСТЬ НЕ NULL 
	|	И (ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ОбъектыСтроительства)) <> ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)";
	МассивОбъектовСтроительства = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектСтроительства");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ОбъектСтроительства", МассивОбъектовСтроительства);
	
	абс_Филиализация.ПеренестиРегистрНакопления("СтроительствоОбъектовОсновныхСредств", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	
	//5. Формирование движений по приему из ДЗО по регистрам бухгалтерии БУ и НУ
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
КонецПроцедуры

//07,10,41,08.04,08.09,08.07
Процедура ОборотныеАктивыИзДЗОВКТТК(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	//07
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	
	//08.4
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);   
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеВзрослыхЖивотных);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПокоду("08.09"));
	
	//10
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеПолуфабрикатыИКомплектующие);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.Топливо);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.Тара);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ЗапасныеЧасти);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеМатериалы);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СтроительныеМатериалы);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку); //10.7
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации); //10.11
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПокоду("10.12"));
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПокоду("10.13"));
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПокоду("10.16"));
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	мСчетаУчетаНУ = Новый Массив;
	
	//07
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ОборудованиеКУстановке);
	
	//08.4
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ПриобретениеОбъектовОсновныхСредств);   
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НайтиПокоду("08.07"));
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НайтиПокоду("08.09"));
	
	
	//10
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.СырьеИМатериалы);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ПокупныеПолуфабрикатыИКомплектующие);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.Топливо);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.Тара);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ЗапасныеЧасти);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ПрочиеМатериалы);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.СтроительныеМатериалы);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ИнвентарьИХозяйственныеПринадлежности);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.СпецоснасткаИСпецодеждаНаСкладе);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.Товары);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.МатериалыПереданныеВПереработку);   //10.7
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.СпецоснасткаИСпецодеждаВЭксплуатации); //10.11
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НайтиПоКоду("10.12"));
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НайтиПоКоду("10.13"));
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НайтиПоКоду("10.16"));
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", КонецДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	СтруктураДанныхПроцедурыФормированияЗаписей = Новый Структура;
	//1. Обнуление регистров "Товары организаций", "Партии товаров на складах (бухгалтерский учет)", "Партии товаров на складах (налоговый учет)"
	//==================================================================================================================================================
	
	//1.1. Формирование временной таблице и основного запроса к данным остатков регистра накопления "Товары организаций"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("ТоварыОрганизаций",,,"ВТ_ТоварыОрганизаций");
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_ТоварыОрганизаций КАК ВТ";
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("ТоварыОрганизаций", Запрос.Выполнить());
	
	//1.2. Формирование временной таблице и основного запроса к данным остатков регистра накопления "Товары переданные"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("ТоварыПереданные");
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("ТоварыПереданные", Запрос.Выполнить());
	
	//1.3. Формирование основного запроса к данным остатков регистра накопления "Материалы в эксплуатации"
	СтрокаОтбора = "Номенклатура В (ВЫБРАТЬ ВТ.Номенклатура КАК Номенклатура ИЗ ВТ_ТоварыОрганизаций КАК ВТ)";
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("МатериалыВЭксплуатации",Ложь,СтрокаОтбора);
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("МатериалыВЭксплуатации", Запрос.Выполнить());
	
	//1.4. Формирование запроса к данным остатков регистра накопления "Партии товаров на складах (бухгалтерский учет)"
	СтрокаОтбора = "СчетУчета В ИЕРАРХИИ (&СчетаУчетаБУ)";
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("ПартииТоваровНаСкладахБухгалтерскийУчет",,СтрокаОтбора);
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("ПартииТоваровНаСкладахБухгалтерскийУчет", Запрос.Выполнить());
	
	//1.5. Формирование запроса к данным остатков регистра накопления "Партии товаров на складах (налоговый учет)"
	СтрокаОтбора = "СчетУчета В ИЕРАРХИИ (&СчетаУчетаНУ)";
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("ПартииТоваровНаСкладахНалоговыйУчет",,СтрокаОтбора);
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("ПартииТоваровНаСкладахНалоговыйУчет", Запрос.Выполнить());
	
	//1.6. Формирование запроса к данным остатков регистра накопления "ПартииТоваровПереданныеБухгалтерскийУчет"
	СтрокаОтбора = "СчетУчета В ИЕРАРХИИ (&СчетаУчетаБУ)";
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("ПартииТоваровПереданныеБухгалтерскийУчет",,СтрокаОтбора);
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("ПартииТоваровПереданныеБухгалтерскийУчет", Запрос.Выполнить());
	
	//1.7. Формирование запроса к данным остатков регистра накопления "ПартииТоваровПереданныеНалоговыйУчет"
	СтрокаОтбора = "СчетУчета В ИЕРАРХИИ (&СчетаУчетаНУ)";
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("ПартииТоваровПереданныеНалоговыйУчет",,СтрокаОтбора);
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("ПартииТоваровПереданныеНалоговыйУчет", Запрос.Выполнить());
	
	//1.8. Формирование запроса к данным остатков регистра накопления "ПартииМатериаловВЭксплуатацииБухгалтерскийУчет"
	СтрокаОтбора = "СчетУчета В ИЕРАРХИИ (&СчетаУчетаБУ)";
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("ПартииМатериаловВЭксплуатацииБухгалтерскийУчет",,СтрокаОтбора);
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("ПартииМатериаловВЭксплуатацииБухгалтерскийУчет", Запрос.Выполнить());
	
	//1.9. Формирование запроса к данным остатков регистра накопления "ПартииМатериаловВЭксплуатацииНалоговыйУчет"
	СтрокаОтбора = "СчетУчета В ИЕРАРХИИ (&СчетаУчетаНУ)";
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("ПартииМатериаловВЭксплуатацииНалоговыйУчет",,СтрокаОтбора);
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("ПартииМатериаловВЭксплуатацииНалоговыйУчет", Запрос.Выполнить());
	
	//Предлагаю для обнуления регистров накопления в общем модуле "абс_Филиализация" создать экспортную процедуру, например "СформироватьДвиженияКорректировкиОстатковРегистров", для формирования записей по любым регистрам накопления.
	//Привожу пример параметров для такой процедуры:
	//Параметр 1 - тип "Структура", ключ структуры - имя регистра, по которому будет создаваться набор записей для создания
	//значение структуры - результат запроса к данным остатков по этому регистру
	//Параметр 2 - дата, на которую будут записаны движения по обнулению (по умолчанию "ДатаПереноса")
	//Параметр 3 - Документ-регистратор для создаваемых движений по этому регистру
	//Параметр 4 - значение множителя, на это значение будет производиться умножение значений ресурсов, полученных в результате выборки данных к остатков по этому регистру 
	//			(по умолчанию предлагаю установить значение = 1)
	//Пример вызова такой процедуры и описание ее алгоритма:
	
	//абс_Филиализация.СформироватьДвиженияКорректировкиОстатковРегистров(СтруктураДанныхПроцедурыФормированияЗаписей, СтруктураПараметров.ДатаПереноса, СтруктураПараметров.ДокументДвижений, -1)
	ЗначениеМножителя = -1;
	Для каждого ЭСтруктурыДанных Из СтруктураДанныхПроцедурыФормированияЗаписей Цикл
		Прервать;
		НаборЗаписейРега = РегистрыНакопления[ЭСтруктурыДанных.Ключ].СоздатьНаборЗаписей();
		НаборЗаписейРега.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
		НаборЗаписейРега.Прочитать();
		
		РезультатЗапроса = ЭСтруктурыДанных.Значение;
		Если Не РезультатЗапроса.Пустой() Тогда
			НаборЗаписейРега.Очистить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		МетаданныеРегистра = НаборЗаписейРега.Метаданные();
		
		ВыборкаДанных = РезультатЗапроса.Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРега.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанных);
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = КонецДня(СтруктураПараметров.ДатаПереноса-24*3600);
			НоваяЗапись.Регистратор = СтруктураПараметров.ДокументДвижений;
			Для каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
				НоваяЗапись[МетаданныеРесурса.Имя] = ЗначениеМножителя * ВыборкаДанных[МетаданныеРесурса.Имя];
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписейРега.Записать(Истина);
		
	КонецЦикла;
	//===============================================================================================
	
	//2. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);	
	
КонецПроцедуры

//07,10,41,08.04,08.09ф,08.07
Процедура ОборотныеАктивыИзКТТКВФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	//07
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	
	//08.4
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);   
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеВзрослыхЖивотных);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПокоду("08.09"));
	
	//10
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеПолуфабрикатыИКомплектующие);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.Топливо);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.Тара);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ЗапасныеЧасти);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеМатериалы);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СтроительныеМатериалы);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку); //10.7
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации); //10.11
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПокоду("10.12"));
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПокоду("10.13"));
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПокоду("10.16"));
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	мСчетаУчетаНУ = Новый Массив;
	
	//07
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ОборудованиеКУстановке);
	
	//08.4
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ПриобретениеОбъектовОсновныхСредств);   
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НайтиПокоду("08.07"));
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НайтиПокоду("08.09"));
	
	
	//10
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.СырьеИМатериалы);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ПокупныеПолуфабрикатыИКомплектующие);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.Топливо);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.Тара);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ЗапасныеЧасти);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ПрочиеМатериалы);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.СтроительныеМатериалы);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ИнвентарьИХозяйственныеПринадлежности);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.СпецоснасткаИСпецодеждаНаСкладе);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.Товары);
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.МатериалыПереданныеВПереработку);   //10.7
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.СпецоснасткаИСпецодеждаВЭксплуатации); //10.11
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НайтиПоКоду("10.12"));
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НайтиПоКоду("10.13"));
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.НайтиПоКоду("10.16"));
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	ПериодОстатков = НачалоДня(СтруктураПараметров.Период)-1;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", НачалоДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	СтруктураОтбора = Новый Структура;
	
	//ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("ТоварыОрганизаций",,,"ВТ_ТоварыОрганизаций");
	//Запрос.Текст = ТекстЗапроса;
	//Запрос.Выполнить();
	//Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_ТоварыОрганизаций КАК ВТ";
	//МассивНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	СкладыДЗО = ПолучитьСкладыДЗО(СтруктураПараметров.ДЗО);
	СтруктураОтбора.Вставить("Склад", СкладыДЗО);
	абс_Филиализация.ПеренестиРегистрНакопления("ТоварыНаСкладах", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("ПартииТоваровНаСкладах", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
		
	СтруктураОтбора.Очистить();
	
	ДокументыОтбораДЗО = ПолучитьДокументыОтбораДЗО(СтруктураПараметров.ДЗО, ПериодОстатков);
	СтруктураОтбора.Вставить("ДокументПередачи", ДокументыОтбораДЗО);
	абс_Филиализация.ПеренестиРегистрНакопления("ПартииМатериаловВЭксплуатации", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
		
	СтруктураОтбора.Очистить();
	
	ДокументыОтбораДЗО = ПолучитьДокументыОтбораДЗОПереданныеПартии(СтруктураПараметров.ДЗО, ПериодОстатков);
	СтруктураОтбора.Вставить("ДокументПередачи", ДокументыОтбораДЗО);
	абс_Филиализация.ПеренестиРегистрНакопления("ПартииТоваровПереданные", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
		
	СтруктураОтбора.Очистить();
	
	
	абс_Филиализация.ПеренестиРегистрНакопления("ТоварыОрганизаций", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, , Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("ТоварыПереданные", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, , Отказ, Ошибки);
	
	//СтруктураОтбора.Вставить("Номенклатура", МассивНоменклатуры);
	//абс_Филиализация.ПеренестиРегистрНакопления("МатериалыВЭксплуатации", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
		
	СтруктураОтбора.Очистить();
	
	
	//СтруктураОтбора.Вставить("СчетУчета", СтруктураПараметров.СчетаБУ);
	абс_Филиализация.ПеренестиРегистрНакопления("ПартииТоваровНаСкладахБухгалтерскийУчет", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("ПартииТоваровПереданныеБухгалтерскийУчет", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("ПартииМатериаловВЭксплуатацииБухгалтерскийУчет", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	
	//СтруктураОтбора.Вставить("СчетУчета", СтруктураПараметров.СчетаНУ);
	абс_Филиализация.ПеренестиРегистрНакопления("ПартииТоваровНаСкладахНалоговыйУчет", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("ПартииТоваровПереданныеНалоговыйУчет", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("ПартииМатериаловВЭксплуатацииНалоговыйУчет", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	
	//5. Формирование движений по приему из ДЗО по регистрам бухгалтерии БУ и НУ
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
		
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
	//7. Перенести регистр СвободныеОстатки по всем складам из мэппинга
	ПеренестиСвободныеОстатки(СтруктураПараметров, Отказ, Ошибки);
	
КонецПроцедуры

//50,51,52,55 
Процедура ДенежныеСредстваПередачаИзДЗОВКТТК(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.Касса);   
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	//Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	//Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	//Запрос.УстановитьПараметр("ДатаПереноса", КонецДня(СтруктураПараметров.ДатаПереноса));
	//Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	//Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	//
	//СтрокаОтбора = "БанковскийСчетКасса.Владелец = &Организация";
	//Запрос.Текст = абс_Филиализация.ТекстЗапросаРегистрНакопления("ДенежныеСредства",Ложь,СтрокаОтбора);
	//Выборка = Запрос.Выполнить().Выбрать();	
	//
	//НаборЗаписей = РегистрыНакопления.ДенежныеСредства.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
	//
	//РесурсыРегистра = Метаданные.РегистрыНакопления.ДенежныеСредства.Ресурсы;
	//
	//Пока Выборка.Следующий() Цикл
	//	НоваяЗапись = НаборЗаписей.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
	//	НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
	//	НоваяЗапись.Период = КонецДня(СтруктураПараметров.ДатаПереноса);
	//	НоваяЗапись.Регистратор = СтруктураПараметров.ДокументДвижений;
	//	Для каждого МетаданныеРесурса Из РесурсыРегистра Цикл
	//		НоваяЗапись[МетаданныеРесурса.Имя] = -Выборка[МетаданныеРесурса.Имя];
	//	КонецЦикла;
	//КонецЦикла;
	//
	//Попытка
	//	НаборЗаписей.Записать();
	//Исключение
	//	Отказ = Истина;
	//	ДобавитьОшибкуПользователю(Ошибки, , "Не удалось записать регистр накопления ""Денежные средства"" по причине:"+Символы.ПС+ОписаниеОшибки());
	//КонецПопытки;
	
	СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	
	
КонецПроцедуры

//50,51,52,55 
Процедура ДенежныеСредстваПриемИзКТТКВФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.Касса);   
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	ПериодОстатков = НачалоДня(СтруктураПараметров.Период)-1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", НачалоДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	СтрокаОтбора = "БанковскийСчетКасса.Владелец = &Организация";
	Запрос.Текст = абс_Филиализация.ТекстЗапросаРегистрНакопления("ДенежныеСредства",Ложь,СтрокаОтбора);
	Выборка = Запрос.Выполнить().Выбрать();	
	
	НаборЗаписей = РегистрыНакопления.ДенежныеСредства.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
	ТаблицаРегистра = НаборЗаписей.Выгрузить();
	
	
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = ТаблицаРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяЗапись.Период = СтруктураПараметров.Период-24*3600;
		НоваяЗапись.Регистратор = СтруктураПараметров.ДокументДвижений;
		НоваяЗапись.Активность = Истина;
	КонецЦикла;
	
	ЗаменитьОбъектыДЗОНаОбъектыФилиалаПоТаблице(ТаблицаРегистра, СтруктураПараметров, Отказ, Ошибки);
	НаборЗаписей.Загрузить(ТаблицаРегистра);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Отказ = Истина;
		ДобавитьОшибкуПользователю(Ошибки, , "Не удалось записать регистр накопления ""Денежные средства"" по причине:"+Символы.ПС+ОписаниеОшибки());
	КонецПопытки;
	
	
	//
	//ПередачаВКТТК = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(СтруктураПараметров.ДЗО, СтруктураПараметров.Операция, Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК);
	//
	//НаборЗаписей = РегистрыНакопления.ДенежныеСредства.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Регистратор.Установить(ПередачаВКТТК.ДокументДвижений);
	//НаборЗаписей.Прочитать();
	//ТаблицаРегистра = НаборЗаписей.Выгрузить();
	//ЗаменитьОбъектыДЗОНаОбъектыФилиалаПоТаблице(ТаблицаРегистра, СтруктураПараметров, Отказ, Ошибки);
	//
	//РесурсыРегистра = Метаданные.РегистрыНакопления.ДенежныеСредства.Ресурсы;
	//Для Каждого СтрокаТаблицы Из ТаблицаРегистра Цикл
	//	СтрокаТаблицы.Период = СтруктураПараметров.Период;
	//	Для Каждого МетаданныеРесурса Из РесурсыРегистра Цикл
	//		СтрокаТаблицы[МетаданныеРесурса.Имя] = -СтрокаТаблицы[МетаданныеРесурса.Имя];
	//	КонецЦикла
	//КонецЦикла;
	//
	//ТаблицаРегистра.Колонки.Удалить(ТаблицаРегистра.Колонки.Регистратор);
	//
	//НаборЗаписей = РегистрыНакопления.ДенежныеСредства.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
	//НаборЗаписей.Загрузить(ТаблицаРегистра);
	
	
	//5. Формирование движений по приему из ДЗО по регистрам бухгалтерии БУ и НУ
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
	
КонецПроцедуры

//19,76АВ,76ВА
Процедура НДСиАванысыПередачаИзДЗОВКТТК(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);        //19
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);           //76.АВ
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным);   //76.ВА
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);         //76.НА
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", КонецДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	СтруктураДанныхПроцедурыФормированияЗаписей = Новый Структура;
	//1. Обнуление регистров "Товары организаций", "Партии товаров на складах (бухгалтерский учет)", "Партии товаров на складах (налоговый учет)"
	//==================================================================================================================================================
	
	//1.1. Формирование запроса к данным остатков регистра накопления "НДС начисленный"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("НДСНачисленный");
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("НДСНачисленный", Запрос.Выполнить());
	
	//1.2. Формирование запроса к данным остатков регистра накопления "НДС предъявленный"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("НДСПредъявленный");
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("НДСПредъявленный", Запрос.Выполнить());
	
	//1.3. Формирование запроса к данным остатков регистра накопления "Взаиморасчеты с контрагентами по документам расчетов"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("НДСсАвансов");
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("НДСсАвансов", Запрос.Выполнить());
	
	//Предлагаю для обнуления регистров накопления в общем модуле "абс_Филиализация" создать экспортную процедуру, например "СформироватьДвиженияКорректировкиОстатковРегистров", для формирования записей по любым регистрам накопления.
	//Привожу пример параметров для такой процедуры:
	//Параметр 1 - тип "Структура", ключ структуры - имя регистра, по которому будет создаваться набор записей для создания
	//значение структуры - результат запроса к данным остатков по этому регистру
	//Параметр 2 - дата, на которую будут записаны движения по обнулению (по умолчанию "ДатаПереноса")
	//Параметр 3 - Документ-регистратор для создаваемых движений по этому регистру
	//Параметр 4 - значение множителя, на это значение будет производиться умножение значений ресурсов, полученных в результате выборки данных к остатков по этому регистру 
	//			(по умолчанию предлагаю установить значение = 1)
	//Пример вызова такой процедуры и описание ее алгоритма:
	
	//абс_Филиализация.СформироватьДвиженияКорректировкиОстатковРегистров(СтруктураДанныхПроцедурыФормированияЗаписей, СтруктураПараметров.ДатаПереноса, СтруктураПараметров.ДокументДвижений, -1)
	ЗначениеМножителя = -1;
	Для каждого ЭСтруктурыДанных Из СтруктураДанныхПроцедурыФормированияЗаписей Цикл
		Прервать;
		НаборЗаписейРега = РегистрыНакопления[ЭСтруктурыДанных.Ключ].СоздатьНаборЗаписей();
		НаборЗаписейРега.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
		НаборЗаписейРега.Прочитать();
		
		РезультатЗапроса = ЭСтруктурыДанных.Значение;
		Если Не РезультатЗапроса.Пустой() Тогда
			НаборЗаписейРега.Очистить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		МетаданныеРегистра = НаборЗаписейРега.Метаданные();
		
		ВыборкаДанных = РезультатЗапроса.Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРега.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанных);
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = КонецДня(СтруктураПараметров.ДатаПереноса-24*3600);
			НоваяЗапись.Регистратор = СтруктураПараметров.ДокументДвижений;
			Для каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
				НоваяЗапись[МетаданныеРесурса.Имя] = ЗначениеМножителя * ВыборкаДанных[МетаданныеРесурса.Имя];
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписейРега.Записать(Истина);
		
	КонецЦикла;
	//===============================================================================================
	
	//2. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = ЛОжь;
	Ошибки = Неопределено;
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
КонецПроцедуры

//19,76АВ,76ВА
Процедура НДСиАванысыПередачаИзКТТКВФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);        //19
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);           //76.АВ
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным);   //76.ВА
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);         //76.НА
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	ПериодОстатков = НачалоДня(СтруктураПараметров.Период)-1;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Филиал", СтруктураПараметров.Филиал);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", НачалоДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	СтуктураДанныхРегистров = Новый Структура;
	СтруктураЗапросов = ПолучитьСтруктуруЗапросовНДСиАвансы();
	
	Запрос.Текст = СтруктураЗапросов.НДСЗаписиКнигиПродаж;
	СтуктураДанныхРегистров.Вставить("НДСЗаписиКнигиПродаж", Запрос.Выполнить());
	
	Запрос.Текст = СтруктураЗапросов.НДСЗаписиКнигиПокупок;
	СтуктураДанныхРегистров.Вставить("НДСЗаписиКнигиПокупок", Запрос.Выполнить());
	
	Для каждого ЭлементДанныхРегистра Из СтуктураДанныхРегистров Цикл
		
		НаборЗаписейРегистра = РегистрыНакопления[ЭлементДанныхРегистра.Ключ].СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
		НаборЗаписейРегистра.Прочитать();
		НаборЗаписейРегистра.Очистить();
		
		ВыборкаДанныхРегистра = ЭлементДанныхРегистра.Значение.Выбрать();
		Пока ВыборкаДанныхРегистра.Следующий() Цикл
			
			ЗаписьНабора = НаборЗаписейРегистра.Добавить();
			
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, ВыборкаДанныхРегистра);
			
			ЗаписьНабора.СчетФактура 				= ПолучитьДокументФилиала(ЗаписьНабора.СчетФактура, СтруктураПараметров, Отказ, Ошибки);
			ЗаписьНабора.ДокументОплаты 			= ПолучитьДокументФилиала(ЗаписьНабора.ДокументОплаты, СтруктураПараметров, Отказ, Ошибки);
			ЗаписьНабора.ДоговорКонтрагента 		= ПолучитьДокументФилиала(ЗаписьНабора.ДоговорКонтрагента, СтруктураПараметров, Отказ, Ошибки);
			ЗаписьНабора.ИсправленныйСчетФактура 	= ПолучитьДокументФилиала(ЗаписьНабора.ИсправленныйСчетФактура, СтруктураПараметров, Отказ, Ошибки);
			
			Если ЗначениеЗаполнено(ЗаписьНабора.ДатаСобытия) Тогда 
				ЗаписьНабора.Период = ЗаписьНабора.ДатаСобытия;
			Иначе
				ЗаписьНабора.Период = ЗаписьНабора.СчетФактура.Дата;				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаборЗаписейРегистра.Количество() > 0 Тогда
			НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
			НаборЗаписейРегистра.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	
	//===========================================================================================
	СтруктураОтбора = Новый Структура;
	
	абс_Филиализация.ПеренестиРегистрНакопления("НДСНачисленный", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("НДСПредъявленный", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("НДСсАвансов", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	
	//5. Формирование движений по приему из ДЗО по регистрам бухгалтерии БУ и НУ
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
		
	//6. Перенос СФ на аванс для корректного запонения обработки "Регистрация счетов фактур на аванс"
	ПеренестиСФНаАванс(СтруктураПараметров, Отказ, Ошибки);
	
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);	
	
КонецПроцедуры

//60,62
Процедура ВзаиморасчетыПередачаИзДЗОВКТТК(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками); //60
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками); //62
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам); //66
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам); //67
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованию); //76.01.1
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям); //76.02
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам); //76.03
	//мСчетаУчета.Добавить(ПЛаныСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками); //76.05
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками); //76.06
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.08")); //76.08
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами); //76.09
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.10")); //76.10
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал); //76.21
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал); //76.22
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал); //76.25
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал); //76.26
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал); //76.29
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ); //76.32
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ); //76.35
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ); //76.36
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ); //76.39
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", КонецДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	СтруктураДанныхПроцедурыФормированияЗаписей = Новый Структура;
	//1. Обнуление регистров "Товары организаций", "Партии товаров на складах (бухгалтерский учет)", "Партии товаров на складах (налоговый учет)"
	//==================================================================================================================================================
	
	//1.1. Формирование запроса к данным остатков регистра накопления "Взаиморасчеты с контрагентами"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("ВзаиморасчетыСКонтрагентами");
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("ВзаиморасчетыСКонтрагентами", Запрос.Выполнить());
	
	//1.2. Формирование запроса к данным остатков регистра накопления "Расчеты с контрагентами"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("РасчетыСКонтрагентами");
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("РасчетыСКонтрагентами", Запрос.Выполнить());
	
	//1.3. Формирование запроса к данным остатков регистра накопления "Взаиморасчеты с контрагентами по документам расчетов"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов");
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов", Запрос.Выполнить());
	
	//1.4. Формирование запроса к данным остатков регистра накопления "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации"
	СтрокаОтбора = "СчетОплаты В ИЕРАРХИИ (&СчетаУчетаБУ)";
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации",,СтрокаОтбора);
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", Запрос.Выполнить());
	
	//1.5. Формирование запроса к данным остатков регистра накопления "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации"
	СтрокаОтбора = "СчетОплаты В ИЕРАРХИИ (&СчетаУчетаБУ)";
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("РасчетыПоРеализацииВУсловныхЕдиницахОрганизации",,СтрокаОтбора);
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("РасчетыПоРеализацииВУсловныхЕдиницахОрганизации", Запрос.Выполнить());
	
	//Предлагаю для обнуления регистров накопления в общем модуле "абс_Филиализация" создать экспортную процедуру, например "СформироватьДвиженияКорректировкиОстатковРегистров", для формирования записей по любым регистрам накопления.
	//Привожу пример параметров для такой процедуры:
	//Параметр 1 - тип "Структура", ключ структуры - имя регистра, по которому будет создаваться набор записей для создания
	//значение структуры - результат запроса к данным остатков по этому регистру
	//Параметр 2 - дата, на которую будут записаны движения по обнулению (по умолчанию "ДатаПереноса")
	//Параметр 3 - Документ-регистратор для создаваемых движений по этому регистру
	//Параметр 4 - значение множителя, на это значение будет производиться умножение значений ресурсов, полученных в результате выборки данных к остатков по этому регистру 
	//			(по умолчанию предлагаю установить значение = 1)
	//Пример вызова такой процедуры и описание ее алгоритма:
	
	//абс_Филиализация.СформироватьДвиженияКорректировкиОстатковРегистров(СтруктураДанныхПроцедурыФормированияЗаписей, СтруктураПараметров.ДатаПереноса, СтруктураПараметров.ДокументДвижений, -1)
	ЗначениеМножителя = -1;
	Для каждого ЭСтруктурыДанных Из СтруктураДанныхПроцедурыФормированияЗаписей Цикл
		Прервать;
		НаборЗаписейРега = РегистрыНакопления[ЭСтруктурыДанных.Ключ].СоздатьНаборЗаписей();
		НаборЗаписейРега.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
		НаборЗаписейРега.Прочитать();
		
		РезультатЗапроса = ЭСтруктурыДанных.Значение;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			НаборЗаписейРега.Очистить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		МетаданныеРегистра = НаборЗаписейРега.Метаданные();
		
		ВыборкаДанных = РезультатЗапроса.Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРега.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанных);
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = КонецДня(СтруктураПараметров.ДатаПереноса-24*3600);
			НоваяЗапись.Регистратор = СтруктураПараметров.ДокументДвижений;
			Для каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
				НоваяЗапись[МетаданныеРесурса.Имя] = ЗначениеМножителя * ВыборкаДанных[МетаданныеРесурса.Имя];
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписейРега.Записать(Истина);
		
	КонецЦикла;
	//===============================================================================================
	
	//2. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = ЛОжь;
	Ошибки = Неопределено;
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
КонецПроцедуры

//60,62
Процедура ВзаиморасчетыПередачаИзКТТКВФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками); //60
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками); //62
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам); //66
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам); //67
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованию); //76.01.1
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям); //76.02
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам); //76.03
	//мСчетаУчета.Добавить(ПЛаныСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками); //76.05
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками); //76.06
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.08")); //76.08
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами); //76.09
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.10")); //76.10
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал); //76.21
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал); //76.22
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал); //76.25
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал); //76.26
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал); //76.29
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ); //76.32
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ); //76.35
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ); //76.36
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ); //76.39
	//СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	ПериодОстатков = НачалоДня(СтруктураПараметров.Период)-1;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", НачалоДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	СтруктураОтбора = Новый Структура;
	
	абс_Филиализация.ПеренестиРегистрНакопления("ВзаиморасчетыСКонтрагентами", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("РасчетыСКонтрагентами", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("РасчетыПоРеализацииВУсловныхЕдиницахОрганизации", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	
	//5. Формирование движений по приему из ДЗО по регистрам бухгалтерии БУ и НУ
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
КонецПроцедуры

//71
Процедура ПодотчетПередачаИзДЗОВКТТК(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);   //71
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", КонецДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	СтруктураДанныхПроцедурыФормированияЗаписей = Новый Структура;
	//1. Обнуление регистров "Товары организаций", "Партии товаров на складах (бухгалтерский учет)", "Партии товаров на складах (налоговый учет)"
	//==================================================================================================================================================
	
	//1.1. Формирование запроса к данным остатков регистра накопления "Товары переданные"
	ТекстЗапроса = абс_Филиализация.ТекстЗапросаРегистрНакопления("ВзаиморасчетыСПодотчетнымиЛицами");
	Запрос.Текст = ТекстЗапроса;
	СтруктураДанныхПроцедурыФормированияЗаписей.Вставить("ВзаиморасчетыСПодотчетнымиЛицами", Запрос.Выполнить());
	
	//Предлагаю для обнуления регистров накопления в общем модуле "абс_Филиализация" создать экспортную процедуру, например "СформироватьДвиженияКорректировкиОстатковРегистров", для формирования записей по любым регистрам накопления.
	//Привожу пример параметров для такой процедуры:
	//Параметр 1 - тип "Структура", ключ структуры - имя регистра, по которому будет создаваться набор записей для создания
	//значение структуры - результат запроса к данным остатков по этому регистру
	//Параметр 2 - дата, на которую будут записаны движения по обнулению (по умолчанию "ДатаПереноса")
	//Параметр 3 - Документ-регистратор для создаваемых движений по этому регистру
	//Параметр 4 - значение множителя, на это значение будет производиться умножение значений ресурсов, полученных в результате выборки данных к остатков по этому регистру 
	//			(по умолчанию предлагаю установить значение = 1)
	//Пример вызова такой процедуры и описание ее алгоритма:
	
	//абс_Филиализация.СформироватьДвиженияКорректировкиОстатковРегистров(СтруктураДанныхПроцедурыФормированияЗаписей, СтруктураПараметров.ДатаПереноса, СтруктураПараметров.ДокументДвижений, -1)
	ЗначениеМножителя = -1;
	Для каждого ЭСтруктурыДанных Из СтруктураДанныхПроцедурыФормированияЗаписей Цикл
		Прервать;
		НаборЗаписейРега = РегистрыНакопления[ЭСтруктурыДанных.Ключ].СоздатьНаборЗаписей();
		НаборЗаписейРега.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
		НаборЗаписейРега.Прочитать();
		
		РезультатЗапроса = ЭСтруктурыДанных.Значение;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			НаборЗаписейРега.Очистить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		МетаданныеРегистра = НаборЗаписейРега.Метаданные();
		
		ВыборкаДанных = РезультатЗапроса.Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРега.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанных);
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = КонецДня(СтруктураПараметров.ДатаПереноса-24*3600);
			НоваяЗапись.Регистратор = СтруктураПараметров.ДокументДвижений;
			Для каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
				НоваяЗапись[МетаданныеРесурса.Имя] = ЗначениеМножителя * ВыборкаДанных[МетаданныеРесурса.Имя];
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписейРега.Записать(Истина);
		
	КонецЦикла;
	//===============================================================================================
	
	//2. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = ЛОжь;
	Ошибки = Неопределено;
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
КонецПроцедуры

//71
Процедура ПодотчетПередачаИзКТТКВФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);   //71
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	ПериодОстатков = НачалоДня(СтруктураПараметров.Период)-1;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", НачалоДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	СтруктураОтбора = Новый Структура;
	
	абс_Филиализация.ПеренестиРегистрНакопления("ВзаиморасчетыСПодотчетнымиЛицами", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	
	//5. Формирование движений по приему из ДЗО по регистрам бухгалтерии БУ и НУ
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	
	
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
	
КонецПроцедуры

//15,69,70,96.03,97
Процедура ОстальныеБалансовыеСчетаИмеющиеСоответствиеВНУПередачаИзДЗОВКТТК(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМЦ);  //15
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);  //69
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);  //70
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.абс_ОценочныеОбязательстваПоВыплатамРаботникам);  //96.03
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);  						//97
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	мСчетаУчетаНУ = Новый Массив;
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ЗаготовлениеИПриобретениеМЦ);   //15
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.РасчетыПоСоциальномуСтрахованию);   //69
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда);   //70
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.абс_ОценочныеОбязательстваПоВыплатамРаботникам);   //96.03
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.РасходыБудущихПериодов);   //97
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", КонецДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	//1. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = ЛОжь;
	Ошибки = Неопределено;
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
КонецПроцедуры

//15,69,70,96.03,97
Процедура ОстальныеБалансовыеСчетаИмеющиеСоответствиеВНУПередачаИзКТТКВФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМЦ);  //15
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);  //69
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);  //70
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.абс_ОценочныеОбязательстваПоВыплатамРаботникам);  //96.03
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);  						//97
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	мСчетаУчетаНУ = Новый Массив;
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.ЗаготовлениеИПриобретениеМЦ);   //15
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.РасчетыПоСоциальномуСтрахованию);   //69
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда);   //70
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.абс_ОценочныеОбязательстваПоВыплатамРаботникам);   //96.03
	мСчетаУчетаНУ.Добавить(ПланыСчетов.Налоговый.РасходыБудущихПериодов);   //97
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	//1. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = ЛОжь;
	Ошибки = Неопределено;
	//5. Формирование движений по приему из ДЗО по регистрам бухгалтерии БУ и НУ
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
КонецПроцедуры

//09,14,57,63,73,77,80,84
Процедура ОстальныеБалансовыеСчетаТолькоБУПередачаИзДЗОВКТТК(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы); 		//09
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиМЦ); //14
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);  			//57
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);  //63
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам); 			//68
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоПрочимОперациям);  //73
	//мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);  //77
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал);  				//80
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);  		//84
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	мСчетаУчетаНУ = Новый Массив;
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", КонецДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	//1. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = ЛОжь;
	Ошибки = Неопределено;
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	абс_Филиализация.СформироватьПроводкиПередачаДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
КонецПроцедуры


//09,14,57,63,73,77,80,84
Процедура ОстальныеБалансовыеСчетаТолькоБУПередачаИзКТТКВФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы); 		//09
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиМЦ); //14
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);  			//57
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);  //63
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам); 			//68
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоПрочимОперациям);  //73
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);  //77
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал);  				//80
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);  		//84
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	мСчетаУчетаНУ = Новый Массив;
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	//1. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = ЛОжь;
	Ошибки = Неопределено;
	//5. Формирование движений по приему из ДЗО по регистрам бухгалтерии БУ и НУ
	абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
КонецПроцедуры


//001, 007, ВАЛ
Процедура ЗабалансовыеСчетаПередачаИзДЗОВКТТК(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства);  					//001
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СписаннаяВУбытокЗадолженностьДебиторов); 			//007
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АвансыВИностраннойВалюте);  	                    //ВАЛ
	
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	мСчетаУчетаНУ = Новый Массив;
	СтруктураПараметров.СчетаНУ = мСчетаУчетаНУ;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(СтруктураПараметров.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", КонецДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	//1. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = ЛОжь;
	Ошибки = Неопределено;
	
	СформироватьПроводкиПоЗабалансовымСчетамПередачаИзДЗО(СтруктураПараметров, Отказ, Ошибки);
	//СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
КонецПроцедуры

//001, 007, ВАЛ
Процедура ЗабалансовыеСчетаПередачаИзКТТКВФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства);  					//001
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СписаннаяВУбытокЗадолженностьДебиторов); 			//007
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АвансыВИностраннойВалюте);  		                //ВАЛ
	
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	
	//1. Формирование движений по передаче по регистрам бухгалтерии БУ и НУ
	Отказ = Ложь;
	Ошибки = Неопределено;
	//5. Формирование движений по приему из ДЗО по регистрам бухгалтерии БУ и НУ
	//абс_Филиализация.СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
	СформироватьПроводкиПоЗабалансовымСчетамПриемКТТКФилиал(СтруктураПараметров, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
КонецПроцедуры


//Перенос остатков регистров накопления по взаиморасчетам
Процедура ПереносРегистровНакопленияВзаиморасчетов(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	мСчетаУчета = Новый Массив;
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками); //60
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками); //62
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам); //66
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам); //67
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованию); //76.01.1
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям); //76.02
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам); //76.03
	мСчетаУчета.Добавить(ПЛаныСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками); //76.05
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками); //76.06
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.08")); //76.08
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами); //76.09
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.10")); //76.10
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал); //76.21
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал); //76.22
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал); //76.25
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал); //76.26
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал); //76.29
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ); //76.32
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ); //76.35
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ); //76.36
	мСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ); //76.39
	СтруктураПараметров.СчетаБУ = мСчетаУчета;
	
	ПериодОстатков = НачалоДня(СтруктураПараметров.Период)-1;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДокументДвижений", СтруктураПараметров.ДокументДвижений);
	Запрос.УстановитьПараметр("ДатаПереноса", НачалоДня(СтруктураПараметров.ДатаПереноса));
	Запрос.УстановитьПараметр("СчетаУчетаБУ", СтруктураПараметров.СчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаНУ", СтруктураПараметров.СчетаНУ);
	
	СтруктураОтбора = Новый Структура;
	
	абс_Филиализация.ПеренестиРегистрНакопления("ВзаиморасчетыСКонтрагентами", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("РасчетыСКонтрагентами", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	абс_Филиализация.ПеренестиРегистрНакопления("РасчетыПоРеализацииВУсловныхЕдиницахОрганизации", ПериодОстатков, НачалоДня(СтруктураПараметров.ДатаПереноса), СтруктураПараметров, СтруктураОтбора, Отказ, Ошибки);
	
	//6. Добавление имени и синонима движения в таблицу имен движений для документа
	абс_Филиализация.ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////
// Процедуры формирования движений документа переноса

Процедура РегламентноеФормированиеДвижений() Экспорт
	
	УдалитьДвиженияОжидающихДокументов();
	СформироватьДвиженияОжидающихДокументов();
	Документы.абс_ПриведениеРегистровКОСВ.СформироватьДвиженияКорректировки();
	
КонецПроцедуры

Процедура СформироватьДвиженияОжидающихДокументов() Экспорт
	
	Пока Истина Цикл
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	абс_СостояниеДокументовПереноса.Документ,
		|	абс_СостояниеДокументовПереноса.Операция КАК Операция,
		|	абс_СостояниеДокументовПереноса.НаправлениеПереноса КАК НаправлениеПереноса
		|ИЗ
		|	РегистрСведений.абс_СостояниеДокументовПереноса КАК абс_СостояниеДокументовПереноса
		|ГДЕ
		|	НЕ абс_СостояниеДокументовПереноса.Проведен
		|	И НЕ абс_СостояниеДокументовПереноса.ЕстьОшибки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Операция,
		|	абс_СостояниеДокументовПереноса.НаправлениеПереноса.Порядок");
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		
		ДокументПереноса = Выборка.Документ;
		Операция = Выборка.Операция;
		НаправлениеПереноса = Выборка.НаправлениеПереноса;
		Выборка = Неопределено;
		
		//Блокировка = Новый БлокировкаДанных();
		//ЭлементБлокировки = Блокировка.Добавить();
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		//ЭлементБлокировки.УстановитьЗначение("РегистрСведений.абс_СостояниеДокументовПереноса.Документ", ДокументПереноса);
		//Блокировка.Заблокировать();
		
		Отказ = Ложь;
		Ошибки = Неопределено;
		
		Попытка
			Если Операция.СозданиеСправочников Тогда
				СформироватьСправочники(ДокументПереноса, Отказ, Ошибки);	
			Иначе
				СформироватьДвиженияПереноса(ДокументПереноса, Отказ, Ошибки);
			КонецЕсли;
		Исключение
			ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось сформировать движения по причине:"+Символы.ПС+ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
		
		СтрокаОшибок = ПолучитьСтрокуОшибок(Ошибки, Отказ);
		
		Запись = РегистрыСведений.абс_СостояниеДокументовПереноса.СоздатьМенеджерЗаписи();
		Запись.Документ = ДокументПереноса;
		Запись.Операция = Операция;
		Запись.НаправлениеПереноса = НаправлениеПереноса;
		Запись.ЕстьОшибки = Отказ;
		Запись.Проведен = НЕ Отказ;
		Запись.Ошибки = СтрокаОшибок;
		Запись.Записать();
		
		Если НЕ Отказ Тогда 
			ДокументОбъект = ДокументПереноса.ПолучитьОбъект();
			ДокументОбъект.Статус = Перечисления.абс_СтатусыПереносДанных.ВыполненПеренос;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПереноса(ДокументПереноса, Отказ, Ошибки) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументПереноса) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеДокумента(ДокументПереноса, Отказ, Ошибки);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//НачатьТранзакцию();
	
	Операция = ДокументПереноса.Операция;
	НаправлениеПереноса = ДокументПереноса.НаправлениеПереноса;
	
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("ДЗО", ДокументПереноса.ДЗО);
	//СтруктураПараметров.Вставить("Филиал", ДокументПереноса.Филиал);
	//СтруктураПараметров.Вставить("Операция", Операция);
	//СтруктураПараметров.Вставить("НаправлениеПереноса", НаправлениеПереноса);
	//СтруктураПараметров.Вставить("ДатаПереноса", НачалоДня(ДокументПереноса.Дата));
	//СтруктураПараметров.Вставить("ДокументДвижений", ДокументПереноса.ДокументДвижений);
	//СтруктураПараметров.Вставить("ДокументПереноса", ДокументПереноса);
	//СтруктураПараметров.Вставить("СчетаБУ", Операция.СписокСчетовБУ.ВыгрузитьКолонку("Счет"));
	//СтруктураПараметров.Вставить("СчетаНУ", Операция.СписокСчетовНУ.ВыгрузитьКолонку("Счет"));
	//СтруктураПараметров.Вставить("Период", ДокументПереноса.Дата);
	//СтруктураПараметров.Вставить("Настройки", абс_НастройкиСистемы.ПолучитьНастройкиДляОрганизации(ДокументПереноса.ДЗО));
	//СтруктураПараметров.Вставить("НастройкиФилиала", абс_НастройкиСистемы.ПолучитьНастройкиДляОрганизации(ДокументПереноса.Филиал));
	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДЗО", ДокументПереноса.ДЗО);
	СтруктураПараметров.Вставить("Филиал", ДокументПереноса.Филиал);
	СтруктураПараметров.Вставить("Операция", Операция);
	СтруктураПараметров.Вставить("НаправлениеПереноса", НаправлениеПереноса);
	СтруктураПараметров.Вставить("ДатаПереноса", НачалоДня(ДокументПереноса.ДокументДвижений.Дата)+24*3600);
	СтруктураПараметров.Вставить("ДокументДвижений", ДокументПереноса.ДокументДвижений);
	СтруктураПараметров.Вставить("ДокументПереноса", ДокументПереноса);
	Если Операция <> Справочники.абс_ВидыОперацийПереносаДанных.ПоСчетам Тогда 
		СтруктураПараметров.Вставить("СчетаБУ", Операция.СписокСчетовБУ.ВыгрузитьКолонку("Счет"));
		СтруктураПараметров.Вставить("СчетаНУ", Операция.СписокСчетовНУ.ВыгрузитьКолонку("Счет"));
	Иначе
		СтруктураПараметров.Вставить("СчетаБУ", ПолучитьМассивСчетов(ДокументПереноса, Тип("ПланСчетовСсылка.Хозрасчетный")));
		СтруктураПараметров.Вставить("СчетаНУ", ПолучитьМассивСчетов(ДокументПереноса, Тип("ПланСчетовСсылка.Налоговый")));		
	КонецЕсли;
	СтруктураПараметров.Вставить("Период", ДокументПереноса.ДокументДвижений.Дата+24*3600);
	СтруктураПараметров.Вставить("СчетаБУНУ", ДокументПереноса.СчетаБУНУ.ВыгрузитьКолонку("Счет"));
	СтруктураПараметров.Вставить("ДатаСостояния", НачалоДня(ДокументПереноса.ДокументДвижений.Дата));
	СтруктураПараметров.Вставить("Настройки", абс_НастройкиСистемы.ПолучитьНастройкиДляОрганизации(ДокументПереноса.Филиал));
	СтруктураПараметров.Вставить("НастройкиФилиала", абс_НастройкиСистемы.ПолучитьНастройкиДляОрганизации(ДокументПереноса.Филиал));
	СтруктураПараметров.Вставить("ДокументДвиженийОпераияБух", ДокументПереноса.ДокументДвиженийОпераияБух);
	СтруктураПараметров.Вставить("НастройкиДЗО", абс_НастройкиСистемы.ПолучитьНастройкиДляОрганизации(ДокументПереноса.ДЗО));
	
	
	ПроверитьЗаполнениеНастроек(СтруктураПараметров.Настройки, СтруктураПараметров.НастройкиДЗО, Отказ, Ошибки);
	
	Если Отказ Тогда
		//ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	
	ОчиститьДвиженияДокументаПереноса(ДокументПереноса);
	
	ПроцедураПереноса = "";
	
	Если НаправлениеПереноса=Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК Тогда
		ПроцедураПереноса = Операция.ФормированиеДвиженийПередачаДЗОКТТК;
	ИначеЕсли НаправлениеПереноса=Перечисления.абс_НаправленияПереноса.ПриемИзДЗОВКТТК Тогда
		ПроцедураПереноса = Операция.ФормированиеДвиженийПриемДЗОКТТК;
	ИначеЕсли НаправлениеПереноса=Перечисления.абс_НаправленияПереноса.ПередачаИзКТТКВФилиал Тогда
		ПроцедураПереноса = Операция.ФормированиеДвиженийПередачаКТТКФилиал;
	ИначеЕсли НаправлениеПереноса=Перечисления.абс_НаправленияПереноса.ПриемИзКТТКВФилиал Тогда
		ПроцедураПереноса = Операция.ФормированиеДвиженийПриемКТТКФилиал;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПроцедураПереноса) Тогда
		Если НаправлениеПереноса=Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК Тогда
			Если Операция.ЗабалансовыеСчета Тогда 
				СформироватьПроводкиПоЗабалансовымСчетамПередачаИзДЗО(СтруктураПараметров, Отказ, Ошибки);
			Иначе
				СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
				СформироватьПроводкиПередачаДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
			КонецЕсли;
		ИначеЕсли НаправлениеПереноса=Перечисления.абс_НаправленияПереноса.ПриемИзДЗОВКТТК Тогда
			Если Не Операция.ЗабалансовыеСчета Тогда 
				СформироватьПроводкиПриемДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
				СформироватьПроводкиПриемДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
			КонецЕсли;
		ИначеЕсли НаправлениеПереноса=Перечисления.абс_НаправленияПереноса.ПередачаИзКТТКВФилиал Тогда
			Если Не Операция.ЗабалансовыеСчета Тогда 
				СформироватьПроводкиПередачаКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
				СформироватьПроводкиПередачаКТТКФилиалНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
			КонецЕсли;
		ИначеЕсли НаправлениеПереноса=Перечисления.абс_НаправленияПереноса.ПриемИзКТТКВФилиал Тогда
			Если Операция.ЗабалансовыеСчета Тогда 
				СформироватьПроводкиПоЗабалансовымСчетамПриемКТТКФилиал(СтруктураПараметров, Отказ, Ошибки);
			Иначе
				СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки);
				СформироватьПроводкиПриемКТТКФилиалНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки);
			КонецЕсли;
		КонецЕсли;
	Иначе            
		
		Если ТипЗнч(ПроцедураПереноса)=Тип("Строка") Тогда
			
			Попытка
				Выполнить(ПроцедураПереноса+"(СтруктураПараметров, Отказ, Ошибки);");
			Исключение
				Отказ = Истина;
			КонецПопытки;
			
		Иначе
			
			СтруктураПараметровМодуля = Новый Структура;
			Для Каждого СтрокаПараметра Из ПроцедураПереноса.Параметры Цикл
				СтруктураПараметровМодуля.Вставить(СтрокаПараметра.ИмяПараметра, СтрокаПараметра.ЗначениеПараметра);
			КонецЦикла;
			Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
				СтруктураПараметровМодуля.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			КонецЦикла;
			СтруктураПараметровМодуля.Вставить("Ошибки", Ошибки);
			СтруктураПараметровМодуля.Вставить("Отказ", Отказ);
			
			СтруктураЗапросовМодуля = Новый Структура;
			Для Каждого СтрокаЗапроса Из ПроцедураПереноса.Запросы Цикл
				СтруктураЗапросовМодуля.Вставить(СтрокаЗапроса.ИмяЗапроса, СтрокаЗапроса.ТекстЗапроса);
			КонецЦикла;
			
			Попытка
				абс_СерверныеФункции.ВыполнитьКодНаСервере(ПроцедураПереноса.ТекстМодуля, СтруктураПараметровМодуля, СтруктураЗапросовМодуля);
				Отказ = СтруктураПараметровМодуля.Отказ;
			Исключение
				Отказ = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьТаблицыРегистровДокументаДвижений(СтруктураПараметров.ДокументДвижений);
	
	//Если Отказ Тогда
	//	ОтменитьТранзакцию();
	//Иначе
	//	ЗафиксироватьТранзакцию();
	//КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Кэш") Тогда
		СтруктураПараметров.Удалить("Кэш");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокумента(ДокументПереноса, Отказ, Ошибки) Экспорт
	
	ДЗО = ДокументПереноса.ДЗО;
	Операция = ДокументПереноса.Операция;
	НаправлениеПереноса = ДокументПереноса.НаправлениеПереноса;
	СчетаБУНУ = ДокументПереноса.СчетаБУНУ.ВыгрузитьКолонку("Счет");
	
	
	
	Если Не ЗначениеЗаполнено(ДЗО) Тогда
		ДобавитьОшибкуПользователю(Ошибки, "ДЗО", "Не заполнено ДЗО");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументПереноса.Филиал) Тогда
		ДобавитьОшибкуПользователю(Ошибки, "Филиал", "Нет сопоставления ДЗО и филиала");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Операция) Тогда
		ДобавитьОшибкуПользователю(Ошибки, "Операция", "Не заполнена операция");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаправлениеПереноса) Тогда
		ДобавитьОшибкуПользователю(Ошибки, "НаправлениеПереноса", "Не заполнено направление переноса");
		Отказ = Истина;
	Иначе
		Если НЕ Операция.ЗабалансовыеСчета Тогда  
			ПредыдущееНаправление = Перечисления.абс_НаправленияПереноса.ПолучитьПредыдущееНаправление(НаправлениеПереноса);
			Если ЗначениеЗаполнено(ПредыдущееНаправление) Тогда
				ПредыдущийПеренос = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(ДЗО, Операция, ПредыдущееНаправление, СчетаБУНУ);
				Если Не ЗначениеЗаполнено(ПредыдущийПеренос) Тогда
					Если Операция <> Справочники.абс_ВидыОперацийПереносаДанных.ПоСчетам Тогда 
						ДобавитьОшибкуПользователю(Ошибки, "", "Отсутствует операция "+Операция+", "+ПредыдущееНаправление);
					Иначе
						ДобавитьОшибкуПользователю(Ошибки, "", "Отсутствует перенос по счетам: " + ДокументПереноса.ПредставлениеСпискаСчетов +", "+ПредыдущееНаправление);	
					КонецЕсли;
					Отказ = Истина;
				Иначе
					СостояниеДокумента = РегистрыСведений.абс_СостояниеДокументовПереноса.Получить(Новый Структура("Документ", ПредыдущийПеренос));
					Если Не СостояниеДокумента.Проведен Тогда
						Если Операция <> Справочники.абс_ВидыОперацийПереносаДанных.ПоСчетам Тогда 
							ДобавитьОшибкуПользователю(Ошибки, "", "Не сформированы движения для операции "+Операция+", "+ПредыдущееНаправление);
							
						Иначе
							ДобавитьОшибкуПользователю(Ошибки, "", "Не сформированы движения по счетам: "+ДокументПереноса.ПредставлениеСпискаСчетов+", "+ПредыдущееНаправление);
						КонецЕсли;
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			//проверка направления для забалансовых счетов	
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ И НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПриемИзКТТКВФилиал  Тогда 
		ПроверитьПереносСправочников(Операция, ДЗО, ДокументПереноса.Филиал, Отказ, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНастроек(Настройки, НастройкиДЗО ,Отказ, Ошибки)
	
	ГруппаОС = Настройки.ГруппаОС;
	ГруппаНМА = Настройки.ГруппаНМА;
	ГруппаРБП = Настройки.ГруппаРБП;
	Контрагент = НастройкиДЗО.Контрагент;
	
	
	Если ГруппаОС.Пустая() Тогда
		ДобавитьОшибкуПользователю(Ошибки, "", "Не заполнена настройка ""ГруппаОС""");
		Отказ = Истина;
	КонецЕсли;
	
	Если Контрагент.Пустая() Тогда
		ДобавитьОшибкуПользователю(Ошибки, "", "Не заполнена настройка ""Контрагент""");
		Отказ = Истина;
	КонецЕсли;
	
	
	Если ГруппаНМА.Пустая() Тогда
		ДобавитьОшибкуПользователю(Ошибки, "", "Не заполнена настройка ""ГруппаНМА""");
		Отказ = Истина;
	КонецЕсли;
	
	Если ГруппаРБП.Пустая() Тогда
		ДобавитьОшибкуПользователю(Ошибки, "", "Не заполнена настройка ""ГруппаРБП""");
		Отказ = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПроверитьПереносСправочников(Операция, ДЗО, Филиал, Отказ, Ошибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	абс_ПереносДанных.Операция
	|ПОМЕСТИТЬ ВТОперация
	|ИЗ
	|	Документ.абс_ПереносДанных КАК абс_ПереносДанных
	|ГДЕ
	|	абс_ПереносДанных.ДЗО = &ДЗО
	|	И абс_ПереносДанных.Филиал = &Филиал
	|	И абс_ПереносДанных.Статус = &ВыполненПеренос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_ВидыОперацийПереносаДанныхВидыСправочников.ВидСправочника.ВидСубконто КАК ВидСубконто
	|ИЗ
	|	ВТОперация КАК ВТОперация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.абс_ВидыОперацийПереносаДанных.ВидыСправочников КАК абс_ВидыОперацийПереносаДанныхВидыСправочников
	|		ПО ВТОперация.Операция = абс_ВидыОперацийПереносаДанныхВидыСправочников.Ссылка";
	
	Запрос.УстановитьПараметр("ВыполненПеренос", Перечисления.абс_СтатусыПереносДанных.ВыполненПеренос);
	Запрос.УстановитьПараметр("ДЗО", ДЗО);
	Запрос.УстановитьПараметр("Филиал", Филиал);
	
	МассивПеренесенныхСправочников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидСубконто");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	абс_ВидыОперацийПереносаДанныхСписокСчетовБУ.Счет
	|ИЗ
	|	Справочник.абс_ВидыОперацийПереносаДанных.СписокСчетовБУ КАК абс_ВидыОперацийПереносаДанныхСписокСчетовБУ
	|ГДЕ
	|	абс_ВидыОперацийПереносаДанныхСписокСчетовБУ.Ссылка = &Операция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	абс_ВидыОперацийПереносаДанныхСписокСчетовНУ.Счет
	|ИЗ
	|	Справочник.абс_ВидыОперацийПереносаДанных.СписокСчетовНУ КАК абс_ВидыОперацийПереносаДанныхСписокСчетовНУ
	|ГДЕ
	|	абс_ВидыОперацийПереносаДанныхСписокСчетовНУ.Ссылка = &Операция";
	
	Запрос.УстановитьПараметр("Операция", Операция);
	Выборка = Запрос.Выполнить().Выбрать();
	МассивСообщений = Новый Массив;
	КэшВидовСубконто = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Для Каждого СтрокаСубконто Из Выборка.Счет.ВидыСубконто Цикл 
			ВидСубконто = СтрокаСубконто.ВидСубконто;
			Если Не КэшВидовСубконто.Найти(ВидСубконто) = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда 
				СкладыПеренесены = Не МассивПеренесенныхСправочников.Найти(ВидСубконто) = Неопределено;
				Если Не СкладыПеренесены Тогда  
					ТекстСообщения = "Для """+Филиал+""" необходимо перенести справочник Склады";
					МассивСообщений.Добавить(ТекстСообщения);
					Отказ = Истина;
				КонецЕсли;
			ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда 
				ДоговораПеренесены = Не МассивПеренесенныхСправочников.Найти(ВидСубконто) = Неопределено;
				Если Не ДоговораПеренесены Тогда  
					ТекстСообщения = "Для """+Филиал+""" необходимо перенести справочник Договора контрагентов";
					МассивСообщений.Добавить(ТекстСообщения);
					Отказ = Истина;
				КонецЕсли;	
			ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда 
				НоменклатурныеГруппыПеренесены = Не МассивПеренесенныхСправочников.Найти(ВидСубконто) = Неопределено;
				Если Не НоменклатурныеГруппыПеренесены Тогда  
					ТекстСообщения = "Для """+Филиал+""" необходимо перенести справочник Номенклатурные группы";
					МассивСообщений.Добавить(ТекстСообщения);
					Отказ = Истина;
				КонецЕсли;	
			ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда 
				ОбъектыСтроительстваПеренесены = Не МассивПеренесенныхСправочников.Найти(ВидСубконто) = Неопределено; 		
				Если Не ОбъектыСтроительстваПеренесены Тогда  
					ТекстСообщения = "Для """+Филиал+""" необходимо перенести справочник Объекты строительства";
					МассивСообщений.Добавить(ТекстСообщения);
					Отказ = Истина;
				КонецЕсли;	
			КонецЕсли;		
			КэшВидовСубконто.Добавить(ВидСубконто);
		КонецЦикла;	
	КонецЦикла;
	
	Если Отказ Тогда 
		Для каждого Сообщение Из МассивСообщений Цикл
			ДобавитьОшибкуПользователю(Ошибки, "", Сообщение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДвиженияОжидающихДокументов() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	абс_ПереносДанных.Ссылка
	|ИЗ
	|	Документ.абс_ПереносДанных КАК абс_ПереносДанных
	|ГДЕ
	|	абс_ПереносДанных.Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыПереносДанных.ОжидаетУдалениеДвижений)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Статус = Перечисления.абс_СтатусыПереносДанных.Отказ;
		ДокументОбъект.Записать();		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьДвиженияДокументаПереноса(ДокументПереноса) Экспорт
		
	Если ЗначениеЗаполнено(ДокументПереноса.ДокументДвижений) Тогда
		абс_ПроведениеДокументов.УдалитьДвиженияРегистратора(ДокументПереноса.ДокументДвижений);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументПереноса.ДокументДвиженийОпераияБух) Тогда
		абс_ПроведениеДокументов.УдалитьДвиженияРегистратора(ДокументПереноса.ДокументДвиженийОпераияБух);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыРегистровДокументаДвижений(ДокументДвижений) Экспорт
	
	ДокументОбъект = ДокументДвижений.ПолучитьОбъект();
	ДокументОбъект.ТаблицаРегистровБухгалтерии.Очистить();
	ДокументОбъект.ТаблицаРегистровНакопления.Очистить();
	ДокументОбъект.ТаблицаРегистровСведений.Очистить();
	
	МассивИменРегистров = абс_ПроведениеДокументов.ПолучитьМассивИспользуемыхРегистров(ДокументДвижений, ДокументДвижений.Метаданные().Движения);
	
	Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
		Если Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра)<>Неопределено Тогда
			МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			СтрокаТаблицы = ДокументОбъект.ТаблицаРегистровБухгалтерии.Добавить();
		ИначеЕсли Метаданные.РегистрыНакопления.Найти(ИмяРегистра)<>Неопределено Тогда
			МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
			СтрокаТаблицы = ДокументОбъект.ТаблицаРегистровНакопления.Добавить();
		ИначеЕсли Метаданные.РегистрыСведений.Найти(ИмяРегистра)<>Неопределено Тогда
			МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
			СтрокаТаблицы = ДокументОбъект.ТаблицаРегистровСведений.Добавить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.Имя = МетаданныеРегистра.Имя;
		СтрокаТаблицы.Представление = МетаданныеРегистра.Синоним;
	КонецЦикла;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Процедура СформироватьСправочники(ДокументПереноса, Отказ, Ошибки) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументПереноса) Тогда
		Возврат;
	КонецЕсли;
	
	ДЗО = ДокументПереноса.ДЗО;
	Операция = ДокументПереноса.Операция;
	Филиал = ДокументПереноса.Филиал;
	
	Если Не ЗначениеЗаполнено(ДЗО) Тогда
		ДобавитьОшибкуПользователю(Ошибки, "ДЗО", "Не заполнено ДЗО");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Филиал) Тогда
		ДобавитьОшибкуПользователю(Ошибки, "Филиал", "Нет сопоставления ДЗО и филиала");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Операция) Тогда
		ДобавитьОшибкуПользователю(Ошибки, "Операция", "Не заполнена операция");
		Отказ = Истина;
	Иначе
		Если Операция.ВидыСправочников.Количество()<=0 Тогда
			ДобавитьОшибкуПользователю(Ошибки, "Операция", "Не заполнены виды справочников в операции");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Для каждого СтрокаВидСправочника из Операция.ВидыСправочников Цикл 
		
		НачатьТранзакцию();
		
		Если СтрокаВидСправочника.ВидСправочника = Справочники.абс_ВидыСправочниковПереносаДанных.НоменклатурныеГруппы Тогда 
			абс_Филиализация.ПереносСправочникаНоменклатурныеГруппы(ДЗО,Филиал,Отказ,Ошибки);
		КонецЕсли;
		
		Если СтрокаВидСправочника.ВидСправочника = Справочники.абс_ВидыСправочниковПереносаДанных.Склады Тогда 
			абс_Филиализация.ПереносСправочникаСклады(ДЗО,Филиал,Отказ,Ошибки);
		КонецЕсли;
		
		Если СтрокаВидСправочника.ВидСправочника = Справочники.абс_ВидыСправочниковПереносаДанных.ОбъектыСтроительства Тогда 
			абс_Филиализация.ПереносСправочникаОбъектыСтроительства(ДЗО,Филиал,Отказ,Ошибки);
		КонецЕсли;
		
		Если СтрокаВидСправочника.ВидСправочника = Справочники.абс_ВидыСправочниковПереносаДанных.ДоговорыКонтрагентов Тогда 
			абс_Филиализация.ПереносСправочникаДоговорыКонтрагентов(ДЗО,Филиал,Отказ,Ошибки);
		КонецЕсли;
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////
// Процедуры для сбора и отображения ошибок переноса

Функция ПолучитьСтрокуОшибок(Ошибки, Отказ = Ложь) Экспорт
	
	Если Ошибки = Неопределено Тогда
		Возврат "";
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	СтрокаОшибок = "";
	ПерваяОшибка = Истина;
	
	//СвернутьМассив(Ошибки.СписокОшибок);
	
	Для каждого Ошибка Из Ошибки.СписокОшибок Цикл
		
		Если ПерваяОшибка Тогда
			ПерваяОшибка = Ложь;
		Иначе
			СтрокаОшибок = СтрокаОшибок+Символы.ПС;
		КонецЕсли;
		
		Если Ошибка.ИндексСтроки = Неопределено Тогда
			ИндексСтроки = Ошибка.НомерСтроки;
		Иначе
			ИндексСтроки = Ошибка.ИндексСтроки;
		КонецЕсли;
		
		Если Ошибки.ГруппыОшибок[Ошибка.ГруппаОшибок] <> Истина Тогда
			
			СтрокаОшибок = СтрокаОшибок+
			Ошибка.ТекстДляОднойОшибки + " ("+
			СтрЗаменить(Ошибка.ПолеОшибки, "%1", Формат(ИндексСтроки, "ЧН=0; ЧГ="))+")";
		Иначе
			СтрокаОшибок = СтрокаОшибок+
			СтрЗаменить(Ошибка.ТекстДляНесколькихОшибок, "%1", Формат(Ошибка.НомерСтроки + 1, "ЧН=0; ЧГ=")) + " ("+
			СтрЗаменить(Ошибка.ПолеОшибки, "%1", Формат(ИндексСтроки, "ЧН=0; ЧГ="))+")";
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаОшибок;
	
КонецФункции

// Добавляет в список ошибок новую ошибку пользователя для дальнейшей отправки
// с помощью процедуры СообщитьОшибкиПользователю().
//  Используется в процедурах ОбработкаПроверкиЗаполнения.
//
// Параметры:
//  Ошибки          - Неопределено - будет создан новый список,
//                  - значение, установленное при первом вызове этой процедуры со значением Неопределено.
//
//  ПолеОшибки      - Строка - значение, которое задается в свойстве Поле объекта СообщениеПользователю.
//                    Для автоподстаноски номера строки должна содержать "%1".
//                    Например, "Объект.ИНН" или "Объект.Пользователи[%1].Пользователь".
//
//  ТекстДляОднойОшибки - Строка - текст ошибки для случая, когда ГруппаОшибок в коллекции только одна,
//                    например, НСтр("ru = 'Пользователь не выбран.'").
//
//  ГруппаОшибок    - Произвольный - используется для выбора либо текста для одной ошибки,
//                    либо текста для нескольких ошибок, например, имя "Объект.Пользователи".
//                    Если значение не заполнено, тогда используется текст для одной ошибки.
//
//  НомерСтроки     - Число - значение от 0 ... , определяющее номер строки, который нужно подставить
//                    в строку ПолеОшибки и в ТекстДляНесколькихОшибок (подставляется НомерСтроки + 1).
//
//  ТекстДляНесколькихОшибок - Строка - текст ошибки для случая, когда добавлено несколько ошибок с одинаковым
//                    свойством ГруппаОшибок, например, НСтр("ru = 'Пользователь в строке %1 не выбран.'").
//
//  ИндексСтроки    - Неопределено - совпадает со значением параметра НомерСтроки.
//                    Число - значение от 0 ... , определяющее номер строки, который нужно подставить
//                    в строку ПолеОшибки.
//
Процедура ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстДляОднойОшибки, ГруппаОшибок = "", НомерСтроки = 0, ТекстДляНесколькихОшибок = "", ИндексСтроки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Структура;
		Ошибки.Вставить("СписокОшибок", Новый Массив);
		Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппаОшибок) Тогда
		// При незаполненной группе ошибок используется текст для одной ошибки.
	Иначе
		Если Ошибки.ГруппыОшибок[ГруппаОшибок] = Неопределено Тогда
			// Группа ошибок использовалась один раз, используется текст для одной ошибки.
			Ошибки.ГруппыОшибок.Вставить(ГруппаОшибок, Ложь);
		Иначе
			// Группа ошибок использовалась несколько раз, используется текст для нескольких ошибок.
			Ошибки.ГруппыОшибок.Вставить(ГруппаОшибок, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("ПолеОшибки",               ПолеОшибки);
	Ошибка.Вставить("ТекстДляОднойОшибки",      ТекстДляОднойОшибки);
	Ошибка.Вставить("ГруппаОшибок",             ГруппаОшибок);
	Ошибка.Вставить("НомерСтроки",              НомерСтроки);
	Ошибка.Вставить("ТекстДляНесколькихОшибок", ТекстДляНесколькихОшибок);
	Ошибка.Вставить("ИндексСтроки",             ИндексСтроки);
	
	Ошибки.СписокОшибок.Добавить(Ошибка);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////
// Процедуры стандартного переноса остатков по счетам БУ и НУ

Процедура СформироватьПроводкиПередачаДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПолучитьРегистраторХозрасчетный(СтруктураПараметров));   
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапросаРегистрБухгалтерии("Хозрасчетный");
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПереноса);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("СписокСчетов", СтруктураПараметров.СчетаБУ);
	
	СтатьяДДСДляЗаполнения = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ТД243");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Проводка = НаборЗаписей.Добавить();
		Проводка.Период = СтруктураПараметров.Период-24*3600;
		Проводка.Организация = СтруктураПараметров.ДЗО;
		
		Счет = Выборка.Счет;
		
		Если Счет.Вид=ВидСчета.Активный Или Счет.Вид=ВидСчета.АктивноПассивный И Выборка.СуммаОстатокДт<>0 Тогда
			Проводка.СчетКт = Счет;
			Если Счет.Валютный Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.абс_ИмуществоИОбязательстваВВалюте;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.абс_ИмуществоИОбязательстваВРублях;
			КонецЕсли;
			
			Субконто = Проводка.СубконтоКт;
			КоррСубконто = Проводка.СубконтоДт;
			
			Проводка.Сумма = Выборка.СуммаОстатокДт;
			Если Счет.Количественный Тогда
				Проводка.КоличествоКт = Выборка.КоличествоОстатокДт;
			КонецЕсли;
			Если Счет.Валютный Тогда
				Проводка.ВалютаДт = Выборка.Валюта;
				Проводка.ВалютаКт = Выборка.Валюта;
				Проводка.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаОстатокДт;
				Проводка.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаОстатокДт;
			КонецЕсли;
			
		Иначе
			
			Проводка.СчетДт = Счет;
			Если Счет.Валютный Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.абс_ИмуществоИОбязательстваВВалюте;
			Иначе
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.абс_ИмуществоИОбязательстваВРублях;
			КонецЕсли;
			
			Субконто = Проводка.СубконтоДт;
			КоррСубконто = Проводка.СубконтоКт;
			
			Проводка.Сумма = Выборка.СуммаОстатокКт;
			Если Счет.Количественный Тогда
				Проводка.КоличествоДт = Выборка.КоличествоОстатокКт;
			КонецЕсли;
			Если Счет.Валютный Тогда
				Проводка.ВалютаДт = Выборка.Валюта;
				Проводка.ВалютаКт = Выборка.Валюта;
				Проводка.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаОстатокКт;
				Проводка.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаОстатокКт;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Сч = 1 По 3 Цикл
			ВидСубконто = Выборка["ВидСубконто"+Сч];
			Если ЗначениеЗаполнено(ВидСубконто) Тогда
				Субконто[ВидСубконто] = Выборка["Субконто"+Сч];
			КонецЕсли;
			Если ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств Тогда
				Субконто[ВидСубконто] =  СтатьяДДСДляЗаполнения;
			КонецЕсли;	
			Если ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства И 
				(Субконто[ВидСубконто] = Неопределено Или Субконто[ВидСубконто] = Перечисления.СпособыСтроительства.ПустаяСсылка()) Тогда
				Субконто[ВидСубконто] = Перечисления.СпособыСтроительства.Хозспособ;
			КонецЕсли;
			
		КонецЦикла;
		
		
		КоррСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты] = СтруктураПараметров.НастройкиДЗО.Контрагент;
		КоррСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.абс_СчетБУ] = Счет;
		
		Проводка.Содержание = "Исключение из ЕГРЮЛ";
		
	КонецЦикла;
	
	Попытка
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	Исключение
		ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось записать движения по регистру Хозрасчетный по причине:"+Символы.ПС+ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьПроводкиПриемДЗОКТТКБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки) Экспорт
	СтатьяПоУмолчанию = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ТД243");	
	ПредыдущийПеренос = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(СтруктураПараметров.ДЗО, СтруктураПараметров.Операция, Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК, СтруктураПараметров.СчетаБУНУ);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВложенныйЗапрос.Период,
	                      |	ВложенныйЗапрос.Организация,
	                      |	ВложенныйЗапрос.СчетДт,
	                      |	ВложенныйЗапрос.СубконтоДт1,
	                      |	ВложенныйЗапрос.ВидСубконтоДт1,
	                      |	ВложенныйЗапрос.СубконтоДт2,
	                      |	ВложенныйЗапрос.ВидСубконтоДт2,
	                      |	ВложенныйЗапрос.СубконтоДт3,
	                      |	ВложенныйЗапрос.ВидСубконтоДт3,
	                      |	ВложенныйЗапрос.СчетКт,
	                      |	ВложенныйЗапрос.СубконтоКт1,
	                      |	ВложенныйЗапрос.ВидСубконтоКт1,
	                      |	ВложенныйЗапрос.СубконтоКт2,
	                      |	ВложенныйЗапрос.ВидСубконтоКт2,
	                      |	ВложенныйЗапрос.СубконтоКт3,
	                      |	ВложенныйЗапрос.ВидСубконтоКт3,
	                      |	ВложенныйЗапрос.ВалютаКт,
	                      |	ВложенныйЗапрос.ВалютаДт,
	                      |	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	                      |	СУММА(ВложенныйЗапрос.ВалютнаяСуммаКт) КАК ВалютнаяСуммаКт,
	                      |	СУММА(ВложенныйЗапрос.ВалютнаяСуммаДт) КАК ВалютнаяСуммаДт,
	                      |	ВложенныйЗапрос.Содержание
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		&Период КАК Период,
	                      |		&КТТК КАК Организация,
	                      |		ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетДт,
	                      |		ВЫБОР
	                      |			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО)
	                      |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |		КОНЕЦ КАК СубконтоДт1,
	                      |		ВЫБОР
	                      |			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		КОНЕЦ КАК ВидСубконтоДт1,
	                      |		ВЫБОР
	                      |			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО)
	                      |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |		КОНЕЦ КАК СубконтоДт2,
	                      |		ВЫБОР
	                      |			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		КОНЕЦ КАК ВидСубконтоДт2,
	                      |		ВЫБОР
	                      |			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО)
	                      |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |		КОНЕЦ КАК СубконтоДт3,
	                      |		ВЫБОР
	                      |			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		КОНЕЦ КАК ВидСубконтоДт3,
	                      |		ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетКт,
	                      |		ВЫБОР
	                      |			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО)
	                      |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |		КОНЕЦ КАК СубконтоКт1,
	                      |		ВЫБОР
	                      |			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		КОНЕЦ КАК ВидСубконтоКт1,
	                      |		ВЫБОР
	                      |			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО)
	                      |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |		КОНЕЦ КАК СубконтоКт2,
	                      |		ВЫБОР
	                      |			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		КОНЕЦ КАК ВидСубконтоКт2,
	                      |		ВЫБОР
	                      |			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО)
	                      |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |		КОНЕЦ КАК СубконтоКт3,
	                      |		ВЫБОР
	                      |			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		КОНЕЦ КАК ВидСубконтоКт3,
	                      |		ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютаДт, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаКт,
	                      |		ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютаКт, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаДт,
	                      |		ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	                      |		ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт, 0) КАК ВалютнаяСуммаКт,
	                      |		ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт, 0) КАК ВалютнаяСуммаДт,
	                      |		ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.КоличествоДт, 0) КАК КоличествоКт,
	                      |		ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.КоличествоКт, 0) КАК КоличествоДт,
	                      |		""Присоединено ДЗО"" КАК Содержание
	                      |	ИЗ
	                      |		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ХозрасчетныйДвиженияССубконто) КАК ВложенныйЗапрос
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВложенныйЗапрос.Период,
	                      |	ВложенныйЗапрос.Организация,
	                      |	ВложенныйЗапрос.СчетДт,
	                      |	ВложенныйЗапрос.СубконтоДт1,
	                      |	ВложенныйЗапрос.ВидСубконтоДт1,
	                      |	ВложенныйЗапрос.СубконтоДт2,
	                      |	ВложенныйЗапрос.ВидСубконтоДт2,
	                      |	ВложенныйЗапрос.СубконтоДт3,
	                      |	ВложенныйЗапрос.ВидСубконтоДт3,
	                      |	ВложенныйЗапрос.СчетКт,
	                      |	ВложенныйЗапрос.СубконтоКт1,
	                      |	ВложенныйЗапрос.ВидСубконтоКт1,
	                      |	ВложенныйЗапрос.СубконтоКт2,
	                      |	ВложенныйЗапрос.ВидСубконтоКт2,
	                      |	ВложенныйЗапрос.СубконтоКт3,
	                      |	ВложенныйЗапрос.ВидСубконтоКт3,
	                      |	ВложенныйЗапрос.ВалютаКт,
	                      |	ВложенныйЗапрос.ВалютаДт,
	                      |	ВложенныйЗапрос.Содержание");
	Запрос.УстановитьПараметр("Регистратор", ПредыдущийПеренос.ДокументДвиженийОпераияБух);
	Запрос.УстановитьПараметр("КТТК", Справочники.Организации.НайтиПоКоду("000000001"));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Период-24*3600);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Свернуть_01_02_04_05_БУ(ТЗ);
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПолучитьРегистраторХозрасчетный(СтруктураПараметров));
	НаборЗаписей.Загрузить(ТЗ);
	
	//Заполняем субконто способ строительства для 08.03 счета. Иначе не запишется.
	Для каждого Запись Из НаборЗаписей Цикл
		Если Запись.СчетДт = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств Тогда 
			//Запись.СубконтоДт.СпособыСтроительства = Перечисления.СпособыСтроительства.Хозспособ;
			Запись.СубконтоДт.СпособыСтроительства = Перечисления.СпособыСтроительства.ПустаяСсылка();
		КонецЕсли;	
		СубконтоДДСНайдено = Не Запись.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств) = Неопределено;
		Если СубконтоДДСНайдено Тогда
			Запись.СубконтоДт.СтатьиДвиженияДенежныхСредств = СтатьяПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	Исключение
		ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось записать движения по регистру Хозрасчетный по причине:"+Символы.ПС+ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьПроводкиПередачаКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки) Экспорт
	СтатьяПоУмолчанию = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ТД244");
	ПредыдущийПеренос = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(СтруктураПараметров.ДЗО, СтруктураПараметров.Операция, Перечисления.абс_НаправленияПереноса.ПриемИзДЗОВКТТК, СтруктураПараметров.СчетаБУНУ);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	&Период,
	                      |	&КТТК КАК Организация,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоВыделенномуИмуществу)
	                      |		ИНАЧЕ ХозрасчетныйДвиженияССубконто.СчетКт
	                      |	КОНЕЦ КАК СчетДт,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА &Филиал
	                      |		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК СубконтоДт1,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения)
	                      |		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |	КОНЕЦ КАК ВидСубконтоДт1,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА НЕОПРЕДЕЛЕНО
	                      |		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК СубконтоДт2,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |	КОНЕЦ КАК ВидСубконтоДт2,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА НЕОПРЕДЕЛЕНО
	                      |		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК СубконтоДт3,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |	КОНЕЦ КАК ВидСубконтоДт3,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоВыделенномуИмуществу)
	                      |		ИНАЧЕ ХозрасчетныйДвиженияССубконто.СчетДт
	                      |	КОНЕЦ КАК СчетКт,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА &Филиал
	                      |		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК СубконтоКт1,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения)
	                      |		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |	КОНЕЦ КАК ВидСубконтоКт1,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА НЕОПРЕДЕЛЕНО
	                      |		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК СубконтоКт2,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |	КОНЕЦ КАК ВидСубконтоКт2,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА НЕОПРЕДЕЛЕНО
	                      |		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК СубконтоКт3,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |	КОНЕЦ КАК ВидСубконтоКт3,
	                      |	ХозрасчетныйДвиженияССубконто.Сумма,
	                      |	""Передача в филиал"" КАК Содержание,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА 0
	                      |		ИНАЧЕ ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт
	                      |	КОНЕЦ КАК ВалютнаяСуммаДт,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА 0
	                      |		ИНАЧЕ ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт
	                      |	КОНЕЦ КАК ВалютнаяСуммаКт,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА НЕОПРЕДЕЛЕНО
	                      |		ИНАЧЕ ХозрасчетныйДвиженияССубконто.ВалютаДт
	                      |	КОНЕЦ КАК ВалютаДт,
	                      |	ВЫБОР
	                      |		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	                      |			ТОГДА НЕОПРЕДЕЛЕНО
	                      |		ИНАЧЕ ХозрасчетныйДвиженияССубконто.ВалютаКт
	                      |	КОНЕЦ КАК ВалютаКт
	                      |ИЗ
	                      |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ХозрасчетныйДвиженияССубконто");
	
	Запрос.УстановитьПараметр("Регистратор", ПредыдущийПеренос.ДокументДвиженийОпераияБух);
	Запрос.УстановитьПараметр("Филиал", СтруктураПараметров.Филиал);
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Период-24*3600);
	Запрос.УстановитьПараметр("КТТК", Справочники.Организации.НайтиПоКоду("000000001"));
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПолучитьРегистраторХозрасчетный(СтруктураПараметров));
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	
	//Заполняем субконто статьи ДДС. Иначе не запишется.
	Для каждого Запись Из НаборЗаписей Цикл
		СубконтоНайдено = Не Запись.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств) = Неопределено;
		Если СубконтоНайдено Тогда
			Запись.СубконтоКт.СтатьиДвиженияДенежныхСредств = СтатьяПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	Исключение
		ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось записать движения по регистру Хозрасчетный по причине:"+Символы.ПС+ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьПроводкиПриемКТТКФилиалБухгалтерскийУчет(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	ПередачаВКТТК = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(СтруктураПараметров.ДЗО, СтруктураПараметров.Операция, Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК, СтруктураПараметров.СчетаБУНУ);
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПередачаВКТТК.ДокументДвиженийОпераияБух);
	НаборЗаписей.Прочитать();
	
	ТаблицаРегистра = НаборЗаписей.Выгрузить();
		
	КолонкиТаблицы = ТаблицаРегистра.Колонки;
	
	Для Сч = 1 По 3 Цикл
		КолонкиТаблицы["ВидСубконтоДт"+Сч].Имя = "ВидСубконтоДт_"+Сч;
		КолонкиТаблицы["СубконтоДт"+Сч].Имя = "СубконтоДт_"+Сч;
		КолонкиТаблицы["ВидСубконтоКт"+Сч].Имя = "ВидСубконтоДт"+Сч;
		КолонкиТаблицы["СубконтоКт"+Сч].Имя = "СубконтоДт"+Сч;
		КолонкиТаблицы["ВидСубконтоДт_"+Сч].Имя = "ВидСубконтоКт"+Сч;
		КолонкиТаблицы["СубконтоДт_"+Сч].Имя = "СубконтоКт"+Сч;
	КонецЦикла;
	
	КолонкиТаблицы.СчетДт.Имя = "СчетДт_";
	КолонкиТаблицы.СчетКт.Имя = "СчетДт";
	КолонкиТаблицы.СчетДт_.Имя = "СчетКт";
	КолонкиТаблицы.ВалютаДт.Имя = "ВалютаДт_";
	КолонкиТаблицы.ВалютаКт.Имя = "ВалютаДт";
	КолонкиТаблицы.ВалютаДт_.Имя = "ВалютаКт";
	КолонкиТаблицы.ВалютнаяСуммаДт.Имя = "ВалютнаяСуммаДт_";
	КолонкиТаблицы.ВалютнаяСуммаКт.Имя = "ВалютнаяСуммаДт";
	КолонкиТаблицы.ВалютнаяСуммаДт_.Имя = "ВалютнаяСуммаКт";
	КолонкиТаблицы.КоличествоДт.Имя = "КоличествоДт_";
	КолонкиТаблицы.КоличествоКт.Имя = "КоличествоДт";
	КолонкиТаблицы.КоличествоДт_.Имя = "КоличествоКт";
	
	КолонкиТаблицы.Удалить(КолонкиТаблицы.Регистратор);
	
	ТаблицаРегистра.ЗаполнитьЗначения(СтруктураПараметров.Период-24*3600, "Период");
	
	ЗаменитьОбъектыДЗОНаОбъектыФилиалаПоТаблице(ТаблицаРегистра, СтруктураПараметров, Отказ, Ошибки);
	ПерезаполнитьСчетаБУ(ТаблицаРегистра); 
	
	Свернуть_01_02_04_05_БУ_ПриемВФилиал(ТаблицаРегистра);
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПолучитьРегистраторХозрасчетный(СтруктураПараметров));
	НаборЗаписей.Загрузить(ТаблицаРегистра);
	
	ПриемКТТКФилиалБухгалтерскийУчет_ОбрабоатьНабор_71(НаборЗаписей, СтруктураПараметров);
	ПерезаполнитьДокументВСубконто(НаборЗаписей, СтруктураПараметров, Отказ, Ошибки);
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Отказ = Истина;
		ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось записать движения по регистру Хозрасчетный по причине:"+Символы.ПС+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьПроводкиПриемДЗОКТТКБухгалтерскийУчетNEW(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	ПредыдущийПеренос = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(СтруктураПараметров.ДЗО, СтруктураПараметров.Операция, Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК, СтруктураПараметров.СчетаБУНУ);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ОрганизацияПриемник КАК Организация,
	|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетДт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт1,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт2,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетКт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт1,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт2,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт3,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютаДт, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаКт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютаКт, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт, 0) КАК ВалютнаяСуммаКт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт, 0) КАК ВалютнаяСуммаДт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.КоличествоДт, 0) КАК КоличествоКт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.КоличествоКт, 0) КАК КоличествоДт,
	|	""Присоединено ДЗО"" КАК Содержание
	|ПОМЕСТИТЬ ДанныеРегБУХ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ХозрасчетныйДвиженияССубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектИсточник,
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	|ПОМЕСТИТЬ ДанныеСоответствия
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &ОрганизацияИсточник
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник,
	|	абс_СоответствияОбъектовПереноса.ОбъектИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегБУХ.Период,
	|	ДанныеРегБУХ.Организация,
	|	ДанныеРегБУХ.СчетДт,
	|	ЕСТЬNULL(ДанныеСоответствия.ОбъектПриемник, ДанныеРегБУХ.СубконтоДт1) КАК СубконтоДт1,
	|	ДанныеРегБУХ.ВидСубконтоДт1,
	|	ЕСТЬNULL(ДанныеСоответствия1.ОбъектПриемник, ДанныеРегБУХ.СубконтоДт2) КАК СубконтоДт2,
	|	ДанныеРегБУХ.ВидСубконтоДт2,
	|	ЕСТЬNULL(ДанныеСоответствия2.ОбъектПриемник, ДанныеРегБУХ.СубконтоДт3) КАК СубконтоДт3,
	|	ДанныеРегБУХ.ВидСубконтоДт3,
	|	ДанныеРегБУХ.СчетКт,
	|	ЕСТЬNULL(ДанныеСоответствия3.ОбъектПриемник, ДанныеРегБУХ.СубконтоКт1) КАК СубконтоКт1,
	|	ДанныеРегБУХ.ВидСубконтоКт1,
	|	ЕСТЬNULL(ДанныеСоответствия4.ОбъектПриемник, ДанныеРегБУХ.СубконтоКт2) КАК СубконтоКт2,
	|	ДанныеРегБУХ.ВидСубконтоКт2,
	|	ЕСТЬNULL(ДанныеСоответствия5.ОбъектПриемник, ДанныеРегБУХ.СубконтоКт3) КАК СубконтоКт3,
	|	ДанныеРегБУХ.ВидСубконтоКт3,
	|	ДанныеРегБУХ.ВалютаКт,
	|	ДанныеРегБУХ.ВалютаДт,
	|	ДанныеРегБУХ.Сумма,
	|	ДанныеРегБУХ.ВалютнаяСуммаКт,
	|	ДанныеРегБУХ.ВалютнаяСуммаДт,
	|	ДанныеРегБУХ.КоличествоКт,
	|	ДанныеРегБУХ.КоличествоДт,
	|	ДанныеРегБУХ.Содержание
	|ИЗ
	|	ДанныеРегБУХ КАК ДанныеРегБУХ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоответствия КАК ДанныеСоответствия
	|		ПО ДанныеРегБУХ.СубконтоДт1 = ДанныеСоответствия.ОбъектИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоответствия КАК ДанныеСоответствия1
	|		ПО (ДанныеРегБУХ.СубконтоДт2 = ДанныеСоответствия.ОбъектИсточник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоответствия КАК ДанныеСоответствия2
	|		ПО (ДанныеРегБУХ.СубконтоДт3 = ДанныеСоответствия.ОбъектИсточник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоответствия КАК ДанныеСоответствия3
	|		ПО (ДанныеРегБУХ.СубконтоКт1 = ДанныеСоответствия.ОбъектИсточник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоответствия КАК ДанныеСоответствия4
	|		ПО (ДанныеРегБУХ.СубконтоКт2 = ДанныеСоответствия.ОбъектИсточник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоответствия КАК ДанныеСоответствия5
	|		ПО (ДанныеРегБУХ.СубконтоКт3 = ДанныеСоответствия.ОбъектИсточник)");
	Запрос.УстановитьПараметр("Регистратор", ПредыдущийПеренос.ДокументДвиженийОпераияБух);
	//Запрос.УстановитьПараметр("КТТК", Справочники.Организации.НайтиПоКоду("000000001"));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Период);
	Запрос.УстановитьПараметр("ОрганизацияИсточник", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("ОрганизацияПриемник", СтруктураПараметров.Филиал);
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПолучитьРегистраторХозрасчетный(СтруктураПараметров));
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	Попытка
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	Исключение
		ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось записать движения по регистру Хозрасчетный по причине:"+Символы.ПС+ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьПроводкиПередачаДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	НаборЗаписей = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПолучитьРегистраторХозрасчетный(СтруктураПараметров));
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапросаРегистрБухгалтерии("Налоговый");
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПереноса);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("СписокСчетов", СтруктураПараметров.СчетаНУ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Проводка = НаборЗаписей.Добавить();
		Проводка.Период = СтруктураПараметров.Период-24*3600;
		Проводка.Организация = СтруктураПараметров.ДЗО;
		Проводка.ВидУчетаКт = Выборка.ВидУчета;
		Проводка.ВидУчетаДт = Выборка.ВидУчета; 
		
		Счет = Выборка.Счет;
		
		Если Счет.Вид=ВидСчета.Активный Или Счет.Вид=ВидСчета.АктивноПассивный И Выборка.СуммаОстатокДт<>0 Тогда
			
			Проводка.СчетКт = Счет;
			Проводка.СчетДт = ПланыСчетов.Налоговый.абс_ИмуществоИОбязательстваВРублях;
			
			Субконто = Проводка.СубконтоКт;
			КоррСубконто = Проводка.СубконтоДт;
			
			Проводка.Сумма = Выборка.СуммаОстатокДт;
			Если Счет.Количественный Тогда
				Проводка.КоличествоКт = Выборка.КоличествоОстатокДт;
			КонецЕсли;
			
		Иначе
			
			Проводка.СчетДт = Счет;
			Проводка.СчетКт = ПланыСчетов.Налоговый.абс_ИмуществоИОбязательстваВРублях;
			
			Субконто = Проводка.СубконтоДт;
			КоррСубконто = Проводка.СубконтоКт;
			
			Проводка.Сумма = Выборка.СуммаОстатокКт;
			Если Счет.Количественный Тогда
				Проводка.КоличествоДт = Выборка.КоличествоОстатокКт;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Сч = 1 По 3 Цикл
			ВидСубконто = Выборка["ВидСубконто"+Сч];
			Если ЗначениеЗаполнено(ВидСубконто) Тогда
				Субконто[ВидСубконто] = Выборка["Субконто"+Сч];
			КонецЕсли;
		КонецЦикла;
		КоррСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.абс_Организация] = СтруктураПараметров.ДЗО;
		КоррСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.абс_СчетНУ] = Счет;
		
		Проводка.Содержание = "Исключение из ЕГРЮЛ";
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СформироватьПроводкиПриемДЗОКТТКНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	ПредыдущийПеренос = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(СтруктураПараметров.ДЗО, СтруктураПараметров.Операция, Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК, СтруктураПараметров.СчетаБУНУ);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВложенныйЗапрос.Период,
	                      |	ВложенныйЗапрос.Организация,
	                      |	ВложенныйЗапрос.СчетДт,
	                      |	ВложенныйЗапрос.СубконтоДт1,
	                      |	ВложенныйЗапрос.ВидСубконтоДт1,
	                      |	ВложенныйЗапрос.СубконтоДт2,
	                      |	ВложенныйЗапрос.ВидСубконтоДт2,
	                      |	ВложенныйЗапрос.СубконтоДт3,
	                      |	ВложенныйЗапрос.ВидСубконтоДт3,
	                      |	ВложенныйЗапрос.СчетКт,
	                      |	ВложенныйЗапрос.СубконтоКт1,
	                      |	ВложенныйЗапрос.ВидСубконтоКт1,
	                      |	ВложенныйЗапрос.СубконтоКт2,
	                      |	ВложенныйЗапрос.ВидСубконтоКт2,
	                      |	ВложенныйЗапрос.СубконтоКт3,
	                      |	ВложенныйЗапрос.ВидСубконтоКт3,
	                      |	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	                      |	ВложенныйЗапрос.Содержание,
	                      |	ВложенныйЗапрос.ВидУчетаДт,
	                      |	ВложенныйЗапрос.ВидУчетаКт
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		&Период КАК Период,
	                      |		&КТТК КАК Организация,
	                      |		НалоговыйДвиженияССубконто.СчетКт КАК СчетДт,
	                      |		ВЫБОР
	                      |			КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО)
	                      |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |		КОНЕЦ КАК СубконтоДт1,
	                      |		ВЫБОР
	                      |			КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоКт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		КОНЕЦ КАК ВидСубконтоДт1,
	                      |		ВЫБОР
	                      |			КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО)
	                      |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |		КОНЕЦ КАК СубконтоДт2,
	                      |		ВЫБОР
	                      |			КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоКт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		КОНЕЦ КАК ВидСубконтоДт2,
	                      |		ВЫБОР
	                      |			КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО)
	                      |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |		КОНЕЦ КАК СубконтоДт3,
	                      |		ВЫБОР
	                      |			КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоКт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		КОНЕЦ КАК ВидСубконтоДт3,
	                      |		НалоговыйДвиженияССубконто.СчетДт КАК СчетКт,
	                      |		ВЫБОР
	                      |			КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО)
	                      |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |		КОНЕЦ КАК СубконтоКт1,
	                      |		ВЫБОР
	                      |			КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоДт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		КОНЕЦ КАК ВидСубконтоКт1,
	                      |		ВЫБОР
	                      |			КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО)
	                      |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |		КОНЕЦ КАК СубконтоКт2,
	                      |		ВЫБОР
	                      |			КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоДт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		КОНЕЦ КАК ВидСубконтоКт2,
	                      |		ВЫБОР
	                      |			КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО)
	                      |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |		КОНЕЦ КАК СубконтоКт3,
	                      |		ВЫБОР
	                      |			КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |				ТОГДА ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоДт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		КОНЕЦ КАК ВидСубконтоКт3,
	                      |		НалоговыйДвиженияССубконто.Сумма КАК Сумма,
	                      |		ЕСТЬNULL(НалоговыйДвиженияССубконто.КоличествоДт, 0) КАК КоличествоКт,
	                      |		ЕСТЬNULL(НалоговыйДвиженияССубконто.КоличествоКт, 0) КАК КоличествоДт,
	                      |		""Присоединено ДЗО"" КАК Содержание,
	                      |		НалоговыйДвиженияССубконто.ВидУчетаКт КАК ВидУчетаДт,
	                      |		НалоговыйДвиженияССубконто.ВидУчетаДт КАК ВидУчетаКт
	                      |	ИЗ
	                      |		РегистрБухгалтерии.Налоговый.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК НалоговыйДвиженияССубконто) КАК ВложенныйЗапрос
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВложенныйЗапрос.Период,
	                      |	ВложенныйЗапрос.Организация,
	                      |	ВложенныйЗапрос.СчетДт,
	                      |	ВложенныйЗапрос.СубконтоДт1,
	                      |	ВложенныйЗапрос.ВидСубконтоДт1,
	                      |	ВложенныйЗапрос.СубконтоДт2,
	                      |	ВложенныйЗапрос.ВидСубконтоДт2,
	                      |	ВложенныйЗапрос.СубконтоДт3,
	                      |	ВложенныйЗапрос.ВидСубконтоДт3,
	                      |	ВложенныйЗапрос.СчетКт,
	                      |	ВложенныйЗапрос.СубконтоКт1,
	                      |	ВложенныйЗапрос.ВидСубконтоКт1,
	                      |	ВложенныйЗапрос.СубконтоКт2,
	                      |	ВложенныйЗапрос.ВидСубконтоКт2,
	                      |	ВложенныйЗапрос.СубконтоКт3,
	                      |	ВложенныйЗапрос.ВидСубконтоКт3,
	                      |	ВложенныйЗапрос.Содержание,
	                      |	ВложенныйЗапрос.ВидУчетаДт,
	                      |	ВложенныйЗапрос.ВидУчетаКт");
	Запрос.УстановитьПараметр("Регистратор", ПредыдущийПеренос.ДокументДвиженийОпераияБух);
	Запрос.УстановитьПараметр("КТТК", Справочники.Организации.НайтиПоКоду("000000001"));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Период-24*3600);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Свернуть_01_02_04_05_НУ(ТЗ);
	
	НаборЗаписей = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПолучитьРегистраторХозрасчетный(СтруктураПараметров));
	НаборЗаписей.Загрузить(ТЗ);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СформироватьПроводкиПриемДЗОКТТКНалоговыйУчетNEW(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	ПредыдущийПеренос = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(СтруктураПараметров.ДЗО, СтруктураПараметров.Операция, Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК, СтруктураПараметров.СчетаБУНУ);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	&Период КАК Период,
	|	&КТТК КАК Организация,
	|	НалоговыйДвиженияССубконто.СчетКт КАК СчетДт,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоКт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт1,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоКт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт2,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоКт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт3,
	|	НалоговыйДвиженияССубконто.СчетДт КАК СчетКт,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоДт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт1,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоДт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт2,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоДт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт3,
	|	НалоговыйДвиженияССубконто.Сумма КАК Сумма,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.КоличествоДт, 0) КАК КоличествоКт,
	|	ЕСТЬNULL(НалоговыйДвиженияССубконто.КоличествоКт, 0) КАК КоличествоДт,
	|	""Присоединено ДЗО"" КАК Содержание,
	|	НалоговыйДвиженияССубконто.ВидУчетаКт КАК ВидУчетаДт,
	|	НалоговыйДвиженияССубконто.ВидУчетаДт КАК ВидУчетаКт
	|ПОМЕСТИТЬ ДанныеНУ
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК НалоговыйДвиженияССубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектИсточник,
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	|ПОМЕСТИТЬ ДанныеСоответствия
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &ОрганизацияИсточник
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник,
	|	абс_СоответствияОбъектовПереноса.ОбъектИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНУ.Период,
	|	ДанныеНУ.Организация,
	|	ДанныеНУ.СчетДт,
	|	ЕСТЬNULL(ДанныеСоответствия.ОбъектПриемник, ДанныеНУ.СубконтоДт1) КАК СубконтоДт1,
	|	ДанныеНУ.ВидСубконтоДт1,
	|	ЕСТЬNULL(ДанныеСоответствия1.ОбъектПриемник, ДанныеНУ.СубконтоДт2) КАК СубконтоДт2,
	|	ДанныеНУ.ВидСубконтоДт2,
	|	ЕСТЬNULL(ДанныеСоответствия2.ОбъектПриемник, ДанныеНУ.СубконтоДт3) КАК СубконтоДт3,
	|	ДанныеНУ.ВидСубконтоДт3,
	|	ДанныеНУ.СчетКт,
	|	ЕСТЬNULL(ДанныеСоответствия3.ОбъектПриемник, ДанныеНУ.СубконтоКт1) КАК СубконтоКт1,
	|	ДанныеНУ.ВидСубконтоКт1,
	|	ЕСТЬNULL(ДанныеСоответствия4.ОбъектПриемник, ДанныеНУ.СубконтоКт2) КАК СубконтоКт2,
	|	ДанныеНУ.ВидСубконтоКт2,
	|	ЕСТЬNULL(ДанныеСоответствия5.ОбъектПриемник, ДанныеНУ.СубконтоКт3) КАК СубконтоКт3,
	|	ДанныеНУ.ВидСубконтоКт3,
	|	ДанныеНУ.Сумма,
	|	ДанныеНУ.КоличествоКт,
	|	ДанныеНУ.КоличествоДт,
	|	ДанныеНУ.Содержание,
	|	ДанныеНУ.ВидУчетаДт,
	|	ДанныеНУ.ВидУчетаКт
	|ИЗ
	|	ДанныеНУ КАК ДанныеНУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоответствия КАК ДанныеСоответствия
	|		ПО ДанныеНУ.СубконтоДт1 = ДанныеСоответствия.ОбъектИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоответствия КАК ДанныеСоответствия1
	|		ПО ДанныеНУ.СубконтоДт2 = ДанныеСоответствия1.ОбъектИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоответствия КАК ДанныеСоответствия2
	|		ПО ДанныеНУ.СубконтоДт3 = ДанныеСоответствия2.ОбъектИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоответствия КАК ДанныеСоответствия4
	|		ПО ДанныеНУ.СубконтоКт2 = ДанныеСоответствия4.ОбъектИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоответствия КАК ДанныеСоответствия3
	|		ПО ДанныеНУ.СубконтоКт1 = ДанныеСоответствия3.ОбъектИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоответствия КАК ДанныеСоответствия5
	|		ПО ДанныеНУ.СубконтоКт3 = ДанныеСоответствия5.ОбъектИсточник");
	Запрос.УстановитьПараметр("Регистратор", ПредыдущийПеренос.ДокументДвиженийОпераияБух);
	Запрос.УстановитьПараметр("КТТК", Справочники.Организации.НайтиПоКоду("000000001"));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Период);
	Запрос.УстановитьПараметр("ОрганизацияИсточник", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("ОрганизацияПриемник", СтруктураПараметров.Филиал);
	
	
	НаборЗаписей = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПолучитьРегистраторХозрасчетный(СтруктураПараметров));
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	Попытка
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	Исключение
		ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось записать движения по регистру Хозрасчетный по причине:"+Символы.ПС+ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьПроводкиПередачаКТТКФилиалНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	ПредыдущийПеренос = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(СтруктураПараметров.ДЗО, СтруктураПараметров.Операция, Перечисления.абс_НаправленияПереноса.ПриемИзДЗОВКТТК, СтруктураПараметров.СчетаБУНУ);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	&Период,
	                      |	&КТТК КАК Организация,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА &Счет_7901НУ
	                      |		ИНАЧЕ НалоговыйДвиженияССубконто.СчетКт
	                      |	КОНЕЦ КАК СчетДт,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА &Филиал
	                      |		ИНАЧЕ ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК СубконтоДт1,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения)
	                      |		ИНАЧЕ ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоКт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |	КОНЕЦ КАК ВидСубконтоДт1,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА НЕОПРЕДЕЛЕНО
	                      |		ИНАЧЕ ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК СубконтоДт2,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		ИНАЧЕ ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоКт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |	КОНЕЦ КАК ВидСубконтоДт2,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА НЕОПРЕДЕЛЕНО
	                      |		ИНАЧЕ ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК СубконтоДт3,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		ИНАЧЕ ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоКт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |	КОНЕЦ КАК ВидСубконтоДт3,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА &Счет_7901НУ
	                      |		ИНАЧЕ НалоговыйДвиженияССубконто.СчетДт
	                      |	КОНЕЦ КАК СчетКт,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА &Филиал
	                      |		ИНАЧЕ ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК СубконтоКт1,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения)
	                      |		ИНАЧЕ ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоДт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |	КОНЕЦ КАК ВидСубконтоКт1,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА НЕОПРЕДЕЛЕНО
	                      |		ИНАЧЕ ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК СубконтоКт2,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		ИНАЧЕ ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоДт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |	КОНЕЦ КАК ВидСубконтоКт2,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА НЕОПРЕДЕЛЕНО
	                      |		ИНАЧЕ ЕСТЬNULL(НалоговыйДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК СубконтоКт3,
	                      |	ВЫБОР
	                      |		КОГДА НалоговыйДвиженияССубконто.СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))
	                      |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	                      |		ИНАЧЕ ЕСТЬNULL(НалоговыйДвиженияССубконто.ВидСубконтоДт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка))
	                      |	КОНЕЦ КАК ВидСубконтоКт3,
	                      |	НалоговыйДвиженияССубконто.Сумма,
	                      |	""Передача в филиал"" КАК Содержание,
	                      |	НалоговыйДвиженияССубконто.ВидУчетаДт,
	                      |	НалоговыйДвиженияССубконто.ВидУчетаКт
	                      |ИЗ
	                      |	РегистрБухгалтерии.Налоговый.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК НалоговыйДвиженияССубконто");
	
	Запрос.УстановитьПараметр("Регистратор", ПредыдущийПеренос.ДокументДвиженийОпераияБух);
	Запрос.УстановитьПараметр("Филиал", СтруктураПараметров.Филиал);
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Период-24*3600);
	Запрос.УстановитьПараметр("КТТК", Справочники.Организации.НайтиПоКоду("000000001"));
	Запрос.УстановитьПараметр("Счет_7901НУ", ПланыСчетов.Налоговый.НайтиПоКоду("79.01"));
	
	НаборЗаписей = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПолучитьРегистраторХозрасчетный(СтруктураПараметров));
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось записать движения по регистру Хозрасчетный по причине:"+Символы.ПС+ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьПроводкиПриемКТТКФилиалНалоговыйУчет(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	ПередачаВКТТК = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(СтруктураПараметров.ДЗО, СтруктураПараметров.Операция, Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК, СтруктураПараметров.СчетаБУНУ);
	
	НаборЗаписей = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПередачаВКТТК.ДокументДвиженийОпераияБух);
	НаборЗаписей.Прочитать();
	
	ТаблицаРегистра = НаборЗаписей.Выгрузить();
		
	КолонкиТаблицы = ТаблицаРегистра.Колонки;
	
	Для Сч = 1 По 3 Цикл
		КолонкиТаблицы["ВидСубконтоДт"+Сч].Имя = "ВидСубконтоДт_"+Сч;
		КолонкиТаблицы["СубконтоДт"+Сч].Имя = "СубконтоДт_"+Сч;
		КолонкиТаблицы["ВидСубконтоКт"+Сч].Имя = "ВидСубконтоДт"+Сч;
		КолонкиТаблицы["СубконтоКт"+Сч].Имя = "СубконтоДт"+Сч;
		КолонкиТаблицы["ВидСубконтоДт_"+Сч].Имя = "ВидСубконтоКт"+Сч;
		КолонкиТаблицы["СубконтоДт_"+Сч].Имя = "СубконтоКт"+Сч;
	КонецЦикла;
	
	КолонкиТаблицы.СчетДт.Имя = "СчетДт_";
	КолонкиТаблицы.СчетКт.Имя = "СчетДт";
	КолонкиТаблицы.СчетДт_.Имя = "СчетКт";
	КолонкиТаблицы.ВидУчетаДт.Имя = "ВидУчетаДт_";
	КолонкиТаблицы.ВидУчетаКт.Имя = "ВидУчетаДт";
	КолонкиТаблицы.ВидУчетаДт_.Имя = "ВидУчетаКт";
	КолонкиТаблицы.КоличествоДт.Имя = "КоличествоДт_";
	КолонкиТаблицы.КоличествоКт.Имя = "КоличествоДт";
	КолонкиТаблицы.КоличествоДт_.Имя = "КоличествоКт";
	
	КолонкиТаблицы.Удалить(КолонкиТаблицы.Регистратор);
	
	ТаблицаРегистра.ЗаполнитьЗначения(СтруктураПараметров.Период-24*3600, "Период");
	
	ЗаменитьОбъектыДЗОНаОбъектыФилиалаПоТаблице(ТаблицаРегистра, СтруктураПараметров, Отказ, Ошибки);
	
	ПерезаполнитьСчетаНУ(ТаблицаРегистра, СтруктураПараметров, Отказ, Ошибки);
	
	Свернуть_01_02_04_05_НУ_ПриемВФилиал(ТаблицаРегистра);
	
	НаборЗаписей = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПолучитьРегистраторХозрасчетный(СтруктураПараметров));
	НаборЗаписей.Загрузить(ТаблицаРегистра);
	
	//Попытка
	НаборЗаписей.Записать();
	//Исключение
	//	Отказ = Истина;
	//	ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось записать движения по регистру Хозрасчетный по причине:"+Символы.ПС+ОписаниеОшибки());
	//КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьПроводкиПоЗабалансовымСчетамПередачаИзДЗО(СтруктураПараметров, Отказ, Ошибки)
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПолучитьРегистраторХозрасчетный(СтруктураПараметров));
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапросаРегистрБухгалтерии("Хозрасчетный");
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПереноса);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("СписокСчетов", СтруктураПараметров.СчетаБУ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Проводка = НаборЗаписей.Добавить();
		Проводка.Период = СтруктураПараметров.Период-24*3600;
		Проводка.Организация = СтруктураПараметров.ДЗО;
		
		Счет = Выборка.Счет;
		
		Если Счет.Вид=ВидСчета.Активный Или Счет.Вид=ВидСчета.АктивноПассивный И (Выборка.СуммаОстатокДт<>0 
			//АБС ВСТАВКА 56841  18.05.2015 10:22:13  Коломиец
			ИЛИ (Выборка.КоличествоОстатокДт <> 0 И Счет.Количественный)) Тогда
			//АБС ВСТАВКА 56841 КОНЕЦ
			
			Проводка.СчетКт = Счет;
			
			Субконто = Проводка.СубконтоКт;
			
			Проводка.Сумма = Выборка.СуммаОстатокДт;
			Если Счет.Количественный Тогда
				Проводка.КоличествоКт = Выборка.КоличествоОстатокДт;
			КонецЕсли;
			Если Счет.Валютный Тогда
				Проводка.ВалютаКт = Выборка.Валюта;
				Проводка.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаОстатокДт;
			КонецЕсли;
			
		Иначе
			
			Проводка.СчетДт = Счет;
			
			Субконто = Проводка.СубконтоДт;
			
			Проводка.Сумма = Выборка.СуммаОстатокКт;
			Если Счет.Количественный Тогда
				Проводка.КоличествоДт = Выборка.КоличествоОстатокКт;
			КонецЕсли;
			Если Счет.Валютный Тогда
				Проводка.ВалютаДт = Выборка.Валюта;
				Проводка.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаОстатокКт;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Сч = 1 По 3 Цикл
			ВидСубконто = Выборка["ВидСубконто"+Сч];
			Если ЗначениеЗаполнено(ВидСубконто) Тогда
				Субконто[ВидСубконто] = Выборка["Субконто"+Сч];
			КонецЕсли;
			Если ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств И 
				(Субконто[ВидСубконто] = Неопределено Или Субконто[ВидСубконто] = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка()) Тогда
				Субконто[ВидСубконто] =  СтруктураПараметров.Настройки.СтатьяДДСОстатков;
			КонецЕсли;	
			Если ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства И 
				(Субконто[ВидСубконто] = Неопределено Или Субконто[ВидСубконто] = Перечисления.СпособыСтроительства.ПустаяСсылка()) Тогда
				Субконто[ВидСубконто] = Перечисления.СпособыСтроительства.Хозспособ;
			КонецЕсли;
			
		КонецЦикла;
		
		Проводка.Содержание = "Исключение из ЕГРЮЛ";
		
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось записать движения по регистру Хозрасчетный по причине:"+Символы.ПС+ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;	
	
КонецПроцедуры

Процедура СформироватьПроводкиПоЗабалансовымСчетамПриемКТТКФилиал(СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	ПередачаВКТТК = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(СтруктураПараметров.ДЗО, СтруктураПараметров.Операция, Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК, СтруктураПараметров.СчетаБУНУ);
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПередачаВКТТК.ДокументДвиженийОпераияБух);
	НаборЗаписей.Прочитать();
	
	ТаблицаРегистра = НаборЗаписей.Выгрузить();
	
	КолонкиТаблицы = ТаблицаРегистра.Колонки;
	
	Для Сч = 1 По 3 Цикл
		КолонкиТаблицы["ВидСубконтоДт"+Сч].Имя = "ВидСубконтоДт_"+Сч;
		КолонкиТаблицы["СубконтоДт"+Сч].Имя = "СубконтоДт_"+Сч;
		КолонкиТаблицы["ВидСубконтоКт"+Сч].Имя = "ВидСубконтоДт"+Сч;
		КолонкиТаблицы["СубконтоКт"+Сч].Имя = "СубконтоДт"+Сч;
		КолонкиТаблицы["ВидСубконтоДт_"+Сч].Имя = "ВидСубконтоКт"+Сч;
		КолонкиТаблицы["СубконтоДт_"+Сч].Имя = "СубконтоКт"+Сч;
	КонецЦикла;
	
	КолонкиТаблицы.СчетДт.Имя = "СчетДт_";
	КолонкиТаблицы.СчетКт.Имя = "СчетДт";
	КолонкиТаблицы.СчетДт_.Имя = "СчетКт";
	КолонкиТаблицы.ВалютаДт.Имя = "ВалютаДт_";
	КолонкиТаблицы.ВалютаКт.Имя = "ВалютаДт";
	КолонкиТаблицы.ВалютаДт_.Имя = "ВалютаКт";
	КолонкиТаблицы.ВалютнаяСуммаДт.Имя = "ВалютнаяСуммаДт_";
	КолонкиТаблицы.ВалютнаяСуммаКт.Имя = "ВалютнаяСуммаДт";
	КолонкиТаблицы.ВалютнаяСуммаДт_.Имя = "ВалютнаяСуммаКт";
	КолонкиТаблицы.КоличествоДт.Имя = "КоличествоДт_";
	КолонкиТаблицы.КоличествоКт.Имя = "КоличествоДт";
	КолонкиТаблицы.КоличествоДт_.Имя = "КоличествоКт";
	
	КолонкиТаблицы.Удалить(КолонкиТаблицы.Регистратор);
	
	ТаблицаРегистра.ЗаполнитьЗначения(СтруктураПараметров.Период-24*3600, "Период");
	
	ЗаменитьОбъектыДЗОНаОбъектыФилиалаПоТаблице(ТаблицаРегистра, СтруктураПараметров, Отказ, Ошибки);
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПолучитьРегистраторХозрасчетный(СтруктураПараметров));
	НаборЗаписей.Загрузить(ТаблицаРегистра);
	
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Отказ = Истина;
		ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось записать движения по регистру Хозрасчетный по причине:"+Символы.ПС+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ПерезаполнитьСчетаБУ(ТаблицаРегистра)
	мСчетаАмортизации = Новый Массив;
	мСчетаАмортизации.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	мСчетаАмортизации.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_03);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))";
	
	Результат = Запрос.Выполнить().Выгрузить();
	мВспомогательныеСчета = Результат.ВыгрузитьКолонку("Ссылка");
	Счет79 = ПланыСчетов.Хозрасчетный.РасчетыПоВыделенномуИмуществу;
	КТТК = Справочники.Организации.НайтиПоКоду("000000001"); 
	ТребуетсяСвернутьОС = Ложь;
	
	Для Каждого СтрокаТЗ Из ТаблицаРегистра Цикл
		
		Если Не ТребуетсяСвернутьОС Тогда 
			ТребуетсяСвернутьОС = Не мСчетаАмортизации.Найти(СтрокаТЗ.СчетКт) = Неопределено;
		КонецЕсли;
		СчетКредитВспомогательный = Не мВспомогательныеСчета.Найти(СтрокаТЗ.СчетКт) = Неопределено;
		СчетДебитВспомогательный = Не мВспомогательныеСчета.Найти(СтрокаТЗ.СчетДт) = Неопределено; 
		Если СчетКредитВспомогательный Тогда 
			СтрокаТЗ.СчетКт = Счет79;
			СтрокаТЗ.ВидСубконтоКт1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения;
			СтрокаТЗ.ВидСубконтоКт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
			СтрокаТЗ.ВидСубконтоКт3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
			СтрокаТЗ.СубконтоКт1 = КТТК;
			СтрокаТЗ.СубконтоКт2 = Неопределено;
			СтрокаТЗ.СубконтоКт3 = Неопределено;
		ИначеЕсли СчетДебитВспомогательный Тогда  
			СтрокаТЗ.СчетДт = Счет79;
			СтрокаТЗ.ВидСубконтоДт1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения;
			СтрокаТЗ.ВидСубконтоДт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
			СтрокаТЗ.ВидСубконтоДт3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
			СтрокаТЗ.СубконтоДт1 = КТТК;
			СтрокаТЗ.СубконтоДт2 = Неопределено;
			СтрокаТЗ.СубконтоДт3 = Неопределено;
		КонецЕсли;
		Если ТипЗнч(СтрокаТЗ.СубконтоДт1) =  Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда 
			ЗаполнитьРБП(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	Если ТребуетсяСвернутьОС Тогда 
		СвернутьОСВТаблице(ТаблицаРегистра, мСчетаАмортизации);
	КонецЕсли;
	
КонецПроцедуры           

Процедура ПерезаполнитьСчетаНУ(ТаблицаРегистра, СтруктураПараметров, Отказ, Ошибки)
	
	
	мСчетаАмортизации = Новый Массив;
	мСчетаАмортизации.Добавить(ПланыСчетов.Налоговый.АмортизацияОС_01);
	мСчетаАмортизации.Добавить(ПланыСчетов.Налоговый.АмортизацияОС_03);
	
	ТребуетсяЗаполнитьДокументыДляСчетаКВ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Налоговый.Ссылка
	|ИЗ
	|	ПланСчетов.Налоговый КАК Налоговый
	|ГДЕ
	|	Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.абс_Вспомогательный))";
	
	Результат = Запрос.Выполнить().Выгрузить();
	мВспомогательныеСчета = Результат.ВыгрузитьКолонку("Ссылка");
	//Счет79 = ПланыСчетов.Налоговый.РасчетыПоТекущимОперациям;
	Счет79 = ПланыСчетов.Налоговый.НайтиПоКоду("79.01");
	КТТК = Справочники.Организации.НайтиПоКоду("000000001"); 
	
	ТребуетсяСвернутьОС = Ложь;
	Для Каждого СтрокаТЗ Из ТаблицаРегистра Цикл
		
		Если Не ТребуетсяСвернутьОС Тогда 
			ТребуетсяСвернутьОС = Не мСчетаАмортизации.Найти(СтрокаТЗ.СчетКт) = Неопределено;
		КонецЕсли;
		
		СчетКредитВспомогательный = Не мВспомогательныеСчета.Найти(СтрокаТЗ.СчетКт) = Неопределено;
		СчетДебитВспомогательный = Не мВспомогательныеСчета.Найти(СтрокаТЗ.СчетДт) = Неопределено; 
		Если СчетКредитВспомогательный Тогда 
			СтрокаТЗ.СчетКт = Счет79;
			СтрокаТЗ.ВидСубконтоКт1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения;
			СтрокаТЗ.ВидСубконтоКт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
			СтрокаТЗ.ВидСубконтоКт3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
			СтрокаТЗ.СубконтоКт1 = КТТК;
			СтрокаТЗ.СубконтоКт2 = Неопределено;
			СтрокаТЗ.СубконтоКт3 = Неопределено;
		ИначеЕсли СчетДебитВспомогательный Тогда  
			СтрокаТЗ.СчетДт = Счет79;
			СтрокаТЗ.ВидСубконтоДт1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения;
			СтрокаТЗ.ВидСубконтоДт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
			СтрокаТЗ.ВидСубконтоДт3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
			СтрокаТЗ.СубконтоДт1 = КТТК;
			СтрокаТЗ.СубконтоДт2 = Неопределено;
			СтрокаТЗ.СубконтоДт3 = Неопределено;
		КонецЕсли;
		Если ТипЗнч(СтрокаТЗ.СубконтоДт1) = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда 
			ЗаполнитьРБП(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяСвернутьОС Тогда 
		СвернутьОСВТаблице(ТаблицаРегистра, мСчетаАмортизации, Истина);
	КонецЕсли;
	СчетКВ = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
	ТребуетсяЗаполнитьДокументыДляСчетаКВ = (Не ТаблицаРегистра.Найти(СчетКВ, "СчетДт") = Неопределено Или 
								Не ТаблицаРегистра.Найти(СчетКВ, "СчетКт") = Неопределено);
	
	Если ТребуетсяЗаполнитьДокументыДляСчетаКВ Тогда 
		
		ЗаполнитьДокументыДляСчетаКВ(ТаблицаРегистра, СчетКВ,СтруктураПараметров, Отказ, Ошибки);
		
	КонецЕсли;	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
//Процедуры обработки таблиц регистров ОС

Процедура СвернутьОСВТаблице(ТаблицаРегистра, мСчетаАмортизации, НалоговыйРегистр = Ложь)
	мСтрокиДляУдаления = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаРегистра Цикл
		СтрокаСодержит02счет = Не мСчетаАмортизации.Найти(СтрокаТЗ.СчетКт) = Неопределено;
		Если Не СтрокаСодержит02счет Тогда 
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЗ.СубконтоКт1) Тогда 
			Продолжить;
		КонецЕсли;
		Если НалоговыйРегистр Тогда 
			ПараметрыОтбора = Новый Структура("СубконтоДт1, ВидУчетаДт", СтрокаТЗ.СубконтоКт1, СтрокаТЗ.ВидУчетаКт);
			СтрокиОС = ТаблицаРегистра.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиОС.Количество() = 0 Тогда 
				СтрокаОС = Неопределено;
			Иначе 
				СтрокаОС = СтрокиОС[0];
			КонецЕсли;	
		Иначе 
			СтрокаОС = ТаблицаРегистра.Найти(СтрокаТЗ.СубконтоКт1, "СубконтоДт1");
		КонецЕсли;
		
		Если СтрокаОС = Неопределено Тогда 
			Продолжить;
		Иначе 
			мСтрокиДляУдаления.Добавить(СтрокаТЗ);
		КонецЕсли;
		СтоимостьОС = СтрокаОС.Сумма - СтрокаТЗ.Сумма;
		Если СтоимостьОС = 0 Тогда 
			мСтрокиДляУдаления.Добавить(СтрокаОС);
		Иначе
			СтрокаОС.Сумма = СтоимостьОС;
		КонецЕсли;	
	КонецЦикла;	
	
	Для каждого ЭлементМассива Из мСтрокиДляУдаления Цикл
		ТаблицаРегистра.Удалить(ЭлементМассива);
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьРегистрНакопленияСтоимостиОС(ТаблицаРегистра)
	мСтрокиДляУдаления = Новый Массив; 
	Для каждого СтрокаТЗ Из ТаблицаРегистра Цикл
		СтоимостьОС = СтрокаТЗ.Стоимость - СтрокаТЗ.Амортизация;
		Если СтоимостьОС = 0 Тогда 
			мСтрокиДляУдаления.Добавить(СтрокаТЗ);
		Иначе 	
			СтрокаТЗ.Стоимость = СтоимостьОС;
			СтрокаТЗ.Амортизация = 0;
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого ЭлементМассива Из мСтрокиДляУдаления Цикл
		ТаблицаРегистра.Удалить(ЭлементМассива);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьНачальнуюСтоимостьОС(ТаблицаРегистра, СтруктураПараметров, ИмяРегистра)
	мСтрокиДляУдаления = Новый Массив;
	Если ИмяРегистра = "ПервоначальныеСведенияОСНалоговыйУчет" Тогда  
		ТаблицаСтоимостиОС = ПолучитьТаблицуСтоимостиОСНУ(СтруктураПараметров.ДокументДвижений);
		ИмяРесурсаСтоимостиОС = "ПервоначальнаяСтоимостьНУ";
	ИначеЕсли ИмяРегистра = "ПервоначальныеСведенияОС" Или ИмяРегистра = "ПервоначальныеСведенияОСБухгалтерскийУчет" Тогда    
		ТаблицаСтоимостиОС = ПолучитьТаблицуСтоимостиОСБУ(СтруктураПараметров.ДокументДвижений);
		ИмяРесурсаСтоимостиОС = "ПервоначальнаяСтоимость";
	ИначеЕсли ИмяРегистра = "ПараметрыАмортизацииОСНалоговыйУчет" Тогда    
		ТаблицаСтоимостиОС = ПолучитьТаблицуСтоимостиОСНУ(СтруктураПараметров.ДокументДвижений);
		ИмяРесурсаСтоимостиОС = "СтоимостьДляВычисленияАмортизации";
	ИначеЕсли ИмяРегистра = "ПараметрыАмортизацииОС" Или ИмяРегистра = "ПараметрыАмортизацииОСБухгалтерскийУчет" Тогда    
		ТаблицаСтоимостиОС = ПолучитьТаблицуСтоимостиОСБУ(СтруктураПараметров.ДокументДвижений);
		ИмяРесурсаСтоимостиОС = "СтоимостьДляВычисленияАмортизации";	
	КонецЕсли;
	Для каждого СтрокаТЗ Из ТаблицаРегистра Цикл
		НайденнаяСтрокаСтоимостиОС = ТаблицаСтоимостиОС.Найти(СтрокаТЗ.ОсновноеСредство, "ОС");
		Если НайденнаяСтрокаСтоимостиОС = Неопределено Тогда
			//мСтрокиДляУдаления.Добавить(СтрокаТЗ);
			СтрокаТЗ[ИмяРесурсаСтоимостиОС] = 0;
			Продолжить;
		КонецЕсли;
		СтрокаТЗ[ИмяРесурсаСтоимостиОС] = НайденнаяСтрокаСтоимостиОС.Сумма;
	КонецЦикла;
	
	//Для каждого ЭлементМассива Из мСтрокиДляУдаления Цикл
	//	ТаблицаРегистра.Удалить(ЭлементМассива);
	//КонецЦикла;
	
КонецПроцедуры

Функция  ПолучитьТаблицуСтоимостиОСБУ(Регистратор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Сумма,
	|	ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Справочник.ОсновныеСредства) КАК ОС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Регистратор
	|				И НЕ ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.ОсновныеСредства) ЕСТЬ NULL ,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

Функция  ПолучитьТаблицуСтоимостиОСНУ(Регистратор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйДвиженияССубконто.Сумма,
	|	ВЫРАЗИТЬ(НалоговыйДвиженияССубконто.СубконтоДт1 КАК Справочник.ОсновныеСредства) КАК ОС
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Регистратор
	|				И НЕ ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.ОсновныеСредства) ЕСТЬ NULL ,
	|			,
	|			) КАК НалоговыйДвиженияССубконто";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

Процедура ПересчитатьСрокПолезногоИспользованияОС(ТаблицаРегистра, ПериодРегистрации)
	
	Для Каждого СтрокаТЗ Из ТаблицаРегистра Цикл 
		СрокИспользованияВДЗО = ПолучитьРазностьМесяцев(СтрокаТЗ.Период, ПериодРегистрации);
		СтрокаТЗ.СрокПолезногоИспользования = Макс(СтрокаТЗ.СрокПолезногоИспользования - СрокИспользованияВДЗО, 1);
		СтрокаТЗ.СрокИспользованияДляВычисленияАмортизации = Макс(СтрокаТЗ.СрокИспользованияДляВычисленияАмортизации - СрокИспользованияВДЗО, 1);
		СтрокаТЗ.ПрименитьВТекущемМесяце = Истина;
	КонецЦикла;	
	
КонецПроцедуры

Функция  ПолучитьРазностьМесяцев(НачДата, КонДата)
	Если НачалоМесяца(НачДата) >= НачалоМесяца(КонДата) Тогда 
		Возврат 0;
	КонецЕсли;	
	ГодНач = Год(НачДата);
	МесяцНач = Месяц(НачДата);
	
	ГодКон = Год(КонДата);
	МесяцКон = Месяц(КонДата);
	
	РазницаЛет = ГодКон - ГодНач;
	РазницаМес = МесяцКон - МесяцНач;
	
	РазницаМесяцев = РазницаЛет*12+РазницаМес;
	Возврат РазницаМесяцев;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////
// Процедуры стандартного переноса регистров

Процедура ПеренестиРегистрНакопления(ИмяРегистра, ПериодОстатков, ПериодРегистрации, СтруктураПараметров, Отборы = Неопределено, Отказ, Ошибки) Экспорт
	
	мРегистрыУчетаСтоимостиОС = Новый Массив;
	мРегистрыУчетаСтоимостиОС.Добавить("СтоимостьОС");
	мРегистрыУчетаСтоимостиОС.Добавить("СтоимостьОСБухгалтерскийУчет");
	мРегистрыУчетаСтоимостиОС.Добавить("СтоимостьОСНалоговыйУчет");
	
	мРегистрыДляПереносаДокументов = Новый Массив;
	мРегистрыДляПереносаДокументов.Добавить("ВзаиморасчетыСКонтрагентами");
	мРегистрыДляПереносаДокументов.Добавить("РасчетыСКонтрагентами");
	мРегистрыДляПереносаДокументов.Добавить("ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов");
	мРегистрыДляПереносаДокументов.Добавить("РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации");
	мРегистрыДляПереносаДокументов.Добавить("РасчетыПоРеализацииВУсловныхЕдиницахОрганизации");
	мРегистрыДляПереносаДокументов.Добавить("ПартииМатериаловВЭксплуатации");
	мРегистрыДляПереносаДокументов.Добавить("ПартииМатериаловВЭксплуатацииБухгалтерскийУчет");
	мРегистрыДляПереносаДокументов.Добавить("ПартииМатериаловВЭксплуатацииНалоговыйУчет");
	мРегистрыДляПереносаДокументов.Добавить("ПартииТоваровНаСкладах");
	мРегистрыДляПереносаДокументов.Добавить("ПартииТоваровНаСкладахБухгалтерскийУчет");
	мРегистрыДляПереносаДокументов.Добавить("ПартииТоваровНаСкладахНалоговыйУчет");
	мРегистрыДляПереносаДокументов.Добавить("ПартииТоваровПереданные");
	мРегистрыДляПереносаДокументов.Добавить("ПартииТоваровПереданныеБухгалтерскийУчет");
	мРегистрыДляПереносаДокументов.Добавить("ПартииТоваровПереданныеНалоговыйУчет");
	мРегистрыДляПереносаДокументов.Добавить("НДСНачисленный");
	мРегистрыДляПереносаДокументов.Добавить("НДСПредъявленный");
	мРегистрыДляПереносаДокументов.Добавить("НДСЗаписиКнигиПокупок");
	мРегистрыДляПереносаДокументов.Добавить("НДСЗаписиКнигиПродаж");
	мРегистрыДляПереносаДокументов.Добавить("НДСсАвансов");
	//мРегистрыДляПереносаДокументов.Добавить("");
	//мРегистрыДляПереносаДокументов.Добавить("");
	//мРегистрыДляПереносаДокументов.Добавить("");
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодОстатков, ВидГраницы.Включая));
	
	ПервыйОтбор = Истина;
	СтрокаОтборов = "";
	Если Отборы<>Неопределено Тогда
		Для Каждого ЭлементОтбора Из Отборы Цикл
			Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			Если ПервыйОтбор Тогда
				ПервыйОтбор = Ложь;
			Иначе
				СтрокаОтборов = СтрокаОтборов+" И ";
			КонецЕсли;
			СтрокаОтборов = СтрокаОтборов+ЭлементОтбора.Ключ;
			Если ТипЗнч(ЭлементОтбора.Значение)=Тип("Массив") Или ТипЗнч(ЭлементОтбора.Значение)=Тип("СписокЗначений") Тогда
				СтрокаОтборов = СтрокаОтборов+" В "+" ("+"&"+ЭлементОтбора.Ключ+")";
			Иначе
				СтрокаОтборов = СтрокаОтборов+" = "+"&"+ЭлементОтбора.Ключ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаРегистрНакопления(ИмяРегистра, Истина, СтрокаОтборов);
	
	ТаблицаРегистра = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРегистра.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	Если ТаблицаРегистра.Колонки.Найти("Период")=Неопределено Тогда
		ТаблицаРегистра.Колонки.Добавить("Период");
	КонецЕсли;
	
	ТаблицаРегистра.ЗаполнитьЗначения(ПериодРегистрации-24*3600, "Период");
	ЗаменитьОбъектыДЗОНаОбъектыФилиалаПоТаблице(ТаблицаРегистра, СтруктураПараметров, Отказ, Ошибки);
	
	ТребуетсяПереносДокументов = Не мРегистрыДляПереносаДокументов.Найти(ИмяРегистра) = Неопределено;
	Если ТребуетсяПереносДокументов Тогда 
		ПеренестиДокументыРасчетов(ТаблицаРегистра, СтруктураПараметров, Отказ, Ошибки);
	КонецЕсли;	
	
	СвернутьРегистрСтоимостиОС = Не мРегистрыУчетаСтоимостиОС.Найти(ИмяРегистра) = Неопределено;
	Если СвернутьРегистрСтоимостиОС Тогда 
		СвернутьРегистрНакопленияСтоимостиОС(ТаблицаРегистра);
	КонецЕсли;	
	
	Попытка
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
		НаборЗаписей.Загрузить(ТаблицаРегистра);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	Исключение
		ДобавитьОшибкуПользователю(Ошибки, , "Не удалось записать регистр накопления "+ИмяРегистра+" по причине:"+Символы.ПС+ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПеренестиРегистрСведений(ИмяРегистра, ПериодСреза, ПериодРегистрации, СтруктураПараметров, Отборы, Отказ, Ошибки) Экспорт
	
	мРегистрыСостоянияОС = Новый Массив;
	мРегистрыСостоянияОС.Добавить("СостоянияОС");
	мРегистрыСостоянияОС.Добавить("СостоянияОСОрганизаций");
	
	мРегистрыУчетаПервоначальныхСведенийОС = Новый Массив;
	мРегистрыУчетаПервоначальныхСведенийОС.Добавить("ПервоначальныеСведенияОС");
	мРегистрыУчетаПервоначальныхСведенийОС.Добавить("ПервоначальныеСведенияОСБухгалтерскийУчет");
	мРегистрыУчетаПервоначальныхСведенийОС.Добавить("ПервоначальныеСведенияОСНалоговыйУчет");
	
	мРегистрыУчетвПараметровАмортизацииОС = Новый Массив;
	мРегистрыУчетвПараметровАмортизацииОС.Добавить("ПараметрыАмортизацииОС");
	мРегистрыУчетвПараметровАмортизацииОС.Добавить("ПараметрыАмортизацииОСБухгалтерскийУчет");
	мРегистрыУчетвПараметровАмортизацииОС.Добавить("ПараметрыАмортизацииОСНалоговыйУчет");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодСреза, ВидГраницы.Включая));
	
	ПервыйОтбор = Истина;
	СтрокаОтборов = "";
	Если Отборы<>Неопределено Тогда
		Для Каждого ЭлементОтбора Из Отборы Цикл
			Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			Если ПервыйОтбор Тогда
				ПервыйОтбор = Ложь;
			Иначе
				СтрокаОтборов = СтрокаОтборов+" И ";
			КонецЕсли;
			СтрокаОтборов = СтрокаОтборов+ЭлементОтбора.Ключ;
			Если ТипЗнч(ЭлементОтбора.Значение)=Тип("Массив") Или ТипЗнч(ЭлементОтбора.Значение)=Тип("СписокЗначений") Тогда
				СтрокаОтборов = СтрокаОтборов+" В "+" ("+"&"+ЭлементОтбора.Ключ+")";
			Иначе
				СтрокаОтборов = СтрокаОтборов+" = "+"&"+ЭлементОтбора.Ключ;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаРегистрСведений(ИмяРегистра, Истина, СтрокаОтборов);
	ТаблицаРегистра = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРегистра.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	Если ТаблицаРегистра.Колонки.Найти("Период")=Неопределено Тогда
		ТаблицаРегистра.Колонки.Добавить("Период");
	КонецЕсли;
	
	ЭтоРегистрУчетаПараметровАмортизацииОС = Не  мРегистрыУчетвПараметровАмортизацииОС.Найти(ИмяРегистра) = Неопределено;
	Если ЭтоРегистрУчетаПараметровАмортизацииОС Тогда 
		ПересчитатьСрокПолезногоИспользованияОС(ТаблицаРегистра, ПериодРегистрации);
	КонецЕсли;	
	
	ЭтоРегистрСостоянияОС = Не мРегистрыСостоянияОС.Найти(ИмяРегистра) = Неопределено; 
	Если ЭтоРегистрСостоянияОС Тогда 
		//ТаблицаРегистра.ЗаполнитьЗначения(ПериодРегистрации, "ДатаСостояния");
		ТаблицаРегистра.ЗаполнитьЗначения(СтруктураПараметров.ДатаСостояния, "ДатаСостояния");
	КонецЕсли;	
	
	ТаблицаРегистра.ЗаполнитьЗначения(ПериодРегистрации-24*3600, "Период");
	ЗаменитьОбъектыДЗОНаОбъектыФилиалаПоТаблице(ТаблицаРегистра, СтруктураПараметров, Отказ, Ошибки);
	
	ТребуетсяПерезаполнитьНачальнуюСтоимостьОС = Не мРегистрыУчетаПервоначальныхСведенийОС.Найти(ИмяРегистра)  = Неопределено;
	Если ТребуетсяПерезаполнитьНачальнуюСтоимостьОС Или ЭтоРегистрУчетаПараметровАмортизацииОС Тогда 
		ПерезаполнитьНачальнуюСтоимостьОС(ТаблицаРегистра, СтруктураПараметров, ИмяРегистра);
	КонецЕсли;
	
	ЗаполнитьМетодАмортизацииНУ(ИмяРегистра, ТаблицаРегистра);
	ЗаполнитьСпециальныйКоэфициент(ИмяРегистра, ТаблицаРегистра);
	
	Если ИмяРегистра = "СостоянияОС" Тогда
		ТаблицаРегистра.Свернуть("ДатаСостояния, ОсновноеСредство, Период, Состояние");
	КонецЕсли;
	
	Попытка
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
		НаборЗаписей.Загрузить(ТаблицаРегистра);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	Исключение
		ДобавитьОшибкуПользователю(Ошибки, , "Не удалось записать регистр сведений "+ИмяРегистра+" по причине:"+Символы.ПС+ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗакрытьРегистрНакопления(ИмяРегистра, ПериодОстатков, ПериодЗакрытия, СтруктураПараметров, Отборы, Отказ, Ошибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодОстатков, ВидГраницы.Включая));
	
	ПервыйОтбор = Истина;
	СтрокаОтборов = "";
	Если Отборы<>Неопределено Тогда
		Для Каждого ЭлементОтбора Из Отборы Цикл
			Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			Если ПервыйОтбор Тогда
				ПервыйОтбор = Ложь;
			Иначе
				СтрокаОтборов = СтрокаОтборов+" И ";
			КонецЕсли;
			СтрокаОтборов = СтрокаОтборов+ЭлементОтбора.Ключ;
			Если ТипЗнч(ЭлементОтбора.Значение)=Тип("Массив") Или ТипЗнч(ЭлементОтбора.Значение)=Тип("СписокЗначений") Тогда
				СтрокаОтборов = СтрокаОтборов+" В ";
			Иначе
				СтрокаОтборов = СтрокаОтборов+" = ";
			КонецЕсли;
			СтрокаОтборов = СтрокаОтборов+"&"+ЭлементОтбора.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаРегистрНакопления(ИмяРегистра, Истина, СтрокаОтборов);
	
	ТаблицаРегистра = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРегистра.Колонки.Найти("Период")=Неопределено Тогда
		ТаблицаРегистра.Колонки.Добавить("Период");
	КонецЕсли;
	
	ТаблицаРегистра.ЗаполнитьЗначения(ПериодЗакрытия, "Период");
	
	РесурсыРегистра = Метаданные.РегистрыНакопления[ИмяРегистра].Ресурсы;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРегистра Цикл
		
		Для Каждого МетаданныеРесурса Из РесурсыРегистра Цикл
			СтрокаТаблицы[МетаданныеРесурса.Имя] = -СтрокаТаблицы[МетаданныеРесурса.Имя];
		КонецЦикла;
		
	КонецЦикла;
	
	Попытка
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтруктураПараметров.ДокументДвижений);
		НаборЗаписей.Загрузить(ТаблицаРегистра);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	Исключение
		ДобавитьОшибкуПользователю(Ошибки, , "Не удалось записать регистр накопления "+ИмяРегистра+" по причине:"+Символы.ПС+ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// Процедуры переноса документов 

Процедура ПеренестиДокументыРасчетов(ТаблицаРегистра, СтруктураПараметров, Отказ, Ошибки)
	
	//КонстантаИзменена1 = Ложь;
	//КонстантаИзменена2 = Ложь;
	//Если Не  Константы.абс_ОтключитьКонтрольДляДоговоров.Получить() Тогда 
	//	Константы.абс_ОтключитьКонтрольДляДоговоров.Установить(Истина);
	//	КонстантаИзменена1 = Истина;
	//КонецЕсли;	
	//
	//Если Не Константы.абс_ОтключитьПроверкуУправленческихАналитик.Получить() Тогда 
	//	Константы.абс_ОтключитьПроверкуУправленческихАналитик.Установить(Истина);
	//	КонстантаИзменена2 = Истина;
	//КонецЕсли;	
	//
	
	мИменаКолонокДокументов = Новый Массив;
	мИменаКолонокДокументов.Добавить("Сделка");
	мИменаКолонокДокументов.Добавить("Документ");
	мИменаКолонокДокументов.Добавить("ДокументРасчетовСКонтрагентом");
	мИменаКолонокДокументов.Добавить("ДокументПередачи");
	мИменаКолонокДокументов.Добавить("ДокументДвижения");
	мИменаКолонокДокументов.Добавить("ДокументОприходования");
	мИменаКолонокДокументов.Добавить("Заказ");
	мИменаКолонокДокументов.Добавить("абс_ЗаказПроект");
	мИменаКолонокДокументов.Добавить("СчетФактура");
	мИменаКолонокДокументов.Добавить("ИсправленныйСчетФактура");
	мИменаКолонокДокументов.Добавить("ДокументОплаты");
	//мИменаКолонокДокументов.Добавить("");
	//мИменаКолонокДокументов.Добавить("");
	
	
	КолонкиТаблицы = ТаблицаРегистра.Колонки;
	Для каждого Колонка Из КолонкиТаблицы Цикл
		КолонкаСодержитДокумент = Не мИменаКолонокДокументов.Найти(Колонка.Имя) = Неопределено;
		Если КолонкаСодержитДокумент Тогда 
			ПерезаполнитьДокументы(ТаблицаРегистра, Колонка.Имя, СтруктураПараметров, Отказ, Ошибки);
		КонецЕсли;
	КонецЦикла;
	
	//Если КонстантаИзменена1 Тогда 
	//	Константы.абс_ОтключитьКонтрольДляДоговоров.Установить(Ложь);
	//КонецЕсли;	
	//
	//Если КонстантаИзменена2 Тогда 
	//	Константы.абс_ОтключитьПроверкуУправленческихАналитик.Установить(Ложь);
	//КонецЕсли;	
	
КонецПроцедуры

Процедура ПерезаполнитьДокументы(ТаблицаРегистра, ИмяКолонки, СтруктураПараметров, Отказ, Ошибки)
	
	Для каждого СтрокаТаб Из ТаблицаРегистра Цикл
		ОбъектДЗО = СтрокаТаб[ИмяКолонки]; 
		Если Не ЗначениеЗаполнено(ОбъектДЗО) Тогда 
			Продолжить;
		КонецЕсли;
		МетаданныеДокумента = ОбъектДЗО.Метаданные();
		Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеДокумента) Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
		Если ОбъектФилиала=Неопределено Тогда
			ОбъектФилиала = ПолучитьДокумент(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);						
		КонецЕсли;
		СтрокаТаб[ИмяКолонки] = ОбъектФилиала;
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьДокумент(Источник, СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	
	МетаданныеДокумента = Источник.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Организация")=Неопределено Тогда
		Возврат Источник;
	КонецЕсли;
	
	Если Источник.Организация<>СтруктураПараметров.ДЗО Тогда
		Возврат Источник;
	КонецЕсли;
	
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.абс_СчетНаОплату") Тогда 
		Приемник = СкопироватьСчетНаОплату(Источник, МетаданныеДокумента, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.абс_ЗакупочныйЗаказ") Тогда 
		Приемник = СкопироватьЗакупочныйЗаказ(Источник, МетаданныеДокумента,СтруктураПараметров, Отказ, Ошибки);
	Иначе	
		МенеджерДокумента = Документы[МетаданныеДокумента.Имя];
		ПриемникОбъект = МенеджерДокумента.СоздатьДокумент();
		ПриемникОбъект.Дата = Источник.Дата;
		ПриемникОбъект.Организация = СтруктураПараметров.Филиал;
		//ПриемникОбъект.ПометкаУдаления = Истина;
		ПриемникОбъект.Проведен = Ложь;
		ПриемникОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуЗаполненияРеквизитов", Истина);
		ПриемникОбъект.ОбменДанными.Загрузка = Истина;
		
		Если ТипЗнч(Источник) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Если Источник.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда 
				ПриемникОбъект.Номер = Источник.Номер; 
			Иначе
				Если Лев(Источник.Номер, 3)=СтруктураПараметров.ДЗО.Префикс Тогда
					ПриемникОбъект.Номер = СтруктураПараметров.Филиал.Префикс+Сред(Источник.Номер, 4);
				Иначе
					ПриемникОбъект.УстановитьНовыйНомер();
				КонецЕсли;	
			КонецЕсли;	
		Иначе
			Если Лев(Источник.Номер, 3)=СтруктураПараметров.ДЗО.Префикс Тогда
				ПриемникОбъект.Номер = СтруктураПараметров.Филиал.Префикс+Сред(Источник.Номер, 4);
			Иначе
				ПриемникОбъект.УстановитьНовыйНомер();
			КонецЕсли;						
		КонецЕсли;
		
		ПриемникОбъект.Записать();
		
		Приемник = ПриемникОбъект.Ссылка;
		
		ДобавитьСоответствиеОбъектов(Источник, Приемник, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
		
		ПриемникОбъект = Приемник.ПолучитьОбъект();
		СкопироватьРеквизитыОбъекта(Источник, ПриемникОбъект, СтруктураПараметров, Отказ, Ошибки);
		ПриемникОбъект.Проведен = Ложь;
		ПриемникОбъект.ПометкаУдаления = Источник.ПометкаУдаления;
		ПриемникОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуЗаполненияРеквизитов", Истина);
		ПриемникОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ПриемникОбъект.Записать();
		Исключение
			Сообщить("Не удалось записать документ - "+Приемник);			
		КонецПопытки;                                             
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

Функция СкопироватьСчетНаОплату(Источник, МетаданныеДокумента, СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	ОрганизацияПриемник = СтруктураПараметров.Филиал;
	ПриемникОбъект = Документы.абс_СчетНаОплату.СоздатьДокумент();
	
	ПриемникОбъект.Дата = Источник.Дата;
	ПриемникОбъект.Номер = ОрганизацияПриемник.Префикс+Сред(Источник.Номер, 4);
	ПриемникОбъект.Организация = ОрганизацияПриемник;
	ПриемникОбъект.Контрагент = Источник.Контрагент;
	ПриемникОбъект.ДоговорКонтрагента = ПолучитьОбъектФилиала(Источник.ДоговорКонтрагента, СтруктураПараметров, Отказ, Ошибки);
	ПриемникОбъект.ЦФО = Источник.ЦФО;
	ПриемникОбъект.ЦФУ = Источник.ЦФУ;
	ПриемникОбъект.БюджетнаяСтатья = Источник.БюджетнаяСтатья;
	ПриемникОбъект.СтатьяДвиженияДенежныхСредств = Источник.СтатьяДвиженияДенежныхСредств;
	ПриемникОбъект.ТипКонтрагента = Источник.Контрагент.абс_ТипыКонтрагентов;
	ПриемникОбъект.ВидОперации = ?(Источник.ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПустаяСсылка(),
				Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств, Источник.ВидОперации);
	ПриемникОбъект.ПометкаУдаления = Источник.ПометкаУдаления;
	ПриемникОбъект.Проведен = Ложь;
	ПриемникОбъект.Оплаты.Очистить();
	ПриемникОбъект.Менеджеры.Очистить();
	ПриемникОбъект.РаспределениеПоПроектам.Очистить();
	
	ДоговорСсылка = ПриемникОбъект.ДоговорКонтрагента;
	ТекущийСтатусДоговора = ДоговорСсылка.абс_СтатусДоговора;
	НужноВернутьСтатус = Ложь;
	Если Не ТекущийСтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение Тогда 
		ДоговорОбъект = ДоговорСсылка.ПолучитьОбъект();
		ДоговорОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение;
		ДоговорОбъект.ОбменДанными.Загрузка = Истина;
		ДоговорОбъект.Записать();
		НужноВернутьСтатус = Истина;
	КонецЕсли;	
	
	
	ПриемникОбъект.ОбменДанными.Загрузка = Истина;
	ПриемникОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуЗаполненияРеквизитов", Истина);
	ПриемникОбъект.Записать();
	ДобавитьСоответствиеОбъектов(Источник, ПриемникОбъект.Ссылка, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
	Попытка
		ПриемникОбъект.Проведен = Ложь;
		СкопироватьРеквизитыОбъекта(Источник, ПриемникОбъект, СтруктураПараметров, Отказ, Ошибки);
		ПриемникОбъект.ПометкаУдаления = Источник.ПометкаУдаления;
		ПриемникОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуЗаполненияРеквизитов", Истина);
		ПриемникОбъект.ОбменДанными.Загрузка = Истина;
		ПриемникОбъект.Записать();
	Исключение
		Сообщить("Не удалось записать документ - "+ПриемникОбъект.Ссылка);
	КонецПопытки;
	
	Если НужноВернутьСтатус Тогда 
		ДоговорОбъект.абс_СтатусДоговора = ТекущийСтатусДоговора;
		ДоговорОбъект.ОбменДанными.Загрузка = Истина;
		ДоговорОбъект.Записать();
	КонецЕсли;	
	
	
	Возврат ПриемникОбъект.Ссылка;
	
КонецФункции

Функция СкопироватьЗакупочныйЗаказ(Источник, МетаданныеДокумента, СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	ОрганизацияПриемник = СтруктураПараметров.Филиал;
	ПриемникОбъект = Документы.абс_ЗакупочныйЗаказ.СоздатьДокумент();
	
	ПриемникОбъект.Дата = Источник.Дата;
	ПриемникОбъект.Организация = ОрганизацияПриемник;
	ПриемникОбъект.ПометкаУдаления = Истина;
	ПриемникОбъект.Проведен = Ложь;
	ПриемникОбъект.ОбменДанными.Загрузка = Истина;
	ПриемникОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуЗаполненияРеквизитов", Истина);
	ПриемникОбъект.УстановитьНовыйНомер(Прав(Строка(Год(Источник.Дата)), 2)+Строка(Месяц(Источник.Дата)));
	ПриемникОбъект.Записать();
	
	Приемник = ПриемникОбъект.Ссылка;
	ДобавитьСоответствиеОбъектов(Источник, Приемник, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
	
	ПриемникОбъект = Приемник.ПолучитьОбъект();
	СкопироватьРеквизитыОбъекта(Источник, ПриемникОбъект, СтруктураПараметров, Отказ, Ошибки);
	ПриемникОбъект.Проведен = Ложь;
	ПриемникОбъект.ПометкаУдаления = Источник.ПометкаУдаления;
	ПриемникОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуЗаполненияРеквизитов", Истина);
	ПриемникОбъект.ОбменДанными.Загрузка = Истина;
	Попытка
		ПриемникОбъект.Записать();
	Исключение
		Сообщить("Не удалось записать документ - "+Приемник);			
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Процедура СкопироватьРеквизитыОбъекта(Источник, ПриемникОбъект, СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	МетаданныеОбъекта = Источник.Метаданные();  
	ИсхходныйОбъектДокумент = Ложь;
	
	Если МетаданныеОбъекта <> Неопределено Тогда  
		ИсхходныйОбъектДокумент = ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта);
	КонецЕсли;
	
	Для Каждого МетаданныеРеквизита Из МетаданныеОбъекта.Реквизиты Цикл
		ЭтоДокумент = Ложь;
		ЗначениеРеквизита = Источник[МетаданныеРеквизита.Имя]; 
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
			Продолжить;
		КонецЕсли;	
		Если ТипЗнч(ЗначениеРеквизита) = Тип("ДокументСсылка.абс_Оплата") Тогда
			Продолжить;
		КонецЕсли;	
		
		МетаданныеЗначение = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
		Если Не МетаданныеЗначение = Неопределено Тогда 
			Если ОбщегоНазначения.ЭтоДокумент(МетаданныеЗначение) Тогда 		
				ЭтоДокумент = Истина;
			КонецЕсли;	
		КонецЕсли;	
			
		Если ЭтоДокумент Тогда 
			ОбъектФилиала = ПолучитьОбъектПоСоответствию(ЗначениеРеквизита, "ДокументСсылка."+МетаданныеЗначение.Имя, СтруктураПараметров);
			Если ОбъектФилиала=Неопределено Тогда
				ОбъектФилиала = ПолучитьДокумент(ЗначениеРеквизита, СтруктураПараметров, Отказ, Ошибки);						
			КонецЕсли;
		ИначеЕсли ИсхходныйОбъектДокумент И ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда  
			ОбъектФилиала = ПолучитьОбъектФилиала(ЗначениеРеквизита, СтруктураПараметров, Ложь, Неопределено);
		ИначеЕсли ИсхходныйОбъектДокумент И ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда  
			ОбъектФилиала = ПолучитьОбъектФилиала(ЗначениеРеквизита, СтруктураПараметров, Ложь, Неопределено);
		Иначе
			ОбъектФилиала = ПолучитьОбъектФилиала(ЗначениеРеквизита, СтруктураПараметров, Отказ, Ошибки);
		КонецЕсли;
		ПриемникОбъект[МетаданныеРеквизита.Имя] = ОбъектФилиала;
	КонецЦикла;
	
	Для Каждого МетаданныеТабличнойЧасти Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		ТЧПриемника = ПриемникОбъект[МетаданныеТабличнойЧасти.Имя];
		ТЧПриемника.Загрузить(Источник[МетаданныеТабличнойЧасти.Имя].Выгрузить());
		Для Каждого Колонка Из МетаданныеТабличнойЧасти.Реквизиты Цикл
			Для Каждого СтрокаТЧ Из ТЧПриемника Цикл
				
				ЭтоДокумент = Ложь;
				ЗначениеРеквизита = СтрокаТЧ[Колонка.Имя]; 
				Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
					Продолжить;
				КонецЕсли;	
				Если ТипЗнч(ЗначениеРеквизита) = Тип("ДокументСсылка.абс_Оплата") Тогда
					Продолжить;
				КонецЕсли;	
				
				МетаданныеЗначение = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если Не МетаданныеЗначение = Неопределено Тогда 
					Если ОбщегоНазначения.ЭтоДокумент(МетаданныеЗначение) Тогда 		
						ЭтоДокумент = Истина;
					КонецЕсли;	
				КонецЕсли;	
				
				Если ЭтоДокумент Тогда 
					ОбъектФилиала = ПолучитьОбъектПоСоответствию(ЗначениеРеквизита, "ДокументСсылка."+МетаданныеЗначение.Имя, СтруктураПараметров);
					Если ОбъектФилиала=Неопределено Тогда
						ОбъектФилиала = ПолучитьДокумент(ЗначениеРеквизита, СтруктураПараметров, Отказ, Ошибки);						
					КонецЕсли;
				ИначеЕсли ИсхходныйОбъектДокумент И ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда  
					ОбъектФилиала = ПолучитьОбъектФилиала(ЗначениеРеквизита, СтруктураПараметров, Ложь, Неопределено);
				ИначеЕсли ИсхходныйОбъектДокумент И ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда  
					ОбъектФилиала = ПолучитьОбъектФилиала(ЗначениеРеквизита, СтруктураПараметров, Ложь, Неопределено);	
				Иначе
					ОбъектФилиала = ПолучитьОбъектФилиала(ЗначениеРеквизита, СтруктураПараметров, Отказ, Ошибки);
				КонецЕсли;
				СтрокаТЧ[Колонка.Имя] = ОбъектФилиала;
				//СтрокаТЧ[Колонка.Имя] = ПолучитьОбъектФилиала(СтрокаТЧ[Колонка.Имя], СтруктураПараметров, Отказ, Ошибки);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументыФилиала(МассивДокументов, СтруктураПараметров, РаспровестиИсточник = Ложь) Экспорт 
	
	//КонстантаИзменена1 = Ложь;
	//КонстантаИзменена2 = Ложь;
	//Если Не  Константы.абс_ОтключитьКонтрольДляДоговоров.Получить() Тогда 
	//	Константы.абс_ОтключитьКонтрольДляДоговоров.Установить(Истина);
	//	КонстантаИзменена1 = Истина;
	//КонецЕсли;	
	//
	//Если Не Константы.абс_ОтключитьПроверкуУправленческихАналитик.Получить() Тогда 
	//	Константы.абс_ОтключитьПроверкуУправленческихАналитик.Установить(Истина);
	//	КонстантаИзменена2 = Истина;
	//КонецЕсли;
	
	ВсегоДокументов = МассивДокументов.Количество();
	Сч = 1;
	Для каждого Элемент Из МассивДокументов Цикл
		#Если НаКлиенте Тогда
			Состояние("Обработано " +Сч + " документов из " +ВсегоДокументов);
		#КонецЕсли
		Сч=Сч+1;
		Если Не ЗначениеЗаполнено(Элемент) Тогда 
			Продолжить;
		КонецЕсли;
		МетаданныеДокумента = Элемент.Метаданные();
		Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеДокумента) Тогда 
			Продолжить;
		КонецЕсли;
		Если МетаданныеДокумента.Реквизиты.Найти("Организация")=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Элемент.Организация<>СтруктураПараметров.ДЗО Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектФилиала = ПолучитьОбъектПоСоответствию(Элемент, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
		Если ОбъектФилиала=Неопределено Тогда
			ОбъектФилиала = ПолучитьДокумент(Элемент, СтруктураПараметров, Ложь, Неопределено);						
		КонецЕсли;	
		Если РаспровестиИсточник Тогда 
			ИсточникОбъект = Элемент.ПолучитьОбъект();
			Если ИсточникОбъект.Проведен Тогда   
				ИсточникОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	//Если КонстантаИзменена1 Тогда 
	//	Константы.абс_ОтключитьКонтрольДляДоговоров.Установить(Ложь);
	//КонецЕсли;	
	//
	//Если КонстантаИзменена2 Тогда 
	//	Константы.абс_ОтключитьПроверкуУправленческихАналитик.Установить(Ложь);
	//КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьДокументыДляСчетаКВ(ТаблицаРегистра, СчетКВ, СтруктураПараметров, Отказ, Ошибки)
	
	Для каждого СтрокаТЗ Из ТаблицаРегистра Цикл
		СчетДтКВ = СтрокаТЗ.СчетДт = СчетКВ;
		СчетКтКВ = СтрокаТЗ.СчетКт = СчетКВ;
		Если СчетДтКВ Тогда 
			Если Не СтрокаТЗ.ВидСубконтоДт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии Тогда 
				Продолжить;
			КонецЕсли;	
			ОбъектДЗО = СтрокаТЗ.СубконтоДт2;
			Если Не ЗначениеЗаполнено(ОбъектДЗО) Тогда 
				Продолжить;
			КонецЕсли;
			МетаданныеДокумента = ОбъектДЗО.Метаданные();
			Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеДокумента) Тогда 
				Продолжить;
			КонецЕсли;
			ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
			Если ОбъектФилиала=Неопределено Тогда
				ОбъектФилиала = ПолучитьДокумент(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);						
			КонецЕсли;
			СтрокаТЗ.СубконтоДт2 = ОбъектФилиала;
			
		ИначеЕсли СчетКтКВ Тогда 
			Если Не СтрокаТЗ.ВидСубконтоКт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии Тогда 
				Продолжить;
			КонецЕсли;
			ОбъектДЗО = СтрокаТЗ.СубконтоКт2;
			Если Не ЗначениеЗаполнено(ОбъектДЗО) Тогда 
				Продолжить;
			КонецЕсли;
			МетаданныеДокумента = ОбъектДЗО.Метаданные();
			Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеДокумента) Тогда 
				Продолжить;
			КонецЕсли;
			ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
			Если ОбъектФилиала=Неопределено Тогда
				ОбъектФилиала = ПолучитьДокумент(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);						
			КонецЕсли;
			СтрокаТЗ.СубконтоКт2 = ОбъектФилиала;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры




///////////////////////////////////////////////////////////////////////////
// Процедуры получения объектов филиала по соответствиям

Функция ПолучитьОбъектФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектДЗО) Тогда
		Возврат ОбъектДЗО;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(ОбъектДЗО);
	
	Если ТипОбъекта=Тип("Строка") Или ТипОбъекта=Тип("Число") Или ТипОбъекта=Тип("Дата") Тогда
		Возврат ОбъектДЗО;
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.Организации") Тогда
		Если ОбъектДЗО=СтруктураПараметров.ДЗО Тогда
			Возврат СтруктураПараметров.Филиал;
		Иначе
			Возврат ОбъектДЗО;
		КонецЕсли;
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Возврат ПолучитьПодразделениеОрганизацииФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.абс_ОбособленныеПодразделения") Тогда
		Возврат ПолучитьОбособленноеПодразделение(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Возврат ПолучитьОсновноеСредствоФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации") Тогда
		Возврат ПолучитьСпособОтраженияРасходовПоАмортизацииФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.Склады") Тогда
		Возврат ПолучитьСкладФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Возврат ПолучитьБанковскийСчетФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.Кассы") Тогда
		Возврат ПолучитьКассуФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.НематериальныеАктивы") Тогда
		Возврат ПолучитьНМАФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.СобытияОС") И ОбъектДЗО.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету Тогда
		Возврат Справочники.СобытияОС.ПринятиеКУчету_ПереданоИзГоловногоПодразделенияПриРеорганизации;	
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.СобытияОС") И ОбъектДЗО.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию Тогда
		Возврат Справочники.СобытияОС.ВводВЭксплуатацию_ПереданоИзГоловногоПодразделенияПриРеорганизации;	
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
		Возврат ПолучитьРБПФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Возврат ПолучитьДоговорФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
		Возврат ПолучитьОбъектСтроительстваФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		Возврат ПолучитьНоменклатурнуюГруппуФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		Возврат Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ТД244");	
	ИначеЕсли ТипОбъекта=Тип("СправочникСсылка.АБС_ОСАрендованные") Тогда
		Возврат ПолучитьОСАрендованноеФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки);	
	КонецЕсли;
	
	// объект остается без изменений
	Возврат ОбъектДЗО;
	
КонецФункции

Процедура ЗаменитьОбъектыДЗОНаОбъектыФилиалаПоТаблице(ТаблицаДанных, СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	Колонки = ТаблицаДанных.Колонки;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Для Каждого Колонка Из Колонки Цикл
			СтрокаТаблицы[Колонка.Имя] = ПолучитьОбъектФилиала(СтрокаТаблицы[Колонка.Имя], СтруктураПараметров, Отказ, Ошибки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПодразделениеОрганизацииФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.ПодразделенияОрганизаций", СтруктураПараметров);
	Если ОбъектФилиала=Неопределено Тогда
		ДобавитьОшибкуПользователю(Ошибки, "", "Отсутствует соответствие для подразделения организации " + ОбъектДЗО + "<" + ОбъектДЗО.Код + ">");
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ОбъектФилиала;
	
КонецФункции

Функция ПолучитьОбособленноеПодразделение(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки)
	
	Если ОбъектДЗО.ГоловнаяОрганизация <> СтруктураПараметров.ДЗО Тогда 
		Возврат ОбъектДЗО;
	КонецЕсли;
	
	ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.абс_ОбособленныеПодразделения", СтруктураПараметров);
	Если ОбъектФилиала=Неопределено Тогда
		ДобавитьОшибкуПользователю(Ошибки, "", "Отсутствует соответствие для обособленного подразделения "+ОбъектДЗО);
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ОбъектФилиала;
	
КонецФункции

Функция ПолучитьОсновноеСредствоФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки)
	
	ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.ОсновныеСредства", СтруктураПараметров);
	
	Если ОбъектФилиала=Неопределено Тогда
		
		Если ОбъектДЗО.ПолучитьОбъект() = Неопределено Тогда
			ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось создать основное средство, соответствующее ОС "+ОбъектДЗО.Код+" "+ОбъектДЗО.Наименование+" по причине:"+Символы.ПС+ОписаниеОшибки());
			Отказ = Истина;
		Иначе
			Попытка
				ОСФилиала = ОбъектДЗО.Скопировать();
				ОСФилиала.абс_Префикс = "МСК";
				ОСФилиала.абс_ОбособленноеПодразделение = ПолучитьОбъектФилиала(ОбъектДЗО.абс_ОбособленноеПодразделение, СтруктураПараметров, Отказ, Ошибки);
				ОСФилиала.Родитель = ПолучитьПодгруппуОС(СтруктураПараметров.НастройкиФилиала.ГруппаОС, ОбъектДЗО.ГруппаОС);
				ОСФилиала.абс_ОсновноеСредствоИсточник = ОбъектДЗО;
				ОСФилиала.СтарыйИнвентарныйНомер = ОбъектДЗО.Код;
				
				Если НЕ (ОСФилиала.ГруппаОС = Перечисления.ГруппыОС.Здания 
					ИЛИ ОСФилиала.ГруппаОС = Перечисления.ГруппыОС.Сооружения
					ИЛИ ОСФилиала.ГруппаОС = Перечисления.ГруппыОС.МноголетниеНасаждения
					ИЛИ ОСФилиала.ГруппаОС = Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации) Тогда  
					ОСФилиала.абс_УчаствуетВРасчетеНалогаНаИмущество = Ложь;
				КонецЕсли;
						
				ОСФилиала.НомерПриказа = ПолучитьНомерПриказа(СтруктураПараметров);
				ОСФилиала.ОбменДанными.Загрузка = Истина;
				ОСФилиала.Записать();
				
				ОбъектФилиала = ОСФилиала.Ссылка;
				ДобавитьСоответствиеОбъектов(ОбъектДЗО, ОбъектФилиала, "СправочникСсылка.ОсновныеСредства", СтруктураПараметров);
				ДобавитьЗаписьВРегистрАБСИсторияИзмененияОбособленныхПодразделенийОС(ОбъектФилиала, ОСФилиала.абс_ОбособленноеПодразделение, СтруктураПараметров.ДатаПереноса);
			Исключение
				ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось создать основное средство, соответствующее ОС "+ОбъектДЗО.Код+" "+ОбъектДЗО.Наименование+" по причине:"+Символы.ПС+ОписаниеОшибки());
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектФилиала;
	
КонецФункции

Функция ПолучитьДоговорФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки)
	
	Если ОбъектДЗО.Организация = СтруктураПараметров.Филиал Тогда
		Возврат ОбъектДЗО;
	КонецЕсли;
	
	ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.ДоговорыКонтрагентов", СтруктураПараметров);
	
	Если ОбъектФилиала=Неопределено Тогда
		Попытка
			ДоговорФилиала = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ДоговорФилиала, ОбъектДЗО, , "ЭтоГруппа, ПометкаУдаления, Код, Организация, абс_Ответственный, абс_СотрудникДопСогласование, абс_ОтветственныйПД, абс_ОсновнойДоговор, абс_ДЗО, абс_Агент, абс_ВстречныйДоговор, абс_ДоходныйДоговор, абс_ОснованиеДоговорСКТТК");
			ДоговорФилиала.Организация = СтруктураПараметров.Филиал;
			ДоговорФилиала.ОбменДанными.Загрузка = Истина;
			ДоговорФилиала.Записать();
			
			ДоговорФилиала.абс_Ответственный = ОбъектДЗО.абс_Ответственный;
			ДоговорФилиала.абс_СотрудникДопСогласование = ОбъектДЗО.абс_СотрудникДопСогласование;
			ДоговорФилиала.абс_ОтветственныйПД = ОбъектДЗО.абс_ОтветственныйПД;
			ДоговорФилиала.абс_ДЗО = ?(ОбъектДЗО.абс_ДЗО=СтруктураПараметров.ДЗО, СтруктураПараметров.Филиал, ОбъектДЗО.абс_ДЗО);
			ДоговорФилиала.абс_Агент = ?(ОбъектДЗО.абс_ДЗО=СтруктураПараметров.ДЗО, СтруктураПараметров.Филиал, ОбъектДЗО.абс_Агент);
			ДоговорФилиала.абс_ВстречныйДоговор = ОбъектДЗО.абс_ВстречныйДоговор;
			ДоговорФилиала.абс_ДоходныйДоговор = ОбъектДЗО.абс_ДоходныйДоговор;
			ДоговорФилиала.абс_ОснованиеДоговорСКТТК = ОбъектДЗО.абс_ОснованиеДоговорСКТТК;
			ДоговорФилиала.УстановитьНовыйКод();
			ДоговорФилиала.ОбменДанными.Загрузка = Истина;
			ДоговорФилиала.Записать();
			
			ОбъектФилиала = ДоговорФилиала.Ссылка;
			
			//ПеренестиВложения(ОбъектДЗО, ОбъектФилиала);
			ПеренестиИсториюСогласованияДоговоровКонтрагентов(ОбъектДЗО, ОбъектФилиала);
			ДобавитьСоответствиеОбъектов(ОбъектДЗО, ОбъектФилиала, "СправочникСсылка.ДоговорыКонтрагентов", СтруктураПараметров);
			
		Исключение
			ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось создать договор контрагента, соответствующий "+ОбъектДЗО+" "+" по причине:"+Символы.ПС+ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОбъектФилиала;
	
КонецФункции

Функция ПолучитьНМАФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки)
	
	ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.НематериальныеАктивы", СтруктураПараметров);
	
	Если ОбъектФилиала=Неопределено Тогда
		
		Попытка
			НМАФилиала = ОбъектДЗО.Скопировать();
			НМАФилиала.Родитель = СтруктураПараметров.НастройкиФилиала.ГруппаНМА;
			НМАФилиала.Код = ОбъектДЗО.Код; 
			НМАФилиала.ОбменДанными.Загрузка = Истина;
			НМАФилиала.Записать();
			
			ОбъектФилиала = НМАФилиала.Ссылка;
			
			ДобавитьСоответствиеОбъектов(ОбъектДЗО, ОбъектФилиала, "СправочникСсылка.НематериальныеАктивы", СтруктураПараметров);
			
		Исключение
			ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось создать НМА, соответствующее "+ОбъектДЗО.Код+" "+ОбъектДЗО.Наименование+" по причине:"+Символы.ПС+ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОбъектФилиала;
	
КонецФункции

Функция ПолучитьПодгруппуОС(ГруппаСправочника, ГруппаОС)
	
	Если Не ЗначениеЗаполнено(ГруппаОС) Тогда
		Возврат ГруппаСправочника;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Родитель = &Родитель
	|	И ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.ЭтоГруппа");
	Запрос.УстановитьПараметр("Родитель", ГруппаСправочника);
	Запрос.УстановитьПараметр("Наименование", Строка(ГруппаОС));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		ГруппаОбъект = Справочники.ОсновныеСредства.СоздатьГруппу();
		ГруппаОбъект.абс_Префикс = "МСК";
		ГруппаОбъект.Наименование = Строка(ГруппаОС);
		ГруппаОбъект.Родитель = ГруппаСправочника;
		ГруппаОбъект.Записать();
		Возврат ГруппаОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСпособОтраженияРасходовПоАмортизацииФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки)
	
	ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.СпособыОтраженияРасходовПоАмортизации", СтруктураПараметров);
	Если ОбъектФилиала=Неопределено Тогда
		КТТК = Справочники.Организации.НайтиПоКоду("000000001");
		Если ОбъектДЗО.Организация = КТТК Тогда 
			Возврат ОбъектДЗО;
		Иначе	
			ДобавитьОшибкуПользователю(Ошибки, "", "Отсутствует соответствие для способа отражения расходов по амортизации "+ОбъектДЗО);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектФилиала;
	
КонецФункции

Функция ПолучитьСкладФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки)
	
	ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.Склады", СтруктураПараметров);
	Если ОбъектФилиала=Неопределено Тогда
		ДобавитьОшибкуПользователю(Ошибки, "", "Отсутствует соответствие для склада " + ОбъектДЗО + "<" + ОбъектДЗО.Код + ">");
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ОбъектФилиала;
	
КонецФункции

Функция ПолучитьБанковскийСчетФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки)
	
	Если ТипЗнч(ОбъектДЗО.Владелец)=Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат ОбъектДЗО;
	КонецЕсли;
	
	Если ОбъектДЗО.Владелец=СтруктураПараметров.ДЗО Тогда
		
		ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.БанковскиеСчета", СтруктураПараметров);
		Если ОбъектФилиала=Неопределено Тогда
			Попытка
				СчетФилиала = ОбъектДЗО.Скопировать();
				СчетФилиала.Владелец = СтруктураПараметров.Филиал;
				СчетФилиала.УстановитьНовыйКод();
				СчетФилиала.ОбменДанными.Загрузка = Истина;
				СчетФилиала.Записать();
				
				ОбъектФилиала = СчетФилиала.Ссылка;
				
				ДобавитьСоответствиеОбъектов(ОбъектДЗО, ОбъектФилиала, "СправочникСсылка.БанковскиеСчета", СтруктураПараметров);
			Исключение
				ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось создать банковский счет, соответствующий "+ОбъектДЗО);
				Отказ = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат ОбъектФилиала;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКассуФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки)
	
	Если ТипЗнч(ОбъектДЗО.Владелец)=Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат ОбъектДЗО;
	КонецЕсли;
	
	Если ОбъектДЗО.Владелец=СтруктураПараметров.ДЗО Тогда
		
		ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.Кассы", СтруктураПараметров);
		Если ОбъектФилиала=Неопределено Тогда
			Попытка
				КассаФилиала = ОбъектДЗО.Скопировать();
				КассаФилиала.Владелец = СтруктураПараметров.Филиал;
				КассаФилиала.УстановитьНовыйКод();
				КассаФилиала.ОбменДанными.Загрузка = Истина;
				КассаФилиала.Записать();
				
				ОбъектФилиала = КассаФилиала.Ссылка;
				
				ДобавитьСоответствиеОбъектов(ОбъектДЗО, ОбъектФилиала, "СправочникСсылка.Кассы", СтруктураПараметров);
			Исключение
				ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось создать кассу организации, соответствующую "+ОбъектДЗО);
				Отказ = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат ОбъектФилиала;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРБПФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.РасходыБудущихПериодов", СтруктураПараметров);
	Если ОбъектФилиала=Неопределено Тогда
		Попытка
			РБПФилиала = ОбъектДЗО.Скопировать();
			РБПФилиала.Родитель = СтруктураПараметров.НастройкиФилиала.ГруппаРБП;
			РБПФилиала.ПодразделениеОрганизации = ПолучитьОбъектФилиала(ОбъектДЗО.ПодразделениеОрганизации, СтруктураПараметров, Отказ, Ошибки);
			РБПФилиала.УстановитьНовыйКод();
			РБПФилиала.Записать();
			ОбъектФилиала = РБПФилиала.Ссылка;
			ДобавитьСоответствиеОбъектов(ОбъектДЗО, ОбъектФилиала, "СправочникСсылка.РасходыБудущихПериодов", СтруктураПараметров);
		Исключение
			ДобавитьОшибкуПользователю(Ошибки, "", "Не удалось создать РБП, соответствующий  "+ОбъектДЗО);
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОбъектФилиала;
	
КонецФункции

Функция ПолучитьОбъектСтроительстваФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки)
	
	ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.ОбъектыСтроительства", СтруктураПараметров);
	Если ОбъектФилиала=Неопределено Тогда
		ДобавитьОшибкуПользователю(Ошибки, "", "Отсутствует соответствие для объекта строительства "+ОбъектДЗО);
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ОбъектФилиала;
	
КонецФункции

Функция ПолучитьНоменклатурнуюГруппуФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки)
	
	ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.НоменклатурныеГруппы", СтруктураПараметров);
	Если ОбъектФилиала=Неопределено Тогда
		Возврат ОбъектДЗО;
	КонецЕсли;
	
	Возврат ОбъектФилиала;
	
КонецФункции

Функция ПолучитьОСАрендованноеФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "СправочникСсылка.АБС_ОСАрендованные", СтруктураПараметров);
	Если ОбъектФилиала=Неопределено Тогда
		ОбъектФилиала = ОбъектДЗО;
	КонецЕсли;
	
	Возврат ОбъектФилиала;
	
КонецФункции

Процедура ДобавитьЗаписьВРегистрАБСИсторияИзмененияОбособленныхПодразделенийОС(ОС, ОбособленноеПодразделение, ДатаПереноса)

	НаборЗаписей = РегистрыСведений.абс_ИсторияИзмененияОбособленныхПодразделенийОС.СоздатьНаборЗаписей();
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ДатаПереноса;
	Запись.ОсновноеСредство = ОС;
	Запись.ОбособленноеПодразделение = ОбособленноеПодразделение;
	Попытка
		НаборЗаписей.Записать(Ложь);
	Исключение
		Возврат;
	КонецПопытки;	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с кэшем соответствий

Функция ПолучитьОбъектПоСоответствию(ОбъектДЗО, ИмяТипа, СтруктураПараметров) Экспорт
	
	Кэш = ПолучитьКэшСоответствий(СтруктураПараметров);
	
	СоответствиеОбъектов = Кэш.Получить(ИмяТипа);
	Если СоответствиеОбъектов=Неопределено Тогда
		СоответствиеОбъектов = ЗагрузитьСоответствиеОбъектов(ИмяТипа, СтруктураПараметров.ДЗО, СтруктураПараметров.Филиал);
		Кэш.Вставить(ИмяТипа, СоответствиеОбъектов);
	КонецЕсли;
	
	Возврат СоответствиеОбъектов.Получить(ОбъектДЗО);
	
КонецФункции

Процедура ДобавитьСоответствиеОбъектов(ОбъектДЗО, ОбъектФилиала, ИмяТипа, СтруктураПараметров) ЭКспорт
	
	Кэш = ПолучитьКэшСоответствий(СтруктураПараметров);
	СоответствиеОбъектов = Кэш.Получить(ИмяТипа);
	Если СоответствиеОбъектов=Неопределено Тогда
		СоответствиеОбъектов = Новый Соответствие;
		Кэш.Вставить(ИмяТипа, СоответствиеОбъектов);
	КонецЕсли;
	
	СоответствиеОбъектов.Вставить(ОбъектДЗО, ОбъектФилиала);
	
	Запись = РегистрыСведений.абс_СоответствияОбъектовПереноса.СоздатьМенеджерЗаписи();
	Запись.ОбъектИсточник = ОбъектДЗО;
	Запись.ОбъектПриемник = ОбъектФилиала;
	Запись.ОрганизацияИсточник = СтруктураПараметров.ДЗО;
	Запись.ОрганизацияПриемник = СтруктураПараметров.Филиал;
	Запись.ТипПриемник = ИмяТипа;
	Запись.Записать();
	
КонецПроцедуры

Функция ПолучитьКэшСоответствий(СтруктураПараметров) Экспорт
	
	Если Не СтруктураПараметров.Свойство("Кэш") Тогда
		СтруктураПараметров.Вставить("Кэш", Новый Соответствие);
		Кэш = СтруктураПараметров.Кэш;
		//Операция = СтруктураПараметров.Операция;
		ДЗО = СтруктураПараметров.ДЗО;
		Филиал = СтруктураПараметров.Филиал;
		
		//Для Каждого СтрокаСоответствия Из Операция.НеобходимыеМаппинги Цикл
		//	СоответствиеОбъектов = ЗагрузитьСоответствиеОбъектов(СтрокаСоответствия.Имя, ДЗО, Филиал);
		//	Кэш.Вставить(СтрокаСоответствия.Имя, СоответствиеОбъектов);
		//КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров.Кэш;
	
КонецФункции

Функция ЗагрузитьСоответствиеОбъектов(ИмяТипа, ДЗО, Филиал) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектИсточник,
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ТипПриемник = &ИмяТипа
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &Источник
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &Приемник");
	Запрос.УстановитьПараметр("ИмяТипа", ИмяТипа);
	Запрос.УстановитьПараметр("Источник", ДЗО);
	Запрос.УстановитьПараметр("Приемник", Филиал);
	
	СоответствиеОбъектов = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеОбъектов.Вставить(Выборка.ОбъектИсточник, Выборка.ОбъектПриемник);
	КонецЦикла;
	
	Возврат СоответствиеОбъектов;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции

Функция ТекстЗапросаРегистрНакопления(Знач ИмяРегистра, Знач ОтборПоОрганизации = Истина, Знач Отборы = "", Знач ВременнаяТаблица = Неопределено) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
	Если МетаданныеРегистра.Измерения.Найти("Организация")=Неопределено Или ИмяРегистра = "ПартииТоваровНаСкладах" Или ИмяРегистра = "ПартииТоваровПереданные" Тогда
		ОтборПоОрганизации = Ложь;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ";
	
	Для Каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
		
		ТекстЗапроса = ТекстЗапроса+"
		|	ДанныеРегистра."+МетаданныеИзмерения.Имя+" КАК "+МетаданныеИзмерения.Имя+",";
		
	КонецЦикла;
	
	Для Каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
		
		ТекстЗапроса = ТекстЗапроса+"
		|	ДанныеРегистра."+МетаданныеРесурса.Имя+"Остаток КАК "+МетаданныеРесурса.Имя+",";
		
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
	
	Если ВременнаяТаблица<>Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса+"
		|ПОМЕСТИТЬ "+ВременнаяТаблица;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|ИЗ РегистрНакопления."+ИмяРегистра+".Остатки(&Период, "+?(ОтборПоОрганизации, "Организация=&Организация", "")+?(Отборы="", "", ?(ОтборПоОрганизации, " И ", "")+Отборы)+") КАК ДанныеРегистра";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРегистрСведений(Знач ИмяРегистра, Знач ОтборПоОрганизации=Истина, Знач Отборы=Неопределено, Знач ВременнаяТаблица = Неопределено) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	Если МетаданныеРегистра.Измерения.Найти("Организация")=Неопределено Тогда
		ОтборПоОрганизации = Ложь;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ";
	
	Если МетаданныеРегистра.ПериодичностьРегистраСведений<>Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|	ДанныеРегистра.Период КАК Период,";                            
	КонецЕсли;
	
	Для Каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
		
		ТекстЗапроса = ТекстЗапроса+"
		|	ДанныеРегистра."+МетаданныеИзмерения.Имя+" КАК "+МетаданныеИзмерения.Имя+",";
		
	КонецЦикла;
	
	Для Каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
		
		ТекстЗапроса = ТекстЗапроса+"
		|	ДанныеРегистра."+МетаданныеРесурса.Имя+" КАК "+МетаданныеРесурса.Имя+",";
		
	КонецЦикла;
	
	Для Каждого МетаданныеРеквизита Из МетаданныеРегистра.Реквизиты Цикл
		
		ТекстЗапроса = ТекстЗапроса+"
		|	ДанныеРегистра."+МетаданныеРеквизита.Имя+" КАК "+МетаданныеРеквизита.Имя+",";
		
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
	
	Если ВременнаяТаблица<>Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса+"
		|ПОМЕСТИТЬ "+ВременнаяТаблица;
		
	КонецЕсли;
	Если МетаданныеРегистра.ПериодичностьРегистраСведений<>Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|ИЗ РегистрСведений."+ИмяРегистра+".СрезПоследних(&Период, "+?(ОтборПоОрганизации, "Организация=&Организация", "")+?(Отборы=Неопределено, "", ?(ОтборПоОрганизации, " И ", "")+Отборы)+") КАК ДанныеРегистра";
	Иначе
		ТекстЗапроса = ТекстЗапроса+"
		|ИЗ РегистрСведений."+ИмяРегистра+" КАК ДанныеРегистра"+Символы.ПС;
		Если ОтборПоОрганизации Или Отборы <> Неопределено Тогда 
			ТекстЗапроса = ТекстЗапроса + "ГДЕ" + Символы.ПС+
			?(ОтборПоОрганизации, "ДанныеРегистра.Организация = &Организация"+Символы.ПС,"");
			Если Отборы <> Неопределено Тогда 
				Если ОтборПоОрганизации Тогда
					ТекстЗапроса = ТекстЗапроса + " И " + Отборы; 
				Иначе
					ТекстЗапроса = ТекстЗапроса + Отборы;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРегистрБухгалтерии(Знач ИмяРегистра, Знач Отборы=Неопределено, Знач ВременнаяТаблица = Неопределено, Знач Индексы = Неопределено) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
	МетаданныеПланаСчетов = МетаданныеРегистра.ПланСчетов;
	ИмяПланаСчетов = МетаданныеПланаСчетов.Имя;
	МетаданныеПВХ = МетаданныеПланаСчетов.ВидыСубконто;
	ИмяПВХ = МетаданныеПВХ.Имя;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	"+ИмяРегистра+"Остатки.Счет,
	|	ЕСТЬNULL(ВидыСубконто1.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик."+ИмяПВХ+".ПустаяСсылка)) КАК ВидСубконто1,
	|	ЕСТЬNULL("+ИмяРегистра+"Остатки.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	|	ЕСТЬNULL(ВидыСубконто2.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик."+ИмяПВХ+".ПустаяСсылка)) КАК ВидСубконто2,
	|	ЕСТЬNULL("+ИмяРегистра+"Остатки.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
	|	ЕСТЬNULL(ВидыСубконто3.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик."+ИмяПВХ+".ПустаяСсылка)) КАК ВидСубконто3,
	|	ЕСТЬNULL("+ИмяРегистра+"Остатки.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3";
	
	Для Каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
		ТекстЗапроса = ТекстЗапроса+",
		|	"+ИмяРегистра+"Остатки."+МетаданныеИзмерения.Имя+" КАК "+МетаданныеИзмерения.Имя;
	КонецЦикла;
	
	Для Каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
		ТекстЗапроса = ТекстЗапроса+",
		|	"+ИмяРегистра+"Остатки."+МетаданныеРесурса.Имя+"ОстатокДт КАК "+МетаданныеРесурса.Имя+"ОстатокДт,
		|	"+ИмяРегистра+"Остатки."+МетаданныеРесурса.Имя+"ОстатокКт КАК "+МетаданныеРесурса.Имя+"ОстатокКт";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса+"
	|"+?(ВременнаяТаблица=Неопределено, "", "ПОМЕСТИТЬ "+ВременнаяТаблица)+"
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистра+".Остатки(&Период, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация=&Организация"+?(Отборы=Неопределено, "", " И "+Отборы)+") КАК "+ИмяРегистра+"Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов."+ИмяПланаСчетов+".ВидыСубконто КАК ВидыСубконто1
	|		ПО "+ИмяРегистра+"Остатки.Счет = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов."+ИмяПланаСчетов+".ВидыСубконто КАК ВидыСубконто2
	|		ПО "+ИмяРегистра+"Остатки.Счет = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов."+ИмяПланаСчетов+".ВидыСубконто КАК ВидыСубконто3
	|		ПО "+ИмяРегистра+"Остатки.Счет = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	|
	|"+?(Индексы=Неопределено Или ВременнаяТаблица=Неопределено, "", "
	|ИНДЕКСИРОВАТЬ ПО
	|	"+Индексы)+"
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьСтруктуруЗапросовОСиНМА() Экспорт
	
	СтруктураЗапросов = Новый Структура;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация,
	|	СостоянияОСОрганизаций.ДатаСостояния,
	|	СостоянияОСОрганизаций.Состояние,
	|	СостоянияОСОрганизаций.Регистратор
	|ПОМЕСТИТЬ ВТ_СостояниеОСОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.ДатаСостояния <= &ДатаПереноса
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СостояниеОСОрганизаций.ОсновноеСредство,
	|	ВТ_СостояниеОСОрганизаций.Организация КАК Организация,
	|	ВТ_СостояниеОСОрганизаций.ДатаСостояния,
	|	ВТ_СостояниеОСОрганизаций.Состояние,
	|	ВТ_СостояниеОСОрганизаций.Регистратор
	|ПОМЕСТИТЬ ВТ_СостояниеОСОрганизацийСрезПоследних
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_СостояниеОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|		ВТ_СостояниеОСОрганизаций.Организация КАК Организация,
	|		МАКСИМУМ(ВТ_СостояниеОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	|	ИЗ
	|		ВТ_СостояниеОСОрганизаций КАК ВТ_СостояниеОСОрганизаций
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_СостояниеОСОрганизаций.ОсновноеСредство,
	|		ВТ_СостояниеОСОрганизаций.Организация) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СостояниеОСОрганизаций КАК ВТ_СостояниеОСОрганизаций
	|		ПО ВложенныйЗапрос.ДатаСостояния = ВТ_СостояниеОСОрганизаций.ДатаСостояния
	|			И ВложенныйЗапрос.ОсновноеСредство = ВТ_СостояниеОСОрганизаций.ОсновноеСредство
	|			И ВложенныйЗапрос.Организация = ВТ_СостояниеОСОрганизаций.Организация
	|ГДЕ
	|	ВТ_СостояниеОСОрганизаций.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)";
	
	СтруктураЗапросов.Вставить("ВТ_СостояниеОСОрганизацийСрезПоследних", ТекстЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.Организация,
	|	СостоянияНМАОрганизацийСрезПоследних.Состояние,
	|	СостоянияНМАОрганизацийСрезПоследних.Регистратор,
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив,
	|	СостоянияНМАОрганизацийСрезПоследних.Период
	|ПОМЕСТИТЬ ВТ_СостояниеНМАОрганизацийСрезПоследних
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК СостоянияНМАОрганизацийСрезПоследних
	|ГДЕ
	|	СостоянияНМАОрганизацийСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)";
	
	СтруктураЗапросов.Вставить("ВТ_СостояниеНМАОрганизацийСрезПоследних", ТекстЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	абс_НастройкиСистемы.Значение КАК СобытиеОС
	|ПОМЕСТИТЬ ВТ_СобытиеОСОрганизацииИзНастроекСистемы
	|ИЗ
	|	РегистрСведений.абс_НастройкиСистемы КАК абс_НастройкиСистемы
	|ГДЕ
	|	абс_НастройкиСистемы.Организация = &Организация
	|	И абс_НастройкиСистемы.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.абс_НастройкиСистемы.СобытияОСОрганизаций)";
	
	СтруктураЗапросов.Вставить("ВТ_СобытиеОСОрганизацийИзНастроекСистемы", ТекстЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	КОНЕЦПЕРИОДА(&ДатаПереноса, ДЕНЬ) КАК Период,
	|	СостоянияОС.ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета) КАК Состояние,
	|	&ДатаПереноса КАК ДатаСостояния,
	|	&ДокументДвижений КАК Регистратор
	|ИЗ
	|	РегистрСведений.СостоянияОС КАК СостоянияОС
	|ГДЕ
	|	СостоянияОС.ДатаСостояния <= &ДатаПереноса
	|	И СостоянияОС.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|	И СостоянияОС.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				ВТ_СостояниеОСОрганизацийСрезПоследних.ОсновноеСредство
	|			ИЗ
	|				ВТ_СостояниеОСОрганизацийСрезПоследних КАК ВТ_СостояниеОСОрганизацийСрезПоследних)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОС.ОсновноеСредство";
	
	СтруктураЗапросов.Вставить("СостояниеОС_СнятиеСУчета", ТекстЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	КОНЕЦПЕРИОДА(&ДатаПереноса, ДЕНЬ) КАК Период,
	|	СостоянияОСОрганизаций.Организация,
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета) КАК Состояние,
	|	&ДатаПереноса КАК ДатаСостояния,
	|	&ДокументДвижений КАК Регистратор
	|ИЗ
	|	ВТ_СостояниеОСОрганизацийСрезПоследних КАК СостоянияОСОрганизаций
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСОрганизаций.Организация,
	|	СостоянияОСОрганизаций.ОсновноеСредство";
	
	СтруктураЗапросов.Вставить("СостояниеОСОрганизаций_СнятиеСУчета", ТекстЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	КОНЕЦПЕРИОДА(&ДатаПереноса, ДЕНЬ) КАК Период,
	|	СостоянияНМАОрганизаций.Организация,
	|	СостоянияНМАОрганизаций.НематериальныйАктив,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан) КАК Состояние,
	|	&ДокументДвижений КАК Регистратор
	|ИЗ
	|	ВТ_СостояниеНМАОрганизацийСрезПоследних КАК СостоянияНМАОрганизаций
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияНМАОрганизаций.Организация,
	|	СостоянияНМАОрганизаций.НематериальныйАктив";
	
	СтруктураЗапросов.Вставить("СостояниеНМАОрганизаций_СнятиеСУчета", ТекстЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	КОНЕЦПЕРИОДА(&ДатаПереноса, ДЕНЬ) КАК Период,
	|	СостояниеОСОрганизаций.Организация,
	|	СостояниеОСОрганизаций.ОсновноеСредство,
	|	ВТ_СобытиеОСОрганизацииИзНастроекСистемы.СобытиеОС КАК Событие,
	|	ПРЕДСТАВЛЕНИЕ(&ДокументДвижений) КАК НазваниеДокумента,
	|	&ДокументДвижений КАК Регистратор
	|ИЗ
	|	ВТ_СостояниеОСОрганизацийСрезПоследних КАК СостояниеОСОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СобытиеОСОрганизацииИзНастроекСистемы КАК ВТ_СобытиеОСОрганизацииИзНастроекСистемы
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостояниеОСОрганизаций.Организация,
	|	СостояниеОСОрганизаций.ОсновноеСредство,
	|	ВТ_СобытиеОСОрганизацииИзНастроекСистемы.СобытиеОС";
	
	СтруктураЗапросов.Вставить("СобытиеОСОрганизаций_Передача", ТекстЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	КОНЕЦПЕРИОДА(&ДатаПереноса, ДЕНЬ) КАК Период,
	|	НачислениеАмортизацииОС.Организация,
	|	НачислениеАмортизацииОС.ОсновноеСредство,
	|	ЛОЖЬ КАК НачислятьАмортизацию,
	|	ЛОЖЬ КАК НачислятьАмортизациюВТекущемМесяце,
	|	&ДокументДвижений КАК Регистратор
	|ИЗ
	|	ВТ_СостояниеОСОрганизацийСрезПоследних КАК НачислениеАмортизацииОС
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеАмортизацииОС.Организация,
	|	НачислениеАмортизацииОС.ОсновноеСредство";
	
	СтруктураЗапросов.Вставить("НачислениеАмортизацииОС_Отмена", ТекстЗапроса);
	
	Возврат СтруктураЗапросов;
	
КонецФункции

Функция ПолучитьСтруктуруЗапросовОС() Экспорт
	
	СтруктураЗапросов = Новый Структура;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация,
	|	СостоянияОСОрганизаций.ДатаСостояния,
	|	СостоянияОСОрганизаций.Состояние,
	|	СостоянияОСОрганизаций.Регистратор
	|ПОМЕСТИТЬ ВТ_СостояниеОСОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.ДатаСостояния <= &ДатаПереноса
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СостояниеОСОрганизаций.ОсновноеСредство,
	|	ВТ_СостояниеОСОрганизаций.Организация КАК Организация,
	|	ВТ_СостояниеОСОрганизаций.ДатаСостояния,
	|	ВТ_СостояниеОСОрганизаций.Состояние,
	|	ВТ_СостояниеОСОрганизаций.Регистратор
	|ПОМЕСТИТЬ ВТ_СостояниеОСОрганизацийСрезПоследних
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_СостояниеОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|		ВТ_СостояниеОСОрганизаций.Организация КАК Организация,
	|		МАКСИМУМ(ВТ_СостояниеОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	|	ИЗ
	|		ВТ_СостояниеОСОрганизаций КАК ВТ_СостояниеОСОрганизаций
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_СостояниеОСОрганизаций.ОсновноеСредство,
	|		ВТ_СостояниеОСОрганизаций.Организация) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СостояниеОСОрганизаций КАК ВТ_СостояниеОСОрганизаций
	|		ПО ВложенныйЗапрос.ДатаСостояния = ВТ_СостояниеОСОрганизаций.ДатаСостояния
	|			И ВложенныйЗапрос.ОсновноеСредство = ВТ_СостояниеОСОрганизаций.ОсновноеСредство
	|			И ВложенныйЗапрос.Организация = ВТ_СостояниеОСОрганизаций.Организация
	|ГДЕ
	|	ВТ_СостояниеОСОрганизаций.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)";
	
	СтруктураЗапросов.Вставить("ВТ_СостояниеОСОрганизацийСрезПоследних", ТекстЗапроса);
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	абс_НастройкиСистемы.Значение КАК СобытиеОС
	|ПОМЕСТИТЬ ВТ_СобытиеОСОрганизацииИзНастроекСистемы
	|ИЗ
	|	РегистрСведений.абс_НастройкиСистемы КАК абс_НастройкиСистемы
	|ГДЕ
	|	абс_НастройкиСистемы.Организация = &Организация
	|	И абс_НастройкиСистемы.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.абс_НастройкиСистемы.СобытияОСОрганизаций)";
	
	СтруктураЗапросов.Вставить("ВТ_СобытиеОСОрганизацийИзНастроекСистемы", ТекстЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	КОНЕЦПЕРИОДА(&ДатаПереноса, ДЕНЬ) КАК Период,
	|	СостоянияОС.ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета) КАК Состояние,
	|	&ДатаПереноса КАК ДатаСостояния,
	|	&ДокументДвижений КАК Регистратор
	|ИЗ
	|	РегистрСведений.СостоянияОС КАК СостоянияОС
	|ГДЕ
	|	СостоянияОС.ДатаСостояния <= &ДатаПереноса
	|	И СостоянияОС.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|	И СостоянияОС.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				ВТ_СостояниеОСОрганизацийСрезПоследних.ОсновноеСредство
	|			ИЗ
	|				ВТ_СостояниеОСОрганизацийСрезПоследних КАК ВТ_СостояниеОСОрганизацийСрезПоследних)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОС.ОсновноеСредство";
	
	СтруктураЗапросов.Вставить("СостояниеОС_СнятиеСУчета", ТекстЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	КОНЕЦПЕРИОДА(&ДатаПереноса, ДЕНЬ) КАК Период,
	|	СостоянияОСОрганизаций.Организация,
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета) КАК Состояние,
	|	&ДатаПереноса КАК ДатаСостояния,
	|	&ДокументДвижений КАК Регистратор
	|ИЗ
	|	ВТ_СостояниеОСОрганизацийСрезПоследних КАК СостоянияОСОрганизаций
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСОрганизаций.Организация,
	|	СостоянияОСОрганизаций.ОсновноеСредство";
	
	СтруктураЗапросов.Вставить("СостояниеОСОрганизаций_СнятиеСУчета", ТекстЗапроса);
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	КОНЕЦПЕРИОДА(&ДатаПереноса, ДЕНЬ) КАК Период,
	|	СостояниеОСОрганизаций.Организация,
	|	СостояниеОСОрганизаций.ОсновноеСредство,
	|	ВТ_СобытиеОСОрганизацииИзНастроекСистемы.СобытиеОС КАК Событие,
	|	ПРЕДСТАВЛЕНИЕ(&ДокументДвижений) КАК НазваниеДокумента,
	|	&ДокументДвижений КАК Регистратор
	|ИЗ
	|	ВТ_СостояниеОСОрганизацийСрезПоследних КАК СостояниеОСОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СобытиеОСОрганизацииИзНастроекСистемы КАК ВТ_СобытиеОСОрганизацииИзНастроекСистемы
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостояниеОСОрганизаций.Организация,
	|	СостояниеОСОрганизаций.ОсновноеСредство,
	|	ВТ_СобытиеОСОрганизацииИзНастроекСистемы.СобытиеОС";
	
	СтруктураЗапросов.Вставить("СобытиеОСОрганизаций_Передача", ТекстЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	КОНЕЦПЕРИОДА(&ДатаПереноса, ДЕНЬ) КАК Период,
	|	НачислениеАмортизацииОС.Организация,
	|	НачислениеАмортизацииОС.ОсновноеСредство,
	|	ЛОЖЬ КАК НачислятьАмортизацию,
	|	ЛОЖЬ КАК НачислятьАмортизациюВТекущемМесяце,
	|	&ДокументДвижений КАК Регистратор
	|ИЗ
	|	ВТ_СостояниеОСОрганизацийСрезПоследних КАК НачислениеАмортизацииОС
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеАмортизацииОС.Организация,
	|	НачислениеАмортизацииОС.ОсновноеСредство";
	
	СтруктураЗапросов.Вставить("НачислениеАмортизацииОС_Отмена", ТекстЗапроса);
	
	Возврат СтруктураЗапросов;
	
КонецФункции

Функция ПолучитьСтруктуруЗапросовНМА() Экспорт
	
	СтруктураЗапросов = Новый Структура;
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.Организация,
	|	СостоянияНМАОрганизацийСрезПоследних.Состояние,
	|	СостоянияНМАОрганизацийСрезПоследних.Регистратор,
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив,
	|	СостоянияНМАОрганизацийСрезПоследних.Период
	|ПОМЕСТИТЬ ВТ_СостояниеНМАОрганизацийСрезПоследних
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК СостоянияНМАОрганизацийСрезПоследних
	|ГДЕ
	|	СостоянияНМАОрганизацийСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)";
	
	СтруктураЗапросов.Вставить("ВТ_СостояниеНМАОрганизацийСрезПоследних", ТекстЗапроса);
	
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	КОНЕЦПЕРИОДА(&ДатаПереноса, ДЕНЬ) КАК Период,
	|	СостоянияНМАОрганизаций.Организация,
	|	СостоянияНМАОрганизаций.НематериальныйАктив,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан) КАК Состояние,
	|	&ДокументДвижений КАК Регистратор
	|ИЗ
	|	ВТ_СостояниеНМАОрганизацийСрезПоследних КАК СостоянияНМАОрганизаций
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияНМАОрганизаций.Организация,
	|	СостоянияНМАОрганизаций.НематериальныйАктив";
	
	СтруктураЗапросов.Вставить("СостояниеНМАОрганизаций_СнятиеСУчета", ТекстЗапроса);
	
	
	
	Возврат СтруктураЗапросов;
	
КонецФункции

Функция ПолучитьСтруктуруЗапросовНДСиАвансы()
	
	СтруктураЗапросов = Новый Структура;
	ТекстЗапроса = "ВЫБРАТЬ
	|	&ДатаПереноса КАК Период,
	|	&ДокументДвижений КАК Регистратор,
	|	ИСТИНА КАК Активность,
	|	&Филиал КАК Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.ДатаСобытия,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродаж.абс_СчетУчета,
	|	НДСЗаписиКнигиПродаж.СуммаБезНДС,
	|	НДСЗаписиКнигиПродаж.НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период < &ДатаПереноса
	|	И НДСЗаписиКнигиПродаж.Организация = &Организация
	|	И НДСЗаписиКнигиПродаж.Активность
	|	И НДСЗаписиКнигиПродаж.СчетФактура В
	|			(ВЫБРАТЬ
	|				НДСНачисленныйОстатки.СчетФактура
	|			ИЗ
	|				РегистрНакопления.НДСНачисленный.Остатки(&Период, Организация = &Организация) КАК НДСНачисленныйОстатки)";
	
	СтруктураЗапросов.Вставить("НДСЗаписиКнигиПродаж", ТекстЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	&ДатаПереноса КАК Период,
	|	&ДокументДвижений КАК Регистратор,
	|	ИСТИНА КАК Активность,
	|	&Филиал КАК Организация,
	|	НДСЗаписиКнигиПокупок.СчетФактура,
	|	НДСЗаписиКнигиПокупок.ВидЦенности,
	|	НДСЗаписиКнигиПокупок.СтавкаНДС,
	|	НДСЗаписиКнигиПокупок.ДатаОплаты,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	|	НДСЗаписиКнигиПокупок.Событие,
	|	НДСЗаписиКнигиПокупок.ДатаСобытия,
	|	НДСЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПокупок.КорректируемыйПериод,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПокупок.СуммаБезНДС,
	|	НДСЗаписиКнигиПокупок.НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период < &ДатаПереноса
	|	И НДСЗаписиКнигиПокупок.Организация = &Организация
	|	И НДСЗаписиКнигиПокупок.Активность
	|	И НДСЗаписиКнигиПокупок.СчетФактура В
	|			(ВЫБРАТЬ
	|				НДСПредъявленныйОстатки.СчетФактура
	|			ИЗ
	|				РегистрНакопления.НДСПредъявленный.Остатки(&Период, Организация = &Организация) КАК НДСПредъявленныйОстатки)";
	
	
	СтруктураЗапросов.Вставить("НДСЗаписиКнигиПокупок", ТекстЗапроса);
	
	Возврат СтруктураЗапросов;				   
КонецФункции // ()

Процедура Абс_ЗабалансДействие() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Функция ЭтоОперацияВГР(Документ) Экспорт
		
	Если НЕ (ТипЗнч(Документ) = Тип("ДокументСсылка.ОперацияБух")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументОбъект.ОперацияБух")) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	МассивОперация = Новый Массив;
	МассивОперация.Добавить(Перечисления.абс_ВидыОперацийФилиаизация.ВГР_ДЗО_ДЗО);
	МассивОперация.Добавить(Перечисления.абс_ВидыОперацийФилиаизация.ВГР_ДЗО_КТТК);
	МассивОперация.Добавить(Перечисления.абс_ВидыОперацийФилиаизация.Рекласс);
	
	Если МассивОперация.Найти(Документ.абс_ВидОперацииФилиализация) <> Неопределено Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПеренестиИсториюСогласованияДоговоровКонтрагентов(Источник, Приемник)
	
	НаборЗаписейИсточник = РегистрыСведений.абс_ИзменениеСтатусовДоговоров.СоздатьНаборЗаписей();
	НаборЗаписейИсточник.Отбор.Договор.Значение = Источник;
	НаборЗаписейИсточник.Отбор.Договор.Использование = Истина;
	НаборЗаписейИсточник.Прочитать();
	
	ТаблицаНабораЗаписей = НаборЗаписейИсточник.Выгрузить();
	
	ТаблицаНабораЗаписей.ЗаполнитьЗначения(Приемник, "Договор");
	
	
	НаборЗаписейПриемник = РегистрыСведений.абс_ИзменениеСтатусовДоговоров.СоздатьНаборЗаписей();
	НаборЗаписейПриемник.Отбор.Договор.Значение = Приемник;
	НаборЗаписейПриемник.Отбор.Договор.Использование = Истина;
	НаборЗаписейПриемник.Загрузить(ТаблицаНабораЗаписей);
	НаборЗаписейПриемник.ОбменДанными.Загрузка = Истина;
	НаборЗаписейПриемник.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьРБП(СтрокаТЗ)
	
	РБПСсылка = СтрокаТЗ.СубконтоДт1;
	Если РБПСсылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;	
	РБПОбъект = РБПСсылка.ПолучитьОбъект();
	РБПОбъект.Сумма = СтрокаТЗ.Сумма;
	РБПОбъект.ДатаНачалаСписания = СтрокаТЗ.Период;
	РБПОбъект.ОбменДанными.Загрузка = Истина;
	РБПОбъект.Записать();
	
КонецПроцедуры

Функция ПолучитьСкладыДЗО(ДЗО)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	абс_СоответствияОбъектовПереноса.ОбъектИсточник КАК Склад
		|ИЗ
		|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
		|ГДЕ
		|	абс_СоответствияОбъектовПереноса.ТипПриемник = ""СправочникСсылка.Склады""
		|	И абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &ДЗО";

	Запрос.УстановитьПараметр("ДЗО", ДЗО);
	
	Результат = Запрос.Выполнить().Выгрузить();

	мСкладыДЗО = Результат.ВыгрузитьКолонку("Склад");
	
	Возврат мСкладыДЗО;

КонецФункции // ПолучитьСкладыФилиала(СтруктураПараметров.Филиал)()

Функция ПолучитьДокументыОтбораДЗО(ДЗО, ПериодОстатков)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартииМатериаловВЭксплуатацииОстатки.ДокументПередачи
		|ИЗ
		|	РегистрНакопления.ПартииМатериаловВЭксплуатации.Остатки(&ПериодОстатков, ДокументПередачи.Организация = &ДЗО) КАК ПартииМатериаловВЭксплуатацииОстатки";

	Запрос.УстановитьПараметр("ПериодОстатков", ПериодОстатков);
	Запрос.УстановитьПараметр("ДЗО", ДЗО);

	Результат = Запрос.Выполнить().Выгрузить();
    мДокументыОтбораДЗО = Результат.ВыгрузитьКолонку("ДокументПередачи");
	Возврат мДокументыОтбораДЗО;
КонецФункции // 

Функция ПолучитьДокументыОтбораДЗОПереданныеПартии(ДЗО, ПериодОстатков)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартииТоваровПереданныеОстатки.ДокументПередачи
		|ИЗ
		|	РегистрНакопления.ПартииТоваровПереданные.Остатки(&ПериодОстатков, ДокументПередачи.Организация = &ДЗО) КАК ПартииТоваровПереданныеОстатки";

	Запрос.УстановитьПараметр("ПериодОстатков", ПериодОстатков);
	Запрос.УстановитьПараметр("ДЗО", ДЗО);

	Результат = Запрос.Выполнить().Выгрузить();
    мДокументыОтбораДЗО = Результат.ВыгрузитьКолонку("ДокументПередачи");
	Возврат мДокументыОтбораДЗО;
КонецФункции // 

Функция ПолучитьРегистраторХозрасчетный(СтруктураПараметров)
	
	Если СтруктураПараметров.НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПриемИзКТТКВФилиал Тогда 
		Возврат СтруктураПараметров.ДокументДвижений;
	КонецЕсли;
	
	Возврат СтруктураПараметров.ДокументДвиженийОпераияБух; 
	
КонецФункции


///////////////////////////////////////////////////////////////////////////
// Перенос справочников

// Перенос НоменклатурныеГруппы
Процедура ПереносСправочникаНоменклатурныеГруппы(ОрганизацияИсточник,ОрганизацияПриемник,Отказ,Ошибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	абс_НастройкиСистемы.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.абс_НастройкиСистемы КАК абс_НастройкиСистемы
	|ГДЕ
	|	абс_НастройкиСистемы.Настройка = &Настройка
	|	И абс_НастройкиСистемы.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.абс_НастройкиСистемы.ГруппаНоменклатурныеГруппы);
	Запрос.УстановитьПараметр("Организация", ОрганизацияПриемник);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда		
		ДобавитьОшибкуПользователю(Ошибки, "Филиал", "Не задана группа НоменклатурнаяГруппа в настройках системы для организации");
		Отказ = Истина;		
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаГруппа = Выборка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	абс_НастройкиСистемы.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.абс_НастройкиСистемы КАК абс_НастройкиСистемы
	|ГДЕ
	|	абс_НастройкиСистемы.Настройка = &Настройка
	|	И абс_НастройкиСистемы.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.абс_НастройкиСистемы.ГруппаНоменклатурныеГруппы);
	Запрос.УстановитьПараметр("Организация", ОрганизацияИсточник);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда		
		ДобавитьОшибкуПользователю(Ошибки, "ДЗО", "Не задана группа НоменклатурнаяГруппа в настройках системы для организации");
		Отказ = Истина;		
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаГруппаИсточник = Выборка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НоменклатурныеГруппы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ
	|	НоменклатурныеГруппы.Ссылка В ИЕРАРХИИ(&ГруппаИсточник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатурныеГруппы.Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ГруппаИсточник", НастройкаГруппаИсточник);	
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Для каждого СтрокаДерева Из Результат.Строки Цикл
		Если СтрокаДерева.Ссылка = Справочники.НоменклатурныеГруппы.ПустаяСсылка() Тогда 
			РазобратьДеревоНоменклатурныеГруппы(СтрокаДерева,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);
		Иначе
			СоздатьЭлементНоменклатурныеГруппы(СтрокаДерева,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);
			РазобратьДеревоНоменклатурныеГруппы(СтрокаДерева,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);	
		КонецЕсли;				
	КонецЦикла;	
	
КонецПроцедуры

Процедура РазобратьДеревоНоменклатурныеГруппы(СтрокаДерева,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник)
	
	Для Каждого ПодСтрока Из СтрокаДерева.Строки Цикл 
		СоздатьЭлементНоменклатурныеГруппы(ПодСтрока,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);
		РазобратьДеревоНоменклатурныеГруппы(ПодСтрока,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура СоздатьЭлементНоменклатурныеГруппы(ПодСтрока,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник)
	
	СсылкаНаЭлемент = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	
	Если ОтсутствуетЗаписьВРегистре(ПодСтрока.Ссылка,СсылкаНаЭлемент,ОрганизацияИсточник,ОрганизацияПриемник,"СправочникСсылка.НоменклатурныеГруппы") Тогда
		Если ПодСтрока.Родитель = Неопределено Тогда 
			Если ПодСтрока.Ссылка.ЭтоГруппа Тогда
				Возврат;
			КонецЕсли;
			Родитель = НастройкаГруппа;
		Иначе
			Если ПодСтрока.Ссылка.ЭтоГруппа Тогда 
				Если ТакаяПапкаУжеСуществуетНоменклатурныеГруппы(ПодСтрока.Ссылка.Наименование,НастройкаГруппа) Тогда					
					Возврат;						
				КонецЕсли;
			КонецЕсли;
			Если (ТипЗнч(ПодСтрока.Родитель)=Тип("СтрокаДереваЗначений") И ПодСтрока.Родитель.Ссылка = Справочники.НоменклатурныеГруппы.ПустаяСсылка())
				ИЛИ(ПодСтрока.Родитель.Родитель = Неопределено) Тогда
				Родитель = НастройкаГруппа;
			Иначе
				Родитель = ПодСтрока.Родитель.Ссылка;
			КонецЕсли;
		КонецЕсли;
		НовЭлемент = ПодСтрока.Ссылка.Скопировать();
		НовЭлемент.Родитель = Родитель;
		НовЭлемент.Код = ПодСтрока.Ссылка.Код;
		НовЭлемент.ОбменДанными.Загрузка = Истина;
		НовЭлемент.Записать();
		Если НЕ ПодСтрока.Ссылка.ЭтоГруппа Тогда
			ДобавитьСоответствие(ПодСтрока.Ссылка,НовЭлемент.Ссылка,ОрганизацияИсточник,ОрганизацияПриемник,"СправочникСсылка.НоменклатурныеГруппы");
		КонецЕсли;
		СсылкаНаЭлемент = НовЭлемент.Ссылка;
	КонецЕсли;	
	ПодСтрока.Ссылка = СсылкаНаЭлемент;
	
КонецПроцедуры

Функция ТакаяПапкаУжеСуществуетНоменклатурныеГруппы(ГруппаИсточникНаименование,ГруппаПриемник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НоменклатурныеГруппы.Ссылка
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ
	|	НоменклатурныеГруппы.Наименование = &ГруппаИсточникНаименование
	|	И НоменклатурныеГруппы.Ссылка В ИЕРАРХИИ(&ГруппаПриемник)";
	
	Запрос.УстановитьПараметр("ГруппаИсточникНаименование", ГруппаИсточникНаименование);
	Запрос.УстановитьПараметр("ГруппаПриемник", ГруппаПриемник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции


// Перенос Склады
Процедура ПереносСправочникаСклады(ОрганизацияИсточник,ОрганизацияПриемник,Отказ,Ошибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	абс_НастройкиСистемы.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.абс_НастройкиСистемы КАК абс_НастройкиСистемы
	|ГДЕ
	|	абс_НастройкиСистемы.Настройка = &Настройка
	|	И абс_НастройкиСистемы.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.абс_НастройкиСистемы.ГруппаСклад);
	Запрос.УстановитьПараметр("Организация", ОрганизацияПриемник);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда		
		ДобавитьОшибкуПользователю(Ошибки, "Филиал", "Не задана группа Склад в настройках системы для организации");
		Отказ = Истина;		
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаГруппа = Выборка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	абс_НастройкиСистемы.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.абс_НастройкиСистемы КАК абс_НастройкиСистемы
	|ГДЕ
	|	абс_НастройкиСистемы.Настройка = &Настройка
	|	И абс_НастройкиСистемы.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.абс_НастройкиСистемы.ГруппаСклад);
	Запрос.УстановитьПараметр("Организация", ОрганизацияИсточник);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда		
		ДобавитьОшибкуПользователю(Ошибки, "ДЗО", "Не задана группа Склад в настройках системы для организации");
		Отказ = Истина;				
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаГруппаИсточник = Выборка.Значение;
		КонецЦикла;
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаИсточник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склады.Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ГруппаИсточник", НастройкаГруппаИсточник);	
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Для каждого СтрокаДерева Из Результат.Строки Цикл
		Если СтрокаДерева.Ссылка = Справочники.Склады.ПустаяСсылка() Тогда 
			РазобратьДеревоСклады(СтрокаДерева,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);
		Иначе
			СоздатьЭлементСклады(СтрокаДерева,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);
			РазобратьДеревоСклады(СтрокаДерева,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);	
		КонецЕсли;				
	КонецЦикла;
	
КонецПроцедуры

Процедура РазобратьДеревоСклады(СтрокаДерева,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник)
	
	Для Каждого ПодСтрока Из СтрокаДерева.Строки Цикл 
		СоздатьЭлементСклады(ПодСтрока,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);
		РазобратьДеревоСклады(ПодСтрока,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура СоздатьЭлементСклады(ПодСтрока,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник)
	
	СсылкаНаЭлемент = Справочники.Склады.ПустаяСсылка();
	
	Если ОтсутствуетЗаписьВРегистре(ПодСтрока.Ссылка,СсылкаНаЭлемент,ОрганизацияИсточник,ОрганизацияПриемник,"СправочникСсылка.Склады") Тогда
		Если ПодСтрока.Родитель = Неопределено Тогда 
			Если ПодСтрока.Ссылка.ЭтоГруппа Тогда
				Возврат;
			КонецЕсли;
			Родитель = НастройкаГруппа;
		Иначе
			Если ПодСтрока.Ссылка.ЭтоГруппа Тогда 
				Если ТакаяПапкаУжеСуществуетСклады(ПодСтрока.Ссылка.Наименование,НастройкаГруппа) Тогда					
					Возврат;						
				КонецЕсли;
			КонецЕсли;
			Если (ТипЗнч(ПодСтрока.Родитель)=Тип("СтрокаДереваЗначений") И ПодСтрока.Родитель.Ссылка = Справочники.Склады.ПустаяСсылка())
				ИЛИ(ПодСтрока.Родитель.Родитель = Неопределено) Тогда
				Родитель = НастройкаГруппа;
			Иначе
				Родитель = ПодСтрока.Родитель.Ссылка;
			КонецЕсли;
		КонецЕсли;
		НовЭлемент = ПодСтрока.Ссылка.Скопировать();
		НовЭлемент.Родитель = Родитель;
		НовЭлемент.УстановитьНовыйКод(ОрганизацияПриемник.Префикс);
		НовЭлемент.ОбменДанными.Загрузка = Истина;
		НовЭлемент.Записать();
		Если НЕ ПодСтрока.Ссылка.ЭтоГруппа Тогда
			ДобавитьСоответствие(ПодСтрока.Ссылка,НовЭлемент.Ссылка,ОрганизацияИсточник,ОрганизацияПриемник,"СправочникСсылка.Склады");
		КонецЕсли;
		СсылкаНаЭлемент = НовЭлемент.Ссылка;
	КонецЕсли;	
	ПодСтрока.Ссылка = СсылкаНаЭлемент;
	
КонецПроцедуры

Функция ТакаяПапкаУжеСуществуетСклады(ГруппаИсточникНаименование,ГруппаПриемник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Наименование = &ГруппаИсточникНаименование
	|	И Склады.Ссылка В ИЕРАРХИИ(&ГруппаПриемник)";
	
	Запрос.УстановитьПараметр("ГруппаИсточникНаименование", ГруппаИсточникНаименование);
	Запрос.УстановитьПараметр("ГруппаПриемник", ГруппаПриемник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции


// Перенос ОбъектыСтроительства
Процедура ПереносСправочникаОбъектыСтроительства(ОрганизацияИсточник,ОрганизацияПриемник,Отказ,Ошибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	абс_НастройкиСистемы.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.абс_НастройкиСистемы КАК абс_НастройкиСистемы
	|ГДЕ
	|	абс_НастройкиСистемы.Настройка = &Настройка
	|	И абс_НастройкиСистемы.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.абс_НастройкиСистемы.ГруппаОбъектыСтроительства);
	Запрос.УстановитьПараметр("Организация", ОрганизацияПриемник);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда		
		ДобавитьОшибкуПользователю(Ошибки, "Филиал", "Не задана группа Объекты строительства в настройках системы для организации");
		Отказ = Истина;		
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаГруппа = Выборка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	абс_НастройкиСистемы.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.абс_НастройкиСистемы КАК абс_НастройкиСистемы
	|ГДЕ
	|	абс_НастройкиСистемы.Настройка = &Настройка
	|	И абс_НастройкиСистемы.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.абс_НастройкиСистемы.ГруппаОбъектыСтроительства);
	Запрос.УстановитьПараметр("Организация", ОрганизацияИсточник);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда		
		ДобавитьОшибкуПользователю(Ошибки, "ДЗО", "Не задана группа Объекты строительства в настройках системы для организации");
		Отказ = Истина;				
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаГруппаИсточник = Выборка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбъектыСтроительства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|ГДЕ
	|	ОбъектыСтроительства.Ссылка В ИЕРАРХИИ(&ГруппаИсточник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыСтроительства.Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ГруппаИсточник", НастройкаГруппаИсточник);	
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Для каждого СтрокаДерева Из Результат.Строки Цикл
		Если СтрокаДерева.Ссылка = Справочники.ОбъектыСтроительства.ПустаяСсылка() Тогда 
			РазобратьДеревоОбъектыСтроительства(СтрокаДерева,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);
		Иначе
			СоздатьЭлементОбъектыСтроительства(СтрокаДерева,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);
			РазобратьДеревоОбъектыСтроительства(СтрокаДерева,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);	
		КонецЕсли;				
	КонецЦикла;
	
КонецПроцедуры

Процедура РазобратьДеревоОбъектыСтроительства(СтрокаДерева,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник)
	
	Для Каждого ПодСтрока Из СтрокаДерева.Строки Цикл 
		СоздатьЭлементОбъектыСтроительства(ПодСтрока,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);
		РазобратьДеревоОбъектыСтроительства(ПодСтрока,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник);		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура СоздатьЭлементОбъектыСтроительства(ПодСтрока,НастройкаГруппа,ОрганизацияИсточник,ОрганизацияПриемник)
	
	СсылкаНаЭлемент = Справочники.ОбъектыСтроительства.ПустаяСсылка();
	
	Если ОтсутствуетЗаписьВРегистре(ПодСтрока.Ссылка,СсылкаНаЭлемент,ОрганизацияИсточник,ОрганизацияПриемник,"СправочникСсылка.ОбъектыСтроительства") Тогда
		Если ПодСтрока.Родитель = Неопределено Тогда 
			Если ПодСтрока.Ссылка.ЭтоГруппа Тогда
				Возврат;
			КонецЕсли;
			Родитель = НастройкаГруппа;
		Иначе
			Если ПодСтрока.Ссылка.ЭтоГруппа Тогда 
				Если ТакаяПапкаУжеСуществуетОбъектыСтроительства(ПодСтрока.Ссылка.Наименование,НастройкаГруппа) Тогда					
					Возврат;						
				КонецЕсли;
			КонецЕсли;
			Если (ТипЗнч(ПодСтрока.Родитель)=Тип("СтрокаДереваЗначений") И ПодСтрока.Родитель.Ссылка = Справочники.ОбъектыСтроительства.ПустаяСсылка())
				ИЛИ(ПодСтрока.Родитель.Родитель = Неопределено) Тогда
				Родитель = НастройкаГруппа;
			Иначе
				Родитель = ПодСтрока.Родитель.Ссылка;
			КонецЕсли;
		КонецЕсли;
		НовЭлемент = ПодСтрока.Ссылка.Скопировать();
		НовЭлемент.Родитель = Родитель;
		//НовЭлемент.УстановитьНовыйКод();
		НовЭлемент.Код = ПодСтрока.Ссылка.Код;
		НовЭлемент.ОбменДанными.Загрузка = Истина;
		НовЭлемент.Записать();
		Если НЕ ПодСтрока.Ссылка.ЭтоГруппа Тогда
			ДобавитьСоответствие(ПодСтрока.Ссылка, НовЭлемент.Ссылка,ОрганизацияИсточник,ОрганизацияПриемник,"СправочникСсылка.ОбъектыСтроительства");
		КонецЕсли;
		СсылкаНаЭлемент = НовЭлемент.Ссылка;
	КонецЕсли;	
	ПодСтрока.Ссылка = СсылкаНаЭлемент;
	
КонецПроцедуры

Функция ТакаяПапкаУжеСуществуетОбъектыСтроительства(ГруппаИсточникНаименование,ГруппаПриемник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбъектыСтроительства.Ссылка
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|ГДЕ
	|	ОбъектыСтроительства.Наименование = &ГруппаИсточникНаименование
	|	И ОбъектыСтроительства.Ссылка В ИЕРАРХИИ(&ГруппаПриемник)";
	
	Запрос.УстановитьПараметр("ГруппаИсточникНаименование", ГруппаИсточникНаименование);
	Запрос.УстановитьПараметр("ГруппаПриемник", ГруппаПриемник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции


// Перенос Договоры контрагентов
Процедура ПереносСправочникаДоговорыКонтрагентов(ОрганизацияИсточник,ОрганизацияПриемник,Отказ,Ошибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	| ДоговорыКонтрагентов.Ссылка
	|ИЗ
	| Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	| ДоговорыКонтрагентов.Организация = &Организация
	| И ДоговорыКонтрагентов.абс_СтатусДоговора В (&Статусы)
	| И НЕ ДоговорыКонтрагентов.Владелец В
	|    (ВЫБРАТЬ
	|     абс_КонтрагентыВГР.КонтрагентИсточника КАК Контрагент
	|    ИЗ
	|     РегистрСведений.абс_КонтрагентыВГР КАК абс_КонтрагентыВГР
	|    ГДЕ
	|     абс_КонтрагентыВГР.ОрганизацияИсточник = &Организация
	|
	|    ОБЪЕДИНИТЬ ВСЕ
	|
	| 	  ВЫБРАТЬ
	|     абс_КонтрагентыВГР.КонтрагентПриемника
	|    ИЗ
	|     РегистрСведений.абс_КонтрагентыВГР КАК абс_КонтрагентыВГР
	|    ГДЕ
	|     абс_КонтрагентыВГР.ОрганизацияПриемник = &ОрганизацияПриемник)";			 
	
	Запрос.УстановитьПараметр("Организация", ОрганизацияИсточник);
	Запрос.УстановитьПараметр("ОрганизацияПриемник", ОрганизацияПриемник);
	
	мСтатусы = Новый Массив();
	мСтатусы.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);
	мСтатусы.Добавить(Перечисления.абсСтатусыДоговоров.Закрытие);	
	Запрос.УстановитьПараметр("Статусы", мСтатусы);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоздатьЭлементДоговорыКонтрагентов(Выборка.Ссылка,ОрганизацияИсточник,ОрганизацияПриемник,Ошибки);		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьЭлементДоговорыКонтрагентов(ОбъектДЗО,ОрганизацияИсточник,ОрганизацияПриемник,Ошибки) Экспорт
	
	НайденноеСоответствие = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если ОтсутствуетЗаписьВРегистре(ОбъектДЗО,НайденноеСоответствие,ОрганизацияИсточник,ОрганизацияПриемник,"СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		Попытка
			ДоговорФилиала = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ДоговорФилиала, ОбъектДЗО, , "ЭтоГруппа, ПометкаУдаления, Код, Организация, абс_Ответственный, абс_СотрудникДопСогласование, абс_ОтветственныйПД, абс_ОсновнойДоговор, абс_ДЗО, абс_Агент, абс_ВстречныйДоговор, абс_ДоходныйДоговор, абс_ОснованиеДоговорСКТТК");
			ДоговорФилиала.Организация = ОрганизацияПриемник;
			ДоговорФилиала.ОбменДанными.Загрузка = Истина;
			ДоговорФилиала.Записать();
			
			ДоговорФилиала.абс_Ответственный = ОбъектДЗО.абс_Ответственный;
			ДоговорФилиала.абс_СотрудникДопСогласование = ОбъектДЗО.абс_СотрудникДопСогласование;
			ДоговорФилиала.абс_ОтветственныйПД = ОбъектДЗО.абс_ОтветственныйПД;
			ДоговорФилиала.абс_ДЗО = ?(ОбъектДЗО.абс_ДЗО=ОрганизацияИсточник, ОрганизацияПриемник, ОбъектДЗО.абс_ДЗО);
			ДоговорФилиала.абс_Агент = ?(ОбъектДЗО.абс_ДЗО=ОрганизацияИсточник, ОрганизацияПриемник, ОбъектДЗО.абс_Агент);
			ДоговорФилиала.абс_ВстречныйДоговор = ОбъектДЗО.абс_ВстречныйДоговор;
			ДоговорФилиала.абс_ДоходныйДоговор = СоздатьПолучитьДоходныйДоговор(ОбъектДЗО.абс_ДоходныйДоговор,ОрганизацияИсточник,ОрганизацияПриемник,Ошибки);
			ДоговорФилиала.абс_ОснованиеДоговорСКТТК = ОбъектДЗО.абс_ОснованиеДоговорСКТТК;
			ДоговорФилиала.УстановитьНовыйКод();
			ДоговорФилиала.ОбменДанными.Загрузка = Истина;
			ДоговорФилиала.Записать();
			
			ОбъектФилиала = ДоговорФилиала.Ссылка;
			
			//ПеренестиВложения(ОбъектДЗО, ОбъектФилиала);
			ПеренестиИсториюСогласованияДоговоровКонтрагентов(ОбъектДЗО, ОбъектФилиала);
			ДобавитьСоответствие(ОбъектДЗО, ОбъектФилиала,ОрганизацияИсточник,ОрганизацияПриемник,"СправочникСсылка.ДоговорыКонтрагентов");
			
		Исключение
			ДобавитьОшибкуПользователю(Ошибки, "Филиал", "Не удалось создать договор контрагента, соответствующий "+ОбъектДЗО+" "+" по причине:"+Символы.ПС+ОписаниеОшибки());
		КонецПопытки;
// {{KM WARE Лазаревский К.В. Заявка № 14.10.2015 начало
// 
	Иначе
		Если ТипЗнч(ОбъектДЗО) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Если НЕ ЗначениеЗаполнено(ОбъектДЗО.ДоговорПослеМиграции) Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	абс_СоответствияОбъектовПереноса.ОбъектИсточник,
				|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
				|ИЗ
				|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
				|ГДЕ
				|	абс_СоответствияОбъектовПереноса.ТипПриемник = &ТипПриемник
				|	И абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &Источник
				|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &Приемник
				|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &Ссылка");
				Запрос.УстановитьПараметр("Источник", ОрганизацияИсточник);
				Запрос.УстановитьПараметр("Приемник", ОрганизацияПриемник);
				Запрос.УстановитьПараметр("Ссылка",   ОбъектДЗО);
				Запрос.УстановитьПараметр("ТипПриемник", "СправочникСсылка.ДоговорыКонтрагентов");
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				СпрОбъект = ОбъектДЗО.ПолучитьОбъект();
				СпрОбъект.ДоговорПослеМиграции = Выборка.ОбъектПриемник;
				СпрОбъект.ОбменДанными.Загрузка = Истина;
				СпрОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
// }}KM WARE Лазаревский К.В. Заявка № 14.10.2015 окончание		
	КонецЕсли;	
	
КонецПроцедуры

Функция СоздатьПолучитьДоходныйДоговор(ОбъектДЗО,ОрганизацияИсточник,ОрганизацияПриемник,Ошибки)
	
	НайденноеСоответствие = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если ОбъектДЗО<>Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		Если ОтсутствуетЗаписьВРегистре(ОбъектДЗО,НайденноеСоответствие,ОрганизацияИсточник,ОрганизацияПриемник,"СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Попытка			
				ДоговорФилиала = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ДоговорФилиала, ОбъектДЗО, , "ЭтоГруппа, ПометкаУдаления, Код, Организация, абс_Ответственный, абс_СотрудникДопСогласование, абс_ОтветственныйПД, абс_ОсновнойДоговор, абс_ДЗО, абс_Агент, абс_ВстречныйДоговор, абс_ДоходныйДоговор, абс_ОснованиеДоговорСКТТК");
				ДоговорФилиала.Организация = ОрганизацияПриемник;
				ДоговорФилиала.ОбменДанными.Загрузка = Истина;
				ДоговорФилиала.Записать();
				
				ДоговорФилиала.абс_Ответственный = ОбъектДЗО.абс_Ответственный;
				ДоговорФилиала.абс_СотрудникДопСогласование = ОбъектДЗО.абс_СотрудникДопСогласование;
				ДоговорФилиала.абс_ОтветственныйПД = ОбъектДЗО.абс_ОтветственныйПД;
				ДоговорФилиала.абс_ДЗО = ?(ОбъектДЗО.абс_ДЗО=ОрганизацияИсточник, ОрганизацияПриемник, ОбъектДЗО.абс_ДЗО);
				ДоговорФилиала.абс_Агент = ?(ОбъектДЗО.абс_ДЗО=ОрганизацияИсточник, ОрганизацияПриемник, ОбъектДЗО.абс_Агент);
				ДоговорФилиала.абс_ВстречныйДоговор = ОбъектДЗО.абс_ВстречныйДоговор;
				ДоговорФилиала.абс_ДоходныйДоговор = ОбъектДЗО.абс_ДоходныйДоговор;
				ДоговорФилиала.абс_ОснованиеДоговорСКТТК = ОбъектДЗО.абс_ОснованиеДоговорСКТТК;
				ДоговорФилиала.УстановитьНовыйКод();
				ДоговорФилиала.ОбменДанными.Загрузка = Истина;
				ДоговорФилиала.Записать();
				
				ОбъектФилиала = ДоговорФилиала.Ссылка;
				
				//ПеренестиВложения(ОбъектДЗО, ОбъектФилиала);
				ПеренестиИсториюСогласованияДоговоровКонтрагентов(ОбъектДЗО, ОбъектФилиала);
				ДобавитьСоответствие(ОбъектДЗО, ОбъектФилиала,ОрганизацияИсточник,ОрганизацияПриемник,"СправочникСсылка.ДоговорыКонтрагентов");
				НайденноеСоответствие = ОбъектФилиала; 
			Исключение			
				ДобавитьОшибкуПользователю(Ошибки, "Филиал", "Не удалось создать доходный договор контрагента, соответствующий "+ОбъектДЗО+" "+" по причине:"+Символы.ПС+ОписаниеОшибки());
			КонецПопытки;		
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденноеСоответствие; 
	
КонецФункции


// Вспомогательные процедуры/функции перенос справочников
Функция ОтсутствуетЗаписьВРегистре(парСсылка,парСсылкаНаЭлемент,парОрганизацияИсточник,парОрганизацияПриемник,парТипПриемник)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектИсточник,
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ТипПриемник = &ТипПриемник
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &Источник
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &Приемник
	|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &Ссылка");
	Запрос.УстановитьПараметр("Источник", парОрганизацияИсточник);
	Запрос.УстановитьПараметр("Приемник", парОрганизацияПриемник);
	Запрос.УстановитьПараметр("Ссылка", парСсылка);
	Запрос.УстановитьПараметр("ТипПриемник", парТипПриемник);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Истина;
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			парСсылкаНаЭлемент = Выборка.ОбъектПриемник; 	
		КонецЦикла;
		Возврат Ложь
	КонецЕсли;	
	
	
КонецФункции 

// {{KM WARE Лазаревский К.В. Заявка № 23.10.2015 начало
// 
// {{Старый код:
//Процедура ДобавитьСоответствие(парИсточник,парПриемник,парОрганизацияИсточник,парОрганизацияПриемник,парТипПриемник)
// }}Новый код:
Процедура ДобавитьСоответствие(парИсточник,парПриемник,парОрганизацияИсточник,парОрганизацияПриемник,парТипПриемник) Экспорт
// }}KM WARE Лазаревский К.В. Заявка № 23.10.2015 окончание 	
	МенеджерЗаписи = РегистрыСведений.абс_СоответствияОбъектовПереноса.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОрганизацияИсточник = парОрганизацияИсточник;
	МенеджерЗаписи.ОрганизацияПриемник = парОрганизацияПриемник;
	МенеджерЗаписи.ОбъектИсточник = парИсточник;
	МенеджерЗаписи.ТипПриемник = парТипПриемник;
	МенеджерЗаписи.ОбъектПриемник = парПриемник;
	МенеджерЗаписи.Записать();
// {{KM WARE Лазаревский К.В. Заявка № 14.10.2015 начало
// для истории
	Если ТипЗнч(парИсточник) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СпрОбъект = парИсточник.ПолучитьОбъект();
		СпрОбъект.ДоговорПослеМиграции = парПриемник;
		СпрОбъект.ОбменДанными.Загрузка = Истина;
		СпрОбъект.Записать();
	КонецЕсли;
// }}KM WARE Лазаревский К.В. Заявка № 14.10.2015 окончание			
	
КонецПроцедуры

Процедура ПеренестиВложения(ОбъектДЗО, ОбъектФилиала)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &ОбъектДЗО";
	
	Запрос.УстановитьПараметр("ОбъектДЗО", ОбъектДЗО);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		НовЭлемент = Выборка.Ссылка.Скопировать();
		НовЭлемент.Объект = ОбъектФилиала;
		НовЭлемент.УстановитьНовыйКод();
		НовЭлемент.ОбменДанными.Загрузка = Истина;
		НовЭлемент.Записать();		
	КонецЦикла;						
	
КонецПроцедуры

Процедура ПриемКТТКФилиалБухгалтерскийУчет_ОбрабоатьНабор_71(НаборЗаписей, СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.Свойство("СчетаБУ") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.СчетаБУ) <> Тип("Массив") Тогда 
		Возврат;
	КонецЕсли;
	
	Счет_71 = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_;
	
	Если СтруктураПараметров.СчетаБУ.Найти(Счет_71) = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого движение из НаборЗаписей Цикл 
		
		Если ЗначениеЗаполнено(движение.СчетДт) Тогда 
			Если движение.СчетДт = Счет_71 ИЛИ движение.СчетДт.ПринадлежитЭлементу(Счет_71) Тогда 
				движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПодотчетныхСумм] = Справочники.абс_ВидПодотчетнойСуммы.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(движение.СчетКт) Тогда 
			Если движение.СчетКт = Счет_71 ИЛИ движение.СчетКт.ПринадлежитЭлементу(Счет_71) Тогда 
				движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПодотчетныхСумм] = Справочники.абс_ВидПодотчетнойСуммы.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьМассив(ИсходныйМассив)
	
	//Соответствие = Новый Соответствие;

	//Для каждого ЭлементМассива Из ИсходныйМассив Цикл
	//	Соответствие.Вставить(ЭлементМассива);
	//КонецЦикла;
	//
	//ИсходныйМассив.Очистить();
	//
	//Для каждого КлючИЗначение Из Соответствие Цикл
	//	ИсходныйМассив.Добавить(КлючИЗначение.Значение);
	//КонецЦикла;
	//	
КонецПроцедуры

Функция ПолучитьМассивСчетов(ДокументПереноса, ТипСчета)
	
	МассивСчетов = Новый Массив;
	
	Для Каждого строка из ДокументПереноса.СчетаБУНУ Цикл 	
		Если ТипЗнч(строка.Счет) = ТипСчета Тогда 
			МассивСчетов.Добавить(строка.Счет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции

// Прием в КТТК,  01 - 02 (остаточная стоимость)
Процедура Свернуть_01_02_04_05_НУ(ТЗ)
		
	СчетаДтКт = Новый Соответствие;
	СчетаДтКт.Вставить(ПланыСчетов.Налоговый.НайтиПоКоду("02.01"), ПланыСчетов.Налоговый.НайтиПоКоду("01.01"));
   	СчетаДтКт.Вставить(ПланыСчетов.Налоговый.НайтиПоКоду("02.02"), ПланыСчетов.Налоговый.НайтиПоКоду("03.01"));
	СчетаДтКт.Вставить(ПланыСчетов.Налоговый.НайтиПоКоду("05"), 	  ПланыСчетов.Налоговый.НайтиПоКоду("04.01"));
	
	Для й = - ТЗ.Количество() + 1 по 0 Цикл
		           
		движение = ТЗ[-й];
		
		Если СчетаДтКт.Получить(движение.СчетКт) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаКт = 0;
		МассивСтрокДт = ТЗ.НайтиСтроки(Новый Структура("СчетДт, СубконтоКт1, ВидУчетаДт", СчетаДтКт.Получить(движение.СчетКт), движение.СубконтоДт1, движение.ВидУчетаКт));
		
		Если МассивСтрокДт.Количество() > 0 Тогда 
			МассивСтрокДт[0].Сумма = МассивСтрокДт[0].Сумма - движение.Сумма;
			ТЗ.Удалить(движение);
		Иначе	
			СчетДт =  СчетаДтКт.Получить(движение.СчетКт);
			движение.СчетКт = движение.СчетДт;
			движение.СчетДт = СчетДт;
			движение.Сумма = - движение.Сумма; 
			
			СтруктураСубконто = Новый Структура("СубконтоКт1, СубконтоКт2, СубконтоКт3, ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3");
			ЗаполнитьЗначенияСвойств(СтруктураСубконто, движение); 
			
			движение.СубконтоКт1 = движение.СубконтоДт1;
			движение.СубконтоКт2 = СчетДт;
			движение.СубконтоКт3 = движение.СубконтоДт3;
			движение.ВидСубконтоКт1 = движение.ВидСубконтоДт1;
			движение.ВидСубконтоКт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.абс_СчетНУ;
			движение.ВидСубконтоКт3 = движение.ВидСубконтоДт3;
			
			движение.СубконтоДт1 = СтруктураСубконто.СубконтоКт1;
			движение.СубконтоДт2 = СтруктураСубконто.СубконтоКт2;
			движение.СубконтоДт3 = СтруктураСубконто.СубконтоКт3;
			движение.ВидСубконтоДт1 = СтруктураСубконто.ВидСубконтоКт1;
			движение.ВидСубконтоДт2 = СтруктураСубконто.ВидСубконтоКт2;
			движение.ВидСубконтоДт3 = СтруктураСубконто.ВидСубконтоКт3;

		КонецЕсли;

	КонецЦикла;

	
КонецПроцедуры

Процедура Свернуть_01_02_04_05_БУ(ТЗ)
		
	СчетаДтКт = Новый Соответствие;
	СчетаДтКт.Вставить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.01"), ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.01"));
   	СчетаДтКт.Вставить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.03"), ПланыСчетов.Хозрасчетный.НайтиПоКоду("03.01"));
	СчетаДтКт.Вставить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("05"), 	  ПланыСчетов.Хозрасчетный.НайтиПоКоду("04.01"));
	
	Для й = - ТЗ.Количество() + 1 по 0 Цикл
		           
		движение = ТЗ[-й];
		
		Если СчетаДтКт.Получить(движение.СчетКт) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаКт = 0;
		МассивСтрокДт = ТЗ.НайтиСтроки(Новый Структура("СчетДт, СубконтоКт1", СчетаДтКт.Получить(движение.СчетКт), движение.СубконтоДт1));
		
		Если МассивСтрокДт.Количество() > 0 Тогда 
			МассивСтрокДт[0].Сумма = МассивСтрокДт[0].Сумма - движение.Сумма;
			ТЗ.Удалить(движение);
		Иначе	
			СчетДт =  СчетаДтКт.Получить(движение.СчетКт);
			движение.СчетКт = движение.СчетДт;
			движение.СчетДт = СчетДт;
			движение.Сумма = - движение.Сумма; 
			
			СтруктураСубконто = Новый Структура("СубконтоКт1, СубконтоКт2, СубконтоКт3, ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3");
			ЗаполнитьЗначенияСвойств(СтруктураСубконто, движение); 
			
			движение.СубконтоКт1 = движение.СубконтоДт1;
			движение.СубконтоКт2 = СчетДт;
			движение.СубконтоКт3 = движение.СубконтоДт3;
			движение.ВидСубконтоКт1 = движение.ВидСубконтоДт1;
			движение.ВидСубконтоКт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.абс_СчетБУ;
			движение.ВидСубконтоКт3 = движение.ВидСубконтоДт3;
			
			движение.СубконтоДт1 = СтруктураСубконто.СубконтоКт1;
			движение.СубконтоДт2 = СтруктураСубконто.СубконтоКт2;
			движение.СубконтоДт3 = СтруктураСубконто.СубконтоКт3;
			движение.ВидСубконтоДт1 = СтруктураСубконто.ВидСубконтоКт1;
			движение.ВидСубконтоДт2 = СтруктураСубконто.ВидСубконтоКт2;
			движение.ВидСубконтоДт3 = СтруктураСубконто.ВидСубконтоКт3;

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Прием в филиал,  01 - 02 (остаточная стоимость)
Процедура Свернуть_01_02_04_05_НУ_ПриемВФилиал(ТЗ)
		
	СчетаДтКт = Новый Соответствие;
	СчетаДтКт.Вставить(ПланыСчетов.Налоговый.НайтиПоКоду("02.01"), ПланыСчетов.Налоговый.НайтиПоКоду("01.01"));
   	СчетаДтКт.Вставить(ПланыСчетов.Налоговый.НайтиПоКоду("02.02"), ПланыСчетов.Налоговый.НайтиПоКоду("03.01"));
	СчетаДтКт.Вставить(ПланыСчетов.Налоговый.НайтиПоКоду("05"), 	  ПланыСчетов.Налоговый.НайтиПоКоду("04.01"));
	
	Для й = - ТЗ.Количество() + 1 по 0 Цикл
		           
		движение = ТЗ[-й];
		
		Если СчетаДтКт.Получить(движение.СчетКт) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаКт = 0;
		МассивСтрокДт = ТЗ.НайтиСтроки(Новый Структура("СчетДт, СубконтоДт1, ВидУчетаДт", СчетаДтКт.Получить(движение.СчетКт), движение.СубконтоКт1, движение.ВидУчетаКт));
		
		Если МассивСтрокДт.Количество() > 0 Тогда 
			МассивСтрокДт[0].Сумма = МассивСтрокДт[0].Сумма - движение.Сумма;
			ТЗ.Удалить(движение);
		Иначе	
			СчетДт =  СчетаДтКт.Получить(движение.СчетКт);
			движение.СчетКт = движение.СчетДт;
			движение.СчетДт = СчетДт;
			движение.Сумма = - движение.Сумма; 
			
			СтруктураСубконто = Новый Структура("СубконтоКт1, СубконтоКт2, СубконтоКт3, ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3");
			ЗаполнитьЗначенияСвойств(СтруктураСубконто, движение); 
			
			движение.СубконтоКт1 = движение.СубконтоДт1;
			движение.СубконтоКт2 = движение.СубконтоДт2;
			движение.СубконтоКт3 = движение.СубконтоДт3;
			движение.ВидСубконтоКт1 = движение.ВидСубконтоДт1;
			движение.ВидСубконтоКт2 = движение.ВидСубконтоДт2;
			движение.ВидСубконтоКт3 = движение.ВидСубконтоДт3;
			
			движение.СубконтоДт1 = СтруктураСубконто.СубконтоКт1;
			движение.СубконтоДт2 = СтруктураСубконто.СубконтоКт2;
			движение.СубконтоДт3 = СтруктураСубконто.СубконтоКт3;
			движение.ВидСубконтоДт1 = СтруктураСубконто.ВидСубконтоКт1;
			движение.ВидСубконтоДт2 = СтруктураСубконто.ВидСубконтоКт2;
			движение.ВидСубконтоДт3 = СтруктураСубконто.ВидСубконтоКт3;

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура Свернуть_01_02_04_05_БУ_ПриемВФилиал(ТЗ)
		
	СчетаДтКт = Новый Соответствие;
	СчетаДтКт.Вставить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.01"), ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.01"));
   	СчетаДтКт.Вставить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.03"), ПланыСчетов.Хозрасчетный.НайтиПоКоду("03.01"));
	СчетаДтКт.Вставить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("05"), 	  ПланыСчетов.Хозрасчетный.НайтиПоКоду("04.01"));
	
	Для й = - ТЗ.Количество() + 1 по 0 Цикл
		           
		движение = ТЗ[-й];
		
		Если СчетаДтКт.Получить(движение.СчетКт) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаКт = 0;
		МассивСтрокДт = ТЗ.НайтиСтроки(Новый Структура("СчетДт, СубконтоДт1", СчетаДтКт.Получить(движение.СчетКт), движение.СубконтоКт1));
		
		Если МассивСтрокДт.Количество() > 0 Тогда 
			МассивСтрокДт[0].Сумма = МассивСтрокДт[0].Сумма - движение.Сумма;
			ТЗ.Удалить(движение);
		Иначе	
			СчетДт =  СчетаДтКт.Получить(движение.СчетКт);
			движение.СчетКт = движение.СчетДт;
			движение.СчетДт = СчетДт;
			движение.Сумма = - движение.Сумма; 
			
			СтруктураСубконто = Новый Структура("СубконтоКт1, СубконтоКт2, СубконтоКт3, ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3");
			ЗаполнитьЗначенияСвойств(СтруктураСубконто, движение); 
			
			движение.СубконтоКт1 = движение.СубконтоДт1;
			движение.СубконтоКт2 = движение.СубконтоДт2;
			движение.СубконтоКт3 = движение.СубконтоДт3;
			движение.ВидСубконтоКт1 = движение.ВидСубконтоДт1;
			движение.ВидСубконтоКт2 = движение.ВидСубконтоДт2;
			движение.ВидСубконтоКт3 = движение.ВидСубконтоДт3;
			
			движение.СубконтоДт1 = СтруктураСубконто.СубконтоКт1;
			движение.СубконтоДт2 = СтруктураСубконто.СубконтоКт2;
			движение.СубконтоДт3 = СтруктураСубконто.СубконтоКт3;
			движение.ВидСубконтоДт1 = СтруктураСубконто.ВидСубконтоКт1;
			движение.ВидСубконтоДт2 = СтруктураСубконто.ВидСубконтоКт2;
			движение.ВидСубконтоДт3 = СтруктураСубконто.ВидСубконтоКт3;

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМетодАмортизацииНУ(ИмяРегистра, ТаблицаРегистра)
	
	Если ИмяРегистра <> "ПервоначальныеСведенияОСНалоговыйУчет" Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого строка из ТаблицаРегистра Цикл 
		//Если строка.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ строка.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения Тогда
		//	Если НЕ ЗначениеЗаполнено(строка.МетодНачисленияАмортизации) Тогда 
		//		строка.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный;
		//	КонецЕсли;
		//Иначе
		//	строка.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный;	
		//КонецЕсли;
		Если НЕ (строка.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
			ИЛИ строка.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда 
			строка.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный;
		Иначе
			Если строка.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа 
				ИЛИ строка.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа 
				ИЛИ строка.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа Тогда  
				Если НЕ ЗначениеЗаполнено(строка.МетодНачисленияАмортизации) Тогда 
					строка.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный;
				КонецЕсли;
			Иначе
				строка.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный;		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСпециальныйКоэфициент(ИмяРегистра, ТаблицаРегистра)
	
	Если ИмяРегистра <> "НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет" Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого строка из ТаблицаРегистра Цикл 
		Если строка.СпециальныйКоэффициент = 2 Тогда 
			строка.СпециальныйКоэффициент = 1;
		КонецЕсли;			
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьНомерПриказа(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КомиссияТМЦ.Ссылка
	                      |ИЗ
	                      |	Справочник.КомиссияТМЦ КАК КомиссияТМЦ
	                      |ГДЕ
	                      |	КомиссияТМЦ.Номер = &Номер
	                      |	И КомиссияТМЦ.Наименование = &Номер");
						  
	Запрос.УстановитьПараметр("Номер", СтруктураПараметров.ДокументПереноса.Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Объект = Справочники.КомиссияТМЦ.СоздатьЭлемент();
	Объект.Номер = СтруктураПараметров.ДокументПереноса.Номер;
	Объект.Дата = СтруктураПараметров.ДокументДвижений.Дата;
	Объект.Наименование = Объект.Номер;
	Объект.Родитель = ПараметрыСеанса.абс_НастройкиСистемы.ГруппаКомиссияТМЦ;
	Объект.Записать();
	
	Возврат Объект.Ссылка; 
	
КонецФункции

Процедура ПеренестиСвободныеОстатки(знач СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	Регистратор = ПараметрыСеанса.абс_НастройкиСистемы.ДокументПереносаСвободныеОстатки;
	
	Если НЕ ЗначениеЗаполнено(Регистратор) Тогда 
		ДобавитьОшибкуПользователю(Ошибки, , "Не заполнена настройка: ""Документ переноса регистра Свободные остатки""");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РегистраторОбъект = Регистратор.ПолучитьОбъект();
	РегистраторОбъект.Дата = СтруктураПараметров.ДокументДвижений.Дата;
	РегистраторОбъект.абс_Заблокирована = Истина;
	РегистраторОбъект.ОбменДанными.Загрузка = Истина;
	РегистраторОбъект.Записать();
			
	ПериодОстатков = НачалоДня(СтруктураПараметров.Период)-1;
	ПериодРегистрации = НачалоДня(СтруктураПараметров.ДатаПереноса);
	
	НаборЗаписей = РегистрыНакопления.СвободныеОстатки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Записать();
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абс_СоответствияОбъектовПереноса.ОбъектИсточник,
	                      |	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	                      |ПОМЕСТИТЬ вт_Склады
	                      |ИЗ
	                      |	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.абс_СоответствиеДЗОФилиалов КАК абс_СоответствиеДЗОФилиалов
	                      |		ПО абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = абс_СоответствиеДЗОФилиалов.ДЗО
	                      |			И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = абс_СоответствиеДЗОФилиалов.Филиал
	                      |ГДЕ
	                      |	абс_СоответствияОбъектовПереноса.ТипПриемник = ""СправочникСсылка.Склады""
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	вт_Склады.ОбъектПриемник КАК Склад,
	                      |	СвободныеОстаткиОстатки.Номенклатура,
	                      |	СвободныеОстаткиОстатки.Качество,
	                      |	СвободныеОстаткиОстатки.ХарактеристикаНоменклатуры,
	                      |	СвободныеОстаткиОстатки.СерияНоменклатуры,
	                      |	СвободныеОстаткиОстатки.КоличествоОстаток КАК Количество,
	                      |	СвободныеОстаткиОстатки.КоличествоСУчетомСерииОстаток КАК КоличествоСУчетомСерии
	                      |ИЗ
	                      |	РегистрНакопления.СвободныеОстатки.Остатки(&Период, ) КАК СвободныеОстаткиОстатки
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Склады КАК вт_Склады
	                      |		ПО СвободныеОстаткиОстатки.Склад = вт_Склады.ОбъектИсточник");
						  
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодОстатков, ВидГраницы.Включая));
					  	
	ТаблицаРегистра = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРегистра.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	Если ТаблицаРегистра.Колонки.Найти("Период")=Неопределено Тогда
		ТаблицаРегистра.Колонки.Добавить("Период");
	КонецЕсли;
	//Если ТаблицаРегистра.Колонки.Найти("РегистрОснование")=Неопределено Тогда
	//	ТаблицаРегистра.Колонки.Добавить("РегистрОснование");
	//КонецЕсли;
	//
	ТаблицаРегистра.ЗаполнитьЗначения(ПериодРегистрации-24*3600, "Период");
	//ТаблицаРегистра.ЗаполнитьЗначения(Перечисления.ВидыРегистровОснованийРегистраСвободныеОстатки.ТоварыНаСкладах, "РегистрОснование");
		
	Попытка
		НаборЗаписей.Загрузить(ТаблицаРегистра);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	Исключение
		ДобавитьОшибкуПользователю(Ошибки, , "Не удалось записать регистр накопления ""Свободные остатки"" по причине:"+Символы.ПС+ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
		
	ЗаполнитьТаблицыРегистровДокументаДвижений(Регистратор);	
	
КонецПроцедуры

Функция ПолучитьДокументФилиала(ОбъектДЗО, СтруктураПараметров, Отказ, Ошибки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектДЗО) Тогда 
		Возврат ОбъектДЗО;
	КонецЕсли;
	
	МетаданныеДокумента = ОбъектДЗО.Метаданные();
	Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеДокумента) Тогда 
		Возврат ОбъектДЗО;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда 
		Если ОбъектДЗО.Организация = СтруктураПараметров.Филиал Тогда 
			Возврат ОбъектДЗО;
		КонецЕсли;	
	КонецЕсли;
		
	ОбъектФилиала = ПолучитьОбъектПоСоответствию(ОбъектДЗО, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
	Если ОбъектФилиала=Неопределено Тогда
		ОбъектФилиала = абс_Филиализация.ПолучитьДокумент(ОбъектДЗО, СтруктураПараметров, Ложь, Неопределено);						
	КонецЕсли;
	
	Возврат ОбъектФилиала;
	
КонецФункции

Функция ПерезаполнитьДокументВСубконто(НаборЗаписей, СтруктураПараметров, Отказ, Ошибки)
	
	Счет_76АВ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.АВ");
	Счет_76ВА = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.ВА");
		
	Для Каждого строка из НаборЗаписей Цикл
		
		Если строка.СчетДт = Счет_76АВ Тогда 
			строка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные] =  ПолучитьДокументФилиала(строка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные], СтруктураПараметров, Отказ, Ошибки);
		КонецЕсли;	
		Если строка.СчетКт = Счет_76АВ Тогда 
			строка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные] =  ПолучитьДокументФилиала(строка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные], СтруктураПараметров, Отказ, Ошибки);
		КонецЕсли;
		
		Если строка.СчетДт = Счет_76ВА Тогда 
			строка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные] =  ПолучитьДокументФилиала(строка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные], СтруктураПараметров, Отказ, Ошибки);
		КонецЕсли;	
		Если строка.СчетКт = Счет_76ВА Тогда 
			строка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные] =  ПолучитьДокументФилиала(строка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные], СтруктураПараметров, Отказ, Ошибки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ПеренестиСФНаАванс(СтруктураПараметров, Отказ, Ошибки)
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абс_СоответствияОбъектовПереноса.ОбъектИсточник,
	                      |	абс_СоответствияОбъектовПереноса.ОбъектПриемник,
	                      |	абс_СоответствиеДЗОФилиалов.ДЗО,
	                      |	абс_СоответствиеДЗОФилиалов.Филиал
	                      |ПОМЕСТИТЬ вт
	                      |ИЗ
	                      |	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.абс_СоответствиеДЗОФилиалов КАК абс_СоответствиеДЗОФилиалов
	                      |		ПО абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = абс_СоответствиеДЗОФилиалов.ДЗО
	                      |			И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = абс_СоответствиеДЗОФилиалов.Филиал
	                      |ГДЕ
	                      |	абс_СоответствияОбъектовПереноса.ТипПриемник ПОДОБНО ""ДокументСсылка%""
	                      |	И абс_СоответствиеДЗОФилиалов.ДЗО = &ДЗО
	                      |	И абс_СоответствиеДЗОФилиалов.Филиал = &Филиал
	                      |	И абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &ДЗО
	                      |	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &Филиал
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СчетФактураВыданный.Ссылка КАК СФ,
	                      |	СчетФактураВыданный.ДокументОснование,
	                      |	вт.ОбъектПриемник,
	                      |	вт.ДЗО,
	                      |	вт.Филиал
	                      |ИЗ
	                      |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	                      |		ПО СчетФактураВыданный.ДокументОснование = вт.ОбъектИсточник
	                      |ГДЕ
	                      |	НЕ СчетФактураВыданный.ПометкаУдаления
	                      |	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	                      |	И СчетФактураВыданный.Организация = &ДЗО");
						  
	Запрос.УстановитьПараметр("ДЗО", 	СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("Филиал", СтруктураПараметров.Филиал);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПОка Выборка.Следующий() Цикл
		ПолучитьДокументФилиала(Выборка.СФ, СтруктураПараметров, Отказ, Ошибки);	
	КонецЦикла;
	
КонецПроцедуры

