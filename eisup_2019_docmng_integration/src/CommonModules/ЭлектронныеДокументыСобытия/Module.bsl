////////////////////////////////////////////////////////////////
// МЕТОДЫ ПО РЕГИСТРАЦИИ ОБЪЕКТОВ ДЛЯ ОБМЕНА ЭД

// Обработчик события "ПередЗаписью" владельцев электронных документов.
//
// Параметры:
// Источник - объект - владелец присоединенного файла,
// Отказ - булево - признак отказа от записи,
// РежимЗаписи - РежимЗаписиДокумента - режим записи владельца электронного документа,
// РежимПроведения - РежимПроведенияДокумента - режим проведения владельца электронного документа.
//
Процедура ЭлектронныеДокументыВладелецПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// пометим на удаление (снимем пометку) электронные документы, связанные с владельцем
	Если НЕ Источник.ЭтоНовый() Тогда 
		ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
		Если Источник.ПометкаУдаления <> ИсточникСсылкаПометкаУдаления Тогда
			ПометитьНаУдалениеЭлектронныеДокументыПоВладельцу(Источник);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Константы.ИспользоватьОбменЭД.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	// ЭД делаем только когда заключено соглашение с контрагентом
	Если (НЕ Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение")	ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение) 
	   И НЕ ТипЗнч(Источник)=Тип("ДокументОбъект.ПакетЭД") 
	   И ЭлектронныеДокументы.ОпределитьНастройкиОбменаЭДПоИсточнику(Источник, Ложь) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьМодификациюОбъектаДляОбменаЭД(Источник);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" владельцев электронных документов.
//
// Параметры:
// Источник - объект - владелец присоединенного файла,
// Отказ - булево - признак отказа от записи.
//
Процедура ЭлектронныеДокументыВладелецПриЗаписи(Источник, Отказ) Экспорт
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение") 
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение Тогда
		ПроверитьНаличиеИУдалитьСостояниеДокумента(Источник);
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОбъект")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЗарегистрироватьОбъект Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьНовуюВерсиюЭД(Источник.Ссылка);
	
КонецПроцедуры

Процедура ПроверитьНаличиеИУдалитьСостояниеДокумента(Источник)	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = Источник.Ссылка;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает новую версию электронного документа для владельца.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на документ базы данных, номер версии электронного документа которого надо изменить,
// ПрисоединенныйФайл - ссылка на электронный документ, который в данный момент является актуальным
//
Процедура УстановитьНовуюВерсиюЭД(СсылкаНаОбъект, ПрисоединенныйФайл = Неопределено, УдалятьСтаруюВерсию = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект 	= СсылкаНаОбъект;
		НоваяЗаписьНабора.ЭлектронныйДокумент 	= ?(ПрисоединенныйФайл = Неопределено,  Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		НоваяЗаписьНабора.СостояниеВерсииЭД = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаОбъект, ЗначениеЗаполнено(ПрисоединенныйФайл));
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		Если УдалятьСтаруюВерсию Тогда
			УдалитьСтаруюВерсиюЭД(НоваяЗаписьНабора);
		КонецЕсли;
		Если СсылкаНаОбъект.ПометкаУдаления Тогда
			НоваяЗаписьНабора.СостояниеВерсииЭД	= Перечисления.СостоянияВерсийЭД.ПустаяСсылка();	
		Иначе
			НоваяЗаписьНабора.СостояниеВерсииЭД = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаОбъект, Истина);
		КонецЕсли;    
		Если ПрисоединенныйФайл = Неопределено ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		 ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено, Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		КонецЕсли;
	КонецЕсли;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьСтаруюВерсиюЭД(ЗаписьНабора)
	
	СтруктураВерсии = ЭлектронныеДокументы.ПолучитьСтруктуруВерсииЭД(ЗаписьНабора.СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДокумент) 
	   И (СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
		ДокументОбъект = СтруктураВерсии.СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
	КонецЕсли;
			
КонецПроцедуры

Процедура ПроверитьМодификациюОбъектаДляОбменаЭД(Источник, ПризнакИзменения = Ложь)
	
	Если ПризнакИзменения ИЛИ Источник.ЭтоНовый() Тогда
		ЗарегистрироватьОбъект = Истина;	
	Иначе
		ЗарегистрироватьОбъект = НадоЗарегистрироватьОбъект(Источник, Источник.Метаданные());
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗарегистрироватьОбъект", ЗарегистрироватьОбъект);
	
КонецПроцедуры

Процедура ПометитьНаУдалениеЭлектронныеДокументыПоВладельцу(Источник)

	ПолноеИмяОМ = "Справочник.ЭДПрисоединенныеФайлы";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Редактирует КАК Редактирует
	|ИЗ
	|	[ПолноеИмяОМ] КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И (Файлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|			ИЛИ Файлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОМ]", ПолноеИмяОМ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецФайла", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Источник.ПометкаУдаления И НЕ Выборка.Редактирует.Пустая() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '""%1"" не может быть удален, т.к. содержит файл ""%2"", занятый для редактирования.'"),
				Строка(Источник.Ссылка),
				Строка(Выборка.Ссылка));
		КонецЕсли;
		ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////
// МЕТОДЫ ПО РАБОТЕ С ЖУРНАЛОМ РЕГИСТРАЦИИ

Процедура ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(СсылкаНаОбъект, СсылкаНаЭД)
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		СобытиеЖурналаРегистрации = ЭлектронныеДокументыПереопределяемый.ТекстовоеПредставлениеСобытияДляЖР(СсылкаНаОбъект);
		ОбъектЭД = СсылкаНаЭД.ПолучитьОбъект();
		ТекстСтатусаЭД = Строка(ЭлектронныеДокументы.ПолучитьТекстСтатусаЭД(СсылкаНаЭД, Ложь));
		ТекстСообщения	 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.'"), ТекстСтатусаЭД);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, ОбъектЭД, СсылкаНаЭД, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////
// МЕТОДЫ ОПРЕДЕЛЕНИЯ МОДИФИЦИРОВАННОСТИ ОБЪЕКТА, АНАЛОГИЧНЫЕ ПОДСИСТЕМЕ ОБМЕНА ДАННЫМИ

Функция НадоЗарегистрироватьОбъект(Источник, ОбъектМетаданных)
	
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();	
	ТаблицаРеквизитовРегистрации = ЭлектронныеДокументы.ПолучитьТаблицуКлючевыхРеквизитовОбъекта(ИмяОбъекта);
	
	Если ТаблицаРеквизитовРегистрации.Количество() = 0 Тогда
		
		// если перечень реквизитов не задан, то считаем, что объект модифицирован всегда
		Возврат Истина;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыРеквизитовРегистрации ИЗ ТаблицаРеквизитовРегистрации Цикл
		
		ЕстьИзмененияВерсийОбъектов = ОпределитьИзмененияВерсийОбъекта(Источник, СтрокаТаблицыРеквизитовРегистрации);
		
		Если ЕстьИзмененияВерсийОбъектов Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// если дошли до конца, то объект не изменился по реквизитам регистрации;
	// регистрация не нужна
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда // реквизиты Шапки объекта
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		
	Иначе // реквизиты ТЧ объекта
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		
	КонецЕсли;
	
	Возврат НЕ ЭлектронныеДокументы.ТаблицыРеквизитовОбъектовОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения, ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения, СтрокаТаблицыРеквизитовРегистрации);
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Возврат ЭлектронныеДокументы.ПолучитьТаблицуРеквизитовШапки(Объект, СтрокаТаблицыРеквизитовРегистрации);
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Возврат ЭлектронныеДокументы.ПолучитьТаблицуРеквизитовТабличнойЧасти(Объект, СтрокаТаблицыРеквизитовРегистрации);
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовОбъекта;	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
		
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
		
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(, СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

////////////////////////////////////////////////////////////////
// МЕТОДЫ ПРИ ИЗМЕНЕНИИ ЭД

// Обработчик события "ПриЗаписи" электронных документов.
// 
// Параметры:
// Источник - объект - электронный документ,
// Отказ - булево - признак отказа от записи.
//
Процедура ПриЗаписиЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаВладельца = Источник.ВладелецФайла;
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписатьСобытиеЖР") 
		И Источник.ДополнительныеСвойства.ЗаписатьСобытиеЖР Тогда
		ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(СсылкаНаВладельца, Источник.Ссылка);
	КонецЕсли;
	
	СостояниеВерсииЭД = Неопределено;
	
	Если Источник.ДополнительныеСвойства.Свойство("СоглашениеЭД")	 Тогда
		СостояниеВерсииЭД = ЭлектронныеДокументы.ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка);
	КонецЕсли;	
	
	Если Источник.ДополнительныеСвойства.Свойство("СостояниеВерсииЭД") Тогда 
		СледСостояниеВерсииЭД 	= Источник.ДополнительныеСвойства.СостояниеВерсииЭД;
		СтруктураТекВерсииЭД	= ЭлектронныеДокументы.ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
		Если СледСостояниеВерсииЭД <> СтруктураТекВерсииЭД.СостояниеВерсииЭД Тогда
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаВладельца);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество()=0 Тогда
				НоваяЗаписьНабора = НаборЗаписей.Добавить();
				НоваяЗаписьНабора.СсылкаНаОбъект 	= СсылкаНаВладельца;
			Иначе
				НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			КонецЕсли;
			
			Если Источник.Ссылка = НоваяЗаписьНабора.ЭлектронныйДокумент ИЛИ ((Источник.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
																			   ИЛИ Источник.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)  
				И НоваяЗаписьНабора.ЭлектронныйДокумент.Пустая()) тогда
				НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументы.ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка);
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" электронных документов.
// 
// Параметры:
// Источник - объект - электронный документ,
// Отказ - булево - признак отказа от записи.
//
Процедура ПередЗаписьюЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		ОбработатьУдалениеЭлектронногоДокумента(Источник);
		Возврат;
	КонецЕсли;
		
	// назначение статуса ЭД
	Если НЕ ЗначениеЗаполнено(Источник.НаправлениеЭД) 
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВидЭД) 
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВладелецФайла) 
		ИЛИ ТипЗнч(Источник.ВладелецФайла) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда 
		Возврат;
	КонецЕсли;
		
		
	Если НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда // первый раз записываем
		Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		Возврат;
	КонецЕсли;

	Если Источник.СтатусЭД = Источник.Ссылка.СтатусЭД Тогда // не изменился статус
		Возврат;
	КонецЕсли; 
	Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
	
	Источник.ДополнительныеСвойства.Вставить("СостояниеВерсииЭД", ЭлектронныеДокументы.ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка));
	
КонецПроцедуры

Функция ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаВладельца, ПризнакПолучения = Ложь)
	
	СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	ПараметрыЭД = ЭлектронныеДокументыПереопределяемый.ОпределитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
	 ИЛИ ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован;
	ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Если ПризнакПолучения Тогда 
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
		Иначе
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен;
		КонецЕсли;
	КонецЕсли;	
		
	Возврат СостояниеВерсииЭД;
	
КонецФункции

Процедура ОбработатьУдалениеЭлектронногоДокумента(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросДокументовИБ = Новый Запрос;
	ЗапросДокументовИБ.УстановитьПараметр("ЭлектронныйДокумент", Источник.Ссылка);
	ЗапросДокументовИБ.Текст = "ВЫБРАТЬ
	                           |	СостоянияЭД.СсылкаНаОбъект
	                           |ИЗ
	                           |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	                           |ГДЕ
	                           |	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент";
							   
	ВыборкаДокументов = ЗапросДокументовИБ.Выполнить().Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВыборкаДокументов.СсылкаНаОбъект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			Продолжить;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		КонецЕсли;
		НоваяЗаписьНабора.СостояниеВерсииЭД = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(ВыборкаДокументов.СсылкаНаОбъект);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры
