Процедура ОбменCSQL(КодНастройки)  Экспорт
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Справочники.абс_НастройкиОбменаСSQL.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена)
		ИЛИ НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.абс_НастройкиОбменаСSQL.ВыполнитьОбмен(НастройкаОбмена);	
		
КонецПроцедуры


Процедура ПередЗаписьюДокументов(Источник,Отказ, РежимЗаписи, РежимПроведения)  Экспорт
	
	Если Источник.ОбменДанными.Загрузка  ТОгда
		Возврат;
	КонецЕсли;
	Если Отказ ТОгда
		ВОзврат;
	КонецЕсли;

	ТекЭтапМэппинга = абс_ПроцедурыСПовторнымВызовом.ПолучитьЭтапыМэппингаПоИннКппДляТекущейБазы();
	

	Если  ТекЭтапМэппинга <> 3 ТОгда
		Возврат;
	КонецЕсли ;
	
	УстановитьПривилегированныйРежим(Истина);
	
		
	
	абс_ОбработчикWebService = абс_WebService.ПолучитьОбработчикWebService();
    абс_ОбработчикWebService.ПередЗаписьюДокументов(Источник,Отказ, РежимЗаписи, РежимПроведения);
	
	
	УстановитьПривилегированныйРежим(ЛОжь);
	//Если Константы.абс_ОтключитьКонтрольЗаписиДокументовИСправочниковСактивнымКонтрагентом.Получить()  ТОгда
	//	Возврат;	
	//КонецЕсли;
	//Если РежимЗаписи <> РежимЗаписиДокумента.Запись  и РежимЗаписи <> РежимЗаписиДокумента.Проведение   Тогда
	//	Возврат;	
	//КонецЕсли;
	//
	//Если Источник.ОбменДанными.Загрузка  ТОгда
	//	Возврат;
	//КонецЕсли;
	//Если Отказ ТОгда
	//	ВОзврат;
	//КонецЕсли;
	//Если  ( Источник.Метаданные().Имя = "абс_ЗаявкаНаИзменениеРеквизитовКонтрагента" )
	//	  Или  ( Источник.Метаданные().Имя = "абс_ЗакупочныйЗаказ" )
	//																				ТОгда
	//КонецЕсли;
	//ТекИмяМетаданных = Источник.Метаданные().Имя ;
	//
	//ЗАпрос = Новый запрос;
	//ЗАпрос.УстановитьПараметр("ТипДокументы","Документы");
	//ЗАпрос.УстановитьПараметр("ВидМетаданных",ТекИмяМетаданных) ;
	//
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ВидМетаданных
	//|ИЗ
	//|	РегистрСведений.АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов КАК АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов
	//|ГДЕ
	//|	АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ТипМетаданных = &ТипДокументы
	//|	И АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.НеКонтролировать = ИСТИНА
	//|	И АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ВидМетаданных = &ВидМетаданных";
	//
	//ТЗ = Запрос.Выполнить().Выгрузить();
	//
	//Если ТЗ.Количество() <> 0 ТОгда
	//	Возврат;
	//КонецЕсли;
	//
	//ТИпКонтрагентаСсылка = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка());
	//ТекМетаданные = Источник.Метаданные().Имя;
	//
	//СЗОшибок = Новый СписокЗначений;
	//Для Каждого Реквизиты из Источник.Метаданные().Реквизиты Цикл
	//	
	//	Если ТипЗнч(Источник[Реквизиты.Имя]) =   ТИпКонтрагентаСсылка Тогда
	//		
	//		Если ЗначениеЗаполнено(Источник[Реквизиты.Имя]) И Источник[Реквизиты.Имя].Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.Активный ТОгда
	//			СЗОшибок.Добавить("Реквизит: " +	Реквизиты.Синоним+"  - выбраный контрагент не является активным!");
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если  СЗОшибок.Количество() <> 0 ТОгда
	//	Для Каждого СТрокаСЗ из СЗОшибок Цикл
	//		Сообщить(СТрокаСЗ.Значение);	
	//	КонецЦикла;
	//	
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
	//Если  Источник.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено ТОгда
	//	Если ТипЗнч(Источник["Контрагент"].Ссылка) =  ТипЗнч(Справочники.Контрагенты.ПустаяСсылка())  ТОгда
	//		Если  Источник["Контрагент"].Абс_СТатусКонтрагента <>Перечисления.абсСтатусыКонтрагентов.Активный ТОгда
	//			Сообщить("Выбраный контрагент не является Активным!!!");
	//			Отказ = Истина;
	//			Возврат;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли
	
	// Вставить содержимое обработчика.
КонецПРоцедуры
	
Процедура ПриЗаписиДоговора(Источник,Отказ)  Экспорт
	
	Если Источник.ОбменДанными.Загрузка  ТОгда
		Возврат;
	КонецЕсли;
	
	Если Отказ ТОгда
		ВОзврат;
	КонецЕсли;
	
	
	ТекЭтапМэппинга = абс_ПроцедурыСПовторнымВызовом.ПолучитьЭтапыМэппингаПоИннКппДляТекущейБазы();
	

	Если  ТекЭтапМэппинга <> 3 ТОгда
		Возврат;
	КонецЕсли ;

	
	абс_ОбработчикWebService = абс_WebService.ПолучитьОбработчикWebService();
    абс_ОбработчикWebService.ПриЗаписиДоговора(Источник,Отказ);
	//Если Константы.абс_ОтключитьКонтрольЗаписиДокументовИСправочниковСактивнымКонтрагентом.Получить()  ТОгда
	//	Возврат;	
	//КонецЕсли;	
	//
	//Если Источник.ОбменДанными.Загрузка  ТОгда
	//	Возврат;
	//КонецЕсли;
	//
	//Если Отказ ТОгда
	//	ВОзврат;
	//КонецЕсли;
	//
	//
	//ТекМетаданне = Источник.Ссылка.Метаданные();
	//
	//Если   (ТекМетаданне.Имя =   "ХранилищеДополнительнойИнформации") или  ТекМетаданне.Имя  = "Контрагенты" ТОгда
	//	Возврат;
	//КонецЕсли;
	//
	//	
	//ТекИмяМетаданных = Источник.Метаданные().Имя ;
	//
	//ЗАпрос = Новый запрос;
	//ЗАпрос.УстановитьПараметр("ТипДокументы","Справочники");
	//ЗАпрос.УстановитьПараметр("ВидМетаданных",ТекИмяМетаданных) ;
	//
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ВидМетаданных
	//|ИЗ
	//|	РегистрСведений.АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов КАК АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов
	//|ГДЕ
	//|	АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ТипМетаданных = &ТипДокументы
	//|	И АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.НеКонтролировать = ИСТИНА
	//|	И АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ВидМетаданных = &ВидМетаданных";
	//
	//ТЗ = Запрос.Выполнить().Выгрузить();
	//
	//Если ТЗ.Количество() <> 0 ТОгда
	//	Возврат;
	//КонецЕсли;
	//
	//ТИпКонтрагентаСсылка = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка());
	//ТекМетаданные = Источник.Метаданные().Имя;
	//
	//СЗОшибок = Новый СписокЗначений;
	//Для Каждого Реквизиты из Источник.Метаданные().Реквизиты Цикл
	//	
	//	Если ТипЗнч(Источник[Реквизиты.Имя]) =   ТИпКонтрагентаСсылка Тогда
	//		
	//		Если ЗначениеЗаполнено(Источник[Реквизиты.Имя]) И Источник[Реквизиты.Имя].Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.Активный ТОгда
	//			СЗОшибок.Добавить("Реквизит: " +	Реквизиты.Синоним+"  - выбраный контрагент не является активным!");
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//Если ЗначениеЗаполнено(Источник.Владелец) ТОгда
	//	Если ТипЗнч(Источник.Владелец) =   ТИпКонтрагентаСсылка   ТОгда
	//			СЗОшибок.Добавить("Реквизит: Владелец (контрагент)  - выбраный контрагент не является активным!");
	//	КонецЕсли;
	//КонецЕсли;
	//
	//
	//Если  СЗОшибок.Количество() <> 0 ТОгда
	//	Для Каждого СТрокаСЗ из СЗОшибок Цикл
	//		Сообщить(СТрокаСЗ.Значение);	
	//	КонецЦикла;
	//	
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	//

	
	
КонецПРоцедуры

&НаСервере
Функция ВыполнитьПодключениеКSQL(Настройка) Экспорт
	
    удачноеСоединение = Истина;
	Попытка
		//ConnectionString="Provider=sqloledb; SERVER="+СокрЛП(Настройка.Provider)+";UID="+СокрЛП(Настройка.UserID)+";PWD="+СокрЛП(Настройка.Password)+";DATABASE="+СокрЛП(Настройка.DataSource)+";";
		Если Не ПустаяСтрока(СокрЛП(Настройка.UserID)) И Не ПустаяСтрока(СокрЛП(Настройка.Password)) Тогда
			ConnectionString="Provider=sqloledb; SERVER="+СокрЛП(Настройка.Provider)+";UID="+СокрЛП(Настройка.UserID)+";PWD="+СокрЛП(Настройка.Password)+";DATABASE="+СокрЛП(Настройка.DataSource)+";";
		Иначе
			ConnectionString="Provider=sqloledb; SERVER="+СокрЛП(Настройка.Provider)+";Integrated Security=SSPI;DATABASE="+СокрЛП(Настройка.DataSource)+";";
		КонецЕсли;
		Соединение=Новый COMОбъект("ADODB.Connection");
		Соединение.Open(СокрЛП(ConnectionString));
	Исключение
		Попытка
			ConnectionString="DRIVER={SQL Server};SERVER="+СокрЛП(Настройка.Provider)+";UID="+СокрЛП(Настройка.UserID)+";PWD="+СокрЛП(Настройка.Password)+";DATABASE="+СокрЛП(Настройка.DataSource)+";";
			Соединение=Новый COMОбъект("ADODB.Connection");
			Соединение.Open(СокрЛП(ConnectionString));
		Исключение
			Сообщить(ОписаниеОшибки());
			удачноеСоединение = Ложь;	
		КонецПопытки;
	КонецПопытки; 
	
	  Возврат удачноеСоединение;
	
  КонецФункции
  
&НаСервере
Функция ВыполнитьПодключениеКSQLВернутьСоединение(Настройка) Экспорт
	удачноеСоединение = Истина;
	Попытка
		//ConnectionString="Provider=sqloledb; SERVER="+СокрЛП(Настройка.Provider)+";UID="+СокрЛП(Настройка.UserID)+";PWD="+СокрЛП(Настройка.Password)+";DATABASE="+СокрЛП(Настройка.DataSource)+";";
		Если Не ПустаяСтрока(СокрЛП(Настройка.UserID)) И Не ПустаяСтрока(СокрЛП(Настройка.Password)) Тогда
			ConnectionString="Provider=sqloledb; SERVER="+СокрЛП(Настройка.Provider)+";UID="+СокрЛП(Настройка.UserID)+";PWD="+СокрЛП(Настройка.Password)+";DATABASE="+СокрЛП(Настройка.DataSource)+";";
		Иначе
			ConnectionString="Provider=sqloledb; SERVER="+СокрЛП(Настройка.Provider)+";Integrated Security=SSPI;DATABASE="+СокрЛП(Настройка.DataSource)+";";
		КонецЕсли;
			Соединение=Новый COMОбъект("ADODB.Connection");
			Соединение.Open(СокрЛП(ConnectionString));
	Исключение
		Попытка
			ConnectionString="DRIVER={SQL Server};SERVER="+СокрЛП(Настройка.Provider)+";UID="+СокрЛП(Настройка.UserID)+";PWD="+СокрЛП(Настройка.Password)+";DATABASE="+СокрЛП(Настройка.DataSource)+";";
			Соединение=Новый COMОбъект("ADODB.Connection");
			Соединение.Open(СокрЛП(ConnectionString));
		Исключение
			Сообщить(ОписаниеОшибки());
			Соединение = Ложь;	
		КонецПопытки;
	КонецПопытки; 
	
	Возврат Соединение;  
	  
  КонецФункции
  
  
&НаСервере
Функция ЗапросВТаблицуSQL(ТекстЗапроса,Настройка) Экспорт
	
	Перем ТаблицаРезультат;
	Перем Соединение;
	
	Если Соединение = Неопределено Тогда
		Соединение = ВыполнитьПодключениеКSQLВернутьСоединение(Настройка);
	КонецЕсли;
	
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;	
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	
	Cmd.CommandText = ТекстЗапроса;
	Rs = Новый COMОбъект("ADODB.RecordSet"); 
	
	Попытка
		
		Rs = Cmd.Execute(); 		
		КолонкиРезультат = ТаблицаРезультат.Колонки;
		
		Для ИндексКолонки = 0 По Rs.Fields.Count - 1 Цикл
			Если КолонкиРезультат.Найти(Rs.Fields(ИндексКолонки).name) = Неопределено Тогда
				КолонкиРезультат.Добавить(Rs.Fields(ИндексКолонки).name);
			КонецЕсли;
		КонецЦикла;
		
		Если Rs.BOF = 0 Тогда
			Rs.MoveFirst();                 
			Пока Rs.EOF() = 0 do  
				
				ТекСтрокаРезультат = ТаблицаРезультат.Добавить();
				
				Для Каждого ТекКолонка Из ТаблицаРезультат.Колонки Цикл
					ТекСтрокаРезультат[ТекКолонка.Имя] = Rs.Fields(ТекКолонка.Имя).Value;
				КонецЦикла;
				
				Rs.MoveNext();  
			КонецЦикла;
		КонецЕсли;	  
		
		Rs.Close();
		
	Исключение
		
		Сообщить("Запрос не выполнен: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		
		ТаблицаРезультат.Очистить();
		
	КонецПопытки;
	
	Возврат ТаблицаРезультат;
	
КонецФункции 
&НаСервере
Функция ПрочитатЗаписиЧерезХранимыПроцедуры(НомерПоследнейЗагруженнойВерсии,СтруктураПодключения)  Экспорт
	
	ТекстрЗапроса ="Exec "+СтруктураПодключения.DataSource+".dbo.Kontractors_sel_IDChange "+СтрЗаменить(СокрЛП(НомерПоследнейЗагруженнойВерсии),Символ(160),"");
	
	ТЗ = ЗапросВТаблицуSQL(ТекстрЗапроса,СтруктураПодключения);
	ТЗ.Сортировать("ID_Change");
	
	Возврат ТЗ;
КонецФункции
&НаСервере
Функция ПрочитатЗаписиЧерезХранимыПроцедурыМаксимумы(СтруктураПодключения)  Экспорт
	                                                                                          
	ТекстрЗапроса ="Exec "+СтруктураПодключения.DataSource+".dbo.Kontractors_sel_Max_IDChange ";
	
	ТЗ = ЗапросВТаблицуSQL(ТекстрЗапроса,СтруктураПодключения);
	ТЗ.Сортировать("ID_Change");
	
	Возврат ТЗ;
КонецФункции

//АБС ВСТАВКА Навценя 18.02.2015

Процедура ИнтеграцияCognos_ЗагрузитьВводаБюджета(Организация, ПериодГод) Экспорт
	
	Справочники.абс_НастройкиОбменаСSQL.ИнтеграцияCognos_ЗагрузитьВводаБюджета(Организация, ПериодГод);
	
КонецПроцедуры

//АБС ВСТАВКА КОНЕЦ	


	