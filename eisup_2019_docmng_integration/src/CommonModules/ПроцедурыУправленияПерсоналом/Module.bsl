
// Выполняет расчет часовой тарифной ставки работника
// Возвращает результат с учетом курса валюты тарифной ставки
//
Функция ЧасоваяТарифнаяСтавкаРаботникаОрг(Знач Сотрудник, Знач ДатаАктуальности, Знач ДатаВалютногоУчета, ВалютаРегламентированногоУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	Запрос.УстановитьПараметр("ДатаАктуальности",	ДатаАктуальности);
	Запрос.УстановитьПараметр("ТекущийМесяц",		НачалоМесяца(ДатаАктуальности));
	Запрос.УстановитьПараметр("ДатаВалютногоУчета",	НачалоМесяца(ДатаВалютногоУчета));
	Запрос.УстановитьПараметр("РегламентВалюта",	ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Год",				Год(ДатаАктуальности));

	// НормаВремениПоСводнымИндивидуальнымГрафикам
	// 
	//	Поля:
	//		Часов - указанное пользователем значение
	// 
	// НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	//		Таблица нормы времени в часах, введенной индивидуальными графиками
	// 
	//	Поля:
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени,	
	//	введенные доками ВводИндивидуальныхГрафиков, т.е. по строкам с выставленным флажком План
	// 
	// НормаВремениПоОбщимГрафикам
	//		Таблица нормы времени в часах по общим графикам
	// 
	//	Поля:
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени для общих графиков
		
		
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|		ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|	КОНЕЦ КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА РазмерТарифныхСтавок.Размер
	|					ИНАЧЕ ОсновноеНачисление.Показатель1Завершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА РазмерТарифныхСтавок.Размер
	|				ИНАЧЕ ОсновноеНачисление.Показатель1
	|			КОНЕЦ
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавок.Валюта
	|						ИНАЧЕ ОсновноеНачисление.Валюта1
	|					КОНЕЦ
	|			КОНЕЦ В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|	КОНЕЦ КАК ОкладТариф
	|ПОМЕСТИТЬ ВТРазмерОсновногоНачисления
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			Сотрудник = &Сотрудник
	|				И ВидРасчетаИзмерение.Код ЕСТЬ NULL ) КАК ОсновноеНачисление
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаВалютногоУчета, ) КАК РазмерТарифныхСтавок
	|		ПО (ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ОсновноеНачисление.ТарифныйРазряд1Завершения
	|				ИНАЧЕ ОсновноеНачисление.ТарифныйРазряд1
	|			КОНЕЦ = РазмерТарифныхСтавок.ТарифныйРазряд)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО (Валюты.Валюта = ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавок.Валюта
	|						ИНАЧЕ ОсновноеНачисление.Валюта1
	|					КОНЕЦ
	|			КОНЕЦ)
	|			И (Валюты.Период = &ДатаВалютногоУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
	|							И РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|					ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СокращенноеРабочееВремя
	|				И РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ДлительностьРабочейНедели
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ДлительностьРабочейНедели
	|	КОНЕЦ КАК ДлительностьРабочейНедели,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ВидГрафика
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ВидГрафика
	|	КОНЕЦ КАК ВидГрафика
	|ПОМЕСТИТЬ ВТДанныеРаботника
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СводныеИндивидуальныеГрафики.Часов КАК Часов
	|ПОМЕСТИТЬ ВТНормаВремениПоСводнымИндивидуальнымГрафикам
	|ИЗ
	|	РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник = &Сотрудник
	|	И СводныеИндивидуальныеГрафики.Месяц = &ТекущийМесяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &Сотрудник
	|	И ГрафикиРаботыПоВидамВремени.Месяц = &ТекущийМесяц
	|	И ГрафикиРаботыПоВидамВремени.План
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоОбщимГрафикам
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы В
	|			(ВЫБРАТЬ
	|				ГрафикиНормыВремени.ГрафикРаботы
	|			ИЗ
	|				ВТДанныеРаботника КАК ГрафикиНормыВремени)
	|	И ГрафикиРаботыПоВидамВремени.Месяц = &ТекущийМесяц
	|	И ГрафикиРаботыПоВидамВремени.План
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоРабочихДней,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.Год = &Год
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоРабочихДней,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаряЗаМесяц
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) = &ТекущийМесяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
	|			ТОГДА ОсновноеНачисление.ОкладТариф
	|		КОГДА ОсновноеНачисление.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням))
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) = 0
	|										ТОГДА 0
	|									КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|										ТОГДА 0
	|									ИНАЧЕ ОсновноеНачисление.ОкладТариф / (ДанныеРаботника.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) * 12
	|								КОНЕЦ
	|						КОГДА ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоМесячнойНормеПоПроизводственномуКалендарю)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) = 0
	|										ТОГДА 0
	|									КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|										ТОГДА 0
	|									ИНАЧЕ ОсновноеНачисление.ОкладТариф / (ДанныеРаботника.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0))
	|								КОНЕЦ
	|						КОГДА ВЫБОР
	|								КОГДА СводныеИндивидуальныеГрафики.Часов ЕСТЬ НЕ NULL 
	|									ТОГДА СводныеИндивидуальныеГрафики.Часов
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ЧасовЗаМесяц, 0)
	|							КОНЕЦ = 0
	|							ТОГДА 0
	|						ИНАЧЕ ОсновноеНачисление.ОкладТариф / ВЫБОР
	|								КОГДА СводныеИндивидуальныеГрафики.Часов ЕСТЬ НЕ NULL 
	|									ТОГДА СводныеИндивидуальныеГрафики.Часов
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ЧасовЗаМесяц, 0)
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		КОГДА ОсновноеНачисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|							ТОГДА 0
	|						ИНАЧЕ ОсновноеНачисление.ОкладТариф / ДанныеРаботника.ДлительностьРабочейНедели * ВЫБОР
	|								КОГДА ДанныеРаботника.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Размер
	|ИЗ
	|	ВТДанныеРаботника КАК ДанныеРаботника
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерОсновногоНачисления КАК ОсновноеНачисление
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряЗаМесяц КАК ДанныеПроизводственногоКалендаряЗаМесяц
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоСводнымИндивидуальнымГрафикам КАК СводныеИндивидуальныеГрафики
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам КАК НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоОбщимГрафикам КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ИСТИНА)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Размер;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ЧасоваяТарифнаяСтавкаРаботникаОрг()

// Возвращает значение ставки НДФЛ с доходов нерезидентов 
//
// Параметры
//	КодДохода - код дохода, для которого определяется ставка
//  ДатаНалоговогоПериода - дата, определяет налоговый период, к которому относится доход
//
Функция ЗначениеСтавкиНДФЛСНерезидента(КодДохода = Неопределено, ДатаНалоговогоПериода = '00010101') Экспорт
	Если КодДохода = Справочники.ДоходыНДФЛ.Код1010 И ДатаНалоговогоПериода >= '20080101' Тогда // с 1 января 2008 года для нерезидентов изменена ставка налогообложения дивидендов с 30% до 15%
		Возврат 15;
	Иначе 	
		Возврат 30;
	КонецЕсли;
КонецФункции 

// Определяет значение ставки налога для СтавкиНалоообложенияРезидента
// Параметры:
//  СтавкаНалогообложенияРезидента - ссылка на перечисление "НДФЛСтавкиНалогообложенияРезидента"
// Возвращаемое значение:
//  число - ставка налога в процентах
Функция ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(СтавкаНалогообложенияРезидента) Экспорт
	Если 	СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13 Тогда
		Возврат 13;
	ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09 Тогда
		Возврат 9;
	ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
		Возврат 35;
	КонецЕсли;
	Возврат 0;
КонецФункции

// Выделяет из кода элемента адресного классификатора код региона (24 и 25 цифры кода)
//
// Параметры
//  КодАдресногоЭлемента  – Строка – код элемента  адресного классификатора
//
// Возвращаемое значение:
//   Строка   – код региона РФ
//
Функция ПолучитьКодРегионаРФИзКодаАдресногоЭлемента(КодАдресногоЭлемента) Экспорт

	СтрКодАдрЭлемента = Формат(КодАдресногоЭлемента, "ЧГ=0");
	Если СтрКодАдрЭлемента = "" Тогда
		Возврат "";
	КонецЕсли; 
	КодРегиона = Лев(СтрКодАдрЭлемента, СтрДлина(СтрКодАдрЭлемента) - 23);
	// Код региона должен состоять из 2 цифр. Например: 03, 77
	Возврат  Прав("00" + КодРегиона,2);
	
КонецФункции 

// Заполняет реквизит "КраткийСоставДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента					– табличная часть документа по которой происходит заполнение реквизита
//  ДополнительнаяТЧДокумента	- табличная часть документа, как правило это ТЧ с дополнительными начислениями
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставДокумента".
//
Функция ЗаполнитьКраткийСоставДокумента(ТЧДокумента, ИмяРеквизита = "Сотрудник") Экспорт

	КраткийСоставДокумента = "";
	
	КоличествоТЧ = 1;
	КраткийСоставДокументаЗаполнен = Ложь;
	Для каждого ТабличнаяЧастьДокумента Из ТЧДокумента Цикл
		
		Если НЕ КраткийСоставДокументаЗаполнен Тогда
			
			Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
				
				ФИОФизЛица = ОбщегоНазначения.ФамилияИнициалыФизЛица(СтрокаТЧ[ИмяРеквизита]);
				Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
					
					Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
						КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
					Иначе
						
						Если КоличествоТЧ = 1 Тогда
							КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
						Иначе
							
							Если Лев(КраткийСоставДокумента,2) = ", " Тогда
								КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
							Иначе
								КраткийСоставДокумента = Лев(КраткийСоставДокумента,97) + "...";
							КонецЕсли;
							
						КонецЕсли; 
						
						КраткийСоставДокументаЗаполнен = Истина;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
			
			КоличествоТЧ = КоличествоТЧ + 1;
			
		КонецЕсли; 
		
		Если КраткийСоставДокументаЗаполнен Тогда
			Прервать
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

// Функция формирует наименовние элемента справочника СотрудникиОрганизаций
//
// Параметры
//  <Физлицо>  – <СправочникСсылка.ФизическиеЛица> – физлицо 
//  <Постфикс>  – <Строка> – постфикс наименования сотрудника
//
// Возвращаемое значение:
//   <Строка>   – наименование сотрудника
//
Функция УстановитьНаименованиеСотрудника(Физлицо, Постфикс) Экспорт

	Возврат  Физлицо.Наименование + ?(ЗначениеЗаполнено(Постфикс), " " + Постфикс, "");

КонецФункции // УстановитьНаименованиеСотрудника()


// Функция определяет пол физлица по его отчеству
//
Функция ПолучитьПол(ОтчествоРаботника) Экспорт
	
	Если Прав(ОтчествоРаботника, 2) = "ич" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Мужской;
	
	ИначеЕсли Прав(ОтчествоРаботника, 2) = "на" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Женский;
	
	КонецЕсли;
	
	Возврат Перечисления.ПолФизическихЛиц.ПустаяСсылка();
	
КонецФункции // ПолучитьПол()

// Получение значения учетной политики по персоналу
// Если в соответствии по данной организации нет политики - пытаемся прочитать ее из ИБ, если там нет - 
// она добавляется как политика по умолчанию
//
// Параметры:
//
//  УчетнаяПолитика - соответствие политик по организациям
//  Организация - ссылка на организацию
//  ИмяПолитики - название получаемой учетной политики
//
Функция ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитика, Организация, ИмяПолитики) Экспорт
	
	Если УчетнаяПолитика[Организация] = Неопределено Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация,
		|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ПроверкаПериодовНачисления, ЛОЖЬ) КАК ПроверкаПериодовНачисления,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ЕдиныйНумераторКадровыхДокументов, ЛОЖЬ) КАК ЕдиныйНумераторКадровыхДокументов,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроверкаШтатногоРасписания, ЛОЖЬ) КАК ПроверкаШтатногоРасписания,
		|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.РасчетЗарплатыОрганизацииПоОтветственным, ЛОЖЬ) КАК РасчетЗарплатыОрганизацииПоОтветственным,
		|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ИспользуютсяНачисленияВВалюте, ЛОЖЬ) КАК ИспользуютсяНачисленияВВалюте,
		|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УпрощенныйУчетНДФЛ, ЛОЖЬ) КАК УпрощенныйУчетНДФЛ,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПоказыватьТабельныеНомераВДокументах, ЛОЖЬ) КАК ПоказыватьТабельныеНомераВДокументах,
		|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УчетЗадолженностиПоМесяцам, ИСТИНА) КАК УчетЗадолженностиПоМесяцам,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах, ЛОЖЬ) КАК ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах,
		|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УчитыватьНевыходыДляПлановогоАванса, ИСТИНА) КАК УчитыватьНевыходыДляПлановогоАванса,
		|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ДатаРасчетаПлановогоАванса, 15) КАК ДатаРасчетаПлановогоАванса,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПорядокСписанияФактическихОтпусков, ЗНАЧЕНИЕ(Перечисление.ПорядокСписанияФактическихОтпусков.РасчетнымиДокументами)) КАК ПорядокСписанияФактическихОтпусков,
		|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УпрощенныйУчетВзаиморасчетов, ЛОЖЬ) КАК УпрощенныйУчетВзаиморасчетов
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Организация)
		|ГДЕ
		|	Организации.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка",Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			УчетнаяПолитика.Вставить(Организация, 
				Новый Структура(
				"ЕдиныйНумераторКадровыхДокументов,
				|ПроверкаШтатногоРасписания,
				|РасчетЗарплатыОрганизацииПоОтветственным,
				|УпрощенныйУчетНДФЛ,
				|ИспользуютсяНачисленияВВалюте,
				|ПоказыватьТабельныеНомераВДокументах,
				|УчетЗадолженностиПоМесяцам,
				|ПроверкаПериодовНачисления,
				|ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах,
				|УчитыватьНевыходыДляПлановогоАванса,
				|ДатаРасчетаПлановогоАванса,
				|ПорядокСписанияФактическихОтпусков,
				|УпрощенныйУчетВзаиморасчетов",
				Выборка.ЕдиныйНумераторКадровыхДокументов,
				Выборка.ПроверкаШтатногоРасписания,
				Выборка.РасчетЗарплатыОрганизацииПоОтветственным,
				Выборка.УпрощенныйУчетНДФЛ,
				Выборка.ИспользуютсяНачисленияВВалюте,
				Выборка.ПоказыватьТабельныеНомераВДокументах,
				Выборка.УчетЗадолженностиПоМесяцам,
				Выборка.ПроверкаПериодовНачисления,
				Выборка.ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах,
				Выборка.УчитыватьНевыходыДляПлановогоАванса,
				Выборка.ДатаРасчетаПлановогоАванса,
				Выборка.ПорядокСписанияФактическихОтпусков,
				Выборка.УпрощенныйУчетВзаиморасчетов));
		Иначе 
			УчетнаяПолитика.Вставить(Организация, 
				Новый Структура(
				"ЕдиныйНумераторКадровыхДокументов,
				|ПроверкаШтатногоРасписания,
				|РасчетЗарплатыОрганизацииПоОтветственным,
				|УпрощенныйУчетНДФЛ,
				|ИспользуютсяНачисленияВВалюте,
				|ПоказыватьТабельныеНомераВДокументах,
				|УчетЗадолженностиПоМесяцам,
				|ПроверкаПериодовНачисления,
				|ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах,
				|УчитыватьНевыходыДляПлановогоАванса,
				|ДатаРасчетаПлановогоАванса,
				|ПорядокСписанияФактическихОтпусков,
				|УпрощенныйУчетВзаиморасчетов",
				Ложь,
				Ложь,
				Ложь,
				Ложь,
				Ложь,
				Ложь,
				Истина,
				Ложь,
				Ложь,
				Истина,
				15,
				Перечисления.ПорядокСписанияФактическихОтпусков.РасчетнымиДокументами,
				Ложь));
		КонецЕсли;
	КонецЕсли;
	
	Возврат УчетнаяПолитика[Организация][ИмяПолитики];
	
КонецФункции // ЗначениеУчетнойПолитикиПоПерсоналуОрганизации()

// Получение значения учетной политики по персоналу
//
// Параметры:
//
//  УчетнаяПолитика - соответствие политик по организациям
//  ИмяПолитики - название получаемой учетной политики
//
Функция ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(УчетнаяПолитика, ИмяПолитики) Экспорт
	
	Если УчетнаяПолитика["ВсеОрганизации"] = Неопределено Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ПроверкаПериодовНачисления, ЛОЖЬ)) КАК ПроверкаПериодовНачисления,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ЕдиныйНумераторКадровыхДокументов, ЛОЖЬ)) КАК ЕдиныйНумераторКадровыхДокументов,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроверкаШтатногоРасписания, ЛОЖЬ)) КАК ПроверкаШтатногоРасписания,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.РасчетЗарплатыОрганизацииПоОтветственным, ЛОЖЬ)) КАК РасчетЗарплатыОрганизацииПоОтветственным,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ИспользуютсяНачисленияВВалюте, ЛОЖЬ)) КАК ИспользуютсяНачисленияВВалюте,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УпрощенныйУчетНДФЛ, ЛОЖЬ)) КАК УпрощенныйУчетНДФЛ,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПоказыватьТабельныеНомераВДокументах, ЛОЖЬ)) КАК ПоказыватьТабельныеНомераВДокументах,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УчетЗадолженностиПоМесяцам, ИСТИНА)) КАК УчетЗадолженностиПоМесяцам,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах, ЛОЖЬ)) КАК ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Организация)");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			УчетнаяПолитика.Вставить("ВсеОрганизации",
				Новый Структура(
				"ЕдиныйНумераторКадровыхДокументов,
				|ПроверкаШтатногоРасписания,
				|РасчетЗарплатыОрганизацииПоОтветственным,
				|УпрощенныйУчетНДФЛ,
				|ИспользуютсяНачисленияВВалюте,
				|ПоказыватьТабельныеНомераВДокументах,
				|УчетЗадолженностиПоМесяцам,
				|ПроверкаПериодовНачисления,
				|ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах",
				Выборка.ЕдиныйНумераторКадровыхДокументов,
				Выборка.ПроверкаШтатногоРасписания,
				Выборка.РасчетЗарплатыОрганизацииПоОтветственным,
				Выборка.УпрощенныйУчетНДФЛ,
				Выборка.ИспользуютсяНачисленияВВалюте,
				Выборка.ПоказыватьТабельныеНомераВДокументах,
				Выборка.УчетЗадолженностиПоМесяцам,
				Выборка.ПроверкаПериодовНачисления,
				Выборка.ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах));
		Иначе 
			УчетнаяПолитика.Вставить("ВсеОрганизации",
				Новый Структура(
				"ЕдиныйНумераторКадровыхДокументов,
				|ПроверкаШтатногоРасписания,
				|РасчетЗарплатыОрганизацииПоОтветственным,
				|УпрощенныйУчетНДФЛ,
				|ИспользуютсяНачисленияВВалюте,
				|ПоказыватьТабельныеНомераВДокументах,
				|УчетЗадолженностиПоМесяцам,
				|ПроверкаПериодовНачисления,
				|ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах",
				Ложь,
				Ложь,
				Ложь,
				Ложь,
				Ложь,
				Ложь,
				Истина,
				Ложь,
				Ложь));
		КонецЕсли;
	КонецЕсли;
	
	Возврат УчетнаяПолитика["ВсеОрганизации"][ИмяПолитики];
	
КонецФункции // ЗначениеУчетнойПолитикиПоПерсоналуОрганизации()

// Проверяет, заполнен ли регламентированный производственный календарь за переданный период 
//
// Параметры
//  ДатаНач, ДатаКон - дата, определяют проверяемый период
//  ТекстСообщенияОбОшибке - строка
//
// Возвращаемое значение:
//   Булево  - если колендарь заполнен за весь период
//   дополнительно возвращается описание незаполненных лет - в параметр ТекстСообщенияОбОшибке
//
Функция РегламентированныйКалендарьЗаполнен(ДатаНач, ДатаКон, ТекстСообщенияОбОшибке) Экспорт 

	ТекстЛет = "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ДатаНач,"ДФ=yyyy; ДП='0'") + " КАК Год";
	ТекущийГод = Год(ДатаНач) + 1;
	Пока ТекущийГод <= Год(ДатаКон) Цикл
	    ТекстЛет = ТекстЛет + Символы.ПС + Символы.Таб + "Объединить" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ТекущийГод,"ЧГ=0");
		ТекущийГод = ТекущийГод + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ГодыПериода.Год,
		|	ДатыКалендаря.КоличествоДней
		|ИЗ
		|	(" + ТекстЛет + ") КАК ГодыПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КоличествоДней,
		|			РегламентированныйПроизводственныйКалендарь.Год КАК Год
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаС И &ДатаПо
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РегламентированныйПроизводственныйКалендарь.Год) КАК ДатыКалендаря
		|		ПО ГодыПериода.Год = ДатыКалендаря.Год";
		
	Запрос.Текст = ТекстЗапроса;					   
	Запрос.УстановитьПараметр("ДатаПо", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаС", ДатаНач);
	Выборка = Запрос.Выполнить().Выбрать();
	КалендарьЗаполнен = Истина;
	ТекстСообщенияОбОшибке = "";
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоДней = Null Тогда
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + ?(КалендарьЗаполнен,"",", ") + Формат(Выборка.Год,"ЧГ=0");
			КалендарьЗаполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	ТекстСообщенияОбОшибке = "Перед формированием отчета заполните ""Регламентированный производственный календарь"" за " + ТекстСообщенияОбОшибке + ?(Найти(ТекстСообщенияОбОшибке,",")=0," год!"," годы!");

	Возврат КалендарьЗаполнен
	
КонецФункции // РегламентированныйКалендарьЗаполнен()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТКРЫТИЯ ФОРМ ОБЪЕКТОВ

#Если Клиент Тогда

// Открывает форму обработки для подготовки списка работников, отобранного по указанным пользователем критериям
//
// Владелец - форма, для которой требуется вызвать обработку
// ДатаАктуальности - дата, по состоянию на которую осматривается список работников
// ИмяРегистра - строка, возможны 2 значения - "РаботникиОрганизаций" или "Работники" - определяет
//               какие работники будут отбираться - по регл. или по упр. учету
// Организация - ссылка на организацию (может быть в том числе обособленным подразделением), если передана пустая ссылка, выбираются 
//					работники всех организаций
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
Процедура ОткрытьФормуОтбораСпискаРаботников(Владелец, ДатаАктуальности, ИмяРегистра = "РаботникиОрганизаций", Организация = Неопределено, Подразделение = Неопределено, ИсполнятьЗапрос = Истина, ВыбиратьСотрудника = Истина, ИменаСтраницФормы = Неопределено, Реквизиты = Неопределено, ДатаУволенных = Неопределено, ВключатьУволенных = Ложь, ВключатьДоговорников = Ложь, НеПоказыватьУволенных = Ложь, ОпределятьДатыПриемаУвольнения = Ложь) Экспорт
	
	Если ИмяРегистра = "РаботникиОрганизаций" И НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация, отобрать список сотрудников невозможно!"));
		Возврат;
	КонецЕсли;
		
	ФормированиеСпискаРаботников = Обработки.ФормированиеСпискаРаботников.Создать();
	ФормированиеСпискаРаботников.ИмяРегистра			= ИмяРегистра;
	ФормированиеСпискаРаботников.ДатаАктуальности		= ДатаАктуальности;
	ФормированиеСпискаРаботников.ДатаУволенных			= ?(ДатаУволенных = Неопределено, НачалоГода(ДатаАктуальности), ДатаУволенных);
	ФормированиеСпискаРаботников.ИсполнятьЗапрос		= ИсполнятьЗапрос;
	ФормированиеСпискаРаботников.ВыбиратьСотрудника		= ВыбиратьСотрудника;
	ФормированиеСпискаРаботников.ВключатьДоговорников	= ВключатьДоговорников;
	ФормированиеСпискаРаботников.Реквизиты				= Реквизиты;
	ФормированиеСпискаРаботников.ВключатьУволенных	    = ВключатьУволенных;
	ФормированиеСпискаРаботников.ОпределятьДатыПриемаУвольнения = ОпределятьДатыПриемаУвольнения;
	
	// подготовим Построитель отчета к работе
	ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();
	
	СтруктураНедоступныхОтборов = Новый Структура;
	Если ИмяРегистра = "РаботникиОрганизаций" Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Количество() = 0 Тогда 
			ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();	
		КонецЕсли;
		// Переданную организацию пропишем независимо от сохраненных ранее настроек отбора
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("ОбособленноеПодразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("ОбособленноеПодразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ОбособленноеПодразделение.Установить(Организация,);
		ФормированиеСпискаРаботников.ПостроительОтчета.Параметры.Вставить("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		СтруктураНедоступныхОтборов.Вставить("ОбособленноеПодразделение");
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("Подразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("Подразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Значение = Подразделение;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Использование = Истина;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.ВидСравнения = ВидСравнения.ВИерархии;
		СтруктураНедоступныхОтборов.Вставить("Подразделение");
	КонецЕсли;
	
	// Теперь откроем подготовленную форму
	Форма = ФормированиеСпискаРаботников.ПолучитьФорму("ФормаНастройки",Владелец);
	Форма.мСтруктураНедоступныхОтборов = СтруктураНедоступныхОтборов;
	Если Реквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма,Реквизиты);
	КонецЕсли;
	
	Если ИменаСтраницФормы = Неопределено Тогда // страницу дополнительных данных не показываем
		Форма.ЭлементыФормы.ПанельСтраницы.Свертка = РежимСверткиЭлементаУправления.Низ;
	Иначе
		УдаляемыеСтраницы = Новый Массив;
		Страницы = Форма.ЭлементыФормы.ПанельСтраницы.Страницы;
		Для каждого СтраницаПанели Из Страницы Цикл
			Если СтраницаПанели.Имя <> ИменаСтраницФормы Тогда
				УдаляемыеСтраницы.Добавить(СтраницаПанели);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтраницаПанели Из УдаляемыеСтраницы Цикл
			Страницы.Удалить(Страницы.Индекс(СтраницаПанели))
		КонецЦикла;
	КонецЕсли;
	
	Если НеПоказыватьУволенных Тогда
		Форма.ЭлементыФормы.ПанельВключатьУволенных.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	Форма.ОткрытьМодально();
	
КонецПроцедуры  // ОткрытьФормуОтбораСпискаРаботников()

// Процедура открывает форму обработки НастройкаПараметровУчета на нужной странице
//
// Параметры
//		ИмяСтраницы - строка с именем страницы, на которой необходимо открыть форму
//		СтруктураПараметрыФормы - структура, содержит параметры которые необходимо передать в форму
//					или значения реквизитов обработки.
//					Ключ - имя реквизита формы или экспортной переменной, значение - его значение
//
Процедура ОткрытьФормуНастройкаПараметровУчета(ИмяСтраницы = Неопределено, СтруктураПараметрыФормы = Неопределено) Экспорт
	
	Если ИмяСтраницы = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ИмяСтраницы) = Тип("Массив") Тогда
		МассивПараметров = ИмяСтраницы;
		СтруктураПараметрыФормы = ?(МассивПараметров.Количество() = 2, МассивПараметров[1], Неопределено);
		ИмяСтраницыФормы = ?(МассивПараметров.Количество() > 0, МассивПараметров[0], Неопределено);
	Иначе
		ИмяСтраницыФормы = ИмяСтраницы;
	КонецЕсли;		
	
	Если ИмяСтраницыФормы = Неопределено Тогда
		Возврат;
    КонецЕсли;
    
	Если ИмяСтраницыФормы = "НалоговыйУчет" Тогда
		
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   УчетнаяПолитикаОрганизацийСрезПоследних.Период
        |ИЗ
        |   РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
        Запрос.УстановитьПараметр("Период", Дата(СтруктураПараметрыФормы.Год,1,1)); 
        Запрос.УстановитьПараметр("Организация", СтруктураПараметрыФормы.Организация); 
        
        Выборка = Запрос.Выполнить().Выбрать();
        Если Выборка.Следующий() Тогда
        	ДатаЗаписи = Выборка.Период
        Иначе
         	ДатаЗаписи = Дата(СтруктураПараметрыФормы.Год,1,1)
        КонецЕсли; 
        
        МенеджерЗаписи = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьМенеджерЗаписи();
        МенеджерЗаписи.Организация = СтруктураПараметрыФормы.Организация;
        МенеджерЗаписи.Период =  ДатаЗаписи;
        МенеджерЗаписи.Прочитать();
        Форма = МенеджерЗаписи.ПолучитьФорму("ФормаЗаписи");
		
        Форма.Открыть();
        Если Форма.Открыта() Тогда
            Форма.ЭлементыФормы.Панель.ТекущаяСтраница = Форма.ЭлементыФормы.Панель.Страницы.СтраховыеВзносы;
        КонецЕсли;
		
	Иначе
        
        Форма = Обработки.НастройкаПараметровУчета.ПолучитьФорму("НастройкаПараметровУчета");
        Если СтруктураПараметрыФормы <> Неопределено Тогда
            ЗаполнитьЗначенияСвойств(Форма, СтруктураПараметрыФормы);
        КонецЕсли;
		
		Форма.Открыть();
		Если Форма.Открыта() Тогда
			Форма.ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = Форма.ЭлементыФормы.ПанельНастроек.Страницы.Найти(ИмяСтраницыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму обработки НастройкаПрограммы на нужной странице
//
// Параметры
//		ИмяСтраницы - строка с именем страницы, на которой необходимо открыть форму
//		СтруктураПараметрыФормы - структура, содержит параметры которые необходимо передать в форму
//					или значения реквизитов обработки.
//					Ключ - имя реквизита формы или экспортной переменной, значение - его значение
//
Процедура ОткрытьФормуНастройкаПрограммы(ИмяСтраницы = Неопределено, СтруктураПараметрыФормы = Неопределено) Экспорт
	
	Если ИмяСтраницы = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ИмяСтраницы) = Тип("Массив") Тогда
		МассивПараметров = ИмяСтраницы;
		СтруктураПараметрыФормы = ?(МассивПараметров.Количество() = 2, МассивПараметров[1], Неопределено);
		ИмяСтраницыФормы = ?(МассивПараметров.Количество() > 0, МассивПараметров[0], Неопределено);
	Иначе
		ИмяСтраницыФормы = ИмяСтраницы;
	КонецЕсли;
	
	Если ИмяСтраницыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Обработки.НастройкиПрограммы.ПолучитьФорму("НастройкаПрограммы");
	Если СтруктураПараметрыФормы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, СтруктураПараметрыФормы);
	КонецЕсли;
	Форма.Открыть();
	Если Форма.Открыта() Тогда
		Форма.ЭлементыФормы.ПанельРазделов.ТекущаяСтраница = Форма.ЭлементыФормы.ПанельРазделов.Страницы.Найти(ИмяСтраницыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ГОЛОВНЫЕ ОРГАНИЗАЦИИ И ОБОСОБЛЕННЫЕ ПОДРАЗДЕЛЕНИЯ

// Формирует список головных организаций предприятия
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ПустаяОрганизация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.ГоловнаяОрганизация,
	|	Организации.ГоловнаяОрганизация.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация <> &ПустаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");

	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());						  

	СписокОрганизаций = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла; 

	Возврат СписокОрганизаций;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

#Если Клиент Тогда

// Обеспечивает подбор данных по сотруднику
// подбираются подразделение и должность
// Параметры:
//	Форма - форма в которой производится подбор данных
//	ЭлементФормы - элементы формы в которой производится подбор данных
//	Физлицо
//
// ВозвращаемоеЗначение - строка таблицы значений или Неопределено, 
// если подбор данных не состоялся
// Поля строки таблицы значений:
//		ПодразделениеОрганизации
//		Должность
//
Функция ПодборДанныхПоФизлицу(Форма, ЭлементФормы, Физлицо, Организация, ДатаСобытия, ПредлагатьВыбор = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизации.Должность
	|	КОНЕЦ КАК Должность,
	|	РаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ КАК ПодразделениеОрганизацииНаименование,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизации.Должность.Наименование
	|	КОНЕЦ КАК ДолжностьНаименование
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&парамДатаСобытия,
	|		Сотрудник.Физлицо = &Физлицо
	|			И Сотрудник.Организация = &Организация) КАК РаботникиОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизации.Период";
	
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	Если НаборыДанных.Количество() = 0 Тогда
		// Если не нашли данных - ничего не делаем
		Возврат Неопределено;
	ИначеЕсли НаборыДанных.Количество() = 1 Тогда
		//если запись единственная, вернем ее
		Возврат НаборыДанных[0];
	ИначеЕсли ПредлагатьВыбор Тогда
		// предложим выбрать из списка если записей больше одной и предлагать выбор
		СписокНаборовДанных = Новый СписокЗначений;
		Для Каждого Строка Из НаборыДанных Цикл
			СписокНаборовДанных.Добавить(Строка, Строка.СотрудникНаименование + " (" + Строка.ПодразделениеОрганизацииНаименование + ", " + Строка.ДолжностьНаименование + ")");
		КонецЦикла;
		ВыбранныйНаборДанных = Форма.ВыбратьИзСписка(СписокНаборовДанных, ЭлементФормы);
		Если ВыбранныйНаборДанных = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ВыбранныйНаборДанных.Значение;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПодборДанныхПоФизлицу()


// проставляет в строку табличной части или реквизит формы полученные данные по Сотруднику
//
Процедура ПроставитьДанныеСтроки(Сотрудник, ДатаСобытия, ЭлементФормы) Экспорт
		
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизации.Должность 
	|	КОНЕЦ КАК Должность
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
	
	Запрос.Текст = ТекстЗапроса;
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	Если НаборыДанных.Количество() = 0 Тогда
		// Если не нашли данных - ничего не делаем
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементФормы) = Тип("ТабличноеПоле") Тогда
		
		// поле ПодразделениеОрганизации есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.ПодразделениеОрганизации = НаборыДанных[0].ПодразделениеОрганизации;
		КонецЕсли;
		
		// поле Должность есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("Должность") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.Должность = НаборыДанных[0].Должность;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроставитьДанныеСтроки()

// процедура устанавливает текущую строку в табличных полях формы 
// объекта, связанных с табличными частями объекта
// предположения:
// все табличные части и соответсвующие им табличные поля - одноименны
// все "синхронизируемые" табличные части имеют колонку с одинаковым 
// именем по которой ведется синхронизация
// 
// Параметры:
// 	Форма - форма объекта
//  Объект - объект данных
//  Элемент - элемент формы в котором возникла активизация строки
//  СинхронизируемыеТабличныеЧасти - соответствие с 
//  			элементами, соответствующими синхронизируемым табличным полям
//  ИмяКолонки - имя колнки синхронизации
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки]);
	Если Элемент.Колонки.Найти("Сторно") <> Неопределено Тогда
		СтруктураПоиска.Вставить("Сторно", Элемент.ТекущиеДанные.Сторно);
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл
		Если ЭлементСоответствия.Ключ = Имя Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ = Неопределено;
		Попытка
			Строки = Объект[ЭлементСоответствия.Ключ].НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				СтрокаТЧ = Строки[0];
			КонецЕсли;
		Исключение
			Строки = Форма[ЭлементСоответствия.Ключ].НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				СтрокаТЧ = Строки[0];
			КонецЕсли;
		КонецПопытки;
		Если СтрокаТЧ <> Неопределено Тогда
			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
			Форма.ЭлементыФормы[ЭлементСоответствия.Ключ].ТекущаяСтрока = СтрокаТЧ;
			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  //  СинхронизироватьСтроки

// Процедура строит список должностей (или подразделений), по штатному расписанию организации.
//  
// Параметры: 
//  Режим - строка, может принимать значения: "Должность" или "ПодразделениеОрганизации"
//			определяет, что именно будет выбирать пользователь
//  ДолжностьИлиПодразделениеОрганизации - СправочникСсылка.ПодразделенияОрганизаций или   
//          СправочникСсылка.ДолжностиОрганизаций, второе значение в текущей строке т.п.
//
// Возвращаемое значение
//  нет
//
Функция ВыбратьИзШтатногоРасписанияОрганизации(Режим, Организация, ДолжностьИлиПодразделениеОрганизации, ДатаАктуальности = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(ДолжностьИлиПодразделениеОрганизации) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("ДолжностьИлиПодразделениеОрганизации", ДолжностьИлиПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Если Режим = "ПодразделениеОрганизации" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаАктуальности, ПодразделениеОрганизации.Владелец = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность = &ДолжностьИлиПодразделениеОрганизации
		|	И ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		
	ИначеЕсли Режим = "Должность" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаАктуальности, ПодразделениеОрганизации.Владелец = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации = &ДолжностьИлиПодразделениеОрганизации
		|	И ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		
	Иначе
		Возврат Новый СписокЗначений
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	СписокВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Элемент, Выборка.ЭлементНаименование);	
	КонецЦикла;
	
    Возврат СписокВыбора
	
КонецФункции // ВыбратьИзШтатногоРасписанияОрганизации

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ ЗНАЧЕНИЙ ПЕРЕЧИСЛЕНИЙ

// Возвращает список отпусков, регистрируемых документом Отпуска организации
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокОтпусковОрганизации() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебный);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты);
	
	Возврат СписокСпособов
	
КонецФункции

// Возвращает список причин отсутствия, регистрируемых документом Отсутствие организации
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокПрочихСостоянийРаботника() Экспорт

	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Заболевание);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Работает);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ПоУходуЗаРебенком);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Простой);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ВынужденныйПрогул);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ГосударственныеОбязанности);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Прогулы);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ТравмаНаПроизводстве);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Протезирование);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Карантин);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ПоУходуЗаВзрослым);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ПособиеПриДолечивании);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокПрочихСостоянийРаботника()

// Функция возвращает массив видов времени, 
// по идексам этого массива происходит упорядочивание видов времени в сводном табеле
//
Функция ПолучитьМассивУпорядоченныхВидовИспользованияРабочегоВремени() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторИспользованияРабочегоВремени.Ссылка
	|ИЗ
	|	Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
	|ГДЕ
	|	(НЕ КлассификаторИспользованияРабочегоВремени.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	|			ТОГДА 1
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
	|			ТОГДА 2
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам)
	|			ТОГДА 3
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
	|			ТОГДА 4
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
	|			ТОГДА 5
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные)
	|			ТОГДА 6
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники)
	|			ТОГДА 7
	|		ИНАЧЕ 100
	|	КОНЕЦ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьМассивДляУпорядочивания()

////////////////////////////////////////////////////////////////////////////////
// КАДРОВАЯ НУМЕРАЦИЯ

// имитация кадрового нумератора для поддержки учетной политики по персоналу с 
// кадровым нумераторм документов
Процедура ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, ЕдиныйНумераторКадровыхДокументов, Номер, Префикс, Дата) Экспорт
	// проверка учетной политики
	Если ЕдиныйНумераторКадровыхДокументов Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить("КадровоеПеремещениеОрганизаций");
		СписокДокументов.Добавить("ПриемНаРаботуВОрганизацию");
		СписокДокументов.Добавить("УвольнениеИзОрганизаций");
		
		НовыйНомер = ПолучитьНовыйНомерПоДокументам(СписокДокументов, Префикс, Дата);
		
		Если НовыйНомер <> "" Тогда
			СтандартнаяОбработка = Ложь;
			Номер = НовыйНомер;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Получает новый номер документа по переданному списку документов и префиксу
// Фактически, имитирует работу нумератора докумнетов
// Если в информационной базе еще нет документов вернет пустую стоку
//
// Только для документов со строковым номером!
//
// Параметры:
//	СписокДокументов - массив строк с именами документов
//  Префикс - строка, префикс номера
//  Дата - дата документа
// Возвращаемое значение:
//  строка
//
Функция ПолучитьНовыйНомерПоДокументам(СписокДокументов, Префикс, Дата)
	
	Запрос = Новый Запрос;
	
	Результат = Новый СписокЗначений;
	
	Для Каждого Документ из СписокДокументов Цикл
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номер
		|ИЗ
		|	Документ."+Документ+"
		|ГДЕ Номер Подобно """ + Префикс + "%""
		|  И Дата>=&НачалоГода
		|  И Дата<=&КонецГода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер УБЫВ";
		
        // поддерживается "годовая" кадровая нумерация
        Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
    	Запрос.УстановитьПараметр("КонецГода", КонецГода(Дата));
        
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.Добавить(Выборка.Номер);
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		// выберем наибольший
		Результат.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		// получим новый номер
		НовыйНомер = ПолучитьСледующийНомер(СокрП(Результат[0].Значение));
	Иначе
		НовыйНомер = "";
	КонецЕсли;
	Возврат НовыйНомер;
	
КонецФункции		

// Увеличивает номер в переданной строке на 1
//
// Параметры
//  ПоследнийНомер - строка - представляет собой номер (документа, табельный и т.п.)
//
// Возвращаемое значение:
//  строка  - следующий по порядку номер
//
Функция ПолучитьСледующийНомер(ПоследнийНомер, Знач ДлинаНомера = 0) Экспорт
	
	Если ДлинаНомера = 0 Тогда
		ДлинаНомера = СтрДлина(ПоследнийНомер);
	КонецЕсли;
	Если ДлинаНомера = 0 Тогда
		Возврат "1"
	КонецЕсли;
	СчетчикСимв = ДлинаНомера;
	Пока СчетчикСимв > 0 Цикл
		Если Не ПустаяСтрока(Сред(ПоследнийНомер, СчетчикСимв, 1)) и ОбщегоНазначения.ТолькоЦифрыВСтроке(Сред(ПоследнийНомер, СчетчикСимв, 1)) Тогда
			СчетчикСимв = СчетчикСимв - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СчетчикСимв = ДлинаНомера Тогда
		НомерЧисловой = 1
	Иначе
		НомерЧисловой = Число(Сред(ПоследнийНомер, СчетчикСимв + 1));
	КонецЕсли;
	Если НомерЧисловой < Pow(10, ДлинаНомера - СчетчикСимв) - 1 Тогда
		СледующийНомер = НомерЧисловой + 1;
	Иначе
		СледующийНомер = НомерЧисловой;
	КонецЕсли;
	НовыйНомер = Лев(ПоследнийНомер,  СчетчикСимв) + Формат(СледующийНомер,"ЧЦ=" + (ДлинаНомера - СчетчикСимв) + "; ЧВН=; ЧГ=0");
	Возврат НовыйНомер
	
КонецФункции // ПолучитьСледующийНомер()

// проверяет уникальность кадрового номера
// если не уникален - возвращает Ложь
// Параметры:
//  ЕдиныйНумераторКадровыхДокументов - сведения по учетной политике ведения единого нумератора кадровых документов
//  Организация
//  Номер - проверяемый номер
//  Дата - дата проверяемого документа
//  Ссылка - ссылка на документ, для которого выпорлняется проверка
//
// Вызывает исключение! 
// Должна использоваться, например, при записи документа.
//
Функция ПроверкаУникальностиНомераКадровогоДокумента(ЕдиныйНумераторКадровыхДокументов, Номер, Дата, Ссылка) Экспорт
	// проверка учетной политики
	Если ЕдиныйНумераторКадровыхДокументов Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить("КадровоеПеремещениеОрганизаций");
		СписокДокументов.Добавить("ПриемНаРаботуВОрганизацию");
		СписокДокументов.Добавить("УвольнениеИзОрганизаций");
		
		Если Не ПроверкаУникальностиНомераПоДокументам(СписокДокументов, Номер, Дата, Ссылка) Тогда
			ВызватьИсключение "Неуникальный номер кадрового документа! (" + Номер + ")";
		КонецЕсли;
	КонецЕсли;
КонецФункции

// используется в ПроверкаУникальностиНомераКадровогоДокумента
Функция ПроверкаУникальностиНомераПоДокументам(СписокДокументов, Номер, Дата, Ссылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Номер", Номер);
    // поддерживается "годовая" кадровая нумерация
    Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Дата));
	
	Для Каждого Документ из СписокДокументов Цикл
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номер
		|ИЗ
		|	Документ." + Документ+"
		|ГДЕ Ссылка <> &Ссылка 
        |   И Номер = &Номер 
        |   И Дата>=&НачалоГода 
        |   И Дата<=&КонецГода";
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА КОНТРОЛЯ ПЕРИОДОВ

// Функция возвращает текст запроса для получения периодов использования ресурсов
//
// Параметры:
//	ИмяРегистра		- имя регистра
//	ДатаНачала		- имя параметра "дата начала" интревала за который необходимо получить периоды, 
//					  если не задана - то "от самого начала"
//	ДатаОкончания	- имя параметра "дата окончания" интервала за который необходимо получить периоды, 
//					  если не задана - то "до самомго конца"
//	Условие			- условие, по которому отбираются перичные записи регистра. Условия пишется на поля 
//					  регистра периодов с применением алиаса "Периоды". Например: "Периоды.Физлицо В (&Физлица)"
//
// Возвращает:
//	Текст запроса, содержащий поля:
//		Регистратор1	- ссылка на регистратор, который определяет период
//		Регистратор2	- ссылка на второй регистратор, который определяет период (для 
//						  периодов, которые определяются двумя событиями)
//		<Измерение>		- все измерения регистра кроме ДатаНачала и ДатаОкончания
//		ДатаНачала		- начало полученного виртуального периода
//		ДатаОкончания	- окончание полученного виртуального периода
//
Функция ПериодыИспользованияРесурсов(ИмяРегистра, ДатаНачала = Неопределено, ДатаОкончания = Неопределено, Условие = "", УчитыватьРегистратор = Истина, МаксимальныйИнтервал = Неопределено) Экспорт
	
	ИмяТаблицы = "РегистрСведений." + ИмяРегистра;
	РегистрМД = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);
	Измерения = Новый Массив;
	Для Каждого Измерение Из РегистрМД.Измерения Цикл
		Имя = Измерение.Имя;
		Если Имя = "ДатаНачала" или Имя = "ДатаОкончания" Тогда
			Продолжить;
		КонецЕсли;
		Измерения.Добавить(Имя);
	КонецЦикла;
		
	Текст =
	"ВЫБРАТЬ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + " КАК " + Измерение + ",";
	КонецЦикла;
	Текст = Текст + "
	|	Периоды.Регистратор КАК Регистратор1,
	|	NULL КАК Регистратор2,
	|	Периоды.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПериодыВсп.ДатаНачала) ЕСТЬ NULL 
	|			ТОГДА Периоды.ДатаОкончания
	|		ИНАЧЕ МИНИМУМ(ПериодыВсп.ДатаНачала)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	" + ИмяТаблицы + " КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК ПериодыВсп
	|		ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение + " = ПериодыВсп." + Измерение + "
		|		И ";
	КонецЦикла;
	Текст = Текст + "ПериодыВсп.ДатаНачала > Периоды.ДатаНачала
	|			И ПериодыВсп.ДатаНачала < Периоды.ДатаОкончания
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Проверка
	|		ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение + " = Проверка." + Измерение + "
		|		И ";
	КонецЦикла;
	Текст = Текст + "Проверка.ДатаОкончания > Периоды.ДатаНачала
	|			И Проверка.ДатаОкончания < Периоды.ДатаОкончания
	|			И (Проверка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ";
	Если Не ПустаяСтрока(Условие) Тогда
		Текст = Текст + "
		|	" + Условие + "
		|	И ";
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "
		|	Периоды.Регистратор <> &Регистратор
		|	И ";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + "(";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "Периоды.ДатаНачала >= &" + ДатаНачала + "
		|	";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Если ДатаНачала <> Неопределено Тогда
			Текст = Текст + "И ";
		КонецЕсли;
		Текст = Текст + "Периоды.ДатаНачала <= &" + ДатаОкончания + "
		|	";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ИЛИ &ДатаНачала >= Периоды.ДатаНачала
		|	И &ДатаНачала <= Периоды.ДатаОкончания";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + ") И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаНачала <> ДАТАВРЕМЯ(1,1,1)
	|		И Периоды.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)
	|		И Проверка.ДатаНачала ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + ",";
	КонецЦикла;
	Текст = Текст + "
	|	Периоды.Регистратор,
	|	Периоды.ДатаНачала,
	|	Периоды.ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + " КАК " + Измерение + ",";
	КонецЦикла;
	Текст = Текст + "
	|	Периоды.Регистратор1,
	|	Периоды.Регистратор2,
	|	Периоды.ДатаНачала,
	|	Периоды.ДатаОкончания
	|ИЗ
	|	(ВЫБРАТЬ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|		МаксимальныеПериоды." + Измерение +" КАК " + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|		Периоды.Регистратор КАК Регистратор1,
	|		ВЫБОР
	|			КОГДА
	|				МаксимальныеПериоды.Регистратор <> Периоды.Регистратор
	|					ТОГДА МаксимальныеПериоды.Регистратор
	|		КОНЕЦ КАК Регистратор2,
	|		ЕСТЬNULL(Периоды.ДатаНачала, ДАТАВРЕМЯ(1,1,1)) КАК ДатаНачала,
	|		МаксимальныеПериоды.ДатаОкончания КАК ДатаОкончания
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Периоды.Регистратор КАК Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +" КАК " + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаОкончания КАК ДатаОкончания,
	|			МАКСИМУМ(ПериодыПредыдущие.ДатаНачала) КАК МаксДата
	|		ИЗ
	|			" + ИмяТаблицы + " КАК Периоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК ПериодыПредыдущие
	|				ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = ПериодыПредыдущие." + Измерение +"
		|				И ";
	КонецЦикла;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "ПериодыПредыдущие.Регистратор <> &Регистратор
		|				И ";
	КонецЕсли;		
	Если МаксимальныйИнтервал <> Неопределено Тогда
		Текст = Текст + "(ПериодыПредыдущие.ДатаНачала > ДОБАВИТЬКДАТЕ(Периоды.ДатаОкончания, ДЕНЬ, -&МаксимальныйИнтервал))
		|				И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаОкончания > ПериодыПредыдущие.ДатаНачала
	|		ГДЕ";
	Если Не ПустаяСтрока(Условие) Тогда
		Текст = Текст + "
		|		" + Условие + "
		|		И ";
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "Периоды.Регистратор <> &Регистратор
		|		И ";
	КонецЕсли;		
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + "(";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "Периоды.ДатаОкончания >= &" + ДатаНачала + "
		|	";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Если ДатаНачала <> Неопределено Тогда
			Текст = Текст + "И ";
		КонецЕсли;
		Текст = Текст + "Периоды.ДатаОкончания <= &" + ДатаОкончания + "
		|	";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ИЛИ &ДатаНачала <= Периоды.ДатаОкончания";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + ") И ";
	КонецЕсли;
	Текст = Текст +
	"			Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаОкончания) КАК МаксимальныеПериоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Периоды
	|			ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = МаксимальныеПериоды." + Измерение +"
		|				И ";
	КонецЦикла;
	Текст = Текст + "МаксимальныеПериоды.МаксДата = Периоды.ДатаНачала
	|				И (Периоды.ДатаНачала <> ДАТАВРЕМЯ(1,1,1))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|		МинимальныеПериоды." + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|		МинимальныеПериоды.Регистратор КАК Регистратор1,
	|		ВЫБОР КОГДА Периоды.Регистратор <> МинимальныеПериоды.Регистратор ТОГДА Периоды.Регистратор КОНЕЦ КАК Регистратор2,
	|		МинимальныеПериоды.ДатаНачала,
	|		ЕСТЬNULL(Периоды.ДатаОкончания, ДАТАВРЕМЯ(1,1,1))
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Периоды.Регистратор КАК Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +" КАК " + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаНачала КАК ДатаНачала,
	|			МИНИМУМ(ПериодыСледующие.ДатаОкончания) КАК МинДата
	|		ИЗ
	|			" + ИмяТаблицы + " КАК Периоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК ПериодыСледующие
	|				ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = ПериодыСледующие." + Измерение +"
		|				И ";
	КонецЦикла;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "ПериодыСледующие.Регистратор <> &Регистратор
		|				И ";
	КонецЕсли;
	Если МаксимальныйИнтервал <> Неопределено Тогда
		Текст = Текст + "(ПериодыСледующие.ДатаОкончания < ДОБАВИТЬКДАТЕ(Периоды.ДатаНачала, ДЕНЬ, &МаксимальныйИнтервал))
		|				И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаНачала < ПериодыСледующие.ДатаОкончания
	|					И ПериодыСледующие.ДатаНачала = ДАТАВРЕМЯ(1,1,1)
	|		ГДЕ";
	Если Не ПустаяСтрока(Условие) Тогда
		Текст = Текст + "
		|" + Условие + "
		|	И ";
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "
		|Периоды.Регистратор <> &Регистратор
		|	И ";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + "(";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ >= &" + ДатаНачала + "
		|	";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Если ДатаНачала <> Неопределено Тогда
			Текст = Текст + "И ";
		КонецЕсли;
		Текст = Текст + "ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ <= &" + ДатаОкончания + "
		|	";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ИЛИ &ДатаНачала >= ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ
		|	И &ДатаНачала <= Периоды.ДатаОкончания";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + ") И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаОкончания = ДАТАВРЕМЯ(1,1,1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаНачала) КАК МинимальныеПериоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Периоды
	|			ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = МинимальныеПериоды." + Измерение +"
		|				И ";
	КонецЦикла;
	Текст = Текст + "МинимальныеПериоды.МинДата = Периоды.ДатаОкончания
	|				И (Периоды.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1))) КАК Периоды";
	Возврат Текст;
	
КонецФункции

Процедура ПолучитьОшибкиПериодовРаботыСотрудникаПоОсновномуМестуРаботы(Регистратор, УчитыватьРегистратор, МассивФизлица, СообщенияОбОшибках, ОшибкиПериодов) Экспорт
	
	Запрос = Новый Запрос;
	
	ТаблицаПериодов = ПериодыИспользованияРесурсов("ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы", , , "Периоды.Физлицо В (&Физлица)", УчитыватьРегистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистратор1,
	|	Регистратор2,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор1) КАК ПредставлениеРегистратор1,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор2) КАК ПредставлениеРегистратор2,
	|	Физлицо,
	|	Физлицо.Наименование КАК ФизлицоНаименование,
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ
	|	(" + ТаблицаПериодов + ") КАК Периоды
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицоНаименование,
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	Запрос.УстановитьПараметр("Физлица",		МассивФизлица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// обработаем периоды
	ТекущееФизлицо						= Неопределено;
	ПоследняяДатаНачала					= '0001-01-01';
	ПоследняяДатаОкончания				= '0001-01-01';
	ПоследнийРегистратор1				= Неопределено;
	ПоследнийРегистратор2				= Неопределено;
	ПоследнийПредставлениеРегистратор1	= "";
	ПоследнийПредставлениеРегистратор2	= "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущееФизлицо <> Выборка.Физлицо Тогда
			ТекущееФизлицо = Выборка.Физлицо;
			
		ИначеЕсли (ПоследняяДатаОкончания > Выборка.ДатаНачала) ИЛИ (ПоследняяДатаОкончания = '0001-01-01') Тогда
			Если ОшибкиПериодов <> НеОпределено Тогда
				ОшибкиПериодов[Выборка.Физлицо] = 0;
			КонецЕсли;
			// сообщения формируем для переданного регистратора или все, если регистратор не задан 
			Если СообщенияОбОшибках <> НеОпределено и
				(	Регистратор = НеОпределено ИЛИ
					ПоследнийРегистратор1 = Регистратор ИЛИ
					ПоследнийРегистратор2 = Регистратор ИЛИ
					Выборка.Регистратор1 = Регистратор ИЛИ
					Выборка.Регистратор2 = Регистратор) Тогда
				СообщениеОбОшибке = Новый Структура("Физлицо, 
													|ДатаНачала, 
													|ДатаОкончания, 
													|ДатаНачалаПред, 
													|ДатаОкончанияПред, 
													|Регистратор1, 
													|Регистратор2, 
													|ПослРегистратор1, 
													|ПослРегистратор2,
													|Регистратор1Ссылка, 
													|Регистратор2Ссылка, 
													|ПослРегистратор1Ссылка, 
													|ПослРегистратор2Ссылка");
				СообщениеОбОшибке.Физлицо			= Выборка.ФизлицоНаименование;
				СообщениеОбОшибке.ДатаНачала		= Выборка.ДатаНачала;
				СообщениеОбОшибке.ДатаОкончания		= Выборка.ДатаОкончания;
				СообщениеОбОшибке.ДатаНачалаПред	= ПоследняяДатаНачала;
				СообщениеОбОшибке.ДатаОкончанияПред	= ПоследняяДатаОкончания;
				
				СообщениеОбОшибке.Регистратор1Ссылка 		= Выборка.Регистратор1;
				СообщениеОбОшибке.Регистратор2Ссылка 		= Выборка.Регистратор2;
				СообщениеОбОшибке.ПослРегистратор1Ссылка 	= ПоследнийРегистратор1;
				СообщениеОбОшибке.ПослРегистратор2Ссылка 	= ПоследнийРегистратор2;
				
				Если Выборка.Регистратор1 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор1 = Выборка.ПредставлениеРегистратор1 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор1 = "" + Выборка.ПредставлениеРегистратор1;
				КонецЕсли;
				
				Если Выборка.Регистратор2 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор2 = Выборка.ПредставлениеРегистратор2 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор2 = "" + Выборка.ПредставлениеРегистратор2;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор1 
					и Выборка.Регистратор2 <> ПоследнийРегистратор1 Тогда
					Если ПоследнийРегистратор1 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор1 = ПоследнийПредставлениеРегистратор1 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор1 = "" + ПоследнийПредставлениеРегистратор1;
					КонецЕсли;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор2 
					и Выборка.Регистратор2 <> ПоследнийРегистратор2 Тогда
					Если ПоследнийРегистратор2 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор2 = ПоследнийПредставлениеРегистратор2 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор2 = "" + ПоследнийПредставлениеРегистратор2;
					КонецЕсли;
				КонецЕсли;
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
			КонецЕсли;
		КонецЕсли;
		
		ПоследнийРегистратор1				= Выборка.Регистратор1;
		ПоследнийРегистратор2				= Выборка.Регистратор2;
		ПоследнийПредставлениеРегистратор1	= Выборка.ПредставлениеРегистратор1;;
		ПоследнийПредставлениеРегистратор2	= Выборка.ПредставлениеРегистратор2;
		ПоследняяДатаНачала					= Выборка.ДатаНачала;
		ПоследняяДатаОкончания				= Выборка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьОшибкиПериодовРаботыСотрудникаПоСовместительству(Регистратор, УчитыватьРегистратор, МассивФизлица, Организация, СообщенияОбОшибках, ОшибкиПериодов) Экспорт
	
	Запрос = Новый Запрос;
	
	ТаблицаПериодов = ПериодыИспользованияРесурсов("ПериодыРаботыРаботниковОрганизацийПоСовместительству", , , "Периоды.Физлицо В (&Физлица) И Периоды.Организация = &Организация", УчитыватьРегистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистратор1,
	|	Регистратор2,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор1) КАК ПредставлениеРегистратор1,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор2) КАК ПредставлениеРегистратор2,
	|	Физлицо,
	|	Физлицо.Наименование КАК ФизлицоНаименование,
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ
	|	(" + ТаблицаПериодов + ") КАК Периоды
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицоНаименование,
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Физлица",		МассивФизлица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// обработаем периоды
	ТекущееФизлицо						= Неопределено;
	ПоследняяДатаНачала					= '0001-01-01';
	ПоследняяДатаОкончания				= '0001-01-01';
	ПоследнийРегистратор1				= Неопределено;
	ПоследнийРегистратор2				= Неопределено;
	ПоследнийПредставлениеРегистратор1	= "";
	ПоследнийПредставлениеРегистратор2	= "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущееФизлицо <> Выборка.Физлицо Тогда
			ТекущееФизлицо = Выборка.Физлицо;
			
		ИначеЕсли (ПоследняяДатаОкончания > Выборка.ДатаНачала) ИЛИ (ПоследняяДатаОкончания = '0001-01-01') Тогда
			Если ОшибкиПериодов <> НеОпределено Тогда
				ОшибкиПериодов[Выборка.Физлицо] = 0;
			КонецЕсли;
			// сообщения формируем для переданного регистратора или все, если регистратор не задан 
			Если СообщенияОбОшибках <> НеОпределено и
				(	Регистратор = НеОпределено ИЛИ
					ПоследнийРегистратор1 = Регистратор ИЛИ
					ПоследнийРегистратор2 = Регистратор ИЛИ
					Выборка.Регистратор1 = Регистратор ИЛИ
					Выборка.Регистратор2 = Регистратор) Тогда
				СообщениеОбОшибке = Новый Структура("Физлицо, 
													|ДатаНачала, 
													|ДатаОкончания, 
													|ДатаНачалаПред, 
													|ДатаОкончанияПред, 
													|Регистратор1, 
													|Регистратор2, 
													|ПослРегистратор1, 
													|ПослРегистратор2,
													|Регистратор1Ссылка, 
													|Регистратор2Ссылка, 
													|ПослРегистратор1Ссылка, 
													|ПослРегистратор2Ссылка");
				СообщениеОбОшибке.Физлицо			= Выборка.ФизлицоНаименование;
				СообщениеОбОшибке.ДатаНачала		= Выборка.ДатаНачала;
				СообщениеОбОшибке.ДатаОкончания		= Выборка.ДатаОкончания;
				СообщениеОбОшибке.ДатаНачалаПред	= ПоследняяДатаНачала;
				СообщениеОбОшибке.ДатаОкончанияПред	= ПоследняяДатаОкончания;
				
				СообщениеОбОшибке.Регистратор1Ссылка 		= Выборка.Регистратор1;
				СообщениеОбОшибке.Регистратор2Ссылка 		= Выборка.Регистратор2;
				СообщениеОбОшибке.ПослРегистратор1Ссылка 	= ПоследнийРегистратор1;
				СообщениеОбОшибке.ПослРегистратор2Ссылка 	= ПоследнийРегистратор2;
				
				Если Выборка.Регистратор1 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор1 = Выборка.ПредставлениеРегистратор1 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор1 = "" + Выборка.ПредставлениеРегистратор1;
				КонецЕсли;
				
				Если Выборка.Регистратор2 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор2 = Выборка.ПредставлениеРегистратор2 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор2 = "" + Выборка.ПредставлениеРегистратор2;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор1 
					и Выборка.Регистратор2 <> ПоследнийРегистратор1 Тогда
					Если ПоследнийРегистратор1 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор1 = ПоследнийПредставлениеРегистратор1 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор1 = "" + ПоследнийПредставлениеРегистратор1;
					КонецЕсли;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор2 
					и Выборка.Регистратор2 <> ПоследнийРегистратор2 Тогда
					Если ПоследнийРегистратор2 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор2 = ПоследнийПредставлениеРегистратор2 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор2 = "" + ПоследнийПредставлениеРегистратор2;
					КонецЕсли;
				КонецЕсли;
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
			КонецЕсли;
		КонецЕсли;
		
		ПоследнийРегистратор1				= Выборка.Регистратор1;
		ПоследнийРегистратор2				= Выборка.Регистратор2;
		ПоследнийПредставлениеРегистратор1	= Выборка.ПредставлениеРегистратор1;;
		ПоследнийПредставлениеРегистратор2	= Выборка.ПредставлениеРегистратор2;
		ПоследняяДатаНачала					= Выборка.ДатаНачала;
		ПоследняяДатаОкончания				= Выборка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ОСТАТКИ ОТПУСКОВ РЕГЛ. УЧЕТА

// Процедура формирует временную таблицу, в которую записывает переданную таблицу периодов
//
Процедура ПодготовитьТаблицуПериодовОрганизаций(Запрос, ТаблицаПериодов)
	
	Запрос.УстановитьПараметр("Таблица",	ТаблицаПериодов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.*
	|ПОМЕСТИТЬ ВТТаблицаПериодов
	|
	|ИЗ
	|	&Таблица КАК ТаблицаПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НомерСтроки";
	Запрос.Выполнить();
	
КонецПроцедуры

// Функция возвращает список остатков отпусков для тех рабочих лет, по которым нет остатков в справочнике
// Остатки отпусков организаций
// Включать текущий рабочий год необходимо, когда считаем остатки для списания фактического отпуска
//
Функция ПолучитьДополнениеОстатковОрганизаций(
	Запрос,						// Объект запрос, в котором уже есть виртуальные таблицы ТаблицаПериодов и АктуальныеОстатки
	Регистратор,				// Регистратор, которым списывается отпуск
	ВключатьТекущийРабочийГод	// Значение Истина должно быть установлено всегда, когда передается регистратор
	)
	
	// Дата увольнения сотрудника определяется по данным регистра работников, но в доке Расчет при увольнении
	// пользователь может указать произвольную дату, не совпадающую с датой увольнения
	// В этом случае дату увольнения надо брать из документа
	ЭтоРасчетПриУвольнении = ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций")
							ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.УвольнениеИзОрганизаций");
	
	Если ЭтоРасчетПриУвольнении Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПериодов.Сотрудник КАК Сотрудник,
		|	ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПериодов.ДатаРасчетаПриУвольнении КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТУвольнения
		|ИЗ
		|	ВТТаблицаПериодов КАК ТаблицаПериодов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	НомерСтроки";
		Запрос.Выполнить();
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПериодов.Сотрудник КАК Сотрудник,
		|	ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
		|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(Работники.Период, ДЕНЬ, -1)) КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТУвольнения
		|ИЗ
		|	ВТТаблицаПериодов КАК ТаблицаПериодов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО ТаблицаПериодов.Сотрудник = Работники.Сотрудник
		|			И ТаблицаПериодов.ДатаНачала >= Работники.Период
		|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПериодов.Сотрудник,
		|	ТаблицаПериодов.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	НомерСтроки";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Получим все отпуска, из-за которых необходимо увеличить рабочий год
	Запрос.УстановитьПараметр("ТекущаяДата",	ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
	|	СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	ТаблицаПериодов.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	СостояниеРаботниковОрганизаций.Период КАК Период,
	|	СостояниеРаботниковОрганизаций.Состояние КАК Состояние,
	|	СостояниеРаботниковОрганизаций.ПериодЗавершения КАК ПериодЗавершения,
	|	СостояниеРаботниковОрганизаций.СостояниеЗавершения
	|ПОМЕСТИТЬ ВТСостояние
	|ИЗ
	|	ВТТаблицаПериодов КАК ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|		ПО ТаблицаПериодов.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|			И ТаблицаПериодов.ДатаНачала >= СостояниеРаботниковОрганизаций.Период
	|			И (СостояниеРаботниковОрганизаций.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	Период,
	|	ПериодЗавершения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
	|	СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	ТаблицаПериодов.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	СостояниеРаботниковОрганизаций.Период КАК ПериодНачала,
	|	МИНИМУМ(СостояниеРаботниковОрганизацийЗавершения.Период) КАК ДатаСреза
	|ПОМЕСТИТЬ ВТСрезСостояний
	|ИЗ
	|	ВТТаблицаПериодов КАК ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизацийЗавершения
	|			ПО СостояниеРаботниковОрганизаций.Сотрудник = СостояниеРаботниковОрганизацийЗавершения.Сотрудник
	|				И СостояниеРаботниковОрганизаций.Период < СостояниеРаботниковОрганизацийЗавершения.Период
	|		ПО ТаблицаПериодов.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|			И ТаблицаПериодов.ДатаНачала >= СостояниеРаботниковОрганизаций.Период
	|			И (СостояниеРаботниковОрганизаций.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.НомерСтроки,
	|	СостояниеРаботниковОрганизаций.Сотрудник,
	|	ТаблицаПериодов.ВидЕжегодногоОтпуска,
	|	СостояниеРаботниковОрганизаций.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	ПериодНачала,
	|	ДатаСреза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСрезСостояний.НомерСтроки КАК НомерСтроки,
	|	ВТСрезСостояний.Сотрудник КАК Сотрудник,
	|	ВТСрезСостояний.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТСрезСостояний.ПериодНачала КАК ПериодНачала,
	|	СостояниеРаботниковОрганизацийЗавершения.Период КАК Период,
	|	СостояниеРаботниковОрганизацийЗавершения.Состояние
	|ПОМЕСТИТЬ ВТСостояниеЗавершения
	|ИЗ
	|	ВТСрезСостояний КАК ВТСрезСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизацийЗавершения
	|		ПО ВТСрезСостояний.Сотрудник = СостояниеРаботниковОрганизацийЗавершения.Сотрудник
	|			И ВТСрезСостояний.ДатаСреза = СостояниеРаботниковОрганизацийЗавершения.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	ПериодНачала,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостояниеРаботников.НомерСтроки КАК НомерСтроки,
	|	СостояниеРаботников.Сотрудник,
	|	СостояниеРаботников.ВидЕжегодногоОтпуска,
	|	РАЗНОСТЬДАТ(СостояниеРаботников.ДатаНачалаОтпуска, СостояниеРаботников.ДатаОкончанияОтпуска, ДЕНЬ) КАК КоличествоДнейОтпуска,
	|	СостояниеРаботников.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ДОБАВИТЬКДАТЕ(СостояниеРаботников.ДатаОкончанияОтпуска, ДЕНЬ, -1) КАК ДатаОкончанияОтпуска,
	|	СостояниеРаботников.Состояние,
	|	СостояниеРаботников.СостояниеЗавершения
	|ИЗ
	|	(ВЫБРАТЬ
	|		СостояниеРаботниковОрганизаций.НомерСтроки КАК НомерСтроки,
	|		СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|		СостояниеРаботниковОрганизаций.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		СостояниеРаботниковОрганизаций.Период КАК ДатаНачалаОтпуска,
	|		ВЫБОР
	|			КОГДА (НЕ СостояниеРаботниковОрганизацийЗавершения.Период ЕСТЬ NULL )
	|					И СостояниеРаботниковОрганизацийЗавершения.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА СостояниеРаботниковОрганизацийЗавершения.Период
	|			КОГДА СостояниеРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И СостояниеРаботниковОрганизацийЗавершения.Период > СостояниеРаботниковОрганизаций.ПериодЗавершения
	|				ТОГДА СостояниеРаботниковОрганизаций.ПериодЗавершения
	|			ИНАЧЕ ВЫБОР
	|					КОГДА Увольнения.ДатаУвольнения ЕСТЬ NULL 
	|						ТОГДА &ТекущаяДата
	|					ИНАЧЕ Увольнения.ДатаУвольнения
	|				КОНЕЦ
	|		КОНЕЦ КАК ДатаОкончанияОтпуска,
	|		СостояниеРаботниковОрганизаций.Состояние КАК Состояние,
	|		ВЫБОР
	|			КОГДА (НЕ СостояниеРаботниковОрганизацийЗавершения.Период ЕСТЬ NULL )
	|					И СостояниеРаботниковОрганизацийЗавершения.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА СостояниеРаботниковОрганизацийЗавершения.Состояние
	|			КОГДА СостояниеРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И СостояниеРаботниковОрганизацийЗавершения.Период > СостояниеРаботниковОрганизаций.ПериодЗавершения
	|				ТОГДА СостояниеРаботниковОрганизаций.СостояниеЗавершения
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|		КОНЕЦ КАК СостояниеЗавершения
	|	ИЗ
	|		ВТСостояние КАК СостояниеРаботниковОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеЗавершения КАК СостояниеРаботниковОрганизацийЗавершения
	|			ПО СостояниеРаботниковОрганизаций.Сотрудник = СостояниеРаботниковОрганизацийЗавершения.Сотрудник
	|				И СостояниеРаботниковОрганизаций.НомерСтроки = СостояниеРаботниковОрганизацийЗавершения.НомерСтроки
	|				И СостояниеРаботниковОрганизаций.ВидЕжегодногоОтпуска = СостояниеРаботниковОрганизацийЗавершения.ВидЕжегодногоОтпуска
	|				И СостояниеРаботниковОрганизаций.Период < СостояниеРаботниковОрганизацийЗавершения.Период
	|				И СостояниеРаботниковОрганизаций.Период = СостояниеРаботниковОрганизацийЗавершения.ПериодНачала
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТУвольнения КАК Увольнения
	|			ПО СостояниеРаботниковОрганизаций.НомерСтроки = Увольнения.НомерСтроки
	|				И СостояниеРаботниковОрганизаций.Сотрудник = Увольнения.Сотрудник) КАК СостояниеРаботников
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ДатаНачалаОтпуска";
	ТаблицаОтпусковДляИсключения = Запрос.Выполнить().Выгрузить();
	
	// Таблица остатков
	Запрос.УстановитьПараметр("ВключатьТекущийРабочийГод",	ВключатьТекущийРабочийГод);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследнийРабочийГод.НомерСтроки КАК НомерСтроки,
	|	ПоследнийРабочийГод.Сотрудник,
	|	ПоследнийРабочийГод.ДатаНачалаРабочегоГода,
	|	ПоследнийРабочийГод.ВидЕжегодногоОтпуска,
	|	ПоследнийРабочийГод.ДатаПолученияДанных КАК ДатаПолученияДанных,
	|	ПоследнийРабочийГод.ДатаОстатков,
	|	ПоследнийРабочийГод.ДатаПриемаНаРаботу,
	|	ПоследнийРабочийГод.ДатаУвольнения,
	|	ЕСТЬNULL(ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода, ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода, ГОД, 1), СЕКУНДА, -1)) КАК ДатаОкончанияРабочегоГода,
	|	ОстаткиОтпусков.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоследнийРабочийГод.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода) КАК ДатаНачалаРабочегоГода,
	|		ПоследнийРабочийГод.ДатаПолученияДанных КАК ДатаПолученияДанных,
	|		ПоследнийРабочийГод.ДатаОстатков КАК ДатаОстатков,
	|		ПоследнийРабочийГод.НомерСтроки КАК НомерСтроки,
	|		ПоследнийРабочийГод.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		ПоследнийРабочийГод.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу,
	|		ПоследнийРабочийГод.ДатаУвольнения КАК ДатаУвольнения
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Работники.Сотрудник КАК Сотрудник,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА (НЕ ОстаткиОтпусков.ДатаОкончанияРабочегоГода ЕСТЬ NULL )
	|						ТОГДА ДОБАВИТЬКДАТЕ(ОстаткиОтпусков.ДатаОкончанияРабочегоГода, ДЕНЬ, 1)
	|					ИНАЧЕ Работники.Период
	|				КОНЕЦ) КАК ДатаНачалаРабочегоГода,
	|			ТаблицаПериодов.ДатаОкончания КАК ДатаПолученияДанных,
	|			ОстаткиОтпусков.ДатаОстатков КАК ДатаОстатков,
	|			ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
	|			ТаблицаПериодов.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|			Работники.Период КАК ДатаПриемаНаРаботу,
	|			Увольнения.ДатаУвольнения КАК ДатаУвольнения
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТаблицаПериодов.Сотрудник КАК Сотрудник,
	|				ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
	|				МАКСИМУМ(Работники.Период) КАК Период
	|			ИЗ
	|				ВТТаблицаПериодов КАК ТаблицаПериодов
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|					ПО ТаблицаПериодов.Сотрудник = Работники.Сотрудник
	|						И ТаблицаПериодов.ДатаНачала >= Работники.Период
	|						И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТаблицаПериодов.Сотрудник,
	|				ТаблицаПериодов.НомерСтроки) КАК Работники
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПериодов КАК ТаблицаПериодов
	|					ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеОстатки КАК ОстаткиОтпусков
	|					ПО ТаблицаПериодов.Сотрудник = ОстаткиОтпусков.Сотрудник
	|						И ТаблицаПериодов.НомерСтроки = ОстаткиОтпусков.НомерСтроки
	|						И ТаблицаПериодов.ВидЕжегодногоОтпуска = ОстаткиОтпусков.ВидЕжегодногоОтпуска
	|					ЛЕВОЕ СОЕДИНЕНИЕ ВТУвольнения КАК Увольнения
	|					ПО ТаблицаПериодов.Сотрудник = Увольнения.Сотрудник
	|						И ТаблицаПериодов.НомерСтроки = Увольнения.НомерСтроки
	|				ПО Работники.Сотрудник = ТаблицаПериодов.Сотрудник
	|					И Работники.НомерСтроки = ТаблицаПериодов.НомерСтроки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Работники.Сотрудник,
	|			ТаблицаПериодов.НомерСтроки,
	|			ТаблицаПериодов.ВидЕжегодногоОтпуска,
	|			ТаблицаПериодов.ДатаОкончания,
	|			ОстаткиОтпусков.ДатаОстатков,
	|			Работники.Период,
	|			Увольнения.ДатаУвольнения) КАК ПоследнийРабочийГод
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоследнийРабочийГод.Сотрудник,
	|		ПоследнийРабочийГод.НомерСтроки,
	|		ПоследнийРабочийГод.ДатаПриемаНаРаботу,
	|		ПоследнийРабочийГод.ДатаПолученияДанных,
	|		ПоследнийРабочийГод.ДатаОстатков,
	|		ПоследнийРабочийГод.ВидЕжегодногоОтпуска,
	|		ПоследнийРабочийГод.ДатаУвольнения) КАК ПоследнийРабочийГод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОстатки
	|		ПО ПоследнийРабочийГод.Сотрудник = ОстаткиОтпусковОстатки.Ссылка.Сотрудник
	|			И ПоследнийРабочийГод.ДатаНачалаРабочегоГода = ОстаткиОтпусковОстатки.ДатаНачалаРабочегоГода
	|			И ПоследнийРабочийГод.ДатаОстатков = ОстаткиОтпусковОстатки.Ссылка.ДатаАктуальности
	|			И ПоследнийРабочийГод.ВидЕжегодногоОтпуска = ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций КАК ОстаткиОтпусков
	|		ПО ПоследнийРабочийГод.Сотрудник = ОстаткиОтпусков.Сотрудник
	|			И ПоследнийРабочийГод.ДатаОстатков = ОстаткиОтпусков.ДатаАктуальности
	|ГДЕ
	|	ВЫБОР
	|			КОГДА (НЕ &ВключатьТекущийРабочийГод)
	|				ТОГДА ЕСТЬNULL(ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода, ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода, ГОД, 1), СЕКУНДА, -1)) < ПоследнийРабочийГод.ДатаПолученияДанных
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Ссылка",						Новый ОписаниеТипов("СправочникСсылка.ОстаткиОтпусковОрганизаций"));
	ТаблицаОстатков.Колонки.Добавить("Сотрудник",					Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаОстатков.Колонки.Добавить("ВидЕжегодногоОтпуска",		Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	ТаблицаОстатков.Колонки.Добавить("ДатаНачалаРабочегоГода",		Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаОкончанияРабочегоГода",	Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("НомерСтроки",					Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("ДатаПолученияДанных",			Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаПриемаНаРаботу",			Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаУвольнения",				Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаОстатков",				Новый ОписаниеТипов("Дата"));
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура(
		"НомерСтроки,
		|Сотрудник,
		|ВидЕжегодногоОтпуска",
		Выборка.НомерСтроки,
		Выборка.Сотрудник,
		Выборка.ВидЕжегодногоОтпуска);
		
		ОтпускаДляИсключения = ТаблицаОтпусковДляИсключения.НайтиСтроки(СтруктураПоиска);
		
		ДатаНачалаРабочегоГода		= Выборка.ДатаНачалаРабочегоГода;
		ДатаОкончанияРабочегоГода	= Выборка.ДатаОкончанияРабочегоГода;
		
		ДатаОграничения = ?(Выборка.ДатаУвольнения = NULL, Выборка.ДатаПолученияДанных, Выборка.ДатаУвольнения);
		
		ДлинаСуток = 86400;
		
		// В цикле будем добавлять в таблицу все рабочие года по сотрудникам
		Пока ?(ВключатьТекущийРабочийГод, ДатаОкончанияРабочегоГода < ДобавитьМесяц(ДатаОграничения, 12), ДатаОкончанияРабочегоГода < ДатаОграничения) Цикл
			Строка = ТаблицаОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
			Строка.ДатаНачалаРабочегоГода		= ДатаНачалаРабочегоГода;
			Строка.ДатаОкончанияРабочегоГода	= ДатаОкончанияРабочегоГода;
			
			Если Строка.ДатаОкончанияРабочегоГода < Дата(2006, 10, 6) Тогда
				КоличествоДнейВключаемых = 7;
			Иначе
				КоличествоДнейВключаемых = 14;
			КонецЕсли;
			
			Для Каждого ОтпускДляИсключения Из ОтпускаДляИсключения Цикл
				Если Строка.ДатаНачалаРабочегоГода <= ОтпускДляИсключения.ДатаНачалаОтпуска
					И ОтпускДляИсключения.ДатаНачалаОтпуска <= Строка.ДатаОкончанияРабочегоГода Тогда
					
					Если ОтпускДляИсключения.Состояние = Перечисления.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты Тогда
						КоличествоДнейОтпуска	= ОтпускДляИсключения.КоличествоДнейОтпуска;
						
						ОтпускДляИсключения.ДатаНачалаОтпуска		= ОтпускДляИсключения.ДатаНачалаОтпуска + Мин(ОтпускДляИсключения.КоличествоДнейОтпуска, КоличествоДнейВключаемых) * ДлинаСуток;
						ОтпускДляИсключения.КоличествоДнейОтпуска	= Макс(ОтпускДляИсключения.КоличествоДнейОтпуска - КоличествоДнейВключаемых, 0);
						
						Если ОтпускДляИсключения.КоличествоДнейОтпуска > 0 Тогда
							Строка.ДатаОкончанияРабочегоГода			= Строка.ДатаОкончанияРабочегоГода + ОтпускДляИсключения.КоличествоДнейОтпуска * ДлинаСуток;
						КонецЕсли;
						
						КоличествоДнейВключаемых = Макс(КоличествоДнейВключаемых - КоличествоДнейОтпуска, 0);
						
					Иначе
						Строка.ДатаОкончанияРабочегоГода = Строка.ДатаОкончанияРабочегоГода + ОтпускДляИсключения.КоличествоДнейОтпуска * ДлинаСуток;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ДатаНачалаРабочегоГода		= Строка.ДатаОкончанияРабочегоГода + 1;
			ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
		КонецЦикла;
		
	КонецЦикла;
	
	// Если передан регистратор, необходимо исключить как движения регистратора,
	// так и движения всех документов исправлений этого регистратора.
	МассивДокументов = Новый Массив;
	Если Регистратор <> Неопределено Тогда
		МассивДокументов.Добавить(Регистратор);
		
		МДРегистратора = Регистратор.Метаданные();
		ИмяРеквизита = "";
		Если МДРегистратора.Реквизиты.Найти("ПерерассчитываемыйДокумент") <> Неопределено Тогда
			ИмяРеквизита = "ПерерассчитываемыйДокумент";
		ИначеЕсли МДРегистратора.Реквизиты.Найти("ИсправляемыйДокумент") <> Неопределено Тогда
			ИмяРеквизита = "ИсправляемыйДокумент";
		КонецЕсли;
		Если Не ПустаяСтрока(ИмяРеквизита) Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док." + ИмяРеквизита + " КАК Ссылка
			|ИЗ
			|	Документ." + МДРегистратора.Имя + " КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка";
			
			Ссылка = Регистратор;
			Пока Ссылка <> Неопределено И Не Ссылка.Пустая() Цикл
				Запрос.УстановитьПараметр("Ссылка",	Ссылка);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Ссылка = Выборка.Ссылка;
					Если Не Ссылка.Пустая() Тогда
						МассивДокументов.Добавить(Ссылка);
					КонецЕсли;
				Иначе
					Ссылка = Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Ссылка
			|ИЗ
			|	Документ." + МДРегистратора.Имя + " КАК Док
			|ГДЕ
			|	Док." + ИмяРеквизита + " = &Ссылка";
			
			Ссылка = Регистратор;
			Пока Ссылка <> Неопределено И Не Ссылка.Пустая() Цикл
				Запрос.УстановитьПараметр("Ссылка",	Ссылка);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Ссылка = Выборка.Ссылка;
					Если Не Ссылка.Пустая() Тогда
						МассивДокументов.Добавить(Ссылка);
					КонецЕсли;
				Иначе
					Ссылка = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивДокументов",	МассивДокументов);
	
	Запрос.УстановитьПараметр("ТаблицаОстатков",	ТаблицаОстатков);
	Запрос.УстановитьПараметр("ТаблицаОтпусков",	ТаблицаОтпусковДляИсключения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Ссылка КАК Ссылка,
	|	ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ТаблицаОстатков.ДатаНачалаРабочегоГода,
	|	ТаблицаОстатков.ДатаОкончанияРабочегоГода,
	|	ТаблицаОстатков.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОстатков.ДатаПолученияДанных КАК ДатаПолученияДанных,
	|	ТаблицаОстатков.ДатаПриемаНаРаботу,
	|	ТаблицаОстатков.ДатаУвольнения,
	|	ТаблицаОстатков.ДатаОстатков
	|ПОМЕСТИТЬ ВТ_ТаблицаОстатков
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаОстатков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска,
	|	НомерСтроки,
	|	ДатаПолученияДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтпусков.НомерСтроки,
	|	ТаблицаОтпусков.Сотрудник КАК Сотрудник,
	|	ТаблицаОтпусков.ВидЕжегодногоОтпуска,
	|	ТаблицаОтпусков.КоличествоДнейОтпуска,
	|	ТаблицаОтпусков.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ТаблицаОтпусков.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска,
	|	ТаблицаОтпусков.Состояние,
	|	ТаблицаОтпусков.СостояниеЗавершения
	|ПОМЕСТИТЬ ВТ_ОтпускаДляИсключения
	|ИЗ
	|	&ТаблицаОтпусков КАК ТаблицаОтпусков
	|ГДЕ
	|	ТаблицаОтпусков.КоличествоДнейОтпуска > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаНачалаОтпуска,
	|	ДатаОкончанияОтпуска";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ТаблицаОстатков.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_СрезТаблицаОстатковИРаботники
	|ИЗ
	|	ВТ_ТаблицаОстатков КАК ТаблицаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ТаблицаОстатков.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И ТаблицаОстатков.ДатаПолученияДанных <= РаботникиОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.Сотрудник,
	|	ТаблицаОстатков.ВидЕжегодногоОтпуска,
	|	ТаблицаОстатков.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска,
	|	НомерСтроки,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Ссылка КАК Ссылка,
	|	ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ТаблицаОстатков.ВидЕжегодногоОтпуска.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	ТаблицаОстатков.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска КАК СпособРасчетаОстаткаОтпуска,
	|	ТаблицаОстатков.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ТаблицаОстатков.ДатаОкончанияРабочегоГода КАК ДатаОкончанияРабочегоГода,
	|	ТаблицаОстатков.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОстатков.ДатаПолученияДанных,
	|	ТаблицаОстатков.ДатаПриемаНаРаботу,
	|	ТаблицаОстатков.ДатаУвольнения,
	|	ТаблицаОстатков.ДатаОстатков,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(ТаблицаОстатков.ДатаПриемаНаРаботу, ТаблицаОстатков.ДатаУвольнения, МЕСЯЦ) = 10
	|				И ТаблицаОстатков.ДатаПриемаНаРаботу = НАЧАЛОПЕРИОДА(ТаблицаОстатков.ДатаПриемаНаРаботу, МЕСЯЦ)
	|				И ТаблицаОстатков.ДатаУвольнения = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ТаблицаОстатков.ДатаУвольнения, МЕСЯЦ), ДЕНЬ)
	|			ТОГДА ТаблицаОстатков.ДатаОкончанияРабочегоГода
	|		КОГДА РАЗНОСТЬДАТ(ТаблицаОстатков.ДатаПриемаНаРаботу, ТаблицаОстатков.ДатаУвольнения, МЕСЯЦ) = 11
	|				И (ДЕНЬ(ТаблицаОстатков.ДатаПриемаНаРаботу) < ДЕНЬ(ТаблицаОстатков.ДатаУвольнения)
	|					ИЛИ ДЕНЬ(ТаблицаОстатков.ДатаПриемаНаРаботу) = ДЕНЬ(ДОБАВИТЬКДАТЕ(ТаблицаОстатков.ДатаУвольнения, ДЕНЬ, 1)))
	|			ТОГДА ТаблицаОстатков.ДатаОкончанияРабочегоГода
	|		КОГДА РАЗНОСТЬДАТ(ТаблицаОстатков.ДатаПриемаНаРаботу, ТаблицаОстатков.ДатаУвольнения, МЕСЯЦ) = 12
	|				И (ДЕНЬ(ТаблицаОстатков.ДатаПриемаНаРаботу) > ДЕНЬ(ТаблицаОстатков.ДатаУвольнения)
	|					ИЛИ ДЕНЬ(ТаблицаОстатков.ДатаПриемаНаРаботу) = ДЕНЬ(ДОБАВИТЬКДАТЕ(ТаблицаОстатков.ДатаУвольнения, ДЕНЬ, 1)))
	|			ТОГДА ТаблицаОстатков.ДатаОкончанияРабочегоГода
	|		КОГДА ДОБАВИТЬКДАТЕ(ТаблицаОстатков.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ТаблицаОстатков.ДатаПолученияДанных
	|			ТОГДА НАЧАЛОПЕРИОДА(ТаблицаОстатков.ДатаОкончанияРабочегоГода, ДЕНЬ)
	|		ИНАЧЕ ТаблицаОстатков.ДатаПолученияДанных
	|	КОНЕЦ КАК ФактическаяДатаОкончанияРабочегоГода,
	|	РаботникиОрганизаций.Должность КАК Должность
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	ВТ_ТаблицаОстатков КАК ТаблицаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СрезТаблицаОстатковИРаботники КАК ВТСрезТаблицаОстатковИРаботники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ВТСрезТаблицаОстатковИРаботники.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И ВТСрезТаблицаОстатковИРаботники.Период = РаботникиОрганизаций.Период
	|		ПО ТаблицаОстатков.Сотрудник = ВТСрезТаблицаОстатковИРаботники.Сотрудник
	|			И ТаблицаОстатков.ВидЕжегодногоОтпуска = ВТСрезТаблицаОстатковИРаботники.ВидЕжегодногоОтпуска
	|			И ТаблицаОстатков.НомерСтроки = ВТСрезТаблицаОстатковИРаботники.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачалаРабочегоГода,
	|	ДатаОкончанияРабочегоГода,
	|	НомерСтроки,
	|	ФактическаяДатаОкончанияРабочегоГода,
	|	Должность,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускаДляИсключения.Сотрудник КАК Сотрудник,
	|	ВТОстатки.НомерСтроки КАК НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТОстатки.СпособРасчетаОстаткаОтпуска КАК СпособРасчетаОстаткаОтпуска,
	|	ОтпускаДляИсключения.ДатаНачалаОтпуска КАК Период,
	|	0 КАК КоличествоДнейОтпускаВГод,
	|	ВТОстатки.ДатаНачалаРабочегоГода,
	|	ВТОстатки.ФактическаяДатаОкончанияРабочегоГода,
	|	ОтпускаДляИсключения.Состояние
	|ПОМЕСТИТЬ ВТ_ГраницыОтпусковДляИсключения
	|ИЗ
	|	ВТ_ОтпускаДляИсключения КАК ОтпускаДляИсключения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТОстатки
	|		ПО ОтпускаДляИсключения.Сотрудник = ВТОстатки.Сотрудник
	|			И (ОтпускаДляИсключения.ДатаНачалаОтпуска МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ФактическаяДатаОкончанияРабочегоГода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускаДляИсключения.Сотрудник,
	|	ВТОстатки.НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска,
	|	ВТОстатки.СпособРасчетаОстаткаОтпуска,
	|	ОтпускаДляИсключения.ДатаОкончанияОтпуска,
	|	ЕСТЬNULL(СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ЕСТЬNULL(ДолжностиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ВТОстатки.КоличествоДнейОтпускаВГод)),
	|	ВТОстатки.ДатаНачалаРабочегоГода,
	|	ВТОстатки.ФактическаяДатаОкончанияРабочегоГода,
	|	ОтпускаДляИсключения.СостояниеЗавершения
	|ИЗ
	|	ВТ_ОтпускаДляИсключения КАК ОтпускаДляИсключения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций.ЕжегодныеОтпуска КАК СотрудникиОрганизацийЕжегодныеОтпуска
	|			ПО ВТОстатки.Сотрудник = СотрудникиОрганизацийЕжегодныеОтпуска.Ссылка
	|				И ВТОстатки.ВидЕжегодногоОтпуска = СотрудникиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций.ЕжегодныеОтпуска КАК ДолжностиОрганизацийЕжегодныеОтпуска
	|			ПО ВТОстатки.Должность = ДолжностиОрганизацийЕжегодныеОтпуска.Ссылка
	|				И ВТОстатки.ВидЕжегодногоОтпуска = ДолжностиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|		ПО ОтпускаДляИсключения.Сотрудник = ВТОстатки.Сотрудник
	|			И (ОтпускаДляИсключения.ДатаОкончанияОтпуска МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ФактическаяДатаОкончанияРабочегоГода)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Работники.Сотрудник КАК Сотрудник,
	|	ВТОстатки.НомерСтроки КАК НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТОстатки.СпособРасчетаОстаткаОтпуска КАК СпособРасчетаОстаткаОтпуска,
	|	ВТОстатки.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ВТОстатки.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода,
	|	ВТОстатки.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	МАКСИМУМ(Работники.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_СрезОстаткиИРаботники
	|ИЗ
	|	ВТ_Остатки КАК ВТОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ПО ВТОстатки.Сотрудник = Работники.Сотрудник
	|			И ВТОстатки.ДатаНачалаРабочегоГода >= Работники.Период
	|			И (Работники.Сотрудник В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТОстатки.Сотрудник
	|				ИЗ
	|					ВТ_Остатки КАК ВТОстатки))
	|
	|СГРУППИРОВАТЬ ПО
	|	Работники.Сотрудник,
	|	ВТОстатки.НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска,
	|	ВТОстатки.СпособРасчетаОстаткаОтпуска,
	|	ВТОстатки.КоличествоДнейОтпускаВГод,
	|	ВТОстатки.ФактическаяДатаОкончанияРабочегоГода,
	|	ВТОстатки.ДатаНачалаРабочегоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСрезОстаткиИРаботники.Сотрудник КАК Сотрудник,
	|	ВТСрезОстаткиИРаботники.НомерСтроки КАК НомерСтроки,
	|	ВТСрезОстаткиИРаботники.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТСрезОстаткиИРаботники.СпособРасчетаОстаткаОтпуска,
	|	ВТСрезОстаткиИРаботники.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ВТСрезОстаткиИРаботники.ФактическаяДатаОкончанияРабочегоГода,
	|	ВТСрезОстаткиИРаботники.КоличествоДнейОтпускаВГод,
	|	ВТСрезОстаткиИРаботники.Период КАК Период,
	|	Работники.Должность КАК Должность
	|ПОМЕСТИТЬ ВТ_ОстаткиСДолжностью
	|ИЗ
	|	ВТ_СрезОстаткиИРаботники КАК ВТСрезОстаткиИРаботники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ПО ВТСрезОстаткиИРаботники.Сотрудник = Работники.Сотрудник
	|			И ВТСрезОстаткиИРаботники.Период = Работники.Период
	|ГДЕ
	|	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачалаРабочегоГода,
	|	Период,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизаций.Должность КАК Должность,
	|	ВТОстатки.НомерСтроки КАК НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТОстатки.СпособРасчетаОстаткаОтпуска КАК СпособРасчетаОстаткаОтпуска,
	|	ВТОстатки.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ВТОстатки.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода,
	|	РаботникиОрганизаций.Период КАК Период,
	|	ВТОстатки.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод
	|ПОМЕСТИТЬ ВТ_ПеремещенияСотрудников
	|ИЗ
	|	ВТ_Остатки КАК ВТОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ВТОстатки.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И (РаботникиОрганизаций.Период МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ДатаОкончанияРабочегоГода)
	|ГДЕ
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник,
	|	РаботникиОрганизаций.ДолжностьЗавершения,
	|	ВТОстатки.НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска,
	|	ВТОстатки.СпособРасчетаОстаткаОтпуска,
	|	ВТОстатки.ДатаНачалаРабочегоГода,
	|	ВТОстатки.ФактическаяДатаОкончанияРабочегоГода,
	|	ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.ПериодЗавершения, ДЕНЬ, -1),
	|	ВТОстатки.КоличествоДнейОтпускаВГод
	|ИЗ
	|	ВТ_Остатки КАК ВТОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ВТОстатки.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И ((НЕ РаботникиОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)))
	|			И (РаботникиОрганизаций.ПериодЗавершения МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ДатаОкончанияРабочегоГода)
	|ГДЕ
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Должность,
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстаткиСДолжностью.Сотрудник КАК Сотрудник,
	|	ВТОстаткиСДолжностью.НомерСтроки КАК НомерСтроки,
	|	ВТОстаткиСДолжностью.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТОстаткиСДолжностью.СпособРасчетаОстаткаОтпуска КАК СпособРасчетаОстаткаОтпуска,
	|	ВТОстаткиСДолжностью.ДатаНачалаРабочегоГода КАК Период,
	|	ЕСТЬNULL(СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ЕСТЬNULL(ДолжностиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ВТОстаткиСДолжностью.КоличествоДнейОтпускаВГод)) КАК КоличествоДнейОтпускаВГод,
	|	ВТОстаткиСДолжностью.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ВТОстаткиСДолжностью.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода
	|ПОМЕСТИТЬ ВТ_ИзмененияКоличестваДнейВГод
	|ИЗ
	|	ВТ_ОстаткиСДолжностью КАК ВТОстаткиСДолжностью
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГраницыОтпусковДляИсключения КАК ВТОтсутствия
	|		ПО ВТОстаткиСДолжностью.Сотрудник = ВТОтсутствия.Сотрудник
	|			И ВТОстаткиСДолжностью.НомерСтроки = ВТОтсутствия.НомерСтроки
	|			И ВТОстаткиСДолжностью.ВидЕжегодногоОтпуска = ВТОтсутствия.ВидЕжегодногоОтпуска
	|			И ВТОстаткиСДолжностью.ДатаНачалаРабочегоГода = ВТОтсутствия.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций.ЕжегодныеОтпуска КАК СотрудникиОрганизацийЕжегодныеОтпуска
	|		ПО ВТОстаткиСДолжностью.Сотрудник = СотрудникиОрганизацийЕжегодныеОтпуска.Ссылка
	|			И ВТОстаткиСДолжностью.ВидЕжегодногоОтпуска = СотрудникиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций.ЕжегодныеОтпуска КАК ДолжностиОрганизацийЕжегодныеОтпуска
	|		ПО ВТОстаткиСДолжностью.Должность = ДолжностиОрганизацийЕжегодныеОтпуска.Ссылка
	|			И ВТОстаткиСДолжностью.ВидЕжегодногоОтпуска = ДолжностиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|ГДЕ
	|	ВТОтсутствия.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПеремещенияСотрудников.Сотрудник,
	|	ВТПеремещенияСотрудников.НомерСтроки,
	|	ВТПеремещенияСотрудников.ВидЕжегодногоОтпуска,
	|	ВТПеремещенияСотрудников.СпособРасчетаОстаткаОтпуска,
	|	ВТПеремещенияСотрудников.Период,
	|	ЕСТЬNULL(СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ЕСТЬNULL(ДолжностиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ВТПеремещенияСотрудников.КоличествоДнейОтпускаВГод)),
	|	ВТПеремещенияСотрудников.ДатаНачалаРабочегоГода,
	|	ВТПеремещенияСотрудников.ФактическаяДатаОкончанияРабочегоГода
	|ИЗ
	|	ВТ_ПеремещенияСотрудников КАК ВТПеремещенияСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГраницыОтпусковДляИсключения КАК ВТОтсутствия
	|		ПО ВТПеремещенияСотрудников.Сотрудник = ВТОтсутствия.Сотрудник
	|			И ВТПеремещенияСотрудников.НомерСтроки = ВТОтсутствия.НомерСтроки
	|			И ВТПеремещенияСотрудников.ВидЕжегодногоОтпуска = ВТОтсутствия.ВидЕжегодногоОтпуска
	|			И ВТПеремещенияСотрудников.Период = ВТОтсутствия.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций.ЕжегодныеОтпуска КАК СотрудникиОрганизацийЕжегодныеОтпуска
	|		ПО ВТПеремещенияСотрудников.Сотрудник = СотрудникиОрганизацийЕжегодныеОтпуска.Ссылка
	|			И ВТПеремещенияСотрудников.ВидЕжегодногоОтпуска = СотрудникиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций.ЕжегодныеОтпуска КАК ДолжностиОрганизацийЕжегодныеОтпуска
	|		ПО ВТПеремещенияСотрудников.Должность = ДолжностиОрганизацийЕжегодныеОтпуска.Ссылка
	|			И ВТПеремещенияСотрудников.ВидЕжегодногоОтпуска = ДолжностиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|ГДЕ
	|	ВТОтсутствия.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОтсутствия.Сотрудник,
	|	ВТОтсутствия.НомерСтроки,
	|	ВТОтсутствия.ВидЕжегодногоОтпуска,
	|	ВТОтсутствия.СпособРасчетаОстаткаОтпуска,
	|	ВТОтсутствия.Период,
	|	ВТОтсутствия.КоличествоДнейОтпускаВГод,
	|	ВТОтсутствия.ДатаНачалаРабочегоГода,
	|	ВТОтсутствия.ФактическаяДатаОкончанияРабочегоГода
	|ИЗ
	|	ВТ_ГраницыОтпусковДляИсключения КАК ВТОтсутствия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИзмененияКоличестваДнейВГод.Сотрудник КАК Сотрудник,
	|	ВТИзмененияКоличестваДнейВГод.НомерСтроки КАК НомерСтроки,
	|	ВТИзмененияКоличестваДнейВГод.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТИзмененияКоличестваДнейВГод.СпособРасчетаОстаткаОтпуска КАК СпособРасчетаОстаткаОтпуска,
	|	ВТИзмененияКоличестваДнейВГод.Период КАК ДатаНачалаПериода,
	|	МИНИМУМ(ЕСТЬNULL(ВТИзмененияКоличестваДнейВГодСрез.Период, ВТИзмененияКоличестваДнейВГод.ФактическаяДатаОкончанияРабочегоГода)) КАК ДатаОкончанияПериода,
	|	ВТИзмененияКоличестваДнейВГод.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	ВТИзмененияКоличестваДнейВГод.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ВТИзмененияКоличестваДнейВГод.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода
	|ПОМЕСТИТЬ ВТ_ПериодыВРабочемГоду
	|ИЗ
	|	ВТ_ИзмененияКоличестваДнейВГод КАК ВТИзмененияКоличестваДнейВГод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИзмененияКоличестваДнейВГод КАК ВТИзмененияКоличестваДнейВГодСрез
	|		ПО ВТИзмененияКоличестваДнейВГод.Сотрудник = ВТИзмененияКоличестваДнейВГодСрез.Сотрудник
	|			И ВТИзмененияКоличестваДнейВГод.НомерСтроки = ВТИзмененияКоличестваДнейВГодСрез.НомерСтроки
	|			И ВТИзмененияКоличестваДнейВГод.ВидЕжегодногоОтпуска = ВТИзмененияКоличестваДнейВГодСрез.ВидЕжегодногоОтпуска
	|			И ВТИзмененияКоличестваДнейВГод.Период < ВТИзмененияКоличестваДнейВГодСрез.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТИзмененияКоличестваДнейВГод.Сотрудник,
	|	ВТИзмененияКоличестваДнейВГод.ВидЕжегодногоОтпуска,
	|	ВТИзмененияКоличестваДнейВГод.СпособРасчетаОстаткаОтпуска,
	|	ВТИзмененияКоличестваДнейВГод.НомерСтроки,
	|	ВТИзмененияКоличестваДнейВГод.Период,
	|	ВТИзмененияКоличестваДнейВГод.КоличествоДнейОтпускаВГод,
	|	ВТИзмененияКоличестваДнейВГод.ФактическаяДатаОкончанияРабочегоГода,
	|	ВТИзмененияКоличестваДнейВГод.ДатаНачалаРабочегоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачалаПериода,
	|	ДатаОкончанияПериода,
	|	КоличествоДнейОтпускаВГод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыВРабочемГоду.Сотрудник КАК Сотрудник,
	|	ПериодыВРабочемГоду.НомерСтроки КАК НомерСтроки,
	|	ПериодыВРабочемГоду.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ПериодыВРабочемГоду.КоличествоДнейОтпускаВГод,
	|	ПериодыВРабочемГоду.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ПериодыВРабочемГоду.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода,
	|	РАЗНОСТЬДАТ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДОБАВИТЬКДАТЕ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДЕНЬ, ПериодыВРабочемГоду.КалендарныеДни), МЕСЯЦ) + ВЫБОР
	|		КОГДА ДЕНЬ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода) <= ДЕНЬ(ДОБАВИТЬКДАТЕ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДЕНЬ, ПериодыВРабочемГоду.КалендарныеДни))
	|			ТОГДА ВЫБОР
	|					КОГДА ДЕНЬ(ДОБАВИТЬКДАТЕ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДЕНЬ, ПериодыВРабочемГоду.КалендарныеДни)) - ДЕНЬ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода) > ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДЕНЬ, ПериодыВРабочемГоду.КалендарныеДни), МЕСЯЦ)) / 2 - 1
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДЕНЬ(КОНЕЦПЕРИОДА(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, МЕСЯЦ)) - ДЕНЬ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода) + 1 + ДЕНЬ(ДОБАВИТЬКДАТЕ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДЕНЬ, ПериодыВРабочемГоду.КалендарныеДни)) <= ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДЕНЬ, ПериодыВРабочемГоду.КалендарныеДни), МЕСЯЦ)) / 2
	|					ТОГДА -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоМесяцевВПериоде
	|ПОМЕСТИТЬ ВТ_ПериодыВЦелыхМесяцах
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТПериодыВРабочемГоду.Сотрудник КАК Сотрудник,
	|		ВТПериодыВРабочемГоду.НомерСтроки КАК НомерСтроки,
	|		ВТПериодыВРабочемГоду.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		ВТПериодыВРабочемГоду.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|		ВТПериодыВРабочемГоду.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|		ВТПериодыВРабочемГоду.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода,
	|		СУММА(РАЗНОСТЬДАТ(ВТПериодыВРабочемГоду.ДатаНачалаПериода, ВТПериодыВРабочемГоду.ДатаОкончанияПериода, ДЕНЬ)) КАК КалендарныеДни
	|	ИЗ
	|		ВТ_ПериодыВРабочемГоду КАК ВТПериодыВРабочемГоду
	|	ГДЕ
	|		(НЕ ВТПериодыВРабочемГоду.КоличествоДнейОтпускаВГод = 0)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТПериодыВРабочемГоду.Сотрудник,
	|		ВТПериодыВРабочемГоду.НомерСтроки,
	|		ВТПериодыВРабочемГоду.ВидЕжегодногоОтпуска,
	|		ВТПериодыВРабочемГоду.КоличествоДнейОтпускаВГод,
	|		ВТПериодыВРабочемГоду.ДатаНачалаРабочегоГода,
	|		ВТПериодыВРабочемГоду.ФактическаяДатаОкончанияРабочегоГода) КАК ПериодыВРабочемГоду
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыВЦелыхМесяцах.Сотрудник КАК Сотрудник,
	|	ПериодыВЦелыхМесяцах.НомерСтроки КАК НомерСтроки,
	|	ПериодыВЦелыхМесяцах.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	СУММА(ВЫБОР
	|			КОГДА ПериодыВЦелыхМесяцах.КоличествоМесяцевВПериоде >= 12
	|				ТОГДА ПериодыВЦелыхМесяцах.КоличествоДнейОтпускаВГод
	|			ИНАЧЕ ПериодыВЦелыхМесяцах.КоличествоДнейОтпускаВГод / 12 * ПериодыВЦелыхМесяцах.КоличествоМесяцевВПериоде
	|		КОНЕЦ) КАК КоличествоДнейОтпускаВПериоде,
	|	ПериодыВЦелыхМесяцах.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ПериодыВЦелыхМесяцах.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода
	|ПОМЕСТИТЬ ВТ_ИзмененияКоличестваДнейВПериоде
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТПериодыВЦелыхМесяцах.Сотрудник КАК Сотрудник,
	|		ВТПериодыВЦелыхМесяцах.НомерСтроки КАК НомерСтроки,
	|		ВТПериодыВЦелыхМесяцах.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		ВТПериодыВЦелыхМесяцах.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|		СУММА(ВТПериодыВЦелыхМесяцах.КоличествоМесяцевВПериоде) КАК КоличествоМесяцевВПериоде,
	|		ВТПериодыВЦелыхМесяцах.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|		ВТПериодыВЦелыхМесяцах.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода
	|	ИЗ
	|		ВТ_ПериодыВЦелыхМесяцах КАК ВТПериодыВЦелыхМесяцах
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТПериодыВЦелыхМесяцах.Сотрудник,
	|		ВТПериодыВЦелыхМесяцах.НомерСтроки,
	|		ВТПериодыВЦелыхМесяцах.ВидЕжегодногоОтпуска,
	|		ВТПериодыВЦелыхМесяцах.КоличествоДнейОтпускаВГод,
	|		ВТПериодыВЦелыхМесяцах.ДатаНачалаРабочегоГода,
	|		ВТПериодыВЦелыхМесяцах.ФактическаяДатаОкончанияРабочегоГода) КАК ПериодыВЦелыхМесяцах
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыВЦелыхМесяцах.Сотрудник,
	|	ПериодыВЦелыхМесяцах.НомерСтроки,
	|	ПериодыВЦелыхМесяцах.ВидЕжегодногоОтпуска,
	|	ПериодыВЦелыхМесяцах.ДатаНачалаРабочегоГода,
	|	ПериодыВЦелыхМесяцах.ФактическаяДатаОкончанияРабочегоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачалаРабочегоГода,
	|	ФактическаяДатаОкончанияРабочегоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстатки.Сотрудник КАК Сотрудник,
	|	ВТОстатки.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ВТОстатки.ДатаОкончанияРабочегоГода КАК ДатаОкончанияРабочегоГода,
	|	ВТОстатки.НомерСтроки КАК НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТОстатки.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу,
	|	ВТОстатки.ДатаПолученияДанных КАК ДатаПолученияДанных,
	|	ВТОстатки.ДатаОстатков КАК ДатаОстатков,
	|	СУММА(ЕСТЬNULL(ФактическиеОтпуска.Количество, 0)) КАК ФактическийОтпуск,
	|	ВЫРАЗИТЬ(ВТИзмененияКоличестваДнейВПериоде.КоличествоДнейОтпускаВПериоде КАК ЧИСЛО(5, 2)) КАК КоличествоДнейОтпускаЗаРабочийГод,
	|	ОстаткиОтпусков.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Остатки КАК ВТОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций КАК ОстаткиОтпусков
	|		ПО ВТОстатки.Ссылка = ОстаткиОтпусков.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОстатки
	|		ПО ВТОстатки.Ссылка = ОстаткиОтпусковОстатки.Ссылка
	|			И ВТОстатки.ДатаНачалаРабочегоГода = ОстаткиОтпусковОстатки.ДатаНачалаРабочегоГода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпускаОрганизаций КАК ФактическиеОтпуска
	|		ПО ВТОстатки.Сотрудник = ФактическиеОтпуска.Сотрудник
	|			И ВТОстатки.ВидЕжегодногоОтпуска = ФактическиеОтпуска.ВидЕжегодногоОтпуска
	|			И (ВЫБОР
	|				КОГДА ФактическиеОтпуска.Компенсация
	|					ТОГДА ВЫБОР
	|							КОГДА ВТОстатки.ДатаОкончанияРабочегоГода <= ВТОстатки.ДатаПолученияДанных
	|								ТОГДА ФактическиеОтпуска.Период МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ДатаОкончанияРабочегоГода
	|							ИНАЧЕ ФактическиеОтпуска.Период МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ДатаПолученияДанных
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТОстатки.ДатаОкончанияРабочегоГода <= ВТОстатки.ДатаПолученияДанных
	|							ТОГДА ФактическиеОтпуска.ДатаОкончания МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ДатаОкончанияРабочегоГода
	|						ИНАЧЕ ФактическиеОтпуска.ДатаОкончания МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ДОБАВИТЬКДАТЕ(ВТОстатки.ДатаПолученияДанных, ДЕНЬ, -1)
	|					КОНЕЦ
	|			КОНЕЦ)
	|			И ((НЕ ФактическиеОтпуска.Регистратор В (&МассивДокументов)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененияКоличестваДнейВПериоде КАК ВТИзмененияКоличестваДнейВПериоде
	|		ПО ВТОстатки.Сотрудник = ВТИзмененияКоличестваДнейВПериоде.Сотрудник
	|			И ВТОстатки.НомерСтроки = ВТИзмененияКоличестваДнейВПериоде.НомерСтроки
	|			И ВТОстатки.ВидЕжегодногоОтпуска = ВТИзмененияКоличестваДнейВПериоде.ВидЕжегодногоОтпуска
	|			И ВТОстатки.ДатаНачалаРабочегоГода = ВТИзмененияКоличестваДнейВПериоде.ДатаНачалаРабочегоГода
	|			И ВТОстатки.ФактическаяДатаОкончанияРабочегоГода = ВТИзмененияКоличестваДнейВПериоде.ФактическаяДатаОкончанияРабочегоГода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОстатки.Сотрудник,
	|	ВТОстатки.ДатаНачалаРабочегоГода,
	|	ВТОстатки.ДатаОкончанияРабочегоГода,
	|	ВТОстатки.НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска,
	|	ВТОстатки.ДатаПриемаНаРаботу,
	|	ВТОстатки.ДатаПолученияДанных,
	|	ВТОстатки.ДатаОстатков,
	|	ОстаткиОтпусков.Ссылка,
	|	ВЫРАЗИТЬ(ВТИзмененияКоличестваДнейВПериоде.КоличествоДнейОтпускаВПериоде КАК ЧИСЛО(5, 2))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачалаРабочегоГода";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьДополнениеОстатковОрганизаций()

// Функция возвращает остаток отпусков
// Функция также сообщает, являются ли хранимые в системе остатки актуальными,
// то есть введены остатки по всем рабочим годам до даты, на которую получаются остатки
//
Функция ПодготовитьДанныеПоРегламентированнымОтпускам(
	ТаблицаПериодов,					// Таблица периодов, для которой рассчитываем данные по отпускам
	Регистратор = Неопределено,			// Регистратор, которым списывается отпуск
	ИспользоватьОстатки = Истина,		// Ложь только в случае, если необходимо пересчитать остатки из формы элемента справочника остатков
	ВключатьТекущийРабочийГод = Истина	// Значение Истина должно быть установлено всегда, когда передается регистратор
	) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц	= Новый МенеджерВременныхТаблиц;
	
	// Подготовим временную таблицу со списком периодов
	ПодготовитьТаблицуПериодовОрганизаций(Запрос, ТаблицаПериодов);
	
	// Подготовим временную таблицу с актуальными остатками
	ПроцедурыУправленияПерсоналом.ПодготовитьТаблицуАктуальныхОстатковОрганизаций(Запрос, ИспользоватьОстатки);
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Ссылка",								Новый ОписаниеТипов("СправочникСсылка.ОстаткиОтпусковОрганизаций"));
	ТаблицаОстатков.Колонки.Добавить("Сотрудник",							Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаОстатков.Колонки.Добавить("НомерСтроки",							Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("Количество",							Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(7, 3)));
	ТаблицаОстатков.Колонки.Добавить("ДатаНачалаРабочегоГода",				Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаОкончанияРабочегоГода",			Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("НеАктуальный",						Новый ОписаниеТипов("Булево"));
	ТаблицаОстатков.Колонки.Добавить("ДатаПриемаНаРаботу",					Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаПолученияДанных",					Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаОстатков",						Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ВидЕжегодногоОтпуска",				Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	
	// Получим текущие наиболее актуальные остатки отпусков
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиОтпусков.*
	|ИЗ
	|	ВТАктуальныеОстатки КАК ОстаткиОтпусков
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачалаРабочегоГода";
	
	ТекущиеОстатки = Запрос.Выполнить().Выгрузить();
	
	// Теперь дополним существующие в системе остатки
	// Остатки будут дополнены по тем рабочим годам, которые в остатках не значатся
	// Кроме того, если будет включен текущий рабочий год, запрос ВСЕГДА вернет запись
	// за текущий рабочий год. Это позволит посчитать текущий остаток с учетом уже отгуленных
	Выборка = ПолучитьДополнениеОстатковОрганизаций(Запрос, Регистратор, ВключатьТекущийРабочийГод);
	
	ОстаткиТекущейСтроки = ТекущиеОстатки.СкопироватьКолонки();
	
	// Добавим свою колонку количество с нужным количеством знаков после запятой
	ОстаткиТекущейСтроки.Колонки.Удалить(ОстаткиТекущейСтроки.Колонки.Индекс(ОстаткиТекущейСтроки.Колонки["Количество"]));
	ОстаткиТекущейСтроки.Колонки.Добавить("Количество",	Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(7, 3)));
	
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("ВидЕжегодногоОтпуска") Цикл
			
			НайденныеОстатки = ТекущиеОстатки.НайтиСтроки(Новый Структура("НомерСтроки, ВидЕжегодногоОтпуска", Выборка.НомерСтроки, Выборка.ВидЕжегодногоОтпуска));
			
			ОстаткиТекущейСтроки.Очистить();
			Для Каждого Остаток Из НайденныеОстатки Цикл
				ЗаполнитьЗначенияСвойств(ОстаткиТекущейСтроки.Добавить(), Остаток);
			КонецЦикла;
			
			Пока Выборка.Следующий() Цикл
				ФактическийОтпускДляСписания = Выборка.ФактическийОтпуск;
				
				ТекОстатки = ОстаткиТекущейСтроки.Скопировать();
				
				ОстаткиТекущейСтроки.Очистить();
				
				Для Каждого СтрокаОстатков Из ТекОстатки Цикл
					Если СтрокаОстатков.Количество < 0 Тогда
						ФактическийОтпускДляСписания = ФактическийОтпускДляСписания - СтрокаОстатков.Количество;
						Продолжить;
					КонецЕсли;
					
					Если (СтрокаОстатков.Количество - ФактическийОтпускДляСписания) > 0 Тогда
						Строка = ОстаткиТекущейСтроки.Добавить();
						ЗаполнитьЗначенияСвойств(Строка, СтрокаОстатков);
						
						Строка.Количество = Строка.Количество - Мин(ФактическийОтпускДляСписания, Строка.Количество);
					КонецЕсли;
					
					Если ФактическийОтпускДляСписания <> 0 Тогда
						ФактическийОтпускДляСписания = Макс(0, ФактическийОтпускДляСписания - СтрокаОстатков.Количество);
					КонецЕсли;
				КонецЦикла;
				
				Строка = ОстаткиТекущейСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Выборка);
				Строка.Количество	= Выборка.КоличествоДнейОтпускаЗаРабочийГод - ФактическийОтпускДляСписания;
			КонецЦикла;
			
			// Из найденных остатков удалим остатки по виду ежегодного отпуска из выборки
			Для Каждого Остаток Из НайденныеОстатки Цикл
				ТекущиеОстатки.Удалить(Остаток);
			КонецЦикла;
			
			Для Каждого СтрокаОстатков Из ОстаткиТекущейСтроки Цикл
				Строка = ТаблицаОстатков.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Выборка);
				ЗаполнитьЗначенияСвойств(Строка, СтрокаОстатков, , "НомерСтроки, Ссылка, Сотрудник");
				Строка.НеАктуальный	= Истина;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОстаткиПоСотруднику Из ТекущиеОстатки Цикл
		// остатки по каждому виду ежегодного отпуска добавляем только в том случае, если они есть в таблице периодов
		НайденныеПериоды = ТаблицаПериодов.НайтиСтроки(Новый Структура("НомерСтроки, ВидЕжегодногоОтпуска",	ОстаткиПоСотруднику.НомерСтроки, ОстаткиПоСотруднику.ВидЕжегодногоОтпуска));
		Если НайденныеПериоды.Количество() > 0 Тогда
			Строка = ТаблицаОстатков.Добавить();
			Строка.НеАктуальный	= Ложь;
			ЗаполнитьЗначенияСвойств(Строка, ОстаткиПоСотруднику);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаОстатков",	ТаблицаОстатков);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка,
	|	Сотрудник,
	|	НомерСтроки,
	|	ДатаНачалаРабочегоГода,
	|	ДатаОкончанияРабочегоГода,
	|	НеАктуальный,
	|	ДатаПриемаНаРаботу,
	|	ДатаПолученияДанных,
	|	ДатаОстатков,
	|	ВидЕжегодногоОтпуска,
	|	ВЫРАЗИТЬ(Количество КАК ЧИСЛО(5, 2)) КАК Количество
	|ПОМЕСТИТЬ ВТПоследнийРабочийГод
	|ИЗ
	|	&ТаблицаОстатков КАК ПоследнийРабочийГод
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследнийРабочийГод.*,
	|	ЕСТЬNULL(ДанныеФактическогоОтпуска.ДнейОтпуска, 0) КАК ДнейОтпуска,
	|	ДанныеФактическогоОтпуска.ДатаНачала,
	|	ДанныеФактическогоОтпуска.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ДанныеФактическогоОтпуска.ДатаНачала > ПоследнийРабочийГод.ДатаОкончанияРабочегоГода
	|			ТОГДА ПоследнийРабочийГод.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоДнейОтпускаБезТекущегоГода,
	|	0 КАК ОтпускВСчетЕжегодного,
	|	0 КАК ОтпускВСчетЕжегодногоБезТекущегоГода,
	|	0 КАК ОтпускАвансом,
	|	ДАТАВРЕМЯ(1,1,1) КАК МаксимальнаяДатаНачалаРабочегоГода
	|ИЗ
	|	ВТПоследнийРабочийГод КАК ПоследнийРабочийГод
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаПериодов.НомерСтроки,
	|			ТаблицаПериодов.ВидЕжегодногоОтпуска,
	|			ТаблицаПериодов.Сотрудник,
	|			СУММА(ВЫБОР
	|				КОГДА ТаблицаПериодов.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|					ТОГДА ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.Шестидневка, 0)
	|				ИНАЧЕ ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.КалендарныеДни, 0)
	|			КОНЕЦ) КАК ДнейОтпуска,
	|			ТаблицаПериодов.ДатаНачала,
	|			ТаблицаПериодов.ДатаОкончания
	|		ИЗ
	|			ВТТаблицаПериодов КАК ТаблицаПериодов
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|				ПО РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ТаблицаПериодов.ДатаНачала И ТаблицаПериодов.ДатаОкончания
	|
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодов.НомерСтроки,
	|		ТаблицаПериодов.ВидЕжегодногоОтпуска,
	|		ТаблицаПериодов.Сотрудник,
	|		ТаблицаПериодов.ДатаНачала,
	|		ТаблицаПериодов.ДатаОкончания) КАК ДанныеФактическогоОтпуска
	|	ПО ПоследнийРабочийГод.НомерСтроки = ДанныеФактическогоОтпуска.НомерСтроки
	|		И ПоследнийРабочийГод.Сотрудник = ДанныеФактическогоОтпуска.Сотрудник
	|		И ПоследнийРабочийГод.ВидЕжегодногоОтпуска = ДанныеФактическогоОтпуска.ВидЕжегодногоОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоследнийРабочийГод.НомерСтроки,
	|	ПоследнийРабочийГод.ВидЕжегодногоОтпуска.Код,
	|	ДатаНачалаРабочегоГода
	|
	|ИТОГИ
	|	СУММА(ПоследнийРабочийГод.Количество),
	|	СУММА(КоличествоДнейОтпускаБезТекущегоГода),
	|	МАКСИМУМ(ДнейОтпуска),
	|	ВЫБОР
	|		КОГДА СУММА(ПоследнийРабочийГод.Количество) <= 0 ТОГДА 0
	|		КОГДА МАКСИМУМ(ДнейОтпуска) < СУММА(ПоследнийРабочийГод.Количество) ТОГДА МАКСИМУМ(ДнейОтпуска)
	|		ИНАЧЕ СУММА(ПоследнийРабочийГод.Количество) КОНЕЦ КАК ОтпускВСчетЕжегодного,
	|	ВЫБОР
	|		КОГДА СУММА(КоличествоДнейОтпускаБезТекущегоГода) <= 0 ТОГДА 0
	|		КОГДА МАКСИМУМ(ДнейОтпуска) < СУММА(КоличествоДнейОтпускаБезТекущегоГода) ТОГДА МАКСИМУМ(ДнейОтпуска)
	|		ИНАЧЕ СУММА(КоличествоДнейОтпускаБезТекущегоГода) КОНЕЦ КАК ОтпускВСчетЕжегодногоБезТекущегоГода,
	|	МАКСИМУМ(ДнейОтпуска)
	|		- ВЫБОР
	|			КОГДА СУММА(ПоследнийРабочийГод.Количество) <= 0 ТОГДА 0
	|			КОГДА МАКСИМУМ(ДнейОтпуска) < СУММА(ПоследнийРабочийГод.Количество) ТОГДА МАКСИМУМ(ДнейОтпуска)
	|			ИНАЧЕ СУММА(ПоследнийРабочийГод.Количество) КОНЕЦ КАК ОтпускАвансом,
	|	МАКСИМУМ(ПоследнийРабочийГод.Сотрудник),
	|	МАКСИМУМ(ДанныеФактическогоОтпуска.ДатаНачала),
	|	МАКСИМУМ(ДанныеФактическогоОтпуска.ДатаОкончания),
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаПриемаНаРаботу),
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаПолученияДанных),
	|	МИНИМУМ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода),
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода) КАК МаксимальнаяДатаНачалаРабочегоГода,
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода),
	|	МАКСИМУМ(ПоследнийРабочийГод.ВидЕжегодногоОтпуска), // имеет смысл только если для одного номера строки не указано несколько разных видов отпусков
	|	МАКСИМУМ(ПоследнийРабочийГод.НеАктуальный),
	|	МАКСИМУМ(ПоследнийРабочийГод.Ссылка),
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаОстатков)
	|ПО
	|	ПоследнийРабочийГод.НомерСтроки,
	|	ПоследнийРабочийГод.ВидЕжегодногоОтпуска";
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ПодготовитьДанныеДляСписанияРегламентированногоОтпуска()

// Процедура формирует временную таблицу, которая содержит актуальные для таблицы периодов остатки
//
// Так как функция вспомогательная, вызываться будет из процедуры, в которой во временную таблицу
// уже помещена таблица периодов. Поэтому, в функцию передается запрос с этой таблицей
//
Процедура ПодготовитьТаблицуАктуальныхОстатковОрганизаций(Запрос, ИспользоватьОстатки) Экспорт
	
	Если ИспользоватьОстатки Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиОтпусковОстатки.Ссылка,
		|	ОстаткиПериод.Сотрудник,
		|	ОстаткиПериод.НомерСтроки,
		|	ОстаткиПериод.ДатаОстатков,
		|	ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска,
		|	ОстаткиОтпусковОстатки.Количество,
		|	ОстаткиОтпусковОстатки.ДатаНачалаРабочегоГода,
		|	ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода
		|ПОМЕСТИТЬ ВТАктуальныеОстатки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОстаткиОтпусковОстатки.Сотрудник КАК Сотрудник,
		|		ОстаткиОтпусковОстатки.НомерСтроки КАК НомерСтроки,
		|		ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|		МАКСИМУМ(ОстаткиОтпусковОстатки.ДатаОстатков) КАК ДатаОстатков
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ОстаткиОтпусковОстатки.Ссылка КАК Ссылка,
		|			ОстаткиОтпусковОстатки.Ссылка.Сотрудник КАК Сотрудник,
		|			ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|			ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
		|			ОстаткиОтпусковОстатки.Ссылка.ДатаАктуальности КАК ДатаОстатков
		|		ИЗ
		|			Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОстатки
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПериодов КАК ТаблицаПериодов
		|				ПО ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода <= ТаблицаПериодов.ДатаОкончания
		|					И ОстаткиОтпусковОстатки.Ссылка.Сотрудник = ТаблицаПериодов.Сотрудник
		|					И ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска = ТаблицаПериодов.ВидЕжегодногоОтпуска) КАК ОстаткиОтпусковОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ОстаткиОтпусковОстатки.Ссылка КАК Ссылка,
		|				ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|				ТаблицаПериодов.НомерСтроки КАК НомерСтроки
		|			ИЗ
		|				Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОстатки
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПериодов КАК ТаблицаПериодов
		|					ПО ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода > ТаблицаПериодов.ДатаОкончания
		|						И ОстаткиОтпусковОстатки.Ссылка.Сотрудник = ТаблицаПериодов.Сотрудник
		|						И ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска = ТаблицаПериодов.ВидЕжегодногоОтпуска) КАК ОстаткиНеВключать
		|			ПО ОстаткиОтпусковОстатки.НомерСтроки = ОстаткиНеВключать.НомерСтроки
		|				И ОстаткиОтпусковОстатки.Ссылка = ОстаткиНеВключать.Ссылка
		|				И ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска = ОстаткиНеВключать.ВидЕжегодногоОтпуска
		|	ГДЕ
		|		ОстаткиНеВключать.Ссылка ЕСТЬ NULL 
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОстаткиОтпусковОстатки.Сотрудник,
		|		ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска,
		|		ОстаткиОтпусковОстатки.НомерСтроки) КАК ОстаткиПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОстатки
		|		ПО ОстаткиПериод.ДатаОстатков = ОстаткиОтпусковОстатки.Ссылка.ДатаАктуальности
		|			И ОстаткиПериод.Сотрудник = ОстаткиОтпусковОстатки.Ссылка.Сотрудник
		|			И ОстаткиПериод.ВидЕжегодногоОтпуска = ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОстаткиПериод.Сотрудник,
		|	ОстаткиПериод.НомерСтроки";
		Запрос.Выполнить();
		
	Иначе
		ТаблицаОстатков = Новый ТаблицаЗначений;
		ТаблицаОстатков.Колонки.Добавить("Ссылка",						Новый ОписаниеТипов("СправочникСсылка.ОстаткиОтпусковОрганизаций"));
		ТаблицаОстатков.Колонки.Добавить("Сотрудник",					Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
		ТаблицаОстатков.Колонки.Добавить("НомерСтроки",					Новый ОписаниеТипов("Число"));
		ТаблицаОстатков.Колонки.Добавить("ДатаОстатков",				Новый ОписаниеТипов("Дата"));
		ТаблицаОстатков.Колонки.Добавить("ВидЕжегодногоОтпуска",		Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
		ТаблицаОстатков.Колонки.Добавить("Количество",					Новый ОписаниеТипов("Число"));
		ТаблицаОстатков.Колонки.Добавить("ДатаНачалаРабочегоГода",		Новый ОписаниеТипов("Дата"));
		ТаблицаОстатков.Колонки.Добавить("ДатаОкончанияРабочегоГода",	Новый ОписаниеТипов("Дата"));
		
		Запрос.УстановитьПараметр("Таблица",	ТаблицаОстатков);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиОтпусков.*
		|ПОМЕСТИТЬ ВТАктуальныеОстатки
		|ИЗ
		|	&Таблица КАК ОстаткиОтпусков
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	НомерСтроки";
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОстаткиОтпусковОрганизаций() Экспорт
	
	РабДата = НачалоДня(ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("РабДата",	РабДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиСрезПоследних.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&РабДата, ) КАК РаботникиСрезПоследних
	|ГДЕ
	|	РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НомерСтроки",				Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("Сотрудник",				Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаПериодов.Колонки.Добавить("ВидЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала",				Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончания",			Новый ОписаниеТипов("Дата"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЕжегодныхОтпусков.Ссылка
	|ИЗ
	|	Справочник.ВидыЕжегодныхОтпусков КАК ВидыЕжегодныхОтпусков
	|ГДЕ
	|	(НЕ ВидыЕжегодныхОтпусков.ПометкаУдаления)";
	ВыборкаПоВидамЕжегодныхОтпусков = Запрос.Выполнить().Выбрать();
	
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		ВыборкаПоВидамЕжегодныхОтпусков.Сбросить();
		
		Пока ВыборкаПоВидамЕжегодныхОтпусков.Следующий() Цикл
			ТекущийПериод = ТаблицаПериодов.Добавить();
			ТекущийПериод.НомерСтроки			= НомерСтроки;
			ТекущийПериод.Сотрудник				= Выборка.Сотрудник;
			ТекущийПериод.ВидЕжегодногоОтпуска	= ВыборкаПоВидамЕжегодныхОтпусков.Ссылка;
			ТекущийПериод.ДатаНачала			= РабДата;
			ТекущийПериод.ДатаОкончания			= РабДата;
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Выборка = ПодготовитьДанныеПоРегламентированнымОтпускам(ТаблицаПериодов, , Истина, Ложь);
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.НеАктуальный Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ДатаОстатков >= РабДата Тогда
			ОстаткиОтпусковОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОстаткиОтпусковОбъект.Остатки.Очистить();
		Иначе
			ОстаткиОтпусковОбъект = Справочники.ОстаткиОтпусковОрганизаций.СоздатьЭлемент();
			ОстаткиОтпусковОбъект.Сотрудник			= Выборка.Сотрудник;
			ОстаткиОтпусковОбъект.ДатаАктуальности	= РабДата;
		КонецЕсли;
		
		ВыборкаПоВидамОтпусков = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоВидамОтпусков.Следующий() Цикл
			ВыборкаПоГодам = ВыборкаПоВидамОтпусков.Выбрать();
			Пока ВыборкаПоГодам.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОстаткиОтпусковОбъект.Остатки.Добавить(), ВыборкаПоГодам);
			КонецЦикла;
		КонецЦикла;
		
		ОстаткиОтпусковОбъект.Остатки.Сортировать("ВидЕжегодногоОтпуска, ДатаНачалаРабочегоГода");
		ОстаткиОтпусковОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьПериодРаботыДляОсновногоОтпуска(Ссылка, Сотрудник, ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.ВидЕжегодногоОтпуска
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни)
	|	И ОсновныеНачисленияОрганизаций.ВидЕжегодногоОтпуска <> ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВидЕжегодногоОтпуска = Выборка.ВидЕжегодногоОтпуска;
	Иначе
		Возврат Новый Структура("РабочийГодС","РабочийГодПо");
	КонецЕсли;
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НомерСтроки",				Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("Сотрудник",				Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаПериодов.Колонки.Добавить("ВидЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала",				Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончания",			Новый ОписаниеТипов("Дата"));
	
	Строка = ТаблицаПериодов.Добавить();
	Строка.НомерСтроки			= 1;
	Строка.Сотрудник			= Сотрудник;
	Строка.ВидЕжегодногоОтпуска	= ВидЕжегодногоОтпуска;
	Строка.ДатаНачала			= ДатаНачала;
	Строка.ДатаОкончания		= ДатаОкончания;
	
	ВыборкаПоОтпускам = ПодготовитьДанныеПоРегламентированнымОтпускам(ТаблицаПериодов, Ссылка);
	
	СтруктураРабочийГод = Новый Структура("РабочийГодС, РабочийГодПо");
	
	Если ВыборкаПоОтпускам.Следующий() Тогда
		СтруктураРабочийГод.РабочийГодС	= ВыборкаПоОтпускам.ДатаНачалаРабочегоГода;
		СтруктураРабочийГод.РабочийГодПо= ВыборкаПоОтпускам.ДатаОкончанияРабочегоГода;
		
		ВыборкаПоВидамОтпусков = ВыборкаПоОтпускам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаПоВидамОтпусков.Следующий() Тогда
			
			ДнейОтпуска = ВыборкаПоВидамОтпусков.ДнейОтпуска;
			
			ВыборкаПоОстаткам = ВыборкаПоВидамОтпусков.Выбрать();
			Пока ВыборкаПоОстаткам.Следующий() Цикл
				ДнейОтпуска = ДнейОтпуска - ВыборкаПоОстаткам.Количество;
				
				Если ДнейОтпуска <= 0 Тогда
					СтруктураРабочийГод.РабочийГодПо= ВыборкаПоОстаткам.ДатаОкончанияРабочегоГода;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРабочийГод;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ формирования движений кадровых документов по плановым начислениям работников организации

Функция СформироватьЗапросПоПлановымНачислениям(ДанныеОНачислениях, ПроверкаШтатногоРасписания, ДанныеПлановыхНачислений = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеОНачислениях", ДанныеОНачислениях);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.ПодразделениеОрганизации,
	|	ТЧНачисления.Должность,
	|	ТЧНачисления.ЗанимаемыхСтавок,
	|	ТЧНачисления.ГрафикРаботы,
	|	ТЧНачисления.Период,
	|	ТЧНачисления.Действие,
	|	ТЧНачисления.ПериодЗавершения,
	|	ТЧНачисления.ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ВидРасчетаИзмерение,
	|	ТЧНачисления.СпособРасчета,
	|	ТЧНачисления.ЗачетОтработанногоВремени,
	|	ТЧНачисления.ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ПроизвольнаяФормулаРасчета,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Валюта1,
	|	ТЧНачисления.ТарифныйРазряд1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Валюта2,
	|	ТЧНачисления.ТарифныйРазряд2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Валюта3,
	|	ТЧНачисления.ТарифныйРазряд3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Валюта4,
	|	ТЧНачисления.ТарифныйРазряд4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Валюта5,
	|	ТЧНачисления.ТарифныйРазряд5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Валюта6,
	|	ТЧНачисления.ТарифныйРазряд6
	|ПОМЕСТИТЬ ВТДанныеОНачислениях
	|ИЗ
	|	&ДанныеОНачислениях КАК ТЧНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();	
	
	// временная таблица с результатами проверки штатного расписания
	Если ПроверкаШтатногоРасписания Тогда
		Запрос.Текст =  ПроцедурыУправленияПерсоналомПереопределяемый.СформироватьТекстЗапросаПоПроверкеСоответствияШтатномуРасписанию();
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
		|	ИСТИНА КАК РазмерСоответствуетШТР
		|ПОМЕСТИТЬ ВТДанныеШтатногоРасписания
		|ИЗ
		|	ВТДанныеОНачислениях КАК ТЧНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
	КонецЕсли;
	Запрос.Выполнить();	
	
	// временная таблица с данными плановых начислений по состоянию до изменения
	Если ДанныеПлановыхНачислений = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТДанныеОНачислениях КАК ТЧНачисления
		|ГДЕ
		|	(ТЧНачисления.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
		|			ИЛИ ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))";
		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|	ТЧОсновныеНачисления.ВидРасчета КАК ПрежнийВидРасчета,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд1,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель1,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта1,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд2,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель2,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта2,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд3,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель3,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта3,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд4,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель4,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта4,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд5,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель5,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта5,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд6,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель6,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта6,
			|	НЕОПРЕДЕЛЕНО КАК КонфликтныйДокумент,
			|	НЕОПРЕДЕЛЕНО КАК ДатаДвижения
			|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
			|ИЗ
			|	ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
			|ГДЕ
			|	(ТЧОсновныеНачисления.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
			|			ИЛИ ТЧОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДатыНачислений.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|	КОНЕЦ КАК ПрежнийВидРасчета,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд1,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель1Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель1
			|	КОНЕЦ КАК ПрежнийПоказатель1,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта1Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта1
			|	КОНЕЦ КАК ПрежняяВалюта1,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд2Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд2
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд2,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель2Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель2
			|	КОНЕЦ КАК ПрежнийПоказатель2,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта2Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта2
			|	КОНЕЦ КАК ПрежняяВалюта2,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд3Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд3
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд3,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель3Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель3
			|	КОНЕЦ КАК ПрежнийПоказатель3,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта3Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта3
			|	КОНЕЦ КАК ПрежняяВалюта3,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд4Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд4
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд4,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель4Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель4
			|	КОНЕЦ КАК ПрежнийПоказатель4,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта4Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта4
			|	КОНЕЦ КАК ПрежняяВалюта4,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд5Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд5
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд5,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель5Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель5
			|	КОНЕЦ КАК ПрежнийПоказатель5,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта5Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта5
			|	КОНЕЦ КАК ПрежняяВалюта5,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд6Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд6
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд6,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель6Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель6
			|	КОНЕЦ КАК ПрежнийПоказатель6,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта6Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта6
			|	КОНЕЦ КАК ПрежняяВалюта6,
			|	ПлановыеНачисленияРаботниковОрганизаций.Регистратор КАК КонфликтныйДокумент,
			|	ДатыНачислений.ПериодНачислений КАК ДатаДвижения
			|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|		ТЧОсновныеНачисления.Период КАК Период,
			|		ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
			|		ВЫБОР
			|			КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|				ТОГДА НЕОПРЕДЕЛЕНО
			|			ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|		КОНЕЦ КАК ВидРасчетаИзмерение,
			|		МАКСИМУМ(ПлановыеНачисленияРаботниковОрганизаций.Период) КАК ПериодНачислений
			|	ИЗ
			|		ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|			ПО ТЧОсновныеНачисления.Период >= ПлановыеНачисленияРаботниковОрганизаций.Период
			|				И ТЧОсновныеНачисления.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
			|				И (ВЫБОР
			|					КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|						ТОГДА НЕОПРЕДЕЛЕНО
			|					ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|				КОНЕЦ = ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение)
			|	ГДЕ
			|		(ТЧОсновныеНачисления.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
			|				ИЛИ ТЧОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТЧОсновныеНачисления.НомерСтроки,
			|		ТЧОсновныеНачисления.ВидРасчета,
			|		ТЧОсновныеНачисления.Период,
			|		ТЧОсновныеНачисления.Сотрудник,
			|		ВЫБОР
			|			КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|				ТОГДА НЕОПРЕДЕЛЕНО
			|			ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|		КОНЕЦ) КАК ДатыНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ПО ДатыНачислений.ПериодНачислений = ПлановыеНачисленияРаботниковОрганизаций.Период
			|			И ДатыНачислений.ВидРасчетаИзмерение = ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение
			|			И ДатыНачислений.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		КонецЕсли;
		
	Иначе
		
		Запрос.УстановитьПараметр("ДанныеПлановыхНачислений", ДанныеПлановыхНачислений);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ТЧОсновныеНачисления.ПрежнийВидРасчета,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд1,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель1,
		|	ТЧОсновныеНачисления.ПрежняяВалюта1,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд2,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель2,
		|	ТЧОсновныеНачисления.ПрежняяВалюта2,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд3,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель3,
		|	ТЧОсновныеНачисления.ПрежняяВалюта3,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд4,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель4,
		|	ТЧОсновныеНачисления.ПрежняяВалюта4,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд5,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель5,
		|	ТЧОсновныеНачисления.ПрежняяВалюта5,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд6,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель6,
		|	ТЧОсновныеНачисления.ПрежняяВалюта6,
		|	ТЧОсновныеНачисления.КонфликтныйДокумент,
		|	ТЧОсновныеНачисления.ДатаДвижения
		|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
		|ИЗ
		|	&ДанныеПлановыхНачислений КАК ТЧОсновныеНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	Запрос.Выполнить();	
	
	// временная таблица с описанием показателей
	// в основном запросе собираем в единой выборке подготовленные ранее данные
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Предопределенный КАК Показатель1Предопределенный,
	|	Показатели1.Показатель.Наименование КАК Показатель1Наименование,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.Предопределенный КАК Показатель2Предопределенный,
	|	Показатели2.Показатель.Наименование КАК Показатель2Наименование,
	|	Показатели2.Показатель.ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.Предопределенный КАК Показатель3Предопределенный,
	|	Показатели3.Показатель.Наименование КАК Показатель3Наименование,
	|	Показатели3.Показатель.ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.Предопределенный КАК Показатель4Предопределенный,
	|	Показатели4.Показатель.Наименование КАК Показатель4Наименование,
	|	Показатели4.Показатель.ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.Предопределенный КАК Показатель5Предопределенный,
	|	Показатели5.Показатель.Наименование КАК Показатель5Наименование,
	|	Показатели5.Показатель.ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.Предопределенный КАК Показатель6Предопределенный,
	|	Показатели6.Показатель.Наименование КАК Показатель6Наименование,
	|	Показатели6.Показатель.ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.Показатель.Валюта КАК Показатель1Валюта,
	|	Показатели2.Показатель.Валюта КАК Показатель2Валюта,
	|	Показатели3.Показатель.Валюта КАК Показатель3Валюта,
	|	Показатели4.Показатель.Валюта КАК Показатель4Валюта,
	|	Показатели5.Показатель.Валюта КАК Показатель5Валюта,
	|	Показатели6.Показатель.Валюта КАК Показатель6Валюта,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.ТарифнаяСтавка КАК Показатель1ТарифнаяСтавка,
	|	Показатели2.Показатель.ТарифнаяСтавка КАК Показатель2ТарифнаяСтавка,
	|	Показатели3.Показатель.ТарифнаяСтавка КАК Показатель3ТарифнаяСтавка,
	|	Показатели4.Показатель.ТарифнаяСтавка КАК Показатель4ТарифнаяСтавка,
	|	Показатели5.Показатель.ТарифнаяСтавка КАК Показатель5ТарифнаяСтавка,
	|	Показатели6.Показатель.ТарифнаяСтавка КАК Показатель6ТарифнаяСтавка
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели2
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели3
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели4
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели5
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели6
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧОсновныеНачисления.НомерСтроки,
	|	Показатели1.Показатель,
	|	Показатели2.Показатель,
	|	Показатели3.Показатель,
	|	Показатели4.Показатель,
	|	Показатели5.Показатель,
	|	Показатели6.Показатель,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный,
	|	Показатели1.Показатель.Наименование,
	|	Показатели1.Показатель.ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения,
	|	Показатели2.Показатель.Предопределенный,
	|	Показатели2.Показатель.Наименование,
	|	Показатели2.Показатель.ТипПоказателя,
	|	Показатели2.Показатель.ВозможностьИзменения,
	|	Показатели3.Показатель.Предопределенный,
	|	Показатели3.Показатель.Наименование,
	|	Показатели3.Показатель.ТипПоказателя,
	|	Показатели3.Показатель.ВозможностьИзменения,
	|	Показатели4.Показатель.Предопределенный,
	|	Показатели4.Показатель.Наименование,
	|	Показатели4.Показатель.ТипПоказателя,
	|	Показатели4.Показатель.ВозможностьИзменения,
	|	Показатели5.Показатель.Предопределенный,
	|	Показатели5.Показатель.Наименование,
	|	Показатели5.Показатель.ТипПоказателя,
	|	Показатели5.Показатель.ВозможностьИзменения,
	|	Показатели6.Показатель.Предопределенный,
	|	Показатели6.Показатель.Наименование,
	|	Показатели6.Показатель.ТипПоказателя,
	|	Показатели6.Показатель.ВозможностьИзменения,
	|	Показатели1.Показатель.Валюта,
	|	Показатели2.Показатель.Валюта,
	|	Показатели3.Показатель.Валюта,
	|	Показатели4.Показатель.Валюта,
	|	Показатели5.Показатель.Валюта,
	|	Показатели6.Показатель.Валюта,
	|	Показатели1.Показатель.ТарифнаяСтавка,
	|	Показатели2.Показатель.ТарифнаяСтавка,
	|	Показатели3.Показатель.ТарифнаяСтавка,
	|	Показатели4.Показатель.ТарифнаяСтавка,
	|	Показатели5.Показатель.ТарифнаяСтавка,
	|	Показатели6.Показатель.ТарифнаяСтавка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|ПОМЕСТИТЬ ВТДвойныеСтроки
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеОНачислениях КАК ТЧНачисления2
	|		ПО (ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|				ИЛИ ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|					И ТЧНачисления2.ВидРасчета.ЗачетОтработанногоВремени)
	|			И ТЧНачисления.НомерСтроки < ТЧНачисления2.НомерСтроки
	|			И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|			И ТЧНачисления.Период = ТЧНачисления2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧНачисления.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Организация КАК ОрганизацияСотрудника,
	|	ТЧНачисления.Период,
	|	ТЧНачисления.ПериодЗавершения,
	|	ТЧНачисления.Действие,
	|	ТЧНачисления.ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ЗачетОтработанногоВремени,
	|	ТЧНачисления.СпособРасчета КАК СпособРасчета,
	|	ЕСТЬNULL(ТЧНачисления.ПроизвольнаяФормулаРасчета, ЛОЖЬ) КАК ПроизвольнаяФормулаРасчета,
	|	ЕСТЬNULL(ТЧНачисления.ЗачетОтработанногоВремени, ЛОЖЬ) КАК ОсновноеНачисление,
	|	ЕСТЬNULL(ТЧНачисления.ТребуетВводаТарифногоРазряда, ЛОЖЬ) КАК ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ТарифныйРазряд1,
	|	ТЧНачисления.Показатель1,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Валюта1 ЕСТЬ NULL 
	|				ИЛИ ТЧНачисления.Валюта1 = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Показатели.Показатель1Валюта
	|		ИНАЧЕ ТЧНачисления.Валюта1
	|	КОНЕЦ КАК Валюта1,
	|	ТЧНачисления.ТарифныйРазряд2,
	|	ТЧНачисления.Показатель2,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Валюта2 ЕСТЬ NULL 
	|				ИЛИ ТЧНачисления.Валюта2 = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Показатели.Показатель2Валюта
	|		ИНАЧЕ ТЧНачисления.Валюта2
	|	КОНЕЦ КАК Валюта2,
	|	ТЧНачисления.ТарифныйРазряд3,
	|	ТЧНачисления.Показатель3,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Валюта3 ЕСТЬ NULL 
	|				ИЛИ ТЧНачисления.Валюта3 = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Показатели.Показатель3Валюта
	|		ИНАЧЕ ТЧНачисления.Валюта3
	|	КОНЕЦ КАК Валюта3,
	|	ТЧНачисления.ТарифныйРазряд4,
	|	ТЧНачисления.Показатель4,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Валюта4 ЕСТЬ NULL 
	|				ИЛИ ТЧНачисления.Валюта4 = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Показатели.Показатель4Валюта
	|		ИНАЧЕ ТЧНачисления.Валюта4
	|	КОНЕЦ КАК Валюта4,
	|	ТЧНачисления.ТарифныйРазряд5,
	|	ТЧНачисления.Показатель5,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Валюта5 ЕСТЬ NULL 
	|				ИЛИ ТЧНачисления.Валюта5 = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Показатели.Показатель5Валюта
	|		ИНАЧЕ ТЧНачисления.Валюта5
	|	КОНЕЦ КАК Валюта5,
	|	ТЧНачисления.ТарифныйРазряд6,
	|	ТЧНачисления.Показатель6,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Валюта6 ЕСТЬ NULL 
	|				ИЛИ ТЧНачисления.Валюта6 = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Показатели.Показатель6Валюта
	|		ИНАЧЕ ТЧНачисления.Валюта6
	|	КОНЕЦ КАК Валюта6,
	|	ДанныеШтатногоРасписания.РазмерСоответствуетШТР,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийВидРасчета
	|	КОНЕЦ КАК ВидРасчетаЗавершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийВидРасчета.СпособРасчета
	|	КОНЕЦ КАК СпособРасчетаЗавершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд1
	|	КОНЕЦ КАК ТарифныйРазряд1Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель1
	|	КОНЕЦ КАК Показатель1Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежняяВалюта1
	|	КОНЕЦ КАК Валюта1Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд2
	|	КОНЕЦ КАК ТарифныйРазряд2Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель2
	|	КОНЕЦ КАК Показатель2Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежняяВалюта2
	|	КОНЕЦ КАК Валюта2Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд3
	|	КОНЕЦ КАК ТарифныйРазряд3Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель3
	|	КОНЕЦ КАК Показатель3Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежняяВалюта3
	|	КОНЕЦ КАК Валюта3Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд4
	|	КОНЕЦ КАК ТарифныйРазряд4Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель4
	|	КОНЕЦ КАК Показатель4Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежняяВалюта4
	|	КОНЕЦ КАК Валюта4Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд5
	|	КОНЕЦ КАК ТарифныйРазряд5Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель5
	|	КОНЕЦ КАК Показатель5Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежняяВалюта5
	|	КОНЕЦ КАК Валюта5Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд6
	|	КОНЕЦ КАК ТарифныйРазряд6Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель6
	|	КОНЕЦ КАК Показатель6Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежняяВалюта6
	|	КОНЕЦ КАК Валюта6Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийВидРасчета,
	|	ДанныеОПрежнихНачислениях.ПрежнийВидРасчета.СпособРасчета КАК ПрежнийСпособРасчета,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд1,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель1,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта1,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд2,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель2,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта2,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд3,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель3,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта3,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд4,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель4,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта4,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд5,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель5,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта5,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд6,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель6,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта6,
	|	ДанныеОПрежнихНачислениях.КонфликтныйДокумент,
	|	ДанныеОПрежнихНачислениях.ДатаДвижения,
	|	ЕСТЬNULL(Показатели.КоличествоПоказателей, 0) КАК КоличествоПоказателей,
	|	Показатели.Показатель1Предопределенный,
	|	Показатели.Показатель1Наименование,
	|	Показатели.Показатель1ТипПоказателя,
	|	Показатели.Показатель1ВозможностьИзменения,
	|	Показатели.Показатель2Предопределенный,
	|	Показатели.Показатель2Наименование,
	|	Показатели.Показатель2ТипПоказателя,
	|	Показатели.Показатель2ВозможностьИзменения,
	|	Показатели.Показатель3Предопределенный,
	|	Показатели.Показатель3Наименование,
	|	Показатели.Показатель3ТипПоказателя,
	|	Показатели.Показатель3ВозможностьИзменения,
	|	Показатели.Показатель4Предопределенный,
	|	Показатели.Показатель4Наименование,
	|	Показатели.Показатель4ТипПоказателя,
	|	Показатели.Показатель4ВозможностьИзменения,
	|	Показатели.Показатель5Предопределенный,
	|	Показатели.Показатель5Наименование,
	|	Показатели.Показатель5ТипПоказателя,
	|	Показатели.Показатель5ВозможностьИзменения,
	|	Показатели.Показатель6Предопределенный,
	|	Показатели.Показатель6Наименование,
	|	Показатели.Показатель6ТипПоказателя,
	|	Показатели.Показатель6ВозможностьИзменения,
	|	Показатели.Показатель1ТарифнаяСтавка,
	|	Показатели.Показатель2ТарифнаяСтавка,
	|	Показатели.Показатель3ТарифнаяСтавка,
	|	Показатели.Показатель4ТарифнаяСтавка,
	|	Показатели.Показатель5ТарифнаяСтавка,
	|	Показатели.Показатель6ТарифнаяСтавка,
	|	Показатели.Показатель1ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель2ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель3ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель4ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель5ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель6ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	ДвойныеСтроки.КонфликтнаяСтрокаНомер КАК ДвойнаяСтрока
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеШтатногоРасписания КАК ДанныеШтатногоРасписания
	|		ПО ТЧНачисления.НомерСтроки = ДанныеШтатногоРасписания.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПрежнихНачислениях КАК ДанныеОПрежнихНачислениях
	|		ПО ТЧНачисления.НомерСтроки = ДанныеОПрежнихНачислениях.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
	|		ПО ТЧНачисления.НомерСтроки = Показатели.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвойныеСтроки КАК ДвойныеСтроки
	|		ПО ТЧНачисления.НомерСтроки = ДвойныеСтроки.НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНачисления()

Процедура СформироватьДвижениеПоПлановымНачислениям(Движение, ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса) Экспорт

	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Если НЕ ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
		Движение.ВидРасчетаИзмерение	= ВыборкаСтрокЗапроса.ВидРасчета;
	КонецЕсли;
	Движение.ПервичныйДокумент			= ВыборкаПоШапкеДокумента.Ссылка;
	
	СтрокаПолей = "Период,Сотрудник,Действие,ВидРасчета,ПериодЗавершения,ДействиеЗавершения,ВидРасчетаЗавершения";
	
	Если ВыборкаСтрокЗапроса.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
	
		Для Сч = 1 По 6 Цикл
			Если ВыборкаСтрокЗапроса.ПроизвольнаяФормулаРасчета Тогда
				Если Сч <= ВыборкаСтрокЗапроса.КоличествоПоказателей Тогда
					Если ВыборкаСтрокЗапроса["Показатель" + Сч + "ЗапрашиватьПриКадровыхПеремещениях"]
						Или ВыборкаСтрокЗапроса.ОсновноеНачисление И ВыборкаСтрокЗапроса["Показатель" + Сч + "ТарифнаяСтавка"] Тогда
						СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + ",Валюта"+ Сч + ",ТарифныйРазряд"+ Сч;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + ",Валюта"+ Сч;
				Если ВыборкаСтрокЗапроса.ТребуетВводаТарифногоРазряда Тогда
					СтрокаПолей = СтрокаПолей + ",ТарифныйРазряд"+ Сч;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Движения на дату завершения
	Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ПериодЗавершения) И ВыборкаСтрокЗапроса.ДействиеЗавершения <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		
		Для Сч = 1 По 6 Цикл
			Если ВыборкаСтрокЗапроса.ПроизвольнаяФормулаРасчета Тогда
				Если Сч <= ВыборкаСтрокЗапроса.КоличествоПоказателей Тогда
					Если ВыборкаСтрокЗапроса["Показатель" + Сч + "ЗапрашиватьПриКадровыхПеремещениях"]
						Или ВыборкаСтрокЗапроса.ОсновноеНачисление И ВыборкаСтрокЗапроса["Показатель" + Сч + "ТарифнаяСтавка"] Тогда
						СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + "Завершения,Валюта"+ Сч + "Завершения,ТарифныйРазряд"+ Сч + "Завершения";
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + "Завершения,Валюта"+ Сч + "Завершения,ТарифныйРазряд"+ Сч + "Завершения";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаСтрокЗапроса, СтрокаПолей);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ОБМЕНА ДАННЫМИ С БАНКАМИ ПО ЛИЦЕВЫМ СЧЕТАМ СОТРУДНИКОВ

// Функция получает массив операций по счетам сотрудника из дерева XML
Функция ПолучитьОперацииПоЛицевымСчетамРаботников(ДеревоОбработки, ИмяЭлементаИмпорта) Экспорт
	
	МассивОпераций = Новый Массив;
	
	Для каждого Ветка из ДеревоОбработки.Строки Цикл
		Если Ветка.Имя = ИмяЭлементаИмпорта Тогда
			Для каждого СтрокаВетки из Ветка.Строки Цикл
				Если ИмяЭлементаИмпорта = "РезультатОткрытияСчетов" ИЛИ ИмяЭлементаИмпорта = "РезультатЗачисленияЗарплаты" Тогда
					Если ИмяЭлементаИмпорта = "РезультатОткрытияСчетов" Тогда
						
						ШаблонОперации = Новый Структура;
						ШаблонОперации.Вставить("Сотрудник", Неопределено);
						ШаблонОперации.Вставить("ЛицевойСчет", Неопределено);
						ШаблонОперации.Вставить("Результат", Неопределено);
						
					Иначе
						
						ШаблонОперации = Новый Структура;
						ШаблонОперации.Вставить("Сотрудник", Неопределено);
						ШаблонОперации.Вставить("ЛицевойСчет", Неопределено);
						ШаблонОперации.Вставить("Сумма", Неопределено);
						ШаблонОперации.Вставить("Результат", Неопределено);
					КонецЕсли;	
					Если ШаблонОперации.Свойство(СтрокаВетки.Имя) Тогда
						ШаблонОперации[СтрокаВетки.Имя] = ПолучитьЗначениеИзДерева(СтрокаВетки, ШаблонОперации);
					КонецЕсли;
					
					Для каждого ЭлементШаблона Из ШаблонОперации Цикл
						Если ЭлементШаблона.Значение = Неопределено Тогда
							СообщитьОбОшибкеОбработки("Анализ операции", "Некорректная структура элемента " + ИмяЭлементаИмпорта + "!");
							Продолжить;
						КонецЕсли;
					КонецЦикла;
					МассивОпераций.Добавить(ШаблонОперации);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОпераций;
	
КонецФункции

Функция ПолучитьЗначениеИзДерева(ВеткаЗначения, ШаблонОперации)Экспорт

	СтадияОбработки = "Анализ данных операции";
	
	ИмяЗначения = ВеткаЗначения.Имя;
	
	Если ИмяЗначения = "Сотрудник" Тогда
		СтруктураСотрудника = Новый Структура;
		СтруктураСотрудника.Вставить("Фамилия", Неопределено);
		СтруктураСотрудника.Вставить("Имя", Неопределено);
		СтруктураСотрудника.Вставить("Отчество", Неопределено);

		Для каждого Лист из ВеткаЗначения.Строки Цикл
			
			Если СтруктураСотрудника.Свойство(Лист.Имя) Тогда
				СтруктураСотрудника[Лист.Имя] = Лист.Значение;
			ИначеЕсли ШаблонОперации.Свойство(Лист.Имя) Тогда
				ШаблонОперации[Лист.Имя] = ПолучитьЗначениеИзДерева(Лист, ШаблонОперации);	
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ЭлементСотрудника Из СтруктураСотрудника Цикл
			Если ЭлементСотрудника.Значение = Неопределено Тогда
				СообщитьОбОшибкеОбработки(СтадияОбработки, "Некорректные данные о сотруднике " + СтруктураСотрудника.Фамилия + СтруктураСотрудника.Имя + СтруктураСотрудника.Отчество + "!");
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		ЗапросФИО = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                         |	ФИОФизЛицСрезПоследних.Фамилия,
		                         |	ФИОФизЛицСрезПоследних.Имя,
		                         |	ФИОФизЛицСрезПоследних.Отчество,
		                         |	ФИОФизЛицСрезПоследних.ФизЛицо
		                         |ИЗ
		                         |	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
		                         |ГДЕ
		                         |	ФИОФизЛицСрезПоследних.Фамилия = &Фамилия
		                         |	И ФИОФизЛицСрезПоследних.Имя = &Имя
		                         |	И ФИОФизЛицСрезПоследних.Отчество = &Отчество");
		
		ЗапросФИО.УстановитьПараметр("Фамилия", СтруктураСотрудника.Фамилия);
		ЗапросФИО.УстановитьПараметр("Имя", СтруктураСотрудника.Имя);
		ЗапросФИО.УстановитьПараметр("Отчество", СтруктураСотрудника.Отчество);
		Выборка = ЗапросФИО.Выполнить().Выбрать();
	
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ФизЛицо;
			
		Иначе
			Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ИмяЗначения = "ЛицевойСчет" Тогда
		Возврат ВеткаЗначения.Значение;
		
	ИначеЕсли ИмяЗначения = "УдостоверениеЛичности" Тогда
		Возврат ВеткаЗначения.Значение;
		
	ИначеЕсли ИмяЗначения = "ДействительноДо" Тогда
		Попытка
			Значение = Дата(ВеткаЗначения.Значение);
		Исключение
			Значение = Дата('00010101');
		КонецПопытки;
		
		Возврат Значение;
		
	ИначеЕсли ИмяЗначения = "Сумма" Тогда
		Попытка
			Значение = Число(ВеткаЗначения.Значение);
		Исключение
			Значение = 0;
			СообщитьОбОшибкеОбработки(СтадияОбработки, "Некорректно указана сумма " + ВеткаЗначения.Значение + " !");
		КонецПопытки;
		
		Возврат Значение;
		
	ИначеЕсли ИмяЗначения = "ВидВклада" Тогда
		Возврат ВеткаЗначения.Значение;
		
	ИначеЕсли ИмяЗначения = "Результат" Тогда
		
		Значение = ВРег(СокрЛП(ВеткаЗначения.Значение));
		Если Значение = ВРег("СчетОткрыт") Тогда
			Возврат "Счет открыт";
			
		ИначеЕсли Значение = ВРег("ОшибкаЗаполненияДанных") Тогда
			Возврат "Ошибка заполнения данных";
			
		ИначеЕсли Значение = ВРег("СчетНеОткрыт") Тогда
			Возврат "Счет не открыт";
			
		ИначеЕсли Значение = ВРег("Зачислено") Тогда
			Возврат "Зачислено";
			
		ИначеЕсли Значение = ВРег("ОшибкаФИО") Тогда
			Возврат "Ошибка в ФИО";
			
		ИначеЕсли Значение = ВРег("СчетЗакрыт") Тогда
			Возврат "Счет закрыт";
			
		ИначеЕсли Значение = ВРег("СчетОтсутствует") Тогда
			Возврат "Счет отсутствует";
			
		ИначеЕсли Значение = ВРег("НеЗачислено") Тогда
			Возврат "Не зачислено";
			
		КонецЕсли;
		
		Возврат "";
		
	КонецЕсли;
	
	СообщитьОбОшибкеОбработки(СтадияОбработки, "Неверное значение " + ИмяЗначения + "в структуре элемента!");

КонецФункции

Процедура СообщитьОбОшибкеОбработки(СтадияОбработки, ТекстОшибки)Экспорт
	
	Сообщить(СтадияОбработки + ":  " + ТекстОшибки);
	
КонецПроцедуры
