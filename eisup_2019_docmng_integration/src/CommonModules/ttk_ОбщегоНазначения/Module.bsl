
Процедура ПодключитьВнешниеИсточникиДанных() Экспорт
	
	СостояниеПодключения = ВнешниеИсточникиДанных.TransPlatformIntegration.ПолучитьСостояние();
	Если СостояниеПодключения = СостояниеВнешнегоИсточникаДанных.Подключен Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	 
	ПараметрыПодключения = ВнешниеИсточникиДанных.TransPlatformIntegration.ПолучитьОбщиеПараметрыСоединения();
	ПараметрыПодключения.АутентификацияОС = Неопределено;
	ПараметрыПодключения.АутентификацияСтандартная = Истина;
	ПараметрыПодключения.ИмяПользователя = "abs_dbo";
	ПараметрыПодключения.Пароль = "yHGHivs";
	ПараметрыПодключения.СУБД = "MSSQLServer";
	ПараметрыПодключения.СтрокаСоединения = "DRIVER={SQL Server};SERVER=kttk-1c-db.transtk.ru;UID=abs_dbo;PWD=yHGHivs;DATABASE=TransPlatformIntegration";
	 
	ВнешниеИсточникиДанных.TransPlatformIntegration.УстановитьОбщиеПараметрыСоединения(ПараметрыПодключения);
	ВнешниеИсточникиДанных.TransPlatformIntegration.УстановитьСоединение();
	 
	УстановитьПривилегированныйРежим(Ложь);
 
КонецПроцедуры

Функция ВыполнитьПодключениеКSQLНаКлиенте(Параметры) Экспорт
	
	Попытка
		СтрокаСоединения = "DRIVER={SQL Server};SERVER=" + СокрЛП(Параметры.Provider) +
			";UID=" + СокрЛП(Параметры.UserID) +
			";PWD=" + СокрЛП(Параметры.Password) +
			";DATABASE=" + СокрЛП(Параметры.DataSource) + ";";
		Соединение = Новый COMОбъект("ADODB.Connection");
		Соединение.Open(СокрЛП(СтрокаСоединения));
	Исключение
		Сообщить(ОписаниеОшибки());
		Соединение = 0;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Процедура СохранитьРезультатВоВнешниеДанные(Параметры, НеУдалятьЗапрещенныеСимволыИзСтроки = Ложь) Экспорт

	Сценарий = Параметры.Script;
	Сценарий = СтрЗаменить(Сценарий, "%ИмяБазыTPI%", Параметры.DataSource);
	Сценарий = СтрЗаменить(Сценарий, "%ИмяТаблицыTPI%", Параметры.TableName);
	Сценарий = СтрЗаменить(Сценарий, "%КодОтчета%", Параметры.RepCode);
	
	Соединение = ВыполнитьПодключениеКSQLНаКлиенте(Параметры);
	Если Соединение = 0 Тогда
		Возврат;
	КонецЕсли;
	Команда = Новый COMОбъект("ADODB.Command");	
	Команда.ActiveConnection = Соединение;
	Команда.CommandText = Сценарий;
	Попытка
		RS = Команда.Execute();
	Исключение
		Сообщить("Запрос не выполнен: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;	
	
	н = 1;
	м = 1;
	ФайлДанных = Новый ТекстовыйДокумент;	
	Для Каждого Стр Из Параметры.Таблица Цикл
		ИменаКолонок = "";
		ЗначенияКолонок = "";
		Для Каждого Колонка Из Параметры.Таблица.Колонки Цикл
			ИменаКолонок = ИменаКолонок + Колонка.Имя + ",";
			Если ТипЗнч(Стр[Колонка.Имя]) = Тип("Число") Тогда
				Значение = ?(ЗначениеЗаполнено(Стр[Колонка.Имя]), Формат(Стр[Колонка.Имя], "ЧДЦ=2; ЧРД=.; ЧГ=0"), 0);
			ИначеЕсли ТипЗнч(Стр[Колонка.Имя]) = Тип("Дата") Тогда
				Значение = ?(ЗначениеЗаполнено(Стр[Колонка.Имя]), "'" + Формат(Стр[Колонка.Имя], "ДФ='yyyyMMdd Ч:мм:сс'") + "'", "NULL");
			ИначеЕсли ТипЗнч(Стр[Колонка.Имя]) = Тип("Строка") Тогда
				
				Если НеУдалятьЗапрещенныеСимволыИзСтроки Тогда 
					Значение = ?(ЗначениеЗаполнено(Стр[Колонка.Имя]), "'" + СокрЛП(СтрЗаменить(Стр[Колонка.Имя], "'", "")) + "'", "NULL");
				Иначе
					Значение = ?(ЗначениеЗаполнено(Стр[Колонка.Имя]), "'" + СокрЛП(РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(СтрЗаменить(Стр[Колонка.Имя], "'", ""))) + "'", "NULL");
				КонецЕсли;

			Иначе
				
				Если НеУдалятьЗапрещенныеСимволыИзСтроки Тогда 
					Значение = ?(ЗначениеЗаполнено(Стр[Колонка.Имя]), "'" + Строка(СокрЛП(СтрЗаменить(Стр[Колонка.Имя], "'", ""))) + "'", "NULL");
				Иначе
				    Значение = ?(ЗначениеЗаполнено(Стр[Колонка.Имя]), "'" + Строка(СокрЛП(РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(СтрЗаменить(Стр[Колонка.Имя], "'", "")))) + "'", "NULL");
				КонецЕсли;

			КонецЕсли;
			ЗначенияКолонок = ЗначенияКолонок + Значение + ",";
		КонецЦикла;
		ИменаКолонок = Лев(ИменаКолонок, СтрДлина(ИменаКолонок) - 1);
		ЗначенияКолонок = Лев(ЗначенияКолонок, СтрДлина(ЗначенияКолонок) - 1);
		
		#Если Клиент Тогда
			Состояние("Подготовка данных для записи во внешний источник данных, обработано строк: " + Строка(м) + " из " + Строка(Параметры.Таблица.Количество()));
		#КонецЕсли
		
		ФайлДанных.ДобавитьСтроку("INSERT INTO [" + Параметры.DataSource + "].[dbo].[" + Параметры.TableName + "](" + ИменаКолонок + ")");
		ФайлДанных.ДобавитьСтроку("VALUES(" + ЗначенияКолонок + ");");			
		
		Если н >= Параметры.Rate Или м = Параметры.Таблица.Количество() Тогда
		
			Команда.CommandText = ФайлДанных.ПолучитьТекст();
			
			#Если Клиент Тогда
				Состояние("Запись данных во внешний источник данных...");
			#КонецЕсли
			
			Попытка
				RS = Команда.Execute();
			Исключение
				Сообщить("Запрос не выполнен: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
				Возврат;
			КонецПопытки;	
			
			ФайлДанных.Очистить();
			н = 1;
		Иначе 
			н = н + 1;
		КонецЕсли;
		м = м + 1;
	КонецЦикла;

	Соединение.Close();
	
КонецПроцедуры

// Функция для получения списка подписчиков по организации и виду подписки.
//
// Возвращаемое значение:
//	СписокПодписчиков - список значений, список подписчиков.
//
Функция ПолучитьСписокПодписчиков(Подписка, Организация = Неопределено) Экспорт
	
	СписокПодписчиков = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ttk_ПользовательскиеПодпискиНаСобытия.Пользователь КАК Подписчик
		|ИЗ
		|	РегистрСведений.ttk_ПользовательскиеПодпискиНаСобытия КАК ttk_ПользовательскиеПодпискиНаСобытия
		|ГДЕ
		|	ttk_ПользовательскиеПодпискиНаСобытия.ВидПодписки = &ВидПодписки";
	Если Организация <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ttk_ПользовательскиеПодпискиНаСобытия.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ВидПодписки", Подписка);
	
	Выборка = Запрос.Выполнить();
	Если Выборка.Пустой() Тогда		
		Возврат СписокПодписчиков;
	КонецЕсли;
	
	Результат = Выборка.Выбрать();
	Пока Результат.Следующий() Цикл
		СписокПодписчиков.Добавить(Результат.Подписчик);
	КонецЦикла;
	
	Возврат СписокПодписчиков;
	
КонецФункции

// Процедура отправки ответственным лицам уведомлений на электронную почту. Дополнительно отправка
// осуществляется сотрудникам подписанным на определенный вид рассылки.
//
// Параметры:
//  СсылкаНаДокумент - ссылка, в рамках которой производиться операция рассылки;
//  Организация 	 - организация, для которой будет производиться поиск подписчиков на рассылку;
//  Параметры		 - структура, все необходимые параметры для выполнения процедуры:
//    УчетнаяЗапись  - ссылка на справочник учетных записей электронной почты;
//	  Подписка		 - ссылка на спрвочник видов пользовательских подписок, если "Неопределено", то
//					   рассылка дополнительным подписчикам не осуществляется;
//	  ТемаСообщения  - строка для формирования темы сообщения электронного письма;
//	  ТекстСообщения - строка для формирования текста сообщения электронного письма;
//	  Важность		 - важность сообщения (Высокая, Низкая, Обычная), если "Неопределено", то
//					   принимает значение "Обычная";
//	  Ответственный  - ссылка на справочник пользователей;
//	  ВестиЛогОтправки - признак записи истории уведомлений об отправке;
//	  Вложения - массив, список вложений которые необходимо добавить при отправке уведомления,
//				 значения элементов массива должны быть типа строка и содержать полный путь к файлу.				 
//
Процедура ОтправитьУведомленияПользователямНаЭлАдрес(СсылкаНаДокумент, Организация, Параметры) Экспорт
	
	Если ТипЗнч(Параметры.Ответственный) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.абс_АВИЗО") Тогда
		ТипУведомления = "АВИЗО";
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ТипУведомления = "ПТУ";
	Иначе
		ТипУведомления = "Общее";
	КонецЕсли;
	
	Если Параметры.Свойство("ВестиЛогОтправки") Тогда
		ВестиЛогОтправки = Параметры.ВестиЛогОтправки;
	Иначе 
		ВестиЛогОтправки = Ложь;
	КонецЕсли;

	Если ВестиЛогОтправки Тогда
		ТаблицаУведомлений = Новый ТаблицаЗначений;
		ТаблицаУведомлений.Колонки.Добавить("Период");
		ТаблицаУведомлений.Колонки.Добавить("ДокументСсылка");
		ТаблицаУведомлений.Колонки.Добавить("УведомлениеОтправлено");
		ТаблицаУведомлений.Колонки.Добавить("Ответственный");
		ТаблицаУведомлений.Колонки.Добавить("ОтправкаИнициатору");
		ТаблицаУведомлений.Колонки.Добавить("ОтправкаОтветственным");
		ТаблицаУведомлений.Колонки.Добавить("ПериодРегистрацииУведомления");
		ТаблицаУведомлений.Колонки.Добавить("ПричинаИзмененияСтатуса");
	КонецЕсли;
		
	Профиль = Новый ИнтернетПочтовыйПрофиль();
	Профиль.АдресСервераSMTP = Параметры.УчетнаяЗапись.SMTPСервер;
	Профиль.ПортSMTP = Параметры.УчетнаяЗапись.ПортSMTP;
	Профиль.ПользовательSMTP = Параметры.УчетнаяЗапись.ЛогинSMTP;
	Профиль.ПарольSMTP = Параметры.УчетнаяЗапись.ПарольSMTP;
	Профиль.ВремяОжидания = Параметры.УчетнаяЗапись.ВремяОжиданияСервера;
	
	Почта = Новый ИнтернетПочта();
	Почта.Подключиться(Профиль);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель = Параметры.УчетнаяЗапись.АдресЭлектроннойПочты;
	Письмо.Отправитель.ОтображаемоеИмя = Параметры.УчетнаяЗапись.Наименование;
	
	СписокЭлАдресовИнициатора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрочитатьКонтактнуюИнформацию(Параметры.Ответственный.ФизЛицо,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailФизЛица), ";");
	Для Каждого ЭлАдресИнициатора Из СписокЭлАдресовИнициатора Цикл
		Письмо.Получатели.Добавить(ЭлАдресИнициатора);
		//
		Если ВестиЛогОтправки Тогда
			НоваяСтрока = ТаблицаУведомлений.Добавить();
			НоваяСтрока.Период = ТекущаяДатаСеанса();
			НоваяСтрока.ДокументСсылка = СсылкаНаДокумент;
			НоваяСтрока.УведомлениеОтправлено = Истина;
			НоваяСтрока.Ответственный = Параметры.Ответственный;
			НоваяСтрока.ОтправкаИнициатору = Истина;
			НоваяСтрока.ОтправкаОтветственным = Ложь;
			НоваяСтрока.ПериодРегистрацииУведомления = ТекущаяДатаСеанса();
			НоваяСтрока.ПричинаИзмененияСтатуса = "Уведомление отправлено сотруднику " + Строка(Параметры.Ответственный) +
				" на адрес электронной почты " + СокрЛП(ЭлАдресИнициатора) + " (" + ТипУведомления + ")";
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.Подписка <> Неопределено Тогда
		Подписчики = ПолучитьСписокПодписчиков(Параметры.Подписка, Организация);
		Если Подписчики.Количество() > 0 Тогда
			Сек = 1;
			Для Каждого Подписчик Из Подписчики Цикл
				Если ТипЗнч(Подписчик.Значение) = Тип("Строка") Тогда
					СписокЭлАдресовПодписчиков = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Подписчик.Значение, ";");
				Иначе	
					СписокЭлАдресовПодписчиков = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрочитатьКонтактнуюИнформацию(Подписчик.Значение.ФизЛицо,
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailФизЛица), ";");
				КонецЕсли;
					
				//Бобылев А.А. СППР 00-00000168
				//добавим на каждую строку +1 секунду
				Период = ТекущаяДатаСеанса();
				Для Каждого ЭлАдресПодписчика Из СписокЭлАдресовПодписчиков Цикл
					Письмо.Копии.Добавить(СокрЛП(ЭлАдресПодписчика));
					//
					Если ВестиЛогОтправки Тогда
						НоваяСтрока = ТаблицаУведомлений.Добавить();
						НоваяСтрока.Период = Период + Сек;
						//НоваяСтрока.Период = ТекущаяДатаСеанса() + 1;
						//Бобылев А.А---------------------------------------------
						НоваяСтрока.ДокументСсылка = СсылкаНаДокумент;
						НоваяСтрока.УведомлениеОтправлено = Истина;
						НоваяСтрока.Ответственный = Подписчик.Значение;
						НоваяСтрока.ОтправкаИнициатору = Ложь;
						НоваяСтрока.ОтправкаОтветственным = Истина;
						НоваяСтрока.ПериодРегистрацииУведомления = ТекущаяДатаСеанса();
						НоваяСтрока.ПричинаИзмененияСтатуса = "Уведомление отправлено сотруднику " + Строка(Подписчик.Значение) +
						" на адрес электронной почты " + СокрЛП(ЭлАдресПодписчика) + " (" + ТипУведомления + ")";
						Сек = Сек +1;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Письмо.Тема = Параметры.ТемаСообщения;
	Письмо.Важность = ?(Параметры.Важность = Неопределено, ВажностьИнтернетПочтовогоСообщения.Обычная, Параметры.Важность);
	Письмо.Тексты.Добавить(Параметры.ТекстСообщения);
	
	Если Параметры.Свойство("Вложения") Тогда
		Если ТипЗнч(Параметры.Вложения) = Тип("Массив") Тогда
			Письмо.Вложения.Очистить();
			Для Каждого Элемент Из Параметры.Вложения Цикл				
				Если ТипЗнч(Элемент) = Тип("Строка") Тогда
					ТекущийФайл = Новый Файл(Элемент);
					Если ТекущийФайл.Существует() Тогда
						Письмо.Вложения.Добавить(Элемент, ТекущийФайл.ИмяБезРасширения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Почта.Послать(Письмо);	 
		РезультатОтправки = Истина;
	Исключение
		РезультатОтправки = Ложь;
	КонецПопытки;
	
	Если РезультатОтправки И ВестиЛогОтправки Тогда
		НаборУведомлений = РегистрыСведений.абс_ОтправкаУведомленийБП.СоздатьНаборЗаписей();
		НаборУведомлений.Загрузить(ТаблицаУведомлений);
		НаборУведомлений.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьКонтактнуюИнформацию(Объект, Тип, Вид) Экспорт
	
	АдресЭлПочты = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление КАК Значение,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип", Тип);
	Запрос.УстановитьПараметр("Вид", Вид);
	
	Выборка = Запрос.Выполнить();
	Если Выборка.Пустой() Тогда
		Возврат АдресЭлПочты;
	КонецЕсли;
	
	Результат = Выборка.Выбрать();
	Пока Результат.Следующий() Цикл
		АдресЭлПочты = Результат.Значение;
	КонецЦикла;
	
	Возврат АдресЭлПочты;
	
КонецФункции

Функция ОпределитьИспользованиеСтатьиОборотовДляПериода(Дт, Статья)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Ссылка,
		|	СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Ссылка.Код,
		|	СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Период,
		|	СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Использование
		|ИЗ
		|	Справочник.СтатьиОборотовПоБюджетам.абс_ПериодыИспользования КАК СтатьиОборотовПоБюджетамабс_ПериодыИспользования
		|ГДЕ
		|	&Дт МЕЖДУ НАЧАЛОПЕРИОДА(СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Период, ГОД) И КОНЕЦПЕРИОДА(СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Период, ГОД)
		|	И СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Дт", Дт);
	Запрос.УстановитьПараметр("Ссылка", Статья);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.Количество();
	
КонецФункции

// Функция возвращает действующую аналитику (номенклатурную группу и статью оборотов) для документов
// реализации по организации, номенклатуре и типу контрагенту.
Функция ОпределитьДействующуюАналитикуПоДокументамРеализации(Дт, Организация, Номенклатура, ТипКонтрагента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	kwr_СоответствиеАналитикБУиУУСрезПоследних.СтатьиОборотовПоБюджетам КАК СтатьяОборотов
		|ИЗ
		|	РегистрСведений.абс_СоответствиеНоменклатурыБюджетнымАналитикам КАК абс_СоответствиеНоменклатурыБюджетнымАналитикам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.kwr_СоответствиеАналитикБУиУУ.СрезПоследних(&Дт, ) КАК kwr_СоответствиеАналитикБУиУУСрезПоследних
		|		ПО абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа = kwr_СоответствиеАналитикБУиУУСрезПоследних.СубконтоХозр1
		|ГДЕ
		|	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Организация = &Организация
		|	И абс_СоответствиеНоменклатурыБюджетнымАналитикам.Номенклатура = &Номенклатура";
	Если ТипКонтрагента = Справочники.абс_ТипыКонтрагентов.ФизическиеЛица Тогда
		Запрос.Текст = Запрос.Текст + " И абс_СоответствиеНоменклатурыБюджетнымАналитикам.абс_ТипКонтрагента = ЗНАЧЕНИЕ(Справочник.абс_ТипыКонтрагентов.ФизическиеЛица)";
	Иначе
		Запрос.Текст = Запрос.Текст + " И абс_СоответствиеНоменклатурыБюджетнымАналитикам.абс_ТипКонтрагента <> ЗНАЧЕНИЕ(Справочник.абс_ТипыКонтрагентов.ФизическиеЛица)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст +
		" СГРУППИРОВАТЬ ПО kwr_СоответствиеАналитикБУиУУСрезПоследних.СтатьиОборотовПоБюджетам, абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа";
	Запрос.УстановитьПараметр("Дт", Дт);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	НоменклатурнаяГруппа = Неопределено;
	СтатьяОборотов = Неопределено;
	
	СтруктураВозврата = Новый Структура;
	
	Пока Результат.Следующий() Цикл
		СтруктураВозврата.Вставить("НоменклатурнаяГруппа", Результат.НоменклатурнаяГруппа);
		СтруктураВозврата.Вставить("СтатьяОборотов", Результат.СтатьяОборотов);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция возвращает действующую аналитику (номенклатурную группу и статью оборотов) для документов
// поступления по организации, номенклатуре и типу контрагенту.
Функция ОпределитьДействующуюАналитикуПоДокументамПоступления(Дт, Организация, Объект, ТипКонтрагента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ttk_СоответствиеНеИспользуемыхОбъектовКИспользуемым.ИспользуемыйОбъект КАК ИспользуемыйОбъект
		|ИЗ
		|	РегистрСведений.ttk_СоответствиеНеИспользуемыхОбъектовКИспользуемым КАК ttk_СоответствиеНеИспользуемыхОбъектовКИспользуемым
		|ГДЕ
		|	ttk_СоответствиеНеИспользуемыхОбъектовКИспользуемым.НеИспользуемыйОбъект = &НеИспользуемыйОбъект";
	Если ТипКонтрагента = Справочники.абс_ТипыКонтрагентов.ФизическиеЛица Тогда
		Запрос.Текст = Запрос.Текст + " И ttk_СоответствиеНеИспользуемыхОбъектовКИспользуемым.ТипКонтрагента = ЗНАЧЕНИЕ(Справочник.абс_ТипыКонтрагентов.ФизическиеЛица)";
	Иначе
		Запрос.Текст = Запрос.Текст + " И ttk_СоответствиеНеИспользуемыхОбъектовКИспользуемым.ТипКонтрагента <> ЗНАЧЕНИЕ(Справочник.абс_ТипыКонтрагентов.ФизическиеЛица)";		
	КонецЕсли;	
	Запрос.Текст = Запрос.Текст +
		" СГРУППИРОВАТЬ ПО
		|	ttk_СоответствиеНеИспользуемыхОбъектовКИспользуемым.ИспользуемыйОбъект";
	Запрос.УстановитьПараметр("НеИспользуемыйОбъект", Объект);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура;
	
	Пока Результат.Следующий() Цикл
		СтруктураВозврата.Вставить("ИспользуемыйОбъект", Результат.ИспользуемыйОбъект);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ttk_ЗаменаНеИспользуемыхАналитикВДокументах(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Константы.ttk_ИспользоватьАвтоЗаменуАналитикВДокументах.Получить() Тогда
		#Область ДокументыРеализации
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Или ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
			//
			Для Каждого Товар Из Источник.Товары Цикл
				Если ((ЗначениеЗаполнено(Товар.СубконтоБУ) И ТипЗнч(Товар.СубконтоБУ) = Тип("СправочникСсылка.НоменклатурныеГруппы")) Или (ЗначениеЗаполнено(Товар.СубконтоНУ) И ТипЗнч(Товар.СубконтоНУ) = Тип("СправочникСсылка.НоменклатурныеГруппы"))) Тогда
					Если Товар.СубконтоБУ.абс_СтатусНоменклатурнойГруппы = Перечисления.абс_СтатусыНоменклатуры.Архив Или Товар.СубконтоНУ.абс_СтатусНоменклатурнойГруппы = Перечисления.абс_СтатусыНоменклатуры.Архив Тогда
						ДействующаяАналитика = ОпределитьДействующуюАналитикуПоДокументамРеализации(Источник.Дата, Источник.Организация, Товар.Номенклатура, Источник.Контрагент.абс_ТипыКонтрагентов);
						Если ДействующаяАналитика.Количество() > 0 Тогда
							Товар.СубконтоБУ = ДействующаяАналитика.НоменклатурнаяГруппа;
							Товар.СубконтоНУ = ДействующаяАналитика.НоменклатурнаяГруппа;
							Товар.СтатьяОборотов = ДействующаяАналитика.СтатьяОборотов;						
							#Если НаКлиенте Тогда
								Сообщить("В строке " + Строка(Товар.НомерСтроки) + " для номенклатуры '" + Строка(Товар.Номенклатура) + "' не используемая аналитика " +
									"заменена на '" + Строка(ДействующаяАналитика.НоменклатурнаяГруппа) + "'.");
							#КонецЕсли
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(Товар.СтатьяОборотов) Тогда
					БС = ОпределитьИспользованиеСтатьиОборотовДляПериода(Источник.Дата, Товар.СтатьяОборотов);
					Если БС = 0 Тогда
						ДействующаяАналитика = ОпределитьДействующуюАналитикуПоДокументамРеализации(Источник.Дата, Источник.Организация, Товар.Номенклатура, Источник.Контрагент.абс_ТипыКонтрагентов);
						Если ДействующаяАналитика.Количество() > 0 Тогда
							Товар.СтатьяОборотов = ДействующаяАналитика.СтатьяОборотов;
							#Если НаКлиенте Тогда
								Сообщить("В строке " + Строка(Товар.НомерСтроки) + " для номенклатуры '" + Строка(Товар.Номенклатура) + "' не используемая аналитика " +
									"заменена на '" + Строка(ДействующаяАналитика.СтатьяОборотов) + "'.");
							#КонецЕсли
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;			
			КонецЦикла;
			//
			Для Каждого Услуга Из Источник.Услуги Цикл
				//Бобылев А.А. 03.10.2018  627
				//Изменены условия (было "или") и добавлены ИначеЕсли
				Если ((ЗначениеЗаполнено(Услуга.СубконтоБУ) И ТипЗнч(Услуга.СубконтоБУ) = Тип("СправочникСсылка.НоменклатурныеГруппы")) И (ЗначениеЗаполнено(Услуга.СубконтоНУ) И ТипЗнч(Услуга.СубконтоНУ) = Тип("СправочникСсылка.НоменклатурныеГруппы"))) Тогда
					Если Услуга.СубконтоБУ.абс_СтатусНоменклатурнойГруппы = Перечисления.абс_СтатусыНоменклатуры.Архив Или Услуга.СубконтоНУ.абс_СтатусНоменклатурнойГруппы = Перечисления.абс_СтатусыНоменклатуры.Архив Тогда
						ДействующаяАналитика = ОпределитьДействующуюАналитикуПоДокументамРеализации(Источник.Дата, Источник.Организация, Услуга.Номенклатура, Источник.Контрагент.абс_ТипыКонтрагентов);
						Если ДействующаяАналитика.Количество() > 0 Тогда
							Услуга.СубконтоБУ = ДействующаяАналитика.НоменклатурнаяГруппа;
							Услуга.СубконтоНУ = ДействующаяАналитика.НоменклатурнаяГруппа;
							Услуга.СтатьяОборотов = ДействующаяАналитика.СтатьяОборотов;						
							#Если НаКлиенте Тогда
								Сообщить("В строке " + Строка(Услуга.НомерСтроки) + " для номенклатуры '" + Строка(Услуга.Номенклатура) + "' не используемая аналитика " +
									"заменена на '" + Строка(ДействующаяАналитика.НоменклатурнаяГруппа) + "'.");
							#КонецЕсли
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(Услуга.СубконтоБУ) И ТипЗнч(Услуга.СубконтоБУ) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					Если Услуга.СубконтоБУ.абс_СтатусНоменклатурнойГруппы = Перечисления.абс_СтатусыНоменклатуры.Архив Тогда
						ДействующаяАналитика = ОпределитьДействующуюАналитикуПоДокументамРеализации(Источник.Дата, Источник.Организация, Услуга.Номенклатура, Источник.Контрагент.абс_ТипыКонтрагентов);
						Если ДействующаяАналитика.Количество() > 0 Тогда
							Услуга.СубконтоБУ = ДействующаяАналитика.НоменклатурнаяГруппа;
							Услуга.СтатьяОборотов = ДействующаяАналитика.СтатьяОборотов;						
							#Если НаКлиенте Тогда
								Сообщить("В строке " + Строка(Услуга.НомерСтроки) + " для номенклатуры '" + Строка(Услуга.Номенклатура) + "' не используемая аналитика " +
									"заменена на '" + Строка(ДействующаяАналитика.НоменклатурнаяГруппа) + "'.");
							#КонецЕсли
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(Услуга.СубконтоНУ) И ТипЗнч(Услуга.СубконтоНУ) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					Если Услуга.СубконтоНУ.абс_СтатусНоменклатурнойГруппы = Перечисления.абс_СтатусыНоменклатуры.Архив Тогда
						ДействующаяАналитика = ОпределитьДействующуюАналитикуПоДокументамРеализации(Источник.Дата, Источник.Организация, Услуга.Номенклатура, Источник.Контрагент.абс_ТипыКонтрагентов);
						Если ДействующаяАналитика.Количество() > 0 Тогда
							Услуга.СубконтоНУ = ДействующаяАналитика.НоменклатурнаяГруппа;
							Услуга.СтатьяОборотов = ДействующаяАналитика.СтатьяОборотов;						
							#Если НаКлиенте Тогда
								Сообщить("В строке " + Строка(Услуга.НомерСтроки) + " для номенклатуры '" + Строка(Услуга.Номенклатура) + "' не используемая аналитика " +
									"заменена на '" + Строка(ДействующаяАналитика.НоменклатурнаяГруппа) + "'.");
							#КонецЕсли
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//Бобылев А.А. 03.10.2018 --------------------
				Если ЗначениеЗаполнено(Услуга.СтатьяОборотов) Тогда
					БС = ОпределитьИспользованиеСтатьиОборотовДляПериода(Источник.Дата, Услуга.СтатьяОборотов);
					Если БС = 0 Тогда
						ДействующаяАналитика = ОпределитьДействующуюАналитикуПоДокументамРеализации(Источник.Дата, Источник.Организация, Услуга.Номенклатура, Источник.Контрагент.абс_ТипыКонтрагентов);
						Если ДействующаяАналитика.Количество() > 0 Тогда
							Услуга.СтатьяОборотов = ДействующаяАналитика.СтатьяОборотов;						
							#Если НаКлиенте Тогда
								Сообщить("В строке " + Строка(Услуга.НомерСтроки) + " для номенклатуры '" + Строка(Услуга.Номенклатура) + "' не используемая аналитика " +
									"заменена на '" + Строка(ДействующаяАналитика.СтатьяОборотов) + "'.");
							#КонецЕсли
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
		#КонецОбласти
		
		#Область ДокументыПоступления
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Или ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
			Для Каждого Услуга Из Источник.Услуги Цикл
				Если ЗначениеЗаполнено(Услуга.НоменклатурнаяГруппа) И (Услуга.НоменклатурнаяГруппа.абс_СтатусНоменклатурнойГруппы = Перечисления.абс_СтатусыНоменклатуры.Архив) Тогда
					ДействующаяАналитика = ОпределитьДействующуюАналитикуПоДокументамПоступления(Источник.Дата, Источник.Организация, Услуга.НоменклатурнаяГруппа, Источник.Контрагент.абс_ТипыКонтрагентов);
					Если ДействующаяАналитика.Количество() > 0 Тогда
						Услуга.НоменклатурнаяГруппа = ДействующаяАналитика.ИспользуемыйОбъект;
						#Если НаКлиенте Тогда
							Сообщить("В строке " + Строка(Услуга.НомерСтроки) + " не используемая аналитика " +
								"заменена на '" + Строка(ДействующаяАналитика.ИспользуемыйОбъект) + "'.");
						#КонецЕсли
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.СтатьяЗатрат) И (Услуга.СтатьяЗатрат.абс_СтатусСтатьиЗатрат <> Перечисления.абс_СтатусыНоменклатуры.Использование) Тогда
					ДействующаяСтатьяЗатрат = ОпределитьДействующуюАналитикуПоДокументамПоступления(Источник.Дата, Источник.Организация, Услуга.СтатьяЗатрат, Источник.Контрагент.абс_ТипыКонтрагентов);
					Если ДействующаяСтатьяЗатрат.Количество() > 0 Тогда
						Услуга.СтатьяЗатрат = ДействующаяСтатьяЗатрат.ИспользуемыйОбъект;						
						#Если НаКлиенте Тогда
						Сообщить("В строке " + Строка(Услуга.НомерСтроки) + " не используемая аналитика " +
							"заменена на '" + Строка(ДействующаяСтатьяЗатрат.ИспользуемыйОбъект) + "'.");
						#КонецЕсли
					КонецЕсли;
				КонецЕсли;			
			КонецЦикла;	
		КонецЕсли;		
		#КонецОбласти
	КонецЕсли;
	
КонецПроцедуры

Процедура РеализацияСотрудникуТТК(ЭтотОбъект) Экспорт
    Товары = ЭтотОбъект.Товары;
	абс_СтатьяПрочихДоходовРасходов = ЭтотОбъект.абс_СтатьяПрочихДоходовРасходов;
	Услуги = ЭтотОбъект.Услуги;
	Ссылка = ЭтотОбъект.Ссылка;
	Движения = ЭтотОбъект.Движения;	

	Если ЗначениеЗаполнено(ЭтотОбъект.абс_ФизЛицо) Тогда
		НаборЗаписейБУ = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписейБУ.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписейБУ.Прочитать();
		Для Каждого Проводка Из НаборЗаписейБУ Цикл
			
			Если Проводка.СчетДт = ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизации", ЭтотОбъект.абс_ФизЛицо);
				Если Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоПрочимОперациям Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыУдержаний", ЭтотОбъект.абс_ВидыУдержаний);
				КонецЕсли;
			КонецЕсли;
			
			Если Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС Тогда
				Если Товары.Количество()>0 Тогда
					СчетНДС = Товары[0].СтавкаНДС;
				Иначе 
					СчетНДС = Неопределено;
				КонецЕсли;	
				Счет9103 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.03");
				Если ЗначениеЗаполнено(Счет9103) Тогда
					Проводка.СчетДт  = Счет9103;
					Проводка.СубконтоДт.Очистить();
					Если ЗначениеЗаполнено(абс_СтатьяПрочихДоходовРасходов) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", абс_СтатьяПрочихДоходовРасходов); 
					КонецЕсли;					
					Проводка.СубконтоДт.ас_ПериодыОтражения = Неопределено;
					Если ЗначениеЗаполнено(СчетНДС) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СчетНДС); 
					КонецЕсли;	 						
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
	    НаборЗаписейБУ.Записать(Истина);
	КонецЕсли;
	
	НаборЗаписейБУ = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписейБУ.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписейБУ.Прочитать();
	ЕстьНДСПоПрочейРеализации = Ложь;
	Для Каждого Проводка Из НаборЗаписейБУ Цикл
		
		Если  (Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД) и (Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС) Тогда
			
			Счет9103 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.03");
			Если ЗначениеЗаполнено(Счет9103) Тогда
				Проводка.СчетДт  =Счет9103;
				//установка ставки НДС - кривая, т.к. в одном документе теоретически могут быть несколько строчек с разными ставками НДС
				Если Товары.Количество()>0 Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", Товары[0].СтавкаНДС); 
				КонецЕсли;	
				
				Если Услуги.Количество()>0 Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", Услуги[0].СтавкаНДС); 
				КонецЕсли;	
				ЕстьНДСПоПрочейРеализации = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьНДСПоПрочейРеализации Тогда
    	НаборЗаписейБУ.Записать(Истина);
	КонецЕсли;

КонецПроцедуры

//если у организации статус дзо, то об=организации всегда. Если не Дзо то об=организации всегда за исключением цфу ржд-эксплуатация, тогда об=кттк(000000001)
Функция ОпределитьОбъектБюджетирования(Организация, ЦФУ = Неопределено) Экспорт 
	
	ОБ = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Если НЕ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ДЗО 
			и ЗначениеЗаполнено(ЦФУ) и СокрЛП(ЦФУ.Код) = "ЦП0503" Тогда
			ОБ = Справочники.ttk_ОбъектыБюджетирования.НайтиПоКоду("000000001");
		Иначе
			ОБ = Справочники.ttk_ОбъектыБюджетирования.НайтиПоРеквизиту("Организация", Организация);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОБ;
		
КонецФункции

Процедура ИсключитьЗаписьРегистровНакопленияПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Константы.ttk_ОтключитьЗаписьВРегистрыНакоплений.Получить() Тогда
		УстановитьПривилегированныйРежим(Истина);
		//Если МассивИсключаемыхРегистровНакопленияДляЗаписи.Найти(ТипЗнч(Источник)) <> Неопределено Тогда 
		Если ПараметрыСеанса.ttk_ИсключаемыеРегистрыНакопленияДляЗаписи.Найти(Строка(Источник)) <> Неопределено Тогда 				
			Источник.Очистить();
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);	
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ttk_ПроведениеПоРегиструБюджетирования(Источник,Отказ, РежимПроведения) Экспорт
	Перем Статус;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Список_абс_Статусы = Новый СписокЗначений;
	Список_абс_Статусы.Добавить(Тип("ДокументОбъект.ПеремещениеТоваров"));
	Список_абс_Статусы.Добавить(Тип("ДокументОбъект.ПоступлениеТоваровУслуг"));
	Список_абс_Статусы.Добавить(Тип("ДокументОбъект.СписаниеТоваров"));
	Список_абс_Статусы.Добавить(Тип("ДокументОбъект.АвансовыйОтчет"));
	Список_абс_Статусы.Добавить(Тип("ДокументОбъект.РеализацияТоваровУслуг"));
	Список_абс_Статусы.Добавить(Тип("ДокументОбъект.ТребованиеНакладная"));
	Список_абс_Статусы.Добавить(Тип("ДокументОбъект.ПолучениеУслугПоПереработке"));
	Список_абс_Статусы.Добавить(Тип("ДокументОбъект.ОтражениеЗарплатыВРеглУчете"));
	Список_абс_Статусы.Добавить(Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг"));
	Список_абс_Статусы.Добавить(Тип("ДокументОбъект.ПередачаТоваров"));
	Список_абс_Статусы.Добавить(Тип("ДокументОбъект.ВозвратПереданныхТоваров"));
	Список_абс_Статусы.Добавить(Тип("ДокументОбъект.КомплектацияНоменклатуры"));
	
	Список_абс_СтатусыДокумента = Новый СписокЗначений;
	Список_абс_СтатусыДокумента.Добавить(Тип("ДокументОбъект.ОприходованиеТоваров"));
	Список_абс_СтатусыДокумента.Добавить(Тип("ДокументОбъект.КорректировкаПоступления"));	
	
	ТипОбъекта = ТипЗнч(Источник);
	
	// пишем ссылку в регистр 
	//только документы со статусом ПроверенноБухгалетром;
	
	Если Список_абс_Статусы.НайтиПоЗначению(ТипОбъекта) <> Неопределено Тогда
		Статус = 	Источник.абс_Статус; 
	ИначеЕсли Список_абс_СтатусыДокумента.НайтиПоЗначению(ТипОбъекта) <> Неопределено Тогда
		Статус = 	Источник.абс_СтатусДокумента; 
	КонецЕсли;
	
	Если Статус = ВернутьСтатусДокументаДляЗаписиВРегистр(Строка(ТипОбъекта)) Тогда
		ttk_ПроведениеПоРегиструБюджетированияСФормироватьДвижения(Источник.Ссылка,Ложь,Статус,Строка(ТипОбъекта),Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ttk_ПроведениеПоРегиструБюджетированияСФормироватьДвижения (Источник,ДвиженияСформированны,Статус,ТипДокумента,ЕстьОшибка,ИнформацияОбОшибке = Неопределено)
	
	Запись = РегистрыСведений.ttk_ПроведениеПоРегиструБюджетирования.СоздатьМенеджерЗаписи();
	Запись.Документ = Источник;
	Запись.ДвиженияСформированы = ДвиженияСформированны;
	Запись.абс_Статус = Статус;
	Запись.ТипДокумента = ТипДокумента;
	Запись.ЕстьОшибка = ЕстьОшибка;
	Запись.ИнформацияОбОшибке = ИнформацияОбОшибке;
	Запись.Записать();
	
КонецПроцедуры

Процедура ttk_ПроведениеПоРегиструБюджетированияУдалитьДвижения (Источник)
	
	НаборЗаписей = РегистрыСведений.ttk_ПроведениеПоРегиструБюджетирования.СоздатьНаборЗаписей();  
	НаборЗаписей.Отбор.Документ.Установить(Источник);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ttk_ПроведениеУстановитьСтатусЗавершен (ДокОбъект)
	
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ОприходованиеТоваров") 
		ИЛИ ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		ДокОбъект.абс_СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Завершен;
	Иначе
		ДокОбъект.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен;
	КонецЕсли; 
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ttk_ПроведениеВСтатусЗавершенВФоне() ЭКСПОРТ
	
	/// Устанавливаем статус завершен
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ttk_ПроведениеПоРегиструБюджетирования.Документ,
	|	ttk_ПроведениеПоРегиструБюджетирования.ЕстьОшибка,
	|	ttk_ПроведениеПоРегиструБюджетирования.абс_Статус,
	|	ttk_ПроведениеПоРегиструБюджетирования.ТипДокумента
	|ИЗ
	|	РегистрСведений.ttk_ПроведениеПоРегиструБюджетирования КАК ttk_ПроведениеПоРегиструБюджетирования
	|ГДЕ
	|	ttk_ПроведениеПоРегиструБюджетирования.ДвиженияСформированы = ЛОЖЬ
	|	И ttk_ПроведениеПоРегиструБюджетирования.абс_Статус <> &абс_СтатусЗавершен
	|	И ttk_ПроведениеПоРегиструБюджетирования.ЕстьОшибка = ЛОЖЬ";
	Запрос.УстановитьПараметр("абс_СтатусЗавершен",Перечисления.абс_СтатусыПервичныхДокументов.Завершен );
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТипЗнч(ВыборкаДетальныеЗаписи.Документ) = Тип("ДокументСсылка.ОприходованиеТоваров") 
			ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			ПроверкаСтатус =  ВыборкаДетальныеЗаписи.Документ.абс_СтатусДокумента;
		Иначе
			ПроверкаСтатус =  ВыборкаДетальныеЗаписи.Документ.абс_Статус;
		КонецЕсли; 
		
		
		Если ПроверкаСтатус  = ВернутьСтатусДокументаДляЗаписиВРегистр(ВыборкаДетальныеЗаписи.ТипДокумента)Тогда
			Попытка
				ДокОбъект =ВыборкаДетальныеЗаписи.Документ.ПолучитьОбъект();
				ttk_ПроведениеУстановитьСтатусЗавершен(ДокОбъект);
				ttk_ПроведениеПоРегиструБюджетированияСФормироватьДвижения(ВыборкаДетальныеЗаписи.Документ,Ложь,Перечисления.абс_СтатусыПервичныхДокументов.Завершен,ВыборкаДетальныеЗаписи.ТипДокумента,Ложь); 
			Исключение
				ttk_ПроведениеПоРегиструБюджетированияСФормироватьДвижения(ВыборкаДетальныеЗаписи.Документ,Ложь,ПроверкаСтатус,ВыборкаДетальныеЗаписи.типДокумента,Истина,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			КОнецПопытки
		Иначе
			ttk_ПроведениеПоРегиструБюджетированияУдалитьДвижения(ВыборкаДетальныеЗаписи.Документ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ttk_ПроведениеПоРегиструБюджетированияОбработать_ВФОНЕ ()  Экспорт
	
	/// Проведение
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ttk_ПроведениеПоРегиструБюджетирования.Документ,
	|	ttk_ПроведениеПоРегиструБюджетирования.ТипДокумента
	|ИЗ
	|	РегистрСведений.ttk_ПроведениеПоРегиструБюджетирования КАК ttk_ПроведениеПоРегиструБюджетирования
	|ГДЕ
	|	ttk_ПроведениеПоРегиструБюджетирования.ДвиженияСформированы = ЛОЖЬ
	|	И ttk_ПроведениеПоРегиструБюджетирования.абс_Статус = &абс_СтатусЗавершен  
	|	И ttk_ПроведениеПоРегиструБюджетирования.ЕстьОшибка = ЛОЖЬ";
	Запрос.УстановитьПараметр("абс_СтатусЗавершен",Перечисления.абс_СтатусыПервичныхДокументов.Завершен );
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТипЗнч(ВыборкаДетальныеЗаписи.Документ) = Тип("ДокументСсылка.ОприходованиеТоваров") 
			ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			ПроверкаСтатус =  ВыборкаДетальныеЗаписи.Документ.абс_СтатусДокумента;
		Иначе
			ПроверкаСтатус =  ВыборкаДетальныеЗаписи.Документ.абс_Статус;
		КонецЕсли; 
		
		Если ПроверкаСтатус  = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
			
			Попытка
				ДокОбъект =ВыборкаДетальныеЗаписи.Документ.ПолучитьОбъект();
				абс_Бюджетирование.ПроведениеПоРегиструБюджетирования_ВФОНЕ(ДокОбъект,Ложь);
				ttk_ПроведениеПоРегиструБюджетированияСФормироватьДвижения(ВыборкаДетальныеЗаписи.Документ,Истина,Перечисления.абс_СтатусыПервичныхДокументов.Завершен,ВыборкаДетальныеЗаписи.ТипДокумента,Ложь); 
			Исключение
				ttk_ПроведениеПоРегиструБюджетированияСФормироватьДвижения(ВыборкаДетальныеЗаписи.Документ,Ложь,Перечисления.абс_СтатусыПервичныхДокументов.Завершен,ВыборкаДетальныеЗаписи.ТипДокумента,Истина,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			КонецПопытки;
		Иначе
			ttk_ПроведениеПоРегиструБюджетированияУдалитьДвижения(ВыборкаДетальныеЗаписи.Документ);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВернутьСтатусДокументаДляЗаписиВРегистр(ТипДокумента)
	
	Если ТипДокумента = "Документ объект: Оприходование товаров" Тогда
		Возврат Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
	ИначеЕсли ТипДокумента = "Документ объект: Реализация товаров и услуг" Тогда
		Возврат Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
	ИначеЕсли ТипДокумента = "Документ объект: Поступление товаров и услуг" Тогда
		Возврат Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
	ИначеЕсли ТипДокумента = "Документ объект: Списание товаров" Тогда
		Возврат Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
	ИначеЕсли ТипДокумента = "Документ объект: Перемещение товаров" Тогда
		Возврат Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
	ИначеЕсли ТипДокумента = "Документ объект: Требование-накладная" Тогда
		Возврат Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
	ИначеЕсли ТипДокумента = "Документ объект: Передача товаров" Тогда
		Возврат Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
	ИначеЕсли ТипДокумента = "Документ объект: Возврат переданных товаров" Тогда
		Возврат Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
	ИначеЕсли ТипДокумента = "Документ объект: Получение услуг по переработке" Тогда
		Возврат Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
	ИначеЕсли ТипДокумента = "Документ объект: Комплектация номенклатуры" Тогда
		Возврат Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
	ИначеЕсли ТипДокумента = "Документ объект: Корректировка поступления" Тогда
		Возврат Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСценарийДляКонтроля() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СценарииПланирования.Ссылка
		|ИЗ
		|	Справочник.СценарииПланирования КАК СценарииПланирования
		|ГДЕ
		|	(СценарииПланирования.Код = ""000000005""
		|			ИЛИ СценарииПланирования.Код = ""000000027""
		|			ИЛИ СценарииПланирования.Код = ""000000005""
		|			ИЛИ СценарииПланирования.Код = ""000000017""
		|			ИЛИ СценарииПланирования.Код = ""000000030""
		|			ИЛИ СценарииПланирования.Код = ""000000031""
		|			ИЛИ СценарииПланирования.Код = ""000000026""
		|			ИЛИ СценарииПланирования.Код = ""000000039""
		|			ИЛИ СценарииПланирования.Код = ""000000042""
		|			ИЛИ СценарииПланирования.Код = ""000000054""
		|			ИЛИ СценарииПланирования.Код = ""000000057""
		|			ИЛИ СценарииПланирования.Код = ""000000052""
		|			ИЛИ СценарииПланирования.Код = ""000000051"")";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Список = Новый СписокЗначений;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Список.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Параметры:
//		ТаблицаЗначений - Переменная типа ТаблицаЗначений, передаваемая для изменения имени колонки
// 		ИмяПереименовываемойКолонки - Строка, колонка которую необходимо переименовать
//		НовоеИмяКолонки - Строка, новое имя для переименовываемой колонки
Процедура ПереименоватьКолонкуТаблицыЗначений(ТаблицаЗначений, ИмяПереименовываемойКолонки, НовоеИмяКолонки) Экспорт
	
	Если НЕ ТаблицаЗначений.Колонки.Найти(ИмяПереименовываемойКолонки) = Неопределено Тогда
		ТаблицаЗначений.Колонки[ИмяПереименовываемойКолонки].Имя = НовоеИмяКолонки;
	КонецЕсли;
	
КонецПроцедуры

Функция ttk_ИспользованиеЗапрещенныхСтатейДДС(Объект) Экспорт
	
	Рез = Ложь;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтатьяДвиженияДенежныхСредств",Объект.Метаданные()) Тогда
		Если Объект.СтатьяДвиженияДенежныхСредств.абс_НеИспользовать Тогда
			Сообщить("Статья "+Строка(Объект.СтатьяДвиженияДенежныхСредств)+" не используется!");
			Рез = Истина;
		КонецЕсли;
	КонецЕсли;
	Для каждого ТабЧасть Из Объект.Метаданные().ТабличныеЧасти Цикл
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтатьяДвиженияДенежныхСредств",Объект.Метаданные(),ТабЧасть.Имя) Тогда
			Для каждого Стр из Объект[ТабЧасть.Имя] Цикл
				Если Стр.СтатьяДвиженияДенежныхСредств.абс_НеИспользовать Тогда
					Сообщить("Статья "+Строка(Стр.СтатьяДвиженияДенежныхСредств)+" не используется!");
					Рез = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	Возврат Рез;
	
КонецФункции

//+ Интеграция ЕИСУП_Документооборот
// Перенесено из общего модуля "ОбщегоНазначения"
Процедура ОбработкаУдаленияПроведенияДокументаОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	Если НЕ Источник.ЭтоНовый() Тогда
		УдалитьДвиженияРегистратора(Источник, Отказ);
		
		Если Источник.ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности")
			И Источник.ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности.Количество() > 0 Тогда
			УправлениеЗапасамиПартионныйУчет.СдвинутьГраницуПоследовательностиНазад(Источник.Дата, Источник.Ссылка, Источник.ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Функция возвращает массив, который содержит имена регистров 
// движения которых не надо удалять при очистке движений перед перепроведением
//	Остатки, движения по таким регистрам не используются 
// 		ни в процедурах контроля остатков (товаров, задолженностей)
// 		ни в логике формирования других движений (например, партии, авансы)
//
Функция ПолучитьРегистрыДляОптимизацииПерезаписиДвижений(ТекущийРежимПроведенияДокумента)
	
	МассивРегистров = Новый Массив;
	
	//В список регистров могут быть включены только те, движения которых записываются через коллекцию движений (Движения.<...>), 
	//а не через набор записей 
	
	// Регистры вида "Обороты", которые 
	//- не используются для формирования движений 
	//- двигаются документами, для которых применяется выборочное удаление движений
	МассивРегистров.Добавить("ДвиженияДенежныхСредств");
	МассивРегистров.Добавить("Закупки");
	МассивРегистров.Добавить("Продажи");

	// Далее перечислены регистры, которые используются для контроля остатков, формирования движений 
	// только при оперативном проведении. Их 
	// - следует очищать если документ проводится оперативно
	// - можно не очищать, если документ проводится неоперативно
	Если ТекущийРежимПроведенияДокумента = РежимПроведенияДокумента.Неоперативный Тогда
		МассивРегистров.Добавить("ВзаиморасчетыСКонтрагентами");
		МассивРегистров.Добавить("ДенежныеСредства");
		МассивРегистров.Добавить("ЗаказыПоставщикам");
		МассивРегистров.Добавить("РазмещениеЗаказовПокупателей");
		МассивРегистров.Добавить("РасчетыСКонтрагентами");
		МассивРегистров.Добавить("ТоварыВНТТ");
		МассивРегистров.Добавить("ТоварыВРезервеНаСкладах");
		МассивРегистров.Добавить("ТоварыВРознице");
		МассивРегистров.Добавить("ТоварыКПередачеОрганизаций");
		МассивРегистров.Добавить("ТоварыКПередачеСоСкладов");
		МассивРегистров.Добавить("ТоварыКПеремещениюВНТТ");
		МассивРегистров.Добавить("ТоварыКПолучениюНаСклады");
		МассивРегистров.Добавить("ТоварыНаСкладах");
		МассивРегистров.Добавить("ТоварыОрганизаций");
		МассивРегистров.Добавить("ТоварыПереданные");
		МассивРегистров.Добавить("ТоварыПолученные");
	КонецЕсли;
	
	Возврат МассивРегистров;
	
КонецФункции // ПолучитьРегистрыДляОптимизацииПерезаписиДвижений

// Процедура удаления движений документа при перепроведении (отмене проведения)
//
// Параметры:
//	ДокументОбъект 				- документ, движения которого удаляются
//	Отказ 						- булево, признак отказа
//	ВыборочноОчищатьРегистры 	- булево, признак выборочной очистки наборов записей 
//								Если Истина - часть наборов записей не будут очищены, будут очищены только коллекции движений
//	РежимПроведенияДокумента 	- режим проведения (оперативный / неоперативный), 
//								нужен для составления списка регистров, которые не надо очищать
//	Для документа ПринятиеКУчетуОС предусмотрена отдельная процедура УдалитьДвиженияПринятиеКУчетуОС
Процедура УдалитьДвиженияРегистратора(ДокументОбъект, Отказ, ВыборочноОчищатьРегистры = Ложь, РежимПроведенияДокумента = Неопределено) Экспорт
	
	// Удалим те движения, которые уже записаны
	УдалитьЗаписанныеДвиженияДокумента(ДокументОбъект, Отказ, ВыборочноОчищатьРегистры, РежимПроведенияДокумента);
	
	// Очистим непустые коллекции движений документа
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
	// Удаление записей регистрации из всех последовательностей - после удаления движений по регистрам
	УдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, Истина);
	
КонецПроцедуры

// Процедура очистки записанных движений документа
//
// Параметры:
//	ДокументОбъект 				- документ, движения которого удаляются
//	Отказ 						- булево, признак отказа
//	ВыборочноОчищатьРегистры 	- булево, признак выборочной очистки наборов записей 
//								Если Истина - часть наборов записей не будут очищены, будут очищены только коллекции движений
//	РежимПроведенияДокумента 	- режим проведения (оперативный / неоперативный), 
//								нужен для составления списка регистров, которые не надо очищать
Процедура УдалитьЗаписанныеДвиженияДокумента(ДокументОбъект, Отказ, ВыборочноОчищатьРегистры, РежимПроведенияДокумента)
	
	// Получим перечень регистров, движения по которым нужно очистить
	МассивРегистров = ПроведениеДокументов.МассивРегистровНужноОчистить(ДокументОбъект);
	
	Если МассивРегистров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	////АБС_Попов_Фролов
	//ТекстЗапроса = "";
	//Для Каждого ПолноеИмяРегистра ИЗ МассивРегистров Цикл
	//	
	//	Если НЕ ТекстЗапроса = "" Тогда
	//		
	//		ТекстЗапроса = ТекстЗапроса + "
	//		|ОБЪЕДИНИТЬ ВСЕ ";
	//					
	//	КонецЕсли;
	//	
	//	ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ", "ВЫБРАТЬ ")+" """+ПолноеИмяРегистра+""" " + ?(ТекстЗапроса = "", "КАК Регистр", "") + " ИЗ "+ПолноеИмяРегистра+" КАК Т ГДЕ Т.Регистратор = &Регистратор";
	//КонецЦикла;
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
	//РезРегистров = Запрос.Выполнить().Выгрузить();
	//РезРегистров.Свернуть("Регистр");
	//МассивРегистров = РезРегистров.ВыгрузитьКолонку("Регистр");

	////\\АБС_Попов_Фролов
	// Если очищать регистры надо выборочно, то подготовим список таких регистров, 
	//	которые можно не очищать при перепроведении
	Если ВыборочноОчищатьРегистры Тогда
		РегистрыДляОптимизацииПерезаписиДвижений = ПолучитьРегистрыДляОптимизацииПерезаписиДвижений(РежимПроведенияДокумента);
	КонецЕсли;
	
	// Переменные логики отложенного проведения
	ДокументИспользуетсяВОтложенномПроведении = Ложь;
	ВыполняетсяДопроведение                   = Ложь;
	ПроведениеПоВсемВидамУчета                = Ложь;
	
	СтруктураПараметровПроведения = ОтложенноеПроведениеДокументов.ПолучитьПараметрыПроведенияДокумента(ДокументОбъект);
	ДокументИспользуетсяВОтложенномПроведении = СтруктураПараметровПроведения.ДокументИспользуетсяВОтложенномПроведении;
	
	Если ДокументИспользуетсяВОтложенномПроведении Тогда
		ВыполняетсяДопроведение = СтруктураПараметровПроведения.ВыполняетсяДопроведение;
		ПроведениеПоВсемВидамУчета = СтруктураПараметровПроведения.ПроведениеПоВсемВидамУчета;
		РегистрыОтложенногоПроведения = ОтложенноеПроведениеДокументов.ПолучитьРегистрыОтложенногоПроведения();
	КонецЕсли;
	
	//Бобылев А.А. Оптимизация 2018
	МассивУдаляемыхРегистров = Новый Массив;
	МассивУдаляемыхРегистров.Добавить("РегистрНакопления.Затраты");
	МассивУдаляемыхРегистров.Добавить("РегистрНакопления.ЗатратыБухгалтерскийУчет");
	МассивУдаляемыхРегистров.Добавить("РегистрНакопления.ЗатратыНалоговыйУчет");
	МассивУдаляемыхРегистров.Добавить("РегистрНакопления.ЗатратыНаСтроительствоОбъектовОсновныхСредств");
	МассивУдаляемыхРегистров.Добавить("РегистрНакопления.НезавершенноеПроизводство");
	МассивУдаляемыхРегистров.Добавить("РегистрНакопления.НезавершенноеПроизводствоБухгалтерскийУчет");
	МассивУдаляемыхРегистров.Добавить("РегистрНакопления.НезавершенноеПроизводствоНалоговыйУчет");
	МассивУдаляемыхРегистров.Добавить("РегистрНакопления.СтроительствоОбъектовОсновныхСредств");
	МассивУдаляемыхРегистров.Добавить("РегистрНакопления.абс_СписанныеМатериалыНаОС");
	МассивУдаляемыхРегистров.Добавить("РегистрНакопления.абс_НезавершенноеПроизводствоБУ");
	МассивУдаляемыхРегистров.Добавить("РегистрНакопления.абс_НезавершенноеПроизводствоНУ");
	МассивУдаляемыхРегистров.Добавить("РегистрНакопления.ПартииТоваровНаСкладах");
	
	Для каждого Элемент из МассивУдаляемыхРегистров Цикл
		ПоискЭлемента = МассивРегистров.Найти(Элемент);
		Если ПоискЭлемента <> Неопределено Тогда
			МассивРегистров.Удалить(ПоискЭлемента);
		КонецЕсли;
	КонецЦикла;
	//Бобылев А.А.
	
	
	//Обойдем список регистров, по которым существуют движения, и выполним очистку необходимых регистров
	Для Каждого ПолноеИмяРегистра ИЗ МассивРегистров Цикл
		
		// Имя регистра передается как значение, 
		// полученное с помощью функции ПолноеИмя() метаданных регистра
		ПозицияТочки = Найти(ПолноеИмяРегистра, ".");
		ТипРегистра = Лев(ПолноеИмяРегистра, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(ПолноеИмяРегистра, ПозицияТочки + 1));
		
		// Используется для оптимизации перезаписи движений платформой
		//	Если значение Ложь, набор записей не будет очищен
		// По умолчанию все движения надо удалять
		УдалятьДвижения = Истина;
		
		Если ВыборочноОчищатьРегистры И РегистрыДляОптимизацииПерезаписиДвижений.Найти(ИмяРегистра) <> Неопределено Тогда
			УдалятьДвижения = Ложь;
		КонецЕсли;
		
		Если ДокументИспользуетсяВОтложенномПроведении Тогда
			Если ВыполняетсяДопроведение Тогда
				//	Если выполняется допроведение, то удаляются только движения по регистрам, 
				//	которые формируются при отложенном проведении
				Если РегистрыОтложенногоПроведения.Найти(СокрЛП(ПолноеИмяРегистра)) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				// Документ проводится в режиме отложенного проведения
				
				// Если для документа выключен режим проведения "по всем видам учета", 
				// то всегда удаляются движения по регистрам, которые формируются при допроведении
				//	(независимо от того, входят ли они в список РегистрыДляОптимизацииПерезаписиДвижений)
				Если НЕ УдалятьДвижения
					И НЕ ПроведениеПоВсемВидамУчета 
					И РегистрыОтложенногоПроведения.Найти(СокрЛП(ПолноеИмяРегистра)) <> Неопределено Тогда
					
					УдалятьДвижения = Истина;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		
		Если УдалятьДвижения Тогда
			// Удаление движений происходит без контроля доступа - передаем пустую таблицу движений
			ПолныеПрава.ЗаписатьНаборЗаписейНаСервере(ИмяРегистра, ДокументОбъект.Ссылка,, ТипРегистра, Отказ);
		Иначе
			//Установим признак модифицированности набора записей, чтобы записались все коллекции движений, по которым
			//были записи на момент проведения
			ДокументОбъект.Движения[ИмяРегистра].Очистить();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Процедура удаления существующих движений документа ПринятиеКУчетуОС при перепроведении
//	Отличается от универсальной процедуры УдалитьДвиженияРегистратора:
//	- содержит специфичную для данного документа логику раздельного удаления движений по видам учета
//	- не учитывает отложенное проведение (т.к. документ в отложенном проведении не участвует)
//
// Параметры
//	ДокументОбъект 			- документ ПринятиеКУчетуОС, движения которого необходимо удалить
//	СтруктураВидовУчета 	- Структура, содержащая перечень видов учета
//								Для видов учета, по которым необходимо удалить движения, установлено значение Истина
//								Движения документа удаляются выборочно - по выбранным видам учета
//								Это необходимо при проведении по партиям (раздельное проведение документа по УУ, БУ + НУ)
Процедура УдалитьЗаписанныеДвиженияДокументаПринятиеКУчетуОС(ДокументОбъект, СтруктураВидовУчета, Отказ)
	
	// Получим перечень регистров, движения по которым нужно очистить
	МассивРегистров = ПроведениеДокументов.МассивРегистровНужноОчистить(ДокументОбъект);
	
	Если МассивРегистров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Признак - передана ли структура видов учета, в соответствии с которой надо выборочно удалять движения
	ПроверитьПринадлежностьРегистраКВидамУчета = (СтруктураВидовУчета <> Неопределено И ТипЗНЧ(СтруктураВидовУчета) = Тип("Структура"));
	Если ПроверитьПринадлежностьРегистраКВидамУчета Тогда
		// Получим список регистров с информацией: к какому виду учета они принадлежат
		//	Далее используется при вызове функции РегистрПринадлежитВидамУчета
		РегистрыПоВидамУчета = ПолучитьРегистрыПоВидамУчета();
	КонецЕсли;
	
	//Обойдем список регистров, по которым существуют движения, и выполним очистку необходимых регистров
	Для Каждого ПолноеИмяРегистра ИЗ МассивРегистров Цикл
		
		// Имя регистра передается как значение, полученное с помощью функции ПолноеИмя() метаданных регистра
		ПозицияТочки = Найти(ПолноеИмяРегистра, ".");
		ТипРегистра = Лев(ПолноеИмяРегистра, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(ПолноеИмяРегистра, ПозицияТочки + 1));
		
		// Очищать будем только движения по регистрам, относящимся к тем видам учета, по которым перепроводится документ
		//	Используется при проведении по партиям
		Если ПроверитьПринадлежностьРегистраКВидамУчета И
			НЕ РегистрПринадлежитВидамУчета(ИмяРегистра, СтруктураВидовУчета, РегистрыПоВидамУчета) Тогда
			Продолжить;
		КонецЕсли;
		// Выполним удаление движений (без контроля прав доступа)
		ПолныеПрава.ЗаписатьНаборЗаписейНаСервере(ИмяРегистра, ДокументОбъект.Ссылка,, ТипРегистра, Отказ);
	КонецЦикла;	

КонецПроцедуры //УдалитьЗаписанныеДвиженияДокументаПринятиеКУчетуОС

// Процедура удаления движений документа ПринятиеКУчетуОС при перепроведении
//	Отличается от универсальной процедуры УдалитьДвиженияРегистратора:
//	- содержит специфичную для данного документа логику раздельного удаления движений по видам учета
//	- не учитывает отложенное проведение (т.к. документ в отложенном проведении не участвует)
//
// Параметры
//	ДокументОбъект 			- документ ПринятиеКУчетуОС, движения которого необходимо удалить
//	Отказ 					- булево, признак отказа
//	СтруктураВидовУчета 	- Структура, содержащая перечень видов учета
//								Для видов учета, по которым необходимо удалить движения, установлено значение Истина
//								Движения документа удаляются выборочно - по выбранным видам учета
//								Это необходимо при проведении по партиям (раздельное проведение документа по УУ, БУ + НУ)
Процедура УдалитьДвиженияПринятиеКУчетуОС(ДокументОбъект, Отказ, СтруктураВидовУчета) Экспорт
	
	// Удалим те движения, которые уже записаны
	УдалитьЗаписанныеДвиженияДокументаПринятиеКУчетуОС(ДокументОбъект, СтруктураВидовУчета, Отказ);

	// Очистим непустые коллекции движений документа
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
	// Удалим записи регистрации из всех последовательностей  - после удаления движений по регистрам
	УдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, Истина);
	
КонецПроцедуры //УдалитьДвиженияПринятиеКУчетуОС

// Процедура очищает коллекцию движений документа
//
Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект)
		
	Если ДокументОбъект.Движения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Движение ИЗ ДокументОбъект.Движения Цикл
		// Очистим не пустые коллекции движений
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник, ЗаполнятьНомераСтрокПоИсточнику = Ложь) Экспорт
	
	// Заполним значения в совпадающих колонках.
	Для Каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
		
		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		
		Если ЗаполнятьНомераСтрокПоИсточнику Тогда
			СтрокаТаблицыПриемника.НомерСтроки = СтрокаТаблицыИсточника.Владелец().Индекс(СтрокаТаблицыИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

// Проверяет наличие требуемых данных в источнике и Формирует таблицу значений
//
// Параметры
//  Источник  – ТаблицаЗначений или ТабличнаяЧасть или КоллекцияСтрокДереваЗначений с исходными данными
//
//  Реквизиты – структура – Структура реквизитов. 
//							Ключ 		- Наименование колонки в источнике
//							Значение    - Наименование колонки в получаемой ТЗ
//							Если значение опущено - приравнивается ключу.
//	ПолучитьНомерСтрокиДокумента - булево
//	                        Используется только при выгрузке из табличной части документа.
//							В формируемой таблице создает новую колонку "НомерСтрокиДокумента"
//								и заполняет её реальными номерами строк
//
//  КоллекцияКолонокДереваЗначений - только для коллекции строк дерева значений.
// Возвращаемое значение:
//  Таблица значений или Неопределено (если не хватает реквизитов)
//
Функция СформироватьТаблицуЗначений(Источник,Реквизиты=Неопределено,ПолучитьНомерСтрокиДокумента = ложь,ФормироватьОтстутствующиеКолонки=Ложь,КоллекцияКолонокДереваЗначений=Неопределено) экспорт

	ЭтоТаблицаЗначений=(ТипЗнч(Источник)= тип("ТаблицаЗначений"));
	ЭтоСтрокиДереваЗначений=(ТипЗнч(Источник)= тип("КоллекцияСтрокДереваЗначений"));
	Если ЭтоСтрокиДереваЗначений и КоллекцияКолонокДереваЗначений = Неопределено тогда
		Возврат Неопределено;
	Конецесли;
	
	Если НЕ ЗначениеЗаполнено(Реквизиты) тогда
		Если ЭтоТаблицаЗначений тогда
			НоваяТЗ = Источник.Скопировать();
	  		Возврат НоваяТЗ;
		ИначеЕсли ЭтоСтрокиДереваЗначений тогда
			Реквизиты = Новый Структура();
			Для каждого Колонка из КоллекцияКолонокДереваЗначений цикл
				Реквизиты.Вставить(Колонка.Имя);
			КонецЦикла;
		Иначе
			НоваяТЗ = Источник.Выгрузить();
	  		Возврат НоваяТЗ;
		КонецЕслИ;
	Конецесли;
	
	Если не ЭтоТаблицаЗначений  и не ЭтоСтрокиДереваЗначений тогда
		РеквизитыТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(Источник)).Реквизиты;
	Конецесли;
	
	НоваяТЗ= Новый ТаблицаЗначений();
	
	Если не ЭтоТаблицаЗначений и ПолучитьНомерСтрокиДокумента тогда
 		НоваяТЗ.Колонки.Добавить("НомерСтрокиДокумента",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	КонецЕсли;

	Пока НоваяТЗ.Количество()<Источник.Количество() Цикл
		Строка = НоваяТЗ.Добавить();
		Если не ЭтоТаблицаЗначений и ПолучитьНомерСтрокиДокумента тогда
			Строка.НомерСтрокиДокумента = НоваяТЗ.Количество();
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекРеквизит из Реквизиты Цикл
		ИскомыйРеквизит = ТекРеквизит.Ключ;
		НовыйРеквизит 	= ?(ТекРеквизит.Значение = Неопределено,ТекРеквизит.Ключ,ТекРеквизит.Значение);
		Если ЭтоТаблицаЗначений тогда
			ИсточникКолонка = Источник.Колонки.Найти(ИскомыйРеквизит);
		ИначеЕсли ЭтоСтрокиДереваЗначений тогда
			ИсточникКолонка = КоллекцияКолонокДереваЗначений.Найти(ИскомыйРеквизит);
		Иначе
			ИсточникКолонка = РеквизитыТабличнойЧасти.Найти(ИскомыйРеквизит);
		Конецесли;
		Если ИсточникКолонка= неопределено тогда
			//недостаточно реквизитов
			Если ФормироватьОтстутствующиеКолонки тогда
				НоваяТЗ.Колонки.Добавить(НовыйРеквизит);
			Иначе
				Возврат Неопределено;
			КонецЕсли;	
		Иначе
			Если ЭтоТаблицаЗначений ИЛИ ЭтоСтрокиДереваЗначений тогда
				НоваяТЗ.Колонки.Добавить(НовыйРеквизит, ИсточникКолонка.ТипЗначения);
			Иначе
				НоваяТЗ.Колонки.Добавить(НовыйРеквизит, ИсточникКолонка.Тип);
			КонецЕсли;
			НоваяТЗ.ЗагрузитьКолонку(Источник.ВыгрузитьКолонку(ИскомыйРеквизит),НовыйРеквизит);
		Конецесли;
	КонецЦикла;
	
    Возврат НоваяТЗ;
КонецФункции // СформироватьТаблицуОплаты()

// Формирует структуру, содержащую значения реквизитов шапки документа.
//
// Параметры: 
//  ДокументОбъект - объект документа для формирования структуры шапки. 
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруШапкиДокумента(ДокументОбъект) Экспорт
	
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", ДокументОбъект.Ссылка);
	СтруктураШапкиДокумента.Вставить("Дата",   ДокументОбъект.Дата);
	
	ТипДокумента = ТипЗнч(ДокументОбъект);
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
	СтруктураШапкиДокумента.Вставить("ВидДокумента",  				МетаданныеДокумента.Имя);
	СтруктураШапкиДокумента.Вставить("ПредставлениеДокумента", 		СокрЛП(ДокументОбъект));
	СтруктураШапкиДокумента.Вставить("ПредставлениеВидаДокумента",  МетаданныеДокумента.Представление());
	
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя, ДокументОбъект[Реквизит.Имя]);
	КонецЦикла;
	
	// Вставим свойства в структуру и далее при необходимости установим некоторые значения в Истину.
	СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН", 		 Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", 		 Ложь);
	СтруктураШапкиДокумента.Вставить("ПоддержкаПБУ18", 					 Ложь);

	Если СтруктураШапкиДокумента.Свойство("Организация")
	 И ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация)
	 И СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете") 
	 И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
		УчетнаяПолитика = ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		
		Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			
			СтруктураШапкиДокумента.ОрганизацияПрименяетУСН = УчетнаяПолитика.УСН;	
		
			Если СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете") 
			 И СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				Если УчетнаяПолитика.УСН Тогда
					СтруктураШапкиДокумента.ОтражатьВНалоговомУчете = Ложь;
					Если УчетнаяПолитика.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда 
						СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы = Истина;
					Иначе 
						СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН = Истина;
					КонецЕсли;
				Иначе  
					СтруктураШапкиДокумента.ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18; 			
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции

//Формирует структуру, содержащую значения реквизитов шапки документа.
//Проверяет признаки отражения в учете
//При необходимости корректирует признаки отражения в учете в связи с отложенным проведением или допроведением документа
// Параметры: 
//  ДокументОбъект - объект документа для формирования структуры шапки, 
//	Отказ - признак отказа от проведения документа
//	Заголовок - строка, заголовок для формирования сообщений об ошибках
//	МожетБытьТолькоНалоговый - булево, признак того что флаг отражения в НУ может быть установлен независимо от флага отражения в БУ
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ДокументОбъект, Отказ, Заголовок, МожетБытьТолькоНалоговый = Ложь) Экспорт
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ДокументОбъект);
	
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат СтруктураШапкиДокумента;
	КонецЕсли;
	
	//Проверяем - возможно, документ должен проводиться отложенно
	Если ОтложенноеПроведениеДокументов.ДокументПодерживаетОтложенноеПроведение(ДокументОбъект,СтруктураШапкиДокумента) Тогда
		ОтложенноеПроведениеДокументов.ПодготовитьКПроведениюПоВидамУчета(ДокументОбъект.ДополнительныеСвойства, СтруктураШапкиДокумента);
	КонецЕсли;
	Возврат СтруктураШапкиДокумента;
КонецФункции

// Выполняет движение по регистру.
//
// Параметры:
//  НаборДвижений               - набор движений регистра,
//  ПустыеКолонкиСоставногоТипа - структура, содержащая имена измерений,ресурсов и
//  реквизитов составного типа, которые могут содержать пустые ссылки.
//
Процедура ВыполнитьДвижениеПоРегистру(НаборДвижений, ВидДвижения = Неопределено,
	                                  ПустыеКолонкиСоставногоТипа = Неопределено) Экспорт

	ТаблицаДвижений = НаборДвижений.мТаблицаДвижений;
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустыеКолонкиСоставногоТипа = Неопределено Тогда
		ПустыеКолонкиСоставногоТипа = Новый Структура;
	КонецЕсли;
	
	//
	КолонкиТаблицы = ТаблицаДвижений.Колонки;
	
	//
	МетаРег = НаборДвижений.Метаданные();
	ИзмеренияСостТипа = Новый Структура;
	ИзмеренияСостТипаСтр = "";
	Для Каждого МетаИзм Из МетаРег.Измерения Цикл
		Если (МетаИзм.Тип.Типы().Количество() > 1)
		   И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаИзм.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаИзм.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаИзм.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаИзм.Имя;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	Для Каждого МетаРек Из МетаРег.Реквизиты Цикл
		Если (МетаРек.Тип.Типы().Количество() > 1)
		   И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаРек.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаРек.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаРек.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаРек.Имя;
			КонецЕсли; 
			
		КонецЕсли;
	КонецЦикла;
	Для Каждого МетаРес Из МетаРег.Ресурсы Цикл
		Если (МетаРес.Тип.Типы().Количество() > 1)
		   И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаРес.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаРес.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаРес.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаРес.Имя;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмеренияСостТипаСтр <> "" Тогда
		ИзмеренияСостТипаСтр = Сред(ИзмеренияСостТипаСтр, 3);
	КонецЕсли;
	
	ТипЧисло = Тип("Число");
	ТипСтрока = Тип("Строка");
	ТипДата = Тип("Дата");
	
	ЕстьПериод = НЕ ТаблицаДвижений.Колонки.Найти("Период") = Неопределено;

	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
		Движение = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения, ,ИзмеренияСостТипаСтр);
		
		Если ВидДвижения <> Неопределено Тогда
			Движение.ВидДвижения = ВидДвижения;
		КонецЕсли;
		
		Если ЕстьПериод И НЕ СтрокаДвижения.Период = '00010101000000' Тогда
			Движение.Период = СтрокаДвижения.Период;
		ИначеЕсли НаборДвижений.мПериод <> Неопределено Тогда
			Движение.Период = НаборДвижений.мПериод;
		КонецЕсли; 
		Движение.Активность = Истина;
		
		Для Каждого КлючИЗначение ИЗ ИзмеренияСостТипа Цикл
			ЗначениеВКолонке = СтрокаДвижения[КлючИЗначение.Ключ];
			
			Если ЗначениеВКолонке = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияВКолонке = ТипЗнч(ЗначениеВКолонке);
			
			Если ТипЗначенияВКолонке = ТипЧисло Тогда
				Если ЗначениеВКолонке = 0 Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипЗначенияВКолонке = ТипСтрока Тогда
				Если ЗначениеВКолонке = "" Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипЗначенияВКолонке = ТипДата Тогда
				Если ЗначениеВКолонке = '00010101000000' Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЗначениеВКолонке.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			Движение[КлючИЗначение.Ключ] = ЗначениеВКолонке;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ВыполнитьДвижениеПоРегистру()

// Заполняет набор записей регистра СвободныеОстатки по данным базового регистра
//
// Параметры:
//  НаборСвободныеОстатки	- таблица движений регистра СвободныеОстатки, которую нужно заполнить
//  НаборБазовыйРегистр		- таблица движений регистра (базовый регистр) на основании которого необходимо заполнить регистр СвободныеОстатки
//  ВидРегистраОснования	- перечисление <ВидыРегистровОснованийРегистраСвободныеОстатки>
//
Процедура ЗаполнитьСвободныеОстаткиПоДаннымБазовогоРегистра(НаборСвободныеОстатки, НаборБазовыйРегистр, ВидРегистраОснования) Экспорт

	Если НаборБазовыйРегистр.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ДатаНачалаИспользованияРегистраСвободныеОстатки = глЗначениеПеременной("ДатаНачалаИспользованияРегистраСвободныеОстатки");
	
	// Сначала проверим период записей, потом выполним заполнение
	// Считаем, что период всех записей одинаковый
	Если НаборБазовыйРегистр[0].Период < ДатаНачалаИспользованияРегистраСвободныеОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ОбратныйВидДвижения = (ВидРегистраОснования = Перечисления.ВидыРегистровОснованийРегистраСвободныеОстатки.ТоварыВРезервеНаСкладах
							ИЛИ ВидРегистраОснования = Перечисления.ВидыРегистровОснованийРегистраСвободныеОстатки.ТоварыКПередачеСоСкладов);
			
	Для каждого ЭлДвижение Из НаборБазовыйРегистр Цикл
		
		ЭлЗапись = НаборСвободныеОстатки.Добавить();
		ЭлЗапись.РегистрОснование = ВидРегистраОснования;
		ЗаполнитьЗначенияСвойств(ЭлЗапись, ЭлДвижение);
		
		Если ВидРегистраОснования = Перечисления.ВидыРегистровОснованийРегистраСвободныеОстатки.ТоварыВРезервеНаСкладах Тогда
			ЭлЗапись.Качество = Справочники.Качество.Новый;
		КонецЕсли;
		
		Если ОбратныйВидДвижения Тогда
			Если ЭлЗапись.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				ЭлЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				ЭлЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли; 
		КонецЕсли;
		
		Если ВидРегистраОснования = Перечисления.ВидыРегистровОснованийРегистраСвободныеОстатки.ТоварыВРезервеНаСкладах Тогда
			// Резервирование зависит от обособленного учета (ОУ)
			// если ведется ОУ, то резервирование влияет на количество с учетом серии
			// если ОУ не ведется, количество с учетом серии не изменяется
			Если глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании") Тогда
				ТипДокументСсылкаЗаказПокупателя = Тип("ДокументСсылка.ЗаказПокупателя");
				Если ТипЗнч(ЭлДвижение.ДокументРезерва) = ТипДокументСсылкаЗаказПокупателя 
					И ЭлДвижение.ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
					
					ЭлЗапись.КоличествоСУчетомСерии = ЭлЗапись.Количество;
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			ЭлЗапись.КоличествоСУчетомСерии = ЭлЗапись.Количество;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры //
 
// Выполняет движения по регистру СвободныеОстатки.
//
// Параметры:
//  НаборДвижений			- таблица движений регистра (базовый регистр) на основании которого необходимо заполнить регистр СвободныеОстатки
//  Регистратор				- документ, регистратор движений
//  Замещение				- булево, замещать записи регистра	
//  ВидРегистраОснования	- перечисление <ВидыРегистровОснованийРегистраСвободныеОстатки>
//
Процедура ВыполнитьДвиженияПоРегиструСвободныеОстатки(НаборДвижений, Регистратор, Замещение, ВидРегистраОснования, Отказ = Ложь) Экспорт
	
	Если НЕ глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
		// При изменении базовых регистров документом "Корректировка записей регистров"
		// не выполняется автоматическое формирование движений по регистру
		Возврат;
	КонецЕсли; 
	
	НаборСвободныеОстатки = РегистрыНакопления.СвободныеОстатки.СоздатьНаборЗаписей();
	НаборСвободныеОстатки.Отбор.Регистратор.Установить(Регистратор);
	
	ЗаполнитьСвободныеОстаткиПоДаннымБазовогоРегистра(НаборСвободныеОстатки, НаборДвижений, ВидРегистраОснования);
	
	Попытка
		
		// Набор может не измениться
		Если НаборСвободныеОстатки.Модифицированность() Тогда
			НаборСвободныеОстатки.Записать(Ложь);
		КонецЕсли; 
	
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(), Отказ); 
		ВызватьИсключение "Операция не выполнена";
	КонецПопытки;	
	
КонецПроцедуры // ВыполнитьДвиженияПоРегиструСвободныеОстатки
 
// Процедура сворачивает движения по регистру накопления
//
Процедура СвернутьТаблицуДвиженийРегистраНакопления(НаборДвижений, ТабДвижений = Неопределено, УдалятьПустыеДвижения = Ложь) Экспорт
	
	Если ТипЗнч(НаборДвижений) = Тип("Строка") Тогда
		МетаРег = Метаданные.РегистрыНакопления[НаборДвижений];
		ТаблицаДвижений = ТабДвижений;
	Иначе
		МетаРег = НаборДвижений.Метаданные();
		Если ТабДвижений = Неопределено Тогда
			ТаблицаДвижений = НаборДвижений.мТаблицаДвижений;
		Иначе
			ТаблицаДвижений = ТабДвижений;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ТаблицаДвижений = Неопределено ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Измерения = "Период,Регистратор,Активность";
	Если МетаРег.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		Измерения = Измерения + ",ВидДвижения";
	КонецЕсли;
	
	Для Каждого МетаИзм Из МетаРег.Измерения Цикл
		Измерения = Измерения + "," + МетаИзм.Имя;
	КонецЦикла;
	Для Каждого МетаИзм Из МетаРег.Реквизиты Цикл
		Измерения = Измерения + "," + МетаИзм.Имя;
	КонецЦикла;
	
	Ресурсы = "";
	Для Каждого МетаРес Из МетаРег.Ресурсы Цикл
		Ресурсы = Ресурсы + МетаРес.Имя + ",";
	КонецЦикла;
	
	ТаблицаДвижений.Свернуть(Измерения, Ресурсы);
	
	Если УдалятьПустыеДвижения Тогда
		
		СтруктРесурсы   = Новый Структура(Ресурсы);
		МассивПустСтрок = Новый Массив;
		СтруктПоиска    = Новый Структура;
		
		Для Каждого РесурсКлюч Из СтруктРесурсы Цикл
			СтруктПоиска.Вставить( РесурсКлюч.Ключ, 0);
		КонецЦикла;
		
		МассивПустСтрок = ТаблицаДвижений.НайтиСтроки(СтруктПоиска);
		Для К = 0 По МассивПустСтрок.ВГраница() Цикл
			ТаблицаДвижений.Удалить(МассивПустСтрок[К]);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СвернутьТаблицуДвиженийРегистраНакопления()

// Получить движение(набор записей) для документа-объекта
//
// Параметры
//  Объект  – 	ДокументОбъект – Документ. для которого производится поиск движения
//  ТипДвижения  – Регистр<...>Менеджер – менеджер регистра, движение по которому пытаемся сформировать
//             или <Строка> - имя регистра, движение по которому пытаемся сформировать
//                 
// Возвращаемое значение:
//   Регистр<...>НаборЗаписей   – набор записей для объекта
//   или Неопределено - если такого регистра не существует или документ не является регистратором регистра
//
Функция ПолучитьДвижение(Объект, ТипДвижения, Сообщать=Ложь) Экспорт
	
	Если ТипЗнч(ТипДвижения) = Тип("Строка") Тогда
		Движение = Объект.Движения.Найти(ТипДвижения);
		ДвижениеНевозможно = Движение = Неопределено;
	Иначе
		ТипТипаДвижения = ТипЗнч(ТипДвижения.СоздатьНаборЗаписей());
		ДвижениеНевозможно = Истина;
		Для каждого Движение Из Объект.Движения Цикл
			Если ТипЗнч(Движение) = ТипТипаДвижения Тогда
				ДвижениеНевозможно = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ДвижениеНевозможно Тогда
			Движение = Неопределено;
		КонецЕсли; 
	КонецЕсли;
	
	Если Сообщать И ДвижениеНевозможно Тогда
		Если ТипЗнч(ТипДвижения) = Тип("Строка") Тогда
			ПредставлениеТипаДвижения = ТипДвижения;
		Иначе
			ПредставлениеТипаДвижения = Строка(ТипЗнч(ТипДвижения));
		КонецЕсли;
		СообщитьОбОшибке("Требуется подключение """ + ТипЗнч(Объект) + """ к формированиям движения по регистру """ + ПредставлениеТипаДвижения + """!");
	КонецЕсли;
	
	Возврат Движение;
	
КонецФункции // ПолучитьДвижение()

// Получить набор записей по регистру по ссылке на документ
//
// Параметры
//  Ссылка  		– ДокументСсылка		– Ссылка на документ, для которого производится поиск движений по регистру (набора записей)
//  РегистрДвижения – Регистр<...>Менеджер	– менеджер регистра, движение по которому пытаемся обнаружить
//  ПрочитатьЗаписи - Булево 				- Прочитать существующий набор записей для документа (если документ может формировать движения по указанному регистру).
//                 
// Возвращаемое значение:
//   Регистр<...>НаборЗаписей – Набор записей по регистру с отбором по документу,
//	 Неопределено 				в случае если документ не может формировать движений по регистру.
//
Функция ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрДвижения, ПрочитатьЗаписи = Ложь, Сообщать=Ложь) Экспорт
	Движения = неопределено;
	Если Ссылка.Метаданные().Движения.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(РегистрДвижения))) тогда
        Движения = РегистрДвижения.СоздатьНаборЗаписей();
		Движения.Отбор.Регистратор.Установить(Ссылка);
		Если ПрочитатьЗаписи тогда
			Движения.Прочитать();
		КонецЕсли;
	ИначеЕсли Сообщать тогда
			СообщитьОбОшибке("Требуется подключение документа """+Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).Представление()+""" к формированию движений по регистру """+
			СтрЗаменить(Лев(Строка(ТипЗнч(РегистрДвижения)),Найти(Строка(ТипЗнч(РегистрДвижения)),":"))," менеджер","")+Сред(Строка(ТипЗнч(РегистрДвижения)),Найти(Строка(ТипЗнч(РегистрДвижения)),":")+1)+
			"""!");
	КонецЕсли;
	
	Возврат Движения;
КонецФункции // ПолучитьНаборЗаписейПоСсылке()

// Процедура сворачивает переданный набор записей регистра бухгалтерии по измерениям и реквизитам
// Параметры: НаборЗаписейРегистраБухгалтерии, тип - набор записей регистров бухгалтерии Налоговый или Хозрасчетный
//            СтрокаГруппировка, тип - строка - список колонок таблицы значений по которым будет выполняться группировка
//            СтрокаСуммирование, тип - строка - список колонок таблицы значений которые будут суммироваться
//            ВестиРеглУчетРасчетовСПерсоналомСводно, тип - булево - признак ведения сводного учета расчетов с персоналом
//            МассивСчетовРасчетовСПерсоналом, тип - массив - список счетов учета расчетов с персоналом
Процедура СвернутьНаборЗаписейРегистраБухгалтерии(НаборЗаписейРегистраБухгалтерии,
							СтрокаГруппировка, СтрокаСуммирование,
							ВестиРеглУчетРасчетовСПерсоналомСводно = Ложь, МассивСчетовРасчетовСПерсоналом = Неопределено) Экспорт
	Перем ТаблицаЗаписейРегистраБухгалтерии;
	
	КоличествоЗаписейНабораЗаписей = НаборЗаписейРегистраБухгалтерии.Количество();
	// Если количество записей равно 0 - не требуется выполнять сворачивание
	Если КоличествоЗаписейНабораЗаписей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаписейРегистраБухгалтерии = НаборЗаписейРегистраБухгалтерии.Выгрузить();
	// Данная колонка в таблице не нужна
	ТаблицаЗаписейРегистраБухгалтерии.Колонки.Удалить("НомерСтроки");
	
	// Признак наличия проводок по счетам учета расчетов с персоналом
	ЕстьСчетаУчетаРасчетовСПерсоналом = Ложь;
	// Признак произведенной очистки субконто
	ЕстьОчищенныеСубконто = Ложь;
	
	// Если способ ведения расчетов с персоналом - сводно,
	// то перед сворачиванием могут потребоваться дополнительные действия по очистке аналитики в проводках
	Если ВестиРеглУчетРасчетовСПерсоналомСводно Тогда
		
		ТаблицаЗаписейРегистраБухгалтерии.Индексы.Добавить("СчетДт");
		ТаблицаЗаписейРегистраБухгалтерии.Индексы.Добавить("СчетКт");
		// Определим, есть ли проводки со счетами учета расчетов с персоналом
		// Для таких проводок потребуется выполнить очистку значений субконто
		Для Каждого Счет Из МассивСчетовРасчетовСПерсоналом Цикл
			Если ТаблицаЗаписейРегистраБухгалтерии.Найти(Счет, "СчетДт,СчетКт") <> Неопределено Тогда
				ЕстьСчетаУчетаРасчетовСПерсоналом = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Обнаружены проводки, у которых указаны счета расчетов с персоналом
		Если ЕстьСчетаУчетаРасчетовСПерсоналом Тогда
			
			// Создаем массив префиксов имен колонок таблицы записей регистра
			// С его помощью будем обращатся к именам колонок счетов и субконто Дт и Кт в цикле
			// чтобы не дублировать код, различающийся только именами колонок таблицы записей регистра
			ПрефиксыКолонок = Новый Массив;
			ПрефиксыКолонок.Добавить("Дт");
			ПрефиксыКолонок.Добавить("Кт");
			
			// Готовим соответствие счета расчетов и количества субконто счета
			СоответствиеКоличествоСубконтоСчета = Новый Соответствие;
			Для Каждого СчетРасчетов Из МассивСчетовРасчетовСПерсоналом Цикл
				СоответствиеКоличествоСубконтоСчета.Вставить(СчетРасчетов, СчетРасчетов.ВидыСубконто.Количество());
			КонецЦикла;
			
			// Готовим соответствие видов очищаемых субконто и пустых значений субконто
			СоответствиеПустыхЗначенийСубконто = Новый Соответствие;
			ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации;
			СоответствиеПустыхЗначенийСубконто.Вставить(ВидСубконто,
				Новый Структура("ПустоеЗначениеСубконто", ВидСубконто.ТипЗначения.ПривестиЗначение()));
			ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК;
			СоответствиеПустыхЗначенийСубконто.Вставить(ВидСубконто,
				Новый Структура("ПустоеЗначениеСубконто", ВидСубконто.ТипЗначения.ПривестиЗначение()));
			
			Для Каждого СтрокаТаблицы Из ТаблицаЗаписейРегистраБухгалтерии Цикл
				// Проверка счетов дебета и кредита
				Для Каждого ПрефиксКолонки Из ПрефиксыКолонок Цикл
					
					КоличествоСубконто = СоответствиеКоличествоСубконтоСчета[СтрокаТаблицы["Счет" + ПрефиксКолонки]];
					Если КоличествоСубконто <> Неопределено Тогда
						
						// Если в дебете или кредите стоит счет расчетов с персоналом - очистим некоторые аналитики
						Для НомерСубконто = 1 По КоличествоСубконто Цикл
							
							ВидСубконто = СтрокаТаблицы["ВидСубконто" + ПрефиксКолонки + НомерСубконто];
							СтруктураПустоеСубконто = СоответствиеПустыхЗначенийСубконто[ВидСубконто];
							Если СтруктураПустоеСубконто <> Неопределено Тогда
								ТекущееЗначениеСубконто = СтрокаТаблицы["Субконто" + ПрефиксКолонки + НомерСубконто];
								Если ТекущееЗначениеСубконто <> СтруктураПустоеСубконто.ПустоеЗначениеСубконто Тогда
									СтрокаТаблицы["Субконто" + ПрефиксКолонки + НомерСубконто] = СтруктураПустоеСубконто.ПустоеЗначениеСубконто;
									ЕстьОчищенныеСубконто = Истина;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаЗаписейРегистраБухгалтерии.Свернуть(СтрокаГруппировка,СтрокаСуммирование);
	// Если аналитика не очищалась и количество записей осталось без изменений 
	//	- не требуется загружать свернутую таблицу в набор записей 
	Если НЕ ЕстьОчищенныеСубконто
	 И ТаблицаЗаписейРегистраБухгалтерии.Количество() = КоличествоЗаписейНабораЗаписей Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск и удаление проводок с пустым  количеством и суммой
	
	// Готовим структуру поиска - нулевые значения колонок, которые входят в список суммируемых колонок
	СтруктураПоиска = Новый Структура(СтрокаСуммирование);
	Для Каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
		СтруктураПоиска[ЭлементСтруктуры.Ключ] = 0;
	КонецЦикла;
	
	// Удаление строк с пустыми значениями суммируемых колонок
	МассивСтрокКУдалению = ТаблицаЗаписейРегистраБухгалтерии.НайтиСтроки(СтруктураПоиска);
	Для Каждого ЭлементМассива Из МассивСтрокКУдалению Цикл
		 ТаблицаЗаписейРегистраБухгалтерии.Удалить(ЭлементМассива);
	КонецЦикла;
	
	НаборЗаписейРегистраБухгалтерии.Загрузить(ТаблицаЗаписейРегистраБухгалтерии);
	
КонецПроцедуры

// Функция проверяет наличие в строке только цифр
//
// Параметры
//  СтрокаПроверки - Строка для проверки только цифр
//
// Возвращаемое значение:
//   Булево
//
Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, УчитыватьЛидирующиеНули = Истина, УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции

// Функция возвращает структуру, содержащую виды учета (УУ, БУ, НУ) и принадлежащие им регистры
//
Функция ПолучитьРегистрыПоВидамУчета()

	РегистрыПоВидамУчета = Новый Структура;
	
	РегистрыПоВидамУчета.Вставить("ОтражатьВУправленческомУчете", "ГрафикиАмортизацииОС,
				|МестонахождениеОС,
				|НачислениеАмортизацииОС,
				|НоменклатураОсновныхСредств,
				|ПараметрыАмортизацииОС,
				|ПервоначальныеСведенияОС,
				|СобытияОС,
				|СоставОС,
				|СостоянияОС,
				|СписанныеТовары,
				|СпособыОтраженияРасходовПоАмортизацииОС,
				|БракВПроизводстве,
				|Затраты,
				|ЗатратыНаСтроительствоОбъектовОсновныхСредств,
				|НезавершенноеПроизводство,
				|ОССписанныеНаЗатраты,
				|ПартииТоваровНаСкладах,
				|СтоимостьОС,
				|СтроительствоОбъектовОсновныхСредств,
				|ТоварыНаСкладах,
				|СвободныеОстатки,
				|ТоварыОрганизаций,
				|ДопРасходыНаПриобретениеТоваров,
				|НезавершенноеПроизводство,
				|ПартииМатериаловВЭксплуатации,
				|ПартииТоваровПереданные,
				|ПродажиСебестоимость,
				|РеализованныеТовары,");
				
	РегистрыПоВидамУчета.Вставить("ОтражатьВБухгалтерскомУчете", "ГрафикиАмортизацииОСБухгалтерскийУчет,
				|МестонахождениеОСБухгалтерскийУчет,
				|НачислениеАмортизацииОСБухгалтерскийУчет,
				|ПараметрыАмортизацииОСБухгалтерскийУчет,
				|ПервоначальныеСведенияОСБухгалтерскийУчет,
				|МестонахождениеОСБухгалтерскийУчет,
				|МестонахождениеОСБухгалтерскийУчет,
				|СобытияОСОрганизаций,
				|СостоянияОСОрганизаций,
				|СписанныеТовары,
				|СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет,
				|СчетаБухгалтерскогоУчетаОС,
				|БракВПроизводствеБухгалтерскийУчет,
				|ЗатратыБухгалтерскийУчет,
				|НДСНачисленный,
				|НДСПартииТоваров,
				|НДСпоОСиНМА,
				|НДСПредъявленный,
				|НезавершенноеПроизводствоБухгалтерскийУчет,
				|ОССписанныеНаЗатратыОрганизаций,
				|ПартииТоваровНаСкладахБухгалтерскийУчет,
				|СтоимостьОСБухгалтерскийУчет,
				|ТоварыОрганизаций,
				|Хозрасчетный,
				|НДСКосвенныеРасходы,
				|НДСНезавершенноеПроизводство,
				|НДСПродукция,
				|ПартииМатериаловВЭксплуатацииБухгалтерскийУчет,
				|ПартииТоваровПереданныеБухгалтерскийУчет,
				|УчетЗатратРегл,");
				
	РегистрыПоВидамУчета.Вставить("ОтражатьВНалоговомУчете", "НачислениеАмортизацииОСНалоговыйУчет,
				|НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет,
				|ПараметрыАмортизацииОСНалоговыйУчет,
				|ПервоначальныеСведенияОСНалоговыйУчет,
				|ПервоначальныеСведенияОСНалоговыйУчетУСН,
				|СписанныеТовары,
				|СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет,
				|СчетаНалоговогоУчетаОС,
				|БракВПроизводствеНалоговыйУчет,
				|ЗатратыНалоговыйУчет,
				|НезавершенноеПроизводствоНалоговыйУчет,
				|ОплатыОСДляУСН,
				|ПартииТоваровНаСкладахНалоговыйУчет,
				|СтоимостьОСНалоговыйУчет,
				|Налоговый,
				|ПартииМатериаловВЭксплуатацииНалоговыйУчет,
				|ПартииТоваровПереданныеНалоговыйУчет,");				
				
	РегистрыПоВидамУчета.Вставить("ОтражатьВМеждународномУчете", "БракВПроизводствеМеждународныйУчет,
				|НезавершенноеПроизводствоМеждународныйУчет,
				|ПартииТоваровНаСкладахМеждународныйУчет,
				|ПартииТоваровПереданныеМеждународныйУчет,");
	
				
	Возврат РегистрыПоВидамУчета;
	
КонецФункции // РегистрыПоВидамУчета

// Функция проверяет принадлежность указанного регистра всем требуемым видам учета
//
// Параметры:
//  ИмяРегистра				- Строка, содержащая имя проверяемого регистра
//  СтруктураВидовУчета		- Структура, содержащая перечень видов учета со значением Истина, для которых нужно производить проверку
//  РегистрыПоВидамУчета	- структура, содержащая принадлежность регистров к видам учета
//
// Возвращаемое значение:
//   Булево
//
Функция РегистрПринадлежитВидамУчета(ИмяРегистра, СтруктураВидовУчета, РегистрыПоВидамУчета = Неопределено)
	
	Если РегистрыПоВидамУчета = Неопределено Тогда
		РегистрыПоВидамУчета = ПолучитьРегистрыПоВидамУчета();
	КонецЕсли;
				
	Для Каждого Элемент ИЗ СтруктураВидовУчета Цикл
		Если 
			Элемент.Значение													//Необходимо проверять этот вид учета
			И РегистрыПоВидамУчета.Свойство(Элемент.Ключ)						//Структура содержит регистры принадлежащие к виду учета
			И Найти(РегистрыПоВидамУчета[Элемент.Ключ],ИмяРегистра + ",") > 0	//Регистр найден в списке регистров, принадлежащих к виду учета
			Тогда
			Возврат Истина
		КонецЕсли;
	КонецЦикла;	
	
	//Регистр не принадлежит к проверяемым видам учета
	Возврат Ложь;			
	
КонецФункции //РегистрПринадлежитВидамУчета	

// Процедура заполняет субконто в строке набора записей
// Параметры 
// Запись - Строка набора записей регистра бухгалтерии
// Строка - Структура, содержащая значения субконто
//
Процедура ЗаполнитьСубконтоВНабореЗаписей(Запись,Строка)
	
	Для НомерСчета = 1 по 2 Цикл
		
		Если НомерСчета = 1 тогда 
			СчетДтКТ = "Дт"
		Иначе
			СчетДтКТ = "Кт"
		КонецЕсли;
		
		Для НомерСубконто = 1 по 3 цикл
			
			ЗначениеСубконто = Строка["Субконто"+СчетДтКТ+НомерСубконто];

			ВидСубконто = Строка["ВидСубконто"+СчетДтКТ+НомерСубконто];
			Если ВидСубконто.ТипЗначения <> Неопределено Тогда
				Запись["Субконто"+СчетДтКТ].Вставить(ВидСубконто, ЗначениеСубконто);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСубконтоВНабореЗаписей

// Добавляет записи из таблицы движений в набор записей
// Параметры 
// НаборЗаписей - Набор записей регистра накопления или регистра бухгалтерии
// Таблица - таблица значений содержащая движения соответствующего регистра (таблица движений)
//
Процедура ДобавитьСтрокиВНаборЗаписей(НаборЗаписей, Таблица) Экспорт
	
	НаборМетаданные = НаборЗаписей.Метаданные();
		
	ЭтоРегистрБухгалтерии = (Метаданные.РегистрыБухгалтерии.Найти(НаборМетаданные.Имя)<>Неопределено);
	
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	
	Период = Неопределено;
	
	Для Каждого Строка Из Таблица Цикл
		
		Запись = НаборЗаписей.Добавить();
			
		ЗаполнитьЗначенияСвойств(Запись,Строка);
			
		Запись.Активность = Истина;

		Если Запись.Период = '00010101' Тогда
			
			Если Период = Неопределено Тогда
				
				Период = Регистратор.Дата;
			
			КонецЕсли;
			
			Запись.Период = Период;
			
		КонецЕсли;
			
		Если ЭтоРегистрБухгалтерии тогда
			ЗаполнитьСубконтоВНабореЗаписей(Запись,Строка)
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ДобавитьСтрокиВНаборЗаписей

#Область ПРОЦЕДУРЫ_ФУНКЦИИ_РАБОТЫ_С_ОШИБКАМИ

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте вывобит сообщение в обработку комментирования
// на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения  - строка, текст сообщения.
//					  Строка может содержать символы %%, которые при формировании 
//					  сообщения заменяются на представления элементов расшифровки
//  Отказ           - булево, признак отказа (необязательный).
//  Заголовок	    - Заголовок сообщения, для вывода сообщения если работа на сервере или внешнее соединение
//	Расшифровки 	- массив расшифровок для переданного ТекстСообщения
//					  Представляет собой массив структур с полями Представление и Расшифровка
//					  Поле Представление - текст, дополняющий ТекстСообщения
//					  Поле Расшифровка - действие, выполняемое по расшифровке
//
Процедура ВывестиИнформациюОбОшибке(Знач ТекстСообщения, Отказ = Истина, Заголовок = "", ВидСообщения = Неопределено, Расшифровки = Неопределено, РодительскаяСтрока = НеОпределено, РаскрытьСообщение = Истина) Экспорт
	
	Отказ = Истина;
	
	#Если Клиент Тогда
	
		Если ВидСообщения = Неопределено Тогда
			ВидСообщения = Перечисления.ВидыСообщений.Ошибка;
		КонецЕсли;
		Обработка = глЗначениеПеременной("глОбработкаСообщений");
		Обработка.ДобавитьСообщение(ТекстСообщения, ВидСообщения, Расшифровки, РодительскаяСтрока, РаскрытьСообщение);
		
	#ИначеЕсли ВнешнееСоединение Тогда
		
		ТекстСообщения = СформироватьТекстСообщения(ТекстСообщения);
		Если ЗначениеЗаполнено(Заголовок) Тогда
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
			Заголовок = "";
		КонецЕсли;
		
		ВызватьИсключение (ТекстСообщения);
		
	#Иначе
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок = "";
		КонецЕсли;
		ТекстСообщения = СформироватьТекстСообщения(ТекстСообщения);
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		
	#КонецЕсли
	
КонецПроцедуры // ВывестиИнформациюОбОшибке()

// Функция убирает из текста сообщения служебную информацию.
//
// Параметры:
//  ТекстСообщения, Строка, исходный текст сообщения
//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьТекстСообщения(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);

КонецФункции

Процедура СообщитьИнформациюПользователю(СтрокаСообщенияПользователю) Экспорт
	
	#Если Клиент Тогда
	Сообщить(СтрокаСообщенияПользователю);
	#КонецЕсли
	
КонецПроцедуры

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//	Заголовок - Строка - Текст заголовка
//          (выводится пользователю в режиме обычного приложения; 
//           в заголовке должен быть описан контекст выполняемых действий, например "Проведение документа №... от ...")
//	Статус - СтатусСообщения - Статус сообщения
//	РасшифровкаСообщения - Массив - Массив с данными расшифровки
//						 - Ссылка - Ссылка на объект
//
Процедура СообщитьОбОшибке(
	Знач ТекстСообщения, 
	Отказ = Ложь, 
	Заголовок = "",
	Статус = Неопределено,
	РасшифровкаСообщения = Неопределено
	) Экспорт

	Если Статус = Неопределено Тогда
		Статус = СтатусСообщения.Важное;
	КонецЕсли;
	
	ТекстСообщения = СформироватьТекстСообщения(ТекстСообщения);

	Отказ = Истина;
	
	#Если ВнешнееСоединение Тогда
		//Для клиента и сервера запись в журнал регистрации попадет внутри процедуры Сообщение
		ДублироватьСообщениеВЖурналРегистрации(ТекстСообщения, Статус, Заголовок);
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
			Заголовок = "";
		КонецЕсли;
		
		ВызватьИсключение (ТекстСообщения);
		
	#ИначеЕсли Сервер Тогда
		ТекстСообщенияСервера = СокрЛП(ТекстСообщения);
		ПолныеПрава.абс_ЗапомнитьАдресОшибокСервера(ТекстСообщенияСервера);  				
		Сообщить(ТекстСообщенияСервера, абс_ОпределитьСтатусСообщения(Статус));  	
	#Иначе
		
		Сообщение(ТекстСообщения, Статус, Заголовок, РасшифровкаСообщения, Неопределено, Истина, Истина);
		
		ТекстСообщенияСервера = ПолныеПрава.абс_ПрочитатьОшибкиСервера();
		Если ЗначениеЗаполнено(ТекстСообщенияСервера) Тогда
			Сообщить(ТекстСообщенияСервера, абс_ОпределитьСтатусСообщения(Статус));
		КонецЕсли;	

	#КонецЕсли
	
КонецПроцедуры // СообщитьОбОшибке()

Функция абс_ОпределитьСтатусСообщения(Статус) Экспорт
	
	//Определим статус сообщения
	Если ТипЗнч(Статус) = Тип("СтатусСообщения") Тогда
		текСтатусСообщения = Статус;
	Иначе
		Если Статус = Перечисления.ВидыСообщений.ВажнаяИнформация Тогда
			текСтатусСообщения = СтатусСообщения.Внимание;
		ИначеЕсли Статус = Перечисления.ВидыСообщений.Ошибка Тогда
			текСтатусСообщения = СтатусСообщения.Важное;
		ИначеЕсли Статус = Перечисления.ВидыСообщений.Информация Тогда
			текСтатусСообщения = СтатусСообщения.Информация;
		Иначе
			текСтатусСообщения = СтатусСообщения.БезСтатуса;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат текСтатусСообщения;
	
КонецФункции	

Процедура ПоказатьДиалогСИнформациейОбОшибке(ИнформацияОбОшибке) Экспорт
	
	#Если Клиент Тогда
		ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке);
	#Иначе
		СообщитьОбОшибке(ПолучитьПричинуОшибки(ИнформацияОбОшибке).Описание);
	#КонецЕсли
	
КонецПроцедуры

// Выводит сообщение "пользовательского" вида о невозможности заблокировать объект
//
Процедура СообщитьОбъектЗаблокирован(ПредставлениеОбъекта, ПредставлениеТипа, Отказ = Ложь) Экспорт
	
	ТекстСообщения = "Не удалось записать " + ПредставлениеТипа + " " + ПредставлениеОбъекта + "!" + Символы.ПС + "Возможно, его данные редактируются другим пользователем.";
	ТекстЗаголовка = "Ошибка блокировки объекта";
	
	Отказ = Истина;
	
	#Если Клиент Тогда
		РаботаСДиалогами.ВывестиПредупреждение(ТекстСообщения, ТекстЗаголовка);
	#Иначе
		СообщитьОбОшибке(ТекстСообщения, , ТекстЗаголовка);
	#КонецЕсли
	
КонецПроцедуры // СообщитьОбъектЗаблокирован

// Формирует строку представления документа для сообщений при проведении.
//
// Параметры
//  Источник - структура шапки или ссылка на проводимый документ.
//
// Возвращаемое значение
//  Строка с представлением документа
//
Функция ПредставлениеДокументаПриПроведении(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		ПредставлениеДокумента = Источник.ПредставлениеДокумента;
		Если Источник.Свойство("ВидОперации") Тогда
			ПредставлениеДокумента = ПредставлениеДокумента + " (" + Источник.ВидОперации + ")";
		КонецЕсли; 
	Иначе
		МетаданныеДокумента = Источник.Метаданные();
		ВидОперацииСтр = "";
		Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
			ВидОперацииСтр = " (" + Источник.ВидОперации + ")";
		КонецЕсли;
		ПредставлениеДокумента = СокрЛП(Источник) + ВидОперацииСтр;
	КонецЕсли; 
	
	ПредставлениеДокумента = "Проведение документа: " + ПредставлениеДокумента;
	
	Возврат ПредставлениеДокумента;
	
КонецФункции // ПредставлениеДокументаПриПроведении

// Предназначена для получения запросом представлений объектов
// Поддерживает два синтаксиса
// 1.
// Параметры:
//	СсылкиОбъектовПарам - массив ссылок
// Возвращаемое значение
//	Соответствие в котором ключ - одна из переданных ссылок, 
//  а значение - представление этой ссылки
// 2. 
// Параметры:
//	СсылкиОбъектовПарам - ссылка
// Возвращаемое значение
//	Строка предсатвления ссылки
//
// Пример использования:
// 	МассивСсылок = Новый Массив;
// 	МассивСсылок.Добавить(НоваяОрганизация);
// 	МассивСсылок.Добавить(СтараяОрганизация);
// 	Представления = ПолучитьПредставленияОбъектов(МассивСсылок);
//	НоваяОрганизацияСтрокой = Представления[НоваяОрганизация];
//	СтараяОрганизацияСтрокой = Представления[СтараяОрганизация];
//
Функция ПолучитьПредставленияОбъектов(СсылкиОбъектовПарам) Экспорт
	// соответствие возвращается если передан массив ссылок
	ПереданМассив = Истина;
	
	// Если передано одиночное значение - "превратим" его в массив
	Если ТипЗнч(СсылкиОбъектовПарам) <> Тип("Массив") Тогда
		Ссылка = СсылкиОбъектовПарам;
		СсылкиОбъектов = Новый Массив;
		СсылкиОбъектов.Добавить(Ссылка);
		ПереданМассив = Ложь;
		
	Иначе
		СсылкиОбъектов = СсылкиОбъектовПарам;
		
	КонецЕсли;
	
	// Обработаем массив СсылкиОбъектов и сформируем 
	// соответствие ссылок по их типам
	СсылкиПоТипам = Новый Соответствие;
	Для Каждого СсылкаНаОбъект Из СсылкиОбъектов Цикл
		ПолноеИмя = СсылкаНаОбъект.Метаданные().ПолноеИмя();
		Если СсылкиПоТипам[ПолноеИмя] = НеОпределено Тогда
			СсылкиПоТипам[ПолноеИмя] = Новый Массив;
		КонецЕсли;
		СсылкиПоТипам[ПолноеИмя].Добавить(СсылкаНаОбъект);
	КонецЦикла;
	
	// формирование запроса
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	ПервоеЗначение = Истина;
	Для Каждого ЭлементСоответствия Из СсылкиПоТипам Цикл
		ИмяПараметра = "Массив" + СтрЗаменить(ЭлементСоответствия.Ключ, ".", "_");
		Если Не ПервоеЗначение Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ";
			
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ 
		|	Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Ссылка) КАК Представление
		|ИЗ " + ЭлементСоответствия.Ключ + "
		|ГДЕ Ссылка В (&" + ИмяПараметра + ")";
		Запрос.УстановитьПараметр(ИмяПараметра, ЭлементСоответствия.Значение);
		ПервоеЗначение = Ложь;
	КонецЦикла;
	// обработка запроса
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если ПереданМассив Тогда
		ВозвращаемоеСоответствие = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ВозвращаемоеСоответствие[Выборка.Ссылка] = Выборка.Представление;
		КонецЦикла;
		
		// дополним пустыми представлениями неполученных запросом ссылок
		Для Каждого СсылкаНаОбъект Из СсылкиОбъектов Цикл
			Если ВозвращаемоеСоответствие[СсылкаНаОбъект] = НеОпределено Тогда
				ВозвращаемоеСоответствие[СсылкаНаОбъект] = "";
			КонецЕсли;
			
		КонецЦикла;
		Возврат ВозвращаемоеСоответствие;
		
	Иначе
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Представление;
		Иначе
			// если ссылки не нашлось - пустое представление
			Возврат "";
		КонецЕсли;
		
	КонецЕсли; 
	
КонецФункции

// Проверяет принадлежность документа к видам учета
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//  МожетБытьТолькоНалоговый- строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок, МожетБытьТолькоНалоговый = Ложь) Экспорт
	
	Перем Упр, Бух, Нал;
	
	ЕстьУпр = СтруктураШапкиДокумента.Свойство("ОтражатьВУправленческомУчете", Упр);
	ЕстьБух = СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете", Бух);
	ЕстьНал = СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете", Нал);
	
	Если ЕстьУпр ИЛИ ЕстьБух ИЛИ ЕстьНал Тогда
		Если НЕ МожетБытьТолькоНалоговый Тогда
			Если Упр <> Истина И Бух <> Истина  Тогда
				СообщитьОбОшибке("Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".", Отказ, Заголовок);
			ИначеЕсли Бух <> Истина И Нал = Истина Тогда
				СообщитьОбОшибке("Документ не может проводиться  по налоговому учету, если он не проводится по бухгалтерскому учету." , Отказ, Заголовок);
			КонецЕсли;
		Иначе
			Если Упр <> Истина И Бух <> Истина И Нал <> Истина Тогда
				СообщитьОбОшибке("Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"", ""Бухгалтерский"", ""Налоговый"".", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПРОЦЕДУРЫ_ФУНКЦИИ_РАБОТЫ_С_УЧЕТНОЙ_ПОЛИТИКОЙ

// Функция возвращает структуру с параметрами учетной политики (Упр) на заданную дату.
//
// Параметры:
//	Период					- дата на которую необходимо получить учетную политику
//	СообщатьОбОшибке		- булево, если Истина, то вывести сообщение,
//							когда на дату нет учетной политики
// Возвращаемое значение:
// <Структура>				- если на дату нет учетной политики, то Неопределено
//
Функция ПолучитьПараметрыУчетнойПолитикиУпр(Период, СообщатьОбОшибке = Истина) Экспорт

	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	УчетнаяПолитика = глЗначениеПеременной("УчетнаяПолитикаУпр");
	
	Для каждого СтрокаУчетнойПолитики Из УчетнаяПолитика Цикл
		// Строки таблицы УчетнаяПолитика упорядочены по убыванию,
		// поэтому необходимо найти строку с периодом раньше даты, 
		// на которую необходимо получить УП
		Если СтрокаУчетнойПолитики.Период <= Период Тогда
			Результат = Новый Структура;
			
			Для Каждого Колонка Из УчетнаяПолитика.Колонки Цикл
				Результат.Вставить(Колонка.Имя, СтрокаУчетнойПолитики[Колонка.Имя]);
			КонецЦикла;
			
			Возврат Результат;	
		КонецЕсли; 
	КонецЦикла;
	
	Если СообщатьОбОшибке Тогда
		ТекстОшибки = "Не указаны параметры учетной политики (управленческий учет) на " + Формат(Период, "ДЛФ=DD");
		СообщитьОбОшибке(ТекстОшибки);
	КонецЕсли; 
	
	Возврат Неопределено;	
	
КонецФункции // ПолучитьПараметрыУчетнойПолитикиУпр

// Функция возвращает структуру с параметрами учетной политики (регл учета)
// на заданную дату по указанной организации.
//
// Параметры:
//	Период					- дата на которую необходимо получить учетную политику
//	Организация				- Организация по которой необходимо получить учетную политику
//	СообщатьОбОшибке		- булево, если Истина, то вывести сообщение,
//
// Возвращаемое значение:
// <Структура>				- если на дату нет учетной политики, то Неопределено
//
Функция ПолучитьПараметрыУчетнойПолитикиРегл(Период, Организация, СообщатьОбОшибке = Истина) Экспорт

	Если НЕ ЗначениеЗаполнено(Период) 
		ИЛИ НЕ ЗначениеЗаполнено(Организация)  Тогда
		
		Возврат Неопределено;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Организации.ОтражатьВРегламентированномУчете КАК ОтражатьВРегламентированномУчете
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.Ссылка = &Ссылка";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если НЕ Выборка.ОтражатьВРегламентированномУчете Тогда
			Возврат Неопределено;	
		КонецЕсли;
	КонецЕсли;
	
	УчетнаяПолитика = глЗначениеПеременной("УчетнаяПолитикаРегл");
	
	Для каждого СтрокаУчетнойПолитики Из УчетнаяПолитика Цикл
		// Строки таблицы УчетнаяПолитика упорядочены по убыванию,
		// поэтому необходимо найти строку с периодом раньше даты, 
		// на которую необходимо получить УП
		Если СтрокаУчетнойПолитики.Организация = Организация
			И СтрокаУчетнойПолитики.Период <= Период Тогда
			
			Результат = Новый Структура;
			
			Для Каждого Колонка Из УчетнаяПолитика.Колонки Цикл
				Результат.Вставить(Колонка.Имя, СтрокаУчетнойПолитики[Колонка.Имя]);
			КонецЦикла;
			
			// Для сохранения совместимости со старой версией хранения параметра УСН
			Результат.Вставить("УСН", СтрокаУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
			
			// Начиная с 01.01.2006 "Момент определения налоговой базы НДС" всегда "По отгрузке"
			Если Период>= '20060101' 
				И Результат.Свойство("МоментОпределенияНалоговойБазыНДС") 
				И Результат.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда			
				
				Результат.Вставить("МоментОпределенияНалоговойБазыНДС", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
			КонецЕсли; 
			
			// Начиная с 01.01.2008 "Налоговый период" всегда "Квартал"
			Если Период>= '20080101' 
				И Результат.Свойство("НДСНалоговыйПериод") 
				И Результат.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц Тогда
				
				Результат.Вставить("НДСНалоговыйПериод", Перечисления.Периодичность.Квартал);
			КонецЕсли; 
			
			Возврат Результат;	
		КонецЕсли; 
	КонецЦикла;
	
	Если СообщатьОбОшибке Тогда
		ТекстОшибки = "Не указаны параметры учетной политики (бухгалтерский и налоговый учет) на " + Формат(Период, "ДЛФ=DD") + " для организации " + Организация;
		СообщитьОбОшибке(ТекстОшибки);
	КонецЕсли; 
	
	Возврат Неопределено;	

КонецФункции // ПолучитьПараметрыУчетнойПолитикиРегл

// Временная функция. Необходимо использовать функции ПолучитьПараметрыУчетнойПолитикиУпр и ПолучитьПараметрыУчетнойПолитикиРегл
//
Функция ПолучитьПараметрыУчетнойПолитики(КонДата, УчетнаяПолитикаНеЗадана, Организация = Неопределено, Учет = "упр", СообщатьОбОшибке = Истина) Экспорт
	
	Если НРег(Учет) = "упр" Тогда
		ПараметрыУчетнойПолитки = ПолучитьПараметрыУчетнойПолитикиУпр(КонДата, СообщатьОбОшибке);
	Иначе
		ПараметрыУчетнойПолитки = ПолучитьПараметрыУчетнойПолитикиРегл(КонДата, Организация, СообщатьОбОшибке);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыУчетнойПолитки) Тогда
		УчетнаяПолитикаНеЗадана = Истина;
	КонецЕсли; 
	
	Возврат ПараметрыУчетнойПолитки;
	
КонецФункции // ПолучитьПараметрыУчетнойПолитики

// Процедура выводить сообщение о необходимости перезапуска программы при изменении учетной политики
// если в ИБ работают другие пользователи.
//
Процедура СообщитьОбИзмененииУчетнойПолитики() Экспорт
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы() ;
	Для Каждого ТекСоединение Из МассивСоединений Цикл
		Если (ТекСоединение.ИмяПриложения = "1CV8") 
		   И (НЕ ТекСоединение.НомерСоединения = НомерСоединенияИнформационнойБазы())
		   И (НЕ ТекСоединение.Пользователь = неопределено) Тогда
			  
				Сообщить("Внимание! Вы изменили настройки учетной политики.
						 |В настоящий момент в базе работают пользователи. 
						 |Для того чтобы новые настройки начали действовать у других пользователей
						 |им необходимо перезапустить программу. 
						 |Для Вас новые настройки уже вступили в силу, перезапускать программу не требуется.", СтатусСообщения.Важное);
						 
				Возврат;
							
		КонецЕсли;
	КонецЦикла;			
	
КонецПроцедуры

// Функция дополняет структуру шапки документа положениями учетной политики.
//
Процедура ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, КонДата, Отказ, Организация, Учет = "Нал", СтруктураПолейУчетнойПолитикиНУ = неопределено) Экспорт
	
	Если Учет = "Упр" Тогда
		СтруктураУП = ПолучитьПараметрыУчетнойПолитикиУпр(КонДата);
	Иначе
		СтруктураУП = ПолучитьПараметрыУчетнойПолитикиРегл(КонДата, Организация);
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(СтруктураУП) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого ПараметрУП Из СтруктураУП Цикл
		Если (ТипЗнч(СтруктураПолейУчетнойПолитикиНУ) = Тип("Структура"))
		   И НЕ (СтруктураПолейУчетнойПолитикиНУ.Количество() = 0) Тогда
		   
		   // Заполнение определенными параметрами учетной политики
			Если СтруктураПолейУчетнойПолитикиНУ.Свойство(ПараметрУП.Ключ) Тогда
				Если НЕ ЗначениеЗаполнено(СтруктураПолейУчетнойПолитикиНУ[ПараметрУП.Ключ]) Тогда
					СтруктураШапкиДокумента.Вставить(ПараметрУП.Ключ,ПараметрУП.Значение);
				Иначе
					СтруктураШапкиДокумента.Вставить(СтруктураПолейУчетнойПолитикиНУ[ПараметрУП.Ключ],ПараметрУП.Значение);
				КонецЕсли; 
			КонецЕсли; 
			
		Иначе	
			
			// Заполнение всеми параметрами учетной политики
			СтруктураШапкиДокумента.Вставить(ПараметрУП.Ключ,ПараметрУП.Значение);  
			
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры // ДополнитьПоложениямиУчетнойПолитики()

#КонецОбласти

#Область ПРОЦЕДУРЫ_ФУНКЦИИ_ДЛЯ_РАБОТЫ_С_ПОСЛЕДОВАТЕЛЬНОСТЯМИ

Процедура УдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, ПроверятьДвижения=ложь)
	//Очистим коллекцию движений документа
	ТаблицаСтаройРегистрацииВПоследовательности = Новый ТаблицаЗначений();
	ТаблицаСтаройРегистрацииВПоследовательности.Колонки.Добавить("ИмяПоследовательности");
	ТаблицаСтаройРегистрацииВПоследовательности.Колонки.Добавить("Организация");
	ТаблицаСтаройРегистрацииВПоследовательности.Колонки.Добавить("Период");
	
	КоллекцияПоследовательностей = ДокументОбъект.ПринадлежностьПоследовательностям;
	Для Каждого НаборЗаписейРегистрацииВПоследовательности ИЗ КоллекцияПоследовательностей Цикл
		Если (НаборЗаписейРегистрацииВПоследовательности.Количество() > 0) Тогда
			Если НаборЗаписейРегистрацииВПоследовательности.Метаданные().Имя = "ПартионныйУчет"  
			  ИЛИ НаборЗаписейРегистрацииВПоследовательности.Метаданные().Имя = "ПартионныйУчетБУ" Тогда
			    НаборЗаписейРегистрацииВПоследовательности.Прочитать();
				Для Каждого ЗаписьВПоследовательности Из НаборЗаписейРегистрацииВПоследовательности Цикл
					НоваяЗаписьРегистрации = ТаблицаСтаройРегистрацииВПоследовательности.Добавить();
					НоваяЗаписьРегистрации.ИмяПоследовательности = НаборЗаписейРегистрацииВПоследовательности.Метаданные().Имя;
					НоваяЗаписьРегистрации.Организация = ЗаписьВПоследовательности.Организация;
					НоваяЗаписьРегистрации.Период = ЗаписьВПоследовательности.Период;
				КонецЦикла;	
				НаборЗаписейРегистрацииВПоследовательности.Очистить();
			КонецЕсли;	
		   	НаборЗаписейРегистрацииВПоследовательности.Записать();
		КонецЕсли;
	КонецЦикла;
	
	//Если коллекция пуста, то привилегированно очистим набор записей
	УправлениеЗапасамиПартионныйУчет.УдалитьРегистрациюДокументаВПоследовательностяхНаСервере(ДокументОбъект.Ссылка, ПроверятьДвижения, ТаблицаСтаройРегистрацииВПоследовательности);
	ТаблицаСтаройРегистрацииВПоследовательности.Свернуть("ИмяПоследовательности,Организация,Период"); 
	ДокументОбъект.ДополнительныеСвойства.Вставить("ТаблицаСтаройРегистрацииВПоследовательности",ТаблицаСтаройРегистрацииВПоследовательности);
	
КонецПроцедуры//УдалитьРегистрациюДокументаВПоследовательностях

#КонецОбласти

#Область ПРОЦЕДУРЫ_ВЫВОДА_СООБЩЕНИЙ


Функция ОпределитьВажностьСобытияЖурналаРегистрации(Статус)
	ВидСобытия = УровеньЖурналаРегистрации.Информация;
	Если Статус = СтатусСообщения.Внимание Тогда
		ВидСобытия = УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли Статус = СтатусСообщения.Важное или  Статус = СтатусСообщения.ОченьВажное Тогда
		ВидСобытия = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
    Возврат  ВидСобытия;
КонецФункции

//Процедура проверяет необходимость вывода сообщения в журнал регистрации, при необходимости выводит сообщение в журнал регистрации
// Параметры:
//	ТекстСообщения - Строка - Текст сообщения
//	Статус - ПеречислениеСсылка.ВидыСообщений - Вид сообщения
//		   - СтатусСообщения - Статус сообщения (используется для совместимости со старыми вызовами процедуры Сообщить)
//	Заголовок - Строка - Текст заголовка
//
Процедура ДублироватьСообщениеВЖурналРегистрации(ТекстСообщения, Статус, Заголовок="")
	//Если сообщение выводится во внешнем соединении, оно всегда должно быть выведено в журнал регистрации (независимо от настроек)
	//Это необходимо для того, чтобы в ЖР были видны сообщения при автоматическом обновлении
	#Если НЕ ВнешнееСоединение Тогда
	ДублироватьСообщенияВЖурналРегистрации = глЗначениеПеременной("ДублироватьСообщенияВЖурналРегистрации");
	Если НЕ ДублироватьСообщенияВЖурналРегистрации Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	Важность = ОпределитьВажностьСобытияЖурналаРегистрации(Статус);
	Если Заголовок <> "" Тогда
		//вывод заголовка как отдельной записи в журнал
		ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Примечание, , ,Заголовок);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Сообщение", Важность, , ,ТекстСообщения);

КонецПроцедуры

// Процедура выводит пользователю сообщение: в журнал регистрации, в панель комментариев, в окно сообщений (в зависимости от настроек).
//
// Параметры:
//	ТекстСообщения - Строка - Текст сообщения
//	Статус - ПеречислениеСсылка.ВидыСообщений - Вид сообщения
//		   - СтатусСообщения - Статус сообщения (используется для совместимости со старыми вызовами процедуры Сообщить)
//	Заголовок - Строка - Текст заголовка
//	РасшифровкаСообщения - Массив - Массив с данными расшифровки
//						 - Ссылка - Ссылка на объект
//	СтрокаРодитель - Родительская строка дерева значений для вывода сообщения
//	РаскрытьСообщение - Булево - Признак раскрытия строки дерева сообщений
//
// Возвращаемое значение:
//	СтрокаДереваЗначенний - Строка дерева значений, в которую записано текущее сообщение
//Если вывод сообщений в панель комментариев не предусмотрен, возвращается Неопределено
Функция Сообщение(Знач ТекстСообщения, Статус = Неопределено, Заголовок = "", РасшифровкаСообщения = Неопределено, СтрокаРодитель = Неопределено, РаскрытьСообщение = Истина, ЭтоСообщениеОбОшибке = Ложь) Экспорт
	
	ДублироватьСообщениеВЖурналРегистрации(ТекстСообщения, Статус, Заголовок);
	СтрокаДереваЗначений = ВыводСообщений.ВывестиСообщениеВПанельКомментариев(ТекстСообщения, Статус, Заголовок, РасшифровкаСообщения, СтрокаРодитель, РаскрытьСообщение);
	Если СтрокаДереваЗначений = Неопределено Тогда //Сообщение в панель комментариев не выведено, значит необходимо вывести его в окно сообщений
		ВыводСообщений.ВывестиСообщениеВОкноСообщений(ТекстСообщения, Статус, Заголовок, РасшифровкаСообщения, ЭтоСообщениеОбОшибке);
	КонецЕсли;
	
	Возврат СтрокаДереваЗначений;
	
КонецФункции

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

// Функция возвращает объект WSПрокси созданный с переданными параметрами.
//
// Параметры:
//  АдресWSDL - Строка - месторасположение wsdl
//  URIПространстваИмен - Строка - URI пространства имен web-сервиса
//  ИмяСервиса - Строка - имя сервиса
//  ИмяТочкиПодключения - Строка - если не задано, образуется как <ИмяСервиса>Soap
//  ИмяПользователя - Строка - имя пользователя для входа на сервер
//  Пароль - Строка - пароль пользователя
//  Таймаут - Число - таймаут на операции выполняемые через полученное прокси 
//
// Возвращаемое значение:
//  WSПрокси
//
Функция WSПрокси(
			Знач АдресWSDL,
			Знач URIПространстваИмен,
			Знач ИмяСервиса,
			Знач ИмяТочкиПодключения = "",
			Знач ИмяПользователя,
			Знач Пароль,
			Знач Таймаут = Неопределено,
			Знач ДелатьКонтрольныйВызов = Ложь
	) Экспорт
	
	Если ДелатьКонтрольныйВызов И Таймаут <> Неопределено И Таймаут > 20 Тогда
		
		WSПроксиPing = ОбщегоНазначенияПовтИсп.WSПрокси(
			АдресWSDL,
			URIПространстваИмен,
			ИмяСервиса,
			ИмяТочкиПодключения,
			ИмяПользователя,
			Пароль,
			3);
		
		Попытка
			WSПроксиPing.Ping();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'WSПрокси'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ОбщегоНазначенияПовтИсп.WSПрокси(
		АдресWSDL,
		URIПространстваИмен,
		ИмяСервиса,
		ИмяТочкиПодключения,
		ИмяПользователя,
		Пароль,
		Таймаут);
	
КонецФункции
	
// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

// Получить представление информационной базы для отображения пользователю.
//
// Возвращаемое значение:
//   Строка      - Представление информационной базы
//
// Пример возвращаемого результата:
// - для ИБ в файлом режиме: \\FileServer\1c_ib\
// - для ИБ в серверном режиме: ServerName:1111 / information_base_name
//
Функция ПолучитьПредставлениеИнформационнойБазы() Экспорт
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	
	Если ИнформационнаяБазаФайловая(СтрокаСоединенияСБД) Тогда
		ПутьКБД = Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
	Иначе
		// надо к имени сервера прибавить имя пути информационной базы
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "SRVR=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "REF=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКБД = ИмяСервера + "/ " + ИмяИБНаСервере;
		
	КонецЕсли;
	
	Возврат ПутьКБД;
	
КонецФункции

// Проверить, что описание типа состоит из единственного типа значения и 
// совпадает с нужным типом.
//
// Возвращаемое значение:
//   Булево      - Совпадает или нет
//
Функция ОписаниеТипаСостоитИзТипа(ОписаниеТипа, ТипЗначения) Экспорт
	
	Если ОписаниеТипа.Типы().Количество() = 1
	   И ОписаниеТипа.Типы().Получить(0) = ТипЗначения Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

// Получает таблицу значений с описанием требуемых свойств всех реквизитов объекта метаданного
// Получает значения свойств стандартных реквизитов и пользовательских реквизитов (созданных в режиме конфигуратора)
//
// Параметры:
//  ОбъектМетаданных  - Объект метаданных конфигурации, для которого необходимо получить значение свойств реквизитов.
//                      Например: Метаданные.Документ.РеализацияТоваровИУслуг
//  Свойства - Строка - свойства реквизитов, перечисленных через запятую, значение которых необходимо получить.
//                      Например: "Имя, Тип, Синоним, Подсказка"
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений с описанием требуемых свойств всех реквизитов объекта метаданного
//
Функция ПолучитьТаблицуОписанияСвойствОбъекта(ОбъектМетаданных, Свойства) Экспорт
	
	МассивСвойств = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Свойства);
	
	// возвращаемое значение функции
	ТаблицаОписанияСвойствОбъекта = Новый ТаблицаЗначений;
	
	// добавляем в таблицу поля согласно именам переданных свойств
	Для Каждого ИмяСвойства ИЗ МассивСвойств Цикл
		
		ТаблицаОписанияСвойствОбъекта.Колонки.Добавить(СокрЛП(ИмяСвойства));
		
	КонецЦикла;
	
	// заполняем строку таблицы свойствами реквизитов объекта метаданных
	Для Каждого Реквизит ИЗ ОбъектМетаданных.Реквизиты Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаОписанияСвойствОбъекта.Добавить(), Реквизит);
		
	КонецЦикла;
	
	// заполняем строку таблицы свойствами стандартных реквизитов объекта метаданных
	Для Каждого Реквизит ИЗ ОбъектМетаданных.СтандартныеРеквизиты Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаОписанияСвойствОбъекта.Добавить(), Реквизит);
		
	КонецЦикла;
	
	Возврат ТаблицаОписанияСвойствОбъекта;
	
КонецФункции

// Процедура предназначена для заполнения реквизита формы типа «ДеревоЗначений»
//
// Параметры:
// КоллекцияЭлементовДерева – реквизит формы, который имеет тип «ДеревоЗначений»;
// 							  реквизит заполняется значениями из второго параметра процедуры.
// ДеревоЗначений           – ДеревоЗначений – параметр содержит данные для заполнения.
// 
Процедура ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(КоллекцияЭлементовДерева, ДеревоЗначений) Экспорт
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		ЭлементДерева = КоллекцияЭлементовДерева.Добавить();
		
		ЗаполнитьЗначенияСвойств(ЭлементДерева, Строка);
		
		Если Строка.Строки.Количество() > 0 Тогда
			
			ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ЭлементДерева.ПолучитьЭлементы(), Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие табличной части у документа
//
//Параметры
//  ИмяДокумента      - Строка - имя документа, для которого осуществляется проверка.
//  ИмяТабличнойЧасти - Строка - имя табличной части, наличие которой проверяется.
//
//Возвращаемое значение:
//  Булево   - Истина, если табличная часть есть, ложь в обратном случае
//
Функция НаличиеТабличнойЧастиУДокумента(ИмяДокумента, ИмяТабличнойЧасти) Экспорт
	
	Возврат (Метаданные.Документы[ИмяДокумента].ТабличныеЧасти.Найти(ИмяТабличнойЧасти) <> Неопределено);
	
КонецФункции 

Функция СравнитьТипСсылкиДокумента(Ссылка, ИмяДокумента) Экспорт
	
	Если Метаданные.Документы.Найти(ИмяДокумента) = Неопределено Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	Возврат ТипЗнч(Ссылка) = Тип("ДокументСсылка." + ИмяДокумента);
	
КонецФункции

// Переадресация вызова функции ПолучитьЗначениеПеременной
//
Функция ПолучитьЗначениеПеременной(ИмяПараметра, Кэш = Неопределено, КэшИзменен = Ложь) Экспорт
	
	Возврат РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной(ИмяПараметра)
	
КонецФункции
// Получение представления для документа, удостоверяющего личность
//
// Параметры
//  ДанныеФизЛица  – Коллекция данных физ. лица (структура, строка таблицы, ...), содержащая значения: 
//                   ДокументВид, ДокументСерия, ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан  
//
// Возвращаемое значение:
//   Строка   – Представление документа, удостоверяющего личность
//
Функция ПолучитьПредставлениеДокументаФизЛица(ДанныеФизЛица)

	Возврат Строка(ДанныеФизЛица.ДокументВид) + " серия " +
			ДанныеФизЛица.ДокументСерия       + ", номер " +
			ДанныеФизЛица.ДокументНомер       + ", выданный " +
			Формат(ДанныеФизЛица.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
			ДанныеФизЛица.ДокументКемВыдан;

КонецФункции // ПолучитьПредставлениеДокументаФизЛица()

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	Если Не ЗначениеЗаполнено(Фамилия) И Не ЗначениеЗаполнено(Имя) Тогда 
		
		ФИО = ФамилияИмяОтчествоФизЛица(Объект);
		
		Фамилия = ФИО.Фамилия;
		Имя		= ФИО.Имя;
		Отчество= ФИО.Отчество;
		
	КонецЕсли;	
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");

КонецФункции

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ИнициалыФизЛицаФамилия(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	Если НЕ ЗначениеЗаполнено("" + Фамилия + Имя + Отчество) Тогда
		
		ФИО = ФамилияИмяОтчествоФизЛица(Объект);
		
		Фамилия = ФИО.Фамилия;
		Имя		= ФИО.Имя;
		Отчество= ФИО.Отчество;

	КонецЕсли;

	Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				"" + ?(НЕ ПустаяСтрока(Имя),Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), "") + " " + Фамилия,
				"");

КонецФункции

Функция ФамилияИмяОтчествоФизЛица(Объект)
	
	ТипОбъекта = ТипЗнч(Объект);
	
	ФИО = Новый Массив;
	
	Если ТипОбъекта <> Тип("Неопределено") Тогда
	
		СписокТиповСсылок	= ОбщегоНазначенияПереопределяемый.ВернутьСписокТиповСсылокДляФормированияФИО();
		СписокТиповОбъектов	= ОбщегоНазначенияПереопределяемый.ВернутьСписокТиповОбъектовДляФормированияФИО();

		Если ТипОбъекта = Тип("Строка") Тогда
		
			ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
			
		ИначеЕсли СписокТиповСсылок.СодержитТип(ТипОбъекта) Или СписокТиповОбъектов.СодержитТип(ТипОбъекта) Тогда
		
			Если ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") или 
				ТипОбъекта = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Наименование");
			Иначе
				Наименование = Объект.Наименование;
			КонецЕсли;
		
			// Избавление от возможных выражений в скобках, например (осн.), (вн. совм.).
			НачальнаяПозиция	= Найти(Наименование,"(");
			КонечнаяПозиция		= Найти(Наименование,")");
			ДлинаСтроки			= СтрДлина(Наименование);
			Если НачальнаяПозиция > 0 Тогда
				СтрокаДляОбработки = Лев(Наименование, НачальнаяПозиция - 1) + ?(КонечнаяПозиция > 0,Прав(Наименование, ДлинаСтроки - КонечнаяПозиция),"")
			Иначе
				СтрокаДляОбработки = Наименование;
			КонецЕсли; 
			
			ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(СтрокаДляОбработки)," ");
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоПодстрок = ФИО.Количество();
	
	Результат = Новый Структура;
	
	Результат.Вставить("Фамилия",	?(КоличествоПодстрок > 0,ФИО[0],""));
	Результат.Вставить("Имя",		?(КоличествоПодстрок > 1,ФИО[1],""));
	Результат.Вставить("Отчество",	?(КоличествоПодстрок > 2,ФИО[2],""));
	
	Возврат Результат
	
КонецФункции

// Функция формирует фамилию и инициалы работника в заданном падеже 
// по переданным данным о работнике.
//  либо по переданным строкам.
//
// Параметры
//  Работник	- строка (Фамилия + Имя + Отчество, разделенными пробелами) 
//                или ссылка на элемент справочника ФизическиеЛица или Сотрудники.
//  Падеж (необязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
//  Пол (необязательный), тип ПеречислениеСсылка.ПолФизическихЛиц
//   Данный параметр предназначен для разрешения возможных неоднозначностей
//   В остальных случаях рекомендуется опускать этот параметр.
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой.
//
Функция ПредставлениеРаботника(Работник, Знач Падеж = 1, Знач Пол = Неопределено) Экспорт

	ТипДанных = ТипЗнч(Работник);
	Если ТипДанных = Тип("Строка") Тогда
		РаботникФИО = Работник;
		РаботникПол = Пол;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Работник", Работник);
		Если ТипДанных = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Наименование,
			|	СотрудникиОрганизаций.Физлицо.Пол КАК Пол
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Работник";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФизическиеЛица.Наименование,
			|	ФизическиеЛица.Пол
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Ссылка = &Работник";
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РаботникФИО = Выборка.Наименование;
			РаботникПол = Выборка.Пол;
		Иначе
			Возврат ""
		КонецЕсли;
	КонецЕсли;
	
	ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(РаботникФИО);
	
	ПозицияПервогоПробела = Найти(ФИО + " "," ");
	Фамилия  = Лев(ФИО,ПозицияПервогоПробела-1);
	Инициалы = Сред(ФИО,ПозицияПервогоПробела+1);
	
	РезультатСклонения = "";
	Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Фамилия, Падеж, РаботникПол, РезультатСклонения) Тогда
		ФИО = РезультатСклонения + " " + Инициалы;	
	КонецЕсли;
	
	Возврат ФИО
	
КонецФункции

// Функция возвращает совокупность данных о физическом лице в виде структуры, 
// В совокупность данных входит ФИО, должность в заданной организации, 
// паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                 по которому возвращается совокупность данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы, если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 - Фамилия
//                 - Имя
//                 - Отчетсво
//                 - Представление (Фамилия И.О.)
//                 - Подразделение
//                 - ДокументВид
//                 - ДокументСерия
//                 - ДокументНомер
//                 - ДокументДатаВыдачи
//                 - ДокументКемВыдан
//                 - ДокументКодПодразделения
//
Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) Экспорт
	
	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо
	|ПОМЕСТИТЬ ФизЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаСреза
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаСреза
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность
	|	КОНЕЦ КАК Должность
	|ПОМЕСТИТЬ СведенияПоРаботникамОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ДатаСреза,
	|			Сотрудник.ФизЛицо = &ФизЛицо
	|				И Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	СведенияПоРаботникамОрганизации.ТабельныйНомер,
	|	СведенияПоРаботникамОрганизации.Должность,
	|	СведенияПоРаботникамОрганизации.ПодразделениеОрганизации,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения
	|ИЗ
	|	ФизЛица КАК ФизЛица
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО 
	|			ФизЛица.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО 
	|			ФизЛица.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			СведенияПоРаботникамОрганизации КАК СведенияПоРаботникамОрганизации
	|		ПО 
	|			ФизЛица.ФизЛицо = СведенияПоРаботникамОрганизации.ФизЛицо";
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Данные.Следующий();
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
								|ТабельныйНомер, Должность, ПодразделениеОрганизации, 
								|ДокументВид, ДокументСерия, ДокументНомер,  
								|ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, 
								|ПредставлениеДокумента");

	ЗаполнитьЗначенияСвойств(Результат, Данные);
	
	//АБС ВСТАВКА
	Если НЕ ЗначениеЗаполнено(Данные.Должность) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	СотрудникиОрганизаций.ТекущаяДолжностьОрганизации КАК Должность
		               |ИЗ
		               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		               |ГДЕ
		               |	СотрудникиОрганизаций.Физлицо = &Физлицо
		               |	И СотрудникиОрганизаций.абс_СтатусСотрудника = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыСотрудников.Работает)
					   |	И СотрудникиОрганизаций.ТекущееОбособленноеПодразделение = &Организация
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	СотрудникиОрганизаций.Ссылка УБЫВ";
		Запрос.УстановитьПараметр("Физлицо",ФизЛицо);
		Запрос.УстановитьПараметр("Организация",Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() тогда
			Результат.Должность = Выборка.Должность;
		КонецЕсли;
	КонецЕсли;
	//АБС ВСТАВКА  КОНЕЦ 

	Результат.Представление          = ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество, ФИОКратко);
	Результат.ПредставлениеДокумента = ПолучитьПредставлениеДокументаФизЛица(Данные);
	
	Возврат Результат;
	
КонецФункции // ДанныеФизЛица

// Функция возвращает совокупность данных о физических лицах в виде таблицы
// значений. В совокупность данных входит ФИО, должность в заданной 
// организации, паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника(ов)
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица или Массив - физическое лицо
//                 или список физ. лиц, по которым возвращается совокупность 
//                 данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с совокупностью данных о физическом лице. 
//                  Колонки: возвращаемой таблицы:
//                  - Фамилия
//                  - Имя
//                  - Отчетсво
//                  - Представление (Фамилия И.О.)
//                  - Подразделение
//                  - ДокументВид
//                  - ДокументСерия
//                  - ДокументНомер
//                  - ДокументДатаВыдачи
//                  - ДокументКемВыдан
//                  - ДокументКодПодразделения
//
Функция ДанныеФизЛиц(Организация, ФизЛицо, ДатаСреза) Экспорт

	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо
	|ПОМЕСТИТЬ ФизЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&ФизЛицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаСреза
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаСреза
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность
	|	КОНЕЦ КАК Должность
	|ПОМЕСТИТЬ СведенияПоРаботникамОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ДатаСреза,
	|			Сотрудник.ФизЛицо В (&ФизЛицо)
	|				И Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//АБС ВСТАВКА   15.10.2014 15:32:07  Шамов
	|	ФизЛица.ФизЛицо КАК ФизЛицо,
	//АБС ВСТАВКА  КОНЕЦ 
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	СведенияПоРаботникамОрганизации.ТабельныйНомер,
	|	СведенияПоРаботникамОрганизации.Должность,
	|	СведенияПоРаботникамОрганизации.ПодразделениеОрганизации,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения
	|ИЗ
	|	ФизЛица КАК ФизЛица
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо В (&ФизЛицо)) КАК ФИОФизЛицСрезПоследних
	|		ПО 
	|			ФизЛица.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо В (&ФизЛицо)) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО 
	|			ФизЛица.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			СведенияПоРаботникамОрганизации КАК СведенияПоРаботникамОрганизации
	|		ПО 
	|			ФизЛица.ФизЛицо = СведенияПоРаботникамОрганизации.ФизЛицо";
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	
	ТабРезультат = Новый ТаблицаЗначений();
	ТабРезультат.Колонки.Добавить("Фамилия");
	ТабРезультат.Колонки.Добавить("Имя");
	ТабРезультат.Колонки.Добавить("Отчество");
	ТабРезультат.Колонки.Добавить("Представление");
	ТабРезультат.Колонки.Добавить("ТабельныйНомер");
	ТабРезультат.Колонки.Добавить("Должность");
	ТабРезультат.Колонки.Добавить("ПодразделениеОрганизации");
	ТабРезультат.Колонки.Добавить("ДокументВид");
	ТабРезультат.Колонки.Добавить("ДокументСерия");
	ТабРезультат.Колонки.Добавить("ДокументНомер");
	ТабРезультат.Колонки.Добавить("ДокументДатаВыдачи");
	ТабРезультат.Колонки.Добавить("ДокументКемВыдан");
	ТабРезультат.Колонки.Добавить("ДокументКодПодразделения");
	ТабРезультат.Колонки.Добавить("ПредставлениеДокумента");
								
	Пока Данные.Следующий() Цикл
		
		Результат = ТабРезультат.Добавить();
		
		ЗаполнитьЗначенияСвойств(Результат, Данные);
		//АБС ВСТАВКА
		Если НЕ ЗначениеЗаполнено(Данные.Должность) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	СотрудникиОрганизаций.ТекущаяДолжностьОрганизации КАК Должность
			               |ИЗ
			               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			               |ГДЕ
			               |	СотрудникиОрганизаций.Физлицо = &Физлицо
			               |	И СотрудникиОрганизаций.абс_СтатусСотрудника = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыСотрудников.Работает)
						   |	И СотрудникиОрганизаций.ТекущееОбособленноеПодразделение = &Организация
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	СотрудникиОрганизаций.Ссылка УБЫВ";
			Запрос.УстановитьПараметр("Физлицо",Данные.ФизЛицо);
			Запрос.УстановитьПараметр("Организация",Организация);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() тогда
				Результат.Должность = Выборка.Должность;
			КонецЕсли;
		КонецЕсли;
		//АБС ВСТАВКА  КОНЕЦ 

		Результат.Представление          = ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество);
		Результат.ПредставлениеДокумента = ПолучитьПредставлениеДокументаФизЛица(Данные);
		
	КонецЦикла;

	Возврат ТабРезультат;
	
КонецФункции // ДанныеФизЛиц

// Функция формирует фамилию и инициалы
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт

	Если ФИОКратко Тогда
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
				?(НЕ ПустаяСтрока(Отчество) , 
				Лев(Отчество,1)+".", ""), ""), "");
	Иначе
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Имя + 
				?(НЕ ПустаяСтрока(Отчество) , " " + Отчество, ""), ""), "");
	КонецЕсли;

КонецФункции // ПолучитьФамилиюИмяОтчество()

Функция ПолучитьМассивПрефиксовРИБ()
// {{KM WARE Семенов И.С. Заявка № 18.07.2015 начало
// Ускорение
	возврат kwr_ОбщиеСерверКлиентПовтИсп.ПолучитьМассивПрефиксовРИБ();
// }}KM WARE Семенов И.С. Заявка № 18.07.2015 окончание	
	МассивПрефиксов = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ПрефиксыИнформационныхБаз.Префикс КАК Префикс
	               |ИЗ
	               |	РегистрСведений.ПрефиксыИнформационныхБаз КАК ПрефиксыИнформационныхБаз";
	
	ВыборкаУзлов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		
		Если Не ПустаяСтрока(ВыборкаУзлов.Префикс) Тогда
			
			МассивПрефиксов.Добавить(ВыборкаУзлов.Префикс);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат МассивПрефиксов;
	
КонецФункции

Функция СформироватьМассивПрефиксовДляРИБИОрганизации(Организация) Экспорт
	
	МассивПрефиксов = ПолучитьМассивПрефиксовРИБ();	
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Префикс = СокрЛП(Организация.Префикс);
		
		Если Префикс <> "" Тогда
			МассивПрефиксов.Добавить(Префикс);
		КонецЕсли;
		
	КонецЕсли;
	
	//АБС ВСТАВКА 46015  24.09.2014 13:57:58  Шамов
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Префикс = СокрЛП(Организация.абс_КодРегиона);
		
		Если Префикс <> "" Тогда
			МассивПрефиксов.Добавить("/" + Префикс + "/");
		КонецЕсли;
		
	КонецЕсли;
	//АБС ВСТАВКА 46015 КОНЕЦ
	
	Если МассивПрефиксов.Количество() = 0 Тогда
		МассивПрефиксов.Добавить("");
	КонецЕсли;
	
	Возврат МассивПрефиксов;
	
КонецФункции

// Заполнение отбора значениями из таблицы значений.
// Соответствие полей устанавливается по представлению и типам значений
//
// Параметры
//  Отбор  – Отбор           – Отбор, который требуется заполнить значениями
//  ТЗ     – ТаблицаЗначений – Таблица содержит значения для отбора.
//                             Структура колонок повторяет структуру отбора
//
Процедура ЗаполнитьОтборПоТаблицеЗначений(Отбор, ТЗ) Экспорт

	Для каждого ЭлементОтбора Из ТЗ Цикл
	
		СтрокаТаблицы = Неопределено;
		
		Для каждого стр Из Отбор Цикл
			
			Если стр.Представление = ЭлементОтбора.Представление
				И стр.ТипЗначения = ЭлементОтбора.ТипЗначения Тогда
				Если ПустаяСтрока(стр.Представление)
					И ПустаяСтрока(стр.ПутьКданным) Тогда
					
					Продолжить;
					
				КонецЕсли;
				СтрокаТаблицы = стр;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(ЭлементОтбора.ПутьКданным) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			СтрокаТаблицы = Отбор.Добавить(ЭлементОтбора.ПутьКданным, ЭлементОтбора.Имя, ЭлементОтбора.Представление);		
					
		КонецЕсли;
		
		СтрокаТаблицы.ВидСравнения = ЭлементОтбора.ВидСравнения;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭлементОтбора, "Значение, ЗначениеПо, ЗначениеС, Использование");
			
	КонецЦикла;

КонецПроцедуры // УстановитьОтборИзТаблицы(Отбор, ТЗ)

// Функция выделяет первое слово в предложении
Функция ВыделитьСлово(ИсходнаяСтрока) Экспорт
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

// Функция преобразует строку к множественному числу
//
// Параметры: 
//  Слово1 - форма слова в ед числе      ("шкаф")
//  Слово2 - форма слова для числит 2-4  ("шкафа")
//  Слово3 - форма слова для числит 5-10 ("шкафов")
//  ЦелоеЧисло - целое число
//
// Возвращаемое значение:
//  строку - одну из строк в зависимости от параметра ЦелоеЧисло
//
// Описание:
//  Предназначена для формирования "правильной" подписи к числительным
//
Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, Знач ЦелоеЧисло) Экспорт
	
	// Изменим знак целого числа, иначе отрицательные числа будут неправильно преобразовываться
	Если ЦелоеЧисло < 0 Тогда
		ЦелоеЧисло = -1 * ЦелоеЧисло;
	КонецЕсли;
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции

// Процедура вычисляет количество лет, месяцев и дней между двумя датами
//
// Параметры
//  Дата1	– дата, первая дата (более поздняя, часто текущая, стаж определяется по состоянию на эту дату)
//  Дата2	– дата, вторая дата (ранняя дата, с нее начинается "течение" стажа)
//  Лет		– Число, в этот параметр будет записано кол-во лет между двумя датами (Дата1-Дата2)
//  Месяцев	– Число, в этот параметр будет записано кол-во месяцев между двумя датами (Дата1-Дата2)
//  Дней	– Число, в этот параметр будет записано кол-во дней между двумя датами (Дата1-Дата2)
//
Процедура РазобратьРазностьДат(Дата1, Дата2, Лет = 0, Месяцев = 0, Дней = 0) Экспорт
	
	Лет		= 0;
	Месяцев	= 0;
	Дней	= 0;
	Если Дата1 > Дата2 Тогда
		
		ВременнаяДата = Дата1;
		Если День(ВременнаяДата) < День(Дата2) Тогда
			Дней = (ВременнаяДата - ДобавитьМесяц(ВременнаяДата,-1))/86400;
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата,-1);
		КонецЕсли;
		Если Месяц(ВременнаяДата) < Месяц(Дата2) Тогда
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата,-12);
			Месяцев = 12;
		КонецЕсли;
		Лет		= Макс(			 Год(ВременнаяДата)		- Год(Дата2),	0);
		Месяцев	= Макс(Месяцев	+ Месяц(ВременнаяДата)	- Месяц(Дата2),	0);
		Дней	= Макс(Дней		+ День(ВременнаяДата)	- День(Дата2),	0);
		
		// скорректируем отображаемое значение, если "вмешалось" разное количество дней в месяцах
		Если Дата2 <> (ДобавитьМесяц(Дата1,-Лет*12-Месяцев)-Дней*86400) Тогда
			Дней = Дней + ((ДобавитьМесяц(Дата1,-Лет*12-Месяцев)-Дней*86400) - Дата2)/86400;
			//(День(КонецМесяца(Дата2)) - День(НачалоМесяца(Дата2))) - (День(КонецМесяца(ДобавитьМесяц(Дата1,-1))) - День(НачалоМесяца(ДобавитьМесяц(Дата1,-1))));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	// РазобратьРазностьДат

// Функция определяет дату и время начала календарной декады для указанной даты.
//
// Параметры:
//  ТекущаяДата - Исходная дата.
//
// Возвращаемое значение:
//  Дата.
//
Функция ПолучитьНачалоДекады(ИсходнаяДата) Экспорт

	ДеньМесяца = День(ИсходнаяДата);

	Если ДеньМесяца <= 10 Тогда
		Результат = НачалоМесяца(ИсходнаяДата);
	ИначеЕсли ДеньМесяца <= 20 Тогда
		Результат = НачалоМесяца(ИсходнаяДата) + 60 * 60 * 24 * 10;
	Иначе
		Результат = НачалоМесяца(ИсходнаяДата) + 60 * 60 * 24 * 20;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьНачалоДекады()

// Функция определяет дату и время конца календарной декады для указанной даты.
//
// Параметры:
//  ТекущаяДата - Исходная дата.
//
// Возвращаемое значение:
//  Дата.
//
Функция ПолучитьКонецДекады(ИсходнаяДата) Экспорт

	ДеньМесяца = День(ИсходнаяДата);

	Если ДеньМесяца <= 10 Тогда
		Результат = КонецДня(НачалоМесяца(ИсходнаяДата) + 60 * 60 * 24 * 9);
	ИначеЕсли ДеньМесяца <= 20 Тогда
		Результат = КонецДня(НачалоМесяца(ИсходнаяДата) + 60 * 60 * 24 * 19);
	Иначе
		Результат = КонецМесяца(ИсходнаяДата);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьКонецДекады()

// Функция определяет дату и время начала полугодия для указанной даты.
//
// Параметры:
//  ТекущаяДата - Исходная дата.
//
// Возвращаемое значение:
//  Дата.
//
Функция ПолучитьНачалоПолугодия(ИсходнаяДата) Экспорт

	Если Месяц(ИсходнаяДата) < 7 Тогда
		Результат = НачалоГода(ИсходнаяДата);
	Иначе
		Результат = ДобавитьМесяц(НачалоГода(ИсходнаяДата), 6);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьНачалоПолугодия()

// Функция определяет дату и время конца полугодия для указанной даты.
//
// Параметры:
//  ТекущаяДата - Исходная дата.
//
// Возвращаемое значение:
//  Дата.
//
Функция ПолучитьКонецПолугодия(ИсходнаяДата) Экспорт

	Если Месяц(ИсходнаяДата) < 7 Тогда
		Результат = ДобавитьМесяц(КонецГода(ИсходнаяДата), -6);
	Иначе
		Результат = КонецГода(ИсходнаяДата);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьКонецПолугодия()

// функция из исходной строки формирует строку для поиска данных в запросе
Функция СформироватьСтрокуДляПоискаВЗапросе(Знач СтрокаПоиска) Экспорт
	
	ИтоговаяСтрокаДляПоиска = СтрокаПоиска;
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "~", "~~");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "%", "~%");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "_", "~_");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "[", "~[");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "-", "~-");

	Возврат ИтоговаяСтрокаДляПоиска;
	
КонецФункции

// Функция формирует представление заголовка документа
//
// Возвращаемое значение:
//  Строка - представление номера документа
//
Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "") Экспорт

	Если ДокументОбъект = Неопределено Тогда
		Возврат "";
	Иначе
			Возврат ?(НЕ ЗначениеЗаполнено(НазваниеДокумента), ДокументОбъект.Метаданные().Синоним, НазваниеДокумента ) + " № " + ПолучитьНомерНаПечать(ДокументОбъект)
	                          + " от " + Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'");
	КонецЕсли;

КонецФункции // СформироватьЗаголовокДокумента()

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, "L=ru_RU", Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

// Функция определяет наличие клиентских подключений к базе других пользователей
Функция ЕстьДругиеПользователиВБазе() Экспорт
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	НомерТекущегоСоединения = НомерСоединенияИнформационнойБазы();
	
	Для каждого Соединение ИЗ МассивСоединений Цикл		
		Если Соединение.ИмяПриложения <> "Designer" 
			И Соединение.НомерСоединения <> НомерТекущегоСоединения Тогда			
			Возврат Истина;						
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Функция собирает паспортные данные физ. лица на указанную дату
//
// Параметры: 
//  ФизЛицо.    - физ. лицо, для которго необходимо получить паспортные данные
//  ДатаПериода - дата получения сведений
//
// Возвращаемое значение:
//  Структура с паспортными данными.
//
Функция ПаспортныеДанные(ФизЛицо, ДатаПериода) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарФизЛицо",     ФизЛицо);
	Запрос.УстановитьПараметр("ПарДатаПериода", ДатаПериода);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументВид        КАК Вид,
	|	ДокументСерия      КАК Серия,
	|	ДокументНомер      КАК Номер,
	|	ДокументДатаВыдачи КАК ДатаВыдачи,
	|	ДокументКемВыдан   КАК Выдан
	|ИЗ
	|	РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ПарДатаПериода, ФизЛицо = &ПарФизЛицо)
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Результат = Новый Структура("Вид, Серия, Номер, ДатаВыдачи, Выдан");

	Результат.Вид        = Шапка.Вид;
	Результат.Серия      = Шапка.Серия;
	Результат.Номер      = Шапка.Номер;
	Результат.ДатаВыдачи = Шапка.ДатаВыдачи;
	Результат.Выдан      = Шапка.Выдан;

	Возврат Результат;

КонецФункции // ПаспортныеДанные()

// Получает параметр учетной политики (налоговый учет) для заданной организации на заданную дату
//
// Параметры:
//	ИмяПараметра        - строка, имя запрашиваемого параметра учетной политики,
//	Организация         - ссылка на элемент справочника "Организации", для которого надо получить параметры,
//	Дата                - дата, на которую надо получить параметры, если не заполнено, то берется рабочая дата,
//	СтруктураПараметров - структура, содержащая все параметры учетной политики.
//
// Возвращаемое значение:
//	Значение учетной политики
//
Функция ВыгрузитьСтруктуруВСтроку(Структура,ПоЗначениям=Ложь,СтруктураПроверки = Неопределено) Экспорт
	
	НеПроверять = (СтруктураПроверки=Неопределено);
	
	НоваяСтрока = "";
	Для каждого Колонка из Структура Цикл
		Если НеПроверять тогда
			НоваяСтрока = НоваяСтрока + ?(НЕ ЗначениеЗаполнено(Колонка.Значение)или не ПоЗначениям,Колонка.Ключ,Колонка.Значение)+",";
		ИначеЕсли СтруктураПроверки.Свойство(?(НЕ ЗначениеЗаполнено(Колонка.Значение) или не ПоЗначениям,Колонка.Ключ,Колонка.Значение)) тогда
			НоваяСтрока = НоваяСтрока + ?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)+",";
		Иначе
			//Нет в проверке!
			возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(НоваяСтрока) Тогда
		НоваяСтрока = Лев(НоваяСтрока,СтрДлина(НоваяСтрока)-1);
	КонецЕсли;
	Возврат НоваяСтрока;
КонецФункции

//Процедура для распределения записей из одной таблицы значений по базису (таблица значений или  набору записей)
//Источник 		: ТаблицаЗначений
//Базис 		: ТаблицаЗначений или НаборЗаписей
//Распределение : ключ - поля базиса, значение - поля источника
//Фильтр 		: ключ - поля базиса, значение - поля источника (если не укзан - по совпадающим колонкам)
//Игнорировать  : ключ - поля базиса, значение - поля источника
//Дополнить		: ключ - имя нового поля базиса, значение - значение для заполнения
Функция СформироватьКорректирующиеЗаписи(Источник,Базис,Распределение,Фильтр=неопределено,Игнорировать=Неопределено,Дополнить=Неопределено, НераспределенныеЗаписи_AsIs = ложь) Экспорт
	
	Если ТипЗнч(Базис) = Тип("ТаблицаЗначений") тогда
		Временный_Базис	   = Базис.Скопировать();
	иначе
		Временный_Базис	   = Базис.Выгрузить();
	Конецесли;
	
	КолонкиИсточника = Новый Структура();
	Для Каждого Колонка Из источник.Колонки Цикл
		КолонкиИсточника.Вставить(Колонка.Имя);
	КонецЦикла;
	КолонкиБазиса = Новый Структура();
	Для Каждого Колонка Из Временный_Базис.Колонки Цикл
		Если Не(НЕ ЗначениеЗаполнено(Колонка.Имя)) тогда
			КолонкиБазиса.Вставить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Игнорировать) тогда
		 Игнорировать = новый Структура();
	Иначе
		//Зачистим колонки источника и базиса на игнорируемые колонки
		Для Каждого Колонка Из Игнорировать Цикл
			Если КолонкиИсточника.Свойство(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)) тогда
				 КолонкиИсточника.Удалить(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение));
			Конецесли;
			Если КолонкиБазиса.Свойство(Колонка.Ключ) тогда
				 КолонкиБазиса.Удалить(Колонка.Ключ);
			Конецесли;
		КонецЦикла;
 	КонецЕсли;
	
	//Зачистим колонки источника на распределяемые колонки. Они учитываются отдельно.
	Для Каждого Колонка Из Распределение Цикл
		Если КолонкиИсточника.Свойство(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)) тогда
			 КолонкиИсточника.Удалить(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение));
		Иначе
			 Если Источник.Колонки.Найти(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение))=Неопределено тогда
				 //Не хватает колонок к распределению
				 //Но одну и ту же колонку можно распределить дважды
				 Возврат ложь;
			 КонецЕсли;
		Конецесли;
		Если КолонкиБазиса.Свойство(Колонка.Ключ) тогда
			 КолонкиБазиса.Удалить(Колонка.Ключ);
		Иначе
			  //Не хватает колонок базиса распределения
			 Возврат ложь;
		Конецесли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Дополнить) тогда
		//Проверим на отсутствие дополняемых колонок!
		Для Каждого Колонка Из Дополнить Цикл
			Если КолонкиБазиса.Свойство(Колонка.Ключ) тогда
				//Такая колонка уже есть, нельзя добавить новую
				Возврат Ложь;
			Конецесли;
		КонецЦикла;
 	КонецЕсли;
	
	//Если фильтр не задан - по всем совпадающим колонкам
	Если Фильтр=Неопределено тогда
		Фильтр = Новый Структура();
		Для каждого Колонка из КолонкиБазиса цикл
			Если КолонкиИсточника.Свойство(Колонка.Ключ)  и не(Игнорировать.Свойство(Колонка.Ключ)) тогда
				Фильтр.Вставить(Колонка.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Фильтр) тогда
		//Должно быть хоть одно объединяющее поле!
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Колонка Из Фильтр Цикл
		Если не КолонкиБазиса.Свойство(Колонка.Ключ) тогда
			  //Не хватает колонок базиса распределения
			 Возврат ложь;
		Конецесли;
	КонецЦикла;
	
	
	//Подготовить сворачивание для источника
	СтрокаСверткиИсточник = ВыгрузитьСтруктуруВСтроку(Фильтр,Истина,КолонкиИсточника);
	Если СтрокаСверткиИсточник = ложь Тогда
		//попытка фильтровать по полю, отсутствующему в источнике!
		Возврат ложь;
	КонецЕсли;
	КолонкиКРаспределениюИсточник = ВыгрузитьСтруктуруВСтроку(Распределение,Истина);
	Если КолонкиКРаспределениюИсточник = ложь Тогда
		//попытка распределить поле, отсутствующее в источнике!
		Возврат ложь;
	КонецЕсли;
	
	//Подготовить сворачивание для базиса
	СтрокаСверткиБазис = ВыгрузитьСтруктуруВСтроку(КолонкиБазиса,Ложь);
	Если СтрокаСверткиБазис = ложь Тогда
		//попытка фильтровать по полю, отсутствующему в базисе!
		Возврат ложь;
	КонецЕсли;
	КолонкиКРаспределениюБазис = ВыгрузитьСтруктуруВСтроку(Распределение,Ложь);
	Если КолонкиКРаспределениюБазис = ложь Тогда
		//попытка распределить поле, отсутствующее в базисе!
		Возврат ложь;
	КонецЕсли;
	
	Временный_Источник = Источник.Скопировать();
	
	Временный_Базис.Свернуть(СтрокаСверткиБазис,КолонкиКРаспределениюБазис);
	Временный_Источник.Свернуть(СтрокаСверткиИсточник,КолонкиКРаспределениюИсточник);
	
	НоваяТаблица = новый ТаблицаЗначений();
	Для каждого Колонка из Временный_Базис.Колонки Цикл
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Разрядность = Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность;
			РазрядностьДробнойЧасти = Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
			
			ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения,,,КвалификаторЧисла);
		Иначе
			ТипЗначения = Колонка.ТипЗначения;
		КонецЕсли;
		
		НоваяТаблица.Колонки.Добавить(Колонка.Имя, ТипЗначения,,10);
	КонецЦикла;
	
	ТаблицаБазисовРаспределения = Новый ТаблицаЗначений();
	Для каждого Колонка из Распределение Цикл
		ТаблицаБазисовРаспределения.Колонки.Добавить(Колонка.Ключ);
	КонецЦикла;
	
	Для каждого СтрокаИсточника из Временный_Источник цикл
		Отбор = новый структура();
		Для каждого Колонка из Фильтр цикл
			Отбор.Вставить(Колонка.Ключ,СтрокаИсточника[?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)]);
		КонецЦикла;
		СтрокиБазиса = Временный_Базис.НайтиСтроки(Отбор);
		Временный_Базис_СтрокаНераспределеннойЗаписи = Неопределено;
		Если СтрокиБазиса.Количество() = 0 и НераспределенныеЗаписи_AsIs Тогда
			Временный_Базис_СтрокаНераспределеннойЗаписи = Временный_Базис.Добавить();
			ЗаполнитьЗначенияСвойств(Временный_Базис_СтрокаНераспределеннойЗаписи, СтрокаИсточника);
			СтрокиБазиса.Добавить(Временный_Базис_СтрокаНераспределеннойЗаписи);
		КонецЕсли;		
			
		ТаблицаБазисовРаспределения.Очистить();
		Для каждого Строка из СтрокиБазиса Цикл
			СтрокаТБР = ТаблицаБазисовРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТБР, Строка);
		КонецЦикла;
		Для каждого Колонка из Распределение цикл
			РаспределяемаяСумма =  СтрокаИсточника[?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)];
			МассивДляРаспределения = ТаблицаБазисовРаспределения.ВыгрузитьКолонку(Колонка.Ключ);
			РазрядностьДробнойЧасти = Временный_Источник.Колонки[?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)].ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			МассивРезультата = РаспределитьПропорционально(РаспределяемаяСумма, МассивДляРаспределения,?(РазрядностьДробнойЧасти = 0, 3, РазрядностьДробнойЧасти));
			Если МассивРезультата = неопределено тогда
				ТаблицаБазисовРаспределения.ЗаполнитьЗначения(0,Колонка.Ключ);
			иначе
				ТаблицаБазисовРаспределения.ЗагрузитьКолонку(МассивРезультата,Колонка.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		СтрокаРезультата = 0;
		Для каждого Строка из СтрокиБазиса Цикл
			СтрокаНовая = НоваяТаблица.Добавить();
			СрокаРекультатаРаспределения = ТаблицаБазисовРаспределения[СтрокаРезультата];
			СтрокаРезультата = СтрокаРезультата +1;
			Для каждого Колонка из Временный_Базис.Колонки цикл
				Если Распределение.Свойство(Колонка.Имя) тогда
					СтрокаНовая[Колонка.Имя] = СрокаРекультатаРаспределения[Колонка.Имя];
				Иначе
					СтрокаНовая[Колонка.Имя] = Строка[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если не Временный_Базис_СтрокаНераспределеннойЗаписи = Неопределено Тогда
		    Временный_Базис.удалить(Временный_Базис_СтрокаНераспределеннойЗаписи);
		КонецЕсли; 
	КонецЦикла;
	Если ЗначениеЗаполнено(Дополнить) тогда
		Для каждого Колонка из Дополнить Цикл
			НоваяТаблица.Колонки.Добавить(Колонка.Ключ,,,10);
			НоваяТаблица.ЗаполнитьЗначения(Колонка.Значение,Колонка.Ключ);
		КонецЦикла;
	КонецЕсли;
	СтрокиС0Распределением = Новый Массив();
	Для каждого Строка из НоваяТаблица цикл
		СуммаРаспределений0=Истина;
		Для каждого Колонка из распределение цикл
			Если ЗначениеЗаполнено(Строка[Колонка.Ключ]) тогда
				СуммаРаспределений0=Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СуммаРаспределений0 тогда
			СтрокиС0Распределением.Добавить(Строка);
		Конецесли;
	КонецЦикла;
	Для каждого ПустаяСтрока из СтрокиС0Распределением Цикл 
		НоваяТаблица.Удалить(ПустаяСтрока);
	КонецЦикла;
	//Если ЗначениеЗаполнено(ИсключитьПослеРаспределения) тогда
	//	КолонкиРезультата = Новый Структура();
	//	Для каждого Колонка из НоваяТаблица.Колонки Цикл
	//		Если ИсключитьПослеРаспределения.Свойство(Колонка.Имя) = Истина  или Распределение.Свойство(Колонка.Имя) = Истина Тогда
	//			Продолжить;
	//		Иначе
	//			КолонкиРезультата.Вставить(Колонка.Имя);
	//		КонецЕсли;
	//	КонецЦикла;
	//	КолонкиКСворачиванию = ВыгрузитьСтруктуруВСтроку(КолонкиРезультата,Ложь);
	//	НоваяТаблица.Свернуть(КолонкиКСворачиванию,КолонкиКРаспределениюБазис);
	//КонецЕсли;
	
	Возврат НоваяТаблица;
КонецФункции

// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения
//
// Параметры:
//		ИсхСумма - распределяемая сумма
//		МассивКоэф - массив коэффициентов распределения
//		Точность - точность округления при распределении. Необязателен.
//
//	Возврат:
//		МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//			суммы в соответствии с весом коэффициента (из массива коэффициентов)
//          В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//          или суммарный вес коэф. = 0), тогда возвращается значение Неопределено
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2, ПроверкаНулевыхЗначений=Истина) Экспорт

	Если МассивКоэф.Количество() = 0 Или (ПроверкаНулевыхЗначений И ИсхСумма = 0) Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Массив коэффициентов необходимо упорядочить, поэтому создадим таблицу для распределения
    УпорядоченнаяТаблица = Новый ТаблицаЗначений;
	УпорядоченнаяТаблица.Колонки.Добавить("Коэф", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,4)));
	УпорядоченнаяТаблица.Колонки.Добавить("ИсходныйИндекс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	СуммаКоэф  = 0;

	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		СуммаКоэф = СуммаКоэф + МассивКоэф[К];
		
		СтрокаТаблицы = УпорядоченнаяТаблица.Добавить();
		СтрокаТаблицы.Коэф = МассивКоэф[К];
		СтрокаТаблицы.ИсходныйИндекс = К;
	КонецЦикла;
	
	Если СуммаКоэф = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УпорядоченнаяТаблица.Сортировать("Коэф Убыв");
	
	МассивСумм = Новый Массив(УпорядоченнаяТаблица.Количество());
	
	Для каждого СтрокаТаблицы Из УпорядоченнаяТаблица Цикл
		// Возвращаемый результат должен быть в том же порядке
		МассивСумм[СтрокаТаблицы.ИсходныйИндекс] = ?(СуммаКоэф <> 0, Окр(ИсхСумма * МассивКоэф[СтрокаТаблицы.ИсходныйИндекс] / СуммаКоэф, Точность, 1), 0);
		
		ИсхСумма = ИсхСумма - МассивСумм[СтрокаТаблицы.ИсходныйИндекс]; 
		СуммаКоэф = СуммаКоэф - МассивКоэф[СтрокаТаблицы.ИсходныйИндекс]; 
	КонецЦикла;

	Возврат МассивСумм;

КонецФункции

Функция ВыгрузитьСтрокиДереваВТаблицуЗначений(Источник,КоллекцияКолонокДереваЗначений) Экспорт

	Реквизиты = Новый Структура();
	Для каждого Колонка из КоллекцияКолонокДереваЗначений цикл
		Реквизиты.Вставить(Колонка.Имя);
	КонецЦикла;
	
	НоваяТЗ= Новый ТаблицаЗначений();
	
	Пока НоваяТЗ.Количество()<Источник.Количество() Цикл
		Строка = НоваяТЗ.Добавить();
	КонецЦикла;
	
	Для каждого ТекРеквизит из Реквизиты Цикл
		ИскомыйРеквизит = ТекРеквизит.Ключ;
		НовыйРеквизит 	= ?(ТекРеквизит.Значение = Неопределено,ТекРеквизит.Ключ,ТекРеквизит.Значение);
		ИсточникКолонка = КоллекцияКолонокДереваЗначений.Найти(ИскомыйРеквизит);
		НоваяТЗ.Колонки.Добавить(НовыйРеквизит, ИсточникКолонка.ТипЗначения);
		НоваяТЗ.ЗагрузитьКолонку(Источник.ВыгрузитьКолонку(ИскомыйРеквизит),НовыйРеквизит);
	КонецЦикла;
	
    Возврат НоваяТЗ;
КонецФункции // СформироватьТаблицуОплаты()

// Возвращает строку, описывающую период, определяемый переданными
// датой и периодичностью.
//
// Параметры
//  ДатаВПериоде:Дата - дата из периода
//  Периодичность: Строка - строка, определяющая периодичность
//
// Возвращаемое значение:
//   СтрокаПериод: строка   – представление периода для вывода в отчетах
//
Функция ПолучитьПериодСтрокой(ДатаВПериоде, Периодичность) Экспорт
	
	Если Периодичность = "Год" Тогда
		ФорматДаты = "ДФ='гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Квартал" Тогда
		ФорматДаты = "ДФ='к"" квартал"" гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Месяц" Тогда
		ФорматДаты = "ДФ='ММММ гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Неделя" Тогда
		ФорматДаты = "ДФ='""Неделя (""дд.ММ.гггг'";
		
	ИначеЕсли Периодичность = "День" Тогда
		ФорматДаты = "ДФ='дд.ММ.гггг ""г.""'";
		
	Иначе
		ФорматДаты = "";
		
	КонецЕсли;
	
	СтрокаПериод = "" + Формат(ДатаВПериоде, ФорматДаты);
	Если Периодичность = "Неделя" И ТипЗнч(ДатаВПериоде) = Тип("Дата") Тогда
		СтрокаПериод = "" + НеделяГода(ДатаВПериоде) + "-ая " + СтрокаПериод + Формат(КонецНедели(ДатаВПериоде), "ДФ='"" - ""дд.ММ.гггг)'");
	КонецЕсли;
	
	Возврат СтрокаПериод;
	
КонецФункции // ПолучитьПериодСтрокой()

// Процедура предназначена для получения момента определения остатков для заполнения документа.
//
// Параметры:
//  ДокОбъект - (ДокументОбъект), документ, для которого надо определить лату получения остатков.
//
// Возвращаемое значение.
//  Дата (момент времени) - дата остатков
//
Функция ПолучитьДатуОстатков(ДокОбъект) Экспорт
	
	ДатаОстатков = '00010101';
	Если НачалоДня(ДокОбъект.Дата) <> НачалоДня(ТекущаяДата()) 
	   И ДокОбъект.Дата <> '00010101' Тогда
	   
		Если НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
			ДатаОстатков = КонецДня(ДокОбъект.Дата);
		Иначе
			ДатаОстатков = ДокОбъект.МоментВремени();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДатаОстатков;
	
КонецФункции

Процедура ДобавитьПрефиксОрганизации(ДокументОбъект, Префикс) Экспорт
	
	Если ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.ПриходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда 
		Если ДокументОбъект.абс_СчетКассы = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.02") Тогда 
			Если ДокументОбъект.абс_КассаККМ.абс_ИспользоватьПрефикс Тогда 
				Префикс = СокрЛП(ДокументОбъект.Организация.Префикс)+СокрЛП(ДокументОбъект.абс_КассаККМ.абс_Префикс);
				Возврат;
			КонецЕсли;
		Иначе 
			Если ДокументОбъект.Касса.абс_ИспользоватьПрефикс Тогда 
				Префикс = СокрЛП(ДокументОбъект.Организация.Префикс)+ СокрЛП(ДокументОбъект.Касса.абс_Префикс);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;    	
 	
	// Если в документе нет реквизита "Организация" или для организации не задан префикс,
	// то используем пустой префикс, иначе используем префикс организации.
    Префикс = "0";
	
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
		ПрефиксОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Организация, "Префикс");
		Если ЗначениеЗаполнено(ПрефиксОрганизации) Тогда  			
			Префикс = ПрефиксОрганизации;
			
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.абс_ВидыДокументовДляНумерацииСКодомРегиона ГДЕ ВидДокумента = &ВидДокумента";
			Запрос.УстановитьПараметр("ВидДокумента", ДокументОбъект.Метаданные().Имя);
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда 
				ДатаНачалаНумерацииСКодамиРегионов = '00010101';
				НастройкиОрганизации = абс_НастройкиСистемы.ПолучитьНастройкиДляОрганизации(ДокументОбъект.Организация);			
				Если НастройкиОрганизации.Свойство("ДатаНачалаНумерацииСКодамиРегионов") Тогда					
					ДатаНачалаНумерацииСКодамиРегионов = НастройкиОрганизации.ДатаНачалаНумерацииСКодамиРегионов;
				Иначе
					НастройкиОрганизации = абс_НастройкиСистемы.ПолучитьНастройкиДляОрганизации(Справочники.Организации.ПустаяСсылка());
					Если НастройкиОрганизации.Свойство("ДатаНачалаНумерацииСКодамиРегионов") Тогда					
						ДатаНачалаНумерацииСКодамиРегионов = НастройкиОрганизации.ДатаНачалаНумерацииСКодамиРегионов;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДатаНачалаНумерацииСКодамиРегионов)
					И ДатаНачалаНумерацииСКодамиРегионов <= ДокументОбъект.Дата Тогда
					КодРегионаОрганизации = УбратьНечисловыеСимволы(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Организация, "абс_КодРегиона"));	
					Если ЗначениеЗаполнено(КодРегионаОрганизации) Тогда
						Префикс = Префикс + "/" + КодРегионаОрганизации + "/";	
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если глЗначениеПеременной("абс_ВклПостфиксВНомереДокументов") 
					и НЕ СписокЗначенийТиповДляКонтроля().НайтиПоЗначению(ТипЗнч(ДокументОбъект)) = Неопределено Тогда
				КодРегионаОрганизации = УбратьНечисловыеСимволы(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Организация, "абс_КодРегиона"));	
				Если ЗначениеЗаполнено(КодРегионаОрганизации) Тогда
					Префикс = Префикс + КодРегионаОрганизации;	
				КонецЕсли;	
			КонецЕсли;	
			
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(Тип("ДокументОбъект.СчетНаОплатуПокупателю"));
			СписокЗначений.Добавить(Тип("ДокументОбъект.РеализацияТоваровУслуг"));
			СписокЗначений.Добавить(Тип("ДокументОбъект.СчетФактураВыданный"));
			Если не СписокЗначений.НайтиПоЗначению(ТипЗнч(ДокументОбъект)) = Неопределено  Тогда 
				Префикс = Префикс + "0";
			КонецЕсли;
			
			Префикс = Префикс;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПрефиксУзла(Префикс) Экспорт
	
	// Префикс узла распределенной информационной базы добавляется к префиксу-параметру процедуры
	// если есть хоть один периферийный узел в любом из планов обмена:
	// Полный, ОбменУППУПП, ОбменУправлениеПредприятиемУправлениеТорговлей
	//
	// Установка значений параметров сеанса ИспользованиеРИБ, НаличиеОбменаУТУПП
	// выполняется в процедуре ПолныеПрава.ОпределитьФактИспользованияРИБ()
	Если ПараметрыСеанса.ИспользованиеРИБ
	 ИЛИ ПараметрыСеанса.НаличиеОбменаУТУПП Тогда
		Префикс = ПараметрыСеанса.ПрефиксУзлаРаспределеннойИнформационнойБазы + Префикс;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомераДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	ДобавитьПрефиксОрганизации(Источник, Префикс);
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

// Процедура предназначена для преобразования номера документа.
//
// Параметры:
//  Документ - (ДокументСсылка), документ, чей номер надо получить для печати.
//
// Возвращаемое значение.
//  Строка - номер документа для печати
//
Функция ПолучитьНомерНаПечать(Документ, МассивПрефиксов = Неопределено) Экспорт

	Если Документ = Неопределено Тогда 
		Возврат 0;
	КонецЕсли;

	Номер   = СокрЛП(Документ.Номер);
	Префикс = "";
	Если МассивПрефиксов = Неопределено Тогда
		
		Организация = Неопределено;
		
		Если ТипЗнч(Документ) = Тип("ВыборкаИзРезультатаЗапроса")
			ИЛИ ТипЗнч(Документ) = Тип("Структура") Тогда

			Организация = Документ.Организация;
			
		Иначе

			МетаданныеДокумента = Документ.Метаданные();

			Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда

				Организация = Документ.Организация;

			КонецЕсли;

		КонецЕсли;
		
		МассивПрефиксовДляОбхода = СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") ИЛИ ТипЗнч(Документ) = Тип("Структура") И Документ.Свойство("Грузополучатель") Тогда
			МассивПрефиксовДляОбхода.Добавить("B");
		КонецЕсли;
		//для счетов фактур по реализациям-УПД
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") ИЛИ ТипЗнч(Документ) = Тип("Структура") И Документ.Свойство("Грузополучатель") Тогда
			МассивПрефиксовДляОбхода.Добавить("У");
		КонецЕсли;
	Иначе
		
		МассивПрефиксовДляОбхода = МассивПрефиксов;
		
	КонецЕсли;
	
	Для Каждого ТекущийПрефикс ИЗ МассивПрефиксовДляОбхода Цикл
		
		// удаление префикса из номера документа
		Если Найти(Номер, ТекущийПрефикс)=1 Тогда 
			Номер = Сред(Номер, СтрДлина(ТекущийПрефикс)+1);
		КонецЕсли;
		
		// так же, может остаться "минус" впереди
		Если Лев(Номер, 1) = "-" Тогда
			Номер = Сред(Номер, 2);
		КонецЕсли;
		
		// удаление ведущих нулей
		Пока Лев(Номер, 1)="0" Цикл
			Номер = Сред(Номер, 2);
		КонецЦикла;
	КонецЦикла;
	
	Попытка
		ОрганизацияСсылка = Документ.Организация;
	Исключение
		ОрганизацияСсылка = Неопределено;
	КонецПопытки;
	Если ОрганизацияСсылка <> Неопределено Тогда
		//определение по типам
		мТипыНумерацииРегионов = Новый Массив;
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.РасходныйКассовыйОрдер"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.СчетФактураВыданный"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.РеализацияТоваровУслуг"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.Абс_АктПриёмкиВыполненныхРабот"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.Абс_АктПриёмкиВыполненныхРабот"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.абс_АВИЗО"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.абс_АВИЗО"));
		//определение по косвенным признакам
		бОбрабатыватьКод = ЛОЖЬ;
		Если 
			(ТипЗнч(Документ) = Тип("Структура") ИЛИ ТипЗнч(Документ) = Тип("ВыборкаИзРезультатаЗапроса"))
				Тогда
			УИД = Новый УникальныйИдентификатор;
			СтруктураПроверки = Новый Структура("Выдать, ПоДокументу, Получатель, Грузополучатель", УИД, УИД);
			ЗаполнитьЗначенияСвойств(СтруктураПроверки, Документ);
			бОбрабатыватьКод = (СтруктураПроверки.Грузополучатель <> УИД)
				ИЛИ (СтруктураПроверки.Получатель <> УИД)
				ИЛИ (СтруктураПроверки.Выдать <> УИД И СтруктураПроверки.ПоДокументу <> УИД);				
		КонецЕсли;
		
		Если мТипыНумерацииРегионов.Найти(ТипЗнч(Документ)) <> Неопределено
			ИЛИ бОбрабатыватьКод Тогда
			КодРегиона = ОрганизацияСсылка.абс_КодРегиона;
			//если назначен код региона
			//и он есть в начальном номере
			//и его нет в номере на печать
			Если ЗначениеЗаполнено(КодРегиона)
				И Найти(СокрЛП(Документ.Номер), "/" + СокрЛП(КодРегиона) + "/") <> 0 
				И Найти(Номер, СокрЛП(КодРегиона) + "/") = 0 
				Тогда
				//дополним нулями до 5 символов
				Пока СтрДлина(Номер) < 5 Цикл
					Номер = "0" + Номер;
				КонецЦикла;
				//добавим префикс региона
				Номер = СокрЛП(КодРегиона) + "/" + Номер;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Номер;

КонецФункции

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(ПустаяСтрока(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(ПустаяСтрока(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если Валюта <> Неопределено Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции

Функция УбратьНечисловыеСимволы(Стр) Экспорт
	ОбрСтр = СокрЛП(Стр);
	Результат = ОбрСтр;
	Для н=1 по СтрДлина(ОбрСтр) Цикл
		ТекСимвол = Сред(ОбрСтр,н,1);
		Если Найти("0123456789",ТекСимвол) = 0 Тогда
			Результат = СтрЗаменить(Результат,ТекСимвол,"");		
		КонецЕсли;	
	КонецЦикла;	 
	Возврат Результат;
КонецФункции
               
Функция СписокЗначенийТиповДляКонтроля() Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Тип("ДокументОбъект.СчетФактураВыданный"));
	СписокЗначений.Добавить(Тип("ДокументОбъект.СчетФактураПолученный"));
	
	Возврат СписокЗначений;
	
КонецФункции

// Перенесено из общего модуля "ОбщегоНазначения"
Процедура абс_ЗаполнитьОтветственногоПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Попытка
		
		Если Источник.Метаданные().Реквизиты.Найти("Ответственный") <> Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(Источник.Ответственный) Тогда
				Источник.Ответственный = глЗначениеПеременной("глТекущийПользователь");	
			КонецЕсли;			
			
		КонецЕсли;	
		
	Исключение
		//На всякий случай
	КонецПопытки;
	
КонецПроцедуры

Процедура абс_КонтрольИспользованияЦФУПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если не глЗначениеПеременной("абс_ВклКонтрольИспользованияЦФУ_ПоПериоду") или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументовИсключения = Новый СписокЗначений;
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ОперацияБух"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.КорректировкаЗаписейРегистров"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.КорректировкаПоступления"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.КорректировкаРеализации"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_ЗаявкаНаДобавлениеИзменениеПрав"));
	
	Если не СписокДокументовИсключения.НайтиПоЗначению(ТипЗнч(Источник)) = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ГодДокумента = НачалоГода(Источник.Дата);
	
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.kmw_УстановкаСоответствияАналитикБУиУУ")); //Сторчевой А.Н. 20.12.2016 7763192
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_ЛогЗагрузкиИзАСР")); //Овчинников А.В.
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ПлатежноеПоручениеВходящее"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ПриходныйКассовыйОрдер"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.РеализацияТоваровУслуг")); //Сторчевой А.Н. 18.01.2017 7766707
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ЗаказПокупателя"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.КорректировкаДолга"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ОтражениеРеализацииТоваровИУслугНДС"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ОтчетКомиссионераОПродажах"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ПереоценкаВалютныхСредств"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ПлатежноеТребованиеВыставленное"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.СчетНаОплатуПокупателю"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_РегистрацияЗаявкиНаРеализацию"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_РаспределяемыеДоходыРасходы"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.kmw_ЗагрузкаЛимитовИзHyperion"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ttk_УстановкаСоответствияНоменклатурыБюджетнымАналитикам"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ttk_ЗагрузкаНачисленийИзБиллинга"));
	
	ttk_ЕдиноеЦФУ = ПараметрыСеанса.ttk_ЕдиноеЦФУ;
	ПерехНаЕдиноеЦФУ = (ГодДокумента = '20170101' и ЗначениеЗаполнено(ttk_ЕдиноеЦФУ));
	
	Если ПерехНаЕдиноеЦФУ и СписокДокументовИсключения.НайтиПоЗначению(ТипЗнч(Источник)) = Неопределено Тогда //Сторчевой А.Н. 20.12.2016 7763192
		Для Каждого Реквизит Из Источник.Метаданные().Реквизиты Цикл  		
			РеквизитИсточника = Источник[Реквизит.Имя]; 		
			Если ТипЗнч(РеквизитИсточника) = Тип("СправочникСсылка.абс_ЦФУ") Тогда   			
				
				Если НЕ РеквизитИсточника = ttk_ЕдиноеЦФУ Тогда
					РеквизитИсточника = ttk_ЕдиноеЦФУ;
					Источник[Реквизит.Имя] = ttk_ЕдиноеЦФУ;
					ОбщегоНазначения.СообщитьИнформациюПользователю("ЦФУ изменено на единое для всех регионов: " + ttk_ЕдиноеЦФУ.Код + " " + ttk_ЕдиноеЦФУ);
				КонецЕсли;
				
				Использовать = Ложь;
				Для Каждого СтрокаТЧ Из РеквизитИсточника.абс_ПериодыИспользования Цикл
					Если СтрокаТЧ.Период = ГодДокумента и СтрокаТЧ.Использование Тогда
						Использовать = Истина;
					КонецЕсли;
				КонецЦикла;
				Если не Использовать Тогда
					Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.абс_СчетНаОплату") И Источник.СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ Тогда
						
					ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.абс_Оплата") И Источник.СтатусОплаты = Перечисления.абсСтатусыСчетов.Отказ Тогда
						
					Иначе
						СообщитьОбОшибке("ЦФУ «"+РеквизитИсточника +"», код ЦФУ «"+СокрЛП(РеквизитИсточника.Код)+"»", Отказ);
						СообщитьОбОшибке("Реквизит «" + Реквизит + "» не используется в " + Формат(Источник.Дата,"ДФ=yyyy") + " году", Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;  			
		КонецЦикла;
		
		Для Каждого ТабЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
			Для Каждого РеквизитТабЧасти Из ТабЧасть.Реквизиты Цикл
				Для Каждого Строка Из Источник[ТабЧасть.Имя] Цикл
					РеквизитТабЧастиИсточника = Строка[РеквизитТабЧасти.Имя];
					Если ТипЗнч(РеквизитТабЧастиИсточника) = Тип("СправочникСсылка.абс_ЦФУ") Тогда
						
						Если не РеквизитТабЧастиИсточника = ttk_ЕдиноеЦФУ Тогда
							РеквизитТабЧастиИсточника = ttk_ЕдиноеЦФУ;
							Строка[РеквизитТабЧасти.Имя] = ttk_ЕдиноеЦФУ;
							ОбщегоНазначения.СообщитьИнформациюПользователю("ЦФУ изменено на единое для всех регионов: " + ttk_ЕдиноеЦФУ.Код + " " + ttk_ЕдиноеЦФУ);
						КонецЕсли;
						
						Использовать = Ложь;
						Для Каждого СтрокаТЧ Из РеквизитТабЧастиИсточника.абс_ПериодыИспользования Цикл
							Если СтрокаТЧ.Период = ГодДокумента И СтрокаТЧ.Использование Тогда
								Использовать = Истина;
							КонецЕсли;
						КонецЦикла;
						Если НЕ Использовать Тогда
							СообщитьОбОшибке("ЦФУ «"+РеквизитТабЧастиИсточника +"», код ЦФУ «"+СокрЛП(РеквизитТабЧастиИсточника.Код)+"»", Отказ);
							СообщитьОбОшибке("Реквизит «" + РеквизитТабЧасти + "» в строке №" + 
							Строка.НомерСтроки + " табличной части «" + ТабЧасть + "» не используется в " + Формат(Источник.Дата,"ДФ=yyyy") + " году", Отказ);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		
		Для Каждого Реквизит Из Источник.Метаданные().Реквизиты Цикл  		
			РеквизитИсточника = Источник[Реквизит.Имя]; 		
			Если ТипЗнч(РеквизитИсточника) = Тип("СправочникСсылка.абс_ЦФУ") и не РеквизитИсточника.Пустая() Тогда   			
				Использовать = Ложь;
				Для Каждого СтрокаТЧ Из РеквизитИсточника.абс_ПериодыИспользования Цикл
					Если СтрокаТЧ.Период = ГодДокумента и СтрокаТЧ.Использование Тогда
						Использовать = Истина;
					КонецЕсли;
				КонецЦикла;
				Если не Использовать Тогда
					Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.абс_СчетНаОплату") И Источник.СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ Тогда
						
					ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.абс_Оплата") И Источник.СтатусОплаты = Перечисления.абсСтатусыСчетов.Отказ Тогда
						
					Иначе
						СообщитьОбОшибке("ЦФУ «"+РеквизитИсточника +"», код ЦФУ «"+СокрЛП(РеквизитИсточника.Код)+"»", Отказ);
						СообщитьОбОшибке("Реквизит «" + Реквизит + "» не используется в " + Формат(Источник.Дата,"ДФ=yyyy") + " году", Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;  			
		КонецЦикла;
		
		Для Каждого ТабЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
			Для Каждого РеквизитТабЧасти Из ТабЧасть.Реквизиты Цикл
				Для Каждого Строка Из Источник[ТабЧасть.Имя] Цикл
					РеквизитТабЧастиИсточника = Строка[РеквизитТабЧасти.Имя];
					Если ТипЗнч(РеквизитТабЧастиИсточника) = Тип("СправочникСсылка.абс_ЦФУ") и не РеквизитТабЧастиИсточника.Пустая() Тогда
						Использовать = Ложь;
						Для Каждого СтрокаТЧ Из РеквизитТабЧастиИсточника.абс_ПериодыИспользования Цикл
							Если СтрокаТЧ.Период = ГодДокумента И СтрокаТЧ.Использование Тогда
								Использовать = Истина;
							КонецЕсли;
						КонецЦикла;
						Если НЕ Использовать Тогда
							СообщитьОбОшибке("ЦФУ «"+РеквизитТабЧастиИсточника +"», код ЦФУ «"+СокрЛП(РеквизитТабЧастиИсточника.Код)+"»", Отказ);
							СообщитьОбОшибке("Реквизит «" + РеквизитТабЧасти + "» в строке №" + 
							Строка.НомерСтроки + " табличной части «" + ТабЧасть + "» не используется в " + Формат(Источник.Дата,"ДФ=yyyy") + " году", Отказ);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура абс_ОбработкаУдаленияПроведенияФилиализацияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ПараметрыСеанса.абс_НастройкиСистемы.ИспользоватьМеханизмФизиализации Тогда
		
		Если Источник.Движения.Найти("Хозрасчетный") <> Неопределено И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 	
			
			ДатаРеорганизации = Неопределено;
			ПроверкаНаДатуРеорганизацииНеТребуется = Ложь;
			
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") 
				ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") 
				ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") 
				ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") 
				ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПлатежныйОрдерПоступлениеДенежныхСредств") 
				ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПлатежныйОрдерСписаниеДенежныхСредств")  Тогда
				
				ПроверкаНаДатуРеорганизацииНеТребуется = Истина;
				
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НАЧАЛОПЕРИОДА(абс_ДатаРеорганизацииДЗО.ДатаРеорганизации, ДЕНЬ) КАК ДатаРеорганизации
			|ИЗ
			|	РегистрСведений.абс_ДатаРеорганизацииДЗО КАК абс_ДатаРеорганизацииДЗО
			|ГДЕ
			|	абс_ДатаРеорганизацииДЗО.Организация = &Организация";
			
			Запрос.УстановитьПараметр("Организация", Источник.Организация);
			Результат = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ДатаРеорганизации = ВыборкаДетальныеЗаписи.ДатаРеорганизации;	
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	абс_ЗакрытыеСчетаУчетаСрезПоследних.СчетУчета
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, , , , , ) КАК ХозрасчетныйОбороты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.абс_ЗакрытыеСчетаУчета.СрезПоследних(, ) КАК абс_ЗакрытыеСчетаУчетаСрезПоследних
			|		ПО (абс_ЗакрытыеСчетаУчетаСрезПоследних.СчетЗакрыт)
			|			И (абс_ЗакрытыеСчетаУчетаСрезПоследних.ДатаЗакрытия < &ТекущаяДата)
			|			И (абс_ЗакрытыеСчетаУчетаСрезПоследних.СчетУчета = ХозрасчетныйОбороты.Счет)
			|			И ХозрасчетныйОбороты.Организация = абс_ЗакрытыеСчетаУчетаСрезПоследних.Организация
			|ГДЕ
			|	ХозрасчетныйОбороты.Регистратор = &Регистратор";
			
			Запрос.УстановитьПараметр("ТекущаяДата", абс_СерверныеФункции.ПолучитьДатуСервера());
			Запрос.УстановитьПараметр("Регистратор", Источник.Ссылка);
			Результат = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				НеобходимаПроверка = Истина;
				Если ДатаРеорганизации <> Неопределено Тогда
					Если ДатаРеорганизации = НачалоДня(Источник.Дата) Тогда
						НеобходимаПроверка = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если НеобходимаПроверка Тогда
					ТекстСообщения = "Счет " + СокрЛП(ВыборкаДетальныеЗаписи.СчетУчета.Код) + " закрыт. Запрещается проведение, отмена проведения и установка пометки на удаление!";
					
					#Если Клиент Тогда
						Сообщить(ТекстСообщения);
					#КонецЕсли
					Отказ = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДатаРеорганизации <> Неопределено Тогда
				МассивДоступныхРолей = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя();
				Если (ДатаРеорганизации = НачалоДня(Источник.Дата)) И (НЕ ПроверкаНаДатуРеорганизацииНеТребуется)
					И (МассивДоступныхРолей.Найти(Справочники.РолиИсполнителей.ПроведениеОперацийДатойРеорганизации) = Неопределено)
					И (НЕ абс_Филиализация.ЭтоОперацияВГР(Источник)) Тогда
					ТекстСообщения = "В день реорганизации запрещается проведение, отмена проведения и установка пометки на удаление!";
					
					#Если Клиент Тогда
						Сообщить(ТекстСообщения);
					#КонецЕсли
					
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Источник.Проведен И (ТипЗнч(Источник) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее")) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ХозрасчетныйОбороты.СуммаОборот
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, Счет В (&Счет), , , , ) КАК ХозрасчетныйОбороты
			|ГДЕ
			|	ХозрасчетныйОбороты.Регистратор = &Регистратор";
			
			МассивСчетов = Новый Массив;
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
			
			Запрос.УстановитьПараметр("Регистратор", Источник.Ссылка);
			Запрос.УстановитьПараметр("Счет", МассивСчетов);
			
			Результат = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Если Источник.Ссылка.СуммаДокумента = Источник.СуммаДокумента Тогда	
					Источник.абс_НеПроверятьНаЗакрытыеСчета	= Истина;
				Иначе	
					Источник.абс_НеПроверятьНаЗакрытыеСчета	= Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение и Клиент Тогда
Процедура абс_ПроверитьДоступностьРеквизитовДляКниги(Документ, ЭлементыФормы, ИзменятьРеквизиты = Ложь) Экспорт
	
	ОпределенияПризнакаДопЛиста = Документ.абс_ОпределенияПризнакаДопЛистаДляКниги;
	
	Если не ЗначениеЗаполнено(ОпределенияПризнакаДопЛиста) или ОпределенияПризнакаДопЛиста = Перечисления.абс_ОпределенияПризнакаДопЛистаДляКниги.Автоматически Тогда
		ЭлементыФормы.абс_ЗаписьДополнительногоЛиста.Доступность = Ложь;
		ЭлементыФормы.абс_КорректируемыйПериод.Доступность 		 = Ложь;
		Если ИзменятьРеквизиты Тогда
			Документ.абс_КорректируемыйПериод 		= '00010101';
			Документ.абс_ЗаписьДополнительногоЛиста	= Ложь;
		КонецЕсли;	
	ИначеЕсли ОпределенияПризнакаДопЛиста = Перечисления.абс_ОпределенияПризнакаДопЛистаДляКниги.Вручную Тогда  
		ЭлементыФормы.абс_ЗаписьДополнительногоЛиста.Доступность = Истина;
		ЭлементыФормы.абс_КорректируемыйПериод.Доступность 		 = Истина;	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура абс_УстановитьМеткуВДокументе(Документ) Экспорт	

	Форма = ПолучитьФорму("ОбщаяФорма.абс_ФормаУстановкиМеткиВППД");
	Форма.Документ = Документ;
	Если не Форма.Открыта() Тогда
		Форма.ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбновитьНадписьКнопкиМетки(Форма, Документ)   Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	        |	абс_МеткаППД.Документ,
	        |	абс_МеткаППД.Метка,
	        |	абс_МеткаППД.Дата КАК Дата,
	        |	абс_МеткаППД.Ответственный,
	        |	абс_МеткаППД.Комментарий
	        |ИЗ
	        |	РегистрСведений.абс_МеткаППД КАК абс_МеткаППД
	        |ГДЕ
	        |	абс_МеткаППД.Документ = &Ссылка
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Дата УБЫВ");
	Запрос.УстановитьПараметр("Ссылка",Документ);
	Выб = Запрос.Выполнить().Выбрать();
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		Если Выб.Следующий() Тогда
			кЗаголовок = Лев(Выб.Метка, 25);
		Иначе 
			кЗаголовок = "Установить метку";
		КонецЕсли;
		Форма.Элементы.Найти("ФормаОбщаяКомандаttk_УстановитьМетку").Заголовок = кЗаголовок;
	Иначе
		Если Выб.Следующий() Тогда
			Форма.ЭлементыФормы.ДействияФормы.Кнопки.УстановитьМетку.Текст = Лев(Выб.Метка, 25);
		Иначе 
			Форма.ЭлементыФормы.ДействияФормы.Кнопки.УстановитьМетку.Текст = "Установить метку";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНадписьКнопки()

Процедура РучнаяКорректировкаСписокПриПолученииДанных(ОформленияСтрок)  Экспорт

	Картинка = БиблиотекаКартинок.РучнаяКорректировка;
	Для Каждого Строка Из ОформленияСтрок Цикл

		Если Строка.ДанныеСтроки.РучнаяКорректировка Тогда
			Строка.Ячейки.РучнаяКорректировка.УстановитьКартинку(Картинка);
		Иначе
			Строка.Ячейки.РучнаяКорректировка.Текст = "";
		КонецЕсли;

	КонецЦикла

КонецПроцедуры // РучнаяКорректировкаСписокПриПолученииДанных()

// Открывает ОсновнуюФорму ручной корректировки
//
Процедура РучнаяКорректировкаОсновнаяФорма(ЭтоНовый,Ссылка,ЭтотОбъект)  Экспорт
	
	Если НЕ ЭтоНовый Тогда
		ФормаНастройки = Обработки.абс_КорректировкаДвижений.ПолучитьФорму("ОсновнаяФорма", ЭтотОбъект, Строка(Ссылка));
		ФормаНастройки.ДокументОбъект = ЭтотОбъект;
		Если ФормаНастройки.Открыта() Тогда
			Для Каждого СтрокаТаблицыРегистров из ФормаНастройки.Регистры Цикл
				СтрокаТаблицыРегистров.Прочитан = Ложь;
				//СтрокаТаблицыРегистров.Отрисован = Ложь;
			КонецЦикла;
			
			КолСтраниц = ФормаНастройки.ЭлементыФормы.ОсновнаяПанель.Страницы.количество()-1;
			Для НомерСтраницы = 0 По КолСтраниц Цикл
				Страница = ФормаНастройки.ЭлементыФормы.ОсновнаяПанель.Страницы[КолСтраниц-НомерСтраницы];
				Если Страница.Видимость и Страница.Значение="" Тогда
					ФормаНастройки.ЭлементыФормы.ОсновнаяПанель.Страницы.Удалить(ФормаНастройки.ЭлементыФормы.ОсновнаяПанель.Страницы.Индекс(Страница));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ФормаНастройки.Открыть();
	КонецЕсли;
 	
КонецПроцедуры // РучнаяКорректировкаОсновнаяФорма()

// Открывает ОсновнуюФорму ручной корректировки после записи
//
Процедура РучнаяКорректировкаОсновнаяФормаПослеЗаписи(Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект)  Экспорт
	
	Если Проведен И ОткрыватьНастройкуДвижений Тогда
		ФормаНастройки = Обработки.абс_КорректировкаДвижений.ПолучитьФорму("ОсновнаяФорма", ЭтотОбъект, Строка(Ссылка));
		Если ФормаНастройки.Открыта() Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Отображение",  Истина);
			НайденныеСтроки = ФормаНастройки.Регистры.НайтиСтроки(СтруктураОтбора);
			Для Каждого Строка Из НайденныеСтроки Цикл
				ЭтотОбъект.Движения[Строка.Имя].Прочитать();
			КонецЦикла;			
		КонецЕсли;
		Если ОткрыватьНастройкуДвижений Тогда
			ФормаНастройки.ДокументОбъект = ЭтотОбъект;
			ФормаНастройки.Открыть();
		КОнецЕсли;
	КОнецЕсли;
 	
КонецПроцедуры
#КонецЕсли

Процедура ПриУстановкеНовогоКодаСправочникаПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	Если ТипЗнч(Источник)=Тип("СправочникОбъект.Контрагенты") Тогда
		Префикс = "K";
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.Проекты") Тогда
		Префикс = СокрЛП(Источник.Родитель.абс_ПрефиксКодовПроектов);		
	Иначе
 		ДобавитьПрефиксУзла(Префикс);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(Ссылка) Экспорт

	Результат = Новый СписокЗначений;
	
	Если Ссылка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ТипСсылки = ТипЗнч(Ссылка);
	ЭтоХарактеристика = (ТипСсылки = Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НазначениеХарактеристика", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры);

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Назначения.Ссылка КАК Ссылка,
	|	Назначения.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов КАК Назначения
	|ГДЕ
	|	НЕ Назначения.ЭтоГруппа
	|";

	Если ЭтоХарактеристика Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И Назначения.Ссылка = &НазначениеХарактеристика
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	И Назначения.Ссылка <> &НазначениеХарактеристика
		|";
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЭтоХарактеристика Или Выборка.ТипЗначения.СодержитТип(ТипСсылки) Тогда
			Результат.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьПричинуОшибки(ИнформацияОбОшибке) Экспорт
	ПричинаОшибки = ИнформацияОбОшибке.Причина;
	Если ПричинаОшибки = НеОпределено Тогда
		Возврат ИнформацияОбОшибке;
	КонецЕсли;
	Пока ПричинаОшибки.Причина <> НеОпределено Цикл
		ПричинаОшибки = ПричинаОшибки.Причина;
	КонецЦикла;
	Возврат ПричинаОшибки;
	
КонецФункции

Функция ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти) Экспорт

	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;
	Возврат ИмяТабличнойЧасти;

КонецФункции

Процедура абс_УстановитьРежимЗаписиДокумента(СтатусДокумента, Проведен, РежимЗаписи) Экспорт 
	
	Если не РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	СписокСтатусовДляКонтроля = Новый СписокЗначений;
	СписокСтатусовДляКонтроля.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
	СписокСтатусовДляКонтроля.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
	СписокСтатусовДляКонтроля.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отмена);
		
	Если не СписокСтатусовДляКонтроля.НайтиПоЗначению(СтатусДокумента) = Неопределено Тогда 		
		Если Проведен Тогда			
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе                			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;  		  		
	Иначе         		
		РежимЗаписи = РежимЗаписиДокумента.Проведение; 		
	КонецЕсли; 	

КонецПроцедуры	

Функция абс_НеВыполнятьДвиженияВСтатусе(СтруктураШапкиДокумента) Экспорт 
	
	ИсключаемыеДокументы = Новый СписокЗначений;
	ИсключаемыеДокументы.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ИсключаемыеДокументы.Добавить(Тип("ДокументСсылка.ТребованиеНакладная"));
	ИсключаемыеДокументы.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	ИсключаемыеДокументы.Добавить(Тип("ДокументСсылка.СписаниеТоваров"));
	ИсключаемыеДокументы.Добавить(Тип("ДокументСсылка.ОприходованиеТоваров"));
	
	СписокСтатусовДляКонтроля = Новый СписокЗначений;	
	СписокСтатусовДляКонтроля.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
	
	Если ИсключаемыеДокументы.НайтиПоЗначению(ТипЗнч(СтруктураШапкиДокумента.Ссылка)) = Неопределено Тогда
		
		СписокСтатусовДляКонтроля.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.КорректировкаДокумента);
		СписокСтатусовДляКонтроля.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером);  
		
		ДокументИсключение = Новый СписокЗначений;
		ДокументИсключение.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
		Если не ДокументИсключение.НайтиПоЗначению(ТипЗнч(СтруктураШапкиДокумента.Ссылка)) = Неопределено Тогда
			СписокСтатусовДляКонтроля.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокСтатусовДляКонтроля.НайтиПоЗначению(СтруктураШапкиДокумента.абс_Статус) = Неопределено;

КонецФункции	

Функция КонтрольИспользуемых_ЦФО_ЦФУ_БюджетнаяСтатья(Документ, Отказ = Ложь) Экспорт
	
	Отказ = Ложь;
	
	абс_ПользовательДЗО = ПараметрыСеанса.абс_ПользовательДЗО;	
	
	Если НЕ Документ.Метаданные().Реквизиты.Найти("ЦФО") = Неопределено Тогда		
		НеИспользуется = ?(абс_ПользовательДЗО,	Документ.ЦФО.абс_ЦФОИспользуетсяДЗО, Документ.ЦФО.абс_ЦФОИспользуется);							
		Если НЕ НеИспользуется Тогда					
			Сообщить("ЦФО не используется!", СтатусСообщения.Важное);
		КонецЕсли;				
		Если НЕ Отказ Тогда
			Отказ = НеИспользуется = Ложь;
		КонецЕсли;			
	КонецЕсли;	
	
	Если НЕ Документ.Метаданные().Реквизиты.Найти("БюджетнаяСтатья") = Неопределено Тогда
		Если ЗначениеЗаполнено(Документ.БюджетнаяСтатья) Тогда 
			НеИспользуется = Документ.БюджетнаяСтатья.абс_Используется;
			Если НЕ НеИспользуется Тогда					
				Сообщить("Бюджетная статья не используется!",СтатусСообщения.Важное);
			КонецЕсли;		
		    Если НЕ Отказ Тогда  			
				Отказ = НеИспользуется = Ложь;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Документ.Метаданные().Реквизиты.Найти("ЦФУ") = Неопределено Тогда
		Если ЗначениеЗаполнено(Документ.ЦФУ) Тогда
			НеИспользуется = ?(абс_ПользовательДЗО,	Документ.ЦФУ.абс_ЦФУИспользуетсяДЗО, Документ.ЦФУ.абс_Используется);							
			Если НЕ НеИспользуется Тогда					
				Сообщить("ЦФУ не используется!",СтатусСообщения.Важное);
			КонецЕсли;								
			Если НЕ Отказ Тогда   								
				Отказ = НеИспользуется = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;		
	
	Возврат Отказ;
	
КонецФункции	

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ДЛЯ_ФОРМИРОВАНИЯ_ДВИЖЕНИЙ_ДОКУМЕНТОВ

// Функция загружает таблицы документа в таблицы соответствующие структуре регистров
//	Параметры:
//		- Движение - движение документа (т.е. регистр)
//		- СтруктТаблицДокумента - структура содержашая таблицы документа. ключ - имя таблицы, значение - таблица значений с данными документа.
//
//	Возврат:
//		- Структура, в которой ключ - это имя таблицы документа, соответствующий параметру СтруктТаблицДокумента,
//		  значение - таблица значений, со структурой соответствующей структуре параметра (т.е. регистра) Движение
//		  В таблицы значений данные загружаются по соответствию с имен полей.
//
Функция ЗагрузитьТаблицыДокументаВСтруктуру(Движение, СтруктТаблицДокумента) Экспорт
	
	ПустаяТабРегистра = Движение.Выгрузить();
	ПустаяТабРегистра.Очистить();
	
	СтруктДанных = Новый Структура;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
	
		ТабРегистра = ПустаяТабРегистра.Скопировать();
		
		Если ТабЧасть.Значение <> Неопределено И ТабЧасть.Значение.Количество() > 0 Тогда
			ЗагрузитьВТаблицуЗначений( ТабЧасть.Значение, ТабРегистра);
		КонецЕсли;
		
		СтруктДанных.Вставить( ТабЧасть.Ключ, ТабРегистра);
		
	КонецЦикла;
	
	Возврат СтруктДанных;

КонецФункции // ЗагрузитьТаблицыДокументаВСтруктуру()

// Процедура заполняет структуру таблиц документа, значением которое будет одинаковым для всех таблиц (например значением шапки документа)
//	Параметры:
//		- СтруктТаблицДокумента - структура таблиц документа, сформированная функцией ЗагрузитьТаблицыДокументаВСтруктуру()
//		- ИмяПоля - имя колонки в таблицах локумента, в которую будет установлено новое значение
//		- УстанавливаемоеЗначение - значение, которое надо установить в таблицы документа
//		- СтрТабЧасти - имена таб. частей документа в которые необходимо установить новое значение. строка, в которой
//						имена таб. частей разделены запятыми. необязательный параметр, по умолчанию - все таблицы.
//
Процедура УстановитьЗначениеВТаблицыДокумента(СтруктТаблицДокумента, ИмяПоля, УстанавливаемоеЗначение, СтрТабЧасти = "") Экспорт
	
	СтруктТабЧасти = ?( ПустаяСтрока(СтрТабЧасти), СтруктТаблицДокумента, Новый Структура(СтрТабЧасти));
	Для Каждого ТабЧасть Из СтруктТабЧасти Цикл
	
		Если СтруктТаблицДокумента[ТабЧасть.Ключ].Количество() > 0 Тогда
		    СтруктТаблицДокумента[ТабЧасть.Ключ].ЗаполнитьЗначения( УстанавливаемоеЗначение, ИмяПоля);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // УстановитьЗначениеВТаблицыДокумента()

// Процедура формирует движение в регистр на основании данных в таблицах документов
//	Параметры:
//		- Движение - движение документа, в которое необходимо произвести добавление записей (т.е. регистр)
//		- ВидДвижения - вид движения накопления (приход/расход)
//		- СтруктТаблицДокумента - структура таблиц документа, сформированная функцией ЗагрузитьТаблицыДокументаВСтруктуру()
//		- ДатаДвижения - дата на которую будут формироваться записи
//
Процедура ЗаписатьТаблицыДокументаВРегистр(Движение, ВидДвижения, СтруктТаблицДокумента, ДатаДвижения) Экспорт
	
	Движение.мПериод = ДатаДвижения;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
	
		Если ТабЧасть.Значение.Количество() = 0 Тогда
			Продолжить; // Пропускаем пустые табличные части
		КонецЕсли;
		
		Движение.мТаблицаДвижений = ТабЧасть.Значение;
		Если ВидДвижения = Неопределено Тогда // Регистр сведений
			ВыполнитьДвижениеПоРегистру(Движение);
		Иначе // Регистр накопления
			ВыполнитьДвижениеПоРегистру(Движение, ВидДвижения);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ЗаписатьТаблицыДокументаВРегистр()

// Процедура удаляет строки с пустыми значениями из структуры таблиц документа
//	Параметры:
//		- ТаблицыДляДвиженийПоЗаказам - структура таблиц документа
//		- ИмяПоля - имя поля, значение которого проверяет на пустое значение.
//
Процедура УдалитьСтрокиИзТаблицДокумента(ТаблицыДляДвиженийПоЗаказам, ИмяПоля) Экспорт

	Для Каждого ТабЧасть Из ТаблицыДляДвиженийПоЗаказам Цикл
		КолвоСтрок = ТабЧасть.Значение.Количество(); 
		Для Инд = 1 По КолвоСтрок Цикл 
		     ТекСтрока = ТабЧасть.Значение[КолвоСтрок - Инд]; 

		     Если НЕ ЗначениеЗаполнено(ТекСтрока[ИмяПоля]) Тогда 
		          ТабЧасть.Значение.Удалить(ТекСтрока); 
		     КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиИзТаблицДокумента()

// Процедура восстанавливает имена колонок таблицы значений, сохраненные в процедуре ПереименоватьКолонкуТаблицыЗначений()
//
//	Параметры:
//		- ТабЗначений - таблица значений в которой производится переименование колонок
//		- ТабИмен - таблица с историей переименований, таблица создается и заполняется в процедуре ПереименоватьКолонкуТаблицыЗначений()
//
Процедура ВосстановитьИменаКолонокТаблицыЗначений(ТабЗначений, ТабИмен) Экспорт
	
	К = ТабИмен.Количество() - 1;
	Пока К >= 0 Цикл
		ТекСтрока = ТабИмен[К];
		ТабЗначений.Колонки[ТекСтрока.НовИмя].Имя = ТекСтрока.ТекИмя;
		К = К - 1;
	КонецЦикла;
	
	ТабИмен.Очистить();

КонецПроцедуры

#КонецОбласти

#Область РАБОТА_С_ПЕРЕЧИСЛЕНИЕМ_ПЕРИОДИЧНОСТЬ
// Функции не обрабатывают значения "Декада" и "Полугодие"

// Функция возвращает ближайшую дату начала периода планирования
//
// Параметры
//	Периодичность (Перечисления.Периодичность)	- периодичность планирования по сценарию.
//	ДатаВПериоде (Дата)							- произвольная дата
//
// Возвращаемое значение:
//	ДатаНачалаПериода		– ближайшая дата начала периода планирования
//
Функция ДатаНачалаПериода(ДатаВПериоде,Периодичность) Экспорт
	
	Если НЕ ТипЗнч(ДатаВПериоде)=Тип("Дата") Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Если Периодичность=Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНедели (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода (ДатаВПериоде);
	Иначе
		Возврат НачалоДня(ДатаВПериоде);
	КонецЕсли;
		
КонецФункции // ДатаНачалаПериода()

// Функция возвращает ближайшую дату окончания периода планирования
//
// Параметры
//	Периодичность (Перечисления.Периодичность)	- периодичность планирования по сценарию.
//	ДатаВПериоде (Дата)							- произвольная дата
//
// Возвращаемое значение:
//	ДатаКонцаПериода	– ближайшая дата окончания периода планирования
//
Функция ДатаКонцаПериода(ДатаВПериоде,Периодичность) Экспорт
							
	Если Периодичность=Перечисления.Периодичность.День Тогда
		Возврат КонецДня(ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Неделя Тогда
		Возврат КонецНедели (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Месяц Тогда
		Возврат КонецМесяца (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Квартал Тогда
		Возврат КонецКвартала (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Год Тогда
		Возврат КонецГода (ДатаВПериоде);
	Иначе
		Возврат КонецДня(ДатаВПериоде);
	КонецЕсли;
		
КонецФункции // ДатаКонцаПериода()

// Функция добавляет интервал к дате
//
// Параметры:
//	Периодичность (Перечисления.Периодичность)	- пнриодичность планирования по сценарию.
//	ДатаВПериоде (Дата)							- произвольная дата
//	Смещение (число)							- определяет направление и количество периодов, в котором сдвигается дата
//
// Возвращаемое значение:
//	Дата, отстоящая от исходной на заданное количество периодов 
//
Функция ДобавитьИнтервал(ДатаПериода,Периодичность,Смещение) Экспорт

	Если Смещение = 0 Тогда
		НоваяДатаПериода = ДатаПериода;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		НоваяДатаПериода = НачалоДня(ДатаПериода + Смещение*24*3600);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		НоваяДатаПериода = ДатаПериода + Смещение*7*24*3600;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		НоваяДатаПериода = ДобавитьМесяц(ДатаПериода, Смещение);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		НоваяДатаПериода = ДобавитьМесяц(ДатаПериода, Смещение*3);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		НоваяДатаПериода = ДобавитьМесяц(ДатаПериода, Смещение*12);
		
	Иначе
		НоваяДатаПериода=НачалоДня(ДатаПериода) + Смещение*24*3600;
		
	КонецЕсли;

	Возврат НоваяДатаПериода;

КонецФункции // ДобавитьИнтервал()

// Возвращает число дней в переданном периоде
//
// Параметры
//  Периодичность – Перечисление.Периодичность элемент перечисления, 
//		для которого вычисляется количество дней
//
// Возвращаемое значение:
//   ЧислоДнейВПериоде (число)  – число дней в переданном периоде
//
Функция ЧислоДнейВПериоде(Периодичность) Экспорт
		
	Если Периодичность=Перечисления.Периодичность.День Тогда
		ЧислоДнейВПериоде=1;
	ИначеЕсли Периодичность=Перечисления.Периодичность.Неделя Тогда
		ЧислоДнейВПериоде=7;
	ИначеЕсли Периодичность=Перечисления.Периодичность.Месяц Тогда
		ЧислоДнейВПериоде=30;
	ИначеЕсли Периодичность=Перечисления.Периодичность.Квартал Тогда
		ЧислоДнейВПериоде=90;
	ИначеЕсли Периодичность=Перечисления.Периодичность.Год Тогда
		ЧислоДнейВПериоде=365;
	Иначе
		ЧислоДнейВПериоде=0;
	КонецЕсли;
	
	Возврат ЧислоДнейВПериоде;	

КонецФункции // ЧислоДнейВПериоде()

Функция ВопросПерезаполнитьКУДиР() Экспорт
	
	Ответ = Ложь;
	
	#Если Клиент Тогда
		ТекстВопроса = 
		"Отражение платежа в Книге учета доходов и расходов настроено вручную.
		|Перезаполнить показатели Книги учета доходов и расходов?";
		
		Ответ = (Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да);
	#КонецЕсли
	
	Возврат Ответ;
	
КонецФункции

// Формирует список обособленных структурных подразделений организации
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация");

	Запрос.УстановитьПараметр("Организация", Организация);

	СписокОрганизаций = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;
КонецФункции // ПолучитьСписокОбособленныхПодразделенийОрганизации()

//Удалает повторяющиеся элементы массива.
Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено = Ложь, УдалитьПустыеЭлементыСсылочногоТипа = Ложь) Экспорт
	
	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки(); 
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки(); 
	ОписаниеТиповПВХ          = ПланыВидовХарактеристик.ТипВсеСсылки(); 
	ОписаниеТиповПланыСчетов  = ПланыСчетов.ТипВсеСсылки(); 
	ОписаниеТиповПланыРасчета = ПланыВидовРасчета.ТипВсеСсылки(); 
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда 
		
		УжеВМасссиве = Новый Соответствие; 
		БылоНеопределено = Ложь;
		
		КолвоЭлементовВМассиве = Массив.Количество(); 
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл 
			ЭлементМассива = Массив[КолвоЭлементовВМассиве - ОбратныйИндекс]; 
			ТипЭлемента = ТипЗнч(ЭлементМассива); 
			Если ЭлементМассива = Неопределено Тогда
				Если БылоНеопределено или НеИспользоватьНеопределено Тогда
					Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента) 
				ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента) 
				ИЛИ ОписаниеТиповПВХ.СодержитТип(ТипЭлемента) 
				ИЛИ ОписаниеТиповПланыСчетов.СодержитТип(ТипЭлемента) 
				ИЛИ ОписаниеТиповПланыРасчета.СодержитТип(ТипЭлемента) Тогда 
				
				Если УдалитьПустыеЭлементыСсылочногоТипа
					И НЕ ЗначениеЗаполнено(ЭлементМассива)
					Тогда
					Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
					Продолжить;
				КонецЕсли;
				
				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор()); 
				
			Иначе 
				
				ИДЭлемента = ЭлементМассива; 
				
			КонецЕсли; 
			
			Если УжеВМасссиве[ИДЭлемента] = Истина Тогда 
				Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
			Иначе 
				УжеВМасссиве[ИДЭлемента] = Истина; 
			КонецЕсли; 
		КонецЦикла;      
		
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

//Функция возвращает информацию об уполномоченных лицах организации и сведения о приказе назначения 
Функция ПолучитьДанныеУполномоченногоЛица(Организация, Пользователь = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(Справочники.Пользователи.ПустаяСсылка());
	Если Пользователь <> Неопределено Тогда
		МассивПользователей.Добавить(Пользователь);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Пользователи",МассивПользователей);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	УполномоченныеЛица.УполномоченноеЛицо,
		|	УполномоченныеЛица.ЗаКогоПодписывает,
		|	УполномоченныеЛица.НомерДатаПриказа,
		|	ВЫБОР
		|		КОГДА УполномоченныеЛица.Пользователь = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) ТОГДА
		|			0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ТипПользователя
		|ИЗ
		|	РегистрСведений.УполномоченныеЛицаОрганизаций КАК УполномоченныеЛица
		|ГДЕ
		|	УполномоченныеЛица.Организация = &Организация И
		|	УполномоченныеЛица.Пользователь В (&Пользователи)
		|УПОРЯДОЧИТЬ ПО
		|	ТипПользователя";
		
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе 
		ВозвращаемыйРезультат = Новый Структура("Руководитель,ПриказРуководитель,ГлавныйБухгалтер,ПриказГлавныйБухгалтер");
		
		Таблица = Результат.Выгрузить();
		Для Каждого Строка Из Таблица Цикл
			Если Строка.ЗаКогоПодписывает = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда 
				ВозвращаемыйРезультат.Руководитель = Строка.УполномоченноеЛицо;
				ВозвращаемыйРезультат.ПриказРуководитель = Строка.НомерДатаПриказа;
			ИначеЕсли Строка.ЗаКогоПодписывает = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда 
				ВозвращаемыйРезультат.ГлавныйБухгалтер = Строка.УполномоченноеЛицо;
				ВозвращаемыйРезультат.ПриказГлавныйБухгалтер = Строка.НомерДатаПриказа;
			КонецЕсли;
		КонецЦикла;
		Возврат ВозвращаемыйРезультат;
	КонецЕсли;
	
КонецФункции

// Функция собирает сведения об ответственных лицах организации 
//
// Параметры:
//  Организация - организация, для которой нужно определить руководящих лиц.
//
Функция ОтветственныеЛица(Организация, ДатаСреза, Подразделение = Неопределено) Экспорт
	
	СобиратьПоОрганизации = Истина;
	Результат = Новый Структура("Руководитель, РуководительДолжность, РуководительФИО, РуководительПредставление, 
								|ГлавныйБухгалтер, ГлавныйБухгалтерДолжность, ГлавныйБухгалтерФИО, ГлавныйБухгалтерПредставление, 
								|Кассир, КассирДолжность, КассирФИО, КассирПредставление,  
								|ОтветственныйЗаРегистры, ОтветственныйЗаРегистрыДолжность, ОтветственныйЗаРегистрыФИО, ОтветственныйЗаРегистрыПредставление");

	Если Организация <> Неопределено тогда

		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ПризнакФизЛица",   Перечисления.ЮрФизЛицо.ФизЛицо);
		
		ЗапросПоЛицам.Текст = "ВЫБРАТЬ
		                      |	ФИОФизЛицСрезПоследних.Фамилия,
		                      |	ФИОФизЛицСрезПоследних.Имя,
		                      |	ФИОФизЛицСрезПоследних.Отчество,
		                      |	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизическоеЛицо
		                      |ИЗ
		                      |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		                      |		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Организации.ИндивидуальныйПредприниматель
		                      |			И (Организации.Ссылка = &Организация)
		                      |			И (Организации.ЮрФизЛицо = &ПризнакФизЛица)";
		
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();
		
		Пока Руководители.Следующий() Цикл
			
			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			
			Результат.Руководитель               = Руководители.ФизическоеЛицо;
			Результат.РуководительДолжность      = "";
			Результат.РуководительФИО            = ФИО;
			Результат.РуководительПредставление  = Представление;
			
		КонецЦикла;
		
		Если СобиратьПоОрганизации Тогда
			
			ЗапросПоЛицам.Текст = 
			"ВЫБРАТЬ
			|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
			|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
			|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
			|	ФИОФизЛицСрезПоследних.Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя,
			|	ФИОФизЛицСрезПоследних.Отчество
			|ИЗ
			|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
			|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
			Руководители = ЗапросПоЛицам.Выполнить().Выбрать();
		КонецЕсли;

		Пока Руководители.Следующий() Цикл

			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			
			Если Руководители.ОтветственноеЛицо      = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель               = Руководители.ФизическоеЛицо;
				Результат.РуководительДолжность      = Руководители.Должность;
				Результат.РуководительФИО            = ФИО;
				Результат.РуководительПредставление  = Представление;

			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер           = Руководители.ФизическоеЛицо;
				Результат.ГлавныйБухгалтерДолжность  = Руководители.Должность;
                Результат.ГлавныйБухгалтерФИО        = ФИО;
				Результат.ГлавныйБухгалтерПредставление  = Представление;
				
			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                     = Руководители.ФизическоеЛицо;
				Результат.КассирДолжность      		 = Руководители.Должность;
                Результат.КассирФИО            		 = ФИО;
				Результат.КассирПредставление  = Представление;
				
			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры Тогда
				Результат.ОтветственныйЗаРегистры    = Руководители.ФизическоеЛицо;
				Результат.ОтветственныйЗаРегистрыДолжность      = Руководители.Должность;
				Результат.ОтветственныйЗаРегистрыФИО = ФИО;
				Результат.ОтветственныйЗаРегистрыПредставление  = Представление;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти
//- Интеграция ЕИСУП_Документооборот