// Функция формирует массив кодов операций внешнего списания затрат.
//
// Возвращаемое значение:
//	Массив - Массив кодов операций
//
Функция ПолучитьМассивКодовОперацийВнешнегоСписания()
	
	МассивКодовОпераций = Новый Массив();
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииТоваров.Реализация);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
	
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеПоИнвентаризации);
	
	Возврат МассивКодовОпераций;
	
КонецФункции // ПолучитьМассивКодовОперацийВнешнегоСписания()

// Процедура формирует движение по регистрам УчетЗатрат и УчетЗатратРегл
//
// Параметры:
//	НаборЗаписей - набор записей, в который нужно добавлять движения,
//	Период - дата, на которую нужно добавлять движения,
//	РегламентныйДокумент - документ, по которому нужно добавлять движения,
//	КодОперации - код операции для записи в регистр,
//	СтрокаДвижения - структура, содержащая аналитику для помещения в регистр,
//	СтруктраСтоимостей - структура, содержащая информацию о суммах,
//	МассивКодовОперацийСписания - массив кодов операций, по которым не нужно формировать приходное движение,
//	ВидОтраженияВУчете - перечисление, признак отражения в учете.
//
Процедура СформироватьДвиженияПоРегиструУчетаЗатрат(
	НаборЗаписей, 
	Период, 
	РегламентныйДокумент, 
	КодОперации, 
	СтрокаДвижения, 
	СтруктраСтоимостей, 
	МассивКодовОперацийСписания, 
	ВидОтраженияВУчете
	)
	
	//Расход
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = Период;
	НоваяСтрока.Регистратор = РегламентныйДокумент.Ссылка;
	
	НоваяСтрока.АналитикаВидаУчета = СтрокаДвижения.АналитикаВидаУчета;
	НоваяСтрока.АналитикаУчетаЗатрат = СтрокаДвижения.АналитикаУчетаЗатрат;
	НоваяСтрока.АналитикаУчетаПартий = СтрокаДвижения.АналитикаУчетаПартий;
	НоваяСтрока.АналитикаРаспределенияЗатрат = СтрокаДвижения.АналитикаРаспределенияЗатрат;
	НоваяСтрока.КорАналитикаВидаУчета = СтрокаДвижения.КорАналитикаВидаУчета;
	НоваяСтрока.КорАналитикаРаспределенияЗатрат = СтрокаДвижения.КорАналитикаРаспределенияЗатрат;
	НоваяСтрока.КорАналитикаУчетаЗатрат = СтрокаДвижения.КорАналитикаУчетаЗатрат;
	НоваяСтрока.КорАналитикаУчетаПартий = СтрокаДвижения.КорАналитикаУчетаПартий;
	
	НоваяСтрока.Стоимость = СтруктраСтоимостей.Стоимость;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
	  ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.СтоимостьНУ = СтруктраСтоимостей.СтоимостьНУ;
		НоваяСтрока.ПостояннаяРазница = СтруктраСтоимостей.ПостояннаяРазница;
	КонецЕсли;	
	
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяСтрока.КодОперации = КодОперации;
	
	Если МассивКодовОперацийСписания.Найти(КодОперации) = Неопределено 
	  И НЕ ТипЗНЧ(СтрокаДвижения.КорАналитикаВидаУчета) = Тип("СправочникСсылка.КлючиАналитикиУчетаПрочихЗатрат") Тогда
		//Приход
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.Период = Период;
		НоваяСтрока.Регистратор = РегламентныйДокумент.Ссылка;
		
		НоваяСтрока.АналитикаВидаУчета = СтрокаДвижения.КорАналитикаВидаУчета;
		НоваяСтрока.АналитикаУчетаЗатрат = СтрокаДвижения.КорАналитикаУчетаЗатрат;
		НоваяСтрока.АналитикаУчетаПартий = СтрокаДвижения.КорАналитикаУчетаПартий;
		НоваяСтрока.АналитикаРаспределенияЗатрат = СтрокаДвижения.КорАналитикаРаспределенияЗатрат;
		НоваяСтрока.КорАналитикаВидаУчета = СтрокаДвижения.АналитикаВидаУчета;
		НоваяСтрока.КорАналитикаРаспределенияЗатрат = СтрокаДвижения.АналитикаРаспределенияЗатрат;
		НоваяСтрока.КорАналитикаУчетаЗатрат = СтрокаДвижения.АналитикаУчетаЗатрат;
		НоваяСтрока.КорАналитикаУчетаПартий = СтрокаДвижения.АналитикаУчетаПартий;
		
		НоваяСтрока.Стоимость = СтруктраСтоимостей.Стоимость;
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
	  	  ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда 
			НоваяСтрока.СтоимостьНУ = СтруктраСтоимостей.СтоимостьНУ;
			НоваяСтрока.ПостояннаяРазница = СтруктраСтоимостей.ПостояннаяРазница;
		КонецЕсли;	
		
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.КодОперации = КодОперации;
	КонецЕсли;	
КонецПроцедуры	

// Функция формирует массив регистров по виду учета документа.
//
// Параметры:
//	РегламентныйДокумент - ДокументСсылка - Регламентный документ
//
// Возвращаемое значение:
//	Массив - Массив регистров
//
Функция ПолучитьМассивРегистровПоВидуУчета(РегламентныйДокумент)
	
	Массив = Новый Массив();
	Если РегламентныйДокумент.ОтражатьВУправленческомУчете Тогда
		Массив.Добавить("УчетЗатрат");
	КонецЕсли;	
	
	Если РегламентныйДокумент.ОтражатьВБухгалтерскомУчете
	  ИЛИ РегламентныйДокумент.ОтражатьВНалоговомУчете Тогда
		Массив.Добавить("УчетЗатратРегл");
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции // ПолучитьМассивРегистровПоВидуУчета()

// Процедура формирования временной таблицы "ОтборПоАналитикеВидовУчета".
//
// Параметры:
//	РегламентныйДокумент - ДокументСсылка - Регламентный документ
//	ОтборПоАналитикеВидовУчета - Массив - Массив ключей аналитики вида учета
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СформироватьВременнуюТаблицуОтборПоАналитикеВидовУчета(
	СтруктураШапкиДокумента,
	РегламентныйДокумент,
	ОтборПоАналитикеВидовУчета,
	МенеджерВременныхТаблиц
	)
	
	Если РегламентныйДокумент.ОтражатьВУправленческомУчете Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(РегламентныйДокумент.Организация, РегламентныйДокумент.Дата);
		ОрганизацияДляОтбора = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(РегламентныйДокумент.Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);
	Иначе
		ОрганизацияДляОтбора = РегламентныйДокумент.Организация;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АналитикаВидаУчета.Ссылка
	|
	|ПОМЕСТИТЬ ОтборПоАналитикеВидовУчета
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|ГДЕ
	|	АналитикаВидаУчета.Организация = &Организация
	|	//ЕстьУсловиеПоАналитике И АналитикаВидаУчета.Ссылка В(&МассивАналитик)
	|;
	|ВЫБРАТЬ
	|	АналитикаВидаУчета.Ссылка
	|
	|ПОМЕСТИТЬ ОтборПоАналитикеВидовУчетаРазделМПЗ
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|ГДЕ
	|	АналитикаВидаУчета.Организация = &Организация
	|	И АналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ)";
						  
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", ОрганизацияДляОтбора);
	
	Если НЕ ОтборПоАналитикеВидовУчета = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ЕстьУсловиеПоАналитике", "");
		Запрос.УстановитьПараметр("МассивАналитик", ОтборПоАналитикеВидовУчета);
	КонецЕсли;	
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	РасширеннаяАналитикаУчета.ПоказатьВременнуюТаблицу(
		СтруктураШапкиДокумента,
		МенеджерВременныхТаблиц,
		"ОтборПоАналитикеВидовУчета"
	);
	
КонецПроцедуры // СформироватьВременнуюТаблицуОтборПоАналитикеВидовУчета()

// Процедура готовит данные для списания по ФИФО.
//
// Параметры:
//	Запрос - запрос для формирования узлов
//	ВидОтраженияВУчете - вид учета, по которому рассчитывается себестоимость
//
Процедура ПодготовитьЗапросДляСписанияПоФИФО(Запрос, ВидОтраженияВУчете)
	//Выполняем запрос для формирования записей регистра сведений "Узлы корректировки стоимости списания" но помещаем его результат не в регистр,
	//а во временную таблицу ТаблицаУзлыКорректировкиСтоимостиСписания. см. процедуру СформироватьДвиженияПоРегиструУзлыКорректировкиСтоимостиСписания()
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ДляФИФО","");
	Запрос.Выполнить();
	
	// Не нужно обрабатывать механизмом ФИФО остатки по разделу Наработка.
	// Но и не будем портить "общий" отбор (временная таблица ОтборПоАналитикеВидовУчета,
	// сформирована в процедуре СформироватьВременнуюТаблицуОтборПоАналитикеВидовУчета)
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	АналитикаВидаУчета.Ссылка
	|ПОМЕСТИТЬ ОтборПоАналитикеВидовУчетаБезНаработки
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПоАналитикеВидовУчета КАК ОтборПоАналитикеВидовУчета
	|		ПО АналитикаВидаУчета.Ссылка = ОтборПоАналитикеВидовУчета.Ссылка
	|			И (АналитикаВидаУчета.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Наработка))";
	Запрос.Выполнить();
	
	//Формируем остатки на конец периода, которые будим закрывать по ФИФО	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетЗатратОстатки.АналитикаВидаУчета,
	               |	УчетЗатратОстатки.АналитикаУчетаЗатрат,
	               |	УчетЗатратОстатки.АналитикаУчетаПартий,
	               |	УчетЗатратОстатки.АналитикаРаспределенияЗатрат,
	               |	ВЫБОР
	               |		КОГДА УчетЗатратОстатки.КоличествоОстаток > 0
	               |			ТОГДА УчетЗатратОстатки.КоличествоОстаток
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КоличествоОстаток,//Количество не распределенного остатка на каждой итерации
	               |	//ДляРеглУчета	ВЫБОР
	               |	//ДляРеглУчета 		КОГДА УчетЗатратОстатки.КоличествоНУОстаток > 0
	               |	//ДляРеглУчета			ТОГДА УчетЗатратОстатки.КоличествоНУОстаток
	               |	//ДляРеглУчета		ИНАЧЕ 0
	               |	//ДляРеглУчета	КОНЕЦ КАК КоличествоНУОстаток,				   
	               |	ВЫБОР
	               |		КОГДА УчетЗатратОстатки.КоличествоОстаток > 0
	               |			ТОГДА УчетЗатратОстатки.КоличествоОстаток
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КоличествоОстатокНаКонецПериода,//Количество остаток на конец периода (не зависит от текущей итерации)
	               |	//ДляРеглУчета	ВЫБОР
	               |	//ДляРеглУчета 		КОГДА УчетЗатратОстатки.КоличествоНУОстаток > 0
	               |	//ДляРеглУчета			ТОГДА УчетЗатратОстатки.КоличествоНУОстаток
	               |	//ДляРеглУчета		ИНАЧЕ 0
	               |	//ДляРеглУчета	КОНЕЦ КАК КоличествоНУОстатокНаКонецПериода,				   
	//Добавляем к дате секунду, чтобы в дальнейшем с ней можно было выполнять сравнения на "<" а не "<="			   
	               |	ДОБАВИТЬКДАТЕ(&ДатаКон, СЕКУНДА, 1) КАК Период,
				   |	//ДляРеглУчета	0 КАК СтоимостьНУОстаток,
				   |	//ДляРеглУчета	0 КАК ПостояннаяРазницаОстаток,
	               |	0 КАК СтоимостьОстаток
	               |ПОМЕСТИТЬ ТаблицаОстатковПартий
	               |ИЗ
	//Временная таблица ОтборПоАналитикеВидовУчета формируется в процедуре СформироватьВременнуюТаблицуОтборПоАналитикеВидовУчета()
	               |	РегистрНакопления.УчетЗатрат%СуффиксРегл%.Остатки(ДОБАВИТЬКДАТЕ(&ДатаКон, СЕКУНДА, 1), АналитикаВидаУчета В (ВЫБРАТЬ Ссылка ИЗ ОтборПоАналитикеВидовУчетаБезНаработки)) КАК УчетЗатратОстатки
				   |;
	               |УНИЧТОЖИТЬ ОтборПоАналитикеВидовУчетаБезНаработки;
	//Инициализируем временную таблицу ПериодыПартий			   
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ 1 ПОМЕСТИТЬ ПериодыПартий";
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);			   
	Запрос.Выполнить();			   
	
	//Основной запрос вычисляющий сумму, которую нужно зафиксировать в остатке, 
	//сумма определяется из расчета что на складе должны остаться последние по времени поступления партии
	//Запрос выполняется несколько раз, пока не будет найдена сумма конечного остатка
	Запрос.Текст = "УНИЧТОЖИТЬ ПериодыПартий
	//Сформируем список периодов (партий) по одному для каждого состояния в которых находятся еще не обработанные поступления с максимальной датой
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УчетЗатрат.АналитикаВидаУчета,
	               |	УчетЗатрат.АналитикаУчетаЗатрат,
	               |	УчетЗатрат.АналитикаУчетаПартий,
	               |	УчетЗатрат.АналитикаРаспределенияЗатрат,
	               |	МАКСИМУМ(НАЧАЛОПЕРИОДА(УчетЗатрат.Период, ДЕНЬ)) КАК Период
	               |ПОМЕСТИТЬ ПериодыПартий
	               |ИЗ
	               |	РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПартий КАК ТаблицаОстатковПартий
	               |		ПО (ТаблицаОстатковПартий.АналитикаВидаУчета = УчетЗатрат.АналитикаВидаУчета)
	               |			И (ТаблицаОстатковПартий.АналитикаУчетаЗатрат = УчетЗатрат.АналитикаУчетаЗатрат)
	               |			И (ТаблицаОстатковПартий.АналитикаУчетаПартий = УчетЗатрат.АналитикаУчетаПартий)
	               |			И (ТаблицаОстатковПартий.АналитикаРаспределенияЗатрат = УчетЗатрат.АналитикаРаспределенияЗатрат)
	               |//ДляУпрУчета			И (ТаблицаОстатковПартий.КоличествоОстаток <> 0)
				   |//ДляРеглУчета			И ((ТаблицаОстатковПартий.КоличествоОстаток <> 0)
				   |//ДляРеглУчета			ИЛИ (ТаблицаОстатковПартий.КоличествоНУОстаток <> 0))
	               |ГДЕ
	               |	УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |	И УчетЗатрат.КорАналитикаВидаУчета = НЕОПРЕДЕЛЕНО
	               |	И УчетЗатрат.ВидДвижения = &ВидДвиженияПриход
	               |	И УчетЗатрат.Период < ТаблицаОстатковПартий.Период
				   |	И УчетЗатрат.АналитикаВидаУчета В (
				   |			ВЫБРАТЬ 
				   |				Ссылка 
				   |			ИЗ 
				   |				ОтборПоАналитикеВидовУчета
				   |			)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УчетЗатрат.АналитикаВидаУчета,
	               |	УчетЗатрат.АналитикаУчетаЗатрат,
	               |	УчетЗатрат.АналитикаУчетаПартий,
	               |	УчетЗатрат.АналитикаРаспределенияЗатрат
	//Рассчитаем суммы поступлений для периодов полученных на предыдущем этапе
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПериодыПартий.АналитикаВидаУчета,
	               |	ПериодыПартий.АналитикаУчетаЗатрат,
	               |	ПериодыПартий.АналитикаУчетаПартий,
	               |	ПериодыПартий.АналитикаРаспределенияЗатрат,
	               |	СУММА(УчетЗатрат.Количество) КАК Количество,
	               |	СУММА(УчетЗатрат.Стоимость) КАК Стоимость,
	               |	//ДляРеглУчета	СУММА(УчетЗатрат.КоличествоНУ) КАК КоличествоНУ,
	               |	//ДляРеглУчета	СУММА(УчетЗатрат.СтоимостьНУ) КАК СтоимостьНУ,
	               |	//ДляРеглУчета	СУММА(УчетЗатрат.ПостояннаяРазница) КАК ПостояннаяРазница,
	               |	ПериодыПартий.Период
	               |ПОМЕСТИТЬ ВнешниеПоступленияЗаПериод
	               |ИЗ
	               |	ПериодыПартий КАК ПериодыПартий
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	               |		ПО ПериодыПартий.АналитикаВидаУчета = УчетЗатрат.АналитикаВидаУчета
	               |			И ПериодыПартий.АналитикаУчетаЗатрат = УчетЗатрат.АналитикаУчетаЗатрат
	               |			И ПериодыПартий.АналитикаУчетаПартий = УчетЗатрат.АналитикаУчетаПартий
	               |			И ПериодыПартий.АналитикаРаспределенияЗатрат = УчетЗатрат.АналитикаРаспределенияЗатрат
	               |			И (УчетЗатрат.Период МЕЖДУ ПериодыПартий.Период И КОНЕЦПЕРИОДА(ПериодыПартий.Период, ДЕНЬ))
	               |			И (УчетЗатрат.КорАналитикаВидаУчета = НЕОПРЕДЕЛЕНО)
				   |			И (УчетЗатрат.ВидДвижения = &ВидДвиженияПриход)
	//Без учета сумм. доп. расходов. Они будут распределяться дальше				   
	//Считаем, что внешнее поступление доп. расходов по БУ всегда является внешним поступлением доп. расходов и по НУ
				   |			И (УчетЗатрат.Количество <> 0)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПериодыПартий.АналитикаВидаУчета,
	               |	ПериодыПартий.АналитикаУчетаЗатрат,
	               |	ПериодыПартий.АналитикаУчетаПартий,
	               |	ПериодыПартий.АналитикаРаспределенияЗатрат,
	               |	ПериодыПартий.Период
	//Добавляем к накопленной ранее сумме конечного остатка сумму, полученную на текущей итерации		   
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОстатковПартий.АналитикаВидаУчета,
	               |	ТаблицаОстатковПартий.АналитикаУчетаЗатрат,
	               |	ТаблицаОстатковПартий.АналитикаУчетаПартий,
	               |	ТаблицаОстатковПартий.АналитикаРаспределенияЗатрат,
	               |	ВЫБОР
	               |		КОГДА ТаблицаОстатковПартий.КоличествоОстаток > ЕСТЬNULL(ВнешниеПоступленияЗаПериод.Количество,0)
	               |			ТОГДА ТаблицаОстатковПартий.КоличествоОстаток - ЕСТЬNULL(ВнешниеПоступленияЗаПериод.Количество,0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КоличествоОстаток,
	               |	//ДляРеглУчета	ВЫБОР
	               |	//ДляРеглУчета		КОГДА ТаблицаОстатковПартий.КоличествоНУОстаток > ЕСТЬNULL(ВнешниеПоступленияЗаПериод.КоличествоНУ,0)
	               |	//ДляРеглУчета			ТОГДА ТаблицаОстатковПартий.КоличествоНУОстаток - ЕСТЬNULL(ВнешниеПоступленияЗаПериод.КоличествоНУ,0)
	               |	//ДляРеглУчета		ИНАЧЕ 0
	               |	//ДляРеглУчета	КОНЕЦ КАК КоличествоНУОстаток,
	               |	ВЫБОР
	               |		КОГДА ТаблицаОстатковПартий.КоличествоОстаток >= ЕСТЬNULL(ВнешниеПоступленияЗаПериод.Количество,0)
	               |			ТОГДА ТаблицаОстатковПартий.СтоимостьОстаток + ЕСТЬNULL(ВнешниеПоступленияЗаПериод.Стоимость,0)
	               |		ИНАЧЕ ТаблицаОстатковПартий.СтоимостьОстаток + ВнешниеПоступленияЗаПериод.Стоимость * ТаблицаОстатковПартий.КоличествоОстаток / ВнешниеПоступленияЗаПериод.Количество
	               |	КОНЕЦ КАК СтоимостьОстаток,
	               |	//ДляРеглУчета	ВЫБОР
	               |	//ДляРеглУчета		КОГДА ТаблицаОстатковПартий.КоличествоНУОстаток >= ЕСТЬNULL(ВнешниеПоступленияЗаПериод.КоличествоНУ,0)
	               |	//ДляРеглУчета			ТОГДА ТаблицаОстатковПартий.СтоимостьНУОстаток + ЕСТЬNULL(ВнешниеПоступленияЗаПериод.СтоимостьНУ,0)
	               |	//ДляРеглУчета		ИНАЧЕ ТаблицаОстатковПартий.СтоимостьНУОстаток + ВнешниеПоступленияЗаПериод.СтоимостьНУ * ТаблицаОстатковПартий.КоличествоНУОстаток / ВнешниеПоступленияЗаПериод.КоличествоНУ
	               |	//ДляРеглУчета	КОНЕЦ КАК СтоимостьНУОстаток,				   
	               |	//ДляРеглУчета	ВЫБОР
	               |	//ДляРеглУчета		КОГДА ТаблицаОстатковПартий.КоличествоНУОстаток >= ЕСТЬNULL(ВнешниеПоступленияЗаПериод.КоличествоНУ,0)
	               |	//ДляРеглУчета			ТОГДА ТаблицаОстатковПартий.ПостояннаяРазницаОстаток + ЕСТЬNULL(ВнешниеПоступленияЗаПериод.ПостояннаяРазница,0)
	               |	//ДляРеглУчета		ИНАЧЕ ТаблицаОстатковПартий.ПостояннаяРазницаОстаток + ВнешниеПоступленияЗаПериод.ПостояннаяРазница * ТаблицаОстатковПартий.КоличествоНУОстаток / ВнешниеПоступленияЗаПериод.КоличествоНУ
	               |	//ДляРеглУчета	КОНЕЦ КАК ПостояннаяРазницаОстаток,				   				   
				   |	ТаблицаОстатковПартий.КоличествоОстатокНаКонецПериода,
				   |	//ДляРеглУчета	ТаблицаОстатковПартий.КоличествоНУОстатокНаКонецПериода,
	               |	ВнешниеПоступленияЗаПериод.Период
	               |ПОМЕСТИТЬ ТаблицаТекущихОстатковПартий
	               |ИЗ
	               |	ТаблицаОстатковПартий КАК ТаблицаОстатковПартий
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешниеПоступленияЗаПериод КАК ВнешниеПоступленияЗаПериод
	               |		ПО ТаблицаОстатковПартий.АналитикаВидаУчета = ВнешниеПоступленияЗаПериод.АналитикаВидаУчета
	               |			И ТаблицаОстатковПартий.АналитикаУчетаЗатрат = ВнешниеПоступленияЗаПериод.АналитикаУчетаЗатрат
	               |			И ТаблицаОстатковПартий.АналитикаУчетаПартий = ВнешниеПоступленияЗаПериод.АналитикаУчетаПартий
	               |			И ТаблицаОстатковПартий.АналитикаРаспределенияЗатрат = ВнешниеПоступленияЗаПериод.АналитикаРаспределенияЗатрат
	               |//ДляУпрУчета			И (ТаблицаОстатковПартий.КоличествоОстаток <> 0)
				   |//ДляРеглУчета			И ((ТаблицаОстатковПартий.КоличествоОстаток <> 0)
				   |//ДляРеглУчета			ИЛИ (ТаблицаОстатковПартий.КоличествоНУОстаток <> 0))
	//Подготавливаем временные таблице к следующей итерации 			   
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаОстатковПартий
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВнешниеПоступленияЗаПериод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаТекущихОстатковПартий.АналитикаВидаУчета,
	               |	ТаблицаТекущихОстатковПартий.АналитикаУчетаЗатрат,
	               |	ТаблицаТекущихОстатковПартий.АналитикаУчетаПартий,
	               |	ТаблицаТекущихОстатковПартий.АналитикаРаспределенияЗатрат,
	               |	ТаблицаТекущихОстатковПартий.КоличествоОстаток,
				   |	//ДляРеглУчета	ТаблицаТекущихОстатковПартий.КоличествоНУОстаток,
				   |	ТаблицаТекущихОстатковПартий.КоличествоОстатокНаКонецПериода,
				   |	//ДляРеглУчета	ТаблицаТекущихОстатковПартий.КоличествоНУОстатокНаКонецПериода,
	               |	ТаблицаТекущихОстатковПартий.СтоимостьОстаток,
				   |	//ДляРеглУчета	ТаблицаТекущихОстатковПартий.СтоимостьНУОстаток,
				   |	//ДляРеглУчета	ТаблицаТекущихОстатковПартий.ПостояннаяРазницаОстаток,
	               |	ТаблицаТекущихОстатковПартий.Период
	               |ПОМЕСТИТЬ ТаблицаОстатковПартий
	               |ИЗ
	               |	ТаблицаТекущихОстатковПартий КАК ТаблицаТекущихОстатковПартий
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаТекущихОстатковПартий
	//Определяем, были ли найдены новые партии за текущую итерацию			   
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
				   |	1
	               |ИЗ
	               |	ПериодыПартий КАК ПериодыПартий";
	Запрос.УстановитьПараметр("ВидДвиженияПриход",ВидДвиженияНакопления.Приход);
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
	
	//Выполняем поиск партий
	КоличествоИтераций = 0;			   
	Результат = Запрос.Выполнить();
	Пока Не Результат.Пустой()  Цикл
		КоличествоИтераций = КоличествоИтераций + 1;
		Результат = Запрос.Выполнить();
	КонецЦикла;
	
	//Определяемс сумму доп. расходов, которые должны остаться в остатке. Для этого:
	//1. Определяем сумму внешних поступлений доп. расходов за период
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетЗатрат.АналитикаВидаУчета,
	               |	УчетЗатрат.АналитикаУчетаЗатрат,
	               |	УчетЗатрат.АналитикаУчетаПартий,
	               |	УчетЗатрат.АналитикаРаспределенияЗатрат,
				   |	//ДляРеглУчета	СУММА(УчетЗатрат.СтоимостьНУ) КАК СтоимостьНУ,
				   |	//ДляРеглУчета	СУММА(УчетЗатрат.ПостояннаяРазница) КАК ПостояннаяРазница,				   
				   |	СУММА(УчетЗатрат.Стоимость) КАК Стоимость
				   |ПОМЕСТИТЬ ВнешниеПоступленияДопРасходов
		           |ИЗ РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	               |ГДЕ 
				   |	УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |	И (УчетЗатрат.КорАналитикаВидаУчета = НЕОПРЕДЕЛЕНО)
				   |	И (УчетЗатрат.ВидДвижения = &ВидДвиженияПриход)
				   |	И (УчетЗатрат.Количество = 0)
				   |СГРУППИРОВАТЬ ПО
	               |	УчетЗатрат.АналитикаВидаУчета,
	               |	УчетЗатрат.АналитикаУчетаЗатрат,
	               |	УчетЗатрат.АналитикаУчетаПартий,
	               |	УчетЗатрат.АналитикаРаспределенияЗатрат
	//2. Распределеним полученную сумму доп. расходов между всем поступлением и остатком, пропорционально количеству			   
	               |;
				   |ВЫБРАТЬ
	               |	УчетЗатрат.АналитикаВидаУчета,
	               |	УчетЗатрат.АналитикаУчетаЗатрат,
	               |	УчетЗатрат.АналитикаУчетаПартий,
	               |	УчетЗатрат.АналитикаРаспределенияЗатрат,
				   |	//ДляРеглУчета	ВЫБОР КОГДА СУММА(УчетЗатрат.КоличествоНУ) = 0 ТОГДА
				   |	//ДляРеглУчета		МАКСИМУМ(ВнешниеПоступленияДопРасходов.СтоимостьНУ)
				   |	//ДляРеглУчета	ИНАЧЕ
				   |	//ДляРеглУчета		МАКСИМУМ(ВнешниеПоступленияДопРасходов.СтоимостьНУ)*(МАКСИМУМ(ТаблицаОстатковПартий.КоличествоНУОстатокНаКонецПериода)-МАКСИМУМ(ТаблицаОстатковПартий.КоличествоНУОстаток))/СУММА(УчетЗатрат.КоличествоНУ) 
				   |	//ДляРеглУчета	КОНЕЦ КАК СтоимостьНУОстаток,
				   |	//ДляРеглУчета	ВЫБОР КОГДА СУММА(УчетЗатрат.КоличествоНУ) = 0 ТОГДА
				   |	//ДляРеглУчета		МАКСИМУМ(ВнешниеПоступленияДопРасходов.ПостояннаяРазница)
				   |	//ДляРеглУчета	ИНАЧЕ
				   |	//ДляРеглУчета		МАКСИМУМ(ВнешниеПоступленияДопРасходов.ПостояннаяРазница)*(МАКСИМУМ(ТаблицаОстатковПартий.КоличествоНУОстатокНаКонецПериода)-МАКСИМУМ(ТаблицаОстатковПартий.КоличествоНУОстаток))/СУММА(УчетЗатрат.КоличествоНУ) 
				   |	//ДляРеглУчета	КОНЕЦ КАК ПостояннаяРазницаОстаток,				   
				   |	ВЫБОР КОГДА СУММА(УчетЗатрат.Количество) = 0 ТОГДА
				   |		МАКСИМУМ(ВнешниеПоступленияДопРасходов.Стоимость)
				   |	ИНАЧЕ
				   |		МАКСИМУМ(ВнешниеПоступленияДопРасходов.Стоимость)*(МАКСИМУМ(ТаблицаОстатковПартий.КоличествоОстатокНаКонецПериода)- МАКСИМУМ(ТаблицаОстатковПартий.КоличествоОстаток))/СУММА(УчетЗатрат.Количество) 
				   |	КОНЕЦ КАК СтоимостьОстаток
				   |ПОМЕСТИТЬ ОстаткиДопРасходов
		           |ИЗ ВнешниеПоступленияДопРасходов КАК ВнешниеПоступленияДопРасходов
				   |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковПартий КАК ТаблицаОстатковПартий
				   |ПО ТаблицаОстатковПартий.АналитикаВидаУчета = ВнешниеПоступленияДопРасходов.АналитикаВидаУчета
				   |	И ТаблицаОстатковПартий.АналитикаУчетаЗатрат = ВнешниеПоступленияДопРасходов.АналитикаУчетаЗатрат
				   |	И ТаблицаОстатковПартий.АналитикаУчетаПартий = ВнешниеПоступленияДопРасходов.АналитикаУчетаПартий
				   |	И ТаблицаОстатковПартий.АналитикаРаспределенияЗатрат = ВнешниеПоступленияДопРасходов.АналитикаРаспределенияЗатрат
				   |ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
				   |ПО ВнешниеПоступленияДопРасходов.АналитикаВидаУчета = УчетЗатрат.АналитикаВидаУчета
				   |	И ВнешниеПоступленияДопРасходов.АналитикаУчетаЗатрат = УчетЗатрат.АналитикаУчетаЗатрат
				   |	И ВнешниеПоступленияДопРасходов.АналитикаУчетаПартий = УчетЗатрат.АналитикаУчетаПартий
				   |	И ВнешниеПоступленияДопРасходов.АналитикаРаспределенияЗатрат = УчетЗатрат.АналитикаРаспределенияЗатрат
				   |	И УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |	И (УчетЗатрат.КорАналитикаВидаУчета = НЕОПРЕДЕЛЕНО)
				   |	И (УчетЗатрат.ВидДвижения = &ВидДвиженияПриход)
				   |	И (УчетЗатрат.Количество <> 0)
	               |
				   |СГРУППИРОВАТЬ ПО
	               |	УчетЗатрат.АналитикаВидаУчета,
	               |	УчетЗатрат.АналитикаУчетаЗатрат,
	               |	УчетЗатрат.АналитикаУчетаПартий,
	               |	УчетЗатрат.АналитикаРаспределенияЗатрат
				   |
				   |;
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВнешниеПоступленияДопРасходов";
				   
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
	Запрос.Выполнить();
	
	//Уменьшаем количество и сумму прихода в узлах, на количество и сумму "зафиксированного" конечного остатка
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаУзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета,
	               |	ТаблицаУзлыКорректировкиСтоимостиСписания.АналитикаУчетаЗатрат,
	               |	ТаблицаУзлыКорректировкиСтоимостиСписания.АналитикаУчетаПартий,
	               |	ТаблицаУзлыКорректировкиСтоимостиСписания.АналитикаРаспределенияЗатрат,
	               |	ТаблицаУзлыКорректировкиСтоимостиСписания.Количество  - ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоОстатокНаКонецПериода,0) + ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоОстаток,0) КАК Количество,
				   |	//ДляРеглУчета	ТаблицаУзлыКорректировкиСтоимостиСписания.КоличествоНУ  - ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоНУОстатокНаКонецПериода,0) + ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоНУОстаток,0) КАК КоличествоНУ,
				   |	//ДляРеглУчета	ВЫБОР КОГДА ТаблицаУзлыКорректировкиСтоимостиСписания.КоличествоНУ  - ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоНУОстатокНаКонецПериода,0) + ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоНУОстаток,0) = 0
				   |	//ДляРеглУчета	ТОГДА 0
				   |	//ДляРеглУчета	ИНАЧЕ (ТаблицаУзлыКорректировкиСтоимостиСписания.СтоимостьНУ*ТаблицаУзлыКорректировкиСтоимостиСписания.КоличествоНУ - ЕСТЬNULL(ТаблицаОстатковПартий.СтоимостьНУОстаток,0) - ЕСТЬNULL(ОстаткиДопРасходов.СтоимостьНУОстаток,0))/
				   |	//ДляРеглУчета			(ТаблицаУзлыКорректировкиСтоимостиСписания.КоличествоНУ  - ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоНУОстатокНаКонецПериода,0) + ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоНУОстаток,0))
				   |	//ДляРеглУчета	КОНЕЦ КАК СтоимостьНУ,
				   |	//ДляРеглУчета	ВЫБОР КОГДА ТаблицаУзлыКорректировкиСтоимостиСписания.КоличествоНУ - ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоНУОстатокНаКонецПериода,0) + ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоНУОстаток,0) = 0
				   |	//ДляРеглУчета	ТОГДА 0
				   |	//ДляРеглУчета	ИНАЧЕ (ТаблицаУзлыКорректировкиСтоимостиСписания.ПостояннаяРазница*ТаблицаУзлыКорректировкиСтоимостиСписания.КоличествоНУ - ЕСТЬNULL(ТаблицаОстатковПартий.ПостояннаяРазницаОстаток,0) - ЕСТЬNULL(ОстаткиДопРасходов.ПостояннаяРазницаОстаток,0))/
				   |	//ДляРеглУчета			(ТаблицаУзлыКорректировкиСтоимостиСписания.КоличествоНУ - ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоНУОстатокНаКонецПериода,0) + ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоНУОстаток,0)) 
				   |	//ДляРеглУчета	КОНЕЦ КАК ПостояннаяРазница,
				   |	ВЫБОР КОГДА ТаблицаУзлыКорректировкиСтоимостиСписания.Количество  - ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоОстатокНаКонецПериода,0) + ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоОстаток,0) = 0
				   |	ТОГДА 0
	               |	ИНАЧЕ (ТаблицаУзлыКорректировкиСтоимостиСписания.Стоимость*ТаблицаУзлыКорректировкиСтоимостиСписания.Количество - ЕСТЬNULL(ТаблицаОстатковПартий.СтоимостьОстаток,0) - ЕСТЬNULL(ОстаткиДопРасходов.СтоимостьОстаток,0))/
				   |			(ТаблицаУзлыКорректировкиСтоимостиСписания.Количество  - ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоОстатокНаКонецПериода,0) + ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоОстаток,0))
				   |	КОНЕЦ КАК Стоимость
	               |ИЗ
	               |	ТаблицаУзлыКорректировкиСтоимостиСписания КАК ТаблицаУзлыКорректировкиСтоимостиСписания
				   |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковПартий КАК ТаблицаОстатковПартий
				   |	ПО ТаблицаУзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета = ТаблицаОстатковПартий.АналитикаВидаУчета
				   |	И ТаблицаУзлыКорректировкиСтоимостиСписания.АналитикаУчетаЗатрат = ТаблицаОстатковПартий.АналитикаУчетаЗатрат
				   |	И ТаблицаУзлыКорректировкиСтоимостиСписания.АналитикаУчетаПартий = ТаблицаОстатковПартий.АналитикаУчетаПартий
				   |	И ТаблицаУзлыКорректировкиСтоимостиСписания.АналитикаРаспределенияЗатрат = ТаблицаОстатковПартий.АналитикаРаспределенияЗатрат
				   |ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиДопРасходов КАК ОстаткиДопРасходов
				   |	ПО ТаблицаУзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета = ОстаткиДопРасходов.АналитикаВидаУчета
				   |	И ТаблицаУзлыКорректировкиСтоимостиСписания.АналитикаУчетаЗатрат = ОстаткиДопРасходов.АналитикаУчетаЗатрат
				   |	И ТаблицаУзлыКорректировкиСтоимостиСписания.АналитикаУчетаПартий = ОстаткиДопРасходов.АналитикаУчетаПартий
				   |	И ТаблицаУзлыКорректировкиСтоимостиСписания.АналитикаРаспределенияЗатрат = ОстаткиДопРасходов.АналитикаРаспределенияЗатрат";
	 Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
КонецПроцедуры	
 
// Функция формирует движения по регистру сведений "УзлыКорректировкиСтоимостиСписания".
//
Функция СформироватьДвиженияПоРегиструУзлыКорректировкиСтоимостиСписания(
	ДатаНач, 
	ДатаКон, 
	РегламентныйДокумент, 
	РегистрУчета, 
	ВидОтраженияВУчете, 
	МенеджерВременныхТаблиц,
	СтруктураПараметров,
	ОперацияРасчетаСебестоимостиВыпуска
	)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	//Получим таблицу новых узлов, каждый узел определяется комбинацией всех 
	//измерений партионного упр. учета
	//В колонки Стоимость, СтоимостьНУ и ПостояннаяРазница помещается средняя цена по соответствующему ресурсу регистров УчетЗатрат и УчетЗатратРегл 
	//по внешнему поступлению для каждого узла. Эти колонки являются правыми частями в системе линейных уравнений. 
	//В колонки Количество и КоличествоНУ помещается общее количество поступления в каждый узел. Если по данному узлу движений по количеству не было, а были
	//только движения по стоимости, значит вместо количества используется стоимость (узел соответствует не материальным расходам).
	//Если из узла было списание по фиксированной стоимости то уменьшаем количество и стоимость поступления в данный узел на количество и стоимость по фиксированной операции.
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	АналиткаДляРасчетов.АналитикаВидаУчета КАК АналитикаВидаУчета,
	|	АналиткаДляРасчетов.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	АналиткаДляРасчетов.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	АналиткаДляРасчетов.АналитикаРаспределенияЗатрат КАК АналитикаРаспределенияЗатрат,
	|
	|	(ВЫБОР КОГДА СУММА(ВложенныйЗапрос.Количество) = 0 ТОГДА 
	|		СУММА(ВложенныйЗапрос.СтоимостьДляКоличества) 
	|	ИНАЧЕ 
	|		СУММА(ВложенныйЗапрос.Количество) 
	|	КОНЕЦ) КАК Количество,
	|
	|	//ДляРеглУчета (ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоНУ) = 0 ТОГДА 
	|	//ДляРеглУчета 		СУММА(ВложенныйЗапрос.СтоимостьДляКоличестваНУ) 
	|	//ДляРеглУчета ИНАЧЕ 
	|	//ДляРеглУчета 		СУММА(ВложенныйЗапрос.КоличествоНУ) 
	|	//ДляРеглУчета КОНЕЦ) КАК КоличествоНУ,
	|
	|	//ДляРеглУчета ВЫБОР КОГДА (СУММА(ВложенныйЗапрос.КоличествоНУ) = 0) 
	|	//ДляРеглУчета 		И (СУММА(ВложенныйЗапрос.СтоимостьДляКоличестваНУ) = 0)
	|	//ДляРеглУчета ТОГДА 
	|	//ДляРеглУчета 		0
	|	//ДляРеглУчета ИНАЧЕ 
	|	//ДляРеглУчета 		СУММА(ВложенныйЗапрос.СтоимостьНУ) / 
	|	//ДляРеглУчета 		(ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоНУ) = 0 ТОГДА 
	|	//ДляРеглУчета 			СУММА(ВложенныйЗапрос.СтоимостьДляКоличестваНУ) 
	|	//ДляРеглУчета 		ИНАЧЕ 
	|	//ДляРеглУчета 			СУММА(ВложенныйЗапрос.КоличествоНУ) 
	|	//ДляРеглУчета 		КОНЕЦ) 
	|	//ДляРеглУчета КОНЕЦ КАК СтоимостьНУ,
	|
	|	//ДляРеглУчета ВЫБОР КОГДА (СУММА(ВложенныйЗапрос.КоличествоНУ) = 0) 
	|	//ДляРеглУчета 		И (СУММА(ВложенныйЗапрос.СтоимостьДляКоличестваНУ) = 0)
	|	//ДляРеглУчета ТОГДА 
	|	//ДляРеглУчета 		0
	|	//ДляРеглУчета ИНАЧЕ 
	|	//ДляРеглУчета 		СУММА(ВложенныйЗапрос.ПостояннаяРазница) / 
	|	//ДляРеглУчета 		(ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоНУ) = 0 ТОГДА 
	|	//ДляРеглУчета 			СУММА(ВложенныйЗапрос.СтоимостьДляКоличестваНУ) 
	|	//ДляРеглУчета 		ИНАЧЕ 
	|	//ДляРеглУчета 			СУММА(ВложенныйЗапрос.КоличествоНУ) 
	|	//ДляРеглУчета 		КОНЕЦ) 
	|	//ДляРеглУчета КОНЕЦ КАК ПостояннаяРазница,
	|
	|	ВЫБОР КОГДА (СУММА(ВложенныйЗапрос.Количество) = 0) 
	|		И (СУММА(ВложенныйЗапрос.СтоимостьДляКоличества) = 0)
	|	ТОГДА 
	|		0
	|	ИНАЧЕ 
	|		СУММА(ВложенныйЗапрос.Стоимость) / 
	|		(ВЫБОР КОГДА СУММА(ВложенныйЗапрос.Количество) = 0 ТОГДА 
	|			СУММА(ВложенныйЗапрос.СтоимостьДляКоличества) 
	|		ИНАЧЕ 
	|			СУММА(ВложенныйЗапрос.Количество) 
	|		КОНЕЦ) 
	|	КОНЕЦ КАК Стоимость
	|//ДляФИФО ПОМЕСТИТЬ ТаблицаУзлыКорректировкиСтоимостиСписания
	|ИЗ (
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		УчетЗатрат.АналитикаВидаУчета КАК АналитикаВидаУчета,
	|		УчетЗатрат.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|		УчетЗатрат.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|		УчетЗатрат.АналитикаРаспределенияЗатрат КАК АналитикаРаспределенияЗатрат
	|	ИЗ
	|		РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	|	ГДЕ
	|		УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И УчетЗатрат.АналитикаВидаУчета В (
	|			ВЫБРАТЬ 
	|				Ссылка 
	|			ИЗ 
	|				ОтборПоАналитикеВидовУчета
	|			)
	|		И (
	|			УчетЗатрат.Количество <> 0
	|			ИЛИ УчетЗатрат.Стоимость <> 0 
	|			//ДляРеглУчета ИЛИ УчетЗатрат.КоличествоНУ <> 0 
	|			//ДляРеглУчета ИЛИ УчетЗатрат.СтоимостьНУ <> 0
	|			//ДляРеглУчета ИЛИ УчетЗатрат.ПостояннаяРазница <> 0
	|			)
	|
	|	) КАК АналиткаДляРасчетов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			УчетЗатрат.АналитикаВидаУчета КАК АналитикаВидаУчета,
	|			УчетЗатрат.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|			УчетЗатрат.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|			УчетЗатрат.АналитикаРаспределенияЗатрат КАК АналитикаРаспределенияЗатрат,
	|
	|			УчетЗатрат.Количество КАК Количество,
	|			УчетЗатрат.Стоимость КАК СтоимостьДляКоличества,
	|
	|			//ДляРеглУчета	УчетЗатрат.КоличествоНУ,
	|			//ДляРеглУчета	УчетЗатрат.СтоимостьНУ+УчетЗатрат.ПостояннаяРазница КАК СтоимостьДляКоличестваНУ,
	|
	|			//ДляРеглУчета	ВЫБОР КОГДА УчетЗатрат.КорАналитикаВидаУчета = Неопределено
	|			//ДляРеглУчета		ИЛИ УчетЗатрат.КодОперации В (&КодыОперацийФиксСтоимость)
	|			//ДляРеглУчета		ИЛИ УчетЗатрат.КорАналитикаВидаУчета В (ВЫБРАТЬ * ИЗ АналитикаВидовУчетаСФиксСтоимостьюСписания)
	|			//ДляРеглУчета	ТОГДА
	|			//ДляРеглУчета		УчетЗатрат.ПостояннаяРазница
	|			//ДляРеглУчета	ИНАЧЕ
	|			//ДляРеглУчета		0
	|			//ДляРеглУчета	КОНЕЦ КАК ПостояннаяРазница,
	|			//ДляРеглУчета	ВЫБОР КОГДА УчетЗатрат.КорАналитикаВидаУчета = Неопределено
	|			//ДляРеглУчета		ИЛИ УчетЗатрат.КодОперации В (&КодыОперацийФиксСтоимость)
	|			//ДляРеглУчета		ИЛИ УчетЗатрат.КорАналитикаВидаУчета В (ВЫБРАТЬ * ИЗ АналитикаВидовУчетаСФиксСтоимостьюСписания)	
	|			//ДляРеглУчета	ТОГДА
	|			//ДляРеглУчета		УчетЗатрат.СтоимостьНУ
	|			//ДляРеглУчета	ИНАЧЕ
	|			//ДляРеглУчета		0
	|			//ДляРеглУчета	КОНЕЦ КАК СтоимостьНУ,
	|
	|			ВЫБОР КОГДА УчетЗатрат.КорАналитикаВидаУчета = Неопределено
	|				ИЛИ УчетЗатрат.КодОперации В (&КодыОперацийФиксСтоимость)
	|				ИЛИ УчетЗатрат.КорАналитикаВидаУчета В (ВЫБРАТЬ * ИЗ АналитикаВидовУчетаСФиксСтоимостьюСписания)
	|			ТОГДА
	|				УчетЗатрат.Стоимость
	|			ИНАЧЕ 
	|				0
	|			КОНЕЦ КАК Стоимость
	|		ИЗ
	|			РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	|		ГДЕ
	|			УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|			И УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И УчетЗатрат.АналитикаВидаУчета В (
	|				ВЫБРАТЬ 
	|					Ссылка 
	|				ИЗ 
	|					ОтборПоАналитикеВидовУчета
	|				)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			УчетЗатрат.АналитикаВидаУчета КАК АналитикаВидаУчета,
	|			УчетЗатрат.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|			УчетЗатрат.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|			УчетЗатрат.АналитикаРаспределенияЗатрат КАК АналитикаРаспределенияЗатрат,
	|
	|			(0 - УчетЗатрат.Количество) КАК Количество,
	|			(0 - УчетЗатрат.Стоимость) КАК СтоимостьДляКоличества,
	|
	|			//ДляРеглУчета	(0 - УчетЗатрат.КоличествоНУ) КАК КоличествоНУ,
	|			//ДляРеглУчета	(0 - УчетЗатрат.СтоимостьНУ-УчетЗатрат.ПостояннаяРазница) КАК СтоимостьДляКоличестваНУ,
	|
	|			//ДляРеглУчета	(0 - УчетЗатрат.ПостояннаяРазница) КАК ПостояннаяРазница,
	|			//ДляРеглУчета	(0 - УчетЗатрат.СтоимостьНУ) КАК СтоимостьНУ,
	|
	|			(0 - УчетЗатрат.Стоимость) КАК Стоимость
	|		ИЗ
	|			РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	|		ГДЕ
	|			УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|			И УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И УчетЗатрат.КодОперации В (&КодыОперацийФиксСтоимость)
	|			И УчетЗатрат.АналитикаВидаУчета В (
	|				ВЫБРАТЬ 
	|					Ссылка 
	|				ИЗ 
	|					ОтборПоАналитикеВидовУчета
	|				)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			УчетЗатратОстатки.АналитикаВидаУчета,
	|			УчетЗатратОстатки.АналитикаУчетаЗатрат,
	|			УчетЗатратОстатки.АналитикаУчетаПартий,
	|			УчетЗатратОстатки.АналитикаРаспределенияЗатрат,
	|			УчетЗатратОстатки.КоличествоОстаток,
	|			УчетЗатратОстатки.СтоимостьОстаток,
	|
	|			//ДляРеглУчета	УчетЗатратОстатки.КоличествоНУОстаток КАК КоличествоНУ,
	|			//ДляРеглУчета	УчетЗатратОстатки.СтоимостьНУОстаток+УчетЗатратОстатки.ПостояннаяРазницаОстаток,
	|			//ДляРеглУчета	УчетЗатратОстатки.ПостояннаяРазницаОстаток КАК ПостояннаяРазница,
	|			//ДляРеглУчета	УчетЗатратОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
	|			УчетЗатратОстатки.СтоимостьОстаток
	|		ИЗ
	|			РегистрНакопления.УчетЗатрат%СуффиксРегл%.Остатки(&ДатаНач, 
	|				АналитикаВидаУчета В (
	|					ВЫБРАТЬ 
	|						Ссылка 
	|					ИЗ 
	|						ОтборПоАналитикеВидовУчета
	|					)
	|			) КАК УчетЗатратОстатки
	|		) КАК ВложенныйЗапрос
	|
	|	ПО 
	|		АналиткаДляРасчетов.АналитикаВидаУчета = ВложенныйЗапрос.АналитикаВидаУчета
	|		И АналиткаДляРасчетов.АналитикаУчетаЗатрат = ВложенныйЗапрос.АналитикаУчетаЗатрат
	|		И АналиткаДляРасчетов.АналитикаУчетаПартий = ВложенныйЗапрос.АналитикаУчетаПартий
	|		И АналиткаДляРасчетов.АналитикаРаспределенияЗатрат = ВложенныйЗапрос.АналитикаРаспределенияЗатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	АналиткаДляРасчетов.АналитикаВидаУчета,
	|	АналиткаДляРасчетов.АналитикаУчетаЗатрат,
	|	АналиткаДляРасчетов.АналитикаУчетаПартий,
	|	АналиткаДляРасчетов.АналитикаРаспределенияЗатрат";
	
	Запрос.УстановитьПараметр("ДатаНач",ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",ДатаКон);
	Запрос.УстановитьПараметр("Регистратор",РегламентныйДокумент);	
	
	КодыОперацийФиксСтоимость = ПолучитьМассивКодовОперацийФиксСтоимость();
	Запрос.УстановитьПараметр("КодыОперацийФиксСтоимость", КодыОперацийФиксСтоимость);
	
    Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
	
	Если СтруктураПараметров.СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
		ПодготовитьЗапросДляСписанияПоФИФО(Запрос, ВидОтраженияВУчете);
	КонецЕсли;	
	
    НомерУзла = 0;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.УзлыКорректировкиСтоимостиСписания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(РегламентныйДокумент);
		НаборЗаписей.Записать(Истина);
		
		КоличествоЭлементовВНаборе = 0;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			КоличествоЭлементовВНаборе = КоличествоЭлементовВНаборе + 1;
			НомерУзла = НомерУзла + 1;
			
			НовыйУзел = НаборЗаписей.Добавить();
			НовыйУзел.НомерУзла = НомерУзла;
			НовыйУзел.Регистратор = РегламентныйДокумент;
			НовыйУзел.Период = РегламентныйДокумент.Дата;
			ЗаполнитьЗначенияСвойств(НовыйУзел,Выборка);
			Если КоличествоЭлементовВНаборе = 1000 Тогда
				НаборЗаписей.Записать(Ложь);
				НаборЗаписей.Очистить();
				КоличествоЭлементовВНаборе = 0;
			КонецЕсли;	
			
		КонецЦикла;	
		
	    НаборЗаписей.Записать(ложь);
		
	КонецЕсли;
	
	//первое приближение (решение на первой итерации)
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла,
	|	//ДляРеглУчета	ВЫБОР КОГДА ПредыдущееРешение.ПостояннаяРазница ЕСТЬ NULL ТОГДА УзлыКорректировкиСтоимостиСписания.ПостояннаяРазница ИНАЧЕ ПредыдущееРешение.ПостояннаяРазница КОНЕЦ КАК ПостояннаяРазница,
	|	//ДляРеглУчета	ВЫБОР КОГДА ПредыдущееРешение.СтоимостьНУ ЕСТЬ NULL ТОГДА УзлыКорректировкиСтоимостиСписания.СтоимостьНУ ИНАЧЕ ПредыдущееРешение.СтоимостьНУ КОНЕЦ КАК СтоимостьНУ,
	|	ВЫБОР КОГДА ПредыдущееРешение.Стоимость ЕСТЬ NULL ТОГДА УзлыКорректировкиСтоимостиСписания.Стоимость ИНАЧЕ ПредыдущееРешение.Стоимость КОНЕЦ КАК Стоимость
	|ПОМЕСТИТЬ ТаблицаРешений
	|ИЗ
	|	РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоеПриближениеДляРешенияСЛУ КАК ПредыдущееРешение
	|	ПО ПредыдущееРешение.АналитикаВидаУчета = УзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета
	|	И ПредыдущееРешение.АналитикаУчетаЗатрат = УзлыКорректировкиСтоимостиСписания.АналитикаУчетаЗатрат
	|	И ПредыдущееРешение.АналитикаУчетаПартий = УзлыКорректировкиСтоимостиСписания.АналитикаУчетаПартий
	|	И ПредыдущееРешение.АналитикаРаспределенияЗатрат = УзлыКорректировкиСтоимостиСписания.АналитикаРаспределенияЗатрат
	|	И ПредыдущееРешение.ДокументРасчетаСебестоимости = &Регистратор
	|	И ПредыдущееРешение.ОперацияРасчетаСебестоимостиВыпуска = &ОперацияРасчетаСебестоимостиВыпуска
	|ГДЕ
	|	УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзла
	|";
	Запрос.УстановитьПараметр("Регистратор",РегламентныйДокумент);
	Запрос.УстановитьПараметр("ОперацияРасчетаСебестоимостиВыпуска",ОперацияРасчетаСебестоимостиВыпуска);
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
	Запрос.Выполнить();
	
	Возврат НомерУзла;
	
КонецФункции	

// Функция формирует массив кодов операций по фиксированной стоимости.
//
// Возвращаемое значение:
//	Массив - Массив кодок операций
//
Функция ПолучитьМассивКодовОперацийФиксСтоимость()
	
	КодыОперацийФиксСтоимость = Новый Массив;
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатацииФикс);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатацииФикс);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатацииФикс);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийПартииТоваров.ВыпускПродукцииФиксНаСклад);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщикуФикс);
	
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
	
	Возврат КодыОперацийФиксСтоимость;
	
КонецФункции // ПолучитьМассивКодовОперацийФиксСтоимость()

// Процедура формирования временной таблицы "АналитикаВидовУчетаСФиксСтоимостьюСписания".
// Расходные движения из аналитики содержащейся в этой таблице не корректируются
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СформироватьВременнуюТаблицуАналитикиВидовУчетаСФиксированнойСтоиомстьюСписания(МенеджерВременныхТаблиц)
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АналитикаВидаУчета.Ссылка
	|
	|ПОМЕСТИТЬ АналитикаВидовУчетаСФиксСтоимостьюСписания
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|ГДЕ
	//Списание со счета 16 считаем по фиксированной стоимости
	|	АналитикаВидаУчета.СчетУчета В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтклонениеВСтоимостиМЦ))
	|";
						  
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры	


// Решает систему линейных уравнений
//
Функция РешитьСЛУРасширеннаяАналитика(ДатаНач, ДатаКон, РегламентныйДокумент, РегистрУчета, ВидОтраженияВУчете, МенеджерВременныхТаблиц,МаксимальноеКоличествоИтераций,ТребуемаяТочность,КоличествоУравненийСЛУ)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНач",ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",ДатаКон);
	Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Регистратор",РегламентныйДокумент);
	
	КодыОперацийФиксСтоимость = ПолучитьМассивКодовОперацийФиксСтоимость();
	Запрос.УстановитьПараметр("КодыОперацийФиксСтоимость", КодыОперацийФиксСтоимость);
	
	ТекущееОтклонение = КоличествоУравненийСЛУ;
	КоличествоИтераций = 0;
	
	//Подготовим таблицу перемещений и списаний за отчетный период
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	УчетЗатрат.КорАналитикаВидаУчета КАК АналитикаВидаУчета,
	|	УчетЗатрат.КорАналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	УчетЗатрат.КорАналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	УчетЗатрат.КорАналитикаРаспределенияЗатрат КАК АналитикаРаспределенияЗатрат,
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла КАК НомерУзла,
	|	
	|	//ДляРеглУчета СУММА(
	|	//ДляРеглУчета 	ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|	//ДляРеглУчета 		УчетЗатрат.КоличествоНУ
	|	//ДляРеглУчета 	ИНАЧЕ
	|	//ДляРеглУчета 		0
	|	//ДляРеглУчета 	КОНЕЦ
	|	//ДляРеглУчета ) КАК КоличествоНУ, 
	|	
	|	//ДляРеглУчета СУММА(ВЫРАЗИТЬ(
	|	//ДляРеглУчета 	ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|	//ДляРеглУчета 		УчетЗатрат.СтоимостьНУ
	|	//ДляРеглУчета 	ИНАЧЕ
	|	//ДляРеглУчета 		0
	|	//ДляРеглУчета 	КОНЕЦ
	|	//ДляРеглУчета  КАК ЧИСЛО(23,10))) КАК СтоимостьНУ,
	|	
	|	//ДляРеглУчета СУММА(ВЫРАЗИТЬ(
	|	//ДляРеглУчета 	ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|	//ДляРеглУчета 		УчетЗатрат.ПостояннаяРазница
	|	//ДляРеглУчета 	ИНАЧЕ
	|	//ДляРеглУчета 		0
	|	//ДляРеглУчета 	КОНЕЦ
	|	//ДляРеглУчета  КАК ЧИСЛО(23,10))) КАК ПостояннаяРазница,	
	|	
	|	СУММА(
	|		ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			УчетЗатрат.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	) КАК Количество, 
	|	СУММА(ВЫРАЗИТЬ(
	|		ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			УчетЗатрат.Стоимость
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	КАК ЧИСЛО(23,10))) КАК Стоимость
	|	
	|ПОМЕСТИТЬ УчетЗатрат
	|ИЗ
	|	РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
	|	ПО 
	|		УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
	|		И УчетЗатрат.АналитикаВидаУчета = УзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета
	|		И УчетЗатрат.АналитикаУчетаЗатрат = УзлыКорректировкиСтоимостиСписания.АналитикаУчетаЗатрат
	|		И УчетЗатрат.АналитикаРаспределенияЗатрат = УзлыКорректировкиСтоимостиСписания.АналитикаРаспределенияЗатрат
	|		И УчетЗатрат.АналитикаУчетаПартий = УзлыКорректировкиСтоимостиСписания.АналитикаУчетаПартий
	|	
	|ГДЕ
	|	УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И УчетЗатрат.АналитикаВидаУчета В (
	|		ВЫБРАТЬ 
	|			Ссылка 
	|		ИЗ 
	|			ОтборПоАналитикеВидовУчета
	|		)
	|	И УчетЗатрат.КодОперации Не В (&КодыОперацийФиксСтоимость)
	|	И (НЕ УзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета В (ВЫБРАТЬ * ИЗ АналитикаВидовУчетаСФиксСтоимостьюСписания))
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗатрат.КорАналитикаВидаУчета,
	|	УчетЗатрат.КорАналитикаУчетаЗатрат,
	|	УчетЗатрат.КорАналитикаУчетаПартий,
	|	УчетЗатрат.КорАналитикаРаспределенияЗатрат,
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаВидаУчета,
	|	АналитикаУчетаЗатрат,
	|	АналитикаРаспределенияЗатрат,
	|	АналитикаУчетаПартий,
	|	НомерУзла
	|";
	
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапроса, ВидОтраженияВУчете);
	Запрос.Выполнить();
	
	//Итерационно ищем решение системы линейных уравнений, пока отклонение не будет меньше требуемого или не будет выполнено требуемое количество итераций расчета
	Пока (ТекущееОтклонение/КоличествоУравненийСЛУ > ТребуемаяТочность) И (КоличествоИтераций < МаксимальноеКоличествоИтераций) Цикл
		
		КоличествоИтераций = КоличествоИтераций + 1;
		
		//Следующая итерация расчета
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	""РешитьСЛУРасширеннаяАналитика"",
		|	УзлыКорректировкиСтоимостиСписания.НомерУзла КАК НомерУзла,
		|
		|	//ДляРеглУчета	СУММА(ВЫРАЗИТЬ(
		|	//ДляРеглУчета		ВЫБОР КОГДА УзлыКорректировкиСтоимостиСписания.КоличествоНУ <> 0 ТОГДА
		|	//ДляРеглУчета			ТаблицаРешений.ПостояннаяРазница *
		|	//ДляРеглУчета			(ВЫБОР КОГДА ВложенныйЗапрос.КоличествоНУ = 0 ТОГДА 
		|	//ДляРеглУчета				ВложенныйЗапрос.СтоимостьНУ + ВложенныйЗапрос.ПостояннаяРазница
		|	//ДляРеглУчета			ИНАЧЕ 
		|	//ДляРеглУчета				ВложенныйЗапрос.КоличествоНУ 
		|	//ДляРеглУчета			КОНЕЦ) / 
		|	//ДляРеглУчета			УзлыКорректировкиСтоимостиСписания.КоличествоНУ
		|	//ДляРеглУчета		ИНАЧЕ
		|	//ДляРеглУчета			0
		|	//ДляРеглУчета		КОНЕЦ
		|	//ДляРеглУчета	КАК ЧИСЛО(23,10))) КАК ПостояннаяРазница,
		|
		|	//ДляРеглУчета	СУММА(ВЫРАЗИТЬ(
		|	//ДляРеглУчета		ВЫБОР КОГДА УзлыКорректировкиСтоимостиСписания.КоличествоНУ <> 0 ТОГДА
		|	//ДляРеглУчета			ТаблицаРешений.СтоимостьНУ *
		|	//ДляРеглУчета			(ВЫБОР КОГДА ВложенныйЗапрос.КоличествоНУ = 0 ТОГДА 
		|	//ДляРеглУчета				ВложенныйЗапрос.СтоимостьНУ + ВложенныйЗапрос.ПостояннаяРазница 
		|	//ДляРеглУчета			ИНАЧЕ 
		|	//ДляРеглУчета				ВложенныйЗапрос.КоличествоНУ 
		|	//ДляРеглУчета			КОНЕЦ) / 
		|	//ДляРеглУчета			УзлыКорректировкиСтоимостиСписания.КоличествоНУ
		|	//ДляРеглУчета		ИНАЧЕ
		|	//ДляРеглУчета			0
		|	//ДляРеглУчета		КОНЕЦ
		|	//ДляРеглУчета	КАК ЧИСЛО(23,10))) КАК СтоимостьНУ,
		|
		|	СУММА(ВЫРАЗИТЬ(
		|		ВЫБОР КОГДА УзлыКорректировкиСтоимостиСписания.Количество <> 0 ТОГДА
		|			ТаблицаРешений.Стоимость *
		|			(ВЫБОР КОГДА ВложенныйЗапрос.Количество = 0 ТОГДА 
		|				ВложенныйЗапрос.Стоимость 
		|			ИНАЧЕ 
		|				ВложенныйЗапрос.Количество 
		|			КОНЕЦ) / 
		|			УзлыКорректировкиСтоимостиСписания.Количество
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ
		|	КАК ЧИСЛО(23,10))) КАК Стоимость
		|
		|ПОМЕСТИТЬ ВременнаяТаблицаРешений
		|ИЗ
		|	РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		УчетЗатрат КАК ВложенныйЗапрос
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			ТаблицаРешений КАК ТаблицаРешений
		|		ПО 
		|			ВложенныйЗапрос.НомерУзла = ТаблицаРешений.НомерУзла
		|
		|	ПО 
		|		УзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета = ВложенныйЗапрос.АналитикаВидаУчета
		|		И УзлыКорректировкиСтоимостиСписания.АналитикаУчетаЗатрат = ВложенныйЗапрос.АналитикаУчетаЗатрат
		|		И УзлыКорректировкиСтоимостиСписания.АналитикаУчетаПартий = ВложенныйЗапрос.АналитикаУчетаПартий
		|		И УзлыКорректировкиСтоимостиСписания.АналитикаРаспределенияЗатрат = ВложенныйЗапрос.АналитикаРаспределенияЗатрат
        |
		|ГДЕ
		|	УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	УзлыКорректировкиСтоимостиСписания.НомерУзла
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|";
	   
        Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	//ДляРеглУчета СУММА(
		|	//ДляРеглУчета 		ВЫБОР КОГДА (ЕСТЬNULL(ТаблицаРешений.ПостояннаяРазница, 0)
		|	//ДляРеглУчета 		- (УзлыКорректировкиСтоимостиСписания.ПостояннаяРазница
		|	//ДляРеглУчета 		+ ЕСТЬNULL(ВременнаяТаблицаРешений.ПостояннаяРазница, 0))) > 0
		|	//ДляРеглУчета 		ТОГДА ЕСТЬNULL(ТаблицаРешений.ПостояннаяРазница, 0)
		|	//ДляРеглУчета 		- (УзлыКорректировкиСтоимостиСписания.ПостояннаяРазница
		|	//ДляРеглУчета 		+ ЕСТЬNULL(ВременнаяТаблицаРешений.ПостояннаяРазница, 0))
		|	//ДляРеглУчета 		ИНАЧЕ -(ЕСТЬNULL(ТаблицаРешений.ПостояннаяРазница, 0)
		|	//ДляРеглУчета 		- (УзлыКорректировкиСтоимостиСписания.ПостояннаяРазница
		|	//ДляРеглУчета 		+ ЕСТЬNULL(ВременнаяТаблицаРешений.ПостояннаяРазница, 0)))
		|	//ДляРеглУчета 		КОНЕЦ
		|	//ДляРеглУчета ) КАК СуммаОтклоненийПР,	
		|
		|	//ДляРеглУчета СУММА(
		|	//ДляРеглУчета 		ВЫБОР КОГДА (ЕСТЬNULL(ТаблицаРешений.СтоимостьНУ,0) 
		|	//ДляРеглУчета 		- (УзлыКорректировкиСтоимостиСписания.СтоимостьНУ 
		|	//ДляРеглУчета 		+ ЕСТЬNULL(ВременнаяТаблицаРешений.СтоимостьНУ,0))) > 0
		|	//ДляРеглУчета 		ТОГДА ЕСТЬNULL(ТаблицаРешений.СтоимостьНУ,0) 
		|	//ДляРеглУчета 		- (УзлыКорректировкиСтоимостиСписания.СтоимостьНУ 
		|	//ДляРеглУчета 		+ ЕСТЬNULL(ВременнаяТаблицаРешений.СтоимостьНУ,0))
		|	//ДляРеглУчета 		ИНАЧЕ -(ЕСТЬNULL(ТаблицаРешений.СтоимостьНУ,0) 
		|	//ДляРеглУчета 		- (УзлыКорректировкиСтоимостиСписания.СтоимостьНУ 
		|	//ДляРеглУчета 		+ ЕСТЬNULL(ВременнаяТаблицаРешений.СтоимостьНУ,0)))
		|	//ДляРеглУчета 		КОНЕЦ
		|	//ДляРеглУчета ) КАК СуммаОтклоненийНУ,	
		|
		|	СУММА(
		|		ВЫБОР КОГДА (ЕСТЬNULL(ТаблицаРешений.Стоимость,0) 
		|		- (УзлыКорректировкиСтоимостиСписания.Стоимость 
		|		+ ЕСТЬNULL(ВременнаяТаблицаРешений.Стоимость,0))) > 0
		|		ТОГДА ЕСТЬNULL(ТаблицаРешений.Стоимость,0) 
		|		- (УзлыКорректировкиСтоимостиСписания.Стоимость 
		|		+ ЕСТЬNULL(ВременнаяТаблицаРешений.Стоимость,0))
		|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаРешений.Стоимость,0) 
		|		- (УзлыКорректировкиСтоимостиСписания.Стоимость 
		|		+ ЕСТЬNULL(ВременнаяТаблицаРешений.Стоимость,0)))
		|		КОНЕЦ
		|	) КАК СуммаОтклонений
		|ИЗ
		|	РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		ВременнаяТаблицаРешений КАК ВременнаяТаблицаРешений
		|	ПО 
		|		ВременнаяТаблицаРешений.НомерУзла = УзлыКорректировкиСтоимостиСписания.НомерУзла
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		ТаблицаРешений КАК ТаблицаРешений
		|	ПО 
		|		ТаблицаРешений.НомерУзла = УзлыКорректировкиСтоимостиСписания.НомерУзла
		|
		|ГДЕ
		|	УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
		|";
		
        Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
		Результат = Запрос.Выполнить();
		СтароеОтклонение = ТекущееОтклонение;
		Если Результат.Пустой() Тогда
			ТекущееОтклонение = 0;//Отклонений нет
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
				ТекущееОтклонениеПР = ?(Выборка.СуммаОтклоненийПР = NULL,0,Выборка.СуммаОтклоненийПР);
				ТекущееОтклонениеНУ = ?(Выборка.СуммаОтклоненийНУ = NULL,0,Выборка.СуммаОтклоненийНУ);
			Иначе
				ТекущееОтклонениеПР = 0;
				ТекущееОтклонениеНУ = 0;
			КонецЕсли;	
			//Определим текущее отклонение от решения
			ТекущееОтклонение = Макс(?(Выборка.СуммаОтклонений = NULL,0,Выборка.СуммаОтклонений), ТекущееОтклонениеПР,ТекущееОтклонениеНУ);
		КонецЕсли;	
		
		Запрос.Текст = "УНИЧТОЖИТЬ ТаблицаРешений";
		Запрос.Выполнить();	
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	УзлыКорректировкиСтоимостиСписания.НомерУзла КАК НомерУзла,
		|	//ДляРеглУчета (УзлыКорректировкиСтоимостиСписания.ПостояннаяРазница 
		|	//ДляРеглУчета + ЕСТЬNULL(ВременнаяТаблицаРешений.ПостояннаяРазница, 0)
		|	//ДляРеглУчета ) КАК ПостояннаяРазница,
		|
		|	//ДляРеглУчета (УзлыКорректировкиСтоимостиСписания.СтоимостьНУ 
		|	//ДляРеглУчета + ЕСТЬNULL(ВременнаяТаблицаРешений.СтоимостьНУ, 0)
		|	//ДляРеглУчета ) КАК СтоимостьНУ,
		|
		|	(УзлыКорректировкиСтоимостиСписания.Стоимость 
		|	+ ЕСТЬNULL(ВременнаяТаблицаРешений.Стоимость, 0)
		|	) КАК Стоимость
		|
		|ПОМЕСТИТЬ ТаблицаРешений
		|ИЗ
		|	РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		ВременнаяТаблицаРешений КАК ВременнаяТаблицаРешений
		|	ПО 
		|		ВременнаяТаблицаРешений.НомерУзла = УзлыКорректировкиСтоимостиСписания.НомерУзла
		|ГДЕ
		|	УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|";
		
		Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
		Запрос.Выполнить();
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВременнаяТаблицаРешений";
		Запрос.Выполнить();	
	КонецЦикла;	
	
	ОбщегоНазначения.Сообщение("Выполненное количество итераций расчета стоимости: " + Строка(КоличествоИтераций));
	ОбщегоНазначения.Сообщение("Полученное среднее отклонение решений: " + Строка(ТекущееОтклонение/КоличествоУравненийСЛУ));
	Возврат Истина;
КонецФункции	

// Процедура проходит путь в графе в обратном направлении и формирует движения по регистру УчетЗатрат
//
Процедура СформироватьКорректирующиеДвиженияВГрафе(СтруктраПараметровКорректирующихДвижений, НомерУзлаДляКорректировки, Знач ВолноваяМетка)
	
	МенеджерВременныхТаблиц = СтруктраПараметровКорректирующихДвижений.МенеджерВременныхТаблиц;
	ТаблицаВолновыхМеток = СтруктраПараметровКорректирующихДвижений.ТаблицаВолновыхМеток;
	СтруктураШапкиДокумента = СтруктраПараметровКорректирующихДвижений.СтруктураШапкиДокумента;
	СтруктраСтоимостей = СтруктраПараметровКорректирующихДвижений.СтруктраСтоимостей;
	НаборЗаписей = СтруктраПараметровКорректирующихДвижений.НаборЗаписей;
	ДатаКон = СтруктраПараметровКорректирующихДвижений.ДатаКон;
	РегламентныйДокумент = СтруктраПараметровКорректирующихДвижений.РегламентныйДокумент;
	МассивКодовОперацийСписания = СтруктраПараметровКорректирующихДвижений.МассивКодовОперацийСписания;
	ВидОтраженияВУчете = СтруктраПараметровКорректирующихДвижений.ВидОтраженияВУчете;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетЗатратДвиженияРасход.АналитикаВидаУчета КАК АналитикаВидаУчета,
	|	УчетЗатратДвиженияРасход.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	УчетЗатратДвиженияРасход.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	УчетЗатратДвиженияРасход.АналитикаРаспределенияЗатрат КАК АналитикаРаспределенияЗатрат,
	|	УчетЗатратДвиженияРасход.КорАналитикаВидаУчета КАК КорАналитикаВидаУчета,
	|	УчетЗатратДвиженияРасход.КорАналитикаУчетаЗатрат КАК КорАналитикаУчетаЗатрат,
	|	УчетЗатратДвиженияРасход.КорАналитикаУчетаПартий КАК КорАналитикаУчетаПартий,
	|	УчетЗатратДвиженияРасход.КорАналитикаРаспределенияЗатрат КАК КорАналитикаРаспределенияЗатрат,
	|	УчетЗатратДвиженияРасход.КодОперации КАК КодОперации
	|ИЗ УчетЗатратДвиженияРасход КАК УчетЗатратДвиженияРасход
	|ГДЕ УчетЗатратДвиженияРасход.НомерУзла = &НомерУзла
	|  И УчетЗатратДвиженияРасход.КорНомерУзла = &КорНомерУзла";
	
	ТаблицаДвиженийДляКорректировки = ТаблицаВолновыхМеток.НайтиСтроки(Новый Структура("НомерУзла, ВолноваяМетка", НомерУзлаДляКорректировки, ВолноваяМетка));
	
	Для Каждого ТекущаяСтрока Из ТаблицаДвиженийДляКорректировки Цикл
		Запрос.УстановитьПараметр("НомерУзла",ТекущаяСтрока.НомерПредыдущегоУзла);  
		Запрос.УстановитьПараметр("КорНомерУзла",ТекущаяСтрока.НомерУзла);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СформироватьДвиженияПоРегиструУчетаЗатрат(
				НаборЗаписей, 
				ДатаКон, 
				РегламентныйДокумент, 
				Выборка.КодОперации, 
				Выборка, 
				СтруктраСтоимостей, 
				МассивКодовОперацийСписания, 
				ВидОтраженияВУчете);
		КонецЕсли;
		
		Если ВолноваяМетка > 0 Тогда
			СформироватьКорректирующиеДвиженияВГрафе(СтруктраПараметровКорректирующихДвижений, ТекущаяСтрока.НомерПредыдущегоУзла, ВолноваяМетка-1)
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

// Функция ищет путь в графе исходный список вершин содержится в таблице ТаблицаВолновыхМеток. 
// Критерием окончания поиска являются: 
// - вершина с ненулевым количественным остатком
// - внешняя вершина (затраты ушли из подсистемы учета затрат)
// 
Функция НайтиПутьВГрафе(МенеджерВременныхТаблиц, ТаблицаВолновыхМеток, СтруктраПараметровПутьВГрафе, Знач НомерТекущеИтерации)
	
	ВидОтраженияВУчете = СтруктраПараметровПутьВГрафе.ВидОтраженияВУчете;
	ГраницаДатаКон = СтруктраПараметровПутьВГрафе.ГраницаДатаКон;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	УчетЗатратДвиженияРасход.КорНомерУзла КАК НомерУзла,
	|	ВЫБОР КОГДА ((УчетЗатратДвиженияРасход.КорНомерУзла = 0) ИЛИ 
	|	//ДляУпрУчета	(ЕСТЬNULL(УчетЗатратРеглОстатки.КоличествоОстаток,0) <> 0)
	|	//ДляБухУчета	(ЕСТЬNULL(УчетЗатратРеглОстатки.КоличествоОстаток,0) <> 0)
	|	//ДляНалУчета	(ЕСТЬNULL(УчетЗатратРеглОстатки.КоличествоНУОстаток,0) <> 0)
	|	) ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ КОНЕЦ КАК РешениеНайдено
	|ИЗ УчетЗатратДвиженияРасход КАК УчетЗатратДвиженияРасход
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатрат%СуффиксРегл%.Остатки(&ГраницаДатаКон, ) КАК УчетЗатратРеглОстатки
	|	ПО УчетЗатратДвиженияРасход.КорАналитикаВидаУчета = УчетЗатратРеглОстатки.АналитикаВидаУчета
	|		И УчетЗатратДвиженияРасход.КорАналитикаУчетаЗатрат = УчетЗатратРеглОстатки.АналитикаУчетаЗатрат
	|		И УчетЗатратДвиженияРасход.КорАналитикаУчетаПартий = УчетЗатратРеглОстатки.АналитикаУчетаПартий
	|		И УчетЗатратДвиженияРасход.КорАналитикаРаспределенияЗатрат = УчетЗатратРеглОстатки.АналитикаРаспределенияЗатрат
	|ГДЕ УчетЗатратДвиженияРасход.НомерУзла = &НомерУзла";
	
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапроса, 
		ВидОтраженияВУчете
	);
	
	Запрос.УстановитьПараметр("ГраницаДатаКон",ГраницаДатаКон);
	
	ТаблицаНовогоФронта = ТаблицаВолновыхМеток.НайтиСтроки(Новый Структура("СтарыйФронт", Ложь));
	НомерТекущеИтерации = НомерТекущеИтерации + 1;
	Для Каждого ТекущаяСтрока Из ТаблицаНовогоФронта Цикл
		ТекущаяСтрока.СтарыйФронт = Истина;//Текущее состояние уже обработали
		
		Запрос.УстановитьПараметр("НомерУзла",ТекущаяСтрока.НомерУзла);
		ТаблицаСостоянийПолучателей = Запрос.Выполнить().Выгрузить();
		
		НайденноеРешение = ТаблицаСостоянийПолучателей.Найти(Истина,"РешениеНайдено");
		Если НайденноеРешение <> Неопределено Тогда 
			//Нашли путь
			//Добавим в таблицу волновых меток толко одну вершину, содержащую решение
			//Для нас важно найти любой, а не кратчайший путь			
			НоваяВолноваяМетка = ТаблицаВолновыхМеток.Добавить();
			НоваяВолноваяМетка.НомерУзла = НайденноеРешение.НомерУзла;
			НоваяВолноваяМетка.НомерПредыдущегоУзла = ТекущаяСтрока.НомерУзла;
			НоваяВолноваяМетка.ВолноваяМетка = НомерТекущеИтерации;
			НоваяВолноваяМетка.СтарыйФронт = Истина;
			Возврат НоваяВолноваяМетка;
		Иначе
			//Путь еще не нашли, готовимся к следующей итерации
			Для Каждого ТекущееСостояниеПолучатель Из ТаблицаСостоянийПолучателей Цикл
				Если ТаблицаВолновыхМеток.Найти(ТекущееСостояниеПолучатель.НомерУзла,"НомерУзла") = Неопределено Тогда
					//Добавим новое состояние в таблицу волновых меток
					НоваяВолноваяМетка = ТаблицаВолновыхМеток.Добавить();
					НоваяВолноваяМетка.НомерУзла = ТекущееСостояниеПолучатель.НомерУзла;
					НоваяВолноваяМетка.НомерПредыдущегоУзла = ТекущаяСтрока.НомерУзла;
					НоваяВолноваяМетка.ВолноваяМетка = НомерТекущеИтерации;
					НоваяВолноваяМетка.СтарыйФронт = Ложь;
					
					//Выполним итерационно поиск пути для новой вершины
					НомерУзлаСРешением = НайтиПутьВГрафе(МенеджерВременныхТаблиц, ТаблицаВолновыхМеток, СтруктраПараметровПутьВГрафе, НомерТекущеИтерации);
					Если НомерУзлаСРешением <> Неопределено Тогда
						//Путь найден, дальнейший обход состояний-получателей делать не требуется
						Возврат НомерУзлаСРешением;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	Возврат Неопределено;			
КонецФункции		

// Процедура распределения зависших сумм без количества (ошибки округления при решении СЛУ).
//
Процедура РаспределитьСуммыБезКоличества(
	СтруктураШапкиДокумента,
	ДатаНач,
	ДатаКон,
	РегламентныйДокумент,
	РегистрУчета,
	ВидОтраженияВУчете,
	МенеджерВременныхТаблиц
	)

	//Возврат;
	
	НаборЗаписей = РегистрыНакопления[РегистрУчета].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(РегламентныйДокумент);
	
	МассивКодовОперацийСписания = ПолучитьМассивКодовОперацийВнешнегоСписания();
	КодыОперацийФиксСтоимость = ПолучитьМассивКодовОперацийФиксСтоимость();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНач",ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",ДатаКон);
	Запрос.УстановитьПараметр("Регистратор",РегламентныйДокумент);			   
	ГраницаДатаКон = Новый Граница(ДатаКон,ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ГраницаДатаКон",ГраницаДатаКон);
	Запрос.УстановитьПараметр("КодыОперацийФиксСтоимость",КодыОперацийФиксСтоимость);
	Запрос.УстановитьПараметр("ГраницаПогрешностиСЛУ",СтруктураШапкиДокумента.ГраницаПогрешностиСЛУ);
	
	//Готовится таблица перемещений
	ТекстЗапроса = "
					|ВЫБРАТЬ
					|	УчетЗатрат.АналитикаВидаУчета КАК АналитикаВидаУчета,
					|	УчетЗатрат.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
					|	УчетЗатрат.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
					|	УчетЗатрат.АналитикаРаспределенияЗатрат КАК АналитикаРаспределенияЗатрат,
					|	УчетЗатрат.КодОперации,
					|	УзлыКорректировкиСтоимостиСписания.НомерУзла,
					|
					|	УчетЗатрат.КорАналитикаВидаУчета КАК КорАналитикаВидаУчета,
					|	УчетЗатрат.КорАналитикаУчетаЗатрат КАК КорАналитикаУчетаЗатрат,
					|	УчетЗатрат.КорАналитикаУчетаПартий КАК КорАналитикаУчетаПартий,
					|	УчетЗатрат.КорАналитикаРаспределенияЗатрат КАК КорАналитикаРаспределенияЗатрат,
					|	ЕСТЬNULL(УзлыКорректировкиСтоимостиСписанияПолучатель.НомерУзла,0) КАК КорНомерУзла,
					|
					|	//ДляНалУчета СУММА(
					|	//ДляНалУчета 		ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА 
					|	//ДляНалУчета 			УчетЗатрат.СтоимостьНУ + УчетЗатрат.ПостояннаяРазница
					|	//ДляНалУчета 		ИНАЧЕ
					|	//ДляНалУчета 			0
					|	//ДляНалУчета 		КОНЕЦ
					|	//ДляНалУчета ) КАК СтоимостьНУ
					|
					|	//ДляУпрУчета СУММА(
					|	//ДляУпрУчета 	ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА 
					|	//ДляУпрУчета 		УчетЗатрат.Стоимость
					|	//ДляУпрУчета 	ИНАЧЕ
					|	//ДляУпрУчета 		0
					|	//ДляУпрУчета 	КОНЕЦ
					|	//ДляУпрУчета ) КАК Стоимость
					|	//ДляБухУчета СУММА(
					|	//ДляБухУчета 	ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА 
					|	//ДляБухУчета 		УчетЗатрат.Стоимость
					|	//ДляБухУчета 	ИНАЧЕ
					|	//ДляБухУчета 		0
					|	//ДляБухУчета 	КОНЕЦ
					|	//ДляБухУчета ) КАК Стоимость
					|
					|ПОМЕСТИТЬ УчетЗатратДвиженияРасход
					|ИЗ
					|	РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
				    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
				    |ПО УзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета = УчетЗатрат.АналитикаВидаУчета
				    |	И УзлыКорректировкиСтоимостиСписания.АналитикаУчетаЗатрат = УчетЗатрат.АналитикаУчетаЗатрат
				    |	И УзлыКорректировкиСтоимостиСписания.АналитикаУчетаПартий = УчетЗатрат.АналитикаУчетаПартий
				    |	И УзлыКорректировкиСтоимостиСписания.АналитикаРаспределенияЗатрат = УчетЗатрат.АналитикаРаспределенияЗатрат
					|	И УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
				    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписанияПолучатель
				    |ПО УзлыКорректировкиСтоимостиСписанияПолучатель.АналитикаВидаУчета = УчетЗатрат.КорАналитикаВидаУчета
				    |	И УзлыКорректировкиСтоимостиСписанияПолучатель.АналитикаУчетаЗатрат = УчетЗатрат.КорАналитикаУчетаЗатрат
				    |	И УзлыКорректировкиСтоимостиСписанияПолучатель.АналитикаУчетаПартий = УчетЗатрат.КорАналитикаУчетаПартий
				    |	И УзлыКорректировкиСтоимостиСписанияПолучатель.АналитикаРаспределенияЗатрат = УчетЗатрат.КорАналитикаРаспределенияЗатрат
					|	И УзлыКорректировкиСтоимостиСписанияПолучатель.Регистратор = &Регистратор
					|ГДЕ
					|	УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
					|	И УчетЗатрат.АналитикаВидаУчета В (
					|		ВЫБРАТЬ 
					|			Ссылка 
					|		ИЗ 
					|			ОтборПоАналитикеВидовУчета
					|		)
					|	И (НЕ (УчетЗатрат.КодОперации В (&КодыОперацийФиксСтоимость)))
					|	//ДляБухУчета И НЕ УчетЗатрат.КорАналитикаВидаУчета = Неопределено
					|	//ДляНалУчета И НЕ УчетЗатрат.КорАналитикаВидаУчета = Неопределено
					//Только движения - расход
					|	И УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
					|
					|СГРУППИРОВАТЬ ПО
					|	УчетЗатрат.АналитикаВидаУчета,
					|	УчетЗатрат.АналитикаУчетаЗатрат,
					|	УчетЗатрат.АналитикаУчетаПартий,
					|	УчетЗатрат.АналитикаРаспределенияЗатрат,
					|	УчетЗатрат.КодОперации,
					|	УзлыКорректировкиСтоимостиСписания.НомерУзла,
					|
					|	УчетЗатрат.КорАналитикаВидаУчета,
					|	УчетЗатрат.КорАналитикаУчетаЗатрат,
					|	УчетЗатрат.КорАналитикаУчетаПартий,
					|	УчетЗатрат.КорАналитикаРаспределенияЗатрат,
					|	УзлыКорректировкиСтоимостиСписанияПолучатель.НомерУзла
					|
					|	//ДляНалУчета ИМЕЮЩИЕ СУММА(
					|	//ДляНалУчета 		ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА 
					|	//ДляНалУчета 			УчетЗатрат.СтоимостьНУ + УчетЗатрат.ПостояннаяРазница
					|	//ДляНалУчета 		ИНАЧЕ
					|	//ДляНалУчета 			0
					|	//ДляНалУчета 		КОНЕЦ
					|	//ДляНалУчета ) <> 0
					|
					|	//ДляУпрУчета ИМЕЮЩИЕ СУММА(
					|	//ДляУпрУчета 	ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА 
					|	//ДляУпрУчета 		УчетЗатрат.Стоимость
					|	//ДляУпрУчета 	ИНАЧЕ
					|	//ДляУпрУчета 		0
					|	//ДляУпрУчета 	КОНЕЦ
					|	//ДляУпрУчета ) <> 0
					|	//ДляБухУчета ИМЕЮЩИЕ СУММА(
					|	//ДляБухУчета 	ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА 
					|	//ДляБухУчета 		УчетЗатрат.Стоимость
					|	//ДляБухУчета 	ИНАЧЕ
					|	//ДляБухУчета 		0
					|	//ДляБухУчета 	КОНЕЦ
					|	//ДляБухУчета ) <> 0
					|	
					|ИНДЕКСИРОВАТЬ ПО
					|	УзлыКорректировкиСтоимостиСписания.НомерУзла,ЕСТЬNULL(УзлыКорректировкиСтоимостиСписанияПолучатель.НомерУзла,0)
					|";
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапроса, 
		ВидОтраженияВУчете
	);

	Запрос.Выполнить();	
	
	//0. Определим список вершин с зависшими копейками
	Запрос.Текст = "ВЫБРАТЬ
	               |	УзлыКорректировкиСтоимостиСписания.НомерУзла,
				   |	//ДляНалУчета УчетЗатратРеглОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
				   |	//ДляНалУчета УчетЗатратРеглОстатки.ПостояннаяРазницаОстаток КАК ПостояннаяРазница
	               |	//ДляУпрУчета УчетЗатратРеглОстатки.СтоимостьОстаток КАК Стоимость
				   |	//ДляБухУчета УчетЗатратРеглОстатки.СтоимостьОстаток КАК Стоимость
	               |ИЗ
	               |	РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатрат%СуффиксРегл%.Остатки(&ГраницаДатаКон, ) КАК УчетЗатратРеглОстатки
	               |		ПО УзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета = УчетЗатратРеглОстатки.АналитикаВидаУчета
	               |			И УзлыКорректировкиСтоимостиСписания.АналитикаУчетаЗатрат = УчетЗатратРеглОстатки.АналитикаУчетаЗатрат
	               |			И УзлыКорректировкиСтоимостиСписания.АналитикаУчетаПартий = УчетЗатратРеглОстатки.АналитикаУчетаПартий
	               |			И УзлыКорректировкиСтоимостиСписания.АналитикаРаспределенияЗатрат = УчетЗатратРеглОстатки.АналитикаРаспределенияЗатрат
	               |	//ДляУпрУчета		И (УчетЗатратРеглОстатки.КоличествоОстаток = 0)
				   |	//ДляБухУчета		И (УчетЗатратРеглОстатки.КоличествоОстаток = 0)
				   |	//ДляНалУчета		И (УчетЗатратРеглОстатки.КоличествоНУОстаток = 0)
	               |ГДЕ
	               |	УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
	               |	//ДляУпрУчета И ((УчетЗатратРеглОстатки.СтоимостьОстаток МЕЖДУ -&ГраницаПогрешностиСЛУ И &ГраницаПогрешностиСЛУ) И (УчетЗатратРеглОстатки.СтоимостьОстаток <> 0))
				   |	//ДляБухУчета И ((УчетЗатратРеглОстатки.СтоимостьОстаток МЕЖДУ -&ГраницаПогрешностиСЛУ И &ГраницаПогрешностиСЛУ) И (УчетЗатратРеглОстатки.СтоимостьОстаток <> 0))
				   |	//ДляНалУчета И (((УчетЗатратРеглОстатки.СтоимостьНУОстаток МЕЖДУ -&ГраницаПогрешностиСЛУ И &ГраницаПогрешностиСЛУ) И (УчетЗатратРеглОстатки.СтоимостьНУОстаток <> 0))
				   |	//ДляНалУчета ИЛИ ((УчетЗатратРеглОстатки.ПостояннаяРазницаОстаток МЕЖДУ -&ГраницаПогрешностиСЛУ И &ГраницаПогрешностиСЛУ) И (УчетЗатратРеглОстатки.ПостояннаяРазницаОстаток <> 0)))";
				   
				   
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		ВидОтраженияВУчете
	 );
	 
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		ТаблицаВолновыхМеток = Новый ТаблицаЗначений();
		ТаблицаВолновыхМеток.Колонки.Добавить("НомерУзла");
		ТаблицаВолновыхМеток.Колонки.Добавить("НомерПредыдущегоУзла");
		ТаблицаВолновыхМеток.Колонки.Добавить("ВолноваяМетка");
		ТаблицаВолновыхМеток.Колонки.Добавить("СтарыйФронт");
		
		СтруктраПараметровКорректирующихДвижений = Новый Структура();
		СтруктраПараметровПутьВГрафе = Новый Структура();
		СтруктраСтоимостей = Новый Структура("Стоимость, СтоимостьНУ, ПостояннаяРазница",0,0,0);
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТаблицаВолновыхМеток.Очистить();
			НоваяСтрока = ТаблицаВолновыхМеток.Добавить();
			НоваяСтрока.НомерУзла = Выборка.НомерУзла;
			НоваяСтрока.НомерПредыдущегоУзла = 0;
			НоваяСтрока.ВолноваяМетка = -1;
			НоваяСтрока.СтарыйФронт = ЛОЖЬ;
			
			СтруктраПараметровПутьВГрафе.Вставить("ГраницаДатаКон",ГраницаДатаКон);
			СтруктраПараметровПутьВГрафе.Вставить("ВидОтраженияВУчете",ВидОтраженияВУчете);
			
			НоваяВолноваяМетка = НайтиПутьВГрафе(МенеджерВременныхТаблиц, ТаблицаВолновыхМеток, СтруктраПараметровПутьВГрафе, -1);
			Если НоваяВолноваяМетка <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктраСтоимостей,Выборка);
                				
				СтруктраПараметровКорректирующихДвижений.Вставить("МенеджерВременныхТаблиц",МенеджерВременныхТаблиц);
				СтруктраПараметровКорректирующихДвижений.Вставить("ТаблицаВолновыхМеток",ТаблицаВолновыхМеток);
				СтруктраПараметровКорректирующихДвижений.Вставить("СтруктураШапкиДокумента",СтруктураШапкиДокумента);
				СтруктраПараметровКорректирующихДвижений.Вставить("СтруктраСтоимостей",СтруктраСтоимостей);
				СтруктраПараметровКорректирующихДвижений.Вставить("НаборЗаписей",НаборЗаписей);
				СтруктраПараметровКорректирующихДвижений.Вставить("ДатаКон",ДатаКон);
				СтруктраПараметровКорректирующихДвижений.Вставить("РегламентныйДокумент",РегламентныйДокумент);
				СтруктраПараметровКорректирующихДвижений.Вставить("МассивКодовОперацийСписания",МассивКодовОперацийСписания);
				СтруктраПараметровКорректирующихДвижений.Вставить("ВидОтраженияВУчете",ВидОтраженияВУчете);
				
				СформироватьКорректирующиеДвиженияВГрафе(СтруктраПараметровКорректирующихДвижений, НоваяВолноваяМетка.НомерУзла, НоваяВолноваяМетка.ВолноваяМетка);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
			
	Запрос.Текст = "
	|УНИЧТОЖИТЬ УчетЗатратДвиженияРасход";
	Запрос.Выполнить();
		
	НаборЗаписей.Записать(Ложь);	
КонецПроцедуры	

// Процедура сохраняет результаты расчета себестоимости в регистре, чтобы использовать их как первое приближение при перепроведении документа
//
Процедура ЗаписатьПолученноеРешение(СтруктураПараметров, ВидОтраженияВУчете, МенеджерВременныхТаблиц, ОперацияРасчетаСебестоимостиВыпуска)
	
	Если ОперацияРасчетаСебестоимостиВыпуска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегламентныйДокумент = СтруктураПараметров.Ссылка;
	
	Запрос = Новый Запрос();
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета,
	|	УзлыКорректировкиСтоимостиСписания.АналитикаУчетаЗатрат,
	|	УзлыКорректировкиСтоимостиСписания.АналитикаУчетаПартий,
	|	УзлыКорректировкиСтоимостиСписания.АналитикаРаспределенияЗатрат,
	|
	|	//ДляРеглУчета ЕСТЬNULL(ТаблицаРешений.ПостояннаяРазница, 0) КАК ПостояннаяРазница,
	|	//ДляРеглУчета ЕСТЬNULL(ТаблицаРешений.СтоимостьНУ, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(ТаблицаРешений.Стоимость,0) КАК Стоимость
	|ИЗ
	|	РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ТаблицаРешений КАК ТаблицаРешений
	|	ПО 
	|		ТаблицаРешений.НомерУзла = УзлыКорректировкиСтоимостиСписания.НомерУзла
	|
	|ГДЕ
	|	УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
	|";
	Запрос.УстановитьПараметр("Регистратор", РегламентныйДокумент);					  
	
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.ПервоеПриближениеДляРешенияСЛУ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументРасчетаСебестоимости.Установить(РегламентныйДокумент);
		НаборЗаписей.Отбор.ОперацияРасчетаСебестоимостиВыпуска.Установить(ОперацияРасчетаСебестоимостиВыпуска);
		
		НаборЗаписей.Записать(Истина);
		
		КоличествоЭлементовВНаборе = 0;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			КоличествоЭлементовВНаборе = КоличествоЭлементовВНаборе + 1;
			
			НовыйУзел = НаборЗаписей.Добавить();
			НовыйУзел.ДокументРасчетаСебестоимости = РегламентныйДокумент;
			НовыйУзел.ОперацияРасчетаСебестоимостиВыпуска = ОперацияРасчетаСебестоимостиВыпуска;
			ЗаполнитьЗначенияСвойств(НовыйУзел,Выборка);
			Если КоличествоЭлементовВНаборе = 1000 Тогда
				НаборЗаписей.Записать(Ложь);
				НаборЗаписей.Очистить();
				КоличествоЭлементовВНаборе = 0;
			КонецЕсли;	
			
		КонецЦикла;	
		
	    НаборЗаписей.Записать(ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует корректирующие движения по регистрам УчетЗатрат и УчетЗатратРегл по результатам расчета сумм корректировки до среднего
//
// Параметры:
//	ДатаНач 					- дата начала месяца, за который производиться корректировка,
//	ДатаКон						- дата окончания месяца, за который производиться корректировка,
//	СтруктураПараметров			- структура параметров, содержит некоторые реквизиты шапки и наборы записей для формирования движений по регистрам,
//	РегистрУчета				- строка, содержит имя регистра учета затрат,
//	ВидОтраженияВУчете			- перечисление, вид учета по которому выполняется корректировка,
//	МенеджерВременныхТаблиц		- Менеджер временных таблиц, в нем содержаться таблица с результатами расчета корректировки.
//
Процедура СформироватьКорректирующиеДвиженияРасширеннаяАналитика(ДатаНач, ДатаКон, СтруктураПараметров, РегистрУчета, ВидОтраженияВУчете, МенеджерВременныхТаблиц)
	
	МассивКодовОперацийСписания = ПолучитьМассивКодовОперацийВнешнегоСписания();
	
	Запрос = Новый Запрос();
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета,
	|	УзлыКорректировкиСтоимостиСписания.АналитикаУчетаЗатрат,
	|	УзлыКорректировкиСтоимостиСписания.АналитикаУчетаПартий,
	|	УзлыКорректировкиСтоимостиСписания.АналитикаРаспределенияЗатрат,
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла КАК НомерУзла,
	|
	|	УчетЗатрат.КорАналитикаВидаУчета КАК КорАналитикаВидаУчета,
	|	УчетЗатрат.КорАналитикаРаспределенияЗатрат КАК КорАналитикаРаспределенияЗатрат,
	|	УчетЗатрат.КорАналитикаУчетаЗатрат КАК КорАналитикаУчетаЗатрат,
	|	УчетЗатрат.КорАналитикаУчетаПартий КАК КорАналитикаУчетаПартий,
	|	УчетЗатрат.КодОперации КАК КодОперации,
	|
	|	//ДляРеглУчета ВЫБОР КОГДА ЕСТЬNULL(УчетЗатрат.КоличествоНУ, 0) = 0
	|	//ДляРеглУчета И ОтборПоАналитикеВидовУчетаРазделМПЗ.Ссылка ЕСТЬ NULL ТОГДА
	|	//ДляРеглУчета 		ЕСТЬNULL(УчетЗатрат.СтоимостьНУ, 0)+ЕСТЬNULL(УчетЗатрат.ПостояннаяРазница, 0)
	|	//ДляРеглУчета ИНАЧЕ 
	|	//ДляРеглУчета 		ЕСТЬNULL(УчетЗатрат.КоличествоНУ, 0)
	|	//ДляРеглУчета КОНЕЦ КАК КоличествоНУ,
	|
	|	//ДляРеглУчета ЕСТЬNULL(УчетЗатрат.ПостояннаяРазница, 0) КАК ПостояннаяРазница,
	|	//ДляРеглУчета ЕСТЬNULL(УчетЗатрат.СтоимостьНУ, 0) КАК СтоимостьНУ,
	|
	|	//ДляРеглУчета ЕСТЬNULL(ТаблицаРешений.ПостояннаяРазница, 0) КАК ЦенаПР,
	|	//ДляРеглУчета ЕСТЬNULL(ТаблицаРешений.СтоимостьНУ, 0) КАК ЦенаНУ,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(УчетЗатрат.Количество, 0) = 0
	|	И ОтборПоАналитикеВидовУчетаРазделМПЗ.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(УчетЗатрат.Стоимость,0)
	|	ИНАЧЕ 
	|		ЕСТЬNULL(УчетЗатрат.Количество,0)
	|	КОНЕЦ КАК Количество,
	|
	|	ЕСТЬNULL(УчетЗатрат.Стоимость,0) КАК Стоимость,
	|	ЕСТЬNULL(ТаблицаРешений.Стоимость,0) КАК Цена
	|ИЗ
	|	РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			УчетЗатрат.АналитикаВидаУчета,
	|			УчетЗатрат.АналитикаУчетаЗатрат,
	|			УчетЗатрат.АналитикаУчетаПартий,
	|			УчетЗатрат.АналитикаРаспределенияЗатрат,
	|			УчетЗатрат.КорАналитикаВидаУчета,
	|			УчетЗатрат.КорАналитикаРаспределенияЗатрат,
	|			УчетЗатрат.КорАналитикаУчетаЗатрат,
	|			УчетЗатрат.КорАналитикаУчетаПартий,
	|			УчетЗатрат.КодОперации,
	|
	|			//ДляРеглУчета СУММА(УчетЗатрат.КоличествоНУ) КАК КоличествоНУ,
	|			//ДляРеглУчета СУММА(УчетЗатрат.ПостояннаяРазница) КАК ПостояннаяРазница,
	|			//ДляРеглУчета СУММА(УчетЗатрат.СтоимостьНУ) КАК СтоимостьНУ,
	|
	|			СУММА(УчетЗатрат.Количество) КАК Количество,
	|			СУММА(УчетЗатрат.Стоимость) КАК Стоимость
	|		ИЗ 
	|			РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	|		ГДЕ
	|			УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|			И УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И УчетЗатрат.АналитикаВидаУчета В (
	|				ВЫБРАТЬ 
	|					Ссылка 
	|				ИЗ 
	|					ОтборПоАналитикеВидовУчета
	|				)
	|			И УчетЗатрат.КодОперации Не В (&КодыОперацийФиксСтоимость)
	|
	|		СГРУППИРОВАТЬ ПО
	|			УчетЗатрат.АналитикаВидаУчета,
	|			УчетЗатрат.АналитикаУчетаЗатрат,
	|			УчетЗатрат.АналитикаУчетаПартий,
	|			УчетЗатрат.АналитикаРаспределенияЗатрат,
	|			УчетЗатрат.КорАналитикаВидаУчета,
	|			УчетЗатрат.КорАналитикаРаспределенияЗатрат,
	|			УчетЗатрат.КорАналитикаУчетаЗатрат,
	|			УчетЗатрат.КорАналитикаУчетаПартий,
	|			УчетЗатрат.КодОперации
	|
	|		) КАК УчетЗатрат
	|	ПО 
	|		УзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета = УчетЗатрат.АналитикаВидаУчета
	|		И УзлыКорректировкиСтоимостиСписания.АналитикаУчетаЗатрат = УчетЗатрат.АналитикаУчетаЗатрат
	|		И УзлыКорректировкиСтоимостиСписания.АналитикаУчетаПартий = УчетЗатрат.АналитикаУчетаПартий
	|		И УзлыКорректировкиСтоимостиСписания.АналитикаРаспределенияЗатрат = УчетЗатрат.АналитикаРаспределенияЗатрат
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ТаблицаРешений КАК ТаблицаРешений
	|	ПО 
	|		ТаблицаРешений.НомерУзла = УзлыКорректировкиСтоимостиСписания.НомерУзла
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ОтборПоАналитикеВидовУчетаРазделМПЗ КАК ОтборПоАналитикеВидовУчетаРазделМПЗ
	|	ПО 
	|		ОтборПоАналитикеВидовУчетаРазделМПЗ.Ссылка = УзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета
	|ГДЕ
	|	УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
	|	И (НЕ УзлыКорректировкиСтоимостиСписания.АналитикаВидаУчета В (ВЫБРАТЬ * ИЗ АналитикаВидовУчетаСФиксСтоимостьюСписания))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерУзла УБЫВ
	|";
	Запрос.УстановитьПараметр("Регистратор", СтруктураПараметров.Ссылка);					  
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	КодыОперацийФиксСтоимость = ПолучитьМассивКодовОперацийФиксСтоимость();
	Запрос.УстановитьПараметр("КодыОперацийФиксСтоимость", КодыОперацийФиксСтоимость);
	
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		НаборЗаписей = РегистрыНакопления[РегистрУчета].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтруктураПараметров.Ссылка);
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		КоличествоЭлементовВНаборе = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КоличествоЭлементовВНаборе = КоличествоЭлементовВНаборе + 1;
			СуммаПеремещения = ВыборкаДетальныеЗаписи.Цена*ВыборкаДетальныеЗаписи.Количество;
			
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
				СуммаПеремещенияПР = ВыборкаДетальныеЗаписи.ЦенаПР * ВыборкаДетальныеЗаписи.КоличествоНУ;
				СуммаПеремещенияНУ = ВыборкаДетальныеЗаписи.ЦенаНУ * ВыборкаДетальныеЗаписи.КоличествоНУ;
			Иначе
				СуммаПеремещенияПР = 0;
				СуммаПеремещенияНУ = 0;
			КонецЕсли;	
			
			//Скорректируем стоимость списания
			СуммаКорректировки = СуммаПеремещения - ВыборкаДетальныеЗаписи.Стоимость;
			
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
				СуммаКорректировкиПР = СуммаПеремещенияПР - ВыборкаДетальныеЗаписи.ПостояннаяРазница;
				СуммаКорректировкиНУ = СуммаПеремещенияНУ - ВыборкаДетальныеЗаписи.СтоимостьНУ;
			Иначе
				СуммаКорректировкиПР = 0;
				СуммаКорректировкиНУ = 0;
			КонецЕсли;	
			
			Если (НЕ Окр(СуммаКорректировки,2) = 0)
			  ИЛИ (НЕ Окр(СуммаКорректировкиПР,2) = 0)
			  ИЛИ (НЕ Окр(СуммаКорректировкиНУ,2) = 0) Тогда
				СтруктраСтоимостей = Новый Структура("Стоимость,СтоимостьНУ,ПостояннаяРазница ",СуммаКорректировки, СуммаКорректировкиНУ, СуммаКорректировкиПР);
				
				СформироватьДвиженияПоРегиструУчетаЗатрат(
					НаборЗаписей, 
					ДатаКон, 
					СтруктураПараметров.Ссылка, 
					ВыборкаДетальныеЗаписи.КодОперации, 
					ВыборкаДетальныеЗаписи, 
					СтруктраСтоимостей, 
					МассивКодовОперацийСписания, 
					ВидОтраженияВУчете);
			КонецЕсли;
			
			Если КоличествоЭлементовВНаборе = 500 Тогда
				НаборЗаписей.Записать(Ложь);
				НаборЗаписей.Очистить();
				КоличествоЭлементовВНаборе = 0;
			КонецЕсли;	
		КонецЦикла;	
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;			
КонецПроцедуры

// Процедура формирует проводки по отклонению в стоимости тары при возврате поставщику
//
// Параметры:
//	СтруктураПараметров			- структура параметров, содержит некоторые реквизиты шапки и наборы записей для формирования движений по регистрам,
//	ТаблицаОтклоненийВСтоимости	- таблица значений, содержит таблицу для формирования отклонений.
//
Процедура СформироватьПроводкиПоОтклонениюВСтоимостиТары(СтруктураПараметров, ТаблицаОтклоненийВСтоимости)
	ТаблицаОтклоненийВСтоимости.Свернуть("АналитикаВидаУчета,АналитикаУчетаПартий,АналитикаУчетаЗатрат, АналитикаРаспределенияЗатрат, КодОперации","Стоимость,ПостояннаяРазница,Количество, КоличествоНУ");
	
	//Получим структуру счетов отражения 
	КэшПоИерархииСчетов = Новый Структура();
	СтруктураАналитики = Новый Структура();
	
	СтруктураАналитики.Вставить("Организация", "Организация");
	СтруктураАналитики.Вставить("ДоговорКомиссионера", "КорДоговорКомиссионера");
	СтруктураАналитики.Вставить("Комиссионер", "КорКомиссионер");
	СтруктураАналитики.Вставить("Склад", "Склад");
	СтруктураАналитики.Вставить("Затрата", "Затрата");
	СтруктураАналитики.Вставить("СчетУчета","СчетУчета");
	СтруктураАналитики.Вставить("СчетУчетаНУ","СчетУчетаНУ");
	
	Отказ = Ложь;
	УправлениеЗапасамиРасширеннаяАналитика.ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаОтклоненийВСтоимости, СтруктураАналитики, Отказ, СтруктураПараметров.СтруктураКлючиАналитики);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСчетУчета");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСчетУчетаНУ");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорЗатрата");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("СтатьяПрочихДоходовРасходовПоТаре");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("НоменклатураНовая");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("СкладПолучатель");
	
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСубконто1");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСубконто2");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСубконто3");
	
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСубконтоНУ1");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСубконтоНУ2");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСубконтоНУ3");
	
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорНоменклатурнаяГруппа");
	
	Для Каждого ТекущаяСтрока Из ТаблицаОтклоненийВСтоимости Цикл
		Счета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ТекущаяСтрока.Организация,ТекущаяСтрока.КорКомиссионер,ТекущаяСтрока.КорДоговорКомиссионера);
		Если ТекущаяСтрока.Стоимость > 0 Тогда
		    ТекущаяСтрока.КорСчетУчета = Счета.СчетУчетаРасходовПоТареБУ;
			ТекущаяСтрока.КорСчетУчетаНУ = Счета.СчетУчетаРасходовПоТареНУ;
			
			ТекущаяСтрока.СтатьяПрочихДоходовРасходовПоТаре = Счета.СтатьяПрочихДоходовРасходовПоТаре;
		Иначе
			ТекущаяСтрока.КорСчетУчета = ТекущаяСтрока.СчетУчета;
			ТекущаяСтрока.КорСчетУчетаНУ = ТекущаяСтрока.СчетУчетаНУ;
			
		    ТекущаяСтрока.СчетУчета = Счета.СчетУчетаДоходовПоТареБУ;
			ТекущаяСтрока.СчетУчетаНУ = Счета.СчетУчетаДоходовПоТареНУ;
			
			ТекущаяСтрока.СтатьяПрочихДоходовРасходовПоТаре = Счета.СтатьяПрочихДоходовРасходовПоТаре;
			
			ТекущаяСтрока.СкладПолучатель = ТекущаяСтрока.Склад;
			
			ТекущаяСтрока.Стоимость = - ТекущаяСтрока.Стоимость;
		КонецЕсли;	
		
		Если СтруктураПараметров.ОтражатьВБухгалтерскомУчете Тогда
			УправлениеЗапасамиРасширеннаяАналитика.ДобавитьПроводку(СтруктураПараметров,"Хозрасчетный",ТекущаяСтрока,КэшПоИерархииСчетов, ТекущаяСтрока.Стоимость);
		КонецЕсли;	
		Если СтруктураПараметров.ОтражатьВНалоговомУчете Тогда
			УправлениеЗапасамиРасширеннаяАналитика.ДобавитьПроводку(СтруктураПараметров,"Налоговый",ТекущаяСтрока,КэшПоИерархииСчетов, ТекущаяСтрока.Стоимость);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

// Процедура формирует проводки по отклонению в стоимости товаров при возврате поставщику
//
// Параметры:
//	СтруктураПараметров			- структура параметров, содержит некоторые реквизиты шапки и наборы записей для формирования движений по регистрам,
//	ТаблицаОтклоненийВСтоимости	- таблица значений, содержит таблицу для формирования отклонений.
//
Процедура СформироватьПроводкиПоОтклонениюВСтоимостиТоваров(СтруктураПараметров, ТаблицаОтклоненийВСтоимости)
	ТаблицаОтклоненийВСтоимости.Свернуть("АналитикаВидаУчета,АналитикаУчетаПартий,АналитикаУчетаЗатрат, АналитикаРаспределенияЗатрат, КодОперации, КорАналитикаВидаУчета, КорАналитикаУчетаПартий, КорАналитикаУчетаЗатрат, КорАналитикаРаспределенияЗатрат","Стоимость,ПостояннаяРазница,Количество, КоличествоНУ");
	
	//Получим структуру счетов отражения 
	КэшПоИерархииСчетов = Новый Структура();
		
	//Формирование аналитики дебета
	СтруктураАналитики = Новый Структура();
	СтруктураАналитики.Вставить("ДоговорКомиссионера", "КорДоговорКомиссионера");
	СтруктураАналитики.Вставить("Комиссионер", "КорКомиссионер");
	СтруктураАналитики.Вставить("СчетУчета","КорСчетУчета");
	СтруктураАналитики.Вставить("СчетУчетаНУ","КорСчетУчетаНУ");
	
	
	Отказ = Ложь;
	УправлениеЗапасамиРасширеннаяАналитика.ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаОтклоненийВСтоимости, СтруктураАналитики, Отказ, СтруктураПараметров.СтруктураКлючиАналитики,Истина);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	//Формирование аналитики кредита
	СтруктураАналитики = Новый Структура();
	СтруктураАналитики.Вставить("Склад", "Склад");
	СтруктураАналитики.Вставить("Затрата", "Затрата");
	СтруктураАналитики.Вставить("СчетУчета","СчетУчета");
	СтруктураАналитики.Вставить("СчетУчетаНУ","СчетУчетаНУ");
	
	Отказ = Ложь;
	УправлениеЗапасамиРасширеннаяАналитика.ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаОтклоненийВСтоимости, СтруктураАналитики, Отказ, СтруктураПараметров.СтруктураКлючиАналитики,Ложь);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("СтатьяПрочихДоходовРасходовПоТаре");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("Организация");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорЗатрата");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("СкладПолучатель");
	
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСубконто1");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСубконто2");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСубконто3");
	
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСубконтоНУ1");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСубконтоНУ2");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорСубконтоНУ3");
	
	Для Каждого ТекущаяСтрока Из ТаблицаОтклоненийВСтоимости Цикл
		ТекущаяСтрока.Организация = ТекущаяСтрока.КорДоговорКомиссионера.Организация;
		
		Если СтруктураПараметров.ОтражатьВБухгалтерскомУчете Тогда
			УправлениеЗапасамиРасширеннаяАналитика.ДобавитьПроводку(СтруктураПараметров,"Хозрасчетный",ТекущаяСтрока,КэшПоИерархииСчетов, ТекущаяСтрока.Стоимость);
		КонецЕсли;	
		Если СтруктураПараметров.ОтражатьВНалоговомУчете Тогда
			УправлениеЗапасамиРасширеннаяАналитика.ДобавитьПроводку(СтруктураПараметров,"Налоговый",ТекущаяСтрока,КэшПоИерархииСчетов, ТекущаяСтрока.Стоимость);
		КонецЕсли;	
		
		//Проверим, чтобы не было проводки между балансовым и забалансовым счетом
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.КорСчетУчета) 
		  ИЛИ ТекущаяСтрока.КорСчетУчета.Забалансовый Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Корреспонденция между балансовыми и забалансовыми счетами не допустима!
			|Проводка по отклонению стоимости товара при возврате поставщику сформирована не будет");
			Продолжить;
		КонецЕсли;	
		
		Счета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ТекущаяСтрока.Организация,ТекущаяСтрока.КорКомиссионер,ТекущаяСтрока.КорДоговорКомиссионера);
		//Проверим, чтобы не было проводки меду балансовым и забалансовым счетом
		Если НЕ ЗначениеЗаполнено(Счета.СчетУчетаРасходовПоТареБУ) 
		  ИЛИ НЕ ЗначениеЗаполнено(Счета.СчетУчетаДоходовПоТареБУ) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнены счета учета доходов и расходов в регистре сведений ""Контрагенты организаций"" для организации " + ТекущаяСтрока.Организация + " и контрагента " + ТекущаяСтрока.КорКомиссионер + "!
			|Проводка по отклонению стоимости товара при возврате поставщику сформирована не будет");
			Продолжить;
		КонецЕсли;		
		
		//Бухгалтерский учет
		Проводка = СтруктураПараметров.Движения.Хозрасчетный.Добавить();
		
		Проводка.Период        = СтруктураПараметров.Дата;
		Проводка.Регистратор   = СтруктураПараметров.Ссылка;
		Проводка.Активность    = Истина;
		Проводка.Организация   = ТекущаяСтрока.Организация;
				
		Если ТекущаяСтрока.Стоимость > 0 Тогда
			
			Проводка.СчетКт = ТекущаяСтрока.КорСчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ТекущаяСтрока.КорКомиссионер);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", ТекущаяСтрока.КорДоговорКомиссионера);
			
		    Проводка.СчетДт = Счета.СчетУчетаРасходовПоТареБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Счета.СтатьяПрочихДоходовРасходовПоТаре);
			
			Проводка.Сумма = ТекущаяСтрока.Стоимость;
		Иначе
			
			Проводка.СчетКт = Счета.СчетУчетаДоходовПоТареБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Счета.СтатьяПрочихДоходовРасходовПоТаре);
			
			Проводка.СчетДт = ТекущаяСтрока.КорСчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ТекущаяСтрока.КорКомиссионер);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ТекущаяСтрока.КорДоговорКомиссионера);
			
			Проводка.Сумма = - ТекущаяСтрока.Стоимость;
		КонецЕсли;	
		
		//Налоговый учет
		Проводка = СтруктураПараметров.Движения.Налоговый.Добавить();
		
		Проводка.Период        = СтруктураПараметров.Дата;
		Проводка.Регистратор   = СтруктураПараметров.Ссылка;
		Проводка.Активность    = Истина;
		Проводка.Организация   = ТекущаяСтрока.Организация;
		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
		Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
				
		Если ТекущаяСтрока.Стоимость > 0 Тогда
			
			Проводка.СчетКт = ТекущаяСтрока.КорСчетУчетаНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ТекущаяСтрока.КорКомиссионер);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", ТекущаяСтрока.КорДоговорКомиссионера);
			
		    Проводка.СчетДт = Счета.СчетУчетаРасходовПоТареНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Счета.СтатьяПрочихДоходовРасходовПоТаре);
			
			Проводка.Сумма = ТекущаяСтрока.Стоимость;
		Иначе
			
			Проводка.СчетКт = Счета.СчетУчетаДоходовПоТареНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Счета.СтатьяПрочихДоходовРасходовПоТаре);
			
			Проводка.СчетДт = ТекущаяСтрока.КорСчетУчетаНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ТекущаяСтрока.КорКомиссионер);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ТекущаяСтрока.КорДоговорКомиссионера);
			
			Проводка.Сумма = - ТекущаяСтрока.Стоимость;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает пустую таблицу значений для хранения отклонений в стоимости тары
//
// Параметры:
//	нет.
//
// Возвращаемое значение:
//	Таблица значений для хранения отклонений в стоимости тары.
//
Функция ИнициализироватьТаблицуОтклоненийВСтоимостиТары()
	ТаблицаОтклоненийВСтоимости = Новый ТаблицаЗначений();
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("АналитикаВидаУчета");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("АналитикаУчетаЗатрат");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("АналитикаУчетаПартий");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("АналитикаРаспределенияЗатрат");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КодОперации");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("Стоимость");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("ПостояннаяРазница");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("Количество");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КоличествоНУ");
	
	Возврат ТаблицаОтклоненийВСтоимости;
КонецФункции

// Функция возвращает пустую таблицу значений для хранения отклонений в стоимости товаров
//
// Параметры:
//	нет.
//
// Возвращаемое значение:
//	Таблица значений для хранения отклонений в стоимости товаров.
//
Функция ИнициализироватьТаблицуОтклоненийВСтоимостиТоваров()
	ТаблицаОтклоненийВСтоимости = Новый ТаблицаЗначений();
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("АналитикаВидаУчета");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("АналитикаУчетаЗатрат");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("АналитикаУчетаПартий");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("АналитикаРаспределенияЗатрат");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорАналитикаВидаУчета");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорАналитикаУчетаЗатрат");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорАналитикаУчетаПартий");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КорАналитикаРаспределенияЗатрат");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КодОперации");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("Стоимость");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("ПостояннаяРазница");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("Количество");
	ТаблицаОтклоненийВСтоимости.Колонки.Добавить("КоличествоНУ");
	
	Возврат ТаблицаОтклоненийВСтоимости;
КонецФункции


// Процедура выполняет дополнительные движения по аналитическим регистрам и формирует проводки по результатам корректировки регистров УчетЗатратРегл.
//
// Параметры:
//  СтруктураПараметров - структура, содержащая параметры проведения по регистрам
//  Отказ -  булево, признак отказа от проведения.
//
Процедура СформироватьДвиженияПоРезультатамКорректировкиРегл(СтруктураПараметров,Отказ=ложь) Экспорт
	
	//Отбор по аналитике видов учета
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РегистрАналитикаВидаУчета.Ссылка
	|
	|ПОМЕСТИТЬ ТаблицаАналитикиВидаУчета
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|ГДЕ
	|	(РегистрАналитикаВидаУчета.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Выпуск)
	|	И РегистрАналитикаВидаУчета.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Наработка))
	|";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	//Таблица движений сформированных документом расчет себестоимости для формирования проводок и движений по аналитическим регистрам
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	УчетЗатратРегл.АналитикаВидаУчета,
	|	УчетЗатратРегл.АналитикаУчетаЗатрат,
	|	УчетЗатратРегл.АналитикаУчетаПартий,
	|	УчетЗатратРегл.АналитикаРаспределенияЗатрат,
	|
	|	УчетЗатратРегл.Количество,
	|	УчетЗатратРегл.КоличествоНУ,
	|	УчетЗатратРегл.Стоимость,
	|	УчетЗатратРегл.СтоимостьНУ,
	|	УчетЗатратРегл.ПостояннаяРазница,
	|
	|	УчетЗатратРегл.КодОперации,
	|	УчетЗатратРегл.КорАналитикаВидаУчета,
	|	УчетЗатратРегл.КорАналитикаУчетаЗатрат,
	|	УчетЗатратРегл.КорАналитикаУчетаПартий,
	|	УчетЗатратРегл.КорАналитикаРаспределенияЗатрат,
	|	УчетЗатратРегл.НомерСтроки КАК НомерСтрокиВРегистре,
	|
	|	РегАналитикаВидаУчета.РазделУчета,
	|	РегАналитикаВидаУчета.Организация,
	|	РегАналитикаВидаУчета.ПодразделениеОрганизации,
	|	РегАналитикаВидаУчета.Подразделение,
	|	РегАналитикаВидаУчета.СчетУчета,
	|	РегАналитикаВидаУчета.СчетУчетаНУ,
	|	РегАналитикаВидаУчета.Проект,
	|	РегАналитикаВидаУчета.Склад,
	|
	|	РегАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	РегАналитикаРаспределенияЗатрат.Продукция,
	|	РегАналитикаРаспределенияЗатрат.ХарактеристикаПродукции,
	|	РегАналитикаРаспределенияЗатрат.СерияПродукции,
	|	РегАналитикаРаспределенияЗатрат.Спецификация,
	|
	|	РегАналитикаУчетаЗатрат.СтатьяЗатрат,
	|	РегАналитикаУчетаЗатрат.Затрата,
	|	РегАналитикаУчетаЗатрат.ХарактеристикаЗатраты,
	|	РегАналитикаУчетаЗатрат.СерияЗатраты,
	|	РегАналитикаУчетаЗатрат.СпособРаспределенияЗатрат,
	|	РегАналитикаУчетаЗатрат.ХарактерЗатрат,
	|	РегАналитикаУчетаЗатрат.Качество,
	|	РегАналитикаУчетаПартий.СтатусПартии,
	|	РегАналитикаУчетаПартий.Заказ,
	|	РегАналитикаУчетаПартий.ДоговорКомитента,
	|	РегАналитикаУчетаПартий.ДоговорКомиссионера,
	|	РегАналитикаУчетаПартий.Комиссионер,
	|
	|	КорРегАналитикаВидаУчета.РазделУчета КАК КорРазделУчета,
	|	КорРегАналитикаВидаУчета.Организация КАК КорОрганизация,
	|	КорРегАналитикаВидаУчета.ПодразделениеОрганизации КАК КорПодразделениеОрганизации,
	|	КорРегАналитикаВидаУчета.Подразделение КАК КорПодразделение,
	|	ЕСТЬNULL(КорРегАналитикаВидаУчета.СчетУчета,КорРегАналитикаУчетаПрочихЗатрат.СчетУчета) КАК КорСчетУчета,
	|	ЕСТЬNULL(КорРегАналитикаВидаУчета.СчетУчетаНУ,КорРегАналитикаУчетаПрочихЗатрат.СчетУчетаНУ) КАК КорСчетУчетаНУ,
	|	КорРегАналитикаВидаУчета.Проект КАК КорПроект,
	|	КорРегАналитикаВидаУчета.Склад КАК КорСклад,
	|	КорРегАналитикаВидаУчета.Склад КАК СкладПолучатель,
	|
	|	КорРегАналитикаУчетаПрочихЗатрат.ОбъектСтроительства КАК КорОбъектСтроительства,
	|	КорРегАналитикаУчетаПрочихЗатрат.СпособСтроительства КАК КорСпособСтроительства,
	|	КорРегАналитикаУчетаПрочихЗатрат.Субконто1 КАК КорСубконто1,
	|	КорРегАналитикаУчетаПрочихЗатрат.Субконто2 КАК КорСубконто2,
	|	КорРегАналитикаУчетаПрочихЗатрат.Субконто3 КАК КорСубконто3,
	|	КорРегАналитикаУчетаПрочихЗатрат.СубконтоНУ1 КАК КорСубконтоНУ1,
	|	КорРегАналитикаУчетаПрочихЗатрат.СубконтоНУ2 КАК КорСубконтоНУ2,
	|	КорРегАналитикаУчетаПрочихЗатрат.СубконтоНУ3 КАК КорСубконтоНУ3,
	|
	|	КорРегАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа КАК КорНоменклатурнаяГруппа,
	|	КорРегАналитикаРаспределенияЗатрат.Продукция КАК КорПродукция,
	|	КорРегАналитикаРаспределенияЗатрат.ХарактеристикаПродукции КАК КорХарактеристикаПродукции,
	|	КорРегАналитикаРаспределенияЗатрат.СерияПродукции КАК КорСерияПродукции,
	|	КорРегАналитикаРаспределенияЗатрат.Спецификация КАК КорСпецификация,
	|
	|	КорРегАналитикаУчетаЗатрат.СтатьяЗатрат КАК КорСтатьяЗатрат,
	|	КорРегАналитикаУчетаЗатрат.Затрата КАК КорЗатрата,
	|	КорРегАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК КорХарактеристикаЗатраты,
	|	КорРегАналитикаУчетаЗатрат.СерияЗатраты КАК КорСерияЗатраты,
	|	КорРегАналитикаУчетаЗатрат.СпособРаспределенияЗатрат КАК КорСпособРаспределенияЗатрат,
	|	КорРегАналитикаУчетаЗатрат.ХарактерЗатрат КАК КорХарактерЗатрат,
	|	КорРегАналитикаУчетаЗатрат.Качество КАК КорКачество,
	|
	|	КорРегАналитикаУчетаПартий.СтатусПартии КАК КорСтатусПартии,
	|	КорРегАналитикаУчетаПартий.Заказ КАК КорЗаказ,
	|	КорРегАналитикаУчетаПартий.ДоговорКомитента КАК КорДоговорКомитента,
	|	КорРегАналитикаУчетаПартий.ДоговорКомиссионера КАК КорДоговорКомиссионера,
	|	КорРегАналитикаУчетаПартий.Комиссионер КАК КорКомиссионер
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл КАК УчетЗатратРегл
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаВидаУчета КАК РегАналитикаВидаУчета
	|	ПО 
	|		УчетЗатратРегл.АналитикаВидаУчета = РегАналитикаВидаУчета.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегАналитикаУчетаЗатрат
	|	ПО 
	|		УчетЗатратРегл.АналитикаУчетаЗатрат = РегАналитикаУчетаЗатрат.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПартий КАК РегАналитикаУчетаПартий
	|	ПО 
	|		УчетЗатратРегл.АналитикаУчетаПартий = РегАналитикаУчетаПартий.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаРаспределенияЗатрат КАК РегАналитикаРаспределенияЗатрат
	|	ПО 
	|		УчетЗатратРегл.АналитикаРаспределенияЗатрат = РегАналитикаРаспределенияЗатрат.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаВидаУчета КАК КорРегАналитикаВидаУчета
	|	ПО 
	|		УчетЗатратРегл.КорАналитикаВидаУчета = КорРегАналитикаВидаУчета.Ссылка
	|		И УчетЗатратРегл.КорАналитикаВидаУчета ССЫЛКА Справочник.КлючиАналитикиВидаУчета
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПрочихЗатрат КАК КорРегАналитикаУчетаПрочихЗатрат
	|	ПО 
	|		УчетЗатратРегл.КорАналитикаВидаУчета = КорРегАналитикаУчетаПрочихЗатрат.Ссылка
	|		И УчетЗатратРегл.КорАналитикаВидаУчета ССЫЛКА Справочник.КлючиАналитикиУчетаПрочихЗатрат
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаЗатрат КАК КорРегАналитикаУчетаЗатрат
	|	ПО 
	|		УчетЗатратРегл.КорАналитикаУчетаЗатрат = КорРегАналитикаУчетаЗатрат.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПартий КАК КорРегАналитикаУчетаПартий
	|	ПО 
	|		УчетЗатратРегл.КорАналитикаУчетаПартий = КорРегАналитикаУчетаПартий.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаРаспределенияЗатрат КАК КорРегАналитикаРаспределенияЗатрат
	|	ПО 
	|		УчетЗатратРегл.КорАналитикаРаспределенияЗатрат = КорРегАналитикаРаспределенияЗатрат.Ссылка
	|ГДЕ
	|	УчетЗатратРегл.Регистратор = &Регистратор
	|	И (КорРегАналитикаВидаУчета.РазделУчета ЕСТЬ NULL ИЛИ (НЕ КорРегАналитикаВидаУчета.РазделУчета В (&СписокИсключаемыхРазделовУчета)))
	|	И УчетЗатратРегл.НомерСтроки >= &НомерСтроки
	|	И УчетЗатратРегл.ВидДвижения = &ВидДвижения
	|	И УчетЗатратРегл.КодОперации Не В (&МассивИсключаемыхКодовОпераций)
	|	И УчетЗатратРегл.АналитикаВидаУчета В (
	|		ВЫБРАТЬ	
	|			Ссылка
	|		ИЗ
	|			ТаблицаАналитикиВидаУчета
	|		)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиВРегистре
	|";
	
	МассивИсключаемыхРазделовУчета = Новый Массив();
	МассивИсключаемыхРазделовУчета.Добавить(Перечисления.РазделыУчета.Выпуск);
	МассивИсключаемыхРазделовУчета.Добавить(Перечисления.РазделыУчета.Наработка);
	
	Запрос.УстановитьПараметр("СписокИсключаемыхРазделовУчета", МассивИсключаемыхРазделовУчета);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Регистратор", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("НомерСтроки", 1);
	
	МассивИсключаемыхКодовОпераций = ПолучитьМассивКодовОперацийСписаниеЗатрат();
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.РаспределениеНЗПРегламент);
	Запрос.УстановитьПараметр("МассивИсключаемыхКодовОпераций", МассивИсключаемыхКодовОпераций);
	
	Результат = Запрос.Выполнить();
	
	Пока НЕ Результат.Пустой() Цикл
		ТаблицаСписания = Результат.Выгрузить();
		КоличествоСтрок = ТаблицаСписания[ТаблицаСписания.Количество()-1].НомерСтрокиВРегистре+1;
		
		ТаблицаОтклоненийВСтоимостиТары = ИнициализироватьТаблицуОтклоненийВСтоимостиТары();
		ТаблицаОтклоненийВСтоимостиТоваров = ИнициализироватьТаблицуОтклоненийВСтоимостиТоваров();
		
		СчетчикЦикла = 0;
		Пока СчетчикЦикла < ТаблицаСписания.Количество() Цикл
			ТекущаяСтрока = ТаблицаСписания.Получить(СчетчикЦикла);
			Если ТекущаяСтрока.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту Тогда
				НоваяСтрока = ТаблицаОтклоненийВСтоимостиТары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрока);
				ТаблицаСписания.Удалить(СчетчикЦикла);
			ИначеЕсли ТекущаяСтрока.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику Тогда
				НоваяСтрока = ТаблицаОтклоненийВСтоимостиТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрока);
				ТаблицаСписания.Удалить(СчетчикЦикла);
			Иначе
				СчетчикЦикла = СчетчикЦикла + 1;
			КонецЕсли;
		КонецЦикла;	
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоАналитическимРегистрам(
					ТаблицаСписания,
					СтруктураПараметров.Ссылка,
					Отказ,
					СтруктураПараметров.Дата,
					СтруктураПараметров.СтруктураКлючиАналитики,
					СтруктураПараметров.Движения,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете);
					
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоАналитическимРегистрам(
					ТаблицаСписания,
					СтруктураПараметров.Ссылка,
					Отказ,
					СтруктураПараметров.Дата,
					СтруктураПараметров.СтруктураКлючиАналитики,
					СтруктураПараметров.Движения,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете);					
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьПроводкиПоРезультатамСписания(СтруктураПараметров, ТаблицаСписания,, Отказ, СтруктураПараметров.СтруктураКлючиАналитики, Истина);				
		
		Для Каждого Движение Из СтруктураПараметров.Движения Цикл
			Если Движение.Значение.Модифицированность() Тогда
				Движение.Значение.Записать(Ложь);
				Движение.Значение.Очистить();
			КонецЕсли;
		КонецЦикла;	
		
		Если ТаблицаОтклоненийВСтоимостиТары.Количество() > 0 Тогда
			СформироватьПроводкиПоОтклонениюВСтоимостиТары(СтруктураПараметров, ТаблицаОтклоненийВСтоимостиТары);
		КонецЕсли;
		
		Если ТаблицаОтклоненийВСтоимостиТоваров.Количество() > 0 Тогда
			СформироватьПроводкиПоОтклонениюВСтоимостиТоваров(СтруктураПараметров, ТаблицаОтклоненийВСтоимостиТоваров);
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("НомерСтроки", КоличествоСтрок); 
		Результат = Запрос.Выполнить();
	КонецЦикла;	
	
	Для Каждого Движение Из СтруктураПараметров.Движения Цикл
		Если Движение.Значение.Модифицированность() Тогда
			Движение.Значение.Записать(Ложь);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры //СформироватьДвиженияПоРезультатамКорректировкиРегл()	

// Процедура выполняет дополнительные движения по аналитическим регистрам по результатам корректировки регистров УчетЗатрат.
//
// Параметры:
//  СтруктураПараметров - структура, содержащая параметры проведения по регистрам
//  Отказ -  булево, признак отказа от проведения.
//
Процедура СформироватьДвиженияПоРезультатамКорректировкиУпр(СтруктураПараметров,Отказ=ложь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	УчетЗатрат.АналитикаВидаУчета,
	|	УчетЗатрат.АналитикаУчетаЗатрат,
	|	УчетЗатрат.АналитикаУчетаПартий,
	|	УчетЗатрат.АналитикаРаспределенияЗатрат,
	|	УчетЗатрат.Количество,
	|	УчетЗатрат.Стоимость,
	|	УчетЗатрат.КодОперации,
	|
	|	УчетЗатрат.КорАналитикаВидаУчета,
	|	УчетЗатрат.КорАналитикаУчетаЗатрат,
	|	УчетЗатрат.КорАналитикаУчетаПартий,
	|	УчетЗатрат.КорАналитикаРаспределенияЗатрат,
	|	УчетЗатрат.НомерСтроки
	|ИЗ
	|	РегистрНакопления.УчетЗатрат КАК УчетЗатрат
	|ГДЕ
	|	УчетЗатрат.Регистратор = &Регистратор
	|	И УчетЗатрат.НомерСтроки > &НомерСтроки
	|	И УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетЗатрат.НомерСтроки
	|";
	Запрос.УстановитьПараметр("Регистратор", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("НомерСтроки", -1);
	Результат = Запрос.Выполнить();
	
	СтруктураКлючиАналитики = Новый Структура();
	КоличествоСтрок = 1;
	Пока НЕ Результат.Пустой() Цикл
		ТаблицаСписания = Результат.Выгрузить();
		КоличествоСтрок = ТаблицаСписания[ТаблицаСписания.Количество()-1].НомерСтроки;
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоАналитическимРегистрам(
					ТаблицаСписания,
					СтруктураПараметров.Ссылка,
					Отказ,
					СтруктураПараметров.Дата,
					СтруктураКлючиАналитики,
					СтруктураПараметров.Движения,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
		
		Для Каждого Движение Из СтруктураПараметров.Движения Цикл
			Если Движение.Значение.Модифицированность() Тогда
				Движение.Значение.Записать(Ложь);
			КонецЕсли;
		КонецЦикла;	
		
		Запрос.УстановитьПараметр("НомерСтроки", КоличествоСтрок); 
		Результат = Запрос.Выполнить();
	КонецЦикла;	
		
КонецПроцедуры //СформироватьДвиженияПоРезультатамКорректировкиУпр()

// Сторнирует предварительную оценку затрат, записанную ранее в регистр 
// процедурой СформироватьВременнуюТаблицуЗатратыБезОценки 
// модуля ПроцедурыРасчетаСебестоимостиРасширеннаяАналитика
// 
// Параметры:
//  Регистратор - регистратор для записи в регистр
//  Период      - период, с которым будут записаны данные в регистр
//  ИмяРегистра - имя регистра: "УчетЗатрат" или "УчетЗатратРегл"
//  МенеджерВременныхТаблиц
//              - менеджер, содержащий таблицу ЗатратыБезОценки
Процедура СторноПредварительнойОценкиЗатрат(Регистратор, Период, ИмяРегистра, МенеджерВременныхТаблиц)
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		// предварительная оценка не выполнялась
		Возврат;
	КонецЕсли;

	// Уберем предварительную оценку затрат, записанную ранее в регистр
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗатратыБезОценки.АналитикаВидаУчета,
	|	ЗатратыБезОценки.АналитикаУчетаЗатрат,
	|	ЗатратыБезОценки.АналитикаУчетаПартий,
	|	ЗатратыБезОценки.АналитикаРаспределенияЗатрат,
	|	-ЗатратыБезОценки.Количество КАК Количество,
	|	-ЗатратыБезОценки.КоличествоНУ КАК КоличествоНУ,
	|	-ЗатратыБезОценки.Стоимость КАК Стоимость,
	|	-ЗатратыБезОценки.СтоимостьНУ КАК СтоимостьНУ,
	|	-ЗатратыБезОценки.ПостояннаяРазница КАК ПостояннаяРазница,
	|	ЗатратыБезОценки.КодОперации
	|ИЗ
	|	ЗатратыБезОценки КАК ЗатратыБезОценки");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();

	// Код выполняется при вызове из документа Расчет себестоимости,
	// в этом случае в МассивРегистровУчета будет только один элемент
	НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НаборЗаписей.ДобавитьПриход();
		НоваяСтрока.Период = Период;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;

	Если НаборЗаписей.Модифицированность() Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры //СторноПредварительнойОценкиЗатрат

// Процедура выполняет корректировку стоимости в регистрах УчетЗатрат и УчетЗатратРегл.
//
// Параметры:
//  ДатаНач - дата начала периода корректировки,
//  ДатаКон -  дата окончания периода корректировки,
//  РегламентныйДокумент - ссылка на документ, по которому выполняется корректировка,
//  ОтборПоАналитикеВидовУчета - массив аналитик видов учета, в приделах которых следует проводить корректировку.
//
Процедура КорректировкаСписанияУчетЗатрат(ДатаНач, ДатаКон, РегламентныйДокумент,ОтборПоАналитикеВидовУчета = Неопределено, ОперацияРасчетаСебестоимостиВыпуска=Неопределено, МенеджерВременнойТаблицыПредварительнаяОценкаЗатрат = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	МассивРегистровУчета = ПолучитьМассивРегистровПоВидуУчета(РегламентныйДокумент);
	
	//Сформируем структуру параметров для передачи в качестве параметров в процедуры
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Дата",РегламентныйДокумент.Дата);
	СтруктураПараметров.Вставить("Ссылка",РегламентныйДокумент.Ссылка);
	СтруктураПараметров.Вставить("СтруктураКлючиАналитики",Новый Структура());
	
	Если РегламентныйДокумент.ОтражатьВУправленческомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
		ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаКон, РегламентныйДокумент.Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
			СтруктураПараметров.Вставить("СпособОценкиМПЗ", ПараметрыУчетнойПолитики.СпособОценкиМПЗ);
		Иначе
			СтруктураПараметров.Вставить("СпособОценкиМПЗ", Перечисления.СпособыОценки.ПоСредней);
		КонецЕсли; 		
	ИначеЕсли РегламентныйДокумент.ОтражатьВБухгалтерскомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете;	
		СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете",Истина);
		СтруктураПараметров.Вставить("ОтражатьВНалоговомУчете",Истина);
		
		ПараметрыУчетнойПолитикиРегл = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаКон, РегламентныйДокумент.Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
			СтруктураПараметров.Вставить("ПоддержкаПБУ18", ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18);
			СтруктураПараметров.Вставить("СпособОценкиМПЗ", ПараметрыУчетнойПолитикиРегл.СпособОценкиМПЗ);
		Иначе
			СтруктураПараметров.Вставить("ПоддержкаПБУ18", Ложь);
			СтруктураПараметров.Вставить("СпособОценкиМПЗ", Перечисления.СпособыОценки.ПоСредней);
		КонецЕсли; 
	ИначеЕсли РегламентныйДокумент.ОтражатьВНалоговомУчете Тогда
		ОбщегоНазначения.Сообщение("Для налогового учета корректировка стоимости списания с использованием режима расширенной аналитики 
		|выполняется только совместо с бухгалтерским учетом");
		Возврат;
	Иначе
		ОбщегоНазначения.Сообщение("Для международного учета корректировка стоимости списания с использованием режима расширенной аналитики не поддерживается. 
		|Снимите флаг ""Использовать расширенную аналитику учета затрат"" в настройках учета");
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("Движения",Новый Структура());
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
		СтруктураПараметров.Движения.Вставить("Хозрасчетный",РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей());
		СтруктураПараметров.Движения.Хозрасчетный.Отбор.Регистратор.Установить(РегламентныйДокумент.Ссылка);
		СтруктураПараметров.Движения.Вставить("Налоговый",РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей());
		СтруктураПараметров.Движения.Налоговый.Отбор.Регистратор.Установить(РегламентныйДокумент.Ссылка);
	КонецЕсли;		
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Движения.Вставить("ПродажиСебестоимость",РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());
		СтруктураПараметров.Движения.ПродажиСебестоимость.Отбор.Регистратор.Установить(СтруктураПараметров.Ссылка);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ОтладочныйРежим", Ложь);
	
	СтруктураПараметров.Вставить("МаксимальноеКоличествоИтераций", глЗначениеПеременной("МаксимальноеКоличествоИтерацийСЛУ"));
	СтруктураПараметров.Вставить("ГраницаПогрешностиСЛУ", глЗначениеПеременной("ГраницаПогрешностиСЛУ"));
	СтруктураПараметров.Вставить("СреднееОтклонениеСЛУ", глЗначениеПеременной("СреднееОтклонениеСЛУ"));
	
	Если СтруктураПараметров.МаксимальноеКоличествоИтераций = 0 Тогда
		ОбщегоНазначения.Сообщение("Константа ""Максимальное количество итераций СЛУ"" установлена равной нулю. Корректировка стоимости выполнена не будет");
	КонецЕсли;	

	//Сформируем во временной таблице отбор по АналитикеВидовУчета в соответствии с переданным параметром и организацией
	СформироватьВременнуюТаблицуОтборПоАналитикеВидовУчета(
		СтруктураПараметров,
		РегламентныйДокумент,
		ОтборПоАналитикеВидовУчета,
		МенеджерВременныхТаблиц
	);
	
	//Сформируем временную таблицу аналитик вида учета, списание из которых делается по фиксированной стоимости
	СформироватьВременнуюТаблицуАналитикиВидовУчетаСФиксированнойСтоиомстьюСписания(МенеджерВременныхТаблиц);
	
	Для Каждого РегистрУчета Из МассивРегистровУчета Цикл
		
		//Сформируем список состояний
		КоличествоУравненийСЛУ = СформироватьДвиженияПоРегиструУзлыКорректировкиСтоимостиСписания(
			ДатаНач,
			ДатаКон,
			РегламентныйДокумент,
			РегистрУчета,
			ВидОтраженияВУчете,
			МенеджерВременныхТаблиц,
			СтруктураПараметров,
			ОперацияРасчетаСебестоимостиВыпуска
		);
		
		Если КоличествоУравненийСЛУ > 0 Тогда
			
			//Решим СЛУ и определим среднюю цену в каждом состоянии
			РешениеНайдено = РешитьСЛУРасширеннаяАналитика(
								ДатаНач,
								ДатаКон,
								РегламентныйДокумент,
								РегистрУчета,
								ВидОтраженияВУчете,
								МенеджерВременныхТаблиц,
								СтруктураПараметров.МаксимальноеКоличествоИтераций,
								СтруктураПараметров.СреднееОтклонениеСЛУ,
								КоличествоУравненийСЛУ
							);
			Если Не РешениеНайдено Тогда				
				Возврат;
			КонецЕсли;	
			
			//Зафиксируем полученное решение в БД для того, чтобы его использовать на последующих итерациях
			ЗаписатьПолученноеРешение(
				СтруктураПараметров,	
				ВидОтраженияВУчете, 
				МенеджерВременныхТаблиц,
				ОперацияРасчетаСебестоимостиВыпуска);			
			
			//Скорректируем движения по состояниям
			СформироватьКорректирующиеДвиженияРасширеннаяАналитика(
				ДатаНач,
				ДатаКон,
				СтруктураПараметров,
				РегистрУчета,
				ВидОтраженияВУчете,
				МенеджерВременныхТаблиц
			);
			
			СторноПредварительнойОценкиЗатрат(
				РегламентныйДокумент, 
				ДатаКон, 
				РегистрУчета, 
				МенеджерВременнойТаблицыПредварительнаяОценкаЗатрат);
			
			//Распределим оставшиеся в состояниях копейки (результаты ошибок округления)
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
				//Для регламентированного учета отдельно распределеим копейки по БУ и НУ
				РаспределитьСуммыБезКоличества(
					СтруктураПараметров,
					ДатаНач,
					ДатаКон,
					РегламентныйДокумент,
					РегистрУчета,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
					МенеджерВременныхТаблиц
				);
				РаспределитьСуммыБезКоличества(
					СтруктураПараметров,
					ДатаНач,
					ДатаКон,
					РегламентныйДокумент,
					РегистрУчета,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете,
					МенеджерВременныхТаблиц
				);				
			Иначе
				РаспределитьСуммыБезКоличества(
					СтруктураПараметров,
					ДатаНач,
					ДатаКон,
					РегламентныйДокумент,
					РегистрУчета,
					ВидОтраженияВУчете,
					МенеджерВременныхТаблиц
				);
			КонецЕсли;	
			
			//Если процедура вызвана из документа "КорректировкаСтоимостиСписанияТоваров" сформируем дополнительные движения по результатам списания
			Если ТипЗНЧ(РегламентныйДокумент) = Тип("ДокументСсылка.КорректировкаСтоимостиСписанияТоваров") Тогда
				Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
					СформироватьДвиженияПоРезультатамКорректировкиРегл(СтруктураПараметров);
				КонецЕсли;	
				Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
					СформироватьДвиженияПоРезультатамКорректировкиУпр(СтруктураПараметров);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры //КорректировкаСписанияУчетЗатрат()

// Функция получения массива кодов операций по списанию затрат.
//
// Возвращаемое значение:
//	Массив - массив кодов операций
//
Функция ПолучитьМассивКодовОперацийСписаниеЗатрат() Экспорт
	
	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатраты.СписаниеОХР_Регламент);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатраты.СписаниеОПР_Регламент);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатраты.СписаниеРасходовНаПродажу);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийБракВПроизводстве.СписаниеБракВПроизводстве_Регламент);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатраты.ЗакрытиеКосвенныхРасходовНУ);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПРегламент);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	                                                                         
	Возврат МассивКодовОпераций;
	
КонецФункции // ПолучитьМассивКодовОперацийСписаниеЗатрат()

