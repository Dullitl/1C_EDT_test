// Определение порядка признания постоянных разниц по расчетам по курсовым разницам в у.е.
//
// Параметры
//	ДатаДок - Текущая дата
Функция  ПолучитьУчетПРпоРасчетамВУЕ(ДатаДока) Экспорт  
	
	ДатаНачалаУчетПРВКурсовыхРазницахПоРасчетамВУЕ= глЗначениеПеременной("ДатаНачалаУчетаПостоянныхРазницВКурсовыхРазницахПоРасчетамВУЕ");
	Возврат  (Не ДатаНачалаУчетПРВКурсовыхРазницахПоРасчетамВУЕ = Дата('00010101')) И (ДатаНачалаУчетПРВКурсовыхРазницахПоРасчетамВУЕ <= ДатаДока);
	
КонецФункции

// ПРОЦЕДУРЫ ОПЛАТЫ, РЕГИСТРАЦИИ ДОКУМЕНТОВ ОПЛАТЫ В РЕГИСТРЕ СВЕДЕНИЙ (РАСЧЕТЫ [ПРИОБРЕТЕНИЕ|РЕАЛИЗАЦИЯ]ОРГАНИЗАЦИЙ)
//

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (УНИВЕРСАЛЬНЫЕ)

// Универсальная процедура определения необходимости сдвига границы последовательности назад исходя из 
// текущей границы и переданного момента времени.
// В случае, если граница последовательности больше, чем указанный момент времени, производится изменение
// границы последовательности на указанный момент времени.
// Параметры:
//		ИмяПоследовательности - строка - имя обрабатываемой последовательности;
//		МоментВремени - МоментВремени - момент времени, с которым производится сравнение текущей границы последовательности,
//										на этот момент устанавливается граница последовательности;
//		Измерения - структура - Структура измерений последовательности,
//								если в последовательности нет измерений - Неопределено 
//				Ключ - имя измерения, 
//				Значение - значение отбора
//		БлокироватьГраницу - булево - Признак блокировки границы последовательности.
//									  Если передано "Истина" - граница будет заблокирована при чтении.
//
Процедура СдвигГраницыПоследовательностиНазад(ИмяПоследовательности, МоментВремени , Измерения = Неопределено, БлокироватьГраницу = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоследовательностьГраницы.МоментВремени
	|ИЗ
	|	Последовательность."+ИмяПоследовательности+".Границы КАК ПоследовательностьГраницы
	| ";
	
	Если не Измерения = неопределено и не Измерения.Количество() = 0 тогда
		Запрос.Текст = Запрос.Текст+"
		|ГДЕ
		| Истина "; 
		
		Для каждого Измерение Из Измерения Цикл
			Запрос.Текст = Запрос.Текст+"
			|	И ПоследовательностьГраницы."+Измерение.Ключ+" = &"+Измерение.Ключ+"
			|";
			Запрос.УстановитьПараметр(Измерение.Ключ, Измерение.Значение);
		КонецЦикла; 
		
	КонецЕсли;
	
	Если БлокироватьГраницу Тогда
		Запрос.Текст = Запрос.Текст+"
		|ДЛЯ ИЗМЕНЕНИЯ";
	КонецЕсли; 
	
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
				
		СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы, ИмяТаблицы", 
			"Последовательность", ИмяПоследовательности);
		Если НЕ БлокироватьГраницу Тогда
			СтруктураПараметровБлокировки.Вставить("РежимБлокировки", РежимБлокировкиДанных.Разделяемый);
		КонецЕсли;
		
		СтруктураЗначенийБлокировки = Новый Структура;
		Если НЕ Измерения = Неопределено Тогда
			Для каждого Измерение Из Измерения Цикл
				СтруктураЗначенийБлокировки.Вставить(Измерение.Ключ, Измерение.Значение);
			КонецЦикла; 
		КонецЕсли;
		
		Отказ     = Ложь;
		Заголовок = "";
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, , Отказ, Заголовок);
				
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		// Граница переносится назад, если документ проводится задним числом
		Если МоментВремени.Сравнить(Выборка.МоментВремени) = -1 Тогда
			Последовательности[ИмяПоследовательности].УстановитьГраницу(МоментВремени,Измерения);
		КонецЕсли;
	// АБС ВСТАВКА Фролов 20121014
	// Так же сдвинем границу последовательности в случае если граница не была найдена
	Иначе
		Последовательности[ИмяПоследовательности].УстановитьГраницу(МоментВремени,Измерения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура "сворачивает" проводки корректировки долга с видом операции "Проведение взаимозачета",
// сформированные первоначально в корреспонденции со вспомогательным счетом 000.
// Вызывается из модуля документа "Корректировка долга" и из обработки восстановления последовательностей по взаиморасчетам.
// Параметры:
// ПроводкиБУ - <РегистрыБухгалтерии.Хозрасчетный.НаборЗаписей> - набор записей по счетам взаиморасчетов
//               в корреспонденции со счетом 000
//
Процедура СопоставитьПроводкиКорректировкиДолгаСВспомогательнымСчетом(ПроводкиБУ) Экспорт
	
	ПроводкиКУдалению   = Новый массив();
	ДвиженияДебет       = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей().Выгрузить();
	ДвиженияКредит      = ДвиженияДебет.Скопировать();
	ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	СформированныеДвижения = ПроводкиБУ.Выгрузить();
	Для каждого СтрокаДвижений Из СформированныеДвижения Цикл
		Если СтрокаДвижений.СчетДт = ВспомогательныйСчет Тогда
			ДвижениеКредит = ДвиженияКредит.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеКредит, СтрокаДвижений);
			ПроводкиКУдалению.Добавить(ПроводкиБУ[СтрокаДвижений.НомерСтроки -1]);
		ИначеЕсли СтрокаДвижений.СчетКт = ВспомогательныйСчет Тогда
			ДвижениеДебет = ДвиженияДебет.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеДебет, СтрокаДвижений);
			ПроводкиКУдалению.Добавить(ПроводкиБУ[СтрокаДвижений.НомерСтроки -1]);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого ПроводкаКУдалению Из ПроводкиКУдалению Цикл
		ПроводкиБУ.Удалить(ПроводкаКУдалению);
	КонецЦикла; 
	
	Для каждого СтрокаСчетаКредита Из ДвиженияКредит Цикл
		
		Для каждого СтрокаСчетаДебета Из ДвиженияДебет Цикл
			Если СтрокаСчетаКредита.Сумма = 0 Тогда
				Прервать;
			КонецЕсли;
			Если СтрокаСчетаДебета.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаСоответствия = мин(СтрокаСчетаКредита.Сумма,СтрокаСчетаДебета.Сумма);
			
			Если СуммаСоответствия = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			// Проводка взаимозачета
			Проводка                = ПроводкиБУ.Добавить();
			
			Проводка.Период			= СтрокаСчетаКредита.Период;
			Проводка.Организация	= СтрокаСчетаКредита.Организация;
			Проводка.НомерЖурнала	= СтрокаСчетаКредита.НомерЖурнала;
			Проводка.Содержание		= "Взаимозачет";
			Проводка.Сумма			= СуммаСоответствия;
			
			Проводка.СчетДт			= СтрокаСчетаДебета.СчетДт;
			Для НомерСубконто = 1 По 3 Цикл
				БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаСчетаДебета["ВидСубконтоДт" + НомерСубконто], СтрокаСчетаДебета["СубконтоДт" + НомерСубконто]);
			КонецЦикла; 
			
			Проводка.ВалютаДт		= СтрокаСчетаДебета.ВалютаДт;
			Проводка.ВалютнаяСуммаДт= Окр(СтрокаСчетаДебета.ВалютнаяСуммаДт*СуммаСоответствия/СтрокаСчетаДебета.Сумма,2);
			
			Проводка.СчетКт			= СтрокаСчетаКредита.СчетКт;
			Для НомерСубконто = 1 По 3 Цикл
				БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаСчетаКредита["ВидСубконтоКт" + НомерСубконто], СтрокаСчетаКредита["СубконтоКт" + НомерСубконто]);
			КонецЦикла; 
			
			Проводка.ВалютаКт		= СтрокаСчетаКредита.ВалютаКт;
			Проводка.ВалютнаяСуммаКт= Окр(СтрокаСчетаКредита.ВалютнаяСуммаКт*СуммаСоответствия/СтрокаСчетаКредита.Сумма,2);
			
			СтрокаСчетаКредита.Сумма			= СтрокаСчетаКредита.Сумма - СуммаСоответствия;
			СтрокаСчетаКредита.ВалютнаяСуммаКт = СтрокаСчетаКредита.ВалютнаяСуммаКт - Проводка.ВалютнаяСуммаКт;
			
			СтрокаСчетаДебета.Сумма			= СтрокаСчетаДебета.Сумма - СуммаСоответствия;
			СтрокаСчетаДебета.ВалютнаяСуммаДт = СтрокаСчетаДебета.ВалютнаяСуммаДт - Проводка.ВалютнаяСуммаДт;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАЧЕТА АВАНСА, РЕГИСТРАЦИИ ДОКУМЕНТОВ ПРИОБРЕТЕНИЯ/РЕАЛИЗАЦИИ В РЕГИСТРЕ СВЕДЕНИЙ (РАСЧЕТЫ [ПРИОБРЕТЕНИЕ|РЕАЛИЗАЦИЯ]ОРГАНИЗАЦИЙ)

//////////////////////////////////////////////////////////////////////////////////////
// Подготовка данных по оплате для обработки

//Определяет направление движения денежных средств в зависимости от вида документа и вида операции документа
Функция ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента,ВидОперации = неопределено)Экспорт

	ВидДействийДокумента = Новый Структура("Направление,РасчетыВозврат");
	ВидыДокументовДДС    = Новый Соответствие();

	ВидыДокументовДДС.Вставить("АккредитивПереданный","Выбытие");
	ВидыДокументовДДС.Вставить("ИнкассовоеПоручениеПолученное","Выбытие");
	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеИсходящее","Выбытие");
	ВидыДокументовДДС.Вставить("ПлатежноеТребованиеПолученное","Выбытие");
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерСписаниеДенежныхСредств","Выбытие");
	ВидыДокументовДДС.Вставить("РасходныйКассовыйОрдер","Выбытие");
	ВидыДокументовДДС.Вставить("АвансовыйОтчет","Выбытие");
	
	ВидыДокументовДДС.Вставить("АккредитивПолученный","Поступление");
	ВидыДокументовДДС.Вставить("ИнкассовоеПоручениеПереданное","Поступление");
	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеВходящее","Поступление");
	ВидыДокументовДДС.Вставить("ПлатежноеТребованиеВыставленное","Поступление");
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерПоступлениеДенежныхСредств","Поступление");
	ВидыДокументовДДС.Вставить("ПриходныйКассовыйОрдер","Поступление");
	ВидыДокументовДДС.Вставить("ПриходныйКассовыйОрдер","Поступление");
	ВидыДокументовДДС.Вставить("ОплатаОтПокупателяПлатежнойКартой","Поступление");
	
	ВидыДокументовДДС.Вставить("ВозвратТоваровПоставщику", "Поступление");
	ВидыДокументовДДС.Вставить("КорректировкаДолга", "Выбытие");
	
	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	Если ТипЗнч(ВидДокумента) = Тип("Строка") Тогда
		// Получен непосредственно вид документа
		// Дополнительные действия не требуются
		
		ВидДействийДокумента.Вставить("Направление",ВидыДокументовДДС[ВидДокумента]);
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВидДокумента)) Тогда
		ТипСсылки = ТипЗнч(ВидДокумента);
		// Получена ссылка на документ. Необходимо определить его вид.
	    Для каждого ТекущееЗначениеСоответсвия Из ВидыДокументовДДС Цикл
			Если ТипСсылки = Тип("ДокументСсылка."+ТекущееЗначениеСоответсвия.Ключ) Тогда
				ВидДействийДокумента.Вставить("Направление",ТекущееЗначениеСоответсвия.Значение);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		// Специфическая обработка
		Если ТипСсылки = Тип("ДокументСсылка.АвансовыйОтчет") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
			Возврат ВидДействийДокумента;
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
			Возврат ВидДействийДокумента;
		КонецЕсли;
	КонецЕсли; 

	Если ВидДокумента = "ВозвратТоваровПоставщику" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
	ИначеЕсли ВидДокумента="КорректировкаДолга" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	ИначеЕсли ЗначениеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
			
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);
			
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
			
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);
			
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
			
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
		
		Если ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю Тогда
			ВидДействийДокумента.Вставить("Направление","Выбытие");
		КонецЕсли; 
			
		ВидДействийДокумента.Вставить("РасчетыВозврат",РасчетВозвратПоВидуОпераций[ВидОперации]);
	ИначеЕсли ВидДокумента="АвансовыйОтчет" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	Конецесли;

	Возврат ВидДействийДокумента;

КонецФункции // ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств()

//Формирует структуру параметров для передачи в процедуры движения денежных средств по ссылке на документ
Функция ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, ВалютаРегламентированногоУчета, Заголовок = Неопределено,КоррСчет=Неопределено, ТаблицаДокумента = Неопределено, СтруктураШапкиДокумента = Неопределено) Экспорт

	Если СтруктураШапкиДокумента = Неопределено Тогда
		ВидДокумента = Ссылка.Метаданные().Имя;
	Иначе
		ВидДокумента = СтруктураШапкиДокумента.ВидДокумента;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Заголовок) тогда
		Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли;
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("Организация,ВалютаДокумента,
	                                      |"+?(ВидДокумента="АвансовыйОтчет","ФизЛицо","Контрагент")+",СчетОрганизации,ОтражатьВНалоговомУчете,ДатаОплаты, ВидОперации"
										  +?(ВидДокумента = "ПлатежноеПоручениеВходящее",",КомиссияБанка","")
										  +?(ВидДокумента = "АвансовыйОтчет",",ВидПодотчетнойСуммы",""));//абсо
                                                                                                     
	Если СтруктураШапкиДокумента = Неопределено Тогда
		РеквизитыДокумента = Ссылка.Метаданные().Реквизиты;
		Для Каждого Реквизит из СтруктураПараметров Цикл
			СтруктураПараметров.Вставить(Реквизит.Ключ,?(РеквизитыДокумента.найти(Реквизит.Ключ)=Неопределено,Неопределено,Ссылка[Реквизит.Ключ]));
		КонецЦикла;
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	КонецЕсли;
	
	Если ВидДокумента = "ОплатаОтПокупателяПлатежнойКартой" Тогда
		Направление = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(Ссылка, СтруктураПараметров.ВидОперации).Направление;
	Иначе
		Направление = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента).Направление;
	КонецЕсли;
	Если Направление = Неопределено тогда
		//Другие документы не обрабатываются
		Возврат Ложь;
	Конецесли;

	СтруктураПараметров.Вставить("Направление", Направление);
	
	СтруктураПараметров.Вставить("Дата", ?(СтруктураШапкиДокумента = Неопределено,Ссылка.Дата,СтруктураШапкиДокумента.Дата));
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров["ДатаОплаты"]) тогда
		СтруктураПараметров.Вставить("Период",СтруктураПараметров.Дата);
	Иначе
		СтруктураПараметров.Вставить("Период",?(?(СтруктураШапкиДокумента = Неопределено, Ссылка.Оплачено,СтруктураШапкиДокумента.Оплачено),УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(СтруктураПараметров.Дата,СтруктураПараметров.ДатаОплаты),СтруктураПараметров.Дата));
	Конецесли;
	
	Если СтруктураШапкиДокумента = Неопределено ИЛИ НЕ СтруктураШапкиДокумента.Свойство("ОпределятьАвансыПриПроведенииДокумента") тогда
		
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураПараметров.Период, СтруктураПараметров.Организация);
		ОшибкаВПолучении = НЕ ЗначениеЗаполнено(УчетнаяПолитика);
		
		УчитыватьАванс = ?(ОшибкаВПолучении, Истина,УчетнаяПолитика.ОпределятьАвансыПриПроведенииДокумента); 
		СтруктураПараметров.Вставить("ОпределятьАвансыПриПроведенииДокумента",УчитыватьАванс);
		
		Если СтруктураШапкиДокумента <> Неопределено Тогда
			СтруктураШапкиДокумента.Вставить("ОпределятьАвансыПриПроведенииДокумента",УчитыватьАванс);
		КонецЕсли; 
	Иначе
		СтруктураПараметров.Вставить("ОпределятьАвансыПриПроведенииДокумента",СтруктураШапкиДокумента.ОпределятьАвансыПриПроведенииДокумента);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("ВидДокумента",ВидДокумента);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	СтруктураПараметров.Вставить("Заголовок",Заголовок);
	СтруктураПараметров.Вставить("ВидДвиженияПоРасчетам","Оплата");
	
	ЭтоПереносЗадолженности = Ложь;
	Если ВидДокумента = "КорректировкаДолга" Тогда
		Если СтруктураПараметров.ВидОперации  = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			ЭтоПереносЗадолженности = Истина;
			Если НЕ СтруктураШапкиДокумента = Неопределено Тогда
				СтруктураПараметров.Вставить("ВалютаДокумента", СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
				КурсДокумента      = СтруктураШапкиДокумента.КурсВзаиморасчетов;
				КратностьДокумента = СтруктураШапкиДокумента.КратностьВзаиморасчетов;
			Иначе
				ВалютаДокумента = Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СтруктураКурса  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, СтруктураПараметров.Дата);
				СтруктураПараметров.Вставить("ВалютаДокумента", ВалютаДокумента);
				КурсДокумента      = СтруктураКурса.Курс;
				КратностьДокумента = СтруктураКурса.Кратность;
			КонецЕсли;
		Иначе
			СтруктураПараметров.Вставить("ВалютаДокумента", ВалютаРегламентированногоУчета);
			КурсДокумента = 1;
			КратностьДокумента = 1;
		КонецЕсли;
	Иначе
		Если не СтруктураШапкиДокумента = Неопределено и СтруктураШапкиДокумента.Свойство("КурсДокумента") Тогда
			КурсДокумента = СтруктураШапкиДокумента.КурсДокумента;
		Иначе
			КурсДокумента = ЗаполнениеДокументов.КурсДокумента(Ссылка,ВалютаРегламентированногоУчета);
		КонецЕсли; 
		Если не СтруктураШапкиДокумента = Неопределено и СтруктураШапкиДокумента.Свойство("КратностьДокумента") Тогда
			КратностьДокумента = СтруктураШапкиДокумента.КратностьДокумента;
		Иначе
			КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(Ссылка,ВалютаРегламентированногоУчета);
		КонецЕсли; 
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("КурсДокумента", КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента", КратностьДокумента);
	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	СтруктураПараметров.Вставить("РасчетыВозврат",ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента,СтруктураПараметров.ВидОперации).РасчетыВозврат);
	Если СтруктураПараметров.РасчетыВозврат=Неопределено тогда
		//Другие операции не обрабатываются
		Возврат Ложь;
	КонецЕсли;
	
	
	ВидСчетаОрганизации=?(СтруктураПараметров["СчетОрганизации"]=Неопределено,Неопределено,СтруктураПараметров["СчетОрганизации"].ВидСчета);
	ВВалюте = (Не(СтруктураПараметров["ВалютаДокумента"]=ВалютаРегламентированногоУчета));
	
	Если НЕ ЗначениеЗаполнено(КоррСчет) тогда
		Если ВидДокумента = "ПриходныйКассовыйОрдер" или ВидДокумента = "РасходныйКассовыйОрдер" тогда
			КоррСчет = ПланыСчетов.Хозрасчетный[?(Ввалюте,"КассаОрганизацииВал","КассаОрганизации")].Ссылка;
		Иначе
			Если ВидСчетаОрганизации = "Расчетный" Тогда
				КоррСчет = ПланыСчетов.Хозрасчетный[?(Ввалюте,"ВалютныеСчета","РасчетныеСчета")].Ссылка;
			ИначеЕсли ВидСчетаОрганизации = "Депозитный" Тогда
				КоррСчет = ПланыСчетов.Хозрасчетный[?(Ввалюте,"ДепозитныеСчетаВал","ДепозитныеСчета")].Ссылка;
			Иначе
				КоррСчет = ПланыСчетов.Хозрасчетный[?(Ввалюте,"ПрочиеСпециальныеСчетаВал","ПрочиеСпециальныеСчета")].Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕслИ;
	СтруктураПараметров.Вставить("КоррСчет",КоррСчет);
	
	//Получение данных таблицы расшифровки платежа
	// Выгрузка нужных колонок табличной части в таблицу значений с переименованием названий счетов
	СтруктураТаблицы = Новый Структура(""+?(ВидДокумента="АвансовыйОтчет","Сумма,Контрагент,","СтатьяДвиженияДенежныхСредств,СуммаПлатежа,")+"
	|ДоговорКонтрагента, СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,
	|КурсВзаиморасчетов,КратностьВзаиморасчетов, СуммаВзаиморасчетов");
	
	//СтруктураТаблицы.Вставить("СчетУчетаРасчетовСКонтрагентом"	,?(СтруктураПараметров.РасчетыВозврат = ВидОперацииРасчет,"СчетОплаты","СчетАванса"));
	//СтруктураТаблицы.Вставить("СчетУчетаРасчетовПоАвансам"		,?(СтруктураПараметров.РасчетыВозврат = ВидОперацииРасчет,"СчетАванса","СчетОплаты"));
	СтруктураТаблицы.Вставить("СчетУчетаРасчетовСКонтрагентом"	,"СчетОплаты");
	СтруктураТаблицы.Вставить("СчетУчетаРасчетовПоАвансам"		,"СчетАванса");
	
	СтруктураТаблицы.Вставить(?(ВидДокумента="АвансовыйОтчет","Сумма","СуммаПлатежа"),"СуммаСНДС");
	
	Если ВидДокумента = "АвансовыйОтчет" Тогда
		ТабличнаяЧасть = Ссылка["ОплатаПоставщикам"];
	ИначеЕсли ВидДокумента = "КорректировкаДолга" Тогда
		ТабличнаяЧасть = ТаблицаДокумента;
		СтруктураТаблицы.Вставить("НомерСтрокиДокумента");
	Иначе
		ТабличнаяЧасть = Ссылка["РасшифровкаПлатежа"];
	КонецЕсли;
	
	Если ТабличнаяЧасть = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураТаблицы.Вставить("Сделка");
	СтруктураТаблицы.Вставить("ДокументРасчетовСКонтрагентом");
 	СтруктураТаблицы.Вставить("КоррСубконто1");
	СтруктураТаблицы.Вставить("КоррСубконто2");
	СтруктураТаблицы.Вставить("КоррСубконто3");
	
	СтруктураТаблицы.Вставить("ВидДоговора");
	СтруктураТаблицы.Вставить("ВалютаВзаиморасчетов");
	//АБС ВСТАВКА 30831 Коломиец 14.04.2015 14:35:16  
	Если ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		СтруктураТаблицы.Вставить("КомиссияБанка");
	КонецЕсли;
	//АБС ВСТАВКА 30831 КОНЕЦ
	
	РеестрПлатежей = ОбщегоНазначения.СформироватьТаблицуЗначений(ТабличнаяЧасть, СтруктураТаблицы,Истина, Истина);
	Если РеестрПлатежей = Неопределено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при движении денежных средств. Отсутствуют необходимые реквизиты в расшифровке платежа.",Ложь,Заголовок);
		Возврат Ложь;
	КонецЕсли;
	
	// Колонки для расчетов по НДС. 
	РеестрПлатежей.Колонки.Добавить("РублеваяСумма");
	РеестрПлатежей.Колонки.Добавить("ВалютнаяСумма");
	
	//Определим наличие расчетов в условных единицах
	ЕстьРасчетыВУсловныхЕдиницах = ложь;
	РеестрПлатежей.Колонки.Добавить("РасчетыВУсловныхЕдиницах", Новый ОписаниеТипов("Булево"));
	РеестрПлатежей.Колонки.Добавить("ВестиПоДокументамРасчетовСКонтрагентом", Новый ОписаниеТипов("Булево"));
	РеестрПлатежей.Колонки.Добавить("ВедениеВзаиморасчетов");
	
	Если Не ВидДокумента="АвансовыйОтчет" Тогда
		РеестрПлатежей.Колонки.Добавить("Контрагент");
		РеестрПлатежей.ЗаполнитьЗначения(СтруктураПараметров.Контрагент, "Контрагент");
	КонецЕсли; 
	
	ДанныеОВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Ссылка.Дата);
	
	РеестрДоговоров = Новый Соответствие();
	
	РеестрПлатежей.Колонки.Добавить("ДокументРасчетов");
	
	Для Каждого СтрокаТаблицы из РеестрПлатежей Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			//СтрокаТаблицы.Контрагент 			= СтрокаТаблицы.ДоговорКонтрагента.Владелец;
			СтрокаТаблицы.ВидДоговора 			= СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора;
			СтрокаТаблицы.ВалютаВзаиморасчетов 	= СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СтрокаТаблицы.РасчетыВУсловныхЕдиницах = СтрокаТаблицы.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
			СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом = СтрокаТаблицы.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
			//***** Гетц. Разнесение платежей. 26.10.12
			ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей(СтруктураПараметров.Ссылка, СтрокаТаблицы.ДоговорКонтрагента);
			Если Не СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом Тогда 
				СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом = (ИспользоватьРазнесениеПлатежей И (ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Или НеИспользоватьФИФОВДокументе(СтруктураПараметров.Ссылка)));
			КонецЕсли;
			//***** Гетц \\
			СтрокаТаблицы.ВедениеВзаиморасчетов = СтрокаТаблицы.ДоговорКонтрагента.ВедениеВзаиморасчетов;
			Если СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом
				 И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетов) Тогда
				СтрокаТаблицы.ДокументРасчетов	= Ссылка;
			КонецЕсли;
		КонецЕсли;
		Если ВВалюте И НЕ ЭтоПереносЗадолженности Тогда
			СтрокаТаблицы.РублеваяСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДС, СтруктураПараметров.ВалютаДокумента, ВалютаРегламентированногоУчета,
														 СтрокаТаблицы.КурсВзаиморасчетов,      ДанныеОВалюте.Курс, 
														 СтрокаТаблицы.КратностьВзаиморасчетов, ДанныеОВалюте.Кратность);
			СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.РублеваяСумма;
		Иначе
			СтрокаТаблицы.РублеваяСумма = СтрокаТаблицы.СуммаСНДС;
			
		КонецЕсли;
		СтрокаТаблицы.ВалютнаяСумма 	= СтрокаТаблицы.СуммаВзаиморасчетов;
		Если СтрокаТаблицы.РасчетыВУсловныхЕдиницах тогда
			ЕстьРасчетыВУсловныхЕдиницах = Истина;
		КонецЕсли;
		СтрокаТаблицы.ДокументРасчетов = СтрокаТаблицы.ДокументРасчетовСКонтрагентом;
	КонецЦикла;	
	
	СтруктураПараметров.Вставить("РасчетыВУсловныхЕдиницах",ЕстьРасчетыВУсловныхЕдиницах);
	//В случае возврата необходимо проверить заполнение счета расчетов по авансам
	Если не СтруктураПараметров.РасчетыВозврат = ВидОперацииРасчет тогда
		Для Каждого СтрокаТаблицы из РеестрПлатежей Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетОплаты) тогда
				СтрокаТаблицы.СчетОплаты = СтрокаТаблицы.СчетАванса;
				СтрокаТаблицы.СчетАванса = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Если ВидДокумента <> "КорректировкаДолга" Тогда
		Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто Цикл
			Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета тогда
				РеестрПлатежей.ЗаполнитьЗначения(СтруктураПараметров.СчетОрганизации,"КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки);
			Конецесли;
			Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств тогда
				РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СтатьяДвиженияДенежныхСредств"),"КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки);
			Конецесли;
			Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации и ВидДокумента="АвансовыйОтчет" тогда
				РеестрПлатежей.ЗаполнитьЗначения(СтруктураПараметров.ФизЛицо,"КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки);
			Конецесли;
			//АБС Коломиец+
			Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПодотчетныхСумм и ВидДокумента="АвансовыйОтчет" тогда
				РеестрПлатежей.ЗаполнитьЗначения(СтруктураПараметров.ВидПодотчетнойСуммы,"КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки);
			Конецесли; 
			//АБС-
		КонецЦикла;
	КонецЕсли;
	СтруктураПараметров.Вставить("Таблица",РеестрПлатежей);
	
	//Зачистка промежуточных данных
	Если не ВидДокумента="АвансовыйОтчет" тогда
		РеестрПлатежей.Колонки.Удалить("СтатьяДвиженияДенежныхСредств");
		СтруктураПараметров.Удалить("СчетОрганизации");
		СтруктураПараметров.Удалить("ДатаОплаты");
	КонецеслИ;

	СтруктураПараметров.Вставить("ОрганизацияПрименяетУСН", НалоговыйУчетУСН.ПрименениеУСН(СтруктураПараметров.Организация, Ссылка.Дата));
	Если СтруктураПараметров.ОтражатьВНалоговомУчете Тогда
		Если СтруктураПараметров.ОрганизацияПрименяетУСН Тогда
			СтруктураПараметров.Вставить("Ссылка", Ссылка);
			Если НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураПараметров.Организация, Ссылка.Дата) Тогда
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Истина);
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
			Иначе
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
			КонецЕсли;
			СтруктураПараметров.Вставить("ОтражатьВНалоговомУчете",    Ложь);
		Иначе
			СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
			СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
		КонецЕсли;
	Иначе
		СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
		СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	КонецЕсли;
	
	Возврат СтруктураПараметров;

КонецФункции

//Формирует структуру параметров для передачи в процедуры движения денежных средств по таблице (дереву) значений (сведения из регистра) 
Функция ПодготовкаСтруктурыПараметровДляДвиженияДенегИзРегистраСведений(ТаблицаДвижений,КоллекцияКолонокДереваЗначений=Неопределено, ВалютаРегламентированногоУчета = Неопределено, НаправлениеФильтр = Неопределено) Экспорт
	
	Если ТаблицаДвижений.Количество()=0 тогда
		Возврат Ложь;
	Конецесли;
	
	ВидДокумента =  ТаблицаДвижений[0]["ВидДокумента"];
	
	ВидОперации  = ТаблицаДвижений[0]["ВидОперации"];
	
	Если ВидДокумента = "ОплатаОтПокупателяПлатежнойКартой" Тогда
		Направление = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента, ВидОперации).Направление;
	Иначе
		Направление = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента).Направление;
	КонецЕсли;
	Если Направление = Неопределено тогда
		//Другие документы не обрабатываются
		Возврат Ложь;
	Конецесли;
		
	//Реквизиты, общие для всех движений документа
	ОбщиеРеквизиты = Новый Структура("ВидДокумента,Организация,ВалютаДокумента,
	|" + ?(ВидДокумента="АвансовыйОтчет", "", "Контрагент,") + "ОтражатьВНалоговомУчете,Период,Регистратор,РасчетыВозврат,КоррСчет,РасчетыВУсловныхЕдиницах");
	
	//Реквизиты табличной части
	СтруктураТаблицы = Новый Структура("Контрагент, Сделка, ДокументРасчетов,
	|ДоговорКонтрагента, ВедениеВзаиморасчетов, РасчетыВУсловныхЕдиницах, ВидДоговора, ВестиПоДокументамРасчетовСКонтрагентом,
	|СчетОплаты, СчетАванса, КоррСубконто1, КоррСубконто2, КоррСубконто3,
	|СуммаСНДС, СуммаВзаиморасчетов, РублеваяСумма, ВалютнаяСумма, 
	|ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, 
	//|НомерСтрокиДокумента");//абсо
	|НомерСтрокиДокумента,"+?(ВидДокумента = "ПлатежноеПоручениеВходящее","КомиссияБанка",""));//абсо
	
	Если ВидДокумента = "КорректировкаДолга" Тогда
		СтруктураТаблицы.Вставить("Направление");
		СтруктураТаблицы.Вставить("РасчетыВозврат");
	КонецЕсли;
	
	СтруктураПараметров = БухгалтерскийУчет.ПреобразоватьТаблицуЗначенийВСтруктуру(ТаблицаДвижений, ОбщиеРеквизиты, Истина, СтруктураТаблицы, КоллекцияКолонокДереваЗначений);
	
	СтруктураПараметров.Вставить("Заголовок", ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураПараметров.Регистратор));
	СтруктураПараметров.Вставить("Направление", Направление);
	
	Если не ВалютаРегламентированногоУчета = Неопределено Тогда
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Иначе
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	КонецЕсли; 
	
	//В документах оплаты курс документа не устанавливается а определяется в момент проведения.
	
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураПараметров.ВалютаДокумента, СтруктураПараметров.Период);
	СтруктураПараметров.Вставить("КурсДокумента", СтруктураКурса.Курс);
	СтруктураПараметров.Вставить("КратностьДокумента", СтруктураКурса.Кратность);
	СтруктураПараметров.Вставить("Дата", СтруктураПараметров.Период);
	СтруктураПараметров.Вставить("Ссылка", СтруктураПараметров.Регистратор);
	
	СтруктураПараметров.Таблица.Колонки.ДокументРасчетов.Имя = "ДокументРасчетовСКонтрагентом";
	Для Каждого СтрокаТаблицы из СтруктураПараметров.Таблица Цикл
		Если СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом
			 И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда
			СтрокаТаблицы.ДокументРасчетовСКонтрагентом = СтруктураПараметров.Регистратор;
		КонецЕсли;
	КонецЦикла;	
	
	СтруктураПараметров.Вставить("ОрганизацияПрименяетУСН", НалоговыйУчетУСН.ПрименениеУСН(СтруктураПараметров.Организация, СтруктураПараметров.Дата));
	Если СтруктураПараметров.ОтражатьВНалоговомУчете Тогда
		Если СтруктураПараметров.ОрганизацияПрименяетУСН Тогда
			Если НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураПараметров.Организация, СтруктураПараметров.Дата) Тогда
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Истина);
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
			Иначе
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
			КонецЕсли;
			СтруктураПараметров.Вставить("ОтражатьВНалоговомУчете",    Ложь);
		Иначе
			СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
			СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
		КонецЕсли;
	Иначе
		СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
		СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		СтруктураПараметров.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////
// Подготовка данных по задолженности для обработки

//Определяет направление изменения состояния расчетов расчетов с контрагентами в зависимости от вида документа и вида операции документа
Функция ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента,Знач ВидОперации = неопределено)Экспорт

	// Вместо наименования вида может прийти тип значения "ДокументСсылка"
	ОтработкаПоТипам = (ТипЗнч(ВидДокумента) <> Тип("Строка"));
	
	ВидДействийДокумента = Новый Структура("Направление,РасчетыВозврат");
	ВидыДокументов       = Новый Соответствие();

	ВидыДокументов.Вставить("ПоступлениеТоваровУслуг","Поступление");
	ВидыДокументов.Вставить("КорректировкаПоступления","Поступление");
	ВидыДокументов.Вставить("ПоступлениеТоваровУслугВНТТ","Поступление");
	ВидыДокументов.Вставить("ПоступлениеДопРасходов","Поступление");
	ВидыДокументов.Вставить("ПоступлениеНМА","Поступление");
	ВидыДокументов.Вставить("ВозвратТоваровОтПокупателя","Поступление");
	ВидыДокументов.Вставить("ПолучениеУслугПоПереработке","Поступление");
	
	ВидыДокументов.Вставить("РеализацияТоваровУслуг","Выбытие");
	ВидыДокументов.Вставить("КорректировкаРеализации","Выбытие");
	ВидыДокументов.Вставить("РеализацияОтгруженныхТоваров","Выбытие");
	ВидыДокументов.Вставить("РеализацияУслугПоПереработке","Выбытие");
	ВидыДокументов.Вставить("АктОбОказанииПроизводственныхУслуг","Выбытие");
	ВидыДокументов.Вставить("ПередачаНМА","Выбытие");
	ВидыДокументов.Вставить("ПередачаОС","Выбытие");
	ВидыДокументов.Вставить("ВозвратТоваровПоставщику","Выбытие");
	ВидыДокументов.Вставить("ВозвратТоваровПоставщикуИзНТТ","Выбытие");
	ВидыДокументов.Вставить("ОтчетКомитентуОПродажах","Выбытие");
	
	Если ВидДокумента = "ОтчетКомиссионераОПродажах" или типЗнч(ВидДокумента) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		// Направление изменения состояния расчетов зависит от обрабатываемой операции
		Если НЕ ЗначениеЗаполнено(ВидОперации) или ВидОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации тогда
			ВидыДокументов.Вставить("ОтчетКомиссионераОПродажах","Выбытие");
		Иначе
			ВидыДокументов.Вставить("ОтчетКомиссионераОПродажах","Поступление");
		КонецЕсли;
		ВидДействийДокумента.Вставить("РасчетыВозврат",Перечисления.РасчетыВозврат.Расчеты);
	КонецЕсли; 
	
	
	Если ОтработкаПоТипам Тогда
		ВидыДокументовПоТипам = новый Соответствие();
		Для каждого ОбрабатываемыйВидДокумента Из ВидыДокументов Цикл
			ВидыДокументовПоТипам.Вставить(Тип("ДокументСсылка."+ОбрабатываемыйВидДокумента.Ключ),ОбрабатываемыйВидДокумента.Значение);
		КонецЦикла; 
		ВидыДокументов = ВидыДокументовПоТипам;
	КонецЕсли; 
                                
	ВидДействийДокумента.Вставить("Направление",ВидыДокументов[ВидДокумента]);

	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	Если ВидДокумента = "ОтчетКомиссионераОПродажах" или типЗнч(ВидДокумента) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		// Вид операции моет быть задан, а может быть и не задан
		ВидДействийДокумента.Вставить("РасчетыВозврат",ВидОперацииРасчет);
	ИначеЕсли ВидДокумента = "РеализацияОтгруженныхТоваров" или типЗнч(ВидДокумента) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		// Вид операции моет быть задан, а может быть и не задан
		ВидДействийДокумента.Вставить("РасчетыВозврат",ВидОперацииРасчет);
	ИначеЕсли ЗначениеЗаполнено(ВидОперации) тогда
		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации,ВидОперацииРасчет);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Оборудование,    ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Брак,            ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности, ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия, ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование, ВидОперацииВозврат);
                                             
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия, ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование, ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение,ВидОперацииРасчет);
		
		ВидДействийДокумента.Вставить("РасчетыВозврат",РасчетВозвратПоВидуОпераций[ВидОперации]);
	Иначе
		Если ОтработкаПоТипам Тогда
			Если ВидДокумента = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
				или ВидДокумента =Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
				или ВидДокумента =Тип("ДокументСсылка.РеализацияТоваровУслуг")
				или ВидДокумента =Тип("ДокументСсылка.КорректировкаРеализации")
				или ВидДокумента =Тип("ДокументСсылка.КорректировкаПоступления")
				или ВидДокумента =Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")
				или ВидДокумента =Тип("ДокументСсылка.ПолучениеУслугПоПереработке")
				или ВидДокумента =Тип("ДокументСсылка.ПоступлениеНМА")
				или ВидДокумента =Тип("ДокументСсылка.ПередачаНМА")
				или ВидДокумента =Тип("ДокументСсылка.ПередачаОС")
				или ВидДокумента =Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
				тогда
				ВидДействийДокумента.Вставить("РасчетыВозврат",ВидОперацииРасчет);
			ИначеЕсли ВидДокумента =Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ")
				тогда
				ВидДействийДокумента.Вставить("РасчетыВозврат",ВидОперацииВозврат);
			Конецесли;
		иначе
			Если (ВидДокумента = "РеализацияУслугПоПереработке")
				или (ВидДокумента ="АктОбОказанииПроизводственныхУслуг")
				или (ВидДокумента ="РеализацияТоваровУслуг")
				или (ВидДокумента ="КорректировкаРеализации")
				или (ВидДокумента ="КорректировкаПоступления")
				или (ВидДокумента ="РеализацияОтгруженныхТоваров")
				или (ВидДокумента ="ПолучениеУслугПоПереработке")
				или (ВидДокумента ="ПоступлениеНМА")
				или (ВидДокумента ="ПередачаНМА")
				или (ВидДокумента ="ПередачаОС")
				или (ВидДокумента ="ОтчетКомитентуОПродажах")
				тогда
				ВидДействийДокумента.Вставить("РасчетыВозврат",ВидОперацииРасчет);
			ИначеЕсли ВидДокумента ="ВозвратТоваровПоставщикуИзНТТ"
				тогда
				ВидДействийДокумента.Вставить("РасчетыВозврат",ВидОперацииВозврат);
			Конецесли;
		КонецЕсли;
	Конецесли;

	Возврат ВидДействийДокумента;

КонецФункции

//Формирует структуру параметров для передачи в процедуры зачета аванса по ссылке на документ
Функция ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, ВалютаРегламентированногоУчета, Заголовок = Неопределено, СуммаСНДС = 0, ТаблицаПоВзаиморасчетам = Неопределено, СтруктураШапкиДокумента = Неопределено) Экспорт
	
	//ВидДокумента = Ссылка.Метаданные().Имя;
	Если НЕ ЗначениеЗаполнено(Заголовок) тогда
		 Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли;
	Если ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ТипЗнч(Ссылка)).Направление = Неопределено тогда
		//Другие документы не обрабатываются
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;
	Конецесли;

	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("Организация,ВалютаДокумента, ВидОперации
	                                      |,ОтражатьВНалоговомУчете,НДСВключенВСтоимость
										  |,Контрагент, ДоговорКонтрагента
										  |,КурсВзаиморасчетов,КратностьВзаиморасчетов
										  |,СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам
										  |,Сделка
										  |");
	
	Если ТипЗнч(Ссылка) = Тип("документСсылка.ВозвратТоваровПоставщику")
		или ТипЗнч(Ссылка) = Тип("документСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		СтруктураПараметров.Вставить("СчетУчетаРасчетовПоПретензиям");
		СтруктураПараметров.Вставить("ПоставщикуВыставляетсяСчетФактураНаВозврат");
	КонецЕсли;
	
	МетаданныеДокумента = Ссылка.Метаданные();
	РеквизитыДокумента = МетаданныеДокумента.Реквизиты;
	
	Для Каждого Реквизит из СтруктураПараметров Цикл
		Если СтруктураШапкиДокумента <> Неопределено И СтруктураШапкиДокумента.Свойство(Реквизит.Ключ) Тогда
			СтруктураПараметров.Вставить(Реквизит.Ключ, СтруктураШапкиДокумента[Реквизит.Ключ]);
		Иначе
			СтруктураПараметров.Вставить(Реквизит.Ключ,?(РеквизитыДокумента.найти(Реквизит.Ключ)=Неопределено,Неопределено,Ссылка[Реквизит.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СуммаДокументаСНДС = ?(НЕ ЗначениеЗаполнено(СуммаСНДС),УчетНДС.ПолучитьСуммуДокументаСНДС(Ссылка),СуммаСНДС);
	
	Если (ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") или ТипЗнч(Ссылка) = Тип("документСсылка.ВозвратТоваровПоставщикуИзНТТ"))
		и ЗначениеЗаполнено(СтруктураПараметров.СчетУчетаРасчетовПоПретензиям) 
		Тогда
		СтруктураПараметров.вставить("СчетУчетаРасчетовПоАвансам",СтруктураПараметров.СчетУчетаРасчетовПоПретензиям);
	КонецЕсли; 
	
	
	СтруктураПараметров.Вставить("ВидДокумента",МетаданныеДокумента.Имя);	
	СтруктураПараметров.Вставить("Регистратор",Ссылка);	
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	СтруктураПараметров.Вставить("СуммаДокументаСНДС",СуммаДокументаСНДС);
	СтруктураПараметров.Вставить("Период",Ссылка.Дата);	
	СтруктураПараметров.Вставить("Дата",Ссылка.Дата);	
	СтруктураПараметров.Вставить("Ссылка",Ссылка);	
	
	СтруктураПараметров.Вставить("КурсДокумента",ЗаполнениеДокументов.КурсДокумента(Ссылка,ВалютаРегламентированногоУчета));	
	СтруктураПараметров.Вставить("КратностьДокумента",ЗаполнениеДокументов.КратностьДокумента(Ссылка,ВалютаРегламентированногоУчета));	
	
	//Определение вида операции
	ВидОперации = ?(РеквизитыДокумента.найти("ВидОперации")=Неопределено,Неопределено,Ссылка["ВидОперации"]);
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	СтруктураПараметров.Вставить("РасчетыВозврат",ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента,ВидОперации).РасчетыВозврат);
	Если СтруктураПараметров.РасчетыВозврат=Неопределено тогда
		//Другие операции не обрабатываются
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Вид операции """+ВидОперации+""" по документу не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	//Определим наличие расчетов в условных единицах
	ЕстьРасчетыВУсловныхЕдиницах = (СтруктураПараметров.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) ;
	СтруктураПараметров.Вставить("РасчетыВУсловныхЕдиницах",ЕстьРасчетыВУсловныхЕдиницах);
	
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("УчетАгентскогоНДС", СтруктураПараметров.ДоговорКонтрагента.УчетАгентскогоНДС);
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураПараметров.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	
	СтруктураПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураПараметров.ДоговорКонтрагента.ВедениеВзаиморасчетов);
	СтруктураПараметров.Вставить("ВестиПоДокументамРасчетовСКонтрагентом", СтруктураПараметров.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом);
	//***** Гетц. Разнесение платежей. 29.10.12
	ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей(СтруктураПараметров.Ссылка, СтруктураПараметров.ДоговорКонтрагента);
	Если ИспользоватьРазнесениеПлатежей Тогда 
		СтруктураПараметров.ВестиПоДокументамРасчетовСКонтрагентом = Истина;
	КонецЕсли;		
	//***** Гетц. \\
	
	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	//Будут заполнены в модуле зачета аванса
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	СтруктураПараметров.Вставить("ОрганизацияПрименяетУСН", НалоговыйУчетУСН.ПрименениеУСН(СтруктураПараметров.Организация, Ссылка.Дата));
	Если СтруктураПараметров.ОтражатьВНалоговомУчете Тогда
		Если СтруктураПараметров.ОрганизацияПрименяетУСН Тогда
			СтруктураПараметров.Вставить("Ссылка", Ссылка);
			Если НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураПараметров.Организация, Ссылка.Дата) Тогда
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Истина);
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН",       Ложь);
			Иначе
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН",       Истина);
			КонецЕсли;
			СтруктураПараметров.Вставить("ОтражатьВНалоговомУчете",    Ложь);
		Иначе
			СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН",       Ложь);
			СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
		КонецЕсли;
	Иначе
		СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН",       Ложь);
		СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
КонецФункции

//Формирует структуру параметров для передачи в процедуры движения денежных средств по таблице (дереву) значений (сведения из регистра) 
Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаИзРегистраСведений(ТаблицаДвижений,КоллекцияКолонокДереваЗначений=Неопределено, УчетнаяПолитика = Неопределено) Экспорт
	
	Если ТаблицаДвижений.Количество()=0 тогда
		Возврат Ложь;
	Конецесли;
	СтрокаДанных = ТаблицаДвижений[0];
	ВидДокумента =  СтрокаДанных["ВидДокумента"];
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Если ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента).Направление = Неопределено тогда
		//Другие документы не обрабатываются
		Возврат Ложь;
	Конецесли;

	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("Регистратор,Период,Организация,ВалютаДокумента,НДСВключенВСтоимость,ОтражатьВНалоговомУчете,
											|ВидДокумента,РасчетыВозврат,
											|Контрагент, ДоговорКонтрагента,Сделка, ДокументРасчетов,
											|СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,
											|КурсВзаиморасчетов,КратностьВзаиморасчетов,КурсДокумента,КратностьДокумента");

	КолонкиТаблицы = ?(ТипЗнч(ТаблицаДвижений)=Тип("ТаблицаЗначений"),ТаблицаДвижений.Колонки,КоллекцияКолонокДереваЗначений);
	Для Каждого Реквизит из СтруктураПараметров Цикл
		Если Реквизит.Ключ = "СчетУчетаРасчетовСКонтрагентом" тогда
			СтруктураПараметров.Вставить(Реквизит.Ключ,?(КолонкиТаблицы.найти("СчетОплаты")=Неопределено,Неопределено,СтрокаДанных["СчетОплаты"]));
		ИначеЕсли Реквизит.Ключ = "СчетУчетаРасчетовПоАвансам" тогда
			СтруктураПараметров.Вставить(Реквизит.Ключ,?(КолонкиТаблицы.найти("СчетАванса")=Неопределено,Неопределено,СтрокаДанных["СчетАванса"]));
		Иначе
			СтруктураПараметров.Вставить(Реквизит.Ключ,?(КолонкиТаблицы.найти(Реквизит.Ключ)=Неопределено,Неопределено,СтрокаДанных[Реквизит.Ключ]));
		КонецЕсли;
		Если Реквизит.Ключ = "Регистратор" Тогда
			Регистратор = ?(КолонкиТаблицы.Найти(Реквизит.Ключ) = Неопределено, Неопределено, СтрокаДанных[Реквизит.Ключ]);
			СтруктураПараметров.Вставить("Дата", ?(Регистратор <> Неопределено, Регистратор.Дата, Неопределено));
			СтруктураПараметров.Вставить("Ссылка", Регистратор);
		КонецЕсли;
		Если Реквизит.Ключ = "ДоговорКонтрагента" Тогда
			ДоговорКонтрагента = ?(КолонкиТаблицы.Найти(Реквизит.Ключ) = Неопределено, Неопределено, СтрокаДанных[Реквизит.Ключ]);
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				СтруктураПараметров.Вставить("ВалютаВзаиморасчетов", ДоговорКонтрагента.ВалютаВзаиморасчетов);
				СтруктураПараметров.Вставить("УчетАгентскогоНДС", ДоговорКонтрагента.УчетАгентскогоНДС);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",ВалютаРегламентированногоУчета);
	
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураПараметров.Регистратор);
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	
	СтруктураПараметров.Вставить("СуммаДокументаСНДС",ТаблицаДвижений.Итог("СуммаВзаиморасчетов"));	

	ЕстьРасчетыВУсловныхЕдиницах = (СтруктураПараметров.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах);
	СтруктураПараметров.Вставить("РасчетыВУсловныхЕдиницах", ЕстьРасчетыВУсловныхЕдиницах);
	СтруктураПараметров.Вставить("ВестиПоДокументамРасчетовСКонтрагентом", СтруктураПараметров.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом);
	СтруктураПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураПараметров.ДоговорКонтрагента.ВедениеВзаиморасчетов);
	
	СтруктураКолонокТаблицы = Новый Структура("КоррСчет,КоррСубконто1,КоррСубконто2,КоррСубконто3
		|,СуммаСНДС,СуммаВзаиморасчетов
		|,СуммаНДС,СтавкаНДС,ВидЦенности,
		|"+?(СтруктураПараметров.ОтражатьВНалоговомУчете,",СчетУчетаНУ,СубконтоНУ1,СубконтоНУ2,СубконтоНУ3",""));
		
	СокращеннаяТаблицаДвижений = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаДвижений,СтруктураКолонокТаблицы,,Истина,КоллекцияКолонокДереваЗначений);	
	СтруктураПараметров.Вставить("Таблица",СокращеннаяТаблицаДвижений);
	ПолнаяТаблицаДвижений = ОбщегоНазначения.ВыгрузитьСтрокиДереваВТаблицуЗначений(ТаблицаДвижений,КоллекцияКолонокДереваЗначений);	
	СтруктураПараметров.Вставить("ТаблицаРегистрации",ПолнаяТаблицаДвижений);
	
	СтруктураПараметров.Вставить("ОрганизацияПрименяетУСН", НалоговыйУчетУСН.ПрименениеУСН(СтруктураПараметров.Организация, СтруктураПараметров.Дата));
	Если СтруктураПараметров.ОтражатьВНалоговомУчете Тогда
		Если СтруктураПараметров.ОрганизацияПрименяетУСН Тогда
			СтруктураПараметров.Вставить("Ссылка", СтруктураПараметров.Ссылка);
			Если НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураПараметров.Организация, СтруктураПараметров.Дата) Тогда
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Истина);
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН",       Ложь);
			Иначе
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
				СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН",       Истина);
			КонецЕсли;
			СтруктураПараметров.Вставить("ОтражатьВНалоговомУчете",    Ложь);
		Иначе
			СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН",       Ложь);
			СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
		КонецЕсли;
	Иначе
		СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН",       Ложь);
		СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	КонецЕсли;

	СтруктураПараметров.Вставить("ВидОперации", СтрокаДанных.ВидОперации);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПроверкаРасчетыВУсловныхЕдиницах(СтруктураПараметров, Договор, СчетОплаты, СчетАванса, ВалютаРегламентированногоУчета, Отказ, Заголовок, Сообщать = Ложь) Экспорт

	ВидДокумента	= СтруктураПараметров.ВидДокумента;
	ВидОперации		= СтруктураПараметров.ВидОперации;
	
	ЭтоВозврат 		= (СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);
	ВалютаДокумента = СтруктураПараметров.ВалютаДокумента;
	Если СтруктураПараметров.ВидДокумента = "КорректировкаДолга" Тогда
		НаправлениеДвижения = СтруктураПараметров.Направление;
		ЭтоОплата 	= Истина;
		ЭтоПокупки = ((НаправлениеДвижения = "Выбытие" и не (ЭтоВозврат)) или (НаправлениеДвижения = "Поступление" и ЭтоВозврат));
		ЭтоПродажи = ((НаправлениеДвижения = "Поступление" и не (ЭтоВозврат)) или (НаправлениеДвижения = "Выбытие" и ЭтоВозврат));
	ИначеЕсли СтруктураПараметров.ВидДокумента = "ОтчетКомиссионераОПродажах" Тогда
		НаправлениеДвижения = СтруктураПараметров.Направление;
		ЭтоОплата 	= Ложь;
		ЭтоПокупки = (НаправлениеДвижения = "Поступление");
		ЭтоПродажи = (НаправлениеДвижения = "Выбытие");
	ИначеЕсли Не(ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента, ВидОперации).Направление=Неопределено) тогда
		ЭтоОплата 	= Истина;
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента, ВидОперации).Направление;
		ЭтоПокупки = ((НаправлениеДвижения = "Выбытие" и не (ЭтоВозврат)) или (НаправлениеДвижения = "Поступление" и ЭтоВозврат));
		ЭтоПродажи = ((НаправлениеДвижения = "Поступление" и не (ЭтоВозврат)) или (НаправлениеДвижения = "Выбытие" и ЭтоВозврат));
	ИначеЕсли Не(ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента, ВидОперации).Направление=Неопределено) тогда
		ЭтоОплата 	= Ложь;
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента, ВидОперации).Направление;
		ЭтоПокупки = ((НаправлениеДвижения = "Поступление" и не (ЭтоВозврат)) или (НаправлениеДвижения = "Выбытие" и ЭтоВозврат));
		ЭтоПродажи = ((НаправлениеДвижения = "Выбытие" и не (ЭтоВозврат)) или (НаправлениеДвижения = "Поступление" и ЭтоВозврат));
	Иначе
		Если Сообщать Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не учитывается автоматически в регистрах расчетов с контрагентами по бухгалтерскому учету.
			|	Движения регистров не могут быть сформированы.", Отказ, Заголовок); 
		КонецЕсли;
		Возврат Ложь;
	Конецесли;

	Если НЕ (ЭтоПокупки ИЛИ ЭтоПродажи) Тогда 
		Если Сообщать Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Переданы неверные параметры для проверки возможности проведения по регистрам расчетов с контрагентами по бухгалтерскому учету:
			|	Вид документа: """ + ВидДокумента + """, вид операции: """ + ВидОперации + """
			|	Движения регистров не могут быть сформированы.", Отказ, Заголовок); 
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	РасчетыВВалюте = Договор.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;

	Покупки = ЭтоПокупки 
		И (Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
			ИЛИ Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Продажи = ЭтоПродажи 
		И (Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			ИЛИ Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			ИЛИ Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом); 

	Если НЕ (Покупки ИЛИ Продажи) Тогда
		Если Сообщать Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Проведение по регистрам расчетов с контрагентами по бухгалтерскому учету невозможно:
			|	Вид договора не соответствует операции.
			|	Вид договора: """ + Договор.ВидДоговора + """, операция: """ + ?(Покупки, "покупка", "продажа") + """", Отказ, Заголовок); 
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	Возврат Новый Структура("Покупки, Продажи", Покупки, Продажи);

КонецФункции //ПроверкаРасчетыВУсловныхЕдиницах 

//АБС ВСТАВКА №000021369, 38359 НАЧАЛО
Функция ЭлементВНужнойПапке(СчетПроводки,ЭлементПериодыОтражения) 
	
	НужнаяГруппаНеНДС = глЗначениеПеременной("абс_КонтрольПоГруппеПериодаОтраженияВСчетах");
	НужнаяГруппаНДС   = абс_СерверныеФункции.абс_ВыбиратьПериодОтраженияДляНДС();	
	
	Если СчетПроводки <> ПланыСчетов.Хозрасчетный.НДС Тогда
		Возврат ЭлементПериодыОтражения.ПринадлежитЭлементу(НужнаяГруппаНеНДС);	
	Иначе
		Возврат ЭлементПериодыОтражения.ПринадлежитЭлементу(НужнаяГруппаНДС);
	КонецЕсли;	
	
КонецФункции
Функция ПолучитьПериодНДСПоДате(ДатаПериода,НужнаяГруппа = Неопределено)
	
	//АБС ВСТАВКА 18677 НАЧАЛО
	Если НужнаяГруппа = Неопределено Тогда
		НужнаяГруппа = глЗначениеПеременной("абс_КонтрольПоГруппеПериодаОтраженияВСчетах");
	КонецЕсли;
	//\\АБС ВСТАВКА 18677 КОНЕЦ
	
	НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(ДатаПериода)), " ",""), Символы.НПП, "");
	КодПоиска = СокрЛП(НомерГода);
	Элемент = Справочники.ас_ПериодыОтражения.НайтиПоНаименованию(КодПоиска,,НужнаяГруппа);  		
	Возврат Элемент; 		
		   	
КонецФункции
Функция ПолучитьПериодНДСПоДатеКвартал(ДатаПериода,НужнаяГруппа = Неопределено)
	
	//АБС ВСТАВКА 18677 НАЧАЛО
	Если НужнаяГруппа = Неопределено Тогда
		НужнаяГруппа = абс_СерверныеФункции.абс_ВыбиратьПериодОтраженияДляНДС();
	КонецЕсли;
	//\\АБС ВСТАВКА 18677 КОНЕЦ	
	
	НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(ДатаПериода)), " ",""), Символы.НПП, "");
	Квартал = НачалоКвартала(ДатаПериода);
    НомерМесяца = Месяц(Квартал);

	Если НомерМесяца = 1 Тогда
		НомерКвартала = 1;
	ИначеЕсли НомерМесяца = 4 Тогда
		НомерКвартала = 2;
	ИначеЕсли НомерМесяца = 7 Тогда
		НомерКвартала = 3;
	ИначеЕсли НомерМесяца = 10 Тогда
		НомерКвартала = 4;
	КонецЕсли;
	
	КодПоиска = СокрЛП(НомерГода) + СокрЛП(НомерКвартала);
	Элемент = Справочники.ас_ПериодыОтражения.НайтиПоКоду(КодПоиска,,НужнаяГруппа);
	
	Возврат Элемент;
	
КонецФункции
Функция абс_ПроверкаТипаПериодаОтражения(Проводка, ДопустимыеТипыСубконто, Значение, СтруктураШапкиДокумента) 
	
	//АБС ВСТАВКА №38359 НАЧАЛО «17 февраля 2014 г.», Пополитов
	//ас_Регистратор = СтруктураШапкиДокумента.Ссылка;  		
	Если ДопустимыеТипыСубконто.СодержитТип(Тип("СправочникСсылка.ас_ПериодыОтражения")) 
		и (Значение.Пустая() или (не Значение.Пустая() и не ЭлементВНужнойПапке(Проводка.КоррСчет,Значение))) Тогда
		//и ТипЗнч(ас_Регистратор) <> Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
		//и ТипЗнч(ас_Регистратор) <> Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
		//и ТипЗнч(ас_Регистратор) <> Тип("ДокументСсылка.ОперацияБух")
		//и ТипЗнч(ас_Регистратор) <> Тип("ДокументСсылка.КорректировкаЗаписейРегистров")		
		Возврат Истина;		
	Иначе  		
		Возврат Ложь; 		
	КонецЕсли;
	//\\АБС ВСТАВКА №38359 КОНЕЦ
	
КонецФункции
Функция абс_ЗаполнитьПериодОтражения(Проводка, Значение, СтруктураШапкиДокумента) 
	
	ас_Регистратор = СтруктураШапкиДокумента.Ссылка;
	
	НужнаяГруппаНеНДС = глЗначениеПеременной("абс_КонтрольПоГруппеПериодаОтраженияВСчетах");
	НужнаяГруппаНДС   = абс_СерверныеФункции.абс_ВыбиратьПериодОтраженияДляНДС();	
	
	Если ас_Регистратор.Метаданные().Реквизиты.Найти("абс_ПериодОтражения91") <> Неопределено 
		И ЗначениеЗаполнено(ас_Регистратор.абс_ПериодОтражения91)
		И ЭлементВНужнойПапке(Проводка.КоррСчет,ас_Регистратор.абс_ПериодОтражения91) Тогда
		Значение = ас_Регистратор.абс_ПериодОтражения91;	
	ИначеЕсли ас_Регистратор.Метаданные().Реквизиты.Найти("абс_ПериодОтражения") <> Неопределено 
		И ЗначениеЗаполнено(ас_Регистратор.абс_ПериодОтражения)
		И ЭлементВНужнойПапке(Проводка.КоррСчет,ас_Регистратор.абс_ПериодОтражения) Тогда
		Значение = ас_Регистратор.абс_ПериодОтражения;
	ИначеЕсли ас_Регистратор.Метаданные().Реквизиты.Найти("КорректируемыйПериод") <> Неопределено И ЗначениеЗаполнено(ас_Регистратор.КорректируемыйПериод) Тогда
		Значение = ?(Проводка.КоррСчет <>  ПланыСчетов.Хозрасчетный.НДС, ПолучитьПериодНДСПоДате(ас_Регистратор.КорректируемыйПериод,НужнаяГруппаНеНДС), ПолучитьПериодНДСПоДатеКвартал(ас_Регистратор.КорректируемыйПериод,НужнаяГруппаНДС));
	Иначе
		// определим период по дате документа
		Если ЗначениеЗаполнено(ас_Регистратор) Тогда 
			Значение = ?(Проводка.КоррСчет <> ПланыСчетов.Хозрасчетный.НДС, ПолучитьПериодНДСПоДате(ас_Регистратор.Дата,НужнаяГруппаНеНДС), ПолучитьПериодНДСПоДатеКвартал(ас_Регистратор.Дата,НужнаяГруппаНДС));
		Иначе
			Значение = ?(Проводка.КоррСчет <> ПланыСчетов.Хозрасчетный.НДС, ПолучитьПериодНДСПоДате(Проводка.Период,НужнаяГруппаНеНДС), ПолучитьПериодНДСПоДатеКвартал(Проводка.Период,НужнаяГруппаНДС));
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Значение;
	
КонецФункции
//\\АБС ВСТАВКА №000021369, 38359 КОНЕЦ

Функция ПодготовитьТаблицуДляРегистраРасчетовПоПриобретению(СтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента) Экспорт
					
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;				
	
	ТаблицаДвижений = Новый ТаблицаЗначений();				
	
	ТаблицаДвижений.Колонки.Добавить("ТекущаяТаблица");
	
	ЕстьЗаказыВТабличныхЧастях = СтруктураПараметровВзаиморасчетов.Свойство("ЕстьЗаказыВТабличныхЧастях")
		И СтруктураПараметровВзаиморасчетов.ЕстьЗаказыВТабличныхЧастях;
	Если ЕстьЗаказыВТабличныхЧастях Тогда
		ИмяЗаказаВТабличныхЧастях = СтруктураПараметровВзаиморасчетов.ИмяЗаказаВТабличныхЧастях;
	Иначе
		ИмяЗаказаВТабличныхЧастях = "Сделка";
	КонецЕсли;
	ТаблицаДвижений.Колонки.Добавить(ИмяЗаказаВТабличныхЧастях, Документы.ТипВсеСсылки());
	
	ЕстьВидОперации = СтруктураШапкиДокумента.Свойство("ВидОперации");
	Если ЕстьВидОперации Тогда
		ВидОперации = СтруктураШапкиДокумента.ВидОперации;
	Иначе
		ВидОперации = Неопределено;
	КонецЕсли;
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		ТаблицаДвижений.Колонки.Добавить("ОбъектСтроительства"		, Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства, СправочникСсылка.Номенклатура"));
		ТаблицаДвижений.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства, СправочникСсылка.Номенклатура"));
	Иначе
		ТаблицаДвижений.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства, СправочникСсылка.Номенклатура"));
	КонецЕсли;
	ТаблицаДвижений.Колонки.Добавить("СпособСтроительства", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыСтроительства"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаЦенности"	, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНДС"			, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("НДС"					, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаДвижений.Колонки.Добавить("НоменклатурнаяГруппа"	, Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаДвижений.Колонки.Добавить("СтатьяЗатрат"			, Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаДвижений.Колонки.Добавить("Субконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("Субконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("Субконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СкладПроводок"		, Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	// Структуру колонок для переименования можно передать явно, если требуется учитывать какие-либо особенности документа
	Если НЕ СтруктураПараметровВзаиморасчетов.Свойство("СтруктураДляПереименованияКолонок") 
		ИЛИ ТипЗнч(СтруктураПараметровВзаиморасчетов.СтруктураДляПереименованияКолонок) <> Тип("Структура") Тогда
		СтруктураДляПереименованияКолонок = Новый Структура;
	Иначе
		СтруктураДляПереименованияКолонок = СтруктураПараметровВзаиморасчетов.СтруктураДляПереименованияКолонок;
		// Если колонки с именем ключа структуры в таблице движений нет, она будет добавлена
		Для каждого Колонка Из СтруктураДляПереименованияКолонок Цикл
			Если ТаблицаДвижений.Колонки.Найти(Колонка.Ключ) = Неопределено Тогда
				ТаблицаДвижений.Колонки.Добавить(Колонка.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДляПереименованияКолонок.Вставить("НДС", 						"СуммаНДС");
	СтруктураДляПереименованияКолонок.Вставить("СкладПроводок", 			"Склад");
	СтруктураДляПереименованияКолонок.Вставить("СчетУчетаЦенности", 		"КоррСчет");
	СтруктураДляПереименованияКолонок.Вставить("СчетУчетаНДС", 				"СчетНДС");
	СтруктураДляПереименованияКолонок.Вставить("ПодразделениеОрганизации", 	"Подразделение");
	СтруктураДляПереименованияКолонок.Вставить("СубконтоНУ1", 				"СубконтоНУ1Базовое");
	СтруктураДляПереименованияКолонок.Вставить("СубконтоНУ2", 				"СубконтоНУ2Базовое");
	СтруктураДляПереименованияКолонок.Вставить("СубконтоНУ3", 				"СубконтоНУ3Базовое");
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		СтруктураДляПереименованияКолонок.Вставить("Номенклатура", 			"НоменклатураУслуги");
		СтруктураДляПереименованияКолонок.Вставить("ОбъектСтроительства",	"Номенклатура");
	КонецЕсли;
	Если ИмяЗаказаВТабличныхЧастях <> "Сделка" Тогда
		СтруктураДляПереименованияКолонок.Вставить(ИмяЗаказаВТабличныхЧастях,	"Сделка");
	КонецЕсли;
	
	СтруктураПодготовленныхТаблиц = СтруктураПараметровВзаиморасчетов.СтруктураПодготовленныхТаблиц;
	
	Для каждого ПодготовленнаяТаблица Из СтруктураПодготовленныхТаблиц Цикл
	
		ИмяТаблицы 		= ПодготовленнаяТаблица.Ключ;
		ТекущаяТаблица 	= ПодготовленнаяТаблица.Значение;
		
		Для каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
			СтрокаДвижения = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
			
			СтрокаДвижения.ТекущаяТаблица = ИмяТаблицы;
			Если ИмяТаблицы = "Услуги" Тогда
				СтрокаДвижения.СчетУчетаНУ = СтрокаТаблицы.СчетЗатратНУ;
			КонецЕсли;
			
			СтрокаДвижения.СуммаВзаиморасчетов	= СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			СтрокаДвижения.СуммаСНДС			= СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		КонецЦикла;
	
	КонецЦикла;
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, СтруктураДляПереименованияКолонок);
	
	ЧисловыеКолонкиСтрокой 		= "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура 	= Новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой 	= "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой, СтрДлина(НеЧисловыеКолонкиСтрокой) - 2);
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам 
		ИЛИ НЕ ЕстьЗаказыВТабличныхЧастях Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "Сделка");
	КонецЕсли;
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1",ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2",ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	КонецЕсли;
	
	Для Каждого Движение Из ТаблицаДвижений Цикл
		
		КоррСчет = Движение.КоррСчет;
		
		Для каждого ВидСубконто из КоррСчет.ВидыСубконто Цикл
			
			НомерСубконто = ВидСубконто.НомерСтроки;
			ДопустимыеТипыСубконто = ВидСубконто.ВидСубконто.ТипЗначения;
			ЗначениеСубконто = Неопределено;
			
			Если Константы.абс_КонтрольПоХарактеруЗатратВкл.Получить() //Заявка №9181 (ИНАЧЕ МНОГО КОСЯКОВ У ПОЛЬЗОВАТЕЛЕЙ)
				И Движение.ТекущаяТаблица = "Услуги" И ЗначениеЗаполнено(Движение.СтатьяЗатрат) 
				И НЕ УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(Движение.СтатьяЗатрат) Тогда
				// Это услуги непроизводственного характера. При формировании проводок использовалась аналитика из ТЧ.  
				Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Субконто" + НомерСубконто])) Тогда
					ЗначениеСубконто = Движение["Субконто" + НомерСубконто];
                КонецЕсли;
			Иначе
				Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение.Номенклатура)) Тогда
					ЗначениеСубконто = Движение.Номенклатура;
				ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение.Склад)) Тогда
					ЗначениеСубконто = Движение.Склад;
				ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение.СтатьяЗатрат)) Тогда
					ЗначениеСубконто = Движение.СтатьяЗатрат;
				ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение.НоменклатурнаяГруппа)) Тогда
					ЗначениеСубконто = Движение.НоменклатурнаяГруппа;
				ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение.Подразделение)) Тогда
					ЗначениеСубконто = Движение.Подразделение;
				ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(Тип("ПеречислениеСсылка.СпособыСтроительства")) Тогда
					ЗначениеСубконто = Движение.СпособСтроительства;
				ИначеЕсли абс_ПроверкаТипаПериодаОтражения(Движение, ДопустимыеТипыСубконто, Движение["Субконто" + НомерСубконто], СтруктураШапкиДокумента) Тогда
					ЗначениеСубконто = абс_ЗаполнитьПериодОтражения(Движение, Движение["Субконто" + НомерСубконто], СтруктураШапкиДокумента);					
				ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Субконто" + НомерСубконто])) Тогда
					ЗначениеСубконто = Движение["Субконто" + НомерСубконто];
				КонецЕсли;
			КонецЕсли; 
			
			Движение["КоррСубконто" + НомерСубконто] = ЗначениеСубконто;
			
		КонецЦикла;	
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			СчетУчетаНУ = Движение.СчетУчетаНУ;
			
			Для каждого ВидСубконто из СчетУчетаНУ.ВидыСубконто Цикл
				
				НомерСубконто = ВидСубконто.НомерСтроки;
				ДопустимыеТипыСубконто = ВидСубконто.ВидСубконто.ТипЗначения;
				ЗначениеСубконто = Неопределено;
				
				Если Константы.абс_КонтрольПоХарактеруЗатратВкл.Получить() //Заявка №9181 (ИНАЧЕ МНОГО КОСЯКОВ У ПОЛЬЗОВАТЕЛЕЙ)
					И Движение.ТекущаяТаблица = "Услуги" И ЗначениеЗаполнено(Движение.СтатьяЗатрат) 
					И НЕ УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(Движение.СтатьяЗатрат) Тогда
					// Это услуги непроизводственного характера. При формировании проводок использовалась аналитика из ТЧ.  
					Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["СубконтоНУ" + НомерСубконто + "Базовое"])) Тогда
						ЗначениеСубконто = Движение["СубконтоНУ" + НомерСубконто + "Базовое"];
	                КонецЕсли;
				Иначе
					Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение.Номенклатура)) Тогда
						ЗначениеСубконто = Движение.Номенклатура;
					ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение.Склад)) Тогда
						ЗначениеСубконто = Движение.Склад;
					ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение.СтатьяЗатрат)) Тогда
						ЗначениеСубконто = Движение.СтатьяЗатрат;
					ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение.НоменклатурнаяГруппа)) Тогда
						ЗначениеСубконто = Движение.НоменклатурнаяГруппа;
					ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение.Подразделение)) Тогда
						ЗначениеСубконто = Движение.Подразделение;
					ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(Тип("ПеречислениеСсылка.СпособыСтроительства")) Тогда
						ЗначениеСубконто = Движение.СпособСтроительства;
					//АБС ВСТАВКА №45866 НАЧАЛО «18 сентября 2014 г.», Пополитов
					ИначеЕсли абс_ПроверкаТипаПериодаОтражения(Движение, ДопустимыеТипыСубконто, Движение["СубконтоНУ" + НомерСубконто + "Базовое"], СтруктураШапкиДокумента) Тогда
						ЗначениеСубконто = абс_ЗаполнитьПериодОтражения(Движение, Движение["СубконтоНУ" + НомерСубконто + "Базовое"], СтруктураШапкиДокумента);
	 				//\\АБС ВСТАВКА №45866 КОНЕЦ 	 		
					ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["СубконтоНУ" + НомерСубконто + "Базовое"])) Тогда
						ЗначениеСубконто = Движение["СубконтоНУ" + НомерСубконто + "Базовое"];
						
						//+ Романова Н.Г. #77113409 25.04.2017
						Если не ЗначениеЗаполнено(ЗначениеСубконто) и Найти(СчетУчетаНУ.Код, "25") > 0 и НомерСубконто = 3 Тогда 																					
							ЗначениеСубконто = Движение["Субконто3"];																
						КонецЕсли;
						//- Романова Н.Г. #77113409 25.04.2017
	                КонецЕсли;      
				КонецЕсли; 
				
				Движение["СубконтоНУ" + НомерСубконто] = ЗначениеСубконто;
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		Если Движение.ТекущаяТаблица = "Услуги" И ТипЗнч(Движение.Номенклатура) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
			Движение.Номенклатура = Движение.НоменклатураУслуги;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		ТаблицаДвижений.Колонки.Удалить(ТаблицаДвижений.Колонки.НоменклатураУслуги);
	КонецЕсли;	
	ТаблицаДвижений.Колонки.Удалить(ТаблицаДвижений.Колонки.СпособСтроительства); 
	ТаблицаДвижений.Колонки.Удалить(ТаблицаДвижений.Колонки.ТекущаяТаблица);

	Возврат ТаблицаДвижений;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УЧЕТА РАСЧЕТОВ С КОНТАГЕНТАМИ  - ОПЛАТА (ВЫДЕЛЕНИЕ АВАНСА)

// формируется записи в регистры сведений РасчетыПоПриобретениюОрганизации и РасчетыПоРеализацииОрганизации
// из документов движения денежных средст (оплаты). При необходимости формирует запись в последовательности расчетов
// или принудительно сбивает границу последовательности на момент движений документа
Функция ЗафиксироватьДвижениеДенегВРегистреРасчетов(Объект,СтруктураПараметров)

	РасчетыВозврат      = СтруктураПараметров.РасчетыВозврат;
	Если СтруктураПараметров.Свойство("Направление") Тогда
		НаправлениеДвижения = СтруктураПараметров.Направление;
	Иначе
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураПараметров.ВидДокумента).Направление;
	КонецЕсли;
	
	НаборДвижений = Объект.Движения;
	
	РеестрПлатежей      = СтруктураПараметров.Таблица;
	КоррСчет            = СтруктураПараметров.КоррСчет;

	//Определяем, учитывается ли аванс в документе
	УчитыватьАванс = СтруктураПараметров.ОпределятьАвансыПриПроведенииДокумента;

	Если (НаправлениеДвижения = "Поступление" и РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты) или
		(НаправлениеДвижения = "Выбытие" и РасчетыВозврат =  Перечисления.РасчетыВозврат.Возврат) тогда
		РегистрРасчетов = НаборДвижений.РасчетыПоРеализацииОрганизации;
		ИмяПоследовательностиДляРегистрации = "РасчетыПоРеализацииОрганизации";

	Иначе
		
		РегистрРасчетов = НаборДвижений.РасчетыПоПриобретениюОрганизации;

		ИмяПоследовательностиДляРегистрации = "РасчетыПоПриобретениюОрганизации";

	КонецЕсли;

	Для каждого Реквизит из СтруктураПараметров Цикл

		Если Реквизит.Ключ = "Таблица" тогда
			Продолжить;
		КонецЕсли;

		Если РеестрПлатежей.Колонки.Найти(Реквизит.Ключ) = Неопределено Тогда
			РеестрПлатежей.Колонки.Добавить(Реквизит.Ключ);
			РеестрПлатежей.ЗаполнитьЗначения(Реквизит.Значение,Реквизит.Ключ);
		КонецЕсли;
	КонецЦикла;
	//АБС_Попов изменения сруктуры последовательности
    //МассивДоговоров = РегистрРасчетов.Выгрузить().ВыгрузитьКолонку("ДоговорКонтрагента");
	МассивДоговоров = СтруктураПараметров.Таблица.ВыгрузитьКолонку("ДоговорКонтрагента");
	Для Каждого Договор из МассивДоговоров Цикл
		// Регистрация в последовательности при необходимости
		СдвигГраницыПоследовательностиНазад(ИмяПоследовательностиДляРегистрации, Новый МоментВремени(СтруктураПараметров.Период,СтруктураПараметров.Ссылка), новый структура("Организация,Договор",СтруктураПараметров.Организация,Договор));
	КонецЦикла;
	
	//\\АБС_Попов
	Если УчитыватьАванс тогда
		
		ПоследовательностьДляРегистрации = Объект.ПринадлежностьПоследовательностям[ИмяПоследовательностиДляРегистрации];
		
		Если не ПоследовательностьДляРегистрации.Количество() =0 Тогда
			ПоследовательностьДляРегистрации.Очистить();
		КонецЕсли; 
		
		// АБС ИЗМЕНЕНО 20121013 Фролов
		// Регистрируем последовательность в разрезе договоров
		Для Каждого ТекДоговор Из МассивДоговоров Цикл
			ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
			ЗаписьРегистрации.Период 	  = СтруктураПараметров.Период;
			ЗаписьРегистрации.Организация = СтруктураПараметров.Организация;
			ЗаписьРегистрации.Договор 	  = ТекДоговор;
		КонецЦикла;
	КонецЕсли; 
	
	//РеестрПлатежей.ЗаполнитьЗначения(0,"КурсДокумента,КратностьДокумента");
	Если РеестрПлатежей.Колонки.Найти("Документ")=неопределено Тогда
    	РеестрПлатежей.Колонки.Добавить("Документ");
	КонецЕсли;
	Если РеестрПлатежей.Колонки.Найти("ВидОперации")=неопределено Тогда
    	РеестрПлатежей.Колонки.Добавить("ВидОперации");
	КонецЕсли;
	РеестрПлатежей.ЗаполнитьЗначения(СтруктураПараметров.Ссылка,"Документ");
	РеестрПлатежей.ЗаполнитьЗначения(СтруктураПараметров.ВидОперации,"ВидОперации");

	РегистрРасчетов.Загрузить(РеестрПлатежей);
	
	Если СтруктураПараметров.ВидДокумента = "КорректировкаДолга" Тогда
		РегистрРасчетов.Записать(Ложь);
	КонецЕсли;

	Возврат Истина;

КонецФункции

// Формирование движений по оплате при ведении расчетов с контрагентами
//
// Параметры
//  СтруктураПараметров	– <Структура> – специфическая структура параметров для процедуры отражения оплаты (расчеты с контрагентами)
//										Формируется с использованием функции ПодготовкаСтруктурыПараметровДляДвиженияДенег
//	СтруктураШапкиДокумента – <Структура>
//  СтруктураДвижений	- <Структура или ФиксированнаяКоллекция>  - при вызове из документа передается набор движений документа.
//  																при вызове из регламентной процедуры передается струткура
//																	Ключ - имя регистра, значение - набор записей	
//	Отказ 				- <Булево> - флаг остановки проведения в случае критического несоответствия данных
//	ВызванРегламентнойПроцедурой - <Булево> - признак вызова из регламентной процедуры
//  УдаляемыеВидыРегОпераций	 - <Массив> - список видов регламентных операций, движения по которым удаляются в случае, если 
//											  движения формируются заново регламентной процедурой
//	КэшВидовСубконтоПоСчетам	 - <Соответствие> - кэш сотвтетствия счета и видов субконто для ускорения формирования проводок 
//													при отработке регламентной процедурой (для посторно используемых счетов виды субконто закэшированы)
//
Процедура БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметров, СтруктураШапкиДокумента, СтруктураДвижений, Отказ, Заголовок, ПринадлежностьПоследовательностям = Неопределено, ВызванРегламентнойПроцедурой = ложь, УдаляемыеВидыРегОпераций = Неопределено, КэшВидовСубконтоПоСчетам = Неопределено, ТЗ_СуммовыеРазницы  = Неопределено) Экспорт
	
	Если СтруктураПараметров.Таблица.Количество()=0 тогда
		// Платежей нет. Движения не требуются.
		Возврат;
	КонецЕсли;
	
	ВидДокумента		= СтруктураПараметров.ВидДокумента;
	ВидОперации			= ?(СтруктураПараметров.Свойство("ВидОперации"),СтруктураПараметров.ВидОперации, Неопределено);
	
	Ссылка 				= СтруктураПараметров.Ссылка;
	
	Организация         = СтруктураПараметров.Организация;
	ДатаДока            = СтруктураПараметров.Период;
	ВалютаДокумента		= СтруктураПараметров.ВалютаДокумента;
	ЭтоВозврат	= (СтруктураПараметров.РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат);
	
	ТаблицаПлатежей = СтруктураПараметров.Таблица;
	
	ДанныеВалютыРегламентированногоУчета        = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураПараметров.ВалютаРегламентированногоУчета, ДатаДока);
	
	// Определение положений учетной политики для выбора методики отражения
	Если не СтруктураПараметров.Свойство("ОпределятьАвансыПриПроведенииДокумента") 
		тогда
		
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаДока, Организация);
		ОшибкаВПолучении = НЕ ЗначениеЗаполнено(УчетнаяПолитика);
		
		СтруктураПараметров.Вставить("ОпределятьАвансыПриПроведенииДокумента",?(ОшибкаВПолучении, Истина,УчетнаяПолитика.ОпределятьАвансыПриПроведенииДокумента));
	КонецЕсли;
	
	ОпределятьАвансыПриПроведенииДокумента = (СтруктураПараметров.ОпределятьАвансыПриПроведенииДокумента или ВызванРегламентнойПроцедурой);
	
	Если ((СтруктураПараметров.Направление = "Поступление" и СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты) или
		(СтруктураПараметров.Направление = "Выбытие" и СтруктураПараметров.РасчетыВозврат =  Перечисления.РасчетыВозврат.Возврат)) тогда
		НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация;
	Иначе
		НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовПриобретение;
	КонецЕсли;
	
	КоррСчет            = СтруктураПараметров.КоррСчет;
	СуфиксСчетаРасчетов = ?(СтруктураПараметров.Направление = "Поступление","Кт","Дт");
	СуфиксКоррСчета     = ?(СтруктураПараметров.Направление = "Поступление","Дт","Кт");
	
	ТаблицаПлатежей.Колонки.Добавить("ЗаписьОтражаетсяВРегистре", Новый ОписаниеТипов("Булево"));
	Для каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
		
		ЗаписьОтражаетсяВРегистре = СтрокаПлатежа.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		СтрокаПлатежа.ЗаписьОтражаетсяВРегистре = ЗаписьОтражаетсяВРегистре;
		
		Если СтрокаПлатежа.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом тогда
			СтрокаПлатежа.Сделка = Неопределено; 
		КонецЕсли; 
		
		//АБС ВСТАВКА 30831 Коломиец 14.04.2015 15:04:20  
		Если ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
			Если ЗначениеЗаполнено(СтрокаПлатежа.КомиссияБанка) Тогда	
				СтрокаПлатежа.СуммаВзаиморасчетов = СтрокаПлатежа.СуммаВзаиморасчетов+СтрокаПлатежа.КомиссияБанка;
				СтрокаПлатежа.СуммаСНДС = СтрокаПлатежа.СуммаСНДС+СтрокаПлатежа.КомиссияБанка;
				СтрокаПлатежа.РублеваяСумма = СтрокаПлатежа.РублеваяСумма+СтрокаПлатежа.КомиссияБанка;
				СтрокаПлатежа.ВалютнаяСумма = СтрокаПлатежа.ВалютнаяСумма+СтрокаПлатежа.КомиссияБанка;
			КонецЕсли;
		КонецЕсли;
		//АБС ВСТАВКА 30831 КОНЕЦ		
		
	КонецЦикла; 
	
	ЕстьЗаписиДляОтраженияВРегистре = ТаблицаПлатежей.Найти(Истина, "ЗаписьОтражаетсяВРегистре") <> Неопределено;
	
	//Определение списка регистров, обязательных для отражения движений
	Если ВызванРегламентнойПроцедурой Тогда
		Если СтруктураДвижений.Свойство("Хозрасчетный") Тогда
			ПроводкиБУ = СтруктураДвижений.Хозрасчетный;
		Иначе
			ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыБухгалтерии["Хозрасчетный"]);
			СтруктураДвижений.Вставить("Хозрасчетный", ПроводкиБУ);
		КонецЕсли; 
		
		Если НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации Тогда
			
			Если ЕстьЗаписиДляОтраженияВРегистре Тогда
				Если не СтруктураДвижений.Свойство("РасчетыПоРеализацииВУсловныхЕдиницахОрганизации") Тогда
					ДвиженияПоРегиструРасчетов = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации);
					СтруктураДвижений.Вставить("РасчетыПоРеализацииВУсловныхЕдиницахОрганизации", ДвиженияПоРегиструРасчетов);
				Иначе
					ДвиженияПоРегиструРасчетов = СтруктураДвижений.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации;
				КонецЕсли; 
			КонецЕсли; 
			//***** Гетц. Разнесение платежей. 19.11.12.
			ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей();
			Если ИспользоватьРазнесениеПлатежей Тогда 
				Если СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 1 Тогда 
					ДвиженияПоРегиструРасчетов.Прочитать(); // При втором обходе, движения первого затирать не нужно
				КонецЕсли;
			КонецЕсли;
			//***** Гетц. Разнесение платежей \\
		Иначе
			
			Если ЕстьЗаписиДляОтраженияВРегистре Тогда
				Если не СтруктураДвижений.Свойство("РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации") Тогда
					ДвиженияПоРегиструРасчетов = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации);
					СтруктураДвижений.Вставить("РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", ДвиженияПоРегиструРасчетов);
				Иначе
					ДвиженияПоРегиструРасчетов = СтруктураДвижений.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации;
				КонецЕсли; 
			КонецЕсли; 
	
		КонецЕсли;
	Иначе
		ПроводкиБУ = СтруктураДвижений.Хозрасчетный;
		Если ЕстьЗаписиДляОтраженияВРегистре Тогда
			Если НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации Тогда
   				ДвиженияПоРегиструРасчетов = СтруктураДвижений.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации;
			Иначе
				ДвиженияПоРегиструРасчетов = СтруктураДвижений.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Если НЕ ВызванРегламентнойПроцедурой 
		И НЕ (СтруктураШапкиДокумента.Свойство("РежимВосстановленияПоследовательностейРасчетов") 
				И СтруктураШапкиДокумента.РежимВосстановленияПоследовательностейРасчетов = Истина) Тогда
		ДвиженияИПоследовательности = Новый Структура;
		ДвиженияИПоследовательности.Вставить("Движения", СтруктураДвижений);
		ДвиженияИПоследовательности.Вставить("ПринадлежностьПоследовательностям", ПринадлежностьПоследовательностям);
		ЗафиксироватьДвижениеДенегВРегистреРасчетов(ДвиженияИПоследовательности,СтруктураПараметров);
	КонецЕсли;
	
	ТаблицаОплатыДляНДС = Новый ТаблицаЗначений();
	ТаблицаОплатыДляНДС.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов(Документы.ТипВсеСсылки()));
	ТаблицаОплатыДляНДС.Колонки.Добавить("ДокументОплаты");
	ТаблицаОплатыДляНДС.Колонки.Добавить("Сделка");
	ТаблицаОплатыДляНДС.Колонки.Добавить("РублеваяСумма"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаОплатыДляНДС.Колонки.Добавить("ВалютнаяСумма"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаОплатыДляНДС.Колонки.Добавить("Контрагент"				, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаОплатыДляНДС.Колонки.Добавить("ДоговорКонтрагента"		, Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаОплатыДляНДС.Колонки.Добавить("ВидДоговора");
	ТаблицаОплатыДляНДС.Колонки.Добавить("ВалютаВзаиморасчетов"	, Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	ТаблицаОплатыДляНДС.Колонки.Добавить("РезультатРаспределения"	, Новый ОписаниеТипов("Булево"));
	
	//	//Сокращенная схема в случае off-line проведения
	Если Не ОпределятьАвансыПриПроведенииДокумента тогда
		
		Для каждого ТекущийПлатеж из ТаблицаПлатежей Цикл
			Если ТекущийПлатеж.СуммаВзаиморасчетов = 0 тогда
				Продолжить;
			Конецесли;
			
			//Формирование проводки
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.Содержание  = ?(ЭтоВозврат,"Возврат ","Оплата ")+"(без определения аванса)";
			Проводка.ВидРегламентнойОперации  = ВидРегламентнойОперации;
			
			Проводка["Счет"+СуфиксСчетаРасчетов]= ТекущийПлатеж.СчетОплаты;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"Контрагенты", ТекущийПлатеж.Контрагент,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка["Счет"+СуфиксСчетаРасчетов], КэшВидовСубконтоПоСчетам));
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"Договоры"   , ТекущийПлатеж.ДоговорКонтрагента,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка["Счет"+СуфиксСчетаРасчетов], КэшВидовСубконтоПоСчетам));
			
			Если Проводка["Счет"+СуфиксСчетаРасчетов].Валютный тогда
				Проводка["Валюта"+СуфиксСчетаРасчетов]        = ТекущийПлатеж.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма"+СуфиксСчетаРасчетов] = ТекущийПлатеж.СуммаВзаиморасчетов;
			КонецЕсли;
			
			Проводка["Счет"+СуфиксКоррСчета] = КоррСчет;
			ВидыСубконтоКоррСчета =  БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка["Счет"+СуфиксКоррСчета],КэшВидовСубконтоПоСчетам);
			Для каждого ВидСубконтоКоррСчета из ВидыСубконтоКоррСчета цикл
				Проводка["Субконто"+СуфиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
			КонецЦикла;
			
			// АБС Пугачев
			Если (ТипЗнч(Ссылка)=Тип("ДокументСсылка.РасходныйКассовыйОрдер") ИЛИ
					ТипЗнч(Ссылка)=Тип("ДокументСсылка.ПриходныйКассовыйОрдер")) И
					КоррСчет=ПланыСчетов.Хозрасчетный.ОперационнаяКасса Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксКоррСчета],Проводка["Субконто" + СуфиксКоррСчета],2,Ссылка.абс_КассаККМ);	
			КонецЕсли;
			//\\АБС
			
			Если КоррСчет.Валютный Тогда
				Проводка["Валюта"+СуфиксКоррСчета] 		  = ТекущийПлатеж.ВалютаДокумента;
				Проводка["ВалютнаяСумма"+СуфиксКоррСчета] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					ТекущийПлатеж.СуммаВзаиморасчетов,
					ТекущийПлатеж.ВалютаВзаиморасчетов, ТекущийПлатеж.ВалютаДокумента,
					ТекущийПлатеж.КурсВзаиморасчетов, ТекущийПлатеж.КурсДокумента,
					ТекущийПлатеж.КратностьВзаиморасчетов, ТекущийПлатеж.КратностьДокумента);
			КонецЕсли;
			
			Проводка.Сумма = ТекущийПлатеж.СуммаСНДС;
			
			// Отражение в регистре расчетов
			Если ТекущийПлатеж.ЗаписьОтражаетсяВРегистре Тогда
				Движение = ДвиженияПоРегиструРасчетов.Добавить();
				Движение.Активность				= Истина;
				Движение.Период 				= ДатаДока;
				Движение.ДатаОплаты 			= ДатаДока;
				Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
				
				Движение.ДоговорКонтрагента		= ТекущийПлатеж.ДоговорКонтрагента;
				Движение.Контрагент				= ТекущийПлатеж.Контрагент;
				Движение.Организация			= Организация;

				// Измерение "Документ" не заполняем! Это признак нераспределенного движения(off-line проведения)!
				Движение.Сделка					= ТекущийПлатеж.Сделка;
				Движение.СчетОплаты 			= ТекущийПлатеж.СчетОплаты;
				Движение.СуммаВзаиморасчетов	= ТекущийПлатеж.СуммаВзаиморасчетов;
				Движение.СуммаРег				= ТекущийПлатеж.СуммаСНДС;
			КонецЕсли; 
			
			// Добавим строку таблицы оплаты.
			НоваяСтрока = ТаблицаОплатыДляНДС.Добавить();
			НоваяСтрока.Контрагент		= ТекущийПлатеж.Контрагент;
			НоваяСтрока.ДоговорКонтрагента = ТекущийПлатеж.ДоговорКонтрагента;
			НоваяСтрока.ВидДоговора 	= ТекущийПлатеж.ВидДоговора;
			НоваяСтрока.ВалютаВзаиморасчетов = ТекущийПлатеж.ВалютаВзаиморасчетов;
			НоваяСтрока.СчетФактура 	= Неопределено;
			НоваяСтрока.ДокументОплаты 	= Ссылка;
			НоваяСтрока.Сделка 			= ТекущийПлатеж.Сделка;
			НоваяСтрока.РублеваяСумма	= ТекущийПлатеж.СуммаСНДС;
			НоваяСтрока.ВалютнаяСумма	= ТекущийПлатеж.СуммаВзаиморасчетов;
			
		КонецЦикла;
		
		//Удалим из СтруктураПараметров элемент "ПроводкиНУ", "Налоговый", чтобы избежать передачи мутабельного значения в модуль УчетНДСФормированиеДвижений
		ВремПроводкиНУ = неопределено;
		ВремНалоговый = неопределено;

		Если СтруктураПараметров.Свойство("ПроводкиНУ") Тогда
			ВремПроводкиНУ = СтруктураПараметров.ПроводкиНУ;
			СтруктураПараметров.Удалить("ПроводкиНУ");
		КонецЕсли;
	    Если СтруктураПараметров.Свойство("Налоговый") Тогда
			ВремНалоговый = СтруктураПараметров.Налоговый;
			СтруктураПараметров.Удалить("Налоговый");
		КонецЕсли;
		
		//Добавим в СтруктураПараметров удаленный ранее элемент ПроводкиНУ, Налоговый
		Если ВремПроводкиНУ <> неопределено Тогда
			СтруктураПараметров.Вставить("ПроводкиНУ",ВремПроводкиНУ);
			ВремПроводкиНУ = неопределено;
		КонецЕсли;
	    Если ВремНалоговый <> неопределено Тогда
			СтруктураПараметров.Вставить("Налоговый",ВремНалоговый);
			ВремНалоговый = неопределено;
		КонецЕсли;
                 		
		Возврат; //off-line
		
	КонецЕсли;
	
	//Полная схема проведения (on-line)
	
	ТаблицаОплатыДляНДС.Колонки.Добавить("КурсоваяРазница"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	МоментОпределенияОстатков = Новый Граница(новый МоментВремени(ДатаДока,Ссылка),ВидГраницы.Исключая);
	//***** Гетц. Разнесение платежей. 20.11.12
	//АБС ВСТАВКА 37017 27.12.2013 10:10:38  Шамов
	ИспользоватьРазнесениеПлатежей = ЛОЖЬ;
	//АБС ВСТАВКА  КОНЕЦ
	Если НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации Тогда
		ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей();
		Если ИспользоватьРазнесениеПлатежей Тогда 
			Если СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 1 Тогда
				МоментОпределенияОстатков = Новый Граница(СтруктураПараметров.ДатаАктуализации, ВидГраницы.Включая); //***** АБС ВСТАВКА Гетц 16.04.14
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//***** Гетц. Разнесение платежей \\
	
	Если ЭтоВозврат Тогда
		Для каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
			СчетАванса = СтрокаПлатежа.СчетОплаты;
			СтрокаПлатежа.СчетОплаты = ?(ЗначениеЗаполнено(СтрокаПлатежа.СчетАванса), СтрокаПлатежа.СчетАванса, СтрокаПлатежа.СчетОплаты);
			СтрокаПлатежа.СчетАванса = СчетАванса;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПлатежей.Колонки.Добавить("АвансВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаПлатежей.Колонки.Добавить("ОстаткиПоСчетамБУ", Новый ОписаниеТипов("Булево"));
	ТаблицаПлатежей.Колонки.Добавить("ОстаткиПоРегистру", Новый ОписаниеТипов("Булево"));
	
	ЕстьРасчетыВУЕ = НЕ (ТаблицаПлатежей.Найти(Истина, "РасчетыВУсловныхЕдиницах") = Неопределено);
	
	Для каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
		
		Если СтрокаПлатежа.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			ЭтоАванс = НЕ ЗначениеЗаполнено(СтрокаПлатежа.ДокументРасчетовСКонтрагентом); 	
			Если ЭтоАванс Тогда
				Продолжить;
			КонецЕсли;
			РасчетыВВалюте = СтрокаПлатежа.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;	
			Если НЕ РасчетыВВалюте И НЕ СтрокаПлатежа.ЗаписьОтражаетсяВРегистре Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаПлатежа.ЗаписьОтражаетсяВРегистре Тогда
			СтрокаПлатежа.ОстаткиПоРегистру = Истина;
		Иначе
			СтрокаПлатежа.ОстаткиПоСчетамБУ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьОстаткиПоСчетамБУ = НЕ (ТаблицаПлатежей.Найти(Истина, "ОстаткиПоСчетамБУ") = Неопределено);
	ЕстьОстаткиПоРегистру = НЕ (ТаблицаПлатежей.Найти(Истина, "ОстаткиПоРегистру") = Неопределено);
	
	Если ЕстьОстаткиПоСчетамБУ Тогда
		
		Запрос = Новый Запрос;
		МенеджерВремТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВремТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.ДоговорКонтрагента,
		|	Таб.СчетОплаты
		|ПОМЕСТИТЬ
		|	ТаблицаДляОстатковПоСчетамБУ
		|ИЗ
		|	&ТаблицаПлатежей КАК Таб
		|ГДЕ
		|	Таб.ОстаткиПоСчетамБУ";
		Запрос.УстановитьПараметр("ТаблицаПлатежей", ТаблицаПлатежей);
		Запрос.Выполнить();
		
		Запрос.УстановитьПараметр("Организация"		, Организация);
		Запрос.УстановитьПараметр("СубконтоДоговор"	, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		Запрос.УстановитьПараметр("Период"			, МоментОпределенияОстатков);
		Запрос.УстановитьПараметр("Множитель"		, ?(СтруктураПараметров.Направление = "Поступление", 1, -1));
		Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", СтруктураПараметров.ВалютаРегламентированногоУчета);
		
		Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
					
			СтруктураПараметровБлокировки = Новый Структура(
				"ТипТаблицы, ИмяТаблицы, ИсточникДанных, ИмяВременнойТаблицы", 
				"РегистрБухгалтерии", "Хозрасчетный", МенеджерВремТаблиц, "ТаблицаДляОстатковПоСчетамБУ");
			СтруктураЗначенийБлокировки = Новый Структура(
				"Период, Организация", 
				Новый Диапазон(, ДатаДока), Организация);
			СтруктураИсточникаДанных      = Новый Структура(
				"Счет, Субконто2", // Считаем, что вид субконто "Договоры" на всех счетах расчетов - второй
				"СчетОплаты", "ДоговорКонтрагента");
			
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных, Отказ, Заголовок);
					
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК ДоговорКонтрагента,
		|	ХозрасчетныйОстатки.Счет КАК СчетОплаты,
		|	ХозрасчетныйОстатки.СуммаОстаток * &Множитель КАК СуммаРег,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
		|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * &Множитель
		|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток * &Множитель
		|	КОНЕЦ КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&Период,
		|		Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетОплаты ИЗ ТаблицаДляОстатковПоСчетамБУ),
		|		&СубконтоДоговор,
		|		Организация = &Организация
		|		    И Субконто1 В (ВЫБРАТЬ РАЗЛИЧНЫЕ ДоговорКонтрагента ИЗ ТаблицаДляОстатковПоСчетамБУ)) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
		|					ИЛИ ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток * &Множитель
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ХозрасчетныйОстатки.Счет.Валютный
		|						ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * &Множитель
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ > 0
		|// АБС ВСТАВКА для исключения блокировок
		|//ДЛЯ ИЗМЕНЕНИЯ
		|//	РегистрБухгалтерии.Хозрасчетный.Остатки
		|";
		
		ТаблицаОстатковПоСчетамБУ = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли; 
	
	Если ЕстьОстаткиПоРегистру Тогда
		
		Запрос = Новый Запрос;
		МенеджерВремТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВремТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.ДоговорКонтрагента,
		|	Таб.Сделка,
		|	Таб.СчетОплаты
		|ПОМЕСТИТЬ ВремТаблицаДляОстатковПоРегистру
		|ИЗ
		|	&ТаблицаПлатежей КАК Таб
		|ГДЕ
		|	Таб.ОстаткиПоРегистру
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(Таб.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ Таб.Сделка
		|	КОНЕЦ КАК Сделка,
		|	Таб.СчетОплаты
		|ПОМЕСТИТЬ ТаблицаДляОстатковПоРегистру
		|ИЗ
		|	ВремТаблицаДляОстатковПоРегистру КАК Таб";
		Запрос.УстановитьПараметр("ТаблицаПлатежей", ТаблицаПлатежей);
		Запрос.Выполнить();
		
		Запрос.УстановитьПараметр("Период"			, МоментОпределенияОстатков);
		Запрос.УстановитьПараметр("Множитель"		, ?(ЭтоВозврат, 1, -1));
		//АБС_Попов
		Запрос.УстановитьПараметр("Организация"		, Организация);
		//\\АБС_Попов
		Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
					
			СтруктураПараметровБлокировки = Новый Структура(
			"ИсточникДанных, ИмяВременнойТаблицы", МенеджерВремТаблиц, "ТаблицаДляОстатковПоРегистру");
			Если НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации Тогда
				СтруктураПараметровБлокировки.Вставить("ИмяТаблицы", "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации");
			Иначе
				СтруктураПараметровБлокировки.Вставить("ИмяТаблицы", "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации");
			КонецЕсли; 
			СтруктураЗначенийБлокировки = Новый Структура(
				"Период,Организация", Новый Диапазон(, ДатаДока),Организация);
				
			СтруктураИсточникаДанных      = Новый Структура(
				"ДоговорКонтрагента, Сделка, СчетОплаты", 
				"ДоговорКонтрагента", "Сделка", "СчетОплаты");			
			
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных, Отказ, Заголовок);
					
		КонецЕсли;
					

		// АБС ВСТАВКА Фролов 20120722
		// Отключаем отбор по сделкам в регл. регистрах.
		// Закомментирован отбор по сделке
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасчетыВУЕ.ДоговорКонтрагента,
		|	РасчетыВУЕ.Сделка,
		|	РасчетыВУЕ.СчетОплаты,
		|	РасчетыВУЕ.ДатаОплаты КАК ДатаОплаты,
		|	РасчетыВУЕ.Документ КАК Документ,
		|	РасчетыВУЕ.СуммаВзаиморасчетовОстаток * &Множитель КАК СуммаВзаиморасчетов,
		|	РасчетыВУЕ.СуммаРегОстаток * &Множитель КАК СуммаРег
		|ИЗ
		|	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки(
		|		&Период,  Организация = &Организация 
		//АБС ВСТАВКА №44345 НАЧАЛО «28 мая 2014 г.», Пополитов
		| и выбор когда ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда Документ в (&ДокументыРасчетов) Иначе Истина Конец 	
		//\\АБС ВСТАВКА №44345 КОНЕЦ	
		| " + ?(ИспользоватьРазнесениеПлатежей И Не (СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 0), "И ЕСТЬNULL(Документ.абс_НеИспользоватьРаспределениеПлатежей, ЛОЖЬ) = ЛОЖЬ ", "") + "И //***** АБС Гетц. 20.03.2014
		|		(ДоговорКонтрагента, 
		|		//Сделка, 
		|		СчетОплаты) В (ВЫБРАТЬ РАЗЛИЧНЫЕ ДоговорКонтрагента, 
		|		//Сделка, 
		|		СчетОплаты ИЗ ТаблицаДляОстатковПоРегистру)) КАК РасчетыВУЕ
		|ГДЕ
		|	РасчетыВУЕ.СуммаВзаиморасчетовОстаток * &Множитель > 0
		|	И РасчетыВУЕ.СуммаРегОстаток * &Множитель > 0
		|
		|// АБС ВСТАВКА для исключения блокировок
		|//ДЛЯ ИЗМЕНЕНИЯ
		|//	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки
		|//АБС для исключения блокировок
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОплаты,
		|	РасчетыВУЕ.Документ.Дата,
		|	Документ";
		
		Если НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", "РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации");
		КонецЕсли; 
		Запрос.Текст = ТекстЗапроса;
		
		//АБС ВСТАВКА №44345 НАЧАЛО «28 мая 2014 г.», Пополитов
		ДокументыРасчетов = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаПлатежей.ВыгрузитьКолонку("ДокументРасчетовСКонтрагентом"),Истина);
		Запрос.УстановитьПараметр("ДокументыРасчетов", ДокументыРасчетов);	
		//\\АБС ВСТАВКА №44345 КОНЕЦ			
		
		ТаблицаОстатковПоРегистру = Запрос.Выполнить().Выгрузить();
		//++ТТК Готовцев 21.02.2018
		
		Если ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
			УсловиеСработало = ложь;
			//Отменям квитование до лучших времен
			ЕСли Константы.ttk_РазделениеВзаиморасчетовНаАвасыИЗадолженность.Получить() >  Дата("00010101") ТОгда
				АгрКонтрагент = Справочники.Контрагенты.НайтиПоКоду("K205136");
				ЕСли ДатаДока >= Константы.ttk_РазделениеВзаиморасчетовНаАвасыИЗадолженность.Получить() и СокрЛП(ссылка.Организация.Код) = "000000001"  ТОгда
				//ЕСли ДатаДока >= Константы.ttk_РазделениеВзаиморасчетовНаАвасыИЗадолженность.Получить()   ТОгда
					
					ЕСли Ссылка.РасшифровкаПлатежа.Количество()>0 ТОгда  
						Если ЗначениеЗаполнено(Ссылка.РасшифровкаПлатежа[0].ДоговорКонтрагента) ТОгда
							ЕСли НЕ Ссылка.РасшифровкаПлатежа[0].ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом и Ссылка.РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить() Тогда 
								Если   Ссылка.РасшифровкаПлатежа[0].ДоговорКонтрагента.Владелец <> АгрКонтрагент ТОгда
									Если ЗначениеЗаполнено(Ссылка.РасшифровкаПлатежа[0].ДоговорКонтрагента.ввв_МестонахождениеБиллинга) ТОгда
										Если  Ссылка.РасшифровкаПлатежа[0].ДоговорКонтрагента.ввв_МестонахождениеБиллинга.ТипБиллинга = Справочники.абс_ТипыБиллинга.НайтиПоНаименованию("BRM") Тогда
											ТаблицаОстатковПоРегистру.Очистить();
											УсловиеСработало = истина;
										КонецЕсли;
									КонецЕсли;
									
									//Если ПроверкаДокументаБиллинга(ссылка) ТОгда 
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЕСли НЕ УсловиеСработало Тогда
				//***** Гетц. Разнесение платежей. 20.11.12
				Если НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации Тогда
					УчестьЗачтенныеАвансы(СтруктураПараметров);
				КонецЕсли;
				//***** Гетц. Разнесение платежей \\
				
			КонецЕсли;
		иначе
			//***** Гетц. Разнесение платежей. 20.11.12
			Если НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации Тогда
				УчестьЗачтенныеАвансы(СтруктураПараметров);
			КонецЕсли;
			//***** Гетц. Разнесение платежей \\
			
		КонецЕсли;
		
		//--ТТК Готовцев 21.02.2018

				
	КонецЕсли; 
	
	ТаблицаПлатежей.Колонки.Добавить("ДолгВал" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("ДолгРег" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	//ТаблицаПлатежей.Колонки.Добавить("АвансВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("АвансРег", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Если ЕстьРасчетыВУЕ Тогда
		
		СуммоваяРазницаПоДокументам = Новый ТаблицаЗначений();
		СуммоваяРазницаПоДокументам.Колонки.Добавить("Регистратор");
		СуммоваяРазницаПоДокументам.Колонки.Добавить("СуммоваяРазница"      , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		СуммоваяРазницаПоДокументам.Колонки.Добавить("Документ"             , Документы.ТипВсеСсылки());
		СуммоваяРазницаПоДокументам.Колонки.Добавить("Сделка"               , Документы.ТипВсеСсылки());
		СуммоваяРазницаПоДокументам.Колонки.Добавить("Контрагент"           , Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		СуммоваяРазницаПоДокументам.Колонки.Добавить("ДоговорКонтрагента"   , Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		СуммоваяРазницаПоДокументам.Колонки.Добавить("ВалютаВзаиморасчетов" , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
		//АБС ВСТАВКА Навценя 
		ТЗ_СуммовыеРазницы = СуммоваяРазницаПоДокументам.Скопировать();
		
	Иначе
		
		ТЗ_СуммовыеРазницы = Новый ТаблицаЗначений();
		ТЗ_СуммовыеРазницы.Колонки.Добавить("Регистратор");
		ТЗ_СуммовыеРазницы.Колонки.Добавить("СуммоваяРазница"      , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТЗ_СуммовыеРазницы.Колонки.Добавить("Документ"             , Документы.ТипВсеСсылки());
		ТЗ_СуммовыеРазницы.Колонки.Добавить("Сделка"               , Документы.ТипВсеСсылки());
		ТЗ_СуммовыеРазницы.Колонки.Добавить("Контрагент"           , Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТЗ_СуммовыеРазницы.Колонки.Добавить("ДоговорКонтрагента"   , Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТЗ_СуммовыеРазницы.Колонки.Добавить("ВалютаВзаиморасчетов" , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
		//АБС ВСТАВКА Конец		
	КонецЕсли; 
	
	
	
	Для каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
		
		//***** АБС Гетц 15.04.2014
		СтрокаПлатежа.ВестиПоДокументамРасчетовСКонтрагентом = ((Не СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") Или (СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 0)) И СтрокаПлатежа.ВестиПоДокументамРасчетовСКонтрагентом);
		//***** АБС Гетц 15.04.2014 \\
		
		СуммаСНДСВал = СтрокаПлатежа.СуммаВзаиморасчетов;
		СуммаСНДСРег = СтрокаПлатежа.СуммаСНДС;
		Если не СуммаСНДСВал = 0 Тогда
			КурсПлатежа = СуммаСНДСРег / СуммаСНДСВал;
		Иначе
			КурсПлатежа = СтрокаПлатежа.КурсВзаиморасчетов;	
		КонецЕсли;	
		
		Если СтрокаПлатежа.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		
			ЭтоАванс = НЕ ЗначениеЗаполнено(СтрокаПлатежа.ДокументРасчетовСКонтрагентом)
			       ИЛИ СтрокаПлатежа.ДокументРасчетовСКонтрагентом = Ссылка;
			Если ЭтоАванс Тогда
				
				СтрокаПлатежа.АвансВал            = СтрокаПлатежа.СуммаВзаиморасчетов;
				СтрокаПлатежа.АвансРег            = СтрокаПлатежа.СуммаСНДС;
				СтрокаПлатежа.СуммаВзаиморасчетов = 0;
				СтрокаПлатежа.СуммаСНДС           = 0;
				
				Продолжить;
				
			КонецЕсли;
		
			РасчетыВВалюте = СтрокаПлатежа.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;	
			Если НЕ РасчетыВВалюте И НЕ СтрокаПлатежа.ЗаписьОтражаетсяВРегистре Тогда
				
				СтрокаПлатежа.ДолгВал             = СтрокаПлатежа.СуммаВзаиморасчетов;
				СтрокаПлатежа.ДолгРег             = СтрокаПлатежа.СуммаСНДС;
				
				НоваяСтрока = ТаблицаОплатыДляНДС.Добавить();
				
				НоваяСтрока.Контрагент		       = СтрокаПлатежа.Контрагент;
				НоваяСтрока.ДоговорКонтрагента     = СтрокаПлатежа.ДоговорКонтрагента;
				НоваяСтрока.ВидДоговора 	       = СтрокаПлатежа.ВидДоговора;
				НоваяСтрока.ВалютаВзаиморасчетов   = СтрокаПлатежа.ВалютаВзаиморасчетов;
				НоваяСтрока.СчетФактура 	       = СтрокаПлатежа.ДокументРасчетовСКонтрагентом;
				НоваяСтрока.ДокументОплаты 	       = Неопределено;
				НоваяСтрока.Сделка 			       = СтрокаПлатежа.Сделка;
				НоваяСтрока.РезультатРаспределения = Истина;
				НоваяСтрока.РублеваяСумма	       = СтрокаПлатежа.СуммаСНДС;
				НоваяСтрока.ВалютнаяСумма	       = СтрокаПлатежа.СуммаВзаиморасчетов;
				НоваяСтрока.КурсоваяРазница        = 0;
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
				
		Отбор = Новый Структура;
		Отбор.Вставить("ДоговорКонтрагента", СтрокаПлатежа.ДоговорКонтрагента);
		Отбор.Вставить("СчетОплаты", СтрокаПлатежа.СчетОплаты);
		
		Если СтрокаПлатежа.ЗаписьОтражаетсяВРегистре Тогда
			// АБС ВСТАВКА Фролов 20120722
			// Отключаем отбор по сделкам в регл. регистрах.
			// Закомментирован отбор по сделке
			
			//Отбор.Вставить("Сделка", СтрокаПлатежа.Сделка);
			Если СтрокаПлатежа.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				Отбор.Вставить("Документ", СтрокаПлатежа.ДокументРасчетовСКонтрагентом);
			КонецЕсли;
			СтрокиОстатка = ТаблицаОстатковПоРегистру.НайтиСтроки(Отбор);
			//***** Гетц. Разнесение платежей. 26.10.12
			ИспользоватьРазнесениеПлатежейКонстанта = ПолучитьИспользованиеРаспределенияПлатежей();
			Если ИспользоватьРазнесениеПлатежейКонстанта Тогда 
				ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей(СтруктураПараметров.Ссылка, СтрокаПлатежа.ДоговорКонтрагента);
				Если ИспользоватьРазнесениеПлатежей Тогда 
					ЭтоВосстановлениеРасчетов = СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 0;
					Если СтрокаПлатежа.ВестиПоДокументамРасчетовСКонтрагентом Тогда
						Если ЭтоВосстановлениеРасчетов Тогда    						
							Если СтрокиОстатка.Количество() = 0 Тогда
								СтрокаОстатки = ТаблицаОстатковПоРегистру.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаОстатки, СтрокаПлатежа);
								СтрокаОстатки.СуммаРег = СтрокаПлатежа.РублеваяСумма;
								//АБС ВСТАВКА ***** нет остатков - нет движений  15.04.2014 19:47:53  Гетц
								СтрокаОстатки.СуммаРег = 0;
								СтрокаОстатки.СуммаВзаиморасчетов = 0;
								//АБС ВСТАВКА ***** КОНЕЦ
							Иначе 
								СтрокаОстатки = СтрокиОстатка[0];
							КонецЕсли;
							СтрокаОстатки.Документ = СтрокаПлатежа.ДокументРасчетовСКонтрагентом;
							СтрокаОстатки.СуммаВзаиморасчетов = Мин(СтрокаПлатежа.СуммаВзаиморасчетов, СтрокаОстатки.СуммаВзаиморасчетов); //***** АБС Гетц. 18.03.14
							СтрокаОстатки.СуммаРег = Мин(СтрокаПлатежа.РублеваяСумма, СтрокаОстатки.СуммаРег);                             //***** АБС Гетц. 18.03.14
							СтрокиОстатка = ТаблицаОстатковПоРегистру.НайтиСтроки(Отбор);
						Иначе 
							НеИспользоватьФИФО = НеИспользоватьФИФОВДокументе(СтруктураПараметров.Ссылка);
							Если Не НеИспользоватьФИФО Тогда
								Если СтрокиОстатка.Количество() = 0 Тогда 
									// Если остатков нет, выполняем полное распределение строки, без учета указанного документа расчета									
									СтрокаПлатежа.ВестиПоДокументамРасчетовСКонтрагентом = Ложь;
									Отбор.Удалить("Документ");
									СтрокиОстатка = ТаблицаОстатковПоРегистру.НайтиСтроки(Отбор);									
								ИначеЕсли СтрокиОстатка[0].СуммаВзаиморасчетов < СтрокаПлатежа.СуммаВзаиморасчетов Тогда 									
									// Если остаток меньше суммы платежа, тогда по документу запишем только остаток, остальное распределим (новая строка платежа)
									ИсходнаяСуммаПлатежа = СтрокаПлатежа.СуммаВзаиморасчетов;
									ИсходнаяСуммаСНДС = СтрокаПлатежа.СуммаСНДС;
									ИсходнаяВалютнаяСумма = СтрокаПлатежа.ВалютнаяСумма;
									ИсходнаяРублеваяСумма = СтрокаПлатежа.РублеваяСумма;
									
									СтрокаПлатежа.СуммаВзаиморасчетов = СтрокиОстатка[0].СуммаВзаиморасчетов;
									НоваяСтрока = ТаблицаПлатежей.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПлатежа);
									НоваяСтрока.ВестиПоДокументамРасчетовСКонтрагентом = Ложь;
									НоваяСтрока.ДокументРасчетовСКонтрагентом = Неопределено;

									//АБС ВСТАВКА №44797 НАЧАЛО «18 июня 2014 г.», Пополитов
									Если ТаблицаПлатежей.Колонки.Найти("ДокументРасчетов") = Неопределено Тогда
										ТаблицаПлатежей.Колонки.Добавить("ДокументРасчетов");	
									КонецЕсли;	 								
									//\\АБС ВСТАВКА №44797 КОНЕЦ
									
									НоваяСтрока.ДокументРасчетов = Неопределено;
									НоваяСтрока.СуммаВзаиморасчетов = ИсходнаяСуммаПлатежа - СтрокиОстатка[0].СуммаВзаиморасчетов;
									
									НоваяСтрока.СуммаСНДС = (НоваяСтрока.СуммаВзаиморасчетов * ИсходнаяСуммаСНДС) / ИсходнаяСуммаПлатежа;
									НоваяСтрока.ВалютнаяСумма = (НоваяСтрока.СуммаВзаиморасчетов * ИсходнаяВалютнаяСумма) / ИсходнаяСуммаПлатежа;
									НоваяСтрока.РублеваяСумма = (НоваяСтрока.СуммаВзаиморасчетов * ИсходнаяРублеваяСумма) / ИсходнаяСуммаПлатежа;
									
									СтрокаПлатежа.СуммаСНДС = СтрокаПлатежа.СуммаСНДС - НоваяСтрока.СуммаСНДС;
									СтрокаПлатежа.ВалютнаяСумма = СтрокаПлатежа.ВалютнаяСумма - НоваяСтрока.ВалютнаяСумма;
									СтрокаПлатежа.РублеваяСумма = СтрокаПлатежа.РублеваяСумма - НоваяСтрока.РублеваяСумма;																		
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 1 И НеИспользоватьФИФОВДокументе(СтруктураПараметров.Ссылка) 
						//АБС ВСТАВКА 37934 Разнесение платежей  19.03.2014 16:59:07  Гетц
						Или СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 0 И СтрокаПлатежа.ВестиПоДокументамРасчетовСКонтрагентом = Ложь И СтрокаПлатежа.ДокументРасчетовСКонтрагентом = Неопределено Тогда 
						//АБС ВСТАВКА 37934 Разнесение платежей КОНЕЦ
						СтрокиОстатка = Новый Массив;
					КонецЕсли;
				КонецЕсли;
				// Если выполняется восстановление расчетов, 2 обход и есть зачтенные ранее авансы, уменьшаем взаиморасчеты на эту сумму.
				ЭтоВосстановлениеРасчетов = СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 1;
				ПолученыЗачтенныеАвансы = СтруктураПараметров.Свойство("ЗачтенныеАвансы");

				Если ЭтоВосстановлениеРасчетов И ПолученыЗачтенныеАвансы Тогда 
					СтрокаПлатежа.СуммаВзаиморасчетов = Макс(0, СтрокаПлатежа.СуммаВзаиморасчетов - СтруктураПараметров.ЗачтенныеАвансы.СуммаВзаиморасчетов);
					СтрокаПлатежа.РублеваяСумма = Макс(0, СтрокаПлатежа.РублеваяСумма - СтруктураПараметров.ЗачтенныеАвансы.СуммаРег);
					СтрокаПлатежа.СуммаСНДС = Макс(0, СтрокаПлатежа.СуммаСНДС - СтруктураПараметров.ЗачтенныеАвансы.СуммаРег);
				КонецЕсли;
			КонецЕсли;
			
			//***** Гетц \\
		Иначе
			СтрокиОстатка = ТаблицаОстатковПоСчетамБУ.НайтиСтроки(Отбор);
		КонецЕсли;
		
		// При расчетах по документам может быть только одна строка остатка, 
		// причем сумма взаиморасчетов остатка не должна быть меньше суммы взаиморасчетов платежа
		// так как при расчетах по документам мы здесь должны всю сумму платежа отнести на расчеты
		// (не делать распределения между расчетами и авансами)
		Если СтрокаПлатежа.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			
			НетОстатков = СтрокиОстатка.Количество() = 0;
		
			Если НетОстатков Тогда
				
				Если СтрокаПлатежа.ЗаписьОтражаетсяВРегистре Тогда
					СтрокаОстатка = ТаблицаОстатковПоРегистру.Добавить();
					// АБС ВСТАВКА Фролов 20120722
					// Отключаем отбор по сделкам в регл. регистрах.
					// Закомментирован отбор по сделке
					
					//СтрокаОстатка.Сделка = СтрокаПлатежа.Сделка;
					СтрокаОстатка.Документ = СтрокаПлатежа.ДокументРасчетовСКонтрагентом;
				Иначе
					СтрокаОстатка = ТаблицаОстатковПоСчетамБУ.Добавить();
				КонецЕсли;
				СтрокаОстатка.ДоговорКонтрагента = СтрокаПлатежа.ДоговорКонтрагента;
				СтрокаОстатка.СчетОплаты         = СтрокаПлатежа.СчетОплаты;
				СтрокаОстатка.СуммаВзаиморасчетов = 0;
				СтрокаОстатка.СуммаРег            = 0;
				
				СтрокиОстатка.Добавить(СтрокаОстатка);
				
			КонецЕсли;
				
			СтрокаОстатка = СтрокиОстатка[0];
			
			Если СтрокаОстатка.СуммаВзаиморасчетов < СтрокаПлатежа.СуммаВзаиморасчетов Тогда
				//СтрокаОстатка.СуммаВзаиморасчетов = СтрокаПлатежа.СуммаВзаиморасчетов; //***** АБС Гетц. Разнесение платежей 18.03.14.
			КонецЕсли;
			//***** Гетц. Разнесение платежей
			Если ПолучитьИспользованиеРаспределенияПлатежей() Тогда 
				Если СтрокаОстатка.СуммаРег < СтрокаПлатежа.РублеваяСумма Тогда
					//СтрокаОстатка.СуммаРег = СтрокаПлатежа.РублеваяСумма; //***** АБС Гетц. Разнесение платежей 18.03.14.
				КонецЕсли;
			КонецЕсли;
			//***** Гетц \\
		КонецЕсли;
		
		КурсыВалют20071231 = Новый Соответствие;
		
		Для каждого СтрокаОстатка Из СтрокиОстатка Цикл

			ДолгВал       = СтрокаОстатка.СуммаВзаиморасчетов;
			ДолгРег       = СтрокаОстатка.СуммаРег;
			//***** Гетц. Разнесение платежей. 26.10.12
			Если ПолучитьИспользованиеРаспределенияПлатежей() Тогда
				Если ДолгВал = 0 И ДолгРег = 0 Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//***** Гетц \\
			КурсОстатка = ?(ДолгВал = 0, 0, ДолгРег / ДолгВал);
				
			ТекущееПокрытиеВал	   = Мин(ДолгВал, СтрокаПлатежа.СуммаВзаиморасчетов);
			ТекущееПокрытиеРег	   = Окр(ТекущееПокрытиеВал * КурсОстатка, 2);
			ЗачитываемаяСуммаРег   = Окр(ТекущееПокрытиеВал * КурсПлатежа, 2);
			ТекущаяСуммоваяРазница = ЗачитываемаяСуммаРег - ТекущееПокрытиеРег;
			
			Если СтрокаПлатежа.ЗаписьОтражаетсяВРегистре Тогда
				ТекДокументРасчетов = СтрокаОстатка.Документ;
				ТекСделка = СтрокаОстатка.Сделка;
				ЕстьРаспределениеПоДокументам = Истина;
			ИначеЕсли СтрокаПлатежа.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				ТекДокументРасчетов = СтрокаПлатежа.ДокументРасчетовСКонтрагентом;
				ТекСделка = СтрокаПлатежа.Сделка;
				ЕстьРаспределениеПоДокументам = Истина;
			Иначе
				ТекДокументРасчетов = Неопределено;
				ТекСделка = СтрокаПлатежа.Сделка;
				ЕстьРаспределениеПоДокументам = Ложь;
			КонецЕсли;
			
			Если СтрокаПлатежа.РасчетыВУсловныхЕдиницах И ТекущаяСуммоваяРазница <> 0 Тогда
				
				Если НЕ ЭтоВозврат Тогда
					
					СтрокаСуммовыхРазниц = СуммоваяРазницаПоДокументам.Добавить();
					
					СтрокаСуммовыхРазниц.Регистратор		  = ТекДокументРасчетов;
					СтрокаСуммовыхРазниц.Документ			  = ТекДокументРасчетов;
					СтрокаСуммовыхРазниц.Сделка				  = ТекСделка;
					СтрокаСуммовыхРазниц.Контрагент			  = СтрокаПлатежа.Контрагент;
					СтрокаСуммовыхРазниц.ДоговорКонтрагента	  = СтрокаПлатежа.ДоговорКонтрагента;
					СтрокаСуммовыхРазниц.ВалютаВзаиморасчетов = СтрокаПлатежа.ВалютаВзаиморасчетов;
					СтрокаСуммовыхРазниц.СуммоваяРазница	  = ТекущаяСуммоваяРазница;
					
					//АБС ВСТАВКА Навценя
					ЗаполнитьЗначенияСвойств(ТЗ_СуммовыеРазницы.Добавить(),СтрокаСуммовыхРазниц);
					
				Иначе
					ТекстОшибки = 
					"Курс взаиморасчетов, указанный в документе возврата аванса, отличается от курса аванса, 
					|в результате чего возникла разница в размере " + ТекущаяСуммоваяРазница + " руб.
					|Договор: " + СтрокаПлатежа.ДоговорКонтрагента + ", сделка: " + ?(НЕ ЗначениеЗаполнено(ТекСделка), "не указана", ТекСделка) + ", документ аванса: " + ТекДокументРасчетов + ".
					|Разницы при возврате авансов автоматически в учете не отражаются.
					|Необходимо установить в документе курс возврата равным курсу аванса или отразить разницу в размере " + ТекущаяСуммоваяРазница + " руб. вручную.";
					ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, ,Заголовок);
				КонецЕсли;
				
			ИначеЕсли ТекущаяСуммоваяРазница <> 0 Тогда  
				
				СтрокаСуммовыхРазниц = ТЗ_СуммовыеРазницы.Добавить();
				
				СтрокаСуммовыхРазниц.Регистратор		  = ТекДокументРасчетов;
				СтрокаСуммовыхРазниц.Документ			  = ТекДокументРасчетов;
				СтрокаСуммовыхРазниц.Сделка				  = ТекСделка;
				СтрокаСуммовыхРазниц.Контрагент			  = СтрокаПлатежа.Контрагент;
				СтрокаСуммовыхРазниц.ДоговорКонтрагента	  = СтрокаПлатежа.ДоговорКонтрагента;
				СтрокаСуммовыхРазниц.ВалютаВзаиморасчетов = СтрокаПлатежа.ВалютаВзаиморасчетов;
				СтрокаСуммовыхРазниц.СуммоваяРазница	  = ТекущаяСуммоваяРазница;

			//АБС ВСТАВКА КОНЕЦ
			КонецЕсли; 
			
			Если СтрокаПлатежа.ЗаписьОтражаетсяВРегистре Тогда
				
				Движение = ?(ЭтоВозврат, ДвиженияПоРегиструРасчетов.ДобавитьРасход(), ДвиженияПоРегиструРасчетов.ДобавитьПриход());
				
				Движение.Период 				= ДатаДока;
				Движение.Активность				= Истина;
				Движение.Организация			= Организация;
				Движение.Контрагент				= СтрокаПлатежа.Контрагент;
				Движение.ДоговорКонтрагента		= СтрокаПлатежа.ДоговорКонтрагента;
				Движение.Сделка					= ТекСделка;
				Движение.Документ				= ТекДокументРасчетов;
				Движение.ДатаОплаты				= СтрокаОстатка.ДатаОплаты;
				Движение.СчетОплаты				= СтрокаПлатежа.СчетОплаты;
				Движение.СуммаВзаиморасчетов	= ТекущееПокрытиеВал;
				Движение.СуммаРег				= ТекущееПокрытиеРег;
				
			КонецЕсли; 
			
			НоваяСтрока = ТаблицаОплатыДляНДС.Добавить();
			
			НоваяСтрока.Контрагент		       = СтрокаПлатежа.Контрагент;
			НоваяСтрока.ДоговорКонтрагента     = СтрокаПлатежа.ДоговорКонтрагента;
			НоваяСтрока.Сделка 			       = ТекСделка;
			НоваяСтрока.ВидДоговора 	       = СтрокаПлатежа.ВидДоговора;
			НоваяСтрока.ВалютаВзаиморасчетов   = СтрокаПлатежа.ВалютаВзаиморасчетов;
			НоваяСтрока.СчетФактура 	       = ТекДокументРасчетов;
			НоваяСтрока.ДокументОплаты 	       = Неопределено;
			НоваяСтрока.РезультатРаспределения = ЕстьРаспределениеПоДокументам;
			НоваяСтрока.ВалютнаяСумма	       = ТекущееПокрытиеВал;
			НоваяСтрока.КурсоваяРазница        = ТекущаяСуммоваяРазница;
			НоваяСтрока.РублеваяСумма	       = ТекущееПокрытиеРег 
			                                   + ?(СтрокаПлатежа.РасчетыВУсловныхЕдиницах, ТекущаяСуммоваяРазница, 0);
			
			СтрокаОстатка.СуммаВзаиморасчетов = СтрокаОстатка.СуммаВзаиморасчетов - ТекущееПокрытиеВал;
			СтрокаОстатка.СуммаРег            = СтрокаОстатка.СуммаРег - ТекущееПокрытиеРег;
			
			ВозвратВВалюте2008 = ЭтоВозврат 
				И ДатаДока >= '20080101'
				И СтрокаПлатежа.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
				И НЕ СтрокаПлатежа.РасчетыВУсловныхЕдиницах;
				
			СтрокаПлатежа.ДолгВал             = СтрокаПлатежа.ДолгВал + ТекущееПокрытиеВал;
			Если ВозвратВВалюте2008 Тогда
				Если СтрокаОстатка.ДатаОплаты = Неопределено 
					или СтрокаОстатка.ДатаОплаты = Null
					или не ТипЗнч(СтрокаОстатка.ДатаОплаты) = Тип("Дата") Тогда
					ВозвратАванса2007 = Ложь;
				Иначе
					ВозвратАванса2007 = СтрокаОстатка.ДатаОплаты < '20080101';
				КонецЕсли;
				Если ВозвратАванса2007 Тогда
					
					СтруктураКурса20071231 = КурсыВалют20071231[СтрокаПлатежа.ВалютаВзаиморасчетов];
					Если СтруктураКурса20071231 = Неопределено Тогда
						СтруктураКурса20071231 = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатежа.ВалютаВзаиморасчетов, '20071231');
						КурсыВалют20071231.Вставить(СтрокаПлатежа.ВалютаВзаиморасчетов, СтруктураКурса20071231);
					КонецЕсли;
					
					ДолгРег = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущееПокрытиеВал,
						СтрокаПлатежа.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
						СтруктураКурса20071231.Курс, 1,
						СтруктураКурса20071231.Кратность, 1);
					СтрокаПлатежа.ДолгРег     = СтрокаПлатежа.ДолгРег + ДолгРег;
					
				Иначе
					СтрокаПлатежа.ДолгРег     = СтрокаПлатежа.ДолгРег + ТекущееПокрытиеРег;
				КонецЕсли;
			Иначе
				СтрокаПлатежа.ДолгРег         = СтрокаПлатежа.ДолгРег + ЗачитываемаяСуммаРег;
			КонецЕсли;
			СтрокаПлатежа.СуммаВзаиморасчетов = СтрокаПлатежа.СуммаВзаиморасчетов - ТекущееПокрытиеВал;
			СтрокаПлатежа.СуммаСНДС           = СтрокаПлатежа.СуммаСНДС - ЗачитываемаяСуммаРег;
			
			Если СтрокаПлатежа.СуммаВзаиморасчетов = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
			
		СтрокаПлатежа.АвансВал            = СтрокаПлатежа.СуммаВзаиморасчетов;
		СтрокаПлатежа.АвансРег            = СтрокаПлатежа.СуммаСНДС;
		СтрокаПлатежа.СуммаВзаиморасчетов = 0;
		СтрокаПлатежа.СуммаСНДС           = 0;
		
		//***** Гетц. Разнесение платежей. Добавим к сумме аванса по строке ранее зачтенный (принудительно) аванс
		Если ПолучитьИспользованиеРаспределенияПлатежей() Тогда 
			ЭтоВосстановлениеРасчетов = СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 1;
			ПолученыЗачтенныеАвансы = СтруктураПараметров.Свойство("ЗачтенныеАвансы");

			Если ЭтоВосстановлениеРасчетов И ПолученыЗачтенныеАвансы Тогда 
				СтрокаПлатежа.АвансВал            = СтрокаПлатежа.АвансВал + СтруктураПараметров.ЗачтенныеАвансы.СуммаВзаиморасчетов;
				СтрокаПлатежа.АвансРег            = СтрокаПлатежа.АвансРег + СтруктураПараметров.ЗачтенныеАвансы.СуммаРег;
				СтруктураПараметров.ЗачтенныеАвансы.СуммаВзаиморасчетов = 0;
				СтруктураПараметров.ЗачтенныеАвансы.СуммаРег 			= 0;
			КонецЕсли;
		КонецЕсли;
		//***** Гетц \\
		
	КонецЦикла;
	//АБС заявка 1291
	Если  ТаблицаПлатежей.Количество()>0 Тогда
		Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаДолга") Тогда 
			ИтогАвансРег =ТаблицаПлатежей.Итог("АвансРег");
			ИтогДолгРег =ТаблицаПлатежей.Итог("ДолгРег");
			ИтогРублеваяСумма =ТаблицаПлатежей.Итог("РублеваяСумма");
			Если ИтогАвансРег = 0 И ИтогДолгРег<> ИтогРублеваяСумма Тогда
				ТаблицаПлатежей[0].ДолгРег = ТаблицаПлатежей[0].ДолгРег+(ИтогРублеваяСумма-ИтогДолгРег);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;

	
	//АБС заявка 1291
	//Фиксация авансов
	Для каждого СтрокаПлатежа из ТаблицаПлатежей Цикл
		//АБС ВСТАВКА Разнесение платежей  20.03.2014 19:34:20  Гетц. Авансы (остатки по документам расчетов) распределим вторым порядком
		Если СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 0 И ЗначениеЗаполнено(СтрокаПлатежа.ДокументРасчетовСКонтрагентом) И Не СтрокаПлатежа.ДокументРасчетовСКонтрагентом = Ссылка Тогда 
			СтрокаПлатежа.АвансРег = 0;
			СтрокаПлатежа.АвансВал = 0;
		КонецЕсли;
		//АБС ВСТАВКА Разнесение платежей КОНЕЦ
		Если СтрокаПлатежа.АвансРег = 0 И СтрокаПлатежа.АвансВал = 0 тогда
			Продолжить;
		Конецесли;
			
		Если СтрокаПлатежа.ЗаписьОтражаетсяВРегистре Тогда
			
			Движение = ?(ЭтоВозврат, ДвиженияПоРегиструРасчетов.ДобавитьРасход(), ДвиженияПоРегиструРасчетов.ДобавитьПриход());
				
			Движение.Период 			 = ДатаДока;
			Движение.Активность			 = Истина;
			Движение.Организация		 = Организация;
			Движение.Контрагент			 = СтрокаПлатежа.Контрагент;
			Движение.ДоговорКонтрагента  = СтрокаПлатежа.ДоговорКонтрагента;
			Движение.Документ			 = Ссылка;
			Движение.Сделка			     = СтрокаПлатежа.Сделка;
			Движение.СчетОплаты 		 = СтрокаПлатежа.СчетАванса;
			Движение.ДатаОплаты 		 = ДатаДока;
			Движение.СуммаВзаиморасчетов = СтрокаПлатежа.АвансВал;
			Движение.СуммаРег 			 = СтрокаПлатежа.АвансРег;
			
		КонецЕсли;
			
		НоваяСтрока = ТаблицаОплатыДляНДС.Добавить();
			
		НоваяСтрока.Контрагент		     = СтрокаПлатежа.Контрагент;
		НоваяСтрока.ДоговорКонтрагента   = СтрокаПлатежа.ДоговорКонтрагента;
		НоваяСтрока.Сделка 			     = СтрокаПлатежа.Сделка;
		НоваяСтрока.ВидДоговора 	     = СтрокаПлатежа.ВидДоговора;
		НоваяСтрока.ВалютаВзаиморасчетов = СтрокаПлатежа.ВалютаВзаиморасчетов;
		НоваяСтрока.СчетФактура 	     = Неопределено;
		НоваяСтрока.ДокументОплаты       = Ссылка;
		НоваяСтрока.РублеваяСумма	     = СтрокаПлатежа.АвансРег;
		НоваяСтрока.ВалютнаяСумма	     = СтрокаПлатежа.АвансВал;
		//АБС
		Если ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
			Если значениеЗаполнено(СтрокаПлатежа.КомиссияБанка) Тогда					
				НоваяСтрока.РублеваяСумма	     = СтрокаПлатежа.АвансРег+СтрокаПлатежа.КомиссияБанка;
			Иначе
				НоваяСтрока.РублеваяСумма	     = СтрокаПлатежа.АвансРег;
			КонецЕсли;
		КонецЕсли;
		//\\АБС
	КонецЦикла;
	
	//Удалим из СтруктураПараметров элемент "ПроводкиНУ", "Налоговый", чтобы избежать передачи мутабельного значения в модуль УчетНДСФормированиеДвижений
	ВремПроводкиНУ = неопределено;
	ВремНалоговый = неопределено;
	
	Если СтруктураПараметров.Свойство("ПроводкиНУ") Тогда
		ВремПроводкиНУ = СтруктураПараметров.ПроводкиНУ;
		СтруктураПараметров.Удалить("ПроводкиНУ");
	КонецЕсли;
	Если СтруктураПараметров.Свойство("Налоговый") Тогда
		ВремНалоговый = СтруктураПараметров.Налоговый;
		СтруктураПараметров.Удалить("Налоговый");
	КонецЕсли;
	
	// Отражение в НДС
	Если НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации Тогда 
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРеализация0_КурсовыеРазницы(СтруктураПараметров, ТаблицаОплатыДляНДС, Отказ);
	КонецЕсли;
	
	//Добавим в СтруктураПараметров удаленный ранее элемент ПроводкиНУ, Налоговый
	Если ВремПроводкиНУ <> неопределено Тогда
		СтруктураПараметров.Вставить("ПроводкиНУ",ВремПроводкиНУ);
		ВремПроводкиНУ = неопределено;
	КонецЕсли;
	Если ВремНалоговый <> неопределено Тогда
		СтруктураПараметров.Вставить("Налоговый",ВремНалоговый);
		ВремНалоговый = неопределено;
	КонецЕсли;

	ОценкаДоходовРасходовПоКурсуАвансов = ПолучитьОценкуДоходовРасходовПоКурсуАвансов(ДатаДока);
	// Формирование проводок
	
	ПроводкиПоПереносуСчетаВАЛ = ДатаДока >= '20080101'
		И СтруктураШапкиДокумента.Свойство("ВидОперации") 
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
		И СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
		И НЕ СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах
		И НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН
		И (((СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
				ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
				И (СуфиксКоррСчета = "Кт"))
			ИЛИ ((СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
				ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
				И (СуфиксКоррСчета = "Дт")));
				
	Если ПроводкиПоПереносуСчетаВАЛ Тогда
		Если СуфиксКоррСчета = "Кт" Тогда
			СчетПереносаВАЛ = ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте;
		Иначе
			СчетПереносаВАЛ = ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте;
		КонецЕсли;
	КонецЕсли;
		
	Для каждого СтрокаПлатежа из ТаблицаПлатежей Цикл
		
		РасчетыВВалюте2008 = ДатаДока >= '20080101'
			И СтрокаПлатежа.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
			И НЕ СтрокаПлатежа.РасчетыВУсловныхЕдиницах;
		ФормироватьПроводкиПоСчетамВАЛ = Не ОценкаДоходовРасходовПоКурсуАвансов И РасчетыВВалюте2008
			И НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН;
			
	    //АБС ВСТАВКА 30831 Коломиец 14.04.2015 15:14:36  
		Если ВидДокумента = "ПлатежноеПоручениеВходящее" 
			И СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
			И СтрокаПлатежа.КомиссияБанка <> 0 
			И ЗначениеЗаполнено(СтрокаПлатежа.КомиссияБанка) Тогда // КТТК Ермолов Е.Л.  07.06.2015 Баг
			КомиссияБанкаДолг = 0;
			КомиссияБанкаАванс = 0;
			Если СтрокаПлатежа.АвансРег <> 0 Тогда
				Если СтрокаПлатежа.КомиссияБанка > СтрокаПлатежа.АвансРег Тогда
					КомиссияБанкаАванс = СтрокаПлатежа.АвансРег;
					КомиссияБанкаДолг  = СтрокаПлатежа.КомиссияБанка - КомиссияБанкаАванс;
					СтрокаПлатежа.ДолгРег  = СтрокаПлатежа.ДолгРег - СтрокаПлатежа.КомиссияБанка + СтрокаПлатежа.АвансРег;
					СтрокаПлатежа.АвансРег = 0;
				Иначе
					КомиссияБанкаАванс =  СтрокаПлатежа.КомиссияБанка;
					СтрокаПлатежа.АвансРег = СтрокаПлатежа.АвансРег - СтрокаПлатежа.КомиссияБанка;
				КонецЕсли;				
			Иначе
				Если СтрокаПлатежа.КомиссияБанка > СтрокаПлатежа.ДолгРег Тогда
					КомиссияБанкаДолг  = СтрокаПлатежа.ДолгРег; 
					КомиссияБанкаАванс = СтрокаПлатежа.АвансРег - КомиссияБанкаДолг;
					СтрокаПлатежа.АвансРег = СтрокаПлатежа.АвансРег - СтрокаПлатежа.КомиссияБанка + СтрокаПлатежа.ДолгРег;
					СтрокаПлатежа.ДолгРег = 0;
				Иначе
					КомиссияБанкаДолг =  СтрокаПлатежа.КомиссияБанка;
					СтрокаПлатежа.ДолгРег = СтрокаПлатежа.ДолгРег - СтрокаПлатежа.КомиссияБанка;
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
		//АБС ВСТАВКА 30831 КОНЕЦ
			
		Если СтрокаПлатежа.ДолгРег > 0 Тогда 
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.Содержание  = ?(ЭтоВозврат, "Возврат аванса", "Оплата");
			Проводка.ВидРегламентнойОперации  = ВидРегламентнойОперации;
			
			Проводка["Счет" + СуфиксСчетаРасчетов] = СтрокаПлатежа.СчетОплаты;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "Контрагенты", СтрокаПлатежа.Контрагент, , , БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка["Счет" + СуфиксСчетаРасчетов], КэшВидовСубконтоПоСчетам));
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "Договоры", СтрокаПлатежа.ДоговорКонтрагента, , , БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка["Счет" + СуфиксСчетаРасчетов], КэшВидовСубконтоПоСчетам));
			
			Проводка["Счет" + СуфиксКоррСчета] = КоррСчет;
			ВидыСубконтоКоррСчета =  БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка["Счет" + СуфиксКоррСчета], КэшВидовСубконтоПоСчетам);
			Для каждого ВидСубконтоКоррСчета из ВидыСубконтоКоррСчета цикл
				Проводка["Субконто" + СуфиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, СтрокаПлатежа["КоррСубконто" + ВидСубконтоКоррСчета.НомерСтроки]);
			КонецЦикла;
			// АБС Пугачев
			Если (ТипЗнч(Ссылка)=Тип("ДокументСсылка.РасходныйКассовыйОрдер") ИЛИ
					ТипЗнч(Ссылка)=Тип("ДокументСсылка.ПриходныйКассовыйОрдер")) И
					КоррСчет=ПланыСчетов.Хозрасчетный.ОперационнаяКасса Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксКоррСчета],Проводка["Субконто" + СуфиксКоррСчета],2,Ссылка.абс_КассаККМ);	
			КонецЕсли;
			//\\АБС
			
			Если Проводка["Счет" + СуфиксСчетаРасчетов].Валютный тогда
				Проводка["Валюта" + СуфиксСчетаРасчетов]        = СтрокаПлатежа.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + СуфиксСчетаРасчетов] = СтрокаПлатежа.ДолгВал;
			КонецЕсли;
			
			Если КоррСчет.Валютный Тогда
				Проводка["Валюта"+СуфиксКоррСчета] 		  = СтруктураПараметров.ВалютаДокумента;
				Проводка["ВалютнаяСумма"+СуфиксКоррСчета] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатежа.ДолгВал,
					СтрокаПлатежа.ВалютаВзаиморасчетов,    СтруктураПараметров.ВалютаДокумента,
					СтрокаПлатежа.КурсВзаиморасчетов,      СтруктураПараметров.КурсДокумента,
					СтрокаПлатежа.КратностьВзаиморасчетов, СтруктураПараметров.КратностьДокумента);
			КонецЕсли;
			
			Проводка.Сумма = СтрокаПлатежа.ДолгРег;
						
			// В 2008 году на суммы возврата валютных авансов делаются проводки по счету ВАЛ
			
			Если ЭтоВозврат 
				И ФормироватьПроводкиПоСчетамВАЛ
				И СтрокаПлатежа.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее
				Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = Организация;
				Проводка.Содержание   = "Возврат аванса";
				Проводка.ВидРегламентнойОперации  = ВидРегламентнойОперации;
				
				Если СтрокаПлатежа.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				
					СчетВАЛ = ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте;
				
				ИначеЕсли СтрокаПлатежа.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				
					СчетВАЛ = ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте;
				
				ИначеЕсли СтрокаПлатежа.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					
					Если СтрокаПлатежа.СчетОплаты.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
						ИЛИ СтрокаПлатежа.СчетОплаты = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал 
						Тогда
						СчетВАЛ = ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте;
					Иначе
						СчетВАЛ = ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте;
					КонецЕсли;
				
				ИначеЕсли СтрокаПлатежа.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					
					Если СтрокаПлатежа.СчетОплаты.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) 
						ИЛИ СтрокаПлатежа.СчетОплаты = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал 
						Тогда
						СчетВАЛ = ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте;
					Иначе
						СчетВАЛ = ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте;
					КонецЕсли;
				
				КонецЕсли;

				Проводка["Счет"+СуфиксСчетаРасчетов]= СчетВАЛ;

				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов], Проводка["Субконто"+СуфиксСчетаРасчетов], "Контрагенты", СтрокаПлатежа.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов], Проводка["Субконто"+СуфиксСчетаРасчетов], "Договоры", СтрокаПлатежа.ДоговорКонтрагента);
				
				// Рублевая сумма возврата по счету ВАЛ определяется текущим курсом
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатежа.ДолгВал,
					СтрокаПлатежа.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
					СтрокаПлатежа.КурсВзаиморасчетов, 1,
					СтрокаПлатежа.КратностьВзаиморасчетов, 1);
				
				Проводка["Валюта" + СуфиксСчетаРасчетов]        = СтрокаПлатежа.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + СуфиксСчетаРасчетов] = СтрокаПлатежа.ДолгВал;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаПлатежа.АвансРег <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.Содержание  = ?(ЭтоВозврат, "Возврат", "Оплата (аванс)");
			Проводка.ВидРегламентнойОперации  = ВидРегламентнойОперации;
			
			Проводка["Счет" + СуфиксСчетаРасчетов] = СтрокаПлатежа.СчетАванса;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "Контрагенты", СтрокаПлатежа.Контрагент, , , БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка["Счет" + СуфиксСчетаРасчетов], КэшВидовСубконтоПоСчетам));
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "Договоры", СтрокаПлатежа.ДоговорКонтрагента, , , БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка["Счет" + СуфиксСчетаРасчетов], КэшВидовСубконтоПоСчетам));
			
			Проводка["Счет" + СуфиксКоррСчета] = КоррСчет;
			ВидыСубконтоКоррСчета =  БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка["Счет" + СуфиксКоррСчета], КэшВидовСубконтоПоСчетам);
			Для каждого ВидСубконтоКоррСчета из ВидыСубконтоКоррСчета цикл
				Проводка["Субконто" + СуфиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, СтрокаПлатежа["КоррСубконто" + ВидСубконтоКоррСчета.НомерСтроки]);
			КонецЦикла;
			//Если КоррСчет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.02") и СтруктураШапкиДокумента.Свойство("абс_КассаККМ") Тогда
			//	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксКоррСчета],Проводка["Субконто" + СуфиксКоррСчета],2,СтруктураШапкиДокумента.абс_КассаККМ);
			//КонецЕсли;
			// АБС Пугачев
			Если (ТипЗнч(Ссылка)=Тип("ДокументСсылка.РасходныйКассовыйОрдер") ИЛИ
					ТипЗнч(Ссылка)=Тип("ДокументСсылка.ПриходныйКассовыйОрдер")) И
					КоррСчет=ПланыСчетов.Хозрасчетный.ОперационнаяКасса Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксКоррСчета],Проводка["Субконто" + СуфиксКоррСчета],2,Ссылка.абс_КассаККМ);	
			КонецЕсли;
			//\\АБС
			Если Проводка["Счет" + СуфиксСчетаРасчетов].Валютный Тогда
				Проводка["Валюта" + СуфиксСчетаРасчетов]        = СтрокаПлатежа.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + СуфиксСчетаРасчетов] = СтрокаПлатежа.АвансВал;
			КонецЕсли;
			
			Если КоррСчет.Валютный Тогда
				Проводка["Валюта"+СуфиксКоррСчета] 		  = СтруктураПараметров.ВалютаДокумента;
				Проводка["ВалютнаяСумма"+СуфиксКоррСчета] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатежа.АвансВал,
					СтрокаПлатежа.ВалютаВзаиморасчетов,    СтруктураПараметров.ВалютаДокумента,
					СтрокаПлатежа.КурсВзаиморасчетов,      СтруктураПараметров.КурсДокумента,
					СтрокаПлатежа.КратностьВзаиморасчетов, СтруктураПараметров.КратностьДокумента);
			КонецЕсли;
			
			Проводка.Сумма = СтрокаПлатежа.АвансРег;			
			
			////АБС\\
			//Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
			//	Если СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя  Тогда
			//		БанкКомиссионер = СтруктураПараметров.Ссылка.РасшифровкаПлатежа[СтрокаПлатежа.НомерСтрокиДокумента - 1].БанкКомиссионер;
			//		ДоговорБанкаКомиссионера = СтруктураПараметров.Ссылка.РасшифровкаПлатежа[СтрокаПлатежа.НомерСтрокиДокумента - 1].ДоговорБанкаКомиссионера;
			//		КомиссияБанка = СтруктураПараметров.Ссылка.РасшифровкаПлатежа[СтрокаПлатежа.НомерСтрокиДокумента - 1].КомиссияБанка;
			//		Контрагент = СтруктураПараметров.Контрагент;
			//		СчетРасчетов =СтрокаПлатежа.СчетАванса; 
			//		ПрочийРасход = СтруктураПараметров.Ссылка.РасшифровкаПлатежа[СтрокаПлатежа.НомерСтрокиДокумента - 1].ПрочийРасход;
			//		Если ЗначениеЗаполнено(БанкКомиссионер) И ЗначениеЗаполнено(ДоговорБанкаКомиссионера) И КомиссияБанка <> 0 Тогда
			//			Проводка = ПроводкиБУ.Добавить();
			//			Проводка.Период      = ДатаДока;
			//			Проводка.Активность  = Истина;
			//			Проводка.Организация = Организация;
			//			Проводка.Содержание  = "Комиссия банка";
			//			Проводка.ВидРегламентнойОперации  = ВидРегламентнойОперации;
			//			
			//			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			//			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",БанкКомиссионер);
			//			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",ДоговорБанкаКомиссионера);
			//			
			//			Проводка.СчетКт = СчетРасчетов;
			//			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",Контрагент);
			//			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтрокаПлатежа.ДоговорКонтрагента);
			//			//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураПараметров.Регистратор);
			//			
			//			Проводка.Сумма = КомиссияБанка;
			//			
			//			ПрочийРасход = СтруктураПараметров.Ссылка.РасшифровкаПлатежа[СтрокаПлатежа.НомерСтрокиДокумента - 1].ПрочийРасход;
			//			
			//			Проводка = ПроводкиБУ.Добавить();
			//			Проводка.Период      = ДатаДока;
			//			Проводка.Активность  = Истина;
			//			Проводка.Организация = Организация;
			//			Проводка.Содержание  = "Комиссия банка";
			//			Проводка.ВидРегламентнойОперации  = ВидРегламентнойОперации;
			//			
			//			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
			//			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ПрочиеДоходыИРасходы",ПрочийРасход);
			//			
			//			ГодПериода = Год(ДатаДока);
			//			МесяцПериода = Месяц(ДатаДока);
			//			Если МесяцПериода < 10 Тогда
			//				МесяцПериода = "0" + СокрЛП(МесяцПериода);
			//			КонецЕсли;
			//			аСтрокаКода = СокрЛП(ГодПериода) + СокрЛП(МесяцПериода);
			//			аСтрокаКода = СтрЗаменить(СтрЗаменить(аСтрокаКода, " ", ""), Символы.НПП, "");
			//			
			//			ас_ПериодыОтражения = Справочники.ас_ПериодыОтражения.НайтиПоКоду(аСтрокаКода);
			//			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения",ас_ПериодыОтражения);
			//			
			//			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			//			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",БанкКомиссионер);
			//			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",ДоговорБанкаКомиссионера);
			//			
			//			Проводка.Сумма = КомиссияБанка;
			//		КонецЕсли;
			//	КонецЕсли;	
			//КонецЕсли;
			////АБС\\	
			
			// В 2008 году на суммы валютных авансов делаются проводки по счету ВАЛ
			
			Если НЕ ЭтоВозврат 
				И ФормироватьПроводкиПоСчетамВАЛ
				И СтрокаПлатежа.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее
				Тогда
			
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = Организация;
				Проводка.Содержание   = "Оплата (аванс)";
				Проводка.ВидРегламентнойОперации  = ВидРегламентнойОперации;
				
				Если СтрокаПлатежа.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				
					СчетВАЛ = ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте;
				
				ИначеЕсли СтрокаПлатежа.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				
					СчетВАЛ = ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте;
				
				ИначеЕсли СтрокаПлатежа.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					
					Если СтрокаПлатежа.СчетАванса.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
						ИЛИ СтрокаПлатежа.СчетАванса = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал 
						Тогда
						СчетВАЛ = ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте;
					Иначе
						СчетВАЛ = ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте;
					КонецЕсли;
				
				ИначеЕсли СтрокаПлатежа.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					
					Если СтрокаПлатежа.СчетАванса.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) 
						ИЛИ СтрокаПлатежа.СчетАванса = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал 
						Тогда
						СчетВАЛ = ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте;
					Иначе
						СчетВАЛ = ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте;
					КонецЕсли;
				
				КонецЕсли;

				Проводка["Счет"+СуфиксСчетаРасчетов]= СчетВАЛ;

				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "Контрагенты", СтрокаПлатежа.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "Договоры", СтрокаПлатежа.ДоговорКонтрагента);
				
				Проводка.Сумма = СтрокаПлатежа.АвансРег;
				
				Проводка["Валюта" + СуфиксСчетаРасчетов]        = СтрокаПлатежа.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + СуфиксСчетаРасчетов] = СтрокаПлатежа.АвансВал;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПроводкиПоПереносуСчетаВАЛ Тогда
		
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = Организация;
			Проводка.Содержание   = "Перенос долга";
			Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;
			
			Проводка["Счет"+СуфиксКоррСчета] = СчетПереносаВАЛ;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксКоррСчета], Проводка["Субконто"+СуфиксКоррСчета], "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксКоррСчета], Проводка["Субконто"+СуфиксКоррСчета], "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			ВалютнаяСуммаПереносаВАЛ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту((СтрокаПлатежа.ДолгВал + СтрокаПлатежа.АвансВал),
				СтрокаПлатежа.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				СтрокаПлатежа.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов,
				СтрокаПлатежа.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
			
			Проводка["Валюта" + СуфиксКоррСчета]        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + СуфиксКоррСчета] = ВалютнаяСуммаПереносаВАЛ;
			
			Проводка.Сумма = СтрокаПлатежа.ДолгРег + СтрокаПлатежа.АвансРег;
	
		КонецЕсли;
		
		//АБС\\        //АБС Коломиец 14481 перенесено из авансов    
		Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
			И СтрокаПлатежа.КомиссияБанка <> 0 Тогда    //АБС ИЗМЕНЕНИЕ 30831 Коломиец 14.04.2015 15:14:36
			Если СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя  Тогда
				БанкКомиссионер = СтруктураПараметров.Ссылка.РасшифровкаПлатежа[СтрокаПлатежа.НомерСтрокиДокумента - 1].БанкКомиссионер;
				ДоговорБанкаКомиссионера = СтруктураПараметров.Ссылка.РасшифровкаПлатежа[СтрокаПлатежа.НомерСтрокиДокумента - 1].ДоговорБанкаКомиссионера;
				//КомиссияБанка = СтруктураПараметров.Ссылка.РасшифровкаПлатежа[СтрокаПлатежа.НомерСтрокиДокумента - 1].КомиссияБанка;
				Контрагент = СтруктураПараметров.Контрагент;
				//СчетРасчетов =СтрокаПлатежа.СчетАванса; 
				//СчетРасчетов = ?(СтрокаПлатежа.АвансРег <> 0, СтрокаПлатежа.СчетАванса, СтрокаПлатежа.СчетОплаты);  //АБС Коломиец 14481
				ПрочийРасход = СтруктураПараметров.Ссылка.РасшифровкаПлатежа[СтрокаПлатежа.НомерСтрокиДокумента - 1].ПрочийРасход;
				Если ЗначениеЗаполнено(БанкКомиссионер) И ЗначениеЗаполнено(ДоговорБанкаКомиссионера) Тогда // И КомиссияБанка <> 0 Тогда    //АБС ИЗМЕНЕНИЕ 30831 Коломиец 14.04.2015 15:14:36
					
					Для Сч = 1 По 2 Цикл //АБС ВСТАВКА 30831 Коломиец 14.04.2015 15:14:36
						
						Если Сч = 1 И КомиссияБанкаДолг <> 0 Тогда 
							КомиссияБанка = КомиссияБанкаДолг;
							СчетРасчетов = СтрокаПлатежа.СчетОплаты;
						ИначеЕсли Сч = 2 И КомиссияБанкаАванс <> 0 Тогда
							КомиссияБанка = КомиссияБанкаАванс;
							СчетРасчетов = СтрокаПлатежа.СчетАванса;
						Иначе 
							Продолжить;
						КонецЕсли;
						//АБС ВСТАВКА 30831 КОНЕЦ
						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период      = ДатаДока;
						Проводка.Активность  = Истина;
						Проводка.Организация = Организация;
						Проводка.Содержание  = "Комиссия банка";
						Проводка.ВидРегламентнойОперации  = ВидРегламентнойОперации;
						
						Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",БанкКомиссионер);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",ДоговорБанкаКомиссионера);
						
						Проводка.СчетКт = СчетРасчетов;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтрокаПлатежа.ДоговорКонтрагента);
						//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураПараметров.Регистратор);
						
						Проводка.Сумма = КомиссияБанка;
						
					КонецЦикла;      //АБС ИЗМЕНЕНИЕ 30831 Коломиец 14.04.2015 15:14:36
					
						ПрочийРасход = СтруктураПараметров.Ссылка.РасшифровкаПлатежа[СтрокаПлатежа.НомерСтрокиДокумента - 1].ПрочийРасход;
						
						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период      = ДатаДока;
						Проводка.Активность  = Истина;
						Проводка.Организация = Организация;
						Проводка.Содержание  = "Комиссия банка";
						Проводка.ВидРегламентнойОперации  = ВидРегламентнойОперации;
						
						Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ПрочиеДоходыИРасходы",ПрочийРасход);
						
						ГодПериода = Год(ДатаДока);
						МесяцПериода = Месяц(ДатаДока);
						Если МесяцПериода < 10 Тогда
							МесяцПериода = "0" + СокрЛП(МесяцПериода);
						КонецЕсли;
						аСтрокаКода = СокрЛП(ГодПериода) + СокрЛП(МесяцПериода);
						аСтрокаКода = СтрЗаменить(СтрЗаменить(аСтрокаКода, " ", ""), Символы.НПП, "");
						
						ас_ПериодыОтражения = Справочники.ас_ПериодыОтражения.НайтиПоКоду(аСтрокаКода);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения",ас_ПериодыОтражения);
						
						Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",БанкКомиссионер);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",ДоговорБанкаКомиссионера);
						
						Проводка.Сумма = КомиссияБанкаДолг + КомиссияБанкаАванс;	//АБС ИЗМЕНЕНИЕ 30831 Коломиец 14.04.2015 15:14:36					
					
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		//АБС\\		
			
	КонецЦикла;
	
	// АБС ВСТАВКА Фролов 20120709
	// Формируем суммовые разницы по налоговому учету
	//Если НЕ ВызванРегламентнойПроцедурой 
	//	И НЕ (СтруктураШапкиДокумента.Свойство("РежимВосстановленияПоследовательностейРасчетов") 
	//		И СтруктураШапкиДокумента.РежимВосстановленияПоследовательностейРасчетов = Истина) Тогда
	//	Возврат;
	//ИначеЕсли НЕ ЕстьРасчетыВУЕ Тогда
	//	Возврат;
	//КонецЕсли;
	Если НЕ ЕстьРасчетыВУЕ Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммоваяРазницаПоДокументам.Количество() > 0 Тогда
		РаспределениеСуммовойРазницы(СуммоваяРазницаПоДокументам, СтруктураПараметров, СтруктураШапкиДокумента, СтруктураДвижений, 
			Отказ, Заголовок, УдаляемыеВидыРегОпераций, КэшВидовСубконтоПоСчетам);
	КонецЕсли; 
	
КонецПроцедуры // БухгалтерскийУчетРасчетыСКонтрагентами_Оплата()

// Отражение суммовой разницы
//
// Параметры
//	СуммоваяРазницаПоДокументам - <ТаблицаЗначений> Таблица суммовых рахниц к распределению
//  СтруктураПараметров	– <Структура> – специфическая структура параметров для процедуры отражения оплаты (расчеты с контрагентами)
//										Формируется с использованием функции ПодготовкаСтруктурыПараметровДляДвиженияДенег
//	СтруктураШапкиДокумента – <Структура>
//  СтруктураДвижений	- <Структура или ФиксированнаяКоллекция>  - при вызове из документа передается набор движений документа.
//  																при вызове из регламентной процедуры передается струткура
//																	Ключ - имя регистра, значение - набор записей	
//	Отказ 				- <Булево> - флаг остановки проведения в случае критического несоответствия данных
//	ВызванРегламентнойПроцедурой - <Булево> - признак вызова из регламентной процедуры
//  УдаляемыеВидыРегОпераций	 - <Массив> - список видов регламентных операций, движения по которым удаляются в случае, если 
//											  движения формируются заново регламентной процедурой
//	КэшВидовСубконтоПоСчетам	 - <Соответствие> - кэш сотвтетствия счета и видов субконто для ускорения формирования проводок 
//													при отработке регламентной процедурой (для посторно используемых счетов виды субконто закэшированы)
//
Процедура РаспределениеСуммовойРазницы(СуммоваяРазницаПоДокументам, СтруктураПараметров, СтруктураШапкиДокумента, СтруктураДвижений, Отказ, Заголовок, УдаляемыеВидыРегОпераций = Неопределено, КэшВидовСубконтоПоСчетам = Неопределено)
	
	ВидДокумента		= СтруктураПараметров.ВидДокумента;
	ВидОперации			= ?(СтруктураПараметров.Свойство("ВидОперации"),СтруктураПараметров.ВидОперации, Неопределено);
	
	Ссылка 				= СтруктураПараметров.Ссылка;
	
	Организация         = СтруктураПараметров.Организация;
	ДатаДока            = СтруктураПараметров.Период;
	ВалютаДокумента		= СтруктураПараметров.ВалютаДокумента;
	ЭтоВозврат	= (СтруктураПараметров.РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат);
	
	ТаблицаПлатежей = СтруктураПараметров.Таблица;
	
	ДанныеВалютыРегламентированногоУчета        = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураПараметров.ВалютаРегламентированногоУчета, ДатаДока);
	
	ВидРегОперацииКорр = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах;
	ВидРегОперацииСР = Перечисления.ВидыРегламентныхОпераций.СуммовыеРазницы;
	
	ОтражатьНУ = СтруктураПараметров.ОтражатьВНалоговомУчете;

	ПроводкиБУ = СтруктураДвижений.Хозрасчетный;
	
	Если ТипЗнч(СтруктураДвижений) = Тип("Структура") Тогда
		Если СтруктураДвижений.Свойство("Налоговый") Тогда
			ПроводкиНУ = СтруктураДвижений.Налоговый;
		Иначе
			ПроводкиНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыБухгалтерии["Налоговый"]);
			СтруктураДвижений.Вставить("Налоговый", ПроводкиНУ);
		КонецЕсли; 
	Иначе //КоллекцияДвижений 
		Если СтруктураДвижений.Найти("Налоговый") <> Неопределено Тогда
			ПроводкиНУ = СтруктураДвижений.Налоговый;
		Иначе
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ((СтруктураПараметров.Направление = "Поступление" и СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты) или
		(СтруктураПараметров.Направление = "Выбытие" и СтруктураПараметров.РасчетыВозврат =  Перечисления.РасчетыВозврат.Возврат)) тогда
		НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация;
		Покупки = Ложь;
		Продажи = Истина;
	Иначе
		НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовПриобретение;
		Покупки = Истина;
		продажи = Ложь;
	КонецЕсли;

	//Оценка задолженности
	ВедениеВзаиморасчетовВЦеломПоДоговору = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	
	//Распределние суммовой разницы
	Отбор = новый Структура("СуммоваяРазница", 0);
	ПустыеСтроки = СуммоваяРазницаПоДокументам.НайтиСтроки(Отбор);
	Для каждого СтрокаКУдалению  из ПустыеСтроки Цикл
		СуммоваяРазницаПоДокументам.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если СуммоваяРазницаПоДокументам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СуммоваяРазницаПоДокументам.Свернуть("Документ,Сделка, Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов","СуммоваяРазница");
	ДокументыСР = СуммоваяРазницаПоДокументам.ВыгрузитьКолонку("Документ");
	
	// {{KM WARE Малыгин П.К. Заявка № 26571 07.10.2015 начало
	// Проверяем, есть ли среди документов для переоценки непроведенные документы, созданные по Авизо
	// и имеющие оригинальные проведенные документы, зарегистрированные в подсистеме обмена.
	// Измененный массив храним как отдельную переменную.
	kwr_ДокументыСР = СуммоваяРазницаПоДокументам.ВыгрузитьКолонку("Документ");
	kwr_ЗаменитьНепроведенныеДокументыАвизоНаДокументыОснования(kwr_ДокументыСР,СуммоваяРазницаПоДокументам); 
	МассивыИдетичны = kwr_ПроверитьИдетичностьМассивов(ДокументыСР,kwr_ДокументыСР);
	// }}KM WARE Малыгин П.К. Заявка № 26571 07.10.2015 окончание
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.РасчетыПоРеализацииОрганизации КАК РасчетыОрганизации
		|
		|ГДЕ
		|	РасчетыОрганизации.Документ В(&Документы)";
	   
	Если не НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации Тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"РегистрСведений.РасчетыПоРеализацииОрганизации","РегистрСведений.РасчетыПоПриобретениюОрганизации");
		Запрос.Текст = стрЗаменить(Запрос.Текст,"*","*, РасчетыОрганизации.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат");
	КонецЕсли; 
	
	// {{KM WARE Малыгин П.К. Заявка № 26571 07.10.2015 начало
	// Если не был заменен ни один документ - используем стандартный массив, 
	// если были изменения - используем новый массив 
	// {{Старый код:
	// Запрос.УстановитьПараметр("Документы",ДокументыСР);
	// }}Новый код:
	Если МассивыИдетичны Тогда
	Запрос.УстановитьПараметр("Документы",ДокументыСР);
	Иначе
	Запрос.УстановитьПараметр("Документы",kwr_ДокументыСР);
	КонецЕсли;	
	// }}KM WARE Малыгин П.К. Заявка № 26571 07.10.2015 окончание 

	
	Результат = Запрос.Выполнить();
	БазисРаспределения = Результат.Выгрузить();
	
	// {{KM WARE Малыгин П.К. Заявка № 26571 07.10.2015 начало
	// Возвращаем подмененные документы обратно в ТЗ, чтобы стандартная функция могла
	// соотнести данные
	Если не МассивыИдетичны Тогда
	kwr_ЗаменитьДокументыОснованияНаНепроведенныеДокументыАвизо(БазисРаспределения,ДокументыСР,kwr_ДокументыСР);
	КонецЕсли;
	// }}KM WARE Малыгин П.К. Заявка № 26571 07.10.2015 окончание
	
	БазисРаспределения.Колонки.Добавить("СуммаСНДС_Базис",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	БазисРаспределения.ЗагрузитьКолонку(БазисРаспределения.ВыгрузитьКолонку("СуммаСНДС"),"СуммаСНДС_Базис");
	
	Распределение = Новый структура("СуммаСНДС","СуммоваяРазница");
	ИсключитьБазовый = Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Сделка");
	
	ТаблицаРаспределенияСР = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(СуммоваяРазницаПоДокументам,БазисРаспределения,Распределение,,ИсключитьБазовый);
	ТаблицаРаспределенияСР.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	//ТаблицаРаспределенияСР.Колонки.Добавить("НДС_Регистр_БезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	//ТаблицаРаспределенияСР.Колонки.Добавить("НДС_Регистр_НДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРаспределенияСР.Колонки.Добавить("Проводка_Сумма",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРаспределенияСР.Колонки.Добавить("Проводка_СуммаНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРаспределенияСР.Колонки.Добавить("Проводка_СуммаНУ",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	//Удалим из СтруктураПараметров элемент "ПроводкиНУ", "Налоговый", чтобы избежать передачи мутабельного значения в модуль УчетНДСФормированиеДвижений
	ВремПроводкиНУ = неопределено;
	ВремНалоговый = неопределено;
	
	Если СтруктураПараметров.Свойство("ПроводкиНУ") Тогда
		ВремПроводкиНУ = СтруктураПараметров.ПроводкиНУ;
		СтруктураПараметров.Удалить("ПроводкиНУ");
	КонецЕсли;
	Если СтруктураПараметров.Свойство("Налоговый") Тогда
		ВремНалоговый = СтруктураПараметров.Налоговый;
		СтруктураПараметров.Удалить("Налоговый");
	КонецЕсли;
	Если НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению Тогда
			
		ДвиженияНДСПредъявленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСПредъявленный"], Истина);
		БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСПредъявленный, УдаляемыеВидыРегОпераций);
		Если ДвиженияНДСПредъявленный <> Неопределено И ДвиженияНДСПредъявленный.Модифицированность() Тогда
			ДвиженияНДСПредъявленный.Записать();
		КонецЕсли;
		
		ДвиженияНДСВключенныйВСтоимость = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСВключенныйВСтоимость"], Истина);
		БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСВключенныйВСтоимость, УдаляемыеВидыРегОпераций);
		Если ДвиженияНДСВключенныйВСтоимость <> Неопределено И ДвиженияНДСВключенныйВСтоимость.Модифицированность() Тогда
			ДвиженияНДСВключенныйВСтоимость.Записать();
		КонецЕсли;
		
		ДвиженияНДСКосвенныеРасходы = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСКосвенныеРасходы"], Истина);
		БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСКосвенныеРасходы, УдаляемыеВидыРегОпераций);
		Если ДвиженияНДСКосвенныеРасходы <> Неопределено И ДвиженияНДСКосвенныеРасходы.Модифицированность() Тогда
			ДвиженияНДСКосвенныеРасходы.Записать();
		КонецЕсли;
		
		Движения_НДСНезавершенноеПроизводство = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСНезавершенноеПроизводство"], Истина);
		БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСНезавершенноеПроизводство, УдаляемыеВидыРегОпераций);
		Если Движения_НДСНезавершенноеПроизводство <> Неопределено И Движения_НДСНезавершенноеПроизводство.Модифицированность() Тогда
			Движения_НДСНезавершенноеПроизводство.Записать();
		КонецЕсли;
		
		ДвиженияНДСпоОСиНМА = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСпоОСиНМА"], Истина);
		БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСпоОСиНМА, УдаляемыеВидыРегОпераций);
		Если ДвиженияНДСпоОСиНМА <> Неопределено И ДвиженияНДСпоОСиНМА.Модифицированность() Тогда
			ДвиженияНДСпоОСиНМА.Записать();
		КонецЕсли;
		
		ДвиженияНДСПартииТоваров = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСПартииТоваров"], Истина);
		БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСПартииТоваров, УдаляемыеВидыРегОпераций);
		Если ДвиженияНДСПартииТоваров <> Неопределено И ДвиженияНДСПартииТоваров.Модифицированность() Тогда
			ДвиженияНДСПартииТоваров.Записать();
		КонецЕсли;
		
		ДвиженияНДСПредъявленныйРеализация0 = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСПредъявленныйРеализация0"], Истина);
		БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСПредъявленныйРеализация0, УдаляемыеВидыРегОпераций);
		Если ДвиженияНДСПредъявленныйРеализация0 <> Неопределено И ДвиженияНДСПредъявленныйРеализация0.Модифицированность() Тогда
			ДвиженияНДСПредъявленныйРеализация0.Записать();
		КонецЕсли;
		
		ДвиженияНДСРеализация0 = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСРеализация0"], Истина);
		БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСРеализация0, УдаляемыеВидыРегОпераций);
		Если ДвиженияНДСРеализация0 <> Неопределено И ДвиженияНДСРеализация0.Модифицированность() Тогда
			ДвиженияНДСРеализация0.Записать();
		КонецЕсли;
	
	Иначе
		
		ДвиженияНДСПредъявленныйРеализация0 = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСПредъявленныйРеализация0"], Истина);
		БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСПредъявленныйРеализация0, УдаляемыеВидыРегОпераций);
		Если ДвиженияНДСПредъявленныйРеализация0 <> Неопределено И ДвиженияНДСПредъявленныйРеализация0.Модифицированность() Тогда
			ДвиженияНДСПредъявленныйРеализация0.Записать();
		КонецЕсли;
		
		ДвиженияНДСНачисленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСНачисленный"], Истина);
		БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСНачисленный, УдаляемыеВидыРегОпераций);
		Если ДвиженияНДСНачисленный <> Неопределено И ДвиженияНДСНачисленный.Модифицированность() Тогда
			ДвиженияНДСНачисленный.Записать();
		КонецЕсли;
		
		ДвиженияНДСРеализация0 = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСРеализация0"], Истина);
		БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСРеализация0, УдаляемыеВидыРегОпераций);
		Если ДвиженияНДСРеализация0 <> Неопределено И ДвиженияНДСРеализация0.Модифицированность() Тогда
			ДвиженияНДСРеализация0.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации Тогда
		УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Реализация(СтруктураПараметров, СуммоваяРазницаПоДокументам);
	Иначе
		УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураПараметров, СуммоваяРазницаПоДокументам);
	КонецЕсли;
	
	//Добавим в СтруктураПараметров удаленный ранее элемент ПроводкиНУ, Налоговый
	Если ВремПроводкиНУ <> неопределено Тогда
		СтруктураПараметров.Вставить("ПроводкиНУ",ВремПроводкиНУ);
		ВремПроводкиНУ = неопределено;
	КонецЕсли;
	Если ВремНалоговый <> неопределено Тогда
		СтруктураПараметров.Вставить("Налоговый",ВремНалоговый);
		ВремНалоговый = неопределено;
	КонецЕсли;
	
	//Определяем образ действий
	Если не СтруктураПараметров.Свойство("СложныйУчетНДС") 
		или не СтруктураПараметров.Свойство("ОрганизацияЯвляетсяПлательщикомЕНВД") тогда
		
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаДока, Организация);
		ОшибкаВПолучении = НЕ ЗначениеЗаполнено(УчетнаяПолитика);
		
		Если не СтруктураПараметров.Свойство("СложныйУчетНДС") тогда
			СложныйУчетНДС = ?(ОшибкаВПолучении, Ложь,УчетнаяПолитика.СложныйУчетНДС); 
			СтруктураПараметров.Вставить("СложныйУчетНДС",СложныйУчетНДС);
		Иначе
			СложныйУчетНДС = СтруктураПараметров.СложныйУчетНДС;
		КонецЕсли;
		
		Если не СтруктураПараметров.Свойство("ОрганизацияЯвляетсяПлательщикомЕНВД") тогда
			Организация_ПлательщикЕНВД = ?(ОшибкаВПолучении, Ложь,УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД); 
			СтруктураПараметров.Вставить("ОрганизацияЯвляетсяПлательщикомЕНВД",Организация_ПлательщикЕНВД);
		Иначе
			Организация_ПлательщикЕНВД = СтруктураПараметров.ОрганизацияЯвляетсяПлательщикомЕНВД;
		КонецЕсли;
		
	КонецЕсли; 			
	
	МассивКоррСчетов = ТаблицаРаспределенияСР.ВыгрузитьКолонку("КоррСчет");
	МассивКоррСубк1  = ТаблицаРаспределенияСР.ВыгрузитьКолонку("КоррСубконто1");
	МассивКоррСубк2  = ТаблицаРаспределенияСР.ВыгрузитьКолонку("КоррСубконто2");
	МассивКоррСубк3  = ТаблицаРаспределенияСР.ВыгрузитьКолонку("КоррСубконто3");
		
	Для каждого Строка из ТаблицаРаспределенияСР Цикл 
		Строка.СуммаНДС    = Окр(?(Строка.СуммаСНДС_Базис = 0, 
			0, 
			Строка.СуммаНДС * Строка.СуммаСНДС / Строка.СуммаСНДС_Базис), 2);
		Строка.СуммаБезНДС = Строка.СуммаСНДС - Строка.СуммаНДС;
		
		Если ДатаДока >= '20111001' Тогда
			КорректироватьНДС = Ложь;
		ИначеЕсли Строка.СуммаСНДС < 0 Тогда
			КорректироватьНДС = ?(Покупки, 
				СтруктураПараметров.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС,
				СтруктураПараметров.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС);
		Иначе
			КорректироватьНДС = ?(Покупки, 
				СтруктураПараметров.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС,
				СтруктураПараметров.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС);
		КонецЕсли;
		
		Если Покупки Тогда
			Строка.Проводка_Сумма    = ?(Строка.НДСВключенВСтоимость ИЛИ НЕ КорректироватьНДС, Строка.СуммаСНДС, Строка.СуммаБезНДС);
			Строка.Проводка_СуммаНДС = ?(Строка.НДСВключенВСтоимость ИЛИ НЕ КорректироватьНДС, 0, Строка.СуммаНДС);
			Строка.Проводка_СуммаНУ  = Строка.Проводка_Сумма;
		Иначе
			Строка.Проводка_Сумма    = Строка.СуммаСНДС;
			Строка.Проводка_СуммаНДС = ?(КорректироватьНДС, Строка.СуммаНДС, 0);
			Строка.Проводка_СуммаНУ  = Строка.Проводка_Сумма - Строка.Проводка_СуммаНДС;
		КонецЕсли;
		
		 Если Покупки тогда
			 Если Строка.СуммаСНДС>0 тогда
				 Если Организация_ПлательщикЕНВД Тогда
					 Строка.КоррСчет = ПланыСчетов.Хозрасчетный.ПрочиеРасходыРаспределяемые;
				 Иначе
					 Строка.КоррСчет = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
				 Конецесли;
				 Строка.СчетУчетаНУ = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
			 ИначеЕсли Строка.СуммаСНДС<0 тогда
				 Строка.КоррСчет = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				 Строка.СчетУчетаНУ = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
			 Иначе
				 Строка.СчетУчетаНУ = Неопределено;
			 КонецЕсли;
		 Иначе
			 Если Строка.СуммаСНДС<0 тогда
				 Строка.СчетУчетаНУ = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
			 ИначеЕсли Строка.СуммаСНДС>0 тогда
				 Строка.СчетУчетаНУ = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
			 Иначе
				 Строка.СчетУчетаНУ = Неопределено;
			 КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаРаспределенияСР.Колонки.Удалить("СуммаСНДС_Базис");
	
	// Проводки по суммовым разницам по счетам расчетов в бухгалтерском учете формируются только до 2007 года.
	// С 2007 года в бухгалтерском учете формируются только проводки по НДС,
	// и делаются проводки по временным разницам в налоговом учете.
	
	СтатьяПрочихДоходовРасходов = ?(ДатаДока >= '20070101',
		Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ, Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы);
		
	ФормироватьВременныеРазницы = ?(ДатаДока >= '20070101', СтруктураШапкиДокумента.ПоддержкаПБУ18, Ложь);

	ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ = ПолучитьУчетПРпоРасчетамВУЕ(ДатаДока);            
    
    Если ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ Тогда
        СчетУЕ = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
        ВидУчета91 = Перечисления.ВидыУчетаПоПБУ18.ПР;
        ВидУчетаРасчетов = Перечисления.ВидыУчетаПоПБУ18.НУ;
    Иначе
        Если НаправлениеРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации Тогда
            СчетУЕ = ПланыСчетов.Налоговый.ЗадолженностьПоРеализацииВУЕ;
        Иначе
            СчетУЕ = ПланыСчетов.Налоговый.ЗадолженностьПоПриобретениюВУЕ;
        КонецЕсли; 
        ВидУчета91 = Перечисления.ВидыУчетаПоПБУ18.ВР;
        ВидУчетаРасчетов = Перечисления.ВидыУчетаПоПБУ18.ВР;
    КонецЕсли;
	
	Если ДатаДока >= '20070101' ИЛИ Покупки Тогда
		ТаблицаРаспределенияСР.ЗаполнитьЗначения(СтатьяПрочихДоходовРасходов, "КоррСубконто1"); 
		ТаблицаРаспределенияСР.ЗаполнитьЗначения(Неопределено,"КоррСубконто2"); 
		ТаблицаРаспределенияСР.ЗаполнитьЗначения(Неопределено,"КоррСубконто3");
	КонецЕсли;
	Если ДатаДока >= '20070101' И Продажи Тогда
		ТаблицаРаспределенияСР.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД, "СчетНДС"); 
		ТаблицаРаспределенияСР.ЗаполнитьЗначения(СтатьяПрочихДоходовРасходов, "СубконтоНДС1"); 
		ТаблицаРаспределенияСР.ЗаполнитьЗначения(Неопределено,"СубконтоНДС2"); 
		ТаблицаРаспределенияСР.ЗаполнитьЗначения(Неопределено,"СубконтоНДС3");
	КонецЕсли;
	ТаблицаРаспределенияСР.ЗаполнитьЗначения(СтатьяПрочихДоходовРасходов, "СубконтоНУ1"); 
	ТаблицаРаспределенияСР.ЗаполнитьЗначения(Неопределено,"СубконтоНУ2"); 
	ТаблицаРаспределенияСР.ЗаполнитьЗначения(Неопределено,"СубконтоНУ3");
	
	КорректировкиПроводокБУ = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
		КорректировкиПроводокНУ = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
	КонецЕсли;
	//АБС ВСТАВКА 39897  03.04.2014 19:20:46  Шамов
	Попытка
		Если Ссылка.Метаданные().Движения.Содержит(Метаданные.РегистрыНакопления.абс_ВременныеРазницыПоРасчетамВУЕ) 
			И ФормироватьВременныеРазницы
			И СтруктураПараметров.ОтражатьВНалоговомУчете Тогда
			
			ВременныеРазницыПоРасчетамВУЕ = РегистрыНакопления.абс_ВременныеРазницыПоРасчетамВУЕ.СоздатьНаборЗаписей();		
			ВременныеРазницыПоРасчетамВУЕ.Отбор.Регистратор.Установить(Ссылка);
			ВременныеРазницыПоРасчетамВУЕ.Прочитать();
			ВременныеРазницыПоРасчетамВУЕ.Очистить();
			
			Для Каждого СтрокаДокумента Из СуммоваяРазницаПоДокументам Цикл
	//// {{KM WARE Малыгин П.К. Заявка № 26571 02.10.2015 начало
	//// Начиная с 2015 года временные разницы не формируются 
	//
				Если СтрокаДокумента.Документ.Дата >='20150101' Тогда
				Продолжить;
				КонецЕсли;
	//// }}KM WARE Малыгин П.К. Заявка № 26571 02.10.2015 окончание

				Если (Покупки  и (СтрокаДокумента.СуммоваяРазница > 0)) 
					или (Продажи  и (СтрокаДокумента.СуммоваяРазница < 0)) Тогда
					Счет91 = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
				Иначе					
					Счет91 = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
				КонецЕсли;
				
				Движение = ВременныеРазницыПоРасчетамВУЕ.ДобавитьПриход();
				Движение.Период = ДатаДока;
				Движение.Активность = Истина;
				Движение.СчетУчета = Счет91;
				Движение.ДокументРасчетов = СтрокаДокумента.Документ;
				Движение.ВременнаяРазница = СтрокаДокумента.СуммоваяРазница * ?(СтрокаДокумента.СуммоваяРазница > 0, -1, 1);				
				
			КонецЦикла;
			
			ВременныеРазницыПоРасчетамВУЕ.Записать();
			
		КонецЕсли;
	Исключение
	КонецПопытки;
	//АБС ВСТАВКА 39897 КОНЕЦ
	СуфиксСчетаЗатрат	= ?(Покупки,"Дт","Кт");
	СуфиксСчетаРасчетов	= ?(Покупки,"Кт","Дт");
	
	Для Каждого ТекКорректировка из ТаблицаРаспределенияСР Цикл
		
		Если ТекКорректировка.СуммаСНДС=0 тогда 
			Продолжить;
		КонецЕсли;
		
		СчетОплаты 	= ТекКорректировка.СчетОплаты;
		Контрагент	= ТекКорректировка.Контрагент;
		Договор		= ТекКорректировка.ДоговорКонтрагента;
		ВалютаВзаиморасчетов = Договор.ВалютаВзаиморасчетов;
		
		//Суммовая разница
		
		Если ДатаДока < '20070101' Тогда
			
			Проводка   = КорректировкиПроводокБУ.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.ВидРегламентнойОперации = ВидРегОперацииСР;
			Проводка.Содержание  = "Суммовые разницы";
			
			Если Покупки И ТекКорректировка.СуммаСНДС < 0 Тогда
				
				Проводка["Счет"+СуфиксСчетаРасчетов] = ТекКорректировка.КоррСчет;
				БухгалтерскийУчет.УстановитьСубконто(ТекКорректировка.КоррСчет,Проводка["Субконто"+СуфиксСчетаРасчетов],1,ТекКорректировка.КоррСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(ТекКорректировка.КоррСчет,Проводка["Субконто"+СуфиксСчетаРасчетов],2,ТекКорректировка.КоррСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(ТекКорректировка.КоррСчет,Проводка["Субконто"+СуфиксСчетаРасчетов],3,ТекКорректировка.КоррСубконто3);
				
				Проводка["Счет"+СуфиксСчетаЗатрат] = СчетОплаты;
				Проводка["Валюта"+СуфиксСчетаЗатрат] = ВалютаВзаиморасчетов;
				БухгалтерскийУчет.УстановитьСубконто(СчетОплаты,Проводка["Субконто"+СуфиксСчетаЗатрат], "Контрагенты", Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(СчетОплаты,Проводка["Субконто"+СуфиксСчетаЗатрат], "Договоры", Договор);
				Проводка.Сумма = -ТекКорректировка.Проводка_Сумма;
				
			Иначе
				
				Проводка["Счет"+СуфиксСчетаЗатрат] = ТекКорректировка.КоррСчет;
				БухгалтерскийУчет.УстановитьСубконто(ТекКорректировка.КоррСчет,Проводка["Субконто"+СуфиксСчетаЗатрат],1,ТекКорректировка.КоррСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(ТекКорректировка.КоррСчет,Проводка["Субконто"+СуфиксСчетаЗатрат],2,ТекКорректировка.КоррСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(ТекКорректировка.КоррСчет,Проводка["Субконто"+СуфиксСчетаЗатрат],3,ТекКорректировка.КоррСубконто3);
				
				Проводка["Счет"+СуфиксСчетаРасчетов] = СчетОплаты;
				Проводка["Валюта"+СуфиксСчетаРасчетов] = ВалютаВзаиморасчетов;
				БухгалтерскийУчет.УстановитьСубконто(СчетОплаты,Проводка["Субконто"+СуфиксСчетаРасчетов], "Контрагенты", Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(СчетОплаты,Проводка["Субконто"+СуфиксСчетаРасчетов], "Договоры", Договор);
				Проводка.Сумма = ТекКорректировка.Проводка_Сумма;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//Корректировка НДС
		
		// Начиная с 01.10.2011 НДС не корректируется
		Если ДатаДока < '20111001' 
			И ТекКорректировка.Проводка_СуммаНДС <> 0 Тогда
			
			Проводка   = КорректировкиПроводокБУ.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.ВидРегламентнойОперации = ВидРегОперацииСР;
			Проводка.Содержание  = ?(ДатаДока < '20070101', "Суммовые разницы. Корректировка НДС.", "Корректировка НДС по расчетам");
			Если Покупки тогда
				Проводка["Счет"+СуфиксСчетаЗатрат] = ТекКорректировка.СчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(ТекКорректировка.СчетНДС, Проводка["Субконто"+СуфиксСчетаЗатрат], "Контрагенты", Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ТекКорректировка.СчетНДС, Проводка["Субконто"+СуфиксСчетаЗатрат], "СФПолученные", ТекКорректировка.Регистратор);
			Иначе 
				Проводка["Счет"+СуфиксСчетаРасчетов] = ТекКорректировка.СчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(ТекКорректировка.СчетНДС,Проводка["Субконто"+СуфиксСчетаРасчетов],1,ТекКорректировка.СубконтоНДС1);
				БухгалтерскийУчет.УстановитьСубконто(ТекКорректировка.СчетНДС,Проводка["Субконто"+СуфиксСчетаРасчетов],2,ТекКорректировка.СубконтоНДС2);
				БухгалтерскийУчет.УстановитьСубконто(ТекКорректировка.СчетНДС,Проводка["Субконто"+СуфиксСчетаРасчетов],3,ТекКорректировка.СубконтоНДС3);
			КонецЕсли;
			Если Покупки тогда
				Проводка["Счет"+СуфиксСчетаРасчетов] = СчетОплаты;
				Проводка["Валюта"+СуфиксСчетаРасчетов] = ВалютаВзаиморасчетов;
				БухгалтерскийУчет.УстановитьСубконто(СчетОплаты,Проводка["Субконто"+СуфиксСчетаРасчетов], "Контрагенты", Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(СчетОплаты,Проводка["Субконто"+СуфиксСчетаРасчетов], "Договоры", Договор);
			Иначе
				
				УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ТекКорректировка.Период, Организация);
				Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
					УчетнаяПолитикаНУ = Неопределено;
				Иначе
					УчетнаяПолитикаНУ = УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС;
				КонецЕсли;
				
				Если УчетнаяПолитикаНУ = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
					Проводка["Счет"+СуфиксСчетаЗатрат] = ПланыСчетов.Хозрасчетный.НДС.Ссылка;
					БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаЗатрат],Проводка["Субконто"+СуфиксСчетаЗатрат],"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);
				Иначе
					Проводка["Счет"+СуфиксСчетаЗатрат] = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаЗатрат],Проводка["Субконто"+СуфиксСчетаЗатрат], "Контрагенты", Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаЗатрат],Проводка["Субконто"+СуфиксСчетаЗатрат], "СФВыданные", ТекКорректировка.Регистратор);
				КонецЕсли;
			КонецЕсли;
			Проводка.Сумма = ТекКорректировка.Проводка_СуммаНДС;
		КонецЕсли;
		
		//Отражение с.р. в НУ
		
		
		Если СтруктураПараметров.ОтражатьВНалоговомУчете   Тогда
				
			// {{KM WARE Малыгин П.К. Заявка № 26571  05.10.2015 начало
				// Начиная с 2015 года временные разницы не формируются 

			Если ТекКорректировка.Документ.Дата <'20150101' Тогда
				// }}KM WARE Малыгин П.К. Заявка № 26571 05.10.2015 окончание	
				
				//АБС+ Тупиков 14243
				Если СчетОплаты = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ Тогда 	//счет 76.35
					//АБС ИЗМЕНЕНИЕ 39897  31.03.2014 11:49:51  Шамов
					//Продолжить;
					//АБС ИЗМЕНЕНИЕ 39897 КОНЕЦ
				КонецЕсли;
				//АБС- Тупиков
				
				Проводка   = КорректировкиПроводокНУ.Добавить();
				
				Проводка.Период                  = ДатаДока;
				Проводка.Активность              = Истина;
				Проводка.Организация             = Организация;
				Проводка.ВидРегламентнойОперации = ВидРегОперацииСР;
				Проводка.Содержание              = "Суммовые разницы";
				
				Если (Покупки  и (ТекКорректировка.Проводка_СуммаНУ>0)) или (Продажи  и (ТекКорректировка.Проводка_СуммаНУ<0)) Тогда
					ДтКт91 = "Дт";
					ДтКтПВ = "Кт";
					Счет91 = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
				Иначе					
					ДтКт91 = "Кт";
					ДтКтПВ = "Дт";
					Счет91 = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
				КонецЕсли;
				
				Проводка["Счет" + ДтКт91] = Счет91;
				Проводка["Субконто" + ДтКт91].ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
				
				Проводка["Счет" + ДтКтПВ] = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				Проводка["Субконто" + ДтКтПВ].УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.Другие;
				Проводка["Субконто" + ДтКтПВ].Контрагенты = Контрагент;
				Проводка["Субконто" + ДтКтПВ].Договоры = Договор;
				
				Проводка.Сумма = ТекКорректировка.Проводка_СуммаНУ * ?(ТекКорректировка.Проводка_СуммаНУ > 0, 1, -1);
				
				// {{KM WARE Малыгин П.К. Заявка № 26571  05.10.2015 начало
				// Начиная с 2015 года временные разницы не формируются 
 						КонецЕсли;
				// }}KM WARE Малыгин П.К. Заявка № 26571  05.10.2015 окончание	
			
			
			
		
		// {{KM WARE Малыгин П.К. Заявка № 26571 05.10.2015 начало
			// 
			// {{Старый код:
			//Если ФормироватьВременныеРазницы Тогда

			// }}Новый код: Начиная с 2015 года временные разницы не формируются 
			Если ФормироватьВременныеРазницы И ТекКорректировка.Документ.Дата <'20150101' Тогда
				
			// }}KM WARE Малыгин П.К. Заявка № 05.10.2015 окончание 
	
				
				
                Проводка = КорректировкиПроводокНУ.Добавить();
                
                Проводка.Период                  = ДатаДока;
                Проводка.Активность              = Истина;
                Проводка.Организация             = Организация;
                Проводка.ВидРегламентнойОперации = ВидРегОперацииСР;
                Проводка.Содержание              = "Пересчет задолженности в у.е.";
                
                Проводка["Счет" + ДтКт91]     = Счет91;
                Проводка["ВидУчета" + ДтКт91] = ВидУчета91;
                
                Проводка["Субконто" + ДтКт91].ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
                
                ДтКтУЕ = ?(ДтКт91 = "Дт", "Кт", "Дт");
                
                Проводка["Счет" + ДтКтУЕ]     = СчетУЕ;
                Проводка["ВидУчета" + ДтКтУЕ] = ВидУчетаРасчетов;
                
                Проводка["Субконто" + ДтКтУЕ].Контрагенты = Контрагент;
                Проводка["Субконто" + ДтКтУЕ].Договоры    = Договор;
                Проводка["Субконто" + ДтКтУЕ].УсловияПоступленияИВыбытия    = Перечисления.УсловияПоступленияИВыбытияИмущества.Другие;
                
                Проводка.Сумма = ТекКорректировка.Проводка_Сумма * ?(ТекКорректировка.Проводка_Сумма > 0, -1, 1);   
				
				КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Начиная с 01.10.2011 суммовая разница в НУ относится на внереализационные доходы (расходы) полностью, 
	// в том числе в части НДС. Дополнительные проводки по отражению НДС не нужны.
	Если ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ 
		И СтруктураПараметров.ОтражатьВНалоговомУчете 
		И ДатаДока < '20111001' Тогда 
		
		Если СуммоваяРазницаПоДокументам.Колонки.Найти("НДС_НУ") = Неопределено Тогда
			СуммоваяРазницаПоДокументам.Колонки.Добавить("НДС_НУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		КонецЕсли;
		
        СуммаНДС = 0;    
        
        МассивНДС_НУ = СуммоваяРазницаПоДокументам.НайтиСтроки(Новый Структура ("Контрагент, ДоговорКонтрагента",Контрагент,Договор));
        
        Если НЕ (МассивНДС_НУ = Неопределено Или МассивНДС_НУ.Количество() = 0) Тогда
            Для Каждого СтрокаНДС Из МассивНДС_НУ Цикл
                
                СуммаНДС = СуммаНДС  + СтрокаНДС.НДС_НУ;
            КонецЦикла;                
        КонецЕсли;
        
               
        Если СуммаНДС <> 0 Тогда
            
            Проводка   = КорректировкиПроводокНУ.Добавить();
            
            Проводка.Период                  = ДатаДока;
            Проводка.Активность              = Истина;
            Проводка.Организация             = Организация;
            Проводка.ВидРегламентнойОперации = ВидРегОперацииСР;
            Проводка.Содержание              = "Суммовые разницы";
            
            Если (Покупки  и (ТекКорректировка.Проводка_СуммаНУ>0)) или (Продажи  и (ТекКорректировка.Проводка_СуммаНУ<0)) Тогда
                ДтКт91 = "Дт";
                ДтКтПВ = "Кт";
                Счет91 = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
            Иначе					
                ДтКт91 = "Кт";
                ДтКтПВ = "Дт";
                Счет91 = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
            КонецЕсли;
            
            Проводка["Счет" + ДтКт91] = Счет91;
            Проводка["Субконто" + ДтКт91].ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
            
            Проводка["Счет" + ДтКтПВ] = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
            Проводка["Субконто" + ДтКтПВ].УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.Другие;
            Проводка["Субконто" + ДтКтПВ].Контрагенты = Контрагент;
            Проводка["Субконто" + ДтКтПВ].Договоры = Договор;
            
            
            Проводка.Сумма = ?(Продажи и ТекКорректировка.Проводка_СуммаНУ<0, СуммаНДС,?(Покупки, ?(ТекКорректировка.Проводка_СуммаНУ>0, - СуммаНДС,СуммаНДС),0));
            
             // {{KM WARE Малыгин П.К. Заявка № 05.10.2015 начало
			// 
			// {{Старый код:
			//Если ФормироватьВременныеРазницы Тогда

			// }}Новый код: Начиная с 2015 года временные разницы не формируются 
			Если ФормироватьВременныеРазницы И ТекКорректировка.Документ.Дата <'20150101' Тогда
				
			// }}KM WARE Малыгин П.К. Заявка № 05.10.2015 окончание 

                
                Проводка = КорректировкиПроводокНУ.Добавить();
                
                Проводка.Период                  = ДатаДока;
                Проводка.Активность              = Истина;
                Проводка.Организация             = Организация;
                Проводка.ВидРегламентнойОперации = ВидРегОперацииСР;
                Проводка.Содержание              = "Пересчет задолженности в у.е.";
                
                Проводка["Счет" + ДтКт91]     = Счет91;
                Проводка["ВидУчета" + ДтКт91] = ВидУчета91;
                
                Проводка["Субконто" + ДтКт91].ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
                
                ДтКтУЕ = ?(ДтКт91 = "Дт", "Кт", "Дт");
                
                Проводка["Счет" + ДтКтУЕ]     = СчетУЕ;
                Проводка["ВидУчета" + ДтКтУЕ] = ВидУчетаРасчетов;
                
                Проводка["Субконто" + ДтКтУЕ].Контрагенты = Контрагент;
                Проводка["Субконто" + ДтКтУЕ].Договоры    = Договор;
                Проводка["Субконто" + ДтКтУЕ].УсловияПоступленияИВыбытия    = Перечисления.УсловияПоступленияИВыбытияИмущества.Другие;
                
                Проводка.Сумма = - СуммаНДС * ?(ТекКорректировка.Проводка_Сумма > 0, -1, 1);                  
                Если Продажи И СуммаНДС > 0 Тогда
                    
                    Проводка = КорректировкиПроводокНУ.Добавить();
                    
                    Проводка.Период                  = ДатаДока;
                    Проводка.Активность              = Истина;
                    Проводка.Организация             = Организация;
                    Проводка.ВидРегламентнойОперации = ВидРегОперацииСР;
                    Проводка.Содержание              = "Пересчет задолженности в у.е.";
                    
                    Проводка["СчетДт"]     = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
                    Проводка["ВидУчетаДт"] = Перечисления.ВидыУчетаПоПБУ18.ПР;
                    
                    Проводка["СубконтоДт"].ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
                    
                    Проводка["СчетКт"] = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
                    Проводка["СубконтоКт"].УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.Другие;
                    Проводка["СубконтоКт"].Контрагенты = Контрагент;
                    Проводка["СубконтоКт" ].Договоры = Договор;
                    
                    Проводка.Сумма = СуммаНДС;   
                    
                    
                КонецЕсли;
                
                
            КонецЕсли;
            
        КонецЕсли;  
    КонецЕсли;	
	
	//Сворачиваем полученные корректировки БУ по счетам и аналитике.
	КорректировкиПроводокБУ = КорректировкиПроводокБУ.Выгрузить();
	КорректировкиПроводокБУ = БухгалтерскийУчет.УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(КорректировкиПроводокБУ);
	КолонкиСуммирования = Новый Структура("Сумма,ВалютнаяСуммаДт,ВалютнаяСуммаКт,КоличествоДт,КоличествоКт");
	КолонкиГрупировок = новый Структура();
	Для каждого Колонка из КорректировкиПроводокБУ.Колонки цикл
		Если НЕ ЗначениеЗаполнено(Колонка.имя) или Колонка.имя="НомерСтроки" тогда
			Продолжить;
		КонецЕсли;
		Если Не КолонкиСуммирования.Свойство(Колонка.имя)  тогда
			КолонкиГрупировок.Вставить(Колонка.имя);
		КонецЕсли;
	КонецЦикла;
	СтрокаГруппировок	= ttk_ОбщегоНазначения.ВыгрузитьСтруктуруВСтроку(КолонкиГрупировок);
	СтрокаСуммирования	= ttk_ОбщегоНазначения.ВыгрузитьСтруктуруВСтроку(КолонкиСуммирования);
	КорректировкиПроводокБУ.Свернуть(СтрокаГруппировок,СтрокаСуммирования);
	БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ,КорректировкиПроводокБУ);//Сворачиваем полученные корректировки БУ по счетам и аналитике.

	//Сворачиваем полученные корректировки НУ по счетам и аналитике.
	Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
		КорректировкиПроводокНУ = КорректировкиПроводокНУ.Выгрузить();
		КорректировкиПроводокНУ = БухгалтерскийУчет.УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(КорректировкиПроводокНУ);
		КолонкиСуммирования = Новый Структура("Сумма,КоличествоДт,КоличествоКт");
		КолонкиГрупировок = новый Структура();
		Для каждого Колонка из КорректировкиПроводокНУ.Колонки цикл
			Если НЕ ЗначениеЗаполнено(Колонка.имя) или Колонка.имя="НомерСтроки" тогда
				Продолжить;
			КонецЕсли;
			Если Не КолонкиСуммирования.Свойство(Колонка.имя) тогда
				КолонкиГрупировок.Вставить(Колонка.имя);
			КонецЕсли;
		КонецЦикла;
		СтрокаГруппировок	= ttk_ОбщегоНазначения.ВыгрузитьСтруктуруВСтроку(КолонкиГрупировок);
		СтрокаСуммирования	= ttk_ОбщегоНазначения.ВыгрузитьСтруктуруВСтроку(КолонкиСуммирования);
		КорректировкиПроводокНУ.Свернуть(СтрокаГруппировок,СтрокаСуммирования);
		БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиНУ,КорректировкиПроводокНУ);
	КонецЕсли;//Сворачиваем полученные корректировки НУ по счетам и аналитике.
	
КонецПроцедуры // РаспределениеСуммовойРазницы()

// Определение порядка пересчета в рубли доходов и расходов в счет авансов в валюте
//
// Параметры
//	ДатаДок - Текущая дата
Функция  ПолучитьОценкуДоходовРасходовПоКурсуАвансов(ДатаДока) Экспорт
	
	НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = глЗначениеПеременной("НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов");
	Возврат (Не НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов=Дата('00010101')) И (НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов <=ДатаДока);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Движение денег. Оплата по прочим операциям (без выделения аванса и определения состояния задолженности)

// Выполняет расход денег по указанному документу
//
// Параметры
// Объект          - ДокументСсылка          - Документ для которого выполяентся 
//                                             операция.
// РасчетыВВалюте  - Булево                  - Признак расчетов в валюте
// СчетКт          - ПланСчетов.Хозрасчетный - корреспондирующий счет
//
Процедура ДвижениеДенегПрочийРасход(Объект, РасчетыВВалюте, СчетКт, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	Ссылка              = СтруктураШапкиДокумента.Ссылка;
	ВидДокумента 		= Ссылка.Метаданные().Имя; 
	Движения            = Объект.Движения;
	ПроводкиБУ          = Движения.Хозрасчетный;

	Организация         = СтруктураШапкиДокумента.Организация;
	ВалютаДокумента     = СтруктураШапкиДокумента.ВалютаДокумента;
	КурсДокумента		= СтруктураШапкиДокумента.КурсДокумента;
	КратностьДокумента	= СтруктураШапкиДокумента.КратностьДокумента;
	
	ВсегоСуммаДокумента = СтруктураШапкиДокумента.СуммаДокумента;
	ДатаДока            = СтруктураШапкиДокумента.Дата;
	
	Если СтруктураШапкиДокумента.Свойство("ДатаОплаты") Тогда
	    ДатаДока = СтруктураШапкиДокумента.ДатаОплаты;
	КонецЕсли; 

	ВалютаРег           = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ДанныеВалюты        = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);

	Если  ВидДокумента = "РасходныйКассовыйОрдер" Тогда
		
		Контрагент      = СтруктураШапкиДокумента.Контрагент;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
			ВидОперации = "Возврат";
		Иначе
			ВидОперации = "Оплата";
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		
		Контрагент      = СтруктураШапкиДокумента.Контрагент;
		СчетОрганизации = СтруктураШапкиДокумента.СчетОрганизации;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
			ВидОперации = "Возврат";
		Иначе
			ВидОперации = "Оплата";
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "АккредитивПереданный"
		ИЛИ ВидДокумента = "ИнкассовоеПоручениеПолученное"
		ИЛИ ВидДокумента = "ПлатежноеТребованиеПолученное"
		ИЛИ ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		
		Контрагент      = СтруктураШапкиДокумента.Контрагент;
		СчетОрганизации = СтруктураШапкиДокумента.СчетОрганизации;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
			ВидОперации = "Возврат";
		Иначе
			ВидОперации = "Оплата";
		КонецЕсли;
		
	Иначе
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при расходе (возврате) денежных средств.",Отказ,Заголовок);
		Возврат;
	КонецЕсли;

	ТабличнаяЧасть = Объект["РасшифровкаПлатежа"];

	// Выгрузка нужных колонок табличной части в таблицу значений с переименованием названий счетов
	СтруктураРеквизитов = Новый Структура("
	|ДоговорКонтрагента, СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,
	|СтатьяДвиженияДенежныхСредств, СуммаПлатежа, СуммаВзаиморасчетов",
	,?(ВидОперации = "Оплата","СчетОплаты","СчетАванса")
	,?(ВидОперации = "Оплата","СчетАванса","СчетОплаты"));

	РеестрПлатежей = ОбщегоНазначения.СформироватьТаблицуЗначений(ТабличнаяЧасть, СтруктураРеквизитов);
	
	Если РеестрПлатежей = Неопределено тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при расходе (возврате) денежных средств.",Отказ,Заголовок);
		Возврат;
	КонецЕсли;

	ЗадолженностьРеестр = РеестрПлатежей.Скопировать();
	ЗадолженностьРеестр.Свернуть("ДоговорКонтрагента,СчетОплаты", "СуммаПлатежа");
	ЗадолженностьРеестр.Колонки.Добавить("Задолженность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	//Оценка текущего состояния расчетов по БУ ля каждого счета из счетов оплаты в документе.
	Для каждого СчетДоговор из ЗадолженностьРеестр цикл

		Если СчетДоговор.СуммаПлатежа=0 тогда
			Продолжить;
		КонецЕсли;

		РасчетыВУсловныхЕдиницах = (СчетДоговор.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) 
		                           и СчетДоговор.СчетОплаты.Валютный;
		Если РасчетыВВалюте Тогда
			УсловиеВалюта=ВалютаДокумента;
		ИначеЕсли  РасчетыВУсловныхЕдиницах тогда
			УсловиеВалюта=СчетДоговор.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			УсловиеВалюта=Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;

		МоментДокумента = Новый МоментВремени(ДатаДока,Ссылка);
		ТаблицаЗадолженностей = БухгалтерскийУчет.ПолучитьОстатокПоСчету(Организация,МоментДокумента,СчетДоговор.СчетОплаты,УсловиеВалюта ,Контрагент, СчетДоговор.ДоговорКонтрагента,,-1);
		Если РасчетыВВалюте или РасчетыВУсловныхЕдиницах Тогда
			СчетДоговор.Задолженность = ТаблицаЗадолженностей.Итог("ВалютнаяСуммаОстаток");
		Иначе
			СчетДоговор.Задолженность = ТаблицаЗадолженностей.Итог("СуммаОстаток");
		КонецЕсли; 
	КонецЦикла;

	//Разделение каждой строки на оплату задолженности и аванс
	Для каждого ТекущийПлатеж из РеестрПлатежей Цикл

		СчетОплаты = ТекущийПлатеж.СчетОплаты;
		СчетАванса = ТекущийПлатеж.СчетАванса;
		ДоговорКонтрагента = ТекущийПлатеж.ДоговорКонтрагента;
		РасчетыВУсловныхЕдиницах = (ТекущийПлатеж.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) 
		                           и ТекущийПлатеж.СчетОплаты.Валютный;

		КлючЗадолженности = Новый Структура("ДоговорКонтрагента,СчетОплаты");
		КлючЗадолженности.ДоговорКонтрагента = ТекущийПлатеж.ДоговорКонтрагента;
		КлючЗадолженности.СчетОплаты            = ТекущийПлатеж.СчетОплаты;
		ЗадолженностьСтрока                     = ЗадолженностьРеестр.НайтиСтроки(КлючЗадолженности);

		Задолженность =  ЗадолженностьСтрока[0].Задолженность;
		Если РасчетыВУсловныхЕдиницах тогда
			СуммаПлатежа  =  ТекущийПлатеж.СуммаВзаиморасчетов;
		Иначе
			СуммаПлатежа  =  ТекущийПлатеж.СуммаПлатежа;
		КонецЕслИ;
		НужноЗаплатить = 0;
		СуммаАванса    = 0;

		Если ЗначениеЗаполнено(СчетАванса) Тогда
			НужноЗаплатить = Мин(СуммаПлатежа, Задолженность);
		Иначе
			НужноЗаплатить = СуммаПлатежа;
		КонецЕсли;
		СуммаАванса    = СуммаПлатежа - НужноЗаплатить;

		ЗадолженностьСтрока[0].Задолженность = ЗадолженностьСтрока[0].Задолженность - НужноЗаплатить;

		Если НужноЗаплатить > 0 Тогда // Оплата от покупателя

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.Содержание  = ВидОперации;

			Проводка.СчетДт = СчетОплаты;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",ДоговорКонтрагента);

			Проводка.СчетКт = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"БанковскиеСчета",СтруктураШапкиДокумента.СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиДвиженияДенежныхСредств",ТекущийПлатеж.СтатьяДвиженияДенежныхСредств);

			Если РасчетыВВалюте Тогда

				ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НужноЗаплатить, ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалюте.Курс, 
				КратностьДокумента, ДанныеОВалюте.Кратность);

				Проводка.ВалютаКт        = ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = НужноЗаплатить;

				Если СчетОплаты.Валютный Тогда
					Проводка.ВалютаДт        = ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = НужноЗаплатить;
				КонецЕсли;

			ИначеЕсли РасчетыВУсловныхЕдиницах тогда

				ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
				Если СуммаАванса = 0 тогда
					Проводка.Сумма = ТекущийПлатеж.СуммаПлатежа;
				Иначе
					//Сумму в валюте рег учета оцениваем по курсу взаиморасчетов
					Проводка.Сумма =  окр(НужноЗаплатить *(ТекущийПлатеж.СуммаПлатежа/ТекущийПлатеж.СуммаВзаиморасчетов),2);
				КонецЕсли;

				Проводка.ВалютаДт        = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = НужноЗаплатить;

			Иначе
				Проводка.Сумма = НужноЗаплатить;
			КонецЕсли;

		КонецЕсли;

		Если СуммаАванса <> 0 тогда //Зачесть аванс

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Аванс";

			Проводка.СчетДт      = СчетАванса;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",ДоговорКонтрагента);

			Проводка.СчетКт      = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"БанковскиеСчета",СтруктураШапкиДокумента.СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиДвиженияДенежныхСредств",ТекущийПлатеж.СтатьяДвиженияДенежныхСредств);

			Если РасчетыВВалюте Тогда

				ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаАванса, ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалюте.Курс,
				КратностьДокумента, ДанныеОВалюте.Кратность);

				Проводка.ВалютаКт        = ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СуммаАванса;

				Если СчетАванса.Валютный Тогда
					Проводка.ВалютаДт        = ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СуммаАванса;
				КонецЕсли;

			ИначеЕсли РасчетыВУсловныхЕдиницах тогда

				ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);

				Если НужноЗаплатить = 0 тогда
					Проводка.Сумма = ТекущийПлатеж.СуммаПлатежа;
				Иначе
					//чтобы копейки не терялись вычитаем из суммы платежа уже зафиксированную 
					Проводка.Сумма = ТекущийПлатеж.СуммаПлатежа-окр(НужноЗаплатить *(ТекущийПлатеж.СуммаПлатежа/ТекущийПлатеж.СуммаВзаиморасчетов),2);
				КонецЕсли;

				Проводка.ВалютаДт        = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СуммаАванса;

			Иначе
				Проводка.Сумма = СуммаАванса;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ДвижениеДенегРасходВозврат()

// Выполняет приход денег по указанному документу
//
// Параметры
// Объект          - ДокументСсылка          - Документ для которого выполяентся 
//                                             операция.
// РасчетыВВалюте  - Булево                  - Признак расчетов в валюте
// СчетДт          - ПланСчетов.Хозрасчетный - корреспондирующий счет
//
Процедура ДвижениеДенегПрочийПриход(Объект, РасчетыВВалюте, СчетДт, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	Ссылка				= СтруктураШапкиДокумента.Ссылка;
	ВидДокумента		= Ссылка.Метаданные().Имя; 
	Движения			= Объект.Движения;
	ПроводкиБУ			= Движения.Хозрасчетный;

	ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
	Организация			= СтруктураШапкиДокумента.Организация;
	ВалютаДокумента		= СтруктураШапкиДокумента.ВалютаДокумента;
	КурсДокумента		= СтруктураШапкиДокумента.КурсДокумента;
	КратностьДокумента	= СтруктураШапкиДокумента.КратностьДокумента;
	
	СуммаДокумента		= СтруктураШапкиДокумента.СуммаДокумента;
	ДатаДока			= СтруктураШапкиДокумента.Дата;
	Если СтруктураШапкиДокумента.Свойство("ДатаОплаты") Тогда
	    ДатаДока = СтруктураШапкиДокумента.ДатаОплаты;
	КонецЕсли; 
	
	ВалютаРег          = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ДанныеВалюты       = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);

	Если   ВидДокумента = "ПриходныйКассовыйОрдер" Тогда

		Контрагент      = СтруктураШапкиДокумента.Контрагент;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
			ВидОперации = "Возврат";
		Иначе
			ВидОперации = "Оплата";
		КонецЕсли;

	ИначеЕсли ВидДокумента = "ПлатежноеПоручениеВходящее"
		ИЛИ ВидДокумента = "АккредитивПолученный"
		ИЛИ ВидДокумента = "ПлатежноеТребованиеВыставленное"
		ИЛИ ВидДокумента = "ИнкассовоеПоручениеПереданное"
		ИЛИ ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда

		Контрагент      = СтруктураШапкиДокумента.Контрагент;
		СчетОрганизации = СтруктураШапкиДокумента.СчетОрганизации;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
			ВидОперации = "Возврат";
		Иначе
			ВидОперации = "Оплата";
		КонецЕсли;

	Иначе

		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при приходе (возврате) денежных средств.",Отказ,Заголовок);
		Возврат;

	КонецЕсли;

	ТабличнаяЧасть = Объект["РасшифровкаПлатежа"];

	// Выгрузка нужных колонок табличной части в таблицу значений с переименованием названий счетов
	СтруктураРеквизитов = Новый Структура("
	|ДоговорКонтрагента, СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,
	|СтатьяДвиженияДенежныхСредств, СуммаПлатежа, СуммаВзаиморасчетов",
	,?(ВидОперации = "Оплата","СчетОплаты","СчетАванса")
	,?(ВидОперации = "Оплата","СчетАванса","СчетОплаты"));

	РеестрПлатежей = ОбщегоНазначения.СформироватьТаблицуЗначений(ТабличнаяЧасть, СтруктураРеквизитов);

	Если РеестрПлатежей = Неопределено тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при приходе (возврате) денежных средств.",Отказ,Заголовок);
		Возврат;
	КонецЕсли;

	ЗадолженностьРеестр = РеестрПлатежей.Скопировать();
	ЗадолженностьРеестр.Свернуть("ДоговорКонтрагента,СчетОплаты", "СуммаПлатежа");
	ЗадолженностьРеестр.Колонки.Добавить("Задолженность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	//Оценка текущего состояния расчетов по БУ для каждого счета из счетов оплаты в документе.
	Для каждого СчетДоговор из ЗадолженностьРеестр цикл
		Если СчетДоговор.СуммаПлатежа=0 тогда
			Продолжить;
		КонецЕсли;

		РасчетыВУсловныхЕдиницах = (СчетДоговор.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) 
		                           и СчетДоговор.СчетОплаты.Валютный;
		Если РасчетыВВалюте Тогда
			УсловиеВалюта=ВалютаДокумента;
		ИначеЕсли  РасчетыВУсловныхЕдиницах тогда
			УсловиеВалюта=СчетДоговор.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			УсловиеВалюта=Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;

		МоментДокумента = Новый МоментВремени(ДатаДока,Ссылка);
		ТаблицаЗадолженностей = БухгалтерскийУчет.ПолучитьОстатокПоСчету(Организация,МоментДокумента,СчетДоговор.СчетОплаты,УсловиеВалюта ,Контрагент, СчетДоговор.ДоговорКонтрагента,,1);
		Если РасчетыВВалюте или РасчетыВУсловныхЕдиницах Тогда
			СчетДоговор.Задолженность = ТаблицаЗадолженностей.Итог("ВалютнаяСуммаОстаток");
		Иначе
			СчетДоговор.Задолженность = ТаблицаЗадолженностей.Итог("СуммаОстаток");
		КонецЕсли; 
	КонецЦикла;

	//Разделение каждой строки на оплату задолженности и аванс
	Для каждого ТекущийПлатеж из РеестрПлатежей Цикл

		СчетОплаты = ТекущийПлатеж.СчетОплаты;
		СчетАванса = ТекущийПлатеж.СчетАванса;
		ДоговорКонтрагента = ТекущийПлатеж.ДоговорКонтрагента;
		РасчетыВУсловныхЕдиницах = (ТекущийПлатеж.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) 
		и ТекущийПлатеж.СчетОплаты.Валютный;

		КлючЗадолженности = Новый Структура("ДоговорКонтрагента,СчетОплаты");
		КлючЗадолженности.ДоговорКонтрагента = ТекущийПлатеж.ДоговорКонтрагента;
		КлючЗадолженности.СчетОплаты = ТекущийПлатеж.СчетОплаты;
		ЗадолженностьСтрока          = ЗадолженностьРеестр.НайтиСтроки(КлючЗадолженности);

		Задолженность =  ЗадолженностьСтрока[0].Задолженность;
		Если РасчетыВУсловныхЕдиницах тогда
			СуммаПлатежа  =  ТекущийПлатеж.СуммаВзаиморасчетов;
		Иначе
			СуммаПлатежа  =  ТекущийПлатеж.СуммаПлатежа;
		КонецЕслИ;
		
		Если ЗначениеЗаполнено(СчетАванса) Тогда
			НужноЗаплатить = Мин(СуммаПлатежа, Задолженность);
		Иначе
			НужноЗаплатить = СуммаПлатежа;
		КонецЕсли;
		СуммаАванса    = СуммаПлатежа - НужноЗаплатить;

		ЗадолженностьСтрока[0].Задолженность = ЗадолженностьСтрока[0].Задолженность - НужноЗаплатить;

		Если НужноЗаплатить > 0 Тогда // Оплата от покупателя

			Проводка   = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;

			Проводка.СчетДт = СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"БанковскиеСчета",СтруктураШапкиДокумента.СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтатьиДвиженияДенежныхСредств",ТекущийПлатеж.СтатьяДвиженияДенежныхСредств);
			Если СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.02") и СтруктураШапкиДокумента.Свойство("абс_КассаККМ") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,СтруктураШапкиДокумента.абс_КассаККМ);
			КонецЕсли;
			
			Проводка.СчетКт = СчетОплаты;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",ДоговорКонтрагента);			
			
			Если РасчетыВВалюте Тогда
				ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НужноЗаплатить, ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалюте.Курс, 
				КратностьДокумента, ДанныеОВалюте.Кратность);

				Проводка.ВалютаДт        = ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = НужноЗаплатить;

				Если СчетОплаты.Валютный Тогда
					Проводка.ВалютаКт        = ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = НужноЗаплатить;
				КонецЕсли;

			Иначе
				Проводка.Сумма = НужноЗаплатить;
			КонецЕсли;

		КонецЕсли;

		Если СуммаАванса > 0 Тогда // Зачет аванса

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;

			Проводка.СчетДт      = СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"БанковскиеСчета",СтруктураШапкиДокумента.СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтатьиДвиженияДенежныхСредств",ТекущийПлатеж.СтатьяДвиженияДенежныхСредств);
			Если СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.02") и СтруктураШапкиДокумента.Свойство("абс_КассаККМ") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,СтруктураШапкиДокумента.абс_КассаККМ);
			КонецЕсли;
			
			Проводка.СчетКт      = СчетАванса;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",ДоговорКонтрагента);
			
			Если РасчетыВВалюте Тогда

				ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаАванса, ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалюте.Курс, 
				КратностьДокумента, ДанныеОВалюте.Кратность);

				Проводка.ВалютаДт        = ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СуммаАванса;

				Если СчетАванса.Валютный Тогда
					Проводка.ВалютаКт        = ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СуммаАванса;
				КонецЕсли;
			Иначе
				Проводка.Сумма = СуммаАванса;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ДвижениеДенегПрочийПриход()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УЧЕТА РАСЧЕТОВ С КОНТАГЕНТАМИ  - ОТРАЖЕНИЕ ЗАДОЛЖЕННОСТИ (ЗАЧЕТ АВАНСА)

// формируется записи в регистры сведений РасчетыПоПриобретениюОрганизации и РасчетыПоРеализацииОрганизации
// из документов приобретения и реализации. При необходимости формирует запись в последовательности расчетов
// или принудительно сбивает границу последовательности на момент движений документа
Функция ЗафиксироватьПриобретениеРеализациюВРегистреРасчетов(Объект, СтруктураПараметров, ВалютаРегламентированногоУчета, ТаблицаДанныхДокумента)

	ВидДокумента		= СтруктураПараметров.ВидДокумента;
	ВидОперации			= СтруктураПараметров.ВидОперации;
	НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента, ВидОперации).Направление;
	РасчетыВозврат      = СтруктураПараметров.РасчетыВозврат;
	ВалютаДокумента		= СтруктураПараметров.ВалютаДокумента;
	ВалютаВзаиморасчетов= СтруктураПараметров.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДокументВВалютеРасчетов = (ВалютаДокумента = ВалютаВзаиморасчетов);
	ДокументВВалютеРегламентированногоУчета = (ВалютаДокумента = ВалютаРегламентированногоУчета);
	
	//Определяем, учитывается ли аванс в документе
	ПараметрыУчетнойПолитики = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураПараметров.Период, СтруктураПараметров.Организация);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
		УчитыватьАванс = ПараметрыУчетнойПолитики.ОпределятьАвансыПриПроведенииДокумента;
	Иначе
		УчитыватьАванс = Истина;
	Конецесли;

	Если (НаправлениеДвижения = "Выбытие" и РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты) или
		(НаправлениеДвижения = "Поступление" и РасчетыВозврат =  Перечисления.РасчетыВозврат.Возврат) тогда
		
		РегистрРасчетов = Объект.Движения.РасчетыПоРеализацииОрганизации;		
		
		ИмяПоследовательностиДляРегистрации = "РасчетыПоРеализацииОрганизации";
		
	Иначе
		РегистрРасчетов = Объект.Движения.РасчетыПоПриобретениюОрганизации;

		ИмяПоследовательностиДляРегистрации = "РасчетыПоПриобретениюОрганизации";

	КонецЕсли;
	
	Если РегистрРасчетов=Неопределено тогда
		Возврат Ложь;
	КонецЕсли;

	ТаблицаДвижений = РегистрРасчетов.Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДанныхДокумента, ТаблицаДвижений);
	
	Для каждого Реквизит из СтруктураПараметров Цикл
		Если Реквизит.Ключ = "Таблица" или Реквизит.Ключ = "Заголовок" или Реквизит.Ключ = "СуммаДокументаСНДС" или Реквизит.Ключ = "Регистратор" тогда
			Продолжить;
		КонецЕсли;
		Если Реквизит.Ключ = "СчетУчетаРасчетовПоАвансам" и не(ТаблицаДвижений.Колонки.Найти("СчетАванса")=Неопределено) тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Реквизит.Значение, "СчетАванса");
			Продолжить;
		Конецесли;
		Если Реквизит.Ключ = "СчетУчетаРасчетовСКонтрагентом" и не(ТаблицаДвижений.Колонки.Найти("СчетОплаты")=Неопределено) тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Реквизит.Значение, "СчетОплаты");
			Продолжить;
		Конецесли;
		Если Реквизит.Ключ = "Сделка" Тогда
			
			Если СтруктураПараметров.Свойство("ВедениеВзаиморасчетов") Тогда
				Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
					ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
				ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					ТаблицаДвижений.ЗаполнитьЗначения(Реквизит.Значение, "Сделка");
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		Если Реквизит.Ключ = "Склад" И ТаблицаДвижений.Колонки.Найти("Склад") <> Неопределено Тогда
			Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Склад) Тогда
					СтрокаТаблицы.Склад = Реквизит.Значение;
				КонецЕсли;
			КонецЦикла;
			Продолжить;
		Конецесли;
		
		Если Не(ТаблицаДвижений.Колонки.Найти(Реквизит.Ключ)=Неопределено) тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Реквизит.Значение,Реквизит.Ключ);
		Конецесли;
		
	КонецЦикла;
	
	Если ТаблицаДвижений.Колонки.Найти("Документ")=неопределено Тогда
    	ТаблицаДвижений.Колонки.Добавить("Документ");
	КонецЕсли;
	Если ТаблицаДвижений.Колонки.Найти("ВидОперации")=неопределено Тогда
    	ТаблицаДвижений.Колонки.Добавить("ВидОперации");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Ссылка,"Документ");
	ТаблицаДвижений.ЗаполнитьЗначения(ВидОперации,"ВидОперации");
	//АБС_Попов изменения сруктуры последовательности
	// АБС Фролов ИЗМЕНЕНО 20121013
	//МассивДоговоров = РегистрРасчетов.Выгрузить().ВыгрузитьКолонку("ДоговорКонтрагента");
	МассивДоговоров = ТаблицаДвижений.ВыгрузитьКолонку("ДоговорКонтрагента");
	Для Каждого Договор из МассивДоговоров Цикл

		// Регистрация в последовательности при необходимости
		СдвигГраницыПоследовательностиНазад(ИмяПоследовательностиДляРегистрации, Новый МоментВремени(СтруктураПараметров.Период,Объект.Ссылка), новый структура("Организация,Договор",СтруктураПараметров.Организация,Договор));
	КонецЦикла;
	//\\АБС_Попов
	Если УчитыватьАванс тогда
		
		ПоследовательностьДляРегистрации = Объект.ПринадлежностьПоследовательностям[ИмяПоследовательностиДляРегистрации];
		
		Если не ПоследовательностьДляРегистрации.Количество() =0 Тогда
			ПоследовательностьДляРегистрации.Очистить();
		КонецЕсли; 
		
		// АБС ИЗМЕНЕНО 20121013 Фролов
		// Регистрируем последовательность в разрезе договоров
		Для Каждого ТекДоговор Из МассивДоговоров Цикл
			ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
			ЗаписьРегистрации.Период 	  = СтруктураПараметров.Период;
			ЗаписьРегистрации.Организация = СтруктураПараметров.Организация;
			ЗаписьРегистрации.Договор 	  = ТекДоговор;
		КонецЦикла;

	КонецЕсли; 
	
	РегистрРасчетов.Загрузить(ТаблицаДвижений);
	СтруктураПараметров.Вставить("ТаблицаРегистрации",РегистрРасчетов.Выгрузить());
	СтруктураПараметров.ТаблицаРегистрации.ЗаполнитьЗначения(Объект.Ссылка,"Регистратор");
	
	Возврат Истина;
	
КонецФункции

// Выполняет зачет аванса по указанному документу
//
// Параметры
// ОбъектСсылка    - ДокументОбъект или ДокументСсылка - Документ для которого выполяентся операция.
// РежимПроведения - РежимПроведенияДокумента- Режим проведения документа, для регламентной процедуры - неопределено
// РасчетыВВалюте  - Булево                  - Признак расчетов в валюте
// СчетКт          - ПланСчетов.Хозрасчетный - корреспондирующий счет
//
Функция ЗачетАванса(СтруктураПараметров,ПроводкиБУ, ВалютаРегламентированногоУчета,РежимПроведения=Неопределено, Объект=Null,ТаблицаДанныхДокумента=Неопределено) Экспорт

	Перем ВидОперации;

	СтруктураПараметров.Свойство("ВидОперации", ВидОперации);
	
	Организация         = СтруктураПараметров.Организация;
	ДатаДока            = СтруктураПараметров.Период;
	
	Если ТаблицаДанныхДокумента=Неопределено Тогда
		//Вызван регламентной процедурой
		ТаблицаДанныхДокумента = СтруктураПараметров.ТаблицаРегистрации;
	КонецЕсли;
	
	Если не СтруктураПараметров.УчетАгентскогоНДС или ТаблицаДанныхДокумента.Итог("СуммаНДС")=0 Тогда
		СуммаДокументаСНДС	= ТаблицаДанныхДокумента.Итог("СуммаВзаиморасчетов");
		СуммаДокументаВВалютеРегламентированногоУчета	= ТаблицаДанныхДокумента.Итог("СуммаСНДС");
	Иначе
		СуммаДокументаВВалютеРегламентированногоУчета	= ТаблицаДанныхДокумента.Итог("СуммаСНДС") - ТаблицаДанныхДокумента.Итог("СуммаНДС");
		СуммаДокументаСНДС	= Окр(СуммаДокументаВВалютеРегламентированногоУчета*ТаблицаДанныхДокумента.Итог("СуммаВзаиморасчетов")/ТаблицаДанныхДокумента.Итог("СуммаСНДС"),2);
	КонецЕсли; 

	Если не СтруктураПараметров.СуммаДокументаСНДС	= СуммаДокументаСНДС Тогда
		 СтруктураПараметров.Вставить("СуммаДокументаСНДС", СуммаДокументаСНДС);
	КонецЕсли;
	 
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	НаправлениеДвижения	= ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента, СтруктураПараметров.ВидОперации).Направление;
	ЭтоВозврат          = (СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);
	
	Если СуммаДокументаСНДС=0 тогда 
		//Документ не включается в последовательность расчетов
		Возврат 0;
	КонецЕсли;
	
	Если не СтруктураПараметров.Свойство("ОпределятьАвансыПриПроведенииДокумента") Тогда
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаДока, Организация);
		ОшибкаВПолучении = НЕ ЗначениеЗаполнено(УчетнаяПолитика);
		
		СтруктураПараметров.Вставить("ОпределятьАвансыПриПроведенииДокумента",?(ОшибкаВПолучении,Истина, УчетнаяПолитика.ОпределятьАвансыПриПроведенииДокумента));
	КонецЕсли; 

	//Зачет аванса документом не производится
	Если не Объект = Null тогда
		ЗафиксироватьПриобретениеРеализациюВРегистреРасчетов(Объект,СтруктураПараметров,ВалютаРегламентированногоУчета,ТаблицаДанныхДокумента);
	Конецесли;
	Возврат 0;
	
КонецФункции

// Выполняет движения по регламентированным взаиморасчетам для случая, когда они ведутся на регистрах накопления
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
Функция ОТКЛЮЧИТЬ_РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметров,ВалютаРегламентированногоУчета,РежимПроведения=Неопределено,ПроводкиБУ,Объект = Null,Отказ=Ложь,УдаляемыеВидыРегОпераций=Неопределено, ПолучатьПроводкиПоСсылке = Ложь) экспорт
	Перем ТаблицаРегистрации;
	
	Если СтруктураПараметров.Свойство("ТаблицаРегистрации", ТаблицаРегистрации) 
		И (ТипЗнч(ТаблицаРегистрации) <> Тип("ТаблицаЗначений")
			ИЛИ ТаблицаРегистрации.Количество() = 0) 
		Тогда
		ТаблицаРегистрации = Неопределено;
	КонецЕсли;
	
	Если ТаблицаРегистрации = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Ссылка			= СтруктураПараметров.Регистратор;
	ВидДокумента	= СтруктураПараметров.ВидДокумента;
	ДатаДока		= СтруктураПараметров.Период;
	Заголовок       = "";
	СтруктураПараметров.Свойство("Заголовок", Заголовок);
	Если НЕ ЗначениеЗаполнено(Заголовок) тогда
		 Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	Конецесли;
	
	ДоговорКонтрагента   = СтруктураПараметров.ДоговорКонтрагента;
	СчетОплаты			 = СтруктураПараметров.СчетУчетаРасчетовСКонтрагентом;
	СчетАванса			 = СтруктураПараметров.СчетУчетаРасчетовПоАвансам;
	ОценкаДоходовРасходовПоКурсуАвансов = ПолучитьОценкуДоходовРасходовПоКурсуАвансов(ДатаДока);
    
	//Проверка правильности заполнения реквизитов документа
	ПокупкиПродажи = ПроверкаРасчетыВУсловныхЕдиницах(СтруктураПараметров, 
		ДоговорКонтрагента, СчетОплаты, СчетАванса, ВалютаРегламентированногоУчета, Отказ, Заголовок, Истина);
		
	Если ПокупкиПродажи = Ложь Тогда
		Возврат Ложь;
	Иначе
		Покупки	= ПокупкиПродажи.Покупки;
		Продажи	= ПокупкиПродажи.Продажи;
	КонецЕсли;
	
	Организация          = СтруктураПараметров.Организация;
	Контрагент           = СтруктураПараметров.Контрагент;
	ВалютаВзаиморасчетов = СтруктураПараметров.ВалютаВзаиморасчетов;
	КурсРасчетов		 = СтруктураПараметров.КурсВзаиморасчетов;
	КратностьРасчетов	 = СтруктураПараметров.КратностьВзаиморасчетов;
	ВалютаДокумента		 = СтруктураПараметров.ВалютаДокумента;
	КурсДокумента		 = СтруктураПараметров.КурсДокумента;
	КратностьДокумента	 = СтруктураПараметров.КратностьДокумента;
	ЭтоВозврат			 = (СтруктураПараметров.РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат);
	ЗнакОстатка          = ?(ЭтоВозврат, -1, 1);
	ВидРегОперацииКорр 	 = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах;
	Если СтруктураПараметров.Свойство("НДСВключенВСтоимость") И ТипЗнч(СтруктураПараметров.НДСВключенВСтоимость) = Тип("Булево") Тогда
		НДСВключенВСтоимость = СтруктураПараметров.НДСВключенВСтоимость;
	Иначе
		НДСВключенВСтоимость = Ложь;
	КонецЕсли;
	
	ЕстьТаблицаПоВзаиморасчетам = СтруктураПараметров.ВестиПоДокументамРасчетовСКонтрагентом 
		И СтруктураПараметров.Свойство("ТаблицаПоВзаиморасчетам")
		И ТипЗнч(СтруктураПараметров.ТаблицаПоВзаиморасчетам) = Тип("ТаблицаЗначений");
	Если ЕстьТаблицаПоВзаиморасчетам Тогда
									
		ТаблицаПоВзаиморасчетам = СтруктураПараметров.ТаблицаПоВзаиморасчетам.Скопировать();
		Если ЭтоВозврат Тогда
			УправлениеВзаиморасчетами.ИзменитьЗнакКолонокТаблицы(ТаблицаПоВзаиморасчетам, Новый Структура("СуммаВзаиморасчетов, СуммаРегл, СуммаУпр"));
		КонецЕсли;
		ТаблицаПоВзаиморасчетам.Колонки.СуммаРегл.Имя = "СуммаРег";
		ТаблицаПоВзаиморасчетам.Колонки.ДокументРасчетовСКонтрагентом.Имя = "Документ";
		НетСделкиВТаблице = ТаблицаПоВзаиморасчетам.Колонки.Найти("Сделка") = Неопределено;
		Если НетСделкиВТаблице Тогда
			ТаблицаПоВзаиморасчетам.Колонки.Добавить("Сделка", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказПоставщику, 
				|ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика, ДокументСсылка.абс_СчетНаОплату, Неопределено"), "Сделка");
		КонецЕсли;
		Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ТаблицаПоВзаиморасчетам.ЗаполнитьЗначения(Неопределено, "Сделка");
		ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам ИЛИ НетСделкиВТаблице Тогда
			ТаблицаПоВзаиморасчетам.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
			ТаблицаПоВзаиморасчетам.ЗагрузитьКолонку(ТаблицаПоВзаиморасчетам.ВыгрузитьКолонку("СуммаВзаиморасчетов"), "СуммаРег");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаРегистрации.Колонки.Найти("НДСВал") = Неопределено Тогда
		ТаблицаРегистрации.Колонки.Добавить("НДСВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		Если не ТаблицаРегистрации.Итог("СуммаНДС") = 0 Тогда
			Для каждого СтрокаТаблицы Из ТаблицаРегистрации Цикл
				Если СтрокаТаблицы.СуммаНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов) или СтруктураПараметров.ВалютаВзаиморасчетов = СтруктураПараметров.ВалютаРегламентированногоУчета Тогда
					СтрокаТаблицы.НДСВал = СтрокаТаблицы.СуммаНДС;
				Иначе
					СтрокаТаблицы.НДСВал = Окр(СтрокаТаблицы.СуммаНДС*СтрокаТаблицы.СуммаВзаиморасчетов/СтрокаТаблицы.СуммаСНДС,2);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	ТаблицаСделокДокумента = ТаблицаРегистрации.Скопировать();
	ТаблицаСделокДокумента.Свернуть("Сделка", "СуммаВзаиморасчетов, СуммаСНДС, НДСВал, СуммаНДС");
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаСделокДокумента.ЗаполнитьЗначения(Неопределено, "Сделка");
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаСделокДокумента.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	ВызванРегламентнойПроцедурой = (Объект = Null);
	
	Если ВызванРегламентнойПроцедурой Тогда 
		СтруктураДвижений = Новый Структура;
	Конецесли;
	
	//Определяем образ действий (on/off-line)
	Если НЕ ВызванРегламентнойПроцедурой И НЕ СтруктураПараметров.Свойство("ОпределятьАвансыПриПроведенииДокумента") Тогда
		УчетнаяПолитика  = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаДока, Организация);
		СтруктураПараметров.Вставить("ОпределятьАвансыПриПроведенииДокумента",?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), Истина, УчетнаяПолитика.ОпределятьАвансыПриПроведенииДокумента));
	КонецЕсли; 
	
	УчитыватьАванс	= ВызванРегламентнойПроцедурой ИЛИ СтруктураПараметров.ОпределятьАвансыПриПроведенииДокумента;
	
	Если ЕстьТаблицаПоВзаиморасчетам И УчитыватьАванс Тогда
		ТаблицаПоВзаиморасчетам.Свернуть("Сделка, Документ, ДатаОплаты", "СуммаВзаиморасчетов, СуммаРег");
	КонецЕсли;
	
	//Получаем записи регистра, по которому отслеживается изменение состояния расчетов по документу
	Если ВызванРегламентнойПроцедурой тогда
		ДвиженияПоРегиструУЕ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления[?(покупки, "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации")]);
	Иначе
		ДвиженияПоРегиструУЕ = ОбщегоНазначения.ПолучитьДвижение(Объект, ?(покупки, "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации"));
	КонецЕсли;
	
	Если ДвиженияПоРегиструУЕ = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	Если ВызванРегламентнойПроцедурой тогда 
		СтруктураДвижений.Вставить("ДвиженияПоРегиструУЕ", ДвиженияПоРегиструУЕ);
	Конецесли;
	
	// Создание таблицы для последующего отражения расчетов по НДС.
	ТаблицаАвансовДляНДС = Новый ТаблицаЗначений();
	ТаблицаАвансовДляНДС.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
	ТаблицаАвансовДляНДС.Колонки.Добавить("СчетФактура",         Документы.ТипВсеСсылки());
	ТаблицаАвансовДляНДС.Колонки.Добавить("РублеваяСумма",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАвансовДляНДС.Колонки.Добавить("СуммаВал",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАвансовДляНДС.Колонки.Добавить("КурсоваяРазница",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Если ЭтоВозврат Тогда
		ТаблицаАвансовДляНДС.Колонки.Добавить("ДокументРасчетов");
	КонецЕсли; 
	
	ТаблицаАвансовДляНДС.Колонки.Добавить("Контрагент", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаАвансовДляНДС.Колонки.Добавить("ДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаАвансовДляНДС.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	//Сокращенная схема в случае off-line проведения
	Если НЕ УчитыватьАванс Тогда
		
		ТаблицаДвиженийПоРегиструУЕ = ДвиженияПоРегиструУЕ.ВыгрузитьКолонки();
		Для каждого СтрокаТаблицыСделок Из ТаблицаСделокДокумента Цикл
		
			СтрокаДвижения = ТаблицаДвиженийПоРегиструУЕ.Добавить();
			СтрокаДвижения.Сделка = СтрокаТаблицыСделок.Сделка;
			СтрокаДвижения.СуммаВзаиморасчетов = СтрокаТаблицыСделок.СуммаВзаиморасчетов * ЗнакОстатка;
			СтрокаДвижения.СуммаРег            = СтрокаТаблицыСделок.СуммаСНДС * ЗнакОстатка;
		
		КонецЦикла;
		
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(ДатаДока, "Период");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Истина, "Активность");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Контрагент, "Контрагент");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Организация, "Организация");

		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(СчетОплаты, "СчетОплаты");
		
		ДвиженияПоРегиструУЕ.Загрузить(ТаблицаДвиженийПоРегиструУЕ);
		
		Возврат Истина;
		
	КонецЕсли;	
	
	//Полная схема проведения (on-line)
	
	СуммоваяРазница = 0;
	СуммаАвансаРег  = СтруктураПараметров.СуммаАвансаРег;
	СуммаАвансаВал  = СтруктураПараметров.СуммаАвансаВал;
	
	РасчетыВВалюте2008 = (ДатаДока >= '20080101')
		И ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета
		И НЕ СтруктураПараметров.РасчетыВУсловныхЕдиницах;
		
	ФормироватьПроводкиПоСчетуВАЛ = Не ОценкаДоходовРасходовПоКурсуАвансов И РасчетыВВалюте2008 И НЕ СтруктураПараметров.ОрганизацияПрименяетУСН;
	
	Если ЕстьТаблицаПоВзаиморасчетам И НЕ ВызванРегламентнойПроцедурой Тогда
		
		// Оставляем в таблице взаиморасчетов по документам только строки авансов
		
		СтрокиНеАвансов = ТаблицаПоВзаиморасчетам.НайтиСтроки(Новый Структура("Документ", Ссылка));
		Для каждого СтрокаТаблицыПоВзаиморасчетам Из СтрокиНеАвансов Цикл
			ТаблицаПоВзаиморасчетам.Удалить(СтрокаТаблицыПоВзаиморасчетам);
		КонецЦикла;
		
	Иначе
		
		//Выбираем текущие остатки по регистру расчетов в у.е.
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
		СчетОстатков = ?(ЭтоВозврат, СчетОплаты, СчетАванса);
		Запрос.УстановитьПараметр("Счет", СчетОстатков);
		
		ИспользоватьОтборПоСделкам = не СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;		
		Запрос.УстановитьПараметр("ИспользоватьОтборПоСделкам", ИспользоватьОтборПоСделкам);
		Если ИспользоватьОтборПоСделкам Тогда
			Сделки = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСделокДокумента.ВыгрузитьКолонку("Сделка"));
			Запрос.УстановитьПараметр("Сделки", Сделки);
		Иначе
			Запрос.УстановитьПараметр("Сделки", Неопределено);
		КонецЕсли;
		
		ИспользоватьОтборПоДокументам = ЭтоВозврат И Покупки;
		Запрос.УстановитьПараметр("ИспользоватьОтборПоДокументам", ИспользоватьОтборПоДокументам);
		Если ИспользоватьОтборПоДокументам Тогда
			ДокументыРасчетов = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаРегистрации.ВыгрузитьКолонку("ДокументРасчетов"),Истина);
			Запрос.УстановитьПараметр("ДокументыРасчетов", ДокументыРасчетов);
		Иначе
			Запрос.УстановитьПараметр("ДокументыРасчетов", Неопределено);
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("ЗнакОстатка", ЗнакОстатка);
		Запрос.УстановитьПараметр("Период", Новый МоментВремени(ДатаДока, Ссылка));
		//АБС_Попов
		Запрос.УстановитьПараметр("Организация", Организация);
        //\\АБС_Попов
		ИмяРегистра = ?(Продажи, "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации", "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации");
		
		Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
					
			СтруктураПараметровБлокировки = Новый Структура(
				"ИмяТаблицы", ИмяРегистра);
			СтруктураЗначенийБлокировки   = Новый Структура(
				"Период, Организация, Контрагент, ДоговорКонтрагента, СчетОплаты", 
				Новый Диапазон(, ДатаДока), Организация, Контрагент, ДоговорКонтрагента, СчетОстатков);
			СтруктураИсточникаДанных      = Новый Структура;
			
			Если ИспользоватьОтборПоСделкам ИЛИ ИспользоватьОтборПоДокументам Тогда
				
				ЗапросДляБлокировки = Новый Запрос;
				МенеджерВремТаблиц = Новый МенеджерВременныхТаблиц;
				ЗапросДляБлокировки.МенеджерВременныхТаблиц = МенеджерВремТаблиц;
				ЗапросДляБлокировки.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВЫБОР 
				|		КОГДА НЕ (&ИспользоватьОтборПоСделкам)
				|			ТОГДА Неопределено
				|		КОГДА &ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом)
				|			ТОГДА Неопределено
				|		КОГДА &ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
				|			ТОГДА &Сделка
				|		ИНАЧЕ
				|			Таб.Сделка
				|	КОНЕЦ КАК Сделка,
				|	ВЫБОР 
				|		КОГДА НЕ (&ИспользоватьОтборПоДокументам)
				|			ТОГДА Неопределено
				|		ИНАЧЕ
				|			Таб.ДокументРасчетов 
				|	КОНЕЦ КАК Документ
				|ПОМЕСТИТЬ ТаблицаРегистрации
				|ИЗ
				|	&ТаблицаРегистрации КАК Таб";
				
				ЗапросДляБлокировки.УстановитьПараметр("ИспользоватьОтборПоСделкам", ИспользоватьОтборПоСделкам);
				ЗапросДляБлокировки.УстановитьПараметр("ИспользоватьОтборПоДокументам", ИспользоватьОтборПоДокументам);
				ЗапросДляБлокировки.УстановитьПараметр("ВедениеВзаиморасчетов", СтруктураПараметров.ВедениеВзаиморасчетов);
				ЗапросДляБлокировки.УстановитьПараметр("Сделка", СтруктураПараметров.Сделка);
				ЗапросДляБлокировки.УстановитьПараметр("ТаблицаРегистрации", ТаблицаРегистрации);
				ЗапросДляБлокировки.Выполнить();
				
				СтруктураПараметровБлокировки.Вставить("ИсточникДанных", МенеджерВремТаблиц);
				СтруктураПараметровБлокировки.Вставить("ИмяВременнойТаблицы", "ТаблицаРегистрации");
				
				Если ИспользоватьОтборПоСделкам Тогда
					СтруктураИсточникаДанных.Вставить("Сделка", "Сделка");
				КонецЕсли;
				Если ИспользоватьОтборПоДокументам Тогда
					СтруктураИсточникаДанных.Вставить("Документ", "Документ");
				КонецЕсли;
				
			КонецЕсли;
			
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных, Отказ, Заголовок);
					
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасчетыВУЕ.Сделка КАК Сделка,
		|	РасчетыВУЕ.Документ КАК Документ,
		|	РасчетыВУЕ.ДатаОплаты КАК ДатаОплаты,
		|	РасчетыВУЕ.СуммаВзаиморасчетовОстаток * &ЗнакОстатка КАК СуммаВзаиморасчетов,
		|	РасчетыВУЕ.СуммаРегОстаток * &ЗнакОстатка КАК СуммаРег
		|ИЗ
		|	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки(
		|			&Период,
		|			ДоговорКонтрагента = &Договор И Организация = &Организация
		|				И СчетОплаты = &Счет
		|				И ВЫБОР
		|					КОГДА &ИспользоватьОтборПоСделкам
		|						ТОГДА Сделка В (&Сделки)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &ИспользоватьОтборПоДокументам
		|						ТОГДА Документ В (&ДокументыРасчетов)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК РасчетыВУЕ
		|ГДЕ
		|	РасчетыВУЕ.СуммаВзаиморасчетовОстаток * &ЗнакОстатка > 0
		|	И РасчетыВУЕ.СуммаРегОстаток * &ЗнакОстатка > 0
		| // АБС ВСТАВКА для исключения блокировок
		|//ДЛЯ ИЗМЕНЕНИЯ
		|//	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки
		|// АБС ВСТАВКА для исключения блокировок
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОплаты,
		|	РасчетыВУЕ.Документ.Дата,
		|	Документ
		|ИТОГИ ПО
		|	Сделка";
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", ИмяРегистра);
		
		ОстатокАвансаПоСделкам = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	КонецЕсли;
		
	// Обработаем закрытие задолженности и сформируем курсовые (суммовые) разницы
	
	СуммаДокументаВал = 0;
	СуммаДокументаРег = 0;
	
	Если РасчетыВВалюте2008 Тогда
		// курс на 31.12.2007 для зачета в 2008 году авансов 2007 года
		КурсыВалют20071231 = Новый Соответствие; 
	КонецЕсли;
	
	Для каждого СтрокаТаблицыСделок Из ТаблицаСделокДокумента Цикл
		
		СуммаСделкиРег = СтрокаТаблицыСделок.СуммаСНДС - ?(СтруктураПараметров.УчетАгентскогоНДС, СтрокаТаблицыСделок.СуммаНДС, 0);
		Если СтруктураПараметров.РасчетыВУсловныхЕдиницах ИЛИ ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
			СуммаСделкиВал = СтрокаТаблицыСделок.СуммаВзаиморасчетов - ?(СтруктураПараметров.УчетАгентскогоНДС, СтрокаТаблицыСделок.НДСВал, 0);
		Иначе
			СуммаСделкиВал = СуммаСделкиРег;
		КонецЕсли;
		СуммаДокументаВал = СуммаДокументаВал + СуммаСделкиВал;
		СуммаДокументаРег = СуммаДокументаРег + СуммаСделкиРег;
		
		КурсСделки = ?(СуммаСделкиВал = 0, 0, СуммаСделкиРег / СуммаСделкиВал);
		
		Если ЕстьТаблицаПоВзаиморасчетам И НЕ ВызванРегламентнойПроцедурой Тогда
			
			ОстаткиАвансов = ТаблицаПоВзаиморасчетам.НайтиСтроки(Новый Структура("Сделка", СтрокаТаблицыСделок.Сделка));
			ЕстьОстаткиАвансовПоСделке = ОстаткиАвансов.Количество() > 0;
			
		Иначе
			
			СтрокиАвансаПоСделке = ОстатокАвансаПоСделкам.Строки.Найти(СтрокаТаблицыСделок.Сделка, "Сделка", Ложь);
			ЕстьОстаткиАвансовПоСделке = СтрокиАвансаПоСделке <> Неопределено;
			Если ЕстьОстаткиАвансовПоСделке Тогда
				ОстаткиАвансов = СтрокиАвансаПоСделке.Строки;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьОстаткиАвансовПоСделке Тогда
			Для каждого ОстатокАванса Из ОстаткиАвансов Цикл
				
				Если ВызванРегламентнойПроцедурой И ЕстьТаблицаПоВзаиморасчетам Тогда
					
					ОстаткиПоТаблицеВзаиморасчетов = ТаблицаПоВзаиморасчетам.НайтиСтроки(
						Новый Структура("Сделка, Документ", СтрокаТаблицыСделок.Сделка, ОстатокАванса.Документ));
					
					ОстатокАвансаВал	= 0;
					ОстатокавансаРег	= 0;
					Для каждого ОстатокПоТаблице Из ОстаткиПоТаблицеВзаиморасчетов Цикл
						ОстатокАвансаВал	= ОстатокАвансаВал + ОстатокПоТаблице.СуммаВзаиморасчетов;
						ОстатокАвансаРег	= ОстатокАвансаРег + ОстатокПоТаблице.СуммаРег;
					КонецЦикла;
					
					Если ОстатокАвансаВал = 0 Тогда
						Продолжить;
					КонецЕсли;
					
				Иначе
					ОстатокАвансаВал = ОстатокАванса.СуммаВзаиморасчетов;
					ОстатокАвансаРег = ОстатокАванса.СуммаРег;
				КонецЕсли;
				
				КурсОстаткаАванса              = ?(ОстатокАвансаВал = 0, 0, ОстатокАвансаРег / ОстатокАвансаВал);
				ЗачтеноАвансаВал               = Мин(ОстатокАвансаВал, СуммаСделкиВал);
				ЗачтеноАвансаРегПоКурсуОстатка = Окр(ЗачтеноАвансаВал * КурсОстаткаАванса, 2);
				
				Если ВалютаДокумента = ВалютаРегламентированногоУчета и не ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
					ЗачтеноАвансаРегПоКурсуРасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЗачтеноАвансаВал,
						ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
						КурсРасчетов, 1,
						КратностьРасчетов, 1);
				Иначе
					ЗачтеноАвансаРегПоКурсуРасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЗачтеноАвансаВал,
						ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
						КурсДокумента, 1,
						КратностьДокумента, 1);
				КонецЕсли;
				
				Если РасчетыВВалюте2008 И ОстатокАванса.ДатаОплаты < '20080101' Тогда
					
					СтруктураКурса20071231 = КурсыВалют20071231[ВалютаВзаиморасчетов];
					Если СтруктураКурса20071231 = Неопределено Тогда
						СтруктураКурса20071231 = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, '20071231');
						КурсыВалют20071231.Вставить(ВалютаВзаиморасчетов, СтруктураКурса20071231);
					КонецЕсли;
					
					ЗачтеноАвансаРегПоКурсу20071231 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЗачтеноАвансаВал,
						ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
						СтруктураКурса20071231.Курс, 1,
						СтруктураКурса20071231.Кратность, 1);
                КонецЕсли;
				
				ТекущаяСуммоваяРазница = ЗачтеноАвансаРегПоКурсуРасчетов - ЗачтеноАвансаРегПоКурсуОстатка;
				
				Движение = ДвиженияПоРегиструУЕ.Добавить();
				
				Движение.Период 	         = ДатаДока;
				Движение.ВидДвижения         = ВидДвиженияНакопления.Расход;
				Движение.ДоговорКонтрагента	 = ДоговорКонтрагента;
				Движение.Контрагент			 = Контрагент;
				Движение.Организация		 = Организация;
				Движение.Сделка				 = СтрокаТаблицыСделок.Сделка;
				Движение.Документ			 = ОстатокАванса.Документ;
				Движение.СчетОплаты 		 = ?(ЭтоВозврат, СчетОплаты, СчетАванса);
				Движение.ДатаОплаты 		 = ОстатокАванса.ДатаОплаты;
				Движение.СуммаВзаиморасчетов = ЗачтеноАвансаВал * ЗнакОстатка;
				Движение.СуммаРег			 = ЗачтеноАвансаРегПоКурсуОстатка * ЗнакОстатка;
				
				НоваяСтрока = ТаблицаАвансовДляНДС.Добавить();
				
				НоваяСтрока.Контрагент		     = Контрагент;
				НоваяСтрока.ДоговорКонтрагента   = ДоговорКонтрагента;
				НоваяСтрока.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
				НоваяСтрока.ДокументОплаты 	     = ОстатокАванса.Документ;
				НоваяСтрока.СчетФактура		     = Ссылка;
				НоваяСтрока.РублеваяСумма		 = ЗачтеноАвансаРегПоКурсуРасчетов;
				НоваяСтрока.СуммаВал		     = ЗачтеноАвансаВал;
				НоваяСтрока.КурсоваяРазница      = (-1) * ТекущаяСуммоваяРазница;
				
				СуммаСделкиРег    = СуммаСделкиРег - ЗачтеноАвансаРегПоКурсуРасчетов;
				СуммаСделкиВал    = СуммаСделкиВал - ЗачтеноАвансаВал;
				СуммаДокументаВал = СуммаДокументаВал - ЗачтеноАвансаВал;
				СуммаДокументаРег = СуммаДокументаРег - ЗачтеноАвансаРегПоКурсуРасчетов;
				СуммаАвансаВал    = СуммаАвансаВал - ЗачтеноАвансаВал;
				
				Если СтруктураПараметров.РасчетыВУсловныхЕдиницах Тогда
					СуммаАвансаРег  = СуммаАвансаРег - ЗачтеноАвансаРегПоКурсуОстатка;
					СуммоваяРазница = СуммоваяРазница + ТекущаяСуммоваяРазница;
				ИначеЕсли РасчетыВВалюте2008 И ОстатокАванса.ДатаОплаты >= '20080101' Тогда
					СуммаАвансаРег  = СуммаАвансаРег - ЗачтеноАвансаРегПоКурсуОстатка;
					СуммоваяРазница = СуммоваяРазница + ТекущаяСуммоваяРазница;
				ИначеЕсли РасчетыВВалюте2008 И ОстатокАванса.ДатаОплаты < '20080101' Тогда
					СуммаАвансаРег  = СуммаАвансаРег - ЗачтеноАвансаРегПоКурсу20071231;
					СуммоваяРазница = СуммоваяРазница + (ЗачтеноАвансаРегПоКурсуРасчетов - ЗачтеноАвансаРегПоКурсу20071231);
				Иначе
					СуммаАвансаРег         = СуммаАвансаРег - ЗачтеноАвансаРегПоКурсуРасчетов;
				КонецЕсли; 
				
				Если СуммаСделкиВал = 0 Тогда 
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Зарегистрируем оставшуюся задолженность
		
		Если СуммаСделкиВал <> 0 ИЛИ СуммаСделкиРег <> 0 Тогда 
			
			Движение             = ДвиженияПоРегиструУЕ.Добавить();
			
			Движение.ВидДвижения         = ВидДвиженияНакопления.Расход;
			Движение.Период		         = ДатаДока;
			Движение.ДоговорКонтрагента	 = ДоговорКонтрагента;
			Движение.Контрагент			 = Контрагент;
			Движение.Организация		 = Организация;
			Движение.Сделка		         = СтрокаТаблицыСделок.Сделка;
			Движение.Документ			 = Ссылка;
			Движение.СчетОплаты			 = ?(ЭтоВозврат, СчетАванса, СчетОплаты);
			Движение.ДатаОплаты			 = ?(ЭтоВозврат, ДатаДока, '00010101');
			Движение.СуммаВзаиморасчетов = СуммаСделкиВал * ЗнакОстатка;
			Движение.СуммаРег			 = СуммаСделкиРег * ЗнакОстатка;
			
		КонецЕсли;
		
	КонецЦикла;

	// Отражение в НДС по реализации 0%
	НаправлениеДвиженийДляНДС = ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента, СтруктураПараметров.ВидОперации);
	Если НаправлениеДвиженийДляНДС.Направление = "Выбытие" 
		И НаправлениеДвиженийДляНДС.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда 
		//Удалим из СтруктураПараметров элемент "ПроводкиНУ", "Налоговый", чтобы избежать передачи мутабельного значения в модуль УчетНДСФормированиеДвижений
		ВремПроводкиНУ = Неопределено;
		ВремНалоговый = Неопределено;

		Если СтруктураПараметров.Свойство("ПроводкиНУ") Тогда
			ВремПроводкиНУ = СтруктураПараметров.ПроводкиНУ;
			СтруктураПараметров.Удалить("ПроводкиНУ");
		КонецЕсли;
	    Если СтруктураПараметров.Свойство("Налоговый") Тогда
			ВремНалоговый = СтруктураПараметров.Налоговый;
			СтруктураПараметров.Удалить("Налоговый");
		КонецЕсли;
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРеализация0_КурсовыеРазницы(СтруктураПараметров, ТаблицаАвансовДляНДС, Отказ);

		//Добавим в СтруктураПараметров удаленный ранее элемент ПроводкиНУ, Налоговый
		Если ВремПроводкиНУ <> Неопределено Тогда
			СтруктураПараметров.Вставить("ПроводкиНУ", ВремПроводкиНУ);
			ВремПроводкиНУ = Неопределено;
		КонецЕсли;
	    Если ВремНалоговый <> Неопределено Тогда
			СтруктураПараметров.Вставить("Налоговый", ВремНалоговый);
			ВремНалоговый = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	//Удалим из СтруктураПараметров элемент "ПроводкиНУ", "Налоговый", чтобы избежать передачи мутабельного значения в модуль УчетНДСФормированиеДвижений
	ВремПроводкиНУ = неопределено;
	ВремНалоговый = неопределено;

	Если СтруктураПараметров.Свойство("ПроводкиНУ") Тогда
		ВремПроводкиНУ = СтруктураПараметров.ПроводкиНУ;
		СтруктураПараметров.Удалить("ПроводкиНУ");
	КонецЕсли;
    Если СтруктураПараметров.Свойство("Налоговый") Тогда
		ВремНалоговый = СтруктураПараметров.Налоговый;
		СтруктураПараметров.Удалить("Налоговый");
	КонецЕсли;

	//Добавим в СтруктураПараметров удаленный ранее элемент ПроводкиНУ, Налоговый
	Если ВремПроводкиНУ <> неопределено Тогда
		СтруктураПараметров.Вставить("ПроводкиНУ",ВремПроводкиНУ);
		ВремПроводкиНУ = неопределено;
	КонецЕсли;
    Если ВремНалоговый <> неопределено Тогда
		СтруктураПараметров.Вставить("Налоговый",ВремНалоговый);
		ВремНалоговый = неопределено;
	КонецЕсли;

	СуммаРасхожденийВал   = ?(ЭтоВозврат И Продажи, СуммаДокументаВал, СуммаАвансаВал);
	СуммаРасхожденийРег   = ?(ЭтоВозврат И Продажи, СуммаДокументаРег, СуммаАвансаРег);
	НужнаПроводкаПоАвансу = (СуммаРасхожденийВал <> 0 ИЛИ СуммаРасхожденийРег <> 0) И (НЕ СчетОплаты = СчетАванса);
	
	Если ЭтоВозврат Тогда
		Если Покупки Тогда
			СодержаниеОперации = "Возврат поставщику (неоплаченная часть)";
		Иначе
			СодержаниеОперации = "Возврат от покупателя (оплаченная часть)";
		КонецЕсли;
	Иначе
		Если Покупки Тогда
			СодержаниеОперации = "Зачет аванса поставщику";
		Иначе
			СодержаниеОперации = "Зачет аванса покупателя";
		КонецЕслИ;
	КонецЕслИ;

	// Корректируем сумму зачтенного аванса по состоянию расчетов на регистре
	
	Если НужнаПроводкаПоАвансу Тогда
		
		Проводка   = ПроводкиБУ.Добавить();
		
		Проводка.Период                  = ДатаДока;
		Проводка.Организация             = Организация;
		Проводка.Содержание              = СодержаниеОперации;
		Проводка.ВидРегламентнойОперации = ВидРегОперацииКорр;
		
		Если Покупки Тогда
			Проводка.СчетДт = СчетОплаты;
			Проводка.СчетКт = СчетАванса;
		Иначе
			Проводка.СчетДт = СчетАванса;
			Проводка.СчетКт = СчетОплаты;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты"	,Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"		,ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты"	,Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"		,ДоговорКонтрагента);
		
		Если СтруктураПараметров.РасчетыВУсловныхЕдиницах ИЛИ РасчетыВВалюте2008 Тогда
			Проводка.Сумма = -СуммаРасхожденийРег;
		Иначе
			Проводка.Сумма = -СуммаРасхожденийРег - СуммоваяРазница;
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = -СуммаРасхожденийВал;
			КонецЕсли; 
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = -СуммаРасхожденийВал;
			КонецЕсли;
		КонецЕсли;
		
		// В 2008 году при зачете валютного аванса одновремено закрываем счет ВАЛ
		Если ФормироватьПроводкиПоСчетуВАЛ	Тогда
		
			Проводка   = ПроводкиБУ.Добавить();
			
			Проводка.Период                  = ДатаДока;
			Проводка.Организация             = Организация;
			Проводка.Содержание              = СодержаниеОперации;
			Проводка.ВидРегламентнойОперации = ВидРегОперацииКорр;
			
			Если Покупки Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты"	,Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"		,ДоговорКонтрагента);
				Проводка.ВалютаКт        = ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = -СуммаРасхожденийВал;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты"	,Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"		,ДоговорКонтрагента);
				Проводка.ВалютаДт        = ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = -СуммаРасхожденийВал;
			КонецЕсли;
			
			Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(-СуммаРасхожденийВал,
				ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
				КурсРасчетов, 1,
				КратностьРасчетов, 1);
			
		КонецЕсли;
			
	КонецЕсли;
	
	// Распределение курсовой (суммовой) разницы, формирование корректирующих движений
	// выполняется только при восстановлении последовательности расчетов
	
	Если НЕ ВызванРегламентнойПроцедурой Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ (СтруктураПараметров.РасчетыВУсловныхЕдиницах ИЛИ РасчетыВВалюте2008)
		ИЛИ СуммоваяРазница = 0 
		Тогда
		Возврат СтруктураДвижений;
    ИначеЕсли (ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("По результатам зачета авансов обнаружена суммовая разница в размере "+СуммоваяРазница+" "+ВалютаРегламентированногоУчета+"
		|Распределение суммовой разницы по движениям не может быть произведено, так как документ выписан в валюте регл.учета.
		|Отразите изменения самостоятельно.",,Заголовок);
		Возврат СтруктураДвижений;
	КонецЕсли;
	
	СуммоваяРазницаПоДокументам = Новый ТаблицаЗначений();
	СуммоваяРазницаПоДокументам.Колонки.Добавить("Регистратор");
	СуммоваяРазницаПоДокументам.Колонки.Добавить("СуммоваяРазница",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	СуммоваяРазницаПоДокументам.Колонки.Добавить("Документ", Документы.ТипВсеСсылки());
	СуммоваяРазницаПоДокументам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	СуммоваяРазницаПоДокументам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	СуммоваяРазницаПоДокументам.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	СтрокаСуммовыхРазниц =  СуммоваяРазницаПоДокументам.Добавить();
	СтрокаСуммовыхРазниц.Регистратор = Ссылка;
	СтрокаСуммовыхРазниц.СуммоваяРазница = -СуммоваяРазница;
					
	СтрокаСуммовыхРазниц.Документ = Ссылка;
	СтрокаСуммовыхРазниц.Контрагент = Контрагент;
	СтрокаСуммовыхРазниц.ДоговорКонтрагента =  ДоговорКонтрагента;
	СтрокаСуммовыхРазниц.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДатаДока);
		
	Если РасчетыВВалюте2008 Тогда
		Если Не СтруктураПараметров.УчетАгентскогоНДС
			Или Продажи Тогда
			// Расчеты в иностранной валюте. Корректируется только стоимость без НДС или выручка по данным БУ.
			// Суммы НДС и налогового учета (НУ) не корректируются. В налоговом учете сумма корректировки становится постоянной разницей.
			
			//Подготовка таблицы распределения
			ТаблицаРаспределенияСР = Новый ТаблицаЗначений();
			ТаблицаРаспределенияСР.Колонки.Добавить("Регистратор");
			ТаблицаРаспределенияСР.Колонки.Добавить("СуммаСНДС");
			ТаблицаРаспределенияСР.Колонки.Добавить("СуммаНДС");
		
			СтрокаКРаспределнию = ТаблицаРаспределенияСР.Добавить();
			СтрокаКРаспределнию.Регистратор = Ссылка;
			СтрокаКРаспределнию.СуммаСНДС = -СуммоваяРазница;
			СтрокаКРаспределнию.СуммаНДС = 0;
			
			Распределение = Новый структура("СуммаСНДС");
			ИсключитьБазовый = Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,СуммаНДС");
			
			ТаблицаРаспределенияСР = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаРегистрации,Распределение,,ИсключитьБазовый);
			ТаблицаРаспределенияСР.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			Дополнение = Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
			Для каждого Строка из ТаблицаРаспределенияСР Цикл
				Строка.СуммаБезНДС = Строка.СуммаСНДС;
			КонецЦикла;//Подготовка таблицы распределения
			
			//Движения по бухгалтерскому учету
			ТаблицаПроводок = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыБухгалтерии["Хозрасчетный"], Истина);
			ТаблицаПроводокБУ = ТаблицаПроводок.Выгрузить();
			ИсключитьБазовый.Удалить("Активность");
			ИсключитьБазовый.Удалить("МоментВремени");
			ТаблицаПроводокБУ = БухгалтерскийУчет.УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(ТаблицаПроводокБУ);

			ИсключитьБазовый.Вставить("КоличествоДт");
			ИсключитьБазовый.Вставить("КоличествоКт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаДт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаКт");
			ИсключитьБазовый.Вставить("Содержание");

			СуфиксСчетаРасчетов = ?(Покупки,"Кт","Дт");
			СуфиксСчетаУчета 	= ?(Покупки,"Дт","Кт");
			Дополнение.Вставить("Содержание","Корректировка "+?(Покупки,"стоимости ","выручки ")+"по расчетам в валюте");

			//По основным проводкам БУ
			СтруктураОтбора = Новый Структура("Организация");
			СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,"КоррСчет");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"1","КоррСубконто1");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"2","КоррСубконто2");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"3","КоррСубконто3");
			СтруктураОтбора.Вставить("Счет"+СуфиксСчетаРасчетов,"СчетОплаты");
			Для каждого ВидСубконто из СчетОплаты.ВидыСубконто Цикл
				Если  ВидСубконто.ВидСубконто.Наименование = "Контрагенты" тогда
					СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"Контрагент");
				КонецЕсли;
				Если  ВидСубконто.ВидСубконто.Наименование = "Договоры" тогда
					СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"ДоговорКонтрагента");
				КонецЕсли;
			КонецЦикла;
			Если Покупки тогда
				Распределение = Новый Структура("Сумма",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
			Иначе
				Распределение = Новый Структура("Сумма","СуммаСНДС");
			Конецесли;

			ПоОсновнымПроводкам = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
			БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ПоОсновнымПроводкам);
		Иначе
			// Учет НДС при исполнении обязанностей налогового агента. Корректируются суммы БУ и НДС.
			//Подготовка таблицы распределения
			ТаблицаРаспределенияСР = Новый ТаблицаЗначений;
			ТаблицаРаспределенияСР.Колонки.Добавить("Регистратор");
			ТаблицаРаспределенияСР.Колонки.Добавить("СуммаСНДС");
			ТаблицаРаспределенияСР.Колонки.Добавить("СуммаНДС");
		
			СтрокаКРаспределению = ТаблицаРаспределенияСР.Добавить();
			СтрокаКРаспределению.Регистратор = Ссылка;
			СтрокаКРаспределению.СуммаНДС = Окр(-СуммоваяРазница*ТаблицаРегистрации.Итог("СуммаНДС")/(ТаблицаРегистрации.Итог("СуммаСНДС") - ТаблицаРегистрации.Итог("СуммаНДС")),2);
			СтрокаКРаспределению.СуммаСНДС = -СуммоваяРазница + СтрокаКРаспределению.СуммаНДС;
			
			Распределение = Новый структура("СуммаСНДС,СуммаНДС");
			ИсключитьБазовый = Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент");
			
			ТаблицаРаспределенияСР = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаРегистрации,Распределение,,ИсключитьБазовый);
			ТаблицаРаспределенияСР.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			ТаблицаРаспределенияСР.Колонки.Добавить("СчетРасчетыНДСНалоговогоАгента",Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			ТаблицаРаспределенияСР.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента, "СчетРасчетыНДСНалоговогоАгента");
			
			Дополнение = Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
			Для каждого Строка из ТаблицаРаспределенияСР Цикл
				 Строка.СуммаБезНДС = Строка.СуммаСНДС - Строка.СуммаНДС;
			КонецЦикла;//Подготовка таблицы распределения
			
			//Движения по бухгалтерскому учету
			ТаблицаПроводок = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыБухгалтерии["Хозрасчетный"], Истина);
			ТаблицаПроводокБУ = ТаблицаПроводок.Выгрузить();
			ИсключитьБазовый.Удалить("Активность");
			ИсключитьБазовый.Удалить("МоментВремени");
			ТаблицаПроводокБУ = БухгалтерскийУчет.УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(ТаблицаПроводокБУ);

			ИсключитьБазовый.Вставить("КоличествоДт");
			ИсключитьБазовый.Вставить("КоличествоКт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаДт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаКт");
			ИсключитьБазовый.Вставить("Содержание");

			СуфиксСчетаРасчетов = ?(Покупки,"Кт","Дт");
			СуфиксСчетаУчета 	= ?(Покупки,"Дт","Кт");
			Дополнение.Вставить("Содержание","Корректировка "+?(Покупки,"стоимости ","выручки ")+"по расчетам в у.е.");

			//По основным проводкам БУ
			СтруктураОтбора = Новый Структура("Организация");
			СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,"КоррСчет");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"1","КоррСубконто1");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"2","КоррСубконто2");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"3","КоррСубконто3");
			СтруктураОтбора.Вставить("Счет"+СуфиксСчетаРасчетов,"СчетОплаты");
			Для каждого ВидСубконто из СчетОплаты.ВидыСубконто Цикл
				Если  ВидСубконто.ВидСубконто.Наименование = "Контрагенты" тогда
					СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"Контрагент");
				КонецЕсли;
				Если  ВидСубконто.ВидСубконто.Наименование = "Договоры" тогда
					СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"ДоговорКонтрагента");
				КонецЕсли;
			КонецЦикла;
			Распределение = Новый Структура("Сумма",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));

			ПоОсновнымПроводкам = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
			БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ПоОсновнымПроводкам);
			
			//По НДС
			//По проводкам НДС
			Если не НДСВключенВСтоимость тогда
				// Проводка Дт 19 Кт СчетОплаты
				СтруктураОтбора = Новый Структура("Организация");
				СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,    "СчетНДС");
				СтруктураОтбора.Вставить("Счет"+СуфиксСчетаРасчетов, "СчетОплаты");
				Для каждого ВидСубконто из СчетОплаты.ВидыСубконто Цикл
					Если  ВидСубконто.ВидСубконто.Наименование = "Контрагенты" тогда
						СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"Контрагент");
					КонецЕсли;
					Если  ВидСубконто.ВидСубконто.Наименование = "Договоры" тогда
						СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"ДоговорКонтрагента");
					КонецЕсли;
				КонецЦикла;
				Дополнение.Вставить("Содержание","Корректировка НДС по расчетам в у.е.");
				Распределение = Новый Структура("Сумма","СуммаНДС");

				ПоНДС = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
				БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ПоНДС);
				
				// Проводка Дт 19 Кт 76.НА
				СтруктураОтбора = Новый Структура("Организация");
				СтруктураОтбора.Вставить("СчетДт", "СчетНДС");
				СтруктураОтбора.Вставить("СчетКт", "СчетРасчетыНДСНалоговогоАгента");
				СтруктураОтбора.Вставить("СубконтоКт1", "Контрагент");
				СтруктураОтбора.Вставить("СубконтоКт2", "ДоговорКонтрагента");
				
				Дополнение.Вставить("Содержание","Корректировка НДС по расчетам при исполнении обязанностей налогового агента");
				Распределение = Новый Структура("Сумма","СуммаНДС");

				ПоНДС = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
				БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ПоНДС);
				
				// Проводка Дт 76.НА Кт СчетОплаты
				СтруктураОтбора = Новый Структура("Организация");
				СтруктураОтбора.Вставить("СчетДт", "СчетОплаты");
				СтруктураОтбора.Вставить("СчетКт", "СчетРасчетыНДСНалоговогоАгента");
				Для каждого ВидСубконто из СчетОплаты.ВидыСубконто Цикл
					Если ВидСубконто.ВидСубконто.Наименование = "Контрагенты" тогда
						СтруктураОтбора.Вставить("СубконтоДт" + ВидСубконто.НомерСтроки,"Контрагент");
					КонецЕсли;
					Если ВидСубконто.ВидСубконто.Наименование = "Договоры" тогда
						СтруктураОтбора.Вставить("СубконтоДт"+ВидСубконто.НомерСтроки,"ДоговорКонтрагента");
					КонецЕсли;
				КонецЦикла;
				СтруктураОтбора.Вставить("СубконтоКт1", "Контрагент");
				СтруктураОтбора.Вставить("СубконтоКт2", "ДоговорКонтрагента");
				
				Дополнение.Вставить("Содержание","Корректировка НДС по расчетам при исполнении обязанностей налогового агента");
				Распределение = Новый Структура("Сумма","СуммаНДС");

				ПоНДС = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
				БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ПоНДС);
				
			КонецЕсли;
			
			Движения_НДСПредъявленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСПредъявленный"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСПредъявленный, УдаляемыеВидыРегОпераций);
			Если Движения_НДСПредъявленный <> Неопределено И Движения_НДСПредъявленный.Модифицированность() Тогда
				Движения_НДСПредъявленный.Записать();
			КонецЕсли;
						
			Движения_НДСВключенныйВСтоимость = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСВключенныйВСтоимость"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСВключенныйВСтоимость, УдаляемыеВидыРегОпераций);
			Если Движения_НДСВключенныйВСтоимость <> Неопределено И Движения_НДСВключенныйВСтоимость.Модифицированность() Тогда
				Движения_НДСВключенныйВСтоимость.Записать();
			КонецЕсли;
						
			Движения_НДСПартииТоваров = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСПартииТоваров"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСПартииТоваров, УдаляемыеВидыРегОпераций);
			Если Движения_НДСПартииТоваров <> Неопределено И Движения_НДСПартииТоваров.Модифицированность() Тогда
				Движения_НДСПартииТоваров.Записать();
			КонецЕсли;
						
			Движения_НДСпоОСиНМА = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСпоОСиНМА"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСпоОСиНМА, УдаляемыеВидыРегОпераций);
			Если Движения_НДСпоОСиНМА <> Неопределено И Движения_НДСпоОСиНМА.Модифицированность() Тогда
				Движения_НДСпоОСиНМА.Записать();
			КонецЕсли;
						
			Движения_НДСПредъявленныйРеализация0 = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСПредъявленныйРеализация0"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСПредъявленныйРеализация0, УдаляемыеВидыРегОпераций);
			Если Движения_НДСПредъявленныйРеализация0 <> Неопределено И Движения_НДСПредъявленныйРеализация0.Модифицированность() Тогда
				Движения_НДСПредъявленныйРеализация0.Записать();
			КонецЕсли;
						
			Движения_НДСКосвенныеРасходы = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСКосвенныеРасходы"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСКосвенныеРасходы, УдаляемыеВидыРегОпераций);
			Если Движения_НДСКосвенныеРасходы <> Неопределено И Движения_НДСКосвенныеРасходы.Модифицированность() Тогда
				Движения_НДСКосвенныеРасходы.Записать();
			КонецЕсли;
						
			Движения_НДСНезавершенноеПроизводство = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСНезавершенноеПроизводство"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСНезавершенноеПроизводство, УдаляемыеВидыРегОпераций);
			Если Движения_НДСНезавершенноеПроизводство <> Неопределено И Движения_НДСНезавершенноеПроизводство.Модифицированность() Тогда
				Движения_НДСНезавершенноеПроизводство.Записать();
			КонецЕсли;
			УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураПараметров, СуммоваяРазницаПоДокументам, Истина, Истина);
				
		КонецЕсли;
		
		//По НУ
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			//Распределение по проводкам НУ
			ПроводкиНУ = СтруктураПараметров.ПроводкиНУ;
			ТаблицаПроводок = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыБухгалтерии["Налоговый"], Истина);
			ТаблицаПроводокНУ = ТаблицаПроводок.Выгрузить();
			ТаблицаПроводокНУ = БухгалтерскийУчет.УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(ТаблицаПроводокНУ);
			
			ИсключитьБазовый.Вставить("КоличествоДт");
			ИсключитьБазовый.Вставить("КоличествоКт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаДт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаКт");
			
			СуфиксСчетаРасчетов = ?(Покупки,"Кт","Дт");
			СуфиксСчетаУчета 	= ?(Покупки,"Дт","Кт");
			
			//По основным проводкам
			СтруктураОтбора = Новый Структура("Организация");
			СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,"СчетУчетаНУ");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"1","СубконтоНУ1");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"2","СубконтоНУ2");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"3","СубконтоНУ3");
			Распределение = Новый Структура("Сумма",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
			Дополнение.Вставить("Содержание","Корректировка "+?(Покупки,"стоимости ","выручки ")+"по расчетам в валюте");

			ПоПроводкамНУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокНУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
			СчетПВ = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			Для каждого ПроводкаНУ Из ПоПроводкамНУ Цикл
				Если ЗначениеЗаполнено(ПроводкаНУ.СчетДт) И ПроводкаНУ.СчетДт <> СчетПВ И НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
					ПроводкаНУ.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
				КонецЕсли;
				Если ЗначениеЗаполнено(ПроводкаНУ.СчетКт) И ПроводкаНУ.СчетКт <> СчетПВ И НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
					ПроводкаНУ.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
				КонецЕсли;
			КонецЦикла;
			БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиНУ, ПоПроводкамНУ);
		КонецЕсли;//По НУ
		
		Если Продажи Тогда 
			Если ИспользоватьРасширеннуюАналитику Тогда
			
				СтруктураСумм = Новый Структура;
				СтруктураСумм.Вставить("Стоимость",         -СуммоваяРазница);
				СтруктураСумм.Вставить("СтоимостьНУ",       0);
				СтруктураСумм.Вставить("Корректировка",     -СуммоваяРазница);
				
				УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоПереоценкеТоваровРеализация(Ссылка, СтруктураСумм);
			КонецЕсли;
			
			Возврат СтруктураДвижений;
		КонецЕсли;
		
		//Для покупок - дополнительные движения
		
		Если ИспользоватьРасширеннуюАналитику Тогда
		
			СтруктураСумм = Новый Структура;
			СтруктураСумм.Вставить("Стоимость",         -СуммоваяРазница);
			Если ОценкаДоходовРасходовПоКурсуАвансов Тогда
				СтруктураСумм.Вставить("СтоимостьНУ",       -СуммоваяРазница);
				СтруктураСумм.Вставить("ПостояннаяРазница", 0);
			Иначе
				СтруктураСумм.Вставить("СтоимостьНУ",       0);
				СтруктураСумм.Вставить("ПостояннаяРазница", -СуммоваяРазница);
			КонецЕсли;
			
			УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоПереоценкеТоваров(Ссылка, СтруктураСумм);
		
		Иначе
		
			//По партиям товаров БУ
			ДвиженияПоПартиямБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет, Истина);
			Если ДвиженияПоПартиямБУ <> Неопределено И ДвиженияПоПартиямБУ.Количество() > 0 Тогда
				БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияПоПартиямБУ,УдаляемыеВидыРегОпераций);
				СтруктураДвижений.Вставить("ДвиженияПоПартиямБУ",ДвиженияПоПартиямБУ);
				
				Распределение	= Новый Структура("Стоимость",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
				Отбор			= Новый Структура("Номенклатура,СчетУчета",,"КоррСчет");
				Исключить		= Новый Структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество");
				Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
				ПоПартиямБУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияПоПартиямБУ,Распределение,Отбор,Исключить,Дополнение);
				БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияПоПартиямБУ, ПоПартиямБУ);
			КонецЕсли;//По партиям товаров БУ
			
			//По партиям товаров НУ
			Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
				ДвиженияПоПартиямНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет,Истина);
				Если ДвиженияПоПартиямНУ <> Неопределено И ДвиженияПоПартиямНУ.Количество() > 0 Тогда
					БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияПоПартиямНУ,УдаляемыеВидыРегОпераций);
					СтруктураДвижений.Вставить("ДвиженияПоПартиямНУ",ДвиженияПоПартиямНУ);
					
					Распределение	= Новый Структура("Стоимость", ?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
					Отбор			= Новый Структура("Номенклатура,СчетУчета",,"СчетУчетаНУ");
					Исключить		= Новый Структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница,ПостояннаяРазница");
					Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
					ПоПартиямНУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияПоПартиямНУ,Распределение,Отбор,Исключить,Дополнение);
                    Если НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
                        ПоПартиямНУ.Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
                        ПоПартиямНУ.ЗагрузитьКолонку(ПоПартиямНУ.ВыгрузитьКолонку("Стоимость"), "ПостояннаяРазница");
                        ПоПартиямНУ.ЗаполнитьЗначения(0, "Стоимость");
                    КонецЕсли;
					БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияПоПартиямНУ, ПоПартиямНУ);
				КонецЕсли;
			КонецЕсли;//По партиям товаров НУ
			
			//По регистрам затрат незавершенного производства, брака в производстве, прочих затрат БУ,НУ
			Если Метаданные.РегистрыНакопления.Найти("БракВПроизводствеБухгалтерскийУчет") 			<> Неопределено
				И Метаданные.РегистрыНакопления.Найти("НезавершенноеПроизводствоБухгалтерскийУчет") <> Неопределено
				И Метаданные.РегистрыНакопления.Найти("ЗатратыБухгалтерскийУчет") 					<> Неопределено		Тогда

				БракБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет,Истина);
				ЕстьБракБУ = (БракБУ <> Неопределено);
				
				ТаблицаРаспределенияСР.Колонки.Добавить("НЗПБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ТаблицаРаспределенияСР.Колонки.Добавить("БракБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ТаблицаРаспределенияСР.Колонки.Добавить("ЗатрБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				
				Для каждого Строка из ТаблицаРаспределенияСР Цикл
					Если НЕ ЗначениеЗаполнено(Строка["СтатьяЗатрат"]) тогда
						Продолжить;
					КонецЕсли;
					СтатьяЗатрат = Строка["СтатьяЗатрат"];
					Если Не УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(СтатьяЗатрат) Тогда
						Продолжить;
					КонецЕсли;
					//По бухгалтерскому учету 
					Если СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
						Строка["НЗПБУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
					ИначеЕсли ЕстьБракБУ И СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
						Строка["БракБУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
					Иначе
						Строка["ЗатрБУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
					КонецЕсли;
				КонецЦикла;	
				
				//Незавершенное производство БУ
				Если ТаблицаРаспределенияСР.Итог("НЗПБУ") <> 0 Тогда
					ДвиженияНЗПБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.НезавершенноеПроизводствоБухгалтерскийУчет,Истина);
					Если ДвиженияНЗПБУ <> Неопределено И ДвиженияНЗПБУ.Количество() > 0 Тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНЗПБУ,УдаляемыеВидыРегОпераций);
						СтруктураДвижений.Вставить("ДвиженияНЗПБУ",ДвиженияНЗПБУ);
						
						Распределение	= Новый Структура("Стоимость","НЗПБУ");
						Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"КоррСчет");// ,Затрата ,,,"Номенклатура"
						Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
						Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
						Корр_НЗП_БУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияНЗПБУ,Распределение,Отбор,Исключить,Дополнение);
						БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияНЗПБУ, Корр_НЗП_БУ);
					КонецЕсли;	
				КонецЕсли;//Незавершенное производство БУ
				
				//Брак в производстве БУ
				Если ТаблицаРаспределенияСР.Итог("БракБУ") <> 0 Тогда
					ДвиженияБракБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет,Истина);
					Если ДвиженияБракБУ <> Неопределено И ДвиженияБракБУ.Количество() > 0 Тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияБракБУ,УдаляемыеВидыРегОпераций);
						СтруктураДвижений.Вставить("ДвиженияБракБУ",ДвиженияБракБУ);
						
						Распределение	= Новый Структура("Сумма","БракБУ");
						Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"КоррСчет");
						Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
						Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
						Корр_Брак_БУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияБракБУ,Распределение,Отбор,Исключить,Дополнение);
						БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияБракБУ, Корр_Брак_БУ);
					КонецЕсли;	
				КонецЕсли;//Брак в производстве БУ
				
				//Затраты БУ
				Если ТаблицаРаспределенияСР.Итог("ЗатрБУ") <> 0 Тогда
					ДвиженияЗатрБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ЗатратыБухгалтерскийУчет,Истина);
					Если ДвиженияЗатрБУ <> Неопределено И ДвиженияЗатрБУ.Количество() > 0 Тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияЗатрБУ,УдаляемыеВидыРегОпераций);
						СтруктураДвижений.Вставить("ДвиженияЗатрБУ",ДвиженияЗатрБУ);
					
						Распределение	= Новый Структура("Сумма","ЗатрБУ");
						Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"КоррСчет");
						Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
						Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
						Корр_Затр_БУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияЗатрБУ,Распределение,Отбор,Исключить,Дополнение);
						БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияЗатрБУ, Корр_Затр_БУ);
					КонецЕсли;	
				КонецЕсли;//Затраты БУ
				
				Если СтруктураПараметров.ОтражатьВНалоговомУчете 
					И Метаданные.РегистрыНакопления.Найти("БракВПроизводствеНалоговыйУчет") 			<> Неопределено
					И Метаданные.РегистрыНакопления.Найти("НезавершенноеПроизводствоНалоговыйУчет") 	<> Неопределено
					И Метаданные.РегистрыНакопления.Найти("ЗатратыНалоговыйУчет") 						<> Неопределено 	Тогда
					//Незавершенное производство НУ
					Если ТаблицаРаспределенияСР.Итог("НЗПБУ") <> 0 Тогда
						ДвиженияНЗПНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.НезавершенноеПроизводствоНалоговыйУчет,Истина);
						Если ДвиженияНЗПНУ <> Неопределено И ДвиженияНЗПНУ.Количество() > 0 Тогда
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНЗПНУ,УдаляемыеВидыРегОпераций);
							СтруктураДвижений.Вставить("ДвиженияНЗПНУ",ДвиженияНЗПНУ);
						
							Распределение	= Новый Структура("Стоимость", "НЗПБУ");
							Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"СчетУчетаНУ");// ,Затрата ,,,"Номенклатура"
							Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ПостояннаяРазница,ВременнаяРазница");
							Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
							Корр_НЗП_НУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияНЗПНУ,Распределение,Отбор,Исключить,Дополнение);
                            Если НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
                                Корр_НЗП_НУ.Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
                                Корр_НЗП_НУ.ЗагрузитьКолонку(Корр_НЗП_НУ.ВыгрузитьКолонку("Стоимость"), "ПостояннаяРазница");
                                Корр_НЗП_НУ.ЗаполнитьЗначения(0, "Стоимость");
                            КонецЕсли;
							БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияНЗПНУ, Корр_НЗП_НУ);
						КонецЕсли;	
					КонецЕсли;//Незавершенное производство НУ
					
					//Брак в производстве НУ
					Если ТаблицаРаспределенияСР.Итог("БракБУ") <> 0 Тогда
						ДвиженияБракНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеНалоговыйУчет,Истина);
						Если ДвиженияБракНУ <> Неопределено И ДвиженияБракНУ.Количество() > 0 Тогда
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияБракНУ,УдаляемыеВидыРегОпераций);
							СтруктураДвижений.Вставить("ДвиженияБракНУ",ДвиженияБракНУ);
						
							Распределение	= Новый Структура("Сумма", "БракБУ");
							Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"СчетУчетаНУ");
							Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ПостояннаяРазница,ВременнаяРазница");
							Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
							Корр_Брак_НУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияБракНУ,Распределение,Отбор,Исключить,Дополнение);
                            Если НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
                                Корр_Брак_НУ.Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
                                Корр_Брак_НУ.ЗагрузитьКолонку(Корр_Брак_НУ.ВыгрузитьКолонку("Сумма"), "ПостояннаяРазница");
                                Корр_Брак_НУ.ЗаполнитьЗначения(0, "Сумма");
                            КонецЕсли;
							БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияБракНУ, Корр_Брак_НУ);
						КонецЕсли;	
					КонецЕсли;//Брак в производстве НУ
					
					//Затраты НУ
					Если ТаблицаРаспределенияСР.Итог("ЗатрБУ") <> 0 Тогда
						ДвиженияЗатрНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ЗатратыНалоговыйУчет,Истина);
						Если ДвиженияЗатрНУ <> Неопределено И ДвиженияЗатрНУ.Количество() > 0 Тогда
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияЗатрНУ,УдаляемыеВидыРегОпераций);
							СтруктураДвижений.Вставить("ДвиженияЗатрНУ",ДвиженияЗатрНУ);
							
							Распределение	= Новый Структура("Сумма", "ЗатрБУ");
							Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"СчетУчетаНУ");
							Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ПостояннаяРазница,ВременнаяРазница");
							Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
							Корр_Затр_НУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияЗатрНУ,Распределение,Отбор,Исключить,Дополнение);
                            Если НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
                                Корр_Затр_НУ.Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
                                Корр_Затр_НУ.ЗагрузитьКолонку(Корр_Затр_НУ.ВыгрузитьКолонку("Сумма"), "ПостояннаяРазница");
                                Корр_Затр_НУ.ЗаполнитьЗначения(0, "Сумма");
                            КонецЕсли;
							БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияЗатрНУ, Корр_Затр_НУ);
						КонецЕсли;	
					КонецЕсли;//Затраты НУ
					
				КонецЕсли;//По регистрам затрат незавершенного производства, брака в производстве, прочих затрат БУ,НУ
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		// Расчеты в условных единицах. Корректируются все суммы в БУ, НУ, НДС
		
		//Подготовка таблицы распределения
		ТаблицаРаспределенияСР = Новый ТаблицаЗначений;
		ТаблицаРаспределенияСР.Колонки.Добавить("Регистратор");
		ТаблицаРаспределенияСР.Колонки.Добавить("СуммаСНДС");
		ТаблицаРаспределенияСР.Колонки.Добавить("СуммаНДС");
	
		СтрокаКРаспределнию = ТаблицаРаспределенияСР.Добавить();
		СтрокаКРаспределнию.Регистратор = Ссылка;
		СтрокаКРаспределнию.СуммаСНДС = -СуммоваяРазница;
		СтрокаКРаспределнию.СуммаНДС = Окр(-СуммоваяРазница*ТаблицаРегистрации.Итог("СуммаНДС")/ТаблицаРегистрации.Итог("СуммаСНДС"),2);
		
		Распределение = Новый структура("СуммаСНДС,СуммаНДС");
		ИсключитьБазовый = Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент");
		
		ТаблицаРаспределенияСР = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаРегистрации,Распределение,,ИсключитьБазовый);
		ТаблицаРаспределенияСР.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		Дополнение = Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
		Для каждого Строка из ТаблицаРаспределенияСР Цикл
			 Строка.СуммаБезНДС = Строка.СуммаСНДС - Строка.СуммаНДС;
		КонецЦикла;//Подготовка таблицы распределения
		
		Если Продажи Тогда
			ТаблицаРаспределенияСР.Колонки.Добавить("КорсчетНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			ТаблицаРаспределенияСР.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДС, "КорсчетНДС");
		КонецЕсли;

		//Движения по бухгалтерскому учету
		ТаблицаПроводок = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыБухгалтерии["Хозрасчетный"], Истина);
		ТаблицаПроводокБУ = ТаблицаПроводок.Выгрузить();
		ИсключитьБазовый.Удалить("Активность");
		ИсключитьБазовый.Удалить("МоментВремени");
		ТаблицаПроводокБУ = БухгалтерскийУчет.УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(ТаблицаПроводокБУ);

		ИсключитьБазовый.Вставить("КоличествоДт");
		ИсключитьБазовый.Вставить("КоличествоКт");
		ИсключитьБазовый.Вставить("ВалютнаяСуммаДт");
		ИсключитьБазовый.Вставить("ВалютнаяСуммаКт");
		ИсключитьБазовый.Вставить("Содержание");

		СуфиксСчетаРасчетов = ?(Покупки,"Кт","Дт");
		СуфиксСчетаУчета 	= ?(Покупки,"Дт","Кт");
		Дополнение.Вставить("Содержание","Корректировка "+?(Покупки,"стоимости ","выручки ")+"по расчетам в у.е.");

		//По основным проводкам БУ
		СтруктураОтбора = Новый Структура("Организация");
		СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,"КоррСчет");
		СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"1","КоррСубконто1");
		СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"2","КоррСубконто2");
		СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"3","КоррСубконто3");
		СтруктураОтбора.Вставить("Счет"+СуфиксСчетаРасчетов,"СчетОплаты");
		Для каждого ВидСубконто из СчетОплаты.ВидыСубконто Цикл
			Если  ВидСубконто.ВидСубконто.Наименование = "Контрагенты" тогда
				СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"Контрагент");
			КонецЕсли;
			Если  ВидСубконто.ВидСубконто.Наименование = "Договоры" тогда
				СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"ДоговорКонтрагента");
			КонецЕсли;
		КонецЦикла;
		Если Покупки тогда
			Распределение = Новый Структура("Сумма",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
		Иначе
			Распределение = Новый Структура("Сумма","СуммаСНДС");
		Конецесли;

		ПоОсновнымПроводкам = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
		БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ	, ПоОсновнымПроводкам);
		
		//По НДС
		//По проводкам НДС
		Если не НДСВключенВСтоимость тогда
			Если Покупки тогда
				СтруктураОтбора = Новый Структура("Организация");
				СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,    "СчетНДС");
				СтруктураОтбора.Вставить("Счет"+СуфиксСчетаРасчетов, "СчетОплаты");
				Для каждого ВидСубконто из СчетОплаты.ВидыСубконто Цикл
					Если  ВидСубконто.ВидСубконто.Наименование = "Контрагенты" тогда
						СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"Контрагент");
					КонецЕсли;
					Если  ВидСубконто.ВидСубконто.Наименование = "Договоры" тогда
						СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"ДоговорКонтрагента");
					КонецЕсли;
				КонецЦикла;
			Иначе
				СтруктураОтбора = Новый Структура("Организация");
				СтруктураОтбора.Вставить("Счет"+СуфиксСчетаРасчетов,         "СчетНДС");
				СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+"1", "СубконтоНДС1");
				СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+"2", "СубконтоНДС2");
				СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+"3", "СубконтоНДС3");
				СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,            "КорсчетНДС");
			Конецесли;
			Дополнение.Вставить("Содержание","Корректировка НДС по расчетам в у.е.");
			Распределение = Новый Структура("Сумма","СуммаНДС");

			ПоНДС = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
			БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ПоНДС);
		КонецЕсли;
		
		//Удалим из СтруктураПараметров элемент "ПроводкиНУ", "Налоговый", чтобы избежать передачи мутабельного значения в модуль УчетНДСФормированиеДвижений
		ВремПроводкиНУ = неопределено;
		ВремНалоговый = неопределено;

		Если СтруктураПараметров.Свойство("ПроводкиНУ") Тогда
			ВремПроводкиНУ = СтруктураПараметров.ПроводкиНУ;
			СтруктураПараметров.Удалить("ПроводкиНУ");
		КонецЕсли;
	    Если СтруктураПараметров.Свойство("Налоговый") Тогда
			ВремНалоговый = СтруктураПараметров.Налоговый;
			СтруктураПараметров.Удалить("Налоговый");
		КонецЕсли;

		Если Покупки Тогда
			Движения_НДСПредъявленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСПредъявленный"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСПредъявленный, УдаляемыеВидыРегОпераций);
			Если Движения_НДСПредъявленный <> Неопределено И Движения_НДСПредъявленный.Модифицированность() Тогда
				Движения_НДСПредъявленный.Записать();
			КонецЕсли;
						
			Движения_НДСВключенныйВСтоимость = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСВключенныйВСтоимость"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСВключенныйВСтоимость, УдаляемыеВидыРегОпераций);
			Если Движения_НДСВключенныйВСтоимость <> Неопределено И Движения_НДСВключенныйВСтоимость.Модифицированность() Тогда
				Движения_НДСВключенныйВСтоимость.Записать();
			КонецЕсли;
						
			Движения_НДСПартииТоваров = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСПартииТоваров"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСПартииТоваров, УдаляемыеВидыРегОпераций);
			Если Движения_НДСПартииТоваров <> Неопределено И Движения_НДСПартииТоваров.Модифицированность() Тогда
				Движения_НДСПартииТоваров.Записать();
			КонецЕсли;
						
			Движения_НДСпоОСиНМА = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСпоОСиНМА"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСпоОСиНМА, УдаляемыеВидыРегОпераций);
			Если Движения_НДСпоОСиНМА <> Неопределено И Движения_НДСпоОСиНМА.Модифицированность() Тогда
				Движения_НДСпоОСиНМА.Записать();
			КонецЕсли;
						
			Движения_НДСПредъявленныйРеализация0 = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСПредъявленныйРеализация0"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСПредъявленныйРеализация0, УдаляемыеВидыРегОпераций);
			Если Движения_НДСПредъявленныйРеализация0 <> Неопределено И Движения_НДСПредъявленныйРеализация0.Модифицированность() Тогда
				Движения_НДСПредъявленныйРеализация0.Записать();
			КонецЕсли;
						
			Движения_НДСКосвенныеРасходы = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСКосвенныеРасходы"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСКосвенныеРасходы, УдаляемыеВидыРегОпераций);
			Если Движения_НДСКосвенныеРасходы <> Неопределено И Движения_НДСКосвенныеРасходы.Модифицированность() Тогда
				Движения_НДСКосвенныеРасходы.Записать();
			КонецЕсли;
						
			Движения_НДСНезавершенноеПроизводство = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСНезавершенноеПроизводство"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСНезавершенноеПроизводство, УдаляемыеВидыРегОпераций);
			Если Движения_НДСНезавершенноеПроизводство <> Неопределено И Движения_НДСНезавершенноеПроизводство.Модифицированность() Тогда
				Движения_НДСНезавершенноеПроизводство.Записать();
			КонецЕсли;
			УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураПараметров, СуммоваяРазницаПоДокументам, Истина, Истина);
				
		ИначеЕсли Продажи Тогда
			ДвиженияНДСНачисленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСНачисленный"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСНачисленный, УдаляемыеВидыРегОпераций);
			Если ДвиженияНДСНачисленный <> Неопределено И ДвиженияНДСНачисленный.Модифицированность() Тогда
				ДвиженияНДСНачисленный.Записать();
			КонецЕсли;

			Движения_НДСРеализация0 = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСРеализация0"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСРеализация0, УдаляемыеВидыРегОпераций);
			Если Движения_НДСРеализация0 <> Неопределено И Движения_НДСРеализация0.Модифицированность() Тогда
				Движения_НДСРеализация0.Записать();
			КонецЕсли;
			УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Реализация(СтруктураПараметров, СуммоваяРазницаПоДокументам, Истина, Истина);
			
		КонецЕсли;
		
		//Добавим в СтруктураПараметров удаленный ранее элемент ПроводкиНУ, Налоговый
		Если ВремПроводкиНУ <> неопределено Тогда
			СтруктураПараметров.Вставить("ПроводкиНУ",ВремПроводкиНУ);
			ВремПроводкиНУ = неопределено;
		КонецЕсли;
	    Если ВремНалоговый <> неопределено Тогда
			СтруктураПараметров.Вставить("Налоговый",ВремНалоговый);
			ВремНалоговый = неопределено;
		КонецЕсли;
		
		//По НУ
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			//Распределение по проводкам НУ
			ПроводкиНУ = СтруктураПараметров.проводкиНУ;
			ТаблицаПроводок = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыБухгалтерии["Налоговый"], Истина);
			ТаблицаПроводокНУ = ТаблицаПроводок.Выгрузить();
			ТаблицаПроводокНУ = БухгалтерскийУчет.УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(ТаблицаПроводокНУ);
			
			ИсключитьБазовый.Вставить("КоличествоДт");
			ИсключитьБазовый.Вставить("КоличествоКт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаДт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаКт");
			
			СуфиксСчетаРасчетов = ?(Покупки,"Кт","Дт");
			СуфиксСчетаУчета 	= ?(Покупки,"Дт","Кт");
			
			//По основным проводкам
			СтруктураОтбора = Новый Структура("Организация");
			СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,"СчетУчетаНУ");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"1","СубконтоНУ1");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"2","СубконтоНУ2");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"3","СубконтоНУ3");
			Распределение = Новый Структура("Сумма",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
			Дополнение.Вставить("Содержание","Корректировка "+?(Покупки,"стоимости ","выручки ")+"по расчетам в у.е.");

			ПоПроводкамНУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокНУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
			БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиНУ	, ПоПроводкамНУ);
		КонецЕсли;//По НУ
		
		Если Продажи Тогда 
			Возврат СтруктураДвижений;
		КонецЕсли;
		
		//Для покупок - дополнительные движения
		
		Если ИспользоватьРасширеннуюАналитику Тогда
		
			СтруктураСумм = Новый Структура;
			СуммаРаспределения = ?(НДСВключенВСтоимость, ТаблицаРаспределенияСР.Итог("СуммаСНДС"), ТаблицаРаспределенияСР.Итог("СуммаБезНДС"));
			СтруктураСумм.Вставить("Стоимость",         СуммаРаспределения);
			СтруктураСумм.Вставить("СтоимостьНУ",       СуммаРаспределения);
			СтруктураСумм.Вставить("ПостояннаяРазница", 0);
			
			УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоПереоценкеТоваров(Ссылка, СтруктураСумм);
		
		Иначе
			
			//По партиям товаров БУ
			ДвиженияПоПартиямБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет, Истина);
			Если ДвиженияПоПартиямБУ <> Неопределено И ДвиженияПоПартиямБУ.Количество() > 0 Тогда
				БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияПоПартиямБУ,УдаляемыеВидыРегОпераций);
				СтруктураДвижений.Вставить("ДвиженияПоПартиямБУ",ДвиженияПоПартиямБУ);
				
				Распределение	= Новый Структура("Стоимость",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
				Отбор			= Новый Структура("Номенклатура,СчетУчета",,"КоррСчет"); // ,Склад
				Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество");
				Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
				ПоПартиямБУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияПоПартиямБУ,Распределение,Отбор,Исключить,Дополнение);
				БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияПоПартиямБУ, ПоПартиямБУ);
			КонецЕсли;//По партиям товаров БУ
			
			//По партиям товаров НУ
			Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
				ДвиженияПоПартиямНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет,Истина);
				Если ДвиженияПоПартиямНУ <> Неопределено И ДвиженияПоПартиямНУ.Количество() > 0 Тогда
					БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияПоПартиямНУ,УдаляемыеВидыРегОпераций);
					СтруктураДвижений.Вставить("ДвиженияПоПартиямНУ",ДвиженияПоПартиямНУ);
					
			        ТаблицаРаспределенияСР.Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ТаблицаРаспределенияСР.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					Для каждого Строка из ТаблицаРаспределенияСР цикл
						Если НЕ ЗначениеЗаполнено(Строка["СтатьяЗатрат"]) тогда
							Строка["Стоимость"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
						ИначеЕсли Строка["СтатьяЗатрат"].ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения тогда
							Строка["ПостояннаяРазница"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
						Иначе
							Строка["Стоимость"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
						КонецЕсли;
					КонецЦикла;
					Распределение	= Новый Структура("Стоимость,ПостояннаяРазница");
					Отбор			= Новый Структура("Номенклатура,СчетУчета",,"СчетУчетаНУ");
					Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
					Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
					ПоПартиямНУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияПоПартиямНУ,Распределение,Отбор,Исключить,Дополнение);
					БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияПоПартиямНУ, ПоПартиямНУ);
					ТаблицаРаспределенияСР.Колонки.Удалить("Стоимость");
					ТаблицаРаспределенияСР.Колонки.Удалить("ПостояннаяРазница");
				КонецЕсли;
			КонецЕсли;//По партиям товаров НУ
			
			//По регистрам затрат незавершенного производства, брака в производстве, прочих затрат БУ,НУ
			Если Метаданные.РегистрыНакопления.Найти("БракВПроизводствеБухгалтерскийУчет") 			<> Неопределено
				И Метаданные.РегистрыНакопления.Найти("БракВПроизводствеНалоговыйУчет") 			<> Неопределено
				И Метаданные.РегистрыНакопления.Найти("НезавершенноеПроизводствоБухгалтерскийУчет") <> Неопределено
				И Метаданные.РегистрыНакопления.Найти("НезавершенноеПроизводствоНалоговыйУчет") 	<> Неопределено
				И Метаданные.РегистрыНакопления.Найти("ЗатратыБухгалтерскийУчет") 					<> Неопределено
				И Метаданные.РегистрыНакопления.Найти("ЗатратыНалоговыйУчет") 						<> Неопределено Тогда

				//По регистрам затрат незавершенного производства, брака в производстве, прочих затрат БУ,НУ
				БракБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет,Истина);
				ЕстьБракБУ = (БракБУ <> Неопределено);
				
				ТаблицаРаспределенияСР.Колонки.Добавить("НЗПБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ТаблицаРаспределенияСР.Колонки.Добавить("БракБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ТаблицаРаспределенияСР.Колонки.Добавить("ЗатрБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				
				Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
					БракНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеНалоговыйУчет,Истина);
					ТаблицаРаспределенияСР.Колонки.Добавить("НЗПНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ТаблицаРаспределенияСР.Колонки.Добавить("НЗПНУПР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ТаблицаРаспределенияСР.Колонки.Добавить("БракНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ТаблицаРаспределенияСР.Колонки.Добавить("БракНУПР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ТаблицаРаспределенияСР.Колонки.Добавить("ЗатрНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ТаблицаРаспределенияСР.Колонки.Добавить("ЗатрНУПР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ЕстьБракНУ = (БракНУ <> Неопределено);
				КонецЕсли;

				Для каждого Строка из ТаблицаРаспределенияСР Цикл
					
					СтатьяЗатрат = Строка.СтатьяЗатрат;
					Если НЕ ЗначениеЗаполнено(СтатьяЗатрат) тогда
						Продолжить;
					КонецЕсли;
					Если Не УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(СтатьяЗатрат) Тогда
						Продолжить;
					КонецЕсли;
					
					//По бухгалтерскому учету 
					Если СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
						Строка["НЗПБУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
					ИначеЕсли ЕстьБракБУ И СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
						Строка["БракБУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
					Иначе
						Строка["ЗатрБУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
					КонецЕсли;
					
					//По налоговому учету
					Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
						СчетЗатратНУ = Строка["СчетУчетаНУ"];
						Если СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
						    Если СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
						 		Строка["НЗПНУПР"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
							Иначе
								Строка["НЗПНУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
							КонецЕсли;
						ИначеЕсли ЕстьБракНУ И СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			 			    Если СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
						 		Строка["БракНУПР"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
							Иначе
								Строка["БракНУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
							КонецЕсли;
			 			ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения
							  ИЛИ СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы
							  ИЛИ СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
							  ИЛИ СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
						    Если СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
						 		Строка["ЗатрНУПР"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
							Иначе
								Строка["ЗатрНУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;	
				
				//Незавершенное производство БУ
				Если ТаблицаРаспределенияСР.Итог("НЗПБУ") <> 0 Тогда
					ДвиженияНЗПБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.НезавершенноеПроизводствоБухгалтерскийУчет,Истина);
					Если ДвиженияНЗПБУ <> Неопределено И ДвиженияНЗПБУ.Количество() > 0 Тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНЗПБУ,УдаляемыеВидыРегОпераций);
						СтруктураДвижений.Вставить("ДвиженияНЗПБУ",ДвиженияНЗПБУ);
						
						Распределение	= Новый Структура("Стоимость","НЗПБУ");
						Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"КоррСчет");
						Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
						Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
						Корр_НЗП_БУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияНЗПБУ,Распределение,Отбор,Исключить,Дополнение);
						БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияНЗПБУ, Корр_НЗП_БУ);
					КонецЕсли;	
				КонецЕсли;//Незавершенное производство БУ
				
				//Брак в производстве БУ
				Если ТаблицаРаспределенияСР.Итог("БракБУ") <> 0 Тогда
					ДвиженияБракБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет,Истина);
					Если ДвиженияБракБУ <> Неопределено И ДвиженияБракБУ.Количество() > 0 Тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияБракБУ,УдаляемыеВидыРегОпераций);
						СтруктураДвижений.Вставить("ДвиженияБракБУ",ДвиженияБракБУ);
						
						Распределение	= Новый Структура("Сумма","БракБУ");
						Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"КоррСчет");
						Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
						Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
						Корр_Брак_БУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияБракБУ,Распределение,Отбор,Исключить,Дополнение);
						БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияБракБУ, Корр_Брак_БУ);
					КонецЕсли;	
				КонецЕсли;//Брак в производстве БУ
				
				//Затраты БУ
				Если ТаблицаРаспределенияСР.Итог("ЗатрБУ") <> 0 Тогда
					ДвиженияЗатрБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ЗатратыБухгалтерскийУчет,Истина);
					Если ДвиженияЗатрБУ <> Неопределено И ДвиженияЗатрБУ.Количество() > 0 Тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияЗатрБУ,УдаляемыеВидыРегОпераций);
						СтруктураДвижений.Вставить("ДвиженияЗатрБУ",ДвиженияЗатрБУ);
					
						Распределение	= Новый Структура("Сумма","ЗатрБУ");
						Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"КоррСчет");
						Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
						Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
						Корр_Затр_БУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияЗатрБУ,Распределение,Отбор,Исключить,Дополнение);
						БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияЗатрБУ, Корр_Затр_БУ);
					КонецЕсли;	
				КонецЕсли;//Затраты БУ
				
				Если СтруктураПараметров.ОтражатьВНалоговомУчете Тогда
					
					//Незавершенное производство НУ
					Если ТаблицаРаспределенияСР.Итог("НЗПНУ") <> 0 ИЛИ ТаблицаРаспределенияСР.Итог("НЗПНУПР") <> 0 Тогда
						ДвиженияНЗПНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.НезавершенноеПроизводствоНалоговыйУчет,Истина);
						Если ДвиженияНЗПНУ <> Неопределено И ДвиженияНЗПНУ.Количество() > 0 Тогда
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНЗПНУ,УдаляемыеВидыРегОпераций);
							СтруктураДвижений.Вставить("ДвиженияНЗПНУ",ДвиженияНЗПНУ);
						
							Распределение	= Новый Структура("Стоимость,ПостояннаяРазница","НЗПНУ","НЗПНУПР");
							Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"СчетУчетаНУ");// ,Затрата ,,,"Номенклатура"
							Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
							Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
							Корр_НЗП_НУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияНЗПНУ,Распределение,Отбор,Исключить,Дополнение);
							БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияНЗПНУ, Корр_НЗП_НУ);
						КонецЕсли;	
					КонецЕсли;//Незавершенное производство НУ
					
					//Брак в производстве НУ
					Если ТаблицаРаспределенияСР.Итог("БракНУ") <> 0 ИЛИ ТаблицаРаспределенияСР.Итог("БракНУПР") <> 0 Тогда
						ДвиженияБракНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеНалоговыйУчет,Истина);
						Если ДвиженияБракНУ <> Неопределено И ДвиженияБракНУ.Количество() > 0 Тогда
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияБракНУ,УдаляемыеВидыРегОпераций);
							СтруктураДвижений.Вставить("ДвиженияБракНУ",ДвиженияБракНУ);
					
							Распределение	= Новый Структура("Сумма,ПостояннаяРазница","БракНУ","БракНУПР");
							Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"СчетУчетаНУ");
							Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
							Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
							Корр_Брак_НУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияБракНУ,Распределение,Отбор,Исключить,Дополнение);
							БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияБракНУ, Корр_Брак_НУ);
						КонецЕсли;	
					КонецЕсли;//Брак в производстве НУ
					
					//Затраты НУ
					Если ТаблицаРаспределенияСР.Итог("ЗатрНУ") <> 0 ИЛИ ТаблицаРаспределенияСР.Итог("ЗатрНУПР") <> 0 Тогда
						ДвиженияЗатрНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ЗатратыНалоговыйУчет,Истина);
						Если ДвиженияЗатрНУ <> Неопределено И ДвиженияЗатрНУ.Количество() > 0 Тогда
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияЗатрНУ,УдаляемыеВидыРегОпераций);
							СтруктураДвижений.Вставить("ДвиженияЗатрНУ",ДвиженияЗатрНУ);
						
							Распределение	= Новый Структура("Сумма,ПостояннаяРазница","ЗатрНУ","ЗатрНУПР");
							Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"СчетУчетаНУ");
							Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
							Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
							Корр_Затр_НУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияЗатрНУ,Распределение,Отбор,Исключить,Дополнение);
							БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияЗатрНУ, Корр_Затр_НУ);
						КонецЕсли;	
					КонецЕсли;//Затраты НУ
					
				КонецЕсли;//По регистрам затрат незавершенного производства, брака в производстве, прочих затрат БУ,НУ
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДвижений;
	
КонецФункции // РасчетыВУсловныхЕдиницахПриобретениеРеализация

//АБС ВСТАВКА №9181 НАЧАЛО
//Перенесено из "Управление производственным предприятием, редакция 1.3 (1.3.26.1)"
//с доработками
Функция РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметров,ВалютаРегламентированногоУчета,РежимПроведения=Неопределено,ПроводкиБУ,Объект = Null,Отказ=Ложь,УдаляемыеВидыРегОпераций=Неопределено, ПолучатьПроводкиПоСсылке = Ложь, ТЗ_СуммовыеРазницы = Неопределено) экспорт
	
	Перем ТаблицаРегистрации;	
	//АБС ВСТАВКА ***** Разнесение платежей  20.03.2014 20:17:23  Гетц
	ИспользоватьРазнесениеПлатежей = Ложь;
	//АБС ВСТАВКА ***** Разнесение платежей КОНЕЦ
	ИспользоватьРазнесениеПлатежей = Ложь;
	Если СтруктураПараметров.Свойство("ТаблицаРегистрации", ТаблицаРегистрации) 
		И (ТипЗнч(ТаблицаРегистрации) <> Тип("ТаблицаЗначений")
			ИЛИ ТаблицаРегистрации.Количество() = 0) 
		Тогда
		ТаблицаРегистрации = Неопределено;
	КонецЕсли;
	
	Если ТаблицаРегистрации = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	//АБС ВСТАВКА Навценя 25.08.2014
	Если СтруктураПараметров.ВидДокумента = "КорректировкаРеализации" Тогда
		Если абс_ВосстановлениеВзаиморасчетов.КорректировкаРеализации_ИспользоватьВосстановлениеАванса(СтруктураПараметров) Тогда 
			Возврат абс_ВосстановлениеВзаиморасчетов.КорректировкаРеализации_СформироватьДвижения(
																СтруктураПараметров,
																ВалютаРегламентированногоУчета, 
																ПроводкиБУ,
																Объект);
		КонецЕсли;
	КонецЕсли;
	//АБС ВСТАВКА КОНЕЦ
	
		
	Ссылка			= СтруктураПараметров.Регистратор;
	ВидДокумента	= СтруктураПараметров.ВидДокумента;
	ДатаДока		= СтруктураПараметров.Период;
	Заголовок       = "";
	СтруктураПараметров.Свойство("Заголовок", Заголовок);
	Если НЕ ЗначениеЗаполнено(Заголовок) тогда
		 Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	Конецесли;
	 
	//////////////////////////////////////////////////////////////////////////////////////////
	// Подменим документ расчетов для "Корректировка поступления" и "Корректировка реализации"
	
	Если ВидДокумента = "КорректировкаПоступления" Тогда
		ДокументРасчетов = УчетНДС.ПолучитьИсправляемыйДокументПоступления(Ссылка, Истина);
	ИначеЕсли ВидДокумента = "КорректировкаРеализации" Тогда
		ДокументРасчетов = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Ссылка, Истина);
	Иначе
		ДокументРасчетов = Ссылка;
	КонецЕсли;	
	
	ДоговорКонтрагента   = СтруктураПараметров.ДоговорКонтрагента;
	СчетОплаты			 = СтруктураПараметров.СчетУчетаРасчетовСКонтрагентом;
	СчетАванса			 = СтруктураПараметров.СчетУчетаРасчетовПоАвансам;
	ОценкаДоходовРасходовПоКурсуАвансов = ПолучитьОценкуДоходовРасходовПоКурсуАвансов(ДатаДока);
    
	//Проверка правильности заполнения реквизитов документа
	ПокупкиПродажи = ПроверкаРасчетыВУсловныхЕдиницах(СтруктураПараметров, 
		ДоговорКонтрагента, СчетОплаты, СчетАванса, ВалютаРегламентированногоУчета, Отказ, Заголовок, Истина);
		
	Если ПокупкиПродажи = Ложь Тогда
		Возврат Ложь;
	Иначе
		Покупки	= ПокупкиПродажи.Покупки;
		Продажи	= ПокупкиПродажи.Продажи;
	КонецЕсли;
	
	Организация          = СтруктураПараметров.Организация;
	Контрагент           = СтруктураПараметров.Контрагент;
	ВалютаВзаиморасчетов = СтруктураПараметров.ВалютаВзаиморасчетов;
	КурсРасчетов		 = СтруктураПараметров.КурсВзаиморасчетов;
	КратностьРасчетов	 = СтруктураПараметров.КратностьВзаиморасчетов;
	ВалютаДокумента		 = СтруктураПараметров.ВалютаДокумента;
	КурсДокумента		 = СтруктураПараметров.КурсДокумента;
	КратностьДокумента	 = СтруктураПараметров.КратностьДокумента;
	ЭтоВозврат			 = (СтруктураПараметров.РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат);
	ЗнакОстатка          = ?(ЭтоВозврат, -1, 1);
	ВидРегОперацииКорр 	 = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах;
	Если СтруктураПараметров.Свойство("НДСВключенВСтоимость") И ТипЗнч(СтруктураПараметров.НДСВключенВСтоимость) = Тип("Булево") Тогда
		НДСВключенВСтоимость = СтруктураПараметров.НДСВключенВСтоимость;
	Иначе
		НДСВключенВСтоимость = Ложь;
	КонецЕсли;
	
	ЕстьТаблицаПоВзаиморасчетам = СтруктураПараметров.ВестиПоДокументамРасчетовСКонтрагентом 
		И СтруктураПараметров.Свойство("ТаблицаПоВзаиморасчетам")
		И ТипЗнч(СтруктураПараметров.ТаблицаПоВзаиморасчетам) = Тип("ТаблицаЗначений");
	Если ЕстьТаблицаПоВзаиморасчетам Тогда
									
		ТаблицаПоВзаиморасчетам = СтруктураПараметров.ТаблицаПоВзаиморасчетам.Скопировать();
		Если ЭтоВозврат Тогда
			УправлениеВзаиморасчетами.ИзменитьЗнакКолонокТаблицы(ТаблицаПоВзаиморасчетам, Новый Структура("СуммаВзаиморасчетов, СуммаРегл, СуммаУпр"));
		КонецЕсли;
		ТаблицаПоВзаиморасчетам.Колонки.СуммаРегл.Имя = "СуммаРег";
		ТаблицаПоВзаиморасчетам.Колонки.ДокументРасчетовСКонтрагентом.Имя = "Документ";
		НетСделкиВТаблице = ТаблицаПоВзаиморасчетам.Колонки.Найти("Сделка") = Неопределено;
		Если НетСделкиВТаблице Тогда
			ТаблицаПоВзаиморасчетам.Колонки.Добавить("Сделка", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказПоставщику, 
				|ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика, ДокументСсылка.абс_СчетНаОплату, Неопределено"), "Сделка");
		КонецЕсли;
		Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ТаблицаПоВзаиморасчетам.ЗаполнитьЗначения(Неопределено, "Сделка");
		ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам ИЛИ НетСделкиВТаблице Тогда
			ТаблицаПоВзаиморасчетам.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
			ТаблицаПоВзаиморасчетам.ЗагрузитьКолонку(ТаблицаПоВзаиморасчетам.ВыгрузитьКолонку("СуммаВзаиморасчетов"), "СуммаРег");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаРегистрации.Колонки.Найти("НДСВал") = Неопределено Тогда
		ТаблицаРегистрации.Колонки.Добавить("НДСВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		Если не ТаблицаРегистрации.Итог("СуммаНДС") = 0 Тогда
			Для каждого СтрокаТаблицы Из ТаблицаРегистрации Цикл
				Если СтрокаТаблицы.СуммаНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов) или СтруктураПараметров.ВалютаВзаиморасчетов = СтруктураПараметров.ВалютаРегламентированногоУчета Тогда
					СтрокаТаблицы.НДСВал = СтрокаТаблицы.СуммаНДС;
				Иначе
					СтрокаТаблицы.НДСВал = Окр(СтрокаТаблицы.СуммаНДС*СтрокаТаблицы.СуммаВзаиморасчетов/СтрокаТаблицы.СуммаСНДС,2);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	ТаблицаСделокДокумента = ТаблицаРегистрации.Скопировать();
	ТаблицаСделокДокумента.Свернуть("Сделка", "СуммаВзаиморасчетов, СуммаСНДС, НДСВал, СуммаНДС");
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаСделокДокумента.ЗаполнитьЗначения(Неопределено, "Сделка");
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаСделокДокумента.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	ВызванРегламентнойПроцедурой = (Объект = Null);
	
	Если ВызванРегламентнойПроцедурой Тогда 
		СтруктураДвижений = Новый Структура;
	Конецесли;
	
	//Определяем образ действий (on/off-line)
	Если НЕ ВызванРегламентнойПроцедурой И НЕ СтруктураПараметров.Свойство("ОпределятьАвансыПриПроведенииДокумента") Тогда
		УчетнаяПолитика  = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаДока, Организация);
		СтруктураПараметров.Вставить("ОпределятьАвансыПриПроведенииДокумента",?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), Истина, УчетнаяПолитика.ОпределятьАвансыПриПроведенииДокумента));
	КонецЕсли; 
	
	УчитыватьАванс	= (ВызванРегламентнойПроцедурой ИЛИ СтруктураПараметров.ОпределятьАвансыПриПроведенииДокумента) И ЗначениеЗаполнено(СчетАванса);
	
	//АБС ВСТАВКА №42177 НАЧАЛО «14 мая 2014 г.», Пополитов
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если СтруктураПараметров.Свойство("ПризнаватьЗачитыватьАванс") Тогда 
			абс_ПризнаватьЗачитыватьАванс = СтруктураПараметров.ПризнаватьЗачитыватьАванс;
		Иначе
			абс_ПризнаватьЗачитыватьАванс = Ссылка.ПризнаватьЗачитыватьАванс;	
		КонецЕсли;	
		УчитыватьАванс = УчитыватьАванс или (не абс_ПризнаватьЗачитыватьАванс и ЗначениеЗаполнено(СчетАванса));		
		Если не ЗначениеЗаполнено(СчетАванса) и не УчитыватьАванс Тогда
			СчетАванса = СчетОплаты;	
			СтруктураПараметров.СчетУчетаРасчетовПоАвансам = СчетАванса;
		КонецЕсли;		
	КонецЕсли;
 	//\\АБС ВСТАВКА №42177 КОНЕЦ   
		//++ТТК Готовцев 28.12.2017 
		//отключаем зачет аванса для загруженных из билинга реализаций
		МетаданныеДокумента = Ссылка.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ЛогЗагрузкиИзАСР",МетаданныеДокумента) Тогда
			ЕСли ЗначениеЗаполнено(Ссылка.ЛогЗагрузкиИзАСР) ТОгда
				ЕСли  Ссылка.ЛогЗагрузкиИзАСР.МестонахождениеБиллинга.НеЗачитыватьАванс и Ссылка.ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета")  ТОгда
					УчитыватьАванс = ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	  

	//--ТТК Готовцев 28.12.2017	

	
	Если ЕстьТаблицаПоВзаиморасчетам И УчитыватьАванс Тогда
		ТаблицаПоВзаиморасчетам.Свернуть("Сделка, Документ, ДатаОплаты", "СуммаВзаиморасчетов, СуммаРег");
	КонецЕсли;
	
	//Получаем записи регистра, по которому отслеживается изменение состояния расчетов по документу
	Если ВызванРегламентнойПроцедурой тогда
		ДвиженияПоРегиструУЕ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления[?(покупки, "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации")]);
		//***** Гетц. Разнесение платежей. 14.11.12
		ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей(СтруктураПараметров.Ссылка);
		Если ИспользоватьРазнесениеПлатежей Тогда 
			Если СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 1 Тогда 
				ДвиженияПоРегиструУЕ.Прочитать(); // При втором обходе, движения первого затирать не нужно
			КонецЕсли;
		КонецЕсли;
		//***** Гетц. Разнесение платежей \\
	Иначе
		ДвиженияПоРегиструУЕ = ОбщегоНазначения.ПолучитьДвижение(Объект, ?(покупки, "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации"));
	КонецЕсли;
	
	Если ДвиженияПоРегиструУЕ = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	Если ВызванРегламентнойПроцедурой тогда 
		СтруктураДвижений.Вставить("ДвиженияПоРегиструУЕ", ДвиженияПоРегиструУЕ);
	Конецесли;
	
	// Создание таблицы для последующего отражения расчетов по НДС.
	ТаблицаАвансовДляНДС = Новый ТаблицаЗначений();
	ТаблицаАвансовДляНДС.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
	ТаблицаАвансовДляНДС.Колонки.Добавить("СчетФактура",         Документы.ТипВсеСсылки());
	ТаблицаАвансовДляНДС.Колонки.Добавить("РублеваяСумма",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАвансовДляНДС.Колонки.Добавить("СуммаВал",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАвансовДляНДС.Колонки.Добавить("КурсоваяРазница",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Если ЭтоВозврат Тогда
		ТаблицаАвансовДляНДС.Колонки.Добавить("ДокументРасчетов");
	КонецЕсли; 
	
	ТаблицаАвансовДляНДС.Колонки.Добавить("Контрагент", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаАвансовДляНДС.Колонки.Добавить("ДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаАвансовДляНДС.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	//Сокращенная схема в случае off-line проведения
	Если НЕ УчитыватьАванс Тогда
		
		ТаблицаДвиженийПоРегиструУЕ = ДвиженияПоРегиструУЕ.ВыгрузитьКолонки();
		Для каждого СтрокаТаблицыСделок Из ТаблицаСделокДокумента Цикл
		
			СтрокаДвижения = ТаблицаДвиженийПоРегиструУЕ.Добавить();
			СтрокаДвижения.Сделка = СтрокаТаблицыСделок.Сделка;
			СтрокаДвижения.СуммаВзаиморасчетов = СтрокаТаблицыСделок.СуммаВзаиморасчетов * ЗнакОстатка;
			СтрокаДвижения.СуммаРег            = СтрокаТаблицыСделок.СуммаСНДС * ЗнакОстатка;
		
		КонецЦикла;
		
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(ДатаДока, "Период");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Истина, "Активность");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Контрагент, "Контрагент");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Организация, "Организация");
		Если (ВызванРегламентнойПроцедурой ИЛИ СтруктураПараметров.ОпределятьАвансыПриПроведенииДокумента) Тогда
			ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(ДокументРасчетов, "Документ");
		КонецЕсли;

		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(СчетОплаты, "СчетОплаты");
		
		ДвиженияПоРегиструУЕ.Загрузить(ТаблицаДвиженийПоРегиструУЕ);
		
		Возврат Истина;
		
	КонецЕсли;	
	
	//Полная схема проведения (on-line)
	
	СуммоваяРазница = 0;
	СуммаАвансаРег  = СтруктураПараметров.СуммаАвансаРег;
	СуммаАвансаВал  = СтруктураПараметров.СуммаАвансаВал;
	
	//АБС+ Тупиков
	ВыделятьАвансыПриКорректировке 	= Ложь;
	ЗачетАвансаКакВыделениеАванса   = Ложь;
	СуммаВыделенногоАвансаВал 		= 0;
	СуммаВыделенногоАвансаРег 		= 0;
	//АБС- Тупиков
	
	РасчетыВВалюте2008 = (ДатаДока >= '20080101')
		И ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета
		И НЕ СтруктураПараметров.РасчетыВУсловныхЕдиницах;
		
	ФормироватьПроводкиПоСчетуВАЛ = Не ОценкаДоходовРасходовПоКурсуАвансов И РасчетыВВалюте2008 И НЕ СтруктураПараметров.ОрганизацияПрименяетУСН;
	
	Если ЕстьТаблицаПоВзаиморасчетам И НЕ ВызванРегламентнойПроцедурой Тогда
		
		// Оставляем в таблице взаиморасчетов по документам только строки авансов
		
		СтрокиНеАвансов = ТаблицаПоВзаиморасчетам.НайтиСтроки(Новый Структура("Документ", Ссылка));
		Для каждого СтрокаТаблицыПоВзаиморасчетам Из СтрокиНеАвансов Цикл
			ТаблицаПоВзаиморасчетам.Удалить(СтрокаТаблицыПоВзаиморасчетам);
		КонецЦикла;
		//***** Гетц. Разнесение платежей. 29.10.12
		ОпределитьСуммыАвансовКЗачету(ТаблицаПоВзаиморасчетам, СтруктураПараметров);
		//***** Гетц. Разнесение платежей \\
	Иначе
		
		//Выбираем текущие остатки по регистру расчетов в у.е.
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
		СчетОстатков = ?(ЭтоВозврат, СчетОплаты, СчетАванса);
		Запрос.УстановитьПараметр("Счет", СчетОстатков);
		
		ИспользоватьОтборПоСделкам = не СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		// АБС ВСТАВКА Фролов 20120722
		// Отключаем отбор по сделкам в регл. регистрах.
		ИспользоватьОтборПоСделкам = Ложь;		
		
		Запрос.УстановитьПараметр("ИспользоватьОтборПоСделкам", ИспользоватьОтборПоСделкам);
		Если ИспользоватьОтборПоСделкам Тогда
			Сделки = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСделокДокумента.ВыгрузитьКолонку("Сделка"));
			Запрос.УстановитьПараметр("Сделки", Сделки);
		Иначе
			Запрос.УстановитьПараметр("Сделки", Неопределено);
		КонецЕсли;
		
		ИспользоватьОтборПоДокументам = ЭтоВозврат И Покупки;
		Запрос.УстановитьПараметр("ИспользоватьОтборПоДокументам", ИспользоватьОтборПоДокументам);
		Если ИспользоватьОтборПоДокументам Тогда
			ДокументыРасчетов = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаРегистрации.ВыгрузитьКолонку("ДокументРасчетов"),Истина);
			Запрос.УстановитьПараметр("ДокументыРасчетов", ДокументыРасчетов);
		Иначе
			Запрос.УстановитьПараметр("ДокументыРасчетов", Неопределено);
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("ЗнакОстатка", ЗнакОстатка);
		Запрос.УстановитьПараметр("Период", Новый МоментВремени(ДатаДока, Ссылка));
		//***** Гетц. Разнесение платежей. 22.11.12
		ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей(СтруктураПараметров.Ссылка);
		Если ИспользоватьРазнесениеПлатежей И Продажи Тогда 
			Если СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 1 Тогда 
				Запрос.УстановитьПараметр("Период", Новый Граница(СтруктураПараметров.ДатаАктуализации, ВидГраницы.Включая));
			КонецЕсли;
		КонецЕсли;
		//***** Гетц. Разнесение платежей \\
		//АБС_Попов
		Запрос.УстановитьПараметр("Организация", Организация);
		//\\АБС_Попов  

		ИмяРегистра = ?(Продажи, "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации", "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации");
		
		Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
					
			СтруктураПараметровБлокировки = Новый Структура(
				"ИмяТаблицы", ИмяРегистра);
			СтруктураЗначенийБлокировки   = Новый Структура(
				"Период, Организация, Контрагент, ДоговорКонтрагента, СчетОплаты", 
				Новый Диапазон(, ДатаДока), Организация, Контрагент, ДоговорКонтрагента, СчетОстатков);
			СтруктураИсточникаДанных      = Новый Структура;
			
			Если ИспользоватьОтборПоСделкам ИЛИ ИспользоватьОтборПоДокументам Тогда
				
				ЗапросДляБлокировки = Новый Запрос;
				МенеджерВремТаблиц = Новый МенеджерВременныхТаблиц;
				ЗапросДляБлокировки.МенеджерВременныхТаблиц = МенеджерВремТаблиц;
				ЗапросДляБлокировки.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВЫБОР 
				|		КОГДА НЕ (&ИспользоватьОтборПоСделкам)
				|			ТОГДА Неопределено
				|		КОГДА &ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом)
				|			ТОГДА Неопределено
				|		КОГДА &ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
				|			ТОГДА &Сделка
				|		ИНАЧЕ
				|			Таб.Сделка
				|	КОНЕЦ КАК Сделка,
				|	ВЫБОР 
				|		КОГДА НЕ (&ИспользоватьОтборПоДокументам)
				|			ТОГДА Неопределено
				|		ИНАЧЕ
				|			Таб.ДокументРасчетов 
				|	КОНЕЦ КАК Документ
				|ПОМЕСТИТЬ ТаблицаРегистрации
				|ИЗ
				|	&ТаблицаРегистрации КАК Таб";
				
				ЗапросДляБлокировки.УстановитьПараметр("ИспользоватьОтборПоСделкам", ИспользоватьОтборПоСделкам);
				ЗапросДляБлокировки.УстановитьПараметр("ИспользоватьОтборПоДокументам", ИспользоватьОтборПоДокументам);
				ЗапросДляБлокировки.УстановитьПараметр("ВедениеВзаиморасчетов", СтруктураПараметров.ВедениеВзаиморасчетов);
				ЗапросДляБлокировки.УстановитьПараметр("Сделка", СтруктураПараметров.Сделка);
				ЗапросДляБлокировки.УстановитьПараметр("ТаблицаРегистрации", ТаблицаРегистрации);
				ЗапросДляБлокировки.Выполнить();
				
				СтруктураПараметровБлокировки.Вставить("ИсточникДанных", МенеджерВремТаблиц);
				СтруктураПараметровБлокировки.Вставить("ИмяВременнойТаблицы", "ТаблицаРегистрации");
				
				Если ИспользоватьОтборПоСделкам Тогда
					СтруктураИсточникаДанных.Вставить("Сделка", "Сделка");
				КонецЕсли;
				Если ИспользоватьОтборПоДокументам Тогда
					СтруктураИсточникаДанных.Вставить("Документ", "Документ");
				КонецЕсли;
				
			КонецЕсли;
			
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных, Отказ, Заголовок);
					
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасчетыВУЕ.Сделка КАК Сделка,
		|	РасчетыВУЕ.Документ КАК Документ,
		|	РасчетыВУЕ.ДатаОплаты КАК ДатаОплаты,
		|	РасчетыВУЕ.СуммаВзаиморасчетовОстаток * &ЗнакОстатка КАК СуммаВзаиморасчетов,
		|	РасчетыВУЕ.СуммаРегОстаток * &ЗнакОстатка КАК СуммаРег
		|ИЗ
		|	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки(
		|			&Период,
		|			ДоговорКонтрагента = &Договор И Организация = &Организация " + ?(ИспользоватьРазнесениеПлатежей И Не (СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 0), "И ЕСТЬNULL(Документ.абс_НеИспользоватьРаспределениеПлатежей, ЛОЖЬ) = ЛОЖЬ ", "") + " //***** АБС Гетц. 24.12.13
		|				И СчетОплаты = &Счет
		|				И ВЫБОР
		|					КОГДА &ИспользоватьОтборПоСделкам
		|						ТОГДА Сделка В (&Сделки)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &ИспользоватьОтборПоДокументам
		|						ТОГДА Документ В (&ДокументыРасчетов)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК РасчетыВУЕ
		|ГДЕ
		|	РасчетыВУЕ.СуммаВзаиморасчетовОстаток * &ЗнакОстатка > 0
		|	И РасчетыВУЕ.СуммаРегОстаток * &ЗнакОстатка > 0
		| 
		|// АБС ВСТАВКА для исключения блокировок
		|// ДЛЯ ИЗМЕНЕНИЯ
		|//	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки
		|// АБС ВСТАВКА для исключения блокировок
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОплаты,
		|	РасчетыВУЕ.Документ.Дата,
		|	Документ
		|ИТОГИ ПО
		|	Сделка";
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", ИмяРегистра);
		
		ОстатокАвансаПоСделкам = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		//АБС+ Тупиков
		// выбираем текущие отрицательные остаки по регистру в у.е для случаев выделения аванса при корректировке в минус
		Если ВидДокумента = "КорректировкаПоступления" ИЛИ ВидДокумента = "КорректировкаРеализации" Тогда
			
			Запрос.УстановитьПараметр("Счет", СчетОплаты);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РасчетыВУЕ.Сделка КАК Сделка,
			|	РасчетыВУЕ.Документ КАК Документ,
			|	РасчетыВУЕ.ДатаОплаты КАК ДатаОплаты,
			|	РасчетыВУЕ.СуммаВзаиморасчетовОстаток * &ЗнакОстатка КАК СуммаВзаиморасчетов,
			|	РасчетыВУЕ.СуммаРегОстаток * &ЗнакОстатка КАК СуммаРег
			|ИЗ
			|	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки(
			|			&Период,
			|			ДоговорКонтрагента = &Договор
			|				И СчетОплаты = &Счет
			|				И ВЫБОР
			|					КОГДА &ИспользоватьОтборПоСделкам
			|						ТОГДА Сделка В (&Сделки)
			|					ИНАЧЕ ИСТИНА
			|				КОНЕЦ
			|				И ВЫБОР
			|					КОГДА &ИспользоватьОтборПоДокументам
			|						ТОГДА Документ В (&ДокументыРасчетов)
			|					ИНАЧЕ ИСТИНА
			|				КОНЕЦ) КАК РасчетыВУЕ
			|ГДЕ
			|	РасчетыВУЕ.СуммаВзаиморасчетовОстаток * &ЗнакОстатка < 0
			|	И РасчетыВУЕ.СуммаРегОстаток * &ЗнакОстатка < 0
			|
			|ДЛЯ ИЗМЕНЕНИЯ
			|	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаОплаты,
			|	РасчетыВУЕ.Документ.Дата,
			|	Документ
			|ИТОГИ ПО
			|	Сделка";
			
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", ИмяРегистра);
 			
			ОстатокЗачтенногоАвансаПоСделкам = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		КонецЕсли;
		//АБС- Тупиков
		
	КонецЕсли;
		
	// Обработаем закрытие задолженности и сформируем курсовые (суммовые) разницы
	//***** Гетц. Разнесение платежей. 20.11.12
	Если Продажи Тогда
		УчестьЗакрытуюЗадолженность(СтруктураПараметров);
	КонецЕсли;
	//***** Гетц. Разнесение платежей \\
	
	СуммаДокументаВал = 0;
	СуммаДокументаРег = 0;
	
	Если РасчетыВВалюте2008 Тогда
		// курс на 31.12.2007 для зачета в 2008 году авансов 2007 года
		КурсыВалют20071231 = Новый Соответствие; 
	КонецЕсли;
	
	Для каждого СтрокаТаблицыСделок Из ТаблицаСделокДокумента Цикл
		
		СуммаСделкиРег = СтрокаТаблицыСделок.СуммаСНДС - ?(СтруктураПараметров.УчетАгентскогоНДС, СтрокаТаблицыСделок.СуммаНДС, 0);
		Если СтруктураПараметров.РасчетыВУсловныхЕдиницах ИЛИ ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
			СуммаСделкиВал = СтрокаТаблицыСделок.СуммаВзаиморасчетов - ?(СтруктураПараметров.УчетАгентскогоНДС, СтрокаТаблицыСделок.НДСВал, 0);
		Иначе
			СуммаСделкиВал = СуммаСделкиРег;
		КонецЕсли;
		//***** Гетц. Разнесение платежей. 22.11.12
		ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей();
		Если ИспользоватьРазнесениеПлатежей И Продажи Тогда 
			Если СтруктураПараметров.Свойство("ЗакрытаяЗадолженность") Тогда
				СуммаСделкиРег = СуммаСделкиРег - СтруктураПараметров.ЗакрытаяЗадолженность.СуммаРег;
				СуммаСделкиВал = СуммаСделкиВал - СтруктураПараметров.ЗакрытаяЗадолженность.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		//***** Гетц. \\			
		СуммаДокументаВал = СуммаДокументаВал + СуммаСделкиВал;
		СуммаДокументаРег = СуммаДокументаРег + СуммаСделкиРег;
		
		КурсСделки = ?(СуммаСделкиВал = 0, 0, СуммаСделкиРег / СуммаСделкиВал);
	
		//АБС+ Тупиков
		ВыделятьАвансыПриКорректировке = Ложь;
		ЗачетАвансаКакВыделениеАванса  = Ложь;
		//АБС- Тупиков
		
		Если ЕстьТаблицаПоВзаиморасчетам И НЕ ВызванРегламентнойПроцедурой Тогда
			
			ОстаткиАвансов = ТаблицаПоВзаиморасчетам.НайтиСтроки(Новый Структура("Сделка", СтрокаТаблицыСделок.Сделка));
			ЕстьОстаткиАвансовПоСделке = ОстаткиАвансов.Количество() > 0;
			
		Иначе
			СтрокиАвансаПоСделке = ОстатокАвансаПоСделкам.Строки.Найти(СтрокаТаблицыСделок.Сделка, "Сделка", Ложь);
			
			ЕстьОстаткиАвансовПоСделке = СтрокиАвансаПоСделке <> Неопределено;
			Если ЕстьОстаткиАвансовПоСделке Тогда
				ОстаткиАвансов = СтрокиАвансаПоСделке.Строки;
			КонецЕсли;
			//***** Гетц. Разнесение платежей. 14.11.12
			ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей(СтруктураПараметров.Ссылка);
			Если ИспользоватьРазнесениеПлатежей Тогда 
				Если СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 0 Тогда 
					ТаблицаАвансов = ТаблицаРегистрации.Скопировать(, "ДокументРасчетов, Сделка, СуммаВзаиморасчетов, РублеваяСумма");
					//АБС ВСТАВКА 000025579 Разнесение платежей  18.03.2014 18:11:56  Гетц
					// Необходимо удалить из авансов строки с пустыми документами расчетов
					Сч = ТаблицаАвансов.Количество();
					Пока Сч > 0 Цикл 
						СтрокаТаблицы = ТаблицаАвансов[Сч - 1];
						Если СтрокаТаблицы.ДокументРасчетов = Неопределено Тогда
							ТаблицаАвансов.Удалить(СтрокаТаблицы);
							Сч = Сч - 1;
							Продолжить;
						КонецЕсли;
						
						Если ЕстьОстаткиАвансовПоСделке Тогда 
							СтрокаОстатковАванса = ОстаткиАвансов.Найти(СтрокаТаблицы.ДокументРасчетов, "Документ", Ложь);
						Иначе 
							СтрокаОстатковАванса = Неопределено;
						КонецЕсли;
						
						Если Не СтрокаОстатковАванса = Неопределено Тогда 
							СтрокаТаблицы.СуммаВзаиморасчетов = Мин(СтрокаТаблицы.СуммаВзаиморасчетов, СтрокаОстатковАванса.СуммаВзаиморасчетов);
							СтрокаТаблицы.РублеваяСумма = Мин(СтрокаТаблицы.РублеваяСумма, СтрокаОстатковАванса.СуммаРег);
						Иначе 
							ТаблицаАвансов.Удалить(СтрокаТаблицы);
						КонецЕсли;
						Сч = Сч - 1;
					КонецЦикла;
					//АБС ВСТАВКА 000025579 Разнесение платежей КОНЕЦ
					ТаблицаАвансов.Колонки.Добавить("ДатаОплаты");
					Для Каждого СтрокаАв Из ТаблицаАвансов Цикл 
						СтрокаАв.ДатаОплаты = СтрокаАв.ДокументРасчетов.Дата;
					КонецЦикла;
					ТаблицаАвансов.Колонки["ДокументРасчетов"].Имя = "Документ";
					ТаблицаАвансов.Колонки["РублеваяСумма"].Имя = "СуммаРег";
					ОстаткиАвансов = ТаблицаАвансов;
					ЕстьОстаткиАвансовПоСделке = (Не ОстаткиАвансов.Количество() = 0);
				ИначеЕсли СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 1 Тогда 
					Если НеИспользоватьФИФОВДокументе(СтруктураПараметров.Ссылка) Тогда 
						ЕстьОстаткиАвансовПоСделке = Ложь;
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;
			//***** Гетц. \\
		КонецЕсли;
		
		//АБС+ Тупиков
		// определяем необходимость выделения аванса при корректировке в минус
		Если (ВидДокумента = "КорректировкаПоступления" ИЛИ ВидДокумента = "КорректировкаРеализации")
			И СуммаСделкиВал < 0 И СуммаСделкиРег < 0 Тогда 
			
			// аванс выделяется только в случае указания счета аванса
			ЗачетАвансаКакВыделениеАванса = ЕстьОстаткиАвансовПоСделке И ЗначениеЗаполнено(СчетАванса) И (НЕ СчетОплаты = СчетАванса);
			
			Если НЕ ЕстьОстаткиАвансовПоСделке Тогда
				
				// аванс выделяется только в случае указания счета аванса
				ВыделятьАвансыПриКорректировке = ЗначениеЗаполнено(СчетАванса) И (НЕ СчетОплаты = СчетАванса);
				
				СтрокиЗачтенногоАвансаПоСделке = ОстатокЗачтенногоАвансаПоСделкам.Строки.Найти(СтрокаТаблицыСделок.Сделка, "Сделка", Ложь);
				Если СтрокиЗачтенногоАвансаПоСделке <> Неопределено Тогда
					ОстаткиЗачтенныхАвансов = СтрокиЗачтенногоАвансаПоСделке.Строки;
				Иначе
					// случай полного зачета аванса - вся сумма корректировки в минус - выделенный аванс
					ОстаткиЗачтенныхАвансов = Новый ТаблицаЗначений;					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//АБС- Тупиков
				
		//АБС+ Тупиков
		Если ЕстьОстаткиАвансовПоСделке ИЛИ ВыделятьАвансыПриКорректировке Тогда
			
			Если ВыделятьАвансыПриКорректировке Тогда  
				ОбщиеОстаткиАвансов = ОстаткиЗачтенныхАвансов;
			Иначе
				ОбщиеОстаткиАвансов = ОстаткиАвансов;	
			КонецЕсли;
			//АБС- Тупиков
			
			//АБС ВСТАВКА 02.10.2014 Навценя 
			ТЗ_СуммовыеРазницы = Новый ТаблицаЗначений();
			ТЗ_СуммовыеРазницы.Колонки.Добавить("СуммоваяРазница"      , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			ТЗ_СуммовыеРазницы.Колонки.Добавить("Документ"             , Документы.ТипВсеСсылки());
	
			Если ТипЗнч(ОбщиеОстаткиАвансов) = Тип("ТаблицаЗначений") 
				//АБС ВСТАВКА 49416  18.11.2014 17:42:38  Шамов
				И ОбщиеОстаткиАвансов.Колонки.Найти("Документ") <> Неопределено
				//АБС ВСТАВКА 49416 КОНЕЦ 
				Тогда 				
				ОбщиеОстаткиАвансов.Свернуть("ДатаОплаты, Документ, Сделка", "СуммаВзаиморасчетов, СуммаРег");	
			КонецЕсли;
			//АБС ВСТАВКА КОНЕЦ
			
			Для каждого ОстатокАванса Из ОбщиеОстаткиАвансов Цикл
				
				Если ВызванРегламентнойПроцедурой И ЕстьТаблицаПоВзаиморасчетам Тогда
					
					ОстаткиПоТаблицеВзаиморасчетов = ТаблицаПоВзаиморасчетам.НайтиСтроки(
					Новый Структура("Сделка, Документ", СтрокаТаблицыСделок.Сделка, ОстатокАванса.Документ));
					
					ОстатокАвансаВал	= 0;
					ОстатокавансаРег	= 0;
					Для каждого ОстатокПоТаблице Из ОстаткиПоТаблицеВзаиморасчетов Цикл
						ОстатокАвансаВал	= ОстатокАвансаВал + ОстатокПоТаблице.СуммаВзаиморасчетов;
						ОстатокАвансаРег	= ОстатокАвансаРег + ОстатокПоТаблице.СуммаРег;
					КонецЦикла;
					
					Если ОстатокАвансаВал = 0 Тогда
						Продолжить;
					КонецЕсли;
					
				Иначе
					ОстатокАвансаВал = ОстатокАванса.СуммаВзаиморасчетов;
					ОстатокАвансаРег = ОстатокАванса.СуммаРег;
				КонецЕсли;
				
				КурсОстаткаАванса              = ?(ОстатокАвансаВал = 0, 0, ОстатокАвансаРег / ОстатокАвансаВал);
				Если ВыделятьАвансыПриКорректировке Тогда
					ЗачтеноАвансаВал           = Макс(ОстатокАвансаВал, СуммаСделкиВал);
				Иначе
					ЗачтеноАвансаВал               = Мин(ОстатокАвансаВал, СуммаСделкиВал);
				КонецЕсли;
				ЗачтеноАвансаРегПоКурсуОстатка = Окр(ЗачтеноАвансаВал * КурсОстаткаАванса, 2);
				
				Если ВалютаДокумента = ВалютаРегламентированногоУчета и не ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
					ЗачтеноАвансаРегПоКурсуРасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЗачтеноАвансаВал,
					ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
					КурсРасчетов, 1,
					КратностьРасчетов, 1);
				Иначе
					ЗачтеноАвансаРегПоКурсуРасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЗачтеноАвансаВал,
					ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
					КурсДокумента, 1,
					КратностьДокумента, 1);
				КонецЕсли;
				
				Если РасчетыВВалюте2008 И ОстатокАванса.ДатаОплаты < '20080101' И ЗначениеЗаполнено(ОстатокАванса.ДатаОплаты) Тогда
					
					СтруктураКурса20071231 = КурсыВалют20071231[ВалютаВзаиморасчетов];
					Если СтруктураКурса20071231 = Неопределено Тогда
						СтруктураКурса20071231 = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, '20071231');
						КурсыВалют20071231.Вставить(ВалютаВзаиморасчетов, СтруктураКурса20071231);
					КонецЕсли;
					
					ЗачтеноАвансаРегПоКурсу20071231 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЗачтеноАвансаВал,
					ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
					СтруктураКурса20071231.Курс, 1,
					СтруктураКурса20071231.Кратность, 1);
				КонецЕсли;
				
				ТекущаяСуммоваяРазница = ЗачтеноАвансаРегПоКурсуРасчетов - ЗачтеноАвансаРегПоКурсуОстатка;
				
				Движение = ДвиженияПоРегиструУЕ.Добавить();
				
				Движение.Период 	         = ДатаДока;
				Движение.ВидДвижения         = ВидДвиженияНакопления.Расход;
				Движение.ДоговорКонтрагента	 = ДоговорКонтрагента;
				Движение.Контрагент			 = Контрагент;
				Движение.Организация		 = Организация;
				Движение.Сделка				 = СтрокаТаблицыСделок.Сделка;
				//АБС+ Тупиков
				//Движение.Документ			 = ОстатокАванса.Документ;
				//Движение.СчетОплаты 		 = ?(ЭтоВозврат, СчетОплаты, СчетАванса);
				//Движение.ДатаОплаты 		 = ОстатокАванса.ДатаОплаты;
				Движение.Документ			 = ?(ЗачетАвансаКакВыделениеАванса, Ссылка, ОстатокАванса.Документ);
				Движение.СчетОплаты 		 = ?(ЭтоВозврат ИЛИ ВыделятьАвансыПриКорректировке, СчетОплаты, СчетАванса);
				Движение.ДатаОплаты 		 = ?(ЗачетАвансаКакВыделениеАванса, ДатаДока, ОстатокАванса.ДатаОплаты);
				//АБС- Тупиков
				Движение.СуммаВзаиморасчетов = ЗачтеноАвансаВал * ЗнакОстатка;
				Движение.СуммаРег			 = ЗачтеноАвансаРегПоКурсуОстатка * ЗнакОстатка;
				
				НоваяСтрока = ТаблицаАвансовДляНДС.Добавить();
				
				НоваяСтрока.Контрагент		     = Контрагент;
				НоваяСтрока.ДоговорКонтрагента   = ДоговорКонтрагента;
				НоваяСтрока.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
				//АБС+ Тупиков
				//НоваяСтрока.ДокументОплаты 	     = ОстатокАванса.Документ;
				//НоваяСтрока.СчетФактура		     = ДокументРасчетов;
				НоваяСтрока.ДокументОплаты 	     = ?(ЗачетАвансаКакВыделениеАванса, Ссылка, ОстатокАванса.Документ);
				НоваяСтрока.СчетФактура		     = ?(ВыделятьАвансыПриКорректировке, Ссылка, ДокументРасчетов);
				//АБС- Тупиков
				НоваяСтрока.РублеваяСумма		 = ЗачтеноАвансаРегПоКурсуРасчетов;
				НоваяСтрока.СуммаВал		     = ЗачтеноАвансаВал;
				НоваяСтрока.КурсоваяРазница      = (-1) * ТекущаяСуммоваяРазница;
				
				СуммаСделкиРег    = СуммаСделкиРег - ЗачтеноАвансаРегПоКурсуРасчетов;
				СуммаСделкиВал    = СуммаСделкиВал - ЗачтеноАвансаВал;
				СуммаДокументаВал = СуммаДокументаВал - ЗачтеноАвансаВал;
				СуммаДокументаРег = СуммаДокументаРег - ЗачтеноАвансаРегПоКурсуРасчетов;
				СуммаАвансаВал    = СуммаАвансаВал - ЗачтеноАвансаВал;
				
				//АБС ИЗМЕНЕНИЕ 02.10.2014 Навценя
				Если СтруктураПараметров.РасчетыВУсловныхЕдиницах Тогда
					СуммаАвансаРег  = СуммаАвансаРег - ЗачтеноАвансаРегПоКурсуОстатка;
					СуммоваяРазница = СуммоваяРазница + ТекущаяСуммоваяРазница;
					
					стркоаСуммовыхРазниц = ТЗ_СуммовыеРазницы.Добавить();
					стркоаСуммовыхРазниц.Документ = Движение.Документ;
					стркоаСуммовыхРазниц.СуммоваяРазница = ТекущаяСуммоваяРазница; 
					
				ИначеЕсли РасчетыВВалюте2008 И ОстатокАванса.ДатаОплаты >= '20080101' И ЗначениеЗаполнено(ОстатокАванса.ДатаОплаты) Тогда
					СуммаАвансаРег  = СуммаАвансаРег - ЗачтеноАвансаРегПоКурсуОстатка;
					СуммоваяРазница = СуммоваяРазница + ТекущаяСуммоваяРазница;
					
					стркоаСуммовыхРазниц = ТЗ_СуммовыеРазницы.Добавить();
					стркоаСуммовыхРазниц.Документ = Движение.Документ;
					стркоаСуммовыхРазниц.СуммоваяРазница = ТекущаяСуммоваяРазница;
					
				ИначеЕсли РасчетыВВалюте2008 И ОстатокАванса.ДатаОплаты < '20080101' И ЗначениеЗаполнено(ОстатокАванса.ДатаОплаты) Тогда
					СуммаАвансаРег  = СуммаАвансаРег - ЗачтеноАвансаРегПоКурсу20071231;
					СуммоваяРазница = СуммоваяРазница + (ЗачтеноАвансаРегПоКурсуРасчетов - ЗачтеноАвансаРегПоКурсу20071231);
					
					стркоаСуммовыхРазниц = ТЗ_СуммовыеРазницы.Добавить();
					стркоаСуммовыхРазниц.Документ = Движение.Документ;
					стркоаСуммовыхРазниц.СуммоваяРазница = ЗачтеноАвансаРегПоКурсуРасчетов - ЗачтеноАвансаРегПоКурсу20071231;
					
				Иначе
					СуммаАвансаРег         = СуммаАвансаРег - ЗачтеноАвансаРегПоКурсуРасчетов;
				КонецЕсли; 
				
				//АБС ИЗМЕНЕНИЕ КОНЕЦ
				Если СуммаСделкиВал = 0 Тогда 
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Зарегистрируем оставшуюся задолженность
		
		//***** Гетц. Разнесение платежей. 14.11.12
		ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей();
		Если ИспользоватьРазнесениеПлатежей Тогда 
			Если СтруктураПараметров.Свойство("ЗакрытаяЗадолженность") Тогда
				СуммаСделкиРег = СуммаСделкиРег + СтруктураПараметров.ЗакрытаяЗадолженность.СуммаРег;
				СуммаСделкиВал = СуммаСделкиВал + СтруктураПараметров.ЗакрытаяЗадолженность.СуммаВзаиморасчетов;
				СтруктураПараметров.ЗакрытаяЗадолженность.СуммаРег = 0;
				СтруктураПараметров.ЗакрытаяЗадолженность.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		КонецЕсли;
		//***** Гетц. Разнесение платежей \\
		//АБС ВСТАВКА Разнесение платежей  20.03.2014 19:34:20  Гетц. То чего нет в авансах распределим вторым порядком	
		Если СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 0 И ЕстьОстаткиАвансовПоСделке Тогда 
		//Если СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 0 Тогда
			СуммаСделкиВал = 0;
			СуммаСделкиРег = 0;
		КонецЕсли;
		//АБС ВСТАВКА Разнесение платежей КОНЕЦ
		Если СуммаСделкиВал <> 0 ИЛИ СуммаСделкиРег <> 0 Тогда 
			
			Движение             = ДвиженияПоРегиструУЕ.Добавить();
			
			Движение.ВидДвижения         = ВидДвиженияНакопления.Расход;
			Движение.Период		         = ДатаДока;
			Движение.ДоговорКонтрагента	 = ДоговорКонтрагента;
			Движение.Контрагент			 = Контрагент;
			Движение.Организация		 = Организация;
			Движение.Сделка		         = СтрокаТаблицыСделок.Сделка;
			//АБС+ Тупиков
			//Движение.Документ			 = ДокументРасчетов;
			//Движение.СчетОплаты		 = ?(ЭтоВозврат, СчетАванса, СчетОплаты);
			//Движение.ДатаОплаты		 = ?(ЭтоВозврат, ДатаДока, '00010101');
			Движение.Документ			 = ?(ВыделятьАвансыПриКорректировке, Ссылка, ДокументРасчетов);
			Движение.СчетОплаты			 = ?(ЭтоВозврат ИЛИ ВыделятьАвансыПриКорректировке, СчетАванса, СчетОплаты);
			Движение.ДатаОплаты			 = ?(ЭтоВозврат ИЛИ ВыделятьАвансыПриКорректировке, ДатаДока, '00010101');
			//АБС- Тупиков
			Движение.СуммаВзаиморасчетов = СуммаСделкиВал * ЗнакОстатка;
			Движение.СуммаРег			 = СуммаСделкиРег * ЗнакОстатка;
			
			//АБС+ Тупиков
			Если ВыделятьАвансыПриКорректировке Тогда
				// оставшаяся задолженность - выделенный аванс	
				СуммаВыделенногоАвансаВал = СуммаВыделенногоАвансаВал + Движение.СуммаВзаиморасчетов;
				СуммаВыделенногоАвансаРег = СуммаВыделенногоАвансаРег + Движение.СуммаРег;
			КонецЕсли;
			//АБС- Тупиков
			
			//АБС Шамов 33081 Вставка Начало
			//отсекаем "нормальные" проводки по остаткам взаиморасчетов
			//отсекаем всё, кроме ошибок округления
			Если СуммаСделкиВал = 0 
				И ?(СуммаСделкиРег > 0, СуммаСделкиРег, -СуммаСделкиРег) <= 0.01 Тогда
				//корректируем суммовую разницу - именно она вызывала расхождение (сумма взаиморасчетов 
				// корректируется при ошибке округления, а суммовая разница - нет)
				СуммоваяРазница = СуммоваяРазница + СуммаСделкиРег;
			КонецЕсли;
			//\\АБС Шамов 33081 Вставка Окончание
		КонецЕсли;
			
	КонецЦикла;

	// Отражение в НДС по реализации 0%
	Если ДатаДока < '20111001' Тогда
		// По операциям реализации со ставкой 0%, совершенным начиная с 01.10.2011, налоговая база по НДС 
		// определяется по курсу на дату реализации и не корректируется с учетом курса зачтенных авансов
		НаправлениеДвиженийДляНДС = ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента, СтруктураПараметров.ВидОперации);
		Если НаправлениеДвиженийДляНДС.Направление = "Выбытие" 
			И НаправлениеДвиженийДляНДС.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда 
			//Удалим из СтруктураПараметров элемент "ПроводкиНУ", "Налоговый", чтобы избежать передачи мутабельного значения в модуль УчетНДСФормированиеДвижений
			ВремПроводкиНУ = Неопределено;
			ВремНалоговый = Неопределено;

			Если СтруктураПараметров.Свойство("ПроводкиНУ") Тогда
				ВремПроводкиНУ = СтруктураПараметров.ПроводкиНУ;
				СтруктураПараметров.Удалить("ПроводкиНУ");
			КонецЕсли;
		    Если СтруктураПараметров.Свойство("Налоговый") Тогда
				ВремНалоговый = СтруктураПараметров.Налоговый;
				СтруктураПараметров.Удалить("Налоговый");
			КонецЕсли;
			
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРеализация0_КурсовыеРазницы(СтруктураПараметров, ТаблицаАвансовДляНДС, Отказ);

			//Добавим в СтруктураПараметров удаленный ранее элемент ПроводкиНУ, Налоговый
			Если ВремПроводкиНУ <> Неопределено Тогда
				СтруктураПараметров.Вставить("ПроводкиНУ", ВремПроводкиНУ);
				ВремПроводкиНУ = Неопределено;
			КонецЕсли;
		    Если ВремНалоговый <> Неопределено Тогда
				СтруктураПараметров.Вставить("Налоговый", ВремНалоговый);
				ВремНалоговый = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		            
	КонецЕсли;
	
	//АБС+ Тупиков
	Если ВыделятьАвансыПриКорректировке Тогда
		СуммаРасхожденийВал	= СуммаВыделенногоАвансаВал;
		СуммаРасхожденийРег = СуммаВыделенногоАвансаРег;
	Иначе
		СуммаРасхожденийВал   = ?(ЭтоВозврат И Продажи, СуммаДокументаВал, СуммаАвансаВал);
		СуммаРасхожденийРег   = ?(ЭтоВозврат И Продажи, СуммаДокументаРег, СуммаАвансаРег);
	КонецЕсли;
	//АБС- Тупиков
	НужнаПроводкаПоАвансу = (СуммаРасхожденийВал <> 0 ИЛИ СуммаРасхожденийРег <> 0) И (НЕ СчетОплаты = СчетАванса);
	
	//АБС+ Тупиков
	Если ЗачетАвансаКакВыделениеАванса И НЕ ВыделятьАвансыПриКорректировке 
		И СуммаРасхожденийВал > 0 И СуммаРасхожденийРег > 0 Тогда 
		// тоже случай выделения аванса - зачет отрицательных сумм по остатку
		ВыделятьАвансыПриКорректировке = Истина;
		СуммаРасхожденийВал = - СуммаРасхожденийВал;
		СуммаРасхожденийРег = - СуммаРасхожденийРег;
	КонецЕсли;
	
	Если ВыделятьАвансыПриКорректировке Тогда
		Если Покупки Тогда
			СодержаниеОперации = "Выделение аванса поставщику";	
		Иначе 
			СодержаниеОперации = "Выделение аванса покупателя";	
		КонецЕсли;
	ИначеЕсли ЭтоВозврат Тогда
	//АБС- Тупиков
			Если Покупки Тогда
			СодержаниеОперации = "Возврат поставщику (неоплаченная часть)";
		Иначе
			СодержаниеОперации = "Возврат от покупателя (оплаченная часть)";
		КонецЕсли;
	Иначе
		Если Покупки Тогда
			СодержаниеОперации = "Зачет аванса поставщику";
		Иначе
			СодержаниеОперации = "Зачет аванса покупателя";
		КонецЕслИ;
	КонецЕслИ;

	// Корректируем сумму зачтенного аванса по состоянию расчетов на регистре
	
	Если НужнаПроводкаПоАвансу Тогда
		
		Проводка   = ПроводкиБУ.Добавить();
		
		Проводка.Период                  = ДатаДока;
		Проводка.Организация             = Организация;
		Проводка.Содержание              = СодержаниеОперации;
		Проводка.ВидРегламентнойОперации = ВидРегОперацииКорр;
		
		//АБС+ Тупиков
		Если ВыделятьАвансыПриКорректировке Тогда 
			Если Покупки Тогда
				Проводка.СчетДт = СчетАванса;
				Проводка.СчетКт = СчетОплаты;
			Иначе
				Проводка.СчетДт = СчетОплаты;
				Проводка.СчетКт = СчетАванса;
			КонецЕсли;
		Иначе
			Если Покупки Тогда
				Проводка.СчетДт = СчетОплаты;
				Проводка.СчетКт = СчетАванса;
			Иначе
				Проводка.СчетДт = СчетАванса;
				Проводка.СчетКт = СчетОплаты;
			КонецЕсли;
		КонецЕсли;
		//АБС- Тупиков
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты"	,Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"		,ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты"	,Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"		,ДоговорКонтрагента);
		
		Если СтруктураПараметров.РасчетыВУсловныхЕдиницах ИЛИ РасчетыВВалюте2008 Тогда
			Проводка.Сумма = -СуммаРасхожденийРег;
		Иначе
			Проводка.Сумма = -СуммаРасхожденийРег - СуммоваяРазница;
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = -СуммаРасхожденийВал;
			КонецЕсли; 
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = -СуммаРасхожденийВал;
			КонецЕсли;
		КонецЕсли;
		
		// В 2008 году при зачете валютного аванса одновремено закрываем счет ВАЛ
		Если ФормироватьПроводкиПоСчетуВАЛ	Тогда
		
			Проводка   = ПроводкиБУ.Добавить();
			
			Проводка.Период                  = ДатаДока;
			Проводка.Организация             = Организация;
			Проводка.Содержание              = СодержаниеОперации;
			Проводка.ВидРегламентнойОперации = ВидРегОперацииКорр;
			
			Если Покупки Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты"	,Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"		,ДоговорКонтрагента);
				Проводка.ВалютаКт        = ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = -СуммаРасхожденийВал;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты"	,Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"		,ДоговорКонтрагента);
				Проводка.ВалютаДт        = ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = -СуммаРасхожденийВал;
			КонецЕсли;
			
			Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(-СуммаРасхожденийВал,
				ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
				КурсРасчетов, 1,
				КратностьРасчетов, 1);
			
		КонецЕсли;
			
	КонецЕсли;
	
	// Распределение курсовой (суммовой) разницы, формирование корректирующих движений
	// выполняется только при восстановлении последовательности расчетов
	
	//АБС ВСТАВКА №9181 НАЧАЛО
	
	//Если НЕ ВызванРегламентнойПроцедурой Тогда
	//	Возврат Истина;
	//КонецЕсли;

	Попытка
	
		Если СтруктураПараметров.Свойство("ВалютаДокумента") и НЕ ВызванРегламентнойПроцедурой Тогда
			Если СтруктураПараметров.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
				Возврат Истина;
			КонецЕсли;			
		ИначеЕсли НЕ ВызванРегламентнойПроцедурой Тогда	
			Возврат Истина;
		КонецЕсли;
	
	Исключение
		//На всякий случай
		Возврат Истина;
	КонецПопытки;
	
	Если УдаляемыеВидыРегОпераций = Неопределено Тогда
		УдаляемыеВидыРегОпераций = Новый Массив;
		УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовПриобретение);
		УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация);
		УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах);
		УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.СуммовыеРазницы);
		УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСчетов);	
	КонецЕсли;	
		
	Если СтруктураДвижений = Неопределено Тогда 
		СтруктураДвижений = Новый Структура;
	Конецесли;
	
	//\\АБС ВСТАВКА №9181КОНЕЦ
	
	Если НЕ (СтруктураПараметров.РасчетыВУсловныхЕдиницах ИЛИ РасчетыВВалюте2008)
		ИЛИ СуммоваяРазница = 0 
		Тогда
		Возврат СтруктураДвижений;
    ИначеЕсли (ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("По результатам зачета авансов обнаружена суммовая разница в размере "+СуммоваяРазница+" "+ВалютаРегламентированногоУчета+"
		|Распределение суммовой разницы по движениям не может быть произведено, так как документ выписан в валюте регл.учета.
		|Отразите изменения самостоятельно.",,Заголовок);
		Возврат СтруктураДвижений;
	КонецЕсли;
	
	СуммоваяРазницаПоДокументам = Новый ТаблицаЗначений();
	СуммоваяРазницаПоДокументам.Колонки.Добавить("Регистратор");
	СуммоваяРазницаПоДокументам.Колонки.Добавить("СуммоваяРазница",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	СуммоваяРазницаПоДокументам.Колонки.Добавить("Документ", Документы.ТипВсеСсылки());
	СуммоваяРазницаПоДокументам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	СуммоваяРазницаПоДокументам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	СуммоваяРазницаПоДокументам.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	СтрокаСуммовыхРазниц =  СуммоваяРазницаПоДокументам.Добавить();
	СтрокаСуммовыхРазниц.Регистратор = Ссылка;
	СтрокаСуммовыхРазниц.СуммоваяРазница = -СуммоваяРазница;
					
	СтрокаСуммовыхРазниц.Документ = Ссылка;
	СтрокаСуммовыхРазниц.Контрагент = Контрагент;
	СтрокаСуммовыхРазниц.ДоговорКонтрагента =  ДоговорКонтрагента;
	СтрокаСуммовыхРазниц.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДатаДока);
		
	Если РасчетыВВалюте2008 Тогда
		Если Не СтруктураПараметров.УчетАгентскогоНДС
			Или Продажи Тогда
			// Расчеты в иностранной валюте. Корректируется только стоимость без НДС или выручка по данным БУ.
			// Суммы НДС и налогового учета (НУ) не корректируются. В налоговом учете сумма корректировки становится постоянной разницей.
			
			//Подготовка таблицы распределения
			ТаблицаРаспределенияСР = Новый ТаблицаЗначений();
			ТаблицаРаспределенияСР.Колонки.Добавить("Регистратор");
			ТаблицаРаспределенияСР.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			ТаблицаРаспределенияСР.Колонки.Добавить("СуммаНДС",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
			СтрокаКРаспределнию = ТаблицаРаспределенияСР.Добавить();
			СтрокаКРаспределнию.Регистратор = Ссылка;
			СтрокаКРаспределнию.СуммаСНДС = -СуммоваяРазница;
			СтрокаКРаспределнию.СуммаНДС = 0;
			
			Распределение = Новый структура("СуммаСНДС");
			ИсключитьБазовый = Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,СуммаНДС");
			
			ТаблицаРаспределенияСР = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаРегистрации,Распределение,,ИсключитьБазовый);
			ТаблицаРаспределенияСР.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			Дополнение = Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
			Для каждого Строка из ТаблицаРаспределенияСР Цикл
				Строка.СуммаБезНДС = Строка.СуммаСНДС;
			КонецЦикла;//Подготовка таблицы распределения
			
			//Движения по бухгалтерскому учету
			ТаблицаПроводок = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыБухгалтерии["Хозрасчетный"], Истина);
			ТаблицаПроводокБУ = ТаблицаПроводок.Выгрузить();
			ИсключитьБазовый.Удалить("Активность");
			ИсключитьБазовый.Удалить("МоментВремени");
			ТаблицаПроводокБУ = БухгалтерскийУчет.УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(ТаблицаПроводокБУ);

			ИсключитьБазовый.Вставить("КоличествоДт");
			ИсключитьБазовый.Вставить("КоличествоКт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаДт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаКт");
			ИсключитьБазовый.Вставить("Содержание");

			СуфиксСчетаРасчетов = ?(Покупки,"Кт","Дт");
			СуфиксСчетаУчета 	= ?(Покупки,"Дт","Кт");
			Дополнение.Вставить("Содержание","Корректировка "+?(Покупки,"стоимости ","выручки ")+"по расчетам в валюте");

			//По основным проводкам БУ
			СтруктураОтбора = Новый Структура("Организация");
			СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,"КоррСчет");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"1","КоррСубконто1");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"2","КоррСубконто2");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"3","КоррСубконто3");
			СтруктураОтбора.Вставить("Счет"+СуфиксСчетаРасчетов,"СчетОплаты");
			Для каждого ВидСубконто из СчетОплаты.ВидыСубконто Цикл
				Если  ВидСубконто.ВидСубконто.Наименование = "Контрагенты" тогда
					СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"Контрагент");
				КонецЕсли;
				Если  ВидСубконто.ВидСубконто.Наименование = "Договоры" тогда
					СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"ДоговорКонтрагента");
				КонецЕсли;
			КонецЦикла;
			Если Покупки тогда
				Распределение = Новый Структура("Сумма",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
			Иначе
				Распределение = Новый Структура("Сумма","СуммаСНДС");
			Конецесли;

			ПоОсновнымПроводкам = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
			БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ПоОсновнымПроводкам);
		Иначе
			// Учет НДС при исполнении обязанностей налогового агента. Корректируются суммы БУ и НДС.
			//Подготовка таблицы распределения
			ТаблицаРаспределенияСР = Новый ТаблицаЗначений;
			ТаблицаРаспределенияСР.Колонки.Добавить("Регистратор");
			ТаблицаРаспределенияСР.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			ТаблицаРаспределенияСР.Колонки.Добавить("СуммаНДС",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
			СтрокаКРаспределению = ТаблицаРаспределенияСР.Добавить();
			СтрокаКРаспределению.Регистратор = Ссылка;
			ЗначениеСтавкиНДС = ТаблицаРегистрации.Итог("СуммаНДС")/(ТаблицаРегистрации.Итог("СуммаСНДС") - ТаблицаРегистрации.Итог("СуммаНДС"));
			СтрокаКРаспределению.СуммаНДС = Окр(-СуммоваяРазница*ЗначениеСтавкиНДС,2);
			
			// Вычислим общий НДС от исходной суммы + суммовая разница и сравним его с полученным НДС суммовой разницы
			// если есть погрешность в копейку - откорректируем её
			ОбщаяСуммаБазисаИСуммовойРазницыСНДС = ТаблицаРегистрации.Итог("СуммаСНДС") -СуммоваяРазница + СтрокаКРаспределению.СуммаНДС;
			НДС = Окр(УчетНДС.РассчитатьСуммуНДС(ОбщаяСуммаБазисаИСуммовойРазницыСНДС, Истина, Истина, 100 * Окр(ЗначениеСтавкиНДС, 2, 1)), 2, 1);
			Дельта = НДС - ТаблицаРегистрации.Итог("СуммаНДС") - СтрокаКРаспределению.СуммаНДС;
			
			Если Макс(Дельта, -Дельта) = 0.01 Тогда
				СтрокаКРаспределению.СуммаНДС = СтрокаКРаспределению.СуммаНДС + Дельта;
			КонецЕсли;
			
			СтрокаКРаспределению.СуммаСНДС = -СуммоваяРазница + СтрокаКРаспределению.СуммаНДС;
			
			Распределение = Новый структура("СуммаСНДС,СуммаНДС");
			ИсключитьБазовый = Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент");
			
			ТаблицаРаспределенияСР = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаРегистрации,Распределение,,ИсключитьБазовый);
			ТаблицаРаспределенияСР.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			ТаблицаРаспределенияСР.Колонки.Добавить("СчетРасчетыНДСНалоговогоАгента",Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			ТаблицаРаспределенияСР.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента, "СчетРасчетыНДСНалоговогоАгента");
			
			Дополнение = Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
			Для каждого Строка из ТаблицаРаспределенияСР Цикл
				 Строка.СуммаБезНДС = Строка.СуммаСНДС - Строка.СуммаНДС;
			КонецЦикла;//Подготовка таблицы распределения
			
			//Движения по бухгалтерскому учету
			ТаблицаПроводок = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыБухгалтерии["Хозрасчетный"], Истина);
			ТаблицаПроводокБУ = ТаблицаПроводок.Выгрузить();
			ИсключитьБазовый.Удалить("Активность");
			ИсключитьБазовый.Удалить("МоментВремени");
			ТаблицаПроводокБУ = БухгалтерскийУчет.УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(ТаблицаПроводокБУ);

			ИсключитьБазовый.Вставить("КоличествоДт");
			ИсключитьБазовый.Вставить("КоличествоКт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаДт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаКт");
			ИсключитьБазовый.Вставить("Содержание");

			СуфиксСчетаРасчетов = ?(Покупки,"Кт","Дт");
			СуфиксСчетаУчета 	= ?(Покупки,"Дт","Кт");
			Дополнение.Вставить("Содержание","Корректировка "+?(Покупки,"стоимости ","выручки ")+"по расчетам в " + ?(СтруктураПараметров.РасчетыВУсловныхЕдиницах, "у.е.", "валюте"));

			//По основным проводкам БУ
			СтруктураОтбора = Новый Структура("Организация");
			СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,"КоррСчет");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"1","КоррСубконто1");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"2","КоррСубконто2");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"3","КоррСубконто3");
			СтруктураОтбора.Вставить("Счет"+СуфиксСчетаРасчетов,"СчетОплаты");
			Для каждого ВидСубконто из СчетОплаты.ВидыСубконто Цикл
				Если  ВидСубконто.ВидСубконто.Наименование = "Контрагенты" тогда
					СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"Контрагент");
				КонецЕсли;
				Если  ВидСубконто.ВидСубконто.Наименование = "Договоры" тогда
					СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"ДоговорКонтрагента");
				КонецЕсли;
			КонецЦикла;
			Распределение = Новый Структура("Сумма",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));

			ПоОсновнымПроводкам = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
			БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ПоОсновнымПроводкам);
			
			//По НДС
			//По проводкам НДС
			Если не НДСВключенВСтоимость тогда
				// Проводка Дт 19 Кт СчетОплаты
				СтруктураОтбора = Новый Структура("Организация");
				СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,    "СчетНДС");
				СтруктураОтбора.Вставить("Счет"+СуфиксСчетаРасчетов, "СчетОплаты");
				Для каждого ВидСубконто из СчетОплаты.ВидыСубконто Цикл
					Если  ВидСубконто.ВидСубконто.Наименование = "Контрагенты" тогда
						СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"Контрагент");
					КонецЕсли;
					Если  ВидСубконто.ВидСубконто.Наименование = "Договоры" тогда
						СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"ДоговорКонтрагента");
					КонецЕсли;
				КонецЦикла;
				Дополнение.Вставить("Содержание","Корректировка НДС по расчетам в у.е.");
				Распределение = Новый Структура("Сумма","СуммаНДС");

				ПоНДС = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
				БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ПоНДС);
				
				// Проводка Дт 19 Кт 76.НА
				СтруктураОтбора = Новый Структура("Организация");
				СтруктураОтбора.Вставить("СчетДт", "СчетНДС");
				СтруктураОтбора.Вставить("СчетКт", "СчетРасчетыНДСНалоговогоАгента");
				СтруктураОтбора.Вставить("СубконтоКт1", "Контрагент");
				СтруктураОтбора.Вставить("СубконтоКт2", "ДоговорКонтрагента");
				
				Дополнение.Вставить("Содержание","Корректировка НДС по расчетам при исполнении обязанностей налогового агента");
				Распределение = Новый Структура("Сумма","СуммаНДС");

				ПоНДС = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
				БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ПоНДС);
				
				// Проводка Дт 76.НА Кт СчетОплаты
				СтруктураОтбора = Новый Структура("Организация");
				СтруктураОтбора.Вставить("СчетДт", "СчетОплаты");
				СтруктураОтбора.Вставить("СчетКт", "СчетРасчетыНДСНалоговогоАгента");
				Для каждого ВидСубконто из СчетОплаты.ВидыСубконто Цикл
					Если ВидСубконто.ВидСубконто.Наименование = "Контрагенты" тогда
						СтруктураОтбора.Вставить("СубконтоДт" + ВидСубконто.НомерСтроки,"Контрагент");
					КонецЕсли;
					Если ВидСубконто.ВидСубконто.Наименование = "Договоры" тогда
						СтруктураОтбора.Вставить("СубконтоДт"+ВидСубконто.НомерСтроки,"ДоговорКонтрагента");
					КонецЕсли;
				КонецЦикла;
				СтруктураОтбора.Вставить("СубконтоКт1", "Контрагент");
				СтруктураОтбора.Вставить("СубконтоКт2", "ДоговорКонтрагента");
				
				Дополнение.Вставить("Содержание","Корректировка НДС по расчетам при исполнении обязанностей налогового агента");
				Распределение = Новый Структура("Сумма","СуммаНДС");

				ПоНДС = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
				БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ПоНДС);
				
			КонецЕсли;
			
			Движения_НДСПредъявленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСПредъявленный"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСПредъявленный, УдаляемыеВидыРегОпераций);
			Если Движения_НДСПредъявленный <> Неопределено И Движения_НДСПредъявленный.Модифицированность() Тогда
				Движения_НДСПредъявленный.Записать();
			КонецЕсли;
						
			Движения_НДСВключенныйВСтоимость = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСВключенныйВСтоимость"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСВключенныйВСтоимость, УдаляемыеВидыРегОпераций);
			Если Движения_НДСВключенныйВСтоимость <> Неопределено И Движения_НДСВключенныйВСтоимость.Модифицированность() Тогда
				Движения_НДСВключенныйВСтоимость.Записать();
			КонецЕсли;
						
			Движения_НДСПартииТоваров = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСПартииТоваров"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСПартииТоваров, УдаляемыеВидыРегОпераций);
			Если Движения_НДСПартииТоваров <> Неопределено И Движения_НДСПартииТоваров.Модифицированность() Тогда
				Движения_НДСПартииТоваров.Записать();
			КонецЕсли;
						
			Движения_НДСпоОСиНМА = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСпоОСиНМА"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСпоОСиНМА, УдаляемыеВидыРегОпераций);
			Если Движения_НДСпоОСиНМА <> Неопределено И Движения_НДСпоОСиНМА.Модифицированность() Тогда
				Движения_НДСпоОСиНМА.Записать();
			КонецЕсли;
						
			Движения_НДСПредъявленныйРеализация0 = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСПредъявленныйРеализация0"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСПредъявленныйРеализация0, УдаляемыеВидыРегОпераций);
			Если Движения_НДСПредъявленныйРеализация0 <> Неопределено И Движения_НДСПредъявленныйРеализация0.Модифицированность() Тогда
				Движения_НДСПредъявленныйРеализация0.Записать();
			КонецЕсли;
						
			Движения_НДСКосвенныеРасходы = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСКосвенныеРасходы"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСКосвенныеРасходы, УдаляемыеВидыРегОпераций);
			Если Движения_НДСКосвенныеРасходы <> Неопределено И Движения_НДСКосвенныеРасходы.Модифицированность() Тогда
				Движения_НДСКосвенныеРасходы.Записать();
			КонецЕсли;
						
			Движения_НДСНезавершенноеПроизводство = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСНезавершенноеПроизводство"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСНезавершенноеПроизводство, УдаляемыеВидыРегОпераций);
			Если Движения_НДСНезавершенноеПроизводство <> Неопределено И Движения_НДСНезавершенноеПроизводство.Модифицированность() Тогда
				Движения_НДСНезавершенноеПроизводство.Записать();
			КонецЕсли;
			
			//Удалим из СтруктураПараметров элемент "ПроводкиНУ", "Налоговый", чтобы избежать передачи мутабельного значения в модуль УчетНДСФормированиеДвижений
			ВремПроводкиНУ = неопределено;
			ВремНалоговый = неопределено;

			Если СтруктураПараметров.Свойство("ПроводкиНУ") Тогда
				ВремПроводкиНУ = СтруктураПараметров.ПроводкиНУ;
				СтруктураПараметров.Удалить("ПроводкиНУ");
			КонецЕсли;
		    Если СтруктураПараметров.Свойство("Налоговый") Тогда
				ВремНалоговый = СтруктураПараметров.Налоговый;
				СтруктураПараметров.Удалить("Налоговый");
			КонецЕсли;

			КорректироватьПоРасчетамНА = СтруктураПараметров.Свойство("ДоговорКонтрагента") И ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента) И СтруктураПараметров.ДоговорКонтрагента.НалоговыйАгентПоОплате; 
			УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураПараметров, СуммоваяРазницаПоДокументам, Истина, Истина, КорректироватьПоРасчетамНА);
				
			//Добавим в СтруктураПараметров удаленный ранее элемент ПроводкиНУ, Налоговый
			Если ВремПроводкиНУ <> неопределено Тогда
				СтруктураПараметров.Вставить("ПроводкиНУ",ВремПроводкиНУ);
				ВремПроводкиНУ = неопределено;
			КонецЕсли;
		    Если ВремНалоговый <> неопределено Тогда
				СтруктураПараметров.Вставить("Налоговый",ВремНалоговый);
				ВремНалоговый = неопределено;
			КонецЕсли;
			
		КонецЕсли;
        
        ТребуетсяКорректировкаПОНУ = Истина;
		//Если НЕ СтруктураПараметров.ПоддержкаПБУ18 Тогда
		//	Если НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
		//		ТребуетсяКорректировкаПОНУ = ЛОжь;
		//	КонецЕсли;
		//КонецЕсли;
		
		//По НУ
		Если СтруктураПараметров.ОтражатьВНалоговомУчете И ТребуетсяКорректировкаПОНУ тогда
			//Распределение по проводкам НУ
			ПроводкиНУ = СтруктураПараметров.ПроводкиНУ;
			ТаблицаПроводок = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыБухгалтерии["Налоговый"], Истина);
			ТаблицаПроводокНУ = ТаблицаПроводок.Выгрузить();
			ТаблицаПроводокНУ = БухгалтерскийУчет.УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(ТаблицаПроводокНУ);
			
			ИсключитьБазовый.Вставить("КоличествоДт");
			ИсключитьБазовый.Вставить("КоличествоКт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаДт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаКт");
			
			СуфиксСчетаРасчетов = ?(Покупки,"Кт","Дт");
			СуфиксСчетаУчета 	= ?(Покупки,"Дт","Кт");
			
			//По основным проводкам
			СтруктураОтбора = Новый Структура("Организация");
			СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,"СчетУчетаНУ");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"1","СубконтоНУ1");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"2","СубконтоНУ2");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"3","СубконтоНУ3");
			Распределение = Новый Структура("Сумма",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
			Дополнение.Вставить("Содержание","Корректировка "+?(Покупки,"стоимости ","выручки ")+"по расчетам в валюте");

			ПоПроводкамНУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокНУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
			СчетПВ = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			Для каждого ПроводкаНУ Из ПоПроводкамНУ Цикл
				Если ЗначениеЗаполнено(ПроводкаНУ.СчетДт) И ПроводкаНУ.СчетДт <> СчетПВ И НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
					ПроводкаНУ.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
				КонецЕсли;
				Если ЗначениеЗаполнено(ПроводкаНУ.СчетКт) И ПроводкаНУ.СчетКт <> СчетПВ И НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
					ПроводкаНУ.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
				КонецЕсли;
			КонецЦикла;
			БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиНУ, ПоПроводкамНУ);
		КонецЕсли;//По НУ
		
		Если Продажи Тогда 
			Если ИспользоватьРасширеннуюАналитику Тогда
			
				СтруктураСумм = Новый Структура;
				СтруктураСумм.Вставить("Стоимость",         -СуммоваяРазница);
				СтруктураСумм.Вставить("СтоимостьНУ",       0);
				СтруктураСумм.Вставить("Корректировка",     -СуммоваяРазница);
				
				УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоПереоценкеТоваровРеализация(Ссылка, СтруктураСумм);
			КонецЕсли;
			
			Возврат СтруктураДвижений;
		КонецЕсли;
		
		//Для покупок - дополнительные движения
		
		Если ИспользоватьРасширеннуюАналитику Тогда
		
			СтруктураСумм = Новый Структура;
			СтруктураСумм.Вставить("Стоимость",         -СуммоваяРазница);
			Если ОценкаДоходовРасходовПоКурсуАвансов Тогда
				СтруктураСумм.Вставить("СтоимостьНУ",       -СуммоваяРазница);
				СтруктураСумм.Вставить("ПостояннаяРазница", 0);
			Иначе
				СтруктураСумм.Вставить("СтоимостьНУ",       0);
				СтруктураСумм.Вставить("ПостояннаяРазница", -СуммоваяРазница);
			КонецЕсли;
			
			УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоПереоценкеТоваров(Ссылка, СтруктураСумм);
		
		Иначе
		
			//По партиям товаров БУ
			ДвиженияПоПартиямБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет, Истина);
			Если ДвиженияПоПартиямБУ <> Неопределено И ДвиженияПоПартиямБУ.Количество() > 0 Тогда
				БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияПоПартиямБУ,УдаляемыеВидыРегОпераций);
				СтруктураДвижений.Вставить("ДвиженияПоПартиямБУ",ДвиженияПоПартиямБУ);
				
				Распределение	= Новый Структура("Стоимость",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
				Отбор			= Новый Структура("Номенклатура,СчетУчета",,"КоррСчет");
				Исключить		= Новый Структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество");
				Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
				ПоПартиямБУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияПоПартиямБУ,Распределение,Отбор,Исключить,Дополнение);
				БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияПоПартиямБУ, ПоПартиямБУ);
			КонецЕсли;//По партиям товаров БУ
			
			//По партиям товаров НУ
			Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
				ДвиженияПоПартиямНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет,Истина);
				Если ДвиженияПоПартиямНУ <> Неопределено И ДвиженияПоПартиямНУ.Количество() > 0 Тогда
					БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияПоПартиямНУ,УдаляемыеВидыРегОпераций);
					СтруктураДвижений.Вставить("ДвиженияПоПартиямНУ",ДвиженияПоПартиямНУ);
					
					Распределение	= Новый Структура("Стоимость", ?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
					Отбор			= Новый Структура("Номенклатура,СчетУчета",,"СчетУчетаНУ");
					Исключить		= Новый Структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница,ПостояннаяРазница");
					Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
					ПоПартиямНУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияПоПартиямНУ,Распределение,Отбор,Исключить,Дополнение);
                    Если НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
                        ПоПартиямНУ.Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
                        ПоПартиямНУ.ЗагрузитьКолонку(ПоПартиямНУ.ВыгрузитьКолонку("Стоимость"), "ПостояннаяРазница");
                        ПоПартиямНУ.ЗаполнитьЗначения(0, "Стоимость");
                    КонецЕсли;
					БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияПоПартиямНУ, ПоПартиямНУ);
				КонецЕсли;
			КонецЕсли;//По партиям товаров НУ
			
			//По регистрам затрат незавершенного производства, брака в производстве, прочих затрат БУ,НУ
			Если Метаданные.РегистрыНакопления.Найти("БракВПроизводствеБухгалтерскийУчет") 			<> Неопределено
				И Метаданные.РегистрыНакопления.Найти("НезавершенноеПроизводствоБухгалтерскийУчет") <> Неопределено
				И Метаданные.РегистрыНакопления.Найти("ЗатратыБухгалтерскийУчет") 					<> Неопределено		Тогда

				БракБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет,Истина);
				ЕстьБракБУ = (БракБУ <> Неопределено);
				
				ТаблицаРаспределенияСР.Колонки.Добавить("НЗПБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ТаблицаРаспределенияСР.Колонки.Добавить("БракБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ТаблицаРаспределенияСР.Колонки.Добавить("ЗатрБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				
				Для каждого Строка из ТаблицаРаспределенияСР Цикл
					Если НЕ ЗначениеЗаполнено(Строка["СтатьяЗатрат"]) тогда
						Продолжить;
					КонецЕсли;
					СтатьяЗатрат = Строка["СтатьяЗатрат"];
					Если Не УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(СтатьяЗатрат) Тогда
						Продолжить;
					КонецЕсли;
					//По бухгалтерскому учету 
					Если СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
						Строка["НЗПБУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
					ИначеЕсли ЕстьБракБУ И СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
						Строка["БракБУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
					Иначе
						Строка["ЗатрБУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
					КонецЕсли;
				КонецЦикла;	
				
				//Незавершенное производство БУ
				Если ТаблицаРаспределенияСР.Итог("НЗПБУ") <> 0 Тогда
					ДвиженияНЗПБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.НезавершенноеПроизводствоБухгалтерскийУчет,Истина);
					Если ДвиженияНЗПБУ <> Неопределено И ДвиженияНЗПБУ.Количество() > 0 Тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНЗПБУ,УдаляемыеВидыРегОпераций);
						СтруктураДвижений.Вставить("ДвиженияНЗПБУ",ДвиженияНЗПБУ);
						
						Распределение	= Новый Структура("Стоимость","НЗПБУ");
						Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"КоррСчет");// ,Затрата ,,,"Номенклатура"
						Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
						Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
						Корр_НЗП_БУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияНЗПБУ,Распределение,Отбор,Исключить,Дополнение);
						БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияНЗПБУ, Корр_НЗП_БУ);
					КонецЕсли;	
				КонецЕсли;//Незавершенное производство БУ
				
				//Брак в производстве БУ
				Если ТаблицаРаспределенияСР.Итог("БракБУ") <> 0 Тогда
					ДвиженияБракБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет,Истина);
					Если ДвиженияБракБУ <> Неопределено И ДвиженияБракБУ.Количество() > 0 Тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияБракБУ,УдаляемыеВидыРегОпераций);
						СтруктураДвижений.Вставить("ДвиженияБракБУ",ДвиженияБракБУ);
						
						Распределение	= Новый Структура("Сумма","БракБУ");
						Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"КоррСчет");
						Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
						Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
						Корр_Брак_БУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияБракБУ,Распределение,Отбор,Исключить,Дополнение);
						БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияБракБУ, Корр_Брак_БУ);
					КонецЕсли;	
				КонецЕсли;//Брак в производстве БУ
				
				//Затраты БУ
				Если ТаблицаРаспределенияСР.Итог("ЗатрБУ") <> 0 Тогда
					ДвиженияЗатрБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ЗатратыБухгалтерскийУчет,Истина);
					Если ДвиженияЗатрБУ <> Неопределено И ДвиженияЗатрБУ.Количество() > 0 Тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияЗатрБУ,УдаляемыеВидыРегОпераций);
						СтруктураДвижений.Вставить("ДвиженияЗатрБУ",ДвиженияЗатрБУ);
					
						Распределение	= Новый Структура("Сумма","ЗатрБУ");
						Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"КоррСчет");
						Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
						Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
						Корр_Затр_БУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияЗатрБУ,Распределение,Отбор,Исключить,Дополнение);
						БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияЗатрБУ, Корр_Затр_БУ);
					КонецЕсли;	
				КонецЕсли;//Затраты БУ
				
				Если СтруктураПараметров.ОтражатьВНалоговомУчете 
					И Метаданные.РегистрыНакопления.Найти("БракВПроизводствеНалоговыйУчет") 			<> Неопределено
					И Метаданные.РегистрыНакопления.Найти("НезавершенноеПроизводствоНалоговыйУчет") 	<> Неопределено
					И Метаданные.РегистрыНакопления.Найти("ЗатратыНалоговыйУчет") 						<> Неопределено 	Тогда
					//Незавершенное производство НУ
					Если ТаблицаРаспределенияСР.Итог("НЗПБУ") <> 0 Тогда
						ДвиженияНЗПНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.НезавершенноеПроизводствоНалоговыйУчет,Истина);
						Если ДвиженияНЗПНУ <> Неопределено И ДвиженияНЗПНУ.Количество() > 0 Тогда
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНЗПНУ,УдаляемыеВидыРегОпераций);
							СтруктураДвижений.Вставить("ДвиженияНЗПНУ",ДвиженияНЗПНУ);
						
							Распределение	= Новый Структура("Стоимость", "НЗПБУ");
							Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"СчетУчетаНУ");// ,Затрата ,,,"Номенклатура"
							Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ПостояннаяРазница,ВременнаяРазница");
							Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
							Корр_НЗП_НУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияНЗПНУ,Распределение,Отбор,Исключить,Дополнение);
                            Если НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
                                Корр_НЗП_НУ.Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
                                Корр_НЗП_НУ.ЗагрузитьКолонку(Корр_НЗП_НУ.ВыгрузитьКолонку("Стоимость"), "ПостояннаяРазница");
                                Корр_НЗП_НУ.ЗаполнитьЗначения(0, "Стоимость");
                            КонецЕсли;
							БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияНЗПНУ, Корр_НЗП_НУ);
						КонецЕсли;	
					КонецЕсли;//Незавершенное производство НУ
					
					//Брак в производстве НУ
					Если ТаблицаРаспределенияСР.Итог("БракБУ") <> 0 Тогда
						ДвиженияБракНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеНалоговыйУчет,Истина);
						Если ДвиженияБракНУ <> Неопределено И ДвиженияБракНУ.Количество() > 0 Тогда
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияБракНУ,УдаляемыеВидыРегОпераций);
							СтруктураДвижений.Вставить("ДвиженияБракНУ",ДвиженияБракНУ);
						
							Распределение	= Новый Структура("Сумма", "БракБУ");
							Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"СчетУчетаНУ");
							Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ПостояннаяРазница,ВременнаяРазница");
							Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
							Корр_Брак_НУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияБракНУ,Распределение,Отбор,Исключить,Дополнение);
                            Если НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
                                Корр_Брак_НУ.Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
                                Корр_Брак_НУ.ЗагрузитьКолонку(Корр_Брак_НУ.ВыгрузитьКолонку("Сумма"), "ПостояннаяРазница");
                                Корр_Брак_НУ.ЗаполнитьЗначения(0, "Сумма");
                            КонецЕсли;
							БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияБракНУ, Корр_Брак_НУ);
						КонецЕсли;	
					КонецЕсли;//Брак в производстве НУ
					
					//Затраты НУ
					Если ТаблицаРаспределенияСР.Итог("ЗатрБУ") <> 0 Тогда
						ДвиженияЗатрНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ЗатратыНалоговыйУчет,Истина);
						Если ДвиженияЗатрНУ <> Неопределено И ДвиженияЗатрНУ.Количество() > 0 Тогда
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияЗатрНУ,УдаляемыеВидыРегОпераций);
							СтруктураДвижений.Вставить("ДвиженияЗатрНУ",ДвиженияЗатрНУ);
							
							Распределение	= Новый Структура("Сумма", "ЗатрБУ");
							Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"СчетУчетаНУ");
							Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ПостояннаяРазница,ВременнаяРазница");
							Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
							Корр_Затр_НУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияЗатрНУ,Распределение,Отбор,Исключить,Дополнение);
                            Если НЕ ОценкаДоходовРасходовПоКурсуАвансов Тогда
                                Корр_Затр_НУ.Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
                                Корр_Затр_НУ.ЗагрузитьКолонку(Корр_Затр_НУ.ВыгрузитьКолонку("Сумма"), "ПостояннаяРазница");
                                Корр_Затр_НУ.ЗаполнитьЗначения(0, "Сумма");
                            КонецЕсли;
							БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияЗатрНУ, Корр_Затр_НУ);
						КонецЕсли;	
					КонецЕсли;//Затраты НУ
					
				КонецЕсли;//По регистрам затрат незавершенного производства, брака в производстве, прочих затрат БУ,НУ
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		// Расчеты в условных единицах. Корректируются все суммы в БУ, НУ, НДС
		
		//Подготовка таблицы распределения
		ТаблицаРаспределенияСР = Новый ТаблицаЗначений;
		ТаблицаРаспределенияСР.Колонки.Добавить("Регистратор");
		ТаблицаРаспределенияСР.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТаблицаРаспределенияСР.Колонки.Добавить("СуммаНДС",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
		СтрокаКРаспределнию = ТаблицаРаспределенияСР.Добавить();
		СтрокаКРаспределнию.Регистратор = Ссылка;
		СтрокаКРаспределнию.СуммаСНДС = -СуммоваяРазница;
		СтрокаКРаспределнию.СуммаНДС = Окр(-СуммоваяРазница*ТаблицаРегистрации.Итог("СуммаНДС")/ТаблицаРегистрации.Итог("СуммаСНДС"),2);
		
		Распределение = Новый структура("СуммаСНДС,СуммаНДС");
		ИсключитьБазовый = Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент");
		
		ТаблицаРаспределенияСР = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаРегистрации,Распределение,,ИсключитьБазовый);
		ТаблицаРаспределенияСР.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		Дополнение = Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
		Для каждого Строка из ТаблицаРаспределенияСР Цикл
			 Строка.СуммаБезНДС = Строка.СуммаСНДС - Строка.СуммаНДС;
		КонецЦикла;//Подготовка таблицы распределения
		
		Если Продажи Тогда
			ТаблицаРаспределенияСР.Колонки.Добавить("КорсчетНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			ТаблицаРаспределенияСР.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДС, "КорсчетНДС");
		КонецЕсли;

		//Движения по бухгалтерскому учету
		ТаблицаПроводок = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыБухгалтерии["Хозрасчетный"], Истина);
		ТаблицаПроводокБУ = ТаблицаПроводок.Выгрузить();
		ИсключитьБазовый.Удалить("Активность");
		ИсключитьБазовый.Удалить("МоментВремени");
		ТаблицаПроводокБУ = БухгалтерскийУчет.УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(ТаблицаПроводокБУ);

		ИсключитьБазовый.Вставить("КоличествоДт");
		ИсключитьБазовый.Вставить("КоличествоКт");
		ИсключитьБазовый.Вставить("ВалютнаяСуммаДт");
		ИсключитьБазовый.Вставить("ВалютнаяСуммаКт");
		ИсключитьБазовый.Вставить("Содержание");

		СуфиксСчетаРасчетов = ?(Покупки,"Кт","Дт");
		СуфиксСчетаУчета 	= ?(Покупки,"Дт","Кт");
		Дополнение.Вставить("Содержание","Корректировка "+?(Покупки,"стоимости ","выручки ")+"по расчетам в у.е.");

		//По основным проводкам БУ
		СтруктураОтбора = Новый Структура("Организация");
		СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,"КоррСчет");
		СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"1","КоррСубконто1");
		СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"2","КоррСубконто2");
		СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"3","КоррСубконто3");
		СтруктураОтбора.Вставить("Счет"+СуфиксСчетаРасчетов,"СчетОплаты");
		Для каждого ВидСубконто из СчетОплаты.ВидыСубконто Цикл
			Если  ВидСубконто.ВидСубконто.Наименование = "Контрагенты" тогда
				СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"Контрагент");
			КонецЕсли;
			Если  ВидСубконто.ВидСубконто.Наименование = "Договоры" тогда
				СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"ДоговорКонтрагента");
			КонецЕсли;
		КонецЦикла;
		Если Покупки тогда
			Распределение = Новый Структура("Сумма",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
		Иначе
			Распределение = Новый Структура("Сумма","СуммаСНДС");
		Конецесли;

		//абсо + необходимо учесть что в проводках идет через 15.01 транзитом
		Счет15БУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("15.01");
		Счет15НУ = ПланыСчетов.Налоговый.НайтиПоКоду("15.01");
		
		втТаблицаРаспределенияСР = ТаблицаРаспределенияСР.Скопировать();
		
		Для Каждого стрРаспределенияСР Из втТаблицаРаспределенияСР Цикл
			
			Если Лев(стрРаспределенияСР.КоррСчет,2) = "10"       // Только 10 счет
				//И стрРаспределенияСР.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда   //АБС Коломиец 14745
				И НЕ стрРаспределенияСР.ВидЦенности = Перечисления.ВидыЦенностей.ОС Тогда
				
				стрРаспределенияСР.КоррСчет			= Счет15БУ;
				стрРаспределенияСР.КоррСубконто2	= Неопределено;
				
			КонецЕсли;			
			
		КонецЦикла;
		
		//ищем проводки Д15 - Кт60
		ПоОсновнымПроводкам = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(втТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
		БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ	, ПоОсновнымПроводкам);
		
		//ищем проводки Д10 - Кт15, остальные удаляем
		втТаблицаРаспределенияСР = ТаблицаРаспределенияСР.Скопировать();
		
		СписокСтрокНеДт10 = Новый Массив();
		
		Для Каждого стрРаспределенияСР Из втТаблицаРаспределенияСР Цикл
			
			Если Лев(стрРаспределенияСР.КоррСчет,2) = "10" Тогда // Только 10 счет
				
				стрРаспределенияСР.СчетОплаты			= Счет15БУ;
				
			Иначе
				СписокСтрокНеДт10.Добавить(стрРаспределенияСР);
				
			КонецЕсли;			
			
		КонецЦикла;
		
		Для Каждого СтрокаНеД10 Из СписокСтрокНеДт10 Цикл
			втТаблицаРаспределенияСР.Удалить(СтрокаНеД10);
		КонецЦикла;
		
		СтруктураОтбора.СубконтоКт1 = "Номенклатура";
		СтруктураОтбора.Удалить("СубконтоКт2");
						
		ПоОсновнымПроводкам = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(втТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
		БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ	, ПоОсновнымПроводкам);
		
		//По НДС
		//По проводкам НДС
		Если не НДСВключенВСтоимость тогда
			Если Покупки тогда
				СтруктураОтбора = Новый Структура("Организация");
				СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,    "СчетНДС");
				СтруктураОтбора.Вставить("Счет"+СуфиксСчетаРасчетов, "СчетОплаты");
				Для каждого ВидСубконто из СчетОплаты.ВидыСубконто Цикл
					Если  ВидСубконто.ВидСубконто.Наименование = "Контрагенты" тогда
						СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"Контрагент");
					КонецЕсли;
					Если  ВидСубконто.ВидСубконто.Наименование = "Договоры" тогда
						СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+ВидСубконто.НомерСтроки,"ДоговорКонтрагента");
					КонецЕсли;
				КонецЦикла;
			Иначе
				СтруктураОтбора = Новый Структура("Организация");
				СтруктураОтбора.Вставить("Счет"+СуфиксСчетаРасчетов,         "СчетНДС");
				СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+"1", "СубконтоНДС1");
				СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+"2", "СубконтоНДС2");
				СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаРасчетов+"3", "СубконтоНДС3");
				СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,            "КорсчетНДС");
			Конецесли;
			Дополнение.Вставить("Содержание","Корректировка НДС по расчетам в у.е.");
			Распределение = Новый Структура("Сумма","СуммаНДС");

			ПоНДС = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокБУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
			БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ПоНДС);
		КонецЕсли;
		
		//Удалим из СтруктураПараметров элемент "ПроводкиНУ", "Налоговый", чтобы избежать передачи мутабельного значения в модуль УчетНДСФормированиеДвижений
		ВремПроводкиНУ = неопределено;
		ВремНалоговый = неопределено;

		Если СтруктураПараметров.Свойство("ПроводкиНУ") Тогда
			ВремПроводкиНУ = СтруктураПараметров.ПроводкиНУ;
			СтруктураПараметров.Удалить("ПроводкиНУ");
		КонецЕсли;
	    Если СтруктураПараметров.Свойство("Налоговый") Тогда
			ВремНалоговый = СтруктураПараметров.Налоговый;
			СтруктураПараметров.Удалить("Налоговый");
		КонецЕсли;

		Если Покупки Тогда
			Движения_НДСПредъявленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСПредъявленный"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСПредъявленный, УдаляемыеВидыРегОпераций);
			Если Движения_НДСПредъявленный <> Неопределено И Движения_НДСПредъявленный.Модифицированность() Тогда
				Движения_НДСПредъявленный.Записать();
			КонецЕсли;
						
			Движения_НДСВключенныйВСтоимость = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСВключенныйВСтоимость"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСВключенныйВСтоимость, УдаляемыеВидыРегОпераций);
			Если Движения_НДСВключенныйВСтоимость <> Неопределено И Движения_НДСВключенныйВСтоимость.Модифицированность() Тогда
				Движения_НДСВключенныйВСтоимость.Записать();
			КонецЕсли;
						
			Движения_НДСПартииТоваров = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСПартииТоваров"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСПартииТоваров, УдаляемыеВидыРегОпераций);
			Если Движения_НДСПартииТоваров <> Неопределено И Движения_НДСПартииТоваров.Модифицированность() Тогда
				Движения_НДСПартииТоваров.Записать();
			КонецЕсли;
						
			Движения_НДСпоОСиНМА = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСпоОСиНМА"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСпоОСиНМА, УдаляемыеВидыРегОпераций);
			Если Движения_НДСпоОСиНМА <> Неопределено И Движения_НДСпоОСиНМА.Модифицированность() Тогда
				Движения_НДСпоОСиНМА.Записать();
			КонецЕсли;
						
			Движения_НДСПредъявленныйРеализация0 = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСПредъявленныйРеализация0"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСПредъявленныйРеализация0, УдаляемыеВидыРегОпераций);
			Если Движения_НДСПредъявленныйРеализация0 <> Неопределено И Движения_НДСПредъявленныйРеализация0.Модифицированность() Тогда
				Движения_НДСПредъявленныйРеализация0.Записать();
			КонецЕсли;
						
			Движения_НДСКосвенныеРасходы = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСКосвенныеРасходы"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСКосвенныеРасходы, УдаляемыеВидыРегОпераций);
			Если Движения_НДСКосвенныеРасходы <> Неопределено И Движения_НДСКосвенныеРасходы.Модифицированность() Тогда
				Движения_НДСКосвенныеРасходы.Записать();
			КонецЕсли;
						
			Движения_НДСНезавершенноеПроизводство = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор,  РегистрыНакопления["НДСНезавершенноеПроизводство"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСНезавершенноеПроизводство, УдаляемыеВидыРегОпераций);
			Если Движения_НДСНезавершенноеПроизводство <> Неопределено И Движения_НДСНезавершенноеПроизводство.Модифицированность() Тогда
				Движения_НДСНезавершенноеПроизводство.Записать();
			КонецЕсли;
			УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураПараметров, СуммоваяРазницаПоДокументам, Истина, Истина);
								
		ИначеЕсли Продажи Тогда
			ДвиженияНДСНачисленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСНачисленный"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСНачисленный, УдаляемыеВидыРегОпераций);
			Если ДвиженияНДСНачисленный <> Неопределено И ДвиженияНДСНачисленный.Модифицированность() Тогда
				ДвиженияНДСНачисленный.Записать();
			КонецЕсли;

			Движения_НДСРеализация0 = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка,  РегистрыНакопления["НДСРеализация0"], Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Движения_НДСРеализация0, УдаляемыеВидыРегОпераций);
			Если Движения_НДСРеализация0 <> Неопределено И Движения_НДСРеализация0.Модифицированность() Тогда
				Движения_НДСРеализация0.Записать();
			КонецЕсли;
			УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Реализация(СтруктураПараметров, СуммоваяРазницаПоДокументам, Истина, Истина);
			
		КонецЕсли;
		
		//Добавим в СтруктураПараметров удаленный ранее элемент ПроводкиНУ, Налоговый
		Если ВремПроводкиНУ <> неопределено Тогда
			СтруктураПараметров.Вставить("ПроводкиНУ",ВремПроводкиНУ);
			ВремПроводкиНУ = неопределено;
		КонецЕсли;
	    Если ВремНалоговый <> неопределено Тогда
			СтруктураПараметров.Вставить("Налоговый",ВремНалоговый);
			ВремНалоговый = неопределено;
		КонецЕсли;
		
		//По НУ
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			//Распределение по проводкам НУ
			ПроводкиНУ = СтруктураПараметров.проводкиНУ;
			ТаблицаПроводок = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыБухгалтерии["Налоговый"], Истина);
			ТаблицаПроводокНУ = ТаблицаПроводок.Выгрузить();
			ТаблицаПроводокНУ = БухгалтерскийУчет.УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(ТаблицаПроводокНУ);
			
			ИсключитьБазовый.Вставить("КоличествоДт");
			ИсключитьБазовый.Вставить("КоличествоКт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаДт");
			ИсключитьБазовый.Вставить("ВалютнаяСуммаКт");
			
			СуфиксСчетаРасчетов = ?(Покупки,"Кт","Дт");
			СуфиксСчетаУчета 	= ?(Покупки,"Дт","Кт");
			
			//По основным проводкам
			СтруктураОтбора = Новый Структура("Организация");
			СтруктураОтбора.Вставить("Счет"+СуфиксСчетаУчета,"СчетУчетаНУ");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"1","СубконтоНУ1");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"2","СубконтоНУ2");
			СтруктураОтбора.Вставить("Субконто"+СуфиксСчетаУчета+"3","СубконтоНУ3");
			Распределение = Новый Структура("Сумма",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
			Дополнение.Вставить("Содержание","Корректировка "+?(Покупки,"стоимости ","выручки ")+"по расчетам в у.е.");

			//ищем проводки Д10 - Кт15, остальные удаляем
			втТаблицаРаспределенияСР = ТаблицаРаспределенияСР.Скопировать();
			
			СписокСтрокНеДт10 = Новый Массив();
			
			Для Каждого стрРаспределенияСР Из втТаблицаРаспределенияСР Цикл
				
				Если Лев(стрРаспределенияСР.СчетУчетаНУ,2) = "10" Тогда // Только 10 счет
					
					стрРаспределенияСР.СчетУчетаНУ			= Счет15НУ;
					стрРаспределенияСР.СубконтоНУ2			= Неопределено;
					
				Иначе
					СписокСтрокНеДт10.Добавить(стрРаспределенияСР);
					
				КонецЕсли;			
				
			КонецЦикла;
			
			Для Каждого СтрокаНеД10 Из СписокСтрокНеДт10 Цикл
				втТаблицаРаспределенияСР.Удалить(СтрокаНеД10);
			КонецЦикла;
			
			ПоПроводкамНУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(втТаблицаРаспределенияСР,ТаблицаПроводокНУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
			БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиНУ	, ПоПроводкамНУ);
			
			ПоПроводкамНУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ТаблицаПроводокНУ,Распределение,СтруктураОтбора,ИсключитьБазовый,Дополнение);
			БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ПроводкиНУ	, ПоПроводкамНУ);
		КонецЕсли;//По НУ
		
		Если Продажи Тогда 
			Если ИспользоватьРасширеннуюАналитику Тогда
				
				СтруктураСумм = Новый Структура;
				СтруктураСумм.Вставить("Стоимость",     0);
				СтруктураСумм.Вставить("СтоимостьНУ",   0);
				СтруктураСумм.Вставить("Корректировка", ?(НДСВключенВСтоимость, 
					ТаблицаРаспределенияСР.Итог("СуммаСНДС"), 
					ТаблицаРаспределенияСР.Итог("СуммаБезНДС")));
				
				УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоПереоценкеТоваровРеализация(Ссылка, СтруктураСумм);
			КонецЕсли;
			Возврат СтруктураДвижений;
			
		КонецЕсли;
		
		//Для покупок - дополнительные движения
		
		Если ИспользоватьРасширеннуюАналитику Тогда
		
			СтруктураСумм = Новый Структура;
			СуммаРаспределения = ?(НДСВключенВСтоимость, ТаблицаРаспределенияСР.Итог("СуммаСНДС"), ТаблицаРаспределенияСР.Итог("СуммаБезНДС"));
			СтруктураСумм.Вставить("Стоимость",         СуммаРаспределения);
			СтруктураСумм.Вставить("СтоимостьНУ",       СуммаРаспределения);
			СтруктураСумм.Вставить("ПостояннаяРазница", 0);
			
			УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоПереоценкеТоваров(Ссылка, СтруктураСумм);
		
		Иначе
			
			//По партиям товаров БУ
			ДвиженияПоПартиямБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет, Истина);
			Если ДвиженияПоПартиямБУ <> Неопределено И ДвиженияПоПартиямБУ.Количество() > 0 Тогда
				БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияПоПартиямБУ,УдаляемыеВидыРегОпераций);
				СтруктураДвижений.Вставить("ДвиженияПоПартиямБУ",ДвиженияПоПартиямБУ);
				
				Распределение	= Новый Структура("Стоимость",?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС"));
				Отбор			= Новый Структура("Номенклатура,СчетУчета",,"КоррСчет"); // ,Склад
				Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество");
				Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
				ПоПартиямБУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияПоПартиямБУ,Распределение,Отбор,Исключить,Дополнение);
				БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияПоПартиямБУ, ПоПартиямБУ);
			КонецЕсли;//По партиям товаров БУ
			
			//По партиям товаров НУ
			Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
				ДвиженияПоПартиямНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет,Истина);
				Если ДвиженияПоПартиямНУ <> Неопределено И ДвиженияПоПартиямНУ.Количество() > 0 Тогда
					БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияПоПартиямНУ,УдаляемыеВидыРегОпераций);
					СтруктураДвижений.Вставить("ДвиженияПоПартиямНУ",ДвиженияПоПартиямНУ);
					
			        ТаблицаРаспределенияСР.Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ТаблицаРаспределенияСР.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					Для каждого Строка из ТаблицаРаспределенияСР цикл
						Если НЕ ЗначениеЗаполнено(Строка["СтатьяЗатрат"]) тогда
							Строка["Стоимость"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
						ИначеЕсли Строка["СтатьяЗатрат"].ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения тогда
							Строка["ПостояннаяРазница"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
						Иначе
							Строка["Стоимость"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
						КонецЕсли;
					КонецЦикла;
					Распределение	= Новый Структура("Стоимость,ПостояннаяРазница");
					Отбор			= Новый Структура("Номенклатура,СчетУчета",,"СчетУчетаНУ");
					Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
					Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
					ПоПартиямНУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияПоПартиямНУ,Распределение,Отбор,Исключить,Дополнение);
					БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияПоПартиямНУ, ПоПартиямНУ);
					ТаблицаРаспределенияСР.Колонки.Удалить("Стоимость");
					ТаблицаРаспределенияСР.Колонки.Удалить("ПостояннаяРазница");
				КонецЕсли;
			КонецЕсли;//По партиям товаров НУ
			
			//По регистрам затрат незавершенного производства, брака в производстве, прочих затрат БУ,НУ
			Если Метаданные.РегистрыНакопления.Найти("БракВПроизводствеБухгалтерскийУчет") 			<> Неопределено
				И Метаданные.РегистрыНакопления.Найти("БракВПроизводствеНалоговыйУчет") 			<> Неопределено
				И Метаданные.РегистрыНакопления.Найти("НезавершенноеПроизводствоБухгалтерскийУчет") <> Неопределено
				И Метаданные.РегистрыНакопления.Найти("НезавершенноеПроизводствоНалоговыйУчет") 	<> Неопределено
				И Метаданные.РегистрыНакопления.Найти("ЗатратыБухгалтерскийУчет") 					<> Неопределено
				И Метаданные.РегистрыНакопления.Найти("ЗатратыНалоговыйУчет") 						<> Неопределено Тогда

				//По регистрам затрат незавершенного производства, брака в производстве, прочих затрат БУ,НУ
				БракБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет,Истина);
				ЕстьБракБУ = (БракБУ <> Неопределено);
				
				ТаблицаРаспределенияСР.Колонки.Добавить("НЗПБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ТаблицаРаспределенияСР.Колонки.Добавить("БракБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ТаблицаРаспределенияСР.Колонки.Добавить("ЗатрБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				
				Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
					БракНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеНалоговыйУчет,Истина);
					ТаблицаРаспределенияСР.Колонки.Добавить("НЗПНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ТаблицаРаспределенияСР.Колонки.Добавить("НЗПНУПР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ТаблицаРаспределенияСР.Колонки.Добавить("БракНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ТаблицаРаспределенияСР.Колонки.Добавить("БракНУПР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ТаблицаРаспределенияСР.Колонки.Добавить("ЗатрНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ТаблицаРаспределенияСР.Колонки.Добавить("ЗатрНУПР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					ЕстьБракНУ = (БракНУ <> Неопределено);
				КонецЕсли;

				Для каждого Строка из ТаблицаРаспределенияСР Цикл
					
					СтатьяЗатрат = Строка.СтатьяЗатрат;
					Если НЕ ЗначениеЗаполнено(СтатьяЗатрат) тогда
						Продолжить;
					КонецЕсли;
					Если Не УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(СтатьяЗатрат) Тогда
						Продолжить;
					КонецЕсли;
					
					//По бухгалтерскому учету 
					Если СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
						Строка["НЗПБУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
					ИначеЕсли ЕстьБракБУ И СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
						Строка["БракБУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
					Иначе
						Строка["ЗатрБУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
					КонецЕсли;
					
					//По налоговому учету
					Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
						СчетЗатратНУ = Строка["СчетУчетаНУ"];
						Если СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
						    Если СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
						 		Строка["НЗПНУПР"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
							Иначе
								Строка["НЗПНУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
							КонецЕсли;
						ИначеЕсли ЕстьБракНУ И СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			 			    Если СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
						 		Строка["БракНУПР"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
							Иначе
								Строка["БракНУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
							КонецЕсли;
			 			ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения
							  ИЛИ СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы
							  ИЛИ СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
							  ИЛИ СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
						    Если СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
						 		Строка["ЗатрНУПР"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
							Иначе
								Строка["ЗатрНУ"] = Строка[?(НДСВключенВСтоимость,"СуммаСНДС","СуммаБезНДС")];
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;	
				
				//Незавершенное производство БУ
				Если ТаблицаРаспределенияСР.Итог("НЗПБУ") <> 0 Тогда
					ДвиженияНЗПБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.НезавершенноеПроизводствоБухгалтерскийУчет,Истина);
					Если ДвиженияНЗПБУ <> Неопределено И ДвиженияНЗПБУ.Количество() > 0 Тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНЗПБУ,УдаляемыеВидыРегОпераций);
						СтруктураДвижений.Вставить("ДвиженияНЗПБУ",ДвиженияНЗПБУ);
						
						Распределение	= Новый Структура("Стоимость","НЗПБУ");
						Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"КоррСчет");
						Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
						Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
						Корр_НЗП_БУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияНЗПБУ,Распределение,Отбор,Исключить,Дополнение);
						БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияНЗПБУ, Корр_НЗП_БУ);
					КонецЕсли;	
				КонецЕсли;//Незавершенное производство БУ
				
				//Брак в производстве БУ
				Если ТаблицаРаспределенияСР.Итог("БракБУ") <> 0 Тогда
					ДвиженияБракБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет,Истина);
					Если ДвиженияБракБУ <> Неопределено И ДвиженияБракБУ.Количество() > 0 Тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияБракБУ,УдаляемыеВидыРегОпераций);
						СтруктураДвижений.Вставить("ДвиженияБракБУ",ДвиженияБракБУ);
						
						Распределение	= Новый Структура("Сумма","БракБУ");
						Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"КоррСчет");
						Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
						Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
						Корр_Брак_БУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияБракБУ,Распределение,Отбор,Исключить,Дополнение);
						БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияБракБУ, Корр_Брак_БУ);
					КонецЕсли;	
				КонецЕсли;//Брак в производстве БУ
				
				//Затраты БУ
				Если ТаблицаРаспределенияСР.Итог("ЗатрБУ") <> 0 Тогда
					ДвиженияЗатрБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ЗатратыБухгалтерскийУчет,Истина);
					Если ДвиженияЗатрБУ <> Неопределено И ДвиженияЗатрБУ.Количество() > 0 Тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияЗатрБУ,УдаляемыеВидыРегОпераций);
						СтруктураДвижений.Вставить("ДвиженияЗатрБУ",ДвиженияЗатрБУ);
					
						Распределение	= Новый Структура("Сумма","ЗатрБУ");
						Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"КоррСчет");
						Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
						Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
						Корр_Затр_БУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияЗатрБУ,Распределение,Отбор,Исключить,Дополнение);
						БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияЗатрБУ, Корр_Затр_БУ);
					КонецЕсли;	
				КонецЕсли;//Затраты БУ
				
				Если СтруктураПараметров.ОтражатьВНалоговомУчете Тогда
					
					//Незавершенное производство НУ
					Если ТаблицаРаспределенияСР.Итог("НЗПНУ") <> 0 ИЛИ ТаблицаРаспределенияСР.Итог("НЗПНУПР") <> 0 Тогда
						ДвиженияНЗПНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.НезавершенноеПроизводствоНалоговыйУчет,Истина);
						Если ДвиженияНЗПНУ <> Неопределено И ДвиженияНЗПНУ.Количество() > 0 Тогда
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНЗПНУ,УдаляемыеВидыРегОпераций);
							СтруктураДвижений.Вставить("ДвиженияНЗПНУ",ДвиженияНЗПНУ);
						
							Распределение	= Новый Структура("Стоимость,ПостояннаяРазница","НЗПНУ","НЗПНУПР");
							Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"СчетУчетаНУ");// ,Затрата ,,,"Номенклатура"
							Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
							Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
							Корр_НЗП_НУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияНЗПНУ,Распределение,Отбор,Исключить,Дополнение);
							БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияНЗПНУ, Корр_НЗП_НУ);
						КонецЕсли;	
					КонецЕсли;//Незавершенное производство НУ
					
					//Брак в производстве НУ
					Если ТаблицаРаспределенияСР.Итог("БракНУ") <> 0 ИЛИ ТаблицаРаспределенияСР.Итог("БракНУПР") <> 0 Тогда
						ДвиженияБракНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеНалоговыйУчет,Истина);
						Если ДвиженияБракНУ <> Неопределено И ДвиженияБракНУ.Количество() > 0 Тогда
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияБракНУ,УдаляемыеВидыРегОпераций);
							СтруктураДвижений.Вставить("ДвиженияБракНУ",ДвиженияБракНУ);
					
							Распределение	= Новый Структура("Сумма,ПостояннаяРазница","БракНУ","БракНУПР");
							Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"СчетУчетаНУ");
							Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
							Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
							Корр_Брак_НУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияБракНУ,Распределение,Отбор,Исключить,Дополнение);
							БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияБракНУ, Корр_Брак_НУ);
						КонецЕсли;	
					КонецЕсли;//Брак в производстве НУ
					
					//Затраты НУ
					Если ТаблицаРаспределенияСР.Итог("ЗатрНУ") <> 0 ИЛИ ТаблицаРаспределенияСР.Итог("ЗатрНУПР") <> 0 Тогда
						ДвиженияЗатрНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ЗатратыНалоговыйУчет,Истина);
						Если ДвиженияЗатрНУ <> Неопределено И ДвиженияЗатрНУ.Количество() > 0 Тогда
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияЗатрНУ,УдаляемыеВидыРегОпераций);
							СтруктураДвижений.Вставить("ДвиженияЗатрНУ",ДвиженияЗатрНУ);
						
							Распределение	= Новый Структура("Сумма,ПостояннаяРазница","ЗатрНУ","ЗатрНУПР");
							Отбор			= Новый Структура("Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа",,"СчетУчетаНУ");
							Исключить		= Новый структура("Активность,МоментВремени,НомерСтроки,НомерСтрокиДокумента,СуммаВзаиморасчетов,ДатаЗаписи,ВидРегламентнойОперации,РегламентныйДокумент,Количество,ВременнаяРазница");
							Дополнение 		= Новый Структура ("ВидРегламентнойОперации",ВидРегОперацииКорр);
							Корр_Затр_НУ = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаРаспределенияСР,ДвиженияЗатрНУ,Распределение,Отбор,Исключить,Дополнение);
							БухгалтерскийУчет.ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(ДвиженияЗатрНУ, Корр_Затр_НУ);
						КонецЕсли;	
					КонецЕсли;//Затраты НУ
					
				КонецЕсли;//По регистрам затрат незавершенного производства, брака в производстве, прочих затрат БУ,НУ
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДвижений;
	
КонецФункции // РасчетыВУсловныхЕдиницахПриобретениеРеализация
//\\АБС ВСТАВКА №9181 КОНЕЦ

#Если Клиент Тогда

// Печатает справку-расчет формирования рублевой стоимости валютного документа
//
// Параметры:
//  ДокументСсылка - ссылка на документ, справку по которому печатаем
//
Процедура НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(ДокументСсылка) экспорт

	СправкаРасчет          = Отчеты.СправкаРасчетРублеваяСуммаДокументаВВалюте.Создать();
	СправкаРасчет.Документ = ДокументСсылка;
	СправкаРасчет.СформироватьИВывестиОтчет();

КонецПроцедуры

#КонецЕсли

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор, ВалютаРегламентированногоУчета = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;

	Результат = Новый Структура("СчетРасчетов, 
	                            |СчетАвансов,
	                            |СчетРасчетовПокупателя, 
	                            |СчетАвансовПокупателя, 
	                            |СчетРасчетовСКомитентом,
	                            |СчетУчетаТары,
	                            |СчетУчетаТарыПокупателя,
	                            |СчетУчетаДоходовПоТареБУ,
	                            |СчетУчетаРасходовПоТареБУ,
	                            |СчетУчетаДоходовПоТареНУ,
	                            |СчетУчетаРасходовПоТареНУ,
	                            |СтатьяПрочихДоходовРасходовПоТаре");

	ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор,ВалютаРегламентированногоУчета);

	СписокГруппКонтрагентов = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Контрагент);
	СписокГруппДоговоров 	= ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Контрагент);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	Индекс = 1;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	" + Формат(Индекс, "ЧГ=0") + " КАК Приоритет,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ,
	|	СтатьяПрочихДоходовРасходовПоТаре	
	|
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций
	|
	|ГДЕ
	|	
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ=0") + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТареБУ,
		|	СчетУчетаРасходовПоТареБУ,
		|	СчетУчетаДоходовПоТареНУ,
		|	СчетУчетаРасходовПоТареНУ,
		|	СтатьяПрочихДоходовРасходовПоТаре	
		|
		|ИЗ
		|	РегистрСведений.КонтрагентыОрганизаций
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ=0") + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ,
	|	СтатьяПрочихДоходовРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ=0") + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТареБУ,
		|	СчетУчетаРасходовПоТареБУ,
		|	СчетУчетаДоходовПоТареНУ,
		|	СчетУчетаРасходовПоТареНУ,
		|	СтатьяПрочихДоходовРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.КонтрагентыОрганизаций
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ=0") + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ,
	|	СтатьяПрочихДоходовРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ=0") + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТареБУ,
		|	СчетУчетаРасходовПоТареБУ,
		|	СчетУчетаДоходовПоТареНУ,
		|	СчетУчетаРасходовПоТареНУ,
		|	СтатьяПрочихДоходовРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.КонтрагентыОрганизаций
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ=0") + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ,
	|	СтатьяПрочихДоходовРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &ПустаяОрганизация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ=0") + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТареБУ,
		|	СчетУчетаРасходовПоТареБУ,
		|	СчетУчетаДоходовПоТареНУ,
		|	СчетУчетаРасходовПоТареНУ,
		|	СтатьяПрочихДоходовРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.КонтрагентыОрганизаций
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ=0") + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ,
	|	СтатьяПрочихДоходовРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ=0") + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ,
	|	СтатьяПрочихДоходовРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		Результат.СчетРасчетов                      = Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов                       = Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя            = Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя             = Выборка.СчетУчетаАвансовПолученных;
		Результат.СчетРасчетовСКомитентом           = Выборка.СчетУчетаРасчетовСКомитентом;
		Результат.СчетУчетаТары                     = Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетУчетаТарыПокупателя           = Выборка.СчетУчетаРасчетовПоТареСПокупателем;
		Результат.СчетУчетаДоходовПоТареБУ          = Выборка.СчетУчетаДоходовПоТареБУ;
		Результат.СчетУчетаДоходовПоТареНУ          = Выборка.СчетУчетаДоходовПоТареНУ;
		Результат.СчетУчетаРасходовПоТареБУ         = Выборка.СчетУчетаРасходовПоТареБУ;
		Результат.СчетУчетаРасходовПоТареНУ         = Выборка.СчетУчетаРасходовПоТареНУ;
		Результат.СтатьяПрочихДоходовРасходовПоТаре = Выборка.СтатьяПрочихДоходовРасходовПоТаре;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтраентов
//		ВалютаРегламентированногоУчета 	- СправочникСсылка.Валюты
//
// Возвращаемое значение
//      ПеречислениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,ВалютаРегламентированногоУчета, ДоговорКонтрагентаВалютаВзаиморасчетов = Неопределено, ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Неопределено) Экспорт
	Если ДоговорКонтрагентаВалютаВзаиморасчетов = Неопределено Тогда
		ДоговорКонтрагентаВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;	
	Если ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Неопределено Тогда
		ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) ИЛИ ДоговорКонтрагентаВалютаВзаиморасчетов = ВалютаРегламентированногоУчета тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
	ИначеЕсли ДоговорКонтрагентаРасчетыВУсловныхЕдиницах тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;
	Иначе
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
	Конецесли;
	Возврат ВидРасчетовПоДоговору;
КонецФункции

// Процедура подготовки таблицы значений для целей приобретения и реализации.
//
Процедура ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаЗначений, СтруктураШапкиДокумента, ВключитьНДСВОсновнуюСумму, ВалютаРегламентированногоУчета = "") Экспорт

	Перем СуммаВключаетНДС,ВидРасчетовПоДоговору;
    Перем ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;

	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	ЕстьНДС    = Не(ТаблицаЗначений.Колонки.Найти("НДС")=Неопределено);
	ЕстьВалюта = СтруктураШапкиДокумента.Свойство("ВалютаДокумента");

	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС", СуммаВключаетНДС);
	СуммаВключаетНДС = (СуммаВключаетНДС = Истина);

	Если СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") тогда
		Если СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
			ДоговорКонтрагентаВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
		КонецЕсли;
		Если СтруктураШапкиДокумента.Свойство("РасчетыВУсловныхЕдиницах") Тогда
			ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах;
		КонецЕсли;		

		ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(СтруктураШапкиДокумента.ДоговорКонтрагента,ВалютаРегламентированногоУчета, ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаРасчетыВУсловныхЕдиницах);
	КонецЕсли;

	//Дополним колонки ТЗ при необходимости
	СтруктураОбязательныхКолонок = Новый Структура("Сумма"+?(ЕстьНДС,",НДС,СуммаБезНДС","")+?(ЕстьВалюта,",СуммаВал"+?(ЕстьНДС,",НДСВал,СуммаБезНДСВал",""),""));

	СтруктураОбязательныхКолонок.Вставить("СуммаБУ");
	Если ЕстьНДС Тогда
		СтруктураОбязательныхКолонок.Вставить("СуммаБУБезНДС");
	КонецЕсли;
	
	Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл

		Если ТаблицаЗначений.Колонки.Найти(Колонка.Ключ) = Неопределено тогда
			ТаблицаЗначений.Колонки.Добавить(Колонка.Ключ, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		КонецЕсли;

	КонецЦикла;

	//Дополним колонки ТЗ при необходимости нечисловыми полями
	Если ТаблицаЗначений.Колонки.Найти("СчетУчетаЦенности") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("СчетУчетаЦенности");
	КонецЕсли;

	Если ТаблицаЗначений.Колонки.Найти("ВидЦенности") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("ВидЦенности");
	КонецЕсли;

	Если ТаблицаЗначений.Колонки.Найти("Ценность") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("Ценность");
	КонецЕсли;

	//Определим суммы по документу (Сумму без НДС и корректную основную сумму)
	Если ЕстьНДС тогда

		Для каждого СтрокаТаблицы из ТаблицаЗначений цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма       - ?(СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
			СтрокаТаблицы.Сумма       = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
		КонецЦикла;

	КонецЕсли;

	Если ЕстьВалюта тогда

		// Заполним валютные колонки суммами документа
		Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл

			Если Прав(Колонка.Ключ, 3) = "Вал" Тогда
				ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку(Лев(Колонка.Ключ, СтрДлина(Колонка.Ключ) - 3)), Колонка.Ключ);
			КонецЕсли;

		КонецЦикла;
		
			Если Не(СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда

				Если не СтруктураШапкиДокумента.Свойство("КурсДокумента") или не СтруктураШапкиДокумента.Свойство("КратностьДокумента") тогда
					КоэффициентПересчета=1;
				ИначеЕсли Число(СтруктураШапкиДокумента.КурсДокумента) = 0 или Число(СтруктураШапкиДокумента.КратностьДокумента)=0 тогда
					КоэффициентПересчета=1;
				Иначе
					КоэффициентПересчета = СтруктураШапкиДокумента.КурсДокумента/СтруктураШапкиДокумента.КратностьДокумента;
				КонецЕсли;

				// АБС ИЗМЕНЕНО пересчет регл. сумм от суммы всего
				Если СтруктураШапкиДокумента.Свойство("абс_РасчетРеглСуммыНДСОтРеглСуммыВсего") Тогда
				Если НЕ СтруктураШапкиДокумента.абс_РасчетРеглСуммыНДСОтРеглСуммыВсего Тогда
					СуммаРег = Окр(ТаблицаЗначений.Итог("СуммаВал")* КоэффициентПересчета,2);
				Иначе
					СуммаВсего = 0;
					
					Если ЕстьНДС И ТаблицаЗначений.Количество() > 0  Тогда
						
						// В документе поступления СуммаВал не содержит НДС, в документе реализации СуммаВал содержит НДС.
						СуммаВалВключаетСуммуНДС = ТаблицаЗначений.Итог("СуммаБезНДСВал") + ТаблицаЗначений.Итог("НДСВал") = ТаблицаЗначений.Итог("СуммаВал");
						
						СуммаВсего = Окр((ТаблицаЗначений.Итог("СуммаБезНДСВал") + ТаблицаЗначений.Итог("НДСВал")) * КоэффициентПересчета, 2);
						
						СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СуммаВсего,
	                                                   Истина, Истина,
	                                                   УчетНДС.ПолучитьСтавкуНДС(ТаблицаЗначений[0].СтавкаНДС));
													   
						// Если СуммаВал не содержит НДС, то и СуммаРег не должна содержать НДС.
						Если СуммаВалВключаетСуммуНДС Тогда
							СуммаРег = СуммаВсего;
						Иначе
							СуммаРег = СуммаВсего - СуммаНДС;
						КонецЕсли;
						
					Иначе
						СуммаВсего = Окр(ТаблицаЗначений.Итог("СуммаВал")* КоэффициентПересчета,2);
					КонецЕсли;		
					
				КонецЕсли;
				Иначе
					СуммаРег = Окр(ТаблицаЗначений.Итог("СуммаВал")* КоэффициентПересчета,2);
				КонецЕсли;
				// АБС ИЗМЕНЕНО пересчет регл. сумм от суммы всего КОНЕЦ
				
				//Распределение суммы по таблице
				РаспределениеРег = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаРег,ТаблицаЗначений.выгрузитьКолонку("Сумма"));
				Если Не РаспределениеРег = Неопределено Тогда
					ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"Сумма");
				КонецЕсли; 
				
				
				Если ЕстьНДС тогда
					// АБС ИЗМЕНЕНО пересчет регл. сумм от суммы всего
					Если СтруктураШапкиДокумента.Свойство("абс_РасчетРеглСуммыНДСОтРеглСуммыВсего") Тогда
					Если НЕ СтруктураШапкиДокумента.абс_РасчетРеглСуммыНДСОтРеглСуммыВсего И ТаблицаЗначений.Количество() > 0 Тогда
						НДСРег			 = Окр(ТаблицаЗначений.Итог("НДСВал") * КоэффициентПересчета,2);
					Иначе
						НДСРег 			= СуммаНДС;
					КонецЕсли;
					Иначе
					    НДСРег			 = Окр(ТаблицаЗначений.Итог("НДСВал") * КоэффициентПересчета,2);
					КонецЕсли;
					
					// АБС ИЗМЕНЕНО пересчет регл. сумм от суммы всего КОНЕЦ
						
					//Распределение суммы по таблице
					РаспределениеРег = ttk_ОбщегоНазначения.РаспределитьПропорционально(НДСРег,ТаблицаЗначений.выгрузитьКолонку("НДС"));
					Если Не РаспределениеРег = Неопределено Тогда
						ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"НДС");
					КонецЕсли; 
					
					//Расчет суммы без НДС
					Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
						СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
					КонецЦикла;

				КонецЕсли;
				
			Иначе

				//Документ в национальной валюте
				Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах тогда

					//Необходимо определить сумму расчетов с контрагентом в валюте договора
					Если не СтруктураШапкиДокумента.Свойство("КурсВзаиморасчетов") или не СтруктураШапкиДокумента.Свойство("КратностьВзаиморасчетов") тогда
						КоэффициентПересчета=1;
					ИначеЕсли Число(СтруктураШапкиДокумента.КурсВзаиморасчетов) = 0 или Число(СтруктураШапкиДокумента.КратностьВзаиморасчетов) = 0 тогда
						КоэффициентПересчета = 1;
					Иначе
						КоэффициентПересчета = СтруктураШапкиДокумента.КратностьВзаиморасчетов / СтруктураШапкиДокумента.КурсВзаиморасчетов;
					КонецЕсли;

					СуммаВал = Окр(ТаблицаЗначений.Итог("Сумма")* КоэффициентПересчета,2);
					//Распределение суммы по таблице
					РаспределениеВал = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаВал,ТаблицаЗначений.ВыгрузитьКолонку("СуммаВал"));
					Если Не РаспределениеВал = Неопределено Тогда
						ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеВал,"СуммаВал");
					КонецЕсли; 
					
					
					Если ЕстьНДС тогда
						
						НДСВал			 = Окр(ТаблицаЗначений.Итог("НДС") * КоэффициентПересчета,2);
						//Распределение суммы по таблице
						РаспределениеВал = ttk_ОбщегоНазначения.РаспределитьПропорционально(НДСВал,ТаблицаЗначений.выгрузитьКолонку("НДСВал"));
						Если Не РаспределениеВал = Неопределено Тогда
							ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеВал,"НДСВал");
						КонецЕсли; 
						
						//Расчет суммы без НДС
						Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
							СтрокаТаблицы.СуммаБезНДСВал = СтрокаТаблицы.СуммаВал - ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДСВал, 0);
						КонецЦикла;


					КонецЕсли;

				КонецЕсли

			КонецЕсли;

	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ТаблицаЗначений.Колонки.Добавить("СуммаСНДС_УСН",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТаблицаЗначений.Колонки.Добавить("НДС_УСН",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

		УчетВалютнойСуммыУСН = ЕстьВалюта и (Не (СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРегламентированногоУчета) и 
		                        Не (ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах));

		Если ВключитьНДСВОсновнуюСумму ИЛИ НЕ ЕстьНДС Тогда
			ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("Сумма" + ?(УчетВалютнойСуммыУСН, "Вал", "")), "СуммаСНДС_УСН");
		Иначе

			Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
				СтрокаТаблицы.СуммаСНДС_УСН = СтрокаТаблицы["СуммаБезНДС" + ?(УчетВалютнойСуммыУСН, "Вал", "")] + 
				                              СтрокаТаблицы["НДС" + ?(УчетВалютнойСуммыУСН, "Вал", "")];
			КонецЦикла

		КонецЕсли;

		Если ЕстьНДС тогда
			ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("НДС" + ?(УчетВалютнойСуммыУСН, "Вал", "")), "НДС_УСН");
		КонецЕсли;

	КонецЕсли;

	// На этапе подготовки таблицы суммы для БУ совпадают с суммами для остальных видов учета (НУ, НДС...).
	// При зачете авансов в иностранной валюте в 2008 году суммы БУ будут корректироваться с учетом курсов зачтенных авансов,
	// а суммы для других видов учета остаются прежними
	
	ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("Сумма"),       "СуммаБУ");
	Если ЕстьНДС Тогда
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"), "СуммаБУБезНДС");
	КонецЕсли;
	
	УчетНДС.ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(СтруктураШапкиДокумента, ТаблицаЗначений);

КонецПроцедуры // ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации()

//***** Гетц. Разнесение платежей. 29.10.12
Процедура ОпределитьСуммыАвансовКЗачету(ТаблицаПоВзаиморасчетам, СтруктураПараметров)
	ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей(СтруктураПараметров.Ссылка, СтруктураПараметров.ДоговорКонтрагента);
	Если Не ИспользоватьРазнесениеПлатежей Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДатаОплаты КАК ДатаОплаты,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Сделка,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток КАК СуммаРег,
	|	1 КАК Приоритет
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки(
	|			&Период,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И Документ В (&СписокДокументовРасчета)
	|				И Организация = &Организация) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки
	|ГДЕ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДатаОплаты,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Сделка,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток,
	|	2
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки(
	|			&Период,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И Организация = &Организация
	|				И СчетОплаты = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
	|				И ЕСТЬNULL(Документ.абс_НеИспользоватьРаспределениеПлатежей, ЛОЖЬ) = ЛОЖЬ) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки
	|ГДЕ
	|	&ИспользоватьФИФО
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ДатаОплаты";
	
	ИспользоватьФИФО = Не НеИспользоватьФИФОВДокументе(СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Период", Новый Граница(СтруктураПараметров.Ссылка.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураПараметров.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СписокДокументовРасчета", ТаблицаПоВзаиморасчетам.ВыгрузитьКолонку("Документ"));
	Запрос.УстановитьПараметр("ИспользоватьФИФО", ИспользоватьФИФО);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЧ Из ТаблицаПоВзаиморасчетам Цикл 
		Если СтрокаТЧ.СуммаВзаиморасчетов = 0 Тогда 
			Продолжить;
		КонецЕсли;
		СтрокиПоДокументу = ТЗ.НайтиСтроки(Новый Структура("Документ", СтрокаТЧ.Документ));
		Для Каждого СтрокаТЗ Из СтрокиПоДокументу Цикл  
			Если СтрокаТЗ.Приоритет = 1 Тогда 
				СтрокаТЗ.СуммаРег = Мин(СтрокаТЧ.СуммаРег, СтрокаТЗ.СуммаРег);
				СтрокаТЗ.СуммаВзаиморасчетов = Мин(СтрокаТЧ.СуммаВзаиморасчетов, СтрокаТЗ.СуммаВзаиморасчетов);
			Иначе 
				СтрокаТЗ.СуммаРег = Макс(0, СтрокаТЗ.СуммаРег - СтрокаТЧ.СуммаРег);
				СтрокаТЗ.СуммаВзаиморасчетов = Макс(0, СтрокаТЗ.СуммаВзаиморасчетов - СтрокаТЧ.СуммаВзаиморасчетов);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТаблицаПоВзаиморасчетам = ТЗ;
КонецПроцедуры

Функция ПолучитьИспользованиеРаспределенияПлатежей(ДокументСсылка = Неопределено, ДоговорКонтрагента = Неопределено) Экспорт 
	Если Константы.абс_ИспользоватьРазнесениеВходящихПлатежей.Получить() = Ложь Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда 
		Если ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда 
			Возврат Ложь; //***** АБС Гетц 15.04.2014 - проводим одинаково, вне зависимости от флага
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДокументСсылка = Неопределено Тогда 
		Если ДокументСсылка.Метаданные().Реквизиты.Найти("абс_НеИспользоватьРаспределениеПлатежей") = Неопределено Тогда  
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина
КонецФункции

Функция НеИспользоватьФИФОВДокументе(ДокументСсылка) Экспорт 
	Если Не ДокументСсылка = Неопределено Тогда 
		Если ДокументСсылка.Метаданные().Реквизиты.Найти("абс_НеИспользоватьРаспределениеПлатежей") = Неопределено Тогда  
			Возврат Ложь;
		Иначе 
			Возврат ДокументСсылка.абс_НеИспользоватьРаспределениеПлатежей;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура УчестьЗачтенныеАвансы(СтруктураПараметров)
	ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей(СтруктураПараметров.Ссылка);
	Если ИспользоватьРазнесениеПлатежей Тогда 
		Если СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 1 Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Организация,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Контрагент,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ,
			|	-1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
			|	-1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток КАК СуммаРег
			|ИЗ
			|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки(
			|			&Период,
			|			Документ = &ДокументАванса
			|				И Организация = &Организация) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки";
			Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаАктуализации);			
			Запрос.УстановитьПараметр("ДокументАванса", СтруктураПараметров.Ссылка);
			Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ЗачтенныеАвансы = Новый Структура("СуммаВзаиморасчетов, СуммаРег", 0, 0);
			Если Выборка.Следующий() Тогда 
				ЗаполнитьЗначенияСвойств(ЗачтенныеАвансы, Выборка);
			КонецЕсли;
			СтруктураПараметров.Вставить("ЗачтенныеАвансы", ЗачтенныеАвансы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УчестьЗакрытуюЗадолженность(СтруктураПараметров)
	ИспользоватьРазнесениеПлатежей = ПолучитьИспользованиеРаспределенияПлатежей();
	Если ИспользоватьРазнесениеПлатежей Тогда 
		Если СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 1 Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Организация,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Контрагент,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток КАК СуммаРег
			|ИЗ
			|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки(
			|			&Период,
			|			Документ = &ДокументРеализации
			|				И Организация = &Организация) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки";
			Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаАктуализации);			
			Запрос.УстановитьПараметр("ДокументРеализации", СтруктураПараметров.Ссылка);
			Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ЗакрытаяЗадолженность = Новый Структура("СуммаВзаиморасчетов, СуммаРег", 0, 0);
			Если Выборка.Следующий() Тогда 
				ЗаполнитьЗначенияСвойств(ЗакрытаяЗадолженность, Выборка);
			КонецЕсли;
			СтруктураПараметров.Вставить("ЗакрытаяЗадолженность", ЗакрытаяЗадолженность);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ВыполнитьСторноДвиженияПоРасчетамПоРеализации(ДокументОбъект, ДвиженияПоРасчетыУЕ = Неопределено, ДвижениеПоВзиморсчетам = Неопределено) Экспорт 
	Если ДокументОбъект.СуммаДокумента < 0  Тогда
		Если ДвиженияПоРасчетыУЕ = Неопределено Или ДвижениеПоВзиморсчетам = Неопределено Тогда
			Движения = ДокументОбъект.Движения;
		КонецЕсли;
		Если ДвиженияПоРасчетыУЕ = Неопределено Тогда 
			ДвиженияПоРасчетыУЕ = Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации;
		КонецЕсли;
		Если ДвижениеПоВзиморсчетам = Неопределено Тогда 
			ДвижениеПоВзиморсчетам = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов;
		КонецЕсли;
		ДвиженияПоРасчетыУЕ.Очистить();
		//АБС ИЗМЕНЕНИЕ 32424  15.04.2015 11:06:45  Манжела
		//ИсхНомер = Лев(СокрЛП(ДокументОбъект.Номер),СтрДлина(СокрЛП(ДокументОбъект.Номер))-1);
		ИсхНомер = СокрЛП(ДокументОбъект.Номер); 
		//АБС ИЗМЕНЕНИЕ 32424 КОНЕЦ
		ИсхНакладная = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(ИсхНомер,ТекущаяДата());
		Если Не ЗначениеЗаполнено(ИсхНакладная) Тогда
			ИсхНакладная = Документы.ДокументРасчетовСКонтрагентом.НайтиПоНомеру(ИсхНомер,'20100101');	
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.ас_КорректируемыйДокумент) Тогда
			ИсхНакладная = ДокументОбъект.ас_КорректируемыйДокумент;
		КонецЕсли;
		
		СуммаВзаиморасчетов = ДокументОбъект.СуммаДокумента;
		КратностьВзаиморасчетов = ДокументОбъект.КратностьВзаиморасчетов;
		Если ЗначениеЗаполнено(ИсхНакладная) И ТипЗнч(ИсхНакладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			СуммаРег = ДокументОбъект.СуммаДокумента * ?(ИсхНакладная.КурсВзаиморасчетов = 0, 1, ИсхНакладная.КурсВзаиморасчетов) * ?(КратностьВзаиморасчетов = 0, 1, КратностьВзаиморасчетов);
			СуммаВзаиморасчетовИсточник = ИсхНакладная.СуммаДокумента;
			СуммаРегИсточник  = СуммаВзаиморасчетовИсточник * ?(ИсхНакладная.КурсВзаиморасчетов = 0, 1, ИсхНакладная.КурсВзаиморасчетов) * ?(КратностьВзаиморасчетов = 0, 1, КратностьВзаиморасчетов);
		ИначеЕсли  ЗначениеЗаполнено(ДокументОбъект.ас_КорректируемыйДокумент) Тогда
			Если ТипЗнч(ДокументОбъект.ас_КорректируемыйДокумент)<>Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
				СуммаРег = ДокументОбъект.СуммаДокумента * ?(ДокументОбъект.ас_КорректируемыйДокумент.КурсВзаиморасчетов = 0, 1, ДокументОбъект.ас_КорректируемыйДокумент.КурсВзаиморасчетов) * ?(КратностьВзаиморасчетов = 0, 1, КратностьВзаиморасчетов);
				СуммаВзаиморасчетовИсточник = ДокументОбъект.ас_КорректируемыйДокумент.СуммаДокумента;
				СуммаРегИсточник  = СуммаВзаиморасчетовИсточник * ?(ДокументОбъект.ас_КорректируемыйДокумент.КурсВзаиморасчетов = 0, 1, ИсхНакладная.КурсВзаиморасчетов) * ?(КратностьВзаиморасчетов = 0, 1, КратностьВзаиморасчетов);
			Иначе
				КурсВз = ДокументОбъект.ПолучитьКурсДокумента(ДокументОбъект.ас_КорректируемыйДокумент);
				СуммаРег = ДокументОбъект.СуммаДокумента*КурсВз;
				СуммаВзаиморасчетовИсточник  =ДокументОбъект.ас_КорректируемыйДокумент.СуммаДокумента;
				СуммаРегИсточник  =  СуммаВзаиморасчетовИсточник*КурсВз;
			КонецЕсли;
		Иначе
			СуммаРег = ДокументОбъект.СуммаДокумента * ?(ДокументОбъект.КурсВзаиморасчетов = 0, 1, ДокументОбъект.КурсВзаиморасчетов) * ?(КратностьВзаиморасчетов = 0, 1, КратностьВзаиморасчетов);
			СуммаВзаиморасчетовИсточник = СуммаВзаиморасчетов;
			СуммаРегИсточник = СуммаРег;
		КонецЕсли;
		
		
		
		мТаблицаРасчетыПоРеализации = абс_СформироватьТаблицуСторно_Модуль(ИсхНакладная,СуммаВзаиморасчетов,СуммаРег,СуммаВзаиморасчетовИсточник,СуммаРегИсточник, ДокументОбъект.Дата);
		//Взаиморасчеты с контрагентами по документам расчетов
		Если ДокументОбъект.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			
			НаборЗаписейВзаиморасчетыПоДокументам = ДвижениеПоВзиморсчетам;
			//НаборЗаписейВзаиморасчетыПоДокументам.Отбор.Регистратор.Установить(Ссылка);
			НаборЗаписейВзаиморасчетыПоДокументам.Очистить();
			
		КонецЕсли;
		
		//Взаиморасчеты с контрагентами по документам расчетов
		
		
		Если  мТаблицаРасчетыПоРеализации<>Неопределено Тогда
			//Отражаем оплаты по исходной накладной на аванс, оставшуюся сумму закрываем исходной накланой
			
			СсылкаНаДокумент = ДокументОбъект.Ссылка;
			
			НаборЗаписейБУ = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			НаборЗаписейБУ.Отбор.Регистратор.установить(СсылкаНаДокумент);
			НаборЗаписейБУ.Прочитать();
			                    			
			Для Каждого СтрокаОплат Из   мТаблицаРасчетыПоРеализации Цикл
				
				Запись = ДвиженияПоРасчетыУЕ.Добавить();
				Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
				Запись.ДоговорКонтрагента = СтрокаОплат.ДоговорКонтрагента;
				Запись.Документ = СтрокаОплат.Регистратор;
				Запись.Контрагент = СтрокаОплат.Контрагент;
				Запись.Организация = ДокументОбъект.Организация;
				Запись.Период = ДокументОбъект.Дата;
				Запись.Сделка = СтрокаОплат.Сделка;
				Запись.СуммаРег = СтрокаОплат.СуммаРег;
				Запись.СуммаВзаиморасчетов = СтрокаОплат.СуммаВзаиморасчетов;
				Если ТипЗнч(СтрокаОплат.Регистратор) <> Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
					Запись.СчетОплаты = ДокументОбъект.СчетУчетаРасчетовПоАвансам;
					Запись.ДатаОплаты = ДокументОбъект.Дата;
					//АБС ВСТАВКА №42294 НАЧАЛО «15 мая 2014 г.», Пополитов 
					Если ТипЗнч(СсылкаНаДокумент) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
						или (ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") и ЗначениеЗаполнено(ДокументОбъект.абс_ФизЛицо)) Тогда
					//\\АБС ВСТАВКА №42294 КОНЕЦ	
						//Проводка Дт 62.01 Кт 62.02 сумма с +
						Проводка = НаборЗаписейБУ.Добавить();
						Проводка.Регистратор = ДокументОбъект.ссылка;
						Проводка.Период = ДокументОбъект.Дата;
						Проводка.Организация = ДокументОбъект.Организация;
						Проводка.Содержание = "Аванс";
						Проводка.СчетДт = ДокументОбъект.СчетУчетаРасчетовСКонтрагентом;
						Проводка.СчетКт = ДокументОбъект.СчетУчетаРасчетовПоАвансам;
						Проводка.Сумма = СтрокаОплат.СуммаРег;
						Если Проводка.СчетДт.Валютный Тогда
							Проводка.ВалютнаяСуммаДт =СтрокаОплат.СуммаВзаиморасчетов;
							Проводка.ВалютаДт = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаКт =СтрокаОплат.СуммаВзаиморасчетов;
							Проводка.ВалютаКт = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
						КонецЕсли; 					
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",ДокументОбъект.Контрагент); 
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",ДокументОбъект.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",ДокументОбъект.Контрагент); 
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",ДокументОбъект.ДоговорКонтрагента); 
					//АБС ВСТАВКА №42294 НАЧАЛО «15 мая 2014 г.», Пополитов	
					КонецЕсли;
					//\\АБС ВСТАВКА №42294 КОНЕЦ
				Иначе
					Запись.Документ = ДокументОбъект.Ссылка;
					Запись.СчетОплаты = ДокументОбъект.СчетУчетаРасчетовСКонтрагентом;
					Запись.ДатаОплаты = '00010101';
					Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
					Запись.СуммаРег = -СтрокаОплат.СуммаРег;
					Запись.СуммаВзаиморасчетов = -СтрокаОплат.СуммаВзаиморасчетов;
					
				КонецЕсли;
				
				//Проводка Дт 62.01 Кт 62.02 сумма с +
				
				//Взаиморасчеты с контрагентами по документам расчетов
				Если ДокументОбъект.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
					
					ЗаписьВзаиморасчетов = НаборЗаписейВзаиморасчетыПоДокументам.Добавить();
					ЗаписьВзаиморасчетов.Активность=Истина;
					ЗаписьВзаиморасчетов.Регистратор = ДокументОбъект.Ссылка;
					ЗаписьВзаиморасчетов.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
					ЗаписьВзаиморасчетов.Контрагент = ДокументОбъект.Контрагент;
					ЗаписьВзаиморасчетов.Организация = ДокументОбъект.Организация;
					ЗаписьВзаиморасчетов.Период = ДокументОбъект.Дата;
					ЗаписьВзаиморасчетов.УпрУчет=Истина;
					ЗаписьВзаиморасчетов.СуммаВзаиморасчетов = СтрокаОплат.СуммаВзаиморасчетов;
					Если ДокументОбъект.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						ЗаписьВзаиморасчетов.СуммаРегл = СтрокаОплат.СуммаРег;
					КонецЕсли;
					
					Если ТипЗнч(СтрокаОплат.Регистратор) <> Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
						ЗаписьВзаиморасчетов.ВидДвижения=ВидДвиженияНакопления.Расход;
						ЗаписьВзаиморасчетов.ВидРасчетовСКонтрагентом=Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
						ЗаписьВзаиморасчетов.ДокументРасчетовСКонтрагентом = СтрокаОплат.Регистратор;
					Иначе
						ЗаписьВзаиморасчетов.ВидДвижения=ВидДвиженияНакопления.Расход;
						ЗаписьВзаиморасчетов.ДокументРасчетовСКонтрагентом = ДокументОбъект.Ссылка;
						ЗаписьВзаиморасчетов.СуммаВзаиморасчетов = -СтрокаОплат.СуммаВзаиморасчетов;
						Если ДокументОбъект.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
							ЗаписьВзаиморасчетов.СуммаРегл = -СтрокаОплат.СуммаРег;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				//Взаиморасчеты с контрагентами по документам расчетов
				
				//Проводка Дт 62.01 Кт 62.02
				СуммаРег = СуммаРег+СтрокаОплат.СуммаРег;
				СуммаВзаиморасчетов = СуммаВзаиморасчетов+СтрокаОплат.СуммаВзаиморасчетов; 
				
				
				
			КонецЦикла;
			НаборЗаписейБУ.Записать();
			Если ЗначениеЗаполнено(СуммаРег) ИЛИ ЗначениеЗаполнено(СуммаВзаиморасчетов) Тогда
				Запись = ДвиженияПоРасчетыУЕ.Добавить();
				Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
				Запись.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
				Если ЗначениеЗаполнено(ДокументОбъект.ас_КорректируемыйДокумент) И Не ЗначениеЗаполнено(ИсхНакладная) Тогда
					ЗаписьВзаиморасчетов.ДокументРасчетовСКонтрагентом = ДокументОбъект.ас_КорректируемыйДокумент;	
				Иначе	
					Запись.Документ = ?(ЗначениеЗаполнено(ИсхНакладная),ИсхНакладная,ДокументОбъект.Ссылка);
				КонецЕсли;
				Запись.Контрагент = ДокументОбъект.Контрагент;
				Запись.Организация = ДокументОбъект.Организация;
				Запись.Период = ДокументОбъект.Дата;
				//Запись.Сделка = ДокументОбъект.Сделка;
				Запись.СуммаРег = СуммаРег;
				Запись.СуммаВзаиморасчетов =  СуммаВзаиморасчетов;
				Запись.СчетОплаты = ДокументОбъект.СчетУчетаРасчетовСКонтрагентом;
				Запись.ДатаОплаты = '00010101';
				
				Если ДокументОбъект.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
					ЗаписьВзаиморасчетов = НаборЗаписейВзаиморасчетыПоДокументам.Добавить();
					ЗаписьВзаиморасчетов.Активность=Истина;
					ЗаписьВзаиморасчетов.Регистратор = ДокументОбъект.Ссылка;
					ЗаписьВзаиморасчетов.ВидДвижения=ВидДвиженияНакопления.Приход;
					ЗаписьВзаиморасчетов.ВидРасчетовСКонтрагентом=Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
					ЗаписьВзаиморасчетов.ДокументРасчетовСКонтрагентом = ?(ЗначениеЗаполнено(ИсхНакладная),ИсхНакладная, ДокументОбъект.Ссылка);
					ЗаписьВзаиморасчетов.Организация = ДокументОбъект.Организация;
					ЗаписьВзаиморасчетов.Период = ДокументОбъект.Дата;
					ЗаписьВзаиморасчетов.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
					ЗаписьВзаиморасчетов.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
					ЗаписьВзаиморасчетов.Контрагент = ДокументОбъект.Контрагент;
					ЗаписьВзаиморасчетов.УпрУчет=Истина;
					Если ДокументОбъект.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						ЗаписьВзаиморасчетов.СуммаРегл = СуммаРег;
					КонецЕсли;
				КонецЕсли;
				
				
			КонецЕсли;
			
			
		Иначе
			
			Запись = ДвиженияПоРасчетыУЕ.Добавить();
			Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
			Запись.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
			Запись.Документ = ?(ЗначениеЗаполнено(ИсхНакладная),ИсхНакладная,ДокументОбъект.Ссылка);
			Запись.Контрагент = ДокументОбъект.Контрагент;
			Запись.Организация = ДокументОбъект.Организация;
			Запись.Период = ДокументОбъект.Дата;
			//Запись.Сделка = Сделка;
			Запись.СуммаРег = СуммаРег;
			Запись.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
			Запись.СчетОплаты = ДокументОбъект.СчетУчетаРасчетовСКонтрагентом;
			
			Если ДокументОбъект.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				ЗаписьВзаиморасчетов = НаборЗаписейВзаиморасчетыПоДокументам.Добавить();
				ЗаписьВзаиморасчетов.Активность=Истина;
				ЗаписьВзаиморасчетов.Регистратор = ДокументОбъект.Ссылка;
				ЗаписьВзаиморасчетов.ВидДвижения=ВидДвиженияНакопления.Приход;
				ЗаписьВзаиморасчетов.ВидРасчетовСКонтрагентом=Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
				Если ЗначениеЗаполнено(ДокументОбъект.ас_КорректируемыйДокумент) И Не ЗначениеЗаполнено(ИсхНакладная) Тогда
					ЗаписьВзаиморасчетов.ДокументРасчетовСКонтрагентом = ДокументОбъект.ас_КорректируемыйДокумент;	
				Иначе
					ЗаписьВзаиморасчетов.ДокументРасчетовСКонтрагентом = ?(ЗначениеЗаполнено(ИсхНакладная),ИсхНакладная,ДокументОбъект.Ссылка);
				КонецЕсли;
				ЗаписьВзаиморасчетов.Организация = ДокументОбъект.Организация;
				ЗаписьВзаиморасчетов.Период = ДокументОбъект.Дата;
				ЗаписьВзаиморасчетов.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
				ЗаписьВзаиморасчетов.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
				ЗаписьВзаиморасчетов.Контрагент = ДокументОбъект.Контрагент;
				ЗаписьВзаиморасчетов.УпрУчет=Истина;
				Если ДокументОбъект.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					ЗаписьВзаиморасчетов.СуммаРегл = СуммаРег;
				КонецЕсли;
			КонецЕсли;
			
			
		КонецЕсли;
		Если ДокументОбъект.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			НаборЗаписейВзаиморасчетыПоДокументам.Записать(Истина);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция абс_СформироватьТаблицуСторно_Модуль(ИсхНакладная,СуммаВзаиморасчетов,СуммаРег,СуммаВзаиморасчетовИсточник,СуммаРегИсточник, Дата) Экспорт 
	
	Если ЗначениеЗаполнено(ИсхНакладная)Тогда
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СчетОплаты,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Период КАК ДатаОплаты,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Сделка,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Контрагент,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Организация,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовПриход КАК СуммаВзаиморасчетов,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегПриход КАК СуммаРег
		              |ИЗ
		              |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, &Дата, Регистратор, Документ = &Документ) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
		              |ГДЕ
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор <> &Документ
		              |	И (РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
		              |			ИЛИ РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор ССЫЛКА Документ.КорректировкаДолга
		              |			ИЛИ РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор ССЫЛКА Документ.ПлатежныйОрдерПоступлениеДенежныхСредств)
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СчетОплаты,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДатаОплаты,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Сделка,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Контрагент,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Организация,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовРасход,
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегРасход
		              |ИЗ
		              |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, &Дата, Авто, Документ <> &Документ) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
		              |ГДЕ
		              |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор = &Документ";
		Запрос.УстановитьПараметр("Дата",Новый Граница(Дата,ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Документ",ИсхНакладная);
		Результат =  Запрос.Выполнить().Выгрузить();
		ИтогСуммаВзаиморасчетовОплата = Результат.Итог("СуммаВзаиморасчетов");
		ИтогСуммаРегОплата = Результат.Итог("СуммаРег");
		Если Результат.Количество()>0 Тогда
			Если ИтогСуммаВзаиморасчетовОплата>(-СуммаВзаиморасчетов) Тогда
				СуммаВзОплаты = (-СуммаВзаиморасчетов);///СуммаВзаиморасчетовИсточник)*ИтогСуммаВзаиморасчетовОплата;
				СуммаРегОплаты = (-СуммаРег);///СуммаРегИсточник)*ИтогСуммаРегОплата;
				МассивСуммВзаиморасчетов = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаВзОплаты,Результат.ВыгрузитьКолонку("СуммаВзаиморасчетов"));
				МассивСуммРег = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаРегОплаты,Результат.ВыгрузитьКолонку("СуммаРег"));
				Результат.ЗагрузитьКолонку(МассивСуммРег,"СуммаРег");
				Результат.ЗагрузитьКолонку(МассивСуммВзаиморасчетов,"СуммаВзаиморасчетов");
				
			КонецЕсли;
		КонецЕсли;
	     Возврат Результат;
	КонецЕсли;
    Возврат Неопределено;
	  
КонецФункции
//***** Гетц. Разнесение платежей \\

// kwr_ЗаменитьНепроведенныеДокументыАвизоНаДокументыОснования
// Процедура заменяет непроведенные документы в массиве на соотвествующий "Источник"
// из регистра "абс_СоответствияОбъектовПереноса". 
//
// Параметры
// МассивДокументов - Массив  - массив документов, в котором ищем непроведенные документы, для которых есть запись
// в регистре "абс_СоответствияОбъектовПереноса"
//
// {{KM WARE Малыгин П.К. Заявка № 26571 07.10.2015 начало
Процедура kwr_ЗаменитьНепроведенныеДокументыАвизоНаДокументыОснования(МассивДокументов,СуммоваяРазницаПоДокументам)
	
	ЗапросПоРегиструСоответствия = Новый Запрос;
	ЗапросПоРегиструСоответствия.Текст = "ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектИсточник
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник = &ОбъектПриемник";
	Счетчик = -1;									  
	Для Каждого Документ из МассивДокументов Цикл
		Счетчик = Счетчик+1;		
		
		ЗапросПоРегиструСоответствия.УстановитьПараметр("ОбъектПриемник",Неопределено);
		
		Попытка	 
			
			Если Документ.Проведен Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗапросПоРегиструСоответствия.УстановитьПараметр("ОбъектПриемник",Документ);			
			Результат = ЗапросПоРегиструСоответствия.Выполнить().Выгрузить();
			
			Если Результат.Количество()=0 Тогда
				Продолжить;
			ИначеЕсли Результат.Количество()>1 Тогда
				Сообщить("Больше одной записи в регистре Соответствия объектов  (подсистема переноса) для "+Документ+". Проверьте и удалите лишнее.");
				Продолжить;
			ИначеЕсли Результат.Количество() = 1 Тогда
				НовыйДокумент = Результат[0].ОбъектИсточник;
				
				Если ТипЗнч(НовыйДокумент) = ТипЗнч(Документ)Тогда
					МассивДокументов[Счетчик] = НовыйДокумент;
				Иначе 
					Сообщить("Несоответствие типов приёмника и источника в  в регистре Соответствия объектов  (подсистема переноса) для "+Документ);
				КонецЕсли;	
			КонецЕсли;
					
		Исключение
			
			Продолжить;
						
		КонецПопытки;	
		    		
	КонецЦикла;
	
КонецПроцедуры // kwr_ЗаменитьНепроведенныеДокументыАвизоНаДокументыОснования() }}KM WARE Малыгин П.К. Заявка № 26571 07.10.2015 окончание


// kwr_ЗаменитьДокументыОснованияНаНепроведенныеДокументыАвизо
// Процедура возвращает непроведенные документы, замненные процедурой "kwr_ЗаменитьНепроведенныеДокументыАвизоНаДокументыОснования"
// в таблицу значений на основании различий двух массивов
// Параметры
// БазисРаспределения - Таблица значений - содержит данные, в которых нужно заменить документы
// 
// МассивДокИсходный  - Массив - содержит первоначальный массив документов до корректировок
//
// МассивДокИзмененный  - Массив - содержит измененный массив документов
//
// {{KM WARE Малыгин П.К. Заявка № 26571 07.10.2015 начало
Процедура kwr_ЗаменитьДокументыОснованияНаНепроведенныеДокументыАвизо(БазисРаспределения,МассивДокИсходный,МассивДокИзмененный)
						  
	Для Каждого Строка из БазисРаспределения Цикл
		Попытка	 
			
			ИндексПоиска = МассивДокИзмененный.Найти(Строка.Документ);
			Если МассивДокИзмененный[ИндексПоиска]<> МассивДокИсходный[ИндексПоиска] Тогда	
			
				СтарыйДокумент = МассивДокИсходный[ИндексПоиска];
				Если ТипЗнч(СтарыйДокумент) = ТипЗнч(Строка.Регистратор)Тогда
					Строка.Регистратор = СтарыйДокумент;
					Строка.Документ = СтарыйДокумент;
					ЗаполнитьЗначенияСвойств(Строка,СтарыйДокумент,"Контрагент,ДоговорКонтрагента");	
				Иначе 
					Сообщить("Несоответствие типов приёмника и источника в  в регистре Соответствия объектов  (подсистема переноса) для "+Строка.Документ);
				КонецЕсли;	
				
			КонецЕсли;
			      			
		Исключение
			
			Продолжить;
					
		КонецПопытки;	
		
	КонецЦикла;

КонецПроцедуры // kwr_ЗаменитьДокументыОснованияНаНепроведенныеДокументыАвизо(БазисРаспределения) }}KM WARE Малыгин П.К. Заявка № 26571 07.10.2015 окончание

// Проверяем что два массива идентичны//
// {{KM WARE Малыгин П.К. Заявка № 26571 07.10.2015 начало
Функция kwr_ПроверитьИдетичностьМассивов(ПервыйМассив,ВторойМассив)

	НаибольшийИндекс = ПервыйМассив.ВГраница(); 
	Если НаибольшийИндекс > ВторойМассив.ВГраница () Тогда 
		Возврат Ложь; 
	КонецЕсли; 
	
	Для Счетчик = 0 По НаибольшийИндекс Цикл 
		Если ПервыйМассив[Счетчик] <> ВторойМассив[Счетчик] Тогда 
		Возврат Ложь; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина; 		

КонецФункции // kwr_ПроверитьИдетичностьМассивов() }}KM WARE Малыгин П.К. Заявка № 26571 07.10.2015 окончание

Функция ПроверкаДокументаБиллинга(СсылкаДок)
//++ТТК Готовцев 03.04.2018
	
	СвойствоТипБилинга = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ТипБиллинга");	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	(ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Документ.ПлатежноеПоручениеВходящее)) = &ППВСсылка
	|	И ЗначенияСвойствОбъектов.Свойство = &СвойствоТипБиллинга";
	
	Запрос.УстановитьПараметр("ППВСсылка", СсылкаДок);
	Запрос.УстановитьПараметр("СвойствоТипБиллинга", СвойствоТипБилинга);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
	Возврат ложь;
	
КонецФункции	
//--ТТК Готовцев 03.04.2018
