///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ

// Возвращает часто используемые настройки и значения
Функция глВНЗначениеПеременной(Знач ИмяПараметра) Экспорт
	
	НайденноеЗначение = Неопределено;
	
	// При чтении 
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверяет удоавлетворяет ли текущая ИБ параметрам уникальности
	Если ВРег(ИмяПараметра) = ВРег("ВеренПараметрУникальности") Тогда
		
		НайденноеЗначение	= внЖурналРегистрацииПовтИсп.ВеренПараметрУникальности();
				
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ВестиИсториюИзменений") Тогда
		
		ВестиИсториюИзменений	= ПолучитьНастройкуЖурналаРегистрации("ВестиИсториюИзменений");
		Если ВестиИсториюИзменений = Неопределено Тогда
			НайденноеЗначение	= Ложь;
		Иначе
			НайденноеЗначение	= ВестиИсториюИзменений И внЖурналРегистрации.ЕстьПользователи() И внЖурналРегистрацииПовтИсп.ВеренПараметрУникальности() И (НЕ РольДоступна("внНеФиксироватьСобытияЖурналаРегистарции"));
		КонецЕсли;
		
	Иначе
		
		// Запрос из настроек регистра
		НайденноеЗначение	= ПолучитьНастройкуЖурналаРегистрации(ИмяПараметра);
		
	КонецЕсли;
	
	Возврат НайденноеЗначение;		
	
КонецФункции

// Получает настройку изменений
Функция ПолучитьНастройкуЖурналаРегистрации(Знач ИмяПараметра) Экспорт
	
	// При чтении 
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Настройки." + ИмяПараметра + "
		|ИЗ
		|	РегистрСведений.внНастройкиЖурналаРегистрации КАК Настройки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка[ИмяПараметра];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьНастройкуЖурналаРегистрации

// Устанавливает настройку изменений из базы
Процедура УстановитьНастройкуЖурналаРегистрации(ИмяПараметра, Значение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = РегистрыСведений.внНастройкиЖурналаРегистрации.Выбрать();
	Если Выборка.Следующий() Тогда
		НаборЗаписей = РегистрыСведений.внНастройкиЖурналаРегистрации.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		НоваяЗапись 				= НаборЗаписей[0];
		НоваяЗапись[ИмяПараметра]	= Значение;
		НаборЗаписей.Записать();		
	Иначе
		 внЖурналРегистрации.ПроверкаЗаполненияНастроек();
	КонецЕсли;
	
КонецПроцедуры // УстановитьНастройкуЖурналаРегистрации

// Возвращает Ложь или Истина в зависимости от того регистрировать ли события объекта метаданных или нет
Функция РегистрироватьСобытиеОбъекта(Знач ПолноеИмя) Экспорт
	
	// Это объекты журнала регистрации
	Массив = внЖурналРегистрацииПовтИсп.МассивПредопределенныхНеРегистрируемыхОбъектов();	
	Если Массив.Найти(ПолноеИмя) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Смотрим в регистре не регистрируемых объектов
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	внНеРегистрируемыеОбъекты.НеРегистрировать
		|ИЗ
		|	РегистрСведений.внНеРегистрируемыеОбъекты КАК внНеРегистрируемыеОбъекты
		|ГДЕ
		|	внНеРегистрируемыеОбъекты.МетаданныеОбъекта = &МетаданныеОбъекта
		|	И внНеРегистрируемыеОбъекты.ИмяТЧ = """"
		|	И внНеРегистрируемыеОбъекты.ИмяРеквизита = """""
	);
	Запрос.УстановитьПараметр("МетаданныеОбъекта", ПолноеИмя);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат НЕ Выборка.Следующий();
		
КонецФункции // РегистрироватьСобытиеОбъекта

// Возвращает таблицу с колонками МетаданныеОбъекта, ИмяТЧ, ИмяРеквизита с не регистрируемыми значениями
Функция НеРегистрируемыеОбъектыМетаданных(ПолноеИмя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Смотрим в регистре не регистрируемых объектов
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	внНеРегистрируемыеОбъекты.МетаданныеОбъекта,
		|	внНеРегистрируемыеОбъекты.ИмяТЧ КАК ИмяТЧ,
		|	внНеРегистрируемыеОбъекты.ИмяРеквизита КАК ИмяРеквизита
		|ИЗ
		|	РегистрСведений.внНеРегистрируемыеОбъекты КАК внНеРегистрируемыеОбъекты
		|ГДЕ
		|	внНеРегистрируемыеОбъекты.МетаданныеОбъекта = &МетаданныеОбъекта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяТЧ,
		|	ИмяРеквизита"
	);
	Запрос.УстановитьПараметр("МетаданныеОбъекта", ПолноеИмя);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // НеРегистрируемыеОбъектыМетаданных

// Истина если тип обмена в настрйоках "Полный обмен"
Функция ТипОбменаРИБПолный() Экспорт
		
	Результат = глВНЗначениеПеременной("ТипОбменаРИБ") = Перечисления.внТипОбменаРИБ.ОбменКэшемЖурналаЧерезТиповойРИБ;
	
	Возврат Результат;
	
КонецФункции // ТипОбменаРИБПолный

// Проверяет текущуая конфигурация использует БСП или нет
Функция КонфигурацияИспользуетБСП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Возврат Метаданные.Справочники.Найти("ИдентификаторыОбъектовМетаданных") <> Неопределено;		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Получает имя компьютра из параметров сеанса для текущего пользователя
Функция ПолучитьИмяКомпьютера() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Результат = ПараметрыСеанса.внПараметрыКлиентаНаСервере.Получить("ИмяКомпьютера");
	Исключение
		Результат = ИмяКомпьютера();
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции

// Инициализирует на сервере параметры сеанса клиента
Процедура ИнициализацияПараметровПриНачалеРаботы(Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСеанса.внПараметрыКлиентаНаСервере	= Новый ФиксированноеСоответствие(Параметры);	
	ПараметрыСеанса.внАдресСоединения			= "";
	
КонецПроцедуры

// Возвращает есть ли пользоватли ИБ в конфигурации
Функция ЕстьПользователи() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Результат			= МассивПользователей.Количество() > 0;	
	Исключение		
		Результат			= Истина;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции  // ЕстьПользователи

// Возвращает истина, если есть записи в кэше
Функция ЕстьСобытияВКэше() Экспорт
		
	Возврат НомерПоследнейЗаписи() >= 0;
	
КонецФункции // ЕстьСобытияВКэше

// Возвращает номер последней записи в кэше
Функция НомерПоследнейЗаписи() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	внКэшЖурналаРегистрации.НомерЗаписи
		|ИЗ
		|	РегистрСведений.внКэшЖурналаРегистрации КАК внКэшЖурналаРегистрации
		|ГДЕ
		|	внКэшЖурналаРегистрации.УзелРИБ = &УзелРИБ";
		
	Запрос.УстановитьПараметр("УзелРИБ", внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторУзлаРИБ());
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат 1;
	иначе
		Возврат 0;
	Конецесли
	
	
	
КонецФункции // НомерПоследнейЗаписи

// Возвращает табличный документ с макетом изменений 
Функция ПолучитьТабличныйДокументИсторииИзменений() Экспорт
	
	Макет						= ПолучитьОбщийМакет("внОписаниеИзменений");
	
	ТД							= Новый ТабличныйДокумент;
	ТД.ТолькоПросмотр			= Истина;
	ТД.ОтображатьГруппировки	= Истина;
	ТД.ОтображатьСетку			= Ложь;
	ТД.ОтображатьЗаголовки		= Ложь;	
	ТД.Вывести(Макет);
	
	Возврат ТД;
	
КонецФункции // ПолучитьТабличныйДокументИсторииИзменений

///////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ СОБЫТИЙ В КЭШЕ

// Фиксация входа пользователя в ИБ
Процедура РегистрацияВходаПользователя() Экспорт
	
	// Отправляем на сервер информацию о том, что пользователь вошел
	Если внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("РегистрироватьВходыИВыходыПользователей") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			
	        МенеджерЗаписи 						= РегистрыСведений.внКэшЖурналаРегистрации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.НомерЗаписи 			= Новый УникальныйИдентификатор(); //внЖурналРегистрацииСервер.НомерПоследнейЗаписи() + 1;
			МенеджерЗаписи.УзелРИБ				= внЖурналРегистрации.ПолучитьУзелРИБ();
			МенеджерЗаписи.ДатаИзменения		= ТекущаяДата();
			МенеджерЗаписи.Пользователь			= ИмяПользователя();
			МенеджерЗаписи.МетаданныеОбъекта	= "Пользователи.НачалоСеанса";
			МенеджерЗаписи.ИдентификаторОбъекта	= "НачалоСеанса." + ИмяПользователя();
			МенеджерЗаписи.Компьютер			= внЖурналРегистрацииПовтИсп.ПолучитьИмяКомпьютера();
			МенеджерЗаписи.Событие				= 9;
			МенеджерЗаписи.ПропускатьОбработку	= Ложь;
			
			ИзмененияТЧ							= внЖурналРегистрации.СоздатьИзмененияТЧ();
					
			// Смотрим роли пользователя и записываем их в изменения
			НомерСтрокиТЧ						= 1;
			Для Каждого Роль Из Метаданные.Роли Цикл
				
				Если РольДоступна(Роль) Тогда
				
					НоваяЗапись 				= ИзмененияТЧ.Добавить();
					НоваяЗапись.ИмяТЧ			= "Роли";
					НоваяЗапись.ИмяРеквизита	= "Роль";
					НоваяЗапись.Значение		= Роль.Имя;
					НоваяЗапись.Представление	= ?(ПустаяСтрока(Роль.Синоним), Роль.Имя, Роль.Синоним);
					НоваяЗапись.НомерСтрокиТЧ	= НомерСтрокиТЧ;
					НоваяЗапись.ТипРеквизита	= 0;
					
					НомерСтрокиТЧ				= НомерСтрокиТЧ + 1;
					
				КонецЕсли;
				
			КонецЦикла;
					
			МенеджерЗаписи.Данные				= Новый ХранилищеЗначения(ИзмененияТЧ, Новый СжатиеДанных(9));
			
			МенеджерЗаписи.Записать();
						
		Исключение
			
			ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка регистрации входа пользователя: "+ ИмяПользователя() + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
		
КонецПроцедуры // РегистрацияВходаПользователя()

// Фиксация выхода пользователя из ИБ
Процедура РегистрацияВыходаПользователя() Экспорт
	
	// Отправляем на сервер информацию о том, что пользователь вышел	
	Если внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("РегистрироватьВходыИВыходыПользователей") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			
	        МенеджерЗаписи 						= РегистрыСведений.внКэшЖурналаРегистрации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.НомерЗаписи 			= Новый УникальныйИдентификатор(); //внЖурналРегистрацииСервер.НомерПоследнейЗаписи() + 1;
			МенеджерЗаписи.УзелРИБ				= внЖурналРегистрации.ПолучитьУзелРИБ();
			МенеджерЗаписи.ДатаИзменения		= ТекущаяДата();
			МенеджерЗаписи.Пользователь			= ИмяПользователя();
			МенеджерЗаписи.МетаданныеОбъекта	= "Пользователи.ОкончаниеСеанса";
			МенеджерЗаписи.ИдентификаторОбъекта	= "ОкончаниеСеанса." + ИмяПользователя();
			МенеджерЗаписи.Компьютер			= внЖурналРегистрацииПовтИсп.ПолучитьИмяКомпьютера();
			МенеджерЗаписи.Событие				= 10;
			МенеджерЗаписи.ПропускатьОбработку	= Истина; // Пропускаем обработку
			МенеджерЗаписи.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка регистрации выхода пользователя: "+ ИмяПользователя() + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;	
	
КонецПроцедуры // РегистрацияВыходаПользователя

// Регистрирует открытие формы
// Вызывается из клиентского модуля внЖурналРегистрацииКлиент
Процедура РегистрацияОткрытияФормы(Знач ОбъектСсылка, Знач УзелРИБ, Знач ИмяФормы) Экспорт
	
	// Если регистрация отключена
	Если НЕ внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
		
	Попытка
		
		ОбъектМетаданные 					= ОбъектСсылка.Метаданные();
		ПолноеИмя							= ОбъектМетаданные.ПолноеИмя();
		ТипОбъекта							= внЖурналРегистрации.ПолучитьТипОбъектаПоИмени(ПолноеИмя);
		
        МенеджерЗаписи 						= РегистрыСведений.внКэшЖурналаРегистрации.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.НомерЗаписи 			= Новый УникальныйИдентификатор(); //внЖурналРегистрацииСервер.НомерПоследнейЗаписи() + 1;
		МенеджерЗаписи.ДатаИзменения		= ТекущаяДата();
		МенеджерЗаписи.Пользователь			= ИмяПользователя();
		МенеджерЗаписи.Компьютер			= внЖурналРегистрацииПовтИсп.ПолучитьИмяКомпьютера();
		МенеджерЗаписи.МетаданныеОбъекта	= ПолноеИмя;		
		МенеджерЗаписи.ТипМетаданных		= ТипОбъекта;
		МенеджерЗаписи.УзелРИБ				= УзелРИБ;		
		МенеджерЗаписи.ИдентификаторОбъекта	= внЖурналРегистрации.СистемноеПредставлениеОбъекта(ОбъектСсылка);
		МенеджерЗаписи.ПредставлениеОбъекта	= ИмяФормы;
		МенеджерЗаписи.Событие				= 12; // << Открытие
		МенеджерЗаписи.ПропускатьОбработку	= Истина;
		МенеджерЗаписи.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка регистрации открытия формы "+ ИмяФормы + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;	
	
КонецПроцедуры // РегистрацияОткрытияФормы

// Регистрирует закрытие формы
// Вызывается из клиентского модуля внЖурналРегистрацииКлиент
Процедура РегистрацияЗакрытияФормы(Знач ОбъектСсылка, Знач УзелРИБ, Знач ИмяФормы) Экспорт
	
	// Если регистрация отключена
	Если НЕ внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		ОбъектМетаданные 					= ОбъектСсылка.Метаданные();
		ПолноеИмя							= ОбъектМетаданные.ПолноеИмя();
		ТипОбъекта							= внЖурналРегистрации.ПолучитьТипОбъектаПоИмени(ПолноеИмя);
		
        МенеджерЗаписи 						= РегистрыСведений.внКэшЖурналаРегистрации.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.НомерЗаписи 			= Новый УникальныйИдентификатор(); //внЖурналРегистрацииСервер.НомерПоследнейЗаписи() + 1;
		МенеджерЗаписи.ДатаИзменения		= ТекущаяДата();
		МенеджерЗаписи.Пользователь			= ИмяПользователя();
		МенеджерЗаписи.МетаданныеОбъекта	= ПолноеИмя;		
		МенеджерЗаписи.ТипМетаданных		= ТипОбъекта;
		МенеджерЗаписи.УзелРИБ				= УзелРИБ;
		МенеджерЗаписи.Компьютер			= внЖурналРегистрацииПовтИсп.ПолучитьИмяКомпьютера();
		МенеджерЗаписи.ИдентификаторОбъекта	= внЖурналРегистрации.СистемноеПредставлениеОбъекта(ОбъектСсылка);
		МенеджерЗаписи.ПредставлениеОбъекта	= ИмяФормы;
		МенеджерЗаписи.Событие				= 13; // << Закрытие
		МенеджерЗаписи.ПропускатьОбработку	= Истина;
		МенеджерЗаписи.Записать();
			
	Исключение
		
		ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка регистрации закрытия формы "+ ИмяФормы + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;	
	
КонецПроцедуры // РегистрацияЗакрытияФормы

// Регистрирует во внешней ИБ удаление объекта
Процедура РегистрацияУдаленияОбъекта(Знач ОбъектСсылка, Знач УзелРИБ)  Экспорт 
	
	// Если регистрация отключена
	Если НЕ внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолноеИмя			= ОбъектСсылка.Метаданные().ПолноеИмя();
	
	// Проверка, нужно ли фиксировать изменения для данного типа объектов	
	Если НЕ внЖурналРегистрацииПовтИсп.РегистрироватьСобытиеОбъекта(ПолноеИмя) Тогда
		Возврат;
	КонецЕсли;
	ТипОбъекта			= внЖурналРегистрации.ПолучитьТипОбъектаПоИмени(ПолноеИмя);
	
	// Запись на сервере
	Попытка
		
		// {{ТТК Сладков А. Заявка № 01.06.2016 начало
		ИмяПользователя =внЖурналРегистрацииПовтИсп.ПолучитьИмяПользователя();
		Если ИмяПользователя = "Фоновое задание" Тогда
			
			Возврат;
			
		КонецЕсли;	
		// }}ТТК Сладков А. Заявка № 01.06.2016 окончание

        МенеджерЗаписи 							= РегистрыСведений.внКэшЖурналаРегистрации.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.НомерЗаписи 				= Новый УникальныйИдентификатор(); //внЖурналРегистрацииСервер.НомерПоследнейЗаписи() + 1;
		МенеджерЗаписи.ДатаИзменения			= ТекущаяДата();
		МенеджерЗаписи.Пользователь				= внЖурналРегистрацииПовтИсп.ПолучитьИмяПользователя();
		МенеджерЗаписи.Компьютер				= внЖурналРегистрацииПовтИсп.ПолучитьИмяКомпьютера();
		МенеджерЗаписи.Событие					= 4; //<< Удаление
		МенеджерЗаписи.МетаданныеОбъекта		= ПолноеИмя;
		МенеджерЗаписи.ИдентификаторОбъекта		= внЖурналРегистрации.СистемноеПредставлениеОбъекта(ОбъектСсылка);
		МенеджерЗаписи.ПредставлениеОбъекта		= внЖурналРегистрации.СтандартноеПредставлениеОбъекта(ОбъектСсылка);
		МенеджерЗаписи.ТипМетаданных			= ТипОбъекта;
		МенеджерЗаписи.УзелРИБ					= УзелРИБ;
		МенеджерЗаписи.ПропускатьОбработку		= Ложь;
		МенеджерЗаписи.Записать();
				
	Исключение
		
		ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка удаления объекта: "+ ПолноеИмя + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры // РегистрацияУдаленияОбъекта

// Выполняет запись события в журнал
// {{ТТК Сладков А. Заявка № 24.05.2016 начало
//Процедура РегистрацияИзмененияОбъекта(Знач ИзмененияТЧ, Знач ИдентификаторОбъекта, Знач УзелРИБ, Знач ПредставлениеОбъекта, Знач ПолноеИмя, Знач ТипОбъекта, Знач Событие) Экспорт
Процедура РегистрацияИзмененияОбъекта(Знач ИзмененияТЧ, Знач ИдентификаторОбъекта, Знач УзелРИБ, Знач ПредставлениеОбъекта, Знач ПолноеИмя, Знач ТипОбъекта, Знач Событие, ВремяЗаписиВМиллисекундахКлиент=0) Экспорт
// }}ТТК Сладков А. Заявка № 24.05.2016 окончание
	
	УстановитьПривилегированныйРежим(Истина);
	
	// {{ТТК Сладков А. Заявка № 24.05.2016 начало	
	ВремяНачалаЗаписиСервер = ТекущаяУниверсальнаяДатаВМиллисекундах();
	// }}ТТК Сладков А. Заявка № 24.05.2016 окончание

	
	Попытка
		
		// {{ТТК Сладков А. Заявка № 01.06.2016 начало
		ИмяПользователя =внЖурналРегистрацииПовтИсп.ПолучитьИмяПользователя();
		Если ИмяПользователя = "Фоновое задание" Тогда
			
			Возврат;
			
		КонецЕсли;	
		// }}ТТК Сладков А. Заявка № 01.06.2016 окончание


        МенеджерЗаписи 							= РегистрыСведений.внКэшЖурналаРегистрации.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.НомерЗаписи 				= Новый УникальныйИдентификатор(); //внЖурналРегистрацииСервер.НомерПоследнейЗаписи() + 1;
		МенеджерЗаписи.ДатаИзменения			= ТекущаяДата();
		МенеджерЗаписи.Пользователь				= внЖурналРегистрацииПовтИсп.ПолучитьИмяПользователя();
		МенеджерЗаписи.Компьютер				= внЖурналРегистрацииПовтИсп.ПолучитьИмяКомпьютера();
		МенеджерЗаписи.МетаданныеОбъекта		= ПолноеИмя;		
		МенеджерЗаписи.ТипМетаданных			= ТипОбъекта;
		МенеджерЗаписи.УзелРИБ					= УзелРИБ;
		МенеджерЗаписи.ПропускатьОбработку		= Ложь;
		МенеджерЗаписи.Событие					= Событие;
		МенеджерЗаписи.ИдентификаторОбъекта		= ИдентификаторОбъекта;
		МенеджерЗаписи.ПредставлениеОбъекта		= ПредставлениеОбъекта;	
		
				
		Если ИзмененияТЧ.Количество() > 0 Тогда
						
			МенеджерЗаписи.Данные				= Новый ХранилищеЗначения(ИзмененияТЧ, Новый СжатиеДанных(9));
			
		КонецЕсли;
		
		внЖурналРегистрацииПереопределяемый.ПередЗаписьюВКэшЖураналаРегистрации(МенеджерЗаписи);
		
		
		// {{ТТК Сладков А. Заявка № 24.05.2016 начало	
		// выполняем операцию, которую необходимо замерить
		ВремяКонцаВыполненияСервер      = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ВремяЗаписиВМиллисекундахСервер  =  ВремяКонцаВыполненияСервер - ВремяНачалаЗаписиСервер +ВремяЗаписиВМиллисекундахКлиент;
		// }}ТТК Сладков А. Заявка № 24.05.2016 окончание

		// {{ТТК Сладков А. Заявка № 24.05.2016 начало
		МенеджерЗаписи.ВремяЗаписиВМиллисекундах		= ВремяЗаписиВМиллисекундахСервер;
		// }}ТТК Сладков А. Заявка № 24.05.2016 окончание

		МенеджерЗаписи.Записать();
				
	Исключение
		
		ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка регистрации объекта: "+ ПолноеИмя + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;	
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕСС СЖАТИЯ

// Получает таблицу реквизитов метаданных
Функция ПолучитьТаблицуРеквизитов() Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Ссылка");
	ТЗ.Колонки.Добавить("МетаданныеОбъекта"	, Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(300, ДопустимаяДлина.Переменная)));
	ТЗ.Колонки.Добавить("ИмяТЧ"				, Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная)));
	ТЗ.Колонки.Добавить("ИмяРеквизита"		, Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная)));	
	ТЗ.Колонки.Добавить("ТипРеквизита"		, Новый ОписаниеТипов("Число", ,Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Индексы.Добавить("МетаданныеОбъекта,ИмяТЧ,ИмяРеквизита,ТипРеквизита");
	
	Возврат ТЗ;	
	
КонецФункции // ПолучитьТаблицуРеквизитов

///////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНЫЕ ЗАДАНИЯ

// Перенос кэша во внешнюю базу данных
Процедура внПереносКэшаЖурналаРегистрации() Экспорт
	
	ПереносКэшаЖурналаРегистрации(Ложь, Истина);
	
КонецПроцедуры // внПереносКэшаЖурналаРегистрации

// Вызывается при ручном переносе данных в ИБ Хранителя
Процедура ОбработкаВнешнегоЖурналаРегистрации(ЗаписыватьВСтандартныйЖурнал = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если регистрация отключена
	Если НЕ внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
		Если ЗаписыватьВСтандартныйЖурнал Тогда
			ПУ = внЖурналРегистрации.ПараметрУникальностиИБ();
			ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Запуск обработки внешнего журнала по регламентному заданию не был выполнен (история отключена, или не подходят параметры уникальности (сервер: <" + ПУ.Сервер + ">, имя базы: <" + ПУ.ИмяБазы + ">)).");
		КонецЕсли;
		Возврат;
	Иначе
		Если ЗаписыватьВСтандартныйЖурнал Тогда
			ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Информация,,, "Запуск обработки внешнего журнала по регламентному заданию " + Формат(ТекущаяДата(), "ДФ='dd.MM.yy HH:mm:ss'"));
		КонецЕсли;
	КонецЕсли;
	
	внСоединение = внЖурналРегистрации.ПолучитьСоединение();
	Если внСоединение = Неопределено Тогда
		Если ЗаписыватьВСтандартныйЖурнал Тогда
			ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Запуск обработки внешнего журнала по регламентному заданию не был выполнен (нет соединения с хранителем журнала регистрации).");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Массив = Неопределено;
	НомерЗадания = Неопределено;
	
	Попытка
		
		внСоединение.внЖурналРегистрацииРегламентныеЗадания.внОбработкаЖурналаРегистрации(Массив, Истина, НомерЗадания);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка переноса кэша в ИБ ""Хранитель журнала регистрации"" " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если ЗаписыватьВСтандартныйЖурнал Тогда
		ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Информация,,, "Завершение  обработки внешнего журнала по регламентному заданию " + Формат(ТекущаяДата(), "ДФ='dd.MM.yy HH:mm:ss'"));
	КонецЕсли;		
	
КонецПроцедуры // ОбработкаВнешнегоЖурналаРегистрации

Функция ПередатьПакетВоВнешнююИБ(внСоединение, Знач ЗаписыватьВСтандартныйЖурнал, Знач ИдентификаторИБ, Знач Массив) Экспорт
	
	ВозниклоИсключение = Ложь;
	
	Попытка
		
		Результат = внСоединение.внЖурналРегистрации.ДобавитьПакетВЖурналРегистрации(ИдентификаторИБ, Массив);
		
	Исключение
		
		ВозниклоИсключение = Истина;
				
	КонецПопытки;
	
	Если ВозниклоИсключение Тогда
		
		// Очищаем память, от внешнего соединения
		внЖурналРегистрации.ОтключитьСоединение();
		
		Если ЗаписыватьВСтандартныйЖурнал Тогда
			ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Внешнее соединение потеряно, попытка снова подключиться. Причина потери соединения: " + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		
		// Может быть ситуация, что отвалилось соединение. Пытаемся подключиться снова.
		внСоединение = внЖурналРегистрации.ПолучитьСоединение();
		Если внСоединение = Неопределено Тогда
			Если ЗаписыватьВСтандартныйЖурнал Тогда
				ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Попытка повторного соединения не удачна");
			КонецЕсли;
			
			Возврат "Обрыв соединения с ИБ <Хранитель>";
		КонецЕсли;
		
		Попытка
			
			Результат = внСоединение.внЖурналРегистрации.ДобавитьПакетВЖурналРегистрации(ИдентификаторИБ, Массив);
			
		Исключение
			Если ЗаписыватьВСтандартныйЖурнал Тогда
				ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "После восстановления соединения ошибка: " + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			
			Возврат "После восстановления соединения ошибка: " + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;		
		
	КонецЕсли;
	
	// Успешно
	Возврат Результат;
	
КонецФункции // ПередатьПакетВоВнешнююИБ

// Механика переноса кэша
Функция ПереносКэшаЖурналаРегистрации(Оповещать = Ложь, ЗаписыватьВСтандартныйЖурнал = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если регистрация отключена
	Если НЕ внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
		Если ЗаписыватьВСтандартныйЖурнал Тогда
			ПУ = внЖурналРегистрации.ПараметрУникальностиИБ();
			ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Запуск переноса кэша по регламентному заданию не был выполнен (история отключена, или не подходят параметры уникальности (сервер: <" + ПУ.Сервер + ">, имя базы: <" + ПУ.ИмяБазы + ">)).");
		КонецЕсли;
		Возврат Ложь;
	Иначе
		Если ЗаписыватьВСтандартныйЖурнал Тогда
			ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Информация,,, "Запуск переноса кэша по регламентному заданию " + Формат(ТекущаяДата(), "ДФ='dd.MM.yy HH:mm:ss'"));
		КонецЕсли;
	КонецЕсли;
	
	внСоединение = внЖурналРегистрации.ПолучитьСоединение();
	Если внСоединение = Неопределено Тогда
		Если ЗаписыватьВСтандартныйЖурнал Тогда
			ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Запуск переноса кэша по регламентному заданию не был выполнен (нет соединения с хранителем журнала регистрации).");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	РазмерПакетаПереносаДанных  = глВНЗначениеПеременной("РазмерПакетаПереносаДанных");
	Если РазмерПакетаПереносаДанных = 0 Тогда
		РазмерПакетаПереносаДанных = 100;
	КонецЕсли;
	ИдентификаторИБ				= внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ();	
	внКэшЖурналаРегистрации 	= РегистрыСведений.внКэшЖурналаРегистрации;
	ПустаяДата					= Дата(1, 1, 1);
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	внКэшЖурналаРегистрации.ДатаИзменения,
		|	внКэшЖурналаРегистрации.ИдентификаторОбъекта,
		|	внКэшЖурналаРегистрации.НомерЗаписи КАК НомерЗаписи,
		|	внКэшЖурналаРегистрации.УзелРИБ
		|ИЗ
		|	РегистрСведений.внКэшЖурналаРегистрации КАК внКэшЖурналаРегистрации
		|
		|УПОРЯДОЧИТЬ ПО
		|	внКэшЖурналаРегистрации.ДатаИзменения,
		|	внКэшЖурналаРегистрации.УзелРИБ,
		|	внКэшЖурналаРегистрации.НомерЗаписи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоОбработанных		= 0;
	Массив 						= Новый Массив;
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
			
		МенеджерЗаписи 						= внКэшЖурналаРегистрации.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторОбъекта = Выборка.ИдентификаторОбъекта;
		МенеджерЗаписи.НомерЗаписи 			= Выборка.НомерЗаписи;
		МенеджерЗаписи.УзелРИБ 				= Выборка.УзелРИБ;
		МенеджерЗаписи.Прочитать();
		
		// Условие для того, чтобы при выполнении из двух мест выполнялось только первый раз
		// Т.е. когда запущено паралельно и фоновое и вручную переносим, возможны проблемы 
		// одновременной обработки одного и того же события отсекаются этим условием
		// Проверка на пустую дату (дата не может быть пустой никогда, а если запись обработана и удалена, то дата пустая)
		Если МенеджерЗаписи.ДатаИзменения = ПустаяДата Тогда
			ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Остановка переноса кэша записей в Хранитель. Произошла попытка отправки ранее удаленной записи.");
			Прервать;
		КонецЕсли;
		
		Структура = Новый Структура("НомерЗаписи,ПредставлениеОбъекта,ПропускатьОбработку,ДатаИзменения,Событие,УзелРИБ,ТипМетаданных,Пользователь,Компьютер,ИдентификаторОбъекта,МетаданныеОбъекта,МетаданныеОбъектаНаименование,Данные");
		// Подготовка соответствия для отправки во внешнюю базу
		ЗаполнитьЗначенияСвойств(Структура, МенеджерЗаписи);
		Структура.МетаданныеОбъектаНаименование = внЖурналРегистрации.ПолучитьПредставлениеМетаданных(МенеджерЗаписи.МетаданныеОбъекта);
				
		// Распаковка изменений и подготовка к отправке
		ТЧ = внЖурналРегистрации.ДеСериализоватьОбъект(МенеджерЗаписи.Данные.Получить(), МенеджерЗаписи);
		Если ТЧ = Неопределено Тогда
			ТЧ = внЖурналРегистрации.СоздатьИзмененияТЧ();
		КонецЕсли;		
		ТЧ.Сортировать("ИмяТЧ,НомерСтрокиТЧ,ИмяРеквизита");
		Структура.Данные					= ТЧ;
		
		Массив.Добавить(Структура);
		
		// Удаляем запись в кэше. Удаление в транзакции.
		Попытка
			
			МенеджерЗаписи.Удалить();
			           
		Исключение
			
			// Прерываем
			Массив.Очистить();
			ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при удалении записи из кэша журнала." + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Прервать;
			
		КонецПопытки;
		
		// Записываем в транзакции
		Если Массив.Количество() = РазмерПакетаПереносаДанных Тогда
			
			// Отправляем запись в хранитель (в хранителе транзакция)
			Результат = ПередатьПакетВоВнешнююИБ(внСоединение, ЗаписыватьВСтандартныйЖурнал, ИдентификаторИБ, Массив);
			
			// Что-то пошло не так, запись не добавлена в хранителе, надо прекратить перенос.
			Если Результат <> Истина Тогда
				// Прерываем   
				Массив.Очистить();
				ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при добавлении переносе пакета в Хранитель" + Символы.ПС + Результат);
				Прервать;				
			КонецЕсли;
			
			// Фиксируем транзакцию
			Если ТранзакцияАктивна() Тогда
				ЗафиксироватьТранзакцию();
				КоличествоОбработанных = КоличествоОбработанных + Массив.Количество();
			КонецЕсли;
			НачатьТранзакцию();
			Массив.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если Массив.Количество() > 0 Тогда
		
		// Отправляем запись в хранитель (в хранителе транзакция)
		Результат = ПередатьПакетВоВнешнююИБ(внСоединение, ЗаписыватьВСтандартныйЖурнал, ИдентификаторИБ, Массив);
		
		// Что-то пошло не так, запись не добавлена в хранителе, надо прекратить перенос.
		Если Результат = Истина Тогда
			Если ТранзакцияАктивна() Тогда
				ЗафиксироватьТранзакцию();
				КоличествоОбработанных = КоличествоОбработанных + Массив.Количество();
			КонецЕсли;
		Иначе
			// Прерываем   
			Массив.Очистить();
			ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при добавлении переносе пакета в Хранитель" + Символы.ПС + Результат);
		КонецЕсли;
			
	КонецЕсли;
	
	// Отменяем транзакцию
	Если Массив.Количество() = 0 Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписыватьВСтандартныйЖурнал Тогда		
		ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Информация, , "Завершение переноса кэша по регламентному заданию " + Формат(ТекущаяДата(), "ДФ='dd.MM.yy HH:mm:ss'") + ". Обработано " + Строка(КоличествоОбработанных) + " изменений.");
	КонецЕсли;		
	
	Возврат Истина;
		
КонецФункции // ПереносКэшаЖурналаРегистрации
