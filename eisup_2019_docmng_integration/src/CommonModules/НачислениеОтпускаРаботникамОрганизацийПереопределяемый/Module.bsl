
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции объекта

Процедура ВыполнитьПрочиеДвиженияДокумента(ДокументОбъект, ВыборкаПоШапкеДокумента, Отказ, Заголовок, ВыборкаПоНачислениям = Неопределено) Экспорт 

	Если НЕ Отказ Тогда
		
		Движения = ДокументОбъект.Движения;
		ВыборкаПоНачислениям.Сбросить();
		
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			
			Если ЗначениеЗаполнено(ВыборкаПоНачислениям.КодДоходаНДФЛ) Тогда
				
				Движение = Движения.НДФЛСведенияОДоходах.Добавить();
				
				ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента); // Организация, ФизЛицо,  ПериодРегистрации, ОбособленноеПодразделение
				ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоНачислениям); //ПодразделениеОрганизации, ВидРасчета
				
				// Свойства
				Движение.Период					= ВыборкаПоНачислениям.МесяцНалоговогоПериода;
				
				// Измерения
				Движение.КодДохода				= ВыборкаПоНачислениям.КодДоходаНДФЛ;
				
				// Ресурсы
				Движение.СуммаДохода			= ВыборкаПоНачислениям.Результат; 
				
				// Реквизиты
				Движение.ИсчисленоИзЗарплаты	= Истина;

			КонецЕсли;
			
			Если Не ВыборкаПоНачислениям.ЯвляетсяДоходомВНатуральнойФорме Тогда
				
				Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
				
				// Свойства
				Движение.Период					= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
				Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
				
				// Измерения
				Движение.Организация			= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
				Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
				Движение.ПериодВзаиморасчетов	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
				
				// Ресурсы
				Движение.СуммаВзаиморасчетов	= ВыборкаПоНачислениям.Результат;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДополнительныеПроверкиСтрокиНачислений(ДокументОбъект,ВыборкаПоСтрокамДокумента,Отказ, Заголовок, СтрокаНачалаСообщенияОбОшибке) Экспорт 

	// В этой конфигурации дополнительные действия не выполняются

КонецПроцедуры

Процедура ПереписатьПрочиеДвиженияПриПерерасчете(ДокументОбъект, ВыборкаПоШапкеДокумента) Экспорт 

	ДокументОбъект.Движения.НДФЛСведенияОДоходах.Очистить();
	ДокументОбъект.Движения.ВзаиморасчетыСРаботникамиОрганизаций.Очистить();
	ДокументОбъект.Движения.ФактическиеОтпускаОрганизаций.Очистить();
	
	ВыборкаПоНачислениям = ДокументОбъект.СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		НачислениеОтпускаРаботникамОрганизацийДополнительный.ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ДокументОбъект, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
	КонецЦикла;
	
	// записываем обновленные движения
	Для Каждого Набор Из ДокументОбъект.Движения Цикл
		ТипНабораЗаписей = ТипЗнч(Набор);
		Если ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.НДФЛСведенияОДоходах") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.ВзаиморасчетыСРаботникамиОрганизаций") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.ФактическиеОтпускаОрганизаций") Тогда
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДополнительныеПараметрыЗапросаПоНачислениям(Запрос) Экспорт

	КодОплатыТрудаПоНДФЛ = Новый Массив;
	КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
	КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.Код2012);
	Запрос.УстановитьПараметр("КодОплатыТрудаПоНДФЛ", КодОплатыТрудаПоНДФЛ);

КонецПроцедуры

// Возвращает признак того, используется ли при расчете средне часовой заработок
//
// Параметры
//  ДокументОбъект - ДокументОбъект.НачислениеОтпускаРаботникамОрганизаций
//
// Возвращаемое значение:
//   булево
//
Функция ИспользуетсяСреднеЧасовойЗаработок(ДокументОбъект) Экспорт

	Возврат ДокументОбъект.ИспользоватьСреднеЧасовойЗаработок

КонецФункции // ИспользуетсяСреднеЧасовойЗаработок()

// Определяет количество месяцев расчетного периода в зависимости от даты начала события
//
// Параметры
//  ДокументОбъект - ДокументОбъект.НачислениеОтпускаРаботникамОрганизаций
//
// Возвращаемое значение:
//   число
//
Функция КоличествоМесяцевРасчетаПоЗакону(ДокументОбъект) Экспорт

	Возврат ?(ДокументОбъект.ДатаНачалаСобытия < ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006(),3,12)

КонецФункции // КоличествоМесяцевРасчетаПоЗакону()

// Возвращает перечень в.р. среднего заработка, соответствующих годовым премиям
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   массив
//
Функция МассивГодовыхПремий() Экспорт

	ГодовыеПремии = Новый Массив(4);
	ГодовыеПремии[0] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
	ГодовыеПремии[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
	ГодовыеПремии[2] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые;
	ГодовыеПремии[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые;

КонецФункции // МассивГодовыхПремий()

Функция ПолучитьДополнительноеПолеЗапросаПоНачислениям() Экспорт
	Возврат 
	"СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
	|			ТОГДА ВЫБОР
	|					КОГДА СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ В (&КодОплатыТрудаПоНДФЛ)
	|						ТОГДА СтрокиНачисления.ДатаНачала
	|					ИНАЧЕ СтрокиНачисления.Ссылка.ПериодРегистрации
	|				КОНЕЦ
	|		ИНАЧЕ СтрокиНачисления.Ссылка.ПериодРегистрации
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка)
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочий)
	|	КОНЕЦ КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,"
КонецФункции

Функция ПолучитьДополнительноеПолеЗапросаПоДокументу() Экспорт
	Возврат "НачислениеОтпускаРаботникамОрганизаций.ИспользоватьСреднеЧасовойЗаработок,"
КонецФункции

Функция ПолучитьПолеЗапросаПоДокументу() Экспорт
	Возврат
	"ВЫБОР
	|		КОГДА Отпуск.ИспользоватьСреднеЧасовойЗаработок
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени"
КонецФункции

Функция ПолучитьПолеЗапросаПоНачислениям() Экспорт
	Возврат 
	"ВЫБОР
	|		КОГДА СтрокиНачисления.Ссылка.ИспользоватьСреднеЧасовойЗаработок
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени"
КонецФункции

Функция ПолучитьПрочиеПоляЗапросаПоСреднему() Экспорт
	
	Возврат "СтрокаРасчетСреднего.ОтработаноЧасов"
	
КонецФункции

Функция ПолучитьСтруктуруРегламентированныхФорм(ДокументОбъект) Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("Т60", "Форма Т-60");
	
	Возврат СтруктураПечатныхФорм
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция РасчетСреднегоЗаработка(ДокументОбъект, ПорядокРасчетаСреднего, ПериодРасчетаСреднегоЗаработка, Начало, Окончание) Экспорт 
	
	ТаблицаСреднего = ?(ПорядокРасчетаСреднего = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням, ДокументОбъект.РасчетСреднегоПоКалендарным,ДокументОбъект.РасчетСреднегоПоШестидневке);
	Если ТаблицаСреднего.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОсновнойЗаработок = Новый Массив(2);
	ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	ОсновнойЗаработок[1] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые;
	ПоФиксПремиям = Новый Массив(1);
	ПоФиксПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	ПоПремиям = Новый Массив(3);
	ПоПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
	ПоПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые;
	ПоПремиям[2] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые;
	ПоФиксПремиямНеИндексируемые = Новый Массив(3);
	ПоФиксПремиямНеИндексируемые[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
	ПоФиксПремиямНеИндексируемые[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые;
	ПоФиксПремиямНеИндексируемые[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые;
	
	Запрос.УстановитьПараметр("ОсновнойЗаработок",				ОсновнойЗаработок); // Основной заработок индексируемый
	Запрос.УстановитьПараметр("ОсновнойЗаработокНеиндексируемый", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
	Запрос.УстановитьПараметр("ПоПремиям",						ПоПремиям);  // Премии полностью учитываемые, индексируемые
	Запрос.УстановитьПараметр("ПоФиксПремиям",					ПоФиксПремиям); // Премии учитываемые частично, индексируемые
	Запрос.УстановитьПараметр("ПоФиксПремиямНеИндексируемые",	ПоФиксПремиямНеИндексируемые); // Премии учитываемые частично, не индексируемые
	Запрос.УстановитьПараметр("ТаблицаСреднего",				ТаблицаСреднего);
	Запрос.УстановитьПараметр("ПериодРасчетаСреднегоЗаработка",	ПериодРасчетаСреднегоЗаработка);
	Запрос.УстановитьПараметр("Начало",							Начало);  
	Запрос.УстановитьПараметр("Окончание",						КонецДня(Окончание));  
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетСреднегоЗаработка.ВидРасчета,
	|	РасчетСреднегоЗаработка.Результат,
	|	РасчетСреднегоЗаработка.ОтработаноДней,
	|	РасчетСреднегоЗаработка.ОтработаноЧасов,
	|	РасчетСреднегоЗаработка.НормаПоПятидневке,
	|	РасчетСреднегоЗаработка.ОтработаноПоПятидневке,
	|	РасчетСреднегоЗаработка.ЧислоМесяцев,
	|	РасчетСреднегоЗаработка.КоэффициентИндексации,
	|	РасчетСреднегоЗаработка.БазовыйПериодНачало,
	|	РасчетСреднегоЗаработка.БазовыйПериодКонец
	|ПОМЕСТИТЬ ВТРасчетСреднегоЗаработка
	|ИЗ
	|	&ТаблицаСреднего КАК РасчетСреднегоЗаработка";
	Запрос.Выполнить(); 
			
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|				ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|						КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|							ТОГДА 1
	|						ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|					КОНЕЦ
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|				ТОГДА РасчетСреднегоЗаработка.Результат
	|			КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	|						ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|								КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|									ТОГДА 1
	|								ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|							КОНЕЦ
	|					КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиям)
	|						ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|								КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|									ТОГДА 1
	|								ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|							КОНЕЦ * ВЫБОР
	|								КОГДА РасчетСреднегоЗаработка.НормаПоПятидневке = 0
	|									ТОГДА 0
	|								ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноПоПятидневке / РасчетСреднегоЗаработка.НормаПоПятидневке
	|							КОНЕЦ
	|					КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиямНеИндексируемые)
	|						ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|								КОГДА РасчетСреднегоЗаработка.НормаПоПятидневке = 0
	|									ТОГДА 0
	|								ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноПоПятидневке / РасчетСреднегоЗаработка.НормаПоПятидневке
	|							КОНЕЦ
	|					ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|				КОНЕЦ * ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев > &ПериодРасчетаСреднегоЗаработка
	|						ТОГДА &ПериодРасчетаСреднегоЗаработка / РасчетСреднегоЗаработка.ЧислоМесяцев
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК СреднийЗаработок,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|				ТОГДА РасчетСреднегоЗаработка.ОтработаноДней
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноДней,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|				ТОГДА РасчетСреднегоЗаработка.ОтработаноЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноЧасов
	|ИЗ
	|	ВТРасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|ГДЕ
	|	РасчетСреднегоЗаработка.БазовыйПериодНачало МЕЖДУ &Начало И &Окончание";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ДокументОбъект.ИспользоватьСреднеЧасовойЗаработок Тогда
			Возврат ?(Не ЗначениеЗаполнено(Выборка.ОтработаноЧасов), 0, Окр(Выборка.СреднийЗаработок / Выборка.ОтработаноЧасов,2));
		Иначе
			Возврат ?(Не ЗначениеЗаполнено(Выборка.ОтработаноДней), 0, Окр(Выборка.СреднийЗаработок / Выборка.ОтработаноДней,2));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 0;

КонецФункции // РасчетСреднедневногоЗаработка()

#Если Клиент Тогда
	
Функция РегламентированнаяПечатнаяФорма(ДокументОбъект, ИмяМакета) Экспорт
	
	Если ИмяМакета = "Т60" Тогда
		
		Возврат НачислениеОтпускаРаботникамОрганизацийДополнительный.ПечатьТ60(ДокументОбъект);
		
	КонецЕсли;
	
КонецФункции // РегламентированнаяПечатнаяФорма

Функция ОписаниеРегламентированнойПечатнойФормы(ДокументОбъект, ИмяМакета) Экспорт
	
	Если ИмяМакета = "Т60" Тогда
		
		Возврат " (Т-60)";
		
	КонецЕсли;
	
КонецФункции // ОписаниеРегламентированнойПечатнойФормы

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции для работы формы документа

Процедура ВыполнитьДействияПередОткрытиемФормы(ФормаДокумента) Экспорт
	
	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры	

Процедура ВыполнитьДополнительныеДействияПриОткрытииФормы(ДокументОбъект, ФормаДокумента) Экспорт
	
	ЭлементыФормы = ФормаДокумента.ЭлементыФормы;
	ЭлементыФормы.ЗаголовокДополнительнойИнформационнойНадписи.Видимость = Ложь;
	ЭлементыФормы.ДополнительнаяИнформационнаяНадпись.Видимость = Ложь;
	
КонецПроцедуры

Процедура ВыполнитьДействияПриНачалеРедактированияНачисления(ФормаДокумента, Элемент, НоваяСтрока) Экспорт
	
	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры

Процедура ВыполнитьДополнительныеДействияПриИзмененииПериодаРегистрации(ДокументОбъект, ФормаДокумента) Экспорт

	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры

Процедура ВыполнитьДействияПослеРедактированияНачисления(ФормаДокумента, ТекущаяСтрока) Экспорт
	
	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры

Процедура ВыполнитьДействияПередУдалениемНачисления(Элемент, ДокументОбъект, Отказ) Экспорт
	
	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры

Процедура ВыполнитьДополнительныеДействияПриУдаленииНачислений(ДокументОбъект, ФормаДокумента) Экспорт

	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры

Процедура НастроитьСпискиВыбораЭлементовУправления(ДокументОбъект, ФормаДокумента) Экспорт 

	ЭлементыФормы = ФормаДокумента.ЭлементыФормы;
	ДатаНачалаСобытия = ДокументОбъект.ДатаНачалаСобытия;
	
	ЭтоПорядок2007года = ?(ЗначениеЗаполнено(ДатаНачалаСобытия),ДатаНачалаСобытия,ОбщегоНазначенияЗК.ПолучитьРабочуюДату()) < ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоОтпускам2008();
	
	СписокВидовЗаписей = ПроведениеРасчетовПереопределяемый.ПолучитьПереченьСоставляющихСреднегоЗаработка(ЭтоПорядок2007года);

	ЭлементыФормы.РасчетСреднегоПоКалендарным.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора = СписокВидовЗаписей;
	ЭлементыФормы.РасчетСреднегоПоШестидневке.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора = СписокВидовЗаписей;
	ЭлементыФормы.РасчетСреднегоПоКалендарным.Колонки.ВидРасчета.ЭлементУправления.ВысотаСпискаВыбора = СписокВидовЗаписей.Количество();
	ЭлементыФормы.РасчетСреднегоПоШестидневке.Колонки.ВидРасчета.ЭлементУправления.ВысотаСпискаВыбора = СписокВидовЗаписей.Количество();
	
	ЭлементыФормы.РасчетСреднегоПоКалендарным.Колонки.ОтработаноЧасов.Видимость = ЭтоПорядок2007года;
	ЭлементыФормы.РасчетСреднегоПоКалендарным.Колонки.ОтработаноЧасов.ИзменятьНастройку = ЭтоПорядок2007года;
	ЭлементыФормы.РасчетСреднегоПоШестидневке.Колонки.ОтработаноЧасов.Видимость = ЭтоПорядок2007года;
	ЭлементыФормы.РасчетСреднегоПоШестидневке.Колонки.ОтработаноЧасов.ИзменятьНастройку = ЭтоПорядок2007года;

	ЭлементыФормы.РасчетСреднегоПоКалендарным.Колонки.ОтработаноПоПятидневке.ТекстШапки = ?(ЭтоПорядок2007года,"Отработано по пятидневке","Отработано за расчетный период");
	ЭлементыФормы.РасчетСреднегоПоКалендарным.Колонки.НормаПоПятидневке.ТекстШапки = ?(ЭтоПорядок2007года,"Норма по пятидневке","Норма за расчетный период");
	ЭлементыФормы.РасчетСреднегоПоШестидневке.Колонки.ОтработаноПоПятидневке.ТекстШапки = ?(ЭтоПорядок2007года,"Отработано по пятидневке","Отработано за расчетный период");
	ЭлементыФормы.РасчетСреднегоПоШестидневке.Колонки.НормаПоПятидневке.ТекстШапки = ?(ЭтоПорядок2007года,"Норма по пятидневке","Норма за расчетный период");
	
	ЭлементыФормы.РасчетСреднегоПоКалендарным1.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора = СписокВидовЗаписей;
	ЭлементыФормы.РасчетСреднегоПоШестидневке1.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора = СписокВидовЗаписей;
	ЭлементыФормы.РасчетСреднегоПоКалендарным1.Колонки.ВидРасчета.ЭлементУправления.ВысотаСпискаВыбора = СписокВидовЗаписей.Количество();
	ЭлементыФормы.РасчетСреднегоПоШестидневке1.Колонки.ВидРасчета.ЭлементУправления.ВысотаСпискаВыбора = СписокВидовЗаписей.Количество();
	
	ЭлементыФормы.РасчетСреднегоПоКалендарным1.Колонки.ОтработаноЧасов.Видимость = ЭтоПорядок2007года;
	ЭлементыФормы.РасчетСреднегоПоКалендарным1.Колонки.ОтработаноЧасов.ИзменятьНастройку = ЭтоПорядок2007года;
	ЭлементыФормы.РасчетСреднегоПоШестидневке1.Колонки.ОтработаноЧасов.Видимость = ЭтоПорядок2007года;
	ЭлементыФормы.РасчетСреднегоПоШестидневке1.Колонки.ОтработаноЧасов.ИзменятьНастройку = ЭтоПорядок2007года;

	ЭлементыФормы.РасчетСреднегоПоКалендарным1.Колонки.ОтработаноПоПятидневке.ТекстШапки = ?(ЭтоПорядок2007года,"Отработано по пятидневке","Отработано за расчетный период");
	ЭлементыФормы.РасчетСреднегоПоКалендарным1.Колонки.НормаПоПятидневке.ТекстШапки = ?(ЭтоПорядок2007года,"Норма по пятидневке","Норма за расчетный период");
	ЭлементыФормы.РасчетСреднегоПоШестидневке1.Колонки.ОтработаноПоПятидневке.ТекстШапки = ?(ЭтоПорядок2007года,"Отработано по пятидневке","Отработано за расчетный период");
	ЭлементыФормы.РасчетСреднегоПоШестидневке1.Колонки.НормаПоПятидневке.ТекстШапки = ?(ЭтоПорядок2007года,"Норма по пятидневке","Норма за расчетный период");
	
КонецПроцедуры

Процедура ДополнитьКолонкиТабличногоПоля(ТабличноеПоле) Экспорт 
	
	РаботаСДиалогами.ВставитьКолонкуВТабличноеПоле(4, ТабличноеПоле, "ОтработаноЧасов", "Часов отработано", "ОтработаноЧасов", , , , Тип("ПолеВвода"), ПоложениеКолонки.НаСледующейСтроке, 100);

КонецПроцедуры // ДополнитьКолонкиТабличнойЧасти()

Процедура ОбновитьДополнительнуюИнформационнуюНадпись(ДокументОбъект, ФормаДокумента) Экспорт

	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры

Процедура ПоказатьДополнительнуюФорму(ДокументОбъект, ФормаДокумента) Экспорт
	
	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры

#КонецЕсли

