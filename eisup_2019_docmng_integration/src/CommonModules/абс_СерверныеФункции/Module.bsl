//////////////////////////////////////////////////////////////////
/////////////////////// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Функция подключения к SQL
// Параметры
// Структура с полями:
//  Provider - Наименование  сервера  SQL
//  DataSource - Наименование базы данных в SQL
//  UserID -     пользователь SQL
//  Password  -  пароль SQL
Функция ВыполнитьПодключениеКSQL(Настройка) Экспорт
	

	Попытка
		ConnectionString="DRIVER={SQL Server};SERVER="+СокрЛП(Настройка.Provider)+";UID="+СокрЛП(Настройка.UserID)+";PWD="+СокрЛП(Настройка.Password)+";DATABASE="+СокрЛП(Настройка.DataSource)+";";
		Соединение=Новый COMОбъект("ADODB.Connection");
		Соединение.Open(СокрЛП(ConnectionString));
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Соединение = 0;
	КонецПопытки; 
	
	
	  Возврат Соединение;
	
	
	
  КонецФункции
  
 //Функция подключения к SQL
// Параметры
// Структура с полями:
//  Provider - Наименование  сервера  SQL
//  DataSource - Наименование базы данных в SQL
//  UserID -     пользователь SQL
//  Password  -  пароль SQL
Функция ВыполнитьПодключениеКSQLКонтактнаяИнформация(Настройка) Экспорт
	

	Попытка
		ConnectionString="DRIVER={SQL Server};SERVER="+СокрЛП(Настройка.Provider)+";UID="+СокрЛП(Настройка.UserID)+";PWD="+СокрЛП(Настройка.Password)+";DATABASE="+СокрЛП(Настройка.DataSource)+";";
		Соединение=Новый COMОбъект("ADODB.Connection");
		Соединение.Open(СокрЛП(ConnectionString));
		
	Исключение
		Соединение = 0;
	КонецПопытки; 
		
	Возврат Соединение;
		
КонецФункции

//Процедура для обновления полей таблицы таких как
// номер платежки, дата платежки, ошибки сессии загрузки, статус обработки
//
Функция ОбновитьДанныеВSQLКонтактнаяИнформация(ТекстЗапроса,Настройка) Экспорт
	
	Перем Соединение;
	
	Если Соединение = Неопределено Тогда
		Соединение = ВыполнитьПодключениеКSQL(Настройка);
	КонецЕсли;
	
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;	
	Cmd.CommandText = ТекстЗапроса;
	Rs = Новый COMОбъект("ADODB.RecordSet"); 
	
	Попытка
		
		Rs = Cmd.Execute(); 		
		Возврат Истина;
		
	Исключение
		
		Сообщить("Запрос не выполнен: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ОбновитьДанныеВSQL_ПоСоединениюКонтактнаяИнформация(ТекстЗапроса,Настройка,Соединение=Неопределено,Cmd=Неопределено) Экспорт
	
	Если Соединение = Неопределено Тогда
		Соединение = ВыполнитьПодключениеКSQLКонтактнаяИнформация(Настройка);
	КонецЕсли;
	
	Если Cmd=Неопределено Тогда
		Cmd = Новый COMОбъект("ADODB.Command");
		Cmd.ActiveConnection = Соединение;			
	КонецЕсли;
	
	Cmd.CommandText = ТекстЗапроса;
	
	Попытка
		
		Rs = Cmd.Execute(); 			
		
	Исключение

		Возврат 0;
		
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

// Функция формирования таблицы значений на основании
//
Функция ЗапросВТаблицуSQL(ТекстЗапроса,Настройка) Экспорт
	
	Перем ТаблицаРезультат;
	Перем Соединение;
	
	Если Соединение = Неопределено Тогда
		Соединение = ВыполнитьПодключениеКSQL(Настройка);
	КонецЕсли;
	
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;	
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	
	Cmd.CommandText = ТекстЗапроса;
	Rs = Новый COMОбъект("ADODB.RecordSet"); 
	
	Попытка
		
		Rs = Cmd.Execute(); 		
		КолонкиРезультат = ТаблицаРезультат.Колонки;
		
		Для ИндексКолонки = 0 По Rs.Fields.Count - 1 Цикл
// +++ввв 06.11.2016 г.
			//Если КолонкиРезультат.Найти(Rs.Fields(ИндексКолонки).name) = Неопределено Тогда
// ---ввв 06.11.2016 г.
// +++ввв 24.10.2016 г.
				_Тип="Строка";
				Если Rs.Fields(ИндексКолонки).Type=11 Тогда
					_Тип="Булево";
				ИначеЕсли Rs.Fields(ИндексКолонки).Type=131 Тогда
					_Тип="Число";
				ИначеЕсли Rs.Fields(ИндексКолонки).Type=135 Тогда
					_Тип="Дата";
				КонецЕсли;
// +++ввв 06.11.2016 г.
				КолонкиРезультат.Добавить(СтрЗаменить(Rs.Fields(ИндексКолонки).name," ",""),Новый ОписаниеТипов(_Тип));
// ---ввв 24.10.2016 г.
			//КонецЕсли;
// ---ввв 06.11.2016 г.
		КонецЦикла;
		
		Если Rs.BOF = 0 Тогда
			Rs.MoveFirst();                 
			Пока Rs.EOF() = 0 do  
				
				ТекСтрокаРезультат = ТаблицаРезультат.Добавить();
// +++ввв 06.11.2016 г.
				//Для Каждого ТекКолонка Из ТаблицаРезультат.Колонки Цикл
				//	ТекСтрокаРезультат[ТекКолонка.Имя] = Rs.Fields(ТекКолонка.Имя).Value;
				//КонецЦикла;
				Для ИндексКолонки = 0 По ТаблицаРезультат.Колонки.Количество() - 1 Цикл
					ТекСтрокаРезультат[ИндексКолонки] = Rs.Fields(ИндексКолонки).Value;
				КонецЦикла;
// ---ввв 06.11.2016 г.
				Rs.MoveNext();  
			КонецЦикла;
		КонецЕсли;	  
		
		Rs.Close();
		
	Исключение
		
		Сообщить("Запрос не выполнен: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		
		ТаблицаРезультат.Очистить();
		
	КонецПопытки;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

//Процедура для обновления полей таблицы таких как
// номер платежки, дата платежки, ошибки сессии загрузки, статус обработки
//
Процедура ОбновитьДанныеВSQL(ТекстЗапроса,Настройка) Экспорт
	
	Перем Соединение;
	
	Если Соединение = Неопределено Тогда
		Соединение = ВыполнитьПодключениеКSQL(Настройка);
	КонецЕсли;
	
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;	
	Cmd.CommandText = ТекстЗапроса;
	Rs = Новый COMОбъект("ADODB.RecordSet"); 
	
	Попытка
		
		Rs = Cmd.Execute(); 		
			
	Исключение
		
		Сообщить("Запрос не выполнен: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДанныеВSQL_ПоСоединению(ТекстЗапроса,Настройка,Соединение=Неопределено,Cmd=Неопределено) Экспорт
	
	Если Соединение = Неопределено Тогда
		Соединение = ВыполнитьПодключениеКSQL(Настройка);
	КонецЕсли;
	
	Если Cmd=Неопределено Тогда
		Cmd = Новый COMОбъект("ADODB.Command");
		Cmd.ActiveConnection = Соединение;			
	КонецЕсли;
	
	Cmd.CommandText = ТекстЗапроса;
	
	Попытка
		
		Rs = Cmd.Execute(); 		
			
	Исключение
		
		Сообщить("Запрос не выполнен: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
				
	КонецПопытки;	
	
КонецПроцедуры

Функция ЕстьЧисло(Текст) Экспорт
	
	ПервыйЗнакЧисло = Ложь;
	ПоследнийЗнакЧисло = Ложь;
	МассивЦифр = Новый Массив;
	МассивЦифр.Добавить("1");
	МассивЦифр.Добавить("2");
	МассивЦифр.Добавить("3");
	МассивЦифр.Добавить("4");
	МассивЦифр.Добавить("5");
	МассивЦифр.Добавить("6");
	МассивЦифр.Добавить("7");
	МассивЦифр.Добавить("8");
	МассивЦифр.Добавить("9");
	МассивЦифр.Добавить("0");
	поз = 0;
	Для Каждого Элемент Из МассивЦифр Цикл
		Если Найти(Текст,Элемент)>0 Тогда
			Возврат Найти(Текст,Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат 0;
	
КонецФункции

Функция НайтиСчетНаОплату(Организация, FACTURENUM) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетНаОплатуПокупателю.Ссылка
	               |ИЗ
	               |	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	               |ГДЕ
	               |	СчетНаОплатуПокупателю.FACTUREEXTERNALID = &FACTUREEXTERNALID
	               |	И СчетНаОплатуПокупателю.Организация = &Организация";
	Запрос.УстановитьПараметр("FACTUREEXTERNALID",FACTURENUM);
	Запрос.УстановитьПараметр("Организация",Организация);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество()>0 Тогда
		РезультатЗапроса.Следующий();
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Если Организация.абс_ИспользоватьПрефиксВБиллинге Тогда
			ПрефиксСчета = СокрЛП(Организация.Префикс)+"B";
			НомерСчета = ПрефиксСчета+СокрЛП(Прав(СокрЛП(FACTURENUM), //11));
			СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСчета)));    //АБС Коломиец 15396, 15825
			Запрос.Текст = "ВЫБРАТЬ
						|	СчетНаОплатуПокупателю.Ссылка
						|ИЗ
						|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
						|ГДЕ
						|	СчетНаОплатуПокупателю.Номер = &НомерСчета
						|	И СчетНаОплатуПокупателю.Организация = &Организация";
			Запрос.УстановитьПараметр("НомерСчета",НомерСчета);
			Если РезультатЗапроса.Количество()>0 Тогда
				РезультатЗапроса.Следующий();
				Возврат РезультатЗапроса.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		
		
		
		
		
		Возврат Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция НайтиНоменклатуруПоБилингКоду(Организация, BILLINGGLCODE) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				|	Номенклатура.Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.BILLINGGLCODE = &BILLINGGLCODE
				|	И Номенклатура.абс_СтатусНоменклатуры = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)";
	
	
	Если Организация.Префикс = "XBL" и Найти(BILLINGGLCODE,"401-") Тогда
		BILLINGGLCODE = "401";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("BILLINGGLCODE",BILLINGGLCODE);
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество()>0 Тогда
		РезультатЗапроса.Следующий();
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка(); 
	КонецЕсли;
	
КонецФункции

Функция НайтиВалюту(КодВалюты)
	
	//Если СтрДлина(СокрЛП(КодВалюты))=2 Тогда
	//	КодВалюты = "0"+КодВалюты;
	//КонецЕсли;
	
	
	Если Найти(КодВалюты,"810")>0 Тогда
		Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП("643"));
	ИначеЕсли Найти(КодВалюты,"250")>0 Тогда
		Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП("960"));	
	Иначе
		Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП(КодВалюты));
		
	КонецЕсли;	
	Если Валюта.Пустая() Тогда
		Валюта = Справочники.Валюты.НайтиПоНаименованию(СокрЛП(КодВалюты),Истина);
	КонецЕсли;
	
	Если Валюта.Пустая() Тогда 
		Если Найти(КодВалюты,"RUB")>0 Тогда
			Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП("643"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Валюта;

	
КонецФункции

Функция НайтиДоговорКонтрагента(Организация,Контрагент,НомерДоговора,Валюта,АгентскийДоговор,ЛицевойСчет = "",Оператор)
	
	Если ЗначениеЗаполнено(ЛицевойСчет) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец",Контрагент);
		
		//родин лимиты по договорам
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);
		МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Корректировка);
		МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки);
		МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
		//родин лимиты по договорам
		
		Запрос.УстановитьПараметр("Исполнение",МассивСтатусов);
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ЛицевойСчет",СокрЛП(ЛицевойСчет));
		Запрос.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		Запрос.УстановитьПараметр("НомерДоговора",НомерДоговора);
		Запрос.УстановитьПараметр("Оператор", Оператор);
		//АБС ВСТАВКА №44855 НАЧАЛО «24 июня 2014 г.», Пополитов
		Запрос.УстановитьПараметр("ОтборПоВалюте",ЗначениеЗаполнено(Валюта));
		Запрос.УстановитьПараметр("Валюта", Валюта);
  		//\\АБС ВСТАВКА №44855 КОНЕЦ
  	                    		
		Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		              |	ДоговорыКонтрагентов.Ссылка
		              |ИЗ
		              |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		              |ГДЕ
		              |	ДоговорыКонтрагентов.Организация = &Организация
		              |	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		              |	И ДоговорыКонтрагентов.Номер = &НомерДоговора
		              |	И ДоговорыКонтрагентов.абс_ЛицевойСчетБиллинга = &ЛицевойСчет
		              |	И ДоговорыКонтрагентов.абс_СтатусДоговора в (&Исполнение)
					  //АБС ВСТАВКА №44855 НАЧАЛО «24 июня 2014 г.», Пополитов
					  |	И ВЫБОР КОГДА &ОтборПоВалюте = ИСТИНА ТОГДА ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта ИНАЧЕ ИСТИНА КОНЕЦ
					  //\\АБС ВСТАВКА №44855 КОНЕЦ
		              |	И ДоговорыКонтрагентов.Владелец = &Владелец
		              |	И ДоговорыКонтрагентов.абс_Оператор = &Оператор"; //АБС Коломиец 12327
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Количество()= 1 Тогда
			РезультатЗапроса.Следующий();
			Возврат РезультатЗапроса.Ссылка;
		ИначеЕсли РезультатЗапроса.Количество()>1 Тогда
			Возврат "ЕстьДубли";
		КонецЕсли;   
		Если НЕ АгентскийДоговор Тогда
			Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДоговорыКонтрагентов.Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
			//|	И ДоговорыКонтрагентов.Номер = &НомерДоговора
			|	И ДоговорыКонтрагентов.абс_ЛицевойСчетБиллинга = &ЛицевойСчет
			|	И ДоговорыКонтрагентов.абс_СтатусДоговора в (&Исполнение)
			|	И ДоговорыКонтрагентов.Владелец = &Владелец
			|	И ДоговорыКонтрагентов.абс_Оператор = &Оператор";   //АБС Коломиец 12327
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Количество()=1 Тогда
				РезультатЗапроса.Следующий();
				Возврат РезультатЗапроса.Ссылка;
		ИначеЕсли РезультатЗапроса.Количество()>1 Тогда
				Возврат "ЕстьДубли";
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		
		
		
		
		Запрос = НОвый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И ДоговорыКонтрагентов.Номер = &НомерДоговора
		|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта
		|	И ДоговорыКонтрагентов.абс_СтатусДоговора в (&Исполнение)
		|	И ДоговорыКонтрагентов.Организация = &Организация";
		Запрос.УстановитьПараметр("Владелец",Контрагент);
		Запрос.УстановитьПараметр("НомерДоговора",НомерДоговора);
		Запрос.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		Запрос.УстановитьПараметр("Валюта",Валюта);
		Запрос.УстановитьПараметр("Организация",Организация);
		
		//родин лимиты по договорам
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);
		МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Корректировка);
		МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки);
		МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
		//родин лимиты по договорам
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Количество()=1 Тогда
			РезультатЗапроса.Следующий();
			Возврат РезультатЗапроса.Ссылка;
		ИначеЕсли РезультатЗапроса.Количество()>1 Тогда
			Возврат "ЕстьДубли";
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
КонецФункции

Функция СоздатьДоговор(Организация, Контрагент,НомерДоговора,ДатаДоговора,Валюта, АгентскийДоговор,СоздатьДоговор, ТипСчета = "",ЛицевойСчет = "", Оператор,КодОператора = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("ДоговорКонтрагента,ДоговорСоздан");
	
	МассивДоговоров = Новый Массив;
	
	ПроверитьКонтрагента(Контрагент);
	НайденныйДоговор = НайтиДоговорКонтрагента(Организация, Контрагент,СокрЛП(НомерДоговора),Валюта,АгентскийДоговор,ЛицевойСчет, Оператор);
	
	
	Если НайденныйДоговор = "ЕстьДубли" Тогда
		СтруктураВозврата.Вставить("ДоговорКонтрагента",Справочники.ДоговорыКонтрагентов.ПустаяСсылка()); 
		СтруктураВозврата.Вставить("ДоговорСоздан",Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если НЕ СоздатьДоговор Тогда
		СтруктураВозврата.Вставить("ДоговорКонтрагента",НайденныйДоговор); 
		СтруктураВозврата.Вставить("ДоговорСоздан",Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	
	Если НайденныйДоговор.Пустая() Тогда
		//Если Не Организация.Префикс = "КТТ" Тогда 
		
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорОбъект.Организация 	= Организация;
		ДоговорОбъект.Владелец 	    = Контрагент.ссылка;
		ДоговорОбъект.Номер 				= НомерДоговора;
		Если Найти(ТипСчета,"M")>0 Тогда
			ДоговорОбъект.УстановитьНовыйКод("_P");
			ДоговорОбъект.абс_Подключения=Истина;
		Иначе
			ДоговорОбъект.УстановитьНовыйКод("_");
		КонецЕсли;
		//ДоговорОбъект.абс_РегНомер          = СтрокаДоговора.РегНомер;
		ДоговорОбъект.Дата					= ДатаДоговора;
		ДоговорОбъект.абс_ДатаРегистрацииДоговора	= ДатаДоговора;
		
		ДоговорОбъект.абс_ДатаНачалаДействия		= ДатаДоговора;
		
		
		ДоговорОбъект.Наименование 			= "" + НомерДоговора + ?(ЗначениеЗаполнено(ДатаДоговора)," от " + Формат(ДатаДоговора,"ДФ=dd.MM.yyyy"),"");
		
		ДоговорОбъект.ВалютаВзаиморасчетов 	= Валюта;
		
		ДоговорОбъект.ВидДоговора			= Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Если  ДоговорОбъект.ВалютаВзаиморасчетов =Константы.ВалютаРегламентированногоУчета.Получить() 
			ИЛИ СокрЛП(Валюта.Код) ="36" ИЛИ СокрЛП(Валюта.Код) ="124" Тогда
			ДоговорОбъект.ВестиПоДокументамРасчетовСКонтрагентом =Ложь;	
		Иначе	
			ДоговорОбъект.ВестиПоДокументамРасчетовСКонтрагентом = Истина;
		КонецЕсли;
		ДоговорОбъект.абс_ТипДоговора       = Перечисления.абсТипыДоговоров.Договор;
		ДоговорОбъект.абс_ВидДоговора		= Справочники.абс_ПредметДоговораГК.ДоговорОказанияУслуг;
		ДоговорОбъект.ВедениеВзаиморасчетов	= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		ДоговорОбъект.абс_СтатусДоговора    = Перечисления.абсСтатусыДоговоров.Исполнение;;
		ДоговорОбъект.абс_Ответственный     = глЗначениеПеременной("глТекущийПользователь");
		ДоговорОбъект.абс_ЛицевойСчетБиллинга = ЛицевойСчет;
		//Павлов 17406
		Если Не ЗначениеЗаполнено(Оператор) и КодОператора <> Неопределено Тогда
			Оператор = Справочники.Контрагенты.НайтиПоКоду(Строка(СокрЛП(КодОператора)));
		КОнецЕсли;
		//
		ДоговорОбъект.абс_Оператор = Оператор ;      //АБС Коломиец 14468
		//ДоговорОбъект.ОбменДанными.Загрузка = Истина;
		//АБС ВСТАВКА 23980  27.01.2014 15:58:12  Коломиец 
		ДоговорОбъект.абс_ВидДеятельности =	Справочники.абс_ВидыДеятельностиКТТК.НайтиПоНаименованию("Связь");	
		//АБС ВСТАВКА 23980 КОНЕЦ 
 
		//Попытка
		ДоговорОбъект.Записать();
		//Сообщить("Добавлен договор: " + ДоговорОбъект.Ссылка);
		//МассивДоговоров.Добавить(ДоговорОбъект);
		СтруктураВозврата.Вставить("ДоговорКонтрагента",ДоговорОбъект.Ссылка); 
		СтруктураВозврата.Вставить("ДоговорСоздан",Истина);
		Возврат СтруктураВозврата;
	Иначе
		СтруктураВозврата.Вставить("ДоговорКонтрагента",НайденныйДоговор.Ссылка); 
		СтруктураВозврата.Вставить("ДоговорСоздан",Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	//ЗаписатьНовыйСтатус(ДоговорОбъект.Ссылка,Перечисления.абсСтатусыДоговоров.Подготовка, "Загрузка данных");
	
КонецФункции

Процедура ПроверитьКонтрагента(Контрагент)
	
	Если Не Контрагент.Покупатель Тогда
		Об = Контрагент.ПолучитьОбъект();
		Об.Покупатель = Истина;
		Об.ОбменДанными.Загрузка = Истина;
		Об.Записать();
		Сообщить("Установлен признак Покупатель для контрагента "+Контрагент);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПреобразоватьКДате(СтрокаДата)
	
	ПустаяДата=Дата('00010101');
	СтрокаДата = СокрЛП(Лев(СтрокаДата,11));
	День=Лев(СтрокаДата,2);
	Месяц=Сред(СтрокаДата,4,2);
	Год=Прав(СтрокаДата,4);
	СтрокаДата=""+Год + Месяц +  День;
	
	Попытка 
		ДатаДокумента=Дата(СтрокаДата);
		
	Исключение
		Возврат ПустаяДата;	
	КонецПопытки;
	
	Возврат  ДатаДокумента;
	
КонецФункции

Функция ПолучитьСумму(Сумма) Экспорт
	Если НЕ ЗначениеЗаполнено(Сумма) Тогда
		Возврат 0;
		
	КонецЕсли;
	Сумма=СтрЗаменить(Сумма," ","");
	Сумма=СтрЗаменить(Сумма,".",",");
	Сумма=СтрЗаменить(Сумма,символы.НПП,"");
	
	Попытка
		ЧислоСумма=Число(Сумма);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Возврат ЧислоСумма;
	
КонецФункции

Функция ПолучитьСтавкуНДС(Ставка)
	Если  Ставка="18" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли  Ставка="КНБН" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли  Ставка="0" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
		
	Иначе 
		Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция РазрещитьРедактированиеСчетаНаОплату(ДокСчетНаОплату)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализацияТиУ
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.абс_СчетНаОплатуПокупателю = &абс_СчетНаОплатуПокупателю
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РеализацияТоваровУслуг.Дата";
				   
	Запрос.УстановитьПараметр("абс_СчетНаОплатуПокупателю",ДокСчетНаОплату);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		
		Если НЕ Выборка.ДокументРеализацияТиУ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка И
			ЗначениеЗаполнено(Выборка.ДокументРеализацияТиУ.абс_Статус)  Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

//Функция формирования таблицы по биллингу
//
Функция СоздатьСчетаНаОплату(Организация,СчетКасса,ДанныеБиллинга,СозданныеДокументы) Экспорт
	
// +++ввв 17.12.2015 г.
	ИспользоватьПрефикс = Организация.абс_ИспользоватьПрефиксВБиллинге = Ложь;
// ---ввв 17.12.2015 г.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СчетНаОплатуПокупателю.Ссылка КАК Счет,
				   //АБС ВСТАВКА 34682  05.11.2013 13:02:01  Шамов
	               |	СчетНаОплатуПокупателю.FACTUREEXTERNALID КАК FACTURENUM,
	               |	СчетНаОплатуПокупателю.BILLEXTERNALID КАК BILL,
				   //АБС ВСТАВКА 34682 КОНЕЦ 
	               |	СчетНаОплатуПокупателю.Номер КАК Номер1
	               |ИЗ
	               |	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	               |ГДЕ
	               |	СчетНаОплатуПокупателю.Организация = &Организация
	               |	И СчетНаОплатуПокупателю.Дата >= &ДатаНач
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет УБЫВ";
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ДатаНач",НачалоГода(ТекущаяДата()));
	Т_Счета = Запрос.Выполнить().Выгрузить();
	Т_Счета.Колонки.Добавить("Номер");
	Для Каждого Стр Из Т_Счета Цикл
		Стр.Номер = СокрЛП(Стр.Номер1);
	   //АБС ВСТАВКА 34682  05.11.2013 13:02:01  Шамов
		Стр.FACTURENUM = СокрЛП(Стр.FACTURENUM);
		Стр.BILL = СокрЛП(Стр.BILL);
	   //АБС ВСТАВКА 34682 КОНЕЦ 
	КонецЦикла;
	

	Важность = УровеньЖурналаРегистрации.Информация;
	СтруктураВозврата = Новый Структура("ДанныеБиллинга,СозданныеДокументы");
	СозданныеДокументы.Очистить();
	СтруктураДокументов = Новый Структура("ДокументСчетНаОплату,ЗаказПокупателя, ДокументРеализацияТиУ, ДокументСФ, Перезаписан");
	//Создадим документы Счет на оплату покупателя
	//По каждой уникальной строке ТЗ создаем свой счет на оплату.
	//АБС Шамов
	//СтруктураПоиска = Новый Структура("FACTURENUM");
	//ТЗБиллинга=ДанныеБиллинга.Скопировать();
	//ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM");
	//ТЗСчетовНаОплату.Свернуть("FACTURENUM");
	//ЗаполненыБилл = Истина;
	//Для Каждого СтрокаДанных Из ДанныеБиллинга Цикл
	//	Если НЕ ЗначениеЗаполнено(СтрокаДанных.BILL) Тогда
	//		ЗаполненыБилл = Ложь;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	ТЗБиллинга=ДанныеБиллинга.Скопировать();
	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM,BILL");
	ТЗСчетовНаОплату.Свернуть("FACTURENUM,BILL");
	//Если ЗаполненыБилл Тогда
	//	ТЗБиллинга=ДанныеБиллинга.Скопировать();
	//	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"BILL");
	//	ТЗСчетовНаОплату.Свернуть("BILL");
	//Иначе
	//	ТЗБиллинга=ДанныеБиллинга.Скопировать();
	//	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM");
	//	ТЗСчетовНаОплату.Свернуть("FACTURENUM");
	//КонецЕсли;
	//\\АБС Шамов
	Сч = 0;
	Кол = ТЗСчетовНаОплату.Количество();
	Заголовок = "Обработка счетов";
	Для каждого СтрокаСчета Из ТЗСчетовНаОплату Цикл
		Сч = Сч+1;
		//ОбработкаПрерыванияПользователя();
		Если Сч/100 = Цел(Сч/100) Тогда
			//Сообщить("Обрабатывается "+Сч+" из "+Кол);
			ТекстСообщения = "Обрабатывается "+Сч+" из "+Кол;
			ЗаписьЖурналаРегистрации("Сообщение", Важность, , ,ТекстСообщения);
			//ОбщегоНазначения.Сообщение(ТекстСообщения);

		КонецЕсли;
		//Осуществим проверку, можно ли загружать данный счет -
		//проверка осуществляется по всем строкам счета если 
		//хотябы одна строка счета некорректна, весь счет не будет загружен
		
		//АБС Шамов
		//СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		
		//сначала найдем строки по FACTURENUM
		СтруктураПоиска = Новый Структура("FACTURENUM");
		СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		НайденныеСтроки = ТЗБиллинга.НайтиСтроки(СтруктураПоиска);
		ТекБилл = Неопределено;
		ИщемПоБилл = Истина;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если НЕ ЗначениеЗаполнено(Строка.BILL) Тогда
				ИщемПоБилл = Ложь;
				Прервать;
			КонецЕсли;
			Если ТекБилл = Неопределено Тогда
				ТекБилл = Строка.BILL;	
			Иначе
				Если ТекБилл <> Строка.BILL Тогда
					ИщемПоБилл = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИщемПоБилл Тогда
			СтруктураПоиска = Новый Структура("BILL");
			СтруктураПоиска.BILL = СтрокаСчета.BILL;
		Иначе
			СтруктураПоиска = Новый Структура("FACTURENUM");
			СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		КонецЕсли;
		//\\АБС Шамов
		НайденныеСтроки = ТЗБиллинга.НайтиСтроки(СтруктураПоиска);
		Если  НайденныеСтроки.Количество() =0 Тогда
			//Фатальная ошибка...
			//Сообщить("Ошибка!!! Строки с номером: "+СтруктураПоиска.FACTURENUM+" в ТЗ Биллинга не найдены!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		//Проверяем все найденные строки на возможность загрузки Счета на оплату.
		Отказ = Ложь;
		ОтказПоОшибке = Ложь;
		Для Каждого СтрокаБиллинга Из НайденныеСтроки Цикл
			Если Не (СтрокаБиллинга.Загружать И  не ЗначениеЗаполнено(СтрокаБиллинга.OPERATOR))	Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			Продолжить;
		КонецЦикла;	
		
		Если Отказ Тогда
			Продолжить;
			//Счет на оплату не создаем.
		КонецЕсли;
		
		Если НЕ НайденныеСтроки[0].СчетНаОплату.Пустая() Тогда
			Если Не РазрещитьРедактированиеСчетаНаОплату(НайденныеСтроки[0].СчетНаОплату) Тогда
				Продолжить;
			КонецЕсли;
			
			
			
			Если ИспользоватьПрефикс Тогда
				ПрефиксСФ = СокрЛП(Организация.Префикс)+"B";
				НомерСФ = ПрефиксСФ+СокрЛП(Прав(СокрЛП(НайденныеСтроки[0].FACTURENUM), //11));
				СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ)));   //АБС Коломиец 15396, 15825
				//АБС Шамов 33279 Вставка
				НомерСчета = ПрефиксСФ+СокрЛП(Прав(СокрЛП(НайденныеСтроки[0].BILL),
				СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ)));
				//\\АБС Шамов 33279 Вставка
			Иначе
				НомерСФ = СокрЛП(СокрЛП(НайденныеСтроки[0].FACTURENUM));
				//АБС Шамов 33279 Вставка
				НомерСчета = СокрЛП(СокрЛП(НайденныеСтроки[0].BILL));
				//\\АБС Шамов 33279 Вставка
			КонецЕсли;
			//Документ уже существует, перезапишем его.
			ДокументСчет = НайденныеСтроки[0].СчетНаОплату.ПолучитьОбъект();
			ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
			ДокументСчет.Биллинг = Истина;
			ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента; 
			ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
			ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
			ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
			ДокументСчет.FACTUREEXTERNALID =НайденныеСтроки[0].FACTURENUM;
			//АБС Шамов 33279
			//ДокументСчет.номер =НомерСФ;
			Если ИщемПоБилл Тогда
				ДокументСчет.BILLEXTERNALID =НайденныеСтроки[0].BILL;
			ИНАЧЕ
				ДокументСчет.BILLEXTERNALID ="";
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ИщемПоБилл Тогда
				ДокументСчет.Номер = НомерСчета;
			Иначе
				ДокументСчет.Номер = НомерСФ;
			КонецЕсли;
			//\\АБС Шамов 33279
			ДокументСчет.абс_СуммаНДСБиллинг =НайденныеСтроки[0].СуммаНДС; 
			ДокументСчет.Организация = Организация;
			ДокументСчет.УчитыватьНДС = Истина;                                
			Если ЗначениеЗаполнено(НайденныеСтроки[0].TypeSchet) Тогда
				ДокументСчет.ДополнениеКАдресуДоставки =НайденныеСтроки[0].TypeSchet;
			ИначеЕсли  ЗначениеЗаполнено(НайденныеСтроки[0].Комментарий) Тогда
				ДокументСчет.ДополнениеКАдресуДоставки =Лев(НайденныеСтроки[0].Комментарий,1);
			КонецЕсли;
			ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
			
			Если ДокументСчет.Метаданные().ТабличныеЧасти.Найти("Менеджеры")<>Неопределено Тогда
				Если ДокументСчет.Менеджеры.Количество()=0 Тогда
					Строкаменеджеров = ДокументСчет.Менеджеры.Добавить();
					Строкаменеджеров.Описание = НайденныеСтроки[0].KURATOR;
				КонецЕсли;
			КонецЕсли;
			
			//Заполнение куратора
			//Если ЗначениеЗаполнено(НайденныеСтроки[0].абс_Куратор) Тогда
				ДокументСчет.абс_Куратор = НайденныеСтроки[0].абс_Куратор;
			//Иначе
			//	ДокументСчет.абс_Куратор = НайтиКуратора(СокрЛП(НайденныеСтроки[0].KURATOR));
			//КонецЕсли;
            //Заполнение куратора
			Если Найти(НайденныеСтроки[0].INCLTAX,"Да")>0 Тогда
				ДокументСчет.СуммаВключаетНДС = Истина;
			Иначе
				ДокументСчет.СуммаВключаетНДС = Ложь;
			КонецЕсли;
		
			Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
				ДокументСчет.КурсВзаиморасчетов =1;
			Иначе
				ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			ДокументСчет.КратностьВзаиморасчетов = 1;
			//Заполним ТЧ Услуги документа.
			ДокументСчет.Услуги.Очистить();
			Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
				НайдСтрокаУслуги = ДокументСчет.Услуги.найти(СтрокаУслуги.УникальныйИдентификаторЗаписи,"ИдСтроки");
				Если  НайдСтрокаУслуги = Неопределено Тогда
					НоваяСтрокаУслуг = ДокументСчет.Услуги.Добавить();
				Иначе
					НоваяСтрокаУслуг = НайдСтрокаУслуги;
				КонецЕсли;

					//НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное;  
					Если ЗначениеЗаполнено(СтрокаУслуги.FULLNAMESERVISE) Тогда
						НоваяСтрокаУслуг.Содержание = СокрЛП(СтрокаУслуги.FULLNAMESERVISE);
					Иначе
						НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное; 
					КонецЕсли;
					НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
					НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура;  
					НоваяСтрокаУслуг.ЗаказПокупателя = СтрокаУслуги.ЗаказПокупателя;
					НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
					НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
					НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
					НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
					//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
					НоваяСтрокаУслуг.СуммаНДС = СтрокаУслуги.СуммаНДС;
					
					НоваяСтрокаУслуг.абс_ЦФУ = СтрокаУслуги.ЦФУ;
					НоваяСтрокаУслуг.абс_ЦФО = СтрокаУслуги.ЦФО;
					НоваяСтрокаУслуг.СтатьяОборотов = СтрокаУслуги.СтатьяОборотов;
					НоваяСтрокаУслуг.абс_НоменклатурнаяГруппа = СтрокаУслуги.НоменклатурнаяГруппа;
			КонецЦикла;
			НовыйДокумент =Ложь;
			
			
			//Документ
		Иначе
			
			//Создаем СчетНаОплату
			//
			//НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.НайтиПоРеквизиту("FACTUREEXTERNALID",НайденныеСтроки[0].FACTURENUM);
			НомерСФ = СокрЛП(НайденныеСтроки[0].FACTURENUM);
			ПрефиксСФ1 = СокрЛП(Организация.Префикс)+"B";
			НомерСФ1 = ПрефиксСФ1+СокрЛП(Прав(СокрЛП(НайденныеСтроки[0].FACTURENUM), 
			СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ1))); //11));  //АБС Коломиец 15396, 15825
			//АБС Шамов 33279
			Если ИспользоватьПрефикс Тогда
				НомерСчета = ПрефиксСФ1+СокрЛП(Прав(СокрЛП(НайденныеСтроки[0].BILL),
				СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ1)));
			Иначе
				НомерСчета = СокрЛП(СокрЛП(НайденныеСтроки[0].BILL));
			КонецЕсли;
			//\\АБС Шамов 33279
			//АБС ИЗМЕНЕНИЕ 34682  05.11.2013 13:06:13  Шамов
			//СтрокаПоиска = Т_Счета.Найти(НомерСФ,"Номер");
			//Если СтрокаПоиска <>Неопределено Тогда
			//	НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
			//Иначе
			//	СтрокаПоиска = Т_Счета.Найти(НомерСФ1,"Номер"); 
			//	Если СтрокаПоиска <>Неопределено Тогда
			//		НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
			//	Иначе
			//		НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
			//	КонецЕсли;
			//КонецЕсли;
			
			//сначала проверим наличие старого счета с номером, сформированным по FACTURENUM
			//совпадающего с новым номером по BILL
			Если ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ИщемПоБилл Тогда
				ФормироватьНомерПоБилл = Истина;
				СтрокаПоиска = Т_Счета.Найти(НомерСчета, "Номер");
				Если СтрокаПоиска <>Неопределено Тогда
					Если СокрЛП(НайденныеСтроки[0].FACTURENUM) <> СокрЛП(СтрокаПоиска.FACTURENUM) Тогда
						//это НЕ ТОТ счет
						//при записи произойдет ошибка
						ФормироватьНомерПоБилл = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ФормироватьНомерПоБилл = Ложь;				
			КонецЕсли;
						
			СтрокаПоиска = Т_Счета.Найти(СокрЛП(НайденныеСтроки[0].BILL),"BILL");
			Если СтрокаПоиска <>Неопределено И ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ИщемПоБилл Тогда
				НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
			Иначе
				СтрокаПоиска = Т_Счета.Найти(СокрЛП(НайденныеСтроки[0].FACTURENUM),"FACTURENUM"); 
				Если СтрокаПоиска <>Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаПоиска.BILL) ИЛИ НЕ ИщемПоБилл ТОГДА
						НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
					Иначе
						НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
					КонецЕсли;	
				Иначе
					НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			//АБС ИЗМЕНЕНИЕ 34682 КОНЕЦ 
			
			Если НайдДокументСчетНаОплату.Пустая() Тогда
				ДокументСчет  = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
				НовыйДокумент = Истина;

			Иначе 
				Если Не РазрещитьРедактированиеСчетаНаОплату(НайдДокументСчетНаОплату) Тогда
					Продолжить;
				КонецЕсли;
				
				ДокументСчет =  НайдДокументСчетНаОплату.ПолучитьОбъект();
				НовыйДокумент =Ложь;
			КонецЕсли;
		    ДокументСчет.Биллинг = Истина;
			ДокументСчет.абс_СуммаНДСБиллинг =НайденныеСтроки[0].СуммаНДС; 
			ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
			ДокументСчет.УчитыватьНДС = Истина;
			ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента; 
			ДокументСчет.FACTUREEXTERNALID =НайденныеСтроки[0].FACTURENUM;
			//АБС Шамов 33279 Замена
			//Если ИспользоватьПрефикс Тогда
			//	ДокументСчет.Номер  = НомерСФ1;
			//Иначе
			//	ДокументСчет.Номер  = НомерСФ;
			//КонецЕсли;
			Если ИщемПоБилл Тогда
				ДокументСчет.BILLEXTERNALID =НайденныеСтроки[0].BILL;
			ИНАЧЕ
				ДокументСчет.BILLEXTERNALID ="";
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ФормироватьНомерПоБилл Тогда
				ДокументСчет.Номер  = НомерСчета;
			Иначе
				Если ИспользоватьПрефикс Тогда
					ДокументСчет.Номер  = НомерСФ1;
				Иначе
					ДокументСчет.Номер  = НомерСФ;
				КонецЕсли;
			КонецЕсли;
			//\\АБС Шамов 33279 Замена
			
			ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
			ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
			ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
			ДокументСчет.Организация = Организация;
			ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
			Если ЗначениеЗаполнено(НайденныеСтроки[0].TypeSchet) Тогда
				ДокументСчет.ДополнениеКАдресуДоставки =НайденныеСтроки[0].TypeSchet;
			ИначеЕсли  ЗначениеЗаполнено(НайденныеСтроки[0].Комментарий) Тогда
				ДокументСчет.ДополнениеКАдресуДоставки =Лев(НайденныеСтроки[0].Комментарий,1);
			КонецЕсли;
			
			Если Найти(НайденныеСтроки[0].INCLTAX,"Да")>0 Тогда
				СуммаВключаетНДС = Истина;
			Иначе
				СуммаВключаетНДС = Ложь;
			КонецЕсли;
			
			Если ДокументСчет.Метаданные().ТабличныеЧасти.Найти("Менеджеры")<>Неопределено Тогда
				Если ДокументСчет.Менеджеры.Количество()=0 Тогда
					Строкаменеджеров = ДокументСчет.Менеджеры.Добавить();
					Строкаменеджеров.Описание = НайденныеСтроки[0].KURATOR;
				КонецЕсли;
			КонецЕсли;
			//Заполнение куратора
			Если ЗначениеЗаполнено(НайденныеСтроки[0].абс_Куратор) Тогда
				ДокументСчет.абс_Куратор = НайденныеСтроки[0].абс_Куратор;
			Иначе
				ДокументСчет.абс_Куратор = НайтиКуратора(СокрЛП(НайденныеСтроки[0].KURATOR));
			КонецЕсли;
			//Заполнение куратора

			
			ДокументСчет.СуммаВключаетНДС = СуммаВключаетНДС;
			Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
				ДокументСчет.КурсВзаиморасчетов =1;
			Иначе
				ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			ДокументСчет.КратностьВзаиморасчетов = 1;
			
			ДокументСчет.Подразделение = НайденныеСтроки[0].ЦФО;  //АБС Коломиец 13129
			
			//Заполним ТЧ Услуги документа.
			Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
				НайдСтрокаУслуги = ДокументСчет.Услуги.найти(СтрокаУслуги.УникальныйИдентификаторЗаписи,"ИдСтроки");
				Если  НайдСтрокаУслуги = Неопределено Тогда
					НоваяСтрокаУслуг = ДокументСчет.Услуги.Добавить();
				Иначе
					НоваяСтрокаУслуг = НайдСтрокаУслуги;
				КонецЕсли;
	
					//НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное;
					Если ЗначениеЗаполнено(СтрокаУслуги.FULLNAMESERVISE) Тогда
						НоваяСтрокаУслуг.Содержание = СокрЛП(СтрокаУслуги.FULLNAMESERVISE);
					Иначе
						НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное; 
					КонецЕсли;
					НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
					НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура; 
					НоваяСтрокаУслуг.ЗаказПокупателя = СтрокаУслуги.ЗаказПокупателя;
					НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
					НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
					НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
					НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
					//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
					НоваяСтрокаУслуг.СуммаНДС = СтрокаУслуги.СуммаНДС;
					
					НоваяСтрокаУслуг.абс_ЦФУ = СтрокаУслуги.ЦФУ;
					НоваяСтрокаУслуг.абс_ЦФО = СтрокаУслуги.ЦФО;
					НоваяСтрокаУслуг.СтатьяОборотов = СтрокаУслуги.СтатьяОборотов;
					НоваяСтрокаУслуг.абс_НоменклатурнаяГруппа = СтрокаУслуги.НоменклатурнаяГруппа;
								
			КонецЦикла;
					
		КонецЕсли;
		
		Попытка
			ДокументСчет.ПометкаУдаления = Ложь;
			//+++ Григорьев Д.В.
			ДокументСчет.ttk_ТипБиллинга = ДанныеБиллинга[0].ТипБиллинга;
			//--- Григорьев Д.В.
			
			Если НовыйДокумент Тогда
				ДокументСчет.Записать();
				//Состояние("Создан документ: "+ДокументСчет.Ссылка);
				ДокСсылка = ДокументСчет.Ссылка;
			Иначе
				ДокументСчет.Записать();
				
				//Состояние("Перезаписан документ: "+ДокументСчет.Ссылка);
				ДокСсылка = ДокументСчет.Ссылка;
			КонецЕсли;
			
			СтрокаПоиска =  Т_Счета.Найти(ДокСсылка,"Счет");
			Если СтрокаПоиска=Неопределено Тогда
				НоваяСтрока = Т_Счета.Добавить();
				Новаястрока.Счет = ДокСсылка.Ссылка;
				НоваяСтрока.Номер = СокрЛП(ДокСсылка.Номер);
				//АБС ВСТАВКА 34900  08.11.2013 10:28:11  Шамов
				НоваяСтрока.FACTURENUM = СокрЛП(ДокСсылка.FACTUREEXTERNALID);
				НоваяСтрока.BILL = СокрЛП(ДокСсылка.BILLEXTERNALID);				
				//АБС ВСТАВКА 34900 КОНЕЦ 
			КонецЕсли;	

		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		//СтруктураДокументов.ДокументСчетНаОплату = ДокСсылка;
		
		
		//Если документ записан создадим документ реализация ТиУ на основании данного Счета
		//Если  НовыйДокумент Тогда
		//	СоздатьРеализациюТиУ(ДокСсылка, СтруктураДокументов);
		//Иначе
		//	СтруктураДокументов.перезаписан = Истина;
		//	ПерезаписатьДокументы(ДокСсылка,СтруктураДокументов);
		//	
		//КонецЕсли;
		//
		НСоздДок = СозданныеДокументы.Добавить();
		НСоздДок.ДокументСчетНаОплату = ДокСсылка;
		//ЗаполнитьЗначенияСвойств(НСоздДок, СтруктураДокументов);		
	КонецЦикла;
	
	//Обновление колонки СчетНаОплату в таблице ДанныеБиллинга
	Таб = СозданныеДокументы.Скопировать();
	Таб.Свернуть("ДокументСчетНаОплату");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабСчетов.ДокументСчетНаОплату
	               |ПОМЕСТИТЬ ВТСчета
	               |ИЗ
	               |	&ТабСчетов КАК ТабСчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализацияТиУ,
	               |	ВТСчета.ДокументСчетНаОплату КАК ДокументСчетНаОплату,
	               |	СФ.Ссылка КАК ДокументСФ
	               |ИЗ
	               |	ВТСчета КАК ВТСчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ВТСчета.ДокументСчетНаОплату = РеализацияТоваровУслуг.абс_СчетНаОплатуПокупателю
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	               |			СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование.абс_СчетНаОплатуПокупателю КАК ДокументОснованиеабс_СчетНаОплатуПокупателю
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |		ГДЕ
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг) КАК СФ
	               |		ПО ВТСчета.ДокументСчетНаОплату = СФ.ДокументОснованиеабс_СчетНаОплатуПокупателю";
	Запрос.УстановитьПараметр("ТабСчетов",Таб);
	СозданныеДокументы = Запрос.Выполнить().Выгрузить();
	Сч = 0;
	Кол = СозданныеДокументы.Количество();
	мРубли = Константы.ВалютаРегламентированногоУчета.Получить();
	Для Каждого Стр Из СозданныеДокументы Цикл
		  Сч = Сч+1;
		  Если Сч/100 = Цел(Сч/100) Тогда
			  //Сообщить("Обрабатывается "+Сч+" из "+Кол);
			  ТекстСообщения = "Обрабатываются накладные и счет-фактуры "+Сч+" из "+Кол;
			  //ОбщегоНазначения.Сообщение(ТекстСообщения);
			  ЗаписьЖурналаРегистрации("Сообщение", Важность, , ,ТекстСообщения);

		  КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ДокументРеализацияТиУ) И ЗначениеЗаполнено(Стр.ДокументСФ) Тогда
				ПерезаписатьДокументы(Стр);

		ИначеЕсли Не ЗначениеЗаполнено(Стр.ДокументРеализацияТиУ) И Не ЗначениеЗаполнено(Стр.ДокументСФ) Тогда
				СоздатьРеализациюТиУ(Стр,Неопределено,мРубли);


		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из СозданныеДокументы Цикл
		Если ЗначениеЗаполнено(Стр.ДокументСчетНаОплату) Тогда
			СтруктураОтбора = Новый Структура("FACTURENUM");
			СтруктураОтбора.Вставить("FACTURENUM",СокрЛП(Стр.ДокументСчетНаОплату.FACTUREEXTERNALID));
			НайденныеСтроки = ДанныеБиллинга.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайдСтрока Из НайденныеСтроки Цикл
				НайдСтрока.СчетНаОплату = Стр.ДокументСчетНаОплату;
				НайдСтрока.ДокументРеализацияТиУ = Стр.ДокументРеализацияТиУ; 
				НайдСтрока.ДокументСФ = Стр.ДокументСФ;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	
	
	
	СтруктураВозврата.Вставить("ДанныеБиллинга",ДанныеБиллинга); 
	СтруктураВозврата.Вставить("СозданныеДокументы",СозданныеДокументы);
	Возврат СтруктураВозврата;
КонецФункции

Функция ДосоздатьСчетаНаОплату(Организация,СчетКасса,ДанныеБиллинга,СозданныеДокументы) Экспорт
	
	ИспользоватьПрефикс = Организация.абс_ИспользоватьПрефиксВБиллинге;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СчетНаОплатуПокупателю.Ссылка КАК Счет,
				   //АБС ВСТАВКА 34682  05.11.2013 13:02:01  Шамов
	               |	СчетНаОплатуПокупателю.FACTUREEXTERNALID КАК FACTURENUM,
	               |	СчетНаОплатуПокупателю.BILLEXTERNALID КАК BILL,
				   //АБС ВСТАВКА 34682 КОНЕЦ 
	               |	СчетНаОплатуПокупателю.Номер КАК Номер1
	               |ИЗ
	               |	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	               |ГДЕ
	               |	СчетНаОплатуПокупателю.Организация = &Организация
	               |	И СчетНаОплатуПокупателю.Дата >= &ДатаНач
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет УБЫВ";
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ДатаНач",НачалоГода(ТекущаяДата()));
	Т_Счета = Запрос.Выполнить().Выгрузить();
	Т_Счета.Колонки.Добавить("Номер");
	Для Каждого Стр Из Т_Счета Цикл
		Стр.Номер = СокрЛП(Стр.Номер1);
	   //АБС ВСТАВКА 34682  05.11.2013 13:02:01  Шамов
		Стр.FACTURENUM = СокрЛП(Стр.FACTURENUM);
		Стр.BILL = СокрЛП(Стр.BILL);
	   //АБС ВСТАВКА 34682 КОНЕЦ 
	КонецЦикла;	

	Важность = УровеньЖурналаРегистрации.Информация;
	СтруктураВозврата = Новый Структура("ДанныеБиллинга,СозданныеДокументы");
	СозданныеДокументы.Очистить();
	СтруктураДокументов = Новый Структура("ДокументСчетНаОплату,ЗаказПокупателя, ДокументРеализацияТиУ, ДокументСФ, Перезаписан");
	//Создадим документы Счет на оплату покупателя
	//По каждой уникальной строке ТЗ создаем свой счет на оплату.
	//АБС Шамов
	//СтруктураПоиска = Новый Структура("FACTURENUM");
	//ТЗБиллинга=ДанныеБиллинга.Скопировать();
	//ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM");
	//ТЗСчетовНаОплату.Свернуть("FACTURENUM");
	//ЗаполненыБилл = Истина;
	//Для Каждого СтрокаДанных Из ДанныеБиллинга Цикл
	//	Если НЕ ЗначениеЗаполнено(СтрокаДанных.BILL) Тогда
	//		ЗаполненыБилл = Ложь;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	ТЗБиллинга=ДанныеБиллинга.Скопировать();
	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM,BILL");
	ТЗСчетовНаОплату.Свернуть("FACTURENUM,BILL");
	//Если ЗаполненыБилл Тогда
	//	ТЗБиллинга=ДанныеБиллинга.Скопировать();
	//	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"BILL");
	//	ТЗСчетовНаОплату.Свернуть("BILL");
	//Иначе
	//	ТЗБиллинга=ДанныеБиллинга.Скопировать();
	//	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM");
	//	ТЗСчетовНаОплату.Свернуть("FACTURENUM");
	//КонецЕсли;
	//\\АБС Шамов
	//\\АБС Шамов
	Сч = 0;
	Кол = ТЗСчетовНаОплату.Количество();
	Заголовок = "Обработка счетов";
	Для каждого СтрокаСчета Из ТЗСчетовНаОплату Цикл
		Сч = Сч+1;
		//ОбработкаПрерыванияПользователя();
		Если Сч/100 = Цел(Сч/100) Тогда
			//Сообщить("Обрабатывается "+Сч+" из "+Кол);
			ТекстСообщения = "Обрабатывается "+Сч+" из "+Кол;
			ЗаписьЖурналаРегистрации("Сообщение", Важность, , ,ТекстСообщения);
			//ОбщегоНазначения.Сообщение(ТекстСообщения);

		КонецЕсли;
		//Осуществим проверку, можно ли загружать данный счет -
		//проверка осуществляется по всем строкам счета если 
		//хотябы одна строка счета некорректна, весь счет не будет загружен
		
		НовыйДокумент =Ложь;
		
		
		//АБС Шамов
		//СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		
		//сначала найдем строки по FACTURENUM
		СтруктураПоиска = Новый Структура("FACTURENUM");
		СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		НайденныеСтроки = ТЗБиллинга.НайтиСтроки(СтруктураПоиска);
		ТекБилл = Неопределено;
		ИщемПоБилл = Истина;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если НЕ ЗначениеЗаполнено(Строка.BILL) Тогда
				ИщемПоБилл = Ложь;
				Прервать;
			КонецЕсли;
			Если ТекБилл = Неопределено Тогда
				ТекБилл = Строка.BILL;	
			Иначе
				Если ТекБилл <> Строка.BILL Тогда
					ИщемПоБилл = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИщемПоБилл Тогда
			СтруктураПоиска = Новый Структура("BILL");
			СтруктураПоиска.BILL = СтрокаСчета.BILL;
		Иначе
			СтруктураПоиска = Новый Структура("FACTURENUM");
			СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		КонецЕсли;
		//\\АБС Шамов
		НайденныеСтроки = ТЗБиллинга.НайтиСтроки(СтруктураПоиска);
		Если  НайденныеСтроки.Количество() =0 Тогда
			//Фатальная ошибка...
			//Сообщить("Ошибка!!! Строки с номером: "+СтруктураПоиска.FACTURENUM+" в ТЗ Биллинга не найдены!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		//Проверяем все найденные строки на возможность загрузки Счета на оплату.
		Отказ = Ложь;
		ОтказПоОшибке = Ложь;
		Для Каждого СтрокаБиллинга Из НайденныеСтроки Цикл
			Если Не (СтрокаБиллинга.Загружать И  не ЗначениеЗаполнено(СтрокаБиллинга.OPERATOR))	Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			Продолжить;
		КонецЦикла;	
		
		Если Отказ Тогда
			Продолжить;
			//Счет на оплату не создаем.
		КонецЕсли;
		
		Если НЕ НайденныеСтроки[0].СчетНаОплату.Пустая() Тогда
			//Документ уже существует, перезапишем его.
			ДокументСчет = НайденныеСтроки[0].СчетНаОплату.ПолучитьОбъект();
		Иначе
			
			//Создаем СчетНаОплату
			//
			НомерСФ = СокрЛП(НайденныеСтроки[0].FACTURENUM);
			ПрефиксСФ1 = СокрЛП(Организация.Префикс)+"B";
			НомерСФ1 = ПрефиксСФ1+СокрЛП(Прав(СокрЛП(НайденныеСтроки[0].FACTURENUM), 
			СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ1))); //11));  //АБС Коломиец 15396, 15825
			//АБС Шамов 33279
			Если ИспользоватьПрефикс Тогда
				НомерСчета = ПрефиксСФ1+СокрЛП(Прав(СокрЛП(НайденныеСтроки[0].BILL),
				СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ1)));
			Иначе
				НомерСчета = СокрЛП(СокрЛП(НайденныеСтроки[0].BILL));
			КонецЕсли;
			//\\АБС Шамов 33279
			
			//\\АБС Шамов 33279
			//АБС ИЗМЕНЕНИЕ 34682  05.11.2013 13:06:13  Шамов
			//СтрокаПоиска = Т_Счета.Найти(НомерСФ,"Номер");
			//Если СтрокаПоиска <>Неопределено Тогда
			//	НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
			//Иначе
			//	СтрокаПоиска = Т_Счета.Найти(НомерСФ1,"Номер"); 
			//	Если СтрокаПоиска <>Неопределено Тогда
			//		НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
			//	Иначе
			//		НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
			//	КонецЕсли;
			//КонецЕсли;
			
			//сначала проверим наличие старого счета с номером, сформированным по FACTURENUM
			//совпадающего с новым номером по BILL
			Если ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ИщемПоБилл Тогда
				ФормироватьНомерПоБилл = Истина;
				СтрокаПоиска = Т_Счета.Найти(НомерСчета, "Номер");
				Если СтрокаПоиска <>Неопределено Тогда
					Если СокрЛП(НайденныеСтроки[0].FACTURENUM) <> СокрЛП(СтрокаПоиска.FACTURENUM) Тогда
						//это НЕ ТОТ счет
						//при записи произойдет ошибка
						ФормироватьНомерПоБилл = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ФормироватьНомерПоБилл = Ложь;				
			КонецЕсли;
						
			СтрокаПоиска = Т_Счета.Найти(СокрЛП(НайденныеСтроки[0].BILL),"BILL");
			Если СтрокаПоиска <>Неопределено И ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ИщемПоБилл Тогда
				НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
			Иначе
				СтрокаПоиска = Т_Счета.Найти(СокрЛП(НайденныеСтроки[0].FACTURENUM),"FACTURENUM"); 
				Если СтрокаПоиска <>Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаПоиска.BILL) ИЛИ НЕ ИщемПоБилл ТОГДА
						НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
					Иначе
						НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
					КонецЕсли;	
				Иначе
					НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			//АБС ИЗМЕНЕНИЕ 34682 КОНЕЦ 
			
			Если НайдДокументСчетНаОплату.Пустая() Тогда
				ДокументСчет  = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
				НовыйДокумент = Истина;
				
				
				
				
				ДокументСчет.Биллинг = Истина;
				ДокументСчет.абс_СуммаНДСБиллинг =НайденныеСтроки[0].СуммаНДС; 
				ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
				ДокументСчет.УчитыватьНДС = Истина;
				ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента; 
				ДокументСчет.FACTUREEXTERNALID =НайденныеСтроки[0].FACTURENUM;
				//АБС Шамов 33279 Замена
				//Если ИспользоватьПрефикс Тогда
				//	ДокументСчет.Номер  = НомерСФ1;
				//Иначе
				//	ДокументСчет.Номер  = НомерСФ;
				//КонецЕсли;
				Если ИщемПоБилл Тогда
					ДокументСчет.BILLEXTERNALID =НайденныеСтроки[0].BILL;
				ИНАЧЕ
					ДокументСчет.BILLEXTERNALID ="";
				КонецЕсли;
				Если ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ФормироватьНомерПоБилл Тогда
					ДокументСчет.Номер  = НомерСчета;
				Иначе
					Если ИспользоватьПрефикс Тогда
						ДокументСчет.Номер  = НомерСФ1;
					Иначе
						ДокументСчет.Номер  = НомерСФ;
					КонецЕсли;
				КонецЕсли;
				//\\АБС Шамов 33279 Замена
				
				ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
				ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
				ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
				ДокументСчет.Организация = Организация;
				ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
				Если ЗначениеЗаполнено(НайденныеСтроки[0].TypeSchet) Тогда
					ДокументСчет.ДополнениеКАдресуДоставки =НайденныеСтроки[0].TypeSchet;
				ИначеЕсли  ЗначениеЗаполнено(НайденныеСтроки[0].Комментарий) Тогда
					ДокументСчет.ДополнениеКАдресуДоставки =Лев(НайденныеСтроки[0].Комментарий,1);
				КонецЕсли;
				
				Если Найти(НайденныеСтроки[0].INCLTAX,"Да")>0 Тогда
					СуммаВключаетНДС = Истина;
				Иначе
					СуммаВключаетНДС = Ложь;
				КонецЕсли;
				
				Если ДокументСчет.Метаданные().ТабличныеЧасти.Найти("Менеджеры")<>Неопределено Тогда
					Если ДокументСчет.Менеджеры.Количество()=0 Тогда
						Строкаменеджеров = ДокументСчет.Менеджеры.Добавить();
						Строкаменеджеров.Описание = НайденныеСтроки[0].KURATOR;
					КонецЕсли;
				КонецЕсли;
				//Заполнение куратора
				Если ЗначениеЗаполнено(НайденныеСтроки[0].абс_Куратор) Тогда
					ДокументСчет.абс_Куратор = НайденныеСтроки[0].абс_Куратор;
				Иначе
					ДокументСчет.абс_Куратор = НайтиКуратора(СокрЛП(НайденныеСтроки[0].KURATOR));
				КонецЕсли;
				//Заполнение куратора
				
				
				ДокументСчет.СуммаВключаетНДС = СуммаВключаетНДС;
				Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
					ДокументСчет.КурсВзаиморасчетов =1;
				Иначе
					ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
				КонецЕсли;
				ДокументСчет.КратностьВзаиморасчетов = 1;
				
				ДокументСчет.Подразделение = НайденныеСтроки[0].ЦФО;  //АБС Коломиец 13129
				
				//Заполним ТЧ Услуги документа.
				Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
					НайдСтрокаУслуги = ДокументСчет.Услуги.найти(СтрокаУслуги.УникальныйИдентификаторЗаписи,"ИдСтроки");
					Если  НайдСтрокаУслуги = Неопределено Тогда
						НоваяСтрокаУслуг = ДокументСчет.Услуги.Добавить();
					Иначе
						НоваяСтрокаУслуг = НайдСтрокаУслуги;
					КонецЕсли;
					
					//НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное;
					Если ЗначениеЗаполнено(СтрокаУслуги.FULLNAMESERVISE) Тогда
						НоваяСтрокаУслуг.Содержание = СокрЛП(СтрокаУслуги.FULLNAMESERVISE);
					Иначе
						НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное; 
					КонецЕсли;
					
					НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
					НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура; 
					НоваяСтрокаУслуг.ЗаказПокупателя = СтрокаУслуги.ЗаказПокупателя;
					НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
					НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
					НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
					НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
					//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
					НоваяСтрокаУслуг.СуммаНДС = СтрокаУслуги.СуммаНДС;
					
					НоваяСтрокаУслуг.абс_ЦФУ = СтрокаУслуги.ЦФУ;
					НоваяСтрокаУслуг.абс_ЦФО = СтрокаУслуги.ЦФО;
					НоваяСтрокаУслуг.СтатьяОборотов = СтрокаУслуги.СтатьяОборотов;
					НоваяСтрокаУслуг.абс_НоменклатурнаяГруппа = СтрокаУслуги.НоменклатурнаяГруппа;
					
				КонецЦикла;
			КонецЕсли;		
		КонецЕсли;
		
		Попытка
			ДокументСчет.ПометкаУдаления = Ложь;
			//+++ Григорьев Д.В.
			ДокументСчет.ttk_ТипБиллинга = ДанныеБиллинга[0].ТипБиллинга;
			//--- Григорьев Д.В.
			Если НовыйДокумент Тогда
				ДокументСчет.Записать();
				//Состояние("Создан документ: "+ДокументСчет.Ссылка);
				ДокСсылка = ДокументСчет.Ссылка;
			Иначе
				ДокСсылка = ДокументСчет.Ссылка;
			КонецЕсли;
			
			СтрокаПоиска =  Т_Счета.Найти(ДокСсылка,"Счет");
			Если СтрокаПоиска=Неопределено Тогда
				НоваяСтрока = Т_Счета.Добавить();
				Новаястрока.Счет = ДокСсылка.Ссылка;
				НоваяСтрока.Номер = СокрЛП(ДокСсылка.Номер);
			КонецЕсли;	

		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		//СтруктураДокументов.ДокументСчетНаОплату = ДокСсылка;
		
		
		//Если документ записан создадим документ реализация ТиУ на основании данного Счета
		//Если  НовыйДокумент Тогда
		//	СоздатьРеализациюТиУ(ДокСсылка, СтруктураДокументов);
		//Иначе
		//	СтруктураДокументов.перезаписан = Истина;
		//	ПерезаписатьДокументы(ДокСсылка,СтруктураДокументов);
		//	
		//КонецЕсли;
		//
		НСоздДок = СозданныеДокументы.Добавить();
		НСоздДок.ДокументСчетНаОплату = ДокСсылка;
		//ЗаполнитьЗначенияСвойств(НСоздДок, СтруктураДокументов);		
	КонецЦикла;
	
	//Обновление колонки СчетНаОплату в таблице ДанныеБиллинга
	Таб = СозданныеДокументы.Скопировать();
	Таб.Свернуть("ДокументСчетНаОплату");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабСчетов.ДокументСчетНаОплату
	               |ПОМЕСТИТЬ ВТСчета
	               |ИЗ
	               |	&ТабСчетов КАК ТабСчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализацияТиУ,
	               |	ВТСчета.ДокументСчетНаОплату КАК ДокументСчетНаОплату,
	               |	СФ.Ссылка КАК ДокументСФ
	               |ИЗ
	               |	ВТСчета КАК ВТСчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ВТСчета.ДокументСчетНаОплату = РеализацияТоваровУслуг.абс_СчетНаОплатуПокупателю
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	               |			СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование.абс_СчетНаОплатуПокупателю КАК ДокументОснованиеабс_СчетНаОплатуПокупателю
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |		ГДЕ
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг) КАК СФ
	               |		ПО ВТСчета.ДокументСчетНаОплату = СФ.ДокументОснованиеабс_СчетНаОплатуПокупателю";
	Запрос.УстановитьПараметр("ТабСчетов",Таб);
	СозданныеДокументы = Запрос.Выполнить().Выгрузить();
	Сч = 0;
	Кол = СозданныеДокументы.Количество();
	мРубли = Константы.ВалютаРегламентированногоУчета.Получить();
	Для Каждого Стр Из СозданныеДокументы Цикл
		  Сч = Сч+1;
		  Если Сч/100 = Цел(Сч/100) Тогда
			  //Сообщить("Обрабатывается "+Сч+" из "+Кол);
			  ТекстСообщения = "Обрабатываются накладные и счет-фактуры "+Сч+" из "+Кол;
			  //ОбщегоНазначения.Сообщение(ТекстСообщения);
			  ЗаписьЖурналаРегистрации("Сообщение", Важность, , ,ТекстСообщения);

		  КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ДокументРеализацияТиУ) И ЗначениеЗаполнено(Стр.ДокументСФ) Тогда

		ИначеЕсли Не ЗначениеЗаполнено(Стр.ДокументРеализацияТиУ) И Не ЗначениеЗаполнено(Стр.ДокументСФ) Тогда
			СоздатьРеализациюТиУ(Стр, Неопределено, мРубли);
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого Стр Из СозданныеДокументы Цикл
		Если ЗначениеЗаполнено(Стр.ДокументСчетНаОплату) Тогда
			СтруктураОтбора = Новый Структура("FACTURENUM");
			СтруктураОтбора.Вставить("FACTURENUM",СокрЛП(Стр.ДокументСчетНаОплату.FACTUREEXTERNALID));
			НайденныеСтроки = ДанныеБиллинга.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайдСтрока Из НайденныеСтроки Цикл
				НайдСтрока.СчетНаОплату = Стр.ДокументСчетНаОплату;
				НайдСтрока.ДокументРеализацияТиУ = Стр.ДокументРеализацияТиУ; 
				НайдСтрока.ДокументСФ = Стр.ДокументСФ;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	СтруктураВозврата.Вставить("ДанныеБиллинга",ДанныеБиллинга); 
	СтруктураВозврата.Вставить("СозданныеДокументы",СозданныеДокументы);
	Возврат СтруктураВозврата;
	
КонецФункции

//Функция формирования таблицы по биллингу с учетом корректирки реализаций
//
Функция СоздатьСчетаНаОплату_Корректировки(Организация,СчетКасса,ДанныеБиллинга,СозданныеДокументы, ЛогЗагрузкиСсылка = Неопределено) Экспорт
	
	мВалютаРеглУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ИспользоватьПрефикс = Организация.абс_ИспользоватьПрефиксВБиллинге;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетНаОплатуПокупателю.Ссылка КАК Счет,
   //АБС ВСТАВКА 34682  05.11.2013 13:02:01  Шамов
   |	СчетНаОплатуПокупателю.FACTUREEXTERNALID КАК FACTURENUM,
   |	СчетНаОплатуПокупателю.BILLEXTERNALID КАК BILL,
   //АБС ВСТАВКА 34682 КОНЕЦ 
	|	СчетНаОплатуПокупателю.Номер КАК Номер1
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Организация = &Организация
	|	И СчетНаОплатуПокупателю.Дата >= &ДатаНач
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет УБЫВ");
	
	Запрос.УстановитьПараметр("Организация"	, Организация);
	Запрос.УстановитьПараметр("ДатаНач"		, НачалоГода(ТекущаяДата()));
	
	Т_Счета = Запрос.Выполнить().Выгрузить();
	Т_Счета.Колонки.Добавить("Номер");
	
	Для Каждого Стр Из Т_Счета Цикл
		Стр.Номер = СокрЛП(Стр.Номер1);
	   //АБС ВСТАВКА 34682  05.11.2013 13:02:01  Шамов
		Стр.FACTURENUM = СокрЛП(Стр.FACTURENUM);
		Стр.BILL = СокрЛП(Стр.BILL);
	   //АБС ВСТАВКА 34682 КОНЕЦ 
	КонецЦикла;

	Важность = УровеньЖурналаРегистрации.Информация;
	
	СтруктураВозврата = Новый Структура("ДанныеБиллинга,СозданныеДокументы");
	
	СозданныеДокументы.Очистить();
	
	СозданныеДокументыКорр = СозданныеДокументы.Скопировать();
	
	СтруктураДокументов = Новый Структура("ДокументСчетНаОплату,ЗаказПокупателя, ДокументРеализацияТиУ, ДокументСФ, Перезаписан");
	
	//Создадим документы Счет на оплату покупателя
	//По каждой уникальной строке ТЗ создаем свой счет на оплату.
	//АБС Шамов
	//СтруктураПоиска = Новый Структура("FACTURENUM");
	//ТЗБиллинга=ДанныеБиллинга.Скопировать();
	//ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM");
	//ТЗСчетовНаОплату.Свернуть("FACTURENUM");
	//ЗаполненыБилл = Истина;
	//Для Каждого СтрокаДанных Из ДанныеБиллинга Цикл
	//	Если НЕ ЗначениеЗаполнено(СтрокаДанных.BILL) Тогда
	//		ЗаполненыБилл = Ложь;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	ТЗБиллинга=ДанныеБиллинга.Скопировать();
	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM,BILL");
	ТЗСчетовНаОплату.Свернуть("FACTURENUM,BILL");
	//Если ЗаполненыБилл Тогда
	//	ТЗБиллинга=ДанныеБиллинга.Скопировать();
	//	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"BILL");
	//	ТЗСчетовНаОплату.Свернуть("BILL");
	//Иначе
	//	ТЗБиллинга=ДанныеБиллинга.Скопировать();
	//	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM");
	//	ТЗСчетовНаОплату.Свернуть("FACTURENUM");
	//КонецЕсли;
	//\\АБС Шамов
	
	Сч = 0;
	Кол = ТЗСчетовНаОплату.Количество();
	Заголовок = "Обработка счетов";
	
	
	// 1. Соберем таблицу соответствий номеров сторно/исправленных реализаций
	// 2. В цикле по номерам всех документов из биллинга,
	//    проверяем, если это сторно реализация, и по ней есть исправление
	//    то необходимо создать корректировку реализации
	// 3. Если исправленной реализации нет, то создается просто сторно реализация
	// В цикле по номерам счетов пропускаем исправленные документы,
	// их отработаем при создании корректировки
	
	
	//AB CD EF GH IJ KL MN OP
	ПостфиксыСторноРеализиций 		= "CEGIKMO";
	ПостфиксыИсправленныхРеализаций = "DFHJLNP";
	
	ПостфиксыПоИсправлениям			= ПостфиксыСторноРеализиций + ПостфиксыИсправленныхРеализаций;
	
	ТабИсправлений = Новый ТаблицаЗначений;
	
	ТабИсправлений.Колонки.Добавить("НомерДокумента"		, ПолучитьОписаниеТипаСтрока(20));
	ТабИсправлений.Колонки.Добавить("НомерСторно"			, ПолучитьОписаниеТипаСтрока(20));
	ТабИсправлений.Колонки.Добавить("НомерИсправления"		, ПолучитьОписаниеТипаСтрока(20));
	ТабИсправлений.Колонки.Добавить("ПостфиксСторно"		, ПолучитьОписаниеТипаСтрока(1));
	ТабИсправлений.Колонки.Добавить("ПостфиксИсправления"	, ПолучитьОписаниеТипаСтрока(1));
	ТабИсправлений.Колонки.Добавить("ИндексСторно"			, ПолучитьОписаниеТипаЧисло(1));
	ТабИсправлений.Колонки.Добавить("ИндексИсправления"		, ПолучитьОписаниеТипаЧисло(1));	
	
	Для Каждого СтрокаСчета Из ТЗСчетовНаОплату Цикл
		
		ИндексСторно 		= Найти(ПостфиксыСторноРеализиций		, Прав(СтрокаСчета.FACTURENUM, 1));
		ИндексИсправления 	= Найти(ПостфиксыИсправленныхРеализаций	, Прав(СтрокаСчета.FACTURENUM, 1));
		
		Если ИндексСторно = 0 И ИндексИсправления = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерДокумента = Лев(СтрокаСчета.FACTURENUM, СтрДлина(СтрокаСчета.FACTURENUM) - 1);
		
		СтрокиПоНомеруДокумента = ТабИсправлений.НайтиСтроки(Новый Структура("НомерДокумента", НомерДокумента));
		
		ТекСтрокаПоНомеруДокумента = Неопределено;
		
		Если СтрокиПоНомеруДокумента.Количество() > 0 Тогда
			ТекСтрокаПоНомеруДокумента = СтрокиПоНомеруДокумента[0];
		КонецЕсли;
		
		Если ТекСтрокаПоНомеруДокумента = Неопределено Тогда
			
			ТекСтрокаПоНомеруДокумента = ТабИсправлений.Добавить();
			ТекСтрокаПоНомеруДокумента.НомерДокумента 		= НомерДокумента;
			
			ТекСтрокаПоНомеруДокумента.НомерСторно 			= "";
			ТекСтрокаПоНомеруДокумента.НомерИсправления 	= "";
			ТекСтрокаПоНомеруДокумента.ПостфиксСторно 		= "";
			ТекСтрокаПоНомеруДокумента.ПостфиксИсправления 	= "";
			ТекСтрокаПоНомеруДокумента.ИндексСторно			= 0;
			ТекСтрокаПоНомеруДокумента.ИндексИсправления	= 0;
			
		КонецЕсли;
		
		Если ИндексСторно > 0 Тогда
			
			ТекСтрокаПоНомеруДокумента.НомерСторно 		= СтрокаСчета.FACTURENUM;
			ТекСтрокаПоНомеруДокумента.ПостфиксСторно 	= Сред(ПостфиксыСторноРеализиций, ИндексСторно, 1);
			ТекСтрокаПоНомеруДокумента.ИндексСторно 	= ИндексСторно;
			
		КонецЕсли;
		
		Если ИндексИсправления > 0 Тогда
			
			ТекСтрокаПоНомеруДокумента.НомерИсправления 	= СтрокаСчета.FACTURENUM;
			ТекСтрокаПоНомеруДокумента.ПостфиксИсправления 	= Сред(ПостфиксыИсправленныхРеализаций, ИндексИсправления, 1);
			ТекСтрокаПоНомеруДокумента.ИндексИсправления 	= ИндексИсправления;
			
		КонецЕсли;
				
	КонецЦикла;	
	
	Для каждого СтрокаСчета Из ТЗСчетовНаОплату Цикл
		
		Сч = Сч+1;
		
		//ОбработкаПрерыванияПользователя();
		
		Если Сч / 100 = Цел(Сч / 100) Тогда
			//Сообщить("Обрабатывается "+Сч+" из "+Кол);
			ТекстСообщения = "Обрабатывается "+Сч+" из "+Кол;
			ЗаписьЖурналаРегистрации("Сообщение", Важность, , ,ТекстСообщения);
			//ОбщегоНазначения.Сообщение(ТекстСообщения);
		КонецЕсли;
		
		//Осуществим проверку, можно ли загружать данный счет -
		//проверка осуществляется по всем строкам счета если 
		//хотябы одна строка счета некорректна, весь счет не будет загружен
		
		//АБС Шамов
		//СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		
		//сначала найдем строки по FACTURENUM
		СтруктураПоиска = Новый Структура("FACTURENUM");
		СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		НайденныеСтроки = ТЗБиллинга.НайтиСтроки(СтруктураПоиска);
		ТекБилл = Неопределено;
		ИщемПоБилл = Истина;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если НЕ ЗначениеЗаполнено(Строка.BILL) Тогда
				ИщемПоБилл = Ложь;
				Прервать;
			КонецЕсли;
			Если ТекБилл = Неопределено Тогда
				ТекБилл = Строка.BILL;	
			Иначе
				Если ТекБилл <> Строка.BILL Тогда
					ИщемПоБилл = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИщемПоБилл Тогда
			СтруктураПоиска = Новый Структура("BILL");
			СтруктураПоиска.BILL = СтрокаСчета.BILL;
		Иначе
			СтруктураПоиска = Новый Структура("FACTURENUM");
			СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		КонецЕсли;
		//\\АБС Шамов
		НайденныеСтроки = ТЗБиллинга.НайтиСтроки(СтруктураПоиска);
		
		Если  НайденныеСтроки.Количество() =0 Тогда
			//Фатальная ошибка...
			//Сообщить("Ошибка!!! Строки с номером: "+СтруктураПоиска.FACTURENUM+" в ТЗ Биллинга не найдены!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		//Проверяем все найденные строки на возможность загрузки Счета на оплату.
		Отказ = Ложь;
		ОтказПоОшибке = Ложь;
		Для Каждого СтрокаБиллинга Из НайденныеСтроки Цикл
			Если Не (СтрокаБиллинга.Загружать И  не ЗначениеЗаполнено(СтрокаБиллинга.OPERATOR))	Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			Продолжить;
		КонецЦикла;	
		
		Если Отказ Тогда
			Продолжить;
			//Счет на оплату не создаем.
		КонецЕсли;
		
		
		// Определим вид документа
		ЭтоДокументПоСторно 		= Ложь;
		ЭтоДокументПоИсправлению 	= Ложь;
		
		СтрСторно = Неопределено;
	
		ИндексСторно 		= Найти(ПостфиксыСторноРеализиций, Прав(СтрокаСчета.FACTURENUM, 1));
		ИндексИсправления 	= Найти(ПостфиксыИсправленныхРеализаций, Прав(СтрокаСчета.FACTURENUM, 1));
		
		Если ИндексИсправления > 0 Тогда
			//АБС 14.03.2014 39427
			СтрокиПоСторно = ТабИсправлений.НайтиСтроки(Новый Структура("НомерСторно", СтрокаСчета.FACTURENUM));
			
						
			Если СтрокиПоСторно.Количество() > 0 Тогда
				
				СтрСторно = СтрокиПоСторно[0];
				
			КонецЕсли;

			Если НЕ СтрСторно = Неопределено Тогда
				
				ЭтоДокументПоСторно = Истина;
				
				Если ЗначениеЗаполнено(СтрСторно.НомерИсправления) Тогда
					
					ЭтоДокументПоИсправлению = Истина;
					
				КонецЕсли;				
			КонецЕсли;
			
			Если ЭтоДокументПоСторно И ЭтоДокументПоИсправлению Тогда
				Продолжить;
			КонецЕсли;
			//АБС 14.03.2014 39427
		КонецЕсли;
		
		Если ИндексСторно > 0 Тогда
			
			// Найдем исправленный документ
			// если исправленного документа нет, то создадим сторно реализацию стандартным механизмом			
			
			СтрокиПоСторно = ТабИсправлений.НайтиСтроки(Новый Структура("НомерСторно", СтрокаСчета.FACTURENUM));
			
						
			Если СтрокиПоСторно.Количество() > 0 Тогда
				
				СтрСторно = СтрокиПоСторно[0];
				
			КонецЕсли;
			
			Если НЕ СтрСторно = Неопределено Тогда
				
				ЭтоДокументПоСторно = Истина;
				
				Если ЗначениеЗаполнено(СтрСторно.НомерИсправления) Тогда
					
					ЭтоДокументПоИсправлению = Истина;
					
				КонецЕсли;				
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ЭтоДокументПоСторно И ЭтоДокументПоИсправлению Тогда
			// Создадим корректировку реализации.
			
			ТекСсылкаКорректировкаРеализации = Документы.КорректировкаРеализации.НайтиПоНомеру(СтрСторно.НомерИсправления, НачалоГода(ЛогЗагрузкиСсылка.Дата));
			
			ДокКорр = Неопределено;
			
			Если ЗначениеЗаполнено(ТекСсылкаКорректировкаРеализации) Тогда
				
				ДокКорр = ТекСсылкаКорректировкаРеализации.ПолучитьОбъект();
				
			Иначе
				
				ДокКорр = Документы.КорректировкаРеализации.СоздатьДокумент();
				
			КонецЕсли;
			
			НайденныеСтрокиИсправление 				= ТЗБиллинга.НайтиСтроки(Новый Структура("FACTURENUM", СтрСторно.НомерИсправления));		
			
			ДокКорр.Номер							= СтрСторно.НомерИсправления;
			ДокКорр.Дата 							= НайденныеСтроки[0].ДатаДокумента;
			
			ДокКорр.Организация 					= Организация;			
			ДокКорр.ИсправляемыйДокументРеализации 	= НайтиДокументОснованиеКорректировки(Организация, СтрСторно.НомерДокумента);
			
			ДокКорр.ДокументРеализации				= ДокКорр.ИсправляемыйДокументРеализации;
			
			ДокКорр.абс_КорректировкаБиллинга 		= Истина;
			ДокКорр.ВидОперации						= Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
			
			ДокКорр.КорректироватьБУиНУ				= Истина;
			
			ДокКорр.ОтражатьВУправленческомУчете	= Истина;
			ДокКорр.ОтражатьВБухгалтерскомУчете		= Истина;
			ДокКорр.ОтражатьВНалоговомУчете			= Истина;
			
			ДокКорр.Контрагент 						= НайденныеСтроки[0].Контрагент;			
			ДокКорр.ДоговорКонтрагента 				= НайденныеСтроки[0].ДоговорКонтрагента;
			ДокКорр.ВалютаДокумента 				= НайденныеСтроки[0].Валюта;	
			
			ДокКорр.УчитыватьНДС 					= Истина;
			
			СуммаВключаетНДС 						= Найти(НайденныеСтроки[0].INCLTAX,"Да")>0;
						
			ДокКорр.КратностьВзаиморасчетов 		= 1;
			
			Если НайденныеСтроки[0].Валюта = мВалютаРеглУчета Тогда
				ДокКорр.КурсВзаиморасчетов = 1;
			Иначе
				ДокКорр.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			
			ДокКорр.Услуги.Очистить();
			
			// 1. Заполним строки сторно
			// 2. Заполним строки исправлений
			
			Для Каждого СтрокаУслуги Из НайденныеСтроки Цикл
				
				НоваяСтрокаУслуг = ДокКорр.Услуги.Найти(СтрокаУслуги.Номенклатура, "Номенклатура");
				
				Если НоваяСтрокаУслуг = Неопределено Тогда
					НоваяСтрокаУслуг = ДокКорр.Услуги.Добавить();
				КонецЕсли;
				
				// Найдем строку по номенклатуре в документе основании
				Если ТипЗнч(ДокКорр.ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					СтрокаУслугиОснования = ДокКорр.ДокументРеализации.Услуги.Найти(СтрокаУслуги.Номенклатура, "Номенклатура");
					
					Если НЕ СтрокаУслугиОснования = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуг, СтрокаУслугиОснования,,"Количество,Цена,Сумма,СтавкаНДС,СуммаНДС");
					КонецЕсли;
				КонецЕсли;
					
				Если ЗначениеЗаполнено(СтрокаУслуги.FULLNAMESERVISE) Тогда
					НоваяСтрокаУслуг.СодержаниеДоИзменения = СокрЛП(СтрокаУслуги.FULLNAMESERVISE);
				Иначе
					НоваяСтрокаУслуг.СодержаниеДоИзменения = СтрокаУслуги.Номенклатура.НаименованиеПолное; 
				КонецЕсли;
				
				НоваяСтрокаУслуг.Номенклатура 				= СтрокаУслуги.Номенклатура; 
				
				НоваяСтрокаУслуг.КоличествоДоИзменения 		= СтрокаУслуги.Количество;
				НоваяСтрокаУслуг.СтавкаНДСДоИзменения 		= СтрокаУслуги.СтавкаНДС;
				НоваяСтрокаУслуг.ЦенаДоИзменения 			= - СтрокаУслуги.Цена;
				НоваяСтрокаУслуг.СуммаДоИзменения 			= - СтрокаУслуги.Сумма;
				
				НоваяСтрокаУслуг.СуммаНДСДоИзменения 		= - СтрокаУслуги.СуммаНДС;
				
				НоваяСтрокаУслуг.абс_ЦФУДоИзменения			= СтрокаУслуги.ЦФУ;
				НоваяСтрокаУслуг.абс_ЦФОДоИзменения 		= СтрокаУслуги.ЦФО;
				Если НоваяСтрокаУслуг.абс_ЦФО.абс_ГодИспользования < НачалоГода(ПолучитьДатуСервера()) Тогда				
					НоваяСтрокаУслуг.абс_ЦФО    			= СтрокаУслуги.ЦФО;
				КонецЕсли;				
				НоваяСтрокаУслуг.СтатьяОборотовДоИзменения 	= СтрокаУслуги.СтатьяОборотов;
							
				НоваяСтрокаУслуг.ЕстьВДокументеРеализации  	= Истина;
								
			КонецЦикла;
			
			Для Каждого СтрокаУслуги Из НайденныеСтрокиИсправление Цикл
				
				НоваяСтрокаУслуг = ДокКорр.Услуги.Найти(СтрокаУслуги.Номенклатура, "Номенклатура");
				
				Если НоваяСтрокаУслуг = Неопределено Тогда
					НоваяСтрокаУслуг = ДокКорр.Услуги.Добавить();
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаУслуги.FULLNAMESERVISE) Тогда
					НоваяСтрокаУслуг.СодержаниеДоИзменения = СокрЛП(СтрокаУслуги.FULLNAMESERVISE);
				Иначе
					НоваяСтрокаУслуг.СодержаниеДоИзменения = СтрокаУслуги.Номенклатура.НаименованиеПолное; 
				КонецЕсли;
				
				НоваяСтрокаУслуг.Номенклатура 				= СтрокаУслуги.Номенклатура; 
				
				НоваяСтрокаУслуг.Количество 				= СтрокаУслуги.Количество;
				НоваяСтрокаУслуг.СтавкаНДС			 		= СтрокаУслуги.СтавкаНДС;
				НоваяСтрокаУслуг.Цена			 			= СтрокаУслуги.Цена;
				НоваяСтрокаУслуг.Сумма			 			= СтрокаУслуги.Сумма;
				
				НоваяСтрокаУслуг.СуммаНДС			 		= СтрокаУслуги.СуммаНДС;
				
				НоваяСтрокаУслуг.абс_ЦФУ					= СтрокаУслуги.ЦФУ;
				НоваяСтрокаУслуг.абс_ЦФО			 		= СтрокаУслуги.ЦФО;
				НоваяСтрокаУслуг.СтатьяОборотов			 	= СтрокаУслуги.СтатьяОборотов;
							
				//НоваяСтрокаУслуг.ЕстьВДокументеРеализации  	= Истина;
								
			КонецЦикла;			
			
			ДокКорр.Записать(РежимЗаписиДокумента.Запись);
			
	 		// Создадим СФ
			СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокКорр.Ссылка, "СчетФактураВыданный");
			
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				ОбъектСчетаФактуры = СчетФактура.ПолучитьОбъект();
			Иначе
				ОбъектСчетаФактуры = Документы["СчетФактураВыданный"].СоздатьДокумент();
			КонецЕсли;
		
			ОбъектСчетаФактуры.Заполнить(ДокКорр.Ссылка);
			ОбъектСчетаФактуры.Номер 			= "И" + ДокКорр.Ссылка.Номер;
			ОбъектСчетаФактуры.Дата  			= ДокКорр.Ссылка.Дата;
			ОбъектСчетаФактуры.ДатаВыставления  = ДокКорр.Ссылка.Дата;
			ОбъектСчетаФактуры.Выставлен 		= Истина;
			ОбъектСчетаФактуры.КодСпособаВыставления = 1;
			ОбъектсчетаФактуры.НомерИсправления	= СтрСторно.ИндексИсправления;
			//АБС ВСТАВКА №45453 НАЧАЛО «4 августа 2014 г.», Пополитов	
			Попытка
				ElDoc = НайденныеСтроки[0].ElDoc;
				ОбъектсчетаФактуры.КодСпособаВыставления = ?(ЗначениеЗаполнено(ElDoc),ElDoc,1);	
			Исключение
				ОбъектсчетаФактуры.КодСпособаВыставления = 1;
			КонецПопытки;
			//\\АБС ВСТАВКА №45453 КОНЕЦ
			
			ОбъектСчетаФактуры.ОбменДанными.Загрузка = Истина;
			ОбъектСчетаФактуры.Записать();
			
			СтрокаТЧКорр = СозданныеДокументыКорр.Добавить();

			СтрокаТЧКорр.ДокументРеализацияТиУ 	= ДокКорр.Ссылка;
			СтрокаТЧКорр.ДокументСФ 			= ОбъектСчетаФактуры.Ссылка;
			
			Для Каждого СтрДанные Из НайденныеСтроки Цикл
				СтрДанные.ДокументРеализацияТиУ	= ДокКорр.Ссылка;
				СтрДанные.ДокументСФ			= ОбъектСчетаФактуры.Ссылка;
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;		
		
		Если НЕ НайденныеСтроки[0].СчетНаОплату.Пустая() Тогда
			
			Если Не РазрещитьРедактированиеСчетаНаОплату(НайденныеСтроки[0].СчетНаОплату) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИспользоватьПрефикс Тогда
				ПрефиксСФ = СокрЛП(Организация.Префикс)+"B";
				НомерСФ = ПрефиксСФ+СокрЛП(Прав(СокрЛП(НайденныеСтроки[0].FACTURENUM), 
				СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ))); //11));  //АБС Коломиец 15396, 15825				
				//АБС Шамов 33279 Вставка
				НомерСчета = ПрефиксСФ+СокрЛП(Прав(СокрЛП(НайденныеСтроки[0].BILL),
				СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ)));
				//\\АБС Шамов 33279 Вставка
			Иначе
				НомерСФ = СокрЛП(СокрЛП(НайденныеСтроки[0].FACTURENUM));
				//АБС Шамов 33279 Вставка
				НомерСчета = СокрЛП(СокрЛП(НайденныеСтроки[0].BILL));
				//\\АБС Шамов 33279 Вставка
			КонецЕсли;
			
			//Документ уже существует, перезапишем его.
			ДокументСчет = НайденныеСтроки[0].СчетНаОплату.ПолучитьОбъект();
			ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
			ДокументСчет.Биллинг = Истина;
			ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента; 
			ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
			ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
			ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
			ДокументСчет.FACTUREEXTERNALID =НайденныеСтроки[0].FACTURENUM;
			//АБС Шамов 33279
			//ДокументСчет.номер =НомерСФ;
			Если ИщемПоБилл Тогда
				ДокументСчет.BILLEXTERNALID =НайденныеСтроки[0].BILL;
			ИНАЧЕ
				ДокументСчет.BILLEXTERNALID ="";
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденныеСтроки[0].BILL) Тогда
				ДокументСчет.Номер = НомерСчета;
			Иначе
				ДокументСчет.Номер = НомерСФ;
			КонецЕсли;
			//\\АБС Шамов 33279
			ДокументСчет.абс_СуммаНДСБиллинг =НайденныеСтроки[0].СуммаНДС; 
			ДокументСчет.Организация = Организация;
			ДокументСчет.УчитыватьНДС = Истина;                                
			Если ЗначениеЗаполнено(НайденныеСтроки[0].TypeSchet) Тогда
				ДокументСчет.ДополнениеКАдресуДоставки =НайденныеСтроки[0].TypeSchet;
			ИначеЕсли  ЗначениеЗаполнено(НайденныеСтроки[0].Комментарий) Тогда
				ДокументСчет.ДополнениеКАдресуДоставки =Лев(НайденныеСтроки[0].Комментарий,1);
			КонецЕсли;
			ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
			
			Если ДокументСчет.Метаданные().ТабличныеЧасти.Найти("Менеджеры")<>Неопределено Тогда
				Если ДокументСчет.Менеджеры.Количество()=0 Тогда
					Строкаменеджеров = ДокументСчет.Менеджеры.Добавить();
					Строкаменеджеров.Описание = НайденныеСтроки[0].KURATOR;
				КонецЕсли;
			КонецЕсли;
			
			//Заполнение куратора
			//Если ЗначениеЗаполнено(НайденныеСтроки[0].абс_Куратор) Тогда
				ДокументСчет.абс_Куратор = НайденныеСтроки[0].абс_Куратор;
			//Иначе
			//	ДокументСчет.абс_Куратор = НайтиКуратора(СокрЛП(НайденныеСтроки[0].KURATOR));
			//КонецЕсли;
            //Заполнение куратора
			Если Найти(НайденныеСтроки[0].INCLTAX,"Да")>0 Тогда
				ДокументСчет.СуммаВключаетНДС = Истина;
			Иначе
				ДокументСчет.СуммаВключаетНДС = Ложь;
			КонецЕсли;
		
			Если  НайденныеСтроки[0].Валюта = мВалютаРеглУчета Тогда
				ДокументСчет.КурсВзаиморасчетов =1;
			Иначе
				ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			ДокументСчет.КратностьВзаиморасчетов = 1;
			//Заполним ТЧ Услуги документа.
			ДокументСчет.Услуги.Очистить();
			Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
				НайдСтрокаУслуги = ДокументСчет.Услуги.найти(СтрокаУслуги.УникальныйИдентификаторЗаписи,"ИдСтроки");
				Если  НайдСтрокаУслуги = Неопределено Тогда
					НоваяСтрокаУслуг = ДокументСчет.Услуги.Добавить();
				Иначе
					НоваяСтрокаУслуг = НайдСтрокаУслуги;
				КонецЕсли;

					//НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное;  
					Если ЗначениеЗаполнено(СтрокаУслуги.FULLNAMESERVISE) Тогда
						НоваяСтрокаУслуг.Содержание = СокрЛП(СтрокаУслуги.FULLNAMESERVISE);
					Иначе
						НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное; 
					КонецЕсли;
					НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
					НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура;  
					НоваяСтрокаУслуг.ЗаказПокупателя = СтрокаУслуги.ЗаказПокупателя;
					НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
					НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
					НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
					НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
					//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
					НоваяСтрокаУслуг.СуммаНДС = СтрокаУслуги.СуммаНДС;
					
					НоваяСтрокаУслуг.абс_ЦФУ = СтрокаУслуги.ЦФУ;
					НоваяСтрокаУслуг.абс_ЦФО = СтрокаУслуги.ЦФО;
					НоваяСтрокаУслуг.СтатьяОборотов = СтрокаУслуги.СтатьяОборотов;
					НоваяСтрокаУслуг.абс_НоменклатурнаяГруппа = СтрокаУслуги.НоменклатурнаяГруппа;
			КонецЦикла;
			НовыйДокумент =Ложь;
			
			
			//Документ
		Иначе
			
			//Создаем СчетНаОплату
			//
			//НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.НайтиПоРеквизиту("FACTUREEXTERNALID",НайденныеСтроки[0].FACTURENUM);
			НомерСФ = СокрЛП(НайденныеСтроки[0].FACTURENUM);
			ПрефиксСФ1 = СокрЛП(Организация.Префикс)+"B";
			НомерСФ1 = ПрефиксСФ1+СокрЛП(Прав(СокрЛП(НайденныеСтроки[0].FACTURENUM), 
			СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ1))); //11));  //АБС Коломиец 15396, 15825
			//АБС Шамов 33279
			Если ИспользоватьПрефикс Тогда
				НомерСчета = ПрефиксСФ1+СокрЛП(Прав(СокрЛП(НайденныеСтроки[0].BILL),
				СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ1)));
			Иначе
				НомерСчета = СокрЛП(СокрЛП(НайденныеСтроки[0].BILL));
			КонецЕсли;
			//\\АБС Шамов 33279
			
			//\\АБС Шамов 33279
			//АБС ИЗМЕНЕНИЕ 34682  05.11.2013 13:06:13  Шамов
			//СтрокаПоиска = Т_Счета.Найти(НомерСФ,"Номер");
			//Если СтрокаПоиска <>Неопределено Тогда
			//	НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
			//Иначе
			//	СтрокаПоиска = Т_Счета.Найти(НомерСФ1,"Номер"); 
			//	Если СтрокаПоиска <>Неопределено Тогда
			//		НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
			//	Иначе
			//		НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
			//	КонецЕсли;
			//КонецЕсли;
			
			//сначала проверим наличие старого счета с номером, сформированным по FACTURENUM
			//совпадающего с новым номером по BILL
			Если ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ИщемПоБилл Тогда
				ФормироватьНомерПоБилл = Истина;
				СтрокаПоиска = Т_Счета.Найти(НомерСчета, "Номер");
				Если СтрокаПоиска <>Неопределено Тогда
					Если СокрЛП(НайденныеСтроки[0].FACTURENUM) <> СокрЛП(СтрокаПоиска.FACTURENUM) Тогда
						//это НЕ ТОТ счет
						//при записи произойдет ошибка
						ФормироватьНомерПоБилл = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ФормироватьНомерПоБилл = Ложь;				
			КонецЕсли;
						
			СтрокаПоиска = Т_Счета.Найти(СокрЛП(НайденныеСтроки[0].BILL),"BILL");
			Если СтрокаПоиска <>Неопределено И ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ИщемПоБилл Тогда
				НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
			Иначе
				СтрокаПоиска = Т_Счета.Найти(СокрЛП(НайденныеСтроки[0].FACTURENUM),"FACTURENUM"); 
				Если СтрокаПоиска <>Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаПоиска.BILL) ИЛИ НЕ ИщемПоБилл ТОГДА
						НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
					Иначе
						НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
					КонецЕсли;	
				Иначе
					НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			//АБС ИЗМЕНЕНИЕ 34682 КОНЕЦ 
			
			Если НайдДокументСчетНаОплату.Пустая() Тогда
				ДокументСчет  = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
				НовыйДокумент = Истина;

			Иначе 
				Если Не РазрещитьРедактированиеСчетаНаОплату(НайдДокументСчетНаОплату) Тогда
					Продолжить;
				КонецЕсли;
				
				ДокументСчет =  НайдДокументСчетНаОплату.ПолучитьОбъект();
				НовыйДокумент =Ложь;
			КонецЕсли;
		    ДокументСчет.Биллинг = Истина;
			ДокументСчет.абс_СуммаНДСБиллинг =НайденныеСтроки[0].СуммаНДС; 
			ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
			ДокументСчет.УчитыватьНДС = Истина;
			ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента; 
			ДокументСчет.FACTUREEXTERNALID =НайденныеСтроки[0].FACTURENUM;
			//АБС Шамов 33279 Замена
			//Если ИспользоватьПрефикс Тогда
			//	ДокументСчет.Номер  = НомерСФ1;
			//Иначе
			//	ДокументСчет.Номер  = НомерСФ;
			//КонецЕсли;
			Если ИщемПоБилл Тогда
				ДокументСчет.BILLEXTERNALID =НайденныеСтроки[0].BILL;
			ИНАЧЕ
				ДокументСчет.BILLEXTERNALID ="";
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ФормироватьНомерПоБилл Тогда
				ДокументСчет.Номер  = НомерСчета;
			Иначе
				Если ИспользоватьПрефикс Тогда
					ДокументСчет.Номер  = НомерСФ1;
				Иначе
					ДокументСчет.Номер  = НомерСФ;
				КонецЕсли;
			КонецЕсли;
			//\\АБС Шамов 33279 Замена
			
			ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
			ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
			ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
			ДокументСчет.Организация = Организация;
			ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
			Если ЗначениеЗаполнено(НайденныеСтроки[0].TypeSchet) Тогда
				ДокументСчет.ДополнениеКАдресуДоставки =НайденныеСтроки[0].TypeSchet;
			ИначеЕсли  ЗначениеЗаполнено(НайденныеСтроки[0].Комментарий) Тогда
				ДокументСчет.ДополнениеКАдресуДоставки =Лев(НайденныеСтроки[0].Комментарий,1);
			КонецЕсли;
			
			Если Найти(НайденныеСтроки[0].INCLTAX,"Да")>0 Тогда
				СуммаВключаетНДС = Истина;
			Иначе
				СуммаВключаетНДС = Ложь;
			КонецЕсли;
			
			Если ДокументСчет.Метаданные().ТабличныеЧасти.Найти("Менеджеры")<>Неопределено Тогда
				Если ДокументСчет.Менеджеры.Количество()=0 Тогда
					Строкаменеджеров = ДокументСчет.Менеджеры.Добавить();
					Строкаменеджеров.Описание = НайденныеСтроки[0].KURATOR;
				КонецЕсли;
			КонецЕсли;
			//Заполнение куратора
			Если ЗначениеЗаполнено(НайденныеСтроки[0].абс_Куратор) Тогда
				ДокументСчет.абс_Куратор = НайденныеСтроки[0].абс_Куратор;
			Иначе
				ДокументСчет.абс_Куратор = НайтиКуратора(СокрЛП(НайденныеСтроки[0].KURATOR));
			КонецЕсли;
			//Заполнение куратора

			
			ДокументСчет.СуммаВключаетНДС = СуммаВключаетНДС;
			Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
				ДокументСчет.КурсВзаиморасчетов =1;
			Иначе
				ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			ДокументСчет.КратностьВзаиморасчетов = 1;
			
			ДокументСчет.Подразделение = НайденныеСтроки[0].ЦФО;  //АБС Коломиец 13129
			
			//Заполним ТЧ Услуги документа.
			Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
				НайдСтрокаУслуги = ДокументСчет.Услуги.найти(СтрокаУслуги.УникальныйИдентификаторЗаписи,"ИдСтроки");
				Если  НайдСтрокаУслуги = Неопределено Тогда
					НоваяСтрокаУслуг = ДокументСчет.Услуги.Добавить();
				Иначе
					НоваяСтрокаУслуг = НайдСтрокаУслуги;
				КонецЕсли;
	
					//НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное;
					Если ЗначениеЗаполнено(СтрокаУслуги.FULLNAMESERVISE) Тогда
						НоваяСтрокаУслуг.Содержание = СокрЛП(СтрокаУслуги.FULLNAMESERVISE);
					Иначе
						НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное; 
					КонецЕсли;
					НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
					НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура; 
					НоваяСтрокаУслуг.ЗаказПокупателя = СтрокаУслуги.ЗаказПокупателя;
					НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
					НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
					НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
					НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
					//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
					НоваяСтрокаУслуг.СуммаНДС = СтрокаУслуги.СуммаНДС;
					
					НоваяСтрокаУслуг.абс_ЦФУ = СтрокаУслуги.ЦФУ;
					НоваяСтрокаУслуг.абс_ЦФО = СтрокаУслуги.ЦФО;
					НоваяСтрокаУслуг.СтатьяОборотов = СтрокаУслуги.СтатьяОборотов;
					НоваяСтрокаУслуг.абс_НоменклатурнаяГруппа = СтрокаУслуги.НоменклатурнаяГруппа;
								
			КонецЦикла;
					
		КонецЕсли;
		
		Попытка
			ДокументСчет.ПометкаУдаления = Ложь;
			Если НовыйДокумент Тогда
				ДокументСчет.Записать();
				//Состояние("Создан документ: "+ДокументСчет.Ссылка);
				ДокСсылка = ДокументСчет.Ссылка;
			Иначе
				ДокументСчет.Записать();
				
				//Состояние("Перезаписан документ: "+ДокументСчет.Ссылка);
				ДокСсылка = ДокументСчет.Ссылка;
			КонецЕсли;
			
			СтрокаПоиска =  Т_Счета.Найти(ДокСсылка,"Счет");
			Если СтрокаПоиска=Неопределено Тогда
				НоваяСтрока = Т_Счета.Добавить();
				Новаястрока.Счет = ДокСсылка.Ссылка;
				НоваяСтрока.Номер = СокрЛП(ДокСсылка.Номер);
			КонецЕсли;	

		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		//СтруктураДокументов.ДокументСчетНаОплату = ДокСсылка;
		
		
		//Если документ записан создадим документ реализация ТиУ на основании данного Счета
		//Если  НовыйДокумент Тогда
		//	СоздатьРеализациюТиУ(ДокСсылка, СтруктураДокументов);
		//Иначе
		//	СтруктураДокументов.перезаписан = Истина;
		//	ПерезаписатьДокументы(ДокСсылка,СтруктураДокументов);
		//	
		//КонецЕсли;
		//
		НСоздДок = СозданныеДокументы.Добавить();
		НСоздДок.ДокументСчетНаОплату = ДокСсылка;
		//ЗаполнитьЗначенияСвойств(НСоздДок, СтруктураДокументов);		
	КонецЦикла;	
	
	//Обновление колонки СчетНаОплату в таблице ДанныеБиллинга
	Таб = СозданныеДокументы.Скопировать();
	Таб.Свернуть("ДокументСчетНаОплату");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабСчетов.ДокументСчетНаОплату
	               |ПОМЕСТИТЬ ВТСчета
	               |ИЗ
	               |	&ТабСчетов КАК ТабСчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализацияТиУ,
	               |	ВТСчета.ДокументСчетНаОплату КАК ДокументСчетНаОплату,
	               |	СФ.Ссылка КАК ДокументСФ
	               |ИЗ
	               |	ВТСчета КАК ВТСчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ВТСчета.ДокументСчетНаОплату = РеализацияТоваровУслуг.абс_СчетНаОплатуПокупателю
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	               |			СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование.абс_СчетНаОплатуПокупателю КАК ДокументОснованиеабс_СчетНаОплатуПокупателю
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |		ГДЕ
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг) КАК СФ
	               |		ПО ВТСчета.ДокументСчетНаОплату = СФ.ДокументОснованиеабс_СчетНаОплатуПокупателю";
	Запрос.УстановитьПараметр("ТабСчетов",Таб);
	
	ТабЗапроса = Запрос.Выполнить().Выгрузить();
	
	СозданныеДокументы.Очистить();
	
	Для Каждого СтрТабЗапроса из ТабЗапроса Цикл
		
		СтрДок = СозданныеДокументы.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрДок, СтрТабЗапроса);
		
	КонецЦикла;
	
	Сч = 0;
	Кол = СозданныеДокументы.Количество();
	мРубли = Константы.ВалютаРегламентированногоУчета.Получить();
	Для Каждого Стр Из СозданныеДокументы Цикл
		  Сч = Сч+1;
		  Если Сч/100 = Цел(Сч/100) Тогда
			  //Сообщить("Обрабатывается "+Сч+" из "+Кол);
			  ТекстСообщения = "Обрабатываются накладные и счет-фактуры "+Сч+" из "+Кол;
			  //ОбщегоНазначения.Сообщение(ТекстСообщения);
			  ЗаписьЖурналаРегистрации("Сообщение", Важность, , ,ТекстСообщения);

		  КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ДокументРеализацияТиУ) И ЗначениеЗаполнено(Стр.ДокументСФ) Тогда
				ПерезаписатьДокументы(Стр);

		ИначеЕсли Не ЗначениеЗаполнено(Стр.ДокументРеализацияТиУ) И Не ЗначениеЗаполнено(Стр.ДокументСФ) Тогда
				СоздатьРеализациюТиУ(Стр,Неопределено,мРубли);


		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Стр Из СозданныеДокументы Цикл
		Если ЗначениеЗаполнено(Стр.ДокументСчетНаОплату) Тогда
			СтруктураОтбора = Новый Структура("FACTURENUM");
			СтруктураОтбора.Вставить("FACTURENUM",СокрЛП(Стр.ДокументСчетНаОплату.FACTUREEXTERNALID));
			НайденныеСтроки = ДанныеБиллинга.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайдСтрока Из НайденныеСтроки Цикл
				НайдСтрока.СчетНаОплату = Стр.ДокументСчетНаОплату;
				НайдСтрока.ДокументРеализацияТиУ = Стр.ДокументРеализацияТиУ; 
				НайдСтрока.ДокументСФ = Стр.ДокументСФ;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧКорр Из СозданныеДокументыКорр Цикл
		
		СтрокаТЧ = СозданныеДокументы.Добавить();	
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧКорр);		
		
		СтруктураОтбора = Новый Структура("FACTURENUM");
		СтруктураОтбора.Вставить("FACTURENUM",СокрЛП(СтрокаТЧКорр.ДокументРеализацияТиУ.Номер));
		
		НайденныеСтроки = ДанныеБиллинга.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого НайдСтрока Из НайденныеСтроки Цикл
			НайдСтрока.СчетНаОплату 			= СтрокаТЧКорр.ДокументСчетНаОплату;
			НайдСтрока.ДокументРеализацияТиУ 	= СтрокаТЧКорр.ДокументРеализацияТиУ; 
			НайдСтрока.ДокументСФ 				= СтрокаТЧКорр.ДокументСФ;
		КонецЦикла;
			
	КонецЦикла;	
	

	СтруктураВозврата.Вставить("ДанныеБиллинга"		, ДанныеБиллинга); 
	СтруктураВозврата.Вставить("СозданныеДокументы"	, СозданныеДокументы);
		
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДосоздатьСчетаНаОплату_Корректировки(Организация,СчетКасса,ДанныеБиллинга,СозданныеДокументы, ЛогЗагрузкиСсылка = Неопределено) Экспорт
	
	ИспользоватьПрефикс = Организация.абс_ИспользоватьПрефиксВБиллинге;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СчетНаОплатуПокупателю.Ссылка КАК Счет,
				   //АБС ВСТАВКА 34682  05.11.2013 13:02:01  Шамов
	               |	СчетНаОплатуПокупателю.FACTUREEXTERNALID КАК FACTURENUM,
	               |	СчетНаОплатуПокупателю.BILLEXTERNALID КАК BILL,
				   //АБС ВСТАВКА 34682 КОНЕЦ 
	               |	СчетНаОплатуПокупателю.Номер КАК Номер1
	               |ИЗ
	               |	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	               |ГДЕ
	               |	СчетНаОплатуПокупателю.Организация = &Организация
	               |	И СчетНаОплатуПокупателю.Дата >= &ДатаНач
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет УБЫВ";
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ДатаНач",НачалоГода(ТекущаяДата()));
	Т_Счета = Запрос.Выполнить().Выгрузить();
	Т_Счета.Колонки.Добавить("Номер");
	Для Каждого Стр Из Т_Счета Цикл
		Стр.Номер = СокрЛП(Стр.Номер1);
	   //АБС ВСТАВКА 34682  05.11.2013 13:02:01  Шамов
		Стр.FACTURENUM = СокрЛП(Стр.FACTURENUM);
		Стр.BILL = СокрЛП(Стр.BILL);
	   //АБС ВСТАВКА 34682 КОНЕЦ 
	КонецЦикла;
	

	Важность = УровеньЖурналаРегистрации.Информация;
	СтруктураВозврата = Новый Структура("ДанныеБиллинга,СозданныеДокументы");
	СозданныеДокументы.Очистить();
	СтруктураДокументов = Новый Структура("ДокументСчетНаОплату,ЗаказПокупателя, ДокументРеализацияТиУ, ДокументСФ, Перезаписан");
	//Создадим документы Счет на оплату покупателя
	//По каждой уникальной строке ТЗ создаем свой счет на оплату.
	//АБС Шамов
	//СтруктураПоиска = Новый Структура("FACTURENUM");
	//ТЗБиллинга=ДанныеБиллинга.Скопировать();
	//ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM");
	//ТЗСчетовНаОплату.Свернуть("FACTURENUM");
	//ЗаполненыБилл = Истина;
	//Для Каждого СтрокаДанных Из ДанныеБиллинга Цикл
	//	Если НЕ ЗначениеЗаполнено(СтрокаДанных.BILL) Тогда
	//		ЗаполненыБилл = Ложь;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	ТЗБиллинга=ДанныеБиллинга.Скопировать();
	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM,BILL");
	ТЗСчетовНаОплату.Свернуть("FACTURENUM,BILL");
	//Если ЗаполненыБилл Тогда
	//	ТЗБиллинга=ДанныеБиллинга.Скопировать();
	//	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"BILL");
	//	ТЗСчетовНаОплату.Свернуть("BILL");
	//Иначе
	//	ТЗБиллинга=ДанныеБиллинга.Скопировать();
	//	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM");
	//	ТЗСчетовНаОплату.Свернуть("FACTURENUM");
	//КонецЕсли;
	//\\АБС Шамов
	Сч = 0;
	Кол = ТЗСчетовНаОплату.Количество();
	Заголовок = "Обработка счетов";
	Для каждого СтрокаСчета Из ТЗСчетовНаОплату Цикл
		Сч = Сч+1;
		//ОбработкаПрерыванияПользователя();
		Если Сч/100 = Цел(Сч/100) Тогда
			//Сообщить("Обрабатывается "+Сч+" из "+Кол);
			ТекстСообщения = "Обрабатывается "+Сч+" из "+Кол;
			ЗаписьЖурналаРегистрации("Сообщение", Важность, , ,ТекстСообщения);
			//ОбщегоНазначения.Сообщение(ТекстСообщения);

		КонецЕсли;
		//Осуществим проверку, можно ли загружать данный счет -
		//проверка осуществляется по всем строкам счета если 
		//хотябы одна строка счета некорректна, весь счет не будет загружен
		
		НовыйДокумент =Ложь;
		
		
		//АБС Шамов
		//СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		
		//сначала найдем строки по FACTURENUM
		СтруктураПоиска = Новый Структура("FACTURENUM");
		СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		НайденныеСтроки = ТЗБиллинга.НайтиСтроки(СтруктураПоиска);
		ТекБилл = Неопределено;
		ИщемПоБилл = Истина;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если НЕ ЗначениеЗаполнено(Строка.BILL) Тогда
				ИщемПоБилл = Ложь;
				Прервать;
			КонецЕсли;
			Если ТекБилл = Неопределено Тогда
				ТекБилл = Строка.BILL;	
			Иначе
				Если ТекБилл <> Строка.BILL Тогда
					ИщемПоБилл = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИщемПоБилл Тогда
			СтруктураПоиска = Новый Структура("BILL");
			СтруктураПоиска.BILL = СтрокаСчета.BILL;
		Иначе
			СтруктураПоиска = Новый Структура("FACTURENUM");
			СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		КонецЕсли;
		//\\АБС Шамов
		НайденныеСтроки = ТЗБиллинга.НайтиСтроки(СтруктураПоиска);
		Если  НайденныеСтроки.Количество() =0 Тогда
			//Фатальная ошибка...
			//Сообщить("Ошибка!!! Строки с номером: "+СтруктураПоиска.FACTURENUM+" в ТЗ Биллинга не найдены!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		//Проверяем все найденные строки на возможность загрузки Счета на оплату.
		Отказ = Ложь;
		ОтказПоОшибке = Ложь;
		Для Каждого СтрокаБиллинга Из НайденныеСтроки Цикл
			Если Не (СтрокаБиллинга.Загружать И  не ЗначениеЗаполнено(СтрокаБиллинга.OPERATOR))	Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			Продолжить;
		КонецЦикла;	
		
		Если Отказ Тогда
			Продолжить;
			//Счет на оплату не создаем.
		КонецЕсли;
		
		Если НЕ НайденныеСтроки[0].СчетНаОплату.Пустая() Тогда
			//Документ уже существует, перезапишем его.
			ДокументСчет = НайденныеСтроки[0].СчетНаОплату.ПолучитьОбъект();
		Иначе
			
			//Создаем СчетНаОплату
			//
			НомерСФ = СокрЛП(НайденныеСтроки[0].FACTURENUM);
			ПрефиксСФ1 = СокрЛП(Организация.Префикс)+"B";
			НомерСФ1 = ПрефиксСФ1+СокрЛП(Прав(СокрЛП(НайденныеСтроки[0].FACTURENUM), 
			СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ1))); //11));  //АБС Коломиец 15396, 15825
			//АБС Шамов 33279
			Если ИспользоватьПрефикс Тогда
				НомерСчета = ПрефиксСФ1+СокрЛП(Прав(СокрЛП(НайденныеСтроки[0].BILL),
				СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ1)));
			Иначе
				НомерСчета = СокрЛП(СокрЛП(НайденныеСтроки[0].BILL));
			КонецЕсли;
			//\\АБС Шамов 33279

			//\\АБС Шамов 33279
			//АБС ИЗМЕНЕНИЕ 34682  05.11.2013 13:06:13  Шамов
			//СтрокаПоиска = Т_Счета.Найти(НомерСФ,"Номер");
			//Если СтрокаПоиска <>Неопределено Тогда
			//	НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
			//Иначе
			//	СтрокаПоиска = Т_Счета.Найти(НомерСФ1,"Номер"); 
			//	Если СтрокаПоиска <>Неопределено Тогда
			//		НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
			//	Иначе
			//		НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
			//	КонецЕсли;
			//КонецЕсли;
			
			//сначала проверим наличие старого счета с номером, сформированным по FACTURENUM
			//совпадающего с новым номером по BILL
			Если ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ИщемПоБилл Тогда
				ФормироватьНомерПоБилл = Истина;
				СтрокаПоиска = Т_Счета.Найти(НомерСчета, "Номер");
				Если СтрокаПоиска <>Неопределено Тогда
					Если СокрЛП(НайденныеСтроки[0].FACTURENUM) <> СокрЛП(СтрокаПоиска.FACTURENUM) Тогда
						//это НЕ ТОТ счет
						//при записи произойдет ошибка
						ФормироватьНомерПоБилл = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ФормироватьНомерПоБилл = Ложь;				
			КонецЕсли;
						
			СтрокаПоиска = Т_Счета.Найти(СокрЛП(НайденныеСтроки[0].BILL),"BILL");
			Если СтрокаПоиска <>Неопределено И ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ИщемПоБилл Тогда
				НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
			Иначе
				СтрокаПоиска = Т_Счета.Найти(СокрЛП(НайденныеСтроки[0].FACTURENUM),"FACTURENUM"); 
				Если СтрокаПоиска <>Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаПоиска.BILL) ИЛИ НЕ ИщемПоБилл ТОГДА
						НайдДокументСчетНаОплату = СтрокаПоиска.Счет;
					Иначе
						НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
					КонецЕсли;	
				Иначе
					НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			//АБС ИЗМЕНЕНИЕ 34682 КОНЕЦ 
			
			Если НайдДокументСчетНаОплату.Пустая() Тогда
				ДокументСчет  = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
				НовыйДокумент = Истина;
				
				
				
				
				ДокументСчет.Биллинг = Истина;
				ДокументСчет.абс_СуммаНДСБиллинг =НайденныеСтроки[0].СуммаНДС; 
				ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
				ДокументСчет.УчитыватьНДС = Истина;
				ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента; 
				ДокументСчет.FACTUREEXTERNALID =НайденныеСтроки[0].FACTURENUM;
				//АБС Шамов 33279 Замена
				//Если ИспользоватьПрефикс Тогда
				//	ДокументСчет.Номер  = НомерСФ1;
				//Иначе
				//	ДокументСчет.Номер  = НомерСФ;
				//КонецЕсли;
				Если ИщемПоБилл Тогда
					ДокументСчет.BILLEXTERNALID =НайденныеСтроки[0].BILL;
				ИНАЧЕ
					ДокументСчет.BILLEXTERNALID ="";
				КонецЕсли;
				Если ЗначениеЗаполнено(НайденныеСтроки[0].BILL) И ФормироватьНомерПоБилл Тогда
					ДокументСчет.Номер  = НомерСчета;
				Иначе
					Если ИспользоватьПрефикс Тогда
						ДокументСчет.Номер  = НомерСФ1;
					Иначе
						ДокументСчет.Номер  = НомерСФ;
					КонецЕсли;
				КонецЕсли;
				//\\АБС Шамов 33279 Замена
				
				ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
				ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
				ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
				ДокументСчет.Организация = Организация;
				ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
				Если ЗначениеЗаполнено(НайденныеСтроки[0].TypeSchet) Тогда
					ДокументСчет.ДополнениеКАдресуДоставки =НайденныеСтроки[0].TypeSchet;
				ИначеЕсли  ЗначениеЗаполнено(НайденныеСтроки[0].Комментарий) Тогда
					ДокументСчет.ДополнениеКАдресуДоставки =Лев(НайденныеСтроки[0].Комментарий,1);
				КонецЕсли;
				
				Если Найти(НайденныеСтроки[0].INCLTAX,"Да")>0 Тогда
					СуммаВключаетНДС = Истина;
				Иначе
					СуммаВключаетНДС = Ложь;
				КонецЕсли;
				
				Если ДокументСчет.Метаданные().ТабличныеЧасти.Найти("Менеджеры")<>Неопределено Тогда
					Если ДокументСчет.Менеджеры.Количество()=0 Тогда
						Строкаменеджеров = ДокументСчет.Менеджеры.Добавить();
						Строкаменеджеров.Описание = НайденныеСтроки[0].KURATOR;
					КонецЕсли;
				КонецЕсли;
				//Заполнение куратора
				Если ЗначениеЗаполнено(НайденныеСтроки[0].абс_Куратор) Тогда
					ДокументСчет.абс_Куратор = НайденныеСтроки[0].абс_Куратор;
				Иначе
					ДокументСчет.абс_Куратор = НайтиКуратора(СокрЛП(НайденныеСтроки[0].KURATOR));
				КонецЕсли;
				//Заполнение куратора
				
				
				ДокументСчет.СуммаВключаетНДС = СуммаВключаетНДС;
				Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
					ДокументСчет.КурсВзаиморасчетов =1;
				Иначе
					ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
				КонецЕсли;
				ДокументСчет.КратностьВзаиморасчетов = 1;
				
				ДокументСчет.Подразделение = НайденныеСтроки[0].ЦФО;  //АБС Коломиец 13129
				
				//Заполним ТЧ Услуги документа.
				Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
					НайдСтрокаУслуги = ДокументСчет.Услуги.найти(СтрокаУслуги.УникальныйИдентификаторЗаписи,"ИдСтроки");
					Если  НайдСтрокаУслуги = Неопределено Тогда
						НоваяСтрокаУслуг = ДокументСчет.Услуги.Добавить();
					Иначе
						НоваяСтрокаУслуг = НайдСтрокаУслуги;
					КонецЕсли;
					
					//НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное;
					Если ЗначениеЗаполнено(СтрокаУслуги.FULLNAMESERVISE) Тогда
						НоваяСтрокаУслуг.Содержание = СокрЛП(СтрокаУслуги.FULLNAMESERVISE);
					Иначе
						НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное; 
					КонецЕсли;
					
					НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
					НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура; 
					НоваяСтрокаУслуг.ЗаказПокупателя = СтрокаУслуги.ЗаказПокупателя;
					НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
					НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
					НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
					НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
					//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
					НоваяСтрокаУслуг.СуммаНДС = СтрокаУслуги.СуммаНДС;
					
					НоваяСтрокаУслуг.абс_ЦФУ = СтрокаУслуги.ЦФУ;
					НоваяСтрокаУслуг.абс_ЦФО = СтрокаУслуги.ЦФО;
					НоваяСтрокаУслуг.СтатьяОборотов = СтрокаУслуги.СтатьяОборотов;
					НоваяСтрокаУслуг.абс_НоменклатурнаяГруппа = СтрокаУслуги.НоменклатурнаяГруппа;
					
				КонецЦикла;
			КонецЕсли;		
		КонецЕсли;
		
		Попытка
			ДокументСчет.ПометкаУдаления = Ложь;
			Если НовыйДокумент Тогда
				ДокументСчет.Записать();
				//Состояние("Создан документ: "+ДокументСчет.Ссылка);
				ДокСсылка = ДокументСчет.Ссылка;
			Иначе
				ДокСсылка = ДокументСчет.Ссылка;
			КонецЕсли;
			
			СтрокаПоиска =  Т_Счета.Найти(ДокСсылка,"Счет");
			Если СтрокаПоиска=Неопределено Тогда
				НоваяСтрока = Т_Счета.Добавить();
				Новаястрока.Счет = ДокСсылка.Ссылка;
				НоваяСтрока.Номер = СокрЛП(ДокСсылка.Номер);
			КонецЕсли;	

		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		//СтруктураДокументов.ДокументСчетНаОплату = ДокСсылка;
		
		
		//Если документ записан создадим документ реализация ТиУ на основании данного Счета
		//Если  НовыйДокумент Тогда
		//	СоздатьРеализациюТиУ(ДокСсылка, СтруктураДокументов);
		//Иначе
		//	СтруктураДокументов.перезаписан = Истина;
		//	ПерезаписатьДокументы(ДокСсылка,СтруктураДокументов);
		//	
		//КонецЕсли;
		//
		НСоздДок = СозданныеДокументы.Добавить();
		НСоздДок.ДокументСчетНаОплату = ДокСсылка;
		//ЗаполнитьЗначенияСвойств(НСоздДок, СтруктураДокументов);		
	КонецЦикла;
	
	//Обновление колонки СчетНаОплату в таблице ДанныеБиллинга
	Таб = СозданныеДокументы.Скопировать();
	Таб.Свернуть("ДокументСчетНаОплату");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабСчетов.ДокументСчетНаОплату
	               |ПОМЕСТИТЬ ВТСчета
	               |ИЗ
	               |	&ТабСчетов КАК ТабСчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализацияТиУ,
	               |	ВТСчета.ДокументСчетНаОплату КАК ДокументСчетНаОплату,
	               |	СФ.Ссылка КАК ДокументСФ
	               |ИЗ
	               |	ВТСчета КАК ВТСчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ВТСчета.ДокументСчетНаОплату = РеализацияТоваровУслуг.абс_СчетНаОплатуПокупателю
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	               |			СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование.абс_СчетНаОплатуПокупателю КАК ДокументОснованиеабс_СчетНаОплатуПокупателю
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |		ГДЕ
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг) КАК СФ
	               |		ПО ВТСчета.ДокументСчетНаОплату = СФ.ДокументОснованиеабс_СчетНаОплатуПокупателю";
	Запрос.УстановитьПараметр("ТабСчетов",Таб);
	СозданныеДокументы = Запрос.Выполнить().Выгрузить();
	Сч = 0;
	Кол = СозданныеДокументы.Количество();
	мРубли = Константы.ВалютаРегламентированногоУчета.Получить();
	Для Каждого Стр Из СозданныеДокументы Цикл
		  Сч = Сч+1;
		  Если Сч/100 = Цел(Сч/100) Тогда
			  //Сообщить("Обрабатывается "+Сч+" из "+Кол);
			  ТекстСообщения = "Обрабатываются накладные и счет-фактуры "+Сч+" из "+Кол;
			  //ОбщегоНазначения.Сообщение(ТекстСообщения);
			  ЗаписьЖурналаРегистрации("Сообщение", Важность, , ,ТекстСообщения);

		  КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ДокументРеализацияТиУ) И ЗначениеЗаполнено(Стр.ДокументСФ) Тогда

		ИначеЕсли Не ЗначениеЗаполнено(Стр.ДокументРеализацияТиУ) И Не ЗначениеЗаполнено(Стр.ДокументСФ) Тогда
				СоздатьРеализациюТиУ(Стр,Неопределено,мРубли);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из СозданныеДокументы Цикл
		Если ЗначениеЗаполнено(Стр.ДокументСчетНаОплату) Тогда
			СтруктураОтбора = Новый Структура("FACTURENUM");
			СтруктураОтбора.Вставить("FACTURENUM",СокрЛП(Стр.ДокументСчетНаОплату.FACTUREEXTERNALID));
			НайденныеСтроки = ДанныеБиллинга.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайдСтрока Из НайденныеСтроки Цикл
				НайдСтрока.СчетНаОплату = Стр.ДокументСчетНаОплату;
				НайдСтрока.ДокументРеализацияТиУ = Стр.ДокументРеализацияТиУ; 
				НайдСтрока.ДокументСФ = Стр.ДокументСФ;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	
	
	
	СтруктураВозврата.Вставить("ДанныеБиллинга",ДанныеБиллинга); 
	СтруктураВозврата.Вставить("СозданныеДокументы",СозданныеДокументы);
	Возврат СтруктураВозврата;
КонецФункции

Функция НайтиДокументОснованиеКорректировки(Организация, НомерДокумента)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Номер = &Номер
	|	И РеализацияТоваровУслуг.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Номер"		, НомерДокумента);
	Запрос.УстановитьПараметр("Организация"	, Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	ИскатьДокументРасчетов = Ложь;
	
	Попытка 
		ГодРеализации = Число(Лев(НомерДокумента, 2));
		Если ГодРеализации < 11 Тогда
			ИскатьДокументРасчетов = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если ИскатьДокументРасчетов Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументРасчетовСКонтрагентом.Ссылка
		|ИЗ
		|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
		|ГДЕ
		|	ДокументРасчетовСКонтрагентом.Номер = &Номер
		|	И ДокументРасчетовСКонтрагентом.Организация = &Организация");
		
		Запрос.УстановитьПараметр("Номер"		, НомерДокумента);
		Запрос.УстановитьПараметр("Организация"	, Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Возврат Выборка.Ссылка;
			
		КонецЕсли;
	
	КонецЕсли;
	
	
	Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьОписаниеТипаСтрока(ДлинаСтроки)
	
	КС = Новый КвалификаторыСтроки(20);
	
	Массив = Новый Массив();
 	Массив.Добавить(Тип("Строка"));
	
	Возврат Новый ОписаниеТипов(Массив, , КС);
	
КонецФункции

Функция ПолучитьОписаниеТипаЧисло(ДлинаЦелЧасти, ДлинаДробЧасти = 0)	
		
	КЧ = Новый КвалификаторыЧисла(20);
	
	Массив = Новый Массив();
 	Массив.Добавить(Тип("Число"));
	
	Возврат Новый ОписаниеТипов(Массив, , КЧ);
	
КонецФункции

Процедура ЗапускБПиИзменениеСтатусов(ДокЛогЗагрузки) Экспорт
	
	СозданныеДокументы	= ДокЛогЗагрузки.СозданныеДокументы;
	Кол  =СозданныеДокументы.Количество();
	
	Для Каждого СтрокаТЧ Из СозданныеДокументы Цикл
		Сч = СтрокаТЧ.НомерСтроки;
		Если Сч/100 = Цел(Сч/100) Тогда
			
			ТекстСообщения = "Обрабатывается биллинг "+Сч+" из "+Кол+"; Статус Обработка Подготовка";
			ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
			
		КонецЕсли;
		
		
		
		ДокРеализация =СтрокаТЧ.ДокументРеализацияТиУ.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(ДокРеализация.абс_Статус) Тогда
			Попытка
				ДокРеализация.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
				ДокРеализация.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			ДокРеализация.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером;
			ДокРеализация.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;

		Попытка
			//ДокРеализация.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
			//ДокРеализация.Записать();
			//АБС Коломиец 12327+
			ДокРеализация.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
			ДокРеализация.Записать(РежимЗаписиДокумента.Проведение);
			
			СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокРеализация.Ссылка, "СчетФактураВыданный", Неопределено);
			
			//Если потерпели неудачу, то необходимо ввести новый документ 
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				СчетФактура = СчетФактура.ПолучитьОбъект();
				СчетФактура.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
			//АБС Коломиец 12327-	
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		Если Не ДокРеализация.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			Попытка
				ДокРеализация.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен;
				ДокРеализация.Записать(РежимЗаписиДокумента.Проведение);
				
				//АБС Коломиец 12327//проводим сч.ф. в Обработке принятых документов
				//СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокРеализация.Ссылка, "СчетФактураВыданный", Неопределено);
				//
				////Если потерпели неудачу, то необходимо ввести новый документ 
				//Если ЗначениеЗаполнено(СчетФактура) Тогда
				//	СчетФактура = СчетФактура.ПолучитьОбъект();
				//	СчетФактура.Записать(РежимЗаписиДокумента.Проведение);
				//КонецЕсли;	
			Исключение                                       
				Сообщить(ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

//Функция формирования таблицы по биллингу
//
Функция  СоздатьЗадолженностьМГ_МН(СтруктураПараметров) Экспорт
	СтруктураВозврата = Новый Структура;
	ОператорПоУмолчанию = СтруктураПараметров.Ссылка.Оператор;
	ДоговорОператораПоУмолчанию = СтруктураПараметров.Ссылка.ДоговорОператора;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ЗадолженностьМГ_МН) Тогда
		ЗадолженностьМГ_МН = СтруктураПараметров.ЗадолженностьМГ_МН.ПолучитьОбъект();
		ЗадолженностьМГ_МН.ОтражениеВУчете.Очистить();
	 Иначе
		 ЗадолженностьМГ_МН = Документы.абс_ЗадолженностьМГ_МН.СоздатьДокумент();
		 ЗадолженностьМГ_МН.Дата = СтруктураПараметров.Дата;
		 ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЗадолженностьМГ_МН, глЗначениеПеременной("глТекущийПользователь"));
		 ЗадолженностьМГ_МН.Организация = СтруктураПараметров.Организация;
	 КонецЕсли;
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.Контрагент,
	                |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.ДоговорКонтрагента,
	                |	ВЫБОР
	                |		КОГДА абс_ЛогЗагрузкиИзАСРДанныеБиллинга.INCLTAX ПОДОБНО ""%Да%""
	                |			ТОГДА абс_ЛогЗагрузкиИзАСРДанныеБиллинга.Сумма
	                |		ИНАЧЕ абс_ЛогЗагрузкиИзАСРДанныеБиллинга.Сумма + абс_ЛогЗагрузкиИзАСРДанныеБиллинга.СуммаНДС
	                |	КОНЕЦ КАК Сумма,
	                |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.Оператор КАК Оператор,
	                |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.ДоговорОператора,
					//АБС Шамов 33279
	                |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.BILL,
					//\\АБС Шамов 33279
	                |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.FACTURENUM,
	                |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.ДатаДокумента
	                |ИЗ
	                |	Документ.абс_ЛогЗагрузкиИзАСР.ДанныеБиллинга КАК абс_ЛогЗагрузкиИзАСРДанныеБиллинга
	                |ГДЕ
	                |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.Ссылка = &Ссылка
	                |	И абс_ЛогЗагрузкиИзАСРДанныеБиллинга.ДоговорОператора <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	                |	И абс_ЛогЗагрузкиИзАСРДанныеБиллинга.Оператор <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	 
	 Запрос.УстановитьПараметр("Ссылка", СтруктураПараметров.Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
		 СтрокаТЧ = ЗадолженностьМГ_МН.ОтражениеВУчете.Добавить();
		 СтрокаТЧ.СчетДт = СтруктураПараметров.Сч76_10_2;
		 СтрокаТЧ.СубконтоДт1 = Выборка.Контрагент;
		 СтрокаТЧ.СубконтоДт2 = Выборка.ДоговорКонтрагента;
		 
		 СтрокаТЧ.СчетКт = СтруктураПараметров.Сч76_10_1;
		 СтрокаТЧ.СубконтоКт1 = Выборка.Оператор;
		 СтрокаТЧ.СубконтоКт2 = Выборка.ДоговорОператора;
		 
		 
		 
		 СтрокаТЧ.Сумма = Выборка.Сумма;
		 СтрокаТЧ.НомерНакладной = Выборка.FACTURENUM;
		 //АБС Шамов 33279
		 //СтрокаТЧ.НомерСчетаНаОплату = Выборка.FACTURENUM; 
		 Если ЗначениеЗаполнено(Выборка.BILL) Тогда
			 СтрокаТЧ.НомерСчетаНаОплату = Выборка.BILL;  
		 Иначе
			 СтрокаТЧ.НомерСчетаНаОплату = Выборка.FACTURENUM;  			 
		 КонецЕсли;
		 //\\АБС Шамов 33279
		 СтрокаТЧ.ДатаДокумента = Выборка.ДатаДокумента;
	 КонецЦикла;
	 
	 
	 
	 Попытка
		 ЗадолженностьМГ_МН.Записать(РежимЗаписиДокумента.Проведение);
		 //Возврат СтруктураВозврата.Вставить("ЗадолженностьМГ_МН",ЗадолженностьМГ_МН.Ссылка);
		 Возврат ЗадолженностьМГ_МН.Ссылка;
	 Исключение
		 Сообщить(ОписаниеОшибки());
	 КонецПопытки;
	 
	 Возврат Документы.абс_ЗадолженностьМГ_МН.ПустаяСсылка();
 КонецФункции

//Функция формирования таблицы по биллингу
//
Функция  СоздатьЗаказы(Организация,СчетКасса,ДанныеБиллинга,СозданныеДокументы,ПериодРегистрации = '20120101') Экспорт
	ИспользоватьПрефикс = Организация.абс_ИспользоватьПрефиксВБиллинге;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ЗаказПокупателя.Контрагент,
	               |	ЗаказПокупателя.ДоговорКонтрагента,
	               |	ЗаказПокупателя.Ссылка КАК Ссылка,
	               |	ЗаказПокупателя.Номер,
	               |	ЗаказПокупателя.Заказы
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Организация = &Организация
	               |	И ЗаказПокупателя.ДоговорКонтрагента В(&ДоговораКонтрагентов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка УБЫВ";
				   
	Запрос.УстановитьПараметр("Организация",Организация); 
	Запрос.УстановитьПараметр("ДоговораКонтрагентов",ДанныеБиллинга.ВыгрузитьКолонку("ДоговорКонтрагента"));
	
	Т_Заказы = Запрос.Выполнить().Выгрузить();
	
	Важность = УровеньЖурналаРегистрации.Информация;
	СтруктураВозврата = Новый Структура("ДанныеБиллинга,СозданныеДокументы");
	СозданныеДокументы.Очистить();
	СтруктураДокументов = Новый Структура("ДокументСчетНаОплату,ЗаказПокупателя, ДокументРеализацияТиУ, ДокументСФ, Перезаписан");
	//Создадим документы Счет на оплату покупателя
	//По каждой уникальной строке ТЗ создаем свой счет на оплату.
	СтруктураПоиска = Новый Структура("ZAKAZ");
	
	ТЗСчетовНаОплату = ДанныеБиллинга.Скопировать(,"Контрагент,ДоговорКонтрагента, ZAKAZ");
	ТЗСчетовНаОплату.Свернуть("Контрагент,ДоговорКонтрагента, ZAKAZ");
	Сч = 0;
	Кол = ТЗСчетовНаОплату.Количество();
	Заголовок = "Обработка заказов";
	Для каждого СтрокаСчета Из ТЗСчетовНаОплату Цикл
		ДокументСчет = Неопределено;
		Сч = Сч+1;
		//ОбработкаПрерыванияПользователя();
		Если Сч/100 = Цел(Сч/100) Тогда
			//Сообщить("Обрабатывается "+Сч+" из "+Кол);
			ТекстСообщения = "Обрабатывается "+Сч+" из "+Кол;
			ЗаписьЖурналаРегистрации("Сообщение", Важность, , ,ТекстСообщения);
			//ОбщегоНазначения.Сообщение(ТекстСообщения);
			
		КонецЕсли;
		//Осуществим проверку, можно ли загружать данный счет -
		//проверка осуществляется по всем строкам счета если 
		//хотябы одна строка счета некорректна, весь счет не будет загружен
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Контрагент",СтрокаСчета.Контрагент);
		СтруктураПоиска.Вставить("ДоговорКонтрагента",СтрокаСчета.ДоговорКонтрагента);
		СтруктураПоиска.Вставить("ZAKAZ",СтрокаСчета.ZAKAZ);
		
		
		НайденныеСтроки = ДанныеБиллинга.НайтиСтроки(СтруктураПоиска);
		Если  НайденныеСтроки.Количество() =0 Тогда
			Продолжить;
		КонецЕсли;
		//Проверяем все найденные строки на возможность загрузки Счета на оплату.
		Отказ = Ложь;
		ОтказПоОшибке = Ложь;
		Для Каждого СтрокаБиллинга Из НайденныеСтроки Цикл
			Если НЕ СтрокаБиллинга.Загружать 	Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			Продолжить;
		КонецЦикла;	
		
		Если Отказ Тогда
			Продолжить;
			//Счет на оплату не создаем.
		КонецЕсли;
		
		Если НЕ НайденныеСтроки[0].ЗаказПокупателя.Пустая() Тогда
			СтрокаСоздДок = СозданныеДокументы.Найти(НайденныеСтроки[0].ЗаказПокупателя,"ЗаказПокупателя");
			
			//Документ уже существует, перезапишем его.
			Если СтрокаСоздДок = Неопределено Тогда
				ДокументСчет = НайденныеСтроки[0].ЗаказПокупателя.ПолучитьОбъект();
			Иначе
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Контрагент",СтрокаСчета.Контрагент);
				СтруктураПоиска.Вставить("ДоговорКонтрагента",СтрокаСчета.ДоговорКонтрагента);
				НайденныеЗаказы = Т_Заказы.НайтиСтроки(СтруктураПоиска);
				Для Каждого  СтрокаЗаказов Из НайденныеЗаказы Цикл
					Если ЗначениеЗаполнено(СтрокаСчета.ZAKAZ) Тогда
						Если Найти(СтрокаЗаказов.Заказы,СокрЛП(СтрокаСчета.ZAKAZ)) > 0 Тогда
							ДокументСчет = СтрокаЗаказов.Ссылка.ПолучитьОбъект();
							Прервать;
						КонецЕсли;
					Иначе
						Если Не ЗначениеЗаполнено(СтрокаЗаказов.Заказы) Тогда  
							ДокументСчет = СтрокаЗаказов.Ссылка.ПолучитьОбъект();
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если ДокументСчет = Неопределено Тогда
					ДокументСчет = Документы.ЗаказПокупателя.СоздатьДокумент();
					ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
					ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента;
				КонецЕсли;
			КонецЕсли;
			
			ДокументСчет.Биллинг = Истина;
			 
			ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
			ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
			ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
			//ДокументСчет.номер =СокрЛП(НайденныеСтроки[0].ZAKAZ);
			ДокументСчет.Заказы =НайденныеСтроки[0].ZAKAZ;
			ДокументСчет.Организация = Организация;
			ДокументСчет.УчитыватьНДС = Истина;                                
			ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
			
			Если ДокументСчет.Метаданные().ТабличныеЧасти.Найти("Менеджеры")<>Неопределено Тогда
				Если ДокументСчет.Менеджеры.Количество()=0 Тогда
					Строкаменеджеров = ДокументСчет.Менеджеры.Добавить();
					Строкаменеджеров.Описание = НайденныеСтроки[0].KURATOR;
				КонецЕсли;
			КонецЕсли;
			
			//Заполнение куратора
			//Заполнение куратора
			Если Найти(НайденныеСтроки[0].INCLTAX,"Да")>0 Тогда
				ДокументСчет.СуммаВключаетНДС = Истина;
			Иначе
				ДокументСчет.СуммаВключаетНДС = Ложь;
			КонецЕсли;
			
			
			Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
				ДокументСчет.КурсВзаиморасчетов =1;
			Иначе
				ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			ДокументСчет.КратностьВзаиморасчетов = 1;
			//Заполним ТЧ Услуги документа.
			
			ДокументСчетУслуги = ДокументСчет.Услуги.Выгрузить();
			//ДокументСчет.Услуги.Очистить();
			Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
				НайдСтрокаУслуги = ДокументСчетУслуги.найти(СтрокаУслуги.УникальныйИдентификаторЗаписи,"ИдСтроки");
				Если  НайдСтрокаУслуги = Неопределено Тогда
					НайдСтрокаУслуги = ДокументСчетУслуги.найти(СтрокаУслуги.Номенклатура.Наименование,"Содержание");
					Если  НайдСтрокаУслуги = Неопределено Тогда
						НоваяСтрокаУслуг = ДокументСчетУслуги.Добавить();
					Иначе
						НоваяСтрокаУслуг = НайдСтрокаУслуги;
					КонецЕсли;
				Иначе
					НоваяСтрокаУслуг = НайдСтрокаУслуги;
				КонецЕсли;
				
				НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное;
				НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
				НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура; 
				НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
				НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
				НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
				НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
				//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
				НоваяСтрокаУслуг.СуммаНДС = СтрокаУслуги.СуммаНДС;
				
				
			КонецЦикла;
			ДокументСчет.Услуги.Загрузить(ДокументСчетУслуги);
			НовыйДокумент =Ложь;
			
			
			//Документ
		Иначе
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Контрагент",СтрокаСчета.Контрагент);
			СтруктураПоиска.Вставить("ДоговорКонтрагента",СтрокаСчета.ДоговорКонтрагента);
			НайденныеЗаказы = Т_Заказы.НайтиСтроки(СтруктураПоиска);
			Для Каждого  СтрокаЗаказов Из НайденныеЗаказы Цикл
				Если ЗначениеЗаполнено(СтрокаСчета.ZAKAZ) Тогда
					Если Найти(СтрокаЗаказов.Заказы,СокрЛП(СтрокаСчета.ZAKAZ)) > 0 Тогда
						ДокументСчет = СтрокаЗаказов.Ссылка.ПолучитьОбъект();
						Прервать;
					КонецЕсли;
				Иначе
					Если Не ЗначениеЗаполнено(СтрокаЗаказов.Заказы) Тогда  
						ДокументСчет = СтрокаЗаказов.Ссылка.ПолучитьОбъект();
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ДокументСчет = Неопределено Тогда
				ДокументСчет = Документы.ЗаказПокупателя.СоздатьДокумент(); 
				ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
				ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента;
			КонецЕсли;
			
			
			ДокументСчет.Биллинг = Истина;
			
			ДокументСчет.УчитыватьНДС = Истина;
			 
			//ДокументСчет.Номер  =НайденныеСтроки[0].ZAKAZ;
			ДокументСчет.Заказы =НайденныеСтроки[0].ZAKAZ;
			ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
			ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
			ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
			ДокументСчет.Организация = Организация;
			ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
			
			Если Найти(НайденныеСтроки[0].INCLTAX,"Да")>0 Тогда
				СуммаВключаетНДС = Истина;
			Иначе
				СуммаВключаетНДС = Ложь;
			КонецЕсли;
			
			Если ДокументСчет.Метаданные().ТабличныеЧасти.Найти("Менеджеры")<>Неопределено Тогда
				Если ДокументСчет.Менеджеры.Количество()=0 Тогда
					Строкаменеджеров = ДокументСчет.Менеджеры.Добавить();
					Строкаменеджеров.Описание = НайденныеСтроки[0].KURATOR;
				КонецЕсли;
			КонецЕсли;
			
			ДокументСчет.СуммаВключаетНДС = СуммаВключаетНДС;
			Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
				ДокументСчет.КурсВзаиморасчетов =1;
			Иначе
				ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			ДокументСчет.КратностьВзаиморасчетов = 1;
			//Заполним ТЧ Услуги документа.
			Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
				НайдСтрокаУслуги = ДокументСчет.Услуги.найти(СтрокаУслуги.УникальныйИдентификаторЗаписи,"ИдСтроки");
				Если  НайдСтрокаУслуги = Неопределено Тогда
					НоваяСтрокаУслуг = ДокументСчет.Услуги.Добавить();
				Иначе
					НоваяСтрокаУслуг = НайдСтрокаУслуги;
				КонецЕсли;
				
				НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное;
				НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
				НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура; 
				НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
				НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
				НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
				НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
				//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
				НоваяСтрокаУслуг.СуммаНДС = СтрокаУслуги.СуммаНДС;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Попытка
			ДокументСчет.Записать();
			ДокСсылка = ДокументСчет.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		//
		НСоздДок = СозданныеДокументы.Добавить();
		НСоздДок.ЗаказПокупателя = ДокСсылка;
		
		Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
			СтрокаУслуги.ЗаказПокупателя = ДокСсылка;
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураВозврата.Вставить("ДанныеБиллинга",ДанныеБиллинга); 
	СтруктураВозврата.Вставить("СозданныеДокументы",СозданныеДокументы);
	Возврат СтруктураВозврата;
КонецФункции

//Функция проверки
Функция ПроверитьЗаполненностьСтрок(ДанныеБиллинга, ПроверятьБА = Ложь) Экспорт
	
	 Т_Возврата = Новый ТаблицаЗначений;
	 Т_Возврата.Колонки.Добавить("НомерСтроки");
	 Т_Возврата.Колонки.Добавить("ТекстСообщения");
	 Для Каждого СтрокаТЧ Из ДанныеБиллинга Цикл
		 ТекстСообщения = "";
		 Если Не ЗначениеЗаполнено(СтрокаТЧ.Контрагент) Тогда
			 ТекстСообщения = ТекстСообщения+"В строке №"+СтрокаТЧ.НомерСтроки+" не заполнен ""Контрагент""." + Символы.ПС; 
		 КонецЕсли;
		 Если Не ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			 ТекстСообщения = ТекстСообщения+"В строке №"+СтрокаТЧ.НомерСтроки+" не заполнен ""ДоговорКонтрагента""." + Символы.ПС; 
		 КонецЕсли;
		 Если Не ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
			 ТекстСообщения = ТекстСообщения+"В строке №"+СтрокаТЧ.НомерСтроки+" не заполнена ""СтавкаНДС""." + Символы.ПС; 
		 КонецЕсли;
		 Если Не ЗначениеЗаполнено(СтрокаТЧ.Валюта) Тогда
			 ТекстСообщения = ТекстСообщения+"В строке №"+СтрокаТЧ.НомерСтроки+" не заполнена ""Валюта""." + Символы.ПС; 
		 КонецЕсли;
		 Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаДокумента) Тогда
			 ТекстСообщения = ТекстСообщения+"В строке №"+СтрокаТЧ.НомерСтроки+" не заполнена ""ДатаДокумента""." + Символы.ПС; 
		 КонецЕсли;
		 Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			 ТекстСообщения = ТекстСообщения+"В строке №"+СтрокаТЧ.НомерСтроки+" не заполнена ""Номенклатура""." + Символы.ПС; 
		 КонецЕсли;   
		 
		 Если Не ЗначениеЗаполнено(СтрокаТЧ.УникальныйИдентификаторЗаписи) Тогда
			 ТекстСообщения = ТекстСообщения+"В строке №"+СтрокаТЧ.НомерСтроки+" не заполнен ""Уникальный идентификатор записи""." + Символы.ПС; 
		 КонецЕсли;
		 
		 Если ПроверятьБА  и (не ЗначениеЗаполнено(СтрокаТЧ.Оператор)) Тогда
			 Если Не ЗначениеЗаполнено(СтрокаТЧ.ЦФО) Тогда
				 ТекстСообщения = ТекстСообщения+"В строке №"+СтрокаТЧ.НомерСтроки+" не заполнено ""ЦФО""." + Символы.ПС; 
			 КонецЕсли;
			 Если Не ЗначениеЗаполнено(СтрокаТЧ.ЦФУ) Тогда
				 ТекстСообщения = ТекстСообщения+"В строке №"+СтрокаТЧ.НомерСтроки+" не заполнено ""ЦФУ""." + Символы.ПС; 
			 КонецЕсли;
			 Если Не ЗначениеЗаполнено(СтрокаТЧ.СтатьяОборотов) Тогда
				 ТекстСообщения = ТекстСообщения+"В строке №"+СтрокаТЧ.НомерСтроки+" не заполнена ""СтатьяОборотов""." + Символы.ПС; 
			 КонецЕсли;
			 Если Не ЗначениеЗаполнено(СтрокаТЧ.НоменклатурнаяГруппа) Тогда
				 ТекстСообщения = ТекстСообщения+"В строке №"+СтрокаТЧ.НомерСтроки+" не заполнена ""НоменклатурнаяГруппа""." + Символы.ПС; 
			 КонецЕсли;
			 
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			 НоваяСтрока = Т_Возврата.Добавить();
			 НоваяСтрока.НомерСтроки = СтрокаТЧ.НомерСтроки;
			 НоваяСтрока.ТекстСообщения = ТекстСообщения;
		 КонецЕсли;
		 
  
		 
	КонецЦикла;
	
	Возврат Т_Возврата;
	 
КонецФункции
//Функция проверки

//Заполнение аналитики по документам биллинга
// Структура аналитик: ЦФО, ЦФУ, Статья оборотов и СубконтоБУ и СубконтоНУ
Процедура ЗаполнениеАналитики(Организация, ДанныеБиллинга, СозданныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов,
	              |	НоменклатурныеГруппы.Ссылка КАК НоменклатурнаяГруппа
	              |ПОМЕСТИТЬ ВТ_НГ
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеНоменклатурыБюджетнымАналитикам КАК абс_СоответствиеНоменклатурыБюджетнымАналитикам
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	              |		ПО абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов.Наименование = НоменклатурныеГруппы.Наименование
	              |ГДЕ
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Организация = &Организация
	              |	И абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов <> ЗНАЧЕНИЕ(Справочник.СтатьиОборотовПоБюджетам.ПустаяСсылка)
	              |	И НоменклатурныеГруппы.абс_СтатусНоменклатурнойГруппы = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Номенклатура,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.абс_ТипКонтрагента,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Организация,
	              |	ВЫБОР
	              |		КОГДА абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	              |			ТОГДА ВТ_НГ.НоменклатурнаяГруппа
	              |		ИНАЧЕ абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа
	              |	КОНЕЦ КАК НоменклатурнаяГруппа,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.ЦФО,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.абс_ЦФУ
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеНоменклатурыБюджетнымАналитикам КАК абс_СоответствиеНоменклатурыБюджетнымАналитикам
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НГ КАК ВТ_НГ
	              |		ПО абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов = ВТ_НГ.СтатьяОборотов
	              |ГДЕ
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Организация = &Организация";
	ТаблицаСоответствия = Запрос.Выполнить().Выгрузить();
	//Заполнение аналитики в реализациях
	//ПроверкаНГ(ТаблицаСоответствия);    
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	абс_СоответствиеНоменклатурныхГруппИНоменклатуры.Номенклатура,
	              |	абс_СоответствиеНоменклатурныхГруппИНоменклатуры.НоменклатурнаяГруппа
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеНоменклатурныхГруппИНоменклатуры КАК абс_СоответствиеНоменклатурныхГруппИНоменклатуры
	              |ГДЕ
	              |	абс_СоответствиеНоменклатурныхГруппИНоменклатуры.Организация = &Организация
	              |	И абс_СоответствиеНоменклатурныхГруппИНоменклатуры.НоменклатурнаяГруппа.абс_СтатусНоменклатурнойГруппы = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)";
	ТаблицаСоответствияНГ = Запрос.Выполнить().Выгрузить();

	//ЛьготаПоНДС = Справочники.абс_ЛьготаПоНДС.НайтиПоНаименованию("услуги международн. связи инопартнерам (п.5 ст157)");
	
	//АБС+ Тупиков
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	абс_СоответствиеКонтрагентаЛьготеНДС.Контрагент,
	               |	абс_СоответствиеКонтрагентаЛьготеНДС.ЛьготаНДС
	               |ИЗ
	               |	РегистрСведений.абс_СоответствиеКонтрагентаЛьготеНДС КАК абс_СоответствиеКонтрагентаЛьготеНДС";
	ТаблицаСоответствияКонтрагентаЛьготеНДС = Запрос.Выполнить().Выгрузить();
	//АБС- Тупиков
	
	Сч = 0;
	Кол = СозданныеДокументы.Количество();
	Для Каждого СтрокаТЧ Из СозданныеДокументы Цикл
		Если НЕ ТипЗнч(СтрокаТЧ.ДокументРеализацияТиУ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Продолжить;
		КонецЕсли;
		
		//ОбработкаПрерыванияПользователя();
		Сч = Сч+1;
		Если Сч/100 = Цел(Сч/100) Тогда
			ТекстСообщения = "Обрабатываются реализации "+Сч+" из "+Кол;
			ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
			
		КонецЕсли;
		
		ОбСчет = СтрокаТЧ.ДокументРеализацияТиУ.ПолучитьОбъект();
		
		//Если ОбСчет.Проведен  Тогда
		//	Продолжить;
		//КонецЕсли;
		
		
		Для Каждого СтрокаТЧ_Услуги ИЗ ОбСчет.Услуги Цикл
			Номенклатура = СтрокаТЧ_Услуги.Номенклатура;
			ЗаказПокупателя =  СтрокаТЧ_Услуги.ЗаказПокупателя;
			
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура",Номенклатура);
			Отбор.Вставить("СчетНаОплату",СтрокаТЧ.ДокументСчетНаОплату);
			Отбор.Вставить("ЗаказПокупателя",СтрокаТЧ_Услуги.ЗаказПокупателя);
			
			ЦФО = "";
			ЦФУ = "";
			БюджетнаяСтатья = "";
			НоменклатурнаяГруппа = "";
			
				
				Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
					//СтрокаТЧ_Услуги.ЗаказПокупателя = СтрокаДБ.ЗаказПокупателя;
					ЗаказПокупателяУслуги = ЗаказПокупателя.Услуги;
					
					СтрокаЗаказПокупателяУслуги = ЗаказПокупателяУслуги.Найти(Номенклатура,"Номенклатура");
					Если Не СтрокаЗаказПокупателяУслуги = Неопределено Тогда
						ЦФО = СтрокаЗаказПокупателяУслуги.абс_ЦФО;
						Если ЗначениеЗаполнено(СтрокаЗаказПокупателяУслуги.абс_ЦФУ) Тогда
							ЦФУ = СтрокаЗаказПокупателяУслуги.абс_ЦФУ; 
						КонецЕсли;
						БюджетнаяСтатья = СтрокаЗаказПокупателяУслуги.СтатьяОборотов;
						НоменклатурнаяГруппа = СтрокаЗаказПокупателяУслуги.НоменклатурнаяГруппа;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ЦФО) Тогда
						ЦФО = ЗаказПокупателя.ЦФО;
					КонецЕсли;
					Если ЗначениеЗаполнено(ЗаказПокупателя.ЦФУ) Тогда
						ЦФУ = ЗаказПокупателя.ЦФУ; 
					КонецЕсли;
					Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
						БюджетнаяСтатья = ЗаказПокупателя.БюджетнаяСтатья;
					КонецЕсли;
				КонецЕсли;
				
				
				
				Если ЗначениеЗаполнено(ЦФО)
					и ЗначениеЗаполнено(ЦФУ)
					и ЗначениеЗаполнено(БюджетнаяСтатья) 
					и ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
					
					СтрокаТЧ_Услуги.абс_ЦФУ = ЦФУ;
					СтрокаТЧ_Услуги.абс_ЦФО = ЦФО;
					СтрокаТЧ_Услуги.СтатьяОборотов = БюджетнаяСтатья;
					
					//НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду(СокрЛП(""+СтрокаТЧ_Услуги.СтатьяОборотов));
					
					СтрокаТЧ_Услуги.СубконтоБУ = НоменклатурнаяГруппа;
					СтрокаТЧ_Услуги.СубконтоНУ = НоменклатурнаяГруппа;
					
				Иначе
					
					Отбор = Новый Структура();
					Отбор.Вставить("Номенклатура",СтрокаТЧ_Услуги.Номенклатура);
					
					Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа)Тогда
						СтрокаНГ = ТаблицаСоответствияНГ.Найти(Номенклатура,"Номенклатура");
						Если Не СтрокаНГ = Неопределено Тогда
							НоменклатурнаяГруппа = СтрокаНГ.НоменклатурнаяГруппа;  
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЦФУ) Тогда
						СтрокаТЧ_Услуги.абс_ЦФУ = ЦФУ;
						Отбор.Вставить("абс_ЦФУ",ЦФУ);
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ЦФО) Тогда
						ЦФО = //СтрокаТЧ_Услуги.абс_Куратор.ЦФО; 
						      ОбСчет.абс_Куратор.ЦФО;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЦФО) Тогда
						Отбор.Вставить("ЦФО",ЦФО);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ОбСчет.Контрагент.абс_ТипыКонтрагентов) Тогда
						Отбор.Вставить("абс_ТипКонтрагента",ОбСчет.Контрагент.абс_ТипыКонтрагентов);
					КонецЕсли;
					
					
					
					СтрокиБА = ТаблицаСоответствия.НайтиСтроки(Отбор);
					Если СтрокиБА.Количество() > 0 Тогда
						НайденнаяСтрока = СтрокиБА[0];
						
						
						Если НайденнаяСтрока<>Неопределено Тогда
							//Если Не ЗначениеЗаполнено( СтрокаТЧ.абс_ЦФУ)  Тогда
							//СтрокаТЧ.абс_ЦФО = НайденнаяСтрока.абс_ЦФО;
							Если Не ЗначениеЗаполнено(ЦФУ) Тогда
								ЦФУ = НайденнаяСтрока.абс_ЦФУ;  
							КонецЕсли;
							Если Не ЗначениеЗаполнено(ЦФО) Тогда
								ЦФО = НайденнаяСтрока.ЦФО;	 	
							КонецЕсли;
							//КонецЕсли;
							Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
								БюджетнаяСтатья = НайденнаяСтрока.СтатьяОборотов;	 	
							КонецЕсли;
							
							Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
								НоменклатурнаяГруппа = НайденнаяСтрока.НоменклатурнаяГруппа;	 	
							КонецЕсли;   
							
							СтрокаТЧ_Услуги.абс_ЦФУ = ЦФУ;
							СтрокаТЧ_Услуги.абс_ЦФО = ЦФО;
							СтрокаТЧ_Услуги.СтатьяОборотов = БюджетнаяСтатья;
							
							СтрокаТЧ_Услуги.СубконтоБУ = НоменклатурнаяГруппа;
							СтрокаТЧ_Услуги.СубконтоНУ = НоменклатурнаяГруппа;
						КонецЕсли; 
						
					ИначеЕсли ЗначениеЗаполнено(ОбСчет.Контрагент.абс_ТипыКонтрагентов) Тогда
						Отбор.Удалить("абс_ТипКонтрагента");
						СтрокиБА = ТаблицаСоответствия.НайтиСтроки(Отбор);
						Если СтрокиБА.Количество() > 0 Тогда
							НайденнаяСтрока = СтрокиБА[0];
							
							
							Если НайденнаяСтрока<>Неопределено Тогда
								//Если Не ЗначениеЗаполнено( СтрокаТЧ.абс_ЦФУ)  Тогда
								//СтрокаТЧ.абс_ЦФО = НайденнаяСтрока.абс_ЦФО;
								Если Не ЗначениеЗаполнено(ЦФУ) Тогда
									ЦФУ = НайденнаяСтрока.абс_ЦФУ;  
								КонецЕсли;
								Если Не ЗначениеЗаполнено(ЦФО) Тогда
									ЦФО = НайденнаяСтрока.ЦФО;	 	
								КонецЕсли;
								//КонецЕсли;
								Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
									БюджетнаяСтатья = НайденнаяСтрока.СтатьяОборотов;	 	
								КонецЕсли;
								
								Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
									НоменклатурнаяГруппа = НайденнаяСтрока.НоменклатурнаяГруппа;	 	
								КонецЕсли;   
								
								СтрокаТЧ_Услуги.абс_ЦФУ = ЦФУ;
								СтрокаТЧ_Услуги.абс_ЦФО = ЦФО;
								СтрокаТЧ_Услуги.СтатьяОборотов = БюджетнаяСтатья;
								
								СтрокаТЧ_Услуги.СубконтоБУ = НоменклатурнаяГруппа;
								СтрокаТЧ_Услуги.СубконтоНУ = НоменклатурнаяГруппа;
								
							КонецЕсли; 
							
						Иначе
							
							НайденнаяСтрока = ТаблицаСоответствия.Найти(Номенклатура,"Номенклатура");
							Если Не ЗначениеЗаполнено(ЦФО) Тогда
								ЦФО = СтрокаТЧ_Услуги.абс_Куратор.ЦФО;	 
							КонецЕсли;
							
							Если НайденнаяСтрока<>Неопределено Тогда
								//Если Не ЗначениеЗаполнено( СтрокаТЧ.абс_ЦФУ)  Тогда
								//СтрокаТЧ.абс_ЦФО = НайденнаяСтрока.абс_ЦФО;
								Если Не ЗначениеЗаполнено(ЦФУ) Тогда
									ЦФУ = НайденнаяСтрока.абс_ЦФУ;	 
								КонецЕсли;
								
								Если Не ЗначениеЗаполнено(ЦФО) Тогда
									ЦФО = НайденнаяСтрока.ЦФО;	 	
								КонецЕсли;
								//КонецЕсли;
								Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
									БюджетнаяСтатья = НайденнаяСтрока.СтатьяОборотов;	 	
								КонецЕсли;
								
								Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
									НоменклатурнаяГруппа = НайденнаяСтрока.НоменклатурнаяГруппа;	 	
								КонецЕсли;
								
								//Если Не ЗначениеЗаполнено(СтрокаТЧ.абс_ЦФО) Тогда
								//	СтрокаТЧ.абс_ЦФО =НайденнаяСтрока.абс_ЦФО ;	 
								//КонецЕсли;  
								
							КонецЕсли; 
							
							//Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) и
							//	ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
							//	НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(""+БюджетнаяСтатья,Истина);
							//КонецЕсли;
							
							СтрокаТЧ_Услуги.абс_ЦФУ = ЦФУ;
							СтрокаТЧ_Услуги.абс_ЦФО = ЦФО;
							СтрокаТЧ_Услуги.СтатьяОборотов = БюджетнаяСтатья;
							СтрокаТЧ_Услуги.СубконтоБУ = НоменклатурнаяГруппа;
							СтрокаТЧ_Услуги.СубконтоНУ = НоменклатурнаяГруппа;
						КонецЕсли;	
					Иначе
						
						
						
						
						НайденнаяСтрока = ТаблицаСоответствия.Найти(СтрокаТЧ_Услуги.Номенклатура,"Номенклатура");
						Если Не ЗначениеЗаполнено(ЦФО) Тогда
							ЦФО = СтрокаТЧ_Услуги.абс_Куратор.ЦФО;	 
						КонецЕсли;
						
						Если НайденнаяСтрока<>Неопределено Тогда
							//Если Не ЗначениеЗаполнено( СтрокаТЧ.абс_ЦФУ)  Тогда
							//СтрокаТЧ.абс_ЦФО = НайденнаяСтрока.абс_ЦФО;
							Если Не ЗначениеЗаполнено(ЦФУ) Тогда
								ЦФУ = НайденнаяСтрока.абс_ЦФУ;	 
							КонецЕсли;
							
							Если Не ЗначениеЗаполнено(ЦФО) Тогда
								ЦФО = НайденнаяСтрока.ЦФО;	 	
							КонецЕсли;
							//КонецЕсли;
							Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
								БюджетнаяСтатья = НайденнаяСтрока.СтатьяОборотов;	 	
							КонецЕсли;
							
							Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
								НоменклатурнаяГруппа = НайденнаяСтрока.НоменклатурнаяГруппа;	 	
							КонецЕсли;
							
							//Если Не ЗначениеЗаполнено(СтрокаТЧ.абс_ЦФО) Тогда
							//	СтрокаТЧ.абс_ЦФО =НайденнаяСтрока.абс_ЦФО ;	 
							//КонецЕсли;  
							
						КонецЕсли; 
						
						//Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) и
						//	ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
						//	НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(""+БюджетнаяСтатья,Истина);
						//КонецЕсли;
						
						СтрокаТЧ_Услуги.абс_ЦФУ = ЦФУ;
						СтрокаТЧ_Услуги.абс_ЦФО = ЦФО;
						СтрокаТЧ_Услуги.СтатьяОборотов = БюджетнаяСтатья;
						СтрокаТЧ_Услуги.СубконтоБУ = НоменклатурнаяГруппа;
						СтрокаТЧ_Услуги.СубконтоНУ = НоменклатурнаяГруппа;
					КонецЕсли;
				КонецЕсли;
				
				//АБС+ Тупиков
				Если СтрокаТЧ_Услуги.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС ИЛИ СтрокаТЧ_Услуги.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					
					НайденнаяСтрока = ТаблицаСоответствияКонтрагентаЛьготеНДС.Найти(ОбСчет.Контрагент, "Контрагент");					
					Если НайденнаяСтрока = Неопределено Тогда
						Если СтрокаТЧ_Услуги.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("10000000715") Тогда
							ЛьготаПоНДС = Справочники.абс_ЛьготаПоНДС.НайтиПоНаименованию("место услуги (пп2, п.1, ст.148 НК РФ)");
						Иначе
							ЛьготаПоНДС = Справочники.абс_ЛьготаПоНДС.НайтиПоНаименованию("услуги международн. связи инопартнерам (п.5 ст157)");
						КонецЕсли;
					Иначе
						//АБС ВСТАВКА 37629  31.01.2014 17:42:40  Тупиков
						Если СтрокаТЧ_Услуги.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("10000000715") Тогда
							ЛьготаПоНДС = Справочники.абс_ЛьготаПоНДС.НайтиПоКоду("1010812");
						Иначе
							ЛьготаПоНДС = НайденнаяСтрока.ЛьготаПоНДС;
						КонецЕсли;						
						//АБС ВСТАВКА 37629 КОНЕЦ 
					КонецЕсли;
					
					СтрокаТЧ_Услуги.абс_ЛьготаПоНДС = ЛьготаПоНДС;
					
				КонецЕсли;
				//АБС- Тупиков				
			
			КонецЦикла;
			
			//АБС ВСТАВКА 37648  20.03.2014 Чалавиев
			Если ОбСчет.Услуги.Количество() > 0 Тогда
				ОбСчет.Подразделение = ОбСчет.Услуги[0].абс_ЦФО;
			КонецЕсли;
			//АБС ВСТАВКА 37648  20.03.2014 Чалавиев
		ОбСчет.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ОбСчет.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла; 
	
	
	
КонецПроцедуры

Процедура ПроверкаНГ(ТаблицаСоотв)
	
	//Для Каждого СтрТЧ Из ТаблицаСоотв Цикл
	//	Если Не ЗначениеЗаполнено(СтрТЧ.НоменклатурнаяГруппа) Тогда
	//		Если ЗначениеЗаполнено(СтрТЧ.СтатьяОборотов) Тогда
	//			НГ = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(""+СтрТЧ.СтатьяОборотов,Истина);
	//			//Если Не ЗначениеЗаполнено(НГ) или НГ.ЭтоГруппа Тогда
	//			//	НомГруппа = Справочники.НоменклатурныеГруппы.СоздатьЭлемент();
	//			//	НомГруппа.Наименование = СтрТЧ.СтатьяОборотов.Наименование;
	//			//	НомГруппа.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
	//			//	НомГруппа.Родитель =Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001"); 
	//			//	НомГруппа.Записать();
	//			//	
	//			//	НГ = НомГруппа.Ссылка;
	//			//	
	//			//	Сообщить("Создана НГ "+НГ);
	//			//	
	//			//КонецЕсли;
	//			СтрТЧ.НоменклатурнаяГруппа = НГ;
	//		Иначе
	//			//Состояние("все хорошо!!!");
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;	
КонецПроцедуры
//\\Заполнение аналитики по документам биллинга

Процедура ПерезаписатьДокументы(СтрокаТЧ, СтруктураДокументов = Неопределено)
	
	ДокСсылка = СтрокаТЧ.ДокументСчетНаОплату;
	
	Если НЕ СтрокаТЧ.ДокументРеализацияТиУ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка И
		ЗначениеЗаполнено(СтрокаТЧ.ДокументРеализацияТиУ.абс_Статус)  Тогда
		Возврат;
	КонецЕсли; 
	
	ДокРеализацияТиУ =  СтрокаТЧ.ДокументРеализацияТиУ.Ссылка.ПолучитьОбъект();
	ДокРеализацияТиУ.ПометкаУдаления = Ложь;
	ДокРеализацияТиУ.Услуги.Очистить();
	ДокРеализацияТиУ.Дата = ДокСсылка.Дата;
	//АБС Шамов
	Если ЗначениеЗаполнено(ДокСсылка.FACTUREEXTERNALID) Тогда
		ИспользоватьПрефикс = ДокСсылка.Организация.абс_ИспользоватьПрефиксВБиллинге;
		Если ИспользоватьПрефикс Тогда
			ПрефиксСФ = СокрЛП(ДокСсылка.Организация.Префикс)+"B";
			НомерСФ = ПрефиксСФ+СокрЛП(Прав(СокрЛП(ДокСсылка.FACTUREEXTERNALID), //11));
			СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ)));   //АБС Коломиец 15396, 15825
		Иначе
			НомерСФ = СокрЛП(СокрЛП(ДокСсылка.FACTUREEXTERNALID));
		КонецЕсли;
		ДокРеализацияТиУ.Номер = НомерСФ;
	КонецЕсли;
	//\\АБС Шамов
	ДокРеализацияТиУ.Заполнить(ДокСсылка);
	//АБС+ Тупиков 13298
	ДокРеализацияТиУ.ОтражатьВУправленческомУчете = Истина;
	ДокРеализацияТиУ.ОтражатьВБухгалтерскомУчете = Истина;
	ДокРеализацияТиУ.ОтражатьВНалоговомУчете = Истина;
	//АБС- Тупиков
	ДокРеализацияТиУ.Сделка = ДокСсылка;
	ДокРеализацияТиУ.КурсВзаиморасчетов =ДокСсылка.КурсВзаиморасчетов;
	ДокРеализацияТиУ.КратностьВзаиморасчетов =ДокСсылка.КратностьВзаиморасчетов;
	ДокРеализацияТиУ.ДополнениеКАдресуДоставки = ДокСсылка.ДополнениеКАдресуДоставки;
	ДокРеализацияТиУ.абс_Куратор  = ДокСсылка.абс_Куратор;
	Если Не ДокРеализацияТиУ.ДоговорКонтрагента.абс_Подключения Тогда
		ДокРеализацияТиУ.ДокументыРасчетовСКонтрагентом.Очистить();
	КонецЕсли;
	Попытка
		ДокРеализацияТиУ.ПометкаУдаления = Ложь;
		ДокРеализацияТиУ.ttk_ТипБиллинга = ДокСсылка.ttk_ТипБиллинга;
		ДокРеализацияТиУ.Записать();
		СтрокаТЧ.ДокументРеализацияТиУ =ДокРеализацияТиУ.Ссылка; 
		//Сообщить("Документ "+ДокРеализацияТиУ.Ссылка + " Перезаписан! ")	;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Если ЗначениеЗаполнено(СтрокаТЧ.ДокументСФ.Ссылка) Тогда
		
		ДокСФ =  СтрокаТЧ.ДокументСФ.Ссылка.ПолучитьОбъект();
		//АБС ВСТАВКА 34682  05.11.2013 11:35:23  Шамов
		ДокСФ.Номер = ДокРеализацияТиУ.Ссылка.Номер;
		//АБС ВСТАВКА 34682 КОНЕЦ 
		ДокСФ.Дата = ДокРеализацияТиУ.Ссылка.Дата;
		ДокСФ.ДатаВыставления  = ДокРеализацияТиУ.Ссылка.Дата;
		ДокСФ.Выставлен = Истина;

		ДокСФ.ДокументыОснования.Очистить();
		ДокСФ.Заполнить(ДокРеализацияТиУ.Ссылка);
		Попытка
			ДокСФ.ПометкаУдаления = Ложь;
			ДокСФ.Записать();
			СтрокаТЧ.ДокументСФ =ДокСФ.Ссылка;
			//Сообщить("Документ "+ДокСФ.Ссылка + " Перезаписан! ")	;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьРеализациюТиУ(СтрокаТЧ, СтруктураДокументов = Неопределено,мРубли)
	
	ДокСсылка = СтрокаТЧ.ДокументСчетНаОплату;

	ДокРеализацияТиУ = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	ДокРеализацияТиУ.Дата = ДокСсылка.Дата;
	ДокРеализацияТиУ.Заполнить(ДокСсылка);
	//АБС+ Тупиков 13298
	ДокРеализацияТиУ.ОтражатьВУправленческомУчете = Истина;
	ДокРеализацияТиУ.ОтражатьВБухгалтерскомУчете = Истина;
	ДокРеализацияТиУ.ОтражатьВНалоговомУчете = Истина;
	//АБС- Тупиков 
	ДокРеализацияТиУ.Сделка = ДокСсылка;
	ДокРеализацияТиУ.ДополнениеКАдресуДоставки = ДокСсылка.ДополнениеКАдресуДоставки;
	ДокРеализацияТиУ.абс_Куратор  = ДокСсылка.абс_Куратор;
    //Заполнение куратора в реализации
	
	//
	//АБС Шамов	
	//Если ЗначениеЗаполнено(ДокСсылка.FACTUREEXTERNALID) Тогда
	//	ДокРеализацияТиУ.Номер = ДокСсылка.Номер;
	//КонецЕсли;
	Если ЗначениеЗаполнено(ДокСсылка.FACTUREEXTERNALID) Тогда
		ИспользоватьПрефикс = ДокСсылка.Организация.абс_ИспользоватьПрефиксВБиллинге;
		Если ИспользоватьПрефикс Тогда
			ПрефиксСФ = СокрЛП(ДокСсылка.Организация.Префикс)+"B";
			НомерСФ = ПрефиксСФ+СокрЛП(Прав(СокрЛП(ДокСсылка.FACTUREEXTERNALID), //11));
			СтрДлина(Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Номер) - СтрДлина(ПрефиксСФ)));   //АБС Коломиец 15396, 15825
		Иначе
			НомерСФ = СокрЛП(СокрЛП(ДокСсылка.FACTUREEXTERNALID));
		КонецЕсли;
		ДокРеализацияТиУ.Номер = НомерСФ;
	КонецЕсли;
	//\\АБС Шамов
	
	//АБС  установка курса
	//Если  ДокРеализацияТиУ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643") Тогда
	//	ДокРеализацияТиУ.КурсВзаиморасчетов =1;
	//Иначе
	//	ДокРеализацияТиУ.КурсВзаиморасчетов = ПолучитьКурс(ДокСсылка.Дата, ДокРеализацияТиУ.ВалютаДокумента);
	//КонецЕсли;
	//ДокРеализацияТиУ.КратностьВзаиморасчетов = 1;
	
	ДокРеализацияТиУ.КурсВзаиморасчетов =ДокСсылка.КурсВзаиморасчетов;
	ДокРеализацияТиУ.КратностьВзаиморасчетов = 1;

	//АБС  установка курса
	//АБС 3126
	Если Не ДокРеализацияТиУ.ДоговорКонтрагента.абс_Подключения Тогда
		ДокРеализацияТиУ.ДокументыРасчетовСКонтрагентом.Очистить();
	КонецЕсли;
	//Если ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) Тогда
	//	СтруктураОтбора = Новый Структура;
	 //	СтруктураОтбора.Вставить("Номенклатура",СтрокаТЧ.Номенклатура);
	 //	//СтруктураОтбора.Вставить("ЗаказПокупателя",СтрокаТЧ.ЗаказПокупателя);
	 //   МассСтрок = ДокРеализацияТиУ.Услуги.НайтиСтроки(СтруктураОтбора);
	 //   Для Каждого СтрПоиска Из МассСтрок Цикл
	 //   	СтрПоиска.ЗаказПокупателя = СтрокаТЧ.ЗаказПокупателя;
	 //   	Если ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя.ЦФО) Тогда
	 //   		СтрПоиска.абс_ЦФО =  СтрокаТЧ.ЗаказПокупателя.ЦФО;
	 //   	КонецЕсли;
	 //   	Если ЗначениеЗаполнено(СтрокаТЧ.ЦФУ) Тогда
	 //   		СтрПоиска.абс_ЦФУ =  СтрокаТЧ.ЦФУ;
	 //   	КонецЕсли;
	 //   	Если ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя.БюджетнаяСтатья) Тогда
	 //   	СтрПоиска.СтатьяОборотов = СтрокаТЧ.ЗаказПокупателя.БюджетнаяСтатья;
	 //   	КонецЕсли;
	 //   КонецЦикла;
	
////	 КонецЕсли;
	 
	//АБС 3126
	
	// АБС ВСТАВКА Фролов 13129
	ДокРеализацияТиУ.ДокументыРасчетовСКонтрагентом.Очистить();
	// АБС ВСТАВКА Фролов 13129 КОНЕЦ
			
	Попытка
		ДокРеализацияТиУ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
		ДокРеализацияТиУ.ttk_ТипБиллинга = ДокСсылка.ttk_ТипБиллинга;
		ДокРеализацияТиУ.Записать(РежимЗаписиДокумента.Запись);
		//+++ Григорьев Д.В. (Метки ППД)
		// Установим новую метку "Загружено из биллинга"
		НоваяМетка = РегистрыСведений.абс_МеткаППД.СоздатьМенеджерЗаписи();
		НоваяМетка.Документ = ДокРеализацияТиУ.Ссылка;
		НоваяМетка.Метка = Перечисления.абс_МеткаППД.ЗагруженоИзБиллинга;
		НоваяМетка.Прочитать();
		Если Не НоваяМетка.Выбран() Тогда
			НоваяМетка.Документ = ДокРеализацияТиУ.Ссылка;
			НоваяМетка.Метка = Перечисления.абс_МеткаППД.ЗагруженоИзБиллинга;
			НоваяМетка.Дата = ДокРеализацияТиУ.Дата;
			НоваяМетка.Ответственный = глЗначениеПеременной("глТекущийПользователь");
			//НоваяМетка.Комментарий = "Установлена метка ";
		КонецЕсли;		
		НоваяМетка.Записать();
		//--- Григорьев Д.В. (Метки ППД)		
		СтрокаТЧ.ДокументРеализацияТиУ =ДокРеализацияТиУ.Ссылка; 
		//Сообщить("Документ "+ДокРеализацияТиУ.Ссылка + " Записан! ");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	//СтруктураДокументов.ДокументРеализацияТиУ = ДокРеализацияТиУ.Ссылка;
	Если Не ЗначениеЗаполнено(ДокРеализацияТиУ.Ссылка) Тогда
		возврат;
	КонецЕсли;	
	
	//Попытаемся найти счет фактуру
	СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокРеализацияТиУ.Ссылка, "СчетФактураВыданный", Неопределено);
	
	ОбъектСчетаФактуры = Неопределено;
	Если Не ЗначениеЗаполнено(мРубли) Тогда	
		мРубли = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (Не ЗначениеЗаполнено(СчетФактура)) И ЗначениеЗаполнено(ДокРеализацияТиУ.Ссылка.ДоговорКонтрагента) Тогда
		//Вводим новый документ на основании нашего
		Если ДокРеализацияТиУ.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <>мРубли И
			Не ДокРеализацияТиУ.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			возврат;
		КонецЕсли;	
		ОбъектСчетаФактуры = Документы["СчетФактураВыданный"].СоздатьДокумент();
		// Если установлен отбор по виду счета-фактуры (на реализацию/на аванс...) - устанавливаем его в новом документе
		ОбъектСчетаФактуры.Заполнить(ДокРеализацияТиУ.Ссылка);
		ОбъектСчетаФактуры.Номер = ДокРеализацияТиУ.Ссылка.Номер;
		ОбъектСчетаФактуры.Дата  = ДокРеализацияТиУ.Ссылка.Дата;
		ОбъектСчетаФактуры.ДатаВыставления  = ДокРеализацияТиУ.Ссылка.Дата;
		ОбъектСчетаФактуры.Выставлен = Истина;

		ОбъектСчетаФактуры.ОбменДанными.Загрузка = Истина;
		
		// Откроем форму для редактирования счета фактуры
		ОбъектСчетаФактуры.Записать();
		СтрокаТЧ.ДокументСФ =ОбъектСчетаФактуры.Ссылка;
		//СтруктураДокументов.ДокументСФ = ОбъектСчетаФактуры.Ссылка;
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьКурс(Дата, Валюта)
	Отбор=Новый Структура("Валюта");
	Отбор.Валюта = Валюта; 
	ПоследняяЗапись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата,Отбор);
	Если ПоследняяЗапись.Количество()>0 Тогда
		Возврат ПоследняяЗапись.Курс;
	Иначе
		Возврат 1;
	КонецЕсли
КонецФункции

Функция НайтиКуратора(НаименованиеКуратора)
	Найд = Справочники.абс_Кураторы.НайтиПоНаименованию(НаименованиеКуратора,Истина);
	Если Найд.Пустая() Тогда
		НовКуратор = Справочники.абс_Кураторы.СоздатьЭлемент();
		НовКуратор.Наименование = НаименованиеКуратора;
		НовКуратор.УстановитьНовыйКод();
		НовКуратор.Записать();
		Найд = НовКуратор.Ссылка;
	КонецЕсли;
	
	Возврат Найд.Ссылка;
КонецФункции

//Процедура выполнения на сервере произвольного кода
//
Процедура ВыполнитьКодНаСервере(ТекстМодуля,СтруктураПараметров = Неопределено, СтруктураЗапросов = Неопределено, ДопПараметры = Неопределено) Экспорт
	Выполнить(ТекстМодуля);
КонецПроцедуры

// Процедуры и функции для распознавания
Функция ПолучитьТаблицуНакладных(СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.МассивБанкСчетов.Количество()>0 Тогда
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	абс_ВзаиморасчетыПоДокументамОстатки.Контрагент,
	              |	абс_ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
	              |	абс_ВзаиморасчетыПоДокументамОстатки.Документ КАК Накладная,
	              |	абс_ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток КАК СуммаДокумента,
	              |	абс_ВзаиморасчетыПоДокументамОстатки.Документ.ВалютаДокумента КАК ВалютаДокумента
	              |ИЗ
	              |	РегистрНакопления.абс_ВзаиморасчетыПоДокументам.Остатки(
	              |			,
	              |			(НЕ Документ ССЫЛКА Документ.абс_Платежка)
	              |				И ВЫБОР
	              |					КОГДА Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	              |						ТОГДА Документ.абс_СчетНаОплатуПокупателю.СтруктурнаяЕдиница В (&МассивБанкСчетов)
	              |					ИНАЧЕ ИСТИНА
	              |				КОНЕЦ) КАК абс_ВзаиморасчетыПоДокументамОстатки";
		
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		|	абс_ВзаиморасчетыПоДокументамОстатки.Контрагент,
		|	абс_ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
		|	абс_ВзаиморасчетыПоДокументамОстатки.Документ КАК Накладная,
		|	абс_ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток КАК СуммаДокумента,
		|	абс_ВзаиморасчетыПоДокументамОстатки.Документ.ВалютаДокумента КАК ВалютаДокумента
		|ИЗ
		|	РегистрНакопления.абс_ВзаиморасчетыПоДокументам.Остатки(
		|			,
		|			(НЕ Документ ССЫЛКА Документ.абс_Платежка)
		|				) КАК абс_ВзаиморасчетыПоДокументамОстатки";
		
		
		
	КонецЕсли;
Запрос.УстановитьПараметр("ДатаНач",НачалоДня(СтруктураПараметров.ДатаНач));
Запрос.УстановитьПараметр("ДатаКон",КонецДня(СтруктураПараметров.ДатаКон));
//Запрос.УстановитьПараметр("Организация",СтруктураПараметров.Организация);
//Запрос.УстановитьПараметр("МассивСчетов",СтруктураПараметров.МассивСчетов);
Запрос.УстановитьПараметр("МассивБанкСчетов",СтруктураПараметров.МассивБанкСчетов);
Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьТаблицуОплат(СтруктураПараметров) Экспорт
Запрос = Новый Запрос;
Если СтруктураПараметров.МассивБанкСчетов.Количество()>0 Тогда
	Запрос.Текст ="ВЫБРАТЬ
	              |	абс_ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
	              |	абс_ВзаиморасчетыПоДокументамОстатки.Контрагент,
	              |	абс_ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаДокумента,
	              |	-ЕСТЬNULL(абс_ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток, 0) КАК СуммаДокумента,
	              |	абс_ВзаиморасчетыПоДокументамОстатки.Документ КАК ДокументОплаты,
	              |	абс_ВзаиморасчетыПоДокументамОстатки.Документ.НазначениеПлатежа КАК НазначениеПлатежа
	              |ИЗ
	              |	РегистрНакопления.абс_ВзаиморасчетыПоДокументам.Остатки(
	              |			&ДАтаКон,
	              |			Документ ССЫЛКА Документ.абс_Платежка
	              |				И Документ.СчетОрганизации В (&МассивБанкСчетов)
	              |				И (Документ.Дата МЕЖДУ &ДатаНач И &ДатаКон)) КАК абс_ВзаиморасчетыПоДокументамОстатки";

Иначе
	Запрос.Текст ="ВЫБРАТЬ
	              |	абс_ВзаиморасчетыПоДокументамОстатки.Документ КАК ДокументОплаты,
	              |	абс_ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
	              |	абс_ВзаиморасчетыПоДокументамОстатки.Контрагент,
	              |	абс_ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаДокумента,
	              |	абс_ВзаиморасчетыПоДокументамОстатки.Документ.НазначениеПлатежа КАК НазначениеПлатежа,
	              |	-ЕСТЬNULL(абс_ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток, 0) КАК СуммаДокумента
	              |ИЗ
	              |	РегистрНакопления.абс_ВзаиморасчетыПоДокументам.Остатки(&ДАтаКон, Документ ССЫЛКА Документ.абс_Платежка И (Документ.Дата МЕЖДУ &ДатаНач И &ДатаКон)) КАК абс_ВзаиморасчетыПоДокументамОстатки";
КонецЕсли;				  
Запрос.УстановитьПараметр("ДатаНач",НачалоДня(СтруктураПараметров.ДатаНач));
Запрос.УстановитьПараметр("ДатаКон",КонецДня(СтруктураПараметров.ДатаКон));
//Запрос.УстановитьПараметр("Организация",СтруктураПараметров.Организация);	
Запрос.УстановитьПараметр("МассивБанкСчетов",СтруктураПараметров.МассивБанкСчетов);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//\\ Процедуры и функции для распознавания


//Процедуры и функции для разнесения по банку
Функция ЗаполнитьНакладные(СтруктураПараметров) Экспорт
	
	 	 Если СтруктураПараметров.Свойство("ТаблицаКонтрагентов")<>Неопределено  Тогда
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст = "ВЫБРАТЬ
		                |	ВТКонтрагенты.Контрагент,
		                |	ВТКонтрагенты.ДоговорКонтрагента
		                |ПОМЕСТИТЬ ВТКонтрагенты
		                |ИЗ
		                |	&ВТКонтрагенты КАК ВТКонтрагенты
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	ВТКонтрагенты.Контрагент,
		                |	ВТКонтрагенты.ДоговорКонтрагента,
		                |	абс_ВзаиморасчетыПоДокументамОстатки.Документ КАК ДокументРасчетов,
		                |	ВЫБОР
		                |		КОГДА ЕСТЬNULL(абс_ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток, 0) < 0
		                |			ТОГДА ЕСТЬNULL(абс_ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток, 0)
		                |		ИНАЧЕ ЕСТЬNULL(абс_ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток, 0)
		                |	КОНЕЦ КАК СуммаВзаиморасчетов,
		                |	ВЫБОР
		                |		КОГДА ЕСТЬNULL(абс_ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток, 0) < 0
		                |			ТОГДА ЕСТЬNULL(абс_ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток, 0)
		                |		ИНАЧЕ ЕСТЬNULL(абс_ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток, 0)
		                |	КОНЕЦ КАК СуммаРегл,
		                |	ВЫБОР
		                |		КОГДА ЕСТЬNULL(абс_ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток, 0) <> 0
		                |			ТОГДА ЕСТЬNULL(абс_ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток, 0) / ЕСТЬNULL(абс_ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток, 0)
		                |		ИНАЧЕ 1
		                |	КОНЕЦ КАК КурсВзаиморасчетов
		                |ИЗ
		                |	ВТКонтрагенты КАК ВТКонтрагенты
		                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.абс_ВзаиморасчетыПоДокументам.Остатки КАК абс_ВзаиморасчетыПоДокументамОстатки
		                |		ПО ВТКонтрагенты.Контрагент = абс_ВзаиморасчетыПоДокументамОстатки.Контрагент
		                |			И (ВЫБОР
		                |				КОГДА ВТКонтрагенты.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		                |					ТОГДА ВТКонтрагенты.ДоговорКонтрагента = абс_ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента
		                |				ИНАЧЕ ИСТИНА
		                |			КОНЕЦ)";
		 Запрос.УстановитьПараметр("ВТКонтрагенты",СтруктураПараметров.ТаблицаКонтрагентов);
		 Возврат Запрос.Выполнить().Выгрузить();
	КонецЕсли;	 
КонецФункции

//Получение паспортных данных 
// Tibko
Функция ПаспортныеДанные(КодФизЛица) Экспорт
	
	СтруктураВозврата = Новый Структура("Вид,Серия,Номер,Выдан,ДатаВыдачи");
	СтруктураВозврата.Вставить("Вид","");
	СтруктураВозврата.Вставить("Серия","");
	СтруктураВозврата.Вставить("Номер","");
	СтруктураВозврата.Вставить("Выдан","");
	СтруктураВозврата.Вставить("ДатаВыдачи",'00010101'); 
	
	Адрес = ""+СокрЛП(Константы.абс_СтрокаПодключенияБоссКадровика.Получить())+СокрЛП(КодФизЛица);
	result = "";
	Попытка
		
		req =Новый  COMОбъект("WinHttp.WinHttpRequest.5.1"); 
		req.Open("GET",Адрес,0); 
		req.SetClientCertificate("LOCAL_MACHINE\My\kttk-1c-app01.transtk.ru"); 
		req.Send();	
		result  =  req.ResponseText();
	Исключение
	КонецПопытки;
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(result, "|");
	Если МассивПолей<>Неопределено Тогда
		Если МассивПолей.Количество()>0 Тогда
			
			СтруктураВозврата.Вставить("Вид",Справочники.ДокументыУдостоверяющиеЛичность.найтиПоРеквизиту("КодИМНС",СокрЛП(МассивПолей[0])));
			СтруктураВозврата.Вставить("Серия",МассивПолей[1]);
			СтруктураВозврата.Вставить("Номер",СтрЗаменить(СтрЗаменить(СокрЛП(МассивПолей[2]),Символы.НПП,"")," ",""));
			СтруктураВозврата.Вставить("Выдан",МассивПолей[3]);
			СтруктураВозврата.Вставить("ДатаВыдачи",МассивПолей[4]);
		КонецЕсли;
	КонецЕсли;	
	Возврат  СтруктураВозврата;
	
КонецФункции

//Поиск и замена  значений
//Замена элементов
Процедура АвтозаменаЭлементов(мРезультатыПоиска,ВыполнятьВТранзакции) Экспорт
	
	СтруктураПоискаПравильных = Новый Структура("Правильный",Истина);
	ПравильныеСтроки = мРезультатыПоиска.НайтиСтроки(СтруктураПоискаПравильных);
	
	НомерГруппы = 0;
	Для Каждого СтрокаПравильного Из ПравильныеСтроки Цикл
		НомерГруппы = НомерГруппы + 1;
		ЗаголовокИндикации = " Группа " + НомерГруппы + " из " + ПравильныеСтроки.Количество();
		ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ЗаголовокИндикации);
		СтруктураПоиска = Новый Структура("НомерГруппы, Правильный",СтрокаПравильного.НомерГруппы, Ложь);
		МассивСсылок = Новый Массив;
		МассивНеправильныхСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаНеправильного Из МассивНеправильныхСтрок Цикл
			МассивСсылок.Добавить(СтрокаНеправильного.Ссылка);
		КонецЦикла;
		
		ЗаменаВыполнена = ВыполнитьЗаменуЭлементов(СтрокаПравильного.Ссылка, НайтиПоСсылкам(МассивСсылок), ЗаголовокИндикации,ВыполнятьВТранзакции);
		
		Если Истина и (ЗаменаВыполнена) Тогда
			ТаблицаОставшихсяСсылок = НайтиПоСсылкам(МассивСсылок);
			ТаблицаОставшихсяСсылок.Свернуть("Ссылка");
			Для каждого СтрокаНеправильного Из МассивНеправильныхСтрок Цикл
				Если ТаблицаОставшихсяСсылок.Найти(СтрокаНеправильного.Ссылка, "Ссылка") = Неопределено Тогда
					
					Объект = СтрокаНеправильного.Ссылка.ПолучитьОбъект();
					Если Не Объект = Неопределено Тогда
						Попытка
							Объект.Удалить();
							мРезультатыПоиска.Удалить(СтрокаНеправильного);
						Исключение
							ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ВыполнитьЗаменуЭлементов(ПравильныйЭлемент, ТаблицаСсылок, ЗаголовокИндикации = "",ВыполнятьВТранзакции=Ложь)
	
	ОтключатьКонтрольЗаписи = Истина;
	БылиИсключения = Ложь;
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	ОбрабатываемаяСсылка = Неопределено;
		
	Параметры = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;
	
	Параметры.Вставить("Объект", Неопределено);	
	
	//ЕСли мФормаИндикатора<>Неопределено Тогда
	//	мФормаИндикатора.МаксимальноеЗначение = ТаблицаСсылок.Количество();
	//	мФормаИндикатора.КомментарийЗначения = "Выполняется замена элементов." + ЗаголовокИндикации;
	//	мФормаИндикатора.Значение = 0;
	//КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		
				Ссылка = СтрокаТаблицы.Ссылка;
		
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			Если ОбрабатываемаяСсылка <> Неопределено и Параметры.Объект <> Неопределено Тогда
				
				Если ОтключатьКонтрольЗаписи Тогда
					Параметры.Объект.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
				
				Попытка
					Параметры.Объект.Записать();
				Исключение
					БылиИсключения = Истина;
					Если ВыполнятьВТранзакции Тогда
						Возврат ВыполнитьОткат();
					КонецЕсли;
				КонецПопытки;
				Параметры.Объект = Неопределено;
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;
		
			
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
				
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
				
				ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
				ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии и Параметры[Движение.Имя + "Корреспонденция"];
				
				НаборЗаписей  = Параметры.Объект.Движения[Движение.Имя];
				НаборЗаписей.Прочитать();
				НадоЗаписывать = Ложь;
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				Для Каждого Измерение ИЗ Движение.Измерения Цикл
					Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Измерение.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
						КонецЦикла;
					КонецЕсли; 
				КонецЦикла;
				
				ЕСли Метаданные.РегистрыСведений.Содержит(Движение) Тогда
					Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
						Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Ресурс.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
					
					Для ИндексСубконто = 1 по Параметры[Движение.Имя + "Субконто"] Цикл
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							КонецЦикла;								
						Иначе							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							КонецЦикла;							
						КонецЕсли;						
					КонецЦикла;					
				КонецЕсли;
								
				
				Если НадоЗаписывать Тогда
					НаборЗаписей.Загрузить(ТаблицаНабора);
					Если ОтключатьКонтрольЗаписи Тогда
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
					Попытка
						НаборЗаписей.Записать();
					Исключение
						БылиИсключения = Истина;
						Если ВыполнятьВТранзакции Тогда
							Возврат ВыполнитьОткат();
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			
			Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
					НадоЗаписывать = Ложь;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
					НаборЗаписи.Прочитать();
					
					Если НаборЗаписи.Количество() > 0 Тогда
						Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
							Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
								НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
							КонецЕсли;
						КонецЦикла;					
						Если НадоЗаписывать Тогда
							Если ОтключатьКонтрольЗаписи Тогда
								НаборЗаписи.ОбменДанными.Загрузка = Истина;
							КонецЕсли;
							Попытка
								НаборЗаписи.Записать();
							Исключение
								БылиИсключения = Истина;
								Если ВыполнятьВТранзакции Тогда
									Возврат ВыполнитьОткат();
								КонецЕсли;
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			
		ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Параметры.Объект.Владелец = Ссылка Тогда
				Параметры.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Иерархический И Параметры.Объект.Родитель = Ссылка Тогда
				Параметры.Объект.Родитель = ПравильныйЭлемент;
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
						
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	
			
		ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
			
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
				СтруктураИзмерений.Вставить(Измерение.Имя);
			КонецЦикла;
			Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Если ОтключатьКонтрольЗаписи Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			
			Если Не ВыполнятьВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				НаборЗаписей.Записать();
				
				Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
						Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
							НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				НаборЗаписей.Записать();
				
				Если Не ВыполнятьВТранзакции Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли; 
				
			Исключение
				
				Если ВыполнятьВТранзакции Тогда
					БылиИсключения = Истина;
					Возврат ВыполнитьОткат();
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;
				
			КонецПопытки;
			
		Иначе
			Сообщить("Ссылки типа "+СтрокаТаблицы.Метаданные+" не заменяются!!");
		КонецЕсли;
		//ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
	Если Параметры.Объект <> Неопределено Тогда
		Если ОтключатьКонтрольЗаписи Тогда
			Параметры.Объект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		Попытка
			Параметры.Объект.Записать();
		Исключение
			БылиИсключения = Истина;
			Если ВыполнятьВТранзакции Тогда
				Возврат ВыполнитьОткат();
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
	КонецЕсли;
	Возврат Не БылиИсключения;
	
КонецФункции

Функция ВыполнитьОткат()
	
	ОтменитьТранзакцию();
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьТаблицуСсылок(МассивСсылок) Экспорт
	 Возврат НайтиПоСсылкам(МассивСсылок);
КонецФункции

Функция РассчитатьСтрокиАБФ(ТабличнаяЧасть, ПериодНач, ПериодКон) Экспорт
	
	ТаблицаИтогов = Новый ТаблицаЗначений;
	ТаблицаИтогов.Колонки.Добавить("СтрокаФормы");
	ТаблицаИтогов.Колонки.Добавить("Сумма");
	
	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабЧасти.СчетДт) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаТабЧасти.СтрокаФормы.Используется Тогда
			СтрокаТабЧасти.РасчетПроизведен = Истина;
			Продолжить;
		КонецЕсли;
		
		ЕстьОтборПоСубконто = ЗначениеЗаполнено(СтрокаТабЧасти.ТипКлассификатораЕБК);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ВидАналитики", СтрокаТабЧасти.ТипКлассификатораЕБК);
		Запрос.УстановитьПараметр("КлассификаторЕБК", СтрокаТабЧасти.КлассификаторЕБК);
		Запрос.УстановитьПараметр("ЗначениеКлассификатораЕБК", СтрокаТабЧасти.ЭлементКлассификатораЕБК);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПериодНач));
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПериодКон));
		Запрос.УстановитьПараметр("СчетДт", СтрокаТабЧасти.СчетДт);
		Запрос.УстановитьПараметр("СчетКт", СтрокаТабЧасти.СчетКт);
		
		//Если СокрЛП(СтрокаТабЧасти.КлассификаторЕБК) = "Классификатор ""Статьи доходов по основной деятельности""" Тогда
		//	
		//	Запрос.Текст = ?(ЕстьОтборПоСубконто,
		//	"ВЫБРАТЬ
		//	|	абс_СоответствиеАналитикЕБК.ЗначениеАналитики КАК Значение
		//	|ПОМЕСТИТЬ ЗначенияСубконто
		//	|ИЗ
		//	|	РегистрСведений.абс_СоответствиеАналитикЕБК КАК абс_СоответствиеАналитикЕБК
		//	|ГДЕ
		//	|	абс_СоответствиеАналитикЕБК.КлассификаторЕБК = &КлассификаторЕБК
		//	|	И абс_СоответствиеАналитикЕБК.ЗначениеКлассификатораЕБК = &ЗначениеКлассификатораЕБК
		//	|;
		//	|
		//	|////////////////////////////////////////////////////////////////////////////////
		//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//	|	ОборотыБюджетовОбороты.Регистратор
		//	|ПОМЕСТИТЬ Регистраторы
		//	|ИЗ
		//	|	РегистрНакопления.ОборотыБюджетов.Обороты(
		//	|			&НачалоПериода,
		//	|			&КонецПериода,
		//	|			Регистратор,
		//	|			СтатьяОборотов В ИЕРАРХИИ
		//	|				(ВЫБРАТЬ
		//	|					ВТ.Значение
		//	|				ИЗ
		//	|					ЗначенияСубконто КАК ВТ) И Сценарий = &Сценарий) КАК ОборотыБюджетовОбороты
		//	|;
		//	|
		//	|////////////////////////////////////////////////////////////////////////////////
		//	|", "")	+ 
		//	"ВЫБРАТЬ
		//	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот)  КАК СуммаОборот
		//	|ИЗ
		//	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		//	|			&НачалоПериода,
		//	|			&КонецПериода,
		//	|			Регистратор,
		//	|			СчетДт = &СчетДт,
		//	|			,
		//	|			" + ?(ЗначениеЗаполнено(СтрокаТабЧасти.СчетКт), "СчетКт = &СчетКт", "") + ") КАК ХозрасчетныйОборотыДтКт
		//	|"
		//	+ ?(ЕстьОтборПоСубконто,
		//	"ГДЕ
		//	|	ХозрасчетныйОборотыДтКт.Регистратор В
		//	|			(ВЫБРАТЬ
		//	|				ВТ.Регистратор
		//	|			ИЗ
		//	|				Регистраторы КАК ВТ)", "");
		//	
		//	Запрос.УстановитьПараметр("Сценарий", Константы.абс_СценарийДляФакта.Получить());
		//	
		//Иначе
		//	
		//	Запрос.Текст = ?(ЕстьОтборПоСубконто,
		//	"ВЫБРАТЬ
		//	|	абс_СоответствиеАналитикЕБК.ЗначениеАналитики КАК Значение
		//	|ПОМЕСТИТЬ ЗначенияСубконто
		//	|ИЗ
		//	|	РегистрСведений.абс_СоответствиеАналитикЕБК КАК абс_СоответствиеАналитикЕБК
		//	|ГДЕ
		//	|	абс_СоответствиеАналитикЕБК.ВидАналитики = &ВидАналитики
		//	|	И абс_СоответствиеАналитикЕБК.КлассификаторЕБК = &КлассификаторЕБК
		//	|	И абс_СоответствиеАналитикЕБК.ЗначениеКлассификатораЕБК = &ЗначениеКлассификатораЕБК
		//	|;
		//	|
		//	|////////////////////////////////////////////////////////////////////////////////
		//	|", "")	+ 
		//	"ВЫБРАТЬ
		//	|	ХозрасчетныйОборотыДтКт.СуммаОборот
		//	|ИЗ
		//	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		//	|			&НачалоПериода,
		//	|			&КонецПериода,
		//	|			,
		//	|			СчетДт = &СчетДт,
		//	|			" + ?(ЕстьОтборПоСубконто, "&ВидАналитики", "") + ",
		//	|			" + ?(ЗначениеЗаполнено(СтрокаТабЧасти.СчетКт), "СчетКт = &СчетКт", "") + ",
		//	|			,
		//	|			" + ?(ЕстьОтборПоСубконто, "СубконтоДт1 В ИЕРАРХИИ (ВЫБРАТЬ	ВТ.Значение ИЗ ЗначенияСубконто КАК ВТ)", "") + ") КАК ХозрасчетныйОборотыДтКт";
		//	
		//КонецЕсли;
		
		Если ЕстьОтборПоСубконто Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	абс_СоответствиеАналитикЕБК.ЗначениеАналитики КАК Значение
			|ПОМЕСТИТЬ ЗначенияСубконто
			|ИЗ
			|	РегистрСведений.абс_СоответствиеАналитикЕБК КАК абс_СоответствиеАналитикЕБК
			|ГДЕ
			|	абс_СоответствиеАналитикЕБК.ВидАналитики = &ВидАналитики
			|	И абс_СоответствиеАналитикЕБК.КлассификаторЕБК = &КлассификаторЕБК
			|	И абс_СоответствиеАналитикЕБК.ЗначениеКлассификатораЕБК = &ЗначениеКлассификатораЕБК";
			
			Запрос.Выполнить();
			
			ЕстьНепустыеСубконто = Ложь;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗначенияСубконто.Значение
			|ИЗ
			|	ЗначенияСубконто КАК ЗначенияСубконто";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.Значение) Тогда
					ЕстьНепустыеСубконто = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьНепустыеСубконто Тогда
				
				СубконтоПоДебету = ЕстьОтборПоСубконто И ЗначениеЗаполнено(СтрокаТабЧасти.СчетДт) И СтрокаТабЧасти.СчетДт.ВидыСубконто.Найти(СтрокаТабЧасти.ТипКлассификатораЕБК) <> Неопределено;
				СубконтоПоКредиту = ЕстьОтборПоСубконто И ЗначениеЗаполнено(СтрокаТабЧасти.СчетКт) И СтрокаТабЧасти.СчетКт.ВидыСубконто.Найти(СтрокаТабЧасти.ТипКлассификатораЕБК) <> Неопределено;
				ТекстУсловия = ?(СубконтоПоДебету, "СубконтоДт1 В ИЕРАРХИИ (ВЫБРАТЬ	ВТ.Значение ИЗ ЗначенияСубконто КАК ВТ)", "") 
				+ ?(СубконтоПоДебету И СубконтоПоКредиту, " И ", "")
				+ ?(СубконтоПоКредиту, "СубконтоКт1 В ИЕРАРХИИ (ВЫБРАТЬ	ВТ.Значение ИЗ ЗначенияСубконто КАК ВТ)", "");
				
			Иначе
				ТекстУсловия = "ЛОЖЬ";
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаОборот
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			СчетДт = &СчетДт,
		|			" + ?(ЕстьОтборПоСубконто И СубконтоПоДебету, "&ВидАналитики", "") + ",
		|			" + ?(ЗначениеЗаполнено(СтрокаТабЧасти.СчетКт), "СчетКт = &СчетКт", "") + ",
		|			" + ?(ЕстьОтборПоСубконто И СубконтоПоКредиту, "&ВидАналитики", "") + ",
		|			" + ?(ЕстьОтборПоСубконто, ТекстУсловия, "") + ") КАК ХозрасчетныйОборотыДтКт";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СтрокаТабЧасти.Сумма = Выборка.СуммаОборот;
		КонецЕсли;
		
		СтрокаТабЧасти.РасчетПроизведен = Истина;
		
		ДобавитьИтоги(ТаблицаИтогов, СтрокаТабЧасти.СтрокаФормы, ?(СтрокаТабЧасти.СтрокаФормы.ЗнакПлюс, СтрокаТабЧасти.Сумма, -СтрокаТабЧасти.Сумма));
		
	КонецЦикла;
	
	ТаблицаИтогов.Свернуть("СтрокаФормы", "Сумма");
	
	Для каждого СтрокаИтогов Из ТаблицаИтогов Цикл
		
		СтрТабЧасти = ТабличнаяЧасть.Найти(СтрокаИтогов.СтрокаФормы, "СтрокаФормы");
		
		Если НЕ СтрТабЧасти = Неопределено Тогда
	        СтрТабЧасти.Сумма = СтрокаИтогов.Сумма;
			СтрТабЧасти.РасчетПроизведен = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

Процедура ДобавитьИтоги(Таблица, СтрокаФормы, Сумма)
	
	Родитель = СтрокаФормы.ВерхнийУровень;
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.СтрокаФормы = Родитель;
		СтрокаТаблицы.Сумма = Сумма;
		ДобавитьИтоги(Таблица, Родитель, Сумма)
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////МСФО
//Процедуры и функции для подсистемы переноса проводок
Процедура ВыполнитьПереносПроводок(Документ) Экспорт
	// Начало переноса
	МассивСчетов = Новый Массив;
	Если Документ.Дата>=НачалоДня(Дата(2006,1,1)) Тогда
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.01"));
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.03"));
	Иначе
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.03"));
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.01"));
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.01"));
	КонецЕсли;
	//\\АБС
	ДокумОбъект = Документ.ПолучитьОбъект();
	
	Движения = ДокумОбъект.Движения;

	Движения.Международный.Очистить();
	//Запись в журнале регистрации
	ТекстСообщения = "Перенос проводок. Пожалуйста ждите...";
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
	//Запись в журнале регистрации

	
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	ХозрасчетныйДвиженияССубконто.Период,
	        |	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	        |	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	        |	ХозрасчетныйДвиженияССубконто.СчетДт,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	        |	ХозрасчетныйДвиженияССубконто.СчетКт,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	        |	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	        |	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	        |	ХозрасчетныйДвиженияССубконто.Сумма,
	        |	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	        |	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	        |	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	        |	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	        |	ХозрасчетныйДвиженияССубконто.НомерЖурнала,
	        |	ХозрасчетныйДвиженияССубконто.Содержание,
	        |	ВЫБОР
	        |		КОГДА (НЕ СоответствиеСчетовСрезПоследнихКт.СчетМеждународный ЕСТЬ NULL )
	        |				И СоответствиеСчетовСрезПоследнихДт.СчетМеждународный ЕСТЬ NULL 
	        |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Международный.Служебный)
	        |		ИНАЧЕ СоответствиеСчетовСрезПоследнихДт.СчетМеждународный
	        |	КОНЕЦ КАК СчетМеждународныйДт,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд1 КАК СубконтоМеждДт1,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд2 КАК СубконтоМеждДт2,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд3 КАК СубконтоМеждДт3,
	        |	СоответствиеСчетовСрезПоследнихДт.Реквизит КАК РеквизитДт,
	        |	СоответствиеСчетовСрезПоследнихДт.Значение КАК ЗначениеДт,
	        |	ВЫБОР
	        |		КОГДА (НЕ СоответствиеСчетовСрезПоследнихДт.СчетМеждународный ЕСТЬ NULL )
	        |				И СоответствиеСчетовСрезПоследнихКт.СчетМеждународный ЕСТЬ NULL 
	        |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Международный.Служебный)
	        |		ИНАЧЕ СоответствиеСчетовСрезПоследнихКт.СчетМеждународный
	        |	КОНЕЦ КАК СчетМеждународныйКт,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд1 КАК СубконтоМеждКт1,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд2 КАК СубконтоМеждКт2,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд3 КАК СубконтоМеждКт3,
	        |	СоответствиеСчетовСрезПоследнихКт.Реквизит КАК РеквизитКт,
	        |	СоответствиеСчетовСрезПоследнихКт.Значение КАК ЗначениеКт
	        |ИЗ
	        |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	        |			&ПериодНач,
	        |			&ПериодКон,
	        |			,
	        |			,
	        |			) КАК ХозрасчетныйДвиженияССубконто
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсключениеПроводок.СрезПоследних(&ПериодНач, ) КАК ИсключениеПроводокСрезПоследних
	        |		ПО (ХозрасчетныйДвиженияССубконто.СчетДт = ИсключениеПроводокСрезПоследних.СчетДт
	        |					И ИсключениеПроводокСрезПоследних.СчетКт = &ПустойСчет
	        |				ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт = ИсключениеПроводокСрезПоследних.СчетКт
	        |					И ИсключениеПроводокСрезПоследних.СчетДт = &ПустойСчет
	        |				ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт = ИсключениеПроводокСрезПоследних.СчетДт
	        |					И ХозрасчетныйДвиженияССубконто.СчетКт = ИсключениеПроводокСрезПоследних.СчетКт)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт1 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт2 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт3 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт1 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт2 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт3 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиМСФО.СрезПоследних(&ПериодНач, ) КАК СоответствиеСчетовСрезПоследнихДт
	        |		ПО ХозрасчетныйДвиженияССубконто.СчетДт = СоответствиеСчетовСрезПоследнихДт.СчетХозрасчетный
	        |			И (СоответствиеСчетовСрезПоследнихДт.ВидДвижения = &ВидДвиженияДебет)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиМСФО.СрезПоследних(&ПериодНач, ) КАК СоответствиеСчетовСрезПоследнихКт
	        |		ПО ХозрасчетныйДвиженияССубконто.СчетКт = СоответствиеСчетовСрезПоследнихКт.СчетХозрасчетный
	        |			И (СоответствиеСчетовСрезПоследнихКт.ВидДвижения = &ВидДвиженияКредит)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |ГДЕ
	        |	ХозрасчетныйДвиженияССубконто.Активность = &Активность
	        |	И ХозрасчетныйДвиженияССубконто.Период МЕЖДУ &ПериодНач И &ПериодКон
	        |	И ХозрасчетныйДвиженияССубконто.Организация = &Организация
	        |	И ИсключениеПроводокСрезПоследних.Период ЕСТЬ NULL И
			|	((СоответствиеСчетовСрезПоследнихДт.СчетМеждународный) ЕСТЬ НЕ NULL ) И
	        |	((СоответствиеСчетовСрезПоследнихКт.СчетМеждународный) ЕСТЬ НЕ NULL )"; 
			   //АБС
			   Если ДокумОбъект.абс_ЗагружатьТолько01_02Счета Тогда
			   	   Текст = Текст + " И
			   	|	(ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетов) ИЛИ
			   	|	ХозрасчетныйДвиженияССубконто.СчетКт В (&МассивСчетов))";
			   	Запрос.УстановитьПараметр("МассивСчетов",МассивСчетов);
			   КонецЕсли;
			   //\\АБС
				   Текст = Текст + "
				   |УПОРЯДОЧИТЬ ПО
	               |	СоответствиеСчетовСрезПоследнихДт.Приоритет,
	               |	СоответствиеСчетовСрезПоследнихКт.Приоритет
	               |
	               |ИТОГИ ПО
	               |	НомерСтроки,
	               |	Регистратор";
	
	Запрос.Текст = Текст;			   
	Запрос.УстановитьПараметр("Активность", Истина);
	Запрос.УстановитьПараметр("ПериодНач", ДокумОбъект.ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКон", КонецДня(ДокумОбъект.ПериодКонец));
	Запрос.УстановитьПараметр("Организация", ДокумОбъект.Организация);
	
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	//Запрос.УстановитьПараметр("ПустоеСубконто", Неопределено);
	//АБС 080811
	Запрос.УстановитьПараметр("ПустоеСубконто", ПолучитьСписокПустыхСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные));
	//АБС 080811
	Запрос.УстановитьПараметр("ВидДвиженияДебет", Перечисления.ВидыДвиженийБухгалтерии.Дебет);
	Запрос.УстановитьПараметр("ВидДвиженияКредит", Перечисления.ВидыДвиженийБухгалтерии.Кредит);

	Результат = Запрос.Выполнить();

	
	Ном = 1;
	ВыборкаНомерСтроки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтроки",);
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		ВыборкаРегистратор = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор",);
		
		Пока ВыборкаРегистратор.Следующий() Цикл
			//АБС
			НужноПродолжить = Ложь;
			Для Каждого СтрокаИсключений Из ДокумОбъект.абс_Исключения Цикл
				Если СтрокаИсключений.Исключить Тогда
					Если ТипЗнч(ВыборкаРегистратор.Регистратор)=Тип("ДокументСсылка."+СокрЛП(СтрокаИсключений.ВидДокумента)) Тогда
						НужноПродолжить = Истина;
					КонецЕСли;
				Иначе
					Если ТипЗнч(ВыборкаРегистратор.Регистратор)<>Тип("ДокументСсылка."+СокрЛП(СтрокаИсключений.ВидДокумента)) Тогда
						НужноПродолжить = Истина;
					КонецЕСли;	
				КонецЕсли;
			КонецЦикла;
			Если НужноПродолжить Тогда
				Продолжить;
			КонецЕсли;
			//\\АБС
			Выборка = ВыборкаРегистратор.Выбрать(,);
			СоответствиеНайдено = Ложь;
			Пока Выборка.Следующий() Цикл
				Если Не ЗначениеЗаполнено(Выборка.СчетМеждународныйДт) или Не ЗначениеЗаполнено(Выборка.СчетМеждународныйКт) Тогда
					Прервать;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Выборка.РеквизитДт) и Не ЗначениеЗаполнено(Выборка.РеквизитКт) Тогда
					ДобавитьПроводку(Выборка,Документ,Движения);
					СоответствиеНайдено = Истина;
					Прервать; // нашли нужное правило!
				Иначе
					Если ЗначениеЗаполнено(Выборка.РеквизитДт) Тогда // Условие по дебету
						НомерСубконто = Число(Сред(Выборка.РеквизитДт,9,1));
						Рекв = Сред(Выборка.РеквизитДт,Найти(Выборка.РеквизитДт, ".")+1);
						Попытка
							Если (НомерСубконто = 1) и (Выборка.СубконтоДт1[Рекв] <> Выборка.ЗначениеДт) или
								 (НомерСубконто = 2) и (Выборка.СубконтоДт2[Рекв] <> Выборка.ЗначениеДт) или
								 (НомерСубконто = 3) и (Выборка.СубконтоДт3[Рекв] <> Выборка.ЗначениеДт) Тогда
								Продолжить;
							КонецЕсли
						Исключение
							Сообщить("В правиле соответствия для проводки по дебету счета "+Выборка.СчетДт+" не найден реквизит "+Рекв);
						КонецПопытки;
					КонецЕсли;
					Если ЗначениеЗаполнено(Выборка.РеквизитКт) Тогда // Условие по кредиту
						НомерСубконто = Число(Сред(Выборка.РеквизитКт,9,1));
						Рекв = Сред(Выборка.РеквизитКт,Найти(Выборка.РеквизитКт, ".")+1);
						Попытка
							Если (НомерСубконто = 1) и (Выборка.СубконтоКт1[Рекв] <> Выборка.ЗначениеКт) или
								 (НомерСубконто = 2) и (Выборка.СубконтоКт2[Рекв] <> Выборка.ЗначениеКт) или
								 (НомерСубконто = 3) и (Выборка.СубконтоКт3[Рекв] <> Выборка.ЗначениеКт) Тогда
								Продолжить;
							КонецЕсли
						Исключение
							Сообщить("В правиле соответствия для проводки по кредиту счета "+Выборка.СчетКт+" не найден реквизит "+Рекв);
						КонецПопытки;
					КонецЕсли;
					ДобавитьПроводку(Выборка,Документ,Движения);
					СоответствиеНайдено = Истина;
					Прервать; // нашли нужное правило!
				КонецЕсли;
			КонецЦикла;
			// Соответствие не найдено
		КонецЦикла;
	КонецЦикла;
	
   //ДокумОбъект.Записать();  
	Движения.Записать();	
КонецПроцедуры

Процедура ВыполнитьПереносПроводокОСРЖД(Документ) Экспорт
	// Начало переноса
	МассивСчетов = Новый Массив;
	Если Документ.Дата>=НачалоДня(Дата(2006,1,1)) Тогда
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.01"));
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.03"));
	Иначе
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.03"));
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.01"));
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.01"));
	КонецЕсли;
	//\\АБС
	ДокумОбъект = Документ.ПолучитьОбъект();
	
	Движения = ДокумОбъект.Движения;

	Движения.абс_МеждународныйОСРЖД.Очистить();
	//Запись в журнале регистрации
	ТекстСообщения = "Перенос проводок. Пожалуйста ждите...";
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
	//Запись в журнале регистрации

	
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	ХозрасчетныйДвиженияССубконто.Период,
	        |	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	        |	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	        |	ХозрасчетныйДвиженияССубконто.СчетДт,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	        |	ХозрасчетныйДвиженияССубконто.СчетКт,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	        |	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	        |	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	        |	ХозрасчетныйДвиженияССубконто.Сумма,
	        |	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	        |	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	        |	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	        |	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	        |	ХозрасчетныйДвиженияССубконто.НомерЖурнала,
	        |	ХозрасчетныйДвиженияССубконто.Содержание,
	        |	ВЫБОР
	        |		КОГДА НЕ СоответствиеСчетовСрезПоследнихКт.СчетМеждународный ЕСТЬ NULL 
	        |				И СоответствиеСчетовСрезПоследнихДт.СчетМеждународный ЕСТЬ NULL 
	        |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Международный.Служебный)
	        |		ИНАЧЕ СоответствиеСчетовСрезПоследнихДт.СчетМеждународный
	        |	КОНЕЦ КАК СчетМеждународныйДт,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд1 КАК СубконтоМеждДт1,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд2 КАК СубконтоМеждДт2,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд3 КАК СубконтоМеждДт3,
	        |	СоответствиеСчетовСрезПоследнихДт.Реквизит КАК РеквизитДт,
	        |	СоответствиеСчетовСрезПоследнихДт.Значение КАК ЗначениеДт,
	        |	ВЫБОР
	        |		КОГДА НЕ СоответствиеСчетовСрезПоследнихДт.СчетМеждународный ЕСТЬ NULL 
	        |				И СоответствиеСчетовСрезПоследнихКт.СчетМеждународный ЕСТЬ NULL 
	        |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Международный.Служебный)
	        |		ИНАЧЕ СоответствиеСчетовСрезПоследнихКт.СчетМеждународный
	        |	КОНЕЦ КАК СчетМеждународныйКт,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд1 КАК СубконтоМеждКт1,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд2 КАК СубконтоМеждКт2,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд3 КАК СубконтоМеждКт3,
	        |	СоответствиеСчетовСрезПоследнихКт.Реквизит КАК РеквизитКт,
	        |	СоответствиеСчетовСрезПоследнихКт.Значение КАК ЗначениеКт
	        |ИЗ
	        |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ПериодНач, &ПериодКон, , , ) КАК ХозрасчетныйДвиженияССубконто
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_ИсключениеПроводокОСРЖД.СрезПоследних(&ПериодНач, ) КАК ИсключениеПроводокСрезПоследних
	        |		ПО (ХозрасчетныйДвиженияССубконто.СчетДт = ИсключениеПроводокСрезПоследних.СчетДт
	        |					И ИсключениеПроводокСрезПоследних.СчетКт = &ПустойСчет
	        |				ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт = ИсключениеПроводокСрезПоследних.СчетКт
	        |					И ИсключениеПроводокСрезПоследних.СчетДт = &ПустойСчет
	        |				ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт = ИсключениеПроводокСрезПоследних.СчетДт
	        |					И ХозрасчетныйДвиженияССубконто.СчетКт = ИсключениеПроводокСрезПоследних.СчетКт)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт1 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт2 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт3 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт1 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт2 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт3 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_СоответствиеСчетовБУиМСФООСРЖД.СрезПоследних(&ПериодНач, ) КАК СоответствиеСчетовСрезПоследнихДт
	        |		ПО ХозрасчетныйДвиженияССубконто.СчетДт = СоответствиеСчетовСрезПоследнихДт.СчетХозрасчетный
	        |			И (СоответствиеСчетовСрезПоследнихДт.ВидДвижения = &ВидДвиженияДебет)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_СоответствиеСчетовБУиМСФООСРЖД.СрезПоследних(&ПериодНач, ) КАК СоответствиеСчетовСрезПоследнихКт
	        |		ПО ХозрасчетныйДвиженияССубконто.СчетКт = СоответствиеСчетовСрезПоследнихКт.СчетХозрасчетный
	        |			И (СоответствиеСчетовСрезПоследнихКт.ВидДвижения = &ВидДвиженияКредит)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |ГДЕ
	        |	ХозрасчетныйДвиженияССубконто.Активность = &Активность
	        |	И ХозрасчетныйДвиженияССубконто.Период МЕЖДУ &ПериодНач И &ПериодКон
	        |	И ХозрасчетныйДвиженияССубконто.Организация = &Организация
	        |	И ИсключениеПроводокСрезПоследних.Период ЕСТЬ NULL 
	        |	И СоответствиеСчетовСрезПоследнихДт.СчетМеждународный ЕСТЬ НЕ NULL 
	        |	И СоответствиеСчетовСрезПоследнихКт.СчетМеждународный ЕСТЬ НЕ NULL 
	        |	И (ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетов)
	        |			ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт В (&МассивСчетов))";
			   	Запрос.УстановитьПараметр("МассивСчетов",МассивСчетов);
			   
			   //\\АБС
				   Текст = Текст + "
				   |УПОРЯДОЧИТЬ ПО
	               |	СоответствиеСчетовСрезПоследнихДт.Приоритет,
	               |	СоответствиеСчетовСрезПоследнихКт.Приоритет
	               |
	               |ИТОГИ ПО
	               |	НомерСтроки,
	               |	Регистратор";
	
	Запрос.Текст = Текст;			   
	Запрос.УстановитьПараметр("Активность", Истина);
	Запрос.УстановитьПараметр("ПериодНач", ДокумОбъект.ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКон", КонецДня(ДокумОбъект.ПериодКонец));
	Запрос.УстановитьПараметр("Организация", ДокумОбъект.Организация);
	
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	//Запрос.УстановитьПараметр("ПустоеСубконто", Неопределено);
	//АБС 080811
	Запрос.УстановитьПараметр("ПустоеСубконто", ПолучитьСписокПустыхСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные));
	//АБС 080811
	Запрос.УстановитьПараметр("ВидДвиженияДебет", Перечисления.ВидыДвиженийБухгалтерии.Дебет);
	Запрос.УстановитьПараметр("ВидДвиженияКредит", Перечисления.ВидыДвиженийБухгалтерии.Кредит);

	Результат = Запрос.Выполнить();

	
	Ном = 1;
	ВыборкаНомерСтроки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтроки",);
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		ВыборкаРегистратор = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор",);
		
		Пока ВыборкаРегистратор.Следующий() Цикл
			//АБС
			НужноПродолжить = Ложь;
			Для Каждого СтрокаИсключений Из ДокумОбъект.абс_Исключения Цикл
				Если СтрокаИсключений.Исключить Тогда
					Если ТипЗнч(ВыборкаРегистратор.Регистратор)=Тип("ДокументСсылка."+СокрЛП(СтрокаИсключений.ВидДокумента)) Тогда
						НужноПродолжить = Истина;
					КонецЕСли;
				Иначе
					Если ТипЗнч(ВыборкаРегистратор.Регистратор)<>Тип("ДокументСсылка."+СокрЛП(СтрокаИсключений.ВидДокумента)) Тогда
						НужноПродолжить = Истина;
					КонецЕСли;	
				КонецЕсли;
			КонецЦикла;
			Если НужноПродолжить Тогда
				Продолжить;
			КонецЕсли;
			//\\АБС
			Выборка = ВыборкаРегистратор.Выбрать(,);
			СоответствиеНайдено = Ложь;
			Пока Выборка.Следующий() Цикл
				Если Не ЗначениеЗаполнено(Выборка.СчетМеждународныйДт) или Не ЗначениеЗаполнено(Выборка.СчетМеждународныйКт) Тогда
					Прервать;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Выборка.РеквизитДт) и Не ЗначениеЗаполнено(Выборка.РеквизитКт) Тогда
					ДобавитьПроводкуОСРЖД(Выборка,Документ,Движения);
					СоответствиеНайдено = Истина;
					Прервать; // нашли нужное правило!
				Иначе
					Если ЗначениеЗаполнено(Выборка.РеквизитДт) Тогда // Условие по дебету
						НомерСубконто = Число(Сред(Выборка.РеквизитДт,9,1));
						Рекв = Сред(Выборка.РеквизитДт,Найти(Выборка.РеквизитДт, ".")+1);
						Попытка
							Если (НомерСубконто = 1) и (Выборка.СубконтоДт1[Рекв] <> Выборка.ЗначениеДт) или
								 (НомерСубконто = 2) и (Выборка.СубконтоДт2[Рекв] <> Выборка.ЗначениеДт) или
								 (НомерСубконто = 3) и (Выборка.СубконтоДт3[Рекв] <> Выборка.ЗначениеДт) Тогда
								Продолжить;
							КонецЕсли
						Исключение
							Сообщить("В правиле соответствия для проводки по дебету счета "+Выборка.СчетДт+" не найден реквизит "+Рекв);
						КонецПопытки;
					КонецЕсли;
					Если ЗначениеЗаполнено(Выборка.РеквизитКт) Тогда // Условие по кредиту
						НомерСубконто = Число(Сред(Выборка.РеквизитКт,9,1));
						Рекв = Сред(Выборка.РеквизитКт,Найти(Выборка.РеквизитКт, ".")+1);
						Попытка
							Если (НомерСубконто = 1) и (Выборка.СубконтоКт1[Рекв] <> Выборка.ЗначениеКт) или
								 (НомерСубконто = 2) и (Выборка.СубконтоКт2[Рекв] <> Выборка.ЗначениеКт) или
								 (НомерСубконто = 3) и (Выборка.СубконтоКт3[Рекв] <> Выборка.ЗначениеКт) Тогда
								Продолжить;
							КонецЕсли
						Исключение
							Сообщить("В правиле соответствия для проводки по кредиту счета "+Выборка.СчетКт+" не найден реквизит "+Рекв);
						КонецПопытки;
					КонецЕсли;
					ДобавитьПроводкуОСРЖД(Выборка,Документ,Движения);
					СоответствиеНайдено = Истина;
					Прервать; // нашли нужное правило!
				КонецЕсли;
			КонецЦикла;
			// Соответствие не найдено
		КонецЦикла;
	КонецЦикла;
	
   //ДокумОбъект.Записать();  
	Движения.Записать();	
КонецПроцедуры

Процедура ДобавитьПроводку(Выборка,Документ,Движения)
	//Заполняем основные реквизиты записи регистра
	Движение = Движения.Международный.Добавить();
	Движение.Период = Выборка.Период;
	Движение.Регистратор = Документ.Ссылка;
	Движение.СчетДт = Выборка.СчетМеждународныйДт;
	Движение.СчетКт = Выборка.СчетМеждународныйКт;
	Движение.Организация = Документ.Организация;
	Движение.Содержание = Выборка.Содержание;
	Движение.ПервичныйДокумент = Выборка.Регистратор;
	Движение.НомерЖурнала = Выборка.НомерЖурнала;
	
	// Заполняем количество
	Если Движение.СчетДт.Количественный Тогда
		Движение.КоличествоДт = Выборка.КоличествоДт;
	КонецЕсли;
	Если Движение.СчетКт.Количественный Тогда
		Движение.КоличествоКт = Выборка.КоличествоКт;
	КонецЕсли;
	
	// Заполняем суммы и валюту
	Если Константы.ВалютаМеждународногоУчета.Получить() = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Движение.Сумма = Выборка.Сумма;
		
		Если Движение.СчетДт.Валютный Тогда
			Движение.ВалютаДт = Выборка.ВалютаДт;
			Движение.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаДт;
		КонецЕсли;
		Если Движение.СчетКт.Валютный Тогда
			Движение.ВалютаКт = Выборка.ВалютаКт;
			Движение.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаКт;
		КонецЕсли;

	Иначе
		Если Не ЗначениеЗаполнено(Выборка.ВалютаДт) Тогда
			Если Движение.СчетДт.Валютный Тогда
				Движение.ВалютаДт = Константы.ВалютаРегламентированногоУчета.Получить();
				Движение.ВалютнаяСуммаДт = Выборка.Сумма;
			КонецЕсли;
			Движение.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Константы.ВалютаРегламентированногоУчета.Получить(), Константы.ВалютаМеждународногоУчета.Получить(), ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Движение.Период).Кратность, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Кратность);

		ИначеЕсли Движение.ВалютаДт = Константы.ВалютаМеждународногоУчета.Получить() Тогда
			Движение.Сумма = Выборка.ВалютнаяСуммаДт;
			
		ИначеЕсли Движение.ВалютаДт <> Константы.ВалютаМеждународногоУчета.Получить() Тогда
			Если Движение.СчетДт.Валютный Тогда
				Движение.ВалютаДт = Выборка.ВалютаДт;
				Движение.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаДт;
			КонецЕсли;
			Движение.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.ВалютнаяСуммаДт, Выборка.ВалютаДт, Константы.ВалютаМеждународногоУчета.Получить(), ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаДт, Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаДт, Движение.Период).Кратность, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Кратность);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.ВалютаКт) Тогда
			Если Движение.СчетКт.Валютный Тогда
				Движение.ВалютаКт = Константы.ВалютаРегламентированногоУчета.Получить();
				Движение.ВалютнаяСуммаКт = Выборка.Сумма;
			КонецЕсли;
			Движение.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Константы.ВалютаРегламентированногоУчета.Получить(), Константы.ВалютаМеждународногоУчета.Получить(), ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Движение.Период).Кратность, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Кратность);
			
		ИначеЕсли Движение.ВалютаКт = Константы.ВалютаМеждународногоУчета.Получить() Тогда
			Движение.Сумма = Выборка.ВалютнаяСуммаКт;
			
		ИначеЕсли Движение.ВалютаКт <> Константы.ВалютаМеждународногоУчета.Получить() Тогда
			Если Движение.СчетКт.Валютный Тогда
				Движение.ВалютаКт = Выборка.ВалютаКт;
				Движение.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаКт;
			КонецЕсли;
			Движение.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.ВалютнаяСуммаКт, Выборка.ВалютаКт, Константы.ВалютаМеждународногоУчета.Получить(), ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаКт, Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаКт, Движение.Период).Кратность, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Кратность);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Заполняем субконто
	Для ДТ = 0 по 1 Цикл
		Если ДТ = 0 Тогда
			СтрокаДТ = "Дт";
		Иначе
			СтрокаДТ = "Кт";
		КонецЕсли;

		Для Ном = 1 по 3 Цикл
			Если Ном <= Выборка["СчетМеждународный"+СтрокаДТ].ВидыСубконто.Количество() Тогда
				ВидСубконтоМежд = Движение["Счет"+СтрокаДТ].ВидыСубконто[Ном-1].ВидСубконто;
				
				Если Не ЗначениеЗаполнено(Выборка["СубконтоМежд"+СтрокаДТ+Ном]) Тогда
					// Заполняем значением из исходной проводки (если совпадают типы)
					Для НомБух = 1 по 3 Цикл
						Если НомБух <= Выборка["Счет"+СтрокаДТ].ВидыСубконто.Количество() Тогда
							Если ВидСубконтоМежд.ТипЗначения = Выборка["Счет"+СтрокаДТ].ВидыСубконто[НомБух-1].ВидСубконто.ТипЗначения Тогда
								Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд] = Выборка["Субконто"+СтрокаДТ+НомБух];
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

				Иначе
					// Заполняем как указано в соответствиях
					Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд] = Выборка["СубконтоМежд"+СтрокаДТ+Ном];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьПроводкуОСРЖД(Выборка,Документ,Движения)
	//Заполняем основные реквизиты записи регистра
	Движение = Движения.абс_МеждународныйОСРЖД.Добавить();
	Движение.Период = Выборка.Период;
	Движение.Регистратор = Документ.Ссылка;
	Движение.СчетДт = Выборка.СчетМеждународныйДт;
	Движение.СчетКт = Выборка.СчетМеждународныйКт;
	Движение.Организация = Документ.Организация;
	Движение.Содержание = Выборка.Содержание;
	Движение.ПервичныйДокумент = Выборка.Регистратор;
	Движение.НомерЖурнала = Выборка.НомерЖурнала;
	
	// Заполняем количество
	Если Движение.СчетДт.Количественный Тогда
		Движение.КоличествоДт = Выборка.КоличествоДт;
	КонецЕсли;
	Если Движение.СчетКт.Количественный Тогда
		Движение.КоличествоКт = Выборка.КоличествоКт;
	КонецЕсли;
	
	// Заполняем суммы и валюту
	Если Константы.ВалютаМеждународногоУчета.Получить() = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Движение.Сумма = Выборка.Сумма;
		
		Если Движение.СчетДт.Валютный Тогда
			Движение.ВалютаДт = Выборка.ВалютаДт;
			Движение.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаДт;
		КонецЕсли;
		Если Движение.СчетКт.Валютный Тогда
			Движение.ВалютаКт = Выборка.ВалютаКт;
			Движение.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаКт;
		КонецЕсли;

	Иначе
		Если Не ЗначениеЗаполнено(Выборка.ВалютаДт) Тогда
			Если Движение.СчетДт.Валютный Тогда
				Движение.ВалютаДт = Константы.ВалютаРегламентированногоУчета.Получить();
				Движение.ВалютнаяСуммаДт = Выборка.Сумма;
			КонецЕсли;
			Движение.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Константы.ВалютаРегламентированногоУчета.Получить(), Константы.ВалютаМеждународногоУчета.Получить(), ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Движение.Период).Кратность, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Кратность);

		ИначеЕсли Движение.ВалютаДт = Константы.ВалютаМеждународногоУчета.Получить() Тогда
			Движение.Сумма = Выборка.ВалютнаяСуммаДт;
			
		ИначеЕсли Движение.ВалютаДт <> Константы.ВалютаМеждународногоУчета.Получить() Тогда
			Если Движение.СчетДт.Валютный Тогда
				Движение.ВалютаДт = Выборка.ВалютаДт;
				Движение.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаДт;
			КонецЕсли;
			Движение.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.ВалютнаяСуммаДт, Выборка.ВалютаДт, Константы.ВалютаМеждународногоУчета.Получить(), ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаДт, Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаДт, Движение.Период).Кратность, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Кратность);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.ВалютаКт) Тогда
			Если Движение.СчетКт.Валютный Тогда
				Движение.ВалютаКт = Константы.ВалютаРегламентированногоУчета.Получить();
				Движение.ВалютнаяСуммаКт = Выборка.Сумма;
			КонецЕсли;
			Движение.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Константы.ВалютаРегламентированногоУчета.Получить(), Константы.ВалютаМеждународногоУчета.Получить(), ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Движение.Период).Кратность, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Кратность);
			
		ИначеЕсли Движение.ВалютаКт = Константы.ВалютаМеждународногоУчета.Получить() Тогда
			Движение.Сумма = Выборка.ВалютнаяСуммаКт;
			
		ИначеЕсли Движение.ВалютаКт <> Константы.ВалютаМеждународногоУчета.Получить() Тогда
			Если Движение.СчетКт.Валютный Тогда
				Движение.ВалютаКт = Выборка.ВалютаКт;
				Движение.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаКт;
			КонецЕсли;
			Движение.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.ВалютнаяСуммаКт, Выборка.ВалютаКт, Константы.ВалютаМеждународногоУчета.Получить(), ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаКт, Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаКт, Движение.Период).Кратность, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Кратность);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Заполняем субконто
	Для ДТ = 0 по 1 Цикл
		Если ДТ = 0 Тогда
			СтрокаДТ = "Дт";
		Иначе
			СтрокаДТ = "Кт";
		КонецЕсли;

		Для Ном = 1 по 3 Цикл
			Если Ном <= Выборка["СчетМеждународный"+СтрокаДТ].ВидыСубконто.Количество() Тогда
				ВидСубконтоМежд = Движение["Счет"+СтрокаДТ].ВидыСубконто[Ном-1].ВидСубконто;
				
				Если Не ЗначениеЗаполнено(Выборка["СубконтоМежд"+СтрокаДТ+Ном]) Тогда
					// Заполняем значением из исходной проводки (если совпадают типы)
					Для НомБух = 1 по 3 Цикл
						Если НомБух <= Выборка["Счет"+СтрокаДТ].ВидыСубконто.Количество() Тогда
							Если ВидСубконтоМежд.ТипЗначения = Выборка["Счет"+СтрокаДТ].ВидыСубконто[НомБух-1].ВидСубконто.ТипЗначения Тогда
								Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд] = Выборка["Субконто"+СтрокаДТ+НомБух];
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

				Иначе
					// Заполняем как указано в соответствиях
					Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд] = Выборка["СубконтоМежд"+СтрокаДТ+Ном];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Функция возвращает СЗ с ссылками на пустые субконто 
// 
// Параметры 
// <пвхДляОбработки> – <План видов характеристик менеджер> – План видов характеристик по которому будет строить список 
// 
// 
// Возвращаемое значение: 
// <Список значений> – Содержащий список пустых ссылок на все субконто 
// 
Функция ПолучитьСписокПустыхСубконто(пвхДляОбработки) 
	выборкаСубконто = пвхДляОбработки.Выбрать(); 
	сзПустыеСубконто = Новый СписокЗначений(); 
	Пока выборкаСубконто.Следующий() Цикл 
		сзПустыеСубконто.Добавить(выборкаСубконто.ТипЗначения.ПривестиЗначение()); 
	КонецЦикла; 
	//Добавим и неопределено 
	сзПустыеСубконто.Добавить(Неопределено); 
	Возврат сзПустыеСубконто; 
КонецФункции // () 

Функция ПереносСсылокПоДоговорам(ИсточникДоговоры,ПриемникДоговоры,ИспользоватьДатуЗапрета = Истина) Экспорт
	БылаОтмена = Ложь;
	Для Каждого стр Из ИсточникДоговоры Цикл
		
		Если Стр.Фл И ЗначениеЗаполнено(Стр.НомерСтрокиПриемника) Тогда
			СтрокаПравильного = ПриемникДоговоры.Найти(Стр.НомерСтрокиПриемника,"НомерСтроки");
			Если Строкаправильного = Неопределено Тогда
				Сообщить("По строке источника №"+Стр.НомерСтроки+" не найден правильный элемент!");
				Продолжить;	
			КонецЕсли;
			ЗаменаВыполненаКонтрагенты = Ложь;
			ЗаменаВыполненаДоговоры    = Ложь;
			СтруктураПоиска = Новый Структура("ФЛ,НомерСтроки", Истина,Стр.НомерСтроки);
			МассивСсылок = Новый Массив;
			МассивНеправильныхСтрок = ИсточникДоговоры.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаНеправильного Из МассивНеправильныхСтрок Цикл
				МассивСсылок.Добавить(СтрокаНеправильного.ДоговорКонтрагента);
				
			КонецЦикла;
			ТабСсылок1 =  НайтиПоСсылкам(МассивСсылок);
			ТабСсылок =ТабСсылок1.Скопировать(); 
			ТабСсылок.Очистить();
			Для Каждого СтрокаСсылки Из ТабСсылок1 Цикл
				Если ТипЗнч(СтрокаСсылки.Данные) <> Тип("РегистрСведенийКлючЗаписи.абс_ИзменениеСтатусовДоговоров") Тогда
					Новаястрока = ТабСсылок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСсылки);
				КонецЕсли;
			КонецЦикла;
			ТабСсылокДоговоры = ТабСсылок;
			ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,"Перенос ссылок по договору в строке №"+Стр.НомерСтроки);
			НачатьТранзакцию();
			ЗаменаВыполненаДоговоры = АБс_ВыполнитьЗаменуЭлементов(СтрокаПравильного.ДоговорКонтрагента, ТабСсылок, "",ИспользоватьДатуЗапрета);
			//Если Не ЗаменаВыполнена Тогда
			//	ОбратнаяЗамена =АБс_ВыполнитьЗаменуЭлементов(стр.ДоговорКонтрагента, ТабСсылок, "",Истина); 
			//КонецЕсли;
			
			Если ЗаменаВыполненаДоговоры Тогда
				ТабСсылок.ЗаполнитьЗначения(СтрокаНеправильного.ДоговорКонтрагента.Владелец,"Ссылка");
				КопияТабСсылок =ТабСсылок.Скопировать(); 
				КопияТабСсылок.Очистить();
				Для Каждого СтрокаСсылки Из ТабСсылок Цикл
					Если ТипЗнч(СтрокаСсылки.Данные) <> Тип("РегистрСведенийКлючЗаписи.абс_ИзменениеСтатусовДоговоров") Тогда
						Новаястрока = КопияТабСсылок.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСсылки);
					КонецЕсли;
				КонецЦикла;
				ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,"Перенос ссылок контрагенту для договора в строке №"+Стр.НомерСтроки);
				ЗаменаВыполненаКонтрагенты = АБс_ВыполнитьЗаменуЭлементов(СтрокаПравильного.ДоговорКонтрагента.Владелец, КопияТабСсылок, "",ИспользоватьДатуЗапрета);
				
			КонецЕсли;
			Если ЗаменаВыполненаДоговоры И ЗаменаВыполненаКонтрагенты Тогда
				ЗафиксироватьТранзакцию();
			Иначе
				БылаОтмена = Истина;
				ОтменитьТранзакцию();
			КонецЕсли;	
			
			//ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,"Формирование корректировок долга по строке №"+Стр.НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;

	Возврат БылаОтмена;

КонецФункции	

Функция АБс_ВыполнитьЗаменуЭлементов(ПравильныйЭлемент, ТаблицаСсылок, ЗаголовокИндикации = "",ВыполнятьВТранзакции=Истина,ИспользоватьДатуЗапрета = Истина)  Экспорт
	
	ОтключатьКонтрольЗаписи = Истина;
	БылиИсключения = Ложь;
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	ОбрабатываемаяСсылка = Неопределено;
		
	Параметры = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;
	
	Параметры.Вставить("Объект", Неопределено);	
	
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		
				Ссылка = СтрокаТаблицы.Ссылка;
		
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			Если ОбрабатываемаяСсылка <> Неопределено и Параметры.Объект <> Неопределено Тогда
				
				Если ОтключатьКонтрольЗаписи Тогда
					Параметры.Объект.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
				
				Попытка
					Параметры.Объект.Записать();
				Исключение
					БылиИсключения = Истина;
					Если ВыполнятьВТранзакции Тогда
						Возврат ВыполнитьОткат();
					КонецЕсли;
				КонецПопытки;
				Параметры.Объект = Неопределено;
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;
		
			
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			//АБС
			Если ИспользоватьДатуЗапрета Тогда
				ДокументВЗакрытомПериоде = НастройкаПравДоступа.ДокументВЗакрытомПериоде(Параметры.Объект);
			Иначе
				ДокументВЗакрытомПериоде = Ложь;
			КонецЕсли;
			
			Если   Не ДокументВЗакрытомПериоде Тогда
				
				
				Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
						Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
					Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
								СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
					
					ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
					ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии и Параметры[Движение.Имя + "Корреспонденция"];
					
					НаборЗаписей  = Параметры.Объект.Движения[Движение.Имя];
					НаборЗаписей.Прочитать();
					НадоЗаписывать = Ложь;
					ТаблицаНабора = НаборЗаписей.Выгрузить();
					Для Каждого Измерение ИЗ Движение.Измерения Цикл
						Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Измерение.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
							КонецЦикла;
						КонецЕсли; 
					КонецЦикла;
					
					ЕСли Метаданные.РегистрыСведений.Содержит(Движение) Тогда
						Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
							Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти[Ресурс.Имя] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
					Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
						
						Для ИндексСубконто = 1 по Параметры[Движение.Имя + "Субконто"] Цикл
							Если ЕстьКорреспонденция Тогда
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
								КонецЦикла;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
								КонецЦикла;								
							Иначе							
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
								КонецЦикла;							
							КонецЕсли;						
						КонецЦикла;					
					КонецЕсли;
					
					
					Если НадоЗаписывать Тогда
								//АБС
					Если ТипЗнч(НаборЗаписей)  =Тип("РегистрСведенийНаборЗаписей.РасчетПереоценкиВалютныхСредств") Тогда
						ТаблицаНабора.Свернуть("Регистратор,Активность,ПериодРасчета,Организация,Счет,Валюта,Субконто1,Субконто2,Субконто3,ВидУчета,КурсПереоценки","Сумма,СуммаВРублях,СуммаВВалюте");
					КонецЕсли;
					
					//АБС

						НаборЗаписей.Загрузить(ТаблицаНабора);
						Если ОтключатьКонтрольЗаписи Тогда
							НаборЗаписей.ОбменДанными.Загрузка = Истина;
						КонецЕсли;
						Попытка
							НаборЗаписей.Записать();
						Исключение
							БылиИсключения = Истина;
							Если ВыполнятьВТранзакции Тогда
								Возврат ВыполнитьОткат();
							КонецЕсли;
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
				
				
				Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
					Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
						НадоЗаписывать = Ложь;
						НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
						НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
						НаборЗаписи.Прочитать();
						
						Если НаборЗаписи.Количество() > 0 Тогда
							Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
								Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
									НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
							КонецЦикла;					
							Если НадоЗаписывать Тогда
								Если ОтключатьКонтрольЗаписи Тогда
									НаборЗаписи.ОбменДанными.Загрузка = Истина;
								КонецЕсли;
								Попытка
									НаборЗаписи.Записать();
								Исключение
									БылиИсключения = Истина;
									Если ВыполнятьВТранзакции Тогда
										Возврат ВыполнитьОткат();
									КонецЕсли;
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//АБС
		
		
			
		ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Параметры.Объект.Владелец = Ссылка Тогда
				Параметры.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Иерархический И Параметры.Объект.Родитель = Ссылка Тогда
				Параметры.Объект.Родитель = ПравильныйЭлемент;
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
						
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	
			
		ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
			
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
				СтруктураИзмерений.Вставить(Измерение.Имя);
			КонецЦикла;
			Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Если ОтключатьКонтрольЗаписи Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			
			Если Не ВыполнятьВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				НаборЗаписей.Записать();
				
				Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
						Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
							НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				НаборЗаписей.Записать();
				
				Если Не ВыполнятьВТранзакции Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли; 
				
			Исключение
				
				Если ВыполнятьВТранзакции Тогда
					БылиИсключения = Истина;
					Возврат ВыполнитьОткат();
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;
				
			КонецПопытки;
			
		Иначе
			Сообщить("Ссылки типа "+СтрокаТаблицы.Метаданные+" не заменяются!!");
		КонецЕсли;
		//ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
	Если Параметры.Объект <> Неопределено Тогда
		Если ОтключатьКонтрольЗаписи Тогда
			Параметры.Объект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		Попытка
			Параметры.Объект.Записать();
		Исключение
			БылиИсключения = Истина;
			Если ВыполнятьВТранзакции Тогда
				Возврат ВыполнитьОткат();
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
	КонецЕсли;
	Возврат Не БылиИсключения;
	
КонецФункции

Функция ПолучитьДатуСервера() Экспорт
	
	Возврат ТекущаяДата();
	
КонецФункции

//// Процедуры и функции для биллинга
Функция ЗаполнитьПлатежиДляВыгрузкиВАСР(ДокЗагрузкаАСР) Экспорт
	Оплаты = ДокЗагрузкаАСР.Оплаты.Выгрузить();
	
	Оплаты.Очистить();	
	Запрос = Новый Запрос;
	Если ДокЗагрузкаАСР.Корпоративщики Тогда   //Корпоративные Клиенты
		
		Если Не ДокЗагрузкаАСР.ИспользоватьПКО Тогда
			Запрос.Текст="ВЫБРАТЬ
			             |	абс_ЗагрузкаАСРОплаты.Bill_Num,
			             |	абс_ЗагрузкаАСРОплаты.ДокументОснование
			             |ПОМЕСТИТЬ ВТ_АСР
			             |ИЗ
			             |	Документ.абс_ЗагрузкаАСР.Оплаты КАК абс_ЗагрузкаАСРОплаты
			             |ГДЕ
			             |	абс_ЗагрузкаАСРОплаты.Ссылка = &Ссылка
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			             |	ПлатежноеПоручениеВходящее.Ссылка КАК СсылкаПП,
			             |	ПлатежноеПоручениеВходящее.ДоговорКонтрагента КАК Договор,
			             |	СУММА(ПлатежноеПоручениеВходящее.СуммаПлатежа) КАК СуммаПлатежа,
			             |	ВТ_АСР.Bill_Num,
			             |	ПлатежноеПоручениеВходящее.Ссылка.СубконтоКт2,
			             |	ВЫБОР
			             |		КОГДА ПлатежноеПоручениеВходящее.ДоговорКонтрагента.Ссылка ЕСТЬ NULL 
			             |			ТОГДА ПлатежноеПоручениеВходящее.Ссылка.СубконтоКт2
			             |		ИНАЧЕ ПлатежноеПоручениеВходящее.ДоговорКонтрагента
			             |	КОНЕЦ КАК ДоговорКонтрагента,
			             |	ВЫРАЗИТЬ(ПлатежноеПоручениеВходящее.Ссылка.НазначениеПлатежа КАК СТРОКА(500)) КАК Описание,
			             |	ПлатежноеПоручениеВходящее.ДоговорКонтрагента.абс_Оператор КАК Оператор
			             |ИЗ
			             |	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящее
			             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АСР КАК ВТ_АСР
			             |		ПО ПлатежноеПоручениеВходящее.Ссылка = ВТ_АСР.ДокументОснование
			             |ГДЕ
			             |	ПлатежноеПоручениеВходящее.Ссылка.Дата >= &Дата1
			             |	И ПлатежноеПоручениеВходящее.Ссылка.Дата <= &Дата2
			             |	И ПлатежноеПоручениеВходящее.Ссылка.Проведен = ИСТИНА
			             |	И ПлатежноеПоручениеВходящее.Ссылка.Оплачено = ИСТИНА
			             |	И ПлатежноеПоручениеВходящее.Ссылка.Организация = &Организация
			             |	И (ПлатежноеПоручениеВходящее.ДоговорКонтрагента.абс_ЛицевойСчетБиллинга ЕСТЬ НЕ NULL 
			             |			ИЛИ ПлатежноеПоручениеВходящее.Ссылка.СубконтоКт2.абс_КлиентБиллинга = &КлиентБиллинга)
			             |
			             |СГРУППИРОВАТЬ ПО
			             |	ПлатежноеПоручениеВходящее.Ссылка,
			             |	ПлатежноеПоручениеВходящее.ДоговорКонтрагента,
			             |	ПлатежноеПоручениеВходящее.Ссылка.СубконтоКт2,
			             |	ВЫРАЗИТЬ(ПлатежноеПоручениеВходящее.Ссылка.НазначениеПлатежа КАК СТРОКА(500)),
			             |	ВЫБОР
			             |		КОГДА ПлатежноеПоручениеВходящее.ДоговорКонтрагента.Ссылка ЕСТЬ NULL 
			             |			ТОГДА ПлатежноеПоручениеВходящее.Ссылка.СубконтоКт2
			             |		ИНАЧЕ ПлатежноеПоручениеВходящее.ДоговорКонтрагента
			             |	КОНЕЦ,
			             |	ВТ_АСР.Bill_Num,
			             |	ПлатежноеПоручениеВходящее.ДоговорКонтрагента.абс_Оператор";
			
			Запрос.УстановитьПараметр("дата1", ДокЗагрузкаАСР.НачПериода);
			Запрос.УстановитьПараметр("дата2", КонецДня(ДокЗагрузкаАСР.КонПериода));
			ЗАпрос.УстановитьПараметр("Организация",ДокЗагрузкаАСР.Организация);
			Запрос.УстановитьПараметр("КлиентБиллинга",ДокЗагрузкаАСР.КлиентБиллинга);
			Запрос.УстановитьПараметр("Ссылка",ДокЗагрузкаАСР.ссылка);
			Выборка=Запрос.Выполнить().Выбрать();	
			//
			Пока Выборка.Следующий() Цикл
				
				
				ОстСуммаПлатежа = Выборка.СуммаПлатежа;
				ДокППВ = Выборка.СсылкаПП;
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор.абс_СчетНаОплатуПокупателю.FACTUREEXTERNALID КАК INVOICES_Num,
				|	СУММА(-РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовОборот) КАК СуммаВзаиморасчетов
				|ИЗ
				|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, ) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
				|ГДЕ
				|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
				|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ = &Документ
				|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор.ДоговорКонтрагента = &ДоговорКонтрагента
				|
				|СГРУППИРОВАТЬ ПО
				|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор.абс_СчетНаОплатуПокупателю.FACTUREEXTERNALID";
				
				Запрос.УстановитьПараметр("Документ", ДокППВ);
				Запрос.УстановитьПараметр("ДоговорКонтрагента", Выборка.ДоговорКонтрагента);
				
				Результат = Запрос.Выполнить();
				ВыборкаДок = Результат.Выбрать();
				
				Пока ВыборкаДок.Следующий() Цикл
					Если ОстСуммаПлатежа = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ВыборкаДок.INVOICES_Num) Тогда
						Продолжить;
					КонецЕсли;
					
					СуммаПлатежа = Мин(ОстСуммаПлатежа,ВыборкаДок.СуммаВзаиморасчетов);
					
					Если СуммаПлатежа <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовСтр =  Оплаты.Добавить();
					НовСтр.ДокументОснование = ДокППВ;
					НовСтр.ДатаОплаты			= ДокППВ.ДатаОплаты;
					НовСтр.Договор				= Выборка.ДоговорКонтрагента;
					НовСтр.Контрагент			= ДокППВ.Контрагент;
					НовСтр.ЛС_Билиинг		= Выборка.ДоговорКонтрагента.абс_ЛицевойСчетБиллинга;
					НовСтр.НазначениеПП			= ДокППВ.Комментарий;
					НовСтр.НомерВходящегоПП		= ДокППВ.НомерВходящегоДокумента;		
					НовСтр.Статус				= 0;
					НовСтр.СуммаОплаты			= СуммаПлатежа;
					НовСтр.Описание =          Выборка.Описание;
					НовСтр.INVOICES_Num =  ВыборкаДок.INVOICES_Num;
					
					ОстСуммаПлатежа = ОстСуммаПлатежа - СуммаПлатежа;
					
				КонецЦикла;
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ.абс_СчетНаОплатуПокупателю.FACTUREEXTERNALID КАК INVOICES_Num,
				|	СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовОборот) КАК СуммаВзаиморасчетов
				|ИЗ
				|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, ) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
				|ГДЕ
				|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
				|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор = &Документ
				|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ.ДоговорКонтрагента = &ДоговорКонтрагента
				|
				|СГРУППИРОВАТЬ ПО
				|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ.абс_СчетНаОплатуПокупателю.FACTUREEXTERNALID";
				
				Запрос.УстановитьПараметр("Документ", ДокППВ);
				Запрос.УстановитьПараметр("ДоговорКонтрагента", Выборка.ДоговорКонтрагента);
				
				Результат = Запрос.Выполнить();
				ВыборкаДок = Результат.Выбрать();
				
				Пока ВыборкаДок.Следующий() Цикл
					Если ОстСуммаПлатежа = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ВыборкаДок.INVOICES_Num) Тогда
						Продолжить;
					КонецЕсли;
					СуммаПлатежа = Мин(ОстСуммаПлатежа,ВыборкаДок.СуммаВзаиморасчетов);
					Если СуммаПлатежа <= 0 Тогда
						Продолжить;
					КонецЕсли;
					НовСтр =  Оплаты.Добавить();
					НовСтр.ДокументОснование = ДокППВ;
					НовСтр.ДатаОплаты			= ДокППВ.ДатаОплаты;
					НовСтр.Договор				= Выборка.ДоговорКонтрагента;
					НовСтр.Контрагент			= ДокППВ.Контрагент;
					НовСтр.ЛС_Билиинг		= Выборка.ДоговорКонтрагента.абс_ЛицевойСчетБиллинга;
					НовСтр.НазначениеПП			= ДокППВ.Комментарий;
					НовСтр.НомерВходящегоПП		= ДокППВ.НомерВходящегоДокумента;		
					НовСтр.Статус				= 0;
					НовСтр.СуммаОплаты			= СуммаПлатежа;
					НовСтр.Описание =          Выборка.Описание;
					НовСтр.INVOICES_Num =  ВыборкаДок.INVOICES_Num;
					
					ОстСуммаПлатежа = ОстСуммаПлатежа - СуммаПлатежа;
					
					НовСтр.Оператор				= Выборка.Оператор;   //АБС Коломиец 13505
					
				КонецЦикла;
				
				Если Не ОстСуммаПлатежа = 0 Тогда
					НовСтр =  Оплаты.Добавить();
					НовСтр.ДокументОснование = Выборка.СсылкаПП;
					НовСтр.ДатаОплаты			= Выборка.СсылкаПП.ДатаОплаты;
					НовСтр.Договор				= Выборка.ДоговорКонтрагента;
					НовСтр.Контрагент			= Выборка.СсылкаПП.Контрагент;
					НовСтр.ЛС_Билиинг		= Выборка.ДоговорКонтрагента.абс_ЛицевойСчетБиллинга;
					НовСтр.НазначениеПП			= Выборка.СсылкаПП.Комментарий;
					НовСтр.НомерВходящегоПП		= Выборка.СсылкаПП.НомерВходящегоДокумента;		
					НовСтр.Статус				= 0;
					НовСтр.СуммаОплаты			= ОстСуммаПлатежа;
					НовСтр.Описание =          Выборка.Описание;
					НовСтр.Оператор				= Выборка.ДоговорКонтрагента.абс_Оператор;       //АБС Коломиец 13505
				КонецЕсли;
			КонецЦикла;
			
			
		Иначе
			Запрос.Текст="ВЫБРАТЬ
			             |	абс_ЗагрузкаАСРОплаты.Bill_Num,
			             |	абс_ЗагрузкаАСРОплаты.ДокументОснование
			             |ПОМЕСТИТЬ ВТ_АСР
			             |ИЗ
			             |	Документ.абс_ЗагрузкаАСР.Оплаты КАК абс_ЗагрузкаАСРОплаты
			             |ГДЕ
			             |	абс_ЗагрузкаАСРОплаты.Ссылка = &Ссылка
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ,
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента,
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ.абс_СчетНаОплатуПокупателю.FACTUREEXTERNALID КАК INVOICES_Num,
			             |	СУММА(-РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовОборот) КАК СуммаВзаиморасчетов
			             |ПОМЕСТИТЬ ВТ_Оплата
			             |ИЗ
			             |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, ) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
			             |ГДЕ
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
			             |
			             |СГРУППИРОВАТЬ ПО
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ,
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента,
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ.абс_СчетНаОплатуПокупателю.FACTUREEXTERNALID
			             |
			             |ОБЪЕДИНИТЬ ВСЕ
			             |
			             |ВЫБРАТЬ РАЗЛИЧНЫЕ
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор,
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента,
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор.абс_СчетНаОплатуПокупателю.FACTUREEXTERNALID,
			             |	СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовОборот)
			             |ИЗ
			             |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, ) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
			             |ГДЕ
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
			             |
			             |СГРУППИРОВАТЬ ПО
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор.абс_СчетНаОплатуПокупателю.FACTUREEXTERNALID,
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента,
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	ВТ_Оплата.Документ,
			             |	ВТ_Оплата.ДоговорКонтрагента,
			             |	ВТ_Оплата.INVOICES_Num,
			             |	СУММА(ВТ_Оплата.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
			             |ПОМЕСТИТЬ ВТ1
			             |ИЗ
			             |	ВТ_Оплата КАК ВТ_Оплата
			             |
			             |СГРУППИРОВАТЬ ПО
			             |	ВТ_Оплата.Документ,
			             |	ВТ_Оплата.ДоговорКонтрагента,
			             |	ВТ_Оплата.INVOICES_Num
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			             |	ПлатежноеПоручениеВходящее.Ссылка КАК СсылкаПП,
			             |	ПлатежноеПоручениеВходящее.ДоговорКонтрагента КАК Договор,
			             |	СУММА(ПлатежноеПоручениеВходящее.СуммаПлатежа) КАК СуммаПлатежа
			             |ПОМЕСТИТЬ ВТ_Платежки
			             |ИЗ
			             |	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящее
			             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АСР КАК ВТ_АСР
			             |		ПО ПлатежноеПоручениеВходящее.Ссылка = ВТ_АСР.ДокументОснование
			             |ГДЕ
			             |	ПлатежноеПоручениеВходящее.Ссылка.Дата >= &Дата1
			             |	И ПлатежноеПоручениеВходящее.Ссылка.Дата <= &Дата2
			             |	И ПлатежноеПоручениеВходящее.Ссылка.Проведен = ИСТИНА
			             |	И ПлатежноеПоручениеВходящее.Ссылка.Оплачено = ИСТИНА
			             |	И ПлатежноеПоручениеВходящее.Ссылка.Организация = &Организация
			             |	И (ПлатежноеПоручениеВходящее.ДоговорКонтрагента.абс_ЛицевойСчетБиллинга ЕСТЬ НЕ NULL 
			             |			ИЛИ ПлатежноеПоручениеВходящее.Ссылка.СубконтоКт2.абс_КлиентБиллинга = &КлиентБиллинга)
			             |
			             |СГРУППИРОВАТЬ ПО
			             |	ПлатежноеПоручениеВходящее.Ссылка,
			             |	ПлатежноеПоручениеВходящее.ДоговорКонтрагента
			             |
			             |ОБЪЕДИНИТЬ ВСЕ
			             |
			             |ВЫБРАТЬ РАЗЛИЧНЫЕ
			             |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
			             |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента,
			             |	СУММА(ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа)
			             |ИЗ
			             |	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
			             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АСР КАК ВТ_АСР
			             |		ПО ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = ВТ_АСР.ДокументОснование
			             |ГДЕ
			             |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата >= &Дата1
			             |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата <= &Дата2
			             |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен = ИСТИНА
			             |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Оплачено = ИСТИНА
			             |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация
			             |	И (ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.абс_ЛицевойСчетБиллинга ЕСТЬ НЕ NULL 
			             |			ИЛИ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СубконтоКт2.абс_КлиентБиллинга = &КлиентБиллинга)
			             |
			             |СГРУППИРОВАТЬ ПО
			             |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
			             |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	ВТ_Платежки.СсылкаПП КАК СсылкаПП,
			             |	ВТ_Платежки.Договор КАК Договор,
			             |	СУММА(ВТ_Платежки.СуммаПлатежа) КАК СуммаПлатежа,
			             |	ВТ1.INVOICES_Num,
			             |	СУММА(ВТ1.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
			             |	ВТ_Платежки.Договор.абс_Оператор КАК Оператор
			             |ИЗ
			             |	ВТ_Платежки КАК ВТ_Платежки
			             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ1 КАК ВТ1
			             |		ПО ВТ_Платежки.СсылкаПП = ВТ1.Документ
			             |			И ВТ_Платежки.Договор = ВТ1.ДоговорКонтрагента
			             |
			             |СГРУППИРОВАТЬ ПО
			             |	ВТ1.INVOICES_Num,
			             |	ВТ_Платежки.Договор,
			             |	ВТ_Платежки.СсылкаПП
			             |ИТОГИ ПО
			             |	СсылкаПП,
			             |	Договор";
			
			Запрос.УстановитьПараметр("дата1", ДокЗагрузкаАСР.НачПериода);
			Запрос.УстановитьПараметр("дата2", КонецДня(ДокЗагрузкаАСР.КонПериода));
			ЗАпрос.УстановитьПараметр("Организация",ДокЗагрузкаАСР.Организация);
			Запрос.УстановитьПараметр("КлиентБиллинга",ДокЗагрузкаАСР.КлиентБиллинга);
			Запрос.УстановитьПараметр("Ссылка",ДокЗагрузкаАСР.ссылка);
			ВыборкаДок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
			//
			Пока ВыборкаДок.Следующий() Цикл
				ДокППВ = ВыборкаДок.СсылкаПП;
                ЭтоПКО = Ложь;
				Если ТипЗнч(ДокППВ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
					ЭтоПКО = Истина;
				КонецЕсли;
				
				ВыборкаДог = ВыборкаДок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаДог.Следующий() Цикл
					
					ОстСуммаПлатежа = ВыборкаДог.СуммаПлатежа;
					
					ВыборкаР = ВыборкаДог.Выбрать();
					
					Пока ВыборкаР.Следующий() Цикл
						
						Если ОстСуммаПлатежа = 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(ВыборкаР.INVOICES_Num) Тогда
							Продолжить;
						КонецЕсли;
						
						СуммаПлатежа = Мин(ОстСуммаПлатежа,ВыборкаР.СуммаВзаиморасчетов);
						
						Если СуммаПлатежа <= 0 Тогда
							Продолжить;
						КонецЕсли;
						
						НовСтр =  Оплаты.Добавить();
						НовСтр.ДокументОснование = ДокППВ;
						НовСтр.ДатаОплаты			= ?(ЭтоПКО,ДокППВ.Дата,ДокППВ.ДатаОплаты);
						НовСтр.Договор				= ВыборкаР.Договор;
						НовСтр.Контрагент			= ДокППВ.Контрагент;
						НовСтр.ЛС_Билиинг		= ВыборкаР.Договор.абс_ЛицевойСчетБиллинга;
						НовСтр.НазначениеПП			= ДокППВ.Комментарий;
						НовСтр.НомерВходящегоПП		= ?(ЭтоПКО,ДокППВ.Номер, ДокППВ.НомерВходящегоДокумента);		
						НовСтр.Статус				= 0;   
						НовСтр.СтатусОплаты			= 0;
						НовСтр.СуммаОплаты			= СуммаПлатежа;
						НовСтр.Описание =          ?(ЭтоПКО,ДокППВ.Основание,ДокППВ.НазначениеПлатежа);
						НовСтр.INVOICES_Num =  ВыборкаР.INVOICES_Num;
						НовСтр.Оператор				= Выборка.Оператор;       //АБС Коломиец 13505
				
						ОстСуммаПлатежа = ОстСуммаПлатежа - СуммаПлатежа;
						
					КонецЦикла;
					
					
					
					Если Не ОстСуммаПлатежа = 0 Тогда
						НовСтр =  Оплаты.Добавить();
						НовСтр.ДокументОснование = ДокППВ;
						НовСтр.ДатаОплаты			= ?(ЭтоПКО,ДокППВ.Дата,ДокППВ.ДатаОплаты);
						НовСтр.Договор				= ВыборкаДог.Договор;
						НовСтр.Контрагент			= ДокППВ.Контрагент;
						НовСтр.ЛС_Билиинг		= ВыборкаДог.Договор.абс_ЛицевойСчетБиллинга;
						НовСтр.НазначениеПП			= ДокППВ.Комментарий;
						НовСтр.НомерВходящегоПП		= ?(ЭтоПКО,ДокППВ.Номер, ДокППВ.НомерВходящегоДокумента);		
						НовСтр.Статус				= 0; 
						НовСтр.СтатусОплаты			= 0;
						НовСтр.СуммаОплаты			= ОстСуммаПлатежа;
						НовСтр.Описание =          ?(ЭтоПКО,ДокППВ.Основание,ДокППВ.НазначениеПлатежа);
						НовСтр.Оператор				= ВыборкаДог.Договор.абс_Оператор;       //АБС Коломиец 13505
					КонецЕсли;  
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		
		
	Иначе    ///Физические Лица
		Запрос1 = Новый Запрос ; //запрос на поиск уже загруженных в биллинг данных
		Запрос1.Текст = "ВЫБРАТЬ
		|	NOV_ВыгрузкаОплатыВБиллингПоступления.СуммаОплаты,
		|	NOV_ВыгрузкаОплатыВБиллингПоступления.ДатаОплаты
		|ИЗ
		|	Документ.абс_ЗагрузкаАСР.Оплаты КАК NOV_ВыгрузкаОплатыВБиллингПоступления
		|ГДЕ
		|	NOV_ВыгрузкаОплатыВБиллингПоступления.СуммаОплаты = &СуммаОплаты
		|	И NOV_ВыгрузкаОплатыВБиллингПоступления.ДатаОплаты = &ДатаОплаты
		|	И NOV_ВыгрузкаОплатыВБиллингПоступления.НомерВходящегоПП = &НомерВходящегоПП
		|	И NOV_ВыгрузкаОплатыВБиллингПоступления.Ссылка.Организация = &Организация";
		
		
		
		
		DATE1 = Формат(ДокЗагрузкаАСР.НачПЕриода, "ДФ=""гггг-ММ-дд""");
		DATE2 = Формат(ДокЗагрузкаАСР.КонПериода, "ДФ=""гггг-ММ-дд""");
		
		
		
		
	КонецЕсли;
	Возврат Оплаты;
КонецФункции

Функция ОбработатьДанныеЗагруженныеИзБиллинга(Организация, ТабДанныеБиллинга)Экспорт
	
	СтруктураВозврата = Новый Структура("ДанныеБиллинга,МассивДоговоров");
	
	МассивДоговоров = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст ="ВЫБРАТЬ
	              |	абс_Кураторы.Ссылка,
	              |	абс_Кураторы.Наименование
	              |ИЗ
	              |	Справочник.абс_Кураторы КАК абс_Кураторы
	              |ГДЕ
	              |	абс_Кураторы.Организация = &Организация
	              |	И абс_Кураторы.ПометкаУдаления = ЛОЖЬ";
	ТС_Кураторов = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	абс_СоответствиеАгентаОрганизации.Агент,
	              |	абс_СоответствиеАгентаОрганизации.Организация
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеАгентаОрганизации КАК абс_СоответствиеАгентаОрганизации";
	ТС_Агентов = Запрос.Выполнить().Выгрузить();

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов,
	              |	НоменклатурныеГруппы.Ссылка КАК НоменклатурнаяГруппа
	              |ПОМЕСТИТЬ ВТ_НГ
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеНоменклатурыБюджетнымАналитикам КАК абс_СоответствиеНоменклатурыБюджетнымАналитикам
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	              |		ПО абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов.Наименование = НоменклатурныеГруппы.Наименование
	              |ГДЕ
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Организация = &Организация
	              |	И абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов <> ЗНАЧЕНИЕ(Справочник.СтатьиОборотовПоБюджетам.ПустаяСсылка)
	              |	И НоменклатурныеГруппы.абс_СтатусНоменклатурнойГруппы = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Номенклатура,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.абс_ТипКонтрагента,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Организация,
	              |	ВЫБОР
	              |		КОГДА абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	              |			ТОГДА ВТ_НГ.НоменклатурнаяГруппа
	              |		ИНАЧЕ абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа
	              |	КОНЕЦ КАК НоменклатурнаяГруппа,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.ЦФО,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.абс_ЦФУ
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеНоменклатурыБюджетнымАналитикам КАК абс_СоответствиеНоменклатурыБюджетнымАналитикам
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НГ КАК ВТ_НГ
	              |		ПО абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов = ВТ_НГ.СтатьяОборотов
	              |ГДЕ
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Организация = &Организация";
	ТаблицаСоответствия = Запрос.Выполнить().Выгрузить();
	//Заполнение аналитики в реализациях
	//ПроверкаНГ(ТаблицаСоответствия);    
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	абс_СоответствиеНоменклатурныхГруппИНоменклатуры.Номенклатура,
	              |	абс_СоответствиеНоменклатурныхГруппИНоменклатуры.НоменклатурнаяГруппа
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеНоменклатурныхГруппИНоменклатуры КАК абс_СоответствиеНоменклатурныхГруппИНоменклатуры
	              |ГДЕ
	              |	абс_СоответствиеНоменклатурныхГруппИНоменклатуры.Организация = &Организация
	              |	И абс_СоответствиеНоменклатурныхГруппИНоменклатуры.НоменклатурнаяГруппа.абс_СтатусНоменклатурнойГруппы = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)";
	ТаблицаСоответствияНГ = Запрос.Выполнить().Выгрузить();

	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	абс_СоответствиеБиллинговыхУслугНоменклатуре.НаименованиеУслуги КАК Наименование,
					|	абс_СоответствиеБиллинговыхУслугНоменклатуре.КодУслугиБиллинга КАК Код,
					|	абс_СоответствиеБиллинговыхУслугНоменклатуре.Номенклатура
					|ИЗ
					|	РегистрСведений.абс_СоответствиеБиллинговыхУслугНоменклатуре КАК абс_СоответствиеБиллинговыхУслугНоменклатуре
					|ГДЕ
					|	абс_СоответствиеБиллинговыхУслугНоменклатуре.Организация = &Организация
					|	И абс_СоответствиеБиллинговыхУслугНоменклатуре.Номенклатура.абс_СтатусНоменклатуры = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)";
	Запрос.УстановитьПараметр("Организация",Организация);
	ТС_БилУслугНоменклатуре = Запрос.Выполнить().Выгрузить();
	
	
	
	КолСтрок = ТабДанныеБиллинга.Количество();	
	Счет = 0;
	Для каждого Строка Из ТабДанныеБиллинга Цикл
		Счет = Счет+1;
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			Состояние("Обрабатывается "+Счет+" из "+КолСтрок);
		#КонецЕсли
		
		Строка.абс_Куратор = "";
		Строка.Контрагент = "";
		Строка.ДоговорКонтрагента = "";
		Строка.Номенклатура = "";
		
		
		// Кураторы
		Если ЗначениеЗаполнено(Строка.KURATOR) Тогда
			НайденнаяСтрока = ТС_Кураторов.Найти(Строка.KURATOR,"Наименование");
			
			Если НайденнаяСтрока<>Неопределено Тогда
				Строка.абс_Куратор = НайденнаяСтрока.Ссылка;
			Иначе
				НовКуратор = Справочники.абс_Кураторы.СоздатьЭлемент();
				НовКуратор.Наименование = Строка.KURATOR;
				НовКуратор.Организация= Организация;
				НовКуратор.УстановитьНовыйКод();
				НовКуратор.Записать();
				Строка.абс_Куратор = НовКуратор.Ссылка;
				
				СтрокаКураторы = ТС_Кураторов.Добавить();
				СтрокаКураторы.Наименование = Строка.KURATOR;
				СтрокаКураторы.Ссылка = НовКуратор.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		// Кураторы
		
		Если ЗначениеЗаполнено(Строка.Tsfu) Тогда
			Строка.ЦФУ = Справочники.абс_ЦФУ.НайтиПоНаименованию(Строка.Tsfu);  
		КонецЕсли;
		
		
		Строка.INN = СтрЗаменить(Строка.INN,"-","");
		Строка.KPP = СтрЗаменить(Строка.KPP,"-","");
		Строка.ПереченьОшибок ="";
		
		Если ЕстьЧисло(СокрЛП(Строка.INN)) =0 Тогда
			Строка.INN ="";	
		КонецЕсли;
		
		Если ЕстьЧисло(СокрЛП(Строка.KPP)) =0 Тогда
			Строка.KPP ="";	
		КонецЕсли;
		
		
		Строка.CUSTADDRESS = СтрЗаменить(Строка.CUSTADDRESS,"ru,","");
		Строка.CUSTADDRESS = СтрЗаменить(Строка.CUSTADDRESS,"RU,","");
		
		//Поиск счета на оплату по FACTUREEXTERNALID
		
		//Строка.СчетНаОплату = абс_серверныеФункции.НайтиСчетНаОплату(Организация, СокрЛП(Строка.FACTURENUM));
		
		
		//Поиск контрагента по ИНН и КПП
		//СтруктураИмен = Новый Структура("Наименование,НаименованиеПолное");
		//СтруктураИмен.Вставить("Наименование",СокрЛп(Строка.CustName_1));
		//СтруктураИмен.Вставить("НаименованиеПолное",СокрЛп(Строка.FULLCUSTNAME));
		//Контрагент = НайтиКонтрагентаВБазе(СокрЛп(Строка.INN), СокрЛп(Строка.KPP), СтруктураИмен);
		Контрагент = "";
		//проверка ИНН и КПП
		ИНН = СокрЛП(Строка.INN);
		КПП = СокрЛП(Строка.KPP);
		Если ЗначениеЗаполнено(ИНН) Тогда
			ИННВерный = РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИНН);
			ТиповаяОшибкаИНН = Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.НайтиПоНаименованию("ИНН не соответствует требованиям");
			Если Не  ИННВерный Тогда     
				
				Строка.ТиповаяОшибка =  ТиповаяОшибкаИНН;
				Строка.SESSIONERRORLOG = Строка.SESSIONERRORLOG +Символы.ПС+Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.НайтиПоНаименованию("ИНН не соответствует требованиям"); 
			Иначе
				Если Строка.ТиповаяОшибка   = ТиповаяОшибкаИНН Тогда
					Строка.ТиповаяОшибка   = Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.ПустаяСсылка();
				КонецЕсли;
				Строка.SESSIONERRORLOG = СтрЗаменить(Строка.SESSIONERRORLOG,"ИНН не соответствует требованиям","");
				
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(КПП) Тогда
				ТиповаяОшибкаКПП = Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.НайтиПоНаименованию("КПП не соответствует требованиям");
				Если Не ЕстьЧисло(Лев(КПП,1)) ИЛИ Не ЕстьЧисло(прав(КПП,1)) Тогда 
					Строка.ТиповаяОшибка = ТиповаяОшибкаКПП;
					Строка.SESSIONERRORLOG =Строка.SESSIONERRORLOG +Символы.ПС+Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.НайтиПоНаименованию("КПП не соответствует требованиям");
					//Продолжить;
				КонецЕсли;	
				
				Если СтрДлина(КПП)<>9 Тогда
					
					Строка.ТиповаяОшибка = ТиповаяОшибкаКПП;
					Строка.SESSIONERRORLOG = Строка.SESSIONERRORLOG +Символы.ПС+Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.НайтиПоНаименованию("КПП не соответствует требованиям");
				иначе
					Если Строка.ТиповаяОшибка   = ТиповаяОшибкаКПП Тогда
						Строка.ТиповаяОшибка   = Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.ПустаяСсылка();
					КонецЕсли;
					Строка.SESSIONERRORLOG = СтрЗаменить(Строка.SESSIONERRORLOG,"КПП не соответствует требованиям","");
					
					
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		
		//\\проверка ИНН и КПП
		Если   ЗначениеЗаполнено(Контрагент) Тогда
			Строка.Контрагент = Контрагент;
		Иначе
			Если  ЗначениеЗаполнено(Строка.KODKONTR_EISUP) и Найти(Строка.KODKONTR_EISUP,"KODKONTR_EISUP") = 0 Тогда
				Контрагент = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(Строка.KODKONTR_EISUP));
				Если ЗначениеЗаполнено(Контрагент) Тогда
					Если Контрагент.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Активный или
						Контрагент.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов или
						Контрагент.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.ЗавершениеОтношений Тогда
						Строка.Контрагент = Контрагент;
						//сообщить("В строке "+й+" выполнено заполнение контрагента");
					КонецЕсли;
				КонецЕсли;
			Иначе
			КонецЕсли;
			
			//Если Не ЗначениеЗаполнено(Строка.Контрагент) Тогда
			//	Если  ЗначениеЗаполнено(Строка.TIPKONTRAGENTA)  Тогда
			//		Контрагент = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(Строка.TIPKONTRAGENTA));
			//		Если ЗначениеЗаполнено(Контрагент) Тогда
			//			Если Контрагент.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Активный или
			//			Контрагент.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов или
			//			Контрагент.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.ЗавершениеОтношений Тогда
			//				Строка.Контрагент = Контрагент;
			//				//сообщить("В строке "+й+" выполнено заполнение контрагента");
			//			КонецЕсли;
			//		КонецЕсли;
			//		
			//	КонецЕсли;
			//КонецЕсли;
			
			Строка.ПереченьОшибок = Строка.ПереченьОшибок +Символы.ПС+ "С данными ИНН и КПП контрагент не найден!;";
		КонецЕсли;
		//Поиск валюты
		Валюта = НайтиВалюту(СокрЛп(Строка.CURRENCYCODE));
		Если   ЗначениеЗаполнено(Валюта) Тогда
			Строка.Валюта = Валюта;
			Строка.ПереченьОшибок = СтрЗаменить(Строка.ПереченьОшибок,"Валюта не найдена!;","");
			Строка.SESSIONERRORLOG = СтрЗаменить(Строка.SESSIONERRORLOG,"Валюта не найдена!;","");
			
		Иначе
			Если Найти(Строка.ПереченьОшибок,"Валюта не найдена!;")=0 Тогда	
				Строка.ПереченьОшибок = Строка.ПереченьОшибок +Символы.ПС+ "Валюта не найдена!;";
			КонецЕсли;
			Если Найти(Строка.SESSIONERRORLOG,"Валюта не найдена!;")=0 Тогда 
				Строка.SESSIONERRORLOG = Строка.SESSIONERRORLOG +Символы.ПС+ "Валюта не найдена!;";
			КонецЕсли;
		КонецЕсли;
		
			//АБС Коломиец 12327+		
		Если  ЗначениеЗаполнено(Строка.OPERATOR) и Найти(Строка.OPERATOR,"OPERATOR") = 0 Тогда
			Оператор = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(Строка.OPERATOR));
			Если ЗначениеЗаполнено(Оператор) Тогда
				Если Оператор.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Активный или
					Оператор.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов или
					Оператор.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.ЗавершениеОтношений Тогда
					Строка.Оператор = Оператор;
				КонецЕсли;
			КонецЕсли;
		Иначе
		КонецЕсли;
        //АБС Коломиец 12327-

		////////////////
		//Поиск договора контрагента
		ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если   ЗначениеЗаполнено(Строка.Контрагент) И ЗначениеЗаполнено(СокрЛП(Строка.NOMERDOGOVORA_1)) И ЗначениеЗаполнено(Строка.Валюта) Тогда
			Если ЗначениеЗаполнено(Строка.OPERATOR) Тогда
				врСтрВозврата = абс_серверныеФункции.СоздатьДоговор(Организация, Строка.Контрагент,Строка.NOMERDOGOVORA_1,Строка.DATADOGOVORA,Строка.Валюта, Истина, Ложь, Строка.TypeSchet,Строка.LSCHET, Строка.Оператор);
			Иначе
				врСтрВозврата = абс_серверныеФункции.СоздатьДоговор(Организация, Строка.Контрагент,Строка.NOMERDOGOVORA_1,Строка.DATADOGOVORA,Строка.Валюта, Ложь, Ложь, Строка.TypeSchet,Строка.LSCHET, Строка.Оператор);
			КонецЕсли;
			Строка.ДоговорКонтрагента = врСтрВозврата. ДоговорКонтрагента;
			Если врСтрВозврата.ДоговорСоздан Тогда
				МассивДоговоров.Добавить(Строка.ДоговорКонтрагента);
			КонецЕсли;
			
		КонецЕсли;
		
		
		
		Если НЕ ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
			Строка.ПереченьОшибок = Строка.ПереченьОшибок +Символы.ПС+"Договор контрагента не найден!;";
		Иначе
			Строка.ПереченьОшибок =  СтрЗаменить(Строка.ПереченьОшибок,"Договор контрагента не найден!;","");
		КонецЕсли;
		
		
		
		
		////////////////////////
		//Поиск номенклатуры
		Номенклатура  = "";
		Если ЗначениеЗаполнено(Строка.ITEMID) Тогда
			
			Номенклатура  = абс_серверныеФункции.НайтиНоменклатуруПоБилингКоду(Организация, СокрЛп(Строка.ITEMID));
			Если   ЗначениеЗаполнено(Номенклатура) Тогда
				
				Строка.Номенклатура = Номенклатура;
				Строка.ПереченьОшибок = СтрЗаменить(Строка.ПереченьОшибок,"С данным БиллингКодом номенклатура не найдена!; ","");
				Строка.SESSIONERRORLOG =  СтрЗаменить(Строка.SESSIONERRORLOG,"С данным БиллингКодом номенклатура не найдена!; ","");
				
			Иначе
				
				Если Найти(Строка.ПереченьОшибок,"С данным БиллингКодом номенклатура не найдена!;")=0 Тогда
					Строка.ПереченьОшибок = Строка.ПереченьОшибок +Символы.ПС+ "С данным БиллингКодом номенклатура не найдена!;";
				КонецЕсли;
				Если Найти(Строка.SESSIONERRORLOG,"С данным БиллингКодом номенклатура не найдена!;")=0 Тогда
					Строка.SESSIONERRORLOG = Строка.SESSIONERRORLOG+Символы.ПС+ "С данным БиллингКодом номенклатура не найдена!;";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		//Поиск номенклатуры  ДЗО
		
			
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			СтрокаПоиска = Неопределено;
			Если ЗначениеЗаполнено(Строка.ITEMID) Тогда
				СтрокаПоиска = ТС_БилУслугНоменклатуре.Найти(СокрЛП(Строка.ITEMID),"Код");
				Если СтрокаПоиска = Неопределено Тогда
					СтрокаПоиска = ТС_БилУслугНоменклатуре.Найти(СокрЛП(Строка.ITEMID),"Наименование");
				КонецЕсли; 
			КонецЕсли;
			Если СтрокаПоиска = Неопределено Тогда
				Отбор = Новый Структура();
				Отбор.Вставить("Код","");
				НайденныеСтроки = ТС_БилУслугНоменклатуре.НайтиСтроки(Отбор);
				Для Каждого СтрокаРез Из НайденныеСтроки Цикл
					Если Найти(СокрЛП(Строка.FULLNAMESERVISE),СтрокаРез.Наименование)>0 ИЛИ
						Найти(СокрЛП(СтрокаРез.Наименование),Строка.FULLNAMESERVISE)>0 Тогда
						СтрокаПоиска = СтрокаРез;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;   
			
			Если СтрокаПоиска = Неопределено Тогда
				Если ЗначениеЗаполнено(Строка.ITEMID) Тогда
					Для Каждого СтрокаРез Из ТС_БилУслугНоменклатуре Цикл
						Если Найти(СокрЛП(Строка.ITEMID),СтрокаРез.Наименование)>0 ИЛИ
							Найти(СокрЛП(Строка.ITEMID),СтрокаРез.Номенклатура.НаименованиеПолное)>0 Тогда
							СтрокаПоиска = СтрокаРез;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаПоиска<>Неопределено Тогда
				Строка.Номенклатура = СтрокаПоиска.Номенклатура;
			КонецЕсли;
		КонецЕсли;
			
		
		////Поиск валюты
		//Валюта = НайтиВалюту(СокрЛп(Строка.CURRENCYCODE));
		
		//Ставка НДС
		СтавкаНДС = ПолучитьСтавкуНДС(СокрЛп(Строка.TAXGROUP));
		Если   ЗначениеЗаполнено(СтавкаНДС) Тогда
			Строка.СтавкаНДС = СтавкаНДС;
			Строка.ПереченьОшибок = СтрЗаменить(Строка.ПереченьОшибок,"Ставка НДС не найдена!;","");
		Иначе
			Если Найти(Строка.ПереченьОшибок,"Ставка НДС не найдена!;")=0 Тогда
				Строка.ПереченьОшибок = Строка.ПереченьОшибок + "Ставка НДС не найдена!;";
			КонецЕсли;
			
		КонецЕсли;
		
		//Количество
		
		Строка.Количество = 1;
		
		
		//Дата документа.
		ДатаДокумента = ПреобразоватьКДате(СокрЛП(Строка.DELIVERYDATE));
		Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
			Если Найти(Строка.ПереченьОшибок,"Дата неправильного формата;")=0 Тогда
				Строка.ПереченьОшибок = Строка.ПереченьОшибок +символы.ПС+ "Дата неправильного формата;";
			КонецЕсли;
		Иначе
			Строка.ДатаДокумента =  ДатаДокумента;
			Строка.ПереченьОшибок = СтрЗаменить(Строка.ПереченьОшибок,"Дата неправильного формата;","");
		КонецЕсли;
		
		//Цена
		СуммаБЕЗНДС = ПолучитьСумму(Строка.SUMMABEZNDS_1);
		СуммаНДС = ПолучитьСумму(Строка.SUMMANDS_1);
		Цена     = СуммаБЕЗНДС;
		СуммаНДС = СуммаНДС;
		
		
		Если  Цена = Неопределено Тогда
			Если Найти(Строка.ПереченьОшибок,"Цена неправильного формата;")=0 Тогда
				Строка.ПереченьОшибок = Строка.ПереченьОшибок +Символы.ПС+ "Цена неправильного формата;";
			КонецЕсли;
		Иначе
			Строка.Цена = Цена;
			Строка.ПереченьОшибок = СтрЗаменить(Строка.ПереченьОшибок,"Цена неправильного формата;","");
		КонецЕсли;
		
		//Сумма НДС
		Если  СуммаНДС = Неопределено Тогда
			Если Найти(Строка.ПереченьОшибок,"Сумма ндс неправильного формата;")=0 Тогда
				Строка.ПереченьОшибок = Строка.ПереченьОшибок  +Символы.ПС+ "Сумма ндс неправильного формата;";
			КонецЕсли;
		Иначе
			Строка.СуммаНДС = СуммаНДС;
		КонецЕсли;
		
		//Сумма
		Сумма= Цена;
		Если  Сумма = Неопределено Тогда
			Если Найти(Строка.ПереченьОшибок,"Сумма неправильного формата;")=0 Тогда	
				Строка.ПереченьОшибок = Строка.ПереченьОшибок +Символы.ПС+ "Сумма неправильного формата;";
			КонецЕсли;
			Если Найти(Строка.SESSIONERRORLOG,"Сумма неправильного формата;")=0 Тогда
				
				Строка.SESSIONERRORLOG = Строка.SESSIONERRORLOG +Символы.ПС+ "Сумма неправильного формата;";
			КонецЕсли;
		Иначе
			Строка.Сумма = Сумма;
			Строка.SESSIONERRORLOG = СтрЗаменить(Строка.SESSIONERRORLOG,"Сумма неправильного формата;","");
			Строка.ПереченьОшибок = СтрЗаменить(Строка.ПереченьОшибок,"Сумма неправильного формата;","");
			
		КонецЕсли;
		
		
		
		Строка.УникальныйИдентификаторЗаписи = Строка.EXTERNALLINEID;
		
		//Проверим возможность ввода документов по данной записи.
		Если Не ЗначениеЗаполнено(Строка.ПереченьОшибок) Тогда
			Строка.Загружать = Истина;
			Строка.ЗагрузкаРазрешена = Истина;
		КонецЕсли;
		
		//Если есть ошибки по статус обработки =1
		Если ЗначениеЗаполнено(СокрЛП(Строка.SESSIONERRORLOG)) И СокрЛП(Строка.SESSIONERRORLOG)<>"1"  Тогда
			Строка.SESSIONISOK = 1;
		КонецЕсли;	
		
		//Если загружать возможно проверим требуется ли перезаписать данную запись
		ТребуетсяПерезаписать = Ложь;
		Если  Строка.ЗагрузкаРазрешена Тогда
			Если ЗначениеЗаполнено(Строка.СчетНаОплату) Тогда
				Если Строка.Контрагент<> Строка.СчетНаОплату.Контрагент ИЛИ
					Строка.ДоговорКонтрагента<> Строка.СчетНаОплату.ДоговорКонтрагента Тогда
					ТребуетсяПерезаписать =  Истина;
				КонецЕсли;
				
				НайтеннаяСтрокаУслуги = Строка.СчетНаОплату.Услуги.Найти(Строка.УникальныйИдентификаторЗаписи);
				Если  НайтеннаяСтрокаУслуги = Неопределено Тогда
					ТребуетсяПерезаписать =  Истина;
				Иначе 
					Если НайтеннаяСтрокаУслуги.Номенклатура<> Строка.Номенклатура
						ИЛИ НайтеннаяСтрокаУслуги.Количество<> Строка.Количество
						ИЛИ НайтеннаяСтрокаУслуги.Сумма<> Строка.Сумма Тогда
						ТребуетсяПерезаписать =  Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(Строка.СчетНаОплату) И ТребуетсяПерезаписать Тогда
				Строка.Загружать = Истина;
				Строка.Комментарий = "Строка изменена, рекоммендуется перезаписать документ: Счет на оплату";
				
			ИначеЕсли    ЗначениеЗаполнено(Строка.СчетНаОплату) И НЕ  ТребуетсяПерезаписать Тогда
				Строка.Загружать = Ложь;
				Строка.Комментарий = "Перезаписывать строку не требуется";
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ТиповаяОшибка) ИЛИ (СокрЛП(Строка.SESSIONERRORLOG)<>"1") Тогда
			
			Если ЗначениеЗаполнено(СокрЛП(Строка.SESSIONERRORLOG)) Тогда
				Строка.Загружать = Ложь;
				Строка.ЗагрузкаРазрешена = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Номенклатура = Строка.Номенклатура;
		ЗаказПокупателя =  Строка.ЗаказПокупателя;
		
		//Отбор = Новый Структура();
		//Отбор.Вставить("Номенклатура",Номенклатура);
		//Отбор.Вставить("СчетНаОплату",СтрокаТЧ.ДокументСчетНаОплату);
		//Отбор.Вставить("ЗаказПокупателя",СтрокаТЧ_Услуги.ЗаказПокупателя);
		
		ЦФО = "";
		ЦФУ = Строка.ЦФУ;
		БюджетнаяСтатья = "";
		НоменклатурнаяГруппа = "";
		
		
		Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
			//СтрокаТЧ_Услуги.ЗаказПокупателя = СтрокаДБ.ЗаказПокупателя;
			ЗаказПокупателяУслуги = ЗаказПокупателя.Услуги;
			
			СтрокаЗаказПокупателяУслуги = ЗаказПокупателяУслуги.Найти(Строка.УникальныйИдентификаторЗаписи,"ИдСтроки");
			Если  СтрокаЗаказПокупателяУслуги = Неопределено Тогда
				СтрокаЗаказПокупателяУслуги = ЗаказПокупателяУслуги.Найти(Строка.Номенклатура.Наименование,"Содержание");
			КонецЕсли;
			
			
			
			Если Не СтрокаЗаказПокупателяУслуги = Неопределено Тогда
				ЦФО = СтрокаЗаказПокупателяУслуги.абс_ЦФО;
				Если ЗначениеЗаполнено(СтрокаЗаказПокупателяУслуги.абс_ЦФУ) Тогда
					ЦФУ = СтрокаЗаказПокупателяУслуги.абс_ЦФУ; 
				КонецЕсли;
				БюджетнаяСтатья = СтрокаЗаказПокупателяУслуги.СтатьяОборотов;
				Если ЗначениеЗаполнено(СтрокаЗаказПокупателяУслуги.НоменклатурнаяГруппа) Тогда
					Если СтрокаЗаказПокупателяУслуги.НоменклатурнаяГруппа.абс_СтатусНоменклатурнойГруппы = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
						НоменклатурнаяГруппа = СтрокаЗаказПокупателяУслуги.НоменклатурнаяГруппа;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЦФО) Тогда
				ЦФО = ЗаказПокупателя.ЦФО;
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗаказПокупателя.ЦФУ) Тогда
				ЦФУ = ЗаказПокупателя.ЦФУ; 
			КонецЕсли;
			Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
				БюджетнаяСтатья = ЗаказПокупателя.БюджетнаяСтатья;
			КонецЕсли;
		КонецЕсли;
		
		
		
		Если ЗначениеЗаполнено(ЦФО)
			и ЗначениеЗаполнено(ЦФУ)
			и ЗначениеЗаполнено(БюджетнаяСтатья) 
			и ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
			
			Строка.ЦФУ = ЦФУ;
			Строка.ЦФО = ЦФО;
			Строка.СтатьяОборотов = БюджетнаяСтатья;
			Строка.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		Иначе
			
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура",Строка.Номенклатура);
			
			Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа)Тогда
				СтрокаНГ = ТаблицаСоответствияНГ.Найти(Номенклатура,"Номенклатура");
				Если Не СтрокаНГ = Неопределено Тогда
					НоменклатурнаяГруппа = СтрокаНГ.НоменклатурнаяГруппа;  
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЦФУ) Тогда
				Строка.ЦФУ = ЦФУ;
				Отбор.Вставить("абс_ЦФУ",ЦФУ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЦФО) Тогда
				ЦФО = Строка.абс_Куратор.ЦФО;  
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЦФО) Тогда
				Отбор.Вставить("ЦФО",ЦФО);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.TIPKONTRAGENTA) Тогда
				Отбор.Вставить("абс_ТипКонтрагента",СокрЛП(Строка.TIPKONTRAGENTA));
			КонецЕсли;
			
			
			
			СтрокиБА = ТаблицаСоответствия.НайтиСтроки(Отбор);
			Если СтрокиБА.Количество() > 0 Тогда
				НайденнаяСтрока = СтрокиБА[0];
				
				
				Если НайденнаяСтрока<>Неопределено Тогда
					Если Не ЗначениеЗаполнено(ЦФУ) Тогда
						ЦФУ = НайденнаяСтрока.абс_ЦФУ;  
					КонецЕсли;
					//Если Не ЗначениеЗаполнено(ЦФО) Тогда
					//	ЦФО = НайденнаяСтрока.ЦФО;	 	
					//КонецЕсли;
					
					Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
						БюджетнаяСтатья = НайденнаяСтрока.СтатьяОборотов;	 	
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
						НоменклатурнаяГруппа = НайденнаяСтрока.НоменклатурнаяГруппа;	 	
					КонецЕсли;   
					
					Строка.ЦФУ = ЦФУ;
					Строка.ЦФО = ЦФО;
					Строка.СтатьяОборотов = БюджетнаяСтатья;
					
					Строка.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				КонецЕсли; 
				
			ИначеЕсли ЗначениеЗаполнено(Строка.TIPKONTRAGENTA) Тогда
				Отбор.Удалить("абс_ТипКонтрагента");
				СтрокиБА = ТаблицаСоответствия.НайтиСтроки(Отбор);
				Если СтрокиБА.Количество() > 0 Тогда
					НайденнаяСтрока = СтрокиБА[0];
					
					
					Если НайденнаяСтрока<>Неопределено Тогда
						Если Не ЗначениеЗаполнено(ЦФУ) Тогда
							ЦФУ = НайденнаяСтрока.абс_ЦФУ;  
						КонецЕсли;
						//Если Не ЗначениеЗаполнено(ЦФО) Тогда
						//	ЦФО = НайденнаяСтрока.ЦФО;	 	
						//КонецЕсли;
						Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
							БюджетнаяСтатья = НайденнаяСтрока.СтатьяОборотов;	 	
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
							НоменклатурнаяГруппа = НайденнаяСтрока.НоменклатурнаяГруппа;	 	
						КонецЕсли;   
						
						Строка.ЦФУ = ЦФУ;
						Строка.ЦФО = ЦФО;
						Строка.СтатьяОборотов = БюджетнаяСтатья;
						
						Строка.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
						
					КонецЕсли; 
					
				Иначе
					
					НайденнаяСтрока = ТаблицаСоответствия.Найти(Номенклатура,"Номенклатура");
					Если Не ЗначениеЗаполнено(ЦФО) Тогда
						ЦФО = Строка.абс_Куратор.ЦФО;	 
					КонецЕсли;
					
					Если НайденнаяСтрока<>Неопределено Тогда
						Если Не ЗначениеЗаполнено(ЦФУ) Тогда
							ЦФУ = НайденнаяСтрока.абс_ЦФУ;	 
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(ЦФО) Тогда
							ЦФО = НайденнаяСтрока.ЦФО;	 	
						КонецЕсли;
						Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
							БюджетнаяСтатья = НайденнаяСтрока.СтатьяОборотов;	 	
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
							НоменклатурнаяГруппа = НайденнаяСтрока.НоменклатурнаяГруппа;	 	
						КонецЕсли;
					КонецЕсли; 
					
					
					Строка.ЦФУ = ЦФУ;
					Строка.ЦФО = ЦФО;
					Строка.СтатьяОборотов = БюджетнаяСтатья;
					Строка.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				КонецЕсли;	
			Иначе
				
				НайденнаяСтрока = ТаблицаСоответствия.Найти(Номенклатура,"Номенклатура");
				Если Не ЗначениеЗаполнено(ЦФО) Тогда
					ЦФО = Строка.абс_Куратор.ЦФО;	 
				КонецЕсли;
				
				Если НайденнаяСтрока<>Неопределено Тогда
					Если Не ЗначениеЗаполнено(ЦФУ) Тогда
						ЦФУ = НайденнаяСтрока.абс_ЦФУ;	 
					КонецЕсли;
					
					//Если Не ЗначениеЗаполнено(ЦФО) Тогда
					//	ЦФО = НайденнаяСтрока.ЦФО;	 	
					//КонецЕсли;
					Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
						БюджетнаяСтатья = НайденнаяСтрока.СтатьяОборотов;	 	
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
						НоменклатурнаяГруппа = НайденнаяСтрока.НоменклатурнаяГруппа;	 	
					КонецЕсли;
					
				КонецЕсли; 
				
				Строка.ЦФУ = ЦФУ;
				Строка.ЦФО = ЦФО;
				Строка.СтатьяОборотов = БюджетнаяСтатья;
				Строка.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
			КонецЕсли;
		КонецЕсли;
		//////////// Заполнение агентов
		Если ЗначениеЗаполнено(Строка.Agent) Тогда
			НайденнаяСтрока = ТС_Агентов.Найти(СокрЛП(Строка.Agent),"Агент");
			
			Если НайденнаяСтрока<>Неопределено Тогда
				Строка.Агент = НайденнаяСтрока.Организация;
			КонецЕсли;
			
		КонецЕсли;
	
		
		
		
	КонецЦикла;
	
	СтруктураВозврата.Вставить("ДанныеБиллинга",ТабДанныеБиллинга); 
	СтруктураВозврата.Вставить("МассивДоговоров",МассивДоговоров);
	Возврат СтруктураВозврата;	
	
КонецФункции

Функция ВыполнитьВыгрузкуК2ВSQL(ДокСсылка) Экспорт	
		
	Перем Соединение;
	Перем Cmd;
	
	// АБС ИЗМЕНЕНО 20120803 Фролов
	// Не используем схему с выделением авансов, распределяем все на реализацию			
	//СтруктураПолей = Новый Структура("SESSIONID,FACTURENUM,SUMMA,SUMMAOPLAT,CURRENCYCODE,DOGID,TYPE_OPL");	
	СтруктураПолей = Новый Структура("SESSIONID,FACTURENUM,SUMMA,SUMMAOPLAT,CURRENCYCODE");	
	
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	
	СтруктураПодключения.Вставить("Provider"	, "kttk-1c-db");	
	СтруктураПодключения.Вставить("DataSource"	, "TransPlatformIntegration");	
	СтруктураПодключения.Вставить("UserID"		, "TransPlatformIntegration_BillingSync");	
	СтруктураПодключения.Вставить("Password"	, "5ic7sfre");

	//СтруктураПодключения.Вставить("Provider"	, "bd");	
	//СтруктураПодключения.Вставить("DataSource"	, "TransPlatformIntegration");	
	//СтруктураПодключения.Вставить("UserID"		, "sa");	
	//СтруктураПодключения.Вставить("Password"	, "AbsoluTSofT");
	
	Если Соединение = Неопределено Тогда
		Соединение = ВыполнитьПодключениеКSQL(СтруктураПодключения);
	КонецЕсли;
	
	Если Cmd = Неопределено Тогда
		Cmd = Новый COMОбъект("ADODB.Command");
		Cmd.ActiveConnection = Соединение;	
	КонецЕсли;
	
	ИмяБазы 			= "TransPlatformIntegration";
	ИмяТаблицыСессий 	= "TABLEPAYMENTBILLING";
	
	SESSIONID			= ДокСсылка.SESSIONID;
	SESSIONDATE  		= ДокСсылка.DATESESSION;
	Organization 		= ДокСсылка.Организация.Наименование;
	FACTUREDateFrom  	= Формат(ДокСсылка.НачПериода,"ДФ=yyyyMMdd");
	FACTUREDateTo  		= Формат(ДокСсылка.КонПериода,"ДФ=yyyyMMdd");
		
	Префикс = ДокСсылка.Организация.Префикс;
	Если Префикс = "КТТ" Тогда
		Префикс = "KTT";
	КонецЕсли;
	
	ТекстЗапроса = 
	"INSERT INTO ["+ИмяБазы+"].[dbo].["+ИмяТаблицыСессий+"]
	|(SESSIONID, SESSIONDATE, Organization, FACTUREDateFrom,FACTUREDateTo)
	| VALUES ('"+SESSIONID+"',
	|        '"+SESSIONDATE+"', 
	|        '"+Organization+"', 
	|        '"+FACTUREDateFrom+"', 
	|		  '"+FACTUREDateTo+"')";
		
	абс_СерверныеФункции.ОбновитьДанныеВSQL_ПоСоединению(ТекстЗапроса, СтруктураПодключения, Соединение, Cmd);
	
	ЗапросДанныеЛога = Новый Запрос(
	"ВЫБРАТЬ
	|	абс_ЛогВыгрузкиОплатРасчетК2ДанныеВыгрузка.Ссылка.SESSIONID,
	|	абс_ЛогВыгрузкиОплатРасчетК2ДанныеВыгрузка.FACTURENUM,
	|	абс_ЛогВыгрузкиОплатРасчетК2ДанныеВыгрузка.SUMMA,
	|	абс_ЛогВыгрузкиОплатРасчетК2ДанныеВыгрузка.SUMMAOPLAT,
	|	абс_ЛогВыгрузкиОплатРасчетК2ДанныеВыгрузка.CURRENCYCODE,
	|	абс_ЛогВыгрузкиОплатРасчетК2ДанныеВыгрузка.DOGID,
	|	абс_ЛогВыгрузкиОплатРасчетК2ДанныеВыгрузка.TYPE_OPL
	|ИЗ
	|	Документ.абс_ЛогВыгрузкиОплатРасчетК2.ДанныеВыгрузка КАК абс_ЛогВыгрузкиОплатРасчетК2ДанныеВыгрузка
	|ГДЕ
	|	абс_ЛогВыгрузкиОплатРасчетК2ДанныеВыгрузка.Ссылка = &Ссылка");
	
	ЗапросДанныеЛога.УстановитьПараметр("Ссылка", ДокСсылка);
	
	ВыборкаДанныеВыгрузки = ЗапросДанныеЛога.Выполнить().Выбрать();
	
	Кол = ВыборкаДанныеВыгрузки.Количество();
	
	Сч  = 0;
	
	Пока ВыборкаДанныеВыгрузки.Следующий() Цикл
						
		ЗаполнитьЗначенияСвойств(СтруктураПолей, ВыборкаДанныеВыгрузки);
		
		ТекстЗапроса = ПолучитьТекстЗапросаВыгрузкиСтрокиК2ВSQL(СтруктураПолей, Префикс);
		
		абс_СерверныеФункции.ОбновитьДанныеВSQL_ПоСоединению(ТекстЗапроса, СтруктураПодключения, Соединение, Cmd);
		
	КонецЦикла;
		
КонецФункции

Функция ПолучитьТекстЗапросаВыгрузкиСтрокиК2ВSQL(СтруктураПолей, Префикс) Экспорт

	ИмяБазы 			= "TransPlatformIntegration";
	ИмяТаблицыСессий 	= "TABLEPAYMENTBILLING";
	ИмяТаблицы 			= "TRANSPAYMENTBILLING";
	
	SUMMA 				= СтрЗаменить(""+Число(СтруктураПолей.SUMMA),Символы.НПП,"");
	SUMMA 				= СтрЗаменить(SUMMA,",",".");     
	
	SUMMAOPLAT 			= СтрЗаменить(""+Число(СтруктураПолей.SUMMAOPLAT),Символы.НПП,"");
	SUMMAOPLAT 			= СтрЗаменить(SUMMAOPLAT,",",".");
	
	// АБС ИЗМЕНЕНО 20120803 Фролов
	// Не используем схему с выделением авансов, распределяем все на реализацию	
	
	//ТекстЗапроса = 
	//"INSERT INTO ["+ИмяБазы+"].[dbo].["+ИмяТаблицы+"]
	//|(SESSIONID,FACTURENUM,SUMMA,SUMMAOPLAT,CURRENCYCODE,DOGID,TYPE_OPL
	//|)
	//| VALUES ('"+СтруктураПолей.SESSIONID+"',
	//|		  '"+СтруктураПолей.FACTURENUM+"',
	//|		  "+SUMMA+",
	//|		  "+SUMMAOPLAT+",
	//|		  '"+СтруктураПолей.CURRENCYCODE+"',
	//|		  '"+СтруктураПолей.DOGID+"',
	//|		  "+СтруктураПолей.TYPE_OPL+")"; 
	
	ТекстЗапроса = 
	"INSERT INTO ["+ИмяБазы+"].[dbo].["+ИмяТаблицы+"]
	|(SESSIONID,FACTURENUM,SUMMA,SUMMAOPLAT,CURRENCYCODE
	|)
	| VALUES ('"+СтруктураПолей.SESSIONID+"',
	|		  '"+СтруктураПолей.FACTURENUM+"',
	|		  "+SUMMA+",
	|		  "+SUMMAOPLAT+",
	|		  '"+СтруктураПолей.CURRENCYCODE+"')";  	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПредставлениеCOMCODE(Номенклатура) Экспорт 
	
	Возврат	?(ЗначениеЗаполнено(Номенклатура) И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.абс_COMCODE + " ", "");	
	
КонецФункции

// для Периодов отражения+
Функция ПолучитьПериодНДСПоДатеМесяц(ДатаПериода)
	
	НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(ДатаПериода)), " ",""), Символы.НПП, "");
	НомерМесяца = Месяц(ДатаПериода);
	НомерМесяца = ?(НомерМесяца<10, "0" + СокрЛП(НомерМесяца), СокрЛП(НомерМесяца));
	КодПоиска = СокрЛП(НомерГода) + СокрЛП(НомерМесяца);
	Элемент = Справочники.ас_ПериодыОтражения.НайтиПоКоду(КодПоиска);
	
	Возврат Элемент;
	
КонецФункции

Функция ПолучитьПериодНДСПоДатеКвартал(ДатаПериода) Экспорт
	
	НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(ДатаПериода)), " ",""), Символы.НПП, "");
	Квартал = НачалоКвартала(ДатаПериода);
    НомерМесяца = Месяц(Квартал);

	Если НомерМесяца = 1 Тогда
		НомерКвартала = 1;
	ИначеЕсли НомерМесяца = 4 Тогда
		НомерКвартала = 2;
	ИначеЕсли НомерМесяца = 7 Тогда
		НомерКвартала = 3;
	ИначеЕсли НомерМесяца = 10 Тогда
		НомерКвартала = 4;
	КонецЕсли;
	
	КодПоиска = СокрЛП(НомерГода) + СокрЛП(НомерКвартала);
	Элемент = Справочники.ас_ПериодыОтражения.НайтиПоКоду(КодПоиска);
	
	Возврат Элемент;
	
КонецФункции

Функция ПолучитьПериодНДСПоДате(ДатаПериода) Экспорт
	
	НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(ДатаПериода)), " ",""), Символы.НПП, "");
	КодПоиска = СокрЛП(НомерГода);
	Элемент = Справочники.ас_ПериодыОтражения.НайтиПоКоду(КодПоиска);
	
	Возврат Элемент;
	
КонецФункции

// для Периодов отражения-

//АБС_Стрельцов+ добавлено: 07.11.2012
//------------------------------------
//***********************************************
//
Функция ПолучитьРезультатЗапросаДляЗаполненияГрафиков(ПараметрыДанных) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	УсловияОплатыПоДоговорам_СрезПоследних.Период КАК ПериодЗаписи,
	               |	""ГрафикОплат"" КАК ВидГрафика,
	               |	УсловияОплатыПоДоговорам_СрезПоследних.Проект,
	               |	УсловияОплатыПоДоговорам_СрезПоследних.ДоговорКонтрагента,
	               |	УсловияОплатыПоДоговорам_СрезПоследних.ПериодРегистрации КАК ПериодРегистрации,
	               |	УсловияОплатыПоДоговорам_СрезПоследних.СуммаРегл КАК СуммаСНДС
	               |ПОМЕСТИТЬ ВТ_УсловияОплат
	               |ИЗ
	               |	РегистрСведений.абс_УсловияОплатыПоДоговорам.СрезПоследних(
	               |			&ДатаОплат,
	               |			Проект В (&ПроектыДоговора)
	               |				И ДоговорКонтрагента = &РасходныйДоговорДокумента
	               |				И (НЕ ОперативныеДанные)
	               |				И УсловиеОплаты = ЗНАЧЕНИЕ(Перечисление.абс_ВидыУсловийОплатПоДоговорам.ПоступлениеДДС)) КАК УсловияОплатыПоДоговорам_СрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УсловияОплатыПоДоговорам_СрезПоследних.Период КАК ПериодЗаписи,
	               |	""ГрафикПоставок"" КАК ВидГрафика,
	               |	УсловияОплатыПоДоговорам_СрезПоследних.Проект,
	               |	УсловияОплатыПоДоговорам_СрезПоследних.ДоговорКонтрагента,
	               |	УсловияОплатыПоДоговорам_СрезПоследних.ПериодРегистрации КАК ПериодРегистрации,
	               |	УсловияОплатыПоДоговорам_СрезПоследних.СуммаРегл КАК СуммаСНДС
	               |ПОМЕСТИТЬ ВТ_УсловияПоставок
	               |ИЗ
	               |	РегистрСведений.абс_УсловияОплатыПоДоговорам.СрезПоследних(
	               |			&ДатаПоставок,
	               |			Проект В (&ПроектыДоговора)
	               |				И ДоговорКонтрагента = &РасходныйДоговорДокумента
	               |				И (НЕ ОперативныеДанные)
	               |				И УсловиеОплаты = ЗНАЧЕНИЕ(Перечисление.абс_ВидыУсловийОплатПоДоговорам.Поступление)) КАК УсловияОплатыПоДоговорам_СрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_УсловияОплат.ВидГрафика КАК ВидГрафика,
	               |	ВТ_УсловияОплат.Проект,
	               |	ВТ_УсловияОплат.ПериодРегистрации КАК Период,
	               |	ВТ_УсловияОплат.СуммаСНДС
	               |ИЗ
	               |	ВТ_УсловияОплат КАК ВТ_УсловияОплат
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_УсловияПоставок.ВидГрафика,
	               |	ВТ_УсловияПоставок.Проект,
	               |	ВТ_УсловияПоставок.ПериодРегистрации,
	               |	ВТ_УсловияПоставок.СуммаСНДС
	               |ИЗ
	               |	ВТ_УсловияПоставок КАК ВТ_УсловияПоставок
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидГрафика,
	               |	Период
	               |ИТОГИ ПО
	               |	ВидГрафика
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Для каждого ЗначениеПараметра Из ПараметрыДанных Цикл
		Запрос.УстановитьПараметр(ЗначениеПараметра.Ключ, ЗначениеПараметра.Значение);		
	КонецЦикла;			   
		
	Возврат Запрос.Выполнить();	
	
КонецФункции

Функция НайтиПлановыйГрафик(ДоговорКонтрагента, Проект, ПараметрыДокумента, ПериодРегистрации = Неопределено, ДатаДокумента) Экспорт
	
	Если ДатаДокумента = '0001-01-01' Или ДатаДокумента = '0001-01-01-00-00-00' Тогда
		ДатаДокумента = КонецДня(ТекущаяДата());
	КонецЕСли;
	
	Если ПериодРегистрации = '0001-01-01' Или ПериодРегистрации = '0001-01-01-00-00-00' Тогда
		ПериодРегистрации = НачалоМесяца(ТекущаяДата());
	КонецЕСли;
	
	Если ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Проект = Справочники.Проекты.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОперативныеДанные = Неопределено;
	УсловиеОплаты = Неопределено;
	
	Если ПараметрыДокумента.Свойство("ОперативныеДанные", ОперативныеДанные) Тогда
		Если ОперативныеДанные = Неопределено Тогда
			Возврат Неопределено;
		КонецЕСли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Если ПараметрыДокумента.Свойство("УсловиеОплаты", УсловиеОплаты) Тогда
		Если УсловиеОплаты = Неопределено Тогда
			Возврат Неопределено;
		КонецЕСли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ОперативныеДанные", ОперативныеДанные);
	Запрос.УстановитьПараметр("УсловиеОплаты", УсловиеОплаты);
	Запрос.УстановитьПараметр("ДатаДокумента", КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ДатаСреза", Новый Граница(КонецДня(ДатаДокумента), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УсловияОплатыПоДоговорам_СрезПоследних.Регистратор КАК ПлановыйГрафик
	               |ИЗ
	               |	РегистрСведений.абс_УсловияОплатыПоДоговорам.СрезПоследних(
	               |			&ДатаСреза,
	               |			ДоговорКонтрагента = &ДоговорКонтрагента
	               |				И Проект = &Проект
	               |				И ОперативныеДанные = &ОперативныеДанные
	               |				И УсловиеОплаты = &УсловиеОплаты
	               |				И ВЫБОР
	               |					КОГДА (НЕ &ПериодРегистрации = НЕОПРЕДЕЛЕНО)
	               |						ТОГДА ПериодРегистрации = &ПериодРегистрации
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК УсловияОплатыПоДоговорам_СрезПоследних
	               |ГДЕ
	               |	УсловияОплатыПоДоговорам_СрезПоследних.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УсловияОплатыПоДоговорам_СрезПоследних.Регистратор.МоментВремени УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	РезультатЗапроса = Запрос.Выполнить();
				   
	ЕСли Не ПериодРегистрации = Неопределено Тогда			   
		ВыборкаДанных = РезультатЗапроса.Выбрать();
		Если ВыборкаДанных.Следующий() Тогда
			Возврат ВыборкаДанных.ПлановыйГрафик;
		Иначе
			Возврат Неопределено;
		КонецЕСли;
	Иначе
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПлановыйГрафик");
	КонецЕсли;
	
КонецФункции

//----------------------------------------------------
//АБС_Стрельцов-

Функция ПроверитьРФ(ДанныеСтроки)
	
	РФ    = Справочники.КлассификаторСтранМира.Россия;
	
	Если ДанныеСтроки.Вид = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица ИЛИ
	Не УправлениеКонтактнойИнформацией.ОпределитьДляОбъектаРоссийскийАдрес(ДанныеСтроки) Тогда
	   РФ = "";	
	КонецЕсли;
	
	Возврат РФ;
	
КонецФункции

Функция ПроверитьНеобходимостьВыгрузки(ДанныеСтроки)
	
	Если ДанныеСтроки.Тип <> Перечисления.ТипыКонтактнойИнформации.Адрес 
		ИЛИ ТипЗнч(ДанныеСтроки.Объект) <>  Тип("СправочникСсылка.Контрагенты") Тогда  
		
		Возврат Ложь;
		
	КонецЕсли;
			
	Выгружать = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
		Выгружать = Истина;
	Иначе
		Выгружать = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Поле1) И
		Не ЗначениеЗаполнено(ДанныеСтроки.Поле2) И
		Не ЗначениеЗаполнено(ДанныеСтроки.Поле3) И
		Не ЗначениеЗаполнено(ДанныеСтроки.Поле4) И
		Не ЗначениеЗаполнено(ДанныеСтроки.Поле5) И
		Не ЗначениеЗаполнено(ДанныеСтроки.Поле6) И
		Не ЗначениеЗаполнено(ДанныеСтроки.Поле7) И
		Не ЗначениеЗаполнено(ДанныеСтроки.Поле8) И
		Не ЗначениеЗаполнено(ДанныеСтроки.Поле9) Тогда
		
		Выгружать = Ложь;
		
	КонецЕсли;
		
	
	Возврат Выгружать;
	
КонецФункции

Функция ПолучитьТекстЗапросаВыгрузкиЗаписиКонтактнойИнформации(СтруктураПолей) Экспорт

	ИмяБазы 			= "TransPlatformIntegration";
	ИмяТаблицы 			= "Kontractors_Address";
	
	ModifyDate = Формат(СтруктураПолей.ModifyDate,"ДФ=yyyyMMdd");
	Если Не ЗначениеЗаполнено(ModifyDate) Тогда
		ModifyDate = '00010101';
	КонецЕсли;
	
	ТекстЗапроса = 
	"INSERT INTO ["+ИмяБазы+"].[dbo].["+ИмяТаблицы+"]
	|(ID,Type,TypeId,COUNTRY, CITY, STREET, STATE, COUNTY, HOUSE, BUILDING, FLAT, ZIPCODE, CreateDate, ModifyDate
	|)
	| VALUES ('"+СтруктураПолей.ID+"',
	|		  '"+СтруктураПолей.Type+"',
	|		  '"+СтруктураПолей.TypeId+"',
	|		  '"+СтруктураПолей.COUNTRY+"',
	|		  '"+СтруктураПолей.CITY+"',
	|		  '"+СтруктураПолей.STREET+"',
	|		  '"+СтруктураПолей.STATE+"',
	|		  '"+СтруктураПолей.COUNTY+"',
	|		  '"+СтруктураПолей.HOUSE+"',
	|		  '"+СтруктураПолей.BUILDING+"',
	|		  '"+СтруктураПолей.FLAT+"',
	|		  '"+СтруктураПолей.ZIPCODE+"',
	|		  '"+Формат(СтруктураПолей.CreateDate,"ДФ='yyyyMMdd ЧЧ:мм:сс'")+"',
	|		  '"+ModifyDate+"')";  	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаВыгрузкиЗаписиКонтактнойИнформацииUpdate(СтруктураПолей) Экспорт

	ИмяБазы 			= "TransPlatformIntegration";
	ИмяТаблицы 			= "Kontractors_Address";
	
	ModifyDate = Формат(СтруктураПолей.ModifyDate,"ДФ=yyyyMMdd");
	Если Не ЗначениеЗаполнено(ModifyDate) Тогда
		ModifyDate = '00010101';
	КонецЕсли;
	
	ТекстЗапроса = 
	"UPDATE ["+ИмяБазы+"].[dbo].["+ИмяТаблицы+"]	
	|SET Type = '"+СтруктураПолей.Type+"',
	|COUNTRY = '"+СтруктураПолей.COUNTRY+"',
	|CITY = '"+СтруктураПолей.CITY+"',
	|STREET = '"+СтруктураПолей.STREET+"',
	|STATE = '"+СтруктураПолей.STATE+"',
	|COUNTY = '"+СтруктураПолей.COUNTY+"',
	|HOUSE = '"+СтруктураПолей.HOUSE+"',
	|BUILDING = '"+СтруктураПолей.BUILDING+"',
	|FLAT = '"+СтруктураПолей.FLAT+"',
	|ZIPCODE = '"+СтруктураПолей.ZIPCODE+"',
	|ModifyDate = '"+ModifyDate+"'
	| WHERE  ID = '"+СтруктураПолей.ID+"' 
	| AND TypeId = "+Число(СтруктураПолей.TypeId); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВыполнитьВыгрузкуКонтактнойИнформацииВSQL(КИ) Экспорт	
		
	Перем Соединение;
	Перем Cmd;
		
	Если Не Константы.абс_ИспользоватьСинхронизациюКонтактнойИнформации.Получить() Тогда
		Возврат Ложь;	
	КонецЕсли;

	//СтруктураПолей = Новый Структура("ID,Type,TypeId,COUNTRY,COUNTRYID, CITY, CITYId, STREET, STREETId, STATE, STATEId, COUNTY, COUNTYId, HOUSE, BUILDING, FLAT, ZIPCODE, EMAIL, URL, PHONE, TELEFAX, ModifyDate");	
	
	СтруктураПолей = Новый Структура("ID,Type,TypeId,COUNTRY, CITY, STREET, STATE, COUNTY, HOUSE, BUILDING, FLAT, ZIPCODE, ModifyDate");	
		
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	
	СтруктураПодключения.Вставить("Provider","kttk-1c-db");	
	СтруктураПодключения.Вставить("DataSource","TransPlatformIntegration");	
	СтруктураПодключения.Вставить("UserID","abs_dbo");	
	СтруктураПодключения.Вставить("Password","yHGHivs");

	//СтруктураПодключения.Вставить("Provider"	, "bd");	
	//СтруктураПодключения.Вставить("DataSource"	, "TransPlatformIntegration");	
	//СтруктураПодключения.Вставить("UserID"		, "sa");	
	//СтруктураПодключения.Вставить("Password"	, "AbsoluTSofT");
	//
	Если Соединение = Неопределено Тогда
		Соединение = ВыполнитьПодключениеКSQLКонтактнаяИнформация(СтруктураПодключения);
	КонецЕсли;
	
	Если Соединение = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Cmd = Неопределено Тогда
		Cmd = Новый COMОбъект("ADODB.Command");
		Cmd.ActiveConnection = Соединение;	
	КонецЕсли;
	
	ИмяБазы 			= "TransPlatformIntegration";
	ИмяТаблицыСессий 	= "Kontractors_Address";
	
	Для Каждого ЗаписьКИ Из КИ Цикл
		
		Если ПроверитьНеобходимостьВыгрузки(ЗаписьКИ) Тогда
			
			СтруктураПолей.ID			= СокрЛП(ЗаписьКИ.Объект.Код);
			СтруктураПолей.Type  		= Лев(СокрЛП(ЗаписьКИ.Вид), 25);
			СтруктураПолей.TypeId 		= СокрЛП(ЗаписьКИ.Вид.Код);
			СтруктураПолей.ModifyDate   = ТекущаяДата();
			СтруктураПолей.COUNTRY	    = СокрЛП(?(ЗначениеЗаполнено(ЗаписьКИ.Объект.абс_Страна), ЗаписьКИ.Объект.абс_Страна, ПроверитьРФ(ЗаписьКИ)));
			СтруктураПолей.CITY		    = СокрЛП(ЗаписьКИ.Поле4);
			СтруктураПолей.STREET		= СокрЛП(ЗаписьКИ.Поле6);
			СтруктураПолей.STATE		= СокрЛП(ЗаписьКИ.Поле2);
			СтруктураПолей.COUNTY		= СокрЛП(ЗаписьКИ.Поле3);
			СтруктураПолей.HOUSE		= СокрЛП(ЗаписьКИ.Поле7);
			СтруктураПолей.BUILDING		= СокрЛП(ЗаписьКИ.Поле8);
			СтруктураПолей.FLAT			= СокрЛП(ЗаписьКИ.Поле9);
			СтруктураПолей.ZIPCODE		= СокрЛП(ЗаписьКИ.Поле1);  
			
			
			Попытка	
				ТекстЗапроса = 
				"SELECT * FROM [TransPlatformIntegration].[dbo].[Kontractors_Address] WHERE  ID = '"+СтруктураПолей.ID+"' AND TypeId = "+Число(СтруктураПолей.TypeId);
				Таб= абс_СерверныеФункции.ЗапросВТаблицуSQL(ТекстЗапроса,СтруктураПодключения);
				Если Таб.Количество()>0 Тогда
					ТекстЗапроса = ПолучитьТекстЗапросаВыгрузкиЗаписиКонтактнойИнформацииUpdate(СтруктураПолей);			
				Иначе
					ТекстЗапроса = ПолучитьТекстЗапросаВыгрузкиЗаписиКонтактнойИнформации(СтруктураПолей); 
				КонецЕсли;
				ЗаписьКИ.абс_Синхронизировано = ОбновитьДанныеВSQL_ПоСоединениюКонтактнаяИнформация(ТекстЗапроса, СтруктураПодключения, Соединение, Cmd);
				
			Исключение
			КонецПопытки;
	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьВыгрузкуКонтактнойИнформацииВSQLЗапись(КИ) Экспорт	
		
	Перем Соединение;
	Перем Cmd;
	
	Если Не Константы.абс_ИспользоватьСинхронизациюКонтактнойИнформации.Получить() Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	абс_Синхронизировано = Ложь;
	
	//СтруктураПолей = Новый Структура("ID,Type,TypeId,COUNTRY,COUNTRYID, CITY, CITYId, STREET, STREETId, STATE, STATEId, COUNTY, COUNTYId, HOUSE, BUILDING, FLAT, ZIPCODE, EMAIL, URL, PHONE, TELEFAX, ModifyDate");	
	
	//+++ Григорьев Д.В. (#77114031), в структуру полей добавлено поле CreateDate
	СтруктураПолей = Новый Структура("ID, Type, TypeId, COUNTRY, CITY, STREET, STATE, COUNTY, HOUSE, BUILDING, FLAT, ZIPCODE, ModifyDate, CreateDate");	
	//--- Григорьев Д.В. (#77114031), в структуру полей добавлено поле CreateDate
	
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	СтруктураПодключения.Вставить("Provider","kttk-1c-db");	
	СтруктураПодключения.Вставить("DataSource","TransPlatformIntegration");	
	СтруктураПодключения.Вставить("UserID","abs_dbo");	
	СтруктураПодключения.Вставить("Password","yHGHivs");

	//СтруктураПодключения.Вставить("Provider"	, "bd");	
	//СтруктураПодключения.Вставить("DataSource"	, "TransPlatformIntegration");	
	//СтруктураПодключения.Вставить("UserID"		, "sa");	
	//СтруктураПодключения.Вставить("Password"	, "AbsoluTSofT");
	//
	Если ПроверитьНеобходимостьВыгрузки(КИ) Тогда
		СтруктураПолей.ID			= СокрЛП(КИ.Объект.Код);
		СтруктураПолей.Type  		= Лев(СокрЛП(КИ.Вид), 25);
		СтруктураПолей.TypeId 		= СокрЛП(КИ.Вид.Код);
		СтруктураПолей.ModifyDate   = ТекущаяДата(); //КИ.Период;
		СтруктураПолей.COUNTRY	    = СокрЛП(КИ.Объект.абс_Страна);
		СтруктураПолей.CITY		    = СокрЛП(КИ.Поле4);
		СтруктураПолей.STREET		= СокрЛП(КИ.Поле6);
		СтруктураПолей.STATE		= СокрЛП(КИ.Поле2);
		СтруктураПолей.COUNTY		= СокрЛП(КИ.Поле3);
		СтруктураПолей.HOUSE		= СокрЛП(КИ.Поле7);
		СтруктураПолей.BUILDING		= СокрЛП(КИ.Поле8);
		СтруктураПолей.FLAT			= СокрЛП(КИ.Поле9);
		СтруктураПолей.ZIPCODE		= СокрЛП(КИ.Поле1);
		//+++ Григорьев Д.В. (#77114031)
		СтруктураПолей.CreateDate	= КИ.Период;
		//--- Григорьев Д.В. (#77114031)
		Попытка
			//+++ Григорьев Д.В. (#77114031), закомментировано в связи с выгрузкой в TPI отдельными строками
			//
			//ТекстЗапроса = 
			//	"SELECT * FROM [TransPlatformIntegration].[dbo].[Kontractors_Address] WHERE  ID = '"+СтруктураПолей.ID+"' AND TypeId = "+Число(СтруктураПолей.TypeId);
			//Таб= абс_СерверныеФункции.ЗапросВТаблицуSQL(ТекстЗапроса,СтруктураПодключения);
			//Если Таб.Количество()>0 Тогда
			//	ТекстЗапроса = ПолучитьТекстЗапросаВыгрузкиЗаписиКонтактнойИнформацииUpdate(СтруктураПолей);			
			//Иначе
			//	ТекстЗапроса = ПолучитьТекстЗапросаВыгрузкиЗаписиКонтактнойИнформации(СтруктураПолей); 
			//КонецЕсли;
			//
			//--- Григорьев Д.В. (#77114031)
			ТекстЗапроса = ПолучитьТекстЗапросаВыгрузкиЗаписиКонтактнойИнформации(СтруктураПолей); 			
			абс_Синхронизировано = ОбновитьДанныеВSQLКонтактнаяИнформация(ТекстЗапроса, СтруктураПодключения);			
		Исключение
		КонецПопытки;

		Возврат абс_Синхронизировано;
	Иначе 
		Возврат Ложь;	
	КонецЕсли;

КонецФункции

Функция ПолучитьПаспортныеДанныеИзИСУЗК(КодФЛ, ДатаСреза, СообщениеОбОшибке="") Экспорт
	
	Прокси = Неопределено; 
	//АБС Замена Попов
	//
	//// Создание описания по WSDL файлу	
	//Определение = Новый WSОпределения("https://isup-ttk.transtk.ru/persondata/ws/persondata.1cws?wsdl", "EISUP_PersonalData", "EISUP_PersonalData"); 		
	//// Создание прокси для обращения к сервису и фабрике XDTO
	//Прокси = Новый WSПрокси(Определение, "http://www.abs-soft.ru", "abs_PersonData", "abs_PersonDataSoap"); 
	
	
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_PersonData();	
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Неопределено;
	КонецЕсли;
    //\\Абс Замена Попов
	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
		
	ОтветXDTO = Прокси.GetPersonData(КодФЛ, ДатаСреза);
		
	Если ЗначениеЗаполнено(ОтветXDTO.Error) Тогда	
		СообщениеОбОшибке = ОтветXDTO.Error;
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Вид", Строка(ОтветXDTO.PersonData.View));
	СтруктураВозврата.Вставить("Серия", Строка(ОтветXDTO.PersonData.Series));
	СтруктураВозврата.Вставить("Номер", СтрЗаменить(СтрЗаменить(СокрЛП(Строка(ОтветXDTO.PersonData.Number)),Символы.НПП,"")," ",""));
	СтруктураВозврата.Вставить("ДатаВыдачи", Строка(ОтветXDTO.PersonData.DateOfIssue));
	СтруктураВозврата.Вставить("Выдан", Строка(ОтветXDTO.PersonData.WhoIssued));
	
	Возврат СтруктураВозврата;
	
КонецФункции

//АБС ВСТАВКА 39137  18.03.2014 15:02:27  Стрельцов 
Функция НайтиПодчиненныйСчетНаОплату(ДокументСчетНаОплатуОснование) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументСчетНаОплатуОснование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДокументыСчетНаОплату.Ссылка
		|ИЗ
		|	Документ.абс_СчетНаОплату КАК ДокументыСчетНаОплату
		|ГДЕ
		|	ДокументыСчетНаОплату.ДокументОснование = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументыСчетНаОплату.МоментВремени УБЫВ";

	Запрос.УстановитьПараметр("ДокументОснование", ДокументСчетНаОплатуОснование);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиПодчиненныеСчетаНаОплатуИзППИ(ДокументППИ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.НомерСтроки КАК НомерСтрокиППИ,
		|	ЗаявкаНаРасходованиеСредствОплаты.НомерСтроки КАК НомерСтрокиЗРДС
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
		|			ПО (абс_СчетНаОплату.ДокументОснование = ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату)
		|				И (абс_СчетНаОплату.Налог)
		|				И (абс_СчетНаОплату.Проведен)
		|		ПО ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа = ЗаявкаНаРасходованиеСредствОплаты.Ссылка
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ДокументППИ);

	Результат = Запрос.Выполнить();

	Возврат Результат;	
	
КонецФункции
//\\АБС ВСТАВКА 39137 КОНЕЦ

Функция СформироватьФинансовыйОтчет(Отчет, НачалоПериода, КонецПериода, ДатаРассчета, МассивОрганизаций, ОписаниеОшибки) Экспорт
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.ЗагрузитьЗначения(МассивОрганизаций);
	ОбработкаФормирования = Обработки.абс_ФормированиеОтчетовПоПоказателям.Создать();
	ОбработкаФормирования.НачалоПериода = НачалоПериода;
	ОбработкаФормирования.КонецПериода = КонецПериода;
	ОбработкаФормирования.ДатаРассчета = ДатаРассчета;
	ОбработкаФормирования.Организация = СписокОрганизаций;
	ОбработкаФормирования.Отчет = Отчет;
	ОбработкаФормирования.ПересчитыватьПоказатели = Истина;
	ОбработкаФормирования.Сформировать();
	Если ОбработкаФормирования.Отказ Тогда
		ОписаниеОшибки = ОбработкаФормирования.ОписаниеОшибки;
		Возврат Ложь;
	Иначе
		Возврат ОбработкаФормирования.РезультатОтчета.Выгрузить();
	КонецЕсли;
КонецФункции

Функция Печать(СсылкаНаДокумент, ИмяМакета, ТекстЗапроса, ТекстМодуляЗаполненияШаблона = "") Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
    Запрос.УстановитьПараметр("Ссылка",				СсылкаНаДокумент);
    Запрос.УстановитьПараметр("Адрес",				Перечисления.ТипыКонтактнойИнформации.Адрес);
    Запрос.УстановитьПараметр("АдресЮридический",	Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
    Запрос.УстановитьПараметр("ФизЛицо",			СсылкаНаДокумент.Сотрудник.ФизЛицо);
    Запрос.УстановитьПараметр("Дата",				СсылкаНаДокумент.Дата);
		
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Сообщить("Печать выполнить не удалось");
		Возврат Неопределено;
	КонецПопытки;
	
	ВыборкаРезультатЗапроса = РезультатЗапроса.Выбрать();	
	Если Не ВыборкаРезультатЗапроса.Следующий() Тогда
		Сообщить("Результат запроса пустой. Печать невозможна.");
		Возврат Неопределено;
	КонецЕсли;
	
	Select = Неопределено;
	Handler = Новый Структура;
	//ПорядковыйНомер = 0;
	
	//ПорядковыйНомер = ПорядковыйНомер +1;
	
	Макет      = ПолучитьОбщийМакет(ИмяМакета);
	ПутьКФайлу = ПолучитьИмяВременногоФайла("doc");
	ДвоичныеДанныеШаблона = Макет;
	ДвоичныеДанныеШаблона.Записать(ПутьКФайлу);
	
	Попытка 
		COMОбъект = Новый COMОбъект("Word.Application"); 
	Исключение 
		
	КонецПопытки; 
	
	Попытка 
		//Сообщить(ПутьКФайлу);
		ДокументДляСохранения = COMОбъект.Documents.Open(ПутьКФайлу); 
		//Сообщить(ДокументДляСохранения);
	Исключение 
		COMОбъект.Quit(0); 
		COMОбъект = Неопределено; 
		УдалитьФайлы(ПутьКФайлу); 
		ВызватьИсключение(НСтр("ru = 'Ошибка при открытии шаблона.'")+ОписаниеОшибки()); 
	КонецПопытки; 
	
	Select = COMОбъект.Selection;
	//Select.InsertFile(ПутьКФайлу);
	
	//Выполнить(ТекстМодуляЗаполненияШаблона);
	
	Docum =	СоздатьДокумент(ВыборкаРезультатЗапроса, ДокументДляСохранения);
	
	Попытка
		Docum.SaveAs(СокрЛП(ПутьКФайлу));
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	
	Если COMОбъект <> 0 Тогда
		COMОбъект.Quit(0); 
		COMОбъект = Неопределено; 
	КонецЕсли;
	
		Попытка
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу));
			Handler.Вставить("АдресКФайлу", АдресВоВременномХранилище);
			//Handler.Вставить("Файл", Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПутьКФайлу), Новый СжатиеДанных()));
		Исключение
		КонецПопытки;
		
		Возврат Handler;

КонецФункции

Функция СоздатьДокумент(Выборка, ДокументДляСохранения)	
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	//Если Выборка.Следующий() Тогда	
	
	ПолнаяДатаДокумента = Формат(Выборка.Дата, "ДФ='дд ММММ гг'");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки-ПервыйРазделитель)," ")+ПервыйРазделитель;
	ДатаДокументаДень     = Лев(ПолнаяДатаДокумента,ПервыйРазделитель-1);
	ДатаДокументаМесяц    = Сред(ПолнаяДатаДокумента,ПервыйРазделитель+1,ВторойРазделитель-ПервыйРазделитель-1);
	ДатаДокументаГод      = Прав(ПолнаяДатаДокумента,ДлинаСтроки-ВторойРазделитель);
	
	ДокументДляСохранения.Variables.Item("ДатаДень").Value  = ?(ДатаДокументаДень <> "", ДатаДокументаДень, "___"); 
	ДокументДляСохранения.Variables.Item("ДатаМесяц").Value = ?(ДатаДокументаМесяц <> "", ДатаДокументаМесяц, "_________");
	ДокументДляСохранения.Variables.Item("ДатаГод").Value   = ?(ДатаДокументаГод <> "", Прав(ДатаДокументаГод, 1), "_");
	
	ДокументДляСохранения.Variables.Item("Номер").Value          = ?(СокрЛП(Выборка.Номер) <> "", СокрЛП(Выборка.Номер), "_____");
	
	ДокументДляСохранения.Variables.Item("ПодрядчикФИО").Value   = ?(СокрЛП(Выборка.РаботникНаименование) <> "", СокрЛП(Выборка.РаботникНаименование), "____________________________________");
	
	ДокументДляСохранения.Variables.Item("ДатаНачала").Value     = "   " + Формат(Выборка.ДатаНачала, "ДФ=dd.MM.yyyy");
	ДокументДляСохранения.Variables.Item("ДатаОкончания").Value  = "   " + Формат(Выборка.ДатаОкончания, "ДФ=dd.MM.yyyy");
	
	//Вал = мВалютаРегламентированногоУчета;
	ПараметрыПрописиНаРусском = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
	
	СуммаЗаРаботу = ОбщегоНазначения.ФорматСумм(Выборка.СуммаЗаРаботу) + " ("
	+ ЧислоПрописью(Выборка.СуммаЗаРаботу, "L=ru_RU", ПараметрыПрописиНаРусском) +")";
	ДокументДляСохранения.Variables.Item("Сумма").Value = СуммаЗаРаботу;
	ДокументДляСохранения.Variables.Item("ЧастотаВыплат").Value = НРег(Выборка.ЧастотаВыплат);
		
	СообщениеОбОшибке = "";
	Попытка
		//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
		Если абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
			СтруктураДанных = абс_WebServiceСервер.ИнициализацияDogovor_PersonData_Get(Выборка.Номер, Выборка.Дата, СообщениеОбОшибке);
		Иначе	
			СтруктураДанных = Неопределено;
		КонецЕсли;
		//\\АБС ВСТАВКА №40078 КОНЕЦ
	Исключение
		Сообщить(СообщениеОбОшибке);
		СообщениеОбОшибке = "";
	КонецПопытки;	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Сообщить(СообщениеОбОшибке);
		СообщениеОбОшибке = "";
	КонецЕсли;  
	Если СтруктураДанных <> Неопределено Тогда			
		
		ДокументДляСохранения.Variables.Item("ПаспортСерияНомер").Value = ?(ЗначениеЗаполнено(СтруктураДанных.Passport), СтруктураДанных.Passport, "_______ _________________");	
		//ДокументДляСохранения.Variables.Item("ПаспортНомер").Value = ?(ЗначениеЗаполнено(Выборка.ДокументНомер), Выборка.ДокументНомер, "_________________");
		//ДокументДляСохранения.Variables.Item("КемВыдан").Value        = ?(ЗначениеЗаполнено(Выборка.ДокументКемВыдан), Выборка.ДокументКемВыдан, "____________________");
		//ДокументДляСохранения.Variables.Item("КогдаВыдан").Value      = ?(ЗначениеЗаполнено(Выборка.ДокументДатаВыдачи), Формат(Выборка.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy"), "__________________________");		
		ДокументДляСохранения.Variables.Item("ИНН").Value             = ?(ЗначениеЗаполнено(Выборка.ИНН), Выборка.ИНН, "__________________________");
		ДокументДляСохранения.Variables.Item("СНИЛС").Value           = ?(ЗначениеЗаполнено(Выборка.СНИЛС), Выборка.СНИЛС, "__________________________");
		ДокументДляСохранения.Variables.Item("ДатаРождения").Value    = ?(ЗначениеЗаполнено(СтруктураДанных.DateOfBirth), СтруктураДанных.DateOfBirth, "_____________");
		//?(ЗначениеЗаполнено(Выборка.ДатаРождения), Выборка.ДатаРождения, "_____________");
		ДокументДляСохранения.Variables.Item("МестоРождения").Value   = ?(ЗначениеЗаполнено(Выборка.МестоРождения), Выборка.МестоРождения, "___________________________________________");
		ДокументДляСохранения.Variables.Item("АдресПроживания").Value = ?(ЗначениеЗаполнено(СтруктураДанных.Address), СтруктураДанных.Address,  "___________________________________________");
		//?(ЗначениеЗаполнено(Выборка.АдресМестаЖительства) И СокрЛП(Выборка.АдресМестаЖительства) <> "", Выборка.АдресМестаЖительства, "__________________________" + Символы.ПС + "_____________");
		
	Иначе
		
		ДокументДляСохранения.Variables.Item("ПаспортСерияНомер").Value =  "_______ _________________                   Выдан (кем выдан, дата выдачи) ______________________";			
		ДокументДляСохранения.Variables.Item("ИНН").Value             = ?(ЗначениеЗаполнено(Выборка.ИНН), Выборка.ИНН, "__________________________");
		ДокументДляСохранения.Variables.Item("СНИЛС").Value           = ?(ЗначениеЗаполнено(Выборка.СНИЛС), Выборка.СНИЛС, "__________________________");
		ДокументДляСохранения.Variables.Item("ДатаРождения").Value    = "_____________";
		ДокументДляСохранения.Variables.Item("МестоРождения").Value   = ?(ЗначениеЗаполнено(Выборка.МестоРождения), Выборка.МестоРождения, "___________________________________________");
		ДокументДляСохранения.Variables.Item("АдресПроживания").Value = "___________________________________________";                                                      
		
	КонецЕсли; 	
	
	//	КонецЕсли;
	
	ДокументДляСохранения.Fields.Update();
	ДокументДляСохранения.Fields.UnLink();
	
	ДокументДляСохранения.Application.Visible=1;
	
	Возврат ДокументДляСохранения;	
	
КонецФункции

//**** Гетц. Проектный учет 03.06.13
Функция ЗаписатьПроектПривилегированныйРежимСервер(СтруктураПараметров) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	ПроектОбъект = Справочники.Проекты.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ПроектОбъект, СтруктураПараметров);
	
	Для Каждого СтрокаЗаказ Из СтруктураПараметров.МассивЗаказов Цикл 
		НоваяСтрока = ПроектОбъект.абс_Заказы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаказ);
	КонецЦикла;
	
	Для Каждого СтрокаИсполнитель Из СтруктураПараметров.МассивИсполнителей Цикл 
		НоваяСтрока = ПроектОбъект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсполнитель);
	КонецЦикла;
	
	Попытка
		ПроектОбъект.Записать();
		СтруктураПараметров.Вставить("ПроектКод", ПроектОбъект.Код);
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	Возврат "";
КонецФункции 

//АБС ВСТАВКА №000019577 НАЧАЛО
Процедура абс_ВыгрузитьОстаткиПоСчетам() Экспорт
	
	Если Константы.абс_ВыгрузитьОстаткиПоСчетамВыкл.Получить() Тогда
		Возврат;
	КонецЕсли;	
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	ss=0;
	
	З = Новый Запрос ("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                  |	ДоговорыКонтрагентов.абс_ВстречныйДоговор,
	                  |	ДоговорыКонтрагентов.Ссылка КАК ДохДоговор,
	                  |	ДоговорыКонтрагентов.ВестиПоДокументамРасчетовСКонтрагентом
	                  |ПОМЕСТИТЬ Договоры
	                  |ИЗ
	                  |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                  |ГДЕ
	                  |	ДоговорыКонтрагентов.абс_ВстречныйДоговор.Ссылка ЕСТЬ НЕ NULL 
	                  |	И ДоговорыКонтрагентов.Организация = &Организация
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                  |	Договоры.ДохДоговор.Номер КАК номерДоговора,
	                  |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Документ.Номер КАК номерДокумента,
	                  |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Контрагент.Код,
	                  |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Документ.СуммаДокумента КАК СуммаДокумента,
	                  |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код КАК кодВалюты,
	                  |	ВЫБОР
	                  |		КОГДА РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код = ""643""
	                  |			ТОГДА РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток
	                  |		ИНАЧЕ РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток
	                  |	КОНЕЦ КАК Остаток,
	                  |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Документ.Дата КАК датаДокумента,
	                  |	1 КАК DebtTTK,
	                  |	NULL КАК Счет,
	                  |	NULL КАК СчетПредставление,
	                  |	Договоры.ВестиПоДокументамРасчетовСКонтрагентом КАК ПоДокументамРасчетов
	                  |ИЗ
	                  |	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки(, Организация = &Организация) КАК РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки
	                  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Договоры КАК Договоры
	                  |		ПО РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента = Договоры.абс_ВстречныйДоговор
	                  |
	                  |ОБЪЕДИНИТЬ ВСЕ
	                  |
	                  |ВЫБРАТЬ
	                  |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента.Номер,
	                  |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ.Номер,
	                  |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Контрагент.Код,
	                  |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ.СуммаДокумента,
	                  |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код,
	                  |	ВЫБОР
	                  |		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код = ""643""
	                  |			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток
	                  |		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток
	                  |	КОНЕЦ,
	                  |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ.Дата,
	                  |	0,
	                  |	NULL,
	                  |	NULL,
	                  |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	                  |ИЗ
	                  |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки(
	                  |			,
	                  |			Организация = &Организация
	                  |				И (НЕ Документ.Номер ПОДОБНО ""КТТ%"")) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки
	                  |
	                  |ОБЪЕДИНИТЬ ВСЕ
	                  |
	                  |ВЫБРАТЬ
	                  |	ХозрасчетныйОстатки.Субконто2.Номер,
	                  |	""-"",
	                  |	ХозрасчетныйОстатки.Субконто1.Код,
	                  |	0,
	                  |	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов.Код,
	                  |	ВЫБОР
	                  |		КОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов.Код = ""643""
	                  |			ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	                  |		ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	                  |	КОНЕЦ,
	                  |	NULL,
	                  |	2,
	                  |	NULL,
	                  |	NULL,
	                  |	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВестиПоДокументамРасчетовСКонтрагентом
	                  |ИЗ
	                  |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	                  |			,
	                  |			счет В (&счАвансы),
	                  |			,
	                  |			Организация = &Организация
	                  |				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).абс_ВидДеятельности = &абс_ВидДеятельности) КАК ХозрасчетныйОстатки");
	         	
	З.УстановитьПараметр("Организация",Справочники.Организации.НайтиПоНаименованию("КТТК",Истина));
	З.УстановитьПараметр("абс_ВидДеятельности",Справочники.абс_ВидыДеятельностиКТТК.НайтиПоНаименованию("Связь"));
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.22"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.32"));
	
	З.УстановитьПараметр("счАвансы",МассивСчетов);
	            	
	Таб = З.Выполнить().Выгрузить();
	Соединение = Неопределено;
	Cmd = Неопределено;

	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");	
	СтруктураПодключения.Вставить("Provider"	, "kttk-1c-db");	
	СтруктураПодключения.Вставить("DataSource"	, "TransPlatformIntegration");	
	СтруктураПодключения.Вставить("UserID"		, "abs_dbo");	
	СтруктураПодключения.Вставить("Password"	, "yHGHivs");
	                	
	Соединение = ВыполнитьПодключениеКSQL(СтруктураПодключения);
	
	Если Cmd=Неопределено Тогда
		Cmd = Новый COMОбъект("ADODB.Command");
		Cmd.ActiveConnection = Соединение;			
	КонецЕсли;
	
	ИмяБазы 			= "TransPlatformIntegration";
	ИмяТаблицыСессий 	= "TABLEPAYMENTBILLING";
	ИмяТаблицы 			= "InvoicesDaily";
	
	ТекстЗапроса = "TRUNCATE TABLE TransPlatformIntegration.[dbo].InvoicesDaily";
	Cmd.CommandText = ТекстЗапроса;
	Rs = Cmd.Execute();
	
	Для Каждого СтрокаТаб Из Таб Цикл
		
		СуммаДокумента	= СтрЗаменить(""+СтрокаТаб.СуммаДокумента,Символы.НПП,"");
		СуммаДокумента	= СтрЗаменить(СуммаДокумента,",",".");
		СуммаДокумента  = ?(СуммаДокумента="","0",СуммаДокумента);		
		Остаток			= СтрЗаменить(""+СтрокаТаб.Остаток, Символы.НПП,"");
		Остаток			= СтрЗаменить(Остаток,",",".");	
		дд				= Формат(СтрокаТаб.датаДокумента,"ДФ=yyyyMMdd");
		КонтрагентКод	= СокрЛП(СтрокаТаб.КонтрагентКод);
		
		если СтрокаТаб.ПоДокументамРасчетов тогда
			поРД = "1";
		иначе
			поРД = "0";
		конецЕсли;
		
		
		//ТекстЗапроса 	= "INSERT INTO ["+ИмяБазы+"].[dbo].["+ИмяТаблицы+"] 
		//|(Invoice, Summa, SumPayment, CurrencyCode, Contract, PaymentDate, DebtTTK,  Saldo, SumInv, isRS, kontractorId)
		//|VALUES ('nn',"+СуммаДокумента+" ,0,'12',0,0,0,"+СтрокаТаб.Остаток+",0,,'"+КонтрагентКод+"')";
		ТекстЗапроса 	= "INSERT INTO ["+ИмяБазы+"].[dbo].["+ИмяТаблицы+"] 					  
		|            (Invoice, InvoiceDate, Summa, SumPayment, CurrencyCode, Contract,  Saldo,DebtTTK, isRS, kontractorId)
		|VALUES     ('"+ СтрокаТаб.номерДокумента+"'
		|		     ,'" + дд +"'
		|			 ," + СуммаДокумента+"
		|            ,0
		|			 ,'" + СтрокаТаб.кодВалюты +"'		
		|			 ,'" + СтрокаТаб.номерДоговора+"'
		|			 ," + Остаток + "
		|            ,"+СтрокаТаб.DebtTTK+"
		|            ,"+поРД+"
		|            ,'"+КонтрагентКод+"')";
		
		Cmd.CommandText = ТекстЗапроса;
		
		Попытка   			
			Rs = Cmd.Execute(); 			
		Исключение  			
			Сообщить("Запрос не выполнен: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
			Сообщить(ТекстЗапроса);		
		КонецПопытки;		
		
	КонецЦикла;
	
	ТекстЗапроса = "INSERT INTO InvoicesDailySessionInfo(SessionStatus, SessionDate, ModifyDate) VALUES (1,GETDATE(),GETDATE())";
	Cmd.CommandText = ТекстЗапроса;
	Rs = Cmd.Execute();
	rs = null;
	Cmd = null;
	
КонецПроцедуры
//\\АБС ВСТАВКА №000019577 КОНЕЦ

////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНОЕ ВЫПОЛНЕНИЕ ВНЕШНИХ ОБРАБОТОК

Процедура ВыполнениеВнешнихОбработок(ВнешняяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ВнешняяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	ВыполнитьВнешнююОбработку(ВнешняяОбработка);
	
КонецПроцедуры

// Функция проверяет, что внешнюю обработку можно запускать
//
Функция ВнешняяОбработкаПравильная(ВнешняяОбработка)
	
	СтрокаСообщенияОбОшибке = "[" + Строка(ТекущаяДата()) + "]";
	
	Отказ = ВнешняяОбработка.ВидОбработки <> Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	
	Если Отказ Тогда
		
		// добавляем запись об ошибках в ЖР
		КлючСообщенияПротокола = "Внешняя обработка." + ВнешняяОбработка.Наименование;
		
		ЗаписьЖурналаРегистрации(
			КлючСообщенияПротокола, УровеньЖурналаРегистрации.Ошибка,,
			ВнешняяОбработка.Ссылка,
			СтрокаСообщенияОбОшибке);
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Выполняет внешнюю обработку
//
Процедура ВыполнитьВнешнююОбработку(ВнешняяОбработка)
	
	Если ТипЗнч(ВнешняяОбработка) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		
		ВнешняяОбработкаОбъект = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВнешняяОбработка, "Ссылка, Наименование, ВидОбработки, ХранилищеВнешнейОбработки");
		
		// неправильную настройку игнорируем
		Если Не ВнешняяОбработкаПравильная(ВнешняяОбработкаОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ВнешняяОбработка.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		
		КлючСообщенияПротокола = "Внешняя обработка." + ВнешняяОбработкаОбъект.Наименование;
		
		Попытка
			Обработка.ВыполнитьОбработку();
			
		Исключение
			СтрокаСообщенияОбОшибке =
			"При вызове процедуры ВыполнитьОбработку() произошла ошибка: " + ОписаниеОшибки();
			
			ЗаписьЖурналаРегистрации(
				КлючСообщенияПротокола, УровеньЖурналаРегистрации.Ошибка,,
				ВнешняяОбработка,
				СтрокаСообщенияОбОшибке);
			
		КонецПопытки;
		
		УдалитьФайлы(ИмяФайла);
		
		ЗаписьЖурналаРегистрации(
			КлючСообщенияПротокола, УровеньЖурналаРегистрации.Информация,,
			ВнешняяОбработка,
			"Закончено выполнение внешней обработки");
			
	ИначеЕсли ТипЗнч(ВнешняяОбработка) = Тип("СправочникСсылка.абс_МодулиДляВыполнения") Тогда
		
		МодульОбъект = ВнешняяОбработка.ПолучитьОбъект();
		
		КлючСообщенияПротокола = "Модуль для выполнения." + МодульОбъект.Наименование + " (Код: " + МодульОбъект.Код + ")";
		
		Попытка
			
			МодульОбъект.ВыполнитьМодуль();
			
		Исключение
			СтрокаСообщенияОбОшибке =
			"При вызове процедуры ВыполнитьМодуль() произошла ошибка: " + ОписаниеОшибки();
			
			ЗаписьЖурналаРегистрации(
				КлючСообщенияПротокола, УровеньЖурналаРегистрации.Ошибка,,
				ВнешняяОбработка,
				СтрокаСообщенияОбОшибке);
			
		КонецПопытки;
		
		ЗаписьЖурналаРегистрации(
			КлючСообщенияПротокола, УровеньЖурналаРегистрации.Информация,,
			ВнешняяОбработка,
			"Закончено выполнение внешней обработки");

			
	КонецЕсли;
			
КонецПроцедуры

// Функция получает расписание регл. задания. Если регл. задание не задано, то возвращает "Неопределено"
//
Функция ПолучитьРасписаниеВыполненияОбменаДанными(ВнешняяОбработка) Экспорт
	
	// возвращаемое значение функции
	РасписаниеРегламентногоЗадания = Неопределено;
	
	РегламентноеЗаданиеОбъект = абс_ВнешниеОбработкиСервер.НайтиРегламентноеЗаданиеПоПараметру(ВнешняяОбработка.РегламентноеЗаданиеGUID);
	
	Если РегламентноеЗаданиеОбъект <> Неопределено Тогда
		
		РасписаниеРегламентногоЗадания = РегламентноеЗаданиеОбъект.Расписание;
		
	КонецЕсли;
	
	Возврат ЗначениеВСтрокуВнутр(РасписаниеРегламентногоЗадания);
	
КонецФункции

// Функция возвращает существующее или создает новое регламентное задание для переданного объекта
//
Функция СоздатьРегламентноеЗаданиеПриНеобходимости(Отказ, РегламентноеЗаданиеGUID)
	
	РегламентноеЗаданиеОбъект = абс_ВнешниеОбработкиСервер.НайтиРегламентноеЗаданиеПоПараметру(РегламентноеЗаданиеGUID);
	
	// при необходимости создаем регл. задание
	Если РегламентноеЗаданиеОбъект = Неопределено Тогда
		
		РегламентноеЗаданиеОбъект = РегламентныеЗадания.СоздатьРегламентноеЗадание("абс_ВыполнениеВнешнихОбработок");
		
	КонецЕсли;
	
	Возврат РегламентноеЗаданиеОбъект;
	
КонецФункции

// Процедура устанавливает параметры регл. задания для переданного объекта
//
Процедура УстановитьПараметрыРегламентногоЗадания(РегламентноеЗаданиеОбъект, РасписаниеРегламентногоЗадания, Ссылка, Наименование, ИспользоватьРегламентноеЗадание)
	
	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(Ссылка);
	
	НаименованиеРегламентногоЗадания =
	"Выполнение: " + ТипЗнч(Ссылка) + ", Наименование: " + СокрЛП(Наименование) + ", Код: " + СокрЛП(Ссылка.Код);
	
	РегламентноеЗаданиеОбъект.Наименование	= Лев(НаименованиеРегламентногоЗадания, 120);
	РегламентноеЗаданиеОбъект.Использование	= ИспользоватьРегламентноеЗадание;
	РегламентноеЗаданиеОбъект.Параметры		= ПараметрыРегламентногоЗадания;
	
	// обновляем расписание, если оно было изменено
	Если РасписаниеРегламентногоЗадания <> Неопределено Тогда
		РегламентноеЗаданиеОбъект.Расписание = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Попытка 
		РегламентноеЗаданиеОбъект.Записать();
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

// Функция сохраняет регламентное задание и возвращает его уникальный идентифакатор
//
Функция ОбновитьДанныеРегламентногоЗадания(Отказ, РасписаниеРегламентногоЗадания, Ссылка, Наименование, ИспользоватьРегламентноеЗадание, РегламентноеЗаданиеGUID) Экспорт
	
	// получаем регламентное задание по идентификатору, если объект не находим, то создаем новый
	РегламентноеЗаданиеОбъект = СоздатьРегламентноеЗаданиеПриНеобходимости(Отказ, РегламентноеЗаданиеGUID);
	
	Если Отказ Тогда
		Возврат РегламентноеЗаданиеGUID;
	КонецЕсли;
	
	// обновляем свойства РЗ
	УстановитьПараметрыРегламентногоЗадания(РегламентноеЗаданиеОбъект, ЗначениеИзСтрокиВнутр(РасписаниеРегламентногоЗадания), Ссылка, Наименование, ИспользоватьРегламентноеЗадание);
	
	// записываем измененное задание
	абс_ВнешниеОбработкиСервер.ЗаписатьРегламентноеЗадание(Отказ, РегламентноеЗаданиеОбъект);
	
	// Возвращаем GUID регл. задания в реквизит объекта (РегламентноеЗаданиеGUID)
	Возврат Строка(РегламентноеЗаданиеОбъект.УникальныйИдентификатор);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УНИВЕРСАЛЬНОГО ОБМЕНА ИСУЗК

Функция ВыполнитьВыгрузкуОбъектаВИСУЗК(СсылкаДляВыгрузки, СтруктураРезультата = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаДляВыгрузки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат Истина;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	ОбработкаВыгрузки = абс_ПроцедурыСПовторнымВызовом.ПолучитьОбработкуВыгрузкиДанныхИСУЗК();
	
	ИмяФайлаВыгрузки = ПолучитьИмяВременногоФайла("xml");

	ОбработкаВыгрузки.ИмяФайлаОбмена = ИмяФайлаВыгрузки;

	ОбработкаВыгрузки.Параметры = Новый Структура("СсылкаДляВыгрузки", СсылкаДляВыгрузки);

	ОбработкаВыгрузки.ВыполнитьВыгрузку();
	
	Если ОбработкаВыгрузки.мСчетчикВыгруженныхОбъектов = 0 Тогда
		
		СтруктураРезультата = Новый Структура("Успешно,СообщениеОбОшибке", Истина, "");
		
		Возврат Истина;
	КонецЕсли;
	
	ТекстФайла = Новый ТекстовыйДокумент;
	ТекстФайла.Прочитать(ИмяФайлаВыгрузки);
	СтрокаДанныхXML = ТекстФайла.ПолучитьТекст();
	
	Возврат абс_WebServiceСервер.Инициализация_ISUZK_XMLExchange_PutData(СтрокаДанныхXML, СтруктураРезультата);
	
КонецФУнкции

//АБС ВСТАВКА 36359  11.12.2013 11:26:25  Поставка

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПРОЕКТНОМУ УЧЕТУ

Функция ВыполнитьЗагрузкуИзExcelВТабличныйДокумент(АдресФайлаВХранилище, ТабНастройкиЗагрузки, ТаблицаДанных) Экспорт
			
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xls");
	
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
	оЕксель = Неопределено;
	
	Попытка
		оЕксель = Новый COMОбъект("Excel.Application");
		оЕксельКнига = оЕксель.Workbooks.Open(ПутьКФайлу);
		оЕксельЛист = оЕксельКнига.Worksheets(1);	
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	ТекущаяСтрока = 2;
	
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(СокрЛП(оЕксельЛист.Cells(ТекущаяСтрока, 1).Value)) Тогда
			Прервать;
		КонецЕсли;
		
		СтрДанные = ТаблицаДанных.Добавить();
			
		Для Каждого НастройкаРеквизита Из ТабНастройкиЗагрузки Цикл
			
			СтрДанные[НастройкаРеквизита.ИмяРеквизита] = СокрЛП(оЕксельЛист.Cells(ТекущаяСтрока, НастройкаРеквизита.НомерКолонки).Value)
			
		КонецЦикла;
		
		ТекущаяСтрока = ТекущаяСтрока + 1;
			
	КонецЦикла;
	
	оЕксельКнига.Close();
	оЕксель = Неопределено;
		
КонецФункции
//АБС ВСТАВКА 36359 КОНЕЦ 

Процедура абс_ПроверкаПользователей() Экспорт
	
	Если не глЗначениеПеременной("абс_ПроверкаПользователейНаАктуальность") Тогда
		Возврат;
	КонецЕсли;	
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	//АБС ВСТАВКА №36948 НАЧАЛО «27 декабря 2013 г.», Пополитов	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка,
	               |	Пользователи.Код,
	               |	Пользователи.Наименование,
	               |	Пользователи.ИдентификаторПользователяИБ,
	               |	Пользователи.абс_Сотрудник.ДатаУвольнения КАК ДатаУвольнения
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	НЕ Пользователи.ЭтоГруппа
	               |	И НЕ Пользователи.абс_НеАктивныйПользователь
	               |	И НЕ Пользователи.абс_НеСниматьРегламентно";
					
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если СокрЛП(Выборка.Код) = "<Не указан>" Тогда
			Продолжить;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) 
			или не ПользователиПолныеПрава.ПользовательСуществует(Выборка.ИдентификаторПользователяИБ) Тогда
			ОбъектСсылка = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектСсылка.ОбменДанными.Загрузка      = Истина;
			ОбъектСсылка.абс_НеАктивныйПользователь = Истина;
			ОбъектСсылка.Записать();
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ)
			и ЗначениеЗаполнено(Выборка.ДатаУвольнения)
			и (НачалоДня(ТекущаяДата())-259200) > КонецДня(Выборка.ДатаУвольнения) //разность в 3 дня
			и ПользователиПолныеПрава.ПользовательСуществует(Выборка.ИдентификаторПользователяИБ) Тогда 
			
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
			Если ПользовательИБ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			врПользовательОС = ПользовательИБ.ПользовательОС;
			ПользовательИБ.АутентификацияОС 		 = Ложь;
			ПользовательИБ.АутентификацияСтандартная = Ложь;
			ПользовательИБ.ПользовательОС 			 = "";
			ПользовательИБ.ПоказыватьВСпискеВыбора 	 = Ложь;
			ПользовательИБ.Записать();
			 
			ОбъектСсылка = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектСсылка.ОбменДанными.Загрузка      = Истина;
			ОбъектСсылка.абс_НеАктивныйПользователь = Истина;
			ОбъектСсылка.абс_ПользовательОС_СтароеЗначение = врПользовательОС;
			ОбъектСсылка.Записать();
			
		КонецЕсли;		
		          
	КонецЦикла;
 	//\\АБС ВСТАВКА №36948 КОНЕЦ
 	
КонецПроцедуры

 //АБС ВСТАВКА №37834 НАЧАЛО «25 января 2014 г.», Пополитов
Функция КорректныйПериодОтраженияДляНДС(Знач ПериодОтраженияШапка, Знач ПериодОтраженияСтрока, Знач ДатаПериода) Экспорт
	                     
	НужнаяГруппаНеНДС = глЗначениеПеременной("абс_КонтрольПоГруппеПериодаОтраженияВСчетах");
	НужнаяГруппаНДС   = абс_ВыбиратьПериодОтраженияДляНДС();     	
	
	Если ЗначениеЗаполнено(ПериодОтраженияСтрока) 
		и ТипЗнч(ПериодОтраженияСтрока) = Тип("СправочникСсылка.ас_ПериодыОтражения")
		и ПериодОтраженияСтрока.ПринадлежитЭлементу(НужнаяГруппаНДС) Тогда
		Возврат ПериодОтраженияСтрока;
		
	ИначеЕсли ЗначениеЗаполнено(ПериодОтраженияШапка) 
		и ТипЗнч(ПериодОтраженияШапка) = Тип("СправочникСсылка.ас_ПериодыОтражения")
		и ПериодОтраженияШапка.ПринадлежитЭлементу(НужнаяГруппаНДС) Тогда
		Возврат ПериодОтраженияШапка;	
		
	ИначеЕсли ДатаПериода <> '00010101' Тогда 		
		НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(ДатаПериода)), " ",""), Символы.НПП, "");
		Квартал = НачалоКвартала(ДатаПериода);
		НомерМесяца = Месяц(Квартал);
		
		Если НомерМесяца = 1 Тогда
			НомерКвартала = 1;
		ИначеЕсли НомерМесяца = 4 Тогда
			НомерКвартала = 2;
		ИначеЕсли НомерМесяца = 7 Тогда
			НомерКвартала = 3;
		ИначеЕсли НомерМесяца = 10 Тогда
			НомерКвартала = 4;
		КонецЕсли;
		
		КодПоиска = СокрЛП(НомерГода) + СокрЛП(НомерКвартала);
		ПериодОтражения = Справочники.ас_ПериодыОтражения.НайтиПоКоду(КодПоиска,,НужнаяГруппаНДС);  		
		Возврат ПериодОтражения;
		
	Иначе	
		Возврат ПериодОтраженияШапка;
		
	КонецЕсли;	
	
КонецФункции

Функция КорректныйПериодОтраженияНеДляНДС(Знач ПериодОтраженияШапка, Знач ПериодОтраженияСтрока, Знач ДатаПериода) Экспорт
	                     
	НужнаяГруппаНеНДС = глЗначениеПеременной("абс_КонтрольПоГруппеПериодаОтраженияВСчетах");
	НужнаяГруппаНДС   = абс_ВыбиратьПериодОтраженияДляНДС();     	
	
	Если ЗначениеЗаполнено(ПериодОтраженияСтрока) 
		и ТипЗнч(ПериодОтраженияСтрока) = Тип("СправочникСсылка.ас_ПериодыОтражения") 
		и ПериодОтраженияСтрока.ПринадлежитЭлементу(НужнаяГруппаНеНДС) Тогда
		Возврат ПериодОтраженияСтрока;
		
	ИначеЕсли ЗначениеЗаполнено(ПериодОтраженияШапка) 
		и ТипЗнч(ПериодОтраженияШапка) = Тип("СправочникСсылка.ас_ПериодыОтражения")
		и ПериодОтраженияШапка.ПринадлежитЭлементу(НужнаяГруппаНеНДС) Тогда
		Возврат ПериодОтраженияШапка;
		
	//АБС ВСТАВКА №38359 НАЧАЛО «17 февраля 2014 г.», Пополитов 
	//Откл. по просьбе Гавриловой О.
	//ИначеЕсли ЗначениеЗаполнено(ПериодОтраженияСтрока) 
	//	и ТипЗнч(ПериодОтраженияСтрока) = Тип("СправочникСсылка.ас_ПериодыОтражения")
	//	и ПериодОтраженияСтрока.ПринадлежитЭлементу(НужнаяГруппаНДС) Тогда
	//	Возврат Справочники.ас_ПериодыОтражения.НайтиПоНаименованию(Лев(СокрЛП(ПериодОтраженияСтрока),4)+"г.",,НужнаяГруппаНеНДС);
	//	
	//ИначеЕсли ЗначениеЗаполнено(ПериодОтраженияШапка) 
	//	и ТипЗнч(ПериодОтраженияШапка) = Тип("СправочникСсылка.ас_ПериодыОтражения")
	//	и ПериодОтраженияШапка.ПринадлежитЭлементу(НужнаяГруппаНДС) Тогда
	//	Возврат Справочники.ас_ПериодыОтражения.НайтиПоНаименованию(Лев(СокрЛП(ПериодОтраженияШапка),4)+"г.",,НужнаяГруппаНеНДС);
	//\\АБС ВСТАВКА №38359 КОНЕЦ
	
	ИначеЕсли ДатаПериода <> '00010101' Тогда 		
		НомерГода = СокрЛП(СтрЗаменить(СтрЗаменить(СокрЛП(Год(ДатаПериода)), " ",""), Символы.НПП, ""));           
		Возврат Справочники.ас_ПериодыОтражения.НайтиПоНаименованию(НомерГода,,НужнаяГруппаНеНДС);	
		
	Иначе	
		Возврат ПериодОтраженияШапка;		
		
	КонецЕсли;	
	
КонецФункции

Функция абс_ВыбиратьПериодОтраженияДляНДС() Экспорт
	
	ПапкаНДС = глЗначениеПеременной("абс_ВыбиратьПериодОтраженияДляНДС");
	Если ПапкаНДС.Пустая() Тогда
		ПапкаНДС = Справочники.ас_ПериодыОтражения.НайтиПоНаименованию("НДС",Истина);	
	КонецЕсли;
	
	Возврат ПапкаНДС;
	
КонецФункции
 //\\АБС ВСТАВКА №37834 КОНЕЦ
 
//АБС ВСТАВКА 35783  12.02.2014 18:36:59  Тупиков
Функция ПолучитьСтраховойНомерПФРИзИСУЗК(КодФЛ, ДатаСреза, СообщениеОбОшибке="") Экспорт
	
	Прокси = Неопределено; 
	//АБС Замена Попов
	//
	//// Создание описания по WSDL файлу	
	//Определение = Новый WSОпределения("https://isup-ttk.transtk.ru/persondata/ws/persondata.1cws?wsdl", "EISUP_PersonalData", "EISUP_PersonalData"); 		
	//// Создание прокси для обращения к сервису и фабрике XDTO
	//Прокси = Новый WSПрокси(Определение, "http://www.abs-soft.ru", "abs_PersonData", "abs_PersonDataSoap"); 
	
	
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_PersonData();	
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Неопределено;
	КонецЕсли;
    //\\Абс Замена Попов
	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
		
	ОтветXDTO = Прокси.GetPersonData(КодФЛ, ДатаСреза);
		
	Если ЗначениеЗаполнено(ОтветXDTO.Error) Тогда	
		СообщениеОбОшибке = ОтветXDTO.Error;
		//АБС ВСТАВКА 39493  05.03.2014 14:52:42  Шамов
		//Возврат Неопределено;
		//АБС ВСТАВКА 39493 КОНЕЦ
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СтраховойНомерПФР", Строка(ОтветXDTO.PersonData.InsuranceNumber));
	
	Возврат СтруктураВозврата;
	
КонецФункции
//АБС ВСТАВКА 35783 КОНЕЦ

//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
Функция абс_ДаннаяБазаНеКопия() Экспорт

	абс_ИмяБазы = СокрЛП(глЗначениеПеременной("абс_ИмяБазы"));
	Если абс_ИмяБазы = "" Тогда
		абс_ИмяБазы = "1cworkdb";
		Константы.абс_ИмяБазы.Установить(абс_ИмяБазы);
		глЗначениеПеременнойУстановить("абс_ИмяБазы",абс_ИмяБазы,Истина);
	КонецЕсли;	
	
	СтрокаСоединенияСБД =  СтрокаСоединенияИнформационнойБазы();
	НачальнаяПозиция    = Найти(Врег(СтрокаСоединенияСБД), "REF=") + 5;
	КонечнаяПозиция     = СтрДлина(СтрокаСоединенияСБД) - 1;
	ИмяИБНаСервере      = СокрЛП(Сред(СтрокаСоединенияСБД, НачальнаяПозиция,КонечнаяПозиция - НачальнаяПозиция));
	
	Если ВРег(абс_ИмяБазы) = ВРег(ИмяИБНаСервере) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	
//\\АБС ВСТАВКА №40078 КОНЕЦ
// +++ввв 31.08.2016 г.
Процедура ttk_ПолучитьТаблицуИзTPIпоНастройкеОбмена(Отказ=Ложь,ТекстОбмен,Табл,ИспользоватьСложныйЗапрос=Ложь,МассивПеременных=Неопределено) Экспорт
	ТекОбмен=Справочники.абс_НастройкиОбменаСSQL.НайтиПоНаименованию(ТекстОбмен);
	Если ТекОбмен=Неопределено Тогда
		Сообщить("Не задана настройка обмена для списка сессий");
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	Если ТекОбмен=Справочники.абс_НастройкиОбменаСSQL.ПустаяСсылка() Тогда
		Сообщить("Отсутствует настройка обмена в справочнике настроек обмена");
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	ТаблицаКолонокЗагрузки=ТекОбмен.РеквизитыДляОбмена.Выгрузить(,"ИмяРеквизитаВSQL,ТипРеквизитаВSQL,ПутьКДаннымРеквизита");
	ТаблицаКолонокЗагрузки.Колонки.Добавить("ИндексКолонкиЕИСУП"); 
	ТаблицаКолонокЗагрузки.Колонки.Добавить("ИндексКолонкиSQL");
// номера колонок по имени колонки в таблице ЕИСУП
	Для каждого эТабл Из ТаблицаКолонокЗагрузки Цикл
		йТабл=Табл.Колонки.Найти(эТабл.ПутьКДаннымРеквизита);
		Если йТабл=Неопределено Тогда
			эТабл.ИндексКолонкиЕИСУП=-1;
			эТабл.ИндексКолонкиSQL=-1;
		Иначе
			эТабл.ИндексКолонкиЕИСУП=Табл.Колонки.Индекс(йТабл);
			эТабл.ИндексКолонкиSQL=0;
		КонецЕсли;
	КонецЦикла;
// номера колонки по имени колонки в таблице SQL
// +++ввв 24.12.2015 г.
	ТекстЗапроса = "";
	СпецТекст=СокрЛП(ТекОбмен.ttk_СложныйЗапрос);
	Если НЕ ПустаяСтрока(СпецТекст) Тогда
		нн=0;
		Если МассивПеременных<>Неопределено Тогда
			Для каждого нСтр Из МассивПеременных Цикл
				нн=нн+1;
				СпецТекст=СтрЗаменить(СпецТекст,"[["+нн+"]]",нСтр);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ИспользоватьСложныйЗапрос Тогда
		ТекстЗапроса = СпецТекст;
	КонецЕсли;
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = "SELECT * FROM "+СокрЛП(ТекОбмен.ИмяТаблицыSQL)+" "+СпецТекст;
	КонецЕсли;
// ---ввв 24.12.2015 г.
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	СтруктураПодключения.Вставить("Provider",СокрЛП(ТекОбмен.ИмяСервераSQL));	
	СтруктураПодключения.Вставить("DataSource",СокрЛП(ТекОбмен.ИмяБазыДанныхSQL));	
	СтруктураПодключения.Вставить("UserID",СокрЛП(ТекОбмен.ИмяПользователя));	
	СтруктураПодключения.Вставить("Password",СокрЛП(ТекОбмен.Пароль));
	ТаблSQL=Новый ТаблицаЗначений;
	Попытка
		ТаблSQL=абс_СерверныеФункции.ЗапросВТаблицуSQL(ТекстЗапроса,СтруктураПодключения).Скопировать();
		Отказ=Ложь;
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ=Истина;
		Возврат;
	КонецПопытки;
	Для каждого эТабл Из ТаблицаКолонокЗагрузки Цикл
		Если эТабл.ИндексКолонкиSQL=-1 Тогда
			Продолжить;
		КонецЕсли;
		йТабл=ТаблSQL.Колонки.Найти(эТабл.ИмяРеквизитаВSQL);
		Если йТабл=Неопределено Тогда
			эТабл.ИндексКолонкиЕИСУП=-1;
			эТабл.ИндексКолонкиSQL=-1;
		Иначе
			эТабл.ИндексКолонкиSQL=ТаблSQL.Колонки.Индекс(йТабл);
		КонецЕсли;
	КонецЦикла;
// проекция таблицы SQL на таблицу приёмник Табл
	Для каждого ыСтр Из ТаблSQL Цикл
		йСтр=Табл.Добавить();
		Для каждого идх Из ТаблицаКолонокЗагрузки Цикл
			Если идх.ИндексКолонкиЕИСУП=-1 Тогда
				Продолжить;
			КонецЕсли;
			дан=ыСтр[идх.ИндексКолонкиSQL];
			рез=Неопределено;
			Если идх.ТипРеквизитаВSQL="Число" Тогда
				Попытка
					рез=Число(дан);
				Исключение
					рез=0;
				КонецПопытки;
			ИначеЕсли идх.ТипРеквизитаВSQL="Строка" Тогда
				Попытка
					рез=Строка(дан);
				Исключение
					рез="";
				КонецПопытки;
			ИначеЕсли идх.ТипРеквизитаВSQL="Логическое" Тогда
				Попытка
					Если дан="1" Тогда
						рез=Истина;
					Иначе
						рез=Ложь;
					КонецЕсли;
				Исключение
					рез=Ложь;
				КонецПопытки;
			ИначеЕсли идх.ТипРеквизитаВSQL="Дата" Тогда
				Попытка
					рез=Дата(дан);
				Исключение
					рез="";
				КонецПопытки;
			ИначеЕсли идх.ТипРеквизитаВSQL="ДатаИВремя" Тогда
				Попытка
					рез=Дата(дан);
				Исключение
					рез="";
				КонецПопытки;
			ИначеЕсли идх.ТипРеквизитаВSQL="НДС" Тогда
				Попытка
					Если дан="18" Тогда
						рез=Перечисления.СтавкиНДС.НДС18;
					ИначеЕсли дан="18/118" Тогда
						рез=Перечисления.СтавкиНДС.НДС18_118;
					ИначеЕсли дан="10" Тогда
						рез=Перечисления.СтавкиНДС.НДС10;
					ИначеЕсли дан="10/110" Тогда
						рез=Перечисления.СтавкиНДС.НДС10_110;
					ИначеЕсли дан="20" Тогда
						рез=Перечисления.СтавкиНДС.НДС20;
					ИначеЕсли дан="20/120" Тогда
						рез=Перечисления.СтавкиНДС.НДС20_120;
					ИначеЕсли дан="0" Тогда
						рез=Перечисления.СтавкиНДС.НДС0;
					Иначе
						рез=Перечисления.СтавкиНДС.БезНДС;
					КонецЕсли;
				Исключение
					рез=Перечисления.СтавкиНДС.БезНДС;
				КонецПопытки;
			КонецЕсли;
			йСтр[идх.ИндексКолонкиЕИСУП]=рез;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
// ---ввв 31.08.2016 г.
