
////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПОВЕЩЕНИЯ ПОЛЬЗОВАТЕЛЯ ОБ ОБРАБОТКЕ ЭД

// Оповещает пользователя о смене ответственных при обработке электронных документов.
//
// Параметры:
// КоличествоОбработанных - Число, количество обработанных электронных документов,
// СписокОбъектов - СписокФормы, список объектов, которым сменяли ответственного,
// Ответственный - Пользователь, новый ответственный за выбранные электронные документы.
//
Процедура ОповеститьПользователяОСменеОтветственного(КоличествоОбработанных, СписокОбъектов, Ответственный) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
		
		СписокОбъектов.Обновить();
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов установлен ответственный ""%Ответственный%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        СписокОбъектов.ВыделенныеСтроки.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",            Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры // ОповеститьПользователя()

////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОСМОТРА ЭД И СПИСКА ЭД

// Открывает форму просмотра электронного документа.
//
// Параметры:
// СсылкаНаЭД - ссылка на электронный документ, открываемый для просмотра,
// ПараметрыОткрытия - структура, дополнительные параметры просмотра.
//
Процедура ОткрытьЭДДляПросмотра(СсылкаНаЭД, ПараметрыОткрытия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Возврат;
	КонецЕсли;
	ОткрытьЗначение(СсылкаНаЭД);
	
КонецПроцедуры

// Открывает форму со списком электронных документов для данного владельца.
//
// Параметры: 
// СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо увидеть,
// ПараметрыОткрытия - структура, дополнительные параметры просмотра списка электронных документов.
//
Процедура ОткрытьСписокЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
	Если ПараметрыОткрытия = Неопределено Тогда
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.СписокЭД", ПараметрыФормы);
	Иначе
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.СписокЭД", ПараметрыФормы, 
					ПараметрыОткрытия.Источник, ПараметрыОткрытия.Уникальность, ПараметрыОткрытия.Окно);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СРАВНЕНИЯ ЭД
Процедура ВыполнитьСравнениеЭД(СтруктураПараметров) Экспорт
	
	#Если НЕ ТолстыйКлиентУправляемоеПриложение И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		Сообщить(НСтр("ru='Сравнение электронных документов можно сделать только в режиме толстого клиента.'"));
		Возврат;
	#Иначе
		ЭДПервый = СтруктураПараметров.ЭДПервый;
		ЭДВторой = СтруктураПараметров.ЭДВторой;
		
		Если НЕ (ЗначениеЗаполнено(ЭДПервый) И ЗначениеЗаполнено(ЭДВторой)) Тогда
			Сообщить(НСтр("ru='Не указан один из сравниваемых электронных документов'"));
			Возврат;
		КонецЕсли;
		
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(ЭДПервый);
		МассивЭД.Добавить(ЭДВторой);
		ПереченьВременныхФайлов = ЭлектронныеДокументыФорматОбмена.ПодготовитьВременныеФайлыПросмотраЭД(МассивЭД);
		
		Если ПереченьВременныхФайлов = Неопределено Тогда
			Сообщить(НСтр("ru='Ошибка при разборе электронного документа'"));
			Возврат;
		КонецЕсли;
		
		ТипФайла = ТипФайлаТабличногоДокумента.MXL;
		РасширениеФайла = ".mxl";
		
		Сравнение = Новый СравнениеФайлов;
		Сравнение.СпособСравнения = СпособСравненияФайлов.ТабличныйДокумент;
		Сравнение.ПервыйФайл = ПереченьВременныхФайлов[0].ИмяФайлаMXL;
		Сравнение.ВторойФайл = ПереченьВременныхФайлов[1].ИмяФайлаMXL;
		Сравнение.ПоказатьРазличияМодально();
	#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Процедуры работы с ЭЦП

// Подписывает электронные документы определенным сертификатом криптографии.
// 
// Параметры:
// ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо подписать,
// СертификатПодписи - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы, 
// ПарольПользователя - Строка, пароль установки ЭЦП данным сертификатом.
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы, СертификатПодписи, ПарольПользователя = Неопределено) Экспорт
	
	Если ЭлектронныеДокументы.СертификатОтозван(СертификатПодписи) Тогда 
		ТекстСообщения = НСтр("ru = 'Невозможно подписать документы. Сертификат (%1) отозван.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СертификатПодписи);
		ОбработатьИсключениеПоЭДНаКлиенте(НСтр("ru = 'установка подписи ЭЦП'"), ТекстСообщения, ТекстСообщения);
		Возврат 0;
	КонецЕсли;
		
	Попытка
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
		#Если ВебКлиент Тогда
			Если МенеджерКриптографии=Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Расширение для работы с криптографией не установлено, операция прервана.'");
				ОбработатьИсключениеПоЭДНаКлиенте(НСтр("ru = 'открытие обработки документов на подпись'"), ТекстОшибки);
				Возврат 0;
			КонецЕсли	
		#КонецЕсли		
	Исключение
		ОбработатьИсключениеПоЭДНаКлиенте(НСтр("ru = 'установка подписи ЭЦП'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат 0;
	КонецПопытки;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ПодписьДоступнаПоСертификату(СертификатПодписи);
	// Проверим сертификат с помощью менеджера криптографии. Если есть ошибка - подпись не производим.
	КоличествоПодписанныхЭД = 0;

	Если КриптоСертификат <> Неопределено Тогда	
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат, РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);	
		Исключение
			ОбработатьИсключениеПоЭДНаКлиенте(НСтр("ru = 'проверка сертификата подписи на корректность'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат 0;
		КонецПопыткИ;
		
		Если ПарольПользователя = Неопределено Тогда
			ПараметрыФормы = Новый Структура("Заголовок, ПредставлениеСертификата", 
			НСтр("ru = 'Введите пароль для ЭЦП'"), СертификатПодписи);
			КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
			
			Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
				ПарольПользователя = КодВозврата;
			Иначе
				ЭлектронныеДокументы.ОбновитьВерсиюЭД(ДобавленныеФайлы);
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ТекДокумент Из ДобавленныеФайлы Цикл
			// проверим, все ли необходимые условия выполнены
			Если ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументГотовКПодписи(ТекДокумент) 
			   И ЭлектронныеДокументы.УстановленныеПодписиВалидны(ТекДокумент) Тогда
				СтруктураДанныхПодписи = Новый Структура("Сертификат, Пароль, Комментарий", КриптоСертификат, ПарольПользователя, 
							НСтр("ru = 'Подписание электронного документа'"));
				Попытка
					ДанныеПодписи = ЭлектроннаяПодписьКлиент.СформироватьДанныеПодписи(МенеджерКриптографии, ТекДокумент, 
								ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ТекДокумент), СтруктураДанныхПодписи);
								
					ЭлектронныеДокументы.ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
					КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
				Исключение
					ТекстСообщения = НСтр("ru = 'Ошибка подписи сертификатом: (%1)! '") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СертификатПодписи);
					ОбработатьИсключениеПоЭДНаКлиенте(НСтр("ru = 'установка подписи ЭЦП'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

Функция ПодписьДоступнаПоСертификату(СертификатПодписи)
	
	ТребуемаяПодпись = ЭлектронныеДокументы.ПолучитьОтпечатокСертификата(СертификатПодписи);
	Возврат ПодписьДоступна(ТребуемаяПодпись);
	
КонецФункции

Функция ПодписьДоступна(ТребуемаяПодпись)
	
	Возврат ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ТребуемаяПодпись);
	
КонецФункции

///////////////////////////////////////////////////////////////////
// Функции для отправки пакетов

// Отправляет подготовленные электронные документы.
//
// Параметры:
// ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо отправить,
// ПризнакПодписи - булево, признак того, что электронные документы подписаны ЭЦП, 
// УникальныйИдентификатор - уникальный идентификатор формы, откуда была вызвана отправка электронных документов,
// ТипОтправки - Строка, представление вида отправки электронных документов (почта, каталог, оператор и т.п.),
// ЭтоПроизвольныйДокумент - Булево, признак того, что отправляем произвольный электронный документ.
//
Функция ПодготовитьКОтправкеЭД(ДобавленныеФайлы, ПризнакПодписи, ТипОтправки = "ЭлектроннаяПочта", ЭтоПроизвольныйДокумент = Ложь) Экспорт
	
	МассивСтруктурПакетовЭД = ЭлектронныеДокументы.СоздатьДокументыПакетовЭД(ДобавленныеФайлы, ПризнакПодписи);
	Возврат МассивСтруктурПакетовЭД.Количество();
	
КонецФункции

Функция ОтправитьМассивПакетовЭД(Знач МассивПЭД) Экспорт
	
	Результат = ЭлектронныеДокументы.ОтправкаПакетовЭД(МассивПЭД);
	Оповестить("ОбновитьСостояниеЭД");
	Возврат Результат;
	
КонецФункции

// Дополнительные процедуры и функции для сохранения и подписи

// Сохраняет электронный документ на диск вместе с ЭЦП.
//
// Параметры: 
// ПрисоединенныйФайл - ссылка на электронный документ, который необходимо сохранить на диск,
// ДанныеФайла - структура с данными файла для сохранения,
// УникальныйИдентификатор - уникальный идентификатор формы, откуда было вызвано действие, 
// АдресКаталога - Строка, путь к каталогу, куда будет произведено сохранение, 
// СсылкаНаПакет - Ссылка на пакет электронных документов, которому принадлежит электронный документ,
// ЭтоПроизвольныйДокумент - Булево, признак того, что переданный электронный документ является произвольным.
//
Процедура СохранитьВместеСЭЦП(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор, АдресКаталога, СсылкаНаПакет, ЭтоПроизвольныйДокумент = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		// для подтверждения необходимо в каталог формирования файлов сохранить только последнюю подпись
		ПолноеИмяФайла = СохранитьФайлКак(ДанныеФайла, АдресКаталога, ПрисоединенныйФайл, СсылкаНаПакет, ЭтоПроизвольныйДокумент);
		Если ПолноеИмяФайла = "" Тогда
			Возврат; // пользователь нажал Отмена или это веб клиент без расширения
		КонецЕсли;
		МассивСтруктурПодписей = ЭлектроннаяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
		Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
			СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, УникальныйИдентификатор, МассивСтруктурПодписей, АдресКаталога);
		КонецЕсли;
	Иначе
	#Если ВебКлиент Тогда
		Предупреждение(НСтр("ru = 'Для выполнения данной операции вам нужно установить расширение работы с файлами.'"));
	#КонецЕсли
	КонецЕсли;	

КонецПроцедуры

Функция СохранитьФайлКак(ДанныеФайла, ИмяКаталога, ПрисоединенныйФайл = Неопределено, СсылкаНаПакет = Неопределено, ЭтоПроизвольныйЭД = Неопределено)
	
	Попытка
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
		#Если ВебКлиент Тогда
			Если МенеджерКриптографии=Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Расширение для работы с криптографией не установлено, операция прервана.'");
				ОбработатьИсключениеПоЭДНаКлиенте(НСтр("ru = 'открытие обработки документов на подпись'"), ТекстОшибки);
				Возврат "";
			КонецЕсли	
		#КонецЕсли	
	Исключение
		ОбработатьИсключениеПоЭДНаКлиенте(НСтр("ru = 'сохранение файла ЭД на диск при сборке пакета'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат "";
	КонецПопытки;

	#Если НЕ ВебКлиент Тогда
		Файл = Новый Файл(ИмяКаталога);
		Если Не Файл.Существует() Тогда
			СоздатьКаталог(ИмяКаталога);
		КонецЕсли;
	#КонецЕсли		
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
			
		ИмяПолучаемогоФайла = СтрЗаменить(ДанныеФайла.ИмяФайла, "..", ".");
		
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяПолучаемогоФайла , ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		
		ПолученныеФайлы = Новый Массив;
		
		ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, ИмяКаталога , Ложь);
		#Если Не ВебКлиент Тогда
			Если ЗначениеЗаполнено(ЭтоПроизвольныйЭД) И ЭтоПроизвольныйЭД Тогда		
			// Положим файл в зип-архив по требованиям пакета эд
				ИмяФайла = ДанныеФайла.Наименование;
				ЗипКонтейнер = Новый ЗаписьZipФайла(ИмяКаталога+ИмяФайла+".zip");			
				ЗипКонтейнер.Добавить(ИмяКаталога+ИмяПолучаемогоФайла );
				ЗипКонтейнер.Записать();
			КонецЕсли;
		
			// и сразу зашифруем его при необходимости(тоже требование транспортного контейнера)
						
			ПараметрыШифрования = ЭлектронныеДокументы.ПолучитьМассивАдресовСертификатовШифрования(ПрисоединенныйФайл);
			Если ПараметрыШифрования <> Неопределено Тогда
				ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ПараметрыШифрования[0]);
				ДвоичныеДанныеСертификатаОрганизации = ПолучитьИзВременногоХранилища(ПараметрыШифрования[1]);
			
				Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				СертификатОрганизации = Новый СертификатКриптографии(ДвоичныеДанныеСертификатаОрганизации);
				
				МассивСертификатов = Новый Массив;
				МассивСертификатов.Добавить(Сертификат);
				МассивСертификатов.Добавить(СертификатОрганизации);
				
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяКаталога+ИмяПолучаемогоФайла);
				
				МенеджерКриптографии.Зашифровать(ДвоичныеДанныеФайла,
					ИмяКаталога+ИмяПолучаемогоФайла,  
					МассивСертификатов);
					
				// установим признак шифрования контейнеру
				ЭлектронныеДокументы.ДобавитьПризнакШифрованияПакетуЭД(СсылкаНаПакет, ПрисоединенныйФайл, ПараметрыШифрования);
			КонецЕсли;
			Возврат ИмяКаталога+ИмяПолучаемогоФайла;
		#КонецЕсли	
	КонецЕсли;
	#Если ВебКлиент Тогда
		ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
		Возврат ДанныеФайла.ИмяФайла;
	#КонецЕсли
	

КонецФункции

Процедура СохранитьПодписи(ФайлСсылка, ПолноеИмяФайла, УникальныйИдентификатор, МассивСтруктурПодписей, АдресКаталога, БезИсходника = Ложь)	
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	МассивИмен = Новый Массив;

	Если  НЕ БезИсходника Тогда	
		МассивИмен.Добавить(ОсновнойФайл.Имя);
	КонецЕсли;

	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда 
			ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";
		КонецЕсли;
		
		СкорректироватьИмяФайла(ИмяФайлаПодписи);
		
		ПолныйПутьПодписи = Путь;
		ФайловыеФункцииКлиентСервер.ДобавитьСлешЕслиНужно(ПолныйПутьПодписи, ФайловыеФункцииКлиентПовтИсп.ТипПлатформыКлиента());
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";
			СкорректироватьИмяФайла(ИмяФайлаПодписи);
			
			ПолныйПутьПодписи = Путь;
			ФайловыеФункцииКлиентСервер.ДобавитьСлешЕслиНужно(ПолныйПутьПодписи, ФайловыеФункцииКлиентПовтИсп.ТипПлатформыКлиента());
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;	
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, СтруктураПодписи.АдресПодписи);
		ПередаваемыеФайлы.Добавить(Описание);
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		// Сохраним Файл из БД на диск
		ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
		УдалитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
	КонецЦикла;
		
КонецПроцедуры

// Процедура предназначена для коррекции имени файла  - замена некорректных символов на пробел
//
// Параметры
//  СтрИмяФайла  - Строка - Имя файла
Процедура СкорректироватьИмяФайла(СтрИмяФайла) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru.
	// При этом были объединены запрещенные символы для файловых систем FAT и NTFS.
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Для Сч=1 по СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если Найти(СтрИмяФайла, Символ) <> 0 Тогда
			СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, " ");
		КонецЕсли;
	КонецЦикла;
	
	СтрИмяФайла = СокрЛП(СтрИмяФайла);
	
КонецПроцедуры // СкорректироватьИмяФайла()

//////////////////////////////////////////////////////////////
// ОБРАБОТКА ЭД

// Выводит пользователю информацию об обработанных электронных документах.
//
// Параметры:
// КолСформированных - число, количество сформированных электронных документов, 
// КолПодписанных - число, количество подписанных электронных документов, 
// КолОтправленных - число, количество отправленных электронных документов.
//
Процедура ВывестиИнформациюОбОбработанныхЭД(КолСформированных, КолУтвержденных, КолПодписанных, КолПодготовленных) Экспорт
	
	// вывод сообщения
	Если КолПодготовленных > 0 Тогда
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3), подготовлено к отправке пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, 
																			КолУтвержденных, КолПодписанных, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2), подготовлено к отправке пакетов: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных, КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1), подготовлено к отправке пакетов: (%2)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных, КолПодготовленных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подготовлено к отправке пакетов: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, 
																			КолУтвержденных, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подготовлено к отправке пакетов: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подготовлено к отправке пакетов: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодготовленных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных, КолПодписанных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных);
				КонецЕсли;
			Иначе
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных);
				Иначе
					Текст = НСтр("ru = 'Обработанных документов нет...'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,Текст);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Обрабатывает переданные документы ИБ в системе обмена электронными документами в соответствие с параметрами.
//
// Параметры:
// МассивСсылокНаОбъект - массив ссылок на объекты ИБ, которые необходимо обработать, 
// Действие - строка, представление действия, которое необходимо произвести с электронными документами,
// ДопПараметры - структура, дополнительные параметры обработки электронных документов.
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//
Процедура ОбработатьЭД(МассивСсылокНаОбъект, Действие, ДопПараметры = "", ЭД=Неопределено) Экспорт 
	
	Если НЕ (ЭлектронныеДокументы.ЕстьПравоОбработкиЭД()) Тогда
		ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектронныеДокументы.ИспользуетсяОбменЭД() Тогда
		ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо в настройках системы включить использование обмена электронными документами'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Попытка
		МассивСтруктурСертификатов = ЭлектроннаяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		МассивСтруктурДоступныхСертификатов = ЭлектронныеДокументы.МассивСтруктурДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов);							 
	Исключение
		МассивСтруктурДоступныхСертификатов = Новый Массив;
	КонецПопытки;
	
	СтруктураДействий = ЭлектронныеДокументы.ВыполнитьДействияПоЭД(МассивСсылокНаОбъект, МассивСтруктурДоступныхСертификатов, Действие, ДопПараметры, ЭД);
		
	ИтогКолНовыхЭД = 0;
	ИтогКолОтправленныхНаПодпись = 0;
	ИтогКолПодписанных = 0;
	ИтогКолПодготовленных = 0;
	
	Если ТипЗнч(СтруктураДействий) = Тип("Структура") Тогда
		Если СтруктураДействий.Свойство("КоличествоНовыхЭД") Тогда // было сформировано
			ИтогКолНовыхЭД = СтруктураДействий.КоличествоНовыхЭД;
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("КоличествоУтвержденныхЭД") Тогда // было утверждено
			ИтогКолОтправленныхНаПодпись = СтруктураДействий.КоличествоУтвержденныхЭД;
		КонецЕсли;
		
		МассивОбработки = "";
		Если СтруктураДействий.Свойство("МассивСертификатов", МассивОбработки) Тогда // есть что подписать
			Для Каждого ТекЭл Из МассивОбработки Цикл
				СертификатПодписи = ТекЭл.Сертификат;
				МассивЭД = ТекЭл.МассивЭД;
				КолПодписанных = ПодписатьЭДОпределеннымСертификатом(МассивЭД, СертификатПодписи);
				ИтогКолПодписанных = ИтогКолПодписанных + КолПодписанных;
			КонецЦикла;
		КонецЕсли;
		
		МассивОбработки = "";
		Если СтруктураДействий.Свойство("МассивСоглашений", МассивОбработки) Тогда // есть что отправить
			Для Каждого ТекЭл Из МассивОбработки Цикл
				Соглашение = ТекЭл.Соглашение;
				ПризнакПодписи = ТекЭл.ПризнакПодписи;
				МассивЭД = ТекЭл.МассивЭД;
				КолПодготовленных = ПодготовитьКОтправкеЭД(МассивЭД, ПризнакПодписи);
				ИтогКолПодготовленных = ИтогКолПодготовленных + КолПодготовленных;
			КонецЦикла;
		КонецЕсли;
		
		МассивОбработки = "";
		Если СтруктураДействий.Свойство("МассивНовыхЭД", МассивОбработки) И МассивОбработки <> Неопределено Тогда // Есть что посмотреть
			Для Каждого ТекЭл Из МассивОбработки Цикл
				ОткрытьЗначение(ТекЭл);		
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	ВывестиИнформациюОбОбработанныхЭД(ИтогКолНовыхЭД, ИтогКолОтправленныхНаПодпись, ИтогКолПодписанных, ИтогКолПодготовленных); 
	
КонецПроцедуры	
                                      
// Отправка и получение электронных документов одной командой.
Процедура ОтправитьПолучитьЭлектронныеДокументы() Экспорт

	Если НЕ (ЭлектронныеДокументы.ЕстьПравоОбработкиЭД()) Тогда
		ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектронныеДокументы.ИспользуетсяОбменЭД() Тогда
		ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо в настройках системы включить использование обмена электронными документами'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ЭлектронныеДокументы.ОтправитьИПолучитьДокументы(); 
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ТекстОповещения = НСтр("ru = 'Отправленных пакетов нет'");        
	
	КолОтправленныхПакетов = СтруктураВозврата.КолОтправленныхПакетов;
	Если КолОтправленныхПакетов > 0 Тогда
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправлено пакетов: (%1)'"), КолОтправленныхПакетов);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	    
	НовыеДокументы = СтруктураВозврата.НовыеДокументы;
	КоличествоНовыхЭД = НовыеДокументы.МассивВозврата.Количество();
	Для Каждого СтруктураРаспаковки Из НовыеДокументы.ПараметрыРаспаковки Цикл
		Если СтруктураРаспаковки.Распаковывать Тогда
			РаспаковатьПакетЭДНаКлиенте(СтруктураРаспаковки.ПакетЭД);
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоНовыхЭД = 0 И СтруктураВозврата.НовыеДокументы.ВызватьОповещение Тогда
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;	
	
	Если КоличествоНовыхЭД = 0 Тогда
		ТекстОповещения = ТекстОповещения + НСтр("ru = ', полученных пакетов нет'");        
	Иначе
		ТекстОповещения = ТекстОповещения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ', получено пакетов: (%1)'"), КоличествоНовыхЭД);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры					

////////////////////////////////////////////////////////////////////////////////
// Процедуры по распаковке пакетов ЭД (расшифровка, проверка подписи)

Функция РасшифроватьДвоичныеДанныеНаКлиенте(ДвоичныеДанные, МенеджерКриптографии)
	Возврат МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
КонецФункции

Процедура ПроверитьПодписьДвоичныхДанных(ИсходныеДвоичныеДанные, ДвоичныеДанныеПодписи, МенеджерКриптографии)
	ЭлектроннаяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, ИсходныеДвоичныеДанные, ДвоичныеДанныеПодписи);
КонецПроцедуры

Процедура РаспаковатьМассивПакетовЭД(МассивПЭД) Экспорт
	
	СписокДокументов = Новый Массив;
	ПараметрыШифрования = ЭлектронныеДокументы.ОпределитьШифрованиеИСтатус(МассивПЭД);
	Индекс = 0;
	Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
	    ПарольДоступа = Неопределено;
		Если СтруктураШифрования.Зашифрован И НЕ ПарольЗадан(СтруктураШифрования, ПараметрыШифрования, ПарольДоступа) Тогда
			ПараметрыФормы = Новый Структура("Заголовок, ПредставлениеСертификата", 
				НСтр("ru = 'Введите пароль расшифровки'"), СтруктураШифрования.Сертификат);
			КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);	
			Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
				ПарольДоступа = КодВозврата;
			Иначе // отказались вводить пароль
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтруктураШифрования.Вставить("ПарольДоступа", ПарольДоступа);
	    ПараметрыШифрования.Установить(Индекс, СтруктураШифрования);
		Индекс = Индекс+1;
	КонецЦикла;

	ВсегоРаспакованоЭД = 0;
	Для Каждого ТекЭл Из МассивПЭД Цикл
		КоличествоРаспакованныхДокументов = РаспаковатьПакетЭДНаКлиенте(ТекЭл, ПараметрыШифрования); 
		Если НЕ КоличествоРаспакованныхДокументов=Неопределено Тогда
			ВсегоРаспакованоЭД = ВсегоРаспакованоЭД + КоличествоРаспакованныхДокументов;
		КонецЕсли;
	КонецЦикла;
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Распаковано электронных документов: (%1)'"), ВсегоРаспакованоЭД);
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

Функция ПарольЗадан(ТекущаяСтруктура, ПараметрыШифрования, ПарольДоступа)
	
	СертификатПоиска = ТекущаяСтруктура.Сертификат;
	Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
		Если СтруктураШифрования.Сертификат = СертификатПоиска И СтруктураШифрования.Свойство("ПарольДоступа") Тогда
			ПарольДоступа = СтруктураШифрования.ПарольДоступа;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

// Расшифровывает и распаковывает пакет электронных документов.
// 
// Параметры: 
// ПакетЭД - ДокументСсылка.ПакетЭД, исследуемый пакет электронных документов.
// ПараметрыШифрования - Структура, параметры шифрования для данного пакета электронных документов.
//
Функция РаспаковатьПакетЭДНаКлиенте(ПакетЭД, ПараметрыШифрования = "") Экспорт
	
	Перем ПапкаДляРаспаковки, ПапкаДляРасшифровки;
	МассивВозврата = Новый Массив;

	Попытка
		ДанныеРаспаковки  = ЭлектронныеДокументы.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД, ПапкаДляРаспаковки, ПараметрыШифрования);
			
		// если это был произвольный ЭД.
		Если ДанныеРаспаковки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
		МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
		ЕстьКриптосредствоНаКлиенте = Истина;
		Попытка
			МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
		Исключение
			МенеджерКриптографии = Неопределено;
			ЕстьКриптосредствоНаКлиенте=Ложь;
		КонецПопытки;
		
		Если МассивДвоичныхДанных.Количество() = 0 Тогда
			ЭлектронныеДокументы.ОбработатьПодтвержденияДокументовНаСервере(ДанныеРаспаковки.СоответствиеФайлПараметры, ПакетЭД, ПапкаДляРаспаковки);
		КонецЕсли;
		
		Если МассивДвоичныхДанныхИзвещений.Количество() > 0 Тогда
			Для Каждого СтруктураДанных Из МассивДвоичныхДанныхИзвещений Цикл
			// Обработать пришедшие извещения от оператора
			// Оно может быть в случае, когда получаем извещение от покупателя о приеме ЭСФ
			МассивСтруктурПодписей = ЭлектронныеДокументы.ПолучитьСоответствиеДанныхПодписей(СтруктураДанных.ИмяФайла, ПапкаДляРаспаковки, 
															СтруктураДанных.ДвоичныеДанные, ДанныеРаспаковки.СоответствиеФайлПараметры, Истина);
			
			Если МассивСтруктурПодписей <> Неопределено Тогда
				ФлагОшибки = Ложь;
				Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
					Если СтруктураПодписи.ДвоичныеДанныеПодписи <> Неопределено Тогда // Если есть подпись
						Попытка 
							ПроверитьПодписьДвоичныхДанных(СтруктураПодписи.ДвоичныеДанныеФайла, СтруктураПодписи.ДвоичныеДанныеПодписи, МенеджерКриптографии);
						Исключение
							ОбработатьИсключениеПоЭДНаКлиенте(НСтр("ru = 'проверка подписи'"), ПодробноеПредставлениеОшибки(ОписаниеОшибки()), 
																							КраткоеПредставлениеОшибки(ОписаниеОшибки()), Ложь);
							ФлагОшибки = Истина;
							Прервать;
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
				
				Если ФлагОшибки Тогда 
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			МассивДобавленныхФайлов = ЭлектронныеДокументы.ДобавитьДанныеПоПакетуЭД(
																					ПакетЭД, 
																					МассивСтруктурПодписей, 
																					СтруктураДанных, 
																					ДанныеРаспаковки.СоответствиеФайлПараметры,
																					ПапкаДляРаспаковки, 
																					ПапкаДляРасшифровки 
																					);
			КонецЦикла;
		КонецЕсли;
		
		ЕстьОшибкаРаспаковки=Ложь;
			
		Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
			СтруктураШифрования = НайтиСтруктуруВПараметрах(СтруктураДанных.ИмяФайлаБезРасширения, ПараметрыШифрования);
			Если СтруктураШифрования <> Неопределено И СтруктураШифрования.Зашифрован Тогда
				Если СтруктураШифрования.Свойство("ПарольДоступа") Тогда // если пароль доступа не передали, значит не будем расшифровывать			
					МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураШифрования.ПарольДоступа;
					// Метод расшифровки генерирует исключение в случае ошибки
					Попытка
						РасшифрованныеДвоичныеДанные = РасшифроватьДвоичныеДанныеНаКлиенте(СтруктураДанных.ДвоичныеДанные, МенеджерКриптографии);
					Исключение
						ТекстСообщения = НСтр("ru = '%1. Проверьте настройки шифрования в Соглашении'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(ОписаниеОшибки()));
						ОбработатьИсключениеПоЭДНаКлиенте(НСтр("ru = 'расшифровка пакета ЭД'"), ПодробноеПредставлениеОшибки(ОписаниеОшибки()), ТекстСообщения, Ложь);
						Возврат Неопределено;
					КонецПопытки;
					СтруктураДанных.ДвоичныеДанные = РасшифрованныеДвоичныеДанные;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			МассивСтруктурПодписей = ЭлектронныеДокументы.ПолучитьСоответствиеДанныхПодписей(СтруктураДанных.ИмяФайла, ПапкаДляРаспаковки, 
																	СтруктураДанных.ДвоичныеДанные, ДанныеРаспаковки.СоответствиеФайлПараметры);
			
			МассивДобавленныхФайлов = ЭлектронныеДокументы.ДобавитьДанныеПоПакетуЭД(
																					ПакетЭД, 
																					МассивСтруктурПодписей, 
																					СтруктураДанных, 
																					ДанныеРаспаковки.СоответствиеФайлПараметры, 
																					ПапкаДляРаспаковки, 
																					ПапкаДляРасшифровки,
																					ЕстьОшибкаРаспаковки,
																					ЕстьКриптосредствоНаКлиенте
																					);

			Если не ЕстьОшибкаРаспаковки Тогда
				ДобавитьМассив(МассивВозврата, МассивДобавленныхФайлов);
			КонецЕсли;
		КонецЦикла;
		Если ЕстьОшибкаРаспаковки Тогда 
			Возврат 0;
		КонецЕсли;
		
		ЭлектронныеДокументы.УстановитьСтатусПакета(ПакетЭД, ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Распакован"));
	 
	Исключение
		ОбработатьИсключениеПоЭДНаКлиенте(НСтр("ru = 'распаковка входящего пакета ЭД'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), , Ложь);
	КонецПопытки;
	ЭлектронныеДокументы.УдалитьПапкуНаСервере(ПапкаДляРаспаковки);
	ЭлектронныеДокументы.УдалитьПапкуНаСервере(ПапкаДляРасшифровки);

	Возврат МассивВозврата.Количество();
	
КонецФункции

Функция НайтиСтруктуруВПараметрах(ИмяПоиска, ПараметрыШифрования)
	
	Если ТипЗнч(ПараметрыШифрования) = Тип("Массив") Тогда
		Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
			Если СокрЛП(ИмяПоиска) = СокрЛП(СтруктураШифрования.Документ) Тогда
				Возврат СтруктураШифрования;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьМассив(МассивПриемник, МассивИсточник)
	Если ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из МассивИсточник Цикл		
		МассивПриемник.Добавить(ЭлементИсточник)
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ПО ОБРАБОТКЕ ОШИБОК

Процедура ОбработатьИсключениеПоЭДНаКлиенте(ВидОперации, ПодробныйТекстОшибки, КраткийТекстОшибки = "",  ВывестиПредупреждение = Истина) Экспорт
	
	Если ПустаяСтрока(КраткийТекстОшибки) Тогда 
		ТекстСообщения = НСтр("ru = 'ошибка настройки криптографии (подробности см. в Журнале регистрации).'"); 
	Иначе 
		ТекстСообщения = КраткийТекстОшибки + НСтр("ru = ' (подробности см. в Журнале регистрации).'");; 
	КонецЕсли;
	ТекстСообщения = НСтр("ru = 'Операция не может быть выполнена по причине:'") + Символы.ПС + ТекстСообщения; 
	Если ВывестиПредупреждение Тогда 
		Предупреждение(ТекстСообщения);
		ТекстСообщения = "";
	КонецЕсли;
	ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ИНТЕРФЕЙСНЫХ КОМАНД РАБОТЫ С ЭД

// Возвращает массив ссылок на объекты
// Если передан в параметр массив, то возвращает его же
// Если передана пустая ссылка возращает Неопределено
//
// Параметры: 
// ПараметрКоманды - ссылка на объект или массив
//
// Возвращаемое значение
// Массив или Неопределено
//
Функция ПолучитьМассивПараметров(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Если ПараметрКоманды.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = ПараметрКоманды;
	Иначе // пришла единичная ссылка на объект
		Если ПараметрКоманды.Пустая() Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ПараметрКоманды);
	КонецЕсли;
	Возврат МассивСсылок;
	
КонецФункции

Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ЭД=Неопределено) Экспорт
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить",,ЭД);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

Процедура СформироватьНовыйЭД(ПараметрКоманды) Экспорт
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ОбработатьЭД(МассивСсылок, "Сформировать");
	
КонецПроцедуры

Процедура ОтправитьПовторноЭД(ПараметрКоманды, ЭД=Неопределено) Экспорт
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ОбработатьЭД(МассивСсылок, "Отправить",,ЭД);
	
КонецПроцедуры

Процедура ОтправитьПодтверждениеЭД(ПараметрКоманды, ЭД=Неопределено) Экспорт
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ОбработатьЭД(МассивСсылок, "УтвердитьПодписатьОтправить",,ЭД);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

Процедура УтвердитьЭД(ПараметрКоманды) Экспорт
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СсылкаНаЭД Из МассивСсылок Цикл
		ЭлектронныеДокументы.УстановитьПризнакУтвержден(СсылкаНаЭД);
	КонецЦикла;
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

Процедура ПерезаполнитьДаннымиИзЭД(ПараметрКоманды) Экспорт
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьВладельцыДаннымиИзЭД(МассивСсылок);
	
КонецПроцедуры

Процедура ПерезаполнитьВладельцыДаннымиИзЭД(МассивСсылок)
	
	Соответствие = ЭлектронныеДокументы.ПолучитьСсылкиЭДПоВладельцам(МассивСсылок);
	Для Каждого ТекЭл Из МассивСсылок Цикл
		СсылкаНаЭД = Соответствие.Получить(ТекЭл);
		ПараметрыОткрытияФормы = Новый Структура("ЭлектронныйДокумент, НеОткрыватьФормуПриОтсутствииНесопоставленнойНоменклатуры", СсылкаНаЭД, Истина);
		ОткрытьФормуМодально("ОбщаяФорма.СопоставлениеДанныеПоНоменклатуре", ПараметрыОткрытияФормы);
	КонецЦикла;
	
	КолОбработанных = ЭлектронныеДокументы.ПерезаполнитьДокументыИБПоЭД(МассивСсылок, Соответствие);
	Если КолОбработанных > 0 Тогда
		Оповестить("ОбновитьСостояниеЭД");
		Оповестить("ОбновитьДокументИБПослеЗаполнения");
	КонецЕсли;
	ТекстСостоянияВывод = НСтр("ru = 'Заполнено: (%1)'");	
	ТекстСостоянияВывод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостоянияВывод, КолОбработанных);
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,ТекстСостоянияВывод);
	
КонецПроцедуры
