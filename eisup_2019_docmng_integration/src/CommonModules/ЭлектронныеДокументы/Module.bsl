
////////////////////////////////////////////////////////////////             
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ

// Определяет имя файла электронного документа.
//
// Параметры
// ВидЭД - Вид электронного документа, перечисление.
//
Функция ОпределитьИмяФайлаЭД(ВидЭД, СсылкаНаОбъект)  Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		ВерсияЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
		Если ВерсияЭД<>0 Тогда
			ТекстВерсии = НСтр("ru = ' (версия %1)'");
			ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ВерсияЭД);
		КонецЕсли;
		СтрокаИмени = "СчФ_"+СсылкаНаОбъект.Номер+"_"+Формат(СсылкаНаОбъект.Дата, "ДФ=yyyy-MM-dd")+ТекстВерсии+".xml";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Накладная Тогда
		ВерсияЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
		Если ВерсияЭД<>0 Тогда
			ТекстВерсии = НСтр("ru = ' (версия %1)'");
			ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ВерсияЭД);
		КонецЕсли;
		СтрокаИмени = "РНк_"+СсылкаНаОбъект.Номер+"_"+Формат(СсылкаНаОбъект.Дата, "ДФ=yyyy-MM-dd")+ТекстВерсии+".xml";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		ВерсияЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
		Если ВерсияЭД<>0 Тогда
			ТекстВерсии = НСтр("ru = ' (версия %1)'");
			ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ВерсияЭД);
		КонецЕсли;
		СтрокаИмени = "Счет_"+СсылкаНаОбъект.Номер+"_"+Формат(СсылкаНаОбъект.Дата, "ДФ=yyyy-MM-dd")+ТекстВерсии+".xml";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		ВерсияЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
		Если ВерсияЭД<>0 Тогда
			ТекстВерсии = НСтр("ru = ' (версия %1)'");
			ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ВерсияЭД);
		КонецЕсли;
		СтрокаИмени = "ЗаказТовара_"+СсылкаНаОбъект.Номер+"_"+Формат(СсылкаНаОбъект.Дата, "ДФ=yyyy-MM-dd")+ТекстВерсии+".xml";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		ВерсияЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
		Если ВерсияЭД<>0 Тогда
			ТекстВерсии = НСтр("ru = ' (версия %1)'");
			ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ВерсияЭД);
		КонецЕсли;
		СтрокаИмени = "ОтветНаЗаказ_"+СсылкаНаОбъект.Номер+"_"+Формат(СсылкаНаОбъект.Дата, "ДФ=yyyy-MM-dd")+ТекстВерсии+".xml";		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		ВерсияЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
		Если ВерсияЭД<>0 Тогда
			ТекстВерсии = НСтр("ru = ' (версия %1)'");
			ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ВерсияЭД);
		КонецЕсли;
		СтрокаИмени = "ПрайсЛист_"+СсылкаНаОбъект.Номер+"_"+Формат(СсылкаНаОбъект.Дата, "ДФ=yyyy-MM-dd")+ТекстВерсии+".xml";			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		ВерсияЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
		Если ВерсияЭД<>0 Тогда
			ТекстВерсии = НСтр("ru = ' (версия %1)'");
			ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ВерсияЭД);
		КонецЕсли;
		СтрокаИмени = "КаталогТоваров_"+СсылкаНаОбъект.Номер+"_"+Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")+ТекстВерсии+".xml";			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
		ВерсияЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
		Если ВерсияЭД<>0 Тогда
			ТекстВерсии = НСтр("ru = ' (версия %1)'");
			ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ВерсияЭД);
		КонецЕсли;
		СтрокаИмени = "Акт_"+СсылкаНаОбъект.Номер+"_"+Формат(СсылкаНаОбъект.Дата, "ДФ=yyyy-MM-dd")+ТекстВерсии+".xml";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		ВерсияЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
		Если ВерсияЭД<>0 Тогда
			ТекстВерсии = НСтр("ru = ' (версия %1)'");
			ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ВерсияЭД);
		КонецЕсли;
		СтрокаИмени = "ОтчетОПродажахКомиссионногоТовара_"+СсылкаНаОбъект.Номер+"_"+Формат(СсылкаНаОбъект.Дата, "ДФ=yyyy-MM-dd")+ТекстВерсии+".xml";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		ВерсияЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
		Если ВерсияЭД<>0 Тогда
			ТекстВерсии = НСтр("ru = ' (версия %1)'");
			ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ВерсияЭД);
		КонецЕсли;
		СтрокаИмени = "ОтчетОСписанииКомиссионногоТовара_"+СсылкаНаОбъект.Номер+"_"+Формат(СсылкаНаОбъект.Дата, "ДФ=yyyy-MM-dd")+ТекстВерсии+".xml";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
		ВерсияЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
		Если ВерсияЭД<>0 Тогда
			ТекстВерсии = НСтр("ru = ' (версия %1)'");
			ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ВерсияЭД);
		КонецЕсли;
		СтрокаИмени = "ПередачаИнт_"+СсылкаНаОбъект.Номер+"_"+Формат(СсылкаНаОбъект.Дата, "ДФ=yyyy-MM-dd")+ТекстВерсии+".xml";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		ВерсияЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
		Если ВерсияЭД<>0 Тогда
			ТекстВерсии = НСтр("ru = ' (версия %1)'");
			ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ВерсияЭД);
		КонецЕсли;
		СтрокаИмени = "ВозвратИнт_"+СсылкаНаОбъект.Номер+"_"+Формат(СсылкаНаОбъект.Дата, "ДФ=yyyy-MM-dd")+ТекстВерсии+".xml";
	Иначе // все остальное
		СтрокаИмени = ПолучитьИмяВременногоФайла("xml");
	КонецЕсли;
	СтрокаИмени = КорректноеИмяФайла(СтрокаИмени, Истина);
	
	Возврат  СтрокаИмени;		
	
КонецФункции

// Алгоритм взят с небольшими изменениями из процедуры клиентского общего модуля "ФайловыеФункции"
// Функция предназначена для проверки имени файла на наличие некорректных символов
// Параметры:
//  СтрИмяФайла  - Строка
//                 проверяемое имя файла
//  ФлУдалятьНекорректные - Булево
//                 удалять или нет некорректные символы из переданной строки
// Возвращаемое значение: 
//	Строка - имя файла
Функция КорректноеИмяФайла(СтрИмяФайла, ФлУдалятьНекорректные = Ложь) Экспорт
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	//  при этом были объединены запрещенные символы для файловых систем FAT и NTFS
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Результат = Истина;
	
	Для Сч=1 по СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если Найти(СтрИмяФайла, Символ) <> 0 Тогда
			Если ФлУдалятьНекорректные Тогда
				СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, "");
			Иначе
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		ТекстОшибки =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В имени файла не должно быть следующих символов: %1'"), СтрИсключения + Символы.ПС + "Имя файла: "+СтрИмяФайла);
		ВызватьИсключение ТекстОшибки;
	Иначе
		Возврат СтрИмяФайла;
	КонецЕсли;
	
КонецФункции // КорректноеИмяФайла()

// Получает каталог и имя файла для переданного полного имени файла.
//
// Параметры
//  ПолноеИмяФайла  - Строка - полное имя файла, из которого будут получены имя каталога и имя файла.
//  ИмяКаталога		- Строка - в данную переменную будет помещено полученное имя каталога.
//  ИмяФайла		- Строка - в данную переменную будет помещено полученное имя файла.
// 
Процедура ПолучитьКаталогИИмяФайла(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла) Экспорт
	
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
	Пока Истина Цикл
		
		Поз = Макс(Найти(ИмяФайла, "\"), Найти(ИмяФайла, "/"));
		Если Поз = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИмяКаталога = ИмяКаталога + Лев(ИмяФайла, Поз);
		ИмяФайла = Сред(ИмяФайла, Поз+1);
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ПОЛУЧЕНИЯ ДАННЫХ ОБЪЕКТОВ ДЛЯ СРАВНЕНИЯ

// Получает таблицу реквизитов шапки передаваемого объекта.
//
// Параметры
// Объект - Ссылка на объект, реквизиты шапки которого надо получить.
// СтрокаТаблицыРеквизитов  - Строка таблицы значений, набор наименований необходимых реквизитов для получения.
//
Функция ПолучитьТаблицуРеквизитовШапки(Объект, СтрокаТаблицыРеквизитов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ " + СтрокаТаблицыРеквизитов.РеквизитыОбъекта 
	+ " ИЗ " + СтрокаТаблицыРеквизитов.ИмяОбъекта + " КАК ТекущийОбъект
	|ГДЕ
	|   ТекущийОбъект.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает таблицу реквизитов табличной части передаваемого объекта.
//
// Параметры
// Объект - Ссылка на объект, реквизиты табличной части которого надо получить.
// СтрокаТаблицыРеквизитов  - Строка таблицы значений, набор наименований необходимых реквизитов для получения.
//
Функция ПолучитьТаблицуРеквизитовТабличнойЧасти(Объект, СтрокаТаблицыРеквизитов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ "+ СтрокаТаблицыРеквизитов.РеквизитыОбъекта
	+ " ИЗ " + СтрокаТаблицыРеквизитов.ИмяОбъекта 
	+ "." + СтрокаТаблицыРеквизитов.ИмяТабличнойЧасти + " КАК ТекущийОбъектИмяТабличнойЧасти
	|ГДЕ
	|   ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверяет переданные таблицы реквизитов на совпадения.
//
// Параметры
// Таблица1, Таблица2 - таблицы значений, реквизиты, которые надо проверить на совпадение,
// СтрокаТаблицыРеквизитовОбъекта - Структура необходимых реквизитов для проверки,
// ДопПараметры - структура дополнительных параметров, по которым надо проводить сравнение.
//
Функция ТаблицыРеквизитовОбъектовОдинаковые(Таблица1, Таблица2, СтрокаТаблицыРеквизитовОбъекта, ДопПараметры = Неопределено) Экспорт
	
	ДобавитьИтераторТаблице(Таблица1, +1);
	ДобавитьИтераторТаблице(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(СтрокаТаблицыРеквизитовОбъекта.РеквизитыОбъекта, "ИтераторТаблицыРеквизитовОбъекта");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура ("ИтераторТаблицыРеквизитовОбъекта", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	
	ПризнакСовпадения = КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
	Если НЕ ПризнакСовпадения И ЗначениеЗаполнено(ДопПараметры) Тогда // есть различия и надо вернуть различия
		Если ДопПараметры.Свойство("ИмяТабличнойЧасти") Тогда
			ИмяТабличнойЧасти = ДопПараметры.ИмяТабличнойЧасти;
		КонецЕсли;
		Если ДопПараметры.Свойство("СтрокаДереваСравнения") Тогда
			СтрокаДереваСравнения = ДопПараметры.СтрокаДереваСравнения;
		КонецЕсли;
		Если ИмяТабличнойЧасти = "Шапка" Тогда  // шапка
			// пока только для шапки детализация
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = "Реквизиты шапки";
			Для Каждого ТекСтрокаТаб1 Из Таблица1 Цикл // сравниваем по строкам
				Для Каждого ТекКолонка Из Таблица1.Колонки Цикл // и столбцам
					ИмяКолонки = ТекКолонка.Имя;
					Если ИмяКолонки = "ИтераторТаблицыРеквизитовОбъекта" Тогда // служебная колонка
						Продолжить;
					КонецЕсли;
					НайденнаяСтрокаТаб2 = Таблица2.Найти(-ТекСтрокаТаб1.ИтераторТаблицыРеквизитовОбъекта, 
					"ИтераторТаблицыРеквизитовОбъекта");
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрокаТаб2) 
						ИЛИ	НайденнаяСтрокаТаб2[ИмяКолонки] = ТекСтрокаТаб1[ИмяКолонки] Тогда // нет отличия
						Продолжить;	
					КонецЕсли;
					НовСтрокаДереваРекв = НовСтрокаДереваМесто.Строки.Добавить();
					НовСтрокаДереваРекв.Реквизит = ИмяКолонки;
					//
					НовСтрокаДереваЗнч = НовСтрокаДереваРекв.Строки.Добавить();
					НовСтрокаДереваЗнч.ЗначениеБД	= ТекСтрокаТаб1[ИмяКолонки];
					НовСтрокаДереваЗнч.ЗначениеЭД 	= НайденнаяСтрокаТаб2[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		Иначе
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = "Табличная часть <"+ИмяТабличнойЧасти+">";
			НовСтрокаДереваРекв = НовСтрокаДереваМесто.Строки.Добавить();
			НовСтрокаДереваРекв.Реквизит = "<Изменена>";
		КонецЕсли;
	КонецЕсли;  // есть различия
	
	Возврат ПризнакСовпадения;	
	
КонецФункции

Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовОбъекта");	
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовОбъекта");
	
КонецПроцедуры

Функция ИнициализацияТаблицыРеквизитовОбъектов()
	
	// возвращаемое значение функции
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаРеквизитов.Колонки;
	
	Колонки.Добавить("Порядок",                    Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ИмяОбъекта",                 Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяТабличнойЧасти",          Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РеквизитыОбъекта",           Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СтруктураРеквизитовОбъекта", Новый ОписаниеТипов("Структура"));
	
	// добавляем индекс
	ТаблицаРеквизитов.Индексы.Добавить("ИмяОбъекта");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

// Получает таблицу с ключевыми реквизитами объекта
// 
// Параметры 
// ИмяОбъекта - строка, имя объекта конфигурации, ключевые реквизиты которого необходимо получить.
//
Функция ПолучитьТаблицуКлючевыхРеквизитовОбъекта(ИмяОбъекта) Экспорт 
	
	ТаблицаРеквизитов = ИнициализацияТаблицыРеквизитовОбъектов();
	
	СтруктураКлючевыхРеквизитов = ЭлектронныеДокументыПереопределяемый.ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта);
	
	ТекПорядок = -50;
	Для Каждого ТекЭлемент Из СтруктураКлючевыхРеквизитов Цикл
		НовСтрока 								= ТаблицаРеквизитов.Добавить();
		НовСтрока.Порядок 						= ТекПорядок;
		НовСтрока.ИмяОбъекта 					= ИмяОбъекта;
		НовСтрока.ИмяТабличнойЧасти 			= ?(ТекЭлемент.Ключ="Шапка", "", ТекЭлемент.Ключ);
		НовСтрока.РеквизитыОбъекта  			= ТекЭлемент.Значение;
		НовСтрока.СтруктураРеквизитовОбъекта 	= Новый Структура(ТекЭлемент.Значение);
		ТекПорядок = ТекПорядок + 100;
	КонецЦикла;
	
	ТаблицаРеквизитов.Сортировать("Порядок Возр");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

////////////////////////////////////////////////////////////////
// МЕТОДЫ ЗАПОЛНЕНИЯ ОБЪЕКТОВ

// Перезаполняет реквизиты шапки объекта.
//
// Параметры: 
// ТекущийОбъект - Объект ИБ, реквизиты шапки которого необходимо заполнить,
// ДанныеЗаполнения - Структура значений, которые необходимо подставить в объект ИБ.
//
Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ТекЭл Из ДанныеЗаполнения Цикл
		Если ЗначениеЗаполнено(ТекЭл.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(ТекЭл.Ключ)<> Неопределено Тогда
			Если ТекущийОбъект[ТекЭл.Ключ] <> ТекЭл.Значение Тогда
				ТекущийОбъект[ТекЭл.Ключ] = ТекЭл.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты объекта по соответствию наименований
// 
// Параметры: 
// СтрокаМассива - СтрокаДереваЗначений, набор параметров, по которому будет происходить заполнение
// ОбъектМетаданных - Объект ИБ, реквизиты которого необходимо заполнить.
//
Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда // не указано значение
			Продолжить;
		КонецЕсли;
		Если ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные(), ТекСтрока.Реквизит) Тогда // ищем в стандартных реквизитах
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит)<> Неопределено Тогда // ищем в остальных реквизитах
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что текущий реквизит это стандартный реквизит объекта
//
Функция ЭтоСтандартныйРеквизит(ОбъектМетаданных, Наименование) Экспорт
	
	Для Каждого ОписаниеСтандартногоРеквизита Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если ОписаниеСтандартногоРеквизита.Имя = Наименование Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает статус докумена ПакетЭД
// Параметры:
//  Пакет  - Ссылка на документ ПакетЭД
//  СтатусПакета - ссылка на перечисление СтатусыПакетовЭД
Процедура УстановитьСтатусПакета(Пакет, СтатусПакета)   Экспорт
	ПакетЭДОбъект = Пакет.ПолучитьОбъект();
	ПакетЭДОбъект.СтатусПакета = СтатусПакета;
	ПакетЭДОбъект.Записать();
КонецПроцедуры	

//Получает выборку элементов справочника ЭДПрисоединенныеФайлы по отбору
// Параметры:
//  Параметры  - Структура, Ключ - название реквизита отбора, Значение - значение отбора
Функция ПолучитьВыборкуЭДПоОтбору(Параметры) Экспорт
	
	Если НЕ ТипЗнч(Параметры)=Тип("Структура") ИЛИ Параметры.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	               |	ЭДПрисоединенныеФайлы.Наименование,
	               |	ЭДПрисоединенныеФайлы.Ссылка
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ 
				   |";
				   
	ПервыйЭлемент = Истина;			   
	Для Каждого Элемент Из Параметры Цикл
		Запрос.Текст = Запрос.Текст + ?(НЕ ПервыйЭлемент," И ","") + " ЭДПрисоединенныеФайлы." + Элемент.Ключ + "=&" + Элемент.Ключ;		   
		ПервыйЭлемент = Ложь;		   
	 	Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	 
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

//////////////////////////////////////////////////////////////////////
// МЕТОДЫ УПРАВЛЕНИЯ ЭЛ.ПОЧТОЙ

Функция СформироватьТемуПисьма(Отправитель, Получатель) 
	
	Возврат "Обмен эл.документами: "+Отправитель+?(ЗначениеЗаполнено(Получатель)," -> "+Получатель, "");
	
КонецФункции

////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОТБОРА ПО ЭЛЕМЕНТУ

// Устанавливает отбор по элементу при загрузке настроек.
//
// Параметры:
// Форма - ссылка на форму, в которой надо провести отбор, 
// СписокДанных - список, в котором будет проводиться отбор,
// ВидЭлемента - строка, вид элемента, по которому будет проводиться отбор,
// Настройки - структура настроек формы.
//
Процедура ОтборПоЭлементуПриЗагрузкеИзНастроек(Форма, СписокДанных, ВидЭлемента, Настройки) Экспорт
	
	ЗначениеЭлемента = Настройки.Получить(ВидЭлемента);
	Если ЗначениеЗаполнено(ЗначениеЭлемента) Тогда 
		Форма[ВидЭлемента] = ЗначениеЭлемента;
		УстановитьОтборВСпискеПоЭлементу(СписокДанных, ВидЭлемента, ЗначениеЭлемента);
	КонецЕсли;
	Настройки.Удалить(ВидЭлемента);
	
КонецПроцедуры

// Устанавливает отбор в списке данных по элементу.
//
// Параметры:
// СписокДанных - список, в котором будет проводиться отбор,
// ВидЭлемента - строка, вид элемента, по которому будет проводиться отбор,
// ЗначениеЭлемента - значение, которое будет передано отбору.
//
Процедура УстановитьОтборВСпискеПоЭлементу(СписокДанных, ВидЭлемента, ЗначениеЭлемента) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДанных.Отбор, ВидЭлемента, ЗначениеЭлемента, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ЗначениеЭлемента));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНОЕ ЗАДАНИЕ

// Выполняет регламентное задание по получению новых электронных документов.
//
// Параметры:
// ОписаниеОшибки - строка, описание ошибки, в случае ее возникновения в ходе получения документов.
//
Процедура РегламентноеПолучениеНовыхЭД() Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение новых эл.документов'"),
							УровеньЖурналаРегистрации.Информация, , ,
							НСтр("ru = 'Начато регламентное задание по получению новых эл.документов.'"));
	НачатьТранзакцию();
	Попытка
		НовыеДокументы = ПолучитьНовыеЭД();
		КоличествоПакетов = НовыеДокументы.МассивВозврата.Количество();
		Для Каждого СтруктураРаспаковки Из НовыеДокументы.ПараметрыРаспаковки Цикл
			Если СтруктураРаспаковки.Распаковывать Тогда
				РаспаковатьПакетЭДНаСервере(СтруктураРаспаковки.ПакетЭД);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		Текст = НСтр("ru = 'Закончено регламентное задание. Получено пакетов: %КоличествоПакетов%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение новых эл.документов'"), УровеньЖурналаРегистрации.Информация, , , Текст);
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = НСтр("ru = 'Во время регламентного получения новых эл.документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение новых эл.документов'"), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет регламентное задание по фактической отправке электронных документов.
//
Процедура РегламентнаяОтправкаОформленныхЭД() Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка оформленных эл.документов'"),
								УровеньЖурналаРегистрации.Информация, , ,
								НСтр("ru = 'Начато регламентное задание по отправке оформленных эл.документов.'"));
	НачатьТранзакцию();
	Попытка
		КоличествоПакетов = ОтправкаСформированныхЭД();
		ЗафиксироватьТранзакцию();
		Текст = НСтр("ru = 'Закончено регламентное задание. Отправлено пакетов: %КоличествоПакетов%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка оформленных эл.документов'"), УровеньЖурналаРегистрации.Информация, , , Текст);
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = НСтр("ru = 'Во время регламентной отправки оформленных эл.документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка оформленных эл.документов'"), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция РаспаковатьПакетЭДНаСервере(ПакетЭД, ПараметрыШифрования = "")
	
	МассивВозврата = Новый Массив;
	ПапкаДляРаспаковки = КаталогВременныхФайлов() + "РаспакованныйАрхив\" + ПакетЭД.Ссылка.УникальныйИдентификатор()+"\";
	ПапкаДляРасшифровки = КаталогВременныхФайлов() + "РасшифрованныйАрхив\" + ПакетЭД.Ссылка.УникальныйИдентификатор()+"\";

	ДанныеРаспаковки  = ВернутьМассивДвоичныхДанныхПакета(ПакетЭД, ПапкаДляРаспаковки, ПараметрыШифрования);
	// если это был произвольный ЭД.
	Если ДанныеРаспаковки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
	МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
	Попытка
		НастройкиКриптографии = ЭлектроннаяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
	Исключение
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	
	Если МассивДвоичныхДанных.Количество() = 0 Тогда
		ОбработатьПодтвержденияДокументовНаСервере(ДанныеРаспаковки.СоответствиеФайлПараметры, ПакетЭД, ПапкаДляРаспаковки);
	КонецЕсли;
	
	Если МассивДвоичныхДанныхИзвещений.Количество() > 0 Тогда
		Для Каждого СтруктураДанных Из МассивДвоичныхДанныхИзвещений Цикл
		// Обработать пришедшие извещения от оператора
		// Оно может быть в случае, когда получаем извещение от покупателя о приеме ЭСФ
		МассивСтруктурПодписей = ПолучитьСоответствиеДанныхПодписей(СтруктураДанных.ИмяФайла, ПапкаДляРаспаковки, 
														СтруктураДанных.ДвоичныеДанные, ДанныеРаспаковки.СоответствиеФайлПараметры, Истина);
		
		Если МассивСтруктурПодписей <> Неопределено Тогда
			ФлагОшибки = Ложь;
			Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
				Если СтруктураПодписи.ДвоичныеДанныеПодписи <> Неопределено Тогда // Если есть подпись
					Попытка 
						ЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии, СтруктураПодписи.ДвоичныеДанныеФайла, СтруктураПодписи.ДвоичныеДанныеПодписи);
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
						ФлагОшибки = Истина;
						Прервать;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			Если ФлагОшибки Тогда 
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		МассивДобавленныхФайлов = ДобавитьДанныеПоПакетуЭД(
															ПакетЭД, 
															МассивСтруктурПодписей, 
															СтруктураДанных, 
															ДанныеРаспаковки.СоответствиеФайлПараметры,
															ПапкаДляРаспаковки, 
															ПапкаДляРасшифровки 
															);
		КонецЦикла;
	КонецЕсли;
			
	ЕстьОшибкаРаспаковки=Ложь;
		
	Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
		СтруктураШифрования = НайтиСтруктуруВПараметрах(СтруктураДанных.ИмяФайлаБезРасширения, ПараметрыШифрования);
		Если СтруктураШифрования <> Неопределено И СтруктураШифрования.Зашифрован Тогда // если есть шифрование прекращаем обработку, расшифровка проходит на клиенте
			Прервать;
		КонецЕсли;
		
		МассивСтруктурПодписей = ПолучитьСоответствиеДанныхПодписей(СтруктураДанных.ИмяФайла, ПапкаДляРаспаковки, 
																СтруктураДанных.ДвоичныеДанные, ДанныеРаспаковки.СоответствиеФайлПараметры);
				
		МассивДобавленныхФайлов = ДобавитьДанныеПоПакетуЭД(
															ПакетЭД, 
															МассивСтруктурПодписей, 
															СтруктураДанных, 
															ДанныеРаспаковки.СоответствиеФайлПараметры, 
															ПапкаДляРаспаковки, 
															ПапкаДляРасшифровки,
															ЕстьОшибкаРаспаковки
															);
		Если не ЕстьОшибкаРаспаковки Тогда
			ДобавитьМассив(МассивВозврата, МассивДобавленныхФайлов);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибкаРаспаковки Тогда 
		Возврат (Новый массив);
  	КонецЕсли; 
	
	УстановитьСтатусПакета(ПакетЭД, Перечисления.СтатусыПакетовЭД.Распакован);
    
	УдалитьФайлы(ПапкаДляРаспаковки);

	Возврат МассивВозврата;
	
КонецФункции

Функция ОпределитьПодготовленныеКОтправкеЭД()
	
	ЗапросПодготовленныхЭД = Новый Запрос;
	ЗапросПодготовленныхЭД.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.СтатусПакета = &СтатусПакета";
	ЗапросПодготовленныхЭД.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
	Результат = ЗапросПодготовленныхЭД.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;
	
КонецФункции

Функция ОтправитьИПолучитьДокументы() Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КолОтправленныхПакетов", ОтправкаСформированныхЭД());
	СтруктураВозврата.Вставить("НовыеДокументы", ПолучитьНовыеЭД());
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОтправкаСформированныхЭД() Экспорт
	
	Результат = 0;
	// Создадим и заполним документы ПакетыЭД
	ГотовыеКОтправкеПакеты = ОпределитьПодготовленныеКОтправкеЭД();
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) И ГотовыеКОтправкеПакеты.Количество() > 0 Тогда
		Результат = ОтправкаПакетовЭД(ГотовыеКОтправкеПакеты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправкаПакетовЭД(МассивПакетовЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОтправки = 0;
	Для Каждого ТекЭл Из МассивПакетовЭД Цикл
		Попытка // если электронный документ по каким-то причинам отправлен быть не может, то не надо приостанавливать всю цепочку.
			ПакетЭД=ТекЭл;
			ТипОтправки = ТекЭл.СпособОбменаЭД;
			АдресКаталогаОтправки = СформироватьФайлыДляОтправки(ПакетЭД);
			Если ПустаяСтрока(АдресКаталогаОтправки) Тогда
				Продолжить;
			КонецЕсли;
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту ИЛИ ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезСОС Тогда
				РезультатОтправки = РезультатОтправки + ОтправитьЭлектронноеПисьмо(ПакетЭД, АдресКаталогаОтправки);
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				АдресКаталога = ПакетЭД.АдресРесурсаКонтрагента+?(Прав(ПакетЭД.АдресРесурсаКонтрагента,1)<>"\","\","");
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					КопироватьФайл(Файл.ПолноеИмя, АдресКаталога+Файл.Имя);
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
			КонецЕсли;
			ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД, Перечисления.СтатусыПакетовЭД.Отправлен, ТекущаяДата());
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'отправка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	Если НЕ ПустаяСтрока(АдресКаталогаОтправки) Тогда
		УдалитьФайлы(АдресКаталогаОтправки);
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция ОтправитьЭлектронноеПисьмо(ПодготовленныеДокументы, АдресКаталогаСВложениями)
	
	СоответствиеВложений = СформироватьСоответствиеВложений(АдресКаталогаСВложениями);
	Результат = ПередатьПисьмоСВложениями(ПодготовленныеДокументы, СоответствиеВложений);
	УдалитьФайлы(АдресКаталогаСВложениями);
	Возврат Результат;
	
КонецФункции

Функция ЭтоПакетПроизвольногоЭД(МассивДокументов)
	
	Для Каждого Документ Из МассивДокументов Цикл
		Если ТипЗнч(Документ.ВладелецФайла) = Тип("ДокументСсылка.ПроизвольныйЭД") И 
			Документ.ВладелецФайла.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

//#Если Не ВебКлиент Тогда 
Процедура СформироватьЭДПрисоединенныйФайлПакета(Конверт)
	
	ПодготовленныеДокументы = ПолучитьЭлектронныеДокументыКонвертов(Конверт);	
	ЭтоПроизвольныйДокумент = ЭтоПакетПроизвольногоЭД(ПодготовленныеДокументы);
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	СоответствиеФайлЭД 		= Новый Соответствие;
			
	АдресКаталога = КаталогВременныхФайлов() + "ЭлектроннаяОтправка\"+ Конверт.Ссылка.УникальныйИдентификатор()+"\";
	УдалитьФайлы(АдресКаталога, "*");
	Для Каждого ДокументНаОтправку Из ПодготовленныеДокументы Цикл
		Если ЭтоОтправкаПодтверждения(ДокументНаОтправку)  Тогда
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ДокументНаОтправку);
			СохранитьВместеСПоследнейЭЦП(ДокументНаОтправку, ДанныеФайла, УникальныйИдентификатор, АдресКаталога, СоответствиеФайлЭД);
		Иначе
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ДокументНаОтправку);
			СохранитьВместеСЭЦП(ДокументНаОтправку, ДанныеФайла, УникальныйИдентификатор, АдресКаталога, Конверт, СоответствиеФайлЭД, ЭтоПроизвольныйДокумент );
		КонецЕсли;
	КонецЦикла;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	
	Для Каждого Файл Из Файлы Цикл
		Если Файл.Расширение <> ".zip" И Найти(Файл.Имя, "Извещение") = 0 И Файл.Расширение <> ".p7s" Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	Если Файлы.Количество() = 0 Тогда
		Возврат ;
	КонецЕсли;
		
	МассивИменФайлов = Новый Массив;
	Для Каждого НайденныйФайл Из Файлы Цикл
		МассивИменФайлов.Добавить(НайденныйФайл.Имя);
	КонецЦикла;
	ЗипКонтейнер = Новый ЗаписьZipФайла();
	ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
	СкорректироватьИмяФайла(ИмяФайла);
	ЗипКонтейнер.Открыть(АдресКаталога+ИмяФайла+".zip");
	Для Каждого Файл Из Файлы Цикл
		ЗипКонтейнер.Добавить(Файл.ПолноеИмя);                             
	КонецЦикла;
	
	СоответствиеВложений 	= ПолучитьСоответствиеФайловИПодписей(МассивИменФайлов);
	ТекстОписанияУчастников = СоздатьТекстОписиЭД(Конверт.Отправитель,	Конверт.Получатель, Конверт, СоответствиеВложений, СоответствиеФайлЭД, ЭтоПроизвольныйДокумент);
	
	КопироватьФайл(ТекстОписанияУчастников, АдресКаталога+"packageDescription.xml");
	ЗипКонтейнер.Добавить(АдресКаталога+"packageDescription.xml");
	
	ЗипКонтейнер.Записать();
	
	// сохраним зип-контейнер в присоединенных файлах к конверту
	ПоместитьПакетЭДВКонверт(Конверт, АдресКаталога+ИмяФайла+".zip");
	
	УдалитьФайлы(АдресКаталога);
	
КонецПроцедуры
  
Функция СформироватьФайлыДляОтправки(Конверт)
	
	ФайлыЭД = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла",Конверт));
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	СоздатьКаталог(КаталогВременныхФайлов() + "ЭлектроннаяОтправка\" + Конверт.Ссылка.УникальныйИдентификатор());
	АдресКаталога = КаталогВременныхФайлов() + "ЭлектроннаяОтправка\" + Конверт.Ссылка.УникальныйИдентификатор()+"\";
	
	Пока ЗначениеЗаполнено(ФайлыЭД) И ФайлыЭД.Следующий() Цикл
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлыЭД.Ссылка);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ДвоичныеДанные.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
	КонецЦикла;
	
	Возврат АдресКаталога;
	
КонецФункции
//#КонецЕсли

Функция СформироватьСписокРасширенийСертификатов()
	
	СписокРасширений = Новый СписокЗначений;
	СписокРасширений.Добавить(".p7s");
	Возврат СписокРасширений;
	
КонецФункции

Функция СформироватьСоответствиеВложений(КаталогВложений, ТолькоПодписи = Ложь)
	
	СписокДоступныхРасширений = СформироватьСписокРасширенийСертификатов();
	СоответствиеВозврата = Новый Соответствие;
	СписокВложений = НайтиФайлы(КаталогВложений, "*");
	Для Каждого ФайлВложений Из СписокВложений Цикл
		Если ТолькоПодписи И Найти(ФайлВложений.Расширение, СписокДоступныхРасширений) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФайлВложений.ЭтоФайл() Тогда
			СоответствиеВозврата.Вставить(ФайлВложений.Имя, Новый ДвоичныеДанные(ФайлВложений.ПолноеИмя));
		КонецЕсли;
		
	КонецЦикла;
	Возврат СоответствиеВозврата;
	
КонецФункции

// Дополнительные процедуры и функции для сохранения и подписи
Процедура СохранитьВместеСПоследнейЭЦП(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор, АдресКаталога, СоответствиеФайлЭД)
	
	ПолноеИмяФайла = АдресКаталога+ СтрЗаменить(ДанныеФайла.ИмяФайла, "..",".");
	МассивСтруктурПодписей = ЭлектроннаяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	Файл = Новый Файл(АдресКаталога);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(АдресКаталога);
	КонецЕсли;
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, УникальныйИдентификатор, МассивСтруктурПодписей, АдресКаталога, СоответствиеФайлЭД, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьВместеСЭЦП(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор, АдресКаталога, СсылкаНаПакет, СоответствиеФайлЭД, ЭтоПроизвольныйДокумент = Неопределено)
	
	// для подтверждения необходимо в каталог формирования файлов сохранить только последнюю подпись
	ПолноеИмяФайла = СохранитьФайлКак(ДанныеФайла, АдресКаталога, ПрисоединенныйФайл, СсылкаНаПакет, ЭтоПроизвольныйДокумент, СоответствиеФайлЭД);
			
	Если ПолноеИмяФайла = "" Тогда
		Возврат; // пользователь нажал Отмена или это веб клиент без расширения
	КонецЕсли;
	
	МассивСтруктурПодписей = ЭлектроннаяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, УникальныйИдентификатор, МассивСтруктурПодписей, АдресКаталога, СоответствиеФайлЭД, , ЭтоПроизвольныйДокумент );
	КонецЕсли;
	
КонецПроцедуры

Функция СохранитьФайлКак(ДанныеФайла, ИмяКаталога, ПрисоединенныйФайл = Неопределено, СсылкаНаПакет = Неопределено, ЭтоПроизвольныйЭД = Неопределено, СоответствиеФайлЭД= Неопределено)
	
	Файл = Новый Файл(ИмяКаталога);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		СоответствиеФайлЭД.Вставить(ДанныеФайла.ИмяФайла,ПрисоединенныйФайл.НомерЭД);
	КонецЕсли;	
	
	ИмяПолучаемогоФайла = СтрЗаменить(ДанныеФайла.ИмяФайла, "..", ".");
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанныеФайла.Записать(ИмяКаталога+ИмяПолучаемогоФайла);
	
	Если ЗначениеЗаполнено(ЭтоПроизвольныйЭД) И ЭтоПроизвольныйЭД Тогда		
		// Положим файл в зип-архив по требованиям пакета эд
		ИмяФайла = ДанныеФайла.Наименование;
		ИмяКонтейнера = ИмяКаталога+ИмяФайла+".zip";
		ИмяАрхива = ИмяФайла+".zip";
		Если ИмяФайла+".zip" = ИмяПолучаемогоФайла Тогда
			ИмяКонтейнера = ИмяКаталога+ИмяФайла+"ЭЦП.zip";
			ИмяАрхива = ИмяФайла+"ЭЦП.zip";
		КонецЕсли;
		
		ЗипКонтейнер = Новый ЗаписьZipФайла(ИмяКонтейнера);	
		
		ЗипКонтейнер.Добавить(ИмяКаталога+ИмяПолучаемогоФайла );
		
		ЗипКонтейнер.Записать();
		Если ИмяФайла+".zip" = ИмяПолучаемогоФайла Тогда
			УдалитьФайлы(ИмяКаталога+ИмяПолучаемогоФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			СоответствиеФайлЭД.Вставить(ИмяАрхива, ПрисоединенныйФайл.НомерЭД);
		КонецЕсли;	
	КонецЕсли;
	
	// и сразу зашифруем его при необходимости(тоже требование транспортного контейнера)
	ПараметрыШифрования = ПолучитьМассивАдресовСертификатовШифрования(ПрисоединенныйФайл);
	Если ПараметрыШифрования <> Неопределено Тогда
		Попытка
			НастройкиКриптографии = ЭлектроннаяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
			ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
			ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
			ТипПровайдераЭЦП = НастройкиКриптографии .ТипПровайдераЭЦП;
			
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			ТекстПредупреждения = НСтр("ru = 'Невозможно зашифровать электронный документ. Ошибка настройки криптографии.'"); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
			УдалитьФайлы(ИмяКаталога, "*");
			Возврат "";
		КонецПопытки;
		
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ПараметрыШифрования[0]);
			ДвоичныеДанныеСертификатаОрганизации = ПолучитьИзВременногоХранилища(ПараметрыШифрования[1]);
			
			Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			СертификатОрганизации = Новый СертификатКриптографии(ДвоичныеДанныеСертификатаОрганизации);
			
			МассивСертификатов = Новый Массив;
			МассивСертификатов.Добавить(Сертификат);
			МассивСертификатов.Добавить(СертификатОрганизации);
				
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяКаталога+ИмяПолучаемогоФайла);
				
			МенеджерКриптографии.Зашифровать(ДвоичныеДанныеФайла,
				ИмяКаталога+ИмяПолучаемогоФайла,  
				МассивСертификатов);

		// установим признак шифрования контейнеру
		ДобавитьПризнакШифрованияПакетуЭД(СсылкаНаПакет, ПрисоединенныйФайл, ПараметрыШифрования);
	КонецЕсли;		
	
	Возврат ИмяКаталога+ИмяПолучаемогоФайла;
	
КонецФункции

Процедура СохранитьПодписи(ФайлСсылка, ПолноеИмяФайла, УникальныйИдентификатор, МассивСтруктурПодписей, АдресКаталога, СоответствиеФайлЭД, БезИсходника = Ложь, ЭтоПроизвольныйЭД = Ложь)
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	МассивИмен = Новый Массив;
	
	ТипПлатформыСервера = ФайловыеФункции.ТипПлатформыСервера();
	
	Если НЕ БезИсходника Тогда	
		МассивИмен.Добавить(ОсновнойФайл.Имя);
	КонецЕсли;
	
	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда   
			Если ЗначениеЗаполнено(ЭтоПроизвольныйЭД) И ЭтоПроизвольныйЭД И Прав(ПолноеИмяФайла, 4) = ".zip" Тогда		
				ИмяФайлаПодписи = Строка(ФайлСсылка)+"ЭЦП" + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";                                                      
			Иначе
				ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";
			КонецЕсли;
		КонецЕсли;
		
		СкорректироватьИмяФайла(ИмяФайлаПодписи);
		
		ПолныйПутьПодписи = Путь;
		ФайловыеФункцииКлиентСервер.ДобавитьСлешЕслиНужно(ПолныйПутьПодписи, ТипПлатформыСервера);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";	
			СкорректироватьИмяФайла(ИмяФайлаПодписи);
			
			ПолныйПутьПодписи = Путь;
			ФайловыеФункцииКлиентСервер.ДобавитьСлешЕслиНужно(ПолныйПутьПодписи, ТипПлатформыСервера);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;	
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		
		СоответствиеФайлЭД.Вставить(Файл.Имя, ФайлСсылка.НомерЭД);
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		ДвоичныеДанныеПодписи.Записать(ПолныйПутьПодписи);
		// Сохраним Файл из БД на диск
		УдалитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответствиеФайловИПодписей(ИменаФайлов)
	
	Результат = Новый Соответствие;
	
	// разделяем файлы по расширению
	ИменаФайловДанных = Новый Массив;
	ИменаФайловПодписей = Новый Массив;
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		Если Прав(ИмяФайла, 3) = "p7s" Тогда
			ИменаФайловПодписей.Добавить(ИмяФайла);
		Иначе
			ИменаФайловДанных.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	// отсортируем имена файлов данных по убыванию числа символов в строке
	
	Для ИндексА = 1 По ИменаФайловДанных.Количество() Цикл
		ИндексМАКС = ИндексА; // считаем что текущий файл имеет самое большое число символов
		Для ИндексБ = ИндексА+1 По ИменаФайловДанных.Количество() Цикл
			Если СтрДлина(ИменаФайловДанных[ИндексМАКС-1]) > СтрДлина(ИменаФайловДанных[ИндексБ-1]) Тогда
				ИндексМАКС = ИндексБ;
			КонецЕсли;
		КонецЦикла;
		своп = ИменаФайловДанных[ИндексА-1];
		ИменаФайловДанных[ИндексА-1] = ИменаФайловДанных[ИндексМАКС-1];
		ИменаФайловДанных[ИндексМАКС-1] = своп;
	КонецЦикла;
	
	// поиск соответствий имен файлов
	Для Каждого ИмяФайлаДанных Из ИменаФайловДанных Цикл
		Результат.Вставить(ИмяФайлаДанных, НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей));
	КонецЦикла;
	
	// оставшиеся файлы подписей не распознаны как подписи относящиеся к какому то файлу
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Результат.Вставить(ИмяФайлаПодписи, Новый Массив);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей)
	
	ИменаПодписей = Новый Массив;
	
	Файл = Новый Файл(ИмяФайлаДанных);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Если Найти(ИмяФайлаПодписи, ИмяБезРасширения) > 0 Тогда
			ИменаПодписей.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаПодписей Цикл
		ИменаФайловПодписей.Удалить(ИменаФайловПодписей.Найти(ИмяФайлаПодписи));
	КонецЦикла;
	
	Возврат ИменаПодписей;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ПО РАБОТЕ С СЕРТИФИКАТАМИ ЭЦП

// Создает новый элемент справочника "СертификатыЭЦП" и заполняет его переданными данными.
// 
// Параметры: 
// СтруктураСертификата - структура данных для заполнения элемента справочника,
// ОписаниеОшибки - строка, описание ошибки при ее возникновении.
//
Функция ЗагрузитьСертификат(СтруктураСертификата, ОписаниеОшибки) Экспорт
	
	НовЭл = Справочники.СертификатыЭЦП.СоздатьЭлемент();
	НовЭл.Отпечаток 	= СтруктураСертификата.Отпечаток;
	НовЭл.Наименование	= СтруктураСертификата.КомуВыдан;
	НовЭл.Организация	= СтруктураСертификата.Организация;
	
	СтрокаОписания = "Кому выдан: "+СтруктураСертификата.КомуВыдан+Символы.ПС;
	СтрокаОписания = СтрокаОписания+"Кем выдан: "+СтруктураСертификата.КемВыдан+Символы.ПС;
	СтрокаОписания = СтрокаОписания+"Действителен: "+СтруктураСертификата.ДействителенДо+Символы.ПС;
	НовоеНазначение = "";
	ЭлектроннаяПодпись.ЗаполнитьНазначениеСертификата(СтруктураСертификата.Назначение, НовоеНазначение, Истина);
	СтрокаОписания = СтрокаОписания+НовоеНазначение;
	НовЭл.Назначение = СтрокаОписания;
	
	Если СтруктураСертификата.Свойство("ДвоичныеДанныеСертификата")	И ЗначениеЗаполнено(СтруктураСертификата.ДвоичныеДанныеСертификата) Тогда
		ДанныеХранилища = Новый ХранилищеЗначения(СтруктураСертификата.ДвоичныеДанныеСертификата, Новый СжатиеДанных(9));
		НовЭл.ФайлСертификата = ДанныеХранилища;
		НовЭл.Записать();
		Возврат НовЭл.Ссылка;
	Иначе
		ОписаниеОшибки = "Ошибка получения данных сертификата подписи!";
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает массив сертификатов, которые указаны в соглашении, а также предназначены для организации из соглашения.
//
// Параметры: 
// ТекущееСоглашение - СправочникСсылка.СоглашениеОбОбменеЭД, соглашение, сертификаты по которому надо получить
//
Функция ПолучитьОтпечаткиОжидаемыхСертификатов(ТекущееСоглашение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СертификатыЭЦП.Отпечаток КАК Отпечаток
	               |ИЗ
	               |	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	               |ГДЕ
	               |	СертификатыЭЦП.Организация = &Организация
	               |	И СертификатыЭЦП.Отозван = ЛОЖЬ
	               |	И СертификатыЭЦП.ПометкаУдаления = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Отпечаток
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейКонтрагента КАК СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента
	               |ГДЕ
	               |	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Ссылка = &СоглашениеОбИспользованииЭД";
	Запрос.УстановитьПараметр("Организация", ТекущееСоглашение.Организация);
	Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", ТекущееСоглашение);
		
	МассивОтпечатков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	
	Возврат МассивОтпечатков;
	
КонецФункции

////////////////////////////////////////////////////////////////
// МЕТОДЫ ПО РАБОТЕ С ВЕРСИЯМИ ЭД

// Получает таблицу значений с данными по электронным документам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	               |	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент, ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) КАК СсылкаНаЭД,
	               |	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	               |	СостоянияЭД.ЭлектронныйДокумент.СтатусЭД КАК СтатусЭД
	               |ИЗ
	               |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	               |ГДЕ
	               |	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";

	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев",	МассивСсылокНаВладельцев);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Получает текстовое представление состояний электронных документов по владельцам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьТекстСостоянияЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаДанных = ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев);
	Соответствие = Новый Соответствие;
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		Соответствие.Вставить(ТекСтрока.ВладелецЭД, Строка(ТекСтрока.СостояниеВерсииЭД));
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Получает текстовое представление версии электронного документа.
//
// Параметры:
// СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//
Функция ПолучитьТекстСостоянияЭД(СсылкаНаВладельца) Экспорт
	
	ТекстСтатуса = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ТекстСтатуса = Строка(СостояниеВерсииЭД(СсылкаНаВладельца));
	КонецЕсли;
	
	Возврат ТекстСтатуса;
	
КонецФункции

// Получает текстовое представление статуса электронного документа.
//
// Параметры: 
// СсылкаНаЭД - Ссылка на справочник "ЭДПрисоединенныеФайлы", электронный документ,
// ВключитьСкобки - Булево, признак, что текстовое представление будет заключено в скобки,
// Направление - Перечисление НаправленияЭД - направление электронного документа,
// ЭлементФормы - ЭлементФормы, в который выводится статус, становится гиперссылкой.
//
Функция ПолучитьТекстСтатусаЭД(СсылкаНаЭД, ВключитьСкобки = Истина, Направление = Неопределено, ЭлементФормы = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Если НЕ ЗначениеЗаполнено(Направление) Тогда
			Возврат "";
		ИначеЕсли Направление = Перечисления.НаправленияЭД.Исходящий Тогда
			Если ЭлементФормы<>Неопределено Тогда
				ЭлементФормы.Гиперссылка = Ложь;
			КонецЕсли;
			Возврат НСтр("ru = 'Документ не оформлен'");
		ИначеЕсли Направление = Перечисления.НаправленияЭД.Входящий Тогда
			Если ЭлементФормы<>Неопределено Тогда
				ЭлементФормы.Гиперссылка = Ложь;
			КонецЕсли;
			Возврат НСтр("ru = 'Документ не получен'");
		КонецЕсли;
	КонецЕсли;
	
	НачСимв = "";
	КонСимв = "";
	Если ВключитьСкобки Тогда
		НачСимв = "(";
		КонСимв = ")";
	КонецЕсли;
	
	Если ЭлементФормы<>Неопределено Тогда
		ЭлементФормы.Гиперссылка = Истина;
	КонецЕсли;
	ТекстСтатусаЭД = НачСимв+СсылкаНаЭД.СтатусЭД+", "+Формат(СсылкаНаЭД.ДатаИзмененияСтатусаЭД, "ДЛФ=")+КонСимв; 
	
	Возврат ТекстСтатусаЭД;
	
КонецФункции

// Возвращает структуру версии электронного документа по владельцу.
//
// Параметры: 
// СсылкаНаВладельца - Ссылка на документ ИБ, структуру версии электронного документа которого необходимо получить.
//
Функция ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВерсииЭД = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.НомерВерсииЭД, 0) КАК НомерВерсииЭД,
	               |	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент, ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) КАК ЭлектронныйДокумент,
	               |	СостоянияЭД.СостояниеВерсииЭД,
	               |	СостоянияЭД.ЭлектронныйДокумент.СтатусЭД КАК СтатусЭД
	               |ИЗ
	               |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	               |ГДЕ
	               |	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ЭДПрисоединенныеФайлы.НомерВерсииЭД) КАК НомерВерсииЭД
	               |ПОМЕСТИТЬ МаксВерсия
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	               |	И (НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЭДПрисоединенныеФайлы.Ссылка,
	               |	ЭДПрисоединенныеФайлы.НомерВерсииЭД,
	               |	ЭДПрисоединенныеФайлы.СтатусЭД
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	               |	И ЭДПрисоединенныеФайлы.НомерВерсииЭД В
	               |			(ВЫБРАТЬ
	               |				МаксВерсия.НомерВерсииЭД
	               |			ИЗ
	               |				МаксВерсия)
	               |	И (НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления)
	               |	И (ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	               |			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден))";

	Запрос.УстановитьПараметр("СсылкаНаОбъект",	СсылкаНаВладельца);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоРегистру = Результат[0].Выбрать();
	Если ВыборкаПоРегистру.Следующий() Тогда
		НомерВерсииЭД 		= ВыборкаПоРегистру.НомерВерсииЭД;
		СостояниеВерсииЭД 	= ВыборкаПоРегистру.СостояниеВерсииЭД;
		СсылкаНаДокумент 	= ВыборкаПоРегистру.ЭлектронныйДокумент;
		СтатусЭД			= ВыборкаПоРегистру.СтатусЭД;
	Иначе
		НомерВерсииЭД 		= 0;
		СостояниеВерсииЭД 	= Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
		СсылкаНаДокумент	= Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		СтатусЭД			= Перечисления.СтатусыЭД.ПустаяСсылка();
    КонецЕсли;
	
	Если НомерВерсииЭД = 0 Тогда
		ВыборкаПоСправочнику = Результат[2].Выбрать();
		Если ВыборкаПоСправочнику.Количество()>0 Тогда
			ВыборкаПоСправочнику.Следующий();
			НомерВерсииЭД 		= ВыборкаПоСправочнику.НомерВерсииЭД;
			СсылкаНаДокумент	= ВыборкаПоСправочнику.Ссылка;
			СтатусЭД 			= ВыборкаПоСправочнику.СтатусЭД;
		КонецЕсли;	
	КонецЕсли;
	СтруктураВерсииЭД.Вставить("НомерВерсииЭД",		НомерВерсииЭД); 
	СтруктураВерсииЭД.Вставить("СсылкаНаДокумент", 	СсылкаНаДокумент);
	СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД",	СостояниеВерсииЭД);
	СтруктураВерсииЭД.Вставить("СтатусЭД",			СтатусЭД);

	Возврат СтруктураВерсииЭД;
	
КонецФункции

// Получает номер текущей версии электронного документа для владельца.
// 
// Параметры: 
// СсылкаНаВладельца - Ссылка на объект ИБ, номер версии электронного документа которого надо получить.
//
Функция НомерВерсииЭДПоВладельцу(СсылкаНаВладельца) Экспорт
	
	СтруктураВерсииЭД = ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	Если ЗначениеЗаполнено(СтруктураВерсииЭД.НомерВерсииЭД) Тогда
		Возврат СтруктураВерсииЭД.НомерВерсииЭД;
	КонецЕсли;

	Возврат ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца) + 1;
	
КонецФункции

Функция ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	ЗапросЭД.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                 |	ЭДПрисоединенныеФайлы.НомерВерсииЭД КАК НомерВерсии
	                 |ИЗ
	                 |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	                 |ГДЕ
	                 |	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	                 |	И ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаВладельца
	                 |
	                 |УПОРЯДОЧИТЬ ПО
	                 |	ЭДПрисоединенныеФайлы.НомерВерсииЭД УБЫВ";
	Результат = ЗапросЭД.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.НомерВерсии;
	КонецЕсли;

	Возврат 0;
		
КонецФункции

Функция СостояниеВерсииЭД(СсылкаНаВладельца) 
	
	СтруктураВерсииЭД = ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	Если СтруктураВерсииЭД.Свойство("СостояниеВерсииЭД") Тогда
		Возврат СтруктураВерсииЭД.СостояниеВерсииЭД;
	КонецЕсли;
	
	Возврат Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
		
КонецФункции

////////////////////////////////////////////////////////////////
// Добавление объектов в присоединенные файлы

Функция СформироватьДопДокумент(СтруктураОбмена, ОписаниеФормата)
	
	ТабличныйДокумент = ЭлектронныеДокументыФорматОбмена.СформироватьПечатнуюФормуЭД(СтруктураОбмена.ПолноеИмяФайла, СтруктураОбмена.НаправлениеЭД);
	СтруктураОбработкиДопФайла = ОпределитьТипСохраненияПоПеречислению(ОписаниеФормата);
	ФайлИсходногоДокумента = Новый Файл(СтруктураОбмена.ПолноеИмяФайла);
	ИмяИсходногоДокумента = ФайлИсходногоДокумента.ИмяБезРасширения;
	ФайлСохранения = ФайлИсходногоДокумента.Путь + ИмяИсходногоДокумента +"."+ СтруктураОбработкиДопФайла.ПредставлениеРасширения;
	
	ТабличныйДокумент.Записать(ФайлСохранения,СтруктураОбработкиДопФайла.ПредставлениеТипаСохранения);
	Возврат ФайлСохранения;
	
КонецФункции

Функция ОпределитьТипСохраненияПоПеречислению(ТипСохранения)
	СтруктураВозврата = Новый Структура("ПредставлениеРасширения, ПредставлениеТипаСохранения");
	Если ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.DOCX Тогда
		СтруктураВозврата.ПредставлениеРасширения = "docx";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.DOCX;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.HTML Тогда
		СтруктураВозврата.ПредставлениеРасширения = "html";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.HTML;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.XLS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "xls";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.XLS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.MXL Тогда
		СтруктураВозврата.ПредставлениеРасширения = "mxl";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.MXL;
	//ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.PDF Тогда
	//	СтруктураВозврата.ПредставлениеРасширения = "pdf";
	//	СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.PDF;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.ODS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "ods";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.ODS;
	КонецЕсли;
	Возврат СтруктураВозврата;	
КонецФункции

Функция СформироватьЗипАрхивФайлов(ИмяОсновногоФайла, МассивФайлов)
	
	Попытка
		//1 сформируем имя зип архива из основного файла.
		Файл = Новый Файл(ИмяОсновногоФайла);
		ФайлЗипАрхива = СтрЗаменить(ИмяОсновногоФайла, Файл.Расширение, ".zip");
		//2 сформируем зип-запись, сложим туда все файлы и вернем адрес
		ЗаписьЗип = Новый ЗаписьZIPФайла(ФайлЗипАрхива);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ЗаписьЗип.Добавить(ИмяФайла);
		КонецЦикла;
		ЗаписьЗип.Записать();
		Возврат ФайлЗипАрхива;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС 
							+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs и наличие доступа к каталогу временных файлов.'");
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись файла архива на диск'"), ТекстОшибки, ТекстСообщения);
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Функция формирует электронные документы и помещает их в справочник присоединенных файлов
//
// Параметры : 
// МассивОбъектов - массив ссылок на объекты, к которым надо создать электронный документ
// СоответствиеПараметров - соответствие, содержащая настройки обмена ЭД для объектов
Функция СформироватьПрисоединенныеФайлы(МассивОбъектов, ПараметрыОбмена, ДопПараметры = "") 
		
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурОбмена = СформироватьХМЛФайлыДокументов(МассивОбъектов, ПараметрыОбмена, ДопПараметры);
	МассивСформированныхФайлов = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
		ПолноеИмяФайла = "";
		ПараметрыОтбора = Новый Структура("Использовать", Истина);
		ИспользуемыеФорматы = СтруктураОбмена.СтруктураЭД.СоглашениеЭД.ФорматыФайловОбмена.НайтиСтроки(ПараметрыОтбора);
		МассивФайловДляОтправки = Новый Массив;
		Для Каждого ИспользуемаяСтрока Из ИспользуемыеФорматы Цикл
			Если ИспользуемаяСтрока.ФорматФайла = Перечисления.ФорматыФайловОбменаЭД.XML Тогда
				ИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
			Иначе
				ИмяФайла = СформироватьДопДокумент(СтруктураОбмена, ИспользуемаяСтрока.ФорматФайла);
			КонецЕсли;
			МассивФайловДляОтправки.Добавить(ИмяФайла);
		КонецЦикла;
		ПолноеИмяФайла = СформироватьЗипАрхивФайлов(СтруктураОбмена.ПолноеИмяФайла, МассивФайловДляОтправки);
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда  // ошибка формирования архива
			Продолжить;
		КонецЕсли;
		
		ВремяСозданияЭД = СтруктураОбмена.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураОбмена.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ВладелецЭД, Файл.ИмяБезРасширения , СтрЗаменить(Файл.Расширение, ".", ""),
															ВремяСозданияЭД, ВремяСозданияЭД, АдресФайла, Неопределено, "ЭДПрисоединенныеФайлы");
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			Продолжить;
		КонецЕсли;
		
		УдалитьФайлы(Файл.Путь);
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбмена.СтруктураЭД);
		УстановитьСсылкуДляВладельцаВРегистреСостояний(ВладелецЭД, ДобавленныйФайл);
		МассивСформированныхФайлов.Добавить(ДобавленныйФайл);
		
	КонецЦикла;
	Возврат МассивСформированныхФайлов;
	
КонецФункции

Процедура УстановитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект, ЭлектронныйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
	КонецЕсли;
	НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Добавляет по ссылке в присоединенный файл дополнительные реквизиты, связанные с механизмом 
// обмена электронными документами.
//
// Параметры:
// ДобавленныйФайл - Ссылка на элемент справочника с электронным документом,
// СтруктураЭД - Структура параметров, которые необходимо заполнить в справочнике.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// обязательные параметры структуры
	ТекстОшибки = "";
	СтруктураОбязательныхПолей = Новый Структура("ВладелецЭД, Контрагент, ВидЭД, НаправлениеЭД");
	Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		Значение = Неопределено;
		Если СтруктураЭД.Свойство(КлючЗначение.Ключ, Значение) Тогда
			Если НЕ ЗначениеЗаполнено(Значение) Тогда 
				Текст = НСтр("ru = 'Значение параметра <%1>  не заполнено!'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
				ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки+Символы.ПС+Текст, Текст);
			КонецЕсли;
		Иначе
			Текст = НСтр("ru = 'Не передан обязательный параметр <%1>!'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки+Символы.ПС+Текст, Текст);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Ошибка заполнения доп.свойств электронного документа!'") + Символы.ПС + ТекстОшибки;
		Сообщение.Сообщить();
	КонецЕсли;
	
	ФайлОбъект = ДобавленныйФайл.ПолучитьОбъект();
	
	СсылкаНаОбъект 				= СтруктураЭД.ВладелецЭД;
	ФайлОбъект.Контрагент  		= СтруктураЭД.Контрагент;
	ФайлОбъект.ВидЭД  			= СтруктураЭД.ВидЭД;
	ФайлОбъект.НаправлениеЭД  	= СтруктураЭД.НаправлениеЭД;
	ФайлОбъект.НомерЭД  		= СтруктураЭД.НомерЭД;
	ФайлОбъект.СоглашениеЭД		= СтруктураЭД.СоглашениеЭД;
	
	Если СтруктураЭД.Свойство("Организация") Тогда 
		ФайлОбъект.Организация = СтруктураЭД.Организация;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Автор") Тогда 
		ФайлОбъект.Автор = СтруктураЭД.Автор;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Ответственный") Тогда 
		ФайлОбъект.Ответственный = СтруктураЭД.Ответственный;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ЭлектронныйДокументВладелец") Тогда 
		ФайлОбъект.ЭлектронныйДокументВладелец = СтруктураЭД.ЭлектронныйДокументВладелец;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.Ответственный) Тогда
		ФайлОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерВерсииЭД") Тогда
		ФайлОбъект.НомерВерсииЭД = СтруктураЭД.НомерВерсииЭД;
	Иначе
		ФайлОбъект.НомерВерсииЭД = НомерВерсииЭДПоВладельцу(СсылкаНаОбъект);
	КонецЕсли;
	ФайлОбъект.ДатаИзмененияСтатусаЭД	= ТекущаяДата();
	
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.ПолучательЭД) И СтруктураЭД.Свойство("Получатель") Тогда
		ФайлОбъект.ПолучательЭД 	= СтруктураЭД.Получатель; 	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.ОтправительЭД) И СтруктураЭД.Свойство("Отправитель") Тогда 
		ФайлОбъект.ОтправительЭД 	= СтруктураЭД.Отправитель;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерДокументаОтправителя") Тогда 
		ФайлОбъект.НомерДокументаОтправителя = СтруктураЭД.НомерДокументаОтправителя;
	КонецЕсли;
	Если СтруктураЭД.Свойство("ДатаДокументаОтправителя") Тогда 
		ФайлОбъект.ДатаДокументаОтправителя = СтруктураЭД.ДатаДокументаОтправителя;
	КонецЕсли;
	
	Если ФайлОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
	 ИЛИ ФайлОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ФайлОбъект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован;   
	Иначе
		ФайлОбъект.СтатусЭД = Перечисления.СтатусыЭД.Получен; 
	КонецЕсли;
	
	ФайлОбъект.ДополнительныеСвойства.Вставить("СоглашениеЭД", СтруктураЭД.СоглашениеЭД);
	
	ФайлОбъект.Записать();
	
	ОбновитьВерсиюЭД(ФайлОбъект.Ссылка);
	
КонецПроцедуры

Функция ПолучитьСтруктуруФайла(Строка) 
	
	ИмяФайла = КорректноеИмяФайла(Строка, Истина);
	Файл = Новый Файл(ИмяФайла);
	Возврат Новый Структура("ИмяБезРасширения, Расширение", Файл.ИмяБезРасширения, СтрЗаменить(Файл.Расширение, ".",""));
	
КонецФункции

Функция СформироватьХМЛФайлыДокументов(МассивОбъектовДляВыгрузки, ПараметрыОбмена, ДопПараметры = "")
	
	МассивСтруктурВозврата = Новый Массив;
	
	СтруктураВидовЭД = Новый Соответствие;
	// сгруппируем объекты в массивы по типам
	Для Каждого ТекЭлемент Из МассивОбъектовДляВыгрузки Цикл
		ВидЭД = ЭлектронныеДокументыПереопределяемый.ОпределитьПараметрыЭДПоИсточнику(ТекЭлемент).ВидЭД;
		МассивОбъектовПоВидуЭД = СтруктураВидовЭД.Получить(ВидЭД);
		Если МассивОбъектовПоВидуЭД = Неопределено Тогда
			МассивОбъектовПоВидуЭД = Новый Массив;
		КонецЕсли;
		МассивОбъектовПоВидуЭД.Добавить(ТекЭлемент);
		СтруктураВидовЭД.Вставить(ВидЭД, МассивОбъектовПоВидуЭД);
	КонецЦикла;
	
	// сформируем файлы по видам ЭД
	Для Каждого ТекЭлемент Из СтруктураВидовЭД Цикл
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.Накладная Тогда
			СформироватьХМЛФайлНакладной(ТекЭлемент.Значение, МассивСтруктурВозврата, ПараметрыОбмена);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетНаОплату Тогда
			СформироватьХМЛФайлСчетаНаОплату(ТекЭлемент.Значение, МассивСтруктурВозврата, ПараметрыОбмена);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ЗаказТовара Тогда
			СформироватьХМЛФайлЗаказаПоставщику(ТекЭлемент.Значение, МассивСтруктурВозврата, ПараметрыОбмена);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			СформироватьХМЛФайлЗаказаКлиента(ТекЭлемент.Значение, МассивСтруктурВозврата, ПараметрыОбмена);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПрайсЛист Тогда
			СформироватьХМЛФайлПрайсЛиста(ТекЭлемент.Значение, МассивСтруктурВозврата, ПараметрыОбмена);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров Тогда
			СформироватьХМЛФайлКаталогаТоваров(ТекЭлемент.Значение, МассивСтруктурВозврата, ДопПараметры);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			СформироватьХМЛФайлАктаВыполненныхРабот(ТекЭлемент.Значение, МассивСтруктурВозврата, ПараметрыОбмена);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			СформироватьХМЛФайлОтчетаОПродажахКомиссионногоТовара(ТекЭлемент.Значение, МассивСтруктурВозврата, ПараметрыОбмена);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			СформироватьХМЛФайлОтчетаОСписанииКомиссионногоТовара(ТекЭлемент.Значение, МассивСтруктурВозврата, ПараметрыОбмена);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			СформироватьХМЛФайлПередачиТоваровМеждуОрганизациями(ТекЭлемент.Значение, МассивСтруктурВозврата, ПараметрыОбмена);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			СформироватьХМЛФайлВозвратаТоваровМеждуОрганизациями(ТекЭлемент.Значение, МассивСтруктурВозврата, ПараметрыОбмена);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСтруктурВозврата;
	
КонецФункции

// Вспомогательная процедура выгрузки накладной
Процедура СформироватьХМЛФайлНакладной(МассивОбъектовДляВыгрузки, МассивСтруктурВозврата, ПараметрыОбмена)
	
	ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивОбъектовДляВыгрузки);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда 
			Продолжить
		КонецЕсли;	
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
        СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьНакладнуюПоДокументу(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда 
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная процедура выгрузки счета
Процедура СформироватьХМЛФайлСчетаНаОплату(МассивОбъектовДляВыгрузки, МассивСтруктурВозврата, ПараметрыОбмена)
	
	ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивОбъектовДляВыгрузки);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда 
			Продолжить
		КонецЕсли;	
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьСчетНаОплатуПоДокументу(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда 
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная процедура выгрузки заказа поставщику
Процедура СформироватьХМЛФайлЗаказаПоставщику(МассивОбъектовДляВыгрузки, МассивСтруктурВозврата, ПараметрыОбмена)
	
	ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивОбъектовДляВыгрузки);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда 
			Продолжить
		КонецЕсли;	
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьЗаказПоставщикуПоДокументу(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда 
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная процедура выгрузки заказа клиента
Процедура СформироватьХМЛФайлЗаказаКлиента(МассивОбъектовДляВыгрузки, МассивСтруктурВозврата, ПараметрыОбмена)
	
	ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивОбъектовДляВыгрузки);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда 
			Продолжить
		КонецЕсли;	
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьЗаказКлиентаПоДокументу(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда 
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная процедура выгрузки прайс-листа
Процедура СформироватьХМЛФайлПрайсЛиста(МассивОбъектовДляВыгрузки, МассивСтруктурВозврата, ПараметрыОбмена)
	
	ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивОбъектовДляВыгрузки);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда 
			Продолжить
		КонецЕсли;	
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьПрайсПоДокументу(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда 
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная процедура выгрузки каталога товаров
Процедура СформироватьХМЛФайлКаталогаТоваров(МассивОбъектовДляВыгрузки, МассивСтруктурВозврата, ТоварыКаталога)
	
	СписокТоваровКаталога = ПолучитьИзВременногоХранилища(ТоварыКаталога);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		НастройкиОбменаЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДляВыгрузки);
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда 
			Продолжить
		КонецЕсли;	
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьКаталогНоменклатуры(ОбъектДляВыгрузки, СписокТоваровКаталога, НастройкиОбменаЭД);
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда 
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная процедура выгрузки акта выполненных работ
Процедура СформироватьХМЛФайлАктаВыполненныхРабот(МассивОбъектовДляВыгрузки, МассивСтруктурВозврата, ПараметрыОбмена)
	
	ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивОбъектовДляВыгрузки);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда 
			Продолжить
		КонецЕсли;	
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьАктВыполненныхРаботПоДокументу(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда 
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Вспомогательная процедура выгрузки отчета о продажах комиссионного товара
Процедура СформироватьХМЛФайлОтчетаОПродажахКомиссионногоТовара(МассивОбъектовДляВыгрузки, МассивСтруктурВозврата, ПараметрыОбмена)
	
	ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивОбъектовДляВыгрузки);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда 
			Продолжить
		КонецЕсли;	
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда 
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная процедура выгрузки отчета о списании комиссионного товара
Процедура СформироватьХМЛФайлОтчетаОСписанииКомиссионногоТовара(МассивОбъектовДляВыгрузки, МассивСтруктурВозврата, ПараметрыОбмена)
	
	ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивОбъектовДляВыгрузки);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда 
			Продолжить
		КонецЕсли;	
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда 
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная процедура выгрузки передачи товаров между организациями
Процедура СформироватьХМЛФайлПередачиТоваровМеждуОрганизациями(МассивОбъектовДляВыгрузки, МассивСтруктурВозврата, ПараметрыОбмена)
	
	ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивОбъектовДляВыгрузки);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда 
			Продолжить
		КонецЕсли;	
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьПередачуТоваровМеждуОрганизациями(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда 
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная процедура выгрузки возврата товаров между организациями
Процедура СформироватьХМЛФайлВозвратаТоваровМеждуОрганизациями(МассивОбъектовДляВыгрузки, МассивСтруктурВозврата, ПараметрыОбмена)
	
	ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивОбъектовДляВыгрузки);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда 
			Продолжить
		КонецЕсли;	
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьВозвратТоваровМеждуОрганизациями(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда 
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////
// Подписание ЭД на сервере

// Выполняет добавление ЭЦП в электронный документ.
//
// Параметры: 
// ПрисоединенныйФайл - Ссылка на элемент справочника, содержащего в себе электронный документ,
// ДанныеПодписи - Структура параметров ЭЦП.
//
Процедура ДобавитьПодпись(ПрисоединенныйФайл, ДанныеПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрисоединенныеФайлы.ЗанестиИнформациюОднойПодписи(ПрисоединенныйФайл, ДанныеПодписи);	
	ОпределитьСтатусыПодписей(ПрисоединенныйФайл);
	Если ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОбъект.СтатусЭД = Перечисления.СтатусыЭД.Подписан;
		ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДата();
		ФайлОбъект.Записать();
		ОбновитьВерсиюЭД(ФайлОбъект.Ссылка);
		ЭлектронныеДокументыПереопределяемый.НазначенСтатусПодписан(ФайлОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает отпечаток сертификата криптографии по ссылке.
// 
// Параметры:
// СертификатПодписи - Ссылка на элемент справочника, содержащего в себе сертификат криптографии.
//
Функция ПолучитьОтпечатокСертификата(СертификатПодписи) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат СертификатПодписи.Ссылка.Отпечаток;
	
КонецФункции

///////////////////////////////////////////////////////////////////
// Отправка сообщений с ЭЦП

// Отправляет письмо с вложениями по пакету ЭД.
//
// Параметры:
// Конверт - Ссылка на документ "ПакетЭД" - подготовленный к отправке пакет электронных документов,
// СоответствиеВложений - Соответствие, список вложенных файлов в пакет электронных документов.
//
Функция ПередатьПисьмоСВложениями(ПакетЭД, СоответствиеВложений)
	
	Получатель = ПакетЭД.Получатель;
	Отправитель = ПакетЭД.Отправитель;
	
	ПараметрыОтправки = Новый Структура("Кому, Тема, Тело, Вложения, Пароль", 
			ПакетЭД.АдресРесурсаКонтрагента,
			СформироватьТемуПисьма(Отправитель, Получатель),
			,
			СоответствиеВложений,
			ПакетЭД.АдресРесурсаОрганизации.Пароль);
	
	РаботаСПочтовымиСообщениями.ОтправитьСообщение(ПакетЭД.АдресРесурсаОрганизации, ПараметрыОтправки);
	
	Возврат 1;
	
КонецФункции

Функция СоздатьТекстОписиЭД(ЦентрОбменаЭД, УчастникОбменаЭД, Конверт, СоответствиеВложений, СоответствиеФайлЭД, ЭтоПроизвольныйДокумент)
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");
	//	имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(ТекущаяДата()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// идентификатор документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Идентификатор");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.УникальныйИдентификатор()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
	// Дата получения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Отправитель");
	ЗаписьХМЛ.ЗаписатьТекст(ЦентрОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Получатель");
	ЗаписьХМЛ.ЗаписатьТекст(УчастникОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Текст произвольного документа
	Если ЭтоПроизвольныйДокумент Тогда 
		Текст = Конверт.ЭлектронныеДокументы[0].ЭлектронныйДокумент.ВладелецФайла.Текст;
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Текст");
		ЗаписьХМЛ.ЗаписатьТекст(Текст);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	
	// Шифрование по документам
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НастройкиШифрования");
	Для Каждого ВложениеДокумент Из Конверт.ЭлектронныеДокументы Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументШифрования");
	    ЗаписьХМЛ.ЗаписатьТекст(Строка(ВложениеДокумент.ЭлектронныйДокумент));
				
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Зашифрован");
		ЗаписьХМЛ.ЗаписатьТекст(Строка(ВложениеДокумент.ДанныеЗашифрованы));
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
				    		
		Если ВложениеДокумент.ДанныеЗашифрованы Тогда
        	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СертификатШифрования");
			ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.СертификатШифрования));
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументыИПодписи");
	
	Для Каждого Вложение Из СоответствиеВложений Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Документ");
		ЗаписьХМЛ.ЗаписатьТекст(Вложение.Ключ);
		                       
		НомерЭД = СоответствиеФайлЭД.Получить(Вложение.Ключ);
		Если Не НомерЭД=Неопределено Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НомерЭД");
			ЗаписьХМЛ.ЗаписатьТекст(НомерЭД);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
        КонецЕсли;	
		
		Для Каждого Подпись Из Вложение.Значение Цикл
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подпись");
			ЗаписьХМЛ.ЗаписатьТекст(Подпись);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	// конец корневого элемента
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	Возврат ИмяФайла;
	
КонецФункции

///////////////////////////////////////////////////////////////////
//Получение почты                                 	

Процедура ОтправитьПодтверждениеПоПакету(ПакетЭД, РесурсОтправителя, АдресОтправителя, ТипОтправки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла",ПакетЭД));
	Если ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) И ВыборкаПрисоединенныхФайлов.Следующий() Тогда
		Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			Если ПакетЭД.Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСОС Тогда
				
			Иначе
				ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
				ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
				СоответствиеВложений = Новый Соответствие;
				СоответствиеВложений.Вставить(ФайлХМЛ.Имя, Новый ДвоичныеДанные(ФайлХМЛ.ПолноеИмя));
				
				// 2.2 Теперь все параметры положим в структуру письма
				ПараметрыОтправки = Новый Структура("Кому, Тема, Тело, Вложения, Пароль", 
													АдресОтправителя,
													"Подтверждение получения пакета электронных документов: "+ИмяПакетаЭД,
													,
													СоответствиеВложений,
													РесурсОтправителя.Пароль);
				//2.3 Отправим письмо
				РаботаСПочтовымиСообщениями.ОтправитьСообщение(РесурсОтправителя, ПараметрыОтправки);
				//2.4 удалим лишние файлы.
				УдалитьФайлы(ФайлХМЛ);
			КонецЕсли;
		Иначе
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			АдресКаталога = АдресОтправителя+?(Прав(АдресОтправителя,1)<>"\","\","");
			КопироватьФайл(ФайлХМЛ.ПолноеИмя, АдресКаталога+ФайлХМЛ.Имя);
			УдалитьФайлы(ФайлХМЛ);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД)
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	// корневой элемент
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подтверждение");
	//	имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ЭлектронныйДокумент");
	ЗаписьХМЛ.ЗаписатьТекст(ИмяПакетаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Дата получения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаПолучения");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(ТекущаяДата()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// конец корневого элемента
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	Возврат Новый Файл(ИмяФайла);
	
КонецФункции 

Функция НеобходимоПолучить(Сообщение, СтруктураПараметров)
	
	// не принимаем сообщение, если нет вложений
	Если Сообщение.Вложения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сообщение.Вложения.Количество() = 1 Тогда 
		// принимаем все подтверждения получения пакета
		Если Найти(Сообщение.Тема, "Подтверждение") Тогда
			Возврат Истина;
		КонецЕсли;
		// Для сообщений с данными:
		Если Найти(Сообщение.Тема, "Обмен эл.документами:") Тогда
			
			Для Каждого Вложение ИЗ Сообщение.Вложения Цикл
				ДвоичныеДанныеВложения = Вложение.Значение;
			КонецЦикла;
			
			Результат = НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеВложения, Вложение.Ключ, СтруктураПараметров);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанные, ИмяФайла, СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определим из файла вложений идентификаторы отправителя и получателя
	// Сохраним файл на диск
	
	ИмяВременногоФайлаЗИП = ПолучитьИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяВременногоФайлаЗИП);
	
	// Откроем его и найдем файл с тех. информацией
	ЗИПЧтение = Новый ЧтениеZipФайла(ИмяВременногоФайлаЗИП);
	КлючУникальности = Новый УникальныйИдентификатор();
	ПапкаДляРаспаковки = КаталогВременныхФайлов() + "ВходящийПакет\" + КлючУникальности + "\";
	ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
	
	РаспакованныеФайлы = НайтиФайлы(ПапкаДляРаспаковки, "*");
	
	ФайлИнформации = Неопределено;
	Для Каждого ТекФайл Из РаспакованныеФайлы Цикл
		Если Найти(ТекФайл.Имя, "packageDescription") > 0  Тогда
			ФайлИнформации = ТекФайл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НастройкиСоглашения = Неопределено;
	Если НЕ ФайлИнформации = Неопределено Тогда // нашли файл описания
		// Определим в этом файле строку с отправителем и получателем и признак шифрования и попытаемся найти соглашение
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
		Зашифрован = Ложь;
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Отправитель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДОтправителя = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
				ЧтениеХМЛ.Прочитать();
				Зашифрован = Зашифрован ИЛИ (ЧтениеХМЛ.Значение = "Да");
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Получатель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДПолучателя = ЧтениеХМЛ.Значение;
			КонецЕсли;
									
		КонецЦикла;
		ЧтениеХМЛ.Закрыть();	
		НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
	КонецЕсли;
	
	Если ФайлИнформации = Неопределено ИЛИ НастройкиСоглашения = Неопределено Тогда // не нашли файл описанием или нет обмена
		УдалитьФайлы(ИмяВременногоФайлаЗИП);
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
	КонецЕсли;
	
	// теперь проверим, что такого транспортного пакета от этого отправителя еще не было
	ИмяПакета = Лев(ИмяФайла, СтрДлина(ИмяФайла)-4);
	
	ЗапросПрисоединенногоФайла = Новый Запрос;
	ЗапросПрисоединенногоФайла.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                                   |	ИСТИНА КАК ЕстьПрисоединенныйФайл
	                                   |ИЗ
	                                   |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	                                   |ГДЕ
	                                   |	ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД
	                                   |	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Направление = &Направление
	                                   |	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Получатель ПОДОБНО &Получатель
	                                   |	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Отправитель ПОДОБНО &Отправитель
	                                   |	И ЭДПрисоединенныеФайлы.Наименование ПОДОБНО &Наименование
	                                   |	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Направление", 	Перечисления.НаправленияЭД.Входящий);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Получатель",		ИДПолучателя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Отправитель", 	ИДОтправителя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Наименование", 	ИмяПакета);
	
	РезультатПустой = ЗапросПрисоединенногоФайла.Выполнить().Пустой();
	УдалитьФайлы(ИмяВременногоФайлаЗИП);
	УдалитьФайлы(ПапкаДляРаспаковки);
	
	Если РезультатПустой Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Получатель", 			ИДПолучателя);
		СтруктураПараметров.Вставить("Отправитель", 		ИДОтправителя);
		СтруктураПараметров.Вставить("Организация", 		НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент", 			НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("Соглашение", 			НастройкиСоглашения.Основание);
		СтруктураПараметров.Вставить("АдресОтправителя",	НастройкиСоглашения.АдресОтправителя);
		СтруктураПараметров.Вставить("АдресПолучателя",		НастройкиСоглашения.АдресПолучателя);
		СтруктураПараметров.Вставить("Зашифрован", 			Зашифрован);
		Возврат Истина;
	КонецЕсли;	
	
	// уже есть такой пакет
	 Возврат Ложь;
		
КонецФункции

Функция СформироватьНовыйПакетЭД(СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД 						= Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата 					= ТекущаяДата();
		ПакетЭД.СтатусПакета	 		= СтруктураПараметров.СтатусПакета;
		ПакетЭД.Направление 			= СтруктураПараметров.НаправленияЭД; 
		ПакетЭД.Контрагент	 			= СтруктураПараметров.Контрагент;
		ПакетЭД.Организация	 			= СтруктураПараметров.Организация;
		ПакетЭД.Отправитель 			= СтруктураПараметров.Отправитель;
		ПакетЭД.Получатель 				= СтруктураПараметров.Получатель;
		ПакетЭД.Соглашение 				= СтруктураПараметров.Соглашение;
		ПакетЭД.СпособОбменаЭД			= СтруктураПараметров.СпособОбменаЭД;
		ПакетЭД.АдресРесурсаКонтрагента = СтруктураПараметров.АдресОтправителя;
		ПакетЭД.АдресРесурсаОрганизации = СтруктураПараметров.АдресПолучателя;
		ПакетЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'создание нового ПакетаЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат ПакетЭД;
	
КонецФункции

// Выполняет получение новых электронных документов на основе заведенных соглашений об обмене.
//
Функция ПолучитьНовыеЭД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура("ПараметрыРаспаковки, МассивВозврата, ВызватьОповещение", Новый Массив, Неопределено, Ложь);
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СоглашениеОбИспользованииЭД.АдресРесурсаОрганизации,
	               |	СоглашениеОбИспользованииЭД.СпособОбменаЭД
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеОбИспользованииЭД
	               |ГДЕ
	               |	СоглашениеОбИспользованииЭД.ПометкаУдаления = ЛОЖЬ
	               |	И СоглашениеОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	               |	И СоглашениеОбИспользованииЭД.ЭтоТиповое = ЛОЖЬ";
				   
	РесурсыДляПроверки = Запрос.Выполнить().Выгрузить(); 
	
	// электронная почта
	ОтборЭП = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	МассивРесурсовЭП = РесурсыДляПроверки.НайтиСтроки(ОтборЭП);
	
	ОтборСпецОператоров = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезСОС);
	МассивРесурсовСпецОператоров = РесурсыДляПроверки.НайтиСтроки(ОтборСпецОператоров);
	
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивРесурсовЭП, МассивРесурсовСпецОператоров);
	
	Для Каждого СтрокаРесурсовЭП Из МассивРесурсовЭП Цикл
		Если ПустаяСтрока(СтрокаРесурсовЭП.АдресРесурсаОрганизации) Тогда
			Продолжить;
		КонецЕсли;
		УчетнаяЗаписьЭП = СтрокаРесурсовЭП.АдресРесурсаОрганизации;
		//получим все сообщения с узла
		НаборСообщений = ЭлектроннаяПочта.ЗагрузитьПочтовыеСообщения(УчетнаяЗаписьЭП);
		
		Для Каждого Сообщение Из НаборСообщений Цикл
			СтруктураПараметров = Новый Структура;
			Если НЕ НеобходимоПолучить(Сообщение, СтруктураПараметров) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(Сообщение.Тема, "Подтверждение получения пакета электронных документов") Тогда
				ОбработатьПодтверждениеПолучения(Сообщение);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			ИначеЕсли СтрокаРесурсовЭП.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСОС И  Найти(Сообщение.Тема, "Подтверждение оператора") Тогда
				ОбработатьПодтверждениеОператора(Сообщение);
				Продолжить;		
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",	Перечисления.НаправленияЭД.Входящий);
			СтруктураПараметров.Вставить("СпособОбменаЭД",	Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			Для Каждого ЭлементВложенийПисьма Из Сообщение.Вложения Цикл
				ДвоичныеДанныеЭлемента = ЭлементВложенийПисьма.Значение;
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
				ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка, 
																	Лев(ЭлементВложенийПисьма.Ключ, СтрДлина(ЭлементВложенийПисьма.Ключ) -4),
																	Прав(ЭлементВложенийПисьма.Ключ, 3),
																	ТекущаяДата(),
																	ТекущаяДата(),
																	АдресВХранилище, 
																	, 
																	"ЭДПрисоединенныеФайлы");
				
				МассивВозврата.Добавить(ПрисоединенныйФайл);
			КонецЦикла;		
			ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, УчетнаяЗаписьЭП, Сообщение.Отправитель, Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);		
			СтруктураРаспаковки = Новый Структура("Распаковывать, ПакетЭД", НЕ СтруктураПараметров.Зашифрован, ПакетЭД.Ссылка);
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки); 
		КонецЦикла;
	КонецЦикла;
	
	// каталог
	ОтборКаталог = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	МассивРесурсовКаталоги = РесурсыДляПроверки.НайтиСтроки(ОтборКаталог);
	Для Каждого СтрокаРесурсовКаталог Из МассивРесурсовКаталоги Цикл
		КаталогСФайлами = СтрокаРесурсовКаталог.АдресРесурсаОрганизации;
		МассивИменФайлов = Новый Массив;
		МассивФайлов = НайтиФайлы(КаталогСФайлами, "*");
		Для Каждого ЭлементФайл Из МассивФайлов Цикл
			Если ЭлементФайл.ЭтоКаталог() Тогда // вложенные каталоги пропускаем
				Продолжить;
			КонецЕсли;
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			СтруктураПараметров = Новый Структура;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда // пришла квитанция
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда // читаем только зип
				Продолжить;
			КонецЕсли;
			
			Если НЕ НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				УдалитьФайлы(ЭлементФайл.ПолноеИмя);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",	Перечисления.НаправленияЭД.Входящий);
			СтруктураПараметров.Вставить("СпособОбменаЭД",	Перечисления.СпособыОбменаЭД.ЧерезКаталог);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка, 
																Лев(ЭлементФайл.Имя, СтрДлина(ЭлементФайл.Имя) -4),
																Прав(ЭлементФайл.Имя, 3),
																ТекущаяДата(),
																ТекущаяДата(),
																АдресВХранилище, 
																, 
																"ЭДПрисоединенныеФайлы");
			
			МассивВозврата.Добавить(ПрисоединенныйФайл);
			ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, СтрокаРесурсовКаталог, СтруктураПараметров.АдресОтправителя, Перечисления.СпособыОбменаЭД.ЧерезКаталог);		
			УдалитьФайлы(ЭлементФайл.ПолноеИмя);
			СтруктураРаспаковки = Новый Структура("Распаковывать, ПакетЭД", Не СтруктураПараметров.Зашифрован, ПакетЭД.Ссылка);
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки); 
		КонецЦикла;
	КонецЦикла;
	СтруктураВозврата.МассивВозврата = МассивВозврата;
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОпределитьПодтверждаемыйПакетЭД(ПредставлениеПакета)
	
	СтрокаИдентификатора = СтрЗаменить(ПредставлениеПакета, "EDI_", "");
	Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора);
	ДокументПакет = Документы.ПакетЭД.ПолучитьСсылку(Идентификатор);
	Если НЕ ОбщегоНазначения.СсылкаСуществует(ДокументПакет) Тогда // битая ссылка
		ДокументПакет = Неопределено;
	КонецЕсли;
	Возврат ДокументПакет;
	
КонецФункции

Процедура ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД, НовыйСтатусПакетаЭД, ДатаИзменения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПакетЭД) Тогда 
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		Для Каждого Документ Из ПакетЭД.ЭлектронныеДокументы Цикл
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда 
				ЗаписатьДатуПолучения(Документ.ЭлектронныйДокумент, ДатаИзменения);
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ЗаписатьДатуОтправки(Документ.ЭлектронныйДокумент, ДатаИзменения);
			КонецЕсли;
			ОбновитьВерсиюЭД(Документ.ЭлектронныйДокумент);
		КонецЦикла;
		Если ТипЗнч(Документ.ОбъектВладелец)=Тип("ДокументСсылка.ПроизвольныйЭД") 
			И (НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен ИЛИ НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен) Тогда
				Объект = Документ.ОбъектВладелец.ПолучитьОбъект();
				Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
					Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
						Объект.СтатусДокумента = Перечисления.СтатусыЭД.Отправлен;
					ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
						Объект.СтатусДокумента = Перечисления.СтатусыЭД.ОтправленоПодтверждение;
					КонецЕсли;
				ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
					Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
						Объект.СтатусДокумента = Перечисления.СтатусыЭД.Доставлен;
					ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
						Объект.СтатусДокумента = Перечисления.СтатусыЭД.ДоставленоПодтверждение;
					КонецЕсли;
				КонецЕсли;
				Объект.Записать();
		КонецЕсли;
        ПакетОбъект = ПакетЭД.ПолучитьОбъект();
		ПакетОбъект.СтатусПакета = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'смена статуса пакета ЭД и обновление статусов ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьПодтверждениеПолучения(Сообщение, ЭтоФайл = Ложь)
	
	Если ЭтоФайл Тогда // пришла квитанция по каталогу
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(Сообщение.ПолноеИмя);
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
			КонецЕсли;
			Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
			КонецЕсли;
		КонецЦикла;
		ЧтениеХМЛ.Закрыть();
		Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен 
			И ДатаПолучения <> Дата('00010101') Тогда
			ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
		КонецЕсли;
		УдалитьФайлы(Сообщение.ПолноеИмя);
	Иначе
		// если пришло извещение о получении пакета
		Если Найти(Сообщение.Тема, "Подтверждение получения пакета электронных документов") > 0 Тогда
			Для Каждого Вложение Из Сообщение.Вложения Цикл
				ДвоичныеДанныеПодтверждения = Вложение.Значение;
				ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				ДвоичныеДанныеПодтверждения.Записать(ИмяФайла);
				// теперь по данному xml файлу определим документ пакета
				ЧтениеХМЛ = Новый ЧтениеXML;
				ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
				Пока ЧтениеХМЛ.Прочитать() Цикл
					Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
					КонецЕсли;
					Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен 
					И ДатаПолучения <> Дата('00010101') Тогда
					ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьДатуПолучения(ДокументСсылка, ДатаИзменения)
	
	Попытка
		ОбъектЭД = ДокументСсылка.ПолучитьОбъект();
		Если ОбъектЭД = Неопределено 
			ИЛИ (ОбъектЭД.СтатусЭД <> Перечисления.СтатусыЭД.ОтправленоПодтверждение
			И ОбъектЭД.СтатусЭД <> Перечисления.СтатусыЭД.Отправлен) Тогда 
			Возврат;
		КонецЕсли;
		Если ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
			ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.ДоставленоПодтверждение;
		ИначеЕсли ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен;
		КонецЕсли;
		ОбъектЭД.ДатаИзмененияСтатусаЭД = ДатаИзменения;
		ОбъектЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись даты получения ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьДатуОтправки(ДокументСсылка, ДатаИзменения)
	
	Попытка
		ОбъектЭД = ДокументСсылка.ПолучитьОбъект();
		Если ОбъектЭД = Неопределено 
			ИЛИ (ОбъектЭД.СтатусЭД <> Перечисления.СтатусыЭД.ПодготовленоПодтверждение
			И ОбъектЭД.СтатусЭД <> Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда 
			Возврат;
		КонецЕсли;
		Если ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение;
		ИначеЕсли ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
			ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен;
		КонецЕсли;
		ОбъектЭД.ДатаИзмененияСтатусаЭД = ДатаИзменения;
		ОбъектЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись даты отправки ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Функция ОпределитьДокументПоНомеруЭД(НомерЭД, Направление)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерЭД", НомерЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", Направление);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЭДПрисоединенныеФайлы.Ссылка
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.НомерЭД ПОДОБНО &НомерЭД
	               |	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
	               |	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	Результат = Запрос.Выполнить().Выбрать();				   
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ОбработатьПодтверждениеОператора(Сообщение)
	
	Для Каждого ПрисланноеПодтверждение Из Сообщение.Вложения Цикл
		ДвоичныеДанныеПодтверждения = ПрисланноеПодтверждение.Значение;
		ФайлПодтверждения = СохранитьДвоичныеДанныеНаЛокальныйДиск(ДвоичныеДанныеПодтверждения);
		ОбработатьФайлПодтвержденияОператора(ФайлПодтверждения);
	КонецЦикла;
	
КонецФункции

Функция СохранитьДвоичныеДанныеНаЛокальныйДиск(ДвоичныеДанные)
	
	// добавить механизм по проверке подписей оператора. 
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ИмяФайла);
	Возврат ИмяФайла;
	
КонецФункции

Процедура ОбработатьФайлПодтвержденияОператора(ИмяФайла)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
	
	ИдентификаторЭлектронногоДокумента = "";
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			ЧтениеХМЛ.Прочитать();
			ИдентификаторЭлектронногоДокумента = ЧтениеХМЛ.Значение;
		КонецЕсли;			
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ИДПодтверждения" Тогда
			ЧтениеХМЛ.Прочитать();
			ИдентификаторПодтверждения = ЧтениеХМЛ.Значение;
		КонецЕсли;
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Направление" Тогда
			ЧтениеХМЛ.Прочитать();
			НаправлениеДокумента = Перечисления.НаправленияЭД[ЧтениеХМЛ.Значение];
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеХМЛ.Закрыть();
	
	Если Не ПустаяСтрока(ИдентификаторЭлектронногоДокумента) Тогда
		СтруктураВладельцев = ДобавитьПодтверждениеКЭлектроннымДокументамРодителя(ИмяФайла, ИдентификаторЭлектронногоДокумента, НаправлениеДокумента);
		СформироватьИзвещениеПоПодтверждению(ИдентификаторПодтверждения, СтруктураВладельцев);
	КонецЕсли;
	
КонецПроцедуры

Функция УжеЕстьДанноеПодтверждение(ЭлектронныйДокумент, ИмяФайлаПодтверждения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПодтверждений = Новый Запрос;
	ЗапросПодтверждений.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭлектронныйДокумент);
	ФайлПодтверждения = Новый Файл(ИмяФайлаПодтверждения);
	ЗапросПодтверждений.УстановитьПараметр("Наименование", "%"+ФайлПодтверждения.ИмяБезРасширения+"%");
	ЗапросПодтверждений.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                            |	ИСТИНА КАК ЕстьПодтверждение
	                            |ИЗ
	                            |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	                            |ГДЕ
	                            |	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	                            |	И ЭДПрисоединенныеФайлы.Наименование ПОДОБНО &Наименование
	                            |	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	Возврат ЗапросПодтверждений.Выполнить().Пустой();
	
КонецФункции
	
Функция ДобавитьПодтверждениеКЭлектроннымДокументамРодителя(ИмяФайлаПодтверждения, НомерЭД, НаправлениеДокумента, ЭтоИзвещение = Ложь)
                   
	УстановитьПривилегированныйРежим(Истина);
	
	НомерЭДПоиска = Сред(Лев(НомерЭД, Найти(НомерЭД, "##")-1), Найти(НомерЭД, "#") + 1);
	ПараметрыПоиска = Новый Структура("ВидЭД, НаправлениеЭД, НомерЭД", Перечисления.ВидыЭД.Накладная, НаправлениеДокумента, НомерЭД);
	Владелец = ОпределитьОбъектПривязки(ПараметрыПоиска);
	Если Владелец = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаЭД = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ПометкаУдаления,НомерЭД,ВладелецФайла",Ложь,НомерЭД,Владелец));
	
	Если НЕ ЗначениеЗаполнено(ВыборкаЭД) ИЛИ НЕ ВыборкаЭД.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	ЭлектронныйДокументВладелец = ВыборкаЭД.Ссылка;
	Если УжеЕстьДанноеПодтверждение(ЭлектронныйДокументВладелец, ?(ЭтоИзвещение, "ИзвещениеОтКонтрагента", "ПодтверждениеОператора")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлектронныйДокументВладелецОбъект = ЭлектронныйДокументВладелец.ПолучитьОбъект();
	ЭлектронныйДокументВладелецОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДата();
	ЭлектронныйДокументВладелецОбъект.СтатусЭД = ?(ЭтоИзвещение, Перечисления.СтатусыЭД.ПолученоИзвещение, Перечисления.СтатусыЭД.ПолученоПодтверждение);
	ЭлектронныйДокументВладелецОбъект.Записать();
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаПодтверждения));
	
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(Владелец, 
		?(ЭтоИзвещение, "ИзвещениеОтКонтрагента", "ПодтверждениеОператора"),
		"xml",
		ТекущаяДата(), ТекущаяДата(), 
		АдресВоВременномХранилище, 
		Неопределено, 
		"ЭДПрисоединенныеФайлы");            
		
	СтруктураПодтверждения = Новый Структура("ВидЭД, Контрагент, ВладелецЭД, НаправлениеЭД, СтатусЭД, НомерЭД, ЭлектронныйДокументВладелец", ?(ЭтоИзвещение, Перечисления.ВидыЭД.Извещение, Перечисления.ВидыЭД.Подтверждение), Владелец.Контрагент, 
		Владелец, Перечисления.НаправленияЭД.Входящий, Перечисления.СтатусыЭД.Получен, ДобавленныйФайл.УникальныйИдентификатор(), ЭлектронныйДокументВладелец);
		
	ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПодтверждения);
		
	Возврат Новый Структура("Владелец, ЭлектронныйДокументВладелец", Владелец, ЭлектронныйДокументВладелец);
	
КонецФункции

Процедура СформироватьИзвещениеПоПодтверждению(ИдентификаторПодтверждения, СтруктураВладельцев)
	
	Если НЕ ЗначениеЗаполнено(СтруктураВладельцев) ИЛИ  СтруктураВладельцев.Владелец = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючУникальности = Новый УникальныйИдентификатор;
	СоздатьКаталог (КаталогВременныхФайлов()+ КлючУникальности);
	ИмяФайлаИзвещения = КаталогВременныхФайлов()+ КлючУникальности + "\Извещение.xml";
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайлаИзвещения);
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");

	//Идентификатор подтверждения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ИДПодтверждения");
	ЗаписьХМЛ.ЗаписатьТекст(ИдентификаторПодтверждения);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	//  дата документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(ТекущаяДата()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// конец корневого элемента
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.Закрыть();

	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаИзвещения));
	
	УдалитьФайлы(КаталогВременныхФайлов()+ КлючУникальности);
	
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(СтруктураВладельцев.Владелец, 
		"ИзвещениеОператору",
		"xml",
		ТекущаяДата(), ТекущаяДата(), 
		АдресВоВременномХранилище, 
		Неопределено,  
		"ЭДПрисоединенныеФайлы"); 
		
    СтруктураИзвещения = Новый Структура("ВидЭД, Контрагент, ВладелецЭД, НаправлениеЭД, СтатусЭД, НомерЭД, ЭлектронныйДокументВладелец", Перечисления.ВидыЭД.Извещение, СтруктураВладельцев.Владелец.Контрагент, 
		СтруктураВладельцев.Владелец, Перечисления.НаправленияЭД.Исходящий, Перечисления.СтатусыЭД.Сформирован, ДобавленныйФайл.УникальныйИдентификатор(),СтруктураВладельцев.ЭлектронныйДокументВладелец);
	ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураИзвещения);
	ОбновитьВерсиюЭД(СтруктураВладельцев.ЭлектронныйДокументВладелец);
    
КонецПроцедуры

//////////////////////////////////////////////////////////////
// Обмен через каталог
//////////////////////////////////////////////////////////////

// Обновляет статусы электронных документов.
//
// Параметры: 
// МассивДокументов - массив ссылок на электронные документы, состояние которых надо обновить,
// ПризнакПодписи - булево, признак того, что документы подписаны ЭЦП.
//
Процедура ОбновитьСтатусыЭД(МассивДокументов, ПризнакПодписи) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлектронныйДокумент Из МассивДокументов Цикл
		Если (ПризнакПодписи И ЭлектронныйДокумент.СтатусЭД <> Перечисления.СтатусыЭД.Подписан) 
		 ИЛИ (ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани  
		 	  И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
		 ИЛИ ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			Если ДокументОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				ДокументОбъект.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке;
			Иначе
				ДокументОбъект.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение;
			КонецЕсли;
			ДокументОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДата();
			ДокументОбъект.Записать();
			ПринудительнаяСменаСостояния = Ложь;
			Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Извещение И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				ПринудительнаяСменаСостояния = Истина;
			КонецЕсли;
			ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостояния);
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'подготовка к отправке ЭД'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура предназначена для коррекции имени файла  - замена некорректных символов на пробел
//
// Параметры
//  СтрИмяФайла  - Строка - Имя файла
Процедура СкорректироватьИмяФайла(СтрИмяФайла)
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru.
	// При этом были объединены запрещенные символы для файловых систем FAT и NTFS.
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Для Сч=1 по СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если Найти(СтрИмяФайла, Символ) <> 0 Тогда
			СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, " ");
		КонецЕсли;
	КонецЦикла;
	
	СтрИмяФайла = СокрЛП(СтрИмяФайла);
	
КонецПроцедуры // СкорректироватьИмяФайла()

// Создает пакет электронных документов.
// 
// Параметры:
// МассивЭД - Массив ссылок на электронные документы, которые надо включить в пакет.
// ПризнакПодписи - булево, признак, что документы подписаны ЭЦП.
//
Функция СоздатьДокументыПакетовЭД(МассивЭД, ПризнакПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТЗ_ПЭД = Новый ТаблицаЗначений;
	ТЗ_ПЭД.Колонки.Добавить("ПЭД");
	ТЗ_ПЭД.Колонки.Добавить("Соглашение");
	ТЗ_ПЭД.Колонки.Добавить("АдресРесурса");
	
	МассивПодготовленныхКОтправкеЭД = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		Если (ПризнакПодписи И (ЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ ЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден))
		 ИЛИ НЕ УстановленныеПодписиВалидны(ЭД) Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыСоглашения = ОпределитьНастройкиОбменаЭДПоИсточнику(ЭД.ВладелецФайла,,,ЭД);
		Если ПараметрыСоглашения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ПЭД = НайтиСоздатьПакетЭД(ТЗ_ПЭД, ПараметрыСоглашения);
			НоваяСтрока						= ПЭД.ЭлектронныеДокументы.Добавить();
			НоваяСтрока.ЭлектронныйДокумент = ЭД;
			НоваяСтрока.ОбъектВладелец 		= ЭД.ВладелецФайла;
			ПЭД.Записать();
			МассивПодготовленныхКОтправкеЭД.Добавить(ЭД);
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'формирование пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// сформируем массив структур для обработки на клиенте
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТЗ_ПЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД", 			ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("АдресРесурса",	ТекСтрока.АдресРесурса); 
		Если ТекСтрока.Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			ТипОтправки = "Каталог";	
		ИначеЕсли ТекСтрока.Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			ТипОтправки = "ЭлектроннаяПочта";
		Иначе
			ТипОтправки = "СпецОператор";
		КонецЕсли;
		СтруктураПЭД.Вставить("ТипОтправки", ТипОтправки);
		МассивСтруктурПЭД.Добавить(СтруктураПЭД);
		СформироватьЭДПрисоединенныйФайлПакета(ТекСтрока.ПЭД);
	КонецЦикла;
	ОбновитьСтатусыЭД(МассивПодготовленныхКОтправкеЭД, ПризнакПодписи);	
	
	Возврат МассивСтруктурПЭД;
	
КонецФункции

Функция НайтиСоздатьПакетЭД(ТЗ_ПЭД, ПараметрыСоглашения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденнаяСтрока = ТЗ_ПЭД.Найти(ПараметрыСоглашения.СоглашениеЭД, "Соглашение");
	Если НайденнаяСтрока = Неопределено Тогда
		ПЭД 						= Документы.ПакетЭД.СоздатьДокумент();
		ПЭД.Дата 					= ТекущаяДата();
		ПЭД.Отправитель 			= ПараметрыСоглашения.ИдентификаторОрганизации;
		ПЭД.Получатель 				= ПараметрыСоглашения.ИдентификаторКонтрагента;
		ПЭД.СтатусПакета			= Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
		ПЭД.Направление 			= Перечисления.НаправленияЭД.Исходящий;
		ПЭД.СпособОбменаЭД 			= ПараметрыСоглашения.СпособОбменаЭД;
		ПЭД.АдресРесурсаКонтрагента	= ПараметрыСоглашения.АдресРесурсаКонтрагента;
		ПЭД.АдресРесурсаОрганизации	= ПараметрыСоглашения.АдресРесурсаОрганизации;
		ПЭД.Соглашение 				= ПараметрыСоглашения.СоглашениеЭД;
		ПЭД.Контрагент 				= ПараметрыСоглашения.Контрагент;
		ПЭД.Организация 			= ПараметрыСоглашения.Организация;
		ПЭД.Записать();  // Исключение обрабатывается на более высоком уровне
		
		НовСтрока 				= ТЗ_ПЭД.Добавить();
		НовСтрока.ПЭД 			= ПЭД.Ссылка;
		НовСтрока.Соглашение 	= ПараметрыСоглашения.СоглашениеЭД;
		НовСтрока.АдресРесурса 	= ПараметрыСоглашения.АдресРесурсаКонтрагента;
	Иначе
		ПЭД = НайденнаяСтрока.ПЭД.ПолучитьОбъект();
	КонецЕсли;
	Возврат ПЭД;
	
КонецФункции

Функция ПолучитьЭлектронныеДокументыКонвертов(Конверт)
	
	Возврат Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	
КонецФункции

// Получает адрес сертификата шифрования во временном хранилище данных.
//
// Параметры:
// ПрисоединенныйФайл - Ссылка на электронный документ, адрес сертификата шифрования по которому необходимо получить.
//
Функция ПолучитьМассивАдресовСертификатовШифрования(ПрисоединенныйФайл) Экспорт
	
	ПараметрыСоглашения = ОпределитьНастройкиОбменаЭДПоИсточнику(ПрисоединенныйФайл.ВладелецФайла,,,ПрисоединенныйФайл);
	Если ПараметрыСоглашения = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СертификатКонтрагентаШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования;
	СертификатОрганизацииШифрования = ПараметрыСоглашения.СертификатОрганизацииДляРасшифровки;
	ДвоичныеДанныеСертификата = СертификатКонтрагентаШифрования.Получить();
	ДвоичныеДанныеСертификатаОрганизации = СертификатОрганизацииШифрования.ФайлСертификата.Получить();
	
	Если ДвоичныеДанныеСертификата = Неопределено ИЛИ ДвоичныеДанныеСертификатаОрганизации = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата);
	АдресСертификатаОрганизации = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификатаОрганизации);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(АдресСертификата);
	МассивВозврата.Добавить(АдресСертификатаОрганизации);
	
	Возврат МассивВозврата;
	
КонецФункции

// Устанавливает признак шифрования пакету электронных документов.
//
// Параметры:
// СсылкаНаПакетЭД - Ссылка на пакет электронных документов, которому необходимо установить признак шифрования,
// ПараметрыШифрования - Структура, параметры шифрования для данного пакета электронных документов.
//
Процедура ДобавитьПризнакШифрованияПакетуЭД(СсылкаНаПакетЭД, ПрисоединенныйФайл, ПараметрыШифрования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭДОбъект = СсылкаНаПакетЭД.ПолучитьОбъект();
		Для Каждого Сертификат Из ПараметрыШифрования Цикл
			СертификатКриптографии = Новый СертификатКриптографии(ПолучитьИзВременногоХранилища(Сертификат));
			ПакетЭДОбъект.СертификатШифрования = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СертификатКриптографии.Субъект);
			ПараметрыПоиска = Новый Структура("ЭлектронныйДокумент", ПрисоединенныйФайл);
			СтрокиТЧПакета = ПакетЭДОбъект.ЭлектронныеДокументы.НайтиСтроки(ПараметрыПоиска);
			Для Каждого СтрокаТЧПакета Из СтрокиТЧПакета Цикл
				СтрокаТЧПакета.ДанныеЗашифрованы = Истина;
				СтрокаТЧПакета.СертификатШифрования = ПакетЭДОбъект.СертификатШифрования;
			КонецЦикла;
		КонецЦикла;
		ПакетЭДОбъект.ДанныеЗашифрованы = Истина;
		ПакетЭДОбъект.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'установка признака шифрования пакету ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
// Формирование пакетов электронных документов

Процедура ПоместитьПакетЭДВКонверт(Конверт, АдресЗипКонтейнера)
	
	// так как теперь может быть несколько документов в одном пакете, надо проверять, есть ли 
	// уже присоединенные файлы к пакету. Если есть - ничего не делать.
	
	УстановитьПривилегированныйРежим(Истина);
	 		
	Выборка = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	
	Если ЗначениеЗаполнено(Выборка) И Выборка.Количество()>0 Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(АдресЗипКонтейнера);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(АдресЗипКонтейнера);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(Конверт, 
														Файл.ИмяБезРасширения,
														СтрЗаменить(Файл.Расширение,".", ""),
														ТекущаяДата(), ТекущаяДата(), 
														АдресВоВременномХранилище, 
														Неопределено,  
														"ЭДПрисоединенныеФайлы"); 
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
// РАСПАКОВКА ПАКЕТОВ ЭЛЕКТРОННЫХ ДОКУМЕНТОВ

Функция ОпределитьНаправление(СтруктураФайлаЭД)
	
	Если СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара И СтруктураФайлаЭД.ПризнакПродавца Тогда
		Возврат Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Возврат Перечисления.НаправленияЭД.Входящий;
		
КонецФункции

Функция НайтиСтруктуруВПараметрах(ИмяПоиска, ПараметрыШифрования)
	
	Если ТипЗнч(ПараметрыШифрования) = Тип("Массив") Тогда
		Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
			Если СокрЛП(ИмяПоиска) = СокрЛП(СтруктураШифрования.Документ) Тогда
				Возврат СтруктураШифрования;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьМассив(МассивПриемник, МассивИсточник)
	
	Если ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из МассивИсточник Цикл		
		МассивПриемник.Добавить(ЭлементИсточник)
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьОбъектПривязки(СтруктураПараметровДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		Возврат СтруктураПараметровДокумента.ВладелецЭД;
	КонецЕсли;
	
	ЭлектронныйНомерДокумента = Лев(СтруктураПараметровДокумента.НомерЭД, Найти(СтруктураПараметровДокумента.НомерЭД, "##"));
	
	ЗапросДокументовОснований = Новый Запрос;
	ЗапросДокументовОснований.УстановитьПараметр("Параметр", ЭлектронныйНомерДокумента +"%");
	ЗапросДокументовОснований.УстановитьПараметр("ВидЭД", СтруктураПараметровДокумента.ВидЭд);
	ЗапросДокументовОснований.УстановитьПараметр("НаправлениеЭД", СтруктураПараметровДокумента.НаправлениеЭД);
	
	ЗапросДокументовОснований.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                                  |	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК Ссылка
	                                  |ИЗ
	                                  |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	                                  |ГДЕ
	                                  |	(НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД)
	                                  |	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	                                  |	И ЭДПрисоединенныеФайлы.НомерЭД ПОДОБНО &Параметр
	                                  |	И ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
	                                  |	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД";
	НайденныеДокументы = ЗапросДокументовОснований.Выполнить().Выбрать();
		
	Если НайденныеДокументы.Следующий() Тогда
		Возврат НайденныеДокументы.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

Функция ОбработатьПодтвержденияДокументов(АдресКаталога, СоответствиеФайлПараметры, ПакетЭДОбъект)
	
	МассивВозврата = Новый Массив;
	Попытка  // попытаемся получить настройки криптографии. Если неудачно, значит средства криптографии не установлены на АРМ
		НастройкиКриптографии = ЭлектроннаяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии .ТипПровайдераЭЦП;
		
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		МенеджерКриптографии.АлгоритмПодписи = НастройкиКриптографии.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования = НастройкиКриптографии.АлгоритмШифрования;
	Исключение
		МенеджерКриптографии = Неопределено;
		Возврат МассивВозврата;
	КонецПопытки;
	
	// подтверждением считаем подпись без файла (в соответствии - ключ с файлом подписи)
	Для Каждого ЭлементСоответствие Из СоответствиеФайлПараметры Цикл
		Если Найти(ЭлементСоответствие.Ключ, ".p7s") > 0 Тогда
			НаправлениеИскомогоДокумента = Перечисления.НаправленияЭД.Исходящий;
			ФайлыПодписи = НайтиФайлы(АдресКаталога, ЭлементСоответствие.Ключ);
			Если ФайлыПодписи.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлыПодписи[0].ПолноеИмя);
			
			ЭлектронныйДокумент = ОпределитьДокументПоНомеруЭД(ЭлементСоответствие.Значение.НомерЭД, НаправлениеИскомогоДокумента);		
			Если ЕстьТакаяПодпись(ДвоичныеДанныеПодписи , ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДанныхДокументов = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭлектронныйДокумент).СсылкаНаДвоичныеДанныеФайла;
			ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокументов);
						
			СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи); // определим сертификаты криптографии из подписи
			Если СертификатыПодписи.Количество() <> 0 Тогда
				Сертификат = СертификатыПодписи[0];
                ЭлектроннаяПодпись.ЗанестиИнформациюОПодписи(ЭлектронныйДокумент, 
																	ДвоичныеДанныеПодписи,
																	Base64Строка(Сертификат.Отпечаток),
																	ТекущаяДата(),
																	"",
																	ЭлементСоответствие.Ключ, 
																	ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
																	Сертификат.Выгрузить());
			КонецЕсли;
			ОпределитьСтатусыПодписей(ЭлектронныйДокумент);
			Попытка
				ЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
				ЭлектронныйДокументОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДата();
				ЭлектронныйДокументОбъект.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение;
				ЭлектронныйДокументОбъект.Записать();
				ОбновитьВерсиюЭД(ЭлектронныйДокумент);
			Исключение
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'получение подтверждения ЭД'"), ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			
			СтрокаПакетаЭД = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			СтрокаПакетаЭД.ЭлектронныйДокумент = "Подтверждение";
			СтрокаПакетаЭД.ОбъектВладелец = ЭлектронныйДокумент.ВладелецФайла;
			МассивВозврата.Добавить(ЭлектронныйДокумент.ВладелецФайла);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивВозврата;
	
КонецФункции

Функция ЕстьТакаяПодпись(ДвоичныеДанныеПроверки, ЭлектронныйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Каждого ПодписьДокумента Из ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи Цикл
		ДвоичныеДанныеПодписи = ПодписьДокумента.Подпись.Получить();
		Если ДвоичныеДанныеПодписи = ДвоичныеДанныеПроверки Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСоответствиеФайлПараметры(ФайлИнформации)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
	
	ПредставлениеДокумента = "";
	ПредставленияПодписей = Новый Массив;
	НашлиДокумент = Ложь;
	СоответствиеВозврата = Новый Соответствие;
	 	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Параметры = Новый Структура;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Текст" Тогда
			ЧтениеХМЛ.Прочитать();
			СоответствиеВозврата.Вставить("Текст", ЧтениеХМЛ.Значение);
		КонецЕсли;

		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			ПредставлениеДокумента = "";
			ПредставленияПодписей.Очистить();
			ЧтениеХМЛ.Прочитать();
			ПредставлениеДокумента = СокрЛП(ЧтениеХМЛ.Значение);
			НашлиДокумент = Истина;
			НомерЭД = "";
		КонецЕсли;
		
		Если НЕ НашлиДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Подпись" Тогда
			ЧтениеХМЛ.Прочитать();
			ПредставленияПодписей.Добавить(СокрЛП(ЧтениеХМЛ.Значение));
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НомерЭД" Тогда
			ЧтениеХМЛ.Прочитать();
			НомерЭД = ЧтениеХМЛ.Значение;
		КонецЕсли;
    		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда 
			НашлиДокумент = Ложь;
			НовыйМассив = ПредставленияПодписей;
			СоответствиеВозврата.Вставить(ПредставлениеДокумента, Новый Структура("Подписи, НомерЭД", ВернутьМассивПредставленийПодписей(ПредставленияПодписей),НомерЭД));
		КонецЕсли;
					
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция ВернутьМассивПредставленийПодписей(МассивПредставления)
	
	МассивВозврата = Новый Массив;
	Для Каждого Элемент Из МассивПредставления Цикл
		МассивВозврата.Добавить(Элемент);
	КонецЦикла;
	Возврат МассивВозврата;
	
КонецФункции

// Функция определяет настройки обмена ЭД по источнику - документу базы данных или по ЭД
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(Источник, ВыводитьСообщения = Истина, ПараметрыСертификатов = Неопределено, ЭД = неопределено) Экспорт
	
	ПараметрыЭД = ЭлектронныеДокументыПереопределяемый.ОпределитьПараметрыЭДПоИсточнику(Источник);
	Если ЗначениеЗаполнено(ЭД) Тогда
		ПараметрыЭД.Вставить("СоглашениеЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,"СоглашениеЭД"));
	КонецЕсли;		
	Результат = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, ПараметрыСертификатов);
	
	Если Результат = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			Текст = Нстр("ru = 'Обработка '") + Источник + Символы.ПС;
			Текст = Текст + НСтр("ru = 'Не найдено действующее ""Соглашение об использовании электронных документов"" по параметрам:'");
			Для Каждого ТекПараметр Из ПараметрыЭД Цикл
				Если ЗначениеЗаполнено(ТекПараметр.Значение) Тогда
					Текст = Текст+Символы.ПС+НСтр("ru = '<%1>: %2'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекПараметр.Ключ, ТекПараметр.Значение);
				КонецЕсли;
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ВернутьМассивОтпечатковСтруктуры(СтруктураСертификатов)
	
	МассивВозврата = Новый Массив;
	Для Каждого СтруктураКлиентскогоСертификата Из СтруктураСертификатов Цикл
		МассивВозврата.Добавить(СтруктураКлиентскогоСертификата.Отпечаток);
	КонецЦикла;
	Возврат МассивВозврата;
	
КонецФункции

// Определяет настройки обмена электронными документами по структуре параметров.
Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, ПараметрыСертификатов = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФлагИспользованияЭЦП = Константы.ИспользоватьЭлектронныеЦифровыеПодписи.Получить();
	
	Запрос  = Новый Запрос;
	Запрос.УстановитьПараметр("НаправлениеЭД", 		СтруктураПараметров.НаправлениеЭД);
	Если СтруктураПараметров.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Запрос.УстановитьПараметр("ВидЭД", СтруктураПараметров.ВидЭД);
	Иначе
		Запрос.УстановитьПараметр("ВидЭД", Неопределено);
	КонецЕсли;
    	
	Если СтруктураПараметров.Свойство("СоглашениеЭД") И ЗначениеЗаполнено(СтруктураПараметров.СоглашениеЭД) Тогда
		Запрос.УстановитьПараметр("СоглашениеЭД", СтруктураПараметров.СоглашениеЭД);
		Запрос.Текст = ЭлектронныеДокументыПереопределяемый.ПолучитьТекстНастроекОбменаПоСоглашению(СтруктураПараметров.СоглашениеЭД); 
	Иначе
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		Запрос.УстановитьПараметр("ПустаяУчетнаяЗапись", Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка());
		Запрос.УстановитьПараметр("Неопределено", Неопределено);
        Запрос.УстановитьПараметр("СоглашениеЭД", Неопределено);
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
				
		Если СтруктураПараметров.Свойство("Партнер") Тогда
	    	Запрос.УстановитьПараметр("Партнер", СтруктураПараметров.Партнер);
		Иначе	
			Запрос.УстановитьПараметр("Партнер", Неопределено);
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("Контрагент", 	 СтруктураПараметров.Контрагент);
		Запрос.УстановитьПараметр("СтатусСоглашения",Перечисления.СтатусыСоглашенийЭД.Действует);
		Запрос.УстановитьПараметр("Интеркампани", 	 ?(ЗначениеЗаполнено(СтруктураПараметров.Контрагент) 
													 И ТипЗнч(СтруктураПараметров.Контрагент) = Тип("СправочникСсылка.Организации"), Истина, Ложь));
	
		Запрос.Текст = ЭлектронныеДокументыПереопределяемый.ПолучитьТекстЗапросаНастроекОбменаСПриоритетами();
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();							 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗ = РезультатЗапроса.Выгрузить();							 
	ТекущаяНастройка = ТЗ[0];	// Возьмем первую настройку по приоритету
	НастройкиОбменаЭД = Новый Структура;
	НастройкиОбменаЭД.Вставить("СертификатДоступен", Ложь);
	// если с клиента были переданы установленные сертификаты криптографии, то надо выбрать настройку с этими сертификатами
	Если ФлагИспользованияЭЦП И ПараметрыСертификатов <> Неопределено Тогда 
		МассивОтпечатковСертификатов = ВернутьМассивОтпечатковСтруктуры(ПараметрыСертификатов);
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			Если СтрокаТЗ.Подписывать Тогда// требуется подпись
				Если ПараметрыСертификатов.Количество() = 0 Тогда // нет доступных сертификатов
					Прервать;
				Иначе
					Если МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) <> Неопределено 
					 ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииПолучателяДляПодписи.Отпечаток) <> Неопределено   // Интеркампани
					 ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодтверждения.Отпечаток) <> Неопределено Тогда // есть нужные сертификаты

						ТекущаяНастройка = СтрокаТЗ;	
						НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
						Прервать; 
					КонецЕсли;
				КонецЕсли;
			Иначе // не нужна подпись для этого вида документа
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
		НастройкиОбменаЭД.Вставить(ТекКолонка.Имя, ТекущаяНастройка[ТекКолонка.Имя]);
	КонецЦикла;
	
	// дополнительные значения
	// требуется ли подпись
	Если ФлагИспользованияЭЦП Тогда
		ФлагПодписи = НастройкиОбменаЭД.Подписывать;
	Иначе
		ФлагПодписи = Ложь;
	КонецЕсли;
	НастройкиОбменаЭД.Вставить("Подписывать", ФлагПодписи);
	
	Возврат НастройкиОбменаЭД;
		
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры
//  ИДОрганизации – строка с ИД Отправителя,
// 	ИДКонтрагента - строка с ИД получателя
//
// Возвращаемое значение:
//   структуру параметров с настройками обмена
//
Функция ПолучитьНастройкиОбменаЭДПоИД(ИДОрганизации, ИДКонтрагента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	НастройкиОбменаЭД.Организация,
	               |	НастройкиОбменаЭД.Контрагент,
	               |	НастройкиОбменаЭД.Партнер КАК Партнер,
	               |	НастройкиОбменаЭД.Ссылка КАК Основание,
	               |	НастройкиОбменаЭД.АдресРесурсаКонтрагента,
	               |	НастройкиОбменаЭД.АдресРесурсаОрганизации
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиОбменаЭД
	               |ГДЕ
	               |	НастройкиОбменаЭД.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
	               |	И НастройкиОбменаЭД.ИдентификаторОрганизации = &ИдентификаторОрганизации";
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДКонтрагента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Получатель", 		ИДОрганизации);
		СтруктураВозврата.Вставить("Отправитель", 		ИДКонтрагента);
		СтруктураВозврата.Вставить("Организация",		Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",		Выборка.Контрагент);
		СтруктураВозврата.Вставить("Партнер", 			Выборка.Партнер);
		СтруктураВозврата.Вставить("Основание", 		Выборка.Основание);
		СтруктураВозврата.Вставить("АдресОтправителя", 	Выборка.АдресРесурсаКонтрагента);
		СтруктураВозврата.Вставить("АдресПолучателя", 	Выборка.АдресРесурсаОрганизации);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет признак шифрования и статус пакета электронных документов.
// 
// Параметры:
// МассивСсылокНаДокументы - масив ссылок на пакеты электронных документов, параметры которых надо определить.
//
Функция ОпределитьШифрованиеИСтатус(Знач МассивСсылокНаДокументы) Экспорт
			
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ПакетЭД.Ссылка КАК СсылкаНаДокумент,
	              	|	ПакетЭД.Соглашение.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	              	|	ЭДПрисоединенныеФайлы.Ссылка,
	              	|	ПакетЭД.СтатусПакета
	              	|ИЗ
	              	|	Документ.ПакетЭД КАК ПакетЭД
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	              	|		ПО (ЭДПрисоединенныеФайлы.ВладелецФайла = ПакетЭД.Ссылка)
	              	|ГДЕ
	              	|	ПакетЭД.Ссылка В(&МассивСсылок)";			   
				   
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаДокументы);
	
	ВыборкаПакеты = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПакеты.Следующий() Цикл
		    
		Если НЕ ЗначениеЗаполнено(ВыборкаПакеты.Ссылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ВыборкаПакеты.Количество() = 1 И  ВыборкаПакеты.СтатусПакета <> Перечисления.СтатусыПакетовЭД.КРаспаковке Тогда
			ВызватьИсключение(Нстр("ru = 'Статус пакета отличен от значения ""К распаковке""! Обработка прервана...'"));
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыДанных = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаПакеты.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ПолучитьИмяВременногоФайла("zip");
		
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		ПапкаДляРаспаковки = КаталогВременныхФайлов()+ "РаспакованныйАрхив\" + ВыборкаПакеты.Ссылка.УникальныйИдентификатор()+"\";
		ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
		
		ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
		
		Для Каждого ФайлИнформации Из ФайлыАрхива Цикл
			Если Найти(ФайлИнформации.Имя, "packageDescription") > 0  Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
		НашлиШифрование = Ложь;
		Документ = Неопределено;
		Зашифрован = Ложь;
		Сертификат = "";
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НастройкиШифрования" Тогда
				НашлиШифрование = Истина;
			КонецЕсли;
			Если Не НашлиШифрование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ДокументШифрования" Тогда
				ЧтениеХМЛ.Прочитать();
				Документ = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
				ЧтениеХМЛ.Прочитать();
				Зашифрован = ЧтениеХМЛ.Значение;
				Сертификат = ВыборкаПакеты.СертификатОрганизацииДляРасшифровки;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "СертификатШифрования" Тогда
				ЧтениеХМЛ.Прочитать();
				Сертификат = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ДокументШифрования" Тогда
				
				НоваяСтруктураМассива = Новый Структура("Документ, Зашифрован, Сертификат", Документ, Зашифрован, Сертификат);
				МассивВозврата.Добавить(НоваяСтруктураМассива);
				Документ = Неопределено;
				Зашифрован = Ложь;
				Сертификат = "";
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НастройкиШифрования" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		ЧтениеХМЛ.Закрыть();
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ФайлАрхива);
	КонецЦикла;
	Возврат МассивВозврата;
	
КонецФункции

//Определяет, указано ли в настройках соглашения необходимость подписания для вида ЭД
// 
// Параметры:
// Соглашение 		- ссылка на элемент справочника СоглашенияОбИспользованииЭД.
// ВидЭД	  		- значение перечисления ВидыЭД
// НаправлениеЭД    - значение перечисления НаправленияЭД
//
// Возвращаемое значение:
//   Булева Истина или Ложь
//
Функция НеобходимоПодписать (ЭД) Экспорт
	
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЭД,"ВидЭД, НаправлениеЭД");
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭЦП
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	               |ГДЕ
	               |	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
	               |	И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	               |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	               |ГДЕ
	               |	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	               |	И (&НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	               |			ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани))
	               |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", 		ЭД.СоглашениеЭД);	
	Запрос.УстановитьПараметр("ВидЭД", 			Реквизиты.ВидЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", 	Реквизиты.НаправлениеЭД);
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	Возврат Результат.ИспользоватьЭЦП;         
	
КонецФункции //ЭДНеобходимоПодписывать()	

//////////////////////////////////////////////////////////////
// ОБРАБОТКА ЭД

// Получает текстовое представление электронного документа.
//                      
// Параметры:
// СсылкаНаЭД - Ссылка на электронный документ, текстовое представление которого необходимо получить.
//
Функция ПолучитьПредставлениеЭД(СсылкаНаЭД) Экспорт
	
	ТекстВерсии = ?(СсылкаНаЭД.НомерВерсииЭД=0,"", " (версия "+СсылкаНаЭД.НомерВерсииЭД+")");
	ТекстДаты = ?(ЗначениеЗаполнено(СсылкаНаЭД.ДатаДокументаОтправителя), 
	" от "+Формат(СсылкаНаЭД.ДатаДокументаОтправителя, "ДФ=dd.MM.yyyy"), "");
	
	Если СсылкаНаЭд.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Или
		СсылкаНаЭд.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		Представление = ""+СсылкаНаЭД.ВидЭД+ТекстДаты+ТекстВерсии;
	Иначе
		Представление = ""+СсылкаНаЭД.ВидЭД+" № "+СсылкаНаЭД.НомерДокументаОтправителя+ТекстДаты+ТекстВерсии;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
// МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
// КлиентскиеНастройкиКриптографии - Массив доступных сертификатов
// Действия - Строковое представление необходимых действий,
// ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//
Функция ВыполнитьДействияПоЭД(МассивСсылокНаОбъект,
								КлиентскиеНастройкиКриптографии,
								Действия,
								ДопПараметры = "",
								ЭД=Неопределено
								) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	               |	ЕСТЬNULL(ПрисоединенныеФайлы.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) КАК СсылкаНаЭД,
	               |	ПрисоединенныеФайлы.СтатусЭД,
	               |	ПрисоединенныеФайлы.ВидЭД,
	               |	ПрисоединенныеФайлы.СоглашениеЭД КАК Соглашение
	               |ИЗ
	               |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	               |		ПО (ПрисоединенныеФайлы.Ссылка = СостоянияЭД.ЭлектронныйДокумент)
	               |ГДЕ
	               |	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)  %1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЭДПрисоединенныеФайлы.ВладелецФайла,
	               |	ЭДПрисоединенныеФайлы.Ссылка,
	               |	ЭДПрисоединенныеФайлы.СтатусЭД,
	               |	NULL,
	               |	ЭДПрисоединенныеФайлы.СоглашениеЭД
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.ВладелецФайла В(&МассивСсылок)
	               |	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Извещение)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
	
	// 1. Сформируем ЭД для объектов
	Если ЭД = Неопределено И ЕстьДействие(Действия, "Сформировать") Тогда 
		НастройкиОбъектов = Новый Соответствие;
		Для Каждого Объект ИЗ МассивСсылокНаОбъект Цикл
			НастройкиОбъектов.Вставить(Объект, ОпределитьНастройкиОбменаЭДПоИсточнику(Объект,,КлиентскиеНастройкиКриптографии));
		КонецЦикла;
		Если Действия="СформироватьУтвердитьПодписатьОтправить" Тогда
			СообщитьОНеобрабатываемыхОбъектах(НастройкиОбъектов);
		КонецЕсли;
		Если Действия= "Сформировать" Тогда //формируем в любом случае для команды Сформировать новый электронный документ
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "");   
		Иначе
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "И (ПрисоединенныеФайлы.Ссылка ЕСТЬ NULL)");   
		КонецЕсли;
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		
		//обработка ситуации, когда соглашение введено после заведения документов ИБ
		Для Каждого Элемент ИЗ НастройкиОбъектов Цикл
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "");   
			ТЗ_ЭД_Сформированные = Запрос.Выполнить().Выгрузить();
			Если ЗначениеЗаполнено(Элемент.Значение) 
				И ТЗ_ЭД.Найти(Элемент.Ключ,"ВладелецЭД")=Неопределено 
				И ТЗ_ЭД_Сформированные.Найти(Элемент.Ключ,"ВладелецЭД")=Неопределено Тогда
					НовСтрока = ТЗ_ЭД.Добавить();
					НовСтрока.ВладелецЭД = Элемент.Ключ;
			КонецЕсли;
		КонецЦикла;
		
		КолНовыхЭД = 0;
		Если ТЗ_ЭД.Количество()>0 Тогда 
			МассивНовыхЭД = СформироватьПрисоединенныеФайлы(ТЗ_ЭД.ВыгрузитьКолонку("ВладелецЭД"), НастройкиОбъектов, ДопПараметры);
			КолНовыхЭД = МассивНовыхЭД.Количество();
		КонецЕсли;
		СтруктураВозврата.Вставить("КоличествоНовыхЭД", КолНовыхЭД);
		Если Действия = "Сформировать" Тогда   //Вызвано действие Сформировать новый электронный документ
			СтруктураВозврата.Вставить("МассивНовыхЭД", МассивНовыхЭД);
		КонецЕсли;
	КонецЕсли;
	
//2. Утвердим ЭД для объектов
	Если ЕстьДействие(Действия, "Утвердить") Тогда 
	    Если Не ЗначениеЗаполнено(ЭД) Тогда
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстЗапроса, 
						"И (НЕ ПрисоединенныеФайлы.Ссылка ЕСТЬ NULL)"
						);
			ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		Иначе
			ТЗ_ЭД = ТаблицаПоЭД(ЭД);
		КонецЕсли;
		КолУтвержденныхЭД = 0;
		КолУтвержденныхРанее = 0;
		Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
			Если  ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
				СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
				УстановитьПризнакУтвержден(СсылкаНаЭД);
				ТекСтрока.СтатусЭД = СсылкаНаЭД.СтатусЭД;
				КолУтвержденныхЭД = КолУтвержденныхЭД+1;
			Иначе
				КолУтвержденныхРанее = КолУтвержденныхРанее + 1; //для автоматической подготовки к отправке, если ЭД не подписывается   
			КонецЕсли;
		КонецЦикла;
		СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", КолУтвержденныхЭД);
	КонецЕсли;
	
//3. Сформируем массив структур для подписания ЭД
	Если ЕстьДействие(Действия, "Подписать") Тогда 
		//подписываем ЭД только в статусе Утвержден
		Если Не ЗначениеЗаполнено(ЭД) Тогда
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстЗапроса, 
						"И (НЕ ПрисоединенныеФайлы.Ссылка ЕСТЬ NULL) И ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)"
																			); 
			ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		Иначе
			ТЗ_ЭД = ТаблицаПоЭД(ЭД);
			Для Каждого Строка из ТЗ_ЭД Цикл
				Если Не Строка.СтатусЭД=Перечисления.СтатусыЭД.Утвержден Тогда
					ТЗ_ЭД.Удалить(Строка);
				КонецЕсли
			КонецЦикла
		КонецЕсли;
		ТЗ_ЭД.Колонки.Добавить("Подписывать");
		ТЗ_ЭД.Колонки.Добавить("Сертификат");
		КолСтрокТЗ = ТЗ_ЭД.Количество();
		ИндексТекСтроки = 0;            
		Пока ИндексТекСтроки < КолСтрокТЗ Цикл  
			ТекСтрока = ТЗ_ЭД[ИндексТекСтроки]; 
			
			Если ЗначениеЗаполнено(НастройкиОбъектов) Тогда
				НастройкиОбменаЭД = НастройкиОбъектов.Получить(ТекСтрока.ВладелецЭД);
			Иначе
				НастройкиОбменаЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(ТекСтрока.ВладелецЭД, , КлиентскиеНастройкиКриптографии, ТекСтрока.СсылкаНаЭД);
			КонецЕсли;
				
			Если НастройкиОбменаЭД = Неопределено Тогда // нет обмена
				ИндексТекСтроки = ИндексТекСтроки + 1;  
				Продолжить;
			КонецЕсли;
			
			ТекСтрока.Подписывать = Ложь;
			// в настройках задано требование подписать и еще не подписывали
			// для исходящих и входящих документов
			Если НастройкиОбменаЭД.Подписывать И (ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Утвержден 
			 ИЛИ ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан) Тогда
				ТекСтрока.Подписывать = Истина;
				Если ТекСтрока.СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
					
					//  Для интеркампани добавляем два сертификата для подписи ЭД (если ЭД
					// ренее не был подписан текущим сертификатом).
					Для Сч = 1 По 2 Цикл
						Если Сч = 2 Тогда
							КолСтрокТЗ = КолСтрокТЗ + 1;
							ИндексТекСтроки = ИндексТекСтроки + 1;
							ДопСтр = ТЗ_ЭД.Вставить(ИндексТекСтроки);
							ЗаполнитьЗначенияСвойств(ДопСтр, ТекСтрока,, "Сертификат");
							ТекСтрока = ДопСтр;
							ТекСертификат = НастройкиОбменаЭД.СертификатОрганизацииПолучателяДляПодписи;
						Иначе
							ТекСертификат = НастройкиОбменаЭД.СертификатОрганизацииДляПодписи;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ТекСертификат) Тогда
							ТекстОшибки = НСтр("ru = 'Не найдены доступные сертификаты подписи для организации %1, по виду документов %2. Подписание документа невозможно.'");
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
											?(Сч = 1, НастройкиОбменаЭД.Организация.Наименование, НастройкиОбменаЭД.Контрагент.Наименование), ТекСтрока.ВидЭД);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
							//Возврат СтруктураВозврата;
							Продолжить;
						КонецЕсли;
						
						Если НастройкиОбменаЭД.СертификатДоступен  // в настройках указан доступный для сеанса сертифика
							И ТекСтрока.СсылкаНаЭД.ЭлектронныеЦифровыеПодписи.Найти(ТекСертификат.Отпечаток) = Неопределено // ЭД еще не подписан этим сертификатом
							Тогда 
								ТекСтрока.Сертификат = ТекСертификат;
						КонецЕсли;
					КонецЦикла;
				Иначе  // НЕ Интеркампани
					Если ТекСтрока.СсылкаНаЭд.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
						ТекСертификат = НастройкиОбменаЭД.СертификатОрганизацииДляПодтверждения;
					Иначе
						ТекСертификат = НастройкиОбменаЭД.СертификатОрганизацииДляПодписи;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ТекСертификат) Тогда
						ТекстОшибки = НСтр("ru = 'Не найдены доступные сертификаты подписи для организации %1, по виду документов %2. Подписание документа невозможно.'");
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
																		НастройкиОбменаЭД.Организация.Наименование, ТекСтрока.ВидЭД);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
						ИндексТекСтроки = ИндексТекСтроки + 1;
						Продолжить;
					КонецЕсли;
					
					Если НастройкиОбменаЭД.СертификатДоступен Тогда // в настройках указан доступный для сеанса сертификат
						ТекСтрока.Сертификат = ТекСертификат;
					КонецЕсли;
								
					// для входящего документа, который был передан по каналам спецоператора, надо сформировать еще извещение с такими же значениями 
					Если ТекСтрока.СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий И 
						НастройкиОбменаЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСОС Тогда
						СтрокаИзвещения = ТЗ_ЭД.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаИзвещения, ТекСтрока);
						СтрокаИзвещения.СсылкаНаЭД = СформироватьИзвещениеПоВладельцу(ТекСтрока);
					КонецЕсли;
				КонецЕсли; // Интеркампани/НЕ интеркампани
			КонецЕсли;
			ТекСтрока.Соглашение = НастройкиОбменаЭД.СоглашениеЭД;
			ИндексТекСтроки = ИндексТекСтроки + 1;
			
		КонецЦикла;
		
		МассивСертификатов = Новый Массив;
		ВремТЗ = ТЗ_ЭД.Скопировать(,"Сертификат");
		ВремТЗ.Свернуть("Сертификат");
		Для Каждого ТекСтрока Из ВремТЗ Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Сертификат) Тогда 
				Продолжить;
			КонецЕсли;
			Отбор = Новый Структура("Сертификат, Подписывать", ТекСтрока.Сертификат, Истина);
			МассивЭД = ТЗ_ЭД.НайтиСтроки(Отбор);
			Если МассивЭД.Количество()>0 Тогда 
				МассивОбработки = Новый Массив;
				Для Каждого ТекЭл Из МассивЭД Цикл
					МассивОбработки.Добавить(ТекЭл.СсылкаНаЭД);
				КонецЦикла;
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("Сертификат", ТекСтрока.Сертификат);
				СтруктураДанных.Вставить("МассивЭД", МассивОбработки);
				МассивСертификатов.Добавить(СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
		СтруктураВозврата.Вставить("МассивСертификатов", МассивСертификатов);
	КонецЕсли;
	
//4. Сформируем массив структур для отправки ЭД 
	Если ЕстьДействие(Действия, "Отправить") Тогда 
		Если ЗначениеЗаполнено(ЭД) Тогда
			ТЗ_ЭД = ТаблицаПоЭД(ЭД);
			Иначе
				Если Действия = "Отправить" Тогда
					Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(  
							ТекстЗапроса,
							"И (НЕ ПрисоединенныеФайлы.Ссылка ЕСТЬ NULL)"
																							);
				Иначе
					Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(  
							ТекстЗапроса,
							"И (НЕ ПрисоединенныеФайлы.Ссылка ЕСТЬ NULL) 
							|И (ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден))"
																							);
				КонецЕсли;
				ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
			КонецЕсли;
			ТЗ_ЭД.Колонки.Добавить("Подписывать");
			ТЗ_ЭД.Колонки.Добавить("Сертификат");
			Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
				НастройкиОбменаЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(ТекСтрока.ВладелецЭД, , КлиентскиеНастройкиКриптографии, ТекСтрока.СсылкаНаЭД);
				Если НастройкиОбменаЭД = Неопределено Тогда // нет обмена
					Продолжить;
				КонецЕсли;
				ТекСтрока.Подписывать = НастройкиОбменаЭД.Подписывать;
			КонецЦикла;
			Если Действия="Отправить" Тогда
				Для Каждого Строка из ТЗ_ЭД Цикл
					Если Строка.СтатусЭД = Перечисления.СтатусыЭД.Сформирован Тогда
						ТЗ_ЭД.Удалить(Строка);
						ТекстСообщения = Нстр("ru = 'Для отправки ЭД необходимо его утвердить'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ИначеЕсли Строка.Подписывать И Строка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
						ТЗ_ЭД.Удалить(Строка);
						ТекстСообщения = Нстр("ru = 'Для отправки ЭД необходимо его подписать'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли
				КонецЦикла;
			КонецЕсли;
			Если Не Действия="Отправить" Тогда
				Для Каждого Строка из ТЗ_ЭД Цикл
					Если НЕ (Строка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден ИЛИ Строка.СтатусЭД = Перечисления.СтатусыЭД.Подписан) Тогда
						ТЗ_ЭД.Удалить(Строка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Если (ЕстьДействие(Действия, "Утвердить") И (КолУтвержденныхЭД>0 ИЛИ КолУтвержденныхРанее>0)) ИЛИ Действия = "Отправить" Тогда
			МассивСоглашений = Новый Массив;
			ВремТЗ = ТЗ_ЭД.Скопировать(,"Соглашение");
			ВремТЗ.Свернуть("Соглашение");
			Для Каждого ТекСтрока Из ВремТЗ Цикл
				Если НЕ ЗначениеЗаполнено(ТекСтрока.Соглашение)  
				 ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Соглашение.Контрагент)
				 ИЛИ ТекСтрока.Соглашение.ЭтоИнтеркампани Тогда 
					Продолжить;
				КонецЕсли;
				Для Сч = 0 По 1 Цикл
					ПризнакПодписи =  Сч <> 0;
					Отбор = Новый Структура("Соглашение, Подписывать", ТекСтрока.Соглашение, ПризнакПодписи);
					МассивЭД = ТЗ_ЭД.НайтиСтроки(Отбор);
					Если МассивЭД.Количество()>0 Тогда 
						МассивОбработки = Новый Массив;
						Для Каждого ТекЭл Из МассивЭД Цикл
							// не отправляем входящие документы, которые отправляются по каналам СОС
							Если ТекЭл.СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий И ТекСтрока.Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСОС Тогда
								Продолжить;
							КонецЕсли;
							МассивОбработки.Добавить(ТекЭл.СсылкаНаЭД);
						КонецЦикла;
						СтруктураДанных = Новый Структура;
						СтруктураДанных.Вставить("Соглашение", ТекСтрока.Соглашение);
						СтруктураДанных.Вставить("ПризнакПодписи", ПризнакПодписи);
						СтруктураДанных.Вставить("МассивЭД", МассивОбработки);
						МассивСоглашений.Добавить(СтруктураДанных);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			СтруктураВозврата.Вставить("МассивСоглашений", МассивСоглашений);
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураВозврата;
	
КонецФункции

Процедура СообщитьОНеобрабатываемыхОбъектах(НастройкиОбъектов)
	
	МассивОтбора = Новый Массив;
	Для Каждого Элемент ИЗ НастройкиОбъектов Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			МассивОтбора.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияЭД.СсылкаНаОбъект
	               |ИЗ
	               |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	               |ГДЕ
	               |	(СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка)
	               |			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение)
	               |			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отработан)
	               |			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении))
	               |	И СостоянияЭД.СсылкаНаОбъект В(&МассивССылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивОтбора);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
			Текст = Нстр("ru = 'Обработка '") + Результат.СсылкаНаОбъект + Символы.ПС;
			Текст = Текст + НСтр("ru = 'Не требуется выполнения действий с электронным документом'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЦикла;
	
КонецПроцедуры

// Определяет необходимость конкретного действия из перечня действий
//
// Параметры:
//
// ПереченьДействий - Строка, перечень действий, которые должны быть совершены с объектом
// Действие - Строка, конкретное действие, которое нужно найти в перечне действий
// 
// Возвращаемое значение:
// 
// Булево - Если действие найдено - возвращается Истина, иначе Ложь
//
Функция ЕстьДействие(ПереченьДействий, Действие)
	Если Найти(ПереченьДействий, Действие)>0 Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция СформироватьИзвещениеПоВладельцу(ПараметрыВладельца)
	
	СоздатьКаталог(КаталогВременныхФайлов() + ПараметрыВладельца.СсылкаНаЭд.УникальныйИдентификатор());
	ИмяФайлаИзвещения = КаталогВременныхФайлов() + ПараметрыВладельца.СсылкаНаЭд.УникальныйИдентификатор() + "\Извещение.xml";
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайлаИзвещения);
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");

	//Идентификатор подтверждения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ИДПодтверждения");
	ЗаписьХМЛ.ЗаписатьТекст(ПараметрыВладельца.СсылкаНаЭд.НомерЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	//  дата документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(ТекущаяДата()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// конец корневого элемента
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.Закрыть();

	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаИзвещения));
	
	УдалитьФайлы(КаталогВременныхФайлов() + ПараметрыВладельца.СсылкаНаЭд.УникальныйИдентификатор());
	
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПараметрыВладельца.ВладелецЭД, 
		"ИзвещениеОПолученииДокумента",
		"xml",
		ТекущаяДата(), ТекущаяДата(), 
		АдресВоВременномХранилище, 
		Неопределено,
		"ЭДПрисоединенныеФайлы"); 
		
    СтруктураИзвещения = Новый Структура("ВидЭД, Контрагент, ВладелецЭД, НаправлениеЭД, СтатусЭД, НомерЭД, ЭлектронныйДокументВладелец", Перечисления.ВидыЭД.Извещение, ПараметрыВладельца.ВладелецЭД.Контрагент, 
		ПараметрыВладельца.ВладелецЭД, Перечисления.НаправленияЭД.Исходящий, Перечисления.СтатусыЭД.Сформирован, ДобавленныйФайл.УникальныйИдентификатор(), ПараметрыВладельца.СсылкаНаЭД);
	ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураИзвещения);
	ОбновитьВерсиюЭД(ПараметрыВладельца.СсылкаНаЭД);
    Возврат ДобавленныйФайл;
	
КонецФункции

Функция ЭтоОтправкаПодтверждения(ПрисоединенныйФайл)
	Возврат ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
КонецФункции

// Обрабатывает входящий произвольный документ.
//
// Параметры:
//
// ПапкаДляРаспаковки - Строка, путь к папке, куда будет помещено содержимое произвольного электронного документа,
// ПараметрШифрования - Булево, признак шифрования произвольного электронного документа,
// МассивФайловДанных - Массив, список документов, приложенных к произвольному электронному документу,
// МенеджерКриптографии - Менеджер криптографии, предназначенный для дешифрования произвольного электронного документа, 
// МенеджерКриптографииПодписи - менеджер криптографии, предназначенный для проверки подписи вложений произвольного электронного документа, 
// ПакетЭДОбъект - объект ИБ, содержащий в себе произвольный электронный документ,
// СоответствиеФайлПараметры - соответствие, определяющее наличие вложений и подписей к ним в произвольном электронном документе.
//
Функция ОбработатьВходящийПроизвольныйЭД(ПапкаДляРаспаковки, ПараметрыШифрования, МассивФайловДанных, 
	МенеджерКриптографии, МенеджерКриптографииПодписи, ПакетЭДОбъект, СоответствиеФайлПараметры) Экспорт
	
	ДокументСообщение = Неопределено;
	
	Если МассивФайловДанных.Количество()>0 Тогда
		СтрокаСообщения = СоответствиеФайлПараметры.Получить("Текст");
		Попытка
			ДокументСообщение = Документы.ПроизвольныйЭД.СоздатьДокумент();
			ДокументСообщение.Направление = Перечисления.НаправленияЭД.Входящий;
			ДокументСообщение.Контрагент = ПакетЭДОбъект.Контрагент;
			ДокументСообщение.Организация = ПакетЭДОбъект.Организация;
			ДокументСообщение.Текст = СтрокаСообщения;
			ДокументСообщение.Прочитан = Ложь;
			ДокументСообщение.СтатусДокумента = Перечисления.СтатусыЭД.Получен;
			ДокументСообщение.Дата = ТекущаяДата();
			ДокументСообщение.Записать();
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'создание произвольного ЭД'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
    КонецЕсли;	
	
	Для Каждого ФайлПакета Из МассивФайловДанных Цикл
		
		СтруктураШифрования = НайтиСтруктуруВПараметрах(ФайлПакета, ПараметрыШифрования);
	
		Если СтруктураШифрования <> Неопределено И СтруктураШифрования.Зашифрован Тогда			
			МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураШифрования.ПарольДоступа;
			// Метод расшифровки генерирует исключение в случае ошибки
			Попытка
				РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ФайлПакета.ПолноеИмя);
			Исключение
				УдалитьФайлы(ПапкаДляРаспаковки);      
				ТекстСообщения = НСтр("ru = '%1. Проверьте настройки шифрования в Соглашении (подробности см. в Журнале регистрации).'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = 'Проверьте настройки шифрования в Соглашении'");
				ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'расшифровка ЭД'"), ТекстОшибки, ТекстСообщения);
				Возврат Неопределено;
			КонецПопытки;
		Иначе
			РасшифрованныеДвоичныеДанные = Новый ДвоичныеДанные(ФайлПакета.ПолноеИмя);
		КонецЕсли;
		
		//2.2+  
		// РасшифрованныеДвоичныеДанные - есть zip-архив с документом, необходимо его распаковать.
		
		ФайлРасшифрованногоАрхива = ПолучитьИмяВременногоФайла("zip");
		РасшифрованныеДвоичныеДанные.Записать(ФайлРасшифрованногоАрхива);
		ЗипЧтениеРаспакованного = Новый ЧтениеZipФайла(ФайлРасшифрованногоАрхива);
		КлючУникальности = Новый УникальныйИдентификатор;
		ПапкаДляРасшифровки = КаталогВременныхФайлов() + "РасшифрованныйАрхив\" + КлючУникальности + "\";
		УдалитьФайлы(ПапкаДляРасшифровки, "*");
		ЗипЧтениеРаспакованного.ИзвлечьВсе(ПапкаДляРасшифровки);
		ФайлыРасшифровки = НайтиФайлы(ПапкаДляРасшифровки, "*");
		Если ФайлыРасшифровки.Количество() <> 1 Тогда // что-то не так
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ФайлРасшифрованногоАрхива);
			УдалитьФайлы(ПапкаДляРасшифровки);		
			ВызватьИсключение ("Ошибка распаковки расшифрованного архива");
		КонецЕсли;
		
		РасшифрованныйФайлДанных = ФайлыРасшифровки[0];
		
		//2.3 Определить подпись к данному файлу, проверить подпись
		
		ПодписиФайлаДанных  = СоответствиеФайлПараметры.Получить(ФайлПакета.Имя).Подписи;	
		
		ДвоичныеДанныеФайлаДанных = Новый ДвоичныеДанные(РасшифрованныйФайлДанных.ПолноеИмя);
				
		// К произвольному сообщению присоединим все файлы и подписи
		
		ДвоичныеДанныеФайлаДанных = Новый ДвоичныеДанные(РасшифрованныйФайлДанных.ПолноеИмя);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаДанных);
		
		СтруктураФайла = ПолучитьСтруктуруФайла(РасшифрованныйФайлДанных.Имя);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ДокументСообщение.Ссылка, 
															СтруктураФайла.ИмяБезРасширения,
															СтруктураФайла.Расширение,
															ТекущаяДата(), ТекущаяДата(), 
															АдресВоВременномХранилище, 
															Неопределено, 
															"ЭДПрисоединенныеФайлы"); 
		
		ОбъектФайл = ДобавленныйФайл.ПолучитьОбъект();
		
		ФайлОтветственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(ПакетЭДОбъект.Контрагент, ПакетЭДОбъект.Соглашение);
		
		СтруктураДокумента =  Новый Структура("ВладелецЭД, Ответственный, Организация, Контрагент, ВидЭД, НомерЭД, НаправлениеЭД, Отправитель, Получатель, НомерВерсииЭД, СоглашениеЭД", 
		ДокументСообщение.Ссылка, ФайлОтветственный, ПакетЭДОбъект.Организация, ПакетЭДОбъект.Контрагент,Перечисления.ВидыЭД.ПроизвольныйЭД, СоответствиеФайлПараметры.Получить(ФайлПакета.Имя).НомерЭД, 
		Перечисления.НаправленияЭД.Входящий, ПакетЭДОбъект.Отправитель, ПакетЭДОбъект.Получатель, 0, ПакетЭДОбъект.Соглашение);
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураДокумента);	
		
		ПодписиФайлаДанных  = СоответствиеФайлПараметры.Получить(ФайлПакета.Имя).Подписи;	
		
		Если ТипЗнч(ПодписиФайлаДанных) = Тип("Массив") Тогда
			
			Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
				ПолноеИмяФайлаПодписи = ПапкаДляРаспаковки + "\" + ИмяФайлаПодписи;
				ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ПолноеИмяФайлаПодписи);
				
				СертификатыПодписи = МенеджерКриптографииПодписи.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи); // определим сертификаты криптографии из подписи
				Если СертификатыПодписи.Количество() <> 0 Тогда
					Сертификат = СертификатыПодписи[0];
					ЭлектроннаяПодпись.ЗанестиИнформациюОПодписи(ДобавленныйФайл, 
																		ДвоичныеДанныеПодписи,
																		Base64Строка(Сертификат.Отпечаток),
																		ТекущаяДата(),
																		"",
																		ИмяФайлаПодписи, 
																		ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
																		Сертификат.Выгрузить());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		УдалитьФайлы(ПапкаДляРасшифровки);		
	КонецЦикла;
	
	ПакетЭДОбъект.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
	ПакетЭДОбъект.Записать();
	
	Возврат ДокументСообщение.Ссылка;
	
КонецФункции

// Устанавливает признак того, что электронный документ был утвержден.
//
// Параметры:
//  ПрисоединенныйФайл - ссылка на электронный документ, который необходимо обработать.
//
Процедура УстановитьПризнакУтвержден(ПрисоединенныйФайл) Экспорт
	
	// проверим, все ли необходимые условия выполнены
	Если ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументГотовКУтверждению(ПрисоединенныйФайл) Тогда
		Попытка
			ФайлОбъект 							= ПрисоединенныйФайл.ПолучитьОбъект();
			ФайлОбъект.СтатусЭД 				= Перечисления.СтатусыЭД.Утвержден;
			ФайлОбъект.ДатаИзмененияСтатусаЭД 	= ТекущаяДата();
			ФайлОбъект.Изменил 					= ПараметрыСеанса.ТекущийПользователь;
			ФайлОбъект.Записать();
			ОбновитьВерсиюЭД(ФайлОбъект.Ссылка);
			ЭлектронныеДокументыПереопределяемый.НазначенСтатусУтвержден(ФайлОбъект.Ссылка);
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'утверждение ЭД'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает признак отозванности сертификата криптографии. 
//
// Параметры: 
// СертификатСсылка - СправочникСсылка.СертификатыЭЦП, исследуемый сертификат криптографии.
//
Функция СертификатОтозван(СертификатСсылка) Экспорт
	Возврат СертификатСсылка.Отозван;
КонецФункции

Функция ПолученыВсеПодтверждения(СсылкаНаЭД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПодтверждений = Новый Запрос;
	ЗапросПодтверждений.УстановитьПараметр("ВидЭД", Перечисления.ВидыЭД.Извещение);
	ЗапросПодтверждений.УстановитьПараметр("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
	ЗапросПодтверждений.УстановитьПараметр("ЭлектронныйДокументВладелец", СсылкаНаЭД.ЭлектронныйДокументВладелец);
	ЗапросПодтверждений.Текст = "ВЫБРАТЬ ПЕРВЫЕ 4
	                            |	ЭДПрисоединенныеФайлы.Ссылка
	                            |ИЗ
	                            |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	                            |ГДЕ
	                            |	ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
	                            |	И ЭДПрисоединенныеФайлы.СтатусЭД = &СтатусЭД
	                            |	И ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	                            |	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	Результат = ЗапросПодтверждений.Выполнить().Выгрузить();
	Возврат Результат.Количество() >= 3;
	
КонецФункции

Функция НужноПодписыватьИзвещение(СсылкаЭД)
	
	Возврат Ложь;
	
КонецФункции

// определяет, извещение отправляется по уведомлению об уточнении или по подтверждению.
Функция БылоПринятоУведомлениеОбУточнении()
	
	Возврат Ложь;
	
КонецФункции

// Определяет состояние версии электронного документа на основании статуса текущего электронного документа.
//
// Параметры: 
// СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция ОпределитьСостояниеВерсииПоСтатусуЭД(СсылкаНаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СсылкаНаЭД = Неопределено Тогда // нет ЭД
		Возврат Перечисления.СостоянияВерсийЭД.НеСформирован;
	КонецЕсли;
	
	РеквизитыЭД = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаЭД, "ВидЭД, НаправлениеЭД, ЭлектронныйДокументВладелец, СоглашениеЭД, СтатусЭД");
		
	Если РеквизитыЭД.ВидЭд = Перечисления.ВидыЭД.Извещение И РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.ЭлектронныйДокументВладелец,"НаправлениеЭД") = Перечисления.НаправленияЭД.Входящий Тогда
			
			Если Не ПолученыВсеПодтверждения(СсылкаНаЭД) Тогда
				Возврат  Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
			КонецЕсли;
			
			Возврат Перечисления.СостоянияВерсийЭД.Отработан;
						
		ИначеЕсли БылоПринятоУведомлениеОбУточнении() Тогда
			Возврат Перечисления.СостоянияВерсийЭД.Отработан;
		КонецЕсли;
		
		Возврат Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещение;
				
	КонецЕсли;
			
	ЗапросПоНастройкам = Новый Запрос;
	ЗапросПоНастройкам.УстановитьПараметр("СоглашениеЭД", 	РеквизитыЭД.СоглашениеЭД);
	ЗапросПоНастройкам.УстановитьПараметр("НаправлениеЭД", 	РеквизитыЭД.НаправлениеЭД);
	ЗапросПоНастройкам.УстановитьПараметр("ВидЭД", 			РеквизитыЭД.ВидЭД);
	
	ЗапросПоНастройкам.Текст = "ВЫБРАТЬ
	                           |	Соглашение.ИспользоватьПодпись,
	                           |	Соглашение.ИспользоватьКвитанции
	                           |ИЗ
	                           |	(ВЫБРАТЬ
	                           |		СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьПодпись,
	                           |		СоглашенияОбИспользованииЭДВходящиеДокументы.ОжидатьКвитанциюОДоставке КАК ИспользоватьКвитанции,
	                           |		ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий) КАК НаправлениеЭД
	                           |	ИЗ
	                           |		Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	                           |	ГДЕ
	                           |		СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
	                           |		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &СоглашениеЭД
	                           |	
	                           |	ОБЪЕДИНИТЬ ВСЕ
	                           |	
	                           |	ВЫБРАТЬ
	                           |		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП,
	                           |		СоглашенияОбИспользованииЭДИсходящиеДокументы.ОжидатьКвитанциюОДоставке,
	                           |		ВЫБОР
	                           |			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	                           |				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	                           |			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	                           |		КОНЕЦ
	                           |	ИЗ
	                           |		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	                           |	ГДЕ
	                           |		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	                           |		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД) КАК Соглашение
	                           |ГДЕ
	                           |	Соглашение.НаправлениеЭД = &НаправлениеЭД";
	Результат = ЗапросПоНастройкам.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗ = Результат.Выгрузить();
	Выборка = ТЗ[0];
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.СоглашениеЭД,"СпособОбменаЭД") = Перечисления.СпособыОбменаЭД.ЧерезСОС Тогда
		Если РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			Если РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован Тогда
				Возврат Перечисления.СостоянияВерсийЭД.НаУтверждении;
			ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
				Возврат Перечисления.СостоянияВерсийЭД.НаПодписи;
			ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
				Возврат Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка;
			ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				Возврат Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
			ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
				Возврат Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
			ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоИзвещение Тогда
				Возврат Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещение;
			ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоИзвещение Тогда
				Возврат Перечисления.СостоянияВерсийЭД.Отработан;
			ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоУведомление Тогда
				Возврат Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
			КонецЕсли;
		Иначе
			Если РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
				Возврат Перечисления.СостоянияВерсийЭД.НаУтверждении;
			ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
				Возврат Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
			ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоИзвещение Тогда
				Если НужноПодписыватьИзвещение(СсылкаНаЭД) Тогда
					Возврат Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
				ИначеЕсли Не ПолученыВсеПодтверждения(СсылкаНаЭД) Тогда
					Возврат Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
				КонецЕсли;
				Возврат Перечисления.СостоянияВерсийЭД.Отработан;
			ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
				Возврат Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;	
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
			Возврат Перечисления.СостоянияВерсийЭД.НаУтверждении;
		ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден 
		 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан Тогда
			Если Выборка.ИспользоватьПодпись Тогда 
				Возврат Перечисления.СостоянияВерсийЭД.НаПодписи;
			ИначеЕсли РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				Возврат Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка;
			КонецЕсли;
			Возврат Перечисления.СостоянияВерсийЭД.Отработан;
		ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан 
				ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
				ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			Возврат Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка;
		ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			Если Выборка.ИспользоватьКвитанции Тогда
				Возврат Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
			ИначеЕсли Выборка.ИспользоватьПодпись Тогда
				Возврат Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение; 
			КонецЕсли;
			Возврат Перечисления.СостоянияВерсийЭД.Отработан;
		ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
			Если Выборка.ИспользоватьКвитанции Тогда
				Возврат Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
			КонецЕсли;
			Возврат Перечисления.СостоянияВерсийЭД.Отработан;
		ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭд.Доставлен Тогда
			Если Выборка.ИспользоватьПодпись Тогда 
				Возврат Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
			КонецЕсли;
			Возврат Перечисления.СостоянияВерсийЭД.Отработан;
		ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ДоставленоПодтверждение Тогда
			Возврат Перечисления.СостоянияВерсийЭД.Отработан;
		ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение 
		 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолностьюПодписан Тогда
			Возврат Перечисления.СостоянияВерсийЭД.Отработан;
		ИначеЕсли РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
			Возврат Перечисления.СостоянияВерсийЭД.Отклонен; 
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Изменяет состояние версии электронного документа.
//
// Параметры: 
// ЭлектронныйДокумент - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - электронные документы, версии которых надо обновить.
// ПринудительнаяСменаСостоянияВерсии - Булево, признак смены версии, несмотря на условия.
//
Процедура ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии = Ложь)  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ЭлектронныйДокумент Цикл
			ОбновитьВерсиюЭД(ЭлементМассива);
		КонецЦикла;
	Иначе
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ЭлектронныйДокумент.ВладелецФайла);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()<>0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			
			Если ЭлектронныйДокумент = НоваяЗаписьНабора.ЭлектронныйДокумент 
			 ИЛИ ((ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий  
			 ИЛИ ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)
			 И НоваяЗаписьНабора.ЭлектронныйДокумент.Пустая())
			 ИЛИ ПринудительнаяСменаСостоянияВерсии Тогда

				НоваяЗаписьНабора.СостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент);
				
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса для электронных документов на подписи. Варианты - для рабочего места документов на подпись, или для показателя на рабочем столе (УТ 11)
//
// Параметры: 
// ДляРабочегоСтола - Булево, признак того, что текст запроса формируется для показателя на рабочем столе (УТ 11)
//
Функция ПолучитьТекстЗапросаЭлектронныхДокументовНаПодписи(ДляРабочегоСтола = Истина, СтруктураДопОтборов = Неопределено) Экспорт

	Если ДляРабочегоСтола Тогда
		ТекстПолейВыборки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	СУММА(ВложенныйЗапрос.ЗначениеПоказателя) КАК ЗначениеПоказателя,
							|	ВложенныйЗапрос.СертификатОтпечаток КАК Сертификат
							|ИЗ
							|	(ВЫБРАТЬ
							|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыНаПодпись.ЭлектронныйДокумент) КАК ЗначениеПоказателя,
							|		СертификатыНаПодпись.Сертификат.Отпечаток КАК СертификатОтпечаток";
		ТекстДопОтбора = ""; // состав исполнителей
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура") И СтруктураДопОтборов.Количество()>0 Тогда
			Если СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.Изменил В (&СоставИсполнителей)";
			КонецЕсли;
		КонецЕсли;
		ТекстЗавершенияЗапроса = ТекстДопОтбора + " СГРУППИРОВАТЬ ПО
													|		СертификатыНаПодпись.ЭлектронныйДокумент,
													|		СертификатыНаПодпись.Сертификат.Отпечаток) КАК ВложенныйЗапрос
													|
													|СГРУППИРОВАТЬ ПО
													|	ВложенныйЗапрос.СертификатОтпечаток";
	Иначе
		ТекстПолейВыборки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	СертификатыНаПодпись.СсылкаНаОбъект КАК Документ,
							|	СертификатыНаПодпись.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
							|	СертификатыНаПодпись.Сертификат КАК Сертификат,
							|	ЕСТЬNULL(СертификатыНаПодпись.СсылкаНаОбъект.СуммаДокумента, 0) КАК СуммаДокумента,
							|	СертификатыНаПодпись.ЭлектронныйДокумент.ДатаДокументаОтправителя КАК ДатаДокумента";
		
		ТекстПолейВыборки = СтрЗаменить(ТекстПолейВыборки, ".СуммаДокумента", "."+ЭлектронныеДокументыПереопределяемый.ОпределитьИмяРеквизитаСуммы());
		
		ТекстДопОтбора = ""; // состав исполнителей и быстрые отборы в форме документов на подпись
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура") И СтруктураДопОтборов.Количество()>0 Тогда
			Если СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.Изменил В (&СоставИсполнителей)";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("Контрагент") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.Контрагент = &Контрагент";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("ВидЭД") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = &ВидЭД";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("НаправлениеЭД") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.НаправлениеЭД = &НаправлениеЭД";
			КонецЕсли;
		КонецЕсли;
        ТекстЗавершенияЗапроса = ТекстДопОтбора + " УПОРЯДОЧИТЬ ПО СертификатыНаПодпись.СсылкаНаОбъект.Дата";
	КонецЕсли;
		
	ТекстЗапросаОснова ="
						|	ИЗ
						|		(ВЫБРАТЬ
						|			СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект,
						|			СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
						|			СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
						|			СертификатыЭЦПВидыЭД.Ссылка КАК Сертификат
						|		ИЗ
						|			РегистрСведений.СостоянияЭД КАК СостоянияЭД
						|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыЭД
						|				ПО СостоянияЭД.ЭлектронныйДокумент.ВидЭД = СертификатыЭЦПВидыЭД.ВидДокумента
						|					И (СостоянияЭД.ЭлектронныйДокумент.Организация = СертификатыЭЦПВидыЭД.Ссылка.Организация
						|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.Контрагент = СертификатыЭЦПВидыЭД.Ссылка.Организация)
						|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
						|							ПО СостоянияЭД.ЭлектронныйДокумент.СоглашениеЭД = СоглашенияОбИспользованииЭД.Ссылка
						|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭЦП
						|				ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлыЭЦП.Ссылка
						|		ГДЕ
						|			СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
						|			И СертификатыЭЦПВидыЭД.ИспользоватьДляПодписи
						|			И (НЕ СертификатыЭЦПВидыЭД.Ссылка.ПометкаУдаления)
						|			И (НЕ СертификатыЭЦПВидыЭД.Ссылка.Отозван)
						|			И (СертификатыЭЦПВидыЭД.Ссылка.Пользователь = &ТекущийПользователь
						|					ИЛИ СертификатыЭЦПВидыЭД.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
						|			И (НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления)
						|			И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)) КАК СертификатыНаПодпись
						|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|				СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект,
						|				СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
						|				СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
						|				СертификатыЭЦП.Ссылка КАК Сертификат
						|			ИЗ
						|				РегистрСведений.СостоянияЭД КАК СостоянияЭД
						|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭЦП
						|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
						|						ПО ЭДПрисоединенныеФайлыЭЦП.Отпечаток = СертификатыЭЦП.Отпечаток
						|					ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлыЭЦП.Ссылка
						|			ГДЕ
						|				СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)) КАК СпСертификатовИсключения
						|			ПО СертификатыНаПодпись.Сертификат = СпСертификатовИсключения.Сертификат
						|				И СертификатыНаПодпись.ЭлектронныйДокумент = СпСертификатовИсключения.ЭлектронныйДокумент
						|	ГДЕ
						|		СпСертификатовИсключения.Сертификат ЕСТЬ NULL 
						|		И СертификатыНаПодпись.ЭлектронныйДокумент.СтатусЭД В(&СтатусЭД)";		
		
		
	
	ТекстЗапроса = ТекстПолейВыборки + ТекстЗапросаОснова + ТекстЗавершенияЗапроса;
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Проверяет валидность подписей электронного документа и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеЦифровыеПодписи.
//
// Параметры: 
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
// ВыводитьСообщения - Булево, требуется ли выводить сообщения .
//
Процедура ОпределитьСтатусыПодписей (ЭД, ВыводитьСообщения = Ложь) Экспорт
	
   	Попытка
		НастройкиКриптографии = ЭлектроннаяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
	Исключение
		Если ВыводитьСообщения Тогда
			ТекстСообщения = НСтр("ru='Для проверки ЭЦП используйте компьютеры с настроенной криптографией!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
		Возврат;
	КонецПопытки;

	ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭД);
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища (ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
	ОбъектЭД = ЭД.ПолучитьОбъект();          
	
	Для каждого СтрокаЭЦП из ОбъектЭД.ЭлектронныеЦифровыеПодписи Цикл
		Попытка
			ДвоичныеДанныеЭЦП = СтрокаЭЦП.Подпись.Получить();
			ЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеДокумента, ДвоичныеДанныеЭЦП);
			СтрокаЭЦП.ДатаПроверкиПодписи = ТекущаяДата();
			СтрокаЭЦП.ПодписьВерна = Истина;
		Исключение
			СтрокаЭЦП.ДатаПроверкиПодписи = ТекущаяДата();
			СтрокаЭЦП.ПодписьВерна = Ложь;
			ОписаниеОшибки = НСтр("ru = 'Во время проверки валидности электронной цифровой подписи произошла ошибка.
								|Дополнительное описание:
								|%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка валидности электронной цифровой подписи'"), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		КонецПопытки;	
	КонецЦикла;
	
	ОбъектЭД.Записать();
	
КонецПроцедуры	

// Определяет, все ли установленные на ЭД подписи являются валидными
//
// Параметры: 
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция УстановленныеПодписиВалидны (ЭД) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &Ссылка
	               |	И (НЕ ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна)";
	Запрос.УстановитьПараметр("Ссылка", ЭД.Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество()>0 Тогда
		Текст = "Обработка электронного документа " + ЭД + Символы.ПС + " Документ не обработан, так как содержит невалидные подписи";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции //УстановленныеПодписиВалидны()

Функция ЕстьПравоОбработкиЭД() Экспорт
	Возврат (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ВыполнениеОбменаЭД"))
КонецФункции

Функция ИспользуетсяОбменЭД() Экспорт
	Возврат Константы.ИспользоватьОбменЭД.Получить();
КонецФункции

Функция ТаблицаПоЭД (СсылкаНаЭД)
	РеквизитыЭД = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаЭД,"Ссылка, СтатусЭД, ВидЭД, СоглашениеЭД, ВладелецФайла");
	ТЗВозврата = Новый ТаблицаЗначений;
	ТЗВозврата.Колонки.Добавить("СсылкаНаЭД");
	ТЗВозврата.Колонки.Добавить("СтатусЭД");
	ТЗВозврата.Колонки.Добавить("ВидЭД");
	ТЗВозврата.Колонки.Добавить("Соглашение");
	ТЗВозврата.Колонки.Добавить("ВладелецЭД");
	НовСтрока = ТЗВозврата.Добавить();
	НовСтрока.СсылкаНаЭД = РеквизитыЭД.Ссылка;
	НовСтрока.СтатусЭД = РеквизитыЭД.СтатусЭД;
	НовСтрока.ВидЭД = РеквизитыЭД.ВидЭД;
	НовСтрока.Соглашение = РеквизитыЭД.СоглашениеЭД;
	НовСтрока.ВладелецЭД = РеквизитыЭД.ВладелецФайла;
	Возврат ТЗВозврата;
КонецФункции
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры распаковки пакетов ЭД

// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры: 
// ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
// ПараметрыШифрования - Структура, настройки шифрования, применимые к данному пакету электронных документов.
//
Функция ВернутьМассивДвоичныхДанныхПакета(ПакетЭД, ПапкаДляРаспаковки = "", ПараметрыШифрования) Экспорт
	// -1 Так как данный процесс потенциально порождает много ошибок и выполняется в цикле, возьмем его целиком в попытку-исключение, 
	// чтобы при ошибке в одном контейнере, остальные могли корректно распаковаться
	
	ФайлАрхива = "";
	ФайлРасшифрованногоАрхива = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
		ПапкаДляРаспаковки = КаталогВременныхФайлов() + "РаспакованныйАрхив\"+ ПакетЭД.Ссылка.УникальныйИдентификатор()+"\";
	КонецЕсли;
	
	Попытка
		//0. Проверим, что соглашение, указанное в пакете, до сих пор действует.
		Соглашение = ПакетЭД.Соглашение;
		Если Соглашение.Пустая() ИЛИ Соглашение.СтатусСоглашения <> Перечисления.СтатусыСоглашенийЭД.Действует Тогда
			СообщениеИсключения = НСтр("ru = 'По данному пакету электронных документов нет действующего соглашения. Распаковка невозможна'");
			ВызватьИсключение(СообщениеИсключения);
			Возврат Неопределено;
		КонецЕсли;
		
		//1. Необходимо получить архив пакета из присоединенных файлов к документу
		ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
		Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) ИЛИ НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
			Возврат Неопределено;	
		КонецЕсли;
		
		//2. Для каждого из пакетов необходимо 
		//2.1 Определить файл с данными
		ПараметрыДанных = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ПолучитьИмяВременногоФайла("zip");
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		УдалитьФайлы(ПапкаДляРаспаковки, "*"); 
		ЗИПЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
		
		ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
		
		// файл с данными также лежит в виде .zip-архива
		// в одном пакете может лежать несколько файлов данных, соберем их в массив
		
		МассивФайловДанных = НайтиФайлы(ПапкаДляРаспаковки, "*.zip");
		МассивФайловИзвещений = НайтиФайлы(ПапкаДляРаспаковки, "*ИзвещениеОПолученииДокумента*.xml");
		//2.2 Расшифровать файл с данными	
		//2.2.1 Найдем файл с информацией о шифровании документа
		
		Для Каждого ФайлИнформации Из ФайлыАрхива Цикл
			Если Найти(ФайлИнформации.Имя, "packageDescription") > 0  Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//2.2.1.2 Для последующих действий определим соглашение 
		
		ТекстИнформации = Новый ТекстовыйДокумент;
		ТекстИнформации.Прочитать(ФайлИнформации.ПолноеИмя);
		НастройкиКриптографии = ЭлектроннаяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		
		Попытка
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			// менеджер криптографии генерирует ошибку при создании, если заданы неправильно настройки, либо
			// отсутствует ПО криптопровайдера
			// в этом случае менеджерам присваиваем "Неопределено"
			МенеджерКриптографии = Неопределено;
		КонецПопытки;
		
		СоответствиеФайлПараметры = ПолучитьСоответствиеФайлПараметры(ФайлИнформации);
		
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		
		МассивДобавленныхФайлов = Новый Массив;
		ЭтоПроизвольныйЭД = Ложь;
		
		Если Не СоответствиеФайлПараметры.Получить("Текст")=Неопределено Тогда
			ЭтоПроизвольныйЭД = Истина;	
		КонецЕсли;	
				  		
		Если ЭтоПроизвольныйЭД Тогда
			ОбработатьВходящийПроизвольныйЭД(ПапкаДляРаспаковки, ПараметрыШифрования, 
										МассивФайловДанных, МенеджерКриптографии, МенеджерКриптографии, ПакетЭДОбъект, СоответствиеФайлПараметры);
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ФайлАрхива);
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("СоответствиеФайлПараметры", СоответствиеФайлПараметры);
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанных", ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайловДанных));
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанныхИзвещений", ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайловИзвещений));
		Возврат СтруктураВозврата;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайлов)
	МассивВозврата = Новый Массив;
	Для Каждого ФайлДанных Из МассивФайлов Цикл
		СтруктураМассива = Новый Структура;
		СтруктураМассива.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ФайлДанных.ПолноеИмя));
		СтруктураМассива.Вставить("ИмяФайлаБезРасширения", ФайлДанных.ИмяБезРасширения);
		СтруктураМассива.Вставить("ИмяФайла", ФайлДанных.Имя);	
		МассивВозврата.Добавить(СтруктураМассива);
	КонецЦикла;
	Возврат МассивВозврата;
КонецФункции

// Возвращает соответствие с двоичными данными файлов и электронными цифровыми подписями к ним. 
//
// Параметры: 
// ИмяФайла - Строка, путь к файлу данных.
// РасшифрованныеДвоичныеДанные - ДвоичныеДанные, двоичные данные файла данных.
// СоответствиеФайлПараметры - Соответствие, связывает имена файлов данных и электронных цифровых подписей.
// ЭтоXMLФайл - Булево, признак того, что переданный файл является xml-файлом.
//
Функция ПолучитьСоответствиеДанныхПодписей(ИмяФайла, ПапкаДляРаспаковки, РасшифрованныеДвоичныеДанные, СоответствиеФайлПараметры, ЭтоXMLФайл = Ложь)  Экспорт
	
	МассивВозврата = Новый Массив;
	ФайлРасшифрованногоАрхива = ?(ЭтоXMLФайл, ПолучитьИмяВременногоФайла("xml"),ПолучитьИмяВременногоФайла("zip"));
	РасшифрованныеДвоичныеДанные.Записать(ФайлРасшифрованногоАрхива);
	РасшифрованныйФайлДанных = Новый Файл(ФайлРасшифрованногоАрхива);
	
	//2.3 Определить подпись к данному файлу, проверить подпись
	
	ПодписиФайлаДанных  = СоответствиеФайлПараметры.Получить(ИмяФайла).Подписи;	
	ДвоичныеДанныеФайлаДанных = Новый ДвоичныеДанные(РасшифрованныйФайлДанных.ПолноеИмя);
	
	Если ПодписиФайлаДанных = Неопределено ИЛИ ПодписиФайлаДанных.Количество() = 0 Тогда
		// если подписей нет, тогда пока продолжаем, но, возможно, что это ошибка
	Иначе
		// Надо проверить каждый файл с подписью
		Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
			ПолноеИмяФайлаПодписи = ПапкаДляРаспаковки + "\" + ИмяФайлаПодписи;
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ПолноеИмяФайлаПодписи);
			СтруктураВозврата = Новый Структура("ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи", ДвоичныеДанныеФайлаДанных, ДвоичныеДанныеПодписи);
			МассивВозврата.Добавить(СтруктураВозврата);
		КонецЦикла;
	КонецЕсли;		
	
	Возврат МассивВозврата;
	
КонецФункции

// Обрабатывает подтверждения документов, состоящие из электронно-цифровой подписи.
//
// Параметры:
// СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и файлов электронных цифровых подписей к ним.
// ПакетЭДСсылка - ДокументСсылка.ПакетЭД, ссылка на пакет электронных документов, содержащий подтверждение.
//
Функция ОбработатьПодтвержденияДокументовНаСервере(СоответствиеФайлПараметры, ПакетЭДСсылка, ПапкаДляРаспаковки) Экспорт
	
	МассивВозврата = Новый Массив;
	ПакетЭДОбъект = ПакетЭДСсылка.ПолучитьОбъект();
	Попытка  // попытаемся получить настройки криптографии. Если неудачно, значит средства криптографии не установлены на АРМ
		НастройкиКриптографии = ЭлектроннаяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		МенеджерКриптографии.АлгоритмПодписи = НастройкиКриптографии.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования = НастройкиКриптографии.АлгоритмШифрования;
	Исключение
		МенеджерКриптографии = Неопределено;
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'обработка подтверждений ЭД'"), ТекстОшибки, ТекстСообщения);
		Возврат МассивВозврата;
	КонецПопытки;
	
	// подтверждением считаем подпись без файла (в соответствии - ключ с файлом подписи)
	Для Каждого ЭлементСоответствие Из СоответствиеФайлПараметры Цикл
		Если Найти(ЭлементСоответствие.Ключ, ".p7s") > 0 Тогда
			НаправлениеИскомогоДокумента = Перечисления.НаправленияЭД.Исходящий;
			ФайлыПодписи = НайтиФайлы(ПапкаДляРаспаковки, ЭлементСоответствие.Ключ);
			Если ФайлыПодписи.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлыПодписи[0].ПолноеИмя);
			
			ЭлектронныйДокумент = ОпределитьДокументПоНомеруЭД(ЭлементСоответствие.Значение.НомерЭД, НаправлениеИскомогоДокумента);
			Если ЕстьТакаяПодпись(ДвоичныеДанныеПодписи , ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДанныхДокументов = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭлектронныйДокумент).СсылкаНаДвоичныеДанныеФайла;
			ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокументов);
					
			СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи); // определим сертификаты криптографии из подписи
			Если СертификатыПодписи.Количество() <> 0 Тогда
				Сертификат = СертификатыПодписи[0];
				ЭлектроннаяПодпись.ЗанестиИнформациюОПодписи(ЭлектронныйДокумент, 
																	ДвоичныеДанныеПодписи,
																	Base64Строка(Сертификат.Отпечаток),
																	ТекущаяДата(),
																	"",
																	ЭлементСоответствие.Ключ, 
																	ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
																	Сертификат.Выгрузить());
			КонецЕсли;
			
			ЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			ЭлектронныйДокументОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДата();
			ЭлектронныйДокументОбъект.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение;
			ЭлектронныйДокументОбъект.Записать();
			ОбновитьВерсиюЭД(ЭлектронныйДокумент);
			
			ОпределитьСтатусыПодписей(ЭлектронныйДокумент);
			
			СтрокаПакетаЭД = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			СтрокаПакетаЭД.ЭлектронныйДокумент = "Подтверждение";
			СтрокаПакетаЭД.ОбъектВладелец = ЭлектронныйДокумент.ВладелецФайла;
			МассивВозврата.Добавить(ЭлектронныйДокумент.ВладелецФайла);
		КонецЕсли;
	КонецЦикла;
	ПакетЭДОбъект.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
	ПакетЭДОбъект.Записать();
	Возврат МассивВозврата;

КонецФункции

// Функция, добавляющая данные по распакованному пакету электронных документов.
//
// Параметры: 
// ПакетЭД - ДокументСсылка.ПакетЭД, пакет электронных документов, по которому необходимо добавить данные. 
// СтруктураДанныхПодписей - Структура, связывающая двоичные данные файла данных и двоичные данные файла электронной цифровой подписи.
// СтруктураДанных - Структура, связывающая имена файлов и их двоичные данные.
// СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и имена файлов электронных цифровых подписей.
//
Функция ДобавитьДанныеПоПакетуЭД(
								ПакетЭД, 
								СтруктураДанныхПодписей, 
								СтруктураДанных, 
								СоответствиеФайлПараметры, 
								ПапкаДляРаспаковки, 
								ПапкаДляРасшифровки = "", 
								ФлагОшибки=Ложь,
								ЕстьКриптосредствоНаКлиенте = Неопределено
								) Экспорт
	
	ЭтоПроизвольныйЭД = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ПапкаДляРасшифровки) Тогда
		ПапкаДляРасшифровки = КаталогВременныхФайлов() + "РасшифрованныйАрхив\"+ПакетЭД.Ссылка.УникальныйИдентификатор()+"\";
	КонецЕсли;
	
	Если Найти(СтруктураДанных.ИмяФайла, "ИзвещениеОПолученииДокумента") > 0 Тогда
		ОбработатьИзвещениеОператора(ПакетЭД, СтруктураДанныхПодписей, СтруктураДанных, СоответствиеФайлПараметры);
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДобавленныхФайлов = Новый Массив;
	Попытка   // попытаемся получить настройки криптографии. Если неудачно, значит средства криптографии не установлены на АРМ
		НастройкиКриптографии = ЭлектроннаяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		МенеджерКриптографии.АлгоритмПодписи = НастройкиКриптографии.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования = НастройкиКриптографии.АлгоритмШифрования;
	Исключение
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	
	Если  НЕ (ЕстьКриптосредствоНаКлиенте=Истина) И СтруктураДанныхПодписей.Количество()>0 И МенеджерКриптографии = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка распаковки пакета: '") + Символы.ПС + ПакетЭД + Символы.ПС + 
		Нстр("ru = 'Пакет содержит электронные цифровые подписи. Для распаковки требуется наличие криптосредства на компьютере'");
		Если НЕ ЕстьКриптосредствоНаКлиенте = Неопределено Тогда //если распаковка на клиенте,тогда выводить сообщение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Распаковка пакета'"), УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		ФлагОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		Соглашение = ПакетЭД.Соглашение;
		// разберем файл данных
		ФайлДанных = СтруктураДанных.ДвоичныеДанные;
		ФайлРасшифрованногоАрхива = ПолучитьИмяВременногоФайла("zip");
		ФайлДанных.Записать(ФайлРасшифрованногоАрхива);
		
		РасшифрованныйФайлДанных = Новый Файл(ФайлРасшифрованногоАрхива);	
		
		ЧтениеЗИП = Новый ЧтениеZIPФайла(РасшифрованныйФайлДанных.ПолноеИмя);
		УдалитьФайлы(ПапкаДляРасшифровки, "*"); 
		ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРасшифровки);
		ФайлыРасшифровки = НайтиФайлы(ПапкаДляРасшифровки, "*.xml");
		Если ФайлыРасшифровки.Количество() = 0 Тогда
			СтруктураФайлаЭД = Новый Структура;
			СтруктураФайлаЭД.Вставить("ВидЭД", 			Перечисления.ВидыЭД.ПроизвольныйЭД);
			СтруктураФайлаЭД.Вставить("НаправлениеЭД", 	Перечисления.НаправленияЭД.Входящий);
			ЭтоПроизвольныйЭД = Истина;
		Иначе
			ФайлСДанными = ФайлыРасшифровки[0];
			Попытка
				СтруктураФайлаЭД = ЭлектронныеДокументыФорматОбмена.ПрочитатьШапкуФайлаCMLпоXDTO(ФайлСДанными.ПолноеИмя);	
				СтруктураФайлаЭД.Вставить("НаправлениеЭД",ОпределитьНаправление(СтруктураФайлаЭД)); 
				// если нужные параметры не заполнены, заполним данными из пакета ЭД
				Если НЕ СтруктураФайлаЭД.Свойство("Организация") 
					ИЛИ НЕ ЗначениеЗаполнено(СтруктураФайлаЭД.Организация) Тогда 
					СтруктураФайлаЭД.Вставить("Организация", ПакетЭДОбъект.Организация);
				КонецЕсли;
				Если НЕ СтруктураФайлаЭД.Свойство("Контрагент") 
					ИЛИ НЕ ЗначениеЗаполнено(СтруктураФайлаЭД.Контрагент) Тогда 
					СтруктураФайлаЭД.Вставить("Контрагент", ПакетЭДОбъект.Контрагент);
				КонецЕсли;
			Исключение
				СтруктураФайлаЭД = Новый Структура;
				СтруктураФайлаЭД.Вставить("ВидЭД",			Перечисления.ВидыЭД.ПроизвольныйЭД);
				СтруктураФайлаЭД.Вставить("НаправлениеЭД", 	Перечисления.НаправленияЭД.Входящий);
				ЭтоПроизвольныйЭД = Истина;
			КонецПопытки;
		КонецЕсли;
		
		Если Не ЭтоПроизвольныйЭД Тогда
			ОбъектВладелец = ?(СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров, ПакетЭД.Соглашение, ОпределитьОбъектПривязки(СтруктураФайлаЭД));
			СтруктураФайлаЭД.Вставить("Партнер",ПакетЭДОбъект.Соглашение.Партнер);
			Результат = ОпределитьНастройкиОбменаЭД(СтруктураФайлаЭД);
			Если Результат = Неопределено Тогда
				Текст = НСтр("ru = 'Не найдено действующее ""Соглашение об использовании электронных документов"" по параметрам:'");
					Для Каждого ТекПараметр Из СтруктураФайлаЭД Цикл
						Если ЗначениеЗаполнено(ТекПараметр.Значение) Тогда
							Текст = Текст+Символы.ПС+НСтр("ru = '<%1>: %2'");
							Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекПараметр.Ключ, ТекПараметр.Значение);
						КонецЕсли;
					КонецЦикла;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				ФлагОшибки = истина;
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;	
			
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ФайлСДанными.ПолноеИмя);
		Если ОбъектВладелец <> Неопределено Тогда
			СтруктураЭД = Неопределено;
			НовыйДокумент = ОбъектВладелец;
		Иначе
			СтруктураЭД = ЭлектронныеДокументыФорматОбмена.РазобратьФайлДанных(СтруктураПараметров);
			Если СтруктураЭД.Свойство("ВладелецЭД") Тогда
				НовыйДокумент = СтруктураЭД.ВладелецЭД;
			КонецЕсли;
		КонецЕсли;
		
		// если не нашли владельца электронного документа
		Если НЕ ЗначениеЗаполнено(НовыйДокумент) Тогда
			ФлагОшибки = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		//2.5 В присоединенные файлы к документу БД поместить файл с данными, подпись к нему, 
		//		указать его в табличной части транспортного пакета.
		
		//2.5.1 Поместим файл данных в присоединенные файлы к документу БД 
		
		ДобавленныйФайл = ОпределитьДокументПоНомеруЭД (СтруктураФайлаЭД.НомерЭД, СтруктураФайлаЭД.НаправлениеЭД);
		
		Если Не ЗначениеЗаполнено(ДобавленныйФайл) Тогда
		
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлДанных);
			ПодписиФайлаДанных  = СоответствиеФайлПараметры.Получить(ФайлСДанными.ИмяБезРасширения +".zip").Подписи;	
			СтруктураФайла = ПолучитьСтруктуруФайла(РасшифрованныйФайлДанных.Имя);
			
			ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(НовыйДокумент, 
																ФайлСДанными.ИмяБезРасширения,
																СтрЗаменить(РасшифрованныйФайлДанных.Расширение, ".", ""),
																ТекущаяДата(), ТекущаяДата(), 
																АдресВоВременномХранилище, 
																Неопределено, 
																"ЭДПрисоединенныеФайлы");
			
			Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(ПакетЭД.Контрагент, Соглашение);
			
			Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
				Если СтруктураЭД = Неопределено  Тогда
					// ВладелецЭД, ВидЭД, НаправлениеЭД, НомерЭД, Организация, Контрагент, НомерВерсииЭД, НомерДокументаОтправителя, 
					// ДатаДокументаОтправителя, Ответственный, Отправитель, Получатель
					СтруктураОбновленияПараметров = Новый Структура("ВладелецЭД, ВидЭД, НаправлениеЭД, НомерЭД, Организация, Контрагент,
					|  НомерВерсииЭД, НомерДокументаОтправителя, ДатаДокументаОтправителя, Ответственный, Отправитель, Получатель, СоглашениеЭД", 
					НовыйДокумент, СтруктураФайлаЭД.ВидЭД, Перечисления.НаправленияЭД.Входящий, СтруктураФайлаЭД.НомерЭД, 
					СтруктураФайлаЭД.Организация, СтруктураФайлаЭД.Контрагент, СтруктураФайлаЭД.НомерВерсииЭД, 
					СтруктураФайлаЭД.НомерДокументаОтправителя,	СтруктураФайлаЭД.ДатаДокументаОтправителя, Ответственный,
					Соглашение.ИдентификаторКонтрагента, Соглашение.ИдентификаторОрганизации, Соглашение);
					
					Если СтруктураОбновленияПараметров.Свойство("Организация") 
						И СтруктураОбновленияПараметров.Организация <> Соглашение.Организация Тогда
						// ошибка настройки соглашения
						ВызватьИсключение("Ошибка настройки соглашения: стороны ЭД отличны от указанных в соглашении!");
					КонецЕсли;
					Если СтруктураОбновленияПараметров.Свойство("Контрагент") 
						И СтруктураОбновленияПараметров.Контрагент <> Соглашение.Контрагент Тогда
						// ошибка настройки соглашения
						ВызватьИсключение("Ошибка настройки соглашения: стороны ЭД отличны от указанных в соглашении!");
					КонецЕсли;
					ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(НовыйДокумент, ДобавленныйФайл); // в момент привязки к владельцу, установим номер версии из ЭД
					ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбновленияПараметров);
				Иначе
					СтруктураЭД.Вставить("Отправитель", 	Соглашение.ИдентификаторКонтрагента);
					СтруктураЭД.Вставить("Получатель",  	Соглашение.ИдентификаторОрганизации);
					СтруктураЭД.Вставить("Ответственный", 	Ответственный);
					СтруктураЭД.Вставить("СоглашениеЭД", 	Соглашение);
					Если СтруктураЭД.Свойство("Организация") И ЗначениеЗаполнено(СтруктураЭД.Организация) Тогда
						Если СтруктураЭД.Организация <> Соглашение.Организация Тогда
							// ошибка настройки соглашения
							ВызватьИсключение("Ошибка настройки соглашения: стороны ЭД отличны от указанных в соглашении!");
						КонецЕсли;
					Иначе // заполним данными из соглашения
						СтруктураЭД.Вставить("Организация",  Соглашение.Организация);
					КонецЕсли;
					Если СтруктураЭД.Свойство("Контрагент") И ЗначениеЗаполнено(СтруктураЭД.Контрагент) Тогда
						Если СтруктураЭД.Контрагент <> Соглашение.Контрагент Тогда
							// ошибка настройки соглашения
							ВызватьИсключение("Ошибка настройки соглашения: стороны ЭД отличны от указанных в соглашении!");
						КонецЕсли;
					Иначе // заполним данными из соглашения
						СтруктураЭД.Вставить("Контрагент",  Соглашение.Контрагент);
					КонецЕсли;
					ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(НовыйДокумент, ДобавленныйФайл); // в момент загрузки, установим номер версии из ЭД
					ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
				КонецЕсли;
			КонецЕсли;
			
			// 2.5.2 Добавим информацию о подписях
			
			Если ЗначениеЗаполнено(ПодписиФайлаДанных) И (МенеджерКриптографии <> Неопределено) Тогда
				Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
					ПолноеИмяФайлаПодписи = ПапкаДляРаспаковки + "\" + ИмяФайлаПодписи;
					ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ПолноеИмяФайлаПодписи);
					
					СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи); // определим сертификаты криптографии из подписи
					Если СертификатыПодписи.Количество() <> 0 Тогда
						Сертификат = СертификатыПодписи[0];
						ЭлектроннаяПодпись.ЗанестиИнформациюОПодписи(ДобавленныйФайл, 
																				ДвоичныеДанныеПодписи,
																				Base64Строка(Сертификат.Отпечаток),
																				ТекущаяДата(),
																				"",
																				ИмяФайлаПодписи, 
																				ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
																				Сертификат.Выгрузить());
					КонецЕсли;
				КонецЦикла;
				ОпределитьСтатусыПодписей(ДобавленныйФайл);
			КонецЕсли;
			МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);   
		КонецЕсли;
		
		УдалитьФайлы(ПапкаДляРасшифровки);			
		
		// 2.5.3 Добавим информацию о присоединенном файле в документ пакета электронных документов
		Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
			НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
			НовыйЭлектронныйДокумент.ОбъектВладелец = ДобавленныйФайл.ВладелецФайла;
		КонецЦикла;
		
		Если МенеджерКриптографии <> Неопределено Тогда
			ПодтвержденныеДокументы = ОбработатьПодтвержденияДокументов(ПапкаДляРаспаковки, СоответствиеФайлПараметры, ПакетЭДОбъект);
			Для Каждого ПодтвержденныйДокумент Из ПодтвержденныеДокументы Цикл
				МассивДобавленныхФайлов.Добавить("Подтверждение "+ Строка(ПодтвержденныйДокумент));
			КонецЦикла;
		КонецЕсли;
		
		ПакетЭДОбъект.Записать();
		
		Возврат МассивДобавленныхФайлов;
	Исключение
		УдалитьФайлы(ФайлРасшифрованногоАрхива);
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ПапкаДляРасшифровки);
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ОбработатьИзвещениеОператора(ПакетЭД, СтруктураДанныхПодписей, СтруктураДанных, СоответствиеФайлПараметры)
	// создадим файл извещения на диске
	ДвоичныеДанныеИзвещения = СтруктураДанных.ДвоичныеДанные;	
	ИмяФайлаЧтенияХМЛ = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеИзвещения.Записать(ИмяФайлаЧтенияХМЛ);
	ФайлЧтенияХМЛ = Новый Файл(ИмяФайлаЧтенияХМЛ);
	
	// определим документ, по которому идет извещение
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайлаЧтенияХМЛ);
	
	ИдентификаторЭлектронногоДокумента = "";
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ИДПодтверждения" Тогда
			ЧтениеХМЛ.Прочитать();
			ИдентификаторЭлектронногоДокумента = ЧтениеХМЛ.Значение;
		КонецЕсли;			
	КонецЦикла;
	
	ЧтениеХМЛ.Закрыть();
	
	Если Не ПустаяСтрока(ИдентификаторЭлектронногоДокумента) Тогда
		СтруктураВладельцев = ДобавитьПодтверждениеКЭлектроннымДокументамРодителя(ИмяФайлаЧтенияХМЛ, ИдентификаторЭлектронногоДокумента, Перечисления.НаправленияЭД.Исходящий, Истина);

	КонецЕсли;
	// присоединим извещение к данному документу, изменив его статус
	УдалитьФайлы(ИмяФайлаЧтенияХМЛ);
	// удалим файл извещения с диска
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ПО ПОЛУЧЕНИЮ АКТУАЛЬНОГО ПЕРЕЧНЯ СЕРТИФИКАТОВ ДЛЯ ПОДПИСИ ЭД

Функция ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОтпечатков = Новый Массив;
	Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
		МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
	КонецЦикла;
	
	ЗапросПоСертификатам = Новый Запрос;    
	ЗапросПоСертификатам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                             |	СертификатыЭЦП.Ссылка,
	                             |	СертификатыЭЦП.Отпечаток
	                             |ИЗ
	                             |	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	                             |ГДЕ
	                             |	СертификатыЭЦП.Отозван = ЛОЖЬ
	                             |	И (СертификатыЭЦП.Пользователь = &ТекущийПользователь
	                             |			ИЛИ СертификатыЭЦП.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	                             |	И СертификатыЭЦП.ПометкаУдаления = ЛОЖЬ
	                             |	И СертификатыЭЦП.Отпечаток В(&МассивОтпечатков)";
	ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);    
	ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков", МассивОтпечатков);    
	
	Возврат ЗапросПоСертификатам.Выполнить().Выгрузить();							 
	
КонецФункции

Функция ТаблицаДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов) Экспорт
	
	Возврат ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов);							 
	
КонецФункции

Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов) Экспорт
	
	МассивСтруктурДоступныхСертификатов = Новый Массив;
	
	ТаблицаДоступныхСертификатов = ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов);
	Для Каждого ТекЭл Из МассивСтруктурСертификатов Цикл
		Если ТаблицаДоступныхСертификатов.Найти(ТекЭл.Отпечаток, "Отпечаток") = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		МассивСтруктурДоступныхСертификатов.Добавить(ТекЭл);
	КонецЦикла;
	
	Возврат МассивСтруктурДоступныхСертификатов;							 
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ПО ОБРАБОТКЕ ОШИБОК

Процедура ЗаписатьОшибкуПоЭД(ВидОперации, ТекстСообщения)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции: '") + ВидОперации + ".", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	
КонецПроцедуры
 
Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "") Экспорт
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ЗаписатьОшибкуПоЭД(ВидОперации, ПодробныйТекстОшибки);
	
КонецПроцедуры
 
//  Процедура вызывается из клиентского модуля, удаляет папку, 
// созданную на сервере и переданную на клиент в качестве параметра.
// Параметры: 
// Папка - строка, путь к временной папке на сервере. 
//
Процедура УдалитьПапкуНаСервере(Папка) Экспорт
	Если ЗначениеЗаполнено(Папка) Тогда
		Файл = Новый Файл(Папка);
		Если Файл.Существует() Тогда
			УдалитьФайлы(Папка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПерезаполнитьДокументыИБПоЭД(МассивСсылокНаВладельцев, СоответствиеВладельцевИЭД = Неопределено) Экспорт
	
	КолОбработанных = 0;
	Если НЕ ЗначениеЗаполнено(СоответствиеВладельцевИЭД) Тогда 
		СоответствиеВладельцевИЭД = ПолучитьСсылкиЭДПоВладельцам(МассивСсылокНаВладельцев);
	КонецЕсли;
	Для Каждого ТекЭл Из МассивСсылокНаВладельцев Цикл
		СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
		Попытка
			Результат = ЗаполнитьДокументИБПоЭД(ТекЭл, СсылкаНаЭД);
			КолОбработанных = КолОбработанных + ?(Результат, 1, 0);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат КолОбработанных;
	
КонецФункции

Функция ЗаполнитьДокументИБПоЭД(СсылкаНаВладельца, СсылкаНаЭД)
	
	ИмяФайлаДанных = ПолучитьФайлДанныхЭДНаСервере(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(ИмяФайлаДанных) Тогда 
		Возврат Ложь;
	КонецЕсли;
	ДанныеНаДиске = Новый Файл(ИмяФайлаДанных);
	Если НЕ ДанныеНаДиске.Существует() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл данных не обнаружен: %1'"), ИмяФайлаДанных);
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВладелецЭД",		СсылкаНаВладельца);	
	СтруктураПараметров.Вставить("ПолноеИмяФайла", 	ИмяФайлаДанных);
			
	СтруктураЭД = ЭлектронныеДокументыФорматОбмена.РазобратьФайлДанных(СтруктураПараметров);
	Возврат СтруктураЭД.Загружен;
	
КонецФункции

Функция ПолучитьФайлДанныхЭДНаСервере(СсылкаНаЭД)
	
	ИмяФайлаДанных = "";
	ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(СсылкаНаЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла") 
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ПолучитьИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		КонецЕсли;
		
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить данные файла электронного документа. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если Найти(ДопИнформацияПоЭД.Расширение, "zip")>0 Тогда // формат zip 
			
			ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
			ПапкаДляРаспаковки = КаталогВременныхФайлов() + СсылкаНаЭД.УникальныйИдентификатор() + "\";
			
			Если ПапкаДляРаспаковки = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось  получить данные файла электронного документа. Проверьте настройку рабочего каталога'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат Неопределено;
			КонецЕсли;
			УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяФайлаДанных;
	
КонецФункции

Функция ПолучитьСсылкиЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаДанных = ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев);
	Соответствие = Новый Соответствие;
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		Соответствие.Вставить(ТекСтрока.ВладелецЭД, ТекСтрока.СсылкаНаЭД);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции
