Процедура ВыполнитьЗагрузкуКурсовВалют() Экспорт
	
	Перем HTTP;
	
	Если НЕ Константы.абс_ИспользоватьФоновоеЗаданиеЗагрузкиКурсовВалют.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	ЗаписьЖурналаРегистрации("Загрузка курсов валют", УровеньЖурналаРегистрации.Информация,,,"Загрузка курсов валют начата.");
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	НачДата = Дата(2012, 1, 1);
	
	КонДата = ТекущаяДата();
	
	// Найдем минимальную дату по которой есть курс - начиная с этой даты будем загружать курсы
	
	ЗапросПоКурсам = Новый Запрос(
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Валюта,
	|	МИНИМУМ(ЕСТЬNULL(КурсыВалютСрезПоследних.Период, &ПустаяДата)) КАК Период
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО (КурсыВалютСрезПоследних.Валюта = Валюты.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Валюты.Ссылка");
	
	ЗапросПоКурсам.УстановитьПараметр("ПустаяДата", НачДата);
	
	ВыборкаПоКурсам = ЗапросПоКурсам.Выполнить().Выбрать();
	
	РегистрКурсыВалют = РегистрыСведений.КурсыВалют;
	ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();

	Текст = Новый ТекстовыйДокумент();

	ИмяФайла = "Curses.txt";
	
	СерверИсточник = "cbrates.rbc.ru";
	//ОбработкаПолученияФайлов = Обработки.ПолучениеФайловИзИнтернета.Создать();

	Адрес1 = "tsv/cb/";  // в интервале
	Адрес2 = "tsv/";     // по 1 дате
	Если НачДата = КонДата Тогда  // по 1 дате
		Адрес = Адрес2;
		ТМП   = "/"+Формат(Год(КонДата),"ЧРГ=; ЧГ=0")+"/"+Формат(Месяц(КонДата),"ЧЦ=2;ЧДЦ=0;ЧВН=")+"/"+Формат(День(КонДата),"ЧЦ=2;ЧДЦ=0;ЧВН=");
	Иначе    // в интервале
		Адрес = Адрес1;
		ТМП   = "";
	КонецЕсли;

	ВремКаталог = КаталогВременныхФайлов() + "tempKurs";
	СоздатьКаталог(ВремКаталог);
	УдалитьФайлы(ВремКаталог,"*.*");
	
	СтруктураПараметровПрокси = ПолучитьСтруктуруПараметровПрокси();
	
	Пока ВыборкапоКурсам.Следующий() Цикл
		
		Если ВыборкаПоКурсам.Валюта = ВалютаРеглУчета Тогда
			Продолжить;
		КонецЕсли;
		
		ОшибкаЗагрузки = Ложь;
		ТекстОшибкиЗагрузки = "";
		
		НачДата = ВыборкаПоКурсам.Период;
		
		Если НачДата = КонДата Тогда
			Продолжить;
		КонецЕсли;
		
		ТекВалюта = ВыборкаПоКурсам.Валюта;
		
		ЗаписьЖурналаРегистрации("Загрузка курсов валют", УровеньЖурналаРегистрации.Информация,,,"Загрузка курсов валюты " +  СокрЛП(ТекВалюта.Наименование) + " (код " + ТекВалюта.Код + ") за период с " + Формат(НачДата, "ДФ=dd.MM.yyyy") + " по " + Формат(КонДата, "ДФ=dd.MM.yyyy") + ".");			
		
		Стр = "";
		ИмяВходящегоФайла = "" + ВремКаталог + "\" + ИмяФайла;
		
		//Бреев
		Если ТекВалюта.Наименование = "CU" тогда
			ВалютаЗамены = Справочники.Валюты.НайтиПоНаименованию("USD");
			КодЗамены = ?(ЗначениеЗаполнено(ВалютаЗамены), ВалютаЗамены.Код, ТекВалюта.Код);
			СтрокаПараметраПолучения = Адрес + Прав(КодЗамены,3) + ТМП + ".tsv";
		Иначеесли ТекВалюта.Наименование = "UEE" тогда
			ВалютаЗамены = Справочники.Валюты.НайтиПоНаименованию("EUR");
			КодЗамены = ?(ЗначениеЗаполнено(ВалютаЗамены), ВалютаЗамены.Код, ТекВалюта.Код);
			СтрокаПараметраПолучения = Адрес + Прав(КодЗамены,3) + ТМП + ".tsv";
		Иначе
			СтрокаПараметраПолучения = Адрес + Прав(ТекВалюта.Код,3) + ТМП + ".tsv";
		КонецЕсли;
		//Бреев		
		
		Если ЗапроситьФайлыССервера(СерверИсточник, СтрокаПараметраПолучения, ИмяВходящегоФайла, HTTP, СтруктураПараметровПрокси.ИспользоватьПрокси, СтруктураПараметровПрокси) <> Истина Тогда
			ЗаписьЖурналаРегистрации("Загрузка курсов валют", УровеньЖурналаРегистрации.Ошибка,,,"Не удалось получить ресурс для валюты " + СокрЛП(ТекВалюта.Наименование) + " (код " + ТекВалюта.Код + "). Курс для валюты не загружен.");			
			Продолжить;
		КонецЕсли; 

		ВходящийФайл = Новый Файл(ИмяВходящегоФайла);
		Если НЕ ВходящийФайл.Существует() Тогда
			ЗаписьЖурналаРегистрации("Загрузка курсов валют", УровеньЖурналаРегистрации.Ошибка,,,"Не удалось получить ресурс для валюты " + СокрЛП(ТекВалюта.Наименование) + " (код " + ТекВалюта.Код + "). Курс для валюты не загружен.");			
			Продолжить;
		КонецЕсли;	

		Текст.Прочитать(ИмяВходящегоФайла,КодировкаТекста.ANSI);
		
		КолСтрок = Текст.КоличествоСтрок();
		Для Инд = 1 По КолСтрок Цикл
				
			Стр = Текст.ПолучитьСтроку(Инд);
			Если (Стр = "") ИЛИ (Найти(Стр,Символы.Таб) = 0) Тогда
			   Продолжить;
			КонецЕсли;
			Если НачДата = КонДата Тогда  
			   ДатаКурса = КонДата;
			Иначе 
			   ДатаКурсаСтр = ВыделитьПодСтроку(Стр);
			   ДатаКурса    = Дата(Лев(ДатаКурсаСтр,4),Сред(ДатаКурсаСтр,5,2),Сред(ДатаКурсаСтр,7,2));
			КонецЕсли;
			Кратность = Число(ВыделитьПодСтроку(Стр));
			Курс      = Число(ВыделитьПодСтроку(Стр));

			Если ДатаКурса > КонДата Тогда
			   Прервать;
			КонецЕсли;

			Если ДатаКурса < НачДата Тогда 
			   Продолжить;
			КонецЕсли;

            ЗаписьКурсовВалют.Валюта = ТекВалюта;
			ЗаписьКурсовВалют.Период = ДатаКурса;
			ЗаписьКурсовВалют.Прочитать();
			ЗаписьКурсовВалют.Валюта    = ТекВалюта;
			ЗаписьКурсовВалют.Период    = ДатаКурса;
			ЗаписьКурсовВалют.Курс      = Курс;
			ЗаписьКурсовВалют.Кратность = Кратность;
			ЗаписьКурсовВалют.Записать();
			
			//АБС Заявка 2868
			Если СокрЛП(ТекВалюта.Код) = "840" Тогда
				УсловныйДоллар = Справочники.Валюты.НайтиПоКоду("36");
				Если ЗначениеЗаполнено(УсловныйДоллар) Тогда
					НоваяЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
					НоваяЗаписьКурсовВалют.Валюта = УсловныйДоллар;
					НоваяЗаписьКурсовВалют.Период = ДатаКурса;
					НоваяЗаписьКурсовВалют.Прочитать();
					НоваяЗаписьКурсовВалют.Валюта    = УсловныйДоллар;
					НоваяЗаписьКурсовВалют.Период    = ДатаКурса;
					НоваяЗаписьКурсовВалют.Курс      = Курс;
					НоваяЗаписьКурсовВалют.Кратность = Кратность;
					НоваяЗаписьКурсовВалют.Записать();

				КонецЕсли;
			ИначеЕсли СокрЛП(ТекВалюта.Код) = "978" Тогда 	
				УсловныйЕвро = Справочники.Валюты.НайтиПоКоду("124");
				Если ЗначениеЗаполнено(УсловныйЕвро) Тогда
					НоваяЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
					НоваяЗаписьКурсовВалют.Валюта = УсловныйЕвро;
					НоваяЗаписьКурсовВалют.Период = ДатаКурса;
					НоваяЗаписьКурсовВалют.Прочитать();
					НоваяЗаписьКурсовВалют.Валюта    = УсловныйЕвро;
					НоваяЗаписьКурсовВалют.Период    = ДатаКурса;
					НоваяЗаписьКурсовВалют.Курс      = Курс;
					НоваяЗаписьКурсовВалют.Кратность = Кратность;
					НоваяЗаписьКурсовВалют.Записать();

				КонецЕсли;

			КонецЕсли;
			
			//АБС Заявка 2868
		
		КонецЦикла;
	КонецЦикла;
	
	УдалитьФайлы(ВремКаталог,"*.*");
	
	ЗаписьЖурналаРегистрации("Загрузка курсов валют", УровеньЖурналаРегистрации.Информация,,,"Загрузка курсов валют завершена.");
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуКурсовВалютНаСледующийДень() Экспорт
	
	Перем HTTP;
		
	Если НЕ Константы.абс_ИспользоватьФоновоеЗаданиеЗагрузкиКурсовВалют.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	ЗаписьЖурналаРегистрации("Загрузка курсов валют на следующий день", УровеньЖурналаРегистрации.Информация,,,"Загрузка курсов валют начата.");
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	НачДата = Дата(2012, 1, 1);
	
	ОдинДень=60*60*24;
		
	КонДата = ТекущаяДата()+ОдинДень;
	
	// Найдем минимальную дату по которой есть курс - начиная с этой даты будем загружать курсы
	
	ЗапросПоКурсам = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Валюты.Ссылка КАК Валюта,
	|	МИНИМУМ(ЕСТЬNULL(КурсыВалютСрезПоследних.Период, &ПустаяДата)) КАК Период
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО (КурсыВалютСрезПоследних.Валюта = Валюты.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Валюты.Ссылка");
	
	ЗапросПоКурсам.УстановитьПараметр("ПустаяДата", НачДата);
	
	ВыборкаПоКурсам = ЗапросПоКурсам.Выполнить().Выбрать();
	
	РегистрКурсыВалют = РегистрыСведений.КурсыВалют;
	ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();

	Текст = Новый ТекстовыйДокумент();

	ИмяФайла = "Curses.txt";
	
	СерверИсточник = "cbrates.rbc.ru";
	//ОбработкаПолученияФайлов = Обработки.ПолучениеФайловИзИнтернета.Создать();

	Адрес1 = "tsv/cb/";  // в интервале
	Адрес2 = "tsv/";     // по 1 дате
	Если НачДата = КонДата Тогда  // по 1 дате
		Адрес = Адрес2;
		ТМП   = "/"+Формат(Год(КонДата),"ЧРГ=; ЧГ=0")+"/"+Формат(Месяц(КонДата),"ЧЦ=2;ЧДЦ=0;ЧВН=")+"/"+Формат(День(КонДата),"ЧЦ=2;ЧДЦ=0;ЧВН=");
	Иначе    // в интервале
		Адрес = Адрес1;
		ТМП   = "";
	КонецЕсли;

	ВремКаталог = КаталогВременныхФайлов() + "tempKurs";
	СоздатьКаталог(ВремКаталог);
	УдалитьФайлы(ВремКаталог,"*.*");
	
	СтруктураПараметровПрокси = ПолучитьСтруктуруПараметровПрокси();
	
	Пока ВыборкапоКурсам.Следующий() Цикл
		
		Если ВыборкаПоКурсам.Валюта = ВалютаРеглУчета Тогда
			Продолжить;
		КонецЕсли;
		
		ОшибкаЗагрузки = Ложь;
		ТекстОшибкиЗагрузки = "";
		
		НачДата = ВыборкаПоКурсам.Период;
		
		Если НачДата = КонДата Тогда
			Продолжить;
		КонецЕсли;
		
		ТекВалюта = ВыборкаПоКурсам.Валюта;
		
		ЗаписьЖурналаРегистрации("Загрузка курсов валют", УровеньЖурналаРегистрации.Информация,,,"Загрузка курсов валюты " +  СокрЛП(ТекВалюта.Наименование) + " (код " + ТекВалюта.Код + ") за период с " + Формат(НачДата, "ДФ=dd.MM.yyyy") + " по " + Формат(КонДата, "ДФ=dd.MM.yyyy") + ".");			
		
		Стр = "";
		ИмяВходящегоФайла = "" + ВремКаталог + "\" + ИмяФайла;
		
		//Бреев
		Если ТекВалюта.Наименование = "CU" тогда
			ВалютаЗамены = Справочники.Валюты.НайтиПоНаименованию("USD");
			КодЗамены = ?(ЗначениеЗаполнено(ВалютаЗамены), ВалютаЗамены.Код, ТекВалюта.Код);
			СтрокаПараметраПолучения = Адрес + Прав(КодЗамены,3) + ТМП + ".tsv";
		Иначеесли ТекВалюта.Наименование = "UEE" тогда
			ВалютаЗамены = Справочники.Валюты.НайтиПоНаименованию("EUR");
			КодЗамены = ?(ЗначениеЗаполнено(ВалютаЗамены), ВалютаЗамены.Код, ТекВалюта.Код);
			СтрокаПараметраПолучения = Адрес + Прав(КодЗамены,3) + ТМП + ".tsv";
		Иначе
			СтрокаПараметраПолучения = Адрес + Прав(ТекВалюта.Код,3) + ТМП + ".tsv";
		КонецЕсли;
		//Бреев		
		
		Если ЗапроситьФайлыССервера(СерверИсточник, СтрокаПараметраПолучения, ИмяВходящегоФайла, HTTP, СтруктураПараметровПрокси.ИспользоватьПрокси, СтруктураПараметровПрокси) <> Истина Тогда
			ЗаписьЖурналаРегистрации("Загрузка курсов валют", УровеньЖурналаРегистрации.Ошибка,,,"Не удалось получить ресурс для валюты " + СокрЛП(ТекВалюта.Наименование) + " (код " + ТекВалюта.Код + "). Курс для валюты не загружен.");			
			Продолжить;
		КонецЕсли; 

		ВходящийФайл = Новый Файл(ИмяВходящегоФайла);
		Если НЕ ВходящийФайл.Существует() Тогда
			ЗаписьЖурналаРегистрации("Загрузка курсов валют", УровеньЖурналаРегистрации.Ошибка,,,"Не удалось получить ресурс для валюты " + СокрЛП(ТекВалюта.Наименование) + " (код " + ТекВалюта.Код + "). Курс для валюты не загружен.");			
			Продолжить;
		КонецЕсли;	

		Текст.Прочитать(ИмяВходящегоФайла,КодировкаТекста.ANSI);
		
		КолСтрок = Текст.КоличествоСтрок();
		Для Инд = 1 По КолСтрок Цикл
				
			Стр = Текст.ПолучитьСтроку(Инд);
			Если (Стр = "") ИЛИ (Найти(Стр,Символы.Таб) = 0) Тогда
			   Продолжить;
			КонецЕсли;
			Если НачДата = КонДата Тогда  
			   ДатаКурса = КонДата;
			Иначе 
			   ДатаКурсаСтр = ВыделитьПодСтроку(Стр);
			   ДатаКурса    = Дата(Лев(ДатаКурсаСтр,4),Сред(ДатаКурсаСтр,5,2),Сред(ДатаКурсаСтр,7,2));
			КонецЕсли;
			Кратность = Число(ВыделитьПодСтроку(Стр));
			Курс      = Число(ВыделитьПодСтроку(Стр));

			Если ДатаКурса > КонДата Тогда
			   Прервать;
			КонецЕсли;

			Если ДатаКурса < НачДата Тогда 
			   Продолжить;
			КонецЕсли;

            ЗаписьКурсовВалют.Валюта = ТекВалюта;
			ЗаписьКурсовВалют.Период = ДатаКурса;
			ЗаписьКурсовВалют.Прочитать();
			ЗаписьКурсовВалют.Валюта    = ТекВалюта;
			ЗаписьКурсовВалют.Период    = ДатаКурса;
			ЗаписьКурсовВалют.Курс      = Курс;
			ЗаписьКурсовВалют.Кратность = Кратность;
			ЗаписьКурсовВалют.Записать();
			
			//АБС Заявка 2868
			Если СокрЛП(ТекВалюта.Код) = "840" Тогда
				УсловныйДоллар = Справочники.Валюты.НайтиПоКоду("36");
				Если ЗначениеЗаполнено(УсловныйДоллар) Тогда
					НоваяЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
					НоваяЗаписьКурсовВалют.Валюта = УсловныйДоллар;
					НоваяЗаписьКурсовВалют.Период = ДатаКурса;
					НоваяЗаписьКурсовВалют.Прочитать();
					НоваяЗаписьКурсовВалют.Валюта    = УсловныйДоллар;
					НоваяЗаписьКурсовВалют.Период    = ДатаКурса;
					НоваяЗаписьКурсовВалют.Курс      = Курс;
					НоваяЗаписьКурсовВалют.Кратность = Кратность;
					НоваяЗаписьКурсовВалют.Записать();

				КонецЕсли;
			ИначеЕсли СокрЛП(ТекВалюта.Код) = "978" Тогда 	
				УсловныйЕвро = Справочники.Валюты.НайтиПоКоду("124");
				Если ЗначениеЗаполнено(УсловныйЕвро) Тогда
					НоваяЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
					НоваяЗаписьКурсовВалют.Валюта = УсловныйЕвро;
					НоваяЗаписьКурсовВалют.Период = ДатаКурса;
					НоваяЗаписьКурсовВалют.Прочитать();
					НоваяЗаписьКурсовВалют.Валюта    = УсловныйЕвро;
					НоваяЗаписьКурсовВалют.Период    = ДатаКурса;
					НоваяЗаписьКурсовВалют.Курс      = Курс;
					НоваяЗаписьКурсовВалют.Кратность = Кратность;
					НоваяЗаписьКурсовВалют.Записать();

				КонецЕсли;

			КонецЕсли;
			
			//АБС Заявка 2868
		
		КонецЦикла;
	КонецЦикла;
	
	УдалитьФайлы(ВремКаталог,"*.*");
	
	ЗаписьЖурналаРегистрации("Загрузка курсов валют на следующий день", УровеньЖурналаРегистрации.Информация,,,"Загрузка курсов валют завершена.");
	
КонецПроцедуры

Функция ВыделитьПодСтроку(ИсходнаяСтрока)

	Перем ПодСтрока;
	
    Поз = Найти(ИсходнаяСтрока,Символы.Таб);
	Если Поз > 0 Тогда
		ПодСтрока = Лев(ИсходнаяСтрока,Поз-1);
		ИсходнаяСтрока = Сред(ИсходнаяСтрока,Поз+1);
	Иначе
		ПодСтрока = ИсходнаяСтрока;
		ИсходнаяСтрока = "";
	КонецЕсли;
	
	Возврат ПодСтрока;
 
 КонецФункции // ВыделитьПодСтроку()

Функция ЗапроситьФайлыССервера(СерверИсточникПараметр, СтрокаПараметраПолученияПараметр, ИмяВходящегоФайлаПараметр,
                               HTTP = Неопределено, АвторизацияПрокси = Ложь, СтруктураПараметровПрокси = Неопределено, 
                               СообщениеОбОшибке = "") Экспорт

	Результат = Истина;
	ПроксиСервер = Неопределено;
	мСерверИсточник = СерверИсточникПараметр;

	СерверИсточник           = СерверИсточникПараметр;
	СтрокаПараметраПолучения = СтрокаПараметраПолученияПараметр;
	ИмяВходящегоФайла        = ИмяВходящегоФайлаПараметр;

	ПерваяПопыткаПрокси   = Истина;
	ПерваяПопыткаСервера  = Истина;
	ПерваяПопыткаПолучить = Не (HTTP = Неопределено);

	Если ТипЗнч(HTTP) <> Тип("HTTPСоединение") Тогда
		Если АвторизацияПрокси Тогда
			ПроксиСервер = Новый ИнтернетПрокси();
			
			ПроксиСервер.Пользователь 		= СтруктураПараметровПрокси.ИмяПользователя;
			ПроксиСервер.Пароль       		= СтруктураПараметровПрокси.ПарольПользователя;
			ПроксиСервер.Установить("http", СтруктураПараметровПрокси.Сервер, СтруктураПараметровПрокси.ПортСервера);
			
			HTTP = Новый HTTPСоединение(СерверИсточник, , , , ПроксиСервер);
		Иначе
			
			HTTP = Новый HTTPСоединение(СерверИсточник);					
			
		КонецЕсли;
	КонецЕсли;

	Пока Истина Цикл	
		
		Попытка
			HTTP.Получить(СтрокаПараметраПолучения, ИмяВходящегоФайла);
			Результат = Истина;
			Прервать;
		Исключение
			ОписаниеОшибкиСоединения = ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание;
			Результат = Ложь;
		КонецПопытки;
		
		Прервать;
		
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьПричинуОшибки(ИнформацияОбОшибке)

	ПричинаОшибки = ИнформацияОбОшибке.Причина;
	Если ПричинаОшибки = Неопределено Тогда
		Возврат ИнформацияОбОшибке;
	КонецЕсли;

	Пока ПричинаОшибки.Причина <> Неопределено Цикл
		ПричинаОшибки = ПричинаОшибки.Причина;
	КонецЦикла;

	Возврат ПричинаОшибки;

КонецФункции

Функция ПолучитьСтруктуруПараметровПрокси()
	
	СтруктураПараметровПрокси = Новый Структура("ИспользоватьПрокси, Сервер, ПортСервера, ИмяПользователя, ПарольПользователя");
	
	СтруктураПараметровПрокси.ИспользоватьПрокси 	= Константы.абс_ИспользоватьПрокси		.Получить();
	СтруктураПараметровПрокси.Сервер 				= Константы.абс_СерверПрокси			.Получить();
	СтруктураПараметровПрокси.ПортСервера 			= Константы.абс_ПортСервераПрокси		.Получить();
	СтруктураПараметровПрокси.ИмяПользователя 		= Константы.абс_ИмяПользователяПрокси	.Получить();
	СтруктураПараметровПрокси.ПарольПользователя	= Константы.абс_ПарольПользователяПрокси.Получить();
	
	Возврат СтруктураПараметровПрокси;
	
КонецФункции

///////////////////////ЗАГРУЗКА БАНКОВ С РБК///////////////////////

// Определяет по коду типа города строку типа города
//
// Параметры
//  Стр - Строка - код типа населенного пункта
//
// Возвращаемое значение
//  сокращенную строку типа населенного пункта
//
Функция ОпределитьТипГорода(Стр)
	
	Если Стр = "1" Тогда
		Возврат "Г.";       // ГОРОД
	ИначеЕсли Стр = "2" Тогда
		Возврат "П.";       // ПОСЕЛОК
	ИначеЕсли Стр = "3" Тогда
		Возврат "С.";       // СЕЛО
	ИначеЕсли Стр = "4" Тогда
		Возврат "ПГТ.";     // ПОСЕЛОК ГОРОДСКОГО ТИПА
	ИначеЕсли Стр = "5" Тогда
		Возврат "СТ-ЦА.";   // СТАНИЦА
	ИначеЕсли Стр = "6" Тогда
		Возврат "АУЛ.";     // АУЛ
	ИначеЕсли Стр = "7" Тогда
		Возврат "РП.";      //  РАБОЧИЙ ПОСЕЛОК 
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции  // ОпределитьТипГорода()

// Определяет по коду типа банка строку типа банка
//
// Параметры
//  Стр - Строка - код типа банка
//
// Возвращаемое значение
//  сокращенную строку типа банка
//
Функция ОпределитьТипБанка(Стр)
	
	Если Стр = "00" Тогда
		Возврат "ГРКЦ ";    
	ИначеЕсли Стр = "10" Тогда
		Возврат "РКЦ ";    
	ИначеЕсли Стр = "20" Тогда
		Возврат "Б ";    
	ИначеЕсли Стр = "21" Тогда
		Возврат "КБ ";    
	ИначеЕсли Стр = "22" Тогда
		Возврат "СБ ";    
	ИначеЕсли Стр = "23" Тогда
		Возврат "АКБ ";    
	ИначеЕсли Стр = "24" Тогда
		Возврат "ЧКБ ";    
	ИначеЕсли Стр = "25" Тогда
		Возврат "КОПБ ";    
	ИначеЕсли Стр = "26" Тогда
		Возврат "АПБ ";    
	ИначеЕсли Стр = "30" Тогда
		Возврат "ФБ ";    
	ИначеЕсли Стр = "31" Тогда
		Возврат "ФКБ ";    
	ИначеЕсли Стр = "32" Тогда
		Возврат "Отд. ";    
	ИначеЕсли Стр = "33" Тогда
		Возврат "ФАКБ ";    
	ИначеЕсли Стр = "34" Тогда
		Возврат "ФЧКБ ";    
	ИначеЕсли Стр = "35" Тогда
		Возврат "ФКОБ ";    
	ИначеЕсли Стр = "36" Тогда
		Возврат "Отд. ";    
	ИначеЕсли Стр = "40" Тогда
		Возврат "ПУ ";    
	ИначеЕсли Стр = "50" Тогда
		Возврат "ЦХ ";    
	ИначеЕсли Стр = "70" Тогда
		Возврат "КУ ";    
	ИначеЕсли Стр = "71" Тогда
		Возврат "КЛ ";    
	ИначеЕсли Стр = "72" Тогда
		Возврат "ОРЦБ ";    
	ИначеЕсли Стр = "98" Тогда
		Возврат "ИСКЛ ";    
	ИначеЕсли Стр = "99" Тогда
		Возврат "ОТЗВ ";    
	ИначеЕсли Стр = "90" Тогда
		Возврат "ЛИКВ ";    
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции  // ОпределитьТипБанка()

//Загрузка
Процедура ЗагрузитьКлассификаторСРБК(ВремКаталог, мИмяФайлаЗип, мИмяФайлаБИК, мИмяФайлаРег, ДеревоБанков)
	
	ФайлБИК = Новый Файл(ВремКаталог+"\"+мИмяФайлаБИК);
	ФайлРег = Новый Файл(ВремКаталог+"\"+мИмяФайлаРег);
		
    Разделитель = Символы.Таб;
	СпРегионов = Новый СписокЗначений;
	мТекстКлассификатора = Новый ЧтениеТекста(ВремКаталог + "\" + мИмяФайлаРег, КодировкаТекста.ANSI);
	//мТекстКлассификатора.Прочитать(ВремКаталог + "\" + мИмяФайлаРег);
	//КолСтрок = мТекстКлассификатора.КоличествоСтрок();
	//Обновить();
	//Для к = 1 по КолСтрок Цикл
	Стр = мТекстКлассификатора.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		//Стр = мТекстКлассификатора.ПолучитьСтроку(к);

		Если (Лев(Стр,2) = "//") или (ПустаяСтрока(Стр)) Тогда
			//АБС ВСТАВКА 42853  20.05.2014 14:47:57  Стрельцов
			Стр = мТекстКлассификатора.ПрочитатьСтроку();
			//\\АБС ВСТАВКА 42853 КОНЕЦ
			Продолжить;
		КонецЕсли;
		НомПоля = 1;
		Пока (ПустаяСтрока(Стр) = 0) Цикл	//	пока не обработали всю шапку
	        Поз = Найти(Стр,Разделитель);
			Если Поз = 0 Тогда	//	не нашли
				НазваниеОдногоПоля = Стр;
				Стр = "";
			Иначе
				//	вырезаем очередное поля
				НазваниеОдногоПоля = Лев(Стр,Поз-1);
				Стр = Прав(Стр,СтрДлина(Стр)-Поз);
			КонецЕсли;

			НазваниеОдногоПоля = СокрЛП(НазваниеОдногоПоля);
			//	добавляем входное поле в таблицу
			Если НомПоля = 1 Тогда
				Симвл1 = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 2 Тогда
				Симвл2 = СокрЛП(НазваниеОдногоПоля);
			КонецЕсли; 

			НомПоля = НомПоля + 1;
			Если НомПоля > 2 Тогда 
				Прервать;  // Завершить просмотр строки, т.к. обработаны все необходимые поля, но есть еще что-то.
			КонецЕсли; 
		КонецЦикла;	
		
		СпРегионов.Добавить(Симвл1,Симвл2);
		Стр = мТекстКлассификатора.ПрочитатьСтроку();
	КонецЦикла;	
    мТекстКлассификатора.Закрыть();
	
	//Состояние("Выполняется загрузка классификатора");

	//мТекстКлассификатора.Прочитать(ВремКаталог + "\" + мИмяФайлаБИК);
	//КолСтрок = мТекстКлассификатора.КоличествоСтрок();
	//Обновить();
	
	мТекстКлассификатора = Новый ЧтениеТекста(ВремКаталог + "\" + мИмяФайлаБИК, КодировкаТекста.ANSI);
	//Обновить();
		
	//ФормаИндикации.МаксимальноеЗначение = КолСтрок;
		
	//Для к = 1 по КолСтрок Цикл
	Стр = мТекстКлассификатора.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		//Стр = мТекстКлассификатора.ПолучитьСтроку(к);

		Стр = СокрЛП(Стр);

		Если ПустаяСтрока(Стр) Тогда
			//АБС ВСТАВКА 42853  20.05.2014 14:47:57  Стрельцов
			Стр = мТекстКлассификатора.ПрочитатьСтроку();
			//\\АБС ВСТАВКА 42853 КОНЕЦ
			Продолжить;
		КонецЕсли;
		
		ЗнТипБанка = "";
		ЗнПункт = "";
		ЗнТипПункта = "";
		ЗнНаименование = "";
		ЗнПризнакКода = "";
		ЗнБИК = "";
		ЗнКорСчет = "";
		
		НомПоля = 1;
		Пока (ПустаяСтрока(Стр) = 0) Цикл	//	пока не обработали всю шапку
	        Поз = Найти(Стр,Разделитель);
			Если Поз = 0 Тогда	//	не нашли
				НазваниеОдногоПоля = Стр;
				Стр = "";
			Иначе
				//	вырезаем очередное поля
				НазваниеОдногоПоля = Лев(Стр,Поз-1);
				Стр = Прав(Стр,СтрДлина(Стр)-Поз);
			КонецЕсли;

			НазваниеОдногоПоля = СокрЛП(НазваниеОдногоПоля);
			//	добавляем входное поле в таблицу
			Если НомПоля = 1 Тогда
				ЗнТипБанка = ОпределитьТипБанка(СокрЛП(НазваниеОдногоПоля));
			ИначеЕсли НомПоля = 2 Тогда
				ЗнПункт = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 3 Тогда
				ЗнТипПункта = ОпределитьТипГорода(СокрЛП(НазваниеОдногоПоля));
			ИначеЕсли НомПоля = 4 Тогда
				ЗнНаименование = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 5 Тогда
				ЗнПризнакКода = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 6 Тогда
				ЗнБИК = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 7 Тогда
				ЗнКорСчет = СокрЛП(НазваниеОдногоПоля);
			КонецЕсли; 
			НомПоля = НомПоля + 1;
			Если НомПоля > 7 Тогда 
				Прервать;  // Завершить просмотр строки, т.к. обработаны все необходимые поля, но есть еще что-то.
			КонецЕсли; 
		КонецЦикла;	

		//ФормаИндикации.Значение = к;

		КодРег          = Сред(ЗнБИК,3,2);
		НайденныйРегион = СпРегионов.НайтиПоЗначению(КодРег);
		Если НайденныйРегион = Неопределено Тогда
			//АБС ВСТАВКА 42853  20.05.2014 14:47:57  Стрельцов
			Стр = мТекстКлассификатора.ПрочитатьСтроку();
			//\\АБС ВСТАВКА 42853 КОНЕЦ
			Продолжить;
		КонецЕсли;

		РегТабл = ДеревоБанков.Строки.Найти(КодРег,"КодРегиона",Ложь);
		Если РегТабл = Неопределено Тогда
			НоваяСтрокаРегиона              = ДеревоБанков.Строки.Добавить();
			НоваяСтрокаРегиона.КодРегиона   = НайденныйРегион.Значение;
			НоваяСтрокаРегиона.Наименование = НайденныйРегион.Представление;
			НоваяСтрокаРегиона.Загрузка     = Истина; //Ложь;  //абс
		Иначе	
			НоваяСтрокаРегиона = РегТабл;
		КонецЕсли;	
		
		НоваяСтрокаБанка              = НоваяСтрокаРегиона.Строки.Добавить();
		НоваяСтрокаБанка.Наименование = ЗнНаименование;
		НоваяСтрокаБанка.КодРегиона   = ЗнБИК;
		НоваяСтрокаБанка.ТипБанка     = ЗнТипБанка;
		НоваяСтрокаБанка.КоррСчет     = ЗнКорСчет;
		НоваяСтрокаБанка.Индекс       = "";
		НоваяСтрокаБанка.Город        = ЗнТипПункта+" "+ЗнПункт;
		НоваяСтрокаБанка.Адрес        = "";
		НоваяСтрокаБанка.Телефон      = "";
		НоваяСтрокаБанка.Загрузка = Истина; //Ложь;  //абс
		
		Стр = мТекстКлассификатора.ПрочитатьСтроку();

	КонецЦикла;	
	
	мТекстКлассификатора.Закрыть();
	 
КонецПроцедуры // ЗагрузитьКлассификаторСРБК()


Процедура ПолучитьФайлРБК(ДеревоБанков)
	
	//мИмяФайлаЗип = "bnk.exe"; 
	мИмяФайлаЗип = "bnk.zip";
	мИмяФайлаБИК = "bnkseek.txt"; 
	мИмяФайлаРег = "Reg.txt"; 
	
	СерверИсточник = "cbrates.rbc.ru";
	
	//АБС-ВСТАВКА+ Стрельцов 11.11.2013
	//-------------------------------------------
	//НТТР = Новый HTTPСоединение(СерверИсточник);
	HTTP = Неопределено;
	//-------------------------------------------
	//\\АБС-ВСТАВКА-
	
	//Адрес = "bnk/bnk.exe";
	Адрес = "bnk/bnk.zip"; //АБС
	ВремКаталог = КаталогВременныхФайлов() + "tempBik";
	СоздатьКаталог(ВремКаталог);
	УдалитьФайлы(ВремКаталог,"*.*");    //АБС
	
	//АБС-ВСТАВКА+ Стрельцов 11.11.2013
	//-------------------------------------------
	СтруктураПараметровПрокси = ПолучитьСтруктуруПараметровПрокси();
	
	ИмяВходящегоФайла = ВремКаталог + "\" + мИмяФайлаЗип;
		
	//Попытка
	//	НТТР.Получить(Адрес, ВремКаталог + "\" + мИмяФайлаЗип);
	//Исключение
	//	//Сообщить("Неудачная попытка соединения.");
	//	ЗаписьЖурналаРегистрации("Загрузка банков", УровеньЖурналаРегистрации.Ошибка,,,"Неудачная попытка соединения. Банки не загружены.");						
	//	Возврат;
	//КонецПопытки;
	//-------------------------------------------
	//\\АБС-ВСТАВКА-
	
	//Состояние("Выполняется обработка загрузки");
	
	//АБС-ВСТАВКА+ Стрельцов 11.11.2013
	//-------------------------------------------
	Если ЗапроситьФайлыССервера(СерверИсточник, Адрес, ИмяВходящегоФайла, HTTP, СтруктураПараметровПрокси.ИспользоватьПрокси, СтруктураПараметровПрокси) <> Истина Тогда
		ЗаписьЖурналаРегистрации("Загрузка банков", УровеньЖурналаРегистрации.Ошибка,,,"Неудачная попытка соединения. Банки не загружены!");			
		Возврат;
	КонецЕсли;
	//-------------------------------------------
	//\\АБС-ВСТАВКА-
	
	Архиватор = Новый ЧтениеZipФайла(ИмяВходящегоФайла);
	Архиватор.ИзвлечьВсе(ВремКаталог);	
	//КомандаСистемы(""""+ ВремКаталог + "\" + мИмяФайлаЗип + """", ВремКаталог);
	//КомандаСистемы("""C:\Progra~1\7-Zip\7z.exe"" x " + """"+ ВремКаталог + "\" + мИмяФайлаЗип + """" + " -o"""+ВремКаталог+"""", ВремКаталог);  //АБС

	ФайлБИК = Новый Файл(ВремКаталог + "\" + мИмяФайлаБИК);
	ФайлРЕГ = Новый Файл(ВремКаталог + "\" + мИмяФайлаРег);
	
	НачальнаяДата = ТекущаяДата();
	Пока (НЕ (ФайлБИК.Существует() И ФайлРЕГ.Существует())) И ((ТекущаяДата() - НачальнаяДата) < 10) Цикл
	КонецЦикла;
	
	Если (ФайлБИК.Существует() И ФайлРЕГ.Существует()) Тогда
		ЗагрузитьКлассификаторСРБК(ВремКаталог, мИмяФайлаЗип, мИмяФайлаБИК, мИмяФайлаРег, ДеревоБанков);
		УдалитьФайлы(ВремКаталог,мИмяФайлаЗип);
		УдалитьФайлы(ВремКаталог,мИмяФайлаБИК);
		УдалитьФайлы(ВремКаталог,мИмяФайлаРег);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьФайлРБК()

//Заполнение
Процедура ЗаполнитьБанкиДляИзменения(ДеревоБанков, ДеревоИзмененныхБанков)
	
	ДеревоИзмененныхБанков.Строки.Очистить();
	СпрБанки = Справочники.Банки;
	
	НачатьТранзакцию();

	КоличествоСтрокДерева = ДеревоБанков.Строки.Количество();
	СчетчикЦикла = 0;
	ФлагЗагрузки = Ложь;
	Для каждого ТекСтрРег из ДеревоБанков.Строки Цикл
		СчетчикЦикла = СчетчикЦикла + 1;
		
		ТекОКАТО  = ТекСтрРег.КодРегиона;
		ТекРегион = ТекСтрРег.Наименование;
		ФлСозданияГруппы = 0;
		Для каждого ТекСтрБанка из ТекСтрРег.Строки Цикл
			Если НЕ ТекСтрБанка.Загрузка Тогда
				Продолжить;
			КонецЕсли;	
			
			БИК          = СокрЛП(ТекСтрБанка.КодРегиона);
			КоррСчет     = СокрЛП(ТекСтрБанка.КоррСчет);
			Наименование = СокрЛП(ТекСтрБанка.Наименование);
			ТипБанка     = СокрЛП(ТекСтрБанка.ТипБанка);
			Индекс       = СокрЛП(ТекСтрБанка.Индекс);
			Город        = СокрЛП(ТекСтрБанка.Город);
			Адрес        = СокрЛП(ТекСтрБанка.Адрес);
			Телефоны     = СокрЛП(ТекСтрБанка.Телефон);

			ВыбЭл = СпрБанки.НайтиПоКоду(БИК);
			Если ВыбЭл = СпрБанки.ПустаяСсылка() Тогда
				РодительЭл = СпрБанки.НайтиПоКоду(ТекОКАТО);
				Если РодительЭл = СпрБанки.ПустаяСсылка() Тогда
					НоваяГр              = СпрБанки.СоздатьГруппу();
					НоваяГр.Код          = ТекОКАТО;
					НоваяГр.Наименование = ТекРегион;
					НоваяГр.Записать();
					РодительЭл = НоваяГр.Ссылка;
				КонецЕсли;	
				НовыйЭл = СпрБанки.СоздатьЭлемент();
				НовыйЭл.Родитель     = РодительЭл;
				НовыйЭл.Код          = БИК;
				НовыйЭл.Наименование = Наименование;
				НовыйЭл.КоррСчет     = КоррСчет;
				НовыйЭл.Город        = Город;
				НовыйЭл.Адрес        = Индекс+", "+Адрес;
				НовыйЭл.Телефоны     = Телефоны;
				НовыйЭл.Записать();
			Иначе	
				ФлИзменения = 1000000;
                ФлИзменения = ?(СокрЛП(ВыбЭл.Код)          <> СокрЛП(БИК),ФлИзменения+100000,ФлИзменения);
                ФлИзменения = ?(СокрЛП(ВыбЭл.Наименование) <> СокрЛП(Наименование),ФлИзменения+10000,ФлИзменения);
                ФлИзменения = ?(СокрЛП(ВыбЭл.Город)        <> СокрЛП(Город),ФлИзменения+1000,ФлИзменения);
                ФлИзменения = ?(СокрЛП(ВыбЭл.КоррСчет)     <> СокрЛП(КоррСчет),ФлИзменения+100,ФлИзменения);
                ФлИзменения = ?(СокрЛП(ВыбЭл.Адрес)        <> СокрЛП(Индекс+", "+Адрес) И Адрес <> "",ФлИзменения+10,ФлИзменения);
                ФлИзменения = ?(СокрЛП(ВыбЭл.Телефоны)     <> СокрЛП(Телефоны) И Телефоны <> "",ФлИзменения+1,ФлИзменения);
				
				Если ФлИзменения > 1000000 Тогда
					ФлИзменения = Строка(ФлИзменения);
					ФлИзменения = СтрЗаменить(ФлИзменения,Символы.НПП,"");
					Если ФлСозданияГруппы = 0 Тогда
						НоваяСтрокаРегиона = ДеревоИзмененныхБанков.Строки.Добавить();
						НоваяСтрокаРегиона.КодРегиона   = ТекОКАТО;
						НоваяСтрокаРегиона.Наименование = ТекРегион;
						НоваяСтрокаРегиона.Загрузка     = Истина;
						ФлСозданияГруппы = 1;
					КонецЕсли;	

					НоваяСтрокаБанка              = НоваяСтрокаРегиона.Строки.Добавить();
					НоваяСтрокаБанка.Наименование = Наименование;
					НоваяСтрокаБанка.Загрузка     = Истина;

					НоваяСтрокаРеквизита = НоваяСтрокаБанка.Строки.Добавить();
					НоваяСтрокаРеквизита.Наименование = "БИК";
					НоваяСтрокаРеквизита.ЗнКлассификатора      = БИК;
					НоваяСтрокаРеквизита.ЗнБазы                = ВыбЭл.Код;
					НоваяСтрокаРеквизита.ИзмененРеквизит = ?(Сред(ФлИзменения,2,1)="1",Истина,Ложь);

					НоваяСтрокаРеквизита = НоваяСтрокаБанка.Строки.Добавить();
					НоваяСтрокаРеквизита.Наименование = "Наименование";
					НоваяСтрокаРеквизита.ЗнКлассификатора      = Наименование;
					НоваяСтрокаРеквизита.ЗнБазы                = ВыбЭл.Наименование;
					НоваяСтрокаРеквизита.ИзмененРеквизит = ?(Сред(ФлИзменения,3,1)="1",Истина,Ложь);

					Для каждого ТекРек из Метаданные.Справочники.Банки.Реквизиты Цикл
						ИмяРек = СокрЛП(ТекРек.Имя);
						Если ИмяРек = "Город" Тогда
							ЗнКлас = Вычислить("Город");
							СинРек = "Город";
							НомЦиф = 4;
						ИначеЕсли ИмяРек = "КоррСчет" Тогда
							ЗнКлас = Вычислить("КоррСчет");
							СинРек = "Корр. счет";
							НомЦиф = 5;
						ИначеЕсли ИмяРек = "Адрес" Тогда
							ЗнКлас = Вычислить("Индекс+"", ""+Адрес");
							СинРек = "Адрес";
							НомЦиф = 6;
						ИначеЕсли ИмяРек = "Телефоны" Тогда
							ЗнКлас = Вычислить("Телефоны");
							СинРек = "Телефоны";
							НомЦиф = 7;
						КонецЕсли;	
						
						НоваяСтрокаРеквизита = НоваяСтрокаБанка.Строки.Добавить();
						НоваяСтрокаРеквизита.Наименование = СинРек;
						НоваяСтрокаРеквизита.ЗнКлассификатора = ЗнКлас;
						НоваяСтрокаРеквизита.ЗнБазы           = ВыбЭл[ИмяРек];
						НоваяСтрокаРеквизита.ИзмененРеквизит  = ?(Сред(ФлИзменения,НомЦиф,1)="1",Истина,Ложь);
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
			ФлагЗагрузки = Истина;
		КонецЦикла;	
	КонецЦикла;	
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // КнопкаЗаполнитьСправочникНажатие()

Процедура ПринятьИзменения(ДеревоИзмененныхБанков)
	
	СпрБанки           = Справочники.Банки;
	
	НачатьТранзакцию();

	КоличествоСтрокУровня = ДеревоИзмененныхБанков.Строки.Количество();
	Для каждого ТекСтрРег из ДеревоИзмененныхБанков.Строки Цикл
		ТекОКАТО  = СокрЛП(ТекСтрРег.КодРегиона);
		ТекРегион = СокрЛП(ТекСтрРег.Наименование);
		ФлСозданияГруппы = 0;
		Для каждого ТекСтрБанка из ТекСтрРег.Строки Цикл
			Если НЕ ТекСтрБанка.Загрузка Тогда
				Продолжить;
			КонецЕсли;	
			
			Для каждого ТекСтрРеквизита из ТекСтрБанка.Строки Цикл
				НаимРек = СокрЛП(ТекСтрРеквизита.Наименование);
				Если НаимРек = "БИК" Тогда
					БИК = СокрЛП(ТекСтрРеквизита.ЗнКлассификатора);
				ИначеЕсли НаимРек = "Наименование" Тогда
					Наименование = СокрЛП(ТекСтрРеквизита.ЗнКлассификатора);
				ИначеЕсли НаимРек = "Корр. счет" Тогда
					КоррСчет = СокрЛП(ТекСтрРеквизита.ЗнКлассификатора);
				ИначеЕсли НаимРек = "Город" Тогда
					Город = СокрЛП(ТекСтрРеквизита.ЗнКлассификатора);
				ИначеЕсли НаимРек = "Адрес" Тогда
					Адрес = СокрЛП(ТекСтрРеквизита.ЗнКлассификатора);
				ИначеЕсли НаимРек = "Телефоны" Тогда
					Телефоны = СокрЛП(ТекСтрРеквизита.ЗнКлассификатора);
				КонецЕсли;	
			КонецЦикла;

			ТекущаяСтрока = ТекСтрБанка.Строки.Индекс(ТекСтрРег) + 1;
			
			ВыбЭл = СпрБанки.НайтиПоКоду(БИК);
			Если НЕ (ВыбЭл = СпрБанки.ПустаяСсылка()) Тогда
				РодительЭл = СпрБанки.НайтиПоКоду(ТекОКАТО);
				Если РодительЭл = СпрБанки.ПустаяСсылка() Тогда
					НоваяГр              = СпрБанки.СоздатьГруппу();
					НоваяГр.Код          = ТекОКАТО;
					НоваяГр.Наименование = ТекРегион;
					НоваяГр.Записать();
					РодительЭл = НоваяГр.Ссылка;
				КонецЕсли;	
				ИзмЭл = ВыбЭл.ПолучитьОбъект();
				ИзмЭл.Родитель     = РодительЭл;
				ИзмЭл.Код          = БИК;
				ИзмЭл.Наименование = Наименование;
				ИзмЭл.КоррСчет     = КоррСчет;
				ИзмЭл.Город        = Город;
				Если Адрес <> "" И Адрес <> "," Тогда
					ИзмЭл.Адрес        = Адрес;
				КонецЕсли;
				Если Телефоны <> "" Тогда
					ИзмЭл.Телефоны     = Телефоны;
				КонецЕсли;
				ИзмЭл.Записать();
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	

	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // КнопкаПринятьИзмененияНажатие()

Процедура абс_ЗагрузкаБанков() Экспорт
	
	Если НЕ Константы.абс_ИспользоватьФоновоеЗаданиеЗагрузкиБанков.Получить() Тогда
		Возврат;
	КонецЕсли;

	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	ЗаписьЖурналаРегистрации("Загрузка банков", УровеньЖурналаРегистрации.Информация,,,"Загрузка банков начата.");

	ДеревоБанков = Новый ДеревоЗначений;
	ДеревоБанков.Колонки.Добавить("Загрузка");
	ДеревоБанков.Колонки.Добавить("КодРегиона");
	ДеревоБанков.Колонки.Добавить("Наименование");
	ДеревоБанков.Колонки.Добавить("ТипБанка");
	ДеревоБанков.Колонки.Добавить("КоррСчет");
	ДеревоБанков.Колонки.Добавить("Индекс");
	ДеревоБанков.Колонки.Добавить("Город");
	ДеревоБанков.Колонки.Добавить("Адрес");
	ДеревоБанков.Колонки.Добавить("Телефон");
	
	ДеревоИзмененныхБанков = Новый ДеревоЗначений;
	ДеревоИзмененныхБанков.Колонки.Добавить("Загрузка");
	ДеревоИзмененныхБанков.Колонки.Добавить("КодРегиона");
	ДеревоИзмененныхБанков.Колонки.Добавить("Наименование");
	ДеревоИзмененныхБанков.Колонки.Добавить("ЗнКлассификатора");
	ДеревоИзмененныхБанков.Колонки.Добавить("ЗнБазы");
	ДеревоИзмененныхБанков.Колонки.Добавить("ИзмененРеквизит");
	
	ПолучитьФайлРБК(ДеревоБанков);	
	ЗаполнитьБанкиДляИзменения(ДеревоБанков, ДеревоИзмененныхБанков);
	ПринятьИзменения(ДеревоИзмененныхБанков);
	
	ЗаписьЖурналаРегистрации("Загрузка банков", УровеньЖурналаРегистрации.Информация,,,"Загрузка банков завершена.");
	
	ЗаписьЖурналаРегистрации("Выгрузка курсов в таблицу ExchRates", УровеньЖурналаРегистрации.Информация,,,"Выгрузка курсов в таблицу ExchRates начата.");
	ВыгрузитьКурсы();
	ЗаписьЖурналаРегистрации("Выгрузка курсов в таблицу ExchRates", УровеньЖурналаРегистрации.Информация,,,"Выгрузка курсов в таблицу ExchRates завершена.");
	
КонецПроцедуры

///////////////ВЫГРУЗКА КУРСОВ В ТАБЛИЦУ [TransPlatformIntegration].[dbo].[ExchRates] НАЧАЛО
Процедура ВыгрузитьКурсы() Экспорт 
	
	НастройкаПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	НастройкаПодключения.Вставить("Provider"  ,"10.110.91.15");
	НастройкаПодключения.Вставить("DataSource","TransPlatformIntegration");	
	//Чтение и запись
	НастройкаПодключения.Вставить("UserID"    ,"TransPlatformIntegration");
	НастройкаПодключения.Вставить("Password"  ,"ghgV3rq");	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",абс_СерверныеФункции.ПолучитьДатуСервера());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	КурсыВалютСрезПоследних.Валюта.Код КАК CurrencyCodeISO,
	               |	КурсыВалютСрезПоследних.Курс КАК ExchRate,
	               |	НАЧАЛОПЕРИОДА(КурсыВалютСрезПоследних.Период, ДЕНЬ) КАК DateRate,
	               |	КурсыВалютСрезПоследних.Валюта КАК CurrencyCode,
	               |	КурсыВалютСрезПоследних.Кратность КАК Nominal
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалютСрезПоследних
	               |ГДЕ
	               |	КурсыВалютСрезПоследних.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	DateRate УБЫВ";
	
    Результат = Запрос.Выполнить().Выбрать();    
	      
	Пока Результат.Следующий() Цикл	
		Если Результат.DateRate = '00010101' 
			или СокрЛП(Результат.CurrencyCode) = ""
			или Результат.CurrencyCode = NUll
			или Результат.CurrencyCode = Неопределено
			или Результат.DateRate = NUll
			или Результат.DateRate = Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		ОчиститьТаблицу(Результат.DateRate,Результат.CurrencyCode,НастройкаПодключения);
		ВыгрузитьSQL(Результат,НастройкаПодключения);		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОчиститьТаблицу(ВремДата,ИмяВалюты,НастройкаПодключения)Экспорт
	
	ТекстЗапроса = 
	"DELETE FROM [TransPlatformIntegration].[dbo].[ExchRates] WHERE DateRate = '"+Формат(НачалоДня(ВремДата),"ДФ='yyyyMMdd'")+"' and CurrencyCode = '"+ПятьСимволов(ИмяВалюты)+"'";
	
	абс_СерверныеФункции.ОбновитьДанныеВSQL(ТекстЗапроса,НастройкаПодключения);
	          	
КонецПроцедуры

Процедура ВыгрузитьSQL(врСтрока,НастройкаПодключения) Экспорт
		
	ТекстЗапроса = 
	"INSERT INTO [TransPlatformIntegration].[dbo].[ExchRates]
	|(CurrencyCodeISO,ExchRate,DateRate,CurrencyCode,Nominal)
	| VALUES (
	| "+ПроверитьЧисло(врСтрока.CurrencyCodeISO)+",
	| "+ПроверитьЧисло(врСтрока.ExchRate)+",
	|'"+ПроверитьДату(врСтрока.DateRate)+"',
	|'"+ПроверитьСтроку(врСтрока.CurrencyCode)+"',
	| "+ПроверитьЧисло(врСтрока.Nominal)+"
	|)";	
	
	абс_СерверныеФункции.ОбновитьДанныеВSQL(ТекстЗапроса,НастройкаПодключения);
	
КонецПроцедуры

Функция ПятьСимволов(знач Стр) Экспорт
	
	Стр = СокрЛП(Стр);
	Возврат Строка(Стр) + Сред("     ",0,5-СтрДлина(Стр));
	       	
КонецФункции

Функция ПроверитьСтроку(Значение) Экспорт 
	
	Если Значение = NUll или Значение = Неопределено Тогда
		Возврат "";
	Иначе	
		Возврат СокрЛП(Значение);
	КонецЕсли;	
		
КонецФункции	

Функция ПроверитьЧисло(Значение) Экспорт
	
	Если Значение = NUll или Значение = Неопределено Тогда
		Возврат 0;
	Иначе	
		Возврат СтрЗаменить(СтрЗаменить(""+Число(Значение),Символы.НПП,""),",",".");
	КонецЕсли;	
		
КонецФункции

Функция ПроверитьДату(Значение) Экспорт  
	
	Если Значение = NUll или Значение = Неопределено Тогда
		Возврат Формат(НачалоДня(абс_СерверныеФункции.ПолучитьДатуСервера()),"ДФ='yyyyMMdd'");
	Иначе	
		Возврат Формат(НачалоДня(Значение),"ДФ='yyyyMMdd'");
	КонецЕсли;	
		
КонецФункции  
//\\КОНЕЦ ВЫГРУЗКА КУРСОВ В ТАБЛИЦУ