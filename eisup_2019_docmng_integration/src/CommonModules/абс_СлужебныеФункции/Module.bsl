//Процедура установки платежного поручения в счете на оплату 
//
Функция ТребуетсяСинхронизация(Документ, ДатаАктуализации) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ТребуетсяСинхронизация
	|ИЗ
	|	РегистрСведений.абс_СинхронизацияСтатусовСчетовПриОплате.СрезПоследних(
	|			&ТекДата,
	|			Организация = &Организация
	|				И ПлатежноеПоручение = &ПлатежноеПоручение) КАК абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних";
	Запрос.УстановитьПараметр("ТекДата",?(ДатаАктуализации = Дата('00010101'),абс_СерверныеФункции.ПолучитьДатуСервера(),ДатаАктуализации));
	Запрос.УстановитьПараметр("Организация",Документ.Организация);
	Запрос.УстановитьПараметр("ПлатежноеПоручение",Документ);

	СтруктураВозврата = Запрос.Выполнить().Выбрать();			   
	Если СтруктураВозврата.Следующий() Тогда
	//СтруктураВозврата = РегистрыСведений.абс_СинхронизацияСтатусовСчетовПриОплате.ПолучитьПоследнее(?(ДатаАктуализации = Дата('00010101'),ТекущаяДата(),ДатаАктуализации), Новый Структура("ПлатежноеПоручение,", Документ));
	//Если СтруктураВозврата<>Неопределено Тогда
		Возврат Не СтруктураВозврата.ТребуетсяСинхронизация;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции 

Процедура ПриЗаписиПлатежногоПоручения(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	

	//Проводим синхронизацию статусов
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 19:02:11  Поставка
	Если глЗначениеПеременной("абс_ИспользоватьСинхронизациюСтатусов") Тогда
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
		
		Если ТребуетсяСинхронизация(Источник.Ссылка,абс_СерверныеФункции.ПолучитьДатуСервера()) Тогда
			
			СписокЗРС = Новый Массив;
			Для Каждого СтрокаТЧ Из  Источник.РасшифровкаПлатежа Цикл
				Если ЗначениеЗаполнено(СтрокаТЧ.ДокументПланированияПлатежа) Тогда
					СписокЗРС.Добавить(СтрокаТЧ.ДокументПланированияПлатежа); 
				КонецЕсли;
			КонецЦикла;
			
			Если СписокЗРС.Количество()>0 Тогда 				                    		   				
				Для Каждого ДокЗРС Из СписокЗРС Цикл
					Для  Каждого СтрокаОплаты Из ДокЗРС.Оплаты Цикл
						НаборДанных = РегистрыСведений.абс_СинхронизацияСтатусовСчетовПриОплате.СоздатьМенеджерЗаписи();
						НаборДанных.ПлатежноеПоручение	= (Источник.Ссылка);
						НаборДанных.Организация		    = (Источник.Ссылка.Организация);
						НаборДанных.Оплата				= СтрокаОплаты.Оплата;
						НаборДанных.СчетНаОплату 		= СтрокаОплаты.СчетНаОплату;
						НаборДанных.ЗРС                 = ДокЗРС.Ссылка;
						
						НаборДанных.Прочитать();
						
						НаборДанных.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
						НаборДанных.ПлатежноеПоручение		= Источник.Ссылка;
						НаборДанных.СчетНаОплату 			= СтрокаОплаты.СчетНаОплату;
						НаборДанных.Оплата					= СтрокаОплаты.Оплата;
						НаборДанных.ЗРС                     = ДокЗРС.Ссылка;
						НаборДанных.Организация             = Источник.Организация;
						НаборДанных.ТребуетсяСинхронизация 	= Истина;
						НаборДанных.Записать();
					КонецЦикла; 	          	
				КонецЦикла; 				
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	//Проводим синхронизацию статусов
	            	
	мСписокСтатусов = абс_БизнесПроцессы.ПолучитьМассивСтатусовСчетаНаОплату();
	
	МассивЗаявок = Источник.РасшифровкаПлатежа.ВыгрузитьКолонку("ДокументПланированияПлатежа");
	Если МассивЗаявок.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	абс_СчетНаОплатуОплаты.Ссылка КАК счет,
		|	абс_СчетНаОплатуОплаты.НомерСтроки,
		|	абс_СчетНаОплатуОплаты.ЗРС
		|ИЗ
		|	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
		|ГДЕ
		|	абс_СчетНаОплатуОплаты.ЗРС В(&МассивЗаявок)";
		Запрос.УстановитьПараметр("МассивЗаявок",МассивЗаявок);
		Результат = Запрос.Выполнить().Выгрузить();
		Для Каждого ЗРС Из МассивЗаявок Цикл
			Если ЗначениеЗаполнено(ЗРС) Тогда
				СтруктураОтбора = Новый структура("ЗРС");
				СтруктураОтбора.Вставить("ЗРС",ЗРС);
				
				Если Источник.Статус<> ЗРС.Статус Тогда
					Об = ЗРС.ПолучитьОбъект();
					Об.Статус = Источник.Статус;
					Об.ОбменДанными.Загрузка = Истина;
					Об.Записать();
				КонецЕсли;
				
				МассивСтрок =Результат.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрок.Количество()>0 Тогда
					Для Каждого СтрокаМассива Из МассивСтрок Цикл
						Если  СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].ПлатежноеПоручение <> Источник.Ссылка Тогда
							
							счетОбъект = СтрокаМассива.Счет.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].ПлатежноеПоручение = Источник.Ссылка;
							Если Источник.Ссылка.Оплачено Тогда
								счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.Оплачен;
								ДокумПлатеж = счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
								Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
									Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
										ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
										ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен;
										ДокПлатеж.Записать();
									КонецЕсли;
								КонецЕсли;
								
							ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.Отправлено Тогда
								ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
								ИндексТекСтатуса       = мСписокСтатусов.Найти(СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
								Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
									счетОбъект = СтрокаМассива.Счет.ПолучитьОбъект();
									счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ОтправленВБанк;
									СчетОбъект.ОбменДанными.Загрузка = Истина;
									счетОбъект.Записать();	
								КонецЕсли;
								ДокумПлатеж = счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
								Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
									Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
										ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
										ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен;
										ДокПлатеж.Записать();
									КонецЕсли;
								КонецЕсли;
								          								
							ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.ГотовКОплате Тогда
								ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ГотовКОплате);
								ИндексТекСтатуса       = мСписокСтатусов.Найти(СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
								Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
									счетОбъект = СтрокаМассива.Счет.ПолучитьОбъект();
									счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ГотовКОплате;
									СчетОбъект.ОбменДанными.Загрузка = Истина;
									счетОбъект.Записать();	
								КонецЕсли;
							ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.ПеренесенаВГК Тогда
								ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
								ИндексТекСтатуса       = мСписокСтатусов.Найти(СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
								Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
									счетОбъект = СтрокаМассива.Счет.ПолучитьОбъект();
									счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ПеренесенВГК;
									СчетОбъект.ОбменДанными.Загрузка = Истина;
									счетОбъект.Записать();	
								КонецЕсли;
								
								//3082
							ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.Подготовка Тогда
								СтатусОплатыСчета = СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты;
								Если СтатусОплатыСчета<> Перечисления.абсСтатусыСчетов.Утвержден Тогда
									счетОбъект = СтрокаМассива.Счет.ПолучитьОбъект();
									счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.Утвержден;
									//СчетОбъект.ОбменДанными.Загрузка = Истина;
									//счетОбъект.Записать();	
								КонецЕсли;
								ДокумПлатеж = СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
								Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
									Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Утвержден Тогда
										ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
										ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Утвержден;
										ДокПлатеж.Записать();
									КонецЕсли;
								КонецЕсли;
								//3082
								
							КонецЕсли;	
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							СчетОбъект.Записать();
						Иначе
							
							Если Источник.Ссылка.Оплачено Тогда
								Если СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты<>Перечисления.абсСтатусыСчетов.Оплачен Тогда
									счетОбъект = СтрокаМассива.Счет.ПолучитьОбъект();
									счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.Оплачен;
									СчетОбъект.ОбменДанными.Загрузка = Истина;
									счетОбъект.Записать();
								КонецЕсли;
								//Изменение статуса плана платежей
								ДокумПлатеж = СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
								Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
									Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
										ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
										ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен;
										ДокПлатеж.Записать();
									КонецЕсли;
								КонецЕсли;
								//Изменение статуса плана платежей
								
							ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.Отправлено Тогда
								ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
								ИндексТекСтатуса       = мСписокСтатусов.Найти(СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
								Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
									счетОбъект = СтрокаМассива.Счет.ПолучитьОбъект();
									счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ОтправленВБанк;
									СчетОбъект.ОбменДанными.Загрузка = Истина;
									счетОбъект.Записать();	
								КонецЕсли;
								//Изменение статуса плана платежей
								ДокумПлатеж = СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
								Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
									Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
										ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
										ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен;
										ДокПлатеж.Записать();
									КонецЕсли;
								КонецЕсли;
								//Изменение статуса плана платежей
							ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.ГотовКОплате Тогда
								ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ГотовКОплате);
								ИндексТекСтатуса       = мСписокСтатусов.Найти(СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
								Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
									счетОбъект = СтрокаМассива.Счет.ПолучитьОбъект();
									счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ГотовКОплате;
									СчетОбъект.ОбменДанными.Загрузка = Истина;
									счетОбъект.Записать();	
								КонецЕсли;
							ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.ПеренесенаВГК Тогда
								ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
								ИндексТекСтатуса       = мСписокСтатусов.Найти(СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
								Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
									счетОбъект = СтрокаМассива.Счет.ПолучитьОбъект();
									счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ПеренесенВГК;
									СчетОбъект.ОбменДанными.Загрузка = Истина;
									счетОбъект.Записать();	
								КонецЕсли;
							ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.Подготовка Тогда
								СтатусОплатыСчета =СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты;
								Если СтатусОплатыСчета<> Перечисления.абсСтатусыСчетов.Утвержден Тогда
									счетОбъект = СтрокаМассива.Счет.ПолучитьОбъект();
									счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.Утвержден;
									СчетОбъект.ОбменДанными.Загрузка = Истина;
									счетОбъект.Записать();	
								КонецЕсли;
								ДокумПлатеж = СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
								Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
									Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Утвержден Тогда
										ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
										ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Утвержден;
										ДокПлатеж.Записать();
									КонецЕсли;
								КонецЕсли;
								//3082   													
								
							КонецЕсли;	
						КонецЕсли;
						
					КонецЦикла;	
				КонецЕсли;
				
			Иначе
				
				Запрос = Новый Запрос;
				Запрос.Текст ="ВЫБРАТЬ
				|	абс_СчетНаОплатуОплаты.НомерСтроки,
				|	абс_СчетНаОплатуОплаты.Ссылка
				|ИЗ
				|	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
				|ГДЕ
				|	абс_СчетНаОплатуОплаты.ПлатежноеПоручение = &Платежка
				|	И абс_СчетНаОплатуОплаты.Контрагент = &Контрагент";
				Запрос.УстановитьПараметр("Платежка",Источник.Ссылка);
				Запрос.УстановитьПараметр("Контрагент",Источник.Ссылка.Контрагент);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл 					
					СчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
					СчетОбъект.Оплаты[Выборка.НомерСтроки-1].ПлатежноеПоручение = Документы.ПлатежноеПоручениеИсходящее.ПустаяСсылка();
					СчетОбъект.ОбменДанными.Загрузка = Истина;
					счетОбъект.Записать();			
				КонецЦикла;
				
			КонецЕсли; 			
		КонецЦикла; 		
	КонецЕсли;
	
КонецПроцедуры
	
//Функция определения счета на оплату по документу Оплата
//
Функция ОпределитьСчетПоОплате(Оплата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	абс_СчетНаОплатуОплаты.Ссылка КАК счет
	|ИЗ
	|	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	|ГДЕ
	|	абс_СчетНаОплатуОплаты.Оплата = &Оплата";
	Запрос.УстановитьПараметр("Оплата",Оплата);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Счет;
	Иначе
		Возврат Документы.абс_СчетНаОплату.ПустаяСсылка();
	КонецЕсли;	
КонецФункции

//Процедура установки ЗРС в счете на оплату 
Процедура ПриЗаписиЗаявкиНаРасходованиеСредств(Источник, Отказ) Экспорт
		
	//АБС ВСТАВКА 19.11.2014 Навценя
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьПроверкуЗаполненияРеквизитов") Тогда 
		Если Источник.ДополнительныеСвойства.ОтключитьПроверкуЗаполненияРеквизитов Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//АБС ВСТАВКА КОНЕЦ

	Для Каждого СтрокаОплаты Из Источник.Оплаты Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.СчетНаОплату) И ЗначениеЗаполнено(СтрокаОплаты.Оплата) Тогда
			 //СтруктураПоиска = Новый Структура("СчетНаОплату,Оплата");
			 //СтруктураПоиска.Вставить("СчетНаОплату",СтрокаОплаты.СчетНаОплату);
			 //СтруктураПоиска.Вставить("Оплата",СтрокаОплаты.Оплата);
			 
			 ОбъектСчет = СтрокаОплаты.СчетНаОплату.ПолучитьОбъект();
			 СтрокаОплатыСчета =  ОбъектСчет.Оплаты.Найти(СтрокаОплаты.Оплата,"Оплата");
			 Если СтрокаОплатыСчета<>Неопределено Тогда
				СтрокаОплатыСчета.ЗРС =Источник.Ссылка; 
				ОбъектСчет.ОбменДанными.Загрузка = Истина;
				ОбъектСчет.Записать();
			 КонецЕсли;
			 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Функция ВернутьНазваниеМесяца(ДатаМесяца) Экспорт
	
	НомерМесяца = Месяц(ДатаМесяца);
	
	Если НомерМесяца = 1 Тогда
		Возврат "Январь"
	ИначеЕсли НомерМесяца = 2 Тогда
		Возврат "Февраль"
	ИначеЕсли НомерМесяца = 3 Тогда
		Возврат "Март"
	ИначеЕсли НомерМесяца = 4 Тогда
		Возврат "Апрель"
	ИначеЕсли НомерМесяца = 5 Тогда
		Возврат "Май"
	ИначеЕсли НомерМесяца = 6 Тогда
		Возврат "Июнь"
	ИначеЕсли НомерМесяца = 7 Тогда
		Возврат "Июль"
	ИначеЕсли НомерМесяца = 8 Тогда
		Возврат "Август"
	ИначеЕсли НомерМесяца = 9 Тогда
		Возврат "Сентябрь"
	ИначеЕсли НомерМесяца = 10 Тогда
		Возврат "Октябрь"
	ИначеЕсли НомерМесяца = 11 Тогда
		Возврат "Ноябрь"
	Иначе
		Возврат "Декабрь"
	КонецЕсли;
	
КонецФункции

Процедура абс_ПередЗаписьюЗРСПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	 Источник.НомерСчета ="";
	Для Каждого СтрокаОплаты Из Источник.Оплаты Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.СчетНаОплату) И ЗначениеЗаполнено(СтрокаОплаты.Оплата) Тогда
			 //Запись номера счета в ЗРС
			 Если ЗначениеЗаполнено(СтрокаОплаты.СчетНаОплату.НомерВходящегоСчета) Тогда
				МассивНомеров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Источник.НомерСчета,",");
				Если МассивНомеров.Количество() = 0 Тогда
					Источник.НомерСчета = СокрЛП(СтрокаОплаты.СчетНаОплату.НомерВходящегоСчета);
				Иначе
					Если МассивНомеров.Найти(СокрЛП(СтрокаОплаты.СчетНаОплату.НомерВходящегоСчета))=Неопределено Тогда
						Если МассивНомеров.Количество()=0 Тогда
							Источник.НомерСчета = СокрЛП(СтрокаОплаты.СчетНаОплату.НомерВходящегоСчета);
						Иначе	
						Источник.НомерСчета =Источник.НомерСчета+?(ЗначениеЗаполнено(Источник.НомерСчета),",","")+СокрЛП(СтрокаОплаты.СчетНаОплату.НомерВходящегоСчета);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
			 КонецЕсли;
			 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


//Взаиморасчеты по документам расчетов
Процедура ПроведениеПоРегиструВзаиморасчетыПоДокументам(Источник,Отказ, РежимПроведения) Экспорт
	Движения = Источник.Движения.абс_ВзаиморасчетыПоДокументам;
	ДвиженияВзаиморасчеты =Источник.Движения.ВзаиморасчетыСКонтрагентами; 
	ТабДвижений = Движения.Выгрузить();
	ТабДвиженийВзаиморасчеты = ДвиженияВзаиморасчеты.выгрузить();
	ТабДвижений.Очистить();

	Документ = Источник.Ссылка;
	Для Каждого Запись Из  ТабДвиженийВзаиморасчеты Цикл
		Движение = ТабДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,Запись);
		Движение.СуммаРегл = Запись.СуммаУпр;
		Движение.Документ = Документ;
		
	КонецЦикла;
	
	Движения.Загрузить(ТабДвижений);
	Движения.Записать();

КонецПроцедуры

//Взаиморасчеты по документам расчетов


// Функция аналогична функции УчетНДС.ПолучитьСуммуДокументаСНДС
// за тем исключением что данная функция собирает сумму документа без номенклатуры, которая не проводится по лимитам бюджета.
Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

	ЗапросНоменклатураБезЛимитов = Новый Запрос(
	"ВЫБРАТЬ
	|	абс_СписокНоменклатурыБезПроведенияПоЛимитам.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.абс_СписокНоменклатурыБезПроведенияПоЛимитам КАК абс_СписокНоменклатурыБезПроведенияПоЛимитам");
	
	МассивНоменклатурыБезЛимитов = ЗапросНоменклатураБезЛимитов.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		
		Для Каждого СтрокаТЧ Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			Если МассивНоменклатурыБезЛимитов.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
						
				СуммаДокумента = СуммаДокумента + СтрокаТЧ.Сумма;
						
			КонецЕсли;
		КонецЦикла;		
		
		//СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено 
			И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			И МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("СуммаНДС") <> Неопределено
		  	И ДокументОбъект.УчитыватьНДС
		   	И Не ДокументОбъект.СуммаВключаетНДС Тогда
			
			Для Каждого СтрокаТЧ Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
				Если МассивНоменклатурыБезЛимитов.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
							
					СуммаДокумента = СуммаДокумента + СтрокаТЧ.СуммаНДС;
							
				КонецЕсли;
			КонецЦикла;
	
			//СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для Каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ВыданныеАвансы" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ОплатаПлатежнымиКартами" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ОплатаБанковскимиКредитами" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ПродажиПоДисконтнымКартам" Тогда
				Продолжить;
			КонецЕсли;
			Если МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("Сумма") <> Неопределено Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
				   И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
				   И МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("СуммаНДС") <> Неопределено
				   И ДокументОбъект.УчитыватьНДС
				   И Не ДокументОбъект.СуммаВключаетНДС Тогда
				   
				    Для Каждого СтрокаТЧ Из ДокументОбъект[ТЧОбъекта.Имя] Цикл
						Если НЕ МассивНоменклатурыБезЛимитов.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
							
							СуммаДокумента = СуммаДокумента + СтрокаТЧ.СуммаНДС;
							
						КонецЕсли;
				    КонецЦикла;
				   
					//СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Если МетаданныеДокумента.Реквизиты.Найти("Сумма") <> Неопределено Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект.Сумма;
			Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
			   И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			   И МетаданныеДокумента.Реквизиты.Найти("СуммаНДС") <> Неопределено
			   И ДокументОбъект.УчитыватьНДС
			   И Не ДокументОбъект.СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаСНДС()

Функция ПолучитьСуммуДокументаБЕЗ_НДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

		ЗапросНоменклатураБезЛимитов = Новый Запрос(
	"ВЫБРАТЬ
	|	абс_СписокНоменклатурыБезПроведенияПоЛимитам.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.абс_СписокНоменклатурыБезПроведенияПоЛимитам КАК абс_СписокНоменклатурыБезПроведенияПоЛимитам");
	
	МассивНоменклатурыБезЛимитов = ЗапросНоменклатураБезЛимитов.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		
		Для Каждого СтрокаТЧ Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			Если МассивНоменклатурыБезЛимитов.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
						
				СуммаДокумента = СуммаДокумента + СтрокаТЧ.Сумма;
						
			КонецЕсли;
		КонецЦикла;		
		
		//СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено 
			И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			И МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("СуммаНДС") <> Неопределено
		  	И ДокументОбъект.УчитыватьНДС
		   	И ДокументОбъект.СуммаВключаетНДС Тогда
			
			Для Каждого СтрокаТЧ Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
				Если МассивНоменклатурыБезЛимитов.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
							
					СуммаДокумента = СуммаДокумента - СтрокаТЧ.СуммаНДС;
							
				КонецЕсли;
			КонецЦикла;
	
			//СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для Каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ВыданныеАвансы" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ОплатаПлатежнымиКартами" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ОплатаБанковскимиКредитами" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ПродажиПоДисконтнымКартам" Тогда
				Продолжить;
			КонецЕсли;
			Если МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("Сумма") <> Неопределено Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
				   И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
				   И МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("СуммаНДС") <> Неопределено
				   И ДокументОбъект.УчитыватьНДС
				   И ДокументОбъект.СуммаВключаетНДС Тогда
				   
				    Для Каждого СтрокаТЧ Из ДокументОбъект[ТЧОбъекта.Имя] Цикл
						Если НЕ МассивНоменклатурыБезЛимитов.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
							
							СуммаДокумента = СуммаДокумента - СтрокаТЧ.СуммаНДС;
							
						КонецЕсли;
				    КонецЦикла;
				   
					//СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Если МетаданныеДокумента.Реквизиты.Найти("Сумма") <> Неопределено Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект.Сумма;
			Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
			   И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			   И МетаданныеДокумента.Реквизиты.Найти("СуммаНДС") <> Неопределено
			   И ДокументОбъект.УчитыватьНДС
			   И ДокументОбъект.СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента - ДокументОбъект.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СуммаДокумента;


КонецФункции // ПолучитьСуммуДокументаСНДС()

Функция ПолучитьПериодОтраженияПоДате(ДатаДокумента) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ас_ПериодыОтражения.Ссылка
	|ИЗ
	|	Справочник.ас_ПериодыОтражения КАК ас_ПериодыОтражения
	|ГДЕ
	|	ас_ПериодыОтражения.Код = &ГодОтражения
	|	И (НЕ ас_ПериодыОтражения.ПометкаУдаления)";
	
	ГодОтражения = СтрЗаменить(СокрЛП(Год(ДатаДокумента)), Символы.НПП, "");
	                                                         
	Запрос.УстановитьПараметр("ГодОтражения", ГодОтражения + "00");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	// Создадим период отражения
	ПериодОбъект = Справочники.ас_ПериодыОтражения.СоздатьЭлемент();
	
	ПериодОбъект.Наименование = ГодОтражения + "г.";
	
	ПериодОбъект.Код = ГодОтражения + "00";
	
	ПериодОбъект.Записать();
	
	Возврат ПериодОбъект.Ссылка;
	
КонецФункции

Процедура абс_ПриПометкеУдаленияПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации") Тогда
		Возврат;
	КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ПометкаУдаления = Источник.Ссылка.ПометкаУдаления Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Отказано в доступе.", Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция МассивВСтрокуСРазделителями(Знач Массив, Разделитель = ",") Экспорт
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент ИЗ Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСуммуДокументаСНДСПоПартииТоваровПереданные(Документ, БухУчет = Ложь) Экспорт
	
	Если Не Документ.Проведен Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗапросТекст = "ВЫБРАТЬ
	               |	ПартииТоваровПереданныеОбороты.СтоимостьРасход КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровПереданные.Обороты(, , Регистратор, ) КАК ПартииТоваровПереданныеОбороты
	               |ГДЕ
	               |	ПартииТоваровПереданныеОбороты.Регистратор = &Регистратор";
				   
	Запрос.УстановитьПараметр("Регистратор", Документ);	
	
	Если БухУчет Тогда
		ЗапросТекст = СтрЗаменить(ЗапросТекст, "ПартииТоваровПереданные", "ПартииТоваровПереданныеБухгалтерскийУчет");
	КонецЕсли;
	Запрос.Текст = ЗапросТекст;	
	Рез = Запрос.Выполнить().Выбрать();			   
	Если Рез.Следующий() Тогда
		Возврат Рез.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции


//Закупочный заказ
Функция ПроверкаПравоПросмотраРеквизитов(ДатаДокумента) Экспорт
	
	Отказ = Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИИсполнители.Исполнитель,
		|	РолиИИсполнители.Роль
		|ИЗ
		|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|ГДЕ
		|	РолиИИсполнители.Исполнитель = &Исполнитель
		|	И РолиИИсполнители.Роль В(&Роль)";

	Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.ТекущийПользователь);
	МассивРолей = Новый Массив;
	МассивРолей.Добавить(Справочники.РолиИсполнителей.РуководительОФК);
	МассивРолей.Добавить(Справочники.РолиИсполнителей.СуперПользователь);
	Запрос.УстановитьПараметр("Роль", МассивРолей);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	//АБС ИЗМЕНЕНИЕ 35495  13.12.2013 19:02:39  Поставка
	ДатаФункционала = глЗначениеПеременной("абс_ДатаНовогоФункционалаДляЗакупочныхЗаказов");
	//АБС ИЗМЕНЕНИЕ 35495 КОНЕЦ 
	
	Если ДатаФункционала <> '00010101' 
		и ДатаФункционала <= ДатаДокумента 
		и НЕ Отказ Тогда 
	Иначе
		Отказ = Истина;		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции


////////////Счета учета номенклатуры

// Функция возвращает массив вышестоящих групп указанного элемента.
// 
// Переметры:
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Массив вышестояших групп
//
Функция ПолучитьСписокВышеСтоящихГрупп(ЭлементСправочника) 
	
	Результат = Новый Массив;		
	
	//Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
	//	Возврат Результат;
	//КонецЕсли;
	//
	//МетаданныеСправочника = ЭлементСправочника.Метаданные();
	//Если НЕ МетаданныеСправочника.Иерархический Тогда
	//	Возврат Результат;
	//КонецЕсли;
	//ИмяСправочника = МетаданныеСправочника.Имя;	
	ИмяСправочника = "Номенклатура";
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Справочник1.Ссылка КАК Родитель1,
	|	Справочник1.Родитель КАК Родитель2,
	|	Справочник2.Родитель КАК Родитель3,
	|	Справочник3.Родитель КАК Родитель4,
	|	Справочник4.Родитель КАК Родитель5
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";
	
	ТекущийЭлемент = ЭлементСправочника.Родитель;
	
	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл		
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Для Индекс = 1 по 5 Цикл
				ТекущийЭлемент = Выборка["Родитель" + Индекс];
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;				
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает счета учета номенклатры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений(Организация = Неопределено, Номенклатура, Склад = Неопределено) Экспорт

	СтруктураВозврата = Новый Структура("СчетУчетаБУ, ПоПартиям, ПоСредней");

	//Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
	//	Возврат СтруктураВозврата;
	//КонецЕсли;
	
	МассивСклад			 = Новый Массив();
	МассивНоменклатура	 = Новый Массив();
	МассивВидНоменклатуры= Новый Массив();
	МассивОрганизация	 = Новый Массив();
	МассивСчетаПартионныйУчет = Новый Массив();
	МассивСчетаПоСредней = Новый Массив();  
	
	МассивСклад.Добавить(Справочники.Склады.ПустаяСсылка());
	МассивСклад.Добавить(Неопределено);

	МассивОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивОрганизация.Добавить(Неопределено);

	МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	МассивНоменклатура.Добавить(Справочники.ВидыНоменклатуры.ПустаяСсылка());
	МассивНоменклатура.Добавить(НЕОПРЕДЕЛЕНО);
		
	МассивНоменклатура.Добавить(Номенклатура.Ссылка);
	СписокГрупп = ПолучитьСписокВышестоящихГрупп(Номенклатура);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивНоменклатура.Добавить(Элемент);
	КонецЦикла;
	
	МассивНоменклатура.Добавить(Номенклатура.ВидНоменклатуры);
	МассивОрганизация.Добавить(Организация);
	МассивСклад.Добавить(Склад); 
	
	МассивСчетаПартионныйУчет = ПолучитьСчетаУчетаНоменклатурыПоПартиям();
	МассивСчетаПоСредней = ПолучитьСчетаУчетаНоменклатурыПоСредней();
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",        МассивОрганизация);
	Запрос.УстановитьПараметр("Номенклатура",       МассивНоменклатура);
	Запрос.УстановитьПараметр("Склад",			    МассивСклад);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВид",			Справочники.ВидыНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("СчетаПартионныйУчет",МассивСчетаПартионныйУчет);
    Запрос.УстановитьПараметр("СчетаПоСредней",	    МассивСчетаПоСредней);

	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетаУчетаНоменклатуры.Организация КАК Организация,
	               |	ВЫБОР
	               |		КОГДА СчетаУчетаНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА СчетаУчетаНоменклатуры.Номенклатура
	               |		ИНАЧЕ &ПустаяНоменклатура
	               |	КОНЕЦ КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА СчетаУчетаНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоГруппа,
	               |	ВЫБОР
	               |		КОГДА СчетаУчетаНоменклатуры.Номенклатура ССЫЛКА Справочник.ВидыНоменклатуры
	               |			ТОГДА СчетаУчетаНоменклатуры.Номенклатура
	               |		ИНАЧЕ &ПустойВид
	               |	КОНЕЦ КАК ВидНоменклатуры,
	               |	СчетаУчетаНоменклатуры.Склад КАК Склад,
	               |	СчетаУчетаНоменклатуры.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	ВЫБОР
	               |		КОГДА СчетаУчетаНоменклатуры.СчетУчетаБУ.Код В (&СчетаПартионныйУчет)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПоПартиям,
	               |	ВЫБОР
	               |		КОГДА СчетаУчетаНоменклатуры.СчетУчетаБУ.Код В (&СчетаПоСредней)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПоСредней
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	               |ГДЕ
	               |	СчетаУчетаНоменклатуры.Организация В(&Организация)
	               |	И СчетаУчетаНоменклатуры.Номенклатура В(&Номенклатура)
	               |	И СчетаУчетаНоменклатуры.Склад В(&Склад)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, ВидНоменклатуры Убыв, Склад Убыв, Организация Убыв");

	Если ТаблицаЗапроса.Количество() > 0 Тогда

		СведенияОСчетах = ТаблицаЗапроса[0];

		Если НЕ Номенклатура.Услуга Тогда

			СтруктураВозврата.СчетУчетаБУ = СведенияОСчетах.СчетУчетаБУ;
			СтруктураВозврата.ПоПартиям   = СведенияОСчетах.ПоПартиям;
			СтруктураВозврата.ПоСредней   = СведенияОСчетах.ПоСредней;

		КонецЕсли;
		
	КонецЕсли;

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений()

// Функция возвращает счета учета номенклатры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатурыПоПартиям() Экспорт

	МассивСчетаПартионныйУчет = Новый Массив();
	
	МассивСчетаПартионныйУчет.Добавить("07");  
	МассивСчетаПартионныйУчет.Добавить("08.04");  
	МассивСчетаПартионныйУчет.Добавить("08.05");    
    МассивСчетаПартионныйУчет.Добавить("08.09");    
	МассивСчетаПартионныйУчет.Добавить("10.06.2");
    МассивСчетаПартионныйУчет.Добавить("10.08");
    МассивСчетаПартионныйУчет.Добавить("10.12");
    МассивСчетаПартионныйУчет.Добавить("41.01");
    МассивСчетаПартионныйУчет.Добавить("43");
    МассивСчетаПартионныйУчет.Добавить("97.22");
	
	Возврат МассивСчетаПартионныйУчет;
	
КонецФункции // ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений()

// Функция возвращает счета учета номенклатры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатурыПоСредней() Экспорт

	МассивСчетаПоСредней = Новый Массив();  
	
	МассивСчетаПоСредней.Добавить("10.01");
	МассивСчетаПоСредней.Добавить("10.02");
	МассивСчетаПоСредней.Добавить("10.03");
	МассивСчетаПоСредней.Добавить("10.04");
	МассивСчетаПоСредней.Добавить("10.05");
	МассивСчетаПоСредней.Добавить("10.06.1");
	МассивСчетаПоСредней.Добавить("10.09");
	МассивСчетаПоСредней.Добавить("10.10");

	Возврат МассивСчетаПоСредней;

КонецФункции // ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений()

// Функция возвращает счета учета номенклатры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатурыПоПартиямХозрасчетный() Экспорт

	МассивСчетаПартионныйУчет = Новый Массив;
	ПланСчетов = ПланыСчетов.Хозрасчетный;
	
	МассивСчетаПартионныйУчет.Добавить(ПланСчетов.ОборудованиеКУстановке); //07  
	МассивСчетаПартионныйУчет.Добавить(ПланСчетов.ПриобретениеОбъектовОсновныхСредств); //"08.04");  
	МассивСчетаПартионныйУчет.Добавить(ПланСчетов.ПриобретениеНематериальныхАктивов); //"08.05");    
    МассивСчетаПартионныйУчет.Добавить(ПланСчетов.НайтиПоКоду("08.09"));    
	МассивСчетаПартионныйУчет.Добавить(ПланСчетов.НайтиПоКоду("10.06.2"));
    МассивСчетаПартионныйУчет.Добавить(ПланСчетов.СтроительныеМатериалы); //"10.08");
    МассивСчетаПартионныйУчет.Добавить(ПланСчетов.НайтиПоКоду("10.12"));
    МассивСчетаПартионныйУчет.Добавить(ПланСчетов.ТоварыНаСкладах); //"41.01");
    МассивСчетаПартионныйУчет.Добавить(ПланСчетов.ГотоваяПродукция); //"43");
    МассивСчетаПартионныйУчет.Добавить(ПланСчетов.НайтиПоКоду("97.22"));
	
	Возврат МассивСчетаПартионныйУчет;
	
КонецФункции // ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений()

// Функция возвращает счета учета номенклатры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатурыПоСреднейХозрасчетный() Экспорт

	МассивСчетаПоСредней = Новый Массив;  
	ПланСчетов = ПланыСчетов.Хозрасчетный;
	
	МассивСчетаПоСредней.Добавить(ПланСчетов.СырьеИМатериалы); //"10.01");
	МассивСчетаПоСредней.Добавить(ПланСчетов.ПокупныеПолуфабрикатыИКомплектующие); //"10.02");
	МассивСчетаПоСредней.Добавить(ПланСчетов.Топливо); //"10.03");
	МассивСчетаПоСредней.Добавить(ПланСчетов.Тара); //"10.04");
	МассивСчетаПоСредней.Добавить(ПланСчетов.ЗапасныеЧасти); //"10.05");
	МассивСчетаПоСредней.Добавить(ПланСчетов.НайтиПоКоду("10.06.1"));
	МассивСчетаПоСредней.Добавить(ПланСчетов.ИнвентарьИХозяйственныеПринадлежности); //"10.09");
	МассивСчетаПоСредней.Добавить(ПланСчетов.СпецоснасткаИСпецодеждаНаСкладе); //"10.10");

	Возврат МассивСчетаПоСредней;

КонецФункции // ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений()
/////////

//
Процедура абс_ПередЗаписьюКонтрольФлагаНУПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
	   И (Источник.ОтражатьВБухгалтерскомУчете
	   И Не Источник.ОтражатьВНалоговомУчете) Тогда
	      ttk_ОбщегоНазначения.СообщитьОбОшибке("Необходимо установить признак ""Отражать в налоговом учете""!", Отказ);
   КонецЕсли;
   
КонецПроцедуры

Функция ЭтоПользовательДЗО(Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ГруппыПользователейПользователиГруппы.Ссылка.абс_ЭтоДЗО
	               |ИЗ
	               |	Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
	               |ГДЕ
	               |	ГруппыПользователейПользователиГруппы.Пользователь = &Пользователь
	               |	И ГруппыПользователейПользователиГруппы.Ссылка.абс_ЭтоДЗО = ИСТИНА";
				   
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ИСТИНА;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Функция абс_МожноВыбирать(ЗначениеВыбора) Экспорт
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.НоменклатурныеГруппы") 
		или ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		
		Возврат ЗначениеВыбора.абс_ИспользуетсяДляОтчетов;
	КонецЕсли;
	Возврат Истина;
КонецФункции

//абс_Стрельцов+ добавлено: 25.09.2012
//---------------------------------------------
Процедура абс_ПолучитьВсехРодителейПроекта(ТекущийПроект, СписокГрупп) Экспорт
	
	РодительПроекта = ТекущийПроект.Родитель;
	Если РодительПроекта.Пустая() Тогда
		Возврат;
	Иначе
		СписокГрупп.Добавить(РодительПроекта);
		абс_ПолучитьВсехРодителейПроекта(РодительПроекта, СписокГрупп)
	КонецЕсли;	                      
	
КонецПроцедуры

Функция абс_МожноВыбиратьГруппуПроекта(Знач ЗначениеВыбора) Экспорт
	
	Если ЗначениеВыбора.абс_Case Тогда
		Возврат Истина;
	КонецЕСли;
	
	//Если Справочники.ТипВсеСсылки().Типы().Найти(ТипЗнч(ЗначениеВыбора)) = Неопределено Тогда
	//	ОбъектЗначенияВыбора  = ЗначениеВыбора;
	//Иначе
	//	ОбъектЗначенияВыбора = ЗначениеВыбора.ПолучитьОбъект();
	//КонецЕсли;
	
	СписокГрупп = Новый СписокЗначений;
	абс_ПолучитьВсехРодителейПроекта(ЗначениеВыбора.Ссылка, СписокГрупп);
	Для Каждого с Из СписокГрупп Цикл
		
		Если с.Значение.абс_Case Тогда 
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция абс_ПоискПроекта(ЭлементИсточник) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "";
	
	Возврат  Результат;
	
КонецФункции
//---------------------------------------------
//абс_Стрельцов-

Процедура абс_ОткрытьОтладчик() Экспорт
	
	ВызватьИсключение "Нажмите кнопку ""Подробно"", а затем ""Конфигуратор"", чтобы перейти в конфигуратор!";
	
КонецПроцедуры

//абсо{

// Процедура очищает движения документа по регистрам подсистемы НДС.
//
Процедура ОчиститьДвиженияРегистровНДС(ДокументОбъект, ДокументСсылка)
	
	НаличиеРеквизитаВидРегламентнойОперацииВРегистре = Новый Соответствие;
	НаличиеРеквизитаСписаниеПартийВРегистре = Новый Соответствие;
	
	РасчетыВУсловныхЕдиницах = ДокументОбъект.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Инд = НаборЗаписей.Количество();
		Пока Инд > 0 Цикл
			Инд = Инд - 1;
			Удалять = НаборЗаписей[Инд].ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПроведениеДокументовПоНДС;
			Если Удалять Тогда
				НаборЗаписей.Удалить(Инд);
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;		
	
	НеУдлятьКорректировкуВалютныхРасчетов = (НЕ РасчетыВУсловныхЕдиницах);
	
	Для Каждого Движение Из ДокументОбъект.Движения Цикл
		
		Если ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСВключенныйВСтоимость")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСКосвенныеРасходы")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСНачисленный")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСНезавершенноеПроизводство")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСПартииТоваров")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСПредъявленный")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСПредъявленныйРеализация0")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСРеализация0")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСсАвансов")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСЗаписиКнигиПокупок")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСЗаписиКнигиПродаж")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСпоОСиНМА")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСУчетРаспределенныхОплатПоставщикам")
		 Тогда
		 	текМетаданные = Движение.Метаданные();
		 	НаборЗаписей = РегистрыНакопления[текМетаданные.Имя].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			Если НаличиеРеквизитаСписаниеПартийВРегистре[ТипЗнч(Движение)] = Неопределено Тогда
				НаличиеРеквизитаСписаниеПартийВРегистре.Вставить(ТипЗнч(Движение), Не текМетаданные.Реквизиты.Найти("СписаниеПартий") = Неопределено);
			КонецЕсли;
			Если НаличиеРеквизитаВидРегламентнойОперацииВРегистре[ТипЗнч(Движение)] = Неопределено Тогда
				НаличиеРеквизитаВидРегламентнойОперацииВРегистре.Вставить(ТипЗнч(Движение), Не текМетаданные.Реквизиты.Найти("ВидРегламентнойОперации") = Неопределено);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				Если НаличиеРеквизитаВидРегламентнойОперацииВРегистре[ТипЗнч(Движение)] 
					И (НеУдлятьКорректировкуВалютныхРасчетов) Тогда
					// Если в регистре есть реквизит "ВидРегламентнойОперации", строки списания партий будут затерты партионным
					// учетом при вызове соотвествущей процедуры
					Инд = НаборЗаписей.Количество();
					Пока Инд > 0 Цикл
						Инд = Инд - 1;
						Удалять = НЕ НаборЗаписей[Инд].ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах;
						Если Удалять Тогда
							НаборЗаписей.Удалить(Инд);
						КонецЕсли;
					КонецЦикла;
					НаборЗаписей.Записать(Истина);
				Иначе
					НаборЗаписей.Очистить();
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьДвиженияРегистровНДС()

Процедура ОбработкаПроведенияКорректировокПоРегистрамНДС(Источник, Отказ, РежимПроведения) Экспорт
	
	Ссылка = Источник.Ссылка;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		ОчиститьДвиженияРегистровНДС(Источник, Ссылка);
		
		СтруктураШапкиДокумента = Новый Структура;
		Заголовок = "";
		Источник.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		
		УчетНДСФормированиеДвижений.ПровестиКорректировкуПоступленияПоРегистрамНДС(СтруктураШапкиДокумента, Ссылка);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ОчиститьДвиженияРегистровНДС(Источник, Ссылка);
		
		СтруктураШапкиДокумента = Новый Структура;
		Заголовок = "";
		Источник.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		
		// {{KM WARE Малыгин П.К. Заявка № 35884 30.12.2015 начало
		// 
		// {{Старый код:
		//УчетНДСФормированиеДвижений.ПровестиКорректировкуРеализацииПоРегистрамНДС(СтруктураШапкиДокумента, Ссылка);
		// }}Новый код:
// +++ввв 14.11.2016 г.
		//Если НЕ (ТипЗнч(Ссылка.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") И ТипЗнч(Ссылка.ИсправляемыйДокументРеализации.абс_ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
		Если НЕ (ТипЗнч(Ссылка.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") И ((ТипЗнч(Ссылка.ИсправляемыйДокументРеализации.абс_ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")) ИЛИ (ТипЗнч(Ссылка.ИсправляемыйДокументРеализации.абс_ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации")))) Тогда
// ---ввв 14.11.2016 г.
			УчетНДСФормированиеДвижений.ПровестиКорректировкуРеализацииПоРегистрамНДС(СтруктураШапкиДокумента, Ссылка);
		
		Иначе
			
			УчетНДСФормированиеДвижений.KWR_ПровестиКорректировкуРеализацииПоРегистрамНДС(СтруктураШапкиДокумента, Ссылка);	
			
		КонецЕсли;
		// }}KM WARE Малыгин П.К. Заявка № 35884 30.12.2015 окончание 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура абс_ПроверкаНеПроверенныхЗадач() Экспорт
	
	Возврат;
	
	Попытка
		Обработки.абс_ПроверкаНеЗакрытыхЗадач.ПолучитьФорму("Форма").ОткрытьМодально();
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

// Функция проверяет счета расчетов с поставщиками и покупателями на предмет соответствия счета расчетов, счету авансов
// ВидВзаиморасчетов - строка "Поставщики" или "Покупатели"
Функция ПроверитьСчетаРасчетовАвансов(СчетВзаиморасчетов, СчетАвансов, ВидВзаиморасчетов, Отказ) Экспорт
	
	СтруктураСчетов = абс_ПроцедурыСПовторнымВызовом.ПолучитьСтруктуруСчетовВзаиморасчетов();
	
	СуффиксВзаиморасчетов = "";
	
	Если ВидВзаиморасчетов = "Поставщики" Тогда
		
		СуффиксВзаиморасчетов = "Приобретению";
		
	ИначеЕсли ВидВзаиморасчетов = "Покупатели" Тогда
		
		СуффиксВзаиморасчетов = "Реализации";
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
			
	Если СчетВзаиморасчетов = СтруктураСчетов["АвансыПо" + СуффиксВзаиморасчетов + "Руб"] ИЛИ
		 СчетВзаиморасчетов = СтруктураСчетов["АвансыПо" + СуффиксВзаиморасчетов + "Вал"] ИЛИ
		 СчетВзаиморасчетов = СтруктураСчетов["АвансыПо" + СуффиксВзаиморасчетов + "УЕ"] ИЛИ
		 (СчетВзаиморасчетов = СтруктураСчетов["РасчетыПо" + СуффиксВзаиморасчетов + "Руб"] 	И НЕ СчетАвансов = СтруктураСчетов["АвансыПо" + СуффиксВзаиморасчетов + "Руб"]) ИЛИ 
		 (СчетВзаиморасчетов = СтруктураСчетов["РасчетыПо" + СуффиксВзаиморасчетов + "Вал"] 	И НЕ СчетАвансов = СтруктураСчетов["АвансыПо" + СуффиксВзаиморасчетов + "Вал"]) ИЛИ 
		 (СчетВзаиморасчетов = СтруктураСчетов["РасчетыПо" + СуффиксВзаиморасчетов + "УЕ"] 		И НЕ СчетАвансов = СтруктураСчетов["АвансыПо" + СуффиксВзаиморасчетов + "УЕ"]) Тогда 
		 
		Отказ = Истина;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
              
Процедура абс_ПлановыеРегламентныеРаботы() Экспорт
	
	ДатаКонтроля = абс_СерверныеФункции.ПолучитьДатуСервера(); 	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	абс_ПлановыеРегламентныеРаботы.ДатаНачала КАК ПерерывС,
	               |	абс_ПлановыеРегламентныеРаботы.ДатаОкончания КАК ПерерывПо,
	               |	абс_ПлановыеРегламентныеРаботы.Наименование КАК Событие,
	               |	абс_ПлановыеРегламентныеРаботы.ПолноеОписание,
	               |	РАЗНОСТЬДАТ(абс_ПлановыеРегламентныеРаботы.ДатаНачала, абс_ПлановыеРегламентныеРаботы.ДатаОкончания, МИНУТА) КАК ВМинутах,
	               |	РАЗНОСТЬДАТ(&ДатаНачала, абс_ПлановыеРегламентныеРаботы.ДатаНачала, МИНУТА) КАК Осталось
	               |ИЗ
	               |	Справочник.абс_ПлановыеРегламентныеРаботы КАК абс_ПлановыеРегламентныеРаботы
	               |ГДЕ
	               |	абс_ПлановыеРегламентныеРаботы.ДатаНачала >= &ДатаНачала
	               |	И абс_ПлановыеРегламентныеРаботы.ДатаОкончания <= &ДатаОкончания
	               |	И (НЕ абс_ПлановыеРегламентныеРаботы.ПометкаУдаления)
	               |	И РАЗНОСТЬДАТ(&ДатаНачала, абс_ПлановыеРегламентныеРаботы.ДатаНачала, МИНУТА) <= 60
	               |	И РАЗНОСТЬДАТ(&ДатаНачала, абс_ПлановыеРегламентныеРаботы.ДатаНачала, МИНУТА) >= 0";
				   
	Запрос.УстановитьПараметр("ДатаНачала",ДатаКонтроля);
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ДатаКонтроля));   
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Попытка  			
			Форма = Обработки.абс_ВспомогательныеФормы.ПолучитьФорму("абс_ФормаПроверкиРегламентныхРабот",,"проверка");
			ЗначениеВДанныеФормы(Результат,Форма.Таблица);
			Если НЕ Форма.Открыта() Тогда
				Форма.Открыть();
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

Процедура абс_ПлановыеРегламентныеРаботыЗаВесьДень() Экспорт
	
	ДатаКонтроля = абс_СерверныеФункции.ПолучитьДатуСервера(); 	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	абс_ПлановыеРегламентныеРаботы.ДатаНачала КАК ПерерывС,
	               |	абс_ПлановыеРегламентныеРаботы.ДатаОкончания КАК ПерерывПо,
	               |	абс_ПлановыеРегламентныеРаботы.Наименование КАК Событие,
	               |	абс_ПлановыеРегламентныеРаботы.ПолноеОписание,
	               |	РАЗНОСТЬДАТ(абс_ПлановыеРегламентныеРаботы.ДатаНачала, абс_ПлановыеРегламентныеРаботы.ДатаОкончания, МИНУТА) КАК ВМинутах,
	               |	РАЗНОСТЬДАТ(&ДатаНачала, абс_ПлановыеРегламентныеРаботы.ДатаНачала, МИНУТА) КАК Осталось
	               |ИЗ
	               |	Справочник.абс_ПлановыеРегламентныеРаботы КАК абс_ПлановыеРегламентныеРаботы
	               |ГДЕ
	               |	абс_ПлановыеРегламентныеРаботы.ДатаНачала >= &ДатаНачала
	               |	И абс_ПлановыеРегламентныеРаботы.ДатаОкончания <= &ДатаОкончания
	               |	И (НЕ абс_ПлановыеРегламентныеРаботы.ПометкаУдаления)";
				   
	Запрос.УстановитьПараметр("ДатаНачала",ДатаКонтроля);
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ДатаКонтроля));   
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Попытка  			
			Форма = Обработки.абс_ВспомогательныеФормы.ПолучитьФорму("абс_ФормаПроверкиРегламентныхРабот",,"проверка");
			ЗначениеВДанныеФормы(Результат,Форма.Таблица);
			Если не Форма.Открыта() Тогда
				Форма.Открыть();
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

//АБС ВСТАВКА №31118 НАЧАЛО «20 февраля 2015 г.», Пополитов
Процедура абс_ПроверитьВывестиСообщенияСервера() Экспорт
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	Возврат;
	#КонецЕсли	
	 	
	Попытка
		
		ВыводитьСообщенияВПанельКомментариев = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ВыводитьСообщенияВПанельКомментариев");
		ТекстСообщенияСервера = ПолныеПрава.абс_ПрочитатьОшибкиСервера();
		Если не ЗначениеЗаполнено(ТекстСообщенияСервера) или не ВыводитьСообщенияВПанельКомментариев Тогда		
			Возврат
		КонецЕсли;		
		
		МассикОшибок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстСообщенияСервера,"#");		
		ФормаОбработкиКомментариев = Обработки.СообщенияВыполняемыхДействий.ПолучитьФорму();
		Если ФормаОбработкиКомментариев.Открыта() Тогда
			ОбработкаКомментариев = ФормаОбработкиКомментариев.ОбработкаОбъект;
		Иначе
			ОбработкаКомментариев = Обработки.СообщенияВыполняемыхДействий.Создать();
		КонецЕсли;       
		ОбработкаКомментариев.УдалитьСообщения();
		ОбработкаКомментариев.ДобавитьСообщение("Ошибки за последние "+абс_УправлениеСеансомТонкогоКлиентаСервер.ПолучитьИнтервалПроверкиСообщенийНаСервере()+" сек.", Перечисления.ВидыСообщений.Раздел);
		Для Каждого Строка Из МассикОшибок Цикл
			ОбрСтрока = СокрЛП(СтрЗаменить(Строка,"#",""));
			ОбработкаКомментариев.ДобавитьСообщение(ОбрСтрока,Перечисления.ВидыСообщений.ВажнаяИнформация,,,Истина);	
		КонецЦикла;	
		ОбработкаКомментариев.ПоказатьСообщения();		
	
	Исключение
		//...
	КонецПопытки;	
	
КонецПроцедуры	
//\\АБС ВСТАВКА №31118 КОНЕЦ 

Функция ПолучитьТаблицуДубликатовДоговоров(МассивДоговоров) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.Владелец.ИНН,
	|	ДоговорыКонтрагентов.Владелец.КПП,
	|	ДоговорыКонтрагентов.Номер,
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	ДоговорыКонтрагентов.абс_ЛицевойСчетБиллинга,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	|ПОМЕСТИТЬ ВТ_ДоговорыДляПроверки
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&СпДоговоров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДоговорыДляПроверки.Ссылка КАК ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагентаДубль
	|ИЗ
	|	ВТ_ДоговорыДляПроверки КАК ВТ_ДоговорыДляПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТ_ДоговорыДляПроверки.Ссылка <> ДоговорыКонтрагентов.Ссылка
	|			И ВТ_ДоговорыДляПроверки.Организация = ДоговорыКонтрагентов.Организация
	|			И ВТ_ДоговорыДляПроверки.ВладелецИНН = ДоговорыКонтрагентов.Владелец.ИНН
	|			И ВТ_ДоговорыДляПроверки.ВладелецКПП = ДоговорыКонтрагентов.Владелец.КПП
	|			И ВТ_ДоговорыДляПроверки.Номер = ДоговорыКонтрагентов.Номер
	|			И ВТ_ДоговорыДляПроверки.ВидДоговора = ДоговорыКонтрагентов.ВидДоговора
	|			И ВТ_ДоговорыДляПроверки.абс_ЛицевойСчетБиллинга = ДоговорыКонтрагентов.абс_ЛицевойСчетБиллинга
	|			И ВТ_ДоговорыДляПроверки.ВалютаВзаиморасчетов = ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.Ссылка ЕСТЬ NULL )
	|	И ДоговорыКонтрагентов.абс_СтатусДоговора в (&СтатусИсполнение)
	|	И (НЕ ДоговорыКонтрагентов.Ссылка В (&СпДоговоров))
	|	И ДоговорыКонтрагентов.Номер <> """"");
	
	Запрос.УстановитьПараметр("СпДоговоров", МассивДоговоров);
	
	//родин лимиты по договорам
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);
	МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Корректировка);
	МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки);
	МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
	//родин лимиты по договорам
	
	Запрос.УстановитьПараметр("СтатусИсполнение", МассивСтатусов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура абс_ПоискВWORD(СтрокаПоиска, Doc, Описание, Сообщение) Экспорт
	
	Попытка
		
		Если Doc <> Неопределено Тогда  
			
			Word = Новый COMОбъект("Word.Application"); 
			Word.Visible = Ложь;
			Word.Documents.Open(Doc); 
			
		Иначе	
			Сообщение = "Не удалось подключиться: " + Описание;
			Возврат;
		КонецЕсли; 	
		
	Исключение
		Сообщение = "Не удалось подключиться: " + Описание;
		Возврат;	
	КонецПопытки;
	
	НайденТекст = Word.Application.Selection.Find.Execute(СтрокаПоиска);	
	
	Если НайденТекст = Истина Тогда
		Сообщение ="Найдено в : " + Описание;
	Иначе
		Сообщение ="НЕ Найдено в : " + Описание;		
	КонецЕсли;
	
	Word.Quit();	
	
КонецПроцедуры	

Процедура абс_ОповещениеПользователей() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	
	РС = РегистрыСведений.абс_ПерсональноеОзнакомление.ПолучитьФорму("Форма",,"проверка");
	
	РС.ПолучитьДанныеДляОзнакомления();
	
	Если РС.ТабличноеПоле.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РС.Открыта() Тогда
		Отказ = РС.ОткрытьМодально();                              
		Если Отказ = истина Тогда
			// безусловное завершение работы программы
			ЗавершитьРаботуСистемы(Ложь);
 		КонецЕсли;	
	КонецЕсли;
	
	#КонецЕсли

КонецПроцедуры

//АБС Пугачев 11.01.2013

// ЗаполнитьТаблицуПараметровЗапроса(ТекстЗапроса, ТаблицаПараметров)
// Заполняет таблице значений ТаблицаПараметров параметрами запроса,
// инициализируя значение пустой ссылкой или нулевым значением, если
// его тип определен. Если параметр уже есть в таблице, то он не перезаполняется
//
// ТекстЗапроса - текст запроса, из которого нужно получить параметры
// ТаблицаПараметров - таблица значений с колонками Параметр и Значение
// ИсключаемыеПараметры - строка с перечисленными через запятую именами параметров,
//   которые не нужно добавлять в таблицу
Процедура ЗаполнитьТаблицуПараметровЗапроса(ТекстЗапроса, ТаблицаПараметров, ИсключаемыеПараметры = "") Экспорт
	
	МассивИменИсключаемыхПараметров = Новый Массив;
	Если ИсключаемыеПараметры<>Неопределено И ЗначениеЗаполнено(ИсключаемыеПараметры) Тогда
		СтрокиПараметров = СтрЗаменить(ИсключаемыеПараметры,",",Символы.ПС);
		КоличествоИсключаемыхПараметров = СтрЧислоСтрок(СтрокиПараметров);
		Для Сч = 1 По КоличествоИсключаемыхПараметров Цикл
			МассивИменИсключаемыхПараметров.Добавить(СокрЛП(СтрПолучитьСтроку(СтрокиПараметров, Сч)));
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		Запрос = Новый Запрос(ТекстЗапроса);
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		Возврат;
	КонецПопытки;
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		ИмяПараметра = ПараметрЗапроса.Имя;
		
		Если МассивИменИсключаемыхПараметров.Найти(ИмяПараметра)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем, что параметра в таблице еще нет
		СтрокаПараметра = ТаблицаПараметров.Найти(ИмяПараметра, "Параметр");
		Если СтрокаПараметра=Неопределено Тогда
			// параметра нет - добавляем
			СтрокаПараметра = ТаблицаПараметров.Добавить();
			СтрокаПараметра.Параметр = ИмяПараметра;
			
			ТипыПараметра = ПараметрЗапроса.ТипЗначения.Типы();
			Если ТипыПараметра.Количество()=1 Тогда
				// инициализируем значение только если тип параметра определен
				ТипПараметра = ТипыПараметра[0];
				Если ТипПараметра=Тип("Строка") Тогда
					СтрокаПараметра.Значение = "";
				ИначеЕсли ТипПараметра=Тип("Число") Тогда
					СтрокаПараметра.Значение = 0;
				ИначеЕсли ТипПараметра=Тип("Дата") Тогда
					СтрокаПараметра.Значение = Дата("00010101");
				ИначеЕсли ТипПараметра=Тип("Булево") Тогда
					СтрокаПараметра.Значение = Ложь;
				ИначеЕсли ТипПараметра=Тип("СписокЗначений") Тогда
					СтрокаПараметра.Значение = Новый СписокЗначений;
				Иначе
					СтрокаПараметра.Значение = Новый(ТипПараметра);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//АБС+ Тупиков 15615
Процедура ПроверкаРасчетыВУЕПриПроведениеДокументов(Источник, Отказ, РежимПроведения) Экспорт
	
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 19:03:07  Поставка
	Если НЕ глЗначениеПеременной("абс_КонтрольСчетовРасчетовСКонтрагентомИДоговоровВУЕ") Тогда
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 		
		Возврат;
	КонецЕсли;
	
	Если Источник.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") = Неопределено 
		ИЛИ Источник.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") = Неопределено
		ИЛИ Источник.Метаданные().Реквизиты.Найти("ВалютаДокумента") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	Хозрасчетный.Ссылка КАК Счет,
	              |	Хозрасчетный.Наименование
	              |ИЗ
	              |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	              |ГДЕ
	              |	Хозрасчетный.Наименование ПОДОБНО ""%"" + &Наименование + ""%""" ;
	Запрос.УстановитьПараметр("Наименование", "в у.е");
	
	СписокСчетовУЕ = Запрос.Выполнить().Выгрузить();
	
	Документ = Источник.Ссылка;
	
	СтрокаСообщения = "Счета взаиморасчетов не соответствуют договору!";
	
	НайденныйСчетУЕ = СписокСчетовУЕ.Найти(Документ.СчетУчетаРасчетовСКонтрагентом,"Счет");
	Если Документ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах И НайденныйСчетУЕ = Неопределено Тогда
		Сообщить(СтрокаСообщения);
		Отказ = Истина;		
	КонецЕсли;
	
	Если НЕ Документ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах 
		И Документ.ВалютаДокумента <> мВалютаРегламентированногоУчета 
		И НЕ Документ.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
		Сообщить(СтрокаСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	Если Документ.ВалютаДокумента = мВалютаРегламентированногоУчета 
		И (Документ.СчетУчетаРасчетовСКонтрагентом.Валютный ИЛИ НайденныйСчетУЕ <> Неопределено) Тогда
		Сообщить(СтрокаСообщения);
		Отказ = Истина;
	КонецЕсли;
				
КонецПроцедуры

//АБС- Тупиков

//АБС ВСТАВКА 34669  07.11.2013 14:04:15  Мачихина
Процедура ПроверкаСерииНоменклатурыПосчетамСерийногоУчета(Источник, Отказ, РежимПроведения) Экспорт
	
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 19:04:32  Поставка
	Если глЗначениеПеременной("абс_ОтменитьКонтрольСерииНоменклатурыПосчетамСерийногоУчета") Тогда
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
		Возврат;
	КонецЕсли;
	
		
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура,
	              |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета,
	              |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СерияНоменклатуры,
	              |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоОборот,
	              |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьОборот
	              |ИЗ
	              |	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Обороты(
	              |			,
	              |			,
	              |			Регистратор,
	              |			Организация = &Организация
	              |				И СчетУчета В (&СерийныеСчетаУчета)
	              |				И СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	              |				И Номенклатура.ВестиПартионныйУчетПоСериям) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОбороты
	              |ГДЕ
	              |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Регистратор = &Регистратор" ;
				  
	Запрос.УстановитьПараметр("Организация", Источник.Ссылка.Организация);
	СерийныеСчетаУчета=Новый Массив;
	СерийныеСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке); //07
	СерийныеСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);//08.4
    СерийныеСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеВзрослыхЖивотных); //08.07
	СерийныеСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.12"));
	СерийныеСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.06.2"));
	СерийныеСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СтроительныеМатериалы); //10.08
	СерийныеСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе);//10.10
	СерийныеСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("97.22"));

	Запрос.УстановитьПараметр("СерийныеСчетаУчета", СерийныеСчетаУчета);
	Запрос.УстановитьПараметр("Регистратор", Источник.Ссылка);

	 	
	СписокЗаписейБУБезСерииНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Документ = Источник.Ссылка;
	
	СтрокаСообщения = "В документе используется Номенклатура с настройкой 'Вести партионный учет по сериям', а Серия номенклатуры не задана!";
	
	Если СписокЗаписейБУБезСерииНоменклатуры.Количество()>0 Тогда
		Сообщить(СтрокаСообщения);
		Отказ = Истина;		
	КонецЕсли;
	
					
КонецПроцедуры

//АБС ВСТАВКА 34669 КОНЕЦ

Процедура абс_ПроверкаНаДоступностьВводаСправочникаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		Если не РольДоступна("ПолныеПрава") Тогда
			Отказ = Истина;
			Сообщить("Ввод новых и изменение элементов не доступен");
		КонецЕсли;
	
	
КонецПроцедуры
	
Процедура абс_КонтрольИспользованияЦФОиПодразделенияОрганизации(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//АБС+ Тупиков 17571
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 19:05:08  Поставка
	Если НЕ глЗначениеПеременной("абс_КонтрольИспользованияЦФОиПодразделенияОрганизаций") или Источник.ОбменДанными.Загрузка Тогда
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА №30706 НАЧАЛО «14 января 2015 г.», Пополитов
	СписокДокументовИсключения = Новый СписокЗначений;	
 	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_ЗаявкаНаДобавлениеИзменениеПрав")); 	   	
	
	////sladkov 09 01 2017 ++ 
	//СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_СчетНаОплату")); 
	//СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_Оплата")); 
	//СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_Платеж")); 
	//СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ЗаявкаНаРасходованиеСредств")); 
	//СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее")); 
	////sladkov 09 01 2017 -- 
	
	
	Если не СписокДокументовИсключения.НайтиПоЗначению(ТипЗнч(Источник)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//\\АБС ВСТАВКА №30706 КОНЕЦ		
	
	Для Каждого Реквизит Из Источник.Метаданные().Реквизиты Цикл
		
		РеквизитИсточника = Источник[Реквизит.Имя];
		
		Если ТипЗнч(РеквизитИсточника) = Тип("СправочникСсылка.Подразделения") и не РеквизитИсточника.Пустая() Тогда
			//АБС ИЗМЕНЕНИЕ 37103  31.12.2013 9:16:47  Шамов
			//Если РеквизитИсточника.абс_ГодИспользования <> Дата(1,1,1) И РеквизитИсточника.абс_ГодИспользования <> НачалоГода(Источник.Дата) Тогда
			//	//АБС ИЗМЕНЕНИЕ 35838  02.12.2013 14:20:47  Мачихина
			//	Если Источник.Метаданные().Имя<>"КорректировкаПоступления" Тогда
			//		ttk_ОбщегоНазначения.СообщитьОбОшибке("Подразделения: "+РеквизитИсточника +" , код подразделения «"+СокрЛП(РеквизитИсточника.Код)+"»", Отказ);
			//		ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит: " + Реквизит + " не используется в " + Формат(Источник.Дата,"ДФ=yyyy") + " году", Отказ);
			//	КонецЕсли;
			//	//АБС ИЗМЕНЕНИЕ 35838 КОНЕЦ
			//КонецЕсли;
			ГодДокумента = НачалоГода(Источник.Дата);
			Использовать = Ложь;
			Для Каждого СтрокаТЧ Из РеквизитИсточника.абс_ПериодыИспользования Цикл
				Если СтрокаТЧ.Период = ГодДокумента И СтрокаТЧ.Использование Тогда
					Использовать = Истина;
				КонецЕсли;
			КонецЦикла;
			Если НЕ Использовать Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Подразделения: "+РеквизитИсточника +" , код подразделения «"+СокрЛП(РеквизитИсточника.Код)+"»", Отказ);
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит: " + Реквизит + " не используется в " + Формат(Источник.Дата,"ДФ=yyyy") + " году", Отказ);
			КонецЕсли;
			//АБС ИЗМЕНЕНИЕ 37103 КОНЕЦ
		ИначеЕсли ТипЗнч(РеквизитИсточника) = Тип("СправочникСсылка.ПодразделенияОрганизаций") и не РеквизитИсточника.Пустая() Тогда
			Если НЕ РеквизитИсточника.абс_Используется Тогда
				//АБС ИЗМЕНЕНИЕ 35838  02.12.2013 14:20:47  Мачихина
				Если Источник.Метаданные().Имя<>"КорректировкаПоступления" Тогда
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Подразделения организации: "+РеквизитИсточника +" , код подразделения организации «"+СокрЛП(РеквизитИсточника.Код)+"»", Отказ);
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит: " + Реквизит + " не используется.", Отказ);
				КонецЕсли;
				//АБС ИЗМЕНЕНИЕ 35838 КОНЕЦ
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	Для Каждого ТабЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Для Каждого РеквизитТабЧасти Из ТабЧасть.Реквизиты Цикл
			Для Каждого Строка Из Источник[ТабЧасть.Имя] Цикл
				РеквизитТабЧастиИсточника = Строка[РеквизитТабЧасти.Имя];
				Если ТипЗнч(РеквизитТабЧастиИсточника) = Тип("СправочникСсылка.Подразделения") и не РеквизитТабЧастиИсточника.Пустая() Тогда
					//АБС ИЗМЕНЕНИЕ 37103  31.12.2013 9:16:47  Шамов
					//Если РеквизитТабЧастиИсточника.абс_ГодИспользования <> Дата(1,1,1) И РеквизитТабЧастиИсточника.абс_ГодИспользования <> НачалоГода(Источник.Дата) Тогда
					//	//АБС ИЗМЕНЕНИЕ 35838  02.12.2013 14:20:47  Мачихина
					//	Если Источник.Метаданные().Имя<>"КорректировкаПоступления" Тогда
					//		ttk_ОбщегоНазначения.СообщитьОбОшибке("Подразделения: "+РеквизитТабЧастиИсточника +" , код подразделения «"+СокрЛП(РеквизитТабЧастиИсточника.Код)+"»", Отказ);
					//		ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит: " + РеквизитТабЧасти + " в строке " + 
					//		Строка.НомерСтроки + " табличной части «" + ТабЧасть + "» не используется в " + Формат(Источник.Дата,"ДФ=yyyy") + " году", Отказ);
					//	КонецЕсли;
					//КонецЕсли;
					////АБС ИЗМЕНЕНИЕ 35838 КОНЕЦ
					ГодДокумента = НачалоГода(Источник.Дата);
					Использовать = Ложь;
					Для Каждого СтрокаТЧ Из РеквизитТабЧастиИсточника.абс_ПериодыИспользования Цикл
						Если СтрокаТЧ.Период = ГодДокумента И СтрокаТЧ.Использование Тогда
							Использовать = Истина;
						КонецЕсли;
					КонецЦикла;
					Если НЕ Использовать И Источник.Метаданные().Имя<>"КорректировкаПоступления" Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Подразделения: "+РеквизитТабЧастиИсточника +" , код подразделения «"+СокрЛП(РеквизитТабЧастиИсточника.Код)+"»", Отказ);
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит: " + РеквизитТабЧасти + " в строке " + 
						Строка.НомерСтроки + " табличной части «" + ТабЧасть + "» не используется в " + Формат(Источник.Дата,"ДФ=yyyy") + " году", Отказ);
					КонецЕсли;
					//АБС ИЗМЕНЕНИЕ 37103 КОНЕЦ
				ИначеЕсли ТипЗнч(РеквизитТабЧастиИсточника) = Тип("СправочникСсылка.ПодразделенияОрганизаций") и не РеквизитТабЧастиИсточника.Пустая() Тогда
					Если НЕ РеквизитТабЧастиИсточника.абс_Используется Тогда
						//АБС ИЗМЕНЕНИЕ 35838  02.12.2013 14:20:47  Мачихина
						Если Источник.Метаданные().Имя<>"КорректировкаПоступления" Тогда
							ttk_ОбщегоНазначения.СообщитьОбОшибке("Подразделения организации: "+РеквизитТабЧастиИсточника +" , код подразделения организации «"+СокрЛП(РеквизитТабЧастиИсточника.Код)+"»", Отказ);
							ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит: " + РеквизитТабЧасти + " в строке " + 
							Строка.НомерСтроки + " табличной части «" + ТабЧасть + "» не используется.", Отказ);
						КонецЕсли;
					КонецЕсли;
					//АБС ИЗМЕНЕНИЕ 35838 КОНЕЦ
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	//АБС- Тупиков
	
КонецПроцедуры

Процедура абс_КонтрольИспользованияСтатьиДДСПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//АБС ВСТАВКА №18480 НАЧАЛО
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 19:05:41  Поставка
	Если НЕ глЗначениеПеременной("абс_КонтрольИспользованияСтатьиДДС") или Источник.ОбменДанными.Загрузка Тогда
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
		Возврат;
	КонецЕсли;
	
	ГодИспользованияСтатьиДДС = Формат(абс_СерверныеФункции.ПолучитьДатуСервера(),"ДФ=yyyy");
	
	Для Каждого Реквизит Из Источник.Метаданные().Реквизиты Цикл 		
		РеквизитИсточника = Источник[Реквизит.Имя];		
		Если ТипЗнч(РеквизитИсточника) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") и не РеквизитИсточника.Пустая() Тогда
			Если РеквизитИсточника.абс_НеИспользовать Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Статья ДДС: "+РеквизитИсточника +" , код статьи ДДС «"+СокрЛП(РеквизитИсточника.Код)+"»", Отказ);
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит: " + Реквизит + " не используется в " + ГодИспользованияСтатьиДДС + " году", Отказ);
			КонецЕсли;
		КонецЕсли; 			
	КонецЦикла;
	
	Для Каждого ТабЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Для Каждого РеквизитТабЧасти Из ТабЧасть.Реквизиты Цикл
			Для Каждого Строка Из Источник[ТабЧасть.Имя] Цикл
				РеквизитТабЧастиИсточника = Строка[РеквизитТабЧасти.Имя];
				Если ТипЗнч(РеквизитТабЧастиИсточника) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") и не РеквизитТабЧастиИсточника.Пустая() Тогда
					Если РеквизитТабЧастиИсточника.абс_НеИспользовать Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Статья ДДС: "+РеквизитТабЧастиИсточника +" , код статьи ДДС «"+СокрЛП(РеквизитТабЧастиИсточника.Код)+"»", Отказ);
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит: " + РеквизитТабЧасти + " в строке " + 
						Строка.НомерСтроки + " табличной части «" + ТабЧасть + "» не используется в " + ГодИспользованияСтатьиДДС + " году", Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	//\\АБС ВСТАВКА №18480 КОНЕЦ
	
КонецПроцедуры

Процедура ПолныйДействиеОткрытьСправочникЦФО() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение и Клиент Тогда
	//Форма = Справочники.ПодразделенияОрганизаций.ПолучитьФормуСписка();
	//Форма.Отбор.абс_ТипПодразделенияОрганизации.Установить(Перечисления.абс_ТипыПодразделенийОрганизации.ЦФО);
	//Форма.Открыть();
	
	Форма = Справочники.ПодразделенияОрганизаций.ПолучитьФорму("ФормаСпискаИСУЗКЦФО");
	Форма.Открыть();

	#КонецЕсли

КонецПроцедуры

Процедура ПолныйДействиеОткрытьСправочникПодразделениеОрганизации() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение и Клиент Тогда
	//Форма = Справочники.ПодразделенияОрганизаций.ПолучитьФормуСписка();
	//Форма.Отбор.абс_ТипПодразделенияОрганизации.Установить(Перечисления.абс_ТипыПодразделенийОрганизации.ПодразделениеОрганизации);
	//Форма.Открыть();
	
	Форма = Справочники.ПодразделенияОрганизаций.ПолучитьФорму("ФормаСпискаИСУЗК");
	Форма.Открыть();

	#КонецЕсли

КонецПроцедуры

Процедура ПолныйДействиеОткрытьСправочникМестоположениеОС() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение и Клиент Тогда
	//Форма = Справочники.ПодразделенияОрганизаций.ПолучитьФормуСписка();
	//Форма.Отбор.абс_ТипПодразделенияОрганизации.Установить(Перечисления.абс_ТипыПодразделенийОрганизации.МестоположениеОС);
	//Форма.Открыть();
	
	Форма = Справочники.ПодразделенияОрганизаций.ПолучитьФорму("ФормаСпискаИСУЗКМестоположенияОС");
	Форма.Открыть();

	#КонецЕсли

КонецПроцедуры

Процедура ПолныйДействие() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение и Клиент Тогда
		
	Форма = Справочники.Подразделения.ПолучитьФорму("ФормаСпискаМестоположенияОС");
	Форма.Открыть();

	#КонецЕсли

КонецПроцедуры

Процедура абс_КонтрольИспользованияНоменклатурныхГруппПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//АБС ВСТАВКА №000018810 НАЧАЛО
	//для всех типов документов
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 19:06:07  Поставка
	Если НЕ глЗначениеПеременной("абс_КонтрольИспользованияНоменклатурныхГрупп") или Источник.ОбменДанными.Загрузка Тогда
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА Навценя 25.11.2014
	//Если ТипЗнч(Источник) = Тип("ДокументОбъект.абс_ПереносДанных") Тогда 
	//	Возврат;
	//КонецЕсли;
	//АБС ВСТАВКА КОНЕЦ
	
	//+++ Григорьев Д.В. 26.10.2016
	ИсключаемыеДокументы = Новый СписокЗначений;
	ИсключаемыеДокументы.Добавить(Тип("ДокументОбъект.абс_ПереносДанных"));
	ИсключаемыеДокументы.Добавить(Тип("ДокументОбъект.ttk_НастройкаСоответствияСчетовБУКСтатьямВГО"));
	
	Если ИсключаемыеДокументы.НайтиПоЗначению(ТипЗнч(Источник)) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	//--- Григорьев Д.В. 26.10.2016
	
	Для Каждого Реквизит Из Источник.Метаданные().Реквизиты Цикл 		
		РеквизитИсточника = Источник[Реквизит.Имя];		
		Если ТипЗнч(РеквизитИсточника) = Тип("СправочникСсылка.НоменклатурныеГруппы") и не РеквизитИсточника.Пустая() Тогда
			Если не РеквизитИсточника.абс_СтатусНоменклатурнойГруппы = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит «"+Реквизит+"»" + ", номенклатурная группа «"+РеквизитИсточника +"» , код «"+СокрЛП(РеквизитИсточника.Код)+"», не в статусе «Использование»!", Отказ);
			КонецЕсли;
		КонецЕсли; 			
	КонецЦикла;
	
	Для Каждого ТабЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Для Каждого РеквизитТабЧасти Из ТабЧасть.Реквизиты Цикл
			Для Каждого Строка Из Источник[ТабЧасть.Имя] Цикл
				РеквизитТабЧастиИсточника = Строка[РеквизитТабЧасти.Имя];
				Если ТипЗнч(РеквизитТабЧастиИсточника) = Тип("СправочникСсылка.НоменклатурныеГруппы") и не РеквизитТабЧастиИсточника.Пустая() Тогда
					Если не РеквизитТабЧастиИсточника.абс_СтатусНоменклатурнойГруппы = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Номенклатурная группа: "+РеквизитТабЧастиИсточника +", код «"+СокрЛП(РеквизитТабЧастиИсточника.Код)+"», не в статусе «Использование»!", Отказ);
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит «"+РеквизитТабЧасти+"» в строке «"+Строка.НомерСтроки+"» табличной части «"+ТабЧасть+"»", Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	//\\АБС ВСТАВКА №000018810 КОНЕЦ
	
КонецПроцедуры

Процедура абс_ВостановлениеВзаиморасчетовОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	Если Источник.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		ВидОперации = Источник.ВидОперации;
	Иначе
		ВидОперации = Неопределено;
	КонецЕсли; 
	Если Источник.Метаданные().Движения.Содержит(РегистрыНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СоздатьНаборЗаписей().Метаданные()) Тогда
		Источник.Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Прочитать();
		РасчетыПоРеализации = Источник.Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Выгрузить();
	Иначе
		РасчетыПоРеализации = Неопределено;
	КонецЕсли;
	Если Источник.Метаданные().Движения.Содержит(РегистрыНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.СоздатьНаборЗаписей().Метаданные()) Тогда
		Источник.Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Прочитать();
		РасчетыПоПриобретению = Источник.Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Выгрузить();
	Иначе
		РасчетыПоПриобретению = Неопределено;
	КонецЕсли;
	абс_ВосстановлениеВзаиморасчетов.СдвинутьГраницуПоследовательностиНазадПриОтменеПроведедния(Источник.Ссылка, ВидОперации, Источник.Дата, Источник.Организация, РасчетыПоПриобретению, РасчетыПоРеализации);
КонецПроцедуры
	
// АБС ВСТАВКА 
Функция ПодобратьФИО(СтандартнаяОбработка, Знач Текст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	НЕ ФизическиеЛица.абс_НеИспользуется
	|	И ФизическиеЛица.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Текст+ "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Наименование;
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции

Функция ПодобратьСписокФизЛиц(СтандартнаяОбработка, Знач Текст) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 51
	|	ФизическиеЛица.Наименование,
	|	ФизическиеЛица.абс_КодИСУЗК КАК Код,
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	НЕ ФизическиеЛица.абс_НеИспользуется
	|	И ФизическиеЛица.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Текст+ "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество < 51 Тогда
		
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Ссылка, Выборка.Наименование + " (" + СокрЛП(Выборка.Код) + ")");
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		Возврат Значение;
		
	Иначе
		// значений для выбора больше 50
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПодобратьПодразделение(СтандартнаяОбработка, Знач Текст, Организация) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Наименование
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Владелец
	|	И ПодразделенияОрганизаций.абс_ТипПодразделенияОрганизации = &абс_ТипПодразделенияОрганизации
	|	И ПодразделенияОрганизаций.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Текст+ "%");
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("абс_ТипПодразделенияОрганизации", Перечисления.абс_ТипыПодразделенийОрганизации.ПодразделениеОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Наименование;
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции

Функция ПодобратьСписокПодразделений(СтандартнаяОбработка, Знач Текст, Организация) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 51
	|	ПодразделенияОрганизаций.Наименование,
	|	ПодразделенияОрганизаций.абс_КодИСУЗК КАК Код,
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Наименование ПОДОБНО &Наименование
	|	И ПодразделенияОрганизаций.Владелец = &Владелец
	|	И ПодразделенияОрганизаций.абс_ТипПодразделенияОрганизации = &абс_ТипПодразделенияОрганизации";
	
	Запрос.УстановитьПараметр("Наименование", Текст+ "%");  
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("абс_ТипПодразделенияОрганизации", Перечисления.абс_ТипыПодразделенийОрганизации.ПодразделениеОрганизации);
    	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество < 51 Тогда
		
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Ссылка, Выборка.Наименование + " (" + СокрЛП(Выборка.Код) + ")");
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		Возврат Значение;
		
	Иначе
		// значений для выбора больше 50
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции
// АБС ВСТАВКА КОНЕЦ

Процедура абс_КонтрольИспользованияКонтрагентовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// {{ТТК Лапин А. Заявка № 28.04.2016 начало
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.абс_СчетНаОплату") ИЛИ
		 ТипЗнч(Источник) = Тип("ДокументОбъект.абс_СчетНаОплату") Тогда
		
		Если Источник.СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ Тогда
			// в отказ не проверять
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.абс_Оплата") ИЛИ
		      ТипЗнч(Источник) = Тип("ДокументОбъект.абс_Оплата") Тогда
		
		Если Источник.СтатусОплаты = Перечисления.абсСтатусыСчетов.Отказ Тогда
			// в отказ не проверять
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	// }}ТТК Лапин А. Заявка № 28.04.2016 окончание
	
	//АБС+ Тупиков 21586
	//для всех типов документов
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 19:06:35  Поставка
	Если НЕ глЗначениеПеременной("абс_КонтрольИспользованияКонтрагентов") или Источник.ОбменДанными.Загрузка или Отказ Тогда
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
		Возврат;
	КонецЕсли;
		
	СписокДокументовИсключения = Новый СписокЗначений;
	СписокДокументовИсключения.Добавить(Тип("ДокументСсылка.абс_ЗаявкаНаИзменениеРеквизитовКонтрагента"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_ЗаявкаНаИзменениеРеквизитовКонтрагента"));
	//АБС ВСТАВКА Навценя 25.11.2014
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_ПереносДанных"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_ПриведениеРегистровКОСВ"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_ПлановыйГрафикОплат"));
	//АБС ВСТАВКА КОНЕЦ
	
	//АБС ВСТАВКА №31197 НАЧАЛО «29 января 2015 г.», Пополитов
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ФормированиеЗаписейКнигиПокупок"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ФормированиеЗаписейКнигиПродаж"));
 	//\\АБС ВСТАВКА №31197 КОНЕЦ
 	
	Если не СписокДокументовИсключения.НайтиПоЗначению(ТипЗнч(Источник)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыБилинга = Новый СписокЗначений;
	ДокументыБилинга.Добавить(Тип("ДокументСписок.абс_ЛогЗагрузкиИзАСР"));
	ДокументыБилинга.Добавить(Тип("ДокументОбъект.абс_ЛогЗагрузкиИзАСР"));
	ДокументыБилинга.Добавить(Тип("ДокументСсылка.абс_ЛогВыгрузкиОплатРасчетК2"));
	ДокументыБилинга.Добавить(Тип("ДокументОбъект.абс_ЛогВыгрузкиОплатРасчетК2"));
	ДокументыБилинга.Добавить(Тип("ДокументСписок.абс_РаспределениеПоКураторам"));
	ДокументыБилинга.Добавить(Тип("ДокументОбъект.абс_РаспределениеПоКураторам"));
// +++ввв 14.11.2016 г.
	ДокументыБилинга.Добавить(Тип("ДокументСписок.ttk_ЗагрузкаНачисленийИзБиллинга"));
	ДокументыБилинга.Добавить(Тип("ДокументОбъект.ttk_ЗагрузкаНачисленийИзБиллинга"));
// ---ввв 14.11.2016 г.
	
	неВходитВБилинг = ДокументыБилинга.НайтиПоЗначению(ТипЗнч(Источник)) = Неопределено;
	
	СписокСтатусовДляПроверки = Новый СписокЗначений;
	СписокСтатусовДляПроверки.Добавить(Перечисления.абсСтатусыКонтрагентов.Активный);
	СписокСтатусовДляПроверки.Добавить(Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов);	
	
	Для Каждого Реквизит Из Источник.Метаданные().Реквизиты Цикл 		
		РеквизитИсточника = Источник[Реквизит.Имя];		
		Если ТипЗнч(РеквизитИсточника) = Тип("СправочникСсылка.Контрагенты") и не РеквизитИсточника.Пустая() Тогда
			Если СписокСтатусовДляПроверки.НайтиПоЗначению(РеквизитИсточника.абс_СтатусКонтрагента) = Неопределено Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит «"+Реквизит+"»" + ", контрагент «"+РеквизитИсточника +"» , код «"+СокрЛП(РеквизитИсточника.Код)+"», не в статусе «Активный или изменение информации о контрагенте»!", ?(неВходитВБилинг,Отказ,Ложь),);
			КонецЕсли;
		КонецЕсли; 			
	КонецЦикла;
	
	Для Каждого ТабЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Для Каждого РеквизитТабЧасти Из ТабЧасть.Реквизиты Цикл
			Для Каждого Строка Из Источник[ТабЧасть.Имя] Цикл
				РеквизитТабЧастиИсточника = Строка[РеквизитТабЧасти.Имя];
				Если ТипЗнч(РеквизитТабЧастиИсточника) = Тип("СправочникСсылка.Контрагенты") и не РеквизитТабЧастиИсточника.Пустая() Тогда
					//АБС ИЗМЕНЕНИЕ 36968  26.12.2013 10:05:41  Шамов
					//Если СписокСтатусовДляПроверки.НайтиПоЗначению(РеквизитИсточника.абс_СтатусКонтрагента) = Неопределено Тогда
					
					// {{ТТК Лапин А. Заявка № 20.09.2016 начало
					//Если СписокСтатусовДляПроверки.НайтиПоЗначению(РеквизитТабЧастиИсточника.абс_СтатусКонтрагента) = Неопределено Тогда
					Если НЕ РеквизитТабЧастиИсточника.ЭтоГруппа И СписокСтатусовДляПроверки.НайтиПоЗначению(РеквизитТабЧастиИсточника.абс_СтатусКонтрагента) = Неопределено Тогда
					// }}ТТК Лапин А. Заявка № 20.09.2016 окончание
					
					//АБС ИЗМЕНЕНИЕ 36968 КОНЕЦ
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Контрагент: "+РеквизитТабЧастиИсточника +", код «"+СокрЛП(РеквизитТабЧастиИсточника.Код)+"», не в статусе «Активный или изменение информации о контрагенте»!", ?(неВходитВБилинг,Отказ,Ложь));
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит «"+РеквизитТабЧасти+"» в строке «"+Строка.НомерСтроки+"» табличной части «"+ТабЧасть+"»", ?(неВходитВБилинг,Отказ,Ложь));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	//АБС- 21586
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УНИВЕРСАЛЬНОГО ОБМЕНА ИСУЗК

Процедура абс_ПриЗаписиОбъектовОбменаИСУЗКПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 19:07:07  Поставка
	Если НЕ глЗначениеПеременной("абс_ИспользоватьВебСервисУниверсальногоОбменаXML_ИСУЗК") Тогда
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	//АБС ВСТАВКА 37344  15.01.2014 18:10:31  Шамов
	Попытка
		Если глЗначениеПеременной("абс_НастройкиУниверсальногоОбмена").Найти(Строка(ТипЗнч(Источник))) = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Исключение
	Конецпопытки;			
	//АБС ВСТАВКА 37344 КОНЕЦ
	
	СтруктураРезультата = Новый Структура("Успешно,СообщениеОбОшибке", Ложь, "");
	
	Если НЕ абс_СерверныеФункции.ВыполнитьВыгрузкуОбъектаВИСУЗК(Источник.Ссылка, СтруктураРезультата) Тогда
		
		МетаданныеИсточника = Источник.Метаданные();
		
		ТекстСообщенияОбОшибке = "Ошибка при выгрузке элемента справочника в ИСУЗК <" + МетаданныеИсточника.Синоним + "> """ + СокрЛП(Источник.Наименование) + " (" + Источник.Код + "): " + СтруктураРезультата.СообщениеОбОшибке;
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
		
		ЗаписьЖурналаРегистрации("абс_УниверсальныйОбменXML_ИСУЗК", УровеньЖурналаРегистрации.Ошибка, МетаданныеИсточника, Источник.Ссылка, ТекстСообщенияОбОшибке);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура абс_КонтрольНестандартныхЕИОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	//АБС ВСТАВКА №000022516 НАЧАЛО
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 19:08:34  Поставка
	Если Источник.ОбменДанными.Загрузка или глЗначениеПеременной("абс_КонтрольНестандартныхЕИ_Выключить") Тогда
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
		Возврат;
	КонецЕсли;	
	
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь"));
	Если РольДоступна("ПолныеПрава")
		или не мРолиПользователя.Найти(Справочники.РолиИсполнителей.ИспользованиеНестандартныхЕИ) = Неопределено 
		или не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого Реквизит Из Источник.Метаданные().Реквизиты Цикл 		
		РеквизитИсточника = Источник[Реквизит.Имя];		
		Если ТипЗнч(РеквизитИсточника) = Тип("СправочникСсылка.Номенклатура") 
			и не РеквизитИсточника.Пустая() 
			и РеквизитИсточника.БазоваяЕдиницаИзмерения.абс_НестандартныеЕИ Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит «"+Реквизит+"»" + ", номенклатура «"+РеквизитИсточника +"» , код «"+СокрЛП(РеквизитИсточника.Код)+"», использует не стандартную базовую единицу!", Отказ);
		КонецЕсли; 			
	КонецЦикла;
	
	Для Каждого ТабЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Для Каждого РеквизитТабЧасти Из ТабЧасть.Реквизиты Цикл
			Для Каждого Строка Из Источник[ТабЧасть.Имя] Цикл
				РеквизитТабЧастиИсточника = Строка[РеквизитТабЧасти.Имя];
				Если ТипЗнч(РеквизитТабЧастиИсточника) = Тип("СправочникСсылка.Номенклатура") 
					и не РеквизитТабЧастиИсточника.Пустая()
					и РеквизитТабЧастиИсточника.БазоваяЕдиницаИзмерения.абс_НестандартныеЕИ Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Номенклатура: "+РеквизитТабЧастиИсточника +", код «"+СокрЛП(РеквизитТабЧастиИсточника.Код)+"», использует не стандартную базовую единицу!", Отказ);
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит «"+РеквизитТабЧасти+"» в строке «"+Строка.НомерСтроки+"» табличной части «"+ТабЧасть+"»", Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	//\\АБС ВСТАВКА №000022516 КОНЕЦ
	
КонецПроцедуры

//АБС ВСТАВКА 36359  11.12.2013 14:03:10  Поставка

// Функция ПолучитьОбработку()
// Возвращает обработку по Наименованию (как задано в конфигураторе)
// в случае если в доп. обработка будет обработка с более поздней версией, тогда будет возвращена обработка из внешних
Функция ПолучитьОбработку(НаименованиеОбработки) Экспорт
	
	ТекОбработка		 	= Неопределено;
	
	Если НЕ Метаданные.Обработки.Найти(НаименованиеОбработки) = Неопределено Тогда
		ТекОбработка = Обработки[НаименованиеОбработки].Создать();
	КонецЕсли;
	
	ЗапросВнешниеОбработки = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработки.Ссылка
	|ИЗ
	|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
	|ГДЕ
	|	ВнешниеОбработки.Наименование = &Наименование
	|	И ВнешниеОбработки.ВидОбработки = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхВнешнихОбработок.Обработка)");
	
	ЗапросВнешниеОбработки.УстановитьПараметр("Наименование", НаименованиеОбработки);
	
	ВыборкаВнешниеОбработки = ЗапросВнешниеОбработки.Выполнить().Выбрать();
	
	Пока ВыборкаВнешниеОбработки.Следующий() Цикл
		
		ВнешняяОбработка = ПолучитьОбработкуИзХранилища(ВыборкаВнешниеОбработки.Ссылка);
		
		Если ВнешняяОбработка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Если ТекОбработка = Неопределено ИЛИ Число(ВнешняяОбработка.Версия) > Число(ТекОбработка.Версия) Тогда
				ТекОбработка = ВнешняяОбработка;
			КонецЕсли;
		Исключение
			
		КонецПопытки;

	КонецЦикла;	
	
	Возврат ТекОбработка;
		
КонецФункции

// Получает обработку из хранилища внешних обработок
Функция ПолучитьОбработкуИзХранилища(ВнОбработка, ОписаниеОшибки = "") Экспорт
	
	Если НЕ ТипЗнч(ВнОбработка) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Неопределено;
		
	Попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвоичныеДанные = ВнОбработка.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Результат = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
	Исключение	
		Результат = Неопределено;
	КонецПопытки;

	Возврат Результат;

КонецФункции // ПолучитьОбработкуИзХранилища()
 //АБС ВСТАВКА 36359 КОНЕЦ 
 
//АБС ВСТАВКА 36432 Пополитов начало
Процедура абс_ИсторияОткрытияОбъектовЗапись(ОбъектСсылка) Экспорт 
	 
	 Пользователь = ПараметрыСеанса.ТекущийПользователь;
	 ДатаСервера  = абс_СерверныеФункции.ПолучитьДатуСервера();
	 
	 РС = РегистрыСведений.абс_ИсторияОткрываемыхОбъектов.СоздатьНаборЗаписей();
	 РС.Отбор.Пользователь.Установить(Пользователь);
	 РС.Отбор.Объект.Установить(ОбъектСсылка);
	 РС.Прочитать(); 
	 РС.Очистить();	 
	 Строка = РС.Добавить();
	 Строка.Пользователь = Пользователь;
	 Строка.Период       = ДатаСервера;
	 Строка.Объект       = ОбъектСсылка;
	 РС.Записать();
	 
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Пользователь",Пользователь);
	 Запрос.УстановитьПараметр("Период",НачалоДня(ДатаСервера));
	 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 30
	                |	РС.Период КАК Период,
	                |	РС.Пользователь,
	                |	РС.Объект
	                |ИЗ
	                |	РегистрСведений.абс_ИсторияОткрываемыхОбъектов КАК РС
	                |ГДЕ
	                |	РС.Пользователь = &Пользователь
	                //|	И РС.Период >= &Период
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Период УБЫВ";
	 ТаблицаОставляемыхЗаписей = Запрос.Выполнить().Выгрузить();
	 Если ТаблицаОставляемыхЗаписей.Количество()>0 Тогда 	 								 		 
		 НаборЗаписей = РегистрыСведений.абс_ИсторияОткрываемыхОбъектов.СоздатьНаборЗаписей();
		 НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		 НаборЗаписей.Загрузить(ТаблицаОставляемыхЗаписей);
		 НаборЗаписей.Записать(); 	 	
	 КонецЕсли;	 
	          	 
КонецПроцедуры  
//АБС ВСТАВКА 36432 Пополитов конец

//АБС ВСТАВКА №36454 НАЧАЛО «18 декабря 2013 г.», Пополитов
Процедура абс_ЗаполнитьДвиженияПоНЗП_УпрошеннаяСхемаПриЗаписи(Источник, Отказ) Экспорт
	
	ДатаНЗП = глЗначениеПеременной("абс_ДвиженияПоНЗП_УпрошеннаяСхема");
	
	Если Отказ 
		или Источник.ОбменДанными.Загрузка 
		или не ЗначениеЗаполнено(ДатаНЗП)
		или Источник.Дата < ДатаНЗП    		
		или Источник.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
		Возврат;
	КонецЕсли;
	
	ДвижениеПоНЗП(Источник, Отказ, ДатаНЗП);
	
КонецПроцедуры

Процедура абс_ЗаполнитьДвиженияПоНЗП_УпрошеннаяСхемаОбработкаПроведения(Источник, Отказ) Экспорт
	
	ДатаНЗП = глЗначениеПеременной("абс_ДвиженияПоНЗП_УпрошеннаяСхема");
	
	Если Отказ или Источник.ОбменДанными.Загрузка или не ЗначениеЗаполнено(ДатаНЗП)	или Источник.Дата < ДатаНЗП или Источник.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
		Возврат;
	КонецЕсли;
	
	ДвижениеПоНЗП(Источник, Отказ, ДатаНЗП);
	
КонецПроцедуры

Процедура ДвижениеПоНЗП(Источник, Отказ, ДатаНЗП) Экспорт
	
	//Исключений быть не должно
	//СписокДокументовИсключения = Новый СписокЗначений;
	//СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.КорректировкаЗаписейРегистров"));
	//Если не СписокДокументовИсключения.НайтиПоЗначению(ТипЗнч(Источник)) = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;	
	
	//Возврат; 
	
	//Источник = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру().ПолучитьОбъект();
	
	//ИсточникДвиженияЗаписаны = Ложь;
	ВидДвиженияПриход = Истина;
	ИсточникСсылка    = Источник.Ссылка;
	МетаданныеДвиженияИсточника = Источник.Метаданные().Движения;
		
	//БУ движения              	
	Если МетаданныеДвиженияИсточника.Содержит(Метаданные.РегистрыБухгалтерии.Хозрасчетный)
		и МетаданныеДвиженияИсточника.Содержит(Метаданные.РегистрыНакопления.абс_НезавершенноеПроизводствоБУ) Тогда 	
// +++ввв 07.09.2017 г.		
// +++ввв 10.08.2017 г.
		//Если не ИсточникДвиженияЗаписаны Тогда
			//Источник.Движения.Записать();
			//Если Источник.Движения.Хозрасчетный.Количество()>0 Тогда
			//	Источник.Движения.Хозрасчетный.Записать();
			//КонецЕсли;
			//ИсточникДвиженияЗаписаны = Истина;
		//КонецЕсли;	
// ---ввв 10.08.2017 г.
		//Хозрасчетный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(ИсточникСсылка,РегистрыБухгалтерии.Хозрасчетный,Истина);
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.абс_УниверсальноеЗакрытиеСчета") Тогда
			Хозрасчетный = Источник.Движения.Хозрасчетный;
		Иначе
			Хозрасчетный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(ИсточникСсылка,РегистрыБухгалтерии.Хозрасчетный,Истина);
			Если Хозрасчетный.Количество() = 0 Тогда
				Хозрасчетный = Источник.Движения.Хозрасчетный;
			КонецЕсли;
		КонецЕсли;
// ---ввв 07.09.2017 г.
		
		//АБС ВСТАВКА №36454 НАЧАЛО «17 апреля 2014 г.», Пополитов  	
		НаборЗаписей = Источник.Движения.абс_НезавершенноеПроизводствоБУ;
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		//\\АБС ВСТАВКА №36454 КОНЕЦ
		
		Если не (Хозрасчетный = Неопределено или Хозрасчетный.Количество() = 0) Тогда
			
			СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01.1");
			СчетУчетаПустаяСсылка = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			ТаблицаСНужнымиДаннымиБУ = Хозрасчетный.Выгрузить().СкопироватьКолонки();
			Для Каждого ТекДвижение Из Хозрасчетный Цикл
				
				Если ТекДвижение.СчетДт = СчетУчета Тогда
					ВидДвиженияПриход = Истина;	
				Иначе	
					ВидДвиженияПриход = Ложь;
				КонецЕсли;
				
				Если ?(ВидДвиженияПриход, не ТекДвижение.СчетДт = СчетУчета, не ТекДвижение.СчетКт = СчетУчета)
					или ТекДвижение.Период < ДатаНЗП Тогда
					Продолжить;
				КонецЕсли;	
				
				СтрокаТаблицыСНужнымиДаннымиБУ = ТаблицаСНужнымиДаннымиБУ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыСНужнымиДаннымиБУ,ТекДвижение);
				Если ВидДвиженияПриход Тогда 
					СтрокаТаблицыСНужнымиДаннымиБУ.СубконтоДт1 = ТекДвижение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения]; 					
					СтрокаТаблицыСНужнымиДаннымиБУ.СубконтоДт2 = ТекДвижение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы];
					СтрокаТаблицыСНужнымиДаннымиБУ.СубконтоДт3 = ТекДвижение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат];	
				Иначе
					СтрокаТаблицыСНужнымиДаннымиБУ.СубконтоКт1 = ТекДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения]; 					
					СтрокаТаблицыСНужнымиДаннымиБУ.СубконтоКт2 = ТекДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы];
					СтрокаТаблицыСНужнымиДаннымиБУ.СубконтоКт3 = ТекДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат];		
				КонецЕсли;
				Если ВидДвиженияПриход и ТекДвижение.СчетКт = СчетУчета Тогда
					СтрокаТаблицыСНужнымиДаннымиБУ = ТаблицаСНужнымиДаннымиБУ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыСНужнымиДаннымиБУ,ТекДвижение);	
					СтрокаТаблицыСНужнымиДаннымиБУ.СчетДт = СчетУчетаПустаяСсылка;
					СтрокаТаблицыСНужнымиДаннымиБУ.СубконтоКт1 = ТекДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения]; 					
					СтрокаТаблицыСНужнымиДаннымиБУ.СубконтоКт2 = ТекДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы];
					СтрокаТаблицыСНужнымиДаннымиБУ.СубконтоКт3 = ТекДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат];					
				КонецЕсли;	
			КонецЦикла;	
			
			Если не ТаблицаСНужнымиДаннымиБУ.Количество() = 0 Тогда
				
				//Добавим движения				
				НаборЗаписей = Источник.Движения.абс_НезавершенноеПроизводствоБУ;
				НаборЗаписей.Очистить();
				Для Каждого ТекДвижение из ТаблицаСНужнымиДаннымиБУ Цикл
					Если ТекДвижение.СчетДт = СчетУчета Тогда
						ВидДвиженияПриход = Истина;	
					Иначе	
						ВидДвиженияПриход = Ложь;
					КонецЕсли;	
					НаборЗаписейСтрока = НаборЗаписей.Добавить();
					НаборЗаписейСтрока.ВидДвижения = ?(ВидДвиженияПриход,ВидДвиженияНакопления.Приход,ВидДвиженияНакопления.Расход);
					ЗаполнитьЗначенияСвойств(НаборЗаписейСтрока,ТекДвижение);
					НаборЗаписейСтрока.СчетУчета            = ?(ВидДвиженияПриход, ТекДвижение.СчетДт, ТекДвижение.СчетКт);
					НаборЗаписейСтрока.Подразделение        = ?(ВидДвиженияПриход, ТекДвижение.СубконтоДт1, ТекДвижение.СубконтоКт1); 					
					НаборЗаписейСтрока.НоменклатурнаяГруппа = ?(ВидДвиженияПриход, ТекДвижение.СубконтоДт2, ТекДвижение.СубконтоКт2);
					НаборЗаписейСтрока.СтатьяЗатрат         = ?(ВидДвиженияПриход, ТекДвижение.СубконтоДт3, ТекДвижение.СубконтоКт3);	
					НаборЗаписейСтрока.Количество           = ?(ВидДвиженияПриход, ТекДвижение.КоличествоДт, ТекДвижение.КоличествоКт);
					НаборЗаписейСтрока.Стоимость            = ТекДвижение.Сумма;
				КонецЦикла;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	//НУ движения			
	Если МетаданныеДвиженияИсточника.Содержит(Метаданные.РегистрыБухгалтерии.Налоговый)
		и МетаданныеДвиженияИсточника.Содержит(Метаданные.РегистрыНакопления.абс_НезавершенноеПроизводствоНУ) Тогда 	
// +++ввв 07.09.2017 г.		
// +++ввв 10.08.2017 г.
		//Если не ИсточникДвиженияЗаписаны Тогда
		//	Источник.Движения.Записать();
		//Если Источник.Движения.Налоговый.Количество()>0 Тогда
		//	Источник.Движения.Налоговый.Записать();
		//КонецЕсли;
		// 	ИсточникДвиженияЗаписаны = Истина;
		//КонецЕсли;			
// ---ввв 10.08.2017 г.
		//Налоговый = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(ИсточникСсылка,РегистрыБухгалтерии.Налоговый,Истина);
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.абс_УниверсальноеЗакрытиеСчета") Тогда
			Налоговый = Источник.Движения.Налоговый;
		Иначе
			Налоговый = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(ИсточникСсылка,РегистрыБухгалтерии.Налоговый,Истина);
			Если Налоговый.Количество() = 0 Тогда
				Налоговый = Источник.Движения.Налоговый;
			КонецЕсли;
		КонецЕсли;
// ---ввв 07.09.2017 г.
		
		//АБС ВСТАВКА №36454 НАЧАЛО «17 апреля 2014 г.», Пополитов
		НаборЗаписей = Источник.Движения.абс_НезавершенноеПроизводствоНУ;
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();		
		//\\АБС ВСТАВКА №36454 КОНЕЦ
		
		Если не (Налоговый = Неопределено или Налоговый.Количество() = 0) Тогда
			
			СчетУчета = ПланыСчетов.Налоговый.НайтиПоКоду("20.01.1");
			СчетУчетаПустаяСсылка = ПланыСчетов.Налоговый.ПустаяСсылка();
			ТаблицаСНужнымиДаннымиНУ = Налоговый.Выгрузить().СкопироватьКолонки();
			Для Каждого ТекДвижение Из Налоговый Цикл
				
				Если ТекДвижение.СчетДт = СчетУчета Тогда
					ВидДвиженияПриход = Истина;	
				Иначе	
					ВидДвиженияПриход = Ложь;
				КонецЕсли;				
				
				Если ?(ВидДвиженияПриход, не ТекДвижение.СчетДт = СчетУчета, не ТекДвижение.СчетКт = СчетУчета) 
					или ТекДвижение.Период < ДатаНЗП Тогда
					Продолжить;
				КонецЕсли;	
						
				СтрокаТаблицыСНужнымиДаннымиНУ = ТаблицаСНужнымиДаннымиНУ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыСНужнымиДаннымиНУ,ТекДвижение);	
				Если ВидДвиженияПриход Тогда 
					СтрокаТаблицыСНужнымиДаннымиНУ.СубконтоДт1 = ТекДвижение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения]; 					
					СтрокаТаблицыСНужнымиДаннымиНУ.СубконтоДт2 = ТекДвижение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы];
					СтрокаТаблицыСНужнымиДаннымиНУ.СубконтоДт3 = ТекДвижение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат];	
				Иначе
					СтрокаТаблицыСНужнымиДаннымиНУ.СубконтоКт1 = ТекДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения]; 					
					СтрокаТаблицыСНужнымиДаннымиНУ.СубконтоКт2 = ТекДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы];
					СтрокаТаблицыСНужнымиДаннымиНУ.СубконтоКт3 = ТекДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат];		
				КонецЕсли;	
				Если ВидДвиженияПриход и ТекДвижение.СчетКт = СчетУчета Тогда
					СтрокаТаблицыСНужнымиДаннымиНУ = ТаблицаСНужнымиДаннымиНУ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыСНужнымиДаннымиНУ,ТекДвижение);
					СтрокаТаблицыСНужнымиДаннымиНУ.СчетДт = СчетУчетаПустаяСсылка;
					СтрокаТаблицыСНужнымиДаннымиНУ.СубконтоКт1 = ТекДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения]; 					
					СтрокаТаблицыСНужнымиДаннымиНУ.СубконтоКт2 = ТекДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы];
					СтрокаТаблицыСНужнымиДаннымиНУ.СубконтоКт3 = ТекДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат];					
				КонецЕсли;					
			КонецЦикла;	
			
			Если не ТаблицаСНужнымиДаннымиНУ.Количество() = 0 Тогда
				
				//Добавим движения
				НаборЗаписей = Источник.Движения.абс_НезавершенноеПроизводствоНУ;
				НаборЗаписей.Очистить();
				Для Каждого ТекДвижение из ТаблицаСНужнымиДаннымиНУ Цикл
					Если ТекДвижение.СчетДт = СчетУчета Тогда
						ВидДвиженияПриход = Истина;	
					Иначе	
						ВидДвиженияПриход = Ложь;
					КонецЕсли;						
					НаборЗаписейСтрока = НаборЗаписей.Добавить();
					НаборЗаписейСтрока.ВидДвижения = ?(ВидДвиженияПриход,ВидДвиженияНакопления.Приход,ВидДвиженияНакопления.Расход);
					ЗаполнитьЗначенияСвойств(НаборЗаписейСтрока,ТекДвижение);
					НаборЗаписейСтрока.СчетУчета            = ?(ВидДвиженияПриход, ТекДвижение.СчетДт, ТекДвижение.СчетКт);
					НаборЗаписейСтрока.Подразделение        = ?(ВидДвиженияПриход, ТекДвижение.СубконтоДт1, ТекДвижение.СубконтоКт1); 					
					НаборЗаписейСтрока.НоменклатурнаяГруппа = ?(ВидДвиженияПриход, ТекДвижение.СубконтоДт2, ТекДвижение.СубконтоКт2);
					НаборЗаписейСтрока.СтатьяЗатрат         = ?(ВидДвиженияПриход, ТекДвижение.СубконтоДт3, ТекДвижение.СубконтоКт3);	
					НаборЗаписейСтрока.Количество           = ?(ВидДвиженияПриход, ТекДвижение.КоличествоДт, ТекДвижение.КоличествоКт);
					Если ?(ВидДвиженияПриход, 
						ТекДвижение.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ, 
						ТекДвижение.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ) Тогда
						НаборЗаписейСтрока.Стоимость        = ТекДвижение.Сумма;
					ИначеЕсли ?(ВидДвиженияПриход, 
						ТекДвижение.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР, 
						ТекДвижение.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР) Тогда
						НаборЗаписейСтрока.ПостояннаяРазница= ТекДвижение.Сумма;
					Иначе
						НаборЗаписейСтрока.ВременнаяРазница = ТекДвижение.Сумма;
					КонецЕсли;
				КонецЦикла;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры	
//\\АБС ВСТАВКА №36454 КОНЕЦ

//АБС ВСТАВКА №37000 НАЧАЛО «26 декабря 2013 г.», Пополитов
Процедура абс_ИсторияИзмененияОбъектовПередЗаписью(Источник, Отказ) Экспорт
	
	Если не глЗначениеПеременной("абс_ИсторияИзмененияОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	История = "";
	
	Для Каждого Реквизит Из Источник.Метаданные().СтандартныеРеквизиты Цикл 		
		РеквизитИсточникаНовый  = Источник[Реквизит.Имя];
		РеквизитИсточникаСтарый = Источник.Ссылка[Реквизит.Имя];
		Если не РеквизитИсточникаНовый = РеквизитИсточникаСтарый Тогда
			История = История + "Реквизит (" + Реквизит.Имя + "), стар. знач. (" + РеквизитИсточникаСтарый + "), нов. знач. (" + РеквизитИсточникаНовый + ");" + Символы.ПС;  	
		КонецЕсли; 			
	КонецЦикла;	
	Для Каждого Реквизит Из Источник.Метаданные().Реквизиты Цикл 		
		РеквизитИсточникаНовый  = Источник[Реквизит.Имя];
		РеквизитИсточникаСтарый = Источник.Ссылка[Реквизит.Имя];
		Если не РеквизитИсточникаНовый = РеквизитИсточникаСтарый Тогда
			История = История + "Реквизит (" + Реквизит.Синоним + "), стар. знач. (" + РеквизитИсточникаСтарый + "), нов. знач. (" + РеквизитИсточникаНовый + ");" + Символы.ПС;  	
		КонецЕсли; 			
	КонецЦикла;
	
	Если История = "" Тогда
		Возврат;
	КонецЕсли;	
	
	ДатаСервера = абс_СерверныеФункции.ПолучитьДатуСервера();
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ТипОбъекта = "Справочник: "+Источник.Метаданные().Синоним;
	СетевоеИмяКомпьютера = ИмяКомпьютера();
	
	//для хранения истории изменений
	НаборЗаписей = РегистрыСведений.абс_ИсторияИзмененияОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(мТекущийПользователь);
	НаборЗаписей.Отбор.Дата.Установить(ДатаСервера);
	НаборЗаписей.Отбор.ТипОбъекта.Установить(ТипОбъекта);
	НаборЗаписей.Отбор.Компьютер.Установить(СетевоеИмяКомпьютера);
	НаборЗаписей.Прочитать(); НаборЗаписей.Очистить();
	Строка = НаборЗаписей.Добавить();
	Строка.Дата         = ДатаСервера;
	Строка.Пользователь = мТекущийПользователь;
	Строка.ТипОбъекта   = ТипОбъекта;
	Строка.Компьютер    = СетевоеИмяКомпьютера;
	Строка.Данные       = "«" + СокрЛП(Источник) + "»" + Символы.ПС + СокрЛП(История);
    НаборЗаписей.Записать();
	
КонецПроцедуры
//\\АБС ВСТАВКА №37000 КОНЕЦ


//АБС ВСТАВКА   19.02.2014 11:37:08  Гетц
Функция ПолучитьРежимЗаписиПриСменеСтатуса(СтруктураПараметров, РежимЗаписи) Экспорт 
	
	Если Не глЗначениеПеременной("абс_НеПерепроводитьППДБезИзмененияРеквизитов") Тогда 
		Возврат РежимЗаписи;
	КонецЕсли;
	
	СтатусИзменен = Не (СтруктураПараметров.ТекущийСтатус = СтруктураПараметров.НовыйСтатус);
	Если Не ЗначениеЗаполнено(СтруктураПараметров.Ссылка) // Это новый
		Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения //Отмену проведения оставляем
		Или (РежимЗаписи = РежимЗаписиДокумента.Проведение И Не СтруктураПараметров.Проведен) // Если ранее не проводился - проводим
		Или (РежимЗаписи = РежимЗаписиДокумента.Проведение И ttk_ОбщегоНазначения.абс_НеВыполнятьДвиженияВСтатусе(Новый Структура("Ссылка, абс_Статус", СтруктураПараметров.Ссылка, СтруктураПараметров.ТекущийСтатус)) И Не ttk_ОбщегоНазначения.абс_НеВыполнятьДвиженияВСтатусе(Новый Структура("Ссылка, абс_Статус", СтруктураПараметров.Ссылка, СтруктураПараметров.НовыйСтатус)))       // Если ранее проводился в статусе, разрешающем движения, а теперь в запрещающем то проводим
		Или (РежимЗаписи = РежимЗаписиДокумента.Проведение И Не ttk_ОбщегоНазначения.абс_НеВыполнятьДвиженияВСтатусе(Новый Структура("Ссылка, абс_Статус", СтруктураПараметров.Ссылка, СтруктураПараметров.ТекущийСтатус)) И ttk_ОбщегоНазначения.абс_НеВыполнятьДвиженияВСтатусе(Новый Структура("Ссылка, абс_Статус", СтруктураПараметров.Ссылка, СтруктураПараметров.НовыйСтатус))) Тогда // Если ранее проводился в статусе, запрещающем движения, а теперь в разрешающем то проводим
		Возврат РежимЗаписи;
	КонецЕсли;
	
	Если Не СтруктураПараметров.Свойство("ДокументОбъект") Тогда 
		Возврат РежимЗаписи;
	КонецЕсли;
	МассивИсключаемыхРеквизитов = Новый Массив;
	МассивИсключаемыхРеквизитов.Добавить("абс_Статус");
	ТекущаяМодифицированность = РеквизитыИзменены(СтруктураПараметров.ДокументОбъект);
	
	Если Не ТекущаяМодифицированность Тогда 
		Возврат РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Возврат РежимЗаписи;
КонецФункции

Функция РеквизитыИзменены(ОбъектБД, МассивИсключаемыхРеквизитов = Неопределено) Экспорт 
	
	Если МассивИсключаемыхРеквизитов = Неопределено Тогда 
		МассивИсключаемыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Если ОбъектБД.ЭтоНовый() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	// Сверка стандартных реквизитов
	Для Каждого Реквизит Из ОбъектБД.Метаданные().СтандартныеРеквизиты Цикл 
		Если Не МассивИсключаемыхРеквизитов.Найти(Реквизит.Имя) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		Если Не ОбъектБД.Ссылка[Реквизит.Имя] = ОбъектБД[Реквизит.Имя] Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Сверка реквизитов
	Для Каждого Реквизит Из ОбъектБД.Метаданные().Реквизиты Цикл 
		Если Не МассивИсключаемыхРеквизитов.Найти(Реквизит.Имя) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		Если Не ОбъектБД.Ссылка[Реквизит.Имя] = ОбъектБД[Реквизит.Имя] Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Сверка табличных частей
	Для Каждого ТабЧасть Из ОбъектБД.Метаданные().ТабличныеЧасти Цикл 
		// Одинаковое количество строк
		Если Не ОбъектБД.Ссылка[ТабЧасть.Имя].Количество() = ОбъектБД[ТабЧасть.Имя].Количество() Тогда 
			Возврат Истина;
		КонецЕсли;
		// Одинаковые значения в реквизитах строк
		Для Сч = 0 По ОбъектБД[ТабЧасть.Имя].Количество() - 1 Цикл 
			Для Каждого РеквизитТЧ Из ТабЧасть.Реквизиты Цикл 
				Если Не МассивИсключаемыхРеквизитов.Найти(ТабЧасть.Имя + "." + РеквизитТЧ.Имя) = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				Если Не ОбъектБД.Ссылка[ТабЧасть.Имя][Сч][РеквизитТЧ.Имя] = ОбъектБД[ТабЧасть.Имя][Сч][РеквизитТЧ.Имя] Тогда 
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции
//АБС ВСТАВКА  КОНЕЦ

Процедура абс_КонтрольИспользованияДоговоровПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//АБС ВСТАВКА №40711 НАЧАЛО «23 апреля 2014 г.», Пополитов 
	//Этот контроль проверяет статусы, оперируя типами реквизитов
	//Есть контроль, который работает по поиску наименования реквизитов, абс_БизнесПроцессы.абс_ПередЗаписьюДокументаПроверкаСтатусовПередЗаписью,
	//он отрабатывает первым, если есть ошибка будет "отказ = истина"
	//Некоторые документы поставлены специально в исключения из-за Web-сервисов
	//Обмен данными, тут не указан специально, в некоторых обработках ППВ или ППИ проводятся документы в этом режиме
	Если Константы.абс_ОтключитьКонтрольДляДоговоров.Получить() или Отказ или Источник.ПометкаУдаления Или 
		Источник.ДополнительныеСвойства.Свойство("ОтключитьПроверкуЗаполненияРеквизитов") Тогда
		Возврат;
	КонецЕсли;
	                      
	СписокДокументовИсключения = Новый СписокЗначений;
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_ЗакупочныйЗаказ"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.АктСверкиВзаиморасчетов"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.СчетФактураВыданный"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ОтражениеЗарплатыВРеглУчете"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ДоговорНаВыполнениеРаботСФизЛицом"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.Абс_АктПриёмкиВыполненныхРабот"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_АктСверкиВзаиморасчетовРЖД"));
	//АБС ВСТАВКА №48753 НАЧАЛО «21 октября 2014 г.», Пополитов
 	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ФормированиеЗаписейКнигиПокупок"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.ФормированиеЗаписейКнигиПродаж"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_ЛогВыгрузкиОплатРасчетК2"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_РаспределениеПоКураторам"));
 	//\\АБС ВСТАВКА №48753 КОНЕЦ
	//АБС ВСТАВКА Навценя 25.11.2014
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_ПереносДанных"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_ПриведениеРегистровКОСВ"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_ПлановыйГрафикОплат"));
	
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.КонтролируемаяСделка"));
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.УведомлениеОКонтролируемыхСделках"));
	
	//АБС ВСТАВКА КОНЕЦ
	
	//Филиализация	
	СписокДокументовИсключения.Добавить(Тип("ДокументОбъект.абс_АВИЗО"));
	//Филиализация	
	
	Если не СписокДокументовИсключения.НайтиПоЗначению(ТипЗнч(Источник)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СписокСтатусовДляПроверки = Новый СписокЗначений;
	СписокСтатусовДляПроверки.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);
	СписокСтатусовДляПроверки.Добавить(Перечисления.абсСтатусыДоговоров.КорректировкаРеквизитовДоговора);
	
	//родин лимиты по договорам	
	СписокСтатусовДляПроверки.Добавить(Перечисления.абсСтатусыДоговоров.Корректировка);
	СписокСтатусовДляПроверки.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки);
	СписокСтатусовДляПроверки.Добавить(Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
	
	//родин трансфертное
	//Если ТипЗнч(Источник) = Тип("ДокументОбъект.КонтролируемаяСделка")  Или
	//	ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОКонтролируемыхСделках") Тогда
	//	
	//	СписокСтатусовДляПроверки.Добавить(Перечисления.абсСтатусыДоговоров.Закрытие);
	//	СписокСтатусовДляПроверки.Добавить(Перечисления.абсСтатусыДоговоров.Закрыт);
	//КонецЕсли;
	//родин трансфертное

	СписокДокументовДополнения = Новый СписокЗначений;
	СписокДокументовДополнения.Добавить(Тип("ДокументОбъект.КорректировкаДолга"));
	СписокДокументовДополнения.Добавить(Тип("ДокументОбъект.ОперацияБух"));
	СписокДокументовДополнения.Добавить(Тип("ДокументОбъект.КорректировкаЗаписейРегистров"));   	
	Если не СписокДокументовДополнения.НайтиПоЗначению(ТипЗнч(Источник)) = Неопределено Тогда
		СписокСтатусовДляПроверки.Добавить(Перечисления.абсСтатусыДоговоров.Закрытие);
	КонецЕсли;		
	
	ВозможныеСтатусы = "";
	Для Каждого ТекСтатусСписка Из СписокСтатусовДляПроверки Цикл
		ВозможныеСтатусы = ВозможныеСтатусы + ", «"+ТекСтатусСписка+"»";	
	КонецЦикла;	
	ВозможныеСтатусы = Сред(ВозможныеСтатусы,3);
	
	Для Каждого Реквизит Из Источник.Метаданные().Реквизиты Цикл 		
		РеквизитИсточника = Источник[Реквизит.Имя];		
		Если ТипЗнч(РеквизитИсточника) = Тип("СправочникСсылка.ДоговорыКонтрагентов") и не РеквизитИсточника.Пустая() Тогда
			Если СписокСтатусовДляПроверки.НайтиПоЗначению(РеквизитИсточника.абс_СтатусДоговора) = Неопределено Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит «"+Реквизит+"», договор «"+РеквизитИсточника +"», код «"+СокрЛП(РеквизитИсточника.Код)+"», не в статусе "+ВозможныеСтатусы+"!",Отказ);
			КонецЕсли;
		КонецЕсли; 			
	КонецЦикла;
	
	Для Каждого ТабЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Для Каждого РеквизитТабЧасти Из ТабЧасть.Реквизиты Цикл
			Для Каждого Строка Из Источник[ТабЧасть.Имя] Цикл
				РеквизитТабЧастиИсточника = Строка[РеквизитТабЧасти.Имя];
				Если ТипЗнч(РеквизитТабЧастиИсточника) = Тип("СправочникСсылка.ДоговорыКонтрагентов") и не РеквизитТабЧастиИсточника.Пустая() Тогда
					Если СписокСтатусовДляПроверки.НайтиПоЗначению(РеквизитТабЧастиИсточника.абс_СтатусДоговора) = Неопределено Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Договор: "+РеквизитТабЧастиИсточника +", код «"+СокрЛП(РеквизитТабЧастиИсточника.Код)+"», не в статусе "+ВозможныеСтатусы+"!",Отказ);
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит «"+РеквизитТабЧасти+"» в строке «"+Строка.НомерСтроки+"» табличной части «"+ТабЧасть+"»",Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	//\\АБС ВСТАВКА №40711 КОНЕЦ	
	
КонецПроцедуры


//АБС ВСТАВКА   06.05.2014   Навценя

Процедура ПолучитьПодразделенияОтветственногоЛица(ВидДоступа, ЗначенияДоступа) Экспорт
		
	МассивЗначенийДоступа = Новый Массив;
	МассивОрганизаций = Новый Массив;
	
	Если РольДоступна("ПолныеПрава") Тогда 
		ВидДоступа = 0;
		ЗначенияДоступа = Новый ФиксированныйМассив(МассивЗначенийДоступа);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абс_Ответственные.Организация КАК Организация,
	                      |	ПодразделенияОрганизаций.Ссылка КАК СтруктурнаяЕдиница
	                      |ИЗ
	                      |	РегистрСведений.абс_ОтветственныеЛицаПодразделений КАК абс_Ответственные
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	                      |		ПО абс_Ответственные.Сотрудник = Пользователи.абс_Сотрудник
	                      |			И (абс_Ответственные.Активен)
	                      |			И (Пользователи.Ссылка = &ТекущийПользователь)
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	                      |		ПО абс_Ответственные.СтруктурнаяЕдиница = ПодразделенияОрганизаций.Ссылка
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	абс_ЦФОПользователей.Организация,
	                      |	абс_ЦФОПользователей.Дирекция
	                      |ИЗ
	                      |	РегистрСведений.абс_ЦФОПользователей КАК абс_ЦФОПользователей
	                      |ГДЕ
	                      |	абс_ЦФОПользователей.Пользователь = &ТекущийПользователь
	                      |	И абс_ЦФОПользователей.Дирекция <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	абс_ЦФОПользователей.Организация,
	                      |	абс_ЦФОПользователей.Департамент
	                      |ИЗ
	                      |	РегистрСведений.абс_ЦФОПользователей КАК абс_ЦФОПользователей
	                      |ГДЕ
	                      |	абс_ЦФОПользователей.Департамент <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	                      |	И абс_ЦФОПользователей.Пользователь = &ТекущийПользователь");
						  
	Запрос.УстановитьПараметр("ТекущийПользователь", глЗначениеПеременной("глТекущийПользователь"));
	СписокМассивов = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭтоОтборПоОрганизациям = ?(Выборка.Количество() > 125, Истина, Ложь);
	
	Пока Выборка.Следующий() Цикл 
		МассивЗначенийДоступа.Добавить(?(ЭтоОтборПоОрганизациям, Выборка.Организация, Выборка.СтруктурнаяЕдиница));
		МассивОрганизаций.Добавить(Выборка.Организация);
	КонецЦикла;
	
	МассивЗначенийДоступа = ЗаполнитьМассивУникальнымиЗначениями(МассивЗначенийДоступа);
	
	Если ЭтоОтборПоОрганизациям Тогда
		ВидДоступа = 2;
		ЗначенияДоступа = Новый ФиксированныйМассив(МассивЗначенийДоступа);
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "Выбрать т.Ссылка из Справочник.ПодразделенияОрганизаций как т где т.Ссылка в иерархии(&Подразделение)";
	
	МассивПодчиненныхПодразделений = Новый Массив;
	
	Для Каждого Подразделение из МассивЗначенийДоступа Цикл 
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			МассивПодчиненныхПодразделений.Добавить(Выборка.Ссылка);		
		КонецЦикла;
	КонецЦикла;
	
	Если (МассивПодчиненныхПодразделений.Количество() + МассивЗначенийДоступа.Количество()) > 125 Тогда 
		ВидДоступа = 2;
		ЗначенияДоступа = Новый ФиксированныйМассив(МассивОрганизаций);
		Возврат;
	КонецЕсли;
			
	Для Каждого Подразделение из МассивПодчиненныхПодразделений Цикл 
		МассивЗначенийДоступа.Добавить(Подразделение);		
	КонецЦикла;
	
	ВидДоступа = 1;
	ЗначенияДоступа = Новый ФиксированныйМассив(МассивЗначенийДоступа);		
			
КонецПроцедуры

Функция ЗаполнитьМассивУникальнымиЗначениями(МассивИсточник)
	
	МассивПриемник = Новый Массив;
	Для Каждого Элемент Из МассивИсточник Цикл	
		Если МассивПриемник.Найти(Элемент) = Неопределено Тогда	
			МассивПриемник.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПриемник; 
	
КонецФункции

//АБС ВСТАВКА   29.07.2014   Навценя

Процедура ОткрытьОперациюБухПеренос() Экспорт
	
	ФормаСписка = Документы.ОперацияБух.ПолучитьФорму("ФормаСписка");
	ФормаСписка.Отбор.абс_ВидОперацииФилиализация.Установить(Перечисления.абс_ВидыОперацийФилиаизация.ПереносДанных);
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура ОткрытьОперациюБухВГР() Экспорт
	
	МассивОпераций = Новый СписокЗначений;
	МассивОпераций.Добавить(Перечисления.абс_ВидыОперацийФилиаизация.ВГР_ДЗО_ДЗО);
	МассивОпераций.Добавить(Перечисления.абс_ВидыОперацийФилиаизация.ВГР_ДЗО_КТТК);
	МассивОпераций.Добавить(Перечисления.абс_ВидыОперацийФилиаизация.Рекласс);
	МассивОпераций.Добавить(Перечисления.абс_ВидыОперацийФилиаизация.Прочие);
	
	ФормаСписка = Документы.ОперацияБух.ПолучитьФорму("ФормаСписка");
	ФормаСписка.Отбор.абс_ВидОперацииФилиализация.ВидСравнения = ВидСравнения.ВСписке;
	ФормаСписка.Отбор.абс_ВидОперацииФилиализация.Значение = МассивОпераций;
	ФормаСписка.Отбор.абс_ВидОперацииФилиализация.Использование = Истина;
	ФормаСписка.Открыть();
	
КонецПроцедуры


//АБС Кряковкин 2014.09.24
Функция  ЗаполнитьТаблицуЗабалансаИзРегистра() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_ПроводкиЗабаланс.Контрагент,
		|	абс_ПроводкиЗабаланс.ВидИмущества,
		|	абс_ПроводкиЗабаланс.ВидДвижения,
		|	абс_ПроводкиЗабаланс.ВидОперации,
		|	абс_ПроводкиЗабаланс.СчДт1,
		|	абс_ПроводкиЗабаланс.СчДт2,
		|	абс_ПроводкиЗабаланс.СчДт3,
		|	абс_ПроводкиЗабаланс.СчКт1,
		|	абс_ПроводкиЗабаланс.СчКт2,
		|	абс_ПроводкиЗабаланс.СчКт3,
		|	абс_ПроводкиЗабаланс.ПечФорма,
		|	абс_ПроводкиЗабаланс.ДокСклада
		|ИЗ
		|	РегистрСведений.абс_ПроводкиЗабаланс КАК абс_ПроводкиЗабаланс";

	Результат = Запрос.Выполнить().Выгрузить();
 	Возврат Результат;

КонецФункции // ()


Функция ЗаполнитьТаблицуЗабаланса() Экспорт
	МассивЗабаланс=Новый ТаблицаЗначений;
	МассивЗабаланс.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("Строка"));
	МассивЗабаланс.Колонки.Добавить("ВидИмущества",Новый ОписаниеТипов("Строка"));
	МассивЗабаланс.Колонки.Добавить("ВидДвижения",Новый ОписаниеТипов("Строка"));
	МассивЗабаланс.Колонки.Добавить("ВидОперации",Новый ОписаниеТипов("Строка"));
	МассивЗабаланс.Колонки.Добавить("СчДт1",Новый ОписаниеТипов("ПланСчетовСсылка.ЗабалансовыйУчет"));
	МассивЗабаланс.Колонки.Добавить("СчКт1",Новый ОписаниеТипов("ПланСчетовСсылка.ЗабалансовыйУчет"));
	МассивЗабаланс.Колонки.Добавить("СчДт2",Новый ОписаниеТипов("ПланСчетовСсылка.ЗабалансовыйУчет"));
	МассивЗабаланс.Колонки.Добавить("СчКт2",Новый ОписаниеТипов("ПланСчетовСсылка.ЗабалансовыйУчет"));
	МассивЗабаланс.Колонки.Добавить("СчДт3",Новый ОписаниеТипов("ПланСчетовСсылка.ЗабалансовыйУчет"));
	МассивЗабаланс.Колонки.Добавить("СчКт3",Новый ОписаниеТипов("ПланСчетовСсылка.ЗабалансовыйУчет"));
	МассивЗабаланс.Колонки.Добавить("ПечФорма",Новый ОписаниеТипов("Строка"));
	МассивЗабаланс.Колонки.Добавить("ДокСклада",Новый ОписаниеТипов("Строка"));
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Восполнение имущества";
	НоваяСтрока.ВидИмущества = "ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Восполнение имуществаЗИП МЦСС РЖД оборудованием КТТК";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчДт3 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт3 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.9.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Использование оборудования забаланса";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.9.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Передача имущества";
	НоваяСтрока.ВидИмущества = "ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Передача оборудования забаланса в ремонт, на тестирование, в поверку";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.5");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Перемещение оборудования на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса из ремонта (с тестирования, поверки)";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.5");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Поступление оборудования на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Списание оборудования с забаланса";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.9.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
		
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов КТТК";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.11.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов КТТК";
	НоваяСтрока.ВидОперации = "Использование оборудования забаланса";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.11.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.11.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Передача имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов КТТК";
	НоваяСтрока.ВидОперации = "Передача оборудования забаланса в ремонт, на тестирование, в поверку";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.5");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.11.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов КТТК";
	НоваяСтрока.ВидОперации = "Перемещение оборудования на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.11.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.11.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов КТТК";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса из ремонта (с тестирования, поверки)";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.11.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.5");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов КТТК";
	НоваяСтрока.ВидОперации = "Поступление оборудования на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.11.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов КТТК";
	НоваяСтрока.ВидОперации = "Списание оборудования с забаланса";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.11.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ (ЭЗ) МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Восполнение имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ (ЭЗ) МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Восполнение имуществаНЭЗ (ЭЗ) МЦСС РЖД материалами КТТК";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчДт3 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт3 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	
	//АБС Роман 150914
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Восполнение имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ (ЭЗ) МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Восполнение имуществаНЭЗ (ЭЗ) МЦСС РЖД материалами КТТК";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчДт3 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт3 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "абс_ПеремещениеУниверсальныйСклад";

	//АБС Роман 150914 
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Восполнение имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ (ЭЗ) МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Восполнение имуществаНЭЗ (ЭЗ) МЦСС РЖД собственными материалами";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("20");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("10");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчДт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	
	//АБС Роман 150914
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Восполнение имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ (ЭЗ) МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Восполнение имуществаНЭЗ (ЭЗ) МЦСС РЖД собственными материалами";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("20");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("10");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчДт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "абс_ПеремещениеУниверсальныйСклад";

	//АБС Роман 150914
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ (ЭЗ) МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса собственным подразделением";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ (ЭЗ) МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "абс_ПеремещениеУниверсальныйСклад";
	//АБС Роман 150914
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ (ЭЗ) МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "абс_ПеремещениеУниверсальныйСклад";
	//АБС Роман 150914
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ (ЭЗ) МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.2.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов КТТК";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Восполнение имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов КТТК";
	НоваяСтрока.ВидОперации = "Восполнение имуществаНЭЗ объектов КТТК собственными материалами";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("20");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("10");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчДт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	//АБС Роман
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Восполнение имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов КТТК";
	НоваяСтрока.ВидОперации = "Восполнение имуществаНЭЗ объектов КТТК собственными материалами";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("20");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("10");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчДт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "абс_ПеремещениеУниверсальныйСклад";

	//АБС Роман
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов КТТК";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса собственным подразделением";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов КТТК";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	//АБС Роман 150914
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов КТТК";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "абс_ПеремещениеУниверсальныйСклад";

	//АБС Роман 150914
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов КТТК";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов КТТК";
	НоваяСтрока.ВидОперации = "Списание материалов с забаланса";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.7.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	//АБС Кряковкин 2014.09.24 нач
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов КТТК";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "абс_ПеремещениеУниверсальныйСклад";
	//Кряковкин кон
	
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для восп.ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Монтаж оборудования забаланса собственными силами";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Передача оборудования в монтаж";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для восп.ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Передача оборудования забаланса Подрядчику в монтаж";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "ОС15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление оборудования из монтажа";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для восп.ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Поступление оборудования забаланса от Подрядчика из монтажа";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "ОС15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";

	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для восп.ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Перемещение оборудования на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для восп.ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для восп.ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Поступление оборудования на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для восп.ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Поступление смонтированного оборудования забаланса от Подрядчика";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для восп.ЗИП МЦСС РЖД";
	НоваяСтрока.ВидОперации = "Ввод в эксплуатацию смонтированного объекта";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Монтаж оборудования забаланса собственными силами";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Передача оборудования в монтаж";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Передача оборудования забаланса Подрядчику в монтаж";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "ОС15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";

	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление оборудования из монтажа";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Поступление оборудования забаланса от Подрядчика из монтажа";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "ОС15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Перемещение оборудования на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Поступление оборудования на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Поступление смонтированного оборудования забаланса от Подрядчика";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Ввод в эксплуатацию смонтированного объекта";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.4.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Монтаж оборудования забаланса собственными силами";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Передача оборудования в монтаж";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Передача оборудования забаланса Подрядчику в монтаж";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "ОС15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";

	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление оборудования из монтажа";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Поступление оборудования забаланса от Подрядчика из монтажа";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "ОС15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Перемещение оборудования на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Поступление оборудования на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Поступление смонтированного оборудования забаланса от Подрядчика";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Ввод в эксплуатацию смонтированного объекта";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.5.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК на ответ.хранении";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.4");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК на ответ.хранении";
	НоваяСтрока.ВидОперации = "Перемещение оборудования на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.4");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.4");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование КТТК на ответ.хранении";
	НоваяСтрока.ВидОперации = "Поступление оборудования на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.4");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для восп.НЭЗ";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для восп.НЭЗ";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для восп.НЭЗ";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса собственным подразделением";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Передача имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для восп.НЭЗ";
	НоваяСтрока.ВидОперации = "Передача материалов забаланса Подрядчику";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для восп.НЭЗ";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	//АБС Роман 150914
	 НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для восп.НЭЗ";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "абс_ПеремещениеУниверсальныйСклад";

	//АБС Роман 150914
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для восп.НЭЗ";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для восп.НЭЗ";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для восп.НЭЗ";
	НоваяСтрока.ВидОперации = "Списание материалов с забаланса";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.7.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса собственным подразделением";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Передача имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Передача материалов забаланса Подрядчику";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	//АБС Роман 150914
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "абс_ПеремещениеУниверсальныйСклад";
	
	//АБС Роман 150914
	 
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для подключения и стр-ва";
	НоваяСтрока.ВидОперации = "Списание материалов с забаланса";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.4.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для ремонта";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для ремонта";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для ремонта";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса собственным подразделением";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Передача имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для ремонта";
	НоваяСтрока.ВидОперации = "Передача материалов забаланса Подрядчику";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для ремонта";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	
	//АБС Роман 150914
		НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для ремонта";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "абс_ПеремещениеУниверсальныйСклад";

	//АБС Роман 150914
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для ремонта";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для ремонта";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для ремонта";
	НоваяСтрока.ВидОперации = "Списание материалов с забаланса";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.8.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса собственным подразделением";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Передача имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Передача материалов забаланса Подрядчику";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	 //АБС Роман 150914
	 НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "абс_ПеремещениеУниверсальныйСклад";

	 //АБС Роман 150914
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Списание материалов с забаланса";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.5.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК на ответ.хранении";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.5");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК на ответ.хранении";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.5");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.5");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	//АБС Роман 150914
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК на ответ.хранении";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.5");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.5");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "абс_ПеремещениеУниверсальныйСклад";

	//АБС Роман 150914
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ КТТК на ответ.хранении";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.5");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ к измерит.оборуд-нию";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ к измерит.оборуд-нию";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ к измерит.оборуд-нию";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса собственным подразделением";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Передача имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ к измерит.оборуд-нию";
	НоваяСтрока.ВидОперации = "Передача материалов забаланса Подрядчику";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ к измерит.оборуд-нию";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ к измерит.оборуд-нию";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ к измерит.оборуд-нию";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ к измерит.оборуд-нию";
	НоваяСтрока.ВидОперации = "Списание материалов с забаланса";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.9.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "Оборудование  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "Оборудование  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Монтаж оборудования забаланса собственными силами";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Передача оборудования в монтаж";
	НоваяСтрока.ВидИмущества = "Оборудование  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Передача оборудования забаланса Подрядчику в монтаж";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "ОС15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";

	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Поступление оборудования из монтажа";
	НоваяСтрока.ВидИмущества = "Оборудование  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Поступление оборудования забаланса от Подрядчика из монтажа";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "ОС15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "Оборудование  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Перемещение оборудования на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Поступление оборудования на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Поступление смонтированного оборудования забаланса от Подрядчика";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "Оборудование  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Ввод в эксплуатацию смонтированного объекта";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("005.6.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "Оборудование на ответ.хранении";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "Оборудование на ответ.хранении";
	НоваяСтрока.ВидОперации = "Перемещение оборудования на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование на ответ.хранении";
	НоваяСтрока.ВидОперации = "Поступление оборудования на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса собственным подразделением";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Передача имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Передача материалов забаланса Подрядчику";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для строит.деят-ти";
	НоваяСтрока.ВидОперации = "Списание материалов с забаланса";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.6.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для эксплуат.деят-ти";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для эксплуат.деят-ти";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для эксплуат.деят-ти";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса собственным подразделением";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Передача имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для эксплуат.деят-ти";
	НоваяСтрока.ВидОперации = "Передача материалов забаланса Подрядчику";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для эксплуат.деят-ти";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для эксплуат.деят-ти";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Подрядчиком";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для эксплуат.деят-ти";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ  для эксплуат.деят-ти";
	НоваяСтрока.ВидОперации = "Списание материалов с забаланса";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("003.10.3");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ на ответ.хранении";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ на ответ.хранении";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "Прочий Контрагент";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ на ответ.хранении";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов РЖД";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов РЖД";
	НоваяСтрока.ВидОперации = "Использование оборудования забаланса";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.10.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Передача имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов РЖД";
	НоваяСтрока.ВидОперации = "Передача оборудования забаланса в ремонт, на тестирование, в поверку";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.5");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов РЖД";
	НоваяСтрока.ВидОперации = "Перемещение оборудования на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов РЖД";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса из ремонта (с тестирования, поверки)";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.5");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов РЖД";
	НоваяСтрока.ВидОперации = "Поступление оборудования на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.10.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов РЖД";
	НоваяСтрока.ВидОперации = "Списание оборудования с забаланса";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.10.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов РЖД";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Восполнение имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов РЖД";
	НоваяСтрока.ВидОперации = "Восполнение имуществаНЭЗ объектов КТТК собственными материалами";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("20");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("10");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчДт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт2 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.8.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов РЖД";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса собственным подразделением";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.8.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов РЖД";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов РЖД";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Списание имущества";
	НоваяСтрока.ВидИмущества = "НЭЗ объектов РЖД";
	НоваяСтрока.ВидОперации = "Списание материалов с забаланса";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.8.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "";
	НоваяСтрока.ДокСклада = "";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "Оборудование РЖД на ответ.хранении";
	НоваяСтрока.ВидОперации = "Возврат оборудования забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.6");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "Оборудование РЖД на ответ.хранении";
	НоваяСтрока.ВидОперации = "Перемещение оборудования на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.6");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.6");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "Оборудование РЖД на ответ.хранении";
	НоваяСтрока.ВидОперации = "Поступление оборудования на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.6");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Возврат имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ РЖД на ответ.хранении";
	НоваяСтрока.ВидОперации = "Возврат материалов забаланса Контрагенту";
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.7");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ВыбытиеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Перемещение имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ РЖД на ответ.хранении";
	НоваяСтрока.ВидОперации = "Перемещение материалов на забалансе между складами и подразделениями";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.7");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.7");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М11";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеМатериаловСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "РЖД";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ТМЦ РЖД на ответ.хранении";
	НоваяСтрока.ВидОперации = "Поступление материалов на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("002.7");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеМатериаловСклад";

	//АБС
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ОС стоимостью до 20 тыс.руб. на складах Общества";
	НоваяСтрока.ВидОперации = "Поступление оборудования на забаланс";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "АБС_ПоступлениеОборудованияСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ОС стоимостью до 20тыс.руб. на складах Общества";
	НоваяСтрока.ВидОперации = "Использование оборудования забаланса";
	Попытка
		НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.8.2");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.8.1");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	НоваяСтрока.ПечФорма = "М15";
	НоваяСтрока.ДокСклада = "АБС_ПеремещениеОборудованияСклад";	
	//
	
	//АБС Кряковкин 2014.09.19 нач
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Поступление имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов КТТК";
	НоваяСтрока.ВидОперации = "Поступление оборудования на забаланс";
	НоваяСтрока.СчДт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("001.11.1");
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "абс_ПоступлениеУниверсальныйСклад";
	//Кряковкин кон
	
	//АБС Кряковкин 2014.09.23 нач
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов КТТК";
	НоваяСтрока.ВидОперации = "Использование оборудования забаланса";
	НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("030.03");
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "абс_ВыбытиеУниверсальныйСклад";
	
	НоваяСтрока = МассивЗабаланс.Добавить();
	НоваяСтрока.Контрагент = "КТТК";
	НоваяСтрока.ВидДвижения = "Использование имущества";
	НоваяСтрока.ВидИмущества = "ЗИП объектов КТТК";
	НоваяСтрока.ВидОперации = "Использование материалов забаланса собственным подразделением";
	НоваяСтрока.СчКт1 = ПланыСчетов.ЗабалансовыйУчет.НайтиПоКоду("030.02");
	НоваяСтрока.ПечФорма = "М4";
	НоваяСтрока.ДокСклада = "абс_ВыбытиеУниверсальныйСклад";

	//Кряковкин кон

		
	Возврат МассивЗабаланс; 
КонецФункции
//АБС ВСТАВКА  КОНЕЦ
 
//АБС ВСТАВКА №46008,46007 НАЧАЛО «28 августа 2014 г.», Пополитов
Процедура абс_ЗаполнитьКодВидаОперации(Документ) Экспорт
	// {{KM WARE Агапов Н.А. Заявка № 05.10.2015 начало
	//Если не ЗначениеЗаполнено(Документ.абс_Продавец) или (Документ.Дата <> Дата(1,1,1) и Документ.Дата < Дата(2014,8,1)) или Документ.КодВидаОперации = "06" Тогда
	//	//АБС ВСТАВКА   14.04.2015 11:41:48  Шамов1
	//	Если Документ.КодВидаОперации = "04"
	//		ИЛИ Документ.КодВидаОперации = "" Тогда
	//		Документ.КодВидаОперации = "01";
	//	КонецЕсли;
	//	//АБС ВСТАВКА  КОНЕЦ 
	//	Возврат;
	//КонецЕсли;
	//
	//Документ.КодВидаОперации = "04";
	// }}KM WARE Агапов Н.А. Заявка № 05.10.2015 окончание
КонецПроцедуры
//\\АБС ВСТАВКА №46008,46007 КОНЕЦ 

//АБС ВСТАВКА №48754 НАЧАЛО «21 октября 2014 г.», Пополитов
Процедура абс_ЗаполнитьСчетаУчетаРасчетовССуммой(ДокументСсылка, Таблица) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор",ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРег",глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИСТИНА КАК БУ,
	               |	ЛОЖЬ КАК НУ,
	               |	ХозрасчетныйОбороты.Валюта КАК Валюта,
	               |	ХозрасчетныйОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОбороты.Счет.Наименование КАК НаименованиеСчета,
	               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаДт,
	               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаКт,
	               |	ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт КАК ВалютнаяСуммаДт,
	               |	ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт КАК ВалютнаяСуммаКт,
	               |	ХозрасчетныйОбороты.Счет.Порядок
	               |ПОМЕСТИТЬ ОбщаяТаблица
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, , , , , ) КАК ХозрасчетныйОбороты
	               |ГДЕ
	               |	ХозрасчетныйОбороты.Регистратор = &Регистратор
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЛОЖЬ,
	               |	ИСТИНА,
	               |	&ВалютаРег,
	               |	НалоговыйОбороты.Счет,
	               |	НалоговыйОбороты.Счет.Наименование,
	               |	НалоговыйОбороты.СуммаОборотДт,
	               |	НалоговыйОбороты.СуммаОборотКт,
	               |	0,
	               |	0,
	               |	НалоговыйОбороты.Счет.Порядок
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(, , Регистратор, , , , , ) КАК НалоговыйОбороты
	               |ГДЕ
	               |	НалоговыйОбороты.Регистратор = &Регистратор
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	БУ,
	               |	НУ,
	               |	Валюта,
	               |	Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОбщаяТаблица.БУ КАК БУ,
	               |	ОбщаяТаблица.НУ,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОбщаяТаблица.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	               |				ИЛИ ОбщаяТаблица.Валюта = НЕОПРЕДЕЛЕНО
	               |			ТОГДА &ВалютаРег
	               |		ИНАЧЕ ОбщаяТаблица.Валюта
	               |	КОНЕЦ КАК Валюта,
	               |	ОбщаяТаблица.Счет КАК Счет,
	               |	ОбщаяТаблица.НаименованиеСчета КАК НаименованиеСчета,
	               |	СУММА(ОбщаяТаблица.СуммаДт) КАК СуммаДт,
	               |	СУММА(ОбщаяТаблица.СуммаКт) КАК СуммаКт,
	               |	СУММА(ОбщаяТаблица.ВалютнаяСуммаДт) КАК ВалютнаяСуммаДт,
	               |	СУММА(ОбщаяТаблица.ВалютнаяСуммаКт) КАК ВалютнаяСуммаКт,
	               |	ОбщаяТаблица.СчетПорядок
	               |ИЗ
	               |	ОбщаяТаблица КАК ОбщаяТаблица
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбщаяТаблица.БУ,
	               |	ОбщаяТаблица.НУ,
	               |	ОбщаяТаблица.Счет,
	               |	ОбщаяТаблица.НаименованиеСчета,
	               |	ОбщаяТаблица.СчетПорядок,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОбщаяТаблица.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	               |				ИЛИ ОбщаяТаблица.Валюта = НЕОПРЕДЕЛЕНО
	               |			ТОГДА &ВалютаРег
	               |		ИНАЧЕ ОбщаяТаблица.Валюта
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОбщаяТаблица.СчетПорядок,
	               |	БУ УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ОбщаяТаблица";
				   
	Результат = Запрос.Выполнить().Выбрать();
	Таблица.Очистить();
	Пока Результат.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(),Результат);	
	КонецЦикла;	
				   
КонецПроцедуры	
//\\АБС ВСТАВКА №48754 КОНЕЦ

//АБС ВСТАВКА 46344  23.10.2014 18:04:03  Шамов
Процедура ОбработкаПроведения_ПроверкаПоставкиПоЗЗУбыткиПрошлыхЛет(Источник, Отказ, РежимПроведения) Экспорт
		
	Возврат;
	
	//+++ Оптимизация 2018 - Григорьев Д.В.
	
	////АБС ВСТАВКА №000028944 НАЧАЛО «27 ноября 2014 г.», Пополитов
	//Если Источник.ОбменДанными.Загрузка 
	//	или Отказ
	//	или не Источник.ОтражатьВБухгалтерскомУчете
	//	или ОбщегоНазначения.абс_НеВыполнятьДвиженияВСтатусе(Источник) Тогда 
	//	Возврат;
	//КонецЕсли;
	// //\\АБС ВСТАВКА №000028944 КОНЕЦ      	
	//
	//Если Источник.Организация = ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК Тогда
	//	//проверка на виды ЗЗ (убытки прошлых лет)
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	абс_ЗакупочныйЗаказ.УбыткиПрошлыхЛет
	//		|ИЗ
	//		|	Документ.абс_ЗакупочныйЗаказ КАК абс_ЗакупочныйЗаказ
	//		|ГДЕ
	//		|	абс_ЗакупочныйЗаказ.Ссылка В(&мЗЗ)
	//		|
	//		|СГРУППИРОВАТЬ ПО
	//		|	абс_ЗакупочныйЗаказ.УбыткиПрошлыхЛет";

	//	Запрос.УстановитьПараметр("мЗЗ", Источник.абс_ЗакупочныеЗаказы.ВыгрузитьКолонку("абс_ЗакупочныйЗаказТЧ"));

	//	Выборка = Запрос.Выполнить().Выбрать();

	//	Если Выборка.Количество() = 2 Тогда
	//		ttk_ОбщегоНазначения.СообщитьОбОшибке("Нельзя в одной поставке выбирать ЗЗ по убыткам прошлых лет и обычные ЗЗ!", Отказ);
	//		Возврат;
	//	ИначеЕсли Выборка.Количество() = 1 Тогда
	//		Выборка.Следующий();
	//		
	//		Если Выборка.УбыткиПрошлыхЛет Тогда
	//			//проверка счетов затрат
	//			ВидДокумента = Источник.Метаданные().Имя;
	//			
	//			Запрос = Новый Запрос;
	//			Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	//			Если ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
	//				Запрос.Текст = 
	//					"ВЫБРАТЬ
	//					|	СчетаБУДоступныеДляСписанияЗатратНаУбыткиПрошлыхЛет.СчетБУ
	//					|ПОМЕСТИТЬ ВТ_Счета
	//					|ИЗ
	//					|	РегистрСведений.СчетаБУДоступныеДляСписанияЗатратНаУбыткиПрошлыхЛет КАК СчетаБУДоступныеДляСписанияЗатратНаУбыткиПрошлыхЛет
	//					|;
	//					|
	//					|////////////////////////////////////////////////////////////////////////////////
	//					|ВЫБРАТЬ
	//					|	ПоступлениеТоваровУслугУслуги.НомерСтроки
	//					|ИЗ
	//					|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	//					|ГДЕ
	//					|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
	//					|	И НЕ ПоступлениеТоваровУслугУслуги.СчетЗатрат В
	//					|			(ВЫБРАТЬ
	//					|				ВТ_Счета.СчетБУ
	//					|			ИЗ
	//					|				ВТ_Счета)";
	//			ИначеЕсли ВидДокумента = "АвансовыйОтчет" Тогда
	//				Запрос.Текст = 
	//					"ВЫБРАТЬ
	//					|	СчетаБУДоступныеДляСписанияЗатратНаУбыткиПрошлыхЛет.СчетБУ
	//					|ПОМЕСТИТЬ ВТ_Счета
	//					|ИЗ
	//					|	РегистрСведений.СчетаБУДоступныеДляСписанияЗатратНаУбыткиПрошлыхЛет КАК СчетаБУДоступныеДляСписанияЗатратНаУбыткиПрошлыхЛет
	//					|;
	//					|
	//					|////////////////////////////////////////////////////////////////////////////////
	//					|ВЫБРАТЬ
	//					|	АвансовыйОтчетПрочее.НомерСтроки
	//					|ИЗ
	//					|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	//					|ГДЕ
	//					|	АвансовыйОтчетПрочее.Ссылка = &Ссылка
	//					|	И НЕ АвансовыйОтчетПрочее.СчетЗатрат В
	//					|				(ВЫБРАТЬ
	//					|					ВТ_Счета.СчетБУ
	//					|				ИЗ
	//					|					ВТ_Счета)";
	//			КонецЕсли;
	//			Результат = Запрос.Выполнить();
	//			Если НЕ Результат.Пустой() Тогда
	//				ttk_ОбщегоНазначения.СообщитьОбОшибке("В документе используются счета затрат, запрещенные для убытков прошлых лет!", Отказ);
	//				Возврат;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	//--- Оптимизация 2018 - Григорьев Д.В.
	
КонецПроцедуры



Процедура ПередЗаписьюКазначейскихДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	// Start Ермолов Е.Л. 11.11.2015 г 000034687
	Если Источник.ОбменДанными.Загрузка Тогда 
		Возврат
	КонецЕсли;
	
	НаборБлокировкаОплаты = РегистрыСведений.абс_БлокировкаОплатыКонтрагентам.СоздатьНаборЗаписей();
	НаборБлокировкаОплаты.Отбор.абс_Контрагент.Установить(Источник.Контрагент);
//	НаборБлокировкаОплаты.Отбор.абс_Организация.Установить(ТекСтрока.Организация);
	НаборБлокировкаОплаты.Прочитать();
	Если НаборБлокировкаОплаты.Количество() >=1 Тогда
		// {{ТТК Лапин А. Заявка № 01.04.2016 начало
		// {{Новый код:
		Если ТипЗНЧ(Источник.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") И Источник.Проведен И Источник.Оплачено Тогда
			// с целью перепроведения дока можно
		ИначеЕсли ТипЗНЧ(Источник.Ссылка) = Тип("ДокументСсылка.абс_СчетНаОплату") И Источник.СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ Тогда
			// с целью перепроведения счета можно в отказ			
		ИначеЕсли ТипЗНЧ(Источник.Ссылка) = Тип("ДокументСсылка.абс_Оплата") И Источник.СтатусОплаты = Перечисления.абсСтатусыСчетов.Отказ Тогда
			// с целью перепроведения счета можно в отказ			
		Иначе
			Сообщить(" Этого контрагента запрещено использовать для проведения оплат");
			Отказ = Истина;
			Возврат;	
		КонецЕсли; 
		// {{Старый код:
		//Сообщить(" Этого контрагента запрещено использовать для проведения оплат");
		//Отказ = Истина;
		//Возврат	
		// }}ТТК Лапин А. Заявка № 01.04.2016 окончание

	КонецЕсли;
	// Stop Ермолов Е.Л. 11.11.2015 
	
	
	
КонецПроцедуры
//АБС ВСТАВКА 46344 КОНЕЦ
