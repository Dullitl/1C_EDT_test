////////////////////////////////////////////////////////////////
// МЕТОДЫ ПО РАБОТЕ С ЖУРНАЛОМ РЕГИСТРАЦИИ

// Функция формирует представление документа.
//
// Параметры:
// Номер - Строка - Номер документа
// Дата  - Дата - Дата документа
//
// Возвращаемое значение:
// Строка - Представление документа
//
Функция ПредставлениеДокумента(Номер, Дата)
	
	Возврат "№ " + СокрЛП(Номер) + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + " г.";
	
КонецФункции // ПредставлениеДокумента()

Функция ТекстовоеПредставлениеВладельцаДляЖР(СсылкаНаОбъект) 
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
		Текст = НСтр("ru ='Соглашение об использовании электронных документов '")+СсылкаНаОбъект.Код;		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Текст = НСтр("ru ='Реализация товаров и услуг '")+ПредставлениеДокумента(СсылкаНаОбъект.Номер, СсылкаНаОбъект.Дата);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Текст = НСтр("ru ='Поступление товаров и услуг '")+ПредставлениеДокумента(СсылкаНаОбъект.Номер, СсылкаНаОбъект.Дата);
	КонецЕсли;
	Возврат Текст;
	
КонецФункции

// Возвращает текстовое представление для события в журнале регистрации.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, представление события для которого необходимо получить.
//
Функция ТекстовоеПредставлениеСобытияДляЖР(СсылкаНаОбъект) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обмен ЭД.%1'"), 
		ТекстовоеПредставлениеВладельцаДляЖР(СсылкаНаОбъект));
		
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ, СВЯЗАННЫЕ С ТИПАМИ ОБЪЕКТОВ

// Определяет параметры электронного документа по владельцу.
//
// Параметры:
// Источник - Ссылка на объект владелец электронного документа.
//
Функция ОпределитьПараметрыЭДПоИсточнику(Источник) Экспорт 
	
	ПараметрыЭД = Новый Структура;
	ВидЭД = Неопределено;
	НаправлениеЭД = Неопределено;
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ПроизвольныйЭД")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПроизвольныйЭД") Тогда
		ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
		Организация = Источник.Организация;
		Контрагент 	= Источник.Контрагент;
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД")
		ИЛИ ТипЗнч(Источник) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
		ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Организация = Источник.Организация;
		Контрагент 	= Источник.Контрагент;
		ПараметрыЭД.Вставить("СоглашениеЭД", Источник.Ссылка);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		ВидЭД = Перечисления.ВидыЭД.Накладная;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Организация = Источник.Организация;
		Контрагент 	= Источник.Контрагент;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		ВидЭД = Перечисления.ВидыЭД.Накладная;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Организация = Источник.Организация;
		Контрагент 	= Источник.Контрагент;
		
	КонецЕсли;
	ПараметрыЭД.Вставить("ВидЭД", 		ВидЭД);
	ПараметрыЭД.Вставить("НаправлениеЭД",НаправлениеЭД);
	ПараметрыЭД.Вставить("Организация", Организация);
	ПараметрыЭД.Вставить("Контрагент", 	Контрагент);
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Определяет тип объекта по текстовому представлению.
//
// Параметры:
// ОписаниеТипаОбъекта - строка, текстовое представление типа объекта.
//
Функция ОпределитьТипОбъекта(ОписаниеТипаОбъекта) Экспорт
	
	ТипОбъекта = Неопределено;
	
	Если ОписаниеТипаОбъекта = "Валюты" Тогда
		 ТипОбъекта = "СправочникСсылка.Валюты";
	ИначеЕсли ОписаниеТипаОбъекта = "Организации" Тогда
		 ТипОбъекта = "СправочникСсылка.Организации";
	ИначеЕсли ОписаниеТипаОбъекта = "Контрагенты" Тогда
		 ТипОбъекта = "СправочникСсылка.Контрагенты";
	ИначеЕсли ОписаниеТипаОбъекта = "Банки" Тогда
		 ТипОбъекта = "СправочникСсылка.Банки";
	ИначеЕсли ОписаниеТипаОбъекта = "ЕдиницыИзмерения" Тогда
		 ТипОбъекта = "СправочникСсылка.ЕдиницыИзмерения";
	ИначеЕсли ОписаниеТипаОбъекта = "Номенклатура" Тогда
		 ТипОбъекта = "СправочникСсылка.Номенклатура";
	ИначеЕсли ОписаниеТипаОбъекта = "УпаковкиНоменклатуры" Тогда
		 ТипОбъекта = "СправочникСсылка.ЕдиницыИзмерения";
	ИначеЕсли ОписаниеТипаОбъекта = "БанковскиеСчетаОрганизаций" Тогда
		 ТипОбъекта = "СправочникСсылка.БанковскиеСчета";
	ИначеЕсли ОписаниеТипаОбъекта = "БанковскиеСчетаКонтрагентов" Тогда
		 ТипОбъекта = "СправочникСсылка.БанковскиеСчета";
	 КонецЕсли;	 
		 
	Возврат ТипОбъекта;
	
КонецФункции

// Определяет имя реквизита итоговой суммы для конфигурации
Функция ОпределитьИмяРеквизитаСуммы() Экспорт
	
	Возврат "СуммаДокумента";
	
КонецФункции

Функция ИмяСправочникаВладельцаНоменклатурыПоставщика() Экспорт
	
	Возврат "Контрагент";
	
КонецФункции

// Возвращает пустую ссылку на справочник
//
// Параметры:
// ИмяСправочника - строка, название справочника.
//
// Возвращаемое значение: пустая ссылка на справочник
//
Функция ПолучитьПустуюСсылку(ИмяСправочника) Экспорт
	Возврат Справочники[ИмяСправочника].ПустаяСсылка();
КонецФункции //ПолучитьПустуюСсылку()

// Определяет, является ли параметр ссылкой на номенклатуру
//
// Параметры:
// СсылкаНаОбъект - любой объект.
//
// Возвращаемое значение: Булево - Истина, если это ссылка на элемент справочника Номенклатура ИЛИ НоменклатураПоставщиков 
//
Функция ЭтоНоменклатура(СсылкаНаОбъект) Экспорт
	Возврат ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Номенклатура")
КонецФункции

// Возвращает массив видов ЭД, которыми доступен обмен
//
Функция АктуальныеВидыЭД() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ВидыЭД.Накладная);
	Возврат Массив;
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ОПРЕДЕЛЕНИЯ КЛЮЧЕВЫХ РЕКВИЗИТОВ ОБЪЕКТОВ ДЛЯ РЕГИСТРАЦИИ ИЗМЕНЕНИЙ

// Получает ключевые реквизиты объекта по текстовому представлению.
//
// Параметры: 
// ИмяОбъекта - Строка, текстовое представление объекта, ключевые реквизиты которого необходимо получить.
//
Функция ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта) Экспорт 
	
	СтруктураКлючевыхРеквизитов = Новый Структура; // возможные свойства: ИмяТабличнойЧасти, РеквизитыОбъекта
	Если ИмяОбъекта = "Документ.РеализацияТоваровУслуг" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, ХарактеристикаНоменклатуры, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПроизвольныйЭД" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, Текст");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПоступлениеТоваровУслуг" Тогда  // для сравнения при загрузке
		// шапка
		СтрокаРеквизитовОбъекта = ("Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, ХарактеристикаНоменклатуры, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		
	КонецЕсли;
	
	Возврат СтруктураКлючевыхРеквизитов;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ПОИСКА И СОЗДАНИЯ ДОКУМЕНТОВ

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
// 	СтрокаДляЗагрузки - строка параметров для загрузки,
// 	ДеревоРазбора - ДеревоЗначений, структура параметров документа ИБ.
// 	СсылкаНаВладельца - Ссылка на объект ИБ, владельца электронного документа.
//
Функция СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт 
	
	НайденныйОбъект = Неопределено;
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.Накладная Тогда
		НайденныйОбъект = НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	КонецЕсли;
	
	Возврат НайденныйОбъект;
	
КонецФункции

Функция ПолучитьЗначениеРеквизита(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда 
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе // передали строку с реквизитом
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// если реквизит ссылочного типа (передали реквизит ДеревоРазбора), тогда нашли всего лишь индекс строки
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру данных для заполнения документа ПоступленияТоваровУслуг
//
Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	Товары = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда 
			// Заполним реквизит шапки
			Реквизит = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				
				ИмяРеквизитаИБ = СтрокаРеквизита.Реквизит;
				
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизитаИБ, Реквизит);
				
			КонецЕсли;
			
		Иначе 
			
			// Добавим строку в ТЧ Товары или Услуги
			ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
			
			Если ТипЗнч(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
					И ДанныеДляЗаполненияСтрокиТЧ.Номенклатура.Услуга Тогда
				НоваяСтрока = Услуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
			Иначе
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения 
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда // указана счет-фактура
		ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	Иначе
		ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
		ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	КонецЕсли;
	
	// реквизиты для связки "заказ - поступление"
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымКлиента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымКлиента",  ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымПоставщика", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерПоДаннымПоставщика"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымПоставщика",  ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаПоДаннымПоставщика"));
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	ДанныеДляОбъекта.Вставить("Услуги", Услуги);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////
// СОЗДАНИЕ ДОКУМЕНТОВ

// Находит документ ИБ по параметрам.
//
// Параметры:
// ВидЭД - Перечисления.ВидыЭД - Вид электронного документа, по которому ищется документ ИБ,
// Контрагент - Ссылка на контрагента,
// РеквизитыИБ - структура параметров информационной базы,
// РеквизитыИБКонтрагента - структура параметров контрагента в информационной базе.
//
Функция НайтиДокумент(ВидЭД, Контрагент, РеквизитыИБ = Неопределено, РеквизитыИБКонтрагента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныйДок = Неопределено;
	Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказПокупателя КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0 Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ДЕНЬ) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ДЕНЬ)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказПоставщику КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0  Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ДЕНЬ) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ДЕНЬ)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено 
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденныйДок;
	
КонецФункции

Функция НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			Если ДокументОбъект.Проведен Тогда 
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
				Текст = НСтр("ru = 'Операция возможно только для непроведенных документов!'");
			КонецЕсли;
		Иначе  // создаем новый
			ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДата();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		ДокументОбъект.ОбменДанными.Загрузка = Истина; 
		
		// попробуем найти заказ поставщику
		НайденныйДок = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
				РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
				РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
			КонецЕсли;
			РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
			КонецЕсли;
			Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
				НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		// Заполним реквизиты шапки на основании структуры данных заполнения
		ЭлектронныеДокументы.ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		ДокументОбъект.Услуги.Загрузить(ДанныеДляЗагрузки.Услуги);
		
		// Установим вручную некоторые реквизиты шапки
		ДокументОбъект.СуммаВключаетНДС 		= Ложь;
		ДокументОбъект.СуммаДокумента 			= УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОбъект);
		ДокументОбъект.ВалютаДокумента 			= глЗначениеПеременной("ВалютаРегламентированногоУчета");
		ДокументОбъект.КурсВзаиморасчетов 		= 1;
		ДокументОбъект.КратностьВзаиморасчетов 	= 1;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПоступлениеТоваровУслуг, СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
// Наименование - Строка, наименование перечисления.
// ПредставлениеПеречисления - Строка, наименование значения перечисления.
//
Функция НайтиПеречисление(Наименование, ПредставлениеПеречисления) Экспорт
	
	НайденноеЗначение = Неопределено;
	Если Наименование = "НДС" Тогда
		ИмяПеречисления = "СтавкиНДС";
		Если НЕ ТипЗнч(ПредставлениеПеречисления)=Тип("ПеречислениеСсылка.СтавкиНДС") Тогда // определяем по числу
			Возврат ПолучитьСтавкуНДСПеречислением(ПредставлениеПеречисления);
		КонецЕсли;
	Иначе
		Возврат НайденноеЗначение;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Врег(ЭлПеречисления.Синоним) = Врег(ПредставлениеПеречисления) тогда
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеЗначение;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ПОИСКА И СОЗДАНИЯ ЭЛЕМЕНТОВ СПРАВОЧНИКОВ

// Создает объект в ИБ по дереву параметров.
//
// Параметры:
// 	СтрокаОбъекта - Структура параметров записываемого объекта,
// 	ДеревоРазбора - ДеревоЗначений, результат разбора электронного документа.
//
Функция СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	НовЭл = Неопределено;
	
	Возврат НовЭл;
	
КонецФункции

// Возвращает ИД контрагента.
//
// Параметры
// 	Контрагент – ссылка на контрагента (Организация или Контрагент)
// 	ВидКонтрагента - строка, определяющая вид контрагента
//
// Возвращаемое значение:
// 	Строка со значением ИдКонтрагента
//
Функция ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента) Экспорт
	
	ИдКонтрагента = "";
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН+"_"+Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН+"_"+Контрагент.КПП;
	КонецЕсли;
	Возврат ИдКонтрагента;
	
КонецФункции

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры: 
// 	ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
// 	ИДОбъекта - Строка, идентификатор объекта заданного типа,
// 	ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта, ДополнительныеРеквизиты = Неопределено, ИДЭД = Неопределено) Экспорт
	
	Результат = Неопределено;

	Если ТипОбъекта = "ЕдиницыИзмерения" Тогда
		
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторЕдиницИзмерения", "Код", ИдОбъекта);
		
	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		ИНН = "";
		КПП = "";
		Если ДополнительныеРеквизиты.Свойство("ИНН") Тогда 
			ИНН = ДополнительныеРеквизиты.ИНН;
		КонецЕсли;
		Если ДополнительныеРеквизиты.Свойство("КПП") Тогда 
			КПП = ДополнительныеРеквизиты.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН+КПП) Тогда // по ИНН+КПП
			Результат = НайтиСсылкуНаКонтрагентаПоИННКПП(ТипОбъекта, ИНН+КПП); 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска) Тогда // по Наименованию
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Наименование", ПараметрПоиска); 
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "НоменклатураПоставщиков" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		Владелец = "";
		
		Если ДополнительныеРеквизиты.Свойство("Владелец", Владелец) Тогда // есть Владелец
			
			Результат = Новый Структура("Владелец, Код, Артикул, Наименование", Владелец, "", "", "");
			
			Параметр = "";
			Если ДополнительныеРеквизиты.Свойство("Код", Параметр) Тогда // по Коду
				Результат.Код = Параметр;
			КонецЕсли;
			
			Если ДополнительныеРеквизиты.Свойство("Артикул", Параметр) Тогда  // по Артикулу
				Результат.Артикул = Параметр;
			КонецЕсли;
			
			Если ДополнительныеРеквизиты.Свойство("Наименование", Параметр) Тогда // по Наименованию
				Результат.Наименование = Параметр;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Номенклатура" Тогда
		
		Код = "";
		
		Если ЗначениеЗаполнено(ИдОбъекта) Тогда
			// Если задан Ид, то будем искать по коду
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);
			
		ИначеЕсли ЗначениеЗаполнено(ДополнительныеРеквизиты) И ДополнительныеРеквизиты.Свойство("Код", Код) Тогда
			
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", Код);
			
		ИначеЕсли ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
			
			ДанныеТовара = ПолучитьДанныеТовараПоНоменклатуреПоставщика(ДополнительныеРеквизиты);
			Результат = Результат.Номенклатура;
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		Результат = Справочники[ТипОбъекта][ИдОбъекта];
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
// 	ИмяСправочника - Строка, имя справочника, объект которого надо найти,
// 	ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
// 	ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск, 
// 	Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено) Экспорт
	
	Если ИмяСправочника = "НоменклатураПоставщиков" Тогда
		
		// Справочник отсутсвует в системе - вернем структуру содержащую значение реквизита
		Результат = Новый Структура(ИмяРеквизита, ЗначРеквизита);
		
	Иначе
		
		ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
		Если НЕ ЭлектронныеДокументы.ЭтоСтандартныйРеквизит(ОбъектМетаданных, ИмяРеквизита) // нестандартный реквизит
			И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита)<> Неопределено Тогда // другой реквизит
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИскСправочник.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК ИскСправочник
		|ГДЕ
		|	ИскСправочник."+ИмяРеквизита+" = &ЗначРеквизита";
		
		Если ЗначениеЗаполнено(Владелец) Тогда
			Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", 	Владелец);
		КонецЕсли;
		Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиСсылкуНаКонтрагентаПоИННКПП(ТипОбъекта, ИНН_КПП) 
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник."+ТипОбъекта+" КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН + Контрагенты.КПП = &ИНН_КПП";
	
	Запрос.УстановитьПараметр("ИНН_КПП", ИНН_КПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает значение функциональной опции.
//
// Параметры:
// НаименованиеФО - Строка, имя функциональной опции
// 
Функция ПолучитьЗначениеФункциональнойОпции (НаименованиеФО) Экспорт
	Попытка
		ЗначениеВозврата = ПолучитьФункциональнуюОпцию(НаименованиеФО);
	Исключение
		ЗначениеВозврата = Ложь;
	КонецПопытки;
	Возврат ЗначениеВозврата;
КонецФункции

Функция ЗаполнитьРеквизитыКонтрагента (СтруктураРеквизитов) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
	Иначе	
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	ИНН_КПП = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН 	= Сред(ИНН_КПП,1,Найти(ИНН_КПП,"/")-1);
	Контрагент.КПП 	= Сред(ИНН_КПП,Найти(ИНН_КПП,"/")+1);
	Контрагент.Записать();

	Возврат Контрагент.Ссылка;
	
КонецФункции

// Возвращает ссылка на элемент справочника
//
// Параметры:
// Наименование - Строка, название справочника в метаданных
// ИД - Уникальный идентификатор элемента
//
// Возвращаемое значение:
// Ссылка на элемент справочника
//
Функция ЭлементСправочникаПоИД (Наименование,ИД) Экспорт
	UID = Новый УникальныйИдентификатор(ИД);
	Возврат Справочники[Наименование].ПолучитьСсылку(UID);
КонецФункции

// Возвращает структуру реквизитов товара 
//
// Параметры:
// 	РеквизитыНоменклатуры - Структура, содержащая параметры поиска 
//
// Возвращаемое значение:
// 	Структура, содержащая ссылки на номенклатуру, характеристику, упаковку
//
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	ДанныеТовара = ПолучитьДанныеТовараПоНоменклатуреПоставщика(РеквизитыНоменклатуры);
	СтруктураВозврата.Номенклатура = ДанныеТовара.Номенклатура;
	СтруктураВозврата.Характеристика = ДанныеТовара.ХарактеристикаНоменклатуры;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ТАБЛИЦ СООТВЕТСТВИЙ ЭЛЕМЕНТОВ СПРАВОЧНИКОВ

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
Функция ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	
	Возврат Таблица;
	
КонецФункции

// Проверяет функциональную опцию по имени.
//
// Параметры:
// 	ИмяОпции - строка, имя проверяемой функциональной опции,
// 	ПроверкаПодписей - булево, признак наличия ЭЦП у проверяемых электронных документов.
//
Функция ПроверитьФункциональнуюОпцию(ИмяОпции, ПроверкаПодписей = Ложь) Экспорт
	
	Попытка 
		Результат = ПолучитьФункциональнуюОпцию(ИмяОпции);
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru = 'Обмен данным видом документов %2 невозможен. Необходимо включить опцию: %1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1",  ИмяОпции);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2",  ?(ПроверкаПодписей, "с использованием ЭЦП", ""));
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'проверка функциональной опции'"), ТекстСообщения, ТекстСообщения);
		КонецЕсли;
		Возврат Результат;
	Исключение
		ТекстСообщения = НСтр("ru = 'Отсутствует необходимая функциональная опция: %1'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяОпции);
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'проверка функциональной опции'"), ТекстСообщения, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ НАСТРОЙКИ ОБМЕНА

Функция ПолучитьТекстНастроекОбменаПоСоглашению(СоглашениеЭД) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	               |	&НаправлениеЭД КАК НаправлениеЭД,
	               |	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент КАК ВидЭД,
	               |	СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьПодпись
	               |ПОМЕСТИТЬ НастройкиОбменаЭД
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	               |ГДЕ
	               |	ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий) = &НаправлениеЭД
	               |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &СоглашениеЭД
	               |	И СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	&НаправлениеЭД,
	               |	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
	               |	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	               |ГДЕ
	               |	ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий) = &НаправлениеЭД
	               |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
	               |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СоглашениеОбИспользованииЭД.Организация,
	               |	СоглашениеОбИспользованииЭД.Контрагент,
	               |	СоглашениеОбИспользованииЭД.Партнер,
	               |	НастройкиОбменаЭлектроннымиДокументами.ВидЭД,
	               |	НастройкиОбменаЭлектроннымиДокументами.НаправлениеЭД,
	               |	НастройкиОбменаЭлектроннымиДокументами.ИспользоватьПодпись КАК Подписывать,
	               |	СоглашениеОбИспользованииЭД.СертификатКонтрагентаДляШифрования,
	               |	СоглашениеОбИспользованииЭД.СертификатОрганизацииДляРасшифровки,
	               |	СоглашениеОбИспользованииЭД.АдресРесурсаОрганизации КАК АдресРесурсаОрганизации,
	               |	СоглашениеОбИспользованииЭД.АдресРесурсаКонтрагента КАК АдресРесурсаКонтрагента,
	               |	СоглашениеОбИспользованииЭД.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	               |	СоглашениеОбИспользованииЭД.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	               |	СоглашениеОбИспользованииЭД.Ссылка КАК СоглашениеЭД,
	               |	СоглашениеОбИспользованииЭД.СпособОбменаЭД КАК СпособОбменаЭД,
	               |	ВЫБОР
	               |		КОГДА НастройкиОбменаЭлектроннымиДокументами.ИспользоватьПодпись = ИСТИНА
	               |				И Сертификаты.Ссылка ЕСТЬ НЕ NULL 
	               |			ТОГДА Сертификаты.Ссылка
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
	               |	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
	               |	ВЫБОР
	               |		КОГДА НастройкиОбменаЭлектроннымиДокументами.ИспользоватьПодпись = ИСТИНА
	               |				И Сертификаты.Ссылка ЕСТЬ НЕ NULL 
	               |			ТОГДА Сертификаты.Ссылка
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
	               |	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
	               |	ВЫБОР
	               |		КОГДА НастройкиОбменаЭлектроннымиДокументами.ИспользоватьПодпись = ИСТИНА
	               |				И Сертификаты.Ссылка ЕСТЬ НЕ NULL 
	               |			ТОГДА Сертификаты.Ссылка
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
	               |	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеОбИспользованииЭД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиОбменаЭД КАК НастройкиОбменаЭлектроннымиДокументами
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СправочникСертификатов.Ссылка КАК Ссылка,
	               |			СправочникСертификатов.ВидДокумента КАК ВидДокумента,
	               |			СправочникСертификатов.Ссылка.Организация КАК Организация
	               |		ИЗ
	               |			Справочник.СертификатыЭЦП.ВидыДокументов КАК СправочникСертификатов
	               |		ГДЕ
	               |			СправочникСертификатов.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |			И СправочникСертификатов.ИспользоватьДляПодписи = ИСТИНА
	               |			И СправочникСертификатов.Ссылка.Отозван = ЛОЖЬ) КАК Сертификаты
	               |		ПО (Сертификаты.Организация = СоглашениеОбИспользованииЭД.Организация)
	               |ГДЕ
	               |	СоглашениеОбИспользованииЭД.Ссылка = &СоглашениеЭД
	               |	И НЕ СоглашениеОбИспользованииЭД.ПометкаУдаления
	               |	И СоглашениеОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)";	
	Возврат ТекстЗапроса;
			   
КонецФункции

Функция ПолучитьТекстЗапросаНастроекОбменаСПриоритетами() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТЧ_Соглашения.Ссылка.Организация КАК Организация,
	               |	ТЧ_Соглашения.Ссылка.Контрагент КАК Контрагент,
	               |	ТЧ_Соглашения.Ссылка.Партнер КАК Партнер,
	               |	ТЧ_Соглашения.ВидЭД,
	               |	ТЧ_Соглашения.НаправлениеЭД,
	               |	ТЧ_Соглашения.ИспользоватьЭЦП КАК Подписывать,
	               |	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
	               |	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	               |	ТЧ_Соглашения.Ссылка.АдресРесурсаОрганизации КАК АдресРесурсаОрганизации,
	               |	ТЧ_Соглашения.Ссылка.АдресРесурсаКонтрагента КАК АдресРесурсаКонтрагента,
	               |	ТЧ_Соглашения.Ссылка.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	               |	ТЧ_Соглашения.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	               |	ТЧ_Соглашения.Ссылка КАК Основание,
	               |	ТЧ_Соглашения.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД
	               |ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка КАК Ссылка,
	               |		СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент КАК ВидЭД,
	               |		СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьЭЦП,
	               |		СоглашенияОбИспользованииЭДВходящиеДокументы.ОжидатьКвитанциюОДоставке КАК ОжидатьКвитанциюОДоставке,
	               |		ВЫБОР
	               |			КОГДА &Интеркампани
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	               |			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	               |		КОНЕЦ КАК НаправлениеЭД
	               |	ИЗ
	               |		Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	               |	ГДЕ
	               |		НЕ СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ПометкаУдаления
	               |		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СтатусСоглашения = &СтатусСоглашения
	               |		И ВЫБОР
	               |				КОГДА &Интеркампани
	               |					ТОГДА ЛОЖЬ
	               |				КОГДА &СоглашениеЭД <> НЕОПРЕДЕЛЕНО
	               |					ТОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &СоглашениеЭД
	               |				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	               |						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	               |					ТОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация = &Организация
	               |							И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент = &Контрагент
	               |				КОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация = &Организация
	               |						И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент = &Контрагент
	               |						И СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
	               |					ТОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.Формировать
	               |				КОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
	               |						И &Партнер <> НЕОПРЕДЕЛЕНО
	               |						И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Партнер = &Партнер
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка,
	               |		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
	               |		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП,
	               |		СоглашенияОбИспользованииЭДИсходящиеДокументы.ОжидатьКвитанциюОДоставке,
	               |		ВЫБОР
	               |			КОГДА &Интеркампани
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	               |			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	               |		КОНЕЦ
	               |	ИЗ
	               |		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	               |	ГДЕ
	               |		НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
	               |		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = &СтатусСоглашения
	               |		И ВЫБОР
	               |				КОГДА &Интеркампани
	               |					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	               |							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	               |							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
	               |				КОГДА &СоглашениеЭД <> НЕОПРЕДЕЛЕНО
	               |					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
	               |				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	               |						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	               |					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	               |							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	               |				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	               |						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	               |						И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	               |					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
	               |				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
	               |						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	               |						И &Партнер <> НЕОПРЕДЕЛЕНО
	               |						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Партнер = &Партнер
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ) КАК ТЧ_Соглашения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СправочникСертификатов.Ссылка КАК Ссылка,
	               |	СправочникСертификатов.ВидДокумента КАК ВидДокумента,
	               |	СправочникСертификатов.Ссылка.Организация КАК Организация
	               |ПОМЕСТИТЬ ВТ_Сертификаты
	               |ИЗ
	               |	Справочник.СертификатыЭЦП.ВидыДокументов КАК СправочникСертификатов
	               |ГДЕ
	               |	НЕ СправочникСертификатов.Ссылка.ПометкаУдаления
	               |	И (СправочникСертификатов.Ссылка.Организация = &Организация
	               |			ИЛИ ВЫБОР
	               |				КОГДА &Интеркампани
	               |					ТОГДА СправочникСертификатов.Ссылка.Организация = &Контрагент
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ)
	               |	И НЕ СправочникСертификатов.Ссылка.Отозван
	               |	И ВЫБОР
	               |			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ СправочникСертификатов.ВидДокумента = &ВидЭД
	               |		КОНЕЦ
	               |	И СправочникСертификатов.ИспользоватьДляПодписи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	0 КАК Приоритет,
	               |	ВТ_ТЧ_Соглашения.Организация,
	               |	ВТ_ТЧ_Соглашения.Контрагент,
	               |	ВТ_ТЧ_Соглашения.Партнер,
	               |	ВТ_ТЧ_Соглашения.ВидЭД,
	               |	ВТ_ТЧ_Соглашения.НаправлениеЭД,
	               |	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
	               |	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
	               |	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
	               |	ВТ_ТЧ_Соглашения.АдресРесурсаОрганизации КАК АдресРесурсаОрганизации,
	               |	ВТ_ТЧ_Соглашения.АдресРесурсаКонтрагента КАК АдресРесурсаКонтрагента,
	               |	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	               |	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	               |	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
	               |	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	               |	ВЫБОР
	               |		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
	               |				ИЛИ ВТ_Сертификаты.Организация <> &Организация
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
	               |		ИНАЧЕ ВТ_Сертификаты.Ссылка
	               |	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
	               |	ВЫБОР
	               |		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
	               |				ИЛИ ВТ_Сертификаты.Организация <> &Организация
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
	               |		ИНАЧЕ ВТ_Сертификаты.Ссылка
	               |	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
	               |	ВЫБОР
	               |		КОГДА НЕ &Интеркампани
	               |				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
	               |				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Организация <> &Контрагент
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
	               |		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
	               |	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи
	               |ИЗ
	               |	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
	               |		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
	               |			И (&Организация = ВТ_Сертификаты.Организация)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
	               |		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
	               |			И (&Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация)
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &СоглашениеЭД <> НЕОПРЕДЕЛЕНО
	               |					ИЛИ &ВидЭД = НЕОПРЕДЕЛЕНО
	               |						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ВТ_ТЧ_Соглашения.НаправлениеЭД = &НаправлениеЭД
	               |					И ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭД
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ТЧ_Соглашения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Сертификаты";	
				   
	Возврат ТекстЗапроса;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ПОЛУЧЕНИЯ ДАННЫХ ДЛЯ ФОРМИРОВАНИЯ ЭЛЕКТРОННЫХ ДОКУМЕНТОВ

// Получает данные о физическом (юридическом) лице по ссылке.
//
// Параметры: 
// 	ЮрФизЛицо - Ссылка на элемент справочника, по которому надо получить данные.
//
Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо) Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЮрФизЛицо, ТекущаяДата());
	
КонецФункции

// Получает контактную информацию организации по ссылке
//
// Параметры:
// 	Организация - ссылка на элемент справочника Организации, по которой нужно получить данные.
//
Функция ПолучитьКонтактнуюИнформацию(Организация) Экспорт
	
	Возврат Новый ТаблицаЗначений;
	
КонецФункции

// Подготавливает данные для электронного документа типа Накладная.
//
// Параметры: 
// 	СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// 	СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД) Экспорт
	
	ОписаниеТиповКоличество = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(0, 4));
	ОписаниеТиповСумма = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18, 2));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеТиповКоличество);
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("Цена", ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("Сумма", ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номенклатура.Код 										КАК КодТовара,
		|	РеализацияТоваровУслуг.Номенклатура."+ТоварКод+" 								КАК Артикул,
		|	РеализацияТоваровУслуг.Номенклатура.Наименование 								КАК Наименование,
		|	РеализацияТоваровУслуг.Номенклатура												КАК Номенклатура,
		|	РеализацияТоваровУслуг.Количество 												КАК Количество,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность								КАК Сумма,
		|	РеализацияТоваровУслуг.Цена *&Курс / &Кратность									КАК Цена,
		|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры 								КАК Характеристика,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения 					КАК БазоваяЕдиница,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код 				КАК БазоваяЕдиницаКод,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование 		КАК БазоваяЕдиницаНаименование,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное 	КАК БазоваяЕдиницаНаименованиеПолное,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
		|	РеализацияТоваровУслуг.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код 			КАК УпаковкаКод,
		|	РеализацияТоваровУслуг.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование 	КАК УпаковкаНаименование,
		|	РеализацияТоваровУслуг.Коэффициент												КАК Коэффициент,
		|	РеализацияТоваровУслуг.СтавкаНДС 												КАК СтавкаНДС,
		|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность							КАК СуммаНДС,
		|	0 																				КАК СуммаСкидки,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность								КАК СуммаСНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номенклатура.Код,
		|	РеализацияТоваровУслуг.Номенклатура."+ТоварКод+",
		|	"+СтрокаВыборкиПоляСодержания+",
		|	РеализацияТоваровУслуг.Номенклатура,
		|	РеализацияТоваровУслуг.Количество,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
		|	NULL,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
		|	1,
		|	РеализацияТоваровУслуг.СтавкаНДС,
		|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность,
		|	0,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
		
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	// Вычислим курс и кратность документа
	Если СсылкаНаОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета
	   И СсылкаНаОбъект.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	   И СсылкаНаОбъект.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		
		ЗапросКурсАванса = Новый Запрос;
		ЗапросКурсАванса.УстановитьПараметр("ДокументСсылка", СсылкаНаОбъект);
		ЗапросКурсАванса.Текст =
			"ВЫБРАТЬ
			|	Док.СуммаВзаиморасчетов,
			|	Док.СуммаРегл
			|ИЗ 
			|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК Док
			|ГДЕ 
			|	Док.Ссылка = &ДокументСсылка
			|ИТОГИ 
			|	СУММА(СуммаВзаиморасчетов), СУММА(СуммаРегл) ПО ОБЩИЕ";
		
		Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			КурсОплаты                 = ?(Выборка.СуммаВзаиморасчетов = 0, 0, Выборка.СуммаРегл / Выборка.СуммаВзаиморасчетов);
			ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			ВыборкаСуммаРегл           = Выборка.СуммаРегл;
		Иначе
			КурсОплаты                 = 0;
			ВыборкаСуммаВзаиморасчетов = 0;
			ВыборкаСуммаРегл           = 0;
		КонецЕсли;
		
		СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(СсылкаНаОбъект),
			СсылкаНаОбъект.ВалютаДокумента, 
			СсылкаНаОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			ЗаполнениеДокументов.КурсДокумента(СсылкаНаОбъект, ВалютаРегламентированногоУчета), 
			СсылкаНаОбъект.КурсВзаиморасчетов,
			ЗаполнениеДокументов.КратностьДокумента(СсылкаНаОбъект, ВалютаРегламентированногоУчета), 
			СсылкаНаОбъект.КратностьВзаиморасчетов);
			
		НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
		
		Если НеоплаченнаяСумма > 0 Тогда
			КурсДляПечати = (НеоплаченнаяСумма * СсылкаНаОбъект.КурсВзаиморасчетов + ВыборкаСуммаРегл)/(НеоплаченнаяСумма + ВыборкаСуммаВзаиморасчетов);
		Иначе
			КурсДляПечати = КурсОплаты;
		КонецЕсли;
		
		Если КурсДляПечати = 0 Тогда
			Курс 		= СсылкаНаОбъект.КурсВзаиморасчетов;
			Кратность 	= ?(СсылкаНаОбъект.КратностьВзаиморасчетов = 0, 1, СсылкаНаОбъект.КратностьВзаиморасчетов);
		Иначе
			Курс 		= КурсДляПечати;
			Кратность 	= 1;
		КонецЕсли;
		
	ИначеЕсли СсылкаНаОбъект.ВалютаДокумента = СсылкаНаОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		// Документ оформлен в валюте взаиморасчетов
		Курс 		= СсылкаНаОбъект.КурсВзаиморасчетов;
		Кратность 	= ?(СсылкаНаОбъект.КратностьВзаиморасчетов = 0, 1, СсылкаНаОбъект.КратностьВзаиморасчетов);
	Иначе
		// Документ оформлен в валюте регламентированного учета
		Курс 		= 1;
		Кратность 	= 1;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", 	СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Курс", 		Курс);
	Запрос.УстановитьПараметр("Кратность", 	Кратность);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		// Cформируем идентификатор
		ИДТовара = Выборка.Номенклатура.УникальныйИдентификатор();
		ИДХарактеристики = ?(ЗначениеЗаполнено(Выборка.Характеристика), Выборка.Характеристика.УникальныйИдентификатор(), "");
		ИДУпаковки = "";
		НоваяСтрока.ИД = Строка(ИДТовара)+"#"+Строка(ИДХарактеристики)+"#"+Строка(ИДУпаковки);
		
		// Сформируем наименование
		НоваяСтрока.Наименование = Выборка.Наименование + ?(ЗначениеЗаполнено(Выборка.Характеристика), " ("+Выборка.Характеристика+")", "");
		
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 		СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 		"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 		ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 		СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 			СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 					СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 	ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 				СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 				СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Сумма", 				ТаблицаТоваров.Итог("Сумма"));
	СтруктураПараметров.Вставить("ПолноеИмяФайла", 		КаталогВременныхФайлов() + ЭлектронныеДокументы.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	СтруктураПараметров.Вставить("ВидЭД", 				СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 		СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Грузоотправитель", 	СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Организация");
	СтруктураПараметров.Вставить("Грузополучатель",		СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",		Истина);
	СтруктураПараметров.Вставить("СуммаДокумента", 		УчетНДС.ПолучитьСуммуДокументаСНДС(СсылкаНаОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(СсылкаНаОбъект, "Услуги"));
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа Счет.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД)	Экспорт
	
	// Структура таблицы товаров
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	// получение данных по таблицам товаров
	
	// Итоговая структура параметров
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров",ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",ТекущаяДата());
	СтруктураПараметров.Вставить("Номер",СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта",СсылкаНаОбъект.Валюта);
	СтруктураПараметров.Вставить("Курс", 1);
	СтруктураПараметров.Вставить("Сумма",СсылкаНаОбъект.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",СсылкаНаОбъект.ДокументОснование.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", СсылкаНаОбъект.ДокументОснование.Товары.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД",СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД",СтруктураЭД.НаправлениеЭД);
	// доп.поля счета
	
	СтруктураПараметров.Вставить("СрокПлатежа", Неопределено);

	СтруктураПараметров.Вставить("РасчетныйСчетОрганизации",СсылкаНаОбъект.БанковскийСчет);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа ЗаказТоваров.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, "НомерПоДаннымПоставщика, ДатаПоДаннымПоставщика");
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	// получение данных по таблицам товаров
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("Роль", "Покупатель");
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика", РеквизитыДокумента.НомерПоДаннымПоставщика);
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", РеквизитыДокумента.ДатаПоДаннымПоставщика);
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта",СсылкаНаОбъект.Валюта);
	СтруктураПараметров.Вставить("Курс", 1);
	СтруктураПараметров.Вставить("Сумма",СсылкаНаОбъект.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", СсылкаНаОбъект.Товары.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД",СтруктураЭД.НаправлениеЭД);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа ОтветНаЗаказ.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, "НомерПоДаннымКлиента, ДатаПоДаннымКлиента");
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	// получение данных по таблицам товаров

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Роль", "Продавец");
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента", РеквизитыДокумента.НомерПоДаннымКлиента);
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента", РеквизитыДокумента.ДатаПоДаннымКлиента);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта",СсылкаНаОбъект.Валюта);
	СтруктураПараметров.Вставить("Курс", 1);
	СтруктураПараметров.Вставить("Сумма",СсылкаНаОбъект.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС",СсылкаНаОбъект.Товары.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД",СтруктураЭД.НаправлениеЭД);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// ТоварыКаталога - Массив, список товаров для заполнения каталога.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект, ТоварыКаталога, СтруктураЭД) Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	// получение данных по таблицам товаров
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДата());
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);

	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа СчетФактура.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоСчетуФактуре(СсылкаНаОбъект, СтруктураЭД) Экспорт
	
	ШапкаДокумента = Новый ТаблицаЗначений;
	ШапкаДокумента.Колонки.Добавить("Ссылка");
	ШапкаДокумента.Колонки.Добавить("Дата");
	ШапкаДокумента.Колонки.Добавить("Номер");
	ШапкаДокумента.Колонки.Добавить("Организация");
	ШапкаДокумента.Колонки.Добавить("Контрагент");
	ШапкаДокумента.Колонки.Добавить("СуммаДокумента");
	ШапкаДокумента.Колонки.Добавить("ДатаРеализации");
	ШапкаДокумента.Колонки.Добавить("Валюта");
	ШапкаДокумента.Колонки.Добавить("ЦенаВключаетНДС");
	ШапкаДокумента.Колонки.Добавить("Партнер");
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	// получение данных 
	
	СтруктураЭД.Вставить("Контрагент",	ШапкаДокумента.Контрагент);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация",СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент",СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", ШапкаДокумента.Валюта);
	СтруктураПараметров.Вставить("Курс", 1);
	СтруктураПараметров.Вставить("Сумма",ШапкаДокумента.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", ШапкаДокумента.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД",СтруктураЭД.НаправлениеЭД);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа ПрайсЛист.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД) Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	// получение данных 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров",ТаблицаТоваров);
	СтруктураПараметров.Вставить("Валюта", СсылкаНаОбъект.Валюта);
	СтруктураПараметров.Вставить("Организация",СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Описание", "Цены по комм.предложению №"+СсылкаНаОбъект.Номер+" от "+СсылкаНаОбъект.Дата);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа АктВыполненияРабот.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоАктуВыполненныхРабот (СсылкаНаОбъект, СтруктураЭД)	Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("Содержание");
	
	// получение данных 

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта",СсылкаНаОбъект.Валюта);
	СтруктураПараметров.Вставить("Курс", 1);
	СтруктураПараметров.Вставить("Сумма", СсылкаНаОбъект.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС",СсылкаНаОбъект.Услуги.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	Структурапараметров.Вставить("НалогообложениеНДС",Строка(СсылкаНаОбъект.НалогообложениеНДС));
	// заполнение спец.реквизитов для связки заказ-поступление
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ЗаказКлиента) Тогда
		ДокОснование = СсылкаНаОбъект.ЗаказКлиента;
		СтруктураПараметров.Вставить("НомерПоДаннымПоставщика", ДокОснование.Номер);
		СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", ДокОснование.Дата);
		Если ЗначениеЗаполнено(ДокОснование.НомерПоДаннымКлиента) 
			И ЗначениеЗаполнено(ДокОснование.ДатаПоДаннымКлиента) Тогда 
			СтруктураПараметров.Вставить("НомерПоДаннымКлиента",ДокОснование.НомерПоДаннымКлиента);
			СтруктураПараметров.Вставить("ДатаПоДаннымКлиента", ДокОснование.ДатаПоДаннымКлиента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
КонецФункции  //ПодготовитьДанныеПоАктуВыполненныхРабот()

// Подготавливает данные для электронного документа типа ОтчетКомитенту.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара (СсылкаНаОбъект, СтруктураЭД)	Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("ЦенаПродажи");
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажи");
	ТаблицаТоваров.Колонки.Добавить("СуммаВознаграждения");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");

    ТаблицаЭтаповГрафикаОплаты = Новый ТаблицаЗначений;
	ТаблицаЭтаповГрафикаОплаты.Колонки.Добавить("ДатаПлатежа");
	ТаблицаЭтаповГрафикаОплаты.Колонки.Добавить("ПроцентПлатежа");
	ТаблицаЭтаповГрафикаОплаты.Колонки.Добавить("СуммаПлатежа");
	
	// получение данных
     
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты", ТаблицаЭтаповГрафикаОплаты); 
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", СсылкаНаОбъект.Валюта);
	СтруктураПараметров.Вставить("Курс", 1);
	СтруктураПараметров.Вставить("Сумма", СсылкаНаОбъект.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", СсылкаНаОбъект.Товары.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("НачалоПериода", СсылкаНаОбъект.НачалоПериода);		
	СтруктураПараметров.Вставить("КонецПериода", СсылкаНаОбъект.КонецПериода);
	СтруктураПараметров.Вставить("СуммаВознаграждения", СсылкаНаОбъект.СуммаВознаграждения);
	СтруктураПараметров.Вставить("ПроцентВознаграждения", СсылкаНаОбъект.ПроцентВознаграждения);
	СтруктураПараметров.Вставить("СпособРасчетаВознаграждения",Строка(СсылкаНаОбъект.СпособРасчетаВознаграждения));
	СтруктураПараметров.Вставить("ДатаПлатежа", СсылкаНаОбъект.ДатаПлатежа);
	СтруктураПараметров.Вставить("СтавкаНДСВознаграждения", СсылкаНаОбъект.СтавкаНДСВознаграждения);
	СтруктураПараметров.Вставить("СуммаНДСВознаграждения", СсылкаНаОбъект.СуммаНДСВознаграждения);
	СтруктураПараметров.Вставить("УдержатьВознаграждение", СсылкаНаОбъект.УдержатьВознаграждение);
	СтруктураПараметров.Вставить("НалогообложениеНДС", Строка(СсылкаНаОбъект.НалогообложениеНДС));

	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара (СсылкаНаОбъект, СтруктураЭД)	Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	     
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", СсылкаНаОбъект.Валюта);
	СтруктураПараметров.Вставить("Курс", 1);
	СтруктураПараметров.Вставить("Сумма", СсылкаНаОбъект.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", СсылкаНаОбъект.Товары.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("НачалоПериода",СсылкаНаОбъект.НачалоПериода);		
	СтруктураПараметров.Вставить("КонецПериода",СсылкаНаОбъект.КонецПериода);
	СтруктураПараметров.Вставить("ДатаПлатежа", СсылкаНаОбъект.ДатаПлатежа);
	СтруктураПараметров.Вставить("НалогообложениеНДС",Строка(СсылкаНаОбъект.НалогообложениеНДС));
                                                       
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД)	Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Сумма", ТаблицаТоваров.Итог("Сумма"));
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Грузоотправитель", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Организация");
	СтруктураПараметров.Вставить("Грузополучатель", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", Истина);

	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД)	Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Сумма", ТаблицаТоваров.Итог("Сумма"));
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Грузоотправитель", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Организация");
	СтруктураПараметров.Вставить("Грузополучатель", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", Истина);
    		                                                       
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект) Экспорт
	Возврат ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект);
КонецФункции

Процедура ПолучитьРеквизитыОрганизации(Организация, СтруктураВозврата) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Организации.Наименование КАК Наименование,
	                |	Организации.ИНН КАК ИНН,
	                |	Организации.КПП КАК КПП
	                |ИЗ
	                |	Справочник.Организации КАК Организации
	                |ГДЕ
	                |	Организации.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Организация);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		СтруктураВозврата.Наименование=РезультатЗапроса.Наименование;
		СтруктураВозврата.НаименованиеПолное=РезультатЗапроса.Наименование;
		СтруктураВозврата.ИНН=РезультатЗапроса.ИНН;
		СтруктураВозврата.КПП=РезультатЗапроса.КПП;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьБанковскиеСчета(Организация) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьБанковскиеРеквизиты(МассивСчетов) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Возврат Таблица;
	
КонецФункции
                        
/////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ДЛЯ ПРОСМОТРА ЭЛЕКТРОННЫХ ДОКУМЕНТОВ

// Возвращает сумму прописью.
//
// Параметры: 
// 	СуммаЧислом - Число, преобразуемая сумма.
// 	КодВалюты - Число, код используемой валюты.
//
Функция СуммаПрописью(СуммаЧислом, КодВалюты) Экспорт
	Валюта = НайтиСсылкуНаОбъект("Валюты",КодВалюты);
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	
КонецФункции

// Возвращает текстовое описание организации.
//
// Параметры: 
// 	СведенияОКонтрагенте - Структура, сведения об организации, по которой надо составить описание.
// 	Список - Строка, список запрашиваемых параметров организации.
// 	СПрефиксом - Булево, признак вывода префикса параметра организации.
//
Функция ОписаниеОрганизации(СведенияОКонтрагенте, Список = "", СПрефиксом = Истина) Экспорт
	
	Возврат ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОКонтрагенте, Список, СПрефиксом);
	
КонецФункции

// Возвращает текстовое представление суммы.
//
// Параметры: 
// 	СуммаКПрописи - Число, сумма, по которой надо получить представление.
// 	КодВалюты - Число, код используемой валюты.
// 	ЧН - Строка, параметр нулевого значения числа.
// 	ЧРГ - Строка, разделитель групп целой части числа.
//
Функция ФорматСумм(СуммаКПрописи, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Валюта = НайтиСсылкуНаОбъект("Валюты",КодВалюты);
 	Возврат ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Валюта,  ЧН, ЧРГ);
	
КонецФункции

Функция ИмяДополнительнойКолонки() Экспорт
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		Колонка = "Код";
	Иначе
		ВыводитьКоды = "";
	КонецЕсли;

	Возврат Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
КонецФункции

// Создает соответствие ставок и сумм НДС
//
// Возвращаемое значение:
// 	Соответствие
//
Функция ПолучитьСоответствиеСтавокНДС() Экспорт
	
	СоответствиеСтавокНДС = Новый Соответствие();
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10_110, 0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18_118, 0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС0,      0);
	
	Возврат СоответствиеСтавокНДС;
	
КонецФункции // ПолучитьСоответствиеСтавокНДС()

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
// 	СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
// 	ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
// Возвращаемое значение:
// 	Строка
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. НДС (%СтавкаНДС%):'"), НСтр("ru='НДС (%СтавкаНДС%):'"));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", СтавкаНДС);
	
	Возврат ТекстНДСПоСтавке;
	
КонецФункции // ТекстНДСПоСтавке()

// Возвращает числовое значение ставки НДС по значению перечисления
//
// Параметры:
// 	СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
// Возвращаемое значение:
// 	Число - Значение ставки НДС числом
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Возврат УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);
	
КонецФункции // ПолучитьСтавкуНДСЧислом()

// Возвращает ответственного за электронный документооборот по данному соглашению
//
// Параметры:
// 	Контрагент - СправочникСсылка.Контрагенты, ссылка на контрагента, по которому надо получить ответственного.
// 	Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД, ссылка на соглашение, по которому надо найти ответственного.
//
Функция ПолучитьОтветственногоПоЭД(Контрагент, Соглашение) Экспорт
	
	ОтветственныйПоЭД = Справочники.Пользователи.ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(ОтветственныйПоЭД) Тогда 
		ОтветственныйПоЭД = Соглашение.Ответственный;
	КонецЕсли;
	Возврат ОтветственныйПоЭД;
		
КонецФункции

// Возвращает признак физ. лица.
//
// Параметры:
// 	ДанныеКонтрагента - ссылка на элемент справочника.
//
Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮрФизЛицо") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЮрФизЛицо = ДанныеКонтрагента.ЮрФизЛицо;
	
	Если ТипЗнч(ЮрФизЛицо) <> Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ЭтоФизЛицо = Ложь;
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЭтоФизЛицо = Истина;
	КонецЕсли;
	Возврат ЭтоФизЛицо;
	
КонецФункции

// Формирует текст НДС по этапу оплаты
//
// Параметры:
// 	СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС()
// 	ПроцентПлатежа        - Число - Процент платежа по этапу
//
// Возвращаемое значение:
// 	Строка
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%'"), НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = НСтр("ru='В т.ч. '") + ТекстНДС;
	Иначе
		ТекстНДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	
	Возврат ТекстНДС;
	
КонецФункции // СформироватьТекстНДСЭтапаОплаты()

// Функция возвращает, нужно ли вы водить данные о скидках в печатную форму документа
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	Если ИспользоватьСкидки Тогда
		
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Или ТипЗнч(Товары) = Тип("Массив") Тогда
			
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТоваров.СуммаСкидки) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Товары) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			
			Пока Товары.Следующий() Цикл
				Если ЗначениеЗаполнено(Товары.СуммаСкидки) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // НужноВыводитьСкидки()

// Формирует фамилию и инициалы по переданной строке.
//
// Параметры
// 	ПолноеНаименование - строка с наименованием.
//
// Возвращаемое значение 
// 	Строка - фамилия и инициалы одной строкой. 
// 	В параметрах Фамилия, Имя и Отчество записываются вычисленные части.
//
// Пример:
//  Результат = ФамилияИнициалыФизЛица("Иванов Иван Иванович"); // Результат = "Иванов И. И."
//
Функция ФамилияИнициалыФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	Возврат ОбщегоНазначения.ФамилияИнициалыФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ");
	
КонецФункции

 /////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ДЛЯ ПЕРЕОПРЕДЕЛЕНИЯ ПОВЕДЕНИЯ ЭЛЕКТРОННЫХ ДОКУМЕНТОВ

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
// ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент) Экспорт
	
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда    
		ТЗ = ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.Выгрузить(, "Отпечаток");
		ТЗ.Свернуть("Отпечаток");
		ФлагПодписанПолностью = (ТЗ.Количество() > 1);
	Иначе
		// массив отпечатков всех установленных ЭЦП на ЭД
		МассивОтпечатковСертификатов = ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.ВыгрузитьКолонку("Отпечаток");
		
		// выберем все действующие сертификаты по тек.организации и тек.виду ЭД, совпадающие с сертификатами установленных ЭЦП
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ 
		               |	СертификатыЭЦПВидыДокументов.Ссылка КАК СертификатЭЦП
		               |ИЗ
		               |	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
		               |ГДЕ
		               |	СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация
		               |	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидДокумента
		               |	И СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатковСертификатов)
		               |	И СертификатыЭЦПВидыДокументов.Ссылка.Отозван = ЛОЖЬ
		               |	И СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("Организация", 		ЭлектронныйДокумент.Организация);
		Запрос.УстановитьПараметр("ВидДокумента", 		ЭлектронныйДокумент.ВидЭД);
		Запрос.УстановитьПараметр("МассивОтпечатковСертификатов", МассивОтпечатковСертификатов);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		// считаем, что если есть хоть один нужный сертификат, то ЭД полностью подписан
		Если НЕ РезультатЗапроса.Следующий() Тогда
			ФлагПодписанПолностью = Ложь;
		Иначе
			ФлагПодписанПолностью = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// дополнительно обработаем ЭД, если подписан только частично
	Если НЕ ФлагПодписанПолностью Тогда
		ФайлОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ФайлОбъект.СтатусЭД = ?(ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани, 
								Перечисления.СтатусыЭД.ЧастичноПодписан, ФайлОбъект.СтатусЭД);  
		ФайлОбъект.Изменил = ПараметрыСеанса.ТекущийПользователь;
		ФайлОбъект.Записать();
	КонецЕсли;
	
	Возврат ФлагПодписанПолностью;
	
КонецФункции

// Проверяет выполняются ли необходимые автоматические условия для утверждения документа.
// 
// Параметры:
// 	ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент) Экспорт
	// Функция, которая будет определять, готов ли электронный документ для отправки на подпись.
	
	Возврат Истина;
КонецФункции

// Проверяет выполняются ли необходимые автоматические условия для подписи документа.
// 
// Параметры:
// 	ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументГотовКПодписи(ЭлектронныйДокумент) Экспорт
	// Функция, которая будет определять, готов ли электронный документ к подписи.
	
	Возврат Истина;
КонецФункции

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
// ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
		
КонецПроцедуры		

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
// ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	Если ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ФайлОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ФайлОбъект.СтатусЭД = Перечисления.СтатусыЭД.ПолностьюПодписан;
		ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДата();
		ФайлОбъект.Записать();
		ЭлектронныеДокументы.ОбновитьВерсиюЭД(ФайлОбъект.Ссылка);
	КонецЕсли;
КонецПроцедуры		

// Проверяет, проведенность документов перед формированием.
//
// Параметры
// 	ДокументыМассив - Массив - ссылки на документы, которые должны быть проведены перед формированием.
//
Функция ПроверитьГотовностьИсточников(ДокументыМассив, ФормаИсточник = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(ДокументыМассив, Тип("СтрокаГруппировкиДинамическогоСписка"));
	МассивНепроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ДокументыМассив);
	КоличествоНепроведенныхДокументов = МассивНепроведенныхДокументов.Количество();
	
	Если КоличествоНепроведенныхДокументов = 0 Тогда
		Возврат ДокументыМассив;
	Иначе
		Если КоличествоНепроведенныхДокументов = 1 Тогда
			Текст = НСтр("ru = 'Для того чтобы сформировать электронную версию документа, его необходимо предварительно провести.'");
		Иначе
			Текст = НСтр("ru = 'Для того чтобы сформировать электронные версии документов, их необходимо предварительно провести.'");
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
	ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен.'");
	Для Каждого НепроведенныйДокумент Из МассивНепроведенныхДокументов Цикл
		Найденный = ДокументыМассив.Найти(НепроведенныйДокумент.Ссылка);
		Если Найденный <> Неопределено Тогда
			ДокументыМассив.Удалить(Найденный);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(НепроведенныйДокумент.Ссылка)), 
																		НепроведенныйДокумент.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыМассив;
	
КонецФункции

// Возвращает доступность роли "ПолныеПрава"
//
Функция ДоступнаРольПолныеПрава() Экспорт
	Возврат РольДоступна("ПолныеПрава");
КонецФункции

//Получает ссылку на предопределенный элемент справочника
//
// Параметры:
// 	НазваниеСправочника - название справочника в метаданных
// 	НазваниеЭлемента - название предопределенного элемента справочника, ссылку на который необходимо получить
//
Функция ПолучитьПредопределенныйЭлементСправочника(НазваниеСправочника, НазваниеЭлемента) Экспорт
	Возврат Справочники[НазваниеСправочника][НазваниеЭлемента];
КонецФункции

// Возвращает данные по номенклатуре и характеристике товара на основании данных о номенклатуре поставщика
// 
// Параметры:
// 	НоменклатураПоставщика - Струкутра, содержит сведения о номенклатуре поставщика
//
// Возвращаемое значение:
// 	Структура - Структура, содержащая поля:
// 					Номенклатура
// 					ХарактеристикаНоменклатуры
//
Функция ПолучитьДанныеТовараПоНоменклатуреПоставщика(НоменклатураПоставщика)
	
	ДанныеПоТовару = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	НоменклатураКонтрагентов.Номенклатура,
		|	НоменклатураКонтрагентов.ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		//ПоискПоИдентификатору КОГДА НоменклатураКонтрагентов.Идентификатор = &Идентификатор ТОГДА 0
		|		//ПоискПоАртикулу КОГДА НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента = &Артикул ТОГДА 1
		|		//ПоискПоАртикулу КОГДА НоменклатураКонтрагентов.КодНоменклатурыКонтрагента = &Артикул ТОГДА 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.Контрагент = &Контрагент
		|	И ( 
		|		ЛОЖЬ
		|		//ПоискПоИдентификатору ИЛИ НоменклатураКонтрагентов.Идентификатор = &Идентификатор
		|		//ПоискПоАртикулу ИЛИ НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента = &Артикул
		|		//ПоискПоАртикулу ИЛИ НоменклатураКонтрагентов.КодНоменклатурыКонтрагента = &Артикул
		|	)
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
	Запрос.УстановитьПараметр("Контрагент", НоменклатураПоставщика.Владелец);
	
	// Установим параметры поиска
	Если НоменклатураПоставщика.Свойство("Идентификатор") И ЗначениеЗаполнено(НоменклатураПоставщика.Идентификатор) Тогда // По идентификатору
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПоискПоИдентификатору", "");
		Запрос.УстановитьПараметр("Идентификатор", НоменклатураПоставщика.Идентификатор);
	КонецЕсли;
	
	Если НоменклатураПоставщика.Свойство("Артикул") И ЗначениеЗаполнено(НоменклатураПоставщика.Артикул) Тогда // По артикулу
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПоискПоАртикулу", "");
		Запрос.УстановитьПараметр("Артикул", НоменклатураПоставщика.Артикул);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ДанныеПоТовару.Номенклатура 				= Справочники.Номенклатура.ПустаяСсылка();
		ДанныеПоТовару.ХарактеристикаНоменклатуры 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(); 
	Иначе
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ДанныеПоТовару.Номенклатура 				= Выборка.Номенклатура;
		ДанныеПоТовару.ХарактеристикаНоменклатуры 	= Выборка.ХарактеристикаНоменклатуры; 
	КонецЕсли;
	
	Возврат ДанныеПоТовару;
	
КонецФункции

// Формирует структуру для заполнения строки ТЧ
//
Функция ПолучитьДанныеСтрокиТЧ(ДанныеЗаполнения, ДеревоРазбора)
	
	ДанныеДляЗаполненияСтрокиТЧ = Новый Структура();
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ВРег(ИмяРеквизитаВБД) = ВРег("Характеристика") Тогда 
			ИмяРеквизитаВБД = "ХарактеристикаНоменклатуры";
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизита(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		ДанныеДляЗаполненияСтрокиТЧ.Вставить(ИмяРеквизитаВБД, НайденноеЗначение);
		
		Если ТекСтрока.Реквизит = "Номенклатура" И ЗначениеЗаполнено(НайденноеЗначение) Тогда
			
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита,"ИндексСтроки",Истина);
			
			// Получим единицу измерения по классификатору
			ЕдиницаИзмеренияПоКлассификатору = ПолучитьЗначениеРеквизита(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			
			// Получим единицу измерния для данной номенклатуры в соответствии с единицей классификатора.
			ЕдиницаИзмерения = НайтиСсылкуНаОбъектПоРеквизиту("ЕдиницыИзмерения", 
					"ЕдиницаПоКлассификатору", 
					ЕдиницаИзмеренияПоКлассификатору, 
					НайденноеЗначение);
					
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент); 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляЗаполненияСтрокиТЧ;
	
КонецФункции

Функция ПолучитьСтавкуНДСПеречислением(СтавкаНДС, ОбратнаяСтавка = Ложь)
	
	Если ТипЗнч(СтавкаНДС) = Тип("Строка") Тогда
		СтавкаНДСЧисло = Число(СтавкаНДС);
	ИначеЕсли ТипЗнч(СтавкаНДС) = Тип("Число") Тогда 
		СтавкаНДСЧисло = СтавкаНДС;
	Иначе // неправильный тип
		СтавкаНДСЧисло = Неопределено;
	КонецЕсли;
	
	Если СтавкаНДСЧисло = Неопределено Тогда
		СтНДС = Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли СтавкаНДСЧисло = 0 Тогда
		СтНДС = Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли СтавкаНДСЧисло = 10 Тогда
		Если ОбратнаяСтавка Тогда
			СтНДС = Перечисления.СтавкиНДС.НДС10_110;
		Иначе
			СтНДС = Перечисления.СтавкиНДС.НДС10;
		КонецЕсли;
	ИначеЕсли СтавкаНДСЧисло = 18 Тогда
		Если ОбратнаяСтавка Тогда
			СтНДС = Перечисления.СтавкиНДС.НДС18_118;
		Иначе
			СтНДС = Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтНДС;
	
КонецФункции

