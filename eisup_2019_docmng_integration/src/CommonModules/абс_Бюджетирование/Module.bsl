//функция формирует код структуры "по ключам" вида
//Организация - 0;
//ЦФУ - 1;
//ЦФО - 2;
//ТипРасхода - 3;
//ТипКонтрагента - 4;
//ТипСети - 5;
//КВ - 6;
//ТЭО - 7;
//БюджетнаяСтатья - 8;
//Код полностью заполненной структуры всегда 012345678
//если задано только Организация, ЦФУ, ЦФО, Статья, то код будет 0128
Функция СформироватьКодСтруктуры(Структура)
	Код = "";
	Если Структура.Свойство("Организация") Тогда
		Код = Код+"0";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ЦФУ") Тогда
		Код = Код+"1";
	КонецЕсли;
	
	Если Структура.Свойство("ЦФО") Тогда
		Код = Код+"2";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ТипРасхода") Тогда
		Код = Код+"3";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ТипКонтрагента") Тогда
		Код = Код+"4";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ТипСети") Тогда
		Код = Код+"5";
	КонецЕсли;
	
	Если Структура.Свойство("абс_КВ") Тогда
		Код = Код+"6";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ТЭО") Тогда
		Код = Код+"7";
	КонецЕсли;
	
	Если Структура.Свойство("СтатьяОборотов") Тогда
		Код = Код+"8";
	КонецЕсли;
	
	возврат Код;
	
КонецФункции

Процедура ЗаполнитьТаблицуВариантовАналитик(ЗНАЧ СтруктураЗаполненныхАналитик,ТаблицаВариантовАналитик, МассивОбязательныхАналитик)
	Для каждого УдаляемыйЭлементСтруктуры из СтруктураЗаполненныхАналитик Цикл
		Если МассивОбязательныхАналитик.Найти(УдаляемыйЭлементСтруктуры.Ключ)<>неопределено Тогда			
			продолжить;
		КонецЕсли;
		
		//создаем копию структуры без этого элемента
		КопияСтруктуры = Новый Структура;
		
		Для каждого ЭлементСтруктуры из СтруктураЗаполненныхАналитик Цикл
			Если УдаляемыйЭлементСтруктуры.Ключ = ЭлементСтруктуры.Ключ Тогда
				продолжить;
			КонецЕсли;
			
			КопияСтруктуры.Вставить(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
			
		КонецЦикла;
		
		КодКопииСтруктуры = СформироватьКодСтруктуры(КопияСтруктуры);
		Если КопияСтруктуры.Количество()>0 и ТаблицаВариантовАналитик.Найти(КодКопииСтруктуры,"Код")=неопределено Тогда
			НоваяСтрока = ТаблицаВариантовАналитик.Добавить();
			НоваяСтрока.Структура = КопияСтруктуры;
			НоваяСтрока.Уровень = КопияСтруктуры.Количество();
			НоваяСтрока.КОД = КодКопииСтруктуры;
			Если КопияСтруктуры.Количество()>1 Тогда
				ЗаполнитьТаблицуВариантовАналитик(КопияСтруктуры,ТаблицаВариантовАналитик, МассивОбязательныхАналитик);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Функция возвращает остаток лимитов.
//Параметры:
//Дата, дата на которую интересуют лимиты
//СтруктураАналитик - структура строго со следующими полями
//СтруктураАналитик = НОВЫЙ Структура;
//СтруктураАналитик.Вставить("Организация",Организация);
//СтруктураАналитик.Вставить("абс_ЦФУ", ЦФУ);
//СтруктураАналитик.Вставить("ЦФО", ЦФО);
//СтруктураАналитик.Вставить("абс_ТипРасхода", ТипРасхода);
//СтруктураАналитик.Вставить("абс_ТипКонтрагента", ТипКонтрагента);
//СтруктураАналитик.Вставить("абс_ТипСети", ТипСети);
//СтруктураАналитик.Вставить("абс_КВ",КВ);
//СтруктураАналитик.Вставить("абс_ТЭО", ТЭО);
//СтруктураАналитик.Вставить("СтатьяОборотов", БюджетнаяСтатья);
Функция ПостроениеТаблицыВариантовАналитик(Дата, Знач СтруктураАналитик)
	
	СтруктураЗаполненныхАналитик = Новый Структура;
	Для каждого ЭлементСтруктуры из СтруктураАналитик Цикл
		// 20111114 Фролов Бага
		// Проблема в том что механизм построения аналитик отключен, но т.к. аналитика не заполнена по ней не происходит отборов
		// следовательно механизм не до конца отключен.
		//Если ЗначениеЗаполнено(ЭлементСтруктуры.значение) Тогда
		СтруктураЗаполненныхАналитик.Вставить(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
		//КонецЕсли;		
	КонецЦикла;
	
	// АБС ВСТАВКА Фролов 20120125 Не используем регистр установленных аналитик
	// т.к. аналитики все заполняются полостью.
	Возврат СтруктураЗаполненныхАналитик;
	//НФС 2018
	//Крамаренко Д.М.
	//отключено за ненадобностью
	//по СтруктураЗаполненныхАналитик создадим таблицу со всевозможными сочетаниями аналитик
	//ТаблицаВариантовАналитик = Новый ТаблицаЗначений;
	//ТаблицаВариантовАналитик.Колонки.Добавить("Структура");
	//ТаблицаВариантовАналитик.Колонки.Добавить("Уровень");
	//ТаблицаВариантовАналитик.Колонки.Добавить("Код");
	//
	//
	//НоваяСтрока = ТаблицаВариантовАналитик.Добавить();
	//НоваяСтрока.Структура = СтруктураЗаполненныхАналитик;
	//НоваяСтрока.Уровень = СтруктураЗаполненныхАналитик.Количество();
	//НоваяСтрока.Код = СформироватьКодСтруктуры(НоваяСтрока.Структура);
	//
	//МассивОбязательныхАналитик = Новый Массив;
	//МассивОбязательныхАналитик.Добавить("СтатьяОборотов");
	//МассивОбязательныхАналитик.Добавить("Организация");
	//МассивОбязательныхАналитик.Добавить("абс_ЦФУ");
	//МассивОбязательныхАналитик.Добавить("ЦФО");
	//МассивОбязательныхАналитик.Добавить("абс_ТЭО");
	//МассивОбязательныхАналитик.Добавить("абс_ТипСети");
	//МассивОбязательныхАналитик.Добавить("абс_КВ");
	//МассивОбязательныхАналитик.Добавить("абс_ТипКонтрагента");
	//МассивОбязательныхАналитик.Добавить("абс_ТипРасхода");
	//
	////
	////Если Найти(СтруктураАналитик.абс_ЦФУ.Наименование,"Связь")>0  Тогда
	////	Если Найти(СтруктураАналитик.СтатьяОборотов.Наименование,"КВ по поставке")>0 Тогда
	////		МассивОбязательныхАналитик.Добавить("абс_ТЭО");
	////		МассивОбязательныхАналитик.Добавить("абс_ТипСети");
	////	КонецЕсли; 		
	////КонецЕсли;
	////Если Найти(СтруктураАналитик.абс_ЦФУ.Наименование,"Администрация")>0  или Найти(СтруктураАналитик.абс_ЦФУ.Наименование,"Эксплуатация")>0 Тогда
	////	Если Найти(СтруктураАналитик.СтатьяОборотов.Наименование,"КВ по поставке")>0 Тогда
	////		МассивОбязательныхАналитик.Добавить("абс_КВ");			
	////	КонецЕсли; 		
	////КонецЕсли;	
	//
	//
	//ЗаполнитьТаблицуВариантовАналитик(СтруктураЗаполненныхАналитик,ТаблицаВариантовАналитик, МассивОбязательныхАналитик);
	//ТаблицаВариантовАналитик.Сортировать("Уровень Убыв");
	//
	//Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//// АБС ИЗМЕНЕНО Фролов 20110125 Необходимо проверять лимит на текущую дату.
	////Запрос.УстановитьПараметр("Дата",Дата);
	//Запрос.УстановитьПараметр("Дата",КонецГода(Дата));
	//Запрос.Текст=
	//"ВЫБРАТЬ
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.СтатьяОборотов КАК СтатьяОборотов,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.ЦФО,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипКонтрагента КАК абс_ТипКонтрагента,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипСети КАК абс_ТипСети,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_КВ КАК абс_КВ,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТЭО КАК абс_ТЭО,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ЦФУ КАК абс_ЦФУ,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипРасхода КАК абс_ТипРасхода,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.Организация
	//|ПОМЕСТИТЬ ВТ_ЛимитыПоСтатьям
	//|ИЗ
	//|	РегистрСведений.абс_УстановкаЛимитовПоСтатьям.СрезПоследних(&Дата, ) КАК абс_УстановкаЛимитовПоСтатьямСрезПоследних";
	//
	//Запрос.Выполнить();
	//
	//Для каждого ВариантНабораАналитик из ТаблицаВариантовАналитик Цикл
	//	
	//	УсловиеОтбора = "";
	//	Для каждого ЭлементСтруктуры из ВариантНабораАналитик.Структура Цикл
	//		УсловиеОтбора = УсловиеОтбора+" И ВТЛимитыПоСтатьям."+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ;
	//		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
	//	КонецЦикла;
	//	УсловиеОтбора = СокрЛП(Сред(УсловиеОтбора,3));
	//	
	//	Запрос.Текст=
	//	"ВЫБРАТЬ *
	//	|ИЗ
	//	|	ВТ_ЛимитыПоСтатьям КАК ВТЛимитыПоСтатьям
	//	|ГДЕ
	//	|"+УсловиеОтбора;
	//	
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		возврат ВариантНабораАналитик.Структура;			
	//	КонецЕсли;
	//КонецЦикла;
	//возврат Неопределено;
КонецФункции

//Функция находит остаток лимита по бюджету
//возвращает:
//лимит, если он есть
//-1 если набор аналитик построен, но запрос к регистру контролируемых значений результатов не дал
//-2 если набор аналитик не построен

Функция ОстатокЛимитаПоБюджету(Дата1, Дата2,СтруктураАналитик, НефиксированнаяСумма = Ложь, ЗакупочныйЗаказ = Неопределено) Экспорт
	
	//ххх Брель Виктор Андреевич 21.06.2018 11:52:32, заявка 77356750<<<
	КВпоПост = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВпоПост");
	ГоловнаяКомпания = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК02020013");
	ТК0101ДЗОТТК = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК0101");
	ТК0102ФилиалыТТК = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК0102");
	// Брель Виктор Андреевич 21.06.2018 11:52:32 >>>

	//АБС ВСТАВКА №38427 НАЧАЛО «12 февраля 2014 г.», Пополитов	
	СтруктураАналитик.Вставить("НеСценарий",ПолучитьСценарийДляКонтроляДДС(СтруктураАналитик.Организация));
	//\\АБС ВСТАВКА №38427 КОНЕЦ
	//НФС 2018
	//Крамаренко Д.М.
	//отключено за ненадобностью
	//ВариантСтруктуры = ПостроениеТаблицыВариантовАналитик(Дата2,СтруктураАналитик);
	//Если ВариантСтруктуры = Неопределено Тогда
	//	возврат -2;
	//КонецЕсли;
	
	//нашли набор аналитик, по которым лимиты есть
	Запрос = НОВЫЙ Запрос;
	//НФС 2018
	//Крамаренко Д.М.
	//проверка перехода через год и отсутствия перенесенного лимита
	//действует только до конца 2018
	Если Год(Дата1) < Год(ТекущаяДата()) Тогда
		Дата1 = НачалоГода(ТекущаяДата());
		Дата2 = Новый Граница(КонецМесяца(НачалоГода(ТекущаяДата())), ВидГраницы.Включая);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата1",Дата1);
	Запрос.УстановитьПараметр("Дата2",Дата2);
	
	УсловиеОтбора = "";
	
	//ххх Брель Виктор Андреевич 22.06.2018 12:52:03, заявка 77356750 <<<
	Для каждого ЭлементСтруктуры из СтруктураАналитик Цикл
		
		// абс_КВ
		Если ЭлементСтруктуры.Ключ = "СтатьяОборотов" И ЭлементСтруктуры.Значение <> КВпоПост Тогда
			Если СтруктураАналитик.Свойство("абс_КВ") Тогда
				СтруктураАналитик.Вставить("абс_КВ",  Справочники.абс_КапитальныеВложения.ПустаяСсылка());
			КонецЕсли;
		КонецЕсли;
		
		// абс_ТипКонтрагента
		Если ЭлементСтруктуры.Ключ = "абс_ТипКонтрагента"  Тогда
			Если ЭлементСтруктуры.Значение.Родитель <> ТК0101ДЗОТТК И   ЭлементСтруктуры.Значение.Родитель.Родитель <> ТК0101ДЗОТТК И  ЭлементСтруктуры.Значение.Родитель.Родитель.Родитель <> ТК0101ДЗОТТК И 
				ЭлементСтруктуры.Значение.Родитель <> ТК0102ФилиалыТТК И   	ЭлементСтруктуры.Значение.Родитель.Родитель <> ТК0102ФилиалыТТК И 	ЭлементСтруктуры.Значение.Родитель.Родитель.Родитель <> ТК0102ФилиалыТТК И
				ЭлементСтруктуры.Значение <> ГоловнаяКомпания Тогда
				СтруктураАналитик.Вставить("абс_ТипКонтрагента", Справочники.абс_ТипыКонтрагентов.ПустаяСсылка());		
			КонецЕсли;
		КонецЕсли;			
		
		// Брель Виктор Андреевич 22.06.2018 12:52:03 >>>
		
	КонецЦикла;
	
	Для каждого ЭлементСтруктуры из СтруктураАналитик Цикл
		
		// АБС ВСТАВКА 20120205 Отключаем контроль по аналитике "Тип контрагента", "Тип сети"
		// Инициатор: Калымкин
		//ххх Брель Виктор Андреевич 04.06.2018 9:18:34, заявка 77354995<<<
		// Убрал ТипСети
		Если ЭлементСтруктуры.Ключ = "абс_ТипРасхода" 
			//ИЛИ ЭлементСтруктуры.Ключ = "ЦФО" 
			ИЛИ ЭлементСтруктуры.Ключ = "абс_ТипСети" Тогда			
			Продолжить;
		КонецЕсли;
		
		// Брель Виктор Андреевич 04.06.2018 9:18:34 >>>
		
		// АБС ВСТАВКА 20120205 Отключаем контроль по аналитике "Тип контрагента", "Тип сети" КОНЕЦ
		
		//АБС НАЧАЛО Задача №08759,38427
		//УсловиеОтбора = УсловиеОтбора+" И "+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ;
		Если ЭлементСтруктуры.Ключ = "Проект" Тогда
			УсловиеОтбора = УсловиеОтбора+" И "+ЭлементСтруктуры.Ключ+" В (&"+ЭлементСтруктуры.Ключ+")"; 
		ИначеЕсли ЭлементСтруктуры.Ключ = "НеСценарий" Тогда
			УсловиеОтбора = УсловиеОтбора+" И (не Сценарий В (&НеСценарий))"; 			
		Иначе
			УсловиеОтбора = УсловиеОтбора+" И "+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ; 
		КонецЕсли;
		//\\АБС КОНЕЦ Задача №08759
		
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
	КонецЦикла;
	УсловиеОтбора = СокрЛП(Сред(УсловиеОтбора,3));
	
	//Если Не НефиксированнаяСумма Тогда //АБС Коломиец 4870
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Сумма(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот) КАК План,
	|	Сумма(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот) КАК Факт
	|ИЗ
	|	РегистрНакопления.КонтролируемыеЗначенияБюджетов.Обороты(
	|			&Дата1,
	|			&Дата2,
	|			,
	|			"+УсловиеОтбора+") КАК КонтролируемыеЗначенияБюджетовОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Попытка
			возврат Выборка.План-Выборка.Факт;
		Исключение
			возврат -1;
		КонецПопытки;
	Иначе
		возврат -2;
	КонецЕсли;
	
КонецФункции

//АБС НАЧАЛО Задача №08759
Функция ПолучитьСценарийПоТипуДокумента(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_СоответствиеCценариевПоТипамДокументов.Сценарий
	|ИЗ
	|	РегистрСведений.абс_СоответствиеCценариевПоТипамДокументов КАК абс_СоответствиеCценариевПоТипамДокументов
	|ГДЕ
	|	абс_СоответствиеCценариевПоТипамДокументов.ТипДокумента = &ТипДокумента";
	Запрос.УстановитьПараметр("ТипДокумента", Документы[Документ.Метаданные().Имя].ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(),Выборка.Сценарий,Справочники.СценарииПланирования.ПустаяСсылка())
	
КонецФункции

Функция ПостроитьЗапросПоОстаткам(СтруктураПолей,Валюта, ТолькоИнформацияОНаличииЛимита = Ложь, Сценарий = Неопределено, СценарийШапка = Ложь, ЭтоДДС = Ложь) Экспорт
	//ххх Брель Виктор Андреевич 21.06.2018 11:52:32, заявка 77356750<<<
	КВпоПост = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВпоПост");
	ГоловнаяКомпания = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК02020013");
	ТК0101ДЗОТТК = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК0101");
	ТК0102ФилиалыТТК = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК0102");
	СтруктураАналитик = НОВЫЙ Структура;
	// Брель Виктор Андреевич 21.06.2018 11:52:32 >>>

	// абс_КВ
	Если СтруктураПолей.СтатьяОборотов = КВпоПост Тогда
		СтруктураАналитик.Вставить("абс_КВ",СтруктураПолей.КВ);
	КонецЕсли;
	
	// абс_ТипКонтрагента

		Если СтруктураПолей.ТипКонтрагента.Родитель = ТК0101ДЗОТТК ИЛИ   СтруктураПолей.ТипКонтрагента.Родитель.Родитель= ТК0101ДЗОТТК ИЛИ  СтруктураПолей.ТипКонтрагента.Родитель.Родитель.Родитель= ТК0101ДЗОТТК ИЛИ 
			СтруктураПолей.ТипКонтрагента.Родитель= ТК0102ФилиалыТТК ИЛИ   	СтруктураПолей.ТипКонтрагента.Родитель.Родитель= ТК0102ФилиалыТТК ИЛИ 	СтруктураПолей.ТипКонтрагента.Родитель.Родитель.Родитель= ТК0102ФилиалыТТК ИЛИ
			СтруктураПолей.ТипКонтрагента = ГоловнаяКомпания Тогда
			СтруктураАналитик.Вставить("абс_ТипКонтрагента", СтруктураПолей.ТипКонтрагента);
		Иначе
			СтруктураАналитик.Вставить("абс_ТипКонтрагента", Справочники.абс_ТипыКонтрагентов.ПустаяСсылка());
		КонецЕсли;
	
	мВалютаРеглУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Если Валюта = мВалютаРеглУчета Тогда
		РесурсПлан = "СуммаУпрОборот";
		РесурсЛимитКонтроль = "СуммаСценарияКонтрольОборот";
		РесурсЛимитИсполнение = "СуммаСценарияИсполнениеОборот";
	Иначе
		РесурсПлан = "ВалютнаяСуммаОборот";
		РесурсЛимитКонтроль = "СуммаСценарияКонтрольВалОборот";
		РесурсЛимитИсполнение = "СуммаСценарияИсполнениеВалОборот";		
	КонецЕсли;
	
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьЛимит",Ложь);
	ТаблицаЛимитов = Новый ТаблицаЗначений;
	Результат.Вставить("ТаблицаЛимитов",ТаблицаЛимитов);
	Результат.Вставить("СуммаПлан",0);
	Результат.Вставить("СуммаЛимита",0);
	Результат.Вставить("СуммаОстатокЛимита",0);
	
	
	СтруктураАналитик.Вставить("Организация",СтруктураПолей.Организация);
	СтруктураАналитик.Вставить("абс_ЦФУ", СтруктураПолей.ЦФУ);
	СтруктураАналитик.Вставить("ЦФО", СтруктураПолей.ЦФО);
	//СтруктураАналитик.Вставить("абс_ТипРасхода", СтруктураПолей.ТипРасхода);
	// АБС ВСТАВКА 20120205 Отключаем контроль по аналитике "Тип контрагента", "Тип сети"
	// Инициатор: Калымкин
	СтруктураАналитик.Вставить("абс_ТЭО", СтруктураПолей.ТЭО);
	СтруктураАналитик.Вставить("СтатьяОборотов", СтруктураПолей.СтатьяОборотов);
	
	//Сторчевой А.Н. НФС 2018 { для Крамаренко                                   
	Если СтруктураПолей.Свойство("ОбъектБюджетирования") Тогда
		СтруктураАналитик.Вставить("ttk_ОбъектБюджетирования", СтруктураПолей.ОбъектБюджетирования);	
	КонецЕсли;
	// } Сторчевой А.Н. НФС 2018
	
	//АБС НАЧАЛО Задача №08759
	Если СтруктураПолей.Свойство("Проект") Тогда 
		СтруктураАналитик.Вставить("Проект", СтруктураПолей.Проект);
	КонецЕсли;
	//\\АБС КОНЕЦ Задача №08759 
	
	//АБС ВСТАВКА №38427 НАЧАЛО «12 февраля 2014 г.», Пополитов
	Если не ЭтоДДС или (ЭтоДДС и не ЗначениеЗаполнено(Сценарий)) Тогда
		СтруктураАналитик.Вставить("НеСценарий",ttk_ОбщегоНазначения.ПолучитьСценарийДляКонтроля());
	ИначеЕсли ЭтоДДС и ЗначениеЗаполнено(Сценарий) Тогда	
		СтруктураАналитик.Вставить("Сценарий",Сценарий);
	КонецЕсли;
	//\\АБС ВСТАВКА №38427 КОНЕЦ 
	
	Запрос = Новый Запрос;
	
	СтрокаОтбора = "";
	Для каждого ЭлементСтруктуры из СтруктураАналитик Цикл
		Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение)  ИЛИ 
			//ххх Брель Виктор Андреевич 30.07.2018 11:19:13, заявка <<<	
			ЭлементСтруктуры.Значение = Справочники.абс_ТипыКонтрагентов.ПустаяСсылка() 
			ИЛИ 
			ЭлементСтруктуры.Значение = Справочники.абс_КапитальныеВложения.ПустаяСсылка() 
			ИЛИ 			
			ЭлементСтруктуры.Значение = Справочники.абс_ТЭО.ПустаяСсылка() 
			Тогда
			// Брель Виктор Андреевич 30.07.2018 11:19:13 >>>

			//АБС НАЧАЛО Задача №08759,38427
			//СтрокаОтбора = СтрокаОтбора+" и "+ ЭлементСтруктуры.Ключ+" = &"+ЭлементСтруктуры.Ключ;
			Если ЭлементСтруктуры.Ключ = "Проект" Тогда
				СтрокаОтбора = СтрокаОтбора+" И "+ЭлементСтруктуры.Ключ+" В(&"+ЭлементСтруктуры.Ключ+")"; 
			ИначеЕсли ЭлементСтруктуры.Ключ = "НеСценарий" Тогда
				СтрокаОтбора = СтрокаОтбора+" И ("+?(ЭтоДДС,"","НЕ")+" Сценарий В (&НеСценарий))";
			Иначе
				СтрокаОтбора = СтрокаОтбора+" И "+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ; 
			КонецЕсли;
			//\\АБС КОНЕЦ Задача №08759
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
		КонецЕсли;
		
	КонецЦикла;
	СтрокаОтбора = Сред(СтрокаОтбора,3);
	//Если Сценарий = Неопределено Тогда
	//	Сценарий = Константы.абс_СценарийДляЗЗ.Получить();
	//КонецЕсли;
	
	СтруктураСценариев = ПолучитьСтруктуСценариевПоОрганизации(СтруктураПолей.Организация);
	
	//АБС Коломиец 13573
	Если Не СценарийШапка Тогда      
		Если СтруктураАналитик.СтатьяОборотов = Справочники.СтатьиОборотовПоБюджетам.НайтиПоНаименованию("Единая статья КВ") Тогда
			Сценарий = СтруктураСценариев.СценарийКВПлан;
		Иначе
			Сценарий = СтруктураСценариев.СценарийПоставка;
		КонецЕсли;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	
	Запрос.УстановитьПараметр("ДатаНач",СтруктураПолей.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон",СтруктураПолей.КонецПериода);
	//Сторчевой А.Н. НФС 2018 {Закомментировано для Крамаренко
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.СтатьяОборотов,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.ЦФО,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипКонтрагента КАК ТипКонтрагента,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипСети КАК ТипСети,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_КВ КАК КВ,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТЭО КАК ТЭО,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ЦФУ КАК ЦФУ,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипРасхода КАК ТипРасхода,
	//|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.Организация
	//|ИЗ
	//|	РегистрСведений.абс_УстановкаЛимитовПоСтатьям.СрезПоследних(&ДатаКон,"+СтрокаОтбора+" ) КАК абс_УстановкаЛимитовПоСтатьямСрезПоследних";
	////"+СтрокаОтбора+"
	//ТаблицаЛимитов = Запрос.Выполнить().Выгрузить();
	//Если ТаблицаЛимитов.Количество()>0 Тогда
	//	Результат.ЕстьЛимит = истина;
	//	Результат.ТаблицаЛимитов = ТаблицаЛимитов.Скопировать();
	//	
	//Иначе
	//	Результат.ЕстьЛимит = Ложь;
	//КонецЕсли;
	
	//// АБС ВСТАВКА 20120215 Регистр "Установка лимитов по статьям" отключен,
	//// отключим так же информацию о неустановленном лимите.
	//Результат.ЕстьЛимит = истина;
	//
	//Если ТолькоИнформацияОНаличииЛимита Тогда
	//	возврат Результат;
	//КонецЕсли;
	// } Сторчевой А.Н. НФС 2018
	
	//// АБС ИЗМЕНЕНО 20120329
	//// По статье "КВ по поставке" лимит контролируем по сценарию "КВ по поставке ПЛАН"
	//Если СтруктураАналитик.СтатьяОборотов = Справочники.СтатьиОборотовПоБюджетам.НайтиПоНаименованию("Единая статья КВ") Тогда
	//	СценарийКВ = Справочники.СценарииПланирования.НайтиПоНаименованию("КВ по поставке ПЛАН");
	//	Запрос.УстановитьПараметр("Сценарий", СценарийКВ);		
	//КонецЕсли;
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЕСТЬNULL(ОборотыБюджетов."+РесурсПлан+", 0)) КАК СуммаПлан,
	|	ОборотыБюджетов.Сценарий
	|ИЗ
	|	РегистрНакопления.ОборотыБюджетов.Обороты(&ДатаНач, &ДатаКон, , "+СтрокаОтбора+") КАК ОборотыБюджетов
	|ГДЕ
	|	ОборотыБюджетов.Сценарий = &Сценарий
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыБюджетов.Сценарий";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.СуммаПлан = Выборка.СуммаПлан;
	Иначе
		Результат.СуммаПлан = 0;
	КонецЕсли;
	
	// На всякий случай восстановим сценарий, возможно его подменили на КВ
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
	// АБС ВСТАВКА 20120329 КОНЕЦ
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЕСТЬNULL(ОборотыБюджетов."+РесурсЛимитКонтроль+", 0)) КАК СуммаЛимита,
	|	СУММА(ЕСТЬNULL(ОборотыБюджетов."+РесурсЛимитИсполнение+", 0)) КАК СуммаЛимитаИсполнение,
	|	ОборотыБюджетов.Контрагент
	|ИЗ
	|	РегистрНакопления.КонтролируемыеЗначенияБюджетов.Обороты(&ДатаНач, &ДатаКон, , "+СтрокаОтбора+") КАК ОборотыБюджетов
	//|ГДЕ
	//|	ОборотыБюджетов.Сценарий = &Сценарий
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыБюджетов.Контрагент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.СуммаЛимита = Выборка.СуммаЛимита;
		Результат.СуммаОстатокЛимита = Выборка.СуммаЛимита - Выборка.СуммаЛимитаИсполнение;
	Иначе    		
		Результат.СуммаЛимита = 0;
		Результат.СуммаОстатокЛимита = 0; 		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//АБС ВСТАВКА №29472 НАЧАЛО «2 декабря 2014 г.», Пополитов
Функция МесяцаИсключенияИзКонтроляЛимитов(ПериодПроверки, Организация, ВыключитьКонтрольЛимитовПоДДС = Ложь) Экспорт 
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивОрганизаций.Добавить(Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодПроверки",НачалоМесяца(ПериодПроверки));
	Запрос.УстановитьПараметр("Организация",МассивОрганизаций);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РС.МесяцИсключения
	|ИЗ
	|	РегистрСведений.абс_МесяцаИсключенияИзКонтроляЛимитов КАК РС
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РС.МесяцИсключения, МЕСЯЦ) = &ПериодПроверки
	|	И РС.ВыключитьКонтрольЛимитов
	|	И РС.Организация В(&Организация)";
	
	Если ВыключитьКонтрольЛимитовПоДДС Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РС.ВыключитьКонтрольЛимитов","РС.ВыключитьКонтрольЛимитовПоДДС");	
	КонецЕсли; 	
	
	Возврат не Запрос.Выполнить().Пустой();	
	
КонецФункции
//\\АБС ВСТАВКА №29472 КОНЕЦ   	

Функция ПоСтатьеРазрешеноПревышениеБюджета(Статья, ВыбОрганизация = Неопределено) Экспорт
	// коммент Лапин А  21.10.2015 возврат обратно
	//// {{ТТК Лапин А. Заявка Обнуление лимитов 05.10.2015 начало
	//// затыкание дыры
	// ТекЮзер = глЗначениеПеременной("глТекущийПользователь");
	//СотрТекЮзера = ТекЮзер.абс_Сотрудник;
	//Если ЗначениеЗаполнено(СотрТекЮзера) Тогда
	//	ТекОрганизация = СотрТекЮзера.Организация;
	//	Если ЗначениеЗаполнено(ТекОрганизация) Тогда
	//		Если НЕ ТекОрганизация = Справочники.Организации.НайтиПоКоду("000000001") Тогда
	//			Возврат Ложь;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//// }}ТТК Лапин А. Заявка Обнуление лимитов 05.10.2015 окончание	
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	абс_СписокСтатейБезКонтроляЛимита.СтатьяОборотовПоБюджетам
	|ИЗ
	|	РегистрСведений.абс_СписокСтатейБезКонтроляЛимита КАК абс_СписокСтатейБезКонтроляЛимита
	|ГДЕ
	|	абс_СписокСтатейБезКонтроляЛимита.СтатьяОборотовПоБюджетам = &Статья ";
	
	// {{ТТК Лапин А. Заявка Обнуление лимитов 27.10.2015 начало	
	ОргКТТК = Справочники.Организации.НайтиПоКоду("000000001");
	
	Если ВыбОрганизация <> Неопределено Тогда
		Если ВыбОрганизация = ОргКТТК Тогда
			//Запрос.Текст = Запрос.Текст + " И абс_СписокСтатейБезКонтроляЛимита.ТолькоДляКТТК = Истина";
		Иначе
			Запрос.Текст = Запрос.Текст + "	И абс_СписокСтатейБезКонтроляЛимита.ТолькоДляКТТК = Ложь";
		КонецЕсли;
	Иначе // не передана  организация, тогда по организации пользователя
		ТекЮзер = глЗначениеПеременной("глТекущийПользователь");
		СотрТекЮзера = ТекЮзер.абс_Сотрудник;
		Если ЗначениеЗаполнено(СотрТекЮзера) Тогда
			ОрганизацияСотрудника = СотрТекЮзера.Организация;
			Если ЗначениеЗаполнено(ОрганизацияСотрудника) Тогда
				Если ОрганизацияСотрудника = ОргКТТК Тогда
					//Запрос.Текст = Запрос.Текст + " И абс_СписокСтатейБезКонтроляЛимита.ТолькоДляКТТК = Истина";
				Иначе // организация, отличная от КТТК
					Запрос.Текст = Запрос.Текст + " И абс_СписокСтатейБезКонтроляЛимита.ТолькоДляКТТК = Ложь";
				КонецЕсли;
			Иначе
				// отказ, так как не передана организация в функцию и не заполнена организация даже у сотрудника
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// }}ТТК Лапин А. Заявка Обнуление лимитов 27.10.2015 окончание	
	
	Запрос.УстановитьПараметр("Статья",Статья);
	
	Рез = Запрос.Выполнить();
	возврат НЕ Рез.Пустой();
	
КонецФункции

Функция ПолучитьМассивДоходов()
	
	МассивСчетовДоходов = Новый Массив();
	МассивСчетовДоходов.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД );
	МассивСчетовДоходов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	Возврат МассивСчетовДоходов;
	
КонецФункции

Функция ПолучитьМассивСчетовЗатрат(ДокументДата)
	
	МассивСчетовЗатрат = Новый Массив(); 
	
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОСвОрганизации);	
	
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС); 
	
	Возврат МассивСчетовЗатрат;
	
КонецФункции

Функция ПроверятьМаппингПоСчетуЗатрат(ДокументДата, СчетУчета)
	
	МассивСчетовЗатрат = Новый Массив(); 
	
	ДатаОграниченияМапингаАналитикПоЗатратам = Константы.абс_ДатаКонтроляМапингаБюджетныхАналитикВПрочихДокументахПоЗатратам.Получить();	
	
	Если ЗначениеЗаполнено(ДатаОграниченияМапингаАналитикПоЗатратам) И         
		ДокументДата >= КонецДня(ДатаОграниченияМапингаАналитикПоЗатратам) Тогда   		
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОСвОрганизации);	
	КонецЕсли;
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС); 
	
	Если МассивСчетовЗатрат.Найти(СчетУчета) <> Неопределено
		Или (СчетУчета.Родитель <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() И МассивСчетовЗатрат.Найти(СчетУчета.Родитель) <> Неопределено)
		Или (СчетУчета.Родитель <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() И СчетУчета.Родитель.Родитель <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() И МассивСчетовЗатрат.Найти(СчетУчета.Родитель) <> Неопределено) Тогда
		Возврат Истина;		 
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


Процедура ПроведениеПоБюджетуДМС(ТабДвижений,Документ, Сценарий)
	
	// АБС Фролов 20120531 Включаем проведение по РБП для ДЗО
	//Если ПараметрыСеанса.абс_ПользовательДЗО Тогда
	//	Возврат;	
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК РБП,
	|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_ЦФУ КАК абс_ЦФУ,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_ЦФО КАК абс_ЦФО,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_ТипКонтрагента КАК абс_ТипКонтрагента,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_ТипСети КАК абс_ТипСети,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_БюджетнаяСтатья КАК абс_БюджетнаяСтатья,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_КВ КАК абс_КВ,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_ТЭО КАК абс_ТЭО,
	//АБС НАЧАЛО Задача №08759
	| ХозрасчетныйДвиженияССубконто.СубконтоКт2.Проект КАК Проект,
	//\\АБС КОНЕЦ Задача №08759
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_ТипРасхода КАК абс_ТипРасхода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Документ, , ) КАК ХозрасчетныйДвиженияССубконто
	|ГДЕ
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_ЦФУ,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_ЦФО,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_ТипКонтрагента,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_ТипСети,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_БюджетнаяСтатья,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_КВ,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_ТЭО,
	//АБС НАЧАЛО Задача №08759
	| ХозрасчетныйДвиженияССубконто.СубконтоКт2.Проект,
	//\\АБС КОНЕЦ Задача №08759
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2.абс_ТипРасхода";
	
	Запрос.УстановитьПараметр("Документ",Документ);
	Выборка = Запрос.Выполнить().Выбрать(); 
	КонстВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Пока Выборка.Следующий() Цикл
		Движение = ТабДвижений.Добавить();
		Движение.Период = Документ.Дата;
		//Движение.Активность = Истина;
		Движение.Сценарий = Сценарий;
		Движение.СтатьяОборотов = Выборка.абс_БюджетнаяСтатья;
		Движение.Валюта = КонстВалютаРегУчета;
		Движение.абс_ТипКонтрагента = Выборка.абс_ТипКонтрагента;
		Движение.абс_ЦФУ = Выборка.абс_ЦФУ;
		Движение.ЦФО = Выборка.абс_ЦФО;
		Движение.Организация = Выборка.Организация;
		Движение.абс_ТипСети = Выборка.абс_ТипСети;
		Движение.абс_ТЭО = Выборка.абс_ТЭО;
		Движение.абс_КВ = Выборка.абс_КВ;
		Движение.абс_ТипРасхода = Выборка.абс_ТипРасхода;
		
		//АБС НАЧАЛО Задача №08759
		Движение.Проект= Выборка.Проект;
		//\\АБС КОНЕЦ Задача №08759  
		
		Движение.ВалютнаяСумма = Выборка.Сумма;
		Движение.СуммаУпр = Движение.ВалютнаяСумма;
		Движение.СуммаСценария = Движение.СуммаУпр;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроведениеПоБюджетуРБП(ТабДвижений,Документ, Сценарий)
	
	// АБС Фролов 20120531 Включаем проведение по РБП для ДЗО
	//Если ПараметрыСеанса.абс_ПользовательДЗО Тогда
	//	Возврат;	
	//КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов)
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов)
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК РБП,
	|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_ЦФУ
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_ЦФУ
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_ЦФУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК абс_ЦФУ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_ЦФО
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_ЦФО
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_ЦФО
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК абс_ЦФО,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_ТипКонтрагента
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_ТипКонтрагента
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_ТипКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК абс_ТипКонтрагента,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_ТипСети
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_ТипСети
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_ТипСети
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК абс_ТипСети,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_БюджетнаяСтатья
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_БюджетнаяСтатья
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_БюджетнаяСтатья
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК абс_БюджетнаяСтатья,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_КВ
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_КВ
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_КВ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК абс_КВ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_ТЭО
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_ТЭО
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_ТЭО
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК абс_ТЭО,
	//АБС НАЧАЛО Задача №08759
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|   ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).Проект
	|  КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|   ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).Проект
	|  КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|   ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).Проект
	|  ИНАЧЕ НЕОПРЕДЕЛЕНО
	| КОНЕЦ КАК Проект,
	//\\АБС КОНЕЦ Задача №08759  
	| ВЫБОР
	|  КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_ТипРасхода
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_ТипРасхода
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_ТипРасхода
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК абс_ТипРасхода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			(СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|				ИЛИ СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|				ИЛИ СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов)
	|				И Регистратор = &Документ,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов)
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов)
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_ЦФУ
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_ЦФУ
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_ЦФУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_ЦФО
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_ЦФО
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_ЦФО
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_ТипКонтрагента
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_ТипКонтрагента
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_ТипКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_ТипСети
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_ТипСети
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_ТипСети
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_БюджетнаяСтатья
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_БюджетнаяСтатья
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_БюджетнаяСтатья
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_КВ
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_КВ
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_КВ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_ТЭО
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_ТЭО
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_ТЭО
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	//АБС НАЧАЛО Задача №08759
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|   ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).Проект
	|  КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|   ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).Проект
	|  КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|   ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).Проект
	|  ИНАЧЕ НЕОПРЕДЕЛЕНО
	| КОНЕЦ,
	//\\АБС КОНЕЦ Задача №08759   
	| ВЫБОР
	|  КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.РасходыБудущихПериодов).абс_ТипРасхода
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.РасходыБудущихПериодов).абс_ТипРасхода
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.РасходыБудущихПериодов).абс_ТипРасхода
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Документ",Документ);
	Выборка = Запрос.Выполнить().Выбрать(); 
	КонстВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Пока Выборка.Следующий() Цикл
		Движение = ТабДвижений.Добавить();
		Движение.Период = Документ.Дата;
		//Движение.Активность = Истина;
		Движение.Сценарий = Сценарий;
		Движение.СтатьяОборотов = Выборка.абс_БюджетнаяСтатья;
		Движение.Валюта = КонстВалютаРегУчета;
		Движение.абс_ТипКонтрагента = Выборка.абс_ТипКонтрагента;
		Движение.абс_ЦФУ = Выборка.абс_ЦФУ;
		Движение.ЦФО = Выборка.абс_ЦФО;
		Движение.Организация = Выборка.Организация;
		Движение.абс_ТипСети = Выборка.абс_ТипСети;
		Движение.абс_ТЭО = Выборка.абс_ТЭО;
		Движение.абс_КВ = Выборка.абс_КВ;
		Движение.абс_ТипРасхода = Выборка.абс_ТипРасхода;
		
		//АБС НАЧАЛО Задача №08759
		Движение.Проект = Выборка.Проект;
		//\\АБС КОНЕЦ Задача №08759
		
		Движение.ВалютнаяСумма = Выборка.Сумма;
		Движение.СуммаУпр = Движение.ВалютнаяСумма;
		Движение.СуммаСценария = Движение.СуммаУпр;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроведениеПоБюджетуПрочихДокументов(ТабДвижений, Документ, Сценарий,Отказ)
	//
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ХозрасчетныйДвиженияССубконто.СчетДт,
	//|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	//|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	//|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	//|	ХозрасчетныйДвиженияССубконто.СчетКт,
	//|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	//|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	//|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	//|	ХозрасчетныйДвиженияССубконто.Сумма,
	//|	ВЫБОР
	//|		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ЭтоЗатрата,
	//|	ВЫБОР
	//|		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (&МассивСчетовДоходов)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ЭтоДоход,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.Организация КАК Организация,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЦФУ КАК абс_ЦФУ,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЦФО КАК абс_ЦФО,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_БюджетнаяСтатья КАК абс_БюджетнаяСтатья,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипКонтрагента КАК абс_ТипКонтрагента,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_КВ КАК абс_КВ,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТЭО КАК абс_ТЭО,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипСети КАК абс_ТипСети,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипРасхода КАК абс_ТипРасхода,
	//|	ВЫБОР
	//|		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|			ТОГДА ВЫБОР
	//|					КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	//|						ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	//|					КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	//|						ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	//|					КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	//|						ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	//|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|				КОНЕЦ
	//|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|	КОНЕЦ КАК СтатьяЗатрат,
	//|	ВЫБОР
	//|		КОГДА Маппинг.СтатьяУУ ЕСТЬ NULL 
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ КАК ЕстьМапинг,
	//|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерПроводки
	//|ИЗ
	//|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	//|			,
	//|			,
	//|			Регистратор = &Документ
	//|				И (СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|					ИЛИ СчетКт В ИЕРАРХИИ (&МассивСчетовДоходов))
	//|				И (НЕ(СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство)
	//|						И СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщепроизводственныеРасходы))),
	//|			,
	//|			) КАК ХозрасчетныйДвиженияССубконто
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ КАК СтатьяУУ,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ КАК СтатьяБУ,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат КАК СчетЗатрат,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	//|		ИЗ
	//|			РегистрСведений.абс_СоответствиеСтатейЗатрат_БУ_УУ КАК абс_СоответствиеСтатейЗатрат_БУ_УУ
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа) КАК Маппинг
	//|		ПО (ВЫБОР
	//|				КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|					ТОГДА ВЫБОР
	//|							КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|								ТОГДА ВЫБОР
	//|										КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	//|											ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	//|										КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	//|											ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	//|										КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	//|											ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	//|										ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|									КОНЕЦ
	//|							ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|						КОНЕЦ = Маппинг.СтатьяБУ
	//|				ИНАЧЕ ЛОЖЬ
	//|			КОНЕЦ)
	//|			И (ВЫБОР
	//|				КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|					ТОГДА ХозрасчетныйДвиженияССубконто.Регистратор.абс_БюджетнаяСтатья = Маппинг.СтатьяУУ
	//|				ИНАЧЕ ЛОЖЬ
	//|			КОНЕЦ)");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Маппинг.СтатьяУУ ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьМапинг,
	|	Проводки.СчетДт,
	|	Проводки.СубконтоДт1,
	|	Проводки.СубконтоДт2,
	|	Проводки.СубконтоДт3,
	|	Проводки.СчетКт,
	|	Проводки.СубконтоКт1,
	|	Проводки.СубконтоКт2,
	|	Проводки.СубконтоКт3,
	|	Проводки.Сумма,
	|	Проводки.ЭтоЗатрата,
	|	Проводки.ЭтоДоход,
	|	Проводки.Организация,
	|	Проводки.абс_ЦФУ,
	|	Проводки.абс_ЦФО,
	|	Проводки.абс_БюджетнаяСтатья,
	|	Проводки.абс_ТипКонтрагента,
	|	Проводки.абс_КВ,
	|	Проводки.абс_ТЭО,
	|	Проводки.абс_ТипСети,
	|	Проводки.абс_ТипРасхода,
	|	Проводки.СтатьяЗатрат,
	|	Проводки.НГ,
	|	Проводки.НомерПроводки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	|		ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	|		ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|		ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	|		ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	|		ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетовЗатрат)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель В (&МассивСчетовЗатрат)
	|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель В (&МассивСчетовЗатрат)
	|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоЗатрата,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В (&МассивСчетовДоходов)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.Родитель В (&МассивСчетовДоходов)
	|						И ХозрасчетныйДвиженияССубконто.СчетКт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.Родитель.Родитель В (&МассивСчетовДоходов)
	|						И ХозрасчетныйДвиженияССубконто.СчетКт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоДоход,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.Организация КАК Организация,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЦФУ КАК абс_ЦФУ,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЦФО КАК абс_ЦФО,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_БюджетнаяСтатья КАК абс_БюджетнаяСтатья,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипКонтрагента КАК абс_ТипКонтрагента,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_КВ КАК абс_КВ,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТЭО КАК абс_ТЭО,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипСети КАК абс_ТипСети,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипРасхода КАК абс_ТипРасхода,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетовЗатрат)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель В (&МассивСчетовЗатрат)
	|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель В (&МассивСчетовЗатрат)
	|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|								ИЛИ ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|								ИЛИ ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|								ИЛИ ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК СтатьяЗатрат,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетовЗатрат)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель В (&МассивСчетовЗатрат)
	|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель В (&МассивСчетовЗатрат)
	|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В (&МассивСчетовДоходов)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.Родитель В (&МассивСчетовДоходов)
	|						И ХозрасчетныйДвиженияССубконто.СчетКт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.Родитель.Родитель В (&МассивСчетовДоходов)
	|						И ХозрасчетныйДвиженияССубконто.СчетКт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК НГ,
	|		ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерПроводки
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|				,
	|				,
	|				Регистратор = &Документ
	|					И (СчетДт В (&МассивСчетовЗатрат)
	|						ИЛИ СчетДт.Родитель В (&МассивСчетовЗатрат)
	|							И СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ИЛИ СчетДт.Родитель.Родитель В (&МассивСчетовЗатрат)
	|							И СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ИЛИ (СчетКт В (&МассивСчетовДоходов)
	|							ИЛИ СчетКт.Родитель В (&МассивСчетовДоходов)
	|								И СчетКт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|							ИЛИ СчетКт.Родитель.Родитель В (&МассивСчетовДоходов)
	|								И СчетКт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))),
	|				,
	|				) КАК ХозрасчетныйДвиженияССубконто) КАК Проводки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ КАК СтатьяУУ,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ КАК СтатьяБУ,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат КАК СчетЗатрат,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|		ИЗ
	|			РегистрСведений.абс_СоответствиеСтатейЗатрат_БУ_УУ КАК абс_СоответствиеСтатейЗатрат_БУ_УУ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа) КАК Маппинг
	|		ПО Проводки.абс_БюджетнаяСтатья = Маппинг.СтатьяУУ
	|			И (ВЫБОР
	|				КОГДА Проводки.ЭтоЗатрата
	|					ТОГДА (Проводки.СчетДт = Маппинг.СчетЗатрат
	|							ИЛИ Проводки.СчетДт.Родитель = Маппинг.СчетЗатрат
	|								И Проводки.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|							ИЛИ Проводки.СчетДт.Родитель.Родитель = Маппинг.СчетЗатрат
	|								И Проводки.СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	//	|							И Проводки.СтатьяЗатрат = Маппинг.СтатьяБУ
	|				КОГДА Проводки.ЭтоДоход
	|					ТОГДА Проводки.СчетКт = Маппинг.СчетЗатрат
	|							ИЛИ Проводки.СчетКт.Родитель = Маппинг.СчетЗатрат
	|								И Проводки.СчетКт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|							ИЛИ Проводки.СчетКт.Родитель.Родитель = Маппинг.СчетЗатрат
	|								И Проводки.СчетКт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА (НЕ Проводки.НГ = НЕОПРЕДЕЛЕНО)
	|					ТОГДА ВЫБОР
	|							КОГДА Маппинг.НоменклатурнаяГруппа.ЭтоГруппа
	|								ТОГДА Проводки.НГ.Родитель = Маппинг.НоменклатурнаяГруппа
	|										ИЛИ Проводки.НГ.Родитель.Родитель = Маппинг.НоменклатурнаяГруппа
	|										ИЛИ Проводки.НГ.Родитель.Родитель.Родитель = Маппинг.НоменклатурнаяГруппа
	|							ИНАЧЕ Проводки.НГ = Маппинг.НоменклатурнаяГруппа
	|						КОНЕЦ
	|			КОНЕЦ)");	
	//АБС Коломиец-
	
	Запрос.УстановитьПараметр("МассивСчетовЗатрат", ПолучитьМассивСчетовЗатрат(Документ.Дата));  
	Запрос.УстановитьПараметр("МассивСчетовДоходов", ПолучитьМассивДоходов());	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	ПроводкиДляКонтроля = РезультатЗапроса.Выгрузить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		ПроверитьАналитикиПрочихТиповБюджетныхДокументов(Документ, Отказ, ПроводкиДляКонтроля);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ДвиженияХ = Документ.ПолучитьОбъект().Движения.Хозрасчетный;
	ЕстьКонтрагент = (Документ.Метаданные().Реквизиты.Найти("Контрагент")<>Неопределено );
	
	ДвиженияХ.Прочитать();
	
	КонстВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоЗатрата Тогда
			
			Движение = ТабДвижений.Добавить();
			Движение.Период = Документ.Дата;
			
			Движение.Сценарий 			= Сценарий;
			Движение.Валюта 			= КонстВалютаРегУчета;
			
			Движение.абс_ЦФУ 			= Выборка.абс_ЦФУ;
			Движение.ЦФО 				= Выборка.абс_ЦФО;
			Движение.Организация 		= Выборка.Организация;
			Движение.СтатьяОборотов 	= Выборка.абс_БюджетнаяСтатья;
			Движение.абс_ТипКонтрагента = Выборка.абс_ТипКонтрагента;
			Если ЕстьКонтрагент Тогда
				Движение.Контрагент         = Документ.Контрагент;
				Если Не ЗначениеЗаполнено(Выборка.абс_ТипКонтрагента) Тогда
					Движение.абс_ТипКонтрагента = Документ.Контрагент.абс_ТипыКонтрагентов;
				КонецЕсли;
				
			КонецЕсли;
			Движение.абс_ТипСети 		= Выборка.абс_ТипСети;
			Движение.абс_ТЭО 			= Выборка.абс_ТЭО;
			Движение.абс_КВ 			= Выборка.абс_КВ;
			Движение.абс_ТипРасхода 	= Выборка.абс_ТипРасхода;
			
			Движение.ВалютнаяСумма 		= Выборка.Сумма;
			Движение.СуммаУпр 			= Выборка.Сумма;
			Движение.СуммаСценария 		= Выборка.Сумма;
			
		ИначеЕсли Выборка.ЭтоДоход Тогда
			
			Движение = ТабДвижений.Добавить();
			Движение.Период = Документ.Дата;
			
			Движение.Сценарий 			= Сценарий;
			Движение.Валюта 			= КонстВалютаРегУчета;
			
			Движение.абс_ЦФУ 			= Выборка.абс_ЦФУ;
			Движение.ЦФО 				= Выборка.абс_ЦФО;
			Движение.Организация 		= Выборка.Организация;
			Движение.СтатьяОборотов 	= Выборка.абс_БюджетнаяСтатья;
			Движение.абс_ТипКонтрагента = Выборка.абс_ТипКонтрагента;
			Если ЕстьКонтрагент Тогда
				Движение.Контрагент         = Документ.Контрагент;
			КонецЕсли;
			
			Движение.абс_ТипСети 		= Выборка.абс_ТипСети;
			Движение.абс_ТЭО 			= Выборка.абс_ТЭО;
			Движение.абс_КВ 			= Выборка.абс_КВ;
			Движение.абс_ТипРасхода 	= Выборка.абс_ТипРасхода;
			
			Движение.ВалютнаяСумма 		= Выборка.Сумма;
			Движение.СуммаУпр 			= Выборка.Сумма;
			Движение.СуммаСценария 		= Выборка.Сумма;
			
		Иначе
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ПроведениеПоБюджетуПрочихДокументовПринятиеКВ(ТабДвижений,Документ, Сценарий,Отказ)
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ХозрасчетныйДвиженияССубконто.СчетДт,
	//|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	//|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	//|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	//|	ХозрасчетныйДвиженияССубконто.СчетКт,
	//|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	//|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	//|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	//|	ХозрасчетныйДвиженияССубконто.Сумма,
	//|	ВЫБОР
	//|		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ЭтоЗатрата,
	//|	ВЫБОР
	//|		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (&МассивСчетовДоходов)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ЭтоДоход,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.Организация КАК Организация,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЦФУ КАК абс_ЦФУ,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЦФО КАК абс_ЦФО,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_БюджетнаяСтатья КАК абс_БюджетнаяСтатья,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипКонтрагента КАК абс_ТипКонтрагента,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_КВ КАК абс_КВ,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТЭО КАК абс_ТЭО,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипСети КАК абс_ТипСети,
	//|	ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипРасхода КАК абс_ТипРасхода,
	//|	ВЫБОР
	//|		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|			ТОГДА ВЫБОР
	//|					КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	//|						ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	//|					КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	//|						ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	//|					КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	//|						ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	//|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|				КОНЕЦ
	//|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|	КОНЕЦ КАК СтатьяЗатрат,
	//|	ВЫБОР
	//|		КОГДА Маппинг.СтатьяУУ ЕСТЬ NULL 
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ КАК ЕстьМапинг,
	//|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерПроводки
	//|ИЗ
	//|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	//|			,
	//|			,
	//|			Регистратор = &Документ
	//|				И (СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|					ИЛИ СчетКт В ИЕРАРХИИ (&МассивСчетовДоходов))
	//|				И (НЕ(СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство)
	//|						И СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщепроизводственныеРасходы))),
	//|			,
	//|			) КАК ХозрасчетныйДвиженияССубконто
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ КАК СтатьяУУ,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ КАК СтатьяБУ,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат КАК СчетЗатрат,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	//|		ИЗ
	//|			РегистрСведений.абс_СоответствиеСтатейЗатрат_БУ_УУ КАК абс_СоответствиеСтатейЗатрат_БУ_УУ
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа) КАК Маппинг
	//|		ПО (ВЫБОР
	//|				КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|					ТОГДА ВЫБОР
	//|							КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|								ТОГДА ВЫБОР
	//|										КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	//|											ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	//|										КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	//|											ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	//|										КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	//|											ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	//|										ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|									КОНЕЦ
	//|							ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|						КОНЕЦ = Маппинг.СтатьяБУ
	//|				ИНАЧЕ ЛОЖЬ
	//|			КОНЕЦ)
	//|			И (ВЫБОР
	//|				КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|					ТОГДА ХозрасчетныйДвиженияССубконто.Регистратор.абс_БюджетнаяСтатья = Маппинг.СтатьяУУ
	//|				ИНАЧЕ ЛОЖЬ
	//|			КОНЕЦ)");
	//
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Маппинг.СтатьяУУ ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьМапинг,
	|	Проводки.СчетДт,
	|	Проводки.СубконтоДт1,
	|	Проводки.СубконтоДт2,
	|	Проводки.СубконтоДт3,
	|	Проводки.СчетКт,
	|	Проводки.СубконтоКт1,
	|	Проводки.СубконтоКт2,
	|	Проводки.СубконтоКт3,
	|	Проводки.Сумма,
	|	Проводки.ЭтоЗатрата,
	|	Проводки.ЭтоДоход,
	|	Проводки.Организация,
	|	Проводки.абс_ЦФУ,
	|	Проводки.абс_ЦФО,
	|	Проводки.абс_БюджетнаяСтатья,
	|	Проводки.абс_ТипКонтрагента,
	|	Проводки.абс_КВ,
	|	Проводки.абс_ТЭО,
	|	Проводки.абс_ТипСети,
	|	Проводки.абс_ТипРасхода,
	|	Проводки.СтатьяЗатрат,
	|	Проводки.НГ,
	|	Проводки.НомерПроводки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	|		ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	|		ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|		ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	|		ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	|		ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоЗатрата,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (&МассивСчетовДоходов)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоДоход,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.Организация КАК Организация,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЦФУ КАК абс_ЦФУ,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЦФО КАК абс_ЦФО,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_БюджетнаяСтатья КАК абс_БюджетнаяСтатья,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипКонтрагента КАК абс_ТипКонтрагента,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_КВ КАК абс_КВ,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТЭО КАК абс_ТЭО,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипСети КАК абс_ТипСети,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипРасхода КАК абс_ТипРасхода,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	|				ТОГДА ВЫБОР
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК СтатьяЗатрат,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	|				ТОГДА ВЫБОР
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (&МассивСчетовдоходов)
	|				ТОГДА ВЫБОР
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК НГ,
	|		ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерПроводки
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|				,
	|				,
	|				Регистратор = &Документ
	|					И (СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	|						ИЛИ СчетКт В ИЕРАРХИИ (&МассивСчетовДоходов)),
	|				,
	|				) КАК ХозрасчетныйДвиженияССубконто) КАК Проводки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ КАК СтатьяУУ,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ КАК СтатьяБУ,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат КАК СчетЗатрат,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|		ИЗ
	|			РегистрСведений.абс_СоответствиеСтатейЗатрат_БУ_УУ КАК абс_СоответствиеСтатейЗатрат_БУ_УУ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа) КАК Маппинг
	|		ПО (ВЫБОР
	|				КОГДА (НЕ Проводки.НГ = НЕОПРЕДЕЛЕНО)
	|					ТОГДА ВЫБОР
	|							КОГДА Маппинг.НоменклатурнаяГруппа.ЭтоГруппа
	|								ТОГДА Проводки.НГ.Родитель = Маппинг.НоменклатурнаяГруппа
	|										ИЛИ Проводки.НГ.Родитель.Родитель = Маппинг.НоменклатурнаяГруппа
	|										ИЛИ Проводки.НГ.Родитель.Родитель.Родитель = Маппинг.НоменклатурнаяГруппа
	|							ИНАЧЕ Проводки.НГ = Маппинг.НоменклатурнаяГруппа
	|						КОНЕЦ
	|			КОНЕЦ)
	|			И Проводки.абс_БюджетнаяСтатья = Маппинг.СтатьяУУ
	|			И (ВЫБОР
	|				КОГДА Проводки.ЭтоЗатрата
	|					ТОГДА Проводки.СчетДт = Маппинг.СчетЗатрат
	//	|							И Проводки.СтатьяЗатрат = Маппинг.СтатьяБУ
	|				КОГДА Проводки.ЭтоДоход
	|					ТОГДА Проводки.СчетКт = Маппинг.СчетЗатрат
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)");
	
	Запрос.УстановитьПараметр("МассивСчетовЗатрат", ПолучитьМассивСчетовЗатрат(Документ.Дата));  
	Запрос.УстановитьПараметр("МассивСчетовДоходов", ПолучитьМассивДоходов());	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	ПроводкиДляКонтроля = РезультатЗапроса.Выгрузить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		ПроверитьАналитикиПрочихТиповБюджетныхДокументов(Документ, Отказ, ПроводкиДляКонтроля);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ДвиженияХ = Документ.ПолучитьОбъект().Движения.Хозрасчетный;
	ЕстьКонтрагент = (Документ.Метаданные().Реквизиты.Найти("Контрагент")<>Неопределено );
	
	ДвиженияХ.Прочитать();
	
	СценарийВводКВ = Константы.абс_СценарийКВПоВводу.Получить();
	ЕдинаяСтатьяПоКВ = Справочники.СтатьиОборотовПоБюджетам.НайтиПоНаименованию("Единая статья КВ");
	
	КонстВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоЗатрата Тогда
			
			Движение = ТабДвижений.Добавить();
			Движение.Период = Документ.Дата;
			
			Движение.Сценарий 			= СценарийВводКВ;
			Движение.Валюта 			= КонстВалютаРегУчета;
			
			Движение.абс_ЦФУ 			= Выборка.абс_ЦФУ;
			Движение.ЦФО 				= Выборка.абс_ЦФО;
			Движение.Организация 		= Выборка.Организация;
			Движение.СтатьяОборотов 	= ЕдинаяСтатьяПоКВ;
			Движение.абс_ТипКонтрагента = Выборка.абс_ТипКонтрагента;
			Если ЕстьКонтрагент Тогда
				Движение.Контрагент         = Документ.Контрагент;
				Если Не ЗначениеЗаполнено(Выборка.абс_ТипКонтрагента) Тогда
					Движение.абс_ТипКонтрагента = Документ.Контрагент.абс_ТипыКонтрагентов;
				КонецЕсли;
				
			КонецЕсли;
			Движение.абс_ТипСети 		= Выборка.абс_ТипСети;
			Движение.абс_ТЭО 			= Выборка.абс_ТЭО;
			Движение.абс_КВ 			= Выборка.абс_КВ;
			Движение.абс_ТипРасхода 	= Выборка.абс_ТипРасхода;
			
			Движение.ВалютнаяСумма 		= Выборка.Сумма;
			Движение.СуммаУпр 			= Выборка.Сумма;
			Движение.СуммаСценария 		= Выборка.Сумма;
			
		ИначеЕсли Выборка.ЭтоДоход Тогда
			
			Движение = ТабДвижений.Добавить();
			Движение.Период = Документ.Дата;
			
			Движение.Сценарий 			= СценарийВводКВ;
			Движение.Валюта 			= КонстВалютаРегУчета;
			
			Движение.абс_ЦФУ 			= Выборка.абс_ЦФУ;
			Движение.ЦФО 				= Выборка.абс_ЦФО;
			Движение.Организация 		= Выборка.Организация;
			Движение.СтатьяОборотов 	= ЕдинаяСтатьяПоКВ;
			Движение.абс_ТипКонтрагента = Выборка.абс_ТипКонтрагента;
			Если ЕстьКонтрагент Тогда
				Движение.Контрагент         = Документ.Контрагент;
			КонецЕсли;
			
			Движение.абс_ТипСети 		= Выборка.абс_ТипСети;
			Движение.абс_ТЭО 			= Выборка.абс_ТЭО;
			Движение.абс_КВ 			= Выборка.абс_КВ;
			Движение.абс_ТипРасхода 	= Выборка.абс_ТипРасхода;
			
			Движение.ВалютнаяСумма 		= Выборка.Сумма;
			Движение.СуммаУпр 			= Выборка.Сумма;
			Движение.СуммаСценария 		= Выборка.Сумма;
			
		Иначе
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроведениеПоБюджетуПрочихДокументовДоходыПрошлыхЛет(ТабДвижений,Документ, Сценарий,Отказ) //АБС Коломиец
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Проводки.Сумма,
	|	Проводки.Организация,
	|	Проводки.абс_ЦФУ,
	|	Проводки.абс_ЦФО,
	|	Проводки.абс_БюджетнаяСтатья,
	|	Проводки.абс_ТипКонтрагента,
	|	Проводки.абс_КВ,
	|	Проводки.абс_ТЭО,
	//АБС НАЧАЛО Задача №08759
	| 	Проводки.Проект,
	//\\АБС КОНЕЦ Задача №08759
	|	Проводки.абс_ТипСети,
	|	Проводки.абс_ТипРасхода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.Организация КАК Организация,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЦФУ КАК абс_ЦФУ,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЦФО КАК абс_ЦФО,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_БюджетнаяСтатья КАК абс_БюджетнаяСтатья,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипКонтрагента КАК абс_ТипКонтрагента,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_КВ КАК абс_КВ,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТЭО КАК абс_ТЭО,
	//АБС НАЧАЛО Задача №08759
	|  		ХозрасчетныйДвиженияССубконто.Регистратор.Проект КАК Проект,
	//\\АБС КОНЕЦ Задача №08759
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипСети КАК абс_ТипСети,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипРасхода КАК абс_ТипРасхода
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Документ, , ) КАК ХозрасчетныйДвиженияССубконто) КАК Проводки");	
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		ПроверитьАналитикиПрочихТиповБюджетныхДокументов(Документ, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ДвиженияХ = Документ.ПолучитьОбъект().Движения.Хозрасчетный;
	ЕстьКонтрагент = (Документ.Метаданные().Реквизиты.Найти("Контрагент")<>Неопределено );
	
	ДвиженияХ.Прочитать();
	
	КонстВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Пока Выборка.Следующий() Цикл
		
		Движение = ТабДвижений.Добавить();
		Движение.Период = Документ.Дата;
		
		Движение.Сценарий 			= Сценарий;
		Движение.Валюта 			= КонстВалютаРегУчета;
		
		Движение.абс_ЦФУ 			= Выборка.абс_ЦФУ;
		Движение.ЦФО 				= Выборка.абс_ЦФО;
		Движение.Организация 		= Выборка.Организация;
		Движение.СтатьяОборотов 	= Выборка.абс_БюджетнаяСтатья;
		Движение.абс_ТипКонтрагента = Выборка.абс_ТипКонтрагента;
		Если ЕстьКонтрагент Тогда
			Движение.Контрагент         = Документ.Контрагент;
			Если Не ЗначениеЗаполнено(Выборка.абс_ТипКонтрагента) Тогда
				Движение.абс_ТипКонтрагента = Документ.Контрагент.абс_ТипыКонтрагентов;
			КонецЕсли;
			
		КонецЕсли;
		Движение.абс_ТипСети 		= Выборка.абс_ТипСети;
		Движение.абс_ТЭО 			= Выборка.абс_ТЭО;
		Движение.абс_КВ 			= Выборка.абс_КВ;
		Движение.абс_ТипРасхода 	= Выборка.абс_ТипРасхода;
		
		//АБС НАЧАЛО Задача №08759
		Движение.Проект  = Выборка.Проект;
		//\\АБС КОНЕЦ Задача №08759
		
		Движение.ВалютнаяСумма 		= Выборка.Сумма;
		Движение.СуммаУпр 			= Выборка.Сумма;
		Движение.СуммаСценария 		= Выборка.Сумма;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроведениеПоБюджетуРТиУ(ТабДвижений,Документ, Знач Сценарий, Отказ)
	
	//АБС-Пр2+ 20120427 включаем контроль меппинга
	Если НЕ (Документ.Дата <= КонецДня(Константы.абс_ДатаКонтроляМапингаБюджетныхАналитикВПрочихДокументах.Получить())) И НЕ Документ.абс_БезКонтроляМаппинга Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА Маппинг.СтатьяУУ ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьМапинг,
		|	Проводки.СчетДт,
		|	Проводки.СубконтоДт1,
		|	Проводки.абс_БюджетнаяСтатья,
		|	Проводки.НГ,
		|	ИСТИНА КАК ЭтоДоход,
		|	ЛОЖЬ КАК ЭтоЗатрата,
		|	Проводки.НомерПроводки
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслугТовары.СчетДоходовБУ КАК СчетДт,
		|		РеализацияТоваровУслугТовары.СубконтоБУ КАК СубконтоДт1,
		|		РеализацияТоваровУслугТовары.абс_БюджетнаяСтатьяЗатрат КАК абс_БюджетнаяСтатья,
		|		ВЫБОР
		|			КОГДА РеализацияТоваровУслугТовары.СубконтоБУ ССЫЛКА Справочник.НоменклатурныеГруппы
		|				ТОГДА РеализацияТоваровУслугТовары.СубконтоБУ
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК НГ,
		|		РеализацияТоваровУслугТовары.НомерСтроки КАК НомерПроводки,
		|		РеализацияТоваровУслугТовары.абс_ЦФУ КАК абс_ЦФУ
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|	ГДЕ
		|		РеализацияТоваровУслугТовары.Ссылка = &Документ
		|		И (РеализацияТоваровУслугТовары.СчетДоходовБУ В (&МассивСчетовДоходов)
		|				ИЛИ РеализацияТоваровУслугТовары.СчетДоходовБУ.Родитель В (&МассивСчетовДоходов)
		|					И РеализацияТоваровУслугТовары.СчетДоходовБУ.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|				ИЛИ РеализацияТоваровУслугТовары.СчетДоходовБУ.Родитель.Родитель В (&МассивСчетовДоходов)
		|					И РеализацияТоваровУслугТовары.СчетДоходовБУ.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РеализацияТоваровУслугУслуги.СчетДоходовБУ,
		|		РеализацияТоваровУслугУслуги.СубконтоБУ,
		|		РеализацияТоваровУслугУслуги.СтатьяОборотов,
		|		ВЫБОР
		|			КОГДА РеализацияТоваровУслугУслуги.СубконтоБУ ССЫЛКА Справочник.НоменклатурныеГруппы
		|				ТОГДА РеализацияТоваровУслугУслуги.СубконтоБУ
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ,
		|		РеализацияТоваровУслугУслуги.НомерСтроки,
		|		РеализацияТоваровУслугУслуги.абс_ЦФУ
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|	ГДЕ
		|		РеализацияТоваровУслугУслуги.Ссылка = &Документ
		|		И (РеализацияТоваровУслугУслуги.СчетДоходовБУ В (&МассивСчетовДоходов)
		|				ИЛИ РеализацияТоваровУслугУслуги.СчетДоходовБУ.Родитель В (&МассивСчетовДоходов)
		|					И РеализацияТоваровУслугУслуги.СчетДоходовБУ.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|				ИЛИ РеализацияТоваровУслугУслуги.СчетДоходовБУ.Родитель.Родитель В (&МассивСчетовДоходов)
		|					И РеализацияТоваровУслугУслуги.СчетДоходовБУ.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))) КАК Проводки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ КАК СтатьяУУ,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ КАК СтатьяБУ,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат КАК СчетЗатрат,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.ЦФУ КАК ЦФУ
		|		ИЗ
		|			РегистрСведений.абс_СоответствиеСтатейЗатрат_БУ_УУ КАК абс_СоответствиеСтатейЗатрат_БУ_УУ
		|		
		|		СГРУППИРОВАТЬ ПО
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.ЦФУ) КАК Маппинг
		|		ПО Проводки.абс_БюджетнаяСтатья = Маппинг.СтатьяУУ
		|			И (ВЫБОР
		|				КОГДА (НЕ Проводки.НГ = НЕОПРЕДЕЛЕНО)
		|					ТОГДА ВЫБОР
		|							КОГДА Маппинг.НоменклатурнаяГруппа.ЭтоГруппа
		|								ТОГДА Проводки.НГ.Родитель = Маппинг.НоменклатурнаяГруппа
		|										ИЛИ Проводки.НГ.Родитель.Родитель = Маппинг.НоменклатурнаяГруппа
		|										ИЛИ Проводки.НГ.Родитель.Родитель.Родитель = Маппинг.НоменклатурнаяГруппа
		|							ИНАЧЕ Проводки.НГ = Маппинг.НоменклатурнаяГруппа
		|						КОНЕЦ
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА Проводки.СчетДт = Маппинг.СчетЗатрат
		|						ИЛИ Проводки.СчетДт.Родитель = Маппинг.СчетЗатрат
		|							И Проводки.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|						ИЛИ Проводки.СчетДт.Родитель.Родитель = Маппинг.СчетЗатрат
		|							И Проводки.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|			И Проводки.абс_ЦФУ = Маппинг.ЦФУ");	
		
		Запрос.УстановитьПараметр("МассивСчетовЗатрат",  ПолучитьМассивСчетовЗатрат(Документ.Дата));  
		Запрос.УстановитьПараметр("МассивСчетовДоходов", ПолучитьМассивДоходов());
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		РезультатЗапроса = Запрос.Выполнить();	
		
		ПроводкиДляКонтроля = РезультатЗапроса.Выгрузить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			
			ДатаОграниченияМапингаАналитик 	= Константы.абс_ДатаКонтроляМапингаБюджетныхАналитикВПрочихДокументах.Получить();
			
			Если НЕ ЗначениеЗаполнено(ДатаОграниченияМапингаАналитик) Тогда				
				
			Иначе
				
				Если НЕ ПроводкиДляКонтроля = Неопределено И НЕ (Документ.Дата <= КонецДня(ДатаОграниченияМапингаАналитик)) И НЕ Документ.абс_БезКонтроляМаппинга Тогда
					
					СообщениеПроверкиМапинга = "Документ: " + Документ.Ссылка + ". Проверка аналитик по мапингу БУ УУ:";
					
					Для Каждого ПроводкаКонтроля Из ПроводкиДляКонтроля Цикл
						
						Если ((ПроводкаКонтроля.ЭтоЗатрата И ПроверятьМаппингПоСчетуЗатрат(Документ.Дата, ПроводкаКонтроля.СчетДт)) ИЛИ ПроводкаКонтроля.ЭтоДоход) И НЕ ПроводкаКонтроля.ЕстьМапинг Тогда
							
							Отказ = Истина;
							СообщениеПроверкиМапинга = СообщениеПроверкиМапинга + Символы.ПС + 
							"Строка " + ПроводкаКонтроля.НомерПроводки + ": Счет БУ " + ПроводкаКонтроля.СчетДт + " не соответствует мапингу БУ и УУ. ";					
							
						КонецЕсли;
						
					КонецЦикла;		
					
					Если Отказ Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке(СообщениеПроверкиМапинга);					
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Отказ Тогда 
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//АБС-Пр2-
	
	Если Документ.Метаданные().Реквизиты.Найти("абс_ДоходыПрошлыхЛет")<>Неопределено Тогда	
		Если Документ.абс_ДоходыПрошлыхЛет Тогда
			Сценарий = Константы.абс_СценарийУбыткиПрошлыхЛет.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТекСтрокаУслуги из Документ.Услуги Цикл
		Движение = ТабДвижений.Добавить();
		Движение.Период = Документ.Дата;
		//Движение.Активность = Истина;
		Движение.Сценарий = Сценарий;
		Движение.СтатьяОборотов = ТекСтрокаУслуги.СтатьяОборотов;
		Движение.Валюта = Документ.ВалютаДокумента;
		Движение.Контрагент = Документ.Контрагент;
		Движение.абс_ТипКонтрагента = Документ.Контрагент.абс_ТипыКонтрагентов;
		Движение.абс_ЦФУ = ТекСтрокаУслуги.абс_ЦФУ;
		Движение.ЦФО = ТекСтрокаУслуги.абс_ЦФО;
		
		//АБС НАЧАЛО Задача №08759
		Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
		Движение.Проект = ?(ЗначениеЗаполнено(ТекСтрокаУслуги.абс_Проект), ТекСтрокаУслуги.абс_Проект, Документ.Проект);   //АБС_Стрельцов+++ добавлено: 27.11.2012
		//\\АБС КОНЕЦ Задача №08759
		
		Движение.абс_ТЭО = ?(ЗначениеЗаполнено(Движение.Проект), Движение.Проект.абс_ТЭО, Движение.абс_ТЭО);//***** Проектный учет. Гетц. 23.12.2013
		
		Движение.Организация = Документ.Организация;
		Движение.ВалютнаяСумма = ?(Документ.СуммаВключаетНДС, ТекСтрокаУслуги.Сумма-ТекСтрокаУслуги.СуммаНДС, ТекСтрокаУслуги.Сумма);
		Движение.СуммаУпр = Движение.ВалютнаяСумма*Документ.КурсВзаиморасчетов;
		Движение.СуммаСценария = Движение.СуммаУпр;
	КонецЦикла;
	ЕстьТМЦ = (Документ.Товары.Количество()>0);
	Если ЕстьТМЦ Тогда
		ЗапросПоСебестоимости = Новый Запрос;
		ЗапросПоСебестоимости.Текст =
		//***** Проектный учет. Гетц. 05.11.13 Если нет документа оприходования в партии ищется ближайшее поступение. Исходный запрос в первой таблице.
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугМатериалы.НомерСтроки,
		|	РеализацияТоваровУслугМатериалы.Номенклатура,
		|	РеализацияТоваровУслугМатериалы.ХарактеристикаНоменклатуры,
		|	РеализацияТоваровУслугМатериалы.СерияНоменклатуры,
		|	ВЫБОР
		|		КОГДА НЕ РеализацияТоваровУслугМатериалы.абс_Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслугМатериалы.абс_Проект
		|		ИНАЧЕ РеализацияТоваровУслугМатериалы.Ссылка.Проект
		|	КОНЕЦ КАК Проект,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Количество,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Стоимость,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Организация,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования
		|ПОМЕСТИТЬ втПартииТоваров
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладахБухгалтерскийУчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугМатериалы
		|		ПО ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор = РеализацияТоваровУслугМатериалы.Ссылка
		|			И ПартииТоваровНаСкладахБухгалтерскийУчет.Номенклатура = РеализацияТоваровУслугМатериалы.Номенклатура
		|			И ПартииТоваровНаСкладахБухгалтерскийУчет.ХарактеристикаНоменклатуры = РеализацияТоваровУслугМатериалы.ХарактеристикаНоменклатуры
		|			И (ВЫБОР
		|				КОГДА РеализацияТоваровУслугМатериалы.Номенклатура.ВестиПартионныйУчетПоСериям
		|					ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.СерияНоменклатуры = РеализацияТоваровУслугМатериалы.СерияНоменклатуры
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|ГДЕ
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор = &Регистратор
		|	И РеализацияТоваровУслугМатериалы.Ссылка = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка КАК ДокументОприходования,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Организация,
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры,
		|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровУслугТовары.абс_ЗакупочныйЗаказТЧ = НЕОПРЕДЕЛЕНО
		|				ИЛИ ПоступлениеТоваровУслугТовары.абс_ЗакупочныйЗаказТЧ = ЗНАЧЕНИЕ(Документ.абс_ЗакупочныйЗаказ.ПустаяСсылка)
		|			ТОГДА ПоступлениеТоваровУслугТовары.Ссылка.абс_ЗакупочныйЗаказ
		|		ИНАЧЕ ПоступлениеТоваровУслугТовары.абс_ЗакупочныйЗаказТЧ
		|	КОНЕЦ КАК ЗакупочныйЗаказ,
		|	ПоступлениеТоваровУслугТовары.абс_Проект КАК Проект
		|ПОМЕСТИТЬ втДокументыОприходования
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ПоступлениеТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
		|	И (ПоступлениеТоваровУслугТовары.Ссылка.Организация, ПоступлениеТоваровУслугТовары.Номенклатура, ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры, ПоступлениеТоваровУслугТовары.СерияНоменклатуры) В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				втПартииТоваров.Организация,
		|				втПартииТоваров.Номенклатура,
		|				втПартииТоваров.ХарактеристикаНоменклатуры,
		|				втПартииТоваров.СерияНоменклатуры
		|			ИЗ
		|				втПартииТоваров КАК втПартииТоваров)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Проект
		|ПОМЕСТИТЬ втПроектыРеализации
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Регистратор
		|	И РеализацияТоваровУслуг.Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.абс_Проект
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Регистратор
		|	И РеализацияТоваровУслугТовары.абс_Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроектыИзЗакупочных.ЗакупочныйЗаказ
		|ПОМЕСТИТЬ втПроектыИЗакупочнеЗаказы
		|ИЗ
		|	(ВЫБРАТЬ
		|		абс_ЗакупочныйЗаказТовары.абс_Проект КАК Проект,
		|		абс_ЗакупочныйЗаказТовары.Ссылка КАК ЗакупочныйЗаказ
		|	ИЗ
		|		Документ.абс_ЗакупочныйЗаказ.Товары КАК абс_ЗакупочныйЗаказТовары
		|	ГДЕ
		|		абс_ЗакупочныйЗаказТовары.Ссылка В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					втДокументыОприходования.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ
		|				ИЗ
		|					втДокументыОприходования КАК втДокументыОприходования)
		|		И абс_ЗакупочныйЗаказТовары.абс_Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		абс_ЗакупочныйЗаказРаспределениеПоПроектам.Проект,
		|		абс_ЗакупочныйЗаказРаспределениеПоПроектам.Ссылка
		|	ИЗ
		|		Документ.абс_ЗакупочныйЗаказ.РаспределениеПоПроектам КАК абс_ЗакупочныйЗаказРаспределениеПоПроектам
		|	ГДЕ
		|		абс_ЗакупочныйЗаказРаспределениеПоПроектам.Ссылка В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					втДокументыОприходования.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ
		|				ИЗ
		|					втДокументыОприходования КАК втДокументыОприходования)
		|		И абс_ЗакупочныйЗаказРаспределениеПоПроектам.Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)) КАК ПроектыИзЗакупочных
		|ГДЕ
		|	ПроектыИзЗакупочных.Проект В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				втПроектыРеализации.Проект
		|			ИЗ
		|				втПроектыРеализации КАК втПроектыРеализации)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроектыИзЗакупочных.ЗакупочныйЗаказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(втДокументыОприходования.ДокументОприходования) КАК ДокументОприходования,
		|	втДокументыОприходования.Организация,
		|	втДокументыОприходования.Номенклатура,
		|	втДокументыОприходования.ХарактеристикаНоменклатуры,
		|	втДокументыОприходования.СерияНоменклатуры
		|ПОМЕСТИТЬ втДокументыОприходованияСОтбором
		|ИЗ
		|	втДокументыОприходования КАК втДокументыОприходования
		|ГДЕ
		|	(втДокументыОприходования.ЗакупочныйЗаказ В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					втПроектыИЗакупочнеЗаказы.ЗакупочныйЗаказ
		|				ИЗ
		|					втПроектыИЗакупочнеЗаказы КАК втПроектыИЗакупочнеЗаказы)
		|			ИЛИ втДокументыОприходования.Проект В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					втПроектыРеализации.Проект
		|				ИЗ
		|					втПроектыРеализации КАК втПроектыРеализации))
		|
		|СГРУППИРОВАТЬ ПО
		|	втДокументыОприходования.Организация,
		|	втДокументыОприходования.Номенклатура,
		|	втДокументыОприходования.ХарактеристикаНоменклатуры,
		|	втДокументыОприходования.СерияНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПартииТоваров.НомерСтроки,
		|	втПартииТоваров.Номенклатура,
		|	втПартииТоваров.ХарактеристикаНоменклатуры,
		|	втПартииТоваров.СерияНоменклатуры,
		|	втПартииТоваров.Проект,
		|	втПартииТоваров.Количество,
		|	втПартииТоваров.Стоимость,
		|	ВЫБОР
		|		КОГДА втПартииТоваров.ДокументОприходования = НЕОПРЕДЕЛЕНО
		|			ТОГДА втДокументыОприходованияСОтбором.ДокументОприходования
		|		ИНАЧЕ втПартииТоваров.ДокументОприходования
		|	КОНЕЦ КАК ДокументОприходования
		|ПОМЕСТИТЬ втИтоговая
		|ИЗ
		|	втПартииТоваров КАК втПартииТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДокументыОприходованияСОтбором КАК втДокументыОприходованияСОтбором
		|		ПО втПартииТоваров.Номенклатура = втДокументыОприходованияСОтбором.Номенклатура
		|			И втПартииТоваров.Организация = втДокументыОприходованияСОтбором.Организация
		|			И втПартииТоваров.ХарактеристикаНоменклатуры = втДокументыОприходованияСОтбором.ХарактеристикаНоменклатуры
		|			И втПартииТоваров.СерияНоменклатуры = втДокументыОприходованияСОтбором.СерияНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтоговая.Номенклатура,
		|	втИтоговая.ХарактеристикаНоменклатуры,
		|	втИтоговая.СерияНоменклатуры,
		|	втИтоговая.Проект,
		|	втИтоговая.Количество,
		|	втИтоговая.Стоимость,
		|	втИтоговая.ДокументОприходования,
		|	втДокументыОприходования.ЗакупочныйЗаказ
		|ИЗ
		|	втИтоговая КАК втИтоговая
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДокументыОприходования КАК втДокументыОприходования
		|		ПО втИтоговая.ДокументОприходования = втДокументыОприходования.ДокументОприходования
		|			И втИтоговая.Номенклатура = втДокументыОприходования.Номенклатура
		|			И втИтоговая.ХарактеристикаНоменклатуры = втДокументыОприходования.ХарактеристикаНоменклатуры
		|			И втИтоговая.СерияНоменклатуры = втДокументыОприходования.СерияНоменклатуры";
		
		ЗапросПоСебестоимости.УстановитьПараметр("Регистратор",Документ);
		ВыборкаТМЦ = ЗапросПоСебестоимости.Выполнить().Выбрать();
		
		КонстВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Для каждого ТекСтрокаТовары из Документ.Товары Цикл
			//***** Проектный учет. Гетц. 05.11.2013 При проведении необходимы движения по выручке
			Движение = ТабДвижений.Добавить();
			Движение.Период = Документ.Дата;			
			Движение.Сценарий = Сценарий;
			Движение.СтатьяОборотов = ТекСтрокаТовары.СтатьяОборотов;
			Движение.Валюта = Документ.ВалютаДокумента;
			Движение.Контрагент = Документ.Контрагент;
			Движение.абс_ТипКонтрагента = Документ.Контрагент.абс_ТипыКонтрагентов;
			Движение.абс_ЦФУ = ТекСтрокаТовары.абс_ЦФУ;
			Движение.ЦФО = ТекСтрокаТовары.абс_ЦФО;						
			Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
			Движение.Проект = ?(ЗначениеЗаполнено(ТекСтрокаТовары.абс_Проект), ТекСтрокаТовары.абс_Проект, Документ.Проект);						
			Движение.Организация = Документ.Организация;
			Движение.ВалютнаяСумма = ?(Документ.СуммаВключаетНДС, ТекСтрокаТовары.Сумма-ТекСтрокаТовары.СуммаНДС, ТекСтрокаТовары.Сумма);
			Движение.СуммаУпр = Движение.ВалютнаяСумма*Документ.КурсВзаиморасчетов;
			Движение.СуммаСценария = Движение.СуммаУпр;
			Движение.абс_ТЭО = ?(ЗначениеЗаполнено(Движение.Проект), Движение.Проект.абс_ТЭО, Движение.абс_ТЭО);//***** Проектный учет. Гетц. 23.12.2013
			//***** Проектный учет. Гетц. 05.11.2013 \\
			
			
			//***** Проектный учет. Гетц. 05.11.2013 Движения по сеестоимости ложатся на договор с поставщиком и формируются только потабличной части "Товары" документа поступления.
			ВыборкаТМЦ.Сбросить();
			Если ВыборкаТМЦ.НайтиСледующий(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры",ТекСтрокаТовары.Номенклатура,ТекСтрокаТовары.ХарактеристикаНоменклатуры,ТекСтрокаТовары.СерияНоменклатуры)) Тогда
				Если ЗначениеЗаполнено(ВыборкаТМЦ.ДокументОприходования) И ТипЗнч(ВыборкаТМЦ.ДокументОприходования) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И Не ВыборкаТМЦ.ДокументОприходования.Товары.Количество() = 0 Тогда 					
					
					Движение = ТабДвижений.Добавить();
					Движение.Период = Документ.Дата;			
					Движение.Сценарий = Сценарий;
					//АБС Пока сделаем по кривому, потом надо будет регистр сведений добавить
					//АБС-Ф добавил статью для списания себестоимости
					Движение.СтатьяОборотов = ТекСтрокаТовары.абс_БюджетнаяСтатьяЗатрат;
					Движение.Валюта = КонстВалютаРегУчета;
					
					Движение.абс_ЦФУ = ТекСтрокаТовары.абс_ЦФУ;
					Движение.ЦФО = ТекСтрокаТовары.абс_ЦФО;
					Если ЗначениеЗаполнено(ВыборкаТМЦ.ЗакупочныйЗаказ) Тогда 
						Движение.абс_ТипСети = ВыборкаТМЦ.ЗакупочныйЗаказ.ТипСети;
						Движение.абс_ТЭО = ВыборкаТМЦ.ЗакупочныйЗаказ.ТЭО;
						Движение.абс_КВ = ВыборкаТМЦ.ЗакупочныйЗаказ.КВ;
						Движение.абс_ТипРасхода = ВыборкаТМЦ.ЗакупочныйЗаказ.ТипРасхода;
						Движение.СтатьяОборотов = ВыборкаТМЦ.ЗакупочныйЗаказ.БюджетнаяСтатья;
					КонецЕсли;
					Движение.Организация = Документ.Организация;
					
					
					
					//АБС НАЧАЛО Задача №08759
					Движение.ДоговорКонтрагента = ВыборкаТМЦ.ДокументОприходования.ДоговорКонтрагента;				
					//\\АБС КОНЕЦ Задача №08759
					Движение.Контрагент = Движение.ДоговорКонтрагента.Владелец;
					Движение.абс_ТипКонтрагента = Движение.ДоговорКонтрагента.Владелец.абс_ТипыКонтрагентов;
					//АБС_Стрельцов+++ добавлено: 27.11.2012
					Движение.Проект = ВыборкаТМЦ.Проект;
					//АБС_Стрельцов---
					Движение.ВалютнаяСумма = ?(ВыборкаТМЦ.Количество<>0,ТекСтрокаТовары.Количество*(ВыборкаТМЦ.Стоимость/ВыборкаТМЦ.Количество),0) ;
					Движение.СуммаУпр = Движение.ВалютнаяСумма;
					Движение.СуммаСценария = Движение.СуммаУпр;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПроведениеПоБюджетуАктОбОказанииПроизводственныхУслуг(ТабДвижений,Документ, Сценарий, Отказ)
	
	//АБС_Стрельцов+ добавлено: 30.10.2012
	//------------------------------------
	Если Константы.абс_ПроведениеПоМеханизмуПроектногоУчета.Получить() Тогда
		
		МассивЗначений = Новый Массив();
		МассивЗначений.Добавить(Справочники.абс_ЦФУ.НайтиПоКоду("ЦФУ4"));  //Строительство
		МассивЗначений.Добавить(Справочники.абс_ЦФУ.НайтиПоКоду("ЦФУ6"));  //Системная интеграция
		МассивЗначений.Добавить(Справочники.Подразделения.НайтиПоКоду("ЦФО1256"));  //подразделение "Управление проектами"
		
		ЕСли (ЗначениеЗаполнено(Документ.абс_ЦФУ) И НЕ МассивЗначений.Найти(Документ.абс_ЦФУ) = Неопределено)
			И (ЗначениеЗаполнено(Документ.абс_ЦФО) И НЕ МассивЗначений.Найти(Документ.абс_ЦФО) = Неопределено) Тогда
			
			//ЕСли Не ЗначениеЗаполнено(Документ.абс_БюджетнаяСтатья) Тогда
			//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит: ""Бюджетная статья"" !", Отказ);
			//	Возврат;
			//КонецЕСли;
			
			ЕСли Не ЗначениеЗаполнено(Документ.абс_КВ) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит: ""КВ и ТЗ"" !", Отказ);
				Возврат;
			КонецЕСли;
			
			//ЕСли Не ЗначениеЗаполнено(Документ.абс_ТипКонтрагента) Тогда
			//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит: ""Тип контрагента"" !", Отказ);
			//	Возврат;
			//КонецЕСли;
			
			//ЕСли Не ЗначениеЗаполнено(Документ.абс_ТЭО) Тогда
			//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит: ""ТЭО"" !", Отказ);
			//	Возврат;
			//КонецЕСли;
			//
			//ЕСли Не ЗначениеЗаполнено(Документ.абс_ТипСети) Тогда
			//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит: ""Тип сети"" !", Отказ);
			//	Возврат;
			//КонецЕСли;
			
		КонецЕсли;
		
	КонецЕсли;
	//------------------------------------
	//АБС_Стрельцов-
	
	
	//АБС-Пр2+ 20120427 включаем контроль меппинга
	Если НЕ (Документ.Дата <= КонецДня(Константы.абс_ДатаКонтроляМапингаБюджетныхАналитикВПрочихДокументах.Получить())) И НЕ Документ.абс_БезКонтроляМаппинга Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА Маппинг.СтатьяУУ ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьМапинг,
		|	Проводки.СчетДт,
		|	Проводки.СубконтоДт1,
		|	Проводки.абс_БюджетнаяСтатья,
		|	Проводки.НГ,
		//абс_Стрельцов+ добавлено: 12.09.2012
		//при переносе кода ПУ
		|	Проводки.Проект,
		//абс_Стрельцов-
		|	ИСТИНА КАК ЭтоДоход,
		|	ЛОЖЬ КАК ЭтоЗатрата,
		|	Проводки.НомерПроводки
		|ИЗ
		|	(ВЫБРАТЬ
		|		АктОбОказанииПроизводственныхУслугУслуги.СчетДоходовБУ КАК СчетДт,
		|		АктОбОказанииПроизводственныхУслугУслуги.СубконтоБУ КАК СубконтоДт1,
		|		АктОбОказанииПроизводственныхУслугУслуги.абс_СтатьяОборотов КАК абс_БюджетнаяСтатья,
		|		ВЫБОР
		|			КОГДА АктОбОказанииПроизводственныхУслугУслуги.СубконтоБУ ССЫЛКА Справочник.НоменклатурныеГруппы
		|				ТОГДА АктОбОказанииПроизводственныхУслугУслуги.СубконтоБУ
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК НГ,
		|		АктОбОказанииПроизводственныхУслугУслуги.НомерСтроки КАК НомерПроводки,
		|		АктОбОказанииПроизводственныхУслугУслуги.абс_ЦФУ КАК абс_ЦФУ,
		//абс_Стрельцов+ добавлено: 12.09.2012
		//при переносе кода ПУ
		|		АктОбОказанииПроизводственныхУслугУслуги.Ссылка.Проект КАК Проект
		//абс_Стрельцов-
		|	ИЗ
		|		Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
		|	ГДЕ
		|		АктОбОказанииПроизводственныхУслугУслуги.Ссылка = &Документ
		|		И (АктОбОказанииПроизводственныхУслугУслуги.СчетДоходовБУ В (&МассивСчетовДоходов)
		|				ИЛИ АктОбОказанииПроизводственныхУслугУслуги.СчетДоходовБУ.Родитель В (&МассивСчетовДоходов)
		|					И АктОбОказанииПроизводственныхУслугУслуги.СчетДоходовБУ.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|				ИЛИ АктОбОказанииПроизводственныхУслугУслуги.СчетДоходовБУ.Родитель.Родитель В (&МассивСчетовДоходов)
		|					И АктОбОказанииПроизводственныхУслугУслуги.СчетДоходовБУ.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))) КАК Проводки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ КАК СтатьяУУ,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ КАК СтатьяБУ,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат КАК СчетЗатрат,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.ЦФУ КАК ЦФУ
		|		ИЗ
		|			РегистрСведений.абс_СоответствиеСтатейЗатрат_БУ_УУ КАК абс_СоответствиеСтатейЗатрат_БУ_УУ
		|		
		|		СГРУППИРОВАТЬ ПО
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа,
		|			абс_СоответствиеСтатейЗатрат_БУ_УУ.ЦФУ) КАК Маппинг
		|		ПО Проводки.абс_БюджетнаяСтатья = Маппинг.СтатьяУУ
		|			И (ВЫБОР
		|				КОГДА (НЕ Проводки.НГ = НЕОПРЕДЕЛЕНО)
		|					ТОГДА ВЫБОР
		|							КОГДА Маппинг.НоменклатурнаяГруппа.ЭтоГруппа
		|								ТОГДА Проводки.НГ.Родитель = Маппинг.НоменклатурнаяГруппа
		|										ИЛИ Проводки.НГ.Родитель.Родитель = Маппинг.НоменклатурнаяГруппа
		|										ИЛИ Проводки.НГ.Родитель.Родитель.Родитель = Маппинг.НоменклатурнаяГруппа
		|							ИНАЧЕ Проводки.НГ = Маппинг.НоменклатурнаяГруппа
		|						КОНЕЦ
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА Проводки.СчетДт = Маппинг.СчетЗатрат
		|						ИЛИ Проводки.СчетДт.Родитель = Маппинг.СчетЗатрат
		|							И Проводки.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|						ИЛИ Проводки.СчетДт.Родитель.Родитель = Маппинг.СчетЗатрат
		|							И Проводки.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|			И Проводки.абс_ЦФУ = Маппинг.ЦФУ");	
		
		Запрос.УстановитьПараметр("МассивСчетовЗатрат",  ПолучитьМассивСчетовЗатрат(Документ.Дата));  
		Запрос.УстановитьПараметр("МассивСчетовДоходов", ПолучитьМассивДоходов());
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		РезультатЗапроса = Запрос.Выполнить();	
		
		ПроводкиДляКонтроля = РезультатЗапроса.Выгрузить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			
			ДатаОграниченияМапингаАналитик 	= Константы.абс_ДатаКонтроляМапингаБюджетныхАналитикВПрочихДокументах.Получить();
			
			Если НЕ ЗначениеЗаполнено(ДатаОграниченияМапингаАналитик) Тогда				
				
			Иначе	
				
				Если НЕ ПроводкиДляКонтроля = Неопределено И НЕ (Документ.Дата <= КонецДня(ДатаОграниченияМапингаАналитик)) И НЕ Документ.абс_БезКонтроляМаппинга Тогда
					
					СообщениеПроверкиМапинга = "Документ: " + Документ.Ссылка + ". Проверка аналитик по мапингу БУ УУ:";
					
					Для Каждого ПроводкаКонтроля Из ПроводкиДляКонтроля Цикл
						
						Если ((ПроводкаКонтроля.ЭтоЗатрата И ПроверятьМаппингПоСчетуЗатрат(Документ.Дата, ПроводкаКонтроля.СчетДт)) ИЛИ ПроводкаКонтроля.ЭтоДоход) И НЕ ПроводкаКонтроля.ЕстьМапинг Тогда
							
							Отказ = Истина;
							СообщениеПроверкиМапинга = СообщениеПроверкиМапинга + Символы.ПС + 
							"Строка " + ПроводкаКонтроля.НомерПроводки + ": Счет БУ " + ПроводкаКонтроля.СчетДт + " не соответствует мапингу БУ и УУ. ";					
							
						КонецЕсли;
						
					КонецЦикла;		
					
					Если Отказ Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке(СообщениеПроверкиМапинга);					
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Отказ Тогда 
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//АБС-Пр2-
	//
	
	//Если НЕ (Документ.Дата <= КонецДня(Константы.абс_ДатаКонтроляМапингаБюджетныхАналитикВПрочихДокументах.Получить())) И НЕ Документ.абс_БезКонтроляМаппинга Тогда			
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ВЫБОР
	//|		КОГДА Маппинг.СтатьяУУ ЕСТЬ NULL 
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ КАК ЕстьМапинг,
	//|	Проводки.СчетДт,
	//|	Проводки.СубконтоДт1,
	//|	Проводки.СубконтоДт2,
	//|	Проводки.СубконтоДт3,
	//|	Проводки.СчетКт,
	//|	Проводки.СубконтоКт1,
	//|	Проводки.СубконтоКт2,
	//|	Проводки.СубконтоКт3,
	//|	Проводки.Сумма,
	//|	Проводки.ЭтоЗатрата,
	//|	Проводки.ЭтоДоход,
	//|	Проводки.Организация,
	//|	Проводки.абс_ЦФУ,
	//|	Проводки.абс_ЦФО,
	//|	Проводки.абс_БюджетнаяСтатья,
	//|	Проводки.абс_ТипКонтрагента,
	//|	Проводки.абс_КВ,
	//|	Проводки.абс_ТЭО,
	//|	Проводки.абс_ТипСети,
	//|	Проводки.абс_ТипРасхода,
	//|	Проводки.СтатьяЗатрат,
	//|	Проводки.НГ,
	//|	Проводки.НомерПроводки
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	//|		ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	//|		ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	//|		ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	//|		ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	//|		ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	//|		ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	//|		ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	//|		ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	//|		ВЫБОР
	//|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетовЗатрат)
	//|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель В (&МассивСчетовЗатрат)
	//|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель В (&МассивСчетовЗатрат)
	//|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ КАК ЭтоЗатрата,
	//|		ВЫБОР
	//|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В (&МассивСчетовДоходов)
	//|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.Родитель В (&МассивСчетовДоходов)
	//|						И ХозрасчетныйДвиженияССубконто.СчетКт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.Родитель.Родитель В (&МассивСчетовДоходов)
	//|						И ХозрасчетныйДвиженияССубконто.СчетКт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ КАК ЭтоДоход,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.Организация КАК Организация,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЦФУ КАК абс_ЦФУ,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЦФО КАК абс_ЦФО,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_БюджетнаяСтатья КАК абс_БюджетнаяСтатья,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипКонтрагента КАК абс_ТипКонтрагента,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_КВ КАК абс_КВ,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТЭО КАК абс_ТЭО,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипСети КАК абс_ТипСети,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ТипРасхода КАК абс_ТипРасхода,
	//|		ВЫБОР
	//|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетовЗатрат)
	//|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель В (&МассивСчетовЗатрат)
	//|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель В (&МассивСчетовЗатрат)
	//|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				ТОГДА ВЫБОР
	//|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	//|								ИЛИ ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	//|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	//|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	//|								ИЛИ ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	//|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	//|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	//|								ИЛИ ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	//|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	//|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|					КОНЕЦ
	//|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|		КОНЕЦ КАК СтатьяЗатрат,
	//|		ВЫБОР
	//|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетовЗатрат)
	//|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель В (&МассивСчетовЗатрат)
	//|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель В (&МассивСчетовЗатрат)
	//|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				ТОГДА ВЫБОР
	//|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.НоменклатурныеГруппы
	//|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	//|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.НоменклатурныеГруппы
	//|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	//|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.НоменклатурныеГруппы
	//|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	//|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|					КОНЕЦ
	//|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В (&МассивСчетовДоходов)
	//|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.Родитель В (&МассивСчетовДоходов)
	//|						И ХозрасчетныйДвиженияССубконто.СчетКт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.Родитель.Родитель В (&МассивСчетовДоходов)
	//|						И ХозрасчетныйДвиженияССубконто.СчетКт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				ТОГДА ВЫБОР
	//|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.НоменклатурныеГруппы
	//|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	//|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.НоменклатурныеГруппы
	//|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	//|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.НоменклатурныеГруппы
	//|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	//|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|					КОНЕЦ
	//|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|		КОНЕЦ КАК НГ,
	//|		ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерПроводки
	//|	ИЗ
	//|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	//|				,
	//|				,
	//|				Регистратор = &Документ
	//|					И (СчетДт В (&МассивСчетовЗатрат)
	//|						ИЛИ СчетДт.Родитель В (&МассивСчетовЗатрат)
	//|							И СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|						ИЛИ СчетДт.Родитель.Родитель В (&МассивСчетовЗатрат)
	//|							И СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|						ИЛИ (СчетКт В (&МассивСчетовДоходов)
	//|							ИЛИ СчетКт.Родитель В (&МассивСчетовДоходов)
	//|								И СчетКт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|							ИЛИ СчетКт.Родитель.Родитель В (&МассивСчетовДоходов)
	//|								И СчетКт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))),
	//|				,
	//|				) КАК ХозрасчетныйДвиженияССубконто) КАК Проводки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ КАК СтатьяУУ,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ КАК СтатьяБУ,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат КАК СчетЗатрат,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	//|		ИЗ
	//|			РегистрСведений.абс_СоответствиеСтатейЗатрат_БУ_УУ КАК абс_СоответствиеСтатейЗатрат_БУ_УУ
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат,
	//|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа) КАК Маппинг
	//|		ПО Проводки.абс_БюджетнаяСтатья = Маппинг.СтатьяУУ
	//|			И (ВЫБОР
	//|				КОГДА (НЕ Проводки.НГ = НЕОПРЕДЕЛЕНО)
	//|					ТОГДА ВЫБОР
	//|							КОГДА Маппинг.НоменклатурнаяГруппа.ЭтоГруппа
	//|								ТОГДА Проводки.НГ.Родитель = Маппинг.НоменклатурнаяГруппа
	//|										ИЛИ Проводки.НГ.Родитель.Родитель = Маппинг.НоменклатурнаяГруппа
	//|										ИЛИ Проводки.НГ.Родитель.Родитель.Родитель = Маппинг.НоменклатурнаяГруппа
	//|							ИНАЧЕ Проводки.НГ = Маппинг.НоменклатурнаяГруппа
	//|						КОНЕЦ
	//|			КОНЕЦ)
	//|			И (ВЫБОР
	//|				КОГДА Проводки.ЭтоЗатрата
	//|					ТОГДА Проводки.СчетДт = Маппинг.СчетЗатрат
	//|							ИЛИ Проводки.СчетДт.Родитель = Маппинг.СчетЗатрат
	//|								И Проводки.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|							ИЛИ Проводки.СчетДт.Родитель.Родитель = Маппинг.СчетЗатрат
	//|								И Проводки.СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	////		|								И Проводки.СтатьяЗатрат = Маппинг.СтатьяБУ
	//|				КОГДА Проводки.ЭтоДоход
	//|					ТОГДА Проводки.СчетКт = Маппинг.СчетЗатрат
	//|							ИЛИ Проводки.СчетКт.Родитель = Маппинг.СчетЗатрат
	//|								И Проводки.СчетКт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|							ИЛИ Проводки.СчетКт.Родитель.Родитель = Маппинг.СчетЗатрат
	//|								И Проводки.СчетКт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				ИНАЧЕ ЛОЖЬ
	//|			КОНЕЦ)");	
	//
	//Запрос.УстановитьПараметр("МассивСчетовЗатрат",  ПолучитьМассивСчетовЗатрат(Документ.Дата));  
	//Запрос.УстановитьПараметр("МассивСчетовДоходов", ПолучитьМассивДоходов());
	//
	//Запрос.УстановитьПараметр("Документ", Документ);
	//
	//РезультатЗапроса = Запрос.Выполнить();	
	//
	//ПроводкиДляКонтроля = РезультатЗапроса.Выгрузить();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Если Выборка.Количество() > 0 Тогда
	//	ПроверитьАналитикиПрочихТиповБюджетныхДокументов(Документ, Отказ, ПроводкиДляКонтроля);
	//КонецЕсли;
	//	
	//	Если Отказ Тогда 
	//		Возврат;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//АБС-Пр2-
	
	Для каждого ТекСтрокаУслуги из Документ.Услуги Цикл
		Движение = ТабДвижений.Добавить();
		Движение.Период = Документ.Дата;
		//Движение.Активность = Истина;
		Движение.Сценарий = Сценарий;
		Движение.СтатьяОборотов = ТекСтрокаУслуги.абс_СтатьяОборотов;
		Движение.Валюта = Документ.ВалютаДокумента;
		Движение.абс_ТипКонтрагента = Документ.Контрагент.абс_ТипыКонтрагентов;
		//АБС 01.08.11
		Движение.Контрагент = Документ.Контрагент;
		//\\АБС 01.08.11 
		Движение.абс_ЦФУ = ТекСтрокаУслуги.абс_ЦФУ;
		ЦФО = ТекСтрокаУслуги.абс_ЦФО;
		Движение.абс_ТЭО = Документ.абс_ТЭО; //***** Гетц. Проектный учет. 23.12.13
		//АБС НАЧАЛО Задача №08759
		Движение.Проект = Документ.Проект;
		Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
		//\\АБС КОНЕЦ Задача №08759  
		
		Движение.Организация = Документ.Организация;
		Движение.ВалютнаяСумма = ?(Документ.СуммаВключаетНДС,ТекСтрокаУслуги.Сумма-ТекСтрокаУслуги.СуммаНДС,ТекСтрокаУслуги.Сумма);
		Движение.СуммаУпр = Движение.ВалютнаяСумма*Документ.КурсВзаиморасчетов;
		Движение.СуммаСценария = Движение.СуммаУпр;
	КонецЦикла;
	
КонецПроцедуры

//АБС_Стрельцов+ добавлено: 15.10.2012
//------------------------------------
Процедура ПроведениеПоБюджетуПолучениеУслугПоПереработке(ТабДвижений, Документ, Сценарий, Отказ)
	
	
	
КонецПроцедуры
//------------------------------------
//АБС_Стрельцов-

//АБС ИЗМЕНЕНИЕ 39855  25.03.2014 11:46:06  Шамов
Процедура ПроведениеПоБюджетуТН(ТабДвижений,Документ,Сценарий)
	
	ЗапросПоСебестоимости = Новый Запрос;
	ЗапросПоСебестоимости.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладахБухгалтерскийУчет.Номенклатура,
	|	ПартииТоваровНаСкладахБухгалтерскийУчет.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладахБухгалтерскийУчет.СерияНоменклатуры,
	|	ПартииТоваровНаСкладахБухгалтерскийУчет.Количество,
	|	ПартииТоваровНаСкладахБухгалтерскийУчет.Стоимость,
	|	ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|				И ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|			ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|				И ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|			ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования.Контрагент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|				И ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|			ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования.Контрагент.абс_ТипыКонтрагентов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК абс_ТипКонтрагента
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладахБухгалтерскийУчет
	|ГДЕ
	|	ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор = &Регистратор";
	
	ЗапросПоСебестоимости.УстановитьПараметр("Регистратор",Документ);
	тзСебестоимость = ЗапросПоСебестоимости.Выполнить().Выгрузить();
	Если тзСебестоимость.Количество()=0 Тогда
		возврат;
	КонецЕсли;
	
	тзСерии = Документ.Материалы.Выгрузить(,"Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");
	тзСерии.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");
	
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");
	СтруктураПоискаНоменклатура = Новый Структура("Номенклатура");
	
	констВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого СтрокаСерии Из тзСерии Цикл
		//обходим ТЧ документа и списание партий по сериям
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСерии);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаНоменклатура, СтрокаСерии);
		
		СтрокиМатериалов = Документ.Материалы.НайтиСтроки(СтруктураПоиска);
		СтрокиСебестоимости = тзСебестоимость.НайтиСтроки(СтруктураПоиска);
		
		Для каждого ТекСтрокаУслуги из СтрокиМатериалов Цикл
			
			КоличествоСписать = ТекСтрокаУслуги.Количество;
			
			абс_СписатьПоСтрокамСебестоимостиТН(КоличествоСписать, СтрокиСебестоимости, ТекСтрокаУслуги, ТабДвижений, Документ, Сценарий, констВалютаРегУчета);
			
			Если КоличествоСписать > 0 Тогда
				//ищем просто по номенклатуре, т.к. списалась другая характеристика/серия
				СтрокиСебестоимостиНомен = тзСебестоимость.НайтиСтроки(СтруктураПоискаНоменклатура);
				абс_СписатьПоСтрокамСебестоимостиТН(КоличествоСписать, СтрокиСебестоимостиНомен, ТекСтрокаУслуги, ТабДвижений, Документ, Сценарий, констВалютаРегУчета);
			КонецЕсли;
			
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура абс_СписатьПоСтрокамСебестоимостиТН(КоличествоСписать, СтрокиСебестоимости, ТекСтрокаУслуги, ТабДвижений, Документ, Сценарий, констВалютаРегУчета)
	
	Для Каждого	ТекСтрокаСебестоимость Из СтрокиСебестоимости Цикл
		
		Если КоличествоСписать = 0 
			ИЛИ ТекСтрокаСебестоимость.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СписываемКоличество = МИН(КоличествоСписать, ТекСтрокаСебестоимость.Количество);
		Если СписываемКоличество = ТекСтрокаСебестоимость.Количество Тогда
			СписываемСтоимость = ТекСтрокаСебестоимость.Стоимость;
		Иначе 
			СписываемСтоимость = ТекСтрокаСебестоимость.Стоимость / ТекСтрокаСебестоимость.Количество  * СписываемКоличество;
		КонецЕсли;				
		
		Движение = ТабДвижений.Добавить();
		Движение.Период = Документ.Дата;
		Движение.Сценарий = Сценарий;
		Движение.СтатьяОборотов = ТекСтрокаУслуги.абс_БюджетнаяСтатья;
		Движение.Валюта = констВалютаРегУчета;
		Движение.абс_ТипКонтрагента = ТекСтрокаУслуги.абс_ТипКонтрагента;
		Движение.абс_ЦФУ = ТекСтрокаУслуги.абс_ЦФУ;
		Движение.ЦФО = ТекСтрокаУслуги.абс_ЦФО;
		Движение.абс_ТипСети = ТекСтрокаУслуги.абс_ТипСети;
		Движение.абс_ТЭО = ТекСтрокаУслуги.абс_ТЭО;
		Движение.Проект = ТекСтрокаУслуги.Проект;
		Движение.абс_КВ = ТекСтрокаУслуги.абс_КВ;
		Движение.абс_ТипРасхода = ТекСтрокаУслуги.абс_ТипРасхода;
		Движение.Организация = Документ.Организация;
		
		СуммаПоБюджету			= СписываемСтоимость;
		Движение.ВалютнаяСумма	= СуммаПоБюджету;
		Движение.СуммаУпр		= СуммаПоБюджету;
		Движение.СуммаСценария	= СуммаПоБюджету;
		
		Если ТипЗнч(ТекСтрокаСебестоимость.ДокументОприходования) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Движение.ДоговорКонтрагента = ТекСтрокаСебестоимость.ДоговорКонтрагента;				
			Движение.Контрагент = ТекСтрокаСебестоимость.Контрагент;
			Движение.абс_ТипКонтрагента = ТекСтрокаСебестоимость.абс_ТипКонтрагента;
		КонецЕсли;
		
		КоличествоСписать = КоличествоСписать - СписываемКоличество;
		ТекСтрокаСебестоимость.Количество = ТекСтрокаСебестоимость.Количество - СписываемКоличество;
		ТекСтрокаСебестоимость.Стоимость = ТекСтрокаСебестоимость.Стоимость - СписываемСтоимость;
		
	КонецЦикла;	
	
КонецПроцедуры
//АБС ИЗМЕНЕНИЕ 39855 КОНЕЦ

Процедура ПроведениеПоБюджетуПТиУ_АО(ТабДвижений, Документ, Сценарий, Отказ)
	
	//НФС 2018
	//Крамаренко Д.М.
	//отключил запись авансового временно - нет таких реквизитов
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Возврат;
	КонецЕсли;
	
	
	НазваниеТЧ = ?(ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет"),"Прочее","Услуги");
	
	ПроверитьАналититиППДЗакупочногоЗаказа(Документ, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//абс-е вставка функционал несколько ЗЗ в одном ППД
	мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа=константы.абс_ДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа.Получить();
	Если не ЗначениеЗаполнено(мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа) Тогда
		мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа = Дата(3000,1,1);
	КонецЕсли;
	//\\АБС-Е КОНЕЦ
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	//*****АБС. Гетц. Проектный учет. Для строк ТЧ, где не заполнен проект выполняем распределение по таблице распределения закупочного заказа
	ПроводитьПоПроектномуУчету = Константы.абс_ПроведениеПоМеханизмуПроектногоУчета.Получить();
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И ПроводитьПоПроектномуУчету Тогда 
		ДеревоДляРаспределенияУслуг = ПолучитьТаблицуРаспределенияБюджетовПоПроектамПТиУ(Документ, НазваниеТЧ);
		РаспределитьБюджетыПоПроектамПТиУ(Документ, ДеревоДляРаспределенияУслуг, ТабДвижений, Сценарий, Отказ);
	КонецЕсли;
	//*****\\АБС
	Для каждого ТекСтрокаУслуги из Документ[НазваниеТЧ] Цикл
		//*****АБС. Гетц. Проектный учет. Движения делаем только если заполнен проект. Если нет проекта, выполняем распределение по закупочным
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И ПроводитьПоПроектномуУчету Тогда 
			Если Не ЗначениеЗаполнено(ТекСтрокаУслуги.абс_Проект) Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//*****\\АБС
		Если ЗначениеЗаполнено(ТекСтрокаУслуги.СчетЗатрат) Тогда
			ЭтоУслуга = (Найти("08,20,25,26,44,91",Лев(ТекСтрокаУслуги.СчетЗатрат.Код,2))>0);
			//ЭтоУслуга = (Найти("20,25,26,44,91",Лев(ТекСтрокаУслуги.СчетЗатрат.Код,2))>0);//***** Гетц. Проектный учет. 12.12.13. Убираем счет 08 из списка  // 26.02.2014 Возарвщаем 08
		Иначе
			ЭтоУслуга = НЕ Документ.абс_ЗакупочныйЗаказ.РасходыБудущихПериодов;
		КонецЕсли;
		
		Если ЭтоУслуга Тогда			
			
			Движение = ТабДвижений.Добавить();
			// АБС ИЗМЕНЕНО Упр. учет формируем параллельно БУ, чтобы не было разрывов
			// Движение.Период = Документ.абс_ДатаПоставки;
			
			//абс-е вставка функционал несколько ЗЗ в одном ППД
			Движение.Период = Документ.Дата;
			Если Движение.Период>=мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа и ЗначениеЗаполнено(ТекСтрокаУслуги.абс_ЗакупочныйЗаказТЧ) Тогда
				ЗЗ = ТекСтрокаУслуги.абс_ЗакупочныйЗаказТЧ; 				
			Иначе
				ЗЗ = Документ.абс_ЗакупочныйЗаказ;
			КонецЕсли;
			//АБС-Е КОНЕЦ
			
			// АБС ИЗМЕНЕНО Упр. учет формируем параллельно БУ, чтобы не было разрывов КОНЕЦ
			//	Движение.Активность = Истина;
			Движение.Сценарий = Сценарий;
			Движение.СтатьяОборотов = ЗЗ.БюджетнаяСтатья;
			Движение.Валюта = Документ.ВалютаДокумента;
			Если ТипЗнч(Документ.Ссылка) <> Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				Движение.Контрагент = Документ.Контрагент;
				//АБС НАЧАЛО Задача №08759
				Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
				//\\АБС КОНЕЦ Задача №08759
			КонецЕсли;
			Движение.абс_ТипКонтрагента = ЗЗ.ТипКонтрагента;
			Движение.абс_ЦФУ = ЗЗ.ЦФУ;
			Движение.ЦФО = ЗЗ.ЦФО;
			Движение.Организация = ЗЗ.Организация;
			Движение.абс_ТипСети = ЗЗ.типСети;
			Движение.абс_КВ = ЗЗ.КВ;
			Движение.абс_ТЭО = ЗЗ.ТЭО;
			Движение.абс_ТипРасхода = ЗЗ.ТипРасхода;
			//АБС НАЧАЛО Задача №08759
			//Движение.Проект = ЗЗ.Проект;
			Попытка
				//АБС ВСТАВКА   12.05.2014   Навценя
				Если ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда 
					Если ЗначениеЗаполнено(ТекСтрокаУслуги.Проект) Тогда 
						Движение.Проект = ТекСтрокаУслуги.Проект;
					Иначе
						Движение.Проект = ТекСтрокаУслуги.Заказ.Проект;
					КонецЕсли;
				Иначе
					//***** Гетц 05.08.2013
					Если ЗначениеЗаполнено(ТекСтрокаУслуги.абс_Проект) Тогда 
						Движение.Проект = ТекСтрокаУслуги.абс_Проект;
					ИначеЕсли ЗначениеЗаполнено(ТекСтрокаУслуги.Проект) Тогда 
						Движение.Проект = ТекСтрокаУслуги.Проект;
					Иначе
						//***** Гетц 05.08.2013\\
						Движение.Проект = ТекСтрокаУслуги.Заказ.Проект;
					КонецЕсли;
				КонецЕсли;
				//АБС ВСТАВКА  КОНЕЦ
			Исключение
				#Если Клиент Тогда
					//АБС_Стрельцов+ изменено: 22.11.2012
					//Сообщить("Не удалось получить проект из заказа. " + ОписаниеОшибки());
					Движение.Проект = Справочники.Проекты.ПустаяСсылка();
					//АБС_Стрельцов-
				#КонецЕсли
			КонецПопытки;
			//\\АБС КОНЕЦ Задача №08759
			Если мВалютаРегламентированногоУчета = Документ.ВалютаДокумента Тогда
				Курс = 1;
				Кратность = 1;
			Иначе
				Если НазваниеТЧ = "Прочее" Тогда
					Курс = Документ.КурсДокумента;
					Кратность = Документ.КратностьДокумента;
				Иначе
					
					Курс = Документ.КурсВзаиморасчетов;
					Кратность = Документ.КратностьВзаиморасчетов;					
				КонецЕсли;
			КонецЕсли;
			Движение.ВалютнаяСумма = ?(Документ.СуммаВключаетНДС,ТекСтрокаУслуги.Сумма-ТекСтрокаУслуги.СуммаНДС,ТекСтрокаУслуги.Сумма);
			Движение.СуммаУпр = Движение.ВалютнаяСумма*Курс/Кратность;
			Движение.СуммаСценария = Движение.СуммаУпр;
			
			// АБС ВСТАВКА
			Движение.абс_СчетБУ = ТекСтрокаУслуги.СчетЗатрат;			
			// АБС ВСТАВКА КОНЕЦ
			
			//Сторчевой А.Н. 05.12.2017 НФС {
			Движение.СтатьяОборотов 			= ТекСтрокаУслуги.СтатьяОборотов;
			Движение.абс_ТипСети 				= ТекСтрокаУслуги.абс_ТипСети;
			Движение.абс_КВ 					= ТекСтрокаУслуги.абс_КВ;
			Движение.абс_ТЭО 					= ТекСтрокаУслуги.абс_ТЭО;
			Движение.абс_ЦФУ 					= ТекСтрокаУслуги.абс_ЦФУ;
			Движение.ttk_ОбъектБюджетирования	= ТекСтрокаУслуги.ttk_ОбъектБюджетирования;
			Движение.ttk_Город		 			= ТекСтрокаУслуги.ttk_Город;
			// } Сторчевой А.Н. 05.12.2017 НФС
			
		КонецЕсли;
	КонецЦикла;
	
	//***** Гетц.13.12.13. Проведение по регистру затрат по проектам
	ПровестиУслугиКакЗатратыКРаспределению(ТабДвижений, Документ, НазваниеТЧ, Отказ);
	ВыполнитьДвиженияПоОбъектамСтроительства(Документ, НазваниеТЧ, ТабДвижений, Отказ);
	//Гетц.13.12.13\\
	
	//***** АБС Вставка Гетц.24.12.13. Выключим оборудование
	ИспользоватьОборудование = Ложь;
	//***** АБС Вставка Гетц.24.12.13 \\
	
	//***** АБС Вставка Гетц.05.03.14. Включим оборудование
	ИспользоватьОборудование = Истина;
	//***** АБС Вставка Гетц.05.03.14 \\
	
	//абсо{ //включим тч "Оборудование" документа ПТиУ
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И ИспользоватьОборудование Тогда  //***** Гетц.24.12.13. Добавлена проверка
		//*****АБС. Гетц. Проектный учет. Для строк ТЧ, где не заполнен проект выполняем распределение по таблице распределения закупочного заказа
		Если ПроводитьПоПроектномуУчету Тогда 
			ДеревоДляРаспределенияОборудования = ПолучитьТаблицуРаспределенияБюджетовПоПроектамПТиУ(Документ, "Оборудование");
			РаспределитьБюджетыПоПроектамПТиУ(Документ, ДеревоДляРаспределенияОборудования, ТабДвижений, Сценарий, Отказ);
		КонецЕсли;
		//*****\\АБС
		Для каждого ТекСтрокаОборудование из Документ.Оборудование Цикл
			//*****АБС. Гетц. Проектный учет. Движения делаем только если заполнен проект. Если нет проекта, выполняем распределение по закупочным
			Если Не ЗначениеЗаполнено(ТекСтрокаОборудование.абс_Проект) И ПроводитьПоПроектномуУчету Тогда 
				Продолжить;
			КонецЕсли;
			//*****АБС\\
			Движение = ТабДвижений.Добавить();
			// АБС ИЗМЕНЕНО Упр. учет формируем параллельно БУ, чтобы не было разрывов
			// Движение.Период = Документ.абс_ДатаПоставки;
			
			//абс-е вставка функционал несколько ЗЗ в одном ППД
			Движение.Период = Документ.Дата;
			Если Движение.Период>=мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа и ЗначениеЗаполнено(ТекСтрокаОборудование.абс_ЗакупочныйЗаказТЧ) Тогда
				ЗЗ = ТекСтрокаОборудование.абс_ЗакупочныйЗаказТЧ; 				
			Иначе
				ЗЗ = Документ.абс_ЗакупочныйЗаказ;
			КонецЕсли;
			//АБС-Е КОНЕЦ
			
			// АБС ИЗМЕНЕНО Упр. учет формируем параллельно БУ, чтобы не было разрывов КОНЕЦ
			//	Движение.Активность = Истина;
			Движение.Сценарий = Сценарий;
			Движение.СтатьяОборотов = ЗЗ.БюджетнаяСтатья;
			Движение.Валюта = Документ.ВалютаДокумента;
			Движение.Контрагент = Документ.Контрагент;
			Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
			Движение.абс_ТипКонтрагента = ЗЗ.ТипКонтрагента;
			Движение.абс_ЦФУ = ЗЗ.ЦФУ;
			Движение.ЦФО = ЗЗ.ЦФО;
			Движение.Организация = ЗЗ.Организация;
			Движение.абс_ТипСети = ЗЗ.типСети;
			Движение.абс_КВ = ЗЗ.КВ;
			Движение.абс_ТЭО = ЗЗ.ТЭО;
			Движение.абс_ТипРасхода = ЗЗ.ТипРасхода;
			Движение.Проект = ТекСтрокаОборудование.абс_Проект;
			
			Если мВалютаРегламентированногоУчета = Документ.ВалютаДокумента Тогда
				Курс = 1;
				Кратность = 1;
			Иначе
				Курс = Документ.КурсВзаиморасчетов;
				Кратность = Документ.КратностьВзаиморасчетов;					
			КонецЕсли;
			Движение.ВалютнаяСумма = ?(Документ.СуммаВключаетНДС,ТекСтрокаОборудование.Сумма-ТекСтрокаОборудование.СуммаНДС,ТекСтрокаОборудование.Сумма);
			Движение.СуммаУпр = Движение.ВалютнаяСумма*Курс/Кратность;
			Движение.СуммаСценария = Движение.СуммаУпр;
			
			//Сторчевой А.Н. 05.12.2017 НФС {
			Движение.СтатьяОборотов 			= ТекСтрокаОборудование.СтатьяОборотов;
			Движение.абс_ТипСети 				= ТекСтрокаОборудование.абс_ТипСети;
			Движение.абс_КВ 					= ТекСтрокаОборудование.абс_КВ;
			Движение.абс_ТЭО 					= ТекСтрокаОборудование.абс_ТЭО;
			Движение.абс_ЦФУ 					= ТекСтрокаОборудование.абс_ЦФУ;
			Движение.ttk_ОбъектБюджетирования	= ТекСтрокаОборудование.ttk_ОбъектБюджетирования;
			Движение.ttk_Город		 			= ТекСтрокаОборудование.ttk_Город;
			// } Сторчевой А.Н. 05.12.2017 НФС
			
			
		КонецЦикла;
	КонецЕсли;
	//}абсо
	
КонецПроцедуры

Процедура ПроведениеПоБюджетуПТиУ_АО_КВ(ТабДвижений,Документ,Сценарий, Отказ)
	
	НазваниеТЧ = ?(ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет"),"Прочее","Услуги");
	
	//НФС 2018
	//Крамаренко Д.М.
	//отключил запись авансового временно - нет таких реквизитов
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Возврат;
	КонецЕсли;
	
	
	ПроверитьАналититиППДЗакупочногоЗаказа(Документ, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	//абс-е вставка функционал несколько ЗЗ в одном ППД
	мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа=константы.абс_ДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа.Получить();
	Если не ЗначениеЗаполнено(мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа) Тогда
		мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа = Дата(3000,1,1);
	КонецЕсли;
	
	СценарийОперФакт = Справочники.СценарииПланирования.НайтиПоНаименованию("КВ по поставке ОПЕР ФАКТ");
	СценарийФакт = Справочники.СценарииПланирования.НайтиПоНаименованию("КВ по поставке ФАКТ");
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	//*****АБС. Гетц. Проектный учет. Для строк ТЧ, где не заполнен проект выполняем распределение по таблице распределения закупочного заказа
	ПроводитьПоПроектномуУчету = Константы.абс_ПроведениеПоМеханизмуПроектногоУчета.Получить();
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И ПроводитьПоПроектномуУчету Тогда 
		ДеревоДляРаспределенияУслуг = ПолучитьТаблицуРаспределенияБюджетовПоПроектамПТиУ(Документ, НазваниеТЧ);
		РаспределитьБюджетыПоПроектамПТиУ(Документ, ДеревоДляРаспределенияУслуг, ТабДвижений, СценарийОперФакт, Отказ);
	КонецЕсли;
	//*****\\АБС
	//\\АБС-Е КОНЕЦ
	Для каждого ТекСтрокаУслуги из Документ[НазваниеТЧ] Цикл
		//*****АБС. Гетц. Проектный учет. Движения делаем только если заполнен проект. Если нет проекта, выполняем распределение по закупочным
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И ПроводитьПоПроектномуУчету Тогда 
			Если Не ЗначениеЗаполнено(ТекСтрокаУслуги.абс_Проект) Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//*****\\АБС
		Если ЗначениеЗаполнено(ТекСтрокаУслуги.СчетЗатрат) Тогда
			ЭтоУслуга = (Найти("08,20,25,26,44,91",Лев(ТекСтрокаУслуги.СчетЗатрат.Код,2))>0);
			//ЭтоУслуга = (Найти("20,25,26,44,91",Лев(ТекСтрокаУслуги.СчетЗатрат.Код,2))>0);//***** Гетц. Проектный учет. 12.12.13. Убираем счет 08 из списка // 26.02.2014 Возарвщаем 08
		Иначе
			ЭтоУслуга = НЕ Документ.абс_ЗакупочныйЗаказ.РасходыБудущихПериодов;
		КонецЕсли;
		
		Если ЭтоУслуга Тогда
			Движение = ТабДвижений.Добавить();
			// АБС ИЗМЕНЕНО Упр. учет формируем параллельно БУ, чтобы не было разрывов
			// Движение.Период = Документ.абс_ДатаПоставки;
			
			//абс-е вставка функционал несколько ЗЗ в одном ППД
			Движение.Период = Документ.Дата;
			Если Движение.Период>=мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа и ЗначениеЗаполнено(ТекСтрокаУслуги.абс_ЗакупочныйЗаказТЧ) Тогда
				ЗЗ = ТекСтрокаУслуги.абс_ЗакупочныйЗаказТЧ; 				
			Иначе
				ЗЗ = Документ.абс_ЗакупочныйЗаказ;
			КонецЕсли;
			//АБС-Е КОНЕЦ
			
			// АБС ИЗМЕНЕНО Упр. учет формируем параллельно БУ, чтобы не было разрывов КОНЕЦ
			//	Движение.Активность = Истина;
			Движение.Сценарий = СценарийОперФакт;
			Движение.СтатьяОборотов = ЗЗ.БюджетнаяСтатья;
			Движение.Валюта = Документ.ВалютаДокумента;
			Если ТипЗнч(Документ.Ссылка) <> Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				Движение.Контрагент = Документ.Контрагент;
				Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
			КонецЕсли;
			Движение.абс_ТипКонтрагента = ЗЗ.ТипКонтрагента;
			Движение.абс_ЦФУ = ЗЗ.ЦФУ;
			Движение.ЦФО = ЗЗ.ЦФО;
			Движение.Организация = ЗЗ.Организация;
			Движение.абс_ТипСети = ЗЗ.типСети;
			Движение.абс_КВ = ЗЗ.КВ;
			Движение.абс_ТЭО = ЗЗ.ТЭО;
			Движение.абс_ТипРасхода = ЗЗ.ТипРасхода;
			Если мВалютаРегламентированногоУчета = Документ.ВалютаДокумента Тогда
				Курс = 1;
				Кратность = 1;
			Иначе
				
				Если НазваниеТЧ = "Прочее" Тогда
					Курс = Документ.КурсДокумента;
					Кратность = Документ.КратностьДокумента;
				Иначе
					Курс = Документ.КурсВзаиморасчетов;
					Кратность = Документ.КратностьВзаиморасчетов;					
				КонецЕсли;
			КонецЕсли;
			
			Движение.ВалютнаяСумма = ?(Документ.СуммаВключаетНДС,ТекСтрокаУслуги.Сумма-ТекСтрокаУслуги.СуммаНДС,ТекСтрокаУслуги.Сумма);
			Движение.СуммаУпр = Движение.ВалютнаяСумма*Курс/Кратность;
			Движение.СуммаСценария = Движение.СуммаУпр;
			//*****АБС. Проектный учет
			Попытка
				Движение.Проект = ТекСтрокаУслуги.абс_Проект;
			Исключение
				Движение.Проект = Справочники.Проекты.ПустаяСсылка();
			КонецПопытки;
			//*****\\АБС
			
			// АБС ВСТАВКА
			Движение.абс_СчетБУ = ТекСтрокаУслуги.СчетЗатрат;			
			// АБС ВСТАВКА КОНЕЦ
		КонецЕсли;
	КонецЦикла;	
	//***** Гетц.13.12.13. Проведение по регистру затрат по проектам
	ПровестиУслугиКакЗатратыКРаспределению(ТабДвижений, Документ, НазваниеТЧ, Отказ);
	ВыполнитьДвиженияПоОбъектамСтроительства(Документ, НазваниеТЧ, ТабДвижений, Отказ);
	//Гетц.13.12.13\\
	//***** АБС Вставка Гетц.24.12.13. Выключим оборудование
	ИспользоватьОборудование = Ложь;
	//***** АБС Вставка Гетц.24.12.13 \\
	
	//***** АБС Вставка Гетц.05.03.14. Включим оборудование
	ИспользоватьОборудование = Истина;
	//***** АБС Вставка Гетц.05.03.14 \\
	
	//абсо{ //включим тч "Оборудование" документа ПТиУ
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		//АБС+ Тупиков 15476
		НазваниеТЧ = ?(Документ.Оборудование.Количество() > 0, "Оборудование", "ОбъектыСтроительства");
		//*****АБС. Гетц. Проектный учет. Для строк ТЧ, где не заполнен проект выполняем распределение по таблице распределения закупочного заказа
		Если ПроводитьПоПроектномуУчету И НазваниеТЧ = "Оборудование" И ИспользоватьОборудование Тогда 
			ДеревоДляРаспределенияОборудования = ПолучитьТаблицуРаспределенияБюджетовПоПроектамПТиУ(Документ, "Оборудование");
			РаспределитьБюджетыПоПроектамПТиУ(Документ, ДеревоДляРаспределенияОборудования, ТабДвижений, Сценарий, Отказ);
		КонецЕсли;
		//*****\\АБС
		//АБС- Тупиков
		Для каждого ТекСтрокаОборудование из Документ[НазваниеТЧ] Цикл
			//***** АБС Вставка Гетц.24.12.13. Выключим оборудование
			Если НазваниеТЧ = "Оборудование" И Не ИспользоватьОборудование Тогда 
				Продолжить;
			КонецЕсли;
			//***** АБС Вставка Гетц.24.12.13 \\
			//*****АБС. Гетц. Проектный учет. Движения делаем только если заполнен проект. Если нет проекта, выполняем распределение по закупочным
			Если НазваниеТЧ = "Оборудование" и ПроводитьПоПроектномуУчету и Не ЗначениеЗаполнено(ТекСтрокаОборудование.абс_Проект) Тогда 
				Продолжить;
			КонецЕсли;
			//*****АБС\\
			Движение = ТабДвижений.Добавить();
			// АБС ИЗМЕНЕНО Упр. учет формируем параллельно БУ, чтобы не было разрывов
			// Движение.Период = Документ.абс_ДатаПоставки;
			
			//абс-е вставка функционал несколько ЗЗ в одном ППД
			Движение.Период = Документ.Дата;
			Если Движение.Период>=мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа и ЗначениеЗаполнено(ТекСтрокаОборудование.абс_ЗакупочныйЗаказТЧ) Тогда
				ЗЗ = ТекСтрокаОборудование.абс_ЗакупочныйЗаказТЧ; 				
			Иначе
				ЗЗ = Документ.абс_ЗакупочныйЗаказ;
			КонецЕсли;
			//АБС-Е КОНЕЦ
			
			// АБС ИЗМЕНЕНО Упр. учет формируем параллельно БУ, чтобы не было разрывов КОНЕЦ
			//	Движение.Активность = Истина;
			Движение.Сценарий = Сценарий;
			Движение.СтатьяОборотов = ЗЗ.БюджетнаяСтатья;
			Движение.Валюта = Документ.ВалютаДокумента;
			Движение.Контрагент = Документ.Контрагент;
			Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
			Движение.абс_ТипКонтрагента = ЗЗ.ТипКонтрагента;
			Движение.абс_ЦФУ = ЗЗ.ЦФУ;
			Движение.ЦФО = ЗЗ.ЦФО;
			Движение.Организация = ЗЗ.Организация;
			Движение.абс_ТипСети = ЗЗ.типСети;
			Движение.абс_КВ = ЗЗ.КВ;
			Движение.абс_ТЭО = ЗЗ.ТЭО;
			Движение.абс_ТипРасхода = ЗЗ.ТипРасхода;
			Если мВалютаРегламентированногоУчета = Документ.ВалютаДокумента Тогда
				Курс = 1;
				Кратность = 1;
			Иначе
				Курс = Документ.КурсВзаиморасчетов;
				Кратность = Документ.КратностьВзаиморасчетов;					
			КонецЕсли;
			Движение.ВалютнаяСумма = ?(Документ.СуммаВключаетНДС,ТекСтрокаОборудование.Сумма-ТекСтрокаОборудование.СуммаНДС,ТекСтрокаОборудование.Сумма);
			Движение.СуммаУпр = Движение.ВалютнаяСумма*Курс/Кратность;
			Движение.СуммаСценария = Движение.СуммаУпр;
			//*****АБС. Проектный учет
			Попытка
				Движение.Проект = ТекСтрокаОборудование.абс_Проект;
			Исключение
				Движение.Проект = Справочники.Проекты.ПустаяСсылка();
			КонецПопытки;
			//*****\\АБС
		КонецЦикла;
	КонецЕсли;
	//}абсо
	
	//АБС ВСТАВКА 46578  24.09.2014 10:16:37  Шамов
	//движения по товарам
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		НазваниеТЧ = "Товары";
		
		Если ПроводитьПоПроектномуУчету Тогда 
			ДеревоДляРаспределенияОборудования = ПолучитьТаблицуРаспределенияБюджетовПоПроектамПТиУ(Документ, "Товары");
			РаспределитьБюджетыПоПроектамПТиУ(Документ, ДеревоДляРаспределенияОборудования, ТабДвижений, Сценарий, Отказ);
		КонецЕсли;
		
		Для каждого ТекСтрокаТовары из Документ[НазваниеТЧ] Цикл
			
			Если ПроводитьПоПроектномуУчету и Не ЗначениеЗаполнено(ТекСтрокаТовары.абс_Проект) Тогда 
				Продолжить;
			КонецЕсли;
			
			Движение = ТабДвижений.Добавить();
			
			Движение.Период = Документ.Дата;
			Если Движение.Период>=мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа и ЗначениеЗаполнено(ТекСтрокаТовары.абс_ЗакупочныйЗаказТЧ) Тогда
				ЗЗ = ТекСтрокаТовары.абс_ЗакупочныйЗаказТЧ; 				
			Иначе
				ЗЗ = Документ.абс_ЗакупочныйЗаказ;
			КонецЕсли;
			
			Движение.Сценарий = Сценарий;
			Движение.СтатьяОборотов = ЗЗ.БюджетнаяСтатья;
			Движение.Валюта = Документ.ВалютаДокумента;
			Движение.Контрагент = Документ.Контрагент;
			Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
			Движение.абс_ТипКонтрагента = ЗЗ.ТипКонтрагента;
			Движение.абс_ЦФУ = ЗЗ.ЦФУ;
			Движение.ЦФО = ЗЗ.ЦФО;
			Движение.Организация = ЗЗ.Организация;
			Движение.абс_ТипСети = ЗЗ.типСети;
			Движение.абс_КВ = ЗЗ.КВ;
			Движение.абс_ТЭО = ЗЗ.ТЭО;
			Движение.абс_ТипРасхода = ЗЗ.ТипРасхода;
			Если мВалютаРегламентированногоУчета = Документ.ВалютаДокумента Тогда
				Курс = 1;
				Кратность = 1;
			Иначе
				Курс = Документ.КурсВзаиморасчетов;
				Кратность = Документ.КратностьВзаиморасчетов;					
			КонецЕсли;
			Движение.ВалютнаяСумма = ?(Документ.СуммаВключаетНДС,ТекСтрокаТовары.Сумма-ТекСтрокаТовары.СуммаНДС,ТекСтрокаТовары.Сумма);
			Движение.СуммаУпр = Движение.ВалютнаяСумма*Курс/Кратность;
			Движение.СуммаСценария = Движение.СуммаУпр;
			
			Попытка
				Движение.Проект = ТекСтрокаТовары.абс_Проект;
			Исключение
				Движение.Проект = Справочники.Проекты.ПустаяСсылка();
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	//АБС ВСТАВКА 46578 КОНЕЦ	
	
	// Добавим движения по факту
	Если Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
		ТабДвиженийФакт = ТабДвижений.Скопировать();
		ТабДвиженийФакт.ЗаполнитьЗначения(СценарийФакт,"Сценарий");
		
		Для каждого СтрокаТабФакт из ТабДвиженийФакт Цикл
			
			НоваяСтрока = ТабДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабФакт);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроведениеПоБюджетуАмортизацияОС(ТабДвижений,Документ,Сценарий,Источник)
	
	Запрос = Новый Запрос;
	Запрос.текст= "ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Сумма,
	|	ХозрасчетныйОбороты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &датаКон, Регистратор, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОС_01), , , КорСчет В ИЕРАРХИИ (&СписокСчетов), ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Регистратор = &ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Регистратор
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Ссылка";
	//абсо по заявке 9344
	//требуется распределять по ЦФО а не сваливать в одно
	//АБС_Попов Замена
	//Запрос.Текст= "ВЫБРАТЬ
	//			  |	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение,
	//			  |	СоответствиеПодразделенийИПодразделенийОрганизаций.Организация КАК Организация,
	//			  |	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	//			  |ПОМЕСТИТЬ втЦФО
	//			  |ИЗ
	//			  |	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	//			  |
	//			  |ИНДЕКСИРОВАТЬ ПО
	//			  |	Организация,
	//			  |	ПодразделениеОрганизации
	//			  |;
	//			  |
	//			  |////////////////////////////////////////////////////////////////////////////////
	//			  |ВЫБРАТЬ
	//			  |	ХозрасчетныйОбороты.КорСчет,
	//			  |	ХозрасчетныйОбороты.Организация КАК Организация,
	//			  |	ХозрасчетныйОбороты.КорСубконто1,
	//			  |	ХозрасчетныйОбороты.КорСубконто2,
	//			  |	ХозрасчетныйОбороты.КорСубконто3,
	//			  |	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Сумма,
	//			  |	ХозрасчетныйОбороты.Регистратор КАК Ссылка,
	//			  |	ВЫБОР
	//			  |		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПодразделенияОрганизаций
	//			  |			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	//			  |		КОГДА ХозрасчетныйОбороты.КорСубконто2 ССЫЛКА Справочник.ПодразделенияОрганизаций
	//			  |			ТОГДА ХозрасчетныйОбороты.КорСубконто2
	//			  |		КОГДА ХозрасчетныйОбороты.КорСубконто3 ССЫЛКА Справочник.ПодразделенияОрганизаций
	//			  |			ТОГДА ХозрасчетныйОбороты.КорСубконто3
	//			  |	КОНЕЦ КАК ПодразделениеОрганизации
	//			  |ПОМЕСТИТЬ втПроводки
	//			  |ИЗ
	//			  |	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОС_01), , , КорСчет В ИЕРАРХИИ (&СписокСчетов), ) КАК ХозрасчетныйОбороты
	//			  |ГДЕ
	//			  |	ХозрасчетныйОбороты.Регистратор = &Ссылка
	//			  |
	//			  |СГРУППИРОВАТЬ ПО
	//			  |	ХозрасчетныйОбороты.КорСчет,
	//			  |	ХозрасчетныйОбороты.Организация,
	//			  |	ХозрасчетныйОбороты.КорСубконто1,
	//			  |	ХозрасчетныйОбороты.КорСубконто2,
	//			  |	ХозрасчетныйОбороты.КорСубконто3,
	//			  |	ХозрасчетныйОбороты.Регистратор,
	//			  |	ВЫБОР
	//			  |		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПодразделенияОрганизаций
	//			  |			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	//			  |		КОГДА ХозрасчетныйОбороты.КорСубконто2 ССЫЛКА Справочник.ПодразделенияОрганизаций
	//			  |			ТОГДА ХозрасчетныйОбороты.КорСубконто2
	//			  |		КОГДА ХозрасчетныйОбороты.КорСубконто3 ССЫЛКА Справочник.ПодразделенияОрганизаций
	//			  |			ТОГДА ХозрасчетныйОбороты.КорСубконто3
	//			  |	КОНЕЦ
	//			  |
	//			  |ИНДЕКСИРОВАТЬ ПО
	//			  |	Организация,
	//			  |	ПодразделениеОрганизации
	//			  |;
	//			  |
	//			  |////////////////////////////////////////////////////////////////////////////////
	//			  |ВЫБРАТЬ
	//			  |	втПроводки.КорСчет,
	//			  |	втПроводки.Организация,
	//			  |	втПроводки.КорСубконто1,
	//			  |	втПроводки.КорСубконто2,
	//			  |	втПроводки.КорСубконто3,
	//			  |	втПроводки.Сумма КАК Сумма,
	//			  |	втПроводки.Ссылка КАК Ссылка,
	//			  |	втЦФО.Подразделение КАК ПодразделениеЦФО
	//			  |ИЗ
	//			  |	втПроводки КАК втПроводки
	//			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЦФО КАК втЦФО
	//			  |		ПО втПроводки.Организация = втЦФО.Организация
	//			  |			И втПроводки.ПодразделениеОрганизации = втЦФО.ПодразделениеОрганизации
	//			  |ИТОГИ
	//			  |	СУММА(Сумма)
	//			  |ПО
	//			  |	Ссылка";
	
	Запрос.Текст= "ВЫБРАТЬ
	|	ТаблицаДвижений.СчетКТ КАК Счет,
	|	ТаблицаДвижений.СчетДТ КАК КорСчет,
	|	ТаблицаДвижений.Организация,
	//абс_Стрельцов+ добавлено: 12.09.2012
	//при переносе ПУ
	|	ТаблицаДвижений.СубконтоКТ1 КАК Субконто1,
	//абс_Стрельцов-
	|	ТаблицаДвижений.СубконтоДТ1 КАК КорСубконто3,
	|	ТаблицаДвижений.СубконтоДТ2 КАК КорСубконто1,
	|	ТаблицаДвижений.СубконтоДТ3 КАК КорСубконто2,
	|	ТаблицаДвижений.Сумма,
	|	&Ссылка КАК Регистратор
	|ПОМЕСТИТЬ вт_ТаблицаДвижений
	|ИЗ
	|	&ТаблицаДвижений КАК ТаблицаДвижений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение,
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.Организация КАК Организация,
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ втЦФО
	|ИЗ
	|	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПодразделениеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	//абс_Стрельцов+ добавлено: 12.09.2012
	//при переносе ПУ
	|	ХозрасчетныйОбороты.Субконто1,
	//абс_Стрельцов-
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	СУММА(ХозрасчетныйОбороты.Сумма) КАК Сумма,
	|	ХозрасчетныйОбороты.Регистратор КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		КОГДА ХозрасчетныйОбороты.КорСубконто2 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто2
	|		КОГДА ХозрасчетныйОбороты.КорСубконто3 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто3
	|	КОНЕЦ КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ втПроводки
	|ИЗ
	|	вт_ТаблицаДвижений КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОС_01)
	|	И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ(&СписокСчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Регистратор,
	//абс_Стрельцов+ добавлено: 12.09.2012
	//при переносе ПУ
	|	ХозрасчетныйОбороты.Субконто1
	//абс_Стрельцов-
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПодразделениеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПроводки.КорСчет,
	|	втПроводки.Организация,
	|	втПроводки.КорСубконто1,
	|	втПроводки.КорСубконто2,
	|	втПроводки.КорСубконто3,
	|	втПроводки.Сумма КАК Сумма,
	|	втПроводки.Ссылка КАК Ссылка,
	|	втЦФО.Подразделение КАК ПодразделениеЦФО,
	//абс_Стрельцов+ добавлено: 12.09.2012
	//при переносе ПУ
	|	ЕСТЬNULL(МестонахождениеОСБухгалтерскийУчетСрезПоследних.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)) КАК Проект
	//абс_Стрельцов-
	|ИЗ
	|	втПроводки КАК втПроводки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЦФО КАК втЦФО
	|		ПО втПроводки.Организация = втЦФО.Организация
	|			И втПроводки.ПодразделениеОрганизации = втЦФО.ПодразделениеОрганизации
	//абс_Стрельцов+ добавлено: 12.09.2012
	//при переносе ПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Период, Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО втПроводки.Организация = МестонахождениеОСБухгалтерскийУчетСрезПоследних.Организация
	|			И втПроводки.Субконто1 = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	//абс_Стрельцов-
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ТаблицаДвижений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЦФО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПроводки";
	//\\АБС_Попов Замена
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("20"));
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("25"));
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("26"));
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("44"));
	//АБС_Попов Вставка
	Движения = Источник.Движения;
	ТаблицаДвижений = Движения.Хозрасчетный.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаДвижений",ТаблицаДвижений);
	//\\АБС_Попов Вставка
	
	Запрос.УстановитьПараметр("СписокСчетов",СписокСчетов);	
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Документ.Дата));	
	Запрос.УстановитьПараметр("датаКон",КонецМесяца(Документ.Дата));
	Запрос.УстановитьПараметр("Период",Документ.Дата);  //абс_Стрельцов+ добавлено: 24.09.2012
	Запрос.УстановитьПараметр("Ссылка",Документ.Ссылка);
	
	Выборка = Запрос.выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Движения = Неопределено;
	ТаблицаДвижений = Неопределено;
	Сч = 0;
	Кол = Выборка.Количество();
	
	констВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Пока Выборка.Следующий() Цикл
		//сообщить(""+Выборка.Ссылка+" кол "+Кол+" сч "+Сч);
		
		Сч = Сч+1;
		ВыборкаПроводки = Выборка.Выбрать();
		Пока ВыборкаПроводки.Следующий() Цикл
			Движение = ТабДвижений.Добавить();
			Движение.Период = Документ.Дата;
			//	Движение.Активность = Истина;
			Движение.Сценарий = Сценарий;
			Если Лев(ВыборкаПроводки.КорСчет.Код,2) = "26" Тогда
				
				Движение.СтатьяОборотов = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("АУР36");
				Движение.абс_ЦФУ = Справочники.абс_ЦФУ.НайтиПоКоду("ЦФУ7");
				
			ИначеЕсли Лев(ВыборкаПроводки.КорСчет.Код,2) = "25" Тогда
				Если Найти(Строка(ВыборкаПроводки.КорСубконто3),"Связь") Тогда
					
					Движение.абс_ЦФУ = Справочники.абс_ЦФУ.НайтиПоКоду("ЦФУ1");
					Движение.СтатьяОборотов = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ОПР35");
					
				ИначеЕсли Найти(Строка(ВыборкаПроводки.КорСубконто2),"Эксплуатация") Тогда
					
					Движение.абс_ЦФУ = Справочники.абс_ЦФУ.НайтиПоКоду("ЦФУ5");
					Движение.СтатьяОборотов = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ПРСЭ06");					
					
				Иначе
					Движение.абс_ЦФУ = Справочники.абс_ЦФУ.НайтиПоКоду("ЦФУ5");
					Движение.СтатьяОборотов = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ПРСЭ06");
					
				КонецЕсли;
				
			ИначеЕсли Лев(ВыборкаПроводки.КорСчет.Код,2) = "20" Тогда
				Движение.СтатьяОборотов = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ПРСЭ06");
				Движение.абс_ЦФУ = Справочники.абс_ЦФУ.НайтиПоКоду("ЦФУ5");
				
			ИначеЕсли Лев(ВыборкаПроводки.КорСчет.Код,2) = "44" Тогда
				
				Движение.СтатьяОборотов = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КР30");
				Движение.абс_ЦФУ = Справочники.абс_ЦФУ.НайтиПоКоду("ЦФУ7");
			Иначе
				возврат;
			КонецЕсли;
			Движение.Валюта = констВалютаРегУчета;
			// Движение.абс_ТипКонтрагента = СтруктураПараметров.ТипКонтрагента;
			
			Если ВыборкаПроводки.ПодразделениеЦФО = Неопределено Тогда	//абсо по заявке 9344
				
				Если НЕ ПараметрыСеанса.абс_ПользовательДЗО Тогда
					Движение.ЦФО = Справочники.Подразделения.НайтиПоКоду("ЦФО1113");
				Иначе
					Движение.ЦФО = Справочники.Подразделения.НайтиПокоду("ЦФО11009");
				КонецЕсли;
				
			Иначе
				Движение.ЦФО = ВыборкаПроводки.ПодразделениеЦФО;
				
			КонецЕсли;
			
			//Движение.абс_ТипСети = ТекСтрокаУслуги.абс_ТипСети;
			//Движение.абс_ТЭО = ТекСтрокаУслуги.абс_ТЭО;
			//Движение.абс_КВ = ТекСтрокаУслуги.абс_КВ;
			//Движение.абс_ТипРасхода = ТекСтрокаУслуги.абс_ТипРасхода;
			Движение.Организация = ВыборкаПроводки.Организация;
			
			//абс_Стрельцов+ добавлено: 12.09.2012
			//при переносе ПУ
			Движение.Проект = Выборка.Проект;
			//абс_Стрельцов-
			
			Движение.ВалютнаяСумма = ВыборкаПроводки.Сумма;
			Движение.СуммаУпр = Движение.ВалютнаяСумма;
			Движение.СуммаСценария = Движение.СуммаУпр;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроведениеПоБюджетуЗП(ТабДвижений,Документ,Сценарий,СценарийКВПоПоставке,Отказ) 
	
	ТабДвижений.Очистить();
	
	//СценарийОперФакт = Константы.абс_СценарийДляОперФакта.Получить();
	//СтатьяФОТ = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ФОТ");
	ВалютаРег = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для каждого ТекСтр из Документ.ОтражениеВУчете Цикл
		
		Если Найти("20,25,26,44,91",Лев(ТекСтр.СчетДт.Код,2)) > 0 Тогда 
			текСценарий = Сценарий;
			
		ИначеЕсли Найти("08",Лев(ТекСтр.СчетДт.Код,2)) > 0 Тогда 
			текСценарий = СценарийКВПоПоставке;
			
		Иначе
			продолжить;
			
		КонецЕсли;
		
		Движение = ТабДвижений.Добавить();
		Движение.Период = Документ.Дата;
		//Движение.Активность = Истина;
		Движение.Сценарий 				= текСценарий;
		//Движение.СтатьяОборотов 		= СтатьяФОТ;
		
		//Движение.абс_ТипКонтрагента = Документ.Контрагент.абс_ТипыКонтрагентов;
		Движение.абс_ЦФУ 				= ТекСтр.абс_ЦФУ;
		Движение.ЦФО 					= ТекСтр.абс_ЦФО;
		Движение.Организация 			= Документ.Организация;
		
		Движение.СтатьяОборотов			= ТекСтр.абс_СтатьяОборотов;
		
		
		Движение.Валюта 				= ВалютаРег;
		
		Движение.ВалютнаяСумма 			= ТекСтр.Сумма;//?(Документ.СуммаВключаетНДС,ТекСтрокаУслуги.Сумма-ТекСтрокаУслуги.СуммаНДС,ТекСтрокаУслуги.Сумма);
		Движение.СуммаУпр 				= ТекСтр.Сумма;//Движение.ВалютнаяСумма*Документ.КурсВзаиморасчетов;
		Движение.СуммаСценария 			= ТекСтр.Сумма;//Движение.СуммаУпр;
		
		Движение.абс_ТипСети            = ТекСтр.абс_ТипСети;
		
	КонецЦикла;
	
	// Добавим движения по факту
	Если Документ.абс_СтатусДокумента = Перечисления.абс_СтатусБезБП.Завершен Тогда
		
		СценарийФакт = Константы.абс_СценарийДляФакта.Получить();
		СценарийФактКВ = Справочники.СценарииПланирования.НайтиПоНаименованию("КВ по поставке ФАКТ");
		
		ТабДвиженийФакт = ТабДвижений.Скопировать();
		//ТабДвиженийФакт.ЗаполнитьЗначения(СценарийФакт,"Сценарий");
		
		Для каждого СтрокаТаб из ТабДвиженийФакт Цикл
			
			Если СтрокаТаб.Сценарий = Сценарий Тогда
				СтрокаТаб.Сценарий = СценарийФакт;
			Иначе
				СтрокаТаб.Сценарий = СценарийФактКВ;
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СтрокаТабФакт из ТабДвиженийФакт Цикл
			
			НоваяСтрока = ТабДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабФакт);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроведениеПоБюджетуПутевойЛист(ТабДвижений,Документ, Сценарий, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, Счет = &Счет, , , , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Регистратор = &Регистратор";
	Запрос.УстановитьПараметр("Счет",			Документ.СчетБУ);
	Запрос.УстановитьПараметр("Регистратор",	Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Сумма = Выборка.СуммаОборот;
	Иначе
		Сумма = 0;
	КонецЕсли;
	
	Движение = ТабДвижений.Добавить();
	Движение.Период = Документ.Дата;
	//Движение.Активность = Истина;
	ЗаполнитьЗначенияСвойств(Движение, Документ);
	Движение.Сценарий = Сценарий;
	Движение.Номенклатура = Документ.Материалы;
	Движение.СтатьяОборотов = Документ.абс_БюджетнаяСтатья;
	Движение.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Движение.ЦФО = Документ.абс_ЦФО;
	//АБС НАЧАЛО Задача №08759
	Движение.Проект = Документ.Проект;
	//\\АБС КОНЕЦ Задача №08759
	Движение.ВалютнаяСумма = Сумма;
	Движение.СуммаУпр = Движение.ВалютнаяСумма;
	Движение.СуммаСценария = Движение.СуммаУпр;
	
КонецПроцедуры

//АБС+ Тупиков 12897, 22682
//
Процедура ПроведениеКорректировкиРеализацииПоБюджету(ТабДвижений, Документ, Сценарий)
	
	// {{KM WARE Клепиков А.Г. Агентский блок 15.10.2015 начало
	// у Контрагента из справочника "абс_Продавец" нет нужных реквизитов
	// {{Старый код:
	//Если Документ.Услуги.Количество() > 0 Тогда       
	// }}Новый код:
	Если Документ.Услуги.Количество() > 0 И ТипЗнч(Документ.Контрагент) <> Тип("СправочникСсылка.абс_Продавец")Тогда       
		// }}KM WARE Клепиков А.Г. Агентский блок 15.10.2015 окончание
		Для каждого ТекСтрокаУслуги из Документ.Услуги Цикл
			Если ТекСтрокаУслуги.Сумма - ТекСтрокаУслуги.СуммаДоИзменения <> 0 Тогда
				Движение = ТабДвижений.Добавить();
				Движение.Период = Документ.Дата;
				//Движение.Активность = Истина;
				Движение.Сценарий = Сценарий;
				Движение.СтатьяОборотов = ТекСтрокаУслуги.СтатьяОборотов;
				Движение.Валюта = Документ.ВалютаДокумента;
				Движение.Контрагент = Документ.Контрагент;
				Движение.абс_ТипКонтрагента = Документ.Контрагент.абс_ТипыКонтрагентов;
				Движение.абс_ЦФУ = ТекСтрокаУслуги.абс_ЦФУ;
				Движение.ЦФО = ТекСтрокаУслуги.абс_ЦФО;
				Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;		
				Движение.Организация = Документ.Организация;
				Если Документ.СуммаВключаетНДС Тогда
					Движение.ВалютнаяСумма = ТекСтрокаУслуги.Сумма - ТекСтрокаУслуги.СуммаДоИзменения - (ТекСтрокаУслуги.СуммаНДС - ТекСтрокаУслуги.СуммаНДСДоИзменения);
				Иначе
					Движение.ВалютнаяСумма = ТекСтрокаУслуги.Сумма - ТекСтрокаУслуги.СуммаДоИзменения;
				КонецЕсли;
				Движение.СуммаУпр = Движение.ВалютнаяСумма*Документ.КурсВзаиморасчетов;
				Движение.СуммаСценария = Движение.СуммаУпр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Документ.Товары.Количество()>0 Тогда
		
		КонстВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Для каждого ТекСтрокаТовары из Документ.Товары Цикл			
			Если ТекСтрокаТовары.Сумма - ТекСтрокаТовары.СуммаДоИзменения <> 0 Тогда
				Движение = ТабДвижений.Добавить();
				Движение.Период = Документ.Дата;
				//	Движение.Активность = Истина;
				Движение.Сценарий = Сценарий;
				Движение.СтатьяОборотов = ТекСтрокаТовары.СтатьяОборотов;
				Движение.Валюта = КонстВалютаРегУчета;
				Движение.Контрагент = Документ.Контрагент;
				Движение.абс_ТипКонтрагента = Документ.Контрагент.абс_ТипыКонтрагентов;
				
				Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
				
				Движение.абс_ЦФУ = ТекСтрокаТовары.абс_ЦФУ;
				Движение.ЦФО = ТекСтрокаТовары.абс_ЦФО;
				Движение.Организация = Документ.Организация;
				Если Документ.СуммаВключаетНДС Тогда
					Движение.ВалютнаяСумма = ТекСтрокаТовары.Сумма - ТекСтрокаТовары.СуммаДоИзменения - (ТекСтрокаТовары.СуммаНДС - ТекСтрокаТовары.СуммаНДСДоИзменения);
				Иначе
					Движение.ВалютнаяСумма = ТекСтрокаТовары.Сумма - ТекСтрокаТовары.СуммаДоИзменения;
				КонецЕсли;
				Движение.СуммаУпр = Движение.ВалютнаяСумма;
				Движение.СуммаСценария = Движение.СуммаУпр;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
//АБС- Тупиков

Процедура ПроведениеКорректировкиПоступленияПоБюджету(ТабДвижений, Документ, Сценарий)
	
	Если не Константы.ДвиженияПоЛимитамВКорректировкеПоступления.Получить() Тогда
		Возврат;
	КонецЕсли;	
	
	Если Документ.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки и ЗначениеЗаполнено(Документ.ИсправляемыйДокументПоступления) Тогда
		врДатаПоставки = Документ.ИсправляемыйДокументПоступления.Дата;
	ИначеЕсли ЗначениеЗаполнено(Документ.ДокументПоступления) Тогда
		врДатаПоставки = Документ.ДокументПоступления.Дата;
	Иначе	
		Возврат;
	КонецЕсли;	
	
	//+ Машута А. 15.10.2018 задача 765
	#Область СтарыйФунционалЗаполненияДвиженийОборотыБюджетов
	//Если Документ.Услуги.Количество() > 0 Тогда				   
	//	Для каждого ТекСтрокаУслуги из Документ.Услуги Цикл
	//		Если ТекСтрокаУслуги.Сумма - ТекСтрокаУслуги.СуммаДоИзменения <> 0 Тогда
	//			Движение = ТабДвижений.Добавить();
	//			Движение.Период = врДатаПоставки;
	//			//Движение.Активность = Истина;
	//			Движение.Сценарий = Сценарий;
	//			Движение.СтатьяОборотов = ТекСтрокаУслуги.СтатьяОборотов;
	//			Движение.Валюта = Документ.ВалютаДокумента;
	//			Движение.Контрагент = Документ.Контрагент;
	//			Движение.абс_ТипКонтрагента = Документ.Контрагент.абс_ТипыКонтрагентов;
	//			Движение.абс_ЦФУ = ТекСтрокаУслуги.абс_ЦФУ;
	//			Движение.ЦФО = ТекСтрокаУслуги.абс_ЦФО;
	//			Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;		
	//			Движение.Организация = Документ.Организация;
	//			Если Документ.СуммаВключаетНДС Тогда
	//				Движение.ВалютнаяСумма = ТекСтрокаУслуги.Сумма - ТекСтрокаУслуги.СуммаДоИзменения - (ТекСтрокаУслуги.СуммаНДС - ТекСтрокаУслуги.СуммаНДСДоИзменения);
	//			Иначе
	//				Движение.ВалютнаяСумма = ТекСтрокаУслуги.Сумма - ТекСтрокаУслуги.СуммаДоИзменения;
	//			КонецЕсли;
	//			Движение.СуммаУпр = Движение.ВалютнаяСумма*Документ.КурсВзаиморасчетов;
	//			Движение.СуммаСценария = Движение.СуммаУпр;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//Если Документ.Товары.Количество()>0 Тогда  		
	//	КонстВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	//	Для каждого ТекСтрокаТовары из Документ.Товары Цикл			
	//		Если ТекСтрокаТовары.Сумма - ТекСтрокаТовары.СуммаДоИзменения <> 0 Тогда
	//			Движение = ТабДвижений.Добавить();
	//			Движение.Период = врДатаПоставки;
	//			//Движение.Активность = Истина;
	//			Движение.Сценарий = Сценарий;
	//			Движение.СтатьяОборотов = ТекСтрокаТовары.СтатьяОборотов;
	//			Движение.Валюта = КонстВалютаРегУчета;
	//			Движение.Контрагент = Документ.Контрагент;
	//			Движение.абс_ТипКонтрагента = Документ.Контрагент.абс_ТипыКонтрагентов; 				
	//			Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента; 				
	//			Движение.абс_ЦФУ = ТекСтрокаТовары.абс_ЦФУ;
	//			Движение.ЦФО = ТекСтрокаТовары.абс_ЦФО;
	//			Движение.Организация = Документ.Организация;
	//			Если Документ.СуммаВключаетНДС Тогда
	//				Движение.ВалютнаяСумма = ТекСтрокаТовары.Сумма - ТекСтрокаТовары.СуммаДоИзменения - (ТекСтрокаТовары.СуммаНДС - ТекСтрокаТовары.СуммаНДСДоИзменения);
	//			Иначе
	//				Движение.ВалютнаяСумма = ТекСтрокаТовары.Сумма - ТекСтрокаТовары.СуммаДоИзменения;
	//			КонецЕсли;
	//			Движение.СуммаУпр = Движение.ВалютнаяСумма;
	//			Движение.СуммаСценария = Движение.СуммаУпр;
	//		КонецЕсли;
	//	КонецЦикла;   		
	//КонецЕсли;
	#КонецОбласти
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка,
	|	КорректировкаПоступления.Контрагент,
	|	КорректировкаПоступления.ДоговорКонтрагента,
	|	КорректировкаПоступления.Организация,
	|	КорректировкаПоступления.Контрагент.абс_ТипыКонтрагентов КАК абс_ТипКонтрагента,
	|	КорректировкаПоступления.ВалютаДокумента,
	|	КорректировкаПоступления.СуммаВключаетНДС
	|ПОМЕСТИТЬ ВТ_ДокументКорректировки
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументКорректировки.Ссылка,
	|	ВТ_ДокументКорректировки.Контрагент,
	|	ВТ_ДокументКорректировки.ДоговорКонтрагента,
	|	ВТ_ДокументКорректировки.Организация,
	|	ВТ_ДокументКорректировки.абс_ТипКонтрагента,
	|	ВТ_ДокументКорректировки.ВалютаДокумента КАК Валюта,
	|	КорректировкаПоступленияТовары.СтатьяОборотов,
	|	КорректировкаПоступленияТовары.абс_ЦФО КАК ЦФО,
	|	КорректировкаПоступленияТовары.абс_ЦФУ КАК абс_ЦФУ,
	|	КорректировкаПоступленияТовары.ttk_ОбъектБюджетирования,
	|	КорректировкаПоступленияТовары.ttk_КВ КАК абс_КВ,
	|	КорректировкаПоступленияТовары.ttk_ТЭО КАК абс_ТЭО,
	|	КорректировкаПоступленияТовары.абс_ЗакупочныйЗаказТЧ,
	|	ЕСТЬNULL(КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения - ВЫБОР
	|			КОГДА ВТ_ДокументКорректировки.СуммаВключаетНДС = ИСТИНА
	|				ТОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения
	|			ИНАЧЕ 0
	|		КОНЕЦ, 0) КАК СуммаКорректировки
	|ИЗ
	|	ВТ_ДокументКорректировки КАК ВТ_ДокументКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|		ПО ВТ_ДокументКорректировки.Ссылка = КорректировкаПоступленияТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДокументКорректировки.Ссылка,
	|	ВТ_ДокументКорректировки.Контрагент,
	|	ВТ_ДокументКорректировки.ДоговорКонтрагента,
	|	ВТ_ДокументКорректировки.Организация,
	|	ВТ_ДокументКорректировки.абс_ТипКонтрагента,
	|	&ВалютаРегламентированногоУчета,
	|	КорректировкаПоступленияУслуги.СтатьяОборотов,
	|	КорректировкаПоступленияУслуги.абс_ЦФО,
	|	КорректировкаПоступленияУслуги.абс_ЦФУ,
	|	КорректировкаПоступленияУслуги.ttk_ОбъектБюджетирования,
	|	КорректировкаПоступленияУслуги.ttk_КВ,
	|	КорректировкаПоступленияУслуги.ttk_ТЭО,
	|	КорректировкаПоступленияУслуги.абс_ЗакупочныйЗаказТЧ,
	|	ЕСТЬNULL(КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения - ВЫБОР
	|			КОГДА ВТ_ДокументКорректировки.СуммаВключаетНДС = ИСТИНА
	|				ТОГДА КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения
	|			ИНАЧЕ 0
	|		КОНЕЦ, 0)
	|ИЗ
	|	ВТ_ДокументКорректировки КАК ВТ_ДокументКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступленияУслуги
	|		ПО ВТ_ДокументКорректировки.Ссылка = КорректировкаПоступленияУслуги.Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаКорректировки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение 				= ТабДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.Период 		= врДатаПоставки;
		Движение.Сценарий 		= Сценарий;
		Движение.ВалютнаяСумма	= Выборка.СуммаКорректировки;
		Движение.СуммаУпр 		= Движение.ВалютнаяСумма;
		Движение.СуммаСценария 	= Движение.СуммаУпр;
		
	КонецЦикла;
	//- Машута А. 15.10.2018 задача 765
	
КонецПроцедуры

Функция ПровестиППИПоКВПоОплате(ТабДвижений, Документ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ.ПлатежноеПоручениеИсходящее) КАК ППИ,
	|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ППИЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			СчетКт В (ЗНАЧЕНИЕ(Плансчетов.хозрасчетный.Расчетныесчета), ЗНАЧЕНИЕ(Плансчетов.хозрасчетный.ВалютныеСчета))
	|				И Регистратор = &ДокументСсылка,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ.ПлатежноеПоручениеИсходящее)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_СчетНаОплатуОплаты.Ссылка КАК СчетНаОплату,
	|	абс_СчетНаОплатуОплаты.ЗРС,
	|	абс_СчетНаОплатуОплаты.ЦФО,
	|	абс_СчетНаОплатуОплаты.ЦФУ,
	|	абс_СчетНаОплатуОплаты.БюджетнаяСтатья,
	|	абс_СчетНаОплатуОплаты.ТипСети,
	|	абс_СчетНаОплатуОплаты.КВ,
	|	абс_СчетНаОплатуОплаты.ТЭО,
	|	абс_СчетНаОплатуОплаты.ТипКонтрагента,
	|	абс_СчетНаОплатуОплаты.ТипРасхода,
	|	абс_СчетНаОплатуОплаты.Ссылка.Организация,
	|	абс_СчетНаОплатуОплаты.ПлатежноеПоручение,
	|	СУММА(абс_СчетНаОплатуОплаты.ВалютнаяСумма) КАК СуммаОплаты
	|ПОМЕСТИТЬ АналитикаСчетовКВПоПоставке
	|ИЗ
	|	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	|ГДЕ
	|	абс_СчетНаОплатуОплаты.БюджетнаяСтатья = &КВПоПоставке
	|	И абс_СчетНаОплатуОплаты.ПлатежноеПоручение = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_СчетНаОплатуОплаты.ПлатежноеПоручение,
	|	абс_СчетНаОплатуОплаты.ТипРасхода,
	|	абс_СчетНаОплатуОплаты.ТипКонтрагента,
	|	абс_СчетНаОплатуОплаты.ТЭО,
	|	абс_СчетНаОплатуОплаты.КВ,
	|	абс_СчетНаОплатуОплаты.ТипСети,
	|	абс_СчетНаОплатуОплаты.БюджетнаяСтатья,
	|	абс_СчетНаОплатуОплаты.ЦФУ,
	|	абс_СчетНаОплатуОплаты.ЦФО,
	|	абс_СчетНаОплатуОплаты.ЗРС,
	|	абс_СчетНаОплатуОплаты.Ссылка,
	|	абс_СчетНаОплатуОплаты.Ссылка.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ППИЗаПериод.ППИ,
	|	ППИЗаПериод.Сумма,
	|	АналитикаСчетовКВПоПоставке.СчетНаОплату,
	|	АналитикаСчетовКВПоПоставке.ЗРС,
	|	АналитикаСчетовКВПоПоставке.ЦФО,
	|	АналитикаСчетовКВПоПоставке.ЦФУ,
	|	АналитикаСчетовКВПоПоставке.БюджетнаяСтатья,
	|	АналитикаСчетовКВПоПоставке.ТипСети,
	|	АналитикаСчетовКВПоПоставке.КВ,
	|	АналитикаСчетовКВПоПоставке.ТЭО,
	|	АналитикаСчетовКВПоПоставке.ТипКонтрагента,
	|	АналитикаСчетовКВПоПоставке.ТипРасхода,
	|	АналитикаСчетовКВПоПоставке.Организация,
	|	АналитикаСчетовКВПоПоставке.СуммаОплаты
	|ИЗ
	|	ППИЗаПериод КАК ППИЗаПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикаСчетовКВПоПоставке КАК АналитикаСчетовКВПоПоставке
	|		ПО ППИЗаПериод.ППИ = АналитикаСчетовКВПоПоставке.ПлатежноеПоручение");
	
	СтатьяКВПоПоставке = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВПоПост");
	СценарийКВПоОплатеЗадолженность = Константы.абс_СценарийКВПоОплатеЗадолженность.Получить();
	
	Запрос.УстановитьПараметр("КВПоПоставке", Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВПоПост"));
	Запрос.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
	
	ТабАналитики = Запрос.Выполнить().Выгрузить();
	Если ТабАналитики.Количество()=0 Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	ТабАналитики.Колонки.Добавить("СуммаПоБюджету");
	ТабАналитики.ЗагрузитьКолонку(ttk_ОбщегоНазначения.РаспределитьПропорционально(ТабАналитики[0].Сумма,ТабАналитики.ВыгрузитьКолонку("СуммаОплаты")),"СуммаПоБюджету");
	
	констВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	//Пока Выборка.Следующий() Цикл
	Для Каждого Выборка Из ТабАналитики Цикл	
		Если  НЕ Выборка.БюджетнаяСтатья = СтатьяКВПоПоставке Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = ТабДвижений.Добавить();
		Движение.Период = Выборка.ППИ.Дата;
		Движение.Активность = Истина;
		Движение.Сценарий = СценарийКВПоОплатеЗадолженность;
		Движение.СтатьяОборотов = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВПоПост");
		Движение.Валюта = констВалютаРегУчета;
		Движение.Контрагент =  Выборка.ППИ.Контрагент;
		Движение.абс_ТипКонтрагента = Выборка.ТипКонтрагента;
		Движение.абс_ЦФУ = Выборка.ЦФУ;
		Движение.ЦФО = Выборка.ЦФО;
		Движение.Организация = Выборка.Организация;
		Движение.абс_ТипСети = Выборка.ТипСети;
		Движение.абс_ТЭО = Выборка.ТЭО;
		Движение.абс_КВ = Выборка.КВ;
		Движение.абс_ТипРасхода = Выборка.ТипРасхода;
		
		//Движение.ВалютнаяСумма = Выборка.Сумма;
		Движение.СуммаУпр = Выборка.СуммаПоБюджету;
		Движение.СуммаСценария = Выборка.СуммаПоБюджету;
		
	КонецЦикла;
	
	Возврат ТабДвижений.Количество() > 0;
	
КонецФункции

Процедура ПроведениеПоРегиструБюджетирования(Источник,Отказ, РежимПроведения) Экспорт
	
	//НФС 2018
	//Крамаренко Д.М.
	//временно отключено
	Документ = Источник.Ссылка;
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.ОперацияБух") Тогда
		Возврат;
	КонецЕсли;
	
	// АБС ВСТАВКА 
	// Исключение документа Отражение зп в регл. учете из подписки в зависимости от статуса
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ОтражениеЗарплатыВРеглУчете") И Источник.абс_Статус <> Перечисления.абс_СтатусыРасчетныхДокументов.Рассчитан Тогда
		Возврат;
	КонецЕсли;
	// АБС ВСТАВКА КОНЕЦ
	
	// Если это ссылка на документ
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник)) Тогда
		Движения = РегистрыНакопления.ОборотыБюджетов.СоздатьНаборЗаписей();
		Движения.Отбор.Регистратор.Установить(Источник);
		ДвиженияБУ = Неопределено;
	Иначе
		// Если это объект
		Движения = Источник.Движения.ОборотыБюджетов;
		ДвиженияБУ = Источник.Движения.Хозрасчетный;
	КонецЕсли;
	
	ТабДвижений = Движения.Выгрузить();
	ТабДвижений.Очистить();
	
	Документ = Источник.Ссылка;
	
	
	// АБС ИЗМЕНЕНО Фролов 20120702
	// Для перехода на новые сценарии разделим сценарии по организациям
	Организация = Неопределено;
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Организация") = Неопределено Тогда
		Организация = Источник.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураСценариев = ПолучитьСтруктуСценариевПоОрганизации(Организация);
		
		Сценарий = СтруктураСценариев.СценарийОперФакт;
		СценарийФакт = Структурасценариев.СценарийФакт;		
		
	Иначе
		
		Сценарий = константы.абс_СценарийДляОперФакта.Получить();
		СценарийФакт = Константы.абс_СценарийДляФакта.Получить();
		
	КонецЕсли;	
	// АБС ИЗМЕНЕНО Фролов 20120702 КОНЕЦ
	
	КонстСценарийКВПоПоставке = Константы.абс_СценарийКВПоПоставке.Получить();
	
	ЭтоРБП = Неопределено;
	ЭтоКВ = Неопределено;
	
	//Сначала все документы без статусов
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеРасходовБудущихПериодов") Тогда
		//здесь будет код проведения по регистрам бюджетов
		ПроведениеПоБюджетуРБП(ТабДвижений,Документ,Сценарий);
		ДокументЗавершен = истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходыНаДобровольноеСтрахование") Тогда	
		//и здесь будет код проведения по регистрам бюджетов
		ПроведениеПоБюджетуДМС(ТабДвижений,Документ,Сценарий);
		ДокументЗавершен = истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтражениеЗарплатыВРеглУчете") Тогда
		//здесь тоже будет код проведения по регистрам бюджетов
		ПроведениеПоБюджетуЗП(ТабДвижений,Документ,Сценарий,КонстСценарийКВПоПоставке,Отказ);
		//ДокументЗавершен = истина;
		ДокументЗавершен = Ложь;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		//здесь будет код проведения по регистрам бюджетов
		ПроведениеПоБюджетуАктОбОказанииПроизводственныхУслуг(ТабДвижений,Документ,Сценарий, Отказ);
		ДокументЗавершен = истина;
		//НФС 2018
		//Крамаренко Д.М. проверить движения документа
		//сделать
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АмортизацияОС") Тогда
		//здесь будет код проведения по регистрам бюджетов
		ПроведениеПоБюджетуАмортизацияОС(ТабДвижений,Документ,Сценарий,Источник);
		ДокументЗавершен = истина;
		//НФС 2018
		//Крамаренко Д.М. проверить движения документа
		//сделать
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.абс_ПутевойЛист") Тогда
		//здесь будет код проведения по регистрам бюджетов
		ПроведениеПоБюджетуПутевойЛист(ТабДвижений,Документ,Сценарий, Отказ);
		ДокументЗавершен = истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		//здесь будет код проведения по регистрам бюджетов
		ТабДвиженийБУ = Неопределено;
		Если НЕ (ДвиженияБУ = Неопределено) Тогда
			ТабДвиженийБУ = ДвиженияБУ.Выгрузить();
		КонецЕсли;		 
		//АБС ВСТАВКА №44818 НАЧАЛО «19 июня 2014 г.», Пополитов
		абс_БюджетированиеПривилегированный.ПровестиДляОтчета(ТабДвижений, ТабДвиженийБУ, Документ);
		//\\АБС ВСТАВКА №44818 КОНЕЦ 		
		ДокументЗавершен = истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное") Тогда
		//здесь будет код проведения по регистрам бюджетов  
		ТабДвиженийБУ = Неопределено;
		Если НЕ (ДвиженияБУ = Неопределено) Тогда
			ТабДвиженийБУ = ДвиженияБУ.Выгрузить();
		КонецЕсли;
		
		//АБС ВСТАВКА №44818 НАЧАЛО «19 июня 2014 г.», Пополитов
		абс_БюджетированиеПривилегированный.ПровестиДляОтчета(ТабДвижений, ТабДвиженийБУ, Документ);
		//\\АБС ВСТАВКА №44818 КОНЕЦ 
		
		ДокументЗавершен = истина;
		// +++ввв 27.06.2017 г.			
	ИначеЕсли ТипЗнч(Документ)=Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		Если Документ.kmw_Статус <> Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Проведен Тогда
			Возврат;
		КонецЕсли;
		//НФС 2018
		//Крамаренко Д.М. проверить движения документа
		//сделать	
		абс_БюджетированиеПривилегированный.ПроведениеПоБюджетуОтчетКомиссионераОПродажах(ТабДвижений, Документ, Сценарий,Отказ);
		ДокументЗавершен = истина;
		// ---ввв 27.06.2017 г.
		//НФС 2018
		//Крамаренко Д.М.
		//Проверить выпадающие документы
		//сделать
	ИначеЕсли НЕ ПолучитьСписокПрочихТиповБюджетныхДокументов().НайтиПоЗначению(ТипЗнч(Документ)) = Неопределено Тогда
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		// АБС ВСТАВКА ПОПОВ ФРОЛОВ
		Если НЕ Документ.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено Тогда
			Если НЕ Документ.ОтражатьВБухгалтерскомУчете Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		// АБС ВСТАВКА ПОПОВ ФРОЛОВ КОНЕЦ
		
		//АБС ВСТАВКА №44754 НАЧАЛО «18 июня 2014 г.», Пополитов
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Документ)) Тогда  
			//\\АБС ВСТАВКА №44754 КОНЕЦ			
			НаборХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей(); 			
			НаборХозрасчетный.Отбор.Регистратор.Установить(Документ);
			НаборХозрасчетный.Прочитать();      			
			ТабПроводокБУ = НаборХозрасчетный.Выгрузить();		
			
			Если не ЗначениеЗаполнено(ТабПроводокБУ) Тогда
				//АБС ВСТАВКА №45227 15.07.14 Добавлено условие "Если Источник является объектом Тогда"
				Если НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник)) Тогда
					ТабПроводокБУ = Источник.Движения.Хозрасчетный.Выгрузить();
				КонецЕсли;
			КонецЕсли;
		Иначе 
			//АБС ВСТАВКА №45227 15.07.14 Добавлено условие "Если Источник является объектом Тогда"
			Если НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник)) Тогда
				ТабПроводокБУ = Источник.Движения.Хозрасчетный.Выгрузить();   
			КонецЕсли;
		КонецЕсли;
		
		ЭтоППИПоКВ = Ложь;
		
		ЭтоПринятиеКВ = Ложь;
		
		ДоходыПрошлыхЛет = Ложь;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			ЭтоППИПоКВ = абс_БюджетированиеПривилегированный.ПровестиППИПоКВПоОплате(ТабДвижений, ТабПроводокБУ, Документ);
		КонецЕсли;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") 
			или ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
			или ТипЗнч(Документ) = Тип("ДокументСсылка.ПереоценкаВалютныхСредств") 
			или ТипЗнч(Документ) = Тип("ДокументСсылка.ОперацияБух")  Тогда
			абс_БюджетированиеПривилегированный.ПровестиДляОтчета(ТабДвижений, ТабПроводокБУ, Документ);
		КонецЕсли;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПринятиеКУчетуОС") ИЛИ
			ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") ИЛИ
			ТипЗнч(Документ) = Тип("ДокументСсылка.МодернизацияОС") Тогда
			ЭтоПринятиеКВ = Истина;
		КонецЕсли;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОперацияБух") И     //АБС Коломиец начало
			Документ.Метаданные().Реквизиты.Найти("абс_ДоходыПрошлыхЛет")<>Неопределено И	
			Документ.абс_ДоходыПрошлыхЛет Тогда
			Сценарий = Константы.абс_СценарийУбыткиПрошлыхЛет.Получить();
			ДоходыПрошлыхЛет = Истина;                                  //АБС Коломиец конец
		КонецЕсли;
		
		Если ЭтоПринятиеКВ Тогда
			//НФС 2018
			//Крамаренко Д.М.
			//проверить движения документов
			//сделать
			абс_БюджетированиеПривилегированный.ПроведениеПоБюджетуПрочихДокументовПринятиеКВ(ТабДвижений,Документ, Сценарий,Отказ);
			
			ДокументЗавершен = Ложь;
			
		ИначеЕсли ДоходыПрошлыхЛет Тогда  //АБС Коломиец начало
			
			ПроведениеПоБюджетуПрочихДокументовДоходыПрошлыхЛет(ТабДвижений,Документ, Сценарий,Отказ);
			ДокументЗавершен = Ложь;      //АБС Коломиец конец
			
		ИначеЕсли НЕ ЭтоППИПоКВ Тогда
			
			// +++ввв 07.09.2016 г.
			абс_БюджетированиеПривилегированный.ПроведениеПоБюджетуПрочихДокументов(ТабДвижений, ТабПроводокБУ ,Документ, Сценарий,Отказ);
			// ---ввв 07.09.2016 г.
			
			ДокументЗавершен = Истина;			
			
		Иначе
			
			ДокументЗавершен = Ложь;
		КонецЕсли;
		
		// {{KM WARE Погорелов В.М. Заявка № 08.10.2015 начало
		// Добавление движений для документа ПеремещениеТоваров
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ Документ.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено Тогда
			Если НЕ Документ.ОтражатьВБухгалтерскомУчете Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		абс_БюджетированиеПривилегированный.ПроведениеПоБюджетуПеремещениеТоваров(ТабДвижений, Документ, Отказ);
		
		ДокументЗавершен = Ложь;
		
		// }}KM WARE Погорелов В.М. Заявка № 08.10.2015 окончание
		
	Иначе
		//Документы, имеющие статусы	
		//проверим статус
		Если Документ.Метаданные().Реквизиты.Найти("абс_Статус")<>Неопределено Тогда
			Если Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка или
				Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ или
				Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеОФК или
				Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией Тогда
				
				возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ПроведениеПоБюджетуРТиУ(ТабДвижений,Документ, Сценарий, Отказ);			
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
			ПроведениеПоБюджетуТН(ТабДвижений,Документ,Сценарий);						
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") или
			ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			ТекСценарий = Сценарий;
			
			Если Документ.абс_ЗакупочныйЗаказ.РасходыБудущихПериодов Тогда
				ТекСценарий = Константы.абс_СценарийДляРБП.Получить();
				
				ЭтоРБП = Истина;
			КонецЕсли;			
			
			Если Документ.абс_ЗакупочныйЗаказ.БюджетнаяСтатья = Справочники.СтатьиОборотовПоБюджетам.НайтиПоНаименованию("Единая статья КВ") Тогда
				ТекСценарий = КонстСценарийКВПоПоставке;
				
				ЭтоКВ = Истина;
			КонецЕсли;
			
			//АБС ВСТАВКА 46344  23.10.2014 18:42:06  Шамов
			ЭтоУбыткиПрошлыхЛет = ЛОЖЬ;
			Если Документ.абс_ЗакупочныеЗаказы.Количество() > 0 Тогда
				абс_ЗакупочныйЗаказТЧ = Документ.абс_ЗакупочныеЗаказы[0].абс_ЗакупочныйЗаказТЧ;
				ЭтоУбыткиПрошлыхЛет = абс_ЗакупочныйЗаказТЧ.УбыткиПрошлыхЛет;
			КонецЕсли;
			Если НЕ ЭтоУбыткиПрошлыхЛет 
				ИЛИ Документ.Организация <> ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК Тогда
				//АБС ВСТАВКА 46344 КОНЕЦ
				Если ЭтоКВ = Истина Тогда
					ПроведениеПоБюджетуПТиУ_АО_КВ(ТабДвижений,Документ,ТекСценарий, Отказ);
				Иначе
					ПроведениеПоБюджетуПТиУ_АО(ТабДвижений,Документ,ТекСценарий, Отказ);
				КонецЕсли;
				//АБС ВСТАВКА 46344  23.10.2014 18:42:06  Шамов
			КонецЕсли;
			//АБС ВСТАВКА 46344 КОНЕЦ
			//***** Проектный учет. Гетц. Проведение по движениям ДДС зачета аванса (13.06.2013)
			ТабДвиженийДДС = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Документ, РегистрыНакопления.абс_ДДСПоПроектам, Истина);
			Если Не ТабДвиженийДДС = Неопределено Тогда 
				ТабДвиженийДДС = ТабДвиженийДДС.Выгрузить();
				ТабДвиженийДДС.Очистить();
				Результат = абс_БюджетированиеПривилегированный.ПровестиПТиУПоДДСПоПроектам(Документ, ТабДвиженийДДС, ТабДвижений);
				Если Результат Тогда 
					ПолныеПрава.ЗаписатьНаборЗаписейНаСервере("абс_ДДСПоПроектам", Документ.Ссылка, ТабДвиженийДДС,,Отказ);		
				КонецЕсли;
			КонецЕсли;
			//***** Проектный учет. Гетц.
			//АБС+ Тупиков 12897, 22682
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ПроведениеКорректировкиРеализацииПоБюджету(ТабДвижений, Документ, Сценарий);
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			ПроведениеКорректировкиПоступленияПоБюджету(ТабДвижений, Документ, Сценарий);			
			//\\АБС-
			
		КонецЕсли;
		
		Если Документ.Метаданные().Реквизиты.Найти("абс_Статус")<>Неопределено Тогда
			
			ДокументЗавершен =  (Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
			
			Если Документ.Метаданные().Реквизиты.Найти("абс_ДоходыПрошлыхЛет")<>Неопределено Тогда
				
				Если Документ.абс_ДоходыПрошлыхЛет Тогда
					
					ДокументЗавершен = Ложь;
					
				КонецЕсли;		
			КонецЕсли;
			
			// АБС ВСТАВКА АБС-Ф 20111212 По РБП пли по КВ не нужно формировать движения по факту
			//  по РБП и по КВ движения отражаются в соответствующих сценариях
			Если ЭтоРБП = Истина ИЛИ ЭтоКВ = Истина Тогда
				ДокументЗавершен = Ложь;
			КонецЕсли;
			
			// 2011.07.01 В корректировке не отражается факт.
			// ИЛИ (Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.КорректировкаДокумента);
			
			//АБС+ Тупиков 12897	
		ИначеЕсли
			Документ.Метаданные().Реквизиты.Найти("абс_СтатусДокумента") <> Неопределено Тогда
			ДокументЗавершен = (Документ.абс_СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
			//АБС- Тупиков
			
		Иначе
			ДокументЗавершен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//Сторчевой А.Н. 05.12.2017 НФС 2018 {ТабДвижений.Свернуть("Период,Сценарий, Проект, Контрагент, ДоговорКонтрагента, Номенклатура,СтатьяОборотов,ЦФО,Валюта, абс_ЦФУ, абс_ТипКонтрагента, Организация, абс_ТипСети,абс_КВ,абс_ТЭО,абс_ТипРасхода, абс_СчетБУ","ВалютнаяСумма,СуммаУпр,СуммаСценария");
	КолонкиГруппировки = "Период,Сценарий, Проект, Контрагент, ДоговорКонтрагента, Номенклатура,СтатьяОборотов,ЦФО,Валюта, абс_ЦФУ, абс_ТипКонтрагента, Организация, абс_ТипСети,абс_КВ,абс_ТЭО,абс_ТипРасхода, абс_СчетБУ, ttk_ОбъектБюджетирования, ttk_Город";
	КолонкиИтогов = "ВалютнаяСумма,СуммаУпр,СуммаСценария";
	ТабДвижений.Свернуть(КолонкиГруппировки,КолонкиИтогов);
	// } Сторчевой А.Н. 05.12.2017 НФС 2018
	//АБС НАЧАЛО Задача №08759
	СценарийПоТипуДокумента = ПолучитьСценарийПоТипуДокумента(Документ);
	Если НЕ СценарийПоТипуДокумента.Пустая() Тогда
		//то же самое, но по другому сценарию
		КонстСценарийДляРБП = Константы.абс_СценарийДляРБП.Получить();
		КонстСценарийДляДДСБУ = Константы.абс_СценарийДДСБУ.Получить();
		
		НоваяТабДвижений = ТабДвижений.Скопировать();
		НоваятабДвижений.ЗаполнитьЗначения(СценарийПоТипуДокумента,"Сценарий");
		Для каждого СтрокаНоваяТаб из НоваяТабДвижений Цикл
			
			НоваяСтрока = ТабДвижений.Добавить();  
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНоваяТаб);
			
		КонецЦикла;
		
	КонецЕсли;
	//\\АБС КОНЕЦ Задача №08759
	
	Если ДокументЗавершен Тогда
		//то же самое, но по другому сценарию
		//АБС НАЧАЛО Задача №08759
		Если НоваяТабДвижений=Неопределено Тогда 
			НоваяТабДвижений =  ТабДвижений.Скопировать();
		КонецЕсли;
		//\\АБС КОНЕЦ Задача №08759
		НоваятабДвижений.ЗаполнитьЗначения(СценарийФакт,"Сценарий");
		Для каждого СтрокаНоваяТаб из НоваяТабДвижений Цикл
			
			НоваяСтрока = ТабДвижений.Добавить();  
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНоваяТаб);
			
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") или
				ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				
				ЭтоРБП = Документ.абс_ЗакупочныйЗаказ.РасходыБудущихПериодов;
				
				Если ЭтоРБП Тогда
					НоваяСтрока.Сценарий = Константы.абс_СценарийДляРБП.Получить();
				КонецЕсли;
				
			КонецЕсли; 
			
			//АБС НАЧАЛО Задача №08759
			Если НЕ СценарийПоТипуДокумента.Пустая() Тогда
				НоваяСтрока = ТабДвижений.Добавить();  
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНоваяТаб);
				
				НоваяСтрока.Сценарий = СценарийПоТипуДокумента;
			КонецЕсли;
			//\\АБС КОНЕЦ Задача №08759		
		КонецЦикла;
		
	КонецЕсли;
	
	ПолныеПрава.ЗаписатьНаборЗаписейНаСервере("ОборотыБюджетов", Документ.Ссылка, ТабДвижений,,Отказ);		
	
КонецПроцедуры
//ххх Брель Виктор Андреевич 23.03.2018 11:38:46, заявка <<<
// Скопирован модуль подписки
//абс_ПроведениеДокументовПоРегиструОборотыБюджетов
Процедура ПроведениеПоРегиструБюджетирования_ВФОНЕ(Источник,Отказ)Экспорт
	
	// АБС ВСТАВКА 
	// Исключение документа Отражение зп в регл. учете из подписки в зависимости от статуса
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ОтражениеЗарплатыВРеглУчете") И Источник.абс_Статус <> Перечисления.абс_СтатусыРасчетныхДокументов.Рассчитан Тогда
		Возврат;
	КонецЕсли;
	// АБС ВСТАВКА КОНЕЦ
	
	// Если это ссылка на документ
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник)) Тогда
		Движения = РегистрыНакопления.ОборотыБюджетов.СоздатьНаборЗаписей();
		Движения.Отбор.Регистратор.Установить(Источник);
		ДвиженияБУ = Неопределено;
	Иначе
		// Если это объект
		Движения = Источник.Движения.ОборотыБюджетов;
		ДвиженияБУ = Источник.Движения.Хозрасчетный;
	КонецЕсли;
	
	ТабДвижений = Движения.Выгрузить();
	ТабДвижений.Очистить();
	
	Документ = Источник.Ссылка;
	
	
	// АБС ИЗМЕНЕНО Фролов 20120702
	// Для перехода на новые сценарии разделим сценарии по организациям
	Организация = Неопределено;
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Организация") = Неопределено Тогда
		Организация = Источник.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураСценариев = ПолучитьСтруктуСценариевПоОрганизации(Организация);
		
		Сценарий = СтруктураСценариев.СценарийОперФакт;
		СценарийФакт = Структурасценариев.СценарийФакт;		
		
	Иначе
		
		Сценарий = константы.абс_СценарийДляОперФакта.Получить();
		СценарийФакт = Константы.абс_СценарийДляФакта.Получить();
		
	КонецЕсли;	
	// АБС ИЗМЕНЕНО Фролов 20120702 КОНЕЦ
	
	КонстСценарийКВПоПоставке = Константы.абс_СценарийКВПоПоставке.Получить();
	
	ЭтоРБП = Неопределено;
	ЭтоКВ = Неопределено;
	
	//Сначала все документы без статусов
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеРасходовБудущихПериодов") Тогда
		//здесь будет код проведения по регистрам бюджетов
		ПроведениеПоБюджетуРБП(ТабДвижений,Документ,Сценарий);
		ДокументЗавершен = истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходыНаДобровольноеСтрахование") Тогда	
		//и здесь будет код проведения по регистрам бюджетов
		ПроведениеПоБюджетуДМС(ТабДвижений,Документ,Сценарий);
		ДокументЗавершен = истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтражениеЗарплатыВРеглУчете") Тогда
		//здесь тоже будет код проведения по регистрам бюджетов
		ПроведениеПоБюджетуЗП(ТабДвижений,Документ,Сценарий,КонстСценарийКВПоПоставке,Отказ);
		//ДокументЗавершен = истина;
		ДокументЗавершен = Ложь;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		//здесь будет код проведения по регистрам бюджетов
		ПроведениеПоБюджетуАктОбОказанииПроизводственныхУслуг(ТабДвижений,Документ,Сценарий, Отказ);
		ДокументЗавершен = истина;
		//НФС 2018
		//Крамаренко Д.М. проверить движения документа
		//сделать
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АмортизацияОС") Тогда
		//здесь будет код проведения по регистрам бюджетов
		ПроведениеПоБюджетуАмортизацияОС(ТабДвижений,Документ,Сценарий,Источник);
		ДокументЗавершен = истина;
		//НФС 2018
		//Крамаренко Д.М. проверить движения документа
		//сделать
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.абс_ПутевойЛист") Тогда
		//здесь будет код проведения по регистрам бюджетов
		ПроведениеПоБюджетуПутевойЛист(ТабДвижений,Документ,Сценарий, Отказ);
		ДокументЗавершен = истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		//здесь будет код проведения по регистрам бюджетов
		ТабДвиженийБУ = Неопределено;
		Если НЕ (ДвиженияБУ = Неопределено) Тогда
			ТабДвиженийБУ = ДвиженияБУ.Выгрузить();
		КонецЕсли;		 
		//АБС ВСТАВКА №44818 НАЧАЛО «19 июня 2014 г.», Пополитов
		абс_БюджетированиеПривилегированный.ПровестиДляОтчета(ТабДвижений, ТабДвиженийБУ, Документ);
		//\\АБС ВСТАВКА №44818 КОНЕЦ 		
		ДокументЗавершен = истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное") Тогда
		//здесь будет код проведения по регистрам бюджетов  
		ТабДвиженийБУ = Неопределено;
		Если НЕ (ДвиженияБУ = Неопределено) Тогда
			ТабДвиженийБУ = ДвиженияБУ.Выгрузить();
		КонецЕсли;
		
		//АБС ВСТАВКА №44818 НАЧАЛО «19 июня 2014 г.», Пополитов
		абс_БюджетированиеПривилегированный.ПровестиДляОтчета(ТабДвижений, ТабДвиженийБУ, Документ);
		//\\АБС ВСТАВКА №44818 КОНЕЦ 
		
		ДокументЗавершен = истина;
		// +++ввв 27.06.2017 г.			
	ИначеЕсли ТипЗнч(Документ)=Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		Если Документ.kmw_Статус <> Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Проведен Тогда
			Возврат;
		КонецЕсли;
		//НФС 2018
		//Крамаренко Д.М. проверить движения документа
		//сделать	
		абс_БюджетированиеПривилегированный.ПроведениеПоБюджетуОтчетКомиссионераОПродажах(ТабДвижений, Документ, Сценарий,Отказ);
		ДокументЗавершен = истина;
		// ---ввв 27.06.2017 г.
		//НФС 2018
		//Крамаренко Д.М.
		//Проверить выпадающие документы
		//сделать
	ИначеЕсли НЕ ПолучитьСписокПрочихТиповБюджетныхДокументов().НайтиПоЗначению(ТипЗнч(Документ)) = Неопределено Тогда
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		// АБС ВСТАВКА ПОПОВ ФРОЛОВ
		Если НЕ Документ.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено Тогда
			Если НЕ Документ.ОтражатьВБухгалтерскомУчете Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		// АБС ВСТАВКА ПОПОВ ФРОЛОВ КОНЕЦ
		
		//АБС ВСТАВКА №44754 НАЧАЛО «18 июня 2014 г.», Пополитов
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Документ)) Тогда  
			//\\АБС ВСТАВКА №44754 КОНЕЦ			
			НаборХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей(); 			
			НаборХозрасчетный.Отбор.Регистратор.Установить(Документ);
			НаборХозрасчетный.Прочитать();      			
			ТабПроводокБУ = НаборХозрасчетный.Выгрузить();		
			
			Если не ЗначениеЗаполнено(ТабПроводокБУ) Тогда
				//АБС ВСТАВКА №45227 15.07.14 Добавлено условие "Если Источник является объектом Тогда"
				Если НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник)) Тогда
					ТабПроводокБУ = Источник.Движения.Хозрасчетный.Выгрузить();
				КонецЕсли;
			КонецЕсли;
		Иначе 
			//АБС ВСТАВКА №45227 15.07.14 Добавлено условие "Если Источник является объектом Тогда"
			Если НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник)) Тогда
				ТабПроводокБУ = Источник.Движения.Хозрасчетный.Выгрузить();   
			КонецЕсли;
		КонецЕсли;
		
		ЭтоППИПоКВ = Ложь;
		
		ЭтоПринятиеКВ = Ложь;
		
		ДоходыПрошлыхЛет = Ложь;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			ЭтоППИПоКВ = абс_БюджетированиеПривилегированный.ПровестиППИПоКВПоОплате(ТабДвижений, ТабПроводокБУ, Документ);
		КонецЕсли;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") 
			или ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
			или ТипЗнч(Документ) = Тип("ДокументСсылка.ПереоценкаВалютныхСредств") 
			или ТипЗнч(Документ) = Тип("ДокументСсылка.ОперацияБух")  Тогда
			абс_БюджетированиеПривилегированный.ПровестиДляОтчета(ТабДвижений, ТабПроводокБУ, Документ);
		КонецЕсли;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПринятиеКУчетуОС") ИЛИ
			ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") ИЛИ
			ТипЗнч(Документ) = Тип("ДокументСсылка.МодернизацияОС") Тогда
			ЭтоПринятиеКВ = Истина;
		КонецЕсли;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОперацияБух") И     //АБС Коломиец начало
			Документ.Метаданные().Реквизиты.Найти("абс_ДоходыПрошлыхЛет")<>Неопределено И	
			Документ.абс_ДоходыПрошлыхЛет Тогда
			Сценарий = Константы.абс_СценарийУбыткиПрошлыхЛет.Получить();
			ДоходыПрошлыхЛет = Истина;                                  //АБС Коломиец конец
		КонецЕсли;
		
		Если ЭтоПринятиеКВ Тогда
			//НФС 2018
			//Крамаренко Д.М.
			//проверить движения документов
			//сделать
			абс_БюджетированиеПривилегированный.ПроведениеПоБюджетуПрочихДокументовПринятиеКВ(ТабДвижений,Документ, Сценарий,Отказ);
			
			ДокументЗавершен = Ложь;
			
		ИначеЕсли ДоходыПрошлыхЛет Тогда  //АБС Коломиец начало
			
			ПроведениеПоБюджетуПрочихДокументовДоходыПрошлыхЛет(ТабДвижений,Документ, Сценарий,Отказ);
			ДокументЗавершен = Ложь;      //АБС Коломиец конец
			
		ИначеЕсли НЕ ЭтоППИПоКВ Тогда
			
			// +++ввв 07.09.2016 г.
			абс_БюджетированиеПривилегированный.ПроведениеПоБюджетуПрочихДокументов(ТабДвижений, ТабПроводокБУ ,Документ, Сценарий,Отказ);
			// ---ввв 07.09.2016 г.
			
			ДокументЗавершен = Истина;			
			
		Иначе
			
			ДокументЗавершен = Ложь;
		КонецЕсли;
		
		// {{KM WARE Погорелов В.М. Заявка № 08.10.2015 начало
		// Добавление движений для документа ПеремещениеТоваров
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ Документ.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено Тогда
			Если НЕ Документ.ОтражатьВБухгалтерскомУчете Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		абс_БюджетированиеПривилегированный.ПроведениеПоБюджетуПеремещениеТоваров(ТабДвижений, Документ, Отказ);
		
		ДокументЗавершен = Ложь;
		
		// }}KM WARE Погорелов В.М. Заявка № 08.10.2015 окончание
		
	Иначе
		//Документы, имеющие статусы	
		//проверим статус
		Если Документ.Метаданные().Реквизиты.Найти("абс_Статус")<>Неопределено Тогда
			Если Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка или
				Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ или
				Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеОФК или
				Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией Тогда
				
				возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ПроведениеПоБюджетуРТиУ(ТабДвижений,Документ, Сценарий, Отказ);			
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
			ПроведениеПоБюджетуТН(ТабДвижений,Документ,Сценарий);						
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") или
			ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			ТекСценарий = Сценарий;
			
			Если Документ.абс_ЗакупочныйЗаказ.РасходыБудущихПериодов Тогда
				ТекСценарий = Константы.абс_СценарийДляРБП.Получить();
				
				ЭтоРБП = Истина;
			КонецЕсли;			
			
			Если Документ.абс_ЗакупочныйЗаказ.БюджетнаяСтатья = Справочники.СтатьиОборотовПоБюджетам.НайтиПоНаименованию("Единая статья КВ") Тогда
				ТекСценарий = КонстСценарийКВПоПоставке;
				
				ЭтоКВ = Истина;
			КонецЕсли;
			
			//АБС ВСТАВКА 46344  23.10.2014 18:42:06  Шамов
			ЭтоУбыткиПрошлыхЛет = ЛОЖЬ;
			Если Документ.абс_ЗакупочныеЗаказы.Количество() > 0 Тогда
				абс_ЗакупочныйЗаказТЧ = Документ.абс_ЗакупочныеЗаказы[0].абс_ЗакупочныйЗаказТЧ;
				ЭтоУбыткиПрошлыхЛет = абс_ЗакупочныйЗаказТЧ.УбыткиПрошлыхЛет;
			КонецЕсли;
			Если НЕ ЭтоУбыткиПрошлыхЛет 
				ИЛИ Документ.Организация <> ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК Тогда
				//АБС ВСТАВКА 46344 КОНЕЦ
				Если ЭтоКВ = Истина Тогда
					ПроведениеПоБюджетуПТиУ_АО_КВ(ТабДвижений,Документ,ТекСценарий, Отказ);
				Иначе
					ПроведениеПоБюджетуПТиУ_АО(ТабДвижений,Документ,ТекСценарий, Отказ);
				КонецЕсли;
				//АБС ВСТАВКА 46344  23.10.2014 18:42:06  Шамов
			КонецЕсли;
			//АБС ВСТАВКА 46344 КОНЕЦ
			//***** Проектный учет. Гетц. Проведение по движениям ДДС зачета аванса (13.06.2013)
			ТабДвиженийДДС = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Документ, РегистрыНакопления.абс_ДДСПоПроектам, Истина);
			Если Не ТабДвиженийДДС = Неопределено Тогда 
				ТабДвиженийДДС = ТабДвиженийДДС.Выгрузить();
				ТабДвиженийДДС.Очистить();
				Результат = абс_БюджетированиеПривилегированный.ПровестиПТиУПоДДСПоПроектам(Документ, ТабДвиженийДДС, ТабДвижений);
				Если Результат Тогда 
					ПолныеПрава.ЗаписатьНаборЗаписейНаСервере("абс_ДДСПоПроектам", Документ.Ссылка, ТабДвиженийДДС,,Отказ);		
				КонецЕсли;
			КонецЕсли;
			//***** Проектный учет. Гетц.
			//АБС+ Тупиков 12897, 22682
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ПроведениеКорректировкиРеализацииПоБюджету(ТабДвижений, Документ, Сценарий);
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			ПроведениеКорректировкиПоступленияПоБюджету(ТабДвижений, Документ, Сценарий);			
			//\\АБС-
			
		КонецЕсли;
		
		Если Документ.Метаданные().Реквизиты.Найти("абс_Статус")<>Неопределено Тогда
			
			ДокументЗавершен =  (Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
			
			Если Документ.Метаданные().Реквизиты.Найти("абс_ДоходыПрошлыхЛет")<>Неопределено Тогда
				
				Если Документ.абс_ДоходыПрошлыхЛет Тогда
					
					ДокументЗавершен = Ложь;
					
				КонецЕсли;		
			КонецЕсли;
			
			// АБС ВСТАВКА АБС-Ф 20111212 По РБП пли по КВ не нужно формировать движения по факту
			//  по РБП и по КВ движения отражаются в соответствующих сценариях
			Если ЭтоРБП = Истина ИЛИ ЭтоКВ = Истина Тогда
				ДокументЗавершен = Ложь;
			КонецЕсли;
			
			// 2011.07.01 В корректировке не отражается факт.
			// ИЛИ (Документ.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.КорректировкаДокумента);
			
			//АБС+ Тупиков 12897	
		ИначеЕсли
			Документ.Метаданные().Реквизиты.Найти("абс_СтатусДокумента") <> Неопределено Тогда
			ДокументЗавершен = (Документ.абс_СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
			//АБС- Тупиков
			
		Иначе
			ДокументЗавершен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//Сторчевой А.Н. 05.12.2017 НФС 2018 {ТабДвижений.Свернуть("Период,Сценарий, Проект, Контрагент, ДоговорКонтрагента, Номенклатура,СтатьяОборотов,ЦФО,Валюта, абс_ЦФУ, абс_ТипКонтрагента, Организация, абс_ТипСети,абс_КВ,абс_ТЭО,абс_ТипРасхода, абс_СчетБУ","ВалютнаяСумма,СуммаУпр,СуммаСценария");
	КолонкиГруппировки = "Период,Сценарий, Проект, Контрагент, ДоговорКонтрагента, Номенклатура,СтатьяОборотов,ЦФО,Валюта, абс_ЦФУ, абс_ТипКонтрагента, Организация, абс_ТипСети,абс_КВ,абс_ТЭО,абс_ТипРасхода, абс_СчетБУ, ttk_ОбъектБюджетирования, ttk_Город";
	КолонкиИтогов = "ВалютнаяСумма,СуммаУпр,СуммаСценария";
	ТабДвижений.Свернуть(КолонкиГруппировки,КолонкиИтогов);
	// } Сторчевой А.Н. 05.12.2017 НФС 2018
	//АБС НАЧАЛО Задача №08759
	СценарийПоТипуДокумента = ПолучитьСценарийПоТипуДокумента(Документ);
	Если НЕ СценарийПоТипуДокумента.Пустая() Тогда
		//то же самое, но по другому сценарию
		КонстСценарийДляРБП = Константы.абс_СценарийДляРБП.Получить();
		КонстСценарийДляДДСБУ = Константы.абс_СценарийДДСБУ.Получить();
		
		НоваяТабДвижений = ТабДвижений.Скопировать();
		НоваятабДвижений.ЗаполнитьЗначения(СценарийПоТипуДокумента,"Сценарий");
		Для каждого СтрокаНоваяТаб из НоваяТабДвижений Цикл
			
			НоваяСтрока = ТабДвижений.Добавить();  
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНоваяТаб);
			
		КонецЦикла;
		
	КонецЕсли;
	//\\АБС КОНЕЦ Задача №08759
	
	Если ДокументЗавершен Тогда
		//то же самое, но по другому сценарию
		//АБС НАЧАЛО Задача №08759
		Если НоваяТабДвижений=Неопределено Тогда 
			НоваяТабДвижений =  ТабДвижений.Скопировать();
		КонецЕсли;
		//\\АБС КОНЕЦ Задача №08759
		НоваятабДвижений.ЗаполнитьЗначения(СценарийФакт,"Сценарий");
		Для каждого СтрокаНоваяТаб из НоваяТабДвижений Цикл
			
			НоваяСтрока = ТабДвижений.Добавить();  
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНоваяТаб);
			
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") или
				ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				
				ЭтоРБП = Документ.абс_ЗакупочныйЗаказ.РасходыБудущихПериодов;
				
				Если ЭтоРБП Тогда
					НоваяСтрока.Сценарий = Константы.абс_СценарийДляРБП.Получить();
				КонецЕсли;
				
			КонецЕсли; 
			
			//АБС НАЧАЛО Задача №08759
			Если НЕ СценарийПоТипуДокумента.Пустая() Тогда
				НоваяСтрока = ТабДвижений.Добавить();  
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНоваяТаб);
				
				НоваяСтрока.Сценарий = СценарийПоТипуДокумента;
			КонецЕсли;
			//\\АБС КОНЕЦ Задача №08759		
		КонецЦикла;
		
	КонецЕсли;
	
	ПолныеПрава.ЗаписатьНаборЗаписейНаСервере("ОборотыБюджетов", Документ.Ссылка, ТабДвижений,,Отказ);		
	
КонецПроцедуры
// Брель Виктор Андреевич 23.03.2018 11:38:46 >>>
Функция ПолучитьСписокПрочихТиповБюджетныхДокументов() Экспорт
	
	СпТипов = Новый СписокЗначений;
	
	СпТипов.Добавить(Тип("ДокументСсылка.ПереоценкаВалютныхСредств"));
	СпТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	СпТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
	СпТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СпТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
	СпТипов.Добавить(Тип("ДокументСсылка.ПолучениеУслугПоПереработке"));
	СпТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
	СпТипов.Добавить(Тип("ДокументСсылка.ПередачаОС"));
	СпТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СпТипов.Добавить(Тип("ДокументСсылка.ПрочиеЗатраты"));
	СпТипов.Добавить(Тип("ДокументСсылка.ОперацияБух"));
	СпТипов.Добавить(Тип("ДокументСсылка.СписаниеНДС"));
	СпТипов.Добавить(Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС"));
	СпТипов.Добавить(Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС"));
	
	СпТипов.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
	СпТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС"));
	СпТипов.Добавить(Тип("ДокументСсылка.МодернизацияОС"));
	
	СпТипов.Добавить(Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию"));
	
	Возврат СпТипов;
	
КонецФункции

Процедура ПроверитьАналититиППДЗакупочногоЗаказа(Документ, Отказ) Экспорт
	
	ДатаОграниченияМапингаАналитик 	= Константы.абс_ДатаКонтроляМапингаБюджетныхАналитикВПрочихДокументах.Получить();	
	
	Если НЕ ЗначениеЗаполнено(ДатаОграниченияМапингаАналитик) Тогда
		Возврат;
	КонецЕсли;
	
	Если Документ.Дата <= КонецДня(ДатаОграниченияМапингаАналитик) Тогда
		Возврат;
	КонецЕсли;	
	
	Если Документ.абс_БезКонтроляМаппинга Тогда
		Возврат;
	КонецЕсли;
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ВложенныйЗапрос.СчетДт,
	//|	ВложенныйЗапрос.СубконтоДт1,
	//|	ВложенныйЗапрос.СубконтоДт2,
	//|	ВложенныйЗапрос.СубконтоДт3,
	//|	ВложенныйЗапрос.СчетКт,
	//|	ВложенныйЗапрос.СубконтоКт1,
	//|	ВложенныйЗапрос.СубконтоКт2,
	//|	ВложенныйЗапрос.СубконтоКт3,
	//|	ВложенныйЗапрос.Сумма,
	//|	ВложенныйЗапрос.ЭтоЗатрата,
	//|	ВложенныйЗапрос.ЭтоДоход,
	//|	ВложенныйЗапрос.Организация,
	//|	ВложенныйЗапрос.абс_ЦФУ,
	//|	ВложенныйЗапрос.абс_ЦФО,
	//|	ВложенныйЗапрос.абс_БюджетнаяСтатья,
	//|	ВложенныйЗапрос.абс_ТипКонтрагента,
	//|	ВложенныйЗапрос.абс_КВ,
	//|	ВложенныйЗапрос.абс_ТЭО,
	//|	ВложенныйЗапрос.абс_ТипСети,
	//|	ВложенныйЗапрос.абс_ТипРасхода,
	//|	ВложенныйЗапрос.СтатьяЗатрат,
	//|	ВложенныйЗапрос.НомерПроводки,
	//|	ВложенныйЗапрос.СтатьяУУ,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(ВложенныйЗапрос.СтатьяУУ, ЗНАЧЕНИЕ(Справочник.СтатьиОборотовПоБюджетам.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиОборотовПоБюджетам.ПустаяСсылка)
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ КАК ЕстьМапинг
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	//|		ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	//|		ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	//|		ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	//|		ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	//|		ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	//|		ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	//|		ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	//|		ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	//|		ВЫБОР
	//|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ КАК ЭтоЗатрата,
	//|		ВЫБОР
	//|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (&МассивСчетовДоходов)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ КАК ЭтоДоход,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.Организация КАК Организация,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.ЦФУ КАК абс_ЦФУ,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.ЦФО КАК абс_ЦФО,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.БюджетнаяСтатья КАК абс_БюджетнаяСтатья,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.ТипКонтрагента КАК абс_ТипКонтрагента,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.КВ КАК абс_КВ,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.ТЭО КАК абс_ТЭО,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.ТипСети КАК абс_ТипСети,
	//|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.ТипРасхода КАК абс_ТипРасхода,
	//|		ВЫБОР
	//|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|				ТОГДА ВЫБОР
	//|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	//|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	//|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	//|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	//|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	//|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	//|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|					КОНЕЦ
	//|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|		КОНЕЦ КАК СтатьяЗатрат,
	//|		ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерПроводки,
	//|		Маппинг.СтатьяУУ КАК СтатьяУУ
	//|	ИЗ
	//|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	//|				,
	//|				,
	//|				Регистратор = &Документ
	//|					И (СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|						ИЛИ СчетКт В ИЕРАРХИИ (&МассивСчетовДоходов))
	//|					И (НЕ(СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство)
	//|							И СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщепроизводственныеРасходы))),
	//|				,
	//|				) КАК ХозрасчетныйДвиженияССубконто
	//|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|				абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ КАК СтатьяУУ,
	//|				абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ КАК СтатьяБУ
	//|			ИЗ
	//|				РегистрСведений.абс_СоответствиеСтатейЗатрат_БУ_УУ КАК абс_СоответствиеСтатейЗатрат_БУ_УУ
	//|			
	//|			СГРУППИРОВАТЬ ПО
	//|				абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ,
	//|				абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ) КАК Маппинг
	//|			ПО (ВЫБОР
	//|					КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|						ТОГДА ВЫБОР
	//|								КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|									ТОГДА ВЫБОР
	//|											КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	//|												ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	//|											КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	//|												ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	//|											КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	//|												ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	//|											ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|										КОНЕЦ
	//|								ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|							КОНЕЦ = Маппинг.СтатьяБУ
	//|					ИНАЧЕ ЛОЖЬ
	//|				КОНЕЦ)
	//|				И (ВЫБОР
	//|					КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|						ТОГДА ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.БюджетнаяСтатья = Маппинг.СтатьяУУ
	//|					ИНАЧЕ ЛОЖЬ
	//|				КОНЕЦ)) КАК ВложенныйЗапрос");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Маппинг.СтатьяУУ ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьМапинг,
	|	Проводки.СчетДт,
	|	Проводки.СубконтоДт1,
	|	Проводки.СубконтоДт2,
	|	Проводки.СубконтоДт3,
	|	Проводки.СчетКт,
	|	Проводки.СубконтоКт1,
	|	Проводки.СубконтоКт2,
	|	Проводки.СубконтоКт3,
	|	Проводки.Сумма,
	|	Проводки.ЭтоЗатрата,
	|	Проводки.ЭтоДоход,
	|	Проводки.Организация,
	|	Проводки.абс_ЦФУ,
	|	Проводки.абс_ЦФО,
	|	Проводки.абс_БюджетнаяСтатья,
	|	Проводки.абс_ТипКонтрагента,
	|	Проводки.абс_КВ,
	|	Проводки.абс_ТЭО,
	//АБС НАЧАЛО Задача №08759
	|	Проводки.Проект,
	//\\АБС КОНЕЦ Задача №08759
	|	Проводки.абс_ТипСети,
	|	Проводки.абс_ТипРасхода,
	|	Проводки.СтатьяЗатрат,
	|	Проводки.НГ,
	|	Проводки.НомерПроводки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	|		ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	|		ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|		ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	|		ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	|		ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетовЗатрат)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель В (&МассивСчетовЗатрат)
	|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель В (&МассивСчетовЗатрат)
	|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоЗатрата,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В (&МассивСчетовДоходов)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.Родитель В (&МассивСчетовДоходов)
	|						И ХозрасчетныйДвиженияССубконто.СчетКт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.Родитель.Родитель В (&МассивСчетовДоходов)
	|						И ХозрасчетныйДвиженияССубконто.СчетКт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоДоход,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.Организация КАК Организация,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.ЦФУ КАК абс_ЦФУ,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.ЦФО КАК абс_ЦФО,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.БюджетнаяСтатья КАК абс_БюджетнаяСтатья,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.ТипКонтрагента КАК абс_ТипКонтрагента,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.КВ КАК абс_КВ,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.ТЭО КАК абс_ТЭО,
	//АБС НАЧАЛО Задача №08759
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.Проект КАК Проект,
	//\\АБС КОНЕЦ Задача №08759
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.ТипСети КАК абс_ТипСети,
	|		ХозрасчетныйДвиженияССубконто.Регистратор.абс_ЗакупочныйЗаказ.ТипРасхода КАК абс_ТипРасхода,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетовЗатрат)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель В (&МассивСчетовЗатрат)
	|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель В (&МассивСчетовЗатрат)
	|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|								ИЛИ ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|								ИЛИ ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|								ИЛИ ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК СтатьяЗатрат,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетовЗатрат)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель В (&МассивСчетовЗатрат)
	|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель В (&МассивСчетовЗатрат)
	|						И ХозрасчетныйДвиженияССубконто.СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В (&МассивСчетовДоходов)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.Родитель В (&МассивСчетовДоходов)
	|						И ХозрасчетныйДвиженияССубконто.СчетКт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.Родитель.Родитель В (&МассивСчетовДоходов)
	|						И ХозрасчетныйДвиженияССубконто.СчетКт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|						КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|							ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК НГ,
	|		ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерПроводки
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|				,
	|				,
	|				Регистратор = &Документ
	|					И (СчетДт В (&МассивСчетовЗатрат)
	|						ИЛИ СчетДт.Родитель В (&МассивСчетовЗатрат)
	|							И СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ИЛИ СчетДт.Родитель.Родитель В (&МассивСчетовЗатрат)
	|							И СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)),
	|				,
	|				) КАК ХозрасчетныйДвиженияССубконто) КАК Проводки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ КАК СтатьяУУ,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ КАК СтатьяБУ,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат КАК СчетЗатрат,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|		ИЗ
	|			РегистрСведений.абс_СоответствиеСтатейЗатрат_БУ_УУ КАК абс_СоответствиеСтатейЗатрат_БУ_УУ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.СчетЗатрат,
	|			абс_СоответствиеСтатейЗатрат_БУ_УУ.НоменклатурнаяГруппа) КАК Маппинг
	|		ПО Проводки.абс_БюджетнаяСтатья = Маппинг.СтатьяУУ
	|			И (Проводки.ЭтоЗатрата)
	//	|			И Проводки.СтатьяЗатрат = Маппинг.СтатьяБУ
	|			И (Проводки.СчетДт = Маппинг.СчетЗатрат
	|				ИЛИ Проводки.СчетДт.Родитель = Маппинг.СчетЗатрат
	|					И Проводки.СчетДт.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ИЛИ Проводки.СчетДт.Родитель.Родитель = Маппинг.СчетЗатрат
	|					И Проводки.СчетДт.Родитель.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	|			И (ВЫБОР
	|				КОГДА (НЕ Проводки.НГ = НЕОПРЕДЕЛЕНО)
	|					ТОГДА ВЫБОР
	|							КОГДА Маппинг.НоменклатурнаяГруппа.ЭтоГруппа
	|								ТОГДА Проводки.НГ.Родитель = Маппинг.НоменклатурнаяГруппа
	|										ИЛИ Проводки.НГ.Родитель.Родитель = Маппинг.НоменклатурнаяГруппа
	|										ИЛИ Проводки.НГ.Родитель.Родитель.Родитель = Маппинг.НоменклатурнаяГруппа
	|							ИНАЧЕ Проводки.НГ = Маппинг.НоменклатурнаяГруппа
	|						КОНЕЦ
	|			КОНЕЦ)");
	
	//АБС Коломиец-
	Запрос.УстановитьПараметр("МассивСчетовЗатрат", ПолучитьМассивСчетовЗатрат(Документ.Дата));  
	Запрос.УстановитьПараметр("МассивСчетовДоходов", ПолучитьМассивДоходов());
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	ПроводкиДляКонтроля = РезультатЗапроса.Выгрузить();
	
	ТаблицаМапинга = ПолучитьСписокДоступныхСтатейБУМапинга(ПроводкиДляКонтроля.ВыгрузитьКолонку("абс_БюджетнаяСтатья"));
	
	СообщениеПроверкиМапинга = "Документ: " + Документ.Ссылка + ". Проверка аналитик по мапингу БУ УУ:";	
	
	Для Каждого ПроводкаКонтроля Из ПроводкиДляКонтроля Цикл
		
		Если (ПроводкаКонтроля.ЭтоЗатрата И ПроверятьМаппингПоСчетуЗатрат(Документ.Дата, ПроводкаКонтроля.СчетДт)) И НЕ ПроводкаКонтроля.ЕстьМапинг Тогда
			
			Отказ = Истина;
			СообщениеПроверкиМапинга = СообщениеПроверкиМапинга + Символы.ПС + 
			"Проводка " + ПроводкаКонтроля.НомерПроводки + ": Дт " + ПроводкаКонтроля.СчетДт + ", Кт " + ПроводкаКонтроля.СчетКт + " не соответствует мапингу БУ и УУ. ";					
			
			//СтрокиМапинга = ТаблицаМапинга.НайтиСтроки(Новый Структура("СтатьяУУ", ПроводкаКонтроля.абс_БюджетнаяСтатья));					
			//
			//СтрокиМапингаСтрокой = "";
			//
			//Для Каждого СтрокаМапинга Из СтрокиМапинга Цикл
			//	
			//	Если Не ЗначениеЗаполнено(СтрокиМапингаСтрокой) Тогда
			//		СтрокиМапингаСтрокой = "" + СтрокаМапинга.СтатьяБУ;
			//	Иначе
			//		СтрокиМапингаСтрокой = СтрокиМапингаСтрокой + ", " + СтрокаМапинга.СтатьяБУ;
			//	КонецЕсли;
			//	
			//КонецЦикла;
			//
			//Если ЗначениеЗаполнено(СтрокиМапингаСтрокой) Тогда
			//	
			//	СообщениеПроверкиМапинга = СообщениеПроверкиМапинга + Символы.ПС + 
			//		"Для статьи УУ: """ + ПроводкаКонтроля.абс_БюджетнаяСтатья + """ необходимо выбрать одну из следующих статей БУ: " + СтрокиМапингаСтрокой + ".";
			//		
			//Иначе
			//	
			//	СообщениеПроверкиМапинга = СообщениеПроверкиМапинга + Символы.ПС + "Для статьи УУ: """ + ПроводкаКонтроля.абс_БюджетнаяСтатья + """ не настроен мапинг статей БУ.";
			//	
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Отказ Тогда
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке(СообщениеПроверкиМапинга);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьАналитикиПрочихТиповБюджетныхДокументов(Документ, Отказ, ПроводкиДляКонтроля = Неопределено) Экспорт
	
	ДатаОграниченияПроверкиАналитик = Константы.абс_ДатаКонтроляБюджетныхАналитикВПрочихДокументах.Получить();
	ДатаОграниченияМапингаАналитик 	= Константы.абс_ДатаКонтроляМапингаБюджетныхАналитикВПрочихДокументах.Получить();
	
	ТекстСообщенияОбОшибке = "Документ: " + Документ.Ссылка + ". Проверка бюджетных аналитик:";
	
	Если НЕ ЗначениеЗаполнено(Документ.абс_ЦФУ) Тогда
		Отказ = Истина;
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС + "Не заполнен ЦФУ";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Документ.абс_ЦФО) Тогда
		Отказ = Истина;
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС + "Не заполнен ЦФО";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Документ.Организация) Тогда
		Отказ = Истина;
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС + "Не заполнена организация";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Документ.абс_БюджетнаяСтатья) Тогда
		Отказ = Истина;
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС + "Не заполнена бюджетная статья";
	КонецЕсли;
	
	//Бреев
	Если ЗначениеЗаполнено(Документ.абс_БюджетнаяСтатья) И Документ.абс_БюджетнаяСтатья = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВпоВводу") тогда
		Если НЕ ЗначениеЗаполнено(Документ.абс_ТЭО) И НЕ ЗначениеЗаполнено(Документ.абс_КВ) тогда
			Отказ = истина;
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС + "Не заполнена ТЭО или КВ!";
		КонецЕсли;
	КонецЕсли;
	//Бреев
	
	//2053
	Если ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
		//Дополнительный контроль на все аналитики
		//Если НЕ ЗначениеЗаполнено(Документ.абс_ТипКонтрагента) Тогда
		//	Отказ = Истина;
		//	ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС + "Не заполнен тип контрагента";
		//КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Документ.абс_ТипСети) Тогда
			Отказ = Истина;
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС + "Не заполнен тип сети";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Документ.абс_КВ) Тогда
			Отказ = Истина;
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС + "Не заполнено КВ";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Документ.абс_ТЭО) Тогда
			Отказ = Истина;
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС + "Не заполнено ТЭО";
		КонецЕсли;
		
		//
	КонецЕсли;
	
	//2053
	
	Если Отказ Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке);
		
		Возврат;
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(ДатаОграниченияМапингаАналитик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПроводкиДляКонтроля = Неопределено И НЕ (Документ.Дата <= КонецДня(ДатаОграниченияМапингаАналитик)) И НЕ Документ.абс_БезКонтроляМаппинга Тогда
		
		//ТаблицаМапинга = ПолучитьСписокДоступныхСтатейБУМапинга(ПроводкиДляКонтроля.ВыгрузитьКолонку("абс_БюджетнаяСтатья"));
		
		СообщениеПроверкиМапинга = "Документ: " + Документ.Ссылка + ". Проверка аналитик по мапингу БУ УУ:";
		
		Для Каждого ПроводкаКонтроля Из ПроводкиДляКонтроля Цикл
			
			Если ((ПроводкаКонтроля.ЭтоЗатрата И ПроверятьМаппингПоСчетуЗатрат(Документ.Дата, ПроводкаКонтроля.СчетДт)) ИЛИ ПроводкаКонтроля.ЭтоДоход) И НЕ ПроводкаКонтроля.ЕстьМапинг Тогда
				
				Отказ = Истина;
				СообщениеПроверкиМапинга = СообщениеПроверкиМапинга + Символы.ПС + 
				"Проводка " + ПроводкаКонтроля.НомерПроводки + ": Дт " + ПроводкаКонтроля.СчетДт + ", Кт " + ПроводкаКонтроля.СчетКт + " не соответствует мапингу БУ и УУ. ";					
				
				//СтрокиМапинга = ТаблицаМапинга.НайтиСтроки(Новый Структура("СтатьяУУ", ПроводкаКонтроля.абс_БюджетнаяСтатья));					
				//
				//СтрокиМапингаСтрокой = "";
				//
				//Для Каждого СтрокаМапинга Из СтрокиМапинга Цикл
				//	
				//	Если Не ЗначениеЗаполнено(СтрокиМапингаСтрокой) Тогда
				//		СтрокиМапингаСтрокой = СтрокиМапингаСтрокой;
				//	Иначе
				//		СтрокиМапингаСтрокой = СтрокиМапингаСтрокой + ", " + СтрокаМапинга.СтатьяБУ;
				//	КонецЕсли;
				//	
				//КонецЦикла;
				//
				//Если ЗначениеЗаполнено(СтрокиМапингаСтрокой) Тогда
				//	
				//	СообщениеПроверкиМапинга = СообщениеПроверкиМапинга + Символы.ПС + 
				//		"Для статьи УУ: """ + ПроводкаКонтроля.абс_БюджетнаяСтатья + """ необходимо выбрать одну из следующих статей БУ: " + СтрокиМапингаСтрокой + ".";
				//		
				//Иначе
				//	
				//	СообщениеПроверкиМапинга = СообщениеПроверкиМапинга + Символы.ПС + "Для статьи УУ: """ + ПроводкаКонтроля.абс_БюджетнаяСтатья + """ не настроен мапинг статей БУ.";
				//	
				//КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;		
		
		Если Отказ Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СообщениеПроверкиМапинга);
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьСписокДоступныхСтатейБУМапинга(МассивСтатейУУ)
	
	ЗапросСтатейБУ = Новый Запрос(
	"ВЫБРАТЬ
	|	абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ КАК СтатьяУУ,
	|	абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяБУ КАК СтатьяБУ
	|ИЗ
	|	РегистрСведений.абс_СоответствиеСтатейЗатрат_БУ_УУ КАК абс_СоответствиеСтатейЗатрат_БУ_УУ
	|ГДЕ
	|	абс_СоответствиеСтатейЗатрат_БУ_УУ.СтатьяУУ В(&СписокСтатейУУ)");
	
	ЗапросСтатейБУ.УстановитьПараметр("СписокСтатейУУ", МассивСтатейУУ);
	
	Возврат ЗапросСтатейБУ.Выполнить().Выгрузить();
	
КонецФункции

Функция ПроверитьРеквизитПоТипу(Данные, МетаданныеОбъекта, ИмяРеквизита, ТипРеквизита)
	
	ТекРеквизит = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
	
	Если ТекРеквизит = Неопределено Тогда
		// Нету такого реквизита
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ТипЗнч(Данные[ИмяРеквизита]) = ТипРеквизита Тогда
		// Ожидаем другой тип
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции

Процедура абс_ПроверкаУправленческихАналитик(Источник, Отказ) Экспорт
	
	//АБС ВСТАВКА Филиализация 17.11.2014 Кряковкин
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьПроверкуЗаполненияРеквизитов") Тогда
		Возврат;	
	КонецЕсли;
	//\\АБС ВСТАВКА Филиализация КОНЕЦ
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "Проверка бюджетных аналитик по документу " + Источник + ":";
	
	Если ПроверитьРеквизитПоТипу(Источник, Источник.Метаданные(), "абс_ЦФО", Тип("СправочникСсылка.Подразделения")) Тогда
		Если НЕ Источник.абс_ЦФО.абс_ЦФОИспользуется Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Выбранный ЦФО не находится в статусе Использование.";
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьРеквизитПоТипу(Источник, Источник.Метаданные(), "абс_БюджетнаяСтатья", Тип("СправочникСсылка.СтатьиОборотовПоБюджетам")) Тогда
		Если НЕ Источник.абс_БюджетнаяСтатья.абс_Используется Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Выбранная бюджетная статья не находится в статусе Использование.";
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	// Для платежных поручений проверяем табличную часть с расшифровкой платежа.
	
	Для Каждого ТЧ из Источник.Метаданные().ТабличныеЧасти Цикл
		
		ПроверятьЦФО                = Ложь;
		ПроверятьБюджетнуюСтатью 	= Ложь;
		
		Если НЕ ТЧ.Реквизиты.Найти("абс_ЦФО") = Неопределено Тогда
			
			ПроверятьЦФО 			= Истина;
			
		КонецЕсли;
		
		Если НЕ ТЧ.Реквизиты.Найти("абс_БюджетнаяСтатья") = Неопределено Тогда
			
			ПроверятьБюджетнуюСтатью= Истина;
			
		КонецЕсли;
		
		Если ПроверятьЦФО ИЛИ ПроверятьБюджетнуюСтатью Тогда
			
			Для Каждого СтрокаТЧ Из Источник[ТЧ.Имя] Цикл
				
				Если ПроверятьЦФО Тогда
					
					Если ПроверитьРеквизитПоТипу(СтрокаТЧ, ТЧ, "абс_ЦФО", Тип("СправочникСсылка.Подразделения")) Тогда
						Если НЕ СтрокаТЧ.абс_ЦФО.абс_ЦФОИспользуется Тогда
							ТекстСообщения = ТекстСообщения + Символы.ПС + "В строке " + СтрокаТЧ.НомерСтроки + " табличной части " + ТЧ.Синоним + " выбран ЦФО не в статусе Использование.";
							Отказ = Истина;
						КонецЕсли;
					КонецЕсли;					
				КонецЕсли;
				
				Если ПроверятьБюджетнуюСтатью Тогда
					
					Если ПроверитьРеквизитПоТипу(СтрокаТЧ, ТЧ, "абс_БюджетнаяСтатья", Тип("СправочникСсылка.СтатьиОборотовПоБюджетам")) Тогда
						Если НЕ СтрокаТЧ.абс_БюджетнаяСтатья.абс_Используется Тогда
							ТекстСообщения = ТекстСообщения + Символы.ПС + "В строке " + СтрокаТЧ.НомерСтроки + " табличной части " + ТЧ.Синоним + " выбрана бюджетная статья не в статусе Использование.";
							Отказ = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		
	КонецЕсли;
	
	
	
	
КонецПроцедуры

//АБС НАЧАЛО Задача №08759
Процедура абс_ПроведениеПоДокументамОплатОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если НЕ Отказ Тогда 
		
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") Тогда 
			
			// Если это ссылка на документ
			Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник)) Тогда
				Движения = РегистрыНакопления.абс_ДДСПоПроектам.СоздатьНаборЗаписей();
				Движения.Отбор.Регистратор.Установить(Источник);
			Иначе
				// Если это объект
				Движения = Источник.Движения.абс_ДДСПоПроектам;
			КонецЕсли;
			
			Движения.Очистить();
			ТЧДвижения = Движения.Выгрузить();
			Результат = абс_БюджетированиеПривилегированный.ПровестиППВПоПоПроектам(Источник.Ссылка, ТЧДвижения);	
			
			Движения.Загрузить(ТЧДвижения);
			Движения.Записать();
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда 
			
			// Если это ссылка на документ
			Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник)) Тогда
				Движения = РегистрыНакопления.абс_ДДСПоПроектам.СоздатьНаборЗаписей();
				Движения.Отбор.Регистратор.Установить(Источник);
			Иначе
				// Если это объект
				Движения = Источник.Движения.абс_ДДСПоПроектам;
			КонецЕсли;
			
			Движения.Очистить();
			ТЧДвижения = Движения.Выгрузить();
			Результат = абс_БюджетированиеПривилегированный.ПровестиППИПоПоПроектам(Источник.Ссылка, ТЧДвижения);	
			
			Движения.Загрузить(ТЧДвижения);
			Движения.Записать();
			
			//ПолныеПрава.ЗаписатьНаборЗаписейНаСервере("абс_ДДСПоПроектам", Источник.Ссылка, ТЧДвижения,,Отказ);		
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.абс_СчетНаОплату") Тогда 
			
			МассивСтатусовСчета = абс_БизнесПроцессы.ПолучитьМассивСтатусовСчетаНаОплату();
			МинимальныйСтатус = МассивСтатусовСчета.Найти(Перечисления.абсСтатусыСчетов.Согласован);
			
			Если МассивСтатусовСчета.Найти(Источник.СтатусСчета)>=МинимальныйСтатус Тогда 
				// Если это ссылка на документ
				Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник)) Тогда
					Движения = РегистрыНакопления.абс_ДДСПоПроектам.СоздатьНаборЗаписей();
					Движения.Отбор.Регистратор.Установить(Источник);
				Иначе
					// Если это объект
					Движения = Источник.Движения.абс_ДДСПоПроектам;
				КонецЕсли;
				
				Движения.Очистить();
				ТЧДвижения = Движения.Выгрузить();
				Результат = абс_БюджетированиеПривилегированный.ПровестиСчетНаОплатуПоПроектам(Источник.Ссылка, ТЧДвижения);	
				
				Движения.Загрузить(ТЧДвижения);
				Движения.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//АБС КОНЕЦ Задача №08759

// Заглушка для работы документа "Принятие к учету ОС".
Процедура абс_УчетНоменклатурыВОСОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
КонецПроцедуры

Функция ПроверитьВозможностьПроведенияБезКонтроляМаппинга(РолиПользователя, СтатусДокумента) Экспорт
	
	Если НЕ РолиПользователя.Найти(Справочники.РолиИсполнителей.ПроведениеППДБезКонтроляМаппинга) = Неопределено 
		И (СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером 
		ИЛИ СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьВозможностьПроведенияБезКонтроляМаппингаПрочие() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РолиИИсполнители.Исполнитель
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Исполнитель = &Исполнитель
	|	И РолиИИсполнители.Роль = &Роль");
	
	Запрос.УстановитьПараметр("Исполнитель", глЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("Роль", Справочники.РолиИсполнителей.ПроведениеППДБезКонтроляМаппинга);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество() > 0;
	
КонецФункции

Функция КонтрольСоответствияПроводокБухОборотамБюджетов(Документ, Отказ, Сценарий = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаЗатрат,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (&МассивСчетовДоходов)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СумаДоходов
	|ПОМЕСТИТЬ ВТ_Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Документ
	|				И (СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат)
	|					ИЛИ СчетКт В ИЕРАРХИИ (&МассивСчетовДоходов)),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Проводки.СуммаЗатрат) КАК СуммаЗатрат,
	|	СУММА(ВТ_Проводки.СумаДоходов) КАК СумаДоходов
	|ПОМЕСТИТЬ ВТ_ПроводкиСвернуто
	|ИЗ
	|	ВТ_Проводки КАК ВТ_Проводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыБюджетов.СтатьяОборотов.абс_ДоходнаяСтатья
	|				ТОГДА ОборотыБюджетов.СуммаСценария
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходовОБ,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ОборотыБюджетов.СтатьяОборотов.абс_ДоходнаяСтатья)
	|				ТОГДА ОборотыБюджетов.СуммаСценария
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЗатратОБ
	|ПОМЕСТИТЬ ВТ_ОБ
	|ИЗ
	|	РегистрНакопления.ОборотыБюджетов КАК ОборотыБюджетов
	|ГДЕ
	|	ОборотыБюджетов.Регистратор = &Документ
	|	И ОборотыБюджетов.Сценарий = &СценарийФакт
	|	И ОборотыБюджетов.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_ПроводкиСвернуто.СуммаЗатрат, 0) - ЕСТЬNULL(ВТ_ОБ.СуммаЗатратОБ, 0) КАК РазностьЗатрат,
	|	ЕСТЬNULL(ВТ_ПроводкиСвернуто.СумаДоходов, 0) - ЕСТЬNULL(ВТ_ОБ.СуммаДоходовОБ, 0) КАК РазностьДоходов,
	|	ЕСТЬNULL(ВТ_ОБ.СуммаДоходовОБ, 0) КАК СуммаДоходовОБ,
	|	ЕСТЬNULL(ВТ_ОБ.СуммаЗатратОБ, 0) КАК СуммаЗатратОБ,
	|	ЕСТЬNULL(ВТ_ПроводкиСвернуто.СуммаЗатрат, 0) КАК СуммаЗатрат,
	|	ЕСТЬNULL(ВТ_ПроводкиСвернуто.СумаДоходов, 0) КАК СуммаДоходов
	|ИЗ
	|	ВТ_ПроводкиСвернуто КАК ВТ_ПроводкиСвернуто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОБ КАК ВТ_ОБ
	|		ПО (ИСТИНА)");
	
	Запрос.УстановитьПараметр("МассивСчетовЗатрат",  ПолучитьМассивСчетовЗатрат(Документ.Дата));  
	Запрос.УстановитьПараметр("МассивСчетовДоходов", ПолучитьМассивДоходов());
	Запрос.УстановитьПараметр("Документ", Документ);
	
	//Запрос.УстановитьПараметр("СценарийФакт", Константы.абс_СценарийДляФакта.Получить());
	//Запрос.УстановитьПараметр("СценарийФакт", ?(Сценарий <> Неопределено, Сценарий, Константы.абс_СценарийДляФакта.Получить())); //АБС Коломиец
	Запрос.УстановитьПараметр("СценарийФакт", ?(Сценарий <> Неопределено, Сценарий, ПолучитьСтруктуСценариевПоОрганизации(Документ.Организация).СценарийФакт)); //АБС Коломиец
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	ПроводкиДляКонтроля = РезультатЗапроса.Выгрузить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	КонтрольПройден = Истина;
	
	Если Выборка.Следующий() Тогда
		
		Если НЕ Выборка.РазностьЗатрат = 0 Тогда
			
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Сумма затрат, отраженная по оборотам бюджетов отличается от суммы введенных проводок:
			|Сумма затрат по проводкам: " + Формат(Выборка.СуммаЗатрат, "ЧЦ=15; ЧДЦ=2") + "
			|Сумма затрат по оборотам бюджетов: " + Формат(Выборка.СуммаЗатратОБ, "ЧЦ=15; ЧДЦ=2"));
			
			КонтрольПройден = Ложь;
		КонецЕсли;
		
		Если НЕ Выборка.РазностьДоходов = 0 Тогда
			
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Сумма доходов, отраженная по оборотам бюджетов отличается от суммы введенных проводок:
			|Сумма доходов по проводкам: " + Формат(Выборка.СуммаДоходов, "ЧЦ=15; ЧДЦ=2") + "
			|Сумма доходов по оборотам бюджетов: " + Формат(Выборка.СуммаДоходовОБ, "ЧЦ=15; ЧДЦ=2"));
			
			КонтрольПройден = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонтрольПройден;	
	
КонецФункции

Функция ПолучитьСтруктуСценариевПоОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	абс_СценарииПланированияОрганизаций.Организация,
	|	абс_СценарииПланированияОрганизаций.СценарийОперФакт,
	|	абс_СценарииПланированияОрганизаций.СценарийФакт,
	|	абс_СценарииПланированияОрганизаций.СценарийКВПлан,
	|	абс_СценарииПланированияОрганизаций.СценарийПоставка
	|ИЗ
	|	РегистрСведений.абс_СценарииПланированияОрганизаций КАК абс_СценарииПланированияОрганизаций
	|ГДЕ
	|	абс_СценарииПланированияОрганизаций.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Новый Структура("СценарийОперФакт, СценарийФакт, СценарийКВПлан, СценарийПоставка", Выборка.СценарийОперФакт, Выборка.СценарийФакт, Выборка.СценарийКВПлан, Выборка.СценарийПоставка);
		
	КонецЕсли;
	
	Возврат Новый Структура("СценарийОперФакт, СценарийФакт, СценарийКВПлан, СценарийПоставка", 
	Константы.абс_СценарийДляОперФакта.Получить(), 
	Константы.абс_СценарийДляФакта.Получить(), 
	Справочники.СценарииПланирования.НайтиПоНаименованию("КВ по поставке ПЛАН"),
	Справочники.СценарииПланирования.НайтиПоНаименованию("ТД Движение ТМЗ (закупка/поставка)"));
	
КонецФункции

//***** АБС. Проектный учет. Гетц
Функция ПолучитьТаблицуРаспределенияБюджетовПоПроектамПТиУ(Документ, ИмяТЧ, МассивСчетовУслуг = Неопределено)
	ПроводитьПоПроектномуУчету = Константы.абс_ПроведениеПоМеханизмуПроектногоУчета.Получить();
	Если Не ПроводитьПоПроектномуУчету Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	//АБС ВСТАВКА 46578  24.09.2014 10:19:04  Шамов
	//Если ИмяТЧ = "Услуги" Или ИмяТЧ = "Оборудование" Тогда 
	Если ИмяТЧ = "Услуги" 
		Или ИмяТЧ = "Оборудование" 
		Или ИмяТЧ = "Товары" Тогда
		//АБС ВСТАВКА 46578 КОНЕЦ
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслугТаблица.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ,
		|	ПоступлениеТоваровУслугТаблица.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугТаблица.СчетЗатрат,
		|	ПоступлениеТоваровУслугТаблица.ОбъектСтроительства,
		|	абс_ЗакупочныйЗаказРаспределениеПоПроектам.Проект,
		//Сторчевой А.Н. НФС 2018 {
		|	ПоступлениеТоваровУслугТаблица.СтатьяОборотов,
		|	ПоступлениеТоваровУслугТаблица.абс_ТипСети,
		|	ПоступлениеТоваровУслугТаблица.абс_КВ,
		|	ПоступлениеТоваровУслугТаблица.абс_ТЭО,
		|	ПоступлениеТоваровУслугТаблица.абс_ЦФУ,
		|	ПоступлениеТоваровУслугТаблица.ttk_ОбъектБюджетирования,
		|	ПоступлениеТоваровУслугТаблица.ttk_Город,
		|	ПоступлениеТоваровУслугТаблица.Сумма КАК СуммаИтого,
		//} Сторчевой А.Н. НФС 2018
		|	абс_ЗакупочныйЗаказРаспределениеПоПроектам.ДоляРаспределения КАК ДоляРаспределения
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ПоступлениеТоваровУслугТаблица.абс_ЗакупочныйЗаказТЧ = ЗНАЧЕНИЕ(Документ.абс_ЗакупочныйЗаказ.ПустаяСсылка)
		|					ИЛИ ПоступлениеТоваровУслугТаблица.абс_ЗакупочныйЗаказТЧ = НЕОПРЕДЕЛЕНО
		|				ТОГДА ПоступлениеТоваровУслугТаблица.Ссылка.абс_ЗакупочныйЗаказ
		|			ИНАЧЕ ПоступлениеТоваровУслугТаблица.абс_ЗакупочныйЗаказТЧ
		|		КОНЕЦ КАК ЗакупочныйЗаказ,
		//Сторчевой А.Н. НФС 2018 {
		|		ПоступлениеТоваровУслугТаблица.СтатьяОборотов,
		|		ПоступлениеТоваровУслугТаблица.абс_ТипСети,
		|		ПоступлениеТоваровУслугТаблица.абс_КВ,
		|		ПоступлениеТоваровУслугТаблица.абс_ТЭО,
		|		ПоступлениеТоваровУслугТаблица.абс_ЦФУ,
		|		ПоступлениеТоваровУслугТаблица.ttk_ОбъектБюджетирования,
		|		ПоступлениеТоваровУслугТаблица.ttk_Город,
		//} Сторчевой А.Н. НФС 2018    
		|		СУММА(ВЫБОР
		|				КОГДА ПоступлениеТоваровУслугТаблица.Ссылка.СуммаВключаетНДС
		|					ТОГДА ПоступлениеТоваровУслугТаблица.Сумма - ПоступлениеТоваровУслугТаблица.СуммаНДС
		|				ИНАЧЕ ПоступлениеТоваровУслугТаблица.Сумма
		|			КОНЕЦ) КАК Сумма,
		|		" + ?(Не ИмяТЧ = "Услуги", "ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)", "ПоступлениеТоваровУслугТаблица.СчетЗатрат") + " КАК СчетЗатрат,
		|		" + ?(Не ИмяТЧ = "Услуги", "ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)", "ПоступлениеТоваровУслугТаблица.ОбъектСтроительства") + " КАК ОбъектСтроительства
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг."+ ИмяТЧ + " КАК ПоступлениеТоваровУслугТаблица
		|	ГДЕ
		|		ПоступлениеТоваровУслугТаблица.Ссылка = &Ссылка
		|		И (ПоступлениеТоваровУслугТаблица.абс_Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|				ИЛИ ПоступлениеТоваровУслугТаблица.абс_Проект = НЕОПРЕДЕЛЕНО)
		|		" + ?(Не ИмяТЧ = "Услуги", "", "И ВЫБОР
		|				КОГДА ПоступлениеТоваровУслугТаблица.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|						ИЛИ ПоступлениеТоваровУслугТаблица.СчетЗатрат = НЕОПРЕДЕЛЕНО
		|					ТОГДА ВЫБОР
		|							КОГДА ПоступлениеТоваровУслугТаблица.абс_ЗакупочныйЗаказТЧ = ЗНАЧЕНИЕ(Документ.абс_ЗакупочныйЗаказ.ПустаяСсылка)
		|									ИЛИ ПоступлениеТоваровУслугТаблица.абс_ЗакупочныйЗаказТЧ = НЕОПРЕДЕЛЕНО
		|								ТОГДА (НЕ ПоступлениеТоваровУслугТаблица.Ссылка.абс_ЗакупочныйЗаказ.РасходыБудущихПериодов)
		|							ИНАЧЕ (НЕ ПоступлениеТоваровУслугТаблица.абс_ЗакупочныйЗаказТЧ.РасходыБудущихПериодов)
		|						КОНЕЦ
		|				ИНАЧЕ ПоступлениеТоваровУслугТаблица.СчетЗатрат В ИЕРАРХИИ (&СчетаУслуг)
		|			КОНЕЦ") + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВЫБОР
		|			КОГДА ПоступлениеТоваровУслугТаблица.абс_ЗакупочныйЗаказТЧ = ЗНАЧЕНИЕ(Документ.абс_ЗакупочныйЗаказ.ПустаяСсылка)
		|					ИЛИ ПоступлениеТоваровУслугТаблица.абс_ЗакупочныйЗаказТЧ = НЕОПРЕДЕЛЕНО
		|				ТОГДА ПоступлениеТоваровУслугТаблица.Ссылка.абс_ЗакупочныйЗаказ
		|			ИНАЧЕ ПоступлениеТоваровУслугТаблица.абс_ЗакупочныйЗаказТЧ
		|		КОНЕЦ,
		//Сторчевой А.Н. НФС 2018 {
		|		ПоступлениеТоваровУслугТаблица.СтатьяОборотов,
		|		ПоступлениеТоваровУслугТаблица.абс_ТипСети,
		|		ПоступлениеТоваровУслугТаблица.абс_КВ,
		|		ПоступлениеТоваровУслугТаблица.абс_ТЭО,
		|		ПоступлениеТоваровУслугТаблица.абс_ЦФУ,
		|		ПоступлениеТоваровУслугТаблица.ttk_ОбъектБюджетирования,
		|		ПоступлениеТоваровУслугТаблица.ttk_Город,
		//} Сторчевой А.Н. НФС 2018    
		|		" + ?(Не ИмяТЧ = "Услуги", "ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)", "ПоступлениеТоваровУслугТаблица.СчетЗатрат") + ",
		|		" + ?(Не ИмяТЧ = "Услуги", "ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)", "ПоступлениеТоваровУслугТаблица.ОбъектСтроительства") + ") КАК ПоступлениеТоваровУслугТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.абс_ЗакупочныйЗаказ.РаспределениеПоПроектам КАК абс_ЗакупочныйЗаказРаспределениеПоПроектам
		|		ПО ПоступлениеТоваровУслугТаблица.ЗакупочныйЗаказ = абс_ЗакупочныйЗаказРаспределениеПоПроектам.Ссылка
		|		И абс_ЗакупочныйЗаказРаспределениеПоПроектам.ДоляРаспределения > 0
		|ИТОГИ
		|	МАКСИМУМ(Сумма),
		//Сторчевой А.Н. НФС 2018 {
		|	СУММА(СуммаИтого),
		//} Сторчевой А.Н. НФС 2018 НФС
		
		|	СУММА(ДоляРаспределения)
		|ПО
		|	ЗакупочныйЗаказ";
		
		Если МассивСчетовУслуг = Неопределено Тогда //***** Гетц. проектный учет. 15.12.13 Добавлена возможность передавать массив счетов
			МассивСчетовУслуг = Новый Массив;
			МассивСчетовУслуг.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("08")); //***** Гетц. Проектный учет. 12.12.13. Убираем счет 08 из списка  // 26.02.2014 Возарвщаем 08
			МассивСчетовУслуг.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("20"));
			МассивСчетовУслуг.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("25"));
			МассивСчетовУслуг.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("26"));
			МассивСчетовУслуг.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("44"));
			МассивСчетовУслуг.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("91"));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СчетаУслуг", МассивСчетовУслуг);
		Запрос.УстановитьПараметр("Ссылка", Документ);
		ДеревоДляРаспределения = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Возврат ДеревоДляРаспределения;
	Иначе 
		Возврат Неопределено
	КонецЕсли;
КонецФункции

Процедура РаспределитьБюджетыПоПроектамПТиУ(Документ, ДеревоДляРаспределения, Движения, Сценарий, Отказ, МассивДопКолонок = Неопределено)
	
	ПроводитьПоПроектномуУчету = Константы.абс_ПроведениеПоМеханизмуПроектногоУчета.Получить();
	Если Не ПроводитьПоПроектномуУчету Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДеревоДляРаспределения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не МассивДопКолонок = Неопределено Тогда 
		Для Каждого ИмяКолонки Из МассивДопКолонок Цикл 
			Если Движения.Колонки.Найти(ИмяКолонки) = Неопределено Тогда 
				Движения.Колонки.Добавить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Для Каждого СтрокаЗЗ Из ДеревоДляРаспределения.Строки Цикл 
		ИсходнаяСумма = СтрокаЗЗ.Сумма;
		//Сторчевой А.Н. НФС 2018 {
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
			ИсходнаяСумма = СтрокаЗЗ.СуммаИтого;
		КонецЕсли;
		//} Сторчевой А.Н. НФС 2018
		СуммаРаспределенных = 0;
		Сч = 0;
		Для Каждого СтрокаПроект Из СтрокаЗЗ.Строки Цикл 
			Если Не ЗначениеЗаполнено(СтрокаПроект.Проект) Тогда 
				//Сообщить("Неверно заполнено распределение по проектам для закупочного заказа " + СтрокаЗЗ.ЗакупочныйЗаказ + ". Записаны обороты бюджета с пустым проектом.");
				ДоляРаспределения = 1;
				ДоляРаспределенияСумма = 1;
			Иначе 
				ДоляРаспределения = СтрокаПроект.ДоляРаспределения;
				ДоляРаспределенияСумма = СтрокаЗЗ.ДоляРаспределения;
			КонецЕсли;
			Сч = Сч + 1;
			
			Движение = Движения.Добавить();
			Движение.Период = Документ.Дата;
			
			ЗаполнитьЗначенияСвойств(Движение, СтрокаПроект);
			
			ЗЗ = СтрокаПроект.ЗакупочныйЗаказ; 				
			
			Движение.Сценарий = Сценарий;
			Движение.СтатьяОборотов = ЗЗ.БюджетнаяСтатья;
			Движение.Валюта = Документ.ВалютаДокумента;			
			Движение.Контрагент = Документ.Контрагент;				
			Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
			Движение.абс_ТипКонтрагента = ЗЗ.ТипКонтрагента;
			Движение.абс_ЦФУ = ЗЗ.ЦФУ;
			Движение.ЦФО = ЗЗ.ЦФО;
			Движение.Организация = ЗЗ.Организация;
			Движение.абс_ТипСети = ЗЗ.типСети;
			Движение.абс_КВ = ЗЗ.КВ;
			Движение.абс_ТЭО = ЗЗ.ТЭО;
			Движение.абс_ТипРасхода = ЗЗ.ТипРасхода;			
			Движение.Проект = СтрокаПроект.Проект;
			Если мВалютаРегламентированногоУчета = Документ.ВалютаДокумента Тогда
				Курс = 1;
				Кратность = 1;
			Иначе
				Курс = Документ.КурсВзаиморасчетов;
				Кратность = Документ.КратностьВзаиморасчетов;					
			КонецЕсли;
			
			СуммаПоПроекту = СтрокаЗЗ.Сумма / ДоляРаспределенияСумма * ДоляРаспределения;
			//Сторчевой А.Н. НФС 2018 {
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
				СуммаПоПроекту = СтрокаПроект.Сумма / ДоляРаспределенияСумма * ДоляРаспределения;
			КонецЕсли;
			//} Сторчевой А.Н. НФС 2018
			СуммаРаспределенных = СуммаРаспределенных + Окр(СуммаПоПроекту, 2);
			Если Сч = СтрокаЗЗ.Строки.Количество() Тогда 
				СуммаПоПроекту = СуммаПоПроекту + (ИсходнаяСумма - СуммаРаспределенных);
			КонецЕсли;
			
			Движение.ВалютнаяСумма = СуммаПоПроекту;
			Движение.СуммаУпр = Движение.ВалютнаяСумма * Курс / Кратность;
			Движение.СуммаСценария = Движение.СуммаУпр;
			Движение.абс_СчетБУ = СтрокаПроект.СчетЗатрат;
			
			//Сторчевой А.Н. 05.12.2017 НФС {
			Движение.СтатьяОборотов 			= СтрокаПроект.СтатьяОборотов;
			Движение.абс_ТипСети 				= СтрокаПроект.абс_ТипСети;
			Движение.абс_КВ 					= СтрокаПроект.абс_КВ;
			Движение.абс_ТЭО 					= СтрокаПроект.абс_ТЭО;
			Движение.абс_ЦФУ 					= СтрокаПроект.абс_ЦФУ;
			Движение.ttk_ОбъектБюджетирования	= СтрокаПроект.ttk_ОбъектБюджетирования;
			Движение.ttk_Город		 			= СтрокаПроект.ttk_Город;
			// } Сторчевой А.Н. 05.12.2017 НФС
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ПровестиУслугиКакЗатратыКРаспределению(ТабДвижений, Документ, НазваниеТЧ, Отказ)
	Если Не глЗначениеПеременной("абс_ПроектныйУчет") 		
		Или Не НазваниеТЧ = "Услуги" 
		Или Документ[НазваниеТЧ].Количество() = 0 
		Или Не ЗначениеЗаполнено(Документ.ДоговорКонтрагента.абс_МетодРаспределения) Тогда 
		Возврат;
	КонецЕсли;
	
	Ресурс = ?(ЗначениеЗаполнено(Документ.абс_Ресурс), Документ.абс_Ресурс, Документ.ДоговорКонтрагента.абс_РесурсПроекта);
	Если Документ.ДоговорКонтрагента.абс_МетодРаспределения = Перечисления.абс_МетодыРаспределенияРесурсовПоПроектам.ПоНатуральнымПоказателям Тогда 
		Если Не ЗначениеЗаполнено(Ресурс) Тогда 
			ОбщегоНазначения.Сообщение("Выбран метод распределения затрат по проекту ""По натуральным показателям"", но не заполнен ресурс проекта для распределения");
			Возврат;
		КонецЕсли;
		//Необходимо записать в отдельный регистр, а движения по оборотам бюджетов - очичтить проект
		Набор = РегистрыНакопления.абс_ЗатратыПоПроектам.СоздатьНаборЗаписей();
		ДвиженияПоЗатратам = Набор.Выгрузить();
		ДвиженияПоЗатратам.Очистить();
		
		Для Каждого СтрокаДвижений Из ТабДвижений Цикл 
			НовоеДвижение = ДвиженияПоЗатратам.Добавить();
			НовоеДвижение.ЦФО = СтрокаДвижений.ЦФО;
			НовоеДвижение.СтатьяОборотов = СтрокаДвижений.СтатьяОборотов;
			НовоеДвижение.КВ = СтрокаДвижений.абс_КВ;
			НовоеДвижение.ТЭО = СтрокаДвижений.абс_ТЭО;
			НовоеДвижение.ЦФУ = СтрокаДвижений.абс_ЦФУ;
			НовоеДвижение.Организация = СтрокаДвижений.Организация;
			НовоеДвижение.ДоговорКонтрагента = СтрокаДвижений.ДоговорКонтрагента;
			НовоеДвижение.МетодРаспределения = СтрокаДвижений.ДоговорКонтрагента.абс_МетодРаспределения;
			НовоеДвижение.Период = СтрокаДвижений.Период;
			НовоеДвижение.Сумма = СтрокаДвижений.СуммаУпр;
			НовоеДвижение.РесурсПроекта = Ресурс;
			
			СтрокаДвижений.Проект = Справочники.Проекты.Распределять;
			
		КонецЦикла;
		
	ИначеЕсли Документ.ДоговорКонтрагента.абс_МетодРаспределения = Перечисления.абс_МетодыРаспределенияРесурсовПоПроектам.НаПроект Тогда 
		Возврат;
	Иначе
		
		Набор = РегистрыНакопления.абс_ЗатратыПоПроектам.СоздатьНаборЗаписей();
		ДвиженияПоЗатратам = Набор.Выгрузить();
		ДвиженияПоЗатратам.Очистить();
		// Необходимо распределять по выручке или затратам в конце месяца - необходимо проект заменить на предопределенный
		Для Каждого СтрокаДвижений Из ТабДвижений Цикл 
			НовоеДвижение = ДвиженияПоЗатратам.Добавить();
			НовоеДвижение.ЦФО = СтрокаДвижений.ЦФО;
			НовоеДвижение.СтатьяОборотов = СтрокаДвижений.СтатьяОборотов;
			НовоеДвижение.КВ = СтрокаДвижений.абс_КВ;
			НовоеДвижение.ТЭО = СтрокаДвижений.абс_ТЭО;
			НовоеДвижение.ЦФУ = СтрокаДвижений.абс_ЦФУ;
			НовоеДвижение.Организация = СтрокаДвижений.Организация;
			НовоеДвижение.ДоговорКонтрагента = СтрокаДвижений.ДоговорКонтрагента;
			НовоеДвижение.МетодРаспределения = СтрокаДвижений.ДоговорКонтрагента.абс_МетодРаспределения;
			НовоеДвижение.Период = СтрокаДвижений.Период;
			НовоеДвижение.Сумма = СтрокаДвижений.СуммаУпр;
			
			СтрокаДвижений.Проект = Справочники.Проекты.Распределять;
		КонецЦикла;
		
	КонецЕсли;
	
	ПолныеПрава.ЗаписатьНаборЗаписейНаСервере("абс_ЗатратыПоПроектам", Документ.Ссылка, ДвиженияПоЗатратам,, Отказ);		
КонецПроцедуры

Процедура ВыполнитьДвиженияПоОбъектамСтроительства(Документ, НазваниеТЧ, ТабДвиженийОборотыБюджетов, Отказ)
	Если Не глЗначениеПеременной("абс_ПроектныйУчет") 		
		Или Не НазваниеТЧ = "Услуги" 
		Или Документ[НазваниеТЧ].Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ТабДвижений	= ТабДвиженийОборотыБюджетов.Скопировать();
	ТабДвижений.Очистить();
	
	
	Отказ = Ложь;
	//*****АБС. Гетц. Проектный учет. Для строк ТЧ, где не заполнен проект выполняем распределение по таблице распределения закупочного заказа
	МассивСчетовУслуг = Новый Массив;
	МассивСчетовУслуг.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("08"));
	
	МассивДопКолонок = Новый Массив;
	МассивДопКолонок.Добавить("ОбъектСтроительства");
	
	ДеревоДляРаспределенияУслуг = ПолучитьТаблицуРаспределенияБюджетовПоПроектамПТиУ(Документ, НазваниеТЧ, МассивСчетовУслуг);
	РаспределитьБюджетыПоПроектамПТиУ(Документ, ДеревоДляРаспределенияУслуг, ТабДвижений, Справочники.СценарииПланирования.ПустаяСсылка(), Отказ, МассивДопКолонок);
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа = глЗначениеПеременной("абс_ДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа");
	
	Для каждого ТекСтрокаУслуги Из Документ[НазваниеТЧ] Цикл
		
		
		Если Не ЗначениеЗаполнено(ТекСтрокаУслуги.абс_Проект) Тогда 
			Продолжить;
		КонецЕсли;		
		
		ЭтоУслуга = (Найти("08",Лев(ТекСтрокаУслуги.СчетЗатрат.Код,2))>0);//***** Гетц. Проектный учет. 15.12.13. Только счет 08
		
		Если ЭтоУслуга Тогда			
			
			Движение = ТабДвижений.Добавить();
			
			Движение.Период = Документ.Дата;
			Если Движение.Период >= мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа И ЗначениеЗаполнено(ТекСтрокаУслуги.абс_ЗакупочныйЗаказТЧ) Тогда
				ЗЗ = ТекСтрокаУслуги.абс_ЗакупочныйЗаказТЧ; 				
			Иначе
				ЗЗ = Документ.абс_ЗакупочныйЗаказ;
			КонецЕсли;
			
			//Движение.Сценарий = Сценарий;
			Движение.СтатьяОборотов = ЗЗ.БюджетнаяСтатья;
			Движение.Валюта = Документ.ВалютаДокумента;			
			Движение.Контрагент = Документ.Контрагент;
			Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
			Движение.абс_ТипКонтрагента = ЗЗ.ТипКонтрагента;
			Движение.абс_ЦФУ = ЗЗ.ЦФУ;
			Движение.ЦФО = ЗЗ.ЦФО;
			Движение.Организация = ЗЗ.Организация;
			Движение.абс_ТипСети = ЗЗ.типСети;
			Движение.абс_КВ = ЗЗ.КВ;
			Движение.абс_ТЭО = ЗЗ.ТЭО;
			Движение.абс_ТипРасхода = ЗЗ.ТипРасхода;
			//Движение.ОбъектСтроительства = ТекСтрокаУслуги.ОбъектСтроительства;
			
			Попытка
				Если ЗначениеЗаполнено(ТекСтрокаУслуги.абс_Проект) Тогда 
					Движение.Проект = ТекСтрокаУслуги.абс_Проект;
				ИначеЕсли ЗначениеЗаполнено(ТекСтрокаУслуги.Проект) Тогда 
					Движение.Проект = ТекСтрокаУслуги.Проект;
				Иначе
					Движение.Проект = ТекСтрокаУслуги.Заказ.Проект;
				КонецЕсли;
			Исключение
				Движение.Проект = Справочники.Проекты.ПустаяСсылка();
			КонецПопытки;
			
			Если мВалютаРегламентированногоУчета = Документ.ВалютаДокумента Тогда
				Курс = 1;
				Кратность = 1;
			Иначе
				Курс = Документ.КурсВзаиморасчетов;
				Кратность = Документ.КратностьВзаиморасчетов;					
			КонецЕсли;
			Движение.ВалютнаяСумма = ?(Документ.СуммаВключаетНДС, ТекСтрокаУслуги.Сумма - ТекСтрокаУслуги.СуммаНДС, ТекСтрокаУслуги.Сумма);
			Движение.СуммаУпр = Движение.ВалютнаяСумма * Курс / Кратность;
			Движение.СуммаСценария = Движение.СуммаУпр;
			
			Движение.абс_СчетБУ = ТекСтрокаУслуги.СчетЗатрат;			
		КонецЕсли;
	КонецЦикла;
	
	//аб тупиков
	ПолныеПрава.ЗаписатьНаборЗаписейНаСервере("ОборотыБюджетов", Документ.Ссылка, ТабДвижений,, Отказ);
	
	Набор = РегистрыНакопления.абс_ЗатратыНаОбъектыСтроительстваПоПроектам.СоздатьНаборЗаписей();
	ДвиженияПоЗатратам = Набор.Выгрузить();
	ДвиженияПоЗатратам.Очистить();
	
	Для Каждого СтрокаДвижений Из ТабДвижений Цикл 
		Если Не ЗначениеЗаполнено(СтрокаДвижений.Проект) Тогда 
			Продолжить;
		КонецЕсли;
		НовоеДвижение = ДвиженияПоЗатратам.Добавить();
		НовоеДвижение.ЦФО = СтрокаДвижений.ЦФО;
		НовоеДвижение.СтатьяОборотов = СтрокаДвижений.СтатьяОборотов;
		НовоеДвижение.КВ = СтрокаДвижений.абс_КВ;
		НовоеДвижение.ТЭО = СтрокаДвижений.абс_ТЭО;
		НовоеДвижение.ЦФУ = СтрокаДвижений.абс_ЦФУ;
		НовоеДвижение.Организация = СтрокаДвижений.Организация;
		НовоеДвижение.Период = СтрокаДвижений.Период;
		НовоеДвижение.Сумма = СтрокаДвижений.СуммаУпр;
		//НовоеДвижение.ОбъектСтроительства = СтрокаДвижений.ОбъектСтроительства;
		
		НовоеДвижение.Проект = СтрокаДвижений.Проект;
		
	КонецЦикла;
	
	ПолныеПрава.ЗаписатьНаборЗаписейНаСервере("абс_ЗатратыНаОбъектыСтроительстваПоПроектам", Документ.Ссылка, ДвиженияПоЗатратам,, Отказ);		
КонецПроцедуры
//*****\\ АБС. Проектный учет. Гетц

// АБС ВСТАВКА Фролов 20121026
// Контроль использования БС и ЦФО по году
Функция ПроверитьСтатьюОборотовПоГодуИспользования(СтатьиБС, Период, Регистратор, Отказ = Ложь, ПлюсОдинГод = Ложь) Экспорт
	
	
	Период2 = ?(ПлюсОдинГод, абс_МаксимальныйГодИзДокумента(Регистратор, Период), Период);
	Если НачалоГода(Период2) = НачалоГода(Период) Тогда
		ПлюсОдинГод = Ложь;	
	КонецЕсли;		
	ТекстПериод = ?(ПлюсОдинГод,Формат(Период, "ДФ=yyyy") + " год и " + Формат(Период2, "ДФ=yyyy") + " год",Формат(Период2, "ДФ=yyyy") + " год");
	
	Запрос = Новый Запрос(	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыИспользования.Ссылка,
	|	1 КАК Элементов
	|ПОМЕСТИТЬ ПР
	|ИЗ
	|	Справочник.СтатьиОборотовПоБюджетам.абс_ПериодыИспользования КАК ПериодыИспользования
	|ГДЕ
	|	ПериодыИспользования.Ссылка В(&СписокБС)
	|	И ПериодыИспользования.Период = НАЧАЛОПЕРИОДА(&Период, ГОД)
	|	И ПериодыИспользования.Использование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодыИспользования.Ссылка,
	|	1
	|ИЗ
	|	Справочник.СтатьиОборотовПоБюджетам.абс_ПериодыИспользования КАК ПериодыИспользования
	|ГДЕ
	|	ПериодыИспользования.Ссылка В(&СписокБС)
	|	И ПериодыИспользования.Период = НАЧАЛОПЕРИОДА(&Период2, ГОД)
	|	И ПериодыИспользования.Использование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПР.Ссылка,
	|	СУММА(ПР.Элементов) КАК Элементов
	|ПОМЕСТИТЬ вр
	|ИЗ
	|	ПР КАК ПР
	|
	|СГРУППИРОВАТЬ ПО
	|	ПР.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПР.Элементов) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Спр.Ссылка КАК Ссылка,
	|	Спр.Ссылка.Код КАК Код
	|ИЗ
	|	Справочник.СтатьиОборотовПоБюджетам КАК Спр
	|ГДЕ
	|	Спр.Ссылка В(&СписокБС)
	|	И (НЕ Спр.Ссылка В
	|				(ВЫБРАТЬ
	|					вр.Ссылка
	|				ИЗ
	|					вр КАК вр))
	|
	|СГРУППИРОВАТЬ ПО
	|	Спр.Ссылка,
	|	Спр.Ссылка.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вр"
	);
	
	Запрос.УстановитьПараметр("СписокБС", СтатьиБС);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Период2", Период2);
	Если не ПлюсОдинГод Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"> 1","> 0");	
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();  	
	Пока Выборка.Следующий() Цикл  		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("" + Регистратор + " - Статья " + СокрЛП(Выборка.Ссылка) + " (Код: " + СокрЛП(Выборка.Код) + ") " + "не используется в периоде " + ТекстПериод + "!", Отказ);		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

Функция ПроверитьЦФОПоГодуИспользования(ЦФО, Период, Регистратор, Отказ = Ложь, ПлюсОдинГод = Ложь) Экспорт
	
	
	Период2 = ?(ПлюсОдинГод, абс_МаксимальныйГодИзДокумента(Регистратор, Период), Период);
	Если НачалоГода(Период2) = НачалоГода(Период) Тогда
		ПлюсОдинГод = Ложь;	
	КонецЕсли;	
	ТекстПериод = ?(ПлюсОдинГод,Формат(Период, "ДФ=yyyy") + " год и " + Формат(Период2, "ДФ=yyyy") + " год",Формат(Период2, "ДФ=yyyy") + " год");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыИспользования.Ссылка,
	|	1 КАК Элементов
	|ПОМЕСТИТЬ ПР
	|ИЗ
	|	Справочник.Подразделения.абс_ПериодыИспользования КАК ПериодыИспользования
	|ГДЕ
	|	ПериодыИспользования.Ссылка В(&ЦФО)
	|	И ПериодыИспользования.Период = НАЧАЛОПЕРИОДА(&Период, ГОД)
	|	И ПериодыИспользования.Использование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодыИспользования.Ссылка,
	|	1
	|ИЗ
	|	Справочник.Подразделения.абс_ПериодыИспользования КАК ПериодыИспользования
	|ГДЕ
	|	ПериодыИспользования.Ссылка В(&ЦФО)
	|	И ПериодыИспользования.Период = НАЧАЛОПЕРИОДА(&Период2, ГОД)
	|	И ПериодыИспользования.Использование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПР.Ссылка,
	|	СУММА(ПР.Элементов) КАК Элементов
	|ПОМЕСТИТЬ вр
	|ИЗ
	|	ПР КАК ПР
	|
	|СГРУППИРОВАТЬ ПО
	|	ПР.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПР.Элементов) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Подразделения.Ссылка КАК ЦФО,
	|	Подразделения.Ссылка.Код КАК Код
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Ссылка В(&ЦФО)
	|	И ВЫБОР
	|			КОГДА &НеДваГода
	|				ТОГДА (НЕ НАЧАЛОПЕРИОДА(Подразделения.Ссылка.абс_ГодИспользования, ГОД) = НАЧАЛОПЕРИОДА(&Период, ГОД))
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (НЕ Подразделения.Ссылка В
	|				(ВЫБРАТЬ
	|					вр.Ссылка
	|				ИЗ
	|					вр КАК вр))
	|
	|СГРУППИРОВАТЬ ПО
	|	Подразделения.Ссылка,
	|	Подразделения.Ссылка.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вр"
	);
	
	Запрос.УстановитьПараметр("ЦФО", ЦФО);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Период2", Период2);
	Запрос.УстановитьПараметр("НеДваГода", не ПлюсОдинГод);
	Если не ПлюсОдинГод Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"> 1","> 0");	
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл  		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("" + Регистратор + " - ЦФО " + СокрЛП(Выборка.ЦФО) + " (Код: " + СокрЛП(Выборка.Код) + ") " + "не используется в периоде " + ТекстПериод+ "!", Отказ);		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

//АБС ВСТАВКА №45919 НАЧАЛО «21 августа 2014 г.», Пополитов
Функция абс_МаксимальныйГодИзДокумента(ЗакупочныйЗаказ, Период) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ",ЗакупочныйЗаказ);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ЗакупочныйЗаказГрафикОплат.Период
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.ГрафикОплат КАК абс_ЗакупочныйЗаказГрафикОплат
	|ГДЕ
	|	абс_ЗакупочныйЗаказГрафикОплат.Ссылка = &ЗакупочныйЗаказ
	|	И абс_ЗакупочныйЗаказГрафикОплат.ВалютнаяСуммаБезНДС <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	абс_ЗакупочныйЗаказГрафикПоставок.Период
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.ГрафикПоставок КАК абс_ЗакупочныйЗаказГрафикПоставок
	|ГДЕ
	|	абс_ЗакупочныйЗаказГрафикПоставок.Ссылка = &ЗакупочныйЗаказ
	|	И абс_ЗакупочныйЗаказГрафикПоставок.ВалютнаяСуммаБезНДС <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ВТ.Период) КАК Период
	|ИЗ
	|	ВТ КАК ВТ";
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Возврат ?(Результат.Период = Null, ДобавитьМесяц(Период,12), Результат.Период);
	
КонецФункции	
//\\АБС ВСТАВКА №45919 КОНЕЦ

//АБС ВСТАВКА №38427 НАЧАЛО «12 февраля 2014 г.», Пополитов
Функция ПолучитьСценарийДляКонтроляДДС(Организация, КонтрольВключен = Истина, БюджетнаяСтатьяКВ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;      
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РС.Организация,
	|	РС.Сценарий,
	|	РС.КонтрольПоОрганизации,
	|	РС.ПорядокСписанияЛимитаПоСценарию КАК ПорядокСписанияЛимитаПоСценарию
	|ИЗ
	|	РегистрСведений.абс_КонтрольЛимитаДДСпоОрганизацииИСценарию КАК РС
	|ГДЕ
	|	РС.Организация = &Организация
	|	И ВЫБОР
	|			КОГДА &КонтрольВключен
	|				ТОГДА РС.КонтрольПоОрганизации
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &абс_БюджетОтбор = НЕОПРЕДЕЛЕНО
	|				ТОГДА РС.Сценарий.абс_Бюджет = &абс_Бюджет
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСписанияЛимитаПоСценарию";
	Запрос.УстановитьПараметр("КонтрольВключен", КонтрольВключен);
	Запрос.УстановитьПараметр("Организация"    , Организация);  
	Запрос.УстановитьПараметр("абс_БюджетОтбор", БюджетнаяСтатьяКВ);
	Запрос.УстановитьПараметр("абс_Бюджет"     , ?(БюджетнаяСтатьяКВ = Истина,Перечисления.абс_Бюджет.абс_ДДС_САРЕХ,Перечисления.абс_Бюджет.абс_ДДС_ОРЕХ));
	
	Результат = Запрос.Выполнить().Выбрать();
	СписокДДС = Новый СписокЗначений;
	Если ЗначениеЗаполнено(глЗначениеПеременной("абс_СценарийДДС_ОперФакт")) Тогда	
		СписокДДС.Добавить(глЗначениеПеременной("абс_СценарийДДС_ОперФакт"));
	КонецЕсли;
	Если ЗначениеЗаполнено(глЗначениеПеременной("абс_СценарийДДС")) Тогда	
		СписокДДС.Добавить(глЗначениеПеременной("абс_СценарийДДС"));
	КонецЕсли;
	Пока Результат.Следующий() Цикл
		СписокДДС.Добавить(Результат.Сценарий);	
	КонецЦикла;	
	
	Возврат СписокДДС;
	
КонецФункции	
//\\АБС ВСТАВКА №38427 КОНЕЦ


//абс Родин Лимитный контроль
Функция ПолучитьОстатокПоЛимиту(ПериодОстатков,ДоговорКонтрагента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ) КАК Период,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот
	|ПОМЕСТИТЬ втПоступленияТоваровУслуг
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, &КонецПериода, Регистратор, СчетДт В ИЕРАРХИИ (&СчетаУчетаБУ), , , , ) КАК ХозрасчетныйОборотыДтКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ХозрасчетныйОборотыДтКт.Регистратор = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента В(&ДоговорКонтрагента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслугТовары.Ссылка.Дата, МЕСЯЦ),
	|	ПоступлениеТоваровУслугТовары.Ссылка.ДоговорКонтрагента,
	|	ПоступлениеТоваровУслугТовары.Сумма
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка.ДоговорКонтрагента В(&ДоговорКонтрагента)
	|	И (ПоступлениеТоваровУслугТовары.Ссылка.абс_Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыПервичныхДокументов.СогласованиеОФК)
	|			ИЛИ ПоступлениеТоваровУслугТовары.Ссылка.абс_Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыПервичныхДокументов.ОбработкаБУхгалтером))
	|	И ПоступлениеТоваровУслугТовары.СчетУчетаБУ В ИЕРАРХИИ(&СчетаУчетаБУ)
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Дата < &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслугУслуги.Ссылка.Дата, МЕСЯЦ),
	|	ПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента,
	|	ПоступлениеТоваровУслугУслуги.Сумма
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента В(&ДоговорКонтрагента)
	|	И (ПоступлениеТоваровУслугУслуги.Ссылка.абс_Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыПервичныхДокументов.СогласованиеОФК)
	|			ИЛИ ПоступлениеТоваровУслугУслуги.Ссылка.абс_Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыПервичныхДокументов.ОбработкаБУхгалтером))
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата < &КонецПериода
	|	И ПоступлениеТоваровУслугУслуги.СчетЗатрат В ИЕРАРХИИ(&СчетаУчетаБУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоступленияТоваровУслуг.Период,
	|	втПоступленияТоваровУслуг.ДоговорКонтрагента,
	|	СУММА(втПоступленияТоваровУслуг.СуммаОборот) КАК СуммаОборот
	|ПОМЕСТИТЬ втВсеТаблицы
	|ИЗ
	|	втПоступленияТоваровУслуг КАК втПоступленияТоваровУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	втПоступленияТоваровУслуг.Период,
	|	втПоступленияТоваровУслуг.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_ЛимитыПоДоговорам.ТипКонтроля,
	|	абс_ЛимитыПоДоговорам.Сумма КАК СуммаЛимита,
	|	абс_ЛимитыПоДоговорам.Договор КАК Договор,
	|	абс_ЛимитыПоДоговорам.ДатаНачалаЛимитногоКонтроля
	|ПОМЕСТИТЬ втЛимиты
	|ИЗ
	|	РегистрСведений.абс_ЛимитыПоДоговорам КАК абс_ЛимитыПоДоговорам
	|ГДЕ
	|	абс_ЛимитыПоДоговорам.Договор В(&ДоговорКонтрагента)
	|	И абс_ЛимитыПоДоговорам.ЛимитСогласован
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛимиты.Договор КАК Договор,
	|	втЛимиты.ТипКонтроля
	|ПОМЕСТИТЬ втТипыКонтроля
	|ИЗ
	|	втЛимиты КАК втЛимиты
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛимиты.Договор,
	|	втЛимиты.ТипКонтроля
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втВсеТаблицы.Период, втЛимиты.ДатаНачалаЛимитногоКонтроля) КАК Период,
	|	ЕСТЬNULL(втЛимиты.Договор, втВсеТаблицы.ДоговорКонтрагента) КАК Договор,
	|	ЕСТЬNULL(втВсеТаблицы.СуммаОборот, 0) КАК СуммаОборот,
	|	ЕСТЬNULL(втЛимиты.СуммаЛимита, 0) КАК СуммаЛимита
	|ПОМЕСТИТЬ втРезультат
	|ИЗ
	|	втВсеТаблицы КАК втВсеТаблицы
	|		ПОЛНОЕ СОЕДИНЕНИЕ втЛимиты КАК втЛимиты
	|		ПО (втВсеТаблицы.Период = НАЧАЛОПЕРИОДА(втЛимиты.ДатаНачалаЛимитногоКонтроля, МЕСЯЦ))
	|			И втВсеТаблицы.ДоговорКонтрагента = втЛимиты.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРезультат.Период,
	|	втРезультат.Договор,
	|	втТипыКонтроля.ТипКонтроля,
	|	втРезультат.СуммаОборот,
	|	втРезультат.СуммаЛимита
	|ИЗ
	|	втРезультат КАК втРезультат
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТипыКонтроля КАК втТипыКонтроля
	|		ПО втРезультат.Договор = втТипыКонтроля.Договор";
	
	////Если ЗначениеЗаполнено(Документ.Ссылка) Тогда	
	////	мКонецПериода = Новый Граница(Документ.МоментВремени(), ВидГраницы.Исключая);
	////Иначе
	////	мКонецПериода = Документ.Дата;
	////КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецПериода", ПериодОстатков);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СчетаУчетаБУ",ПолучитьСписокКонтролируемыхСчетов());
	
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции 

Функция ПолучитьОстатокПоЛимитуПоДоговору(ДоговорКонтрагента, НачалоПериода, КонецПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ) КАК Период,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот
	|ПОМЕСТИТЬ втПоступленияТоваровУслуг
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В ИЕРАРХИИ (&СчетаУчетаБУ), , , , ) КАК ХозрасчетныйОборотыДтКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ХозрасчетныйОборотыДтКт.Регистратор = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента В(&ДоговорКонтрагента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслугТовары.Ссылка.Дата, МЕСЯЦ),
	|	ПоступлениеТоваровУслугТовары.Ссылка.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугТовары.Сумма - ПоступлениеТоваровУслугТовары.СуммаНДС
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Сумма
	|	КОНЕЦ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка.ДоговорКонтрагента В(&ДоговорКонтрагента)
	|	И (ПоступлениеТоваровУслугТовары.Ссылка.абс_Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыПервичныхДокументов.СогласованиеОФК)
	|			ИЛИ ПоступлениеТоваровУслугТовары.Ссылка.абс_Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыПервичныхДокументов.ОбработкаБУхгалтером))
	|	И ПоступлениеТоваровУслугТовары.СчетУчетаБУ В ИЕРАРХИИ(&СчетаУчетаБУ)
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслугУслуги.Ссылка.Дата, МЕСЯЦ),
	|	ПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугУслуги.Сумма - ПоступлениеТоваровУслугУслуги.СуммаНДС
	|		ИНАЧЕ ПоступлениеТоваровУслугУслуги.Сумма
	|	КОНЕЦ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента В(&ДоговорКонтрагента)
	|	И (ПоступлениеТоваровУслугУслуги.Ссылка.абс_Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыПервичныхДокументов.СогласованиеОФК)
	|			ИЛИ ПоступлениеТоваровУслугУслуги.Ссылка.абс_Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыПервичныхДокументов.ОбработкаБУхгалтером))
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПоступлениеТоваровУслугУслуги.СчетЗатрат В ИЕРАРХИИ(&СчетаУчетаБУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоступленияТоваровУслуг.Период,
	|	втПоступленияТоваровУслуг.ДоговорКонтрагента,
	|	СУММА(втПоступленияТоваровУслуг.СуммаОборот) КАК СуммаОборот
	|ПОМЕСТИТЬ втВсеТаблицы
	|ИЗ
	|	втПоступленияТоваровУслуг КАК втПоступленияТоваровУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	втПоступленияТоваровУслуг.Период,
	|	втПоступленияТоваровУслуг.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_ЛимитыПоДоговорам.ТипКонтроля,
	|	абс_ЛимитыПоДоговорам.Сумма КАК СуммаЛимита,
	|	абс_ЛимитыПоДоговорам.Договор КАК Договор,
	|	абс_ЛимитыПоДоговорам.ДатаНачалаЛимитногоКонтроля
	|ПОМЕСТИТЬ втЛимиты
	|ИЗ
	|	РегистрСведений.абс_ЛимитыПоДоговорам КАК абс_ЛимитыПоДоговорам
	|ГДЕ
	|	абс_ЛимитыПоДоговорам.Договор В(&ДоговорКонтрагента)
	|	И абс_ЛимитыПоДоговорам.ЛимитСогласован
	|	И абс_ЛимитыПоДоговорам.ДатаНачалаЛимитногоКонтроля >= &НачалоПериода
	|	И абс_ЛимитыПоДоговорам.ДатаОкончанияЛимитногоКонтроля <= &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛимиты.Договор КАК Договор,
	|	втЛимиты.ТипКонтроля
	|ПОМЕСТИТЬ втТипыКонтроля
	|ИЗ
	|	втЛимиты КАК втЛимиты
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛимиты.Договор,
	|	втЛимиты.ТипКонтроля
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втВсеТаблицы.Период, втЛимиты.ДатаНачалаЛимитногоКонтроля) КАК Период,
	|	ЕСТЬNULL(втЛимиты.Договор, втВсеТаблицы.ДоговорКонтрагента) КАК Договор,
	|	ЕСТЬNULL(втВсеТаблицы.СуммаОборот, 0) КАК СуммаОборот,
	|	ЕСТЬNULL(втЛимиты.СуммаЛимита, 0) КАК СуммаЛимита
	|ПОМЕСТИТЬ втРезультат
	|ИЗ
	|	втВсеТаблицы КАК втВсеТаблицы
	|		ПОЛНОЕ СОЕДИНЕНИЕ втЛимиты КАК втЛимиты
	|		ПО (втВсеТаблицы.Период = НАЧАЛОПЕРИОДА(втЛимиты.ДатаНачалаЛимитногоКонтроля, МЕСЯЦ))
	|			И втВсеТаблицы.ДоговорКонтрагента = втЛимиты.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРезультат.Период,
	|	втРезультат.Договор,
	|	втТипыКонтроля.ТипКонтроля,
	|	втРезультат.СуммаОборот,
	|	втРезультат.СуммаЛимита
	|ИЗ
	|	втРезультат КАК втРезультат
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТипыКонтроля КАК втТипыКонтроля
	|		ПО втРезультат.Договор = втТипыКонтроля.Договор";
	
	////Если ЗначениеЗаполнено(Документ.Ссылка) Тогда	
	////	мКонецПериода = Новый Граница(Документ.МоментВремени(), ВидГраницы.Исключая);
	////Иначе
	////	мКонецПериода = Документ.Дата;
	////КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(КонецПериода));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СчетаУчетаБУ",ПолучитьСписокКонтролируемыхСчетов());
	
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции 

Функция ПолучитьЛимитыПоДоговору(Договор,ТолькоСогласованный) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ЛимитыПоДоговорам.ДатаОкончанияЛимитногоКонтроля КАК Месяц,
	|	абс_ЛимитыПоДоговорам.Сумма,
	|	абс_ЛимитыПоДоговорам.СуммаДляКорректировки,
	|	абс_ЛимитыПоДоговорам.ЭтоНовыйПериод,
	|	абс_ЛимитыПоДоговорам.ЛимитКУдалению
	|ИЗ
	|	РегистрСведений.абс_ЛимитыПоДоговорам КАК абс_ЛимитыПоДоговорам
	|ГДЕ
	|	абс_ЛимитыПоДоговорам.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ТолькоСогласованный", ТолькоСогласованный);
	
	Возврат(Запрос.Выполнить().Выгрузить());
	
КонецФункции 

Функция ПолучитьТекущийТипКонтроляПоДоговору(Договор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА абс_ЛимитыПоДоговорам.ТипКонтроляНовый = ЗНАЧЕНИЕ(перечисление.абс_ТипКонтроляЛимитов.ПустаяСсылка)
	|			ТОГДА абс_ЛимитыПоДоговорам.ТипКонтроля
	|		ИНАЧЕ абс_ЛимитыПоДоговорам.ТипКонтроляНовый
	|	КОНЕЦ КАК ТипКонтроля
	|ИЗ
	|	РегистрСведений.абс_ЛимитыПоДоговорам КАК абс_ЛимитыПоДоговорам
	|ГДЕ
	|	абс_ЛимитыПоДоговорам.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ТипКонтроля;
	Иначе
		Возврат Перечисления.абс_ТипКонтроляЛимитов.ПомесячныйКонтроль;;
	КонецЕсли;
	
КонецФункции 

Функция ПолучитьИсходныйТипКонтроляПоДоговору(Договор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ЛимитыПоДоговорам.ТипКонтроля
	|ИЗ
	|	РегистрСведений.абс_ЛимитыПоДоговорам КАК абс_ЛимитыПоДоговорам
	|ГДЕ
	|	абс_ЛимитыПоДоговорам.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ТипКонтроля;
	КонецЕсли;
	
КонецФункции 

Процедура СформироватьДвиженияПоЗатратамПоДоговорамСЛимитом(ДокументОбъект,СуммаПоДоговору,ДоговорКонтрагента,ТаблицаДвижений,НаборДвижений) Экспорт
	
	НоваяСтрока = ТаблицаДвижений.Добавить();
	НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
	НоваяСтрока.Сумма              = СуммаПоДоговору;
	
	НаборДвижений.мПериод          = ДокументОбъект.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборДвижений, Неопределено);
	
КонецПроцедуры

Функция ПолучитьСписокКонтролируемыхСчетов() Экспорт
	
	СписокКонтролируемыхСчетов = Новый Массив;
	СписокКонтролируемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	СписокКонтролируемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	СписокКонтролируемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СписокКонтролируемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СписокКонтролируемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	
	Возврат СписокКонтролируемыхСчетов;
КонецФункции 

Функция ПолучитьТаблицуЗатратПоДоговорам(ДокументОбъект,СтруктураТаблиц)
	
	ТаблицаЗатратПоДоговорам = Новый ТаблицаЗначений;
	ТаблицаЗатратПоДоговорам.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаЗатратПоДоговорам.Колонки.Добавить("Сумма");
	
	СписокКонтролируемыхСчетов =  ПолучитьСписокКонтролируемыхСчетов();
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.абс_РезервыПроизведенныхРасходов") Тогда 
		
		Для каждого Стр Из ДокументОбъект.Резервы Цикл
			Если ЗначениеЗаполнено(Стр.ДоговорКонтрагента) Тогда
				Если Стр.ДоговорКонтрагента.абс_ОсобыйПорядкокКонтроляЛимитов Тогда	
					Для каждого кСчет Из СписокКонтролируемыхСчетов Цикл
						Если БухгалтерскийУчет.ЭтоСубсчет(Стр.СчетЗатратБУ,кСчет) Тогда
							
							НоваяСтрока = ТаблицаЗатратПоДоговорам.Добавить();
							НоваяСтрока.ДоговорКонтрагента =  Стр.ДоговорКонтрагента;
							НоваяСтрока.Сумма              =  Стр.СуммаРНП - Стр.СуммаНДС;
							
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") или ТипЗнч(ДокументОбъект) = Тип("ДокументССылка.КорректировкаПоступления") Тогда
		
		Для каждого Стр Из СтруктураТаблиц.ТаблицаПоУслугам Цикл
			Для каждого кСчет Из СписокКонтролируемыхСчетов Цикл
				Если БухгалтерскийУчет.ЭтоСубсчет(Стр.СчетЗатрат,кСчет) Тогда
					
					НоваяСтрока = ТаблицаЗатратПоДоговорам.Добавить();
					НоваяСтрока.ДоговорКонтрагента =  ДокументОбъект.ДоговорКонтрагента;
					НоваяСтрока.Сумма              =  Стр.ПроводкаСумма;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	
		
		Для каждого Стр Из СтруктураТаблиц.ТаблицаПоТоварам Цикл
			Для каждого кСчет Из СписокКонтролируемыхСчетов Цикл
				Если БухгалтерскийУчет.ЭтоСубсчет(Стр.СчетУчетаБУ,кСчет) Тогда
					
					НоваяСтрока = ТаблицаЗатратПоДоговорам.Добавить();
					НоваяСтрока.ДоговорКонтрагента =  ДокументОбъект.ДоговорКонтрагента;
					НоваяСтрока.Сумма              =  Стр.ПроводкаСумма;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		
		мДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если ДокументОбъект.ОплатаПоставщикам.Количество() > 0  Тогда
			мДоговорКонтрагента = ДокументОбъект.ОплатаПоставщикам[0].ДоговорКонтрагента; 				
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(мДоговорКонтрагента) Тогда			
			Если мДоговорКонтрагента.абс_ОсобыйПорядкокКонтроляЛимитов Тогда
				//Если абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером Тогда	                    
				
				СуммаКонтролируемыхЗатрат = 0;
				СписокКонтролируемыхСчетов =  ПолучитьСписокКонтролируемыхСчетов();
				Для каждого Стр Из СтруктураТаблиц.ТаблицаПоПрочее Цикл
					Для каждого кСчет Из СписокКонтролируемыхСчетов Цикл
						Если БухгалтерскийУчет.ЭтоСубсчет(Стр.СчетЗатрат,кСчет) Тогда
							
							НоваяСтрока = ТаблицаЗатратПоДоговорам.Добавить();
							НоваяСтрока.ДоговорКонтрагента =  мДоговорКонтрагента;
							НоваяСтрока.Сумма              =  Стр.Сумма;
							
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;	
				//КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке") Тогда
		
		Для каждого Стр Из СтруктураТаблиц.ТаблицаПоУслугам Цикл
			Для каждого кСчет Из СписокКонтролируемыхСчетов Цикл
				Если БухгалтерскийУчет.ЭтоСубсчет(Стр.СчетЗатрат,кСчет) Тогда
					
					НоваяСтрока = ТаблицаЗатратПоДоговорам.Добавить();
					НоваяСтрока.ДоговорКонтрагента =  ДокументОбъект.ДоговорКонтрагента;
					НоваяСтрока.Сумма              =  Стр.СуммаБезНДС;
					
					Прервать;      
				КонецЕсли;
			КонецЦикла;                                   
		КонецЦикла;	
		
		Для каждого Стр Из СтруктураТаблиц.ТаблицаПоМатериалам Цикл
			Для каждого кСчет Из СписокКонтролируемыхСчетов Цикл
				Если БухгалтерскийУчет.ЭтоСубсчет(Стр.СчетЗатрат,кСчет) Тогда
					
					НоваяСтрока = ТаблицаЗатратПоДоговорам.Добавить();
					НоваяСтрока.ДоговорКонтрагента =  ДокументОбъект.ДоговорКонтрагента;
					НоваяСтрока.Сумма              =  Стр.Стоимость;
					
					Прервать;      
				КонецЕсли;
			КонецЦикла;                                   
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		
		Для Каждого Проводка Из СтруктураТаблиц.ТаблицаПоСуммамДолга Цикл
			
			Для каждого кСчет Из СписокКонтролируемыхСчетов Цикл
				
				Если БухгалтерскийУчет.ЭтоСубсчет(Проводка.КоррСчет,кСчет) И  
					БухгалтерскийУчет.ЭтоСубсчет(Проводка.СчетУчетаРасчетов,ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) ИЛИ БухгалтерскийУчет.ЭтоСубсчет(Проводка.СчетУчетаРасчетов,ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
					И ЗначениеЗаполнено(Проводка.ДоговорКонтрагента) Тогда
					
					Если Проводка.ДоговорКонтрагента.абс_ОсобыйПорядкокКонтроляЛимитов Тогда
						НоваяСтрока = ТаблицаЗатратПоДоговорам.Добавить();
						НоваяСтрока.ДоговорКонтрагента =  Проводка.ДоговорКонтрагента;
						
						Если Проводка.ВидЗадолженности  = Перечисления.ВидыЗадолженности.Дебиторская Тогда
							НоваяСтрока.Сумма              =  Проводка.Сумма;
						Иначе	
							НоваяСтрока.Сумма              =  - Проводка.Сумма;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
		
		Для Каждого Проводка Из СтруктураТаблиц.ДвиженияХозрасчетный Цикл
			СуммаКонтролируемыхЗатрат = 0;
			Для каждого кСчет Из СписокКонтролируемыхСчетов Цикл
				Если БухгалтерскийУчет.ЭтоСубсчет(Проводка.СчетДт,кСчет) И
					БухгалтерскийУчет.ЭтоСубсчет(Проводка.СчетКт,ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) ИЛИ БухгалтерскийУчет.ЭтоСубсчет(Проводка.СчетКт,ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
					И Проводка.СубконтоКт.Договоры <> Неопределено Тогда							
					Если Проводка.СубконтоКт.Договоры.абс_ОсобыйПорядкокКонтроляЛимитов Тогда	
						
						НоваяСтрока = ТаблицаЗатратПоДоговорам.Добавить();
						НоваяСтрока.ДоговорКонтрагента =  Проводка.СубконтоКт.Договоры;
						НоваяСтрока.Сумма              =  Проводка.Сумма;
						
						Прервать;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.ПрочиеЗатраты") Тогда
		
		Для каждого Стр Из ДокументОбъект.Затраты Цикл
			
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
			Если ТипЗнч(ДокументОбъект.Субконто1) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДоговорКонтрагента	=  ДокументОбъект.Субконто1;
			ИначеЕсли ТипЗнч(ДокументОбъект.Субконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДоговорКонтрагента	= ДокументОбъект.Субконто2;
			ИначеЕсли ТипЗнч(ДокументОбъект.Субконто3) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДоговорКонтрагента	= ДокументОбъект.Субконто3;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Если ДоговорКонтрагента.абс_ОсобыйПорядкокКонтроляЛимитов Тогда	
					Для каждого кСчет Из СписокКонтролируемыхСчетов Цикл
						Если БухгалтерскийУчет.ЭтоСубсчет(Стр.СчетЗатрат,кСчет) Тогда
							
							НоваяСтрока = ТаблицаЗатратПоДоговорам.Добавить();
							НоваяСтрока.ДоговорКонтрагента =  ДоговорКонтрагента;
							НоваяСтрока.Сумма              =  Стр.Сумма;
							
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
		
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.ОперацияБух") Тогда
		Для Каждого Проводка Из СтруктураТаблиц.ДвиженияХозрасчетный Цикл
			СуммаКонтролируемыхЗатрат = 0;
			Для каждого кСчет Из СписокКонтролируемыхСчетов Цикл
				Если БухгалтерскийУчет.ЭтоСубсчет(Проводка.СчетДт,кСчет) И
					БухгалтерскийУчет.ЭтоСубсчет(Проводка.СчетКт,ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) ИЛИ БухгалтерскийУчет.ЭтоСубсчет(Проводка.СчетКт,ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
					И Проводка.СубконтоКт.Договоры <> Неопределено Тогда							
					Если Проводка.СубконтоКт.Договоры.абс_ОсобыйПорядкокКонтроляЛимитов Тогда	
						
						НоваяСтрока = ТаблицаЗатратПоДоговорам.Добавить();
						НоваяСтрока.ДоговорКонтрагента =  Проводка.СубконтоКт.Договоры;
						НоваяСтрока.Сумма              =  Проводка.Сумма;
						
						Прервать;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат  ТаблицаЗатратПоДоговорам;
КонецФункции

Функция ПолучитьТипыКонтроля(МассивДоговоров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ЛимитыПоДоговорам.Договор,
	|	абс_ЛимитыПоДоговорам.ТипКонтроля
	|ИЗ
	|	РегистрСведений.абс_ЛимитыПоДоговорам КАК абс_ЛимитыПоДоговорам
	|ГДЕ
	|	абс_ЛимитыПоДоговорам.ЛимитСогласован
	|	И абс_ЛимитыПоДоговорам.Договор В(&Договор)
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_ЛимитыПоДоговорам.Договор,
	|	абс_ЛимитыПоДоговорам.ТипКонтроля";
	
	Запрос.УстановитьПараметр("Договор", МассивДоговоров);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ФормированиеДвиженийПоКонтролируемымЗатратам(ДокументОбъект,Отказ,СообщениеПриОтказе,СтруктураТаблиц,ТолькоПроверкаЗатрат,ТаблицаДвижений,НаборДвижений)  Экспорт
	
	ТаблицаЗатратПоДоговорам = ПолучитьТаблицуЗатратПоДоговорам(ДокументОбъект,СтруктураТаблиц); 	
	
	Если  ТаблицаЗатратПоДоговорам.Количество() > 0 Тогда
		
		Если ТолькоПроверкаЗатрат Тогда
			ТаблицаЗатратПоДоговорам.Свернуть("ДоговорКонтрагента","Сумма");
			МассивДоговоров = ТаблицаЗатратПоДоговорам.ВыгрузитьКолонку("ДоговорКонтрагента");  
			ОстатокПоЛимиту = ПолучитьОстатокПоЛимиту(ДокументОбъект.Дата,МассивДоговоров);
			МассивДоговоровСконтролем = ПолучитьТипыКонтроля(МассивДоговоров);
		КонецЕсли;
		
		Для каждого Стр Из ТаблицаЗатратПоДоговорам Цикл
			
			МожноПроводить = Истина;
			ДоступнаяСуммаЛимита = 0;
			
			Если ТолькоПроверкаЗатрат Тогда
				
				СтрокаТипКонтроля = МассивДоговоровСконтролем.Найти(Стр.ДоговорКонтрагента,"Договор");
				
				Если СтрокаТипКонтроля = Неопределено Тогда 
					Продолжить;
				КонецЕсли;	
				
				СтруктураПоискаПоДоговору = Новый Структура ("Договор",Стр.ДоговорКонтрагента);
				
				Если СтрокаТипКонтроля.ТипКонтроля = Перечисления.абс_ТипКонтроляЛимитов.ПомесячныйКонтроль Тогда
					СтруктураПоискаПоДоговору.Вставить("Период",НачалоМесяца(ДокументОбъект.Дата));	
				КонецЕсли;
				
				СтрокаПоДоговору = ОстатокПоЛимиту.НайтиСтроки(СтруктураПоискаПоДоговору);
				
				Если СтрокаПоДоговору.Количество() > 0 Тогда
					Если СтрокаТипКонтроля.ТипКонтроля = Перечисления.абс_ТипКонтроляЛимитов.ПомесячныйКонтроль Тогда
						Если СтрокаПоДоговору[0].СуммаЛимита > 0  Тогда
							Если (СтрокаПоДоговору[0].СуммаЛимита - СтрокаПоДоговору[0].СуммаОборот) - Стр.Сумма < 0 Тогда
								Отказ = Истина;
								МожноПроводить = Ложь;
								ДоступнаяСуммаЛимита = (СтрокаПоДоговору[0].СуммаЛимита - СтрокаПоДоговору[0].СуммаОборот);
							КонецЕсли;	
						КонецЕсли;
					Иначе
						
						Для каждого Стр1 Из СтрокаПоДоговору Цикл					
							ДоступнаяСуммаЛимита = ДоступнаяСуммаЛимита + (Стр1.СуммаЛимита - Стр1.СуммаОборот);
						КонецЦикла;
						
						Если  ДоступнаяСуммаЛимита -  Стр.Сумма < 0 Тогда
							Отказ = Истина;
							МожноПроводить = Ложь;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
				
				Если Не МожноПроводить Тогда
					СообщениеПриОтказе = "Сумма по договору " + Строка(Стр.ДоговорКонтрагента.Наименование) +" "+   Строка(Стр.Сумма) + " превышает лимит. Сумма доступная для проведения: "+ ?(ДоступнаяСуммаЛимита < 0,0,ДоступнаяСуммаЛимита);
					Отказ = Истина;
					МожноПроводить = Ложь;
				КонецЕсли;	
				
			КонецЕсли;
			
			Если МожноПроводить И Не ТолькоПроверкаЗатрат Тогда
				СформироватьДвиженияПоЗатратамПоДоговорамСЛимитом(ДокументОбъект,Стр.Сумма,Стр.ДоговорКонтрагента,ТаблицаДвижений,НаборДвижений);
			КонецЕсли;
			
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
//абс Родин Лимитный контроль
//Бобылев А.А. 08.02.2018 Процедура для заполнения реквизитов ttk_Город и ttk_ОбъектБюджетирования в документах при создании на основании
//Процедура заполняет реквизиты "Город" и "Объект бюджетирования" в документах на основании других.
//Третий параметр "ТЧ" - в значении Неопределено реквизиты хранятся в Шапке, иначе название ТЧ 
Процедура ЗаполнитьГородИБюджетНаОсновании(Основание, НовыйДок) Экспорт
	
	МетаданныеОбъекта = основание.Метаданные();
	Если МетаданныеОбъекта.Реквизиты.Найти("ttk_ОбъектБюджетирования") <> Неопределено Тогда
		Попытка
			НовыйДок.ttk_ОбъектБюджетирования = Основание.ttk_ОбъектБюджетирования;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если МетаданныеОбъекта.Реквизиты.Найти("ttk_Город") <> Неопределено Тогда
		Попытка
			НовыйДок.ttk_Город = Основание.ttk_Город;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Для каждого ТЧ из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Если ТЧ.Реквизиты.найти("ttk_ОбъектБюджетирования") <> Неопределено Тогда
			Для СЧ=0 По НовыйДок[ТЧ.Имя].Количество()-1 Цикл
				Попытка
					НовыйДок[ТЧ.Имя][СЧ].ttk_ОбъектБюджетирования = Основание[ТЧ.Имя][СЧ].ttk_ОбъектБюджетирования;
				исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		Если ТЧ.Реквизиты.найти("ttk_Город") <> Неопределено Тогда
			Для СЧ=0 По НовыйДок[ТЧ.Имя].Количество()-1 Цикл
				Попытка
					НовыйДок[ТЧ.Имя][СЧ].ttk_Город = Основание[ТЧ.Имя][СЧ].ttk_ОбъектБюджетирования;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


