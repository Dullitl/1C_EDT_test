

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕОБРАЗОВАНИЯ ЗНАЧЕНИЯ

//Преобразует дату в формат, требуемый правилами подготовки документов в ПФ РФ 
Функция ДатаВФайл(Знач ДатавФайл)
	Если ЗначениеЗаполнено(ДатавФайл) Тогда
		Возврат """" + Формат(ДатавФайл, "ДФ='дд/ММ/гггг'") + """";
	Иначе
		Возврат """""";
	КонецЕсли;
КонецФункции	 

//Преобразует строку отчета, содержащую дату в вормате "ДД/ММ/ГГГГ", в значение типа "Дата"
Функция ДатаИзФайла(Знач ДатаИзФайла)
	Число = Сред(ДатаИзФайла,1,2);
	Месяц = Сред(ДатаИзФайла,4,2);
	Год = Сред(ДатаИзФайла,7,4);
	Попытка
		Возврат Дата(Год,Месяц,Число);
	Исключение
		Возврат Дата('00010101');
	КонецПопытки;	
КонецФункции	 

//Преобразует строку в число
Функция ЧислоИзФайла(Знач ЧислоИзФайла)
	Попытка
		Возврат Число(ЧислоИзФайла);
	Исключение
		Возврат 0;
	КонецПопытки;	
КонецФункции	

//Преобразует дату в формат, необходимый для печатных форм сведений в ПФР: "ДД" месяц ГГГГ
Функция ДатаВОтчет(Знач Дата) Экспорт
	Если (ТипЗнч(Дата) = Тип("Дата"))и(Дата <> Дата('00010101')) Тогда
		Стр = Формат(Дата,"ДФ='дд ММММ гггг'") + " года";
		Возврат """"+Лев(Стр,2)+""""+Сред(Стр,3);
	КонецЕсли;	 
	Возврат "";
КонецФункции	

//Разбивает строку значений, разделенных запятыми, на элементы с учётом пар ограничительных символов
Функция РазложитьСтрокуФайлаСведенийПФР(Знач Стр,Разделитель = ",",Ограничитель = """")
	
	//Первый проход: определяем позиции пар ограничителей
	ДлинаСтроки = СтрДлина(Стр);
	МассивПозицииОграничителя = Новый Массив();
	КопияСтр = Стр;
	ТекИндекс =0;
	Пока Истина цикл
		//поиск первого ограничетеля
		НачПоз = Найти(КопияСтр,Ограничитель);
		Если НачПоз =0 Тогда 
			Прервать;
		КонецЕсли;	 
		
		ТекИндекс = ТекИндекс+НачПоз;
		МассивПозицииОграничителя.Добавить(ТекИндекс);
		КопияСтр = Сред(КопияСтр,НачПоз+1);//двигаемся вперед по строке
		
		//поиск второго ограничителя
		КонПоз = Найти(КопияСтр,Ограничитель);
		Если КонПоз = 0 Тогда
			КонПоз = ДлинаСтроки +1;
		КонецЕсли;	 
		
		ТекИндекс = ТекИндекс+КонПоз;
		МассивПозицииОграничителя.Добавить(ТекИндекс);
		КопияСтр = Сред(КопияСтр,КонПоз+1);//двигаемся вперед по строке
	КонецЦикла;	
	КоличествоПарОграничителей = МассивПозицииОграничителя.Количество()/2;
	
	//Второй проход: раскладываем строку на элементы, разделенные символом "Разделитель"
	МассивСтрок = Новый Массив();
	ГоловаЭлемента = "";
	ТекИндекс =0;
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока Истина Цикл
		Поз = Найти(Стр,Разделитель);
		Если Поз=0 Тогда
			МассивСтрок.Добавить(ГоловаЭлемента+Стр);
			Прервать;
		КонецЕсли;
		
		//Если позиция разделителя находится внутри пары ограничителей, то данный разделитель не учитываем
		ВнутриОграничителей = Ложь;
		Для П=0 по КоличествоПарОграничителей-1 цикл
			АбсолютнаяПозиция = ТекИндекс + Поз;
			Если (АбсолютнаяПозиция>МассивПозицииОграничителя[П*2])и(АбсолютнаяПозиция<МассивПозицииОграничителя[П*2+1]) Тогда
				ВнутриОграничителей = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если ВнутриОграничителей Тогда
			ГоловаЭлемента = ГоловаЭлемента + Лев(Стр,Поз);
			Стр = Сред(Стр,Поз+1);
		Иначе		
			МассивСтрок.Добавить(ГоловаЭлемента+Лев(Стр,Поз-1));
			ГоловаЭлемента = "";
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЕсли;	 
		
		//Идём дальше по строке
		ТекИндекс = ТекИндекс+Поз;
	КонецЦикла;
	
	//Убираем ограничители
	Для К=0 по МассивСтрок.Количество()-1 цикл
		Стр = МассивСтрок[К];
		ДлинаСтр = СтрДлина(Стр);
		Если (Лев(Стр,1)=Ограничитель)и(Прав(Стр,1)=Ограничитель) Тогда
			МассивСтрок[К] = Сред(Стр,2,ДлинаСтр-2);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат МассивСтрок;
КонецФункции	 

//Приводит стаж к нормальному виду, когда месяцев не более 12, дней не более 30
Процедура ПолучитьПриведенныйСтаж(Лет, Месяцев, Дней) Экспорт
	
	ДнейВГоду 		= 12 * 30;
	ВсегоДней 		= Лет*ДнейВГоду + Месяцев*30 + Дней;
	Лет 			= Цел(ВсегоДней / ДнейВГоду);
	ОстатокДней 	= ВсегоДней - Лет * ДнейВГоду;
	Месяцев			= Цел(ОстатокДней / 30);
	Дней			= ОстатокДней % 30;
КонецПроцедуры 

//Вычисляет разность между двумя датами: в годах, месяцах, днях
Процедура ПолучитьСтажЗаПериод(Знач ДатаОкончанияПериода, Знач ДатаНачалаПериода, Лет=0, Месяцев=0, Дней=0) Экспорт 
	
	Если ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
		
		Лет1		=	Год(ДатаОкончанияПериода);
		Месяцев1	=	Месяц(ДатаОкончанияПериода);
		
		Если НачалоДня(ДатаОкончанияПериода) <> НачалоДня(КонецМесяца(ДатаОкончанияПериода)) Тогда
			Дней1		=	День(ДатаОкончанияПериода);
		иначе
			Дней1		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 
		
		Лет2		=	Год(ДатаНачалаПериода);
		Месяцев2	=	Месяц(ДатаНачалаПериода);
		Если НачалоДня(ДатаНачалаПериода) <> НачалоДня(КонецМесяца(ДатаНачалаПериода)) Тогда
			Дней2		=	День(ДатаНачалаПериода);
		иначе
			Дней2		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 
		
		Лет		=	Лет1		-	Лет2;
		Месяцев	=	Месяцев1	-	Месяцев2;
		Дней	=	Дней1		-	Дней2 + 1;//1 день на увольнение
	Иначе
		Лет = 0; 
		Месяцев = 0;
		Дней = 0;
	КонецЕсли;	
КонецПроцедуры //ПолучитьСтажЗаПериод

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ВЫХОДНЫХ ФАЙЛОВ СВЕДЕНИЙ

//Вовращает номер пачки документа
Функция НомерПачкиДокумента(Знач НомерДокумента) Экспорт
	
	НомерПачки = "";
	
	НомерДокумента = СокрП(НомерДокумента);
	
	//Возьмём все цифры в правой части номера
	ДлинаНомера = СтрДлина(НомерДокумента);
	Для Н=1 по ДлинаНомера цикл
		Символ = Сред(НомерДокумента,ДлинаНомера-Н+1,1); 	
		Если (Символ>="0") и (Символ<="9") Тогда
			НомерПачки = Символ+НомерПачки;
		Иначе
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НомерПачки <> "" Тогда
		Возврат Формат(Число(Прав(НомерПачки, 5)), "ЧГ=0"); 
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции	 

//Формирует имя выходного файла сведений в ПФ РФ
Функция ПолучитьИмяФайлаПФ(Документ, ГодПредставленияСведений, Знач ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		
		ИмяТаблицы = Документ.Метаданные().Имя;
		
		// Формируем запрос и получаем необходимые данные
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокПерсучета.Номер,
		|	ДокПерсучета.НомерПачки,
		|	ДокПерсучета.Организация,
		|	ДокПерсучета.Организация.РегистрационныйНомерПФР,
		|	ДокПерсучета.ФорматФайла КАК ФорматФайла
		|ИЗ
		|	Документ." + ИмяТаблицы + " КАК ДокПерсучета
		|ГДЕ
		|	ДокПерсучета.Ссылка = &ДокументСсылка";
		
		Запрос.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
		ВыборкаПоШапкеДокумента = Запрос.Выполнить().Выбрать();
		
		Если Не ВыборкаПоШапкеДокумента.Следующий() Тогда
			Возврат "";
		КонецЕсли;	
	КонецЕсли;
	
	НомерПачки = СокрЛП(ВыборкаПоШапкеДокумента.НомерПачки);
	ФорматФайла = ВыборкаПоШапкеДокумента.ФорматФайла;
	
	РегНомерПФР = ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР;
	СтрНомПачки = Прав("100000"+НомерПачки,5);
	Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
		ИмяФайла = Прав(РегНомерПФР,6) + Лев(СтрНомПачки,2) + "." + Прав(СтрНомПачки,3);
	ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда // Версия 07.00 (XML)
		РегНомерПФР = СтрЗаменить(РегНомерПФР, " ", "");
		Если СтрДлина(РегНомерПФР) <> 14 Тогда
			РегНомерПФР = Лев(РегНомерПФР, 8) + "0" + Сред(РегНомерПФР, 9)
		КонецЕсли;
		
		// имя файла без подразделений.
		ИмяФайла = "PFR-700-Y-"+Формат(ГодПредставленияСведений, "ЧГ=0")+"-ORG-"+РегНомерПФР+
		"-DCK-"+СтрНомПачки+"-DPT-000000-DCK-00000.XML";
		
	Иначе 	
		ИмяФайла = "";
	КонецЕсли;
	Возврат ИмяФайла;
	
КонецФункции

//Возвращает заполненную "запись-заголовок" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьЗаголовок() Экспорт
	
	СтрокаВФайл = """ЗГЛВ"",""04.00""," 
	+ """1С:ЗУП""," // программа подготовки данных
	+ """" + Лев(Константы.НомерВерсииКонфигурации.Получить(),6)+"""";// Версия программы подготовки
	
	Возврат Врег(СтрокаВФайл+Символы.ПС);
	
КонецФункции

//Возвращает заполненную "запись о пачке" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОПачке(НомерПачки,ДатаСоставленияОписи,ТипСведений,ВидКорректировки,РасчетныйПериодГод="0", Категория = "", ТУ = "", СтаховаяЧасть = 0, НакопительнаяЧасть = 0 ) Экспорт
	
	СтрокаВФайл = """ПАЧК""," 
	+ НомерПачки + ","	// Номер пачки, присвоенный работодателем
	+ """ОПИСЬ""" + "," // Тип пачки
	+ """ОП61""" + ","	// Тип описи
	+ ДатаВФайл(ДатаСоставленияОписи) + "," 
	+ "1,"				// Число типов документов в пачке
	+ Формат(РасчетныйПериодГод,"ЧГ=0")// Расчетный период:	год
	+ ",""" + Категория + """"	// Код категории застрахованного лица 
	+ ","""""			// Код дополнительного тарифа
	+ ",""" + ТУ + """"	// Территориальные условия (код) 
	+ ",""" + ТипСведений + """"		// Тип сведений
	+ ",""" + ВидКорректировки + """"	// Вид корректировки
	+ ",0"				// Отчетный период квартал
	+ ",0"				// Отчетный период год
	+ ",0.00"			// Всего начислено
	+ ",0.00"			// пособие по временной нетрудоспособности
	+ "," + Формат(СтаховаяЧасть, "ЧЦ=16; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0")// сумма начисленных страховых взносов на страховую часть
	+ "," + Формат(НакопительнаяЧасть, "ЧЦ=16; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0")// сумма начисленных страховых взносов на накопительную часть
	+ ",0.00"			// сумма начисленных страховых взносов по дополнительному тарифу
	+ ",0"				// Исходящий номер СПУ:	Код подразделения	
	+ ",0";				// Исходящий номер
	
	Возврат Врег(СтрокаВФайл+Символы.ПС);
	
КонецФункции

//Возвращает заполненную "запись о типе документа" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОТипеДокумента(ТипДокумента,КоличествоДокументов) Экспорт
	
	СтрокаВФайл = """ТИПД"",""" 
	+ ТипДокумента + """," 
	+ КоличествоДокументов;
	
	Возврат Врег(СтрокаВФайл+Символы.ПС);
	
КонецФункции

//Возвращает заполненную "запись о работодателе" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОРаботодателе(Организация, ДатаАктуальности, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("ЭтоФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.ИНН,
	|	ВЫБОР
	|		КОГДА Организации.ЮрФизЛицо = &ЭтоФизЛицо
	|			ТОГДА ""0""
	|		ИНАЧЕ Организации.КПП
	|	КОНЕЦ КАК КПП,
	|	Организации.РегистрационныйНомерПФР,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.ЮрФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо = &Организация) КАК ФИОФизЛицСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Организации.Ссылка
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Если Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			// Для предпринимателя 
			
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Выборка.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя неверно введен ИНН!", Отказ);
			КонецЕсли;
			
			Если Выборка.Фамилия <> NULL Тогда
				ФИО = СокрЛП(Выборка.Фамилия + " " + Выборка.Имя + " " + Выборка.Отчество); 
			Иначе	
				ФИО = СокрЛП(Выборка.НаименованиеОрганизации);
			КонецЕсли; 
			
			Если РегламентированнаяОтчетность.СтрокаНаписанаПоРусски(ФИО)=0 Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя Фамилия, Имя, Отчество должно быть введены русскими буквами!", Отказ);
			КонецЕсли;
			
			Если Найти(ФИО, " ")=0 Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя должны быть указаны, как минимум, фамилия и имя!", Отказ);
			КонецЕсли;
			
			НаименованиеОрганизации = ФИО;
			
		Иначе	
			
			// Для юрлица 
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Выборка.ИНН, Перечисления.ЮрФизЛицо.ЮрЛицо ) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Для организации неверно введен ИНН!"), Отказ);
			КонецЕсли; 
			
			Если СтрДлина(Выборка.КПП)<>9 Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Для организации неверно введен КПП!"), Отказ);
			КонецЕсли;
			
			Если СокрЛП(Выборка.НаименованиеОрганизации) = "" Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Для организации должно быть указано сокращенное наименование организации!"), Отказ);
			КонецЕсли;
			
			НаименованиеОрганизации = Выборка.НаименованиеОрганизации;
			
		КонецЕсли; 
		
		Если СокрЛП(Выборка.РегистрационныйНомерПФР) = "" Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Для организации не указан регистрационный номер в ПФР !"), Отказ);
		КонецЕсли; 
		
		СтрокаВФайл = """РБТД"",""РБТД"","  
		+ """" + Выборка.РегистрационныйНомерПФР + """," 
		+ Выборка.ИНН + ","  
		+ Выборка.КПП + ","  
		+ """" + СтрЗаменить(СокрЛП(Выборка.НаименованиеОрганизации), """", "'") + """";
		
		Возврат Врег(СтрокаВФайл+Символы.ПС);
		
	Иначе
		
		Отказ = Истина;
		Возврат "";  
		
	КонецЕсли;
	
	
КонецФункции

//Разбирает переданные данные о месте рождения и заполняет соответствующие поля записи, 
//выводимой в файл сведений для ПФ РФ 
Процедура ВписатьВЗаписьМестоРождения(Запись, Знач МестоРождения) Экспорт
	
	МестоРождения = РегламентированнаяОтчетность.РазложитьМестоРождения(МестоРождения);
	Запись.ТипМестаРождения = ?(МестоРождения.Особое = 1, "ОСОБОЕ", "СТАНДАРТ");
	Запись.МестоРожденияНаселенныйПункт = МестоРождения.НаселенныйПункт;
	Запись.МестоРожденияРайон = МестоРождения.Район;
	Запись.МестоРожденияОбласть = МестоРождения.Область;
	Запись.МестоРожденияСтрана = МестоРождения.Страна;
	
КонецПроцедуры

//Разбирает переданные данные о документе, удостоверяющем личность, и заполняет 
//соответствующие поля записи, выводимой в файл сведений для ПФ РФ 
Процедура ВписатьВЗаписьДокумент(Запись, ТекущиеДанные) Экспорт
	
	СерииДокумента = РегламентированнаяОтчетность.РазложитьСериюДокумента(ТекущиеДанные.ДокументВид,ТекущиеДанные.ДокументСерия);
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументВид) Тогда
		Запись.ДокументВид = ТекущиеДанные.ДокументВидКодПФР;		
	иначе
		Запись.ДокументВид = "ПРОЧЕЕ";		
	КонецЕсли;	
	Запись.ДокументНаименование = ТекущиеДанные.ДокументВидКодПФР;		
	Запись.ДокументСерияРимскиеЦифры = СерииДокумента.Часть1;
	Запись.ДокументСерияРусскиеБуквы = СерииДокумента.Часть2;
	Запись.ДокументНомер = ТекущиеДанные.ДокументНомер;
	Запись.ДокументДатаВыдачи = ТекущиеДанные.ДокументДатаВыдачи;
	Запись.ДокументКемВыдан = ТекущиеДанные.ДокументКемВыдан;
	
КонецПроцедуры

#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕДОСТАВЛЕНИЯ ПОЛЬЗОВАТЕЛЯМ ФАЙЛОВ СВЕДЕНИЙ
//

//Предоставляет сформированный файл сведений документа для просмотра
Процедура ПоказатьФайлДокумента(ДокументОбъект, ЗаголовокОкна) Экспорт
	
	Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) Тогда
		Возврат;
	КонецЕсли;	 
	
	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;	 
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
	ТекстовыйДокумент.Показать(ЗаголовокОкна, "Файл сведений");
	
КонецПроцедуры	 

//Записывает файл сведений документа в каталог, указанный пользователем
Процедура ЗаписатьФайлДокументаНаДискету(ДокументОбъект, ТекущийПользователь, ИмяФайла, Знач КодировкаФайла = Неопределено) Экспорт
	
	Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Длг.Каталог = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнойКаталогФайлов");
	Длг.Заголовок = "Укажите каталог";
	
	Если Длг.Выбрать() Тогда
		ИмяФайла = Длг.Каталог+"\" + ИмяФайла;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
		Если КодировкаФайла = Неопределено Тогда
			КодировкаФайла = КодировкаТекста.OEM;
		КонецЕсли;
		ТекстовыйДокумент.Записать(ИмяФайла,КодировкаФайла);
		Предупреждение("Файл-пачка записан под именем: "+ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры	

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ФАЙЛА ИНДИВИДУАЛЬНЫХ СВЕДЕНИЙ ПФР XML ФОРМАТ 7.0 


/////////////////////////////////////
// XML STREAM
/////////////////////////////////////

// Создает и возвращает объект ЗаписьXML, для создания XML документа
Функция СоздатьПотокXML(ИмяФайла = Неопределено) Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.Отступ = Истина;
	Если ИмяФайла <> Неопределено Тогда
		ПотокXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	КонецЕсли;
	
	ПотокXML.ЗаписатьОбъявлениеXML();
	
	Возврат ПотокXML;
	
КонецФункции

// Сохраняет документ XML  на диск и закрывает запись XML
Функция ЗаписатьПотокXML(ПотокXML) Экспорт
	
	Возврат ПотокXML.Закрыть();
	
КонецФункции

/////////////////////////////////////
// XML TREE
/////////////////////////////////////

// Возвращает Истина если строка дерева представляет атрибуты XML узла
Функция СтрокаСАтрибутами(СтрокаДереваXML) Экспорт
	
	Возврат СтрокаДереваXML.Имя = "АтрибутыXMLУзла";
	
КонецФункции

// Ищет и возвращает атрибут XML узла по имени
Функция НайтиАтрибуты(СтрокаДереваXML) Экспорт
	
	Возврат СтрокаДереваXML.Строки.Найти("АтрибутыXMLУзла", "Имя", Ложь);
	
КонецФункции


// КОМПОЗИЦИЯ ДЕРЕВА

// Создает объект дерево значений, представляющее XML файл
Функция СоздатьДеревоXML() Экспорт
	
	НовоеДеревоXML = Новый ДеревоЗначений;
	НовоеДеревоXML.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
	НовоеДеревоXML.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Возврат НовоеДеревоXML;
	
КонецФункции

// Добавляет узел в дерево XML, устанавливая его атрибуты
Функция ДобавитьУзелВДеревоXML(Ветка, Имя, Значение, СписокАтрибутов = Неопределено) Экспорт
	
	НовыйУзел = Ветка.Строки.Добавить();
	НовыйУзел.Имя = Имя;
	НовыйУзел.Значение = Значение;
	
	Если СписокАтрибутов <> Неопределено Тогда
		ВеткаАтрибутов = НовыйУзел.Строки.Добавить();
		ВеткаАтрибутов.Имя = "АтрибутыXMLУзла";
		ВеткаАтрибутов.Значение = Неопределено;
		
		Для Каждого ЭлементСпискаАтрибутов Из СписокАтрибутов Цикл
			ЛистАтрибутов = ВеткаАтрибутов.Строки.Добавить();
			ЛистАтрибутов.Имя = ЭлементСпискаАтрибутов.Ключ;
			// доделать до правильного преобразования
			ЛистАтрибутов.Значение = Строка(ЭлементСпискаАтрибутов.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыйУзел;
	
КонецФункции

// ИМПОРТ / ЭКСПОРТ ДЕРЕВА

// записывает значения из дерева значение в поток связянный с файлом XML
Процедура ЗаписатьУзелДереваXMLВXMLдляПФР(СтрокаДерева, ПотокXML, ПрефиксПространстваИмен = Неопределено, URIПространстваИмен = Неопределено)
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			
			ПотокXML.ЗаписатьНачалоЭлемента(СтрЗаменить(СтрокаДерева.Имя,"__","-"));
			Если ПрефиксПространстваИмен <> Неопределено И URIПространстваИмен <> Неопределено Тогда
				ПотокXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен, URIПространстваИмен);
			КонецЕсли;
			СписокАтрибутов = НайтиАтрибуты(СтрокаДерева);
			
			Если СписокАтрибутов <> Неопределено Тогда
				Для каждого СтрокаСАтрибутом Из СписокАтрибутов.Строки Цикл
					ПотокXML.ЗаписатьАтрибут(СтрокаСАтрибутом.Имя, СтрокаСАтрибутом.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ПотокXML.ЗаписатьТекст(?(СтрокаДерева.Значение = "00.00.0000", "", СтрокаДерева.Значение));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Лист из СтрокаДерева.Строки Цикл
		Если СтрокаСАтрибутами(Лист) Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьУзелДереваXMLВXMLдляПФР(Лист, ПотокXML, ПрефиксПространстваИмен, URIПространстваИмен);
	КонецЦикла;
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// добавляет реквизит в дерево значений, представляющее XML файл
Процедура ДобавитьИнформациюВДерево(ДеревоВыгрузки, НаборЗаписей) Экспорт
	
	ПустаяДата = Дата(1,1,1);
	
	Для каждого ЭлементНабора Из НаборЗаписей Цикл
		ИмяЗаписи = ЭлементНабора.Ключ;
		Запись = ЭлементНабора.Значение;
		ТипДанных = Запись.ТипДанных;
		Если ТипДанных = "КОНСТАНТА" Тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ЧИСЛО" Тогда
			
			// для проверок
			//Запись.Размер 
			//Запись.РазрядностьДробнойЧасти
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Формат(Запись.Значение,"ЧЦ=" + Запись.Размер + "; ЧДЦ=" + Запись.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0"))
			
		ИначеЕсли ТипДанных = "СТРОКА" Тогда
			
			// для проверок
			//Запись.Размер 
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ДАТА" Тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ?(Запись.Значение = ПустаяДата,"00.00.0000", Формат(Запись.Значение,"ДФ=dd.MM.yyyy")))
			
		ИначеЕсли ТипДанных = "ТАБЛИЦА" Тогда	
			
			ПроверятьНеобязательныеПоля = Ложь;
			Для каждого Поле Из Запись.Поля Цикл
				ПроверятьНеобязательныеПоля = Поле.ЭлементНеОбязателен;
				Если ПроверятьНеобязательныеПоля Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Для каждого СтрокаТЗ Из Запись.Значение Цикл
				
				ВеткаСтрокиТЗ = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "");
				ВыводитьНеобязательныеПоля = Ложь;
				Если ПроверятьНеобязательныеПоля Тогда
					Для каждого Поле Из Запись.Поля Цикл
						Если Поле.ЭлементНеОбязателен Тогда
							ВыводитьНеобязательныеПоля = ЗначениеЗаполнено(СтрокаТЗ[Поле.ИмяПоля]);
							Если ВыводитьНеобязательныеПоля Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ЭлементНеОбязателен И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					Данные = СтрокаТЗ[Поле.ИмяПоля];
					
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						// для проверок
						//Поле.Размер, Поле.РазрядностьДробнойЧасти
						Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
						// для проверок
						//Поле.Размер
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						Если Данные = ПустаяДата Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					
					ДобавитьУзелВДеревоXML(ВеткаСтрокиТЗ, Поле.ИмяПоля, Данные)
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "СТРУКТУРА" Тогда	
			
			ВеткаСтруктуры = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "");
			Для каждого Поле Из Запись.Поля Цикл
				
				Данные = Запись.Значение[Поле.ИмяПоля];
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					// для проверок
					//Поле.Размер, Поле.РазрядностьДробнойЧасти
					Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
				ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
					// для проверок
					//Поле.Размер
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					Если Данные = ПустаяДата Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				
				ДобавитьУзелВДеревоXML(ВеткаСтруктуры, Поле.ИмяПоля, Данные)
				
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ""), Запись.Значение)
			
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры

// Возвращаент копию переданной структуры данных.
Функция СкопироватьСтруктуруДанных(КоллекцияИсходная) Экспорт
	
	ТипЗначения = ТипЗнч(КоллекцияИсходная);
	Если ТипЗначения=Тип("Структура") Тогда
		
		КоллекцияКопия=Новый Структура;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,СкопироватьСтруктуруДанных(Элемент.Значение));
			
		КонецЦикла;
		
		Возврат КоллекцияКопия; 
		
	ИначеЕсли ТипЗначения=Тип("ТаблицаЗначений") Тогда
		
		Возврат КоллекцияИсходная.Скопировать();
		
	ИначеЕсли ТипЗначения=Тип("Массив") Тогда
		
		КоллекцияКопия=Новый Массив;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Добавить(СкопироватьСтруктуруДанных(Элемент));
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	ИначеЕсли ТипЗначения=Тип("Соответствие") Тогда
		
		КоллекцияКопия=Новый Соответствие;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,СкопироватьСтруктуруДанных(Элемент.Значение));
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	Иначе
		
		Возврат КоллекцияИсходная
		
	КонецЕсли;
	
КонецФункции

//Возвращает формат записи файла сведений в виде таблицы с именами и типами полей
Функция ПолучитьФорматЗаписиПФР(Знач МакетФормата, Знач ИмяЗаписи) 
	
	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипДанных",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("ЭлементНеОбязателен");
	
	ОбластьФорматЗаписи = МакетФормата.ПолучитьОбласть(ИмяЗаписи);
	
	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		
		//имя поля хранится в 4-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 4).Текст);
		Если ИмяПоля <> "" Тогда
			
			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			//тип данных хранится во 2-ой колонке	
			НовоеПоле.ТипДанных = ВРЕГ(СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст));
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);
			//Если указан размер поля, сохраним его
			Если СтрРазмерПоля<>"" Тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 Тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
					НовоеПоле.РазрядностьДробнойЧасти = 0;
				КонецЕсли;	 
			КонецЕсли;	 
			//Признак обязательности элемента хранится в 5-й колонке	
			НовоеПоле.ЭлементНеОбязателен = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст) = "Не обязательно";
			
		КонецЕсли;	 
		
	КонецЦикла;
	
	Возврат ТаблицаФормаЗаписи;
КонецФункции	

// Загружает формат набора записей файла сведений о доходах физлиц из заданного табличного документа
Функция ЗагрузитьФорматНабораЗаписейдляПФР(Знач МакетФормата, Знач ИмяНабораЗаписей, НомерВыбираемогоЭлемента = 1) Экспорт
	
	ФорматНабора = Новый Структура();
	
	ОбластьНабораЗаписей = МакетФормата.ПолучитьОбласть(ИмяНабораЗаписей);
	
	Для НСтр = 1 По ОбластьНабораЗаписей.ВысотаТаблицы Цикл
		
		ФорматЗаписи = Новый Структура("ТипДанных, Размер, РазрядностьДробнойЧасти, Поля, Значение, ЭлементНеОбязателен");
		
		// имя записи хранится в 4 колонке
		ИмяЗаписи =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 4).Текст);
		
		// тип данных хранится во 2 колонке
		ТипДанных = Врег(СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 2).Текст));
		
		//Признак обязательности элемента хранится в 5-й колонке	
		ЭлементНеОбязателен = Врег(СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 5).Текст)) = "НЕ ОБЯЗАТЕЛЬНО";
		
		Если ТипДанных = "" Тогда// Если тип данных не задан, то встретили строку - группировку
			Продолжить;
		КонецЕсли; 
		
		ПозицияРазделителя = Найти(ТипДанных,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ТипДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТипДанных, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		ПозицияРазделителя = Найти(ИмяЗаписи,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ИмяЗаписи = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		
		ФорматЗаписи.ТипДанных =  ТипДанных;
		ФорматЗаписи.ЭлементНеОбязателен = ЭлементНеОбязателен;
		// размер хранится в 3 колонке
		СтрРазмерПоля =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
		
		Если ФорматЗаписи.ТипДанных = "КОНСТАНТА" Тогда
			
			// в колонке "размер" должно указываться значение константы
			ФорматЗаписи.Значение = СтрРазмерПоля;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ЧИСЛО" Тогда
			
			ПозицияТочки = Найти(СтрРазмерПоля,".");
			Если ПозицияТочки<>0 Тогда
				ФорматЗаписи.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
				ФорматЗаписи.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
			Иначе	
				ФорматЗаписи.Размер = Число(СтрРазмерПоля);
				ФорматЗаписи.РазрядностьДробнойЧасти = 0;
			КонецЕсли;	 
			
			ФорматЗаписи.Значение = 0;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРОКА" Тогда
			
			ФорматЗаписи.Размер = Число(СтрРазмерПоля);
			
			ФорматЗаписи.Значение = "";
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ДАТА" Тогда
			
			ФорматЗаписи.Значение = Дата('00010101');
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ТАБЛИЦА" Тогда	
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиПФР(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый ТаблицаЗначений;
			
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(Поле.Размер, Поле.РазрядностьДробнойЧасти);
				ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
					ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(Поле.Размер);
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
				КонецЕсли; 
				ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля, ОписаниеТиповПоля );
				
			КонецЦикла; 
			
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРУКТУРА" Тогда	
			
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = Найти(СтрРазмерПоля,"/");
			Если ПозицияРазделителя <> 0 Тогда
				СтрРазмерПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрРазмерПоля, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиПФР(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый Структура;
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				ПустоеЗначениеПоля = Неопределено;
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ПустоеЗначениеПоля = 0;
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ПустоеЗначениеПоля = Дата('00010101');
				Иначе
					ПустоеЗначениеПоля = "";
				КонецЕсли; 
				
				ФорматЗаписи.Значение.Вставить(Поле.ИмяПоля, ПустоеЗначениеПоля);
				
			КонецЦикла; 
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			// Имя набора записей хранится в третьей колонке
			ИмяНабора = СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
			ПозицияРазделителя = Найти(ИмяНабора,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяНабора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяНабора, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ФорматЗаписи.Значение = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ИмяНабора, НомерВыбираемогоЭлемента);
			
		КонецЕсли;	
		
		ФорматНабора.Вставить(ИмяЗаписи, ФорматЗаписи);
		
	КонецЦикла;	
	
	Возврат ФорматНабора;
	
КонецФункции // ЗагрузитьФорматНабораЗаписей()

// Процедура устанавливает заголовочные параметры файла выгрузки XML формата 07.00
//
Процедура ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ИмяФайла) Экспорт
	
	// добавляем реквизит ИмяФайла
	НаборЗаписейИмяФайла = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ИмяФайла");
	НаборЗаписейИмяФайла.ИмяФайла.Значение = ИмяФайла;
	ДобавитьИнформациюВДерево(УзелПФР, НаборЗаписейИмяФайла);
	
	// Добавляем Реквизит заголовок файла
	НаборЗаписейЗаголовокФайла = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ЗаголовокФайла");
	НаборЗаписейПрограммаПодготовкиДанных = НаборЗаписейЗаголовокФайла.ПрограммаПодготовкиДанных.Значение;
	НаборЗаписейПрограммаПодготовкиДанных.Версия = РегламентированнаяОтчетность.РедакцияКонфигурации();
	НаборЗаписейПрограммаПодготовкиДанных.НазваниеПрограммы = РегламентированнаяОтчетность.ИДКонфигурации();
	ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПФР, "ЗаголовокФайла", ""), НаборЗаписейЗаголовокФайла); 
	
КонецПроцедуры // ЗаполнитьИмяИЗаголовокФайла()

// Функция устанавливает значения реквизитов XML узла ВходящаяОпись
//
Функция ЗаполнитьНаборЗаписейВходящаяОпись(УзелПФР, МакетФормата, ТипДокумента, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке, УзелПачкаСЗВ4 = Неопределено, НаборЗаписейИтогоСуммаВзносов = Неопределено, ТегВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ") Экспорт
	
	// устанавливаем значение номер пачки
	
	НаборЗаписейВходящаяОпись = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ТегВходящейОписи, 1);
	НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = НомерПачки;
	
	НаборЗаписейВходящаяОпись.НомерВПачке.Значение = НомерДокументаВПачке;
	
	// Составитель пачки
	НаборЗаписейСоставительПачки = НаборЗаписейВходящаяОпись.СоставительПачки.Значение;
	ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкаПоШапкеДокумента);
	
	НаборЗаписейСоставДокументов = НаборЗаписейВходящаяОпись.СоставДокументов.Значение;
	НаборЗаписейСоставДокументов.Количество.Значение = 1;
	
	НаборЗаписейНаличиеДокументов = НаборЗаписейСоставДокументов.НаличиеДокументов.Значение;
	НаборЗаписейНаличиеДокументов.ТипДокумента = ТипДокумента;
	НаборЗаписейНаличиеДокументов.Количество = КоличествоДокументов;
	
	НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ВыборкаПоШапкеДокумента.Дата;
	
	Если ТипДокумента = "ИС_СЗВ-4-1" Или ТипДокумента = "ИС_СЗВ-4-2" Тогда
		
		НаборЗаписейПачкаСЗВ4 = НаборЗаписейВходящаяОпись.ПачкаСЗВ4.Значение;
		НаборЗаписейПачкаСЗВ4.РасчетныйПериод.Значение = ВыборкаПоШапкеДокумента.Год;
		НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.КодКатегории = ВыборкаПоШапкеДокумента.КодОсновногоТарифа;
		Если ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "НР" Тогда
			НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.НазваниеКатегории = "НАЕМ/РАБОТНИК";
		ИначеЕсли ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "СХ" Тогда
			НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.НазваниеКатегории = "С/Х ОРГАНИЗАЦИЯ";
		КонецЕсли;
		
		Если ТипДокумента = "ИС_СЗВ-4-1" Тогда
			НаборЗаписейПачкаСЗВ4.Удалить("ТерриториальныеУсловия");
		Иначе
			НаборЗаписейПачкаСЗВ4.ТерриториальныеУсловия.Значение.ОснованиеТУ = ВыборкаПоШапкеДокумента.ТерриториальныеУсловияКод;
		КонецЕсли;
		
		НаборЗаписейПачкаСЗВ4.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
		Если ВыборкаПоШапкеДокумента.ВидКорректировки = "КОРР" Тогда
			НаборЗаписейПачкаСЗВ4.ВидКорректировки.Значение = "КОРРЕКТИРУЮЩАЯ";
		ИначеЕсли ВыборкаПоШапкеДокумента.ВидКорректировки = "ОТМН" Тогда
			НаборЗаписейПачкаСЗВ4.ВидКорректировки.Значение = "ОТМЕНЯЮЩАЯ";
		Иначе
			НаборЗаписейПачкаСЗВ4.Удалить("ВидКорректировки");
		КонецЕсли;
		
		
		УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		
		УзелВходящаяОпись = ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,"");
		НаборЗаписейИтогоСуммаВзносов = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СтраховыеВзносы");
		НаборЗаписейПачкаСЗВ4.Удалить("ИтогоСуммаВзносов");
		
		ДобавитьИнформациюВДерево(УзелВходящаяОпись, НаборЗаписейВходящаяОпись);
		УзелПачкаСЗВ4 = УзелВходящаяОпись.Строки[6];
		
	ИначеЕсли ТипДокумента = "РЕЕСТР_ДСВ_РАБОТОДАТЕЛЬ" Тогда
		
		РеестрДСВ = НаборЗаписейВходящаяОпись.РеестрДСВ.Значение;
		
		ЗаполнитьЗначенияСвойств(РеестрДСВ.ПлатежноеПоручение.Значение,ВыборкапоШапкеДокумента);
		РеестрДСВ.Год.Значение = ВыборкапоШапкеДокумента.Год;
		РеестрДСВ.КоличествоСтрок.Значение = ВыборкапоШапкеДокумента.КоличествоСтрок;
		РеестрДСВ.СуммаДСВРаботника.Значение = ВыборкапоШапкеДокумента.СуммаДСВРаботника;
		РеестрДСВ.СуммаДСВРаботодателя.Значение = ВыборкапоШапкеДокумента.СуммаДСВРаботодателя;
		РеестрДСВ.СуммаДСВОбщая.Значение = ВыборкапоШапкеДокумента.СуммаДСВОбщая;
		
		УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,""), НаборЗаписейВходящаяОпись);
	Иначе
		
		НаборЗаписейВходящаяОпись.Удалить("ПачкаСЗВ4");
		
		УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		
		ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,""), НаборЗаписейВходящаяОпись);
		
	КонецЕсли;
	
	
	Возврат УзелПачкаВходящихДокументов;
	
КонецФункции // ЗаполнитьНаборЗаписейВходящаяОпись()

Процедура ЗаменитьБуквуЁ(РедактируемаяСтрока, НазваниеРеквизита) Экспорт
	Если Найти(ВРег(РедактируемаяСтрока), "Ё") > 0 Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("В реквизите """ + НазваниеРеквизита + """ (" + РедактируемаяСтрока +") буква Ё заменена на Е.");
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "Ё", "Е");
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "ё", "е");
		
	КонецЕсли;
КонецПроцедуры // ЗаменитьБуквуЁ()

// Процедура заполняет реквизиты файла - сведения об организации
//
Процедура ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкапоШапкеДокумента) Экспорт
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		НаборЗаписейСоставительПачки.КодЕГРИП.Значение = СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияОГРН);
		НаборЗаписейСоставительПачки.Удалить("КодЕГРЮЛ");
	Иначе
		НаборЗаписейСоставительПачки.Удалить("КодЕГРИП");
		НаборЗаписейСоставительПачки.КодЕГРЮЛ.Значение = СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияОГРН);
	КонецЕсли;
	
	НаборЗаписейСоставительПачки.Форма.Значение = ВРег(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ, 40));
	ЗаменитьБуквуЁ(НаборЗаписейСоставительПачки.Форма.Значение, "Организационно-правовая форма по ОКОПФ");
	
	НомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР, " ", "");
	Если СтрДлина(НомерПФР) <> 14 Тогда
		НомерПФР = Лев(НомерПФР, 8) + "0" + Сред(НомерПФР, 9)
	КонецЕсли;
	НаборЗаписейСоставительПачки.РегистрационныйНомер.Значение = НомерПФР;
	НаборЗаписейСоставительПачки.Удалить("ДатаВыдачиЛицензии");
	НаборЗаписейСоставительПачки.Удалить("НомерЛицензии");
	
	НаборЗаписейНалоговыйНомер = НаборЗаписейСоставительПачки.НалоговыйНомер.Значение;
	НаборЗаписейНалоговыйНомер.ИНН = ВыборкаПоШапкеДокумента.ОрганизацияИНН;
	Если ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		НаборЗаписейНалоговыйНомер.Удалить("КПП");
		ТаблицаПолей = НаборЗаписейСоставительПачки.НалоговыйНомер.Поля;
		ТаблицаПолей.Индексы.Добавить("ИмяПоля");
		СтрокаКПП = ТаблицаПолей.Найти("КПП", "ИмяПоля");
		Если СтрокаКПП <> Неопределено Тогда
			ТаблицаПолей.Удалить(СтрокаКПП);
		КонецЕсли;
	Иначе
		НаборЗаписейНалоговыйНомер.КПП = ВыборкаПоШапкеДокумента.ОрганизацияКПП;
	КонецЕсли;
	
	НаборЗаписейСоставительПачки.НаименованиеОрганизации.Значение = СокрЛП(ВРЕГ(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеПолное,НаборЗаписейСоставительПачки.НаименованиеОрганизации.Размер)));
	ЗаменитьБуквуЁ(НаборЗаписейСоставительПачки.НаименованиеОрганизации.Значение, "Наименование организации");
	НаборЗаписейСоставительПачки.НаименованиеКраткое.Значение = СокрЛП(ВРег(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеСокращенное, НаборЗаписейСоставительПачки.НаименованиеКраткое.Размер)));
	ЗаменитьБуквуЁ(НаборЗаписейСоставительПачки.НаименованиеКраткое.Значение, "Краткое наименование организации");
	
	НаборЗаписейСоставительПачки.Удалить("Подразделение");
	
	
КонецПроцедуры // ЗаполнитьСоставительПачки()

// Процедура ищет адрес в справочнике Адресный классификатор, и если
// не находит указанный регион, район, город, населенный пункт, то возвращает
// Отказ = Истина, в текстеошибки возвращается текст ошибки.
// Если не найдена только улица, то возвращается только ТекстОшибки, 
// значение переменной отказ не изменяется.
Функция ПроверитьАдресПоКЛАДР(АдресСписком) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамРегион", АдресСписком.Регион);
	Запрос.УстановитьПараметр("парамРайон", АдресСписком.Район);
	Запрос.УстановитьПараметр("парамГород", АдресСписком.Город);
	Запрос.УстановитьПараметр("парамНаселенныйПункт", АдресСписком.НаселенныйПункт);
	Запрос.УстановитьПараметр("парамУлица", АдресСписком.Улица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НаселенныйПункт.КодРайонаВКоде = 0
	|				И &ПарамРайон <> """"
	|			ТОГДА "" район""
	|		КОГДА НаселенныйПункт.КодГородаВКоде = 0
	|				И &ПарамГород <> """"
	|			ТОГДА "" город""
	|		КОГДА НаселенныйПункт.КодНаселенногоПунктаВКоде = 0
	|				И &ПарамНаселенныйПункт <> """"
	|			ТОГДА "" населённый пункт""
	|		КОГДА ЕСТЬNULL(АдресныйКлассификатор.КодУлицыВКоде, 0) = 0
	|				И &парамУлица <> """"
	|			ТОГДА ""а улица""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СообщениеОбОшибке
	|ИЗ
	|	(ВЫБРАТЬ
	|		Город.КодРегионаВКоде КАК КодРегионаВКоде,
	|		Город.КодРайонаВКоде КАК КодРайонаВКоде,
	|		Город.КодГородаВКоде КАК КодГородаВКоде,
	|		ЕСТЬNULL(АдресныйКлассификатор.КодНаселенногоПунктаВКоде, 0) КАК КодНаселенногоПунктаВКоде
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Район.КодРегионаВКоде КАК КодРегионаВКоде,
	|			Район.КодРайонаВКоде КАК КодРайонаВКоде,
	|			ЕСТЬNULL(АДресныйКлассификатор.КодГородаВКоде, 0) КАК КодГородаВКоде
	|		ИЗ
	|			(ВЫБРАТЬ
	|				Регион.КодРегионаВКоде КАК КодРегионаВКоде,
	|				ЕСТЬNULL(АдресныйКлассификатор.КодРайонаВКоде, 0) КАК КодРайонаВКоде
	|			ИЗ
	|				(ВЫБРАТЬ
	|					АдресныйКлассификатор.КодРегионаВКоде КАК КодРегионаВКоде
	|				ИЗ
	|					РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|				ГДЕ
	|					АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамРегион
	|					И АдресныйКлассификатор.ТипАдресногоЭлемента = 1) КАК Регион
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|					ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамРайон)
	|						И (АдресныйКлассификатор.КодРегионаВКоде = Регион.КодРегионаВКоде)
	|						И (АдресныйКлассификатор.ТипАдресногоЭлемента = 2)) КАК Район
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АДресныйКлассификатор
	|				ПО (АДресныйКлассификатор.Наименование + "" "" + АДресныйКлассификатор.Сокращение = &парамГород)
	|					И (АДресныйКлассификатор.КодРегионаВКоде = Район.КодРегионаВКоде)
	|					И (АДресныйКлассификатор.КодРайонаВКоде = Район.КодРайонаВКоде)
	|					И (АДресныйКлассификатор.ТипАдресногоЭлемента = 3)) КАК Город
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|			ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамНаселенныйПункт)
	|				И (АдресныйКлассификатор.КодРегионаВКоде = Город.КодРегионаВКоде)
	|				И (АдресныйКлассификатор.КодРайонаВКоде = Город.КодРайонаВКоде)
	|				И (АдресныйКлассификатор.КодГородаВКоде = Город.КодГородаВКоде)
	|				И (АдресныйКлассификатор.ТипАдресногоЭлемента = 4)) КАК НаселенныйПункт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|		ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамУлица)
	|			И (АдресныйКлассификатор.КодРегионаВКоде = НаселенныйПункт.КодРегионаВКоде)
	|			И (АдресныйКлассификатор.КодРайонаВКоде = НаселенныйПункт.КодРайонаВКоде)
	|			И (АдресныйКлассификатор.КодГородаВКоде = НаселенныйПункт.КодГородаВКоде)
	|			И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = НаселенныйПункт.КодНаселенногоПунктаВКоде)
	|			И (АдресныйКлассификатор.ТипАдресногоЭлемента = 5)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеОбОшибке";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ТекстОшибки = "";
	Если ВыборкаЗапроса.Следующий() Тогда
		ТекстОшибки = ВыборкаЗапроса.СообщениеОбОшибке;
	Иначе
		ТекстОшибки = " регион";
	КонецЕсли;
	
	Возврат ТекстОшибки
КонецФункции // ПроверитьАдресПоКЛАДР()

// Процедура заполняет адрес, представленный в структуре для записи в XML файл 
// входными данынми является строка адреса
//  СписокСтран - Список стран и их кодов
// СписокСокращений1-5 - сокращения для определенного реквизита адреса
// ФорматИностранныйАдрес, ФорматНеструктурированныйАдрес - форматы данных для не Российских адресов.
// ВыходноеЗначение: НаборЗаписейАдрес
Процедура ЗаполнитьАдрес(НаборЗаписейАдрес, СтрокаАдрес, СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ТекстПредупреждения) Экспорт
	АдресСписком = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВРег(СтрокаАдрес));	
	ЗаПределамиРФ = Ложь;
	АдресСписком.Свойство("ЗаПределамиРФ", ЗаПределамиРФ);
	// ЗаПределамиРФ может быть неопределно, поэтому сравниваем на значение
	Если ЗаПределамиРФ = Истина Тогда
		Если АдресСписком.Страна = "РОССИЯ" Тогда
			// Неструктурированный адрес
			НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматНеструктурированныйАдрес);
			НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
			ЗаменитьБуквуЁ(НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес, "Адрес");
			НаборЗаписейАдрес.ТипАдреса.Значение = "НЕСТРУКТУРИРОВАННЫЙ";
			НаборЗаписейАдрес.Удалить("Индекс");
			ТекстПредупреждения = " сохранен как неструктурированный адрес."
		Иначе
			// Иностранный адрес
			
			НазваниеСтраны = СокрЛП(АдресСписком.Страна);
			КодСтраны = СписокСтран.Получить(НазваниеСтраны);
			Если КодСтраны = Неопределено Тогда
				// не удалось получить страну, запишем как неструктурированный адрес
				НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматНеструктурированныйАдрес);
				НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
				ЗаменитьБуквуЁ(НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес, "Адрес");
				НаборЗаписейАдрес.ТипАдреса.Значение = "НЕСТРУКТУРИРОВАННЫЙ";
				НаборЗаписейАдрес.Удалить("Индекс");
				ТекстПредупреждения = " сохранен как неструктурированный адрес."
			Иначе
				НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматИностранныйАдрес);
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.КодСтраны = КодСтраны;
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.НазваниеСтраны = НазваниеСтраны;
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
				НаборЗаписейАдрес.ТипАдреса.Значение = "ИНОСТРАННЫЙ";
				НаборЗаписейАдрес.Удалить("Индекс");
				ТекстПредупреждения = " сохранен как иностранный адрес."
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Российский адрес
		НаборЗаписейАдрес.Индекс.Значение = АдресСписком.Индекс;
		НаборЗаписейАдрес.ТипАдреса.Значение = "РОССИЙСКИЙ";
		
		НаборЗаписейРоссийскийАдрес = НаборЗаписейАдрес.РоссийскийАдрес.Значение;
		НаборЗаписейРоссийскийАдрес.СостояниеАдреса.Значение = "ПРАВИЛЬНЫЙ";
		
		НаборЗаписейРоссийскийАдрес.Регион.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Регион, НаборЗаписейРоссийскийАдрес.Регион.Значение.Сокращение);
		ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Регион.Значение.ГеографическоеНазвание, "Регион");
		
		НаборЗаписейРоссийскийАдрес.Район.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Район, НаборЗаписейРоссийскийАдрес.Район.Значение.Сокращение);
		ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Район.Значение.ГеографическоеНазвание, "Район");
		
		НаборЗаписейРоссийскийАдрес.Город.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Город, НаборЗаписейРоссийскийАдрес.Город.Значение.Сокращение);		
		ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Город.Значение.ГеографическоеНазвание, "Город");
		НаборЗаписейРоссийскийАдрес.НаселенныйПункт.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.НаселенныйПункт, НаборЗаписейРоссийскийАдрес.НаселенныйПункт.Значение.Сокращение);
		ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Город.Значение.ГеографическоеНазвание, "Населенный пункт");
		НаборЗаписейРоссийскийАдрес.Улица.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Улица, НаборЗаписейРоссийскийАдрес.Улица.Значение.Сокращение);
		ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Улица.Значение.ГеографическоеНазвание, "Улица");
		
		Если Не ПустаяСтрока(АдресСписком.Дом) Тогда
			НаборЗаписейРоссийскийАдрес.Дом.Значение.Номер = АдресСписком.Дом;
			НаборЗаписейРоссийскийАдрес.Дом.Значение.Сокращение = "Д";
		КонецЕсли;
		
		Если Не ПустаяСтрока(АдресСписком.Корпус) Тогда
			НаборЗаписейРоссийскийАдрес.Корпус.Значение.Номер = АдресСписком.Корпус;
			НаборЗаписейРоссийскийАдрес.Корпус.Значение.Сокращение = "КОРП";
		КонецЕсли;
		
		Если Не ПустаяСтрока(АдресСписком.Квартира) Тогда
			НаборЗаписейРоссийскийАдрес.Квартира.Значение.Номер = АдресСписком.Квартира;
			НаборЗаписейРоссийскийАдрес.Квартира.Значение.Сокращение = "КВ";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПФРXMLЗаполнитьАдрес()

// Функция преобразует дерево значений в котором представлен XML файл, в текст
//
Функция ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки, АтрибутыПачкиВходящихДокументов = Неопределено) Экспорт
	
	// Преобразуем дерево в строковое описание XML
	
	ПотокВыгрузкиXML = СоздатьПотокXML();
	
	ЗаписатьУзелДереваXMLВXMLдляПФР(ДеревоВыгрузки, ПотокВыгрузкиXML);
	
	// получаем содержимое файла в виде строки
	
	ТекстФайла = СтрЗаменить(ЗаписатьПотокXML(ПотокВыгрузкиXML),"<ПачкаВходящихДокументов>",
	"<ПачкаВходящихДокументов " + ?(АтрибутыПачкиВходящихДокументов = Неопределено, "Окружение=""В составе файла"" Стадия=""До обработки""", АтрибутыПачкиВходящихДокументов) + ">");
	
	Возврат ТекстФайла;
	
КонецФункции // ПолучитьТекстФайлаИзДереваЗначений


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ ОТЧЕТОВ ПО СОХРАНЕННОМУ XML ФАЙЛУ
//

// Функция возвращает значение строки дерева значений из колонки "Имя"
Функция ИзвлечьДанное(СтрокаДерева,Имя) Экспорт 
	СтрокаДанных = СтрокаДерева.Строки.Найти(Имя,"Имя",Истина);
	Если СтрокаДанных = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрокаДанных.Значение;
	КонецЕсли;
КонецФункции

// Функция возращает представление адреса полученное из строк дерева значений, 
// представляющих XML ПФР файл выгрузки формат 07.00
Функция ПредставлениеАдресадляПФР(Знач СтрокаДереваАдрес) Экспорт
	Адрес = "";
	ТипАдреса = ИзвлечьДанное(СтрокаДереваАдрес, "ТипАДреса");
	Индекс = ИзвлечьДанное(СтрокаДереваАдрес, "Индекс");
	СтрокаДереваРоссийскийАдрес = СтрокаДереваАдрес.Строки.Найти("РоссийскийАдрес");
	СтрокаДереваИностранныйАдрес = СтрокаДереваАдрес.Строки.Найти("ИностранныйАдрес");
	СтрокаДереваНеструктурированныйАдрес = СтрокаДереваАдрес.Строки.Найти("НеструктурированныйАдрес");
	Если СтрокаДереваРоссийскийАдрес <> Неопределено Тогда
		СтрокаДереваРегион = СтрокаДереваРоссийскийАдрес.Строки.Найти("Регион");
		Если СтрокаДереваРегион <> Неопределено Тогда
			Регион = ИзвлечьДанное(СтрокаДереваРегион, "ГеографическоеНазвание");
			СокращениеРегион =  ИзвлечьДанное(СтрокаДереваРегион, "Сокращение");
		КонецЕсли;
		СтрокаДереваРайон = СтрокаДереваРоссийскийАдрес.Строки.Найти("Район");
		Если СтрокаДереваРайон <> Неопределено Тогда
			Район = ИзвлечьДанное(СтрокаДереваРайон, "ГеографическоеНазвание");
			СокращениеРайон = ИзвлечьДанное(СтрокаДереваРайон, "Сокращение");
		КонецЕсли;
		СтрокаДереваГород = СтрокаДереваРоссийскийАдрес.Строки.Найти("Город");
		Если СтрокаДереваГород <> Неопределено Тогда
			Город = ИзвлечьДанное(СтрокаДереваГород, "ГеографическоеНазвание");
			СокращениеГород = ИзвлечьДанное(СтрокаДереваГород, "Сокращение");
		КонецЕсли;
		СтрокаДереваНаселенныйПункт = СтрокаДереваРоссийскийАдрес.Строки.Найти("НаселенныйПункт");
		Если СтрокаДереваНаселенныйПункт <> Неопределено Тогда
			НаселенныйПункт = ИзвлечьДанное(СтрокаДереваНаселенныйПункт, "ГеографическоеНазвание");
			СокращениеНаселенныйПункт = ИзвлечьДанное(СтрокаДереваНаселенныйПункт, "Сокращение");
		КонецЕсли;
		СтрокаДереваУлица = СтрокаДереваРоссийскийАдрес.Строки.Найти("Улица");
		Если СтрокаДереваУлица <> Неопределено Тогда
			Улица = ИзвлечьДанное(СтрокаДереваУлица, "ГеографическоеНазвание");
			СокращениеУлица = ИзвлечьДанное(СтрокаДереваУлица, "Сокращение");
		КонецЕсли;
		СтрокаДереваДом = СтрокаДереваРоссийскийАдрес.Строки.Найти("Дом");
		Если СтрокаДереваДом <> Неопределено Тогда
			СокращениеДом = ИзвлечьДанное(СтрокаДереваДом, "Сокращение");
			Дом = ИзвлечьДанное(СтрокаДереваДом, "Номер");
		КонецЕсли;
		СтрокаДереваКорпус = СтрокаДереваРоссийскийАдрес.Строки.Найти("Корпус");
		Если СтрокаДереваКорпус <> Неопределено Тогда
			СокращениеКорпус = ИзвлечьДанное(СтрокаДереваКорпус, "Сокращение");
			Корпус = ИзвлечьДанное(СтрокаДереваКорпус, "Номер");
		КонецЕсли;
		СтрокаДереваКвартира = СтрокаДереваРоссийскийАдрес.Строки.Найти("Квартира");
		Если СтрокаДереваКвартира <> Неопределено Тогда
			СокращениеКвартира = ИзвлечьДанное(СтрокаДереваКвартира, "Сокращение");
			Квартира = ИзвлечьДанное(СтрокаДереваКвартира, "Номер");
		КонецЕсли;
		Адрес = ?(ЗначениеЗаполнено(Индекс),", "+Индекс,"")+
		?(ЗначениеЗаполнено(Регион), ", "+Регион+" "+СокращениеРегион, "")+
		?(ЗначениеЗаполнено(Район), ", "+Район+" "+СокращениеРайон, "")+
		?(ЗначениеЗаполнено(Город), ", "+Город+" "+СокращениеГород, "")+
		?(ЗначениеЗаполнено(НаселенныйПункт), ", "+НаселенныйПункт+" "+СокращениеНаселенныйПункт, "")+
		?(ЗначениеЗаполнено(Улица), ", "+Улица+" "+СокращениеУлица, "")+
		?(ЗначениеЗаполнено(Дом), ", "+СокращениеДом+" "+Дом, "")+
		?(ЗначениеЗаполнено(Корпус), ", "+СокращениеКорпус+" "+Корпус, "")+
		?(ЗначениеЗаполнено(Квартира), ", "+СокращениеКвартира+" "+Квартира, "");
		Адрес = Сред(Адрес,2);//Убрали первую запятую
		
	ИначеЕсли СтрокаДереваИностранныйАдрес <> Неопределено Тогда
		КодСтраны = ИзвлечьДанное(СтрокаДереваИностранныйАдрес, "КодСтраны");
		НазваниеСтраны = ИзвлечьДанное(СтрокаДереваИностранныйАдрес, "НазваниеСтраны");
		АдресВСтране = ИзвлечьДанное(СтрокаДереваИностранныйАдрес, "НазваниеСтраны");
		Адрес = ?(ЗначениеЗаполнено(Индекс),", "+Индекс, "")+
		?(ЗначениеЗаполнено(НазваниеСтраны),", "+НазваниеСтраны, "")+
		?(ЗначениеЗаполнено(АдресВСтране),", "+АдресВСтране, "");
		Адрес = Сред(Адрес,1);//Убрали первую запятую
		
	ИначеЕсли СтрокаДереваНеструктурированныйАдрес <> Неопределено Тогда
		Адрес = ИзвлечьДанное(СтрокаДереваНеструктурированныйАдрес, "Адрес");
		
	КонецЕсли;
	Возврат Адрес;
КонецФункции

// Функция возвращает представление даты полученной из XML файла.
// СтрДата - дата в формате XML ПФР 07.00
Функция ДатаXMLВОтчет(СтрДата, РазвернутоеПредставление = Истина) Экспорт
	Если СтрДата = "" Тогда
		ВозвращаемаяДата = Дата(1, 1, 1);
	Иначе
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрДата, ".");
		Если Число(МассивПодстрок[0]) = 0 Тогда
			МассивПодстрок[0] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[1]) = 0 Тогда
			МассивПодстрок[1] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[2]) = 0 Тогда
			МассивПодстрок[2] = "1";
		КонецЕсли;
		ВозвращаемаяДата = Дата(МассивПодстрок[2], МассивПодстрок[1], МассивПодстрок[0]);
	КонецЕсли;
	Если РазвернутоеПредставление Тогда
		Возврат ДатаВОтчет(ВозвращаемаяДата);
	Иначе
		Возврат ВозвращаемаяДата;
	КонецЕсли;
	
КонецФункции

// Функция возвращает дерево значений, заполненное из текста XML файла.
Функция ПреобразоватьВДеревоXML(СтрокаXML) Экспорт
	
	НовоеДеревоXML = СоздатьДеревоXML();
	
	Возврат ДобавитьВДеревоXML(НовоеДеревоXML, СтрокаXML);
	
КонецФункции

// Функция производит формирование древовидной структуры,
// начиная с переданной в ВеткаДерева ветки дерева значений
// на основе описания XML, переданного в СтрокаXML
Функция ДобавитьВДеревоXML(ВеткаДерева, СтрокаXML)
	
	XMLПоток = Новый ЧтениеXML();
	
	Попытка
		XMLПоток.УстановитьСтроку(СтрокаXML);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ДеревоФайла = Новый ДеревоЗначений;
	ДеревоФайла.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
	ДеревоФайла.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	ТекущаяВетка = Неопределено;
	
	Попытка
		
		Пока XMLПоток.Прочитать() Цикл
			Если XMLПоток.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекущаяВетка = СоздатьУзелНаВетке(ТекущаяВетка, ДеревоФайла);
				ТекущаяВетка.Имя = XMLПоток.Имя;
				
				ВеткаАтрибутов = Неопределено;
				
				Пока XMLПоток.ПрочитатьАтрибут() Цикл
					
					Если ВеткаАтрибутов = Неопределено Тогда
						ВеткаАтрибутов = ТекущаяВетка.Строки.Добавить();
						ВеткаАтрибутов.Имя = "АтрибутыXMLУзла";
						ВеткаАтрибутов.Значение = Неопределено;
					КонецЕсли;
					
					АтрибутВДереве = СоздатьУзелНаВетке(ВеткаАтрибутов, ДеревоФайла);
					АтрибутВДереве.Имя = XMLПоток.Имя;
					АтрибутВДереве.Значение =  XMLПоток.Значение;
				КонецЦикла;
				
			ИначеЕсли XMLПоток.ТипУзла = ТипУзлаXML.Текст Тогда
				ТекущаяВетка.Значение = XMLПоток.Значение;
				
			ИначеЕсли XMLПоток.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				ТекущаяВетка = ТекущаяВетка.Родитель;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		Возврат Неопределено;
		
	КонецПопытки;
	
	СкопироватьВетку(ВеткаДерева, ДеревоФайла);
	
	Возврат ВеткаДерева;
	
КонецФункции

// Функция копирует ветку дерева значений
Процедура СкопироватьВетку(Приемник, Источник) 
	
	Если ТипЗнч(Источник) = Тип("СтрокаДереваЗначений") Тогда // есть откуда скопировать
		
		Если ТипЗнч(Приемник) = Тип("СтрокаДереваЗначений") Тогда // некуда скопировать
			СтрокаПриемника =  Приемник;
			
		Иначе
			СтрокаПриемника = Приемник.Строки.Добавить();
			
		КонецЕсли;
		
		СтрокаПриемника.Имя = Источник.Имя;
		СтрокаПриемника.Значение = Источник.Значение;
		
	КонецЕсли;
	
	Для каждого ЛистИсточника Из Источник.Строки Цикл
		ЛистПриемника = Приемник.Строки.Добавить();
		СкопироватьВетку(ЛистПриемника, ЛистИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция создает и возвращает новую строку в дереве значений
Функция СоздатьУзелНаВетке(ТекущаяВетка, ДеревоОбработки) 
	
	Если ТекущаяВетка = Неопределено Тогда
		Возврат ДеревоОбработки.Строки.Добавить();
	Иначе
		Возврат ТекущаяВетка.Строки.Добавить();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ВЫХОДНЫХ ПЕЧАТНЫХ ФОРМ

// Формирует представление периода болезни или отпуска за свой счет для вывода в печатную форму документа
Функция ПредставлениеПериодаБолезниОтпуска(Месяцы, Дни) Экспорт
	
	Если Месяцы<>0 Тогда
		Представление = "" + Месяцы + " мес. ";
	Иначе	
		Представление = "";
	КонецЕсли; 
	Если Дни<>0 Тогда
		Представление = Представление + Дни + " дн." ;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции 

// Формирует представление параметров исчисляемого  трудового стажа
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
// Возвращаемое значение:
//		Строка
Функция ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровИТС = "";
	КодОснованияИТС = ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод;
	ПервыйПараметрИТС = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрИТС = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	ТретийПараметрИТС = ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа;
	
	Если КодОснованияИТС = "ВОДОЛАЗ" Тогда
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,""+ПервыйПараметрИТС+" ч ","")+?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" мин","");
	ИначеЕсли КодОснованияИТС = "СЕЗОН" Тогда
		ПредставлениеПараметровИТС = "";
	Иначе
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,"" + ПервыйПараметрИТС+" м ","") + ?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" дн ","") + Строка(ТретийПараметрИТС);
	КонецЕсли;
	
	Возврат ПредставлениеПараметровИТС;
	
КонецФункции

Функция ПредставлениеПараметровТерриториальныхУсловий(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровТУ = "";
	Ставка = ЗаписьСтажа.Коэффициент;
	ПервыйПараметрТУ = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрТУ = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	
	Если Ставка <> "0.00" Тогда
		ПредставлениеПараметровТУ = Ставка;
	Иначе
		ПредставлениеПараметровТУ = ?(ПервыйПараметрТУ > 0,"" + ПервыйПараметрТУ+" м ","") + ?(ВторойПараметрТУ > 0,""+ВторойПараметрТУ+" дн ","");
	КонецЕсли;
	
	Возврат ПредставлениеПараметровТУ;
	
КонецФункции

// Формирует строки "дополнительных сведений" по выслуге лет в "удобочитаемом" виде для отражения в формах.
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
//		СтрПервыйВторойПараметр  -	строка - возвращаемый параметр - представление первых двух параметров
//		СтрСтавки  -	строка - возвращаемый параметр - представление третьего параметра
//
Процедура ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСтажа, СтрПервыйВторойПараметр, СтрСтавки)Экспорт
	
	КодОснования = ЗаписьСтажа.ОснованиеВыслугиЛетКод;
	ПервыйПараметр = ЗаписьСтажа.ПервыйПараметрВыслугиЛет;
	ВторойПараметр = ЗаписьСтажа.ВторойПараметрВыслугиЛет;
	ТретийПараметр = ЗаписьСтажа.ТретийПараметрВыслугиЛет;
	
	СтрПервыйВторойПараметр = "";
	СтрСтавки = "";
	
	Если (КодОснования="ИСПКЛС1") или (КодОснования="САМОЛЕТ") или (КодОснования="ИНСПЕКТ") 
		или (КодОснования="СПЕЦАВ") или (КодОснования="ЛЕТИСП") или (КодОснования="ИТСИСП") 
		или (КодОснования="ИНСПЕКТ") или (КодОснования="ИТСМАВ") или (КодОснования="ОПЫТИСП") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
		
	ИначеЕсли (КодОснования="РЕАКТИВН") или (КодОснования="НОРМСП") или (КодОснования="НОРМАПР") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" прыжков ","");
		
	ИначеЕсли (КодОснования="УВД") или (КодОснования="ИТС")	или (КодОснования="27-14") или (КодОснования="27-15") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","");
		
	ИначеЕсли (КодОснования="ХИРУРГД") или (КодОснования="ХИРУРСМ") или (КодОснования="ЗП81ГД") или (КодОснования="ЗП81СМ") 
		или (КодОснования="28-ГДХР") или (КодОснования="28-СМХР") или (КодОснования="28-ГД") или (КодОснования="28-СМ") Тогда
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	ИначеЕсли (КодОснования="ЗП80РК") или (КодОснования="ЗП80ПД") 
		или (КодОснования="28-ПДРК") или (КодОснования="28-ПД") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","");
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАЗБОРА ФАЙЛОВ СВЕДЕНИЙ

#Если Клиент Тогда
	
//Функция разбирает заголовочные строки файла и возвращает информацию о пачке
Функция РазобратьЗаголовокФайла(Знач ТекстФайла,ИнформацияОПачке) Экспорт
	
	ВсегоСтрокВФайле = СтрЧислоСтрок(ТекстФайла);
	Если ВсегоСтрокВФайле < 4 Тогда		
		Предупреждение("Неверная структура файла: количество строк должно быть не менее 4!");		
		Возврат 0;
	КонецЕсли;
	
	ИнформацияОРаботодателе = Новый Структура;
	
	//Обработка записи заголовка "ПАЧК"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,3));
	Если МассивДанныхСтроки.Количество()<>21 Тогда
		Сообщить("Строка 3: неверное количество полей записи 'ПАЧК'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОПачке.Вставить("НомерПачкиРаботодателя",МассивДанныхСтроки[1]);
	ИнформацияОПачке.Вставить("ДатаСоставленияОписи",ДатаИзФайла(МассивДанныхСтроки[4]));
	ИнформацияОПачке.Вставить("РасчетныйПериод",МассивДанныхСтроки[6]);
	ИнформацияОПачке.Вставить("КодКатегорииЗастрахованногоЛица",МассивДанныхСтроки[7]);
	ИнформацияОПачке.Вставить("КодДополнительногоТарифа",МассивДанныхСтроки[8]);
	ИнформацияОПачке.Вставить("ТерриториальныеУсловия",МассивДанныхСтроки[9]);
	ИнформацияОПачке.Вставить("ТипСведений",МассивДанныхСтроки[10]);
	ИнформацияОПачке.Вставить("ВидКорректировки",МассивДанныхСтроки[11]);
	ИнформацияОПачке.Вставить("ИтогоВзносыСтраховаяЧасть",МассивДанныхСтроки[16]);
	ИнформацияОПачке.Вставить("ИтогоВзносыНакопительнаяЧасть",МассивДанныхСтроки[17]);
	ИнформацияОПачке.Вставить("ИтогоВзносыПоДопТарифу",МассивДанныхСтроки[18]);
	//ВсегоНЧСЛ										= Число(МассивДанныхСтроки[14]);
	//НЧСЛБл										= Число(МассивДанныхСтроки[15]);
	
	//Обработка записи заголовка "РБТД"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,2));
	Если МассивДанныхСтроки.Количество()<>6 Тогда
		Сообщить("Строка 2: неверное количество полей записи 'РБТД'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОРаботодателе.Вставить("РегистрационныйНомерПФР",МассивДанныхСтроки[2]);
	ИнформацияОРаботодателе.Вставить("ИНН",МассивДанныхСтроки[3]);
	ИнформацияОРаботодателе.Вставить("КПП",МассивДанныхСтроки[4]);
	ИнформацияОРаботодателе.Вставить("Наименование",МассивДанныхСтроки[5]);
	
	//Обработка записи заголовка "ТИПД"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,4));
	Если МассивДанныхСтроки.Количество()<>3 Тогда
		Сообщить("Строка 4: неверное количество полей записи 'ТИПД'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОПачке.Вставить("ТипДокумента",МассивДанныхСтроки[1]);
	ИнформацияОПачке.Вставить("ДокументовВПачке",ЧислоИзФайла(МассивДанныхСтроки[2]));
	
	ИнформацияОПачке.Вставить("ИнформацияОРаботодателе",ИнформацияОРаботодателе);
	Возврат 1;
КонецФункции	

//Выводит в табличный документ "ТабличныйДокумент" заполненный макет описи "Форма АДВ-6-1"
Процедура ВывестиОписьАДВ6(ТабличныйДокумент,Знач ИнформацияОПачке,Знач ОтветственныеЛица) Экспорт
	//Получим ответственные лица организации и их должности 
	МакетОписи = ПолучитьОбщийМакет("ФормаАДВ_6_1");
	СекцияОпись = МакетОписи.ПолучитьОбласть("Опись");
	
	СекцияОпись.Параметры.РегНомерПФР						= ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
	СекцияОпись.Параметры.ОКПО								= ИнформацияОПачке.ИнформацияОРаботодателе.Ссылка.КодПоОКПО;
	СекцияОпись.Параметры.ИНН								= ИнформацияОПачке.ИнформацияОРаботодателе.ИНН;
	СекцияОпись.Параметры.КПП								= ИнформацияОПачке.ИнформацияОРаботодателе.КПП;
	СекцияОпись.Параметры.Наименование						= ИнформацияОПачке.ИнформацияОРаботодателе.НаименованиеСокращенное;
	
	Если ИнформацияОПачке.ТипДокумента = "АНКТ" Тогда
		СекцияОпись.Параметры.ДокументовАДВ1вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	иначеЕсли ИнформацияОПачке.ТипДокумента = "ОБМН" Тогда
		СекцияОпись.Параметры.ДокументовАДВ2вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	иначеЕсли ИнформацияОПачке.ТипДокумента = "ДУБЛ" Тогда
		СекцияОпись.Параметры.ДокументовАДВ3вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	ИначеЕсли ИнформацияОПачке.ТипДокумента = "КОНВ" Тогда
		СекцияОпись.Параметры.ДокументовСЗВКвПачке			= ИнформацияОПачке.ДокументовВПачке;
	ИначеЕсли ИнформацияОПачке.ТипДокумента = "ИН41" ИЛИ ИнформацияОПачке.ТипДокумента = "ИН42" Тогда
		Если ИнформацияОПачке.ТипДокумента = "ИН41" Тогда
			СекцияОпись.Параметры.ДокументовСЗВ4вПачке			= ИнформацияОПачке.ДокументовВПачке;
		Иначе
			СекцияОпись.Параметры.ДокументовСЗВ4вПачке			= ИнформацияОПачке.ДокументовСЗВ4_2вПачке;
		КонецЕсли;
		СекцияОпись.Параметры.ЧислоЗастрахованныхЛицВПачке	= ИнформацияОПачке.ДокументовВПачке;
		СекцияОпись.Параметры.РасчетныйПериод 				= ИнформацияОПачке.РасчетныйПериод;
		СекцияОпись.Параметры.КодКатегорииЗастрахованногоЛица = ИнформацияОПачке.КодКатегорииЗастрахованногоЛица;
		СекцияОпись.Параметры.КодДополнительногоТарифа 		= ИнформацияОПачке.КодДополнительногоТарифа;
		СекцияОпись.Параметры.ТерриториальныеУсловия 		= ИнформацияОПачке.ТерриториальныеУсловия;
		Попытка
			СекцияОпись.Параметры.ИтогоВзносыСтраховаяЧасть		= Число(ИнформацияОПачке.ИтогоВзносыСтраховаяЧасть);
		Исключение
		КонецПопытки;
		Попытка
			СекцияОпись.Параметры.ИтогоВзносыНакопительнаяЧасть	= Число(ИнформацияОПачке.ИтогоВзносыНакопительнаяЧасть);
		Исключение
		КонецПопытки;
		Попытка
			СекцияОпись.Параметры.ИтогоВзносыПоДопТарифу		= Число(ИнформацияОПачке.ИтогоВзносыПоДопТарифу);
		Исключение
		КонецПопытки;
		
		Если ИнформацияОПачке.ТипСведений = "ИСХД" Тогда
			СекцияОпись.Рисунки.ТипСведений_ИСХД.Текст = "ю";	
		ИначеЕсли ИнформацияОПачке.ТипСведений = "ПЕНС" Тогда
			СекцияОпись.Рисунки.ТипСведений_ПЕНС.Текст = "ю";	
		КонецЕсли; 
		
		Если ИнформацияОПачке.ВидКорректировки = "КОРР" Тогда
			СекцияОпись.Рисунки.ВидКорректировки_КОРР.Текст = "ю";
		ИначеЕсли ИнформацияОПачке.ВидКорректировки = "ОТМН" Тогда
			СекцияОпись.Рисунки.ВидКорректировки_ОТМН.Текст = "ю";
		КонецЕсли;	
	КонецЕсли;	
	
	СекцияОпись.Параметры.НомерПачкиРаботодателя 			= ИнформацияОПачке.НомерПачкиРаботодателя;
	
	СекцияОпись.Параметры.ДолжностьИсполнителя				= ОтветственныеЛица.ИсполнительДолжность;
	СекцияОпись.Параметры.РасшифровкаПодписиИсполнителя		= ОтветственныеЛица.Исполнитель;
	СекцияОпись.Параметры.ДолжностьРуководителя		 		= ОтветственныеЛица.РуководительДолжность;
	СекцияОпись.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
	СекцияОпись.Параметры.ДатаЗаполнения		 			= ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
	
	ТабличныйДокумент.Вывести(СекцияОпись);
КонецПроцедуры	 

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ОБЕСПЕЧИВАЮЩИЕ РАБОТУ С ЗАПИСЯМИ ФАЙЛОВ СВЕДЕНИЙ

//Возвращает формат записи файла сведений (таблицу с именами и типами полей)
Функция ПолучитьФорматЗаписи(Знач ИмяЗаписи,Знач ДокументФорматЗаписей) Экспорт
	
	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	
	ОбластьФорматЗаписи = ДокументФорматЗаписей.ПолучитьОбласть(ИмяЗаписи);
	
	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		//тип поля хранится в 5-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст);
		Если ИмяПоля <> "" Тогда
			//тип поля хранится во 2-ой колонке	
			ТипПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст);
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);
			
			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			НовоеПоле.ТипПоля = ВРЕГ(СокрЛП(ТипПоля));
			//Если указан размер поля, сохраним его
			Если СтрРазмерПоля<>"" Тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 Тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;
	
	Возврат ТаблицаФормаЗаписи;
КонецФункции	 

//Возвращает инициализировнную структуру, соответствующую формату записи
Функция ПолучитьСтруктуруЗаписи(Знач ТаблицаФорматаЗаписи) Экспорт
	СтрИменаПолей = "";
	Для Каждого Поле из ТаблицаФорматаЗаписи цикл
		СтрИменаПолей = СтрИменаПолей +","+Поле.ИмяПоля;
	КонецЦикла;	
	
	СтрИменаПолей = Сред(СтрИменаПолей,2);//Убрали первую запятую
	Возврат Новый Структура(СтрИменаПолей);
КонецФункции	 

//Формирует строку для файла сведений на основе данных структуры записи
Функция ПолучитьСтрокуПоДаннымЗаписи(Знач Запись,Знач ТаблицаФорматаЗаписи) Экспорт
	
	Стр = "";
	
	СтрНули = "0000000000";
	
	Для Каждого Поле из ТаблицаФорматаЗаписи цикл
		
		ЗначениеПоля = Запись[Поле.ИмяПоля];
		
		Если Поле.ТипПоля = "СТРОКА" Тогда
			
			Стр = Стр +","+ """"+СокрЛП(ЗначениеПоля)+"""";
			
		ИначеЕсли Поле.ТипПоля = "ДАТА" Тогда
			
			Если ЗначениеПоля = Неопределено Тогда
				Стр = Стр + ",""""";
			Иначе
				Стр = Стр + ",""" + Формат(ЗначениеПоля, "ДФ='дд/ММ/гггг'") + """";
			КонецЕсли;
			
		Иначе//Если Поле.ТипПоля = "Число" Тогда
			
			ТипЗнчПоля = ТипЗнч(ЗначениеПоля);
			
			Если ТипЗнчПоля = Тип("Число") Тогда
				//ЗначениеПоля = ЗначениеПоля;
			ИначеЕсли ТипЗнчПоля = Тип("Строка") Тогда	
				//ЗначениеПоля = Число(ЗначениеПоля);
				ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Иначе					
				ЗначениеПоля = 0;
			КонецЕсли;
			
			//Формируем представление нуля
			РазрядностьДробнойЧасти = Поле.РазрядностьДробнойЧасти;
			Если РазрядностьДробнойЧасти = 0 Тогда
				ПредставлениеНуля = "0";
			Иначе	
				ПредставлениеНуля = "0." + Лев(СтрНули, РазрядностьДробнойЧасти);
			КонецЕсли;	 
			//Форматируем значение
			ЗначениеПоля = Формат(ЗначениеПоля,"ЧГ=0; ЧРД =.; ЧЦ=" + Поле.Размер + "; ЧДЦ=" + РазрядностьДробнойЧасти+"; ЧН=" + ПредставлениеНуля);
			
			Стр = Стр + "," + ЗначениеПоля;
		КонецЕсли;	 
	КонецЦикла;	
	
	Стр = Сред(Стр,2);//Убрали первую запятую
	
	Возврат Стр;
КонецФункции	 

//Выполняет разбор строки файла на значения элементов структуры записи
Функция РазложитьСтрокуВСтруктуруЗаписи(Знач Стр,Знач ТипЗаписи,Знач ТаблицаФормата,Запись,СтрОшибка)Экспорт
	
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(Стр);
	
	Если МассивДанныхСтроки[0] <> ТипЗаписи Тогда
		СтрОшибка = "Неверный тип записи. Ожидается запись с типом "+ТипЗаписи+"!";
		Возврат ложь;
	КонецЕсли;	
	
	Если МассивДанныхСтроки.Количество() <> ТаблицаФормата.Количество() Тогда
		СтрОшибка = "Неверное количество полей записи "+ТипЗаписи+"!";
		Возврат Ложь;
	КонецЕсли;	
	
	НомерПоля = 0;
	Для Каждого Поле из ТаблицаФормата цикл
		ЗначениеПоля = МассивДанныхСтроки[НомерПоля];
		Если Поле.ТипПоля = "ДАТА" Тогда
			ЗначениеПоля = ДатаИзФайла(ЗначениеПоля);
		ИначеЕсли Поле.ТипПоля = "ЧИСЛО" Тогда
			ЗначениеПоля = ЧислоИзФайла(ЗначениеПоля);
		КонецЕсли;	 
		Запись[Поле.ИмяПоля]=ЗначениеПоля;
		НомерПоля = НомерПоля + 1;
	КонецЦикла;	
	
	Возврат Истина;
КонецФункции	 

/////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ПРОВЕРКИ ФОРМ СЗВ

// Распечатывает список найденных ошибок с группировкой по физлицу
Процедура ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, ИсточникОшибок, ВыводитьСообщенияВОбработчикСообщений = Ложь, СообщенияРазделПроверки = Неопределено)
	
	Обработка = глЗначениеПеременной("глОбработкаСообщений");
	ВидСообщенияОшибка = Перечисления.ВидыСообщений.Ошибка;
	
	Таблица = ТаблицаПлохихЗаписей.Скопировать();
	Таблица.Свернуть("ФизЛицо");
	МассивФизлиц = Таблица.ВыгрузитьКолонку("ФизЛицо");
	ТаблицаПлохихЗаписей.Индексы.Добавить("ФизЛицо");
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 Тогда
		СтруктураПоиска = Новый Структура("ФизЛицо");
		Для каждого ФизЛицо Из МассивФизлиц цикл
			
			СтруктураПоиска.ФизЛицо = ФизЛицо;
			НайдОшибки = ТаблицаПлохихЗаписей.НайтиСтроки(СтруктураПоиска);
			
			Если НайдОшибки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	 
			
			
			Если ВыводитьСообщенияВОбработчикСообщений Тогда
				
				СтрОшибкиПоФизЛицу = "";
				СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + ИсточникОшибок+" сотрудника " + Физлицо + " обнаружены ошибки: <br>";
				НомерОшибки = 0;
				Для Каждого Ошибка из НайдОшибки цикл
					НомерОшибки = НомерОшибки + 1;
					СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + НомерОшибки+".) " + Ошибка.ОписаниеОшибки + " <br>";
				КонецЦикла;
				Обработка.ДобавитьСообщение(СтрОшибкиПоФизЛицу, ВидСообщенияОшибка,, СообщенияРазделПроверки);
				//ОбщегоНазначения.ВывестиИнформациюОбОшибке();
			Иначе
				СтрОшибкиПоФизЛицу = "--------------------------------------------------------------------------------------------" + Символы.ПС;
				СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + ИсточникОшибок+" сотрудника " + Физлицо + " обнаружены ошибки:" + Символы.ПС;
				НомерОшибки = 0;
				Для Каждого Ошибка из НайдОшибки цикл
					НомерОшибки = НомерОшибки + 1;
					СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + НомерОшибки+".) " + Ошибка.ОписаниеОшибки;
				КонецЦикла;
				ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрОшибкиПоФизЛицу,Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	 
	
КонецПроцедуры

//Проверяет правильность заполнения номера документа, удостоверяющего личность
Функция ПроверитьНомерУдостоверенияЛичности(ДокументКодИМНС, Знач Номер, СтрОшибка) Экспорт
	
	Если ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",Номер,"          "))=0 Тогда
		СтрОшибка = "В номере документа присутствуют недопустимые символы!";
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	
	СтрОшибка = "";
	
	Если ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС01
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС03
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС04
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС06
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		Если ДлинаНомера <> 6 Тогда
			СтрОшибка = "Номер документа должен состоять из 6 символов!";
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС09
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		Если ДлинаНомера <> 7 Тогда
			СтрОшибка = "Номер документа должен состоять из 7 символов!";
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС02
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС07
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС26
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		Если (ДлинаНомера < 6 ) или ( ДлинаНомера > 7 ) Тогда
			СтрОшибка = "Номер документа должен состоять из 6 или 7 символов!";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

// Проверяет правильность заполнения серии документа, удостоверяющего личность 
Функция ПроверитьСериюУдостоверенияЛичности(ДокументКодИМНС, Знач Серия , СтрОшибка) Экспорт
	
	// проверка
	Если ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС01
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС03 Тогда
		ТипДока = 1;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС04
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС06
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС07
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС26
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		ТипДока = 2;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС02
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС09
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		ТипДока = 3;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		ТипДока = 4;
	Иначе
		ТипДока = 5;
	КонецЕсли;
	
	СтрОшибка = "";
	
	Серия = СокрЛП(Серия);
	
	Если ТипДока = 1 Тогда // паспорт СССР и свид о рожд
		
		Поз = Найти(Серия,"-");
		Если Поз=0 Тогда
			СтрОшибка = "Серия документа должна состоять из двух частей, резделенных символом ""-""!";
			Возврат Ложь;
		КонецЕсли;
		
		Ч1 = Лев(Серия, Поз-1);
		Ч2 = СокрЛП(Сред(Серия, Поз+1));
		
		Поз = Найти(Ч2,"-");
		Если Поз <> 0 Тогда
			СтрОшибка = "В серии документа должно быть только две группы символов!";
			Возврат Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Ч1) Тогда
			СтрОшибка = "В серии документа отсутствует числовая часть!";
			Возврат Ложь;
		ИначеЕсли  ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("IVXLC1УХЛС",Ч1,"          "))=0 Тогда
			СтрОшибка = "Числовая часть серии документа должна указываться символами 1 У Х Л С  или  I V X L C";
			Возврат Ложь;
		ИначеЕсли РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("IVXLC",Ч1,"1УХЛС") <> РегламентированнаяОтчетность.ПреобразоватьЧислоВРимскуюНотацию(РегламентированнаяОтчетность.ПреобразоватьЧислоВАрабскуюНотацию(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("IVXLC",Ч1,"1УХЛС"))) Тогда
			СтрОшибка = "Числовая часть серии документа указана некорректно!";
			Возврат Ложь;
		ИначеЕсли (СтрДлина(Ч2) <> 2) ИЛИ (ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ",Ч2,"                                 "))=0) Тогда
			СтрОшибка = "После разделителя ""-"" в серии документа должны быть ДВЕ pусcкие заглавные буквы!";
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДока=2 Тогда // серия - две буквы: военный билет, ...
		
		Если (СтрДлина(Серия) <> 2) ИЛИ (ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ",Серия,"                                 "))=0) Тогда
			СтрОшибка = "В серии документа должны быть ДВЕ pусcкие заглавные буквы!";
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДока=3 Тогда // серия - две цифры: загранпаспорта 
		
		Если (СтрДлина(Серия) <> 2) ИЛИ (ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",Серия,"          "))=0) Тогда
			СтрОшибка = "В серии документа должно быть ДВЕ цифры!";
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДока=4 Тогда // серия - две группы цифр: новый паспорт
		
		Поз = Найти(Серия," ");
		Если Поз=0 Тогда
			СтрОшибка = "В серии документа должно быть две группы цифр!";
			Возврат Ложь;
		КонецЕсли;
		
		ПервЧасть = Лев(Серия,Поз-1);
		ВторЧасть = СокрЛП(Сред(Серия,Поз+1));
		
		Поз = Найти(ВторЧасть," ");
		Если Поз <> 0 Тогда
			СтрОшибка = "В серии документа должно быть только две группы цифр!";
			Возврат Ложь;
		КонецЕсли;
		
		Если (СтрДлина(ПервЧасть) <> 2) ИЛИ
			(ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",ПервЧасть,"          "))=0) Тогда
			СтрОшибка = "Первая группа символов серии документа должна содержать две цифры!";
			Возврат Ложь;
		КонецЕсли;
		
		Если (СтрДлина(ВторЧасть) <> 2) ИЛИ
			(ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",ВторЧасть,"          "))=0) Тогда
			СтрОшибка = "Вторая группа символов серии документа должна содержать две цифры!";
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-К

//Добавляет новую строку в таблицу плохих записей стажа
Процедура СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки,ОсновнаяЗапись = "")
	
	Если ОсновнаяЗапись = "" Тогда
		ОсновнаяЗапись = Запись;
	КонецЕсли;  
	ЗаголовокОшибки = СЗВК_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись,ОсновнаяЗапись);
	
	//Для строк сообщения сделаем отступ
	Стр = "";
	МассивСтрок =  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
	Для Каждого Строка из Массивстрок цикл
		Стр = Стр + "    " + Строка + Символы.ПС ;
	КонецЦикла;	
	ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;
	
	НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
	НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
	НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;
	
КонецПроцедуры 

//Добавляет новую строку в таблицу плохих записей сведений
Процедура СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки)
	ЗаголовокОшибки ="Запись № "+Запись.НомерЗаписи+", Вид стажа: " +Запись.ВидСтажа + ":"+Символы.ПС;
	
	//Для строк сообщения сделаем отступ
	Стр = "";
	МассивСтрок =  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
	Для Каждого Строка из Массивстрок цикл
		Стр = Стр + "    " + Строка + Символы.ПС ;
	КонецЦикла;	
	ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;
	
	НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
	НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
	НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;
КонецПроцедуры 

//Выполняет проверку дополнительной записи стажа на допустимось значений реквизитов
Функция СЗВК_ВыполнитьПроверкуДополнительнойЗаписи(Запись, ОсновнаяЗапись, ТаблицаПлохихЗаписей) 
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа) Тогда
		СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи:
		| 		Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа) Тогда
		СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи о стаже не может указываться основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	
	
	//Проверка на обязательный ввод одной из льгот
	УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловия);
	УказанРК = ЗначениеЗаполнено(Запись.РайонныйКоэффициент);
	ЗаданаГруппаТерриториальныеУсловия = УказаныТерриториальныеУсловия или УказанРК;
	
	УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
	УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет);
	
	Если (НЕ ЗаданаГруппаТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет) Тогда
		СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 
	
	//Проверка на ввод территориальной льготы
	Если ЗаданаГруппаТерриториальныеУсловия Тогда
		Если  (НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)) И(НЕ ЗначениеЗаполнено(ОсновнаяЗапись.РайонныйКоэффициент)) Тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;	
	
	//Проверка на ввод условий труда
	Если УказаныОсобыеУсловияТруда Тогда
		УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
		Если (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.ЗП12А)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.ЗП12Б)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.ЗП12Ж) Тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда должен принимать значение ЗП12А, ЗП12Б или ЗП12Ж!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;
		
		Если (УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТруда.ЗП12Ж) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104) Тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда ЗП12Ж может быть указан" 
			+Символы.ПС+"только в случае указания в основной записи кода исчисляемого стажа УИК104!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;
	
	//Проверка на ввод основания выслуги лет
	//Если УказаноОснованиеВыслугиЛет Тогда
	КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) Тогда
		Если Найти(",,ЗП81СМ,ЗП81ГД,ХИРУРСМ,ХИРУРГД,",","+КодВыслугиЛетЗаписи+",") = 0 Тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Если в основной записи не указан код выслуги лет, то в дополнительной записи" 
			+Символы.ПС+"основание выслуги лет должно быть пустым или указаны коды ЗП81СМ,ЗП81ГД,ХИРУРСМ или ХИРУРГД!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	
	Иначе//В основной записи код выслуги указан
		
		МассивПравилНаКодыВыслугиДопЗаписей =  Новый Массив;
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",НОРМАПР,РЕАКТИВН,НОРМСП,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",,ЗП81СМ,ЗП81ГД,ХИРУРСМ,ХИРУРГД,");//пустой код допустим
		
		КодВыслугиЛетОсновнойЗаписи = СОКРЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);
		
		ПроверочнаяСтрокаКодов = "";
		Для Каждого СтрокаКодов из МассивПравилНаКодыВыслугиДопЗаписей Цикл 
			Если Найти(СтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи+",") Тогда
				ПроверочнаяСтрокаКодов = СтрокаКодов;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если ПроверочнаяСтрокаКодов = "" Тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи
			+Символы.ПС+"в дополнительной записи код выслуги указываться не может!",ОсновнаяЗапись);
			Возврат Ложь;
		Иначе
			//Код выслуги основной записи исключим из списка возможных значений
			ПроверочнаяСтрокаКодов = СтрЗаменить(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи,"");
			
			Если НЕ Найти(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетЗаписи+",") Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи+" в дополнительной записи"
				+Символы.ПС+"могут быть указаны только следующие коды выслуги: "+Сред(ПроверочнаяСтрокаКодов,2),ОсновнаяЗапись);
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	//КонецЕсли;	 
	
	
	Возврат Истина;
КонецФункции	 

//Выполняет проверку записей стажа на допустимось значений реквизитов между группами
Функция СЗВК_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(СтруктураПараметров, ТаблицаПлохихЗаписей)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФизлиц",СтруктураПараметров.МассивФизлиц);
	
	//Проверяем на допустимые сочетания только те записи, в которых указан либо код условий труда, либо код основания исчисляемого стажа
	//( указание только выслуги лет допустимо)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Записи.ФизЛицо КАК ФизЛицо,
	|	Записи.НомерПериодаТрудовойДеятельности КАК НомерПериодаТрудовойДеятельности,
	|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
	|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
	|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
	|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
	|	Записи.НулевойПараметрИсчисляемогоСтажа КАК УказанныйНулевойПараметрИсчисляемогоСтажа,
	|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
	|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
	|	Сочетания.НомерПравила КАК НомерПравила,
	|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
	|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
	|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
	|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
	|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
	|	Сочетания.ФорматФОВ КАК ФорматФОВ,
	|	Записи.Организация КАК Организация,
	|	Записи.ВидДеятельности КАК ВидДеятельности,
	|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВК КАК Записи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
	|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
	|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
	|					И Сочетания.КодУсловийТруда = """")
	|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
	|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
	|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
	|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияВыслугиЛет = """")
	|			И (Сочетания.ТипШаблонаКПС = ""Любой""
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
	|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
	|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
	|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
	|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
	|ГДЕ
	|	Записи.ФизЛицо В(&МассивФизлиц)
	|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
	|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НомерПериодаТрудовойДеятельности,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") цикл
		Пока Выборка.СледующийПоЗначениюПоля("НомерПериодаТрудовойДеятельности") цикл
			Пока Выборка.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") цикл
				Пока Выборка.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") цикл
					
					СтрокаСообщений = "Комбинация значений реквизитов:";
					СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание выслуги лет = " + Выборка.УказанныйКодОснованияВыслугиЛет;
					СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание исчисляемого стажа = " + Выборка.УказанныйКодОснованияИсчисляемогоСтажа;
					СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Особые условия труда = " + Выборка.УказанныйКодУсловийТруда;
					СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Код позиции списка = " + Выборка.УказанныйКодПозицииСписка;
					
					Если (Выборка.НомерПравила = NULL)
						ИЛИ ( СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12100000-11465" И СокрЛП(Выборка.УказанныйКодОснованияИсчисляемогоСтажа) <> "ВОДОЛАЗ") 
						ИЛИ ( СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "УВД") Тогда
						СтрокаСообщений = СтрокаСообщений+Символы.ПС+"Не является допустимой!";
						
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
						Продолжить;
						
					КонецЕсли;	
					
					//Флаг допустимости значений реквизитов  группы "Фактически отработанное время"  
					ФОВДопустимо = Ложь;
					
					СтрокаСообщений = "Значения реквизитов группы ""Фактически отработанное время"" не соответствуют ни одному из заданных форматов:"+Символы.ПС;
					
					//Для Каждого ФорматФОВ из СписокДопустимыхФорматовФОВ цикл
					Пока Выборка.Следующий() цикл
						
						ФорматФОВ = Выборка.ФорматФОВ;
						СтрокаОшибкиФормата = "";            	
						ПрошлоПроверку = 0;
						СтрокаЗначенияПараметров = "";
						
						Для Н=0 по 2 цикл
							ФорматПараметра = Сред(ФорматФОВ,Н+1,1); 
							
							Если Н=0 Тогда
								ЗначениеПараметра = Выборка.УказанныйНулевойПараметрИсчисляемогоСтажа;
								ПсевдонимПараметра = "Годы";
							ИначеЕсли Н=1 Тогда	
								ЗначениеПараметра = Выборка.УказанныйПервыйПараметрИсчисляемогоСтажа;
								ПсевдонимПараметра = "Месяцы";
							Иначе
								ЗначениеПараметра = Выборка.УказанныйВторойПараметрИсчисляемогоСтажа;
								ПсевдонимПараметра = "Дни";
							КонецЕсли;	
							
							ПараметрПрошелПроверку = Ложь;
							
							НачалоСообщения = "Параметр исчисляемого стажа №"+Н+"("+ПсевдонимПараметра+")";
							
							Если (ФорматПараметра = "_") Тогда
								Если (ЗначениеПараметра <> 0) Тогда//ПУСТОЕ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения + " должен быть пустым (=0)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							ИначеЕсли (ФорматПараметра = "Г") Тогда
								Если (ЗначениеПараметра > 100) Тогда//ГОДЫ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 100 (лет)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							ИначеЕсли (ФорматПараметра = "М") Тогда 
								Если (ЗначениеПараметра > 11) Тогда//МЕСЯЦЫ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 11 (месяцев)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							ИначеЕсли (ФорматПараметра = "Д") Тогда 
								Если (ЗначениеПараметра > 30) Тогда//ДНИ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 30 (дней)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							ИначеЕсли (ФорматПараметра = "ч") Тогда//ЧАСЫ 
								ПараметрПрошелПроверку = ИСТИНА;
							ИначеЕсли (ФорматПараметра = "м") Тогда 
								Если (ЗначениеПараметра > 59) Тогда//МИНУТЫ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 59 (минут)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							КонецЕсли;	 
							
							Если ПараметрПрошелПроверку Тогда
								ПрошлоПроверку = ПрошлоПроверку + 1;
							КонецЕсли;	 
							
							СтрокаЗначенияПараметров = СтрокаЗначенияПараметров + ЗначениеПараметра;
						КонецЦикла;
						
						//Если формат не равен [ПУСТОЕ,ПУСТОЕ,ПУСТОЕ], то значения всех трех параметров не должны равняться 0
						Если (СокрЛП(ФорматФОВ) <> "___")и(СтрокаЗначенияПараметров="000") Тогда//
							ПрошлоПроверку = 0;
							СтрокаОшибкиФормата = СтрокаОшибкиФормата + "В параметрах (Годы,Месяцы,Дни) должно быть указано отработанное время!"+Символы.ПС;
						КонецЕсли;	
						
						Если ПрошлоПроверку = 3 Тогда
							ФОВДопустимо = Истина;
							Прервать;
						КонецЕсли;
						
						СтрФорматФОВ = ФорматФОВ;
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"_",",пустое");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"ч",",часы");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"м",",минуты");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Г",",годы");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"М",",месяцы");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Д",",дни");
						СтрФорматФОВ = Сред(СтрФорматФОВ,2);//Убрали первую запятую
						
						СтрокаОшибкиФормата = "Соглано формату ["+СтрФорматФОВ+"]:"+Символы.ПС+СтрокаОшибкиФормата;            	
						СтрокаСообщений = СтрокаСообщений + СтрокаОшибкиФормата;
					КонецЦикла;	// по вариантам формата ФОВ
					
					Если НЕ ФОВДопустимо Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
					КонецЕсли;	 
					
				КонецЦикла;// По дополнительным записям	
			КонецЦикла;// По основным записям	
		КонецЦикла;// По периодам деятельности
	КонецЦикла;// По физлицам	
	
КонецФункции	 

//Формирует строку-заголовок для сообщения об ошибке, найденной в записи о стаже
Функция СЗВК_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись, ОсновнаяЗапись) Экспорт 
	Если НЕ ЗначениеЗаполнено(Запись.Организация)или(НЕ ЗначениеЗаполнено(Запись.ВидДеятельности)) Тогда
		ЗаголовокСообщения = "Период деятельности № "+ОсновнаяЗапись.НомерПериодаТрудовойДеятельности;
	Иначе 
		ЗаголовокСообщения = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация: ")+СокрЛП(Запись.Организация)+", Вид деятельности: "+СокрЛП(Запись.ВидДеятельности);
	КонецЕсли;	                                                                                                                                                                                              
	
	Если ЗначениеЗаполнено(ОсновнаяЗапись.ДатаНачалаПериода) Тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Период: "+Формат(ОсновнаяЗапись.ДатаНачалаПериода,"ДФ='дд.ММ.гггг'")+"-"+Формат(ОсновнаяЗапись.ДатаОкончанияПериода,"ДФ='дд.ММ.гггг'");
	иначе
		ЗаголовокСообщения = ЗаголовокСообщения + ", Основная запись № "+ОсновнаяЗапись.НомерОсновнойЗаписи;
	КонецЕсли;	 
	
	Если Запись.НомерДополнительнойЗаписи <> 0 Тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Дополнительная запись № "+Запись.НомерДополнительнойЗаписи;
	КонецЕсли;	
	
	ЗаголовокСообщения = ЗаголовокСообщения + ":"+Символы.ПС;
	
	Возврат ЗаголовокСообщения;
КонецФункции	 

//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-К
Функция СЗВК_ПроверитьНаборЗаписейОСтаже(ИнициаторВызова, МассивФизЛиц, ДатаАктуальности = "", РезультатВыборкиЗаписей = "", ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	ПустаяДата = Дата('00010101');
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФизЛиц" , МассивФизЛиц);
	
	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК") Тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка" ,				ИнициаторВызова);
		Запрос.УстановитьПараметр("ДатаАктуальности" ,				ДатаАктуальности);
		Запрос.УстановитьПараметр("Организация" ,					ВыборкаПоШапкеДокумента.Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация" ,			ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияСЗВКРаботники.НомерСтроки КАК НомерСтроки,
		|	СведенияСЗВКРаботники.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	СведенияСЗВКРаботники.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	СведенияСЗВКРаботники.ФизЛицо КАК ФизЛицо,
		|	СведенияСЗВКРаботники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
		|	СведенияОФизлицеДляСЗВК.ТерриториальныеУсловияНа31_12_2001.Код КАК ТерриториальныеУсловияНа_31_12_2001Код,
		|	СведенияОФизлицеДляСЗВК.РайонныйКоэффициентНа31_12_2001 КАК РайонныйКоэффициентНа_31_12_2001,
		|	ЗаписиОСтаже.НомерПериодаТрудовойДеятельности КАК НомерПериодаТрудовойДеятельности,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.Организация КАК Организация,
		|	ЗаписиОСтаже.Организация КАК ОрганизацияНаименование,
		|	ЗаписиОСтаже.ВидДеятельности КАК ВидДеятельности,
		|	ЗаписиОСтаже.ВидДеятельности.Код КАК ВидДеятельностиКод,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.РайонныйКоэффициент КАК РайонныйКоэффициент,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.НулевойПараметрИсчисляемогоСтажа КАК НулевойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиОСтаже.Должность,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.КоличествоРабочихМест > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК СведенияСЗВКРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо В (&МассивФизЛиц)) КАК ФИОФизЛицСрезПоследних
		|		ПО СведенияСЗВКРаботники.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВК КАК ЗаписиОСтаже
		|		ПО СведенияСЗВКРаботники.ФизЛицо = ЗаписиОСтаже.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицеДляСЗВК КАК СведенияОФизлицеДляСЗВК
		|		ПО СведенияСЗВКРаботники.ФизЛицо = СведенияОФизлицеДляСЗВК.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ 
		|							ВЫБОР
		|							КОГДА &ДатаАктуальности >= РаботникиОрганизации.ПериодЗавершения  
		|									И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|								ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
		|								ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
		|							КОНЕЦ) КАК КоличествоРабочихМест, 
		|			РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&ДатаАктуальности,
		|				Организация = &ГоловнаяОрганизация
		|					И Сотрудник.Физлицо В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							СведенияОТрудовомСтажеСЗВКРаботникиОрганизации.ФизЛицо
		|						ИЗ
		|							Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК СведенияОТрудовомСтажеСЗВКРаботникиОрганизации
		|						ГДЕ
		|							СведенияОТрудовомСтажеСЗВКРаботникиОрганизации.Ссылка = &ДокументСсылка)
		|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизации
		|		ГДЕ
		|		ВЫБОР
		|			КОГДА &ДатаАктуальности >= РаботникиОрганизации.ПериодЗавершения 
		|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
		|			ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		И ВЫБОР
		|			КОГДА &ДатаАктуальности >= РаботникиОрганизации.ПериодЗавершения 
		|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
		|			ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
		|		КОНЕЦ = &Организация
		|		СГРУППИРОВАТЬ ПО
		|			РаботникиОрганизации.Сотрудник.Физлицо) КАК РаботникиОрганизаций
		|		ПО СведенияСЗВКРаботники.ФизЛицо = РаботникиОрганизаций.ФизЛицо
		|ГДЕ
		|	СведенияСЗВКРаботники.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	НомерПериодаТрудовойДеятельности,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ОсновнаяГруппировкаВыборки = "НомерСтроки";
		
	Иначе//Инициатором вызова является набор записей
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.НомерПериодаТрудовойДеятельности КАК НомерПериодаТрудовойДеятельности,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.Организация КАК Организация,
		|	ЗаписиОСтаже.Организация КАК ОрганизацияНаименование,
		|	ЗаписиОСтаже.ВидДеятельности КАК ВидДеятельности,
		|	ЗаписиОСтаже.ВидДеятельности.Код КАК ВидДеятельностиКод,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.РайонныйКоэффициент КАК РайонныйКоэффициент,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.НулевойПараметрИсчисляемогоСтажа КАК НулевойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиОСтаже.Должность
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВК КАК ЗаписиОСтаже
		|ГДЕ
		|	ЗаписиОСтаже.ФизЛицо В(&МассивФизЛиц)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо,
		|	НомерПериодаТрудовойДеятельности,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ОсновнаяГруппировкаВыборки = "ФизЛицо";
	КонецЕсли;
	
	РезультатВыборкиЗаписей = Запрос.Выполнить();
	ВыборкаЗаписей =  РезультатВыборкиЗаписей.Выбрать();
	
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	//Проверку правильности заполнения записей надо выполнять отдельно для каждого физлица
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля(ОсновнаяГруппировкаВыборки) Цикл
		
		Если ВыборкаЗаписей.НомерПериодаТрудовойДеятельности = NULL Тогда
			Продолжить;//Физлицо не имеет сведений
		КонецЕсли; 
		
		ФизЛицо = ВыборкаЗаписей.ФизЛицо;
		
		ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, Организация, ВидДеятельности, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи, НомерПериодаТрудовойДеятельности");
		
		//Список годов, в которых встречались записи с кодом исчисляемого стажа СЕЗОН
		СписокСезонныхГодов = Новый СписокЗначений;
		
		//Список значений группы реквизитов территориальные условия одной основной записи
		СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
		
		//Список значений кодов условий труда одной основной записи
		СписокУсловияТрудаЗаписи = Новый СписокЗначений;
		
		//Список значений кодов выслуги лет основной записи
		СписокВыслугаЛетЗаписи = Новый СписокЗначений;
		
		ПредыдущийНомерПериодаДеятельности = 0;
		ПредыдущийНомерОсновнойЗаписи = 0;
		ПредыдущийНомерДополнительнойЗаписи = 0;
		ПредыдущаяОрганизация = "";
		ПредыдущийВидДеятельности = Справочники.ВидыОбщественноПолезнойДеятельности.ПустаяСсылка();
		
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			Запись = ВыборкаЗаписей;
			
			// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ РЕКВИЗИТОВ "Организация" и "ВидДеятельности"
			
			//Организация и вид деятельности должны быть заполнены обязательно
			Если ПустаяСтрока(Запись.Организация) Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"));
			КонецЕсли;
			Если Запись.ВидДеятельности.Пустая() Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указан вид деятельности!");
			КонецЕсли;
			
			//Проверим, сменился ли период деятельности
			Если Запись.НомерПериодаТрудовойДеятельности <> ПредыдущийНомерПериодаДеятельности Тогда
				СменилсяНомерПериодаДеятельности = Истина;
			Иначе
				СменилсяНомерПериодаДеятельности = Ложь;
			КонецЕсли;
			
			Если (Запись.Организация <> ПредыдущаяОрганизация) ИЛИ (Запись.ВидДеятельности <>ПредыдущийВидДеятельности) Тогда
				СменилисьОрганизацияВидДеятельности = Истина;
			иначе
				СменилисьОрганизацияВидДеятельности = Ложь
			КонецЕсли;
			
			Если (СменилисьОрганизацияВидДеятельности)и(НЕ СменилсяНомерПериодаДеятельности) Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В рамках одного периода деятельности организация и вид деятельности меняться не должны!");
			КонецЕсли;
			
			// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
			
			//По умолчанию считаем, что запись основная
			ЭтоОсновнаяЗапись = Истина;
			
			//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
			ДополнительнаяЗаписьВозможна = Истина;
			Если СменилсяНомерПериодаДеятельности Тогда
				ДополнительнаяЗаписьВозможна = Ложь;
			КонецЕсли;
			
			//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
			Если (Запись.ДатаНачалаПериода = ПустаяДата) и (Запись.ДатаОкончанияПериода = ПустаяДата) Тогда
				Если ДополнительнаяЗаписьВозможна Тогда
					ЭтоОсновнаяЗапись = Ложь;
				Иначе
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указаны даты начала и окончания периода!");
				КонецЕсли;	
			ИначеЕсли (Запись.ДатаНачалаПериода = ПустаяДата) Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты окончания периода необходимо указывать дату начала периода!");
			ИначеЕсли (Запись.ДатаОкончанияПериода = ПустаяДата) Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты начала периода необходимо указавать дату окончания периода!");
			Иначе//Обе даты заполнены
				
				//Дата окончания периода не должна быть позднее 31.12.2001
				Если Запись.ДатаОкончанияПериода > '20011231'  Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата окончания периода должна быть не позднее 31 декабря 2001 года!");
				КонецЕсли;
				
				// Начало периода не должно быть позже окончания периода 
				Если Запись.ДатаНачалаПериода > Запись.ДатаОкончанияПериода Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода не должна превышать дату окончания периода!");
				КонецЕсли;
				
				// Начало периода не должно быть слишком старой
				Если Запись.ДатаНачалаПериода < Дата('19000101') Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода слишком старая!");
				КонецЕсли;
				
				Если ГОД(Запись.ДатаНачалаПериода) <> ГОД (Запись.ДатаОкончанияПериода) Тогда
					
					Если (Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ) 
						ИЛИ (Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Для оснований исчисляемого стажа ВОДОЛАЗ и СЕЗОН даты начала и окончания периода должны находиться в пределах одного календарного года!");
					КонецЕсли;
					
					Если НЕ ((Запись.ПервыйПараметрВыслугиЛет = 0) И (Запись.ВторойПараметрВыслугиЛет  = 0) И (Запись.ТретийПараметрВыслугиЛет  = 0)) Тогда 
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании параметров 1-3 выслуги лет даты начала и окончания периода должны находиться в пределах одного календарного года!");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			//Проверка только для основной записи о стаже
			Если ЭтоОсновнаяЗапись Тогда
				
				//Проверка на хронологический порядок записей
				Если ТекущаяОсновнаяЗапись.Организация <> Неопределено Тогда
					Если Запись.ДатаНачалаПериода<=ТекущаяОсновнаяЗапись.ДатаОкончанияПериода Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
					КонецЕсли;
				КонецЕсли;
				
				//Переустановка текущей основной записи
				ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
				ТекущаяОсновнаяЗапись.Организация = Запись.Организация;
				ТекущаяОсновнаяЗапись.ВидДеятельности = Запись.ВидДеятельности;
				ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
				ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
				ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
				ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
				ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
				ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
				ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
				ТекущаяОсновнаяЗапись.НомерПериодаТрудовойДеятельности = Запись.НомерПериодаТрудовойДеятельности;
				ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
				ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
				
				СписокТерриториальныеУсловияЗаписи.Очистить();
				СписокУсловияТрудаЗаписи.Очистить();
				СписокВыслугаЛетЗаписи.Очистить();
			КонецЕсли;
			
			// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
			
			//Проверка нумерации периодов деятельности
			ОжидаемыйНомерПериода = ПредыдущийНомерПериодаДеятельности +1;
			Если СменилсяНомерПериодаДеятельности Тогда
				Если (Запись.НомерПериодаТрудовойДеятельности <> ОжидаемыйНомерПериода)  Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер периода трудовой деятельности. Ожидается номер: "+ОжидаемыйНомерПериода+"!");
				КонецЕсли;
				
				//Сброс счетчика основных записей
				ПредыдущийНомерОсновнойЗаписи = 0;
			КонецЕсли;
			
			//Проверка нумерации основных и дополнительных записей
			Если (ЭтоОсновнаяЗапись) Тогда
				ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
				Если (Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");;
				КонецЕсли;
				
				//Сброс счетчика дополнительных записей
				ПредыдущийНомерОсновнойЗаписи = 0;
			Иначе
				ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
				Если (Запись.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер дополнительной записи. Ожидается номер: "+ОжидаемыйНомерДополнительнойЗаписи+"!", ТекущаяОсновнаяЗапись);;
				КонецЕсли;
			КонецЕсли;
			
			
			//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
			
			//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
			УказаныТерриториальныеУсловия = НЕ ПустаяСтрока(Запись.ТерриториальныеУсловияКод);
			УказанРК = НЕ (Запись.РайонныйКоэффициент = 0);
			ЗаданаГруппаТерриториальныеУсловия = УказаныТерриториальныеУсловия или УказанРК;
			
			//Признаки заполнения реквизитов группы "Особые условия труда"
			УказанКодПозицииСписка = НЕ ПустаяСтрока(Запись.КодПозицииСпискаКод);
			УказаныОсобыеУсловияТруда = НЕ ПустаяСтрока(Запись.ОсобыеУсловияТрудаКод);
			ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
			
			//Признаки заполнения реквизитов группы "Исчисляемый стаж"
			УказаноОснованиеИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ОснованиеИсчисляемогоСтажаКод);
			УказанТретийПараметрИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ТретийПараметрИсчисляемогоСтажа);
			ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
			
			//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
			УказанПараметрИсчисляемогоСтажа0 = НЕ (Запись.НулевойПараметрИсчисляемогоСтажа = 0); 
			УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0); 
			УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0); 
			ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа0 ИЛИ УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
			
			//Признаки заполнения реквизитов группы "ВыслугаЛет"
			УказаноОснованиеВыслугиЛет = НЕ ПустаяСтрока(Запись.ОснованиеВыслугиЛетКод);
			ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
			
			//ПРОВЕРКА ЗАПИСЕЙ С ВИДОМ ДЕЯТЕЛЬНОСТИ, ОТЛИЧНЫМ ОТ РАБОТА
			
			Если Запись.ВидДеятельности <> Справочники.ВидыОбщественноПолезнойДеятельности.РАБОТА Тогда
				Если ЗаданаГруппаТерриториальныеУсловия ИЛИ ЗаданаГруппаУсловияТруда ИЛИ ЗаданаГруппаИсчисляемыйСтаж ИЛИ ЗаданаГруппаФОВ
					ИЛИ ЗаданаГруппаФОВ ИЛИ ЗаданаГруппаВыслугаЛет Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Для записей с видом деятельности, отличным от РАБОТА, должен быть указан только период!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
				
				Если НЕ ЭтоОсновнаяЗапись Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Дополнительные записи для видов деяетльности, отличных от РАБОТА, недопустимы!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
			КонецЕсли;
			
			
			//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ  
			
			Если  НЕ ЭтоОсновнаяЗапись Тогда
				СЗВК_ВыполнитьПроверкуДополнительнойЗаписи(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
			КонецЕсли;
			
			// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
			
			Если ЗаданаГруппаТерриториальныеУсловия Тогда
				ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод)+", "+Запись.РайонныйКоэффициент;
				Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;
			КонецЕсли;
			
			Если УказаныОсобыеУсловияТруда Тогда
				ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
				Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;
			КонецЕсли;
			
			Если УказаноОснованиеВыслугиЛет Тогда
				ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
				Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;
			КонецЕсли;
			
			
			//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "ТерриториальныеУсловия"
			
			Если УказаныТерриториальныеУсловия Тогда
				Если (Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС)или(Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС) Тогда
					Если НЕ УказанРК Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Для территориальных условий РКС или МКС должен быть указан районный коэффициент!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
				Иначе
					Если УказанРК Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Для территориальных условий, отличных от РКС и МКС, районный коэффициент указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если (УказанРК) И НЕ(Запись.РайонныйКоэффициент >= 1.01 И Запись.РайонныйКоэффициент <= 2.00) Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Районный коэффициент должен быть в диапазоне от 1.01 до 2.00!", ТекущаяОсновнаяЗапись);
			КонецЕсли;
			
			//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
			
			КПС = СокрЛП(Запись.КодПозицииСпискаКод);
			
			//Определим, к какому списку принадлежит код позиции
			НазваниеСписка ="";
			Если УказанКодПозицииСписка Тогда 
				Если НЕ УказаныОсобыеУсловияТруда Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
				
				ДлинаКПС = СтрДлина(КПС);
				
				Если (ДлинаКПС=8)или(ДлинаКПС=14) Тогда
					
					Первые2СимволаКПС = Лев(КПС,2);
					Если (Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12") Тогда
						НазваниеСписка = "Список№1";
					ИначеЕсли (Первые2СимволаКПС >= "20")и(Первые2СимволаКПС <= "23") Тогда
						НазваниеСписка = "Список№2";
					Иначе	
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный код позиции списка вредных профессий!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли (ДлинаКПС=5) Тогда
					НазваниеСписка = "ПрочиеСписки";
				Иначе	
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
			КонецЕсли;//УказанКодПозицииСписка
			
			Если УказаныОсобыеУсловияТруда Тогда
				
				//Проверки на возможные коды списков для конкретных условий труда
				
				КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
				Первые8СимволовКПС = Лев(КПС,8);
				НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
				
				Если Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12А Тогда
					Если (НазваниеСписка <> "Список№1") Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12Б Тогда
					
					Если (НЕ УказанКодПозицииСписка) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен быть указан код позиции Списка №1 или Списка №2!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
					Если (НазваниеСписка = "Список№1") Тогда
						Если (ВРЕГ(Первые8СимволовКПС) <> "1010300Б")и(ВРЕГ(Первые8СимволовКПС) <> "1010100Г")и(ВРЕГ(Первые8СимволовКПС) <> "1010100Д")  Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					ИначеЕсли (НазваниеСписка <> "Список№2") Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12Г Тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку по текстильной промышленности!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12Д Тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку железнодорожников!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12Ж Тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку лесозаготовителей!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12М Тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку по работе с осужденными!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12О Тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку должностей противопожарной службы!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				Иначе
					//Для остальных кодов условий труда КПС указываться не должен
					Если УказанКодПозицииСписка Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;//УказаныОсобыеУсловияТруда
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
			
			УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
			УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
			УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
			ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
			
			Если УказаноОснованиеВыслугиЛет Тогда
				
				КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
				НачалоСообщения = "Для основания выслуги лет " + КодОснования;
				
				УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
				
				//Медицинские работники
				Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП81СМ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП81ГД)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ХИРУРСМ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ХИРУРГД) Тогда
					
					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода < Дата('19991101') Тогда
						//до 1 ноября 1999 г
						Если ПараметрыУказаны Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " до 01.11.1999 года параметры 1-3 указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
						
					Иначе//после 1 ноября 1999 г
						Если НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.11.1999 третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
						ИначеЕсли НЕ УказанТолькоТретийПараметр Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.11.1999 должен указываться только третий параметр!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					КонецЕсли;
					
					//Педагогические работники	
				ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП80ПД Тогда
					
					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода < Дата('20000901') Тогда
						//до 1 сентября 2000г
						Если  ПараметрыУказаны Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " до 01.09.2000 года параметры 1-3 указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					Иначе//после 1 сентября 2000г
						Если УказанПараметр2 Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.09.2000 второй параметр указываться не должен!", ТекущаяОсновнаяЗапись);
						ИначеЕсли НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.09.2000 третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП80РК Тогда
					
					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода < Дата('20000901') Тогда
						//до 1 сентября 2000г
						Если  ПараметрыУказаны Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " до 01.09.2000 параметры 1-3 указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					Иначе//после 1 сентября 2000г
						Если (УказанПараметр2)или(УказанПараметр3) Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.09.2000 может быть указан только первый параметр!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					КонецЕсли;
					
					//Летчики
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.САМОЛЕТ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.СПЕЦАВ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСИСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЛЕТИСП) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИНСПЕКТ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ОПЫТИСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИСПКЛС1)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСМАВ)Тогда
					
					Если  УказанПараметр3 Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
					Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (часы и минуты)!", ТекущаяОсновнаяЗапись);
					КонецЕслИ;
					
					//Парашютисты
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.РЕАКТИВН)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМАПР) Тогда
					
					//Если НЕ УказанПараметр1 Тогда
					//	СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 1 должен содержать количество прыжков, подъёмов!");
					Если (УказанПараметр2) ИЛИ (УказанПараметр3) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 2 и 3 указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
					//Управление воздушным движением и  инженерно-технический состав 	
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.УВД)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТС) Тогда
					
					Если  УказанПараметр3 Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
					//Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда
					//	СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (месяцы и дни)!");
					//КонецЕсли;	
					
					//Прочие коды выслуги лет	
				Иначе
					Если  ПараметрыУказаны Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры выслуги лет 1,2,3 указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ПараметрыУказаны Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись," Параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
			КонецЕсли;
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
			
			Если УказанТретийПараметрИсчисляемогоСтажа Тогда
				Если (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕТИ") И (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕКРЕТ") Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать значение ДЕТИ или ДЕКРЕТ!", ТекущаяОсновнаяЗапись);
				ИначеЕсли (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") Тогда
					Если (УказаноОснованиеИсчисляемогоСтажа) ИЛИ (ЗаданаГруппаФОВ) ИЛИ (УказаноОснованиеВыслугиЛет)  Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании третьего параметра исчисляемого стажа следующие группы реквизитов должны быть пустыми:		
						| Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					Если ((ЗаданаГруппаУсловияТруда)ИЛИ(ЗаданаГруппаТерриториальныеУсловия)) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения ДЕТИ группы реквизитов 
						|""Условия труда, Территориальные условия"" указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли; 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН Тогда
				Если СписокСезонныхГодов.НайтиПоЗначению(Год(Запись.ДатаНачалаПериода)) = Неопределено Тогда
					СписокСезонныхГодов.Добавить(Год(Запись.ДатаНачалаПериода));
				Иначе
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Основание исчисляемого стажа СЕЗОН в течение календарного года может указываться не более одного раза!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	 
			КонецЕсли;	
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 0,1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
			
			Если ЗаданаГруппаФОВ Тогда
				Если (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
					И (НЕ ЗаданаГруппаТерриториальныеУсловия)  Тогда
					СтрОшибка = " Параметры 0,1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов"
					+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
				КонецЕсли;	
				
				Если Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
					
					Если Запись.ПервыйПараметрИсчисляемогоСтажа > 11 Тогда
						СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	 	
					Если Запись.ВторойПараметрИсчисляемогоСтажа > 30 Тогда
						СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	 	
					
					Лет = 0;
					Месяцев = 0;
					Дней = 0;
					ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);			
					ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
					КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
					ФОВДляСравнения = Запись.НулевойПараметрИсчисляемогоСтажа *12*30 + Запись.ПервыйПараметрИсчисляемогоСтажа *30 + Запись.ВторойПараметрИсчисляемогоСтажа; 
					
					Если (ФОВДляСравнения > КалендарноеВремя) Тогда
						СтрОшибка = "Указанное фактически отработанное время превышает календарное время!";
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	
				КонецЕсли;	 
				
			КонецЕсли;	 
			
			//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
			
			//Запомним для следующей итерации
			ПредыдущаяОрганизация = Запись.Организация;
			ПредыдущийВидДеятельности = Запись.ВидДеятельности;
			ПредыдущийНомерПериодаДеятельности= Запись.НомерПериодаТрудовойДеятельности;
			ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
			ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
			
		КонецЦикла;//Цикл по записям о стаже текущего физлица
		
		
	КонецЦикла;//Цикл по физлицам
	
	СЗВК_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(Новый Структура("МассивФизлиц", МассивФизлиц), ТаблицаПлохихЗаписей);
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 Тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже");
		Возврат Ложь
	Иначе	
		Возврат Истина;
	КонецЕсли;
КонецФункции	 

//Выполняет проверку правильности заполнения строк стажа
Функция СЗВК_ПроверитьНаборСведенийДляОценкиПенсионныхПрав(ИнициаторВызова, МассивФизЛиц, РезультатВыборкиЗаписей = "") Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК") Тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка" , ИнициаторВызова);
		Запрос.УстановитьПараметр("ДатаСреза", ИнициаторВызова.Дата);
		Запрос.Текст ="ВЫБРАТЬ
		|	СведенияСЗВКРаботники.ФизЛицо КАК ФизЛицо,
		|	СведенияСЗВКРаботники.НомерСтроки,
		|	СведенияДляОценкиПенсионныхПравСЗВК.НомерЗаписи,
		|	СведенияДляОценкиПенсионныхПравСЗВК.ВидСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа.Код КАК КодСтажаКод,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Лет,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Месяцев,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Дней,
		|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КАК ФИОФизЛица
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК СведенияСЗВКРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияДляОценкиПенсионныхПравСЗВК КАК СведенияДляОценкиПенсионныхПравСЗВК
		|		ПО СведенияСЗВКРаботники.ФизЛицо = СведенияДляОценкиПенсионныхПравСЗВК.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
		|		ПО СведенияСЗВКРаботники.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	СведенияСЗВКРаботники.Ссылка = &ДокументСсылка";
		
		
	Иначе
		
		Запрос.УстановитьПараметр("МассивФизЛиц",МассивФизЛиц);
		
		Запрос.Текст ="ВЫБРАТЬ
		|	СведенияДляОценкиПенсионныхПравСЗВК.ФизЛицо КАК ФизЛицо,
		|	СведенияДляОценкиПенсионныхПравСЗВК.НомерЗаписи,
		|	СведенияДляОценкиПенсионныхПравСЗВК.ВидСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа.Код КАК КодСтажаКод,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Лет,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Месяцев,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Дней
		|ИЗ
		|	РегистрСведений.СведенияДляОценкиПенсионныхПравСЗВК КАК СведенияДляОценкиПенсионныхПравСЗВК
		|
		|ГДЕ
		|	СведенияДляОценкиПенсионныхПравСЗВК.ФизЛицо В(&МассивФизЛиц)";
		
	КонецЕсли;
	
	РезультатВыборкиЗаписей = Запрос.Выполнить(); 			  
	//ТаблицаЗаписей =  РезультатВыборкиЗаписей.Выгрузить();
	ВыборкаЗаписей = РезультатВыборкиЗаписей.Выбрать();
	
	//Для имеющихся физлиц запросим записи о стаже
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФизЛиц",МассивФизЛиц);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиОСтажеДляСЗВК.ФизЛицо,
	|	ЗаписиОСтажеДляСЗВК.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтажеДляСЗВК.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтажеДляСЗВК.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВК КАК ЗаписиОСтажеДляСЗВК
	|
	|ГДЕ
	|	ЗаписиОСтажеДляСЗВК.ФизЛицо В(&МассивФизЛиц)";
	ТаблицаЗаписейОСтаже = Запрос.Выполнить().Выгрузить();
	ТаблицаЗаписейОСтаже.Индексы.Добавить("ФизЛицо,ТерриториальныеУсловия");
	ТаблицаЗаписейОСтаже.Индексы.Добавить("ФизЛицо,ОсобыеУсловияТруда");
	ТаблицаЗаписейОСтаже.Индексы.Добавить("ФизЛицо,ОснованиеВыслугиЛет");
	
	// Таблица собщений об ошибках
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Запись");
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	//Проверку правильности заполнения записей надо выполнять отдельно для каждого физлица
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("ФизЛицо") цикл
		
		Если ВыборкаЗаписей.НомерЗаписи = NULL Тогда
			Продолжить;//Если записей нет, то пропустим физлицо
		КонецЕсли;	
		
		ФизЛицо = ВыборкаЗаписей.ФизЛицо;
		
		КоличествоЗаписейОбОбщемТрудовомСтаже =0; 
		КоличествоЗаписейТЕРР =0; 
		КоличествоЗаписейОСОБ =0; 
		КоличествоЗаписейВЫСЛ =0; 
		СписокПроверенныхКодовСтажа = Новый СписокЗначений;
		
		//Для Каждого Запись Из НайдСтрокиСведений цикл
		Пока ВыборкаЗаписей.Следующий() цикл
			
			Запись = ВыборкаЗаписей;
			
			НачалоСообщения = "";
			
			Если ПустаяСтрока(Строка(Запись.ВидСтажа)) Тогда
				СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Не указан вид стажа!");
				Продолжить;
			КонецЕсли;	 
			
			Если (Запись.Лет + Запись.Месяцев + Запись.Дней) = 0 Тогда
				СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Значения реквизитов ""Лет, Месяцев, Дней"" не должны одновременно равняться нулю!");
			КонецЕсли;
			
			Если Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОбщийТрудовойСтаж Тогда
				
				//Проверка записей об общем стаже
				КоличествоЗаписейОбОбщемТрудовомСтаже = КоличествоЗаписейОбОбщемТрудовомСтаже + 1;
				Если КоличествоЗаписейОбОбщемТрудовомСтаже > 1 Тогда
					СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Записей об общем стаже должно быть не больше одной!");
				КонецЕсли;	 
				
			Иначе
				
				//Проверка кода стажа 
				
				Если Запись.КодСтажа = Неопределено Тогда
					
					СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Не указан код стажа!");
					
				Иначе//Код стажа заполнен
					
					КлючПоискаДублей = ""+Запись.ВидСтажа+СокрЛП(Запись.КодСтажаКод);
					Если СписокПроверенныхКодовСтажа.НайтиПоЗначению(КлючПоискаДублей) <> Неопределено Тогда
						СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный вид стажа """+Запись.ВидСтажа+""" и код стажа """+СокрЛП(Запись.КодСтажаКод) +""" не должны повторяться!");
					Иначе	
						СписокПроверенныхКодовСтажа.Добавить(КлючПоискаДублей);
					КонецЕсли;	
					СтруктураПоискаСтрокСтажа = Новый Структура;
					СтруктураПоискаСтрокСтажа.Вставить("ФизЛицо",ФизЛицо);
					
					//Проверка записей ТЕРР
					Если Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ТерриториальныеУсловия Тогда	
						
						Если ТипЗнч(Запись.КодСтажа)<>Тип("СправочникСсылка.ТерриториальныеУсловия") Тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный код территориального стажа не соответствует классификатору!");
						КонецЕсли;	 
						
						КоличествоЗаписейТЕРР = КоличествоЗаписейТЕРР +1;
						Если КоличествоЗаписейТЕРР > 10 Тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Количество записей с расчетом стажа по территориальным условиям должно быть не более 10!");
						КонецЕсли;	 
						
						СтруктураПоискаСтрокСтажа.Вставить("ТерриториальныеУсловия",Запись.КодСтажа);
						
					ИначеЕсли Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОсобыеУсловияТруда Тогда	
						
						//Проверка записей ОСОБ
						Если ТипЗнч(Запись.КодСтажа)<>Тип("СправочникСсылка.ОсобыеУсловияТруда") Тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный код условий труда не соответствует классификатору!");
						КонецЕсли;	 
						
						КоличествоЗаписейОСОБ = КоличествоЗаписейОСОБ +1;
						Если КоличествоЗаписейОСОБ > 10 Тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Количество записей с расчетом стажа по особым условиям труда должно быть не более 10!");
						КонецЕсли;	 
						
						СтруктураПоискаСтрокСтажа.Вставить("ОсобыеУсловияТруда",Запись.КодСтажа);
					ИначеЕсли Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ВыслугаЛет Тогда	
						
						//Проверка записей ВЫСЛ
						Если ТипЗнч(Запись.КодСтажа)<>Тип("СправочникСсылка.ОснованияВыслугиЛет") Тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный код выслуги лет не соответствует классификатору!");
						КонецЕсли;	 
						
						КоличествоЗаписейВЫСЛ = КоличествоЗаписейВЫСЛ +1;
						Если КоличествоЗаписейВЫСЛ > 10 Тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Количество записей с расчетом стажа по выслуге лет должно быть не более 10!");
						КонецЕсли;	 
						
						СтруктураПоискаСтрокСтажа.Вставить("ОснованиеВыслугиЛет",Запись.КодСтажа);
					КонецЕсли;	
					
					НайдМассивСтрокСтажа = ТаблицаЗаписейОСтаже.НайтиСтроки(СтруктураПоискаСтрокСтажа);
					
					Если НайдМассивСтрокСтажа.Количество() = 0 Тогда
						СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный код стажа """+Запись.КодСтажа +""" не указан ни в одном из периодов трудовой деятельности!");
					КонецЕсли;	 
					
				КонецЕсли;	 
				
			КонецЕсли;	 
			
		КонецЦикла;//По записям набора
	КонецЦикла;	//По ФизЛицам
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 Тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке сведений для оценки пенсионных прав");
		Возврат Ложь;
	Иначе	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции	 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-4

// Выполняет авторасчет стажа для формы СЗВ4
//
Функция СЗВ4_ПолучитьДанныеДляЗаполненияСтажа(ОбособленноеПодразделение, Год, СписокФизЛиц = Неопределено, Знач ДатаОкончанияПериодаЗаполнения = Неопределено) Экспорт
	
	НачалоГода = Дата(Год,1,1);
	КонецГода = КонецГода(Дата(Год,1,1));
	
	Если ДатаОкончанияПериодаЗаполнения = Неопределено Тогда
		ДатаОкончанияПериодаЗаполнения = КонецГода;
	КонецЕсли;
	ДатаОкончанияПериодаЗаполнения = КонецДня(ДатаОкончанияПериодаЗаполнения);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокФизЛиц",				СписокФизЛиц);
	Запрос.УстановитьПараметр("Год",						Год);
	Запрос.УстановитьПараметр("НачалоГода",					НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",					ДатаОкончанияПериодаЗаполнения);
	Запрос.УстановитьПараметр("НачалоСледующегоГода",		ДатаОкончанияПериодаЗаполнения + 1);
	Запрос.УстановитьПараметр("Организация",				ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение));
	Запрос.УстановитьПараметр("ТерриториальныеУсловия",		ОбособленноеПодразделение.ТерриториальныеУсловияПФР);
	Запрос.УстановитьПараметр("НеОтбиратьДанныеПоФизлицу",	СписокФизЛиц = Неопределено);
	
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	&НачалоГода КАК ДатаС,
	|	РаботникиОрганизацииСрезПоследних.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ПериодЗавершения
	|ПОМЕСТИТЬ ВТДатыДвижений
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоГода,
	|			Организация = &ГоловнаяОрганизация " + ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников() + "
	|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|					ИЛИ Сотрудник.ФизЛицо В (&СписокФизЛиц) )) КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Период,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность,
	|	РаботникиОрганизации.ГрафикРаботы,
	|	РаботникиОрганизации.ПериодЗавершения
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	(&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|	И РаботникиОрганизации.Организация = &ГоловнаяОрганизация " + ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников("РаботникиОрганизации.") + "
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизации.Период > &НачалоГода
	|	И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|	И РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.Физлицо,
	|	Работники.ПериодЗавершения,
	|	Работники.Организация,
	|	Работники.ПодразделениеОрганизацииЗавершения,
	|	Работники.ДолжностьЗавершения,
	|	Работники.ГрафикРаботыЗавершения,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|			И (ПериодыПерекрытия.Период > Работники.Период)
	|			И (&НеОтбиратьДанныеПоФизлицу
	|				ИЛИ ПериодыПерекрытия.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И (&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ Работники.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|	И Работники.Организация = &ГоловнаяОрганизация " + ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников("Работники.") + "
	|	И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|	И Работники.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И Работники.ПериодЗавершения > &НачалоГода
	|	И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыДвижений.Сотрудник КАК Сотрудник,
	|	ПериодыДвижений.ФизЛицо КАК ФизЛицо,
	|	ПериодыДвижений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПериодыДвижений.Должность КАК Должность,
	|	ПериодыДвижений.ГрафикРаботы,
	|	ПериодыДвижений.ДатаС,
	|	ПериодыДвижений.ДатаПо,
	|	ПериодыДвижений.ПериодЗавершения,
	|	ДатыУвольнения.ПричинаИзмененияСостояния
	|ПОМЕСТИТЬ ВТПериодыДвижений
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыНазначений1.Сотрудник КАК Сотрудник,
	|		ДатыНазначений1.Физлицо КАК ФизЛицо,
	|		ДатыНазначений1.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ДатыНазначений1.Должность КАК Должность,
	|		ДатыНазначений1.ГрафикРаботы КАК ГрафикРаботы,
	|		ДатыНазначений1.ДатаС КАК ДатаС,
	|		ВЫБОР
	|			КОГДА ДатыНазначений1.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода) > ДатыНазначений1.ПериодЗавершения
	|							ТОГДА ДатыНазначений1.ПериодЗавершения
	|						ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|					КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|		КОНЕЦ КАК ДатаПо,
	|		ДатыНазначений1.ПериодЗавершения КАК ПериодЗавершения
	|	ИЗ
	|		ВТДатыДвижений КАК ДатыНазначений1
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыНазначений2
	|			ПО ДатыНазначений1.Сотрудник = ДатыНазначений2.Сотрудник
	|				И (ДатыНазначений2.Организация = &ГоловнаяОрганизация)
	|				И (ДатыНазначений2.Период > ДатыНазначений1.ДатаС)
	|				И (ДатыНазначений2.Период < &НачалоСледующегоГода)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатыНазначений1.Сотрудник,
	|		ДатыНазначений1.Физлицо,
	|		ДатыНазначений1.ПодразделениеОрганизации,
	|		ДатыНазначений1.Должность,
	|		ДатыНазначений1.ГрафикРаботы,
	|		ДатыНазначений1.ДатаС,
	|		ДатыНазначений1.ПериодЗавершения) КАК ПериодыДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыУвольнения
	|		ПО ПериодыДвижений.Сотрудник = ДатыУвольнения.Сотрудник
	|			И (ДатыУвольнения.Организация = &ГоловнаяОрганизация)
	|			И ПериодыДвижений.ДатаПо = ДатыУвольнения.Период
	|			И (ДатыУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПодразделениеОрганизации,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыПостоянства.Сотрудник КАК Сотрудник,
	|	ПериодыПостоянства.ФизЛицо КАК ФизЛицо,
	|	"""" КАК ТретийПараметрИсчисляемогоСтажа,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&Год КАК Год,
	|	ПериодыПостоянства.ТерриториальныеУсловия,
	|	ПериодыПостоянства.ОсобыеУсловияТруда,
	|	ПериодыПостоянства.ГрафикРаботы,
	|	ПериодыПостоянства.КодПозицииСписка,
	|	ЕСТЬNULL(ПериодыПостоянства.ОснованиеВыслугиЛет, ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)) КАК ОснованиеВыслугиЛет,
	|	ПериодыПостоянства.НазначениеС КАК ДатаНачалаПериода,
	|	ДОБАВИТЬКДАТЕ(ПериодыПостоянства.НазначениеПо, ДЕНЬ, -1) КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТКадровыеПериоды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачалаПериодов.Сотрудник КАК Сотрудник,
	|		НачалаПериодов.ФизЛицо КАК ФизЛицо,
	|		НачалаПериодов.Должность КАК Должность,
	|		НачалаПериодов.ГрафикРаботы КАК ГрафикРаботы,
	|		НачалаПериодов.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		НачалаПериодов.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|		НачалаПериодов.КодПозицииСписка КАК КодПозицииСписка,
	|		НачалаПериодов.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|		НачалаПериодов.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|		НачалаПериодов.ДатаС КАК НазначениеС,
	|		ЕСТЬNULL(МИНИМУМ(ОкончанияПериодов.ДатаС), &НачалоСледующегоГода) КАК НазначениеПо
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПериодыНазначений.Сотрудник КАК Сотрудник,
	|			ПериодыНазначений.ФизЛицо КАК ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|			ПериодыНазначений.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|			ПериодыНазначений.Должность КАК Должность,
	|			ПериодыНазначений.КодПозицииСписка КАК КодПозицииСписка,
	|			ПериодыНазначений.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|			ПериодыНазначений.ГрафикРаботы КАК ГрафикРаботы,
	|			ПериодыНазначений.ДатаС КАК ДатаС,
	|			ЕСТЬNULL(ШР.ОсобыеУсловияТруда, ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)) КАК ОсобыеУсловияТруда
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПериодыНазначений.Сотрудник КАК Сотрудник,
	|				ПериодыНазначений.Физлицо КАК ФизЛицо,
	|				ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|				ВЫБОР
	|					КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|						ТОГДА &ТерриториальныеУсловия
	|					ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|				КОНЕЦ КАК ТерриториальныеУсловия,
	|				ПериодыНазначений.Должность КАК Должность,
	|				ПериодыНазначений.Должность.КодПозицииСписка КАК КодПозицииСписка,
	|				ПериодыНазначений.Должность.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|				ПериодыНазначений.ГрафикРаботы КАК ГрафикРаботы,
	|				ПериодыНазначений.ДатаС КАК ДатаС,
	|				МАКСИМУМ(ШР.Период) КАК Период
	|			ИЗ
	|				ВТДатыДвижений КАК ПериодыНазначений
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
	|						И (ШР.Период <= ПериодыНазначений.ДатаС)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПериодыНазначений.Сотрудник,
	|				ПериодыНазначений.Физлицо,
	|				ПериодыНазначений.ПодразделениеОрганизации,
	|				ВЫБОР
	|					КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|						ТОГДА &ТерриториальныеУсловия
	|					ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|				КОНЕЦ,
	|				ПериодыНазначений.Должность,
	|				ПериодыНазначений.Должность.КодПозицииСписка,
	|				ПериодыНазначений.Должность.ОснованиеВыслугиЛет,
	|				ПериодыНазначений.ГрафикРаботы,
	|				ПериодыНазначений.ДатаС) КАК ПериодыНазначений
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
	|					И (ШР.Период = ПериодыНазначений.Период)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПериодыНазначений.Сотрудник,
	|			ПериодыНазначений.ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации,
	|			ВЫБОР
	|				КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|					ТОГДА &ТерриториальныеУсловия
	|				ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|			КОНЕЦ,
	|			ПериодыНазначений.Должность,
	|			ПериодыНазначений.Должность.КодПозицииСписка,
	|			ПериодыНазначений.Должность.ОснованиеВыслугиЛет,
	|			ПериодыНазначений.ГрафикРаботы,
	|			ШР.Период,
	|			ШР.ОсобыеУсловияТруда
	|		ИЗ
	|			ВТПериодыДвижений КАК ПериодыНазначений
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
	|					И (ШР.Период > ПериодыНазначений.ДатаС)
	|					И (ШР.Период < ПериодыНазначений.ДатаПо
	|						ИЛИ ШР.Период = ПериодыНазначений.ДатаПо
	|							И ПериодыНазначений.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))) КАК НачалаПериодов
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|				РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|				РаботникиОрганизации.Период КАК ДатаС
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ГДЕ
	|				РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|						ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|				И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|				И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|				И РаботникиОрганизации.Период > &НачалоГода
	|				И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				Работники.Сотрудник,
	|				Работники.Сотрудник.Физлицо,
	|				Работники.ПериодЗавершения
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК Работники
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|					ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|						И (ПериодыПерекрытия.Период > Работники.Период)
	|						И (ПериодыПерекрытия.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|						И (&НеОтбиратьДанныеПоФизлицу
	|							ИЛИ ПериодыПерекрытия.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|						И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|			ГДЕ
	|				Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|						ИЛИ Работники.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|				И Работники.Организация = &ГоловнаяОрганизация
	|				И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|				И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|				И Работники.ПериодЗавершения > &НачалоГода
	|				И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПериодыНазначений.Сотрудник,
	|				ПериодыНазначений.ФизЛицо,
	|				ШР.Период
	|			ИЗ
	|				ВТПериодыДвижений КАК ПериодыНазначений
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
	|						И (ШР.Период > ПериодыНазначений.ДатаС)
	|						И (ШР.Период <= ПериодыНазначений.ДатаПо)) КАК ОкончанияПериодов
	|			ПО НачалаПериодов.Сотрудник = ОкончанияПериодов.Сотрудник
	|				И НачалаПериодов.ДатаС < ОкончанияПериодов.ДатаС
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НачалаПериодов.Сотрудник,
	|		НачалаПериодов.ФизЛицо,
	|		НачалаПериодов.ПодразделениеОрганизации,
	|		НачалаПериодов.ТерриториальныеУсловия,
	|		НачалаПериодов.Должность,
	|		НачалаПериодов.КодПозицииСписка,
	|		НачалаПериодов.ОснованиеВыслугиЛет,
	|		НачалаПериодов.ГрафикРаботы,
	|		НачалаПериодов.ДатаС,
	|		НачалаПериодов.ОсобыеУсловияТруда) КАК ПериодыПостоянства
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Начисления.Организация КАК Организация,
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ВидРасчета.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТНЕСторнированныеНачисления
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			ПериодДействия МЕЖДУ &НачалоГода И &КонецГода
	|				И Организация = &ГоловнаяОрганизация
	|				И ВидРасчета.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|					ИЛИ Сотрудник.Физлицо В (&СписокФизЛиц) )
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТДатыДвижений.Сотрудник
	|					ИЗ
	|						ВТДатыДвижений)) КАК Начисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТНачисленияСУчетомСторнирования
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|ГДЕ
	|	ТСторно.ВидРасчета ЕСТЬ NULL 
	|	И (НЕ Начисления.Сторно)
	|
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.ФизЛицо КАК ФизЛицо,
	|		Начисления.Сотрудник КАК Сотрудник,
	|		Начисления.ВидРасчета КАК ВидРасчета,
	|		Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|		Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|		СУММА(ВЫБОР
	|				КОГДА Начисления.Сторно
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК СуммаСторно
	|	ИЗ
	|		ВТНЕСторнированныеНачисления КАК Начисления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Начисления.ФизЛицо,
	|		Начисления.Сотрудник,
	|		Начисления.ВидРасчета,
	|		Начисления.ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец,
	|		Начисления.ВидСтажаСЗВ4) КАК Начисления
	|ГДЕ
	|	Начисления.СуммаСторно > 0
	|
	|ОБЪЕДИНИТЬ	
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияКонец, СЕКУНДА, 1)
	|		ИНАЧЕ Начисления.ПериодДействияНачало
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|			ТОГДА Начисления.ПериодДействияКонец
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияНачало, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И ((НЕ(ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|					И ТСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец)))
	|ГДЕ
	|	(НЕ ТСторно.ВидРасчета ЕСТЬ NULL )
	|	И (НЕ Начисления.Сторно)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияКонец, СЕКУНДА, 1),
	|	Начисления.ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И ((НЕ(ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|					И ТСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец)))
	|			И (ТСторно.ПериодДействияНачало > Начисления.ПериодДействияНачало)
	|			И (ТСторно.ПериодДействияКонец < Начисления.ПериодДействияКонец)
	|ГДЕ
	|	(НЕ ТСторно.ВидРасчета ЕСТЬ NULL )
	|	И (НЕ Начисления.Сторно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	ВидСтажаСЗВ4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияНачало >= КадровыеПериоды.ДатаНачалаПериода
	|			ТОГДА Начисления.ПериодДействияНачало
	|		ИНАЧЕ КадровыеПериоды.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияКонец <= КадровыеПериоды.ДатаОкончанияПериода
	|			ТОГДА Начисления.ПериодДействияКонец
	|		ИНАЧЕ КадровыеПериоды.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|	КадровыеПериоды.ФизЛицо КАК ФизЛицо,
	|	КадровыеПериоды.Сотрудник КАК Сотрудник,
	|	КадровыеПериоды.ОбособленноеПодразделение,
	|	КадровыеПериоды.Год
	|ПОМЕСТИТЬ ВТОплаченныеПериодыРаботы
	|ИЗ
	|	ВТКадровыеПериоды КАК КадровыеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСУчетомСторнирования КАК Начисления
	|		ПО КадровыеПериоды.Сотрудник = Начисления.Сотрудник
	|			И (Начисления.ПериодДействияНачало МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода
	|				ИЛИ Начисления.ПериодДействияКонец МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода)
	|			И (Начисления.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСУчетомСторнирования КАК ПовторныеНачисления
	|		ПО КадровыеПериоды.ФизЛицо = ПовторныеНачисления.ФизЛицо
	|			И (ПовторныеНачисления.ПериодДействияНачало = Начисления.ПериодДействияНачало)
	|			И (ПовторныеНачисления.ПериодДействияКонец = Начисления.ПериодДействияКонец)
	|			И (ПовторныеНачисления.ВидСтажаСЗВ4 <> Начисления.ВидСтажаСЗВ4)
	|			И (ПовторныеНачисления.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка))
	|ГДЕ
	|	(НЕ(Начисления.ВидСтажаСЗВ4 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж)
	|				И ЕСТЬNULL(ПовторныеНачисления.ВидСтажаСЗВ4, """") = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЕТИ)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОтдельноСтоящиеПериоды.ФизЛицо,
	|	ОтдельноСтоящиеПериоды.Сотрудник,
	|	ОтдельноСтоящиеПериоды.ВидСтажаСЗВ4,
	|	ОтдельноСтоящиеПериоды.ОбособленноеПодразделение,
	|	ОтдельноСтоящиеПериоды.Год,
	|	ВЫБОР
	|		КОГДА ПересеченияПериодов.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтдельноСтоящиеПериоды.ДатаНачалаПериода
	|		ИНАЧЕ ПересеченияПериодов.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ПересеченияПериодов.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтдельноСтоящиеПериоды.ДатаОкончанияПериода
	|		ИНАЧЕ ПересеченияПериодов.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТОтредактированныеОплаченныеПериоды
	|ИЗ
	|	ВТОплаченныеПериодыРаботы КАК ОтдельноСтоящиеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВЫБОР
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 1
	|					ТОГДА ПересекающиеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|						И ПересекающиеПериоды.ДатаОкончанияПериода > ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаОкончанияПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|						И ПересекающиеПериоды.ДатаОкончанияПериода <= ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|						И ПересекающиеПериоды.ДатаОкончанияПериода > ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|						И ПересекающиеПериоды.ДатаОкончанияПериода <= ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ПересекающиеПериоды.ДатаОкончанияПериода
	|			КОНЕЦ КАК ДатаНачалаПериода,
	|			ВЫБОР
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 1
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|					ТОГДА ПересекающиеПериоды.ДатаОкончанияПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|					ТОГДА ИсходныеПериоды.ДатаОкончанияПериода
	|			КОНЕЦ КАК ДатаОкончанияПериода,
	|			ИсходныеПериоды.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|			ИсходныеПериоды.Сотрудник КАК Сотрудник,
	|			ИсходныеПериоды.ФизЛицо КАК ФизЛицо,
	|			ИсходныеПериоды.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|			ИсходныеПериоды.Год КАК Год
	|		ИЗ
	|			ВТОплаченныеПериодыРаботы КАК ИсходныеПериоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ОплаченныеПериоды1.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|					ОплаченныеПериоды1.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|					ОплаченныеПериоды1.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|					ОплаченныеПериоды1.Сотрудник КАК Сотрудник,
	|					ОплаченныеПериоды1.ФизЛицо КАК ФизЛицо,
	|					ОплаченныеПериоды1.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|					ОплаченныеПериоды1.Год КАК Год,
	|					1 КАК НомерИнтервала
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды1
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					ОплаченныеПериоды2.ДатаНачалаПериода,
	|					ОплаченныеПериоды2.ДатаОкончанияПериода,
	|					ОплаченныеПериоды2.ВидСтажаСЗВ4,
	|					ОплаченныеПериоды2.Сотрудник,
	|					ОплаченныеПериоды2.ФизЛицо,
	|					ОплаченныеПериоды2.ОбособленноеПодразделение,
	|					ОплаченныеПериоды2.Год,
	|					2
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды2
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					ОплаченныеПериоды3.ДатаНачалаПериода,
	|					ОплаченныеПериоды3.ДатаОкончанияПериода,
	|					ОплаченныеПериоды3.ВидСтажаСЗВ4,
	|					ОплаченныеПериоды3.Сотрудник,
	|					ОплаченныеПериоды3.ФизЛицо,
	|					ОплаченныеПериоды3.ОбособленноеПодразделение,
	|					ОплаченныеПериоды3.Год,
	|					3
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды3) КАК ПересекающиеПериоды
	|				ПО ИсходныеПериоды.ВидСтажаСЗВ4 = ПересекающиеПериоды.ВидСтажаСЗВ4
	|					И ИсходныеПериоды.Сотрудник = ПересекающиеПериоды.Сотрудник
	|					И ИсходныеПериоды.ОбособленноеПодразделение = ПересекающиеПериоды.ОбособленноеПодразделение
	|					И ИсходныеПериоды.Год = ПересекающиеПериоды.Год
	|					И ИсходныеПериоды.ДатаНачалаПериода > ПересекающиеПериоды.ДатаНачалаПериода
	|					И ИсходныеПериоды.ДатаНачалаПериода < ПересекающиеПериоды.ДатаОкончанияПериода) КАК ПересеченияПериодов
	|		ПО ОтдельноСтоящиеПериоды.ВидСтажаСЗВ4 = ПересеченияПериодов.ВидСтажаСЗВ4
	|			И ОтдельноСтоящиеПериоды.Сотрудник = ПересеченияПериодов.Сотрудник
	|			И ОтдельноСтоящиеПериоды.ОбособленноеПодразделение = ПересеченияПериодов.ОбособленноеПодразделение
	|			И ОтдельноСтоящиеПериоды.Год = ПересеченияПериодов.Год
	|			И ОтдельноСтоящиеПериоды.ДатаНачалаПериода <= ПересеченияПериодов.ДатаНачалаПериода
	|			И ОтдельноСтоящиеПериоды.ДатаОкончанияПериода >= ПересеченияПериодов.ДатаОкончанияПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НефильтрованныеДниСтажа.ДатаКалендаря,
	|	ДОБАВИТЬКДАТЕ(НефильтрованныеДниСтажа.ДатаКалендаря, ДЕНЬ, 1) КАК СледующаяДатаКалендаря,
	|	ДОБАВИТЬКДАТЕ(НефильтрованныеДниСтажа.ДатаКалендаря, ДЕНЬ, -1) КАК ПредыдущаяДатаКалендаря,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 1
	|			ТОГДА ""ДЕКРЕТ""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 2
	|			ТОГДА ""ДЕТИ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	|	НефильтрованныеДниСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	НефильтрованныеДниСтажа.Сотрудник КАК Сотрудник,
	|	НефильтрованныеДниСтажа.ФизЛицо КАК ФизЛицо,
	|	НефильтрованныеДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	НефильтрованныеДниСтажа.Год КАК Год,
	|	НефильтрованныеДниСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	НефильтрованныеДниСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	НефильтрованныеДниСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТДниСтажа
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НефильтрованныеДниСтажа.ДатаКалендаря КАК ДатаКалендаря,
	|		ВЫБОР
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.Декрет)
	|				ТОГДА 1
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.Дети)
	|				ТОГДА 2
	|			ИНАЧЕ 3
	|		КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ТерриториальныеУсловия
	|		КОНЕЦ КАК ТерриториальныеУсловия,
	|		НефильтрованныеДниСтажа.Сотрудник КАК Сотрудник,
	|		НефильтрованныеДниСтажа.ФизЛицо КАК ФизЛицо,
	|		НефильтрованныеДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		НефильтрованныеДниСтажа.Год КАК Год,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ОсобыеУсловияТруда
	|		КОНЕЦ КАК ОсобыеУсловияТруда,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.КодПозицииСписка
	|		КОНЕЦ КАК КодПозицииСписка,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ОснованиеВыслугиЛет
	|		КОНЕЦ КАК ОснованиеВыслугиЛет
	|	ИЗ
	|		(ВЫБРАТЬ 
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|			ВТКадровыеПериоды.ФизЛицо,
	|			ВТКадровыеПериоды.Сотрудник,
	|
	|			ВТКадровыеПериоды.ТретийПараметрИсчисляемогоСтажа,
	|			ВТКадровыеПериоды.ОбособленноеПодразделение,
	|			ВТКадровыеПериоды.Год,
	|			ВТКадровыеПериоды.ТерриториальныеУсловия,
	|			ВТКадровыеПериоды.ОсобыеУсловияТруда,
	|			ВТКадровыеПериоды.ГрафикРаботы,
	|			ВТКадровыеПериоды.КодПозицииСписка,
	|			ВТКадровыеПериоды.ОснованиеВыслугиЛет,
	|	 			
	|	 		МАКСИМУМ(ВидыСтажа.Порядок) КАК ПорядковыйНомерВидаСтажа
	|		ИЗ
	|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПериоды КАК ВТКадровыеПериоды
	|		ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ВТКадровыеПериоды.ДатаНачалаПериода И ВТКадровыеПериоды.ДатаОкончанияПериода)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтредактированныеОплаченныеПериоды КАК ВТОтредактированныеОплаченныеПериоды
	|		ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ВТОтредактированныеОплаченныеПериоды.ДатаНачалаПериода И ВТОтредактированныеОплаченныеПериоды.ДатаОкончанияПериода)
	|			И ВТОтредактированныеОплаченныеПериоды.Сотрудник = ВТКадровыеПериоды.Сотрудник
	|			И ВТОтредактированныеОплаченныеПериоды.ОбособленноеПодразделение = ВТКадровыеПериоды.ОбособленноеПодразделение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыСтажаСЗВ4 КАК ВидыСтажа
	|		ПО ВидыСтажа.Ссылка = ВТОтредактированныеОплаченныеПериоды.ВидСтажаСЗВ4
	|		
	|		ГДЕ
	|			РегламентированныйПроизводственныйКалендарь.Год = &Год
	|				
	|	И		(НЕ ЕСТЬNULL(ВТКадровыеПериоды.Сотрудник, ВТОтредактированныеОплаченныеПериоды.Сотрудник) ЕСТЬ NULL )
	|		И ЕСТЬNULL(ВТОтредактированныеОплаченныеПериоды.ВидСтажаСЗВ4, """") <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж)
	|			
	|		СГРУППИРОВАТЬ ПО
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	|			ВТКадровыеПериоды.ФизЛицо,
	|			ВТКадровыеПериоды.Сотрудник,
	|
	|			ВТКадровыеПериоды.ТретийПараметрИсчисляемогоСтажа,
	|			ВТКадровыеПериоды.ОбособленноеПодразделение,
	|			ВТКадровыеПериоды.Год,
	|			ВТКадровыеПериоды.ТерриториальныеУсловия,
	|			ВТКадровыеПериоды.ОсобыеУсловияТруда,
	|			ВТКадровыеПериоды.ГрафикРаботы,
	|			ВТКадровыеПериоды.КодПозицииСписка,
	|			ВТКадровыеПериоды.ОснованиеВыслугиЛет
	|		) КАК НефильтрованныеДниСтажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|		Перечисление.ВидыСтажаСЗВ4 КАК ВидыСтажа
	|		ПО ВидыСтажа.Порядок = НефильтрованныеДниСтажа.ПорядковыйНомерВидаСтажа
	|
	|ГДЕ
	|	НефильтрованныеДниСтажа.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|            ) КАК НефильтрованныеДниСтажа
	|СГРУППИРОВАТЬ ПО
	|	НефильтрованныеДниСтажа.Год,
	|	НефильтрованныеДниСтажа.Сотрудник,
	|	НефильтрованныеДниСтажа.ФизЛицо,
	|	НефильтрованныеДниСтажа.ДатаКалендаря,
	|	НефильтрованныеДниСтажа.ТерриториальныеУсловия,
	|	НефильтрованныеДниСтажа.ОбособленноеПодразделение,
	|	НефильтрованныеДниСтажа.ОсобыеУсловияТруда,
	|	НефильтрованныеДниСтажа.КодПозицииСписка,
	|	НефильтрованныеДниСтажа.ОснованиеВыслугиЛет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Год,
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	ПредыдущаяДатаКалендаря,
	|	ТерриториальныеУсловия,
	|	ОсобыеУсловияТруда,
	|	КодПозицииСписка,
	|	ОснованиеВыслугиЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниСтажа.ДатаКалендаря,
	|	ДниСтажа.СледующаяДатаКалендаря КАК СледующаяДатаКалендаря,
	|	ДниСтажа.ПредыдущаяДатаКалендаря,
	|	ДниСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ДниСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ДниСтажа.ФизЛицо КАК ФизЛицо,
	|	ДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ДниСтажа.Год КАК Год,
	|	ДниСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ДниСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	ДниСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТСледующиеДниСтажа
	|ИЗ
	|	ВТДниСтажа КАК ДниСтажа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Год,
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	СледующаяДатаКалендаря,
	|	ТерриториальныеУсловия,
	|	ОсобыеУсловияТруда,
	|	КодПозицииСписка,
	|	ОснованиеВыслугиЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДень.ДатаКалендаря КАК НачалоПериода,
	|	ТекущийДень.ТретийПараметрИсчисляемогоСтажа,
	|	ТекущийДень.ТерриториальныеУсловия,
	|	ТекущийДень.ФизЛицо КАК ФизЛицо,
	|	ТекущийДень.ОбособленноеПодразделение,
	|	ТекущийДень.Год,
	|	ТекущийДень.ОсобыеУсловияТруда,
	|	ТекущийДень.КодПозицииСписка,
	|	ТекущийДень.ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТНачалаПериодов
	|ИЗ
	|	ВТДниСтажа КАК ТекущийДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСледующиеДниСтажа КАК ПредыдущийДень
	|		ПО ТекущийДень.ДатаКалендаря = ПредыдущийДень.СледующаяДатаКалендаря
	|			И ТекущийДень.ТерриториальныеУсловия = ПредыдущийДень.ТерриториальныеУсловия
	|			И ТекущийДень.ТретийПараметрИсчисляемогоСтажа = ПредыдущийДень.ТретийПараметрИсчисляемогоСтажа
	|			И ТекущийДень.ФизЛицо = ПредыдущийДень.ФизЛицо
	|			И ТекущийДень.ОбособленноеПодразделение = ПредыдущийДень.ОбособленноеПодразделение
	|			И ТекущийДень.Год = ПредыдущийДень.Год
	|			И ТекущийДень.ОсобыеУсловияТруда = ПредыдущийДень.ОсобыеУсловияТруда
	|			И ТекущийДень.КодПозицииСписка = ПредыдущийДень.КодПозицииСписка
	|			И ТекущийДень.ОснованиеВыслугиЛет = ПредыдущийДень.ОснованиеВыслугиЛет
	|ГДЕ
	|	ПредыдущийДень.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДень.ДатаКалендаря КАК ОкончаниеПериода,
	|	ТекущийДень.ТретийПараметрИсчисляемогоСтажа,
	|	ТекущийДень.ТерриториальныеУсловия,
	|	ТекущийДень.ФизЛицо КАК ФизЛицо,
	|	ТекущийДень.ОбособленноеПодразделение,
	|	ТекущийДень.Год,
	|	ТекущийДень.ОсобыеУсловияТруда,
	|	ТекущийДень.КодПозицииСписка,
	|	ТекущийДень.ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТОкончанияПериодов
	|ИЗ
	|	ВТДниСтажа КАК ТекущийДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниСтажа КАК СледующийДень
	|		ПО ТекущийДень.ДатаКалендаря = СледующийДень.ПредыдущаяДатаКалендаря
	|			И ТекущийДень.ТерриториальныеУсловия = СледующийДень.ТерриториальныеУсловия
	|			И ТекущийДень.ТретийПараметрИсчисляемогоСтажа = СледующийДень.ТретийПараметрИсчисляемогоСтажа
	|			И ТекущийДень.ФизЛицо = СледующийДень.ФизЛицо
	|			И ТекущийДень.ОбособленноеПодразделение = СледующийДень.ОбособленноеПодразделение
	|			И ТекущийДень.Год = СледующийДень.Год
	|			И ТекущийДень.ОсобыеУсловияТруда = СледующийДень.ОсобыеУсловияТруда
	|			И ТекущийДень.КодПозицииСписка = СледующийДень.КодПозицииСписка
	|			И ТекущийДень.ОснованиеВыслугиЛет = СледующийДень.ОснованиеВыслугиЛет
	|ГДЕ
	|	СледующийДень.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТНачалаПериодов.НачалоПериода КАК ДатаНачалаПериода,
	|	ЕСТЬNULL(МИНИМУМ(ВТОкончанияПериодов.ОкончаниеПериода), ВТНачалаПериодов.НачалоПериода) КАК ДатаОкончанияПериода,
	|	ВЫБОР
	|		КОГДА ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ""ДЕТИ""
	|			ТОГДА """"
	|		ИНАЧЕ ВТНачалаПериодов.ТерриториальныеУсловия
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа,
	|	ВТНачалаПериодов.ФизЛицо КАК ФизЛицо,
	|	ВТНачалаПериодов.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ВТНачалаПериодов.Год,
	|	&НачалоГода КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ""ДЕТИ""
	|			ТОГДА """"
	|		ИНАЧЕ ВТНачалаПериодов.ОсобыеУсловияТруда
	|	КОНЕЦ КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ""ДЕТИ""
	|			ТОГДА """"
	|		ИНАЧЕ ВТНачалаПериодов.КодПозицииСписка
	|	КОНЕЦ КАК КодПозицииСписка,
	|	ВЫБОР
	|		КОГДА ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""ДЕКРЕТ"")
	|			ТОГДА """"
	|		ИНАЧЕ ВТНачалаПериодов.ОснованиеВыслугиЛет
	|	КОНЕЦ КАК ОснованиеВыслугиЛет
	|ИЗ
	|	ВТНачалаПериодов КАК ВТНачалаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОкончанияПериодов КАК ВТОкончанияПериодов
	|		ПО ВТНачалаПериодов.ТерриториальныеУсловия = ВТОкончанияПериодов.ТерриториальныеУсловия
	|			И ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ВТОкончанияПериодов.ТретийПараметрИсчисляемогоСтажа
	|			И ВТНачалаПериодов.ФизЛицо = ВТОкончанияПериодов.ФизЛицо
	|			И ВТНачалаПериодов.ОбособленноеПодразделение = ВТОкончанияПериодов.ОбособленноеПодразделение
	|			И ВТНачалаПериодов.Год = ВТОкончанияПериодов.Год
	|			И ВТНачалаПериодов.ОсобыеУсловияТруда = ВТОкончанияПериодов.ОсобыеУсловияТруда
	|			И ВТНачалаПериодов.КодПозицииСписка = ВТОкончанияПериодов.КодПозицииСписка
	|			И ВТНачалаПериодов.ОснованиеВыслугиЛет = ВТОкончанияПериодов.ОснованиеВыслугиЛет
	|			И ВТНачалаПериодов.НачалоПериода <= ВТОкончанияПериодов.ОкончаниеПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНачалаПериодов.НачалоПериода,
	|	ВТНачалаПериодов.ТерриториальныеУсловия,
	|	ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа,
	|	ВТНачалаПериодов.ФизЛицо,
	|	ВТНачалаПериодов.ОбособленноеПодразделение,
	|	ВТНачалаПериодов.Год,
	|	ВТНачалаПериодов.ОсобыеУсловияТруда,
	|	ВТНачалаПериодов.КодПозицииСписка,
	|	ВТНачалаПериодов.ОснованиеВыслугиЛет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	ДатаНачалаПериода";
	
	//
	ПериодыДоговоровТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо КАК Физлицо,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&Год КАК Год,
	|	&НачалоГода КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.КодПоОКАТО = """"
	|			ТОГДА &ТерриториальныеУсловия
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка) КАК ОсобыеУсловияТруда,
	|	"""" КАК КодПозицииСписка,
	|	ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка) КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала < &НачалоГода
	|			ТОГДА &НачалоГода
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания < &НачалоСледующегоГода
	|			ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания
	|		ИНАЧЕ &КонецГода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоГода
	|	И (&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	ДатаОкончанияПериода,
	|	ДатаНачалаПериода";
	
	
	ТаблицаСтажа = Запрос.Выполнить().Выгрузить();
	ТаблицаСтажа.Индексы.Добавить("ФизЛицо");
	
	// Удалим из таблицы стажа незначимые записи:
	//  - если по физлицу имеется 2 непрерывных записи с одинаковыми условиями труда, то объединим данные записи 
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");
	
	Запрос.Текст = ПериодыДоговоровТекст;
	ТаблицаСтажаПоДоговорам = Запрос.Выполнить().Выгрузить();
	
	Н = ТаблицаСтажаПоДоговорам.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н];
		ПредшествующаяЗапись = ТаблицаСтажаПоДоговорам[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.ДатаНачалаПериода <= КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 // если записи идут друг за другом или пересекаются 
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = Макс(ТекущаяЗапись.ДатаОкончанияПериода, ПредшествующаяЗапись.ДатаОкончанияПериода); 
			ПредшествующаяЗапись.ДатаНачалаПериода = Мин(ТекущаяЗапись.ДатаНачалаПериода, ПредшествующаяЗапись.ДатаНачалаПериода); 
			ТаблицаСтажаПоДоговорам.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажаПоДоговорам.Сортировать("ФизЛицо,ДатаНачалаПериода");
	ПредшествующееФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	МассивСтрок = Новый Массив;
	СтрокСтажа = 0;
	СтруктураПоиска = Новый Структура("ФизЛицо");
	Н = ТаблицаСтажаПоДоговорам.Количество();
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н - 1];
		
		Если ТекущаяЗапись.ФизЛицо <> ПредшествующееФизЛицо Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущаяЗапись);
			МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
			ПредшествующееФизЛицо = ТекущаяЗапись.ФизЛицо;
		КонецЕсли;
		
		СтрокСтажа = МассивСтрок.Количество();
		Если СтрокСтажа = 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаСтажа.Добавить(),ТекущаяЗапись);
			Н = Н - 1;
			Продолжить;
		КонецЕсли;
		
		ДатаНачалаПериода = ТекущаяЗапись.ДатаНачалаПериода;
		ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
		
		Для Сч = 1 По СтрокСтажа Цикл
			
			СтрокаСтажа = МассивСтрок[СтрокСтажа - Сч];
			Если СтрокаСтажа.ДатаНачалаПериода > ДатаОкончанияПериода Тогда
			ИначеЕсли СтрокаСтажа.ДатаНачалаПериода > ДатаНачалаПериода Тогда
				Если СтрокаСтажа.ДатаОкончанияПериода < ДатаОкончанияПериода Тогда
					НоваяСтрока = ТаблицаСтажа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяЗапись);
					НоваяСтрока.ДатаНачалаПериода = КонецДня(СтрокаСтажа.ДатаОкончанияПериода) + 1;
					НоваяСтрока.ДатаОкончанияПериода = ДатаОкончанияПериода;
				КонецЕсли;
				ДатаОкончанияПериода = НачалоДня(СтрокаСтажа.ДатаНачалаПериода - 1);
			Иначе
				Если СтрокаСтажа.ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
					ДатаНачалаПериода = КонецДня(СтрокаСтажа.ДатаОкончанияПериода) + 1;
				КонецЕсли;
				Прервать;
			КонецЕсли;
			МассивСтрок.Удалить(СтрокСтажа - Сч);
		КонецЦикла;
		
		Если ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
			НоваяСтрока = ТаблицаСтажа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяЗапись);
			НоваяСтрока.ДатаНачалаПериода = ДатаНачалаПериода;
			НоваяСтрока.ДатаОкончанияПериода = ДатаОкончанияПериода;
		КонецЕсли;
		
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");
	
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	Возврат ТаблицаСтажа;
	
КонецФункции

//Формирует строку-заголовок для сообщения об ошибке, найденной в записи о стаже
Функция СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись, ОсновнаяЗапись)
	
	ЗаголовокСообщения = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация: ")+СокрЛП(Запись.ОбособленноеПодразделение);
	ЗаголовокСообщения = ЗаголовокСообщения + ", Период: "+Формат(ОсновнаяЗапись.ДатаНачалаПериода,"ДФ='дд.ММ.гггг'")+"-"+Формат(ОсновнаяЗапись.ДатаОкончанияПериода,"ДФ='дд.ММ.гггг'");
	
	Если Запись.НомерДополнительнойЗаписи <> 0 Тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Дополнительная запись № "+Запись.НомерДополнительнойЗаписи;
	КонецЕсли;	
	
	ЗаголовокСообщения = ЗаголовокСообщения + ":"+Символы.ПС;
	
	Возврат ЗаголовокСообщения;
	
КонецФункции	 

//Добавляет новую строку в таблицу плохих записей стажа
Процедура СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки,ОсновнаяЗапись = "")
	
	Если ОсновнаяЗапись = "" Тогда
		ОсновнаяЗапись = Запись;
	КонецЕсли;  
	ЗаголовокОшибки = СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись,ОсновнаяЗапись);
	
	//Для строк сообщения сделаем отступ
	Стр = "";
	МассивСтрок =  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
	Для Каждого Строка из Массивстрок цикл
		Стр = Стр + "    " + Строка + Символы.ПС ;
	КонецЦикла;	
	ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;
	
	НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
	НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
	НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;
	
КонецПроцедуры 

//Выполняет проверку дополнительной записи стажа на допустимось значений реквизитов
Функция СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ОсновнаяЗапись, ТаблицаПлохихЗаписей)
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа) Тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи:
		| 		Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа) Тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи о стаже не может указываться основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	
	
	//Проверка на обязательный ввод одной из льгот
	УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловия);
	
	УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
	УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет);
	
	Если (НЕ УказаныТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет) Тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 
	
	//Проверка на ввод территориальной льготы
	Если УказаныТерриториальныеУсловия Тогда
		Если  НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия) Тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;	
	
	//Проверка на ввод условий труда
	Если УказаныОсобыеУсловияТруда Тогда
		УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
		Если (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_1)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_2)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_7) Тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда должен принимать значение 27-1, 27-2 или 27-7!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;
		
		Если (УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТруда.Ст27_7) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104) Тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда 27-7 может быть указан" 
			+Символы.ПС+"только в случае указания в основной записи кода исчисляемого стажа УИК104!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;
	
	//Проверка на ввод основания выслуги лет
	КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) Тогда
		Если Найти(",,28-СМ,28-ГД,28-СМХР,28-ГДХР,",","+КодВыслугиЛетЗаписи+",") = 0 Тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Если в основной записи не указан код выслуги лет, то в дополнительной записи" 
			+Символы.ПС+"основание выслуги лет должно быть пустым или указаны коды 28-СМ,28-ГД,28-СМХР или 28-ГДХР!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	
	Иначе//В основной записи код выслуги указан
		
		МассивПравилНаКодыВыслугиДопЗаписей =  Новый Массив;
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",НОРМАПР,РЕАКТИВН,НОРМСП,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",,28-СМ,28-ГД,28-СМХР,28-ГДХР,");//пустой код допустим
		
		КодВыслугиЛетОсновнойЗаписи = СОКРЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);
		
		ПроверочнаяСтрокаКодов = "";
		Для Каждого СтрокаКодов из МассивПравилНаКодыВыслугиДопЗаписей Цикл 
			Если Найти(СтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи+",") Тогда
				ПроверочнаяСтрокаКодов = СтрокаКодов;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если ПроверочнаяСтрокаКодов = "" Тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи
			+Символы.ПС+"в дополнительной записи код выслуги указываться не может!",ОсновнаяЗапись);
			Возврат Ложь;
		Иначе
			//Код выслуги основной записи исключим из списка возможных значений
			ПроверочнаяСтрокаКодов = СтрЗаменить(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи,"");
			
			Если НЕ Найти(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетЗаписи+",") Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи+" в дополнительной записи"
				+Символы.ПС+"могут быть указаны только следующие коды выслуги: "+Сред(ПроверочнаяСтрокаКодов,2),ОсновнаяЗапись);
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

//Выполняет проверку записи стажа на допустимось значений реквизитов между группами
Функция СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, СтруктураПараметров, ТаблицаПлохихЗаписей)
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("ТаблицаЗначений") Тогда
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ИсточникДанных",	СтруктураПараметров);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧ.НомерСтроки КАК НомерСтроки,
		|	ТЧ.ФизЛицо КАК ФизЛицо,
		|	ТЧ.Организация,
		|	ТЧ.КатегорияЗастрахованныхЛиц,
		|	ТЧ.ОтчетныйПериод
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	&ИсточникДанных КАК ТЧ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.ОтчетныйПериод КАК ОтчетныйПериод,
		|	Записи.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ПО ТЧРаботникиОрг.КатегорияЗастрахованныхЛиц = Записи.КатегорияЗастрахованныхЛиц
		|			И ТЧРаботникиОрг.ФизЛицо = Записи.ФизЛицо
		|			И ТЧРаботникиОрг.ОтчетныйПериод = Записи.ОтчетныйПериод
		|			И ТЧРаботникиОрг.Организация = Записи.ОбособленноеПодразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	(Записи.ОсобыеУсловияТруда.Код ЕСТЬ НЕ NULL 
		|			ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ НЕ NULL )
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	ОтчетныйПериод,
		|	КатегорияЗастрахованныхЛиц,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
		
	ИначеЕсли ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4") Тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка" , ИнициаторВызова);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.ОтчетныйПериод КАК ОтчетныйПериод,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ,
		|	Записи.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ПО ТЧРаботникиОрг.Ссылка.КатегорияЗастрахованныхЛиц = Записи.КатегорияЗастрахованныхЛиц
		|			И ТЧРаботникиОрг.ФизЛицо = Записи.ФизЛицо
		|			И ТЧРаботникиОрг.Ссылка.ОтчетныйПериод = Записи.ОтчетныйПериод
		|			И ТЧРаботникиОрг.Ссылка.Организация = Записи.ОбособленноеПодразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	ТЧРаботникиОрг.Ссылка = &ДокументСсылка
		|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
		|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	ОтчетныйПериод,
		|	КатегорияЗастрахованныхЛиц,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
		
	Иначе
		
		Запрос.УстановитьПараметр("МассивФизлиц",СтруктураПараметров.МассивФизлиц);
		Запрос.УстановитьПараметр("МассивЛет", СтруктураПараметров.МассивЛет);
		Запрос.УстановитьПараметр("МассивОбособленныхПодразделений", СтруктураПараметров.МассивОбособленныхПодразделений);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.ОтчетныйПериод КАК ОтчетныйПериод,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ,
		|	Записи.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	(Записи.Год В (&МассивЛет)
		|			ИЛИ Записи.ОтчетныйПериод В (&МассивЛет))
		|	И Записи.ОбособленноеПодразделение В(&МассивОбособленныхПодразделений)
		|	И Записи.ФизЛицо В(&МассивФизлиц)
		|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
		|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	ОтчетныйПериод,
		|	КатегорияЗастрахованныхЛиц,
		|	ФизЛицо,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "ФизЛицо";
		
	КонецЕсли;	   
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ОбособленноеПодразделение") цикл
		Пока Выборка.СледующийПоЗначениюПоля("ОтчетныйПериод") цикл
			Пока Выборка.СледующийПоЗначениюПоля("КатегорияЗастрахованныхЛиц") цикл
				Пока Выборка.СледующийПоЗначениюПоля(ИмяГруппировкиФизЛицо_НомерСтроки) цикл
					Пока Выборка.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") цикл
						Пока Выборка.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") цикл
							
							СтрокаСообщений = "Комбинация значений реквизитов:";
							СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание выслуги лет = " + Выборка.УказанныйКодОснованияВыслугиЛет;
							СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание исчисляемого стажа = " + Выборка.УказанныйКодОснованияИсчисляемогоСтажа;
							СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Особые условия труда = " + Выборка.УказанныйКодУсловийТруда;
							СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Код позиции списка = " + Выборка.УказанныйКодПозицииСписка;
							
							Если Не ЗначениеЗаполнено(Выборка.НомерПравила)
								Или СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12100000-11465" И СокрЛП(Выборка.УказанныйКодОснованияИсчисляемогоСтажа) <> "ВОДОЛАЗ" 
								Или Год(Выборка.ОтчетныйПериод) < 2002 И СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "УВД"
								Или Год(Выборка.ОтчетныйПериод) >= 2002 И СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "27-14" Тогда
								СтрокаСообщений = СтрокаСообщений+Символы.ПС+"Не является допустимой!";
								
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
								Продолжить;
								
							КонецЕсли;	
							
							//Флаг допустимости значений реквизитов  группы "Фактически отработанное время"  
							ФОВДопустимо = Ложь;
							
							СтрокаСообщений = "Значения реквизитов группы ""Фактически отработанное время"" не соответствуют ни одному из заданных форматов:"+Символы.ПС;
							
							//Для Каждого ФорматФОВ из СписокДопустимыхФорматовФОВ цикл
							Пока Выборка.Следующий() цикл
								
								ФорматФОВ = Выборка.ФорматФОВ;
								СтрокаОшибкиФормата = "";            	
								ПрошлоПроверку = 0;
								СтрокаЗначенияПараметров = "";
								
								Для Н=1 по 2 цикл
									ФорматПараметра = Сред(ФорматФОВ,Н+1,1); 
									
									Если Н=1 Тогда	
										ЗначениеПараметра = Выборка.УказанныйПервыйПараметрИсчисляемогоСтажа;
										ПсевдонимПараметра = "Месяцы";
									Иначе
										ЗначениеПараметра = Выборка.УказанныйВторойПараметрИсчисляемогоСтажа;
										ПсевдонимПараметра = "Дни";
									КонецЕсли;	
									
									ПараметрПрошелПроверку = Ложь;
									
									НачалоСообщения = "Параметр исчисляемого стажа №"+Н+"("+ПсевдонимПараметра+")";
									
									Если (ФорматПараметра = "_") Тогда
										Если (ЗначениеПараметра <> 0) Тогда//ПУСТОЕ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения + " должен быть пустым (=0)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									ИначеЕсли (ФорматПараметра = "Г") Тогда
										Если (ЗначениеПараметра > 100) Тогда//ГОДЫ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 100 (лет)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									ИначеЕсли (ФорматПараметра = "М") Тогда 
										Если (ЗначениеПараметра > 11) Тогда//МЕСЯЦЫ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 11 (месяцев)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									ИначеЕсли (ФорматПараметра = "Д") Тогда 
										Если (ЗначениеПараметра > 30) Тогда//ДНИ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 30 (дней)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									ИначеЕсли (ФорматПараметра = "ч") Тогда//ЧАСЫ 
										ПараметрПрошелПроверку = ИСТИНА;
									ИначеЕсли (ФорматПараметра = "м") Тогда 
										Если (ЗначениеПараметра > 59) Тогда//МИНУТЫ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 59 (минут)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									КонецЕсли;	 
									
									Если ПараметрПрошелПроверку Тогда
										ПрошлоПроверку = ПрошлоПроверку + 1;
									КонецЕсли;	 
									
									СтрокаЗначенияПараметров = СтрокаЗначенияПараметров + ЗначениеПараметра;
								КонецЦикла;
								
								//Если формат не равен [ПУСТОЕ,ПУСТОЕ,ПУСТОЕ], то значения всех трех параметров не должны равняться 0
								Если (СокрЛП(ФорматФОВ) <> "___")и(СтрокаЗначенияПараметров="000") Тогда//
									ПрошлоПроверку = 0;
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + "В параметрах (Годы,Месяцы,Дни) должно быть указано отработанное время!"+Символы.ПС;
								КонецЕсли;	
								
								Если ПрошлоПроверку = 2 Тогда
									ФОВДопустимо = Истина;
									Прервать;
								КонецЕсли;
								
								СтрФорматФОВ = ФорматФОВ;
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"_",",пустое");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"ч",",часы");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"м",",минуты");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Г",",годы");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"М",",месяцы");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Д",",дни");
								СтрФорматФОВ = Сред(СтрФорматФОВ,2);//Убрали первую запятую
								
								СтрокаОшибкиФормата = "Соглано формату ["+СтрФорматФОВ+"]:"+Символы.ПС+СтрокаОшибкиФормата;            	
								СтрокаСообщений = СтрокаСообщений + СтрокаОшибкиФормата;
							КонецЦикла;	// по вариантам формата ФОВ
							
							Если НЕ ФОВДопустимо Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
							КонецЕсли;	 
							
						КонецЦикла;// По дополнительным записям	
					КонецЦикла;// По основным записям	
				КонецЦикла;// По физлицам
			КонецЦикла;	
		КонецЦикла;// По годам	
	КонецЦикла;// По обособленым подразделениям	
	
КонецФункции	 

//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-4
// Функция в параметре РезультатВыборкиЗаписей возвращает результат запроса выборки записей стажа
Функция СЗВ4_ПроверитьНаборЗаписейОСтаже(ИнициаторВызова, СтруктураПараметров, РезультатВыборкиЗаписей = "", ВыводитьСообщенияВОбработчикСообщений = Ложь, СообщенияРазделПроверки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ДоступнаРольРасчетчикаРегл = НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл();
	
	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4") Тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка",				ИнициаторВызова);
		Запрос.УстановитьПараметр("ДатаАктуальности",			СтруктураПараметров.ДатаАктуальности);
		Запрос.УстановитьПараметр("НачалоГода",					НачалоГода(СтруктураПараметров.ДатаАктуальности));
		Запрос.УстановитьПараметр("ВидАдресаДляИнформирования",	Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
		Запрос.УстановитьПараметр("Организация",				СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",		СтруктураПараметров.ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("ТрудовойДоговор",			Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЧ.НомерСтроки,
		|	ТЧ.ФизЛицо КАК ФизЛицо,
		|	ТЧ.АдресДляИнформирования,
		|	ТЧ.ФизЛицо.Наименование,
		|	ТЧ.ФизЛицо.СтраховойНомерПФР,
		|	ТЧ.Ссылка.Год,
		|	ТЧ.Ссылка.Организация
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧ
		|ГДЕ
		|	ТЧ.Ссылка = &ДокументСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТЗарегистрированныеСотрудниками
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО ТЧРаботникиОрг.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И (СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация)
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка ЕСТЬ НЕ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
		// В запросе кроме записей стажа выбираются данные, необходимые документу: ФИО физлиц, адреса, данные об отчислениях
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрг.ФизЛицо КАК ФизЛицо,
		|	ТЧРаботникиОрг.ФизЛицоСтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ТЧРаботникиОрг.АдресДляИнформирования КАК АдресДляИнформирования,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЕСТЬNULL(ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа, 0) КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЕСТЬNULL(ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа, 0) КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ТЧРаботникиОрг.ФизЛицоНаименование) КАК ФизЛицоНаименование,"
		+ ?(ДоступнаРольРасчетчикаРегл, "
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаСтраховуюЧастьПФР, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаНакопительнуюЧастьПФР, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоДополнительномуТарифу, 0) КАК НачисленоПоДополнительномуТарифу,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(СуммыВзносов.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет,", "") + "
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаАктуальности,
		|				ФизЛицо В
		|					(ВЫБРАТЬ
		|						ТЧ.ФизЛицо
		|					ИЗ
		|						ВТДанныеДокумента КАК ТЧ)) КАК ФИОФизЛицСрезПоследних
		|		ПО ТЧРаботникиОрг.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированныеСотрудниками КАК РаботникиОрганизации
		|		ПО ТЧРаботникиОрг.НомерСтроки = РаботникиОрганизации.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
		|		ПО ТЧРаботникиОрг.ФизЛицо = ЗаписиОСтаже.ФизЛицо
		|			И ТЧРаботникиОрг.Год = ЗаписиОСтаже.Год
		|			И ТЧРаботникиОрг.Организация = ЗаписиОСтаже.ОбособленноеПодразделение"
		+ ?(ДоступнаРольРасчетчикаРегл, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносов
		|		ПО ТЧРаботникиОрг.ФизЛицо = СуммыВзносов.ФизЛицо
		|			И ТЧРаботникиОрг.Год = СуммыВзносов.Год
		|			И ТЧРаботникиОрг.Организация = СуммыВзносов.ОбособленноеПодразделение", "") + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕСТЬNULL(ЗаписиОСтаже.ОбособленноеПодразделение, """"),
		|	Год,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
		
		
	Иначе//Инициатором вызова является набор записей
		
		Запрос.УстановитьПараметр("МассивФизЛиц" , СтруктураПараметров.МассивФизЛиц);
		Запрос.УстановитьПараметр("МассивЛет" , СтруктураПараметров.МассивЛет);
		Запрос.УстановитьПараметр("МассивОбособленныхПодразделений" , СтруктураПараметров.МассивОбособленныхПодразделений);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,"
		+ ?(ДоступнаРольРасчетчикаРегл, "
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаСтраховуюЧастьПФР, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаНакопительнуюЧастьПФР, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоДополнительномуТарифу, 0) КАК НачисленоПоДополнительномуТарифу,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(СуммыВзносов.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет,", "") + "
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже"
		+ ?(ДоступнаРольРасчетчикаРегл, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносов
		|		ПО ЗаписиОСтаже.ФизЛицо = СуммыВзносов.ФизЛицо
		|			И ЗаписиОСтаже.Год = СуммыВзносов.Год
		|			И ЗаписиОСтаже.ОбособленноеПодразделение = СуммыВзносов.ОбособленноеПодразделение", "") + "
		|ГДЕ
		|	ЗаписиОСтаже.ФизЛицо В(&МассивФизЛиц)
		|	И ЗаписиОСтаже.Год В(&МассивЛет)
		|	И ЗаписиОСтаже.ОбособленноеПодразделение В(&МассивОбособленныхПодразделений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	ФизЛицо,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "ФизЛицо";
	КонецЕсли;	
	
	РезультатВыборкиЗаписей = Запрос.Выполнить(); 
	ВыборкаЗаписей = РезультатВыборкиЗаписей.Выбрать();
	
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	//Проверку правильности заполнения записей надо выполнять отдельно для каждой организации, года и физлица
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("ОбособленноеПодразделение") Цикл
		
		ОбособленноеПодразделение = ВыборкаЗаписей.ОбособленноеПодразделение;
		Если ОбособленноеПодразделение = NULL Тогда
			Продолжить;
		КонецЕсли;
		Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Год") Цикл
			
			Год = ВыборкаЗаписей.Год;
			
			Пока ВыборкаЗаписей.СледующийПоЗначениюПоля(ИмяГруппировкиФизЛицо_НомерСтроки) Цикл
				
				Если ВыборкаЗаписей.НомерОсновнойЗаписи = NULL Тогда
					Продолжить;//Физлицо не имеет сведений
				КонецЕсли; 
				
				ФизЛицо = ВыборкаЗаписей.ФизЛицо;
				
				// Для проверки неоплаченного стажа
				ВсегоДнейПоСтажу = 0;				
				Если ДоступнаРольРасчетчикаРегл Тогда
					ВсегоНеотработанныхДней = ВыборкаЗаписей.ДнейБолезни + ВыборкаЗаписей.ДнейОтпускаЗаСвойСчет;
				Иначе
					ВсегоНеотработанныхДней = 0;
				КонецЕсли;
				
				
				ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, ОбособленноеПодразделение, Год, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
				
				//Список значений группы реквизитов территориальные условия одной основной записи
				СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
				
				//Список значений кодов условий труда одной основной записи
				СписокУсловияТрудаЗаписи = Новый СписокЗначений;
				
				//Список значений кодов выслуги лет основной записи
				СписокВыслугаЛетЗаписи = Новый СписокЗначений;
				
				ПредыдущийНомерОсновнойЗаписи = 0;
				ПредыдущийНомерДополнительнойЗаписи = 0;
				
				Пока ВыборкаЗаписей.Следующий() Цикл
					
					Запись = ВыборкаЗаписей;
					
					//Организация, физлицо и год должны быть заполнены обязательно
					Если Запись.ОбособленноеПодразделение.Пустая() Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указана организация (обособленное подразделение)!");
					КонецЕсли;	
					Если Запись.ФизЛицо.Пустая() Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указано физическое лицо!");
					КонецЕсли;	
					Если Запись.Год < 2002 Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Расчетный период (год) не может быть менее 2002!");
					КонецЕсли;	
					
					
					// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
					
					//По умолчанию считаем, что запись основная
					ЭтоОсновнаяЗапись = Истина;
					
					//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
					ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
					
					//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
					Если Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) и Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
						Если ДополнительнаяЗаписьВозможна Тогда
							ЭтоОсновнаяЗапись = Ложь;
						Иначе
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указаны даты начала и окончания периода!");
						КонецЕсли;	
					ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты окончания периода необходимо указывать дату начала периода!");
					ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты начала периода необходимо указавать дату окончания периода!");
					Иначе//Обе даты заполнены
						
						//Дата начала периода не должна быть ранее 01.01.ГГГГ
						Если Запись.ДатаНачалаПериода < Дата(Год, 01, 01)  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть не ранее 01.01." + Год + "!");
						КонецЕсли;	 
						
						//Дата окончания периода не должна быть позднее 31.12.ГГГГ
						Если Запись.ДатаОкончанияПериода > Дата(Год, 12, 31)  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата окончания периода должна быть не позднее 31.12." + Год + "!");
						КонецЕсли;	 
						
						// Начало периода не должно быть позже окончания периода 
						Если Запись.ДатаНачалаПериода > Запись.ДатаОкончанияПериода Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода не должна превышать дату окончания периода!");
						КонецЕсли;
						
					КонецЕсли;	 
					
					// Проверка записей если сумма взносов равна нулю
					Если ДоступнаРольРасчетчикаРегл 
						И (Запись.НачисленоНаНакопительнуюЧастьПФР + Запись.НачисленоНаСтраховуюЧастьПФР) = 0 Тогда
						
						Если НЕ (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕКРЕТ"
							ИЛИ Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") Тогда
							
							ВсегоДнейПоСтажу = ВсегоДнейПоСтажу + 
							((Месяц(Запись.ДатаОкончанияПериода) - Месяц(Запись.ДатаНачалаПериода)) * 30
							+ ?(КонецМесяца(Запись.ДатаОкончанияПериода) = КонецДня(Запись.ДатаОкончанияПериода),30, День(Запись.ДатаОкончанияПериода))
							- ?(НачалоМесяца(Запись.ДатаНачалаПериода)= НачалоДня(Запись.ДатаНачалаПериода),0, День(Запись.ДатаНачалаПериода)));
						КонецЕсли;
					КонецЕсли;
					
					
					//Проверка только для основной записи о стаже
					Если ЭтоОсновнаяЗапись Тогда
						
						//Проверка на хронологический порядок записей
						Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено Тогда
							Если Запись.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
							КонецЕсли;	 
						КонецЕсли;
						
						//Переустановка текущей основной записи
						ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
						ТекущаяОсновнаяЗапись.Год = Год;
						ТекущаяОсновнаяЗапись.ОбособленноеПодразделение = ОбособленноеПодразделение;
						ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
						ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
						ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
						ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
						ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
						ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
						ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
						ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
						ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
						
						СписокТерриториальныеУсловияЗаписи.Очистить();
						СписокУсловияТрудаЗаписи.Очистить();
						СписокВыслугаЛетЗаписи.Очистить();
					КонецЕсли;	 
					
					// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
					
					//Проверка нумерации основных и дополнительных записей
					Если (ЭтоОсновнаяЗапись) Тогда
						ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
						Если (Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");;
						КонецЕсли;
					Иначе
						ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
						Если (Запись.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер дополнительной записи. Ожидается номер: "+ОжидаемыйНомерДополнительнойЗаписи+"!", ТекущаяОсновнаяЗапись);;
						КонецЕсли;
					КонецЕсли;
					
					
					//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
					
					//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
					УказаныТерриториальныеУсловия = НЕ ПустаяСтрока(Запись.ТерриториальныеУсловияКод);
					
					//Признаки заполнения реквизитов группы "Особые условия труда"
					УказанКодПозицииСписка = НЕ ПустаяСтрока(Запись.КодПозицииСпискаКод);
					УказаныОсобыеУсловияТруда = НЕ ПустаяСтрока(Запись.ОсобыеУсловияТрудаКод);
					ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
					
					//Признаки заполнения реквизитов группы "Исчисляемый стаж"
					УказаноОснованиеИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ОснованиеИсчисляемогоСтажаКод);
					УказанТретийПараметрИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ТретийПараметрИсчисляемогоСтажа);
					ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
					
					//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
					УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0); 
					УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0); 
					ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
					
					//Признаки заполнения реквизитов группы "ВыслугаЛет"
					УказаноОснованиеВыслугиЛет = НЕ ПустаяСтрока(Запись.ОснованиеВыслугиЛетКод);
					ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
					
					
					//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
					
					Если НЕ ЭтоОсновнаяЗапись Тогда
						СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
					КонецЕсли;	 
					
					// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
					
					Если УказаныТерриториальныеУсловия Тогда
						ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод);
						Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если УказаныОсобыеУсловияТруда Тогда
						ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если УказаноОснованиеВыслугиЛет Тогда
						ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
						Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	
					
					//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
					
					КПС = СокрЛП(Запись.КодПозицииСпискаКод);
					
					//Определим, к какому списку принадлежит код позиции
					НазваниеСписка ="";
					Если УказанКодПозицииСписка Тогда 
						
						Если НЕ УказаныОсобыеУсловияТруда Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
						
						ДлинаКПС = СтрДлина(КПС);
						
						Если (ДлинаКПС=8)или(ДлинаКПС=14) Тогда
							
							Первые2СимволаКПС = Лев(КПС,2);
							Если (Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12") Тогда
								НазваниеСписка = "Список№1";
							ИначеЕсли (Первые2СимволаКПС >= "20")и(Первые2СимволаКПС <= "23") Тогда
								НазваниеСписка = "Список№2";
							Иначе	
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный код позиции списка вредных профессий!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
						ИначеЕсли (ДлинаКПС=5) Тогда
							НазваниеСписка = "ПрочиеСписки";
						Иначе	
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
					КонецЕсли;//УказанКодПозицииСписка	 
					
					Если УказаныОсобыеУсловияТруда Тогда
						
						//Проверки на возможные коды списков для конкретных условий труда
						
						КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						Первые8СимволовКПС = ВРЕГ(Лев(КПС,8));
						НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
						
						Если Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_1 Тогда
							Если (НазваниеСписка <> "Список№1") Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
						ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_2 Тогда
							
							Если (НЕ УказанКодПозицииСписка) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен быть указан код позиции Списка №1 или Списка №2!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							Если (НазваниеСписка = "Список№1") Тогда
								Если (Первые8СимволовКПС <> "1010300Б")и(Первые8СимволовКПС <> "1010100Г")и(Первые8СимволовКПС <> "1010100Д")  Тогда
									СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
								КонецЕсли;	
							ИначеЕсли (НазваниеСписка <> "Список№2") Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
						Иначе
							//Для остальных кодов условий труда КПС указываться не должен
							Если УказанКодПозицииСписка Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
						КонецЕсли;	 
						
					КонецЕсли;//УказаныОсобыеУсловияТруда	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
					
					УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
					УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
					УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
					ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
					
					Если УказаноОснованиеВыслугиЛет Тогда
						
						КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
						НачалоСообщения = "Для основания выслуги лет " + КодОснования;
						
						УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
						
						//Медицинские работники
						Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМ) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГД)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМХР)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР) Тогда
							
							Если НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
							ИначеЕсли НЕ УказанТолькоТретийПараметр Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен указываться только третий параметр!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Педагогические работники	
						ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПД Тогда
							
							Если УказанПараметр2 Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " второй параметр указываться не должен!", ТекущаяОсновнаяЗапись);
							ИначеЕсли НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
						ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПДРК Тогда
							
							Если (УказанПараметр2) или (УказанПараметр3) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " может быть указан только первый параметр!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Летчики
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.САМОЛЕТ) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.СПЕЦАВ)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСИСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЛЕТИСП) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИНСПЕКТ)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ОПЫТИСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИСПКЛС1)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСМАВ)Тогда
							
							Если  УказанПараметр3 Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (часы и минуты)!", ТекущаяОсновнаяЗапись);
							КонецЕслИ;	
							
							//Парашютисты	
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.РЕАКТИВН)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМАПР) Тогда	
							
							Если (УказанПараметр2) ИЛИ (УказанПараметр3) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 2 и 3 указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Управление воздушным движением и  инженерно-технический состав 	
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_14)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15) Тогда
							
							Если  УказанПараметр3 Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							//Прочие коды выслуги лет	
						Иначе
							Если ПараметрыУказаны Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры выслуги лет 1,2,3 указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
						КонецЕсли;	 
					Иначе
						Если ПараметрыУказаны Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись," Параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
					КонецЕсли;	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
					
					Если УказанТретийПараметрИсчисляемогоСтажа Тогда
						Если (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕТИ") И (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕКРЕТ") Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать значение ДЕТИ или ДЕКРЕТ!", ТекущаяОсновнаяЗапись);
						ИначеЕсли (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") Тогда
							Если (УказаноОснованиеИсчисляемогоСтажа) ИЛИ (ЗаданаГруппаФОВ) ИЛИ (УказаноОснованиеВыслугиЛет)  Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании третьего параметра исчисляемого стажа следующие группы реквизитов должны быть пустыми:		
								| Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							Если ((ЗаданаГруппаУсловияТруда)ИЛИ(УказаныТерриториальныеУсловия)) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения ДЕТИ группы реквизитов 
								|""Условия труда, Территориальные условия"" указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли; 
						КонецЕсли;	 
					КонецЕсли;	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
					
					Если ЗаданаГруппаФОВ Тогда
						Если (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
							И (НЕ УказаныТерриториальныеУсловия)  Тогда
							СтрОшибка = " Параметры 1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов"
							+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
						КонецЕсли;	
						
						Если Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
							
							Если Запись.ПервыйПараметрИсчисляемогоСтажа > 11 Тогда
								СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	 	
							Если Запись.ВторойПараметрИсчисляемогоСтажа > 30 Тогда
								СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	 	
							
							Лет = 0;
							Месяцев = 0;
							Дней = 0;
							ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);			
							ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
							КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
							ФОВДляСравнения = Запись.ПервыйПараметрИсчисляемогоСтажа *30 + Запись.ВторойПараметрИсчисляемогоСтажа; 
							
							Если (ФОВДляСравнения > КалендарноеВремя) Тогда
								СтрОшибка = "Указанное фактически отработанное время превышает календарное время!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	
						КонецЕсли;	 
						
					КонецЕсли;	 
					
					//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
					
					//Запомним для следующей итерации
					ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
					ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
					
				КонецЦикла;//Цикл по записям стажа текущего физлица за год
				
				
				Если ДоступнаРольРасчетчикаРегл 
					И (Запись.НачисленоНаНакопительнуюЧастьПФР + Запись.НачисленоНаСтраховуюЧастьПФР) = 0 
					И ВсегоНеотработанныхДней <> ВсегоДнейПоСтажу Тогда
					СтрОшибка = "Если сумма взносов равна нулю, то количество дней периодов работы, за исключением периодов ""ДЕКРЕТ"", ""ДЕТИ"" " + Символы.ПС + "должно быть равно сумме дней из блоков Больничные листы и Административный отпуск ";
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка);
				КонецЕсли;
				
			КонецЦикла;//Цикл по физлицам
		КонецЦикла;//Цикл по годам 
	КонецЦикла;//Цикл по обособленным подразделениям
	
	//Структура
	СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, СтруктураПараметров, ТаблицаПлохихЗаписей);
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 Тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже", ВыводитьСообщенияВОбработчикСообщений, СообщенияРазделПроверки);
		Возврат Ложь
	Иначе	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ФормированиеСведенийОСтажеИЗаработке(Год, Организация, ДатаОкончанияПериодаЗаполнения = Неопределено, СписокФизЛиц = Неопределено) Экспорт
	
	ЗаполнятьСтаж = НастройкаПравДоступаПереопределяемый.ДоступнаРольКадровикаРегл();
	ЗаполнятьСуммыВзносов = НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл();
	
	Если Не ЗаполнятьСтаж И Не ЗаполнятьСуммыВзносов Тогда
		Возврат	
	КонецЕсли;
	
	НачалоГода = Дата(Год,1,1);
	КонецГода = КонецГода(НачалоГода);
	Если ДатаОкончанияПериодаЗаполнения = Неопределено Тогда
		ДатаОкончанияПериодаЗаполнения = КонецГода;
	КонецЕсли;
	
	// РАСЧЕТ СУММ ВЗНОСОВ И ДНЕЙ ОТСУТСТВИЯ
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Год",						Год);
	Запрос.УстановитьПараметр("НачалоГода",					НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",					КонецДня(ДатаОкончанияПериодаЗаполнения));
	Запрос.УстановитьПараметр("ОбособленноеПодразделение",	Организация);
	Запрос.УстановитьПараметр("СписокФизЛиц", 				СписокФизЛиц);
	Запрос.УстановитьПараметр("НеОтбиратьДанныеПоФизлицу",	СписокФизЛиц = Неопределено);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоГода,
	|			Организация = &ГоловнаяОрганизация
	|			И (&НеОтбиратьДанныеПоФизлицу ИЛИ Сотрудник.ФизЛицо В (&СписокФизЛиц) )
	|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &НачалоГода
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|		КОНЕЦ = &ОбособленноеПодразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Период МЕЖДУ &НачалоГода И &КонецГода
	|			И (&НеОтбиратьДанныеПоФизлицу ИЛИ Сотрудник.ФизЛицо В (&СписокФизЛиц) )
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|	И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник.Физлицо,
	|	Работники.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|			И (&НеОтбиратьДанныеПоФизлицу ИЛИ ПериодыПерекрытия.Сотрудник.ФизЛицо В (&СписокФизЛиц) )
	|			И (ПериодыПерекрытия.Период > Работники.Период)
	|			И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
	|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.Организация = &ГоловнаяОрганизация
	|			И (&НеОтбиратьДанныеПоФизлицу ИЛИ Работники.Сотрудник.ФизЛицо В (&СписокФизЛиц) )
	|	И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И Работники.ОбособленноеПодразделениеЗавершения = &ОбособленноеПодразделение
	|	И Работники.ПериодЗавершения МЕЖДУ &НачалоГода И &КонецГода
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо,
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &ОбособленноеПодразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо";
	Запрос.Выполнить();
	
	Если Не ЗаполнятьСуммыВзносов Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛица.Физлицо КАК Физлицо,
		|	ФизЛица.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	ВТСотрудники КАК ФизЛица
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизлицоНаименование";
	Иначе	
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизаций.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ ВТПереходившиеРаботники
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
		|		РаботникиОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|	ГДЕ
		|		РаботникиОрганизаций.Период МЕЖДУ &НачалоГода И &КонецГода
		|		И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		РаботникиОрганизаций.Сотрудник.Физлицо,
		|		РаботникиОрганизаций.ОбособленноеПодразделение
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоГода, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций) КАК РаботникиОрганизаций
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизаций.Физлицо
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РаботникиОрганизаций.ОбособленноеПодразделение) > 1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо";	
		Запрос.Выполнить();
		
		// данные об исчисленных взносах
		Если Год >= Год(ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами()) Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСНИсчисленныйОбороты.ФизЛицо КАК ФизЛицо,
			|	ЕСНИсчисленныйОбороты.ПФРНакопительнаяОборот + ЕСНИсчисленныйОбороты.ПФРНакопительнаяЕНВДОборот КАК ПФРНакопительная,
			|	ЕСНИсчисленныйОбороты.ПФРПоДополнительномуТарифуОборот КАК ПФРПоДополнительномуТарифу,
			|	ЕСНИсчисленныйОбороты.ПФРСтраховаяОборот + ЕСНИсчисленныйОбороты.ПФРСтраховаяЕНВДОборот КАК ПФРСтраховая
			|ПОМЕСТИТЬ ВТВзносыИсчисленные
			|ИЗ
			|	РегистрНакопления.СтраховыеВзносыИсчисленные.Обороты(
			|			&НачалоГода,
			|			&КонецГода,
			|			,
			|			Организация = &ГоловнаяОрганизация
			|				И ОбособленноеПодразделение = &ОбособленноеПодразделение
			|				И ФизЛицо В
			|					(ВЫБРАТЬ
			|						ФизЛица.Физлицо
			|					ИЗ
			|						ВТСотрудники КАК ФизЛица)) КАК ЕСНИсчисленныйОбороты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизЛицо";
			Запрос.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтраховыеВзносыИсчисленныеОбороты.ФизЛицо КАК Физлицо,
			|	СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяОборот + СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяЕНВДОборот КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
			|	СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяОборот + СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяЕНВДОборот КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР
			|ПОМЕСТИТЬ ВТВзносыПоВсейОрганизации
			|ИЗ
			|	РегистрНакопления.СтраховыеВзносыИсчисленные.Обороты(
			|			&НачалоГода,
			|			&КонецГода,
			|			,
			|			Организация = &ГоловнаяОрганизация
			|				И ФизЛицо В
			|					(ВЫБРАТЬ
			|						Лица.Физлицо КАК Физлицо
			|					ИЗ
			|						ВТПереходившиеРаботники КАК Лица)) КАК СтраховыеВзносыИсчисленныеОбороты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Физлицо";
			Запрос.Выполнить();
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСНИсчисленныйОбороты.ФизЛицо КАК ФизЛицо,
			|	0 КАК ПФРПоДополнительномуТарифу,
			|	СУММА(ЕСНИсчисленныйОбороты.ПФРНакопительная) КАК ПФРНакопительная,
			|	СУММА(ЕСНИсчисленныйОбороты.ПФРСтраховая) КАК ПФРСтраховая
			|ПОМЕСТИТЬ ВТВзносыИсчисленные
			|ИЗ
			|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленныйОбороты
			|ГДЕ
			|	ЕСНИсчисленныйОбороты.Организация = &ГоловнаяОрганизация
			|	И ЕСНИсчисленныйОбороты.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И ЕСНИсчисленныйОбороты.Период МЕЖДУ &НачалоГода И &КонецГода
			|	И ЕСНИсчисленныйОбороты.ФизЛицо В
			|			(ВЫБРАТЬ
			|				ФизЛица.Физлицо
			|			ИЗ
			|				ВТСотрудники КАК ФизЛица)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСНИсчисленныйОбороты.ФизЛицо
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизЛицо";
			Запрос.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСНИсчисленныйОбороты.ФизЛицо КАК Физлицо,
			|	СУММА(ЕСНИсчисленныйОбороты.ПФРНакопительная) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
			|	СУММА(ЕСНИсчисленныйОбороты.ПФРСтраховая) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР
			|ПОМЕСТИТЬ ВТВзносыПоВсейОрганизации
			|ИЗ
			|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленныйОбороты
			|ГДЕ
			|	ЕСНИсчисленныйОбороты.ФизЛицо В
			|			(ВЫБРАТЬ
			|				Лица.Физлицо КАК Физлицо
			|			ИЗ
			|				ВТПереходившиеРаботники КАК Лица)
			|	И ЕСНИсчисленныйОбороты.Период МЕЖДУ &НачалоГода И &КонецГода
			|	И ЕСНИсчисленныйОбороты.Организация = &ГоловнаяОрганизация
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСНИсчисленныйОбороты.ФизЛицо";
			Запрос.Выполнить();
			
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛица.Физлицо КАК Физлицо,
		|	ФизЛица.Физлицо.Наименование КАК ФизлицоНаименование
		|ПОМЕСТИТЬ ВТЗастрахованныеЛица
		|ИЗ
		|	ВТСотрудники КАК ФизЛица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическийПериодДействия.ФизЛицо КАК ФизЛицо,
		|	СУММА(ВЫБОР
		|			КОГДА ФактическийПериодДействия.ВидРасчета.ВидСтажаСЗВ4 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВременнаяНетрудоспособность)
		|				ТОГДА ВЫБОР
		|						КОГДА ФактическийПериодДействия.Сторно
		|							ТОГДА ВЫБОР
		|									КОГДА НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, ДЕНЬ) = НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, МЕСЯЦ)
		|											И КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, МЕСЯЦ)
		|										ТОГДА 30
		|									ИНАЧЕ -РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ)
		|								КОНЕЦ
		|						ИНАЧЕ ВЫБОР
		|								КОГДА НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, ДЕНЬ) = НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, МЕСЯЦ)
		|										И КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, МЕСЯЦ)
		|									ТОГДА 30
		|								ИНАЧЕ РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ)
		|							КОНЕЦ
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДнейБолезни,
		|	СУММА(ВЫБОР
		|			КОГДА ФактическийПериодДействия.ВидРасчета.ВидСтажаСЗВ4 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
		|				ТОГДА ВЫБОР
		|						КОГДА ФактическийПериодДействия.Сторно
		|							ТОГДА ВЫБОР
		|									КОГДА НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, ДЕНЬ) = НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, МЕСЯЦ)
		|											И КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, МЕСЯЦ)
		|										ТОГДА 30
		|									ИНАЧЕ -РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ)
		|								КОНЕЦ
		|						ИНАЧЕ ВЫБОР
		|								КОГДА НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, ДЕНЬ) = НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, МЕСЯЦ)
		|										И КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, МЕСЯЦ)
		|									ТОГДА 30
		|								ИНАЧЕ РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ)
		|							КОНЕЦ
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДнейОтпускаЗаСвойСчет
		|ПОМЕСТИТЬ ВТФактическийПериодДействия
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|			Сотрудник В
		|					(ВЫБРАТЬ
		|						Сотрудники.Сотрудник
		|					ИЗ
		|						ВТСотрудники КАК Сотрудники)
		|				И ОбособленноеПодразделение = &ОбособленноеПодразделение
		|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|				И ВидРасчета.ВидСтажаСЗВ4 В (ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВременнаяНетрудоспособность), ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты))
		|				И (ПериодДействия МЕЖДУ &НачалоГода И &КонецГода)) КАК ФактическийПериодДействия
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическийПериодДействия.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗастрахованныеЛица.Физлицо КАК ФизЛицо,
		|	ЗастрахованныеЛица.ФизлицоНаименование КАК ФизлицоНаименование,
		|	&ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	&Год КАК Год,
		|	ЕСТЬNULL(ЕСНИсчисленныйОбороты.ПФРНакопительная, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(ЕСНИсчисленныйОбороты.ПФРПоДополнительномуТарифу, 0) КАК НачисленоПоДополнительномуТарифу,
		|	ЕСТЬNULL(ЕСНИсчисленныйОбороты.ПФРСтраховая, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(ВзносыПоВсейОрганизации.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(ВзносыПоВсейОрганизации.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(ФактическийПериодДействия.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(ФактическийПериодДействия.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет
		|ИЗ
		|	ВТЗастрахованныеЛица КАК ЗастрахованныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносыИсчисленные КАК ЕСНИсчисленныйОбороты
		|		ПО ЗастрахованныеЛица.Физлицо = ЕСНИсчисленныйОбороты.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносыПоВсейОрганизации КАК ВзносыПоВсейОрганизации
		|		ПО ЗастрахованныеЛица.Физлицо = ВзносыПоВсейОрганизации.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФактическийПериодДействия КАК ФактическийПериодДействия
		|		ПО ЗастрахованныеЛица.Физлицо = ФактическийПериодДействия.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизлицоНаименование";
		
	КонецЕсли;
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ЗаполнятьСуммыВзносов Тогда
		НаборЗаписейОВзносах = РегистрыСведений.СуммыВзносовДляСЗВ4.СоздатьНаборЗаписей();
		НаборЗаписейОВзносах.Отбор.ОбособленноеПодразделение.Значение = Организация;
		НаборЗаписейОВзносах.Отбор.ОбособленноеПодразделение.Использование = Истина;
		НаборЗаписейОВзносах.Отбор.Год.Значение = Год;
		НаборЗаписейОВзносах.Отбор.Год.Использование = Истина;
		НаборЗаписейОВзносах.Отбор.ФизЛицо.Использование = Истина;
	КонецЕсли;
	
	// РАСЧЕТ СТАЖА
	
	Если ЗаполнятьСтаж Тогда
		
		ТаблицаСтажа = СЗВ4_ПолучитьДанныеДляЗаполненияСтажа(Организация, Год, СписокФизЛиц, ДатаОкончанияПериодаЗаполнения);
		
		НаборЗаписейОСтаже = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей();
		НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Значение = Организация;
		НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Использование = Истина;
		НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Значение = НачалоГода;
		НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Использование = Истина;
		НаборЗаписейОСтаже.Отбор.ФизЛицо.Использование = Истина;
		
		СтруктураПоиска = Новый Структура("ФизЛицо");
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ОЧИСТКА СТАРЫХ ЗАПИСЕЙ О СТАЖЕ, ЗАПИСЕЙ О ВЗНОСАХ И ДОБАВЛЕНИЕ НОВЫХ ЗАПИСЕЙ ДОЛЖНО ПРОИСХОДИТЬ В РАМКАХ ОДНОЙ ТРАНЗАКЦИИ
	
	НачатьТранзакцию();
	
	// Загрузим полученные данные в наборы записей 
	Пока ТаблицаРезультатаЗапроса.Следующий() Цикл
		
		Если ЗаполнятьСтаж Тогда
			// Установим отбор записей в наборе по выбранному работнику
			НаборЗаписейОСтаже.Отбор.ФизЛицо.Значение = ТаблицаРезультатаЗапроса.ФизЛицо;
			СтруктураПоиска.ФизЛицо = ТаблицаРезультатаЗапроса.ФизЛицо;
			
			МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписейОСтаже.Добавить(),СтрокаТаблицы)
			КонецЦикла; 
			
			// Пронумеруем основные записи о стаже
			НомерЗаписи = 0;
			Для Каждого Запись из НаборЗаписейОСтаже Цикл
				НомерЗаписи = НомерЗаписи + 1;
				Запись.НомерОсновнойЗаписи = НомерЗаписи;
			КонецЦикла; 
			
			// Запишем записи стажа в режиме добавления (при записи набора происходит проверка записей стажа)
			Попытка
				НаборЗаписейОСтаже.Записать();
				НаборЗаписейОСтаже.Очистить();
			Исключение
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		Если ЗаполнятьСуммыВзносов Тогда
			НаборЗаписейОВзносах.Отбор.ФизЛицо.Значение = ТаблицаРезультатаЗапроса.ФизЛицо;
			Если ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.НачисленоНаНакопительнуюЧастьПФР) 
				Или ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.НачисленоНаСтраховуюЧастьПФР) 
				Или ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.НачисленоПоДополнительномуТарифу) 
				Или ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.ДнейБолезни) 
				Или ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.ДнейОтпускаЗаСвойСчет) Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписейОВзносах.Добавить(),ТаблицаРезультатаЗапроса);
			КонецЕсли; 
			
			Попытка
				НаборЗаписейОВзносах.Записать();
				НаборЗаписейОВзносах.Очистить();
			Исключение
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // АвтозаполнениеСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРОГРАММОЙ CheckXML

// Процедура, считывает путь установки CheckXML из реестра, и
// если не находит инофрмации, проверяет путь установки по умолчанию
//
Функция ПолучитьПредполагаемыйПутьУстановкиCheckXML() Экспорт
	
	ПапкаПрограммы = "";
	#Если Клиент Тогда
		СистИнформация = Новый СистемнаяИнформация;
		ВерсияОС = СистИнформация.ВерсияОС;
		МожноИспользоватьКомандуРеестра = (Найти(ВерсияОС, "Windows 95") = 0) И (Найти(ВерсияОС, "Windows 98") = 0);
		Если МожноИспользоватьКомандуРеестра Тогда
			ВремПапка = КаталогВременныхФайлов();
			КомандаСистемы("reg query HKCU\Software\CheckXML /s > FindCheckXML.txt", ВремПапка);
			ТекстДокумент = Новый ТекстовыйДокумент;
			ТекстДокумент.Прочитать(ВремПапка + "FindCheckXML.txt");
			ПредСтрока = "";
			ПапкаПрограммы = "";
			Для НомерСтроки = 0 По ТекстДокумент.КоличествоСтрок() Цикл
				ТекущаяСтрока = ТекстДокумент.ПолучитьСтроку(НомерСтроки);
				Если Найти(ПредСтрока, "HKEY_CURRENT_USER\Software\CheckXML") > 0 Тогда
					ПапкаПрограммы = СтрЗаменить(ТекущаяСтрока, "    InstPath	REG_SZ	", "");
					Прервать
				КонецЕсли;
				ПредСтрока = ТекущаяСтрока;
			КонецЦикла;
			УдалитьФайлы(ВремПапка + "\FindCheckXML.txt");
		КонецЕсли;
		Если ПапкаПрограммы = Неопределено Или ПапкаПрограммы = "" Тогда
			ИсполняемыйФайл = Новый Файл("C:\Program Files\CheckXML\CheckXML.exe");
			Если ИсполняемыйФайл.Существует() Тогда
				ПапкаПрограммы = "C:\Program Files\CheckXML";
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	Возврат ПапкаПрограммы;
	
КонецФункции //ПолучитьПредполагаемыйПутьУстановкиCheckXML()

// Процедура вызывает тестирование файла программой проверки
//
Процедура ПроверитьФайлВCheckXML(ДокументОбъект, ФормаВладелец) Экспорт
	ФормаПроверки = ПолучитьОбщуюФорму("ФормаПроверкиCheckXML", ФормаВладелец);
	ФормаПроверки.ДокументОбъект = ДокументОбъект;
	ФормаПроверки.Открыть();
	
КонецПроцедуры // ПроверитьФайлВCheckXML()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРСУЧЕТА С 2010 ГОДА

Процедура ПроставитьНомерПачки(ДокументОбъект) Экспорт

	Если Не ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.НомерПачки) Тогда // определим очередной номер
		Год = Год(ДокументОбъект.Дата);
		СледующийНомер = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год) + 1;
		ДокументОбъект.НомерПачки = Формат(СледующийНомер,"ЧЦ=5; ЧГ=0");
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год, СледующийНомер);
	Иначе // уточним данные регистра, если номер поправили вручную
		НомерПачки = ДокументОбъект.НомерПачки;
		Если Не ОбщегоНазначения.ТолькоЦифрыВСтроке(НомерПачки, , Ложь) Тогда
			Возврат
		КонецЕсли;
		Год = Год(ДокументОбъект.Дата);
		ТекущийНомер = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год);
		НомерПачки = Число(НомерПачки);
		Если НомерПачки > ТекущийНомер Тогда
			РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год, НомерПачки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьПроведения(ДокументОбъект, Отказ, РежимЗаписи) Экспорт

	Если ДокументОбъект.СпециальныйДокумент2010года Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(?(РежимЗаписи = РежимЗаписиДокумента.Проведение,"Перепроведение","Отмена проведения") +" этого документа запрещен"+ ?(РежимЗаписи = РежимЗаписиДокумента.Проведение,"о","а") + "!", Отказ, Строка(ДокументОбъект));
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;

КонецПроцедуры

Функция ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод) Экспорт 

	Возврат ?(Не ЗначениеЗаполнено(ОтчетныйПериод),ОтчетныйПериод,?(ОтчетныйПериод < '20100101',КонецГода(ОтчетныйПериод),?(ОтчетныйПериод < '20110101', КонецМесяца(ДобавитьМесяц(ОтчетныйПериод, 5)), КонецКвартала(ОтчетныйПериод))))

КонецФункции // ОкончаниеОтчетногоПериода()

Функция ПредшествующийОтчетныйПериодПерсучета(НекаяДата) Экспорт 
	
	Если НекаяДата < '20100301' Тогда
		Возврат ДобавитьМесяц(НачалоГода(НекаяДата), -12)
	ИначеЕсли НекаяДата < '20110101' Тогда
		Возврат '20100101'
	ИначеЕсли НекаяДата < '20110401' Тогда
		Возврат '20100701'
	Иначе
		Возврат ДобавитьМесяц(НачалоКвартала(НекаяДата), -3);
	КонецЕсли;
	
КонецФункции // ОкончаниеОтчетногоПериода()

Функция КатегорииЗастрахованныхЛицОрганизации(Организация, ГоловнаяОрганизация, ОтчетныйПериод) Экспорт

	СписокКатегорийЗастрахованныхЛиц = Новый СписокЗначений;
	
	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.НР, "НАЕМ/РАБОТНИК");
		Возврат СписокКатегорийЗастрахованныхЛиц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ОтчетныйПериод",	ОтчетныйПериод);
	Запрос.УстановитьПараметр("ОкончаниеОтчетногоПериода", ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим) КАК ВидТарифаСтраховыхВзносов,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР) КАК КатегорияЗастрахованныхЛиц,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТСоответствиеТарифаКатегории
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СельХозПроизводители),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.УСЕН),
	|	5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	4
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.УСЕН),
	|	5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	3
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидТарифаСтраховыхВзносов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	УчетнаяПолитикаНалоговыйУчет.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
	|ПОМЕСТИТЬ ВТТарифыОрганизации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчет.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода
	|	И УчетнаяПолитикаНалоговыйУчет.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ВидТарифаСтраховыхВзносов
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ОтчетныйПериод, Организация = &Организация) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтраховыеВзносыСведенияОДоходахОбороты.РезультатОборот, 0) <> 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
	|			&ОтчетныйПериод,
	|			&ОкончаниеОтчетногоПериода,
	|			,
	|			ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И ОблагаетсяЕНВД) КАК СтраховыеВзносыСведенияОДоходахОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц) КАК Представление,
	|	СоответствиеТарифаКатегории.Порядок КАК Порядок
	|ИЗ
	|	ВТТарифыОрганизации КАК ТарифыОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|		ПО ТарифыОрганизации.ВидТарифаСтраховыхВзносов = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов
	|ГДЕ
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"РегистрСведений.УчетнаяПолитикаНалоговыйУчет", ЗаполнениеРегламентированнойОтчетностиПереопределяемый.ИмяУчетнойПолитики());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	    СписокКатегорийЗастрахованныхЛиц.Добавить(Выборка.КатегорияЗастрахованныхЛиц,Выборка.Представление);
	КонецЦикла;
	Если СписокКатегорийЗастрахованныхЛиц.Количество() = 0 Тогда
		СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.НР, "НАЕМ/РАБОТНИК");
		СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ОЗОИ, "ОСОБАЯ/ЗОНА/ОРГАНИЗЦИИ/ИНВАЛИДОВ");
	ИначеЕсли СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Перечисления.КатегорииЗастрахованныхЛицПФР.ОЗОИ) = Неопределено Тогда 	
		СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ОЗОИ, "ОСОБАЯ/ЗОНА/ОРГАНИЗЦИИ/ИНВАЛИДОВ");
	КонецЕсли;
	
	Возврат СписокКатегорийЗастрахованныхЛиц
	
КонецФункции

Функция ДанныеРуководителяОрганизации(Организация, ДатаАктуальности) Экспорт

	СтруктураДанных = Новый Структура("Руководитель,ДолжностьРуководителя");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДатаАктуальности - 1);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Руководитель,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&Дата,
	|			СтруктурнаяЕдиница = &Организация
	|				И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); 
	ЗаполнитьЗначенияСвойств(СтруктураДанных,Выборка,"Руководитель,ДолжностьРуководителя");
	
	Возврат СтруктураДанных

КонецФункции // ДанныеРуководителяОрганизации()

Функция ОписаниеОтчетногоПериодаДляПечати(Год, Квартал, РазбиратьКакКорректируемыйПериод = Ложь) Экспорт
	
	Если РазбиратьКакКорректируемыйПериод Тогда
		СтруктураОписания = Новый Структура("КорректируемыйГод,ЭтоКварталКорректируемогоГода,ЭтоПолугодиеКорректируемогоГода,Это9МесяцевКорректируемогоГода,ЭтоВесьКорректируемыйГод");
		Если ЗначениеЗаполнено(Год) Тогда
			СтруктураОписания.КорректируемыйГод = Год;
			СтруктураОписания.ЭтоКварталКорректируемогоГода = Квартал = "1";
			СтруктураОписания.ЭтоПолугодиеКорректируемогоГода = Квартал = "2";
			СтруктураОписания.Это9МесяцевКорректируемогоГода = Квартал = "3";
			СтруктураОписания.ЭтоВесьКорректируемыйГод = Квартал = "4";
		КонецЕсли;	
	Иначе
		СтруктураОписания = Новый Структура("ЭтоПолугодие2010, Это2010год,ОтчетныйГод,ЭтоКварталОтчетногоГода,ЭтоПолугодиеОтчетногоГода,Это9МесяцевОтчетногоГода,ЭтоВесьОтчетныйГод");
		Если ЗначениеЗаполнено(Год) Тогда
			Если Год < "2011" Тогда
				СтруктураОписания.ЭтоПолугодие2010 = Квартал = "1";
				СтруктураОписания.Это2010год = Не СтруктураОписания.ЭтоПолугодие2010;
			Иначе
				СтруктураОписания.ОтчетныйГод = Год;
				СтруктураОписания.ЭтоКварталОтчетногоГода = Квартал = "1";
				СтруктураОписания.ЭтоПолугодиеОтчетногоГода = Квартал = "2";
				СтруктураОписания.Это9МесяцевОтчетногоГода = Квартал = "3";
				СтруктураОписания.ЭтоВесьОтчетныйГод = Квартал = "4";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОписания
	
КонецФункции // ОписаниеОтчетногоПериодаДляПечати()

#Если Клиент Тогда
	
// По переданной строке дерева, описывающего ПФР-овский файл, и структуре дополнительных данных
// создает и заполняет структуру с данными входящей описи
Функция ДанныеОписиАДВ_6_3(СтрокаДереваВходящаяОпись, ДополнительныеДанные) Экспорт
	
	//Печать описи документов
	ИнформацияОПачке = Новый Структура;
	ИнформацияОПачке.Вставить("РегНомерПФР", "");
	ИнформацияОПачке.Вставить("НаименованиеОрганизации", "");
	ИнформацияОПачке.Вставить("ИНН", "");
	ИнформацияОПачке.Вставить("КПП", "");
	ИнформацияОПачке.Вставить("ДокументовВПачке", "");
	ИнформацияОПачке.Вставить("НачисленоСтраховая", "");
	ИнформацияОПачке.Вставить("УплаченоСтраховая", "");
	ИнформацияОПачке.Вставить("НачисленоНакопительная", "");
	ИнформацияОПачке.Вставить("УплаченоНакопительная", "");
	ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", "");
	ИнформацияОПачке.Вставить("РуководительДолжность", ДополнительныеДанные.РуководительДолжность);
	ИнформацияОПачке.Вставить("Руководитель", ДополнительныеДанные.Руководитель);
	ИнформацияОПачке.Вставить("ОКПО", ДополнительныеДанные.ОКПО);
	
	ИнформацияОПачке.Вставить("КодКатегории", ИзвлечьДанное(СтрокаДереваВходящаяОпись, "КодКатегории"));
	
	ТипСведенийВФайле = ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ТипСведений");
	ИнформацияОПачке.Вставить("ЭтоИсходныйДокумент",		ТипСведенийВФайле = "ИСХОДНАЯ");
	ИнформацияОПачке.Вставить("ЭтоКорректирующийДокумент",	ТипСведенийВФайле = "КОРРЕКТИРУЮЩАЯ");
	ИнформацияОПачке.Вставить("ЭтоОтменяющийДокумент",		ТипСведенийВФайле = "ОТМЕНЯЮЩАЯ");
	
	ИнформацияОПачке.Вставить("ДатаСоставленияОписи", ДатаXMLВОтчет(ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления")));
	
	СтрокаДереваСоставительПачки = СтрокаДереваВходящаяОпись.Строки.Найти("СоставительПачки", "Имя");
	Если СтрокаДереваСоставительПачки <> Неопределено Тогда
		ИнформацияОПачке.Вставить("НаименованиеОрганизации", ИзвлечьДанное(СтрокаДереваСоставительПачки, "НаименованиеКраткое"));
		ИнформацияОПачке.Вставить("РегНомерПФР", ИзвлечьДанное(СтрокаДереваСоставительПачки, "РегистрационныйНомер"));
		ИнформацияОПачке.Вставить("ИНН", ИзвлечьДанное(СтрокаДереваСоставительПачки, "ИНН"));
		ИнформацияОПачке.Вставить("КПП", ИзвлечьДанное(СтрокаДереваСоставительПачки, "КПП"));
	КонецЕсли;
	
	Квартал = 0; Год = 0;
	СтрокаДереваОтчетныйПериод = СтрокаДереваВходящаяОпись.Строки.Найти("ОтчетныйПериод", "Имя");
	Если СтрокаДереваОтчетныйПериод <> Неопределено Тогда
		Квартал = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Квартал");
		Год = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Год");
		ИнформацияОПачке.Вставить("РасчетныйПериод", Квартал + ?(Год < "2011", "-ое полугодие ", "-ый квартал ") + Год + " года");
	КонецЕсли;
	Для каждого Элемент Из ОписаниеОтчетногоПериодаДляПечати(Год, Квартал) Цикл
	    ИнформацияОПачке.Вставить(Элемент.Ключ,Элемент.Значение)
	КонецЦикла;
	
	Квартал = 0; Год = 0;
	СтрокаДереваОтчетныйПериод = СтрокаДереваВходящаяОпись.Строки.Найти("КорректируемыйОтчетныйПериод", "Имя");
	Если СтрокаДереваОтчетныйПериод <> Неопределено Тогда
		Квартал = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Квартал");
		Год = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Год");
	КонецЕсли;
	Для каждого Элемент Из ОписаниеОтчетногоПериодаДляПечати(Год, Квартал, Истина) Цикл
	    ИнформацияОПачке.Вставить(Элемент.Ключ,Элемент.Значение)
	КонецЦикла;
	
	СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов", "Имя");
	Если СтрокаДереваСоставДокументов <> Неопределено Тогда
		СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов", "Имя");
		Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
			ИнформацияОПачке.Вставить("ДокументовВПачке", ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДереваВзносы = СтрокаДереваВходящаяОпись.Строки.Найти("СуммаВзносовНаСтраховую");
	Если СтрокаДереваВзносы <> Неопределено Тогда
		ИнформацияОПачке.Вставить("НачисленоСтраховая", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2"));
		ИнформацияОПачке.Вставить("УплаченоСтраховая", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2"));
	КонецЕсли;
	
	СтрокаДереваВзносы = СтрокаДереваВходящаяОпись.Строки.Найти("СуммаВзносовНаНакопительную");
	Если СтрокаДереваВзносы <> Неопределено Тогда
		ИнформацияОПачке.Вставить("НачисленоНакопительная", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2"));
		ИнформацияОПачке.Вставить("УплаченоНакопительная", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2"));
	КонецЕсли;
	
	СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
	Если СтрокаДереваНомерПачки <> Неопределено Тогда
		СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
		Если СтрокаДереваОсновной <> Неопределено Тогда
			НомерПачкиРаботодателя = ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной");
		Иначе
			НомерПачкиРаботодателя = ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению");
		КонецЕсли;
		ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", НомерПачкиРаботодателя);
	КонецЕсли;
	
	Возврат ИнформацияОПачке				
	
КонецФункции

//Выводит в табличный документ "ТабличныйДокумент" заполненный макет описи "Форма АДВ-6-3"
Процедура ВывестиОписьАДВ_6_3(ТабличныйДокумент,Знач ИнформацияОПачке) Экспорт

	МакетОписи = ПолучитьОбщийМакет("ФормаАДВ_6_3");
	СекцияОпись = МакетОписи.ПолучитьОбласть("Опись");
	ЗаполнитьЗначенияСвойств(СекцияОпись.Параметры,ИнформацияОПачке);
	ТабличныйДокумент.Вывести(СекцияОпись);
	
КонецПроцедуры	 

Функция ПечатнаяФормаСЗВ_6(ДокументОбъект, ТипФормДокументов, ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ВыводитьСписок = Ложь, ОчищатьСообщения = Истина) Экспорт
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	Если ОчищатьСообщения Тогда
		ОбработкаКомментариев.УдалитьСообщения();
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект, ЕстьОшибки);
	Если ЕстьОшибки Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат Неопределено;
	КонецЕсли;	 
	
	Заголовок = "Печать документа " + СокрЛП(ДокументОбъект);
	
	ДеревоПФР = ПреобразоватьВДеревоXML(ТекстФайла);
	
	Если ДеревоПФР = Неопределено Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не удалось разобрать файл с данными!", , Заголовок);
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат Неопределено 
	КонецЕсли;
	ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
	Если ДеревоПФР = Неопределено Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не удалось разобрать файл с данными!",, Заголовок);
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат Неопределено 
	КонецЕсли;
	
	СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
	Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
		
		СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ", "Имя");
		Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
			
			ВыборкаПоШапкеДокумента = ДокументОбъект.СформироватьЗапросПоШапке().Выбрать();
			ВыборкаПоШапкеДокумента.Следующий();
			
			// проверим данные руководителя
			Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель) Или Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность) Тогда
				
				Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель) Тогда
					ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан руководитель!", , Заголовок);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность) Тогда
					ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указана должность руководителя!", , Заголовок);
				КонецЕсли;
				
				ОбработкаКомментариев.ПоказатьСообщения();
				
			КонецЕсли;
			
			Вывести62как61 = ТипФормДокументов = "СЗВ-6-2" И ИмяМакета = "ФормаСЗВ_6_1";
			ВыводимСЗВ_6_1 = Вывести62как61 Или ТипФормДокументов = "СЗВ-6-1" Или ТипФормДокументов = "СПВ-1";
			
			// Формы СЗВ-6-хх
			ДокументРезультат = Новый ТабличныйДокумент;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработке" + ИмяМакета;
			ДокументРезультат.ОриентацияСтраницы = ?(ВыводимСЗВ_6_1, ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
			
			Если Вывести62как61 Или ТипФормДокументов = "СЗВ-6-1" Тогда
				Макет = ДокументОбъект.ПолучитьМакет("ФормаСЗВ_6_1")
			ИначеЕсли ТипФормДокументов = "СЗВ-6-2" Тогда
				Макет = ДокументОбъект.ПолучитьМакет("ФормаСЗВ_6_2")
			ИначеЕсли ТипФормДокументов = "СПВ-1" Тогда
				Макет = ДокументОбъект.ПолучитьМакет("ФормаСПВ_1");
			КонецЕсли;
			
			// Рабочие области макета
			ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
			ОбластьДокумент = Макет.ПолучитьОбласть("Строка");
			ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
			Если ВыводимСЗВ_6_1 Или ТипФормДокументов = "СПВ-1" Тогда
				ОбластьСтаж = Макет.ПолучитьОбласть("Стаж");
			Иначе
				ОбластьСтаж = ОбластьДокумент
			КонецЕсли;
			
			// Список застрахованных лиц
			Если ВыводитьСписок Тогда
				
				ДокументСписокЗастрахованныхЛиц = Новый ТабличныйДокумент;
				ДокументСписокЗастрахованныхЛиц.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ6_Список";
			
				Макет = ДокументОбъект.ПолучитьМакет("СписокЗастрахованныхЛиц");
				ОбластьШапкаСписка = Макет.ПолучитьОбласть("Шапка");
				ОбластьСтрокаСписка = Макет.ПолучитьОбласть("СтрокаРаботника");
				ОбластьПодвалСписка = Макет.ПолучитьОбласть("Подвал");
				ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
				
				// массив с двумя строками - для разбиения на страницы
				ВыводимыеОбласти = Новый Массив();
				ВыводимыеОбласти.Добавить(ОбластьСтрокаСписка);
				
			КонецЕсли;
			
			ИнформацияОПачке = ДанныеОписиАДВ_6_3(СтрокаДереваВходящаяОпись, ВыборкаПоШапкеДокумента);
			Если ТипФормДокументов = "СПВ-1" Тогда
				ИнформацияОПачке.Вставить("ТипИногоДокумента","Сведения о начисленных, уплаченных страховых взносах на обязательное пенсионное страхование и страховом стаже застрахованного лица для установления трудовой пенсии");
				ИнформацияОПачке.Вставить("Количество",ИнформацияОПачке.ДокументовВПачке);
				ИнформацияОПачке.Вставить("ИныхДокументовВПачке",ИнформацияОПачке.ДокументовВПачке);
				ИнформацияОПачке.Вставить("ДокументовВПачке","");
			ИначеЕсли Не ВыводимСЗВ_6_1 Тогда
				ИнформацияОПачке.Вставить("ТипИногоДокумента","Реестр сведений о начисленных и уплаченных страховых взносах на обязательное пенсионное страхование и страховом стаже застрахованных лиц");
				ИнформацияОПачке.Вставить("Количество",ИнформацияОПачке.ДокументовВПачке);
				ИнформацияОПачке.Вставить("ИныхДокументовВПачке",1);
				ИнформацияОПачке.Вставить("ДокументовВПачке","");
			Иначе
				ИнформацияОПачке.Вставить("ТипИногоДокумента"," ____________________________________ ____________________________");
			КонецЕсли;
			
			НомерПачкиРаботодателя = ИнформацияОПачке.НомерПачкиРаботодателя;
			
			// Опись АДВ-6-3
			Если ТипФормДокументов <> "СЗВ-6-2" Тогда
				ДокументОписи = Новый ТабличныйДокумент;
				ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ6_АДВ_6_3";
				ДокументОписи.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
				ВывестиОписьАДВ_6_3(ДокументОписи, ИнформацияОПачке);
				УниверсальныеМеханизмы.НапечататьДокумент(ДокументОписи, КоличествоЭкземпляров, НаПринтер,"Опись документов (АДВ-6-3); пачка №" + НомерПачкиРаботодателя);
			КонецЕсли;
			
			// копируем данные описи в остальные документы
			ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры,ИнформацияОПачке);
			ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры,ИнформацияОПачке);
			Если ВыводитьСписок Тогда
				// Список застрахованных лиц
				ИнформацияОПачке.Вставить("РегистрационныйНомерПФР",ИнформацияОПачке.РегНомерПФР);
				ИнформацияОПачке.Вставить("НаименованиеСокращенное",ИнформацияОПачке.НаименованиеОрганизации);
				ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке,"РасчетныйПериод,НомерПачкиРаботодателя, РегистрационныйНомерПФР,НаименованиеСокращенное");
				ЗаполнитьЗначенияСвойств(ОбластьПодвалСписка.Параметры,ИнформацияОПачке,"РуководительДолжность, Руководитель, ДатаСоставленияОписи");
			КонецЕсли;
			
			// выводим шапки документов
			Если Не ВыводимСЗВ_6_1 Тогда 
				ДокументРезультат.Вывести(ОбластьШапка);
			КонецЕсли;
			
			Если ВыводитьСписок Тогда
				ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьШапкаСписка);
				НомерСтрокиСписка = 0;
			КонецЕсли;
			
			//Цикл по документам файла
			ВыводилиДанные = Ложь;
			НомерДокумента = 0;
			Для Каждого СтрокаДереваСЗВ6 Из СтрокаДереваПачкаВходящихДокументов.Строки Цикл
				
				//Читаем запись документа
				Если СтрокаДереваСЗВ6.Имя <> "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ" Тогда
					Продолжить;
				КонецЕсли;
				
				Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
					ОбластьСтаж.Параметры[СчПараметр] = ""
				КонецЦикла;
				
				Если ВыводимСЗВ_6_1 Тогда //Каждый новый работник с новой страницы (отдельная форма СЗВ-6-1)
					Если Не ВыводилиДанные Тогда
						ВыводилиДанные = Истина;
					Иначе 
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Если ТипФормДокументов = "СПВ-1" Тогда
						ДатаСоставленияСтрокой = ИзвлечьДанное(СтрокаДереваСЗВ6, "ДатаСоставленияНа");
						Если ЗначениеЗаполнено(ДатаСоставленияСтрокой) Тогда
							ОбластьШапка.Параметры.ДатаСоставления = Дата(Прав(ДатаСоставленияСтрокой,4) + Сред(ДатаСоставленияСтрокой,4,2) + Лев(ДатаСоставленияСтрокой,2))
						Иначе
							ОбластьШапка.Параметры.ДатаСоставления = ""
						КонецЕсли;
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьШапка);
				КонецЕсли;
				
				// Данные по физлицу
				ОбластьДокумент.Параметры.СтраховойНомерПФР = ИзвлечьДанное(СтрокаДереваСЗВ6, "СтраховойНомер");
				СтрокаДереваФИО = СтрокаДереваСЗВ6.Строки.Найти("ФИО");
				Если СтрокаДереваФИО <> Неопределено Тогда
					ОбластьДокумент.Параметры.ФИО = ИзвлечьДанное(СтрокаДереваФИО, "Фамилия") + " " + ИзвлечьДанное(СтрокаДереваФИО, "Имя") + " " + ИзвлечьДанное(СтрокаДереваФИО, "Отчество");
				Иначе
					ОбластьДокумент.Параметры.ФИО = "";
				КонецЕсли;
				Если ВыводитьСписок Тогда
					// Список застрахованных лиц
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьДокумент.Параметры,"СтраховойНомерПФР,ФИО");
				КонецЕсли;
				
				Если ТипФормДокументов = "СЗВ-6-1" Или ТипФормДокументов = "СЗВ-6-2" Тогда
					СтрокаДереваАдресЗЛ = СтрокаДереваСЗВ6.Строки.Найти("АдресЗЛ");
					Если СтрокаДереваАдресЗЛ <> Неопределено Тогда
						ОбластьДокумент.Параметры.Адрес = ВРег(ПредставлениеАдресадляПФР(СтрокаДереваАдресЗЛ));
						Если ОбластьДокумент.Параметры.Адрес = " 0" Тогда
							ОбластьДокумент.Параметры.Адрес = "";
						КонецЕсли;
					Иначе
						ОбластьДокумент.Параметры.Адрес = "";
					КонецЕсли;
				КонецЕсли;
				
				СтрокаДереваВзносы = СтрокаДереваСЗВ6.Строки.Найти("СуммаВзносовНаСтраховую");
				Если СтрокаДереваВзносы <> Неопределено Тогда
					ОбластьДокумент.Параметры.НачисленоСтраховая = Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2");
					ОбластьДокумент.Параметры.УплаченоСтраховая = Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2");
				Иначе
					ОбластьДокумент.Параметры.НачисленоСтраховая = "";
					ОбластьДокумент.Параметры.УплаченоСтраховая = "";
				КонецЕсли;
				
				СтрокаДереваВзносы = СтрокаДереваСЗВ6.Строки.Найти("СуммаВзносовНаНакопительную");
				Если СтрокаДереваВзносы <> Неопределено Тогда
					ОбластьДокумент.Параметры.НачисленоНакопительная = Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2");
					ОбластьДокумент.Параметры.УплаченоНакопительная = Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2");
				Иначе
					ОбластьДокумент.Параметры.НачисленоНакопительная = "";
					ОбластьДокумент.Параметры.УплаченоНакопительная = "";
				КонецЕсли;
				
				Если ВыводимСЗВ_6_1 Тогда 
					ДокументРезультат.Вывести(ОбластьДокумент);
					НомерДокумента = 0;
				Иначе
					ОбластьДокумент.Параметры.НомерСтроки = НомерДокумента + 1;
				КонецЕсли;
				
				//Цикл по основным записям о стаже
				СтрокиДереваСтажевыйПериод = СтрокаДереваСЗВ6.Строки.НайтиСтроки(Новый Структура("Имя","СтажевыйПериод"));
				Если СтрокиДереваСтажевыйПериод.Количество() > 0 Тогда
					ЭтоПерваяСтрокаСтажа = Истина;
					Для Каждого СтрокаДереваПериодРаботы Из СтрокиДереваСтажевыйПериод Цикл
						
						Если ВыводимСЗВ_6_1 Тогда
							
							
							Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
								ОбластьСтаж.Параметры[СчПараметр] = ""
							КонецЦикла;
							
							НомерДокумента = НомерДокумента + 1;
							ОбластьСтаж.Параметры.НомерСтроки = НомерДокумента;
							ОбластьСтаж.Параметры.ДатаНачалаПериода 	= ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаНачалаПериода");
							ОбластьСтаж.Параметры.ДатаОкончанияПериода 	= ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаКонцаПериода");
							СтрокиДереваОсобенностиУчета = СтрокаДереваПериодРаботы.Строки.НайтиСтроки(Новый Структура("Имя","ЛьготныйСтаж"));
							Если СтрокиДереваОсобенностиУчета.Количество() > 0 Тогда
								Для Каждого СтрокаДереваОсобенностиУчета Из СтрокиДереваОсобенностиУчета Цикл
									
									Если ИзвлечьДанное(СтрокаДереваОсобенностиУчета, "НомерСтроки") > "1" Тогда
										ОбластьСтаж.Параметры.НомерСтроки 			= "";
										ОбластьСтаж.Параметры.ДатаНачалаПериода 	= "";
										ОбластьСтаж.Параметры.ДатаОкончанияПериода 	= "";
									КонецЕсли;
									
									СтрокаДереваОсобенностиУчета = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобенностиУчета");
									
									ЗаписьТУ = Новый Структура("Коэффициент,ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа",0,0,0);
									                                        
									СтрокаДереваТерриториальныеУсловия = СтрокаДереваОсобенностиУчета.Строки.Найти("ТерриториальныеУсловия");
									Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
										ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "ОснованиеТУ");
										ЗаписьТУ.Вставить("Коэффициент", ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "Коэффициент"));
									Иначе
										ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = "";
										ЗаписьТУ.Вставить("Коэффициент", 0);
									КонецЕсли;
									
									СтрокаДереваОсобыеУсловияТруда = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобыеУсловияТруда");
									Если СтрокаДереваОсобыеУсловияТруда <> Неопределено Тогда
										ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод 	= ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ОснованиеОУТ");
										ОбластьСтаж.Параметры.КодПозицииСписка = ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ПозицияСписка");
									Иначе
										ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = "";
										ОбластьСтаж.Параметры.КодПозицииСписка = "";
									КонецЕсли;
									
									ЗаписьЛгот = Новый Структура("ОснованиеИсчисляемогоСтажаКод,ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа,ТретийПараметрИсчисляемогоСтажа","",0,0,"");
									
									СтрокаДереваДекретДети = СтрокаДереваОсобенностиУчета.Строки.Найти("ДекретДети");
									Если СтрокаДереваДекретДети <> Неопределено Тогда
										ЗаписьЛгот.Вставить("ТретийПараметрИсчисляемогоСтажа", СтрокаДереваДекретДети.Значение);
									КонецЕсли;
									
									СтрокаДереваИсчисляемыйСтаж = СтрокаДереваОсобенностиУчета.Строки.Найти("ИсчисляемыйСтаж");
									Если СтрокаДереваИсчисляемыйСтаж <> Неопределено Тогда
										
										// Представление параметров ИТС
										ОбластьСтаж.Параметры.ОснованиеИТС = ИзвлечьДанное(СтрокаДереваИсчисляемыйСтаж, "ОснованиеИС");
										
										СтрокаДереваВыработкаВЧасах = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаВчасах");
										СтрокаДереваВыработкаКалендарная = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаКалендарная");
										ПервыйПараметрИсчисляемогоСтажа = 0;
										ВторойПараметрИсчисляемогоСтажа = 0;
										Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
											ПервыйПараметрИсчисляемогоСтажа = ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
											ВторойПараметрИсчисляемогоСтажа = ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
										ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
											ПервыйПараметрИсчисляемогоСтажа = ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
											ВторойПараметрИсчисляемогоСтажа = ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
										КонецЕсли;
										
										ЗаписьЛгот.Вставить("ОснованиеИсчисляемогоСтажаКод", ОбластьСтаж.Параметры.ОснованиеИТС);
										
										Если ЗначениеЗаполнено(ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод) Или ЗначениеЗаполнено(ОбластьСтаж.Параметры.ОснованиеИТС) Тогда
											ЗаписьЛгот.Вставить("ПервыйПараметрИсчисляемогоСтажа", Число(ПервыйПараметрИсчисляемогоСтажа));
											ЗаписьЛгот.Вставить("ВторойПараметрИсчисляемогоСтажа", Число(ВторойПараметрИсчисляемогоСтажа));
										Иначе
											ЗаписьТУ.Вставить("ПервыйПараметрИсчисляемогоСтажа", Число(ПервыйПараметрИсчисляемогоСтажа));
											ЗаписьТУ.Вставить("ВторойПараметрИсчисляемогоСтажа", Число(ВторойПараметрИсчисляемогоСтажа));
										КонецЕсли;
										
									КонецЕсли;
									
									ОбластьСтаж.Параметры.ДопИТС = ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
									ОбластьСтаж.Параметры.ДопТУ = ПредставлениеПараметровТерриториальныхУсловий(ЗаписьТУ);
									
									СтрокаДереваВыслугаЛет = СтрокаДереваОсобенностиУчета.Строки.Найти("ВыслугаЛет");
									Если СтрокаДереваВыслугаЛет <> Неопределено Тогда
										
										// Представление параметров выслуги лет
										ОбластьСтаж.Параметры.ОснованиеВыслуги = ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ОснованиеВЛ");
										
										
										СтрокаДереваВыработкаВЧасах = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаВчасах");
										СтрокаДереваВыработкаКалендарная = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаКалендарная");
										
										Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
											ПервыйПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
											ВторойПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
										ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
											ПервыйПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
											ВторойПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
										Иначе
											ПервыйПараметрВыслугиЛет = "";
											ВторойПараметрВыслугиЛет = "";
										КонецЕсли;
										ТретийПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ДоляСтавки");
										ЗаписьЛгот = Новый Структура;
										ЗаписьЛгот.Вставить("ОснованиеВыслугиЛетКод",ОбластьСтаж.Параметры.ОснованиеВыслуги);
										ЗаписьЛгот.Вставить("ПервыйПараметрВыслугиЛет",Число(ПервыйПараметрВыслугиЛет));
										ЗаписьЛгот.Вставить("ВторойПараметрВыслугиЛет",Число(ВторойПараметрВыслугиЛет));
										ЗаписьЛгот.Вставить("ТретийПараметрВыслугиЛет",Число(ТретийПараметрВыслугиЛет));
										
										
										ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
										
									КонецЕсли;
									
									ДокументРезультат.Вывести(ОбластьСтаж);
									
								КонецЦикла;
							Иначе
								ДокументРезультат.Вывести(ОбластьСтаж);
							КонецЕсли;
							
						Иначе
							
							Если ЭтоПерваяСтрокаСтажа Тогда
								НомерДокумента = НомерДокумента + 1;
								ОбластьСтаж.Параметры.НомерСтроки = НомерДокумента;
								ЭтоПерваяСтрокаСтажа = Ложь;
							Иначе
								Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
									ОбластьСтаж.Параметры[СчПараметр] = ""
								КонецЦикла;
							КонецЕсли;
							ОбластьСтаж.Параметры.ДатаНачалаПериода 	= СтрЗаменить(ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаНачалаПериода"), ".20",".");
							ОбластьСтаж.Параметры.ДатаОкончанияПериода 	= СтрЗаменить(ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаКонцаПериода"), ".20",".");
							ДокументРезультат.Вывести(ОбластьСтаж);
						КонецЕсли;
						
					КонецЦикла;
				Иначе
					НомерДокумента = НомерДокумента + 1;
					ОбластьСтаж.Параметры.НомерСтроки = НомерДокумента;
					ДокументРезультат.Вывести(ОбластьСтаж);
				КонецЕсли; // Записи о стаже
				
				// Подвал формы на одного физлица
				Если ВыводимСЗВ_6_1 Тогда 
					ДокументРезультат.Вывести(ОбластьПодвал);
				КонецЕсли;
				
				Если ВыводитьСписок Тогда
						
					НомерСтрокиСписка = НомерСтрокиСписка + 1;
					ОбластьСтрокаСписка.Параметры.НомерСтроки = НомерСтрокиСписка;
					
					// Проверим, уместится ли строка на странице или надо открывать новую страницу
					ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
					Если Не ВывестиПодвалЛиста и НомерДокумента = ИнформацияОПачке.ДокументовВПачке Тогда
						ВыводимыеОбласти.Добавить(ОбластьПодвалСписка);
						ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
					КонецЕсли;
					Если ВывестиПодвалЛиста Тогда
						ДокументСписокЗастрахованныхЛиц.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументСписокЗастрахованныхЛиц.Вывести(ПовторятьПриПечатиСтроки);
					КонецЕсли;
					
					ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьСтрокаСписка);
					
				КонецЕсли;
				
			КонецЦикла; // по документам
			
			// выводим подвалы документов
			Если Не ВыводимСЗВ_6_1 Тогда 
				ДокументРезультат.Вывести(ОбластьПодвал);
			КонецЕсли;
			Если ВыводитьСписок Тогда
				// Список застрахованных лиц
				ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьПодвалСписка);
			КонецЕсли;
			
			// показываем результаты
			Если ВыводитьСписок Тогда
				УниверсальныеМеханизмы.НапечататьДокумент(ДокументСписокЗастрахованныхЛиц,КоличествоЭкземпляров, НаПринтер,"Список застрахованных лиц; пачка №" + НомерПачкиРаботодателя);
			КонецЕсли;
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Индивидуальные сведения (" + ТипФормДокументов + "); пачка №" + НомерПачкиРаботодателя);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ВывестиСЗВ_6()

#КонецЕсли

Процедура ВписатьВзносыВНаборДанных(НаборДанных, НачисленоСтраховая, УплаченоСтраховая, НачисленоНакопительная, УплаченоНакопительная) Экспорт 
	
	Если НачисленоСтраховая > 0 Или УплаченоСтраховая > 0 Тогда
		СуммаВзносов = НаборДанных.СуммаВзносовНаСтраховую.Значение;
		Если НачисленоСтраховая > 0 Тогда
			СуммаВзносов.Начислено = НачисленоСтраховая;
		КонецЕсли;
		Если УплаченоСтраховая > 0 Тогда
			СуммаВзносов.Уплачено = УплаченоСтраховая;
		КонецЕсли;
	Иначе
		НаборДанных.Удалить("СуммаВзносовНаСтраховую");
	КонецЕсли;
	
	Если НачисленоНакопительная > 0 Или УплаченоНакопительная> 0 Тогда
		СуммаВзносов = НаборДанных.СуммаВзносовНаНакопительную.Значение;
		Если НачисленоНакопительная > 0 Тогда
			СуммаВзносов.Начислено = НачисленоНакопительная;
		КонецЕсли;
		Если УплаченоНакопительная > 0 Тогда
			СуммаВзносов.Уплачено = УплаченоНакопительная;
		КонецЕсли;
	Иначе
		НаборДанных.Удалить("СуммаВзносовНаНакопительную");
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеОтчетногоПериодаДляФайла(ОтчетныйПериод) Экспорт
	
	Если ОтчетныйПериод = '20100101' Тогда
		СтруктураОписания = Новый Структура("Квартал,Год",1,2010);
	ИначеЕсли ОтчетныйПериод = '20100701' Тогда
		СтруктураОписания = Новый Структура("Квартал,Год",2,2010);
	ИначеЕсли ОтчетныйПериод >= '20110101' Тогда
		СтруктураОписания = Новый Структура("Квартал,Год",Цел((Месяц(ОтчетныйПериод) - 0.1) / 3) + 1,Год(ОтчетныйПериод));
	Иначе
		СтруктураОписания = Новый Структура("Квартал,Год");
	КонецЕсли;
	
	Возврат СтруктураОписания
	
КонецФункции // ОписаниеОтчетногоПериодаДляПечати()

// Функция устанавливает значения реквизитов XML узла ВходящаяОпись
//
Функция ЗаполнитьНаборЗаписейВходящаяОпись2010(УзелПФР, МакетФормата, ТипДокумента, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке, ТегВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ", НаборЗаписейВходящаяОпись = Неопределено) Экспорт
	
	НаборЗаписейВходящаяОпись = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ТегВходящейОписи);
	
	НаборЗаписейВходящаяОпись.НомерВПачке.Значение = НомерДокументаВПачке;
	// Составитель пачки
	НаборЗаписейСоставительПачки = НаборЗаписейВходящаяОпись.СоставительПачки.Значение; 
	ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкаПоШапкеДокумента); // ОрганизацияЮрФизЛицо, ОрганизацияИНН, ОрганизацияКПП, ОрганизацияОГРН, ОрганизацияНаименованиеОКОПФ, ОрганизацияНаименованиеПолное, ОрганизацияНаименованиеСокращенное

	// Устанавливаем значение Номер пачки
	НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = НомерПачки; 
	// Блок СоставДокументов
	НаборЗаписейСоставДокументов = НаборЗаписейВходящаяОпись.СоставДокументов.Значение;
	НаборЗаписейСоставДокументов.Количество.Значение = 1;
	НаборЗаписейНаличиеДокументов = НаборЗаписейСоставДокументов.НаличиеДокументов.Значение;
	НаборЗаписейНаличиеДокументов.ТипДокумента = ТипДокумента;
	НаборЗаписейНаличиеДокументов.Количество = КоличествоДокументов;
	
	НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ВыборкаПоШапкеДокумента.Дата;
	
	Если ТипДокумента = "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ" Тогда
		
		НаборЗаписейВходящаяОпись.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
		НаборЗаписейВходящаяОпись.КодКатегории.Значение = ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц);
		
		НаборЗаписейОтчетныйПериод = НаборЗаписейВходящаяОпись.ОтчетныйПериод.Значение;
		ЗаполнитьЗначенияСвойств(НаборЗаписейОтчетныйПериод,ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.ОтчетныйПериод));
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			НаборЗаписейВходящаяОпись.Удалить("КорректируемыйОтчетныйПериод");
		Иначе
			НаборЗаписейОтчетныйПериод = НаборЗаписейВходящаяОпись.КорректируемыйОтчетныйПериод.Значение;
			ЗаполнитьЗначенияСвойств(НаборЗаписейОтчетныйПериод,ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.КорректируемыйПериод));
		КонецЕсли;
		
		ВписатьВзносыВНаборДанных(НаборЗаписейВходящаяОпись, Окр(ВыборкаПоШапкеДокумента.НачисленоСтраховая), Окр(ВыборкаПоШапкеДокумента.УплаченоСтраховая), Окр(ВыборкаПоШапкеДокумента.НачисленоНакопительная), Окр(ВыборкаПоШапкеДокумента.УплаченоНакопительная));
		
	КонецЕсли;
	
	УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
	ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ",""), НаборЗаписейВходящаяОпись);
	
	Возврат УзелПачкаВходящихДокументов;
	
КонецФункции // ЗаполнитьНаборЗаписейВходящаяОпись2010()

Функция ФайлСведенийОВзносахИСтаже(ВыборкаПоШапкеДокумента, РезультатЗапросаПоЗаписямСтажа, КоличествоДокументов, Заголовок, Отказ) Экспорт
	
	ДатаЗаполнения 			= ВыборкаПоШапкеДокумента.Дата;
	ТипФормДокументов		= ВыборкаПоШапкеДокумента.ТипФормДокументов;
	НомерПачки				= ВыборкаПоШапкеДокумента.НомерПачки;
	Ссылка					= ВыборкаПоШапкеДокумента.Ссылка;
	
	////////////////////////////////////////////////////////////////////////////////////////////
	//ФОРМИРУЕМ ФАЙЛ СВЕДЕНИЙ
	
	// Список стран
	СписокСтран = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторСтранМира.Наименование,
	|	КлассификаторСтранМира.Код
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСтран.Вставить(СокрЛП(Выборка.Наименование), Строка(Выборка.Код));
	КонецЦикла;
	
	ДопустимыеЗначенияТретьегоПараметра = Новый Соответствие;
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕКРЕТ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕТИ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("АДМИНИСТР", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ВРНЕТРУД", Истина);
	
	
	// Загружаем формат файла сведений
	МакетФормата = ПолучитьОбщийМакет("ФорматПФР70_2010");
	ТипДокументовПачки = "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ";
	
	// Создаем начальное дерево
	ДеревоВыгрузки = СоздатьДеревоXML();
	УзелПФР = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", );
	ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ПолучитьИмяФайлаПФ(Ссылка, ВыборкаПоШапкеДокумента.Год, ВыборкаПоШапкеДокумента));
	// Добавляем ветки ПачкаВходящихДокументов и ВходящаяОпись
	ДанныеВходящейОписи = "";
	УзелПачкаВходящихДокументов = ЗаполнитьНаборЗаписейВходящаяОпись2010(УзелПФР, МакетФормата, ТипДокументовПачки, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, 1, ,ДанныеВходящейОписи);
	ФорматСЗВ6 = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ?(ТипФормДокументов = "СПВ-1","СПВ_1","СЗВ_6"));
	
	Если ТипФормДокументов = "СЗВ-6-2" Тогда
		ФорматСЗВ6.СтажевыйПериод.Значение.Удалить("КоличествоЛьготныхСоставляющих");
		ФорматСЗВ6.СтажевыйПериод.Значение.Удалить("ЛьготныйСтаж");
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
		ФорматСЗВ6.Удалить("КорректируемыйОтчетныйПериод");
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		ФорматСЗВ6.Удалить("СуммаВзносовНаСтраховую");
		ФорматСЗВ6.Удалить("СуммаВзносовНаНакопительную");
		ФорматСЗВ6.Удалить("СтажевыйПериод");
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		ФорматСЗВ6.Удалить("КПП");
		ТаблицаПолей = ФорматСЗВ6.НалоговыйНомер.Поля;
		ТаблицаПолей.Индексы.Добавить("ИмяПоля");
		СтрокаКПП = ТаблицаПолей.Найти("КПП", "ИмяПоля");
		Если СтрокаКПП <> Неопределено Тогда
			ТаблицаПолей.Удалить(СтрокаКПП);
		КонецЕсли;
	КонецЕсли;
	
	ФорматИностранныйАдрес = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 3);
	ФорматНеструктурированныйАдрес = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 2);
	
	НомерДокументаВПачке = 1;
	ВыборкаПоРаботникиОрганизации	= РезультатЗапросаПоЗаписямСтажа.Выбрать();
	Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерСтроки")	Цикл
		
		НаборЗаписейСЗВ6 = СкопироватьСтруктуруДанных(ФорматСЗВ6);
		
		// Общие данные пачки - берем их из описи
		НаборЗаписейСЗВ6.ВидФормы.Значение = ВыборкаПоШапкеДокумента.ТипФормДокументов;
		НаборЗаписейСЗВ6.ТипСведений.Значение = ДанныеВходящейОписи.ТипСведений.Значение;
		НаборЗаписейСЗВ6.РегистрационныйНомер.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.РегистрационныйНомер.Значение;
		НаборЗаписейСЗВ6.НаименованиеКраткое.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.НаименованиеКраткое.Значение;
		НаборЗаписейСЗВ6.НалоговыйНомер.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.НалоговыйНомер.Значение;
		НаборЗаписейСЗВ6.КодКатегории.Значение = ДанныеВходящейОписи.КодКатегории.Значение;
		ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.ОтчетныйПериод.Значение,ДанныеВходящейОписи.ОтчетныйПериод.Значение);
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			Если ТипФормДокументов = "СПВ-1" Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.ОтчетныйПериод.Значение,ДанныеВходящейОписи.КорректируемыйОтчетныйПериод.Значение);
			Иначе
				ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.КорректируемыйОтчетныйПериод.Значение,ДанныеВходящейОписи.КорректируемыйОтчетныйПериод.Значение);
			КонецЕсли;
		КонецЕсли;
		НаборЗаписейСЗВ6.ДатаЗаполнения.Значение = ВыборкаПоШапкеДокумента.Дата;
		
		// Данные физлица
		НомерДокументаВПачке = НомерДокументаВПачке + 1;
		СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) + """: " + "По сотруднику "+ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " ";
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = "ИСХОДНАЯ"  Тогда
			Если ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода = NULL И ВыборкаПоРаботникиОрганизации.НачисленоСтраховая = 0 И ВыборкаПоРаботникиОрганизации.НачисленоНакопительная = 0 Тогда
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Данных о стаже и взносах не обнаружено!", Отказ, Заголовок);
			КонецЕсли; 
		КонецЕсли; 
		
		Фамилия = СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия);
		Имя = СокрЛП(ВыборкаПоРаботникиОрганизации.Имя);
		Отчество = СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество);
		
		НаборЗаписейСЗВ6.НомерВПачке.Значение = НомерДокументаВПачке;
		НаборЗаписейСЗВ6.СтраховойНомер.Значение = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
		НаборЗаписейФИО = НаборЗаписейСЗВ6.ФИО.Значение;
		НаборЗаписейФИО.Фамилия = ВРег(Фамилия);
		НаборЗаписейФИО.Имя = ВРег(Имя);
		НаборЗаписейФИО.Отчество = ВРег(Отчество);
		
		Если ТипФормДокументов = "СПВ-1" Тогда
			НаборЗаписейСЗВ6.ДатаСоставленияНа.Значение = ВыборкаПоРаботникиОрганизации.ДатаСоставления 
		Иначе
			// Заполняем адрес застрахованного лица, если он есть.
			Если СокрЛП(СтрЗаменить(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования, ",","")) <> "" Тогда
				АдресДляИнформирования = ВыборкаПоРаботникиОрганизации.АдресДляИнформирования;
			Иначе	
				АдресДляИнформирования = "";	
			КонецЕсли; 
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования) Тогда
				ТекстОшибки  ="";
				НаборЗаписейАдресЗЛ = НаборЗаписейСЗВ6.АдресЗЛ.Значение;
				ЗаполнитьАдрес(НаборЗаписейАдресЗЛ, ВыборкаПоРаботникиОрганизации.АдресДляИнформирования, СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ТекстОшибки);
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначения.ВывестиИнформациюОбОшибке("Предупреждение: " + СтрокаНачалаСообщенияОбОшибке + " Адрес" + ТекстОшибки, Ложь);
				КонецЕсли;
			Иначе
				НаборЗаписейСЗВ6.Удалить("АдресЗЛ") 	
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда // заполнение отменяющей формы завершено
			Продолжить;
		КонецЕсли;
		
		ВписатьВзносыВНаборДанных(НаборЗаписейСЗВ6, ВыборкаПоРаботникиОрганизации.НачисленоСтраховая, ВыборкаПоРаботникиОрганизации.УплаченоСтраховая, ВыборкаПоРаботникиОрганизации.НачисленоНакопительная, ВыборкаПоРаботникиОрганизации.УплаченоНакопительная);
		
		// Выводим стаж
		
		ФорматСтажевыйПериод = СкопироватьСтруктуруДанных(НаборЗаписейСЗВ6.СтажевыйПериод.Значение);
		НаборЗаписейСЗВ6.Удалить("СтажевыйПериод");
		
		УзелСЗВ61 = ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
		ДобавитьИнформациюВДерево(УзелСЗВ61, НаборЗаписейСЗВ6);
		
		Если ТипФормДокументов = "СЗВ-6-2" Тогда
			
			ЧислоОсновныхЗаписейОСтаже = 0;
			РаботникОрганизацииИмеетЛьготныйСтаж = Ложь;
			
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл
				
				Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода) И ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода) Тогда
					
					ФорматСтажевыйПериод.НомерСтроки.Значение = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
					ФорматСтажевыйПериод.ДатаНачалаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
					ФорматСтажевыйПериод.ДатаКонцаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
					
					УзелСтажевыйПериод = ДобавитьУзелВДеревоXML(УзелСЗВ61, "СтажевыйПериод","");
					ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
					
					// Признак наличия у работника основания для льготного стажа
					Если НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод) Или НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод) ИЛИ НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод) ИЛИ НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод) Тогда
						РаботникОрганизацииИмеетЛьготныйСтаж = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если РаботникОрганизацииИмеетЛьготныйСтаж Тогда
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В записи о стаже имеется льготный стаж. 
				|				Данные необходимо подавать по форме СЗВ-6-1!", Отказ, Заголовок);
				
			КонецЕсли;
			
		Иначе
			
			
			ФорматЛьготныйСтаж = СкопироватьСтруктуруДанных(ФорматСтажевыйПериод.ЛьготныйСтаж.Значение);
			ФорматСтажевыйПериод.Удалить("КоличествоЛьготныхСоставляющих");
			ФорматСтажевыйПериод.Удалить("ЛьготныйСтаж");
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи) Тогда
				
				Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл	
					
					УзелСтажевыйПериод = ДобавитьУзелВДеревоXML(УзелСЗВ61, "СтажевыйПериод","");
					ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
					
					УзелСтажевыйПериод.Строки.Найти("НомерСтроки").Значение = Строка(ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи);
					УзелСтажевыйПериод.Строки.Найти("ДатаНачалаПериода").Значение = Формат(ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода,"ДФ=dd.MM.yyyy");
					УзелСтажевыйПериод.Строки.Найти("ДатаКонцаПериода").Значение = Формат(ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода,"ДФ=dd.MM.yyyy");
					
					ВыводитьЛьготныйСтаж = Ложь;
					
					НаборЗаписейЛьготныйСтаж = СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
					НаборЗаписейОсобенностиУчета = НаборЗаписейЛьготныйСтаж.ОсобенностиУчета.Значение;
					
					// Территориальные условия
					НаборЗаписейТерриториальныеУсловия = НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.Значение;
					Если ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ" Тогда
						НаборЗаписейТерриториальныеУсловия.ОснованиеТУ = "";
					Иначе
						НаборЗаписейТерриториальныеУсловия.ОснованиеТУ = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
						НаборЗаписейТерриториальныеУсловия.Коэффициент = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияСтавка;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ОснованиеТУ);
					
					// Особые условия труда
					НаборЗаписейОсобыеУсловияТруда = НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.Значение;
					НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ = СокрЛП(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод);
					НаборЗаписейОсобыеУсловияТруда.ПозицияСписка = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод));
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ);
					
					// Исчисляемый стаж
					НаборЗаписейИсчисляемыйСтаж = НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.Значение;
					НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
					Если ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
						НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение);
					
					// Выслуга лет
					НаборЗаписейВыслугаЛет = НаборЗаписейОсобенностиУчета.ВыслугаЛет.Значение;
					НаборЗаписейВыслугаЛет.ОснованиеВЛ.Значение = СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод);
					НаборЗаписейВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
					НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВыработкаВЧасах.Значение;
					НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
					НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейВыслугаЛет.ОснованиеВЛ.Значение);
					
					//ДекретДети
					Если ДопустимыеЗначенияТретьегоПараметра.Получить(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
						НаборЗаписейОсобенностиУчета.ДекретДети.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобенностиУчета.ДекретДети.Значение);
					
					Если ВыводитьЛьготныйСтаж Тогда
						ЧислоДополнительныхЗаписейОСтаже = 1;
						СтрокаКоличествоЛьготныхСоставляющих = ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "КоличествоЛьготныхСоставляющих", 1);
						НаборЗаписейЛьготныйСтаж.НомерСтроки.Значение = ЧислоДополнительныхЗаписейОСтаже;
						УзелЛьготныйСтаж = ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ЛьготныйСтаж","");
						ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
					Иначе
						ЧислоДополнительныхЗаписейОСтаже = 0;
					КонецЕсли;
					
					Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
						
						//В дополнительной записи с номером 0 находится информация об основной записи
						Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = 0 тогда
							Продолжить;
						КонецЕсли;
						
						
						НаборЗаписейЛьготныйСтаж = СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
						НаборЗаписейДопОсобенностиУчета = НаборЗаписейЛьготныйСтаж.ОсобенностиУчета.Значение;
						
						ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
						НаборЗаписейЛьготныйСтаж.НомерСтроки.Значение = ЧислоДополнительныхЗаписейОСтаже;
						
						// Территориальные условия
						НаборЗаписейДопТерриториальныеУсловия = НаборЗаписейДопОсобенностиУчета.ТерриториальныеУсловия.Значение;
						НаборЗаписейДопТерриториальныеУсловия.ОснованиеТУ = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
						НаборЗаписейДопТерриториальныеУсловия.Коэффициент = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияСтавка;
						
						// Особые условия труда
						НаборЗаписейДопОсобыеУсловияТруда = НаборЗаписейДопОсобенностиУчета.ОсобыеУсловияТруда.Значение;
						НаборЗаписейДопОсобыеУсловияТруда.ОснованиеОУТ = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
						НаборЗаписейДопОсобыеУсловияТруда.ПозицияСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
						
						// Исчисляемый стаж
						НаборЗаписейДопИсчисляемыйСтаж = НаборЗаписейДопОсобенностиУчета.ИсчисляемыйСтаж.Значение;
						НаборЗаписейДопИсчисляемыйСтаж.ОснованиеИС.Значение = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
						Если ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа > 0 ИЛИ ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
							НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
							НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
							НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
						КонецЕсли;
						
						// Выслуга лет
						НаборЗаписейДопВыслугаЛет = НаборЗаписейДопОсобенностиУчета.ВыслугаЛет.Значение;
						НаборЗаписейДопВыслугаЛет.ОснованиеВЛ.Значение = СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод);
						НаборЗаписейДопВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
						НаборЗаписейДопВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВыработкаВЧасах.Значение;
						НаборЗаписейДопВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
						НаборЗаписейДопВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
						
						//ДекретДети
						Если ДопустимыеЗначенияТретьегоПараметра.Получить(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
							НаборЗаписейДопОсобенностиУчета.ДекретДети.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
						КонецЕсли;
						
						УзелЛьготныйСтаж = ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ЛьготныйСтаж","");
						ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
						
					КонецЦикла;// Выборка по дополнительным записям о стаже
					
					Если ЧислоДополнительныхЗаписейОСтаже > 1 Тогда
						СтрокаКоличествоЛьготныхСоставляющих.Значение = ЧислоДополнительныхЗаписейОСтаже;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат "";
	КонецЕсли;	 
	
	// Преобразуем дерево в строковое описание XML
	ТекстФайла = ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
	Возврат ТекстФайла
	
КонецФункции // ФайлСведенийОВзносахИСтаже()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-6

// Выполняет авторасчет стажа для формы СЗВ-6
//
Функция СЗВ6_ПолучитьДанныеДляЗаполненияСтажа(ОбособленноеПодразделение, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, СписокФизЛиц = Неопределено) Экспорт
	
	ДатаОкончанияПериодаЗаполнения = КонецДня(ДатаОкончанияПериодаЗаполнения);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокФизЛиц",				СписокФизЛиц);
	Запрос.УстановитьПараметр("ОтчетныйПериод",				ДатаНачалаПериодаЗаполнения);
	Запрос.УстановитьПараметр("НачалоГода",					ДатаНачалаПериодаЗаполнения);
	Запрос.УстановитьПараметр("КонецГода",					ДатаОкончанияПериодаЗаполнения);
	Запрос.УстановитьПараметр("НачалоСледующегоГода",		ДатаОкончанияПериодаЗаполнения + 1);
	Запрос.УстановитьПараметр("Организация",				ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение));
	Запрос.УстановитьПараметр("ТерриториальныеУсловия",		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбособленноеПодразделение,"ТерриториальныеУсловияПФР"));
	Запрос.УстановитьПараметр("НеОтбиратьДанныеПоФизлицу",	СписокФизЛиц = Неопределено);
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	&НачалоГода КАК ДатаС,
	|	РаботникиОрганизацииСрезПоследних.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ПериодЗавершения,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок
	|ПОМЕСТИТЬ ВТДатыДвижений
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоГода,
	|			Организация = &ГоловнаяОрганизация
	|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И &ПервоеДополнительноеУсловие
	|				И (&НеОтбиратьДанныеПоФизлицу
	|					ИЛИ Сотрудник.ФизЛицо В (&СписокФизЛиц))) КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Период,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность,
	|	РаботникиОрганизации.ГрафикРаботы,
	|	РаботникиОрганизации.ПериодЗавершения,
	|	РаботникиОрганизации.ЗанимаемыхСтавок
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	(&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&СписокФизЛиц))
	|	И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И &ВтороеДополнительноеУсловие
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизации.Период > &НачалоГода
	|	И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|	И РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.Физлицо,
	|	Работники.ПериодЗавершения,
	|	Работники.Организация,
	|	Работники.ПодразделениеОрганизацииЗавершения,
	|	Работники.ДолжностьЗавершения,
	|	Работники.ГрафикРаботыЗавершения,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	Работники.ЗанимаемыхСтавокЗавершения
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|			И (ПериодыПерекрытия.Период > Работники.Период)
	|			И (&НеОтбиратьДанныеПоФизлицу
	|				ИЛИ ПериодыПерекрытия.Сотрудник.Физлицо В (&СписокФизЛиц))
	|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И (&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ Работники.Сотрудник.Физлицо В (&СписокФизЛиц))
	|	И Работники.Организация = &ГоловнаяОрганизация
	|	И &ТретьеДополнительноеУсловие
	|	И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|	И Работники.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И Работники.ПериодЗавершения > &НачалоГода
	|	И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыДвижений.Сотрудник КАК Сотрудник,
	|	ПериодыДвижений.ФизЛицо КАК ФизЛицо,
	|	ПериодыДвижений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПериодыДвижений.Должность КАК Должность,
	|	ПериодыДвижений.ГрафикРаботы,
	|	ПериодыДвижений.ЗанимаемыхСтавок,
	|	ПериодыДвижений.ДатаС,
	|	ПериодыДвижений.ДатаПо,
	|	ПериодыДвижений.ПериодЗавершения,
	|	ДатыУвольнения.ПричинаИзмененияСостояния
	|ПОМЕСТИТЬ ВТПериодыДвижений
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыНазначений1.Сотрудник КАК Сотрудник,
	|		ДатыНазначений1.Физлицо КАК ФизЛицо,
	|		ДатыНазначений1.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ДатыНазначений1.Должность КАК Должность,
	|		ДатыНазначений1.ГрафикРаботы КАК ГрафикРаботы,
	|		ДатыНазначений1.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|		ДатыНазначений1.ДатаС КАК ДатаС,
	|		ВЫБОР
	|			КОГДА ДатыНазначений1.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода) > ДатыНазначений1.ПериодЗавершения
	|							ТОГДА ДатыНазначений1.ПериодЗавершения
	|						ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|					КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|		КОНЕЦ КАК ДатаПо,
	|		ДатыНазначений1.ПериодЗавершения КАК ПериодЗавершения
	|	ИЗ
	|		ВТДатыДвижений КАК ДатыНазначений1
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыНазначений2
	|			ПО ДатыНазначений1.Сотрудник = ДатыНазначений2.Сотрудник
	|				И (ДатыНазначений2.Организация = &ГоловнаяОрганизация)
	|				И (ДатыНазначений2.Период > ДатыНазначений1.ДатаС)
	|				И (ДатыНазначений2.Период < &НачалоСледующегоГода)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатыНазначений1.Сотрудник,
	|		ДатыНазначений1.Физлицо,
	|		ДатыНазначений1.ПодразделениеОрганизации,
	|		ДатыНазначений1.Должность,
	|		ДатыНазначений1.ГрафикРаботы,
	|		ДатыНазначений1.ДатаС,
	|		ДатыНазначений1.ПериодЗавершения,
	|		ДатыНазначений1.ЗанимаемыхСтавок) КАК ПериодыДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыУвольнения
	|		ПО ПериодыДвижений.Сотрудник = ДатыУвольнения.Сотрудник
	|			И (ДатыУвольнения.Организация = &ГоловнаяОрганизация)
	|			И ПериодыДвижений.ДатаПо = ДатыУвольнения.Период
	|			И (ДатыУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПодразделениеОрганизации,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыПостоянства.Сотрудник КАК Сотрудник,
	|	ПериодыПостоянства.ФизЛицо КАК ФизЛицо,
	|	"""" КАК ТретийПараметрИсчисляемогоСтажа,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&ОтчетныйПериод КАК ОтчетныйПериод,
	|	ПериодыПостоянства.ТерриториальныеУсловия,
	|	ПериодыПостоянства.ОсобыеУсловияТруда,
	|	ПериодыПостоянства.ГрафикРаботы,
	|	ПериодыПостоянства.ЗанимаемыхСтавок,
	|	ПериодыПостоянства.КодПозицииСписка,
	|	ЕСТЬNULL(ПериодыПостоянства.ОснованиеВыслугиЛет, ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)) КАК ОснованиеВыслугиЛет,
	|	ПериодыПостоянства.НазначениеС КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ПериодыПостоянства.НазначениеПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ПериодыПостоянства.НазначениеПо, ДЕНЬ, -1)
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТКадровыеПериоды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачалаПериодов.Сотрудник КАК Сотрудник,
	|		НачалаПериодов.ФизЛицо КАК ФизЛицо,
	|		НачалаПериодов.Должность КАК Должность,
	|		НачалаПериодов.ГрафикРаботы КАК ГрафикРаботы,
	|		НачалаПериодов.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|		НачалаПериодов.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		НачалаПериодов.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|		НачалаПериодов.КодПозицииСписка КАК КодПозицииСписка,
	|		НачалаПериодов.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|		НачалаПериодов.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|		НачалаПериодов.ДатаС КАК НазначениеС,
	|		ЕСТЬNULL(МИНИМУМ(ОкончанияПериодов.ДатаС), &НачалоСледующегоГода) КАК НазначениеПо
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПериодыНазначений.Сотрудник КАК Сотрудник,
	|			ПериодыНазначений.ФизЛицо КАК ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|			ПериодыНазначений.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|			ПериодыНазначений.Должность КАК Должность,
	|			ПериодыНазначений.КодПозицииСписка КАК КодПозицииСписка,
	|			ПериодыНазначений.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|			ПериодыНазначений.ГрафикРаботы КАК ГрафикРаботы,
	|			ПериодыНазначений.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|			ПериодыНазначений.ДатаС КАК ДатаС,
	|			ЕСТЬNULL(ШР.ОсобыеУсловияТруда, ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)) КАК ОсобыеУсловияТруда
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПериодыНазначений.Сотрудник КАК Сотрудник,
	|				ПериодыНазначений.Физлицо КАК ФизЛицо,
	|				ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|				ВЫБОР
	|					КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|						ТОГДА &ТерриториальныеУсловия
	|					ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|				КОНЕЦ КАК ТерриториальныеУсловия,
	|				ПериодыНазначений.Должность КАК Должность,
	|				ПериодыНазначений.Должность.КодПозицииСписка КАК КодПозицииСписка,
	|				ПериодыНазначений.Должность.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|				ПериодыНазначений.ГрафикРаботы КАК ГрафикРаботы,
	|				ПериодыНазначений.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|				ПериодыНазначений.ДатаС КАК ДатаС,
	|				МАКСИМУМ(ШР.Период) КАК Период
	|			ИЗ
	|				ВТДатыДвижений КАК ПериодыНазначений
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
	|						И (ШР.Период <= ПериодыНазначений.ДатаС)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПериодыНазначений.Сотрудник,
	|				ПериодыНазначений.Физлицо,
	|				ПериодыНазначений.ПодразделениеОрганизации,
	|				ПериодыНазначений.Должность,
	|				ПериодыНазначений.Должность.КодПозицииСписка,
	|				ПериодыНазначений.Должность.ОснованиеВыслугиЛет,
	|				ПериодыНазначений.ГрафикРаботы,
	|				ПериодыНазначений.ДатаС,
	|				ВЫБОР
	|					КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|						ТОГДА &ТерриториальныеУсловия
	|					ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|				КОНЕЦ,
	|				ПериодыНазначений.ЗанимаемыхСтавок) КАК ПериодыНазначений
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
	|					И (ШР.Период = ПериодыНазначений.Период)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПериодыНазначений.Сотрудник,
	|			ПериодыНазначений.ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации,
	|			ВЫБОР
	|				КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|					ТОГДА &ТерриториальныеУсловия
	|				ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|			КОНЕЦ,
	|			ПериодыНазначений.Должность,
	|			ПериодыНазначений.Должность.КодПозицииСписка,
	|			ПериодыНазначений.Должность.ОснованиеВыслугиЛет,
	|			ПериодыНазначений.ГрафикРаботы,
	|			NULL,
	|			ШР.Период,
	|			ШР.ОсобыеУсловияТруда
	|		ИЗ
	|			ВТПериодыДвижений КАК ПериодыНазначений
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
	|					И (ШР.Период > ПериодыНазначений.ДатаС)
	|					И (ШР.Период < ПериодыНазначений.ДатаПо
	|						ИЛИ ШР.Период = ПериодыНазначений.ДатаПо
	|							И ПериодыНазначений.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))) КАК НачалаПериодов
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|				РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|				РаботникиОрганизации.Период КАК ДатаС
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ГДЕ
	|				РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|						ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&СписокФизЛиц))
	|				И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|				И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|				И РаботникиОрганизации.Период > &НачалоГода
	|				И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				Работники.Сотрудник,
	|				Работники.Сотрудник.Физлицо,
	|				Работники.ПериодЗавершения
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК Работники
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|					ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|						И (ПериодыПерекрытия.Период > Работники.Период)
	|						И (ПериодыПерекрытия.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|						И (&НеОтбиратьДанныеПоФизлицу
	|							ИЛИ ПериодыПерекрытия.Сотрудник.Физлицо В (&СписокФизЛиц))
	|						И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|			ГДЕ
	|				Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|						ИЛИ Работники.Сотрудник.Физлицо В (&СписокФизЛиц))
	|				И Работники.Организация = &ГоловнаяОрганизация
	|				И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|				И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|				И Работники.ПериодЗавершения > &НачалоГода
	|				И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПериодыНазначений.Сотрудник,
	|				ПериодыНазначений.ФизЛицо,
	|				ШР.Период
	|			ИЗ
	|				ВТПериодыДвижений КАК ПериодыНазначений
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
	|						И (ШР.Период > ПериодыНазначений.ДатаС)
	|						И (ШР.Период <= ПериодыНазначений.ДатаПо)) КАК ОкончанияПериодов
	|			ПО НачалаПериодов.Сотрудник = ОкончанияПериодов.Сотрудник
	|				И НачалаПериодов.ДатаС < ОкончанияПериодов.ДатаС
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НачалаПериодов.Сотрудник,
	|		НачалаПериодов.ФизЛицо,
	|		НачалаПериодов.ПодразделениеОрганизации,
	|		НачалаПериодов.ТерриториальныеУсловия,
	|		НачалаПериодов.Должность,
	|		НачалаПериодов.КодПозицииСписка,
	|		НачалаПериодов.ОснованиеВыслугиЛет,
	|		НачалаПериодов.ГрафикРаботы,
	|		НачалаПериодов.ДатаС,
	|		НачалаПериодов.ОсобыеУсловияТруда,
	|		НачалаПериодов.ЗанимаемыхСтавок) КАК ПериодыПостоянства
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Организация КАК Организация,
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ВидРасчета.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТНЕСторнированныеНачисления
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			ПериодДействия МЕЖДУ &НачалоГода И &КонецГода
	|				И Организация = &ГоловнаяОрганизация
	|				И ВидРасчета.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|					ИЛИ Сотрудник.Физлицо В (&СписокФизЛиц))
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТДатыДвижений.Сотрудник
	|					ИЗ
	|						ВТДатыДвижений)) КАК Начисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТНачисленияСУчетомСторнирования
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|ГДЕ
	|	ТСторно.ВидРасчета ЕСТЬ NULL 
	|	И (НЕ Начисления.Сторно)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.ФизЛицо КАК ФизЛицо,
	|		Начисления.Сотрудник КАК Сотрудник,
	|		Начисления.ВидРасчета КАК ВидРасчета,
	|		Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|		Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|		СУММА(ВЫБОР
	|				КОГДА Начисления.Сторно
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК СуммаСторно
	|	ИЗ
	|		ВТНЕСторнированныеНачисления КАК Начисления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Начисления.ФизЛицо,
	|		Начисления.Сотрудник,
	|		Начисления.ВидРасчета,
	|		Начисления.ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец,
	|		Начисления.ВидСтажаСЗВ4) КАК Начисления
	|ГДЕ
	|	Начисления.СуммаСторно > 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|			ТОГДА ВЫБОР
	|					КОГДА ТСторно.ПериодДействияКонец = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияКонец, СЕКУНДА, 1)
	|				КОНЕЦ
	|		ИНАЧЕ Начисления.ПериодДействияНачало
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|			ТОГДА Начисления.ПериодДействияКонец
	|		КОГДА ТСторно.ПериодДействияНачало = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияНачало, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО Начисления.Организация = ТСторно.Организация
	|			И Начисления.Сотрудник = ТСторно.Сотрудник
	|			И Начисления.ВидРасчета = ТСторно.ВидРасчета
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И ((НЕ(ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|					И ТСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец)))
	|ГДЕ
	|	ТСторно.ВидРасчета ЕСТЬ НЕ NULL 
	|	И (НЕ Начисления.Сторно)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияКонец = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияКонец, СЕКУНДА, 1)
	|	КОНЕЦ,
	|	Начисления.ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И ((НЕ(ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|					И ТСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец)))
	|			И (ТСторно.ПериодДействияНачало > Начисления.ПериодДействияНачало)
	|			И (ТСторно.ПериодДействияКонец < Начисления.ПериодДействияКонец)
	|ГДЕ
	|	(НЕ ТСторно.ВидРасчета ЕСТЬ NULL )
	|	И (НЕ Начисления.Сторно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	ВидСтажаСЗВ4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияНачало >= КадровыеПериоды.ДатаНачалаПериода
	|			ТОГДА Начисления.ПериодДействияНачало
	|		ИНАЧЕ КадровыеПериоды.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияКонец <= КадровыеПериоды.ДатаОкончанияПериода
	|			ТОГДА Начисления.ПериодДействияКонец
	|		ИНАЧЕ КадровыеПериоды.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|	КадровыеПериоды.ФизЛицо КАК ФизЛицо,
	|	КадровыеПериоды.Сотрудник КАК Сотрудник,
	|	КадровыеПериоды.ОбособленноеПодразделение,
	|	КадровыеПериоды.ОтчетныйПериод
	|ПОМЕСТИТЬ ВТОплаченныеПериодыРаботы
	|ИЗ
	|	ВТКадровыеПериоды КАК КадровыеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСУчетомСторнирования КАК Начисления
	|		ПО КадровыеПериоды.Сотрудник = Начисления.Сотрудник
	|			И (Начисления.ПериодДействияНачало МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода
	|				ИЛИ Начисления.ПериодДействияКонец МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода)
	|			И (Начисления.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСУчетомСторнирования КАК ПовторныеНачисления
	|		ПО КадровыеПериоды.ФизЛицо = ПовторныеНачисления.ФизЛицо
	|			И (ПовторныеНачисления.ПериодДействияНачало = Начисления.ПериодДействияНачало)
	|			И (ПовторныеНачисления.ПериодДействияКонец = Начисления.ПериодДействияКонец)
	|			И (ПовторныеНачисления.ВидСтажаСЗВ4 <> Начисления.ВидСтажаСЗВ4)
	|			И (ПовторныеНачисления.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка))
	|ГДЕ
	|	(НЕ(Начисления.ВидСтажаСЗВ4 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж)
	|				И ЕСТЬNULL(ПовторныеНачисления.ВидСтажаСЗВ4, """") = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЕТИ)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОтдельноСтоящиеПериоды.ФизЛицо,
	|	ОтдельноСтоящиеПериоды.Сотрудник,
	|	ОтдельноСтоящиеПериоды.ВидСтажаСЗВ4,
	|	ОтдельноСтоящиеПериоды.ОбособленноеПодразделение,
	|	ОтдельноСтоящиеПериоды.ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ПересеченияПериодов.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтдельноСтоящиеПериоды.ДатаНачалаПериода
	|		ИНАЧЕ ПересеченияПериодов.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ПересеченияПериодов.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтдельноСтоящиеПериоды.ДатаОкончанияПериода
	|		ИНАЧЕ ПересеченияПериодов.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТОтредактированныеОплаченныеПериоды
	|ИЗ
	|	ВТОплаченныеПериодыРаботы КАК ОтдельноСтоящиеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВЫБОР
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 1
	|					ТОГДА ПересекающиеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|						И ПересекающиеПериоды.ДатаОкончанияПериода > ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаОкончанияПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|						И ПересекающиеПериоды.ДатаОкончанияПериода <= ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|						И ПересекающиеПериоды.ДатаОкончанияПериода > ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|						И ПересекающиеПериоды.ДатаОкончанияПериода <= ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ПересекающиеПериоды.ДатаОкончанияПериода
	|			КОНЕЦ КАК ДатаНачалаПериода,
	|			ВЫБОР
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 1
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|					ТОГДА ПересекающиеПериоды.ДатаОкончанияПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|					ТОГДА ИсходныеПериоды.ДатаОкончанияПериода
	|			КОНЕЦ КАК ДатаОкончанияПериода,
	|			ИсходныеПериоды.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|			ИсходныеПериоды.Сотрудник КАК Сотрудник,
	|			ИсходныеПериоды.ФизЛицо КАК ФизЛицо,
	|			ИсходныеПериоды.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|			ИсходныеПериоды.ОтчетныйПериод КАК ОтчетныйПериод
	|		ИЗ
	|			ВТОплаченныеПериодыРаботы КАК ИсходныеПериоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ОплаченныеПериоды1.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|					ОплаченныеПериоды1.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|					ОплаченныеПериоды1.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|					ОплаченныеПериоды1.Сотрудник КАК Сотрудник,
	|					ОплаченныеПериоды1.ФизЛицо КАК ФизЛицо,
	|					ОплаченныеПериоды1.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|					ОплаченныеПериоды1.ОтчетныйПериод КАК ОтчетныйПериод,
	|					1 КАК НомерИнтервала
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды1
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					ОплаченныеПериоды2.ДатаНачалаПериода,
	|					ОплаченныеПериоды2.ДатаОкончанияПериода,
	|					ОплаченныеПериоды2.ВидСтажаСЗВ4,
	|					ОплаченныеПериоды2.Сотрудник,
	|					ОплаченныеПериоды2.ФизЛицо,
	|					ОплаченныеПериоды2.ОбособленноеПодразделение,
	|					ОплаченныеПериоды2.ОтчетныйПериод,
	|					2
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды2
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					ОплаченныеПериоды3.ДатаНачалаПериода,
	|					ОплаченныеПериоды3.ДатаОкончанияПериода,
	|					ОплаченныеПериоды3.ВидСтажаСЗВ4,
	|					ОплаченныеПериоды3.Сотрудник,
	|					ОплаченныеПериоды3.ФизЛицо,
	|					ОплаченныеПериоды3.ОбособленноеПодразделение,
	|					ОплаченныеПериоды3.ОтчетныйПериод,
	|					3
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды3) КАК ПересекающиеПериоды
	|				ПО ИсходныеПериоды.ВидСтажаСЗВ4 = ПересекающиеПериоды.ВидСтажаСЗВ4
	|					И ИсходныеПериоды.Сотрудник = ПересекающиеПериоды.Сотрудник
	|					И ИсходныеПериоды.ОбособленноеПодразделение = ПересекающиеПериоды.ОбособленноеПодразделение
	|					И ИсходныеПериоды.ОтчетныйПериод = ПересекающиеПериоды.ОтчетныйПериод
	|					И ИсходныеПериоды.ДатаНачалаПериода > ПересекающиеПериоды.ДатаНачалаПериода
	|					И ИсходныеПериоды.ДатаНачалаПериода < ПересекающиеПериоды.ДатаОкончанияПериода) КАК ПересеченияПериодов
	|		ПО ОтдельноСтоящиеПериоды.ВидСтажаСЗВ4 = ПересеченияПериодов.ВидСтажаСЗВ4
	|			И ОтдельноСтоящиеПериоды.Сотрудник = ПересеченияПериодов.Сотрудник
	|			И ОтдельноСтоящиеПериоды.ОбособленноеПодразделение = ПересеченияПериодов.ОбособленноеПодразделение
	|			И ОтдельноСтоящиеПериоды.ОтчетныйПериод = ПересеченияПериодов.ОтчетныйПериод
	|			И ОтдельноСтоящиеПериоды.ДатаНачалаПериода <= ПересеченияПериодов.ДатаНачалаПериода
	|			И ОтдельноСтоящиеПериоды.ДатаОкончанияПериода >= ПересеченияПериодов.ДатаОкончанияПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НефильтрованныеДниСтажа.ДатаКалендаря,
	|	ВЫБОР
	|		КОГДА НефильтрованныеДниСтажа.ДатаКалендаря = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НефильтрованныеДниСтажа.ДатаКалендаря, ДЕНЬ, 1)
	|	КОНЕЦ КАК СледующаяДатаКалендаря,
	|	ВЫБОР
	|		КОГДА НефильтрованныеДниСтажа.ДатаКалендаря = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НефильтрованныеДниСтажа.ДатаКалендаря, ДЕНЬ, -1)
	|	КОНЕЦ КАК ПредыдущаяДатаКалендаря,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 1
	|			ТОГДА ""ДЕКРЕТ""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 2
	|			ТОГДА ""ДЕТИ""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 3
	|			ТОГДА ""ВРНЕТРУД""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 4
	|			ТОГДА ""АДМИНИСТР""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	|	НефильтрованныеДниСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	НефильтрованныеДниСтажа.Сотрудник КАК Сотрудник,
	|	НефильтрованныеДниСтажа.ФизЛицо КАК ФизЛицо,
	|	НефильтрованныеДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	НефильтрованныеДниСтажа.ОтчетныйПериод КАК ОтчетныйПериод,
	|	НефильтрованныеДниСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	НефильтрованныеДниСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	НефильтрованныеДниСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	НефильтрованныеДниСтажа.ЗанимаемыхСтавок,
	|	НефильтрованныеДниСтажа.СтавокДляТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТДниСтажа
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НефильтрованныеДниСтажа.ДатаКалендаря КАК ДатаКалендаря,
	|		ВЫБОР
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.Декрет)
	|				ТОГДА 1
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.Дети)
	|				ТОГДА 2
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВременнаяНетрудоспособность)
	|				ТОГДА 3
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|				ТОГДА 4
	|			ИНАЧЕ 5
	|		КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|				ТОГДА НефильтрованныеДниСтажа.ЗанимаемыхСтавок
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтавокДляТерриториальныхУсловий,
	|		ВЫБОР
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ТерриториальныеУсловия
	|		КОНЕЦ КАК ТерриториальныеУсловия,
	|		НефильтрованныеДниСтажа.Сотрудник КАК Сотрудник,
	|		НефильтрованныеДниСтажа.ФизЛицо КАК ФизЛицо,
	|		НефильтрованныеДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		НефильтрованныеДниСтажа.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|		НефильтрованныеДниСтажа.ОтчетныйПериод КАК ОтчетныйПериод,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ОсобыеУсловияТруда
	|		КОНЕЦ КАК ОсобыеУсловияТруда,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.КодПозицииСписка
	|		КОНЕЦ КАК КодПозицииСписка,
	|		ВЫБОР
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ОснованиеВыслугиЛет
	|		КОНЕЦ КАК ОснованиеВыслугиЛет
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|			КадровыеПериоды.ФизЛицо КАК ФизЛицо,
	|			КадровыеПериоды.Сотрудник КАК Сотрудник,
	|			КадровыеПериоды.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|			КадровыеПериоды.ОтчетныйПериод КАК ОтчетныйПериод,
	|			КадровыеПериоды.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|			КадровыеПериоды.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|			КадровыеПериоды.ГрафикРаботы КАК ГрафикРаботы,
	|			КадровыеПериоды.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|			КадровыеПериоды.КодПозицииСписка КАК КодПозицииСписка,
	|			КадровыеПериоды.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|			МАКСИМУМ(ВидыСтажа.Порядок) КАК ПорядковыйНомерВидаСтажа
	|		ИЗ
	|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПериоды КАК КадровыеПериоды
	|				ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТОтредактированныеОплаченныеПериоды КАК ОтредактированныеОплаченныеПериоды
	|					ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыСтажаСЗВ4 КАК ВидыСтажа
	|					ПО ОтредактированныеОплаченныеПериоды.ВидСтажаСЗВ4 = ВидыСтажа.Ссылка
	|				ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтредактированныеОплаченныеПериоды.ДатаНачалаПериода И ОтредактированныеОплаченныеПериоды.ДатаОкончанияПериода)
	|					И (ОтредактированныеОплаченныеПериоды.Сотрудник = КадровыеПериоды.Сотрудник)
	|					И (ОтредактированныеОплаченныеПериоды.ОбособленноеПодразделение = КадровыеПериоды.ОбособленноеПодразделение)
	|		ГДЕ
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоГода И &КонецГода
	|			И ЕСТЬNULL(КадровыеПериоды.Сотрудник, ОтредактированныеОплаченныеПериоды.Сотрудник) ЕСТЬ НЕ NULL 
	|			И ЕСТЬNULL(ОтредактированныеОплаченныеПериоды.ВидСтажаСЗВ4, """") <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	|			КадровыеПериоды.ФизЛицо,
	|			КадровыеПериоды.Сотрудник,
	|			КадровыеПериоды.ОбособленноеПодразделение,
	|			КадровыеПериоды.ОтчетныйПериод,
	|			КадровыеПериоды.ТерриториальныеУсловия,
	|			КадровыеПериоды.ОсобыеУсловияТруда,
	|			КадровыеПериоды.ГрафикРаботы,
	|			КадровыеПериоды.ЗанимаемыхСтавок,
	|			КадровыеПериоды.КодПозицииСписка,
	|			КадровыеПериоды.ОснованиеВыслугиЛет) КАК НефильтрованныеДниСтажа
	|			ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыСтажаСЗВ4 КАК ВидыСтажа
	|			ПО (ВидыСтажа.Порядок = НефильтрованныеДниСтажа.ПорядковыйНомерВидаСтажа)
	|	ГДЕ
	|		НефильтрованныеДниСтажа.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК НефильтрованныеДниСтажа
	|
	|СГРУППИРОВАТЬ ПО
	|	НефильтрованныеДниСтажа.ОтчетныйПериод,
	|	НефильтрованныеДниСтажа.Сотрудник,
	|	НефильтрованныеДниСтажа.ФизЛицо,
	|	НефильтрованныеДниСтажа.ДатаКалендаря,
	|	НефильтрованныеДниСтажа.ТерриториальныеУсловия,
	|	НефильтрованныеДниСтажа.ОбособленноеПодразделение,
	|	НефильтрованныеДниСтажа.ОсобыеУсловияТруда,
	|	НефильтрованныеДниСтажа.КодПозицииСписка,
	|	НефильтрованныеДниСтажа.ОснованиеВыслугиЛет,
	|	НефильтрованныеДниСтажа.ЗанимаемыхСтавок,
	|	НефильтрованныеДниСтажа.СтавокДляТерриториальныхУсловий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетныйПериод,
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	ПредыдущаяДатаКалендаря,
	|	ТерриториальныеУсловия,
	|	ОсобыеУсловияТруда,
	|	КодПозицииСписка,
	|	ОснованиеВыслугиЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниСтажа.ДатаКалендаря,
	|	ДниСтажа.СледующаяДатаКалендаря КАК СледующаяДатаКалендаря,
	|	ДниСтажа.ПредыдущаяДатаКалендаря,
	|	ДниСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ДниСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ДниСтажа.ФизЛицо КАК ФизЛицо,
	|	ДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ДниСтажа.ОтчетныйПериод КАК ОтчетныйПериод,
	|	ДниСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ДниСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	ДниСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ДниСтажа.ЗанимаемыхСтавок,
	|	ДниСтажа.СтавокДляТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТСледующиеДниСтажа
	|ИЗ
	|	ВТДниСтажа КАК ДниСтажа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетныйПериод,
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	СледующаяДатаКалендаря,
	|	ТерриториальныеУсловия,
	|	ОсобыеУсловияТруда,
	|	КодПозицииСписка,
	|	ОснованиеВыслугиЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДень.ДатаКалендаря КАК НачалоПериода,
	|	ТекущийДень.ТретийПараметрИсчисляемогоСтажа,
	|	ТекущийДень.ТерриториальныеУсловия,
	|	ТекущийДень.ФизЛицо КАК ФизЛицо,
	|	ТекущийДень.ОбособленноеПодразделение,
	|	ТекущийДень.ОтчетныйПериод,
	|	ТекущийДень.ОсобыеУсловияТруда,
	|	ТекущийДень.КодПозицииСписка,
	|	ТекущийДень.ОснованиеВыслугиЛет,
	|	ТекущийДень.ЗанимаемыхСтавок,
	|	ТекущийДень.СтавокДляТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТНачалаПериодов
	|ИЗ
	|	ВТДниСтажа КАК ТекущийДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСледующиеДниСтажа КАК ПредыдущийДень
	|		ПО ТекущийДень.ДатаКалендаря = ПредыдущийДень.СледующаяДатаКалендаря
	|			И ТекущийДень.ТерриториальныеУсловия = ПредыдущийДень.ТерриториальныеУсловия
	|			И ТекущийДень.ТретийПараметрИсчисляемогоСтажа = ПредыдущийДень.ТретийПараметрИсчисляемогоСтажа
	|			И ТекущийДень.ФизЛицо = ПредыдущийДень.ФизЛицо
	|			И ТекущийДень.ОбособленноеПодразделение = ПредыдущийДень.ОбособленноеПодразделение
	|			И ТекущийДень.ОтчетныйПериод = ПредыдущийДень.ОтчетныйПериод
	|			И ТекущийДень.ОсобыеУсловияТруда = ПредыдущийДень.ОсобыеУсловияТруда
	|			И ТекущийДень.КодПозицииСписка = ПредыдущийДень.КодПозицииСписка
	|			И ТекущийДень.ОснованиеВыслугиЛет = ПредыдущийДень.ОснованиеВыслугиЛет
	|			И ТекущийДень.ЗанимаемыхСтавок = ПредыдущийДень.ЗанимаемыхСтавок
	|			И ТекущийДень.СтавокДляТерриториальныхУсловий = ПредыдущийДень.СтавокДляТерриториальныхУсловий
	|ГДЕ
	|	ПредыдущийДень.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДень.ДатаКалендаря КАК ОкончаниеПериода,
	|	ТекущийДень.ТретийПараметрИсчисляемогоСтажа,
	|	ТекущийДень.ТерриториальныеУсловия,
	|	ТекущийДень.ФизЛицо КАК ФизЛицо,
	|	ТекущийДень.ОбособленноеПодразделение,
	|	ТекущийДень.ОтчетныйПериод,
	|	ТекущийДень.ОсобыеУсловияТруда,
	|	ТекущийДень.КодПозицииСписка,
	|	ТекущийДень.ОснованиеВыслугиЛет,
	|	ТекущийДень.ЗанимаемыхСтавок,
	|	ТекущийДень.СтавокДляТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТОкончанияПериодов
	|ИЗ
	|	ВТДниСтажа КАК ТекущийДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниСтажа КАК СледующийДень
	|		ПО ТекущийДень.ДатаКалендаря = СледующийДень.ПредыдущаяДатаКалендаря
	|			И ТекущийДень.ТерриториальныеУсловия = СледующийДень.ТерриториальныеУсловия
	|			И ТекущийДень.ТретийПараметрИсчисляемогоСтажа = СледующийДень.ТретийПараметрИсчисляемогоСтажа
	|			И ТекущийДень.ФизЛицо = СледующийДень.ФизЛицо
	|			И ТекущийДень.ОбособленноеПодразделение = СледующийДень.ОбособленноеПодразделение
	|			И ТекущийДень.ОтчетныйПериод = СледующийДень.ОтчетныйПериод
	|			И ТекущийДень.ОсобыеУсловияТруда = СледующийДень.ОсобыеУсловияТруда
	|			И ТекущийДень.КодПозицииСписка = СледующийДень.КодПозицииСписка
	|			И ТекущийДень.ОснованиеВыслугиЛет = СледующийДень.ОснованиеВыслугиЛет
	|			И ТекущийДень.ЗанимаемыхСтавок = СледующийДень.ЗанимаемыхСтавок
	|			И ТекущийДень.СтавокДляТерриториальныхУсловий = СледующийДень.СтавокДляТерриториальныхУсловий
	|ГДЕ
	|	СледующийДень.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачалаПериодов.ФизЛицо КАК ФизЛицо,
	|	НачалаПериодов.ОтчетныйПериод,
	|	НачалаПериодов.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	НачалаПериодов.НачалоПериода КАК ДатаНачалаПериода,
	|	ЕСТЬNULL(МИНИМУМ(ОкончанияПериодов.ОкончаниеПериода), НачалаПериодов.НачалоПериода) КАК ДатаОкончанияПериода,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.ОсобыеУсловияТруда
	|	КОНЕЦ КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.КодПозицииСписка
	|	КОНЕЦ КАК КодПозицииСписка,
	|	НачалаПериодов.ТретийПараметрИсчисляемогоСтажа,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.ОснованиеВыслугиЛет
	|	КОНЕЦ КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.ТерриториальныеУсловия
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"")
	|			ТОГДА 0
	|		КОГДА НачалаПериодов.ТерриториальныеУсловия В (ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.МКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.РКС))
	|			ТОГДА НачалаПериодов.СтавокДляТерриториальныхУсловий
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПараметрТерриториальныхУсловий,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"")
	|			ТОГДА 0
	|		КОГДА НачалаПериодов.ОснованиеВыслугиЛет В (ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ПД), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГДХР), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_СМ), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГДХР), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГД))
	|			ТОГДА НачалаПериодов.ЗанимаемыхСтавок
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТретийПараметрВыслугиЛет
	|ИЗ
	|	ВТНачалаПериодов КАК НачалаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОкончанияПериодов КАК ОкончанияПериодов
	|		ПО НачалаПериодов.ТерриториальныеУсловия = ОкончанияПериодов.ТерриториальныеУсловия
	|			И НачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ОкончанияПериодов.ТретийПараметрИсчисляемогоСтажа
	|			И НачалаПериодов.ФизЛицо = ОкончанияПериодов.ФизЛицо
	|			И НачалаПериодов.ОбособленноеПодразделение = ОкончанияПериодов.ОбособленноеПодразделение
	|			И НачалаПериодов.ОтчетныйПериод = ОкончанияПериодов.ОтчетныйПериод
	|			И НачалаПериодов.ОсобыеУсловияТруда = ОкончанияПериодов.ОсобыеУсловияТруда
	|			И НачалаПериодов.КодПозицииСписка = ОкончанияПериодов.КодПозицииСписка
	|			И НачалаПериодов.ОснованиеВыслугиЛет = ОкончанияПериодов.ОснованиеВыслугиЛет
	|			И НачалаПериодов.НачалоПериода <= ОкончанияПериодов.ОкончаниеПериода
	|			И НачалаПериодов.ЗанимаемыхСтавок = ОкончанияПериодов.ЗанимаемыхСтавок
	|			И НачалаПериодов.СтавокДляТерриториальныхУсловий = ОкончанияПериодов.СтавокДляТерриториальныхУсловий
	|
	|СГРУППИРОВАТЬ ПО
	|	НачалаПериодов.НачалоПериода,
	|	НачалаПериодов.ТерриториальныеУсловия,
	|	НачалаПериодов.ТретийПараметрИсчисляемогоСтажа,
	|	НачалаПериодов.ФизЛицо,
	|	НачалаПериодов.ОбособленноеПодразделение,
	|	НачалаПериодов.ОтчетныйПериод,
	|	НачалаПериодов.ОсобыеУсловияТруда,
	|	НачалаПериодов.КодПозицииСписка,
	|	НачалаПериодов.ОснованиеВыслугиЛет,
	|	НачалаПериодов.ЗанимаемыхСтавок,
	|	НачалаПериодов.СтавокДляТерриториальныхУсловий
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	ДатаНачалаПериода";
	
	//
	ПериодыДоговоровТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо КАК Физлицо,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&ОтчетныйПериод КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.КодПоОКАТО, """") = """"
	|			ТОГДА &ТерриториальныеУсловия
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка) КАК ОсобыеУсловияТруда,
	|	"""" КАК КодПозицииСписка,
	|	ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка) КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала < &НачалоГода
	|			ТОГДА &НачалоГода
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания < &НачалоСледующегоГода
	|			ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания
	|		ИНАЧЕ &КонецГода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоГода
	|	И (&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо В (&СписокФизЛиц))
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	ДатаОкончанияПериода,
	|	ДатаНачалаПериода";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ПервоеДополнительноеУсловие",ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ВтороеДополнительноеУсловие",ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников("РаботникиОрганизации."));
	Запрос.Текст = 	СтрЗаменить(ТекстЗапроса,"И &ТретьеДополнительноеУсловие",ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников("Работники."));
	
	ТаблицаСтажа = Запрос.Выполнить().Выгрузить();
	ТаблицаСтажа.Индексы.Добавить("ФизЛицо");
	
	// Удалим из таблицы стажа незначимые записи:
	//  - если по физлицу имеется 2 непрерывных записи с одинаковыми условиями труда, то объединим данные записи 
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ПараметрТерриториальныхУсловий = ПредшествующаяЗапись.ПараметрТерриториальныхУсловий
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			И ТекущаяЗапись.ТретийПараметрВыслугиЛет = ПредшествующаяЗапись.ТретийПараметрВыслугиЛет
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");
	
	Запрос.Текст = ПериодыДоговоровТекст;
	ТаблицаСтажаПоДоговорам = Запрос.Выполнить().Выгрузить();
	
	Н = ТаблицаСтажаПоДоговорам.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н];
		ПредшествующаяЗапись = ТаблицаСтажаПоДоговорам[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.ДатаНачалаПериода <= КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 // если записи идут друг за другом или пересекаются 
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = Макс(ТекущаяЗапись.ДатаОкончанияПериода, ПредшествующаяЗапись.ДатаОкончанияПериода); 
			ПредшествующаяЗапись.ДатаНачалаПериода = Мин(ТекущаяЗапись.ДатаНачалаПериода, ПредшествующаяЗапись.ДатаНачалаПериода); 
			ТаблицаСтажаПоДоговорам.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажаПоДоговорам.Сортировать("ФизЛицо,ДатаНачалаПериода");
	ПредшествующееФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	МассивСтрок = Новый Массив;
	СтрокСтажа = 0;
	СтруктураПоиска = Новый Структура("ФизЛицо");
	Н = ТаблицаСтажаПоДоговорам.Количество();
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н - 1];
		
		Если ТекущаяЗапись.ФизЛицо <> ПредшествующееФизЛицо Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущаяЗапись);
			МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
			ПредшествующееФизЛицо = ТекущаяЗапись.ФизЛицо;
		КонецЕсли;
		
		СтрокСтажа = МассивСтрок.Количество();
		Если СтрокСтажа = 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаСтажа.Добавить(),ТекущаяЗапись);
			Н = Н - 1;
			Продолжить;
		КонецЕсли;
		
		ДатаНачалаПериода = НачалоДня(ТекущаяЗапись.ДатаНачалаПериода);
		ДатаОкончанияПериода = КонецДня(ТекущаяЗапись.ДатаОкончанияПериода);
		
		Для Сч = 1 По СтрокСтажа Цикл
			
			СтрокаСтажа = МассивСтрок[СтрокСтажа - Сч];
			ДатаНачалаСтрокиСтажа = НачалоДня(СтрокаСтажа.ДатаНачалаПериода);
			ДатаОкончанияСтрокиСтажа = КонецДня(СтрокаСтажа.ДатаОкончанияПериода);
			
			Если ДатаНачалаСтрокиСтажа > ДатаОкончанияПериода Тогда
			ИначеЕсли ДатаНачалаСтрокиСтажа > ДатаНачалаПериода Тогда
				Если ДатаОкончанияСтрокиСтажа < ДатаОкончанияПериода Тогда
					НоваяСтрока = ТаблицаСтажа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяЗапись);
					НоваяСтрока.ДатаНачалаПериода = ДатаОкончанияСтрокиСтажа + 1;
					НоваяСтрока.ДатаОкончанияПериода = ДатаОкончанияПериода;
				КонецЕсли;
				ДатаОкончанияПериода = НачалоДня(СтрокаСтажа.ДатаНачалаПериода - 1);
			Иначе
				Если ДатаОкончанияСтрокиСтажа >= ДатаНачалаПериода Тогда
					ДатаНачалаПериода = ДатаОкончанияСтрокиСтажа + 1;
				КонецЕсли;
				Прервать;
			КонецЕсли;
			МассивСтрок.Удалить(СтрокСтажа - Сч);
		КонецЦикла;
		
		Если ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
			НоваяСтрока = ТаблицаСтажа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяЗапись);
			НоваяСтрока.ДатаНачалаПериода = ДатаНачалаПериода;
			НоваяСтрока.ДатаОкончанияПериода = ДатаОкончанияПериода;
		КонецЕсли;
		
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");
	
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ПараметрТерриториальныхУсловий = ПредшествующаяЗапись.ПараметрТерриториальныхУсловий
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			И ТекущаяЗапись.ТретийПараметрВыслугиЛет = ПредшествующаяЗапись.ТретийПараметрВыслугиЛет
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажа = ПроцедурыПерсонифицированногоУчетаПолныеПрава.ВписатьКатегорииВДанныеСтажа(ОбособленноеПодразделение, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, ТаблицаСтажа);
	
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.КатегорияЗастрахованныхЛиц = ПредшествующаяЗапись.КатегорияЗастрахованныхЛиц
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ПараметрТерриториальныхУсловий = ПредшествующаяЗапись.ПараметрТерриториальныхУсловий
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			И ТекущаяЗапись.ТретийПараметрВыслугиЛет = ПредшествующаяЗапись.ТретийПараметрВыслугиЛет
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	Возврат ТаблицаСтажа;
	
КонецФункции

//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-6
// Функция в параметре РезультатВыборкиЗаписей возвращает результат запроса выборки записей стажа
Функция СЗВ6_ПроверитьНаборЗаписейОСтаже(ИнициаторВызова, ТаблицаФизлиц, РезультатВыборкиЗаписей = "", ВыводитьСообщенияВОбработчикСообщений = Ложь, СообщенияРазделПроверки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсточникДанных",	ТаблицаФизлиц);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.ФизЛицо КАК ФизЛицо,
	|	ТЧ.Организация,
	|	ТЧ.КатегорияЗастрахованныхЛиц,
	|	ТЧ.ОтчетныйПериод,
	|	НЕОПРЕДЕЛЕНО КАК ПоляДляФайла
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&ИсточникДанных КАК ТЧ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Если ИнициаторВызова = "НаборЗаписей" Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ПоляДляФайла","1 КАК ПоляДляФайла")
	Иначе 
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ПоляДляФайла",
												"ТЧ.АдресДляИнформирования,
												|	ТЧ.СтраховойНомерПФР,
												|	ТЧ.Фамилия,
												|	ТЧ.Имя,
												|	ТЧ.Отчество,
												|	ТЧ.НачисленоСтраховая,
												|	ТЧ.УплаченоСтраховая,
												|	ТЧ.НачисленоНакопительная,
												|	ТЧ.УплаченоНакопительная,
												|	ТЧ.ДатаСоставления");
	КонецЕсли;	
	Запрос.Выполнить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрг.ФизЛицо КАК ФизЛицо,
	|	ТЧРаботникиОрг.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ТЧРаботникиОрг.Организация,
	|	ТЧРаботникиОрг.ОтчетныйПериод КАК ОтчетныйПериод,
	|	НЕОПРЕДЕЛЕНО КАК ПоляДляФайла,
	|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаписиОСтаже.Год КАК Год,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрг.ОтчетныйПериод < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ЗаписиОСтаже.ОсобыеУсловияТруда.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОсобыеУсловияТруда.КодДляОтчетности2010
	|	КОНЕЦ КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЕСТЬNULL(ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа, 0) КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЕСТЬNULL(ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа, 0) КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрг.ОтчетныйПериод < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ЗаписиОСтаже.ОснованиеВыслугиЛет.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОснованиеВыслугиЛет.КодДляОтчетности2010
	|	КОНЕЦ КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
	|		ПО ТЧРаботникиОрг.ФизЛицо = ЗаписиОСтаже.ФизЛицо
	|			И ТЧРаботникиОрг.Организация = ЗаписиОСтаже.ОбособленноеПодразделение
	|			И ТЧРаботникиОрг.ОтчетныйПериод = ЗаписиОСтаже.ОтчетныйПериод
	|			И ТЧРаботникиОрг.КатегорияЗастрахованныхЛиц = ЗаписиОСтаже.КатегорияЗастрахованныхЛиц
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";

	Если ИнициаторВызова = "НаборЗаписей" Тогда
		Запрос.Текст = ТекстЗапроса;
	Иначе 
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ПоляДляФайла",
												"ТЧРаботникиОрг.АдресДляИнформирования КАК АдресДляИнформирования,
												|	ТЧРаботникиОрг.Фамилия КАК Фамилия,
												|	ТЧРаботникиОрг.Имя КАК Имя,
												|	ТЧРаботникиОрг.Отчество КАК Отчество,
												|	ТЧРаботникиОрг.НачисленоСтраховая,
												|	ТЧРаботникиОрг.УплаченоСтраховая,
												|	ТЧРаботникиОрг.НачисленоНакопительная,
												|	ТЧРаботникиОрг.СтраховойНомерПФР,
												|	ТЧРаботникиОрг.УплаченоНакопительная,
												|	ТЧРаботникиОрг.ДатаСоставления,
												|	ТЧРаботникиОрг.Фамилия + "" "" + ТЧРаботникиОрг.Имя + "" "" + ТЧРаботникиОрг.Отчество КАК ФизЛицоНаименование");
	КонецЕсли;	
	
	РезультатВыборкиЗаписей = Запрос.Выполнить(); 
	ВыборкаЗаписей = РезультатВыборкиЗаписей.Выбрать();
	
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	ДопустимыеЗначенияТретьегоПараметра = Новый Соответствие;
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕКРЕТ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕТИ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("АДМИНИСТР", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ВРНЕТРУД", Истина);
	СтрокаДопустимыхЗначений = "";
	Для каждого Значение Из ДопустимыеЗначенияТретьегоПараметра Цикл
		СтрокаДопустимыхЗначений = СтрокаДопустимыхЗначений + ?(ЗначениеЗаполнено(СтрокаДопустимыхЗначений),", ","") + Значение.Ключ;
	КонецЦикла;
	
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("НомерСтроки") Цикл // по наборам ФизЛицо + КатегорияЗастрахованныхЛиц + Организация + ОтчетныйПериод
		
		Если Не ЗначениеЗаполнено(ВыборкаЗаписей.ОбособленноеПодразделение) Тогда // записей о стаже нет
			Продолжить;
		КонецЕсли;
		
		ФизЛицо = ВыборкаЗаписей.ФизЛицо;
		ОбособленноеПодразделение = ВыборкаЗаписей.ОбособленноеПодразделение;
		НачалоПериода = ВыборкаЗаписей.ОтчетныйПериод;
		КонецПериода = ОкончаниеОтчетногоПериодаПерсучета(НачалоПериода);
		
		ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, ОбособленноеПодразделение, Год, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
		
		//Список значений группы реквизитов территориальные условия одной основной записи
		СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
		
		//Список значений кодов условий труда одной основной записи
		СписокУсловияТрудаЗаписи = Новый СписокЗначений;
		
		//Список значений кодов выслуги лет основной записи
		СписокВыслугаЛетЗаписи = Новый СписокЗначений;
		
		ПредыдущийНомерОсновнойЗаписи = 0;
		ПредыдущийНомерДополнительнойЗаписи = 0;
		
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			Запись = ВыборкаЗаписей;
			
			//Организация, физлицо и год должны быть заполнены обязательно
			Если Запись.ОбособленноеПодразделение.Пустая() Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указана организация (обособленное подразделение)!");
			КонецЕсли;	
			Если Запись.ФизЛицо.Пустая() Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указано физическое лицо!");
			КонецЕсли;	
			
			// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
			
			//По умолчанию считаем, что запись основная
			ЭтоОсновнаяЗапись = Истина;
			
			//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
			ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
			
			//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
			Если Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) и Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
				Если ДополнительнаяЗаписьВозможна Тогда
					ЭтоОсновнаяЗапись = Ложь;
				Иначе
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указаны даты начала и окончания периода!");
				КонецЕсли;	
			ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты окончания периода необходимо указывать дату начала периода!");
			ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты начала периода необходимо указавать дату окончания периода!");
			Иначе//Обе даты заполнены
				
				//Дата начала периода не должна быть ранее начала периода
				Если Запись.ДатаНачалаПериода < НачалоПериода Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть не ранее начала периода: " + Формат(НачалоПериода,"ДФ=dd.MM.yyyy") + "!");
				КонецЕсли;	 
				
				//Дата окончания периода не должна быть позднее окончания периода
				Если Запись.ДатаОкончанияПериода > КонецПериода Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата окончания периода должна быть не позднее окончания периода: " + Формат(КонецПериода,"ДФ=dd.MM.yyyy") + "!");
				КонецЕсли;	 
				
				// Начало периода не должно быть позже окончания периода 
				Если Запись.ДатаНачалаПериода > Запись.ДатаОкончанияПериода Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода не должна превышать дату окончания периода!");
				КонецЕсли;
				
			КонецЕсли;	 
			
			//Проверка только для основной записи о стаже
			Если ЭтоОсновнаяЗапись Тогда
				
				//Проверка на хронологический порядок записей
				Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено Тогда
					Если Запись.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
					КонецЕсли;	 
				КонецЕсли;
				
				//Переустановка текущей основной записи
				ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
				ТекущаяОсновнаяЗапись.Год = Запись.Год;
				ТекущаяОсновнаяЗапись.ОбособленноеПодразделение = ОбособленноеПодразделение;
				ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
				ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
				ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
				ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
				ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
				ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
				ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
				ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
				ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
				
				СписокТерриториальныеУсловияЗаписи.Очистить();
				СписокУсловияТрудаЗаписи.Очистить();
				СписокВыслугаЛетЗаписи.Очистить();
			КонецЕсли;	 
			
			// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
			
			//Проверка нумерации основных и дополнительных записей
			Если ЭтоОсновнаяЗапись Тогда
				ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
				Если (Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");;
				КонецЕсли;
			Иначе
				ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
				Если (Запись.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер дополнительной записи. Ожидается номер: "+ОжидаемыйНомерДополнительнойЗаписи+"!", ТекущаяОсновнаяЗапись);;
				КонецЕсли;
			КонецЕсли;
			
			
			//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
			
			//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
			УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловияКод);
			УказанаСтавкаТерриториальныхУсловий = ЗначениеЗаполнено(Запись.ТерриториальныеУсловияСтавка);
			
			//Признаки заполнения реквизитов группы "Особые условия труда"
			УказанКодПозицииСписка = ЗначениеЗаполнено(Запись.КодПозицииСпискаКод);
			УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТрудаКод);
			ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
			
			//Признаки заполнения реквизитов группы "Исчисляемый стаж"
			УказаноОснованиеИсчисляемогоСтажа = ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажаКод);
			УказанТретийПараметрИсчисляемогоСтажа = ЗначениеЗаполнено(Запись.ТретийПараметрИсчисляемогоСтажа);
			ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
			
			//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
			УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0); 
			УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0); 
			ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
			
			//Признаки заполнения реквизитов группы "ВыслугаЛет"
			УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛетКод);
			ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
			
			
			//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
			
			Если НЕ ЭтоОсновнаяЗапись Тогда
				СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
			КонецЕсли;	 
			
			// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
			
			Если УказаныТерриториальныеУсловия Тогда
				ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод);
				Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если УказаныОсобыеУсловияТруда Тогда
				ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
				Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если УказаноОснованиеВыслугиЛет Тогда
				ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
				Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;	 
			КонецЕсли;	
			
			//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
			
			КПС = СокрЛП(Запись.КодПозицииСпискаКод);
			
			//Определим, к какому списку принадлежит код позиции
			НазваниеСписка ="";
			Если УказанКодПозицииСписка Тогда 
				
				Если НЕ УказаныОсобыеУсловияТруда Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	 
				
				ДлинаКПС = СтрДлина(КПС);
				
				Если (ДлинаКПС=8)или(ДлинаКПС=14) Тогда
					
					Первые2СимволаКПС = Лев(КПС,2);
					Если (Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12") Тогда
						НазваниеСписка = "Список№1";
					ИначеЕсли (Первые2СимволаКПС >= "20")и(Первые2СимволаКПС <= "23") Тогда
						НазваниеСписка = "Список№2";
					Иначе	
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный код позиции списка вредных профессий!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
				ИначеЕсли (ДлинаКПС=5) Тогда
					НазваниеСписка = "ПрочиеСписки";
				Иначе	
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	 
			КонецЕсли;//УказанКодПозицииСписка	 
			
			Если УказаныОсобыеУсловияТруда Тогда
				
				//Проверки на возможные коды списков для конкретных условий труда
				
				КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
				Первые8СимволовКПС = ВРЕГ(Лев(КПС,8));
				НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
				
				Если Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_1 Тогда
					Если (НазваниеСписка <> "Список№1") Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_2 Тогда
					
					Если (НЕ УказанКодПозицииСписка) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен быть указан код позиции Списка №1 или Списка №2!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
					Если (НазваниеСписка = "Список№1") Тогда
						Если (Первые8СимволовКПС <> "1010300Б")и(Первые8СимволовКПС <> "1010100Г")и(Первые8СимволовКПС <> "1010100Д")  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	
					ИначеЕсли (НазваниеСписка <> "Список№2") Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
				Иначе
					//Для остальных кодов условий труда КПС указываться не должен
					Если УказанКодПозицииСписка Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
				КонецЕсли;	 
				
			КонецЕсли;//УказаныОсобыеУсловияТруда	 
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
			
			УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
			УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
			УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
			ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
			
			Если УказаноОснованиеВыслугиЛет Тогда
				
				КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
				НачалоСообщения = "Для основания выслуги лет " + КодОснования;
				
				УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
				
				//Медицинские работники
				Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГД)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМХР)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР) Тогда
					
					Если НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
					ИначеЕсли НЕ УказанТолькоТретийПараметр Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен указываться только третий параметр!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
					//Педагогические работники	
				ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПД Тогда
					
					Если УказанПараметр2 Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " второй параметр указываться не должен!", ТекущаяОсновнаяЗапись);
					ИначеЕсли НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
				ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПДРК Тогда
					
					Если (УказанПараметр2) или (УказанПараметр3) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " может быть указан только первый параметр!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
					//Летчики
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.САМОЛЕТ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.СПЕЦАВ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСИСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЛЕТИСП) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИНСПЕКТ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ОПЫТИСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИСПКЛС1)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСМАВ)Тогда
					
					Если  УказанПараметр3 Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
					Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (часы и минуты)!", ТекущаяОсновнаяЗапись);
					КонецЕслИ;	
					
					//Парашютисты	
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.РЕАКТИВН)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМАПР) Тогда	
					
					Если (УказанПараметр2) ИЛИ (УказанПараметр3) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 2 и 3 указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
					//Управление воздушным движением и  инженерно-технический состав 	
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_14)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15) Тогда
					
					Если  УказанПараметр3 Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
					//Прочие коды выслуги лет	
				Иначе
					Если ПараметрыУказаны Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры выслуги лет 1,2,3 указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
				КонецЕсли;	 
			Иначе
				Если ПараметрыУказаны Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись," Параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	 
			КонецЕсли;	 
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
			
			Если УказанТретийПараметрИсчисляемогоСтажа Тогда
				Если ДопустимыеЗначенияТретьегоПараметра.Получить(Запись.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать одно из значений: " + СтрокаДопустимыхЗначений + "!", ТекущаяОсновнаяЗапись);
				ИначеЕсли (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") Тогда
					Если (УказаноОснованиеИсчисляемогоСтажа) ИЛИ (ЗаданаГруппаФОВ) ИЛИ (УказаноОснованиеВыслугиЛет)  Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании третьего параметра исчисляемого стажа следующие группы реквизитов должны быть пустыми:		
						| Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					Если ((ЗаданаГруппаУсловияТруда)ИЛИ(УказаныТерриториальныеУсловия)) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения ДЕТИ группы реквизитов 
						|""Условия труда, Территориальные условия"" указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли; 
				КонецЕсли;	 
			КонецЕсли;	 
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
			
			Если ЗаданаГруппаФОВ Тогда
				Если Не УказаныОсобыеУсловияТруда И Не УказаноОснованиеИсчисляемогоСтажа И Не УказаныТерриториальныеУсловия  Тогда
					СтрОшибка = " Параметры фактически отработанного времени должны указываться только при заполнении других групп реквизитов"
					+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
				ИначеЕсли Не УказаныОсобыеУсловияТруда И Не УказаноОснованиеИсчисляемогоСтажа И УказанаСтавкаТерриториальныхУсловий Тогда
					СтрОшибка = " Параметры фактически отработанного времени для территориальных условий не должны указываться при заданной ставке!";
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
				КонецЕсли;	
				
				Если Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
					
					Если Запись.ПервыйПараметрИсчисляемогоСтажа > 11 Тогда
						СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	 	
					Если Запись.ВторойПараметрИсчисляемогоСтажа > 30 Тогда
						СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	 	
					
					Лет = 0;
					Месяцев = 0;
					Дней = 0;
					ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);			
					ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
					КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
					ФОВДляСравнения = Запись.ПервыйПараметрИсчисляемогоСтажа *30 + Запись.ВторойПараметрИсчисляемогоСтажа; 
					
					Если (ФОВДляСравнения > КалендарноеВремя) Тогда
						СтрОшибка = "Указанное фактически отработанное время превышает календарное время!";
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	
				КонецЕсли;	 
				
			КонецЕсли;	 
			
			//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
			
			//Запомним для следующей итерации
			ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
			ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
			
		КонецЦикла;//Цикл по записям стажа текущего физлица за год
		
	КонецЦикла;
	
	СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, ТаблицаФизлиц, ТаблицаПлохихЗаписей);
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 Тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже", ВыводитьСообщенияВОбработчикСообщений, СообщенияРазделПроверки);
		Возврат Ложь
	Иначе	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ФормированиеСведенийОСтажеC2010(ДатаНачалаПериодаЗаполнения, Организация, СписокФизЛиц = Неопределено) Экспорт
	
	ЗаполнятьСтаж = НастройкаПравДоступаПереопределяемый.ДоступнаРольКадровикаРегл();
	
	Если Не ЗаполнятьСтаж Тогда
		Возврат	
	КонецЕсли;
	
	ДатаОкончанияПериодаЗаполнения = ОкончаниеОтчетногоПериодаПерсучета(ДатаНачалаПериодаЗаполнения);
	
	ТаблицаСтажа = СЗВ6_ПолучитьДанныеДляЗаполненияСтажа(Организация, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, СписокФизЛиц);

	ТаблицаИзмерений = ТаблицаСтажа.Скопировать(,"ФизЛицо,КатегорияЗастрахованныхЛиц");
	ТаблицаИзмерений.Свернуть("ФизЛицо,КатегорияЗастрахованныхЛиц");
	ТаблицаФизлиц = ТаблицаИзмерений.Скопировать(,"ФизЛицо");
	ТаблицаФизлиц.Свернуть("ФизЛицо");
	
	НаборЗаписейОСтаже = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей();
	НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Значение = Организация;
	НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Использование = Истина;
	НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Значение = ДатаНачалаПериодаЗаполнения;
	НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Использование = Истина;
	НаборЗаписейОСтаже.Отбор.ФизЛицо.Использование = Истина;
	
	СтруктураПоиска = Новый Структура("ФизЛицо, КатегорияЗастрахованныхЛиц");
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ОЧИСТКА СТАРЫХ ЗАПИСЕЙ О СТАЖЕ, ЗАПИСЕЙ О ВЗНОСАХ И ДОБАВЛЕНИЕ НОВЫХ ЗАПИСЕЙ ДОЛЖНО ПРОИСХОДИТЬ В РАМКАХ ОДНОЙ ТРАНЗАКЦИИ
	
	НачатьТранзакцию();
	
	// очистим то, что было
	Для каждого СтрокаФизЛица Из ТаблицаФизлиц Цикл
	
		// Установим отбор записей в наборе по выбранному работнику
		НаборЗаписейОСтаже.Отбор.ФизЛицо.Значение = СтрокаФизЛица.ФизЛицо;
		НаборЗаписейОСтаже.Записать(); 
		
	КонецЦикла;
	
	НаборЗаписейОСтаже.Отбор.КатегорияЗастрахованныхЛиц.Использование = Истина;
	
	// Загрузим полученные данные в наборы записей 
	Для каждого СтрокаИзмерений Из ТаблицаИзмерений Цикл
	
		НаборЗаписейОСтаже.Отбор.ФизЛицо.Значение = СтрокаИзмерений.ФизЛицо;
		НаборЗаписейОСтаже.Отбор.КатегорияЗастрахованныхЛиц.Значение = СтрокаИзмерений.КатегорияЗастрахованныхЛиц;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаИзмерений);
		
		МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписейОСтаже.Добавить(),СтрокаТаблицы)
		КонецЦикла; 
		
		// Пронумеруем основные записи о стаже
		НомерЗаписи = 0;
		Для Каждого Запись из НаборЗаписейОСтаже Цикл
			НомерЗаписи = НомерЗаписи + 1;
			Запись.НомерОсновнойЗаписи = НомерЗаписи;
		КонецЦикла; 
		
		// Запишем записи стажа в режиме добавления (при записи набора происходит проверка записей стажа)
		Попытка
			НаборЗаписейОСтаже.Записать();
		Исключение
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
		НаборЗаписейОСтаже.Очистить();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ФормированиеСведенийОСтажеC2010()
