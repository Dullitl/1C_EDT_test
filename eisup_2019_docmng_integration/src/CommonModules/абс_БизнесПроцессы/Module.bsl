
// Процедуры поиска бизнес-процессов и задач

//АБС_Родин
Функция НайтиБизнесПроцессПоЗаявкеНаИзменениеПрав(Заявка) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	абсБП.Ссылка
	|ИЗ
	|	БизнесПроцесс.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО КАК абсБП
	|ГДЕ
	|	абсБП.ЗаявкаНаДобавлениеПрав = &Заявка
	|	И абсБП.Завершен = ЛОЖЬ
	|	И (НЕ абсБП.ЗаявкаНаДобавлениеПрав = ЗНАЧЕНИЕ(Документ.абс_ЗаявкаНаДобавлениеИзменениеПрав.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	абсБП.Дата УБЫВ");
	
	ЗапросБП.УстановитьПараметр("Заявка", Заявка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
	
КонецФункции

Функция НайтиБизнесПроцессПоОС(ОС)  Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абс_СогласованиеОС.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс.абс_СогласованиеОС КАК абс_СогласованиеОС
	                        |ГДЕ
	                        |	абс_СогласованиеОС.Завершен = ЛОЖЬ
	                        |	И абс_СогласованиеОС.ОсновноеСредство = &ОС
	                        |	И НЕ абс_СогласованиеОС.ОсновноеСредство = ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абс_СогласованиеОС.Дата УБЫВ");
	
	ЗапросБП.УстановитьПараметр("ОС", ОС);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
	
КонецФункции

//ВСТАВКА Проектный учет 191213 Родин	
Функция НайтиБизнесПроцессПоТЭО(ТЭО)  Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абс_СогласованиеТЭО.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс.абс_СогласованиеТЭО КАК абс_СогласованиеТЭО
	                        |ГДЕ
	                        |	абс_СогласованиеТЭО.Завершен = ЛОЖЬ
	                        |	И абс_СогласованиеТЭО.ТЭО = &ТЭО
	                        |	И НЕ абс_СогласованиеТЭО.ТЭО = ЗНАЧЕНИЕ(Справочник.абс_ТЭО.ПустаяСсылка)
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абс_СогласованиеТЭО.Дата УБЫВ");
	
	ЗапросБП.УстановитьПараметр("ТЭО", ТЭО);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
	
КонецФункции
//ВСТАВКА Проектный учет 191213 Родин	

//АБС_Родин

Функция НайтиБизнесПроцессПоКонтрагенту(КонтрагентСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.Контрагент = &Контрагент И
							|	абсБП.Завершен = ЛОЖЬ
							|	И (НЕ абсБП.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

Функция НайтиБизнесПроцессПоДоговору(ДоговорСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ДоговорКонтрагента = &ДоговорКонтрагента И
							|	абсБП.Завершен = ЛОЖЬ И
							|	(НЕ абсБП.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("ДоговорКонтрагента", ДоговорСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

Функция НайтиБизнесПроцессПоДоговоруПодряда(ДоговорСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ДоговорПодряда = &ДоговорПодряда И
							|	абсБП.Завершен = ЛОЖЬ И
							|	(НЕ абсБП.ДоговорПодряда = ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка))
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("ДоговорПодряда", ДоговорСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

Функция НайтиБизнесПроцессПоАктуПриёмки(АктСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.АктПриёмкиВыполненныхРабот = &АктСсылка И
							|	абсБП.Завершен = ЛОЖЬ И
							|	(НЕ абсБП.АктПриёмкиВыполненныхРабот = ЗНАЧЕНИЕ(Документ.Абс_АктПриёмкиВыполненныхРабот.ПустаяСсылка))
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("АктСсылка", АктСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

Функция НайтиБизнесПроцессПоНоменклатуре(НоменклатураСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.Номенклатура = &Номенклатура И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
			
КонецФункции

Функция НайтиБизнесПроцессПоНоменклатурнойГруппе(НоменклатурнаяГруппаСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.НоменклатурнаяГруппа = &НоменклатурнаяГруппа И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппаСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
			
КонецФункции

Функция НайтиБизнесПроцессПоСтатьеЗатрат(СтатьяЗатратСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.СтатьяЗатрат = &СтатьяЗатрат И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("СтатьяЗатрат", СтатьяЗатратСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
			
КонецФункции

Функция НайтиБизнесПроцессПоСтатьеПрочих(СтатьяПрочихСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.СтатьяПрочихДоходовИРасходов = &СтатьяПрочих И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("СтатьяПрочих", СтатьяПрочихСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
			
КонецФункции

Функция НайтиБизнесПроцессПоСчетуНаОплату(СчетНаОплатуСсылка, ИмяБизнесПроцесса, ТолькоНеЗавершенный = Истина) Экспорт
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.СчетНаОплату = &СчетНаОплату" 
							+ ?(ТолькоНеЗавершенный, " И абсБП.Завершен = ЛОЖЬ", "") + "
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("СчетНаОплату", СчетНаОплатуСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

Функция НайтиБизнесПроцессПоЗЗ(ЗЗСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ЗакупочныйЗаказ = &ЗЗ И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("ЗЗ", ЗЗСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

Функция НайтиБизнесПроцессПоРНП(РНПСсылка) Экспорт
	
	ИмяБизнесПроцесса = "абс_СогласованиеРПР";
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ДокументРПР = &РНП И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("РНП", РНПСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

Функция НайтиБизнесПроцессПоЗаявке(ЗаявкаСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ЗадачаВПоддержку = &Заявка И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("Заявка", ЗаявкаСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

Функция НайтиБизнесПроцессПоПервичномуДокументу(ПервичныйДокументСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ПервичныйДокумент = &ПервичныйДокумент И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("ПервичныйДокумент", ПервичныйДокументСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

Функция НайтиЗадачуКонтрагента(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено) Экспорт
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута В (&ТочкаМаршрута)
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
							   
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	ЗадачаСсылка = Неопределено;
	
	Если ВыборкаЗадач.Следующий() Тогда
		ЗадачаСсылка = ВыборкаЗадач.Ссылка;
	КонецЕсли;
	
	Возврат ЗадачаСсылка;
	
КонецФункции

Функция НайтиЗадачуИзмененияРеквизитов(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено) Экспорт
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
	//++ Задача № 11079 Логинчев А.С. 23.05.2012 17:21:29
	
	//ЗапросЗадач = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//						   |	абсЗадачаДоговора.Ссылка
	//						   |ИЗ
	//						   |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	//						   |ГДЕ
	//						   |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	//						   |	И абсЗадачаДоговора.ТочкаМаршрута В (&ТочкаМаршрута)
	//						   |
	//						   |УПОРЯДОЧИТЬ ПО
	//						   |	абсЗадачаДоговора.Дата УБЫВ");
	//
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                           |	абсЗадачаДоговора.Ссылка,
	                           |	ВЫБОР
	                           |		КОГДА абсЗадачаДоговора.Исполнитель = &Исполнитель
	                           |			ТОГДА ИСТИНА
	                           |		ИНАЧЕ ЛОЖЬ
	                           |	КОНЕЦ КАК ТекущийПользователь
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута В(&ТочкаМаршрута)
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	ТекущийПользователь УБЫВ,
	                           |	абсЗадачаДоговора.Дата УБЫВ");
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	//-- Задача № 11079 Логинчев А.С.
	
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	//ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	ЗадачаСсылка = Неопределено;
	
	Если ВыборкаЗадач.Следующий() Тогда
		ЗадачаСсылка = ВыборкаЗадач.Ссылка;
	КонецЕсли;
	
	Возврат ЗадачаСсылка;
	
КонецФункции

Функция НайтиЗадачуЗЗ(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено, ОтборПоИсполнителю = Истина) Экспорт
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ " + ?(ОтборПоИсполнителю, "
							   |	абсЗадачаДоговора.Исполнитель = &Исполнитель И ", "") + "
							   |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута В (&ТочкаМаршрута)
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
							   
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	ЗадачаСсылка = Неопределено;
	
	Если ВыборкаЗадач.Следующий() Тогда
		ЗадачаСсылка = ВыборкаЗадач.Ссылка;
	КонецЕсли;
	
	Возврат ЗадачаСсылка;	
	
КонецФункции

Функция НайтиЗадачуСчетаНаОплату(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено) Экспорт
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута В (&ТочкаМаршрута)
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
							   
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	ЗадачаСсылка = Неопределено;
	
	Если ВыборкаЗадач.Следующий() Тогда
		ЗадачаСсылка = ВыборкаЗадач.Ссылка;
	КонецЕсли;
	
	Возврат ЗадачаСсылка;	
	
КонецФункции

Функция НайтиЗадачуПоддержки(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено, ОтборПоИсполнителю = Истина) Экспорт
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ " + ?(ОтборПоИсполнителю, "
							   |	абсЗадачаДоговора.Исполнитель = &Исполнитель И ", "") + "
							   |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута В (&ТочкаМаршрута)
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
							   
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	ЗадачаСсылка = Неопределено;
	
	Если ВыборкаЗадач.Следующий() Тогда
		ЗадачаСсылка = ВыборкаЗадач.Ссылка;
	КонецЕсли;
	
	Возврат ЗадачаСсылка;	
	
КонецФункции

Функция НайтиЗадачуПоЗаявкеНаЗаведениеДоговора(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено) Экспорт
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	

	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                           |	абсЗадачаДоговора.Ссылка,
	                           |	ВЫБОР
	                           |		КОГДА абсЗадачаДоговора.Исполнитель = &Исполнитель
	                           |			ТОГДА ИСТИНА
	                           |		ИНАЧЕ ЛОЖЬ
	                           |	КОНЕЦ КАК ТекущийПользователь
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута В(&ТочкаМаршрута)
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	ТекущийПользователь УБЫВ,
	                           |	абсЗадачаДоговора.Дата УБЫВ");
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	ЗадачаСсылка = Неопределено;
	
	Если ВыборкаЗадач.Следующий() Тогда
		ЗадачаСсылка = ВыборкаЗадач.Ссылка;
	КонецЕсли;
	
	Возврат ЗадачаСсылка;
	
КонецФункции

Функция НайтиБизнесПроцессПоРекласификации(РекласификацияСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.РекласификацияБюджета = &РекласификацияБюджетаСсылка И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("РекласификацияБюджетаСсылка", РекласификацияСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

Функция НайтиБизнесПроцессПоВводуБюджета(ВводБюджетаСсыла, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ДокументВводаБюджета = &ВводБюджетаСсыла И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("ВводБюджетаСсыла", ВводБюджетаСсыла);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

Функция НайтиБизнесПроцессИзмененияРеквизитовКонтрагента(ЗаявкаНаИзменениеРеквизитов, ИмяБизнесПроцесса = "абсИзменениеРеквизитовКонтрагентов") Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ЗаявкаНаИзменениеРеквизитов = &ЗаявкаНаИзменениеРеквизитов И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("ЗаявкаНаИзменениеРеквизитов", ЗаявкаНаИзменениеРеквизитов);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
	
КонецФункции

Функция НайтиБизнесПроцессПоЗаявкеНаЗаведениеДоговора(ЗаявкаНаЗаведениеДоговора, ИмяБизнесПроцесса = "абс_СогласованиеЗаявкиНаЗаведениеДоговора") Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ЗаявкаНаДоговор = &ЗаявкаНаИзменениеРеквизитов И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("ЗаявкаНаИзменениеРеквизитов", ЗаявкаНаЗаведениеДоговора);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
	
КонецФункции

// Вовращает массив доступных ролей пользователя по регистру "Роли и исполнители"
Функция ПолучитьСписокДоступныхРолейПользователя(ТекПользователь = Неопределено, Организация = Неопределено) Экспорт
	
	Если ТекПользователь = Неопределено Тогда
		ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
// {{KM WARE Семенов И.С. Заявка №  15.07.2015 начало
// ускорение
	Возврат kwr_ОбщиеСерверКлиентПовтИсп.ПолучитьСписокДоступныхРолейПользователя(ТекПользователь, Организация);
// }}KM WARE Семенов И.С. Заявка №  15.07.2015 окончание
	
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//					  |	РолиИИсполнители.Роль
	//					  |ИЗ
	//					  |	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	//					  |ГДЕ
	//					  |	РолиИИсполнители.Исполнитель = &ТекПользователь
	//					  |	И ВЫБОР
	//					  |			КОГДА &ОтборПоОрганизации
	//					  |				ТОГДА РолиИИсполнители.Организация = &Организация
	//					  |			ИНАЧЕ ИСТИНА
	//					  |		КОНЕЦ
	//					  //АБС ВСТАВКА №44882 НАЧАЛО «26 июня 2014 г.», Пополитов
	//					  |	И РолиИИсполнители.Роль <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
	//					  //\\АБС ВСТАВКА №44882 КОНЕЦ  	             
	//					  |
	//					  |СГРУППИРОВАТЬ ПО
	//					  |	РолиИИсполнители.Роль");
	//Запрос.УстановитьПараметр("ТекПользователь", ТекПользователь);
	//
	//Запрос.УстановитьПараметр("ОтборПоОрганизации", НЕ Организация = Неопределено);
	//Запрос.УстановитьПараметр("Организация", Организация);
	//
	//Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Роль");
	
КонецФункции

Функция ПолучитьДоступныеОрганизацииПоРоли(Роль,Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиИИсполнители.Исполнитель
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Исполнитель = &Исполнитель
	|	И РолиИИсполнители.Роль В(&Роль)";
	
	Запрос.УстановитьПараметр("Исполнитель", Пользователь);
	Запрос.УстановитьПараметр("Роль", Роль);
	
	Возврат Запрос.Выполнить().Выгрузить().Количество() > 0;	
	
КонецФункции


Функция ПолучитьСтатусКонтрагентаПоРегистру(КонтрагентСсылка, ПериодСтатуса = Неопределено) Экспорт
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовКонтрагентовСрезПоследних.СтатусКонтрагента,
	                            |	абс_ИзменениеСтатусовКонтрагентовСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовКонтрагентов.СрезПоследних(&Период, Контрагент = &КонтрагентСсылка) КАК абс_ИзменениеСтатусовКонтрагентовСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
								
	Если ПериодСтатуса = Неопределено Тогда
		ПериодСтатуса = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
									
	ЗапросСтатус.УстановитьПараметр("Период"			, Новый Граница(ПериодСтатуса, ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("КонтрагентСсылка"	, КонтрагентСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусКонтрагента;
	КонецЕсли;
	
	Возврат ТекСтатус;
КонецФункции

Функция ПолучитьСтатусДебиторкиПоРегистру(КонтрагентСсылка) Экспорт
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзмененияСтатусовДебиторкиСрезПоследних.СтатусРабот,
	                            |	абс_ИзмененияСтатусовДебиторкиСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзмененияСтатусовДебиторки.СрезПоследних(&Период, Контрагент = &КонтрагентСсылка) КАК абс_ИзмененияСтатусовДебиторкиСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"			, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("КонтрагентСсылка"	, КонтрагентСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусРабот;
	КонецЕсли;
	
	Возврат ТекСтатус;
КонецФункции
          
Функция ПолучитьСтатусДоговораПоРегистру(ДоговорСсылка, ПериодСтатуса = Неопределено) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	ВЫБОР
	                            |		КОГДА абс_ИзменениеСтатусовДоговоровСрезПоследних.СтатусДоговора = ЗНАЧЕНИЕ(Перечисление.абсСтатусыДоговоров.согласованиеПДСменаОтветственного)
	                            |			ТОГДА ЗНАЧЕНИЕ(Перечисление.абсСтатусыДоговоров.согласованиеПД)
	                            |		ИНАЧЕ абс_ИзменениеСтатусовДоговоровСрезПоследних.СтатусДоговора
	                            |	КОНЕЦ КАК СтатусДоговора,
	                            |	абс_ИзменениеСтатусовДоговоровСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовДоговоров.СрезПоследних(&Период, Договор = &ДоговорСсылка) КАК абс_ИзменениеСтатусовДоговоровСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
								
	Если ПериодСтатуса = Неопределено Тогда
		ПериодСтатуса = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;								
								
	ЗапросСтатус.УстановитьПараметр("Период"		, Новый Граница(ПериодСтатуса, ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ДоговорСсылка"	, ДоговорСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусДоговора;
	КонецЕсли;
	
	Возврат ТекСтатус;
КонецФункции

Функция ПолучитьСтатусДоговораПодрядаПоРегистру(ДоговорСсылка, ПериодСтатуса = Неопределено) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовДоговоровСрезПоследних.СтатусДоговора КАК СтатусДоговора,
	                            |	абс_ИзменениеСтатусовДоговоровСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовДоговоровПодряда.СрезПоследних(&Период, Договор = &ДоговорСсылка) КАК абс_ИзменениеСтатусовДоговоровСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
								
	Если ПериодСтатуса = Неопределено Тогда
		ПериодСтатуса = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;								
								
	ЗапросСтатус.УстановитьПараметр("Период"		, Новый Граница(ПериодСтатуса, ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ДоговорСсылка"	, ДоговорСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусДоговора;
	КонецЕсли;
	
	Возврат ТекСтатус;
КонецФункции

Функция ПолучитьСтатусАктаПриёмкиПоРегистру(АктСсылка, ПериодСтатуса = Неопределено) Экспорт 
	
	ЗапросСтатус = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	абс_ИзменениеСтатусовАктовПриёмкиСрезПоследних.СтатусАкта КАК СтатусАкта,
	|	абс_ИзменениеСтатусовАктовПриёмкиСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.абс_ИзменениеСтатусовАктовПриёмки.СрезПоследних(&Период, АктПриёмкиВыполненныхРабот = &АктСсылка) КАК абс_ИзменениеСтатусовАктовПриёмкиСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ");
								
	Если ПериодСтатуса = Неопределено Тогда
		ПериодСтатуса = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;								
								
	ЗапросСтатус.УстановитьПараметр("Период"	, Новый Граница(ПериодСтатуса, ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("АктСсылка"	, АктСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусАкта;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция ПолучитьСтатусНоменклатурыПоРегистру(НоменклатураСсылка) Экспорт
	
	//абс Вставка контроль по реквизиту
	Попытка
		Если НоменклатураСсылка.абс_СтатусНоменклатуры.Пустая() Тогда
			Возврат  НоменклатураСсылка.абс_СтатусНоменклатуры;
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	
	//\\абс Вставка контроль по реквизиту
	
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовНоменклатурыСрезПоследних.СтатусНоменклатуры,
	                            |	абс_ИзменениеСтатусовНоменклатурыСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовНоменклатуры.СрезПоследних(&Период, Номенклатура = &НоменклатураСсылка) КАК абс_ИзменениеСтатусовНоменклатурыСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("НоменклатураСсылка"	, НоменклатураСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусНоменклатуры;
	КонецЕсли;
	
	Возврат ТекСтатус;	
	
КонецФункции

Функция ПолучитьСтатусНоменклатурнойГруппыПоРегистру(НоменклатурнаяГруппаСсылка) Экспорт
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовНоменклатурныхГруппСрезПоследних.СтатусНоменклатурнойГруппы,
	                            |	абс_ИзменениеСтатусовНоменклатурныхГруппСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовНоменклатурныхГрупп.СрезПоследних(&Период, НоменклатурнаяГруппа = &НоменклатурнаяГруппа) КАК абс_ИзменениеСтатусовНоменклатурныхГруппСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("НоменклатурнаяГруппа"	, НоменклатурнаяГруппаСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусНоменклатурнойГруппы;
	КонецЕсли;
	
	Возврат ТекСтатус;	
	
КонецФункции

Функция ПолучитьСтатусСтатьиЗатратПоРегистру(СтатьяЗатратСсылка) Экспорт
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовСтатейЗатратСрезПоследних.СтатусСтатьиЗатрат,
	                            |	абс_ИзменениеСтатусовСтатейЗатратСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовСтатейЗатрат.СрезПоследних(&Период, СтатьяЗатрат = &СтатьяЗатрат) КАК абс_ИзменениеСтатусовСтатейЗатратСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("СтатьяЗатрат"	, СтатьяЗатратСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусСтатьиЗатрат;
	КонецЕсли;
	
	Возврат ТекСтатус;	
	
КонецФункции

Функция ПолучитьСтатусСтатьиПрочихПоРегистру(СтатьяПрочихСсылка) Экспорт
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовСтатейПрочихДоходовИРасходовСрезПоследних.Период КАК Период,
	                            |	абс_ИзменениеСтатусовСтатейПрочихДоходовИРасходовСрезПоследних.СтатусСтатьи
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовСтатейПрочихДоходовИРасходов.СрезПоследних(&Период, СтатьяПрочихДоходовИРасходов = &СтатьяПрочих) КАК абс_ИзменениеСтатусовСтатейПрочихДоходовИРасходовСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("СтатьяПрочих"	, СтатьяПрочихСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусСтатьи;
	КонецЕсли;
	
	Возврат ТекСтатус;	
	
КонецФункции
        
Функция ПолучитьСтатусИТРПоРегистру(ИТРСсылка) Экспорт
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовИТРСрезПоследних.Статус,
	                            |	абс_ИзменениеСтатусовИТРСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовИТР.СрезПоследних(&Период, ИТР = &ИТРСсылка) КАК абс_ИзменениеСтатусовИТРСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ИТРСсылка"				, ИТРСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.Статус;
	КонецЕсли;
	
	Возврат ТекСтатус;	
	
КонецФункции

Функция ПолучитьСтатусЗЗПоРегистру(ЗЗСсылка) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних.СтатусЗакупочногоЗаказа,
	                            |	абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовЗакупочногоЗаказа.СрезПоследних(&Период, ЗакупочныйЗаказ = &ЗакупочныйЗаказСсылка) КАК абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ЗакупочныйЗаказСсылка"	, ЗЗСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусЗакупочногоЗаказа;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции
Функция ПолучитьПредыщущийСтатусЗЗПоРегистру(ЗЗСсылка) Экспорт 
	ЗапросПериод = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.абс_ИзменениеСтатусовЗакупочногоЗаказа.СрезПоследних(, ЗакупочныйЗаказ = &ЗакупочныйЗаказСсылка) КАК абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ");
	ЗапросПериод.УстановитьПараметр("ЗакупочныйЗаказСсылка"	, ЗЗСсылка);
	
	ВыборкаПериода = ЗапросПериод.Выполнить().Выбрать();
	ТекПериод = Неопределено;
	Если ВыборкаПериода.Следующий() Тогда
		ТекПериод = ВыборкаПериода.Период;
	КонецЕсли;
	
	
	
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних.СтатусЗакупочногоЗаказа,
	|	абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.абс_ИзменениеСтатусовЗакупочногоЗаказа.СрезПоследних(&Период, ЗакупочныйЗаказ = &ЗакупочныйЗаказСсылка) КАК абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(ТекПериод, ВидГраницы.Исключая));
	ЗапросСтатус.УстановитьПараметр("ЗакупочныйЗаказСсылка"	, ЗЗСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусЗакупочногоЗаказа;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция ПолучитьСтатусРПРПоРегистру(РПРСсылка) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_СогласованиеРПРСрезПоследних.СтатусРПР,
	                            |	абс_СогласованиеРПРСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_СогласованиеРПР.СрезПоследних(&Период, ДокументРПР = &РПРСсылка) КАК абс_СогласованиеРПРСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("РПРСсылка"	, РПРСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусРПР;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция ПолучитьСтатусСчетаНаОплатуПоРегистру(СчетНаОплатуСсылка) Экспорт
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовСчетаНаОплатуСрезПоследних.СтатусСчетаНаОплату,
	                            |	абс_ИзменениеСтатусовСчетаНаОплатуСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовСчетаНаОплату.СрезПоследних(&Период, СчетНаОплату = &СчетНаОплатуСсылка) КАК абс_ИзменениеСтатусовСчетаНаОплатуСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("СчетНаОплатуСсылка"	, СчетНаОплатуСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусСчетаНаОплату;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция ПолучитьСтатусПервичногоДокументаПоРегистру(ПервичныйДокументСсылка) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовПервичныхДокументовСрезПоследних.СтатусДокумента КАК СтатусДокумента,
	                            |	абс_ИзменениеСтатусовПервичныхДокументовСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовПервичныхДокументов.СрезПоследних(&Период, ПервичныйДокумент = &ПервичныйДокументСсылка) КАК абс_ИзменениеСтатусовПервичныхДокументовСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"					, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ПервичныйДокументСсылка"	, ПервичныйДокументСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	                                                              
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусДокумента;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция ПолучитьСтатусРекласификацииПоРегистру(РекласификацияБюджетаСсылка) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовРекласификацииБюджетаСрезПоследних.СтатусРекласификацииБюджета,
	                            |	абс_ИзменениеСтатусовРекласификацииБюджетаСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовРекласификацииБюджета.СрезПоследних(&Период, РекласификацияБюджета = &РекласификацияБюджетаСсылка) КАК абс_ИзменениеСтатусовРекласификацииБюджетаСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("РекласификацияБюджетаСсылка"	, РекласификацияБюджетаСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусРекласификацииБюджета;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция ПолучитьСтатусВводаБюджетаПоРегистру(ВводБюджетаСсыла) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовВводаБюджетаСрезПоследних.СтатусВводаБюджета,
	                            |	абс_ИзменениеСтатусовВводаБюджетаСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовВводаБюджета.СрезПоследних(&Период, ВводБюджета = &ВводБюджетаСсылка) КАК абс_ИзменениеСтатусовВводаБюджетаСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ВводБюджетаСсылка"	, ВводБюджетаСсыла);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусВводаБюджета;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция ПолучитьСтатусЗаявкиПоРегистру(ЗаявкаСсылка) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовЗаявокВПоддержкуСрезПоследних.Статус КАК СтатусЗаявки,
	                            |	абс_ИзменениеСтатусовЗаявокВПоддержкуСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовЗаявокВПоддержку.СрезПоследних(&Период, ЗаявкаВПоддержку = &ЗаявкаСсылка) КАК абс_ИзменениеСтатусовЗаявокВПоддержкуСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"					, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ЗаявкаСсылка"				, ЗаявкаСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусЗаявки;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция ПолучитьСтатусЗаявкиНаИзменениеПоРегистру(ЗаявкаСсылка) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовЗаявкиНаИзменениеРеквизитовСрезПоследних.СтатусЗаявки,
	                            |	абс_ИзменениеСтатусовЗаявкиНаИзменениеРеквизитовСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовЗаявкиНаИзменениеРеквизитов.СрезПоследних(&Период, Заявка = &ЗаявкаСсылка) КАК абс_ИзменениеСтатусовЗаявкиНаИзменениеРеквизитовСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ЗаявкаСсылка"			, ЗаявкаСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусЗаявки;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция ПолучитьСтатусЗаявкиНаЗаведениеДоговораПоРегистру(ЗаявкаСсылка) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовЗаявкиНаЗаведениеДоговоровСрезПоследних.СтатусЗаявки,
	                            |	абс_ИзменениеСтатусовЗаявкиНаЗаведениеДоговоровСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовЗаявкиНаЗаведениеДоговоров.СрезПоследних(&Период, Заявка = &ЗаявкаСсылка) КАК абс_ИзменениеСтатусовЗаявкиНаЗаведениеДоговоровСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ЗаявкаСсылка"			, ЗаявкаСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусЗаявки;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция ПолучитьСтатусМиграцииДоговоровПоРегистру(МиграцияСсылка) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	ttk_ИзменениеСтатусовМиграцииДоговоровСрезПоследних.Статус КАК Статус,
	                            |	ttk_ИзменениеСтатусовМиграцииДоговоровСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.ttk_ИзменениеСтатусовМиграцииДоговоров.СрезПоследних(&Период, ДокументМиграцииДоговоров = &МиграцияСсылка) КАК ttk_ИзменениеСтатусовМиграцииДоговоровСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"					, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("МиграцияСсылка"			, МиграцияСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.Статус;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

// Процедуры запуска бизнес-процессов 

// Бизнес-процессы по контрагентам
Функция ЗапуститьБПСогласованияКонтрагента(КонтрагентСсылка) Экспорт
	//
	//НачатьТранзакцию();
	//
	//Попытка 
	//	
		БП = БизнесПроцессы.абсСогласованиеКонтрагентов.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.Контрагент = КонтрагентСсылка;
		БП.ПользовательИнициаторБП = КонтрагентСсылка.абс_Ответственный;

		БП.Записать();
		
		ТочкаСтарта = Неопределено;
		
		//Если КонтрагентИзБиллинга(КонтрагентСсылка) Тогда
		//	ТочкаСтарта = БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.СтартКонтрагентИзБиллинга;
		//Иначе
			ТочкаСтарта = БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.СтартСозданиеНовогоКонтрагента;			
		//КонецЕсли;
		
		БП.Старт(ТочкаСтарта);
	//	
	//Исключение
	//	ОтменитьТранзакцию();
	//	
	//	Возврат Ложь;
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	//
	Возврат Истина;
	//Сообщить("Бизнес процесс " + БП.Ссылка + " согласования контрагента " + КонтрагентСсылка + " запущен.");

КонецФункции

Функция ЗапуститьБПЗавершенияКонтрагента(КонтрагентСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		БП = БизнесПроцессы.абсЗавершениеОтношенийСКонтрагентами.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.Контрагент = КонтрагентСсылка;
		БП.ПользовательИнициаторБП = глЗначениеПеременной("глТекущийПользователь");
		БП.Записать();
		
		БП.Старт(БизнесПроцессы.абсЗавершениеОтношенийСКонтрагентами.ТочкиМаршрута.СтартЗавершениеОтношений);
		
		//Сообщить("Бизнес процесс " + БП.Ссылка + " завершения отношений с контрагентом " + КонтрагентСсылка + " запущен.");	

	Исключение
		ОтменитьТранзакцию();
		
		Возврат Ложь;		
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
	
КонецФункции

Функция ЗапуститьБППереутвержденияКонтрагента(КонтрагентСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка 
		
		БП = БизнесПроцессы.абсПереутверждениеКонтрагентов.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.Контрагент = КонтрагентСсылка;
		БП.ПользовательИнициаторБП = глЗначениеПеременной("глТекущийПользователь");
		БП.Записать();
		
		БП.Старт(БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.СтартПереутверждение);
		
		//Сообщить("Бизнес процесс " + БП.Ссылка + " по переутвержденю контрагента " + КонтрагентСсылка + " запущен.");
		
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Ложь;		
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции

Функция ЗапуститьБПСменыРеквизитовКонтрагента(КонтрагентСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка 
			
		БП = БизнесПроцессы.абсПереутверждениеКонтрагентов.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.Контрагент = КонтрагентСсылка;
		БП.ПользовательИнициаторБП = глЗначениеПеременной("глТекущийПользователь");
		БП.Записать();
		
		БП.Старт(БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.СтартСменаРеквизитов);
		
		//Сообщить("Бизнес процесс " + БП.Ссылка + " смены реквизитов контрагента " + КонтрагентСсылка + " запущен.");
		
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Ложь;		
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции

Функция ЗапуститьБПИзмененияРеквизитовКонтрагента(ЗаявкаНаИменениеСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка 
		
		БП = БизнесПроцессы.абсИзменениеРеквизитовКонтрагентов.СоздатьБизнесПроцесс();
		
		БП.Дата 						= абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.Контрагент 					= ЗаявкаНаИменениеСсылка.Контрагент;
		БП.ПользовательИнициаторБП 		= глЗначениеПеременной("глТекущийПользователь");
		БП.ЗаявкаНаИзменениеРеквизитов 	= ЗаявкаНаИменениеСсылка;
		БП.Записать();
		
		БП.Старт(БизнесПроцессы.абсИзменениеРеквизитовКонтрагентов.ТочкиМаршрута.СтартСменаРеквизитов);
		
		//Сообщить("Бизнес процесс " + БП.Ссылка + " по переутвержденю контрагента " + КонтрагентСсылка + " запущен.");
		
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Ложь;		
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции

//АБС_Родин
//Бизнес-процессы по заявкам на изменение прав

Функция ЗапуститьБПСогласованияЗаявкиНаИзменениеПрав(Заявка) Экспорт
	
	//НачатьТранзакцию();
	Попытка 			
		БП = БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.СоздатьБизнесПроцесс();
		БП.Дата 					= абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ЗаявкаНаДобавлениеПрав 	= Заявка;
		БП.ПользовательИнициаторБП 	= Заявка.Ответственный;	
		БП.Записать();
		
		ТочкаСтарта = Неопределено;
		ТочкаСтарта = БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СтартСогласованияЗаявкиНаДобавлениеИзменениеПрав;
		БП.Старт(ТочкаСтарта);	
	Исключение
	//	ОтменитьТранзакцию();
		Возврат Ложь;		
	КонецПопытки;
	
	//ЗафиксироватьТранзакцию();
	
	Возврат Истина;	
	
КонецФункции
Функция ЗапуститьБПСогласованияОС(ОС) Экспорт
	
	//НачатьТранзакцию();
	Попытка 			
		БП = БизнесПроцессы.абс_СогласованиеОС.СоздатьБизнесПроцесс();
		БП.Дата 					= абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ОсновноеСредство 	= ОС;
		БП.ПользовательИнициаторБП 	= глЗначениеПеременной("глТекущийПользователь");	
		БП.Записать();
		
		ТочкаСтарта = Неопределено;
		ТочкаСтарта = БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СтартСогласованияОС;
		БП.Старт(ТочкаСтарта);	
	Исключение
	//	ОтменитьТранзакцию();
		Возврат Ложь;		
	КонецПопытки;
	
	//ЗафиксироватьТранзакцию();
	
	Возврат Истина;	
	
КонецФункции

//ВСТАВКА Проектный учет 191213 Родин	
Функция ЗапуститьБПСогласованияТЭО(ТЭО) Экспорт
	
	//НачатьТранзакцию();
	Попытка 			
		БП = БизнесПроцессы.абс_СогласованиеТЭО.СоздатьБизнесПроцесс();
		БП.Дата 					= абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ТЭО	= ТЭО;
		БП.ПользовательИнициаторБП 	= глЗначениеПеременной("глТекущийПользователь");	
		БП.Записать();
		
		ТочкаСтарта = Неопределено;
		ТочкаСтарта = БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.СтартСогласованияТЭО;
		БП.Старт(ТочкаСтарта);	
	Исключение
	//	ОтменитьТранзакцию();
		Возврат Ложь;		
	КонецПопытки;
	
	//ЗафиксироватьТранзакцию();
	
	Возврат Истина;	
	
КонецФункции
//ВСТАВКА Проектный учет 191213 Родин	

//абс Родин Лимитный контроль
Функция ПолучитьСтатусДоговораЛимитПоРегистру(ДоговорСсылка, ПериодСтатуса = Неопределено) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовЛимитовПоДоговоруСрезПоследних.Период КАК Период,
	                            |	абс_ИзменениеСтатусовЛимитовПоДоговоруСрезПоследних.Статус КАК СтатусДоговора
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовЛимитовПоДоговору.СрезПоследних(&Период, Договор = &ДоговорСсылка) КАК абс_ИзменениеСтатусовЛимитовПоДоговоруСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
								
	Если ПериодСтатуса = Неопределено Тогда
		ПериодСтатуса = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;								
								
	ЗапросСтатус.УстановитьПараметр("Период"		, Новый Граница(ПериодСтатуса, ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ДоговорСсылка"	, ДоговорСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусДоговора;
	КонецЕсли;
	
	Возврат ТекСтатус;
КонецФункции

Функция ЗапуститьБПСогласованияЛимитаДоговора(ДоговорСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка 			

		БП = БизнесПроцессы.абс_СогласованиеЛимитовДоговоров.СоздатьБизнесПроцесс();
		БП.Дата 					= абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ДоговорКонтрагента		= ДоговорСсылка;
		БП.ПользовательИнициаторБП 	= ДоговорСсылка.абс_Ответственный;	
		БП.Записать();
		
		ТочкаСтарта = Неопределено;		
		ТочкаСтарта = БизнесПроцессы.абс_СогласованиеЛимитовДоговоров.ТочкиМаршрута.Старт;
		
		БП.Старт(ТочкаСтарта);	
	
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Ложь;		
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;	
	
	
КонецФункции

Функция ЗапуститьБПСогласованияКорректировкиЛимитаДоговора(ДоговорСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка 			

		БП = БизнесПроцессы.абс_КорректировкаЛимитовДоговоров.СоздатьБизнесПроцесс();
		БП.Дата 					= абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ДоговорКонтрагента		= ДоговорСсылка;
		БП.ПользовательИнициаторБП 	= ДоговорСсылка.абс_Ответственный;	
		БП.Записать();
		
		ТочкаСтарта = Неопределено;
		ТочкаСтарта = БизнесПроцессы.абс_КорректировкаЛимитовДоговоров.ТочкиМаршрута.Старт;
		
		БП.Старт(ТочкаСтарта);	
	
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Ложь;		
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;	
	
	//Сообщить("Бизнес процесс " + БП.Ссылка + " по утверждению договора " + ДоговорСсылка + " запущен.");
	
КонецФункции
//абс Родин Лимитный контроль

//абс Родин Лимитный контроль
Функция ПолучитьСтатусРаспреденияДоходовРасходов(Документ, ПериодСтатуса = Неопределено) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовРаспреденияДоходовРасходовСрезПоследних.Период КАК Период,
	                            |	абс_ИзменениеСтатусовРаспреденияДоходовРасходовСрезПоследних.СтатусДокумента КАК СтатусДокумента
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовРаспреденияДоходовРасходов.СрезПоследних(&Период, Документ = &Документ) КАК абс_ИзменениеСтатусовРаспреденияДоходовРасходовСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
								
	Если ПериодСтатуса = Неопределено Тогда
		ПериодСтатуса = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;								
								
	ЗапросСтатус.УстановитьПараметр("Период"		, Новый Граница(ПериодСтатуса, ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("Документ"	, Документ);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусДокумента;
	КонецЕсли;
	
	Возврат ТекСтатус;
КонецФункции

//АБС_Родин

 //Проектный учет
Функция ПолучитьСтатусАвизо(Документ, ПериодСтатуса = Неопределено) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	абс_ИсторияСтатусовАвизоСрезПоследних.Период КАК Период,
	|	абс_ИсторияСтатусовАвизоСрезПоследних.СтатусДокумента КАК СтатусДокумента
	|ИЗ
	|	РегистрСведений.абс_ИсторияСтатусовАвизо.СрезПоследних(&Период, Авизо = &Документ) КАК абс_ИсторияСтатусовАвизоСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ");
	
	Если ПериодСтатуса = Неопределено Тогда
		ПериодСтатуса = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;								
	
	ЗапросСтатус.УстановитьПараметр("Период"		, Новый Граница(ПериодСтатуса, ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("Документ"	, Документ);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусДокумента;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции
 //Проектный учет

// Бизнес-процессы по договорам
Функция ЗапуститьБПСогласованияДоговора(ДоговорСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка 			

		БП = БизнесПроцессы.абсСогласованиеДоговоров.СоздатьБизнесПроцесс();
		БП.Дата 					= абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.Контрагент 				= ДоговорСсылка.Владелец;
		БП.ДоговорКонтрагента		= ДоговорСсылка;
		БП.ПользовательИнициаторБП 	= ДоговорСсылка.абс_Ответственный;	
		БП.Записать();
		
		ТочкаСтарта = Неопределено;
		
		Если ДоговорИзБиллинга(ДоговорСсылка) И НЕ ДоговорСсылка.абс_ТипДоговора = Перечисления.абсТипыДоговоров.СоглашениеОКонфиденциальности Тогда
			ТочкаСтарта = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СтартДоговорИзБиллинга;
		Иначе
			ТочкаСтарта = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.Старт;
		КонецЕсли;
		
		БП.Старт(ТочкаСтарта);	
	
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Ложь;		
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;	
	
	//Сообщить("Бизнес процесс " + БП.Ссылка + " по утверждению договора " + ДоговорСсылка + " запущен.");
	
КонецФункции

Функция ЗапуститьБПЗакрытияДоговора(ДоговорСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		БП = БизнесПроцессы.абсЗакрытиеДоговоров.СоздатьБизнесПроцесс();
		
		БП.Дата 					= абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.Контрагент 				= ДоговорСсылка.Владелец;
		БП.ДоговорКонтрагента		= ДоговорСсылка;
		БП.ПользовательИнициаторБП 	= глЗначениеПеременной("глТекущийПользователь");
		
		БП.Записать();
		
		
		БП.Старт();
	
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Ложь;		
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
		
	//Сообщить("Бизнес процесс " + БП.Ссылка + " закрытия договора " + ДоговорСсылка + " запущен.");	
	
КонецФункции

Функция ЗапуститьБПСогласованияЗаявкиНаЗаведениеДоговора(ЗаявкаСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка 
		
		БП = БизнесПроцессы.абс_СогласованиеЗаявкиНаЗаведениеДоговора.СоздатьБизнесПроцесс();
		
		БП.Дата 						= абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ЗаявкаНаДоговор 				= ЗаявкаСсылка;
		БП.ПользовательИнициаторБП 		= глЗначениеПеременной("глТекущийПользователь");
		БП.Записать();
		
		БП.Старт(БизнесПроцессы.абс_СогласованиеЗаявкиНаЗаведениеДоговора.ТочкиМаршрута.СтартСогласованияЗаявкиНаДоговор);
		
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Ложь;		
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции

// Бизнес-процесс по договорам подряда
Функция ЗапуститьБПСогласованияДоговораПодряда(ДоговорСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка 			

		БП = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.СоздатьБизнесПроцесс();
		БП.Дата 					= абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ДоговорПодряда			= ДоговорСсылка;
		БП.Записать();
		
		БП.Старт(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.Старт);	
	
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Ложь;		
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;	
	
КонецФункции

// Бизнес-процесс по актам приёмки выполненных работ
Функция ЗапуститьБПСогласованияАктаПриёмки(АктПриёмкиВыполненныхРабот) Экспорт
	
	НачатьТранзакцию();
	
	Попытка 			

		БП = БизнесПроцессы.абсСогласованиеАктовПриёмки.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.АктПриёмкиВыполненныхРабот = АктПриёмкиВыполненныхРабот;
		БП.Записать();
		
		БП.Старт(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.Старт);	
	
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Ложь;		
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;	
	
КонецФункции

// Бизнес-процессы по номенклатуре
Функция ЗапуститьБПСогласованияНоменклатуры(НоменклатураСсылка) Экспорт
			
	БП = БизнесПроцессы.абсСогласованиеНоменклатуры.СоздатьБизнесПроцесс();
	БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
	БП.Номенклатура 			= НоменклатураСсылка;
	БП.ПользовательИнициаторБП 	= НоменклатураСсылка.абс_Ответственный;

	БП.Записать();
			
	БП.Старт(БизнесПроцессы.абсСогласованиеНоменклатуры.ТочкиМаршрута.СтартСогласованияНоменклатуры);
	
	//Сообщить("Бизнес процесс " + БП.Ссылка + " согласования контрагента " + КонтрагентСсылка + " запущен.");

КонецФункции

// Бизнес-процессы по номенклатурной группе
Функция ЗапуститьБПСогласованияНоменклатурнойГруппы(НоменклатурнаяГруппаСсылка) Экспорт
			
	БП = БизнесПроцессы.абсСогласованиеНоменклатурныхГрупп.СоздатьБизнесПроцесс();
	БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
	БП.НоменклатурнаяГруппа 			= НоменклатурнаяГруппаСсылка;
	БП.ПользовательИнициаторБП 	= НоменклатурнаяГруппаСсылка.абс_Ответственный;

	БП.Записать();
			
	БП.Старт(БизнесПроцессы.абсСогласованиеНоменклатурныхГрупп.ТочкиМаршрута.СтартСогласованияНоменклатурнойГруппы);
	
	//Сообщить("Бизнес процесс " + БП.Ссылка + " согласования контрагента " + КонтрагентСсылка + " запущен.");

КонецФункции

// Бизнес-процессы по статье затрат
Функция ЗапуститьБПСогласованияСтатьиЗатрат(СтатьяЗатратСсылка) Экспорт
			
	БП = БизнесПроцессы.абсСогласованиеСтатейЗатрат.СоздатьБизнесПроцесс();
	БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
	БП.СтатьяЗатрат 			= СтатьяЗатратСсылка;
	БП.ПользовательИнициаторБП 	= СтатьяЗатратСсылка.абс_Ответственный;

	БП.Записать();
			
	БП.Старт(БизнесПроцессы.абсСогласованиеСтатейЗатрат.ТочкиМаршрута.СтартСогласованияСтатьиЗатрат);
	
КонецФункции

// Бизнес-процессы по статьям прочих доходов и расходов
Функция ЗапуститьБПСогласованияСтатьиПрочих(СтатьяПрочихСсылка) Экспорт
			
	БП = БизнесПроцессы.абсСогласованиеПрочихДоходовИРасходов.СоздатьБизнесПроцесс();
	БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
	БП.СтатьяПрочихДоходовИРасходов = СтатьяПрочихСсылка;
	БП.ПользовательИнициаторБП 		= СтатьяПрочихСсылка.абс_Ответственный;

	БП.Записать();
			
	БП.Старт(БизнесПроцессы.абсСогласованиеПрочихДоходовИРасходов.ТочкиМаршрута.СтартСогласованияСтатьи);
	
КонецФункции
               
// Бизнес-процессы по ЗЗ
Функция ЗапуститьБПСогласованияЗЗ(ЗЗСсылка) Экспорт
	
	//НачатьТранзакцию();
	//
	//Попытка
		
		БП = БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ЗакупочныйЗаказ 			= ЗЗСсылка;
		БП.ПользовательИнициаторБП 	= ЗЗСсылка.Ответственный;

		БП.Записать();
			
		БП.Старт(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.СтартСогласованиеЗакупочногоЗаказа);
	
	//Исключение
	//	ОтменитьТранзакцию();
	//	
	//	Возврат Ложь;		
	//	
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	//
	//Возврат Истина;
	
КонецФункции

// Бизнес-процессы по ЗЗ
Функция ЗапуститьБПСогласованияРПР(РПРСсылка) Экспорт
	
	//НачатьТранзакцию();
	//
	//Попытка
		
		БП = БизнесПроцессы.абс_СогласованиеРПР.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ДокументРПР 				= РПРСсылка;
		БП.ПользовательИнициаторБП 	= РПРСсылка.Ответственный;

		БП.Записать();
			
		БП.Старт(БизнесПроцессы.абс_СогласованиеРПР.ТочкиМаршрута.СтартПодготовка);
	
	//Исключение
	//	ОтменитьТранзакцию();
	//	
	//	Возврат Ложь;		
	//	
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	//
	//Возврат Истина;
	
КонецФункции

// Бизнес-процессы по ЗЗ
Функция ЗапуститьБПСогласованияЗЗИзменениеСпецификации(ЗЗСсылка, СтатусИзмененияСпецификации) Экспорт
	
	//НачатьТранзакцию();
	//
	//Попытка
		
		БП = БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ЗакупочныйЗаказ 			= ЗЗСсылка;
		БП.ПользовательИнициаторБП 	= ЗЗСсылка.Ответственный;

		БП.СтатусИзмененияСпецификации = СтатусИзмененияСпецификации;
		
		БП.Записать();
			
		БП.Старт(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.СтартИзменениеСпецификации);
		
		Возврат БП.Ссылка;
		
	//Исключение
	//	ОтменитьТранзакцию();
	//	
	//	Возврат Ложь;		
	//	
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	//
	//Возврат Истина;
	
КонецФункции

// Бизнес-процессы по ЗЗ
Функция ЗапуститьБПСогласованияЗЗРуководительДепартамента(ЗЗСсылка) Экспорт
	
	//НачатьТранзакцию();
	//
	//Попытка
		
		БП = БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ЗакупочныйЗаказ 			= ЗЗСсылка;
		БП.ПользовательИнициаторБП 	= ЗЗСсылка.Ответственный;

		БП.Записать();
			
		БП.Старт(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.СтартСогласованиеРуководителемДепартамента);
	
	//Исключение
	//	ОтменитьТранзакцию();
	//	
	//	Возврат Ложь;		
	//	
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	//
	//Возврат Истина;
	
КонецФункции

// Бизнес-процессы по Счету на оплату
Функция ЗапуститьБПСогласованияСчетаНаОплату(СчетНаОплатуСсылка) Экспорт
	
	//НачатьТранзакцию();
	//
	//Попытка
		
		БП = БизнесПроцессы.абсСогласованиеСчетаНаОплату.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.СчетНаОплату = СчетНаОплатуСсылка;
		БП.ПользовательИнициаторБП = СчетНаОплатуСсылка.Ответственный;

		БП.Записать();
			
		БП.Старт(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.Старт);

	//Исключение
	//	ОтменитьТранзакцию();
	//	
	//	Возврат Ложь;		
	//	
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	//
	Возврат Истина;

КонецФункции

Функция ЗапуститьБПУточненияСчетаНаОплату(СчетНаОплатуСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БПСогласования = НайтиБизнесПроцессПоСчетуНаОплату(СчетНаОплатуСсылка, "абсСогласованиеСчетаНаОплату", Ложь);
		
		Если БПСогласования = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		БП = БизнесПроцессы.абсУточнениеСчетаНаОплату.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.СчетНаОплату = СчетНаОплатуСсылка;
		
		БП.ПользовательИнициаторСогласования = БПСогласования.ПользовательИнициаторБП;
		БП.ПользовательИнициаторБП = глЗначениеПеременной("глТекущийПользователь");
		
		БП.Записать();
			
		БП.Старт();
	
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Ложь;		
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

// Бизнес-процессы по первичным документам
Функция ЗапуститьБПСогласованияПервичногоДокумента(ПервичныйДокументСсылка) Экспорт
	
	//НачатьТранзакцию();
	//
	//Попытка
		
		БП = БизнесПроцессы.абсСогласованиеПервичныхДокументов.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ПервичныйДокумент 		= ПервичныйДокументСсылка;
		БП.ПользовательИнициаторБП 	= ПервичныйДокументСсылка.Ответственный;

		БП.Записать();
			
		БП.Старт(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.Старт);
	
	//Исключение
	//	ОтменитьТранзакцию();
	//	
	//	Возврат Ложь;		
	//	
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	//
	//Возврат Истина;
	
КонецФункции

Функция ЗапуститьБПСогласованияПервичногоДокументаУточнениеБухгалтером(ПервичныйДокументСсылка) Экспорт
	
	//НачатьТранзакцию();
	//
	//Попытка
		
		БП = БизнесПроцессы.абсСогласованиеПервичныхДокументов.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ПервичныйДокумент 		= ПервичныйДокументСсылка;
		БП.ПользовательИнициаторБП 	= ПервичныйДокументСсылка.Ответственный;

		БП.Записать();
			
		БП.Старт(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.СтартУточнениеБухгалтером);
	
	//Исключение
	//	ОтменитьТранзакцию();
	//	
	//	Возврат Ложь;		
	//	
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	//
	//Возврат Истина;
	
КонецФункции

// Бизнес-процессы по ЗЗ
Функция ЗапуститьБПРекласификацииБюджета(РекласификацияСсылка) Экспорт
	
	//НачатьТранзакцию();
	//
	//Попытка
		
		БП = БизнесПроцессы.абсРекласификацияБюджета.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.РекласификацияБюджета 	= РекласификацияСсылка;
		БП.ПользовательИнициаторБП 	= РекласификацияСсылка.Ответственный;

		БП.Записать();
			
		БП.Старт(БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.СтартПодготовка);
	
	//Исключение
	//	ОтменитьТранзакцию();
	//	
	//	Возврат Ложь;		
	//	
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	//
	//Возврат Истина;
	
КонецФункции

Функция ЗапуститьБПВводаБюджета(ВводБюджетаСсылка) Экспорт
	
	//НачатьТранзакцию();
	//
	//Попытка
		
		БП = БизнесПроцессы.абсСогласованиеБюджета.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ДокументВводаБюджета 	= ВводБюджетаСсылка;
		БП.ПользовательИнициаторБП 	= ВводБюджетаСсылка.Ответственный;

		БП.Записать();
			
		БП.Старт(БизнесПроцессы.абсСогласованиеБюджета.ТочкиМаршрута.СтартПодготовка);
	
	//Исключение
	//	ОтменитьТранзакцию();
	//	
	//	Возврат Ложь;		
	//	
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	//
	//Возврат Истина;
	
КонецФункции

Функция ЗапуститьБПВводаБюджетаУточнение(ВводБюджетаСсылка, СтатусУточнения) Экспорт
	
	//НачатьТранзакцию();
	//
	//Попытка
		
		БП = БизнесПроцессы.абсСогласованиеБюджета.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ДокументВводаБюджета 	= ВводБюджетаСсылка;
		БП.ПользовательИнициаторБП 	= ВводБюджетаСсылка.Ответственный;

		БП.СтатусУточнения			= СтатусУточнения;
		
		БП.Записать();
			
		БП.Старт(БизнесПроцессы.абсСогласованиеБюджета.ТочкиМаршрута.СтартУточнение);
	
	//Исключение
	//	ОтменитьТранзакцию();
	//	
	//	Возврат Ложь;		
	//	
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	//
	//Возврат Истина;
	
КонецФункции

Функция ЗапуститьБПВводаБюджетаОтмена(ВводБюджетаСсылка, СтатусОтмены) Экспорт
	
	//НачатьТранзакцию();
	//
	//Попытка
		
		БП = БизнесПроцессы.абсСогласованиеБюджета.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ДокументВводаБюджета 	= ВводБюджетаСсылка;
		БП.ПользовательИнициаторБП 	= ВводБюджетаСсылка.Ответственный;

		БП.СтатусОтмены			= СтатусОтмены;
		
		БП.Записать();
			
		БП.Старт(БизнесПроцессы.абсСогласованиеБюджета.ТочкиМаршрута.СтартОтмена);
	
	//Исключение
	//	ОтменитьТранзакцию();
	//	
	//	Возврат Ложь;		
	//	
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	//
	//Возврат Истина;
	
КонецФункции

// Бизнес-процессы по заявкам в поддержку
Функция ЗапуститьБПЗаявкиВПоддержку(ЗаявкаСсылка) Экспорт
		
	БП = БизнесПроцессы.абсЗаявкаВПоддержку.СоздатьБизнесПроцесс();
	БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
	БП.ЗадачаВПоддержку 		= ЗаявкаСсылка;
	БП.ПользовательИнициаторБП 	= ЗаявкаСсылка.Инициатор;
	
	БП.Записать();
		
	БП.Старт(БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.СтартПодготовка);
	
	Возврат БП.Ссылка;
		
КонецФункции
              
// Проверка контрагентов, договоров на факт загрузки из биллинга
Функция КонтрагентИзБиллинга(КонтрагентСсылка) Экспорт
	
	// 24.12.2011 Фролов
	// Согласование всех контрагентов и договоров по общей схеме
	
	Возврат Ложь;

	// Функция вызывается с параметром - ссылкой на контрагента 
	// а так же с параметром - структурой в случае группового изменения статусов.
	
	Если    ТипЗнч(КонтрагентСсылка) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(КонтрагентСсылка) = Тип("СправочникОбъект.Контрагенты") Тогда
		Возврат КонтрагентСсылка.Покупатель И НЕ КонтрагентСсылка.Поставщик;
	ИначеЕсли ТипЗнч(КонтрагентСсылка) = Тип("СтрокаТаблицыЗначений") Тогда
		Возврат КонтрагентСсылка.Покупатель И НЕ КонтрагентСсылка.Поставщик;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДоговорИзБиллинга(ДоговорСсылка) Экспорт
	
	
	// 24.12.2011 Фролов
	// Согласование всех контрагентов и договоров по общей схеме
	// АБС ИЗМЕНЕНО 59935
	//Возврат Ложь;
	
	// Функция вызывается с параметром - ссылкой на контрагента 
	// а так же с параметром - структурой в случае группового изменения статусов.

	Если    ТипЗнч(ДоговорСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
		ИЛИ ТипЗнч(ДоговорСсылка) = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		//+++ Михайлова А.Д. - 16.10.18 [SC16431] - старое условие недостаточное
		//Возврат ДоговорСсылка.Владелец.Покупатель И НЕ ДоговорСсылка.Владелец.Поставщик;
		Возврат (ДоговорСсылка.Владелец.Покупатель И НЕ ДоговорСсылка.Владелец.Поставщик) или ДоговорСсылка.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		//--- Михайлова А.Д. - 16.10.18 [SC16431]
	ИначеЕсли ТипЗнч(ДоговорСсылка) = Тип("СтрокаТаблицыЗначений") Тогда
		Возврат ДоговорСсылка.КонтрагентПокупатель И НЕ ДоговорСсылка.КонтрагентПоставщик;
	КонецЕсли;
	
	Возврат Ложь;	
	
КонецФункции

// Получает предел суммы утвержедния по роли на текущую дату.
Функция ПолучитьПределСуммыУтвержденияПоРоли(ВидБизнесПроцесса, РольИсполнителя) Экспорт
	
	СтруктураПредела = РегистрыСведений.абс_ПределыСуммУтверждения.ПолучитьПоследнее(абс_СерверныеФункции.ПолучитьДатуСервера(), 
		Новый Структура("ВидБП, Роль", ВидБизнесПроцесса, РольИсполнителя));
		
	Возврат СтруктураПредела.ПределСумма;	
	
КонецФункции

Функция ПроверитьДоговорыКонтрагентаЗакрытие(КонтрагентСсылка) Экспорт
	
	ДоговорыКонтрагента = Справочники.ДоговорыКонтрагентов.Выбрать(, КонтрагентСсылка);
	
	ДоговорыЗакрыты = Истина;
	
	Пока ДоговорыКонтрагента.Следующий() Цикл
		ДоговорыЗакрыты = ДоговорыЗакрыты
		//АБС+ Тупиков 15684
			И (ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Закрыт
			ИЛИ ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка);
	КонецЦикла;
	
	Возврат ДоговорыЗакрыты;
	
КонецФункции

Функция ПроверитьДоговорыКонтрагентаЗавершениеОтношений(КонтрагентСсылка) Экспорт
	
	ДоговорыКонтрагента = Справочники.ДоговорыКонтрагентов.Выбрать(, КонтрагентСсылка);
	
	ДоговорыЗакрыты = Истина;
	
	Пока ДоговорыКонтрагента.Следующий() Цикл
		ДоговорыЗакрыты = ДоговорыЗакрыты 
			И  (ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Закрыт
			ИЛИ ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка);		
	КонецЦикла;
	
	Возврат ДоговорыЗакрыты;
		
КонецФункции

Функция ПроверитьДоговорыКонтрагентаАрхив(КонтрагентСсылка) Экспорт
	
	ДоговорыКонтрагента = Справочники.ДоговорыКонтрагентов.Выбрать(, КонтрагентСсылка);
	
	ДоговорыНеВИсполнении = Истина;
	
	//Родин лимиты по договорам
	Пока ДоговорыКонтрагента.Следующий() Цикл
		ДоговорыНеВИсполнении = ДоговорыНеВИсполнении 
			И (НЕ ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение и НЕ
			ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка и НЕ
			ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки и НЕ
			ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);		
	КонецЦикла;
	//Родин лимиты по договорам

	Возврат ДоговорыНеВИсполнении;
		
КонецФункции

Функция ПолучитьПользователейРоли(СписокРолей, Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РолиИИсполнители.Исполнитель КАК Исполнитель
	                      |ИЗ
	                      |	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	                      |ГДЕ
	                      |	РолиИИсполнители.Роль В(&СписокРолей)
	                      |	И ВЫБОР
	                      |			КОГДА &ОтборПоОрганизации
	                      |				ТОГДА РолиИИсполнители.Организация = &Организация
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ");
						  
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", НЕ Организация = Неопределено);
						  
	Запрос.УстановитьПараметр("СписокРолей", СписокРолей);
	
	СписокПользователей = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПользователей.Добавить(Выборка.Исполнитель);
	КонецЦикла;
	
	Возврат СписокПользователей;
	
КонецФункции

Функция ПолучитьСотрудниковРоли(СписокРолей, Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РолиИИсполнители.Исполнитель.абс_Сотрудник КАК Сотрудник
	                      |ИЗ
	                      |	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	                      |ГДЕ
	                      |	РолиИИсполнители.Роль В(&СписокРолей)
	                      |	И (НЕ РолиИИсполнители.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	                      |	И ВЫБОР
	                      |			КОГДА &ОтборПоОрганизации
						  // {{ТТК Сладков А. Заявка №7753345  20.10.2016 начало
	                      //|				ТОГДА РолиИИсполнители.Организация = &Организация
						  |			    	ТОГДА РолиИИсполнители.Организация В (&Организация)
						  // }}ТТК Сладков А. Заявка №7753345  20.10.2016 окончание
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ");
						  
	Запрос.УстановитьПараметр("СписокРолей", СписокРолей);
	
	Запрос.УстановитьПараметр("ОтборПоОрганизации", Не Организация = Неопределено);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СписокПользователей = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПользователей.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	Возврат СписокПользователей;
	
КонецФункции

// Возвращает массив заполненный возможными статусами ЗЗ в порядке их следования
Функция ПолучитьМассивСтатусовЗЗ() Экспорт
	МассивСтатусовЗЗ = Новый Массив;
	
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ПустаяСсылка());
	
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отменен);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
	
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
// +++ввв 12.12.2016 г.
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ);
// ---ввв 12.12.2016 г.
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УточненоДляОФК);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
// ниже	
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
// выше
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
// +++ввв 12.12.2016 г.
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК);
// ---ввв 12.12.2016 г.
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
	
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);
	//МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаСотрудникомДирККР);
// +++ввв 12.12.2016 г.
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
// ---ввв 12.12.2016 г.
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросИзменений);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершение);
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершен);
	
	//Изменено 261213 Проектный учет Родин
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП);
	//Изменено 261213 Проектный учет Родин
	
	//АБС ВСТАВКА   26.11.2014 18:17:55  Шамов
//	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК);
	//АБС ВСТАВКА  КОНЕЦ 
	//Сторчевой А.Н. 24.11.2016 {
	МассивСтатусовЗЗ.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеГрафика);
	// } Сторчевой А.Н. 24.11.2016
	Возврат МассивСтатусовЗЗ;

КонецФункции

Функция ПолучитьМассивСтатусовСчетаНаОплату() Экспорт
	
	МассивСтатусовСчета = Новый Массив;
	
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.ПустаяСсылка());
	
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
	
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.Подготовка);
	
	//Филиализация
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеДЭФ);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.ДопСогласованиеКТТК);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.ДопСогласованиеОФК);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.ДопУтверждениеРуководителемДФМ);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.ДопУтверждениеВицеПрезидентом);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.ДопУтверждениеПрезидентом);
	//Филиализация
	
	//ВСТАВКА 181213 Проектный учет Родин
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеРП);
	//ВСТАВКА 181213 Проектный учет Родин
	
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.Уточнить);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.Отменен);
	//++ Задача № 8630 Логинчев А.С. 18.05.2012 15:49:30
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.НалоговыйКонтроль);
	//-- Задача № 8630 Логинчев А.С.
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеДРУ);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеЗЗ);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.Уточнено);
	//Бобылев А.А. 07.01.2018 Первичка
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.ОформлениеАВЗ);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.СчетСогласованАВЗ);
	//Бобылев А.А. -------------------

	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
	
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.ВОплату);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.Исполнение);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.Утвержден);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.ГотовКОплате);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.ОплаченЧастично); // Лапин 21.06.2016 7737075  новый статус
	МассивСтатусовСчета.Добавить(Перечисления.абсСтатусыСчетов.Оплачен);
	
	Возврат МассивСтатусовСчета;
	
КонецФункции

Функция ПолучитьСтатусыУточненияИнициатором() Экспорт
	
	СтатусыУточненияИнициатором = Новый Массив();
	
	СтатусыУточненияИнициатором.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
	СтатусыУточненияИнициатором.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
	СтатусыУточненияИнициатором.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
	СтатусыУточненияИнициатором.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
	СтатусыУточненияИнициатором.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ);
	СтатусыУточненияИнициатором.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ);
	
	Возврат СтатусыУточненияИнициатором;
	
КонецФункции

// Процедура проверяет можно ли отправлять счет на согласования из подготовки
// 	Счет на оплату можно согласовывать, только тогда
// 	когда ЗЗ по нему находится выше статуса "Согласование ОФК"
Функция МожноСогласовыватьСчетНаОплату(СчетНаОплатуСсылка) Экспорт
	
	Если СчетНаОплатуСсылка.Технический Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивСтатусовЗЗ = ПолучитьМассивСтатусовЗЗ();
	
	ИндексСтатусаУтверждениеОФК = МассивСтатусовЗЗ.Найти(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
	
	ИндексТекущегоСтатусаЗЗ 	= МассивСтатусовЗЗ.Найти(СчетНаОплатуСсылка.ЗакупочныйЗаказ.Статус);
	
	// Если статус ЗЗ выше или равен статусу Согласование ОФК, то можно утверждать Счет на оплату
	Возврат ИндексТекущегоСтатусаЗЗ >= ИндексСтатусаУтверждениеОФК;
	
КонецФункции

// Процедура проверяет можно ли отправлять счет на согласования из подготовки
// Проверка осуществлется по переданному статусуЗЗ
// 	Счет на оплату можно согласовывать, только тогда
// 	когда ЗЗ по нему находится выше статуса "Согласование ОФК"
Функция МожноСогласовыватьСчетНаОплатуПоСтатусуЗЗ(СтатусЗЗ) Экспорт
	
	МассивСтатусовЗЗ = ПолучитьМассивСтатусовЗЗ();
	
	ИндексСтатусаУтверждениеОФК = МассивСтатусовЗЗ.Найти(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
	
	ИндексТекущегоСтатусаЗЗ 	= МассивСтатусовЗЗ.Найти(СтатусЗЗ);
	
	// Если статус ЗЗ выше или равен статусу Согласование ОФК, то можно утверждать Счет на оплату
	Возврат ИндексТекущегоСтатусаЗЗ >= ИндексСтатусаУтверждениеОФК;
	
КонецФункции

// Функция возвращает список статусов с которых ЗЗ можно отправить на изменение спецификации
Функция ПолучитьСтатусыИзмененияСпецификации() Экспорт
	
	Массив = Новый Массив();
	
	Массив.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
	Массив.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
	Массив.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение);
	
	Возврат Массив;
	
КонецФункции
            
// Функции для определения ответственных лиц
Функция ПолучитьСотрудникаПоФизЛицу(ФизЛицо, ТекущаяДата = Неопределено) Экспорт
	
	ЗапросСотрудник = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                               |	РаботникиОрганизацийСрезПоследних.Сотрудник,
	                               |	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	                               |ИЗ
	                               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, Сотрудник.Физлицо = &ФизЛицо) КАК РаботникиОрганизацийСрезПоследних
	                               |ГДЕ
	                               |	(НЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))");
	ЗапросСотрудник.УстановитьПараметр("Период"		, ?(ТекущаяДата = Неопределено, абс_СерверныеФункции.ПолучитьДатуСервера(), ТекущаяДата));
	ЗапросСотрудник.УстановитьПараметр("ФизЛицо"	, ФизЛицо);
	
	ВыборкаСотрудник = ЗапросСотрудник.Выполнить().Выбрать();
	
	Сотрудник = Неопределено;
	
	Если ВыборкаСотрудник.Следующий() Тогда
		Сотрудник = ВыборкаСотрудник.Сотрудник;
	КонецЕсли;
	
	Возврат Сотрудник;
	
КонецФункции

Функция ПолучитьРуководителяПодразделения(Подразделение, ТекущаяДата = Неопределено) Экспорт
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("СтруктурнаяЕдиница", Подразделение);
	Отбор.Вставить("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ТекущаяДата, Отбор);
	
	ФизЛицоРуководителя = Неопределено;
	
	Если СрезПоследних.Количество() > 0 Тогда
		ФизЛицоРуководителя = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицоРуководителя) Тогда
		Возврат ФизЛицоРуководителя;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПользователяФизЛица(ФизЛицо) Экспорт
	
	ЗапросПользователь = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                  |	Пользователи.Ссылка КАК Пользователь
	                                  |ИЗ
	                                  |	Справочник.Пользователи КАК Пользователи
	                                  |ГДЕ
	                                  |	Пользователи.ПометкаУдаления = ЛОЖЬ
	                                  |	И Пользователи.ФизЛицо В (&ФизЛицо)");
									  
	ЗапросПользователь.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	ПользовательРуководитель = Неопределено;
	
	ВыборкаПользователь = ЗапросПользователь.Выполнить().Выбрать();
	
	Если ВыборкаПользователь.Следующий() Тогда
		ПользовательРуководитель = ВыборкаПользователь.Пользователь;
	КонецЕсли;
	
	Возврат ПользовательРуководитель;
	
КонецФункции

Функция ПолучитьПользователяПоСотруднику(Сотрудники) Экспорт
	
	СписокСотрудников = Новый Массив();
	
	Если ТипЗнч(Сотрудники) = Тип("Массив") Тогда
		СписокСотрудников = Сотрудники;
	ИначеЕсли ТипЗнч(Сотрудники) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементСписка Из Сотрудники Цикл
			СписокСотрудников.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
	Иначе
		СписокСотрудников.Добавить(Сотрудники);
	КонецЕсли;
	
	ЗапросПользователь = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                  |	Пользователи.Ссылка КАК Пользователь
	                                  |ИЗ
	                                  |	Справочник.Пользователи КАК Пользователи
	                                  |ГДЕ
	                                  |	Пользователи.ПометкаУдаления = ЛОЖЬ
	                                  |	И Пользователи.абс_Сотрудник В (&СписокСотрудников)");
	ЗапросПользователь.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Если ТипЗнч(СписокСотрудников) = Тип("Массив") Тогда
		Возврат ЗапросПользователь.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	Иначе
		ВыборкаПользователя = ЗапросПользователь.Выполнить().Выбрать();
		
		ПользовательСотрудника = Неопределено;
		
		Если ВыборкаПользователя.Следующий() Тогда
			ПользовательСотрудника = ВыборкаПользователя.Пользователь;
		КонецЕсли;
		
		Возврат ПользовательСотрудника;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСотрудникаПользователя(Пользователь) Экспорт

	Если НЕ Пользователь = Неопределено Тогда
		Возврат Пользователь.абс_Сотрудник;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Ищет директора дирекции, используется для поиска ответственного в согласовании ЗЗ
Функция ПолучитьПользователяДиректораДирекции(Пользователь, ТекущаяДата = Неопределено) Экспорт
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	// Ищем дирекцию подразделения пользователя
	// В дирекции ищем руководителя
	
	ПодразделениеПользователя = Пользователь.абс_Сотрудник.ПодразделениеОрганизации;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПодразделениеДирекции = ПолучитьПодразделениеДирекции(ПодразделениеПользователя);
	
	Если ПодразделениеДирекции = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФизЛицоРуководителя = ПолучитьРуководителяПодразделения(ПодразделениеДирекции, ТекущаяДата);
	
	Если НЕ ЗначениеЗаполнено(ФизЛицоРуководителя) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ПолучитьПользователяФизЛица(ФизЛицоРуководителя);
		
КонецФункции

// Ищет вышестоящее или текущее подразеделение дирекции
Функция ПолучитьПодразделениеДирекции(Подразделение) Экспорт 
	
	ПодразделениеДирекции = Подразделение;
	
	УчетнаяПолитика = "";                        //АБС Коломиец 19797+
	Если ЗначениеЗаполнено(ПодразделениеДирекции) Тогда
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ТекущаяДата(), ПодразделениеДирекции.Владелец);
	КонецЕсли;
	ОшибкаВПолучении      = НЕ ЗначениеЗаполнено(УчетнаяПолитика);
	НеИспользоватьКатегории = ?(ОшибкаВПолучении, Истина, УчетнаяПолитика.абс_НеИспользоватьКатегорииПодразделений); 
	
	Если НЕ НеИспользоватьКатегории Тогда 
		
		Пока (НЕ ПодразделениеДирекции.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Дирекция) И ЗначениеЗаполнено(ПодразделениеДирекции.Родитель) Цикл
			ПодразделениеДирекции = ПодразделениеДирекции.Родитель;
		КонецЦикла;
		
		Если НЕ ПодразделениеДирекции.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Дирекция Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе                                         //АБС Коломиец 19797-
		
		Пока (НЕ ПодразделениеДирекции.абс_ЯвляетсяДирекцией) И ЗначениеЗаполнено(ПодразделениеДирекции.Родитель) Цикл
			ПодразделениеДирекции = ПодразделениеДирекции.Родитель;
		КонецЦикла;
		
		Если НЕ ПодразделениеДирекции.абс_ЯвляетсяДирекцией Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПодразделениеДирекции;
	
КонецФункции

// Ищет руководителя департамента, используется для поиска ответственного в согласовании ЗЗ
Функция ПолучитьПользователяРуководителяДепартамента(Пользователь, ТекущаяДата = Неопределено) Экспорт
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	// Ищем дирекцию подразделения пользователя
	// В дирекции ищем руководителя
	
	ПодразделениеПользователя = Пользователь.абс_Сотрудник.ПодразделениеОрганизации;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПодразделениеДепартамента = ПолучитьПодразделениеДепартамента(ПодразделениеПользователя);
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеДепартамента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФизЛицоРуководителя = ПолучитьРуководителяПодразделения(ПодразделениеДепартамента, ТекущаяДата);
	
	Если НЕ ЗначениеЗаполнено(ФизЛицоРуководителя) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ПолучитьПользователяФизЛица(ФизЛицоРуководителя);
	
КонецФункции

// Ищет вышестоящее или текущее подразеделение департамента
Функция ПолучитьПодразделениеДепартамента(Подразделение) Экспорт
	
	ПодразделениеДепартамента = Подразделение;
	
	УчетнаяПолитика = "";               //АБС Коломиец 19797+
	Если ЗначениеЗаполнено(ПодразделениеДепартамента) Тогда
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ТекущаяДата(), ПодразделениеДепартамента.Владелец);
	КонецЕсли;
	ОшибкаВПолучении      = НЕ ЗначениеЗаполнено(УчетнаяПолитика);
	НеИспользоватьКатегории = ?(ОшибкаВПолучении, Истина, УчетнаяПолитика.абс_НеИспользоватьКатегорииПодразделений); 
	
	Если НЕ НеИспользоватьКатегории Тогда 
		
		Пока (НЕ ПодразделениеДепартамента.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Департамент) И ЗначениеЗаполнено(ПодразделениеДепартамента.Родитель) Цикл
			ПодразделениеДепартамента = ПодразделениеДепартамента.Родитель;
		КонецЦикла;
		
		Если НЕ ПодразделениеДепартамента.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Департамент Тогда
			Возврат Неопределено;
		КонецЕсли;		
		
	Иначе                                //АБС Коломиец 19797-
		
		Пока (НЕ ПодразделениеДепартамента.абс_ЯвляетсяДепартаментом) И ЗначениеЗаполнено(ПодразделениеДепартамента.Родитель) Цикл
			ПодразделениеДепартамента = ПодразделениеДепартамента.Родитель;
		КонецЦикла;
		
		Если НЕ ПодразделениеДепартамента.абс_ЯвляетсяДепартаментом Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодразделениеДепартамента;
	
КонецФункции

// Возвращает пользователя - руководителя подразделения
// Если нету пользователя или не выбрано подразеделение возвращается Неопределено
Функция ПолучитьПользователяРуководителяПодразделения(Пользователь, Подразделение, ТекущаяДата = Неопределено) Экспорт
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФизЛицоРуководителя = ПолучитьРуководителяПодразделения(Подразделение, ТекущаяДата);
	
	Если НЕ ЗначениеЗаполнено(ФизЛицоРуководителя) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ПолучитьПользователяФизЛица(ФизЛицоРуководителя);
	
КонецФункции

// функция по текущему пользователю определяет 
// руководителя департамента подразделения 
Функция ПолучитьРуководителяДепартамента() Экспорт
	
	ТекущаяДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	// Получим текущего пользователя
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	// Получим физ. лицо пользователя
	ФизЛицо = ТекПользователь.ФизЛицо;
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Найдем сотрудника по физ.лицу
	Сотрудник = ПолучитьСотрудникаПоФизЛицу(ФизЛицо, ТекущаяДата);
	
	Если Сотрудник = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Найдем подразделение по сотруднику.
	
	Подразделение = Сотрудник.ПодразделениеОрганизации;
	
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получим Физлицо руководителя подразделения
	ФизЛицоРуководителя = ПолучитьРуководителяПодразделения(Подразделение, ТекущаяДата);
	
	Если ФизЛицоРуководителя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Найдем пользователя руководителя по физлицу
	ПользовательРуководитель = ПолучитьПользователяФизЛица(ФизЛицоРуководителя);
	
	Если ПользовательРуководитель = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтветственныхПодразделения(Подразделение, ТекущаяДата = Неопределено, Организация = Неопределено) Экспорт
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	Если Подразделение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	абс_ОтветственныеЛицаПодразделенийСрезПоследних.Сотрудник КАК Сотрудник
	                      |ИЗ
	                      |	РегистрСведений.абс_ОтветственныеЛицаПодразделений.СрезПоследних(
	                      |			&ТекущаяДата,
	                      |			СтруктурнаяЕдиница = &Подразделение
	                      |				И (Организация = &Организация
	                      |					ИЛИ (НЕ &ИспользоватьОтборПоОрганизации))) КАК абс_ОтветственныеЛицаПодразделенийСрезПоследних
	                      |ГДЕ
	                      |	абс_ОтветственныеЛицаПодразделенийСрезПоследних.Активен = ИСТИНА");
						  
	Запрос.УстановитьПараметр("Подразделение"	, Подразделение);
	Запрос.УстановитьПараметр("ТекущаяДата"		, ТекущаяДата);
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоОрганизации", НЕ Организация = Неопределено);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Функция ПолучитьОтветственныхПодразделенияСРолью(Подразделение, ТекущаяДата = Неопределено, Организация = Неопределено, Роль) Экспорт  //АБС Коломиец 19797
		
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	Если Подразделение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РолиИИсполнители.Исполнитель КАК Сотрудник
	                      |ИЗ
	                      |	РегистрСведений.абс_ОтветственныеЛицаПодразделений.СрезПоследних(
	                      |			&ТекущаяДата,
	                      |			СтруктурнаяЕдиница = &Подразделение
	                      |				И (Организация = &Организация
	                      |					ИЛИ (НЕ &ИспользоватьОтборПоОрганизации))) КАК абс_ОтветственныеЛицаПодразделенийСрезПоследних
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	                      |		ПО абс_ОтветственныеЛицаПодразделенийСрезПоследних.Сотрудник = РолиИИсполнители.Исполнитель.абс_Сотрудник
	                      |ГДЕ
	                      |	абс_ОтветственныеЛицаПодразделенийСрезПоследних.Активен = ИСТИНА
	                      |	И РолиИИсполнители.Роль = &Роль
	                      |	И РолиИИсполнители.Исполнитель.ПометкаУдаления = ЛОЖЬ");
						  
	Запрос.УстановитьПараметр("Подразделение"	, Подразделение);
	Запрос.УстановитьПараметр("ТекущаяДата"		, ТекущаяДата);
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоОрганизации", НЕ Организация = Неопределено);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Роль"	, Роль);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
		
КонецФункции

// Функция определяет можно ли редактировать/добавлять файлы 
//  к контрагенту/договору/счету/заказу
Функция МожноРедактироватьФайлы(ВладелецФайлаСсылка) Экспорт
	
	Если ТипЗнч(ВладелецФайлаСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		// К контрагентам можно прикреплять файлы только в статусе Подготовка
		
		Возврат ВладелецФайлаСсылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка;
		
	ИначеЕсли ТипЗнч(ВладелецФайлаСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		// К договорам можно прикреплять файлы только в статус Подготовка 
		//  и в статусе регистрация если у пользователя есть роль Регистрация первым отделом
		МассивРолей = ПолучитьСписокДоступныхРолейПользователя();
		
		ФайлыДоступны = (ВладелецФайлаСсылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка)
				    ИЛИ (ВладелецФайлаСсылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Регистрация И
						НЕ МассивРолей.Найти(Справочники.РолиИсполнителей.ОбщийОтдел) = Неопределено);
						
		Возврат ФайлыДоступны;
		
	ИначеЕсли ТипЗнч(ВладелецФайлаСсылка) = Тип("ДокументСсылка.абс_ЗакупочныйЗаказ") Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(ВладелецФайлаСсылка) = Тип("ДокументСсылка.абс_СчетНаОплату") Тогда		
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Процедура добавляет задачи по суперпользователю в переданный массив формируемых задач
Процедура ДобавитьЗадачиСуперПользователя(БПСсылка, ОбъектЗадачи, ТочкаМаршрута, ФормируемыеЗадачи, Организация = Неопределено) Экспорт
	//АБС Попов Оптимизация БП и задач
	Если ТипЗнч(БПСсылка) = Тип("БизнесПроцессССылка.абсСогласованиеПервичныхДокументов") ИЛИ ТипЗнч(БПСсылка) = Тип("БизнесПроцессССылка.абсЗаявкаВПоддержку") ИЛИ ТипЗнч(БПСсылка) = Тип("БизнесПроцессССылка.абсСогласованиеКонтрагентов") ИЛИ ТипЗнч(БПСсылка) = Тип("БизнесПроцессССылка.абсСогласованиеДоговоров") ИЛИ ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеДоговоровПодряда") Тогда
		Возврат;
		//	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
		//	
		//	НоваяЗадача.БизнесПроцесс 		= БПСсылка;
		//	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		//	НоваяЗадача.Дата 				= абс_СерверныеФункции.ПолучитьДатуСервера();
		//
		//	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
		//	//
		//	НоваяЗадача.Наименование = СокрЛП(ОбъектЗадачи) + " "  
		//		+ ТочкаМаршрута.НаименованиеЗадачи + ".";
		//	
		//	НоваяЗадача.Роль			= Справочники.РолиИсполнителей.СуперПользователь;
		//	
		//	НоваяЗадача.ОбъектЗадачи 		= ОбъектЗадачи;
		//	
		//	НоваяЗадача.Записать();
		//	
		//	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	Иначе
		//\\АБС Попов
		
		ЗапросСуперПользователей = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РолиИИсполнители.Исполнитель КАК Пользователь,
		|	ЕСТЬNULL(ЗадачиСуперПользователей.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЗадачаПользователя
		|ИЗ
		|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			абсЗадачаДоговора.Ссылка КАК Ссылка,
		|			абсЗадачаДоговора.Исполнитель КАК Исполнитель
		|		ИЗ
		|			Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
		|		ГДЕ
		|			абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
		|			И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
		|			И абсЗадачаДоговора.Выполнена = ЛОЖЬ
		|			И абсЗадачаДоговора.ОбъектЗадачи = &ОбъектЗадачи) КАК ЗадачиСуперПользователей
		|		ПО РолиИИсполнители.Исполнитель = ЗадачиСуперПользователей.Исполнитель
		|			И (ВЫБОР
		|				КОГДА &ОтборПоОрганизации
		|					ТОГДА РолиИИсполнители.Организация = &Организация
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|ГДЕ
		|	РолиИИсполнители.Роль = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.СуперПользователь)");
		
		ЗапросСуперПользователей.УстановитьПараметр("БизнесПроцесс"	, БПСсылка);
		ЗапросСуперПользователей.УстановитьПараметр("ТочкаМаршрута"	, ТочкаМаршрута);
		ЗапросСуперПользователей.УстановитьПараметр("ОбъектЗадачи"	, ОбъектЗадачи);
		ЗапросСуперПользователей.УстановитьПараметр("ОтборПоОрганизации", НЕ Организация = Неопределено);
		ЗапросСуперПользователей.УстановитьПараметр("Организация"	, Организация);

		
		ВыборкаСуперПользователи = ЗапросСуперПользователей.Выполнить().Выбрать();

		//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
		
		//АБС ВСТАВКА 36495  13.12.2013 11:20:34  Поставка
		ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
		//АБС ВСТАВКА 36495 КОНЕЦ 
		
		Если ВыборкаСуперПользователи.Количество() > 0 Тогда
			
			НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
			
			НоваяЗадача.БизнесПроцесс 		= БПСсылка;
			НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
			//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 11:20:57  Поставка
			НоваяЗадача.Дата 				= ТекДатаЗадачи;
			НоваяЗадача.Роль                = Справочники.РолиИсполнителей.СуперПользователь;
			//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 		
			
			//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
			//
			НоваяЗадача.Наименование = СокрЛП(ОбъектЗадачи) + " "  
			+ ТочкаМаршрута.НаименованиеЗадачи + ".";
			
			//	НоваяЗадача.Исполнитель			= ВыборкаСуперПользователи.Пользователь;
			
			НоваяЗадача.ОбъектЗадачи 		= ОбъектЗадачи;
			
			НоваяЗадача.Записать();
			
			ФормируемыеЗадачи.Добавить(НоваяЗадача);		
			
		КонецЕсли;
	КонецЕсли;	
	//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	
КонецПроцедуры

Процедура ДобавитьЗадачиСуперПользователяПоддержка(БПСсылка, ОбъектЗадачи, ТочкаМаршрута, ФормируемыеЗадачи) Экспорт
	
	ЗапросСуперПользователей = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                        |	РолиИИсполнители.Исполнитель КАК Пользователь,
	                                        |	ЕСТЬNULL(ЗадачиСуперПользователей.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЗадачаПользователя
	                                        |ИЗ
	                                        |	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	                                        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                                        |			абсЗадачаДоговора.Ссылка КАК Ссылка,
	                                        |			абсЗадачаДоговора.Исполнитель КАК Исполнитель
	                                        |		ИЗ
	                                        |			Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                                        |		ГДЕ
	                                        |			абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                                        |			И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	                                        |			И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	                                        |			И абсЗадачаДоговора.БизнесПроцесс.ЗадачаВПоддержку = &ОбъектЗадачи) КАК ЗадачиСуперПользователей
	                                        |		ПО РолиИИсполнители.Исполнитель = ЗадачиСуперПользователей.Исполнитель
	                                        |ГДЕ
	                                        |	РолиИИсполнители.Роль = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.СуперПользователь)");
											
	ЗапросСуперПользователей.УстановитьПараметр("БизнесПроцесс"	, БПСсылка);
	ЗапросСуперПользователей.УстановитьПараметр("ТочкаМаршрута"	, ТочкаМаршрута);
	ЗапросСуперПользователей.УстановитьПараметр("ОбъектЗадачи"	, ОбъектЗадачи);
											
	ВыборкаСуперПользователи = ЗапросСуперПользователей.Выполнить().Выбрать();
	
	Пока ВыборкаСуперПользователи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаСуперПользователи.ЗадачаПользователя) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
		
		НоваяЗадача.БизнесПроцесс 		= БПСсылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		НоваяЗадача.Дата 				= абс_СерверныеФункции.ПолучитьДатуСервера();
	
		//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
		//
		НоваяЗадача.Наименование = СокрЛП(ОбъектЗадачи) + " "  
			+ ТочкаМаршрута.НаименованиеЗадачи + ".";
		
		НоваяЗадача.Исполнитель			= ВыборкаСуперПользователи.Пользователь;
		
		НоваяЗадача.ОбъектЗадачи		= ОбъектЗадачи;
		НоваяЗадача.Записать();
		
		ФормируемыеЗадачи.Добавить(НоваяЗадача);		
		
	КонецЦикла;
	
КонецПроцедуры

// Процедуры-обработчики создания задач по БП.       

// Процедура проверяет созданные задачи по исполнителям и возвращает массив 
//  исполнителей по которым не созданы задачи.
Функция ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута, Исполнители) Экспорт
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	ИсполнителиЗадачи.Исполнитель КАК Исполнитель
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		Исполнители.Исполнитель КАК Исполнитель,
	//|		ЕСТЬNULL(ЗадачиИсполнителей.Задача, ЗНАЧЕНИЕ(Задача.абсЗадачаДоговора.Пустаяссылка)) КАК Задача
	//|	ИЗ
	//|		(ВЫБРАТЬ
	//|			Пользователи.Ссылка КАК Исполнитель
	//|		ИЗ
	//|			Справочник.Пользователи КАК Пользователи
	//|		ГДЕ
	//|			Пользователи.Ссылка В(&Исполнители)) КАК Исполнители
	//|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|				абсЗадачаДоговора.Ссылка КАК Задача,
	//|				абсЗадачаДоговора.Исполнитель КАК Исполнитель
	//|			ИЗ
	//|				Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	//|			ГДЕ
	//|				абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	//|				И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	//|				И абсЗадачаДоговора.Выполнена = ЛОЖЬ) КАК ЗадачиИсполнителей
	//|			ПО Исполнители.Исполнитель = ЗадачиИсполнителей.Исполнитель) КАК ИсполнителиЗадачи
	//|ГДЕ
	//|	ИсполнителиЗадачи.Задача = ЗНАЧЕНИЕ(Задача.абсЗадачаДоговора.ПустаяСсылка)");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	абсЗадачаДоговора.Ссылка КАК Задача,
	|	абсЗадачаДоговора.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_ЗадачиИсполнителей
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|ГДЕ
	|	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	|	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	|	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_Исполнители
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&Исполнители)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Исполнители.Исполнитель,
	|	ВТ_ЗадачиИсполнителей.Задача
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	ВТ_Исполнители КАК ВТ_Исполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗадачиИсполнителей КАК ВТ_ЗадачиИсполнителей
	|		ПО ВТ_Исполнители.Исполнитель = ВТ_ЗадачиИсполнителей.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Итог.Исполнитель
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|ГДЕ
	|	ВТ_Итог.Задача ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЗадачиИсполнителей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Исполнители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Итог");	
						  
	Запрос.УстановитьПараметр("БизнесПроцесс"	, БП);
	Запрос.УстановитьПараметр("ТочкаМаршрута"	, ТочкаМаршрута);
	Запрос.УстановитьПараметр("Исполнители"		, Исполнители);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
КонецФункции

Процедура СформироватьЗадачуИсполнителямЗЗ(БП, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители) Экспорт
	
	МассивИсполнителей = Новый Массив();
	
	Если НЕ ТипЗнч(Исполнители) = Тип("Массив") Тогда
		МассивИсполнителей.Добавить(Исполнители);
	Иначе
		МассивИсполнителей = Исполнители;
	КонецЕсли;		
	
	МассивИсполнителей = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута, Исполнители);
	
	ФормируемыеЗадачи.Очистить();	
	
	//АБС ВСТАВКА 36495  13.12.2013 11:20:34  Поставка
	ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
	//АБС ВСТАВКА 36495 КОНЕЦ
	
	ЗакупочныйЗаказ 	= БП.ЗакупочныйЗаказ;
	ИнициаторБП 		= БП.ПользовательИнициаторБП;	
	ВидЗадачиЗЗ 		= Справочники.ВидыЗадачПользователей.ЗакупочныйЗаказ;
	
	Для Каждого ТекИсполнитель Из МассивИсполнителей Цикл
		
		НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();

		НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 11:20:57  Поставка
		НоваяЗадача.Дата 				= ТекДатаЗадачи;
		//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ
		НоваяЗадача.Наименование 		= Строка(ЗакупочныйЗаказ) + " " + ТочкаМаршрута.НаименованиеЗадачи + ".";

		НоваяЗадача.Исполнитель			= ТекИсполнитель;

		// АБС ВСТАВКА 20120405 Заполняем реквизиты, чтобы не пришлось из получать при записи задачи 
		НоваяЗадача.ОбъектЗадачи 		= ЗакупочныйЗаказ;
		НоваяЗадача.ВидЗадачи 			= ВидЗадачиЗЗ;
		НоваяЗадача.ИнициаторБП			= ИнициаторБП;
        // АБС ВСТАВКА 20120405 Заполняем реквизиты, чтобы не пришлось из получать при записи задачи КОНЕЦ
		
		НоваяЗадача.Записать();

		ФормируемыеЗадачи.Добавить(НоваяЗадача.Ссылка);
		
	КонецЦикла;
	
	// Добавим задачи для суперпользователей
	абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(БП.Ссылка, БП.ЗакупочныйЗаказ, ТочкаМаршрута, ФормируемыеЗадачи);
	
КонецПроцедуры

Процедура СформироватьЗадачуСогласованиеДоговора(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель = Неопределено, Отказ = Ложь, ЗаписыватьРаспределение = Ложь, ТекДатаЗадачи = Неопределено, РольИсполнителей = Неопределено, Организация = Неопределено) Экспорт
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	//АБС ВСТАВКА 36495  13.12.2013 11:20:34  Поставка
	Если ТекДатаЗадачи = Неопределено Тогда
		ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	//АБС ВСТАВКА 36495 КОНЕЦ	
	
	НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 14:36:43  Поставка
	//НоваяЗадача.Дата 				= абс_СерверныеФункции.ПолучитьДатуСервера();
	НоваяЗадача.Дата 				= ТекДатаЗадачи;
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
	
	//Сторчевой А.Н. 77125458 06.06.2017 {
	Если НЕ Организация = Неопределено Тогда
		НоваяЗадача.Организация = Организация;
	КонецЕсли;
	// } Сторчевой А.Н.	77125458 06.06.2017
		
	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи 
	//	+ " ("+СокрЛП(Контрагент.Наименование) + " :" + СокрЛП(ДоговорКонтрагента.Наименование) + ")";
	НоваяЗадача.Наименование = СокрЛП(БП.Контрагент.Наименование) + ": " + СокрЛП(БП.ДоговорКонтрагента.Наименование) + " " 
		+ ТочкаМаршрута.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ТекИсполнитель;
	
	//абс Урал 28.01.2014
	НоваяЗадача.Роль = РольИсполнителей;
	//\\абс
	
	НоваяЗадача.ОбъектЗадачи 		= БП.ДоговорКонтрагента;
	
	НоваяЗадача.Записать();
		
	ФормируемыеЗадачи.Добавить(НоваяЗадача.Ссылка);
		
	Если ЗаписыватьРаспределение И ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора Тогда
		
		НаборЗаписейРаспределение = РегистрыСведений.абс_РаспределениеЗадач.СоздатьНаборЗаписей();
		
		НаборЗаписейРаспределение.Отбор.Задача.Установить(НоваяЗадача.Ссылка);
		НаборЗаписейРаспределение.Отбор.Пользователь.Установить(ТекИсполнитель);
		
		ЗаписьРаспределения = НаборЗаписейРаспределение.Добавить();
		
		//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 14:36:03  Поставка
		//ЗаписьРаспределения.Период		= абс_СерверныеФункции.ПолучитьДатуСервера();
		ЗаписьРаспределения.Период			= ТекДатаЗадачи;
		//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
		ЗаписьРаспределения.Пользователь 	= ТекИсполнитель;
		ЗаписьРаспределения.Задача 			= НоваяЗадача.Ссылка;
		//АБС ВСТАВКА №39764 НАЧАЛО «14 марта 2014 г.», Пополитов
  	    ЗаписьРаспределения.Организация 	= БП.Организация;
  		//\\АБС ВСТАВКА №39764 КОНЕЦ  	
		НаборЗаписейРаспределение.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗадачуСогласованиеДоговораПодряда(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель, Отказ = Ложь, ЗаписыватьРаспределение = Ложь, ТекДатаЗадачи = Неопределено,РольИсполнителя) Экспорт
	
	Если ТекДатаЗадачи = Неопределено Тогда
		ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
	НоваяЗадача.Дата 				= ТекДатаЗадачи;
	НоваяЗадача.Наименование = СокрЛП(БП.ДоговорПодряда.Номер) + ": " + Формат(БП.ДоговорПодряда.Дата, "ДФ=dd.MM.yyyy") + " " 
	+ ТочкаМаршрута.НаименованиеЗадачи + ".";
	
	Если ТекИсполнитель <> Неопределено Тогда
		НоваяЗадача.Исполнитель			= ТекИсполнитель;
	КонецЕсли;	
	
	Если РольИсполнителя <> Неопределено Тогда
		НоваяЗадача.Роль			    = РольИсполнителя;
	КонецЕсли;	
	
	НоваяЗадача.ОбъектЗадачи 		= БП.ДоговорПодряда;
	
	НоваяЗадача.Записать();
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача.Ссылка);
		
КонецПроцедуры

Процедура СформироватьЗадачуСогласованиеАктаПриёмки(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель, Отказ = Ложь, ЗаписыватьРаспределение = Ложь, ТекДатаЗадачи = Неопределено) Экспорт
	
	Если ТекДатаЗадачи = Неопределено Тогда
		ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;	
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
	НоваяЗадача.Дата 				= ТекДатаЗадачи;
	НоваяЗадача.Наименование = СокрЛП(БП.АктПриёмкиВыполненныхРабот.Номер) + ": " + Формат(БП.АктПриёмкиВыполненныхРабот.Дата, "ДФ=dd.MM.yyyy") + " " 
		+ ТочкаМаршрута.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ТекИсполнитель;
	
	НоваяЗадача.ОбъектЗадачи 		= БП.АктПриёмкиВыполненныхРабот;
	
	НоваяЗадача.Записать();
		
	ФормируемыеЗадачи.Добавить(НоваяЗадача.Ссылка);
	
КонецПроцедуры

Процедура СформироватьЗадачуСогласованиеНГ(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель, Отказ = Ложь, ЗаписыватьРаспределение = Ложь, ТекДатаЗадачи = Неопределено) Экспорт
	
	Если ТекДатаЗадачи = Неопределено Тогда
		ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;		
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
	НоваяЗадача.Дата 				= ТекДатаЗадачи;
	НоваяЗадача.Наименование = СокрЛП(БП.НоменклатурнаяГруппа.Наименование) + " " 
		+ ТочкаМаршрута.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ТекИсполнитель;
	
	НоваяЗадача.ОбъектЗадачи 		= БП.НоменклатурнаяГруппа;
	
	НоваяЗадача.Записать();
		
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
		
КонецПроцедуры

Процедура СформироватьЗадачуСогласованиеСтатейЗатрат(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель, Отказ = Ложь, ЗаписыватьРаспределение = Ложь, ТекДатаЗадачи = Неопределено) Экспорт
	
	Если ТекДатаЗадачи = Неопределено Тогда
		ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;	
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
	НоваяЗадача.Дата 				= ТекДатаЗадачи;
	НоваяЗадача.Наименование = СокрЛП(БП.СтатьяЗатрат.Наименование) + " " 
		+ ТочкаМаршрута.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ТекИсполнитель;
	
	НоваяЗадача.ОбъектЗадачи 		= БП.СтатьяЗатрат;
	
	НоваяЗадача.Записать();
		
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
КонецПроцедуры

Процедура СформироватьЗадачуСогласованиеСтатейПрочихДоходовИРасходов(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель, Отказ = Ложь, ЗаписыватьРаспределение = Ложь, ТекДатаЗадачи = Неопределено) Экспорт
	
	Если ТекДатаЗадачи = Неопределено Тогда
		ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;	
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
	НоваяЗадача.Дата 				= ТекДатаЗадачи;
	НоваяЗадача.Наименование = СокрЛП(БП.СтатьяПрочихДоходовИРасходов.Наименование) + " " 
		+ ТочкаМаршрута.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ТекИсполнитель;
	
	НоваяЗадача.ОбъектЗадачи 		= БП.СтатьяПрочихДоходовИРасходов;
	
	НоваяЗадача.Записать();
		
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
КонецПроцедуры

Функция ПолучитьМассивРодителейПодразделения(Знач ТекПодразделение)
	
	Массив = Новый Массив;
	
	Пока ЗначениеЗаполнено(ТекПодразделение) Цикл
		Массив.Добавить(ТекПодразделение);
		ТекПодразделение = ТекПодразделение.Родитель;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Процедура СформироватьЗадачуИсполнителямДоговоры(БП, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители = Неопределено) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	ЗапросИсполнителей = Новый Запрос(
	"ВЫБРАТЬ
	|	РолиИИсполнители.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Роль = &РольИсполнителей
	|	И ВЫБОР
	|			КОГДА &ОтборПоОрганизации
	|				ТОГДА РолиИИсполнители.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ");
									  
	РольИсполнителей = Неопределено;									  
	Если ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ПроверкаДФМ;
	//Сторчевой А.Н. D2016-1222-3124 {
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехБлоком Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ttk_СотрудникТехБлока;
	// } Сторчевой А.Н. D2016-1222-3124
	//Сторчевой А.Н. D2016-1207-3107 {
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеАудитором Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ttk_Аудитор;
	// } Сторчевой А.Н. DD2016-1207-3107
	//Сторчевой А.Н. D2017-0517-3373 {
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДСиМТО Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ttk_СотрудникДСиМТО;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехническимДиректором Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ttk_ТехническийДиректор;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеКазначейством Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СотрудникДК;
	// } Сторчевой А.Н. D2017-0517-3373
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеПД;
		
	//Сторчевой А.Н. 77163404 23.08.2017 {
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеАД Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ttk_СотрудникАД;
	// } Сторчевой А.Н. 77163404 23.08.2017
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеАД Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ttk_СотрудникАД;
	//Сторчевой А.Н. 77150592 31.07.2017 {
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДТПиР Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ttk_СотрудникДТПиР;
	// } Сторчевой А.Н. 77150592 31.07.2017
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеБухгалтером;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеПервымЛицом Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеПЛ;		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.РегистрацияДоговора Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ОбщийОтдел;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеДВКУР;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеПВП Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ПервыйВицеПрезидент;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СотрудникИнициаторКомпании;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДИБ Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеДИБ;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДЭБ Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеСОКДЭБ;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДополнительноеСогласованиеБухгалтером Тогда
		РольИсполнителей = //Сторчевой А.Н. D2016-1207-3107 {Справочники.РолиИсполнителей.СотрудникИнициаторКомпании;	
							Справочники.РолиИсполнителей.ttk_СогласованиеЗакупкиМКР;// } Сторчевой А.Н. DD2016-1207-3107
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДирКСП Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеДирКСП;	
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеРуководителемПД Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.РуководительПД;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеОдобрениеСДилиОСА Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеПД_ОдобрениеСДилиОСА;			
	КонецЕсли;
		
	Если РольИсполнителей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// АБС ВСТАВКА АБС-Ф
	// По договорам на статусах "Согласование ПД" и "Подписание и регистрация" 
	//  зона ответственности распределяется с учетом организации	
	// На статусе ПроверкаДФМ (Проверка ОФК)
	ОтборПоОрганизации = Ложь;
	ТекОрганизацияДоговора = БП.ДоговорКонтрагента.Организация;
	
	Если РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеПД ИЛИ 
		 РольИсполнителей = Справочники.РолиИсполнителей.ОбщийОтдел ИЛИ
		 РольИсполнителей = Справочники.РолиИсполнителей.ПроверкаДФМ ИЛИ
		 // АБС ВСТАВКА Фролов 20120126 Разделим роль Согласование бухгалтером по организации
		 РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеБухгалтером ИЛИ
		 // АБС ВСТАВКА Фролов 20120228 Разделим роль Согласование ДВКУР по организации
		 РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеДВКУР
		 // АБС ВСТАВКА Фролов 20120727
		 ИЛИ 
		 РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеСОКДЭБ ИЛИ
		 РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеДИБ
		 // АБС ВСТАВКА Фролов 20120727 КОНЕЦ
		 //Сторчевой А.Н. D2016-1207-3107 {
		 ИЛИ РольИсполнителей = Справочники.РолиИсполнителей.ttk_СотрудникТехБлока 
		 ИЛИ РольИсполнителей = Справочники.РолиИсполнителей.ttk_СогласованиеЗакупкиМКР 
		 // } Сторчевой А.Н. DD2016-1207-3107
		//Сторчевой А.Н. D2017-0517-3373 {
		 ИЛИ РольИсполнителей = Справочники.РолиИсполнителей.ttk_СотрудникДСиМТО 
		 ИЛИ РольИсполнителей = Справочники.РолиИсполнителей.ttk_ТехническийДиректор 
		 ИЛИ РольИсполнителей = Справочники.РолиИсполнителей.СотрудникДК 
		// } Сторчевой А.Н. D2017-0517-3373
		//Сторчевой А.Н. 77150592 31.07.2017 {
		ИЛИ РольИсполнителей = Справочники.РолиИсполнителей.ttk_СотрудникДТПиР
		// } Сторчевой А.Н. 77150592 31.07.2017
		//Сторчевой А.Н. 77163404 23.08.2017 {
		ИЛИ РольИсполнителей = Справочники.РолиИсполнителей.ttk_СотрудникАД
		// } Сторчевой А.Н. 77163404 23.08.2017
		Тогда
		 
		 ОтборПоОрганизации = Истина;
		 
	КонецЕсли; 	
	
	ЗапросИсполнителей.УстановитьПараметр("ОтборПоОрганизации", ОтборПоОрганизации);
	ЗапросИсполнителей.УстановитьПараметр("Организация", ТекОрганизацияДоговора);
	
	ЗапросИсполнителей.УстановитьПараметр("РольИсполнителей", РольИсполнителей);
	
	//Сторчевой А.Н. 77125458 06.06.2017 { 
	//Задачи по статусам КТТК
	ТекСтатусДоговора = БП.ДоговорКонтрагента.абс_СтатусДоговора;
	ОрганизацияКТТК = Неопределено;
	Если ТекСтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР 
		ИЛИ ТекСтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеДирКСП 
		ИЛИ ТекСтатусДоговора = Перечисления.абсСтатусыДоговоров.ОдобрениеСДилиОСА 
		ИЛИ ТекСтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеПД 
		ИЛИ ТекСтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД 
		ИЛИ ТекСтатусДоговора = Перечисления.абсСтатусыДоговоров.ttk_СогласованиеАудитором 
		ИЛИ ТекСтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеПВП 
		Тогда
		ОрганизацияКТТК = ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК;
		ЗапросИсполнителей.УстановитьПараметр("ОтборПоОрганизации", Истина);
		ЗапросИсполнителей.УстановитьПараметр("Организация", ОрганизацияКТТК);
	КонецЕсли;
	// } Сторчевой А.Н.	77125458 06.06.2017
	
	ВыборкаИсполнители = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута,
		ЗапросИсполнителей.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель"));		
		
	ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();		
		
	// 1. Найдем последнюю распределенную задачу по пользователю
	// 2. Получим настройку распределения
	// 3. Распределеним следующую задачу
	
	Если ТочкаМаршрута = БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора 
		//Сторчевой А.Н. 77118886 {                                   
		И НЕ БП.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ttk_СогласованиеПДМКР
		// } Сторчевой А.Н. 77118886 
		Тогда
		
		Если НЕ ЗначениеЗаполнено(БП.ДоговорКонтрагента.абс_ОтветственныйПД) Тогда
				
			// Попытаемся получить исполнителя ПД по подразделению инициатора договора.
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	абс_НастройкаДляРаспределенияЗадачПД.Исполнитель
			|ИЗ
			|	РегистрСведений.абс_НастройкаДляРаспределенияЗадачПД КАК абс_НастройкаДляРаспределенияЗадачПД
			|ГДЕ
			|	абс_НастройкаДляРаспределенияЗадачПД.Использование
			|	И абс_НастройкаДляРаспределенияЗадачПД.Подразделение В(&Подразделение)");
			Запрос.УстановитьПараметр("Подразделение", абс_БизнесПроцессыПривелегированный.ПолучитьМассивРодителейПодразделения(БП.ДоговорКонтрагента.абс_Ответственный.абс_Сотрудник.ПодразделениеОрганизации));
			
			ВыборкаИсполнителей = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаИсполнителей.Количество() > 0 Тогда
				
				Пока ВыборкаИсполнителей.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаИсполнителей.Исполнитель) Тогда
						абс_БизнесПроцессы.СформироватьЗадачуСогласованиеДоговора(БП, ТочкаМаршрута, ФормируемыеЗадачи, ВыборкаИсполнителей.Исполнитель, , Ложь, ТекДатаЗадачи);					
					КонецЕсли;
				КонецЦикла;
				
				Возврат;
				
			КонецЕсли;
			
			ЗапросЗадач = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РЗ.Пользователь КАК Исполнитель,
			|	РЗ.Период
			|ИЗ
			|	РегистрСведений.абс_РаспределениеЗадач КАК РЗ
			|ГДЕ
			|	ВЫБОР
			|			КОГДА &ОтборПоОрганизации
			|				ТОГДА РЗ.Организация = &Организация
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	РЗ.Период УБЫВ");
			
			//ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
			
			ЗапросЗадач.УстановитьПараметр("ОтборПоОрганизации", ОтборПоОрганизации);
			ЗапросЗадач.УстановитьПараметр("Организация", ТекОрганизацияДоговора);			
			
			ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
			
			ПользовательКрайнейЗадачи = Неопределено;
			
			Если ВыборкаЗадач.Следующий() Тогда
				ПользовательКрайнейЗадачи = ВыборкаЗадач.Исполнитель;
			КонецЕсли;
			
			Если ПользовательКрайнейЗадачи = Неопределено Тогда
				//АБС ВСТАВКА 49293  13.11.2014 11:45:57  Шамов
				//ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при распределении задач пользователям ПД.");
				//Возврат;
				ПользовательКрайнейЗадачи = Справочники.Пользователи.ПустаяСсылка();
				//АБС ВСТАВКА 49293 КОНЕЦ
			КонецЕсли;		
			
			ЗапросНастройка = Новый Запрос(
			"ВЫБРАТЬ
			|	РолиИИсполнители.Исполнитель,
			|	РолиИИсполнители.абс_ИндексИсполнителя КАК абс_ИндексИсполнителя
			|ИЗ
			|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
			|ГДЕ
			|	РолиИИсполнители.Роль = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.СогласованиеПД)
			|	И (НЕ РолиИИсполнители.Исполнитель В
			|				(ВЫБРАТЬ
			|					РолиИИсполнители.Исполнитель
			|				ИЗ
			|					РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
			|				ГДЕ
			|					РолиИИсполнители.Роль = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.СуперПользователь)))
			|	И (НЕ РолиИИсполнители.абс_ИндексИсполнителя = 0)
			|	И ВЫБОР
			|			КОГДА &ОтборПоОрганизации
			|				ТОГДА РолиИИсполнители.Организация = &Организация
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	абс_ИндексИсполнителя");
			
			ЗапросНастройка.УстановитьПараметр("ОтборПоОрганизации", ОтборПоОрганизации);
			ЗапросНастройка.УстановитьПараметр("Организация", ТекОрганизацияДоговора);	
			
			ВыборкаНастройки = ЗапросНастройка.Выполнить().Выбрать();
			
			ПользовательТекущейЗадачи = Неопределено;
			
			ВыборкаНастройки.НайтиСледующий(Новый Структура("Исполнитель", ПользовательКрайнейЗадачи));
			
			Если НЕ ВыборкаНастройки.Следующий() Тогда
				
				ВыборкаНастройки.Сбросить();
				
				ВыборкаНастройки.Следующий();
				
			КонецЕсли;
			
			ПользовательТекущейЗадачи = ВыборкаНастройки.Исполнитель;
			
			Если НЕ ЗначениеЗаполнено(ПользовательТекущейЗадачи) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при распределении задач пользователям ПД.");
				Возврат;
			КонецЕсли;
			
		Иначе
			
			ПользовательТекущейЗадачи = БП.ДоговорКонтрагента.абс_ОтветственныйПД;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПользовательТекущейЗадачи) Тогда
			абс_БизнесПроцессы.СформироватьЗадачуСогласованиеДоговора(БП, ТочкаМаршрута, ФормируемыеЗадачи, ПользовательТекущейЗадачи, ,Истина, ТекДатаЗадачи,, ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК);
			Возврат;
		КонецЕсли;
		
		
	//абс Урал Изменение 28.01.2014   Оптимизация бизнес-процессов
	//КонецЕсли
		Для Каждого ТекИсполнитель Из ВыборкаИсполнители Цикл		
			абс_БизнесПроцессы.СформироватьЗадачуСогласованиеДоговора(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель, ,Истина, ТекДатаЗадачи);	
		КонецЦикла;
	Иначе
		Если ВыборкаИсполнители.Количество() Тогда
			абс_БизнесПроцессы.СформироватьЗадачуСогласованиеДоговора(БП, ТочкаМаршрута, ФормируемыеЗадачи,,,, ТекДатаЗадачи, РольИсполнителей, ОрганизацияКТТК);
		КонецЕсли;
	КонецЕсли
	//\\абс Урал
	
КонецПроцедуры


Процедура СформироватьЗадачиДляРуководителейБлока(БП, ТочкаМаршрута, ФормируемыеЗадачи,ЦФО,Отказ)  Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_РуководителиБлока.Пользователь
		|ИЗ
		|	РегистрСведений.абс_РуководителиБлока КАК абс_РуководителиБлока
		|ГДЕ
		|	абс_РуководителиБлока.ЦФО = &ЦФО";

	Запрос.УстановитьПараметр("ЦФО", ЦФО);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();		
	МассивИсполнителей  = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТипЗнч(БП) = Тип("БизнесПроцессСсылка.абсСогласованиеДоговоров") Тогда
			СформироватьЗадачуСогласованиеДоговора(БП, ТочкаМаршрута, ФормируемыеЗадачи, ВыборкаДетальныеЗаписи.Пользователь, ,Истина, ТекДатаЗадачи);	
		Иначе	
			МассивИсполнителей.Добавить(ВыборкаДетальныеЗаписи.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(БП) = Тип("БизнесПроцессСсылка.абсСогласованиеЗакупочногоЗаказа") И МассивИсполнителей.Количество() > 0 Тогда
		СформироватьЗадачуИсполнителямЗЗ(БП, ТочкаМаршрута, ФормируемыеЗадачи, МассивИсполнителей);
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Отказ = Истина;	
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найдены пользователи руководители блока.", Истина);
	КонецЕсли;
	
КонецПроцедуры


Процедура СформироватьЗадачуИсполнителямДоговорыПодряда(БП, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители = Неопределено) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	ЗапросИсполнителей = Новый Запрос(
	"ВЫБРАТЬ
	|	РолиИИсполнители.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Роль = &РольИсполнителей
	|	И ВЫБОР
	|			КОГДА &ОтборПоОрганизации
	|				ТОГДА РолиИИсполнители.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ");
									  
	РольИсполнителей = Неопределено;									  
	Если ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ПодписаниеВторойСтороны Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СотрудникИнициаторКомпании;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеСогласованиеРукЦФО Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.РуководительЦФО;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ПроверкаЭБ Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ПроверкаЭБ;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеСогласованиеГлавнымБухгалтером Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.РуководительБухгалтерскойГруппы;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеСогласованиеОтделомКадров Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеКадрами;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеПодписание Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СотрудникИнициаторКомпании;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеРегистрацияСотрудника Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.РегистрацияСотрудника;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеРегистрацияНомераДоговора Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.РегистрацияНомераДоговора;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеПроверкаПД Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеПД;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеЗакрытиеБухгалтерией Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ЗакрытиеБухгалтерией;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеЗакрытиеОтделомКадров Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ЗакрытиеОтделомКадров;  
	КонецЕсли;
		
	Если РольИсполнителей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	// АБС ВСТАВКА АБС-Ф
	// По договорам на статусах "Согласование ПД" и "Подписание и регистрация" 
	//  зона ответственности распределяется с учетом организации	
	// На статусе ПроверкаДФМ (Проверка ОФК)
	ОтборПоОрганизации = Истина;
	ТекОрганизацияДоговора = БП.ДоговорПодряда.Организация;
	
	ЗапросИсполнителей.УстановитьПараметр("ОтборПоОрганизации", ОтборПоОрганизации);
	ЗапросИсполнителей.УстановитьПараметр("Организация", ТекОрганизацияДоговора);
	
	ЗапросИсполнителей.УстановитьПараметр("РольИсполнителей", РольИсполнителей);
	
	ВыборкаИсполнители = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута,
		ЗапросИсполнителей.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель"));
		
	Если ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеСогласованиеРукЦФО Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка
		|ИЗ
		|	РегистрСведений.абс_ОтветственныеЛицаПодразделений.СрезПоследних(
		|			&ТекущаяДата,
		|			СтруктурнаяЕдиница = &Подразделение
		|				И Организация = &Организация) КАК абс_ОтветственныеЛицаПодразделенийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО абс_ОтветственныеЛицаПодразделенийСрезПоследних.Сотрудник = Пользователи.абс_Сотрудник
		|ГДЕ
		|	абс_ОтветственныеЛицаПодразделенийСрезПоследних.Активен = ИСТИНА";
		 
		Запрос.УстановитьПараметр("ТекущаяДата", абс_СерверныеФункции.ПолучитьДатуСервера());
		Запрос.УстановитьПараметр("Подразделение", БП.ДоговорПодряда.абс_ЦФО);
		Запрос.УстановитьПараметр("Организация", БП.ДоговорПодряда.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаРезультатЗапроса = РезультатЗапроса.Выгрузить();

	КонецЕсли;	 
	
	Если  ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеСогласованиеРукЦФО Тогда
		Для Каждого ТекИсполнитель Из ВыборкаИсполнители Цикл

			Если ТаблицаРезультатЗапроса.Найти(ТекИсполнитель, "Ссылка")<> Неопределено Тогда
				абс_БизнесПроцессы.СформироватьЗадачуСогласованиеДоговораПодряда(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель, ,Истина, ТекДатаЗадачи,Неопределено);
			КонецЕсли;
		КонецЦикла;
	Иначе	
		абс_БизнесПроцессы.СформироватьЗадачуСогласованиеДоговораПодряда(БП, ТочкаМаршрута, ФормируемыеЗадачи, Неопределено, ,Истина, ТекДатаЗадачи,РольИсполнителей);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗадачуИсполнителямАктыПриёмки(БП, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители = Неопределено) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	ЗапросИсполнителей = Новый Запрос(
	"ВЫБРАТЬ
	|	РолиИИсполнители.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Роль = &РольИсполнителей
	|	И ВЫБОР
	|			КОГДА &ОтборПоОрганизации
	|				ТОГДА РолиИИсполнители.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ");
									  
	РольИсполнителей = Неопределено;									  
	Если ТочкаМаршрута = БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеСогласованиеРукДеп Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеРукДепАПВР;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеОбработкаБухгалтером Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ОбработкаБухгалтеромАПВР;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеСогласованиеПВП Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеПВПАПВР;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеРасчётБухгалтером Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.РасчётБухгалтеромАПВР;
	КонецЕсли;
		
	Если РольИсполнителей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоОрганизации = Истина;
	ТекОрганизация = БП.АктПриёмкиВыполненныхРабот.Организация;
	
	ЗапросИсполнителей.УстановитьПараметр("ОтборПоОрганизации", ОтборПоОрганизации);
	ЗапросИсполнителей.УстановитьПараметр("Организация", ТекОрганизация);
	
	ЗапросИсполнителей.УстановитьПараметр("РольИсполнителей", РольИсполнителей);
	
	ВыборкаИсполнители = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута,
		ЗапросИсполнителей.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель"));		
		
	ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();		
		
	Для Каждого ТекИсполнитель Из ВыборкаИсполнители Цикл
			
		СформироватьЗадачуСогласованиеАктаПриёмки(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель, ,Истина, ТекДатаЗадачи);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЗадачуИсполнителямСчетаНаоплату(БП, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители, ТекДатаЗадачи = Неопределено) Экспорт
	
	Если ТекДатаЗадачи = Неопределено Тогда
		ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
		
	МассивИсполнителей = Новый Массив();
	
	Если НЕ ТипЗнч(Исполнители) = Тип("Массив") Тогда
		МассивИсполнителей.Добавить(Исполнители);
	Иначе
		МассивИсполнителей = Исполнители;
	КонецЕсли;		
	
	ФормируемыеЗадачи.Очистить();
		
	Для Каждого ТекИсполнитель Из МассивИсполнителей Цикл
		
		НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
		
		НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		НоваяЗадача.Дата 				= ТекДатаЗадачи;
		НоваяЗадача.Наименование 		= Строка(БП.СчетНаОплату) + " " + ТочкаМаршрута.НаименованиеЗадачи + ".";
		
		НоваяЗадача.Исполнитель			= ТекИсполнитель;
		
		НоваяЗадача.ОбъектЗадачи 		= БП.СчетНаОплату;
		
		НоваяЗадача.Записать();
		
		ФормируемыеЗадачи.Добавить(НоваяЗадача);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура СформироватьГрупповуюЗадачуИсполнителямСчетаНаОплату(БП, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители = Неопределено, Организация = Неопределено) Экспорт
	
	ЗапросИсполнителей = Новый Запрос(
	"ВЫБРАТЬ
	|	РолиИИсполнители.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Роль = &РольИсполнителей
	|	И ВЫБОР
	|			КОГДА &ОтборПоОрганизации
	|				ТОГДА РолиИИсполнители.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ");
	
	РольИсполнителей = Неопределено;	
	СписокТочекДК = Новый СписокЗначений; 	
	СписокТочекДК.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласован);   	
	Если ТочкаМаршрута = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеДРУ Тогда   		
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеДРУ;
	//++ Задача № 8630 Логинчев А.С. 21.05.2012 11:25:54
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.НалоговыйКонтроль Тогда
	    РольИсполнителей = Справочники.РолиИсполнителей.НалоговыйКонтроль;    
	//-- Задача № 8630 Логинчев А.С.   		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеОФК 
		ИЛИ ТочкаМаршрута = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопСогласованиеОФК Тогда    		
		РольИсполнителей = Справочники.РолиИсполнителей.РуководительОФК;     		
		//Филиализация
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ 
		ИЛИ ТочкаМаршрута = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопДействиеУтверждениеРуководителемДФМ Тогда
	//Филиализация        	
	РольИсполнителей = Справочники.РолиИсполнителей.РуководительДФМ;
	//Филиализация
	ИначеЕсли ТочкаМаршрута = Бизнеспроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеПВП 
		ИЛИ ТочкаМаршрута = Бизнеспроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопДействиеУтверждениеПВП  Тогда
	//Филиализация
		РольИсполнителей = Справочники.РолиИсполнителей.ПервыйВицеПрезидент;        		
	//Филиализация
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеПрезидентом ИЛИ ТочкаМаршрута = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопДействиеУтверждениеПрезидентом Тогда
	//Филиализация    	
		РольИсполнителей = Справочники.РолиИсполнителей.Президент;    		
	ИначеЕсли НЕ СписокТочекДК.НайтиПоЗначению(ТочкаМаршрута) = Неопределено Тогда 		
		РольИсполнителей = Справочники.РолиИсполнителей.СотрудникДК;  		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.СогласованиеДЭФ Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеБюджетаДЭИ;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопСогласованиеКТТК Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеКТТК;
	//Филиализация	
	КонецЕсли;
	
	Если РольИсполнителей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросИсполнителей.УстановитьПараметр("ОтборПоОрганизации"	, НЕ Организация = Неопределено);
	ЗапросИсполнителей.УстановитьПараметр("Организация"			, Организация);  		
	ЗапросИсполнителей.УстановитьПараметр("РольИсполнителей"	, РольИсполнителей);
	
	ВыборкаИсполнителей = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута, 
		ЗапросИсполнителей.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель"));
		
	ТекДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	ОрганизацияКТТК = ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК;
	
	//Для Каждого ТекИсполнитель Из ВыборкаИсполнителей Цикл
	Если ВыборкаИсполнителей.Количество() > 0 Тогда 
		НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();  	
		НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		НоваяЗадача.Дата 				= ТекДата;
		НоваяЗадача.Наименование 		= Строка(БП.СчетНаОплату) + " " + ТочкаМаршрута.НаименованиеЗадачи + ".";  		
		//НоваяЗадача.Исполнитель		= ТекИсполнитель;    		
		НоваяЗадача.ОбъектЗадачи 		= БП.СчетНаОплату; 		
		НоваяЗадача.Роль                = РольИсполнителей;
		//АБС ВСТАВКА №29763 НАЧАЛО «10 декабря 2014 г.», Пополитов
		Если ТочкаМаршрута = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопСогласованиеКТТК Тогда
			НоваяЗадача.Организация 	= ОрганизацияКТТК;
		КонецЕсли;
		//\\АБС ВСТАВКА №29763 КОНЕЦ
		НоваяЗадача.Записать();    		
		ФормируемыеЗадачи.Добавить(НоваяЗадача);
	КонецЕсли;
	//КонецЦикла;	
	
	//АБС ВСТАВКА №29763 НАЧАЛО «10 декабря 2014 г.», Пополитов
 	абс_ДобавитьЗадачуСогласованияКТТК(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекДата);
 	//\\АБС ВСТАВКА №29763 КОНЕЦ  
	
КонецПроцедуры

//АБС ВСТАВКА №29763 НАЧАЛО «10 декабря 2014 г.», Пополитов
Процедура абс_ДобавитьЗадачуСогласованияКТТК(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекДата) Экспорт
	
	Если не ТочкаМаршрута = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопСогласованиеКТТК Тогда
		Возврат;
	КонецЕсли;	
	
	СчетНаОплату = БП.СчетНаОплату;
	ПределСуммыУтверждения = ПолучитьПределСуммыУтвержденияПоРоли(
								Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплатуФилиализация,
								Справочники.РолиИсполнителей.РуководительОФК);	
								
	Если СчетНаОплату.СуммаПлатежа <= ПределСуммыУтверждения Тогда
		Возврат;	
	КонецЕсли;	
	
	Наименование    = Строка(СчетНаОплату) + " " + ТочкаМаршрута.НаименованиеЗадачи + ".";
	БизнесПроцесс   = БП.Ссылка;	
	ОрганизацияКТТК = ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК;	
	
	ЗапросИсполнителей = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РолиИИсполнители.Исполнитель КАК Исполнитель,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Роль = &РуководительЦФО
	|	И РолиИИсполнители.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РолиИИсполнители.Исполнитель,
	|	1
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Роль = &СогласованиеКТТК
	|	И РолиИИсполнители.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ.Исполнитель,
	|	СУММА(ВТ.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Пользователи
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Исполнитель
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ.Количество) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_СчетНаОплату.ЦФО
	|ПОМЕСТИТЬ ВТ_ЦФО
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|ГДЕ
	|	абс_СчетНаОплату.Ссылка = &СчетНаОплату
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	абс_СчетНаОплату.ЗакупочныйЗаказ.ЦФО
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|ГДЕ
	|	абс_СчетНаОплату.Ссылка = &СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ОтветственныеЛицаПодразделений.Сотрудник
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	РегистрСведений.абс_ОтветственныеЛицаПодразделений КАК абс_ОтветственныеЛицаПодразделений
	|ГДЕ
	|	абс_ОтветственныеЛицаПодразделений.Организация = &Организация
	|	И абс_ОтветственныеЛицаПодразделений.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТ_Пользователи.Исполнитель.абс_Сотрудник
	|			ИЗ
	|				ВТ_Пользователи КАК ВТ_Пользователи)
	|	И абс_ОтветственныеЛицаПодразделений.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ВТ_ЦФО.ЦФО
	|			ИЗ
	|				ВТ_ЦФО КАК ВТ_ЦФО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Пользователи.Ссылка КАК ТекИсполнитель
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.абс_Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТ_Сотрудники.Сотрудник
	|			ИЗ
	|				ВТ_Сотрудники КАК ВТ_Сотрудники)");
		
	ЗапросИсполнителей.УстановитьПараметр("СчетНаОплату"    , СчетНаОплату);
	ЗапросИсполнителей.УстановитьПараметр("СогласованиеКТТК", Справочники.РолиИсполнителей.СогласованиеКТТК);
	ЗапросИсполнителей.УстановитьПараметр("РуководительЦФО"	, Справочники.РолиИсполнителей.РуководительЦФО);  		
	ЗапросИсполнителей.УстановитьПараметр("Организация"     , ОрганизацияКТТК);
	
	Результат = ЗапросИсполнителей.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();  	
		НоваяЗадача.БизнесПроцесс 		= БизнесПроцесс;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		НоваяЗадача.Дата 				= ТекДата;
		НоваяЗадача.Наименование 		= Наименование;  		
		НоваяЗадача.Исполнитель		    = Результат.ТекИсполнитель;    		
		НоваяЗадача.ОбъектЗадачи 		= СчетНаОплату;
		НоваяЗадача.Организация 		= ОрганизацияКТТК;
		НоваяЗадача.Записать();    		
		ФормируемыеЗадачи.Добавить(НоваяЗадача);
	КонецЦикла;	
	
КонецПроцедуры	
//\\АБС ВСТАВКА №29763 КОНЕЦ

Процедура абс_ПередЗаписьюДокументаПроверкаСтатусовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА 36118  12.12.2013 13:40:07  Пугачев
	Если Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	//АБС ВСТАВКА 36118 КОНЕЦ 
	
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 18:53:04  Поставка
	КонтрольВАктеСверке = глЗначениеПеременной("абс_ВклКонтрольПоСтатусамДоговоровВАктеСверке");
	КонтрольВСФ_Выданных= глЗначениеПеременной("абс_ВклКонтрольПоСтатусамДоговоровВСФ_Выданных");	
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
	
	МетаданныеИсточника = Источник.Метаданные();
	
	ТекстСообщения = "Проверка контрагента и договора по документу " + Источник + ":";	
	
	ЭтоОплаченноеППИ = Ложь;
	
	Если МетаданныеИсточника.Имя = "ПлатежноеПоручениеИсходящее" Тогда
		
		СтатусППИ = Источник.Статус; 
		
		Если СтатусППИ = Перечисления.абсСтатусыПлатежей.Отправлено ИЛИ 
			 СтатусППИ = Перечисления.абсСтатусыПлатежей.ПеренесенаВГК ИЛИ 
			 СтатусППИ = Перечисления.абсСтатусыПлатежей.Оплачен Тогда
			 
			 ЭтоОплаченноеППИ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоОплаченноеППИ Тогда
		Возврат;
	КонецЕсли;
	
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
	Если НЕ МетаданныеИсточника.Реквизиты.Найти("Контрагент") = Неопределено Тогда
		Если ЗначениеЗаполнено(Источник.Контрагент) Тогда
			Если ТипЗнч(Источник.Контрагент.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
				
				// АБС ИЗМЕНЕНО АБС-Ф 20111117 Заявка на изменение реквизитов контрагентов
				//Если НЕ Источник.Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
				Если НЕ Источник.Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный И
					НЕ Источник.Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов Тогда				
					// АБС ВСТАВКА АБС-Ф 20111117 Заявка на изменение реквизитов контрагентов КОНЕЦ
					
					//Если НЕ абс_БизнесПроцессы.ПолучитьСтатусКонтрагентаПоРегистру(Источник.Контрагент.Ссылка) = Перечисления.абсСтатусыКонтрагентов.Активный Тогда	
					//Если НЕ абс_БизнесПроцессы.ПолучитьСтатусКонтрагентаПоРегистру(Источник.Контрагент.Ссылка, Источник.Дата) = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
					
					ТекстСообщения = ТекстСообщения + Символы.ПС + "Контрагент не находится в статусе ""Активный"".";
					Отказ = Истина;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ МетаданныеИсточника.Реквизиты.Найти("ДоговорКонтрагента") = Неопределено Тогда
		Если ЗначениеЗаполнено(Источник.ДоговорКонтрагента) Тогда
			Если (НЕ Источник.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение И НЕ
				
				//Родин лимиты по договорам
				Источник.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка И НЕ
				Источник.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки И НЕ
				Источник.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки) Тогда
				//Родин лимиты по договорам
				
				//Если НЕ абс_БизнесПроцессы.ПолучитьСтатусДоговораПоРегистру(Источник.ДоговорКонтрагента, Источник.Дата) = Перечисления.абсСтатусыДоговоров.Исполнение Тогда
				
				//Абс вставка №14287 Начало
				Если (МетаданныеИсточника.Имя = "АктСверкиВзаиморасчетов" и не КонтрольВАктеСверке)
					или (МетаданныеИсточника.Имя = "СчетФактураВыданный" 
					и не КонтрольВСФ_Выданных
					и НЕ МетаданныеИсточника.Реквизиты.Найти("ВидСчетаФактуры") = Неопределено
					и Источник.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс) Тогда
					//выключен контроль
				Иначе	   				
					ТекстСообщения = ТекстСообщения + Символы.ПС + "Договор контрагента не находится в статусе ""Исполнение"".";
					Отказ = Истина;
				КонецЕсли;	
				//\\Абс вставка №14287 Конец
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Для платежных поручений проверяем табличную часть с расшифровкой платежа.
	
	Для Каждого ТЧ из МетаданныеИсточника.ТабличныеЧасти Цикл
		
		ПроверятьКонтрагента 	= Ложь;
		ПроверятьДоговор 		= Ложь;
		
		Если НЕ ТЧ.Реквизиты.Найти("Контрагент") = Неопределено Тогда
			
			ПроверятьКонтрагента = Истина;
						
		КонецЕсли;
		
		Если НЕ ТЧ.Реквизиты.Найти("ДоговорКонтрагента") = Неопределено Тогда
			
			ПроверятьДоговор = Истина;
			
			//Абс вставка №14287 Начало
			Если (МетаданныеИсточника.Имя = "АктСверкиВзаиморасчетов" и не КонтрольВАктеСверке)
				или (МетаданныеИсточника.Имя = "СчетФактураВыданный" 
						и не КонтрольВСФ_Выданных
						и НЕ МетаданныеИсточника.Реквизиты.Найти("ВидСчетаФактуры") = Неопределено
						и Источник.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс) Тогда 
				ПроверятьДоговор = Ложь;
			КонецЕсли;	
			//\\Абс вставка №14287 Конец
						
		КонецЕсли;
		
		//абс выгрузка остатков ДЗО Начало
		Попытка
			Если ПараметрыСеанса.ТекущийПользователь.абс_РасширенноеПравоПроведенияДокументов  ТОгда
				ПроверятьКонтрагента = Ложь;
				ПроверятьДоговор = Ложь;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		//абс выгрузка остатков ДЗО Конец
		
		Если ПроверятьКонтрагента ИЛИ ПроверятьДоговор Тогда
			
			Для Каждого СтрокаТЧ Из Источник[ТЧ.Имя] Цикл
				
				Если ПроверятьКонтрагента Тогда
					Если СтрокаТЧ.Контрагент.Ссылка = Тип("СправочникСсылка.Контрагенты") Тогда
						
					// АБС ИЗМЕНЕНО АБС-Ф 20111117 Заявка на изменение реквизитов контрагентов
					//Если НЕ СтрокаТЧ.Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
					Если НЕ СтрокаТЧ.Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный И 
						НЕ СтрокаТЧ.Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов Тогда
						
					// АБС ИЗМЕНЕНО АБС-Ф 20111117 Заявка на изменение реквизитов контрагентов КОНЕЦ						
						
						ТекстСообщения = ТекстСообщения + Символы.ПС + "В строке " + СтрокаТЧ.НомерСтроки + " контрагент не находится в статусе ""Активный"".";
						Отказ = Истина;
						
					КонецЕсли;
					КонецЕсли;
				
				КонецЕсли;
				
				Если ПроверятьДоговор Тогда
					//Родин лимиты по договорам
					Если СтрокаТЧ.ДоговорКонтрагента.Ссылка = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						Если (НЕ СтрокаТЧ.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение И Не 
							СтрокаТЧ.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка И Не 
							СтрокаТЧ.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки И Не 
							СтрокаТЧ.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки) Тогда
							
							ТекстСообщения = ТекстСообщения + Символы.ПС + "В строке " + СтрокаТЧ.НомерСтроки + " договор контрагента не находится в статусе ""Исполнение"".";
							Отказ = Истина;
							
						КонецЕсли;
					КонецЕсли;
					//Родин лимиты по договорам
				КонецЕсли;
				
			КонецЦикла;
						
		КонецЕсли;
			
	КонецЦикла;
	// Start КТТК Ермолов Е.Л.  06.04.2016 7728122
	Если Источник.Ссылка.Дата > '20160401' Тогда 
		ДатаРегистрации = '00010101';
		//НаборУведомления = РегистрыСведений.абс_ОтправкаУведомленийБП.СоздатьНаборЗаписей();
		//
		//Блокировка = Новый БлокировкаДанных;
		//ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.абс_ОтправкаУведомленийБП");
		//ЭлементБлокировки.УстановитьЗначение("ДокументСсылка", Источник.Ссылка);
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//Блокировка.Заблокировать();
		//НаборУведомления.Отбор.ДокументСсылка.Установить(Источник.Ссылка);
		//НаборУведомления.Прочитать();
		
		Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке")
			ИЛИ ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
			ИЛИ (ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Источник.Ссылка.ЛогЗагрузкиИзАСР =  Документы.абс_ЛогЗагрузкиИзАСР.ПустаяСсылка())
			Тогда
			Если  Источник.Ссылка.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка
				И Источник.абс_Статус <> Перечисления.абс_СтатусыПервичныхДокументов.Отказ   Тогда 
				Запр = Новый ЗАпрос("ВЫБРАТЬ
				             |	абс_МеткаППД.Метка
				             |ИЗ
				             |	РегистрСведений.абс_МеткаППД КАК абс_МеткаППД
				             |ГДЕ
				             |	абс_МеткаППД.Документ = &Ссылка");
				 Запр.УстановитьПараметр("Ссылка", Источник.Ссылка);
				 Если  Запр.Выполнить().Пустой() Тогда 
					Отказ = Истина;
					ТекстСообщения = "Из статуса Подготовка не установив Метку переходить нельзя";
				КонецЕсли;
			// Start КТТК Ермолов Е.Л.  15.06.2016 7733632 
	
			//ИначеЕсли Источник.абс_Статус <> Перечисления.абс_СтатусыПервичныхДокументов.Отказ Тогда 	
			//	Если Не ЕстьОригиналДокумента(Источник, ДатаРегистрации) Тогда 
			//		Если НаборУведомления.Количество() = 0 Тогда 
			//			ЗаписьУведомления = НаборУведомления.Добавить();
			//			ЗаписьУведомления.Период = ДатаРегистрации;		
			//			ЗаписьУведомления.ДокументСсылка = Источник.Ссылка;
			//			ЗаписьУведомления.УведомлениеОтправлено = Ложь;
			//			
			//			ЗаписьУведомления.Ответственный			= глЗначениеПеременной("глТекущийПользователь");
			//			ЗаписьУведомления.ОтправкаИнициатору = Истина;
			//			НаборУведомления.Записать();
			//		КонецЕсли;
			//	Иначе 
			//		БылаРассылка = Ложь;
			//		Для каждого ЗаписьУведомления из НаборУведомления Цикл
			//			Если Не БылаРассылка Тогда 
			//				БылаРассылка = ЗаписьУведомления.УведомлениеОтправлено;
			//			Иначе 
			//				Прервать;
			//			КонецЕсли;
			//		КонецЦикла;
			//		Если Не БылаРассылка Тогда 
			//			НаборУведомления.Очистить();
			//			НаборУведомления.Записать();
			//		КонецЕсли;
			//	КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Start КТТК Ермолов Е.Л.  10.06.2016 7728122

//		Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда 
//// +++ввв 27.06.2016 г.
//			Если Источник.kmw_Статус <> Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Отмена Тогда 
//// ---ввв 27.06.2016 г.
//				Если Не ЕстьОригиналДокумента(Источник, ДатаРегистрации) Тогда 
//					Если НаборУведомления.Количество() = 0 Тогда 
//						ЗаписьУведомления = НаборУведомления.Добавить();
//						ЗаписьУведомления.Период = ДатаРегистрации;		
//						ЗаписьУведомления.ДокументСсылка = Источник.Ссылка;
//						ЗаписьУведомления.УведомлениеОтправлено = Ложь;
//						
//						ЗаписьУведомления.Ответственный			= глЗначениеПеременной("глТекущийПользователь");
//						ЗаписьУведомления.ОтправкаИнициатору = Истина;
//						НаборУведомления.Записать();
//					КонецЕсли;
//				Иначе 
//					БылаРассылка = Ложь;
//					Для каждого ЗаписьУведомления из НаборУведомления Цикл
//						Если Не БылаРассылка Тогда 
//							БылаРассылка = ЗаписьУведомления.УведомлениеОтправлено;
//						Иначе 
//							Прервать;
//						КонецЕсли;
//					КонецЦикла;
//					Если Не БылаРассылка Тогда 
//						НаборУведомления.Очистить();
//						НаборУведомления.Записать();
//					КонецЕсли;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
		Если (ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") И  Источник.Ссылка.ЛогЗагрузкиИзАСР =  Документы.абс_ЛогЗагрузкиИзАСР.ПустаяСсылка())
			ИЛИ ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			Если Источник.Ссылка.абс_СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка
				И Источник.абс_СтатусДокумента <> Перечисления.абс_СтатусыПервичныхДокументов.Отказ Тогда 
				Запр = Новый ЗАпрос("ВЫБРАТЬ
				             |	абс_МеткаППД.Метка
				             |ИЗ
				             |	РегистрСведений.абс_МеткаППД КАК абс_МеткаППД
				             |ГДЕ
				             |	абс_МеткаППД.Документ = &Ссылка");
				 Запр.УстановитьПараметр("Ссылка", Источник.Ссылка);
				 Если  Запр.Выполнить().Пустой() Тогда 
					Отказ = Истина;
					ТекстСообщения = "Из статуса Подготовка не установив Метку переходить нельзя";
				 КонецЕсли;
			//ИначеЕсли  Источник.абс_СтатусДокумента <> Перечисления.абс_СтатусыПервичныхДокументов.Отказ Тогда 	 
			//	Если Не ЕстьОригиналДокумента(Источник, ДатаРегистрации) Тогда 
			//		Если НаборУведомления.Количество() = 0 Тогда 
			//			ЗаписьУведомления = НаборУведомления.Добавить();
			//			ЗаписьУведомления.Период = ДатаРегистрации;		
			//			ЗаписьУведомления.ДокументСсылка = Источник.Ссылка;
			//			ЗаписьУведомления.УведомлениеОтправлено = Ложь;
			//			
			//			ЗаписьУведомления.Ответственный			= глЗначениеПеременной("глТекущийПользователь");
			//			ЗаписьУведомления.ОтправкаИнициатору = Истина;
			//			НаборУведомления.Записать();
			//		КонецЕсли;
			//	Иначе 
			//		БылаРассылка = Ложь;
			//		Для каждого ЗаписьУведомления из НаборУведомления Цикл
			//			Если Не БылаРассылка Тогда 
			//				БылаРассылка = ЗаписьУведомления.УведомлениеОтправлено;
			//			Иначе 
			//				Прервать;
			//			КонецЕсли;
			//		КонецЦикла;
			//		Если Не БылаРассылка Тогда 
			//			НаборУведомления.Очистить();
			//			НаборУведомления.Записать();
			//		КонецЕсли;
			//	КонецЕсли;
	
			КонецЕсли;
			 
		КонецЕсли;
	КонецЕсли;
	// Stop КТТК Ермолов Е.Л.  10.06.2016
	// Stop КТТК Ермолов Е.Л.  06.04.2016
	Если Отказ Тогда
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура СформироватьЗадачуИсполнителямРекласификация(БП, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители = Неопределено, Организация = Неопределено) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	Если Исполнители = Неопределено Тогда
		ЗапросИсполнителей = Новый Запрос(
		"ВЫБРАТЬ
		|	РолиИИсполнители.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|ГДЕ
		|	РолиИИсполнители.Роль = &РольИсполнителей
		|	И ВЫБОР
		|			КОГДА &ОтборПоОрганизации
		|				ТОГДА РолиИИсполнители.Организация = &Организация
		|		КОНЕЦ");
		
		ЗапросИсполнителей.УстановитьПараметр("ОтборПоОрганизации", НЕ Организация = Неопределено);
		ЗапросИсполнителей.УстановитьПараметр("Организация", Организация);
										  
		РольИсполнителей = Неопределено;									  
		Если ТочкаМаршрута = БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.ДействиеСогласованиеДФМ Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеРекласификацииБюджетаДФМ;
			Если БП <> Неопределено 
				и БП.РекласификацияБюджета.ВидОперации = Перечисления.абс_ВидыОперацийРекласификацияБюджета.ПереносЛимитовМеждуПериодами Тогда
				РольИсполнителей = Справочники.РолиИсполнителей.СотрудникИнициаторКомпании;	
			КонецЕсли;	
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.ДействиеСогласованиеДЭИ Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеРекласификацииБюджетаДЭИ;
			Если БП <> Неопределено 
				и БП.РекласификацияБюджета.ВидОперации = Перечисления.абс_ВидыОперацийРекласификацияБюджета.ПереносЛимитовМеждуПериодами Тогда
				РольИсполнителей = Справочники.РолиИсполнителей.СотрудникИнициаторКомпании;	
			КонецЕсли;					
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.ДействиеСогласованиеСотрудникомДК Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.СотрудникДК;
			Если БП <> Неопределено 
				и БП.РекласификацияБюджета.ВидОперации = Перечисления.абс_ВидыОперацийРекласификацияБюджета.ПереносЛимитовМеждуПериодами Тогда
				РольИсполнителей = Справочники.РолиИсполнителей.СотрудникИнициаторКомпании;	
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.ДействиеУтверждениеПВП Тогда  //АБС Коломиец 19255
			РольИсполнителей = Справочники.РолиИсполнителей.ПервыйВицеПрезидент;
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.ДействиеБюджетныйКонтроль Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.ЗакрытиеОпераций_в_УУ;
		//Сторчевой А.Н. 7796764 {
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.СогласованиеЭкономистомМКРПриемника Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеБюджетаДирБА;
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.СогласованиеЭкономистомМКРИсточника Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеБюджетаДирБА;
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.СогласованиеЭкономистом Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеБюджетаДирБА;
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.СогласованиеРуководителемЭкономиста Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.ttk_РуководительБП;
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.СогласованиеРуководителем Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.ttk_РуководительДБО;
		// } Сторчевой А.Н. 7796764                                                            
		КонецЕсли;
		
		Если РольИсполнителей = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗапросИсполнителей.УстановитьПараметр("РольИсполнителей", РольИсполнителей);
		
		ВыборкаИсполнители = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута,
			ЗапросИсполнителей.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель"));
			
	Иначе
			
		ВыборкаИсполнители = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута, Исполнители);
		
	КонецЕсли;
	
	ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
					
	//Для Каждого ТекИсполнитель Из ВыборкаИсполнители Цикл
	//		
	//	абс_БизнесПроцессы.СформироватьЗадачуРекласификацияБюджета(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель, ,Истина, ТекДатаЗадачи);
	//			
	//КонецЦикла;
	
	МассивТочекДляГрупповойЗадачи = Новый Массив;
	МассивТочекДляГрупповойЗадачи.Добавить(БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФО);
	МассивТочекДляГрупповойЗадачи.Добавить(БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУ);
	МассивТочекДляГрупповойЗадачи.Добавить(БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФОПриемника);
	МассивТочекДляГрупповойЗадачи.Добавить(БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУПриемника);
	МассивТочекДляГрупповойЗадачи.Добавить(БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.СогласованиеБК);
	
	//Сторчевой А.Н. 7796764 {
	МассивТочекДляГрупповойЗадачи.Добавить(БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФОПриемникаМКР);
	МассивТочекДляГрупповойЗадачи.Добавить(БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФОИсточникаМКР);
	МассивТочекДляГрупповойЗадачи.Добавить(БизнесПроцессы.абсРекласификацияБюджета.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФОИсточника);
	// } Сторчевой А.Н. 7796764

	Если МассивТочекДляГрупповойЗадачи.Найти(ТочкаМаршрута) <> Неопределено Тогда
		Для Каждого ТекИсполнитель Из ВыборкаИсполнители Цикл
			абс_БизнесПроцессы.СформироватьЗадачуРекласификацияБюджета(БП, ТочкаМаршрута, ФормируемыеЗадачи,ТекИсполнитель , ,Истина, ТекДатаЗадачи,РольИсполнителей,Организация);
		КонецЦикла;
	Иначе
		Если ВыборкаИсполнители.Количество() > 0 Тогда		
			абс_БизнесПроцессы.СформироватьЗадачуРекласификацияБюджета(БП, ТочкаМаршрута, ФормируемыеЗадачи,Неопределено , ,Истина, ТекДатаЗадачи,РольИсполнителей,Организация);
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗадачуРекласификацияБюджета(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель, Отказ = Ложь, ЗаписыватьРаспределение = Ложь, ТекДатаЗадачи = Неопределено,РольИсполнителей, Организация = Неопределено) Экспорт
	
	Если ТекДатаЗадачи = Неопределено Тогда
		ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
	НоваяЗадача.Дата 				= ТекДатаЗадачи;
	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи 
	//	+ " ("+СокрЛП(Контрагент.Наименование) + " :" + СокрЛП(ДоговорКонтрагента.Наименование) + ")";
	НоваяЗадача.Наименование = СокрЛП(БП.РекласификацияБюджета) + " " 
		+ ТочкаМаршрута.НаименованиеЗадачи + ".";
		
	//Сторчевой А.Н. 7796764 {
	Если НЕ Организация = Неопределено Тогда
		НоваяЗадача.Организация = Организация;
	КонецЕсли;
	// } Сторчевой А.Н. 7796764

	Если ТекИсполнитель <> Неопределено Тогда
		НоваяЗадача.Исполнитель			= ТекИсполнитель;
	КонецЕсли;
	
	Если РольИсполнителей <> Неопределено Тогда
		НоваяЗадача.Роль                =  РольИсполнителей;
	КонецЕсли;
	
	НоваяЗадача.ОбъектЗадачи 		= БП.РекласификацияБюджета;
	
	НоваяЗадача.Записать();
		
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
КонецПроцедуры

Процедура СформироватьЗадачуИсполнителямВводБюджета(БП, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители = Неопределено, Организация = Неопределено) Экспорт
	
	ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	ФормируемыеЗадачи.Очистить();
	
	Если Исполнители = Неопределено Тогда
		ЗапросИсполнителей = Новый Запрос(
		"ВЫБРАТЬ
		|	РолиИИсполнители.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|ГДЕ
		|	РолиИИсполнители.Роль = &РольИсполнителей
		|	И ВЫБОР
		|			КОГДА &ОтборПоОрганизации
		|				ТОГДА РолиИИсполнители.Организация = &Организация
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ");
		
		ЗапросИсполнителей.УстановитьПараметр("ОтборПоОрганизации", НЕ Организация = Неопределено);
		ЗапросИсполнителей.УстановитьПараметр("Организация", Организация);
										  
		РольИсполнителей = Неопределено;									  
		Если ТочкаМаршрута = БизнесПроцессы.абсСогласованиеБюджета.ТочкиМаршрута.ДействиеСогласованиеДирБА Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеБюджетаДирБА;
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеБюджета.ТочкиМаршрута.ДействиеСогласованиеДЭИ Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеБюджетаДЭИ;
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеБюджета.ТочкиМаршрута.ДействиеСогласованиеДК Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеБюджетаДК;
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеБюджета.ТочкиМаршрута.ДействиеПроверкаДирБА Тогда
			Если БП.ДокументВводаБюджета.абс_Бюджет = Перечисления.абс_Бюджет.абс_ОРЕХ Тогда
				РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеБюджетаДирБА;
			ИначеЕсли БП.ДокументВводаБюджета.абс_Бюджет = Перечисления.абс_Бюджет.абс_САРЕХ Тогда
				РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеБюджетаДЭИ;
			ИначеЕсли БП.ДокументВводаБюджета.абс_Бюджет = Перечисления.абс_Бюджет.абс_ДДС_ОРЕХ или БП.ДокументВводаБюджета.абс_Бюджет = Перечисления.абс_Бюджет.абс_ДДС_САРЕХ Тогда
				РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеБюджетаДК;
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеБюджета.ТочкиМаршрута.ДействиеУтверждениеПВП Тогда  //АБС Коломиец 19255
			РольИсполнителей = Справочники.РолиИсполнителей.ПервыйВицеПрезидент;	
		КонецЕсли;
		
		Если РольИсполнителей = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗапросИсполнителей.УстановитьПараметр("РольИсполнителей", РольИсполнителей);
		
		ВыборкаИсполнители = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута,
			ЗапросИсполнителей.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель"));
			
	Иначе
			
		ВыборкаИсполнители = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута, Исполнители);
		
	КонецЕсли;	 
					
	Если ТочкаМаршрута = БизнесПроцессы.абсСогласованиеБюджета.ТочкиМаршрута.ДействиеСогласованиеЦФО или ТочкаМаршрута = БизнесПроцессы.абсСогласованиеБюджета.ТочкиМаршрута.ДействиеСогласованиеЦФУ Тогда
		Для Каждого ТекИсполнитель Из ВыборкаИсполнители Цикл
			абс_БизнесПроцессы.СформироватьЗадачуВводБюджета(БП, ТочкаМаршрута, ФормируемыеЗадачи,ТекИсполнитель , ,Истина, ТекДатаЗадачи,РольИсполнителей);
		КонецЦикла;
	Иначе
		Если ВыборкаИсполнители.Количество() > 0 Тогда		
			абс_БизнесПроцессы.СформироватьЗадачуВводБюджета(БП, ТочкаМаршрута, ФормируемыеЗадачи,Неопределено , ,Истина, ТекДатаЗадачи,РольИсполнителей);
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗадачуВводБюджета(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель, Отказ = Ложь, ЗаписыватьРаспределение = Ложь, ТекДатаЗадачи = Неопределено,РольИсполнителей) Экспорт
	
	Если ТекДатаЗадачи = Неопределено Тогда
		ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;	
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
	НоваяЗадача.Дата 				= ТекДатаЗадачи;
	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи 
	//	+ " ("+СокрЛП(Контрагент.Наименование) + " :" + СокрЛП(ДоговорКонтрагента.Наименование) + ")";
	НоваяЗадача.Наименование = СокрЛП(БП.ДокументВводаБюджета) + " " 
	+ ТочкаМаршрута.НаименованиеЗадачи + ".";
	
	Если ТекИсполнитель <> Неопределено Тогда
		НоваяЗадача.Исполнитель			= ТекИсполнитель;
	КонецЕсли;
	
	НоваяЗадача.Роль                =  РольИсполнителей;
	НоваяЗадача.ОбъектЗадачи 		= БП.ДокументВводаБюджета;
	
	НоваяЗадача.Записать();
		
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
КонецПроцедуры
          
Процедура ЗакрытьЗадачуИсполненияПервичногоДокумента(ПервичныйДокументСсылка) Экспорт
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	// Если счет согласован, и открыт инициатором, то закроем задачу Согласован
	Если ПервичныйДокументСсылка.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
		
		БПСогласование = абс_БизнесПроцессы.НайтиБизнесПроцессПоПервичномуДокументу(ПервичныйДокументСсылка, "абсСогласованиеПервичныхДокументов");
		
		Если БПСогласование = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если БПСогласование.Завершен Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ БПСогласование.ПользовательИнициаторБП = мТекущийПользователь Тогда
			Возврат;			
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка КАК ЗадачаСсылка
		|ИЗ
		|	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(&Исполнитель, Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю
		|ГДЕ
		|	абсЗадачаДоговораЗадачиПоИсполнителю.БизнесПроцесс = &БПСогласование");
							  
		Запрос.УстановитьПараметр("Исполнитель"		, мТекущийПользователь);
		Запрос.УстановитьПараметр("БПСогласование"	, БПсогласование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.ЗадачаСсылка.ПолучитьОбъект();
			
			ЗадачаОбъект.ВыполнитьЗадачу();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
              
Процедура абс_ОбновлениеАналитикиСчетаПриИзмененииЗЗПриЗаписи(Источник, Отказ) Экспорт
	
	// АБС ВСТАВКА АБС-Ф
	// Режим обмена данными исользуется для обновления графика поставок при записи счета
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
    абс_БизнесПроцессыПривелегированный.ОбновитьАналитикуСчетаПриЗаписиЗЗ(Источник.Ссылка, Отказ);
	
	абс_БизнесПроцессыПривелегированный.ЗаполнитьСписокФилиаловПоКонсолидированнымЗЗ(Источник.Ссылка);
	
КонецПроцедуры

Функция ПолучитьТипыБезСогласованияОФК() Экспорт
	
	МассивТиповБезСогласованияОФК = Новый Массив();
	
	МассивТиповБезСогласованияОФК.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	МассивТиповБезСогласованияОФК.Добавить(Тип("ДокументОбъект.ПеремещениеТоваров"));
	МассивТиповБезСогласованияОФК.Добавить(Тип("ДокументСсылка.ПередачаТоваров"));
	МассивТиповБезСогласованияОФК.Добавить(Тип("ДокументОбъект.ПередачаТоваров"));
	МассивТиповБезСогласованияОФК.Добавить(Тип("ДокументСсылка.КомплектацияНоменклатуры"));
	МассивТиповБезСогласованияОФК.Добавить(Тип("ДокументОбъект.КомплектацияНоменклатуры"));
	МассивТиповБезСогласованияОФК.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	МассивТиповБезСогласованияОФК.Добавить(Тип("ДокументОбъект.РеализацияТоваровУслуг"));
	МассивТиповБезСогласованияОФК.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
	МассивТиповБезСогласованияОФК.Добавить(Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг"));	
	МассивТиповБезСогласованияОФК.Добавить(Тип("ДокументСсылка.абс_НеотфактурованнаяПоставка"));	
		
	Возврат МассивТиповБезСогласованияОФК;
	
КонецФункции

Функция НеобходимоСогласованиеОФКПервичногоДокумента(ПервичныйДокументСсылка) Экспорт
	
	НеобходимоСогласованиеОФК = Истина;
	
	ТипДокумента = ТипЗнч(ПервичныйДокументСсылка);
	
	ТипыБезСогласованияОФК = ПолучитьТипыБезСогласованияОФК();
	
	Если НЕ ТипыБезСогласованияОФК.Найти(ТипДокумента) = Неопределено Тогда
		
		НеобходимоСогласованиеОФК = Ложь;		
		
	КонецЕсли;
	
	Возврат НеобходимоСогласованиеОФК;
	
КонецФункции

Процедура абс_ПроверкаНоменклатурыПервичногоДокументаПриЗаписи(Источник, Отказ) Экспорт
	
	//Если (Источник.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК ИЛИ
	//	  Источник.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером) Тогда		  
	//
	//	Для Каждого ТЧ Из Источник.Метаданные().ТабличныеЧасти Цикл
	//		
	//		Если ТЧ.Реквизиты.Найти("Номенклатура") = Неопределено Тогда
	//			
	//			Продолжить;
	//			
	//		КонецЕсли;
	//		
	//		ОК = Истина;

	//		Для Каждого СтрокаТЧ ИЗ Источник[ТЧ.Имя] Цикл
	//			
	//			ТекстСообщения = "Проверка номенклатуры табличной части " + ТЧ.Синоним + ": ";
	//			
	//							
	//			Если СтрокаТЧ.Номенклатура.абс_НеИспользовать Тогда
	//				
	//				ТекстСообщения = ТекстСообщения + Символы.ПС + "Номенклатура в строке " + СтрокаТЧ.НомерСтроки + " не используется." + 
	//					?(ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.абс_ОсновнаяНоменклатура), " Вместо выбранной номенклатуры необходимо использовать номенклатуру с кодом: " + СтрокаТЧ.Номенклатура.абс_ОсновнаяНоменклатура.Код, "");
	//					
	//				ОК = Ложь;
	//			КонецЕсли;
	//							
	//		КонецЦикла;
	//		
	//		Если НЕ ОК Тогда
	//			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли; //алгоритм до 26.07.2011. 
	
	//Бреев
	
	Если Источник.ОбменДанными.Загрузка  тогда
		Возврат;
	КонецЕсли;
	
	
	//абс выгрузка остатков ДЗО Начало
	Попытка
		Если ПараметрыСеанса.ТекущийПользователь.абс_РасширенноеПравоПроведенияДокументов  ТОгда
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//абс выгрузка остатков ДЗО Конец

Попытка
		ТаблицаПроверкиНоменклатуры = абс_ПроцедурыСПовторнымВызовом.ПолучитьТаблицуПроверкиНоменклатурыИзМакета();
		ИмяДокумента = Источник.Метаданные().Имя;
		МассивНайденныхСтрок = ТаблицаПроверкиНоменклатуры.НайтиСтроки(Новый Структура("ИмяДокумента",ИмяДокумента)); 
		
		
		ТекстСообщения = "";
		ОК = истина;
		
		
		Для Каждого  НайденаяСтрока из МассивНайденныхСтрок Цикл
			
			//область.ПолучитьОбласть("R101").ТекущаяОбласть.Текст
			ИмяДокументаМакет		=НайденаяСтрока. ИмяДокумента;
			ИмяТабЧасти 			= НайденаяСтрока. ИмяТабЧасти;
			ИмяРеквизитаТабЧасти 	= НайденаяСтрока. ИмяРеквизитаТабЧасти;
			ИмяРеквизитаШапки 		=  НайденаяСтрока. ИмяРеквизитаШапки;
			
			// АБС ВСТАВКА Фролов 20111014
			Если НЕ СокрЛП(ИмяДокумента) = СокрЛП(ИмяДокументаМакет) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяТабЧасти) И ЗначениеЗаполнено(ИмяРеквизитаТабЧасти) тогда
				Для каждого СтрокаТЧ из Источник[ИмяТабЧасти] цикл
					
					Номенклатура = СтрокаТЧ[ИмяРеквизитаТабЧасти];
					Если ЗначениеЗаполнено(Номенклатура) И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") тогда
						СтатусНом = ПолучитьСтатусНоменклатурыПоРегистру(Номенклатура);
						
						//ПРОВЕРКА СТАТУСА 
						Если СтатусНом <> Перечисления.абс_СтатусыНоменклатуры.Использование тогда
							ТекстСообщения = ТекстСообщения + Символы.ПС + "В табличной части """+ИмяТабЧасти+""" в строке "+СтрокаТЧ.НомерСтроки+" выбрана номенклатура ("""+Номенклатура+""") без статуса ""Использовать""!"+Символы.ПС+"Выберите другую номенклатуру и повторите попытку!";
							ОК = ложь;
						КонецЕсли;
						
						//ПРОВЕРКА РЕКВИЗИТА НЕИСПОЛЬЗВАТЬ
						Если (ИмяДокумента="ПоступлениеТоваровУслуг" ИЛИ ИмяДокумента="АвансовыйОтчет") 
							И Номенклатура.абс_НеИспользовать Тогда
							ТекстСообщения = ТекстСообщения + Символы.ПС + "В табличной части """+ИмяТабЧасти+""" в строке "+СтрокаТЧ.НомерСтроки+ " выбрана номенклатура ("""+Номенклатура+""") с признаком ""Не использовать""!"+
							?(ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.абс_ОсновнаяНоменклатура), Символы.ПС+" Вместо выбранной номенклатуры необходимо использовать номенклатуру с кодом: " + СтрокаТЧ.Номенклатура.абс_ОсновнаяНоменклатура.Код, "");
							ОК = ложь;
						КонецЕсли;	
					КонецЕсли;
					
				КонецЦикла;//по строкам таб части 
			ИначеЕсли ЗначениеЗаполнено(ИмяРеквизитаШапки) тогда
				
				Номенклатура = Источник[ИмяРеквизитаШапки];
				Если ЗначениеЗаполнено(Номенклатура) И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") тогда
					//ПРОВЕРКА СТАТУСА
					СтатусНом =ПолучитьСтатусНоменклатурыПоРегистру(Номенклатура);
					Если СтатусНом <> Перечисления.абс_СтатусыНоменклатуры.Использование тогда
						ТекстСообщения = ТекстСообщения + Символы.ПС + "В реквизите шапки "+ИмяРеквизитаШапки+" выбрана номенклатура ("""+Номенклатура+""") без статуса ""Использовать""!"+Символы.ПС+"Выберите другую номенклатуру и повторите попытку!";
						ОК = ложь;
					КонецЕсли;
					
					//ПРОВЕРКА РЕКВИЗИТА НЕИСПОЛЬЗВАТЬ
					Если (ИмяДокумента="ПоступлениеТоваровУслуг" ИЛИ ИмяДокумента="АвансовыйОтчет")
						И Номенклатура.абс_НеИспользовать Тогда
						ТекстСообщения = ТекстСообщения + Символы.ПС + "В реквизите шапки """+ИмяРеквизитаШапки+""" выбрана номенклатура ("""+Номенклатура+""") с признаком ""Не использовать""!"+
						?(ЗначениеЗаполнено(Номенклатура.абс_ОсновнаяНоменклатура), " Вместо выбранной номенклатуры необходимо использовать номенклатуру с кодом: " + Номенклатура.абс_ОсновнаяНоменклатура.Код, "");
						ОК = ложь;
					КонецЕсли;					
				КонецЕсли; //заполнена ли номенклатура
			КонецЕсли; //заполнен рекв шапки
			
		КонецЦикла;//по найденным в макете строкам
		
		//выводим ошибки если они были
		Если НЕ ОК Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
		//если определенные статусы - не даем записывать документ
		Если Источник.Метаданные().Реквизиты.Найти("абс_Статус") <> Неопределено тогда	
			Если (Источник.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК ИЛИ
				Источник.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером
				ИЛИ Источник.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером)
				Тогда	
				Отказ = НЕ ОК;
			КонецЕсли;	
		Иначе
			Отказ = НЕ ОК;
		КонецЕсли;
	Исключение   
		Если ТипЗнч(Источник.Ссылка)<>Тип("ДокументСсылка.КорректировкаДолга") Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Во время проверки статуса номенклатуры для документа """+Источник+""" произошли ошибки!");
			
		КонецЕсли;
	
	КонецПопытки;
	//Бреев
	
	
КонецПроцедуры

Процедура абс_ПроверкаНоменклатурнойГруппыПервичногоДокументаПриЗаписи(Источник, Отказ) Экспорт
	
	//Бреев
	
	Если Источник.ОбменДанными.Загрузка  тогда
		Возврат;
	КонецЕсли;
	
	
	//абс выгрузка остатков ДЗО Начало
	Попытка
		Если ПараметрыСеанса.ТекущийПользователь.абс_РасширенноеПравоПроведенияДокументов  ТОгда
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//абс выгрузка остатков ДЗО Конец

	Попытка
		
		ТаблицаПроверкиНоменклатурнойГруппы = абс_ПроцедурыСПовторнымВызовом.ПолучитьТаблицуПроверкиНоменклатурнойГруппыИзМакета();
		ИмяДокумента = Источник.Метаданные().Имя;
		МассивНайденныхСтрок = ТаблицаПроверкиНоменклатурнойГруппы.НайтиСтроки(Новый Структура("ИмяДокумента",ИмяДокумента)); 
		
		
		ТекстСообщения = "";
		ОК = истина;

		
		Для Каждого  НайденаяСтрока из МассивНайденныхСтрок Цикл
			
			//область.ПолучитьОбласть("R101").ТекущаяОбласть.Текст
			ИмяДокументаМакет		=НайденаяСтрока. ИмяДокумента;
			ИмяТабЧасти 			= НайденаяСтрока. ИмяТабЧасти;
			ИмяРеквизитаТабЧасти 	= НайденаяСтрока. ИмяРеквизитаТабЧасти;
			ИмяРеквизитаШапки 		=  НайденаяСтрока. ИмяРеквизитаШапки;
			
			// АБС ВСТАВКА Фролов 20111014
			Если НЕ СокрЛП(ИмяДокумента) = СокрЛП(ИмяДокументаМакет) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяТабЧасти) И ЗначениеЗаполнено(ИмяРеквизитаТабЧасти) тогда
				Для каждого СтрокаТЧ из Источник[ИмяТабЧасти] цикл
					
					НоменклатурнаяГруппа = СтрокаТЧ[ИмяРеквизитаТабЧасти];
					Если ЗначениеЗаполнено(НоменклатурнаяГруппа) И ТипЗнч(НоменклатурнаяГруппа) = Тип("СправочникСсылка.НоменклатурныеГруппы") тогда
						СтатусНом = ПолучитьСтатусНоменклатурнойГруппыПоРегистру(НоменклатурнаяГруппа);
						
						//ПРОВЕРКА СТАТУСА 
						Если СтатусНом <> Перечисления.абс_СтатусыНоменклатуры.Использование тогда
							ТекстСообщения = ТекстСообщения + Символы.ПС + "В табличной части """+ИмяТабЧасти+""" в строке "+СтрокаТЧ.НомерСтроки+" выбрана номенклатурная группа ("""+НоменклатурнаяГруппа+""") без статуса ""Использовать""!"+Символы.ПС+"Выберите другую номенклатурную группу и повторите попытку!";
							ОК = ложь;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;//по строкам таб части 
			ИначеЕсли ЗначениеЗаполнено(ИмяРеквизитаШапки) тогда
				
				НоменклатурнаяГруппа = Источник[ИмяРеквизитаШапки];
				Если ЗначениеЗаполнено(НоменклатурнаяГруппа) И ТипЗнч(НоменклатурнаяГруппа) = Тип("СправочникСсылка.НоменклатурныеГруппы") тогда
					//ПРОВЕРКА СТАТУСА
					СтатусНом = ПолучитьСтатусНоменклатурнойГруппыПоРегистру(НоменклатурнаяГруппа);
					Если СтатусНом <> Перечисления.абс_СтатусыНоменклатуры.Использование тогда
						ТекстСообщения = ТекстСообщения + Символы.ПС + "В реквизите шапки "+ИмяРеквизитаШапки+" выбрана номенклатурная группа ("""+НоменклатурнаяГруппа+""") без статуса ""Использовать""!"+Символы.ПС+"Выберите другую номенклатурную группу и повторите попытку!";
						ОК = ложь;
					КонецЕсли;
					
				КонецЕсли; //заполнена ли номенклатура
			КонецЕсли; //заполнен рекв шапки
			
		КонецЦикла;//по найденным в макете строкам
		
		//выводим ошибки если они были
		Если НЕ ОК Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
		//если определенные статусы - не даем записывать документ
		Если Источник.Метаданные().Реквизиты.Найти("абс_Статус") <> Неопределено тогда	
			Если (Источник.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК ИЛИ
				Источник.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером
				ИЛИ Источник.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером)
				Тогда	
				Отказ = НЕ ОК;
			КонецЕсли;	
		Иначе
			Отказ = НЕ ОК;
		КонецЕсли;
	Исключение   
		Если ТипЗнч(Источник.Ссылка)<>Тип("ДокументСсылка.КорректировкаДолга") Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Во время проверки статуса номенклатурной группы для документа """+Источник+""" произошли ошибки!");
			
		КонецЕсли;
	
	КонецПопытки;
	//Бреев	
	
	
КонецПроцедуры

Процедура абс_ПроверкаСтатейЗатратПервичногоДокументаПриЗаписи(Источник, Отказ) Экспорт
	
	//Бреев
	
	Если Источник.ОбменДанными.Загрузка  тогда
		Возврат;
	КонецЕсли;
	
	// АБС ВСТАВКА 
	// Исключение документа Отражение зп в регл. учете из проверки в зависимости от статуса
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ОтражениеЗарплатыВРеглУчете") И Источник.абс_Статус <> Перечисления.абс_СтатусыРасчетныхДокументов.Рассчитан Тогда
		Возврат;
	КонецЕсли;
	// АБС ВСТАВКА КОНЕЦ
	
	//абс выгрузка остатков ДЗО Начало
	Попытка
		Если ПараметрыСеанса.ТекущийПользователь.абс_РасширенноеПравоПроведенияДокументов  ТОгда
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//абс выгрузка остатков ДЗО Конец

	Попытка
		
		ТаблицаПроверкиСтатьиЗатрат = абс_ПроцедурыСПовторнымВызовом.ПолучитьТаблицуПроверкиСтатьиЗатратИзМакета();
		ИмяДокумента = Источник.Метаданные().Имя;
		МассивНайденныхСтрок = ТаблицаПроверкиСтатьиЗатрат.НайтиСтроки(Новый Структура("ИмяДокумента",ИмяДокумента)); 
		
		
		ТекстСообщения = "";
		ОК = истина;

		
		Для Каждого  НайденаяСтрока из МассивНайденныхСтрок Цикл
			
			//область.ПолучитьОбласть("R101").ТекущаяОбласть.Текст
			ИмяДокументаМакет		=НайденаяСтрока. ИмяДокумента;
			ИмяТабЧасти 			= НайденаяСтрока. ИмяТабЧасти;
			ИмяРеквизитаТабЧасти 	= НайденаяСтрока. ИмяРеквизитаТабЧасти;
			ИмяРеквизитаШапки 		=  НайденаяСтрока. ИмяРеквизитаШапки;
			
			// АБС ВСТАВКА Фролов 20111014
			Если НЕ СокрЛП(ИмяДокумента) = СокрЛП(ИмяДокументаМакет) Тогда
				
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяТабЧасти) И ЗначениеЗаполнено(ИмяРеквизитаТабЧасти) тогда
				Для каждого СтрокаТЧ из Источник[ИмяТабЧасти] цикл
					
					СтатьяЗатрат = СтрокаТЧ[ИмяРеквизитаТабЧасти];
					Если ЗначениеЗаполнено(СтатьяЗатрат) И ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.СтатьиЗатрат") тогда
						СтатусНом = ПолучитьСтатусСтатьиЗатратПоРегистру(СтатьяЗатрат);
						
						//ПРОВЕРКА СТАТУСА 
						Если СтатусНом <> Перечисления.абс_СтатусыНоменклатуры.Использование тогда
							ТекстСообщения = ТекстСообщения + Символы.ПС + "В табличной части """+ИмяТабЧасти+""" в строке "+СтрокаТЧ.НомерСтроки+" выбрана статья затрат ("""+СтатьяЗатрат+""") без статуса ""Использовать""!"+Символы.ПС+"Выберите другую статью затрат и повторите попытку!";
							ОК = ложь;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;//по строкам таб части 
			ИначеЕсли ЗначениеЗаполнено(ИмяРеквизитаШапки) тогда
				
				СтатьяЗатрат = Источник[ИмяРеквизитаШапки];
				Если ЗначениеЗаполнено(СтатьяЗатрат) И ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.СтатьиЗатрат") тогда
					//ПРОВЕРКА СТАТУСА
					СтатусНом = ПолучитьСтатусСтатьиЗатратПоРегистру(СтатьяЗатрат);
					Если СтатусНом <> Перечисления.абс_СтатусыНоменклатуры.Использование тогда
						ТекстСообщения = ТекстСообщения + Символы.ПС + "В реквизите шапки "+ИмяРеквизитаШапки+" выбрана статья затрат ("""+СтатьяЗатрат+""") без статуса ""Использовать""!"+Символы.ПС+"Выберите другую статью затрат и повторите попытку!";
						ОК = ложь;
					КонецЕсли;
					
				КонецЕсли; //
			КонецЕсли; //заполнен рекв шапки
			
			
		КонецЦикла;//по найденным в макете строкам
		
		//выводим ошибки если они были
		Если НЕ ОК Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
		//если определенные статусы - не даем записывать документ
		Если Источник.Метаданные().Реквизиты.Найти("абс_Статус") <> Неопределено тогда	
			Если (Источник.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК ИЛИ
				Источник.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером
				ИЛИ Источник.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером)
				Тогда	
				Отказ = НЕ ОК;
			КонецЕсли;	
		Иначе
			Отказ = НЕ ОК;
		КонецЕсли;
	Исключение   
		Если ТипЗнч(Источник.Ссылка)<>Тип("ДокументСсылка.КорректировкаДолга") Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Во время проверки статуса номенклатурной группы для документа """+Источник+""" произошли ошибки!");
			
		КонецЕсли;
	
	КонецПопытки;
	//Бреев	
	
	
КонецПроцедуры

Функция ПолучитьЗадачиУведомленияПользователя(СтруктураОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка
	|ИЗ
	|	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(
	|			&ТекИсполнитель,
	|			Выполнена = ЛОЖЬ
	|				И ВЫБОР
	|					КОГДА &ДоговорыКонтрагентов = ИСТИНА
	|							И БизнесПроцесс ССЫЛКА БизнесПроцесс.абсСогласованиеДоговоров
	|						ТОГДА ИСТИНА
	|					КОГДА &Контрагенты = ИСТИНА
	|							И БизнесПроцесс ССЫЛКА БизнесПроцесс.абсСогласованиеКонтрагентов
	|						ТОГДА ИСТИНА
	|					КОГДА &ЗакупочныеЗаказы = ИСТИНА
	|							И БизнесПроцесс ССЫЛКА БизнесПроцесс.абсСогласованиеЗакупочногоЗаказа
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК абсЗадачаДоговораЗадачиПоИсполнителю");
	
	
КонецФункции

Процедура ОбновитьГрафикПоставокЗаказаСНефиксированнойСуммой(ЗЗ) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикПоставок.НомерСтроки КАК НомерСтроки,
	|	ГрафикПоставок.Период КАК Период,
	|	СуммыСчетов.ВалютнаяСумма КАК ВалютнаяСуммаСНДС,
	|	СуммыСчетов.ВалютнаяСуммаНДС КАК ВалютнаяСуммаНДС,
	|	СуммыСчетов.ВалютнаяСуммаБезНДС КАК ВалютнаяСуммаБезНДС,
	|	СуммыСчетов.СуммаПлатежа КАК СуммаСНДС,
	|	СуммыСчетов.СуммаНДС КАК СуммаНДС,
	|	СуммыСчетов.СуммаБезНДС КАК СуммаБезНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		абс_ЗакупочныйЗаказГрафикПоставок.НомерСтроки КАК НомерСтроки,
	|		абс_ЗакупочныйЗаказГрафикПоставок.Период КАК Период
	|	ИЗ
	|		Документ.абс_ЗакупочныйЗаказ.ГрафикПоставок КАК абс_ЗакупочныйЗаказГрафикПоставок
	|	ГДЕ
	|		абс_ЗакупочныйЗаказГрафикПоставок.Ссылка = &Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		абс_ЗакупочныйЗаказГрафикПоставок.Период,
	|		абс_ЗакупочныйЗаказГрафикПоставок.НомерСтроки) КАК ГрафикПоставок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НАЧАЛОПЕРИОДА(абс_СчетНаОплату.ПериодПлатежа, МЕСЯЦ) КАК ПериодПлатежа,
	|			СУММА(абс_СчетНаОплату.ВалютнаяСумма) КАК ВалютнаяСумма,
	|			СУММА(ВЫРАЗИТЬ(абс_СчетНаОплату.ВалютнаяСумма / (100 + ВЫБОР
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))
	|							ТОГДА 18
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110))
	|							ТОГДА 10
	|						ИНАЧЕ 0
	|					КОНЕЦ) * ВЫБОР
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))
	|							ТОГДА 18
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110))
	|							ТОГДА 10
	|						ИНАЧЕ 0
	|					КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ВалютнаяСуммаНДС,
	|			СУММА(абс_СчетНаОплату.ВалютнаяСумма - (ВЫРАЗИТЬ(абс_СчетНаОплату.ВалютнаяСумма / (100 + ВЫБОР
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))
	|							ТОГДА 18
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110))
	|							ТОГДА 10
	|						ИНАЧЕ 0
	|					КОНЕЦ) * ВЫБОР
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))
	|							ТОГДА 18
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110))
	|							ТОГДА 10
	|						ИНАЧЕ 0
	|					КОНЕЦ КАК ЧИСЛО(15, 2)))) КАК ВалютнаяСуммаБезНДС,
	|			СУММА(абс_СчетНаОплату.СуммаПлатежа) КАК СуммаПлатежа,
	|			СУММА(ВЫРАЗИТЬ((абс_СчетНаОплату.СуммаПлатежа / 100 + ВЫБОР
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))
	|							ТОГДА 18
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110))
	|							ТОГДА 10
	|						ИНАЧЕ 0
	|					КОНЕЦ) * ВЫБОР
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))
	|							ТОГДА 18
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110))
	|							ТОГДА 10
	|						ИНАЧЕ 0
	|					КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
	|			СУММА(абс_СчетНаОплату.СуммаПлатежа - (ВЫРАЗИТЬ(абс_СчетНаОплату.СуммаПлатежа / (100 + ВЫБОР
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))
	|							ТОГДА 18
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110))
	|							ТОГДА 10
	|						ИНАЧЕ 0
	|					КОНЕЦ) * ВЫБОР
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))
	|							ТОГДА 18
	|						КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110))
	|							ТОГДА 10
	|						ИНАЧЕ 0
	|					КОНЕЦ КАК ЧИСЛО(15, 2)))) КАК СуммаБезНДС
	|		ИЗ
	|			Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|		ГДЕ
	|			абс_СчетНаОплату.Ссылка В
	|					(ВЫБРАТЬ
	|						КонтролируемыеЗначенияБюджетов.Регистратор
	|					ИЗ
	|						РегистрНакопления.КонтролируемыеЗначенияБюджетов КАК КонтролируемыеЗначенияБюджетов
	|					ГДЕ
	|						КонтролируемыеЗначенияБюджетов.Регистратор.ЗакупочныйЗаказ = &Ссылка)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НАЧАЛОПЕРИОДА(абс_СчетНаОплату.ПериодПлатежа, МЕСЯЦ)) КАК СуммыСчетов
	|		ПО ГрафикПоставок.Период = СуммыСчетов.ПериодПлатежа";	
	
	Запрос.УстановитьПараметр("Ссылка", ЗЗ);
	
	ЗЗОбъект = ЗЗ.ПолучитьОбъект();
	
	ЗЗОбъект.ГрафикПоставок.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ЗЗОбъект.ПересчитатьГрафикПоставок();
	
	ЗЗОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗЗОбъект.Записать();
	
КонецПроцедуры

Функция ПолучитьСтатусПлана(НомерНедели) Экспорт
	
	НеделяУтверждена = Ложь;
	
	Выборка = РегистрыСведений.абс_УтверждениеПланаПлатежей.Выбрать(Новый Структура("НомерНедели", НомерНедели));
	
	Если Выборка.Следующий() Тогда
		НеделяУтверждена = Выборка.ПланПлатежейЗавершен;
	КонецЕсли;	
	
	Возврат НеделяУтверждена;
	
КонецФункции


Функция КонтрольУтвержденияСчетов() Экспорт
	
	Возврат НЕ РольДоступна("абс_РедактированиеЗавершенногоПлана");
		
КонецФункции

Функция РазрешеноУтверждениеПланаПлатежей() Экспорт
	
	Возврат РольДоступна("абс_РедактированиеЗавершенногоПлана");
	
КонецФункции

Функция ПроверитьНаличиеФайловППД(Ссылка, СтатусСсылки, СтатусОбъекта) Экспорт
	
	Если ПроверитьНаличиеФайловППДпоОрганизации(Ссылка) 
		И СтатусСсылки = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка И 
		(СтатусОбъекта = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером
		ИЛИ СтатусОбъекта = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК) Тогда
		
		ЕстьФайлы = Ложь;
		
		ВыборкаФайлов = Справочники.ХранилищеДополнительнойИнформации.Выбрать(,,Новый Структура("Объект", Ссылка));
		
		Пока ВыборкаФайлов.Следующий() Цикл
			
			Если ВыборкаФайлов.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьФайлы = Истина;
			
			Прервать;
		КонецЦикла;
		
		Если НЕ ЕстьФайлы Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Функция ПроверитьНаличиеФайловППДпоОрганизации(Ссылка)
	
	Если Ссылка.Метаданные().Реквизиты.Найти("Организация") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ПроверкаФайловВ_ППД_ПоОрганизациям.Организация
	|ИЗ
	|	РегистрСведений.абс_ПроверкаФайловВ_ППД_ПоОрганизациям КАК абс_ПроверкаФайловВ_ППД_ПоОрганизациям
	|ГДЕ
	|	абс_ПроверкаФайловВ_ППД_ПоОрганизациям.ВключитьКонтроль
	|	И абс_ПроверкаФайловВ_ППД_ПоОрганизациям.Организация В(&Организация)");
	Запрос.УстановитьПараметр("Организация",Ссылка.Организация);
	
	Возврат не Запрос.Выполнить().Пустой();	
			
КонецФункции		

Функция ПроверитьНаличиеФайловРНПД(Ссылка, СтатусСсылки, СтатусОбъекта) Экспорт
	
	Если СтатусСсылки = Перечисления.абс_СтатусыРПР.Подготовка И 
		СтатусОбъекта = Перечисления.абс_СтатусыРПР.СогласованиеДФМ Тогда
		
		ЕстьФайлы = Ложь;
		
		ВыборкаФайлов = Справочники.ХранилищеДополнительнойИнформации.Выбрать(,,Новый Структура("Объект", Ссылка));
		
		Пока ВыборкаФайлов.Следующий() Цикл
			
			Если ВыборкаФайлов.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьФайлы = Истина;
			
			Прервать;
		КонецЦикла;
		
		Если НЕ ЕстьФайлы Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции
          
Функция ПолучитьСтатусРНПДИзЗЗ(ЗЗСсылка, СписокПериодов) Экспорт
//ххх Брель Виктор Андреевич 19.04.2018 12:05:53, заявка <<<
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ПроектыРезервовРНПДПоЗЗ.Период КАК ПериодНачисления,
	|	абс_ПроектыРезервовРНПДПоЗЗ.Организация КАК Организация,
	|	абс_ПроектыРезервовРНПДПоЗЗ.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ,
	|	МАКСИМУМ(абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(абс_РезервыПроизведенныхРасходовРезервы_Справка.Ссылка) КАК Ссылка1,
	|	абс_ПроектыРезервовРНПДПоЗЗ.ttk_ПериодВозникновенияЗадолженности,
	|	абс_ПроектыРезервовРНПДПоЗЗ.СтатьяОборотов,
	|	абс_ПроектыРезервовРНПДПоЗЗ.абс_ТипСети,
	|	абс_ПроектыРезервовРНПДПоЗЗ.абс_КВ,
	|	абс_ПроектыРезервовРНПДПоЗЗ.абс_ТЭО,
	|	абс_ПроектыРезервовРНПДПоЗЗ.абс_ЦФУ,
	|	абс_ПроектыРезервовРНПДПоЗЗ.ttk_ОбъектБюджетирования
	|ПОМЕСТИТЬ Врем
	|ИЗ
	|	РегистрСведений.абс_ПроектыРезервовРНПДПоЗЗ КАК абс_ПроектыРезервовРНПДПоЗЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.абс_РезервыПроизведенныхРасходов.Резервы КАК абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки
	|		ПО абс_ПроектыРезервовРНПДПоЗЗ.Организация = абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки.Ссылка.Организация
	|			И абс_ПроектыРезервовРНПДПоЗЗ.ttk_ПериодВозникновенияЗадолженности = абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки.ttk_ПериодВозникновенияЗадолженности
	|			И абс_ПроектыРезервовРНПДПоЗЗ.ЗакупочныйЗаказ = абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки.ЗакупочныйЗаказ
	|			И (абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.абс_ВидыДокументовРНПД.ПоДирекции))
	|			И абс_ПроектыРезервовРНПДПоЗЗ.СтатьяОборотов = абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки.БюджетнаяСтатья
	|			И абс_ПроектыРезервовРНПДПоЗЗ.абс_ТипСети = абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки.абс_ТипСети
	|			И абс_ПроектыРезервовРНПДПоЗЗ.абс_КВ = абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки.абс_КВ
	|			И абс_ПроектыРезервовРНПДПоЗЗ.абс_ТЭО = абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки.абс_ТЭО
	|			И абс_ПроектыРезервовРНПДПоЗЗ.ttk_ОбъектБюджетирования = абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки.ttk_ОбъектБюджетирования
	|			И абс_ПроектыРезервовРНПДПоЗЗ.абс_ЦФУ = абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки.ЦФУ
	|			И абс_ПроектыРезервовРНПДПоЗЗ.ЗакупочныйЗаказ = абс_РезервыПроизведенныхРасходовРезервы_ПроектСправки.ЗакупочныйЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.абс_РезервыПроизведенныхРасходов.Резервы КАК абс_РезервыПроизведенныхРасходовРезервы_Справка
	|		ПО абс_ПроектыРезервовРНПДПоЗЗ.Организация = абс_РезервыПроизведенныхРасходовРезервы_Справка.Ссылка.Организация
	|			И абс_ПроектыРезервовРНПДПоЗЗ.ЗакупочныйЗаказ = абс_РезервыПроизведенныхРасходовРезервы_Справка.ЗакупочныйЗаказ
	|			И (абс_РезервыПроизведенныхРасходовРезервы_Справка.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.абс_ВидыДокументовРНПД.ПоЦФО))
	|			И абс_ПроектыРезервовРНПДПоЗЗ.СтатьяОборотов = абс_РезервыПроизведенныхРасходовРезервы_Справка.БюджетнаяСтатья
	|			И абс_ПроектыРезервовРНПДПоЗЗ.абс_ТипСети = абс_РезервыПроизведенныхРасходовРезервы_Справка.абс_ТипСети
	|			И абс_ПроектыРезервовРНПДПоЗЗ.абс_КВ = абс_РезервыПроизведенныхРасходовРезервы_Справка.абс_КВ
	|			И абс_ПроектыРезервовРНПДПоЗЗ.абс_ТЭО = абс_РезервыПроизведенныхРасходовРезервы_Справка.абс_ТЭО
	|			И абс_ПроектыРезервовРНПДПоЗЗ.абс_ЦФУ = абс_РезервыПроизведенныхРасходовРезервы_Справка.ЦФУ
	|			И абс_ПроектыРезервовРНПДПоЗЗ.ttk_ОбъектБюджетирования = абс_РезервыПроизведенныхРасходовРезервы_Справка.ttk_ОбъектБюджетирования
	|			И абс_ПроектыРезервовРНПДПоЗЗ.ttk_ПериодВозникновенияЗадолженности = абс_РезервыПроизведенныхРасходовРезервы_Справка.ttk_ПериодВозникновенияЗадолженности
	|ГДЕ
	|	абс_ПроектыРезервовРНПДПоЗЗ.Организация = &Организация
	|	И абс_ПроектыРезервовРНПДПоЗЗ.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И абс_ПроектыРезервовРНПДПоЗЗ.Период В(&Периоды)
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_ПроектыРезервовРНПДПоЗЗ.Период,
	|	абс_ПроектыРезервовРНПДПоЗЗ.Организация,
	|	абс_ПроектыРезервовРНПДПоЗЗ.ЗакупочныйЗаказ,
	|	абс_ПроектыРезервовРНПДПоЗЗ.ttk_ПериодВозникновенияЗадолженности,
	|	абс_ПроектыРезервовРНПДПоЗЗ.абс_ЦФУ,
	|	абс_ПроектыРезервовРНПДПоЗЗ.абс_ТипСети,
	|	абс_ПроектыРезервовРНПДПоЗЗ.СтатьяОборотов,
	|	абс_ПроектыРезервовРНПДПоЗЗ.абс_КВ,
	|	абс_ПроектыРезервовРНПДПоЗЗ.абс_ТЭО,
	|	абс_ПроектыРезервовРНПДПоЗЗ.ttk_ОбъектБюджетирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Врем.Ссылка, ЗНАЧЕНИЕ(Документ.абс_РезервыПроизведенныхРасходов.ПустаяСсылка)) КАК ПроектСправки,
	|	ЕСТЬNULL(Врем.Ссылка.Статус, ЗНАЧЕНИЕ(Перечисление.абс_СтатусыРПР.ПустаяСсылка)) КАК ПроектСправкиСтатус,
	|	ЕСТЬNULL(Врем.Ссылка1, ЗНАЧЕНИЕ(Документ.абс_РезервыПроизведенныхРасходов.Пустаяссылка)) КАК Справка,
	|	ЕСТЬNULL(Врем.Ссылка1.Статус, ЗНАЧЕНИЕ(Перечисление.абс_СтатусыРПР.ПустаяСсылка)) КАК СправкаСтатус,
	|	Врем.ПериодНачисления,
	|	Врем.Организация,
	|	Врем.ЗакупочныйЗаказ,
	|	Врем.Ссылка,
	|	Врем.Ссылка1,
	|	Врем.ttk_ПериодВозникновенияЗадолженности,
	|	Врем.СтатьяОборотов,
	|	Врем.абс_ТипСети,
	|	Врем.абс_КВ,
	|	Врем.абс_ТЭО,
	|	Врем.абс_ЦФУ,
	|	Врем.ttk_ОбъектБюджетирования
	|ИЗ
	|	Врем КАК Врем");
	
	Запрос.УстановитьПараметр("Организация"			, ЗЗСсылка.Организация);
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ"		, ЗЗСсылка);
	Запрос.УстановитьПараметр("Периоды"				, СписокПериодов);
	
	Возврат Запрос.Выполнить().Выгрузить();

// Брель Виктор Андреевич 19.04.2018 12:05:53 >>>
	
КонецФункции

//АБС Коломиец 20532+
Функция ПроверитьНаличиеФайловБюджетныйКомитет(Ссылка, ТипДокумента = Неопределено) Экспорт
	
	Если ПроверитьБюджетнаяСтатьяБюджетныйКомитет(Ссылка) Тогда
		      		
		//АБС ВСТАВКА №39428 НАЧАЛО «12 марта 2014 г.», Пополитов 
		Если не ТипДокумента = Неопределено и ТипЗнч(ТипДокумента) = Тип("СправочникСсылка.абс_ТипыДокументов") Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Объект",Ссылка);
			Запрос.УстановитьПараметр("абс_ТипДокумента",ТипДокумента);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ХранилищеДополнительнойИнформации.Ссылка
			               |ИЗ
			               |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
			               |ГДЕ
			               |	ХранилищеДополнительнойИнформации.Объект = &Объект
			               |	И ХранилищеДополнительнойИнформации.абс_ТипДокумента = &абс_ТипДокумента
			               |	И НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления";			
			ВыборкаФайлов = Запрос.Выполнить();
		Иначе	
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Объект",Ссылка);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ХранилищеДополнительнойИнформации.Ссылка
			               |ИЗ
			               |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
			               |ГДЕ
			               |	ХранилищеДополнительнойИнформации.Объект = &Объект
			               |	И НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления";			
			ВыборкаФайлов = Запрос.Выполнить();
		КонецЕсли;	
		//\\АБС ВСТАВКА №39428 КОНЕЦ   		                           		
		
		ЕстьФайлы = не ВыборкаФайлов.Пустой();
		
		Если не ЕстьФайлы Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Функция ПроверитьБюджетнаяСтатьяБюджетныйКомитет(Ссылка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	абс_ЗакупочныйЗаказ.БюджетнаяСтатья
	                      |ИЗ
	                      |	Документ.абс_ЗакупочныйЗаказ КАК абс_ЗакупочныйЗаказ
	                      |ГДЕ
	                      |	абс_ЗакупочныйЗаказ.Ссылка = &Ссылка
	                      |	И абс_ЗакупочныйЗаказ.БюджетнаяСтатья.абс_БюджетныйКомитет = ИСТИНА
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	абс_СчетНаОплату.БюджетнаяСтатья
	                      |ИЗ
	                      |	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	                      |ГДЕ
	                      |	абс_СчетНаОплату.Ссылка = &Ссылка
	                      |	И абс_СчетНаОплату.БюджетнаяСтатья.абс_БюджетныйКомитет = ИСТИНА
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	АвансовыйОтчетабс_ЗакупочныеЗаказы.абс_ЗакупочныйЗаказТЧ.БюджетнаяСтатья
	                      |ИЗ
	                      |	Документ.АвансовыйОтчет.абс_ЗакупочныеЗаказы КАК АвансовыйОтчетабс_ЗакупочныеЗаказы
	                      |ГДЕ
	                      |	АвансовыйОтчетабс_ЗакупочныеЗаказы.Ссылка = &Ссылка
	                      |	И АвансовыйОтчетабс_ЗакупочныеЗаказы.абс_ЗакупочныйЗаказТЧ.БюджетнаяСтатья.абс_БюджетныйКомитет = ИСТИНА
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ПоступлениеТоваровУслугабс_ЗакупочныеЗаказы.абс_ЗакупочныйЗаказТЧ.БюджетнаяСтатья
	                      |ИЗ
	                      |	Документ.ПоступлениеТоваровУслуг.абс_ЗакупочныеЗаказы КАК ПоступлениеТоваровУслугабс_ЗакупочныеЗаказы
	                      |ГДЕ
	                      |	ПоступлениеТоваровУслугабс_ЗакупочныеЗаказы.Ссылка = &Ссылка
	                      |	И ПоступлениеТоваровУслугабс_ЗакупочныеЗаказы.абс_ЗакупочныйЗаказТЧ.БюджетнаяСтатья.абс_БюджетныйКомитет = ИСТИНА");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Не Запрос.Выполнить().Пустой();	
			
КонецФункции		

Функция ВыбратьБюджетнаяСтатьяБюджетныйКомитет() Экспорт 
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	абс_ЗакупочныйЗаказ.Ссылка КАК ЗакупочныйЗаказ
	                      |ИЗ
	                      |	Документ.абс_ЗакупочныйЗаказ КАК абс_ЗакупочныйЗаказ
	                      |ГДЕ
	                      |	абс_ЗакупочныйЗаказ.БюджетнаяСтатья.абс_БюджетныйКомитет = Истина
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	абс_ЗакупочныйЗаказ.Ссылка");
						  
	СписокЗЗ = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		СписокЗЗ.Добавить(Выборка.ЗакупочныйЗаказ);
	КонецЦикла;
	
	Возврат СписокЗЗ;
	 
КонецФункции		
//АБС Коломиец 20532-

// Бизнесс-процесс согласования РНПД
Функция ПолучитьОтветственныхРНПД(Организация, ВидРНПД, ЦФО, Дирекция = Неопределено) Экспорт
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	абс_ОтветственныеРНПД.Ответственный КАК Ответственный
	//|ИЗ
	//|	РегистрСведений.абс_ОтветственныеРНПД КАК абс_ОтветственныеРНПД
	//|ГДЕ
	//|	абс_ОтветственныеРНПД.ЦФО = &ЦФО
	//|	И абс_ОтветственныеРНПД.Организация = &Организация
	//|	И ВЫБОР
	//|			КОГДА &ВидРНПД = ЗНАЧЕНИЕ(Перечисление.абс_ВидыДокументовРНПД.ПоДирекции)
	//|				ТОГДА абс_ОтветственныеРНПД.Дирекция = &Дирекция
	//|			ИНАЧЕ абс_ОтветственныеРНПД.Дирекция = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	//|		КОНЕЦ");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ОтветственныеРНПД.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.абс_ОтветственныеРНПД КАК абс_ОтветственныеРНПД
	|ГДЕ
	|	абс_ОтветственныеРНПД.ЦФО = &ЦФО
	|	И абс_ОтветственныеРНПД.Организация = &Организация
	|	И абс_ОтветственныеРНПД.ВидДокументаРНПД = &ВидРНПД");	
	
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("ЦФО"				, ЦФО);
	Запрос.УстановитьПараметр("ВидРНПД"			, ВидРНПД);
	Запрос.УстановитьПараметр("Дирекция"		, Дирекция);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ответственный");
		
КонецФункции

Функция ПолучитьОтветственныхРНПДПоЦФО(Ответственный, Организация, ВидРНПД)Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ОтветственныеРНПД.Организация,
	|	абс_ОтветственныеРНПД.ВидДокументаРНПД,
	|	абс_ОтветственныеРНПД.ЦФО,
	|	абс_ОтветственныеРНПД.Дирекция,
	|	абс_ОтветственныеРНПД.Ответственный
	|ИЗ
	|	РегистрСведений.абс_ОтветственныеРНПД КАК абс_ОтветственныеРНПД
	|ГДЕ
	|	абс_ОтветственныеРНПД.Организация = &Организация
	|	И абс_ОтветственныеРНПД.Ответственный = &Ответственный
	|	И абс_ОтветственныеРНПД.ВидДокументаРНПД = &ВидРНПД");
	
	Запрос.УстановитьПараметр("Ответственный"	, Ответственный);
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("ВидРНПД"			, ВидРНПД);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЦФО");	
	
КонецФункции

Процедура СформироватьЗадачуИсполнителямРНПД(БП, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители = Неопределено, Организация = Неопределено) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	Если Исполнители = Неопределено Тогда
		ЗапросИсполнителей = Новый Запрос(
		"ВЫБРАТЬ
		|	РолиИИсполнители.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|ГДЕ
		|	РолиИИсполнители.Роль = &РольИсполнителей
		|	И ВЫБОР
		|			КОГДА &ОтборПоОрганизации
		|				ТОГДА РолиИИсполнители.Организация = &Организация
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ");
		
		ЗапросИсполнителей.УстановитьПараметр("ОтборПоОрганизации", НЕ Организация = Неопределено);
		ЗапросИсполнителей.УстановитьПараметр("Организация", Организация);
										  
		РольИсполнителей = Неопределено;									  
		Если ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеРПР.ТочкиМаршрута.ДействиеСогласованиеДФМ Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеДФМРНПД;
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеРПР.ТочкиМаршрута.ДействиеОбработкаБухгалтером Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.БухгалтерРНПД;
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеРПР.ТочкиМаршрута.ДействиеОбработкаПринятыхДокументов Тогда
			РольИсполнителей = Справочники.РолиИсполнителей.БухгалтерРНПД;			
		КонецЕсли;
		
		Если РольИсполнителей = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗапросИсполнителей.УстановитьПараметр("РольИсполнителей", РольИсполнителей);
		
		ВыборкаИсполнители = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута,
			ЗапросИсполнителей.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель"));
			
	Иначе
			
		ВыборкаИсполнители = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута, Исполнители);
		
	КонецЕсли;	 
					
	//Для Каждого ТекИсполнитель Из ВыборкаИсполнители Цикл
	Если ВыборкаИсполнители.Количество() > 0 Тогда		
		абс_БизнесПроцессы.СформироватьЗадачуРНПД(БП, ТочкаМаршрута, ФормируемыеЗадачи, ,,РольИсполнителей);
	КонецЕсли;			
	//КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЗадачуРНПД(БП, ТочкаМаршрута, ФормируемыеЗадачи, ТекИсполнитель, Отказ = Ложь,РольИсполнителей) Экспорт
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
	НоваяЗадача.Дата 				= абс_СерверныеФункции.ПолучитьДатуСервера();
	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи 
	//	+ " ("+СокрЛП(Контрагент.Наименование) + " :" + СокрЛП(ДоговорКонтрагента.Наименование) + ")";
	НоваяЗадача.Наименование = СокрЛП(БП.ДокументРПР) + " " 
		+ ТочкаМаршрута.НаименованиеЗадачи + ".";
	
	//НоваяЗадача.Исполнитель			= ТекИсполнитель;
	
	НоваяЗадача.Роль                = РольИсполнителей;
	
	НоваяЗадача.ОбъектЗадачи 		= БП.ДокументРПР;
	
	НоваяЗадача.Записать();
		
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
КонецПроцедуры

&НаКлиенте 
Процедура УсловныеНачисленияОткрытьСписокПроектовСправок() Экспорт
	
	СтруктураПараметров = Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.абс_ВидыДокументовРНПД.ПоДирекции"));
	
	ОткрытьФорму("Документ.абс_РезервыПроизведенныхРасходов.ФормаСписка", СтруктураПараметров,,"ПроектыУсловныхНачислений");
	
КонецПроцедуры

&НаКлиенте
Процедура УсловныеначисленияОткрытьСписокСправок() Экспорт
	
	СтруктураПараметров = Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.абс_ВидыДокументовРНПД.ПоЦФО"));
	
	ОткрытьФорму("Документ.абс_РезервыПроизведенныхРасходов.ФормаСписка", СтруктураПараметров,,"СправкиПоУсловнымНачислениям");	
	
КонецПроцедуры

//Заполнение статусов первичных документов
//Типы:
//ДокументСсылка.ПоступлениеТоваровУслуг, 
//ДокументСсылка.АвансовыйОтчет 
Процедура ЗаполнитьСписокДоступныхСтатусовППД(Ссылка,СписокСтатусов = Неопределено,мТекущийПользователь,мРолиПользователя) Экспорт
	
	Если СписокСтатусов = Неопределено Тогда
		СписокСтатусов = Новый СписокЗначений();
	Иначе
		СписокСтатусов.Очистить();
	КонецЕсли;
	
	СписокСтатусов.Добавить(Ссылка.абс_Статус);
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтатус = абс_БизнесПроцессы.ПолучитьСтатусПервичногоДокументаПоРегистру(Ссылка);
	
	Инициатор_ППД    = Ссылка.Ответственный = мТекущийПользователь;
	ИдемПоЦепочкеОФК = НеобходимоСогласованиеОФКПервичногоДокумента(Ссылка);
	//Если пропускаем цепочку ОФК, то проверяем, что ЗЗ в нужном статусе
	ЗакупочныйЗаказВНужномСтатусе = НЕ ?(ИдемПоЦепочкеОФК = Ложь,Ложь,ЗакупочныйЗаказНеВНужномСтатусе(Ссылка)); 
	//АБС ВСТАВКА №14831 НАЧАЛО
	ИсключитьИзЦепочкиОФК = НЕ ИдемПоЦепочкеОФК или ПроверитьСтатьиОборотовПоБюджетам(Ссылка);
	//\\АБС ВСТАВКА №14831 КОНЕЦ
	
	//Бобылев А.А. 11.10.2018 416
	ЗакрытыйПериод = ttk_ИнтеграцияБП30Сервер.ЗакрытыйПериод(Ссылка.Дата,Ссылка, "ДокументСсылка.ПоступлениеТоваровУслуг");
	//Бобылев А.А. --------------------
	
	//Статус подготовка
	Если ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка
		и ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		И Ссылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтветХранение Тогда
			//Бобылев А.А. 11.10.2018 416
			Если НЕ ЗакрытыйПериод Тогда
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
			КонецЕсли;
			//Бобылев А.А. -----------------
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);	
	
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) 				= Неопределено) ИЛИ
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено) Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отмена);
		КонецЕсли;
		
		Если ЗакупочныйЗаказВНужномСтатусе и (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда 						                                                             						
			Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено Тогда
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером);  				
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);  				
			КонецЕсли;
			//Бобылев А.А. 11.10.2018 416
			Если НЕ ЗакрытыйПериод Тогда
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
			КонецЕсли;
			//Бобылев А.А. -----------------
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);			
		КонецЕсли; 		
		
		//АБС ВСТАВКА №14831 НАЧАЛО
		Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) = Неопределено) 
			или (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено))
			и СписокСтатусов.НайтиПоЗначению(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером) = Неопределено
			и ЗакупочныйЗаказВНужномСтатусе 
			и ИсключитьИзЦепочкиОФК Тогда
			//Бобылев А.А. 11.10.2018 416
			Если НЕ ЗакрытыйПериод Тогда
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
			КонецЕсли;
			//Бобылев А.А. -----------------
		КонецЕсли;		
		//\\АБС ВСТАВКА №14831 КОНЕЦ
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеОФК Тогда
		
		Если (Инициатор_ППД 
			И (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено))
				или (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда 			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК);
		КонецЕсли;
		
	//Бобылев А.А. 20.09.2018 CHG146	
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда 			
			//Бобылев А.А. 11.10.2018 416
			Если НЕ ЗакрытыйПериод Тогда
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
			КонецЕсли;
			//Бобылев А.А. -----------------
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.УточнениеОФК);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ); 			
		КонецЕсли;
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером);  				
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);	
			Если СписокСтатусов.НайтиПоЗначению(Перечисления.абс_СтатусыПервичныхДокументов.Отказ) = Неопределено Тогда
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
			КонецЕсли;
		КонецЕсли;		
		//Бобылев А.А. 26.09.2018 CHG146
		СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеПДД);
		//Бобылев А.А. ---------------
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией Тогда
		
		Если (Инициатор_ППД И 
			((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) 				= Неопределено) ИЛИ 
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено)))
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)  Тогда
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером);
			
		КонецЕсли;
					
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено ИЛИ
			 НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.КорректировкаДокумента);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.КорректировкаДокумента Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено ИЛИ
			НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
			//Бобылев А.А. 19.11.2018 Обмен
			Если ttk_ИнтеграцияБП30Сервер.ПроверкаИспользованияКонстантыИнтеграцияБП30(ссылка.Дата) Тогда
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отмена);
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
			Иначе
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией);
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отмена);
			КонецЕсли;
			//Бобылев А.А.------------------
		КонецЕсли;
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ
				или ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Отмена Тогда
		
		Если (Инициатор_ППД и ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) = Неопределено) 
				или (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено)))
				или (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда 			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
		КонецЕсли;
	////Бобылев А.А. 23.07.2018 СППР 00-00000110
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.БюджетныйКонтроль 
		//И КонтрольЛимитов(УчетНДС.ПолучитьСуммуДокументаСНДС(Ссылка.ПОлучитьОбъект()) - УчетНДС.ПолучитьНДСДокумента(Ссылка.ПОлучитьОбъект()),ссылка.абс_ЗакупочныйЗаказ,ссылка)
		И ПроверкаЛимитовЗЗ(Ссылка)
		И мРолиПользователя.Найти(Справочники.РолиИсполнителей.БюджетныйКонтролер) Тогда
		СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
		//Бобылев А.А. 11.10.2018 416
		Если НЕ ЗакрытыйПериод Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
		КонецЕсли;
		//Бобылев А.А. -----------------
		СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеПДД);
		СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеПДД 
		И мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО)  Тогда
		//Бобылев А.А. 11.10.2018 416
		Если НЕ ЗакрытыйПериод Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
		КонецЕсли;
		//Бобылев А.А. -----------------
		СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отмена);
		СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
		СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
		//Бобылев А.А.---------------------------------
	КонецЕсли;
	
	//Бобылев А.А. 20.09.2018 CHG146 
	Если ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
		Если НЕ (мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено) Тогда
			//Если НЕ КонтрольЛимитов(УчетНДС.ПолучитьСуммуДокументаСНДС(Ссылка.ПОлучитьОбъект()) - УчетНДС.ПолучитьНДСДокумента(Ссылка.ПОлучитьОбъект()),ссылка.абс_ЗакупочныйЗаказ,ссылка) Тогда
			Если ПроверкаЛимитовЗЗ(Ссылка) Тогда
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.БюджетныйКонтроль);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	////	//Бобылев А.А. -----------------------------
		
		
КонецПроцедуры

//Бобылев А.А. 20.09.2018 CHG146
Функция КонтрольЛимитов(СуммаПроверка,СтруктураАналитик,ссылка)	
	Если УправлениеДопПравамиПользователей.РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Тогда
		возврат Истина;
	КонецЕсли;
	
	Если абс_Бюджетирование.ПоСтатьеРазрешеноПревышениеБюджета(СтруктураАналитик.БюджетнаяСтатья, ссылка.Организация) Тогда
		возврат Истина;
	КонецЕсли;
	
							
	Остаток = абс_Бюджетирование.ОстатокЛимитаПоБюджету(НачалоМесяца(ссылка.Дата),КонецМесяца(ссылка.Дата), СтруктураАналитик);
	Разница = Остаток - СуммаПроверка;
	Если Разница < -1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция ПолучитьТекстЗапроса()	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПоступлениеТоваровУслугТовары.абс_ЗакупочныйЗаказТЧ,
	               |	ПоступлениеТоваровУслугТовары.СтатьяОборотов,
	               |	ПоступлениеТоваровУслугТовары.абс_КВ,
	               |	ПоступлениеТоваровУслугТовары.абс_ТЭО,
	               |	ПоступлениеТоваровУслугТовары.абс_ЦФУ,
	               |	ПоступлениеТоваровУслугТовары.ttk_ОбъектБюджетирования,
	               |	ПоступлениеТоваровУслугТовары.Сумма - ВЫБОР
	               |		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	               |			ТОГДА ПоступлениеТоваровУслугТовары.СуммаНДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Сумма,
	               |	ПоступлениеТоваровУслугТовары.ttk_УсловноеНачисление КАК ttk_УсловноеНачисление
	               |ПОМЕСТИТЬ ВТ_ТЧ
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |ГДЕ
	               |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугУслуги.абс_ЗакупочныйЗаказТЧ,
	               |	ПоступлениеТоваровУслугУслуги.СтатьяОборотов,
	               |	ПоступлениеТоваровУслугУслуги.абс_КВ,
	               |	ПоступлениеТоваровУслугУслуги.абс_ТЭО,
	               |	ПоступлениеТоваровУслугУслуги.абс_ЦФУ,
	               |	ПоступлениеТоваровУслугУслуги.ttk_ОбъектБюджетирования,
	               |	ПоступлениеТоваровУслугУслуги.Сумма - ВЫБОР
	               |		КОГДА ПоступлениеТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	               |			ТОГДА ПоступлениеТоваровУслугУслуги.СуммаНДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ПоступлениеТоваровУслугУслуги.ttk_УсловноеНачисление
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	               |ГДЕ
	               |	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугОборудование.абс_ЗакупочныйЗаказТЧ,
	               |	ПоступлениеТоваровУслугОборудование.СтатьяОборотов,
	               |	ПоступлениеТоваровУслугОборудование.абс_КВ,
	               |	ПоступлениеТоваровУслугОборудование.абс_ТЭО,
	               |	ПоступлениеТоваровУслугОборудование.абс_ЦФУ,
	               |	ПоступлениеТоваровУслугОборудование.ttk_ОбъектБюджетирования,
	               |	ПоступлениеТоваровУслугОборудование.Сумма - ВЫБОР
	               |		КОГДА ПоступлениеТоваровУслугОборудование.Ссылка.СуммаВключаетНДС
	               |			ТОГДА ПоступлениеТоваровУслугОборудование.СуммаНДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	NULL
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	               |ГДЕ
	               |	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугОбъектыСтроительства.абс_ЗакупочныйЗаказТЧ,
	               |	ПоступлениеТоваровУслугОбъектыСтроительства.СтатьяОборотов,
	               |	ПоступлениеТоваровУслугОбъектыСтроительства.абс_КВ,
	               |	ПоступлениеТоваровУслугОбъектыСтроительства.абс_ТЭО,
	               |	ПоступлениеТоваровУслугОбъектыСтроительства.абс_ЦФУ,
	               |	ПоступлениеТоваровУслугОбъектыСтроительства.ttk_ОбъектБюджетирования,
	               |	ПоступлениеТоваровУслугОбъектыСтроительства.Сумма - ВЫБОР
	               |		КОГДА ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.СуммаВключаетНДС
	               |			ТОГДА ПоступлениеТоваровУслугОбъектыСтроительства.СуммаНДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	NULL
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
	               |ГДЕ
	               |	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТЧ.абс_ЗакупочныйЗаказТЧ,
	               |	ВТ_ТЧ.СтатьяОборотов,
	               |	ВТ_ТЧ.абс_КВ,
	               |	ВТ_ТЧ.абс_ТЭО,
	               |	ВТ_ТЧ.абс_ЦФУ,
	               |	ВТ_ТЧ.ttk_ОбъектБюджетирования,
	               |	СУММА(ВТ_ТЧ.Сумма) КАК Сумма,
	               |	ВТ_ТЧ.ttk_УсловноеНачисление
	               |ПОМЕСТИТЬ ВТ_АналитикиПроверки
	               |ИЗ
	               |	ВТ_ТЧ КАК ВТ_ТЧ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ТЧ.абс_ЦФУ,
	               |	ВТ_ТЧ.абс_ТЭО,
	               |	ВТ_ТЧ.абс_ЗакупочныйЗаказТЧ,
	               |	ВТ_ТЧ.СтатьяОборотов,
	               |	ВТ_ТЧ.абс_КВ,
	               |	ВТ_ТЧ.ttk_ОбъектБюджетирования,
	               |	ВТ_ТЧ.ttk_УсловноеНачисление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_АналитикиПроверки.абс_ЗакупочныйЗаказТЧ КАК ЗакупочныйЗаказ,
	               |	ВТ_АналитикиПроверки.СтатьяОборотов,
	               |	ВТ_АналитикиПроверки.абс_КВ,
	               |	ВТ_АналитикиПроверки.абс_ТЭО,
	               |	ВТ_АналитикиПроверки.абс_ЦФУ,
	               |	ВТ_АналитикиПроверки.ttk_ОбъектБюджетирования,
	               |	ВТ_АналитикиПроверки.Сумма КАК СуммаИзДокумента,
	               |	ВЫБОР
	               |		КОГДА ВТ_АналитикиПроверки.ttk_УсловноеНачисление = ЗНАЧЕНИЕ(Документ.абс_РезервыПроизведенныхРасходов.ПустаяССЫлка)
	               |				ИЛИ ВТ_АналитикиПроверки.ttk_УсловноеНачисление ЕСТЬ NULL 
	               |			ТОГДА ЕСТЬNULL(абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.СуммаОстаток, 0)
	               |		ИНАЧЕ ЕСТЬNULL(абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиВХ.СуммаОстаток, 0)
	               |	КОНЕЦ КАК Остаток,
	               |	ВТ_АналитикиПроверки.ttk_УсловноеНачисление
	               |ИЗ
	               |	ВТ_АналитикиПроверки КАК ВТ_АналитикиПроверки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.абс_ГрафикПоставкиЗакупочногоЗаказа.Остатки(
	               |				&Дата,
	               |				ЗакупочныйЗаказ В
	               |						(ВЫБРАТЬ
	               |							ВТ_АналитикиПроверки.абс_ЗакупочныйЗаказТЧ
	               |						ИЗ
	               |							ВТ_АналитикиПроверки КАК ВТ_АналитикиПроверки)
	               |					И ПериодПоставки = &ПериодПоставки) КАК абс_ГрафикПоставкиЗакупочногоЗаказаОстатки
	               |		ПО ВТ_АналитикиПроверки.абс_ЗакупочныйЗаказТЧ = абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.ЗакупочныйЗаказ
	               |			И ВТ_АналитикиПроверки.СтатьяОборотов = абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.СтатьяОборотов
	               |			И ВТ_АналитикиПроверки.абс_КВ = абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.абс_КВ
	               |			И ВТ_АналитикиПроверки.абс_ТЭО = абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.абс_ТЭО
	               |			И ВТ_АналитикиПроверки.абс_ЦФУ = абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.абс_ЦФУ
	               |			И ВТ_АналитикиПроверки.ttk_ОбъектБюджетирования = абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.ttk_ОбъектБюджетирования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.абс_ГрафикПоставкиЗакупочногоЗаказа.Остатки(
	               |				&Дата,
	               |				ЗакупочныйЗаказ В
	               |						(ВЫБРАТЬ
	               |							ВТ_АналитикиПроверки.абс_ЗакупочныйЗаказТЧ
	               |						ИЗ
	               |							ВТ_АналитикиПроверки КАК ВТ_АналитикиПроверки)
	               |					И ПериодПоставки = &ПериодПоставкиВХ) КАК абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиВХ
	               |		ПО ВТ_АналитикиПроверки.ttk_ОбъектБюджетирования = абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиВХ.ttk_ОбъектБюджетирования
	               |			И ВТ_АналитикиПроверки.СтатьяОборотов = абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиВХ.СтатьяОборотов
	               |			И ВТ_АналитикиПроверки.абс_КВ = абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиВХ.абс_КВ
	               |			И ВТ_АналитикиПроверки.абс_ТЭО = абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиВХ.абс_ТЭО
	               |			И ВТ_АналитикиПроверки.абс_ЦФУ = абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиВХ.абс_ЦФУ
	               |			И ВТ_АналитикиПроверки.абс_ЗакупочныйЗаказТЧ = абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиВХ.ЗакупочныйЗаказ";
	
	Возврат ТекстЗапроса;	
КонецФункции

Функция ПроверкаЛимитовЗЗ(Ссылка)
	абс_ИсключитьДатуИзГрафикаПоставок = Константы.абс_ИсключитьДатуИзГрафикаПоставок.Получить();
	Если ЗначениеЗаполнено(абс_ИсключитьДатуИзГрафикаПоставок) и НачалоДня(ссылка.Дата) = НачалоДня(абс_ИсключитьДатуИзГрафикаПоставок) Тогда
		врДатаПоставки = НачалоДня(абс_ИсключитьДатуИзГрафикаПоставок)-1;
	Иначе
		врДатаПоставки = Ссылка.Дата;
	КонецЕсли;		
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Дата", Неопределено);
	Запрос.УстановитьПараметр("ПериодПоставки", НачалоМесяца(врДатаПоставки));
	Если НачалоМесяца(ссылка.Дата)<>Дата("20180101") Тогда
		ПериодПоставкиВХ = НачалоМесяца(?(НачалоМесяца(ссылка.ДатаВходящегоДокумента)<Дата("20180101"),Дата("20180201"),НачалоМесяца(ссылка.ДатаВходящегоДокумента)));
	ИначеЕсли НачалоМесяца(ссылка.Дата)=Дата("20180101") Тогда
		ПериодПоставкиВХ = Дата("20180101");
	Иначе
		ПериодПоставкиВХ  = НачалоМесяца(Ссылка.Дата); 
	КонецЕсли;	
	Запрос.УстановитьПараметр("ПериодПоставкиВХ", ПериодПоставкиВХ);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокНехваток = 0;
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЗакупочныйЗаказ.УбыткиПрошлыхЛет И НЕ Выборка.ЗакупочныйЗаказ.РасходыБудущихПериодов Тогда 
			Если Выборка.ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
				ТекВалютаВзаиморасчетов = Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				ТекКурс = ?(ссылка.ВалютаДокумента <> ТекВалютаВзаиморасчетов, МодульВалютногоУчета.ПолучитьКурсВалюты(ссылка.ВалютаДокумента, врДатаПоставки).Курс, ссылка.КурсВзаиморасчетов);
				СтруктураАналитик = НОВЫЙ Структура;
				СтруктураАналитик.Вставить("Организация",Выборка.ЗакупочныйЗаказ.Организация);
				СтруктураАналитик.Вставить("абс_ЦФУ", Выборка.абс_ЦФУ);
				СтруктураАналитик.Вставить("ЦФО", Выборка.ЗакупочныйЗаказ.ЦФО);
				СтруктураАналитик.Вставить("абс_ТипРасхода", Выборка.ЗакупочныйЗаказ.ТипРасхода);
				СтруктураАналитик.Вставить("абс_ТипКонтрагента", Выборка.ЗакупочныйЗаказ.ТипКонтрагента);
				СтруктураАналитик.Вставить("абс_КВ", Выборка.абс_КВ);
				СтруктураАналитик.Вставить("абс_ТЭО", Выборка.абс_ТЭО);
				СтруктураАналитик.Вставить("СтатьяОборотов", Выборка.СтатьяОборотов);
				СтруктураАналитик.Вставить("ttk_ОбъектБюджетирования", Выборка.ttk_ОбъектБюджетирования);
				Если Не КонтрольЛимитов(Выборка.СуммаИзДокумента*ТекКурс, СтруктураАналитик,ссылка) Тогда
					Сообщить("Сумма по документу " + Выборка.ЗакупочныйЗаказ + " превышает лимит!");
					СписокНехваток = СписокНехваток + 1;	
				КонецЕсли;
			Иначе
				Разница = Выборка.Остаток - Выборка.СуммаИзДокумента;
				Если Разница < -1 Тогда
					Сообщить("Сумма по документу " + Выборка.ЗакупочныйЗаказ + " превышает лимит!");
					СписокНехваток = СписокНехваток + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокНехваток > 0 Тогда 
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПроверкаАрендаУслугиСвязи(Ссылка)
	Для каждого Элемент из Ссылка.Услуги Цикл
		//Если Элемент.Номенклатура = 1; 
	КонецЦикла;
КонецФункции
//Бобылев А.А. 20.09.2018 ----------------------------

Функция ЗакупочныйЗаказНеВНужномСтатусе(Ссылка) Экспорт 
		
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Документ = "ПоступлениеТоваровУслуг";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Документ = "АвансовыйОтчет";
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТЧ.абс_ЗакупочныйЗаказТЧ КАК Заказ
	                      |ПОМЕСТИТЬ вр
	                      |ИЗ
	                      |	Документ."+Документ+".абс_ЗакупочныеЗаказы КАК ТЧ
	                      |ГДЕ
	                      |	ТЧ.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТЧ.абс_ЗакупочныйЗаказТЧ
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	Док.абс_ЗакупочныйЗаказ
	                      |ИЗ
	                      |	Документ."+Документ+" КАК Док
	                      |ГДЕ
	                      |	Док.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Док.абс_ЗакупочныйЗаказ
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Заказ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	вр.Заказ
	                      |ИЗ
	                      |	вр КАК вр
	                      |ГДЕ
	                      |	(НЕ вр.Заказ.Статус В (&Статус))
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	вр.Заказ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ вр");	
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);	
	СтатусДляОтбора = Новый Массив;
	СтатусДляОтбора.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
	СтатусДляОтбора.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение);	
	Запрос.УстановитьПараметр("Статус",СтатусДляОтбора);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	                             	
КонецФункции	

Функция ПроверитьСтатьиОборотовПоБюджетам(Ссылка) Экспорт 
		
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Документ = "ПоступлениеТоваровУслуг";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Документ = "АвансовыйОтчет";
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТЧ.абс_ЗакупочныйЗаказТЧ.БюджетнаяСтатья.абс_ИсключитьИзЦепочкиОФК КАК ИсключитьИзЦепочкиОФК
	                      |ПОМЕСТИТЬ вр
	                      |ИЗ
	                      |	Документ."+Документ+".абс_ЗакупочныеЗаказы КАК ТЧ
	                      |ГДЕ
	                      |	ТЧ.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТЧ.абс_ЗакупочныйЗаказТЧ.БюджетнаяСтатья.абс_ИсключитьИзЦепочкиОФК
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	Док.абс_ЗакупочныйЗаказ.БюджетнаяСтатья.абс_ИсключитьИзЦепочкиОФК
	                      |ИЗ
	                      |	Документ."+Документ+" КАК Док
	                      |ГДЕ
	                      |	Док.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Док.абс_ЗакупочныйЗаказ.БюджетнаяСтатья.абс_ИсключитьИзЦепочкиОФК
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ИсключитьИзЦепочкиОФК
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	вр.ИсключитьИзЦепочкиОФК
	                      |ИЗ
	                      |	вр КАК вр
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	вр.ИсключитьИзЦепочкиОФК
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ вр");	
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат ?(Результат.Количество() = 1 и Результат[0].ИсключитьИзЦепочкиОФК = Истина,Истина,Ложь);
	                             	
КонецФункции	

//АБС_Родин	
Функция ПолучитьСтатусПоЗаявкеНаИзмениеПрав(Заявка, ПериодСтатуса = Неопределено) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПрав.СтатусЗаявки КАК СтатусЗаявки,
	                            |	абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПрав.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПрав.СрезПоследних(&Период, Заявка = &Заявка) КАК абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПрав
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
								
	Если ПериодСтатуса = Неопределено Тогда
		ПериодСтатуса = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;								
								
	ЗапросСтатус.УстановитьПараметр("Период"		, Новый Граница(ПериодСтатуса, ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("Заявка"	, Заявка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусЗаявки;
	КонецЕсли;
	
	Возврат ТекСтатус;
КонецФункции

Функция ПолучитьСтатусПоОС(ОС, ПериодСтатуса = Неопределено) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовОССрезПоследних.Период КАК Период,
	                            |	абс_ИзменениеСтатусовОССрезПоследних.СтатусОС КАК СтатусОС
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовОС.СрезПоследних(&Период, ОС = &ОС) КАК абс_ИзменениеСтатусовОССрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
								
	Если ПериодСтатуса = Неопределено Тогда
		ПериодСтатуса = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;								
								
	ЗапросСтатус.УстановитьПараметр("Период"		, Новый Граница(ПериодСтатуса, ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ОС"	, ОС);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусОС;
	КонецЕсли;
	
	Возврат ТекСтатус;
КонецФункции
//АБС_Родин

//АБС_Родин  отпимизация
&НаКлиенте
Процедура ОткрытьФормуЗадач() Экспорт
	Если Не глЗначениеПеременной("абс_ОткрыватьСтаруюФормуЗадач") Тогда
		ОткрытьФорму("Обработка.абс_МоиЗадачи.Форма.Форма");
	Иначе
		ОткрытьФорму("Задача.абсЗадачаДоговора.Форма.ФормаСпискаВсехЗадач");
	КонецЕсли;
КонецПроцедуры
//АБС_Родин  отпимизация


//АБС Коломиец
Процедура абс_ПередЗаписьюСнятьБУНУПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
		
	Если Источник.ОбменДанными.Загрузка  тогда
		Возврат;
	КонецЕсли;
	
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 18:52:25  Поставка
	Если глЗначениеПеременной("абс_ВыклКонтрольОтраженияППД") Тогда
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
		Возврат;
	КонецЕсли;	
	
	Попытка
	
		Если (Источник.Метаданные().Реквизиты.Найти("абс_Статус") <> Неопределено 
				И СписокСтатусовППД().НайтиПоЗначению(Источник.абс_Статус) <> Неопределено) 							
			 ИЛИ (Источник.Метаданные().Реквизиты.Найти("абс_СтатусДокумента") <> Неопределено
				И СписокСтатусовППД().НайтиПоЗначению(Источник.абс_СтатусДокумента) <> Неопределено) Тогда
			
			Если Источник.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено И Источник.ОтражатьВБухгалтерскомУчете Тогда
				Источник.ОтражатьВБухгалтерскомУчете = Ложь;
			КонецЕсли;
			
			Если Источник.Метаданные().Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено И Источник.ОтражатьВНалоговомУчете Тогда
				Источник.ОтражатьВНалоговомУчете = Ложь;
			КонецЕсли;
			
			Если Источник.Метаданные().Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено И НЕ Источник.ОтражатьВУправленческомУчете Тогда
				Источник.ОтражатьВУправленческомУчете = Истина;
			КонецЕсли;			
			
		КонецЕсли;
				
	Исключение
	КонецПопытки;

КонецПроцедуры

Функция СписокСтатусовППД() Экспорт 
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
	СписокЗначений.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
	СписокЗначений.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отмена);
	
	Возврат СписокЗначений;
	
КонецФункции	

// АБС Иванов статусы ИСУЗК
#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение  Тогда
Процедура ОткрытьФормуИсторииСтатусовКадровыхПриказов(ОбъектСогласования) Экспорт
	
	Форма = ПолучитьФорму("ОбщаяФорма.абс_ФормаИсторииСтатусовКадровыхПриказов");
	Форма.ОбъектСогласования = ОбъектСогласования;
	
	ОтборЗаявка = Форма.Согласование.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЗаявка.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЗаявка.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Документ");
	ОтборЗаявка.ПравоеЗначение	= ОбъектСогласования;
	ОтборЗаявка.Использование 	= Истина;
	
	ОтборЗаявка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	Форма.Открыть();
	
КонецПроцедуры

Процедура ОткрытьФормуИсторииСтатусовРасчетныхДокументов(ОбъектСогласования) Экспорт
	
	Форма = ПолучитьФорму("ОбщаяФорма.абс_ФормаИсторииСтатусовРасчетныхДокументов");
	Форма.ОбъектСогласования = ОбъектСогласования;
	
	ОтборЗаявка = Форма.Согласование.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЗаявка.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЗаявка.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Документ");
	ОтборЗаявка.ПравоеЗначение	= ОбъектСогласования;
	ОтборЗаявка.Использование 	= Истина;
	
	ОтборЗаявка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	Форма.Открыть();
	
КонецПроцедуры

Процедура ОткрытьФормуИсторииСтатусовКадровоРасчетныхДокументов(ОбъектСогласования) Экспорт
	
	Форма = ПолучитьФорму("ОбщаяФорма.абс_ФормаИсторииСтатусовКадровоРасчетныхДокументов");
	Форма.ОбъектСогласования = ОбъектСогласования;
	
	ОтборЗаявка = Форма.Согласование.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЗаявка.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЗаявка.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Документ");
	ОтборЗаявка.ПравоеЗначение	= ОбъектСогласования;
	ОтборЗаявка.Использование 	= Истина;
	
	ОтборЗаявка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	Форма.Открыть();
	
КонецПроцедуры
#КонецЕсли

Процедура УстановитьСтатусИСУЗКДляДоговораПодряда(ДокОбъект) Экспорт
	
	Если ДокОбъект.абс_СтатусИСУЗК.Пустая() Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровыхПриказов.Подготовка;
	КонецЕсли;
	
	Если ДокОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.Подготовка Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровыхПриказов.Подготовка;
	ИначеЕсли ДокОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.ПроверкаНСИ Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровыхПриказов.Подготовка;
	ИначеЕсли ДокОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.СогласованиеБухгалтерией Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровыхПриказов.Подготовка;
	ИначеЕсли ДокОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.СогласованиеОтделомКадров Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровыхПриказов.Подготовка;
	ИначеЕсли ДокОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.СогласованиеПВП Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровыхПриказов.Подготовка;
	ИначеЕсли ДокОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.СогласованиеПД Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровыхПриказов.Подготовка;
	ИначеЕсли ДокОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.СогласованиеРукДеп Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровыхПриказов.Подготовка;
	ИначеЕсли ДокОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.Регистрация Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровыхПриказов.Подписание;
	ИначеЕсли ДокОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.Согласован Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровыхПриказов.Согласован;
	ИначеЕсли ДокОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.Отказ Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровыхПриказов.Отказ;
	ИначеЕсли ДокОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.Отмена Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровыхПриказов.Отмена;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусИСУЗКДляАктаПриёмки(ДокОбъект) Экспорт
	
	Если ДокОбъект.абс_СтатусИСУЗК.Пустая() Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровоРасчетныхДокументов.Подготовка;
	КонецЕсли;
	
	Если ДокОбъект.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.Подготовка Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровоРасчетныхДокументов.Подготовка;
	ИначеЕсли ДокОбъект.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.СогласованиеРукДеп Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровоРасчетныхДокументов.Подписание;
	ИначеЕсли ДокОбъект.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.СогласованиеПВП Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровоРасчетныхДокументов.Согласование;
	ИначеЕсли ДокОбъект.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.Согласован Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровоРасчетныхДокументов.Согласование;
	ИначеЕсли ДокОбъект.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.ОбработкаБухгалтером Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровоРасчетныхДокументов.ОбработкаПринятыхДокументов;
	ИначеЕсли ДокОбъект.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.ПринятоДляРасчёта Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровоРасчетныхДокументов.ОбработкаБухгалтером;
	ИначеЕсли ДокОбъект.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.Завершён Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровоРасчетныхДокументов.Рассчитан;
	ИначеЕсли ДокОбъект.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.Отказ Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровоРасчетныхДокументов.Отказ;
	ИначеЕсли ДокОбъект.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.Отмена Тогда
		ДокОбъект.абс_СтатусИСУЗК = Перечисления.абс_СтатусыКадровоРасчетныхДокументов.Отмена;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДвиженияПоРегиструСтатусовКадровыхПриказов(Ссылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.абс_ИсторияСтатусовКадровыхПриказов.СоздатьНаборЗаписей();
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Документ		 		= Ссылка;
	НоваяСтрока.Период 					= абс_СерверныеФункции.ПолучитьДатуСервера();
	НоваяСтрока.Статус 					= Ссылка.абс_СтатусИСУЗК;
	НоваяСтрока.Пользователь 			= глЗначениеПеременной("глТекущийПользователь");
	НоваяСтрока.Комментарий 			= "";
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДвижениеПоРегиструСтатусовКадровыхДокументов(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	абс_ИсторияСтатусовКадровыхПриказовСрезПоследних.Статус
	|ИЗ
	|	РегистрСведений.абс_ИсторияСтатусовКадровыхПриказов.СрезПоследних(&Период, Документ = &Документ) КАК абс_ИсторияСтатусовКадровыхПриказовСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", абс_СерверныеФункции.ПолучитьДатуСервера());
	Запрос.УстановитьПараметр("Документ", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Количество() = 0 Тогда
		ДвиженияПоРегиструСтатусовКадровыхПриказов(Ссылка);
	Иначе
		ВыборкаРезультатаЗапроса.Следующий();
		Если ВыборкаРезультатаЗапроса.Статус <> Ссылка.абс_СтатусИСУЗК Тогда
			ДвиженияПоРегиструСтатусовКадровыхПриказов(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДвиженияПоРегиструСтатусовРасчетныхДокументов(Ссылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.абс_ИсторияСтатусовРасчетныхДокументов.СоздатьНаборЗаписей();
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Документ		 		= Ссылка;
	НоваяСтрока.Период 					= абс_СерверныеФункции.ПолучитьДатуСервера();
	НоваяСтрока.Статус 					= Ссылка.абс_СтатусИСУЗК;
	НоваяСтрока.Пользователь 			= глЗначениеПеременной("глТекущийПользователь");
	НоваяСтрока.Комментарий 			= "";
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДвижениеПоРегиструСтатусовРасчетныхДокументов(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	абс_ИсторияСтатусовРасчетныхДокументовСрезПоследних.Статус
	|ИЗ
	|	РегистрСведений.абс_ИсторияСтатусовРасчетныхДокументов.СрезПоследних(&Период, Документ = &Документ) КАК абс_ИсторияСтатусовРасчетныхДокументовСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", абс_СерверныеФункции.ПолучитьДатуСервера());
	Запрос.УстановитьПараметр("Документ", Ссылка);
    	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Количество() = 0 Тогда
		ДвиженияПоРегиструСтатусовРасчетныхДокументов(Ссылка);
	Иначе
		ВыборкаРезультатаЗапроса.Следующий();
		Если ВыборкаРезультатаЗапроса.Статус <> Ссылка.абс_СтатусИСУЗК Тогда
			ДвиженияПоРегиструСтатусовРасчетныхДокументов(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДвиженияПоРегиструСтатусовКадровоРасчетныхДокументов(Ссылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.абс_ИсторияСтатусовКадровоРасчетныхДокументов.СоздатьНаборЗаписей();
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Документ		 		= Ссылка;
	НоваяСтрока.Период 					= абс_СерверныеФункции.ПолучитьДатуСервера();
	НоваяСтрока.Статус 					= Ссылка.абс_СтатусИСУЗК;
	НоваяСтрока.Пользователь 			= глЗначениеПеременной("глТекущийПользователь");
	НоваяСтрока.Комментарий 			= "";
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДвижениеПоРегиструСтатусовКадровоРасчетныхДокументов(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	абс_ИсторияСтатусовСрезПоследних.Статус
	|ИЗ
	|	РегистрСведений.абс_ИсторияСтатусовКадровоРасчетныхДокументов.СрезПоследних(&Период, Документ = &Документ) КАК абс_ИсторияСтатусовСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", абс_СерверныеФункции.ПолучитьДатуСервера());
	Запрос.УстановитьПараметр("Документ", Ссылка);
    	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Количество() = 0 Тогда
		ДвиженияПоРегиструСтатусовКадровоРасчетныхДокументов(Ссылка);
	Иначе
		ВыборкаРезультатаЗапроса.Следующий();
		Если ВыборкаРезультатаЗапроса.Статус <> Ссылка.абс_СтатусИСУЗК Тогда
			ДвиженияПоРегиструСтатусовКадровоРасчетныхДокументов(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтатусЗаявкиНаОбеспечениеТМЦ(Ссылка) Экспорт 
	
	ЗапросСтатус = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	абс_ИзменениеСтатусовЗаявокНаОбеспечениеТМЦСрезПоследних.СтатусДокумента КАК СтатусДокумента,
	|	абс_ИзменениеСтатусовЗаявокНаОбеспечениеТМЦСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.абс_ИзменениеСтатусовЗаявокНаОбеспечениеТМЦ.СрезПоследних(&Период, Заявка = &Заявка) КАК абс_ИзменениеСтатусовЗаявокНаОбеспечениеТМЦСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"	, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("Заявка"	, Ссылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	                                                              
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусДокумента;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

//абс Житков 
// Бизнес-процессы по заявкам на проект
Функция ЗапуститьБПСогласованияЗаявкаНаПроект(Ссылка) Экспорт
	
		БП = БизнесПроцессы.абс_СогласованиеПроекта.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ЗаявкаНаПроект 			= Ссылка;
		БП.ПользовательИнициаторБП 	= Ссылка.Инициатор;
        БП.Организация              = Ссылка.Организация;
		БП.Записать();
			
		БП.Старт();
	
КонецФункции

Функция НайтиБизнесПроцессПоЗаявкеНаПроект(ЗЗСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ЗаявкаНаПроект = &ЗЗ И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("ЗЗ", ЗЗСсылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

Функция ПолучитьСтатусСогласованияПроекта(ЗЗСсылка) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних.СтатусЗаявкиНаПроект СтатусЗаявкиНаПроект,
	                            |	абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовЗаявкиНаПроект.СрезПоследних(&Период, ЗаявкаНаПроект = &ЗакупочныйЗаказСсылка) КАК абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ЗакупочныйЗаказСсылка"	, ЗЗСсылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусЗаявкиНаПроект;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция НайтиЗадачуЗаявкаНаПроект(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено, ОтборПоИсполнителю = Истина) Экспорт
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ " + ?(ОтборПоИсполнителю, "
							   |	абсЗадачаДоговора.Исполнитель = &Исполнитель И ", "") + "
							   |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута В (&ТочкаМаршрута)
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
							   
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	ЗадачаСсылка = Неопределено;
	
	Если ВыборкаЗадач.Следующий() Тогда
		ЗадачаСсылка = ВыборкаЗадач.Ссылка;
	КонецЕсли;
	
	Возврат ЗадачаСсылка;	
	
КонецФункции

Процедура ЗакрытьОставшиесяЗадачиПоПроектам(БизнесПроцесс) Экспорт
	
    //
	Возврат;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	абсЗадачаДоговора.Ссылка
		|ИЗ
		|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
		|ГДЕ
		|	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
		|	И (НЕ абсЗадачаДоговора.Выполнена)";

	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	//Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.Выполнена = Истина;
		ЗадачаОбъект.Записать();
		
	КонецЦикла;
 	
	
КонецПроцедуры	

//абс Житков
Процедура СформироватьЗадачуИсполнителямЗаявкиНаПроект(БП, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители = Неопределено) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	
	РольИсполнителей = Неопределено;									  
	//Если ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.СогласованиеДТР Тогда
	//	РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеДТР;
	Если ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.СогласованиеДЭИ Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеДЭИ;
	//ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.РазработкаТЭО 
	//	Или ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.СогласованиеТЭО Тогда //***** Гетц. 12.12.13 Добавлена новая точка маршрута для поиска роли
	//	РольИсполнителей = Справочники.РолиИсполнителей.РазработкаТЭО;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.ПодготовкаДокумента 
		ИЛИ ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.ОтказСогласования Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СотрудникИнициаторКомпании;	
		
		//Вставка Родин проектный учет
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.ТехническоеCогласование  Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ДиректорДирекции;	
		
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(
			абс_БизнесПроцессы.ПолучитьПодразделениеДирекции(
				БП.ЗаявкаНаПроект.Инициатор.абс_Сотрудник.ПодразделениеОрганизации),, БП.ЗаявкаНаПроект.Организация));

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.РазработкаИИТРТЭО  Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.РазработкаИТРТЭО;	
	КонецЕсли;
		//Вставка Родин проектный учет

	
		ТекОрганизацияДоговора =  БП.Организация;
	
	 
	//Получим всех возможных исполнителей задачи для этой рели

	Если ТочкаМаршрута <> БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.ТехническоеCогласование И ТочкаМаршрута <> БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.ПодготовкаДокумента Тогда
		ЗапросИсполнителей = Новый Запрос;
		ЗапросИсполнителей.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиИИсполнители.Исполнитель
		|ИЗ
		|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|ГДЕ
		|	РолиИИсполнители.Роль = &Роль
		|	";
		
		ЗапросИсполнителей.УстановитьПараметр("Организация", ТекОрганизацияДоговора);
		ЗапросИсполнителей.УстановитьПараметр("Роль", РольИсполнителей);	
		
		ВыборкаИсполнители = ЗапросИсполнителей.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
		
		
		
		Если ТочкаМаршрута <> БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.ОтказСогласования Тогда
			Для Каждого ТекИсполнитель Из ВыборкаИсполнители Цикл
				абс_БизнесПроцессы.СформироватьЗадачуСогласованиеЗаявкиНаПроект(БП, ТочкаМаршрута,РольИсполнителей, ФормируемыеЗадачи, ТекИсполнитель, ,Истина);
			КонецЦикла;
		Иначе
			абс_БизнесПроцессы.СформироватьЗадачуСогласованиеЗаявкиНаПроект(БП, ТочкаМаршрута,РольИсполнителей, ФормируемыеЗадачи, БП.ПользовательИнициаторБП, ,Истина);
		КонецЕсли;
	Иначе
		Если ТочкаМаршрута = БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.ТехническоеCогласование Тогда 
			Если ПользовательИсполнитель.Количество() <> 0 Тогда
				Для каждого Стр Из ПользовательИсполнитель Цикл
					ТекИсполнитель = Стр;
					абс_БизнесПроцессы.СформироватьЗадачуСогласованиеЗаявкиНаПроект(БП, ТочкаМаршрута,РольИсполнителей, ФормируемыеЗадачи, ТекИсполнитель, ,Истина);
					
					//АБС Вставка 140114 Родин проектный учет
					абс_БизнесПроцессыПривелегированный.ДобавитьЗадачиСуперПользователя(БП.Ссылка, БП.ЗаявкаНаПроект, ТочкаМаршрута, ФормируемыеЗадачи);
					//АБС Вставка 140114 Родин проектный учет
					
				КонецЦикла;
			Иначе
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найден пользователь директор дирекции.", Истина);
			КонецЕсли;
		Иначе
			ТекИсполнитель = БП.ЗаявкаНаПроект.Инициатор;
			абс_БизнесПроцессы.СформироватьЗадачуСогласованиеЗаявкиНаПроект(БП, ТочкаМаршрута,РольИсполнителей, ФормируемыеЗадачи, ТекИсполнитель, ,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗадачуСогласованиеЗаявкиНаПроект(БП, ТочкаМаршрута,Роль, ФормируемыеЗадачи, ТекИсполнитель, Отказ = Ложь, ЗаписыватьРаспределение = Ложь) Экспорт
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
	НоваяЗадача.Дата 				= абс_СерверныеФункции.ПолучитьДатуСервера();
	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи 
	//	+ " ("+СокрЛП(Контрагент.Наименование) + " :" + СокрЛП(ДоговорКонтрагента.Наименование) + ")";
	НоваяЗадача.Наименование = СокрЛП(БП.ЗаявкаНаПроект.НаименованиеПроекта) + ": " + ТочкаМаршрута.НаименованиеЗадачи + ".";
	НоваяЗадача.Роль                = Роль;
	НоваяЗадача.Исполнитель			= ТекИсполнитель;
	НоваяЗадача.Организация         = БП.Организация;
	НоваяЗадача.ОбъектЗадачи 		= БП.ЗаявкаНаПроект;
	
	НоваяЗадача.Записать();
		
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
КонецПроцедуры
//\\ АБС Иванов статусы ИСУЗК КОНЕЦ

//АБС ВСТАВКА №45665 НАЧАЛО «14 августа 2014 г.», Пополитов
Функция НайтиОтветственныхЗаСогласованиеБК(РекласификацияБюджета) Экспорт
	           														
	МассивОрганизация = Новый Массив;
	МассивОрганизация.Добавить(РекласификацияБюджета.ИсточникОрганизация);
	МассивОрганизация.Добавить(РекласификацияБюджета.ПриемникОрганизация);													
														
	МассивЦФО = Новый Массив;
	МассивЦФО.Добавить(РекласификацияБюджета.ИсточникЦФО);
	МассивЦФО.Добавить(РекласификацияБюджета.ПриемникЦФО);
	
	МассивЦФУ = Новый Массив;
	МассивЦФУ.Добавить(РекласификацияБюджета.ИсточникЦФУ);
	МассивЦФУ.Добавить(РекласификацияБюджета.ПриемникЦФУ);
	
	МассивСтатьяОборотов = Новый Массив;
	МассивСтатьяОборотов.Добавить(РекласификацияБюджета.ИсточникСтатьяОборотов);
	МассивСтатьяОборотов.Добавить(РекласификацияБюджета.ПриемникСтатьяОборотов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",МассивОрганизация);
	Запрос.УстановитьПараметр("ЦФО",МассивЦФО);
	Запрос.УстановитьПараметр("ЦФУ",МассивЦФУ);
	Запрос.УстановитьПараметр("БС" ,МассивСтатьяОборотов);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	абс_СогласованиеРеклассификацииБК.Ответственный КАК Ответственный
	               |ИЗ
	               |	РегистрСведений.абс_СогласованиеРеклассификацииБК КАК абс_СогласованиеРеклассификацииБК
	               |ГДЕ
	               |	абс_СогласованиеРеклассификацииБК.ЦФО В(&ЦФО)
	               |	И абс_СогласованиеРеклассификацииБК.ЦФУ В(&ЦФУ)
	               |	И абс_СогласованиеРеклассификацииБК.БС В(&БС)
	               |	И абс_СогласованиеРеклассификацииБК.Организация В(&Организация)";
				   
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ответственный");     
	
КонецФункции	
//\\АБС ВСТАВКА №45665 КОНЕЦ
	
// АБС ВСТАВКА Фролов КПЭ2 20140916
Функция НайтиБизнесПроцессПоВводЗначенийПоказателейДляРасчетаКПЭ(Ссылка) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс.абс_СогласованиеЗначенийПоказателейДляРасчетаКПЭ КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ВводЗначений = &Ссылка
	                        |	И абсБП.Завершен = ЛОЖЬ
	                        |	И НЕ абсБП.ВводЗначений = ЗНАЧЕНИЕ(Документ.абс_ВводЗначенийПоказателейДляРасчетаКПЭ.ПустаяСсылка)
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
	
	ЗапросБП.УстановитьПараметр("Ссылка", Ссылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
	
КонецФункции

Функция ЗапуститьБПСогласованияВводЗначенийПоказателейДляРасчетаКПЭ(Ссылка) Экспорт
	
	//НачатьТранзакцию();
	Попытка 			
		БП = БизнесПроцессы.абс_СогласованиеЗначенийПоказателейДляРасчетаКПЭ.СоздатьБизнесПроцесс();
		БП.Дата 					= абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.ВводЗначений 			= Ссылка;
		БП.ПользовательИнициаторБП 	= Ссылка.Ответственный;	
		БП.Записать();
		
		ТочкаСтарта = Неопределено;
		ТочкаСтарта = БизнесПроцессы.абс_СогласованиеЗначенийПоказателейДляРасчетаКПЭ.ТочкиМаршрута.СогласованиеЗначенийПоказателейДляРасчетаКПЭ;
		БП.Старт(ТочкаСтарта);	
	Исключение
		Возврат Ложь;		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСтатусВводЗначенийПоказателейДляРасчетаКПЭ(Ссылка) Экспорт 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовВводЗначенийПоказателейДляРасчетаКПЭ.СтатусДокумента,
	                            |	абс_ИзменениеСтатусовВводЗначенийПоказателейДляРасчетаКПЭ.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовВводЗначенийПоказателейДляРасчетаКПЭ.СрезПоследних(&Период, ВводЗначений = &Ссылка) КАК абс_ИзменениеСтатусовВводЗначенийПоказателейДляРасчетаКПЭ
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"				, Новый Граница(абс_СерверныеФункции.ПолучитьДатуСервера(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("Ссылка"	, Ссылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусДокумента;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции
	
// АБС ВСТАВКА КОНЕЦ

// <Описание функции>
// Для проверки возможности изменения сотрудником статуса договора с контрагентом, 
//	при условии, что сотрудник является ответственным лицом по подразделению
// Параметры
//  Договор  - Справочники.ДоговорыКонтрагентов.ссылка
//  Сотрудник  - Справочники.Пользователи.ссылка
//                 сотрудник, для которого производится проверка
//
// Возвращаемое значение:
//   булево
//
// {{KM WARE Лазаревский К.В. Заявка №31760 05.11.2015 начало
Функция ДоговорДоступенДляИзмененияРуководителем(Договор, Сотрудник) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.абс_Ответственный.абс_Сотрудник.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	               |ПОМЕСТИТЬ вт_подразделение
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Ссылка = &Договор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	вт_подразделение.ПодразделениеОрганизации,
	               |	абс_ОтветственныеЛицаПодразделенийСрезПоследних.Сотрудник
	               |ПОМЕСТИТЬ вт_физлицо
	               |ИЗ
	               |	РегистрСведений.абс_ОтветственныеЛицаПодразделений.СрезПоследних(, ) КАК абс_ОтветственныеЛицаПодразделенийСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_подразделение КАК вт_подразделение
	               |		ПО абс_ОтветственныеЛицаПодразделенийСрезПоследних.СтруктурнаяЕдиница = вт_подразделение.ПодразделениеОрганизации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	1 КАК Поле1
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.абс_Сотрудник В
	               |			(ВЫБРАТЬ
	               |				вт.Сотрудник
	               |			ИЗ
	               |				вт_ФизЛицо КАК вт)
	               |	И Пользователи.Ссылка = &Сотрудник";
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции // ДоговорДоступенДляИзмененияРуководителем() }}KM WARE Лазаревский К.В. Заявка №31760 05.11.2015 окончание 

// <Описание функции>
// Параметры
//  Договор  - Справочники.ДоговорыКонтрагентов.ссылка
//
// Возвращаемое значение:
//   Перечисление.абсСтатусыДоговоров   - Предыдущее значение статуса
//
// {{KM WARE Лазаревский К.В. Заявка №31760 05.11.2015 начало
Функция ПолучитьПредыдущийСтатусДоговора(Договор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	абс_ИзменениеСтатусовДоговоров.Период КАК Период,
	               |	абс_ИзменениеСтатусовДоговоров.СтатусДоговора
	               |ИЗ
	               |	РегистрСведений.абс_ИзменениеСтатусовДоговоров КАК абс_ИзменениеСтатусовДоговоров
	               |ГДЕ
	               |	абс_ИзменениеСтатусовДоговоров.Договор = &Договор
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ";
	Запрос.УстановитьПараметр("Договор", Договор);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() < 2 Тогда
		ПараметрВозврат = Перечисления.абсСтатусыДоговоров.Подготовка;
	Иначе
		Результат.Следующий();
		Результат.Следующий();
		ПараметрВозврат = Результат.СтатусДоговора;
	КонецЕсли;	
	Возврат ПараметрВозврат;
КонецФункции // ПолучитьПредыдущийСтатусДоговора() }}KM WARE Лазаревский К.В. Заявка №31760 05.11.2015 окончание

//// Start КТТК Ермолов Е.Л.  14.06.2016 7733632 

//Функция ЕстьОригиналДокумента(Источник, ДатаПодачи = '00010101')
//	
//	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	                      |	абс_МеткаППД.Документ,
//	                      |	абс_МеткаППД.Метка,
//	                      |	абс_МеткаППД.Дата,
//	                      |	абс_МеткаППД.Ответственный,
//	                      |	абс_МеткаППД.Комментарий
//	                      |ИЗ
//	                      |	РегистрСведений.абс_МеткаППД КАК абс_МеткаППД
//	                      |ГДЕ
//	                      |	абс_МеткаППД.Метка В(&Оригиналы)
//	                      |	И абс_МеткаППД.Документ = &Документ");
//						   
//	Масс = Новый Массив();
//	Масс.Добавить(Перечисления.абс_МеткаППД.НаЗАОНаОснованииОригиналовДокументов);
//	Масс.Добавить(Перечисления.абс_МеткаППД.НаОснованииОригиналовДокументов);
//    Запрос.УстановитьПараметр("Оригиналы",Масс);
//	Запрос.УстановитьПараметр("Документ", Источник.Ссылка);
//	Если Запрос.Выполнить().Выбрать().Следующий()  Тогда 
//		Возврат Истина;
//	Иначе 
//		Масс.Очистить();
//		Масс.Добавить(Перечисления.абс_МеткаППД.НаЗАОНаОснованииКопииДокументов);
//		Масс.Добавить(Перечисления.абс_МеткаППД.НаОснованииКопииДокументов);
//		Запрос.УстановитьПараметр("Оригиналы", Масс);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда 
//			ДатаПодачи = Выборка.Дата;
//		Иначе 
//			ДатаПодачи = Источник.Дата;	
//		КонецЕсли;
//		Возврат Ложь;
//	КонецЕсли;
//	
//КонецФункции // ЕстьОригиналДокумента()
//// Stop КТТК Ермолов Е.Л.  14.06.2016 

//Сторчевой А.Н. D2017-0517-3373 {
Функция ПолучитьНастройкуУведомленияТочкиБП(ВидБП, ТочкаМаршрута) Экспорт 
	
	ЗапросНастройка = Новый Запрос(
	"ВЫБРАТЬ
	|	абс_НастройкаОтправкиУведомленийБП.ВидБП,
	|	абс_НастройкаОтправкиУведомленийБП.ТочкаМаршрутаБП,
	|	абс_НастройкаОтправкиУведомленийБП.СтатусНовый,
	|	абс_НастройкаОтправкиУведомленийБП.ОтправкаОтветственным,
	|	абс_НастройкаОтправкиУведомленийБП.ОтправкаИнициатору
	|ИЗ
	|	РегистрСведений.абс_НастройкаОтправкиУведомленийБП КАК абс_НастройкаОтправкиУведомленийБП
	|ГДЕ
	|	абс_НастройкаОтправкиУведомленийБП.ВидБП = &ВидБП
	|	И абс_НастройкаОтправкиУведомленийБП.ТочкаМаршрутаБП = &ТочкаМаршрутаБП
	|	И (абс_НастройкаОтправкиУведомленийБП.ОтправкаОтветственным
	|			ИЛИ абс_НастройкаОтправкиУведомленийБП.ОтправкаИнициатору)");
	
	ЗапросНастройка.УстановитьПараметр("ВидБП", ВидБП);
	ЗапросНастройка.УстановитьПараметр("ТочкаМаршрутаБП", ТочкаМаршрута);
	
	ВыборкаНастройка = ЗапросНастройка.Выполнить().Выбрать();
	
	Возврат ВыборкаНастройка;
	
КонецФункции
// } Сторчевой А.Н. D2017-0517-3373