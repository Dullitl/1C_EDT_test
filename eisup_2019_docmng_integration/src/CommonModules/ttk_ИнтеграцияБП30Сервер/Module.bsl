//--- Григорьев Д.В. - 15.10.2018 [АСУП]

// Процедура подключения внешнего источника данных
Функция ПодключитьВнешнийИсточникДанныхTPI()
	
	ПараметрыСоединения = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	ПараметрыСоединения.СУБД = "MSSQLServer";
	ПараметрыСоединения.ИмяПользователя = "1c";
	ПараметрыСоединения.Пароль = "freedom";
	ПараметрыСоединения.АутентификацияСтандартная = Истина;	
	ПараметрыСоединения.СтрокаСоединения = "DRIVER={SQL Server};SERVER=kttk-1c-db.transtk.ru;DATABASE=TransPlatformIntegration";		
		
	Попытка
		ВнешниеИсточникиДанных.TransPlatformIntegration.УстановитьОбщиеПараметрыСоединения(ПараметрыСоединения);
		ВнешниеИсточникиДанных.TransPlatformIntegration.УстановитьСоединение();
		Возврат Истина;
	Исключение
		ВнешниеИсточникиДанных.TransPlatformIntegration.РазорватьСоединение();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Процедура выполняющая обмен с БП 3.0 (Используется в регламентном задании)
Процедура ttk_ОбменБП30() Экспорт
	
	// Выгрузка во внешний источник данных
	СсылкаНаУзелОбмена = ПланыОбмена.ttk_ОбменБП30.НайтиПоКоду("000000002");
	Если СсылкаНаУзелОбмена = ПланыОбмена.ttk_ОбменБП30.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИсточникаДанныхTPI = ВнешниеИсточникиДанных.TransPlatformIntegration.ПолучитьСостояние();
	Если СостояниеВнешнегоИсточникаДанных <> СостояниеВнешнегоИсточникаДанных.Подключен Тогда
		Если Не ПодключитьВнешнийИсточникДанныхTPI() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(СсылкаНаУзелОбмена, СсылкаНаУзелОбмена.НомерОтправленного);
	Пока ВыборкаИзменений.Следующий() Цикл
		ТекущаяСсылка = ВыборкаИзменений.Получить();
		
		//Найдем ссылку на правила обмена для дальнейшего использования в узле обмена.
		СсылкаНаПравилаОбмена = ВернутьСсылкуНаПравилаОбмена(ТекущаяСсылка);
		Если СсылкаНаПравилаОбмена = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЗаписатьИзмененияTPI(ТекущаяСсылка, СсылкаНаПравилаОбмена);
			ПланыОбмена.УдалитьРегистрациюИзменений(СсылкаНаУзелОбмена, ТекущаяСсылка);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	// Загрузка из внешнего источника данных
	ПрочитатьДанныеTPI();
	
КонецПроцедуры

// Процедура записывает информацию во нешний источник данных TPI
Процедура ЗаписатьИзмененияTPI(СсылкаНаОбъект, СсылкаНаПравилаОбмена) Экспорт 
	
	НомерВыгрузки = Константы.ttk_НомерВыгрузкиИзЕИСУПвБП30.Получить();
	УИД = Строка(СсылкаНаОбъект.Ссылка.УникальныйИдентификатор());
		
	TPI = ВнешниеИсточникиДанных.TransPlatformIntegration.Таблицы.dbo_ttk_SyncDataEISUP_BP.СоздатьОбъект();
	TPI.Uid = УИД;
	TPI.Dt = ТекущаяДатаСеанса();
	TPI.ObjectId = СсылкаНаПравилаОбмена.Код;
	TPI.ObjectName = СсылкаНаПравилаОбмена.Наименование;
	TPI.Data = ПолучитьXMLИзОбменДаннымиБП30(СсылкаНаОбъект.Ссылка, СсылкаНаПравилаОбмена);
	TPI.SyncStatus = 1;
	TPI.TestRec = ?(ЗначениеЗаполнено(НомерВыгрузки), НомерВыгрузки, 0);
	
	TPI.Записать();
	
КонецПроцедуры

// Функция возвращает ссылку на правила обмена по источнику
Функция ВернутьСсылкуНаПравилаОбмена(СсылкаИсточник) Экспорт
	
	СсылкаНаПравилаОбмена = Справочники.ttk_ПравилаОбмена.НайтиПоНаименованию(СсылкаИсточник.Метаданные().ПолноеИмя(), Истина);
	Если СсылкаНаПравилаОбмена = Справочники.ttk_ПравилаОбмена.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СсылкаНаПравилаОбмена;
	
КонецФункции

// Процедура для проверки контрольной суммы записываемого объекта и
// регистрации изменений в плане обмена
Процедура ttk_ИнтеграцияБП30ПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	//проверка статуса ПТиУ
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		Если Источник.абс_Статус <> Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	
	Если Не ПроверкаИспользованияКонстантыИнтеграцияБП30(ТекущаяДатаСеанса()) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	//Найдем ссылку на правила обмена для дальнейшего использования в узле обмена.
	СсылкаНаПравилаОбмена = ВернутьСсылкуНаПравилаОбмена(Источник.Ссылка);
	Если СсылкаНаПравилаОбмена = Неопределено Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	//Получим контрольную сумму объекта
	КонтрольнаяСумма = ПолучитьКонтрольнуюСуммуОбъекта(Источник);
	
	//Проверим изменение контрольной суммы объекта
	КонтрольнаяСуммаИзменена = ПроверитьИзмененияКонтрольнойСуммы(Источник, КонтрольнаяСумма);
	Если Не КонтрольнаяСуммаИзменена Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	//Произведем регистрацию изменений в плане обмена
	ПланыОбмена.ЗарегистрироватьИзменения(СсылкаНаПравилаОбмена.УзелОбмена, Источник.Ссылка);	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Функция возвращает контрольную сумму объекта
Функция ПолучитьКонтрольнуюСуммуОбъекта(Объект) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Объект);
	ДанныеСтрока = ЗаписьXML.Закрыть();
	
	Хеш = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеш.Добавить(ДанныеСтрока);
	
	Возврат Хеш.ХешСумма;
	
КонецФункции

// Функция проверяет изменения контрольной суммы по объекту
Функция ПроверитьИзмененияКонтрольнойСуммы(Объект, КонтрольнаяСумма) Экспорт
	
	ОбъектИзменен = Ложь;
	
	ХешСумма = РегистрыСведений.ttk_КонтрольныеСуммыОбъектов.СоздатьМенеджерЗаписи();
	ХешСумма.Объект = Объект.Ссылка;
	ХешСумма.Прочитать();
	Если Не ХешСумма.Выбран() Тогда
		ОбъектИзменен = Истина;
	Иначе
		Если ХешСумма.КонтрольнаяСумма.Получить() <> КонтрольнаяСумма Тогда
			ОбъектИзменен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		ХешСумма.Объект = Объект.Ссылка;
		ХешСумма.КонтрольнаяСумма = Новый ХранилищеЗначения(КонтрольнаяСумма);
		ХешСумма.Записать();
	КонецЕсли;
	
	Возврат ОбъектИзменен;
	
КонецФункции
//--- Григорьев Д.В. - 15.10.2018 [АСУП]

// Функция для проверки заполенения константы ИнтеграцияБП30 
// Для объектов, не имеющих даты, в качестве ДатыДокумента используется ТеущаяДата()
Функция ПроверкаИспользованияКонстантыИнтеграцияБП30(Дт = Неопределено) Экспорт
	
	//Если РольДоступна("ttk_ИнтеграцияБП30") Тогда
	//	Возврат Ложь;	
	//КонецЕсли;
	
	Если Дт = Неопределено Или Дт = '00010101' Тогда 
		Дт = ТекущаяДата();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонстантаУстановлена = Константы.ttk_ИнтеграцияБП30.Получить();
	
	Если ЗначениеЗаполнено(КонстантаУстановлена) И НачалоДня(Дт) >= КонстантаУстановлена Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Истина;
	Иначе
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Бобылев А.А. 12.10.2018г.
//Функция проверяет на закрытие периода. В качестве параметров передается ссылка и тип документа 
//строкой вида ДокументСсылка.ПоступлениеТоваровУслуг
Функция ЗакрытыйПериод(ДатаДокумента,СсылкаНаДокумент, ВидДокумента) Экспорт
	Попытка
		ЗакрытыйПериод = Ложь;
		//ИнтеграцияБП30 = Константы.ttk_ИнтеграцияБП30.Получить();
		Если ПроверкаИспользованияКонстантыИнтеграцияБП30(ДатаДокумента) Тогда
			Если ТипЗнч(СсылкаНаДокумент) = Тип(ВидДокумента)  Тогда
				ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
				Результат = Ложь;	
				СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
				// Для пользователя с полными правами проверок выполнять не нужно
				Если СоответствиеГраницЗапрета = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;	
				ПараметрыПроверкиДокумента = НастройкаПравДоступа.ПолучитьПараметрыПроверкиДокумента(СсылкаНаДокумент.ПолучитьОбъект());
				ПараметрыПроверкиДокумента.Удалить("ПроверятьУправленческуюДатуЗапрета");
				ПараметрыПроверкиДокумента.Вставить("ПроверятьУправленческуюДатуЗапрета", Истина);
				
				ДатаДляПроверки = НастройкаПравДоступа.ПолучитьДатуДляПроверкиДокумента(ДокументОбъект, ПараметрыПроверкиДокумента);
				
				// Проверка регламентированной даты запрета
				Если ПараметрыПроверкиДокумента.ПроверятьРегламентированнуюДатуЗапрета Тогда	
					ГраницаПоОрганизации = СоответствиеГраницЗапрета[ДокументОбъект.Организация];
					
					// Если регламентированная дата запрета для регламентного документа не определена
					// то используется общая дата запрета изменения данных
					Если ГраницаПоОрганизации = Неопределено Тогда
						ГраницаПоОрганизации = СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];
					КонецЕсли;
					
					Если НЕ ГраницаПоОрганизации = Неопределено 
						И ДатаДляПроверки <= КонецДня(ГраницаПоОрганизации)	Тогда
						
						ЗакрытыйПериод = Истина;			
					КонецЕсли;		
				КонецЕсли;		    
				
				// Проверка управленческой даты запрета
				Если ПараметрыПроверкиДокумента.ПроверятьУправленческуюДатуЗапрета Тогда        
					ГраницаПоОрганизации = СоответствиеГраницЗапрета[ДокументОбъект.Организация];       
					// Если управленческая дата запрета для управленческого документа не определена
					// то используется общая дата запрета изменения данных
					Если ГраницаПоОрганизации = Неопределено Тогда
						ГраницаПоОрганизации = СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];
					КонецЕсли;
					
					Если ГраницаПоОрганизации <> Неопределено Тогда
						
						Если ДатаДляПроверки <= КонецДня(ГраницаПоОрганизации) Тогда
							ЗакрытыйПериод = Истина;				
						КонецЕсли;         			
					КонецЕсли;
				КонецЕсли;
				
				
				Возврат ЗакрытыйПериод;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		ЗакрытыйПериод = Истина;
	КонецПопытки;
	возврат ЗакрытыйПериод;
КонецФункции

//Функция возвращает Истину, если была установлена пометка удаления. Функцию использовать перед записью в модуле объекта. 
Функция ПроверкаПометкиУдаления(ДатаДокумента,ПометкаУдаления)  Экспорт
	
	//ИнтеграцияБП30 = Константы.ttk_ИнтеграцияБП30.Получить();
	Если ПроверкаИспользованияКонстантыИнтеграцияБП30(ДатаДокумента) Тогда
		Если ПометкаУдаления = Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//Бобылев А.А. -----------

//+++ Колесников А.С. - 19.10.2018 [АСУП]
Функция ПолучитьXMLИзОбменДаннымиБП30(СсылкаНаОбъект, СсылкаНаПравилаОбмена) Экспорт 
	
	ОбработкаОбменаДанных = Обработки.ttk_ОбменДаннымиБП30.Создать();
	ОбработкаОбменаДанных.ЗагружатьДанныеВРежимеОбмена 				= Истина;
	ОбработкаОбменаДанных.ЗаписыватьРегистрыНаборамиЗаписей			= Истина;
	ОбработкаОбменаДанных.ЗапоминатьЗагруженныеОбъекты				= Истина;
	ОбработкаОбменаДанных.ИспользоватьОтборПоДатеДляВсехОбъектов	= Истина;
	
	ОбработкаОбменаДанных.ЗагрузитьПравилаОбмена(СсылкаНаПравилаОбмена.Правила,"Строка");
	Индекс = СтрНайти(СсылкаНаПравилаОбмена.Наименование, ".");
	ИмяПравил = Сред(СсылкаНаПравилаОбмена.Наименование, Индекс + 1); 
	ОбработкаОбменаДанных.ИмяФайлаПравилОбмена = ИмяПравил;
		
	//Отбок по ссылке 
	Для Каждого СтрВерхнегоУровня из ОбработкаОбменаДанных.ТаблицаПравилВыгрузки.Строки Цикл 
		СтрокиТаблицыПравилВыгрузки = СтрВерхнегоУровня.Строки;	
		Для Каждого ТекущееПВД из СтрокиТаблицыПравилВыгрузки Цикл
			 	Построитель = Новый ПостроительОтчета;
			 	Если ТекущееПВД.ИмяОбъектаДляЗапроса <> Неопределено Тогда

			     Построитель.Текст =
			         "ВЫБРАТЬ Разрешенные _.* ИЗ " + ТекущееПВД.ИмяОбъектаДляЗапроса + " КАК _
			          |
			          |
			          |{ГДЕ _.Ссылка.* КАК " + СтрЗаменить(ТекущееПВД.ИмяОбъектаДляЗапроса, ".", "_") + "}";
			     КонецЕсли;

			     Отбор = Построитель.Отбор;
				 ИмяПоля = СтрЗаменить(СсылкаНаПравилаОбмена.Наименование,".","_");

				 Если Отбор.Найти(ИмяПоля) = Неопределено Тогда
			        Отбор.Добавить(ИмяПоля);
			     КонецЕсли;

			     Отбор[ИмяПоля].Использование = Истина;
			     Отбор[ИмяПоля].Значение = СсылкаНаОбъект;
			     Отбор[ИмяПоля].ВидСравнения = ВидСравнения.Равно;

			     ДоступностьПостроителя = Истина;
			     Если Построитель.Отбор.Количество() > 0 Тогда
			         ТекущееПВД.НастройкиПостроителя = Построитель.ПолучитьНастройки();
			         ТекущееПВД.ИспользоватьОтбор    = ИСТИНА;
			     КонецЕсли;
			ТекущееПВД.ИспользоватьОтбор	 = Истина;
			ТекущееПВД.НастройкиПостроителя = Построитель.ПолучитьНастройки();
		КонецЦикла;
		
	КонецЦикла;
	
	ИмяФайлаВыгрузки = ПолучитьИмяВременногоФайла("xml");

	ОбработкаОбменаДанных.ИмяФайлаОбмена = ИмяФайлаВыгрузки;
	
	ОбработкаОбменаДанных.ВыполнитьВыгрузку();
	
	ТекстФайла = Новый ТекстовыйДокумент;
	ТекстФайла.Прочитать(ИмяФайлаВыгрузки);
	
	Возврат ТекстФайла.ПолучитьТекст();
			
КонецФункции

// Процедура прочитывает информацию из внешнего источника данных TPI
Процедура ПрочитатьДанныеTPI() Экспорт 
	
	Если Не ПодключитьВнешнийИсточникДанныхTPI() Тогда 
		Возврат;
	КонецЕсли;
	
	НомерВыгрузки = Константы.ttk_НомерВыгрузкиИзЕИСУПвБП30.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	dbo_ttk_SyncDataEISUP_BP.Uid КАК Uid,
	               |	МАКСИМУМ(dbo_ttk_SyncDataEISUP_BP.Dt) КАК Dt,
	               |	dbo_ttk_SyncDataEISUP_BP.RecId КАК RecId
	               |ИЗ
	               |	ВнешнийИсточникДанных.TransPlatformIntegration.Таблица.dbo_ttk_SyncDataEISUP_BP КАК dbo_ttk_SyncDataEISUP_BP
	               |ГДЕ
	               |	dbo_ttk_SyncDataEISUP_BP.SyncStatus = &SyncStatus И dbo_ttk_SyncDataEISUP_BP.TestRec = &НомерВыгрузки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	dbo_ttk_SyncDataEISUP_BP.Uid,
	               |	dbo_ttk_SyncDataEISUP_BP.RecId";
		
	Запрос.УстановитьПараметр("SyncStatus", 2);
	Запрос.УстановитьПараметр("НомерВыгрузки", ?(ЗначениеЗаполнено(НомерВыгрузки), НомерВыгрузки, 0));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзTPI = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаИзTPI.Следующий() Цикл
		ЗаписьTPI = ВнешниеИсточникиДанных.TransPlatformIntegration.Таблицы.dbo_ttk_SyncDataEISUP_BP.НайтиПоПолю("RecId", ВыборкаИзTPI.RecId);
		Если ЗаписьTPI <> ВнешниеИсточникиДанных.TransPlatformIntegration.Таблицы.dbo_ttk_SyncDataEISUP_BP.ПустаяСсылка() Тогда 
			ПроверкаЗагрузки = ЗагрузитьДанныеВ1С(ЗаписьTPI);
			Если ПроверкаЗагрузки Тогда  
				ОбъектTPI = ЗаписьTPI.ПолучитьОбъект();
				ОбъектTPI.SyncStatus = 0;
				ОбъектTPI.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция ЗагрузитьДанныеВ1С(Объект)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ФайлXML = Новый ТекстовыйДокумент;
	ФайлXML.УстановитьТекст("<?xml version=""1.0"" encoding=""UTF-8""?>" + Символы.ПС + Объект.Data);
	ФайлXML.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	ОбработкаОбменаДанных = Обработки.ttk_ОбменДаннымиБП30.Создать();
	ОбработкаОбменаДанных.ИмяФайлаОбмена = ИмяВременногоФайла;
	//ОбработкаОбменаДанных.БезопасныйРежим = Истина;
	ОбработкаОбменаДанных.ЗагружатьДанныеВРежимеОбмена = Истина;
	ОбработкаОбменаДанных.РежимОбмена = "Загрузка";
	ОбработкаОбменаДанных.ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты = Ложь;
	Попытка
		ОбработкаОбменаДанных.ВыполнитьЗагрузку();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции
//--- Колесников А.С. - 19.10.2018 [АСУП]

//+++ Михайлова А.Д. - 24.10.2018 [CHG448/822,824,827]
//Процедура проверки запрета на создание/редактирование объекта
//Связана с подпиской на событие ttk_ЗапретСозданияРедактированияОбъекта 
//Если заполнена константа ИнтеграцияБП30 допускается создание/редактиование
//только для полных прав - необходимо для обмена
Процедура ttk_ЗапретСозданияРедактированияОбъектаПередЗаписью(Источник, Отказ) Экспорт
		
	ИнтеграцияБП30=ПроверкаИспользованияКонстантыИнтеграцияБП30(ТекущаяДата());
	Имя=Источник.МетаДанные().ПолноеИмя();
	Если ИнтеграцияБП30 и не РольДоступна("ПолныеПрава") Тогда
		
		Если Имя="Справочник.ДенежныеДокументы" или
			Имя="Справочник.НаправленияИспользованияПрибыли" Тогда
			Отказ=Истина; //разные варианты Отказ=Истина и ВызватьИсключение введены из-за различий 
			//в выводимых пользователю сообшениях. Для "Денежных документов" в случае ВызватьИсключение
			//выводится не окно с текстом, а сообщение об ошибке.
		Иначе
			ВызватьИсключение "Создание/редактирование запрещено!";
		КонецЕсли;
		
	Иначе
		
	КонецЕсли;

КонецПроцедуры
//--- Михайлова А.Д. - 24.10.2018 [CHG448/822,824,827]