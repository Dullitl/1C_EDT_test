

///////////////////////////////////////////////////////////////////////////////////
// Процедуры для подготовки и записи движений документа.

// Процедура инициализирует общие структуры, используемые при проведении документов.
// Вызывается из модуля документов при проведении.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);

КонецПроцедуры

// Процедура компонует текст запроса, выполняет запрос и выгружает результаты запроса в таблицы
//
// Параметры:
//	Запрос - Запрос - запрос, параметры которого предварительно установлены.
//	ТекстыЗапроса - Список значений - список значений, значениями которого являются блоки запроса,
//	                                  синонимами - имена таблиц в которые необходимо поместить
//	                                  результат выполнения каждого отдельного блока запроса.
//	Таблицы - Структура - структура в которую будут помещены полученные таблицы для движений.
//
Процедура ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Таблицы) Экспорт

	// Формирование текст запроса.
	Запрос.Текст = "";
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл
		Запрос.Текст = Запрос.Текст + ТекстЗапроса.Значение;
	КонецЦикла;

	// Выполнение запроса.
	Результат = Запрос.ВыполнитьПакет();

	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл

		ИмяТаблицы = ТекстЗапроса.Представление;

		Если Не ПустаяСтрока(ИмяТаблицы) Тогда

			Индекс = ТекстыЗапроса.Индекс(ТекстЗапроса);
			Таблицы.Вставить(ИмяТаблицы, Результат[Индекс].Выгрузить());

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Процедура выполняет пордготовку наборов записей документа к записи движений.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имеет движения
// Вызывается из модуля документов при проведении.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь) Экспорт
	Перем ЭтоНовыйДокумент, МетаданныеДвижения;
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовыйДокумент) Тогда
		ЭтоНовыйДокумент = ЭтоНовый;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйДокумент Тогда

		// Регистры, движения по которым формируются не из модуля менеджера документа.
		ИсключаемыеРегистры = Новый Массив;
		//ИсключаемыеРегистры.Добавить("ГрафикДвиженияТоваров");
		
		Если Объект.ДополнительныеСвойства.Свойство("ДляПроведения")
		 И Объект.ДополнительныеСвойства.ДляПроведения.Свойство("МетаданныеДокумента") Тогда
			МетаданныеДвижения = Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения;
		Иначе
			МетаданныеДвижения = Объект.Метаданные().Движения;
		КонецЕсли;
		
		МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
			Объект.Ссылка,
			МетаданныеДвижения,
			ИсключаемыеРегистры);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	Перем РегистрыДляКонтроля;

	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда

				// Установка флага регистрации изменений в наборе записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
				НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);

				// Структура для передачи данных в модули наборов записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
						Новый Структура("СтруктураВременныеТаблицы", Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	////Для отработки случаев, когда документ перестает делать движения по регистру (при изменении вида операции). Очистим оффлайновые регистры.
	//Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Объект.ДополнительныеСвойства.ЭтоНовый Тогда
	//	
	//КонецЕсли;

	
	Объект.Движения.Записать();
	
КонецПроцедуры

Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства) Экспорт

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

Процедура УдалитьДвиженияРегистратора(Объект, БлокироватьДляИзменения = Истина) Экспорт
	
	абс_Привилегированный.УдалитьДвиженияРегистратора(Объект.Ссылка, БлокироватьДляИзменения); 
	
КонецПроцедуры

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура КонтрольРегистровНакопления(ДополнительныеСвойства, Отказ) Экспорт
	
	Если Отказ Или Не ДополнительныеСвойства.Свойство("ДляПроведения") Или Не ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля") Или ДополнительныеСвойства.ДляПроведения.РегистрыДляКонтроля.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого НаборЗаписей Из ДополнительныеСвойства.ДляПроведения.РегистрыДляКонтроля Цикл
		
		МенеджерРегистра = РегистрыНакопления[НаборЗаписей.Метаданные().Имя];
		МенеджерРегистра.КонтрольОстатков(ДополнительныеСвойства, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

//АБС ВСТАВКА 36163  27.11.2014 15:12:17  Шамов
Процедура абс_ОбработкаПроведенияРТУ_ФормированиеСФДляУПД(Источник, Отказ, РежимПроведения) Экспорт
	
	Если НЕ Отказ 
		И Источник.абс_ОформляетсяУПД 
		И Источник.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен
			Тогда
			
		СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Источник.Ссылка, "СчетФактураВыданный", Неопределено);
		ОбъектСчетаФактуры = Неопределено;

		//Если потерпели неудачу, то необходимо ввести новый документ 
		Если (Не ЗначениеЗаполнено(СчетФактура)) Тогда
			ОбъектСчетаФактуры = Документы["СчетФактураВыданный"].СоздатьДокумент();
			ОбъектСчетаФактуры.Заполнить(Источник.Ссылка); 
			//обрабатываем номер
			ВремНомер = СокрЛП(Источник.Номер);
			Организация = Источник.Организация;
			КодРегиона = СокрЛП(Организация.абс_КодРегиона);
			
			Если ЗначениеЗаполнено(КодРегиона) Тогда
				ВремНомер = СтрЗаменить(ВремНомер, "/" + КодРегиона + "/", "/____/");
			КонецЕсли;
			//первый ноль меняется на "У"
			//чтобы не было полного дубля номера
			ПозицияНуля = Найти(ВремНомер, "0");
			ВремНомер = Лев(ВремНомер, ПозицияНуля - 1) + "У" + Прав(ВремНомер, СтрДлина(ВремНомер) - ПозицияНуля);
			
			Если ЗначениеЗаполнено(КодРегиона) Тогда
				ВремНомер = СтрЗаменить(ВремНомер, "/____/", "/" + КодРегиона + "/");
			КонецЕсли;
			
			ОбъектСчетаФактуры.Номер = ВремНомер;
			
			Попытка
				ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Проведение);
			Исключение				
				ВызватьИсключение "Не удалось сформировать счет-фактуру для УПД!";
			Конецпопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Бобылев А.А. 30.05.2018
Процедура ЗагрузкаИзАСРОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если НЕ Отказ И Константы.ИзменитьПроведениеРеализаций.Получить() И ТипЗнч(Источник.ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ЗначениеЗаполнено(Источник.ЛогЗагрузкиИзАСР) И ЗначениеЗаполнено(Источник.абс_ДатаПолученияСчета) Тогда
			КварталРеал = ПолучитьКвартал(Источник.Дата);
			КварталАСР = ПолучитьКвартал(Источник.абс_ДатаПолученияСчета);
			Если Год(Источник.Дата) <> Год(Источник.абс_ДатаПолученияСчета) Тогда
				//Бобылев А.А. 03.10.2018 627
				////ПрочиеДоходыИРасходы = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000166");
				////Для каждого Элемент ИЗ Источник.Услуги Цикл
				////	Попытка
				////		Элемент.СубконтоБУ = ПрочиеДоходыИРасходы;		
				////	Исключение
				////	КонецПопытки;
				////КонецЦикла;
				////Источник.ОбменДанными.Загрузка = Истина;
				////Источник.Записать();
				////Источник.ОбменДанными.Загрузка =  Ложь;
				//Бобылев А.А. --------------
				
				Источник.Движения.Хозрасчетный.Очистить();
				Источник.Движения.Налоговый.Очистить();
				Источник.Движения.Хозрасчетный.Записать();
				Источник.Движения.Налоговый.Записать();
				ПроводкиБУ = Источник.Движения.Хозрасчетный;
				ПроводкиНУ = Источник.Движения.Налоговый;
				СформироватьПроводкиПоБуиНуРеал(Источник, Источник.Услуги, "Реализация услуг", ПроводкиБУ, ПроводкиНУ);
				ПроводкиБУ.Записать(Ложь);
				ПроводкиНУ.Записать(Ложь);
			ИначеЕсли КварталРеал <> КварталАСР Тогда
				ПериодОтражения = Справочники.ас_ПериодыОтражения.НайтиПоКоду(Формат(Год(Источник.абс_ДатаПолученияСчета),"ЧГ=") + КварталАСР);
				Если ЗначениеЗаполнено(ПериодОтражения) Тогда
					Если Источник.абс_ПериодОтражения <> ПериодОтражения Тогда
						Источник.абс_ПериодОтражения = ПериодОтражения;
						Источник.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ Отказ И Константы.ИзменитьПроведениеРеализаций.Получить() И ТипЗнч(Источник.ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если ЗначениеЗаполнено(Источник.ЛогЗагрузкиИзАСР) И ЗначениеЗаполнено(Источник.ДатаЗагрузкиИзАСР) Тогда
			КварталРеал = ПолучитьКвартал(Источник.Дата);
			КварталАСР = ПолучитьКвартал(Источник.ДатаЗагрузкиИзАСР);
			Если Год(источник.Дата) <> Год(Источник.ДатаЗагрузкиИзАСР) Тогда
				Источник.Движения.Хозрасчетный.Очистить();
				Источник.Движения.Налоговый.Очистить();
				Источник.Движения.Хозрасчетный.Записать();
				Источник.Движения.Налоговый.Записать();
				ПроводкиБУ = Источник.Движения.Хозрасчетный;
				ПроводкиНУ = Источник.Движения.Налоговый;
				СформироватьПроводкиПоБуиНуКорр(Источник, Источник.Услуги, "Корректировка реализации", ПроводкиБУ, ПроводкиНУ);
				ПроводкиБУ.Записать(Ложь);
				Проводкину.Записать(Ложь);
			КонецЕсли;
		//Бобылев А.А. 29.08.2018	
		//ИначеЕсли Источник.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		//	Источник.Движения.Налоговый.Очистить();
		//	Источник.Движения.Налоговый.Записать();
		//	ПроводкиНУ = Источник.Движения.Налоговый;
		//	СформироватьПроводкиНУКорр(Источник, Источник.Услуги, "Корректировка реализации",ПроводкиНУ);
		//	ПроводкиНУ.Записать(Ложь);
		//Бобылев А.А. ----------------
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКвартал(Дата)
	Месяц = Месяц(Дата);
	Квартал = 0;
	Если Месяц > 0 И Месяц < 4 Тогда
		Возврат 1;
	ИначеЕсли Месяц > 3 и Месяц < 7 Тогда
		Возврат 2;
	ИначеЕсли Месяц > 6 и Месяц < 10 Тогда
		Возврат 3;
	ИначеЕсли Месяц > 9 Тогда
		Возврат 4;
	КонецЕсли;
	Возврат Квартал;
КонецФункции

//Бобылев А.А. 29.08.2018
Процедура СформироватьПроводкиНУКорр(Источник, ТЧ, Содержание,  ПроводкиНУ)
	
	ПрочиеДоходыИРасходыПлюс = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000166");
	ПрочиеДоходыИРасходыМинус = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000551");
	Попытка
		КварталАСР = ПолучитьКвартал(Источник.ДатаЗагрузкиИзАСР);
		ПериодОтражения = Справочники.ас_ПериодыОтражения.НайтиПоКоду(Формат(Год(Источник.ДатаЗагрузкиИзАСР),"ЧГ=") + КварталАСР);
	Исключение
		КварталАСР = ПолучитьКвартал(ТекущаяДата());
		ПериодОтражения =  Справочники.ас_ПериодыОтражения.НайтиПоКоду(Формат(Год(ТекущаяДата()),"ЧГ=") + КварталАСР);
	КонецПопытки;
	Если НЕ ЗначениеЗаполнено(ПериодОтражения)Тогда
		КварталАСР = ПолучитьКвартал(ТекущаяДата());
		ПериодОтражения =  Справочники.ас_ПериодыОтражения.НайтиПоКоду(Формат(Год(ТекущаяДата()),"ЧГ=") + КварталАСР);
	КонецЕсли;
	Для каждого СтрокаТЧ из ТЧ Цикл
		Сумма = (СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС) - (СтрокаТЧ.СуммаДоИзменения + СтрокаТЧ.СуммаНДСДоИзменения);
		Если Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;			
		НужнаяГруппа = глЗначениеПеременной("абс_КонтрольПоГруппеПериодаОтраженияВСчетах");
		НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(Источник.ДатаЗагрузкиИзАСР)), " ",""), Символы.НПП, "");
		КодПоиска = СокрЛП(НомерГода);
		Элемент = Справочники.ас_ПериодыОтражения.НайтиПоНаименованию(КодПоиска,,НужнаяГруппа);			
		Если Сумма < 0 Тогда //Уменьшение
			//НУ
			Проводка = ПроводкиНУ.Добавить();
			Проводка.Период                   = Источник.дата;
			Проводка.Организация              = Источник.Организация;
			Проводка.Регистратор 			  = Источник.ссылка;
			Проводка.Содержание 			  = Содержание;
			Проводка.СчетДт                   = ПланыСчетов.Налоговый.ВнереализационныеРасходы;				
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходыМинус);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения", Элемент);				
			Проводка.СчетКт					  = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Источник.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Источник.ДоговорКонтрагента);				
			Проводка.Сумма					  = -(СтрокаТЧ.Сумма - СтрокаТЧ.СуммаДоИзменения);
			Проводка.ВидУчетаКт				  = Перечисления.ВидыУчетаПоПБУ18.ВР;			
		ИначеЕсли Сумма > 0 Тогда //Увеличение
			//НУ				
			Проводка = ПроводкиНУ.Добавить();
			Проводка.Период                   = Источник.дата;
			Проводка.Организация              = Источник.Организация;
			Проводка.Регистратор 			  = Источник.ссылка;
			Проводка.Содержание 			  = Содержание;
			Проводка.СчетДт                   = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Источник.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Источник.ДоговорКонтрагента);
			Проводка.ВидУчетаДт				  = Перечисления.ВидыУчетаПоПБУ18.НУ;
			Проводка.СчетКт					  = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Источник.СтатьяПрочихДоходовИРасходов);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
			Проводка.Сумма					  = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаДоИзменения;
			Проводка.ВидУчетаКт				  = Перечисления.ВидыУчетаПоПБУ18.ВР;
		КонецЕсли;
		Если ЗначениеЗаполнено(Источник.СтатьяПрочихДоходовИРасходов) Тогда
			Попытка
				Если Источник.СтатьяПрочихДоходовИРасходов.ПринятиеКналоговомуУчету Тогда
					Проводка.ВидУчетаДт			= Перечисления.ВидыУчетаПоПБУ18.НУ;
					Проводка.ВидУчетаКт			= Перечисления.ВидыУчетаПоПБУ18.НУ;
				ИначеЕсли Источник.СтатьяПрочихДоходовИРасходов.абс_УточнениеЗатрат Тогда
					Проводка.ВидУчетаДт			= Перечисления.ВидыУчетаПоПБУ18.ВР;
					Проводка.ВидУчетаКт			= Перечисления.ВидыУчетаПоПБУ18.ВР;
				Иначе
					Проводка.ВидУчетаДт			= Перечисления.ВидыУчетаПоПБУ18.ПР;
					Проводка.ВидУчетаКт			= Перечисления.ВидыУчетаПоПБУ18.ПР;				
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
//Бобылев А.А. ----------------

Процедура СформироватьПроводкиПоБуиНуКорр(Источник, ТЧ, Содержание, ПроводкиБУ, ПроводкиНУ)
	
	ПрочиеДоходыИРасходыПлюс = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000166");
	ПрочиеДоходыИРасходыМинус = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000551");
	Попытка
		КварталАСР = ПолучитьКвартал(Источник.ДатаЗагрузкиИзАСР);
		ПериодОтражения = Справочники.ас_ПериодыОтражения.НайтиПоКоду(Формат(Год(Источник.ДатаЗагрузкиИзАСР),"ЧГ=") + КварталАСР);
	Исключение
		КварталАСР = ПолучитьКвартал(ТекущаяДата());
		ПериодОтражения =  Справочники.ас_ПериодыОтражения.НайтиПоКоду(Формат(Год(ТекущаяДата()),"ЧГ=") + КварталАСР);
	КонецПопытки;
	Если НЕ ЗначениеЗаполнено(ПериодОтражения)Тогда
		КварталАСР = ПолучитьКвартал(ТекущаяДата());
		ПериодОтражения =  Справочники.ас_ПериодыОтражения.НайтиПоКоду(Формат(Год(ТекущаяДата()),"ЧГ=") + КварталАСР);
	КонецЕсли;

	Если Источник.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда //Исправление в первичных документах
		Для каждого СтрокаТЧ из ТЧ Цикл
			Сумма = (СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС) - (СтрокаТЧ.СуммаДоИзменения + СтрокаТЧ.СуммаНДСДоИзменения);
			Если Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;			
			НужнаяГруппа = глЗначениеПеременной("абс_КонтрольПоГруппеПериодаОтраженияВСчетах");
			НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(Источник.ДатаЗагрузкиИзАСР)), " ",""), Символы.НПП, "");
			КодПоиска = СокрЛП(НомерГода);
			Элемент = Справочники.ас_ПериодыОтражения.НайтиПоНаименованию(КодПоиска,,НужнаяГруппа);			
			Если Сумма < 0 Тогда //Уменьшение
				//91.02.1
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                 = Источник.дата;
				Проводка.Организация            = Источник.Организация;
				Проводка.Регистратор 			= Источник.ссылка;
				Проводка.Содержание 			= Содержание;			
				Проводка.Сумма 					= -(Сумма);				
				Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Источник.СтатьяПрочихДоходовИРасходов);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения", Элемент);				
				Проводка.СчетКт                 =  ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Источник.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Источник.ДоговорКонтрагента);
				//91.03
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                 = Источник.дата;
				Проводка.Организация            = Источник.Организация;
				Проводка.Регистратор 			= Источник.ссылка;
				Проводка.Содержание 			= Содержание;			
				Проводка.Сумма 					= СтрокаТЧ.СуммаНДС - СтрокаТЧ.СуммаНДСДоИзменения;
				Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.03");
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходыМинус);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения", Элемент);
				Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,  "ас_ПериодыОтражения", ПериодОтражения);
				//НУ
				Проводка = ПроводкиНУ.Добавить();
				Проводка.Период                   = Источник.дата;
				Проводка.Организация              = Источник.Организация;
				Проводка.Регистратор 			  = Источник.ссылка;
				Проводка.Содержание 			  = Содержание;
				Проводка.СчетДт                   = ПланыСчетов.Налоговый.ВнереализационныеРасходы;				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходыМинус);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения", Элемент);				
				Проводка.СчетКт					  = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Источник.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Источник.ДоговорКонтрагента);				
				Проводка.Сумма					  = -(СтрокаТЧ.Сумма - СтрокаТЧ.СуммаДоИзменения);
				Проводка.ВидУчетаКт				  = Перечисления.ВидыУчетаПоПБУ18.ВР;			
			ИначеЕсли Сумма > 0 Тогда //Увеличение
				//62.01
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                 = Источник.Дата;
				Проводка.Регистратор 			= Источник.Ссылка;
				Проводка.Организация            = Источник.Организация;
				Проводка.Содержание 			= Содержание;		
				Проводка.Сумма 					= Сумма;
				Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Источник.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Источник.ДоговорКонтрагента);
				Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходыПлюс);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,  "ас_ПериодыОтражения", Элемент);
				//91.03
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                 = Источник.дата;
				Проводка.Организация            = Источник.Организация;
				Проводка.Регистратор 			= Источник.ссылка;
				Проводка.Содержание 			= Содержание;
				Проводка.Сумма					= СтрокаТЧ.СуммаНДС - СтрокаТЧ.СуммаНДСДоИзменения;
				Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.03");
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходыПлюс);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения", Элемент);
				Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,  "ас_ПериодыОтражения", ПериодОтражения);
				//НУ				
				Проводка = ПроводкиНУ.Добавить();
				Проводка.Период                   = Источник.дата;
				Проводка.Организация              = Источник.Организация;
				Проводка.Регистратор 			  = Источник.ссылка;
				Проводка.Содержание 			  = Содержание;
				Проводка.СчетДт                   = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Источник.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Источник.ДоговорКонтрагента);
				Проводка.ВидУчетаДт				  = Перечисления.ВидыУчетаПоПБУ18.НУ;
				Проводка.СчетКт					  = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Источник.СтатьяПрочихДоходовИРасходов);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
				Проводка.Сумма					  = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаДоИзменения;
				Проводка.ВидУчетаКт				  = Перечисления.ВидыУчетаПоПБУ18.ВР;
			КонецЕсли;
		КонецЦикла;		
	ИначеЕсли Источник.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда //Корректировка по согласованию сторон
		Для Каждого СтрокаТЧ из ТЧ Цикл
			Сумма = (СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС) - (СтрокаТЧ.СуммаДоИзменения + СтрокаТЧ.СуммаНДСДоИзменения); 
			Если Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;			
			НужнаяГруппа = глЗначениеПеременной("абс_КонтрольПоГруппеПериодаОтраженияВСчетах");
			НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(Источник.ДатаЗагрузкиИзАСР)), " ",""), Символы.НПП, "");
			КодПоиска = СокрЛП(НомерГода);
			Элемент = Справочники.ас_ПериодыОтражения.НайтиПоНаименованию(КодПоиска,,НужнаяГруппа);			
			Если Сумма > 0 Тогда //Увеличение
				//62.01
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                 = Источник.дата;
				Проводка.Организация            = Источник.Организация;
				Проводка.Регистратор 			= Источник.ссылка;
				Проводка.Содержание 			= Содержание;
				Проводка.Сумма 					= Сумма;				
				Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Источник.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Источник.ДоговорКонтрагента);				
				Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходыПлюс);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,  "ас_ПериодыОтражения", Элемент);
				//91.03
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                 = Источник.дата;
				Проводка.Регистратор 			= Источник.ссылка;
				Проводка.Организация            = Источник.Организация;
				Проводка.Содержание 			= Содержание;
				Проводка.Сумма					= СтрокаТЧ.СуммаНДС - СтрокаТЧ.СуммаНДСДоИзменения;				
				Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.03");
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходыПлюс);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения", Элемент);				
				Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,  "ас_ПериодыОтражения", ПериодОтражения);
				//НУ
				Проводка = ПроводкиНУ.Добавить();
				Проводка.Период                   = Источник.дата;
				Проводка.Организация              = Источник.Организация;
				Проводка.Регистратор 			  = Источник.ссылка;
				Проводка.Содержание 			  = Содержание;
				Проводка.СчетДт                   = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Источник.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Источник.ДоговорКонтрагента);
				Проводка.ВидУчетаДт				  = Перечисления.ВидыУчетаПоПБУ18.НУ;
				Проводка.СчетКт					  = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходыПлюс);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
				Проводка.Сумма					  = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаДоИзменения;
				Проводка.ВидУчетаКт				  = Перечисления.ВидыУчетаПоПБУ18.НУ;
			Иначе //Уменьшение
				//91.02.1
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                 = Источник.дата;
				Проводка.Организация            = Источник.Организация;
				Проводка.Регистратор 			= Источник.ссылка;
				Проводка.Содержание 			= Содержание;			
				Проводка.Сумма 					= -(Сумма);
				Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходыМинус);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения", Элемент);
				Проводка.Счеткт                  =  ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Источник.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Источник.ДоговорКонтрагента);
				//91.03
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                 = Источник.дата;
				Проводка.Организация            = Источник.Организация;
				Проводка.Регистратор 			= Источник.ссылка;
				Проводка.Содержание 			= Содержание;
				Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.03");
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходыМинус);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения", Элемент);
				Проводка.СчетКт 				= ПланыСчетов.Хозрасчетный.ОтрицательныеКорректировкиНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Источник.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", Источник.Ссылка);				
				Проводка.Сумма 					= СтрокаТЧ.СуммаНДС - СтрокаТЧ.СуммаНДСДоИзменения;
				//76КР
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                 = Источник.дата;
				Проводка.Организация            = Источник.Организация;
				Проводка.Регистратор 			= Источник.ссылка;
				Проводка.Содержание 			= Содержание;
				Проводка.СчетДт 				= ПланыСчетов.Хозрасчетный.ОтрицательныеКорректировкиНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Источник.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", Источник.Ссылка);
				Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,  "ас_ПериодыОтражения", ПериодОтражения);				
				Проводка.Сумма 					= -(Сумма);
				//НУ
				Проводка = ПроводкиНУ.Добавить();
				Проводка.Период                 = Источник.дата;
				Проводка.Организация            = Источник.Организация;
				Проводка.Регистратор 			= Источник.ссылка;				
				Проводка.Содержание 			= Содержание;
				Проводка.СчетДт 				= ПланыСчетов.Налоговый.ВнереализационныеРасходы;				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходыМинус);				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
				Проводка.ВидУчетаДт				  = Перечисления.ВидыУчетаПоПБУ18.НУ;
				Проводка.СчетКт                   = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Источник.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Источник.ДоговорКонтрагента);
				Проводка.ВидУчетаКт				  = Перечисления.ВидыУчетаПоПБУ18.НУ;				
				Проводка.Сумма 					= -(СтрокаТЧ.Сумма - СтрокаТЧ.СуммаДоИзменения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиПоБуиНуРеал(Источник, ТЧ, Содержание, ПроводкиБУ, ПроводкиНУ)

	//Бобылев А.А. 26.06.2018
	ПрочиеДоходыИРасходы = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000166");	
	//Бобылев А.А.
	Попытка
		КварталАСР = ПолучитьКвартал(Источник.абс_ДатаПолученияСчета);
		ПериодОтражения = Справочники.ас_ПериодыОтражения.НайтиПоКоду(Формат(Год(Источник.абс_ДатаПолученияСчета),"ЧГ=") + КварталАСР);
	Исключение
		КварталАСР = ПолучитьКвартал(ТекущаяДата());
		ПериодОтражения =  Справочники.ас_ПериодыОтражения.НайтиПоКоду(Формат(Год(ТекущаяДата()),"ЧГ=") + КварталАСР);
	КонецПопытки;
	Если НЕ ЗначениеЗаполнено(ПериодОтражения)Тогда
		КварталАСР = ПолучитьКвартал(ТекущаяДата());
		ПериодОтражения =  Справочники.ас_ПериодыОтражения.НайтиПоКоду(Формат(Год(ТекущаяДата()),"ЧГ=") + КварталАСР);
	КонецЕсли;
	
	Для каждого СтрокаТЧ из ТЧ Цикл
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период                 = Источник.дата;
		Проводка.Организация            = Источник.Организация;
		Проводка.Содержание 			= Содержание;
		Проводка.Сумма 					= СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
		Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Источник.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Источник.ДоговорКонтрагента);
		Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		//Нужно доделать ↓
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходы);
		//Бобылев А.А. 03.10.2018 627
		Попытка
			СтрокаТЧ.СубконтоБУ = ПрочиеДоходыИРасходы;
			//СтрокаТЧ.СубконтоНУ = ПрочиеДоходыИРасходы;			
		Исключение
		КонецПопытки;
		//Бобылев А.А. --------------
		
		НужнаяГруппа = глЗначениеПеременной("абс_КонтрольПоГруппеПериодаОтраженияВСчетах");
		НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(Источник.абс_ДатаПолученияСчета)), " ",""), Символы.НПП, "");
		КодПоиска = СокрЛП(НомерГода);
		Элемент = Справочники.ас_ПериодыОтражения.НайтиПоНаименованию(КодПоиска,,НужнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,  "ас_ПериодыОтражения", Элемент);
		
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период                 = Источник.дата;
		Проводка.Организация            = Источник.Организация;
		Проводка.Содержание 			= Содержание;
		Проводка.Сумма					= СтрокаТЧ.СуммаНДС;
		Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.03");
		//Нужно доделать ↓
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходы);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения", Элемент);
		Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.НДС;
		//Нужно доделать ↓
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,  "ас_ПериодыОтражения", ПериодОтражения);
		
		Проводка = ПроводкиНУ.Добавить();
		Проводка.Период                   = Источник.дата;
		Проводка.Организация              = Источник.Организация;
		Проводка.Содержание 			  = Содержание;
		Проводка.СчетДт                   = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Источник.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Источник.ДоговорКонтрагента);
		Проводка.СчетКт					  = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходы);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
		Проводка.Сумма					  = СтрокаТЧ.Сумма;
		Проводка.ВидУчетаКт				  = Перечисления.ВидыУчетаПоПБУ18.ВР;
	КонецЦикла;

КонецПроцедуры