// Функция получает в параметрах двоичные данные и записывает файл в файловое хранилище на сервере.
// {{ТТК Сладков А. Заявка №7754434  26.10.2016 ++
//Функция ЗаписатьФайлВоВнешнееХранилище(СсылкаОбъекта, ДвоичныеДанные, ИмяФайла, СсылкаФайлаХранилища = Неопределено, КлючСтроки = Неопределено, СвойствоОС = Неопределено) Экспорт
// {{ТТК Сладков А. Заявка №7754434  26.10.2016 --
Функция ЗаписатьФайлВоВнешнееХранилище(СсылкаОбъекта, ДвоичныеДанные, ИмяФайла, СсылкаФайлаХранилища = Неопределено, КлючСтроки = Неопределено, СвойствоОС = Неопределено,ХэшЗагружаемогоФайла=Неопределено) Экспорт
	
	
	
	Если НЕ КонтрольРазмераФайла(ДвоичныеДанные) Тогда
		Возврат Новый Структура("Успешно", Ложь);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("Хранилище,Успешно");
	СтруктураВозврата.Вставить("Хранилище","");
	СтруктураВозврата.Вставить("Успешно", Ложь);
	
	// {{ТТК Сладков А. Заявка №7753726  21.10.2016 ++
	//КаталогХранилищаФайлов = Константы.абс_ПутьКВнешнемуХранилищу.Получить();
	КаталогХранилищаФайлов = ОбщегоНазначенияКлиентСервер.ПолучитьПутьКВнешнемуХранилищуФайловПоОбъектуМетаданных(СсылкаОбъекта);
	// {{ТТК Сладков А. Заявка №7753726  21.10.2016 --

	НаименованиеКаталога = "";
		
	Объект = СсылкаОбъекта;
		
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		
		НаименованиеКаталога = НаименованиеКаталога + "\Прочие файлы";
		
	Иначе
				
		НаименованиеКаталога = НаименованиеКаталога + Строка(Объект.Метаданные().Имя) + "\";
		Если ТипЗнч(СсылкаОбъекта) = Тип("СправочникСсылка.ДоговорыКонтрагентов")Тогда
			Если Объект.Метаданные().Владельцы.Количество() > 0 Тогда
				НаименованиеКаталога = НаименованиеКаталога + РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(
				СокрЛП(Лев(СокрЛП(Объект.Владелец.Код), 50)) + "_" + 
				Строка(Объект.Владелец.УникальныйИдентификатор()));
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Справочники.ТипВсеСсылки().Типы().Найти(ТипЗнч(Объект)) = Неопределено Тогда
		НаименованиеКаталога = НаименованиеКаталога + "\" + 
			РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(
				СокрЛП(Объект.Код) + "_" +
				Строка(Объект.УникальныйИдентификатор()));
			
		Иначе
			НаименованиеКаталога = НаименованиеКаталога + "\" + 
			РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(
			СокрЛП(Объект.Номер) + "_" +
			Строка(Объект.УникальныйИдентификатор()));
			
		КонецЕсли;
			
	КонецЕсли;
		
	Попытка 
		
				
		ПутьКФайлу = КаталогХранилищаФайлов + "\" + НаименованиеКаталога;
		
		СоздатьКаталог(ПутьКФайлу);
				
		Файл = Новый Файл(ПутьКФайлу + "\" + ИмяФайла);
		
		ИмяФайла 	= Файл.ИмяБезРасширения;
		Расширение 	= Файл.Расширение;
		
		ПолныйПутьКФайлу = ПутьКФайлу + "\" + РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(ИмяФайла + Расширение);
				
		Пока Файл.Существует() Цикл
			ПолныйПутьКФайлу = ПутьКФайлу + "\" + РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(ИмяФайла + "_" + Строка(Новый УникальныйИдентификатор) + Расширение);
			Файл = Новый Файл(ПолныйПутьКФайлу);
		КонецЦикла;
		
		СтруктураВозврата.Вставить("Хранилище",Прав(ПолныйПутьКФайлу, СтрДлина(ПолныйПутьКФайлу) - СтрДлина(КаталогХранилищаФайлов)));
		
		// {{ТТК Сладков А. Заявка №7754434 26.10.2016 начало
		
		// Проверим, если аналогичный файл уже имееться в системе тогда вернем ссылку уже ранее созданного элемента
		// Запишем эту ссылку в текущей элемент, и файл будем читать из нее	
		
		
		
		СсылкаНаХранилище_С_АналогичнымФайлом = НайтиДублирующийФайлХранилища(ХэшЗагружаемогоФайла,ИмяФайла); 
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаХранилище_С_АналогичнымФайлом) Тогда
			
		    ДвоичныеДанные.Записать(ПолныйПутьКФайлу);
		
		КонецЕсли;	
		// }}ТТК Сладков А. Заявка №7754434 26.10.2016 окончание

				
		Если НЕ СсылкаФайлаХранилища = Неопределено Тогда			
			ОбъектХранилища = СсылкаФайлаХранилища.ПолучитьОбъект();
		Иначе			
			ОбъектХранилища = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			ОбъектХранилища.Объект 			= СсылкаОбъекта;
			ОбъектХранилища.абс_КлючСтроки  = КлючСтроки;
			ОбъектХранилища.ИмяФайла 		= ИмяФайла;
			ОбъектХранилища.ВидДанных 		= Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
		КонецЕсли;
				
		// {{ТТК Сладков А. Заявка №7754434 26.10.2016 начало
		Если ЗначениеЗаполнено(СсылкаНаХранилище_С_АналогичнымФайлом) Тогда
			
		    ОбъектХранилища.ttk_СсылкаНаАналогичныйФайл = СсылкаНаХранилище_С_АналогичнымФайлом;
			
		Иначе
			
			Если  НЕ(ХэшЗагружаемогоФайла=Неопределено ИЛИ ХэшЗагружаемогоФайла=0) Тогда

				ОбъектХранилища.ttk_ХэшФайла = ХэшЗагружаемогоФайла;
				
			КонецЕсли;	
			
		КонецЕсли;
		// {{ТТК Сладков А. Заявка №7754434 26.10.2016 окончание
		
		ОбъектХранилища.Хранилище = Новый ХранилищеЗначения(Прав(ПолныйПутьКФайлу, СтрДлина(ПолныйПутьКФайлу) - СтрДлина(КаталогХранилищаФайлов)));
		ОбъектХранилища.Наименование = Файл.Имя;
		ОбъектХранилища.абс_ДатаПрикрепленияФайла = ТекущаяДата();
		
		// Если общий отдел прикрепляет файлы к договору в статус Подписание и регистрация, то файл помечается как итоговый.
		Если ТипЗнч(СсылкаОбъекта) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			Если СсылкаОбъекта.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Регистрация И РольДоступна("абс_ОбщийОтдел") Тогда
				
				ОбъектХранилища.абс_ИтоговыйФайл = Истина;	
			КонецЕсли;
		ИначеЕсли ТипЗнч(СсылкаОбъекта) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
            //для ОС файлы принадлежат конретному свойству 
			Если СвойствоОС <> Неопределено Тогда 
				ОбъектХранилища.абс_СвойствоОС = СвойствоОС;
			КонецЕсли;
		КонецЕсли;

		ОбъектХранилища.Записать();
		
	Исключение
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка загрузки файлов: " + ОписаниеОшибки());
		//Возврат Ложь;
		СтруктураВозврата.Вставить("Успешно",Ложь);
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	СтруктураВозврата.Вставить("ХранилищеСсылка", ОбъектХранилища.Ссылка);
	СтруктураВозврата.Вставить("Успешно",Истина);
	Возврат СтруктураВозврата;	
	
КонецФункции

// Функция по ссылка на хранилище файлов и возвращает двоичные данные.
Функция ПолучитьФайлИзВнешнегоХранилища(СсылкаФайла) Экспорт
	
	// {{ТТК Сладков А. Заявка №7754434  26.10.2016 ++
	Если ЗначениеЗаполнено(СсылкаФайла.ttk_СсылкаНаАналогичныйФайл) Тогда
		
		СсылкаФайла = СсылкаФайла.ttk_СсылкаНаАналогичныйФайл;
		
	КонецЕсли;
	// {{ТТК Сладков А. Заявка №7754434  26.10.2016 --

	Если ТипЗнч(СсылкаФайла.Хранилище.Получить()) = Тип("Строка") Тогда
		
		// {{ТТК Сладков А. Заявка №7753726  21.10.2016 ++
		//ПутьКФайлу = Константы.абс_ПутьКВнешнемуХранилищу.Получить() + "/" + СсылкаФайла.Хранилище.Получить();
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ПолучитьПутьКВнешнемуХранилищуФайлов(СсылкаФайла) + "/" + СсылкаФайла.Хранилище.Получить();
		// {{ТТК Сладков А. Заявка №7753726  21.10.2016 -
			
		 
		 
		 Возврат Новый ДвоичныеДанные(ПутьКФайлу);
	КонецЕсли;		

КонецФункции

Функция КонтрольРазмераФайла(ДвоичныеДанные)
	
	МаксимальныйРазмерФайлаМБ = Константы.абс_МаксимальныйРазмерФайла.Получить();
	
	РазмерФайлаБайтыМБ = Окр(ДвоичныеДанные.Размер() / 1024 / 1024, 3);
	
	Если РазмерФайлаБайтыМБ > МаксимальныйРазмерФайлаМБ Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Превышен максимальный размер прикрепляемого файла.");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОтбиратьИтоговыеФайлыДоговора(ДоговорКонтрагентаСсылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.абс_ИтоговыйФайл = ИСТИНА");
	
	Запрос.УстановитьПараметр("Объект", ДоговорКонтрагентаСсылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

//Функция получает данные из хранилища значений из реквизита по ссылке
//
Функция ПолучитьПутькФайлуВоВнешнемХранилище(СсылкаФайла) Экспорт 
	
	
	// {{ТТК Сладков А. Заявка №7753726  21.10.2016 ++
	//ПутьКФайлу = Константы.абс_ПутьКВнешнемуХранилищу.Получить() + "/" + СсылкаФайла.Хранилище.Получить();
	ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ПолучитьПутьКВнешнемуХранилищуФайлов(СсылкаФайла) + "/" + СсылкаФайла.Хранилище.Получить();
	 // {{ТТК Сладков А. Заявка №7753726  21.10.2016 -
	
	
	Возврат ПутьКФайлу;
	
КонецФункции

Функция ПолучитьРазмерФайла(СсылкаФайла) Экспорт
	
	
	// {{ТТК Сладков А. Заявка №7753726  21.10.2016 ++
	//ПутьКФайлу = Константы.абс_ПутьКВнешнемуХранилищу.Получить() + "/" + СсылкаФайла.Хранилище.Получить();
	ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ПолучитьПутьКВнешнемуХранилищуФайлов(СсылкаФайла) + "/" + СсылкаФайла.Хранилище.Получить();
	// {{ТТК Сладков А. Заявка №7753726  21.10.2016 -

	Попытка 
		ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
		Результат = ДвоичныеДанные.Размер();
	Исключение	
		Возврат ОписаниеОшибки(); 
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// функция формирует имя заменяя из первоначально предложенного имени все
// запрещенные символы на символ в параметре ЗамешающийСимвол
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Строка – имя файла, которое может быть использовано в файловой системе
//
Функция ЗаменитьЗапрещенныеСимволыСтроки(Знач ИмяФайла, ЗамешающийСимвол) Экспорт

	ИтоговоеИмяФайла = СокрЛП(ИмяФайла);
	
	Если ПустаяСтрока(ИтоговоеИмяФайла) Тогда
		
		Возврат ИтоговоеИмяФайла;
		
	КонецЕсли;
	
	СписокСимволов = ПолучитьСписокЗапрещенныхСимволовВИменахФайлов();
	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл
		
		ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла,  СтрокаЗапретногоСимвола.Значение, ЗамешающийСимвол);			
		
	КонецЦикла;
	
	Возврат ИтоговоеИмяФайла;

КонецФункции

// функция возвращает список запрещенных символов в именах файлов
// Возвращаемое значение:
//   Список значений в котором хранится список всех запрещенных символов в именах файлов.
//
Функция ПолучитьСписокЗапрещенныхСимволовВИменахФайлов()
	
	СписокСимволов = Новый СписокЗначений();
	
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить("/");
	СписокСимволов.Добавить(":");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	
	Возврат СписокСимволов;
	
КонецФункции

// {{ТТК Сладков А. Заявка №7754434  26.10.2016 ++
Функция ПолучитьХэшЗагруженногоФайла(ДвоичныеДанныеФайла)
	
   Хеш = Новый ХешированиеДанных(ХешФункция.CRC32);
 
   Хеш.ДобавитьФайл(ДвоичныеДанныеФайла);
 
   Возврат Хеш.ХешСумма; 

	
КонецФункции


Функция НайтиДублирующийФайлХранилища(ХэшЧислоФайла,ИмяФайла)
	
	Если ХэшЧислоФайла=Неопределено ИЛИ ХэшЧислоФайла=0 Тогда
		
		Возврат  Справочники.ХранилищеДополнительнойИнформации.ПустаяСсылка();
		
	КонецЕсли;
	
	Запрос=новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.ttk_ХэшФайла = &ttk_ХэшФайла
	|	И  ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла";
	
	Запрос.УстановитьПараметр("ttk_ХэшФайла",ХэшЧислоФайла);
	Запрос.УстановитьПараметр("ИмяФайла",ИмяФайла);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка 
		
	Иначе
		
		
		Возврат Справочники.ХранилищеДополнительнойИнформации.ПустаяСсылка(); 
		
	КонецЕсли;
	
	
КонецФункции
// {{ТТК Сладков А. Заявка №7754434  26.10.2016 --

