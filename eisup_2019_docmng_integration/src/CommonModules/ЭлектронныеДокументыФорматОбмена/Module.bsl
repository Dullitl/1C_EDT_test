///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ЭЛЕКТРОННЫХ ДОКУМЕНТОВ ИЗ ДОКУМЕНТОВ БАЗЫ ДАННЫХ

// Формирует электронный документ расходной накладной по ссылке на документ ИБ.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
// НастройкиОбменаЭД - структура, содержащая настройки обмена 
// ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьНакладнуюПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
			
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД",Перечисления.ВидыЭД.Накладная);
	СтруктураЭД.Вставить("НаправлениеЭД",Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",ЭлектронныеДокументы.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",ТекущаяДата());
	СтруктураЭД.Вставить("ВладелецЭД",СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация",СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",НастройкиОбменаЭД.СоглашениеЭД);
		
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД);
	
	СоздатьКаталог(КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла", КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор()+"\"+ ЭлектронныеДокументы.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если НЕ СформироватьНакладнуюCML(СтруктураПараметров) Тогда
		Возврат "";
	КонецЕсли;

	Если ПризнакЭД Тогда
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		Возврат СтруктураПараметров;
	КонецЕсли;
	
КонецФункции

// Формирует электронный документ счета на оплату покупателю по ссылке на документ ИБ.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
// ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//	
Функция СформироватьСчетНаОплатуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	СтруктураЭД = Новый Структура;      
	СтруктураЭД.Вставить("ВидЭД",			Перечисления.ВидыЭД.СчетНаОплату);
	СтруктураЭД.Вставить("НаправлениеЭД", 	Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",		НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",		НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",	ЭлектронныеДокументы.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",			ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",			ТекущаяДата());
	СтруктураЭД.Вставить("ВладелецЭД",		СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация",		СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",		СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",	НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД);
	
	СоздатьКаталог(КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла", КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор()+"\"+ ЭлектронныеДокументы.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если НЕ СформироватьСчетНаОплатуCML(СтруктураПараметров) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПризнакЭД Тогда
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		Возврат СтруктураПараметров;
	КонецЕсли;
		
КонецФункции

// Формирует электронный документ заказа поставщику по ссылке на документ ИБ.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
// ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьЗаказПоставщикуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	СтруктураЭД = Новый Структура;      
	СтруктураЭД.Вставить("ВидЭД",			Перечисления.ВидыЭД.ЗаказТовара);
	СтруктураЭД.Вставить("НаправлениеЭД", 	Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",		НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",		НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",	ЭлектронныеДокументы.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",			ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",			ТекущаяДата());
	СтруктураЭД.Вставить("ВладелецЭД",		СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация",		СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",		СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",	НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД);
	
	СоздатьКаталог(КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла", КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор()+"\"+ ЭлектронныеДокументы.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если НЕ СформироватьЗаказCML(СтруктураПараметров) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПризнакЭД Тогда
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		Возврат СтруктураПараметров;
	КонецЕсли;

КонецФункции

// Формирует электронный документ заказа клиента по ссылке на документ ИБ.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
// ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьЗаказКлиентаПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
		
	СтруктураЭД = Новый Структура;      
	СтруктураЭД.Вставить("ВидЭД",			Перечисления.ВидыЭД.ОтветНаЗаказ);
	СтруктураЭД.Вставить("НаправлениеЭД", 	Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",		НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",		НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",	ЭлектронныеДокументы.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",			ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",			ТекущаяДата());
	СтруктураЭД.Вставить("ВладелецЭД",		СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация",		СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",		СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",	НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД);
	
	СоздатьКаталог(КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла", КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор()+"\"+ ЭлектронныеДокументы.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если НЕ СформироватьЗаказCML(СтруктураПараметров) Тогда
		Возврат "";
	КонецЕсли;

	Если ПризнакЭД Тогда
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		Возврат СтруктураПараметров;
	КонецЕсли;
	
КонецФункции

// Формирует электронный документ каталога товаров по ссылке на документ ИБ.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
// ТоварыКаталога - таблица значений, содержащая перечень номенклатуры,
// ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьКаталогНоменклатуры(СсылкаНаОбъект, ТоварыКаталога, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	СтруктураЭД = Новый Структура;      
	СтруктураЭД.Вставить("ВидЭД",			Перечисления.ВидыЭД.КаталогТоваров);
	СтруктураЭД.Вставить("НаправлениеЭД",	Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",		СсылкаНаОбъект.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",		СсылкаНаОбъект.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",	ЭлектронныеДокументы.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",			ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",			ТекущаяДата());
	СтруктураЭД.Вставить("ВладелецЭД",		СсылкаНаОбъект);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",	ТекущаяДата());
	СтруктураЭД.Вставить("Организация",		СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",		СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",	НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект, ТоварыКаталога, СтруктураЭД);
	
	СоздатьКаталог(КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла", КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор()+"\"+ ЭлектронныеДокументы.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если НЕ СформироватьКаталогCML(СтруктураПараметров) Тогда
		Возврат "";
	КонецЕсли;

	Если ПризнакЭД Тогда
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		Возврат СтруктураПараметров;
	КонецЕсли;
	
КонецФункции

// Формирует электронный документ прайс-листа по ссылке на документ ИБ.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
// ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьПрайсПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	СтруктураЭД = Новый Структура;      
	СтруктураЭД.Вставить("ВидЭД",			Перечисления.ВидыЭД.ПрайсЛист);
	СтруктураЭД.Вставить("НаправлениеЭД", 	Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",		НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",		НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",	ЭлектронныеДокументы.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",			ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",			ТекущаяДата());
	СтруктураЭД.Вставить("ВладелецЭД",		СсылкаНаОбъект);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",	СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация",		СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",		НастройкиОбменаЭД.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",	НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД);
	
	СоздатьКаталог(КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла", КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор()+"\"+ ЭлектронныеДокументы.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если НЕ СформироватьПрайсЛистCML(СтруктураПараметров) Тогда
		Возврат "";
	КонецЕсли;

	Если ПризнакЭД Тогда
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		Возврат СтруктураПараметров;
	КонецЕсли;
	
КонецФункции

// Формирует электронный документ выполнения работ по ссылке на документ ИБ.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
// ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьАктВыполненныхРаботПоДокументу (СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД",			Перечисления.ВидыЭД.АктВыполненныхРабот);
	СтруктураЭД.Вставить("НаправлениеЭД", 	Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",		НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",		НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",	ЭлектронныеДокументы.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",			ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",			ТекущаяДата());
	СтруктураЭД.Вставить("ВладелецЭД",		СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",	ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",	СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация",		СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",		СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",	НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект, СтруктураЭД);
	
	СоздатьКаталог(КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла", КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор()+"\"+ ЭлектронныеДокументы.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если НЕ СформироватьАктCML(СтруктураПараметров) Тогда
		Возврат "";
	КонецЕсли;

	Если ПризнакЭД Тогда
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		Возврат СтруктураПараметров;
	КонецЕсли;
	
КонецФункции

// Формирует электронный документ отчета комитента по ссылке на документ ИБ.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
// ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД",			Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	СтруктураЭД.Вставить("НаправлениеЭД", 	Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",		НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",		НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",	ЭлектронныеДокументы.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",			ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",			ТекущаяДата());
	СтруктураЭД.Вставить("ВладелецЭД",		СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",	ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",	СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация",		СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",		СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",	НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД);
	
	СоздатьКаталог(КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла", КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор()+"\"+ ЭлектронныеДокументы.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если НЕ СформироватьОтчетОПродажахКомиссионногоТовараCML(СтруктураПараметров) Тогда
		Возврат "";
	КонецЕсли;	
	Если ПризнакЭД Тогда
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		Возврат СтруктураПараметров;
	КонецЕсли;
             	
КонецФункции

// Формирует электронный документ отчета комитента о списании по ссылке на документ ИБ.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
// ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД",			Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	СтруктураЭД.Вставить("НаправлениеЭД", 	Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",		НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",		НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",	ЭлектронныеДокументы.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",			ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",			ТекущаяДата());
	СтруктураЭД.Вставить("ВладелецЭД",		СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",	ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",	СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация",		СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",		СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",	НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД);
	
	СоздатьКаталог(КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла", КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор()+"\"+ ЭлектронныеДокументы.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если НЕ СформироватьОтчетОСписанииКомиссионногоТовараCML(СтруктураПараметров) Тогда
		Возврат "";
	КонецЕсли;

	Если ПризнакЭД Тогда
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		Возврат СтруктураПараметров;
	КонецЕсли;
	   	
КонецФункции

// Формирует электронный документ передача товаров между организациями по ссылке на документ ИБ.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
// ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьПередачуТоваровМеждуОрганизациями(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД",			Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	СтруктураЭД.Вставить("НаправлениеЭД", 	Перечисления.НаправленияЭД.Интеркампани);
	СтруктураЭД.Вставить("Отправитель",		НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",		НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",	ЭлектронныеДокументы.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",			ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",			ТекущаяДата());
	СтруктураЭД.Вставить("ВладелецЭД",		СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",	ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",	СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация",		СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",		СсылкаНаОбъект.ОрганизацияПолучатель);
	СтруктураЭД.Вставить("СоглашениеЭД",	НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД);
	
	СоздатьКаталог(КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла", КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор()+"\"+ ЭлектронныеДокументы.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если НЕ СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров) Тогда
		Возврат "";
	Иначе
		Если ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			Возврат СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Формирует электронный документ возврат товаров между организациями по ссылке на документ ИБ.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
// ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьВозвратТоваровМеждуОрганизациями(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД",			Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	СтруктураЭД.Вставить("НаправлениеЭД", 	Перечисления.НаправленияЭД.Интеркампани);
	СтруктураЭД.Вставить("Отправитель",		НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",		НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",	ЭлектронныеДокументы.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",			ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",			ТекущаяДата());
	СтруктураЭД.Вставить("ВладелецЭД",		СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",	ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",	СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация",		СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",		СсылкаНаОбъект.ОрганизацияПолучатель);
	СтруктураЭД.Вставить("СоглашениеЭД",	НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД);
	
	СоздатьКаталог(КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла", КаталогВременныхФайлов()+СсылкаНаОбъект.УникальныйИдентификатор()+"\"+ ЭлектронныеДокументы.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если НЕ СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров) Тогда
		Возврат "";
	Иначе
		Если ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			Возврат СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Торг-12.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//   Булево - признак успеха формирования
//
Функция СформироватьНакладнуюCML(СтруктураПараметров) 
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	СтруктураОбязательныхПолей = Новый Структура("ТаблицаТоваров, Организация, Контрагент, Ид, ДатаФормирования,
									|Номер, Дата, ВидЭД, НаправлениеЭД, ПолноеИмяФайла");
	ПроверитьЗаполнениеОбязательныхПараметров(СтруктураПараметров, СтруктураОбязательныхПолей);
	ТекстОшибки = "";
	Если СтруктураПараметров.Свойство("ТекстОшибки", ТекстОшибки) И ЗначениеЗаполнено(ТекстОшибки) Тогда // если уже были ошибки раньше
		Возврат Ложь;
	КонецЕсли;

	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ТОРГ12",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);

		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер",СтруктураПараметров.Номер,Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ОКУД", "0330212", Истина, ТекстОшибки);

		Если СтруктураПараметров.Свойство("Валюта") Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс,,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта,"НаименованиеСокращенноеОКВ",СтруктураПараметров.Валюта.Наименование,,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное,,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки); 
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("ТОРГ12.Грузоотправитель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(
											Грузоотправитель, 
											СтруктураПараметров, 
											СтруктураПараметров.ТипГрузоотправителя, 
											ТекстОшибки, 
											СтруктураПараметров.ВерсияСхемы, 
											"Грузоотправитель"
											);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузоотправитель", Грузоотправитель, , ТекстОшибки);

		Грузополучатель = ПолучитьОбъектТипаCML("ТОРГ12.Грузополучатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(
											Грузополучатель, 
											СтруктураПараметров, 
											"Контрагент", 
											ТекстОшибки, 
											СтруктураПараметров.ВерсияСхемы,"Грузополучатель"
											);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузополучатель", Грузополучатель, , ТекстОшибки);
		
		Организация = ПолучитьОбъектТипаCML("ТОРГ12.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Организация, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Организация, , ТекстОшибки);

		Контрагент = ПолучитьОбъектТипаCML("ТОРГ12.Плательщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Плательщик", Контрагент, , ТекстОшибки);

		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ТОРГ12.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"КоличествоЗаписей", ТаблицаТоваров.Количество(),, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"КоличествоМест", ТаблицаТоваров.Количество(),, ТекстОшибки);
		Если СтруктураПараметров.ЦенаВключаетНДС Тогда
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"СуммаБезНДС", ТаблицаТоваров.Итог("Сумма") - ТаблицаТоваров.Итог("СуммаНДС"),,ТекстОшибки);
		Иначе	
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"СуммаБезНДС", ТаблицаТоваров.Итог("Сумма") ,, ТекстОшибки);
		КонецЕсли;	
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"СуммаНДС", ТаблицаТоваров.Итог("СуммаНДС"),,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"СуммаСУчетомНДС", ТаблицаТоваров.Итог("СуммаСНДС"),, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу",ИтогоПоДокументу, ,ТекстОшибки);
		
		ИтогиПрописью = ПолучитьОбъектТипаCML("ТОРГ12.ИтогиПрописью", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоЗаписейПрописью", ЧислоПрописью(ТаблицаТоваров.Количество(),,",,,,,,,,0"),, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоМестПрописью",   ЧислоПрописью(ТаблицаТоваров.Количество(),,",,,,,,,,0"),, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
								ИтогиПрописью, 
								"СуммаВсегоПрописью", 
								ЭлектронныеДокументыПереопределяемый.СуммаПрописью(ТаблицаТоваров.Итог("СуммаСНДС"), КодВалюты),
								, 
								ТекстОшибки
								);
		ЗаполнитьСвойствоXDTO(ДокументЭО,  "ИтогиПрописью", ИтогиПрописью,, ТекстОшибки);
			
		Если ТаблицаТоваров.Количество()>0 Тогда 
			// Товары                                                                   
			ПП = 0;
			Товары= ПолучитьОбъектТипаCML("ТОРГ12.Товары", СтруктураПараметров.ВерсияСхемы);
      		Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				ПП = ПП + 1;
				Товар = ПолучитьОбъектТипаCML("ТОРГ12.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "НомерПП", ПП,, ТекстОшибки);
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения",СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки); 
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Количество",ТекТовар.Количество,,ТекстОшибки);
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе	
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "Цена",Окр(СуммаБезНДС/ТекТовар.Количество,2),, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаБезНДС", СуммаБезНДС,,ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаСУчетомНДС", ТекТовар.СуммаСНДС,, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекТовар.СуммаНДС) Тогда
					НалогПоСтроке 	= ПолучитьОбъектТипаCML("Налог",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога","НДС", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, Истина, ТекстОшибки);
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом,, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "Налог",НалогПоСтроке,,ТекстОшибки);
				КонецЕсли;
				Если НЕ (ТаблицаТоваров.Колонки.Найти("НомерПоДаннымКлиента") = Неопределено 
				 	ИЛИ ТаблицаТоваров.Колонки.Найти("ДатаПоДаннымКлиента") = Неопределено) 
				 	И ЗначениеЗаполнено(ТекТовар.НомерПоДаннымКлиента) И ЗначениеЗаполнено(ТекТовар.ДатаПоДаннымКлиента) Тогда
					ТипОбъектаСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.НомерПоДаннымКлиента);
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "НомерПоДаннымКлиента",НовыйОбъект);
					ТипОбъектаДата = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.ДатаПоДаннымКлиента);
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "ДатаПоДаннымКлиента",НовыйОбъект);
				КонецЕсли;
				Если (НЕ (ТаблицаТоваров.Колонки.Найти("СрокГодности") = Неопределено)) И ЗначениеЗаполнено(ТекТовар.СрокГодности) Тогда
					ТипОбъектаСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.СрокГодности);
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "СрокГодности",НовыйОбъект);
				КонецЕсли;
				Если (НЕ (ТаблицаТоваров.Колонки.Найти("НомерГТД") = Неопределено)) И ЗначениеЗаполнено(ТекТовар.НомерГТД) Тогда
					ТипОбъектаСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.НомерГТД);
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "НомерГТД",НовыйОбъект);
				КонецЕсли;
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары",Товары, , ТекстОшибки);
		КонецЕсли;

		ДокументЭО.Проверить();
		
		ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки(), СтруктураПараметров);
		Возврат Ложь;
   	КонецПопытки;
	
КонецФункции
   
// Возвращает результат успеха формирования файла ЭД Счет на оплату.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//   Булево - признак успеха формирования
//
Функция СформироватьСчетНаОплатуCML(СтруктураПараметров) 
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, Ид, ДатаФормирования,
									|Номер, Дата, ВидЭД, НаправлениеЭД, ПолноеИмяФайла");
	ПроверитьЗаполнениеОбязательныхПараметров(СтруктураПараметров, СтруктураОбязательныхПолей);
	ТекстОшибки = "";
	Если СтруктураПараметров.Свойство("ТекстОшибки", ТекстОшибки) И ЗначениеЗаполнено(ТекстОшибки) Тогда // если уже были ошибки раньше
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ДокументЭО 	= ПолучитьОбъектТипаCML("СчетНаОплату",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", 		СтруктураПараметров.Исполнитель, 					Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", 	XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", 		СтруктураПараметров.ВерсияСхемы, 					Истина, ТекстОшибки);
						
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", 	СтруктураПараметров.Ид, 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер",	СтруктураПараметров.Номер, 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", 	XMLДата(СтруктураПараметров.Дата), 	Истина, ТекстОшибки);
		
		РеквизитыПолучателя = ПолучитьОбъектТипаCML("СчетНаОплату.РеквизитыПолучателя", СтруктураПараметров.ВерсияСхемы);
             				
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "НомерСчета", СтруктураПараметров.РасчетныйСчет.НомерСчета, Истина, ТекстОшибки);
			
		// банк
		Банк =  ПолучитьОбъектТипаCML("Банк", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский",СтруктураПараметров.РасчетныйСчет.КоррСчет, , 	ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "Наименование", 		СтруктураПараметров.РасчетныйСчет.Банк, , 		ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "БИК",	 				СтруктураПараметров.РасчетныйСчет.БИК, Истина, 	ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Банк", Банк, Истина, ТекстОшибки);
		
		// БанкКорреспондент
		Если СтруктураПараметров.Свойство("БанкКорреспондент") Тогда
			БанкКорреспондент =  ПолучитьОбъектТипаCML("Банк", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(БанкКорреспондент, 	"СчетКорреспондентский",СтруктураПараметров.БанкКорреспондент.КоррСчет, , 	ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорреспондент, 	"Наименование", 		СтруктураПараметров.БанкКорреспондент.Банк, , 		ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорреспондент, 	"БИК", 				 	СтруктураПараметров.БанкКорреспондент.БИК, 	Истина,	ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, 	"БанкКорреспондент", 	БанкКорреспондент, 							Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "РеквизитыПолучателя",		РеквизитыПолучателя, 					Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "НазначениеПлатежа", 			СтруктураПараметров.НазначениеПлатежа, 	Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаОкончанияДействияСчета", СтруктураПараметров.СрокПлатежа, 		Истина, ТекстОшибки);
		
		Поставщик = ПолучитьОбъектТипаCML("СчетНаОплату.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Поставщик, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Поставщик, , ТекстОшибки);
		
		Покупатель = ПолучитьОбъектТипаCML("СчетНаОплату.Покупатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Покупатель, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Покупатель", Покупатель, , ТекстОшибки);
						
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("СчетНаОплату.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаИтог",		СтруктураПараметров.Сумма,  		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаНалогаИтог",	СтруктураПараметров.СуммаНДС,  		, 		ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"ЦенаВключаетНалог",СтруктураПараметров.ЦенаВключаетНДС,,		ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, 		"ИтогоПоДокументу", ИтогоПоДокументу, 					Истина,	ТекстОшибки);
        		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью,, ТекстОшибки);
			
		Руководитель = ПолучитьОбъектТипаCML("РеквизитыФизЛица", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(	Руководитель, 
								"ПолноеНаименование", 
								ЭлектронныеДокументыПереопределяемый.ФамилияИнициалыФизЛица(СтруктураПараметров.Руководитель), 
								Истина, 
								ТекстОшибки
							 );
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Руководитель", Руководитель, Истина, ТекстОшибки);   							 
		
		Бухгалтер = ПолучитьОбъектТипаCML("РеквизитыФизЛица", СтруктураПараметров.ВерсияСхемы);
        ЗаполнитьСвойствоXDTO(	Бухгалтер, 
								"ПолноеНаименование", 
								ЭлектронныеДокументыПереопределяемый.ФамилияИнициалыФизЛица(СтруктураПараметров.Бухгалтер), 
								Истина, 
								ТекстОшибки
							  );
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Бухгалтер", Бухгалтер, Истина, ТекстОшибки);   		
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымКлиента") 
		   И СтруктураПараметров.Свойство("ДатаПоДаннымКлиента")
		   И ЗначениеЗаполнено(СтруктураПараметров.НомерПоДаннымКлиента) 
		   И ЗначениеЗаполнено(СтруктураПараметров.ДатаПоДаннымКлиента) Тогда
		   	ДокументОснования = ПолучитьОбъектТипаCML("ДокументОснования",СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(ДокументОснования, "НомерДокументаОснования", 		СтруктураПараметров.НомерПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументОснования, "ДатаДокументаОснования", 			СтруктураПараметров.ДатаПоДаннымКлиента,  Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументОснования, "НаименованиеДокументаОснования", 	СтруктураПараметров.ДокументОснование, 	  Истина, ТекстОшибки);
			ДокументЭО.ДокументОснования.Добавить(ДокументОснования);
		КонецЕсли;
				
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, 		"КодОКВ", 	КодВалюты, ,				ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"Курс", 	СтруктураПараметров.Курс,, 	ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"НаименованиеСокращенноеОКВ", 	СтруктураПараметров.Валюта.Наименование,, 		ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"НаименованиеПолноеОКВ", 		СтруктураПараметров.Валюта.НаименованиеПолное,,	ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Валюта", 	Валюта, , 					ТекстОшибки); 
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЧастичнаяОплата") Тогда
			ЧастичнаяОплата = СтруктураПараметров.ЧастичнаяОплата;
		Иначе	
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
		
		ТаблицаТоваров = Новый ТаблицаЗначений;

		Если СтруктураПараметров.Свойство("ТаблицаТоваров") Тогда
			ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
		КонецЕсли;
		
		Если НЕ ЧастичнаяОплата Тогда
			Если ТаблицаТоваров.Количество()>0 Тогда 
				// Товары                                                                   
				Товары	= ПолучитьОбъектТипаCML("СчетНаОплату.Товары", СтруктураПараметров.ВерсияСхемы);
	      		Для Каждого ТекТовар Из ТаблицаТоваров Цикл
					Товар = ПолучитьОбъектТипаCML("СчетНаОплату.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
					
					ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
					ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения",СтруктураПараметров.ВерсияСхемы);
					СтруктураЕдИзм = Новый Структура();
					СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
					СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
					СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
					СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки); 
					ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);

					Если СтруктураПараметров.ЦенаВключаетНДС Тогда
						СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
					Иначе	
						СуммаБезНДС = ТекТовар.Сумма;
					КонецЕсли;	
					ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена,, ТекстОшибки);
					
					Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаБезНалога",	СуммаБезНДС,, 				ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаНалога", 	 	ТекТовар.СуммаНДС,, 		ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаОбщая", 		ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
					Если ЗначениеЗаполнено(ТекТовар.СуммаНДС) Тогда
						НалогПоСтроке 	= ПолучитьОбъектТипаCML("Налог",СтруктураПараметров.ВерсияСхемы);
						ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога",	"НДС", Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", 		ТекТовар.СуммаНДС, , ТекстОшибки);
						СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
						ЗаполнитьСвойствоXDTO(НалогПоСтроке, 	"ВеличинаСтавкиНалога", СтавкаНДСЧислом,, 	ТекстОшибки);
						Стоимость.Налог.Добавить(НалогПоСтроке);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, Истина, ТекстОшибки);
	
					Если ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
						СкидкиПоСтроке =  ПолучитьОбъектТипаCML("СчетНаОплату.Товары.Товар.Скидки",СтруктураПараметров.ВерсияСхемы);
						СкидкаПоСтроке =  ПолучитьОбъектТипаCML("Скидка",СтруктураПараметров.ВерсияСхемы);
						ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование",	"ОбщаяСкидка", 			Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма",			ТекТовар.СуммаСкидки, 	Истина, ТекстОшибки);
						СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
						ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", 	ТекТовар.СуммаСкидки, , 				ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.Сумма - ТекТовар.СуммаСкидки,, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
					КонецЕсли;

					Товары.Товар.Добавить(Товар);
				КонецЦикла;
				 				
				ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Товары",	Товары, , ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;	
		
		// Этапы графика оплаты
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") ТОгда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты; 
			Если ТаблицаЭтаповГрафикаОплаты.Количество()>0 Тогда
				МассивКолонок = Новый Массив();
				Для каждого Колонка из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
					
		ДокументЭО.Проверить();
		
		ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки(), СтруктураПараметров);
		Возврат Ложь;
   	КонецПопытки;
	
КонецФункции
     
// Возвращает результат успеха формирования файла ЭД Отчет о списании комиссионного товара.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//   Булево - признак успеха формирования
//
Функция СформироватьОтчетОСписанииКомиссионногоТовараCML(СтруктураПараметров) 
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, Ид, ДатаФормирования,
									|Номер, Дата, ВидЭД, НаправлениеЭД, ПолноеИмяФайла");
	ПроверитьЗаполнениеОбязательныхПараметров(СтруктураПараметров, СтруктураОбязательныхПолей);
	ТекстОшибки = "";
	Если СтруктураПараметров.Свойство("ТекстОшибки", ТекстОшибки) И ЗначениеЗаполнено(ТекстОшибки) Тогда // если уже были ошибки раньше
		Возврат Ложь
	КонецЕсли;

	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО 	= ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", 		СтруктураПараметров.Исполнитель, 					Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", 	XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", 		СтруктураПараметров.ВерсияСхемы, 					Истина, ТекстОшибки);
						
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", 	СтруктураПараметров.Ид, 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер",	СтруктураПараметров.Номер, 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", 	XMLДата(СтруктураПараметров.Дата), 	Истина, ТекстОшибки);
		
		Комитент = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Комитент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комитент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комитент", Комитент, , ТекстОшибки);
		
		Комиссионер = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Комиссионер", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комиссионер, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комиссионер", Комиссионер, , ТекстОшибки);
				
		Если ТаблицаТоваров.Количество()>0 Тогда 
			// Товары                                                                   
			Товары	= ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Товары", СтруктураПараметров.ВерсияСхемы);
      		Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения",СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки); 
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
    			ЗаполнитьСвойствоXDTO(Товар, "Цена", 	Окр(ТекТовар.СуммаСНДС/ТекТовар.Количество,2), 	Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Сумма",	ТекТовар.СуммаСНДС, 							Истина, ТекстОшибки);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Товары",	Товары, , ТекстОшибки);
		КонецЕсли;
			
        ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", 	СтруктураПараметров.Сумма, 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", 		СтруктураПараметров.ИтоговаяСтрока, Истина, ТекстОшибки);
					    				
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, 		"КодОКВ", 	КодВалюты, ,				ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"Курс", 	СтруктураПараметров.Курс,, 	ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"НаименованиеСокращенноеОКВ", 	СтруктураПараметров.Валюта.Наименование,, 		ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"НаименованиеПолноеОКВ", 		СтруктураПараметров.Валюта.НаименованиеПолное,,	ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Валюта", 	Валюта, , 					ТекстОшибки); 
		КонецЕсли;
				
		ДокументЭО.Проверить();
		
		ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки(), СтруктураПараметров);
		Возврат Ложь;
   	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Заказ поставщику.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//   Булево - признак успеха формирования
//
Функция СформироватьЗаказCML(СтруктураПараметров) 
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, Ид, ДатаФормирования,
									|Номер, Дата, ВидЭД, НаправлениеЭД, ПолноеИмяФайла");
	ПроверитьЗаполнениеОбязательныхПараметров(СтруктураПараметров, СтруктураОбязательныхПолей);
	ТекстОшибки = "";
	Если СтруктураПараметров.Свойство("ТекстОшибки", ТекстОшибки) И ЗначениеЗаполнено(ТекстОшибки) Тогда // если уже были ошибки раньше
		Возврат Ложь;
	КонецЕсли;

	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО 	= ПолучитьОбъектТипаCML("ЗаказКлиента",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", 		СтруктураПараметров.Исполнитель, 					Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", 	XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", 		СтруктураПараметров.ВерсияСхемы, 					Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Роль", 				СтруктураПараметров.Роль, 							Истина, ТекстОшибки);
						
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", 	СтруктураПараметров.Ид, 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер",	СтруктураПараметров.Номер, 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", 	XMLДата(СтруктураПараметров.Дата), 	Истина, ТекстОшибки);
		
		Исполнитель = ПолучитьОбъектТипаCML("ЗаказКлиента.Исполнитель", СтруктураПараметров.ВерсияСхемы);
		Если СтруктураПараметров.Роль = "Покупатель" Тогда
			СформироватьДанныеПоКонтрагентуCML(Исполнитель, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ИначеЕсли	СтруктураПараметров.Роль = "Продавец" Тогда
			СформироватьДанныеПоКонтрагентуCML(Исполнитель, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		КонецЕсли;	
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Исполнитель", Исполнитель, , ТекстОшибки);
		
		Заказчик = ПолучитьОбъектТипаCML("ЗаказКлиента.Заказчик", СтруктураПараметров.ВерсияСхемы);
		Если СтруктураПараметров.Роль = "Покупатель" Тогда
			СформироватьДанныеПоКонтрагентуCML(Заказчик, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ИначеЕсли	СтруктураПараметров.Роль = "Продавец" Тогда	
			СформироватьДанныеПоКонтрагентуCML(Заказчик, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		КонецЕсли;	
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Заказчик", Заказчик, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество()>0 Тогда 
			// Товары                                                                   
			Товары	= ПолучитьОбъектТипаCML("ЗаказКлиента.Товары", СтруктураПараметров.ВерсияСхемы);
      		Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("ЗаказКлиента.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения",СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки); 
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
			
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе	
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;	
				ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена,, ТекстОшибки);
				
				Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Стоимость,"СуммаБезНалога",	СуммаБезНДС,, 				ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Стоимость,"СуммаНалога", 	 	ТекТовар.СуммаНДС,, 		ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Стоимость,"СуммаОбщая", 		ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекТовар.СуммаНДС) Тогда
					НалогПоСтроке 	= ПолучитьОбъектТипаCML("Налог",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога",	"НДС", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", 		ТекТовар.СуммаНДС, , ТекстОшибки);
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, 	"ВеличинаСтавкиНалога", СтавкаНДСЧислом,, 	ТекстОшибки);
					Стоимость.Налог.Добавить(НалогПоСтроке);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, Истина, ТекстОшибки);

				Если ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
					СкидкиПоСтроке =  ПолучитьОбъектТипаCML("ЗаказКлиента.Товары.Товар.Скидки",СтруктураПараметров.ВерсияСхемы);
					СкидкаПоСтроке =  ПолучитьОбъектТипаCML("Скидка",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование", 	"ОбщаяСкидка", 			Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма",			ТекТовар.СуммаСкидки, 	Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Процент",		ТекТовар.ПроцентСкидки,	Истина, ТекстОшибки);
					СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", 	ТекТовар.СуммаСкидки, , 				ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.Сумма - ТекТовар.СуммаСкидки,, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
				КонецЕсли;

				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			 				
			ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Товары",	Товары, , ТекстОшибки);
		КонецЕсли;
								
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ЗаказКлиента.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаИтог",			СтруктураПараметров.Сумма,  	Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаНалогаИтог",		СтруктураПараметров.СуммаНДС,  	Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаБезСкидкиИтог",	ТаблицаТоваров.Итог("Сумма")-ТаблицаТоваров.Итог("СуммаСкидки"),,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаСкидкиИтог",		ТаблицаТоваров.Итог("СуммаСкидки"),,	ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"ЦенаВключаетНалог",	СтруктураПараметров.ЦенаВключаетНДС,,	ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, 		"ИтогоПоДокументу", 	ИтогоПоДокументу, 				Истина,	ТекстОшибки);
        		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью,, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено (СтруктураПараметров.НомерПоДаннымКлиента) Тогда
			ДокументОснование = ПолучитьОбъектТипаCML("ДокументОснования",СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НомерДокументаОснования", 		СтруктураПараметров.НомерПоДаннымКлиента);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "ДатаДокументаОснования", 			СтруктураПараметров.Дата);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НаименованиеДокументаОснования", 	"ЗаказПоставщику");
			ДокументЭО.ДокументОснования.Добавить(ДокументОснование);
		КонецЕсли;	
		
			
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, 		"КодОКВ", 	КодВалюты, ,				ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"Курс", 	СтруктураПараметров.Курс,, 	ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"НаименованиеСокращенноеОКВ", 	СтруктураПараметров.Валюта.Наименование,, 		ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"НаименованиеПолноеОКВ", 		СтруктураПараметров.Валюта.НаименованиеПолное,,	ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Валюта", 	Валюта, , 					ТекстОшибки); 
		КонецЕсли;
        						
		// Этапы графика оплаты
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") ТОгда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты; 
			Если ТаблицаЭтаповГрафикаОплаты.Количество()>0 Тогда
				МассивКолонок = Новый Массив();
				Для каждого Колонка из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Комментарий") И ЗначениеЗаполнено (СтруктураПараметров.Комментарий) Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО,"Комментарий",СтруктураПараметров.Комментарий,,ТекстОшибки); 
		КонецЕсли;

		ДокументЭО.Проверить();
		
		ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки(), СтруктураПараметров);
		Возврат Ложь;
   	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о продажах комиссионного товара.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//   Булево - признак успеха формирования
//
Функция СформироватьОтчетОПродажахКомиссионногоТовараCML(СтруктураПараметров) 
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, Ид, ДатаФормирования,
									|Номер, Дата, ВидЭД, НаправлениеЭД, ПолноеИмяФайла");
	ПроверитьЗаполнениеОбязательныхПараметров(СтруктураПараметров, СтруктураОбязательныхПолей);
	ТекстОшибки = "";
	Если СтруктураПараметров.Свойство("ТекстОшибки", ТекстОшибки) И ЗначениеЗаполнено(ТекстОшибки) Тогда // если уже были ошибки раньше
		Возврат Ложь
	КонецЕсли;

	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО 	= ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", 		СтруктураПараметров.Исполнитель, 					Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", 	XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", 		СтруктураПараметров.ВерсияСхемы, 					Истина, ТекстОшибки);
						
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", 	СтруктураПараметров.Ид, 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер",	СтруктураПараметров.Номер, 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", 	XMLДата(СтруктураПараметров.Дата), 	Истина, ТекстОшибки);
		
		Комитент = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Комитент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комитент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комитент", Комитент, , ТекстОшибки);
		
		Комиссионер = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Комиссионер", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комиссионер, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комиссионер", Комиссионер, , ТекстОшибки);
				
		Если ТаблицаТоваров.Количество()>0 Тогда 
			// Товары                                                                   
			Товары	= ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары", СтруктураПараметров.ВерсияСхемы);
      		Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения",СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки); 
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);

				ЗаполнитьСвойствоXDTO(Товар, "Цена", Окр(ТекТовар.СуммаПродажи/ТекТовар.Количество,2), Истина, ТекстОшибки);
				СуммыПоТовару = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары.Товар.СуммыПоТовару", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(СуммыПоТовару, "СуммаОбщая", 		ТекТовар.СуммаПродажи,	Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СуммыПоТовару, "СуммаНалога", 	ТекТовар.СуммаНДС, 		, 		ТекстОшибки);
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе	
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;	
				ЗаполнитьСвойствоXDTO(СуммыПоТовару, "СуммаБезНалога",СуммаБезНДС,,ТекстОшибки);
				Если ЗначениеЗаполнено(ТекТовар.СуммаНДС) Тогда
					НалогПоСтроке 	= ПолучитьОбъектТипаCML("Налог",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога",	"НДС", 				Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", 		ТекТовар.СуммаНДС, , 		ТекстОшибки);
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом,, ТекстОшибки);
					СуммыПоТовару.Налог.Добавить(НалогПоСтроке);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", 		СуммыПоТовару, 									Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЦенаКомитента", 		Окр(ТекТовар.СуммаСНДС/ТекТовар.Количество, 2),	Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаКомитента", 		ТекТовар.СуммаСНДС,								Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаВознаграждения", ТекТовар.СуммаВознаграждения,					, 		ТекстОшибки);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Товары",	Товары, , ТекстОшибки);
		КонецЕсли;
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаКомитентаИтог",		ТаблицаТоваров.Итог("СуммаСНДС"), 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаПродажиИтог", 		ТаблицаТоваров.Итог("СуммаПродажи"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаВознагражденияИтог", 	ТаблицаТоваров.Итог("СуммаВознаграждения"),	, 		ТекстОшибки);
		Если СтруктураПараметров.Свойство("Процент") И ЗначениеЗаполнено (СтруктураПараметров.Процент) Тогда
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "Процент", СтруктураПараметров.Процент,,ТекстОшибки); 
		КонецЕсли;	
    	ЗаполнитьСвойствоXDTO(ДокументЭО, 		"ИтогоПоДокументу", 		ИтогоПоДокументу, 							Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, 		"ИтогиПрописью", 			СтруктураПараметров.ИтоговаяСтрока, 		Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Услуга") И ЗначениеЗаполнено (СтруктураПараметров.Услуга) Тогда
			Услуга = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Услуга", СтруктураПараметров.ВерсияСхемы);
           	СформироватьДанныеПоТоваруCML(Услуга, СтруктураПараметров.Услуга, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
			Если СтруктураПараметров.Свойство("СуммаНДСВознаграждения") И  СтруктураПараметров.Свойство("СтавкаНДСВознаграждения") Тогда
					НалогПоСтроке = ПолучитьОбъектТипаCML("Налог",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога","НДС", 							Истина, 	ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", 	 СтруктураПараметров.СуммаНДСВознаграждения,, 	ТекстОшибки);
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(СтруктураПараметров.СтавкаНДСВознаграждения);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке,"ВеличинаСтавкиНалога", СтавкаНДСЧислом,, 	ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Услуга, 		"Налог", 				НалогПоСтроке,, 	ТекстОшибки);
			КонецЕсли;
       		ЗаполнитьСвойствоXDTO(ДокументЭО,"Услуга",Услуга,,ТекстОшибки);
		КонецЕсли;			
		
		Если СтруктураПараметров.Свойство("НачалоПериода") Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО,"ДатаНачала",СтруктураПараметров.НачалоПериода,,ТекстОшибки); 
		КонецЕсли;	
		
		Если СтруктураПараметров.Свойство("КонецПериода") Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО,"ДатаКонца",СтруктураПараметров.КонецПериода,,ТекстОшибки); 
		КонецЕсли;	
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, 		"КодОКВ", 	КодВалюты, ,				ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"Курс", 	СтруктураПараметров.Курс,, 	ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"НаименованиеСокращенноеОКВ", 	СтруктураПараметров.Валюта.Наименование,, 		ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"НаименованиеПолноеОКВ", 		СтруктураПараметров.Валюта.НаименованиеПолное,,	ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Валюта", 	Валюта, , 					ТекстОшибки); 
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ФормаОплаты") И ЗначениеЗаполнено (СтруктураПараметров.ФормаОплаты) Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО, "ФормаОплаты", СтруктураПараметров.ФормаОплаты,,ТекстОшибки); 
		КонецЕсли;	
		
		// Этапы графика оплаты
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") ТОгда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты; 
			Если ТаблицаЭтаповГрафикаОплаты.Количество()>0 Тогда
				МассивКолонок = Новый Массив();
				Для каждого Колонка из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Если СтруктураПараметров.Свойство("СпособРасчета") И ЗначениеЗаполнено (СтруктураПараметров.СпособРасчета) Тогда
			Если СтруктураПараметров.СпособРасчета = "Процент от разности суммы продажи и суммы комитента" Тогда
				ЗаполнитьСвойствоXDTO(ДокументЭО, "СпособРасчета", "От разницы",,ТекстОшибки); 
			ИначеЕсли СтруктураПараметров.СпособРасчета = "Процент от суммы продажи" Тогда
				ЗаполнитьСвойствоXDTO(ДокументЭО, "СпособРасчета", "От суммы",,ТекстОшибки); 
			КонецЕсли;
		КонецЕсли;	
		
		Если СтруктураПараметров.Свойство("ДатаОплаты") И ЗначениеЗаполнено (СтруктураПараметров.ДатаОплаты) Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаОплаты", СтруктураПараметров.ДатаОплаты,,ТекстОшибки); 
		КонецЕсли;	
			
		ДокументЭО.Проверить();
		
		ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки(), СтруктураПараметров);
		Возврат Ложь;
   	КонецПопытки;
	
КонецФункции
        
// Возвращает результат успеха формирования файла ЭД Акта выполненных работ.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//   Булево - признак успеха формирования
//
Функция СформироватьАктCML(СтруктураПараметров) 
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	// обязательные поля
	СтруктураОбязательныхПолей = Новый Структура("ТаблицаТоваров, Организация, Контрагент, Ид, ДатаФормирования,
									|Номер, Дата, ВидЭД, НаправлениеЭД, ПолноеИмяФайла");
	ПроверитьЗаполнениеОбязательныхПараметров(СтруктураПараметров, СтруктураОбязательныхПолей);
	ТекстОшибки = "";
	Если СтруктураПараметров.Свойство("ТекстОшибки", ТекстОшибки) И ЗначениеЗаполнено(ТекстОшибки) Тогда // если уже были ошибки раньше
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
		
	Попытка
		ДокументЭО 	= ПолучитьОбъектТипаCML("АктОПриемке",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", 		СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", 	XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", 		СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") Тогда
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид",		СтруктураПараметров.Ид,				Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", 	СтруктураПараметров.Номер, 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", 	XMLДата(СтруктураПараметров.Дата), 	Истина, ТекстОшибки);
		
		Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
        ЗаполнитьСвойствоXDTO(Валюта, 		"КодОКВ", 	КодВалюты, ,				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Валюта, 		"Курс", 	СтруктураПараметров.Курс,, 	ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Валюта, 		"НаименованиеСокращенноеОКВ", 	СтруктураПараметров.Валюта.Наименование,, 		ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Валюта, 		"НаименованиеПолноеОКВ", 		СтруктураПараметров.Валюта.НаименованиеПолное,,	ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Валюта", 	Валюта, , 					ТекстОшибки);
		
		// организация
		Контрагент =  ПолучитьОбъектТипаCML("АктОПриемке.Исполнитель",СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Исполнитель", Контрагент, , ТекстОшибки);
				
		// контрагент
		Контрагент =  ПолучитьОбъектТипаCML("АктОПриемке.Заказчик",СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Заказчик",	Контрагент, , ТекстОшибки);
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("АктОПриемке.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаОбщая", 		СтруктураПараметров.Сумма,, 								ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаНалога", 		СтруктураПараметров.СуммаНДС,, 								ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаБезНалога", 	СтруктураПараметров.Сумма - СтруктураПараметров.СуммаНДС,, 	ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"ЦенаВключаетНалог",СтруктураПараметров.ЦенаВключаетНДС,, 						ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, 		"ИтогоПоДокументу", ИтогоПоДокументу, ,											ТекстОшибки);
		
		Если ТаблицаТоваров.Количество()>0 Тогда 
			// Товары
			Товары	= ПолучитьОбъектТипаCML("АктОПриемке.Товары",СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("АктОПриемке.Товары.Товар",СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
							
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество,, ТекстОшибки);
				Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаБезНалога", ТекТовар.Сумма - ТекТовар.СуммаНДС,,ТекстОшибки);
				Иначе	
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаБезНалога", ТекТовар.Сумма,,ТекстОшибки);
				КонецЕсли;	
				ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена,,ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения",СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки); 
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
							
				Если ЗначениеЗаполнено(ТекТовар.СуммаНДС) Тогда
					НалогПоСтроке 	= ПолучитьОбъектТипаCML("Налог",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога",	"НДС", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", 		ТекТовар.СуммаНДС, Истина, ТекстОшибки);
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом,, ТекстОшибки);
					Стоимость.Налог.Добавить(НалогПоСтроке);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаСНДС) Тогда
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаОбщая", ТекТовар.СуммаСНДС,, ТекстОшибки);
    			КонецЕсли;
				
				ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, , ТекстОшибки);
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
					СкидкиПоСтроке =  ПолучитьОбъектТипаCML("АктОПриемке.Товары.Товар.Скидки",СтруктураПараметров.ВерсияСхемы);
					СкидкаПоСтроке =  ПолучитьОбъектТипаCML("Скидка",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование",	"ОбщаяСкидка", 			Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма",			ТекТовар.СуммаСкидки, 	Истина, ТекстОшибки);
					СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", 	ТекТовар.СуммаСкидки, , 				ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.Сумма - ТекТовар.СуммаСкидки,, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
				КонецЕсли;
				
				Если НЕ(ТаблицаТоваров.Колонки.Найти("Содержание")=Неопределено) 
					 и ЗначениеЗаполнено(ТекТовар.Содержание) ТОгда
					 	ЗаполнитьСвойствоXDTO(Товар,"Описание",ТекТовар.Содержание,,ТекстОшибки);
				КонецЕсли;
													
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Товары",	Товары, , ТекстОшибки);
		КонецЕсли;
			
		ТекстДокумента = ПолучитьОбъектТипаCML("АктОПриемке.ТекстДокумента",СтруктураПараметров.ВерсияСхемы);
			
		Заголовок = СтруктураПараметров.ДополнительнаяИнформацияШапки + Символы.ПС +//"<br>" + 
				"Мы, нижеподписавшиеся,  представитель ИСПОЛНИТЕЛЯ, с одной стороны и  представитель ЗАКАЗЧИКА с другой стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги):";
		ЗаполнитьСвойствоXDTO(ТекстДокумента, "Заголовок",	XMLСтрока(Заголовок), , ТекстОшибки);
		
		Описание =  СтруктураПараметров.ДополнительнаяИнформация;
		ЗаполнитьСвойствоXDTO(ТекстДокумента, "ОписаниеВыполненныхРабот", Описание, , ТекстОшибки);
		
		Претензии =  "Вышеперечисленные работы(услуги) выполнены полностью и в срок. Заказчик претензий по объему, качеству и срокам работ (услуг) не имеет.";
		ЗаполнитьСвойствоXDTO(ТекстДокумента, "Претензии", Претензии, ,ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ТекстДокумента", ТекстДокумента, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, ТекстОшибки);
		
		ДокументЭО.Проверить();
		
		ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки(), СтруктураПараметров);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД с каталогом товаров
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//   Булево - признак успеха формирования
//
Функция СформироватьКаталогCML(СтруктураПараметров)
	
	СтруктураОбязательныхПолей = Новый Структура("ТаблицаТоваров, Организация, Ид, ДатаФормирования, ПолноеИмяФайла");
	ПроверитьЗаполнениеОбязательныхПараметров(СтруктураПараметров, СтруктураОбязательныхПолей);
	
	ТекстОшибки = "";
	Если СтруктураПараметров.Свойство("ТекстОшибки", ТекстОшибки) И ЗначениеЗаполнено(ТекстОшибки) Тогда // если уже были ошибки раньше
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		КаталогЭО 	= ПолучитьОбъектТипаCML("Каталог", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(КаталогЭО, "ИдИсполнителя", 		СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "ДатаФормирования", 	XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "ВерсияСхемы", 		СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(КаталогЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		
		// Владелец
		Владелец =  ПолучитьОбъектТипаCML("Контрагент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Владелец, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "Владелец", Владелец, Истина, ТекстОшибки);
		
		// Товары
		ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
		Если ТаблицаТоваров.Количество()>0 Тогда 
			Товары	= ПолучитьОбъектТипаCML("Каталог.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("Каталог.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(КаталогЭО, 	"Товары",	Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Запись файла электронного документа
		КаталогЭО.Проверить();
		
		ВыгрузитьЭДвФайл(КаталогЭО, СтруктураПараметров.ПолноеИмяФайла);
	
		Возврат Истина;
		
	Исключение
		ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки(), СтруктураПараметров);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД с прайс-листом
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//   Булево - признак успеха формирования
//
Функция СформироватьПрайсЛистCML(СтруктураПараметров)
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	// обязательные поля
	СтруктураОбязательныхПолей = Новый Структура("ТаблицаТоваров, Организация, Ид, Валюта, ДатаФормирования, Дата, ВидЭД, НаправлениеЭД, ПолноеИмяФайла");
	ПроверитьЗаполнениеОбязательныхПараметров(СтруктураПараметров, СтруктураОбязательныхПолей);
	ТекстОшибки = "";
	Если СтруктураПараметров.Свойство("ТекстОшибки", ТекстОшибки) И ЗначениеЗаполнено(ТекстОшибки) Тогда // если уже были ошибки раньше
		Возврат Ложь;
	КонецЕсли;

	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		
		ПрайсЭО = ПолучитьОбъектТипаCML("ПрайсЛист", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ИдИсполнителя", 	СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ДатаФормирования", 	XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ВерсияСхемы", 		СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "Ид", 			СтруктураПараметров.Ид, 			Истина, ТекстОшибки);
		
		// Владелец
		Контрагент = ПолучитьОбъектТипаCML("Контрагент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "Владелец", Контрагент, Истина, ТекстОшибки);
		
		ИдТипаЦен = Строка(Новый УникальныйИдентификатор);

		// Предложения
		Если ТаблицаТоваров.Количество()>0 Тогда 
			Предложения = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения", СтруктураПараметров.ВерсияСхемы);
			
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Предложение = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения.Предложение", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Предложение, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				
				Цены 	= ПолучитьОбъектТипаCML("ПрайсЛист.Предложения.Предложение.Цены", СтруктураПараметров.ВерсияСхемы);
				Цена 	= ПолучитьОбъектТипаCML("ПрайсЛист.Предложения.Предложение.Цены.Цена", СтруктураПараметров.ВерсияСхемы);
				
				// ссылка на тип цен
				ЗаполнитьСвойствоXDTO(Цена, "ИдТипаЦены", 	ИдТипаЦен, 		Истина,ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Цена, "Цена", 		ТекТовар.Цена, 	Истина,ТекстОшибки);
												
				ЗаполнитьСвойствоXDTO(Цена, "МинКоличество", ТекТовар.Количество, 	, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки); 
				ЗаполнитьСвойствоXDTO(Цена, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				Цены.Цена.Добавить(Цена);
				ЗаполнитьСвойствоXDTO(Предложение, "Цены", Цены, Истина, ТекстОшибки);
				
				Предложения.Предложение.Добавить(Предложение);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ПрайсЭО, 	"Предложения",	Предложения, Истина, ТекстОшибки);
			
		КонецЕсли;
	
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ДействительноС",XMLДата(СтруктураПараметров.Дата), 	, ТекстОшибки);
		        		
		// ТипыЦен
		ТипыЦен = ПолучитьОбъектТипаCML("ПрайсЛист.ТипыЦен", СтруктураПараметров.ВерсияСхемы);
		ТипЦены	= ПолучитьОбъектТипаCML("ТипЦены", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ТипЦены, "Ид", 	ИдТипаЦен, Истина, 	ТекстОшибки); 
		
		Если СтруктураПараметров.Свойство("Описание") Тогда
			ЗаполнитьСвойствоXDTO(ТипЦены, "Описание", СтруктураПараметров.Описание, ,	ТекстОшибки);
		КонецЕсли;

		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта,  	"КодОКВ", 						КодВалюты, ,									ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта,  	"Курс", 						СтруктураПараметров.Курс,, 						ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 	"НаименованиеСокращенноеОКВ", 	СтруктураПараметров.Валюта.Наименование,, 		ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 	"НаименованиеПолноеОКВ", 		СтруктураПараметров.Валюта.НаименованиеПолное,,	ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТипЦены, 	"Валюта", 						Валюта, , 										ТекстОшибки); 
		КонецЕсли;
		
		ТипыЦен.ТипЦены.Добавить(ТипЦены);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ТипыЦен", ТипыЦен, , ТекстОшибки);
		
		ПрайсЭО.Проверить();
		
		ВыгрузитьЭДвФайл(ПрайсЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
		
	Исключение
		ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки(), СтруктураПараметров);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о продажах комиссионного товара.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//   Булево - признак успеха формирования
//
Функция СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров) 
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	СтруктураОбязательныхПолей = Новый Структура("ТаблицаТоваров, Организация, Контрагент, Ид, ДатаФормирования,
									|Номер, Дата, ВидЭД, НаправлениеЭД, ПолноеИмяФайла");
	ПроверитьЗаполнениеОбязательныхПараметров(СтруктураПараметров, СтруктураОбязательныхПолей);
	ТекстОшибки = "";
	Если СтруктураПараметров.Свойство("ТекстОшибки", ТекстОшибки) И ЗначениеЗаполнено(ТекстОшибки) Тогда // если уже были ошибки раньше
		Возврат Ложь;
	КонецЕсли;

	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО 	= ПолучитьОбъектТипаCML("ТОРГ12",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", 		СтруктураПараметров.Исполнитель, 					Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", 	XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", 		СтруктураПараметров.ВерсияСхемы, 					Истина, ТекстОшибки);
						
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", 	СтруктураПараметров.Ид, 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер",	СтруктураПараметров.Номер, 			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", 	XMLДата(СтруктураПараметров.Дата), 	Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ОКУД", 	"0330212", 							Истина, ТекстОшибки);

		Если СтруктураПараметров.Свойство("Валюта") Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, 		"КодОКВ", 						КодВалюты, Истина ,								ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"Курс", 						СтруктураПараметров.Курс,, 						ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"НаименованиеСокращенноеОКВ", 	СтруктураПараметров.Валюта.Наименование,, 		ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, 		"НаименованиеПолноеОКВ", 		СтруктураПараметров.Валюта.НаименованиеПолное,,	ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Валюта", 						Валюта, , 										ТекстОшибки); 
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("ТОРГ12.Грузоотправитель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузоотправитель, СтруктураПараметров, СтруктураПараметров.ТипГрузоотправителя, ТекстОшибки, СтруктураПараметров.ВерсияСхемы, "Грузоотправитель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузоотправитель", Грузоотправитель, , ТекстОшибки);

		Грузополучатель = ПолучитьОбъектТипаCML("ТОРГ12.Грузополучатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузополучатель, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы,"Грузополучатель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузополучатель", Грузополучатель, , ТекстОшибки);
			    			
		Организация = ПолучитьОбъектТипаCML("ТОРГ12.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Организация, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Организация, , ТекстОшибки);

		Контрагент = ПолучитьОбъектТипаCML("ТОРГ12.Плательщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Плательщик", Контрагент, , ТекстОшибки);

		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ТОРГ12.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"КоличествоЗаписей", 	ТаблицаТоваров.Количество(),, 		ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"КоличествоМест", 		ТаблицаТоваров.Количество(),, 		ТекстОшибки);
		Если СтруктураПараметров.ЦенаВключаетНДС Тогда
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаБезНДС", ТаблицаТоваров.Итог("Сумма") - ТаблицаТоваров.Итог("СуммаНДС"),,ТекстОшибки);
		Иначе	
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаБезНДС", ТаблицаТоваров.Итог("Сумма") 								,, ТекстОшибки);
		КонецЕсли;	
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаНДС", 			ТаблицаТоваров.Итог("СуммаНДС"),, 	ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаСУчетомНДС", 		ТаблицаТоваров.Итог("СуммаСНДС"),, 	ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, 		"ИтогоПоДокументу", 	ИтогоПоДокументу, ,					ТекстОшибки);
		
		ИтогиПрописью = ПолучитьОбъектТипаCML("ТОРГ12.ИтогиПрописью", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоЗаписейПрописью", ЧислоПрописью(ТаблицаТоваров.Количество(),,",,,,,,,,0"),, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоМестПрописью", 	  ЧислоПрописью(ТаблицаТоваров.Количество(),,",,,,,,,,0"),, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "СуммаВсегоПрописью", ЭлектронныеДокументыПереопределяемый.СуммаПрописью(ТаблицаТоваров.Итог("СуммаСНДС"), КодВалюты),, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, 	 "ИтогиПрописью", ИтогиПрописью,, ТекстОшибки);
			
		Если ТаблицаТоваров.Количество()>0 Тогда 
			// Товары                                                                   
			ПП = 0;
			Товары	= ПолучитьОбъектТипаCML("ТОРГ12.Товары", СтруктураПараметров.ВерсияСхемы);
      		Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				ПП = ПП + 1;
				Товар = ПолучитьОбъектТипаCML("ТОРГ12.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "НомерПП", ПП,, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения",СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки); 
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);

				ЗаполнитьСвойствоXDTO(Товар, "Количество",	ТекТовар.Количество,, 						ТекстОшибки);
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе	
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;	
				ЗаполнитьСвойствоXDTO(Товар, "Цена",		Окр(СуммаБезНДС/ТекТовар.Количество,2),, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаБезНДС", СуммаБезНДС, 	, 						ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаСУчетомНДС", ТекТовар.СуммаСНДС,, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекТовар.СуммаНДС) Тогда
					НалогПоСтроке 	= ПолучитьОбъектТипаCML("Налог",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога",	"НДС", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", 		ТекТовар.СуммаНДС, Истина, ТекстОшибки);
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом,, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "Налог",	НалогПоСтроке,,	ТекстОшибки);
				КонецЕсли;
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			 
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, 	"Товары",	Товары, , ТекстОшибки);
		КонецЕсли;
		                                    	
		ДокументЭО.Проверить();
		
		ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки(), СтруктураПараметров);
		Возврат Ложь;
   	КонецПопытки;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ЗАПОЛНЕНИЯ ФАЙЛОВ

Процедура ВыгрузитьЭДвФайл(ЭД, ИмяФайла);
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ЭД,,,, НазначениеТипаXML.Явное);
	НоваяЗаписьXML.Закрыть();
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеОбязательныхПараметров(СтруктураПараметров, СтруктураОбязательныхПолей)
	
	ТекстОшибки = "";
	Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		Значение = Неопределено;
		Если СтруктураПараметров.Свойство(КлючЗначение.Ключ, Значение) Тогда
			Если НЕ ЗначениеЗаполнено(Значение) Тогда 
				Текст = НСтр("ru = '<%1> значение не заполнено!'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
				ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки+Символы.ПС+Текст, Текст);
			КонецЕсли;
			// проверим кол-во строк в таблице значений
			Если ВРег(КлючЗначение.Ключ) = ВРег("ТаблицаТоваров")
				И ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
				Если Значение.Количество() = 0 Тогда
					Текст = НСтр("ru = 'Обязательная таблица <%1> не содержит строк!'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
					ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки+Символы.ПС+Текст, Текст);
				Иначе // проверим обязательные колонки в таблице
					ИменаКолонок = Новый Структура("Ид, Наименование, Номенклатура, Характеристика, БазоваяЕдиницаКод, УпаковкаКод"); 
					Для Каждого ТекКолонка Из ИменаКолонок Цикл
						ИмяКолонки = ТекКолонка.Ключ;
						Если Значение.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
							Текст = НСтр("ru = 'Отсутствует обязательная колонка <%1> в таблице <%2>!'");
							Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяКолонки, КлючЗначение.Ключ);
							ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки+Символы.ПС+Текст, Текст);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Текст = НСтр("ru = 'Не передан обязательный параметр: <%1>!'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки+Символы.ПС+Текст, Текст);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	СтруктураПараметров.Вставить("ТекстОшибки", ТекстОшибки);

КонецПроцедуры

Процедура СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, ВидКонтрагента, ТекстОшибки, ВерсияСхемы="4.01", ИмяСвойства=Неопределено)
	
	Если Не ЗначениеЗаполнено(ИмяСвойства) Тогда
		ИмяСвойства = ВидКонтрагента;
	КонецЕсли;
	
	ДанныеКонтрагента = Неопределено;
	Если НЕ СтруктураПараметров.Свойство(ИмяСвойства, ДанныеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(ДанныеКонтрагента);
	ИдКонтрагента = ЭлектронныеДокументыПереопределяемый.ПолучитьИДКонтрагента(ДанныеКонтрагента, ВидКонтрагента);
	ЗаполнитьСвойствоXDTO(Контрагент, "Ид", ИдКонтрагента, Истина, ТекстОшибки);
	
	// Заполнение реквизитов юридического или физического лица
	ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента);
	
	ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
	ПолноеНаименование = "";
	ДанныеЮрФизЛица.Свойство("ОфициальноеНаименование", ПолноеНаименование);
	
	Если НЕ ЗначениеЗаполнено(ПолноеНаименование) Тогда
		ПолноеНаименование = ?(ЗначениеЗаполнено(ДанныеЮрФизЛица.ПолноеНаименование), ДанныеЮрФизЛица.ПолноеНаименование, ДанныеЮрФизЛица.Представление);
	КонецЕсли;
	
	РеквизитыКонтрагентаИмя  = ?(ЭтоФизЛицо, "ФизЛицо", "ЮрЛицо");
	РеквизитыКонтрагентаXDTO = ПолучитьОбъектТипаCML("Контрагент."+РеквизитыКонтрагентаИмя, ВерсияСхемы);
	
	ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ПолноеНаименованиеИмя, ПолноеНаименование,Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ИНН", ДанныеЮрФизЛица.ИНН,,ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "КПП", ДанныеЮрФизЛица.КПП,,ТекстОшибки);
		
	Если НЕ ЭтоФизЛицо Тогда
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ОКПО", ДанныеЮрФизЛица.КодПоОКПО, , ТекстОшибки);
	КонецЕсли;
  
	// Юр.адрес или адрес регистрации
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ЮридическийАдрес) Тогда
		
		ЮридическийАдресИмя  = ?(ЭтоФизЛицо, "АдресРегистрации", "ЮридическийАдрес");
		ЮридическийАдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);
		
		ЗаполнитьСвойствоXDTO(ЮридическийАдресXDTO, "Представление", ДанныеЮрФизЛица.ЮридическийАдрес, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ЮридическийАдресИмя, ЮридическийАдресXDTO, , ТекстОшибки);
		
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Контрагент, РеквизитыКонтрагентаИмя, РеквизитыКонтрагентаXDTO, , ТекстОшибки);

	// РасчетныеСчета
	РасчСчет = Неопределено;
	Если ((ВидКонтрагента = "Организация"  И СтруктураПараметров.Свойство("РасчетныйСчетОрганизации", РасчСчет)) 
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетКонтрагента", РасчСчет))
		ИЛИ (ВидКонтрагента = "Организация"  И СтруктураПараметров.Свойство("РасчетныйСчетГрузоотправителя", РасчСчет)) 
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетГрузоотправителя", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетГрузополучателя", РасчСчет)))
		И ЗначениеЗаполнено(РасчСчет) Тогда
		
		РасчетныеСчета 	= ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ВерсияСхемы);
		РасчетныйСчет	= ПолучитьОбъектТипаCML("РасчетныйСчет", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(РасчетныйСчет, "НомерСчета", РасчСчет.НомерСчета, Истина, ТекстОшибки);
		
		// банк
		Банк =  ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский", РасчСчет.Банк.КоррСчет, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "Наименование", РасчСчет.Банк.Наименование, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "БИК", РасчСчет.Банк.Код, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РасчетныйСчет, "Банк", Банк, Истина, ТекстОшибки);
		// банк корреспондент
		Если ЗначениеЗаполнено(РасчСчет.БанкДляРасчетов) Тогда
			БанкКорр = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(БанкКорр, "СчетКорреспондентский", РасчСчет.БанкДляРасчетов.КоррСчет, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорр, "Наименование", РасчСчет.БанкДляРасчетов.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорр, "БИК", РасчСчет.БанкДляРасчетов.Код, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РасчетныйСчет, "БанкКорреспондент", БанкКорр, , ТекстОшибки);
		КонецЕсли;
		
		РасчетныеСчета.РасчетныйСчет.Добавить(РасчетныйСчет);
		ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныеСчета", РасчетныеСчета, , ТекстОшибки);
	КонецЕсли;
	
	// Адрес
	Если ТипЗнч(ДанныеЮрФизЛица) = Тип("Структура") И ДанныеЮрФизЛица.Свойство("ФактическийАдрес") И ЗначениеЗаполнено(ДанныеЮрФизЛица.ФактическийАдрес) Тогда
		АдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", ДанныеЮрФизЛица.ФактическийАдрес, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресXDTO, , ТекстОшибки);
	КонецЕсли;
	
	//Контакты организации
	Если (ВидКонтрагента = "Организация") Тогда
		ТаблицаКонтактов = ЭлектронныеДокументыПереопределяемый.ПолучитьКонтактнуюИнформацию(ДанныеКонтрагента);
		Если ТаблицаКонтактов.Количество()>0 Тогда
			Контакты = ПолучитьОбъектТипаCML("Контрагент.Контакты", ВерсияСхемы);
			ЕстьКонтакты = Ложь;
			Для Каждого СтрокаКонтакта из ТаблицаКонтактов Цикл
				Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ВерсияСхемы);    
				ТекстОшибки = "";
				Если СтрокаКонтакта.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","EmailОрганизации") Тогда
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Почта");
					ЗаполнитьСвойствоXDTO(Контакт, "Тип", Тип, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, 
										  "Комментарий", 
										  СтрокаКонтакта.Комментарий
										  ,
										  , 
										  ТекстОшибки
										 );
					ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
				ИначеЕсли СтрокаКонтакта.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонОрганизации") Тогда
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Телефон рабочий");
					ЗаполнитьСвойствоXDTO(Контакт, "Тип",Тип,Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, 
										  "Комментарий", 
										  СтрокаКонтакта.Комментарий
										  ,
										  , 
										  ТекстОшибки
										 );
					ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
				ИначеЕсли СтрокаКонтакта.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ФаксОрганизации") Тогда
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Факс");
					ЗаполнитьСвойствоXDTO(Контакт, "Тип",Тип,Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, 
										  "Комментарий", 
										  СтрокаКонтакта.Комментарий
										  ,
										  , 
										  ТекстОшибки
										 );
					ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
				КонецЕсли;
				Если ТекстОшибки="" Тогда
					Контакты.Контакт.Добавить(Контакт);
					ЕстьКонтакты = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьКонтакты Тогда
				ЗаполнитьСвойствоXDTO(Контрагент, "Контакты",	Контакты, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли
	  
КонецПроцедуры

Процедура СформироватьДанныеПоТоваруCML(Товар, СтруктураПараметров, ТекстОшибки, ВерсияСхемы="4.01")
	
	ЗаполнитьСвойствоXDTO(Товар, "Ид", СтруктураПараметров.Ид,Истина,ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Товар, "Артикул",СтруктураПараметров.Артикул,,ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Товар, "Наименование",СтруктураПараметров.Наименование, Истина,ТекстОшибки);

	Если ЗначениеЗаполнено(СтруктураПараметров.БазоваяЕдиницаКод) Тогда
		БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код", СтруктураПараметров.БазоваяЕдиницаКод, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Наименование", СтруктураПараметров.БазоваяЕдиницаНаименование,,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное",СтруктураПараметров.БазоваяЕдиницаНаименованиеПолное,,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение", СтруктураПараметров.БазоваяЕдиницаМеждународноеСокращение,,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, ТекстОшибки);
	КонецЕсли;
	
	Если Не (СтруктураПараметров.Владелец().Колонки.Найти("ДополнительныеРеквизиты")=Неопределено) Тогда
		ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ВерсияСхемы);
		Для Каждого Элемент Из СтруктураПараметров.ДополнительныеРеквизиты Цикл
			ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", Элемент.Ключ, Истина, ТекстОшибки);
			Для Каждого ЭлементМассива ИЗ Элемент.Значение Цикл
				ЗначениеРеквизита.Значение.Добавить(ЭлементМассива)
			КонецЦикла;
			Товар.ДополнительныеРеквизиты.Добавить(ЗначениеРеквизита);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, СтруктураПараметров, ТекстОшибки, МассивКолонок)
	                                   
	Для каждого Колонка из МассивКолонок Цикл
		Если Колонка = "ВидОплаты" ТОгда
	
			Если СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ВариантыОплатыКлиентом", "Аванс (до обеспечения)")
             ИЛИ СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ВариантыОплатыПоставщику", "Аванс (до подтверждения)") Тогда
				ВариантОплаты = "Аванс";
			ИначеЕсли СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ВариантыОплатыКлиентом", "Кредит (после отгрузки)") 
				  ИЛИ СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ВариантыОплатыПоставщику", "Кредит (после поступления)") Тогда
				ВариантОплаты = "Кредит";
			ИначеЕсли СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ВариантыОплатыКлиентом", "Предоплата (до отгрузки)")
			  	ИЛИ СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ВариантыОплатыПоставщику", "Предоплата (до поступления)") Тогда
				ВариантОплаты = "Предоплата";
    		КонецЕсли;
	
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ВидОплаты",	 ВариантОплаты,							  Истина, ТекстОшибки);
		ИначеЕсли Колонка = "ДатаПлатежа" ТОгда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ДатаПлатежа",	 XMLДата(СтруктураПараметров.ДатаПлатежа),Истина, ТекстОшибки);
		ИначеЕсли Колонка = "ПроцентПлатежа" ТОгда	
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ПроцентПлатежа",СтруктураПараметров.ПроцентПлатежа,	  Истина, ТекстОшибки);
		ИначеЕсли Колонка = "СуммаПлатежа" ТОгда		
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"СуммаПлатежа",	 СтруктураПараметров.СуммаПлатежа,		  Истина, ТекстОшибки);
		КонецЕсли;	
	КонецЦикла;	
		
КонецПроцедуры

Процедура СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураПараметров, ТекстОшибки)
	
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Код", 			СтруктураПараметров.ЕдиницаИзмеренияКод,,ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Наименование", СтруктураПараметров.ЕдиницаИзмеренияНаименование,,ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Коэффициент", 	СтруктураПараметров.Коэффициент,,ТекстОшибки);
	
КонецПроцедуры

// Заполняет свойство объекта XDTO.
//
// Параметры
//  ОбъектXDTO  – объект заполнения,
// 	ИмяСвойства - свойство объекта,
//  Значение 	- устанавливаемое значение,
//  Обязательное - булево - признак обязательности заполнения свойства,
//  ТекстОшибки - строка - текст ошибки в случае неудачного заполнения
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение, Обязательное = Ложь, ТекстОшибки = "")
	
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Иначе                                 
		Если ЗначениеЗаполнено(Значение) Тогда
			ОбъектXDTO.Установить(ИмяСвойства, Значение);
		Иначе
			Если Обязательное Тогда
				Текст = НСтр("ru = 'Ошибка заполнения обязательного поля ""%1""!'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяСвойства);
				ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки+Символы.ПС+Текст, Текст);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция XMLЧисло(Значение)
	
	Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	
КонецФункции // () 

Функция XMLДатаВремя(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd'T'ЧЧ:мм:сс");
	КонецЕсли;	
	
	Возврат "0001-01-01T00:00:00";
		
КонецФункции // () 

Функция XMLДата(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Возврат "0001-01-01";
		
КонецФункции // () 

// Возвращает идентификационный номер электронного документа.
//
// Параметры:
// СсылкаНаОбъект - ссылка на электронный документ, идентификационный номер которого необходимо получить,
// ИДОтправителя - строка, идентификационный номер отправителя электронного документа, 
// НомерВерсии - число, номер версии электронного документа.
//
// Возвращаемое значение:
//   строка формата "ИдОтправителя#ИДСсылкиОбъектаИБ##НомерВерсии"
//
Функция ВернутьИдЭД(СсылкаНаОбъект, ИдОтправителя, НомерВерсии) Экспорт
	
	ИдЭД = ИдОтправителя+"#"+СсылкаНаОбъект.УникальныйИдентификатор()+"##"+НомерВерсии;
	
	Возврат ИдЭД;
	
КонецФункции

Функция ВернутьНомерВерсииИзИдЭД(ИдОтправителя)
	
	НомерВерсии = 0;
	НачПозиция = Найти(ИдОтправителя, "##");
	Если НачПозиция>0 Тогда
		НомерВерсии = Сред(ИдОтправителя, НачПозиция+2, СтрДлина(ИдОтправителя)-(НачПозиция+1));
	КонецЕсли;
	
	Возврат НомерВерсии;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ CML

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьТипЗначенияCML(Тип, ВерсияСхемы="4.02") Экспорт

	Попытка
		ТипЗначения = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", Тип);
	Исключение
		ТипЗначения = Неопределено;
	КонецПопытки; 		
	
	Возврат ТипЗначения;

КонецФункции // ПолучитьТип()
 
Функция ПолучитьЗначениеТипаCML(Тип, Значение) Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипЗначения = ПолучитьТипЗначенияCML(Тип);
	Иначе
		ТипЗначения = Тип;
	КонецЕсли;		
	
	Если ТипЗначения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	НовоеЗначение = ФабрикаXDTO.Создать(ТипЗначения, Значение);
		
	Возврат НовоеЗначение;
	
КонецФункции // ПолучитьОбъектТипа()

Функция ПолучитьТипОбъектаCML(Тип,ВерсияСхемы) Экспорт

	МассивПути = СтрРазделить(Тип,".");
	
	ПервыйЭлемент = МассивПути[0];
	Если (Лев(ПервыйЭлемент,1) = "{") и  (Прав(ПервыйЭлемент,1) = "}") Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент)-2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;	
		
	МассивПути.Удалить(0);
	
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		ТипОбъекта = Свойство.Тип;
		
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки; 		

	КонецЦикла;
	
	Возврат ТипОбъекта;

КонецФункции // ПолучитьТип()
 
Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы="4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип,ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;		
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
		
	Возврат НовыйОбъект;
	
КонецФункции // ПолучитьОбъектТипа()

Процедура ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки, СтруктураПараметров)
	
	ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки+Символы.ПС+ОписаниеОшибки, ОписаниеОшибки);
	Сообщить(НСтр("ru='Ошибка формирования электронного документа!'"), СтатусСообщения.ОченьВажное);
	ТекстОшибки = СтрЗаменить(ТекстОшибки, """", """""");
	Сообщить(НСтр("ru=""" + ТекстОшибки + """"), СтатусСообщения.Важное);
	СтруктураПараметров.Вставить("ТекстОшибки", ТекстОшибки);
	
КонецПроцедуры	
///////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ РАЗБОРА ФАЙЛОВ

Функция ИнициализироватьДеревоРазбора()
	
	ДеревоРазбора = Новый ДеревоЗначений;
	ДеревоРазбора.Колонки.Добавить("ТипОбъекта");
	ДеревоРазбора.Колонки.Добавить("СсылкаНаОбъект");
	ДеревоРазбора.Колонки.Добавить("ОписаниеТипа");
	ДеревоРазбора.Колонки.Добавить("ИндексСтроки");
	ДеревоРазбора.Колонки.Добавить("Реквизит");
	ДеревоРазбора.Колонки.Добавить("ЗначениеРеквизита");
	ДеревоРазбора.Колонки.Добавить("ОписаниеОбъекта");
	ДеревоРазбора.Колонки.Добавить("ВидЭД");
	ДеревоРазбора.Колонки.Добавить("ИД");
	ДеревоРазбора.Колонки.Добавить("НаправлениеЭД");
	
	Возврат ДеревоРазбора;
	
КонецФункции

// Разбирает файл данных электронного документа, создает/изменяет объекты ИБ по данным ЭД.
// 
// Параметры:
// СтруктураПараметров - структура параметров для разбора электронного документа, 
// ДеревоРазбора - дерево значений, структура данных ранее разобранных ЭД.
//
// Возвращаемое значение:
//   структура параметров с реквизитами созданных/измененных объектов ИБ
//
Функция РазобратьФайлДанных(СтруктураПараметров, ДеревоРазбора = Неопределено) Экспорт
	
	Если ДеревоРазбора = Неопределено Тогда
		ДеревоРазбора = ИнициализироватьДеревоРазбора();
	КонецЕсли;
	
	Возврат ПолучитьДанныеИзФайла(СтруктураПараметров, ДеревоРазбора);
	
КонецФункции

// Получает данные электронного документа из файла, заполняет дерево значений для загрузки в ИБ,
// создает/изменяет необходимые объекты ИБ.
// 
// Параметры:
// СтруктураПараметров - структура параметров для разбора электронного документа, 
// ДеревоРазбора - дерево значений, структура данных для загрузки в ИБ,
// НаправлениеЭД - направление электронного документа, требующего разбора.
//
// Возвращаемое значение:
//   структура параметров с реквизитами созданных/измененных объектов ИБ
//
Функция ПолучитьДанныеИзФайла(СтруктураПараметров, ДеревоРазбора, НаправлениеЭД = Неопределено)
	
	Если НЕ СтруктураПараметров.Свойство("ПолноеИмяФайла") Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВладелецЭД") Тогда
		СсылкаНаВладельца = СтруктураПараметров.ВладелецЭД;
	Иначе
		СсылкаНаВладельца = Неопределено;
	КонецЕсли;
	
	НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НаправлениеЭД = Неопределено Тогда
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	КонецЕсли;
	НовыйЭД.НаправлениеЭД = НаправлениеЭД;
	
	Результат = ПрочитатьФайлCMLпоXDTO(СтруктураПараметров.ПолноеИмяФайла, ДеревоРазбора, НовыйЭД, истина);
	Если Результат Тогда
		// заполним ссылки на объекты из дерева соответствий, если ссылок нет, тогда будем создавать объекты
		ОшибкаЗаписи = Ложь;
		ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, ОшибкаЗаписи);
		
		Попытка
			СсылкаНаВладельца = ЭлектронныеДокументыПереопределяемый.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоРазбора, СсылкаНаВладельца);
		Исключение
			ОшибкаЗаписи = Истина;
		КонецПопытки;
		
		// дозаполняем структуру параметров из файла данных
		СтруктураПараметров.Вставить("ВладелецЭД", 		СсылкаНаВладельца);
		СтруктураПараметров.Вставить("ВидЭД", 			НовыйЭД.ВидЭД);
		СтруктураПараметров.Вставить("НомерЭД", 		НовыйЭД.ИД);
		НомерВерсииЭД = ВернутьНомерВерсииИзИдЭД(НовыйЭД.ИД);
		Попытка
			НомерВерсииЭД = Число(НомерВерсииЭД);
		Исключение
		КонецПопытки;
		СтруктураПараметров.Вставить("НомерВерсииЭД", 	НомерВерсииЭД);
		СтруктураПараметров.Вставить("НаправлениеЭД", 	НовыйЭД.НаправлениеЭД);
		СтруктураПараметров.Вставить("НомерДокументаОтправителя", 	ПолучитьРеквизитШапкиЭД(НовыйЭД, "Номер"));
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя", 	ПолучитьРеквизитШапкиЭД(НовыйЭД, "Дата"));
		ОрганизацияПолучатель = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
		Если ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда 
			СтруктураПараметров.Вставить("Организация", ОрганизацияПолучатель);
		Иначе
			
		КонецЕсли;
		СтруктураПараметров.Вставить("Контрагент",	ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент", ДеревоРазбора));
		СтруктураПараметров.Вставить("Загружен", 	НЕ ОшибкаЗаписи); // данные загрузились
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПрочитатьФайлCMLпоXDTO(ИмяФайла, ДеревоРазбора, НовыйЭД, ПоказыватьОшибки=Ложь)
	
	//Открытие и обработка файла
	ОбъектXML = Новый ЧтениеXML;
	Ошибка = Ложь;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		// определим как обрабатывать
		Если ЭД.Тип() = ПолучитьТипЗначенияCML("Каталог","4.02") Тогда
			ПрочитатьКаталогXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист","4.02") Тогда
			ПрочитатьПрайсXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке","4.02") Тогда
			ПрочитатьАктОПриемкеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);	
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12","4.02") Тогда
			ПрочитатьНакладнуюXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);		
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату","4.02") Тогда
			ПрочитатьСчетНаОплатуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);			
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара","4.02") Тогда
			ПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);			
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара","4.02") Тогда
			ПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);				
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента","4.02") Тогда
			ПрочитатьЗаказXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);				
		Иначе
			Если ЭлектронныеДокументыПереопределяемый.ДоступнаРольПолныеПрава() Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип ЭД при чтении данных из файла %1!'"), ИмяФайла);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;	
			Ошибка = Истина;
		КонецЕсли;
		ОбъектXML.Закрыть();
	Исключение
		ОбъектXML.Закрыть();		
		Если ЭлектронныеДокументыПереопределяемый.ДоступнаРольПолныеПрава() ИЛИ ПоказыватьОшибки Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ИмяФайла, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
		Возврат Ложь;
	КонецПопытки;
	
	Возврат НЕ Ошибка;
	
	
КонецФункции
 
// Получает ключевые данные файла из заголовка электронного документа с помощью XDTO-пакета.
//
// Параметры:
// ИмяФайла - строка, путь к файлу, данные которого надо получить.
//
// Возвращаемое значение:
//   структура параметров с реквизитами электронного документа
//
Функция ПрочитатьШапкуФайлаCMLпоXDTO(ИмяФайла) Экспорт
	
	//Открытие и обработка файла
	ОбъектXML = Новый ЧтениеXML;
	СтруктураПараметров = Новый Структура;
	ИдЭД = Неопределено;
	ВидЭД = Неопределено;
	Отправитель = Неопределено;
	НомерДокументаОтправителя = Неопределено;
	ДатаДокументаОтправителя = Неопределено;
	СтруктураУчастников = Новый Структура;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ОбъектXML.Закрыть();
		
		ИдЭД = ЭД.Ид;
		// определим как обрабатывать
		Если ЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке","4.02") Тогда
			ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
			Отправитель = "Продавец";
			ПризнакПродавца = Истина;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
		  	Ошибка = ложь;
			ПрочитатьДанныеКонтрагента(ЭД.Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ПрочитатьДанныеКонтрагента(ЭД.Заказчик,    ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент", 	ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент", ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12","4.02") Тогда
			ВидЭД = Перечисления.ВидыЭД.Накладная;
			Отправитель = "Продавец";
			ПризнакПродавца = Истина;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
		  	Ошибка = ложь;
			ПрочитатьДанныеКонтрагента(ЭД.Поставщик,  ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ПрочитатьДанныеКонтрагента(ЭД.Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент", 	ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату","4.02") Тогда
			ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
			Отправитель = "Продавец";
			ПризнакПродавца = Истина;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
		  	Ошибка = ложь;
			ПрочитатьДанныеКонтрагента(ЭД.Поставщик,  ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ПрочитатьДанныеКонтрагента(ЭД.Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент", 	ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));	
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара","4.02") Тогда
			ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
			Отправитель = "Покупатель";
			ПризнакПродавца = Ложь;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
		  	Ошибка = ложь;
			ПрочитатьДанныеКонтрагента(ЭД.Комитент,  	ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			ПрочитатьДанныеКонтрагента(ЭД.Комиссионер, 	ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент", 	ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));	
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара","4.02") Тогда
			ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
			Отправитель = "Покупатель";
			ПризнакПродавца = Ложь;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
		  	Ошибка = ложь;
			ПрочитатьДанныеКонтрагента(ЭД.Комитент,  	ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			ПрочитатьДанныеКонтрагента(ЭД.Комиссионер, 	ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент", 	ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));		
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента","4.02") Тогда
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Если ЭД.Роль = "Продавец" Тогда
				ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
				Отправитель = "Продавец";
				ПризнакПродавца = Истина;
				ПрочитатьДанныеКонтрагента(ЭД.Заказчик,  	ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
				ПрочитатьДанныеКонтрагента(ЭД.Исполнитель,	ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ИначеЕсли ЭД.Роль = "Покупатель" Тогда	
				ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
				Отправитель = "Покупатель";
				ПризнакПродавца = Ложь;
				ПрочитатьДанныеКонтрагента(ЭД.Заказчик,  	ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
				ПрочитатьДанныеКонтрагента(ЭД.Исполнитель,	ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			КонецЕсли;	
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			Ошибка = ложь;
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент", 	ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));		
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("Каталог","4.02") Тогда
			ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
			ДатаДокументаОтправителя  = ЭД.ДатаФормирования;
			ПризнакПродавца = Истина;
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист","4.02") Тогда
			ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
			ПризнакПродавца = Истина;
			ДатаДокументаОтправителя  = ЭД.ДействительноС;
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип ЭД при чтении данных из файла %1!'"), ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		СтруктураПараметров.Вставить("НомерЭД", ИдЭД);
		СтруктураПараметров.Вставить("ВидЭд", 	ВидЭД);
		НомерВерсииЭД = ВернутьНомерВерсииИзИдЭД(ИдЭД);
		Попытка
			НомерВерсииЭД = Число(НомерВерсииЭД);
		Исключение
		КонецПопытки;
		СтруктураПараметров.Вставить("НомерВерсииЭД", 	НомерВерсииЭД);
		СтруктураПараметров.Вставить("ПризнакПродавца", ПризнакПродавца);
		СтруктураПараметров.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя",  ДатаДокументаОтправителя);
		Если СтруктураУчастников.Свойство("Организация") Тогда
			СтруктураПараметров.Вставить("Организация",  СтруктураУчастников.Организация);
		КонецЕсли;
		Если СтруктураУчастников.Свойство("Контрагент") Тогда
			СтруктураПараметров.Вставить("Контрагент",  СтруктураУчастников.Контрагент);
		КонецЕсли;
	Исключение
		ОбъектXML.Закрыть();		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ИмяФайла, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ПрочитатьАктОПриемкеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ИД 		= ЭД.Ид;
	НовыйЭД.ВидЭД 	= Перечисления.ВидыЭД.АктВыполненныхРабот;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер",		 ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",		 ЭД.Дата);
	
	// Валюта, курс
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");
		Если СвойствоКодОКВ<>Неопределено Тогда 
			КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																КодВалюты, 
																"Код валюты: "+КодВалюты, 
																Валюта, 
																ДопРеквизиты, 
																ДеревоРазбора, 
																Ошибка
															  );
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");
		Если СвойствоКурс<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));
		КонецЕсли;
	КонецЕсли;
	
	// Сумма
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	Если СвойствоЭД <> Неопределено Тогда
		ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоСуммаОбщая = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаОбщая");
		Если СвойствоСуммаОбщая<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ИтогоПоДокументуXDTO.Получить(СвойствоСуммаОбщая));
		КонецЕсли;	
		СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");
		Если СвойствоЦенаВключаетНДС<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС));
		КонецЕсли;	
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Исполнитель");
	Если СвойствоЭД<>Неопределено Тогда
		Исполнитель = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда	
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;	
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("Заказчик");
	Если СвойствоЭД<>Неопределено Тогда
		Заказчик = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда	
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("ТекстДокумента");
	Если СвойствоЭД<>Неопределено Тогда
		ТекстДокумента = ЭД.Получить(СвойствоЭД);
		СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("Заголовок");
		Если СвойствоЗаголовок<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Заголовок", ТекстДокумента.Получить(СвойствоЗаголовок));
		КонецЕсли;
		СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("ОписаниеВыполненныхРабот");
		Если СвойствоЗаголовок<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОписаниеВыполненныхРабот", ТекстДокумента.Получить(СвойствоЗаголовок));
		КонецЕсли;
		СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("Претензии");
		Если СвойствоЗаголовок<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Претензии", ТекстДокумента.Получить(СвойствоЗаголовок));
		КонецЕсли;
	Конецесли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогиПрописью");
	Если СвойствоЭД<>Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.Получить(СвойствоЭД));
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧАктаОПриемке(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура ПрочитатьНакладнуюXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД 		= ЭД.Ид;
	НовыйЭД.ВидЭД 	= Перечисления.ВидыЭД.Накладная;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер",		 ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",		 ЭД.Дата);
		
	// Валюта, курс
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		Если Не ВалютаXDTO=Неопределено Тогда
			СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");
			Если СвойствоКодОКВ<>Неопределено Тогда 
				КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);
				НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
				ДопРеквизиты = Новый Структура;
				ДопРеквизиты.Вставить("Код", КодВалюты);
				Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																	КодВалюты, 
																	"Код валюты: "+КодВалюты, 
																	Валюта, 
																	ДопРеквизиты, 
																	ДеревоРазбора, 
																	Ошибка
																  );
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
			КонецЕсли;
			СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");
			Если СвойствоКурс<>Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	// Сумма
	СвойствоЭД = ЭД.Свойства().Получить("СуммаВсего");
	Если СвойствоЭД <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ЭД.Получить(СвойствоЭД));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Грузоотправитель");
	Если СвойствоЭД<>Неопределено Тогда
		Грузоотправитель = ЭД.Получить(СвойствоЭД);
		ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузоотправитель");
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("Грузополучатель");
	Если СвойствоЭД<>Неопределено Тогда
		Грузополучатель = ЭД.Получить(СвойствоЭД);
		ПрочитатьДанныеКонтрагента(Грузополучатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузополучатель");
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("Поставщик");
	Если СвойствоЭД<>Неопределено Тогда
		Поставщик = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		 ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда		
			ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;	
	КонецЕсли;	

	СвойствоЭД = ЭД.Свойства().Получить("Плательщик");
	Если СвойствоЭД<>Неопределено Тогда
		Плательщик = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий  
		 ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда		
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;	
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("ОКУД");
	Если СвойствоЭД<>Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКУД",  ЭД.Получить(СвойствоЭД));
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	Если СвойствоЭД <> Неопределено Тогда
		ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
		КоличествоЗаписей = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоЗаписей");
		Если КоличествоЗаписей<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ИтогоПоДокументуXDTO.Получить(КоличествоЗаписей));
		КонецЕсли;	
		КоличествоМест = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоМест");
		Если КоличествоМест<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ИтогоПоДокументуXDTO.Получить(КоличествоМест));
		КонецЕсли;	
		СуммаБезНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаБезНДС");
		Если СуммаБезНДС<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаБезНДС", ИтогоПоДокументуXDTO.Получить(СуммаБезНДС));
		КонецЕсли;
		СуммаНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНДС");
		Если СуммаНДС<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ИтогоПоДокументуXDTO.Получить(СуммаНДС));
		КонецЕсли;
        СуммаСУчетомНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаСУчетомНДС");
		Если СуммаНДС<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСУчетомНДС", ИтогоПоДокументуXDTO.Получить(СуммаСУчетомНДС));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогиПрописью");
	Если СвойствоЭД <> Неопределено Тогда
		ИтогиПрописьюXDTO = ЭД.Получить(СвойствоЭД);
		КоличествоЗаписейПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоЗаписейПрописью");
		Если КоличествоЗаписейПрописью<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ИтогоПоДокументуXDTO.Получить(КоличествоЗаписейПрописью));
		КонецЕсли;
		КоличествоМестПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоМестПрописью");
		Если КоличествоМестПрописью<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ИтогоПоДокументуXDTO.Получить(КоличествоМестПрописью));
		КонецЕсли;
		СуммаВсегоПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаВсегоПрописью");
		Если СуммаВсегоПрописью<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ИтогоПоДокументуXDTO.Получить(СуммаВсегоПрописью));
		КонецЕсли;
    КонецЕсли;
	  	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧНакладной(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
				
КонецПроцедуры

Процедура ПрочитатьКаталогXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ИД 		= ЭД.Ид;
	НовыйЭД.ВидЭД 	= Перечисления.ВидыЭД.КаталогТоваров;

	// Заполняем данные о владельце каталога
	// Контрагент
	Элемент = ЭД.Владелец;
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда 
			
			ИдКонтрагента = ЗнДанных;
			// разберем ИД на ИНН и КПП
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН); 
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП); 
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
			РеквизитыУчастника = ЗнДанных;
			Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
				РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
				Если РеквизитУчастника <> Неопределено Тогда
					Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес") ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя+"_Представление", РеквизитУчастника.Представление);
					ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
						РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
					Иначе // остальное по именам
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе // остальное по именам
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");
	Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Контрагенты", ИдКонтрагента, РеквизитыКонтрагента, ЭД.Ид);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: "+ИдКонтрагента, 
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДатаФормирования);
	
	ЗнДопАналитики = ВернутьДопАналитикуКонтрагента(Контрагент, "Партнер");
	Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
		НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "+ЗнДопАналитики.Код, 
			ЗнДопАналитики, Новый Структура(), ДеревоРазбора, Ошибка);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
	КонецЕсли;
	
	// Заполняем данные о товарах каталога
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура ПрочитатьПрайсXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД 		= ЭД.Ид;
	НовыйЭД.ВидЭД 	= Перечисления.ВидыЭД.ПрайсЛист;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.ДействительноС);
	
	// Контрагент
	Элемент = ЭД.Владелец;
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда 
			
			ИдКонтрагента = ЗнДанных;
			// разберем ИД на ИНН и КПП
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН); 
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП); 
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
			РеквизитыУчастника = ЗнДанных;
			Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
				РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
				Если РеквизитУчастника <> Неопределено Тогда
					Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес") ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя+"_Представление", РеквизитУчастника.Представление);
					ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
						РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
					Иначе // остальное по именам
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе // остальное по именам
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");
	Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Контрагенты", ИдКонтрагента, РеквизитыКонтрагента, ЭД.Ид);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: "+ИдКонтрагента, 
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДействительноС);
	
	ЗнДопАналитики = ВернутьДопАналитикуКонтрагента(Контрагент, "Партнер");
	Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
		НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "+ЗнДопАналитики.Код, 
			ЗнДопАналитики, Новый Структура(), ДеревоРазбора, Ошибка);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
	КонецЕсли;
	
	// Товары
	Предложения = ЭД.Предложения.ПолучитьСписок("Предложение");
	Для Каждого Элемент Из Предложения Цикл
		
		СписокТЧ = Новый СписокЗначений;
		НаименованиеТовара	= "";
		ИдТовара			= "";
		АртикулТовара		= "";
		
		// Номенклатура
		РеквизитыНоменклатуры = Новый Структура;
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		ИмяСправочникаВладельца = ЭлектронныеДокументыПереопределяемый.ИмяСправочникаВладельцаНоменклатурыПоставщика();
		ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяСправочникаВладельца, ДеревоРазбора);
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
			
			ЗнДанных = Элемент[ТекСвойство.Имя];
			Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			// разберем свойства Товара
			Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
				РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Код", ЗнДанных);
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
				РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Наименование", ЗнДанных);
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
				РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
				Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
					РеквизитыЕдИзм = Новый Структура;
					РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
					ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
					НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм, 
					РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
					Если ЗначениеЗаполнено(ЕдИзм) Тогда
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
				Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
					РеквизитыЕдИзм = Новый Структура;
					РеквизитыЕдИзм.Вставить("Код", 			ЗнДанных.Код);
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
					ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
					НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм, 
					РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
					Если ЗначениеЗаполнено(ЕдИзм) Тогда
						СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Упаковка");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		РеквизитыНоменклатурыПоставщика.Вставить("Наименование", РеквизитыНоменклатуры.Наименование);
		НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ИдТовара, РеквизитыНоменклатурыПоставщика, ЭД.Ид);
		
		НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыНоменклатурыПоставщика.Код, РеквизитыНоменклатурыПоставщика.Наименование, 
																	НоменклатураПоставщика, РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");   // ссылка на объект в ДеревеСоответствий
		
		// Номенклатура
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		
		ИдТовараВладельца = ВернутьИДОбъектаОтправителя(ВладелецНоменклатуры, РеквизитыНоменклатурыПоставщика.Код);
		
		Номенклатура	= ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", РеквизитыНоменклатуры,ЭД.Ид);
		НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
		НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовараВладельца, РеквизитыНоменклатурыПоставщика.Наименование, Номенклатура, 
																	РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");   // ссылка на объект в ДеревеСоответствий
		
		// Цена
		ЗначениеЦены = 0;
		ЕдиницаИзмерения = "";
		Цены = Элемент.Цены.ПолучитьСписок("Цена");
		Для Каждого Цена Из Цены Цикл
			ЗначениеЦены = Цена.Цена;
			СписокТЧ.Добавить(ЗначениеЦены,	"Цена");
			// ЕдиницаИзмерения
			ЗнДанных = Цена.ЕдиницаИзмерения;
			РеквизитыЕдИзм = Новый Структура;
			РеквизитыЕдИзм.Вставить("Код", 			ЗнДанных.Код);
			РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
			СвойствоКоличество = Цена.Свойства().Получить("МинКоличество");
			Если СвойствоКоличество<>Неопределено Тогда
				СписокТЧ.Добавить(Цена.МинКоличество, "Количество");
			КонецЕсли;	
			ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
			НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм, 
																		РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
			Если ЗначениеЗаполнено(ЕдИзм) Тогда
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Упаковка");
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЦикла;
		
КонецПроцедуры

Процедура ПрочитатьСчетНаОплатуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД 		= ЭД.Ид;
	НовыйЭД.ВидЭД 	= Перечисления.ВидыЭД.СчетНаОплату;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер",		 ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",		 ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("РеквизитыПолучателя");
	РеквизитыПолучателя = ЭД.Получить(СвойствоЭД);
	ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РеквизитыПолучателя, ДеревоРазбора, "БанковскиеСчетаКонтрагентов", "Продавец",,Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("НазначениеПлатежа");
	НазначениеПлатежа = ЭД.Получить(СвойствоЭД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", НазначениеПлатежа);
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаОкончанияДействияСчета");
	ДатаОкончанияДействияСчета = ЭД.Получить(СвойствоЭД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОкончанияДействияСчета", ДатаОкончанияДействияСчета);
	
	// Валюта, курс
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");
		Если СвойствоКодОКВ<>Неопределено Тогда 
			КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																КодВалюты, 
																"Код валюты: "+КодВалюты, 
																Валюта, 
																ДопРеквизиты, 
																ДеревоРазбора, 
																Ошибка
															  );
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");
		Если СвойствоКурс<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));
		КонецЕсли;
	КонецЕсли;
     	
	СвойствоЭД = ЭД.Свойства().Получить("Поставщик");
	Поставщик = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда		
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;	
    
	СвойствоЭД = ЭД.Свойства().Получить("Покупатель");
	Покупатель = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда		
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;	
    	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
	СуммаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаИтог");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог", ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	СвойствоСуммаНалогаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНалогаИтог");
	Если СвойствоСуммаНалогаИтог<>Неопределено Тогда
		СуммаНалогаИтог =  ИтогоПоДокументуXDTO.Получить(СвойствоСуммаНалогаИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);
	КонецЕсли;	
	СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");
	Если СвойствоЦенаВключаетНДС<>Неопределено Тогда
		ЦенаВключаетНДС =  ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ЦенаВключаетНДС);
	КонецЕсли;	
		
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью",	ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("Товары");
	Если СвойствоЭД<>Неопределено И ЭД.Получить(СвойствоЭД)<>Неопределено Тогда
		НаборДанных = ЭД["Товары"].Товар;
		ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("Руководитель");
	Если СвойствоЭД<>Неопределено Тогда
		Руководитель = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Руководитель", Руководитель.ПолноеНаименование);
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("Бухгалтер");
	Если СвойствоЭД<>Неопределено Тогда
		Бухгалтер = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Бухгалтер", Бухгалтер.ПолноеНаименование);
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");
	Если СвойствоЭД<>Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("ДокументОснования");
	Если СвойствоЭД<>Неопределено Тогда
		Для Каждого ДокументОснованияXDTO ИЗ ЭД.ДокументОснования Цикл
		    СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
			Если СвойствоНомерДокументаОснования<>Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерДокументаОснования",ДокументОснованияXDTO.НомерДокументаОснования);
			КонецЕсли;	
			СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
			Если СвойствоДатаДокументаОснования<>Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаДокументаОснования",ДокументОснованияXDTO.ДатаДокументаОснования);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗаказXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД 		= ЭД.Ид;
	
	Если ЭД.Роль = "Покупатель" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
	ИначеЕсли ЭД.Роль = "Продавец" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
	КонецЕсли;	
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер",	ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",	ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Исполнитель");
	Исполнитель = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ЭД.Роль);
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Если ЭД.Роль = "Покупатель" Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли	ЭД.Роль = "Продавец" Тогда
		   	ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("Заказчик");
	Заказчик = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		Если ЭД.Роль = "Покупатель" Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли	ЭД.Роль = "Продавец" Тогда
		   	ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда	
		ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ЭД.Роль);
	КонецЕсли;	
		
	СвойствоЭД = ЭД.Свойства().Получить("Товары");
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
	СуммаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаИтог");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог", ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	СвойствоСуммаНалогаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНалогаИтог");
	Если СвойствоСуммаНалогаИтог<>Неопределено Тогда
		СуммаНалогаИтог =  ИтогоПоДокументуXDTO.Получить(СвойствоСуммаНалогаИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);
	КонецЕсли;	
	СвойствоСуммаБезСкидкиИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаБезСкидкиИтог");
	Если СвойствоСуммаБезСкидкиИтог<>Неопределено Тогда
		СуммаБезСкидкиИтог =  ИтогоПоДокументуXDTO.Получить(СвойствоСуммаБезСкидкиИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаБезСкидкиИтог", СуммаБезСкидкиИтог);
	КонецЕсли;	
	СвойствоСуммаСкидкиИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаСкидкиИтог");
	Если СвойствоСуммаСкидкиИтог<>Неопределено Тогда
		СуммаСкидкиИтог =  ИтогоПоДокументуXDTO.Получить(СвойствоСуммаСкидкиИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСкидкиИтог", СуммаСкидкиИтог);
	КонецЕсли;	
	СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");
	Если СвойствоЦенаВключаетНДС<>Неопределено Тогда
		ЦенаВключаетНДС =  ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ЦенаВключаетНДС);
	КонецЕсли;	
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью",	ЭД.ИтогиПрописью);
		
	СвойствоЭД = ЭД.Свойства().Получить("ДокументОснования");
	Если СвойствоЭД<>Неопределено Тогда
		Для Каждого ДокументОснованияXDTO ИЗ ЭД.ДокументОснования Цикл
		    СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
			Если СвойствоНомерДокументаОснования<>Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента",ДокументОснованияXDTO.НомерДокументаОснования);
			КонецЕсли;	
			СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
			Если СвойствоДатаДокументаОснования<>Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента",ДокументОснованияXDTO.ДатаДокументаОснования);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
    	
	// Валюта, курс
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");
		Если СвойствоКодОКВ<>Неопределено Тогда 
			КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																КодВалюты, 
																"Код валюты: "+КодВалюты, 
																Валюта, 
																ДопРеквизиты, 
																ДеревоРазбора, 
																Ошибка
															  );
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");
		Если СвойствоКурс<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));
		КонецЕсли;
	КонецЕсли;
 	
	СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");
	Если СвойствоЭД<>Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("Комментарий");
	Если СвойствоЭД<>Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДополнительнаяИнформация", ЭД.Комментарий);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД 		= ЭД.Ид;
	НовыйЭД.ВидЭД 	= Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер",		 ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",		 ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Комитент");
	Комитент = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда		
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;	

	СвойствоЭД = ЭД.Свойства().Получить("Комиссионер");
	Комиссионер = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда		
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;	
		
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
    	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументу = ЭД.Получить(СвойствоЭД);
    ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогоПоДокументу", ИтогоПоДокументу);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью",	ЭД.ИтогиПрописью);
	
	// Валюта, курс
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");
		Если СвойствоКодОКВ<>Неопределено Тогда 
			КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																КодВалюты, 
																"Код валюты: "+КодВалюты, 
																Валюта, 
																ДопРеквизиты, 
																ДеревоРазбора, 
																Ошибка
															  );
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");
		Если СвойствоКурс<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД 		= ЭД.Ид;
	НовыйЭД.ВидЭД 	= Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер",		 ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",		 ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Комитент");
	Комитент = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда		
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;	

	СвойствоЭД = ЭД.Свойства().Получить("Комиссионер");
	Комиссионер = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда		
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;	
		
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
    	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументу = ЭД.Получить(СвойствоЭД);
	СвойствоСуммаКомитентаИтог = ИтогоПоДокументу.Свойства().Получить("СуммаКомитентаИтог");
	СуммаКомитентаИтог = ИтогоПоДокументу.Получить(СвойствоСуммаКомитентаИтог);
    ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаКомитента", СуммаКомитентаИтог);
	СвойствоСуммаПродажиИтог = ИтогоПоДокументу.Свойства().Получить("СуммаПродажиИтог");
	СуммаПродажиИтог = ИтогоПоДокументу.Получить(СвойствоСуммаПродажиИтог);
    ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаПродажиИтог);
   	СвойствоСуммаВознагражденияИтог = ИтогоПоДокументу.Свойства().Получить("СуммаВознагражденияИтог");
	Если СвойствоСуммаВознагражденияИтог<>Неопределено Тогда
		СуммаВознагражденияИтог = ИтогоПоДокументу.Получить(СвойствоСуммаВознагражденияИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВознаграждения", СуммаВознагражденияИтог);
	КонецЕсли;	
	СвойствоПроцент = ИтогоПоДокументу.Свойства().Получить("Процент");
	Если СвойствоПроцент<>Неопределено Тогда
		Процент = ИтогоПоДокументу.Получить(СвойствоПроцент);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПроцентВознаграждения", Процент);
	КонецЕсли;	
		
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью",	ЭД.ИтогиПрописью);
	
	// Валюта, курс
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");
		Если СвойствоКодОКВ<>Неопределено Тогда 
			КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																КодВалюты, 
																"Код валюты: "+КодВалюты, 
																Валюта, 
																ДопРеквизиты, 
																ДеревоРазбора, 
																Ошибка
															  );
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");
		Если СвойствоКурс<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");
	Если СвойствоЭД<>Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаНачала");
	Если СвойствоЭД <> Неопределено Тогда
		ДатаНачала = ЭД.Получить(СвойствоЭД);
        ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НачалоПериода", ДатаНачала);
	КонецЕсли;	

	СвойствоЭД = ЭД.Свойства().Получить("ДатаКонца");
	Если СвойствоЭД <> Неопределено Тогда
		ДатаКонца = ЭД.Получить(СвойствоЭД);
        ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КонецПериода", ДатаКонца);
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("ФормаОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ФормаОплаты = ЭД.Получить(СвойствоЭД);
        ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФормаОплаты", ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ФормыОплаты",ФормаОплаты));
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("СпособРасчета");
	Если СвойствоЭД <> Неопределено Тогда
		СпособРасчета = ЭД.Получить(СвойствоЭД);
        ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СпособРасчетаВознаграждения", ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("СпособРасчета",СпособРасчета));
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СпособРасчетаВознаграждения", ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("СпособРасчета","Не рассчитывается"));
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ДатаОплаты = ЭД.Получить(СвойствоЭД);
        ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПлатежа", ДатаОплаты);
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("Услуга");
	Если СвойствоЭД <> Неопределено Тогда
		Услуга = ЭД.Получить(СвойствоЭД);
		СвойствоНалог = Услуга.Свойства().Получить("Налог");
		Если СвойствоНалог<>Неопределено Тогда
			Налог = Услуга.Получить(СвойствоНалог);
			Если ВРег(Налог.ТипНалога) = "НДС" Тогда
				СвойствоВеличинаСтавкиНалога = Налог.Свойства().Получить("ВеличинаСтавкиНалога");
				Если СвойствоВеличинаСтавкиНалога <> Неопределено Тогда
					СтавкаНалога = ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("НДС", Налог.ВеличинаСтавкиНалога);
					ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтавкаНДСВознаграждения", СтавкаНалога);
				КонецЕсли;	
				СвойствоСумма = Налог.Свойства().Получить("Сумма");
				Если СвойствоСумма <> Неопределено Тогда
					ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДСВознаграждения", Налог.Сумма);
				КонецЕсли;	
            КонецЕсли;
		КонецЕсли;	
        ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПлатежа", ДатаОплаты);
	КонецЕсли;	
	
КонецПроцедуры

// Разбираем строковую конструкцию вида "ИНН_КПП"
//
// Возвращаемое значение:
//   структура параметров с ИНН и КПП
//
Функция РазобратьИДКонтрагента(Знач СтрокаИД)
	
	ПозицияРазделителя1 = Найти(СтрокаИД, "#");
	СтруктураПоиска = Новый Структура;
	ПозицияРазделителя1 = Найти(СтрокаИД, "_");
	Если ПозицияРазделителя1>0 Тогда
		ИНН = Лев(СтрокаИД, ПозицияРазделителя1-1);
		КПП = Сред(СтрокаИД, ПозицияРазделителя1+1, СтрДлина(СтрокаИД)-ПозицияРазделителя1);
	ИначеЕсли СтрДлина(СтрокаИД)>0 Тогда
		ИНН = СокрЛП(СтрокаИД);
		КПП = "";
	КонецЕсли;
	
	СтруктураПоиска.Вставить("ИНН", ИНН);
	СтруктураПоиска.Вставить("КПП", КПП);
	
	Возврат СтруктураПоиска;
	
КонецФункции

// Функция преобразует строку в дату и время
//
// Параметры:
//  Зн - строка - дата в формате "ГГГГ-ММ-ДД ЧЧ:ММ:СС"
//
// Возвращаемое значение:
//  Значение типа "ДатаВремя"
//
Функция ПолучитьДатуВремяИзСтроки(Зн)
	
	Результат = Неопределено;
	Зн = СтрЗаменить(Зн, "-", "");
	Зн = СтрЗаменить(Зн, ":", "");
	Если СтрДлина(Зн)-Найти(Зн, " ")=5 Тогда // время в формате Ч:ММ:СС
		Зн = СтрЗаменить(Зн, " ", "0");
	ИначеЕсли Найти(Зн, "T")>0	Тогда //время в формате ГГГГММДДTЧЧММСС
		Зн = СтрЗаменить(Зн, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		Зн = СтрЗаменить(Зн, " ", "");
	КонецЕсли;
	
	Попытка
		Результат = Дата(Зн); // дата и время в виде "ГГГГММДДЧЧММСС"
	Исключение
		Попытка
			Результат = Дата(Лев(Зн,8)); // только дата "ГГГГММДД"
		Исключение // ошибка
		КонецПопытки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьДопАналитикуКонтрагента(Контрагент, ДопАналитика) 
	
	Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ Контрагент.Метаданные().Реквизиты.Найти(ДопАналитика)=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Контрагент[ДопАналитика]; // Вернем значение Партнера для УТ
	
КонецФункции

Функция ВернутьИДОбъектаОтправителя(Владелец, ИДОбъекта)
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Если ТипЗнч(Владелец) = Тип("Строка") Тогда
			ИДОбъектаОтправителя = СокрЛП(Владелец)+"#"+ИДОбъекта;
		Иначе
			ИДОбъектаОтправителя = Строка(Владелец.Код)+"#"+ИДОбъекта;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИДОбъектаОтправителя;
	
КонецФункции

//Осуществляет разбор файла с реквизитами контрагента
//
//Параметры:
//СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента
//
Процедура РазобратьФайлРеквизитовКонтрагента (СсылкаНаФайл, СтруктураВозврата, ОшибкаРазбора) Экспорт
	
	ОшибкаРазбора = Ложь;
	
	ОбъектXML = Новый ЧтениеXML;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
    ДвоичныеДанные.Записать (ВремФайл);
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		ОбъектXML.Закрыть();		
		ОшибкаРазбора= Истина;
		Возврат;
	КонецПопытки;	

	Если НЕ ЭД.Тип() = ПолучитьТипЗначенияCML("Контрагент","4.02") Тогда
		ОшибкаРазбора = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		СвойствоЭД = ЭД.Свойства().Получить("Контакты");
		Если СвойствоЭД <> Неопределено Тогда
			Для Каждого ТекКонтакт Из ЭД.Контакты.Контакт Цикл
				Если ТекКонтакт.Тип = "Телефон рабочий" Тогда
					СтруктураВозврата.Вставить("ТелефонПартнера", 	ТекКонтакт.Значение);
					СтруктураВозврата.Вставить("ТелефонКЛ", 		ТекКонтакт.Значение);
				ИначеЕсли ТекКонтакт.Тип = "Почта" Тогда
					СтруктураВозврата.Вставить("АдресЭППартнера", ТекКонтакт.Значение);
				КонецЕсли
			КонецЦикла	
	    КонецЕсли;
		
		СтруктураВозврата.Вставить("УказыватьЮридическиеРеквизиты", Истина);
		
		ДопустимыеТипы = "Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";
	    		
		СвойствоЭД = ЭД.Свойства().Получить("ЮрЛицо");
		Если СвойствоЭД <> Неопределено Тогда
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				СтруктураВозврата.Вставить("ВидКомпании", 0);
				СвойствоИНН = ЗнДанных.Свойства().Получить("ИНН");
				Если СвойствоИНН <> Неопределено Тогда
					СтруктураВозврата.Вставить("ИНН", ЗнДанных.Получить(СвойствоИНН));
				КонецЕсли;	
				СвойствоКПП = ЗнДанных.Свойства().Получить("КПП");
				Если СвойствоКПП <> Неопределено Тогда
					СтруктураВозврата.Вставить("КПП", ЗнДанных.Получить(СвойствоКПП));
				КонецЕсли;	
				СвойствоОКПО = ЗнДанных.Свойства().Получить("ОКПО");
				Если СвойствоОКПО <> Неопределено Тогда
					СтруктураВозврата.Вставить("КодПоОКПО", ЗнДанных.Получить(СвойствоОКПО));
				КонецЕсли;	
				СвойствоОФНаим = ЗнДанных.Свойства().Получить("ОфициальноеНаименование");
				Если СвойствоОФНаим <> Неопределено Тогда
					СтруктураВозврата.Вставить("НаименованиеКонтрагента", ЗнДанных.Получить(СвойствоОфНаим));
				КонецЕсли;	
						
				СвойствоЮрАдрес = ЗнДанных.Свойства().Получить("ЮридическийАдрес");
				Если СвойствоЮрАдрес <> Неопределено Тогда
					ЗнЮрАдрес = ЗнДанных.Получить(СвойствоЮрАдрес);
					Если ЗнЮрАдрес <> Неопределено Тогда
						СтруктураВозврата.Вставить("ЮридическийАдрес", ЗнЮрАдрес.Представление);
						ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
						Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
							Если ТекСв.Тип = "Почтовый индекс" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление =  "Индекс";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление =  "НаселенныйПункт";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип)>0 ТОгда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление =  ТекСв.Тип;
					    		ЮрАдресЗначения.Значение = ТекСв.Значение;
							КонецЕсли;	
						КонецЦикла;
						СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей", ЮридическийАдресЗначенияПолей);
	             	КонецЕсли
				КонецЕсли;
				
				СвойствоРуководитель = ЗнДанных.Свойства().Получить("Руководитель");
				Если СвойствоРуководитель <> Неопределено Тогда
					ЗнРуководитель = ЗнДанных.Получить(СвойствоРуководитель);
					Если ЗнРуководитель <> Неопределено Тогда
						СвойствоФизЛицо = ЗнРуководитель.Свойства().Получить("ФизЛицо");
						Если СвойствоФизЛицо<> Неопределено Тогда
							ФизЛицо = ЗнРуководитель.Получить(СвойствоФизЛицо);
							Если ФизЛицо <> Неопределено Тогда
								СтруктураВозврата.Вставить("УказатьДанныеКонтактногоЛица", 	Истина);
								ФамилияКЛ = ""; ИмяКЛ = ""; ОтчествоКЛ = "";
								РазобратьФИО(ФизЛицо.ПолноеНаименование, ФамилияКЛ, ИмяКЛ,ОтчествоКЛ);
								СтруктураВозврата.Вставить("ФамилияКЛ", 	ФамилияКЛ);
								СтруктураВозврата.Вставить("ИмяКЛ", 		ИмяКЛ);
								СтруктураВозврата.Вставить("ОтчествоКЛ", 	ОтчествоКЛ);
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
	         	КонецЕсли	
			КонецЕсли
		КонецЕсли;
			
		СвойствоЭД = ЭД.Свойства().Получить("ФизЛицо");
		Если СвойствоЭД <> Неопределено Тогда
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				СтруктураВозврата.Вставить("ВидКомпании", 2);
				СвойствоИНН = ЗнДанных.Свойства().Получить("ИНН");
				Если СвойствоИНН <> Неопределено Тогда
					СтруктураВозврата.Вставить("ИНН", ЗнДанных.Получить(СвойствоИНН));
				КонецЕсли;	
				СвойствоОКПО = ЗнДанных.Свойства().Получить("ОКПО");
				Если СвойствоОКПО <> Неопределено Тогда
					КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);
					СтруктураВозврата.Вставить("КодПоОКПО", ЗнДанных.Получить(СвойствоОКПО));
				КонецЕсли;	
				СвойствоОФНаим = ЗнДанных.Свойства().Получить("ПолноеНаименование");
				Если СвойствоОФНаим <> Неопределено Тогда
					СтруктураВозврата.Вставить("НаименованиеКонтрагента", ЗнДанных.Получить(СвойствоОфНаим));
					ФамилияКонтрагента = ""; ИмяКонтрагента = ""; ОтчествоКонтрагента = "";
                    РазобратьФИО (СтруктураВозврата.НаименованиеКонтрагента, ФамилияКонтрагента, ИмяКонтрагента, ОтчествоКонтрагента); 
					СтруктураВозврата.Вставить("ФамилияКонтрагента", 	ФамилияКонтрагента);
					СтруктураВозврата.Вставить("ИмяКонтрагента", 		ИмяКонтрагента);
					СтруктураВозврата.Вставить("ОтчествоКонтрагента", 	ОтчествоКонтрагента);
				КонецЕсли;	
				СвойствоЮрАдрес = ЗнДанных.Свойства().Получить("ЮридическийАдрес");
				Если СвойствоЮрАдрес <> Неопределено Тогда
					ЗнЮрАдрес = ЗнДанных.Получить(СвойствоЮрАдрес);
					Если ЗнЮрАдрес <> Неопределено Тогда
						СтруктураВозврата.Вставить("ЮридическийАдрес", ЗнЮрАдрес.Представление);
						ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
						Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
							Если ТекСв.Тип = "Почтовый индекс" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление =  "Индекс";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление =  "НаселенныйПункт";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип)>0 ТОгда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление =  ТекСв.Тип;
					    		ЮрАдресЗначения.Значение = ТекСв.Значение;
							КонецЕсли;	
						КонецЦикла;
						СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей",	ЮридическийАдресЗначенияПолей);
	             	КонецЕсли
				КонецЕсли;
			КонецЕсли
		КонецЕсли;
	 	
		СвойствоЭД = ЭД.Свойства().Получить("Наименование");
		Если СвойствоЭД <> Неопределено Тогда
			СтруктураВозврата.Вставить("Название",	ЭД.Получить(СвойствоЭД));
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("Адрес");
		Если СвойствоЭД <> Неопределено Тогда
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				СтруктураВозврата.Вставить("ФактическийАдрес",	ЗнДанных.Представление);
				ФактическийАдресЗначенияПолей = Новый СписокЗначений;
				Для Каждого ТекСв Из ЗнДанных.АдресноеПоле Цикл
					Если ТекСв.Тип = "Почтовый индекс" Тогда
						ФактАдресЗначения 	= ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Представление =  "Индекс";
						ФактАдресЗначения.Значение = ТекСв.Значение;
					ИначеЕсли	ТекСв.Тип = "Населенный пункт" Тогда
						ФактАдресЗначения 	= ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Представление =  "НаселенныйПункт";
						ФактАдресЗначения.Значение = ТекСв.Значение;
					ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип)>0 ТОгда
						ФактАдресЗначения 	= ФактическийАдресЗначенияПолей.Добавить();
					    ФактАдресЗначения.Значение = ТекСв.Значение;
						ФактАдресЗначения.Представление =  ТекСв.Тип;
					КонецЕсли;	
				КонецЦикла;
				СтруктураВозврата.Вставить("ФактическийАдресЗначенияПолей",	ФактическийАдресЗначенияПолей);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОшибкаРазбора=Истина;
	КонецПопытки;	
	
КонецПроцедуры //РазобратьФайлРеквизитовКонтрагента()

Процедура РазобратьФИО (Знач ФИО, Фамилия, Имя, Отчество)
	ФИО 		= СокрЛП(ФИО);
	Фамилия		= "";
	Имя 		= "";
	Отчество 	= "";
	ПозПроб = Найти(ФИО," ");
	Если ПозПроб>0 Тогда
		Фамилия = Сред(ФИО,1,ПозПроб-1);
		ИмяОтч = Сред(ФИО,ПозПроб+1);
		ПозПроб = Найти(ИмяОтч," ");
		Если ПозПроб>0 Тогда
			Имя 		= Сред(ИмяОтч,1,ПозПроб-1);
			Отчество 	= Сред(ИмяОтч,ПозПроб+1);
		Иначе
			Имя = ИмяОтч;		
		КонецЕсли;
	Иначе
		Фамилия = ФИО;
	КонецЕсли;	
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ДЕРЕВА ОБЪЕКТОВ РАЗБОРА И ДЕРЕВА СООТВЕТСТВИЙ ОБЪЕКТОВ
   
Процедура ПрочитатьДанныеКонтрагента(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль="")
	
	ВидКонтрагента  = "";
	ВидДопАналитики = ""; 
	Если (ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани) Тогда	
		ВидКонтрагента 		= "Организации";
		Если Роль = "Продавец" Тогда
			ИмяРеквизита 		= "Организация";
			ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
	    ИначеЕсли Роль = "Покупатель"	Тогда
			ИмяРеквизита	 	= "Контрагент";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ИначеЕсли Роль = "Грузоотправитель"	ИЛИ Роль = "Грузополучатель" Тогда
			ИмяРеквизита	 	= Роль;
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		КонецЕсли;
	ИначеЕсли Роль = "Продавец" Тогда
		ВидКонтрагента 		= "Организации";
		ИмяРеквизита 		= "Организация";
		ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
    ИначеЕсли Роль = "Покупатель"	Тогда
    	ВидКонтрагента 		= "Контрагенты";
		ИмяРеквизита	 	= "Контрагент";
		ВидДопАналитики 	= "Партнеры";
		ДопАналитика 		= "Партнер";	
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
	ИначеЕсли Роль = "Грузоотправитель"	ИЛИ Роль = "Грузополучатель" Тогда
		ВидКонтрагента 		= "Контрагенты";
		ИмяРеквизита	 	= Роль;
		ВидДопАналитики 	= "Партнеры";
		ДопАналитика 		= "Партнер";	
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
	КонецЕсли;
	
	// Контрагент                                                     
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		ЗнДанных = Элемент[ТекСвойство.Имя];
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда 
			ИдКонтрагента = ЗнДанных;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Роль") Тогда
			Если ВРег(ЗнДанных) = ВРег("Продавец") Тогда
				Если НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара Тогда
					ВидКонтрагента 		= "Организации";
					ИмяРеквизита 		= "Организация";
					ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
				Иначе	
					ВидКонтрагента 		= "Контрагенты";
					ИмяРеквизита 		= "Контрагент";
					// доп.аналитика по Партнеру
					ВидДопАналитики 	= "Партнеры";
					ДопАналитика 		= "Партнер";
					ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
				КонецЕсли;	
			ИначеЕсли ВРег(ЗнДанных) = ВРег("Покупатель") Тогда
				Если НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара Тогда
					ВидКонтрагента 		= "Контрагенты";
					ИмяРеквизита 		= "Контрагент";
					ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
					// доп.аналитика по Партнеру
					ВидДопАналитики 	= "Партнеры";
					ДопАналитика 		= "Партнер";
				Иначе	
					ВидКонтрагента 		= "Организации";
					ИмяРеквизита 		= "Организация";
					ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
			РеквизитыУчастника = ЗнДанных;
			Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
				РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
				Если РеквизитУчастника <> Неопределено Тогда
					Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес") ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя+"_Представление", РеквизитУчастника.Представление);
					ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
						РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
					Иначе // остальное по именам
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ВРег(ТекСвойство) = ВРег("Адрес") Тогда
			РеквизитыКонтрагента.Вставить("ФактическийАдрес_Представление", ЗнДанных.Представление);
		ИначеЕсли ВРег(ТекСвойство) = ВРег("Контакты") Тогда
			ТаблицаКонтактов = Новый ТаблицаЗначений();
			ТаблицаКонтактов.Колонки.Добавить("Вид");
			ТаблицаКонтактов.Колонки.Добавить("Представление");
			ТаблицаКонтактов.Колонки.Добавить("ЗначенияПолей");
			Для Каждого Контакт из ЗнДанных.Контакт Цикл
				НовКонт = ТаблицаКонтактов.Добавить();
				Если Контакт.Тип = "Почта" Тогда
					НовКонт.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","EmailКонтрагента");
				ИначеЕсли Контакт.Тип = "Телефон рабочий" Тогда
					НовКонт.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонКонтрагента");
				ИначеЕсли Контакт.Тип = "Факс" Тогда
					НовКонт.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ФаксОрганизации");
				КонецЕсли;
				НовКонт.Представление = Контакт.Значение;
				НовКонт.ЗначенияПолей = Контакт.Комментарий;
			КонецЦикла;
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ТаблицаКонтактов);
		Иначе // остальное по именам
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем значения в зависимости от вида
	НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: "+ИдКонтрагента, 
						Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	
	// Определяем расчетный счет контрагента
	РасчетныеСчета = Элемент.РасчетныеСчета;
	Если РасчетныеСчета <> Неопределено Тогда
		РасчетныеСчетаXDTO = РасчетныеСчета.ПолучитьСписок("РасчетныйСчет");
		Для Каждого РасчетныйСчетXDTO Из РасчетныеСчетаXDTO Цикл
			ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РасчетныйСчетXDTO, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
			Прервать;
		КонецЦикла;
	КонецЕсли;
			    
	// доп.аналитику добавим, если заполнена
	Если ЗначениеЗаполнено(ВидДопАналитики) Тогда
		ЗнДопАналитики = ВернутьДопАналитикуКонтрагента(Контрагент, ДопАналитика);
		Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидДопАналитики);
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "+ЗнДопАналитики.Код, 
							ЗнДопАналитики, Новый Структура(), ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ДопАналитика, НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли; // доп.аналитики	
	
КонецПроцедуры	

Процедура ПрочитатьДанныеПоТЧАктаОПриемке(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
	АвторЭДПокупатель = Ложь;
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
			 
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) И НЕ ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
					Продолжить;
				КонецЕсли;
				// разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", 			Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
						НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																					Строка(ЗнДанных.Код), 
																					ЗнДанных.Наименование, 
																					ЕдИзм, 
																					РеквизитыЕдИзм, 
																					ДеревоРазбора, 
																					Ошибка
																				  );
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", 			Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
						НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																					Строка(ЗнДанных.Код), 
																					ЗнДанных.Наименование, 
																					ЕдИзм, 
																					РеквизитыЕдИзм, 
																					ДеревоРазбора, 
																					Ошибка
																				   );
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Упаковка");
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда // разберем налоги и суммы по строке
					ЕстьНДС = Ложь;
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										СтавкаНалога = ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("НДС", Налог.ВеличинаСтавкиНалога);
										СписокТЧ.Добавить(СтавкаНалога,"СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
										ЕстьНДС = Истина;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "Сумма");
							КонецЕсли;	
							Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаСНДС");
							КонецЕсли;	
						КонецЦикла;
					КонецЕсли;
					Если НЕ ЕстьНДС Тогда
						СписокТЧ.Добавить(Перечисления.СтавкиНДС.БезНДС,"СтавкаНДС");
						СписокТЧ.Добавить(0, "СуммаНДС");
					КонецЕсли;	
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда // разберем скидки по строке
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Описание") Тогда
					СписокТЧ.Добавить(ЗнДанных, "Содержание");	
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// пересчитаем с учетом коэфф-та
					// если есть свой-во ЕдиницаИзмерения, получим значение
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, 				"Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных)*Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
				Иначе // остальное по именам
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
			Если ИдентификацияПоНоменклатуреКомпании Тогда 
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("Номенклатура",СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры,"Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры,"Упаковка");
				КонецЕсли;
				
			Иначе // все остальные случаи - ищем по ном-ре поставщика
				// Номенклатура поставщиков
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяСправочникаВладельца = ЭлектронныеДокументыПереопределяемый.ИмяСправочникаВладельцаНоменклатурыПоставщика();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяСправочникаВладельца, ДеревоРазбора);
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков",,РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика, 
																				РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");   // ссылка на объект в ДеревеСоответствий

				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				Номенклатура = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			КонецЕсли;
			
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура, 
																		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");   // ссылка на объект в ДеревеСоответствий
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧНакладной(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
	АвторЭДПокупатель = Ложь;
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
											ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
			 
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				// разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", 			ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 	= НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																				ЗнДанных.Код, 
																				ЗнДанных.Наименование, 
																				ЕдИзм, 
																				РеквизитыЕдИзм, 
																				ДеревоРазбора, 
																				Ошибка
																			  );
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", 			Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 	= НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																				Строка(ЗнДанных.Код), 
																				ЗнДанных.Наименование, 
																				ЕдИзм, 
																				РеквизитыЕдИзм, 
																				ДеревоРазбора, 
																				Ошибка
																			  );
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налог") Тогда // разберем налоги и суммы по строке
					ЕстьНДС = Ложь;
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Если ВРег(ЗнДанных.ТипНалога) = "НДС" Тогда
							СтавкаНалога = ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("НДС", ЗнДанных.ВеличинаСтавкиНалога);
							СписокТЧ.Добавить(СтавкаНалога,"СтавкаНДС");
							СписокТЧ.Добавить(ЗнДанных.Сумма, "СуммаНДС");
							ЕстьНДС = Истина;
						КонецЕсли;
					КонецЕсли;
			    ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаБезНДС") Тогда
					СписокТЧ.Добавить(ЗнДанных, "Сумма");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаСУчетомНДС") Тогда
					СписокТЧ.Добавить(ЗнДанных, "СуммаСНДС");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДатаПоДаннымКлиента") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("СрокГодности") Тогда
					СписокТЧ.Добавить(ПолучитьДатуВремяИзСтроки(ЗнДанных), ТекСвойство.Имя);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
				Иначе // остальное по именам
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
			Если ИдентификацияПоНоменклатуреКомпании Тогда 
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("Номенклатура",СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры,"Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры,"Упаковка");
				КонецЕсли;
				
			Иначе // все остальные случаи - ищем по ном-ре поставщика
				// Номенклатура поставщиков
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяСправочникаВладельца = ЭлектронныеДокументыПереопределяемый.ИмяСправочникаВладельцаНоменклатурыПоставщика();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяСправочникаВладельца, ДеревоРазбора);
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				
				НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков",,РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика, 
																				РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");   // ссылка на объект в ДеревеСоответствий

				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
					РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
				ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара, ЭД.Ид);
				Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
				Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
					СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
					СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
				Конецесли;
			КонецЕсли;
			
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура, 
																		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");   // ссылка на объект в ДеревеСоответствий
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоГрафикуОплаты(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) И НЕ ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
					Продолжить;
				КонецЕсли;
				Если ВРег(ТекСвойство.Имя) = ВРег("ДатаПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ДатаПлатежа");	
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ПроцентПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ПроцентПлатежа");	
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "СуммаПлатежа");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ВидОплаты") Тогда
					Если ЗнДанных = "Аванс" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ВариантыОплатыКлиентом", "Аванс (до обеспечения)"), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель"  Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ВариантыОплатыПоставщику", "Аванс (до подтверждения)"), "ВариантОплаты");
						КонецЕсли;
					ИначеЕсли ЗнДанных = "Предоплата" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ВариантыОплатыКлиентом", "Предоплата (до отгрузки)"), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ВариантыОплатыПоставщику", "Предоплата (до поступления)"), "ВариантОплаты");
						КонецЕсли;
					ИначеЕсли ЗнДанных = "Кредит" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ВариантыОплатыКлиентом", "Кредит (после отгрузки)"), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("ВариантыОплатыПоставщику", "Кредит (после поступления)"), "ВариантОплаты");
						КонецЕсли;
					КонецЕсли;
				Иначе // остальное по именам
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЦикла;
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "ЭтапыГрафикаОплаты", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		
		Для Каждого Элемент Из НаборДанных Цикл
			
			СписокТЧ = Новый СписокЗначений;
			НаименованиеТовара	= "";
			ИдТовара			= "";
			АртикулТовара		= "";
			ЕстьДопРеквизиты = Ложь;
			// Номенклатура
			РеквизитыНоменклатуры			= Новый Структура;
			РеквизитыНоменклатурыПоставщика = Новый Структура;
			ИмяСправочникаВладельца = ЭлектронныеДокументыПереопределяемый.ИмяСправочникаВладельцаНоменклатурыПоставщика();
			ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяСправочникаВладельца, ДеревоРазбора);
			РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатурыПоставщика.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм, 
																					РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						РеквизитыНоменклатурыПоставщика.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);															
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;

				КонецЕсли;
				
			КонецЦикла;
			
			ИмяСправочникаВладельца = ЭлектронныеДокументыПереопределяемый.ИмяСправочникаВладельцаНоменклатурыПоставщика();
			ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяСправочникаВладельца, ДеревоРазбора);
			РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
			РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
			Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
				РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
			КонецЕсли;
			Если ЗначениеЗаполнено(НаимТовара) Тогда
				РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
			КонецЕсли;
			Если ЕстьДопРеквизиты Тогда
				РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
			КонецЕсли;
			
			НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков",,РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
			НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика, 
																			РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");   // ссылка на объект в ДеревеСоответствий

			Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
				РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			КонецЕсли;
			Номенклатура = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура, 
																		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");   // ссылка на объект в ДеревеСоответствий
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РасчетныйСчетXDTO, ДеревоРазбора, ВидБанковскогоСчета, Роль,Контрагент=Неопределено,Ошибка)
	// Обработка банка счета
	БанкXDTO = РасчетныйСчетXDTO.Банк;
	
	РеквизитыБанка = Новый Структура;
	РеквизитыБанка.Вставить("Код",			БанкXDTO.БИК);
	РеквизитыБанка.Вставить("Наименование", БанкXDTO.Наименование);
	РеквизитыБанка.Вставить("КоррСчет",		БанкXDTO.СчетКорреспондентский);
	
	БанкСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);
	
	// Создаем объект банка в дереве разбора
	ТипБанкиВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
	
	СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
		БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);
		
	//Обработка банка корреспондента
	ЕстьБанкКорреспондент = Ложь;
	СвойствоЭД =  РасчетныйСчетXDTO.Свойства().Получить("БанкКорреспондент");
	Если СвойствоЭД<>Неопределено И РасчетныйСчетXDTO.БанкКорреспондент<>Неопределено Тогда
		
		ЕстьБанкКорреспондент = Истина;
		БанкКорреспондентXDTO = РасчетныйСчетXDTO.БанкКорреспондент;
	
		РеквизитыБанкаКорреспондента = Новый Структура;
		РеквизитыБанкаКорреспондента.Вставить("Код",		 БанкКорреспондентXDTO.БИК);
		РеквизитыБанкаКорреспондента.Вставить("Наименование",БанкКорреспондентXDTO.Наименование);
		РеквизитыБанкаКорреспондента.Вставить("КоррСчет",	 БанкКорреспондентXDTO.СчетКорреспондентский);
		
		БанкКорреспондентСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(	"Банки", 
																							РеквизитыБанкаКорреспондента.Код, 
																							РеквизитыБанкаКорреспондента
																						  );
		
		// Создаем объект банка в дереве разбора
		ТипБанкиКоррВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
		
		СтрокаБанкаКорреспондента = НайтиСоздатьСтрокуВДеревеРазбора(	ТипБанкиКоррВДереве, 
																		РеквизитыБанкаКорреспондента.Код, 
																		"БИК: " + РеквизитыБанкаКорреспондента.Код,
																		БанкКорреспондентСсылка, 
																		РеквизитыБанкаКорреспондента, 
																		ДеревоРазбора, 
																		Ошибка
																	);

	КонецЕсли;	
					
	// Обработка самого счета	
	РеквизитыБанковскогоСчета = Новый Структура;
	РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
	КонецЕсли;
	
	БанковскийСчетСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета, РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
	
	// Создаем объект расчетного счета в дереве разбора
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
	
	СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета, "Номер счета: " + РеквизитыБанковскогоСчета.НомерСчета,
		БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);
		
	// Заполняем реквизиты банковского счета
	ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);							
	Если ЕстьБанкКорреспондент Тогда
		ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "БанкКорреспондент", СтрокаБанкаКорреспондента.ИндексСтроки);							
	КонецЕсли;	

	Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
		КонецЕсли	
	ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		Иначе	
        	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;	
 	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
			 
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				// разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", 			ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 	= НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																				ЗнДанных.Код, 
																				ЗнДанных.Наименование, 
																				ЕдИзм, 
																				РеквизитыЕдИзм, 
																				ДеревоРазбора, 
																				Ошибка
																			  );
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", 			Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 	= НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																				Строка(ЗнДанных.Код), 
																				ЗнДанных.Наименование, 
																				ЕдИзм, 
																				РеквизитыЕдИзм, 
																				ДеревоРазбора, 
																				Ошибка
																			  );
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда // разберем налоги и суммы по строке
						ЕстьНДС = Ложь;
						Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
							Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
								Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
									Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
									Для Каждого Налог Из Налоги Цикл
										Если ВРег(Налог.ТипНалога) = "НДС" Тогда
											СтавкаНалога = ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("НДС", Налог.ВеличинаСтавкиНалога);
											СписокТЧ.Добавить(СтавкаНалога,"СтавкаНДС");
											СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
											ЕстьНДС = Истина;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
								Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
									СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "Сумма");
								КонецЕсли;	
								Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
									СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаСНДС");
								КонецЕсли;	
							КонецЦикла;
						КонецЕсли;
						Если НЕ ЕстьНДС Тогда
							СписокТЧ.Добавить(Перечисления.СтавкиНДС.БезНДС,"СтавкаНДС");
							СписокТЧ.Добавить(0, "СуммаНДС");
						КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда // разберем скидки по строке
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// пересчитаем с учетом коэфф-та
					// если есть свой-во ЕдиницаИзмерения, получим значение
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, 				"Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных)*Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДатаПоДаннымКлиента") Тогда
					СписокТЧ.Добавить(ПолучитьДатуВремяИзСтроки(ЗнДанных), ТекСвойство.Имя);
					ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
				Иначе // остальное по именам
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
			Если ИдентификацияПоНоменклатуреКомпании Тогда 
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("Номенклатура",СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры,"Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры,"Упаковка");
				КонецЕсли;
				
			Иначе // все остальные случаи - ищем по ном-ре поставщика
				// Номенклатура поставщиков
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяСправочникаВладельца = ЭлектронныеДокументыПереопределяемый.ИмяСправочникаВладельцаНоменклатурыПоставщика();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяСправочникаВладельца, ДеревоРазбора);
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков",,РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика, 
																				РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");   // ссылка на объект в ДеревеСоответствий

				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				Номенклатура = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			КонецЕсли;
			
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура, 
																		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");   // ссылка на объект в ДеревеСоответствий
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = 	(НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 	И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ОтветНаЗаказ)
										ИЛИ (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 	И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				// разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", 			ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 	= НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																				ЗнДанных.Код, 
																				ЗнДанных.Наименование, 
																				ЕдИзм, 
																				РеквизитыЕдИзм, 
																				ДеревоРазбора, 
																				Ошибка
																			  );
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", 			Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 	= НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																				Строка(ЗнДанных.Код), 
																				ЗнДанных.Наименование, 
																				ЕдИзм, 
																				РеквизитыЕдИзм, 
																				ДеревоРазбора, 
																				Ошибка
																			  );
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда // разберем налоги и суммы по строке
						ЕстьНДС = Ложь;
						Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
							Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
								Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
									Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
									Для Каждого Налог Из Налоги Цикл
										Если ВРег(Налог.ТипНалога) = "НДС" Тогда
											СтавкаНалога = ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("НДС", Налог.ВеличинаСтавкиНалога);
											СписокТЧ.Добавить(СтавкаНалога,"СтавкаНДС");
											СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
											ЕстьНДС = Истина;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
								Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
									СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "Сумма");
								КонецЕсли;	
								Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
									СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаСНДС");
								КонецЕсли;	
							КонецЦикла;
						КонецЕсли;
						Если НЕ ЕстьНДС Тогда
							СписокТЧ.Добавить(Перечисления.СтавкиНДС.БезНДС,"СтавкаНДС");
							СписокТЧ.Добавить(0, "СуммаНДС");
						КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда // разберем скидки по строке
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
										СписокТЧ.Добавить(Скидка.Процент,"ПроцентРучнойСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
		        ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// пересчитаем с учетом коэфф-та
					// если есть свой-во ЕдиницаИзмерения, получим значение
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, 				"Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных)*Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
				Иначе // остальное по именам
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
			Если ИдентификацияПоНоменклатуреКомпании Тогда 
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("Номенклатура",СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры,"Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры,"Упаковка");
				КонецЕсли;
			Иначе // все остальные случаи - ищем по ном-ре поставщика
				// Номенклатура поставщиков
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяСправочникаВладельца = ЭлектронныеДокументыПереопределяемый.ИмяСправочникаВладельцаНоменклатурыПоставщика();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяСправочникаВладельца, ДеревоРазбора);
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков",,РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика, 
																				РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");   // ссылка на объект в ДеревеСоответствий

				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				Номенклатура = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			КонецЕсли;
			
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура, 
																		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");   // ссылка на объект в ДеревеСоответствий
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				// разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных)
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", 			ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 	= НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																				ЗнДанных.Код, 
																				ЗнДанных.Наименование, 
																				ЕдИзм, 
																				РеквизитыЕдИзм, 
																				ДеревоРазбора, 
																				Ошибка
																			  );
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", 			Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 	= НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																				Строка(ЗнДанных.Код), 
																				ЗнДанных.Наименование, 
																				ЕдИзм, 
																				РеквизитыЕдИзм, 
																				ДеревоРазбора, 
																				Ошибка
																			  );
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// пересчитаем с учетом коэфф-та
					// если есть свой-во ЕдиницаИзмерения, получим значение
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, 				"Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных)*Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
				Иначе // остальное по именам
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураИд = РазобратьИДТовара(ИдТовара);
			Номенклатура = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("Номенклатура",СтруктураИд.ИдТовара);
			Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
				ХарактеристикаНоменклатуры = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
				СписокТЧ.Добавить(ХарактеристикаНоменклатуры,"Характеристика");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
				УпаковкаНоменклатуры = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
				СписокТЧ.Добавить(УпаковкаНоменклатуры,"Упаковка");
			КонецЕсли;
			
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура, 
																		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");   // ссылка на объект в ДеревеСоответствий
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				// разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", 			ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 	= НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																				ЗнДанных.Код, 
																				ЗнДанных.Наименование, 
																				ЕдИзм, 
																				РеквизитыЕдИзм, 
																				ДеревоРазбора, 
																				Ошибка
																			  );
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", 			Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока 	= НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, 
																				Строка(ЗнДанных.Код), 
																				ЗнДанных.Наименование, 
																				ЕдИзм, 
																				РеквизитыЕдИзм, 
																				ДеревоРазбора, 
																				Ошибка
																			  );
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// пересчитаем с учетом коэфф-та
					// если есть свой-во ЕдиницаИзмерения, получим значение
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, 				"Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных)*Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										СтавкаНалога = ЭлектронныеДокументыПереопределяемый.НайтиПеречисление("НДС", Налог.ВеличинаСтавкиНалога);
										СписокТЧ.Добавить(СтавкаНалога,"СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаПродажи");
							ИначеЕсли ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "СуммаБезНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Цена") Тогда	
					СписокТЧ.Добавить(ЗнДанных, "ЦенаПродажи");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЦенаКомитента") Тогда	
					СписокТЧ.Добавить(ЗнДанных, "Цена");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаКомитента") Тогда	
					СписокТЧ.Добавить(ЗнДанных, "Сумма");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
				Иначе // остальное по именам
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЦикла;
			
			СтруктураИд = РазобратьИДТовара(ИдТовара);
			Номенклатура = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("Номенклатура",СтруктураИд.ИдТовара);
			Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
				ХарактеристикаНоменклатуры = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
				СписокТЧ.Добавить(ХарактеристикаНоменклатуры,"Характеристика");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
				УпаковкаНоменклатуры = ЭлектронныеДокументыПереопределяемый.ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
				СписокТЧ.Добавить(УпаковкаНоменклатуры,"Упаковка");
			КонецЕсли;

			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока 		= НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура, 
																		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");   // ссылка на объект в ДеревеСоответствий
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, Ошибка)
	
	ОтборБезСсылокНаОбъекты = Новый Структура;
	ОтборБезСсылокНаОбъекты.Вставить("СсылкаНаОбъект", Неопределено);
	ПорядокСозданияТиповОбъектов = ЭлектронныеДокументыПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов();
	Для Каждого СтрокаТипОбъекта Из ПорядокСозданияТиповОбъектов Цикл
		НайденнаяСтрокаТипа = ДеревоРазбора.Строки.Найти(СтрокаТипОбъекта.ТипОбъекта, "ТипОбъекта");
		Если НайденнаяСтрокаТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// всегда будет перезаполнять Номенклатуру поставщика
		Если СтрокаТипОбъекта.ТипОбъекта = "НоменклатураПоставщиков" Тогда
			Для Каждого СтрокаОбъекта Из НайденнаяСтрокаТипа.Строки Цикл
				СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), 
									СтрокаТипОбъекта.ТипОбъекта); 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе // обычным способом
			СтрокиБезСсылокНаОбъекты = НайденнаяСтрокаТипа.Строки.НайтиСтроки(ОтборБезСсылокНаОбъекты);
			Для Каждого СтрокаОбъекта Из СтрокиБезСсылокНаОбъекты Цикл
				СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), 
									СтрокаТипОбъекта.ТипОбъекта); 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРеквизитШапкиОбъекта(СтрокаЭлементов, ИмяРеквизита, ЗначениеРеквизита, СсылкаНаОбъект = Неопределено)
	
	// добавить в реквизиты шапки ЭлектронныеДокументы
	НовСтрока 							= СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит 					= ИмяРеквизита;
	НовСтрока.ЗначениеРеквизита 		= ЗначениеРеквизита;
	Если СсылкаНаОбъект <> Неопределено Тогда
		НовСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыТЧОбъекта(СтрокаЭлементов, ИмяТЧ, СписокРеквизитов)
	
	// добавить в реквизиты ТЧ ЭлектронныеДокументы
	НовСтрока 							= СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит 					= ИмяТЧ;
	Для Каждого ТекЭлСписка Из СписокРеквизитов Цикл
		НовСтрокаТЧ 					= НовСтрока.Строки.Добавить();
		НовСтрокаТЧ.Реквизит 			= ТекЭлСписка.Представление;
		НовСтрокаТЧ.ЗначениеРеквизита 	= ТекЭлСписка.Значение;
	КонецЦикла;;
	
КонецПроцедуры

Функция НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ЗначениеТипаОбъекта)
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ЗначениеТипаОбъекта, "ТипОбъекта");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Добавить();
		НайденнаяСтрока.ТипОбъекта = ЗначениеТипаОбъекта;
		НайденнаяСтрока.ИндексСтроки = Строка(ДеревоРазбора.Строки.Индекс(НайденнаяСтрока));
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции
  
Функция НайтиСоздатьСтрокуВДеревеРазбора(СтрокаТипаВДереве, ИдОбъекта, ОписаниеОбъекта, СсылкаНаОбъект, ДопРеквизиты, ДеревоРазбора, Ошибка)
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.СсылкаНаОбъект 	= СсылкаНаОбъект;
			НайденнаяСтрока.ИД				= ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта	= ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа	= ЭлектронныеДокументыПереопределяемый.ОпределитьТипОбъекта(СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки 	= СтрокаТипаВДереве.ИндексСтроки+"_"+Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе // проверим, что Описания совпадают по одной ссылке
			Если НЕ ЭлектронныеДокументыПереопределяемый.ЭтоНоменклатура(СсылкаНаОбъект) Тогда
				// проверим, что Описания совпадают по одной ссылке
				Если НайденнаяСтрока.ОписаниеОбъекта <> ОписаниеОбъекта Тогда
					// ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка в данных эл.документа: на один Объект <%1>, два Описания <%2> и <%3>'"), 
																							СсылкаНаОбъект, НайденнаяСтрока.ОписаниеОбъекта, ОписаниеОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
				КонецЕсли;
			Иначе // у номенклатуры может быть такое, в случае когда несколько элементов вход.данных имеют ссылку на один элемент спр-ка
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("СсылкаНаОбъект", 	СсылкаНаОбъект);
				ПараметрыОтбора.Вставить("ОписаниеОбъекта",	ОписаниеОбъекта);
				ПараметрыОтбора.Вставить("ИД", 				ИдОбъекта);
				НайденныеСтроки = СтрокаТипаВДереве.Строки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
					НайденнаяСтрока.СсылкаНаОбъект 	= СсылкаНаОбъект;
					НайденнаяСтрока.ИД				= ИдОбъекта;
					НайденнаяСтрока.ОписаниеОбъекта	= ОписаниеОбъекта;
					НайденнаяСтрока.ОписаниеТипа	= ЭлектронныеДокументыПереопределяемый.ОпределитьТипОбъекта(СтрокаТипаВДереве.ТипОбъекта);
					НайденнаяСтрока.ИндексСтроки 	= СтрокаТипаВДереве.ИндексСтроки+"_"+Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
					ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
				ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
				Иначе // непредвиденная ситуация
					// ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка в данных эл.документа: неуникальное описание для ИД <%1>, Описание <%2>'"), 
																							ИдОбъекта, ОписаниеОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИдОбъекта) Тогда
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ИдОбъекта, "ИД");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ИД		 		= ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта 	= ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа		= ЭлектронныеДокументыПереопределяемый.ОпределитьТипОбъекта(СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки		= СтрокаТипаВДереве.ИндексСтроки+"_"+Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Возврат НайденнаяСтрока;
		КонецЕсли;
	Иначе
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ОписаниеОбъекта, "ОписаниеОбъекта");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ОписаниеОбъекта 	= ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа		= ЭлектронныеДокументыПереопределяемый.ОпределитьТипОбъекта(СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки 	= СтрокаТипаВДереве.ИндексСтроки+"_"+Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Процедура ДобавитьДопРеквизиты(СтрокаДереваРазбора, ДопРеквизиты, ДеревоРазбора, Отказ = Ложь)
	
	Для Каждого ТекЭл Из ДопРеквизиты Цикл
		
		Если ТипЗнч(ТекЭл.Значение) = Тип("ОбъектXDTO") Тогда
		Иначе
			
			Если ЗначениеЗаполнено(ТекЭл.Значение) Тогда
				Если ТипЗнч(ТекЭл.Значение) = Тип("Массив") Тогда
					Для Каждого ТекЭлМассива Из ТекЭл.Значение Цикл
						Если ТипЗнч(ТекЭлМассива) = Тип("Структура") Тогда
							ДобавитьДопРеквизиты(СтрокаДереваРазбора, ТекЭлМассива, ДеревоРазбора, Отказ);	
						КонецЕсли;
					КонецЦикла;
				Иначе
					// поищем, возможно уже есть такой реквизит с таким же значением
					НайденнаяСтрока = СтрокаДереваРазбора.Строки.Найти(ТекЭл.Ключ, "Реквизит", Истина); // строка с реквизитом
					Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.ЗначениеРеквизита = ТекЭл.Значение Тогда // все совпало, пропустим
						Продолжить;	
					КонецЕсли;
					//
					НовСтрока = СтрокаДереваРазбора.Строки.Добавить();
					НовСтрока.Реквизит 			= ТекЭл.Ключ;
					НовСтрока.ЗначениеРеквизита = ТекЭл.Значение;
					// если ИндексСтроки, то попытка найти СсылкуНаОбъект
					Если ТипЗнч(НовСтрока.ЗначениеРеквизита) = Тип("Строка") Тогда
						НайденнаяСтрока = ДеревоРазбора.Строки.Найти(НовСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина); // строка с объектом
						Если НайденнаяСтрока <> Неопределено Тогда
							Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
								НовСтрока.СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает значение реквизита шапки электронного документа по его имени из строки разобранных данных.
//
// Параметры:
// СтрокаДерева - строка дерева значений, параметры разбора электронного документа,
// ИмяРеквизита - строка, имя реквизита, значение которого надо получить,
// ДеревоРазбора - дерево значений - полная структура с данными разбора электронного документа.
//
// Возвращаемое значение:
//   значение реквизита шапки электронного документа.
//
Функция ПолучитьРеквизитШапкиЭД(СтрокаДерева, ИмяРеквизита, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда 
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит");
	Иначе // передали строку с реквизитом
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // вернем ссылку
			Результат = НайденнаяСтрока.СсылкаНаОбъект;
		Иначе  // вернем значение реквизита
			Результат = НайденнаяСтрока.ЗначениеРеквизита;
			// если реквизит ссылочного типа (передали реквизит ДеревоРазбора), тогда нашли всего лишь индекс строки
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьИДТовара (знач ИД);
	СтруктураВозврата = Новый Структура("ИДТовара, ИДХарактеристики, ИДУпаковки");
	Если Не ЗначениеЗаполнено(ИД) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Поз = Найти(ИД,"#");
	Если Поз>0 Тогда
		СтруктураВозврата.ИДТовара = Сред(ИД,1,Поз-1);
		Если СтрДлина(ИД)>Поз Тогда
			Ид = Сред(ИД,Поз+1);
			Поз = Найти(ИД,"#");
			Если Поз>0 Тогда
				СтруктураВозврата.ИДХарактеристики = Сред(ИД,1,Поз-1);
			КонецЕсли;
			Если СтрДлина(ИД)>Поз Тогда
				СтруктураВозврата.ИДУпаковки = Сред(ИД,Поз+1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции

// Получает информацию о товаре в массиве ЭД 
//
// Параметры:
// МассивЭД - массив ссылок на элементы справочника ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о товаре.
//
Функция ПолучитьИнформациюОТоваре(МассивЭД) Экспорт
	
	КС80 = Новый КвалификаторыСтроки(80);
	КС255 = Новый КвалификаторыСтроки(255);
	КС3000 = Новый КвалификаторыСтроки(3000);
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ОписаниеТиповС80 = Новый ОписаниеТипов(МассивСтрока, , КС80);
	ОписаниеТиповС255 = Новый ОписаниеТипов(МассивСтрока, , КС255);
	ОписаниеТиповС3000 = Новый ОписаниеТипов(МассивСтрока, , КС3000);
	МассивТипЭД = Новый Массив;
	МассивТипЭД.Добавить(Тип("СправочникСсылка.ЭДПрисоединенныеФайлы"));
	ОписаниеТиповЭД = Новый ОписаниеТипов(МассивТипЭД);
	
	ТаблицаВозврата = Новый ТаблицаЗначений();
	ТаблицаВозврата.Колонки.Добавить("ИД", ОписаниеТиповС80);
	ТаблицаВозврата.Колонки.Добавить("Артикул", ОписаниеТиповС255);
	ТаблицаВозврата.Колонки.Добавить("Наименование", ОписаниеТиповС255);
	ТаблицаВозврата.Колонки.Добавить("БазоваяЕдиницаКод",ОписаниеТиповС255);
	ТаблицаВозврата.Колонки.Добавить("БазоваяЕдиницаНаименование",ОписаниеТиповС255);
	ТаблицаВозврата.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное",ОписаниеТиповС255);
	ТаблицаВозврата.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение",ОписаниеТиповС255);
	ТаблицаВозврата.Колонки.Добавить("Описание",ОписаниеТиповС3000);
	ТаблицаВозврата.Колонки.Добавить("ЭД",ОписаниеТиповЭД);
	ИменаДопКолонок = "";
	
	ОбъектXML = Новый ЧтениеXML;
	
	Для каждого ЭД из МассивЭД Цикл
		ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭД,,Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла") 
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			КонецЕсли;
			
			Если ИмяФайла = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Чтение электронного документа: ")+ ЭД + Символы.ПС;
				ТекстОшибки = ТекстОшибки + НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			ДанныеЭД.Записать(ИмяФайла);
			
			Если Найти(ДопИнформацияПоЭД.Расширение, "zip")>0 Тогда // формат zip 
				
				ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
				ПапкаДляРаспаковки = КаталогВременныхФайлов() + ЭД.УникальныйИдентификатор() + "\";
				
				Если ПапкаДляРаспаковки = Неопределено Тогда
					ТекстОшибки = НСтр("ru = 'Чтение электронного документа: ")+ ЭД + Символы.ПС;
					ТекстОшибки = ТекстОшибки + НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
				Продолжить;
				КонецЕсли;
				УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				
				ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
					ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
					Если Найти(РаспакованныйФайл.Имя,"packageDescription") Тогда //это пакет ЭД
						Продолжить;
					КонецЕсли;
					Попытка
						ОбъектXML.ОткрытьФайл(РаспакованныйФайл.ПолноеИмя);
						ЭД_XML = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
						НаборДанных = Неопределено;
						Если ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист","4.02") Тогда
							НаборДанных = ЭД_XML["Предложения"].Предложение;
						ИначеЕсли ЭД_XML.Тип() = ПолучитьТипЗначенияCML("Каталог","4.02") 
							ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("АктОПриемке","4.02")
							ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ТОРГ12","4.02")
							ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату","4.02")
							ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара","4.02") 
							ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара","4.02") 
							ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента","4.02") Тогда
								НаборДанных = ЭД_XML["Товары"].Товар;
						Иначе
							Если ЭлектронныеДокументыПереопределяемый.ДоступнаРольПолныеПрава() Тогда
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип при чтении данных из ЭД %1!'"), ЭД);
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							КонецЕсли;
							ОбъектXML.Закрыть();
							Продолжить;
						КонецЕсли;
						Для Каждого Элемент Из НаборДанных Цикл
							НовЗапись = ТаблицаВозврата.Добавить();
							НовЗапись.Ид = Элемент.ИД;
							НовЗапись.Наименование = Элемент.Наименование;
							НовЗапись.БазоваяЕдиницаКод = Элемент.БазоваяЕдиница.Код;
							НовЗапись.ЭД = ЭД;
							Если НЕ Элемент.Свойства().Получить("Артикул")=Неопределено Тогда
								НовЗапись.Артикул = Элемент.Артикул;
							КонецЕсли;
							Если НЕ Элемент.Свойства().Получить("Описание")=Неопределено Тогда
								НовЗапись.Описание = Элемент.Описание;
							КонецЕсли;
							Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Наименование")=Неопределено Тогда
								НовЗапись.БазоваяЕдиницаНаименование = Элемент.БазоваяЕдиница.Наименование;
							КонецЕсли;
							Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("НаименованиеПолное")=Неопределено Тогда
								НовЗапись.БазоваяЕдиницаНаименованиеПолное = Элемент.БазоваяЕдиница.НаименованиеПолное;
							КонецЕсли;
							Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("МеждународноеСокращение")=Неопределено Тогда
								НовЗапись.БазоваяЕдиницаМеждународноеСокращение = Элемент.БазоваяЕдиница.МеждународноеСокращение;
							КонецЕсли;
							Если НЕ Элемент.Свойства().Получить("ДополнительныеРеквизиты")=Неопределено Тогда
								Для Каждого ЭлементДанных из Элемент.ДополнительныеРеквизиты Цикл
									Если ТаблицаВозврата.Колонки.Найти("Доп_"+ЭлементДанных.Наименование)=Неопределено Тогда
										ТаблицаВозврата.Колонки.Добавить("Доп_"+ЭлементДанных.Наименование, ОписаниеТиповС255);
										ИменаДопКолонок = ИменаДопКолонок + ", "+ "Доп_"+ЭлементДанных.Наименование;
									КонецЕсли;
									Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
										НовЗапись["Доп_"+ЭлементДанных.Наименование] = ЭлементЗначения;
									КонецЦикла;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					Исключение
						Если ЭлектронныеДокументыПереопределяемый.ДоступнаРольПолныеПрава() Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возникла ошибка при чтении данных из ЭД %1: %2'"), ЭД, ОписаниеОшибки());
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						КонецЕсли;
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбъектXML.Закрыть();
	ТаблицаВозврата.Свернуть("ИД, Артикул, Наименование, БазоваяЕдиницаКод, БазоваяЕдиницаНаименование, БазоваяЕдиницаНаименованиеПолное, БазоваяЕдиницаМеждународноеСокращение, Описание, ЭД"+ИменаДопКолонок);
	Возврат ТаблицаВозврата;
КонецФункции // ПолучитьИнформациюОТоваре()

Функция СформироватьСтруктуруТовара()
	
	СтруктураВозврата = Новый Структура("Номенклатура, Характеристика, Упаковка");
	Возврат СтруктураВозврата;
	
КонецФункции
/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОСМОТРА ЭЛЕКТРОННЫХ ДОКУМЕНТОВ

// Формирует печатную форму электронного документа по файлу данных.
//
// Параметры: 
// ПолноеИмяФайла - строка, путь к файлу, по которому необходимо сформировать печатную форму.
// НаправлениеЭД - перечисление НаправлениеЭД
// ИД - уникальный идентификатор объекта ЭД
//
// Возвращаемое значение:
//   табличный документ с данными электронного документа.
//
Функция СформироватьПечатнуюФормуЭД(ПолноеИмяФайла, НаправлениеЭД, ИД=Неопределено) Экспорт
	
	Результат = СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДеревоРазбора = Результат.ДеревоРазбора;
	СтрокаОбъекта = Результат.СтрокаОбъекта;
       
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Портрет;
	
	Если ЗначениеЗаполнено(ИД) Тогда
		МакетИдентификатораДокумента = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ИдентификаторДокумента");
		ОбластьИдентификаторДокумента = МакетИдентификатораДокумента.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = ИД;
		ТабличныйДокумент.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;

	Попытка
		
		Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.Накладная Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеНакладнойДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументТОРГ12_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			ТабличныйДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора, "Заказ");
			ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, "Заказ");
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеЗаказаПоставщикуДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументЗаказПоставщику_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
				
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументСчетФактура_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			ТабличныйДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеПрайсЛистаДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументПрайсЛист_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеКаталогаТоваровДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументКаталогаТоваров_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот ТОгда
			
			ДанныеЭДДляПечати = ПолучитьДанныеАктовВыполненныхРаботДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументАктВыполненныхРабот_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеОтчетаОПродажахКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументОтчетаОПродажахКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеОтчетаОСписанииКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументОтчетОСписанииКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);	
			
		КонецЕсли;
		
		ТабличныйДокумент.АвтоМасштаб 			= Истина;
		ТабличныйДокумент.ОтображатьЗаголовки 	= Ложь;
		ТабличныйДокумент.ОтображатьСетку 		= Ложь;
		ТабличныйДокумент.ТолькоПросмотр 		= Истина;
		
		Возврат ТабличныйДокумент;
	Исключение
		Если ЭлектронныеДокументыПереопределяемый.ДоступнаРольПолныеПрава() Тогда
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки+Символы.ПС+ОписаниеОшибки(), ОписаниеОшибки());
			Сообщить(НСтр("ru='Ошибка формирования табличного документа!'"), СтатусСообщения.ОченьВажное);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, """", """""");
			Сообщить(НСтр("ru=""" + ТекстОшибки + """"), СтатусСообщения.Важное);
		КонецЕсли;	
       	Возврат Неопределено;
	КонецПопытки;	
КонецФункции	

/////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДЕРЕВОМ РАЗБОРА

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено)
	
	ЗначениеСтрокой = Строка(Значение);
	
	Если Найти(ЗначениеСтрокой, "_") > 0 Тогда
		СтрокаПоСсылке =  ДеревоРазбора.Строки.Найти(ЗначениеСтрокой, "ИндексСтроки", Истина);
	КонецЕсли;
	
	Возврат ?(СтрокаПоСсылке = Неопределено, Ложь, Истина);
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту)
	
	ПозТочки = Найти(ПутьКРеквизиту, ".");
	Если ПозТочки > 0 Тогда
		ИмяГлавногоРеквизита	 = Лев(ПутьКРеквизиту, ПозТочки - 1);
		ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);
	Иначе
		ИмяГлавногоРеквизита	 = ПутьКРеквизиту;
		ИмяПодчиненногоРеквизита = "";
	КонецЕсли;
	
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");
		
	Если ГлавныйРеквизит <> Неопределено Тогда
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		Если ИмяПодчиненногоРеквизита <> "" Тогда
			СтрокаПоСсылке = Неопределено;
			Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
				Возврат ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаПоСсылке, ИмяПодчиненногоРеквизита);
			КонецЕсли;
			
			// Нет возможности получить значение подчиненного реквизита
			Возврат Неопределено;
			
		Иначе
			// Не требуется получать значение подчиненного реквизита
			Возврат ЗначениеГлавногоРеквизита
		КонецЕсли;
	Иначе
		// Нет такого реквизита
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД)
	
	ДеревоРазбора = Новый ДеревоЗначений;
	ДеревоРазбора.Колонки.Добавить("ТипОбъекта");
	ДеревоРазбора.Колонки.Добавить("СсылкаНаОбъект");
	ДеревоРазбора.Колонки.Добавить("ОписаниеТипа");
	ДеревоРазбора.Колонки.Добавить("ИндексСтроки");
	ДеревоРазбора.Колонки.Добавить("Реквизит");
	ДеревоРазбора.Колонки.Добавить("ЗначениеРеквизита");
	ДеревоРазбора.Колонки.Добавить("ОписаниеОбъекта");
	ДеревоРазбора.Колонки.Добавить("ВидЭД");
	ДеревоРазбора.Колонки.Добавить("ИД");
	ДеревоРазбора.Колонки.Добавить("НаправлениеЭД");
	
	НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НаправлениеЭД = Неопределено Тогда 
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	Иначе 
		НовыйЭД.НаправлениеЭД = НаправлениеЭД;
	КонецЕсли;
	
	Результат = ПрочитатьФайлCMLпоXDTO(ПолноеИмяФайла, ДеревоРазбора, НовыйЭД);
	
	Если НЕ Результат Тогда // ошибка разбора ЭД
		Возврат Неопределено;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти("ЭлектронныеДокументы","ТипОбъекта"); // раздел ЭлектронныеДокументы
	СтрокаОбъекта = НайденнаяСтрока.Строки[0];
	
	Возврат Новый Структура("ДеревоРазбора, СтрокаОбъекта", ДеревоРазбора, СтрокаОбъекта);

	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ТОРГ-12

Функция ПолучитьДанныеНакладнойДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	СведенияОКонтрагенте.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
	 ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Код"));
	СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.КоррСчет"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий  
	 ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ПолноеНаименование"));
	СведенияОГрузоотправителе.Вставить("ИНН", 				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ИНН"));
	СведенияОГрузоотправителе.Вставить("КодПоОКПО", 		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ОКПО"));
	СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ЮридическийАдрес_Представление"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ФактическийАдрес_Представление"));
	СведенияОГрузоотправителе.Вставить("НомерСчета",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.НомерСчета"));
	СведенияОГрузоотправителе.Вставить("Банк",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Наименование"));
	СведенияОГрузоотправителе.Вставить("БИК",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Код"));
	СведенияОГрузоотправителе.Вставить("КоррСчет",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.КоррСчет"));
	Контакты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.Контакты");
	Если ТипЗнч(Контакты) = Тип("ТаблицаЗначений") И Контакты.Количество()>0 Тогда
		Строка = Контакты.Найти(ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонКонтрагента"),"Вид");
	КонецЕсли;
		
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);

	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ПолноеНаименование"));
	СведенияОГрузополучателе.Вставить("ИНН", 			   	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ИНН"));
	СведенияОГрузополучателе.Вставить("КодПоОКПО", 		 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ОКПО"));
	СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ЮридическийАдрес_Представление"));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ФактическийАдрес_Представление"));
	СведенияОГрузополучателе.Вставить("НомерСчета",		 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.НомерСчета"));
	СведенияОГрузополучателе.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Наименование"));
	СведенияОГрузополучателе.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Код"));
	СведенияОГрузополучателе.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.КоррСчет"));
			
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
            	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПодразделения","");
	ДанныеЗаполненияШапки.Вставить("ОрганизацияПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ПоставщикПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПлательщика",	"");
	ДанныеЗаполненияШапки.Вставить("ПлательщикПоОКПО",			"");
	
	ДанныеЗаполненияШапки.Вставить("Основание",			"");
	ДанныеЗаполненияШапки.Вставить("ОснованиеНомер",	"");
	ДанныеЗаполненияШапки.Вставить("ОснованиеДата",		"");
	
	ДанныеЗаполненияШапки.Вставить("Номер",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	
	ДанныеЗаполненияШапки.Вставить("Курс", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "АдресДоставки"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("ВидУпаковки");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Коэффициент");
	ТЗ.Колонки.Добавить("МассаБрутто");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");

	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий  
	 ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ИмяНоменклатуры = "Номенклатура";
	Иначе
		ИмяНоменклатуры = "НоменклатураПоставщика";
	КонецЕсли;
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.ТоварКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, ИмяНоменклатуры+".Наименование");
		
		НоваяСтрока.БазоваяЕдиницаНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Код");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Коэффициент = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Коэффициент");
		
		НоваяСтрока.МассаБрутто = "";
		
		ВидУпаковки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Упаковка.Наименование");
		
		НоваяСтрока.ВидУпаковки = ?(ЗначениеЗаполнено(ВидУпаковки), ВидУпаковки, НоваяСтрока.БазоваяЕдиницаНаименование);
		
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СуммаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.СуммаНДС),НоваяСтрока.СуммаНДС,0);
		Если Не ЗначениеЗаполнено (НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = "Без НДС";
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ ТОРГ-12.
//
Процедура ЗаполнитьТабличныйДокументТОРГ12_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ТОРГ12");
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_ТОРГ12";
	
	ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати.Шапка, Макет, ТабличныйДокумент);
		
	НомерСтраницы = 1;
	ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		
	КоэффициентПересчета = 1;
	ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);
		
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	
	// Выводим табличную часть документа
	ТЧТовары = ДанныеПечати.Товары;
	
	КоличествоСтрок = ТЧТовары.Количество();
	
	Для Каждого СтрокаТовары Из ТЧТовары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	
		Если ЗначениеЗаполнено(СтрокаТовары.Коэффициент) Тогда
			ДанныеСтроки.Мест = СтрокаТовары.Коэффициент * СтрокаТовары.Количество;
		КонецЕсли;
		
		ДанныеСтроки.КоэффициентПересчета  = СтрокаТовары.Коэффициент;
		ДанныеСтроки.Количество  = СтрокаТовары.Количество;
	
		ДанныеСтроки.СуммаСНДС   = СтрокаТовары.СуммаСНДС;
		ДанныеСтроки.СуммаНДС    = СтрокаТовары.СуммаНДС;
		ДанныеСтроки.СуммаБезНДС = СтрокаТовары.Сумма;
	
		ДанныеСтроки.Цена = СтрокаТовары.Цена;
	
		ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);

		
		Если ДанныеСтроки.Номер = 1 Тогда // первая строка
			
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			
			Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
				
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				
			КонецЕсли;
			
			Если ДанныеСтроки.Номер <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// Очистим итоги по странице.
				ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
		
	КонецЦикла;
		
	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ДанныеСтроки.Номер, Строка(ДанныеПечати.Шапка.КодВалюты));
	ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати.Шапка, ИтоговыеСуммы, Макет, ТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьТабличныйДокументТОРГ12()

// Процедура заполнения реквизитов шапки ТОРГ-12.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	Макет - Макет ТОРГ-12
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.НомерДокумента = ДанныеПечати.Номер;
	ОбластьМакета.Параметры.ДатаДокумента  = ДанныеПечати.Дата;
	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(ДанныеПечати.СведенияОГрузоотправителе,
		"ПолноеНаименование,ИНН,ФактическийАдрес,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(ДанныеПечати.СведенияОГрузополучателе, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,НомерСчета,Банк,БИК,КоррСчет");
		
	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(ДанныеПечати.СведенияОПоставщике);
		
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(ДанныеПечати.СведенияОПокупателе);
	
	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = ДанныеПечати.СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО  = ДанныеПечати.СведенияОПокупателе.КодПоОКПО;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьРеквизитыШапкиТОРГ12()

// Процедура заполнения реквизитов подвала ТОРГ-12.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	Макет - Макет ТОРГ-12
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, ТабличныйДокумент)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
	ПолнаяДатаДокумента = Формат(ДанныеПечати.Дата, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
	ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
	
	Если ИтоговыеСуммы.ИтогоМест > 0 Тогда
		ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМест, ,",,,,,,,,0");
	КонецЕсли;
	
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью;
	ОбластьМакета.Параметры.СуммаПрописью = ИтоговыеСуммы.СуммаПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаТОРГ12()

///////////////////////////////////////////////////////////////////////////////
// СЧЕТ (ЗАКАЗ КЛИЕНТА)

Функция ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора, Тип = "Счет")
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
    	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияООрганизации);
	КонецЕсли;

	ДанныеЗаполненияШапки.Вставить("БИКБанкаПолучателя",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкПолучателяПредставление",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаПолучателяПредставление",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	ДанныеЗаполненияШапки.Вставить("СчетПолучателяПредставление",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	ДанныеЗаполненияШапки.Вставить("БИКБанкаКорреспондента",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкКорреспондент",					ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаКорреспондента",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.КоррСчет"));
	
	ДанныеЗаполненияШапки.Вставить("Номер",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СрокПлатежа"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа", 		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаОкончанияДействияСчета"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("Руководитель", 		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Руководитель"));
	ДанныеЗаполненияШапки.Вставить("Бухгалтер", 		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Бухгалтер"));
	ДанныеЗаполненияШапки.Вставить("НазначениеПлатежа", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НазначениеПлатежа"));
	ДанныеЗаполненияШапки.Вставить("Сумма", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СуммаИтог"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДополнительнаяИнформация"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЦенаВключаетНДС"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Наименование");
			ИДТовара = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
			Поз = Найти(ИДТовара,"#");
			Если Поз>0 Тогда
				ИдТовара = Сред(ИДТовара, 1, Поз-1);
			КонецЕсли;
			НоваяСтрока.Код = ИДТовара;
		ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
			НоваяСтрока.Код	  = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		КонецЕсли;
		
		НоваяСтрока.Артикул				= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		
		Упаковка						= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения");
		БазоваяЕдиницаИзмерения 		= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
		
		НоваяСтрока.ЕдиницаИзмерения 	= ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.Количество			= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоУпаковок");
		
		НоваяСтрока.Цена				= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма				= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС			= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС			= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки			= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
						
	КонецЦикла;
	
	//ЭтапыОплаты
		
	ТЗЭтапыОплаты = Новый ТаблицаЗначений;
	
	Если Тип = "Заказ" Тогда
		ТЗЭтапыОплаты.Колонки.Добавить("ВариантОплаты");
	КонецЕсли;
	ТЗЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("ПроцентПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("СуммаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("НомерСтроки");
	НомерСтроки = 1;
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ЭтапыГрафикаОплаты"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗЭтапыОплаты.Добавить();
		Если Тип = "Заказ" Тогда
			НоваяСтрока.ВариантОплаты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ВариантОплаты");
		КонецЕсли;
        НоваяСтрока.ДатаПлатежа   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаПлатежа");
		НоваяСтрока.ПроцентПлатежа= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПроцентПлатежа");
		НоваяСтрока.СуммаПлатежа  = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаПлатежа");
		НоваяСтрока.НомерСтроки   = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	 КонецЦикла;
		
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 		ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", 	ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыОплаты",ТЗЭтапыОплаты);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Счет-заказ.
//
Процедура ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеПечати, Тип = "Счет")
	
	ИспользоватьРучныеСкидки         = ЭлектронныеДокументыПереопределяемый.ПолучитьЗначениеФункциональнойОпции("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ЭлектронныеДокументыПереопределяемый.ПолучитьЗначениеФункциональнойОпции("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_СчетЗаказ");
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_СчетЗаказ";
	
	ТаблицаТовары = ДанныеПечати.Товары;
	
	Если ТаблицаТовары.Количество()> 0  Тогда
		ЧастичнаяОплата = Ложь;
	Иначе
		ЧастичнаяОплата = Истина;
	КонецЕсли;	
	
	ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
    	
	ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
	ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС")<> Неопределено И ТаблицаТовары.Итог("СуммаНДС")>0);
	
	Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки ТОгда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДССоСкидкой");
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДСИлиСоСкидкой");
	Иначе
		ОбластьКолонкаТовар = Макет.Область("Товар");
	КонецЕсли;
	
	Если НЕ ВыводитьКоды Тогда
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
		КонецЕсли;
		
	КонецЕсли;
	
	Если  ЕстьСкидки ТОгда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
	
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		
	КонецЕсли;
	
	ТаблицаЭтапыОплаты = Новый ТаблицаЗначений;
	ТаблицаЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	Если ДанныеПечати.Свойство("ДатаПлатежа") Тогда
		НовСтрока = ТаблицаЭтапыОплаты.Добавить();
		НовСтрока.ДатаПлатежа = ДанныеПечати.ДатаПлатежа;
	КонецЕсли; 
	
	ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип);
	
	СоответствиеСтавокНДС = ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеСтавокНДС();
	
	Если ЧастичнаяОплата Тогда
		
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЧастичнаяОплата"));
			
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЧастичнаяОплата");
		
		ОбластьСтрокаТаблицы.Параметры.Товар = ДанныеПечати.Шапка.НазначениеПлатежа;
		ОбластьСтрокаТаблицы.Параметры.Сумма = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
		ОбластьИтого = Макет.ПолучитьОбласть("ИтогоЧастичнаяОплата");
		ОбластьИтого.Параметры.Всего = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтого);
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СуммаНДС) Тогда
	
			ОбластьНДС = Макет.ПолучитьОбласть("ИтогоНДСЧастичнаяОплата");
			ОбластьНДС.Параметры.НДС = "В т.ч. НДС:";
			ОбластьНДС.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;
			ТабличныйДокумент.Вывести(ОбластьНДС);
		КонецЕсли;
    			
	Иначе		
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
			
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки ТОгда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");

			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		КонецЕсли;
		
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок	   = 0;
		ВсегоБезСкидок = 0;
		
		НомерСтроки = 0;
		
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодов.Параметры.Артикул = СтрокаТовары[КолонкаКодов];
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ОбластьТовар.Параметры.Товар = СтрокаТовары.Товар;
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
			
			Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
				СуммаПоСтроке = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
			Иначе	
				СуммаПоСтроке = СтрокаТовары.Сумма;
			КонецЕсли;	
			
			ОбластьДанных.Параметры.Сумма = СуммаПоСтроке;
			
			
			Если ЕстьСкидки ТОгда
				СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаТовары.СуммаСкидки), СтрокаТовары.СуммаСкидки,0);
				ОбластьДанных.Параметры.СуммаБезСкидки = СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
					
			Если ЕстьСкидки Тогда
				ВсегоСкидок = ВсегоСкидок + СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			Сумма          = Сумма          + СуммаПоСтроке;
			СуммаНДС       = СуммаНДС       + СтрокаТовары.СуммаНДС;
			
		КонецЦикла;
		
		Если  ЕстьСкидки ТОгда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
			
		ОбластьДанных.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);
		
		Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСуммаНДС = ЭлектронныеДокументыПереопределяемый.ФорматСумм(СуммаНДС);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСкидок = ЭлектронныеДокументыПереопределяемый.ФорматСумм(ВсегоСкидок);
			ОбластьДанных.Параметры.ВсегоБезСкидок = ЭлектронныеДокументыПереопределяемый.ФорматСумм(ВсегоБезСкидок);
		КонецЕсли;	
			
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Вывести ИтогоНДС
					
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
			
			Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
					
					ПараметрыОтбора = Новый Структура();
					ПараметрыОтбора.Вставить("СтавкаНДС", ТекСтавкаНДС.Ключ);
					НайденныеСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() > 0 Тогда
						ТаблицаТоварыНДС = ТаблицаТовары.Скопировать(НайденныеСтроки, "СуммаНДС");
						ТаблицаТоварыНДС.Свернуть(,"СуммаНДС");
						СоответствиеСтавокНДС.Вставить(ТекСтавкаНДС.Ключ, ТаблицаТоварыНДС[0].СуммаНДС);
						
						ТабличныйДокумент.Вывести(ОбластьНомера);
						
						Если ВыводитьКоды Тогда
							ТабличныйДокумент.Присоединить(ОбластьКодов);
						КонецЕсли;
						
						ТабличныйДокумент.Присоединить(ОбластьТовар);
						
						ОбластьДанных.Параметры.НДС = ЭлектронныеДокументыПереопределяемый.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, ДанныеПечати.Шапка.ЦенаВключаетНДС);
						ОбластьДанных.Параметры.ВсегоНДС = ЭлектронныеДокументыПереопределяемый.ФорматСумм(ТаблицаТоварыНДС[0].СуммаНДС);
						ТабличныйДокумент.Присоединить(ОбластьДанных);
						
					КонецЕсли;
					
				КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	 ТаблицаЭтапыОплаты = ДанныеПечати.ЭтапыОплаты;
		Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты"));
			Область = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");
			Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
				Область.Параметры.Заполнить(ТекЭтап);
				Область.Параметры.ТекстНДС = ЭлектронныеДокументыПереопределяемый.СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ТекЭтап.ПроцентПлатежа);
				ТабличныйДокумент.Вывести(Область);
			КонецЦикла;
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ИтогоЭтапыОплаты"));
		КонецЕсли;
	
	
	ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип);
	              	
КонецПроцедуры // ЗаполнитьТабличныйДокументСчетЗаказ()

// Процедура заполнения реквизитов шапки счета, заказа.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	Макет - Макет СчетЗаказ
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип)
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	СведенияОПолучателе = ДанныеПечати.Шапка.СведенияОПолучателе;
	
	Если Тип = "Счет" Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДатаПлатежа) Тогда
			
			НадписьСрокДействия = НСтр("ru='Счет действителен до %СрокДействия%. '");
			НадписьСрокДействия = СтрЗаменить(НадписьСрокДействия, "%СрокДействия%", Формат(ДанныеПечати.Шапка.ДатаПлатежа, "ДЛФ=D"));
			ОбластьМакета.Параметры.СрокДействия = НадписьСрокДействия;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИНН             = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП             = СведенияОПоставщике.КПП;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.БанкКорреспондент) Тогда
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаКорреспондента;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкКорреспондент;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаКорреспондента;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
		Иначе	
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаПолучателя;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкПолучателяПредставление;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетПолучателяПредставление;
		КонецЕсли;	
		
		ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
	Если Тип = "Счет" Тогда
		ТекстЗаголовка = НСтр("ru='Счет на оплату № %НомерДокумента% от %ДатаДокумента% г.'");
	ИначеЕсли Тип = "Заказ" Тогда
		ТекстЗаголовка = НСтр("ru='Заказ клиента № %НомерДокумента% от %ДатаДокумента% г.'");
	КонецЕсли;
	
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ТекстПоставщик = ?(Тип = "Счет", НСтр("ru='Поставщик:'"), НСтр("ru='Исполнитель:'"));
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ТекстПокупатель         = ?(Тип = "Счет", НСтр("ru='Покупатель:'"), НСтр("ru='Заказчик:'"));
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПолучателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета                             = Макет.ПолучитьОбласть("НазначениеПлатежа");
		ОбластьМакета.Параметры.НазначениеПлатежа = ДанныеПечати.Шапка.НазначениеПлатежа;      
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьРеквизитыШапкиСчетЗаказ()

// Процедура заполнения реквизитов подвала счета, заказа.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	Макет - Макет СчетЗаказ
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип)

	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация) Тогда
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		ОбластьМакета.Параметры.ФИОРуководителя = ДанныеПечати.Шапка.Руководитель;
		ОбластьМакета.Параметры.ФИОБухгалтера 	= ДанныеПечати.Шапка.Бухгалтер;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаСчетЗаказ()
 
///////////////////////////////////////////////////////////////////////////////
// ЗАКАЗ ПОСТАВЩИКУ

Функция ПолучитьДанныеЗаказаПоставщикуДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	КонецЕсли;
     	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	КонецЕсли;
    	
	ДанныеЗаполненияШапки.Вставить("Номер",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДополнительнаяИнформация"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЦенаВключаетНДС"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("НаименованиеНоменклатурыПоставщика");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
			или СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				НоваяСтрока.Товар = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
				НоваяСтрока.НаименованиеНоменклатурыПоставщика = НоваяСтрока.Товар;
				НоваяСтрока.Код = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
				НоваяСтрока.Артикул = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Наименование");
			НоваяСтрока.НаименованиеНоменклатурыПоставщика = НоваяСтрока.Товар;
			ИДТовара = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
			Поз = Найти(ИДТовара,"#");
			Если Поз>0 Тогда
				ИдТовара = Сред(ИДТовара, 1, Поз-1);
			КонецЕсли;
			НоваяСтрока.Код = ИДТовара;
			НоваяСтрока.Артикул = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Артикул");
		КонецЕсли;
		Упаковка = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения");
		БазоваяЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
		
		НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоУпаковок");
		
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Заказ поставщику".
//
Процедура ЗаполнитьТабличныйДокументЗаказПоставщику_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	ИспользоватьРучныеСкидки = ЭлектронныеДокументыПереопределяемый.ПолучитьЗначениеФункциональнойОпции("ИспользоватьРучныеСкидкиВЗакупках");
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ЗаказПоставщику");
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_ЗаказПоставщику";
	
	ТаблицаТовары = ДанныеПечати.Товары;
	
	КолонкаКодов  = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
	ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС")<> Неопределено И ТаблицаТовары.Итог("СуммаНДС")>0);
	
	ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки);
	
	Если ЕстьСкидки Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСУсловиемИлиСоСкидкой");
	Иначе
		ОбластьКолонкаТовар = Макет.Область("Товар");
	КонецЕсли;
    
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
	КонецЕсли;
	
	Если ЕстьСкидки ТОгда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
			
	Иначе
			
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
			
	КонецЕсли;
 
	// Заполнить реквизиты шапки
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = НСтр("ru='Заказ поставщику № %НомерДокумента% от %ДатаДокумента% г.'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(ДанныеПечати.Шапка.СведенияОПоставщике, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(ДанныеПечати.Шапка.СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	
	Если ВыводитьКоды Тогда
		
		ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
		ТабличныйДокумент.Присоединить(ОбластьКодов);
		
	КонецЕсли;
	
	ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
			
	Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
	КонецЕсли;
	
	Сумма          = 0;
	СуммаНДС       = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	
	НомерСтроки = 0;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.Артикул = СтрокаТовары[КолонкаКодов];
			ТабличныйДокумент.Присоединить(ОбластьКодов);
			
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = СтрокаТовары.НаименованиеНоменклатурыПоставщика;
				
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
		СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаТовары.СуммаСкидки),СтрокаТовары.СуммаСкидки,0);
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			СуммаПоСтроке = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
		Иначе
			СуммаПоСтроке = СтрокаТовары.Сумма;
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.СуммаБезСкидки = СуммаПоСтроке + СуммаСкидки;
		КонецЕсли;				
		
		ОбластьДанных.Параметры.Сумма = СуммаПоСтроке;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		 		
		Сумма     = Сумма + СуммаПоСтроке;
		СуммаНДС  = СуммаНДС + СтрокаТовары.СуммаНДС;
		
		Если ЕстьСкидки Тогда
			ВсегоСкидок    = ВсегоСкидок    + СуммаСкидки;
			ВсегоБезСкидок = ВсегоБезСкидок + СуммаПоСтроке + СуммаСкидки;
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЕстьСкидки Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
			
	Иначе
			
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
			
	КонецЕсли;

		
	ТабличныйДокумент.Вывести(ОбластьНомера);
	
	Если ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	
	Если ЕстьСкидки Тогда
	
		ОбластьДанных.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			
	КонецЕсли;
	
	ОбластьДанных.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	
	// Вывести ИтогоНДС
	
	Если ДанныеПечати.УчитыватьНДС Тогда
		
		ОбластьНомера      = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
		ОбластьКодов       = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
		ОбластьТовар       = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
		ОбластьДанных      = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			ОбластьДанных.Параметры.НДС = НСтр("ru='В том числе НДС:'");
		Иначе	
			ОбластьДанных.Параметры.НДС = НСтр("ru='Сумма НДС:'");
		КонецЕсли;	
		ОбластьДанных.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		
	ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация) Тогда
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
		
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЧЕТ-ФАКТУРА

Функция ПолучитьДанныеСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОПоставщике = Новый Структура;
	СведенияОПоставщике.Вставить("Представление",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Наименование"));
	СведенияОПоставщике.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОПоставщике.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОПоставщике.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОПоставщике.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОПоставщике);
	
	СведенияОПокупателе = Новый Структура;
	СведенияОПокупателе.Вставить("Представление",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Наименование"));
	СведенияОПокупателе.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияОПокупателе.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияОПокупателе.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.КПП"));
	СведенияОПокупателе.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОПокупателе);
	
	ДанныеЗаполненияШапки.Вставить("АдресДоставки", "");
	
	ДанныеЗаполненияШапки.Вставить("Номер",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЦенаВключаетНДС"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("КоличествоМест");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.ТоварКод					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
		НоваяСтрока.ТоварНаименование			= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Наименование");
		
		НоваяСтрока.КоличествоМест				= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоУпаковок");
		НоваяСтрока.Количество					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		
		Упаковка								= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения");
		БазоваяЕдиницаИзмерения 				= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
		
		НоваяСтрока.ЕдиницаИзмерения 			= ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		
		НоваяСтрока.Цена						= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма						= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Счет-фактура".
//
Процедура ЗаполнитьТабличныйДокументСчетФактура_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_СчетФактура451");
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Выводим общие реквизиты шапки
	ЗаполнитьРеквизитыШапкиСчетФактура(ДанныеПечати.Шапка, Макет, ТабличныйДокумент);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.Валюта = "" + ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ДанныеПечати.Шапка.КодВалюты) + " (" + ДанныеПечати.Шапка.КодВалюты + ")";
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	
	НомерСтраницы   = 1;
	
	// Инициализация итогов в документе
	ИтоговыеСуммы = СтруктураИтоговыеСуммы();
	
	КоэффициентПересчета = 1;
	ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		
		Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьИтого);
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;
		
		Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			НомерСтраницы = НомерСтраницы + 1;
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
		
		ЗаполнитьРеквизитыСтрокиТовара(ДанныеПечати.Шапка, СтрокаТовары, ДанныеСтроки, ОбластьМакета);
		ОбластьМакета.Параметры.Акциз = "--";
		
		ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
		
	КонецЦикла;
	
	// Выводим итоги по документу
	ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ДанныеСтроки.Номер, ДанныеПечати.Шапка.КодВалюты);
	ЗаполнитьРеквизитыПодвалаСчетФактура(ДанныеПечати.Шапка, ИтоговыеСуммы, Макет, ТабличныйДокумент);

КонецПроцедуры
	
Процедура ЗаполнитьРеквизитыШапкиСчетФактура(ДанныеПечати, Макет, ТабличныйДокумент)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.Номер = "Счет-фактура № " + ДанныеПечати.Номер + " от " + Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'")+ " г.";
	
	СведенияОПоставщике = ДанныеПечати.СведенияОПоставщике;
	СведенияОПокупателе = ДанныеПечати.СведенияОПокупателе;
	
	// Выводим данные о поставщике.
	ПолноеНаименованиеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование");
	Если НЕ ЗначениеЗаполнено(СведенияОПоставщике.Представление) Тогда 
		СведенияОПоставщике.Представление = ПолноеНаименованиеПоставщика;
	КонецЕсли;
	ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " + СведенияОПоставщике.Представление;
	Если СведенияОПоставщике.Представление <> ПолноеНаименованиеПоставщика Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбластьМакета.Параметры.ПредставлениеПоставщика
		+ " ("
		+ ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование")
		+ ")";
	КонецЕсли;
	ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " + ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес");
	
	КПП = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	ОбластьМакета.Параметры.ИННПоставщика = "ИНН/КПП продавца: " 
		+ ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь)
		+ ?(Не ПустаяСтрока(КПП), "/" + КПП, "");
		
	// Выводим данные грузоотправителя.	
	ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: ";
	ПредставлениеГрузоотправителя = ПредставлениеГрузоотправителя + "он же";
	ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ПредставлениеГрузоотправителя;
	
	// Выводим данные грузополучателя и покупателя.
	ПредставлениеГрузополучателя = "Грузополучатель и его адрес: ";
	ПредставлениеГрузополучателя = ПредставлениеГрузополучателя
		 + ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь)
		 + ?(Не ПустаяСтрока(ДанныеПечати.АдресДоставки), ", " + СокрЛП(ДанныеПечати.АдресДоставки), "");
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
	
	ОбластьМакета.Параметры.ПоДокументу = "К платежно-расчетному документу № ";
	ОбластьМакета.Параметры.ПоДокументу = ОбластьМакета.Параметры.ПоДокументу + "-- от --";
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " 
		+ ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь);
	ОбластьМакета.Параметры.АдресПокупателя = "Адрес: "
		+ ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь);
		
	КПП = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);	
	ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: "
		+ ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь)
		+ ?(Не ПустаяСтрока(КПП), "/" + КПП, "");

	ТабличныйДокумент.Вывести(ОбластьМакета);
		
КонецПроцедуры // ЗаполнитьРеквизитыШапкиСчетФактура()

// Процедура заполнения реквизитов подвала Счет-фактуры.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	Макет - Макет ТОРГ-12
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаСчетФактура(ДанныеПечати, ИтоговыеСуммы, Макет, ТабличныйДокумент)
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьИтого.Параметры.ИтогоСуммаНДС = ИтоговыеСуммы.ИтогоНДС;
	ОбластьИтого.Параметры.ИтогоВсего = ИтоговыеСуммы.ИтогоСуммаСНДС;
	
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	
	ТабличныйДокумент.Вывести(ОбластьПодвала);
		
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаСчетФактура()

///////////////////////////////////////////////////////////////////////////////
// ПРАЙС-ЛИСТ

Функция ПолучитьДанныеПрайсЛистаДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОПоставщике = Новый Структура;
	СведенияОПоставщике.Вставить("Представление",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Наименование"));
	СведенияОПоставщике.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОПоставщике);
	ДанныеЗаполненияШапки.Вставить("ДатаФормирования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаФормирования"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Цена");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Артикул				= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		НоваяСтрока.Код					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
		НоваяСтрока.Товар				= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Наименование");
		НоваяСтрока.ЕдиницаИзмерения 	= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Упаковка.Наименование");
		НоваяСтрока.Цена				= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Количество			= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПрайсЛист_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ПрайсЛист");
	
	ОбластьЗаголовок	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка		= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока		= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвал		= Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьЗаголовок.Параметры.ДатаФормирования = Формат(ДанныеПечати.Шапка.ДатаФормирования, "ДЛФ = Д");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати.Шапка);
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	ОбластьШапка.Параметры.ПредставлениеПоставщика = ?(ЗначениеЗаполнено(СведенияОПоставщике.ПолноеНаименование),
													   СведенияОПоставщике.ПолноеНаименование,
													   СведенияОПоставщике.Представление);
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ТаблицаТовары = ДанныеПечати.Товары;
	НомерСтроки = 1;
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// КАТАЛОГ ТОВАРОВ

Функция ПолучитьДанныеКаталогаТоваровДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОПоставщике = Новый Структура;
	СведенияОПоставщике.Вставить("Представление",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Наименование"));
	СведенияОПоставщике.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОПоставщике);
	ДанныеЗаполненияШапки.Вставить("ДатаФормирования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаФормирования"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Артикул				= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Артикул");
		НоваяСтрока.Код					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
		НоваяСтрока.Товар				= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Наименование");
		
		Упаковка						= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения.Наименование");
//		БазоваяЕдиницаИзмерения 		= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
		
		//НоваяСтрока.ЕдиницаИзмерения 	= ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.ЕдиницаИзмерения 	= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.ЕдиницаИзмерения.Наименование");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументКаталогаТоваров_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_КаталогТоваров");
	
	ОбластьЗаголовок	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка		= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока		= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвал		= Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьЗаголовок.Параметры.ДатаФормирования = Формат(ДанныеПечати.Шапка.ДатаФормирования, "ДЛФ = Д");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати.Шапка);
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	ОбластьШапка.Параметры.ПредставлениеПоставщика = ?(ЗначениеЗаполнено(СведенияОПоставщике.ПолноеНаименование),
													   СведенияОПоставщике.ПолноеНаименование,
													   СведенияОПоставщике.Представление);
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ТаблицаТовары = ДанныеПечати.Товары;
	НомерСтроки = 1;
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры
 
///////////////////////////////////////////////////////////////////////////////
//АКТ ВЫПОЛНЕННЫХ РАБОТ

Функция ПолучитьДанныеАктовВыполненныхРаботДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("РасчетныйСчет",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("КорСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("РасчетныйСчет",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("КорСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Код"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	
	ДанныеЗаполненияШапки.Вставить("Курс", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Код"));
		
	ДанныеЗаполненияШапки.Вставить("ТекстШапки", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Заголовок"));
	ДанныеЗаполненияШапки.Вставить("ОписаниеВыполненныхРабот", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ОписаниеВыполненныхРабот"));
	ДанныеЗаполненияШапки.Вставить("Претензии", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Претензии"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЦенаВключаетНДС"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	ТЗ.Колонки.Добавить("Содержание");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.ТоварКод					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
		НоваяСтрока.ТоварНаименование			= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Наименование");
		НоваяСтрока.Содержание 					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Содержание");
		
		НоваяСтрока.БазоваяЕдиницаНаименование 	= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ 	= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Код");
		НоваяСтрока.Количество					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
						
		НоваяСтрока.Цена						= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма						= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаСНДС					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СтавкаНДС					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		НоваяСтрока.СуммаСкидки					= ?(НоваяСтрока.СуммаСкидки=Неопределено,0,НоваяСтрока.СуммаСкидки);
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Акт выполненных работ.
//
Процедура ЗаполнитьТабличныйДокументАктВыполненныхРабот_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРабот_Акт";
		
	ТаблицаУслуг = ДанныеПечати.Товары;
	ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаУслуг, Истина);
	Если ТаблицаУслуг.Итог("СуммаНДС")> 0 Тогда
		ЕстьНДС = истина;
	Иначе	
		ЕстьНДС = Ложь;
	КонецЕсли;	
	
		    	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Акт");
		
	// Выводим шапку акта
		
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = НСтр("ru='Акт № %НомерДокумента% от %ДатаДокумента% г.'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
 	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета  = Макет.ПолучитьОбласть("ТекстШапки");
	ОбластьМакета.Параметры.ТекстШапки = ДанныеПечати.Шапка.ТекстШапки;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	// Выводим заголовок таблицы Услуги
		
	СуффиксОбласти = ?(ЕстьСкидки, "СоСкидкой", "") + ?(ЕстьНДС, "СНДС", "");
		
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти);
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + СуффиксОбласти);
		
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
	Сумма       = 0;
	СуммаНДС    = 0;
	НомерСтроки = 0;
	
		
	// Выводим строки таблицы Услуги
		
	Для каждого СтрокаУслуги из ТаблицаУслуг Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаУслуги);
		ОбластьСтроки.Параметры.ЕдиницаИзмерения = СтрокаУслуги.БазоваяЕдиницаНаименование;
	 				
		Если ЗначениеЗаполнено(СтрокаУслуги.Содержание) Тогда
			ОбластьСтроки.Параметры.Товар = СтрокаУслуги.Содержание;
		Иначе
			ОбластьСтроки.Параметры.Товар = СтрокаУслуги.ТоварНаименование;
		КонецЕсли;
		
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			СуммаПоСтроке = СтрокаУслуги.Сумма + СтрокаУслуги.СуммаНДС;
		Иначе	
			СуммаПоСтроке = СтрокаУслуги.Сумма;
		КонецЕсли;	
		
		ОбластьСтроки.Параметры.Сумма = СуммаПоСтроке;
		
		Если ЕстьСкидки Тогда
			
			ОбластьСтроки.Параметры.Скидка         = СтрокаУслуги.СуммаСкидки;
			ОбластьСтроки.Параметры.СуммаБезСкидки = ФорматСумм(СуммаПоСтроке + СтрокаУслуги.СуммаСкидки);
				
		КонецЕсли;
			
		Сумма    = Сумма    + СуммаПоСтроке;
		СуммаНДС = СуммаНДС + СтрокаУслуги.СуммаНДС;
		
		ТабличныйДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
		
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьМакета.Параметры.ВсегоНДС = СуммаНДС;
	Если ЕстьНДС Тогда
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'В том числе НДС:'");
		Иначе
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'Сумма НДС'");
		КонецЕсли;	
	Иначе
		ОбластьМакета.Параметры.НДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
	ОбластьМакета.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ОписаниеВыполненныхРабот;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	
	ОбластьМакета.Параметры.Претензии 				 = ДанныеПечати.Шапка.Претензии;
	ОбластьМакета.Параметры.ПредставлениеИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.ПолноеНаименование;
	ОбластьМакета.Параметры.ЮрАдресИсполнителя 		 = ДанныеПечати.Шапка.СведенияОПоставщике.ЮридическийАдрес;
	ОбластьМакета.Параметры.ИННИсполнителя 			 = ДанныеПечати.Шапка.СведенияОПоставщике.ИНН;
	ОбластьМакета.Параметры.КППИсполнителя 			 = ДанныеПечати.Шапка.СведенияОПоставщике.КПП;
	ОбластьМакета.Параметры.РасчетныйСчетИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.РасчетныйСчет;
	ОбластьМакета.Параметры.КорСчетИсполнителя 		 = ДанныеПечати.Шапка.СведенияОПоставщике.КорСчет;
	ОбластьМакета.Параметры.БанкИсполнителя 		 = ДанныеПечати.Шапка.СведенияОПоставщике.Банк;
	ОбластьМакета.Параметры.БИКИсполнителя 			 = ДанныеПечати.Шапка.СведенияОПоставщике.БИК;
	ОбластьМакета.Параметры.ПредставлениеЗаказчика 	 = ДанныеПечати.Шапка.СведенияОПокупателе.ПолноеНаименование;
	ОбластьМакета.Параметры.ЮрАдресЗаказчика 		 = ДанныеПечати.Шапка.СведенияОПокупателе.ЮридическийАдрес;
	ОбластьМакета.Параметры.ИННЗаказчика 			 = ДанныеПечати.Шапка.СведенияОПокупателе.ИНН;
	ОбластьМакета.Параметры.КППЗаказчика 			 = ДанныеПечати.Шапка.СведенияОПокупателе.КПП;
	ОбластьМакета.Параметры.РасчетныйСчетЗаказчика 	 = ДанныеПечати.Шапка.СведенияОПокупателе.РасчетныйСчет;
	ОбластьМакета.Параметры.КорСчетЗаказчика 		 = ДанныеПечати.Шапка.СведенияОПокупателе.КорСчет;
	ОбластьМакета.Параметры.БанкЗаказчика 			 = ДанныеПечати.Шапка.СведенияОПокупателе.Банк;
	ОбластьМакета.Параметры.БИКЗаказчика 			 = ДанныеПечати.Шапка.СведенияОПокупателе.БИК;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	                	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОТЧЕТ О ПРОДАЖАХ КОМИССИОННОГО ТОВАРА

Функция ПолучитьДанныеОтчетаОПродажахКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКомитенте = Новый Структура;
	СведенияОКомитенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияОКомитенте.Вставить("ИНН", 					ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияОКомитенте.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	СведенияОКомитенте.Вставить("ЮридическийАдрес",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияОКомитенте.Вставить("ФактическийАдрес",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомитенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомитенте);
	КонецЕсли;
    		
	СведенияОКомиссионере = Новый Структура;
	СведенияОКомиссионере.Вставить("ПолноеНаименование",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКомиссионере.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКомиссионере.Вставить("КодПоОКПО", 		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКомиссионере.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКомиссионере.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомиссионере);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомиссионере);
	КонецЕсли;
		
	ДанныеЗаполненияШапки.Вставить("Номер",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	
	ДанныеЗаполненияШапки.Вставить("Курс", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.КодОКВ"));
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СуммаДокумента"));
	ДанныеЗаполненияШапки.Вставить("СуммаКомитента",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СуммаКомитента"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("СуммаВознаграждения",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СуммаВознаграждения"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СуммаВознаграждения");
	ТЗ.Колонки.Добавить("СуммаПродажи");
    ТЗ.Колонки.Добавить("ЦенаПродажи");
	ТЗ.Колонки.Добавить("СтавкаНДС");
		
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Код			    = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		НоваяСтрока.Артикул		    = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		НоваяСтрока.Наименование    = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		
		НоваяСтрока.ЕдиницаИзмеренияНаименование= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.Количество					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
	
		НоваяСтрока.Цена				= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.ЦенаПродажи			= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаПродажи");
		НоваяСтрока.Сумма				= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаПродажи		= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаПродажи");
		НоваяСтрока.СуммаВознаграждения	= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаВознаграждения");
		НоваяСтрока.СуммаНДС			= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаСНДС			= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СтавкаНДС			= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
	
		 		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;

	
КонецФункции

// Процедура заполняет табличный документ отчет о продажах комиссионного товара
//
Процедура ЗаполнитьТабличныйДокументОтчетаОПродажахКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ОтчетПоКомиссии");
    	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
	// Выводим общие реквизиты шапки
	ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(
				ДанныеПечати.Шапка,
				"Отчет о продажах комиссионного товара",
				Макет,
				ТабличныйДокумент
			);
			
	// Выводим заголовок таблицы
	// Выводим заголовок таблицы
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыСКодами");
		ЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = КолонкаКодов;
	Иначе
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;	
	
	Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты",ДанныеПечати.Шапка.КодВалюты);
	ЗаголовокТаблицы.Параметры.Валюта = Валюта;
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСКодами");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
				
	НомерСтроки = 0;
			
	Товары = ДанныеПечати.Товары;
	Для Каждого СтрокаТовары из Товары Цикл

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
			
		Если ЗначениеЗаполнено(КолонкаКодов) Тогда
			ОбластьМакета.Параметры.Артикул = СтрокаТовары[КолонкаКодов];
		КонецЕсли;
	    				
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакета.Параметры.ТоварНаименование = СтрокаТовары.Наименование;
		ОбластьМакета.Параметры.ЦенаКомитента = СтрокаТовары.Цена;
		ОбластьМакета.Параметры.СуммаКомитента = СтрокаТовары.Сумма;
		ТабличныйДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
			
	ЗаполнитьРеквизитыПодвалаОтчетаОПродажахКомиссионногоТовара(
				ДанныеПечати.Шапка,
				Товары,
				Макет,
				ТабличныйДокумент
			);
			
КонецПроцедуры

// Процедура заполнения реквизитов подвала отчета о продажах комиссионного товара.
//
// Параметры:
//	ДанныеПечати -  Данные шапки документа
//	Товары - Данные табличной части документа
//	Макет - Макет ОтчетПоКомиссии
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаОтчетаОПродажахКомиссионногоТовара(ДанныеПечати, Товары, Макет, ТабличныйДокумент)
	
	СуммаПродажи = ДанныеПечати.СуммаДокумента;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.СуммаКомитентаВсего =  ДанныеПечати.СуммаКомитента;
	ОбластьМакета.Параметры.СуммаПродажиВсего = СуммаПродажи;
	ОбластьМакета.Параметры.СуммаВознагражденияВсего = ДанныеПечати.СуммаВознаграждения;
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.ИтогиПрописью;
			
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаОтчетПоКомисии()

///////////////////////////////////////////////////////////////////////////////
// ОТЧЕТ О СПИСАНИИ КОМИССИОННОГО ТОВАРА

Функция ПолучитьДанныеОтчетаОСписанииКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКомитенте = Новый Структура;
	СведенияОКомитенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияОКомитенте.Вставить("ИНН", 					ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияОКомитенте.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	СведенияОКомитенте.Вставить("ЮридическийАдрес",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияОКомитенте.Вставить("ФактическийАдрес",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомитенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомитенте);
	КонецЕсли;
    		
	СведенияОКомиссионере = Новый Структура;
	СведенияОКомиссионере.Вставить("ПолноеНаименование",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКомиссионере.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКомиссионере.Вставить("КодПоОКПО", 		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКомиссионере.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКомиссионере.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомиссионере);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомиссионере);
	КонецЕсли;
		
	ДанныеЗаполненияШапки.Вставить("Номер",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	
	ДанныеЗаполненияШапки.Вставить("Курс", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.КодОКВ"));
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИтогоПоДокументу"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИтогиПрописью"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
		
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Код						    = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		НоваяСтрока.Артикул					    = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		НоваяСтрока.Наименование			    = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		НоваяСтрока.ЕдиницаИзмеренияНаименование= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.Количество					= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Цена						= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма						= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		 		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ отчет о списании комиссионного товара
//
Процедура ЗаполнитьТабличныйДокументОтчетОСписанииКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ОтчетПоКомиссииОСписании");
		
	Заголовок = "Отчет о списании комиссионного товара";
	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();

	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Выводим общие реквизиты шапки
	ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(
				ДанныеПечати.Шапка,
				Заголовок,
				Макет,
				ТабличныйДокумент
			);
			
	// Выводим заголовок таблицы
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыСКодами");
		ЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = КолонкаКодов;
	Иначе
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;	
	
	Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты",ДанныеПечати.Шапка.КодВалюты);

	ЗаголовокТаблицы.Параметры.Валюта = Валюта;
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
		
	// Выводим многострочную часть документа
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСКодами");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
    				
	НомерСтроки = 0;
			
	Для каждого	СтрокаТовары из ДанныеПечати.Товары Цикл

		НомерСтроки = НомерСтроки + 1;
				
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		Если ЗначениеЗаполнено(КолонкаКодов) Тогда
			ОбластьМакета.Параметры.Артикул = СтрокаТовары[КолонкаКодов];
		КонецЕсли;

		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакета.Параметры.ТоварНаименование = СтрокаТовары.Наименование;
						
		ТабличныйДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
			
	ЗаполнитьРеквизитыПодвалаОтчетПоКомиссииОСписании(
				ДанныеПечати.Шапка,
				ДанныеПечати.Товары,
				Макет,
				ТабличныйДокумент
			);
				
КонецПроцедуры

// Процедура заполнения реквизитов шапки отчета по комиссии
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	Макет - Макет отчета
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(ДанныеПечати, Заголовок, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОКомитенте = ДанныеПечати.СведенияОПоставщике;
	СведенияОКомиссионере = ДанныеПечати.СведенияОПокупателе;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТекстЗаголовка = НСтр("ru='"+Заголовок+" № %НомерДокумента% от %ДатаДокумента% г.'");
	
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'"));

	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ОбластьМакета.Параметры.ПредставлениеКомитента = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОКомитенте, "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеКомиссионера = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОКомиссионере, "ПолноеНаименование,");
	
	ТабличныйДокумент.Вывести(ОбластьМакета);

	
КонецПроцедуры // ЗаполнитьРеквизитыШапкиОтчетПоКомиссии()
    
// Процедура заполнения реквизитов подвала отчета по комиссии о списании.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	ВыборкаПоДокументам - ВыборкаИзРезультатаЗапроса - Данные табличной части документа
//	Макет - Макет ОтчетКомитенту
//	ТабличныйДокумент - Тбаличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаОтчетПоКомиссииОСписании(ДанныеПечати, Товары, Макет, ТабличныйДокумент)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	СуммаВсего = ДанныеПечати.СуммаДокумента;
	
	ОбластьМакета.Параметры.СуммаВсего = СуммаВсего;
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.ИтогиПрописью;
    	
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаОтчетПоКомиссииОСписании()

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ МЕТОДЫ ПЕЧ.ФОРМ

// Функция формирования структуры хранения итоговых суммы.
//
// Возвращаемое значение:
//	Структура - Структура хранения итоговых сумм
//
Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМестНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНаСтранице", 0);
	Структура.Вставить("ИтогоНДСНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаСНДСНаСтранице", 0);
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМассаНеттоНаСтранице", 0);
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоСумма", 0);
	Структура.Вставить("ИтогоНДС", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции // СтруктураИтоговыеСуммы()

// Функция формирования структуры хранения данных строки.
//
// Параметры:
//	КоэффициентПересчета - Число - Коэффициент пересчета в валюту регл. учета
//
// Возвращаемое значение:
//	Структура - Структура данных строки товаров
//
Функция СтруктураДанныеСтроки(КоэффициентПересчета)
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("Количество", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("СуммаБезНДС", 0);
	Структура.Вставить("СуммаНДС", 0);
	Структура.Вставить("СуммаСНДС", 0);
	Структура.Вставить("КоэффициентПересчета", КоэффициентПересчета);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("МассаНетто", 0);
	
	Возврат Структура;
	
КонецФункции // СтруктураДанныеСтроки()

// Процедура обнуления итоговых сумм по странице.
//
Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)
	
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
	ИтоговыеСуммы.ИтогоНДСНаСтранице         = 0;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = 0;
	
КонецПроцедуры // ОбнулитьИтогиПоСтранице()

// Процедура рассчитывает итоговые суммы с учетом строки товаров.
//
// Параметры:
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	ДанныеСтроки - Структура - Структура данных строки товаров
//
Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки)
	
	// Увеличим итоги по странице.
	ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице        + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице  + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице       + ДанныеСтроки.СуммаБезНДС;
	ИтоговыеСуммы.ИтогоНДСНаСтранице         = ИтоговыеСуммы.ИтогоНДСНаСтранице         + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  + ДанныеСтроки.МассаНетто;
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество  + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма       + ДанныеСтроки.СуммаБезНДС;
	ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто  + ДанныеСтроки.МассаНетто;
	
КонецПроцедуры // РассчитатьИтоговыеСуммы()

// Процедура формирует итоговые данные для вывода в подвал.
//
Процедура ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ВсегоНомеров, КодВалюты)
	
	ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
	ИтоговыеСуммы.Вставить("СуммаПрописью", ЭлектронныеДокументыПереопределяемый.СуммаПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС, КодВалюты));
	
КонецПроцедуры // ДобавитьИтоговыеДанныеПодвала()

// Процедура заполнения реквизитов строки товара.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	СтрокаТовары - ВыборкаИзРезультатаЗапроса - Текущая строка товаров
//	ДанныеСтроки - Структура - Данные строки товаров
//	ОбластьМакета - ОбластьЯчеекТабличногоДокумента - Область для вывода строки товаров
//	ТабличныйДокумент - Табличный документа
//
Процедура ЗаполнитьРеквизитыСтрокиТовара(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса = Неопределено)
	
	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	
	ДанныеСтроки.Мест		 = СтрокаТовары.КоличествоМест;
	ДанныеСтроки.Количество  = СтрокаТовары.Количество;
	
	ДанныеСтроки.СуммаСНДС   = Окр((СтрокаТовары.Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СтрокаТовары.СуммаНДС)) * ДанныеСтроки.КоэффициентПересчета, 2);
	ДанныеСтроки.СуммаНДС    = Окр(СтрокаТовары.СуммаНДС * ДанныеСтроки.КоэффициентПересчета, 2);
	ДанныеСтроки.СуммаБезНДС = ДанныеСтроки.СуммаСНДС - ДанныеСтроки.СуммаНДС;
	
	Если ДанныеПечати.ЦенаВключаетНДС Тогда
		ДанныеСтроки.Цена = ?(ДанныеСтроки.Количество = 0, 0, ДанныеСтроки.СуммаБезНДС / ДанныеСтроки.Количество);
	Иначе
		ДанныеСтроки.Цена = СтрокаТовары.Цена * ДанныеСтроки.КоэффициентПересчета;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
	
КонецПроцедуры // ЗаполнитьРеквизитыСтрокиТовара()

// Функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") 
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ МЕТОДЫ ПЕЧ.ФОРМ

// Проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СРАВНЕНИЯ ЭЛЕКТРОННЫХ ДОКУМЕНТОВ

// Готовит файлы табличных документов MXL по данным электронных документов.
//
// Параметры:
// МассивЭД - массив ссылок на электронные документы, которые необходимо обработать.
//
// Возвращаемое значение:
//	массив структур - структура содержит имя файла данных и имя файла табличного документа MXL
//
Функция ПодготовитьВременныеФайлыПросмотраЭД(МассивЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПереченьВременныхФайлов = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		
		ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭД, Новый УникальныйИдентификатор, Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла") 
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			КонецЕсли;
			
			ДанныеЭД.Записать(ИмяФайла);
			
			Если Найти(ДопИнформацияПоЭД.Расширение, "zip")>0 Тогда // новый формат хранения - zip
				
				ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
				ПапкаДляРаспаковки = КаталогВременныхФайлов() + "ПапкаДляОбработкиЭД\" + ЭД.УникальныйИдентификатор()+"\";
				УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				
				ФлагПросмотра = Ложь;
				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				Для Каждого РаспакованныйФайл Из ФайлыАрхива Цикл
					ТабличныйДокумент = СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя, ЭД.НаправлениеЭД, ЭД.УникальныйИдентификатор());
					Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
						ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
						
						ИмяФайлаMXL = ПолучитьИмяВременногоФайла("mxl");
						// Переопределим название временного файла с учетом названия ЭД
						НазваниеЭД = ЭлектронныеДокументы.ПолучитьПредставлениеЭД(ЭД.Ссылка);
						// Необходимо заменить фрагмент от последнего подчеркивания до фрагмента ".mxl"
						ДлинаСтроки = СтрДлина(ИмяФайлаMXL);
						Для ОбратныйИндекс = 0 По ДлинаСтроки Цикл
							Если Сред(ИмяФайлаMXL, ДлинаСтроки - ОбратныйИндекс, 1) = "_" Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						ИмяФайлаMXL = Лев(ИмяФайлаMXL, ДлинаСтроки - ОбратныйИндекс) + НазваниеЭД + Прав(ИмяФайлаMXL, 4);
						ТабличныйДокумент.Записать(ИмяФайлаMXL);
					Иначе
						Возврат Неопределено;
					КонецЕсли;
					
					СтруктураИменФайлов = Новый Структура("ИмяФайлаДанных, ИмяФайлаMXL", ИмяФайлаДанных, ИмяФайлаMXL);
					ПереченьВременныхФайлов.Добавить(СтруктураИменФайлов);
					Прервать; // должен быть только один файл данных
				КонецЦикла;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПереченьВременныхФайлов;
	
КонецФункции
