Функция  ОпределитьПериод(Организация, ДатаКон,АвансыПоПриобретению,АвансыПоРеализации, Договор = неопределено) Экспорт

	//По последовательности определяем дату
	Периоды = Новый Структура("Приобретение,Реализация");
    Если Договор = Неопределено Тогда
		Отбор = Новый Структура ("Организация",Организация);
	Иначе
		Отбор = Новый Структура ("Организация,Договор",Организация,Договор);
	Конецесли;
	
	Если АвансыПоПриобретению тогда
		Периоды.приобретение = Последовательности.РасчетыПоПриобретениюОрганизации.ПолучитьГраницу(Отбор);
		Если Периоды.приобретение.Дата>КонецДня(ДатаКон) тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Граница последовательности по приобретению организации <"+Строка(Организация)+"> больше чем дата обработки.
			|Восстановление расчетов по приобретению производиться не будет.");
		КонецЕсли;
	КонецЕсли;	
	Если АвансыПоРеализации тогда
		Периоды.Реализация = Последовательности.РасчетыПоРеализацииОрганизации.ПолучитьГраницу(Отбор);
		Если Периоды.Реализация.Дата>КонецДня(ДатаКон) тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Граница последовательности по реализации организации <"+Строка(Организация)+"> больше чем дата обработки.
			|Восстановление расчетов по реализации производиться не будет.");
		КонецЕсли;
	КонецЕсли;	
	Возврат  Периоды;
	
КонецФункции // ОпределитьПериод()

Функция ВыполнитьДвижениеДенег(СтруктураПараметров, СформированныеДвижения, СтруктураШапкиДокумента, УдаляемыеВидыРегОпераций,мКэшВидовСубконтоПоСчетам, ТЗ_СуммовыеРазницы = Неопределено) Экспорт
	
	ОшибкаПриФормированииДвижений = Ложь;
	БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметров, СтруктураШапкиДокумента, СформированныеДвижения, ОшибкаПриФормированииДвижений, СтруктураПараметров.Заголовок,,Истина,УдаляемыеВидыРегОпераций, мКэшВидовСубконтоПоСчетам, ТЗ_СуммовыеРазницы);
	
	Возврат ОшибкаПриФормированииДвижений;
	
КонецФункции // ВыполнитьДвижениеДенег()

Функция ОбработатьДвижения(Организация,ДатаАктуализации, Результат, УдаляемыеВидыРегОпераций, ПоследовательностьДляРегистрацииСсылка, ВидРасчетов, РезультатЗапросаПоДокументам, мКэшВидовСубконтоПоСчетам,мВалютаРегламентированногоУчета,мДатаЗапрета) Экспорт
	ТаблицаДвижений = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
    ПоследовательностьДляРегистрации = ПоследовательностьДляРегистрацииСсылка.СоздатьНаборЗаписей();
	ТаблицаРасчетовПоДокументам = РезультатЗапросаПоДокументам.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЕстьОшибка = Ложь;
	ДокументОшибки = Неопределено;
	Граница = КонецДня(ДатаАктуализации);
	
	ПустаяТаблицаПоВзаиморасчетам = Новый ТаблицаЗначений;
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("ДоговорКонтрагента");
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("Сделка");
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("ДокументРасчетовСКонтрагентом");
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("ДатаОплаты");
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Для каждого Документ Из ТаблицаДвижений.Строки Цикл
		Попытка
		СформированныеДвижения =новый Структура();
		Если Документ.Строки.КОличество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		ВидДокумента = Документ.Строки[0].ВидДокумента;
		
		Если Документ.Регистратор.Дата <= мДатаЗапрета Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		//АБС ВСТАВКА №39279 НАЧАЛО «27 февраля 2014 г.», Пополитов
		//Если в ППИ больше 2 договоров, без этого условия, остаются строки только по 1 договору
		Если ВидДокумента = "ПлатежноеПоручениеИсходящее" 
			 ИЛИ ВидДокумента = "ПлатежноеПоручениеВходящее" 
			 ИЛИ ВидДокумента = "ПриходныйКассовыйОрдер" 
			 ИЛИ ВидДокумента = "РасходныйКассовыйОрдер"
			Тогда 	
			ЗапросПроверочный = Новый Запрос;
			ЗапросПроверочный.УстановитьПараметр("Регистратор",Документ.Регистратор);
			ЗапросПроверочный.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			                          |	ТЧ.ДоговорКонтрагента
			                          |ИЗ
			                          |	Документ."+ВидДокумента+".РасшифровкаПлатежа КАК ТЧ
			                          |ГДЕ
			                          |	ТЧ.Ссылка = &Регистратор";
            Результат = ЗапросПроверочный.Выполнить().Выгрузить().Количество();
			Если Результат > 1 Тогда
				ДокументОбъект = Документ.Регистратор.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение); 				
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		//\\АБС ВСТАВКА №39279 КОНЕЦ
				
		Если ВидДокумента = "КорректировкаДолга" Тогда
			
			ДокументОбъект = Документ.Регистратор.ПолучитьОбъект();
			ДокументОбъект.РежимВосстановленияПоследовательностейРасчетов = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			Продолжить;
		КонецЕсли;
// +++ввв 01.08.2016 г.
		Если ВидДокумента = "ОтчетКомиссионераОПродажах" Тогда
// +++ввв 17.05.2017 г.
//			ДокументОбъект = Документ.Регистратор.ПолучитьОбъект();
//			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
// ---ввв 17.05.2017 г.
			Продолжить;
		КонецЕсли;
// ---ввв 01.08.2016 г.
		НаправлениеДвиженияДляДокументаДвиженияДенежныхСредств = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента).Направление;
		НаправлениеДвиженияДляДокументаДвиженияПриобретенияРеализации = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента).Направление;
		Если НаправлениеДвиженияДляДокументаДвиженияДенежныхСредств=Неопределено 
			И НаправлениеДвиженияДляДокументаДвиженияПриобретенияРеализации=неопределено Тогда
			ЕстьОшибка = Истина;
			Если ДокументОшибки = Неопределено тогда
				ДокументОшибки = Документ.Регистратор;
			КонецЕслИ;
			Граница = МиН(Документ.Строки[0].Период,Граница);
			Продолжить;
		КонецЕсли;
	
		Если не (ВидДокумента = "ВозвратТоваровПоставщику" или ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ")
			и НаправлениеДвиженияДляДокументаДвиженияДенежныхСредств <> Неопределено тогда
			//Документ обрабатывается в блоке движений денежных средств			
			СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенегИзРегистраСведений(Документ.Строки,ТаблицаДвижений.Колонки);
			// Регистрация в последовательности
			ПоследовательностьДляРегистрации.Отбор.Регистратор.Установить(Документ.регистратор);
			ПоследовательностьДляРегистрации.Очистить();
			
			// АБС ИЗМЕНЕНО Фролов 20121014 
			// Записываем движение по последовательности
			Для Каждого ТекСтрокаДок Из Документ.Строки Цикл
				ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
				ЗаписьРегистрации.Период 			= ТекСтрокаДок.Период;
				ЗаписьРегистрации.Организация 		= Организация;
				ЗаписьРегистрации.Договор			= ТекСтрокаДок.ДоговорКонтрагента;
				
				//ЗаписьРегистрации.ПроведенВХронологическойПоследовательности = Истина;				
			КонецЦикла;
			ПоследовательностьДляРегистрации.Записать();
			// АБС ИЗМЕНЕНО Фролов 20121014 КОНЕЦ
				
			СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Документ.Регистратор);
			СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
				
			#Если Клиент Тогда
				Состояние("Корректировка движений документа: " + СтруктураПараметров.Заголовок);
			#КонецЕсли
			ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Хозрасчетный,истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиБУ,УдаляемыеВидыРегОпераций);
			СформированныеДвижения.Вставить("Хозрасчетный",ПроводкиБУ);
			
			ПроводкиНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Налоговый,истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиНУ,УдаляемыеВидыРегОпераций);
			СформированныеДвижения.Вставить("Налоговый",ПроводкиНУ);
			
			Если ВыполнитьДвижениеДенег(СтруктураПараметров, СформированныеДвижения, СтруктураШапкиДокумента, УдаляемыеВидыРегОпераций,мКэшВидовСубконтоПоСчетам) Тогда
				ЕстьОшибка = Истина;
				Если ДокументОшибки = Неопределено тогда
					ДокументОшибки = Документ.Регистратор;
				КонецЕслИ;
				Граница = МиН(СтруктураПараметров.Период,Граница);
			КонецЕсли;
		ИначеЕсли НаправлениеДвиженияДляДокументаДвиженияПриобретенияРеализации <> Неопределено тогда
			//Документ приобретения или реализации
			СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАвансаИзРегистраСведений(Документ.Строки,ТаблицаДвижений.Колонки);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
			Если ВидДокумента = "ОтчетКомиссионераОПродажах" Тогда
				Если ВидРасчетов = "РасчетыПоРеализации" Тогда
					СтруктураПараметров.Вставить("Направление", "Выбытие");
				Иначе
					СтруктураПараметров.Вставить("Направление", "Поступление");
				КонецЕсли;
			КонецЕсли;
			// Регистрация в последовательности
			ПоследовательностьДляРегистрации.Отбор.Регистратор.Установить(Документ.регистратор);
			ПоследовательностьДляРегистрации.Очистить();
			
			// АБС ИЗМЕНЕНО Фролов 20121014 
			// Записываем движение по последовательности
			Для Каждого ТекСтрокаДок Из Документ.Строки Цикл
				ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
				ЗаписьРегистрации.Период 			= ТекСтрокаДок.Период;
				ЗаписьРегистрации.Организация 		= Организация;
				ЗаписьРегистрации.Договор			= ТекСтрокаДок.ДоговорКонтрагента;
				
				//ЗаписьРегистрации.ПроведенВХронологическойПоследовательности = Истина;				
			КонецЦикла;
			ПоследовательностьДляРегистрации.Записать();
			// АБС ИЗМЕНЕНО Фролов 20121014 КОНЕЦ
			
			СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Документ.Регистратор);
			
			Для каждого Параметр Из СтруктураШапкиДокумента Цикл
				Если не СтруктураПараметров.Свойство(Параметр.Ключ) Тогда
					СтруктураПараметров.Вставить(Параметр.Ключ,Параметр.Значение);
				КонецЕсли; 
			КонецЦикла; 
			
			#Если Клиент Тогда
				Состояние("Корректировка движений документа: " + СтруктураПараметров.Заголовок);
			#КонецЕсли
			Если СтруктураПараметров.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				СтрокиТаблицыПоВзаиморасчетам = ТаблицаРасчетовПоДокументам.Строки.Найти(Документ.Регистратор, "Регистратор", Ложь);
				ЕстьТаблицаПоВзаиморасчетам = НЕ (СтрокиТаблицыПоВзаиморасчетам = Неопределено);
				Если ЕстьТаблицаПоВзаиморасчетам Тогда
					ТаблицаПоВзаиморасчетам = ПустаяТаблицаПоВзаиморасчетам.Скопировать();
					Для каждого СтрокаДвижения Из СтрокиТаблицыПоВзаиморасчетам.Строки Цикл
						НоваяСтрока = ТаблицаПоВзаиморасчетам.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
					КонецЦикла;
					СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
				КонецЕсли;
			КонецЕсли;
			ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Хозрасчетный,истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиБУ,УдаляемыеВидыРегОпераций);
			БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметров,ПроводкиБУ,мВалютаРегламентированногоУчета);
			СформированныеДвижения.Вставить("ПроводкиБУ",ПроводкиБУ);
			СформированныеДвижения.Вставить("Хозрасчетный",ПроводкиБУ);
				
			 Если СтруктураПараметров.ОтражатьВНалоговомУчете ИЛИ СтруктураПараметров.Дата >= '20070101' Тогда
				ПроводкиНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Налоговый,истина);
				БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиНУ,УдаляемыеВидыРегОпераций);
				СформированныеДвижения.Вставить("ПроводкиНУ",ПроводкиНУ);
				СтруктураПараметров.Вставить("ПроводкиНУ",ПроводкиНУ);
				СтруктураПараметров.Вставить("Налоговый",ПроводкиНУ);
			КонецЕсли;
			ДвиженияСУчетомКорректировок = БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметров,мВалютаРегламентированногоУчета,,ПроводкиБУ,,,УдаляемыеВидыРегОпераций);
			ДвиженияПоРегиструУЕ = Новый Структура("РасчетыПоРеализацииВУсловныхЕдиницахОрганизации");
			ДвиженияПоРегиструУЕ.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации,Истина);
			БухгалтерскийУчетРасчетовСКонтрагентами.ВыполнитьСторноДвиженияПоРасчетамПоРеализации(Документ.Регистратор.ПолучитьОбъект(),ДвиженияПоРегиструУЕ.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации);
			Если ДвиженияСУчетомКорректировок = Истина Тогда	
				//Нет корректировок
			ИначеЕсли ДвиженияСУчетомКорректировок = Ложь Тогда
				ЕстьОшибка = Истина;
				Если ДокументОшибки = Неопределено тогда
					ДокументОшибки = Документ.Регистратор;
				КонецЕсли;
				Граница = МиН(СтруктураПараметров.Период,Граница);
				Продолжить;
			Иначе
				Для каждого Движение из ДвиженияСУчетомКорректировок Цикл
					СформированныеДвижения.Вставить(Движение.Ключ,Движение.Значение);
				КонецЦикла;
				Для каждого Движение из ДвиженияПоРегиструУЕ Цикл
					СформированныеДвижения.Вставить(Движение.Ключ,Движение.Значение);
				КонецЦикла;
			КонецЕсли;

		Иначе
			ЕстьОшибка = Истина;
			Если ДокументОшибки = Неопределено тогда
				ДокументОшибки = Документ.Регистратор;
			КонецЕслИ;
			Граница = МиН(Документ.Строки[0].Период,Граница);
			Продолжить;
		КонецЕсли;  //Если не (ВидДокумента = "ВозвратТоваровПоставщику" или ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ")
		
		Для каждого Движение из СформированныеДвижения Цикл
			Если Движение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Движение.Значение.Модифицированность() Тогда
				Движение.Значение.Записать();
			КонецЕсли; 
		КонецЦикла;
		
		Исключение
			ЕстьОшибка = Истина;
			Если ДокументОшибки = Неопределено тогда
				ДокументОшибки = Документ.Регистратор;
			КонецЕслИ;
			Граница = МиН(Документ.Строки[0].Период,Граница);
			Прервать;
		КонецПопытки; 
	КонецЦикла;
	
	Возврат Новый структура ("Ошибка,Документ,Граница",ЕстьОшибка,ДокументОшибки,Граница);
	 
КонецФункции // 

Функция СоздатьДокументыПереоценкиВалютныхСредств(ДатаНачала,Организация,ДатаАктуализации) Экспорт

	// Определяем дни, за которые необходимо наличие документов "Переоценка валютных средств"
	
	Правила2008 = (ДатаАктуализации >= '20080101');
	
	Запрос = Новый Запрос;
	
	// Валютные счета, подлежащие переоценке
	// Все балансовые валютные счета
	// Счета, переоцениваемые в особом порядке, исключаются
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И (НЕ Хозрасчетный.Забалансовый)
	|	И (НЕ Хозрасчетный.Ссылка В
	|				(ВЫБРАТЬ
	|					СчетаСОсобымПорядкомПереоценки.Счет
	|				ИЗ
	|					РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценки))";
	
	СчетаПодлежащиеПереоценке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Если Правила2008 Тогда
		СчетаПодлежащиеПереоценке.Добавить(ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте);
		СчетаПодлежащиеПереоценке.Добавить(ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(ПроводкиБУ.Период, ДЕНЬ) КАК Дата
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК ПроводкиБУ
	|ГДЕ
	|	(ПроводкиБУ.СчетДт В (&СчетаПодлежащиеПереоценке)
	|			ИЛИ ПроводкиБУ.СчетКт В (&СчетаПодлежащиеПереоценке))
	|	И ПроводкиБУ.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И ПроводкиБУ.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала",  ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца",   КонецДня(ДатаАктуализации));
	Запрос.УстановитьПараметр("СчетаПодлежащиеПереоценке", СчетаПодлежащиеПереоценке);
	
	ТаблицаДней = Запрос.Выполнить().Выгрузить();
	
	// Существующие документы
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОНЕЦПЕРИОДА(ПереоценкаВалютныхСредств.Дата, ДЕНЬ) КАК Дата,
	|	ПереоценкаВалютныхСредств.Ссылка КАК Документ
	|ИЗ
	|	Документ.ПереоценкаВалютныхСредств КАК ПереоценкаВалютныхСредств
	|ГДЕ
	|	ПереоценкаВалютныхСредств.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И ПереоценкаВалютныхСредств.Организация = &Организация
	|	И ПереоценкаВалютныхСредств.ОтражатьВБухгалтерскомУчете
	|	И НЕ ПереоценкаВалютныхСредств.ПометкаУдаления
	|ИТОГИ ПО Дата";
	
	ДеревоДокументов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТекДата = КонецДня(ДатаНачала);
	Пока ТекДата <= КонецДня(ДатаАктуализации) Цикл
		
		ДокументыЗаДату     = ДеревоДокументов.Строки.Найти(ТекДата, "Дата");
		ЕстьДокументыЗаДату = ДокументыЗаДату <> Неопределено;
		НуженДокумент       = ТаблицаДней.Найти(ТекДата, "Дата") <> Неопределено 
			ИЛИ ТекДата = КонецМесяца(ТекДата);
		
		Если ЕстьДокументыЗаДату Тогда
			
			Если НуженДокумент Тогда
				НачИндексУдаления = 1;
			Иначе
				НачИндексУдаления = 0;
			КонецЕсли;
			КолДокументов = ДокументыЗаДату.Строки.Количество();
			
			Для ТекИндекс = НачИндексУдаления По КолДокументов - 1 Цикл
				Попытка
					УдаляемыйДокумент = ДокументыЗаДату.Строки[ТекИндекс].Документ.ПолучитьОбъект();
					УдаляемыйДокумент.УстановитьПометкуУдаления(Истина);
					ОбщегоНазначения.Сообщение("Установлена пометка удаления документа: " + Строка(УдаляемыйДокумент));
				Исключение
					ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , "Установка пометки удаления документа: " + Строка(УдаляемыйДокумент));
					Возврат ТекДата;
				КонецПопытки;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НуженДокумент И (НЕ ЕстьДокументыЗаДату) Тогда
			
			ДокументПереоценки = Документы.ПереоценкаВалютныхСредств.СоздатьДокумент();
			ДокументПереоценки.Дата                                    = ТекДата;
			ДокументПереоценки.Организация                             = Организация;
			ДокументПереоценки.ОтражатьВБухгалтерскомУчете             = Истина;
			ДокументПереоценки.ОтражатьВНалоговомУчете                 = Истина;
			ДокументПереоценки.ПереоценкаВалютныхСредствРегл           = Истина;
			ДокументПереоценки.ПереоценкаРасчетовВУсловныхЕдиницахРегл = Истина;
			ДокументПереоценки.Комментарий                             = "<Создан автоматически обработкой восстановления состояния расчетов>";
			ДокументПереоценки.Ответственный                           = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
				глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
			Попытка
				ДокументПереоценки.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , "Ошибка при записи документа: " + Строка(ДокументПереоценки));
				Возврат ТекДата;
			КонецПопытки;
			
		КонецЕсли;
		
		ТекДата = ТекДата + 60*60*24;
		
	КонецЦикла;
	
	Возврат ТекДата;

КонецФункции

Функция ПереоценитьВалютныеОстатки(ДатаНачала,Организация,ДатаАктуализации) Экспорт
	
	ДатаСозданныхДокументов = СоздатьДокументыПереоценкиВалютныхСредств(ДатаНачала,Организация,ДатаАктуализации);
	
	Если ДатаСозданныхДокументов < КонецДня(ДатаАктуализации) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Переоценка не выполнена из-за ошибок при создании документов переоценки", , "Переоценка валютных средств по организации: " + Организация);
		Возврат ДатаНачала;
	КонецЕсли;
	
	// Дни, за которые необходимо наличие документов "Переоценка валютных средств",
	// определяем по фактическому наличию документов переоценки
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПереоценкаВалютныхСредств.Дата КАК Дата,
	|	ПереоценкаВалютныхСредств.Ссылка КАК Документ
	|ИЗ
	|	Документ.ПереоценкаВалютныхСредств КАК ПереоценкаВалютныхСредств
	|ГДЕ
	|	ПереоценкаВалютныхСредств.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И ПереоценкаВалютныхСредств.Организация = &Организация
	|	И ПереоценкаВалютныхСредств.ОтражатьВБухгалтерскомУчете
	|	И НЕ ПереоценкаВалютныхСредств.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ПереоценкаВалютныхСредств.Дата ВОЗР";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала",  ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца",   КонецДня(ДатаАктуализации));
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументПереоценки = ВыборкаДокументов.Документ.ПолучитьОбъект();
		
		ДокументПереоценки.ОтражатьВНалоговомУчете                 = Истина;
		ДокументПереоценки.ПереоценкаВалютныхСредствРегл           = Истина;
		ДокументПереоценки.ПереоценкаРасчетовВУсловныхЕдиницахРегл = Истина;
			
		Попытка
			ДокументПереоценки.Записать(РежимЗаписиДокумента.Проведение);
			ОбщегоНазначения.Сообщение("Проведен документ: " + Строка(ДокументПереоценки));
		Исключение
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , "Проведение документа: " + Строка(ДокументПереоценки));
			Возврат (НачалоДня(ВыборкаДокументов.Дата) - 1);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат (КонецДня(ДатаАктуализации) + 1);

КонецФункции

// Процедура удаляет из набора записи в зависимости от вида регламентной операции
//
Процедура ЗачиститьНаборЗаписейОтРегламентныхОпераций(НаборЗаписей, МассивРегОпераций, ИмяРеквизита = "ВидРегламентнойОперации",Договор) Экспорт
	
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВсегоЗаписей = (НаборЗаписей.Количество());

	Для Индекс = 1 по ВсегоЗаписей Цикл
		
		ЗначениеРеквизита = НаборЗаписей[ВсегоЗаписей - Индекс][ИмяРеквизита];
		Если МассивРегОпераций.Найти(ЗначениеРеквизита) <> Неопределено И (НаборЗаписей[ВсегоЗаписей - Индекс].СубконтоКт.Договоры = Договор Или НаборЗаписей[ВсегоЗаписей - Индекс].СубконтоДт.Договоры= Договор)Тогда
			НаборЗаписей.Удалить(ВсегоЗаписей - Индекс);
		КонецЕсли;

	КонецЦикла;

Конецпроцедуры // ЗачиститьНаборЗаписейОтРегламентныхОпераций()



// АБС ВСТАВКА Фролов 20121013
// Модуль автоматического восстановления взаиморасчетов фоновым заданием
Процедура ВыполнитьАвтоВосстановленияПоследовательности(НастройкаСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НастройкаСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ НастройкаСсылка.Использование Тогда
		Возврат;
	КонецЕсли;

	ТекстСообщения = "Начато автоматическое восстановление последовательности по настройке: " + СокрЛП(НастройкаСсылка) + " (" + СокрЛП(НастройкаСсылка.Код) + ")";
	ЗаписьЖурналаРегистрации("Восстановление состояния расчетов", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
	
	ВыполнитьВосстановлениеПоследовательностиПоНастройке(НастройкаСсылка);
	
	ТекстСообщения = "Завершено автоматическое восстановление последовательности по настройке: " + СокрЛП(НастройкаСсылка) + " (" + СокрЛП(НастройкаСсылка.Код) + ")";
	ЗаписьЖурналаРегистрации("Восстановление состояния расчетов", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
	
КонецПроцедуры

Процедура ВыполнитьВосстановлениеПоследовательностиПоНастройке(НастройкаСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НастройкаСсылка) Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = ПолучитьСтруктуруПараметровПоНастройке(НастройкаСсылка);
	
	ДатаЗапретаПриобретение = Макс(СтруктураПараметров.ДатаЗапретаПотока, СтруктураПараметров.ДатаЗапрета);
	ДатаЗапретаРеализация 	= Макс(СтруктураПараметров.ДатаЗапретаПотока, СтруктураПараметров.ДатаЗапрета);

	Если НЕ (СтруктураПараметров.АвансыПоПриобретению ИЛИ СтруктураПараметров.АвансыПоРеализации) Тогда
		Возврат;
	КонецЕсли;

	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	мКэшВидовСубконтоПоСчетам = Неопределено;

	УдаляемыеВидыРегОпераций = Новый Массив;
	Если СтруктураПараметров.АвансыПоПриобретению Тогда
		УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовПриобретение);
	КонецЕсли;

	Если СтруктураПараметров.АвансыПоРеализации Тогда
		УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация);
	КонецЕсли;

	УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах);
	УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.СуммовыеРазницы);
	УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСчетов);

	ЗапросПоДоговорам 	= Новый Запрос;
	Запрос    			= Новый Запрос;
	ЗапросПоДокументам 	= Новый Запрос;

	ТекстЗапросаПоДоговорам = "";
	
	Если СтруктураПараметров.ИспользоватьПотоки Тогда
		
		ТекстЗапросаПоДоговорам = 
		"ВЫБРАТЬ
		|	абс_СоставПотоков.ОбъектПотока КАК ДоговорКонтрагента
		|ИЗ
		|	РегистрСведений.абс_СоставПотоков КАК абс_СоставПотоков
		|ГДЕ
		|	абс_СоставПотоков.Поток = &Поток
		|	И (НЕ абс_СоставПотоков.Выполнено)
		|	И абс_СоставПотоков.Организация = &Организация
		|	И абс_СоставПотоков.ПринадлежностьПотока = &ПринадлежностьПотока";
		
	Иначе
		
		ТекстЗапросаПоДоговорам = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента,
		|	РасчетыПоПриобретениюОрганизацииГраницы.Период,
		|	РасчетыПоПриобретениюОрганизацииГраницы.Регистратор
		|ПОМЕСТИТЬ ВТ_Договоры
		|ИЗ
		|	РегистрСведений.РасчетыПоПриобретениюОрганизации КАК РасчетыПоПриобретениюОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.РасчетыПоПриобретениюОрганизации.Границы КАК РасчетыПоПриобретениюОрганизацииГраницы
		|		ПО РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента = РасчетыПоПриобретениюОрганизацииГраницы.Договор
		|ГДЕ
		|	РасчетыПоПриобретениюОрганизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетыПоПриобретениюОрганизации.Активность
		|	И РасчетыПоПриобретениюОрганизации.Организация = &Организация
		|	И (НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковПоВзаиморасчетам)
		|	И (НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров)
		|	И (НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах)
		|	И РасчетыПоПриобретениюОрганизацииГраницы.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Договоры.ДоговорКонтрагента
		|ИЗ
		|	ВТ_Договоры КАК ВТ_Договоры
		|ГДЕ
		|	(ВТ_Договоры.Период <= &КонецПериода
		|			ИЛИ ВТ_Договоры.Период ЕСТЬ NULL )
		|	И ВЫБОР
		|			КОГДА &ИспользоватьОтборПоРегистратору
		|				ТОГДА НЕ ВТ_Договоры.Регистратор = &ЗначениеНеопределено
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Договоры";
	
	КонецЕсли;
	
	ТекстОсновногоЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоПриобретениюОрганизации.Регистратор
	|ПОМЕСТИТЬ ВТ_Регистраторы
	|ИЗ
	|	РегистрСведений.РасчетыПоПриобретениюОрганизации КАК РасчетыПоПриобретениюОрганизации
	|ГДЕ
	|	РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И РасчетыПоПриобретениюОрганизации.Активность	
	|	И РасчетыПоПриобретениюОрганизации.Организация = &Организация 
	|   И РасчетыПоПриобретениюОрганизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|   И РасчетыПоПриобретениюОрганизации.Регистратор.Дата >=  &ДатаЗапрета
	|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковПоВзаиморасчетам
	|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров	
	|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|;
	|ВЫБРАТЬ
	|	РасчетыПоПриобретениюОрганизации.*,
	|	РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом КАК ВестиПоДокументамРасчетовСКонтрагентом,
	|	РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	РасчетыПоПриобретениюОрганизации.СуммаСНДС КАК РублеваяСумма,
	|	РасчетыПоПриобретениюОрганизации.СуммаВзаиморасчетов КАК ВалютнаяСумма
	|ИЗ
	|	РегистрСведений.РасчетыПоПриобретениюОрганизации КАК РасчетыПоПриобретениюОрганизации
	|ГДЕ
	|	РасчетыПоПриобретениюОрганизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоПриобретениюОрганизации.Активность
	|	И РасчетыПоПриобретениюОрганизации.Организация = &Организация И РасчетыПоПриобретениюОрганизации.Регистратор В (ВЫБРАТЬ ВТ_Регистраторы.Регистратор ИЗ ВТ_Регистраторы КАК ВТ_Регистраторы)
	|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковПоВзаиморасчетам
	|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
	|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|   И РасчетыПоПриобретениюОрганизации.Регистратор.Дата >=  &ДатаЗапрета
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыПоПриобретениюОрганизации.Период,
	|	РасчетыПоПриобретениюОрганизации.Регистратор
	|ИТОГИ
	|	МИНИМУМ(Период),
	|	СУММА(СуммаСНДС),
	|	СУММА(СуммаВзаиморасчетов),
	|	СУММА(СуммаНДС)
	|ПО
	|	РасчетыПоПриобретениюОрганизации.Регистратор
	|";

	ТекстЗапросаКВзаиморасчетамПоДокументам = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоПриобретениюОрганизации.Регистратор
	|ПОМЕСТИТЬ ВТ_Регистраторы
	|ИЗ
	|	РегистрСведений.РасчетыПоПриобретениюОрганизации КАК РасчетыПоПриобретениюОрганизации
	|ГДЕ
	|	РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И РасчетыПоПриобретениюОрганизации.Активность	
	|	И РасчетыПоПриобретениюОрганизации.Организация = &Организация 
	|   И РасчетыПоПриобретениюОрганизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|   И РасчетыПоПриобретениюОрганизации.Регистратор.Дата >=  &ДатаЗапрета
	|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковПоВзаиморасчетам
	|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров	
	|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|;
	|ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументам.Регистратор КАК Регистратор,
	|	ВзаиморасчетыПоДокументам.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДокументам.Сделка,
	|	ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом,
	|	СУММА(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ВзаиморасчетыПоДокументам.СуммаРегл) КАК СуммаРегл
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов КАК ВзаиморасчетыПоДокументам
	|ГДЕ
	|	ВзаиморасчетыПоДокументам.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВзаиморасчетыПоДокументам.Активность
	|	И ВзаиморасчетыПоДокументам.Организация = &Организация И ВзаиморасчетыПоДокументам.Регистратор В (ВЫБРАТЬ ВТ_Регистраторы.Регистратор ИЗ ВТ_Регистраторы КАК ВТ_Регистраторы)
	|	И ВзаиморасчетыПоДокументам.ВидРасчетовСКонтрагентом = &ВидРасчетовСКонтрагентом
	|	И НЕ ВзаиморасчетыПоДокументам.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковПоВзаиморасчетам
	|	И НЕ ВзаиморасчетыПоДокументам.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
	|	И НЕ ВзаиморасчетыПоДокументам.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|	И ВзаиморасчетыПоДокументам.Регистратор.Дата >= &ДатаЗапрета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыПоДокументам.Регистратор,
	|	ВзаиморасчетыПоДокументам.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДокументам.Сделка,
	|	ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом
	|ИТОГИ ПО
	|	Регистратор";

	Если СтруктураПараметров.АвансыПоПриобретению Тогда
		
		ЗапросПоДоговорам.УстановитьПараметр("НачалоПериода"		, ДатаЗапретаПриобретение);
		ЗапросПоДоговорам.УстановитьПараметр("КонецПериода" 		, КонецДня(СтруктураПараметров.ДатаАктуализации));
		ЗапросПоДоговорам.УстановитьПараметр("Организация"			, СтруктураПараметров.Организация);
		
		ЗапросПоДоговорам.УстановитьПараметр("Поток"				, СтруктураПараметров.Поток);
		ЗапросПоДоговорам.УстановитьПараметр("ПринадлежностьПотока"	, Перечисления.абс_ПринадлежностьПотока.АвансыПоПриобретению);
		
		ЗапросПоДоговорам.УстановитьПараметр("ИспользоватьОтборПоРегистратору"  , НЕ СтруктураПараметров.ПередвигатьГраницуПоВсемДоговорам);
		ЗапросПоДоговорам.УстановитьПараметр("МассивПустыхРегистраторов"        , ПолучитьМассивПустыхРегистраторовПоследовательности("РасчетыПоПриобретениюОрганизации"));
		ЗапросПоДоговорам.УстановитьПараметр("ЗначениеНеопределено"				, Неопределено);
		
			
		ЗапросПоДоговорам.Текст = ТекстЗапросаПоДоговорам;
		ТаблицаДоговоров = ЗапросПоДоговорам.Выполнить().Выгрузить();
		
		ТекстСообщения = "Восстановление последовательности по приобретению. Количество договоров: " + ТаблицаДоговоров.Количество() + ".";
		ЗаписьЖурналаРегистрации("Восстановление состояния расчетов", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
		
		Для каждого СтрокаДоговора ИЗ ТаблицаДоговоров Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаДоговора.ДоговорКонтрагента) Тогда
				Продолжить;
			КонецЕсли;
					
			Периоды  			= абс_ВосстановлениеВзаиморасчетов.ОпределитьПериод(СтруктураПараметров.Организация,СтруктураПараметров.ДатаАктуализации,СтруктураПараметров.АвансыПоПриобретению, СтруктураПараметров.АвансыПоРеализации,СтрокаДоговора.ДоговорКонтрагента);		
			МоментВремени 		= Периоды.Приобретение;
			ДатаНач 			= МоментВремени.Дата;
			
			Если НЕ ЗначениеЗаполнено(ДатаНач) Тогда
				ДатаНач = ДатаЗапретаПриобретение;
			КонецЕсли;		
			
			Запрос.УстановитьПараметр("НачалоПериода"						, ДатаНач );
			Запрос.УстановитьПараметр("КонецПериода" 						, КонецДня(СтруктураПараметров.ДатаАктуализации));
			Запрос.УстановитьПараметр("Организация"							, СтруктураПараметров.Организация );
			Запрос.УстановитьПараметр("ДоговорКонтрагента"					, СтрокаДоговора.ДоговорКонтрагента);
			Запрос.УстановитьПараметр("ПроведениеВзаимозачета"				, Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета);
			Запрос.УстановитьПараметр("ДатаЗапрета"							, ДатаЗапретаПриобретение);
			
			Запрос.Текст = ТекстОсновногоЗапроса;
			Результат = Запрос.Выполнить();
			
			ЗапросПоДокументам.УстановитьПараметр("НачалоПериода"			, ДатаНач);
			ЗапросПоДокументам.УстановитьПараметр("КонецПериода"			, КонецДня(СтруктураПараметров.ДатаАктуализации));
			ЗапросПоДокументам.УстановитьПараметр("Организация"				, СтруктураПараметров.Организация );
			ЗапросПоДокументам.УстановитьПараметр("ДоговорКонтрагента"		, СтрокаДоговора.ДоговорКонтрагента);
			ЗапросПоДокументам.УстановитьПараметр("ВидРасчетовСКонтрагентом", Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению);
			ЗапросПоДокументам.УстановитьПараметр("ДатаЗапрета"				, ДатаЗапретаПриобретение);
			
			ЗапросПоДокументам.Текст = ТекстЗапросаКВзаиморасчетамПоДокументам;
			РезультатЗапросаПоДокументам = ЗапросПоДокументам.Выполнить();
			
			//Если РезультатЗапросаПоДокументам.Пустой() Тогда
			//	Продолжить;
			//КонецЕсли;
			
			ТекстСообщения = "Организация <"+СтруктураПараметров.Организация+">; Договор <"+СтрокаДоговора.ДоговорКонтрагента+">: Начата обработка по поступлению";
			ЗаписьЖурналаРегистрации("Восстановление состояния расчетов", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);			
			
			ПоследовательностьДляРегистрации = Последовательности.РасчетыПоПриобретениюОрганизации;
			
			Результат = абс_ВосстановлениеВзаиморасчетов.ОбработатьДвижения(СтруктураПараметров.Организация,СтруктураПараметров.ДатаАктуализации,Результат, УдаляемыеВидыРегОпераций, ПоследовательностьДляРегистрации,
			"РасчетыПоПриобретению", РезультатЗапросаПоДокументам,мКэшВидовСубконтоПоСчетам,мВалютаРегламентированногоУчета,ДатаЗапретаПриобретение);
			
			Если Результат.Ошибка тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Организация <"+СтруктураПараметров.Организация+">; Договор <"+СтрокаДоговора.ДоговорКонтрагента+">: Обнаружена ошибка при проведении документа """+Результат.Документ+""".
				| Граница последовательности расчетов по приобретению установлена на "+Результат.Граница);
				ТекстСообщения = "Организация <"+СтруктураПараметров.Организация+">; Договор <"+СтрокаДоговора.ДоговорКонтрагента+">: Обнаружена ошибка при проведении документа """+Результат.Документ+""".
				| Граница последовательности расчетов по приобретению установлена на "+Результат.Граница;
				ЗаписьЖурналаРегистрации("Восстановление состояния расчетов", УровеньЖурналаРегистрации.Ошибка, , ,ТекстСообщения);
								
				ПоследовательностьДляРегистрации.УстановитьГраницу(Новый МоментВремени(Результат.Граница,Результат.Документ),Новый Структура("Организация,Договор",СтруктураПараметров.Организация,СтрокаДоговора.ДоговорКонтрагента));
			Иначе
				#Если Клиент Тогда
					Сообщить("Организация <"+СтруктураПараметров.Организация+">; Договор <"+СтрокаДоговора.ДоговорКонтрагента+">: Восстановление последовательности расчетов по приобретению успешно завершено");		
				#КонецЕсли
				ПоследовательностьДляРегистрации.УстановитьГраницу(Новый МоментВремени(Результат.Граница),Новый Структура("Организация,Договор",СтруктураПараметров.Организация,СтрокаДоговора.ДоговорКонтрагента));
				
				ТекстСообщения = "Организация <"+СтруктураПараметров.Организация+">; Договор <"+СтрокаДоговора.ДоговорКонтрагента+">: Восстановление последовательности расчетов по реализации успешно завершено";
				ЗаписьЖурналаРегистрации("Восстановление состояния расчетов", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
				
				Если СтруктураПараметров.ИспользоватьПотоки Тогда
				
					НаборЗаписей = РегистрыСведений.абс_СоставПотоков.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ПринадлежностьПотока.Установить(перечисления.абс_ПринадлежностьПотока.АвансыПоПриобретению);
					НаборЗаписей.Отбор.Организация.Установить(СтруктураПараметров.Организация);
					НаборЗаписей.Отбор.Поток.Установить(СтруктураПараметров.Поток);
					НаборЗаписей.Отбор.ОбъектПотока.Установить(СтрокаДоговора.ДоговорКонтрагента);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					
					Запись = НаборЗаписей.Добавить();
					Запись.Выполнено = Истина;
					Запись.Поток = СтруктураПараметров.Поток;
					Запись.ПринадлежностьПотока = перечисления.абс_ПринадлежностьПотока.АвансыПоПриобретению;
					Запись.ОбъектПотока = СтрокаДоговора.ДоговорКонтрагента;
					Запись.Организация = СтруктураПараметров.Организация;
					НаборЗаписей.Записать();
					
				КонецЕсли;		
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;

	Если СтруктураПараметров.АвансыПоРеализации Тогда
		
		ЗапросПоДоговорам.УстановитьПараметр("НачалоПериода"		, ДатаЗапретаПриобретение);
		ЗапросПоДоговорам.УстановитьПараметр("КонецПериода" 		, КонецДня(СтруктураПараметров.ДатаАктуализации));
		ЗапросПоДоговорам.УстановитьПараметр("Организация"			, СтруктураПараметров.Организация);
		
		ЗапросПоДоговорам.УстановитьПараметр("Поток"				, СтруктураПараметров.Поток);
		ЗапросПоДоговорам.УстановитьПараметр("ПринадлежностьПотока"	, Перечисления.абс_ПринадлежностьПотока.АвансыПоРеализации);
		
		ЗапросПоДоговорам.УстановитьПараметр("ИспользоватьОтборПоРегистратору"	, НЕ СтруктураПараметров.ПередвигатьГраницуПоВсемДоговорам);
		ЗапросПоДоговорам.УстановитьПараметр("МассивПустыхРегистраторов"        , ПолучитьМассивПустыхРегистраторовПоследовательности("РасчетыПоРеализацииОрганизации"));		
		ЗапросПоДоговорам.УстановитьПараметр("ЗначениеНеопределено"				, Неопределено);
		
		ЗапросПоДоговорам.Текст = СтрЗаменить(ТекстЗапросаПоДоговорам, "РасчетыПоПриобретениюОрганизации", "РасчетыПоРеализацииОрганизации");
		
		ТаблицаДоговоров = ЗапросПоДоговорам.Выполнить().Выгрузить();
		
		ТекстСообщения = "Восстановление последовательности по реализации. Количество договоров: " + ТаблицаДоговоров.Количество() + ".";
		ЗаписьЖурналаРегистрации("Восстановление состояния расчетов", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);		
		
		Для Каждого СтрокаДоговора ИЗ ТаблицаДоговоров Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаДоговора.ДоговорКонтрагента) Тогда
				Продолжить;
			КонецЕсли;			
			
			Периоды  = абс_ВосстановлениеВзаиморасчетов.ОпределитьПериод(СтруктураПараметров.Организация,СтруктураПараметров.ДатаАктуализации,СтруктураПараметров.АвансыПоПриобретению, СтруктураПараметров.АвансыПоРеализации,СтрокаДоговора.ДоговорКонтрагента);		
			МоментВремени = Периоды.Реализация;
			ДатаНач = МоментВремени.Дата;
			
			Если НЕ ЗначениеЗаполнено(ДатаНач) Тогда
				ДатаНач = ДатаЗапретаРеализация;
			КонецЕсли;				
			
			Запрос.УстановитьПараметр("НачалоПериода"						, ДатаНач );
			Запрос.УстановитьПараметр("КонецПериода" 						, КонецДня(СтруктураПараметров.ДатаАктуализации));
			Запрос.УстановитьПараметр("Организация"							, СтруктураПараметров.Организация);
			Запрос.УстановитьПараметр("ДоговорКонтрагента"					, СтрокаДоговора.ДоговорКонтрагента);
			Запрос.УстановитьПараметр("ПроведениеВзаимозачета"				, Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета);
			Запрос.УстановитьПараметр("ДатаЗапрета"							, ДатаЗапретаРеализация);			
			
			Запрос.Текст = СтрЗаменить(ТекстОсновногоЗапроса, "РасчетыПоПриобретениюОрганизации", "РасчетыПоРеализацииОрганизации");
			Результат = Запрос.Выполнить();
			
			ЗапросПоДокументам.УстановитьПараметр("НачалоПериода"			, ДатаНач);
			ЗапросПоДокументам.УстановитьПараметр("КонецПериода"			, КонецДня(СтруктураПараметров.ДатаАктуализации));
			ЗапросПоДокументам.УстановитьПараметр("Организация"				, СтруктураПараметров.Организация );
			ЗапросПоДокументам.УстановитьПараметр("ДоговорКонтрагента"		, СтрокаДоговора.ДоговорКонтрагента);
			ЗапросПоДокументам.УстановитьПараметр("ВидРасчетовСКонтрагентом", Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации);
			ЗапросПоДокументам.УстановитьПараметр("ДатаЗапрета"				, ДатаЗапретаРеализация);
			
			ЗапросПоДокументам.Текст = ТекстЗапросаКВзаиморасчетамПоДокументам;
			РезультатЗапросаПоДокументам = ЗапросПоДокументам.Выполнить();
			
			//Если РезультатЗапросаПоДокументам.Пустой() Тогда
			//	Продолжить;
			//КонецЕсли;
			
			ТекстСообщения = "Организация <"+СтруктураПараметров.Организация+">; Договор <"+СтрокаДоговора.ДоговорКонтрагента+">: Начата обработка по реализации";
			ЗаписьЖурналаРегистрации("Восстановление состояния расчетов", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);			
			
			ПоследовательностьДляРегистрации = Последовательности.РасчетыПоРеализацииОрганизации;
			
			Результат = абс_ВосстановлениеВзаиморасчетов.ОбработатьДвижения(СтруктураПараметров.Организация,СтруктураПараметров.ДатаАктуализации,Результат, УдаляемыеВидыРегОпераций, ПоследовательностьДляРегистрации, 
			"РасчетыПоРеализации", РезультатЗапросаПоДокументам,мКэшВидовСубконтоПоСчетам,мВалютаРегламентированногоУчета,ДатаЗапретаРеализация);
			
			Если Результат.Ошибка тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Организация <"+СтруктураПараметров.Организация+">; Договор <"+СтрокаДоговора.ДоговорКонтрагента+">: Обнаружена ошибка при проведении документа """+Результат.Документ+""".
				| Граница последовательности расчетов по реализации установлена на "+Результат.Граница);
				
				ТекстСообщения = "Организация <"+СтруктураПараметров.Организация+">; Договор <"+СтрокаДоговора.ДоговорКонтрагента+">: Обнаружена ошибка при проведении документа """+Результат.Документ+""".
				| Граница последовательности расчетов по реализации установлена на "+Результат.Граница;
				ЗаписьЖурналаРегистрации("Восстановление состояния расчетов", УровеньЖурналаРегистрации.Ошибка, , ,ТекстСообщения);
				
				ПоследовательностьДляРегистрации.УстановитьГраницу(Новый МоментВремени(Результат.Граница,Результат.Документ),Новый Структура("Организация,Договор",СтруктураПараметров.Организация,СтрокаДоговора.ДоговорКонтрагента));
				
			Иначе
				#Если Клиент Тогда
					Сообщить("Организация <"+СтруктураПараметров.Организация+">; Договор <"+СтрокаДоговора.ДоговорКонтрагента+">: Восстановление последовательности расчетов по реализации успешно завершено");		
				#КонецЕсли
				ПоследовательностьДляРегистрации.УстановитьГраницу(Новый МоментВремени(Результат.Граница),Новый Структура("Организация,Договор",СтруктураПараметров.Организация,СтрокаДоговора.ДоговорКонтрагента));
				
				ТекстСообщения = "Организация <"+СтруктураПараметров.Организация+">; Договор <"+СтрокаДоговора.ДоговорКонтрагента+">: Восстановление последовательности расчетов по реализации успешно завершено";
				ЗаписьЖурналаРегистрации("Восстановление состояния расчетов", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
				
				Если СтруктураПараметров.ИспользоватьПотоки Тогда
					
					НаборЗаписей = РегистрыСведений.абс_СоставПотоков.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ПринадлежностьПотока.Установить(Перечисления.абс_ПринадлежностьПотока.АвансыПоРеализации);
					НаборЗаписей.Отбор.Организация.Установить(СтруктураПараметров.Организация);
					НаборЗаписей.Отбор.Поток.Установить(СтруктураПараметров.Поток);
					НаборЗаписей.Отбор.ОбъектПотока.Установить(СтрокаДоговора.ДоговорКонтрагента);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					
					Запись = НаборЗаписей.Добавить();
					Запись.Выполнено = Истина;
					Запись.Поток = СтруктураПараметров.Поток;
					Запись.ПринадлежностьПотока = перечисления.абс_ПринадлежностьПотока.АвансыПоРеализации;
					Запись.ОбъектПотока = СтрокаДоговора.ДоговорКонтрагента;
					Запись.Организация = СтруктураПараметров.Организация;
					НаборЗаписей.Записать();
					
				КонецЕсли;		
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	#Если Клиент Тогда
		Состояние("Организация <"+СтруктураПараметров.Организация+">: Корректировка движений успешна завершена.");
	#КонецЕсли
	
КонецПроцедуры

Функция ПолучитьСтруктуруПараметровПоНастройке(НастройкаСсылка)
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ДатаАктуализации"					, КонецДня(ТекущаяДата()));
	СтруктураПараметров.Вставить("Организация"						, НастройкаСсылка.Организация);
	СтруктураПараметров.Вставить("ПринадлежностьПотока"				, НастройкаСсылка.Принадлежность);
	СтруктураПараметров.Вставить("АвансыПоПриобретению"				, НастройкаСсылка.Принадлежность = Перечисления.абс_ПринадлежностьПотока.АвансыПоПриобретению);
	СтруктураПараметров.Вставить("АвансыПоРеализации"				, НастройкаСсылка.Принадлежность = Перечисления.абс_ПринадлежностьПотока.АвансыПоРеализации);
	СтруктураПараметров.Вставить("ИспользоватьПотоки"				, ЗначениеЗаполнено(НастройкаСсылка.Поток));
	СтруктураПараметров.Вставить("Поток"							, НастройкаСсылка.Поток);
	СтруктураПараметров.Вставить("ДатаЗапретаПотока"				, НастройкаСсылка.ДатаЗапрета);
	СтруктураПараметров.Вставить("ДатаЗапрета"						, ПолучитьДатуЗапретаРедактированияДанных(НастройкаСсылка.Организация));
	СтруктураПараметров.Вставить("ПередвигатьГраницуПоВсемДоговорам", НастройкаСсылка.ПередвигатьГраницуПоВсемДоговорам);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьДатуЗапретаРедактированияДанных(Организация)
	
	ДатаЗапрета = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	МАКСИМУМ(ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений) КАК ГраницаЗапретаИзменений,
		|	МАКСИМУМ(ГраницыЗапретаИзмененияДанных.абс_ГраницаЗапретаВВодаПервичныхДокументов) КАК абс_ГраницаЗапретаВВодаПервичныхДокументов,
		|	МАКСИМУМ(ГраницыЗапретаИзмененияДанных.абс_ГраницаЗапретаОбработкиБухгалтером) КАК абс_ГраницаЗапретаОбработкиБухгалтером
		|ИЗ
		|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
		|ГДЕ
		|	ГраницыЗапретаИзмененияДанных.Организация = &Организация
		|	И ГраницыЗапретаИзмененияДанных.Пользователь В (ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка),&Неопределено)";
		
		Запрос.УстановитьПараметр("Организация"		, Организация);
		Запрос.УстановитьПараметр("Неопределено" 	, Неопределено);
		
		Рез= Запрос.Выполнить().Выбрать();
		
		Если Рез.Следующий() Тогда
			// В регистре граница запрета - последния день, когда можно формировать проводки
			// для восстановления последовательности используется первый день открытого периода
			ДатаЗапрета = КонецДня(Рез.ГраницаЗапретаИзменений) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаЗапрета;
	
КонецФункции

Функция ПолучитьМассивПустыхРегистраторовПоследовательности(ИмяПоследовательности)
	
	МетаданныеПоследовательности = Метаданные.Последовательности[ИмяПоследовательности];
	
	МассивРегистраторов = Новый Массив();
	
	//Для Каждого ТекДокумент Из МетаданныеПоследовательности.Документы Цикл
	//	
	//	МассивРегистраторов.Добавить(Документы[ТекДокумент.Имя].ПустаяСсылка());
	//	
	//КонецЦикла;
	
	МассивРегистраторов.Добавить(Неопределено);
	
	Возврат МассивРегистраторов;
	
КонецФункции
// АБС ВСТАВКА Фролов 20121013 КОНЕЦ


// АБС ВСТАВКА Фролов 20121014
// Сдвиг границы последовательности при отмене проведения документа
Процедура СдвинутьГраницуПоследовательностиНазадПриОтменеПроведедния(Ссылка, ВидОперации, Период, Организация, ТаблицаДокументаПоПриобретению = Неопределено, ТаблицаДокументаПоРеализации = Неопределено) Экспорт

	ТаблицаДвижений = Неопределено;
	ВидДокумента = Ссылка.Метаданные().Имя;
	
	СтруктураНаправлениеДвижения = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента, ВидОперации);
	НаправлениеДвижения = СтруктураНаправлениеДвижения.Направление;
	РасчетыВозврат      = СтруктураНаправлениеДвижения.РасчетыВозврат;
	
	Если ТаблицаДокументаПоРеализации <> Неопределено и (НаправлениеДвижения = "Поступление" и РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты) или
		(НаправлениеДвижения = "Выбытие" и РасчетыВозврат =  Перечисления.РасчетыВозврат.Возврат) тогда
		
		ТаблицаДвижений = ТаблицаДокументаПоРеализации;
		ИмяПоследовательностиДляРегистрации = "РасчетыПоРеализацииОрганизации";

	ИначеЕсли ТаблицаДокументаПоПриобретению <> Неопределено Тогда
		
		ТаблицаДвижений = ТаблицаДокументаПоПриобретению;
		ИмяПоследовательностиДляРегистрации = "РасчетыПоПриобретениюОрганизации";

	КонецЕсли;
	
	Если ТаблицаДвижений <> Неопределено Тогда
		МассивДоговоров = ТаблицаДвижений.ВыгрузитьКолонку("ДоговорКонтрагента");
	
		Для Каждого Договор из МассивДоговоров Цикл
			БухгалтерскийУчетРасчетовСКонтрагентами.СдвигГраницыПоследовательностиНазад(ИмяПоследовательностиДляРегистрации, Новый МоментВремени(Период, Ссылка), новый структура("Организация,Договор",Организация, Договор));
		КонецЦикла;
	Конецесли;
	
	
КонецПроцедуры
// АБС ВСТАВКА Фролов 20121014

//***** Гетц. Разнесение платежей.
// Функция выполняет разделение таблицы по взаиморасчетам реализации на 2 - одна с документам расчетов, другая без.
Функция ОбработатьТаблицуДокументов(ТаблицаДокументов, ПустаяТаблицаДокументов, ДатаАктуализации)
	
	Если ТаблицаДокументов.Количество() = 0 Тогда 
		Возврат ТаблицаДокументов;
	КонецЕсли;
	
	ПустаяТаблицаДокументов.Очистить();
	Если ТипЗнч(ТаблицаДокументов[0].Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		ТаблицаВзаиморасчетовИзДокумента = ТаблицаДокументов[0].Регистратор.ДокументыРасчетовСКонтрагентом.Выгрузить();
	КонецЕсли;
	
	Для Каждого СтрокаДокумент Из ТаблицаДокументов Цикл 
		
		Если ЗначениеЗаполнено(СтрокаДокумент.ДокументРасчетов) Тогда 
			
			Если СтрокаДокумент.ДокументРасчетов.Проведен И СтрокаДокумент.ДокументРасчетов.Дата <= ТаблицаДокументов[0].Регистратор.Дата Тогда 
				НоваяСтрока = ПустаяТаблицаДокументов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент);
				НоваяСтрока.ВестиПоДокументамРасчетовСКонтрагентом = Истина;
				СтрокаДокумент.СуммаВзаиморасчетов = 0;
				СтрокаДокумент.СуммаНДС = 0;
				СтрокаДокумент.СуммаСНДС = 0;
				СтрокаДокумент.ВалютнаяСумма = 0;
				СтрокаДокумент.РублеваяСумма = 0;
			Иначе 
				СтрокаДокумент.ДокументРасчетов = Неопределено;
			КонецЕсли;
			Продолжить;
			
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДокумент.Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
			Для Каждого СтрокаРасчетов Из ТаблицаВзаиморасчетовИзДокумента Цикл 
				
				Если СтрокаРасчетов.СуммаВзаиморасчетов = 0 Или СтрокаДокумент.СуммаВзаиморасчетов = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				
				НоваяСтрока = ПустаяТаблицаДокументов.Добавить();					
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент);
				НоваяСтрока.ДокументРасчетов = СтрокаРасчетов.ДокументРасчетовСКонтрагентом;
				
				НССумма = Мин(СтрокаРасчетов.СуммаВзаиморасчетов, СтрокаДокумент.СуммаВзаиморасчетов);
				СДСумма = Макс(0, СтрокаДокумент.СуммаВзаиморасчетов - СтрокаРасчетов.СуммаВзаиморасчетов);
				
				МассивРаспределения = Новый Массив;
				МассивРаспределения.Добавить(НССумма);
				МассивРаспределения.Добавить(СДСумма);
				
				СтрокаДокумент.СуммаВзаиморасчетов = СДСумма;
				НоваяСтрока.СуммаВзаиморасчетов = НССумма;
				
				МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаДокумент.СуммаНДС, МассивРаспределения);
				Если МассивСумм = Неопределено Тогда 
					СтрокаДокумент.СуммаНДС = 0;
					НоваяСтрока.СуммаНДС = 0;
				Иначе 
					СтрокаДокумент.СуммаНДС = МассивСумм[1];
					НоваяСтрока.СуммаНДС = МассивСумм[0];
				КонецЕсли;
				
				МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаДокумент.СуммаСНДС, МассивРаспределения);
				Если МассивСумм = Неопределено Тогда
					СтрокаДокумент.СуммаСНДС = 0;
					НоваяСтрока.СуммаСНДС = 0;
				Иначе 
					СтрокаДокумент.СуммаСНДС = МассивСумм[1];
					НоваяСтрока.СуммаСНДС = МассивСумм[0];
				КонецЕсли;
				
				МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаДокумент.ВалютнаяСумма, МассивРаспределения);
				Если МассивСумм = Неопределено Тогда
					СтрокаДокумент.ВалютнаяСумма = 0;
					НоваяСтрока.ВалютнаяСумма = 0;
				Иначе 
					СтрокаДокумент.ВалютнаяСумма = МассивСумм[1];
					НоваяСтрока.ВалютнаяСумма = МассивСумм[0];
				КонецЕсли;
				
				МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаДокумент.РублеваяСумма, МассивРаспределения);
				Если МассивСумм = Неопределено Тогда
					СтрокаДокумент.РублеваяСумма = 0;
					НоваяСтрока.РублеваяСумма = 0;
				Иначе 
					СтрокаДокумент.РублеваяСумма = МассивСумм[1];
					НоваяСтрока.РублеваяСумма = МассивСумм[0];
				КонецЕсли;
				
				СтрокаРасчетов.СуммаВзаиморасчетов = Макс(0, СтрокаРасчетов.СуммаВзаиморасчетов - НССумма);
				СтрокаРасчетов.СуммаРегл = Макс(0, СтрокаРасчетов.СуммаРегл - НоваяСтрока.РублеваяСумма);
			КонецЦикла;
		КонецЕсли;
		//АБС ВСТАВКА 000025579 Разнесение платежей  18.03.2014 16:48:50  Гетц
		// Необходимо добавить в обход первого порядка строки, которые будут принудительно закрываться в "будущем"
		ВыборкаИзБудущего = ПолучитьИнформациюПоБудущимПокрытиям(СтрокаДокумент.Регистратор, ДатаАктуализации); //***** 16.04.2014 добавлена дата актуализации
		Если Не ВыборкаИзБудущего = Неопределено Тогда 
			НоваяСтрока = ПустаяТаблицаДокументов.Добавить();					
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент);
			НоваяСтрока.ДокументРасчетов = Неопределено;
			
			НССумма = Мин(ВыборкаИзБудущего.СуммаВал, СтрокаДокумент.СуммаВзаиморасчетов);
			СДСумма = Макс(0, СтрокаДокумент.СуммаВзаиморасчетов - ВыборкаИзБудущего.СуммаВал);
			
			МассивРаспределения = Новый Массив;
			МассивРаспределения.Добавить(НССумма);
			МассивРаспределения.Добавить(СДСумма);
			
			СтрокаДокумент.СуммаВзаиморасчетов = СДСумма;
			НоваяСтрока.СуммаВзаиморасчетов = НССумма;
			
			МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаДокумент.СуммаНДС, МассивРаспределения);
			Если МассивСумм = Неопределено Тогда 
				СтрокаДокумент.СуммаНДС = 0;
				НоваяСтрока.СуммаНДС = 0;
			Иначе 
				СтрокаДокумент.СуммаНДС = МассивСумм[1];
				НоваяСтрока.СуммаНДС = МассивСумм[0];
			КонецЕсли;
			
			МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаДокумент.СуммаСНДС, МассивРаспределения);
			Если МассивСумм = Неопределено Тогда
				СтрокаДокумент.СуммаСНДС = 0;
				НоваяСтрока.СуммаСНДС = 0;
			Иначе 
				СтрокаДокумент.СуммаСНДС = МассивСумм[1];
				НоваяСтрока.СуммаСНДС = МассивСумм[0];
			КонецЕсли;
			
			МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаДокумент.ВалютнаяСумма, МассивРаспределения);
			Если МассивСумм = Неопределено Тогда
				СтрокаДокумент.ВалютнаяСумма = 0;
				НоваяСтрока.ВалютнаяСумма = 0;
			Иначе 
				СтрокаДокумент.ВалютнаяСумма = МассивСумм[1];
				НоваяСтрока.ВалютнаяСумма = МассивСумм[0];
			КонецЕсли;
			
			МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаДокумент.РублеваяСумма, МассивРаспределения);
			Если МассивСумм = Неопределено Тогда
				СтрокаДокумент.РублеваяСумма = 0;
				НоваяСтрока.РублеваяСумма = 0;
			Иначе 
				СтрокаДокумент.РублеваяСумма = МассивСумм[1];
				НоваяСтрока.РублеваяСумма = МассивСумм[0];
			КонецЕсли;
		КонецЕсли;
		//АБС ВСТАВКА 000025579 Разнесение платежей КОНЕЦ
	КонецЦикла;
	ПустаяТаблицаДокументов.Свернуть("Активность, ВалютаВзаиморасчетов, ВалютаДокумента, ВедениеВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом, ВидДвиженияПоРасчетам, ВидДоговора, ВидДокумента, ВидОперации, ВидЦенности, ДоговорКонтрагента, Документ, ДокументРасчетов, Контрагент, КоррСубконто1, КоррСубконто2, КоррСубконто3, КоррСчет, КратностьВзаиморасчетов, КратностьДокумента, КурсВзаиморасчетов, КурсДокумента, Направление, Номенклатура, НомерСтроки, НомерСтрокиДокумента, Организация, ОтражатьВНалоговомУчете, Период, РасчетыВУсловныхЕдиницах, РасчетыВозврат, Регистратор, Сделка, Склад, СтавкаНДС, СубконтоНДС1, СубконтоНДС2, СубконтоНДС3, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3, СчетАванса, СчетНДС, СчетОплаты, СчетУчетаНУ", "ВалютнаяСумма, РублеваяСумма, СуммаВзаиморасчетов, СуммаНДС, СуммаСНДС");
	Сч = ПустаяТаблицаДокументов.Количество();
	Пока Сч > 0 Цикл 
		СтрокаТаблицы = ПустаяТаблицаДокументов[Сч - 1];
		Если СтрокаТаблицы.ВалютнаяСумма = 0 И СтрокаТаблицы.РублеваяСумма = 0 И СтрокаТаблицы.СуммаВзаиморасчетов = 0 И СтрокаТаблицы.СуммаНДС = 0 И СтрокаТаблицы.СуммаСНДС = 0 Тогда
			ПустаяТаблицаДокументов.Удалить(СтрокаТаблицы);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Сч = ТаблицаДокументов.Количество();
	Пока Сч > 0 Цикл 
		СтрокаТаблицы = ТаблицаДокументов[Сч - 1];
		Если СтрокаТаблицы.ВалютнаяСумма = 0 И СтрокаТаблицы.РублеваяСумма = 0 И СтрокаТаблицы.СуммаВзаиморасчетов = 0 И СтрокаТаблицы.СуммаНДС = 0 И СтрокаТаблицы.СуммаСНДС = 0 Тогда
			ТаблицаДокументов.Удалить(СтрокаТаблицы);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Возврат ПустаяТаблицаДокументов;
КонецФункции

Процедура ОчиститьДвиженияПоРегиструРасчетов(ТаблицаДокументов)
	Для Каждого СтрокаДокумент Из ТаблицаДокументов Цикл
		Если СтрокаДокумент.Строки[0].ВидДокумента = "КорректировкаДолга" Тогда 
			Продолжить;
		КонецЕсли;
		#Если Клиент Тогда 
			Состояние("Уделение движений по регистру расчетов по реализации: " + Строка(СтрокаДокумент.Регистратор));
		#КонецЕсли
		НаборЗаписей = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтрокаДокумент.Регистратор, РегистрыНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации, Истина);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

Функция РеализацииОбработатьДвижения(Организация, ДатаАктуализации, Результат, УдаляемыеВидыРегОпераций, ПоследовательностьДляРегистрацииСсылка, ВидРасчетов, РезультатЗапросаПоДокументам, мКэшВидовСубконтоПоСчетам, мВалютаРегламентированногоУчета, мДатаЗапрета) Экспорт
	
	мКэшВидовСубконтоПоСчетам = Неопределено;
	ТаблицаДвижений = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПоследовательностьДляРегистрации = ПоследовательностьДляРегистрацииСсылка.СоздатьНаборЗаписей();
	ТаблицаРасчетовПоДокументам = РезультатЗапросаПоДокументам.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПустаяТаблицаДокументов = Результат.Выгрузить().СкопироватьКолонки(); //***** Пустая таблица с нужными колонками
	ОчиститьДвиженияПоРегиструРасчетов(ТаблицаДвижений.Строки); //***** Удаляются все движения по регистру Расчеты по реализации
	
	ЕстьОшибка = Ложь;
	ДокументОшибки = Неопределено;
	
	Граница = КонецДня(ДатаАктуализации);
	
	ПустаяТаблицаПоВзаиморасчетам = Новый ТаблицаЗначений;
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("ДоговорКонтрагента");
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("Сделка");
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("ДокументРасчетовСКонтрагентом");
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("ДатаОплаты");
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	//***** Соответствие для определения необходимости очищать проводки при втором обходе
	ОчищатьПроводки = Новый Соответствие;
	Для Сч = 0 По 1 Цикл //***** Двойной обход
		Для каждого Документ Из ТаблицаДвижений.Строки Цикл
			Попытка
				СформированныеДвижения = Новый Структура();
				Если Документ.Строки.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;
				ВидДокумента = Документ.Строки[0].ВидДокумента;
				
				Если Документ.Регистратор.Дата < мДатаЗапрета Тогда //***** 12.05.2014 АБС Вставка Гетц. При восстановление расчетов "включаем" документы по дате равные дате запрета
					
					Продолжить;
					
				КонецЕсли;
				
				//АБС ВСТАВКА №39279 НАЧАЛО «27 февраля 2014 г.», Пополитов
				//Если в ППИ больше 2 договоров, без этого условия, остаются строки только по 1 договору
				Если ВидДокумента = "ПлатежноеПоручениеИсходящее" 
					ИЛИ ВидДокумента = "ПлатежноеПоручениеВходящее" 
					ИЛИ ВидДокумента = "ПриходныйКассовыйОрдер" 
					ИЛИ ВидДокумента = "РасходныйКассовыйОрдер"
					Тогда  	
					ЗапросПроверочный = Новый Запрос;
					ЗапросПроверочный.УстановитьПараметр("Регистратор",Документ.Регистратор);
					ЗапросПроверочный.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	ТЧ.ДоговорКонтрагента
					|ИЗ
					|	Документ."+ВидДокумента+".РасшифровкаПлатежа КАК ТЧ
					|ГДЕ
					|	ТЧ.Ссылка = &Регистратор";
					Результат = ЗапросПроверочный.Выполнить().Выгрузить().Количество();
					Если Результат > 1 Тогда
						ДокументОбъект = Документ.Регистратор.ПолучитьОбъект();
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение); 				
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
				//\\АБС ВСТАВКА №39279 КОНЕЦ
		
				Если ВидДокумента = "КорректировкаДолга" Тогда
					
					ДокументОбъект = Документ.Регистратор.ПолучитьОбъект();
					ДокументОбъект.РежимВосстановленияПоследовательностейРасчетов = Истина;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
					Продолжить;
				КонецЕсли;
				НаправлениеДвиженияДляДокументаДвиженияДенежныхСредств = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента).Направление;
				НаправлениеДвиженияДляДокументаДвиженияПриобретенияРеализации = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента).Направление;
				Если НаправлениеДвиженияДляДокументаДвиженияДенежныхСредств=Неопределено 
					И НаправлениеДвиженияДляДокументаДвиженияПриобретенияРеализации=неопределено Тогда
					ЕстьОшибка = Истина;
					Если ДокументОшибки = Неопределено тогда
						ДокументОшибки = Документ.Регистратор;
					КонецЕслИ;
					Граница = МиН(Документ.Строки[0].Период,Граница);
					Продолжить;
				КонецЕсли;
				
				Если не (ВидДокумента = "ВозвратТоваровПоставщику" или ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ")
					и НаправлениеДвиженияДляДокументаДвиженияДенежныхСредств <> Неопределено тогда
					//Документ обрабатывается в блоке движений денежных средств				
					//***** Изменена таблица документов
					Если Сч = 0 Тогда 
						ТаблицаДокументов = ОбработатьТаблицуДокументов(Документ.Строки, ПустаяТаблицаДокументов, ДатаАктуализации);//***** 16.04.2014. Гетц. Добавлена дата актуализации
						ОчищатьПроводки.Вставить(Документ.Регистратор, (ТаблицаДокументов.Количество() = 0));
					Иначе 
						ТаблицаДокументов = Документ.Строки;
					КонецЕсли;
					Если ТаблицаДокументов.Количество() = 0 Тогда 
						Продолжить;
					КонецЕсли;
					//*****\\
					СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенегИзРегистраСведений(ТаблицаДокументов, ТаблицаДвижений.Колонки);
					СтруктураПараметров.Вставить("ПорядокОбходаВосставновления", Сч);//***** При восстановлении последовательности контролируем порядок обхода
					СтруктураПараметров.Вставить("ДатаАктуализации", ДатаАктуализации);//***** При восстановлении последовательности остатки на втором обходе получаем на дату актуальности
					// Регистрация в последовательности
					ПоследовательностьДляРегистрации.Отбор.Регистратор.Установить(Документ.регистратор);
					ПоследовательностьДляРегистрации.Очистить();
					
					// АБС ИЗМЕНЕНО Фролов 20121014 
					// Записываем движение по последовательности
					Для Каждого ТекСтрокаДок Из ТаблицаДокументов Цикл //***** Заменена таблица
						ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
						ЗаписьРегистрации.Период 			= ТекСтрокаДок.Период;
						ЗаписьРегистрации.Организация 		= Организация;
						ЗаписьРегистрации.Договор			= ТекСтрокаДок.ДоговорКонтрагента;
						
						//ЗаписьРегистрации.ПроведенВХронологическойПоследовательности = Истина;				
					КонецЦикла;
					ПоследовательностьДляРегистрации.Записать();
					// АБС ИЗМЕНЕНО Фролов 20121014 КОНЕЦ
					
					СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Документ.Регистратор);
					СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
					
					#Если Клиент Тогда
						Состояние("Корректировка движений документа: " + СтруктураПараметров.Заголовок);
					#КонецЕсли
					ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Хозрасчетный,истина);
					Если Сч = 0 Или (Сч = 1 И ОчищатьПроводки[СтруктураПараметров.Регистратор] = Истина) Тогда  //***** Очищаем проводки. Только при первом обходе.
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиБУ,УдаляемыеВидыРегОпераций);
					КонецЕсли;
					СформированныеДвижения.Вставить("Хозрасчетный",ПроводкиБУ);
					
					ПроводкиНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Налоговый,истина);
					Если Сч = 0 Или (Сч = 1 И ОчищатьПроводки[СтруктураПараметров.Регистратор] = Истина) Тогда  //***** Очищаем проводки. Только при первом обходе.
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиНУ,УдаляемыеВидыРегОпераций);
					КонецЕсли;
					СформированныеДвижения.Вставить("Налоговый",ПроводкиНУ);
					
					//АБС ВСТАВКА Навценя 21.08.2014
					//Если ВыполнитьДвижениеДенег(СтруктураПараметров, СформированныеДвижения, СтруктураШапкиДокумента, УдаляемыеВидыРегОпераций,мКэшВидовСубконтоПоСчетам) Тогда
					ТЗ_СуммовыеРазницы = Неопределено;
					Если ВыполнитьДвижениеДенег(СтруктураПараметров, СформированныеДвижения, СтруктураШапкиДокумента, УдаляемыеВидыРегОпераций,мКэшВидовСубконтоПоСчетам, ТЗ_СуммовыеРазницы) Тогда
					//АБС ВСТАВКА КОНЕЦ
						ЕстьОшибка = Истина;
						Если ДокументОшибки = Неопределено тогда
							ДокументОшибки = Документ.Регистратор;
						КонецЕслИ;
						Граница = МиН(СтруктураПараметров.Период,Граница);
					КонецЕсли;
					//АБС ВСТАВКА Разнесение платежей  20.03.2014 12:49:41  Гетц
					Если Сч = 0 Тогда
						//АБС ВСТАВКА Навценя 21.08.2014
						ОбработатьТаблицуДокументовПослеОбходаПервогоПорядка(ТаблицаДокументов, Документ.Строки, СформированныеДвижения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Выгрузить(), ТЗ_СуммовыеРазницы);						
						//АБС ВСТАВКА КОНЕЦ
					КонецЕсли;
					//АБС ВСТАВКА Разнесение платежей КОНЕЦ
				ИначеЕсли НаправлениеДвиженияДляДокументаДвиженияПриобретенияРеализации <> Неопределено тогда
					//Документ приобретения или реализации
					//***** Изменена таблица документов					
					Если Сч = 0 Тогда 
						ТаблицаДокументов = ОбработатьТаблицуДокументов(Документ.Строки, ПустаяТаблицаДокументов, ДатаАктуализации);//***** 16.04.2014. Гетц. Добавлена дата актуализации
						ОчищатьПроводки.Вставить(Документ.Регистратор, (ТаблицаДокументов.Количество() = 0));
					Иначе 
						ТаблицаДокументов = Документ.Строки;
					КонецЕсли;
					Если ТаблицаДокументов.Количество() = 0 Тогда 
						Продолжить;
					КонецЕсли;
					//*****\\
					СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАвансаИзРегистраСведений(ТаблицаДокументов, ТаблицаДвижений.Колонки);
					
					//АБС ВСТАВКА 02.10.2014 Навценя
					ЗаполнитьКурсыВалютПоДокументу(СтруктураПараметров, мВалютаРегламентированногоУчета);
					//АБС ВСТАВКА КОНЕЦ
					СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
					СтруктураПараметров.Вставить("ПорядокОбходаВосставновления", Сч);//***** При восстановлении последовательности контролируем порядок обхода
					СтруктураПараметров.Вставить("ДатаАктуализации", ДатаАктуализации);//***** При восстановлении последовательности остатки на втором обходе получаем на дату актуальности
					Если ВидДокумента = "ОтчетКомиссионераОПродажах" Тогда
						Если ВидРасчетов = "РасчетыПоРеализации" Тогда
							СтруктураПараметров.Вставить("Направление", "Выбытие");
						Иначе
							СтруктураПараметров.Вставить("Направление", "Поступление");
						КонецЕсли;
					КонецЕсли;
					// Регистрация в последовательности
					ПоследовательностьДляРегистрации.Отбор.Регистратор.Установить(Документ.регистратор);
					ПоследовательностьДляРегистрации.Очистить();
					
					// АБС ИЗМЕНЕНО Фролов 20121014 
					// Записываем движение по последовательности
					Для Каждого ТекСтрокаДок Из Документ.Строки Цикл
						ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
						ЗаписьРегистрации.Период 			= ТекСтрокаДок.Период;
						ЗаписьРегистрации.Организация 		= Организация;
						ЗаписьРегистрации.Договор			= ТекСтрокаДок.ДоговорКонтрагента;
						
						//ЗаписьРегистрации.ПроведенВХронологическойПоследовательности = Истина;				
					КонецЦикла;
					ПоследовательностьДляРегистрации.Записать();
					// АБС ИЗМЕНЕНО Фролов 20121014 КОНЕЦ
					
					СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Документ.Регистратор);
					
					Для каждого Параметр Из СтруктураШапкиДокумента Цикл
						Если не СтруктураПараметров.Свойство(Параметр.Ключ) Тогда
							СтруктураПараметров.Вставить(Параметр.Ключ,Параметр.Значение);
						КонецЕсли; 
					КонецЦикла; 
					
					#Если Клиент Тогда
						Состояние("Корректировка движений документа: " + СтруктураПараметров.Заголовок);
					#КонецЕсли
					Если СтруктураПараметров.ВестиПоДокументамРасчетовСКонтрагентом Тогда
						СтрокиТаблицыПоВзаиморасчетам = ТаблицаРасчетовПоДокументам.Строки.Найти(Документ.Регистратор, "Регистратор", Ложь);
						ЕстьТаблицаПоВзаиморасчетам = НЕ (СтрокиТаблицыПоВзаиморасчетам = Неопределено);
						Если ЕстьТаблицаПоВзаиморасчетам Тогда
							ТаблицаПоВзаиморасчетам = ПустаяТаблицаПоВзаиморасчетам.Скопировать();
							Для каждого СтрокаДвижения Из СтрокиТаблицыПоВзаиморасчетам.Строки Цикл
								НоваяСтрока = ТаблицаПоВзаиморасчетам.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
							КонецЦикла;
							СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
						КонецЕсли;
					КонецЕсли;
					ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Хозрасчетный,истина);
					Если Сч = 0 Или (Сч = 1 И ОчищатьПроводки[СтруктураПараметров.Регистратор] = Истина) Тогда  //***** Очищаем проводки. Только при первом обходе.
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиБУ,УдаляемыеВидыРегОпераций);
					КонецЕсли;
					БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметров,ПроводкиБУ,мВалютаРегламентированногоУчета);
					СформированныеДвижения.Вставить("ПроводкиБУ",ПроводкиБУ);
					СформированныеДвижения.Вставить("Хозрасчетный",ПроводкиБУ);
					
					Если СтруктураПараметров.ОтражатьВНалоговомУчете ИЛИ СтруктураПараметров.Дата >= '20070101' Тогда
						ПроводкиНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Налоговый,истина);
						Если Сч = 0 Или (Сч = 1 И ОчищатьПроводки[СтруктураПараметров.Регистратор] = Истина) Тогда  //***** Очищаем проводки. Только при первом обходе.
							БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиНУ,УдаляемыеВидыРегОпераций);
						КонецЕсли;
						СформированныеДвижения.Вставить("ПроводкиНУ",ПроводкиНУ);
						СтруктураПараметров.Вставить("ПроводкиНУ",ПроводкиНУ);
						СтруктураПараметров.Вставить("Налоговый",ПроводкиНУ);
					КонецЕсли;
					//АБС ВСТАВКА 02.10.2014 Навценя
					ТЗ_СуммовыеРазницы = Неопределено;
					//ДвиженияСУчетомКорректировок = БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметров,мВалютаРегламентированногоУчета,,ПроводкиБУ,,,УдаляемыеВидыРегОпераций);
					ДвиженияСУчетомКорректировок = БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметров,мВалютаРегламентированногоУчета,,ПроводкиБУ,,,УдаляемыеВидыРегОпераций, ,ТЗ_СуммовыеРазницы);
					//АБС ВСТАВКА КОНЕЦ
					Если ДвиженияСУчетомКорректировок = Истина Тогда	
						//Нет корректировок
					ИначеЕсли ДвиженияСУчетомКорректировок = Ложь Тогда
						ЕстьОшибка = Истина;
						Если ДокументОшибки = Неопределено тогда
							ДокументОшибки = Документ.Регистратор;
						КонецЕсли;
						Граница = МиН(СтруктураПараметров.Период,Граница);
						Продолжить;
					Иначе
						Для каждого Движение из ДвиженияСУчетомКорректировок Цикл
							СформированныеДвижения.Вставить(Движение.Ключ,Движение.Значение);
						КонецЦикла;
					КонецЕсли;
					//АБС ВСТАВКА Разнесение платежей  20.03.2014 12:49:41  Гетц
					Если Сч = 0 Тогда
						ОбработатьТаблицуДокументовПослеОбходаПервогоПорядка(ТаблицаДокументов, Документ.Строки, ДвиженияСУчетомКорректировок.ДвиженияПоРегиструУЕ.Выгрузить(), ТЗ_СуммовыеРазницы);
					КонецЕсли;
					//АБС ВСТАВКА Разнесение платежей КОНЕЦ
				Иначе
					ЕстьОшибка = Истина;
					Если ДокументОшибки = Неопределено тогда
						ДокументОшибки = Документ.Регистратор;
					КонецЕслИ;
					Граница = МиН(Документ.Строки[0].Период,Граница);
					Продолжить;
				КонецЕсли;  //Если не (ВидДокумента = "ВозвратТоваровПоставщику" или ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ")
				
				Для каждого Движение из СформированныеДвижения Цикл
					Если Движение.Значение = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если Движение.Значение.Модифицированность() Тогда
						Движение.Значение.Записать();
					КонецЕсли; 
				КонецЦикла;
				//***** В случае, если реализация на отрицательную сумму, проводим отдельной процедурой (дополнительно)
				ДвиженияПоРасчетыУЕ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Ссылка, РегистрыНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации);
				ДвижениеПоВзиморсчетам = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Ссылка, РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов);
				РеализацияСМинусом = БухгалтерскийУчетРасчетовСКонтрагентами.ВыполнитьСторноДвиженияПоРасчетамПоРеализации(СтруктураПараметров.Ссылка, ДвиженияПоРасчетыУЕ, ДвижениеПоВзиморсчетам);
				Если РеализацияСМинусом Тогда 
					ДвиженияПоРасчетыУЕ.Записать();
				КонецЕсли;
				//****
			Исключение				
				Если ДокументОшибки = Неопределено тогда
					ДокументОшибки = Документ.Регистратор;
				КонецЕслИ;
				Если Не ТипЗнч(ДокументОшибки) = Тип("ДокументСсылка.КорректировкаДолга") Тогда 
					ЕстьОшибка = Истина;
					ЗаписьЖурналаРегистрации("Восстановление состояния расчетов", УровеньЖурналаРегистрации.Ошибка, , ,ОписаниеОшибки());
					Если Не ТаблицаДокументов = Неопределено Тогда 
						Граница = МиН(?(ТаблицаДокументов.Количество() = 0, Граница, ТаблицаДокументов[0].Период),Граница);
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецПопытки; 
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый структура ("Ошибка,Документ,Граница",ЕстьОшибка,ДокументОшибки,Граница);
	
КонецФункции // 

//АБС ВСТАВКА Разнесение платежей 000025579  18.03.2014 15:33:10  Гетц
Функция ПолучитьИнформациюПоБудущимПокрытиям(ДокументРасчетов, ДатаАктуализации)
	Запрос = Новый Запрос;
	Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Или ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыРасчетов.ДокументРасчетов,
		|	СУММА(ДокументыРасчетов.СуммаВал) КАК СуммаВал,
		|	СУММА(ДокументыРасчетов.СуммаРег) КАК СуммаРег
		|ИЗ
		|	РегистрСведений.РасчетыПоРеализацииОрганизации КАК РасчетыПоРеализацииОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РеализацияТоваровУслугДокументыРасчетовСКонтрагентом.ДокументРасчетовСКонтрагентом КАК ДокументРасчетов,
		|			СУММА(РеализацияТоваровУслугДокументыРасчетовСКонтрагентом.СуммаВзаиморасчетов) КАК СуммаВал,
		|			СУММА(РеализацияТоваровУслугДокументыРасчетовСКонтрагентом.СуммаРегл) КАК СуммаРег,
		|			РеализацияТоваровУслугДокументыРасчетовСКонтрагентом.Ссылка КАК Регистратор
		|		ИЗ
		|			Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК РеализацияТоваровУслугДокументыРасчетовСКонтрагентом
		|		ГДЕ
		|			РеализацияТоваровУслугДокументыРасчетовСКонтрагентом.ДокументРасчетовСКонтрагентом = &ДокументРасчетов
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РеализацияТоваровУслугДокументыРасчетовСКонтрагентом.ДокументРасчетовСКонтрагентом,
		|			РеализацияТоваровУслугДокументыРасчетовСКонтрагентом.Ссылка
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			АктОбОказанииПроизводственныхУслугДокументыРасчетовСКонтрагентом.ДокументРасчетовСКонтрагентом,
		|			СУММА(АктОбОказанииПроизводственныхУслугДокументыРасчетовСКонтрагентом.СуммаВзаиморасчетов),
		|			СУММА(АктОбОказанииПроизводственныхУслугДокументыРасчетовСКонтрагентом.СуммаРегл),
		|			АктОбОказанииПроизводственныхУслугДокументыРасчетовСКонтрагентом.Ссылка
		|		ИЗ
		|			Документ.АктОбОказанииПроизводственныхУслуг.ДокументыРасчетовСКонтрагентом КАК АктОбОказанииПроизводственныхУслугДокументыРасчетовСКонтрагентом
		|		ГДЕ
		|			АктОбОказанииПроизводственныхУслугДокументыРасчетовСКонтрагентом.ДокументРасчетовСКонтрагентом = &ДокументРасчетов
		|		
		|		СГРУППИРОВАТЬ ПО
		|			АктОбОказанииПроизводственныхУслугДокументыРасчетовСКонтрагентом.ДокументРасчетовСКонтрагентом,
		|			АктОбОказанииПроизводственныхУслугДокументыРасчетовСКонтрагентом.Ссылка) КАК ДокументыРасчетов
		|		ПО РасчетыПоРеализацииОрганизации.Регистратор = ДокументыРасчетов.Регистратор
		|ГДЕ
		|	РасчетыПоРеализацииОрганизации.Период > &Дата
		|	И РасчетыПоРеализацииОрганизации.Период <= &ДатаАктуализации
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыРасчетов.ДокументРасчетов";
	Иначе 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоРеализацииОрганизации.ДокументРасчетов КАК ДокументРасчетов,
		|	СУММА(ЕСТЬNULL(РасчетыПоРеализацииОрганизации.СуммаВзаиморасчетов, 0)) КАК СуммаВал,
		|	СУММА(ЕСТЬNULL(РасчетыПоРеализацииОрганизации.СуммаСНДС, 0)) КАК СуммаРег
		|ИЗ
		|	РегистрСведений.РасчетыПоРеализацииОрганизации КАК РасчетыПоРеализацииОрганизации
		|ГДЕ
		|	РасчетыПоРеализацииОрганизации.Регистратор <> РасчетыПоРеализацииОрганизации.ДокументРасчетов
		|	И РасчетыПоРеализацииОрганизации.ДокументРасчетов = &ДокументРасчетов
		|	И РасчетыПоРеализацииОрганизации.Период > &Дата
		|	И РасчетыПоРеализацииОрганизации.Период <= &ДатаАктуализации
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоРеализацииОрганизации.ДокументРасчетов";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументРасчетов", ДокументРасчетов);
	Запрос.УстановитьПараметр("Дата", ДокументРасчетов.Дата);
	Запрос.УстановитьПараметр("ДатаАктуализации", ?(ЗначениеЗаполнено(ДатаАктуализации),КонецДня(ДатаАктуализации), ТекущаяДата()));//***** 16.04.2014 - добавлено ограничение по дате актуализации
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура ОбработатьТаблицуДокументовПослеОбходаПервогоПорядка(ТаблицаПройденных, СтрокиДокумента, СформированныеДвижения, ТЗ_СуммовыеРазницы = Неопределено)
	
	//АБС ВСТАВКА 02.10.2014 Навценя
	
	СформированныеДвижения.Свернуть("Активность, ВидДвижения,ДатаОплаты, ДоговорКонтрагента, Документ, Контрагент, МоментВремени,
									|Организация, Период, Регистратор, Сделка, СчетОплаты", "СуммаВзаиморасчетов, СуммаРег");
									
	
	//выделяем суммы, которые нужно перенести на второй проход
	ДельтаРег = ТаблицаПройденных.Итог("РублеваяСумма") - СформированныеДвижения.Итог("СуммаРег") 
				- ?(ТЗ_СуммовыеРазницы = Неопределено, 0, ТЗ_СуммовыеРазницы.Итог("СуммоваяРазница"));
	ДельтаВал = ТаблицаПройденных.Итог("ВалютнаяСумма") - СформированныеДвижения.Итог("СуммаВзаиморасчетов");
	
	ДельтаРег = Макс(0, ДельтаРег);
	ДельтаВал = Макс(0, ДельтаВал);	
	
	//АБС ВСТАВКА КОНЕЦ

	Для Каждого СтрокаТЗ Из ТаблицаПройденных Цикл 
		//АБС ИЗМЕНЕНИ 02.10.2014 Навценя
		////АБС ВСТАВКА №43282 НАЧАЛО «26 мая 2014 г.», Пополитов
		//Если Не ЗначениеЗаполнено(СтрокаТЗ.ДокументРасчетов) Тогда 
		////Если Не ЗначениеЗаполнено(СтрокаТЗ.ДокументРасчетов) или СтрокаТЗ.ВестиПоДокументамРасчетовСКонтрагентом Тогда 
  		////\\АБС ВСТАВКА №43282 КОНЕЦ
		//	Продолжить;
		//КонецЕсли;
		//АБС ИЗМЕНЕНИ КОНЕЦ
		СуммаПеренестиРег = 0;
		СуммаПеренестиВал = 0;
		//АБС ВСТАВКА Навценя 21.08.2014
		СуммаПереоценки = 0;
		
		Если ТЗ_СуммовыеРазницы <> Неопределено Тогда
			стркоаПереоценки = ТЗ_СуммовыеРазницы.Найти(СтрокаТЗ.ДокументРасчетов, "Документ");
			Если стркоаПереоценки <> Неопределено Тогда 
				СуммаПереоценки = стркоаПереоценки.СуммоваяРазница;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаФакт = СформированныеДвижения.Найти(СтрокаТЗ.ДокументРасчетов, "Документ");
		Если СтрокаФакт = Неопределено Тогда 
			СуммаПеренестиРег = СтрокаТЗ.СуммаСНДС;
			СуммаПеренестиВал = СтрокаТЗ.СуммаВзаиморасчетов;
		Иначе 
			СуммаПеренестиРег = Макс(0, СтрокаТЗ.РублеваяСумма - СтрокаФакт.СуммаРег - СуммаПереоценки);
			СуммаПеренестиВал = Макс(0, СтрокаТЗ.СуммаВзаиморасчетов - СтрокаФакт.СуммаВзаиморасчетов);	
		КонецЕсли;
		
		СуммаПеренестиРег = Мин(СуммаПеренестиРег, ДельтаРег);
		СуммаПеренестиВал = Мин(СуммаПеренестиВал, ДельтаВал);
		
		//АБС ВСТАВКА КОНЕЦ
		Если Не СуммаПеренестиВал = 0 Или Не СуммаПеренестиРег = 0 Тогда
			
			ДельтаРег = ДельтаРег - СуммаПеренестиРег;
			ДельтаВал = ДельтаВал - СуммаПеренестиВал; 
			
			Если СтрокиДокумента.Количество() = 0 Тогда 
				НоваяСтрока = СтрокиДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ, , "ДокументРасчетов, Документ");
				НоваяСтрока.СуммаНДС = 0;
				НоваяСтрока.СуммаСНДС = 0;
				НоваяСтрока.ВалютнаяСумма = 0;
				НоваяСтрока.РублеваяСумма = 0;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			Иначе 
				НоваяСтрока = СтрокиДокумента[0];
			КонецЕсли;
			НоваяСтрока.РублеваяСумма = НоваяСтрока.РублеваяСумма + СуммаПеренестиРег;
			НоваяСтрока.ВалютнаяСумма = НоваяСтрока.ВалютнаяСумма + СуммаПеренестиВал;
			НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаВзаиморасчетов + СуммаПеренестиВал;
			// необходимо дораспределить НДС и прочее

			МассивРаспределения = Новый Массив;
			МассивРаспределения.Добавить(СуммаПеренестиРег);
			МассивРаспределения.Добавить(СтрокаТЗ.РублеваяСумма - СуммаПеренестиРег);
			
			
			МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЗ.СуммаНДС, МассивРаспределения);
			Если МассивСумм = Неопределено Тогда 
				НоваяСтрока.СуммаНДС = 0;
			Иначе 
				НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + МассивСумм[0];
			КонецЕсли;
			
			МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЗ.СуммаСНДС, МассивРаспределения);
			Если МассивСумм = Неопределено Тогда 
				НоваяСтрока.СуммаСНДС = 0;
			Иначе 
				НоваяСтрока.СуммаСНДС = НоваяСтрока.СуммаСНДС + МассивСумм[0];
			КонецЕсли;
	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
//АБС ВСТАВКА Разнесение платежей 000025579 КОНЕЦ
//***** Разнесение платежей \\


//АБС ВСТАВКА Навценя 25.08.2014

Функция КорректировкаРеализации_ИспользоватьВосстановлениеАванса(СтруктураПараметров) Экспорт
	
	Если НЕ ПараметрыСеанса.абс_НастройкиСистемы.Свойство("КорректировкаРеализации_ВосстановлениеАванса") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыСеанса.абс_НастройкиСистемы.КорректировкаРеализации_ВосстановлениеАванса = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыСеанса.абс_НастройкиСистемы.КорректировкаРеализации_ВосстановлениеАванса Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ВестиПоДокументамРасчетовСКонтрагентом") Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	//корректровка в сторону увеличения, если договор НЕ по документам расчетов - отрабатывает типовой алгорим
	Если (СтруктураПараметров.ТаблицаРегистрации.Итог("СуммаВзаиморасчетов") > 0)
		И (НЕ СтруктураПараметров.ВестиПоДокументамРасчетовСКонтрагентом) Тогда 
		Возврат Ложь;
	КонецЕсли;
				
	Возврат Истина;
	
КонецФункции

Функция КорректировкаРеализации_СформироватьДвижения(СтруктураПараметров, ВалютаРегламентированногоУчета, ПроводкиБУ, Объект = NULL) Экспорт
	
	//инициализация параметров
	Параметры = Новый Структура("Ссылка, ДатаДока, ДоговорКонтрагента, СчетОплаты, СчетАванса, Организация, ВестиПоДокументамРасчетовСКонтрагентом, 
								| Контрагент, ВалютаВзаиморасчетов, ВалютаДокумента, ИспользоватьОтборПоСделкам, ВалютаРегламентированногоУчета,
								| Сделка, ИспользоватьОтборПоДокументам, ДокументыРасчетов, СуммаВзаиморасчетов, ВедениеВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов");
															
	ЗаполнитьЗначенияСвойств(Параметры, СтруктураПараметров);
	
	Параметры.СчетОплаты				 		= СтруктураПараметров.СчетУчетаРасчетовСКонтрагентом;
	Параметры.СчетАванса			 			= СтруктураПараметров.СчетУчетаРасчетовПоАвансам;
	Параметры.Ссылка						 	= СтруктураПараметров.Регистратор;
	Параметры.ДатаДока			 				= СтруктураПараметров.Период;
	Параметры.ИспользоватьОтборПоСделкам  		= не СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	Параметры.ДокументыРасчетов 	 			= УчетНДС.ПолучитьИсправляемыйДокументРеализации(Параметры.Ссылка, Истина);	
	Параметры.ВалютаРегламентированногоУчета	= ВалютаРегламентированногоУчета;
	
	Если (НЕ ЗначениеЗаполнено(Параметры.СчетАванса)) ИЛИ (НЕ ЗначениеЗаполнено(Параметры.СчетОплаты)) Тогда 
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Параметры.Организация, Параметры.Контрагент, Параметры.ДоговорКонтрагента);
		Если НЕ ЗначениеЗаполнено(Параметры.СчетОплаты) Тогда 
			Параметры.СчетОплаты = СчетаУчета.СчетРасчетовПокупателя;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Параметры.СчетАванса) Тогда 
			Параметры.СчетАванса = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
	КонецЕсли;

	СуммаВзаиморасчетов							= СтруктураПараметров.ТаблицаРегистрации.Итог("СуммаВзаиморасчетов");
	ЭтоУменьшение 								= (СуммаВзаиморасчетов < 0);
	ВызванРегламентнойПроцедурой 				= (Объект = NULL);
	
	Если Параметры.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда 
		СуммаРег = СуммаВзаиморасчетов;
	Иначе
		СуммаРег = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов,
						Параметры.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
						СтруктураПараметров.КурсВзаиморасчетов, 1,
						СтруктураПараметров.КратностьВзаиморасчетов, 1);	
	КонецЕсли;

	Если ВызванРегламентнойПроцедурой Тогда 
		ДвиженияПоРегиструУЕ 	= ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Параметры.Ссылка, РегистрыНакопления["РасчетыПоРеализацииВУсловныхЕдиницахОрганизации"]);
	Иначе
		ДвиженияПоРегиструУЕ 	= ОбщегоНазначения.ПолучитьДвижение(Объект, РегистрыНакопления["РасчетыПоРеализацииВУсловныхЕдиницахОрганизации"]);
	КонецЕсли;
	ТаблицаДвиженийПоРегиструУЕ = ДвиженияПоРегиструУЕ.ВыгрузитьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", 							Параметры.СчетОплаты);
	Запрос.УстановитьПараметр("СчетАванса", 					Параметры.СчетАванса);
	Запрос.УстановитьПараметр("Организация", 					Параметры.Организация);
	Запрос.УстановитьПараметр("Договор", 						Параметры.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументыРасчетов",				Параметры.ДокументыРасчетов);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоСделкам",		Параметры.ИспользоватьОтборПоСделкам);
	Запрос.УстановитьПараметр("Сделка",							Параметры.Сделка);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",			Параметры.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("МоментВремени",					Новый МоментВремени(Параметры.ДатаДока, Параметры.Ссылка));
	Запрос.УстановитьПараметр("КонецПериода",					Новый Граница(Параметры.ДатаДока));
	
	//формирование движений
	Если ЭтоУменьшение Тогда 
		КорректировкаРеализации_СформироватьДвижения_Уменьшение(Запрос, ТаблицаДвиженийПоРегиструУЕ, ПроводкиБУ, Параметры, СуммаВзаиморасчетов, СуммаРег);	
	Иначе
		КорректировкаРеализации_СформироватьДвижения_Увеличение(Запрос, ТаблицаДвиженийПоРегиструУЕ, ПроводкиБУ, Параметры, СуммаВзаиморасчетов, СуммаРег);			
	КонецЕсли;
	
	//дозаполнение и возврат сформированных движений
	ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Параметры.ДоговорКонтрагента, 	"ДоговорКонтрагента");
	ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Параметры.Контрагент, 			"Контрагент");
	ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Параметры.Организация, 			"Организация");
	ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Параметры.Сделка, 				"Сделка");
	ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Параметры.ДатаДока, 				"Период");
	ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Истина, 							"Активность");
	
	Если Параметры.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Неопределено, 				"Сделка");
	ИначеЕсли Параметры.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Параметры.Сделка, 			"Сделка");
	КонецЕсли;
	
	ДвиженияПоРегиструУЕ.Загрузить(ТаблицаДвиженийПоРегиструУЕ);
	
	Если НЕ ВызванРегламентнойПроцедурой Тогда 
		Возврат Истина;
	Иначе
		Возврат Новый Структура("ДвиженияПоРегиструУЕ", ДвиженияПоРегиструУЕ);
	КонецЕсли;
	
КонецФункции

Процедура КорректировкаРеализации_СформироватьДвижения_Уменьшение(Запрос, ТаблицаДвиженийПоРегиструУЕ, ПроводкиБУ, Параметры, СуммаВзаиморасчетов, СуммаРег)
	
	СуммаВзаиморасчетов = СуммаВзаиморасчетов * (-1);
	СуммаРег			= СуммаРег * (-1);
	
	
	//////////////////////////////////////////////////////////////////////////////////////		
	//Движения по неоплаченной задолженности по документу
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоДокументам", 	Истина);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыВУЕ.Сделка КАК Сделка,
	|	РасчетыВУЕ.Документ КАК Документ,
	|	РасчетыВУЕ.ДатаОплаты КАК ДатаОплаты,
	|	-РасчетыВУЕ.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	|	-РасчетыВУЕ.СуммаРегОстаток КАК СуммаРегОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки(
	|			&МоментВремени,
	|			ДоговорКонтрагента = &Договор
	|				И СчетОплаты = &Счет
	|				И ВЫБОР
	|					КОГДА &ИспользоватьОтборПоСделкам
	|						ТОГДА Сделка = &Сделка
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ИспользоватьОтборПоДокументам
	|						ТОГДА Документ = &ДокументыРасчетов
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК РасчетыВУЕ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОплаты,
	|	РасчетыВУЕ.Документ.Дата,
	|	Документ";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		СтрокаДвижения = ТаблицаДвиженийПоРегиструУЕ.Добавить();
		//суммы движения
		СтрокаДвижения.СуммаВзаиморасчетов 	= Мин(Выборка.СуммаВзаиморасчетовОстаток, СуммаВзаиморасчетов); 
		СтрокаДвижения.СуммаРег            	= Мин(Выборка.СуммаРегОстаток, СуммаРег); 
		
		//уменьшаем суммы для дальнейшего распределения
		СуммаВзаиморасчетов		 			= СуммаВзаиморасчетов - СтрокаДвижения.СуммаВзаиморасчетов; 
		СуммаРег 							= СуммаРег - СтрокаДвижения.СуммаРег;
		
		//так как это сторно реализации - движения отрицательные
		СтрокаДвижения.СуммаВзаиморасчетов 	= -СтрокаДвижения.СуммаВзаиморасчетов; 
		СтрокаДвижения.СуммаРег            	= -СтрокаДвижения.СуммаРег; 
		СтрокаДвижения.ВидДвижения			= ВидДвиженияНакопления.Расход;
		СтрокаДвижения.СчетОплаты			= Параметры.СчетОплаты;
		СтрокаДвижения.Документ				= Параметры.ДокументыРасчетов;
		СтрокаДвижения.ДатаОплаты			= Выборка.ДатаОплаты;

	КонецЕсли;
	
	Если СуммаРег = 0 И СуммаВзаиморасчетов = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	
	//////////////////////////////////////////////////////////////////////////////////////	
	//Движения по задолженности по другим документам
	
	Если НЕ Параметры.ВестиПоДокументамРасчетовСКонтрагентом Тогда  
		Запрос.УстановитьПараметр("ИспользоватьОтборПоДокументам", 	Ложь);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() И ((СуммаРег <> 0) ИЛИ (СуммаВзаиморасчетов <> 0)) Цикл
			
			Если Выборка.Документ = Параметры.ДокументыРасчетов Тогда 
				Продолжить; 
			КонецЕсли;
			
			СтрокаДвижения = ТаблицаДвиженийПоРегиструУЕ.Добавить();
			//суммы движения
			СтрокаДвижения.СуммаВзаиморасчетов 	= Мин(Выборка.СуммаВзаиморасчетовОстаток, СуммаВзаиморасчетов); 
			СтрокаДвижения.СуммаРег            	= Мин(Выборка.СуммаРегОстаток, СуммаРег); 
			
			//уменьшаем суммы для дальнейшего распределения
			СуммаВзаиморасчетов		 			= СуммаВзаиморасчетов - СтрокаДвижения.СуммаВзаиморасчетов; 
			СуммаРег 							= СуммаРег - СтрокаДвижения.СуммаРег;
			
			//так как это сторно реализации - движения отрицательные
			СтрокаДвижения.СуммаВзаиморасчетов 	= -СтрокаДвижения.СуммаВзаиморасчетов; 
			СтрокаДвижения.СуммаРег            	= -СтрокаДвижения.СуммаРег; 
			СтрокаДвижения.ВидДвижения			= ВидДвиженияНакопления.Расход;
			СтрокаДвижения.СчетОплаты			= Параметры.СчетОплаты;
			СтрокаДвижения.Документ				= Выборка.Документ;
			СтрокаДвижения.ДатаОплаты			= Выборка.ДатаОплаты;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СуммаРег = 0 И СуммаВзаиморасчетов = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	
	//////////////////////////////////////////////////////////////////////////////////////	
	//Восстановление аванса
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоДокументам", 	Истина);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасчетыВУЕ.Регистратор КАК Платеж,
	               |	РасчетыВУЕ.Период,
	               |	РасчетыВУЕ.СуммаВзаиморасчетовОборот КАК СуммаВзаиморасчетовОборот,
	               |	РасчетыВУЕ.СуммаРегОборот КАК СуммаРегОборот
	               |ПОМЕСТИТЬ вт_платежи
	               |ИЗ
	               |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(
	               |			,
	               |			&КонецПериода,
	               |			Регистратор,
	               |			ДоговорКонтрагента = &Договор
	               |				И СчетОплаты = &Счет
	               |				И ВЫБОР
	               |					КОГДА &ИспользоватьОтборПоСделкам
	               |						ТОГДА Сделка = &Сделка
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &ИспользоватьОтборПоДокументам
	               |						ТОГДА Документ В (&ДокументыРасчетов)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК РасчетыВУЕ
	               |ГДЕ
	               |	(РасчетыВУЕ.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	               |			ИЛИ РасчетыВУЕ.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	               |			ИЛИ РасчетыВУЕ.Регистратор ССЫЛКА Документ.ПлатежныйОрдерПоступлениеДенежныхСредств
	               |			ИЛИ РасчетыВУЕ.Регистратор ССЫЛКА Документ.ПлатежноеТребованиеВыставленное)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыВУЕ.Документ,
	               |	РасчетыВУЕ.Период,
	               |	-РасчетыВУЕ.СуммаВзаиморасчетовОборот,
	               |	-РасчетыВУЕ.СуммаРегОборот
	               |ИЗ
	               |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(
	               |			,
	               |			&КонецПериода,
	               |			Регистратор,
	               |			ДоговорКонтрагента = &Договор
	               |				И СчетОплаты = &СчетАванса
	               |				И ВЫБОР
	               |					КОГДА &ИспользоватьОтборПоСделкам
	               |						ТОГДА Сделка = &Сделка
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И (Документ ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	               |					ИЛИ Документ ССЫЛКА Документ.ПриходныйКассовыйОрдер
	               |					ИЛИ Документ ССЫЛКА Документ.ПлатежныйОрдерПоступлениеДенежныхСредств
	               |					ИЛИ Документ ССЫЛКА Документ.ПлатежноеТребованиеВыставленное)) КАК РасчетыВУЕ
	               |ГДЕ
	               |	РасчетыВУЕ.Регистратор = &ДокументыРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	вт_платежи.Платеж,
	               |	вт_платежи.Период КАК Период,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА вт_платежи.Платеж ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	               |				ТОГДА ВЫРАЗИТЬ(вт_платежи.Платеж КАК Документ.ПлатежноеПоручениеВходящее).СуммаДокумента
	               |			КОГДА вт_платежи.Платеж ССЫЛКА Документ.ПриходныйКассовыйОрдер
	               |				ТОГДА ВЫРАЗИТЬ(вт_платежи.Платеж КАК Документ.ПриходныйКассовыйОрдер).СуммаДокумента
	               |			КОГДА вт_платежи.Платеж ССЫЛКА Документ.ПлатежныйОрдерПоступлениеДенежныхСредств
	               |				ТОГДА ВЫРАЗИТЬ(вт_платежи.Платеж КАК Документ.ПлатежныйОрдерПоступлениеДенежныхСредств).СуммаДокумента
	               |			КОГДА вт_платежи.Платеж ССЫЛКА Документ.ПлатежноеТребованиеВыставленное
	               |				ТОГДА ВЫРАЗИТЬ(вт_платежи.Платеж КАК Документ.ПлатежноеТребованиеВыставленное).СуммаДокумента
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаДокумента,
	               |	ВЫБОР
	               |		КОГДА вт_платежи.Платеж ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	               |			ТОГДА ВЫРАЗИТЬ(вт_платежи.Платеж КАК Документ.ПлатежноеПоручениеВходящее).ВалютаДокумента
	               |		КОГДА вт_платежи.Платеж ССЫЛКА Документ.ПриходныйКассовыйОрдер
	               |			ТОГДА ВЫРАЗИТЬ(вт_платежи.Платеж КАК Документ.ПриходныйКассовыйОрдер).ВалютаДокумента
	               |		КОГДА вт_платежи.Платеж ССЫЛКА Документ.ПлатежныйОрдерПоступлениеДенежныхСредств
	               |			ТОГДА ВЫРАЗИТЬ(вт_платежи.Платеж КАК Документ.ПлатежныйОрдерПоступлениеДенежныхСредств).ВалютаДокумента
	               |		КОГДА вт_платежи.Платеж ССЫЛКА Документ.ПлатежноеТребованиеВыставленное
	               |			ТОГДА ВЫРАЗИТЬ(вт_платежи.Платеж КАК Документ.ПлатежноеТребованиеВыставленное).ВалютаДокумента
	               |		ИНАЧЕ &ВалютаВзаиморасчетов
	               |	КОНЕЦ КАК ВалютаДокумента,
	               |	СУММА(вт_платежи.СуммаВзаиморасчетовОборот) КАК СуммаВзаиморасчетовОборот,
	               |	СУММА(вт_платежи.СуммаРегОборот) КАК СуммаРегОборот
	               |ИЗ
	               |	вт_платежи КАК вт_платежи
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вт_платежи.Платеж,
	               |	вт_платежи.Период,
	               |	ВЫБОР
	               |		КОГДА вт_платежи.Платеж ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	               |			ТОГДА ВЫРАЗИТЬ(вт_платежи.Платеж КАК Документ.ПлатежноеПоручениеВходящее).ВалютаДокумента
	               |		КОГДА вт_платежи.Платеж ССЫЛКА Документ.ПриходныйКассовыйОрдер
	               |			ТОГДА ВЫРАЗИТЬ(вт_платежи.Платеж КАК Документ.ПриходныйКассовыйОрдер).ВалютаДокумента
	               |		КОГДА вт_платежи.Платеж ССЫЛКА Документ.ПлатежныйОрдерПоступлениеДенежныхСредств
	               |			ТОГДА ВЫРАЗИТЬ(вт_платежи.Платеж КАК Документ.ПлатежныйОрдерПоступлениеДенежныхСредств).ВалютаДокумента
	               |		КОГДА вт_платежи.Платеж ССЫЛКА Документ.ПлатежноеТребованиеВыставленное
	               |			ТОГДА ВЫРАЗИТЬ(вт_платежи.Платеж КАК Документ.ПлатежноеТребованиеВыставленное).ВалютаДокумента
	               |		ИНАЧЕ &ВалютаВзаиморасчетов
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() И (СуммаВзаиморасчетов <> 0 ИЛИ СуммаРег <> 0) Цикл  

		//Пересчитаем сумму документа в сумму взаиморасчетов
		Если Выборка.ВалютаДокумента = Параметры.ВалютаВзаиморасчетов Тогда 
			СуммаВзаиморасчетовОборот = Выборка.СуммаВзаиморасчетовОборот;
		Иначе
			СуммаВзаиморасчетовОборот = МодульВалютногоУчета.ПересчитатьВСуммуРегл(Выборка.СуммаВзаиморасчетовОборот, 
																Параметры.ВалютаВзаиморасчетов,
																Выборка.ВалютаДокумента, 
																Выборка.Период);	
		КонецЕсли;
		
		//суммы движения
		СтрокаДвижения = ТаблицаДвиженийПоРегиструУЕ.Добавить();
		СтрокаДвижения.СуммаВзаиморасчетов 	= Макс(0, Мин(СуммаВзаиморасчетовОборот, СуммаВзаиморасчетов)); 
		СтрокаДвижения.СуммаРег            	= Макс(0, Мин(Выборка.СуммаРегОборот, СуммаРег));
		СтрокаДвижения.ВидДвижения			= ВидДвиженияНакопления.Приход;
		СтрокаДвижения.СчетОплаты			= Параметры.СчетАванса;
		СтрокаДвижения.Документ				= Выборка.Платеж;
		СтрокаДвижения.ДатаОплаты			= Параметры.ДатаДока;
		
		//уменьшаем суммы для дальнейшего распределения
		СуммаВзаиморасчетов		 			= СуммаВзаиморасчетов - СтрокаДвижения.СуммаВзаиморасчетов; 
		СуммаРег 							= СуммаРег - СтрокаДвижения.СуммаРег;
				
		//БУ
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период                  	= Параметры.ДатаДока;
		Проводка.Организация             	= Параметры.Организация;
		Проводка.Содержание              	= "Восстановление аванса";
		Проводка.ВидРегламентнойОперации 	= Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация;
		Проводка.СчетДт 					= Параметры.СчетОплаты;
		Проводка.СчетКт 					= Параметры.СчетАванса;
		Проводка.Сумма  					= СтрокаДвижения.СуммаРег;
		
		Если Параметры.ВалютаВзаиморасчетов <> Параметры.ВалютаРегламентированногоУчета Тогда
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = Параметры.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаДвижения.СуммаВзаиморасчетов;
			КонецЕсли; 
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = Параметры.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаДвижения.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
				
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты"	,Параметры.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"		,Параметры.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты"	,Параметры.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"		,Параметры.ДоговорКонтрагента);	
	КонецЦикла;
	
	Если СуммаРег = 0 И СуммаВзаиморасчетов = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	
	//////////////////////////////////////////////////////////////////////////////////////	
	//если не удалось восстановить аванс на всю сумму по "реальным" платежам, кидаем аванс на сам документ корректриовка реализации
	
	//суммы движения
	СтрокаДвижения = ТаблицаДвиженийПоРегиструУЕ.Добавить();
	СтрокаДвижения.СуммаВзаиморасчетов 	= СуммаВзаиморасчетов; 
	СтрокаДвижения.СуммаРег            	= СуммаРег; 		
	СтрокаДвижения.ВидДвижения			= ВидДвиженияНакопления.Приход;
	СтрокаДвижения.СчетОплаты			= Параметры.СчетАванса;
	СтрокаДвижения.Документ				= Параметры.Ссылка;
	СтрокаДвижения.ДатаОплаты			= Параметры.ДатаДока;
	
	//БУ
	Проводка = ПроводкиБУ.Добавить();
	Проводка.Период                  	= Параметры.ДатаДока;
	Проводка.Организация             	= Параметры.Организация;
	Проводка.Содержание              	= "Восстановление аванса";
	Проводка.ВидРегламентнойОперации 	= Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация;
	Проводка.СчетДт 					= Параметры.СчетОплаты;
	Проводка.СчетКт 					= Параметры.СчетАванса;
	Проводка.Сумма  					= СтрокаДвижения.СуммаРег;
	
	Если Параметры.ВалютаВзаиморасчетов <> Параметры.ВалютаРегламентированногоУчета Тогда
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = Параметры.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаДвижения.СуммаВзаиморасчетов;
		КонецЕсли; 
		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = Параметры.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаДвижения.СуммаВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты"	,Параметры.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"		,Параметры.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты"	,Параметры.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"		,Параметры.ДоговорКонтрагента);		
	
КонецПроцедуры

Процедура КорректировкаРеализации_СформироватьДвижения_Увеличение(Запрос, ТаблицаДвиженийПоРегиструУЕ, ПроводкиБУ, Параметры, СуммаВзаиморасчетов, СуммаРег)
		
	СтрокаДвижения = ТаблицаДвиженийПоРегиструУЕ.Добавить();
	СтрокаДвижения.СуммаВзаиморасчетов 	= СуммаВзаиморасчетов; 
	СтрокаДвижения.СуммаРег            	= СуммаРег; 
	СтрокаДвижения.ВидДвижения			= ВидДвиженияНакопления.Расход;
	СтрокаДвижения.СчетОплаты			= Параметры.СчетОплаты;
	СтрокаДвижения.Документ				= Параметры.ДокументыРасчетов;
	
	СуммаВзаиморасчетов		 			= СуммаВзаиморасчетов - СтрокаДвижения.СуммаВзаиморасчетов; 
	СуммаРег 							= СуммаРег - СтрокаДвижения.СуммаРег;
			
КонецПроцедуры

Процедура ЗаполнитьКурсыВалютПоДокументу(СтруктураПараметров, мВалютаРегламентированногоУчета)
	
	Если СтруктураПараметров.Свойство("КурсДокумента") И СтруктураПараметров.Свойство("Ссылка") Тогда 
		КурсДокумента = ЗаполнениеДокументов.КурсДокумента(СтруктураПараметров.Ссылка,мВалютаРегламентированногоУчета);
		Если ЗначениеЗаполнено(КурсДокумента) И КурсДокумента <> 1 Тогда 
			СтруктураПараметров.КурсДокумента = КурсДокумента;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("КратностьДокумента") И СтруктураПараметров.Свойство("Ссылка") Тогда 
		КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(СтруктураПараметров.Ссылка,мВалютаРегламентированногоУчета);
		Если ЗначениеЗаполнено(КратностьДокумента) И КратностьДокумента <> 1 Тогда 
			СтруктураПараметров.КратностьДокумента = КратностьДокумента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//АБС ВСТАВКА КОНЕЦ
