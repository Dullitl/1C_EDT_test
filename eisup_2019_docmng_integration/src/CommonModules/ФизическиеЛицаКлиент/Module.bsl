////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции для работы формы элемента
	
// Процедура устанавливает в поле картинки основное изображение
//
Процедура ПоказатьОсновноеИзображение(ЭтаФорма)

	мТекущееОсновноеИзображение = ЭтаФорма.мТекущееОсновноеИзображение;
	
	Если мТекущееОсновноеИзображение = Неопределено Тогда
		ЭтаФорма.ЭлементыФормы.ОсновноеИзображение.Картинка = ЭтаФорма.мПустаяКартинка;
	Иначе
		// АБС ВСТАВКА
		Если ТипЗнч(мТекущееОсновноеИзображение) = Тип("ДвоичныеДанные") Тогда
			ЭтаФорма.ЭлементыФормы.ОсновноеИзображение.Картинка = Новый Картинка(мТекущееОсновноеИзображение);
		Иначе
		// АБС ВСТАВКА КОНЕЦ
			ЭтаФорма.ЭлементыФормы.ОсновноеИзображение.Картинка = мТекущееОсновноеИзображение;
	    КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьОсновноеИзображение()

// Процедура считывает место рождения физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьМестоРождения(ЭтаФорма)
	
	ЭтаФорма.МестоРожденияФизЛица = РегламентированнаяОтчетность.ПредставлениеМестаРождения(ЭтаФорма.МестоРождения);
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.МестоРожденияФизЛица) тогда
		ЭтаФорма.МестоРожденияФизЛица = "Ввести место рождения";
	КонецЕсли;

КонецПроцедуры // ПрочитатьМестоРождения

// Процедура считывает заметки физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьЗаметки(ЭтаФорма)
	
	ОтборОбъект	= ЭтаФорма.Заметки.Отбор.Объект;
	
	ОтборОбъект.Значение = ЭтаФорма.Ссылка;
	ОтборОбъект.Использование = Истина;
	
КонецПроцедуры

Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента, ЭтаФорма, Параметр = Неопределено)
	
	Если ИмяОбновляемогоЭлемента = "Гражданство" Тогда
		
		мНаборЗаписейГражданство	= ЭтаФорма.мНаборЗаписейГражданство;
		
		Если мНаборЗаписейГражданство.Количество() > 0 Тогда
			ЭтаФорма.Гражданство = "" + мНаборЗаписейГражданство[0].Страна + ?(мНаборЗаписейГражданство[0].НеИмеетПравоНаПенсию,", не ",", " ) + "имеет право на пенсию, медицинское и социальное страхование"+  ?(мНаборЗаписейГражданство[0].НеЯвляетсяНалоговымРезидентомРФ,", не ",", " ) + "является налоговым резидентом РФ";
			
			ЭтаФорма.Модифицированность = Истина;
			
		Иначе
			ЭтаФорма.Гражданство = "Ввести данные о гражданстве";
			
		КонецЕсли;

	ИначеЕсли ИмяОбновляемогоЭлемента = "СемейноеПоложение" Тогда
		
		мНаборЗаписейСемейноеПоложение 	= ЭтаФорма.мНаборЗаписейСемейноеПоложение;
		
		Если мНаборЗаписейСемейноеПоложение.Количество() > 0 Тогда
			ЭтаФорма.СемейноеПоложение = мНаборЗаписейСемейноеПоложение[0].СемейноеПоложение;
			
			ЭтаФорма.Модифицированность = Истина;
			
		Иначе
			ЭтаФорма.СемейноеПоложение = "Ввести данные о семейном положении";
			
		КонецЕсли;

	ИначеЕсли ИмяОбновляемогоЭлемента = "УдостоверениеЛичности" Тогда
		
		мНаборЗаписейДокументаУдостоверяющегоЛичность = ЭтаФорма.мНаборЗаписейДокументаУдостоверяющегоЛичность;
		
		Если мНаборЗаписейДокументаУдостоверяющегоЛичность.Количество() > 0 Тогда
			Паспорт = мНаборЗаписейДокументаУдостоверяющегоЛичность[0];
			УдостоверениеЛичности = "" + Паспорт.ДокументВид + ", серия: " + Паспорт.ДокументСерия + ", № " + Паспорт.ДокументНомер 
									+ ", выдан: " + Формат(Паспорт.ДокументДатаВыдачи,"ДФ='дд ММММ гггг'; ДП='Не указано'") + " года, " 
									+ Паспорт.ДокументКемВыдан + ", № подр. " + Паспорт.ДокументКодПодразделения 
									+ Символы.Таб + "Дата регистрации по месту жительства: " + Формат(Паспорт.ДатаРегистрацииПоМестуЖительства,"ДФ='дд ММММ гггг'; ДП='Не указано'");
			
			ЭтаФорма.УдостоверениеЛичности = СтрЗаменить(УдостоверениеЛичности,"Не указано","...");
			
			ЭтаФорма.Модифицированность = Истина;
			
		Иначе
			ЭтаФорма.УдостоверениеЛичности = "Ввести данные об удостоверении личности";
			
		КонецЕсли;
			
	ИначеЕсли ИмяОбновляемогоЭлемента = "ФИО" Тогда
		
		мНаборЗаписейФИО = ЭтаФорма.мНаборЗаписейФИО;

		Если мНаборЗаписейФИО.Количество() > 0 Тогда
			ФИОСрез = мНаборЗаписейФИО[0];
			
			ЭтаФорма.Фамилия  = ФИОСрез.Фамилия;
			ЭтаФорма.Имя      = ФИОСрез.Имя;
			ЭтаФорма.Отчество = ФИОСрез.Отчество;
			
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметр) И Параметр.Свойство("ПолучательОповещения") И Параметр.ПолучательОповещения = ЭтаФорма Тогда
			
			ПредлагаемНаименование = СокрЛП(ЭтаФорма.Фамилия) + " " + СокрЛП(ЭтаФорма.Имя) + " " + СокрЛП(ЭтаФорма.Отчество);
			Если ЭтаФорма.Наименование <> ПредлагаемНаименование Тогда
				ТекстВопроса = "Вы сменили ФИО физического лица. Изменить наименование на " + ПредлагаемНаименование + "?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
				ЭтаФорма.Наименование = ПредлагаемНаименование;
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ИмяОбновляемогоЭлемента = "ВоинскийУчет" Тогда
		
		мНаборЗаписейВоинскийУчет = ЭтаФорма.мНаборЗаписейВоинскийУчет;
		
		Если мНаборЗаписейВоинскийУчет.Количество() > 0 Тогда
			СтруктураВоинскийУчет = мНаборЗаписейВоинскийУчет[0];
			
			Если СтруктураВоинскийУчет.ОтношениеКВоинскойОбязанности = Перечисления.ОтношениеКВоинскойОбязанности.НеВоеннообязанный Тогда
				ЭтаФорма.ВоинскийУчет 	= СтруктураВоинскийУчет.ОтношениеКВоинскойОбязанности;
				
			Иначе
				ЭтаФорма.ВоинскийУчет 	= "" + СтруктураВоинскийУчет.ОтношениеКВоинскойОбязанности
										+ ", Категория: "+ СтруктураВоинскийУчет.КатегорияЗапаса
										+", Звание: " + СтруктураВоинскийУчет.Звание 
										+", Состав: " + СтруктураВоинскийУчет.Состав
										+ ", ВУС: "+ СтруктураВоинскийУчет.ВУС + ", Годность: " 
										+ СтруктураВоинскийУчет.Годность + ", Военкомат: " 
										+ СтруктураВоинскийУчет.Военкомат 
										+ ", " + СтруктураВоинскийУчет.ОтношениеКВоинскомуУчету 
										+ ?(ЗначениеЗаполнено(СтруктураВоинскийУчет.ЗабронированОрганизацией),", " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Забронирован за организацией") + " " + Строка(СтруктураВоинскийУчет.ЗабронированОрганизацией),"")
										+ ?(СтруктураВоинскийУчет.НаличиеМобпредписания,", имеет мобпредписание","")
										+", № команды: " + СтруктураВоинскийУчет.НомерКомандыПартии;
	
			КонецЕсли;
			
			ЭтаФорма.Модифицированность = Истина;

		Иначе
			ЭтаФорма.ВоинскийУчет = "Ввести данные о воинском учете";
	
		КонецЕсли;

	ИначеЕсли ИмяОбновляемогоЭлемента = "Инвалидность" Тогда
		
		мНаборЗаписейИнвалидность = ЭтаФорма.мНаборЗаписейИнвалидность;
		
		Если мНаборЗаписейИнвалидность.Количество() > 0 Тогда
			ЗаписьИзНабора = мНаборЗаписейИнвалидность[0];
			
			Если ЗаписьИзНабора.Инвалидность Тогда
				ЭтаФорма.Инвалидность 	= 	"инвалид: " + ЗаписьИзНабора.ГруппаИнвалидности + " группы" 
										+ ", справка серия: " + ЗаписьИзНабора.СерияСправки + ", номер: " + ЗаписьИзНабора.НомерСправки 
										+ ", выдана: "  + Формат(ЗаписьИзНабора.ДатаВыдачи,"ДФ='дд ММММ гггг';ДП='...'") + " года "
										+ ", срок действия: " + Формат(ЗаписьИзНабора.СрокДействияСправки,"ДФ='дд ММММ гггг';ДП='...'") + " года ";
								
			Иначе
				ЭтаФорма.Инвалидность 	= "Не является инвалидом";
				
			КонецЕсли;
			
			ЭтаФорма.Модифицированность = Истина;
			
		Иначе
			ЭтаФорма.Инвалидность 		= "Ввести данные об инвалидности";
			
		КонецЕсли;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "ОсновноеИзображение" Тогда
		ОсновноеИзображение = ЭтаФорма.ОсновноеИзображение;
		// обновляем картинку на первой странице
		
		// АБС ИЗМЕНЕНИЕ
		ТекКартинка = ОсновноеИзображение.Хранилище.Получить();
		Если ТипЗнч(ТекКартинка) = Тип("Строка") Тогда
			
			НоваяКартинка = абс_РаботаСФайлами.ПолучитьФайлИзВнешнегоХранилища(ОсновноеИзображение);		
		
			Если ЭтаФорма.мТекущееОсновноеИзображение <> НоваяКартинка Тогда
				ЭтаФорма.мТекущееОсновноеИзображение = НоваяКартинка;
				ПоказатьОсновноеИзображение(ЭтаФорма);
			КонецЕсли;
		Иначе
			
			Если ЭтаФорма.мТекущееОсновноеИзображение <> ОсновноеИзображение.Хранилище.Получить() Тогда
				ЭтаФорма.мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();
				ПоказатьОсновноеИзображение(ЭтаФорма);
			КонецЕсли;

		КонецЕсли;

		//Если ЭтаФорма.мТекущееОсновноеИзображение <> ОсновноеИзображение.Хранилище.Получить() Тогда
		//	ЭтаФорма.мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();
		//	ПоказатьОсновноеИзображение(ЭтаФорма);
		//КонецЕсли;
		
		// АБС ИЗМЕНЕНИЕ КОНЕЦ

		
	ИначеЕсли ИмяОбновляемогоЭлемента = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
		
		ДействияФормыКнопки = ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки;
		
		СписокКнопокФайлов = Новый СписокЗначений;
		СписокКнопокФайлов.Добавить(ДействияФормыКнопки.Файлы);
		СписокКнопокФайлов.Добавить(ДействияФормыКнопки.Подменю.Кнопки.Файлы);
		ttk_РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(ЭтаФорма.Ссылка, СписокКнопокФайлов);
		
	Иначе
		
		ФизическиеЛицаПереопределяемый.ПроверитьДополнительныеУсловия(ИмяОбновляемогоЭлемента, ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "", ЭтаФорма)
	
	ОбработкаОбъектЗначенияСвойств = ЭтаФорма.ОбработкаОбъектЗначенияСвойств;
	Ссылка = ЭтаФорма.Ссылка;
	
	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура ФормаЭлементаСвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма) Экспорт

	Отказ = Истина;

	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура ФормаЭлементаСвойстваИЗначенияПередУдалением(Элемент, Отказ, ЭтаФорма) Экспорт

	Отказ = Истина;

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура ФормаЭлементаСвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока, ЭтаФорма) Экспорт

	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура ФормаЭлементаСвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма) Экспорт
	
	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура ФормаЭлементаСвойстваИЗначенияЗначениеПриИзменении(Элемент, ЭтаФорма) Экспорт

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура ФормаЭлементаСвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт

	СтандартнаяОбработка = Ложь;
    ТекущиеДанные = ЭтаФорма.ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные;
	ТекущиеДанные.Значение = Неопределено;

	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ТекущиеДанные, Элемент);

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "", ЭтаФорма)
	
	ОбработкаОбъектКатегорииОбъекта = ЭтаФорма.ОбработкаОбъектКатегорииОбъекта;
	
	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = ЭтаФорма.Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура ФормаЭлементаКатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма) Экспорт

	Отказ = Истина;

	ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура ФормаЭлементаКатегорииПередУдалением(Элемент, Отказ, ЭтаФорма) Экспорт

	Отказ = Истина;

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура ФормаЭлементаКатегорииПриИзмененииФлажка(Элемент, НоваяСтрока, ЭтаФорма) Экспорт

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура ФормаЭлементаКатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма) Экспорт

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура ФормаЭлементаКоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка, ЭтаФорма) Экспорт
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияРедактироватьВДиалоге(Кнопка);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура ФормаЭлементаКоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка, ЭтаФорма) Экспорт
	
	УправлениеКонтактнойИнформацией.УстановитьЗаписьОсновной(ЭтаФорма.НаборКонтактнойИнформации, ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры


// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура ФормаЭлементаКонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока, ЭтаФорма) Экспорт
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, ЭтаФорма.мПоследнееЗначениеЭлементаПодбораПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура ФормаЭлементаКонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура ФормаЭлементаКонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура ФормаЭлементаКонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(ЭтаФорма.Ссылка));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура ФормаЭлементаКонтактнаяИнформацияВидПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	ЭтаФорма.мПоследнееЗначениеЭлементаПодбораПоСтрокеВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура ФормаЭлементаКонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(ЭтаФорма.Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура ФормаЭлементаКонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(ЭтаФорма.Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), ЭтаФорма.мОбработкаПодбораПоСтрокеВидаКИ, ЭтаФорма.мТекстПодбораПоСтрокеВидаКИ, ЭтаФорма.мПоследнееЗначениеЭлементаПодбораПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура ФормаЭлементаКонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, ЭтаФорма) Экспорт
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, ЭтаФорма.мТекстПодбораПоСтрокеВидаКИ, ЭтаФорма.мОбработкаПодбораПоСтрокеВидаКИ);
	
	Если Не (НоваяСтрока и ОтменаРедактирования) и Не Отказ Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура ФормаЭлементаКонтактнаяИнформацияПредставлениеПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура ФормаЭлементаКонтактнаяИнформацияПриАктивизацииСтроки(Элемент, ЭтаФорма) Экспорт
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭтаФорма.ЭлементыФормы.КоманднаяПанельКонтактнойИнформации.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура ФормаЭлементаКонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма) Экспорт
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура ФормаЭлементаКонтактнаяИнформацияПередУдалением(Элемент, Отказ, ЭтаФорма) Экспорт

	УправлениеКонтактнойИнформацией.УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура ФормаЭлементаКонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма) Экспорт
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, ЭтаФорма.мКнопкаРедактироватьКИВДиалоге, ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация, ЭтаФорма.НаборКонтактнойИнформации, Ложь, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура ФормаЭлементаКонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ, ЭтаФорма) Экспорт
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, ЭтаФорма.мКнопкаРедактироватьКИВДиалоге, Ложь, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура ФормаЭлементаКонтактнаяИнформацияТипПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ФормаЭлементаПередОткрытием(Отказ, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
	ПрочитатьЗаполнитьСвойстваИЗначения(, ЭтаФорма);

	ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
	ПрочитатьЗаполнитьКатегории(, ЭтаФорма);
	
	ФИО = ЭтаФорма.Наименование;
	Если ЭтаФорма.ЭтоНовый() И ЗначениеЗаполнено(ФИО) и Не ЗначениеЗаполнено(ЭтаФорма.Фамилия) Тогда
		МассивФИО = ОбщегоНазначения.ПолучитьМассивФИО(ФИО);
		ЭтаФорма.Фамилия  = МассивФИО[0];
		ЭтаФорма.Имя      = МассивФИО[1];
		ЭтаФорма.Отчество = МассивФИО[2];
	КонецЕсли;
	
	ЭтаФорма.мЭтоНовый = ЭтаФорма.ЭтоНовый();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ФормаЭлементаПриОткрытии(ЭтаФорма) Экспорт
	
	ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;
	ЭтотОбъект 		= ЭтаФорма.ЭтотОбъект;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(ЭтаФорма.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);	
	
	ОбновитьПредставлениеЭлемента("Гражданство", ЭтаФорма);
	ОбновитьПредставлениеЭлемента("СемейноеПоложение", ЭтаФорма);
	ОбновитьПредставлениеЭлемента("УдостоверениеЛичности", ЭтаФорма);
	ОбновитьПредставлениеЭлемента("ФИО", ЭтаФорма);
	ОбновитьПредставлениеЭлемента("ВоинскийУчет", ЭтаФорма);
	ОбновитьПредставлениеЭлемента("Инвалидность", ЭтаФорма);
	ОбновитьПредставлениеЭлемента("ОсновноеИзображение", ЭтаФорма);
	ОбновитьПредставлениеЭлемента("ИзмененСписокСправочникаХранилищеДопИнформации", ЭтаФорма);
	ОбновитьПредставлениеЭлемента(ФизическиеЛицаПереопределяемый.ИмяОбновляемогоЭлементаДополнительно(), ЭтаФорма);
	
	ЭтаФорма.Модифицированность = Ложь;
	
	ЭтаФорма.мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнойИнформации.Кнопки.РедактироватьВДиалоге;
	УправлениеКонтактнойИнформацией.ИнициализацияКнопкиРедактированиеКИВДиалоге(ЭтаФорма.мКнопкаРедактироватьКИВДиалоге);
	
	// Место рождения.
	ПрочитатьМестоРождения(ЭтаФорма);
    ЭтаФорма.ЕстьЛьготаПриНачисленииПособий = ЗначениеЗаполнено(ЭтотОбъект.ЛьготаПриНачисленииПособий);
	ЭлементыФормы.ЛьготаПриНачисленииПособий.ТолькоПросмотр = Не ЭтаФорма.ЕстьЛьготаПриНачисленииПособий;
	ЭлементыФормы.ЛьготаПриНачисленииПособий.АвтоВыборНезаполненного = ЭтаФорма.ЕстьЛьготаПриНачисленииПособий;
	ПрочитатьЗаметки(ЭтаФорма);
	
	ЭтаФорма.Заголовок = "Личные данные физического лица: " + ?(ЭтаФорма.ЭтоНовый(),"Новый",ЭтаФорма.Наименование);

	ЭлементыФормы.Образование.Колонки.Специальность.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КлассификаторСпециальностейПоОбразованию");
	
	// Выведем картинку на первой странице
	
	// АБС ИЗМЕНЕНИЕ
	//ЭтаФорма.мТекущееОсновноеИзображение = ЭтотОбъект.ОсновноеИзображение.Хранилище.Получить();
	ТекКартинка = ЭтотОбъект.ОсновноеИзображение.Хранилище.Получить();
	Если ТипЗнч(ТекКартинка) = Тип("Строка") Тогда
		
		НоваяКартинка = абс_РаботаСФайлами.ПолучитьФайлИзВнешнегоХранилища(ЭтотОбъект.ОсновноеИзображение);		
		ЭтаФорма.мТекущееОсновноеИзображение = НоваяКартинка;
		
	Иначе
		
		ЭтаФорма.мТекущееОсновноеИзображение = ЭтотОбъект.ОсновноеИзображение.Хранилище.Получить();

	КонецЕсли;
  
	// АБС ИЗМЕНЕНИЕ КОНЕЦ
	ПоказатьОсновноеИзображение(ЭтаФорма);
	
	РаботаСДиалогами.ПроверитьИННОформитьПолеВвода(ЭтотОбъект.ИНН, ЭлементыФормы.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо);
	РаботаСДиалогамиЗК.ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(ЭтотОбъект.СтраховойНомерПФР, ЭлементыФормы.СтраховойНомерПФР);
	
КонецПроцедуры	

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ФормаЭлементаПриЗакрытии(ЭтаФорма) Экспорт
	
	СохранитьЗначение("РедактироватьКИВДиалоге", ЭтаФорма.мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы
//
Процедура ФормаЭлементаОбработкаВыбора(РезультатВыбора, ИсточникВыбора, ЭтаФорма) Экспорт

	Если ИсточникВыбора = ЭтаФорма.мФормаВводаМестаРождения тогда
		
		ЭтаФорма.МестоРождения = РезультатВыбора;
		//Представление места рождения
		ЭтаФорма.МестоРожденияФизЛица = РегламентированнаяОтчетность.ПредставлениеМестаРождения(ЭтаФорма.МестоРождения);
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.МестоРожденияФизЛица) тогда
			ЭтаФорма.МестоРожденияФизЛица = "Ввести место рождения";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда
		
		ДействияФормыКнопки	= ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки;
		
		Если НЕ ЭтаФорма.ОсновноеИзображение = РезультатВыбора Тогда
			ЭтаФорма.ОсновноеИзображение = РезультатВыбора;
		КонецЕсли;
		
		// АБС ИЗМЕНЕНИЕ
		//ЭтаФорма.мТекущееОсновноеИзображение = ЭтаФорма.ОсновноеИзображение.Хранилище.Получить();
		ТекКартинка = ЭтаФорма.ОсновноеИзображение.Хранилище.Получить();
		Если ТипЗнч(ТекКартинка) = Тип("Строка") Тогда
			
			НоваяКартинка = абс_РаботаСФайлами.ПолучитьФайлИзВнешнегоХранилища(ЭтаФорма.ОсновноеИзображение);		
			ЭтаФорма.мТекущееОсновноеИзображение = НоваяКартинка;
			
		Иначе
			
			ЭтаФорма.мТекущееОсновноеИзображение = ЭтаФорма.ОсновноеИзображение.Хранилище.Получить();

		КонецЕсли;
	  
		// АБС ИЗМЕНЕНИЕ КОНЕЦ
        ПоказатьОсновноеИзображение(ЭтаФорма);
		
		СписокКнопокФайлов = Новый СписокЗначений;
		СписокКнопокФайлов.Добавить(ДействияФормыКнопки.Файлы);
		СписокКнопокФайлов.Добавить(ДействияФормыКнопки.Подменю.Кнопки.Файлы);
		ttk_РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(ЭтаФорма.Ссылка, СписокКнопокФайлов);
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаписиНовогоОбъекта" формы
//
Процедура ФормаЭлементаОбработкаЗаписиНовогоОбъекта(Объект, Источник, ЭтаФорма) Экспорт

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭтаФорма.ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭтаФорма.ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ФормаЭлементаОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма) Экспорт

	Если ИмяСобытия = "ОбновитьФорму" И (Источник = ЭтаФорма Или Источник = ЭтаФорма.Ссылка) Тогда 
		
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента, ЭтаФорма, Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбновитьУдостоверениеЛичности" Тогда
		
		ОбновитьПредставлениеЭлемента("УдостоверениеЛичности", ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Объект = ЭтаФорма.Ссылка Тогда
		КонтактнаяИнформация	= ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация;
		Если КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
		
			УправлениеКонтактнойИнформацией.УстановитьВозможностьРедактированияТекстаКИ(КонтактнаяИнформация);
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииДанных" формы
//
Процедура ФормаЭлементаПриИзмененииДанных(ЭтаФорма) Экспорт

	ПрочитатьЗаполнитьСвойстваИЗначения(, ЭтаФорма);
	ПрочитатьЗаполнитьКатегории(, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы
//
Процедура ФормаЭлементаПриЗаписи(Отказ, ЭтаФорма) Экспорт

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	ТаблицаСообщений = Новый ТаблицаЗначений;
	
	ФИО = ЭтаФорма.Фамилия + " " + ЭтаФорма.Имя + " " + ЭтаФорма.Отчество;
	
	мНаборЗаписейДокументаУдостоверяющегоЛичность = ЭтаФорма.мНаборЗаписейДокументаУдостоверяющегоЛичность;
	Ссылка	= ЭтаФорма.Ссылка;
	
	ЭтоНовый = ЭтаФорма.мЭтоНовый;
	
	Если мНаборЗаписейДокументаУдостоверяющегоЛичность.Количество() > 0 Тогда
		ЗаписьДокументаУдостоверяющегоЛичность = Новый Структура("ДокументВид,ДокументСерия,ДокументНомер,ДокументДатаВыдачи,ДокументКодПодразделения");
		ЗаполнитьЗначенияСвойств(ЗаписьДокументаУдостоверяющегоЛичность,мНаборЗаписейДокументаУдостоверяющегоЛичность[0]);
		Если ЭтоНовый Тогда
			ТаблицаСообщений = ПолныеПраваЗК.ПроверитьДублиФизлиц(Ссылка, ЗаписьДокументаУдостоверяющегоЛичность, ЭтаФорма.ИНН, ЭтаФорма.СтраховойНомерПФР, ФИО);
		КонецЕсли;
	Иначе
		Если ЭтоНовый Тогда
			ТаблицаСообщений = ПолныеПраваЗК.ПроверитьДублиФизлиц(Ссылка, , ЭтаФорма.ИНН, ЭтаФорма.СтраховойНомерПФР, ФИО);
		КонецЕсли;
	КонецЕсли;
	
	// покажем результаты проверки дублей физлиц
	Если ТаблицаСообщений.Количество() > 0 Тогда
		РодительскаяСтрока = ОбработкаКомментариев.ДобавитьСообщение("Результат проверки дублей физлиц",Перечисления.ВидыСообщений.ВажнаяИнформация);
		Для каждого СтрокаТЗ Из ТаблицаСообщений Цикл
			Расшифровки = Новый Массив;
			// расшифровка сообщений представляет собой массив структур "Представление+Расшифровка"
			Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", СтрокаТЗ.Физлицо, СтрокаТЗ.Физлицо));
			ОбработкаКомментариев.ДобавитьСообщение(СтрокаТЗ.ТекстСообщения,Перечисления.ВидыСообщений.Информация, Расшифровки, РодительскаяСтрока);
		КонецЦикла;
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
	// запись в регистр паспортных данных
	Если мНаборЗаписейДокументаУдостоверяющегоЛичность.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Период) Тогда
		мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Физлицо = Ссылка;
		
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Физлицо.Значение		= мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Физлицо;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Использование	= Истина;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Значение			= мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Период;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Записать(Истина);
	КонецЕсли;
	
	мНаборЗаписейГражданство = ЭтаФорма.мНаборЗаписейГражданство;
	
	// запись в регистр гражданство
	Если мНаборЗаписейГражданство.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейГражданство[0].Период) Тогда
		мНаборЗаписейГражданство[0].Физлицо = ЭтаФорма.Ссылка;
		
		мНаборЗаписейГражданство.Отбор.Физлицо.Использование= Истина;
		мНаборЗаписейГражданство.Отбор.Физлицо.Значение		= мНаборЗаписейГражданство[0].Физлицо;
		мНаборЗаписейГражданство.Отбор.Период.Использование	= Истина;
		мНаборЗаписейГражданство.Отбор.Период.Значение		= мНаборЗаписейГражданство[0].Период;
		мНаборЗаписейГражданство.Записать(Истина);
	КонецЕсли;
	
	мНаборЗаписейВоинскийУчет = ЭтаФорма.мНаборЗаписейВоинскийУчет;
	
	// запись в регистр воинский учет
	Если мНаборЗаписейВоинскийУчет.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейВоинскийУчет[0].Период) Тогда
		мНаборЗаписейВоинскийУчет[0].Физлицо = ЭтаФорма.Ссылка;
		
		мНаборЗаписейВоинскийУчет.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейВоинскийУчет.Отбор.Физлицо.Значение		= мНаборЗаписейВоинскийУчет[0].Физлицо;
		мНаборЗаписейВоинскийУчет.Отбор.Период.Использование	= Истина;
		мНаборЗаписейВоинскийУчет.Отбор.Период.Значение			= мНаборЗаписейВоинскийУчет[0].Период;
		мНаборЗаписейВоинскийУчет.Записать(Истина);
	КонецЕсли;
	
	мНаборЗаписейСемейноеПоложение = ЭтаФорма.мНаборЗаписейСемейноеПоложение;
	
	// запись в регистр семейное положение
	Если мНаборЗаписейСемейноеПоложение.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейСемейноеПоложение[0].Период) Тогда
		мНаборЗаписейСемейноеПоложение[0].Физлицо = Ссылка;
		
		мНаборЗаписейСемейноеПоложение.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейСемейноеПоложение.Отбор.Физлицо.Значение		= мНаборЗаписейСемейноеПоложение[0].Физлицо;
		мНаборЗаписейСемейноеПоложение.Отбор.Период.Использование	= Истина;
		мНаборЗаписейСемейноеПоложение.Отбор.Период.Значение		= мНаборЗаписейСемейноеПоложение[0].Период;
		мНаборЗаписейСемейноеПоложение.Записать(Истина);
	КонецЕсли;
	
	мНаборЗаписейИнвалидность = ЭтаФорма.мНаборЗаписейИнвалидность;
	
	// запись в регистр Сведения об инвалидности
	Если мНаборЗаписейИнвалидность.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейИнвалидность[0].Период) Тогда
		мНаборЗаписейИнвалидность[0].Физлицо = Ссылка;
		
		мНаборЗаписейИнвалидность.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейИнвалидность.Отбор.Физлицо.Значение		= мНаборЗаписейИнвалидность[0].Физлицо;
		мНаборЗаписейИнвалидность.Отбор.Период.Использование	= Истина;
		мНаборЗаписейИнвалидность.Отбор.Период.Значение			= мНаборЗаписейИнвалидность[0].Период;
		мНаборЗаписейИнвалидность.Записать(Истина);
	КонецЕсли;
	
	мНаборЗаписейФИО = ЭтаФорма.мНаборЗаписейФИО;
	
	// запись в регистр ФИО физлиц
	Если мНаборЗаписейФИО.Количество() = 0 Тогда
		ЗаписьНабора = мНаборЗаписейФИО.Добавить();
		ЗаписьНабора.Период		= ?(ЗначениеЗаполнено(ЭтаФорма.ДатаРождения), ЭтаФорма.ДатаРождения,'19800101');
		ЗаписьНабора.Фамилия	= ЭтаФорма.Фамилия;
		ЗаписьНабора.Имя		= ЭтаФорма.Имя;
		ЗаписьНабора.Отчество	= ЭтаФорма.Отчество;
	КонецЕсли;
	
	Если мНаборЗаписейФИО.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейФИО[0].Период) Тогда
			
		мНаборЗаписейФИО[0].Физлицо 	= Ссылка;
		мНаборЗаписейФИО[0].Фамилия 	= ЭтаФорма.Фамилия;
		мНаборЗаписейФИО[0].Имя 		= ЭтаФорма.Имя;
		мНаборЗаписейФИО[0].Отчество	= ЭтаФорма.Отчество;
		
		мНаборЗаписейФИО.Отбор.Физлицо.Установить(Ссылка);
		мНаборЗаписейФИО.Отбор.Период.Установить(мНаборЗаписейФИО[0].Период);
		мНаборЗаписейФИО.Записать(Истина);
		
	КонецЕсли;
	
	ОбработкаОбъектЗначенияСвойств 	= ЭтаФорма.ОбработкаОбъектЗначенияСвойств;
	ОбработкаОбъектКатегорииОбъекта	= ЭтаФорма.ОбработкаОбъектКатегорииОбъекта;
	
	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();
	
	// Запись в регистр контактной информации
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ЭтаФорма.НаборКонтактнойИнформации, Ссылка, Отказ);

	// Заметки
	ЭтаФорма.Заметки.Отбор.Объект.Значение = Ссылка;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы
//
Процедура ФормаЭлементаПослеЗаписи(ЭтаФорма) Экспорт
	
	Ссылка = ЭтаФорма.Ссылка;
	
	ЭтаФорма.Заголовок = "Личные данные физического лица: " + ЭтаФорма.Наименование;
	ПроцедурыУправленияПерсоналомПолныеПрава.СинхронизироватьНаименованияСотрудников(Ссылка);
	Оповестить("ОбновитьДанныеОФизлице", Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ФормаЭлементаОсновныеДействияФормыДействиеПечать(Кнопка, ЭтаФорма) Экспорт

	Отказ = Ложь;
	
	Если ЭтаФорма.Модифицированность() Тогда
		Если Вопрос("Данные физлица еще не записаны! Записать?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЭтаФорма.ЗаписатьВФорме();
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		ЭтаФорма.ЭтотОбъект.Печать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаЭлементаДействияФормыРедактироватьКод(Кнопка, ЭтаФорма) Экспорт
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтаФорма.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
КонецПроцедуры

Процедура ФормаЭлементаДействияФормыТруд(Кнопка, ЭтаФорма) Экспорт
	
	Отказ = Ложь;

	Если ЭтаФорма.ЭтоНовый() Тогда
		Вопрос = "Перед вводом сведений необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЭтаФорма.ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если НЕ Отказ Тогда
		
		ФормаРедактирования = ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаВводаДанныхТруд", ЭтаФорма);
		ФормаРедактирования.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаЭлементаДействияФормыНДФЛ(Кнопка, ЭтаФорма) Экспорт
	
	Отказ = Ложь;

	Если ЭтаФорма.ЭтоНовый() Тогда
		Вопрос = "Перед вводом сведений необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЭтаФорма.ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если НЕ Отказ Тогда
		
		ФормаВводаНДФЛ = ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма);
		ФормаВводаНДФЛ.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаЭлементаДействияФормыФайлы(Кнопка, ЭтаФорма) Экспорт

	Отказ = Ложь;

	Если ЭтаФорма.ЭтоНовый() Тогда
		Вопрос = "Перед вводом файлов и изображений необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЭтаФорма.ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

 	Если НЕ Отказ Тогда
        Ссылка = ЭтаФорма.Ссылка;
		
		СтруктураДляСпискаИзображений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
		СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
		ОбязательныеОтборы = Новый Структура("Объект", Ссылка);
		
		РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

Процедура ФормаЭлементаДействияФормыПеречитать(Кнопка, ЭтаФорма, ЭтотОбъект) Экспорт
	
	Если ЭтаФорма.Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные были изменены. Перечитать данные?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(ЭтаФорма.НаборКонтактнойИнформации, ЭтаФорма.Ссылка);
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ФормаЭлементаНаименованиеПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	ФИО = ЭтаФорма.Наименование;
	
	Если ПустаяСтрока(ЭтаФорма.Фамилия) Или ЭтаФорма.ЭтоНовый() Тогда
		МассивФИО = ОбщегоНазначения.ПолучитьМассивФИО(ФИО);
		ЭтаФорма.Фамилия  = МассивФИО[0];
		ЭтаФорма.Имя      = МассивФИО[1];
		ЭтаФорма.Отчество = МассивФИО[2];
		
		Если ЗначениеЗаполнено(ЭтаФорма.Отчество) И Не ЗначениеЗаполнено(ЭтаФорма.Пол) Тогда
			ЭтаФорма.Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(ЭтаФорма.Отчество);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует список вариантов для наименования элемента
Процедура ФормаЭлементаНаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	Фамилия		= ЭтаФорма.Фамилия;
	Имя			= ЭтаФорма.Имя;
	Отчество	= ЭтаФорма.Отчество;
	
	СписокВозможныхНаименований = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Фамилия) Тогда
		СписокВозможныхНаименований.Добавить(Фамилия);
		Если ЗначениеЗаполнено(Имя) Тогда
			СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + СокрЛП(Имя));
			СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ".");
			Если ЗначениеЗаполнено(Отчество) Тогда
				СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));
				СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ ".");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Имя) Тогда
			СписокВозможныхНаименований.Добавить(Имя);
			Если ЗначениеЗаполнено(Отчество) Тогда
				СписокВозможныхНаименований.Добавить(СокрЛП(Имя) + " " + СокрЛП(Отчество));
				СписокВозможныхНаименований.Добавить(СокрЛП(Имя) + ". " + Лев(Отчество,1)+ ".");
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Отчество) Тогда
				СписокВозможныхНаименований.Добавить(Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элемент.СписокВыбора = СписокВозможныхНаименований;
	
КонецПроцедуры

Процедура ФормаЭлементаКнопкаВызоваДанныхФИОНажатие(Элемент, ЭтаФорма) Экспорт
	
	ФормаВвода = ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаЗаписиФИО", ЭтаФорма);
	
	мНаборЗаписейФИО = ЭтаФорма.мНаборЗаписейФИО;
	
	Если мНаборЗаписейФИО.Количество() = 0 Тогда
		мНаборЗаписейФИО.Добавить();
	КонецЕсли;
	
	Если ПустаяСтрока(мНаборЗаписейФИО[0].Фамилия + мНаборЗаписейФИО[0].Имя + мНаборЗаписейФИО[0].Отчество)	Тогда
		мНаборЗаписейФИО[0].Фамилия	= ЭтаФорма.Фамилия;
		мНаборЗаписейФИО[0].Имя		= ЭтаФорма.Имя;
		мНаборЗаписейФИО[0].Отчество= ЭтаФорма.Отчество;
		Если НЕ ЗначениеЗаполнено(мНаборЗаписейФИО[0].Период) Тогда
			мНаборЗаписейФИО[0].Период	= ?(ЗначениеЗаполнено(ЭтаФорма.ДатаРождения),ЭтаФорма.ДатаРождения,'19800101');
		КонецЕсли;
	КонецЕсли;
	
	ФормаВвода.НаборЗаписей = мНаборЗаписейФИО;
	ФормаВвода.ФамилияПриОткрытии  = мНаборЗаписейФИО[0].Фамилия;
	ФормаВвода.ИмяПриОткрытии      = мНаборЗаписейФИО[0].Имя;
	ФормаВвода.ОтчествоПриОткрытии = мНаборЗаписейФИО[0].Отчество;
	ФормаВвода.ПериодПриОткрытии   = мНаборЗаписейФИО[0].Период;
	ФормаВвода.Физлицо = ЭтаФорма.Ссылка;
	ФормаВвода.Открыть();
	
КонецПроцедуры

// Процедура открывает основное изображение в отдельном окне.
Процедура ФормаЭлементаОсновноеИзображениеНажатие(Элемент, ЭтаФорма) Экспорт
	
	Отказ = Ложь;
	Если ЭтаФорма.ЭтоНовый() Тогда
		Вопрос = "Перед вводом основного изображения необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЭтаФорма.ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		РаботаСФайлами.ОткрытьФормуИзображения(ЭтаФорма, ЭтаФорма.ОсновноеИзображение, ЭтаФорма.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаЭлементаКодИМНСПриИзменении(Элемент, ЭтаФорма) Экспорт
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИНН) Тогда
		ЭтаФорма.ИНН = ЭтаФорма.КодИМНС
	КонецЕсли;
КонецПроцедуры

// Процедура записывает код ИФНС "по умолчанию" по первым 4 цифрам ИНН
Процедура ФормаЭлементаИННПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	ИНН = ЭтаФорма.ИНН;
	
	РаботаСДиалогами.ПроверитьИННОформитьПолеВвода(ИНН, ЭтаФорма.ЭлементыФормы.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо);
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.КодИМНС) Тогда
		ЭтаФорма.КодИМНС = Лев(ИНН,4);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаЭлементаСтраховойНомерПФРПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	ЭтотОбъект = ЭтаФорма.ЭтотОбъект;
	
	РаботаСДиалогамиЗК.ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(ЭтотОбъект.СтраховойНомерПФР, ЭтаФорма.ЭлементыФормы.СтраховойНомерПФР);

КонецПроцедуры

Процедура ФормаЭлементаМестоРожденияНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЭтаФорма.мФормаВводаМестаРождения = ПолучитьОбщуюФорму("ФормаВводаМестаРождения", ЭтаФорма, "ФизЛицо"+ЭтаФорма.Код);
	ЭтаФорма.мФормаВводаМестаРождения.МестоРожденияСтрокой = ЭтаФорма.МестоРождения;
	ЭтаФорма.мФормаВводаМестаРождения.ЗаголовокФормы       = "Место рождения физ. лица: "+ЭтаФорма.Наименование;
	ЭтаФорма.мФормаВводаМестаРождения.Открыть();
	
КонецПроцедуры

Процедура ФормаЭлементаУдостоверениеЛичностиНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт

	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;

	ФормаВвода	 			= ПолучитьОбщуюФорму("РедактированиеДокументаУдостоверяющегоЛичность", ЭтаФорма);
	ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейДокументаУдостоверяющегоЛичность;
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура ФормаЭлементаГражданствоНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт

	СтандартнаяОбработка 	= Ложь;
	Отказ 					= Ложь;
	ФормаВвода	 			= ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаЗаписиГражданство", ЭтаФорма);
	ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейГражданство;
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура ФормаЭлементаВоинскийУчетНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	ФормаВвода	 			= ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаЗаписиВоинскийУчет", ЭтаФорма);
	ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейВоинскийУчет;
	ФормаВвода.Открыть();

КонецПроцедуры

Процедура ФормаЭлементаИнвалидностьНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;

	ФормаВвода	 			= ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаЗаписиСведенияОбИнвалидности", ЭтаФорма);
	ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейИнвалидность;
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура ФормаЭлементаСемейноеПоложениеНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	ФормаВвода	 			= ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаЗаписиСемейноеПоложение", ЭтаФорма);
	ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейСемейноеПоложение;
	ФормаВвода.Открыть();

КонецПроцедуры

Процедура ФормаЭлементаДатаРожденияПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	Если Год(Элемент.Значение) >= Год(ОбщегоНазначенияЗК.ПолучитьРабочуюДату()) Тогда
		Предупреждение("Внимание! Возможно, неверно задана дата рождения.");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ФормаЭлементаЕстьЛьготаПриНачисленииПособийПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	ЭтотОбъект = ЭтаФорма.ЭтотОбъект;
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	
	ЭлементыФормы.ЛьготаПриНачисленииПособий.ТолькоПросмотр = Не ЭтаФорма.ЕстьЛьготаПриНачисленииПособий;
	ЭлементыФормы.ЛьготаПриНачисленииПособий.АвтоВыборНезаполненного = ЭтаФорма.ЕстьЛьготаПриНачисленииПособий;
	Если ЭлементыФормы.ЛьготаПриНачисленииПособий.ТолькоПросмотр И ЗначениеЗаполнено(ЭтотОбъект.ЛьготаПриНачисленииПособий) Тогда
		ЭтотОбъект.ЛьготаПриНачисленииПособий = "";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Заметки

Процедура ФормаЭлементаЗаметкиПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма) Экспорт
	
	Отказ = Истина;
	
	Форма = РегистрыСведений.Заметки.ПолучитьФормуРедактированияЗаписи();
	Форма.Автор  = глЗначениеПеременной("глТекущийПользователь");
	Форма.Объект = ЭтаФорма.Ссылка;
	Форма.Дата   = ТекущаяДата();
	
	Если Копирование Тогда
		ОбъектКопирования = Элемент.ТекущиеДанные;
		Форма.ВидЗаметки = ЭтаФорма.ОбъектКопирования.ВидЗаметки;
		Форма.Содержание = ЭтаФорма.ОбъектКопирования.Содержание;
	КонецЕсли; 

	Форма.Открыть();

КонецПроцедуры