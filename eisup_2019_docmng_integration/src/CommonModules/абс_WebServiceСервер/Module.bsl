////////////////////////////////////////////////////////////////////////////////
// СОЗДАНИЕ КОНТРАГЕНТА

&НаСервере
// Вызов вебсервиса с сервера
Функция КонтрагентПередЗаписьюWebСогласованиеСервер(ИсточникСсылка, Отказ) Экспорт
	
	Источник = ИсточникСсылка.ПолучитьОбъект(); 
	
	абс_ОбработчикWebService = абс_WebService.ПолучитьОбработчикWebService();        
	
	// Вызов обработчика
	Попытка
		Если Источник.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка Тогда
			ОтветXDTO = абс_ОбработчикWebService.СогласоватьСозданиеКонтрагента(Источник);
			Источник.абс_Код_ИСУП_ТТК = ОтветXDTO.ID;
		ИначеЕсли Источник.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда
			ОтветXDTO = абс_ОбработчикWebService.ВызовСогласованиеДЭБ(Источник);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОтветXDTO = Новый Структура("ID, Error");
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "Вызов обработчика согласования создания контрагента по вебсервису");
		ОтветXDTO.Error = ОписаниеОшибки;
	КонецПопытки;
	
	//Сообщить("Код возврата WebService: " + ОтветXDTO.ID);
	//Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
	
	Отказ = ЗначениеЗаполнено(ОтветXDTO.Error);	
	
	Возврат ОтветXDTO;
	
КонецФункции

&НаСервере
// Вызывает указанную функцию с сервера
Функция ВыполнитьНаСервереФункцию(ФункцияИмя, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	
	абс_ОбработчикWebService = абс_WebService.ПолучитьОбработчикWebService();  
	Результат = Неопределено;
	СтрПараметров = ?(НЕ Параметр1 = Неопределено, "(Параметр1)", "()");
	Если НЕ Параметр2 = Неопределено Тогда
		СтрПараметров = СтрЗаменить(СтрПараметров, "Параметр1", "Параметр1, Параметр2");
	КонецЕсли;
	Если НЕ Параметр3 = Неопределено Тогда
		СтрПараметров = СтрЗаменить(СтрПараметров, "Параметр2", "Параметр2, Параметр3");
	КонецЕсли;
	
    Выполнить("Результат = абс_ОбработчикWebService." + ФункцияИмя + СтрПараметров);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Вызывает указанную функцию с сервера
Процедура ВыполнитьНаСервереПроцедуру(ПроцедураИмя, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	
	абс_ОбработчикWebService = абс_WebService.ПолучитьОбработчикWebService();  
	СтрПараметров = ?(НЕ Параметр1 = Неопределено, "(Параметр1)", "()");
	Если НЕ Параметр2 = Неопределено Тогда
		СтрПараметров = СтрЗаменить(СтрПараметров, "Параметр1", "Параметр1, Параметр2");
	КонецЕсли;
	Если НЕ Параметр3 = Неопределено Тогда
		СтрПараметров = СтрЗаменить(СтрПараметров, "Параметр2", "Параметр2, Параметр3");
	КонецЕсли;
	
    Выполнить("абс_ОбработчикWebService." + ПроцедураИмя + СтрПараметров);
	
КонецПроцедуры

Функция ИнициализацияWebServiceFL(КодОрганизации, СообщениеОбОшибке) Экспорт
	
	Прокси = Неопределено; 
	
	// Создание описания по WSDL файлу	
	Если НЕ Метаданные.WSСсылки.Найти("abs_FLData") = Неопределено Тогда
		Прокси = WSСсылки.abs_FLData.СоздатьWSПрокси("http://www.abs-soft_FL.ru", "abs_FLData", "abs_FLDataSoap"); 	
	Иначе
		СообщениеОбОшибке = "WSСсылка abs_FLData не найдена!";
		Возврат Неопределено;
		//Определение = Новый WSОпределения("https://isup-ttk.transtk.ru/persondata/ws/fldata.1cws?wsdl", "EISUP_PersonalData", "EISUP_PersonalData"); 		
		//// Создание прокси для обращения к сервису и фабрике XDTO
		//Прокси = Новый WSПрокси(Определение, "http://www.abs-soft_FL.ru", "abs_FLData", "abs_FLDataSoap"); 
	КонецЕсли;	
		
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Неопределено;
	КонецЕсли;

	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
		
	ОтветXDTO = Прокси.GetFLData(КодОрганизации);
	
	Если ЗначениеЗаполнено(ОтветXDTO.Error) Тогда	
		СообщениеОбОшибке = ОтветXDTO.Error;
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаВозврата = Новый ТаблицаЗначений;
	
	ТаблицаВозврата.Колонки.Добавить("Code");
	ТаблицаВозврата.Колонки.Добавить("Family");
	ТаблицаВозврата.Колонки.Добавить("Name");
	ТаблицаВозврата.Колонки.Добавить("Patronym");
	ТаблицаВозврата.Колонки.Добавить("DateOfBirth");
	
	Для Каждого FLDataТекущий Из ОтветXDTO.FL_DataElements Цикл
		
		НоваяСтрока = ТаблицаВозврата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, FLDataТекущий);
										
	КонецЦикла;
        		
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция ИнициализацияWebServiceEmp(КодОрганизации, СообщениеОбОшибке) Экспорт
	
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_EmpData();	
	Если Прокси = Неопределено Тогда
		
		Возврат Неопределено;
	КонецЕсли;

	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
		
	ОтветXDTO = Прокси.GetEmpData(КодОрганизации);
	Если ЗначениеЗаполнено(ОтветXDTO.Error) Тогда	
		СообщениеОбОшибке = ОтветXDTO.Error;
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаВозврата = Новый ТаблицаЗначений;
	
	ТаблицаВозврата.Колонки.Добавить("Code");
	ТаблицаВозврата.Колонки.Добавить("FIO");
	ТаблицаВозврата.Колонки.Добавить("CodeFL");
	ТаблицаВозврата.Колонки.Добавить("Job");
	ТаблицаВозврата.Колонки.Добавить("DataOfBirth");
	ТаблицаВозврата.Колонки.Добавить("CodeJob");
	ТаблицаВозврата.Колонки.Добавить("Grade");
	ТаблицаВозврата.Колонки.Добавить("DepName");
	ТаблицаВозврата.Колонки.Добавить("CodeDep");
	ТаблицаВозврата.Колонки.Добавить("DateOfAdmission");
	ТаблицаВозврата.Колонки.Добавить("DateOfDismissal");
	ТаблицаВозврата.Колонки.Добавить("Login");
	
	Для Каждого EmpDataТекущий Из ОтветXDTO.Emp_DataElements Цикл
		
		НоваяСтрока = ТаблицаВозврата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, EmpDataТекущий); 
						
	КонецЦикла;
        		
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция ИнициализацияWebServiceDep(КодОрганизации, СообщениеОбОшибке) Экспорт
	
	Прокси = Неопределено; 
	
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_DepData();	
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Неопределено;

	КонецЕсли;
	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
		
	ОтветXDTO = Прокси.GetDepData(КодОрганизации);
	
	Если ЗначениеЗаполнено(ОтветXDTO.Error) Тогда	
		СообщениеОбОшибке = ОтветXDTO.Error;
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаВозврата = Новый ТаблицаЗначений;
	
	ТаблицаВозврата.Колонки.Добавить("Code");
	ТаблицаВозврата.Колонки.Добавить("Name");
	ТаблицаВозврата.Колонки.Добавить("FullName");
	ТаблицаВозврата.Колонки.Добавить("DateBegin");
	ТаблицаВозврата.Колонки.Добавить("Category");
	ТаблицаВозврата.Колонки.Добавить("DateEnd");
	ТаблицаВозврата.Колонки.Добавить("Status");
	ТаблицаВозврата.Колонки.Добавить("Actual");
	ТаблицаВозврата.Колонки.Добавить("Level");
	ТаблицаВозврата.Колонки.Добавить("ParentCode");
		
	Для Каждого DepDataТекущий Из ОтветXDTO.Dep_DataElements Цикл
		
		НоваяСтрока = ТаблицаВозврата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, DepDataТекущий); 
						
	КонецЦикла;
        		
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция ИнициализацияDogovor_Act_Integration(Номер, Дата, Данные, СообщениеОбОшибке) Экспорт
	
	Прокси = Неопределено; 
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_Dogovor_Act_Integration();	
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Неопределено;

	КонецЕсли;
	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
	
	ОтветXDTO = Ложь;
	Попытка 
		ОтветXDTO = Прокси.CreateDogovor(Номер, Дата, Данные);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат ОтветXDTO; 
		
КонецФункции

Функция ИнициализацияDogovor_Act_Integration_Act(Номер, Дата, Данные, СообщениеОбОшибке) Экспорт
	
	Прокси = Неопределено; 
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_Dogovor_Act_Integration();	
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Неопределено;

	КонецЕсли;
	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
	
	ОтветXDTO = Ложь;
	Попытка
		ОтветXDTO = Прокси.CreateAct(Номер, Дата, Данные);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат ОтветXDTO; 
		
КонецФункции

Функция ИнициализацияDogovor_PersonData_Get(Номер, Дата, СообщениеОбОшибке) Экспорт
	
	Прокси = Неопределено; 
	
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_Dogovor_PersonData();	
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Неопределено;

	КонецЕсли;

	
	//Если НЕ Метаданные.WSСсылки.Найти("abs_Dogovor_PersonData") = Неопределено Тогда
	//	Прокси = WSСсылки.abs_Dogovor_PersonData.СоздатьWSПрокси("http://www.abs-soft_Dogovor_PersonData.ru", "abs_Dogovor_PersonData", "abs_Dogovor_PersonDataSoap"); 	
	//Иначе
	//	СообщениеОбОшибке = "WSСсылка abs_Dogovor_PersonData не найдена!";
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
	
	Попытка 
		ОтветXDTO = Прокси.GetDogovorPersonData(Номер, Дата);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ОтветXDTO.Error) Тогда	
		СообщениеОбОшибке = ОтветXDTO.Error;
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("DateOfBirth", ОтветXDTO.DogovorPersonData.DateOfBirth);			
	СтруктураВозврата.Вставить("Passport", ОтветXDTO.DogovorPersonData.Passport);
	СтруктураВозврата.Вставить("AddressPropiska", ОтветXDTO.DogovorPersonData.AddressPropiska);
	СтруктураВозврата.Вставить("Address", ОтветXDTO.DogovorPersonData.Address);
	//АБС+ Тупиков 
	СтруктураВозврата.Вставить("AddressPropiskaRep", ОтветXDTO.DogovorPersonData.AddressPropiskaRep);
	СтруктураВозврата.Вставить("AddressRep", ОтветXDTO.DogovorPersonData.AddressRep);
	//АБС- 
	СтруктураВозврата.Вставить("Pol", ОтветXDTO.DogovorPersonData.Pol);
	СтруктураВозврата.Вставить("PFR", ОтветXDTO.DogovorPersonData.PFR);
	СтруктураВозврата.Вставить("INN", ОтветXDTO.DogovorPersonData.INN);
        		
	Возврат СтруктураВозврата;  
	
КонецФункции

Функция ИнициализацияDogovor_PersonData_Put(Номер, Дата, ДатаРождения, Паспорт, АдресПрописки, АдресПроживания, АдресПропискиПредставление, АдресПроживанияПредставление, Пол, СтраховойНомерПФР, ИНН, СообщениеОбОшибке) Экспорт
	
	Прокси = Неопределено; 
	
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_Dogovor_PersonData();	
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Неопределено;

	КонецЕсли;

	//Если НЕ Метаданные.WSСсылки.Найти("abs_Dogovor_PersonData") = Неопределено Тогда
	//	Прокси = WSСсылки.abs_Dogovor_PersonData.СоздатьWSПрокси("http://www.abs-soft_Dogovor_PersonData.ru", "abs_Dogovor_PersonData", "abs_Dogovor_PersonDataSoap"); 	
	//Иначе
	//	СообщениеОбОшибке = "WSСсылка abs_Dogovor_PersonData не найдена!";
	//	Возврат Ложь;
	//КонецЕсли;
	
	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
	
	ОтветXDTO = Ложь;
	Попытка
		ОтветXDTO = Прокси.PutDogovorPersonData(Номер, Дата, ДатаРождения, Паспорт, АдресПрописки, АдресПроживания, АдресПропискиПредставление, АдресПроживанияПредставление, Пол, ИНН, СтраховойНомерПФР);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат ОтветXDTO;  
	
КонецФункции

Функция ИнициализацияDogovor_PersonData_GetFileList(Номер, Дата, СообщениеОбОшибке, ТипДокумента) Экспорт
	
	Прокси = Неопределено; 
	
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_Dogovor_PersonData();	
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Неопределено;

	КонецЕсли;

	//Если НЕ Метаданные.WSСсылки.Найти("abs_Dogovor_PersonData") = Неопределено Тогда
	//	Прокси = WSСсылки.abs_Dogovor_PersonData.СоздатьWSПрокси("http://www.abs-soft_Dogovor_PersonData.ru", "abs_Dogovor_PersonData", "abs_Dogovor_PersonDataSoap"); 	
	//Иначе
	//	СообщениеОбОшибке = "WSСсылка abs_Dogovor_PersonData не найдена!";
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
	
	Попытка
		ОтветXDTO = Прокси.GetDogovorFileList(ТипДокумента, Номер, Дата);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ОтветXDTO.Error) Тогда	
		СообщениеОбОшибке = ОтветXDTO.Error;
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗФайлов = Новый ТаблицаЗначений;
	
	ТЗФайлов.Колонки.Добавить("Наименование");
	ТЗФайлов.Колонки.Добавить("ДатаИзменения");
	ТЗФайлов.Колонки.Добавить("Пользователь");
	ТЗФайлов.Колонки.Добавить("Размер");
	
	Для Каждого ТекФайл Из ОтветXDTO.FileDescriptionList Цикл
		НовСтрока = ТЗФайлов.Добавить();
		НовСтрока.Наименование = ТекФайл.Name;
		НовСтрока.ДатаИзменения = ТекФайл.DateTime;
		НовСтрока.Пользователь = ТекФайл.User;
		НовСтрока.Размер = "" + ТекФайл.Size + " B";
	КонецЦикла;                                                                  
	ТЗФайлов.Сортировать("ДатаИзменения,Наименование");	
        		
	Возврат ТЗФайлов;  
	
КонецФункции

Функция ИнициализацияDogovor_PersonData_GetFile(СписокФайлов, Договор, СообщениеОбОшибке, ТипДокумента) Экспорт
	
	Прокси = Неопределено; 
	
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_Dogovor_PersonData();	
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Неопределено;

	КонецЕсли;
	//Если НЕ Метаданные.WSСсылки.Найти("abs_Dogovor_PersonData") = Неопределено Тогда
	//	Прокси = WSСсылки.abs_Dogovor_PersonData.СоздатьWSПрокси("http://www.abs-soft_Dogovor_PersonData.ru", "abs_Dogovor_PersonData", "abs_Dogovor_PersonDataSoap"); 	
	//Иначе
	//	СообщениеОбОшибке = "WSСсылка abs_Dogovor_PersonData не найдена!";
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
	
	Для Каждого СТрокаТЗ из СписокФайлов Цикл
		
		Попытка 
			ОтветXDTO = Прокси.GetDogovorFile(ТипДокумента, Договор.Номер, Договор.Дата, СтрокаТЗ.Значение.Наименование);			
		Исключение
			СообщениеОбОшибке = ОписаниеОшибки();
			Продолжить;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ОтветXDTO.Error) Тогда	
			СообщениеОбОшибке = ОтветXDTO.Error;
			Продолжить;
		КонецЕсли;
		
		РезультатЗаписи = Неопределено;
		ПолученныйФайл = ОтветXDTO.base64Binary;
		Попытка
			РезультатЗаписи = абс_РаботаСФайлами.ЗаписатьФайлВоВнешнееХранилище(Договор, ПолученныйФайл, ОтветXDTO.FileDescription.Name);
		Исключение
			СообщениеОбОшибке = "Не удалось записать файл " + ОтветXDTO.FileDescription.Name;
		КонецПопытки;
		
		Если ТипЗнч(РезультатЗаписи) = Тип("Структура") Тогда
			ФайлОбъект = РезультатЗаписи.ХранилищеСсылка.ПолучитьОбъект();
			ФайлОбъект.абс_ЗагруженИзИСУЗК = Истина;
			ФайлОбъект.абс_ДатаПрикрепленияФайла = ОтветXDTO.FileDescription.DateTime;
			Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ОтветXDTO.FileDescription.User, Истина);
			Если ЗначениеЗаполнено(Пользователь) Тогда
				ФайлОбъект.абс_ИнициаторФайла = Пользователь;
			КонецЕсли;
			ФайлОбъект.Записать();
		КонецЕсли;
		
		//НовХранилищеФайлов = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
		//Если ТипЗнч(ПолученныйФайл) = Тип("Картинка") Тогда
		//	НовХранилищеФайлов.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение;
		//Иначе
		//	НовХранилищеФайлов.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
		//КонецЕсли;
		//НовХранилищеФайлов.Хранилище = Новый ХранилищеЗначения(ПолученныйФайл);
		//НовХранилищеФайлов.ИмяФайла =  ОтветXDTO.FileDescription.Name;
		//НовХранилищеФайлов.Объект = Договор;
		//Попытка
		//	НовХранилищеФайлов.Записать();
		//Исключение
		//КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

Функция ИнициализацияDogovor_PersonData_PutFile(СписокФайлов, Договор, СообщениеОбОшибке, ТипДокумента) Экспорт
	
	Прокси = Неопределено; 
	
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_Dogovor_PersonData();	
	Если Прокси = Неопределено Тогда
		
		СообщениеОбОшибке = "WSСсылка abs_Dogovor_PersonData не найдена!";
		Возврат Ложь;
	КонецЕсли;	
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Ложь;
	КонецЕсли;

	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
	
	Фабрика = Прокси.ФабрикаXDTO;
	
	Результат = Истина;
	
	Для Каждого СТрокаТЗ из СписокФайлов Цикл
		
		Если СтрокаТЗ.Значение.Ссылка.абс_ЗагруженИзИСУЗК Тогда
			Продолжить;
		КонецЕсли;
		
		// {{ТТК Сладков А. Заявка №7751644  21.11.2016 окончание
		//ТекСодержимое = СТрокаТЗ.Значение.Ссылка.Хранилище.Получить(); 
		
		// Механизм хэширования файлов
		Если ЗначениеЗаполнено(СТрокаТЗ.Значение.Ссылка.ttk_СсылкаНаАналогичныйФайл) Тогда
			
			ТекСодержимое = СТрокаТЗ.Значение.Ссылка.ttk_СсылкаНаАналогичныйФайл.Хранилище.Получить();

		Иначе
			
			ТекСодержимое = СТрокаТЗ.Значение.Ссылка.Хранилище.Получить();
			 
		КонецЕсли;	
		// {{ТТК Сладков А. Заявка №7751644  21.11.2016 окончание

		
		Если ТипЗнч(ТекСодержимое)  = Тип("Картинка") Тогда
			ТекДвоичныеДанные = ТекСодержимое.ПолучитьДвоичныеДанные();
		Иначе
			ТекДвоичныеДанные = Новый ДвоичныеДанные(Константы.абс_ПутьКВнешнемуХранилищу.Получить() + "/"+ТекСодержимое);
		КонецЕсли;
		
		FileXDTO 					= Фабрика.Создать(Фабрика.Тип("http://www.abs-soft_Dogovor_PersonData.ru", "File"));
		FileDescXDTO 				= Фабрика.Создать(Фабрика.Тип("http://www.abs-soft_Dogovor_PersonData.ru", "FileDescription"));
		FileDescXDTO.Name 			= СТрокаТЗ.Значение.Наименование;
		FileDescXDTO.DateTime 		= СтрокаТЗ.Значение.Ссылка.абс_ДатаПрикрепленияФайла;
		FileDescXDTO.User			= СтрокаТЗ.Значение.Ссылка.абс_ИнициаторФайла.Наименование;
		FileDescXDTO.Size 			= ТекДвоичныеДанные.Размер();
		
		FileXDTO.FileDescription    = FileDescXDTO;
		
		FileXDTO.base64Binary 		= ТекДвоичныеДанные;
		
		ОтветXDTO = Ложь;
		Попытка
			ОтветXDTO = Прокси.PutDogovorFile(ТипДокумента, Договор.Номер, Договор.Дата, FileXDTO);			
		Исключение
			СообщениеОбОшибке = ОписаниеОшибки();
			Результат = Ложь;
		КонецПопытки;

		Если ЗначениеЗаполнено(ОтветXDTO.Error) Тогда
			Результат = Ложь;
		Иначе
			ФайлОбъект = СтрокаТЗ.Значение.Ссылка.ПолучитьОбъект();
			ФайлОбъект.абс_ЗагруженИзИСУЗК = Истина;
			ФайлОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Процедура абс_ИнтеграцияСИСУЗК() Экспорт
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	Обработка = Обработки.абс_ЗаполнениеДокументаЗагрузкаИзИСУЗК.Создать();
	Обработка.Организация = Справочники.Организации.НайтиПоКоду("000000001");
	Обработка.Заполнить();
	Обработка = Неопределено;
	
КонецПроцедуры

//АБС+++ Гончаров 17.04.2013
Функция CreateVedomost(Number, Date, Data) Экспорт
	ОбработчикWebService = абс_WebService.ПолучитьОбработчикWebService(); 	
	ОтветXDTO = Ложь; 	
	Попытка 
		// Вызов обработчика
		ОтветXDTO = ОбработчикWebService.CreateVedomost(Number, Date, Data); 		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "Вызов обработчика CreateVedomost()");
	КонецПопытки;
	
	Возврат ОтветXDTO;
КонецФункции

Процедура абс_СинхронизацияВыплатЗППриЗаписи(Источник, Отказ) Экспорт
	
	//АБС+++ Гончаров 16.04.2013
	Если Не Отказ И Константы.абс_СинхронизацияВыплатыЗарплаты.Получить() 
		//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
		И абс_СерверныеФункции.абс_ДаннаяБазаНеКопия()
		//\\АБС ВСТАВКА №40078 КОНЕЦ		
		И Источник.Дата >= Константы.абс_ДатаНачалаСинхронизацииВыплатыЗП.Получить() Тогда  
		
		абс_БизнесПроцессыПривелегированный.ИзменитьСтатусВедомостиПриЗаписиПП(Источник, Отказ);
		
		Возврат;
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент КАК Ведомость,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.Дата КАК Дата,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.Номер КАК Номер,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Оплачено,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.абс_Статус КАК абс_Статус
		//|ИЗ
		//|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		//|ГДЕ
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
		//|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.абс_Статус В(&абс_Статус)
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование,
		//|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.Дата,
		//|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.Номер,
		//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен,
		//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
		//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено,
		//|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.абс_Статус
		//|ИЗ
		//|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
		//|		ПО ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа = ЗаявкаНаРасходованиеСредствОплаты.Ссылка
		//|ГДЕ
		//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
		//|	И ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование ССЫЛКА Документ.ЗарплатаКВыплатеОрганизаций
		//|	И ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.абс_Статус В (&абс_Статус)
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	абс_СчетНаОплату.ДокументОснование,
		//|	"""",
		//|	"""",
		//|	абс_СчетНаОплату.Проведен,
		//|	абс_СчетНаОплату.ПометкаУдаления,
		//|	абс_СчетНаОплату.СтатусСчета,
		//|	абс_СчетНаОплату.ДокументОснование.абс_Статус
		//|ИЗ
		//|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
		//|ГДЕ
		//|	абс_СчетНаОплату.ДокументОснование = &Ссылка
		//|	И абс_СчетНаОплату.ДокументОснование.абс_Статус В(&абс_Статус)";				
		//Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		//абс_Статусы = Новый Массив;
		//абс_Статусы.Добавить(Перечисления.абс_СтатусыВыплатыЗарплаты.Корректировка);
		//абс_Статусы.Добавить(Перечисления.абс_СтатусыВыплатыЗарплаты.Отказ);
		//абс_Статусы.Добавить(Перечисления.абс_СтатусыВыплатыЗарплаты.Подготовка);		
		//Запрос.УстановитьПараметр("абс_Статус", абс_Статусы);
		//ВыборкаВедомостей = Запрос.Выполнить().Выбрать();
		//Пока ВыборкаВедомостей.Следующий() Цикл
		//	Сообщить("В платежном документе не должна быть ведомость """ + ВыборкаВедомостей.Ведомость + """ со статусом """ + ВыборкаВедомостей.абс_Статус + """!");
		//	Отказ = Истина;
		//КонецЦикла;	
		//
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент КАК Ведомость,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.Дата КАК Дата,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.Номер КАК Номер,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Оплачено,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.абс_Статус КАК абс_Статус,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Контрагент.абс_КодИСУЗК КАК ФизЛицо,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СуммаДокумента КАК Сумма,
		//|	""РКО"" КАК ТипОплаты,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Номер КАК НомерР,
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата КАК ДатаР
		//|ИЗ
		//|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		//|ГДЕ
		//|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование,
		//|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.Дата,
		//|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.Номер,
		//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен,
		//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
		//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено,
		//|	NULL,
		//|	"""",
		//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа,
		//|	""ППИ"",
		//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Номер,
		//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата
		//|ИЗ
		//|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
		//|		ПО ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа = ЗаявкаНаРасходованиеСредствОплаты.Ссылка
		//|ГДЕ
		//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
		//|	И ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование ССЫЛКА Документ.ЗарплатаКВыплатеОрганизаций
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	абс_СчетНаОплату.ДокументОснование,
		//|	абс_СчетНаОплату.ДокументОснование.Дата,
		//|	абс_СчетНаОплату.ДокументОснование.Номер,
		//|	абс_СчетНаОплату.Проведен,
		//|	абс_СчетНаОплату.ПометкаУдаления,
		//|	ВЫБОР
		//|		КОГДА абс_СчетНаОплату.Проведен
		//|				И НЕ абс_СчетНаОплату.СтатусСчета = ЗНАЧЕНИЕ(Перечисление.абсСтатусыСчетов.Отменен)
		//|			ТОГДА ИСТИНА
		//|		ИНАЧЕ ЛОЖЬ
		//|	КОНЕЦ,
		//|	абс_СчетНаОплату.ДокументОснование.абс_Статус,
		//|	"""",
		//|	0,
		//|	""Счет"",
		//|	"""",
		//|	""""
		//|ИЗ
		//|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
		//|ГДЕ
		//|	абс_СчетНаОплату.Ссылка = &Ссылка
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость,
		//|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость.Дата,
		//|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость.Номер,
		//|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Проведен,
		//|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.ПометкаУдаления,
		//|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Оплачено,
		//|	NULL,
		//|	"""",
		//|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.СуммаПлатежа,
		//|	""ППИ"",
		//|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Номер,
		//|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Дата
		//|ИЗ
		//|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		//|ГДЕ
		//|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &Ссылка";				
		//Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		//Результат = Запрос.Выполнить().Выгрузить(); 				
		//ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");		
		//ТаблицаДляВыгрузки = Результат.Скопировать();
		////ТаблицаДляВыгрузки = Результат.Скопировать(, "Номер, Дата, Сотрудник, Организация,  СуммаПоДоговору, ВидРасчета, Комментарий, Ответственный, ДатаНачалаДоговора, 
		////| ДатаОкончанияДоговора, ПодразделениеОрганизации, СпособОтраженияВБУ, КодВычета, ЦФУ, Фамилия, Имя, Отчество, ФизЛицо,
		////| Контрагент, НомерДоговора, ДатаПодписания, ДатаНачалаГрафик, ДатаОкончанияГрафик, СуммаОплатыГрафик, СодержаниеГрафик, 
		////| ВидДоговораСтрока, ВидАвторскогоДоговораСтрока, ХарактерОплатыСтрока, СтатусСтрока, ЦФО, ПричинаИзмененияСтатуса, Пользователь"); 
		//СообщениеОбОшибке = "";
		//ДокументИзмененВИСУЗК = Ложь;
		//Попытка
		//	ТаблицаДляВыгрузки.Колонки.Добавить("ВедомостьВыплачена");
		//	Для Каждого Строка Из ТаблицаДляВыгрузки Цикл
		//		ВедомостьВыплачена = ВедомостьЗакрыта(Строка.Ведомость);
		//		Строка.ВедомостьВыплачена = ВедомостьВыплачена;
		//		абс_МассивСтрок = Новый Массив;
		//		абс_МассивСтрок.Добавить(Строка);
		//		ТЗ_ПередачаДанных = ТаблицаДляВыгрузки.Скопировать(абс_МассивСтрок);
		//		ДокументИзмененВИСУЗК = абс_WebServiceСервер.ИнициализацияViplataZarplati(Строка.Номер, Строка.Дата, ЗначениеВСтрокуВнутр(ТЗ_ПередачаДанных), СообщениеОбОшибке);
		//		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		//			Сообщить(СообщениеОбОшибке);
		//			Сообщить("Не удалось скорректирован документ в базе ЕСУЗК!");
		//			СообщениеОбОшибке = "";
		//			Отказ = Истина;
		//			Возврат;
		//		КонецЕсли;
		//		Если ТипЗнч(ДокументИзмененВИСУЗК) = Тип("Структура") Тогда
		//			Если Не ДокументИзмененВИСУЗК.Rez Тогда
		//				Сообщить("Не удалось скорректирован документ в базе ЕСУЗК!");
		//				Сообщить(ДокументИзмененВИСУЗК.Error);
		//				Отказ = Истина;
		//				Возврат;
		//			Иначе
		//				Сообщить("Документ скорректирован в базе ЕСУЗК!");
		//			КонецЕСли;	
		//		Иначе
		//			Сообщить("Не удалось скорректирован документ в базе ЕСУЗК!");
		//			Сообщить(СообщениеОбОшибке);
		//			Отказ = Истина;
		//			Возврат; 
		//		КонецЕсли;
		//	КонецЦикла;	
		//Исключение	
		//	Сообщить(СообщениеОбОшибке);
		//	Сообщить("Не удалось создать/скорректирован документ в базе ЕСУЗК!");
		//	СообщениеОбОшибке = "";
		//	Отказ = Истина;
		//	Возврат;
		//КонецПопытки; 
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		////ВЕДОМОСТИ В ПРОГРАММЕ
		//Если ТипЗнч(ДокументИзмененВИСУЗК) = Тип("Структура") И Не Отказ Тогда
		//	Для Каждого Строка Из ТаблицаДляВыгрузки Цикл
		//		ОбъектВедомость = Строка.Ведомость.ПолучитьОбъект();
		//		Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда 					
		//			Если Источник.Проведен И Источник.Оплачено И ВедомостьВыплачена = "Оплачена" Тогда
		//				ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.Завершен;
		//			ИначеЕсли Источник.Проведен И Не Источник.Оплачено ИЛИ ВедомостьВыплачена = "Частично" Тогда
		//				ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.КОплате;
		//			Иначе
		//				ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.Рассчитан;
		//			КонецЕСли;
		//		ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.абс_СчетНаОплату") Тогда
		//			Если Источник.Проведен И Не Источник.СтатусСчета = Перечисления.абсСтатусыСчетов.Отменен Тогда
		//				ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.КОплате;
		//			Иначе
		//				ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.Рассчитан;
		//			КонецЕСли;
		//		ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		//			Если Источник.Проведен И Источник.Оплачено Тогда
		//				ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.Завершен;
		//			ИначеЕсли Источник.ПометкаУдаления Тогда
		//				ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.Рассчитан;
		//			Иначе
		//				ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.КОплате;
		//			КонецЕСли;	
		//		КонецЕСлИ;	
		//		ОбъектВедомость.абс_ВводПрограммно = Истина;
		//		ОбъектВедомость.абс_WebService_ = Истина;
		//		ОбъектВедомость.ОбменДанными.Загрузка = Истина;
		//		
		//		ОбъектВедомость.Записать();
		//	КонецЦикла;	
		//КонецЕсли;
		//

	КонецЕсли;
	//\\АБС--- Гончаров 16.04.2013
КонецПроцедуры	

Функция ВедомостьЗакрыта(Ведомость)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма
		|ПОМЕСТИТЬ втВедомость
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ведомость
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК Сумма
		|ПОМЕСТИТЬ втРКО
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.РасчетныйДокумент = &Ведомость
		|	И РасходныйКассовыйОрдер.Проведен = ИСТИНА
		|	И РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
		|	И РасходныйКассовыйОрдер.Оплачено = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВедомость.Сумма,
		|	ЕСТЬNULL(втРКО.Сумма, 0) КАК Сумма1
		|ИЗ
		|	втВедомость КАК втВедомость,
		|	втРКО КАК втРКО"; 
	Запрос.УстановитьПараметр("Ведомость", Ведомость); 
	Результат = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = Результат.Выбрать(); 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Сумма = ВыборкаДетальныеЗаписи.Сумма1 Тогда
			Возврат "Оплачена";
		ИначеЕсли ВыборкаДетальныеЗаписи.Сумма1 > 0 Тогда	
			Возврат "Частично";
		Иначе
			Возврат "Не оплачена";
		КонецЕслИ;	
	КонецЦикла;  
КонецФункции	

Функция ИнициализацияViplataZarplati(Номер, Дата, Данные, СообщениеОбОшибке) Экспорт 	
	
	Прокси = Неопределено;   	
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_Viplata_Zarplati();	
	
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Ложь;
	КонецЕсли;

	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
	
	ОтветXDTO = Ложь;
	Попытка
		//АБС ВСТАВКА 37022  27.12.2013 16:50:39  Шамов
		ТекстСообщения = "Попытка выполнения CreateVedomost";
		ЗаписьЖурналаРегистрации("ПолучитьWSОпределениеПоURL.abs_ISUZK_Viplata_Zarplati", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
		//АБС ВСТАВКА 37022 КОНЕЦ
		ОтветXDTO = Прокси.CreateVedomost(Номер, Дата, Данные);
		//АБС ВСТАВКА 37022  27.12.2013 16:50:39  Шамов
		ТекстСообщения = "Успешное выполнение CreateVedomost";
		ЗаписьЖурналаРегистрации("ПолучитьWSОпределениеПоURL.abs_ISUZK_Viplata_Zarplati", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
		//АБС ВСТАВКА 37022 КОНЕЦ
	Исключение
		//АБС ВСТАВКА 37022  27.12.2013 16:50:39  Шамов
		ТекстСообщения = "Ошибка выполнения CreateVedomost";
		ЗаписьЖурналаРегистрации("ПолучитьWSОпределениеПоURL.abs_ISUZK_Viplata_Zarplati", УровеньЖурналаРегистрации.Ошибка, , ,ТекстСообщения);
		//АБС ВСТАВКА 37022 КОНЕЦ
		СообщениеОбОшибке = ОписаниеОшибки();
		Возврат Новый Структура("Rez, Error", Ложь, СообщениеОбОшибке);
	КонецПопытки;
	
	Возврат Новый Структура("Rez, Error", ОтветXDTO.Rez, ОтветXDTO.Error); 
		
КонецФункции

Процедура абс_СинхронизацияВыплатНалоговПриЗаписи(Источник, Отказ) Экспорт 	
	//АБС+++ Гончаров 16.04.2013
	Если Не Отказ И Константы.абс_СинхронизацияВыплатыЗарплаты.Получить() 
		//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
		И абс_СерверныеФункции.абс_ДаннаяБазаНеКопия()
		//\\АБС ВСТАВКА №40078 КОНЕЦ		
		И Источник.Дата >= Константы.абс_ДатаНачалаСинхронизацииВыплатыЗП.Получить() Тогда  	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	""Налог"" КАК ТипОплаты,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Номер КАК НомерР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата КАК ДатаР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КодБК КАК КБК,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Контрагент.Код КАК Контрагент,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Организация.абс_КодИСУЗК КАК Организация,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ДатаОплаты,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПоказательПериода
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога)";				
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Результат = Запрос.Выполнить().Выгрузить(); 				
		ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");		
		ТаблицаДляВыгрузки = Результат.Скопировать();
		//ТаблицаДляВыгрузки = Результат.Скопировать(, "Номер, Дата, Сотрудник, Организация,  СуммаПоДоговору, ВидРасчета, Комментарий, Ответственный, ДатаНачалаДоговора, 
		//| ДатаОкончанияДоговора, ПодразделениеОрганизации, СпособОтраженияВБУ, КодВычета, ЦФУ, Фамилия, Имя, Отчество, ФизЛицо,
		//| Контрагент, НомерДоговора, ДатаПодписания, ДатаНачалаГрафик, ДатаОкончанияГрафик, СуммаОплатыГрафик, СодержаниеГрафик, 
		//| ВидДоговораСтрока, ВидАвторскогоДоговораСтрока, ХарактерОплатыСтрока, СтатусСтрока, ЦФО, ПричинаИзмененияСтатуса, Пользователь"); 
		СообщениеОбОшибке = "";
		ДокументИзмененВИСУЗК = Ложь;
		Попытка
			ТаблицаДляВыгрузки.Колонки.Добавить("ВедомостьВыплачена");
			Для Каждого Строка Из ТаблицаДляВыгрузки Цикл
				//ВедомостьВыплачена = ВедомостьЗакрыта(Строка.Ведомость);
				//Строка.ВедомостьВыплачена = ВедомостьВыплачена;
				абс_МассивСтрок = Новый Массив;
				абс_МассивСтрок.Добавить(Строка);
				ТЗ_ПередачаДанных = ТаблицаДляВыгрузки.Скопировать(абс_МассивСтрок);
				ДокументИзмененВИСУЗК = абс_WebServiceСервер.ИнициализацияViplataZarplati("", '00010101', ЗначениеВСтрокуВнутр(ТЗ_ПередачаДанных), СообщениеОбОшибке);
				Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
					Сообщить(СообщениеОбОшибке);
					Сообщить("Не удалось скорректирован документ в базе ЕСУЗК!");
					СообщениеОбОшибке = "";
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				Если ТипЗнч(ДокументИзмененВИСУЗК) = Тип("Структура") Тогда
					Если Не ДокументИзмененВИСУЗК.Rez Тогда
						Сообщить("Не удалось скорректирован документ в базе ЕСУЗК!");
						Сообщить(ДокументИзмененВИСУЗК.Error);
						Отказ = Истина;
						Возврат;
					Иначе
						Сообщить("Документ скорректирован в базе ЕСУЗК!");
					КонецЕСли;	
				Иначе
					Сообщить("Не удалось скорректирован документ в базе ЕСУЗК!");
					Сообщить(СообщениеОбОшибке);
					Отказ = Истина;
					Возврат; 
				КонецЕсли;
			КонецЦикла;	
		Исключение	
			Сообщить(СообщениеОбОшибке);
			Сообщить("Не удалось создать/скорректирован документ в базе ЕСУЗК!");
			СообщениеОбОшибке = "";
			Отказ = Истина;
			Возврат;
		КонецПопытки; 		
	КонецЕсли;
	//\\АБС--- Гончаров 16.04.2013
КонецПроцедуры

Процедура абс_СинхронизацияВыплатНДФЛПриЗаписи(Источник, Отказ) Экспорт 	
	//АБС+++ Гончаров 16.04.2013
	Если Не Отказ И Константы.абс_СинхронизацияВыплатыЗарплаты.Получить() 
		//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
		И абс_СерверныеФункции.абс_ДаннаяБазаНеКопия()
		//\\АБС ВСТАВКА №40078 КОНЕЦ
		И Источник.Дата >= Константы.абс_ДатаНачалаСинхронизацииВыплатыЗП.Получить() Тогда  	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	""НДФЛ"" КАК ТипОплаты,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Номер КАК НомерР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата КАК ДатаР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КодБК КАК КБК,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Контрагент.Код КАК Контрагент,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Организация.абс_КодИСУЗК КАК Организация,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ДатаОплаты,
		//  |	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КодОКАТО + ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КПППлательщика  КАК ОКАТО // Ермолов 17.09.2015 000033455
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КодОКАТО + ""                    ""  КАК ОКАТО,
		|   ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КПППлательщика КАК КПП,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПоказательПериода
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога)";				
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Результат = Запрос.Выполнить().Выгрузить(); 				
		ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");		
		ТаблицаДляВыгрузки = Результат.Скопировать();
		//ТаблицаДляВыгрузки = Результат.Скопировать(, "Номер, Дата, Сотрудник, Организация,  СуммаПоДоговору, ВидРасчета, Комментарий, Ответственный, ДатаНачалаДоговора, 
		//| ДатаОкончанияДоговора, ПодразделениеОрганизации, СпособОтраженияВБУ, КодВычета, ЦФУ, Фамилия, Имя, Отчество, ФизЛицо,
		//| Контрагент, НомерДоговора, ДатаПодписания, ДатаНачалаГрафик, ДатаОкончанияГрафик, СуммаОплатыГрафик, СодержаниеГрафик, 
		//| ВидДоговораСтрока, ВидАвторскогоДоговораСтрока, ХарактерОплатыСтрока, СтатусСтрока, ЦФО, ПричинаИзмененияСтатуса, Пользователь"); 
		СообщениеОбОшибке = "";
		ДокументИзмененВИСУЗК = Ложь;
		Попытка
			ТаблицаДляВыгрузки.Колонки.Добавить("ВедомостьВыплачена");
			ОКАТОКПП = "";
			Для Каждого Строка Из ТаблицаДляВыгрузки Цикл
				//ВедомостьВыплачена = ВедомостьЗакрыта(Строка.Ведомость);
				//Строка.ВедомостьВыплачена = ВедомостьВыплачена;
				// Start Ермолов 17.09.2015 000033455
				// 			Лапин 21.09.2015 начало {{старый код:
				//Пока СтрДлина(Строка.ОКАТО) < 12 Цикл
				//	Строка.ОКАТО = Строка.ОКАТО + " ";
				//КонецЦикла;	
				// 			Лапин 21.09.2015 окончание старый код}}
				//{{новый код: 
				ОКАТОКПП = Лев((Строка.ОКАТО + "                          "),11);
				//   Лапин новый код: окончание }}
				Строка.ОКАТО = ОКАТОКПП + Строка.КПП;
				// Stop Ермолов 17.09.2015
				абс_МассивСтрок = Новый Массив;
				абс_МассивСтрок.Добавить(Строка);
				ТЗ_ПередачаДанных = ТаблицаДляВыгрузки.Скопировать(абс_МассивСтрок);
				ДокументИзмененВИСУЗК = абс_WebServiceСервер.ИнициализацияViplataZarplati("", '00010101', ЗначениеВСтрокуВнутр(ТЗ_ПередачаДанных), СообщениеОбОшибке);
				Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
					Сообщить(СообщениеОбОшибке);
					Сообщить("Не удалось скорректирован документ в базе ЕСУЗК!");
					СообщениеОбОшибке = "";
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				Если ТипЗнч(ДокументИзмененВИСУЗК) = Тип("Структура") Тогда
					Если Не ДокументИзмененВИСУЗК.Rez Тогда
						Сообщить("Не удалось скорректирован документ в базе ЕСУЗК!");
						Сообщить(ДокументИзмененВИСУЗК.Error);
						Отказ = Истина;
						Возврат;
					Иначе
						Сообщить("Документ скорректирован в базе ЕСУЗК!");
					КонецЕСли;	
				Иначе
					Сообщить("Не удалось скорректирован документ в базе ЕСУЗК!");
					Сообщить(СообщениеОбОшибке);
					Отказ = Истина;
					Возврат; 
				КонецЕсли;
			КонецЦикла;	
		Исключение	
			Сообщить(СообщениеОбОшибке);
			Сообщить("Не удалось создать/скорректирован документ в базе ЕСУЗК!");
			СообщениеОбОшибке = "";
			Отказ = Истина;
			Возврат;
		КонецПопытки; 		
	КонецЕсли;
	//\\АБС--- Гончаров 16.04.2013
КонецПроцедуры
//\\АБС--- Гончаров 17.04.2013

// АБС Новоселов+ Агентская схема
Функция ИнициализацияAgentScheme(Номер, Дата, Данные, UIN, СообщениеОбОшибке) Экспорт 	
	
	Прокси = Неопределено;   	

	Попытка
		WSОпреление = Новый WSОпределения("" + Константы.абс_АдресВебСервиса.Получить() + "AgentScheme.1cws?wsdl", "EISUP_PersonalData", "EISUP_PersonalData");
		Прокси = Новый WSПрокси(WSОпреление, "http://www.abs-soft.ru/AgentScheme", "abs_AgentScheme", "abs_AgentSchemeSoap");
	Исключение
		СообщениеОбОшибке = "WSСсылка abs_AgentScheme не найдена!";
        Возврат Ложь;
	КонецПопытки;
	
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Ложь;
	КонецЕсли;

	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";
	
	ОтветXDTO = Ложь;
	Попытка
		ОтветXDTO = Прокси.SozdatAktAgenta(Номер, Дата, Данные, UIN);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	СообщениеОбОшибке = ОтветXDTO.Error;
	Возврат ОтветXDTO.Rez; 
		
КонецФункции

Процедура ВыполнитьОбменПоДоговорам(ТекущийОбмен) Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентовИзменения.Ссылка,
	//АБС ВСТАВКА 43520  22.05.2014 12:36:16  Шамов
	|	ДоговорыКонтрагентовИзменения.Ссылка.ЭтоГруппа КАК ЭтоГруппа,
	//АБС ВСТАВКА 43520 КОНЕЦ
	|	ДоговорыКонтрагентовИзменения.Ссылка.Код КАК Код,
	|	ДоговорыКонтрагентовИзменения.Ссылка.Организация.Код КАК Организация_Код,
	|	ДоговорыКонтрагентовИзменения.Ссылка.Владелец.Код КАК Контрагент_Код,
	|	ДоговорыКонтрагентовИзменения.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.Изменения КАК ДоговорыКонтрагентовИзменения
	|ГДЕ
	|	ДоговорыКонтрагентовИзменения.Узел = &Узел");
	
	Запрос.УстановитьПараметр("Узел", ТекущийОбмен.Узел);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Прокси = Неопределено;
	
	Пока Выборка.Следующий() Цикл 
				
		Попытка
			
			//АБС ВСТАВКА 43520  22.05.2014 12:36:16  Шамов
			Если Выборка.ЭтоГруппа Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(ТекущийОбмен.Узел, Выборка.Ссылка);	
				Продолжить;
			КонецЕсли;
			//АБС ВСТАВКА 43520 КОНЕЦ
			Если Прокси = Неопределено Тогда
				
				Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_AgentScheme();	
				Если Прокси = Неопределено Тогда
		
					ВызватьИсключение "Не удалось связаться с Web-сервисом";
				КонецЕсли;

				Прокси.Пользователь = "EISUP_PersonalData";
				Прокси.Пароль = "EISUP_PersonalData";
				
			КонецЕсли;
			
			
			ОтветXDTO = Ложь;
			
			Данные = Новый Структура("Организация_Код, Контрагент_Код, Наименование", ""+Выборка.Организация_Код, ""+Выборка.Контрагент_Код, ""+Выборка.Наименование);
			ОтветXDTO = Прокси.SaveDogovor(Выборка.Код, ЗначениеВСтрокуВнутр(Данные));
			
			Если Не ОтветXDTO.Rez Тогда
				
				// Если организации нет в ИСУЗК, договор не переносим
				Если Лев(ОтветXDTO.Error, 45) = "Ошибка ИСУЗК: 
					|Не найдена организация с кодом" Тогда 
					ПланыОбмена.УдалитьРегистрациюИзменений(ТекущийОбмен.Узел, Выборка.Ссылка);
				КонецЕсли;
					
				ВызватьИсключение ОтветXDTO.Error;
				
			КонецЕсли;
			
			
			ПланыОбмена.УдалитьРегистрациюИзменений(ТекущийОбмен.Узел, Выборка.Ссылка);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				"Ошибка обмена по договору: " + Выборка.Код,
				УровеньЖурналаРегистрации.Ошибка, , ,
				ОписаниеОшибки()
			);
			
			Если Прокси = Неопределено Тогда 
				Прервать;
			Иначе 
				Прокси = Неопределено;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
// АБС Новоселов-

// АБС Сторожук
Функция ИнициализацияWebServiceCreateUpdateContractors(Данные, СоздаватьФизЛицо, СообщениеОбОшибке) Экспорт
	
	// Попытаемся подключиться к WEB-сервису
	WSПрокси = Неопределено;
		
	WSПрокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_Contractors();	
	Если WSПрокси = Неопределено Тогда
		
		СообщениеОбОшибке = "WSСсылка abs_Contractors не найдена!";
		Возврат Новый Структура("Error,Result",СообщениеОбОшибке,Ложь);
	КонецЕсли;
	
	WSПрокси.Пользователь = "EISUP_PersonalData";
	WSПрокси.Пароль = "EISUP_PersonalData";

	// Попытаемся получить XDTO фабрику для формирования пакета для отправки данных на WEB-сервис 
	WSФабрикаXDTO = WSПрокси.ФабрикаXDTO;
	
	// Попытаемся получить XDTO типы данных для формирования пакета для отправки данных на WEB-сервис 
	ТипXDTOОсновныеДанные = WSФабрикаXDTO.Тип("http://www.abs-soft_Contractors.ru", "PersonDataIndividual");
	ОсновныеДанныеXDTO = WSФабрикаXDTO.Создать(ТипXDTOОсновныеДанные);
	
	ЗаполнитьЗначенияСвойств(ОсновныеДанныеXDTO, Данные,,"Statuses,Contacts,Document,ContractorType");
	
	Если Данные.Свойство("Statuses")
	   И ТипЗнч(Данные.Statuses) = Тип("Массив") 
	   И Данные.Statuses.Количество()<>0 Тогда
		Для Каждого Status из Данные.Statuses Цикл
	    	ТипXDTOСтатус = WSФабрикаXDTO.Тип("http://www.abs-soft_Contractors.ru", "Status"); 
			СтатусДанныеXDTO = WSФабрикаXDTO.Создать(ТипXDTOСтатус);
			ЗаполнитьЗначенияСвойств(СтатусДанныеXDTO, Status);
			ОсновныеДанныеXDTO.Statuses.Добавить(СтатусДанныеXDTO);
	    КонецЦикла;
	КонецЕсли;
	
	Если Данные.Свойство("Contacts")
		И ТипЗнч(Данные.Contacts) = Тип("Массив")
		И Данные.Contacts.Количество()<>0 Тогда
		Для Каждого Contact из Данные.Contacts Цикл
	    	ТипXDTOКонтакт = WSФабрикаXDTO.Тип("http://www.abs-soft_Contractors.ru", "Contact"); 
			КонтактДанныеXDTO = WSФабрикаXDTO.Создать(ТипXDTOКонтакт);
			ЗаполнитьЗначенияСвойств(КонтактДанныеXDTO, Contact);
			ОсновныеДанныеXDTO.Contacts.Добавить(КонтактДанныеXDTO);
	    КонецЦикла;
	КонецЕсли;
	
	Если Данные.Свойство("Document")
	   И ТипЗнч(Данные.Document) = Тип ("Структура") 
	   И ЗначениеЗаполнено(Данные.Document.Date) Тогда
		ТипXDTOДокумент = WSФабрикаXDTO.Тип("http://www.abs-soft_Contractors.ru", "Document");
		ДокументДанныеXDTO = WSФабрикаXDTO.Создать(ТипXDTOДокумент);
		ЗаполнитьЗначенияСвойств(ДокументДанныеXDTO, Данные.Document);
		ОсновныеДанныеXDTO.Document = ДокументДанныеXDTO;
	КонецЕсли;
	
	Если Данные.Свойство("ContractorType")
	   И ТипЗнч(Данные.ContractorType) = Тип("Структура") Тогда
		ТипXDTOТипКонтрагента = WSФабрикаXDTO.Тип("http://www.abs-soft_Contractors.ru", "ContractorType");
		ТипКонтрагентаДанныеXDTO = WSФабрикаXDTO.Создать(ТипXDTOТипКонтрагента);
		ЗаполнитьЗначенияСвойств(ТипКонтрагентаДанныеXDTO, Данные.ContractorType);
		ОсновныеДанныеXDTO.ContractorType = ТипКонтрагентаДанныеXDTO;
	КонецЕсли;   
	
	Попытка
		РезультатXDTO = WSПрокси.CreateUpdateContractors(ОсновныеДанныеXDTO, СоздаватьФизЛицо); 
		
		Если  РезультатXDTO.PersonDataIndividual <> Неопределено Тогда
			ПерсДанные = Новый Структура("IDPerson, Name", РезультатXDTO.PersonDataIndividual.IDPerson, РезультатXDTO.PersonDataIndividual.Name);
        КонецЕсли;
		Результат = Новый Структура("PersonDataIndividual,Error,Result", ПерсДанные, РезультатXDTO.Error, РезультатXDTO.Result); 

	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		Результат = Новый Структура("Error,Result",ОписаниеОшибки(),Ложь)
	КонецПопытки;
	
	Возврат Результат; 
	
КонецФункции

Функция ИнициализацияWebServiceGetContractorsData(Данные, СообщениеОбОшибке) Экспорт
	
	// Попытаемся подключиться к WEB-сервису
	WSПрокси = Неопределено;
	WSПрокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_Contractors();	
		
	Если WSПрокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Ложь;
	КонецЕсли;
	
	WSПрокси.Пользователь = "EISUP_PersonalData";
	WSПрокси.Пароль = "EISUP_PersonalData";
	
	Попытка
		РезультатXDTO = WSПрокси.GetContractorsData(Данные); 
		
		Контакты = Новый ТаблицаЗначений;
		Контакты.Колонки.Добавить("ContactType");
		Контакты.Колонки.Добавить("ContactView");
		Контакты.Колонки.Добавить("ContactPresent");
		Контакты.Колонки.Добавить("PostCode");
		Контакты.Колонки.Добавить("Region");
		Контакты.Колонки.Добавить("Area");
		Контакты.Колонки.Добавить("City");
		Контакты.Колонки.Добавить("Village");
		Контакты.Колонки.Добавить("Street");
		Контакты.Колонки.Добавить("House");
		Контакты.Колонки.Добавить("Building");
		Контакты.Колонки.Добавить("Apartment");
		Контакты.Колонки.Добавить("HouseType");
		Контакты.Колонки.Добавить("BuildingType");
		Контакты.Колонки.Добавить("ApartmentType");
		
		Для Каждого Контакт Из  РезультатXDTO.PersonDataIndividual.Contacts Цикл
			
			НоваяСтрокаКонтакты = Контакты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтакты,  Контакт);
			
		КонецЦикла;
		
		Если РезультатXDTO.PersonDataIndividual.ContractorType <> Неопределено Тогда
			ТипКонтрагента = Новый Структура("Code,Type,PhysicalLegal");
			ЗаполнитьЗначенияСвойств(ТипКонтрагента, РезультатXDTO.PersonDataIndividual.ContractorType);
		КонецЕсли;
		
		Если РезультатXDTO.PersonDataIndividual.Document <> Неопределено Тогда
			ДокументСтруктура = Новый Структура("Type,Series,Number,DateIssue,Department,DepartmentCode,DateRegistration,Date");
			ЗаполнитьЗначенияСвойств(ДокументСтруктура, РезультатXDTO.PersonDataIndividual.Document);
		КонецЕсли;
		
		Статусы = Новый ТаблицаЗначений;
		Статусы.Колонки.Добавить("Data");
		Статусы.Колонки.Добавить("StatusName");
		Статусы.Колонки.Добавить("User");
		Статусы.Колонки.Добавить("Phone");
		Статусы.Колонки.Добавить("Komment");
		
		Для Каждого Статус Из РезультатXDTO.PersonDataIndividual.Statuses Цикл
			
			НоваяСтрокаСтатусы = Статусы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСтатусы, Статус);
			
		КонецЦикла;
		
		ПерсДанные = Новый Структура("IDContractor,IDPerson,ParentID,Name,FullName,FirstName,LastName,MiddleName,INN,KPP,OKPO,OKATO,
		| ContractorType,BirthDay,BirthPlace,PFR,Gender,Document,NonResident,Supplier,Buyer,StatusName,Statuses,Contacts");

		ЗаполнитьЗначенияСвойств(ПерсДанные, РезультатXDTO.PersonDataIndividual, ,"ContractorType,Document,Statuses,Contacts");
		
		Если ТипКонтрагента <> Неопределено Тогда
			ПерсДанные.ContractorType = ТипКонтрагента;
		КонецЕсли;
		Если ДокументСтруктура<> Неопределено Тогда
			ПерсДанные.Document = ДокументСтруктура;
		КонецЕсли;
		ПерсДанные.Statuses = Статусы;
		ПерсДанные.Contacts = Контакты;
 						
		Результат = Новый Структура("PersonDataIndividual,Error,Result", ПерсДанные, РезультатXDTO.Error, РезультатXDTO.Result); 
		
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		Результат = Новый Структура("Error,Result",ОписаниеОшибки(),Ложь)
	КонецПопытки;
	
	Возврат Результат; 

КонецФункции	

// АБС Сторожук

Функция ИнициализацияWebServiceGetPaySlip(Code, Name, DateBegin, DateEnd) Экспорт
	
	// Попытаемся подключиться к WEB-сервису
	WSПрокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_PaySlip();	
		
	Если WSПрокси = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось связаться с Web-сервисом";
		Возврат Новый Структура("Error, PaySlip", "Не удалось связаться с Web-сервисом", Неопределено);
	КонецЕсли;
	
	WSПрокси.Пользователь = "EISUP_PersonalData";
	WSПрокси.Пароль = "EISUP_PersonalData";
	
	Попытка
		РезультатXDTO = WSПрокси.GetPaySlip(Code, Name, DateBegin, DateEnd); 
		Результат = Новый Структура("Error, PaySlip", РезультатXDTO.Error, РезультатXDTO.PaySlip); 
		
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		Результат = Новый Структура("Error, PaySlip", ОписаниеОшибки(), Неопределено);
	КонецПопытки;
	
	Возврат Результат; 

КонецФункции	

Функция Инициализация_ISUZK_XMLExchange_PutData(XMLString, СтруктураРезультата = Неопределено) Экспорт
	
	Прокси = абс_ПроцедурыСПовторнымВызовом.ПолучитьWSПрокси_abs_ISUZK_XMLExchange();
    Если Прокси = Неопределено Тогда
		
		Возврат Неопределено;
	КонецЕсли;

	Прокси.Пользователь = "EISUP_PersonalData";
	Прокси.Пароль = "EISUP_PersonalData";

	Фабрика = Прокси.ФабрикаXDTO;
	
	dataXDTO = Фабрика.Создать(Фабрика.Тип("abs_XMLData", "XMLData"));

	dataXDTO.XMLString = XMLString;
	
	СтруктураРезультата = Новый Структура("Успешно,СообщениеОбОшибке", Ложь, "");
	
	Попытка 
		ОтветXDTO = Прокси.PutData(dataXDTO);
		
        СтруктураРезультата.Успешно 			= ОтветXDTO.Result;
		СтруктураРезультата.СообщениеОбОшибке 	= ОтветXDTO.Error;
		
	Исключение
		
		СтруктураРезультата.Успешно 			= Ложь;
		СтруктураРезультата.СообщениеОбОшибке   = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат СтруктураРезультата.Успешно;

КонецФункции


