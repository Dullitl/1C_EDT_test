Процедура абс_ОбменСSQL(КодНастройки, КодНастройкиФайлы = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	НастройкаОбмена = Справочники.абс_НастройкиОбменаСSQL.НайтиПоКоду(КодНастройки);
	
	НастройкаОбменаФайлами = Справочники.абс_НастройкиОбменаСSQL.НайтиПоКоду(КодНастройкиФайлы);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена)
		ИЛИ НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.абс_НастройкиОбменаСSQL.ВыполнитьОбмен(НастройкаОбмена, НастройкаОбменаФайлами);	
КонецПроцедуры 
Функция ВыполнитьПодключениеКSQL(Настройка) Экспорт
	//Возврат абс_ПроцедурыОбменаСервер.ВыполнитьПодключениеКSQL(Настройка) ;
	удачноеСоединение = Истина;
	Попытка
		ConnectionString="DRIVER={SQL Server};SERVER="+СокрЛП(Настройка.Provider)+";UID="+СокрЛП(Настройка.UserID)+";PWD="+СокрЛП(Настройка.Password)+";DATABASE="+СокрЛП(Настройка.DataSource)+";";
		Соединение=Новый COMОбъект("ADODB.Connection");
		Соединение.Open(СокрЛП(ConnectionString));
	Исключение
		Сообщить(ОписаниеОшибки());
		Соединение = 0;
		удачноеСоединение = Ложь;
	КонецПопытки; 
	  Возврат удачноеСоединение;
	
КонецФункции
Функция ЗапросВТаблицуSQL(ТекстЗапроса,Настройка) Экспорт
	  //Возврат   абс_ПроцедурыОбменаСервер.ЗапросВТаблицуSQL(ТекстЗапроса,Настройка);
	  
	Перем ТаблицаРезультат;
	Перем Соединение;
	
	Если Соединение = Неопределено Тогда
		Соединение = ВыполнитьПодключениеКSQL(Настройка);
	КонецЕсли;
	
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;	
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	
	Cmd.CommandText = ТекстЗапроса;
	Rs = Новый COMОбъект("ADODB.RecordSet"); 
	
	Попытка
		
		Rs = Cmd.Execute(); 		
		КолонкиРезультат = ТаблицаРезультат.Колонки;
		
		Для ИндексКолонки = 0 По Rs.Fields.Count - 1 Цикл
			Если КолонкиРезультат.Найти(Rs.Fields(ИндексКолонки).name) = Неопределено Тогда
				КолонкиРезультат.Добавить(Rs.Fields(ИндексКолонки).name);
			КонецЕсли;
		КонецЦикла;
		
		Если Rs.BOF = 0 Тогда
			Rs.MoveFirst();                 
			Пока Rs.EOF() = 0 do  
				
				ТекСтрокаРезультат = ТаблицаРезультат.Добавить();
				
				Для Каждого ТекКолонка Из ТаблицаРезультат.Колонки Цикл
					ТекСтрокаРезультат[ТекКолонка.Имя] = Rs.Fields(ТекКолонка.Имя).Value;
				КонецЦикла;
				
				Rs.MoveNext();  
			КонецЦикла;
		КонецЕсли;	  
		
		Rs.Close();
		
	Исключение
		
		Сообщить("Запрос не выполнен: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		
		ТаблицаРезультат.Очистить();
		
	КонецПопытки;
	
	Возврат ТаблицаРезультат;
	
КонецФункции
Функция ПрочитатЗаписиЧерезХранимыПроцедуры(НомерПоследнейЗагруженнойВерсии,СтруктураПодключения)  Экспорт
	 Возврат   абс_ПроцедурыОбменаСервер.ПрочитатЗаписиЧерезХранимыПроцедуры(НомерПоследнейЗагруженнойВерсии,СтруктураПодключения);
	//ТекстрЗапроса ="Exec "+СтруктураПодключения.DataSource+".dbo.Kontractors_sel_IDChange "+СтрЗаменить(СокрЛП(НомерПоследнейЗагруженнойВерсии),Символ(160),"");
	//
	//ТЗ = ЗапросВТаблицуSQL(ТекстрЗапроса,СтруктураПодключения);
	//ТЗ.Сортировать("ID_Change");
	//
	//Возврат ТЗ;
КонецФункции
Функция ПрочитатЗаписиЧерезХранимыПроцедурыМаксимумы(СтруктураПодключения)  Экспорт
	Возврат   абс_ПроцедурыОбменаСервер.ПрочитатЗаписиЧерезХранимыПроцедурыМаксимумы(СтруктураПодключения);                                                                                          
	//ТекстрЗапроса ="Exec "+СтруктураПодключения.DataSource+".dbo.Kontractors_sel_Max_IDChange ";
	//
	//ТЗ = ЗапросВТаблицуSQL(ТекстрЗапроса,СтруктураПодключения);
	//ТЗ.Сортировать("ID_Change");
	//
	//Возврат ТЗ;
КонецФункции
Функция ПолучитьСЗРеквизитовВыгрузкиКонтрагентов()
	СЗРеквизитов = Новый СписокЗначений;
	СЗРеквизитов.Добавить("Код");
	СЗРеквизитов.Добавить("Наименование");
	СЗРеквизитов.Добавить("НаименованиеПолное");
	СЗРеквизитов.Добавить("КодПоОКПО");
	СЗРеквизитов.Добавить("ИНН");
	СЗРеквизитов.Добавить("КПП");
	СЗРеквизитов.Добавить("Покупатель");
	СЗРеквизитов.Добавить("Поставщик");
	СЗРеквизитов.Добавить("ЮрФизЛицо");
	СЗРеквизитов.Добавить("НеЯвляетсяРезидентом");
	СЗРеквизитов.Добавить("ОКОПФ");
	СЗРеквизитов.Добавить("абс_СтатусКонтрагента");
	СЗРеквизитов.Добавить("абс_ТипыКонтрагентов");
	СЗРеквизитов.Добавить("абс_КодОКОНХ");
	СЗРеквизитов.Добавить("абс_ДатаПроверкиДЭБ");
	СЗРеквизитов.Добавить("абс_Куратор");
	СЗРеквизитов.Добавить("абс_ПричинаИзмененияСтатуса");
	
	Возврат СЗРеквизитов;
КонецФункции

Процедура ЗарегистрироватьВерсиюКонтрагента(Источник,Отказ) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЭтоКонтрагенты = Ложь;
	Попытка
		Если   Источник.Метаданные().Имя = "Контрагенты" ТОгда
			ЭтоКонтрагенты = Истина;
		КонецЕсли;
	Исключение
		Возврат;	
	КонецПопытки;
	Если ЭтоКонтрагенты = Ложь Тогда
		ВОзврат;
	КонецЕсли;
	Если Источник.ЭтоГруппа ТОгда 
		Возврат;
	КонецЕсли;
	
	Если Источник.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка ТОгда
		// Start КТТК Ермолов Е.Л.  23.06.2016 7734082
		// Возврат;
		// Stop КТТК Ермолов Е.Л.  23.06.2016
	КонецЕсли;
	
	Если Не  ЗначениеЗаполнено(Источник.абс_СтатусКонтрагента) ТОгда
		Возврат;
	КонецЕсли;
	
// +++ввв 30.09.2016 г. Просьба бухгалтерии не выносить контрагента в состоянии Налоговый контроль
	Если Источник.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.НалоговыйКонтроль Или
	//+++ Григорьев Д. - 23.03.2017 (D2017-0322-3256)
		Источник.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеПД Тогда
	//--- Григорьев Д. - 23.03.2017 (D2017-0322-3256)
		Возврат;
	КонецЕсли;
// ---ввв 30.09.2016 г.
	
	Запрос = новый запрос;
	Запрос.УстановитьПараметр("Контрагент",Источник.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	абс_ИзменениеСтатусовКонтрагентов.Период,
	               |	абс_ИзменениеСтатусовКонтрагентов.Пользователь
	               |ИЗ
	               |	РегистрСведений.абс_ИзменениеСтатусовКонтрагентов КАК абс_ИзменениеСтатусовКонтрагентов
	               |ГДЕ
	               |	абс_ИзменениеСтатусовКонтрагентов.Контрагент = &Контрагент";
	ТекТЗ = Запрос.Выполнить().Выгрузить();
	Если ТекТЗ.Количество() <=1 Тогда
		Возврат;
	КонецЕсли;
			
	НашлиНастройку = Справочники.абс_НастройкиОбменаСSQL.НайтиПоРеквизиту("ТипОбъекта","СправочникСсылка.Контрагенты");
	Если НашлиНастройку.Пустая() ТОгда
		Возврат;
	Иначе
		Если  НашлиНастройку.ВыполнятьОбмен = Ложь ТОгда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если НашлиНастройку.Узел.Пустая() Тогда
		Возврат;
	КонецЕсли;
	ПланыОбмена.ЗарегистрироватьИзменения(НашлиНастройку.Узел,Источник.Ссылка);
	
	//Теперь не забудем про основного контрагента
	Если Не  Источник.абс_ОсновнойКонтрагент.Пустая() ТОгда
		ПланыОбмена.ЗарегистрироватьИзменения(НашлиНастройку.Узел,Источник.абс_ОсновнойКонтрагент);	
	КонецЕсли;
	
КонецПроцедуры

// +++ввв 28.09.2015 г., 11.11.2015 г., 13.11.2015 г. Обмен с Аргусом

Процедура ЗаписатьВЖурналОбменаСSQL(ТекНастройка,Источник,ТекДата,ТЗЗначений) Экспорт
	РСЖ=РегистрыСведений.ввв_ЖурналВыгрузкиВTPI.СоздатьНаборЗаписей();
	РСЖ.Отбор.НастройкаВыгрузки.Установить(ТекНастройка.Ссылка);
	РСЖ.Отбор.Объект.Установить(Источник.Ссылка);
	РСЖ.Отбор.ДатаСобытия.Установить(ТекДата);
	новСтрока=РСЖ.Добавить();
	новСтрока.НастройкаВыгрузки=ТекНастройка.Ссылка;
	новСтрока.Объект=Источник.Ссылка;
	новСтрока.ДатаСобытия=ТекДата;
	ПреффиксТаблицы=СокрЛП(ТекНастройка.ИмяБазыДанныхSQL)+"."+СокрЛП(ТекНастройка.ИмяТаблицыSQL);
	ТекстЗапроса ="Exec "+ПреффиксТаблицы+"_ins_ALL ";
	ТекстFullName="";
	ТекстЗапросаПосле="";
	ФлагНачала=Истина;
	ФлагПосле=Ложь;
	Для Каждого СтрокаТЗЗначений из ТЗЗначений  Цикл
		Если  СтрЗаменить(СтрокаТЗЗначений.ПутьКДаннымВSQL,ПреффиксТаблицы+".","")= "ID_Change" Тогда
			Продолжить;
		ИначеЕсли  СтрЗаменить(СтрокаТЗЗначений.ПутьКДаннымВSQL,ПреффиксТаблицы+".","")= "CreateDate" Тогда
			Продолжить;
		Иначе
			_знч=?(ФлагНачала,"",", ")+СтрЗаменить(СокрЛП(СтрокаТЗЗначений.Значение),Символ(160),"");
			Если ФлагПосле Тогда
				ТекстЗапросаПосле = ТекстЗапросаПосле+_знч;
			ИначеЕсли  СтрЗаменить(СтрокаТЗЗначений.ПутьКДаннымВSQL,ПреффиксТаблицы+".","")= "Full_Name" Тогда
				ФлагПосле=Истина;
				ТекстFullName = _знч;
			Иначе
				ТекстЗапроса = ТекстЗапроса+_знч;
			КонецЕсли;
		КонецЕсли;
		ФлагНачала=Ложь;
	КонецЦикла;
	ДельтаЗапроса=СтрДлина(ТекстЗапроса+ТекстFullName+ТекстЗапросаПосле)-Константы.ввв_ЗначениеvarcharдрайвераODBC_MSSQL.Получить();
	Если ДельтаЗапроса>0 Тогда
		_знч=ТекстFullName;
		_с0=Прав(_знч,1);
		ТекстFullName=Лев(_знч,СтрДлина(_знч)-1-ДельтаЗапроса)+_с0;
	КонецЕсли;
	новСтрока.Запрос=ТекстЗапроса+ТекстFullName+ТекстЗапросаПосле;
	новСтрока.Ошибка="";
	новСтрока.ДатаВыгрузки=Дата(1,1,1);
	РСЖ.Записать();
КонецПроцедуры

Функция НайтиНастройкуОбменаСSQL(пТипОбъекта, ФлагАргус=Истина) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
				 |	абс_НастройкиОбменаСSQL.Ссылка
				 |ИЗ
				 |	Справочник.абс_НастройкиОбменаСSQL КАК абс_НастройкиОбменаСSQL
				 |ГДЕ
				 |	ПОДСТРОКА(абс_НастройкиОбменаСSQL.Наименование, 1, 7) "+?(ФлагАргус,"=","<>")+" ""000001.""
				 |			И абс_НастройкиОбменаСSQL.ТипОбъекта = """+пТипОбъекта+"""";
	НашлиНастройку = Запрос.Выполнить().Выбрать();
	Если НЕ НашлиНастройку.Следующий() Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ НашлиНастройку.Ссылка.ВыполнятьОбмен Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НашлиНастройку.Ссылка.Узел.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат НашлиНастройку.Ссылка;
КонецФункции
// +++ввв 03.10.2016 г.
Процедура ЗарегистрироватьВерсиюСправочника(Источник,ТипТаблицы,ТипИсточника,Отказ)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЭтоТипИсточника = Ложь;
	Попытка
		Если Источник.Метаданные().Имя = ТипТаблицы ТОгда
			ЭтоТипИсточника = Истина;
		КонецЕсли;
	Исключение
		Возврат;	
	КонецПопытки;
	Если ЭтоТипИсточника = Ложь Тогда
		ВОзврат;
	КонецЕсли;
	Если Источник.ЭтоГруппа ТОгда 
		Возврат;
	КонецЕсли;
	НашлиНастройку=НайтиНастройкуОбменаСSQL(ТипИсточника);
	ТекОбъект=Источник;
	Если НашлиНастройку=Неопределено Тогда
		Возврат;
	КонецЕсли;
// +++ввв 03.10.2016 г.	
	УсловиеИсключения=Ложь;
	Если НЕ ПустаяСтрока(СокрЛП(НашлиНастройку.ttk_Исключение)) Тогда
		Попытка
			Выполнить(СокрЛП(НашлиНастройку.ttk_Исключение));
		Исключение
			//Сообщить(1);
		КонецПопытки;
		Если УсловиеИсключения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
// ---ввв 03.10.2016 г.	
	нТДата=ТекущаяДата();
// Записать в регистр сведений ввв_ЖурналВыгрузкиВTPI
	СЗРеквизитовПоиска = новый СписокЗначений;
	ТЗСоответствий = Справочники.абс_НастройкиОбменаСSQL.ПолучитьТЗСоответствийДляЗаписи(НашлиНастройку,СЗРеквизитовПоиска,Истина);
	ТекСтруктура = Новый Структура;
	ТекСтруктура.Вставить("Объект",Источник);
	ТЗЗначений = Справочники.абс_НастройкиОбменаСSQL.ПолучитьТЗЗначенийПоОбъектуВ1Версия2(ТЗСоответствий,ТекСтруктура,Ложь);
	Если ТЗЗначений=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаписатьВЖурналОбменаСSQL(НашлиНастройку,Источник,нТДата,ТЗЗначений);
КонецПроцедуры

// по ОСам

Процедура ЗарегистрироватьВерсиюОсновногоСредства(Источник,Отказ) Экспорт
	ЗарегистрироватьВерсиюСправочника(Источник,"ОсновныеСредства","СправочникСсылка.ОсновныеСредства",Отказ);
КонецПроцедуры
// ---ввв 03.10.2016 г.
// по Номенклатурам
Процедура ЗарегистрироватьВерсиюНоменклатура(Источник,Отказ) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЭтоОСы = Ложь;
	Попытка
		Если Источник.Метаданные().Имя = "Номенклатура" ТОгда
			ЭтоОСы = Истина;
		КонецЕсли;
	Исключение
		Возврат;	
	КонецПопытки;
	Если ЭтоОСы = Ложь Тогда
		ВОзврат;
	КонецЕсли;
	Если Источник.ЭтоГруппа ТОгда 
		Возврат;
	КонецЕсли;
	
//	Источник=Справочники.Номенклатура.НайтиПоКоду().ПолучитьОбъект();
	
	Если Источник.абс_НеИспользовать Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.абс_СтатусНоменклатуры=Перечисления.абс_СтатусыНоменклатуры.Использование ИЛИ Источник.абс_СтатусНоменклатуры=Перечисления.абс_СтатусыНоменклатуры.Архив Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	НашлиНастройку=НайтиНастройкуОбменаСSQL("СправочникСсылка.Номенклатура");
	Если НашлиНастройку=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
// +++ввв 23.12.2015 г.
	Если ПустаяСтрока(Источник.Код) Тогда  // не пустой код номенклатуры
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Источник.Наименование) Тогда // не пустое наименование номенклатуры
		Возврат;
	КонецЕсли;
// ---ввв 23.12.2015 г.

	нТДата=ТекущаяДата();
// Записать в регистр сведений ввв_ЖурналВыгрузкиВTPI
	СЗРеквизитовПоиска = новый СписокЗначений;
	ТЗСоответствий = Справочники.абс_НастройкиОбменаСSQL.ПолучитьТЗСоответствийДляЗаписи(НашлиНастройку,СЗРеквизитовПоиска,Истина);
	ТекСтруктура = Новый Структура;
	ТекСтруктура.Вставить("Объект",Источник);
	ТЗЗначений = Справочники.абс_НастройкиОбменаСSQL.ПолучитьТЗЗначенийПоОбъектуВ1Версия2(ТЗСоответствий,ТекСтруктура,Ложь);
	ЗаписатьВЖурналОбменаСSQL(НашлиНастройку,Источник,нТДата,ТЗЗначений);
КонецПроцедуры

// по ДоговорамКонтрагентов
Процедура ЗарегистрироватьВерсиюДоговорыКонтрагентов(Источник,Отказ) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЭтоОСы = Ложь;
	Попытка
		Если Источник.Метаданные().Имя = "ДоговорыКонтрагентов" ТОгда
			ЭтоОСы = Истина;
		КонецЕсли;
	Исключение
		Возврат;	
	КонецПопытки;
	Если ЭтоОСы = Ложь Тогда
		ВОзврат;
	КонецЕсли;
	Если Источник.ЭтоГруппа ТОгда 
		Возврат;
	КонецЕсли;
	
//	Источник=Справочники.ДоговорыКонтрагентов.НайтиПоКоду().ПолучитьОбъект();
	
	Если Источник.абс_ТипДоговора=Перечисления.абсТипыДоговоров.Договор ИЛИ Источник.абс_ТипДоговора=Перечисления.абсТипыДоговоров.ДополнительноеСоглашение Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Источник.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Или Источник.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Источник.абс_Инвестиционный Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.абс_Конфиденциальный Тогда
		Возврат;
	КонецЕсли;
	
	НашлиНастройку=НайтиНастройкуОбменаСSQL("СправочникСсылка.ДоговорыКонтрагентов");
	Если НашлиНастройку=Неопределено Тогда
		Возврат;
	КонецЕсли;
// +++ввв 20.11.2015 г.
	Если Источник.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Закрыт ИЛИ
		 Источник.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Закрытие ИЛИ
		 Источник.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ
		 Источник.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.КорректировкаРеквизитовДоговора Тогда
	Иначе
		Возврат;
	КонецЕсли;
// ---ввв
// +++ввв 23.12.2015 г.
	Если ПустаяСтрока(Источник.Код) Тогда
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Источник.Номер) Тогда
		Возврат;
	КонецЕсли;
// ---ввв 23.12.2015 г.
	
	нТДата=ТекущаяДата();
// Записать в регистр сведений ввв_ЖурналВыгрузкиВTPI
	СЗРеквизитовПоиска = новый СписокЗначений;
	ТЗСоответствий = Справочники.абс_НастройкиОбменаСSQL.ПолучитьТЗСоответствийДляЗаписи(НашлиНастройку,СЗРеквизитовПоиска,Истина);
	ТекСтруктура = Новый Структура;
	ТекСтруктура.Вставить("Объект",Источник);
	ТЗЗначений = Справочники.абс_НастройкиОбменаСSQL.ПолучитьТЗЗначенийПоОбъектуВ1Версия2(ТЗСоответствий,ТекСтруктура,Ложь);
// Подстановки сложноформируемых полей
// 20.11.2015 г.
// Для Договоров контрагентов - Status
	ПреффиксТаблицы=СокрЛП(НашлиНастройку.ИмяБазыДанныхSQL)+"."+СокрЛП(НашлиНастройку.ИмяТаблицыSQL)+".";
	
	нСтр=ТЗЗначений.Найти(ПреффиксТаблицы+"Status","ПутьКДаннымВSQL");
	Если нСтр<>Неопределено Тогда
		пСтатус="";
		Если Источник.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Закрыт Тогда
			пСтатус="Закрыт";
		ИначеЕсли Источник.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Закрытие Тогда
			пСтатус="Закрытие";
		ИначеЕсли Источник.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Исполнение Тогда
			пСтатус="Активный";
		ИначеЕсли Источник.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.КорректировкаРеквизитовДоговора Тогда
			пСтатус="Изменение реквизитов договора";
		КонецЕсли;
		нСтр.Значение="'"+пСтатус+"'";
	КонецЕсли;
	
	// {{ТТК Лапин А. IT-Dev № D2016-0922-2987 28.09.2016 начало
	//напрямую в справочнике сделал, здесь дублирую
	//  код из поля «Смигрирован в» из карточки договора
	нСтр=ТЗЗначений.Найти(ПреффиксТаблицы+"ID_migr","ПутьКДаннымВSQL");
	Если нСтр<>Неопределено Тогда
		нСтр.Значение="'"+СокрЛП(Строка(?(ЗначениеЗаполнено(Источник.ДоговорПослеМиграции) <> Неопределено, Источник.ДоговорПослеМиграции.Код,"")))+"'";
	КонецЕсли;
	// }}ТТК Лапин А. IT-Dev № D2016-0922-2987 28.09.2016 окончание

ЗаписатьВЖурналОбменаСSQL(НашлиНастройку,Источник,нТДата,ТЗЗначений);
КонецПроцедуры
// ---ввв

// АБС Новоселов+ обнен договорами с ИСУЗК
Процедура ЗарегистрироватьВерсиюДоговора(Источник,Отказ) Экспорт	
				
// +++ввв 28.09.2015
//	НашлиНастройку = Справочники.абс_НастройкиОбменаСSQL.НайтиПоРеквизиту("ТипОбъекта","СправочникСсылка.ДоговорыКонтрагентов");
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	абс_НастройкиОбменаСSQL.Ссылка
	             |ИЗ
	             |	Справочник.абс_НастройкиОбменаСSQL КАК абс_НастройкиОбменаСSQL
	             |ГДЕ
	             |	ПОДСТРОКА(абс_НастройкиОбменаСSQL.Наименование, 1, 7) <> ""000001.""
	             |			И абс_НастройкиОбменаСSQL.ТипОбъекта = ""СправочникСсылка.ДоговорыКонтрагентов""";
	НашлиНастройку = Запрос.Выполнить().Выбрать();

	Если НЕ НашлиНастройку.Следующий() Тогда
		Возврат;
	ИначеЕсли НЕ НашлиНастройку.Ссылка.ВыполнятьОбмен Тогда
		Возврат;
	КонецЕсли;
// ---ввв
	
	Если НашлиНастройку.Узел.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.ЗарегистрироватьИзменения(НашлиНастройку.Узел, Источник);
		
КонецПроцедуры
// АБС Новоселов-

Процедура ЗарегистрироватьВерсиюНоменклатуры(Источник,Отказ) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Если Источник.ЭтоГруппа ТОгда 
		Возврат;
	КонецЕсли;
	Если Источник.абс_НоменклатураДЗОилиВнешнейСистемы = Ложь ТОгда
		Возврат;
	КонецЕсли;
	Если Не  ЗначениеЗаполнено(Источник.абс_СтатусНоменклатуры) ТОгда
		Возврат;
	КонецЕсли;
	Запрос = новый запрос;
	Запрос.УстановитьПараметр("Номенклатура",Источник.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	абс_ИзменениеСтатусовНоменклатуры.Период,
	               |	абс_ИзменениеСтатусовНоменклатуры.Исполнитель
	               |ИЗ
	               |	РегистрСведений.абс_ИзменениеСтатусовНоменклатуры КАК абс_ИзменениеСтатусовНоменклатуры
	               |ГДЕ
	               |	абс_ИзменениеСтатусовНоменклатуры.Номенклатура = &Номенклатура";
	ТекТЗ = Запрос.Выполнить().Выгрузить();
	Если ТекТЗ.Количество() <=1 Тогда
		Возврат;
	КонецЕсли;
	
// +++ввв 28.09.2015
//	НашлиНастройку = Справочники.абс_НастройкиОбменаСSQL.НайтиПоРеквизиту("ТипОбъекта","СправочникСсылка.Номенклатура");
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	абс_НастройкиОбменаСSQL.Ссылка
	             |ИЗ
	             |	Справочник.абс_НастройкиОбменаСSQL КАК абс_НастройкиОбменаСSQL
	             |ГДЕ
	             |	ПОДСТРОКА(абс_НастройкиОбменаСSQL.Наименование, 1, 7) <> ""000001.""
	             |			И абс_НастройкиОбменаСSQL.ТипОбъекта = ""СправочникСсылка.Номенклатура""";
	НашлиНастройку = Запрос.Выполнить().Выбрать();
	
	Если НЕ НашлиНастройку.Следующий() Тогда
		Возврат;
	ИначеЕсли НЕ НашлиНастройку.Ссылка.ВыполнятьОбмен Тогда
		Возврат;
	КонецЕсли;
// ---ввв
	Если НашлиНастройку.Узел.Пустая() Тогда
		Возврат;
	КонецЕсли;
	//Теперь посмотрим последнюю версию номенклатуры
	Запрос.Текст = "ВЫБРАТЬ
	               |	абс_ВерсииНоменклатурыСрезПоследних.ХранилищеСтруктура
	               |ИЗ
	               |	РегистрСведений.абс_ВерсииНоменклатуры.СрезПоследних КАК абс_ВерсииНоменклатурыСрезПоследних
	               |ГДЕ
	               |	абс_ВерсииНоменклатурыСрезПоследних.Номенклатура = &Номенклатура";
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если  ТЗ.Количество() <> 0 ТОгда
		СТруктураРеквизитов = ПолучитьСТруктуруРеквизитовНоменклатуры(Источник.Ссылка);
		СтруктураПрежняя = ТЗ[0].ХранилищеСтруктура.Получить();
		Если СТруктурыНеРАвны(СТруктураРеквизитов,СтруктураПрежняя) ТОгда
			ТекНабор = РегистрыСведений.абс_ВерсииНоменклатуры.СоздатьНаборЗаписей();
			НовЗапись = ТекНабор.Добавить();
			НовЗапись.Номенклатура = Источник.Ссылка;
			НовЗапись.Период = ТекущаяДата();
			СТруктураРеквизитов = ПолучитьСТруктуруРеквизитовНоменклатуры(Источник.Ссылка);
			
			НовЗапись.ХранилищеСтруктура = новый ХранилищеЗначения(СТруктураРеквизитов);
			//Попытка
				ТекНабор.записать(Ложь);
			//Исключение
			//КонецПопытки;	
			
			Если  не   Источник.Ссылка.абс_ОсновнаяНоменклатура.Пустая() ТОгда
				ТекНабор = РегистрыСведений.абс_ВерсииНоменклатуры.СоздатьНаборЗаписей();
				НовЗапись = ТекНабор.Добавить();
				НовЗапись.Номенклатура = Источник.Ссылка.абс_ОсновнаяНоменклатура;
				НовЗапись.Период = ТекущаяДата();
				СТруктураРеквизитов = ПолучитьСТруктуруРеквизитовНоменклатуры(Источник.Ссылка.абс_ОсновнаяНоменклатура);
				
				НовЗапись.ХранилищеСтруктура = новый ХранилищеЗначения(СТруктураРеквизитов);
			//Попытка
				ТекНабор.записать(Ложь);		
			КонецЕсли;
			
		 КонецЕсли;
	Иначе //То просто регистрируем
		
		ТекНабор = РегистрыСведений.абс_ВерсииНоменклатуры.СоздатьНаборЗаписей();
		НовЗапись = ТекНабор.Добавить();
		НовЗапись.Номенклатура = Источник.Ссылка;
		НовЗапись.Период = ТекущаяДата();
		СТруктураРеквизитов = ПолучитьСТруктуруРеквизитовНоменклатуры(Источник.Ссылка);
		
		НовЗапись.ХранилищеСтруктура = новый ХранилищеЗначения(СТруктураРеквизитов);
		//Попытка
			ТекНабор.записать(Ложь);
		//Исключение
		//КонецПопытки;	
		
		
		Если  не   Источник.Ссылка.абс_ОсновнаяНоменклатура.Пустая() ТОгда
			
			ТекНабор = РегистрыСведений.абс_ВерсииНоменклатуры.СоздатьНаборЗаписей();
			НовЗапись = ТекНабор.Добавить();
			НовЗапись.Номенклатура = Источник.Ссылка.абс_ОсновнаяНоменклатура;
			НовЗапись.Период = ТекущаяДата();
			СТруктураРеквизитов = ПолучитьСТруктуруРеквизитовНоменклатуры(Источник.Ссылка.абс_ОсновнаяНоменклатура);
			
			НовЗапись.ХранилищеСтруктура = новый ХранилищеЗначения(СТруктураРеквизитов);
		//Попытка
			ТекНабор.записать(Ложь);		
		КонецЕсли;
		
	КонецЕсли;
	
	
		
	
КонецПроцедуры
Функция СТруктурыНеРАвны(Стр1,Стр2)
	
	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить("Код");
	МассивСтруктур.Добавить("Наименование");
	МассивСтруктур.Добавить("НаименованиеПолное");
	МассивСтруктур.Добавить("ЕдиницаИзмерения");
	МассивСтруктур.Добавить("ВестиУчетПоСериям");
	МассивСтруктур.Добавить("ВестиПартионныйУчетПоСериям");
	МассивСтруктур.Добавить("ВидНоменклатуры");
	МассивСтруктур.Добавить("Статус");
	МассивСтруктур.Добавить("Скрытый");
	МассивСтруктур.Добавить("ВестиУчетПоХарактеристикам");
	МассивСтруктур.Добавить("Артикул");
	МассивСтруктур.Добавить("COMCODE");
	МассивСтруктур.Добавить("ОсновнаяНоменклатура");
	МассивСтруктур.Добавить("NDS");
	МассивСтруктур.Добавить("ПричинаИзмененияСтатуса");
	МассивСтруктур.Добавить("ДатаИзмененияСтатуса");
	
	

	Для Каждого ТЕкЗнач из МассивСтруктур Цикл
		
		Попытка  
			Если Стр1[ТЕкЗнач] <> Стр2[ТЕкЗнач] ТОгда
				Возврат Истина;
			КонецЕсли;
		Исключение
			Возврат Истина;
		КонецПопытки;
		
	КонецЦикла;
	Возврат Ложь;	
КонецФункции
Функция  ПолучитьСТруктуруРеквизитовНоменклатуры(Ссылка)
	
	СтруктураРеквизитов = Новый Структура;     
	СтруктураРеквизитов.Вставить("Код",Ссылка.Код);
	СтруктураРеквизитов.Вставить("Наименование",Ссылка.Наименование);
	СтруктураРеквизитов.Вставить("НаименованиеПолное",Ссылка.НаименованиеПолное);
	СтруктураРеквизитов.Вставить("ЕдиницаИзмерения",Ссылка.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Наименование);
	СтруктураРеквизитов.Вставить("ВестиУчетПоСериям",?(Ссылка.ВестиУчетПоСериям,1,0));
	СтруктураРеквизитов.Вставить("ВестиПартионныйУчетПоСериям",?(Ссылка.ВестиПартионныйУчетПоСериям,1,0));
	СтруктураРеквизитов.Вставить("ВидНоменклатуры",Ссылка.ВидНоменклатуры.Наименование);
	СтруктураРеквизитов.Вставить("Статус",Ссылка.абс_СтатусНоменклатуры);
	СтруктураРеквизитов.Вставить("Скрытый",?(Ссылка.абс_Скрытая,1,0));
	СтруктураРеквизитов.Вставить("ВестиУчетПоХарактеристикам",?(Ссылка.ВестиУчетПоХарактеристикам,1,0));
	СтруктураРеквизитов.Вставить("Артикул",Ссылка.Артикул);
	СтруктураРеквизитов.Вставить("COMCODE",Ссылка.абс_COMCODE);
	СтруктураРеквизитов.Вставить("ОсновнаяНоменклатура",?(Ссылка.абс_ОсновнаяНоменклатура.Пустая(),"",Ссылка.абс_ОсновнаяНоменклатура.Код));
	СтруктураРеквизитов.Вставить("NDS",Ссылка.СтавкаНДС);
	СтруктураРеквизитов.Вставить("ПричинаИзмененияСтатуса",Ссылка.абс_ПричинаИзмененияСтатуса);
	СтруктураРеквизитов.Вставить("ДатаИзмененияСтатуса",ТекущаяДата());
	
	
	Возврат СтруктураРеквизитов;	
КонецФункции

Функция ВыполнитьЗапросНаСервере(ТекстЗапроса,Настройка) Экспорт
	Возврат абс_ПроцедурыОбменаСервер.ЗапросВТаблицуSQL(ТекстЗапроса,Настройка);
КонецФункции


Процедура ПередЗаписьюДокументов(Источник,Отказ, РежимЗаписи, РежимПроведения)  Экспорт
	
	Возврат;
	
	Если Константы.абс_ОтключитьКонтрольЗаписиДокументовИСправочниковСактивнымКонтрагентом.Получить()  ТОгда
		Возврат;	
	КонецЕсли;
	Если РежимЗаписи <> РежимЗаписиДокумента.Запись  и РежимЗаписи <> РежимЗаписиДокумента.Проведение   Тогда
		Возврат;	
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка  ТОгда
		Возврат;
	КонецЕсли;
	Если Отказ ТОгда
		ВОзврат;
	КонецЕсли;
	Если  ( Источник.Метаданные().Имя = "абс_ЗаявкаНаИзменениеРеквизитовКонтрагента" )
		  Или  ( Источник.Метаданные().Имя = "абс_ЗакупочныйЗаказ" )
																					ТОгда
	КонецЕсли;
	ТекИмяМетаданных = Источник.Метаданные().Имя ;
	
	ЗАпрос = Новый запрос;
	ЗАпрос.УстановитьПараметр("ТипДокументы","Документы");
	ЗАпрос.УстановитьПараметр("ВидМетаданных",ТекИмяМетаданных) ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ВидМетаданных
	|ИЗ
	|	РегистрСведений.АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов КАК АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов
	|ГДЕ
	|	АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ТипМетаданных = &ТипДокументы
	|	И АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.НеКонтролировать = ИСТИНА
	|	И АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ВидМетаданных = &ВидМетаданных";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() <> 0 ТОгда
		Возврат;
	КонецЕсли;
	
	ТИпКонтрагентаСсылка = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка());
	ТекМетаданные = Источник.Метаданные().Имя;
	
	СЗОшибок = Новый СписокЗначений;
	Для Каждого Реквизиты из Источник.Метаданные().Реквизиты Цикл
		
		Если ТипЗнч(Источник[Реквизиты.Имя]) =   ТИпКонтрагентаСсылка Тогда
			
		  Если ЗначениеЗаполнено(Источник[Реквизиты.Имя]) 
				И Источник[Реквизиты.Имя].Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.Активный
				И Источник[Реквизиты.Имя].Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов		ТОгда 
				СЗОшибок.Добавить("Реквизит: " +	Реквизиты.Синоним+"  - выбраный контрагент не является активным или не в статусе изменение информации о контрагенте!");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если  СЗОшибок.Количество() <> 0 ТОгда
		Для Каждого СТрокаСЗ из СЗОшибок Цикл
			Сообщить(СТрокаСЗ.Значение);	
		КонецЦикла;
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//Если  Источник.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено ТОгда
	//	Если ТипЗнч(Источник["Контрагент"].Ссылка) =  ТипЗнч(Справочники.Контрагенты.ПустаяСсылка())  ТОгда
	//		Если  Источник["Контрагент"].Абс_СТатусКонтрагента <>Перечисления.абсСтатусыКонтрагентов.Активный ТОгда
	//			Сообщить("Выбраный контрагент не является Активным!!!");
	//			Отказ = Истина;
	//			Возврат;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли
	
	// Вставить содержимое обработчика.
КонецПРоцедуры
	
Процедура ПриЗаписиДоговора(Источник,Отказ)  Экспорт
	
	//АБС ВСТАВКА 35566  28.11.2013 17:17:10  Поставка
	Возврат;
	//АБС ВСТАВКА 35566 КОНЕЦ 
	
	Если Константы.абс_ОтключитьКонтрольЗаписиДокументовИСправочниковСактивнымКонтрагентом.Получить()  ТОгда
		Возврат;	
	КонецЕсли;	
	
	Если Источник.ОбменДанными.Загрузка  ТОгда
		Возврат;
	КонецЕсли;
	
	Если Отказ ТОгда
		ВОзврат;
	КонецЕсли;
	
	
	ТекМетаданне = Источник.Ссылка.Метаданные();
	
	Если   (ТекМетаданне.Имя =   "ХранилищеДополнительнойИнформации") или  ТекМетаданне.Имя  = "Контрагенты" ТОгда
		Возврат;
	КонецЕсли;
	
		
	ТекИмяМетаданных = Источник.Метаданные().Имя ;
	
	ЗАпрос = Новый запрос;
	ЗАпрос.УстановитьПараметр("ТипДокументы","Справочники");
	ЗАпрос.УстановитьПараметр("ВидМетаданных",ТекИмяМетаданных) ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ВидМетаданных
	|ИЗ
	|	РегистрСведений.АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов КАК АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов
	|ГДЕ
	|	АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ТипМетаданных = &ТипДокументы
	|	И АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.НеКонтролировать = ИСТИНА
	|	И АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ВидМетаданных = &ВидМетаданных";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() <> 0 ТОгда
		Возврат;
	КонецЕсли;
	
	ТИпКонтрагентаСсылка = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка());
	ТекМетаданные = Источник.Метаданные().Имя;
	
	СЗОшибок = Новый СписокЗначений;
	Для Каждого Реквизиты из Источник.Метаданные().Реквизиты Цикл
		
		Если ТипЗнч(Источник[Реквизиты.Имя]) =   ТИпКонтрагентаСсылка Тогда
			
			Если ЗначениеЗаполнено(Источник[Реквизиты.Имя]) 
				И Источник[Реквизиты.Имя].Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.Активный
				И Источник[Реквизиты.Имя].Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов		ТОгда 
				СЗОшибок.Добавить("Реквизит: " +	Реквизиты.Синоним+"  - выбраный контрагент не является активным или не в статусе изменение информации о контрагенте!");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	Если  СЗОшибок.Количество() <> 0 ТОгда
		Для Каждого СТрокаСЗ из СЗОшибок Цикл
			Сообщить(СТрокаСЗ.Значение);	
		КонецЦикла;
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	

	
	
КонецПРоцедуры

// +++ввв 05.10.2016 г.

Процедура ПроверитьВебСервисомФНС(ТаблКонтров,Отказ)
	РазмерПорции = ОбщегоНазначенияСервер.ПроверкаКонтрагентовСпискомНаИФНС();
	// Разбиваем всю таблицу на блоки запросов.
	КолКонтров=ТаблКонтров.Количество();
	МинимальныйНомерКонтрагента=0;
	МаксимальныйНомерКонтрагента=Мин(РазмерПорции-1,КолКонтров-1);
	// Выполняем несколько запросов. В каждом запросе не более 10000 строк.
	//инд=1;
	ДанныеКонтрагентов=Новый ТаблицаЗначений;
	ДанныеКонтрагентов.Колонки.Добавить("ИНН");
	ДанныеКонтрагентов.Колонки.Добавить("КПП");
	ДанныеКонтрагентов.Колонки.Добавить("Дата");
	ДанныеКонтрагентов.Колонки.Добавить("Состояние");
	Пока МинимальныйНомерКонтрагента<КолКонтров Цикл 
		// подготовить таблицу на 10000 строк
		ДанныеКонтрагентов.Очистить();
		//индП=инд;
		Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
			//Состояние("Проверяется строка "+инд+" из "+КолКонтров);
			//инд=инд+1;
			ДанныеКонтрагента=ДанныеКонтрагентов.Добавить();
			ДанныеКонтрагента.ИНН = ТаблКонтров[ИндексТекущегоКонтрагента].ИНН;
			ДанныеКонтрагента.КПП = ТаблКонтров[ИндексТекущегоКонтрагента].КПП;
			ДанныеКонтрагента.Дата = ТаблКонтров[ИндексТекущегоКонтрагента].Дата;
			ДанныеКонтрагента.Состояние = ТаблКонтров[ИндексТекущегоКонтрагента].Состояние;
		КонецЦикла;
		// обратиться к ИФНС
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеКонтрагентов);
		//Состояние("Ожидается ответ от сервиса ИФНС...");
		ОшибкаСтр=ОбщегоНазначенияСервер.ПроверкаКонтрагентовСпискомНаИФНС(АдресХранилища);
		Если ПустаяСтрока(ОшибкаСтр) Тогда
			ДанныеКонтрагентов = ПолучитьИзВременногоХранилища(АдресХранилища);
		Иначе
			//Предупреждение(ОшибкаСтр);
			Прервать;
		КонецЕсли;
		// считать данные из проверочной таблицы в основную
		йинд=0;
		Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
			//Состояние("Получен ответ из ИФНС по строке "+индП+" из "+КолКонтров);
			//индП=индП+1;
			ТаблКонтров[ИндексТекущегоКонтрагента].Состояние = ДанныеКонтрагентов[йинд].Состояние;
			йинд=йинд+1;
		КонецЦикла;
		МинимальныйНомерКонтрагента=МинимальныйНомерКонтрагента+РазмерПорции;
		МаксимальныйНомерКонтрагента=МаксимальныйНомерКонтрагента+РазмерПорции;
		МаксимальныйНомерКонтрагента=Мин(КолКонтров-1,МаксимальныйНомерКонтрагента);
	КонецЦикла;
	Если НЕ ПустаяСтрока(ОшибкаСтр) Тогда
		Отказ=ОшибкаСтр;
	КонецЕсли;
КонецПроцедуры

Процедура ttk_ПроверкаКонтрагентовНаСервисеИФНС() Экспорт
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	//Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
	//	Возврат;	
	//КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ
	ДатаПроверки=абс_СерверныеФункции.ПолучитьДатуСервера();
	// Получить таблицу проверяемых контрагентов
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	             |	Контрагенты.Ссылка.Код КАК КодКонтрагента,
	             |	Контрагенты.Ссылка КАК Контрагент,
	             |	Контрагенты.ИНН КАК ИНН,
	             |	ВЫБОР
	             |		КОГДА Контрагенты.КПП = ""0""
	             |			ТОГДА """"
	             |		ИНАЧЕ Контрагенты.КПП
	             |	КОНЕЦ КАК КПП,
	             |	"""" КАК Дата,
	             |	ЕСТЬNULL(ttk_ПроверкаКонтрагентовНаСервисеИФНССрезПоследних.СтатусКонтрагентаВИФНС,НЕОПРЕДЕЛЕНО) КАК СостояниеТекущее,
	             |	ЗНАЧЕНИЕ(Перечисление.ttk_СостоянияСуществованияКонтрагента.ПустаяСсылка) КАК Состояние
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ttk_ПроверкаКонтрагентовНаСервисеИФНС.СрезПоследних(&ТекущаяДата, ) КАК ttk_ПроверкаКонтрагентовНаСервисеИФНССрезПоследних
	             |		ПО (ttk_ПроверкаКонтрагентовНаСервисеИФНССрезПоследних.Контрагент = Контрагенты.Ссылка)
	             |ГДЕ
	             |	НЕ Контрагенты.ЭтоГруппа
	             |	И НЕ Контрагенты.ПометкаУдаления
	             |	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)
	             |	И НЕ Контрагенты.абс_ТипыКонтрагентов = ЗНАЧЕНИЕ(Справочник.абс_ТипыКонтрагентов.ФизическиеЛица)
	             |	И НЕ Контрагенты.абс_ТипыКонтрагентов = ЗНАЧЕНИЕ(Справочник.абс_ТипыКонтрагентов.ЮридическоеЛицоНерезидентНеоператор)
	             |	И НЕ Контрагенты.абс_ТипыКонтрагентов = ЗНАЧЕНИЕ(Справочник.абс_ТипыКонтрагентов.ЮридическоеЛицоНерезидентОператор)";
	Запрос.УстановитьПараметр("ТекущаяДата",ДатаПроверки);
	Контры=Запрос.Выполнить().Выгрузить();
	// нормализуем ИНН и КПП
	Для каждого йСтр Из Контры Цикл
		йСтр.ИНН=СокрЛП(йСтр.ИНН);
		йСтр.КПП=СокрЛП(йСтр.КПП);
	КонецЦикла;
	Отказ="";
	// Бросим массив контрагентов на сервис ИФНС
	ПроверитьВебСервисомФНС(Контры,Отказ);
	Если ЗначениеЗаполнено(Отказ) Тогда
		Контры.Очистить();
		//Предупреждение(Отказ);
		Возврат;
	КонецЕсли;
	// получим тех контрагентов из массива проверки, для которых сменился статус
	Запрос.Текст="ВЫБРАТЬ
	             |	Контрагенты.Контрагент КАК Контрагент,
	             |	Контрагенты.КодКонтрагента КАК КодКонтрагента,
	             |	Контрагенты.ИНН КАК ИНН,
	             |	Контрагенты.КПП КАК КПП,
	             |	Контрагенты.СостояниеТекущее КАК СостояниеТекущее,
	             |	Контрагенты.Состояние КАК Состояние
	             |ПОМЕСТИТЬ ВТ_Контры
	             |ИЗ
	             |	&Контры КАК Контрагенты
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВТ_Контры.Контрагент,
	             |	ВТ_Контры.СостояниеТекущее,
	             |	ВТ_Контры.Состояние
	             |ИЗ
	             |	ВТ_Контры КАК ВТ_Контры
	             |ГДЕ
	             |	ВТ_Контры.СостояниеТекущее <> ВТ_Контры.Состояние";
	Запрос.УстановитьПараметр("Контры",Контры);
	Контры=Запрос.Выполнить().Выгрузить();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	// сохраним изменённые статусы в регистре статусов
	Для каждого йСтр Из Контры Цикл
		ОбщегоНазначенияСервер.ОбновитьСтатусВИФНСКонтрагента(йСтр.Контрагент,йСтр.СостояниеТекущее,йСтр.Состояние,);
	КонецЦикла;
КонецПроцедуры
// ---ввв 05.10.2016 г.
