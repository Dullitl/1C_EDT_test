///////////////////////////////////////////////////////////////
/// Методы для проведения зарплаты к выплате

// При плановом авансе двигаем ЗарплатаЗаМесяц на сумму по строке
Процедура ПровестиПлановыйАванс(Документ) Экспорт
	
	Для Каждого СтрокаЗарплаты Из Документ.Зарплата Цикл
		Если ПроверитьЗаполнениеСтрокиЗарплаты(СтрокаЗарплаты) Тогда
			
			////
			// Учитываем начисления, вошедшие в ведомость
			Движение =  Документ.Движения.ЗарплатаЗаМесяцОрганизаций.ДобавитьРасход();
			
			// свойства
			Движение.Период					= КонецМесяца(Документ.ПериодРегистрации);
			
			// измерения
			Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
			Движение.Организация			= Документ.Организация;
			Движение.ПериодВзаиморасчетов	= Документ.ПериодРегистрации;
			
			// ресурсы
			Движение.СуммаВзаиморасчетов	= СтрокаЗарплаты.Сумма;
			
			// реквизиты
			Движение.ХарактерВыплаты		= Документ.ХарактерВыплаты;
			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

// При авансе за первую половину месяца двигаем ЗарплатаЗаМесяц на сумму по строке,
// а регистр первой половины месяца - расходом начислено и приходом удержано.
Процедура ПровестиАвансЗаПервуюПоловинуМесяца(Документ) Экспорт
	
	Для Каждого СтрокаЗарплаты Из Документ.Зарплата Цикл
		Если ПроверитьЗаполнениеСтрокиЗарплаты(СтрокаЗарплаты) Тогда
			
			////
			// Учитываем включенные в ведомость начисления
			Движение =  Документ.Движения.ЗарплатаЗаМесяцОрганизаций.ДобавитьРасход();
			
			// свойства
			Движение.Период					= КонецМесяца(Документ.ПериодРегистрации);
			
			// измерения
			Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
			Движение.Организация			= Документ.Организация;
			Движение.ПериодВзаиморасчетов	= Документ.ПериодРегистрации;
			
			// ресурсы
			Движение.СуммаВзаиморасчетов	= СтрокаЗарплаты.Сумма;
			
			////
			// Учитываем авансы, вошедшие в ведомость
			// реквизиты
			Если СтрокаЗарплаты.Начислено <> 0 Тогда
				Движение.ХарактерВыплаты		= Документ.ХарактерВыплаты;
				
				Движение =  Документ.Движения.РасчетПервойПоловиныМесяца.Добавить();
				
				// свойства
				Движение.Период					= КонецМесяца(Документ.ПериодРегистрации);
				
				// измерения
				Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
				Движение.Организация			= Документ.Организация;
				
				// ресурсы
				Движение.СуммаВзаиморасчетов	= - СтрокаЗарплаты.Начислено;
			КонецЕсли;		
			
			////
			// Учитываем отложенные суммы
			// (предварительные удержания и погрешности округления)
			Если СтрокаЗарплаты.Удержано <> 0 Тогда
				
				Движение =  Документ.Движения.РасчетПервойПоловиныМесяца.Добавить();
				
				// свойства
				Движение.Период					= КонецМесяца(Документ.ПериодРегистрации);
				
				// измерения
				Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
				Движение.Организация			= Документ.Организация;
				
				// ресурсы
				Движение.СуммаВзаиморасчетов	= СтрокаЗарплаты.Удержано;
				
			КонецЕсли;		
			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры
	
// Процедура осуществляет проведение документа в регистр остатков "Расчет окончательный"
//
// Параметр:
//   Документ - документ "Зарплата к выплате организаций"
//
Процедура ПровестиРасчет(Документ, ХарактерВыплатыОтложенного) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаЗаМесяц.Физлицо КАК Физлицо,
	|	ЗарплатаЗаМесяц.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаЗаМесяц.ХарактерВыплаты КАК ХарактерВыплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|			ИНАЧЕ -ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК СуммаВзаиморасчетовОстаток
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	|ГДЕ
	|	ЗарплатаЗаМесяц.Организация = &Организация
	|	И (&ПоВсемПериодамРегистрации
	|				И ЗарплатаЗаМесяц.ПериодВзаиморасчетов <= &ПериодРегистрации
	|			ИЛИ ЗарплатаЗаМесяц.ПериодВзаиморасчетов = &ПериодРегистрации)
	|	И ЗарплатаЗаМесяц.Физлицо В(&Физлица)
	|	И ЗарплатаЗаМесяц.ХарактерВыплаты В(&ХарактерыВыплаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаЗаМесяц.Физлицо,
	|	ЗарплатаЗаМесяц.ПериодВзаиморасчетов,
	|	ЗарплатаЗаМесяц.ХарактерВыплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|			ИНАЧЕ -ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|		КОНЕЦ) <> 0";
	
	Запрос.УстановитьПараметр("Организация", Документ.Организация);
	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Документ.Организация, "УчетЗадолженностиПоМесяцам");
	Запрос.УстановитьПараметр("ПоВсемПериодамРегистрации", НЕ УчетЗадолженностиПоМесяцам);
	Запрос.УстановитьПараметр("ПериодРегистрации", Документ.ПериодРегистрации);
	
	Запрос.УстановитьПараметр("Физлица", Документ.Зарплата.ВыгрузитьКолонку("Физлицо"));
	
	ХарактерыВыплаты = Новый Массив;
	Если Документ.ХарактерВыплаты = ХарактерВыплатыОтложенного Тогда
		Для Каждого ПеречислениеСсылка Из Перечисления.ХарактерВыплатыЗарплаты Цикл
			ХарактерыВыплаты.Добавить(ПеречислениеСсылка);
		КонецЦикла	
	Иначе	
		ХарактерыВыплаты.Добавить(Документ.ХарактерВыплаты);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ХарактерыВыплаты", ХарактерыВыплаты);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	ТаблицаОстатков.Сортировать("Физлицо, ПериодВзаиморасчетов, СуммаВзаиморасчетовОстаток");
	
	Для Каждого СтрокаЗарплаты Из Документ.Зарплата Цикл
		Если ПроверитьЗаполнениеСтрокиЗарплаты(СтрокаЗарплаты) Тогда
			
			////
			// Учитываем начисления, вошедшие в ведомость
			Если СтрокаЗарплаты.Начислено <> 0 Тогда
				
				ПараметрыОтбора = Новый Структура("ФизЛицо", СтрокаЗарплаты.Физлицо);
				ОстаткиПоФизЛицу = ТаблицаОстатков.НайтиСтроки(ПараметрыОтбора);
				
				НераспределеннаяСумма = СтрокаЗарплаты.Начислено;
				
				Для Каждого ОстатокПоФизЛицу Из ОстаткиПоФизЛицу Цикл
					
					СуммаВзаиморасчетов	= Мин(ОстатокПоФизЛицу.СуммаВзаиморасчетовОстаток, НераспределеннаяСумма);
					
					ПровестиРасчетПоСтроке(ВидДвиженияНакопления.Расход, Документ, СтрокаЗарплаты, ОстатокПоФизЛицу.ПериодВзаиморасчетов, ОстатокПоФизЛицу.ХарактерВыплаты, СуммаВзаиморасчетов);					
					
					НераспределеннаяСумма = НераспределеннаяСумма - СуммаВзаиморасчетов;
					
					Если НераспределеннаяСумма = 0 Тогда
						Прервать
					КонецЕсли;
					
				КонецЦикла;	
				
				Если НераспределеннаяСумма <> 0 Тогда
					
					ПровестиРасчетПоСтроке(ВидДвиженияНакопления.Расход, Документ, СтрокаЗарплаты,  Документ.ПериодРегистрации, Документ.ХарактерВыплаты, НераспределеннаяСумма);					
					
				КонецЕсли;
				
			КонецЕсли;		
			
			////
			// Учитываем отложенные до окончательного расчета за месяц суммы
			// (предварительные удержания и погрешности округления)
			Если СтрокаЗарплаты.Удержано <> 0 Тогда
				
				ПровестиРасчетПоСтроке(ВидДвиженияНакопления.Приход, Документ, СтрокаЗарплаты,  Документ.ПериодРегистрации, ХарактерВыплатыОтложенного, СтрокаЗарплаты.Удержано);					
				
			КонецЕсли;		
			
		КонецЕсли;	
	КонецЦикла;
	
///////////////////////////////////////////////////////////////////////////////////////////////	
	//Документ.Движения.ЗарплатаЗаМесяцОрганизаций.Очистить();
	//Для Каждого СтрокаЗарплаты Из Документ.Зарплата Цикл
	//	Если ПроверитьЗаполнениеСтрокиЗарплаты(СтрокаЗарплаты) Тогда
	//		
	//		////
	//		// Учитываем начисления, вошедшие в ведомость
	//		Если СтрокаЗарплаты.Начислено <> 0 Тогда
	//			Движение =  Документ.Движения.ЗарплатаЗаМесяцОрганизаций.ДобавитьРасход();
	//			
	//			// свойства
	//			Движение.Период					= КонецМесяца(Документ.ПериодРегистрации);
	//			
	//			// измерения
	//			Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
	//			Движение.Организация			= Документ.Организация;
	//			Движение.ПериодВзаиморасчетов	= Документ.ПериодРегистрации;
	//			
	//			// ресурсы
	//			Движение.СуммаВзаиморасчетов	= СтрокаЗарплаты.Начислено;
	//			
	//			// реквизиты
	//			Движение.ХарактерВыплаты		= Документ.ХарактерВыплаты;
	//		КонецЕсли;		
	//		
	//		////
	//		// Учитываем отложенные до окончательного расчета за месяц суммы
	//		// (предварительные удержания и погрешности округления)
	//		Если СтрокаЗарплаты.Удержано <> 0 Тогда
	//			
	//			Движение =  Документ.Движения.ЗарплатаЗаМесяцОрганизаций.ДобавитьПриход();
	//			
	//			// свойства
	//			Движение.Период					= КонецМесяца(Документ.ПериодРегистрации);
	//			
	//			// измерения
	//			Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
	//			Движение.Организация			= Документ.Организация;
	//			Движение.ПериодВзаиморасчетов	= Документ.ПериодРегистрации;
	//			
	//			// ресурсы
	//			Движение.СуммаВзаиморасчетов	= СтрокаЗарплаты.Удержано;
	//			
	//			// реквизиты
	//			Движение.ХарактерВыплаты		= ХарактерВыплатыОтложенного;
	//			
	//		КонецЕсли;		
	//			
	//	КонецЕсли;		
	//КонецЦикла;
	
КонецПроцедуры

Процедура ПровестиРасчетПоСтроке(ВидДвижения, Документ, СтрокаЗарплаты, ПериодВзаиморасчетов, ХарактерВыплаты, СуммаВзаиморасчетов)
	
	Движение = Документ.Движения.ЗарплатаЗаМесяцОрганизаций.Добавить();
	Движение.ВидДвижения = ВидДвижения; 

	// свойства
	Движение.Период					= КонецМесяца(Документ.ПериодРегистрации);
	
	// измерения
	Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
	Движение.Организация			= Документ.Организация;
	Движение.ПериодВзаиморасчетов	= ПериодВзаиморасчетов;
	
	// ресурсы
	Движение.СуммаВзаиморасчетов	= СуммаВзаиморасчетов;
	
	// реквизиты
	Движение.ХарактерВыплаты		= ХарактерВыплаты;
	
КонецПроцедуры	


Функция ПроверитьЗаполнениеСтрокиЗарплаты(СтрокаЗарплаты)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтрокаЗарплаты.ФизЛицо) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтрокаЗарплаты.Сумма < 0 ИЛИ (СтрокаЗарплаты.Сумма + СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты) <= 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

//////////////////////////////////////////////////////////////////
/// Методы для заполнения зарплаты к выплате по характеру выплаты

// Функция вычисляет размер планового аванса для физлиц, переданных в массиве ФизЛица
//
// Параметры
//  ДокументОбъект  - ДокументОбъект
//  ФизЛица   - массив физлиц 
//
// Возвращаемое значение:
//   ТаблицаЗначений   - массив физлиц
//
Функция ПолучитьОстаткиПлановогоАвансаСотрудников(ДокументОбъект, ФизЛица) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",		ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",	ДокументОбъект.ПериодРегистрации);
	Запрос.УстановитьПараметр("Физлица", 			Физлица);	
	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "УчетЗадолженностиПоМесяцам");
	Запрос.УстановитьПараметр("ПоВсемПериодамРегистрации", НЕ УчетЗадолженностиПоМесяцам);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансыРаботникам.Физлицо КАК Физлицо,
	|	АвансыРаботникам.СуммаАванса,
	|	АвансыРаботникам.Физлицо.Наименование
	|ПОМЕСТИТЬ ВТ_СписокАвансов
	|ИЗ
	|	РегистрСведений.АвансыРаботникамОрганизаций КАК АвансыРаботникам
	|ГДЕ
	|	АвансыРаботникам.Организация = &Организация
	|	И АвансыРаботникам.Физлицо В(&Физлица)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаЗаМесяц.Физлицо КАК Физлицо,
	|	СУММА(ЗарплатаЗаМесяц.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТВыплаченныйАванс
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	|ГДЕ
	|	ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗарплатаЗаМесяц.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ЗарплатаЗаМесяц.Организация = &Организация
	|	И (&ПоВсемПериодамРегистрации
	|			ИЛИ ЗарплатаЗаМесяц.ПериодВзаиморасчетов = &ПериодРегистрации)
	|	И ЗарплатаЗаМесяц.Физлицо В
	|			(ВЫБРАТЬ
	|				ВТ_СписокАвансов.Физлицо
	|			ИЗ
	|				ВТ_СписокАвансов)
	|	И ЗарплатаЗаМесяц.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПлановыйАванс)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаЗаМесяц.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокАвансов.Физлицо,
	|	ВТ_СписокАвансов.СуммаАванса - ЕСТЬNULL(ВыплаченныйАванс.СуммаВзаиморасчетов, 0) КАК Начислено
	|ИЗ
	|	ВТ_СписокАвансов КАК ВТ_СписокАвансов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыплаченныйАванс КАК ВыплаченныйАванс
	|		ПО ВТ_СписокАвансов.Физлицо = ВыплаченныйАванс.Физлицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_СписокАвансов.ФизлицоНаименование";

	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ПолучитьОстаткиПлановогоАванса(ДокументОбъект, ФизЛица = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",		ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ОбщегоНазначения.ГоловнаяОрганизация(ДокументОбъект.Организация));
	Запрос.УстановитьПараметр("Дата",				КонецМесяца(ДокументОбъект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ПериодРегистрации",	ДокументОбъект.ПериодРегистрации);

	Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 					Физлица);	
	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "УчетЗадолженностиПоМесяцам");
	Запрос.УстановитьПараметр("ПоВсемПериодамРегистрации", НЕ УчетЗадолженностиПоМесяцам);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансыРаботникам.Физлицо,
	|	АвансыРаботникам.СуммаАванса
	|ПОМЕСТИТЬ ВТАвансыРаботникам
	|ИЗ
	|	РегистрСведений.АвансыРаботникамОрганизаций КАК АвансыРаботникам
	|ГДЕ
	|	АвансыРаботникам.Организация = &Организация
	|	И (&ПоВсемФизлицам
	|			ИЛИ АвансыРаботникам.Физлицо В (&Физлица))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансыРаботникам.Физлицо,
	|	ЕСТЬNULL(РаботникиОрганизацийСрезПоследних.Сотрудник, ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)) КАК Сотрудник,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТСотрПодрФизлица
	|ИЗ
	|	ВТАвансыРаботникам КАК АвансыРаботникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&Дата,
	|				Организация = &ГоловнаяОрганизация
	|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|					И Сотрудник.ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТАвансыРаботникам.Физлицо
	|						ИЗ
	|							ВТАвансыРаботникам)) КАК РаботникиОрганизацийСрезПоследних
	|		ПО (РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = АвансыРаботникам.Физлицо)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановыйАванс.Физлицо,
	|	ПлановыйАванс.СуммаАванса,
	|	СотрПодрФизлица.Сотрудник,
	|	СотрПодрФизлица.ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТПлановыйАванс
	|ИЗ
	|	ВТАвансыРаботникам КАК ПлановыйАванс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрПодрФизлица КАК СотрПодрФизлица
	|		ПО (СотрПодрФизлица.Физлицо = ПлановыйАванс.Физлицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаЗаМесяц.Физлицо КАК Физлицо,
	|	СУММА(ЗарплатаЗаМесяц.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТВыплаченныйАванс
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	|ГДЕ
	|	ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗарплатаЗаМесяц.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ЗарплатаЗаМесяц.Организация = &Организация
	|	И (&ПоВсемПериодамРегистрации
	|			ИЛИ ЗарплатаЗаМесяц.ПериодВзаиморасчетов = &ПериодРегистрации)
	|	И (&ПоВсемФизлицам
	|			ИЛИ ЗарплатаЗаМесяц.Физлицо В (&Физлица))
	|	И ЗарплатаЗаМесяц.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПлановыйАванс)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаЗаМесяц.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыйАванс.Физлицо,
	|	ПлановыйАванс.СуммаАванса - ЕСТЬNULL(ВыплаченныйАванс.СуммаВзаиморасчетов, 0) КАК Начислено
	|ИЗ
	|	ВТПлановыйАванс КАК ПлановыйАванс
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыплаченныйАванс КАК ВыплаченныйАванс
	|		ПО ПлановыйАванс.Физлицо = ВыплаченныйАванс.Физлицо";

	Возврат(Запрос.Выполнить().Выгрузить());	
	
КонецФункции

Функция ПолучитьОстаткиЗарплатыЗаПервуюПоловинуМесяца(ДокументОбъект, ФизЛица = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",	ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 		Физлица);	
	
	Запрос.УстановитьПараметр("ПериодРегистрации", ДокументОбъект.ПериодРегистрации);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Зарплата.Физлицо,
	|	СУММА(Зарплата.СуммаВзаиморасчетов) КАК Начислено
	|ИЗ
	|	РегистрНакопления.РасчетПервойПоловиныМесяца КАК Зарплата
	|ГДЕ
	|	Зарплата.Период = КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И Зарплата.Организация = &Организация
	|	И (&ПоВсемФизлицам
	|			ИЛИ Зарплата.Физлицо В (&Физлица))
	|
	|СГРУППИРОВАТЬ ПО
	|	Зарплата.Физлицо";

	Возврат(Запрос.Выполнить().Выгрузить());	
	
КонецФункции

Функция ПолучитьОстаткиЗарплатыЗаМесяцМежрасчет(ДокументОбъект, ФизЛица = Неопределено) Экспорт 
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ХарактерВыплаты",	ДокументОбъект.ХарактерВыплаты);
	Запрос.УстановитьПараметр("Организация",		ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Дата",				КонецМесяца(ДокументОбъект.ПериодРегистрации) + 1);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	ДокументОбъект.ПериодРегистрации);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", 	Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 			Физлица);	
	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "УчетЗадолженностиПоМесяцам");
	Запрос.УстановитьПараметр("ПоВсемПериодамРегистрации", НЕ УчетЗадолженностиПоМесяцам);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаЗаМесяц.Физлицо КАК Физлицо,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|			ИНАЧЕ -ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК Начислено
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	|ГДЕ
	|	ЗарплатаЗаМесяц.Организация = &Организация
	|	И ЗарплатаЗаМесяц.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И (&ПоВсемПериодамРегистрации
	|			ИЛИ ЗарплатаЗаМесяц.ПериодВзаиморасчетов = &ПериодРегистрации)
	|	И (&ПоВсемФизлицам
	|			ИЛИ ЗарплатаЗаМесяц.Физлицо В (&Физлица))
	|	И ЗарплатаЗаМесяц.ХарактерВыплаты = &ХарактерВыплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаЗаМесяц.Физлицо";

	Возврат(Запрос.Выполнить().Выгрузить());	
	
КонецФункции

Функция ПолучитьОстаткиЗарплатыЗаМесяцОкончательныйРасчет(ДокументОбъект, ФизЛица = Неопределено) Экспорт 
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",		ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	ДокументОбъект.ПериодРегистрации);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", 	Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 			Физлица);	
	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "УчетЗадолженностиПоМесяцам");
	Запрос.УстановитьПараметр("ПоВсемПериодамРегистрации", НЕ УчетЗадолженностиПоМесяцам);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаЗаМесяц.Физлицо,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|			ИНАЧЕ -ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК Начислено
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	|ГДЕ
	|	ЗарплатаЗаМесяц.Организация = &Организация
	|	И (&ПоВсемПериодамРегистрации
	|				И ЗарплатаЗаМесяц.ПериодВзаиморасчетов <= &ПериодРегистрации
	|			ИЛИ ЗарплатаЗаМесяц.ПериодВзаиморасчетов = &ПериодРегистрации)
	|	И (&ПоВсемФизлицам
	|			ИЛИ ЗарплатаЗаМесяц.Физлицо В (&Физлица))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаЗаМесяц.Физлицо";
	
	Возврат(Запрос.Выполнить().Выгрузить());	
	
КонецФункции

Функция ПолучитьОстаткиЗарплатыЗаМесяцЗадолженность(ДокументОбъект, ФизЛица = Неопределено) Экспорт 
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",		ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	ДокументОбъект.ПериодРегистрации);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", 	Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 			Физлица);	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаЗаМесяц.Физлицо,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|			ИНАЧЕ -ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК Начислено
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	|ГДЕ
	|	ЗарплатаЗаМесяц.Организация = &Организация
	|	И ЗарплатаЗаМесяц.ПериодВзаиморасчетов < &ПериодРегистрации
	|	И (&ПоВсемФизлицам
	|			ИЛИ ЗарплатаЗаМесяц.Физлицо В (&Физлица))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаЗаМесяц.Физлицо";
	
	Возврат(Запрос.Выполнить().Выгрузить());	
	
КонецФункции

////////////////////////////////////////////////////////////////////
/// Методы для заполнения зарплаты к выплате по документу-основанию

// по переданной ссылке функция возвращает таблицу значений с невыплаченной зарплатой за месяц по документу-основанию
//
// Параметры:
//	Основание - ссылка на документ-основание
//
// Возвращаемое значение:
//	Таблица значений
Функция ПолучитьОстаткиЗарплатыЗаМесяцПоОснованию(Основание, ФизЛица = Неопределено) Экспорт
	
	ЗапросДляЗаполнения	= Новый Запрос;
	ЗапросДляЗаполнения.УстановитьПараметр("ДокументСсылка", Основание);
	ЗапросДляЗаполнения.УстановитьПараметр("ХарактерВыплаты", ХарактерВыплатыПоДокументу(Основание));
	ЗапросДляЗаполнения.УстановитьПараметр("ПоВсемФизлицам", 	Физлица = Неопределено);	
	ЗапросДляЗаполнения.УстановитьПараметр("Физлица", 			Физлица);	

	ЗапросДляЗаполнения.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОрганизаций.Ссылка КАК ДокументВыплаты
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизаций.ДокументОснование = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументВыплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Зарплата.Физлицо,
	|	СУММА(ВЫБОР
	|			КОГДА Зарплата.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Зарплата.СуммаВзаиморасчетов
	|			ИНАЧЕ -Зарплата.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК Начислено
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК Зарплата
	|ГДЕ
	|	Зарплата.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.ДокументВыплаты
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|	И Зарплата.ХарактерВыплаты = &ХарактерВыплаты
	|	И (&ПоВсемФизлицам
	|			ИЛИ Зарплата.Физлицо В (&Физлица))
	|
	|СГРУППИРОВАТЬ ПО
	|	Зарплата.Физлицо";
		
	Возврат(ЗапросДляЗаполнения.Выполнить().Выгрузить());	
	
КонецФункции

////////////////////////////////////////////////////////////////////////
/// Методы определения взаимосвязи между основанием и характером выплаты

// Функция возвращает тип документа-основания по характеру выплаты
//
// Параметры:
//   Документ - ДокументОбъект
//
Функция ТипОснованияПоХарактеруВыплаты(ХарактерВыплаты) Экспорт
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Дивиденды Тогда
		ТипОснования = Тип("ДокументСсылка.НачислениеДивидендовОрганизаций")
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Премии Тогда 
		ТипОснования = Тип("ДокументСсылка.ПремииРаботниковОрганизаций")
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПрочиеРазовыеНачисления Тогда 
		ТипОснования = Тип("ДокументСсылка.РегистрацияРазовыхНачисленийРаботниковОрганизаций")
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ВозвратНДФЛ Тогда 			
		ТипОснования = Тип("ДокументСсылка.НДФЛВозвратНалога") 
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПособияФСС Тогда 			
		ТипОснования = Тип("ДокументСсылка.НачислениеЕдиновременныхПособийЗаСчетФСС")
	Иначе 
		ТипОснования = Неопределено
	КонецЕсли;
		
	Возврат(ТипОснования)		
	
КонецФункции

// Функция возвращает характер выплаты, соответствующий документу
//
// Параметры:
//   ДокументСсылка - ДокументСсылка
//
Функция ХарактерВыплатыПоДокументу(ДокументСсылка) Экспорт
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.НачислениеДивидендовОрганизаций") Тогда 
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Дивиденды
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачислениеЕдиновременныхПособийЗаСчетФСС") Тогда 			
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПособияФСС
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций") Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизаций.ПериодНачисления КАК ПериодНачисленияЗарплаты
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		ПериодНачисленияЗарплаты = Запрос.Выполнить().Выгрузить()[0].ПериодНачисленияЗарплаты;
		
		Если ПериодНачисленияЗарплаты = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда	
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.АвансЗаПервуюПоловинуМесяца
		Иначе
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда 			
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Отпускные
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеПоБольничномуЛисту.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности
		|ИЗ
		|	Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
		|ГДЕ
		|	НачислениеПоБольничномуЛисту.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		ПричинаНетрудоспособности = Запрос.Выполнить().Выгрузить()[0].ПричинаНетрудоспособности;
		
		Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда	
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПоБеременностиИРодам
		Иначе
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПоБольничнымЛистам
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НДФЛВозвратНалога") Тогда 			
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ВозвратНДФЛ
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда 			
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОплатаПоСреднемуЗаработку.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени
		|ИЗ
		|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
		|ГДЕ
		|	ОплатаПоСреднемуЗаработку.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		ВидИспользованияРабочегоВремени = Запрос.Выполнить().Выгрузить()[0].ВидИспользованияРабочегоВремени;
		
		Если ВидИспользованияРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Командировка Тогда	
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Командировочные
		Иначе
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПремииРаботниковОрганизаций") Тогда 
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Премии
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций") Тогда 
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.РасчетПриУвольнении
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РегистрацияРазовыхНачисленийРаботниковОрганизаций") Тогда 
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПрочиеРазовыеНачисления
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НДФЛПерерасчет") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.НевыходыВОрганизациях") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаПраздничныхИВыходныхДнейОрганизаций") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаСверхурочныхЧасов") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПереносЗадолженностиРаботниковОрганизаций") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РегистрацияПростоевРаботниковОрганизаций") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РегистрацияРазовыхУдержанийРаботниковОрганизаций") Тогда 
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата 
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
		
	Иначе
			
		ХарактерВыплаты = Неопределено;
		
	КонецЕсли;
	
	Возврат(ХарактерВыплаты)
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ПОЛУЧЕНИЯ СОСТОЯНИЯ ДОКУМЕНТОВ

// Возвращает текст запроса со ссылкой на документ и его состояние (проведен, удален, выплачивается)
//
// Параметры:
//
// Возвращаемое значение:
//	Текст запроса
//
Функция ПолучитьТекстЗапросаСостояния(УчитыватьРеглДокументы = Истина, УчитыватьУпрДокументы = Ложь) Экспорт
	
	ДоступныРеглДокументы 	= ПравоДоступа("Чтение", Метаданные.Документы.ЗарплатаКВыплатеОрганизаций);
	ДоступныУпрДокументы	= ПравоДоступа("Чтение", Метаданные.Документы.ЗарплатаКВыплате);
	
	ТекстЗапроса = "";
	
	Если ДоступныРеглДокументы И УчитыватьРеглДокументы Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость КАК Ведомость
		|ПОМЕСТИТЬ ВыплатаРегламентированнойЗарплаты
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость В(&Ссылки)
		|	И ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость
		|ИЗ
		|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|ГДЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость В(&Ссылки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ведомость
		|;";
	КонецЕсли;
	
	Если ДоступныУпрДокументы И УчитыватьУпрДокументы Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость КАК Ведомость
		|ПОМЕСТИТЬ ВыплатаУправленческойЗарплаты
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|ГДЕ
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость В(&Ссылки)
		|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ведомость
		|;";
	КонецЕсли;
	
	Если ДоступныРеглДокументы И УчитыватьРеглДокументы Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗарплатаКВыплате.Ссылка,
		|	ВЫБОР
		|		КОГДА ВыплатаРегламентированнойЗарплаты.Ведомость ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Выплачивается
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплате
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВыплатаРегламентированнойЗарплаты КАК ВыплатаРегламентированнойЗарплаты
		|		ПО (ВыплатаРегламентированнойЗарплаты.Ведомость = ЗарплатаКВыплате.Ссылка)
		|ГДЕ
		|	ЗарплатаКВыплате.Ссылка В(&Ссылки)";
		Если ДоступныУпрДокументы И УчитыватьУпрДокументы Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗарплатаКВыплате.Ссылка,
			|	ВЫБОР
			|		КОГДА ВыплатаУправленческойЗарплаты.Ведомость ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ
			|ИЗ
			|	Документ.ЗарплатаКВыплате КАК ЗарплатаКВыплате
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВыплатаУправленческойЗарплаты КАК ВыплатаУправленческойЗарплаты
			|		ПО (ВыплатаУправленческойЗарплаты.Ведомость = ЗарплатаКВыплате.Ссылка)
			|ГДЕ
			|	ЗарплатаКВыплате.Ссылка В(&Ссылки)";
		КонецЕсли;
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ЗарплатаКВыплате.Ссылка,
		|	ВЫБОР
		|		КОГДА ВыплатаУправленческойЗарплаты.Ведомость ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Выплачивается
		|ИЗ
		|	Документ.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВыплатаУправленческойЗарплаты КАК ВыплатаУправленческойЗарплаты
		|		ПО (ВыплатаУправленческойЗарплаты.Ведомость = ЗарплатаКВыплате.Ссылка)
		|ГДЕ
		|	ЗарплатаКВыплате.Ссылка В(&Ссылки)";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьСостояние()

////////////////////////////////////////////////////////////////////////
/// Методы, связанные с выплатой зарплаты

// По переданной ссылке ЗарплатаКВыплате возвращает таблицу значений со ссылкой на ведомость и ее представлением
//
// Параметры:
//	Ссылка - документ-ссылка ЗарплатаКВыплатеОрганизаций
//
// Возвращаемое значение:
//	Таблица значений
//
Функция ПолучитьДокументыНаОснованииЗарплатаКВыплате(Ссылка) Экспорт
	
	ЗапросПоВедомостям = Новый Запрос;
	ЗапросПоВедомостям.УстановитьПараметр("Ссылка", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка) КАК Представление
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = &Ссылка
	|	И ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор)
	|ИЗ
	|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|ГДЕ
	|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ссылка
	|	И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
		
		
	ЗапросПоВедомостям.Текст = ТекстЗапроса;
	
	Возврат ЗапросПоВедомостям.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////
/// Методы для модуля объекта документа ЗарплатаКВыплате

Процедура ВыполнитьДополнительныеПроверкиДокумента(ШапкаДокумента, Отказ, Заголовок) Экспорт 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
/// Процедуры и функции форм списка и выбора

#Если Клиент Тогда

Процедура ОбработкаВводаНаОсновании(ИмяМетаданныхДокумента, ТекущиеДанные, Форма) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы[ИмяМетаданныхДокумента];
	
	Если ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
		
		ДокументОбъект = Документы[ИмяМетаданныхДокумента].СоздатьДокумент();
		
		Отказ = Ложь;
		Попытка
			ДокументОбъект.Заполнить(ТекущиеДанные.Ссылка);
		Исключение
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();

			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание, Отказ, "Создание документа «" + МетаданныеДокумента.Синоним + "»");
			
			ОбработкаКомментариев.ПоказатьСообщения();
		КонецПопытки;	
		
		Если НЕ Отказ Тогда
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;	
		
	Иначе
		Предупреждение("Нарушение прав доступа!");	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикОжиданияДокументСписокПриАктивизацииСтроки(Форма, ДополнительныеДействия) Экспорт
	
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	КнопкиМенюПерейти 	= ЭлементыФормы.ДействияФормы.Кнопки.ПодменюПерейти.Кнопки;
	ТекущиеДанные 		= ЭлементыФормы.ДокументСписок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			Если КнопкиМенюПерейти.Найти("ВыплатаЗарплатыРасходнымиОрдерами") = Неопределено Тогда
				НоваяКнопка = КнопкиМенюПерейти.Вставить(0, "ВыплатаЗарплатыРасходнымиОрдерами", ТипКнопкиКоманднойПанели.Действие, "Выплата зарплаты расходными ордерами", ДополнительныеДействия);
				НоваяКнопка.Подсказка = "Выплата зарплаты расходными ордерами";
				НоваяКнопка.Пояснение = "Выплата зарплаты расходными ордерами";
			КонецЕсли;
		Иначе
			Если КнопкиМенюПерейти.Найти("ВыплатаЗарплатыРасходнымиОрдерами") <> Неопределено Тогда
				КнопкиМенюПерейти.Удалить(0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СписокДокументовВводимыхНаОсновании(ТекущиеДанные) Экспорт
	
	ДокументыВводимыеНаОсновании = Новый Массив;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		УпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ТекущиеДанные.Организация, "УпрощенныйУчетВзаиморасчетов");
		Если НЕ УпрощенныйУчетВзаиморасчетов Тогда

			Если ТекущиеДанные.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
				ДокументыВводимыеНаОсновании.Добавить("РасходныйКассовыйОрдер");
				
				//АБС+++ Гончаров 19.04.2013
				ДокументыВводимыеНаОсновании.Добавить("ДепонированиеОрганизаций");
				//\\АБС--- Гончаров 19.04.2013
			ИначеЕсли ТекущиеДанные.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
				//ДокументыВводимыеНаОсновании.Добавить("ПлатежноеПоручениеИсходящее");
				
				//АБС+++ Гончаров 19.04.2013
				ДокументыВводимыеНаОсновании.Добавить("абс_СчетНаОплату");
				//\\АБС--- Гончаров 19.04.2013
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументыВводимыеНаОсновании;
	
КонецФункции

Процедура ВыполнитьДополнительныеДействия(ИмяКоманды, Форма) Экспорт
	
	Если ИмяКоманды = "ВыплатаЗарплатыРасходнымиОрдерами" Тогда
		
		ТекущиеДанные = Форма.ЭлементыФормы.ДокументСписок.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
			
		ФормированиеРКО = Обработки.ВыплатаЗарплатыРасходнымиОрдерами.Создать();
		ФормированиеРКО.Организация = ТекущиеДанные.Организация;
		ФормированиеРКО.ПлатежнаяВедомость = ТекущиеДанные.Ссылка;
		ФормированиеРКО.Автозаполнение();
		ФормированиеРКО.ПолучитьФорму().Открыть();		

	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаСпискаОбработкаОповещенияДополнительно(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ИзменениеВыплатыПоВедомостиРегл" Тогда
		Форма.ЭлементыФормы.ДокументСписок.ОбновитьСтроки();
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаСпискаПередОткрытиемДополнительно(Форма) Экспорт
	
	Форма.ДокументСписок.Колонки.Добавить("Организация");
	Форма.ДокументСписок.Колонки.Добавить("СпособВыплаты");
	РаботаСДиалогами.ВставитьКолонкуВТабличноеПоле(9, Форма.ЭлементыФормы.ДокументСписок, "СпособВыплаты", "Способ выплаты", "СпособВыплаты");
	
	// при создании табличного поля колонки не было и элемент управления отбором был отключен
	// после добавления колонки, необходимо включить и отбор по значениям в ней
	Форма.ЭлементыФормы.ДокументСписок.НастройкаОтбора["СпособВыплаты"].Доступность = Истина;
	
КонецПроцедуры

Процедура ЗарплатаКВыплатеСоздатьНаОсновании(Форма, Основание, ПредварительныйУчетУдержаний = Неопределено) Экспорт
	
	ЗарплатаКВыплатеОрганизацийСервис.СоздатьНаОсновании(Основание, ПредварительныйУчетУдержаний);

КонецПроцедуры

Процедура ФормаСпискаПриСозданииФормыДополнительно(Форма) Экспорт
	
	// добавляем колонку программно, чтобы данные всегда были доступны
	Форма.ДокументСписок.Колонки.Добавить("СпособВыплаты");
	
КонецПроцедуры

#КонецЕсли
