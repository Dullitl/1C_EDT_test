////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РЕГЛАМЕНТНЫХ ЗАДАНИЙ ПОД ПОЛНЫМИ ПРАВАМИ

// Выполняет запись регламентного задания
//
// Параметры:
//  Отказ                     - Булево - флаг отказа. Если в процессе выполнения процедуры были обнаружены ошибки,
//                                       то флаг отказа устанавливается в значение Истина
//  РегламентноеЗаданиеОбъект - объект регламентного задания, которое необходимо записать
// 
Процедура ЗаписатьРегламентноеЗадание(Отказ, РегламентноеЗаданиеОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		// записываем задание
		РегламентноеЗаданиеОбъект.Записать();
		
	Исключение
		
		СтрокаСообщения =
		"Произошла ошибка при сохранении расписания выполнения внешней обработки. Возможно данные расписания были изменены.
		|Подробное описание ошибки: " + ОписаниеОшибки();
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ);
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет удаление регламентного задания
//
// Параметры:
//  Отказ                     - Булево - флаг отказа. Если в процессе выполнения процедуры были обнаружены ошибки,
//                                       то флаг отказа устанавливается в значение Истина
//  РегламентноеЗаданиеОбъект - объект регламентного задания, которое необходимо удалить
// 
Процедура УдалитьРегламентноеЗадание(Отказ, РегламентноеЗаданиеGUID) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентноеЗаданиеОбъект = НайтиРегламентноеЗаданиеПоПараметру(РегламентноеЗаданиеGUID);
	
	Если РегламентноеЗаданиеОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РегламентноеЗаданиеОбъект.Удалить();
		
	Исключение
		СтрокаСообщения =
		"Ошибка при удалении регламентного задания: " + ОписаниеОшибки();
		
		ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаСообщения, Отказ);
		
	КонецПопытки;
	
КонецПроцедуры

// Находит регламентное задание по GUID
//
// Параметры:
//  УникальныйНомерЗадания - Строка - строка с GUID регламентного задания
// 
// Возвращаемое значение:
//  Неопределено               - если поиск регламентного задания по GUID не дал результатов
//  ТекущееРегламентноеЗадание - РегламентноеЗадание - найденное по GUID регламентное задание
//
Функция НайтиРегламентноеЗаданиеПоПараметру(УникальныйНомерЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Если НЕ ПустаяСтрока(УникальныйНомерЗадания) Тогда
			
			УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(УникальныйНомерЗадания);
			ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
			
		Иначе
			
			ТекущееРегламентноеЗадание = Неопределено;
			
		КонецЕсли;
		
	Исключение
		
		ТекущееРегламентноеЗадание = Неопределено;
		
	КонецПопытки;
	
	Возврат ТекущееРегламентноеЗадание;
	
КонецФункции

