// Процедуры обработчики завершения бизнес-процессов
// При согласовании договора необходимо найти ЗЗ в статусе ОжидаетДоговор по этому договору
//  и поменять статус

Процедура ЗавершитьБПСогласованияДоговора(ДоговорКонтрагента, СтатусЗавершения) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	абс_ЗакупочныйЗаказДоговоры.Ссылка
	|ПОМЕСТИТЬ ВТ_Договоры
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.Договоры КАК абс_ЗакупочныйЗаказДоговоры
	|ГДЕ
	|	абс_ЗакупочныйЗаказДоговоры.ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_ЗакупочныйЗаказДоговоры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(абсЗадачаДоговора.Ссылка) КАК ЗадачаСсылка,
	|	абсЗадачаДоговора.ОбъектЗадачи КАК ЗакупочныйЗаказ
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договоры КАК ВТ_Договоры
	|		ПО абсЗадачаДоговора.ОбъектЗадачи = ВТ_Договоры.Ссылка
	|ГДЕ
	|	абсЗадачаДоговора.ОбъектЗадачи ССЫЛКА Документ.абс_ЗакупочныйЗаказ
	|	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА абсЗадачаДоговора.ОбъектЗадачи ССЫЛКА Документ.абс_ЗакупочныйЗаказ
	|				ТОГДА ВЫРАЗИТЬ(абсЗадачаДоговора.ОбъектЗадачи КАК Документ.абс_ЗакупочныйЗаказ).Статус = ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	абсЗадачаДоговора.ОбъектЗадачи");
	
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента"	, ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТочкаМаршрута"		, БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОжидаетДоговор);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекЗаказ = Выборка.ЗакупочныйЗаказ;
		
		НовыйСтатусЗЗ = Неопределено;	
		
		//родин лимиты по договорам	
		Если СтатусЗавершения = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ 
			СтатусЗавершения = Перечисления.абсСтатусыДоговоров.Корректировка ИЛИ 
			СтатусЗавершения = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ 
			СтатусЗавершения = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки Тогда
			
			// Проверим, если договоры активны, то продолжим БП согласования ЗЗ
			ДоговорыАктивны = Истина;
			
			Для Каждого СтрокаДоговоры Из ТекЗаказ.Договоры Цикл
				ДоговорыАктивны = ДоговорыАктивны 
				И (СтрокаДоговоры.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ
				СтрокаДоговоры.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка ИЛИ
				СтрокаДоговоры.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговоры.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
			КонецЦикла;
			//родин лимиты по договорам
			
			// Если не все еще активны, то пропустим ЗЗ
			Если НЕ ДоговорыАктивны Тогда
				Продолжить;
			КонецЕсли;
			
			// АБС ВСТАВКА Фролов 20110106 из ожидания договора переходим сразу в согласован.
			//НовыйСтатусЗЗ = Выборка.БизнесПроцессСсылка.СтатусОжиданияДоговора;
			
			НовыйСтатусЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован;
			
			// АБС ВСТАВКА Фролов 20110106 КОНЕЦ
			
		ИначеЕсли СтатусЗавершения = Перечисления.абсСтатусыДоговоров.Отказ 
			ИЛИ СтатусЗавершения = Перечисления.абсСтатусыДоговоров.Отмена Тогда
			
			НовыйСтатусЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ;
			
		КонецЕсли;
		
		Если НЕ Выборка.ЗакупочныйЗаказ.Статус = НовыйСтатусЗЗ Тогда
			ЗакупочныйЗаказОбъект = Выборка.ЗакупочныйЗаказ.ПолучитьОбъект();
			
			ЗакупочныйЗаказОбъект.Статус = НовыйСтатусЗЗ;
			
			ЗакупочныйЗаказОбъект.мТекущийДоговор 		= ДоговорКонтрагента;
			ЗакупочныйЗаказОбъект.мДоговорСогласован    = ЗакупочныйЗаказОбъект.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован;
			
			ЗакупочныйЗаказОбъект.ПричинаИзмененияСтатуса = "Согласован договор " + ДоговорКонтрагента + " с контрагентом " + ДоговорКонтрагента.Владелец;
			Попытка
				ЗакупочныйЗаказОбъект.Записать();
			Исключение				
			КонецПопытки;	
		КонецЕсли;
		Попытка
			ЗадачаОбъект = Выборка.ЗадачаСсылка.ПолучитьОбъект();
			Если НЕ ЗадачаОбъект = Неопределено Тогда 	// Лапин 
				ЗадачаОбъект.ВыполнитьЗадачу();
			КонецЕсли; 									// Лапин
		Исключение
		КонецПопытки;	
	КонецЦикла;	
	
КонецПроцедуры

//Сторчевой А.Н. 10.11.2016{
Процедура ПереводЗЗВСтатус(ДоговорКонтрагента, СтатусЗавершения) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ 
	|	абс_ЗакупочныйЗаказДоговоры.Ссылка КАК ЗакупочныйЗаказ
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.Договоры КАК абс_ЗакупочныйЗаказДоговоры
	|ГДЕ
	|	абс_ЗакупочныйЗаказДоговоры.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И абс_ЗакупочныйЗаказДоговоры.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор)
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_ЗакупочныйЗаказДоговоры.Ссылка");
	

	Запрос.УстановитьПараметр("ДоговорКонтрагента"	, ДоговорКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекЗаказ = Выборка.ЗакупочныйЗаказ;
		
		НовыйСтатусЗЗ = Неопределено;	
		//родин лимиты по договорам	
		Если СтатусЗавершения = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ 
			СтатусЗавершения = Перечисления.абсСтатусыДоговоров.Корректировка ИЛИ 
			СтатусЗавершения = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ 
			СтатусЗавершения = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки Тогда
			// Проверим, если договоры активны, то продолжим БП согласования ЗЗ
			ДоговорыАктивны = Истина;
			
			Для Каждого СтрокаДоговоры Из ТекЗаказ.Договоры Цикл
				ДоговорыАктивны = ДоговорыАктивны 
				И (СтрокаДоговоры.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ
				СтрокаДоговоры.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка ИЛИ
				СтрокаДоговоры.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговоры.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
			КонецЦикла;
			//родин лимиты по договорам
			
			// Если не все еще активны, то пропустим ЗЗ
			Если НЕ ДоговорыАктивны Тогда
				Продолжить;
			КонецЕсли;
			
			// АБС ВСТАВКА Фролов 20110106 из ожидания договора переходим сразу в согласован.
			//НовыйСтатусЗЗ = Выборка.БизнесПроцессСсылка.СтатусОжиданияДоговора;
			
			НовыйСтатусЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован;
			
			// АБС ВСТАВКА Фролов 20110106 КОНЕЦ
			
		ИначеЕсли СтатусЗавершения = Перечисления.абсСтатусыДоговоров.Отказ 
			ИЛИ СтатусЗавершения = Перечисления.абсСтатусыДоговоров.Отмена Тогда
			
			НовыйСтатусЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ;
			
		КонецЕсли;
		
		Если НЕ Выборка.ЗакупочныйЗаказ.Статус = НовыйСтатусЗЗ Тогда
			ЗакупочныйЗаказОбъект = Выборка.ЗакупочныйЗаказ.ПолучитьОбъект();
			
			ЗакупочныйЗаказОбъект.Статус = НовыйСтатусЗЗ;
			
			ЗакупочныйЗаказОбъект.мТекущийДоговор 		= ДоговорКонтрагента;
			ЗакупочныйЗаказОбъект.мДоговорСогласован    = ЗакупочныйЗаказОбъект.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован;
			
			ЗакупочныйЗаказОбъект.ПричинаИзмененияСтатуса = "Согласован договор " + ДоговорКонтрагента + " с контрагентом " + ДоговорКонтрагента.Владелец;
			Попытка
				ЗакупочныйЗаказОбъект.Записать();
			Исключение				
			КонецПопытки;	
		КонецЕсли;
		//Попытка
		//	ЗадачаОбъект = Выборка.ЗадачаСсылка.ПолучитьОбъект();
		//	Если НЕ ЗадачаОбъект = Неопределено Тогда 	// Лапин 
		//		ЗадачаОбъект.ВыполнитьЗадачу();
		//	КонецЕсли; 									// Лапин
		//Исключение Продолжить;
		//КонецПопытки;	
	КонецЦикла;	
	
КонецПроцедуры
//}Сторчевой А.Н. 10.11.2016
Процедура ЗавершитьБПСогласованияЗЗ(ЗакупочныйЗаказ, СтатусЗавершения) Экспорт
	//АБС_Попов Замена 23.01.2014
	//Заменяемый код:
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//					  |	МАКСИМУМ(абсЗадачаДоговора.Ссылка) КАК ЗадачаСсылка,
	//					  |	абсЗадачаДоговора.ОбъектЗадачи КАК СчетНаОплату
	//					  |ИЗ
	//					  |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	//					  |ГДЕ
	//					  |	абсЗадачаДоговора.Выполнена = ЛОЖЬ
	//					  |	И абсЗадачаДоговора.ОбъектЗадачи ССЫЛКА Документ.абс_СчетНаОплату
	//					  |	И ВЫБОР
	//					  |			КОГДА абсЗадачаДоговора.ОбъектЗадачи ССЫЛКА Документ.абс_СчетНаОплату
	//					  |				ТОГДА абсЗадачаДоговора.ОбъектЗадачи.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	//					  |			ИНАЧЕ ЛОЖЬ
	//					  |		КОНЕЦ
	//					  |	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	//					  |
	//					  |СГРУППИРОВАТЬ ПО
	//					  |	абсЗадачаДоговора.ОбъектЗадачи");
	
	//Замещающий код:
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	абс_СчетНаОплату.Ссылка
	|ПОМЕСТИТЬ вт_СчетаНаОплатуПоЗЗ
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|ГДЕ
	|	абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(абсЗадачаДоговора.Ссылка) КАК ЗадачаСсылка,
	|	абсЗадачаДоговора.ОбъектЗадачи КАК СчетНаОплату
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_СчетаНаОплатуПоЗЗ КАК вт_СчетаНаОплатуПоЗЗ
	|		ПО абсЗадачаДоговора.ОбъектЗадачи = вт_СчетаНаОплатуПоЗЗ.Ссылка
	|ГДЕ
	|	абсЗадачаДоговора.Выполнена = ЛОЖЬ
	|	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	|
	|СГРУППИРОВАТЬ ПО
	|	абсЗадачаДоговора.ОбъектЗадачи");
	
	//АБС_Попов Замена 23.01.2014
	
	
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ"		, ЗакупочныйЗаказ);
	Запрос.УстановитьПараметр("ТочкаМаршрута"		, БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеЗЗ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекСчет = Выборка.СчетНаОплату;
		
		НовыйСтатусЗЗ = Неопределено;	
		
		Если СтатусЗавершения = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда
			
			// АБС ВСТАВКА Фролов 20110106 из ожидания ЗЗ переходим сразу в согласован.
			//НовыйСтатусЗЗ = Выборка.ЗадачаСсылка.БизнесПроцесс.СтатусОжиданияЗЗ;
			НовыйСтатусЗЗ = Перечисления.абсСтатусыСчетов.Согласован;
			// АБС ВСТАВКА Фролов 20110106 КОНЕЦ
		ИначеЕсли СтатусЗавершения = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ 
			ИЛИ СтатусЗавершения = Перечисления.абсСтатусЗакупочногоЗаказа.Отменен Тогда
			
			НовыйСтатусЗЗ = Перечисления.абсСтатусыСчетов.Отказ;
			
		КонецЕсли;
		
		СчетНаОплатуОбъект = Выборка.СчетНаОплату.ПолучитьОбъект();
		
		СчетНаОплатуОбъект.СтатусСчета = НовыйСтатусЗЗ;
		
		СчетНаОплатуОбъект.ПричинаИзмененияСтатуса = "" + ЗакупочныйЗаказ + " перешел в статус " + НовыйСтатусЗЗ + ".";
		
		СчетНаОплатуОбъект.мТекущийЗЗ 		= ЗакупочныйЗаказ;
		СчетНаОплатуОбъект.мЗЗСогласован  	= СчетНаОплатуОбъект.СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован;
		
		//АБС ИЗМЕНЕНИЕ 39496  05.03.2014 11:13:38  Шамов
		//СчетНаОплатуОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Попытка
			СчетНаОплатуОбъект.Записать(РежимЗаписиДокумента.Проведение);	
		Исключение
			ВызватьИсключение "  Ошибка при согласовании счета на оплату " + СчетНаОплатуОбъект + ": " + ОписаниеОшибки();
		КонецПопытки;
		//АБС ИЗМЕНЕНИЕ 39496 КОНЕЦ
		
		ЗадачаОбъект = Выборка.ЗадачаСсылка.ПолучитьОбъект();
		Если НЕ ЗадачаОбъект = Неопределено Тогда 	// Лапин 
			ЗадачаОбъект.ВыполнитьЗадачу();
		КонецЕсли;									// Лапин
		
	КонецЦикла;
	
КонецПроцедуры

//***** АБС Гетц. 27.01.2014
Процедура ЗавершитьБПСогласованияЗЗЗапуск() Экспорт 
	ТекстСообщения = "Запущена синхронизация статусов счетов по закупочным заказам";
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	абс_СинхронизацияСчетовПоЗакупочнымЗаказам.ЗакупочныйЗаказ,
	|	абс_СинхронизацияСчетовПоЗакупочнымЗаказам.СтатусЗавершения
	|ПОМЕСТИТЬ втЗакупочныеЗаказы
	|ИЗ
	|	РегистрСведений.абс_СинхронизацияСчетовПоЗакупочнымЗаказам КАК абс_СинхронизацияСчетовПоЗакупочнымЗаказам
	|ГДЕ
	|	абс_СинхронизацияСчетовПоЗакупочнымЗаказам.НеобходимаСинхронизацияСчетов = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_СчетНаОплату.Ссылка,
	|	абс_СчетНаОплату.ЗакупочныйЗаказ,
	|	втЗакупочныеЗаказы.СтатусЗавершения
	|ПОМЕСТИТЬ вт_СчетаНаОплатуПоЗЗ
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗакупочныеЗаказы КАК втЗакупочныеЗаказы
	|		ПО абс_СчетНаОплату.ЗакупочныйЗаказ = втЗакупочныеЗаказы.ЗакупочныйЗаказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(абсЗадачаДоговора.Ссылка) КАК ЗадачаСсылка,
	|	абсЗадачаДоговора.ОбъектЗадачи КАК СчетНаОплату,
	|	вт_СчетаНаОплатуПоЗЗ.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ,
	|	вт_СчетаНаОплатуПоЗЗ.СтатусЗавершения КАК СтатусЗавершения
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_СчетаНаОплатуПоЗЗ КАК вт_СчетаНаОплатуПоЗЗ
	|		ПО абсЗадачаДоговора.ОбъектЗадачи = вт_СчетаНаОплатуПоЗЗ.Ссылка
	|ГДЕ
	|	абсЗадачаДоговора.Выполнена = ЛОЖЬ
	|	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	|
	|СГРУППИРОВАТЬ ПО
	|	абсЗадачаДоговора.ОбъектЗадачи,
	|	вт_СчетаНаОплатуПоЗЗ.ЗакупочныйЗаказ,
	|	вт_СчетаНаОплатуПоЗЗ.СтатусЗавершения
	|ИТОГИ
	|	МАКСИМУМ(СтатусЗавершения)
	|ПО
	|	ЗакупочныйЗаказ";
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеЗЗ);
	
	ВыборкаЗЗ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЕстьОшибки = Ложь;
	Пока ВыборкаЗЗ.Следующий() Цикл 
		ТекстОшибки = "";
		Выборка = ВыборкаЗЗ.Выбрать();		
		Пока Выборка.Следующий() Цикл
			
			ЗавершитьБПСогласованияЗЗОбработка(Выборка.СчетНаОплату, Выборка.ЗадачаСсылка, Выборка.ЗакупочныйЗаказ, Выборка.СтатусЗавершения, ТекстОшибки);
			
		КонецЦикла;
		
		ОтметитьСинхронизацию(ВыборкаЗЗ.ЗакупочныйЗаказ, ВыборкаЗЗ.СтатусЗавершения, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ТекстСообщения = "Синхронизация статусов счетов по закупочным заказам завершена " + ?(ЕстьОшибки, "с ошибками. Информация об ошибках содержится в регистре сведений ""Синхронизация счетов по закупочным заказам""", "успешно");
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
	
КонецПроцедуры

Процедура ЗавершитьБПСогласованияЗЗОбработка(Счет, Задача, ЗакупочныйЗаказ, СтатусЗавершения, ТекстОшибки)
	
	НовыйСтатусЗЗ = Неопределено;	
	
	Если СтатусЗавершения = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда
		
		НовыйСтатусЗЗ = Перечисления.абсСтатусыСчетов.Согласован;
		
	ИначеЕсли СтатусЗавершения = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ 
		ИЛИ СтатусЗавершения = Перечисления.абсСтатусЗакупочногоЗаказа.Отменен Тогда
		
		НовыйСтатусЗЗ = Перечисления.абсСтатусыСчетов.Отказ;
		
	КонецЕсли;
	
	СчетНаОплатуОбъект = Счет.ПолучитьОбъект();	
	СчетНаОплатуОбъект.СтатусСчета 		= НовыйСтатусЗЗ;	
	СчетНаОплатуОбъект.ПричинаИзмененияСтатуса = "" + ЗакупочныйЗаказ + " перешел в статус " + НовыйСтатусЗЗ + ".";
	СчетНаОплатуОбъект.мТекущийЗЗ 		= ЗакупочныйЗаказ;
	СчетНаОплатуОбъект.мЗЗСогласован  	= (СчетНаОплатуОбъект.СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован);	
	Попытка
		СчетНаОплатуОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();		
	Попытка
		Если НЕ ЗадачаОбъект = Неопределено Тогда 	// Лапин 
			ЗадачаОбъект.ВыполнитьЗадачу();
		КонецЕсли;									// Лапин
	Исключение
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьВОчередьДляСинхронизации(ЗакупочныйЗаказ, СтатусЗавершения) Экспорт 
	ЗаписьСинхронизации = РегистрыСведений.абс_СинхронизацияСчетовПоЗакупочнымЗаказам.СоздатьМенеджерЗаписи();
	ЗаписьСинхронизации.ЗакупочныйЗаказ = ЗакупочныйЗаказ;
	ЗаписьСинхронизации.Прочитать();
	Если ЗаписьСинхронизации.Выбран() Тогда 
		Возврат;
	КонецЕсли;
	ЗаписьСинхронизации.СтатусЗавершения = СтатусЗавершения;
	ЗаписьСинхронизации.НеобходимаСинхронизацияСчетов = Истина;
	ЗаписьСинхронизации.Записать();
КонецПроцедуры

Процедура ОтметитьСинхронизацию(ЗакупочныйЗаказ, СтатусЗавершения, ТекстОшибки)
	ЗаписьСинхронизации = РегистрыСведений.абс_СинхронизацияСчетовПоЗакупочнымЗаказам.СоздатьМенеджерЗаписи();
	ЗаписьСинхронизации.ЗакупочныйЗаказ = ЗакупочныйЗаказ;
	ЗаписьСинхронизации.СтатусЗавершения = СтатусЗавершения;
	ЗаписьСинхронизации.НеобходимаСинхронизацияСчетов = Ложь;
	ЗаписьСинхронизации.Ошибки = ТекстОшибки;
	ЗаписьСинхронизации.Записать();
КонецПроцедуры
//***** АБС Гетц. \\

Процедура ОбновитьАналитикуСчетаПриЗаписиЗЗ(ЗЗСсылка, Отказ) Экспорт
	
	Если ЗЗСсылка.КонсолидированныйЗЗПоОЗК Тогда
		Возврат;
	КонецЕсли;		
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_СчетНаОплату.Ссылка КАК СчетНаОплатуСсылка
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|ГДЕ
	|	абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И ((НЕ абс_СчетНаОплату.Организация = абс_СчетНаОплату.ЗакупочныйЗаказ.Организация)
	|			ИЛИ (НЕ абс_СчетНаОплату.ЦФО = абс_СчетНаОплату.ЗакупочныйЗаказ.ЦФО)
	|			ИЛИ (НЕ абс_СчетНаОплату.ЦФУ = абс_СчетНаОплату.ЗакупочныйЗаказ.ЦФУ)
	|			ИЛИ (НЕ абс_СчетНаОплату.ТипСети = абс_СчетНаОплату.ЗакупочныйЗаказ.ТипСети)
	|			ИЛИ (НЕ абс_СчетНаОплату.КВ = абс_СчетНаОплату.ЗакупочныйЗаказ.КВ)
	|			ИЛИ (НЕ абс_СчетНаОплату.ТЭО = абс_СчетНаОплату.ЗакупочныйЗаказ.ТЭО)
	|			ИЛИ (НЕ абс_СчетНаОплату.ТипКонтрагента = абс_СчетНаОплату.ЗакупочныйЗаказ.ТипКонтрагента)
	|			ИЛИ (НЕ абс_СчетНаОплату.ТипРасхода = абс_СчетНаОплату.ЗакупочныйЗаказ.ТипРасхода)
	|			ИЛИ (НЕ абс_СчетНаОплату.БюджетнаяСтатья = абс_СчетНаОплату.ЗакупочныйЗаказ.БюджетнаяСтатья))");
	
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", ЗЗСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СчетНаОплатуОбъект = Выборка.СчетНаОплатуСсылка.ПолучитьОбъект();
		
		ЗаполнитьЗначенияСвойств(СчетНаОплатуОбъект, СчетНаОплатуОбъект.ЗакупочныйЗаказ, 
		"Организация,ЦФО,ЦФУ,ТипСети,КВ,ТЭО,ТипКонтрагента,ТипРасхода,БюджетнаяСтатья");
		
		СчетНаОплатуОбъект.ОбменДанными.Загрузка = Истина;
		СчетНаОплатуОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция МожноСогласовыватьДоговор(Ссылка, абс_ТипДоговора, абс_ТиповойДоговор, абс_БезЗакупочногоЗаказа, ВидДоговора, Отказ, ВыводитьСообщения = Истина, ДоговорОЗК) Экспорт
	
	// АБС ВСТАВКА АБС-Ф 20120116 
	//Возврат Истина;
	
	// АБС ВСТАВКА АБС-Ф  20120605
	Если НЕ Ссылка.Организация.абс_СтатусОрганизации = перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация тогда 
		возврат истина;
	конецесли;
	
	Если Ссылка.ЭтоГруппа Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ЗакупочныйЗаказДоговоры.Ссылка
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.Договоры КАК абс_ЗакупочныйЗаказДоговоры
	|ГДЕ
	|	абс_ЗакупочныйЗаказДоговоры.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И абс_ЗакупочныйЗаказДоговоры.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.Подготовка), ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции), ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента), ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО), ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.Отказ), ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.Уточнение))
	|	И абс_ЗакупочныйЗаказДоговоры.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И абс_ЗакупочныйЗаказДоговоры.Ссылка.КонсолидированныйЗЗПоОЗК = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_ЗакупочныйЗаказДоговоры.Ссылка");
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = "По данному договору есть ЗЗ не в статусе ""Согласование ОФК"":";
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + "" + Выборка.Ссылка;
			
		КонецЦикла;
		
		Если ВыводитьСообщения Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
		
		Возврат Ложь;
	Иначе
		
		СпТиповДоговоровПоЗЗ = Новый СписокЗначений();
		
		СпТиповДоговоровПоЗЗ.Добавить(Перечисления.абсТипыДоговоров.Договор);
		СпТиповДоговоровПоЗЗ.Добавить(Перечисления.абсТипыДоговоров.ДополнительноеСоглашение);
		СпТиповДоговоровПоЗЗ.Добавить(Перечисления.абсТипыДоговоров.Приложение);
		
		Если НЕ СпТиповДоговоровПоЗЗ.НайтиПоЗначению(абс_ТипДоговора) = Неопределено И 
			НЕ абс_ТиповойДоговор И НЕ абс_БезЗакупочногоЗаказа И 
			ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
			И Не ДоговорОЗК Тогда
			
			ЗапросПоВсемЗЗ = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	абс_ЗакупочныйЗаказДоговоры.Ссылка
			|ИЗ
			|	Документ.абс_ЗакупочныйЗаказ.Договоры КАК абс_ЗакупочныйЗаказДоговоры
			|ГДЕ
			|	абс_ЗакупочныйЗаказДоговоры.ДоговорКонтрагента = &ДоговорКонтрагента
			|	И абс_ЗакупочныйЗаказДоговоры.Ссылка.ПометкаУдаления = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	абс_ЗакупочныйЗаказДоговоры.Ссылка");
			
			ЗапросПоВсемЗЗ.УстановитьПараметр("ДоговорКонтрагента", Ссылка);
			
			РезультатПоВсемЗЗ = ЗапросПоВсемЗЗ.Выполнить();
			
			Если РезультатПоВсемЗЗ.Пустой() Тогда 
				
				ТекстСообщения = "По данному договору нет ЗЗ в статусе ""Согласование ОФК"".";
				
				Если ВыводитьСообщения Тогда
					ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
				КонецЕсли;	
				
				Возврат Ложь;				
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписатьВнутреннийНомерПользователя(ТекПользователь, ВнутреннийНомер) Экспорт
	
	Попытка
		
		ОбъектПользователя = ТекПользователь.ПолучитьОбъект();
		
		ОбъектПользователя.абс_ВнутреннийНомер = ВнутреннийНомер;
		
		ОбъектПользователя.Записать();
		
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

// АБС ВСТАВКА №3508
Функция ИзменитьДатуРасходаЗРС(ЗРССсылка, ДатаРасхода) Экспорт
	
	Если ЗРССсылка.ДатаРасхода = ДатаРасхода Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписьИзменена = Ложь;
	
	Попытка
		
		ЗРСОбъект = ЗРССсылка.ПолучитьОбъект();
		
		ЗРСОбъект.ДатаРасхода = ДатаРасхода;
		
		ЗРСОбъект.ОбменДанными.Загрузка = Истина;
		
		ЗРСОбъект.Записать();
		
		ЗаписьИзменена = Истина;
	Исключение
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при изменении даты расхода документа " + ЗРССсылка + Символы.ПС + 
		ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат ЗаписьИзменена;
	
КонецФункции
// АБС ВСТАВКА №3508 КОНЕЦ

// АБС ВСТАВКА №11928
Функция ИзменитьДатуДокуммента(СсылкаНаДокумент, Дт, ИзменятьДвижения = Ложь) Экспорт
	
	//+++ Григорьев Д.В. (#77117167)
	ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();		
	
	Если ИзменятьДвижения Тогда
		ДвиженияДокумента = ДокументОбъект.Движения;
		Для Каждого НаборЗаписейДвижения Из ДвиженияДокумента Цикл
			НаборЗаписейДвижения.Прочитать();
			Если НаборЗаписейДвижения.Количество() > 0 Тогда
				Для Каждого Запись Из НаборЗаписейДвижения Цикл				
					Запись.Период = Дт;
				КонецЦикла;
				НаборЗаписейДвижения.ОбменДанными.Загрузка = Истина;
				НаборЗаписейДвижения.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.Дата = Дт;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать();
	
	//Если ЗРССсылка.Дата = ДатаРасхода Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//ЗаписьИзменена = Ложь;
	//Попытка
	//	ЗРСОбъект = ЗРССсылка.ПолучитьОбъект();		
	//	ЗРСОбъект.Дата = ДатаРасхода;		
	//	ЗРСОбъект.ОбменДанными.Загрузка = Истина;		
	//	ЗРСОбъект.Записать();		
	//	ЗаписьИзменена = Истина;		
	//Исключение		
	//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при изменении даты расхода документа " + ЗРССсылка + Символы.ПС + ОписаниеОшибки());		
	//КонецПопытки;
	//
	//Возврат ЗаписьИзменена;
	//--- Григорьев Д.В. (#77117167)
	
КонецФункции
// АБС ВСТАВКА №11928 КОНЕЦ

Процедура ВыполнитьЗадачиПоТочкеМаршрута(БизнесПроцесс, ТочкаМаршрута, ТекЗадача) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	абсЗадачаДоговора.Ссылка
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|ГДЕ
	|	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	|	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	|	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	|	И (НЕ абсЗадачаДоговора.Ссылка = &Задача)");
	
	Запрос.УстановитьПараметр("БизнесПроцесс"	, БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута"	, ТочкаМаршрута);
	Запрос.УстановитьПараметр("Задача"			, ТекЗадача);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка 
			//// Start КТТК Ермолов Е.Л.  22.07.2015 Убираем бессмысленное накопление задач
			// {{ТТК Лапин А. Заявка № 04.08.2015 начало разблокировал
			ОбъектЗадача = Выборка.Ссылка.ПолучитьОбъект();
			
			ОбъектЗадача.Выполнена = Истина;
			
			ОбъектЗадача.Записать();
			// ОбъектЗадача = Выборка.Ссылка.ПолучитьОбъект(); // Лапин
			// ОбъектЗадача.Удалить();                         // Лапин
			// }}ТТК Лапин А. Заявка № 04.08.2015 окончание
			
			
			// Stop КТТК Ермолов Е.Л.  22.07.2015
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

//АБС Коломиец+
Функция ПроверитьДоговорыКонтрагентаЗакрытие(КонтрагентСсылка) Экспорт
	
	ДоговорыКонтрагента = Справочники.ДоговорыКонтрагентов.Выбрать(, КонтрагентСсылка);
	
	ДоговорыЗакрыты = Истина;
	
	Пока ДоговорыКонтрагента.Следующий() Цикл
		// нач АБС ВСТАВКА Нарыжный 19.03.2014 39861
		Если ДоговорыКонтрагента.ЭтоГруппа Тогда 
			Продолжить;
		КонецЕсли;
		// кон АБС ВСТАВКА Нарыжный 19.03.2014 39861
		ДоговорыЗакрыты = ДоговорыЗакрыты
		//АБС+ Тупиков 15684
		И (ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Закрыт
		ИЛИ ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка);
	КонецЦикла;
	
	Возврат ДоговорыЗакрыты;
	
КонецФункции

Функция ПроверитьДоговорыКонтрагентаЗавершениеОтношений(КонтрагентСсылка) Экспорт
	
	ДоговорыКонтрагента = Справочники.ДоговорыКонтрагентов.Выбрать(, КонтрагентСсылка);
	
	ДоговорыЗакрыты = Истина;
	
	Пока ДоговорыКонтрагента.Следующий() Цикл
		// нач АБС ВСТАВКА Нарыжный 19.03.2014 39861
		Если ДоговорыКонтрагента.ЭтоГруппа Тогда 
			Продолжить;
		КонецЕсли;
		// кон АБС ВСТАВКА Нарыжный 19.03.2014 39861
		ДоговорыЗакрыты = ДоговорыЗакрыты 
		И  (ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Закрыт
		ИЛИ ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка);		
	КонецЦикла;
	
	Возврат ДоговорыЗакрыты;
	
КонецФункции

Функция ПроверитьДоговорыКонтрагентаАрхив(КонтрагентСсылка) Экспорт
	
	ДоговорыКонтрагента = Справочники.ДоговорыКонтрагентов.Выбрать(, КонтрагентСсылка);
	
	ДоговорыНеВИсполнении = Истина;
	
	//родин лимиты по договорам
	Пока ДоговорыКонтрагента.Следующий() Цикл
		ДоговорыНеВИсполнении = ДоговорыНеВИсполнении 
		И НЕ ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение И Не 
		ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка И Не 
		ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки И Не 
		ДоговорыКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки;		
	КонецЦикла;
	//родин лимиты по договорам
	
	
	Возврат ДоговорыНеВИсполнении;
	
КонецФункции

Функция ВозможноИзменитьНефиксированнаяСумма(Ссылка) Экспорт  //АБС Коломиец 4870
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_СчетНаОплату.Ссылка КАК ПодчиненныйДокумент
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|ГДЕ
	|	абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И абс_СчетНаОплату.СтатусСчета В(&СтатусыСчета)");
	
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Ссылка);
	
	МассивСтатусовСчетов = Новый Массив();
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Исполнение);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Утвержден);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ГотовКОплате);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Оплачен);
	
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ВОплату);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеЗЗ);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
	
	Запрос.УстановитьПараметр("СтатусыСчета", МассивСтатусовСчетов);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

Функция ПолучитьМассивРодителейПодразделения(Знач ТекПодразделение) Экспорт
	
	Массив = Новый Массив;
	
	Пока ЗначениеЗаполнено(ТекПодразделение) Цикл
		Массив.Добавить(ТекПодразделение);
		ТекПодразделение = ТекПодразделение.Родитель;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

//АБС Коломиец-

//Функция поиска ссылок для козначейства в обработке журнала счетов
//
//АБС Роман
Функция абс_НайтиПоСсылкам(МассивСсылок) Экспорт
	// Лапин 7720425 16.02.2016 
	// нужно еще учесть, что документы могут открываться интерактивно, 
	// и появляются ссылки в рег.свед. "ИсторияОткрываемыхОбъектов"
	Для Каждого СтрМассива ИЗ МассивСсылок Цикл
		//СтрМассива.получить
		НаборЗаписей = РегистрыСведений.абс_ИсторияОткрываемыхОбъектов.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Объект.Установить(СтрМассива); 
		НаборЗаписей.Записать(); 
	КонецЦикла;
	// }}ТТК Лапин А. Заявка № 16.02.2016 окончание
	
	Возврат НайтиПоСсылкам(МассивСсылок).Количество();
	
КонецФункции

//АБС Роман

Процедура ВыполнитьНочнуюРазноскуПоБанку() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПлатежноеПоручениеВходящее.Ссылка,
	|	ПлатежноеПоручениеВходящее.Организация
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.Проведен = &Проведен
	|	И ПлатежноеПоручениеВходящее.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И (НЕ ПлатежноеПоручениеВходящее.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручениеВходящее.Дата";
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(абс_СерверныеФункции.ПолучитьДатуСервера()));
	Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(абс_СерверныеФункции.ПолучитьДатуСервера()));
	Запрос.УстановитьПараметр("Проведен",Ложь);
	Выборка = Запрос.Выполнить().Выбрать();
	Кол = Выборка.Количество();
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			Об.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		Сч = Сч+1;
		Если Сч/100 = Цел(Сч/100) Тогда
			ТекстСообщения = "Обрабатываются платежи "+Сч+" из "+Кол+" дата обработки "+Об.Дата;
			ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
			
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

//АБС ВСТАВКА №7869 НАЧАЛО
Процедура абс_СменаСтатусовВСчетахНаОплату() Экспорт
	
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 18:54:18  Поставка
	Если НЕ глЗначениеПеременной("абс_СменаСтатусовВСчетахНаОплатуИспользовать") Тогда
		//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
		Возврат;	
	КонецЕсли; 	
	
	ТекстСообщения = "Начала смены статусов с ""уточнить"" на ""отказ""."+абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(абс_ИзменениеСтатусовСчетаНаОплатуСрезПоследних.Период, ДЕНЬ)) КАК Период,
	|	абс_ИзменениеСтатусовСчетаНаОплатуСрезПоследних.СчетНаОплату КАК СчетНаОплату
	|ПОМЕСТИТЬ Временная
	|ИЗ
	|	РегистрСведений.абс_ИзменениеСтатусовСчетаНаОплату.СрезПоследних(&Дата, СчетНаОплату.СтатусСчета = &СтатусСчета) КАК абс_ИзменениеСтатусовСчетаНаОплатуСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_ИзменениеСтатусовСчетаНаОплатуСрезПоследних.СчетНаОплату
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНаОплату,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Временная.Период,
	|	Временная.СчетНаОплату
	|ИЗ
	|	Временная КАК Временная
	|ГДЕ
	|	Временная.Период < &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Временная";
	
	ПрошлыйМесяц = ДобавитьМесяц(НачалоДня(абс_СерверныеФункции.ПолучитьДатуСервера()), -1);				   
	
	Запрос.УстановитьПараметр("Дата",абс_СерверныеФункции.ПолучитьДатуСервера() - 1);//-1 что бы исключить блокировки в регистре, если в регистре идет запись
	Запрос.УстановитьПараметр("СтатусСчета",Перечисления.абсСтатусыСчетов.Уточнить);
	Запрос.УстановитьПараметр("Период",ПрошлыйМесяц);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	НовыйСтатус = Перечисления.абсСтатусыСчетов.Отказ;
	
	Пока Результат.Следующий() Цикл
		
		Попытка	
			
			СчетНаОплату = Результат.СчетНаОплату.ПолучитьОбъект();
			
			Если СчетНаОплату = Неопределено Тогда Продолжить; КонецЕсли;
			
			//Комментарий к статусу
			СчетНаОплату.ЗаписатьНовыйСтатус(НовыйСтатус,"Статус ""уточнить"" был более месяца");
			
			//Обновления поля и меняем статус
			Для Каждого ТекДанныеОплата Из СчетНаОплату.Оплаты Цикл  
				ТекДанныеОплата.СтатусОплаты = НовыйСтатус;
			КонецЦикла;  			
			Если ЗначениеЗаполнено(СчетНаОплату.ДатаПлатежа) Тогда
				СчетНаОплату.ДатаПлатежа = '00010101';
			КонецЕсли;	
			
			СчетНаОплату.СтатусСчета = НовыйСтатус;  					
			СчетНаОплату.ОбменДанными.Загрузка = Истина;   			
			СчетНаОплату.Записать();
			
		Исключение
			ТекстОшибки = "Ошибка при записи счета: " + СчетНаОплату + " смена статусов с ""уточнить"" на ""отказ"": " + ОписаниеОшибки() + ". ";
			ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецПопытки;   		
		
	КонецЦикла;
	
	ТекстСообщения = "Окончание смены статусов с ""уточнить"" на ""отказ""."+абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);	
	
КонецПроцедуры
//\\АБС ВСТАВКА №7869 КОНЕЦ

//АБС ВСТАВКА №10198 НАЧАЛО
Процедура абс_СозданиеПроведениеДокументовБиллинг() Экспорт
	
	ТекстСообщения = "Начало обработки Лога загрузки из АСР "+абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	абс_ЛогЗагрузкиИзАСР.Ссылка КАК ЛогЗагрузки
	|ИЗ
	|	Документ.абс_ЛогЗагрузкиИзАСР КАК абс_ЛогЗагрузкиИзАСР
	|ГДЕ
	|	(абс_ЛогЗагрузкиИзАСР.ОбрабатыватьДанныеРегламентнымЗаданием = ИСТИНА
	|			ИЛИ абс_ЛогЗагрузкиИзАСР.СоздаватьДокументыРегламентнымЗаданием = ИСТИНА
	|			ИЛИ абс_ЛогЗагрузкиИзАСР.ПроводитьДокументыРегламентнымЗаданием = ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	абс_ЛогЗагрузкиИзАСР.Дата";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЛогЗагрузки = Выборка.ЛогЗагрузки.ПолучитьОбъект();
		Если Выборка.ЛогЗагрузки.ОбрабатыватьДанныеРегламентнымЗаданием ТОгда
			Попытка
				ТабДанныеБиллинга = ЛогЗагрузки.ДанныеБиллинга.Выгрузить();
				СтруктураВозврата = абс_серверныеФункции.ОбработатьДанныеЗагруженныеИзБиллинга(ЛогЗагрузки.Организация, ТабДанныеБиллинга);
				ЛогЗагрузки.ДанныеБиллинга.Загрузить(СтруктураВозврата.ДанныеБиллинга);
				ЛогЗагрузки.ОбрабатыватьДанныеРегламентнымЗаданием = Ложь;
				ЛогЗагрузки.ОбменДанными.Загрузка = Истина;   			
				ЛогЗагрузки.Записать();
			Исключение
				ТекстОшибки = "Ошибка при обработке данных, Лог загрузки из АСР: " + ЛогЗагрузки + ": " + ОписаниеОшибки() + ". ";
				ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				Продолжить;
			КонецПопытки;
			ТекстОшибки = "Успешно выполнена обработка данных, Лог загрузки из АСР: " + ЛогЗагрузки + ". ";
			ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , , ТекстОшибки);
		КонецЕсли;
		
		Если Выборка.ЛогЗагрузки.СоздаватьДокументыРегламентнымЗаданием ТОгда
			Попытка
				
				ТабДанныеБиллинга = ЛогЗагрузки.ДанныеБиллинга.Выгрузить();
				Т_Возврата = абс_серверныеФункции.ПроверитьЗаполненностьСтрок(ТабДанныеБиллинга, Истина);
				
				ОшибокНет = Истина;
				Если Т_Возврата.Количество()>0 Тогда 
					ОшибокНет = Ложь;
				КонецЕсли;
				Если не ОшибокНет Тогда 
					Продолжить;
				КонецЕсли;	
				
				//2. Создаем Счета на оплату и Реализации товаров и услуг.
				
				ТабСозданныеДокументы = ЛогЗагрузки.СозданныеДокументы.Выгрузить();
				СтруктураВозврата = 	абс_серверныеФункции.СоздатьСчетаНаОплату(ЛогЗагрузки.Организация,ЛогЗагрузки.СчетКасса,ТабДанныеБиллинга,ТабСозданныеДокументы);
				ЛогЗагрузки.ДанныеБиллинга.Загрузить(СтруктураВозврата.ДанныеБиллинга);
				ЛогЗагрузки.СозданныеДокументы.Загрузить(СтруктураВозврата.СозданныеДокументы);
				
				ЛогЗагрузки.СоздаватьДокументыРегламентнымЗаданием = Ложь;
				ЛогЗагрузки.ОбменДанными.Загрузка = Истина;   			
				ЛогЗагрузки.Записать();
			Исключение
				ТекстОшибки = "Ошибка при создании документов, Лог загрузки из АСР: " + ЛогЗагрузки + ": " + ОписаниеОшибки() + ". ";
				ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				Продолжить;
			КонецПопытки;
			ТекстОшибки = "Успешно выполнено создание документов, Лог загрузки из АСР: " + ЛогЗагрузки + ". ";
			ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , , ТекстОшибки);
		КонецЕсли;
		
		Если Выборка.ЛогЗагрузки.ПроводитьДокументыРегламентнымЗаданием ТОгда
			Попытка
				абс_серверныеФункции.ПроводитьДокументыРегламентнымЗаданием(Выборка.ЛогЗагрузки);
				ЛогЗагрузки.СоздаватьДокументыРегламентнымЗаданием = Ложь;
				ЛогЗагрузки.ОбменДанными.Загрузка = Истина;   			
				ЛогЗагрузки.Записать();
			Исключение
				ТекстОшибки = "Ошибка при проведении документов, Лог загрузки из АСР: " + ЛогЗагрузки + ": " + ОписаниеОшибки() + ". ";
				ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				Продолжить;
			КонецПопытки;
			ТекстОшибки = "Успешно выполнено проведение документов, Лог загрузки из АСР: " + ЛогЗагрузки + ". ";
			ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , , ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	ТекстСообщения = "обработки Лога загрузки из АСР  "+абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);	
	
КонецПроцедуры
//\\АБС ВСТАВКА №10198 КОНЕЦ

Функция ЗаявкаНаРасходованиеСредств_ПроверкаДокументовПоСтатусамЗапросВыборка(Ссылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату КАК СчетНаОплату,
	|	ЗаявкаНаРасходованиеСредствОплаты.Оплата КАК Оплата,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ
	|ПОМЕСТИТЬ ВТ_Оплаты
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредствОплаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Оплаты.СчетНаОплату
	|ПОМЕСТИТЬ ВТ_СчетНаОплату
	|ИЗ
	|	ВТ_Оплаты КАК ВТ_Оплаты
	|ГДЕ
	|	(НЕ ВТ_Оплаты.СчетНаОплату = ЗНАЧЕНИЕ(документ.абс_СчетНаОплату.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Оплаты.СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Оплаты.ЗакупочныйЗаказ
	|ПОМЕСТИТЬ ВТ_ЗакупочныйЗаказ
	|ИЗ
	|	ВТ_Оплаты КАК ВТ_Оплаты
	|ГДЕ
	|	(НЕ ВТ_Оплаты.СчетНаОплату.Технический)
	|	И (НЕ ВТ_Оплаты.ЗакупочныйЗаказ = ЗНАЧЕНИЕ(Документ.абс_ЗакупочныйЗаказ.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Оплаты.ЗакупочныйЗаказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Оплаты.Оплата
	|ПОМЕСТИТЬ ВТ_ДокОплаты
	|ИЗ
	|	ВТ_Оплаты КАК ВТ_Оплаты
	|ГДЕ
	|	(НЕ ВТ_Оплаты.Оплата = ЗНАЧЕНИЕ(документ.абс_Оплата.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Оплаты.Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СчетНаОплату.СчетНаОплату,
	|	NULL КАК ЗакупочныйЗаказ,
	|	NULL КАК Оплата
	|ПОМЕСТИТЬ ВТ_Сводная
	|ИЗ
	|	ВТ_СчетНаОплату КАК ВТ_СчетНаОплату
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ВТ_ЗакупочныйЗаказ.ЗакупочныйЗаказ,
	|	NULL
	|ИЗ
	|	ВТ_ЗакупочныйЗаказ КАК ВТ_ЗакупочныйЗаказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	ВТ_ДокОплаты.Оплата
	|ИЗ
	|	ВТ_ДокОплаты КАК ВТ_ДокОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ЕСТЬNULL(ВТ_Сводная.СчетНаОплату, ВТ_Сводная.ЗакупочныйЗаказ), ВТ_Сводная.Оплата) КАК Документ
	|ИЗ
	|	ВТ_Сводная КАК ВТ_Сводная
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ЕСТЬNULL(ВТ_Сводная.СчетНаОплату, ВТ_Сводная.ЗакупочныйЗаказ), ВТ_Сводная.Оплата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Оплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЗакупочныйЗаказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДокОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Сводная");
	
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Возврат Запрос.Выполнить();
	
КонецФункции

//АБС Айвазян+
Функция Заявка7640(Ссылка) Экспорт
	
	//Разрешение Счета и Разрешение документов	
	Запрос	= Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВложенныйЗапрос1.РазрешениеАвансовыйОтчет, ЛОЖЬ) КАК РазрешениеАвансовыйОтчет
	|ПОМЕСТИТЬ ВТ_АвансовыйОтчет
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ИСТИНА КАК РазрешениеАвансовыйОтчет
	|	ИЗ
	|		Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|	ГДЕ
	|		АвансовыйОтчет.Проведен
	|		И АвансовыйОтчет.абс_ЗакупочныйЗаказ = &абс_ЗакупочныйЗаказ) КАК ВложенныйЗапрос1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВложенныйЗапрос.РазрешениеНМА, ЛОЖЬ) КАК РазрешениеНМА
	|ПОМЕСТИТЬ ВТ_ПоступлениеНМА
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ИСТИНА КАК РазрешениеНМА
	|	ИЗ
	|		Документ.ПоступлениеНМА КАК ПоступлениеНМА
	|	ГДЕ
	|		ПоступлениеНМА.абс_ЗакупочныйЗаказ = &абс_ЗакупочныйЗаказ
	|		И ПоступлениеНМА.Проведен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВложенныйЗапрос.РазрешениеПоступлениеДопРасходов, ЛОЖЬ) КАК РазрешениеПоступлениеДопРасходов
	|ПОМЕСТИТЬ ВТ_ПоступлениеДопРасходов
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ИСТИНА КАК РазрешениеПоступлениеДопРасходов
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|	ГДЕ
	|		ПоступлениеДопРасходов.Проведен
	|		И ПоступлениеДопРасходов.абс_ЗакупочныйЗаказ = &абс_ЗакупочныйЗаказ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВложенныйЗапрос.РазрешениеПТИУ, ЛОЖЬ) КАК РазрешениеПТИУ
	|ПОМЕСТИТЬ ВТ_ПоступлениеТоваровИУслуг
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ИСТИНА КАК РазрешениеПТИУ
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Проведен
	|		И ПоступлениеТоваровУслуг.абс_ЗакупочныйЗаказ = &абс_ЗакупочныйЗаказ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_АвансовыйОтчет.РазрешениеАвансовыйОтчет,
	|	ВТ_ПоступлениеДопРасходов.РазрешениеПоступлениеДопРасходов,
	|	ВТ_ПоступлениеНМА.РазрешениеНМА,
	|	ВТ_ПоступлениеТоваровИУслуг.РазрешениеПТИУ
	|ПОМЕСТИТЬ ВТ_СТрока
	|ИЗ
	|	ВТ_АвансовыйОтчет КАК ВТ_АвансовыйОтчет
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ПоступлениеНМА КАК ВТ_ПоступлениеНМА
	|		ПО ВТ_АвансовыйОтчет.РазрешениеАвансовыйОтчет = ВТ_ПоступлениеНМА.РазрешениеНМА
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ПоступлениеТоваровИУслуг КАК ВТ_ПоступлениеТоваровИУслуг
	|		ПО ВТ_АвансовыйОтчет.РазрешениеАвансовыйОтчет = ВТ_ПоступлениеТоваровИУслуг.РазрешениеПТИУ
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ПоступлениеДопРасходов КАК ВТ_ПоступлениеДопРасходов
	|		ПО ВТ_АвансовыйОтчет.РазрешениеАвансовыйОтчет = ВТ_ПоступлениеДопРасходов.РазрешениеПоступлениеДопРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СТрока.РазрешениеАвансовыйОтчет, ЛОЖЬ) = ИСТИНА
	|				ИЛИ ЕСТЬNULL(ВТ_СТрока.РазрешениеПоступлениеДопРасходов, ЛОЖЬ) = ИСТИНА
	|				ИЛИ ЕСТЬNULL(ВТ_СТрока.РазрешениеНМА, ЛОЖЬ) = ИСТИНА
	|				ИЛИ ЕСТЬNULL(ВТ_СТрока.РазрешениеПТИУ, ЛОЖЬ) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазрешениеДокументов
	|ПОМЕСТИТЬ ВТ_РазрешениеДокументов
	|ИЗ
	|	ВТ_СТрока КАК ВТ_СТрока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВложенныйЗапрос.УсловиеСчета, ЛОЖЬ) = ЛОЖЬ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РазрешениеСчета
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(1) КАК УсловиеСчета
	|	ИЗ
	|		Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|	ГДЕ
	|		абс_СчетНаОплату.Проведен
	|		И абс_СчетНаОплату.ЗакупочныйЗаказ = &абс_ЗакупочныйЗаказ
	|		И абс_СчетНаОплату.СтатусСчета <> ЗНАЧЕНИЕ(Перечисление.абсСтатусыСчетов.Отказ)
	|		И абс_СчетНаОплату.СтатусСчета <> ЗНАЧЕНИЕ(Перечисление.абсСтатусыСчетов.Подготовка)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Счета.РазрешениеСчета
	|ПОМЕСТИТЬ ВТ_РазрешениеСчета
	|ИЗ
	|	ВТ_Счета КАК ВТ_Счета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ВТ_РазрешениеДокументов.РазрешениеДокументов, ЛОЖЬ) КАК РазрешениеДокументов,
	|	ЕСТЬNULL(ВТ_РазрешениеСчета.РазрешениеСчета, ЛОЖЬ) КАК РазрешениеСчета
	|ПОМЕСТИТЬ ВТ_СтрокаРазрешений
	|ИЗ
	|	ВТ_РазрешениеСчета КАК ВТ_РазрешениеСчета
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_РазрешениеДокументов КАК ВТ_РазрешениеДокументов
	|		ПО ВТ_РазрешениеСчета.РазрешениеСчета = ВТ_РазрешениеДокументов.РазрешениеДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ВТ_СтрокаРазрешений.РазрешениеДокументов
	|				И ВТ_СтрокаРазрешений.РазрешениеСчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Разрешение
	|ИЗ
	|	ВТ_СтрокаРазрешений КАК ВТ_СтрокаРазрешений";
	
	Запрос.УстановитьПараметр("абс_ЗакупочныйЗаказ",Ссылка);
	РезультатЗапрос=Запрос.Выполнить();
	
	Выборка=РезультатЗапрос.Выбрать();
	Пока Выборка.Следующий() Цикл
		//Сообщить(""+"Разрешение счета и документа на смену типа - "+Выборка.Разрешение);
		Возврат Выборка.Разрешение;
	КонецЦикла;  	
	
КонецФункции
//АБС Айвазян-

Функция ПолучитьВидДеятельностиПоЦФУ(ЦФУ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	абс_ЦФУ.Ссылка КАК ЦФУ,
	|	абс_ВидыДеятельностиКТТК.Ссылка КАК ВидДеятельности
	|ИЗ
	|	Справочник.абс_ЦФУ КАК абс_ЦФУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.абс_ВидыДеятельностиКТТК КАК абс_ВидыДеятельностиКТТК
	|		ПО абс_ЦФУ.Наименование = абс_ВидыДеятельностиКТТК.Наименование
	|ГДЕ
	|	абс_ЦФУ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЦФУ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.ВидДеятельности) Тогда
		Возврат Выборка.ВидДеятельности;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Функция создает договор в случае отсутствия
//
Функция СформироватьДоговорТрехсторонний(ДанныеЗаполнения, Организация) Экспорт
	
	Если ДанныеЗаполнения.Договоры.Количество() <= 0 Тогда
		
		мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Владелец = ДанныеЗаполнения.Контрагент;
		НовыйДоговор.абс_ВидДоговора=Справочники.абс_ПредметДоговораГК.ДоговорПодрядаПоИСзаДЗО;
		НовыйДоговор.абс_ТипДоговора = Перечисления.абсТипыДоговоров.ДоговорТрехсторонний;
		//НовыйДоговор.Номер = ""+Перечисления.абсТипыДоговоров.ДоговорТрехсторонний+" "+?(ЗначениеЗаполнено(ДанныеЗаполнения.Договоры[0].ВходящийНомер),ДанныеЗаполнения.Договоры[0].ВходящийНомер,"");
		НовыйДоговор.Номер = ""+Перечисления.абсТипыДоговоров.ДоговорТрехсторонний;
		НовыйДоговор.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		
		НовыйДоговор.Организация = Организация;
		НовыйДоговор.абс_ДЗО = ДанныеЗаполнения.Организация;
		НовыйДоговор.Наименование = ""+Перечисления.абсТипыДоговоров.ДоговорТрехсторонний;
		НовыйДоговор.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Исполнение;
		НовыйДоговор.абс_Ответственный =глЗначениеПеременной("ГлТекущийПользователь");
		НовыйДоговор.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		//НовыйДоговор.ВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(ДанныеЗаполнения.Договоры[0].ВалютаДоговора),ДанныеЗаполнения.Договоры[0].ВалютаДоговора,мВалютаРегламентированногоУчета);
		НовыйДоговор.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
		НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		
		НовыйДоговор.абс_ВидДеятельности = ПолучитьВидДеятельностиПоЦФУ(ДанныеЗаполнения.ЦФУ);
		
		Филиалы = Новый ТаблицаЗначений;
		Филиалы.Колонки.Добавить("Филиал");
		Для Каждого ЗЗОЗК Из ДанныеЗаполнения.ЗакупочныеЗаказыОЗК Цикл
			Стр = Филиалы.Добавить();
			Стр.Филиал = ЗЗОЗК.ЗакупочныйЗаказ.Организация;
		КонецЦикла;
		Филиалы.Свернуть("Филиал");
		НовыйДоговор.абс_Филиалы.Загрузить(Филиалы);
		НовыйДоговор.ОбменДанными.Загрузка = Истина;
		НовыйДоговор.Записать();
		НовыйДоговор.ОбменДанными.Загрузка = Ложь;
		НовыйДоговор.абс_АвтоматическиСоздаватьДоговораСФилиалами = Истина;			
		//НовыйДоговор.ОбменДанными.Загрузка = Истина;
		Попытка
			
			НовыйДоговор.абс_ПричинаИзмененияСтатуса = "Автоматическое создание по документу " + ДанныеЗаполнения;
			
			НовыйДоговор.Записать();
			
			Возврат НовыйДоговор.Ссылка;
			
		Исключение
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при создании служебного договора. " + ОписаниеОшибки());
			Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции
//)абсо
//++ Задача № 10221 Логинчев А.С. 16.05.2012 17:20:03
Процедура АвтоматическоеСогласованиеЗаявокНаИзменениеКонтрагента() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.Ссылка
	|ИЗ
	|	Документ.абс_ЗаявкаНаИзменениеРеквизитовКонтрагента КАК абс_ЗаявкаНаИзменениеРеквизитовКонтрагента
	|ГДЕ абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.Проведен 
	|	И (НЕ абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.ИНН В (&МассивИсключенийИНН))
	|	И абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.ИНН = абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.ИНННовое
	|	И абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.КПП = абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.КППНовое
	|	И абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.абс_ТипыКонтрагентов = абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.абс_ТипыКонтрагентовНовое
	|	И абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.абс_ТипыКонтрагентов <> &Физлицо
	|	И (абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.Покупатель = абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.ПокупательНовое
	|			ИЛИ (НЕ абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.Покупатель))
	|	И (абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.Поставщик = абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.ПоставщикНовое
	|			ИЛИ (НЕ абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.Поставщик))
	|	И абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.ЮрФизЛицо = абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.ЮрФизЛицоНовое
	|	И абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.НеЯвляетсяРезидентом = абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.НеЯвляетсяРезидентомНовое
	|	И абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.абс_КураторНаименование = абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.абс_КураторНаименованиеНовое
	|	И абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.абс_КураторКод = абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.абс_КураторКодНовое
	|	И абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.Статус = &СтатусПроверкаНСИ";
	Пользователь = Константы.ПользовательДляАвтоматическойКорректировкиЗаявокНаКорректировкуРеквизитовКонтрагентов.Получить();
	МассивИНН = Новый Массив;
	МассивИНН.Добавить("7708503727");
	МассивИНН.Добавить("7707083893");
	Запрос.УстановитьПараметр("МассивИсключенийИНН",МассивИНН);
	Запрос.УстановитьПараметр("СтатусПроверкаНСИ",Перечисления.абс_СтатусыЗаявокНаИзменениеРеквизитовКонтрагентов.ПроверкаНСИ);
	Запрос.УстановитьПараметр("Физлицо",Справочники.абс_ТипыКонтрагентов.ФизическиеЛица);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Статус = Перечисления.абс_СтатусыЗаявокНаИзменениеРеквизитовКонтрагентов.СогласованиеДЭБ;
		//Объект.Ответственный = Пользователь;
		//НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовЗаявкиНаИзменениеРеквизитов.СоздатьНаборЗаписей();
		//Запись = НаборЗаписей.Добавить();
		//Запись.Заявка = Объект.Ссылка;
		//Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
		//Запись.СтатусЗаявки = Перечисления.абс_СтатусыЗаявокНаИзменениеРеквизитовКонтрагентов.СогласованиеДЭБ;
		//Запись.Пользователь = Пользователь;
		//НаборЗаписей.Записать(Ложь);
		
		//АБС+ Тупиков
		Объект.Записать();
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		ЗаписьЖурналаРегистрации("Автоматическое изменение статуса заявки на изменение реквизитов контрагента",УровеньЖурналаРегистрации.Информация,Выборка.Ссылка.Метаданные(),Выборка.Ссылка);
	КонецЦикла;
	
	/////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////
	//АБС ВСТАВКА №13561 НАЧАЛО
	Юридическое    = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК01040200");//Юридическое лицо-резидент-неоператор
	Оператор       = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК01040100");//Юридическое лицо-резидент-оператор
	Индивидуальные = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК01060000");//Индивидуальные предприниматели
	Физические     = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК01050000");//Физические лица
	
	МассивТиповКонтрагентов = Новый Массив;
	МассивТиповКонтрагентов.Добавить(Юридическое);
	МассивТиповКонтрагентов.Добавить(Индивидуальные);	
	МассивТиповКонтрагентов.Добавить(Физические);
	МассивТиповКонтрагентов.Добавить(Оператор);
	
	//АБС+ Тупиков 
	МассивСтатусовКонтрагентов = Новый Массив;
	МассивСтатусовКонтрагентов.Добавить(Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ);
	МассивСтатусовКонтрагентов.Добавить(Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ);
	МассивСтатусовКонтрагентов.Добавить(Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов);
	МассивСтатусовКонтрагентов.Добавить(Перечисления.абсСтатусыКонтрагентов.Активный);
	
	//Обновим переменную
	Пользователь = Константы.ПользовательДляАвтоматическойКорректировкиЗаявокНаКорректировкуРеквизитовКонтрагентов.Получить();
	
	//---В запросе убираем дубли ИНН---
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.абс_ТипыКонтрагентов КАК абс_ТипыКонтрагентов
	|ПОМЕСТИТЬ вр_КонтрагентыПроверкаДФМ
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	(НЕ Контрагенты.ЭтоГруппа)
	|	И (НЕ Контрагенты.ПометкаУдаления)
	|	И Контрагенты.абс_СтатусКонтрагента = &абс_СтатусКонтрагента
	|	И Контрагенты.абс_ТипыКонтрагентов В(&МассивТиповКонтрагентов)
	|	И Контрагенты.ИНН <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вр_КонтрагентыПроверкаДФМ.Ссылка,
	|	вр_КонтрагентыПроверкаДФМ.ИНН,
	|	вр_КонтрагентыПроверкаДФМ.КПП,
	|	вр_КонтрагентыПроверкаДФМ.Наименование,
	|	вр_КонтрагентыПроверкаДФМ.абс_ТипыКонтрагентов,
	|	Контрагенты.Ссылка КАК КонтрагентДубль
	|ПОМЕСТИТЬ ВТ_Дубли
	|ИЗ
	|	вр_КонтрагентыПроверкаДФМ КАК вр_КонтрагентыПроверкаДФМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО вр_КонтрагентыПроверкаДФМ.Ссылка <> Контрагенты.Ссылка
	|			И вр_КонтрагентыПроверкаДФМ.ИНН = Контрагенты.ИНН
	|ГДЕ
	|	Контрагенты.абс_СтатусКонтрагента В(&МассивСтатусовКонтрагентов)
	|	И Контрагенты.ИНН <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вр_КонтрагентыПроверкаДФМ.Ссылка,
	|	вр_КонтрагентыПроверкаДФМ.ИНН,
	|	вр_КонтрагентыПроверкаДФМ.КПП,
	|	вр_КонтрагентыПроверкаДФМ.Наименование,
	|	вр_КонтрагентыПроверкаДФМ.абс_ТипыКонтрагентов
	|ИЗ
	|	вр_КонтрагентыПроверкаДФМ КАК вр_КонтрагентыПроверкаДФМ
	|ГДЕ
	|	(НЕ вр_КонтрагентыПроверкаДФМ.Ссылка В
	|				(ВЫБРАТЬ
	|				 	ВТ_Дубли.Ссылка КАК ВТ_Дубли
	|				ИЗ
	|					ВТ_Дубли))";
	
	Запрос.УстановитьПараметр("МассивТиповКонтрагентов",МассивТиповКонтрагентов);	
	Запрос.УстановитьПараметр("абс_СтатусКонтрагента",Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ);
	Запрос.УстановитьПараметр("МассивСтатусовКонтрагентов", МассивСтатусовКонтрагентов);
	//АБС- Тупиков 13883
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		Контрагент = Результат.Ссылка;
		абс_ТипыКонтрагентов = Результат.абс_ТипыКонтрагентов;
		ИНН = Результат.ИНН;
		КПП = Результат.КПП;
		
		Если (Юридическое = абс_ТипыКонтрагентов или Оператор = абс_ТипыКонтрагентов) и СтрДлина(ИНН) = 10 и СтрДлина(КПП) = 9 Тогда
			ИзменитьСтатусКонтрагента(Контрагент,Пользователь);	
		КонецЕсли;	
		Если Индивидуальные = абс_ТипыКонтрагентов и СтрДлина(ИНН) = 12 и НЕ ЗначениеЗаполнено(КПП) Тогда
			ИзменитьСтатусКонтрагента(Контрагент,Пользователь);
		КонецЕсли;
		Если Физические = абс_ТипыКонтрагентов и СтрДлина(ИНН) = 12 и НЕ ЗначениеЗаполнено(КПП)
			и КонтрольПоКоличествеСимволов(Лев(Результат.Наименование,5),Контрагент) Тогда
			ИзменитьСтатусКонтрагента(Контрагент,Пользователь);
		КонецЕсли;
		
	КонецЦикла;
	
	//Обновим переменную
	Пользователь = Константы.ПользовательДляАвтоматическойКорректировкиЗаявокНаКорректировкуРеквизитовКонтрагентов.Получить();
	
	/////////В отказ контрагенты
	//---В запросе убираем дубли ИНН---
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.абс_ТипыКонтрагентов
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	(НЕ Контрагенты.ЭтоГруппа)
	|	И (НЕ Контрагенты.ПометкаУдаления)
	|	И Контрагенты.абс_СтатусКонтрагента = &абс_СтатусКонтрагента
	|	И Контрагенты.абс_ТипыКонтрагентов В(&МассивТиповКонтрагентовНаОтказ)
	|	И ((НЕ Контрагенты.КПП = """")
	|			ИЛИ Контрагенты.ИНН = ""000000000000"")";
	
	МассивТиповКонтрагентовНаОтказ = Новый Массив;
	МассивТиповКонтрагентовНаОтказ.Добавить(Физические);//Физические лица
	МассивТиповКонтрагентовНаОтказ.Добавить(Индивидуальные);//Индивидуальные предприниматели
	
	Запрос.УстановитьПараметр("МассивТиповКонтрагентовНаОтказ",МассивТиповКонтрагентовНаОтказ);	
	Запрос.УстановитьПараметр("абс_СтатусКонтрагента",Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		Комментарий = "";
		
		Если Результат.ИНН = "000000000000" Тогда
			Комментарий = "Не корректно ИНН";
		ИначеЕсли ЗначениеЗаполнено(Результат.КПП) и Результат.абс_ТипыКонтрагентов = Индивидуальные Тогда
			Комментарий = "У ИП не может быть КПП";
		ИначеЕсли ЗначениеЗаполнено(Результат.КПП) и Результат.абс_ТипыКонтрагентов = Физические Тогда
			Комментарий = "У физ. лиц не может быть КПП";			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Комментарий) Тогда
			НовыйСтатус = Перечисления.абсСтатусыКонтрагентов.Отказ;
			ИзменитьСтатусКонтрагента(Результат.Ссылка,Пользователь,НовыйСтатус,Комментарий);	
		КонецЕсли;	
		
	КонецЦикла;
	//\\АБС ВСТАВКА №13561 КОНЕЦ
	
КонецПроцедуры

Функция КонтрольПоКоличествеСимволов(Имя,Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование ПОДОБНО &Наименование + ""%""
	|	И (НЕ Контрагенты.ЭтоГруппа)
	|	И (НЕ Контрагенты.ПометкаУдаления)
	|	И Контрагенты.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Наименование",Имя);
	Запрос.УстановитьПараметр("Ссылка",Контрагент);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции	

Процедура ИзменитьСтатусКонтрагента(Контрагент,Пользователь,НовыйСтатус = Неопределено,Комментарий = "")
	
	Если НовыйСтатус = Неопределено Тогда
		НовыйСтатус = Перечисления.абсСтатусыКонтрагентов.Активный;
	КонецЕсли;
	
	НачатьТранзакцию();  	
	Объект = Контрагент.ПолучитьОбъект();
	Объект.абс_СтатусКонтрагента = НовыйСтатус;
	
	НаборЗаписей      = РегистрыСведений.абс_ИзменениеСтатусовКонтрагентов.СоздатьНаборЗаписей();
	Запись            = НаборЗаписей.Добавить();
	Запись.Контрагент = Контрагент;
	Запись.Период     = абс_СерверныеФункции.ПолучитьДатуСервера();
	Запись.СтатусКонтрагента = НовыйСтатус;
	Запись.Пользователь = Пользователь; 
	Запись.Комментарий  = Комментарий;
	НаборЗаписей.Записать(Ложь);
	
	Объект.Записать();
	ЗафиксироватьТранзакцию();
	
	ЗаписьЖурналаРегистрации("Автоматическое изменение статуса контрагента",УровеньЖурналаРегистрации.Информация,Контрагент.Метаданные(),Контрагент);
	
КонецПроцедуры
//-- Задача № 10221 Логинчев А.С.

//абс_Родин
Процедура ОтменаПравПользователей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.Роль КАК Роль,
	|	абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.Использование,
	|	абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.ТекущаяРоль,
	|	абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.Ссылка КАК Заявка,
	|	абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.Ссылка.Организация КАК Организация
	|ПОМЕСТИТЬ НеЗакрытыеЗаявки
	|ИЗ
	|	Документ.абс_ЗаявкаНаДобавлениеИзменениеПрав.РолиВЦепочкахСогласования КАК абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования
	|ГДЕ
	|	абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.Ссылка.СрокДействияПрав < &ТекущаяДата
	|	И абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.Ссылка.ВидОперации = &ВидОперации
	|	И абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.Ссылка.ПраваОтменены = ЛОЖЬ
	|	И абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.Ссылка.СрокДействияПрав <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Роль,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абсЗадачаДоговора.Исполнитель,
	|	абсЗадачаДоговора.Роль КАК Роль,
	|	абсЗадачаДоговора.Организация КАК Организация,
	|	абсЗадачаДоговора.БизнесПроцесс,
	|	абсЗадачаДоговора.ТочкаМаршрута,
	|	абсЗадачаДоговора.ОбъектЗадачи,
	|	абсЗадачаДоговора.Ссылка
	|ПОМЕСТИТЬ АктуальныеЗадачи
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|ГДЕ
	|	НЕ абсЗадачаДоговора.Выполнена
	|	И абсЗадачаДоговора.БизнесПроцесс.Стартован
	|	И абсЗадачаДоговора.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ абсЗадачаДоговора.БизнесПроцесс.Завершен
	|
	|СГРУППИРОВАТЬ ПО
	|	абсЗадачаДоговора.Роль,
	|	абсЗадачаДоговора.Организация,
	|	абсЗадачаДоговора.Исполнитель,
	|	абсЗадачаДоговора.БизнесПроцесс,
	|	абсЗадачаДоговора.ТочкаМаршрута,
	|	абсЗадачаДоговора.ОбъектЗадачи,
	|	абсЗадачаДоговора.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Роль,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеЗакрытыеЗаявки.Заявка КАК Заявка,
	|	ВЫБОР
	|		КОГДА НеЗакрытыеЗаявки.Использование
	|				И НЕ НеЗакрытыеЗаявки.ТекущаяРоль
	|				И АктуальныеЗадачи.Исполнитель = НеЗакрытыеЗаявки.Заявка.Пользователь
	|			ТОГДА ""Удалить""
	|		КОГДА НЕ НеЗакрытыеЗаявки.Использование
	|				И НеЗакрытыеЗаявки.ТекущаяРоль
	|			ТОГДА ""Добавить""
	|		ИНАЧЕ ""Пропустить""
	|	КОНЕЦ КАК Действие,
	|	АктуальныеЗадачи.Роль,
	|	АктуальныеЗадачи.БизнесПроцесс КАК ЗадачаБизнесПроцесс,
	|	АктуальныеЗадачи.ТочкаМаршрута КАК ЗадачаТочкаМаршрута,
	|	АктуальныеЗадачи.ОбъектЗадачи КАК ЗадачаОбъектЗадачи,
	|	ВЫБОР
	|		КОГДА НеЗакрытыеЗаявки.Использование
	|				И НЕ НеЗакрытыеЗаявки.ТекущаяРоль
	|				И АктуальныеЗадачи.Исполнитель = НеЗакрытыеЗаявки.Заявка.Пользователь
	|			ТОГДА АктуальныеЗадачи.Ссылка
	|	КОНЕЦ КАК ЗадачаКУдалению,
	|	НеЗакрытыеЗаявки.Использование,
	|	НеЗакрытыеЗаявки.ТекущаяРоль
	|ИЗ
	|	НеЗакрытыеЗаявки КАК НеЗакрытыеЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ АктуальныеЗадачи КАК АктуальныеЗадачи
	|		ПО НеЗакрытыеЗаявки.Организация = АктуальныеЗадачи.Организация
	|			И НеЗакрытыеЗаявки.Роль = АктуальныеЗадачи.Роль
	|			И (ВЫБОР
	|				КОГДА НеЗакрытыеЗаявки.Использование
	|						И НЕ НеЗакрытыеЗаявки.ТекущаяРоль
	|					ТОГДА АктуальныеЗадачи.Исполнитель = НеЗакрытыеЗаявки.Заявка.Пользователь
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НеЗакрытыеЗаявки.Использование
	|				И НЕ НеЗакрытыеЗаявки.ТекущаяРоль
	|				И АктуальныеЗадачи.Исполнитель = НеЗакрытыеЗаявки.Заявка.Пользователь
	|			ТОГДА ""Удалить""
	|		КОГДА НЕ НеЗакрытыеЗаявки.Использование
	|				И НеЗакрытыеЗаявки.ТекущаяРоль
	|			ТОГДА ""Добавить""
	|		ИНАЧЕ ""Пропустить""
	|	КОНЕЦ,
	|	НеЗакрытыеЗаявки.ТекущаяРоль,
	|	АктуальныеЗадачи.ТочкаМаршрута,
	|	АктуальныеЗадачи.Роль,
	|	НеЗакрытыеЗаявки.Заявка,
	|	АктуальныеЗадачи.БизнесПроцесс,
	|	АктуальныеЗадачи.ОбъектЗадачи,
	|	НеЗакрытыеЗаявки.Использование,
	|	ВЫБОР
	|		КОГДА НеЗакрытыеЗаявки.Использование
	|				И НЕ НеЗакрытыеЗаявки.ТекущаяРоль
	|				И АктуальныеЗадачи.Исполнитель = НеЗакрытыеЗаявки.Заявка.Пользователь
	|			ТОГДА АктуальныеЗадачи.Ссылка
	|	КОНЕЦ
	|ИТОГИ ПО
	|	Заявка";
	
	Запрос.УстановитьПараметр("ВидОперации",    Перечисления.абс_ВидыОперацийЗаявокНаДобавлениеИзменениеПрав.ИзменениеПравТекущегоПользователя);
	Запрос.УстановитьПараметр("ТекущаяДата",    ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоГода(абс_СерверныеФункции.ПолучитьДатуСервера() - (86400 * 31)));
	Запрос.УстановитьПараметр("ДатаОкончания", абс_СерверныеФункции.ПолучитьДатуСервера());
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Заявка");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Попытка
			
			ДокОбъект = ВыборкаДетальныеЗаписи.Заявка.ПолучитьОбъект();
			
			//Добавление/ удаление задач
			ПоЗадачам = ВыборкаДетальныеЗаписи.Выбрать();
			Пока ПоЗадачам.Следующий() Цикл
				Если ПоЗадачам.Действие = "Добавить" Тогда
					
					Если ПоЗадачам.ЗадачаБизнесПроцесс = Null Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();	
					НоваяЗадача.Номер         = "";
					НоваяЗадача.Дата          = ПоЗадачам.Заявка.Дата;
					НоваяЗадача.Наименование  =	ПоЗадачам.ЗадачаБизнесПроцесс.Номер;
					НоваяЗадача.Исполнитель   = ПоЗадачам.Заявка.Пользователь;
					НоваяЗадача.Роль          = ПоЗадачам.ЗадачаТочкаМаршрута.Роль;
					НоваяЗадача.Организация   = ПоЗадачам.Заявка.Организация;
					НоваяЗадача.ИнициаторБП   = ПоЗадачам.ЗадачаБизнесПроцесс.ПользовательИнициаторБП;
					НоваяЗадача.БизнесПроцесс = ПоЗадачам.ЗадачаБизнесПроцесс;
					НоваяЗадача.ОбъектЗадачи  = ПоЗадачам.ЗадачаОбъектЗадачи;
					НоваяЗадача.ТочкаМаршрута = ПоЗадачам.ЗадачаТочкаМаршрута;
					НоваяЗадача.Записать();
				ИначеЕсли ПоЗадачам.Действие = "Удалить" Тогда 		
					ЗадачаОбъект = ПоЗадачам.ЗадачаКудалению.ПолучитьОбъект();
					ЗадачаОбъект.Удалить();
				КонецЕсли;		
			КонецЦикла;	
			
			ДокОбъект.ПраваОтменены = Истина;
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПроведениеЗаявокНаИзменениеДобавлениеПравЗадачи() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ИсполнениеЗаявокНаДобавлениеПрав.Документ КАК Заявка,
	|	абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.Роль КАК Роль,
	|	абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.Использование,
	|	абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.ТекущаяРоль
	|ПОМЕСТИТЬ НеЗакрытыеЗаявки
	|ИЗ
	|	РегистрСведений.абс_ИсполнениеЗаявокНаДобавлениеПрав КАК абс_ИсполнениеЗаявокНаДобавлениеПрав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.абс_ЗаявкаНаДобавлениеИзменениеПрав.РолиВЦепочкахСогласования КАК абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования
	|		ПО абс_ИсполнениеЗаявокНаДобавлениеПрав.Регистратор = абс_ЗаявкаНаДобавлениеИзменениеПравРолиВЦепочкахСогласования.Ссылка
	|ГДЕ
	|	НЕ абс_ИсполнениеЗаявокНаДобавлениеПрав.Выполнена
	|	И абс_ИсполнениеЗаявокНаДобавлениеПрав.Документ.Статус = &Статус
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заявка,
	|	Роль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абсЗадачаДоговора.Ссылка,
	|	абсЗадачаДоговора.Исполнитель,
	|	абсЗадачаДоговора.Роль,
	|	абсЗадачаДоговора.Организация,
	|	абсЗадачаДоговора.БизнесПроцесс,
	|	абсЗадачаДоговора.ТочкаМаршрута,
	|	абсЗадачаДоговора.ОбъектЗадачи
	|ПОМЕСТИТЬ АктуальныеЗадачи
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|ГДЕ
	|	НЕ абсЗадачаДоговора.Выполнена
	|	И абсЗадачаДоговора.БизнесПроцесс.Стартован
	|	И абсЗадачаДоговора.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ абсЗадачаДоговора.БизнесПроцесс.Завершен
	|
	|СГРУППИРОВАТЬ ПО
	|	абсЗадачаДоговора.Роль,
	|	абсЗадачаДоговора.Организация,
	|	абсЗадачаДоговора.Ссылка,
	|	абсЗадачаДоговора.Исполнитель,
	|	абсЗадачаДоговора.БизнесПроцесс,
	|	абсЗадачаДоговора.ТочкаМаршрута,
	|	абсЗадачаДоговора.ОбъектЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеЗакрытыеЗаявки.Заявка КАК Заявка,
	|	НеЗакрытыеЗаявки.Роль,
	|	АктуальныеЗадачи.БизнесПроцесс КАК ЗадачаБизнесПроцесс,
	|	АктуальныеЗадачи.ТочкаМаршрута КАК ЗадачаТочкаМаршрута,
	|	НеЗакрытыеЗаявки.Использование,
	|	ВЫБОР
	|		КОГДА НЕ НеЗакрытыеЗаявки.Использование
	|			ТОГДА АктуальныеЗадачи.Ссылка
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗадачаКУдалению,
	|	НеЗакрытыеЗаявки.ТекущаяРоль,
	|	АктуальныеЗадачи.ОбъектЗадачи КАК ЗадачаОбъектЗадачи
	|ИЗ
	|	НеЗакрытыеЗаявки КАК НеЗакрытыеЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ АктуальныеЗадачи КАК АктуальныеЗадачи
	|		ПО НеЗакрытыеЗаявки.Роль = АктуальныеЗадачи.Роль
	|			И НеЗакрытыеЗаявки.Заявка.Организация = АктуальныеЗадачи.Организация
	|			И (ВЫБОР
	|				КОГДА НЕ НеЗакрытыеЗаявки.Использование
	|					ТОГДА НеЗакрытыеЗаявки.Заявка.Пользователь = АктуальныеЗадачи.Исполнитель
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	НеЗакрытыеЗаявки.Заявка,
	|	НеЗакрытыеЗаявки.Роль,
	|	НеЗакрытыеЗаявки.Использование,
	|	НеЗакрытыеЗаявки.ТекущаяРоль,
	|	АктуальныеЗадачи.БизнесПроцесс,
	|	АктуальныеЗадачи.ТочкаМаршрута,
	|	АктуальныеЗадачи.ОбъектЗадачи,
	|	ВЫБОР
	|		КОГДА НЕ НеЗакрытыеЗаявки.Использование
	|			ТОГДА АктуальныеЗадачи.Ссылка
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|ИТОГИ ПО
	|	Заявка";
	
	Запрос.УстановитьПараметр("Статус",Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.ИсполняетсяВводЗадач);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоГода(абс_СерверныеФункции.ПолучитьДатуСервера() - (86400 * 31)));
	Запрос.УстановитьПараметр("ДатаОкончания", абс_СерверныеФункции.ПолучитьДатуСервера());
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Заявка");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			
			//Добавление/ удаление задач
			ПоЗадачам = ВыборкаДетальныеЗаписи.Выбрать();
			Пока ПоЗадачам.Следующий() Цикл
				
				Если ПоЗадачам.ЗадачаБизнесПроцесс = Null Тогда
					Продолжить;
				КонецЕсли;
				//// Start КТТК Ермолов Е.Л.  25.03.2016 7726305  (не дублировать точку маршрута Исполнение)
				//Если ТипЗнч(ПоЗадачам.ЗадачаБизнесПроцесс) = Тип(БизнесПроцессы.абс_СогласованиеДоговоровПодряда)
				//	ИЛИ ПоЗадачам.ЗадачаТочкаМаршрута = БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеИсполнение Тогда
				//	Продолжить;	
				//КонецЕсли;
				//// Stop КТТК Ермолов Е.Л.  25.03.2016
				// Start КТТК Ермолов Е.Л.  24.06.2016 7737845
				Если ПоЗадачам.Роль = Справочники.РолиИсполнителей.СотрудникИнициаторКомпании Тогда 
					Продолжить;	
				КонецЕсли;
				// Stop КТТК Ермолов Е.Л.  24.06.2016
				Если ПоЗадачам.Использование Тогда
					
					Если ВыборкаДетальныеЗаписи.Заявка.ВидОперации = Перечисления.абс_ВидыОперацийЗаявокНаДобавлениеИзменениеПрав.ИзменениеПравТекущегоПользователя и ПоЗадачам.ТекущаяРоль Тогда
						Продолжить;
					КонецЕсли;
					
					Если НЕ ПоЗадачам.ЗадачаТочкаМаршрута.Групповая Тогда
						Продолжить;	
					КонецЕсли;	
					
					
					НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();	
					НоваяЗадача.Номер         = "";
					НоваяЗадача.Дата          = ПоЗадачам.Заявка.Дата;
					НоваяЗадача.Наименование  =	ПоЗадачам.ЗадачаБизнесПроцесс.Номер;
					НоваяЗадача.Исполнитель   = ПоЗадачам.Заявка.Пользователь;
					НоваяЗадача.Роль          = ПоЗадачам.ЗадачаТочкаМаршрута.Роль;
					НоваяЗадача.Организация   = ПоЗадачам.Заявка.Организация;
					НоваяЗадача.ИнициаторБП   = ПоЗадачам.ЗадачаБизнесПроцесс.ПользовательИнициаторБП;
					НоваяЗадача.БизнесПроцесс = ПоЗадачам.ЗадачаБизнесПроцесс;
					НоваяЗадача.ОбъектЗадачи  = ПоЗадачам.ЗадачаОбъектЗадачи;
					НоваяЗадача.ТочкаМаршрута = ПоЗадачам.ЗадачаТочкаМаршрута;
					
					НоваяЗадача.Записать();
				Иначе
					ЗадачаОбъект = ПоЗадачам.ЗадачаКудалению.ПолучитьОбъект();
					ЗадачаОбъект.Удалить();
				КонецЕсли;
			КонецЦикла;	 
			
			//Исполнение заявки
			ДокОбъект        = ВыборкаДетальныеЗаписи.Заявка.ПолучитьОбъект();
			ДокОбъект.Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Исполнено;
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			//Исполнение задач
			НаборЗаписей = РегистрыСведений.абс_ИсполнениеЗаявокНаДобавлениеПрав.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Заявка);
			НаборЗаписей.Записать(Истина);
			
			НоваяЗапись             = НаборЗаписей.Добавить();
			НоваяЗапись.Документ    = ВыборкаДетальныеЗаписи.Заявка;
			НоваяЗапись.Регистратор = ВыборкаДетальныеЗаписи.Заявка;
			НоваяЗапись.Период      = абс_СерверныеФункции.ПолучитьДатуСервера();
			НоваяЗапись.Выполнена   = Истина;
			НаборЗаписей.Записать(Истина);
			
			//Изменение статуса
			НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПрав.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(ВыборкаДетальныеЗаписи.Заявка);
			НаборЗаписей.Прочитать();
			
			Запись = НаборЗаписей.Добавить();
			Запись.Период 				= абс_СерверныеФункции.ПолучитьДатуСервера();
			//АБС ВСТАВКА №42734 НАЧАЛО «19 мая 2014 г.», Пополитов
			//Запись.Заявка				= ВыборкаДетальныеЗаписи.Документ;
			Запись.Заявка				= ВыборкаДетальныеЗаписи.Заявка;
			//\\АБС ВСТАВКА №42734 КОНЕЦ   			
			Запись.Исполнитель	 		= Справочники.Пользователи.НайтиПоНаименованию("КТТК");	
			Запись.СтатусЗаявки  		= Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Исполнено;
			Запись.Комментарий 			= "Изменен регламентным заданием";
			НаборЗаписей.Записать();
			
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроведениеЗаявокНаИзменениеДобавлениеПрав() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ИсполнениеЗаявокНаДобавлениеПрав.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.абс_ИсполнениеЗаявокНаДобавлениеПрав КАК абс_ИсполнениеЗаявокНаДобавлениеПрав
	|ГДЕ
	|	абс_ИсполнениеЗаявокНаДобавлениеПрав.Выполнена = ЛОЖЬ";
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокОбъект =    ВыборкаДетальныеЗаписи.Документ.ПолучитьОбъект();
		Если ДокОбъект.Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Утверждена  Тогда
			ДокОбъект.Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Исполняется;
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПрав.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Заявка.Установить(ВыборкаДетальныеЗаписи.Документ);
				НаборЗаписей.Прочитать();
				
				Запись = НаборЗаписей.Добавить();
				Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
				Запись.Заявка				= ВыборкаДетальныеЗаписи.Документ;
				Запись.Исполнитель	 		= Справочники.Пользователи.НайтиПоНаименованию("КТТК");	
				Запись.СтатусЗаявки  		= Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Исполняется;
				Запись.Комментарий 			= "Изменен регламентным заданием";
				НаборЗаписей.Записать();
				
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ДокОбъект.Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Исполняется  Тогда
			Попытка
				ДокОбъект.Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.ИсполняетсяВводЗадач;
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				НаборЗаписей = РегистрыСведений.абс_ИсполнениеЗаявокНаДобавлениеПрав.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Документ);
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Документ  = ВыборкаДетальныеЗаписи.Документ;
				НоваяЗапись.Регистратор = ВыборкаДетальныеЗаписи.Документ;
				
				НаборЗаписей.Записать(Истина);
				
			Исключение
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//АБС_Родин
Функция ПолучитьОрганизациюБизнессПроцесса(БизнесПроцесс,Исполнитель) Экспорт
	
	мОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеДоговоров")  ТОГДА
		мОрганизация = БизнесПроцесс.ДоговорКонтрагента.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсЗакрытиеДоговоров")  ТОГДА 
		мОрганизация = БизнесПроцесс.ДоговорКонтрагента.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеКонтрагентов")  ТОГДА
		мОрганизация = БизнесПроцесс.Контрагент.абс_ОрганизацияИнициаторКонтрагента;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсЗавершениеОтношенийСКонтрагентами") ТОГДА
		мОрганизация = Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсПереутверждениеКонтрагентов")   ТОГДА
		мОрганизация = Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеЗакупочногоЗаказа") ТОГДА
		мОрганизация = БизнесПроцесс.ЗакупочныйЗаказ.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеСчетаНаОплату")  ТОГДА
		мОрганизация = БизнесПроцесс.СчетНаОплату.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсУточнениеСчетаНаОплату")  ТОГДА
		мОрганизация = БизнесПроцесс.СчетНаОплату.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеНоменклатуры")   ТОГДА
		мОрганизация = Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеПервичныхДокументов") ТОГДА
		мОрганизация = БизнесПроцесс.ПервичныйДокумент.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсРекласификацияБюджета") ТОГДА
		мОрганизация = БизнесПроцесс.РекласификацияБюджета.ИсточникОрганизация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсЗаявкаВПоддержку") ТОГДА
		мОрганизация = БизнесПроцесс.ЗадачаВПоддержку.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеБюджета") ТОГДА
		мОрганизация = БизнесПроцесс.ДокументВводаБюджета.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсИзменениеРеквизитовКонтрагентов") ТОГДА
		мОрганизация = Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеНоменклатурныхГрупп") ТОГДА
		мОрганизация = Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеСтатейЗатрат") ТОГДА
		мОрганизация = Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеПрочихДоходовИРасходов")  ТОГДА
		мОрганизация = Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абс_СогласованиеРПР")  ТОГДА 
		мОрганизация = БизнесПроцесс.ДокументРПР.Организация;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО") ТОГДА
		мОрганизация = БизнесПроцесс.ЗаявкаНаДобавлениеПрав.Организация;
	Конецесли;
	
	Возврат мОрганизация;
КонецФункции 
//АБС_Родин

Функция НайтиПоРеквизитуНаСервере(ИмяРеквизита,ЗначениеРеквизита,ИмяСправочника)
	
	Возврат Справочники[ИмяСправочника].НайтиПоРеквизиту(ИмяРеквизита,ЗначениеРеквизита);
	
КонецФункции 

Процедура ПолучитьТиповуюРольИРольБПДляПодразделения(Подразделение,ТиповаяРоль,РольБП) Экспорт
	
	Если СокрЛП(Подразделение) = Константы.абс_ПодразделениеДФМ.Получить().Наименование Тогда
		ТиповаяРоль = НайтиПоРеквизитуНаСервере("НаименованиеЗаданноеВКонфигураторе","абс_СотрудникДФМ","абс_ТиповыеРоли");
		РольБП      = ПредопределенноеЗначение("Справочник.РолиИсполнителей.РуководительДФМ");
	ИначеЕсли СокрЛП(Подразделение) = Константы.абс_ПодразделениеОФК.Получить().Наименование Тогда
		ТиповаяРоль = НайтиПоРеквизитуНаСервере("НаименованиеЗаданноеВКонфигураторе","абс_СотрудникОФК","абс_ТиповыеРоли");
		РольБП      = ПредопределенноеЗначение("Справочник.РолиИсполнителей.РуководительОФК");
	ИначеЕсли СокрЛП(Подразделение) = Константы.абс_ПодразделениеДРУ.Получить().Наименование Тогда
		ТиповаяРоль = НайтиПоРеквизитуНаСервере("НаименованиеЗаданноеВКонфигураторе","абс_СотрудникДРУ","абс_ТиповыеРоли");
		РольБП      = ПредопределенноеЗначение("Справочник.РолиИсполнителей.СогласованиеДРУ");
	ИначеЕсли СокрЛП(Подразделение) = Константы.абс_ПодразделениеПД.Получить().Наименование Тогда
		ТиповаяРоль = НайтиПоРеквизитуНаСервере("НаименованиеЗаданноеВКонфигураторе","абс_СотрудникПД","абс_ТиповыеРоли");
		РольБП      = ПредопределенноеЗначение("Справочник.РолиИсполнителей.РуководительПД");
	ИначеЕсли СокрЛП(Подразделение) = Константы.абс_ПодразделениеДирККР.Получить().Наименование Тогда
		ТиповаяРоль = НайтиПоРеквизитуНаСервере("НаименованиеЗаданноеВКонфигураторе","абс_ДирККР","абс_ТиповыеРоли");
		РольБП      = ПредопределенноеЗначение("Справочник.РолиИсполнителей.ДирККР");
	Иначе
		ТиповаяРоль = Неопределено;
		РольБП		= Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

//абс_Родин


//АБС Коломиец
Процедура абс_СинхронизацияАдреснойИнформации() Экспорт
	
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 16:08:57  Поставка	
	Если НЕ глЗначениеПеременной("абс_ИспользоватьСинхронизациюКонтактнойИнформации") Тогда
		Возврат;
	КонецЕсли;
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	//+++ Григорьев Д.В. (#77114031)
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросНеВыгруженныхОбъектов = Новый Запрос;
	ЗапросНеВыгруженныхОбъектов.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ttk_ИсторияИзмененияОбъектов.Период КАК Период,
		|	ttk_ИсторияИзмененияОбъектов.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.ttk_ИсторияИзмененияОбъектов КАК ttk_ИсторияИзмененияОбъектов
		|ГДЕ
		|	НЕ ttk_ИсторияИзмененияОбъектов.Выгружено
		|
		|СГРУППИРОВАТЬ ПО
		|	ttk_ИсторияИзмененияОбъектов.Объект,
		|	ttk_ИсторияИзмененияОбъектов.Период";
	ЗапросНеВыгруженныхОбъектов.УстановитьПараметр("Дт", ТекущаяДатаСеанса());
	
	ВыборкаНеВыгруженныхОбъектов = ЗапросНеВыгруженныхОбъектов.Выполнить();
	Если ВыборкаНеВыгруженныхОбъектов.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	ЗапросКонтактнойИнформацииПоНеВыгруженнымОбъектам = Новый Запрос;
	ЗапросКонтактнойИнформацииПоНеВыгруженнымОбъектам.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Поле1,
		|	КонтактнаяИнформация.Поле2,
		|	КонтактнаяИнформация.Поле3,
		|	КонтактнаяИнформация.Поле4,
		|	КонтактнаяИнформация.Поле5,
		|	КонтактнаяИнформация.Поле6,
		|	КонтактнаяИнформация.Поле7,
		|	КонтактнаяИнформация.Поле8,
		|	КонтактнаяИнформация.Поле9,
		|	КонтактнаяИнформация.Поле10
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект";
	
	РезультатВыборкиПоНеВыгруженнымОбъектам = ВыборкаНеВыгруженныхОбъектов.Выбрать();
	Пока РезультатВыборкиПоНеВыгруженнымОбъектам.Следующий() Цикл
		ЗапросКонтактнойИнформацииПоНеВыгруженнымОбъектам.УстановитьПараметр("Объект", РезультатВыборкиПоНеВыгруженнымОбъектам.Объект);
		ВыборкаКонтактнойИнформацииПоНеВыгруженнымОбъектам = ЗапросКонтактнойИнформацииПоНеВыгруженнымОбъектам.Выполнить();
		Если ВыборкаКонтактнойИнформацииПоНеВыгруженнымОбъектам.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатВыборкиКонтактнойИнформацииПоНеВыгруженнымОбъектам = ВыборкаКонтактнойИнформацииПоНеВыгруженнымОбъектам.Выгрузить();		
		РезультатВыборкиКонтактнойИнформацииПоНеВыгруженнымОбъектам.Колонки.Добавить("Период");
		Для Каждого СтрокаКонтактнойИнформацииНеВыгруженногоОбъекта Из РезультатВыборкиКонтактнойИнформацииПоНеВыгруженнымОбъектам Цикл
			СтрокаКонтактнойИнформацииНеВыгруженногоОбъекта.Период = РезультатВыборкиПоНеВыгруженнымОбъектам.Период;
			Если СтрокаКонтактнойИнформацииНеВыгруженногоОбъекта.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Или
			  СтрокаКонтактнойИнформацииНеВыгруженногоОбъекта.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Или
			  СтрокаКонтактнойИнформацииНеВыгруженногоОбъекта.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000033") Или
			  СтрокаКонтактнойИнформацииНеВыгруженногоОбъекта.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Или
			  СтрокаКонтактнойИнформацииНеВыгруженногоОбъекта.Вид = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами Тогда
				КонтактнаяИнформацияВыгружена = абс_СерверныеФункции.ВыполнитьВыгрузкуКонтактнойИнформацииВSQLЗапись(СтрокаКонтактнойИнформацииНеВыгруженногоОбъекта);
				Если КонтактнаяИнформацияВыгружена Тогда
					МенеджерЗаписиДляНеВыгруженныхОбъектов = РегистрыСведений.ttk_ИсторияИзмененияОбъектов.СоздатьМенеджерЗаписи();
					МенеджерЗаписиДляНеВыгруженныхОбъектов.Период = РезультатВыборкиПоНеВыгруженнымОбъектам.Период;
					МенеджерЗаписиДляНеВыгруженныхОбъектов.Объект = РезультатВыборкиПоНеВыгруженнымОбъектам.Объект;
					МенеджерЗаписиДляНеВыгруженныхОбъектов.Прочитать();
					Если МенеджерЗаписиДляНеВыгруженныхОбъектов.Выбран() Тогда 
						МенеджерЗаписиДляНеВыгруженныхОбъектов.Выгружено = Истина;
					КонецЕсли;
					МенеджерЗаписиДляНеВыгруженныхОбъектов.Записать();
					МенеджерЗаписиДляНеВыгруженныхОбъектов = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	//НаборЗаписейКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	//НаборЗаписейКИ.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	//НаборЗаписейКИ.Прочитать();
	//
	//Для Каждого КИ Из НаборЗаписейКИ Цикл
	//	Если НЕ КИ.абс_Синхронизировано И ТипЗнч(КИ.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
	//		Синхронизировано = абс_СерверныеФункции.ВыполнитьВыгрузкуКонтактнойИнформацииВSQLЗапись(КИ);
	//		Если Синхронизировано Тогда
	//			КИ.абс_Синхронизировано = Синхронизировано;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;	
	//
	//Если НаборЗаписейКИ.Модифицированность() Тогда
	//	НаборЗаписейКИ.ОбменДанными.Загрузка = Истина;
	//	НаборЗаписейКИ.Записать();
	//КонецЕсли;
	//--- Григорьев Д.В. (#77114031)
	
КонецПроцедуры

// Ищет директора дирекции, используется для поиска ответственного в согласовании ЗЗ
Функция ПолучитьПользователяДиректораДирекции(Пользователь, ТекущаяДата = Неопределено) Экспорт
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	// Ищем дирекцию подразделения пользователя
	// В дирекции ищем руководителя
	
	ПодразделениеПользователя = Пользователь.абс_Сотрудник.ПодразделениеОрганизации;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПодразделениеДирекции = ПолучитьПодразделениеДирекции(ПодразделениеПользователя);
	
	Если ПодразделениеДирекции = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФизЛицоРуководителя = ПолучитьРуководителяПодразделения(ПодразделениеДирекции, ТекущаяДата);
	
	Если НЕ ЗначениеЗаполнено(ФизЛицоРуководителя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьПользователяФизЛица(ФизЛицоРуководителя);
	
КонецФункции

// Ищет вышестоящее или текущее подразеделение дирекции
Функция ПолучитьПодразделениеДирекции(Сотрудник, Подразделение = Неопределено) Экспорт
	
	Если Подразделение = Неопределено Тогда
		ПодразделениеДирекции = Сотрудник.ПодразделениеОрганизации;
	Иначе
		ПодразделениеДирекции = Подразделение;
	КонецЕсли;	
	
	УчетнаяПолитика = "";               //АБС Коломиец 19797+
	Если ЗначениеЗаполнено(ПодразделениеДирекции) Тогда
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ТекущаяДата(), ПодразделениеДирекции.Владелец);
	КонецЕсли;
	ОшибкаВПолучении      = НЕ ЗначениеЗаполнено(УчетнаяПолитика);
	НеИспользоватьКатегории = ?(ОшибкаВПолучении, Истина, УчетнаяПолитика.абс_НеИспользоватьКатегорииПодразделений); 
	
	Если НЕ НеИспользоватьКатегории Тогда 
		
		Пока (НЕ ПодразделениеДирекции.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Дирекция) И ЗначениеЗаполнено(ПодразделениеДирекции.Родитель) Цикл
			ПодразделениеДирекции = ПодразделениеДирекции.Родитель;
		КонецЦикла;
		
		Если НЕ ПодразделениеДирекции.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Дирекция Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе                              //АБС Коломиец 19797-
		
		Пока (НЕ ПодразделениеДирекции.абс_ЯвляетсяДирекцией) И ЗначениеЗаполнено(ПодразделениеДирекции.Родитель) Цикл
			ПодразделениеДирекции = ПодразделениеДирекции.Родитель;
		КонецЦикла;
		
		Если НЕ ПодразделениеДирекции.абс_ЯвляетсяДирекцией Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодразделениеДирекции;
	
КонецФункции

// Ищет руководителя департамента, используется для поиска ответственного в согласовании ЗЗ
Функция ПолучитьПользователяРуководителяДепартамента(Пользователь, ТекущаяДата = Неопределено) Экспорт
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	// Ищем дирекцию подразделения пользователя
	// В дирекции ищем руководителя
	
	ПодразделениеПользователя = Пользователь.абс_Сотрудник.ПодразделениеОрганизации;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПодразделениеДепартамента = ПолучитьПодразделениеДепартамента(ПодразделениеПользователя);
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеДепартамента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФизЛицоРуководителя = ПолучитьРуководителяПодразделения(ПодразделениеДепартамента, ТекущаяДата);
	
	Если НЕ ЗначениеЗаполнено(ФизЛицоРуководителя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьПользователяФизЛица(ФизЛицоРуководителя);
	
КонецФункции

// Ищет вышестоящее или текущее подразеделение департамента
Функция ПолучитьПодразделениеДепартамента(Сотрудник, Подразделение = Неопределено) Экспорт
	
	Если Подразделение = Неопределено Тогда
		ПодразделениеДепартамента = Сотрудник.ПодразделениеОрганизации;
	Иначе
		ПодразделениеДепартамента = Подразделение;
	КонецЕсли;	
	
	УчетнаяПолитика = "";               //АБС Коломиец 19797+
	Если ЗначениеЗаполнено(ПодразделениеДепартамента) Тогда
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ТекущаяДата(), ПодразделениеДепартамента.Владелец);
	КонецЕсли;
	ОшибкаВПолучении      = НЕ ЗначениеЗаполнено(УчетнаяПолитика);
	НеИспользоватьКатегории = ?(ОшибкаВПолучении, Истина, УчетнаяПолитика.абс_НеИспользоватьКатегорииПодразделений); 
	
	Если НЕ НеИспользоватьКатегории Тогда 
		
		Пока (НЕ ПодразделениеДепартамента.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Департамент) И ЗначениеЗаполнено(ПодразделениеДепартамента.Родитель) Цикл
			ПодразделениеДепартамента = ПодразделениеДепартамента.Родитель;
		КонецЦикла;
		
		Если НЕ ПодразделениеДепартамента.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Департамент Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе                               //АБС Коломиец 19797-
		
		Пока (НЕ ПодразделениеДепартамента.абс_ЯвляетсяДепартаментом) И ЗначениеЗаполнено(ПодразделениеДепартамента.Родитель) Цикл
			ПодразделениеДепартамента = ПодразделениеДепартамента.Родитель;
		КонецЦикла;
		
		Если НЕ ПодразделениеДепартамента.абс_ЯвляетсяДепартаментом Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодразделениеДепартамента;
	
КонецФункции

Функция ПолучитьПользователяФизЛица(ФизЛицо) Экспорт
	
	ЗапросПользователь = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ПометкаУдаления = ЛОЖЬ
	|	И Пользователи.ФизЛицо В (&ФизЛицо)");
	
	ЗапросПользователь.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	ПользовательРуководитель = Неопределено;
	
	ВыборкаПользователь = ЗапросПользователь.Выполнить().Выбрать();
	
	Если ВыборкаПользователь.Следующий() Тогда
		ПользовательРуководитель = ВыборкаПользователь.Пользователь;
	КонецЕсли;
	
	Возврат ПользовательРуководитель;
	
КонецФункции

Функция ПолучитьРуководителяПодразделения(Подразделение, ТекущаяДата = Неопределено) Экспорт
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("СтруктурнаяЕдиница", Подразделение);
	Отбор.Вставить("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ТекущаяДата, Отбор);
	
	ФизЛицоРуководителя = Неопределено;
	
	Если СрезПоследних.Количество() > 0 Тогда
		ФизЛицоРуководителя = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицоРуководителя) Тогда
		Возврат ФизЛицоРуководителя;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСотрудникаПользователя(Пользователь) Экспорт
	
	Если НЕ Пользователь = Неопределено Тогда
		Возврат Пользователь.абс_Сотрудник;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСтатусОрганизацииСотрудникаПользователя(Пользователь) Экспорт
	
	Если НЕ Пользователь = Неопределено И ЗначениеЗаполнено(Пользователь.абс_Сотрудник) Тогда
		Возврат Пользователь.абс_Сотрудник.Организация.абс_СтатусОрганизации;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции



Функция ОбновитьСоздатьДоговорыСФилиалами(ДоговорСсылка, СтруктураРеквизитовДоговора, ТабДоговоров) Экспорт
	
	//родин лимиты по договорам
	СтатусИсполнение = (СтруктураРеквизитовДоговора.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ  
	СтруктураРеквизитовДоговора.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ
	СтруктураРеквизитовДоговора.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
	СтруктураРеквизитовДоговора.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
	//родин лимиты по договорам
	
	ДоговорИзменен = Ложь;
	ТабДоговоров.Колонки.Добавить("ДоговорСоздан");
	ТабДоговоров.Колонки.Добавить("ДоговорИзменен");
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаФилиал из ТабДоговоров Цикл
		
		СтрокаФилиал.ДоговорИзменен = Ложь;
		СтрокаФилиал.ДоговорСоздан  = Ложь;
		
		Если НЕ СтрокаФилиал.ДоговорФилиала.Пустая() Тогда
			ДоговорКИзменению = СтрокаФилиал.ДоговорФилиала.ПолучитьОбъект();
			СтрокаФилиал.ДоговорИзменен = Истина;
		ИначеЕсли СтатусИсполнение Тогда
			ДоговорКИзменению = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			ДоговорКИзменению.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение;
			СтрокаФилиал.ДоговорСоздан  = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючИЗначение ИЗ СтруктураРеквизитовДоговора Цикл
			Если СтруктураРеквизитовДоговора.Свойство(КлючИЗначение.Ключ) Тогда
				ДоговорКИзменению[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		
		//ЗаполнитьЗначенияСвойств(ДоговорКИзменению, Структура РеквизитовДоговора);
		ДоговорКИзменению.Организация = СтрокаФилиал.Филиал;
		ДоговорКИзменению.абс_ОснованиеДоговорСКТТК = ДоговорСсылка;
		ДоговорКИзменению.абс_АвтоматическиСоздаватьДоговораСФилиалами = Ложь;
		ДоговорКИзменению.абс_ТипДоговора = Перечисления.абсТипыДоговоров.Договор;
		
		Если ДоговорКИзменению.ЭтоНовый() Тогда 
			ДоговорКИзменению.УстановитьНовыйКод();
		КонецЕсли;
		
		ДоговорКИзменению.абс_Кураторы.Загрузить(ДоговорСсылка.абс_Кураторы.Выгрузить());
		ДоговорКИзменению.абс_Проекты.Загрузить(ДоговорСсылка.абс_Проекты.Выгрузить());
		ДоговорКИзменению.абс_Филиалы.Очистить();
		
		Попытка
			ДоговорКИзменению.Записать();
		Исключение
			Сообщить("Не удалось записать договор "+?(НЕ СтрокаФилиал.ДоговорФилиала.Пустая(), СтрокаФилиал.ДоговорФилиала.Код+" ", "")
			+ "по филиалу "+СтрокаФилиал.Филиал + символы.ПС + ОписаниеОшибки());
			
			ЕстьОшибки = Истина;
		КонецПопытки;
		
		Если НЕ СтрокаФилиал.ДоговорФилиала = ДоговорКИзменению.Ссылка Тогда
			СтрокаФилиал.ДоговорФилиала = ДоговорКИзменению.Ссылка;
			ДоговорИзменен = Истина;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.ВерсияДанных,
		|	ХранилищеДополнительнойИнформации.ПометкаУдаления,
		|	ХранилищеДополнительнойИнформации.Предопределенный,
		|	ХранилищеДополнительнойИнформации.Наименование,
		|	ХранилищеДополнительнойИнформации.ВидДанных,
		|	ХранилищеДополнительнойИнформации.ИмяФайла,
		|	ХранилищеДополнительнойИнформации.Хранилище,
		|	ХранилищеДополнительнойИнформации.ТекстФайла,
		|	ХранилищеДополнительнойИнформации.абс_ДатаПрикрепленияФайла,
		|	ХранилищеДополнительнойИнформации.абс_ИтоговыйФайл,
		|	ХранилищеДополнительнойИнформации.абс_ИнициаторФайла,
		|	ХранилищеДополнительнойИнформации.абс_КлючСтроки,
		|	ХранилищеДополнительнойИнформации.абс_ЭтоСчетСканСчетаНаОплату,
		|	ХранилищеДополнительнойИнформацииФилиал.Ссылка КАК ФайлФилиала
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформацииФилиал
		|		ПО ХранилищеДополнительнойИнформации.ВидДанных = ХранилищеДополнительнойИнформацииФилиал.ВидДанных
		|			И ХранилищеДополнительнойИнформации.Наименование = ХранилищеДополнительнойИнформацииФилиал.Наименование
		|			И ХранилищеДополнительнойИнформации.абс_КлючСтроки = ХранилищеДополнительнойИнформацииФилиал.абс_КлючСтроки
		|			И ХранилищеДополнительнойИнформации.абс_ЭтоСчетСканСчетаНаОплату = ХранилищеДополнительнойИнформацииФилиал.абс_ЭтоСчетСканСчетаНаОплату
		|			И ХранилищеДополнительнойИнформации.абс_ИтоговыйФайл = ХранилищеДополнительнойИнформацииФилиал.абс_ИтоговыйФайл
		|			И (ХранилищеДополнительнойИнформацииФилиал.Объект = &ОбъектФилиал)
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", ДоговорСсылка);
		Запрос.УстановитьПараметр("ОбъектФилиал", ДоговорКИзменению.Ссылка);
		
		ФайлыДоговор = Запрос.Выполнить().Выбрать();
		
		Пока ФайлыДоговор.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ФайлыДоговор.ФайлФилиала) Тогда
				ХранЗначенияНовый = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ХранЗначенияНовый, ФайлыДоговор);
				ХранЗначенияНовый.Объект = ДоговорКИзменению.Ссылка;
				ХранЗначенияНовый.абс_ДатаПрикрепленияФайла = ТекущаяДата();
				Попытка
					ХранЗначенияНовый.Записать();
				Исключение
					Сообщить("Не удалось скопировать файлы к договору " + Строка(ДоговорКИзменению.Ссылка));
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЦикла;
	
	
	
	ЗаполнитьДоговорыФилиаловВЗЗ(ДоговорСсылка, ТабДоговоров);
	
	Возврат ЕстьОшибки;
	
	//Если ДоговорИзменен Тогда
	//	Попытка
	//		Записать();
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДоговорыФилиаловВЗЗ(ДоговорСсылка, ТабДоговоров)
	
	Если не ЗначениеЗаполнено(ДоговорСсылка) Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ЗакупочныйЗаказДоговоры.Ссылка,
	|	абс_ЗакупочныйЗаказДоговоры.ДоговорКонтрагента
	|ПОМЕСТИТЬ ЗЗ_СГоловнойОрганизацией
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.Договоры КАК абс_ЗакупочныйЗаказДоговоры
	|ГДЕ
	|	абс_ЗакупочныйЗаказДоговоры.ДоговорКонтрагента В(&ДоговорКонтрагента)
	|	И абс_ЗакупочныйЗаказДоговоры.Ссылка.КонсолидированныйЗЗПоОЗК
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_ЗакупочныйЗаказДоговоры.Ссылка,
	|	абс_ЗакупочныйЗаказДоговоры.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.ЗакупочныйЗаказ,
	|	абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.ЗакупочныйЗаказ.Организация КАК Организация
	|ИЗ
	|	ЗЗ_СГоловнойОрганизацией КАК ЗЗ_СГоловнойОрганизацией
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.абс_ЗакупочныйЗаказ.ЗакупочныеЗаказыОЗК КАК абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК
	|		ПО ЗЗ_СГоловнойОрганизацией.Ссылка = абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.Ссылка";
	
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорСсылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Договор Из ТабДоговоров Цикл
		
		Если Не Договор.ДоговорСоздан И Не Договор.ДоговорИзменен Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Организация", Договор.Филиал);
		
		ЗЗФилиал = РезультатЗапроса.НайтиСтроки(Отбор);
		
		Для Каждого ЗЗ Из ЗЗФилиал Цикл
			
			ЗЗДляИзменения = ЗЗ.ЗакупочныйЗаказ.ПолучитьОбъект();
			Если Договор.ДоговорСоздан Тогда
				
				НовСтрДоговоры = ЗЗДляИзменения.Договоры.Добавить();
				ДоговорФилиала = Договор.ДоговорФилиала;
				НовСтрДоговоры.ДоговорКонтрагента = Договор.ДоговорФилиала;	
				
				НовСтрДоговоры.ВалютаДоговора = ДоговорФилиала.ВалютаВзаиморасчетов;
				НовСтрДоговоры.ВходящийНомер  = ДоговорФилиала.Номер;
				НовСтрДоговоры.ДатаДоговора   = ДоговорФилиала.Дата;
				НовСтрДоговоры.Сумма          = ДоговорФилиала.абс_СуммаБезНДС;
				НовСтрДоговоры.ТипДоговора    = Перечисления.абс_ТипыДоговоров.Договор;
				
			ИначеЕсли Договор.ДоговорИзменен Тогда
				
				СтрокиДляИзменения = ЗЗДляИзменения.Договоры.НайтиСтроки(Новый Структура("ДоговорКонтрагента", ДоговорФилиала));
				Если СтрокиДляИзменения.Количество() <> 0 Тогда
					Для Каждого СтрокаДляИзменения Из СтрокиДляИзменения Цикл
						СтрокаДляИзменения.ВалютаДоговора = ДоговорФилиала.ВалютаВзаиморасчетов;
						СтрокаДляИзменения.ВходящийНомер  = ДоговорФилиала.Номер;
						СтрокаДляИзменения.ДатаДоговора   = ДоговорФилиала.Дата;
						СтрокаДляИзменения.Сумма          = ДоговорФилиала.абс_СуммаБезНДС;
						СтрокаДляИзменения.ТипДоговора    = Перечисления.абс_ТипыДоговоров.Договор;					
					КонецЦикла;
				Иначе
					НовСтрДоговоры = ЗЗДляИзменения.Договоры.Добавить();
					ДоговорФилиала = Договор.ДоговорФилиала;
					НовСтрДоговоры.ДоговорКонтрагента = Договор.ДоговорФилиала;	
					
					НовСтрДоговоры.ВалютаДоговора = ДоговорФилиала.ВалютаВзаиморасчетов;
					НовСтрДоговоры.ВходящийНомер  = ДоговорФилиала.Номер;
					НовСтрДоговоры.ДатаДоговора   = ДоговорФилиала.Дата;
					НовСтрДоговоры.Сумма          = ДоговорФилиала.абс_СуммаБезНДС;
					НовСтрДоговоры.ТипДоговора    = Перечисления.абс_ТипыДоговоров.Договор;					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗЗДляИзменения.Контрагент = Договор.ДоговорФилиала.Владелец;
			ЗЗДляИзменения.ОбменДанными.Загрузка = Истина;
			ЗЗДляИзменения.Записать();
			
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокФилиаловПоКонсолидированнымЗЗ(ЗЗСсылка) Экспорт
	
	Если НЕ ЗЗСсылка.КонсолидированныйЗЗПоОЗК Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	абс_ЗакупочныйЗаказДоговоры.ДоговорКонтрагента КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДоговорыПоЗЗ
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.Договоры КАК абс_ЗакупочныйЗаказДоговоры
	|ГДЕ
	|	абс_ЗакупочныйЗаказДоговоры.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	абс_ЗакупочныйЗаказДоговоры.Ссылка
	|ПОМЕСТИТЬ ВТ_КонсолидированныеЗЗ
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.Договоры КАК абс_ЗакупочныйЗаказДоговоры
	|ГДЕ
	|	абс_ЗакупочныйЗаказДоговоры.ДоговорКонтрагента В
	|			(ВЫБРАТЬ
	|				ВТ_ДоговорыПоЗЗ.Ссылка
	|			ИЗ
	|				ВТ_ДоговорыПоЗЗ КАК ВТ_ДоговорыПоЗЗ)
	|	И абс_ЗакупочныйЗаказДоговоры.Ссылка.КонсолидированныйЗЗПоОЗК
	|	И абс_ЗакупочныйЗаказДоговоры.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.ЗакупочныйЗаказ.Организация
	|ПОМЕСТИТЬ ВТ_Организации
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.ЗакупочныеЗаказыОЗК КАК абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК
	|ГДЕ
	|	абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_КонсолидированныеЗЗ.Ссылка
	|			ИЗ
	|				ВТ_КонсолидированныеЗЗ КАК ВТ_КонсолидированныеЗЗ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Организации.ЗакупочныйЗаказОрганизация КАК ОрганизацияФилиал,
	|	ВТ_ДоговорыПоЗЗ.Ссылка КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_ДоговорОрганизация
	|ИЗ
	|	ВТ_ДоговорыПоЗЗ КАК ВТ_ДоговорыПоЗЗ,
	|	ВТ_Организации КАК ВТ_Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДоговорОрганизация.ОрганизацияФилиал,
	|	ВТ_ДоговорОрганизация.ДоговорКонтрагента,
	|	ЕСТЬNULL(ДоговорыКонтрагентовабс_Филиалы.Ссылка, ИСТИНА) КАК ДобавитьДоговор
	|ПОМЕСТИТЬ ВТ_СоответствиеДоговоровОрганизаций
	|ИЗ
	|	ВТ_ДоговорОрганизация КАК ВТ_ДоговорОрганизация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.абс_Филиалы КАК ДоговорыКонтрагентовабс_Филиалы
	|		ПО ВТ_ДоговорОрганизация.ОрганизацияФилиал = ДоговорыКонтрагентовабс_Филиалы.Филиал
	|			И ВТ_ДоговорОрганизация.ДоговорКонтрагента = ДоговорыКонтрагентовабс_Филиалы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеДоговоровОрганизаций.ОрганизацияФилиал,
	|	ВТ_СоответствиеДоговоровОрганизаций.ДоговорКонтрагента
	|ИЗ
	|	ВТ_СоответствиеДоговоровОрганизаций КАК ВТ_СоответствиеДоговоровОрганизаций
	|ГДЕ
	|	ВТ_СоответствиеДоговоровОрганизаций.ДобавитьДоговор = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДоговорыПоЗЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_КонсолидированныеЗЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДоговорОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СоответствиеДоговоровОрганизаций");
	
	Запрос.УстановитьПараметр("Ссылка", ЗЗСсылка);
	
	РезЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТабДоговоров = РезЗапроса.Скопировать(,"ДоговорКонтрагента");
	
	ТабДоговоров.Свернуть("ДоговорКонтрагента", "");
	
	Для Каждого СтрДоговор Из ТабДоговоров Цикл
		
		ОрганизацииДоговора = РезЗапроса.НайтиСтроки(Новый Структура("ДоговорКонтрагента", СтрДоговор.ДоговорКонтрагента));
		
		ДогОбъект = СтрДоговор.ДоговорКонтрагента.ПолучитьОбъект();
		
		Если НЕ ДогОбъект.абс_АвтоматическиСоздаватьДоговораСФилиалами Тогда
			
			ДогОбъект.абс_АвтоматическиСоздаватьДоговораСФилиалами = Истина;
			
		КонецЕсли;
		
		Для Каждого СтрОрганизация Из ОрганизацииДоговора Цикл
			
			НовСтрФилиал = ДогОбъект.абс_Филиалы.Добавить();
			
			НовСтрФилиал.Филиал = СтрОрганизация.ОрганизацияФилиал;
			
		КонецЦикла;
		
		ДогОбъект.ОбменДанными.Загрузка = Истина;
		
		ДогОбъект.Записать();
		
		//родин лимиты по договорам
		Если ДогОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ 
			ДогОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка ИЛИ 
			ДогОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки ИЛИ 
			ДогОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки Тогда
			//родин лимиты по договорам
			
			ТабДоговоров = ДогОбъект.абс_Филиалы.Выгрузить();
			
			СтруктураРеквизитовДоговора = Новый Структура;		
			//ТипСправочника = ТипЗнч(ЭтотОбъект);
			//МетаданныеДоговора = Метаданные.НайтиПоТипу(ТипСправочника);
			
			МетаданныеДоговора = ДогОбъект.Метаданные();
			
			Для Каждого Реквизит Из МетаданныеДоговора.Реквизиты Цикл
				СтруктураРеквизитовДоговора.Вставить(Реквизит.Имя, ДогОбъект[Реквизит.Имя]);
			КонецЦикла;
			
			СтруктураРеквизитовДоговора.Вставить("Владелец", ДогОбъект.Владелец);
			СтруктураРеквизитовДоговора.Вставить("Наименование", ДогОбъект.Наименование);
			
			ЕстьОшибки = абс_БизнесПроцессыПривелегированный.ОбновитьСоздатьДоговорыСФилиалами(ДогОбъект.Ссылка, СтруктураРеквизитовДоговора, ТабДоговоров);
			
			Если ЕстьОшибки Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Создание договоров по филиалам произведено с ошибками.");
			КонецЕсли;
			
			ДогОбъект.абс_Филиалы.Загрузить(ТабДоговоров);
			
			ДогОбъект.Записать();
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ЕстьРольДирККРПоКТТК() Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиИИсполнители.Исполнитель
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Роль = &Роль
	|	И РолиИИсполнители.Исполнитель = &Исполнитель
	|	И РолиИИсполнители.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Роль"			, Справочники.РолиИсполнителей.ДирККРвКТТК);
	Запрос.УстановитьПараметр("Исполнитель"		, глЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("Организация"     , Справочники.Организации.НайтиПоНаименованию("КТТК", Истина));
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьПоставкиОЗКПоЗЗ(ЗЗ, СчетНаОплату = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	ЗапросТекст = "ВЫБРАТЬ
	|	абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.ЗакупочныйЗаказ
	|ПОМЕСТИТЬ ЗЗ_Филиалы
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.ЗакупочныеЗаказыОЗК КАК абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК
	|ГДЕ
	|	абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	абс_ЗакупочныйЗаказ.Ссылка
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ КАК абс_ЗакупочныйЗаказ
	|ГДЕ
	|	абс_ЗакупочныйЗаказ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.Дата,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.Номер,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.ВалютаДокумента,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.СуммаДокумента,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.Контрагент,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.Организация КАК Организация,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.НомерВходящегоДокумента,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.ДатаВходящегоДокумента,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.Ссылка.абс_ДатаПоставки КАК ПериодПоставки,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.Ссылка.абс_СчетНаОплату КАК СчетНаОплату,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.Ссылка,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.ДоговорКонтрагента.Наименование,
	|	абс_ДокументыЗаявкиПоЗакупочномуЗаказу.ЗакупочныйЗаказ
	|ИЗ
	|	ЗЗ_Филиалы КАК ЗЗ_Филиалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЖурналДокументов.абс_ДокументыЗаявкиПоЗакупочномуЗаказу КАК абс_ДокументыЗаявкиПоЗакупочномуЗаказу
	|		ПО ЗЗ_Филиалы.ЗакупочныйЗаказ = абс_ДокументыЗаявкиПоЗакупочномуЗаказу.ЗакупочныйЗаказ";
	
	Запрос.УстановитьПараметр("Ссылка", ЗЗ);
	
	Если СчетНаОплату <> Неопределено Тогда
		
		Запрос.Текст = ЗапросТекст + " ГДЕ абс_ДокументыЗаявкиПоЗакупочномуЗаказу.Ссылка.абс_СчетНаОплату = &СчетНаОплату";
		Запрос.УстановитьПараметр("СчетНаОплату",   СчетНаОплату);
		
	Иначе 
		Запрос.Текст = ЗапросТекст;
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ЗаполнитьСчетНаОплатуВПоставкахОЗК(ЗЗ, НомерПоставки, СчетНаОплату) Экспорт 
	
	РезультатЗапроса = ПолучитьПоставкиОЗКПоЗЗ(ЗЗ);
	
	Для Каждого ДокПоставки Из РезультатЗапроса Цикл
		
		Если ДокПоставки.Номер = НомерПоставки Тогда 
			ДокДляИзменения = ДокПоставки.Ссылка.ПолучитьОбъект();
			ДокДляИзменения.ОбменДанными.Загрузка = Истина;
			ДокДляИзменения.абс_СчетНаОплату = СчетНаОплату;
			ДокДляИзменения.Записать();
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПроверитьКорректировкиДолгаОЗК(СчетНаОплату, Корректировка = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	ЗапросТекст = "ВЫБРАТЬ
	|	КорректировкаДолга.Ссылка
	|ИЗ
	|	Документ.КорректировкаДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.абс_ВзаимозачетПоОЗК = ИСТИНА
	|	И КорректировкаДолга.абс_СчетНаОплату = &СчетНаОплату";
	
	Если Корректировка = Неопределено Тогда
		Запрос.Текст = ЗапросТекст;
	Иначе
		Запрос.Текст = ЗапросТекст + " 	И КорректировкаДолга.абс_КорректировкаОснование = &Корректировка";
		Запрос.УстановитьПараметр("Корректировка", Корректировка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции


// АБС ВСТАВКА Фролов 20120301
// Процедуры и функции для формирования плана платежей
Функция СформироватьСтрокуПланаПлатежей(СтруктураСтрокиПлатежа, НомерНедели, ДатаНачала, ДатаОкончания, ТаблицаСОшибками = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		НовыйПлатеж = Документы.абс_Платеж.СоздатьДокумент();
		
		НовыйПлатеж.Дата 				= ТекущаяДата();
		НовыйПлатеж.Валюта 				= СтруктураСтрокиПлатежа.Валюта;
		НовыйПлатеж.Год                 = Год(СтруктураСтрокиПлатежа.ДатаНачала);
		
		//АБС заявка 484
		Если ЗначениеЗаполнено(СтруктураСтрокиПлатежа.НомерЖурнала) Тогда
			
			НовыйПлатеж.НомерЖурнала 		= СтруктураСтрокиПлатежа.НомерЖурнала;
			НовыйПлатеж.ДатаНачала 		    = СтруктураСтрокиПлатежа.ДатаНачала;
			НовыйПлатеж.ДатаОкончания 		= СтруктураСтрокиПлатежа.ДатаОкончания;
			
		Иначе
			
			НовыйПлатеж.НомерЖурнала 		= НомерНедели;
			НовыйПлатеж.ДатаНачала 			= ДатаНачала;
			НовыйПлатеж.ДатаОкончания 		= ДатаОкончания;
			
		КонецЕсли;
		//АБС заявка 484
		
		НовыйПлатеж.Валюта					= СтруктураСтрокиПлатежа.Валюта;
		НовыйПлатеж.ВалютнаяСумма 			= СтруктураСтрокиПлатежа.ВалютнаяСумма;
		НовыйПлатеж.СуммаПлатежа 			= СтруктураСтрокиПлатежа.ВалютнаяСумма * СтруктураСтрокиПлатежа.Курс;
		НовыйПлатеж.Курс 					= СтруктураСтрокиПлатежа.Курс;
		НовыйПлатеж.Кратность 				= 1;
		НовыйПлатеж.Контрагент 				= СтруктураСтрокиПлатежа.Контрагент;
		НовыйПлатеж.НаименованиеКонтрагента = СтруктураСтрокиПлатежа.Контрагент.абс_НаименованиеПП;
		НовыйПлатеж.ДоговорКонтрагента 		= СтруктураСтрокиПлатежа.ДоговорКонтрагента;		
		НовыйПлатеж.Организация 			= СтруктураСтрокиПлатежа.Организация;
		НовыйПлатеж.БюджетнаяКатегория		= СтруктураСтрокиПлатежа.БюджетнаяКатегория;
		НовыйПлатеж.БюджетнаяСтатья			= СтруктураСтрокиПлатежа.БюджетнаяСтатья;
		НовыйПлатеж.ЦФО 					= СтруктураСтрокиПлатежа.ЦФО;
		НовыйПлатеж.ЦФУ						= СтруктураСтрокиПлатежа.ЦФУ;
		НовыйПлатеж.ТипКонтрагента   		= ?(ЗначениеЗаполнено(СтруктураСтрокиПлатежа.Контрагент), СтруктураСтрокиПлатежа.Контрагент.абс_ТипыКонтрагентов, Справочники.абс_ТипыКонтрагентов.ПустаяСсылка());
		
		НовыйПлатеж.Ответственный			= глЗначениеПеременной("глТекущийПользователь");
		//АБС Заявка 1581
		НовыйПлатеж.Инициатор   			= СтруктураСтрокиПлатежа.Счет.Ответственный;
		//АБС Заявка 1581
		
		НовыйПлатеж.СтатусПлана				= Перечисления.абс_СтатусыПланаПлатежей.Подготовка;
		
		НовыйПлатеж.ВнеПлана				= СтруктураСтрокиПлатежа.ВнеПлана;
		НовыйПлатеж.ОснованиеПлатежа    	= СтруктураСтрокиПлатежа.Счет.ОснованиеПлатежа;
		НовыйПлатеж.НазначениеПлатежа   	= СтруктураСтрокиПлатежа.Счет.НазначениеПлатежа;
		//АБС Роман 26.01.12
		НовыйПлатеж.ДатаПлатежа   			= СтруктураСтрокиПлатежа.Счет.ДатаПлатежа;	
		//АБС Роман 26.01.12
		
		НоваяСтрока 						= НовыйПлатеж.СоставПлатежей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтрокиПлатежа);
		
		НоваяСтрока.СуммаПлатежа 			= СтруктураСтрокиПлатежа.ВалютнаяСумма * СтруктураСтрокиПлатежа.Курс;
		
		// Изменить статус БП
		НовыйПлатеж.ВалютнаяСумма 			= СтруктураСтрокиПлатежа.ВалютнаяСумма;
		НовыйПлатеж.СуммаПлатежа 			= НовыйПлатеж.ВалютнаяСумма * СтруктураСтрокиПлатежа.Курс;
		НовыйПлатеж.Записать();
		
		абс_БизнесПроцессыПривелегированный.ИзменитьСтатусОплатыСчета(СтруктураСтрокиПлатежа.Оплата, Перечисления.абсСтатусыСчетов.Исполнение, НовыйПлатеж.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если не ТаблицаСОшибками = Неопределено и ТипЗнч(ТаблицаСОшибками) = Тип("ТаблицаЗначений") Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаСОшибками.Добавить(),СтруктураСтрокиПлатежа);
		КонецЕсли;
		
		ОтменитьТранзакцию();
		
	КонецПопытки;	
	
КонецФункции

Процедура ИзменитьСтатусОплатыСчета(ОплатаСсылка, НовыйСтатус, ПланПлатежей = Неопределено) Экспорт
	
	// Найдем счет на оплату и в нем изменим статус оплаты
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	абс_СчетНаОплатуОплаты.Ссылка
	|ИЗ
	|	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	|ГДЕ
	|	абс_СчетНаОплатуОплаты.Оплата = &ОплатаСсылка");
	
	Запрос.УстановитьПараметр("ОплатаСсылка", ОплатаСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СчетНаОплатуОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СтрокиОплаты = СчетНаОплатуОбъект.Оплаты.НайтиСтроки(Новый Структура("Оплата", ОплатаСсылка));
		
		СчетИзменен = Ложь;
		
		Для Каждого СтрокаОплаты Из СтрокиОплаты Цикл
			
			//Заполнение реквизита "ПланПлатежей" в счете
			Если Не ЗначениеЗаполнено(СтрокаОплаты.ПланПлатежей) или ПланПлатежей = Документы.абс_Платеж.ПустаяСсылка() Тогда
				Если ПланПлатежей <> Неопределено Тогда
					СтрокаОплаты.ПланПлатежей = ПланПлатежей;
					СчетИзменен = Истина;
				КонецЕсли;
			КонецЕсли;	
			
			//\\Заполнение реквизита "ПланПлатежей" в счете
			Если СтрокаОплаты.СтатусОплаты = НовыйСтатус Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОплаты.СтатусОплаты = НовыйСтатус;
			СчетИзменен = Истина;
		КонецЦикла;
		
		Если СчетИзменен Тогда
			СчетНаОплатуОбъект.ОбменДанными.Загрузка = Истина;
			СчетНаОплатуОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
// АБС ВСТАВКА Фролов 20120301 КОНЕЦ

// АБС ВСТАВКА
Процедура СменитьСтатусАкта(ДокументОснование, СтатусСчета, Ссылка, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ Или СтатусСчета = Перечисления.абсСтатусыСчетов.Отменен Тогда	
		
		ЕстьОплаченныеСчета = Ложь;
		ЕстьРабочиеСчета = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ абс_СчетНаОплату.Ссылка) КАК СчетОплачен
		|ПОМЕСТИТЬ ВТОплаченныеСчета
		|ИЗ
		|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
		|ГДЕ
		|	абс_СчетНаОплату.ДокументОснование = &ДокументОснование
		|	И абс_СчетНаОплату.СтатусСчета = &СтатусСчетаОплачен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ абс_СчетНаОплату.Ссылка) КАК Ссылка
		|ПОМЕСТИТЬ ВТДействующиеСчета
		|ИЗ
		|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
		|ГДЕ
		|	абс_СчетНаОплату.ДокументОснование = &ДокументОснование
		|	И абс_СчетНаОплату.СтатусСчета <> &СтатусСчетаОтменен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДействующиеСчета.Ссылка КАК СчетНеОтменен,
		|	ВТОплаченныеСчета.СчетОплачен
		|ИЗ
		|	ВТОплаченныеСчета КАК ВТОплаченныеСчета,
		|	ВТДействующиеСчета КАК ВТДействующиеСчета";
		
		Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
		Запрос.УстановитьПараметр("СтатусСчетаОплачен", Перечисления.абсСтатусыСчетов.Оплачен);
		Запрос.УстановитьПараметр("СтатусСчетаОтменен", Перечисления.абсСтатусыСчетов.Отменен);
		
		ВыборкаРезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатЗапроса.Следующий() Тогда
			Если ВыборкаРезультатЗапроса.СчетОплачен > 0 Тогда
				ЕстьОплаченныеСчета = Истина;
			КонецЕсли;
			Если ВыборкаРезультатЗапроса.СчетНеОтменен > 0 Тогда
				ЕстьРабочиеСчета = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Поменяем статус акта-основания
		Если СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ Тогда 
			Попытка
				АктОбъект = ДокументОснование.ПолучитьОбъект();
				Если ЕстьОплаченныеСчета Тогда
					АктОбъект.абс_Статус = Перечисления.абс_СтатусыАктовПриемки.Завершен;
				Иначе
					АктОбъект.абс_Статус = Перечисления.абс_СтатусыАктовПриемки.НаОплату;
				КонецЕсли;
				АктОбъект.абс_ПлатежныйДокумент = Ссылка;
				АктОбъект.Записать();
			Исключение
				Сообщить("Не удалось записать документ " + ДокументОснование);	
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		ИначеЕсли СтатусСчета = Перечисления.абсСтатусыСчетов.Отменен Тогда 
			Попытка
				АктОбъект = ДокументОснование.ПолучитьОбъект();	
				Если ЕстьОплаченныеСчета Тогда
					АктОбъект.абс_Статус = Перечисления.абс_СтатусыАктовПриемки.Завершен;
				Иначе
					Если ЕстьРабочиеСчета Тогда
						АктОбъект.абс_Статус = Перечисления.абс_СтатусыАктовПриемки.НаОплату;
					Иначе
						АктОбъект.абс_Статус = Перечисления.абс_СтатусыАктовПриемки.Начислено;
					КонецЕсли;
				КонецЕсли;
				АктОбъект.абс_ПлатежныйДокумент = Ссылка;
				АктОбъект.Записать();
			Исключение
				Сообщить("Не удалось записать документ " + ДокументОснование);	
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли СтатусСчета = Перечисления.абсСтатусыСчетов.Оплачен Тогда
		Попытка
			АктОбъект = ДокументОснование.ПолучитьОбъект();	
			АктОбъект.абс_Статус = Перечисления.абс_СтатусыАктовПриемки.Завершен;
			АктОбъект.абс_ПлатежныйДокумент = Ссылка;
			АктОбъект.Записать();
		Исключение
			Сообщить("Не удалось записать документ " + ДокументОснование);	
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	Иначе 
		Если ДокументОснование.абс_Статус <> Перечисления.абс_СтатусыАктовПриемки.НаОплату Тогда
			
			Попытка
				АктОбъект = ДокументОснование.ПолучитьОбъект();
				АктОбъект.абс_Статус = Перечисления.абс_СтатусыАктовПриемки.НаОплату;
				АктОбъект.абс_ПлатежныйДокумент = Ссылка;
				АктОбъект.Записать();
			Исключение
				Сообщить("Не удалось записать документ " + ДокументОснование);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СменитьСтатусАктаРКО(ДокументОснование, Ссылка, ДокументПроведен, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументПроведен Тогда
		
		Попытка
			АктОбъект = ДокументОснование.ПолучитьОбъект();	
			АктОбъект.абс_Статус = Перечисления.абс_СтатусыАктовПриемки.Завершен;
			АктОбъект.абс_ПлатежныйДокумент = Ссылка;
			АктОбъект.Записать();
		Исключение
			Сообщить("Не удалось записать документ " + ДокументОснование);	
			Отказ = Истина;
			Возврат;
		КонецПопытки; 
		
	Иначе
		
		ЕстьОплаченныеРКО = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасходныйКассовыйОрдер1.Ссылка) КАК РКОПроведено
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер1
		|ГДЕ
		|	РасходныйКассовыйОрдер1.Проведен
		|	И РасходныйКассовыйОрдер1.ДокументОснование = &ДокументОснование
		|	И РасходныйКассовыйОрдер1.Ссылка <> &Ссылка";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ВыборкаРезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатЗапроса.Следующий() Тогда
			Если ВыборкаРезультатЗапроса.РКОПроведено > 0 Тогда
				ЕстьОплаченныеРКО = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Поменяем статус акта-основания
		Попытка
			АктОбъект = ДокументОснование.ПолучитьОбъект();	
			Если ЕстьОплаченныеРКО Тогда
				АктОбъект.абс_Статус = Перечисления.абс_СтатусыАктовПриемки.Завершен;
			Иначе
				АктОбъект.абс_Статус = Перечисления.абс_СтатусыАктовПриемки.НаОплату;
			КонецЕсли;
			АктОбъект.абс_ПлатежныйДокумент = Ссылка;
			АктОбъект.Записать();
		Исключение
			Сообщить("Не удалось записать документ " + ДокументОснование);	
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЕсли;	
	
КонецПроцедуры
// АБС ВСТАВКА КОНЕЦ

Процедура ИзменитьСтатусВедомостиПриЗаписиПП(Источник, Отказ) Экспорт
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент КАК Ведомость,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.Дата КАК Дата,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.Номер КАК Номер,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Оплачено,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.абс_Статус КАК абс_Статус
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.абс_Статус В(&абс_Статус)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.Дата,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.Номер,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.абс_Статус
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
	|		ПО ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа = ЗаявкаНаРасходованиеСредствОплаты.Ссылка
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование ССЫЛКА Документ.ЗарплатаКВыплатеОрганизаций
	|	И ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.абс_Статус В (&абс_Статус)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	абс_СчетНаОплату.ДокументОснование,
	|	"""",
	|	"""",
	|	абс_СчетНаОплату.Проведен,
	|	абс_СчетНаОплату.ПометкаУдаления,
	|	абс_СчетНаОплату.СтатусСчета,
	|	абс_СчетНаОплату.ДокументОснование.абс_Статус
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|ГДЕ
	|	абс_СчетНаОплату.ДокументОснование = &Ссылка
	|	И абс_СчетНаОплату.ДокументОснование.абс_Статус В(&абс_Статус)";				
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	абс_Статусы = Новый Массив;
	абс_Статусы.Добавить(Перечисления.абс_СтатусыВыплатыЗарплаты.Корректировка);
	абс_Статусы.Добавить(Перечисления.абс_СтатусыВыплатыЗарплаты.Отказ);
	абс_Статусы.Добавить(Перечисления.абс_СтатусыВыплатыЗарплаты.Подготовка);		
	Запрос.УстановитьПараметр("абс_Статус", абс_Статусы);
	ВыборкаВедомостей = Запрос.Выполнить().Выбрать();
	Пока ВыборкаВедомостей.Следующий() Цикл
		Сообщить("В платежном документе не должна быть ведомость """ + ВыборкаВедомостей.Ведомость + """ со статусом """ + ВыборкаВедомостей.абс_Статус + """!");
		Отказ = Истина;
	КонецЦикла;	
	
	//АБС ИЗМЕНЕНИЕ 000021591  21.11.2013 15:52:07  Поставка 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент КАК Ведомость,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.Дата КАК Дата,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.Номер КАК Номер,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Оплачено,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент.абс_Статус КАК абс_Статус,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Контрагент.абс_КодИСУЗК КАК ФизЛицо,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СуммаДокумента КАК Сумма,
	|	""РКО"" КАК ТипОплаты,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Номер КАК НомерР,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата КАК ДатаР,
	|	"""" КАК СчетОрганизацииКод,
	|	"""" КАК СчетКонтрагентаКод
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.РасчетныйДокумент <> НЕОПРЕДЕЛЕНО  //АБС ВСТАВКА Манжела 38244 14.03.2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.Дата,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.Номер,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено,
	|	NULL,
	|	"""",
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа,
	|	""ППИ"",
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Номер,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.СчетОрганизации.Код,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.СчетКонтрагента.Код
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
	|		ПО ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа = ЗаявкаНаРасходованиеСредствОплаты.Ссылка
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование ССЫЛКА Документ.ЗарплатаКВыплатеОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	абс_СчетНаОплату.ДокументОснование,
	|	абс_СчетНаОплату.ДокументОснование.Дата,
	|	абс_СчетНаОплату.ДокументОснование.Номер,
	|	абс_СчетНаОплату.Проведен,
	|	абс_СчетНаОплату.ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА абс_СчетНаОплату.Проведен
	|				И (НЕ абс_СчетНаОплату.СтатусСчета = ЗНАЧЕНИЕ(Перечисление.абсСтатусыСчетов.Отменен))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	абс_СчетНаОплату.ДокументОснование.абс_Статус,
	|	"""",
	|	0,
	|	""Счет"",
	|	"""",
	|	"""",
	|	"""",
	|	""""
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|ГДЕ
	|	абс_СчетНаОплату.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость.Дата,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость.Номер,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Проведен,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.ПометкаУдаления,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Оплачено,
	|	NULL,
	|	"""",
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.СуммаПлатежа,
	|	""ППИ"",
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Номер,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Дата,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.СчетОрганизации.Код,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.СчетКонтрагента.Код
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ       //АБС ВСТАВКА Манжела 38244 14.03.2014
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость.Дата,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость.Номер,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ПометкаУдаления,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Оплачено,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость.абс_Статус,
	|	NULL,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СуммаПлатежа,
	|	""РКО"",
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Номер,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Дата,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить(); 				
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");		
	ТаблицаДляВыгрузки = Результат.Скопировать();
	//ТаблицаДляВыгрузки = Результат.Скопировать(, "Номер, Дата, Сотрудник, Организация,  СуммаПоДоговору, ВидРасчета, Комментарий, Ответственный, ДатаНачалаДоговора, 
	//| ДатаОкончанияДоговора, ПодразделениеОрганизации, СпособОтраженияВБУ, КодВычета, ЦФУ, Фамилия, Имя, Отчество, ФизЛицо,
	//| Контрагент, НомерДоговора, ДатаПодписания, ДатаНачалаГрафик, ДатаОкончанияГрафик, СуммаОплатыГрафик, СодержаниеГрафик, 
	//| ВидДоговораСтрока, ВидАвторскогоДоговораСтрока, ХарактерОплатыСтрока, СтатусСтрока, ЦФО, ПричинаИзмененияСтатуса, Пользователь"); 
	СообщениеОбОшибке = "";
	ДокументИзмененВИСУЗК = Ложь;
	
	Попытка
		ТаблицаДляВыгрузки.Колонки.Добавить("ВедомостьВыплачена");
		
		Для Каждого Строка Из ТаблицаДляВыгрузки Цикл
			
			ВедомостьВыплачена = ВедомостьЗакрыта(Строка.Ведомость);
			//АБС ВСТАВКА Манжела 38244 14.03.2014
			Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда 
				Если Источник.Ссылка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда 
					ВедомостьВыплачена = "ПоВедомости";
				КонецЕсли;
			КонецЕсли;
			//АБС ВСТАВКА КОНЕЦ
			Строка.ВедомостьВыплачена = ВедомостьВыплачена;
			
			абс_МассивСтрок = Новый Массив;
			абс_МассивСтрок.Добавить(Строка);
			
			ТЗ_ПередачаДанных = ТаблицаДляВыгрузки.Скопировать(абс_МассивСтрок);
			
			ДокументИзмененВИСУЗК = абс_WebServiceСервер.ИнициализацияViplataZarplati(Строка.Номер, Строка.Дата, ЗначениеВСтрокуВнутр(ТЗ_ПередачаДанных), СообщениеОбОшибке);
			
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				Сообщить(СообщениеОбОшибке);
				Сообщить("Не удалось скорректировать документ в базе ИСУЗК!");
				СообщениеОбОшибке = "";
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если ТипЗнч(ДокументИзмененВИСУЗК) = Тип("Структура") Тогда
				Если Не ДокументИзмененВИСУЗК.Rez Тогда
					Сообщить(ДокументИзмененВИСУЗК.Error);
					Сообщить("Не удалось скорректировать документ в базе ИСУЗК!");					
					Отказ = Истина;
					Возврат;
				Иначе
					Сообщить("Документ скорректирован в базе ИСУЗК!");
				КонецЕСли;	
			Иначе
				Сообщить("Не удалось скорректировать документ в базе ИСУЗК!");
				Сообщить(СообщениеОбОшибке);
				Отказ = Истина;
				Возврат; 
			КонецЕсли;
		КонецЦикла;	
	Исключение	
		Сообщить(СообщениеОбОшибке);
		Сообщить("Не удалось создать/скорректировать документ в базе ИСУЗК!");
		СообщениеОбОшибке = "";
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	//АБС ИЗМЕНЕНИЕ 000021591 КОНЕЦ	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//ВЕДОМОСТИ В ПРОГРАММЕ
	Если ТипЗнч(ДокументИзмененВИСУЗК) = Тип("Структура") И Не Отказ Тогда
		Для Каждого Строка Из ТаблицаДляВыгрузки Цикл
			ОбъектВедомость = Строка.Ведомость.ПолучитьОбъект();
			Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда 					
				Если Источник.Проведен И Источник.Оплачено И ВедомостьВыплачена = "Оплачена" Тогда
					ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.Завершен;
				ИначеЕсли Источник.Проведен И Не Источник.Оплачено ИЛИ ВедомостьВыплачена = "Частично" Тогда
					ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.КОплате;
				Иначе
					ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.Рассчитан;
				КонецЕСли;
			ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.абс_СчетНаОплату") Тогда
				Если Источник.Проведен И Не Источник.СтатусСчета = Перечисления.абсСтатусыСчетов.Отменен Тогда
					ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.КОплате;
				// {{Лапин 23.05.2016
				ИначеЕсли Источник.СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ Тогда 
					// тогда ничего не делаем, статус у зарплатной ведомости не меняем
				// }} Лапин 23.05.2016
				Иначе
					ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.Рассчитан;
				КонецЕСли;
			ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
				Если Источник.Проведен И Источник.Оплачено Тогда
					ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.Завершен;
				ИначеЕсли Источник.ПометкаУдаления Тогда
					ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.Рассчитан;
				Иначе
					ОбъектВедомость.абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.КОплате;
				КонецЕСли;	
			КонецЕСлИ;
			
			// {{Лапин 23.05.2016

			//ОбъектВедомость.абс_ВводПрограммно = Истина;
			//ОбъектВедомость.абс_WebService_ = Истина;
			//ОбъектВедомость.ОбменДанными.Загрузка = Истина;
			
			//ОбъектВедомость.Записать();
			
			Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.абс_СчетНаОплату") И Источник.СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ Тогда 
				// тогда не перезаписывать ведомость
			Иначе
				// во всех остальных случаях
				ОбъектВедомость.абс_ВводПрограммно = Истина;
				ОбъектВедомость.абс_WebService_ = Истина;
				ОбъектВедомость.ОбменДанными.Загрузка = Истина;
				
				ОбъектВедомость.Записать();
			КонецЕсли;
			// }} Лапин 23.05.2016
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Функция ВедомостьЗакрыта(Ведомость)
	Запрос = Новый Запрос;
	//АБС ЗАМЕНА Манжела 38244 14.03.2014
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втВедомость
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК Сумма
	|ПОМЕСТИТЬ втРКО
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.РасчетныйДокумент = &Ведомость
	|	И РасходныйКассовыйОрдер.Проведен = ИСТИНА
	|	И РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Оплачено = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СуммаПлатежа) КАК СуммаПлатежа
	|ПОМЕСТИТЬ ВТ_РКО1
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = &Ведомость
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен = ИСТИНА
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Оплачено = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВедомость.Сумма,
	|	ЕСТЬNULL(втРКО.Сумма, 0) + ЕСТЬNULL(ВТ_РКО1.СуммаПлатежа, 0) КАК Сумма1
	|ИЗ
	|	втВедомость КАК втВедомость,
	|	втРКО КАК втРКО,
	|	ВТ_РКО1 КАК ВТ_РКО1"; 
	Запрос.УстановитьПараметр("Ведомость", Ведомость); 
	Результат = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = Результат.Выбрать(); 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Сумма = ВыборкаДетальныеЗаписи.Сумма1 Тогда
			Возврат "Оплачена";
		ИначеЕсли ВыборкаДетальныеЗаписи.Сумма1 > 0 Тогда	
			Возврат "Частично";
		Иначе
			Возврат "Не оплачена";
		КонецЕслИ;	
	КонецЦикла;  
КонецФункции	

// АБС ВСТАВКА 30738
Процедура абс_СинхронизацияСтатусовЗаявокНаОбеспечениеТМЦ() Экспорт
	
	ТекДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_СинхронизацияСтатусовЗаявокНаОбеспечениеТМЦСрезПоследних.Заказ
	|ПОМЕСТИТЬ ВТЗаявки
	|ИЗ
	|	РегистрСведений.абс_СинхронизацияСтатусовЗаявокНаОбеспечениеТМЦ.СрезПоследних(&Период, ) КАК абс_СинхронизацияСтатусовЗаявокНаОбеспечениеТМЦСрезПоследних
	|ГДЕ
	|	абс_СинхронизацияСтатусовЗаявокНаОбеспечениеТМЦСрезПоследних.ТребуетсяСинхронизация
	|	И абс_СинхронизацияСтатусовЗаявокНаОбеспечениеТМЦСрезПоследних.Заказ.Статус = &Статус
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_СинхронизацияСтатусовЗаявокНаОбеспечениеТМЦСрезПоследних.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(абс_ЗаявкиНаОбеспечениеОстатки.КоличествоОстаток, 0) КАК Количество,
	|	абс_ЗаявкиНаОбеспечениеОстатки.Номенклатура,
	|	абс_ЗаявкиНаОбеспечениеОстатки.Склад,
	|	абс_ЗаявкиНаОбеспечениеОстатки.СерияНоменклатуры,
	|	абс_ЗаявкиНаОбеспечениеОстатки.Организация,
	|	абс_ЗаявкиНаОбеспечениеОстатки.Проект,
	|	абс_ЗаявкиНаОбеспечениеОстатки.ХарактеристикаНоменклатуры,
	|	ВТЗаявки.Заказ КАК Заказ
	|ИЗ
	|	ВТЗаявки КАК ВТЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.абс_ЗаявкиНаОбеспечение.Остатки(
	|				&Период,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ.Заказ
	|					ИЗ
	|						ВТЗАЯВКИ КАК ВТ)) КАК абс_ЗаявкиНаОбеспечениеОстатки
	|		ПО ВТЗаявки.Заказ = абс_ЗаявкиНаОбеспечениеОстатки.Заказ
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Заказ";
	
	
	Запрос.УстановитьПараметр("Период", ТекДата);
	Запрос.УстановитьПараметр("Статус", Перечисления.абс_СтатусыЗаявокНаОбеспечениеТМЦ.Скомплектовано);
	
	ВыборкаЗаявка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаявка.Следующий() Цикл
		
		Если ВыборкаЗаявка.Количество = 0 Тогда
			
			ВыборкаДетальныеЗаписи = ВыборкаЗаявка.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Количество = 0 Тогда
					
					Попытка
						Документ = ВыборкаЗаявка.Заказ.ПолучитьОбъект();
						Документ.Статус = Перечисления.абс_СтатусыЗаявокНаОбеспечениеТМЦ.Выдано;
						Документ.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						Продолжить;
					КонецПопытки;  			
					
					МенеджерЗаписиСинхронизацияСтатусов = РегистрыСведений.абс_СинхронизацияСтатусовЗаявокНаОбеспечениеТМЦ.СоздатьМенеджерЗаписи();
					МенеджерЗаписиСинхронизацияСтатусов.Заказ 	= ВыборкаЗаявка.Заказ;
					МенеджерЗаписиСинхронизацияСтатусов.Период 	= ТекДата;
					
					МенеджерЗаписиСинхронизацияСтатусов.Прочитать();
					
					Если Не МенеджерЗаписиСинхронизацияСтатусов.Выбран() Тогда
						
						МенеджерЗаписиСинхронизацияСтатусов.Заказ 					= ВыборкаЗаявка.Заказ;
						МенеджерЗаписиСинхронизацияСтатусов.Период 					= ТекДата;
						МенеджерЗаписиСинхронизацияСтатусов.ТребуетсяСинхронизация 	= Ложь;
						
						МенеджерЗаписиСинхронизацияСтатусов.Записать();
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла; 	
	
КонецПроцедуры
// АБС ВСТАВКА 30738 КОНЕЦ

//АБС Вставка  000020604 
Функция абс_НайтиЭлементСправочника(ВидСправочника,Наименование)   Экспорт
	Если ВидСправочника = "Номенклатура" Тогда 
		Если СтрДлина(СокрЛП(Наименование))> 150 Тогда
			Возврат Справочники[ВидСправочника].НайтиПоНаименованию(Лев(СокрЛП(Наименование),150),Истина);
			
		Иначе
			Возврат Справочники[ВидСправочника].НайтиПоНаименованию(СокрЛП(Наименование),Истина);
		КонецЕсли;
	Иначе
		Возврат Справочники[ВидСправочника].НайтиПоНаименованию(СокрЛП(Наименование),Истина);
		
	КонецЕсли;
	
КонецФункции

Функция абс_НайтиКодЭлементСправочника(ВидСправочника,Наименование)   Экспорт
	НайденныйЭлемент = Справочники[ВидСправочника].НайтиПоНаименованию(СокрЛП(Наименование),Истина);
	Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
		Возврат НайденныйЭлемент.Код;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции


Функция абс_СоздатьГруппуСправочника(ВидСправочника,Наименование)       Экспорт
	
	НоваяПапка = Справочники[ВидСправочника].СоздатьГруппу();
	НоваяПапка.установитьНовыйКод();
	НоваяПапка.Наименование = Наименование;
	НоваяПапка.ОбменДанными.Загрузка = Истина;
	НоваяПапка.Записать();
	Возврат НоваяПапка.Ссылка;
	
	
КонецФункции

Функция абс_СоздатьНоменклатуру(СтруктураПараметров)  Экспорт
	
	НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	Если СтруктураПараметров.Группа.Пустая() ИЛИ СтруктураПараметров.Группа.ЭтоГруппа = Ложь Тогда
		ПоискИзначальнойПапки = абс_НайтиЭлементСправочника("Номенклатура","Новая загруженная номенклатура");//Справочники.Номенклатура.НайтиПоНаименованию("Новая загруженная номенклатура");
		Если ПоискИзначальнойПапки.Пустая() Тогда
			НоваяПапка = абс_СоздатьГруппуСправочника("Номенклатура","Новая загруженная номенклатура");
			
			НоваяНоменклатура.Родитель = СтруктураПараметров.Группа;	
		Иначе 
			НоваяНоменклатура.Родитель = СтруктураПараметров.Группа;
		КонецЕсли;
	Иначе
		НоваяНоменклатура.Родитель = СтруктураПараметров.Группа;	
	КонецЕсли;      					
	НоваяНоменклатура.Наименование = СтруктураПараметров.Наименование;
	НоваяНоменклатура.НаименованиеПолное = СтруктураПараметров.НаименованиеПолное; 
	НоваяНоменклатура.ВидНоменклатуры = СтруктураПараметров.ВидНоменклатуры;
	НоваяНоменклатура.БазоваяЕдиницаИзмерения = СтруктураПараметров.БазоваяЕдиницаИзмерения;
	НоваяНоменклатура.НоменклатурнаяГруппа = СтруктураПараметров.НоменклатурнаяГруппа;
	НоваяНоменклатура.СтавкаНДС = СтруктураПараметров.СтавкаНДС;
	НоваяНоменклатура.абс_Ответственный = СтруктураПараметров.Инициатор;
	НоваяНоменклатура.абс_COMCODE = СтруктураПараметров.COMCODE;				
	НоваяНоменклатура.Комментарий = "Загружена обработкой групповой загрузки номенклатуры";   				               					
	
	Услуга   = (НоваяНоменклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	Набор    = (НоваяНоменклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	Комплект = (НоваяНоменклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект);
	
	Если Услуга ИЛИ Набор Тогда
		НоваяНоменклатура.ВестиУчетПоХарактеристикам = Ложь;
	Иначе
		НоваяНоменклатура.ВестиУчетПоХарактеристикам = Истина;
	КонецЕсли;
	
	Если НоваяНоменклатура.ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда  						
		НоваяНоменклатура.ВестиУчетПоСериям 			   = Ложь;
		НоваяНоменклатура.ВестиПартионныйУчетПоСериям 	   = Ложь;
		НоваяНоменклатура.Весовой 						   = Ложь;
		НоваяНоменклатура.ВестиОперативныйУчетОстатковНЗП  = Ложь;
		НоваяНоменклатура.ВестиУчетПоСериямВНЗП 	       = Ложь;
		НоваяНоменклатура.ВестиСерийныеНомера 			   = Ложь;
		
		НоваяНоменклатура.НомерГТД                         = Неопределено;
		НоваяНоменклатура.СтранаПроисхождения              = Неопределено;
		НоваяНоменклатура.НазначениеИспользования          = Неопределено;
		НоваяНоменклатура.ПорядокПрисвоенияСерийногоНомера = Неопределено;
		НоваяНоменклатура.НаправлениеВыпуска               = Неопределено;  
	Иначе
		НоваяНоменклатура.ВестиУчетПоСериям 			   = Истина;
		НоваяНоменклатура.ВестиПартионныйУчетПоСериям 	   = Истина;
	КонецЕсли;      
	
	// АБС_Начало_Изменение_Хазеев
	
	Если Не Услуга Тогда
		
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
		СтруктураСчетовУчета = абс_СлужебныеФункции.ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений(Организация, НоваяНоменклатура, Неопределено);
		СчетБУ = СтруктураСчетовУчета.СчетУчетаБУ;
		
		Если НоваяНоменклатура.ЭтоНовый() 
			И ЗначениеЗаполнено(СчетБУ)
			И (СтруктураСчетовУчета.ПоПартиям Или СтруктураСчетовУчета.ПоСредней) Тогда
			
			НоваяНоменклатура.ВестиУчетПоХарактеристикам = Истина;
			НоваяНоменклатура.ВестиУчетПоСериям = Истина;
			НоваяНоменклатура.ВестиПартионныйУчетПоСериям = СтруктураСчетовУчета.ПоПартиям;			
		КонецЕсли;
		
	КонецЕсли;	
	
	//\\ АБС_Изменение_Хазеев
	
	НоваяНоменклатура.абс_Ответственный = глЗначениеПеременной("глТекущийПользователь");		
	
	Если НЕ ЗначениеЗаполнено(НоваяНоменклатура.абс_СтатусНоменклатуры) Тогда
		НоваяНоменклатура.абс_СтатусНоменклатуры = Перечисления.абс_СтатусыНоменклатуры.Подготовка;
	КонецЕсли;
	
	НоваяНоменклатура.Записать();
	НоваяЕдиница = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	НоваяЕдиница.Владелец = НоваяНоменклатура.Ссылка;
	НоваяЕдиница.ЕдиницаПоКлассификатору = НоваяНоменклатура.БазоваяЕдиницаИзмерения;
	НоваяЕдиница.Наименование = НоваяНоменклатура.БазоваяЕдиницаИзмерения.Наименование;
	НоваяЕдиница.Коэффициент = 1;
	НоваяЕдиница.Записать();
	
	НоваяНоменклатура.ЕдиницаДляОтчетов = НоваяЕдиница.Ссылка;
	НоваяНоменклатура.ЕдиницаХраненияОстатков = НоваяЕдиница.Ссылка;
	НоваяНоменклатура.Записать();
	
	Возврат НоваяНоменклатура.Ссылка;
	
	
КонецФункции

Функция НайтиНоменклатуру(ТаблицаНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗ.Наименование,
	|	ТЗ.Номенклатура,
	|	ТЗ.ЕдиницаСтрокой
	|ПОМЕСТИТЬ ВТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ном.Ссылка КАК Номенклатура,
	|	ВТЗ.Наименование,
	|	ВТЗ.ЕдиницаСтрокой
	|ИЗ
	|	ВТЗ КАК ВТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Ном
	|		ПО ВТЗ.Наименование = Ном.Наименование
	|			И ВТЗ.ЕдиницаСтрокой = Ном.БазоваяЕдиницаИзмерения.Наименование";
	Запрос.УстановитьПараметр("ТЗ",ТаблицаНоменклатуры);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


//\\АБС Вставка 000020604 

//АБС ВСТАВКА 35706  02.12.2013 13:43:01  Мачихина
Процедура абс_УдалитьНеАктуальнуюИнформацию() Экспорт
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	//1	
	ТекстСообщения = "Начало очистки регистра сведений Версии объектов ."+абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 5000
	|	ВерсииОбъектов.Объект,
	|	ВерсииОбъектов.НомерВерсии,
	|	ВерсииОбъектов.ВерсияОбъекта,
	|	ВерсииОбъектов.ДвиженияДокумента,
	|	ВерсииОбъектов.АвторВерсии,
	|	ВерсииОбъектов.ДатаВерсии,
	|	ВерсииОбъектов.Сжато
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	ВерсииОбъектов.ДатаВерсии < &ДатаВерсииКвартал";
	
	Запрос.УстановитьПараметр("ДатаВерсииКвартал", НачалоКвартала(абс_СерверныеФункции.ПолучитьДатуСервера())); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВерсииОбъектов = РегистрыСведений.ВерсииОбъектов;
		
		МенеджерЗаписиИИО = ВерсииОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписиИИО.Объект       = Выборка.Объект;
		МенеджерЗаписиИИО.НомерВерсии  = Выборка.НомерВерсии;
		
		//МенеджерЗаписиИИО.Прочитать();
		МенеджерЗаписиИИО.Удалить();//т.е. очистить
	КонецЦикла;
	
	
	ТекстСообщения = "Окончание очистки регистра сведений Версии объектов "+абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);	
	
	//2
	ТекстСообщения = "Начало очистки Задачи исполнителя ."+абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 5000
	|	ЗадачаИсполнителя.Ссылка,
	|	ЗадачаИсполнителя.Выполнена,
	|	ЗадачаИсполнителя.Представление
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.Дата < &ДатаВерсииКвартал";
	
	Запрос.УстановитьПараметр("ДатаВерсииКвартал", НачалоКвартала(абс_СерверныеФункции.ПолучитьДатуСервера())); 
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПредставлениеЗ= Строка(ВыборкаДетальныеЗаписи.Представление);
		ЗИ=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЗИ.Удалить();
		
	КонецЦикла;
	ТекстСообщения = "Начало очистки Задачи исполнителя ." +абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);	
	
	//3
	ТекстСообщения = "Начало очистки Задач по завершенным БП ."+абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//АБС ИЗМЕНЕНИЕ 39867 19.03.2014 17:10:20  Шамов
	//"ВЫБРАТЬ ПЕРВЫЕ 5000
	//|	абсЗадачаДоговора.Ссылка,
	//|	абсЗадачаДоговора.БизнесПроцесс,
	//|	абсЗадачаДоговора.ТочкаМаршрута,
	//|	абсЗадачаДоговора.Выполнена,
	//|	абсЗадачаДоговора.Представление,
	//|	абсЗадачаДоговора.БизнесПроцесс.Представление КАК БППредставление
	//|ИЗ
	//|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	//|ГДЕ
	//|	абсЗадачаДоговора.Выполнена
	//|	И абсЗадачаДоговора.БизнесПроцесс.Завершен
	//|	И абсЗадачаДоговора.Дата < &ДатаВерсииКвартал";
	"ВЫБРАТЬ ПЕРВЫЕ 5000
	|	абсЗадачаДоговора.Ссылка,
	|	абсЗадачаДоговора.БизнесПроцесс,
	|	абсЗадачаДоговора.ТочкаМаршрута,
	|	абсЗадачаДоговора.Выполнена,
	|	абсЗадачаДоговора.Представление,
	|	абсЗадачаДоговора.БизнесПроцесс.Представление КАК БППредставление
	|ПОМЕСТИТЬ вт_Задачи
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|ГДЕ
	|	абсЗадачаДоговора.Выполнена
	|	И абсЗадачаДоговора.БизнесПроцесс.Завершен
	|	И абсЗадачаДоговора.Дата < &ДатаВерсииКвартал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Задачи.Ссылка,
	|	вт_Задачи.БизнесПроцесс,
	|	вт_Задачи.ТочкаМаршрута,
	|	вт_Задачи.Выполнена,
	|	вт_Задачи.Представление,
	|	вт_Задачи.БППредставление
	|ИЗ
	|	вт_Задачи КАК вт_Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_РаспределениеЗадач КАК абс_РаспределениеЗадач
	|		ПО вт_Задачи.Ссылка = абс_РаспределениеЗадач.Задача
	|ГДЕ
	|	абс_РаспределениеЗадач.Период ЕСТЬ NULL ";
	//АБС ИЗМЕНЕНИЕ 39867 КОНЕЦ	
	
	
	Запрос.УстановитьПараметр("ДатаВерсииКвартал", НачалоКвартала(абс_СерверныеФункции.ПолучитьДатуСервера())); 
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПредставлениеЗ= Строка(ВыборкаДетальныеЗаписи.Представление)  + " "+ Строка(ВыборкаДетальныеЗаписи.БППредставление);
		ЗИ=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЗИ.Удалить();
		
	КонецЦикла;
	
	ТекстСообщения = "Окончание очистки Задач по завершенным БП "+абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);	
	
	
КонецПроцедуры
//АБС ВСТАВКА 35706 КОНЕЦ 


//АБС ВСТАВКА 36495 13.12.2013 11:37:37  Поставка

// Процедура добавляет задачи по суперпользователю в переданный массив формируемых задач
Процедура ДобавитьЗадачиСуперПользователя(БПСсылка, ОбъектЗадачи, ТочкаМаршрута, ФормируемыеЗадачи, Организация = Неопределено) Экспорт
	//АБС Попов Оптимизация БП и задач
	Если ТипЗнч(БПСсылка) = Тип("БизнесПроцессССылка.абсСогласованиеПервичныхДокументов") ИЛИ ТипЗнч(БПСсылка) = Тип("БизнесПроцессССылка.абсЗаявкаВПоддержку") ИЛИ ТипЗнч(БПСсылка) = Тип("БизнесПроцессССылка.абсСогласованиеКонтрагентов") ИЛИ ТипЗнч(БПСсылка) = Тип("БизнесПроцессССылка.абсСогласованиеДоговоров") ИЛИ ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеДоговоровПодряда") Тогда
		Возврат;
		//	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
		//	
		//	НоваяЗадача.БизнесПроцесс 		= БПСсылка;
		//	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		//	НоваяЗадача.Дата 				= абс_СерверныеФункции.ПолучитьДатуСервера();
		//
		//	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
		//	//
		//	НоваяЗадача.Наименование = СокрЛП(ОбъектЗадачи) + " "  
		//		+ ТочкаМаршрута.НаименованиеЗадачи + ".";
		//	
		//	НоваяЗадача.Роль			= Справочники.РолиИсполнителей.СуперПользователь;
		//	
		//	НоваяЗадача.ОбъектЗадачи 		= ОбъектЗадачи;
		//	
		//	НоваяЗадача.Записать();
		//	
		//	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	Иначе
		//\\АБС Попов
		
		ЗапросСуперПользователей = Новый Запрос(
		"ВЫБРАТЬ
		|	абсЗадачаДоговора.Ссылка КАК Ссылка,
		|	абсЗадачаДоговора.Исполнитель КАК Исполнитель
		|ПОМЕСТИТЬ ВТ_Задачи
		|ИЗ
		|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
		|ГДЕ
		|	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
		|	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
		|	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
		|	И абсЗадачаДоговора.ОбъектЗадачи = &ОбъектЗадачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РолиИИсполнители.Исполнитель КАК Пользователь,
		|	ЕСТЬNULL(ВТ_Задачи.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЗадачаПользователя
		|ИЗ
		|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
		|		ПО РолиИИсполнители.Исполнитель = ВТ_Задачи.Исполнитель
		|			И (ВЫБОР
		|				КОГДА &ОтборПоОрганизации
		|					ТОГДА РолиИИсполнители.Организация = &Организация
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|ГДЕ
		|	РолиИИсполнители.Роль = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.СуперПользователь)");
		
		ЗапросСуперПользователей.УстановитьПараметр("БизнесПроцесс"	, БПСсылка);
		ЗапросСуперПользователей.УстановитьПараметр("ТочкаМаршрута"	, ТочкаМаршрута);
		ЗапросСуперПользователей.УстановитьПараметр("ОбъектЗадачи"	, ОбъектЗадачи);
		
		ЗапросСуперПользователей.УстановитьПараметр("ОтборПоОрганизации", НЕ Организация = Неопределено);
		ЗапросСуперПользователей.УстановитьПараметр("Организация"	, Организация);
		
		
		ВыборкаСуперПользователи = ЗапросСуперПользователей.Выполнить().Выбрать();
		
		
		
		//АБС ВСТАВКА 36495  13.12.2013 11:20:34  Поставка
		ТекДатаЗадачи = абс_СерверныеФункции.ПолучитьДатуСервера();
		//АБС ВСТАВКА 36495 КОНЕЦ 
		
		Если ВыборкаСуперПользователи.Количество() > 0 Тогда
			
			//Если НЕ ЗначениеЗаполнено(ВыборкаСуперПользователи.Пользователь) Тогда 
			//	Продолжить;
			//КонецЕсли;
			
			//Если ЗначениеЗаполнено(ВыборкаСуперПользователи.ЗадачаПользователя) Тогда
			//	Продолжить;
			//КонецЕсли;
			
			НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
			
			НоваяЗадача.БизнесПроцесс 		= БПСсылка;
			НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
			//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 11:20:57  Поставка
			НоваяЗадача.Дата 				= ТекДатаЗадачи;
			//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 		
			
			//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
			//
			НоваяЗадача.Наименование = СокрЛП(ОбъектЗадачи) + " "  
			+ ТочкаМаршрута.НаименованиеЗадачи + ".";
			
			НоваяЗадача.Роль               = Справочники.РолиИсполнителей.СуперПользователь;
			
			//НоваяЗадача.Исполнитель			= ВыборкаСуперПользователи.Пользователь;
			
			НоваяЗадача.ОбъектЗадачи 		= ОбъектЗадачи;
			
			НоваяЗадача.Записать();
			
			ФормируемыеЗадачи.Добавить(НоваяЗадача.Ссылка);		
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗадачиСуперПользователяПоддержка(БПСсылка, ОбъектЗадачи, ТочкаМаршрута, ФормируемыеЗадачи) Экспорт
	
	ЗапросСуперПользователей = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РолиИИсполнители.Исполнитель КАК Пользователь,
	|	ЕСТЬNULL(ЗадачиСуперПользователей.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЗадачаПользователя
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			абсЗадачаДоговора.Ссылка КАК Ссылка,
	|			абсЗадачаДоговора.Исполнитель КАК Исполнитель
	|		ИЗ
	|			Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|		ГДЕ
	|			абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	|			И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	|			И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	|			И абсЗадачаДоговора.БизнесПроцесс.ЗадачаВПоддержку = &ОбъектЗадачи) КАК ЗадачиСуперПользователей
	|		ПО РолиИИсполнители.Исполнитель = ЗадачиСуперПользователей.Исполнитель
	|ГДЕ
	|	РолиИИсполнители.Роль = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.СуперПользователь)");
	
	ЗапросСуперПользователей.УстановитьПараметр("БизнесПроцесс"	, БПСсылка);
	ЗапросСуперПользователей.УстановитьПараметр("ТочкаМаршрута"	, ТочкаМаршрута);
	ЗапросСуперПользователей.УстановитьПараметр("ОбъектЗадачи"	, ОбъектЗадачи);
	
	ВыборкаСуперПользователи = ЗапросСуперПользователей.Выполнить().Выбрать();
	
	Пока ВыборкаСуперПользователи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаСуперПользователи.ЗадачаПользователя) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
		
		НоваяЗадача.БизнесПроцесс 		= БПСсылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		НоваяЗадача.Дата 				= абс_СерверныеФункции.ПолучитьДатуСервера();
		
		//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
		//
		НоваяЗадача.Наименование = СокрЛП(ОбъектЗадачи) + " "  
		+ ТочкаМаршрута.НаименованиеЗадачи + ".";
		
		НоваяЗадача.Исполнитель			= ВыборкаСуперПользователи.Пользователь;
		
		НоваяЗадача.ОбъектЗадачи		= ОбъектЗадачи;
		НоваяЗадача.Записать();
		
		ФормируемыеЗадачи.Добавить(НоваяЗадача);		
		
	КонецЦикла;
	
КонецПроцедуры


// Процедуры-обработчики создания задач по БП.       

// Процедура проверяет созданные задачи по исполнителям и возвращает массив 
//  исполнителей по которым не созданы задачи.
Функция ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута, Исполнители) Экспорт
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	ИсполнителиЗадачи.Исполнитель КАК Исполнитель
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		Исполнители.Исполнитель КАК Исполнитель,
	//|		ЕСТЬNULL(ЗадачиИсполнителей.Задача, ЗНАЧЕНИЕ(Задача.абсЗадачаДоговора.Пустаяссылка)) КАК Задача
	//|	ИЗ
	//|		(ВЫБРАТЬ
	//|			Пользователи.Ссылка КАК Исполнитель
	//|		ИЗ
	//|			Справочник.Пользователи КАК Пользователи
	//|		ГДЕ
	//|			Пользователи.Ссылка В(&Исполнители)) КАК Исполнители
	//|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|				абсЗадачаДоговора.Ссылка КАК Задача,
	//|				абсЗадачаДоговора.Исполнитель КАК Исполнитель
	//|			ИЗ
	//|				Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	//|			ГДЕ
	//|				абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	//|				И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	//|				И абсЗадачаДоговора.Выполнена = ЛОЖЬ) КАК ЗадачиИсполнителей
	//|			ПО Исполнители.Исполнитель = ЗадачиИсполнителей.Исполнитель) КАК ИсполнителиЗадачи
	//|ГДЕ
	//|	ИсполнителиЗадачи.Задача = ЗНАЧЕНИЕ(Задача.абсЗадачаДоговора.ПустаяСсылка)");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	абсЗадачаДоговора.Ссылка КАК Задача,
	|	абсЗадачаДоговора.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_ЗадачиИсполнителей
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|ГДЕ
	|	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	|	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	|	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_Исполнители
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&Исполнители)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Исполнители.Исполнитель,
	|	ВТ_ЗадачиИсполнителей.Задача
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	ВТ_Исполнители КАК ВТ_Исполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗадачиИсполнителей КАК ВТ_ЗадачиИсполнителей
	|		ПО ВТ_Исполнители.Исполнитель = ВТ_ЗадачиИсполнителей.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Итог.Исполнитель
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|ГДЕ
	|	ВТ_Итог.Задача ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЗадачиИсполнителей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Исполнители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Итог");	
	
	Запрос.УстановитьПараметр("БизнесПроцесс"	, БП);
	Запрос.УстановитьПараметр("ТочкаМаршрута"	, ТочкаМаршрута);
	Запрос.УстановитьПараметр("Исполнители"		, Исполнители);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
КонецФункции

Процедура СформироватьЗадачуИсполнителямЗЗ(БП, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители) Экспорт
	
	МассивИсполнителей = Новый Массив();
	
	Если НЕ ТипЗнч(Исполнители) = Тип("Массив") Тогда
		МассивИсполнителей.Добавить(Исполнители);
	Иначе
		МассивИсполнителей = Исполнители;
	КонецЕсли;		
	
	МассивИсполнителей = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута, Исполнители);
	
	ФормируемыеЗадачи.Очистить();	
	
	ТекДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	ЗакупочныйЗаказ 	= БП.ЗакупочныйЗаказ;
	ИнициаторБП 		= БП.ПользовательИнициаторБП;	
	ВидЗадачиЗЗ 		= Справочники.ВидыЗадачПользователей.ЗакупочныйЗаказ;
	
	Для Каждого ТекИсполнитель Из МассивИсполнителей Цикл
		
		НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
		
		НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		НоваяЗадача.Дата 				= ТекДата;
		НоваяЗадача.Наименование 		= Строка(ЗакупочныйЗаказ) + " " + ТочкаМаршрута.НаименованиеЗадачи + ".";
		
		НоваяЗадача.Исполнитель			= ТекИсполнитель;
		
		// АБС ВСТАВКА 20120405 Заполняем реквизиты, чтобы не пришлось из получать при записи задачи 
		НоваяЗадача.ОбъектЗадачи 		= ЗакупочныйЗаказ;
		НоваяЗадача.ВидЗадачи 			= ВидЗадачиЗЗ;
		НоваяЗадача.ИнициаторБП			= ИнициаторБП;
		// АБС ВСТАВКА 20120405 Заполняем реквизиты, чтобы не пришлось из получать при записи задачи КОНЕЦ
		
		НоваяЗадача.Записать();
		
		ФормируемыеЗадачи.Добавить(НоваяЗадача.Ссылка);
		
	КонецЦикла;
	
	// Добавим задачи для суперпользователей
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 11:38:51  Поставка
	//абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(БП.Ссылка, БП.ЗакупочныйЗаказ, ТочкаМаршрута, ФормируемыеЗадачи);
	абс_БизнесПроцессыПривелегированный.ДобавитьЗадачиСуперПользователя(БП.Ссылка, БП.ЗакупочныйЗаказ, ТочкаМаршрута, ФормируемыеЗадачи);
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
	
КонецПроцедуры


Процедура ВыполнитьЗадачу(ЗадачаСогласование) Экспорт
	
	Если ЗадачаСогласование = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗадачаСогласование.Выполнена Тогда
		ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();
		Если НЕ ЗадачаОбъект = Неопределено Тогда 	// Лапин 
			ЗадачаОбъект.ВыполнитьЗадачу();
		Конецесли;									// Лапин
		
	КонецЕсли;
	
КонецПроцедуры

//АБС ВСТАВКА 36495 КОНЕЦ 

//Филиализация Родин
//Авизо

Функция НайтиДоговорПоСоответствиюИзТЧ(ДоговорИсточник,СсылкаНаДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_АВИЗОТабличнаяЧасть.ДоговорКонтрагентаПриемник
	|ИЗ
	|	Документ.абс_АВИЗО.ТабличнаяЧасть КАК абс_АВИЗОТабличнаяЧасть
	|ГДЕ
	|	(абс_АВИЗОТабличнаяЧасть.СубконтоКт1 = &Договор
	|			ИЛИ абс_АВИЗОТабличнаяЧасть.СубконтоКт2 = &Договор
	|			ИЛИ абс_АВИЗОТабличнаяЧасть.СубконтоКт3 = &Договор
	|			ИЛИ абс_АВИЗОТабличнаяЧасть.СубконтоДт1 = &Договор
	|			ИЛИ абс_АВИЗОТабличнаяЧасть.СубконтоДт2 = &Договор
	// {{KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 начало
	// Ищем по доп реквизиту
	|			ИЛИ абс_АВИЗОТабличнаяЧасть.kwr_ДоговорКонтрагентаИсточник = &Договор
	// }}KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 окончание
	|			ИЛИ абс_АВИЗОТабличнаяЧасть.СубконтоДт3 = &Договор)
	|	И абс_АВИЗОТабличнаяЧасть.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Договор", ДоговорИсточник);
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент.СсылкаНаОбъект);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ДоговорКонтрагентаПриемник;
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции 

Функция ТекстЗапросаРегистрНакопленияОбороты(Знач ИмяРегистра, Знач ОтборПоОрганизации = Истина, Знач Отборы = "", Знач ВременнаяТаблица = Неопределено) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
	Если МетаданныеРегистра.Измерения.Найти("Организация")=Неопределено Или ИмяРегистра = "ПартииТоваровНаСкладах" Или ИмяРегистра = "ПартииТоваровПереданные" Тогда
		ОтборПоОрганизации = Ложь;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ";
	
	Для Каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
		
		ТекстЗапроса = ТекстЗапроса+"
		|	ДанныеРегистра."+МетаданныеИзмерения.Имя+" КАК "+МетаданныеИзмерения.Имя+",";
		
	КонецЦикла;
	
	Для Каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
		
		ТекстЗапроса = ТекстЗапроса+"
		|	- ДанныеРегистра."+МетаданныеРесурса.Имя+"Оборот КАК "+МетаданныеРесурса.Имя+",";
		
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
	
	Если ВременнаяТаблица<>Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса+"
		|ПОМЕСТИТЬ "+ВременнаяТаблица;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|ИЗ РегистрНакопления."+ИмяРегистра+".Обороты(,,Регистратор,"+?(ОтборПоОрганизации, "Организация=&Организация", "")+?(Отборы="", "", ?(ОтборПоОрганизации, " И ", " ")+Отборы)+") КАК ДанныеРегистра";
	
	ТекстЗапроса = ТекстЗапроса+"
	|ГДЕ
	|ДанныеРегистра.Регистратор = &Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции



Функция ТекстЗапросаРасчетыПоПриобретениюВУсловныхЕдиницахОрганизации()
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТЗ.Сумма КАК Сумма,
	|	ТЗ.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ТЗ.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗРаспределение КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Сделка,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Документ КАК Документ,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СчетОплаты КАК СчетОплаты,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.ДатаОплаты,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Организация,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Контрагент,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток КАК СуммаРег,
	|	ВТ_ТЗ.Сумма КАК Сумма,
	|	ВТ_ТЗ.ВалютнаяСумма КАК ВалютнаяСумма,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Документ.Дата КАК ДокументДата
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки(&Период, Организация = &Организация) КАК РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки
	|		ПО ВТ_ТЗ.СчетУчета = РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СчетОплаты
	|			И ВТ_ТЗ.ДоговорКонтрагента = РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(ВалютнаяСумма)
	|ПО
	|	ДоговорКонтрагента,
	|	СчетОплаты";
	
	
	Возврат Запрос.Текст;
	
КонецФункции 

Функция ТекстЗапросаРасчетыПоРеализацииВУсловныхЕдиницахОрганизации()
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТЗ.Сумма КАК Сумма,
	|	ТЗ.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ТЗ.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗРаспределение КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Сделка,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ КАК Документ,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СчетОплаты КАК СчетОплаты,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДатаОплаты,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Организация,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Контрагент,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток КАК СуммаРег,
	|	ВТ_ТЗ.Сумма КАК Сумма,
	|	ВТ_ТЗ.ВалютнаяСумма КАК ВалютнаяСумма,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ.Дата КАК ДокументДата
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки(&Период, Организация = &Организация) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки
	|		ПО ВТ_ТЗ.СчетУчета = РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СчетОплаты
	|			И ВТ_ТЗ.ДоговорКонтрагента = РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата
	|ИТОГИ
	|	МАКСИМУМ(Сумма),
	|	МАКСИМУМ(ВалютнаяСумма)
	|ПО
	|	ДоговорКонтрагента,
	|	СчетОплаты";
	
	
	Возврат Запрос.Текст;
	
	
	
КонецФункции 

Функция ТекстЗапросаВзаиморасчетыСКонтрагентами()
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТЗ.Сумма КАК Сумма,
	|	ТЗ.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ТЗ.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗРаспределение КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗ.ДоговорКонтрагента,
	|	СУММА(ВТ_ТЗ.Сумма) КАК Сумма,
	|	СУММА(ВТ_ТЗ.ВалютнаяСумма) КАК ВалютнаяСумма
	|ПОМЕСТИТЬ ВТ_св
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТЗ.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Организация,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	ВТ_св.Сумма КАК Сумма,
	|	ВТ_св.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата КАК СделкаДата
	|ИЗ
	|	ВТ_св КАК ВТ_св
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&Период, Организация = &Организация) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ПО ВТ_св.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
	|
	|УПОРЯДОЧИТЬ ПО
	|	СделкаДата
	|ИТОГИ
	|	МАКСИМУМ(Сумма),
	|	МАКСИМУМ(ВалютнаяСумма)
	|ПО
	|	ДоговорКонтрагента";
	
	
	Возврат Запрос.Текст;
	
КонецФункции 

Функция ТекстЗапросаРасчетыСКонтрагентами()
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТЗ.Сумма КАК Сумма,
	|	ТЗ.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ТЗ.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗРаспределение КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗ.ДоговорКонтрагента,
	|	СУММА(ВТ_ТЗ.Сумма) КАК Сумма,
	|	СУММА(ВТ_ТЗ.ВалютнаяСумма) КАК ВалютнаяСумма
	|ПОМЕСТИТЬ ВТ_св
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТЗ.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	|	РасчетыСКонтрагентамиОстатки.Организация,
	|	РасчетыСКонтрагентамиОстатки.Контрагент,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	ВТ_св.Сумма КАК Сумма,
	|	ВТ_св.ВалютнаяСумма КАК ВалютнаяСумма,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Дата КАК СделкаДата
	|ИЗ
	|	ВТ_св КАК ВТ_св
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.Остатки(&Период, Организация = &Организация) КАК РасчетыСКонтрагентамиОстатки
	|		ПО ВТ_св.ДоговорКонтрагента = РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
	|
	|УПОРЯДОЧИТЬ ПО
	|	СделкаДата
	|ИТОГИ
	|	МАКСИМУМ(Сумма),
	|	МАКСИМУМ(ВалютнаяСумма)
	|ПО
	|	ДоговорКонтрагента";
	
	
	Возврат Запрос.Текст;
	
	
	
КонецФункции 

Функция ТекстЗапросаРасчетыВзаиморасчетыСКонтрагентамиПоДокументамРасчетов()
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТЗ.Сумма КАК Сумма,
	|	ТЗ.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ТЗ.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗРаспределение КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗ.ДоговорКонтрагента,
	|	СУММА(ВТ_ТЗ.Сумма) КАК Сумма,
	|	СУММА(ВТ_ТЗ.ВалютнаяСумма) КАК ВалютнаяСумма
	|ПОМЕСТИТЬ ВТ_св
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТЗ.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Сделка,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ВидРасчетовСКонтрагентом,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.УпрУчет,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаРеглОстаток КАК СуммаРегл,
	|	ВТ_св.Сумма КАК Сумма,
	|	ВТ_св.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом.Дата КАК ДокументРасчетовСКонтрагентомДата
	|ИЗ
	|	ВТ_св КАК ВТ_св
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&Период, Организация = &Организация) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
	|		ПО ВТ_св.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументРасчетовСКонтрагентомДата
	|ИТОГИ
	|	МАКСИМУМ(Сумма),
	|	МАКСИМУМ(ВалютнаяСумма)
	|ПО
	|	ДоговорКонтрагента";
	
	
	Возврат Запрос.Текст;
	
	
КонецФункции 

// Гущина 2016.08.31  +++
Функция ТекстЗапросаРасчетыВзаиморасчетыСПодотчетнымиЛицами()
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.ФизЛицо КАК ФизЛицо,
	|	ТЗ.СуммаВзаиморасчетов КАК Сумма
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗРаспределение КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗ.ФизЛицо,
	|	СУММА(ВТ_ТЗ.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_св
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТЗ.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыСПодотчетнымиЛицами.ФизЛицо КАК ФизЛицо,
	|	ВзаиморасчетыСПодотчетнымиЛицами.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВзаиморасчетыСПодотчетнымиЛицами.Организация,
	|	ВзаиморасчетыСПодотчетнымиЛицами.Валюта,
	|	ВзаиморасчетыСПодотчетнымиЛицами.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыСПодотчетнымиЛицами.СуммаУпрОстаток КАК СуммаУпр,
	|	ВТ_св.Сумма КАК Сумма,
	|	ВзаиморасчетыСПодотчетнымиЛицами.РасчетныйДокумент.Дата КАК РасчетныйДокументДата
	|ИЗ
	|	ВТ_св КАК ВТ_св
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&Период, Организация = &Организация) КАК ВзаиморасчетыСПодотчетнымиЛицами
	|		ПО ВТ_св.ФизЛицо = ВзаиморасчетыСПодотчетнымиЛицами.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйДокумент
	|ИТОГИ
	|	МАКСИМУМ(Сумма)
	|ПО
	|	ФизЛицо";
	
	
	Возврат Запрос.Текст;
	
	
КонецФункции 
// Гущина 2016.08.31 ---


Процедура СписатьОстаткиПоРегистрамВзаиморасчетов(ИмяРегистра,ДокДвижения,СсылкаНаДокумент,ТЗРаспределение) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ИмяРегистра = "ВзаиморасчетыСКонтрагентами" Тогда 
		Запрос.Текст = ТекстЗапросаВзаиморасчетыСКонтрагентами();
	ИначеЕсли ИмяРегистра = "РасчетыСКонтрагентами" Тогда
		Запрос.Текст = ТекстЗапросаРасчетыСКонтрагентами();
	ИначеЕсли ИмяРегистра = "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов" Тогда
		Запрос.Текст = ТекстЗапросаРасчетыВзаиморасчетыСКонтрагентамиПоДокументамРасчетов();
	ИначеЕсли ИмяРегистра = "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации" Тогда 
		Запрос.Текст = ТекстЗапросаРасчетыПоПриобретениюВУсловныхЕдиницахОрганизации();
	ИначеЕсли	ИмяРегистра = "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации" Тогда
		Запрос.Текст = ТекстЗапросаРасчетыПоРеализацииВУсловныхЕдиницахОрганизации();
		//Гущина 2016.08.31 +++
	ИначеЕсли	ИмяРегистра = "ВзаиморасчетыСПодотчетнымиЛицами" Тогда
		Запрос.Текст = ТекстЗапросаРасчетыВзаиморасчетыСПодотчетнымиЛицами();
		//Гущина 2016.08.31 ---
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период", Новый Граница(СсылкаНаДокумент.СсылкаНаОбъект.Дата,ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СсылкаНаДокумент.СсылкаНаОбъект.Организация);   
	Запрос.УстановитьПараметр("ТЗРаспределение", ТЗРаспределение); 
	
	
	Если ИмяРегистра = "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации" ИЛИ ИмяРегистра = "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации" Тогда
		Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Результат.Следующий() Цикл
			СуммаКРаспределению = Результат.Сумма;
			ВалютнаяСуммаКРаспределению  = Результат.ВалютнаяСумма;
			
			ПоДок1 = Результат.Выбрать();
			Пока ПоДок1.Следующий() Цикл
				ПоДок1.Выбрать();
				СформироватьДвижениеПоВзаиморасчетам(СуммаКРаспределению,ВалютнаяСуммаКРаспределению,ПоДок1,ИмяРегистра,ДокДвижения,СсылкаНаДокумент);
			КонецЦикла;
		КонецЦикла;
		//Гущина 2016.08.31 +++
	ИначеЕсли  ИмяРегистра =  "ВзаиморасчетыСПодотчетнымиЛицами" тогда
		Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Результат.Следующий() Цикл
			СуммаКРаспределению = Результат.Сумма;
			ВалютнаяСуммаКРаспределению  = 0;// Результат.ВалютнаяСумма;
			
			ПоДок1 = Результат.Выбрать();
			СформироватьДвижениеПоВзаиморасчетам(СуммаКРаспределению,ВалютнаяСуммаКРаспределению,ПоДок1,ИмяРегистра,ДокДвижения,СсылкаНаДокумент);
		КонецЦикла;
        //Гущина 2016.08.31 ---
	Иначе
		Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Результат.Следующий() Цикл
			СуммаКРаспределению = Результат.Сумма;
			ВалютнаяСуммаКРаспределению  = Результат.ВалютнаяСумма;
			
			ПоДок1 = Результат.Выбрать();
			СформироватьДвижениеПоВзаиморасчетам(СуммаКРаспределению,ВалютнаяСуммаКРаспределению,ПоДок1,ИмяРегистра,ДокДвижения,СсылкаНаДокумент);
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СформироватьДвижениеПоВзаиморасчетам(СуммаКРаспределению,ВалютнаяСуммаКРаспределению,ПоДок,ИмяРегистра,ДокДвижения,СсылкаНаДокумент)
	
	Пока ПоДок.Следующий()  Цикл
		
		Если СуммаКРаспределению = 0 И ВалютнаяСуммаКРаспределению = 0 Тогда
			Прервать;
		КонецЕсли;	
		
		НС = ДокДвижения.Движения[ИмяРегистра].Добавить(); 
		НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		НС.ВидДвижения = ВидДвиженияНакопления.Расход;
		ЗаполнитьЗначенияСвойств(НС,ПоДок);
		
		Если ВалютнаяСуммаКРаспределению <> 0 Тогда 
			НС.СуммаВзаиморасчетов = МИН(ВалютнаяСуммаКРаспределению,ПоДок.СуммаВзаиморасчетов);
			
			Если ПоДок.СуммаВзаиморасчетов < 0 Тогда
				Если ВалютнаяСуммаКРаспределению  - (-ПоДок.СуммаВзаиморасчетов) < 0 Тогда
					НС.СуммаВзаиморасчетов = -ВалютнаяСуммаКРаспределению; 	
				КонецЕсли;	
			КонецЕсли;	
			
		Иначе
			Если ПоДок.СуммаВзаиморасчетов = NULL Тогда
				НС.СуммаВзаиморасчетов = 0;
			Иначе
				НС.СуммаВзаиморасчетов = МИН(СуммаКРаспределению,ПоДок.СуммаВзаиморасчетов);
			КонецЕсли;	
			
			//НС.СуммаВзаиморасчетов = МИН(СуммаКРаспределению,ПоДок.СуммаВзаиморасчетов);
			Если ПоДок.СуммаВзаиморасчетов = NULL Тогда
				НС.СуммаВзаиморасчетов = 0;
			Иначе	
				Если ПоДок.СуммаВзаиморасчетов < 0 Тогда
					Если СуммаКРаспределению  - (-ПоДок.СуммаВзаиморасчетов) < 0 Тогда
						НС.СуммаВзаиморасчетов = -СуммаКРаспределению; 	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
			
		КонецЕсли;
		
		// Гущина 2016.08.31 +++ добавила в условие  ВзаиморасчетыСПодотчетнымиЛицами ---
		Если ИмяРегистра = "ВзаиморасчетыСКонтрагентами" ИЛИ ИмяРегистра = "РасчетыСКонтрагентами" ИЛИ ИмяРегистра = "ВзаиморасчетыСПодотчетнымиЛицами" Тогда
			
			Если ПоДок.СуммаУпр = NULL Тогда
				НС.СуммаУпр = 0;
			Иначе	
				НС.СуммаУпр = МИН(СуммаКРаспределению,ПоДок.СуммаУпр);
				
				Если ПоДок.СуммаУпр < 0 Тогда
					Если СуммаКРаспределению  - (-ПоДок.СуммаУпр) < 0 Тогда
						НС.СуммаУпр = -СуммаКРаспределению; 	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
			
		ИначеЕсли ИмяРегистра = "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов" Тогда
			
			Если ПоДок.СуммаРегл = NULL Тогда
				НС.СуммаРегл = 0;	
			Иначе	
				НС.СуммаРегл = МИН(СуммаКРаспределению,ПоДок.СуммаРегл); 
				
				Если ПоДок.СуммаРегл < 0 Тогда
					Если СуммаКРаспределению  - (-ПоДок.СуммаРегл) < 0 Тогда
						НС.СуммаРегл = -СуммаКРаспределению; 	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
		ИначеЕсли ИмяРегистра = "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации" ИЛИ ИмяРегистра = "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации" Тогда
			
			Если ПоДок.СуммаРег = NULL Тогда
				НС.СуммаРег = 0;
			Иначе	
				НС.СуммаРег = МИН(СуммаКРаспределению,ПоДок.СуммаРег);	
				
				Если ПоДок.СуммаРег < 0 Тогда
					Если СуммаКРаспределению  - (-ПоДок.СуммаРег) < 0 Тогда
						НС.СуммаРег = -СуммаКРаспределению; 	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ВалютнаяСуммаКРаспределению <> 0 Тогда
			ВалютнаяСуммаКРаспределению = ВалютнаяСуммаКРаспределению - ?(НС.СуммаВзаиморасчетов < 0 ,- НС.СуммаВзаиморасчетов, НС.СуммаВзаиморасчетов);
			
			Если ИмяРегистра = "ВзаиморасчетыСКонтрагентами" ИЛИ ИмяРегистра = "РасчетыСКонтрагентами" Тогда
				СуммаКРаспределению = СуммаКРаспределению - НС.СуммаУпр;
			ИначеЕсли ИмяРегистра = "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов" Тогда
				СуммаКРаспределению = СуммаКРаспределению - НС.СуммаРегл;
			ИначеЕсли ИмяРегистра = "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации" ИЛИ ИмяРегистра = "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации" Тогда
				СуммаКРаспределению = СуммаКРаспределению - НС.СуммаРег;	
			КонецЕсли;
			
		Иначе	
			СуммаКРаспределению         = СуммаКРаспределению - ?(НС.СуммаВзаиморасчетов < 0 ,- НС.СуммаВзаиморасчетов, НС.СуммаВзаиморасчетов);
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры


Функция ТекстЗапросаНДСНачисленный()
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.СчетФактура КАК СчетФактура,
	|	ТЗ.НДС КАК НДС,
	|	ТЗ.Покупатель КАК Покупатель
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗРаспределение КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСНачисленныйОстатки.Организация,
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель КАК Покупатель,
	|	НДСНачисленныйОстатки.ВидНачисления,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента,
	|	НДСНачисленныйОстатки.ИсправленныйСчетФактура,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	ВТ_ТЗ.НДС КАК Сумма,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСНачисленный.Остатки(
	|				&Период,
	|				Организация В ИЕРАРХИИ (&Организация)
	|					И ВидЦенности = &ВидЦенности
	|					И ВидНачисления = &ВидНачисления) КАК НДСНачисленныйОстатки
	|		ПО ВТ_ТЗ.Покупатель = НДСНачисленныйОстатки.Покупатель
	|			И ВТ_ТЗ.СчетФактура = НДСНачисленныйОстатки.СчетФактура
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ
	|	МАКСИМУМ(Сумма)
	|ПО
	|	Покупатель,
	|	СчетФактура";
	
	
	Возврат Запрос.Текст;
	
КонецФункции 

Функция ТекстЗапросаНДСПредъявленный()
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.СчетФактура КАК СчетФактура,
	|	ТЗ.НДС КАК НДС,
	|	ТЗ.Поставщик КАК Поставщик
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗРаспределение КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
	|	ВТ_ТЗ.НДС КАК Сумма,
	|	НДСПредъявленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	ВТ_ТЗ.Поставщик КАК Поставщик,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.РасходыБудущихПериодов
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(, Организация = &Организация) КАК НДСПредъявленныйОстатки
	|		ПО ВТ_ТЗ.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ
	|	МАКСИМУМ(Сумма)
	|ПО
	|	СчетФактура,
	|	Поставщик";
	
	
	Возврат Запрос.Текст;
	
КонецФункции 



Функция ТекстЗапросаНДСсАвансов()
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.СчетФактура КАК СчетФактура,
	|	ТЗ.НДС КАК Сумма,
	|	ТЗ.Покупатель КАК Контрагент
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗРаспределение КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСсАвансовОстатки.Организация,
	|	НДСсАвансовОстатки.ВидЦенности,
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.Покупатель КАК Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ИсправленныйСчетФактура,
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСсАвансовОстатки.НДСОстаток КАК НДС,
	|	НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток КАК ВалютнаяСуммаСНДС,
	|	ВТ_ТЗ.Сумма КАК Сумма,
	|	НДСсАвансовОстатки.СчетФактура.Дата КАК СчетФактураДата
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСсАвансов.Остатки(
	|				&Период,
	|				Организация = &Организация
	|					И ВидЦенности = &ВидЦенности) КАК НДСсАвансовОстатки
	|		ПО ВТ_ТЗ.Контрагент = НДСсАвансовОстатки.Покупатель
	|			И ВТ_ТЗ.СчетФактура = НДСсАвансовОстатки.СчетФактура
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ
	//KM-WARE ИЗМЕНЕНИЕ ___  23.06.2015 НДС при переносе авансов ч/з Авизо. Начало
	//|	МАКСИМУМ(Сумма)
	|	СУММА(Сумма)
	//KM-WARE ИЗМЕНЕНИЕ ___  23.06.2015 НДС при переносе авансов ч/з Авизо. Окончание
	|ПО
	|	Покупатель,
	|	СчетФактура";
	
	
	Возврат Запрос.Текст;
	
КонецФункции 


Процедура СписатьОстаткиПоНДСНачисленный(ИмяРегистра,ДокДвижения,СсылкаНаДокумент,ТЗРаспределение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаНДСНачисленный();
	
	Запрос.УстановитьПараметр("Период", Новый Граница(СсылкаНаДокумент.СсылкаНаОбъект.Дата,ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СсылкаНаДокумент.СсылкаНаОбъект.Организация);   
	Запрос.УстановитьПараметр("ВидЦенности", Перечисления.ВидыЦенностей.АвансыПолученные);  
	Запрос.УстановитьПараметр("ВидНачисления", Перечисления.НДСВидНачисления.НДСсАвансов);   
	Запрос.УстановитьПараметр("ТЗРаспределение", ТЗРаспределение);   
	
	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Покупатель");
	Пока Результат.Следующий() Цикл
		
		СуммаКРаспределению = Результат.Сумма;
		
		ВыборкаДетальныеЗаписи1 = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДетальныеЗаписи1.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаДетальныеЗаписи1.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если СуммаКРаспределению = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НС = ДокДвижения.Движения[ИмяРегистра].Добавить(); 
				НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
				НС.ВидДвижения = ВидДвиженияНакопления.Расход;
				НС.Событие     = Перечисления.СобытияПоНДСПродажи.НДССкорректирован;
				НС.ДатаСобытия = НС.Период; 
				ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
				
				Если ВыборкаДетальныеЗаписи.НДС = Null Тогда 
					НС.НДС = 0;
				Иначе	
					НС.НДС = МИН(СуммаКРаспределению,ВыборкаДетальныеЗаписи.НДС);
				КонецЕсли;
				
				СуммаКРаспределению         = СуммаКРаспределению - ?(НС.НДС < 0 ,- НС.НДС, НС.НДС);
				
// {{KM WARE Лазаревский К.В. Заявка № 18.09.2015 начало
// для защиты от нулевого НДС
// {{Старый код:
				//Процент              = (НС.НДС * 100) / ВыборкаДетальныеЗаписи.НДС;
				//НС.СуммаБезНДС 		 = (НС.СуммаБезНДС * Процент) / 100;

// }}Новый код:
				Если ВыборкаДетальныеЗаписи.НДС = 0 Тогда
					Процент              = 0;
					НС.СуммаБезНДС 		 = НС.СуммаБезНДС;
				Иначе
					Процент              = (НС.НДС * 100) / ВыборкаДетальныеЗаписи.НДС;
					НС.СуммаБезНДС 		 = (НС.СуммаБезНДС * Процент) / 100;
				КонецЕсли;	
// }}KM WARE Лазаревский К.В. Заявка № 18.09.2015 окончание 				
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// {{KM WARE Лазаревский К.В. Заявка № 30.09.2015 начало
Процедура СписатьОстаткиПоНДСПредявленный(ИмяРегистра,ДокДвижения,СсылкаНаДокумент,ТЗРаспределение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаНДСПредъявленный();
	
	Запрос.УстановитьПараметр("Период", Новый Граница(СсылкаНаДокумент.СсылкаНаОбъект.Дата,ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СсылкаНаДокумент.СсылкаНаОбъект.Организация);   
	//Запрос.УстановитьПараметр("ВидЦенности", Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);  
	//Запрос.УстановитьПараметр("ВидНачисления", Перечисления.НДСВидНачисления.РеализацияСНДС);   
	Запрос.УстановитьПараметр("ТЗРаспределение", ТЗРаспределение);   
	
	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Поставщик");
	Пока Результат.Следующий() Цикл
		
		СуммаКРаспределению = Результат.Сумма;
		
		ВыборкаДетальныеЗаписи1 = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДетальныеЗаписи1.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаДетальныеЗаписи1.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если СуммаКРаспределению = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НС = ДокДвижения.Движения[ИмяРегистра].Добавить(); 
				ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
				НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
				НС.ВидДвижения = ВидДвиженияНакопления.Расход;
							
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	
	
КонецПроцедуры // СписатьОстаткиПоНДСПредявленный() }}KM WARE Лазаревский К.В. Заявка № 30.09.2015 окончание

Процедура СписатьОстаткиПоНДСсАвансов(ИмяРегистра,ДокДвижения,СсылкаНаДокумент,ТЗРаспределение) Экспорт
	//KM WARE ОТЛАДОЧНЫЙ КОД (В ОТСУТСТВИИ ОТЛАДЧИКА)
	//Сообщить("**********ТЗРаспределение");	
	//Для Каждого ТекСтрока Из ТЗРаспределение Цикл
	//	ПредстСтроки = "";
	//	Для Каждого ТекКолонка Из ТЗРаспределение.Колонки Цикл
	//		ПредстСтроки = Строка(ТекСтрока[ТекКолонка.Имя]) + Символы.Таб + ПредстСтроки;
	//	КонецЦикла;
	//	Сообщить(ПредстСтроки);	
	//КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаНДСсАвансов();
	
	Запрос.УстановитьПараметр("Период", Новый Граница(СсылкаНаДокумент.СсылкаНаОбъект.Дата,ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СсылкаНаДокумент.СсылкаНаОбъект.Организация);   
	Запрос.УстановитьПараметр("ВидЦенности", Перечисления.ВидыЦенностей.АвансыПолученные);   
	Запрос.УстановитьПараметр("ТЗРаспределение", ТЗРаспределение); 
	
	
	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Покупатель");
	Пока Результат.Следующий() Цикл
		
		
		СуммаКРаспределению = Результат.Сумма;
		
		ВыборкаДетальныеЗаписи1 = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"СчетФактура");
		Пока ВыборкаДетальныеЗаписи1.Следующий() Цикл
			
			
			
			
			ВыборкаДетальныеЗаписи = ВыборкаДетальныеЗаписи1.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если СуммаКРаспределению = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НС = ДокДвижения.Движения[ИмяРегистра].Добавить(); 
				НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
				НС.ДатаСобытия = НС.Период;
				НС.ВидДвижения = ВидДвиженияНакопления.Расход;
				ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
				
				Если ВыборкаДетальныеЗаписи.НДС  = Null или ВыборкаДетальныеЗаписи.НДС = 0  Тогда
					НС.НДС = 0;
					НС.СуммаБезНДС 		 = 0;
					НС.ВалютнаяСуммаСНДС = 0;
				Иначе	
					НС.НДС = МИН(СуммаКРаспределению,ВыборкаДетальныеЗаписи.НДС);
					
					
					СуммаКРаспределению  = СуммаКРаспределению - ?(НС.НДС < 0 ,- НС.НДС, НС.НДС);
					
					Процент              = (НС.НДС * 100) / ВыборкаДетальныеЗаписи.НДС;
					НС.СуммаБезНДС 		 = (НС.СуммаБезНДС * Процент) / 100;
					НС.ВалютнаяСуммаСНДС = (НС.ВалютнаяСуммаСНДС * Процент) / 100;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры


Процедура ОприходоватьОстаткиПоРегистрамВзаиморасчетов(ИмяРегистра,ДокДвижения,СсылкаНаДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРегистрНакопленияОбороты(ИмяРегистра, Истина, "", );
	
	Запрос.УстановитьПараметр("Организация", СсылкаНаДокумент.СсылкаНаОбъект.Организация);   
	Запрос.УстановитьПараметр("Регистратор", СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник);   
	
	Отказ  = Ложь;
	Ошибки = Новый Структура;
	Ошибки.Вставить("СписокОшибок", Новый Массив);
	Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	
	СтруктураПараметров = Новый Структура("Филиал,ДЗО",СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник,СсылкаНаДокумент.СсылкаНаОбъект.Организация); 	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаДетальныеЗаписи ИЗ Результат Цикл
		
		НС = ДокДвижения.Движения[ИмяРегистра].Добавить(); 
		НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		НС.ВидДвижения = ВидДвиженияНакопления.Приход;
		ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
		
		//	Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		
		// Гущина 2016.08.31 +++ добавила условие
		Если  ИмяРегистра <> "ВзаиморасчетыСПодотчетнымиЛицами" Тогда
		//---	
			
			НС.ДоговорКонтрагента = НайтиДоговорПоСоответствиюИзТЧ(НС.ДоговорКонтрагента,СсылкаНаДокумент);
			
			// {{KM WARE Малыгин П.К. Заявка № 34069 26.10.2015 начало
			// Если меняем договор, то меняем и контрагента
			НС.Контрагент = НС.ДоговорКонтрагента.Владелец; 
			// }}KM WARE Малыгин П.К. Заявка № 34069 26.10.2015 окончание
		КонецЕсли;
		
		НС.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;				
		
		Если ИмяРегистра = "ВзаиморасчетыСКонтрагентами" ИЛИ ИмяРегистра = "РасчетыСКонтрагентами" Тогда
			Если ЗначениеЗаполнено(НС.Сделка) Тогда
				
				МетаданныеДокумента = НС.Сделка.Метаданные();
				
			// {{KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 начало
			// Проверка не нужна
			// {{Старый код:
				//ОбъектФилиала = абс_Филиализация.ПолучитьОбъектПоСоответствию(НС.Сделка, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
				//Если ОбъектФилиала = Неопределено Тогда
				//	ОбъектФилиала = ПолучитьДокументРасчетов(НС.Сделка, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.СуммаВзаиморасчетов);	
				//КонецЕсли;

			// }}Новый код:
						ОбъектФилиала = ПолучитьДокументРасчетов(НС.Сделка, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.СуммаВзаиморасчетов);	
		   	// }}KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 окончание 	
						
				НС.Сделка  = ОбъектФилиала;
				
			КонецЕсли;
		// Гущина 2016.08.31 +++	
		ИначеЕсли ИмяРегистра = "ВзаиморасчетыСПодотчетнымиЛицами" Тогда
			Если ЗначениеЗаполнено(НС.РасчетныйДокумент) Тогда
				
				МетаданныеДокумента = НС.РасчетныйДокумент.Метаданные();
				
				ОбъектФилиала = ПолучитьДокументРасчетовСПодотчетнымиЛицами(НС.РасчетныйДокумент, СтруктураПараметров, Отказ, Ошибки,НС.ФизЛицо,НС.СуммаВзаиморасчетов);	
				
				НС.РасчетныйДокумент  = ОбъектФилиала;
				
			КонецЕсли;
			//Гущина   2016.08.31 ---
		ИначеЕсли ИмяРегистра = "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов" Тогда
			
			Если ЗначениеЗаполнено(НС.Сделка) Тогда
				
				МетаданныеДокумента = НС.Сделка.Метаданные();
				
			// {{KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 начало
			// Проверка не нужна
			// {{Старый код:
				//ОбъектФилиала = абс_Филиализация.ПолучитьОбъектПоСоответствию(НС.Сделка, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
				//Если ОбъектФилиала = Неопределено Тогда
				//	ОбъектФилиала = ПолучитьДокументРасчетов(НС.Сделка, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.СуммаВзаиморасчетов);	
				//КонецЕсли;

			// }}Новый код:
						ОбъектФилиала = ПолучитьДокументРасчетов(НС.Сделка, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.СуммаВзаиморасчетов);	
		   	// }}KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 окончание 	
				
				НС.Сделка    = ОбъектФилиала;	
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НС.ДокументРасчетовСКонтрагентом) Тогда
				
				МетаданныеДокумента = НС.ДокументРасчетовСКонтрагентом.Метаданные();
				
			// {{KM WARE Малыгин П.К. Заявка № 35423,35692  30.11.2015 начало
			// Проверка не нужна
			// {{Старый код:
				//ОбъектФилиала = абс_Филиализация.ПолучитьОбъектПоСоответствию(НС.Сделка, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
				//Если ОбъектФилиала = Неопределено Тогда
				//	ОбъектФилиала = ПолучитьДокументРасчетов(НС.Сделка, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.СуммаВзаиморасчетов);	
				//КонецЕсли;

			// }}Новый код:
						ОбъектФилиала = ПолучитьДокументРасчетов(НС.ДокументРасчетовСКонтрагентом, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.СуммаВзаиморасчетов);	
		   	// }}KM WARE Малыгин П.К. Заявка № 35423,35692  30.11.2015 окончание 	

				
				НС.ДокументРасчетовСКонтрагентом = ОбъектФилиала;	
			КонецЕсли;
			
		ИначеЕсли ИмяРегистра = "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации" ИЛИ ИмяРегистра = "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации" Тогда
			
			НС.Контрагент = НС.ДоговорКонтрагента.Владелец;
			
			Если ЗначениеЗаполнено(НС.Сделка) Тогда
				
				МетаданныеДокумента = НС.Сделка.Метаданные();
				
								
				//	 {{KM WARE Малыгин П.К. Заявка № 35423,35692  30.11.2015 начало
				//	 Проверка не нужна
				//	 {{Старый код:
				//		ОбъектФилиала = абс_Филиализация.ПолучитьОбъектПоСоответствию(НС.Сделка, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
				//		Если ОбъектФилиала = Неопределено Тогда
				//ОбъектФилиала = ПолучитьДокументРасчетов(НС.Сделка, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.СуммаВзаиморасчетов);	
				//					КонецЕсли;
				
				// }}Новый код:
				ОбъектФилиала = ПолучитьДокументРасчетов(НС.Сделка, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.СуммаВзаиморасчетов);	
				// }}KM WARE Малыгин П.К. Заявка № 35423,35692  30.11.2015 окончание 	
				
				
				НС.Сделка     = ОбъектФилиала;	
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НС.Документ) Тогда
				
				МетаданныеДокумента = НС.Документ.Метаданные();
				
				//	 {{KM WARE Малыгин П.К. Заявка № 35423,35692  30.11.2015 начало
				//	 Проверка не нужна
				//	 {{Старый код:
				//		ОбъектФилиала = абс_Филиализация.ПолучитьОбъектПоСоответствию(НС.Сделка, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
				//		Если ОбъектФилиала = Неопределено Тогда
				//ОбъектФилиала = ПолучитьДокументРасчетов(НС.Сделка, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.СуммаВзаиморасчетов);	
				//					КонецЕсли;
				
				// }}Новый код:
				ОбъектФилиала = ПолучитьДокументРасчетов(НС.Документ, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.СуммаВзаиморасчетов);	
				// }}KM WARE Малыгин П.К. Заявка № 35423,35692  30.11.2015 окончание 
				
				НС.Документ  = ОбъектФилиала;	
			КонецЕсли;
			
		КонецЕсли;
		
		//КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОприходоватьОстаткиПоНДСНачисленный(ИмяРегистра,ДокДвижения,СсылкаНаДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРегистрНакопленияОбороты(ИмяРегистра, Истина, "", );
	
	Запрос.УстановитьПараметр("Организация", СсылкаНаДокумент.СсылкаНаОбъект.Организация);   
	Запрос.УстановитьПараметр("Регистратор", СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник); 
	
	Отказ  = Ложь;
	Ошибки = Новый Структура;
	Ошибки.Вставить("СписокОшибок", Новый Массив);
	Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	
	СтруктураПараметров = Новый Структура("Филиал,ДЗО",СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник,СсылкаНаДокумент.СсылкаНаОбъект.Организация); 	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаДетальныеЗаписи ИЗ Результат Цикл
		НС = ДокДвижения.Движения[ИмяРегистра].Добавить(); 
		НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		НС.ВидДвижения = ВидДвиженияНакопления.Приход;
		НС.Событие     = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		НС.ДатаСобытия = НС.Период; 
		ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
		
		//Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		
		МетаданныеДокумента = НС.СчетФактура.Метаданные();
		ОбъектФилиала = абс_Филиализация.ПолучитьОбъектПоСоответствию(НС.СчетФактура, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
		
		НС.ДоговорКонтрагента = НайтиДоговорПоСоответствиюИзТЧ(НС.ДоговорКонтрагента,СсылкаНаДокумент);
		// {{KM WARE Малыгин П.К. Заявка № 34069 26.10.2015 начало
		// Если меняем договор, то меняем и контрагента
		НС.Покупатель = НС.ДоговорКонтрагента.Владелец; 
		// }}KM WARE Малыгин П.К. Заявка № 34069 26.10.2015 окончание
		
		НС.Организация        = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;	
		
		Если ОбъектФилиала = Неопределено Тогда
			ОбъектФилиала = ПолучитьДокументРасчетов(НС.СчетФактура, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.НДС);	
		КонецЕсли;
		
		НС.СчетФактура                = ОбъектФилиала;	
		
		Если ЗначениеЗаполнено(НС.ИсправленныйСчетФактура) Тогда
			
			МетаданныеДокумента = НС.ИсправленныйСчетФактура.Метаданные();
			ОбъектФилиала = абс_Филиализация.ПолучитьОбъектПоСоответствию(НС.ИсправленныйСчетФактура, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
			Если ОбъектФилиала = Неопределено Тогда
				ОбъектФилиала = ПолучитьДокументРасчетов(НС.ИсправленныйСчетФактура, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.НДС);	
			КонецЕсли;
			
			НС.ИсправленныйСчетФактура    = ОбъектФилиала;	
			
		КонецЕсли;
		
		//КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОприходоватьОстаткиПоНДСсАвансов(ИмяРегистра,ДокДвижения,СсылкаНаДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРегистрНакопленияОбороты(ИмяРегистра, Истина, "", );
	
	Запрос.УстановитьПараметр("Организация", СсылкаНаДокумент.СсылкаНаОбъект.Организация);   
	Запрос.УстановитьПараметр("Регистратор", СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник);   
	
	Отказ  = Ложь;
	Ошибки = Новый Структура;
	Ошибки.Вставить("СписокОшибок", Новый Массив);
	Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	
	СтруктураПараметров = Новый Структура("Филиал,ДЗО",СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник,СсылкаНаДокумент.СсылкаНаОбъект.Организация); 	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаДетальныеЗаписи ИЗ Результат Цикл
		НС = ДокДвижения.Движения[ИмяРегистра].Добавить(); 
		НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		НС.ДатаСобытия = НС.Период;
		НС.ВидДвижения = ВидДвиженияНакопления.Приход;
		ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
		
		//Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		
		НС.ДоговорКонтрагента = НайтиДоговорПоСоответствиюИзТЧ(НС.ДоговорКонтрагента,СсылкаНаДокумент);
		
		// {{KM WARE Малыгин П.К. Заявка № 34069 26.10.2015 начало
		// Если меняем договор, то меняем и контрагента
		НС.Покупатель = НС.ДоговорКонтрагента.Владелец; 
		// }}KM WARE Малыгин П.К. Заявка № 34069 26.10.2015 окончание
		
		НС.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;	
		
		МетаданныеДокумента = НС.СчетФактура.Метаданные();
		
		// {{KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 начало
		// Проверка не нужна
		// {{Старый код:
		//ОбъектФилиала = абс_Филиализация.ПолучитьОбъектПоСоответствию(НС.СчетФактура, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
		//Если ОбъектФилиала = Неопределено Тогда
		//ОбъектФилиала = ПолучитьДокументРасчетов(НС.СчетФактура, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.НДС);	
		//КонецЕсли;
			
		// }}Новый код:
		ОбъектФилиала = ПолучитьДокументРасчетов(НС.СчетФактура, СтруктураПараметров, Отказ, Ошибки,НС.ДоговорКонтрагента,НС.НДС);	
		// }}KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 окончание 
		
		// Start КТТК Ермолов Е.Л.  24.06.2015 Молькова
		Если ЗначениеЗаполнено(ОбъектФилиала) и Не ЗначениеЗаполнено(НС.ДоговорКонтрагента) Тогда 
			Попытка
				Договор = ОбъектФилиала.ДоговорКонтрагента;
				Если Договор.Организация = НС.Организация Тогда
					НС.ДоговорКонтрагента = ОбъектФилиала.ДоговорКонтрагента;
				Иначе 
					ДоговорМиграции = Договор.ДоговорПослеМиграции;
					Если ЗначениеЗаполнено(ДоговорМиграции) и ДоговорМиграции.Организация = НС.Организация Тогда
						НС.ДоговорКонтрагента = ДоговорМиграции;
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				
			КонецПопытки;
		КонецЕсли;
		// Stop КТТК Ермолов Е.Л.  24.06.2015
		НС.СчетФактура    = ОбъектФилиала;	
		
		//КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

// {{KM WARE Лазаревский К.В. Заявка № 30.09.2015 начало
// 
Процедура ОприходоватьОстаткиПоНДСПредъявленный(ИмяРегистра,ДокДвижения,СсылкаНаДокумент)
	ДанныеИсходник = РегистрыНакопления.НДСПредъявленный.СоздатьНаборЗаписей();
	ДанныеИсходник.Отбор.Регистратор.Значение = СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник;//.Движения[ИмяРегистра];
	ДанныеИсходник.Отбор.Регистратор.Использование = Истина;
	ДанныеИсходник.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
	ДанныеИсходник.Прочитать();
	
	НС = ДокДвижения.Движения[ИмяРегистра];
	
	Для Каждого ЗаписьИсх Из ДанныеИсходник Цикл
		ЗаписьРез = НС.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРез, ЗаписьИсх);
		ЗаписьРез.Регистратор = ДокДвижения.ссылка;
		ЗаписьРез.ВидДвижения = ВидДвиженияНакопления.Приход;
		ЗаписьРез.Период      = ДокДвижения.Дата;
		ЗаписьРез.Активность  = Истина;
		ЗаписьРез.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
	КонецЦикла;	
КонецПроцедуры	
// }}KM WARE Лазаревский К.В. Заявка № 30.09.2015 окончание

Функция ПолучитьДокументРасчетов(ДокументОснование, СтруктураПараметров, Отказ, Ошибки = Неопределено,НовыйДоговор,Сумма, Направление="Реализация") Экспорт //Эта функция теперь экспортная
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &Организация
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
	|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &ОбъектИсточник
	|";
	
	Запрос.УстановитьПараметр("ОбъектИсточник", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("ОрганизацияПриемник", СтруктураПараметров.Филиал);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
// {{KM WARE Лазаревский К.В. Заявка № 06.10.2015 начало
// Исправление ошибки: В регистр писались записи без документов-получателей!
// {{Старый код:
	//Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	//	Возврат ВыборкаДетальныеЗаписи.ОбъектПриемник;
	//Иначе

// }}Новый код:
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектПриемник) Тогда
			Возврат ВыборкаДетальныеЗаписи.ОбъектПриемник;
		Иначе
			Запись = РегистрыСведений.абс_СоответствияОбъектовПереноса.СоздатьМенеджерЗаписи();
			Запись.ОрганизацияПриемник = СтруктураПараметров.Филиал;
			Запись.ОбъектИсточник      = ДокументОснование;
			Запись.ОрганизацияИсточник = СтруктураПараметров.ДЗО;
			Запись.Прочитать();
			Запись.Удалить();
		КонецЕсли;
	КонецЕсли;
 // }}KM WARE Лазаревский К.В. Заявка № 06.10.2015 окончание 		

// +++ввв 20.12.2016 г.
	// найдём первый документоснование у которого есть СФ или он не ДРУ или пустой источник
	ДокументИсточник=ДокументОснование;
	Пока Истина Цикл
		_СФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументИсточник.Ссылка, ?(Направление="Реализация","СчетФактураВыданный","СчетФактураПолученный"), Неопределено);
		Если _СФ <> Неопределено Тогда
			Если ЗначениеЗаполнено(_СФ) Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ДокументИсточник) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
			_СФ = Неопределено;
			Прервать;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументИсточник.абс_ДокументОснование) Тогда
			_СФ = Неопределено;
			Прервать;
		КонецЕсли;
		ДокументИсточник=ДокументИсточник.абс_ДокументОснование;
	КонецЦикла;
	Док = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
	Попытка
		Если ЗначениеЗаполнено(ДокументИсточник.Дата) Тогда
			Док.Дата = ДокументИсточник.Дата;
		Иначе
			Док.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		КонецЕсли;
	Исключение
		Док.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецПопытки;
	Док.Организация           = СтруктураПараметров.Филиал;
	Док.абс_ДокументОснование = ДокументОснование; 
	Если НовыйДоговор.Организация <> Док.Организация Тогда 
		Отказ = Истина;
		Возврат Отказ;
	КонецЕсли;
	Док.Контрагент            = НовыйДоговор.Владелец;
	Док.ДоговорКонтрагента    = НовыйДоговор;
	Док.ВалютаДокумента       = НовыйДоговор.ВалютаВзаиморасчетов;
	МетаданныеДокумента = ДокументИсточник.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("НомерВходящегоДокумента",МетаданныеДокумента) Тогда
		Док.НомерВходящегоДокумента = ДокументИсточник.НомерВходящегоДокумента;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаВходящегоДокумента",МетаданныеДокумента) Тогда
		Док.ДатаВходящегоДокумента = ДокументИсточник.ДатаВходящегоДокумента;
	КонецЕсли;
	Док.ttk_Номер = ДокументИсточник.Номер;
	Док.ttk_Дата = ДокументИсточник.Дата;
	Если _СФ <> Неопределено Тогда
		Док.ttk_НомерСФ = _СФ.Номер;
		Док.ttk_ДатаСФ = _СФ.Дата;
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
		Док.ttk_НомерСФ = ДокументИсточник.ttk_НомерСФ;
		Док.ttk_ДатаСФ = ДокументИсточник.ttk_ДатаСФ;
	КонецЕсли;
// ---ввв 20.12.2016 г.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаДокумента",МетаданныеДокумента) Тогда
		Док.СуммаДокумента = Сумма;
	КонецЕсли;
// {{KM WARE Лазаревский К.В. Заявка № 06.10.2015 начало
// Исправление ошибки: В регистр писались записи без документов-получателей!
// {{Старый код:
		//Попытка
		//	Док.Записать(РежимЗаписиДокумента.Запись);	
		//Исключение
		//	Сообщить("Не удалось создать документ учета взаиморасчетов по : "+Символы.ПС+ ДокументОснование +Символы.ПС+ ОписаниеОшибки());			
		//КонецПопытки;
		//
		//абс_Филиализация.ДобавитьСоответствиеОбъектов(ДокументОснование, Док.Ссылка, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
// }}Новый код:
	Попытка
		// {{KM WARE Малыгин П.К. Заявка № 24.12.2015 начало
		Док.ОбменДанными.Загрузка = Истина;
		// }}KM WARE Малыгин П.К. Заявка № 24.12.2015 окончание
		Док.Записать(РежимЗаписиДокумента.Запись);	
		абс_Филиализация.ДобавитьСоответствиеОбъектов(ДокументОснование, Док.Ссылка, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
	Исключение
		Сообщить("Не удалось создать документ учета взаиморасчетов по : "+Символы.ПС+ ДокументОснование +Символы.ПС+ ОписаниеОшибки());	
		Отказ = Истина;
	КонецПопытки;
// }}KM WARE Лазаревский К.В. Заявка № 06.10.2015 окончание 		
	Возврат Док.Ссылка;
КонецФункции 

// Гущина 2016.08.31 +++ копия  ПолучитьДокументРасчетов с изменениями для подотчетников
Функция ПолучитьДокументРасчетовСПодотчетнымиЛицами(ДокументОснование, СтруктураПараметров, Отказ, Ошибки = Неопределено,Физлицо,Сумма) Экспорт //Эта функция теперь экспортная
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &Организация
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
	|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &ОбъектИсточник
	|";
	
	Запрос.УстановитьПараметр("ОбъектИсточник", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ДЗО);
	Запрос.УстановитьПараметр("ОрганизацияПриемник", СтруктураПараметров.Филиал);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
// {{KM WARE Лазаревский К.В. Заявка № 06.10.2015 начало
// Исправление ошибки: В регистр писались записи без документов-получателей!
// {{Старый код:
	//Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	//	Возврат ВыборкаДетальныеЗаписи.ОбъектПриемник;
	//Иначе

// }}Новый код:
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектПриемник) Тогда
			Возврат ВыборкаДетальныеЗаписи.ОбъектПриемник;
		Иначе
			Запись = РегистрыСведений.абс_СоответствияОбъектовПереноса.СоздатьМенеджерЗаписи();
			Запись.ОрганизацияПриемник = СтруктураПараметров.Филиал;
			Запись.ОбъектИсточник      = ДокументОснование;
			Запись.ОрганизацияИсточник = СтруктураПараметров.ДЗО;
			Запись.Прочитать();
			Запись.Удалить();
		КонецЕсли;
	КонецЕсли;
 // }}KM WARE Лазаревский К.В. Заявка № 06.10.2015 окончание 		

		МетаданныеДокумента = ДокументОснование.Метаданные();
		ИмяДокумента= МетаданныеДокумента.Имя;
		//Док = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
		Док = Документы[ИмяДокумента].СоздатьДокумент();
       	// {{KM WARE Малыгин П.К. Заявка № 24.12.2015 начало
		// Если у документа-источника есть дата - ставим эту же дату новому документов расчетов
		// {{Старый код:
		// 		Док.Дата 				  = абс_СерверныеФункции.ПолучитьДатуСервера();
		// }}Новый код:
		Попытка
			Если ЗначениеЗаполнено(ДокументОснование.Дата) Тогда
				Док.Дата 				  = ДокументОснование.Дата;
			Иначе
				Док.Дата 				  = абс_СерверныеФункции.ПолучитьДатуСервера();
			КонецЕсли;
		Исключение
			Док.Дата 				  = абс_СерверныеФункции.ПолучитьДатуСервера();
		КонецПопытки;
		// }}KM WARE Малыгин П.К. Заявка № 24.12.2015 окончание
		Док.Организация           = СтруктураПараметров.Филиал;
		//Док.абс_ДокументОснование = ДокументОснование; 
		
		//////Если НовыйДоговор.Организация <> Док.Организация Тогда 
		//////	Отказ = Истина;
		//////	Возврат Отказ;
		//////КонецЕсли;
		Если ИмяДокумента = "ВыдачаДенежныхДокументов" 
			или  ИмяДокумента = "ПриходныйКассовыйОрдер" 
			или  ИмяДокумента = "РасходныйКассовыйОрдер" тогда
			Док.Контрагент         = ФизЛицо;
		Иначе
			Док.ФизЛицо            = ФизЛицо;
		КонецЕсли;
		Если ИмяДокумента = "АвансовыйОтчет"   тогда
			Док.ВидПоступления =  ДокументОснование.ВидПоступления;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации",МетаданныеДокумента) Тогда
	//ИначеЕсли ИмяДокумента = "ВыдачаДенежныхДокументов"	
	//		или  ИмяДокумента = "ПриходныйКассовыйОрдер" 
	//		или  ИмяДокумента = "РасходныйКассовыйОрдер" тогда
	//		или  ИмяДокумента = "ПриходныйКассовыйОрдер" 
	//		или  ИмяДокумента = "РасходныйКассовыйОрдер" тогда
			Док.ВидОперации       = ДокументОснование.ВидОперации;
		КонецЕсли;
		//Док.Контрагент            = НовыйДоговор.Владелец;
		//Док.ДоговорКонтрагента    = НовыйДоговор;
		Док.ВалютаДокумента   = ДокументОснование.ВалютаДокумента;
		Док.Комментарий       = "#На основании "+ДокументОснование.Номер+" "+ДокументОснование.Организация+"#"+ДокументОснование.Комментарий;
		//Док.Ответственный  =   глЗначениеПеременной("глТекущийПользователь");

		//// Start КТТК Ермолов Е.Л.  19.06.2015 3367
		//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		//	Док.НомерВходящегоДокумента = ДокументОснование.НомерВходящегоДокумента;
		//	Док.ДатаВходящегоДокумента = ДокументОснование.ДатаВходящегоДокумента;
		//КонецЕсли;
		//// Stop КТТК Ермолов Е.Л.  19.06.2015
		
		//Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаДокумента",МетаданныеДокумента) Тогда
			Док.СуммаДокумента = Сумма;
		//КонецЕсли;
		
		Попытка
	//		// {{KM WARE Малыгин П.К. Заявка № 24.12.2015 начало
			Док.ОбменДанными.Загрузка = Истина;
	//		// }}KM WARE Малыгин П.К. Заявка № 24.12.2015 окончание

			Док.Записать(РежимЗаписиДокумента.Запись);	
			абс_Филиализация.ДобавитьСоответствиеОбъектов(ДокументОснование, Док.Ссылка, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
		Исключение
			Сообщить("Не удалось создать документ учета взаиморасчетов по : "+Символы.ПС+ ДокументОснование +Символы.ПС+ ОписаниеОшибки());	
			Отказ = Истина;
		КонецПопытки;
		

// }}KM WARE Лазаревский К.В. Заявка № 06.10.2015 окончание 		
		Возврат Док.Ссылка;
		
	//КонецЕсли;
	
КонецФункции 
// Гущина 2016.08.31 --- 


Функция СформироватьДокументРасчетныеОперацииСервер(СсылкаНаДокумент,Отказ) Экспорт
	
	ИзменитьАктивность = Ложь;
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник) Тогда
		Док = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
		Док.Дата = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		
		НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
		НС.Имя = "Хозрасчетный";
		НС.Представление = НС.Имя;
		
// {{KM WARE Лазаревский К.В. Заявка № 08.09.2015 начало
// Если забаланс, то нет и регистров
        Если СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации <> Перечисления.абс_ВидыОперацийАвизо.ПеремещениеИмуществаЗабаланс Тогда
// }}KM WARE Лазаревский К.В. Заявка № 08.09.2015 окончание			
			НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
			НС.Имя = "Налоговый";
			НС.Представление = НС.Имя;
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "ВзаиморасчетыСКонтрагентами";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "РасчетыСКонтрагентами";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "СтроительствоОбъектовОсновныхСредств";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "НДСНачисленный";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "НДСсАвансов";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "НДСПредъявленный";
			НС.Представление = НС.Имя; 
			
			// Гущина 2016.08.31 +++
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "ВзаиморасчетыСПодотчетнымиЛицами";
			НС.Представление = НС.Имя; 
			// Гущина 2016.08.31 ---
		КонецЕсли;
		
	Иначе
		Док = СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник.ПолучитьОбъект();
		
		Если Док.ПометкаУдаления Тогда
			Док.УстановитьПометкуУдаления(Ложь);
			ИзменитьАктивностьПоРегистаторуСервер(Док,Отказ,Истина);
			//Док.Записать();
		КонецЕсли;
		
		Если Док.ТаблицаРегистровБухгалтерии.Количество() = 0 Тогда 
			НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
			НС.Имя = "Хозрасчетный";
			НС.Представление = НС.Имя;
			
// {{KM WARE Лазаревский К.В. Заявка № 08.09.2015 начало
// Если забаланс, то нет и регистров
            Если СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации <> Перечисления.абс_ВидыОперацийАвизо.ПеремещениеИмуществаЗабаланс Тогда
// }}KM WARE Лазаревский К.В. Заявка № 08.09.2015 окончание			
				НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
				НС.Имя = "Налоговый";
				НС.Представление = НС.Имя;
			КонецЕсли;
		КонецЕсли;
		Если Док.ТаблицаРегистровНакопления.Количество() = 0 
// {{KM WARE Лазаревский К.В. Заявка № 08.09.2015 начало
// Если забаланс, то нет и регистров
            И СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации <> Перечисления.абс_ВидыОперацийАвизо.ПеремещениеИмуществаЗабаланс 
// }}KM WARE Лазаревский К.В. Заявка № 08.09.2015 окончание			
			Тогда 
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "ВзаиморасчетыСКонтрагентами";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "РасчетыСКонтрагентами";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "СтроительствоОбъектовОсновныхСредств";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "НДСНачисленный";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "НДСсАвансов";
			НС.Представление = НС.Имя; 
			
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "НДСПредъявленный";
			НС.Представление = НС.Имя; 
			
			// Гущина 2016.08.31 +++
			НС = Док.ТаблицаРегистровНакопления.Добавить();
			НС.Имя = "ВзаиморасчетыСПодотчетнымиЛицами";
			НС.Представление = НС.Имя; 
			// Гущина 2016.08.31 ---
		КонецЕсли;
		
		Док.Движения.Хозрасчетный.Очистить();
		Док.Движения.Налоговый.Очистить();
		Док.Движения.ВзаиморасчетыСКонтрагентами.Очистить();
		Док.Движения.ВзаиморасчетыСКонтрагентами.Очистить();
		Док.Движения.РасчетыСКонтрагентами.Очистить();
		Док.Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Очистить();
		Док.Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Очистить();
		Док.Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Очистить();
		Док.Движения.НДСсАвансов.Очистить();
		Док.Движения.НДСНачисленный.Очистить();
		Док.Движения.СтроительствоОбъектовОсновныхСредств.Очистить();
		Док.Движения.НДСПредъявленный.Очистить();
		Док.Движения.ВзаиморасчетыСПодотчетнымиЛицами.Очистить(); //Гущина 2016.08.31 +++---
		Док.Дата =  СсылкаНаДокумент.СсылкаНаОбъект.Дата;	
		Док.Записать();
		
	КонецЕсли;
	
	ТзВыборкаДетальныеЗаписи = ПолучитьТчРасчеты(СсылкаНаДокумент);
	
	ТЗВзаиморасчеты = Новый ТаблицаЗначений;
	ТЗВзаиморасчеты.Колонки.Добавить("ДоговорКонтрагента",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТЗВзаиморасчеты.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗВзаиморасчеты.Колонки.Добавить("ВалютнаяСумма",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗВзаиморасчеты.Колонки.Добавить("СчетУчета",Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ПустойНабор = РегистрыНакопления.НДСсАвансов.СоздатьНаборЗаписей();
	ТЗНДС = ПустойНабор.ВыгрузитьКолонки();	
	ТЗНДС.Свернуть("СчетФактура,Покупатель,НДС",);
// {{KM WARE Лазаревский К.В. Заявка № 30.09.2015 начало
// для НДСПредъявленный
 	ПустойНабор = РегистрыНакопления.НДСПредъявленный.СоздатьНаборЗаписей();
	ТЗНДСпредъявленный = ПустойНабор.ВыгрузитьКолонки();	
	ТЗНДСпредъявленный.Свернуть("СчетФактура,Поставщик,НДС",);

// }}KM WARE Лазаревский К.В. Заявка № 30.09.2015 окончание	

//Гущина 2016.08.31 +++
 	ПустойНабор = РегистрыНакопления.ВзаиморасчетыСПодотчетнымиЛицами.СоздатьНаборЗаписей();
	ТЗВзаиморасчетыСПодотчетнымиЛицами = ПустойНабор.ВыгрузитьКолонки();	
	ТЗВзаиморасчетыСПодотчетнымиЛицами.Свернуть("ФизЛицо,РасчетныйДокумент,СуммаВзаиморасчетов",);
//Гущина 2016.08.31 ---

    ОбъектСтроительства = Новый Массив;
	
	Для Каждого ВыборкаДетальныеЗаписи ИЗ ТзВыборкаДетальныеЗаписи Цикл
		НС = Док.Движения.Хозрасчетный.Добавить(); 
		ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
		НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		НС.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		// {{KM WARE Лазаревский К.В. Заявка № 08.09.2015 начало
		// для забаланса не проверяем и не дополняем
		// {{Старый код:
		//Если НС.СчетДт = СсылкаНаДокумент.СсылкаНаОбъект.КорСчет Тогда
		//	СчетДляПроверки = ВыборкаДетальныеЗаписи.СчетКт;
		//	НаборСубконтоДляРегистров = НС.СубконтоКт;
		//Иначе
		//	СчетДляПроверки = ВыборкаДетальныеЗаписи.СчетДт;
		//	НаборСубконтоДляРегистров = НС.СубконтоДт;
		//КонецЕсли;
		//Если НС.СчетКт.Валютный Тогда
		//	НС.ВалютаКт        =  ВыборкаДетальныеЗаписи.Валюта;
		//	НС.ВалютнаяСуммаКт =  ВыборкаДетальныеЗаписи.ВалютнаяСумма;
		//КонецЕсли;
		//
		//Если НС.СчетДт.Валютный Тогда	
		//	НС.ВалютаДт        =  ВыборкаДетальныеЗаписи.Валюта;
		//	НС.ВалютнаяСуммаДт =  ВыборкаДетальныеЗаписи.ВалютнаяСумма;
		//КонецЕсли;
		// }}Новый код:
		Если СсылкаНаДокумент.ссылкаНаОбъект.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.ПеремещениеИмуществаЗабаланс Тогда
			Если ЗначениеЗаполнено(НС.СчетКт) Тогда
				СчетДляПроверки = ВыборкаДетальныеЗаписи.СчетКт;
				НаборСубконтоДляРегистров = НС.СубконтоКт;
				// Гущина 23.09.16 T#7749293 +++
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Количество) Тогда
					НС.КоличествоКт =  ВыборкаДетальныеЗаписи.Количество;
				КонецЕсли;	
				// Гущина 23.09.16 T#7749293 ---
			Иначе
				СчетДляПроверки = ВыборкаДетальныеЗаписи.СчетДт;
				НаборСубконтоДляРегистров = НС.СубконтоДт;
				// Гущина 23.09.16 T#7749293 +++
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Количество) Тогда
					НС.КоличествоДт =  ВыборкаДетальныеЗаписи.Количество;
				КонецЕсли;	
				// Гущина 23.09.16 T#7749293 ---
			КонецЕсли;
			Если ЗначениеЗаполнено(НС.СчетКт) И НС.СчетКт.Валютный Тогда
				НС.ВалютаКт        =  ВыборкаДетальныеЗаписи.Валюта;
				НС.ВалютнаяСуммаКт =  ВыборкаДетальныеЗаписи.ВалютнаяСумма;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НС.СчетДт) И НС.СчетДт.Валютный Тогда	
				НС.ВалютаДт        =  ВыборкаДетальныеЗаписи.Валюта;
				НС.ВалютнаяСуммаДт =  ВыборкаДетальныеЗаписи.ВалютнаяСумма;
			КонецЕсли;
		Иначе
			Если НС.СчетДт = СсылкаНаДокумент.СсылкаНаОбъект.КорСчет Тогда
				СчетДляПроверки = ВыборкаДетальныеЗаписи.СчетКт;
				НаборСубконтоДляРегистров = НС.СубконтоКт;
			Иначе
				СчетДляПроверки = ВыборкаДетальныеЗаписи.СчетДт;
				НаборСубконтоДляРегистров = НС.СубконтоДт;
			КонецЕсли;
			Если НС.СчетКт.Валютный Тогда
				НС.ВалютаКт        =  ВыборкаДетальныеЗаписи.Валюта;
				НС.ВалютнаяСуммаКт =  ВыборкаДетальныеЗаписи.ВалютнаяСумма;
			КонецЕсли;
			
			Если НС.СчетДт.Валютный Тогда	
				НС.ВалютаДт        =  ВыборкаДетальныеЗаписи.Валюта;
				НС.ВалютнаяСуммаДт =  ВыборкаДетальныеЗаписи.ВалютнаяСумма;
			КонецЕсли;
		КонецЕсли;			
		// }}KM WARE Лазаревский К.В. Заявка № 08.09.2015 окончание 			
		
		
		
		а = 1; 
		Для каждого ВидСубконто Из ВыборкаДетальныеЗаписи.СчетДт.ВидыСубконто Цикл
			НС.СубконтоДт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)];	
			а = а + 1;
			
			Если ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения И НС.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				НС.СубконтоДт[ВидСубконто.ВидСубконто] = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;	
			КонецЕсли;
			
		КонецЦикла;
		
		а = 1; 
		Для каждого ВидСубконто Из ВыборкаДетальныеЗаписи.СчетКт.ВидыСубконто Цикл
			НС.СубконтоКт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)];	
			а = а + 1;
			
			Если ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения И НС.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				НС.СубконтоКт[ВидСубконто.ВидСубконто] = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;	
			КонецЕсли;
			
		КонецЦикла;
		
		ТипСчета  =  ПроверитьСчет(СчетДляПроверки);
		
		Если ТипСчета = 1 Тогда
			
			Контрагент          = НаборСубконтоДляРегистров.Контрагенты;
			ДоговорКонтрагента  = НаборСубконтоДляРегистров.Договоры;
			
			Если СчетДляПроверки <> ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам Тогда
				ТЗНС = ТЗВзаиморасчеты.Добавить();
				ТЗНС.ДоговорКонтрагента = ДоговорКонтрагента;
				ТЗНС.Сумма              = НС.Сумма;
				ТЗНС.ВалютнаяСумма      = ВыборкаДетальныеЗаписи.ВалютнаяСумма;
				ТЗНС.СчетУчета          = СчетДляПроверки;
			Иначе
				СчетФактура = НаборСубконтоДляРегистров.СФВыданные;
				
				ТЗНС = ТЗНДС.Добавить();
				ТЗНС.СчетФактура        = СчетФактура;
				ТЗНС.Покупатель         = Контрагент;
				ТЗНС.НДС                = НС.Сумма;
			КонецЕсли;
			
		ИначеЕсли ТипСчета = 5 Тогда
			
			Контрагент          = НаборСубконтоДляРегистров.Контрагенты;
			ДоговорКонтрагента  = НаборСубконтоДляРегистров.Договоры;
			СчетФактура         = НаборСубконтоДляРегистров.СФПолученные;
			
			ТЗНС = ТЗНДСпредъявленный.Добавить();
			ТЗНС.СчетФактура        = СчетФактура;
			ТЗНС.Поставщик          = Контрагент;
			ТЗНС.НДС                = НС.Сумма;
		КонецЕсли;
		
		Если СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.СтроительствоОбъековОС  Тогда
			ОбъектСтроительства.Добавить(НаборСубконтоДляРегистров.ОбъектыСтроительства);
			//	ПеренестиРегистрыСтроительствоОбъектовОС("СтроительствоОбъектовОсновныхСредств", ВидДвиженияНакопления.Расход,ОбъектСтроительства,Док,Отказ,СсылкаНаДокумент);
		КонецЕсли;
		
		//Гущина 2016.08.31 +++ не стала вносить изм в ПроверитьСчет
		СчетДляПроверкиРодитель = ПланыСчетов.Хозрасчетный.НайтиПоКоду("71");
		Если  СчетДляПроверки.Родитель = СчетДляПроверкиРодитель  тогда
			ФизЛицо          = НаборСубконтоДляРегистров.РаботникиОрганизации;
			
			ТЗ71 = ТЗВзаиморасчетыСПодотчетнымиЛицами.Добавить();
			ТЗ71.ФизЛицо        = ФизЛицо;
			ТЗ71.СуммаВзаиморасчетов   = НС.Сумма;
		КонецЕсли;	
		//Гущина 2016.08.31 ---
		
	КонецЦикла;
// {{KM WARE Лазаревский К.В. Заявка № 02.10.2015 начало
// для исправления ситуации, когда в ТЧ искуственно созданы строки с дублирующими значениями
	ТЗВзаиморасчеты.Свернуть("ДоговорКонтрагента, СчетУчета", "Сумма, ВалютнаяСумма");
	ТЗНДС.Свернуть("СчетФактура, Покупатель", "НДС");
	ТЗНДСпредъявленный.Свернуть("СчетФактура, Поставщик", "НДС");
// }}KM WARE Лазаревский К.В. Заявка № 02.10.2015 окончание	
	Если СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.СтроительствоОбъековОС  Тогда
		ПеренестиРегистрыСтроительствоОбъектовОС("СтроительствоОбъектовОсновныхСредств", ВидДвиженияНакопления.Расход,ОбъектСтроительства,Док,Отказ,СсылкаНаДокумент);
	ИначеЕсли СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.РасчетныеОперации  Тогда
		СписатьОстаткиПоРегистрамВзаиморасчетов("РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации",Док,СсылкаНаДокумент,ТЗВзаиморасчеты);
		СписатьОстаткиПоРегистрамВзаиморасчетов("РасчетыПоРеализацииВУсловныхЕдиницахОрганизации",Док,СсылкаНаДокумент,ТЗВзаиморасчеты);
		СписатьОстаткиПоРегистрамВзаиморасчетов("ВзаиморасчетыСКонтрагентами",Док,СсылкаНаДокумент,ТЗВзаиморасчеты); 
		СписатьОстаткиПоРегистрамВзаиморасчетов("РасчетыСКонтрагентами",Док,СсылкаНаДокумент,ТЗВзаиморасчеты);
		СписатьОстаткиПоРегистрамВзаиморасчетов("ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов",Док,СсылкаНаДокумент,ТЗВзаиморасчеты);
		
		СписатьОстаткиПоНДСНачисленный("НДСНачисленный",Док,СсылкаНаДокумент,ТЗНДС); 
		СписатьОстаткиПоНДСсАвансов("НДСсАвансов",Док,СсылкаНаДокумент,ТЗНДС);
// {{KM WARE Лазаревский К.В. Заявка № 30.09.2015 начало
// 
        СписатьОстаткиПоНДСПредявленный("НДСПредъявленный",Док,СсылкаНаДокумент,ТЗНДСпредъявленный);
// }}KM WARE Лазаревский К.В. Заявка № 30.09.2015 окончание		
        // Гущина 2016.08.31 +++
		СписатьОстаткиПоРегистрамВзаиморасчетов("ВзаиморасчетыСПодотчетнымиЛицами",Док,СсылкаНаДокумент,ТЗВзаиморасчетыСПодотчетнымиЛицами);
        //Гущина 2016.08.31 --- 
    КонецЕсли;
	
	
	ТзВыборкаДетальныеЗаписи = ПолучитьТчРасчетыНУ(СсылкаНаДокумент);
	Для Каждого ВыборкаДетальныеЗаписи ИЗ ТзВыборкаДетальныеЗаписи Цикл
		НС = Док.Движения.Налоговый.Добавить(); 
		ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
		НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		НС.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		
		а = 1; 
		Для каждого ВидСубконто Из ВыборкаДетальныеЗаписи.СчетДт.ВидыСубконто Цикл
			НС.СубконтоДт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)];	
			а = а + 1;
			
			Если ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения И НС.СчетДт = ПланыСчетов.Налоговый.РасчетыПоТекущимОперациям Тогда
				НС.СубконтоДт[ВидСубконто.ВидСубконто] = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;	
			КонецЕсли;
			
		КонецЦикла;
		
		а = 1; 
		Для каждого ВидСубконто Из ВыборкаДетальныеЗаписи.СчетКт.ВидыСубконто Цикл
			НС.СубконтоКт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)];	
			а = а + 1;
			
			Если ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения И НС.СчетКт = ПланыСчетов.Налоговый.РасчетыПоТекущимОперациям Тогда
				НС.СубконтоКт[ВидСубконто.ВидСубконто] = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не Отказ Тогда
		Док.Записать(РежимЗаписиДокумента.Запись);
		
		Возврат Док.Ссылка;
	КонецЕсли;
	
КонецФункции 



// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// {{KM WARE Лазаревский К.В. Заявка № 16.09.2015 начало
Функция СформироватьСписаниеНМАСервер(СсылкаНаДокумент,Отказ) Экспорт
	
	ИзменитьАктивность = Ложь;
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник) Тогда
		Док = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
		Док.Дата = КонецМесяца(СсылкаНаДокумент.СсылкаНаОбъект.Дата);
		
		НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
		НС.Имя = "Хозрасчетный";
		НС.Представление = НС.Имя;
		
		НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
		НС.Имя = "Налоговый";
		НС.Представление = НС.Имя;
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "СтоимостьНМАБухгалтерскийУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "СтоимостьНМАНалоговыйУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "Затраты";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "ЗатратыБухгалтерскийУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "ЗатратыНалоговыйУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "СостоянияНМАОрганизаций";
		НС.Представление = НС.Имя; 
			
		
	Иначе
		Док = СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник.ПолучитьОбъект();
		
		Если Док.ПометкаУдаления Тогда
			Док.УстановитьПометкуУдаления(Ложь);
			ИзменитьАктивностьПоРегистаторуСервер(Док,Отказ,Истина);
			//Док.Записать();
		   	
		КонецЕсли;
		Док.ТаблицаРегистровБухгалтерии.Очистить();
		Док.ТаблицаРегистровНакопления.Очистить();
		Док.ТаблицаРегистровСведений.Очистить();
		
		НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
		НС.Имя = "Хозрасчетный";
		НС.Представление = НС.Имя;
		
		НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
		НС.Имя = "Налоговый";
		НС.Представление = НС.Имя;
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "СтоимостьНМАБухгалтерскийУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "СтоимостьНМАНалоговыйУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "Затраты";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "ЗатратыБухгалтерскийУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "ЗатратыНалоговыйУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "СостоянияНМАОрганизаций";
		НС.Представление = НС.Имя; 
		
		Док.Движения.Хозрасчетный.Очистить();
		Док.Движения.Налоговый.Очистить();
		Док.Движения.СтоимостьНМАБухгалтерскийУчет.Очистить();
		Док.Движения.СтоимостьНМАНалоговыйУчет.Очистить();
		Док.Движения.Затраты.Очистить();
		Док.Движения.ЗатратыБухгалтерскийУчет.Очистить();
		Док.Движения.ЗатратыНалоговыйУчет.Очистить();
		Док.Движения.СостоянияНМАОрганизаций.Очистить();
		
		Док.Дата =  СсылкаНаДокумент.СсылкаНаОбъект.Дата;	
		
	КонецЕсли;
	Док.Записать();
	
		Запрос= Новый Запрос("ВЫБРАТЬ
		                     |	СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
		                     |	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчетаБУ,
		                     |	СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК СчетНачисленияАмортизацииНУ,
		                     |	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
		                     |	КорСчетНУ.СчетНУ КАК КоррСчетНУ
		                     |ИЗ
		                     |	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(, НематериальныйАктив В (&НематериальныеАктивы)) КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
		                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних КАК СоответствиеСчетовБУиНУСрезПоследних
		                     |		ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации = СоответствиеСчетовБУиНУСрезПоследних.СчетБУ,
		                     |	РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(, СчетБУ = &КоррСчетБУ) КАК КорСчетНУ");
	Запрос.УстановитьПараметр("НематериальныеАктивы", СсылкаНаДокумент.СсылкаНаОбъект.НМА.ВыгрузитьКолонку("НМА"));
	Запрос.УстановитьПараметр("КоррСчетБУ", СсылкаНаДокумент.СсылкаНаОбъект.КорСчет);
	ТЗСчетаУчета = Запрос.Выполнить().Выгрузить();
	
	КоррСчет = СсылкаНаДокумент.СсылкаНаОбъект.КорСчет;
	
	Для Каждого Строка Из СсылкаНаДокумент.СсылкаНаОбъект.НМА Цикл
//НаборЗаписей	Хозрасчетный	
		нз = Док.Движения.Хозрасчетный;
		//нз = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		////Восстанавливаем амортизацию за месяц
		//- Романова Н.Г. 19.07.2017 #77141609 
		//Запись = нз.Добавить();
		//Запись.Регистратор = Док.Ссылка;
		//Запись.Активность  = Истина;
		//Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		//Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		//
		СтрокаСчетаУчета = Строка.СпособОтражения.Способы[0];
		//Если СтрокаСчетаУчета = Неопределено Тогда
		//	Запись.СчетКт =  ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД;
		//	Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//ИначеЕсли СтрокаСчетаУчета.СчетЗатрат = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД Тогда 
		//	Запись.СчетКт = СтрокаСчетаУчета.СчетЗатрат;
		//	Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//Иначе
		//	Запись.СчетКт = СтрокаСчетаУчета.СчетЗатрат;
		//	Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//	Запись.СубконтоКт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
		//КонецЕсли;
		//Запись.СчетДт =  ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов;
		//Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//Запись.СубконтоКт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
		//Запись.СубконтоДт.НематериальныеАктивы = Строка.НМА;
		//Запись.Сумма   = Строка.АмортизацияЗаМесяцБУ;
		//Запись.Содержание = "Амортизация";
		//- Романова Н.Г. 19.07.2017 #77141609 
		
		//списание НМА по остаточной стоимости
		Запись = нз.Добавить();//РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();Док.Движения.Хозрасчетный.Добавить;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		Запись.СчетДт =  КоррСчет;
		Запись.СчетКт =  ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации;
		Запись.СубконтоДт.ОбособленныеПодразделения = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.СубконтоКт.НематериальныеАктивы = Строка.НМА;
		Запись.Сумма   = Строка.СтоимостьБУ;
		Запись.Содержание = "Передача НМА";
		
		//списание НМА по остаточной стоимости
		Запись = нз.Добавить();//РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();Док.Движения.Хозрасчетный.Добавить;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		Запись.СчетДт =  ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов;
		Запись.СчетКт =  КоррСчет;
		Запись.СубконтоДт.НематериальныеАктивы = Строка.НМА;
		Запись.СубконтоКт.ОбособленныеПодразделения = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.Сумма   = Строка.АмортизацияБУ;
		Запись.Содержание = "Передача НМА";
		
//набор записей налоговый 		
		
	
		нз = Док.Движения.Налоговый;
//		нз = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
		
		СтрокаСчетаНУ = ТЗСчетаУчета.Найти(Строка.НМА, "НематериальныйАктив");
		
		КоррСчет = СтрокаСчетаНУ.КоррСчетНУ;
		
		//Восстанавливаем амортизацию за месяц
		//- Романова Н.Г. 19.07.2017 #77141609 
		//Запись = нз.Добавить();
		//Запись.Регистратор = Док.Ссылка;
		//Запись.Активность  = Истина;
		//Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		//Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		//Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
		//Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
		//
		СтрокаСчетаУчета = Строка.СпособОтражения.Способы[0];
		//Если СтрокаСчетаУчета = Неопределено Тогда
		//	Запись.СчетКт =  ПланыСчетов.Налоговый.КоммерческиеРасходыНеОблагаемыеЕНВД;
		//	Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//ИначеЕсли СтрокаСчетаУчета.СчетЗатрат = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД Тогда 
		//	Запись.СчетКт = СтрокаСчетаУчета.СчетЗатратНУ;
		//	Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//Иначе
		//	Запись.СчетКт = СтрокаСчетаУчета.СчетЗатратНУ;
		//	Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//	Запись.СубконтоКт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
		//КонецЕсли;
		//Запись.СчетДт =  ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
		//Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//Запись.СубконтоКт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
		//Запись.СубконтоДт.НематериальныеАктивы = Строка.НМА;
		//Запись.Сумма   = Строка.АмортизацияЗаМесяцНУ;
		//Запись.Содержание = "Амортизация";
		
	//ВР за месяц	
		//Если Строка.АмортизацияЗаМесяцВР <> 0 Тогда
		//	Запись = нз.Добавить();
		//	Запись.Регистратор = Док.Ссылка;
		//	Запись.Активность  = Истина;
		//	Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		//	Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		//	Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
		//	Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
		//	
		СтрокаСчетаУчета = Строка.СпособОтражения.Способы[0];
		//	Если СтрокаСчетаУчета = Неопределено Тогда
		//		Запись.СчетКт =  ПланыСчетов.Налоговый.КоммерческиеРасходыНеОблагаемыеЕНВД;
		//		Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//	ИначеЕсли СтрокаСчетаУчета.СчетЗатрат = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД Тогда 
		//		Запись.СчетКт = СтрокаСчетаУчета.СчетЗатратНУ;
		//		Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//	Иначе
		//		Запись.СчетКт = СтрокаСчетаУчета.СчетЗатратНУ;
		//		Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//		Запись.СубконтоКт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
		//	КонецЕсли;
		//	Запись.СчетДт =  ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
		//	Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//	Запись.СубконтоКт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
		//	Запись.СубконтоДт.НематериальныеАктивы = Строка.НМА;
		//	Запись.Сумма   = Строка.АмортизацияЗаМесяцВР;
		//	Запись.Содержание = "Амортизация";
		//КонецЕсли;
		
	//ПР за месяц	
		//Если Строка.АмортизацияЗаМесяцПР <> 0 Тогда
		//	Запись = нз.Добавить();
		//	Запись.Регистратор = Док.Ссылка;
		//	Запись.Активность  = Истина;
		//	Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		//	Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		//	Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
		//	Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
		//	
		СтрокаСчетаУчета = Строка.СпособОтражения.Способы[0];
		//	Если СтрокаСчетаУчета = Неопределено Тогда
		//		Запись.СчетКт =  ПланыСчетов.Налоговый.КоммерческиеРасходыНеОблагаемыеЕНВД;
		//		Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//	ИначеЕсли СтрокаСчетаУчета.СчетЗатрат = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД Тогда 
		//		Запись.СчетКт = СтрокаСчетаУчета.СчетЗатратНУ;
		//		Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//	Иначе
		//		Запись.СчетКт = СтрокаСчетаУчета.СчетЗатратНУ;
		//		Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//		Запись.СубконтоКт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
		//	КонецЕсли;
		//	Запись.СчетДт =  ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
		//	Запись.СубконтоКт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//	Запись.СубконтоКт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
		//	Запись.СубконтоДт.НематериальныеАктивы = Строка.НМА;
		//	Запись.Сумма   = Строка.АмортизацияЗаМесяцПР;
		//	Запись.Содержание = "Амортизация";
		//КонецЕсли;
		//- Романова Н.Г. 19.07.2017 #77141609 
		
		
		//списание НМА по остаточной стоимости
		//НУ
		Запись = нз.Добавить();//РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();Док.Движения.Хозрасчетный.Добавить;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		Запись.СчетДт =  КоррСчет;
		Запись.СчетКт =  ПланыСчетов.Налоговый.НематериальныеАктивыОрганизации;
		Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
		Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
		Запись.СубконтоДт.ОбособленныеПодразделения = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.СубконтоКт.НематериальныеАктивы = Строка.НМА;
		Запись.Сумма   = Строка.СтоимостьНУ;
		Запись.Содержание = "Передача НМА";
		
		//списание НМА по остаточной стоимости
		//НУ
		Запись = нз.Добавить();//РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();Док.Движения.Хозрасчетный.Добавить;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		Запись.СчетДт =  ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
		Запись.СчетКт =  КоррСчет;
		Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
		Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
		Запись.СубконтоДт.НематериальныеАктивы = Строка.НМА;
		Запись.СубконтоКт.ОбособленныеПодразделения = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.Сумма   = Строка.АмортизацияНУ;
		Запись.Содержание = "Передача НМА";
		
		Если Строка.АмортизацияПР <> 0 Тогда
			//ПР
			Запись = нз.Добавить();//РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();Док.Движения.Хозрасчетный.Добавить;
			Запись.Регистратор = Док.Ссылка;
			Запись.Активность  = Истина;
			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
			Запись.СчетДт =  ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
			Запись.СчетКт =  КоррСчет;
			Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Запись.СубконтоДт.НематериальныеАктивы = Строка.НМА;
			Запись.СубконтоКт.ОбособленныеПодразделения = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			Запись.Сумма   = Строка.АмортизацияПР;
			Запись.Содержание = "Передача НМА";
		КонецЕсли;
		
		Если Строка.АмортизацияВР <> 0 Тогда
			//ВР
			Запись = нз.Добавить();//РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();Док.Движения.Хозрасчетный.Добавить;
			Запись.Регистратор = Док.Ссылка;
			Запись.Активность  = Истина;
			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
			Запись.СчетДт =  ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
			Запись.СчетКт =  КоррСчет;
			Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
			Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
			Запись.СубконтоДт.НематериальныеАктивы = Строка.НМА;
			Запись.СубконтоКт.ОбособленныеПодразделения = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			Запись.Сумма   = Строка.АмортизацияВР;
			Запись.Содержание = "Передача НМА";
		КонецЕсли;
		
	//СостоянияНМАОрганизаций	
		Запись = Док.Движения.СостоянияНМАОрганизаций.Добавить();
		//НЗ = РегистрыСведений.СостоянияНМАОрганизаций.СоздатьНаборЗаписей();
		//Запись = НЗ.Добавить();
		
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		Запись.НематериальныйАктив = Строка.НМА;
		Запись.Состояние   = Перечисления.ВидыСостоянийНМА.Списан;
		
//Регистры накопления		
	//СтоимостьНМАБухгалтерскийУчет
		//НЗ = РегистрыНакопления.СтоимостьНМАБухгалтерскийУчет.СоздатьНаборЗаписей();
		//Запись = НЗ.Добавить();
		
		Запись = Док.Движения.СтоимостьНМАБухгалтерскийУчет.Добавить();
 		Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		Запись.НематериальныйАктив = Строка.НМА;
		Запись.Амортизация  =  Строка.АмортизацияБУ + Строка.АмортизацияЗаМесяцБУ;
		Запись.Стоимость    =  Строка.СтоимостьБУ;
	//СтоимостьНМАНалоговыйУчет
		//НЗ = РегистрыНакопления.СтоимостьНМАНалоговыйУчет.СоздатьНаборЗаписей();
		//Запись = НЗ.Добавить();
		
		Запись = Док.Движения.СтоимостьНМАНалоговыйУчет.Добавить();
 		Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		Запись.НематериальныйАктив = Строка.НМА;
		Запись.Амортизация  =  Строка.АмортизацияНУ + Строка.АмортизацияЗаМесяцНУ;
		Запись.Стоимость    =  Строка.СтоимостьНУ;
		
	//Затраты
	//- Романова Н.Г. 19.07.2017 #77141609 
//		статьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА", Истина);
//		Если Строка.АмортизацияЗаМесяцБУ > 0 Тогда
//			Запись = Док.Движения.Затраты.Добавить();
//			//НЗ = РегистрыНакопления.Затраты.СоздатьНаборЗаписей();
//			//Запись = НЗ.Добавить();
//			
//			Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
//			Запись.Регистратор = Док.Ссылка;
//			Запись.Активность  = Истина;
//			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
//			Запись.КодОперации = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
//			Запись.Подразделение = СсылкаНаДокумент.СсылкаНаОбъект.Подразделение;
//			Запись.СтатьяЗатрат = статьяЗатрат; 
//			Запись.СписаниеПартий = Истина;
//			Запись.Сумма       =  - Строка.АмортизацияЗаМесяцБУ;
//		КонецЕсли;
//	//ЗатратыБУ
//		Если Строка.АмортизацияЗаМесяцБУ > 0 Тогда
//			Запись = Док.Движения.ЗатратыБухгалтерскийУчет.Добавить();
//			//НЗ = РегистрыНакопления.ЗатратыБухгалтерскийУчет.СоздатьНаборЗаписей();
//			//Запись = НЗ.Добавить();
//			
//			Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
//			Запись.Регистратор = Док.Ссылка;
//			Запись.Активность  = Истина;
//			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
//			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
//			Запись.КодОперации = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
//			//Запись.Подразделение = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
//			Запись.СтатьяЗатрат = статьяЗатрат; 
//			Запись.СписаниеПартий = Истина;
//			Если СтрокаСчетаУчета = Неопределено Тогда
//				Запись.СчетУчета =  ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД;
//			Иначе
//				Запись.СчетУчета = СтрокаСчетаУчета.СчетЗатрат;
//			КонецЕсли;
//			
//			Запись.Сумма       =  - Строка.АмортизацияЗаМесяцБУ;
//		КонецЕсли;
//	//ЗатратыНУ
//		Если Строка.АмортизацияЗаМесяцНУ > 0 Тогда
//			Запись = Док.Движения.ЗатратыНалоговыйУчет.Добавить();
//			//НЗ = РегистрыНакопления.ЗатратыНалоговыйУчет.СоздатьНаборЗаписей();
//			//Запись = НЗ.Добавить();
//			
//			Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
//			Запись.Регистратор = Док.Ссылка;
//			Запись.Активность  = Истина;
//			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
//			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
//			Запись.КодОперации = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
////			Запись.Подразделение = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
//			Запись.СтатьяЗатрат = статьяЗатрат; 
//			//Запись.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.
//			Запись.СписаниеПартий = Истина;
//			Если СтрокаСчетаУчета = Неопределено Тогда
//				Запись.СчетУчета =  ПланыСчетов.Налоговый.КоммерческиеРасходыНеОблагаемыеЕНВД;
//			Иначе
//				Запись.СчетУчета = СтрокаСчетаУчета.СчетЗатратНУ;
//			КонецЕсли;
//			Запись.Сумма       =  - Строка.АмортизацияЗаМесяцНУ;
//			Запись.ВременнаяРазница = - Строка.АмортизацияЗаМесяцВР; 
//			Запись.ПостояннаяРазница = - Строка.АмортизацияЗаМесяцПР;
//		КонецЕсли;
//- Романова Н.Г. 19.07.2017 #77141609 
	
	КонецЦикла;	
	
	Если Не Отказ Тогда
		Док.Записать(РежимЗаписиДокумента.Запись);
		
		Возврат Док.Ссылка;
	КонецЕсли;
	
КонецФункции 
 // СформироватьСписаниеНМАСервер() }}KM WARE Лазаревский К.В. Заявка № 16.09.2015 окончание
 
 // <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// {{KM WARE Лазаревский К.В. Заявка № 16.09.2015 начало
Функция СформироватьОприходованиеНМАСервер(СсылкаНаДокумент,Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник,
	|	абс_СоответствияОбъектовПереноса.ОбъектИсточник
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &Организация
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
	|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник В (&ОбъектИсточник)";
	
	Запрос.УстановитьПараметр("ОбъектИсточник", СсылкаНаДокумент.СсылкаНаОбъект.НМА.ВыгрузитьКолонку("НМА"));
	Запрос.УстановитьПараметр("Организация", СсылкаНаДокумент.СсылкаНаОбъект.Организация);
	Запрос.УстановитьПараметр("ОрганизацияПриемник", СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
	
	Результат = Запрос.Выполнить();
	СоответствиеНМА = Результат.Выгрузить();
	
	
	ИзменитьАктивность = Ложь;
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеПриемник) Тогда
		Док = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
		Док.Дата = КонецМесяца(СсылкаНаДокумент.СсылкаНаОбъект.Дата);
		
		НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
		НС.Имя = "Хозрасчетный";
		НС.Представление = НС.Имя;
		
		НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
		НС.Имя = "Налоговый";
		НС.Представление = НС.Имя;
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "СтоимостьНМАБухгалтерскийУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "СтоимостьНМАНалоговыйУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "Затраты";
		НС.Представление = НС.Имя; 
		
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "ЗатратыБухгалтерскийУчет";
		НС.Представление = НС.Имя; 
		
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "ЗатратыНалоговыйУчет";
		НС.Представление = НС.Имя; 
		
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "СостоянияНМАОрганизаций";
		НС.Представление = НС.Имя;
		
		//+ Романова Н.Г. 21.07.2017 #77141609
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет";
		НС.Представление = НС.Имя; 
		
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "ПервоначальныеСведенияНМАБухгалтерскийУчет";
		НС.Представление = НС.Имя; 
		
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "ПервоначальныеСведенияНМАНалоговыйУчет";
		НС.Представление = НС.Имя; 

		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет";
		НС.Представление = НС.Имя; 
		
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "СпособыОтраженияРасходовПоАмортизацииНМАНалоговыйУчет";
		НС.Представление = НС.Имя; 

		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "СчетаБухгалтерскогоУчетаНМА";
		НС.Представление = НС.Имя; 
		
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "СчетаНалоговогоУчетаНМА";
		НС.Представление = НС.Имя; 
		//- Романова Н.Г. 21.07.2017 #77141609    		
		
	Иначе
		Док = СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеПриемник.ПолучитьОбъект();
		Если Док.ПометкаУдаления Тогда
			Док.УстановитьПометкуУдаления(Ложь);
			ИзменитьАктивностьПоРегистаторуСервер(Док,Отказ,Истина);
			//Док.Записать();
			
		КонецЕсли;
		Док.ТаблицаРегистровБухгалтерии.Очистить();
		Док.ТаблицаРегистровНакопления.Очистить();
		Док.ТаблицаРегистровСведений.Очистить();
		
		НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
		НС.Имя = "Хозрасчетный";
		НС.Представление = НС.Имя;
		
		НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
		НС.Имя = "Налоговый";
		НС.Представление = НС.Имя;
		
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "СтоимостьНМАБухгалтерскийУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "СтоимостьНМАНалоговыйУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "Затраты";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "ЗатратыБухгалтерскийУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровНакопления.Добавить();
		НС.Имя = "ЗатратыНалоговыйУчет";
		НС.Представление = НС.Имя; 
			
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "СостоянияНМАОрганизаций";
		НС.Представление = НС.Имя; 
		
		//+ Романова Н.Г. 21.07.2017 #77141609
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет";
		НС.Представление = НС.Имя; 
		
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "ПервоначальныеСведенияНМАБухгалтерскийУчет";
		НС.Представление = НС.Имя; 
		
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "ПервоначальныеСведенияНМАНалоговыйУчет";
		НС.Представление = НС.Имя; 

		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет";
		НС.Представление = НС.Имя; 
		
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "СпособыОтраженияРасходовПоАмортизацииНМАНалоговыйУчет";
		НС.Представление = НС.Имя; 

		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "СчетаБухгалтерскогоУчетаНМА";
		НС.Представление = НС.Имя; 
		
		НС = Док.ТаблицаРегистровСведений.Добавить();
		НС.Имя = "СчетаНалоговогоУчетаНМА";
		НС.Представление = НС.Имя; 
		//- Романова Н.Г. 21.07.2017 #77141609 
		
		
		Док.Движения.Хозрасчетный.Очистить();
		Док.Движения.Налоговый.Очистить();
		Док.Движения.СтоимостьНМАБухгалтерскийУчет.Очистить();
		Док.Движения.СтоимостьНМАНалоговыйУчет.Очистить();
		Док.Движения.Затраты.Очистить();
		Док.Движения.ЗатратыБухгалтерскийУчет.Очистить();
		Док.Движения.ЗатратыНалоговыйУчет.Очистить();
		Док.Движения.СостоянияНМАОрганизаций.Очистить();
		//+ Романова Н.Г. 21.07.2017 #77141609
		Док.Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Очистить();
		Док.Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Очистить();
		Док.Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Очистить();
		Док.Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Очистить();
		Док.Движения.СпособыОтраженияРасходовПоАмортизацииНМАНалоговыйУчет.Очистить();
		Док.Движения.СчетаБухгалтерскогоУчетаНМА.Очистить();
		Док.Движения.СчетаНалоговогоУчетаНМА.Очистить();
		//- Романова Н.Г. 21.07.2017 #77141609 
		
		Док.Дата =  СсылкаНаДокумент.СсылкаНаОбъект.Дата;	
		
	КонецЕсли;
	Док.Записать();
	
		Запрос= Новый Запрос("ВЫБРАТЬ
		                     |	СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
		                     |	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчетаБУ,
		                     |	СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК СчетНачисленияАмортизацииНУ,
		                     |	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
		                     |	КорСчетНУ.СчетНУ КАК КоррСчетНУ
		                     |ИЗ
		                     |	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(, НематериальныйАктив В (&НематериальныеАктивы)) КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
		                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних КАК СоответствиеСчетовБУиНУСрезПоследних
		                     |		ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации = СоответствиеСчетовБУиНУСрезПоследних.СчетБУ,
		                     |	РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(, СчетБУ = &КоррСчетБУ) КАК КорСчетНУ");
	Запрос.УстановитьПараметр("НематериальныеАктивы", СсылкаНаДокумент.СсылкаНаОбъект.НМА.ВыгрузитьКолонку("НМА"));
	Запрос.УстановитьПараметр("КоррСчетБУ", СсылкаНаДокумент.СсылкаНаОбъект.КорСчет);
	ТЗСчетаУчета = Запрос.Выполнить().Выгрузить();
	
	КоррСчет = СсылкаНаДокумент.СсылкаНаОбъект.КорСчет;
	
	Для Каждого Строка Из СсылкаНаДокумент.СсылкаНаОбъект.НМА Цикл
		СтрокаНовНМА = СоответствиеНМА.Найти(Строка.НМА, "ОбъектИсточник");
		Если СтрокаНовНМА = Неопределено Тогда
			ГруппаНМА = Справочники.НематериальныеАктивы.НайтиПоНаименованию(СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник.Наименование);
			Если ГруппаНМА = Справочники.НематериальныеАктивы.ПустаяСсылка() Тогда
				ГруппаНМА = Справочники.НематериальныеАктивы.НайтиПоНаименованию("_" + СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник.Наименование);
				Если ГруппаНМА = Справочники.НематериальныеАктивы.ПустаяСсылка() Тогда
					ГруппаНМА = Справочники.НематериальныеАктивы.СоздатьГруппу();
					ГруппаНМА.Наименование =  СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник.Наименование;
					ГруппаНМА.Записать();
				КонецЕсли;
			КонецЕсли;
			
			НовНМАОбъект = Справочники.НематериальныеАктивы.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовНМАОбъект, Строка.НМА,,"Код, Владелец");
			НовНМАОбъект.УстановитьНовыйКод(СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник.Префикс);
			НовНМАОбъект.Родитель = ГруппаНМА;
			НовНМАОбъект.Записать();
			
			НовНМА = НовНМАОбъект.Ссылка;
			
			Запись = РегистрыСведений.абс_СоответствияОбъектовПереноса.СоздатьМенеджерЗаписи();
			Запись.Активность = Истина;
			Запись.ОбъектИсточник = Строка.НМА;
			Запись.ОбъектПриемник = НовНМА;
			Запись.ОрганизацияИсточник = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
			Запись.ОрганизацияПриемник = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			Запись.ТипПриемник         = "Нематериальный актив";
			Запись.Записать();
		Иначе
			НовНМА = СтрокаНовНМА.ОбъектПриемник;
		КонецЕсли;
//НаборЗаписей	Хозрасчетный	
		нз = Док.Движения.Хозрасчетный;
		//нз = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		////Восстанавливаем амортизацию за месяц
//- Романова Н.Г. 19.07.2017 #77141609 		
		//Запись = нз.Добавить();
		//Запись.Регистратор = Док.Ссылка;
		//Запись.Активность  = Истина;
		//Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		//Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		//
		//СтрокаСчетаУчета = Строка.СпособОтражения.Способы[0];
		//Если СтрокаСчетаУчета = Неопределено Тогда
		//	Запись.СчетДт =  ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД;
		//	Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//ИначеЕсли СтрокаСчетаУчета.СчетЗатрат = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД Тогда 
		//	Запись.СчетДт = СтрокаСчетаУчета.СчетЗатрат;
		//	Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//Иначе
		//	Запись.СчетДт = СтрокаСчетаУчета.СчетЗатрат;
		//	Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//	Запись.СубконтоДт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
		//КонецЕсли;
		//Запись.СчетКт =  ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов;
		//Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
		//Запись.СубконтоДт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
		//Запись.СубконтоКт.НематериальныеАктивы = НовНМА;
		//Запись.Сумма   = Строка.АмортизацияЗаМесяцБУ;
		//Запись.Содержание = "Амортизация";
//- Романова Н.Г. 19.07.2017 #77141609 

		//списание НМА по остаточной стоимости
		Запись = нз.Добавить();//РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();Док.Движения.Хозрасчетный.Добавить;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.СчетКт =  КоррСчет;
		Запись.СчетДт =  ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации;
		Запись.СубконтоКт.ОбособленныеПодразделения = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		Запись.СубконтоДт.НематериальныеАктивы = НовНМА;
		Запись.Сумма   = Строка.СтоимостьБУ;
		Запись.Содержание = "Передача НМА";
		
		//списание НМА по остаточной стоимости
		Запись = нз.Добавить();//РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();Док.Движения.Хозрасчетный.Добавить;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.СчетКт =  ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов;
		Запись.СчетДт =  КоррСчет;
		Запись.СубконтоКт.НематериальныеАктивы = НовНМА;
		Запись.СубконтоДт.ОбособленныеПодразделения = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		Запись.Сумма   = Строка.АмортизацияБУ;
		Запись.Содержание = "Передача НМА";
		
//набор записей налоговый 		
		
	
		нз = Док.Движения.Налоговый;
//		нз = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
		
		СтрокаСчетаНУ = ТЗСчетаУчета.Найти(Строка.НМА, "НематериальныйАктив");
		
		КоррСчет = СтрокаСчетаНУ.КоррСчетНУ;
		
		//Восстанавливаем амортизацию за месяц
//- Романова Н.Г. 19.07.2017 #77141609 		
	//	Запись = нз.Добавить();
	//	Запись.Регистратор = Док.Ссылка;
	//	Запись.Активность  = Истина;
	//	Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
	//	Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
	//	Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
	//	Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
	//	
	//	СтрокаСчетаУчета = Строка.СпособОтражения.Способы[0];
	//	Если СтрокаСчетаУчета = Неопределено Тогда
	//		Запись.СчетДт =  ПланыСчетов.Налоговый.КоммерческиеРасходыНеОблагаемыеЕНВД;
	//		Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
	//	ИначеЕсли СтрокаСчетаУчета.СчетЗатрат = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД Тогда 
	//		Запись.СчетДт = СтрокаСчетаУчета.СчетЗатратНУ;
	//		Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
	//	Иначе
	//		Запись.СчетДт = СтрокаСчетаУчета.СчетЗатратНУ;
	//		Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
	//		Запись.СубконтоДт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
	//	КонецЕсли;
	//	Запись.СчетКт =  ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
	//	Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
	//	Запись.СубконтоДт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
	//	Запись.СубконтоКт.НематериальныеАктивы = НовНМА;
	//	Запись.Сумма   = Строка.АмортизацияЗаМесяцНУ;
	//	Запись.Содержание = "Амортизация";
	//	
	////ВР за месяц	
	//	Если Строка.АмортизацияЗаМесяцВР <> 0 Тогда
	//		Запись = нз.Добавить();
	//		Запись.Регистратор = Док.Ссылка;
	//		Запись.Активность  = Истина;
	//		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
	//		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
	//		Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
	//		Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
	//		
	//		СтрокаСчетаУчета = Строка.СпособОтражения.Способы[0];
	//		Если СтрокаСчетаУчета = Неопределено Тогда
	//			Запись.СчетДт =  ПланыСчетов.Налоговый.КоммерческиеРасходыНеОблагаемыеЕНВД;
	//			Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
	//		ИначеЕсли СтрокаСчетаУчета.СчетЗатрат = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД Тогда 
	//			Запись.СчетДт = СтрокаСчетаУчета.СчетЗатратНУ;
	//			Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
	//		Иначе
	//			Запись.СчетДт = СтрокаСчетаУчета.СчетЗатратНУ;
	//			Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
	//			Запись.СубконтоДт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
	//		КонецЕсли;
	//		Запись.СчетКт =  ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
	//		Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
	//		Запись.СубконтоДт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
	//		Запись.СубконтоКт.НематериальныеАктивы = НовНМА;
	//		Запись.Сумма   = Строка.АмортизацияЗаМесяцВР;
	//		Запись.Содержание = "Амортизация";
	//	КонецЕсли;
	//	
	////ПР за месяц	
	//	Если Строка.АмортизацияЗаМесяцПР <> 0 Тогда
	//		Запись = нз.Добавить();
	//		Запись.Регистратор = Док.Ссылка;
	//		Запись.Активность  = Истина;
	//		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
	//		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
	//		Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
	//		Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
	//		
	//		СтрокаСчетаУчета = Строка.СпособОтражения.Способы[0];
	//		Если СтрокаСчетаУчета = Неопределено Тогда
	//			Запись.СчетДт =  ПланыСчетов.Налоговый.КоммерческиеРасходыНеОблагаемыеЕНВД;
	//			Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
	//		ИначеЕсли СтрокаСчетаУчета.СчетЗатрат = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД Тогда 
	//			Запись.СчетДт = СтрокаСчетаУчета.СчетЗатратНУ;
	//			Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
	//		Иначе
	//			Запись.СчетДт = СтрокаСчетаУчета.СчетЗатратНУ;
	//			Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
	//			Запись.СубконтоДт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
	//		КонецЕсли;
	//		Запись.СчетКт =  ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
	//		Запись.СубконтоДт.СтатьиЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА");
	//		Запись.СубконтоДт.Подразделения = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
	//		Запись.СубконтоКт.НематериальныеАктивы = НовНМА;
	//		Запись.Сумма   = Строка.АмортизацияЗаМесяцПР;
	//		Запись.Содержание = "Амортизация";
	//	КонецЕсли;
//- Романова Н.Г. 19.07.2017 #77141609 
		
		//списание НМА по остаточной стоимости
		//НУ
		Запись = нз.Добавить();//РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();Док.Движения.Хозрасчетный.Добавить;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.СчетКт =  КоррСчет;
		Запись.СчетДт =  ПланыСчетов.Налоговый.НематериальныеАктивыОрганизации;
		Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
		Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
		Запись.СубконтоКт.ОбособленныеПодразделения = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		Запись.СубконтоДт.НематериальныеАктивы = НовНМА;
		Запись.Сумма   = Строка.СтоимостьНУ;
		Запись.Содержание = "Передача НМА";
		
		//списание НМА по остаточной стоимости
		//НУ
		Запись = нз.Добавить();//РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();Док.Движения.Хозрасчетный.Добавить;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.СчетКт =  ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
		Запись.СчетДт =  КоррСчет;
		Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
		Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
		Запись.СубконтоКт.НематериальныеАктивы = НовНМА;
		Запись.СубконтоДт.ОбособленныеПодразделения = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		Запись.Сумма   = Строка.АмортизацияНУ;
		Запись.Содержание = "Передача НМА";
		
		Если Строка.АмортизацияПР <> 0 Тогда
			//ПР
			Запись = нз.Добавить();//РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();Док.Движения.Хозрасчетный.Добавить;
			Запись.Регистратор = Док.Ссылка;
			Запись.Активность  = Истина;
			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			Запись.СчетКт =  ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
			Запись.СчетДт =  КоррСчет;
			Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Запись.СубконтоКт.НематериальныеАктивы = НовНМА;
			Запись.СубконтоДт.ОбособленныеПодразделения = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
			Запись.Сумма   = Строка.АмортизацияПР;
			Запись.Содержание = "Передача НМА";
		КонецЕсли;
		
		Если Строка.АмортизацияВР <> 0 Тогда
			//ВР
			Запись = нз.Добавить();//РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();Док.Движения.Хозрасчетный.Добавить;
			Запись.Регистратор = Док.Ссылка;
			Запись.Активность  = Истина;
			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			Запись.СчетКт =  ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
			Запись.СчетДт =  КоррСчет;
			Запись.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
			Запись.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
			//+ Романова Н.Г. 19.07.2017 #77141609 
			Запись.СубконтоКт.НематериальныеАктивы = НовНМА;
			//- Романова Н.Г. 19.07.2017 #77141609 
			Запись.СубконтоДт.ОбособленныеПодразделения = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
			Запись.Сумма   = Строка.АмортизацияВР;
			Запись.Содержание = "Передача НМА";
		КонецЕсли;
		
	//СостоянияНМАОрганизаций	
		Запись = Док.Движения.СостоянияНМАОрганизаций.Добавить();
//		НЗ = РегистрыСведений.СостоянияНМАОрганизаций.СоздатьНаборЗаписей();
//		Запись = НЗ.Добавить();
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.НематериальныйАктив = НовНМА;
		Запись.Состояние   = Перечисления.ВидыСостоянийНМА.ПринятКУчету;
		
//Регистры накопления		
	//СтоимостьНМАБухгалтерскийУчет
		//НЗ = РегистрыНакопления.СтоимостьНМАБухгалтерскийУчет.СоздатьНаборЗаписей();
		//Запись = НЗ.Добавить();
		
		Запись = Док.Движения.СтоимостьНМАБухгалтерскийУчет.Добавить();
 		Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.НематериальныйАктив = НовНМА;
		Запись.Амортизация  =  Строка.АмортизацияБУ;// + Строка.АмортизацияЗаМесяцБУ;
		Запись.Стоимость    =  Строка.СтоимостьБУ;
		
		Запись = Док.Движения.СтоимостьНМАБухгалтерскийУчет.Добавить();
 		Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.НематериальныйАктив = НовНМА;
		Запись.Амортизация  =  Строка.АмортизацияЗаМесяцБУ;
		Запись.Стоимость    =  0;
	//СтоимостьНМАНалоговыйУчет
		//НЗ = РегистрыНакопления.СтоимостьНМАНалоговыйУчет.СоздатьНаборЗаписей();
		//Запись = НЗ.Добавить();
		
		Запись = Док.Движения.СтоимостьНМАНалоговыйУчет.Добавить();
 		Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.НематериальныйАктив = НовНМА;
		Запись.Амортизация  =  Строка.АмортизацияНУ;// + Строка.АмортизацияЗаМесяцНУ;
		Запись.Стоимость    =  Строка.СтоимостьНУ;
		
		Запись = Док.Движения.СтоимостьНМАНалоговыйУчет.Добавить();
 		Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
		Запись.Регистратор = Док.Ссылка;
		Запись.Активность  = Истина;
		Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		Запись.НематериальныйАктив = НовНМА;
		Запись.Амортизация  =  Строка.АмортизацияЗаМесяцНУ;
		Запись.Стоимость    =  0;
		
		//+ Романова Н.Г. 21.07.2017 #77141609
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", СсылкаНаДокумент.СсылкаНаОбъект.Дата);
		Запрос.УстановитьПараметр("Организация", СсылкаНаДокумент.СсылкаНаОбъект.Организация);
		Запрос.УстановитьПараметр("НематериальныйАктив", СтрокаНовНМА.ОбъектИсточник);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент
		               |ИЗ
		               |	РегистрСведений.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
		               |			&Период,
		               |			Организация = &Организация
		               |				И НематериальныйАктив = &НематериальныйАктив) КАК НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних";
					   
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() > 0 Тогда 
		
			Запись = Док.Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
			//Запись = Документы.КорректировкаЗаписейРегистров.НайтиПоНомеру().ПолучитьОбъект().Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
			Запись.Регистратор = Док.Ссылка;
			Запись.Активность  = Истина;
			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			Запись.НематериальныйАктив = НовНМА;
			Запись.СпециальныйКоэффициент  =  Результат[0].СпециальныйКоэффициент;
		КонецЕсли;
		
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию,
		               |	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
		               |	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
		               |	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации,
		               |	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособПоступления,
		               |	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
		               |	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Коэффициент
		               |ИЗ
		               |	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
		               |			&Период,
		               |			Организация = &Организация
		               |				И НематериальныйАктив = &НематериальныйАктив) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних";
					   
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() > 0 Тогда 
		
			Запись = Док.Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
			//Запись = Документы.КорректировкаЗаписейРегистров.НайтиПоНомеру().ПолучитьОбъект().Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
			Запись.Регистратор = Док.Ссылка;
			Запись.Активность  = Истина;
			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			Запись.НематериальныйАктив = НовНМА;
			
			Запись.НачислятьАмортизацию			=  Результат[0].НачислятьАмортизацию;
			Запись.ОбъемПродукцииРаботДляВычисленияАмортизации  =  Результат[0].ОбъемПродукцииРаботДляВычисленияАмортизации;
			Запись.ПервоначальнаяСтоимость		=  Результат[0].ПервоначальнаяСтоимость;
			Запись.СпособНачисленияАмортизации	=  Результат[0].СпособНачисленияАмортизации;
			Запись.СпособПоступления			=  Результат[0].СпособПоступления;
			Запись.СрокПолезногоИспользования	=  Результат[0].СрокПолезногоИспользования;
			Запись.Коэффициент					=  Результат[0].Коэффициент;
		КонецЕсли;
		
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.АмортизацияДо2002,
		               |	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации,
		               |	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию,
		               |	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ,
		               |	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СтоимостьДо2002,
		               |	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования
		               |ИЗ
		               |	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
		               |			&Период,
		               |			Организация = &Организация
		               |				И НематериальныйАктив = &НематериальныйАктив) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних";
					   
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() > 0 Тогда 
		
			Запись = Док.Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
			//Запись = Документы.КорректировкаЗаписейРегистров.НайтиПоНомеру().ПолучитьОбъект().Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
			Запись.Регистратор = Док.Ссылка;
			Запись.Активность  = Истина;
			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			Запись.НематериальныйАктив = НовНМА;
			
			Запись.НачислятьАмортизацию			=  Результат[0].НачислятьАмортизацию;
			Запись.АмортизацияДо2002  			=  Результат[0].АмортизацияДо2002;
			Запись.ПервоначальнаяСтоимостьНУ	=  Результат[0].ПервоначальнаяСтоимостьНУ;
			Запись.МетодНачисленияАмортизации	=  Результат[0].МетодНачисленияАмортизации;
			Запись.СтоимостьДо2002				=  Результат[0].СтоимостьДо2002;
			Запись.СрокПолезногоИспользования	=  Результат[0].СрокПолезногоИспользования;			
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов
		               |ИЗ
		               |	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
		               |			&Период,
		               |			Организация = &Организация
		               |				И НематериальныйАктив = &НематериальныйАктив) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних";
					   
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() > 0 Тогда 
		
			Запись = Док.Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Добавить();
			//Запись = Документы.КорректировкаЗаписейРегистров.НайтиПоНомеру().ПолучитьОбъект().Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
			Запись.Регистратор = Док.Ссылка;
			Запись.Активность  = Истина;
			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			Запись.НематериальныйАктив = НовНМА;
			
			Запись.СпособОтраженияРасходов			=  Результат[0].СпособОтраженияРасходов;		
		КонецЕсли;
		
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СпособыОтраженияРасходовПоАмортизацииНМАНалоговыйУчетСрезПоследних.СпособОтраженияРасходов
		               |ИЗ
		               |	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАНалоговыйУчет.СрезПоследних(
		               |			&Период,
		               |			Организация = &Организация
		               |				И НематериальныйАктив = &НематериальныйАктив) КАК СпособыОтраженияРасходовПоАмортизацииНМАНалоговыйУчетСрезПоследних";
					   
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() > 0 Тогда 
		
			Запись = Док.Движения.СпособыОтраженияРасходовПоАмортизацииНМАНалоговыйУчет.Добавить();
			//Запись = Документы.КорректировкаЗаписейРегистров.НайтиПоНомеру().ПолучитьОбъект().Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
			Запись.Регистратор = Док.Ссылка;
			Запись.Активность  = Истина;
			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			Запись.НематериальныйАктив = НовНМА;
			
			Запись.СпособОтраженияРасходов			=  Результат[0].СпособОтраженияРасходов;		
		КонецЕсли;
		
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета,
		               |	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации
		               |ИЗ
		               |	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
		               |			&Период,
		               |			Организация = &Организация
		               |				И НематериальныйАктив = &НематериальныйАктив) КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних";
					   
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() > 0 Тогда 
		
			Запись = Док.Движения.СчетаБухгалтерскогоУчетаНМА.Добавить();
			//Запись = Документы.КорректировкаЗаписейРегистров.НайтиПоНомеру().ПолучитьОбъект().Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
			Запись.Регистратор = Док.Ссылка;
			Запись.Активность  = Истина;
			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			Запись.НематериальныйАктив = НовНМА;
			
			Запись.СчетУчета					=  Результат[0].СчетУчета;		
			Запись.СчетНачисленияАмортизации	=  Результат[0].СчетНачисленияАмортизации;		
		КонецЕсли;
		
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СчетаНалоговогоУчетаНМАСрезПоследних.СчетУчета,
		               |	СчетаНалоговогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации
		               |ИЗ
		               |	РегистрСведений.СчетаНалоговогоУчетаНМА.СрезПоследних(
		               |			&Период,
		               |			Организация = &Организация
		               |				И НематериальныйАктив = &НематериальныйАктив) КАК СчетаНалоговогоУчетаНМАСрезПоследних";
					   
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() > 0 Тогда 
		
			Запись = Док.Движения.СчетаНалоговогоУчетаНМА.Добавить();
			//Запись = Документы.КорректировкаЗаписейРегистров.НайтиПоНомеру().ПолучитьОбъект().Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
			Запись.Регистратор = Док.Ссылка;
			Запись.Активность  = Истина;
			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			Запись.НематериальныйАктив = НовНМА;
			
			Запись.СчетУчета					=  Результат[0].СчетУчета;		
			Запись.СчетНачисленияАмортизации	=  Результат[0].СчетНачисленияАмортизации;		
		КонецЕсли;
		//- Романова Н.Г. 21.07.2017 #77141609
		
	//Затраты
//- Романова Н.Г. 19.07.2017 #77141609 
//		статьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Амортизация НМА", Истина);
//		Если Строка.АмортизацияЗаМесяцБУ > 0 Тогда
//			Запись = Док.Движения.Затраты.Добавить();
//			//НЗ = РегистрыНакопления.Затраты.СоздатьНаборЗаписей();
//			//Запись = НЗ.Добавить();
//			
//			Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
//			Запись.Регистратор = Док.Ссылка;
//			Запись.Активность  = Истина;
//			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
//			Запись.КодОперации = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
//			Запись.Подразделение = СсылкаНаДокумент.СсылкаНаОбъект.Подразделение;
//			Запись.СтатьяЗатрат = статьяЗатрат; 
//			Запись.СписаниеПартий = Истина;
//			Запись.Сумма       =  - Строка.АмортизацияЗаМесяцБУ;
//		КонецЕсли;
//	//ЗатратыБУ
//		Если Строка.АмортизацияЗаМесяцБУ > 0 Тогда
//			Запись = Док.Движения.ЗатратыБухгалтерскийУчет.Добавить();
//			//НЗ = РегистрыНакопления.ЗатратыБухгалтерскийУчет.СоздатьНаборЗаписей();
//			//Запись = НЗ.Добавить();
//			
//			Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
//			Запись.Регистратор = Док.Ссылка;
//			Запись.Активность  = Истина;
//			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
//			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
//			Запись.КодОперации = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
//			//Запись.Подразделение = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
//			Запись.СтатьяЗатрат = статьяЗатрат; 
//			Запись.СписаниеПартий = Истина;
//			Если СтрокаСчетаУчета = Неопределено Тогда
//				Запись.СчетУчета =  ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД;
//			Иначе
//				Запись.СчетУчета = СтрокаСчетаУчета.СчетЗатрат;
//			КонецЕсли;
//			
//			Запись.Сумма       =  - Строка.АмортизацияЗаМесяцБУ;
//		КонецЕсли;
//	//ЗатратыНУ
//		Если Строка.АмортизацияЗаМесяцНУ > 0 Тогда
//			Запись = Док.Движения.ЗатратыНалоговыйУчет.Добавить();
//			//НЗ = РегистрыНакопления.ЗатратыНалоговыйУчет.СоздатьНаборЗаписей();
//			//Запись = НЗ.Добавить();
//			
//			Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
//			Запись.Регистратор = Док.Ссылка;
//			Запись.Активность  = Истина;
//			Запись.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
//			Запись.Организация = СсылкаНаДокумент.СсылкаНаОбъект.Организацияприемник;
//			Запись.КодОперации = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
////			Запись.Подразделение = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
//			Запись.СтатьяЗатрат = статьяЗатрат; 
//			//Запись.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.
//			Запись.СписаниеПартий = Истина;
//			Если СтрокаСчетаУчета = Неопределено Тогда
//				Запись.СчетУчета =  ПланыСчетов.Налоговый.КоммерческиеРасходыНеОблагаемыеЕНВД;
//			Иначе
//				Запись.СчетУчета = СтрокаСчетаУчета.СчетЗатратНУ;
//			КонецЕсли;
//			Запись.Сумма       =  - Строка.АмортизацияЗаМесяцНУ;
//			Запись.ВременнаяРазница = - Строка.АмортизацияЗаМесяцВР; 
//			Запись.ПостояннаяРазница = - Строка.АмортизацияЗаМесяцПР;
//		КонецЕсли;
//- Романова Н.Г. 19.07.2017 #77141609 
	
	КонецЦикла;	
	
	Если Не Отказ Тогда
		Док.Записать(РежимЗаписиДокумента.Запись);
		
		Возврат Док.Ссылка;
	КонецЕсли;
	
КонецФункции 
 // СформироватьОприходованиеНМАСервер() }}KM WARE Лазаревский К.В. Заявка № 16.09.2015 окончание

 
 Функция СформироватьОприходованиеРасчетныеОперацииСервер(СсылкаНаДокумент,Отказ) Экспорт
		
		ИзменитьАктивность = Ложь;
		
		Если Не ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеПриемник) Тогда
			Док = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
			Док.Дата = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			
			НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
			НС.Имя = "Хозрасчетный";
			
// {{KM WARE Лазаревский К.В. Заявка № 08.09.2015 начало
// Если забаланс, то нет и регистров
	        Если СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации <> Перечисления.абс_ВидыОперацийАвизо.ПеремещениеИмуществаЗабаланс Тогда
// }}KM WARE Лазаревский К.В. Заявка № 08.09.2015 окончание			
				НС = Док.ТаблицаРегистровБухгалтерии.Добавить();
				НС.Имя = "Налоговый";
				
				НС = Док.ТаблицаРегистровНакопления.Добавить();
				НС.Имя = "ВзаиморасчетыСКонтрагентами";
				НС.Представление = НС.Имя; 
				
				НС = Док.ТаблицаРегистровНакопления.Добавить();
				НС.Имя = "РасчетыСКонтрагентами";
				НС.Представление = НС.Имя; 
				
				НС = Док.ТаблицаРегистровНакопления.Добавить();
				НС.Имя = "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов";
				НС.Представление = НС.Имя; 
				
				НС = Док.ТаблицаРегистровНакопления.Добавить();
				НС.Имя = "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации";
				НС.Представление = НС.Имя; 
				
				НС = Док.ТаблицаРегистровНакопления.Добавить();
				НС.Имя = "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации";
				НС.Представление = НС.Имя; 
				
				НС = Док.ТаблицаРегистровНакопления.Добавить();
				НС.Имя = "НДСНачисленный";
				НС.Представление = НС.Имя; 
				
				НС = Док.ТаблицаРегистровНакопления.Добавить();
				НС.Имя = "НДСсАвансов";
				НС.Представление = НС.Имя; 
				
				НС = Док.ТаблицаРегистровНакопления.Добавить();
				НС.Имя = "СтроительствоОбъектовОсновныхСредств";
				НС.Представление = НС.Имя; 
				
				НС = Док.ТаблицаРегистровНакопления.Добавить();
				НС.Имя = "НДСПредъявленный";
				НС.Представление = НС.Имя; 
				
				//Гущина 2016.08.31 +++
				НС = Док.ТаблицаРегистровНакопления.Добавить();
				НС.Имя = "ВзаиморасчетыСПодотчетнымиЛицами";
				НС.Представление = НС.Имя; 
				//Гущина 2016.08.31 ---
			КонецЕсли;			
		Иначе
			Док = СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеПриемник.ПолучитьОбъект();
			
			Если Док.ПометкаУдаления Тогда
				Док.УстановитьПометкуУдаления(Ложь);
				ИзменитьАктивностьПоРегистаторуСервер(Док,Отказ,Истина);
				//	Док.Записать();
			КонецЕсли;
			
			Док.Движения.Хозрасчетный.Очистить();
// {{KM WARE Лазаревский К.В. Заявка № 08.09.2015 начало
// Если забаланс, то нет и регистров
	        Если СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации <> Перечисления.абс_ВидыОперацийАвизо.ПеремещениеИмуществаЗабаланс Тогда
// }}KM WARE Лазаревский К.В. Заявка № 08.09.2015 окончание			
				Док.Движения.Налоговый.Очистить();
				
				Док.Движения.ВзаиморасчетыСКонтрагентами.Очистить();
				Док.Движения.РасчетыСКонтрагентами.Очистить();
				Док.Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Очистить();
				Док.Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Очистить();
				Док.Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Очистить();
				Док.Движения.НДСсАвансов.Очистить();
				Док.Движения.НДСНачисленный.Очистить();
				Док.Движения.НДСПредъявленный.Очистить();
				Док.Движения.СтроительствоОбъектовОсновныхСредств.Очистить();
				Док.Движения.ВзаиморасчетыСПодотчетнымиЛицами.Очистить();  //Гущина 2016.08.31 +++---
			КонецЕсли;
			Док.Дата =  СсылкаНаДокумент.СсылкаНаОбъект.Дата;	
			Док.Записать();
			
		КонецЕсли;
		
		ТзВыборкаДетальныеЗаписи = абс_БизнесПроцессыПривелегированный.ПолучитьТчРасчеты(СсылкаНаДокумент);
		Сч = 1;
		Для Каждого ВыборкаДетальныеЗаписи ИЗ ТзВыборкаДетальныеЗаписи Цикл
			НС = Док.Движения.Хозрасчетный.Добавить(); 
			ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
			НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			НС.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			НС.СчетДт =  ВыборкаДетальныеЗаписи.СчетКт;
			НС.СчетКт =  ВыборкаДетальныеЗаписи.СчетДт;
			
		// {{KM WARE Лазаревский К.В. Заявка № 08.09.2015 начало
		// для забаланса не проверяем и не дополняем
		// {{Старый код:
		//Если НС.СчетДт = СсылкаНаДокумент.СсылкаНаОбъект.КорСчет Тогда
		//	СчетДляПроверки = ВыборкаДетальныеЗаписи.СчетКт;
		//	НаборСубконтоДляРегистров = НС.СубконтоКт;
		//Иначе
		//	СчетДляПроверки = ВыборкаДетальныеЗаписи.СчетДт;
		//	НаборСубконтоДляРегистров = НС.СубконтоДт;
		//КонецЕсли;
		//Если НС.СчетКт.Валютный Тогда
		//	НС.ВалютаКт        =  ВыборкаДетальныеЗаписи.Валюта;
		//	НС.ВалютнаяСуммаКт =  ВыборкаДетальныеЗаписи.ВалютнаяСумма;
		//КонецЕсли;
		//
		//Если НС.СчетДт.Валютный Тогда	
		//	НС.ВалютаДт        =  ВыборкаДетальныеЗаписи.Валюта;
		//	НС.ВалютнаяСуммаДт =  ВыборкаДетальныеЗаписи.ВалютнаяСумма;
		//КонецЕсли;
		// }}Новый код:
		Если СсылкаНаДокумент.ссылкаНаОбъект.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.ПеремещениеИмуществаЗабаланс Тогда
			Если ЗначениеЗаполнено(НС.СчетКт) Тогда
				СчетДляПроверки = ВыборкаДетальныеЗаписи.СчетКт;
				НаборСубконтоДляРегистров = НС.СубконтоКт;
				// Гущина 23.09.16 T#7749293 +++
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Количество) Тогда
					НС.КоличествоКт =  ВыборкаДетальныеЗаписи.Количество;
				КонецЕсли;	
				// Гущина 23.09.16 T#7749293 ---
			Иначе
				СчетДляПроверки = ВыборкаДетальныеЗаписи.СчетДт;
				НаборСубконтоДляРегистров = НС.СубконтоДт;
				// Гущина 23.09.16 T#7749293 +++
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Количество) Тогда
					НС.КоличествоДт =  ВыборкаДетальныеЗаписи.Количество;
				КонецЕсли;	
				// Гущина 23.09.16 T#7749293 ---
			КонецЕсли;
			Если ЗначениеЗаполнено(НС.СчетКт) И НС.СчетКт.Валютный Тогда
				НС.ВалютаКт        =  ВыборкаДетальныеЗаписи.Валюта;
				НС.ВалютнаяСуммаКт =  ВыборкаДетальныеЗаписи.ВалютнаяСумма;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НС.СчетДт) И НС.СчетДт.Валютный Тогда	
				НС.ВалютаДт        =  ВыборкаДетальныеЗаписи.Валюта;
				НС.ВалютнаяСуммаДт =  ВыборкаДетальныеЗаписи.ВалютнаяСумма;
			КонецЕсли;
		Иначе
			Если НС.СчетДт = СсылкаНаДокумент.СсылкаНаОбъект.КорСчет Тогда
				СчетДляПроверки = ВыборкаДетальныеЗаписи.СчетКт;
				НаборСубконтоДляРегистров = НС.СубконтоКт;
			Иначе
				СчетДляПроверки = ВыборкаДетальныеЗаписи.СчетДт;
				НаборСубконтоДляРегистров = НС.СубконтоДт;
			КонецЕсли;
			Если НС.СчетКт.Валютный Тогда
				НС.ВалютаКт        =  ВыборкаДетальныеЗаписи.Валюта;
				НС.ВалютнаяСуммаКт =  ВыборкаДетальныеЗаписи.ВалютнаяСумма;
			КонецЕсли;
			
			Если НС.СчетДт.Валютный Тогда	
				НС.ВалютаДт        =  ВыборкаДетальныеЗаписи.Валюта;
				НС.ВалютнаяСуммаДт =  ВыборкаДетальныеЗаписи.ВалютнаяСумма;
			КонецЕсли;
		КонецЕсли;			
		// }}KM WARE Лазаревский К.В. Заявка № 08.09.2015 окончание 			
			
			а = 1; 
			Для каждого ВидСубконто Из НС.СчетКт.ВидыСубконто Цикл
				
				Если ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи.ДоговорКонтрагентаПриемник;
			   //Гущина T#7748604 2016.09.20 заменила строку. было:  ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения И НС.СчетКт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям И НС.СчетКт <> ПланыСчетов.Хозрасчетный.РасчетыПоВыделенномуИмуществу Тогда
			    ИначеЕсли (ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения или ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.абс_ОбособленныеПодразделения) И НС.СчетКт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям И НС.СчетКт <> ПланыСчетов.Хозрасчетный.РасчетыПоВыделенномуИмуществу Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи.ОбособленноеПодразделениеПриемник;
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи.КонтрагентПриемник;
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения И (НС.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям ИЛИ НС.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоВыделенномуИмуществу) Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = СсылкаНаДокумент.СсылкаНаОбъект.Организация;	
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПолучитьОбъектСтроительстваПоСоответствию(ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)],Отказ,СсылкаНаДокумент);	
					// {{KM WARE Лазаревский К.В. Заявка № 01.09.2015 начало
					// Миграция РБП
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьРБП(ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)], СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
					// Миграция НосенклатурныеГруппы / Строительство
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьНоменклатурыеГруппыСтроительство(ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)], СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
					// Миграция ОбъектыСтроительства
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьОбъектыСтроительство(ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)], СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник, СсылкаНаДокумент.СсылкаНаОбъект.Организация);
					// }}KM WARE Лазаревский К.В. Заявка № 01.09.2015 окончание				
					// {{KM WARE Лазаревский К.В. Заявка №34656 23.11.2015 начало
					// Миграция Складов
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьСклад(ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)],  СсылкаНаДокумент.СсылкаНаОбъект.Организация, СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
					// {{KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 начало
					// При виде субконто документ расчетов формируем новый
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные Тогда
					СтруктураПараметров = Новый Структура("Филиал,ДЗО",СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник,СсылкаНаДокумент.СсылкаНаОбъект.Организация); 	
			
					
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПолучитьДокументРасчетов(ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)], СтруктураПараметров, Отказ, ,ВыборкаДетальныеЗаписи.ДоговорКонтрагентаПриемник,0);	
					// }}KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 окончание	
				
				// }}KM WARE Лазаревский К.В. Заявка №34656 23.11.2015 окончание
				Иначе
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)];						
				КонецЕсли;
				
				а = а + 1;
			КонецЦикла;
			
			а = 1; 
			Для каждого ВидСубконто Из НС.СчетДт.ВидыСубконто Цикл
				
				Если ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи.ДоговорКонтрагентаПриемник;
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи.КонтрагентПриемник;
				  //Гущина T#7748604 2016.09.20 заменила строку. было: ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения И НС.СчетДт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям И НС.СчетДт <> ПланыСчетов.Хозрасчетный.РасчетыПоВыделенномуИмуществу Тогда
				ИначеЕсли (ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения или ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.абс_ОбособленныеПодразделения)  И НС.СчетДт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям И НС.СчетДт <> ПланыСчетов.Хозрасчетный.РасчетыПоВыделенномуИмуществу Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи.ОбособленноеПодразделениеПриемник;
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения И (НС.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям ИЛИ НС.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоВыделенномуИмуществу) Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПолучитьОбъектСтроительстваПоСоответствию(ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)],Отказ,СсылкаНаДокумент);	
					// {{KM WARE Лазаревский К.В. Заявка № 01.09.2015 начало
					// Миграция РБП
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьРБП(ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)], СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
					// Миграция НосенклатурныеГруппы / Строительство
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьНоменклатурыеГруппыСтроительство(ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)], СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
					// Миграция ОбъектыСтроительства
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьОбъектыСтроительство(ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)], СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник, СсылкаНаДокумент.СсылкаНаОбъект.Организация);
					// }}KM WARE Лазаревский К.В. Заявка № 01.09.2015 окончание				
					// {{KM WARE Лазаревский К.В. Заявка №34656 23.11.2015 начало
					// Миграция Складов
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьСклад(ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)],  СсылкаНаДокумент.СсылкаНаОбъект.Организация, СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
					// }}KM WARE Лазаревский К.В. Заявка №34656 23.11.2015 окончание
					
					// {{KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 начало
					// При виде субконто документ расчетов формируем новый
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные Тогда
					СтруктураПараметров = Новый Структура("Филиал,ДЗО",СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник,СсылкаНаДокумент.СсылкаНаОбъект.Организация); 	
			
					
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПолучитьДокументРасчетов(ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)], СтруктураПараметров, Отказ, ,ВыборкаДетальныеЗаписи.ДоговорКонтрагентаПриемник,0);	
					// }}KM WARE Малыгин П.К. Заявка № 30.11.2015 35423  окончание	
	
				Иначе	
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)];	
				КонецЕсли;
				
				а = а + 1;
			КонецЦикла;
			Сч = Сч + 1;
		КонецЦикла;
		
		ТзВыборкаДетальныеЗаписи = абс_БизнесПроцессыПривелегированный.ПолучитьТчРасчетыНУ(СсылкаНаДокумент);
		
		Для Каждого ВыборкаДетальныеЗаписи ИЗ ТзВыборкаДетальныеЗаписи Цикл
			НС = Док.Движения.Налоговый.Добавить(); 
			ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
			НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			НС.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
			НС.СчетДт =  ВыборкаДетальныеЗаписи.СчетКт;
			НС.СчетКт =  ВыборкаДетальныеЗаписи.СчетДт;
			
			а = 1; 
			Для каждого ВидСубконто Из НС.СчетКт.ВидыСубконто Цикл
				
				Если ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи.ДоговорКонтрагентаПриемник;
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи.КонтрагентПриемник;
				 //Гущина T#7748604 2016.09.20 заменила строку. было:ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения И НС.СчетКт <> ПланыСчетов.Налоговый.РасчетыПоТекущимОперациям И НС.СчетКт.Код <> "79.01" Тогда	
				ИначеЕсли (ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения или ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.абс_ОбособленныеПодразделения) И НС.СчетКт <> ПланыСчетов.Налоговый.РасчетыПоТекущимОперациям И НС.СчетКт.Код <> "79.01" Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи.ОбособленноеПодразделениеПриемник;
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения И (НС.СчетКт = ПланыСчетов.Налоговый.РасчетыПоТекущимОперациям ИЛИ НС.СчетКт.Код = "79.01")  Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = СсылкаНаДокумент.СсылкаНаОбъект.Организация;	
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПолучитьОбъектСтроительстваПоСоответствию(ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)],Отказ,СсылкаНаДокумент);	
				// {{KM WARE Малыгин П.К. Заявка № 35336 16.11.2015 начало
			  // Не прописан поиск занченйи субконто по НУ
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьРБП(ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)], СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
					// Миграция НосенклатурныеГруппы / Строительство
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьНоменклатурыеГруппыСтроительство(ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)], СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
					// Миграция ОбъектыСтроительства
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьОбъектыСтроительство(ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)], СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник, СсылкаНаДокумент.СсылкаНаОбъект.Организация);
					 // }}KM WARE Малыгин П.К. Заявка № 35336 16.11.2015 окончание		
				Иначе
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи["СубконтоДт" + Строка(а)];						
				КонецЕсли;
				
				а = а + 1;
			КонецЦикла;
			
			а = 1; 
			Для каждого ВидСубконто Из НС.СчетДт.ВидыСубконто Цикл
				
				Если ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи.ДоговорКонтрагентаПриемник;
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи.КонтрагентПриемник;
				//Гущина T#7748604 2016.09.20 заменила строку. было:ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения И НС.СчетДт <> ПланыСчетов.Налоговый.РасчетыПоТекущимОперациям И НС.СчетДт.Код <> "79.01" Тогда	
				ИначеЕсли (ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения или ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.абс_ОбособленныеПодразделения) И НС.СчетДт <> ПланыСчетов.Налоговый.РасчетыПоТекущимОперациям И НС.СчетДт.Код <> "79.01" Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи.ОбособленноеПодразделениеПриемник;
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения И (НС.СчетДт = ПланыСчетов.Налоговый.РасчетыПоТекущимОперациям ИЛИ НС.СчетДт.Код = "79.01") Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПолучитьОбъектСтроительстваПоСоответствию(ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)],Отказ,СсылкаНаДокумент);	
					
					// {{KM WARE Малыгин П.К. Заявка № 35336 16.11.2015 начало
		  			// Не прописан поиск занченйи субконто по НУ
                ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьРБП(ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)], СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
					// Миграция НосенклатурныеГруппы / Строительство
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьНоменклатурыеГруппыСтроительство(ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)], СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
					// Миграция ОбъектыСтроительства
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПолучитьСоздатьОбъектыСтроительство(ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)], СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник, СсылкаНаДокумент.СсылкаНаОбъект.Организация);
					 // }}KM WARE Малыгин П.К. Заявка № 35336 16.11.2015 окончание		
				Иначе	
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ВыборкаДетальныеЗаписи["СубконтоКт" + Строка(а)];	
				КонецЕсли;
				
				а = а + 1;
			КонецЦикла;
			
		КонецЦикла;
		
		Если СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.СтроительствоОбъековОС  Тогда
			ПеренестиРегистрыСтроительствоОбъектовОСПриход("СтроительствоОбъектовОсновныхСредств", ВидДвиженияНакопления.Приход,Док,Отказ,СсылкаНаДокумент);
		ИначеЕсли СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.РасчетныеОперации  Тогда
			ОприходоватьОстаткиПоРегистрамВзаиморасчетов("ВзаиморасчетыСКонтрагентами",Док,СсылкаНаДокумент); 
			ОприходоватьОстаткиПоРегистрамВзаиморасчетов("РасчетыСКонтрагентами",Док,СсылкаНаДокумент);
			ОприходоватьОстаткиПоРегистрамВзаиморасчетов("ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов",Док,СсылкаНаДокумент);
			ОприходоватьОстаткиПоРегистрамВзаиморасчетов("РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации",Док,СсылкаНаДокумент);
			ОприходоватьОстаткиПоРегистрамВзаиморасчетов("РасчетыПоРеализацииВУсловныхЕдиницахОрганизации",Док,СсылкаНаДокумент);
			ОприходоватьОстаткиПоНДСНачисленный("НДСНачисленный",Док,СсылкаНаДокумент); 
			ОприходоватьОстаткиПоНДСсАвансов("НДСсАвансов",Док,СсылкаНаДокумент);
// {{KM WARE Лазаревский К.В. Заявка № 30.09.2015 начало
// для НДСПредъявленный
			ОприходоватьОстаткиПоНДСПредъявленный("НДСПредъявленный",Док,СсылкаНаДокумент); 

// }}KM WARE Лазаревский К.В. Заявка № 30.09.2015 окончание	
			ПереформироватьДокументыРасчетовДля76АВ(СсылкаНаДокумент,Док); // КТТК Ермолов Е.Л.  19.06.2015 33367
			
			ОприходоватьОстаткиПоРегистрамВзаиморасчетов("ВзаиморасчетыСПодотчетнымиЛицами",Док,СсылкаНаДокумент);//Гущина 2016.08.31 +++ ---
		КонецЕсли;
		
		Если Не Отказ Тогда
			Док.Записать(РежимЗаписиДокумента.Запись);
			
			Возврат Док.Ссылка;
		КонецЕсли;
		
	КонецФункции 
	

	// Start КТТК Ермолов Е.Л.  19.06.2015 33367
	Процедура ПереформироватьДокументыРасчетовДля76АВ(СсылкаНаАвизо, ДокОбъект)
		Менедж = ДокОбъект.Движения.Хозрасчетный;
		СтруктураПараметров = Новый Структура("Филиал,ДЗО",СсылкаНаАвизо.СсылкаНаОбъект.ОрганизацияПриемник,СсылкаНаАвизо.СсылкаНаОбъект.Организация); 	
		Для Каждого Зап из Менедж Цикл
			Если Зап.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам Тогда 
				Исходный = Зап.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные];
				МетаданныеДокумента = Исходный.Метаданные();
				Выданные = абс_Филиализация.ПолучитьОбъектПоСоответствию(Исходный, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
				Если ЗначениеЗаполнено(Выданные) Тогда 
					Зап.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные] = Выданные;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	// Stop КТТК Ермолов Е.Л.  19.06.2015
	
	Функция ПолучитьТчРасчеты(СсылкаНаДокумент) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(абс_АВИЗОТабличнаяЧасть.Сумма) КАК Сумма,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоДт1,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоДт2,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоДт3,
		|	абс_АВИЗОТабличнаяЧасть.СчетДт КАК СчетДт,
		|	абс_АВИЗОТабличнаяЧасть.СчетКт КАК СчетКт,
		|	абс_АВИЗОТабличнаяЧасть.Валюта,
		|	СУММА(абс_АВИЗОТабличнаяЧасть.ВалютнаяСумма) КАК ВалютнаяСумма,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоКт1,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоКт2,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоКт3,
		|	абс_АВИЗОТабличнаяЧасть.ДоговорКонтрагентаПриемник,
		|	абс_АВИЗОТабличнаяЧасть.Содержание,
		|	абс_АВИЗОТабличнаяЧасть.ОбособленноеПодразделениеПриемник,
		|	абс_АВИЗОТабличнаяЧасть.КонтрагентПриемник,
		|	СУММА(абс_АВИЗОТабличнаяЧасть.Количество) КАК Количество,
		// {{KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 начало
		// Нужен еще один реквизит
		|	абс_АВИЗОТабличнаяЧасть.kwr_ДоговорКонтрагентаИсточник
		// }}KM WARE Малыгин П.К. Заявка № 35423  30.11.2015 окончание
		|ИЗ
		|	Документ.абс_АВИЗО.ТабличнаяЧасть КАК абс_АВИЗОТабличнаяЧасть
		|ГДЕ
		|	абс_АВИЗОТабличнаяЧасть.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	абс_АВИЗОТабличнаяЧасть.СубконтоДт1,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоДт2,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоДт3,
		|	абс_АВИЗОТабличнаяЧасть.СчетДт,
		|	абс_АВИЗОТабличнаяЧасть.СчетКт,
		|	абс_АВИЗОТабличнаяЧасть.Валюта,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоКт1,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоКт2,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоКт3,
		|	абс_АВИЗОТабличнаяЧасть.ДоговорКонтрагентаПриемник,
		|	абс_АВИЗОТабличнаяЧасть.Содержание,
		|	абс_АВИЗОТабличнаяЧасть.ОбособленноеПодразделениеПриемник,
		|	абс_АВИЗОТабличнаяЧасть.КонтрагентПриемник,
		|	абс_АВИЗОТабличнаяЧасть.kwr_ДоговорКонтрагентаИсточник";
		
		Запрос.УстановитьПараметр("Ссылка",СсылкаНаДокумент.СсылкаНаОбъект);
		
		Возврат Запрос.Выполнить().Выгрузить();
		
		//ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		// ВыборкаДетальныеЗаписи;
		
	КонецФункции
	
	Функция ПроверитьСчет(Счет) Экспорт
		
		Если Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) ИЛИ Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
			ИЛИ Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда	
			Возврат 1;
		ИначеЕсли Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов) Тогда
			Возврат 2;
		ИначеЕсли Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль) Тогда
			Возврат 3;
		ИначеЕсли Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) Тогда
			Возврат 4;
		ИначеЕсли Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
			Возврат 5;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	КонецФункции 
	
	Процедура ПеренестиРегистрыСтроительствоОбъектовОС(ИмяРегистра,ВидДвижения,ОбъектСтроительства,ДокДвижения,Отказ,СсылкаНаДокумент) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = абс_Филиализация.ТекстЗапросаРегистрНакопления(ИмяРегистра, Истина, "ОбъектСтроительства В (&ОбъектСтроительства)", );
		
		Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);
		Запрос.УстановитьПараметр("Период", Новый Граница(СсылкаНаДокумент.СсылкаНаОбъект.Дата,ВидГраницы.Исключая));
		
		Ошибки = Новый Структура;
		СтруктураПараметров = Новый Структура("Филиал,ДЗО",СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник,СсылкаНаДокумент.СсылкаНаОбъект.Организация); 	
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ВыборкаДетальныеЗаписи ИЗ Результат Цикл
			НС = ДокДвижения.Движения[ИмяРегистра].Добавить(); 
			ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
			НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			
			НС.ВидДвижения = ВидДвижения;
			
		КонецЦикла;			
	КонецПроцедуры
	
	Процедура ПеренестиРегистрыСтроительствоОбъектовОСПриход(ИмяРегистра,ВидДвижения,ДокДвижения,Отказ,СсылкаНаДокумент) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтроительствоОбъектовОсновныхСредствОбороты.ОбъектСтроительства,
		|	СтроительствоОбъектовОсновныхСредствОбороты.СуммаРасход КАК Сумма
		|ИЗ
		|	РегистрНакопления.СтроительствоОбъектовОсновныхСредств.Обороты(, , Регистратор, ) КАК СтроительствоОбъектовОсновныхСредствОбороты
		|ГДЕ
		|	СтроительствоОбъектовОсновныхСредствОбороты.Регистратор = &Регистратор";
		
		Запрос.УстановитьПараметр("Регистратор", СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НС = ДокДвижения.Движения[ИмяРегистра].Добавить(); 
			ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
			НС.Период      = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
			НС.ВидДвижения = ВидДвижения;
			//+++ T#77141323 Гущина 2017.07.17
			Если СсылкаНаДокумент.СсылкаНаОбъект.НеСоздаватьНовыеОбъектыСтроительства  тогда  
				НС.ОбъектСтроительства = НС.ОбъектСтроительства;	
			Иначе      // как было ранее
				НС.ОбъектСтроительства = ПолучитьОбъектСтроительстваПоСоответствию(НС.ОбъектСтроительства,Отказ,СсылкаНаДокумент);	
			КонецЕсли;	
			//--- T#77141323 Гущина 2017.07.17 далее как было
		КонецЦикла;	
		
	КонецПроцедуры
	
// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// {{KM WARE Лазаревский К.В. Заявка34969 № 28.10.2015 начало
Процедура ПеревестиДоговорВИсполнение(ДоговорСсылка)
	Если ДоговорСсылка.абс_СтатусДоговора <> Перечисления.абсСтатусыДоговоров.Исполнение Тогда
		Договоробъект = Договорссылка.получитьОбъект();
		Договоробъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение;
		Договоробъект.ОбменДанными.Загрузка = Истина;
		Договоробъект.Записать();
	КонецЕсли;	
КонецПроцедуры // ПеревестиДоговорВИсполнение() }}KM WARE Лазаревский К.В. Заявка34969 № 28.10.2015 окончание	
	
	Функция НайтиДоговорПоСоответствию(ДоговорИсточник,СсылкаНаДокумент) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
		|ИЗ
		|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
		|ГДЕ
		|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &Организация
		|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
		|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &ОбъектИсточник";
		
		Запрос.УстановитьПараметр("ОбъектИсточник", ДоговорИсточник);
		Запрос.УстановитьПараметр("Организация", СсылкаНаДокумент.Организация);
		Запрос.УстановитьПараметр("ОрганизацияПриемник", СсылкаНаДокумент.ОрганизацияПриемник);
		
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.ОбъектПриемник;
		Иначе
// {{KM WARE Лазаревский К.В. Заявка № 15.10.2015 начало
// для поиска созданных вручную договоров
			Если ЗначениеЗаполнено(ДоговорИсточник.ДоговорПослеМиграции) Тогда
				абс_Филиализация.ДобавитьСоответствие(ДоговорИсточник, ДоговорИсточник.ДоговорПослеМиграции, СсылкаНаДокумент.СсылкаНаОбъект.Организация, СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник,"СправочникСсылка.ДоговорыКонтрагентов");
				// {{KM WARE Лазаревский К.В. Заявка34969 № 28.10.2015 начало
				ПеревестиДоговорВИсполнение(ДоговорИсточник.ДоговорПослеМиграции);
                // }}KM WARE Лазаревский К.В. Заявка34969 № 28.10.2015 окончание
				Возврат ДоговорИсточник.ДоговорПослеМиграции;
			Иначе
				Запрос.Текст = 
							"ВЫБРАТЬ							
							// {{KM WARE Малыгин П.К. Заявка 34610 № 11.11.2015 начало
							// Не проставлен псевдоним поля, мешает заполнению договоров-приёмников для операций по расчетам
							// {{Старый код:
							//|	ДоговорыКонтрагентов.Ссылка
							// }}Новый код:
							|	ДоговорыКонтрагентов.Ссылка КАК ОбъектПриемник
							// }}KM WARE Малыгин П.К. Заявка 34610 № 11.11.2015 окончание 
							|ИЗ
							|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
							|ГДЕ
							|	ДоговорыКонтрагентов.Владелец = &Владелец
							|	И ДоговорыКонтрагентов.Организация = &ОрганизацияПриемник
							|	И ДоговорыКонтрагентов.Наименование = &Наименование";
				
				Запрос.УстановитьПараметр("Владелец", ДоговорИсточник.Владелец);
				Запрос.УстановитьПараметр("Наименование", ДоговорИсточник.Наименование);
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Количество() = 1 Тогда
					Результат.Следующий();
					// {{KM WARE Малыгин П.К. Заявка 35492 № 25.11.2015 начало
					абс_Филиализация.ДобавитьСоответствие(ДоговорИсточник, Результат.ОбъектПриемник, СсылкаНаДокумент.Организация, СсылкаНаДокумент.ОрганизацияПриемник,"СправочникСсылка.ДоговорыКонтрагентов");
					// }}KM WARE Малыгин П.К. Заявка 35492 № 25.11.2015 окончание 

					// {{KM WARE Лазаревский К.В. Заявка34969 № 28.10.2015 начало
					ПеревестиДоговорВИсполнение(Результат.ОбъектПриемник);
	                // }}KM WARE Лазаревский К.В. Заявка34969 № 28.10.2015 окончание
					Возврат Результат.ОбъектПриемник;
				КонецЕсли;	
			КонецЕсли;	
// }}KM WARE Лазаревский К.В. Заявка № 15.10.2015 окончание			
			//Ошибки = Новый Структура;
			//абс_Филиализация.СоздатьЭлементДоговорыКонтрагентов(ДоговорИсточник,СсылкаНаДокумент.СсылкаНаОбъект.Организация, СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник, Ошибки);
			//Возврат НайтиДоговорПоСоответствию(ДоговорИсточник,СсылкаНаДокумент);
			Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
	КонецФункции 
	
	Функция ПолучитьОбъектСтроительстваПоСоответствию(ОбъектСтроительстваИсточник,Отказ,СсылкаНаДокумент) Экспорт
	
	//+++ T#77141323 Гущина 2017.07.17
	Если СсылкаНаДокумент.СсылкаНаОбъект.НеСоздаватьНовыеОбъектыСтроительства  тогда  
		Возврат  ОбъектСтроительстваИсточник;	
	Иначе      //далее как было ранее
		//--- T#77141323 Гущина 2017.07.17 далее как было
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
		|ИЗ
		|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
		|ГДЕ
		|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &Организация
		|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
		|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &ОбъектИсточник";
		
		Запрос.УстановитьПараметр("ОбъектИсточник", ОбъектСтроительстваИсточник);
		Запрос.УстановитьПараметр("Организация", СсылкаНаДокумент.СсылкаНаОбъект.Организация);
		Запрос.УстановитьПараметр("ОрганизацияПриемник", СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
		
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.ОбъектПриемник;
		Иначе
			Ошибки = Новый Структура;
			Ошибки.Вставить("СписокОшибок", Новый Массив);
			Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
			
			ПереносСправочникаОбъектыСтроительства(СсылкаНаДокумент.СсылкаНаОбъект.Организация,СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник,Отказ,Ошибки,ОбъектСтроительстваИсточник);
			//	абс_Филиализация.СоздатьЭлементДоговорыКонтрагентов(ОбъектСтроительстваИсточник,СсылкаНаДокумент.СсылкаНаОбъект.Организация,СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник,Ошибки);
			Если Не Отказ Тогда
				Возврат ПолучитьОбъектСтроительстваПоСоответствию(ОбъектСтроительстваИсточник,Отказ,СсылкаНаДокумент);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; //+++---
		
	КонецФункции 
	
	Процедура ПереносСправочникаОбъектыСтроительства(Организация,ОрганизацияПриемник,Отказ,Ошибки,ОбъектСтроительстваИсточник) Экспорт 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	абс_НастройкиСистемы.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.абс_НастройкиСистемы КАК абс_НастройкиСистемы
		|ГДЕ
		|	абс_НастройкиСистемы.Настройка = &Настройка
		|	И абс_НастройкиСистемы.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.абс_НастройкиСистемы.ГруппаОбъектыСтроительства);
		Запрос.УстановитьПараметр("Организация", ОрганизацияПриемник);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда		
			Сообщить("Не задана группа Объекты строительства в настройках системы для организации филиал");
			Отказ = Истина;		
		Иначе
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				НастройкаГруппа = Выборка.Значение;
			КонецЦикла;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	абс_НастройкиСистемы.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.абс_НастройкиСистемы КАК абс_НастройкиСистемы
		|ГДЕ
		|	абс_НастройкиСистемы.Настройка = &Настройка
		|	И абс_НастройкиСистемы.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.абс_НастройкиСистемы.ГруппаОбъектыСтроительства);
		Запрос.УстановитьПараметр("Организация", Организация);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда		
			Сообщить("Не задана группа Объекты строительства в настройках системы для организации дзо");
			Отказ = Истина;				
		Иначе
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				НастройкаГруппаИсточник = Выборка.Значение;
			КонецЦикла;
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОбъектыСтроительства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
		|ГДЕ
		|	ОбъектыСтроительства.Ссылка = &ГруппаИсточник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбъектыСтроительства.Ссылка ИЕРАРХИЯ";
		
		Запрос.УстановитьПараметр("ГруппаИсточник", ОбъектСтроительстваИсточник);	
		
		Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Для каждого СтрокаДерева Из Результат.Строки Цикл
			Если СтрокаДерева.Ссылка = Справочники.ОбъектыСтроительства.ПустаяСсылка() Тогда 
				РазобратьДеревоОбъектыСтроительства(СтрокаДерева,НастройкаГруппа,Организация,ОрганизацияПриемник);
			Иначе
				СоздатьЭлементОбъектыСтроительства(СтрокаДерева,НастройкаГруппа,Организация,ОрганизацияПриемник);
				РазобратьДеревоОбъектыСтроительства(СтрокаДерева,НастройкаГруппа,Организация,ОрганизацияПриемник);	
			КонецЕсли;				
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура РазобратьДеревоОбъектыСтроительства(СтрокаДерева,НастройкаГруппа,Организация,ОрганизацияПриемник) Экспорт
		
		Для Каждого ПодСтрока Из СтрокаДерева.Строки Цикл 
			СоздатьЭлементОбъектыСтроительства(ПодСтрока,НастройкаГруппа,Организация,ОрганизацияПриемник);
			РазобратьДеревоОбъектыСтроительства(ПодСтрока,НастройкаГруппа,Организация,ОрганизацияПриемник);		
		КонецЦикла;	
		
	КонецПроцедуры	
	
	Процедура СоздатьЭлементОбъектыСтроительства(ПодСтрока,НастройкаГруппа,Организация,ОрганизацияПриемник) Экспорт
		
		СсылкаНаЭлемент = Справочники.ОбъектыСтроительства.ПустаяСсылка();
		
		Если ОтсутствуетЗаписьВРегистре(ПодСтрока.Ссылка,СсылкаНаЭлемент,Организация,ОрганизацияПриемник,"СправочникСсылка.ОбъектыСтроительства") Тогда
			Если ПодСтрока.Родитель = Неопределено Тогда 
				Если ПодСтрока.Ссылка.ЭтоГруппа Тогда
					Возврат;
				КонецЕсли;
				Родитель = НастройкаГруппа;
			Иначе
				Если ПодСтрока.Ссылка.ЭтоГруппа Тогда 
					Если ТакаяПапкаУжеСуществуетОбъектыСтроительства(ПодСтрока.Ссылка.Наименование,НастройкаГруппа) Тогда					
						Возврат;						
					КонецЕсли;
				КонецЕсли;
				Если (ТипЗнч(ПодСтрока.Родитель)=Тип("СтрокаДереваЗначений") И ПодСтрока.Родитель.Ссылка = Справочники.ОбъектыСтроительства.ПустаяСсылка())
					ИЛИ(ПодСтрока.Родитель.Родитель = Неопределено) Тогда
					Родитель = НастройкаГруппа;
				Иначе
					Родитель = ПодСтрока.Родитель.Ссылка;
				КонецЕсли;
			КонецЕсли;
			НовЭлемент = ПодСтрока.Ссылка.Скопировать();
			НовЭлемент.Родитель = Родитель;
			//НовЭлемент.УстановитьНовыйКод();
			НовЭлемент.Код = ПодСтрока.Ссылка.Код;
			НовЭлемент.ОбменДанными.Загрузка = Истина;
			НовЭлемент.Записать();
			Если НЕ ПодСтрока.Ссылка.ЭтоГруппа Тогда
				ДобавитьСоответствие(ПодСтрока.Ссылка, НовЭлемент.Ссылка,Организация,ОрганизацияПриемник,"СправочникСсылка.ОбъектыСтроительства");
			КонецЕсли;
			СсылкаНаЭлемент = НовЭлемент.Ссылка;
		КонецЕсли;	
		ПодСтрока.Ссылка = СсылкаНаЭлемент;
		
	КонецПроцедуры
	
	Функция ТакаяПапкаУжеСуществуетОбъектыСтроительства(ГруппаИсточникНаименование,ГруппаПриемник) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОбъектыСтроительства.Ссылка
		|ИЗ
		|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
		|ГДЕ
		|	ОбъектыСтроительства.Наименование = &ГруппаИсточникНаименование
		|	И ОбъектыСтроительства.Ссылка В ИЕРАРХИИ(&ГруппаПриемник)";
		
		Запрос.УстановитьПараметр("ГруппаИсточникНаименование", ГруппаИсточникНаименование);
		Запрос.УстановитьПараметр("ГруппаПриемник", ГруппаПриемник);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;	
		
	КонецФункции
	
	Процедура ДобавитьСоответствие(парИсточник,парПриемник,парОрганизацияИсточник,парОрганизацияПриемник,парТипПриемник) Экспорт
		
		МенеджерЗаписи = РегистрыСведений.абс_СоответствияОбъектовПереноса.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОрганизацияИсточник = парОрганизацияИсточник;
		МенеджерЗаписи.ОрганизацияПриемник = парОрганизацияПриемник;
		МенеджерЗаписи.ОбъектИсточник = парИсточник;
		МенеджерЗаписи.ТипПриемник = парТипПриемник;
		МенеджерЗаписи.ОбъектПриемник = парПриемник;
		МенеджерЗаписи.Записать();
		
	КонецПроцедуры
	
	Функция ОтсутствуетЗаписьВРегистре(парСсылка,парСсылкаНаЭлемент,парОрганизацияИсточник,парОрганизацияПриемник,парТипПриемник) Экспорт
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	абс_СоответствияОбъектовПереноса.ОбъектИсточник,
		|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
		|ИЗ
		|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
		|ГДЕ
		|	абс_СоответствияОбъектовПереноса.ТипПриемник = &ТипПриемник
		|	И абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &Источник
		|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &Приемник
		|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &Ссылка");
		Запрос.УстановитьПараметр("Источник", парОрганизацияИсточник);
		Запрос.УстановитьПараметр("Приемник", парОрганизацияПриемник);
		Запрос.УстановитьПараметр("Ссылка", парСсылка);
		Запрос.УстановитьПараметр("ТипПриемник", парТипПриемник);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда 
			Возврат Истина;
		Иначе
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				парСсылкаНаЭлемент = Выборка.ОбъектПриемник; 	
			КонецЦикла;
			Возврат Ложь
		КонецЕсли;	
		
		
	КонецФункции 
	
	Функция ПолучитьТчРасчетыНу(СсылкаНаДокумент)Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_АВИЗОТабличнаяЧасть.СчетДтНУ КАК СчетДт,
		|	абс_АВИЗОТабличнаяЧасть.СчетКтНУ КАК СчетКт,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоДтНУ1 КАК СубконтоДт1,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоДтНУ2 КАК СубконтоДт2,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоДтНУ3 КАК СубконтоДт3,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоКтНУ1 КАК СубконтоКт1,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоКтНУ2 КАК СубконтоКт2,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоКтНУ3 КАК СубконтоКт3,
		|	СУММА(абс_АВИЗОТабличнаяЧасть.СуммаНУ) КАК СуммаНУ,
		|	СУММА(абс_АВИЗОТабличнаяЧасть.СуммаПР) КАК СуммаПР,
		|	СУММА(абс_АВИЗОТабличнаяЧасть.СуммаВР) КАК СуммаВР,
		|	абс_АВИЗОТабличнаяЧасть.ДоговорКонтрагентаПриемник,
		|	абс_АВИЗОТабличнаяЧасть.ОбособленноеПодразделениеПриемник,
		|	абс_АВИЗОТабличнаяЧасть.КонтрагентПриемник,
		// {{KM WARE Малыгин П.К. Заявка № 34610 22.10.2015 начало
		// Нужен выбор количества
		|	СУММА(абс_АВИЗОТабличнаяЧасть.Количество) КАК Количество
		// }}KM WARE Малыгин П.К. Заявка № 34610 22.10.2015 окончание
		|ПОМЕСТИТЬ втТЧ
		|ИЗ
		|	Документ.абс_АВИЗО.ТабличнаяЧасть КАК абс_АВИЗОТабличнаяЧасть
		|ГДЕ
		|	абс_АВИЗОТабличнаяЧасть.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	абс_АВИЗОТабличнаяЧасть.СчетДтНУ,
		|	абс_АВИЗОТабличнаяЧасть.СчетКтНУ,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоДтНУ1,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоДтНУ2,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоДтНУ3,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоКтНУ1,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоКтНУ2,
		|	абс_АВИЗОТабличнаяЧасть.СубконтоКтНУ3,
		|	абс_АВИЗОТабличнаяЧасть.ДоговорКонтрагентаПриемник,
		|	абс_АВИЗОТабличнаяЧасть.ОбособленноеПодразделениеПриемник,
		|	абс_АВИЗОТабличнаяЧасть.КонтрагентПриемник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТЧ.СчетДт,
		|	втТЧ.СчетКт,
		|	втТЧ.СубконтоДт1,
		|	втТЧ.СубконтоДт2,
		|	втТЧ.СубконтоДт3,
		|	втТЧ.СубконтоКт1,
		|	втТЧ.СубконтоКт2,
		|	втТЧ.СубконтоКт3,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.НУ) КАК ВидУчетаДт,
		|	втТЧ.СуммаНУ КАК Сумма,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.НУ) КАК ВидУчетаКт,
		|	втТЧ.ДоговорКонтрагентаПриемник,
		|	втТЧ.ОбособленноеПодразделениеПриемник,
		|	втТЧ.КонтрагентПриемник,
		// {{KM WARE Малыгин П.К. Заявка № 34610 22.10.2015 начало
		// Нужно количество
		|	втТЧ.Количество                
    	// }}KM WARE Малыгин П.К. Заявка № 34610 22.10.2015 окончание
		|ПОМЕСТИТЬ втОбщая
		|ИЗ
		|	втТЧ КАК втТЧ
		|ГДЕ
		|	(НЕ втТЧ.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|			ИЛИ НЕ втТЧ.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втТЧ.СчетДт,
		|	втТЧ.СчетКт,
		|	втТЧ.СубконтоДт1,
		|	втТЧ.СубконтоДт2,
		|	втТЧ.СубконтоДт3,
		|	втТЧ.СубконтоКт1,
		|	втТЧ.СубконтоКт2,
		|	втТЧ.СубконтоКт3,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.ПР),
		|	втТЧ.СуммаПР,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.ПР),
		|	втТЧ.ДоговорКонтрагентаПриемник,
		|	втТЧ.ОбособленноеПодразделениеПриемник,
		|	втТЧ.КонтрагентПриемник,
		// {{KM WARE Малыгин П.К. Заявка № 34610 22.10.2015 начало
		// Нужно количество
		|	втТЧ.Количество
    	// }}KM WARE Малыгин П.К. Заявка № 34610 22.10.2015 окончание
 		|ИЗ
		|	втТЧ КАК втТЧ
		|ГДЕ
		|	(НЕ втТЧ.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|			ИЛИ НЕ втТЧ.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втТЧ.СчетДт,
		|	втТЧ.СчетКт,
		|	втТЧ.СубконтоДт1,
		|	втТЧ.СубконтоДт2,
		|	втТЧ.СубконтоДт3,
		|	втТЧ.СубконтоКт1,
		|	втТЧ.СубконтоКт2,
		|	втТЧ.СубконтоКт3,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.ВР),
		|	втТЧ.СуммаВР,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.ВР),
		|	втТЧ.ДоговорКонтрагентаПриемник,
		|	втТЧ.ОбособленноеПодразделениеПриемник,
		|	втТЧ.КонтрагентПриемник,
		// {{KM WARE Малыгин П.К. Заявка № 34610 22.10.2015 начало
		// Нужно количество
		|	втТЧ.Количество
    	// }}KM WARE Малыгин П.К. Заявка № 34610 22.10.2015 окончание
		|ИЗ
		|	втТЧ КАК втТЧ
		|ГДЕ
		|	(НЕ втТЧ.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|			ИЛИ НЕ втТЧ.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОбщая.СчетДт,
		|	втОбщая.СчетКт,
		|	втОбщая.СубконтоДт1,
		|	втОбщая.СубконтоДт2,
		|	втОбщая.СубконтоДт3,
		|	втОбщая.СубконтоКт1,
		|	втОбщая.СубконтоКт2,
		|	втОбщая.СубконтоКт3,
		|	втОбщая.ВидУчетаДт,
		|	втОбщая.Сумма,
		|	втОбщая.ВидУчетаКт,
		|	втОбщая.ДоговорКонтрагентаПриемник,
		|	втОбщая.ОбособленноеПодразделениеПриемник,
		|	втОбщая.КонтрагентПриемник,
		// {{KM WARE Малыгин П.К. Заявка № 34610 22.10.2015 начало
		// Нужно количество
		|	втОбщая.Количество
    	// }}KM WARE Малыгин П.К. Заявка № 34610 22.10.2015 окончание
		|ИЗ
		|	втОбщая КАК втОбщая
		|ГДЕ
		|	втОбщая.Сумма <> 0";
		
		Запрос.УстановитьПараметр("Ссылка",СсылкаНаДокумент.СсылкаНаОбъект);
		Возврат Запрос.Выполнить().Выгрузить();
		//ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
	КонецФункции 
	
	Функция СоздатьСписаниеОС(СсылкаНаДокумент) Экспорт
		
		ДокуметнОбъект = СсылкаНаДокумент.ДокументСписаниеОС.ПолучитьОбъект();
		ДокуметнОбъект.ОС.Очистить();
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	абс_ПередачаОСМеждуФиллиалами.ОрганизацияИсточник КАК Организация,
		|	абс_ПередачаОСМеждуФиллиалами.СчетБУ КАК СчетСписанияБУ,
		|	абс_ПередачаОСМеждуФиллиалами.СчетНУ КАК СчетСписанияНУ,
		|	абс_ПередачаОСМеждуФиллиалами.Ответственный,
		|	абс_ПередачаОСМеждуФиллиалами.ПричинаСписания,
		|	абс_ПередачаОСМеждуФиллиалами.Событие,
		|	абс_ПередачаОСМеждуФиллиалами.Событие КАК СобытиеРегл,
		|	ИСТИНА КАК ОтражатьВБухгалтерскомУчете,
		|	ИСТИНА КАК ОтражатьВНалоговомУчете,
		|	ИСТИНА КАК ОтражатьВУправленческомУчете,
		|	ЗНАЧЕНИЕ(Перечисление.абс_ВидыОперацийСписанияОС.ПеремещениеМеждуФилиалами) КАК ВидОперации,
		|	абс_ПередачаОСМеждуФиллиалами.ОрганизацияПриемник КАК СубконтоБУ,
		|	абс_ПередачаОСМеждуФиллиалами.ОрганизацияПриемник КАК СубконтоНУ,
		|	абс_ПередачаОСМеждуФиллиалами.Дата
		|ИЗ
		|	Документ.абс_ПередачаОСМеждуФиллиалами КАК абс_ПередачаОСМеждуФиллиалами
		|ГДЕ
		|	абс_ПередачаОСМеждуФиллиалами.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент.СсылкаНаОбъект);
		ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
		ВыборкаПоШапке.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДокуметнОбъект, ВыборкаПоШапке);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	абс_ПередачаОСМеждуФиллиаламиОС.НомерСтроки,
		|	абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство,
		|	абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредствоПриемник,
		|	абс_ПередачаОСМеждуФиллиаламиОС.Стоимость,
		|	абс_ПередачаОСМеждуФиллиаламиОС.Амортизация,
		|	абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияЗаМесяц,
		|	абс_ПередачаОСМеждуФиллиаламиОС.СписаноНаЗатраты,
		|	абс_ПередачаОСМеждуФиллиаламиОС.СтоимостьБУ,
		|	абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияБУ,
		|	абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияЗаМесяцБУ,
		|	абс_ПередачаОСМеждуФиллиаламиОС.СписаноНаЗатратыБУ,
		|	абс_ПередачаОСМеждуФиллиаламиОС.СтоимостьНУ,
		|	абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияНУ,
		|	абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияЗаМесяцНУ,
		|	абс_ПередачаОСМеждуФиллиаламиОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ
		|ИЗ
		|	Документ.абс_ПередачаОСМеждуФиллиалами.ОС КАК абс_ПередачаОСМеждуФиллиаламиОС
		|ГДЕ
		|	абс_ПередачаОСМеждуФиллиаламиОС.Ссылка = &Ссылка";
		
		ВыборкаПоТаблице = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПоТаблице.Следующий() Цикл 
			ЗаполнитьЗначенияСвойств(ДокуметнОбъект.ОС.Добавить(), ВыборкаПоТаблице);
		КонецЦикла;
		
		ДокуметнОбъект.ОбменДанными.Загрузка = Истина;
		ДокуметнОбъект.ПометкаУдаления = Ложь;
		ДокуметнОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		//Для каждого Стр Из ДокуметнОбъект.ОС Цикл
		//	ОС = Стр.ОсновноеСредство.ПолучитьОбъект();
		//	ОС.абс_СтатусОС = Перечисления.абс_СтатусыОС.Закрыт;
		//	ОС.Записать();
		//КонецЦикла;
		
		Возврат Новый Структура("ДокументСписаниеОС",ДокуметнОбъект.Ссылка)
		
	КонецФункции
	
	Процедура ПровестиДокументПоОС(СсылкаНаДокумент) Экспорт
		
		ДокуметнОбъект = СсылкаНаДокумент.СсылкаНаОбъект.ПолучитьОбъект();

		Попытка
			ДокуметнОбъект.Записать(РежимЗаписиДокумента.Проведение);	
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецПроцедуры
	
	Функция СоздатьВводНачальныхОстатков(СсылкаНаДокумент) Экспорт
		
		ДокуметнОбъект = СсылкаНаДокумент.ДокументВводОстатковОС.ПолучитьОбъект();
		ДокуметнОбъект.ОС.Очистить();
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	абс_ПередачаОСМеждуФиллиалами.Ответственный,
		|	ИСТИНА КАК ОтражатьВБухгалтерскомУчете,
		|	ИСТИНА КАК ОтражатьВНалоговомУчете,
		|	ИСТИНА КАК ОтражатьВУправленческомУчете,
		|	ЗНАЧЕНИЕ(Перечисление.абс_ВидыОперацийВводОстОС.ПоступлениеПоАвизо) КАК ВидОперации,
		|	абс_ПередачаОСМеждуФиллиалами.Дата,
		|	абс_ПередачаОСМеждуФиллиалами.ОрганизацияПриемник КАК Организация,
		|	абс_ПередачаОСМеждуФиллиалами.ОрганизацияПриемник КАК ОрганизацияИсточник,
		|	абс_АВИЗО.ПодразделениеОрганизации,
		|	абс_АВИЗО.Подразделение,
		|	абс_АВИЗО.абс_ОбособленноеПодразделение КАК абс_Обособленное
		|ИЗ
		|	Документ.абс_АВИЗО КАК абс_АВИЗО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.абс_ПередачаОСМеждуФиллиалами КАК абс_ПередачаОСМеждуФиллиалами
		|		ПО абс_АВИЗО.ДокументОснованиеИсточник = абс_ПередачаОСМеждуФиллиалами.Ссылка
		|ГДЕ
		|	абс_ПередачаОСМеждуФиллиалами.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент.СсылкаНаОбъект);
		ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
		ВыборкаПоШапке.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДокуметнОбъект, ВыборкаПоШапке);
		
		//|	ВЫБОР
		//|		КОГДА ЕСТЬNULL(ПервоначальнуеНУ.МетодНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.ПустаяСсылка)
		//|			ТОГДА УчетнаяПолитика.МетодНачисленияАмортизацииНУ
		//|		ИНАЧЕ ПервоначальнуеНУ.МетодНачисленияАмортизации
		//|	КОНЕЦ КАК МетодНачисленияАмортизацииНУ,
		
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	СобытияОС.Ссылка КАК Событие
		               |ПОМЕСТИТЬ втПринятиеУчету
		               |ИЗ
		               |	Справочник.СобытияОС КАК СобытияОС
		               |ГДЕ
		               |	СобытияОС.Наименование = &СобытиеПринятияКУчету
		               |	И СобытияОС.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ ПЕРВЫЕ 1
		               |	СобытияОС.Ссылка КАК Событие
		               |ПОМЕСТИТЬ втВводВЭксплуатацию
		               |ИЗ
		               |	Справочник.СобытияОС КАК СобытияОС
		               |ГДЕ
		               |	СобытияОС.Наименование = &СобытиеВводВЭксплуатацию
		               |	И СобытияОС.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ВводВЭксплуатацию)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	абс_ПередачаОСМеждуФиллиаламиОС.НомерСтроки,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредствоПриемник КАК ОсновноеСредствоПриемник,
		               |	СостоянияОС_Эксплутатация.ДатаСостояния КАК ДатаВводаВЭксплуатацию,
		               |	СостоянияОСОрганизаций__Эксплутатация.ДатаСостояния КАК ДатаВводаВЭксплуатациюРегл,
		               |	СостоянияОС_Принятие.ДатаСостояния КАК ДатаПринятияКУчету,
		               |	СостоянияОСОрганизаций_Принятие.ДатаСостояния КАК ДатаПринятияКУчетуРегл,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство КАК ОсновноеСредство,
		               |	втПринятиеУчету.Событие КАК СобытиеПринятияКУчету,
		               |	втПринятиеУчету.Событие КАК СобытиеПринятияКУчетуРегл,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.Стоимость КАК ПервоначальнаяСтоимость,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.СтоимостьБУ КАК ПервоначальнаяСтоимостьБУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.СтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
		               |	ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации) КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
		               |	СчетаБУ.СчетУчета КАК СчетУчетаБУ,
		               |	СчетаБУ.СчетНачисленияАмортизации КАК СчетАмортизацииБУ,
		               |	СчетаНУ.СчетУчета КАК СчетУчетаНУ,
		               |	СчетаНУ.СчетНачисленияАмортизации КАК СчетАмортизацииНУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.Амортизация + абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияЗаМесяц КАК НакопленнаяАмортизация,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияБУ + абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияЗаМесяцБУ КАК НакопленнаяАмортизацияБУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияНУ + абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияЗаМесяцНУ КАК СуммаНакопленнойАмортизацииНУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияНУ + абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияЗаМесяцНУ КАК НакопленнаяАмортизацияНУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.ТекущаяСтоимость,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.ТекущаяСтоимостьБУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.ТекущаяСтоимостьНУ,
		               |	ПараметрыАмортизация.СрокПолезногоИспользования,
		               |	ПараметрыАмортизация.КоэффициентАмортизации,
		               |	ПараметрыАмортизация.КоэффициентУскорения,
		               |	ПараметрыАмортизацияБУ.СрокПолезногоИспользования КАК СрокПолезногоИспользованияБУ,
		               |	ПараметрыАмортизацияБУ.КоэффициентАмортизации КАК КоэффициентАмортизацииБУ,
		               |	ПараметрыАмортизацияБУ.КоэффициентУскорения КАК КоэффициентУскоренияБУ,
		               |	ПараметрыАмортизацияНУ.СрокПолезногоИспользования КАК СрокПолезногоИспользованияНУ,
		               |	ПараметрыАмортизация.СтоимостьДляВычисленияАмортизации,
		               |	ПараметрыАмортизацияБУ.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизацииБУ,
		               |	ВЫБОР
		               |		КОГДА абс_АВИЗООсновныеСредства.МетодыНачисленияАмортизацииНУ = ИСТИНА
		               |			ТОГДА абс_АВИЗООсновныеСредства.МетодыНачисленияАмортизацииНУ
		               |		КОГДА ПервоначальнуеНУ.МетодНачисленияАмортизации ЕСТЬ NULL 
		               |			ТОГДА абс_АВИЗООсновныеСредства.МетодыНачисленияАмортизацииНУ
		               |		КОГДА ПервоначальнуеНУ.МетодНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.ПустаяСсылка)
		               |			ТОГДА абс_АВИЗООсновныеСредства.МетодыНачисленияАмортизацииНУ
		               |		ИНАЧЕ ПервоначальнуеНУ.МетодНачисленияАмортизации
		               |	КОНЕЦ КАК МетодНачисленияАмортизацииНУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.СпособОтражения КАК СпособОтраженияРасходовПоАмортизации,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.СпособОтражения КАК СпособОтраженияРасходовПоАмортизацииБУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.СпособОтражения КАК СпособОтраженияРасходовПоАмортизацииНУ,
		               |	ПервоначальныеСведенияОС.СпособНачисленияАмортизации,
		               |	ПервоначальныеБУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииБУ,
		               |	ПервоначальныеБУ.СпособПоступления КАК СпособПоступленияБУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.Ссылка.СчетБУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.Ссылка.СчетНУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.Ссылка.ОрганизацияИсточник КАК СубконтоБУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.Ссылка.ОрганизацияИсточник КАК СубконтоНУ,
		               |	ИСТИНА КАК НачислятьАмортизацию,
		               |	ИСТИНА КАК НачислятьАмортизациюБУ,
		               |	ИСТИНА КАК НачислятьАмортизациюНУ,
		               |	втВводВЭксплуатацию.Событие КАК СобытиеВводВЭксплуатацию,
		               |	втВводВЭксплуатацию.Событие КАК СобытиеВводВЭксплуатациюРегл,
		               |	абс_АВИЗООсновныеСредства.МОЛ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство.абс_КодДляПоиска КАК ИнвентарныйНомерРегл,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.НачислятьПоБазовойСтоимостиНУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.ФактическийСрокИспользованияНУ,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияПР + абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияЗаМесяцПР КАК НакопленнаяАмортизацияПР,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.СтоимостьВР КАК ТекущаяСтоимостьВР,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияВР + абс_ПередачаОСМеждуФиллиаламиОС.АмортизацияЗаМесяцВР КАК НакопленнаяАмортизацияВР,
		               |	абс_ПередачаОСМеждуФиллиаламиОС.СтоимостьПР КАК ТекущаяСтоимостьПР,
		               |	ПараметрыАмортизация.СрокИспользованияДляВычисленияАмортизации,
		               |	ПараметрыАмортизацияБУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизацииБУ
		               |ИЗ
		               |	Документ.абс_ПередачаОСМеждуФиллиалами.ОС КАК абс_ПередачаОСМеждуФиллиаламиОС
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС КАК СостоянияОС_Эксплутатация
		               |		ПО (СостоянияОС_Эксплутатация.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВведеноВЭксплуатацию))
		               |			И абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = СостоянияОС_Эксплутатация.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций__Эксплутатация
		               |		ПО (СостоянияОСОрганизаций__Эксплутатация.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВведеноВЭксплуатацию))
		               |			И абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = СостоянияОСОрганизаций__Эксплутатация.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС КАК СостоянияОС_Принятие
		               |		ПО абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = СостоянияОС_Принятие.ОсновноеСредство
		               |			И (СостоянияОС_Принятие.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету))
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций_Принятие
		               |		ПО абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = СостоянияОСОрганизаций_Принятие.ОсновноеСредство
		               |			И (СостоянияОСОрганизаций_Принятие.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету))
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних КАК СчетаБУ
		               |		ПО абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = СчетаБУ.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних КАК СчетаНУ
		               |		ПО абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = СчетаНУ.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних КАК ПараметрыАмортизация
		               |		ПО абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = ПараметрыАмортизация.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних КАК ПараметрыАмортизацияБУ
		               |		ПО абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = ПараметрыАмортизацияБУ.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних КАК ПараметрыАмортизацияНУ
		               |		ПО абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = ПараметрыАмортизацияНУ.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних КАК ПервоначальнуеНУ
		               |		ПО абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = ПервоначальнуеНУ.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних КАК ПервоначальныеСведенияОС
		               |		ПО абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних КАК ПервоначальныеБУ
		               |		ПО абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = ПервоначальныеБУ.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втПринятиеУчету КАК втПринятиеУчету
		               |		ПО (ИСТИНА)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втВводВЭксплуатацию КАК втВводВЭксплуатацию
		               |		ПО (ИСТИНА)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.абс_АВИЗО.ОсновныеСредства КАК абс_АВИЗООсновныеСредства
		               |		ПО абс_ПередачаОСМеждуФиллиаламиОС.Ссылка = абс_АВИЗООсновныеСредства.Ссылка.ДокументОснованиеИсточник
		               |			И абс_ПередачаОСМеждуФиллиаламиОС.ОсновноеСредство = абс_АВИЗООсновныеСредства.ОсновноеСредство,
		               |	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, Организация = &ОрганизацияПриемник) КАК УчетнаяПолитика
		               |ГДЕ
		               |	абс_ПередачаОСМеждуФиллиаламиОС.Ссылка = &Ссылка";
		
		
		
		
		Запрос.УстановитьПараметр("СобытиеПринятияКУчету", "Принятие к учету");
		Запрос.УстановитьПараметр("СобытиеВводВЭксплуатацию", "Ввод в эксплуатацию");
		Запрос.УстановитьПараметр("ОрганизацияПриемник", СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник);
		
		абс_Обособленное      = СсылкаНаДокумент.СсылкаНаОбъект.ПодразделениеОрганизации;
		ОрганизацияПолучатель = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		ВыборкаПоТаблице = Запрос.Выполнить().Выбрать();
		//МетодНачисленияАмортизацииНУ , ДатаПереходаКРасчетуПоБазовойСтоимостиНУ, ФактическийСрокИспользованияНУ
		Пока ВыборкаПоТаблице.Следующий() Цикл 
			НоваяСтрока = ДокуметнОбъект.ОС.Добавить();
			Сведения = УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОбОС(ВыборкаПоТаблице.ОсновноеСредство, ВыборкаПоШапке.Дата);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Сведения);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТаблице);
			Если ЗначениеЗаполнено(ВыборкаПоТаблице.ОсновноеСредствоПриемник) Тогда 
				НоваяСтрока.ОсновноеСредство = ВыборкаПоТаблице.ОсновноеСредствоПриемник;
			Иначе
				НоваяСтрока.ОсновноеСредство = ПолучитьОСПриемник(ВыборкаПоТаблице.ОсновноеСредство,,абс_Обособленное, ОрганизацияПолучатель);
				//Бобылев А.А. 10.05.2018 00-00000083
				ОС = НоваяСтрока.ОсновноеСредство.ПолучитьОбъект();
				ОС.абс_составОС.Очистить();
				Для каждого Элемент ИЗ ВыборкаПоТаблице.ОсновноеСредство.абс_СоставОС Цикл
					Стр = ОС.абс_СоставОС.Добавить();
					ЗаполнитьЗначенияСвойств(Стр,Элемент);
				КонецЦикла;	
				ОС.абс_СтатусОС = Перечисления.абс_СтатусыОС.Согласовано;
				Ос.ОбменДанными.Загрузка = Истина;
				ОС.Записать();
				//Бобылев А.А. -----------------------
			КонецЕсли;
			//	НоваяСтрока.ИнвентарныйНомерРегл = НоваяСтрока.ОсновноеСредство.Код;
			НоваяСтрока.МОЛРегл = ВыборкаПоТаблице.МОЛ;
			НоваяСтрока.МОЛ     = ВыборкаПоТаблице.МОЛ;
			
			Если НоваяСтрока.НакопленнаяАмортизацияНУ = 0  И  НоваяСтрока.ПервоначальнаяСтоимостьНУ = 0 И  НоваяСтрока.ТекущаяСтоимостьНУ = 0 И НоваяСтрока.НакопленнаяАмортизацияПР = 0 Тогда
				// КТТК Ермолов Е.Л.  18.03.2015 000032081 НоваяСтрока.НакопленнаяАмортизацияВР = 0  Тогда
				
				//+ Романова Н.Г. 20.09.2016 7745505 - изменение расчет ТекущаяСтоимостьПР и НакопленнаяАмортизацияПР
				НоваяСтрока.ТекущаяСтоимостьПР          =   НоваяСтрока.ТекущаяСтоимостьБУ - ВыборкаПоТаблице.ТекущаяСтоимостьВР;
				НоваяСтрока.НакопленнаяАмортизацияПР	=   НоваяСтрока.НакопленнаяАмортизацияБУ - ВыборкаПоТаблице.НакопленнаяАмортизацияВР;
				//-Романова Н.Г. 20.09.2016 7745505  
			КонецЕсли;
			
			Если НЕ НоваяСтрока.НачислятьПоБазовойСтоимостиНУ Тогда
				НоваяСтрока.СуммаНакопленнойАмортизацииНУ = 0;
			КонецЕсли;
									
		КонецЦикла;
		
		ДокуметнОбъект.ОбменДанными.Загрузка = Истина;
		ДокуметнОбъект.ПометкаУдаления = Ложь;
		ДокуметнОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		//Бобылев А.А. 10.05.2018 00-00000083 
		//Для каждого Стр Из ДокуметнОбъект.ОС Цикл
		//	ОС = Стр.ОсновноеСредство.ПолучитьОбъект();
		//	ОС.абс_СтатусОС = Перечисления.абс_СтатусыОС.Согласовано;
		//	Ос.ОбменДанными.Загрузка = Истина;
		//	ОС.Записать();
		//КонецЦикла;
		//Бобылев А.А.--------------
		
		
		//Попытка
		//	ДокуметнОбъект.Записать(РежимЗаписиДокумента.Проведение);	
		//Исключение
		//	
		//КонецПопытки;
		
		Возврат Новый Структура("ДокументВводОстатковОС",ДокуметнОбъект.Ссылка)
		
	КонецФункции
	
	Функция ПолучитьОСПриемник(ОСИсточник, ОСПриемник = Неопределено,ОбособленноеПодразделение, ОрганизацияПриемник = Неопределено) Экспорт
		
		Если ЗначениеЗаполнено(ОСПриемник) Тогда 
			Возврат ОСПриемник;
		КонецЕсли;
// {{KM WARE Лазаревский К.В. Заявка № 12.10.2015 начало
// для забалансовых (арендованных) ОС
		Если ТипЗнч(ОсИсточник) <> Тип("СправочникСсылка.ОсновныеСредства") Тогда
			Возврат ОСИсточник;
		КонецЕсли;
// }}KM WARE Лазаревский К.В. Заявка № 12.10.2015 окончание		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	т.Ссылка
		                      |ИЗ
		                      |	Справочник.ОсновныеСредства КАК т
		                      |ГДЕ
		                      |	т.абс_ОсновноеСредствоИсточник = &ОС
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	абс_СоответствияОбъектовПереноса.ОбъектПриемник
		                      |ИЗ
		                      |	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
		                      |ГДЕ
		                      |	абс_СоответствияОбъектовПереноса.ОбъектИсточник = &ОС
		                      |	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник");
		Запрос.УстановитьПараметр("ОрганизацияПриемник", ОрганизацияПриемник);
		Запрос.УстановитьПараметр("ОС", ОСИсточник);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда  
			ОСПриемникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			// {{KM WARE Малыгин П.К. Заявка № 09.12.2015 начало
			// Не перезаполняем!
			//ЗаполнитьЗначенияСвойств(ОСПриемникОбъект,ОСИсточник,,"Владелец,абс_ОсновноеСредствоИсточник,Код,Наименование");
			// }}KM WARE Малыгин П.К. Заявка № 09.12.2015 окончание

		Иначе	
			ОСПриемникОбъект = ОСИсточник.Скопировать(); 
			ОСПриемникОбъект.абс_ОсновноеСредствоИсточник  = ОСИсточник;
			// {{KM WARE Малыгин П.К. Заявка № 09.12.2015 начало
			// Заменяем коды только при создании новых объектов
			ОСПриемникОбъект.ОбменДанными.Загрузка = Истина;
			ОСПриемникОбъект.Записать();
			ОСПриемникОбъект.Код = ОСИсточник.Код;


			СтарыйОбъект = ОСИсточник.ПолучитьОбъект();
			
			
				СтарыйОбъект.Код          = "_" + Прав(СокрЛП(СтарыйОбъект.Код),СтрДлина(СокрЛП(СтарыйОбъект.Код)) - 1);
				СтарыйОбъект.Наименование = " " + СтарыйОбъект.Наименование;
							
			СтарыйОбъект.ОбменДанными.Загрузка = Истина;
			СтарыйОбъект.Записать();

			   			// }}KM WARE Малыгин П.К. Заявка № 09.12.2015 окончание
		КонецЕсли;
		
		ОСПриемникОбъект.абс_ОсновноеСредствоИсточник  = ОСИсточник;
		
		Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда 
			ОСПриемникОбъект.абс_ОбособленноеПодразделение = ОбособленноеПодразделение;
		КонецЕсли;
		ОСПриемникОбъект.абс_СтатусОС = Перечисления.абс_СтатусыОС.Согласовано;
		ОСПриемникОбъект.абс_КодДляПоиска          = "";
		ОСПриемникОбъект.абс_НаименованиеДляПоиска = "";
		
		
// {{KM WARE Лазаревский К.В. Заявка № 07.10.2015 начало
// стирается наименование
// {{Старый код:
		//ОСПриемникОбъект.Код          = ОСИсточник.абс_КодДляПоиска;
		//ОСПриемникОбъект.Наименование = ОСИсточник.абс_НаименованиеДляПоиска;
// }}Новый код:
//		ОСПриемникОбъект.Код          = "_" + прав(СокрЛП(ОСИсточник.Код), стрдлина(СокрЛП(ОСИсточник.Код)) - 1);
		ОСПриемникОбъект.Наименование = СокрЛП(ОСИсточник.Наименование);
// }}KM WARE Лазаревский К.В. Заявка № 07.10.2015 окончание 		
		//ОСПриемникОбъект.Код 						   = ОСИсточник.Код;
		ОСПриемникОбъект.ОбменДанными.Загрузка = Истина;
		ОСПриемникОбъект.Записать();
	// {{KM WARE Лазаревский К.В. Заявка № 09.10.2015 начало
	// маппинг по папкам справочника ОсновныеСредства
		УстановитьПапкуОсновногоСредства(ОСПриемникОбъект.Ссылка, ОСИсточник, ОрганизацияПриемник);
	// }}KM WARE Лазаревский К.В. Заявка № 09.10.2015 окончание		
	  	
		Возврат ОСПриемникОбъект.Ссылка; 
		
	КонецФункции
	
	Функция НайтиОСПриемник(ОСИсточник, ОСПриемник = Неопределено) Экспорт
		
		Если ЗначениеЗаполнено(ОСПриемник) Тогда 
			Возврат ОСПриемник;
		КонецЕсли;
		
		Запрос = Новый Запрос("Выбрать т.Ссылка из Справочник.ОсновныеСредства как т где т.абс_ОсновноеСредствоИсточник = &ОС");
		Запрос.УстановитьПараметр("ОС", ОСИсточник);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда  
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
		Возврат ОСПриемник; 
		
	КонецФункции
	
	Функция СоздатьПустыеДокументы(СсылкаНаДокумент, ОрганизацияИсточник, ОрганизацияПриемник, Дата) Экспорт
		
		СтруктураДокументов = Новый Структура("ДокументСписаниеОС,ДокументВводОстатковОС");
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект.ДокументСписаниеОС) Тогда 
			ДокуметнОбъект = Документы.СписаниеОС.СоздатьДокумент();
			ДокуметнОбъект.Дата = Дата;
			ДокуметнОбъект.Организация = ОрганизацияИсточник;
			ДокуметнОбъект.УстановитьНовыйНомер();
			ДокуметнОбъект.ОбменДанными.Загрузка = Истина;
			ДокуметнОбъект.Записать();
			СтруктураДокументов.ДокументСписаниеОС = ДокуметнОбъект.Ссылка;	
		Иначе
			СтруктураДокументов.ДокументСписаниеОС = СсылкаНаДокумент.СсылкаНаОбъект.ДокументСписаниеОС;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект.ДокументВводОстатковОС) Тогда 
			ДокуметнОбъект = Документы.ВводНачальныхОстатковОС.СоздатьДокумент();
			ДокуметнОбъект.Дата = Дата;
			ДокуметнОбъект.Организация = ОрганизацияПриемник;
			ДокуметнОбъект.УстановитьНовыйНомер();
			ДокуметнОбъект.ОбменДанными.Загрузка = Истина;
			ДокуметнОбъект.Записать();
			СтруктураДокументов.ДокументВводОстатковОС = ДокуметнОбъект.Ссылка;
		Иначе
			СтруктураДокументов.ДокументВводОстатковОС = СсылкаНаДокумент.СсылкаНаОбъект.ДокументВводОстатковОС;
		КонецЕсли;
		
		Возврат  СтруктураДокументов;
		
	КонецФункции
	
	Процедура ПометитьНаУдалениеДокументыВводаОстатков(СсылкаНаДокумент) Экспорт
		
		Если ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект.ДокументСписаниеОС) Тогда
			ДокументСписаниеОСОб     = СсылкаНаДокумент.СсылкаНаОбъект.ДокументСписаниеОС.ПолучитьОбъект();	
			ДокументСписаниеОСОб.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект.ДокументВводОстатковОС) Тогда
			ДокументВводОстатковОСОб = СсылкаНаДокумент.СсылкаНаОбъект.ДокументВводОстатковОС.ПолучитьОбъект();	
			ДокументВводОстатковОСОб.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура АвизоВОтказ(СсылкаНаДокумент,Отказ) Экспорт
		
		// {{KM WARE Малыгин П.К. Заявка № 34610 10.11.2015 начало
		// При передаче товаров должна отрабатываться схема при как передаче материалов
		// {{Старый код:
		// Если  СсылкаНаДокумент.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.ПередачаМатериалыВНО
		// }}Новый код:
		Если  СсылкаНаДокумент.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.ПередачаМатериалыВНО ИЛИ СсылкаНаДокумент.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.ПередачаТоваров Тогда
		// }}KM WARE Малыгин П.К. Заявка № 34610 10.11.2015 окончание 	
			Если ЗначениеЗаполнено(СсылкаНаДокумент.ДокументОснованиеИсточник) Тогда
				ДокументОснованиеИсточникОб = СсылкаНаДокумент.ДокументОснованиеИсточник.ПолучитьОбъект();	
				ДокументОснованиеИсточникОб.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ;
				ДокументОснованиеИсточникОб.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СсылкаНаДокумент.ДокументОснованиеПриемник) Тогда
				ДокументОснованиеПриемникОб = СсылкаНаДокумент.ДокументОснованиеПриемник.ПолучитьОбъект();	
				ДокументОснованиеПриемникОб.абс_СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Отказ;
				ДокументОснованиеПриемникОб.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
		ИначеЕсли  СсылкаНаДокумент.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.ПередачаМатериалы10_07 Тогда
			
			Если ЗначениеЗаполнено(СсылкаНаДокумент.ДокументОснованиеИсточник) Тогда
				ДокументОснованиеИсточникОб = СсылкаНаДокумент.ДокументОснованиеИсточник.ПолучитьОбъект();	
				ДокументОснованиеИсточникОб.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ;
				ДокументОснованиеИсточникОб.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СсылкаНаДокумент.ДокументОснованиеПриемникДоп) Тогда
				ДокументОснованиеПриемникОб = СсылкаНаДокумент.ДокументОснованиеПриемникДоп.ПолучитьОбъект();	
				ДокументОснованиеПриемникОб.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ;
				ДокументОснованиеПриемникОб.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СсылкаНаДокумент.ДокументОснованиеИсточникДоп) Тогда
				ДокументОснованиеИсточникОб = СсылкаНаДокумент.ДокументОснованиеИсточникДоп.ПолучитьОбъект();	
				ДокументОснованиеИсточникОб.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ;
				ДокументОснованиеИсточникОб.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СсылкаНаДокумент.ДокументОснованиеПриемник) Тогда
				ДокументОснованиеПриемникОб = СсылкаНаДокумент.ДокументОснованиеПриемник.ПолучитьОбъект();	
				ДокументОснованиеПриемникОб.абс_СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Отказ;
				ДокументОснованиеПриемникОб.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
			
		ИначеЕсли СсылкаНаДокумент.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.ПередачаОС Тогда
			Если ЗначениеЗаполнено(СсылкаНаДокумент.ДокументОснованиеИсточник) Тогда
				ДокументОснованиеИсточникОб = СсылкаНаДокумент.ДокументОснованиеИсточник.ПолучитьОбъект();	
				ДокументОснованиеИсточникОб.Статус = Перечисления.абс_СтатусыПередачаОСМеждуФиллиалами.Отказ;
				//	ДокументОснованиеИсточникОб.ОбменДанными.Загрузка = Истина;
				ДокументОснованиеИсточникОб.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СсылкаНаДокумент.ДокументОснованиеИсточник) Тогда
				ДокументОснованиеИсточникОб = СсылкаНаДокумент.ДокументОснованиеИсточник.ПолучитьОбъект();
				ДокументОснованиеИсточникОб.ОбменДанными.Загрузка = Истина;
				ИзменитьАктивностьПоРегистаторуСервер(ДокументОснованиеИсточникОб,Отказ,Ложь);
				ДокументОснованиеИсточникОб.ОбменДанными.Загрузка = Ложь;
				ДокументОснованиеИсточникОб.УстановитьПометкуУдаления(Истина);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СсылкаНаДокумент.ДокументОснованиеПриемник) Тогда
				ДокументОснованиеПриемникОб = СсылкаНаДокумент.ДокументОснованиеПриемник.ПолучитьОбъект();	
				ДокументОснованиеПриемникОб.ОбменДанными.Загрузка = Истина;
				ИзменитьАктивностьПоРегистаторуСервер(ДокументОснованиеПриемникОб,Отказ,Ложь);
				ДокументОснованиеПриемникОб.ОбменДанными.Загрузка = Ложь;
				ДокументОснованиеПриемникОб.УстановитьПометкуУдаления(Истина);
			КонецЕсли;	
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ДокументыПередачиОСВОтказ(СсылкаНаДокумент) Экспорт
		
		Отказ = Ложь;
		
		Если ЗначениеЗаполнено(СсылкаНаДокумент.ДокументСписаниеОС) Тогда
			
			ДокументОснованиеИсточникОб = СсылкаНаДокумент.ДокументСписаниеОС.ПолучитьОбъект();	
			
// {{KM WARE Лазаревский К.В. Заявка № 24.12.2015 начало
// При откате АВИЗО в отказ восстанавливаем статус ОС в Согласован
			ТабОС = ДокументОснованиеИсточникОб.ОС;
			Для Каждого СтрокаОС Из ТабОС Цикл
				Если СтрокаОС.ОсновноеСредство.абс_СтатусОС = Перечисления.абс_СтатусыОС.Закрыт Тогда
					ОбОС = СтрокаОС.ОсновноеСредство.ПолучитьОбъект();
					ОбОС.абс_СтатусОС = Перечисления.абс_СтатусыОС.Согласовано;
					ОбОС.ОбменДанными.Загрузка = Истина;
					ОбОС.Записать();
				КонецЕсли;	
			КонецЦикла;	
// }}KM WARE Лазаревский К.В. Заявка № 24.12.2015 окончание 		
			
			//	ДокументОснованиеИсточникОб.ОбменДанными.Загрузка = Истина;
			ДокументОснованиеИсточникОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СсылкаНаДокумент.ДокументВводОстатковОС) Тогда
			
			ДокументОснованиеПриемникОб = СсылкаНаДокумент.ДокументВводОстатковОС.ПолучитьОбъект();	
			//ДокументОснованиеПриемникОб.ОбменДанными.Загрузка = Истина;
			ДокументОснованиеПриемникОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
			Для каждого Стр Из ДокументОснованиеПриемникОб.ОС Цикл
				ОС = Стр.ОсновноеСредство.ПолучитьОбъект();
				// {{KM WARE Малыгин П.К. Заявка № 08.12.2015 начало
				// Этот код работает безконтрольно от пользователя. Требуется вынести его в отдельную запускаемуб функцию в документе.
				
				//ОС.абс_КодДляПоиска          = ОС.Код;	
				//ОС.абс_НаименованиеДляПоиска = ОС.Наименование;
				//
				//ОС.Код          = "_" + Прав(СокрЛП(ОС.абс_КодДляПоиска),СтрДлина(СокрЛП(ОС.абс_КодДляПоиска)) - 1);
				////	мОС.Наименование = "_" + Прав(СокрЛП(мОС.абс_НаименованиеДляПоиска),СтрДлина(СокрЛП(мОС.абс_НаименованиеДляПоиска)) - 1);
				//ОС.Наименование = " " + ОС.абс_НаименованиеДляПоиска;
				//
				

				
				// }}KM WARE Малыгин П.К. Заявка № 08.12.2015 окончание 
				ОС.абс_СтатусОС = Перечисления.абс_СтатусыОС.Закрыт;
				// {{KM WARE Малыгин П.К. Заявка № 09.12.2015 начало
				// ПРи отказе не требуется проверка на корректность
				ОС.ОбменДанными.Загрузка = Истина;
				// }}KM WARE Малыгин П.К. Заявка № 09.12.2015 окончание		
				ОС.Записать();
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецПроцедуры
	
	
	Процедура ИзменитьАктивностьПоРегистаторуСервер(ДокументОбъект, Отказ,ВключитьАктивность = Истина)
		
		Для Каждого Набор ИЗ ДокументОбъект.Движения Цикл
			
			Набор.Прочитать();
			
			Если Набор.Количество() = 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			Набор.УстановитьАктивность(ВключитьАктивность);
			
			Попытка
				Набор.Записать();
			Исключение
				// возможно «сработал» RLS или механизм даты запрета изменения
				ОписаниеОшибки = ИнформацияОбОшибке();
				ttk_ОбщегоНазначения.СообщитьОбОшибке(КраткоеПредставлениеОшибки(ОписаниеОшибки), Отказ, Строка(Набор));
				ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена'"), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
				
				ВызватьИсключение НСтр("ru='Операция не выполнена'");
			КонецПопытки;	
			
		КонецЦикла;	
		
	КонецПроцедуры
	
	Функция ПолучитьТаблицуАвизо(СсылкаНаДокумент) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА абс_АВИЗОТабличнаяЧасть.СчетДт <> абс_АВИЗОТабличнаяЧасть.Ссылка.КорСчет
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(абс_АВИЗОТабличнаяЧасть.СубконтоДт1)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(абс_АВИЗОТабличнаяЧасть.СубконтоКт1)
		|	КОНЕЦ КАК Субконто1,
		|	ВЫБОР
		|		КОГДА абс_АВИЗОТабличнаяЧасть.СчетДт <> абс_АВИЗОТабличнаяЧасть.Ссылка.КорСчет
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(абс_АВИЗОТабличнаяЧасть.СубконтоДт2)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(абс_АВИЗОТабличнаяЧасть.СубконтоКт2)
		|	КОНЕЦ КАК Субконто2,
		|	ВЫБОР
		|		КОГДА абс_АВИЗОТабличнаяЧасть.СчетДт <> абс_АВИЗОТабличнаяЧасть.Ссылка.КорСчет
		|			ТОГДА абс_АВИЗОТабличнаяЧасть.СубконтоДт3
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(абс_АВИЗОТабличнаяЧасть.СубконтоКт3)
		|	КОНЕЦ КАК Субконто3,
		|	абс_АВИЗОТабличнаяЧасть.Валюта,
		|	абс_АВИЗОТабличнаяЧасть.ВалютнаяСумма,
		|	абс_АВИЗОТабличнаяЧасть.Сумма КАК СуммаРуб,
		|	абс_АВИЗОТабличнаяЧасть.СуммаНУ,
		|	абс_АВИЗОТабличнаяЧасть.СуммаПР,
		|	абс_АВИЗОТабличнаяЧасть.СуммаВР,
		|	ВЫБОР
		|		КОГДА абс_АВИЗОТабличнаяЧасть.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоВыделенномуИмуществу)
		|				И абс_АВИЗОТабличнаяЧасть.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоТекущимОперациям)
		|			ТОГДА абс_АВИЗОТабличнаяЧасть.СчетДт
		|		ИНАЧЕ абс_АВИЗОТабличнаяЧасть.СчетКт
		|	КОНЕЦ КАК Счет
		|ИЗ
		|	Документ.абс_АВИЗО.ТабличнаяЧасть КАК абс_АВИЗОТабличнаяЧасть
		|ГДЕ
		|	абс_АВИЗОТабличнаяЧасть.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",СсылкаНаДокумент.СсылкаНаОбъект);
		Возврат Запрос.Выполнить().Выгрузить(); 
		
	КонецФункции  
	
	Функция ПолучитьТаблицуПоДокументу(МассивСчетовДляПечати,СсылкаНаДокумент) Экспорт
		
		Запрос = Новый Запрос;           
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура.Наименование КАК ТоварНаименование,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура.Код КАК ТоварКод,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура.ЕдиницаХраненияОстатков.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоРасход КАК Количество,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьРасход КАК СуммаСНДС,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета КАК КорСчет,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьРасход / ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоРасход КАК Цена,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьРасход КАК СуммаБезНДС,
		|	0 КАК СуммаНДС,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьРасход КАК Сумма,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоРасход КАК КоличествоМест,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СерияНоменклатуры КАК Серия,
		|	&КорСчетКод КАК КорСчетКод
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Обороты(, , Регистратор, СчетУчета В ИЕРАРХИИ (&МассивСчетовДляПечати)) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОбороты
		|ГДЕ
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Регистратор = &Регистратор";
		
		Запрос.УстановитьПараметр("КорСчетКод",ПланыСчетов.Хозрасчетный.РасчетыПоВыделенномуИмуществу);
		Запрос.УстановитьПараметр("МассивСчетовДляПечати",МассивСчетовДляПечати);
		Запрос.УстановитьПараметр("Регистратор",СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник);
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецФункции 
	
Функция ПолучитьПараметрыСписаниеОС(СсылкаНаДокумент)   Экспорт
		ПараметрыСписаниеОС	= Новый Структура("ВидимостьПоля,ЗалоговокПоля,ДокументПроведен");
		
		Если ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник.ДокументСписаниеОС) Тогда
			ПараметрыСписаниеОС.ВидимостьПоля = Истина;
			ПараметрыСписаниеОС.ЗалоговокПоля = Строка(СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник.ДокументСписаниеОС);
			
			Если СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник.ДокументСписаниеОС.Проведен Тогда
				ПараметрыСписаниеОС.ДокументПроведен = Истина;
			Иначе
				ПараметрыСписаниеОС.ДокументПроведен = Ложь;
			КонецЕсли;
			
		Иначе	
			ПараметрыСписаниеОС.ВидимостьПоля   = Ложь;
			ПараметрыСписаниеОС.ЗалоговокПоля    = "";
			ПараметрыСписаниеОС.ДокументПроведен = Ложь;
		КонецЕсли;
		
		Возврат ПараметрыСписаниеОС;
		
	КонецФункции 
	
Функция ПолучитьПараметрыДокументВводОстатковОС(СсылкаНаДокумент)  Экспорт
		ПараметрыДокументВводОстатковОС	= Новый Структура("ВидимостьПоля,ЗалоговокПоля,ДокументПроведен");
		
		Если ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник.ДокументВводОстатковОС) Тогда
			
			Если  СсылкаНаДокумент.СсылкаНаОбъект.Статус = Перечисления.абс_СтатусыАвизо.ОбработкаКЦ ИЛИ СсылкаНаДокумент.СсылкаНаОбъект.Статус = Перечисления.абс_СтатусыАвизо.ОбработкаФилиалом ИЛИ СсылкаНаДокумент.СсылкаНаОбъект.Статус = Перечисления.абс_СтатусыАвизо.Исполнено Тогда		
				ПараметрыДокументВводОстатковОС.ВидимостьПоля = Истина;
			Иначе
				ПараметрыДокументВводОстатковОС.ВидимостьПоля = Ложь;
			КонецЕсли;
			
			ПараметрыДокументВводОстатковОС.ЗалоговокПоля = Строка(СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник.ДокументВводОстатковОС);
			
			Если СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник.ДокументВводОстатковОС.Проведен Тогда
				ПараметрыДокументВводОстатковОС.ДокументПроведен =  Истина;
			Иначе
				ПараметрыДокументВводОстатковОС.ДокументПроведен =  Ложь;
			КонецЕсли;
			
		Иначе	
			
			Если  СсылкаНаДокумент.СсылкаНаОбъект.Статус = Перечисления.абс_СтатусыАвизо.ОбработкаКЦ ИЛИ СсылкаНаДокумент.СсылкаНаОбъект.Статус = Перечисления.абс_СтатусыАвизо.ОбработкаФилиалом ИЛИ СсылкаНаДокумент.СсылкаНаОбъект.Статус = Перечисления.абс_СтатусыАвизо.Исполнено Тогда		
				ПараметрыДокументВводОстатковОС.ВидимостьПоля = Истина;
			Иначе
				ПараметрыДокументВводОстатковОС.ВидимостьПоля = Ложь;
			КонецЕсли;
			
			ПараметрыДокументВводОстатковОС.ЗалоговокПоля = "Нажмите для ввода остатков по ОС";
			ПараметрыДокументВводОстатковОС.ДокументПроведен = Ложь;
		КонецЕсли;
		
		Возврат ПараметрыДокументВводОстатковОС;
		
	КонецФункции
	
Функция ПолучитьЗаголовокДокументаНаСервере(СсылкаНаДокумент) Экспорт
		Стр = Новый Структура("ЗаголовокДокумента,ДокументПроведен");
		
		Стр.ЗаголовокДокумента =  Строка(СсылкаНаДокумент.СсылкаНаОбъект);
		
		Если ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект) Тогда
			Если СсылкаНаДокумент.СсылкаНаОбъект.Проведен Тогда
				Стр.ДокументПроведен = Истина;
			Иначе	
				Стр.ДокументПроведен = Ложь;
			КонецЕсли;
		Иначе	
			Стр.ДокументПроведен = Ложь;
		КонецЕсли;
		
		Возврат Стр;
		
	КонецФункции 
	
Функция ПолучитьАвизо(СсылкаНаДокумент) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_АВИЗО.Ссылка,
		|	абс_АВИЗО.Статус
		|ИЗ
		|	Документ.абс_АВИЗО КАК абс_АВИЗО
		|ГДЕ
		|	(абс_АВИЗО.ДокументОснованиеИсточник = &Ссылка
		|			ИЛИ абс_АВИЗО.ДокументОснованиеПриемник = &Ссылка
		|			ИЛИ абс_АВИЗО.ДокументОснованиеПриемникДоп = &Ссылка
		|			ИЛИ абс_АВИЗО.ДокументОснованиеИсточникДоп = &Ссылка)";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент.СсылкаНаОбъект);
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат Новый Структура("Ссылка,Статус",ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.Статус);	
		Иначе	
			Возврат Неопределено;	
		КонецЕсли;
		
	КонецФункции
	
Функция ПроводкиСформированы(СсылкаНаДокумент) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, , , , , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент.СсылкаНаОбъект);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат	Истина;
		Иначе
			Возврат	Ложь;
		КонецЕсли;
		
	КонецФункции 
	
Функция ЕстьПередачаОС(ДокументПередачи)  Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_АВИЗО.Ссылка,
		|	абс_АВИЗО.Статус
		|ИЗ
		|	Документ.абс_АВИЗО КАК абс_АВИЗО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.абс_ПередачаОСМеждуФиллиалами КАК абс_ПередачаОСМеждуФиллиалами
		|		ПО абс_АВИЗО.ДокументОснованиеИсточник = абс_ПередачаОСМеждуФиллиалами.Ссылка
		|ГДЕ
		|	(абс_ПередачаОСМеждуФиллиалами.ДокументСписаниеОС = &ДокументПередачи
		|			ИЛИ абс_ПередачаОСМеждуФиллиалами.ДокументВводОстатковОС = &ДокументПередачи)";
		
		Запрос.УстановитьПараметр("ДокументПередачи", ДокументПередачи.СсылкаНаОбъект);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат Новый Структура("Ссылка,Статус",ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.Статус);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции 
	
Функция ПолучитьОрганизациюИсточник(ДокументПередачи)  Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_ПередачаОСМеждуФиллиалами.ОрганизацияИсточник
		|ИЗ
		|	Документ.абс_ПередачаОСМеждуФиллиалами КАК абс_ПередачаОСМеждуФиллиалами
		|ГДЕ
		|	(абс_ПередачаОСМеждуФиллиалами.ДокументСписаниеОС = &ДокументПередачи
		|			ИЛИ абс_ПередачаОСМеждуФиллиалами.ДокументВводОстатковОС = &ДокументПередачи)";
		
		Запрос.УстановитьПараметр("ДокументПередачи", ДокументПередачи.СсылкаНаОбъект);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.ОрганизацияИсточник;
		КонецЕсли;
		
	КонецФункции 
	
Функция СформироватьДокументПередачаТоваровНаСервере(СсылкаНаДокумент) Экспорт
		
		Если ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеПриемникДоп) Тогда
			ДокПередачаТоваров = СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеПриемникДоп.ПолучитьОбъект();
		Иначе	
			ДокПередачаТоваров = Документы.ПередачаТоваров.СоздатьДокумент();
		КонецЕсли;
		
		Если СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.ПередачаМатериалы10_07 Тогда
			ДокПередачаТоваров.Дата = СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник.Дата + 2;
		Иначе	
			ДокПередачаТоваров.Дата = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		КонецЕсли;
		
		ДокПередачаТоваров.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		ДокПередачаТоваров.ОтражатьВУправленческомУчете = Истина;
		ДокПередачаТоваров.Склад         = СсылкаНаДокумент.СсылкаНаОбъект.СкладПриемник;
		ДокПередачаТоваров.ВидОперации   = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку;
		ДокПередачаТоваров.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		
		// {{KM WARE Малыгин П.К. Заявка № 33297 11.11.2015 начало
		// ЦФО и Назначение палтежа у приёмника должно браться из отдельных реквизитов для приёмника
		// {{Старый код:
		//ДокПередачаТоваров.абс_ЦФО                 = СсылкаНаДокумент.СсылкаНаОбъект.абс_ЦФО;
		//ДокПередачаТоваров.абс_НазначениеПлатежа   = СсылкаНаДокумент.СсылкаНаОбъект.абс_НазначениеПлатежа;
        // }}Новый код:
		ДокПередачаТоваров.абс_ЦФО                 = СсылкаНаДокумент.СсылкаНаОбъект.kwr_ЦФО_приемник;
		ДокПередачаТоваров.абс_НазначениеПлатежа   = СсылкаНаДокумент.СсылкаНаОбъект.kwr_НазначениеПлатежа_приемник;
        // }}KM WARE Малыгин П.К. Заявка № 33297 11.11.2015 окончание 
		ДокПередачаТоваров.Контрагент              = СсылкаНаДокумент.СсылкаНаОбъект.Контрагент;
//		ДокПередачаТоваров.ДоговорКонтрагента      = НайтиДоговорПоСоответствию(ДокПередачаТоваров.ДоговорКонтрагента,СсылкаНаДокумент);
		ДокПередачаТоваров.ДоговорКонтрагента      = СсылкаНаДокумент.СсылкаНаОбъект.ДоговорКонтрагентаПриемникШапка;
		ДокПередачаТоваров.ВидПередачи             = Перечисления.ВидыПередачиТоваров.СоСклада;
		ДокПередачаТоваров.КратностьВзаиморасчетов   = 1;
		ДокПередачаТоваров.КурсВзаиморасчетов        = 1;
		ДокПередачаТоваров.ВалютаДокумента     = ДокПередачаТоваров.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		ДокПередачаТоваров.Товары.Загрузить(ПолучитьТЧТоварыПоДОкументуИсточнику(СсылкаНаДокумент));
		
		Для каждого СтрокаТабличнойЧасти Из ДокПередачаТоваров.Товары Цикл
            // {{KM WARE Малыгин П.К. Заявка № 34610 03.11.2015 начало
			// Счет передачи должен быть таким же как и счет учета для этого АВИЗО
			// {{Старый код:
			//СтрокаТабличнойЧасти.СчетПередачиБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.07.1");
			//СтрокаТабличнойЧасти.СчетПередачиНУ = ПланыСчетов.Налоговый.НайтиПоКоду("10.07.1");
			// }}Новый код:
			СтрокаТабличнойЧасти.СчетПередачиБУ = СтрокаТабличнойЧасти.СчетУчетаБУ;
			СтрокаТабличнойЧасти.СчетПередачиНУ = СтрокаТабличнойЧасти.СчетУчетаНУ;
			// }}KM WARE Малыгин П.К. Заявка № 34610 03.11.2015 окончание 
			
		КонецЦикла;
		
		ДокПередачаТоваров.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
		ДокПередачаТоваров.Записать(РежимЗаписиДокумента.Запись);
		
		Если СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеПриемник.абс_СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда 
			ДокПередачаТоваров.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен;
			ДокПередачаТоваров.ОтражатьВБухгалтерскомУчете = Истина;
			ДокПередачаТоваров.ОтражатьВНалоговомУчете     = Истина;
			ДокПередачаТоваров.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		// {{KM WARE Малыгин П.К. Заявка № 28.10.2015 начало
		// Проверка не нужна, есть ситуации, когда отсутствие проводок по бух-учёту это нормально
		// Если НЕ ПроводкиСформированы(Новый Структура("СсылкаНаОбъект",ДокПередачаТоваров.Ссылка)) Тогда
		//	ДокПередачаТоваров.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
		//	ДокПередачаТоваров.ОтражатьВБухгалтерскомУчете = Ложь;
		//	ДокПередачаТоваров.ОтражатьВНалоговомУчете     = Ложь;
		//	ДокПередачаТоваров.Записать(РежимЗаписиДокумента.Проведение);
		//КонецЕсли;
		// }}KM WARE Малыгин П.К. Заявка № 28.10.2015 окончание 
	
		Возврат Новый Структура("ДокПередачаТоваров",ДокПередачаТоваров.Ссылка);
		
	КонецФункции
	
Функция СформироватьОприходованиеТоваровНаСервере(СсылкаНаДокумент) Экспорт
		
		Если ЗначениеЗаполнено(СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеПриемник) Тогда
			ДокОприходованиеТоваров = СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеПриемник.ПолучитьОбъект();
		Иначе	
			ДокОприходованиеТоваров = Документы.ОприходованиеТоваров.СоздатьДокумент();
		КонецЕсли;
		
		Если СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.ПередачаМатериалы10_07 Тогда
			ДокОприходованиеТоваров.Дата = СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник.Дата + 1;
		Иначе
			ДокОприходованиеТоваров.Дата = СсылкаНаДокумент.СсылкаНаОбъект.Дата;
		КонецЕсли;
		
		ДокОприходованиеТоваров.Организация = СсылкаНаДокумент.СсылкаНаОбъект.ОрганизацияПриемник;
		ДокОприходованиеТоваров.ОтражатьВУправленческомУчете = Истина;
		ДокОприходованиеТоваров.Склад = СсылкаНаДокумент.СкладПриемник;
		ДокОприходованиеТоваров.КоррСчет  = СсылкаНаДокумент.СсылкаНаОбъект.КорСчет;
		ДокОприходованиеТоваров.Субконто1 = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		ДокОприходованиеТоваров.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ВводНачальныхОстатков;
		ДокОприходованиеТоваров.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		ДокОприходованиеТоваров.абс_Авизо     = СсылкаНаДокумент.СсылкаНаОбъект;
		
		ДокОприходованиеТоваров.Товары.Загрузить(ПолучитьТЧТоварыПоДОкументуИсточнику(СсылкаНаДокумент));
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеСчетовБУиНУСрезПоследних.СчетНУ
		|ИЗ
		|	РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(, СчетБУ = &СчетБУ) КАК СоответствиеСчетовБУиНУСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеСчетовБУиНУСрезПоследних.СчетНУ";
		
		Запрос.УстановитьПараметр("СчетБУ", СсылкаНаДокумент.СсылкаНаОбъект.КорСчет);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ДокОприходованиеТоваров.КоррСчетНУ  = ВыборкаДетальныеЗаписи.СчетНУ;
			ДокОприходованиеТоваров.СубконтоНУ1 = СсылкаНаДокумент.СсылкаНаОбъект.Организация;
		КонецЕсли;
		
		ДокОприходованиеТоваров.абс_СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
		ДокОприходованиеТоваров.Записать(РежимЗаписиДокумента.Запись);
		
		//+++ Колесников А.С. 05.11.2018 [CHG448 / 601]		
	
		Если СсылкаНаДокумент.СсылкаНаОбъект.Статус = Перечисления.абс_СтатусыАвизо.Исполнено ИЛИ СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.ПередачаМатериалыВНО 
				// {{KM WARE Лазаревский К.В. Заявка № 27.10.2015 начало
			ИЛИ СсылкаНаДокумент.СсылкаНаОбъект.ВидОперации = Перечисления.абс_ВидыОперацийАвизо.ПередачаТоваров
			// }}KM WARE Лазаревский К.В. Заявка № 27.10.2015 окончание		
			Тогда
			ДокОприходованиеТоваров.абс_СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Завершен;
			Если ttk_ИнтеграцияБП30Сервер.ПроверкаИспользованияКонстантыИнтеграцияБП30(СсылкаНаДокумент.СсылкаНаОбъект.Дата) Тогда
				ДокОприходованиеТоваров.ОтражатьВБухгалтерскомУчете = Ложь;
				ДокОприходованиеТоваров.ОтражатьВНалоговомУчете     = Ложь;
			Иначе 
				ДокОприходованиеТоваров.ОтражатьВБухгалтерскомУчете = Истина;
				ДокОприходованиеТоваров.ОтражатьВНалоговомУчете     = Истина;
			КонецЕсли;
			
			Попытка
				ДокОприходованиеТоваров.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());	
			КонецПопытки;
		КонецЕсли;
				
		Если НЕ ПроводкиСформированы(Новый Структура("СсылкаНаОбъект",ДокОприходованиеТоваров.Ссылка)) Тогда
			ДокОприходованиеТоваров.абс_СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
			ДокОприходованиеТоваров.ОтражатьВБухгалтерскомУчете = Ложь;
			ДокОприходованиеТоваров.ОтражатьВНалоговомУчете     = Ложь;
			Попытка
				ДокОприходованиеТоваров.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());	
			КонецПопытки;
		КонецЕсли;
		
		Возврат Новый Структура("ДокОприходованиеТоваров",ДокОприходованиеТоваров.Ссылка);
		
КонецФункции
	
Функция ПолучитьТЧТоварыПоДОкументуИсточнику(СсылкаНаДокумент)
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_АВИЗОТовары.ДокументРезерва,
		|	абс_АВИЗОТовары.ДокументРезерваПриемник
		|ПОМЕСТИТЬ втЗаказы
		|ИЗ
		|	Документ.абс_АВИЗО.Товары КАК абс_АВИЗОТовары
		|ГДЕ
		|	абс_АВИЗОТовары.Ссылка = &Авизо
		|
		|СГРУППИРОВАТЬ ПО
		|	абс_АВИЗОТовары.ДокументРезерва,
		|	абс_АВИЗОТовары.ДокументРезерваПриемник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК СчетНУ,
		|	СоответствиеСчетовБУиНУСрезПоследних.СчетБУ
		|ПОМЕСТИТЬ втСчетаНУ
		|ИЗ
		|	РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(, Учитывается) КАК СоответствиеСчетовБУиНУСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетНУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	абс_АВИЗОТовары.Ссылка,
		|	абс_АВИЗОТовары.Номенклатура,
		|	абс_АВИЗОТовары.СерияНоменклатуры,
		|	абс_АВИЗОТовары.ХарактеристикаНоменклатуры,
		|	СУММА(абс_АВИЗОТовары.Количество) КАК Количество,
		|	СУММА(абс_АВИЗОТовары.Сумма) КАК Сумма,
		|	абс_АВИЗОТовары.СчетУчетаБУ,
		|	абс_АВИЗОТовары.СчетУчетаНУ,
		|	СУММА(абс_АВИЗОТовары.СуммаНУ) КАК СуммаНУ,
		|	СУММА(абс_АВИЗОТовары.СуммаПР) КАК СуммаПР,
		|	СУММА(абс_АВИЗОТовары.СуммаВР) КАК СуммаВР,
		|	абс_АВИЗОТовары.Коэффициент,
		|	абс_АВИЗОТовары.ЕдиницаИзмерения,
		|	абс_АВИЗОТовары.СтавкаНДС,
		|	абс_АВИЗОТовары.ЕдиницаИзмеренияМест,
		|	абс_АВИЗОТовары.СтатусПартии,
		|	абс_АВИЗОТовары.ДокументПартии,
		|	абс_АВИЗОТовары.ДокументРезерваПриемник,
		//Крамаренко Д.М.
		//НФС 2018
		|	абс_АВИЗОТовары.СтатьяОборотов,
		|	абс_АВИЗОТовары.абс_ТЭО,
		|	абс_АВИЗОТовары.абс_КВ
		//Крамаренко Д.М.
		//НФС 2018
		|ПОМЕСТИТЬ вт_Авизо
		|ИЗ
		|	Документ.абс_АВИЗО.Товары КАК абс_АВИЗОТовары
		|ГДЕ
		|	абс_АВИЗОТовары.Ссылка = &Авизо
		|
		|СГРУППИРОВАТЬ ПО
		|	абс_АВИЗОТовары.Ссылка,
		|	абс_АВИЗОТовары.СчетУчетаБУ,
		|	абс_АВИЗОТовары.СчетУчетаНУ,
		|	абс_АВИЗОТовары.Номенклатура,
		|	абс_АВИЗОТовары.СерияНоменклатуры,
		|	абс_АВИЗОТовары.ХарактеристикаНоменклатуры,
		|	абс_АВИЗОТовары.ЕдиницаИзмерения,
		|	абс_АВИЗОТовары.СтавкаНДС,
		|	абс_АВИЗОТовары.ЕдиницаИзмеренияМест,
		|	абс_АВИЗОТовары.СтатусПартии,
		|	абс_АВИЗОТовары.ДокументПартии,
		|	абс_АВИЗОТовары.ДокументРезерваПриемник,
		|	абс_АВИЗОТовары.Коэффициент,
		|	абс_АВИЗОТовары.СтатьяОборотов,
		|	абс_АВИЗОТовары.абс_ТЭО,
		|	абс_АВИЗОТовары.абс_КВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура КАК Номенклатура,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Качество КАК Качество,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоРасход КАК Количество,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьРасход КАК СуммаРегл,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета КАК СчетУчетаБУ,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Организация КАК Организация,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Склад КАК Склад,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Заказ
		|ПОМЕСТИТЬ втБУ
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Обороты(, , Регистратор, ) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОбороты
		|		ПОЛНОЕ СОЕДИНЕНИЕ вт_Авизо КАК вт_Авизо
		|		ПО ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура = вт_Авизо.Номенклатура
		|			И ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ХарактеристикаНоменклатуры = вт_Авизо.ХарактеристикаНоменклатуры
		|			И ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СерияНоменклатуры = вт_Авизо.СерияНоменклатуры
		|ГДЕ
		|	(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Регистратор = &ДокументОснованиеИсточник
		|			ИЛИ ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Регистратор ЕСТЬ NULL )
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.Номенклатура,
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.Качество,
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.КоличествоРасход КАК Количество,
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.СерияНоменклатуры,
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.СтоимостьРасход КАК СуммаНУ,
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.СчетУчета КАК СчетУчетаНУ,
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.ПостояннаяРазницаРасход КАК СуммаПР,
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.ВременнаяРазницаРасход КАК СуммаВР,
		|	втСчетаНУ.СчетБУ,
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.Организация,
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.Склад,
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.Заказ
		|ПОМЕСТИТЬ втНУ
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет.Обороты(, , Регистратор, ) КАК ПартииТоваровНаСкладахНалоговыйУчетОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСчетаНУ КАК втСчетаНУ
		|		ПО ПартииТоваровНаСкладахНалоговыйУчетОбороты.СчетУчета = втСчетаНУ.СчетНУ
		|ГДЕ
		|	ПартииТоваровНаСкладахНалоговыйУчетОбороты.Регистратор = &ДокументОснованиеИсточник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЕСТЬNULL(втБУ.Номенклатура, втНУ.Номенклатура), вт_Авизо.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ЕСТЬNULL(втБУ.Качество, втНУ.Качество), ЗНАЧЕНИЕ(справочник.качество.новый)) КАК Качество,
		|	ЕСТЬNULL(ЕСТЬNULL(втБУ.ХарактеристикаНоменклатуры, втНУ.ХарактеристикаНоменклатуры), вт_Авизо.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		|	ЕСТЬNULL(ЕСТЬNULL(втБУ.СерияНоменклатуры, втНУ.СерияНоменклатуры), вт_Авизо.СерияНоменклатуры) КАК СерияНоменклатуры,
		|	ЕСТЬNULL(ЕСТЬNULL(втБУ.Организация, втНУ.Организация), вт_Авизо.Ссылка.ОрганизацияПриемник) КАК Организация,
		|	ЕСТЬNULL(ЕСТЬNULL(втБУ.Склад, втНУ.Склад), вт_Авизо.Ссылка.СкладПриемник) КАК Склад,
		|	ЕСТЬNULL(ЕСТЬNULL(втБУ.Заказ, втНУ.Заказ), вт_Авизо.ДокументРезерваПриемник) КАК Заказ,
		|	ЕСТЬNULL(втБУ.СуммаРегл, вт_Авизо.Сумма) КАК Сумма,
		|	ЕСТЬNULL(втБУ.СуммаРегл, вт_Авизо.Сумма) КАК СуммаРегл,
		|	ЕСТЬNULL(втБУ.СчетУчетаБУ, вт_Авизо.СчетУчетаБУ) КАК СчетУчетаБУ,
		|	ЕСТЬNULL(втНУ.СуммаНУ, вт_Авизо.СуммаНУ) КАК СуммаНУ,
		|	ЕСТЬNULL(втНУ.СчетУчетаНУ, вт_Авизо.СчетУчетаНУ) КАК СчетУчетаНУ,
		|	ЕСТЬNULL(втНУ.СуммаПР, вт_Авизо.СуммаПР) КАК СуммаПР,
		|	ЕСТЬNULL(втНУ.СуммаВР, вт_Авизо.СуммаВР) КАК СуммаВР,
		|	ЕСТЬNULL(ЕСТЬNULL(втБУ.Количество, втНУ.Количество), вт_Авизо.Количество) КАК Количество,
		//Крамаренко Д.М.
		//НФС 2018
		|	ЕСТЬNULL(вт_Авизо.СтатьяОборотов, """") КАК СтатьяОборотов,
		|	ЕСТЬNULL(вт_Авизо.абс_ТЭО, """") КАК абс_ТЭО,
		|	ЕСТЬNULL(вт_Авизо.абс_КВ, """") КАК абс_КВ
		//Крамаренко Д.М.
		//НФС 2018
		|ПОМЕСТИТЬ втОбщая
		|ИЗ
		|	втБУ КАК втБУ
		|		ПОЛНОЕ СОЕДИНЕНИЕ втНУ КАК втНУ
		|		ПО втБУ.Качество = втНУ.Качество
		|			И втБУ.Номенклатура = втНУ.Номенклатура
		|			И втБУ.ХарактеристикаНоменклатуры = втНУ.ХарактеристикаНоменклатуры
		|			И (ВЫБОР
		|				КОГДА втБУ.Номенклатура.ВестиПартионныйУчетПоСериям = ИСТИНА
		|					ТОГДА втБУ.СерияНоменклатуры = втНУ.СерияНоменклатуры
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И втБУ.Организация = втНУ.Организация
		|			И втБУ.СчетУчетаБУ = втНУ.СчетБУ
		|			И втБУ.Склад = втНУ.Склад
		|			И втБУ.Заказ = втНУ.Заказ
		|		ПОЛНОЕ СОЕДИНЕНИЕ вт_Авизо КАК вт_Авизо
		|		ПО втБУ.Номенклатура = вт_Авизо.Номенклатура
		|			И втБУ.ХарактеристикаНоменклатуры = вт_Авизо.ХарактеристикаНоменклатуры
		|			И (ВЫБОР
		|				КОГДА вт_Авизо.Номенклатура.ВестиПартионныйУчетПоСериям = ИСТИНА
		|					ТОГДА втБУ.СерияНоменклатуры = вт_Авизо.СерияНоменклатуры
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И втБУ.Организация = вт_Авизо.Ссылка.Организация
		|			И втБУ.Склад = вт_Авизо.Ссылка.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОбщая.Качество,
		|	втОбщая.ХарактеристикаНоменклатуры,
		|	втОбщая.СерияНоменклатуры,
		|	втОбщая.Организация,
		|	втОбщая.Склад,
		|	втЗаказы.ДокументРезерваПриемник КАК Заказ,
		|	втОбщая.Сумма,
		|	втОбщая.Количество,
		|	втОбщая.Номенклатура,
		|	втОбщая.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	втОбщая.Сумма / втОбщая.Количество КАК Цена,
		|	втОбщая.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
		|	втОбщая.СуммаРегл,
		|	втОбщая.СчетУчетаБУ,
		|	втОбщая.СчетУчетаНУ,
		|	втОбщая.СуммаНУ,
		|	втОбщая.СуммаПР,
		|	втОбщая.СуммаВР,
		|	втОбщая.СтатьяОборотов,
		|	втОбщая.абс_ТЭО,
		|	втОбщая.абс_КВ
		|ИЗ
		|	втОбщая КАК втОбщая
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаказы КАК втЗаказы
		|		ПО втОбщая.Заказ = втЗаказы.ДокументРезерва
		|ГДЕ
		|	втОбщая.Номенклатура <> &ПустаяНоменклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	втОбщая.СчетУчетаНУ,
		|	втОбщая.СчетУчетаБУ,
		|	втЗаказы.ДокументРезерваПриемник,
		|	втОбщая.Номенклатура,
		|	втОбщая.Склад,
		|	втОбщая.Организация,
		|	втОбщая.СерияНоменклатуры,
		|	втОбщая.ХарактеристикаНоменклатуры,
		|	втОбщая.Качество,
		|	втОбщая.Сумма,
		|	втОбщая.Количество,
		|	втОбщая.Номенклатура.ЕдиницаХраненияОстатков,
		|	втОбщая.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		|	втОбщая.СуммаРегл,
		|	втОбщая.СуммаНУ,
		|	втОбщая.СуммаПР,
		|	втОбщая.СуммаВР,
		|	втОбщая.СтатьяОборотов,
		|	втОбщая.абс_ТЭО,
		|	втОбщая.абс_КВ";
		
		Запрос.УстановитьПараметр("ДокументОснованиеИсточник",СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник);
		Запрос.УстановитьПараметр("Авизо",СсылкаНаДокумент.СсылкаНаОбъект);
		
		// {{KM WARE Малыгин П.К. Заявка № 29.10.2015 начало
		// Проверка на пустую номенклатуру
		Запрос.УстановитьПараметр("ПустаяНоменклатура",Справочники.Номенклатура.ПустаяСсылка());
		// }}KM WARE Малыгин П.К. Заявка № 29.10.2015 окончание
		
		ТЗБУ_НУ =  Запрос.Выполнить().Выгрузить();	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартииТоваровНаСкладахОбороты.Номенклатура,
		|	ПартииТоваровНаСкладахОбороты.СтатусПартии
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(, , Регистратор, ) КАК ПартииТоваровНаСкладахОбороты
		|ГДЕ
		|	ПартииТоваровНаСкладахОбороты.Регистратор = &ДокументОснованиеИсточник
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровНаСкладахОбороты.Номенклатура,
		|	ПартииТоваровНаСкладахОбороты.СтатусПартии";
		
		Запрос.УстановитьПараметр("ДокументОснованиеИсточник", СсылкаНаДокумент.СсылкаНаОбъект.ДокументОснованиеИсточник);
		ТЗ_Упр = Запрос.Выполнить().Выгрузить();
		
		ТЗБУ_НУ.Колонки.Добавить("СтатусПартии");
		Для каждого Стр Из ТЗБУ_НУ Цикл
			
			СтрокаПоиска = ТЗ_Упр.Найти(Стр.Номенклатура,"Номенклатура");	
			
			Если СтрокаПоиска <> Неопределено Тогда 
				Стр.СтатусПартии = СтрокаПоиска.СтатусПартии;	
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(Стр.СтатусПартии) Тогда
				Стр.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;	
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ТЗБУ_НУ;
		
	КонецФункции
	
// маппинг папок справочника ОС
//
// Параметры
//  ОсновноеСредствоПриемник - новое ОС
//  ОсновноеСредствоИсточник  - Ос, которое нужно скопировать
//  ОрганизацияПриемник - организация, в которую переносится ОС
//
// {{KM WARE Лазаревский К.В. Заявка № 09.10.2015 начало
Процедура УстановитьПапкуОсновногоСредства(ОсновноеСредствоПриемник, ОсновноеСредствоИсточник, ОрганизацияПриемник)
	Группа = справочники.ОсновныеСредства.НайтиПоНаименованию(ОрганизацияПриемник, Истина, Справочники.ОсновныеСредства.ПустаяСсылка());
	Если Группа = Неопределено или Группа = Справочники.ОсновныеСредства.ПустаяСсылка() Тогда
		ГруппаОбъект = Справочники.ОсновныеСредства.СоздатьГруппу();
		ГруппаОбъект.Наименование = ОрганизацияПриемник.Наименование;
		ГруппаОбъект.Записать();
		Группа = ГруппаОбъект.Ссылка;
	КонецЕсли;
	//Пока Группа <> Неопределено Цикл
		
	Если ЗначениеЗаполнено(ОсновноеСредствоИсточник.Родитель) Тогда
		ГруппаОС = Справочники.ОсновныеСредства.НайтиПоНаименованию(Строка(ОсновноеСредствоПриемник.ГруппаОС), , Группа);
		Если Не ЗначениеЗаполнено(ГруппаОС) Тогда
			ГруппаОСОбъект = Справочники.ОсновныеСредства.СоздатьГруппу();
			// {{KM WARE Малыгин П.К. Заявка № 24.12.2015 начало
			// Ошибка разработки - новая группа должна создаваться внутри группы с наименованием организации
			ГруппаОСОбъект.Родитель = Группа;
			// }}KM WARE Малыгин П.К. Заявка № 24.12.2015 окончание	
			ГруппаОСОбъект.Наименование = Строка(ОсновноеСредствоПриемник.ГруппаОС);
			ГруппаОСОбъект.Записать();
			ГруппаОС = ГруппаОСОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли; 
	Если ОсновноеСредствоПриемник.Родитель <> ГруппаОС Тогда
		ОсновноеСредствоПриемникОбъект = ОсновноеСредствоПриемник.ПолучитьОбъект();
		ОсновноеСредствоПриемникОбъект.Родитель = ГруппаОС;
		ОсновноеСредствоПриемникОбъект.ОбменДанными.Загрузка = Истина;
		ОсновноеСредствоПриемникОбъект.Записать();
	КонецЕсли;

КонецПроцедуры // маппинг папок справочника ОС() }}KM WARE Лазаревский К.В. Заявка № 09.10.2015 окончание	//Филиализация 

// {{KM WARE Малыгин П.К. Заявка № 20.01.2016 начало
// Эта процедура должна срабатывать в превелигированном модуле
Процедура абс_ОпределитьНомерДатуДокументаОплаты(ЗаписьКниги,ТекстОплатыСНомером,ТекстОплаты) Экспорт
// +++ввв 21.07.2016 г.
//ПРОВЕРИТЬ ОСТАЛЬНОЕ!!!	ЙЙЙ
// {{KM WARE Семенов И.С. Заявка №  24.07.2015 начало
// по коммандировкам если нет документа оплаты кидаем номер авансового отчета...
// +++ввв 23.04.2016 г.
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) И ЗначениеЗаполнено(ЗаписьКниги.ДатаДокументаОплаты) Тогда
		ТекстОплатыСНомером=ЗаписьКниги.НомерДокументаОплаты+";"+формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
		ТекстОплаты=формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
		Возврат;
	КонецЕсли;
// ---ввв 23.04.2016 г.
//	Если (ЗаписьКниги.КодВидаОперации="23") тогда
//		если типзнч(ЗаписьКниги.СчетФактураДокумент)=тип("ДокументСсылка.СчетФактураПолученный") тогда
//			ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.kmw_СчетФактураДокумент_Полученный_ДокументОснование_Номер;
//			ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.kmw_СчетФактураДокумент_Полученный_ДокументОснование_Дата;
////было			
////			ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.ДокументОснование.Номер;
////			ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.ДокументОснование.Дата;

//		иначеесли ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) тогда
//			ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.kmw_СчетФактураДокумент_Номер;
//			ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.kmw_СчетФактураДокумент_Дата;
////было			
////			ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.Номер;
////			ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.Дата;
//		конецесли;
//// +++ввв 21.03.2016 г.
//		ТекстОплатыСНомером=ЗаписьКниги.НомерДокументаОплаты+";"+формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//// ---ввв 21.03.2016 г.
//		ТекстОплаты=формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//	КонецЕсли;
//	Если ТипЗнч(ЗаписьКниги.СчетФактура)=Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
//// }}KM WARE Семенов И.С. Заявка № 24.07.2015 окончание

//// +++ввв 08.04.2016 г.
//// +++ввв 12.05.2016 г.
//		ЗаписьКниги.ДатаДокументаОплаты = Формат(ЗаписьКниги.СчетФактура.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
//		ЗаписьКниги.НомерДокументаОплаты = СокрЛП(ЗаписьКниги.СчетФактура.НомерВходящегоДокумента);
//		ТекстОплатыСНомером=ЗаписьКниги.НомерДокументаОплаты+";"+формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//		ТекстОплаты=формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//	Иначе
//// ---ввв 08.04.2016 г.
//// {{KM WARE Малыгин П.К. Заявка №34043 16.10.2015 начало
//// Заполение даты и номера документа для операции НДС с Авансов

//// {{KM WARE Агапов Н.А. Заявка №34940 17.10.2015 начало
//// Добавление значения для кода вида операции "06"

//// {{KM WARE Агапов Н.А. Заявка №34948 19.10.2015 начало
//		Попытка
//			Если Метаданные.НайтиПоТипу(ТипЗнч(ЗаписьКниги.СчетФактураДокумент)).Реквизиты.Найти("КодВидаОперации")<>Неопределено Тогда
//				Если ((ЗаписьКниги.КодВидаОперации="02")ИЛИ
//						(ЗаписьКниги.kmw_СчетФактураДокумент_КодВидаОперации="02") или 
//	//					(ЗаписьКниги.СчетФактураДокумент.КодВидаОперации="02") или 
//						(ЗаписьКниги.КодВидаОперации="06")ИЛИ
//						(ЗаписьКниги.kmw_СчетФактураДокумент_КодВидаОперации="06") 
//	//					(ЗаписьКниги.СчетФактураДокумент.КодВидаОперации="06") 
//						) и 
//	// +++ввв 21.03.2016 г.
//						(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером) или ТекстОплатыСНомером=";") тогда 
//	// ---ввв 21.03.2016 г.
//					Нашли=ложь;
//					если типзнч(ЗаписьКниги.СчетФактураДокумент)=тип("ДокументСсылка.СчетФактураВыданный") тогда
//						если 
//							ЗначениеЗаполнено(ЗаписьКниги.kmw_СчетФактураДокумент_Выданный_НомерПлатежноРасчетногоДокумента) и 
//							ЗначениеЗаполнено(ЗаписьКниги.kmw_СчетФактураДокумент_Выданный_ДатаПлатежноРасчетногоДокумента) тогда
//							
//							ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.kmw_СчетФактураДокумент_Выданный_НомерПлатежноРасчетногоДокумента;
//							ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.kmw_СчетФактураДокумент_Выданный_ДатаПлатежноРасчетногоДокумента;
//							Нашли=истина;
//						конецесли;
//					конецесли;
//					если НЕ Нашли тогда
//						ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.ДокументОснование.Номер;
//						ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.ДокументОснование.Дата;
//	//					ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.kmw_СчетФактураДокумент_ДокументОснование_Номер;
//	//					ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.kmw_СчетФактураДокумент_ДокументОснование_Дата;
//					конецесли;
//	// +++ввв 21.03.2016 г.
//					ТекстОплатыСНомером=ЗаписьКниги.НомерДокументаОплаты+";"+формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//	// ---ввв 21.03.2016 г.
//					ТекстОплаты=формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//					
//				КонецЕсли;
//			Иначе
//	// 21.03.2016 г.
//				Если ((ЗаписьКниги.КодВидаОперации="02") или (ЗаписьКниги.КодВидаОперации="06")) и (НЕ ЗначениеЗаполнено(ТекстОплатыСНомером) или ТекстОплатыСНомером=";") тогда 
//	// 21.03.2016 г.
//					ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.ДокументОснование.Номер;
//					ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.ДокументОснование.Дата;
//	//				ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.kmw_СчетФактураДокумент_ДокументОснование_Номер;
//	//				ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.kmw_СчетФактураДокумент_ДокументОснование_Дата;
//	// +++ввв 21.03.2016 г.
//					ТекстОплатыСНомером=ЗаписьКниги.НомерДокументаОплаты+";"+формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//	// ---ввв 21.03.2016 г.
//					ТекстОплаты=формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//					
//				КонецЕсли;
//				
//			КонецЕсли;
//		Исключение
//		КонецПопытки;
//	КонецЕсли;
//// ---ввв 12.05.2016 г.
//// }}KM WARE Малыгин П.К. Заявка № 34043 16.10.2015 окончание
//// }}KM WARE Агапов Н.А. Заявка №34940 17.10.2015 окончание
//// }}KM WARE Агапов Н.А. Заявка №34948 19.10.2015 окончание

//// {{KM WARE Лазаревский К.В. Заявка №  18.08.2015 начало
////Вылет при формировании
////Старый код
////	Если (НЕ ЗаписьКниги.НаАванс) и (ЗаписьКниги.КодВидаОперации  <> "06") Тогда  //"06" - налоговый агент 
////Новый код
//	Если (НЕ ЗаписьКниги.НаАванс = Истина) и (ЗаписьКниги.КодВидаОперации  <> "06") Тогда  //"06" - налоговый агент 
//// }}KM WARE Лазаревский К.В. Заявка № 24.07.2015 окончание
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
//		
//		// {{KM WARE Малыгин П.К. Заявка № 27.10.2015 начало
//		// Есть ситуации, когда свойство kmwСчетФактураДокументНомерПлатежноРасчетногоДокумента не заполнено
//		// {{Старый код:
//		//ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.kmwСчетФактураДокументНомерПлатежноРасчетногоДокумента;
//		//ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.kmwСчетФактураДокументДатаПлатежноРасчетногоДокумента;
//		//
//		// }}Новый код:
//		Попытка
//		ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.kmwСчетФактураДокументНомерПлатежноРасчетногоДокумента;	
//		Исключение
//		Сообщить(""+ЗаписьКниги.СчетФактураДокумент+" нет свойства kmwСчетФактураДокументНомерПлатежноРасчетногоДокумента");
//		КонецПопытки;
//	
//	    Попытка
//		ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.kmwСчетФактураДокументДатаПлатежноРасчетногоДокумента;	
//		Исключение
//		Сообщить(""+ЗаписьКниги.СчетФактураДокумент+" нет свойства kmwСчетФактураДокументДатаПлатежноРасчетногоДокумента");
//		КонецПопытки;

//        // }}KM WARE Малыгин П.К. Заявка № 27.10.2015 окончание 
//		
//		Если НЕ ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда 
//			Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактура) Тогда
//// +++ввв 10.04.2016 г.
//				//Нашли=Ложь;
//				//Если ТипЗнч(ЗаписьКниги.СчетФактура)=Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
//				//	СчетФактураДокумент=ЗаписьКниги.СчетФактура;
//				//	Пока Истина Цикл
//				//		Если ТипЗнч(СчетФактураДокумент)=Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
//				//			Если ЗначениеЗаполнено(СчетФактураДокумент.абс_ДокументОснование) Тогда
//				//				СчетФактураДокумент=СчетФактураДокумент.абс_ДокументОснование;
//				//				Продолжить;
//				//			КонецЕсли;
//				//		КонецЕсли;
//				//		Нашли=Истина;
//				//		Прервать;
//				//	КонецЦикла;
//				//	Если Нашли Тогда
//				//		Попытка
//				//			ДатаВД=СчетФактураДокумент.ДатаВходящегоДокумента;
//				//			НомерВД=СчетФактураДокумент.НомерВходящегоДокумента;
//				//		Исключение
//				//			ДатаВД="";
//				//			НомерВД="";
//				//		КонецПопытки;
//				//		Если НЕ ЗначениеЗаполнено(ДатаВД) Тогда
//				//			ДатаВД=СчетФактураДокумент.Дата;
//				//		КонецЕсли;
//				//		ЗаписьКниги.ДатаДокументаОплаты = Формат(ДатаВД, "ДФ=dd.MM.yyyy");
//				//		Если НЕ ЗначениеЗаполнено(НомерВД) Тогда
//				//			НомерВД=СчетФактураДокумент.Номер;
//				//		КонецЕсли;
//				//		ЗаписьКниги.НомерДокументаОплаты = СокрЛП(НомерВД);
//				//	КонецЕсли;
//				//КонецЕсли;
//				//Если НЕ Нашли Тогда		
//// ---ввв 10.04.2016 г.
//			// {{KM WARE Малыгин П.К. Заявка №35271 11.01.2016 начало
//			// {{Старый код:
//			// 	ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.kmwСчетФактураНомер;
//			//	ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.kmwСчетФактураДата;
//            // }}Новый код:
//					Попытка	
//						ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.kmwСчетФактураНомер;
//						ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.kmwСчетФактураДата;					
//					Исключение
//						ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.НомерСчетаФактуры;
//						ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.ДатаСчетаФактуры;
//					КонецПопытки;
//			// }}KM WARE Малыгин П.К. Заявка №35271 11.01.2016 окончание 		
//				//КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//		// {{KM WARE Агапов Н.А. Заявка №34425 09.10.2015 начало
//// 21.03.2016 г.
//		ТекстОплатыСНомером=""+ЗаписьКниги.НомерДокументаОплаты+";"+формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//// 21.03.2016 г.
//		// }}KM WARE Агапов Н.А. Заявка №34425 09.10.2015 окончание
//		ТекстОплаты=формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//// {{KM WARE Семенов И.С. Заявка № 32104 14.07.2015 начало
//// по авансам тоже надо дату, номер
//	иначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда 
//		ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.НомерВходящегоДокумента;
//		ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.ДатаВходящегоДокумента;					
//		
//// +++ввв 21.03.2016 г.
//		ТекстОплатыСНомером=ЗаписьКниги.НомерДокументаОплаты+";"+формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//// ---ввв 21.03.2016 г.
//		ТекстОплаты=формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//// }}KM WARE Семенов И.С. Заявка № 32104 14.07.2015 окончание
////	иначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда 
////		если ЗначениеЗаполнено(ЗаписьКниги.kmwСчетФактураДокументНомерВходящегоДокумента) тогда
////			ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.kmwСчетФактураДокументНомерВходящегоДокумента;
////			ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.kmwСчетФактураДокументДатаВходящегоДокумента;					
////		иначе
////// +++ввв 10.04.2016 г.
////			СчетФактураДокумент=ЗаписьКниги.СчетФактура;
////			Нашли=Ложь;
////			Пока Истина Цикл
////				Если ТипЗнч(СчетФактураДокумент)=Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
////					Если ЗначениеЗаполнено(СчетФактураДокумент.абс_ДокументОснование) Тогда
////						СчетФактураДокумент=СчетФактураДокумент.абс_ДокументОснование;
////						Продолжить;
////					КонецЕсли;
////				КонецЕсли;
////				Нашли=Истина;
////				Прервать;
////			КонецЦикла;
////			Если Нашли Тогда
////				Попытка
////					ДатаВД=СчетФактураДокумент.ДатаВходящегоДокумента;
////					НомерВД=СчетФактураДокумент.НомерВходящегоДокумента;
////				Исключение
////					ДатаВД="";
////					НомерВД="";
////				КонецПопытки;
////				Если НЕ ЗначениеЗаполнено(ДатаВД) Тогда
////					ДатаВД=СчетФактураДокумент.Дата;
////				КонецЕсли;
////				ЗаписьКниги.ДатаДокументаОплаты = Формат(ДатаВД, "ДФ=dd.MM.yyyy");
////				Если НЕ ЗначениеЗаполнено(НомерВД) Тогда
////					НомерВД=СчетФактураДокумент.Номер;
////				КонецЕсли;
////				ЗаписьКниги.НомерДокументаОплаты = СокрЛП(НомерВД);
////			КонецЕсли;
////			если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент.абс_ДокументОснование) тогда
////				Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент.абс_ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда 
////					ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.абс_ДокументОснование.НомерВходящегоДокумента;
////					ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.абс_ДокументОснование.ДатаВходящегоДокумента;					
////// +++ввв 21.03.2016 г.
////				иначе
////					ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.абс_ДокументОснование.Номер;
////					ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.абс_ДокументОснование.Дата;					
////// +++ввв 21.03.2016 г.
////				конецесли;	
////			конецесли;
//		//конецесли;
//		//ТекстОплатыСНомером=ЗаписьКниги.НомерДокументаОплаты+";"+формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//		//ТекстОплаты=формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//// ---ввв 10.04.2016 г.			
//// {{KM WARE Семенов И.С. Заявка № 27607 18.07.2015 начало
//	иначеесли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда 
//		ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.Номер;
//		ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.Дата;
//// +++ввв 21.03.2016 г.
//		ТекстОплатыСНомером=ЗаписьКниги.НомерДокументаОплаты+";"+формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//// ---ввв 21.03.2016 г.
//		ТекстОплаты=формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//// }}KM WARE Семенов И.С. Заявка № 18.07.2015 окончание		
//	конецесли;
//// {{KM WARE Семенов И.С. Заявка № 24.07.2015 начало

//// по авансом в любом случае ставим какой то номер документа!
//// +++ввв 21.03.2016 г.
////	Если (ЗаписьКниги.КодВидаОперации="02" или ЗаписьКниги.КодВидаОперации="22" ) и (НЕ ЗначениеЗаполнено(ТекстОплатыСНомером) или ТекстОплатыСНомером=";") тогда 
////// ---ввв 21.03.2016 г.
////		Если НЕ ЗаписьКниги.СчетФактураДокумент = Неопределено Тогда // Лапин 14.09.2015 добавлена проверка на неопределено начало 
////			ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.Номер;
////			ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.Дата;
////// +++ввв 21.03.2016 г.
////		 	ТекстОплатыСНомером=ЗаписьКниги.НомерДокументаОплаты+";"+формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
////// ---ввв 21.03.2016 г.
////			ТекстОплаты=формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
////	КонецЕсли; // Лапин 14.09.2015 добавлена проверка на неопределено окончание

//	//КонецЕсли; // Лапин 14.09.2015 добавлена проверка на неопределено окончание
//	
//// }}KM WARE Семенов И.С. Заявка № 24.07.2015 окончание	

//        // {{KM WARE Малыгин П.К. Заявка №26605 02.10.2015 начало
//	// Заполение даты и номера документа для операции восстановления НДС с Авансов
//	
//// +++ 21.03.2016 г.
//	Если (ЗаписьКниги.КодВидаОперации="21") и (НЕ ЗначениеЗаполнено(ТекстОплатыСНомером) или ТекстОплатыСНомером=";") тогда 
//// ---ввв 21.03.2016 г.
//		
//			ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.ДокументОснование.Номер;
//			ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.ДокументОснование.Дата;
//// +++ввв 21.03.2016 г.
//			ТекстОплатыСНомером=ЗаписьКниги.НомерДокументаОплаты+";"+формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");
//// ---ввв 21.03.2016 г.
//			ТекстОплаты=формат(ЗаписьКниги.ДатаДокументаОплаты,"ДФ=dd.MM.yyyy");

//	КонецЕсли;
		
	// }}KM WARE Малыгин П.К. Заявка №26605 02.10.2015 окончание
// ---ввв 21.07.2016 г.

КонецПроцедуры
// }}KM WARE Малыгин П.К. Заявка № 20.01.2016 окончание

// {{KM WARE Малыгин П.К. Заявка № 21.01.2016 начало
Функция ОпределитьДатуИНомерСФ(ЗаписьКниги, Организация) Экспорт
	
	//ПрефиксыРИБиОрганизации = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	//
	ВариантыПредставленияСчетаФактуры = Новый Структура("ДатаНомер,НомерДата,Дата,Номер", "", "", "", "");
	
// +++ввв 01.06.2016 г.
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерСчетаФактуры) И ЗначениеЗаполнено(ЗаписьКниги.ДатаСчетаФактуры) Тогда
		ДатаСФ	= Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
		НомерСФ = СокрЛП(ЗаписьКниги.НомерСчетаФактуры);			
		ВариантыПредставленияСчетаФактуры.ДатаНомер = "" + ДатаСФ + ?(ЗначениеЗаполнено(ДатаСФ), ";", "") + НомерСФ;
		ВариантыПредставленияСчетаФактуры.НомерДата = "" + НомерСФ + ?(ЗначениеЗаполнено(НомерСФ), ";", "") + ДатаСФ;
// +++ввв 08.06.2016 г.
		ВариантыПредставленияСчетаФактуры.Номер = НомерСФ;
		ВариантыПредставленияСчетаФактуры.Дата = ДатаСФ;
// ---ввв 08.06.2016 г.
		Возврат ВариантыПредставленияСчетаФактуры;
	КонецЕсли;
// ---ввв 01.06.2016 г.
	Если НЕ ЗначениеЗаполнено(ЗаписьКниги.СчетФактура) Тогда
		Возврат ВариантыПредставленияСчетаФактуры;
	КонецЕсли;
	// {{KM WARE Малыгин П.К. Заявка № 7714660 18.01.2016 начало
	// 
	Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент)=тип("ДокументСсылка.СчетФактураВыданный") И ЗаписьКниги.СчетФактураДокумент.Исправление  Тогда
		ДатаСФ	= Формат(ЗаписьКниги.СчетФактураДокумент.ДатаИсходногоДокумента, "ДФ=dd.MM.yyyy");
		НомерСФ = СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсходногоДокумента);			
// +++ввв 12.05.2016 г.
	//ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент)=Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
	//	ДатаСФ	= Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
	//	НомерСФ = СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);			
	ИначеЕсли ЗначениеЗаполнено(ЗаписьКниги.НомерСчетаФактуры) И ЗначениеЗаполнено(ЗаписьКниги.ДатаСчетаФактуры) Тогда
		ДатаСФ	= Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
		НомерСФ = СокрЛП(ЗаписьКниги.НомерСчетаФактуры);			
	Иначе
		ДатаСФ	= Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
		НомерСФ = СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);			
	КонецЕсли;
// ---ввв 12.05.2016 г.
// }}KM WARE Малыгин П.К. Заявка № 18.01.2016 окончание
	
	ВариантыПредставленияСчетаФактуры.ДатаНомер = "" + ДатаСФ + ?(ЗначениеЗаполнено(ДатаСФ), ";", "") + НомерСФ;
	ВариантыПредставленияСчетаФактуры.НомерДата = "" + НомерСФ + ?(ЗначениеЗаполнено(НомерСФ), ";", "") + ДатаСФ;
	
	ВариантыПредставленияСчетаФактуры.Номер = НомерСФ;
	ВариантыПредставленияСчетаФактуры.Дата = ДатаСФ;
	
	Возврат ВариантыПредставленияСчетаФактуры;
	
КонецФункции
// }}KM WARE Малыгин П.К. Заявка № 21.01.2016 окончание

// +++ввв 20.04.2016 г.
Функция ВыполнитьЗапросАбсолютно(Запрос) Экспорт
	Возврат Запрос.Выполнить();
КонецФункции
// ---ввв 20.04.2016 г.

Процедура ЗаписатьДокументПривелегированно(АдресХранилища, ttk_Номер, ttk_Дата, НомерВходящегоДокумента, ДатаВходящегоДокумента) Экспорт
	Дока=ПолучитьИзВременногоХранилища(АдресХранилища).ПолучитьОбъект();
	Если ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда		
		Дока.НомерВходящегоДокумента=НомерВходящегоДокумента;
	КонецЕсли;
	Если ДатаВходящегоДокумента<>Дата(1,1,1) Тогда
		Дока.ДатаВходящегоДокумента=ДатаВходящегоДокумента;
	КонецЕсли;
	Если ЗначениеЗаполнено(ttk_Номер) Тогда
		Дока.ttk_Номер=ttk_Номер;
	КонецЕсли;
	Если ttk_Дата<>Дата(1,1,1) Тогда
		Дока.ttk_Дата=ttk_Дата;
	КонецЕсли;
	Дока.Записать(РежимЗаписиДокумента.Запись,РежимПроведенияДокумента.Неоперативный);
КонецПроцедуры
