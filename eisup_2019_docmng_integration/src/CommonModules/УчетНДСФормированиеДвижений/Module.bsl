//////////////////////////////////////////////////////////////////////////
//  ОПЕРАТИВНЫЕ ДВИЖЕНИЯ РЕГИСТРОВ ПОДСИСТЕМЫ НДС

// Процедура вызывается из модулей документов прихода.
// Отражает поступление МПЗ или затрат в подсистеме учета НДС
//
Процедура СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, Отказ) Экспорт
	//++ Задача № 10655 Логинчев А.С. 16.05.2012 14:47:13
	пСчет19БП = ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.БП");
	//-- Задача № 10655 Логинчев А.С.
	абс_ЕстьНДСПоНовымВидамДеятельности = НЕ ТаблицаПредъявленногоНДС.Колонки.Найти("абс_РасходыБудущихПериодов") = Неопределено;
	
	УчетНДС.ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента);
	
	СсылкаНаДокумент = СтруктураШапкиДокумента.Ссылка;
	Движения = Новый Структура();
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСПредъявленный", СсылкаНаДокумент);
    ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСКосвенныеРасходы", СсылкаНаДокумент);
    ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСВключенныйВСтоимость", СсылкаНаДокумент);
    ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСНезавершенноеПроизводство", СсылкаНаДокумент);
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		//Документ ОтчетКомиссионераОПродажах вызывает данную процедуру но не является регистратором регистра НДСпоОСиНМА
		 ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСпоОСиНМА", СсылкаНаДокумент);
	КонецЕсли;
	
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
	ТаблицаДвижений_НДСпоОСиНМА = Неопределено;
	ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено;
	ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено;
	ТаблицаДвижений_НДСНезавершенноеПроизводство = Неопределено;
	
	
	Если СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		СчетаУчетаКосвенныхРасходов = УчетНДС.ОпределитьСчетаУчетаКосвенныхРасходов();
		СчетаУчетаПроизводственныхРасходов = УчетНДС.ОпределитьСчетаУчетаПроизводственныхРасходов();
	КонецЕсли; 
	
	СчетаУчетаОСиНМАиОБъектовСтроительства = УчетНДС.ОпределитьСчетаУчетаОСиНМА(, СтруктураШапкиДокумента.Дата);
	СчетаУчетаОС = УчетНДС.ОпределитьСчетаУчетаОСиНМА("ОС", СтруктураШапкиДокумента.Дата);
	СчетаУчетаОборудование = УчетНДС.ОпределитьСчетаУчетаОСиНМА("Оборудование", СтруктураШапкиДокумента.Дата);
	СчетаУчетаНМА = УчетНДС.ОпределитьСчетаУчетаОСиНМА("НМА");
	
	ОсобыеУсловияБлокировкиВычета2006_ОСиНМА = (СтруктураШапкиДокумента.Дата >= '20060101');
	
	ИспользоватьДокументРасчетовКакСчетФактуру = СтруктураШапкиДокумента.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру")
												И СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру;
	
	НДСВключенВСтоимость = СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") И СтруктураШапкиДокумента.НДСВключенВСтоимость;
	
	ЕстьКолонкаСтатьяЗатрат = ТаблицаПредъявленногоНДС.Колонки.Найти("СтатьяЗатрат") <> Неопределено;
	ЕстьКолонкаНоменклатурнаяГруппа = ТаблицаПредъявленногоНДС.Колонки.Найти("НоменклатурнаяГруппа") <> Неопределено;
	ЕстьКолонкаПодразделениеОрганизации = ТаблицаПредъявленногоНДС.Колонки.Найти("ПодразделениеОрганизации") <> Неопределено;
	ЕстьКолонкаЗаказПокупателя = ТаблицаПредъявленногоНДС.Колонки.Найти("ЗаказПокупателя") <> Неопределено;
	ЕстьКолонкаЗаказ = ТаблицаПредъявленногоНДС.Колонки.Найти("Заказ") <> Неопределено;
	ЕстьКолонкаСчетЗатратНУ = ТаблицаПредъявленногоНДС.Колонки.Найти("СчетЗатратНУ") <> Неопределено;
	
	Для Каждого СтрокаДок Из ТаблицаПредъявленногоНДС Цикл
		
		Если ТипЗнч(СтрокаДок.СчетУчетаЦенности) = Тип("ПланСчетовСсылка.Хозрасчетный")
			И СтрокаДок.СчетУчетаЦенности.Забалансовый Тогда
			// Пропускаем забалансовые поступления
			Продолжить;
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет" И Не ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
			//По строкам АО, в которых не указана СФ записи в регистре не формируются 
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаДок.ВидЦенности;	
		//++ Задача № 10655 Логинчев А.С. 16.05.2012 14:45:48
		Если СтрокаДок.СчетУчетаНДС = пСчет19БП И абс_ЕстьНДСПоНовымВидамДеятельности Тогда
			СтрокаДвижения.РасходыБудущихПериодов = СтрокаДок.абс_РасходыБудущихПериодов;
		КонецЕсли;
			
		//-- Задача № 10655 Логинчев А.С.
		Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
			// при проведении авансовых отчетов порядок заполнения данных измерений иной   			
			СтрокаДвижения.Поставщик   = СтрокаДок.Поставщик;
			СтрокаДвижения.СчетФактура = СтрокаДок.СчетФактура;
		Иначе
			
			//АБС ВСТАВКА №8935 НАЧАЛО
			Если СтруктураШапкиДокумента.Свойство("абс_Продавец") Тогда	
				Если ЗначениеЗаполнено(СтруктураШапкиДокумента.абс_Продавец) Тогда
					СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.абс_Продавец;
				Иначе
					СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
				КонецЕсли;
			Иначе		
				СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
			КонецЕсли;	
			//\\АБС ВСТАВКА №8935 КОНЕЦ			

			СтрокаДвижения.СчетФактура = ?(ИспользоватьДокументРасчетовКакСчетФактуру, СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
		КонецЕсли;

		Если УчетНДС.ВидыЦенностиНалоговыйАгентПоступление().Найти(СтрокаДок.ВидЦенности) <> Неопределено
			И СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
			СтрокаДвижения.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		КонецЕсли;	
		
		Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
			СтрокаДвижения.СтавкаНДС   = СтруктураШапкиДокумента.СтавкаНДС;
		Иначе
			СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
		КонецЕсли;	
			
		СтрокаДвижения.СчетУчетаНДС = СтрокаДок.СчетУчетаНДС;
		СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС = СтрокаДок.НДС;
		СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;
		СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		
		//////////////////////////////////////
		// Обработка специфических ситуаций
		Если СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.НМА 
			Или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.Оборудование
			Или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства
			Или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.ОС
			Или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные
			Или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами
			Или (СчетаУчетаОСиНМАиОБъектовСтроительства.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) <> Неопределено
			   И Движения.Свойство("НДСпоОСиНМА"))
			Тогда // Блокирование вычета для ОС и объектов строительства (в т.ч. СМР)
		
			Если ТаблицаДвижений_НДСпоОСиНМА = Неопределено Тогда
				ТаблицаДвижений_НДСпоОСиНМА	= Движения.НДСпоОСиНМА.ВыгрузитьКолонки();
			КонецЕсли; 
				
			СтрокаДвиженияОС = ТаблицаДвижений_НДСпоОСиНМА.Добавить();

			СтрокаДвиженияОС.Организация	= СтруктураШапкиДокумента.Организация;
			СтрокаДвиженияОС.ВидЦенности	= СтрокаДок.ВидЦенности;

			Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
				// при проведении авансовых отчетов порядок заполнения данных измерений иной
				СтрокаДвиженияОС.СчетФактура = СтрокаДок.СчетФактура;
			Иначе
				СтрокаДвиженияОС.СчетФактура = ?(ИспользоватьДокументРасчетовКакСчетФактуру, СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
			КонецЕсли;

			Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
				СтрокаДвиженияОС.СтавкаНДС = СтруктураШапкиДокумента.СтавкаНДС;
			Иначе
				СтрокаДвиженияОС.СтавкаНДС = СтрокаДок.СтавкаНДС;
			КонецЕсли;	
				
			СтрокаДвиженияОС.СчетУчетаНДС = СтрокаДок.СчетУчетаНДС;
			СтрокаДвиженияОС.НДСВключенВСтоимость = НДСВключенВСтоимость;
			
			Если СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.НМА 
				Или СчетаУчетаНМА.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) <> Неопределено Тогда
				
				СтрокаДвиженияОС.Состояние	= Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию;
				СтрокаДвиженияОС.Объект 	= СтрокаДок.Ценность;
				
			ИначеЕсли СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.ОС 
				Или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.Оборудование 
				Или СчетаУчетаОС.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) <> Неопределено
				Или СчетаУчетаОборудование.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) <> Неопределено Тогда
				
				СтрокаДвиженияОС.Состояние	= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОС;
				СтрокаДвиженияОС.Объект 	= СтрокаДок.Ценность;
				
			Иначе
				
				СтрокаДвиженияОС.Состояние	= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;
				
				// Определим объект строительства
				ОбъектСтроительства = Неопределено;
				Если ТаблицаПредъявленногоНДС.Колонки.Найти("ОбъектСтроительства") = Неопределено Тогда
					
					ВидыСубконтоСчетаЗатрат = СтрокаДок.СчетУчетаЦенности.ВидыСубконто;
					Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
						Если ТаблицаПредъявленногоНДС.Колонки.Найти("Субконто" + НомерСубконто) <> Неопределено 
							И ТипЗнч(СтрокаДок["Субконто" + НомерСубконто]) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда
							ОбъектСтроительства = СтрокаДок["Субконто" + НомерСубконто];
							Прервать;
						КонецЕсли; 
					КонецЦикла;
					
				Иначе
					ОбъектСтроительства = СтрокаДок.ОбъектСтроительства;
				КонецЕсли; 
				
				СтрокаДвиженияОС.Объект = ОбъектСтроительства;
				
			КонецЕсли; 
			
			СтрокаДвиженияОС.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
			СтрокаДвиженияОС.НДС = СтрокаДок.НДС;
			СтрокаДвиженияОС.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
			
			//абс проверка на вычет по НДС влиять не должна
			Если ОсобыеУсловияБлокировкиВычета2006_ОСиНМА тогда
				СтрокаДвиженияОС.НеВлияетНаВычет = истина;
			//(СчетаУчетаОС.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено И 
			//										СчетаУчетаНМА.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено);
			КонецЕсли;
												
		ИначеЕсли СтруктураШапкиДокумента.СложныйУчетНДС 
			И Не (СчетаУчетаКосвенныхРасходов.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено)
			Тогда //Отражение в составе косвенных расходов, подлежащих распределению
			
			СтатьяЗатрат = Неопределено;

			Если Не ЕстьКолонкаСтатьяЗатрат Тогда
				ВидыСубконтоСчетаЗатрат = СтрокаДок.СчетУчетаЦенности.ВидыСубконто;
				Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
					Если Не (ТаблицаПредъявленногоНДС.Колонки.Найти("Субконто" + НомерСубконто) = Неопределено) 
						И ТипЗнч(СтрокаДок["Субконто"+НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") тогда
						СтатьяЗатрат = СтрокаДок["Субконто" + НомерСубконто];
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			Иначе
				СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
			КонецЕсли; 
			
			НоменклатурнаяГруппа = Неопределено;
			Если ЕстьКолонкаНоменклатурнаяГруппа Тогда
			    НоменклатурнаяГруппа = СтрокаДок.НоменклатурнаяГруппа;
			КонецЕсли;

			СложныйУчетНДСПоНоменклатурнойГруппе = Ложь;
			Если ЕстьКолонкаНоменклатурнаяГруппа
				И СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) <> Неопределено Тогда
				СложныйУчетНДСПоНоменклатурнойГруппе = УчетНДС.ЕстьСложныйУчетНДСПоНоменклатурнойГруппе(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата, НоменклатурнаяГруппа);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтатьяЗатрат) 
			   И ((СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено
				  Или СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) <> Неопределено
					  И Не ЗначениеЗаполнено(НоменклатурнаяГруппа))
				Или СтруктураШапкиДокумента.ИспользуетсяРасширеннаяАналитикаУчета) Тогда
			    
				Если ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено Тогда
					ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.НДСКосвенныеРасходы.ВыгрузитьКолонки();
				КонецЕсли;
				
				СтрокаДвиженияКР = ТаблицаДвижений_НДСКосвенныеРасходы.Добавить();

				СтрокаДвиженияКР.Организация	= СтруктураШапкиДокумента.Организация;
				СтрокаДвиженияКР.ВидЦенности	= СтрокаДок.ВидЦенности;

				Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
					// при проведении авансовых отчетов порядок заполнения данных измерений иной
					СтрокаДвиженияКР.СчетФактура = СтрокаДок.СчетФактура;
				Иначе
					СтрокаДвиженияКР.СчетФактура = ?(ИспользоватьДокументРасчетовКакСчетФактуру, СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
				КонецЕсли;

				Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
					СтрокаДвиженияКР.СтавкаНДС = СтруктураШапкиДокумента.СтавкаНДС;
				Иначе
					СтрокаДвиженияКР.СтавкаНДС = СтрокаДок.СтавкаНДС;
				КонецЕсли;	
					
				СтрокаДвиженияКР.СчетУчетаНДС = СтрокаДок.СчетУчетаНДС;
				СтрокаДвиженияКР.НДСВключенВСтоимость = НДСВключенВСтоимость;
				СтрокаДвиженияКР.СтатьяЗатрат = СтатьяЗатрат;
				СтрокаДвиженияКР.СчетЗатрат = СтрокаДок.СчетУчетаЦенности;
				
				ВидыСубконтоСчетаЗатрат = СтрокаДок.СчетУчетаЦенности.ВидыСубконто;
				Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
					Если Не (ТаблицаПредъявленногоНДС.Колонки.Найти("Субконто" + НомерСубконто) = Неопределено) тогда
						СтрокаДвиженияКР["Субконто" + НомерСубконто] = СтрокаДок["Субконто" + НомерСубконто];
					КонецЕсли; 
				КонецЦикла;
				
				// Заполним дополнительные реквизиты, необходимые для корректного отражения в регистрах учета затрат.
				СтрокаДвиженияКР.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				Если ЕстьКолонкаПодразделениеОрганизации Тогда
					СтрокаДвиженияКР.Подразделение = СтрокаДок.ПодразделениеОрганизации;
				КонецЕсли;
				
				Если ЕстьКолонкаЗаказПокупателя Тогда
					СтрокаДвиженияКР.Заказ = СтрокаДок.ЗаказПокупателя;
				ИначеЕсли ЕстьКолонкаЗаказ Тогда
					СтрокаДвиженияКР.Заказ = СтрокаДок.Заказ;
				КонецЕсли;
				
				СтрокаДвиженияКР.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
					И ЕстьКолонкаСчетЗатратНУ Тогда
					
					СтрокаДвиженияКР.СчетЗатратНУ = СтрокаДок.СчетЗатратНУ;
					
					ВидыСубконтоСчетаЗатрат = СтрокаДок.СчетЗатратНУ.ВидыСубконто;
					Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
						Если не (ТаблицаПредъявленногоНДС.Колонки.Найти("СубконтоНУ" + НомерСубконто) = Неопределено) тогда
							СтрокаДвиженияКР["СубконтоНУ" + НомерСубконто] = СтрокаДок["СубконтоНУ" + НомерСубконто];
						КонецЕсли; 
					КонецЦикла;
					
				КонецЕсли;
				
				СтрокаДвиженияКР.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
				СтрокаДвиженияКР.НДС = СтрокаДок.НДС;
				
			// Движения по регистру НДС незавершенное производство.	
			ИначеЕсли ЗначениеЗаполнено(СтатьяЗатрат) 
				И (СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) <> Неопределено)
				И СложныйУчетНДСПоНоменклатурнойГруппе Тогда
			
				Если ТаблицаДвижений_НДСНезавершенноеПроизводство = Неопределено Тогда
					ТаблицаДвижений_НДСНезавершенноеПроизводство = Движения.НДСНезавершенноеПроизводство.ВыгрузитьКолонки();
				КонецЕсли;
				
				СтрокаДвиженияНЗП = ТаблицаДвижений_НДСНезавершенноеПроизводство.Добавить();

				СтрокаДвиженияНЗП.ВидЦенности	= СтрокаДок.ВидЦенности;

				Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
					// при проведении авансовых отчетов порядок заполнения данных измерений иной
					СтрокаДвиженияНЗП.СчетФактура= СтрокаДок.СчетФактура;
				Иначе
					СтрокаДвиженияНЗП.СчетФактура= ?(ИспользоватьДокументРасчетовКакСчетФактуру, СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
				КонецЕсли;

				Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
					СтрокаДвиженияНЗП.СтавкаНДС	= СтруктураШапкиДокумента.СтавкаНДС;
				Иначе
					СтрокаДвиженияНЗП.СтавкаНДС	= СтрокаДок.СтавкаНДС;
				КонецЕсли;	
					
				СтрокаДвиженияНЗП.СчетУчетаНДС	= СтрокаДок.СчетУчетаНДС;
				СтрокаДвиженияНЗП.НДСВключенВСтоимость = НДСВключенВСтоимость;
				СтрокаДвиженияНЗП.СтатьяЗатрат = СтатьяЗатрат;
				СтрокаДвиженияНЗП.СчетУчета = СтрокаДок.СчетУчетаЦенности;
				
				// Заполним дополнительные реквизиты, необходимые для корректного отражения в регистрах учета затрат.
				СтрокаДвиженияНЗП.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				Если ЕстьКолонкаПодразделениеОрганизации Тогда
					СтрокаДвиженияНЗП.Подразделение = СтрокаДок.ПодразделениеОрганизации;
				КонецЕсли;
				Если ЕстьКолонкаЗаказПокупателя Тогда
					СтрокаДвиженияНЗП.Заказ = СтрокаДок.ЗаказПокупателя;
				ИначеЕсли ЕстьКолонкаЗаказ Тогда
					СтрокаДвиженияНЗП.Заказ = СтрокаДок.Заказ;
				КонецЕсли;
				
				СтрокаДвиженияНЗП.Стоимость = СтрокаДок.СуммаБезНДС + СтрокаДок.НДС;
				СтрокаДвиженияНЗП.НДС       = СтрокаДок.НДС;
				
			КонецЕсли; 
		КонецЕсли;
		// Обработка специфических ситуаций
		//////////////////////////////////////
		
		//////////////////////////////////////
		// Отражение включения НДС в стоимость 
		Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") 
			И НДСВключенВСтоимость Тогда

			СтрокаДвижения2 = ТаблицаДвижений_НДСПредъявленный.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаДвижения2, СтрокаДвижения);
			
			СтрокаДвижения2.ВидДвижения  = ВидДвиженияНакопления.Расход;
			СтрокаДвижения2.Событие     = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
			
			
			Если ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено Тогда
				ТаблицаДвижений_НДСВключенныйВСтоимость	= Движения.НДСВключенныйВСтоимость.ВыгрузитьКолонки();
			КонецЕсли;
			
			СтрокаДвиженияВкл = ТаблицаДвижений_НДСВключенныйВСтоимость.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаДвиженияВкл, СтрокаДвижения);
						
		КонецЕсли;
		// Отражение включения НДС в стоимость 
		//////////////////////////////////////
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда

		Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ДобавитьДвижение();
		Движения.НДСПредъявленный.Записать(Ложь);
		
	КонецЕсли;
	
	Если Не ТаблицаДвижений_НДСпоОСиНМА = Неопределено Тогда
		
		Движения.НДСпоОСиНМА.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
		Движения.НДСпоОСиНМА.ВыполнитьПриход();
		Движения.НДСпоОСиНМА.Записать(Ложь);
		
	КонецЕсли; 

	Если Не ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено Тогда
		
		Движения.НДСКосвенныеРасходы.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвижений_НДСКосвенныеРасходы;
		Движения.НДСКосвенныеРасходы.ВыполнитьПриход();
		Движения.НДСКосвенныеРасходы.Записать(Ложь);
		
	КонецЕсли; 
	
	Если Не ТаблицаДвижений_НДСНезавершенноеПроизводство = Неопределено Тогда
		
		Движения.НДСНезавершенноеПроизводство.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСНезавершенноеПроизводство.мТаблицаДвижений = ТаблицаДвижений_НДСНезавершенноеПроизводство;
		Движения.НДСНезавершенноеПроизводство.ВыполнитьПриход();
		Движения.НДСНезавершенноеПроизводство.Записать(Ложь);
		
	КонецЕсли;

	Если Не ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено Тогда
		
		Движения.НДСВключенныйВСтоимость.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();
		Движения.НДСВключенныйВСтоимость.Записать(Ложь);
		
	КонецЕсли; 
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСПредъявленный()

Процедура СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТабЧасть, Движения = Неопределено, Отказ, СчетОтнесенияНДС, ЭтоВозврат = Ложь, СписаниеПартий = Ложь) Экспорт

	УчетНДС.ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, Истина);
	
	СсылкаНаДокумент = СтруктураШапкиДокумента.Ссылка;
	
	Если Движения = Неопределено 
		Или Не Движения.Свойство("ТаблицаДвиженийНДСНачисленный") Тогда
		
		Если Движения = Неопределено Тогда
			Движения = Новый Структура("СтруктураСодержитНаборыЗаписей", Истина);
		КонецЕсли;
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСНачисленный", СсылкаНаДокумент);
		ТаблицаДвижений_НДСНачисленный	= Движения.НДСНачисленный.ВыгрузитьКолонки();
		
	Иначе
		
		ТаблицаДвижений_НДСНачисленный   = Движения.ТаблицаДвиженийНДСНачисленный;
		
	КонецЕсли;	
	
	ЕстьСчетУчета = ТабЧасть.Колонки.Найти("СчетУчетаБУ") <> Неопределено;
	
	Если ЕстьСчетУчета Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Хозрасчетный.Ссылка КАК Счет
		               |ИЗ
		               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		               |ГДЕ
		               |	Хозрасчетный.Забалансовый = ИСТИНА";
		
		ЗабалансовыеСчета = Новый СписокЗначений();
		ЗабалансовыеСчета.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
		
	КонецЕсли; 
	
	Ставка0 = Перечисления.СтавкиНДС.НДС0;
	
	ТаблицаДвижений_НДСРеализация0	= Неопределено;

	ЕстьКолонкаСчетДоходовБУ = ТабЧасть.Колонки.Найти("СчетДоходовБУ") <> Неопределено;
	ЕстьКолонкаКомиссионный = ТабЧасть.Колонки.Найти("Комиссионный") <> Неопределено;
	ЕстьКолонкаПринадлежностьНоменклатуры = ТабЧасть.Колонки.Найти("ПринадлежностьНоменклатуры") <> Неопределено 
											И УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	ЕстьКолонкаДоговорКомиссии = ТабЧасть.Колонки.Найти("ДоговорКомиссии") <> Неопределено;
	ЕстьКолонкаСчетДоходовБУ = ТабЧасть.Колонки.Найти("СчетДоходовБУ") <> Неопределено;
	ЕстьСчетДоходовБУЕНВД = СтруктураШапкиДокумента.Свойство("СчетДоходовБУ") И НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтруктураШапкиДокумента.СчетДоходовБУ);
	
	Контрагент = ?(СтруктураШапкиДокумента.Свойство("Контрагент"), СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.Организация);
	ИспользоватьДокументРасчетовКакСчетФактуру = СтруктураШапкиДокумента.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру")
												И СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру;
												
	ТипыСчетФактураРеализация0 = Метаданные.РегистрыНакопления.НДСРеализация0.Измерения.СчетФактура.Тип;
												
	Для Каждого СтрокаВыбытия Из ТабЧасть Цикл
		
		ОтражатьНДСКомитента = СтруктураШапкиДокумента.Дата >= '20060101' 
								И ?(ЕстьКолонкаКомиссионный, СтрокаВыбытия.Комиссионный, 
									?(ЕстьКолонкаПринадлежностьНоменклатуры, СтрокаВыбытия.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый, Ложь))
								И ?(ЕстьКолонкаДоговорКомиссии И ЗначениеЗаполнено(СтрокаВыбытия.ДоговорКомиссии), СтрокаВыбытия.ДоговорКомиссии.УчетАгентскогоНДС, Ложь);

		//Проверка, что счет не забалансовый, это не товары полученные на комиссию, сумма в текущей строке не 0	
		Если  (ЕстьСчетУчета
			И (ЗабалансовыеСчета.НайтиПоЗначению(СтрокаВыбытия.СчетУчетаБУ) <> Неопределено
				Или ?(ЕстьКолонкаПринадлежностьНоменклатуры, СтрокаВыбытия.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый, Ложь))
		    И (Не ОтражатьНДСКомитента))
			Или (СтрокаВыбытия.СуммаБезНДС + СтрокаВыбытия.НДС) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаВыбытия.ВидЦенности;
		СтрокаДвижения.Покупатель  = Контрагент;
		
		Если ЭтоВозврат Тогда
			СтрокаДвижения.СчетФактура = ?(Не ЗначениеЗаполнено(СтрокаВыбытия.ДокументПартии), СтруктураШапкиДокумента.Ссылка, СтрокаВыбытия.ДокументПартии);
		Иначе	
			СтрокаДвижения.СчетФактура = ?(ИспользоватьДокументРасчетовКакСчетФактуру, СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
		КонецЕсли;
		
		СтрокаДвижения.СтавкаНДС = СтрокаВыбытия.СтавкаНДС;
		СтрокаДвижения.СчетУчетаНДС = СчетОтнесенияНДС;
		СтрокаДвижения.СуммаБезНДС = СтрокаВыбытия.СуммаБезНДС * ?(ЭтоВозврат, -1, 1);
		СтрокаДвижения.НДС = СтрокаВыбытия.НДС * ?(ЭтоВозврат, -1, 1);
		СтрокаДвижения.ДоговорКонтрагента = ?(ОтражатьНДСКомитента, СтрокаВыбытия.ДоговорКомиссии, Неопределено);
		СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
		СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		Если СтрокаВыбытия.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
		ИначеЕсли СтрокаВыбытия.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			Если ЕстьКолонкаСчетДоходовБУ 
				И НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаВыбытия.СчетДоходовБУ) Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД;
			ИначеЕсли ЕстьСчетДоходовБУЕНВД Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД;
			Иначе
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			КонецЕсли;
		Иначе
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли; 
		СтрокаДвижения.СписаниеПартий = СписаниеПартий;
		
		// Устанавливаем реквизиты движения
		СтрокаДвижения.Номенклатура = СтрокаВыбытия.Ценность;
		
		Если ЕстьКолонкаСчетДоходовБУ Тогда
			СтрокаДвижения.СчетДоходовБУ = СтрокаВыбытия.СчетДоходовБУ;
		КонецЕсли;
		
		Если СтрокаВыбытия.СтавкаНДС = Ставка0 
			И Не СтруктураШапкиДокумента.ВидДокумента = "ОтчетОРозничныхПродажах"
			И Не СтруктураШапкиДокумента.ВидДокумента = "ПриходныйКассовыйОрдер" 
			И ТипыСчетФактураРеализация0.СодержитТип(ТипЗнч(СтрокаДвижения.СчетФактура)) Тогда
			
			Если ТаблицаДвижений_НДСРеализация0 = Неопределено Тогда
				
				Если Не Движения.Свойство("СтруктураСодержитНаборыЗаписей") Тогда
					ТаблицаДвижений_НДСРеализация0 = Движения.ТаблицаДвиженийНДСРеализация0;
				Иначе
					ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСРеализация0", СсылкаНаДокумент);
					ТаблицаДвижений_НДСРеализация0	= Движения.НДСРеализация0.ВыгрузитьКолонки();
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДвижения0 = ТаблицаДвижений_НДСРеализация0.Добавить();
			
			СтрокаДвижения0.Организация = СтрокаДвижения.Организация;
			СтрокаДвижения0.ВидЦенности = СтрокаДвижения.ВидЦенности;
			СтрокаДвижения0.Покупатель  = СтрокаДвижения.Покупатель;
			СтрокаДвижения0.СчетФактура = СтрокаДвижения.СчетФактура;
			СтрокаДвижения0.СтавкаНДС   = СтрокаВыбытия.СтавкаНДС;
			СтрокаДвижения0.Состояние   = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
			СтрокаДвижения0.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
			СтрокаДвижения0.НДС         = СтрокаДвижения.НДС;
			СтрокаДвижения0.Событие     = СтрокаДвижения.Событие;
			СтрокаДвижения0.ВидДвижения = ВидДвиженияНакопления.Приход; 			
			СтрокаДвижения0.СписаниеПартий = СписаниеПартий;
			
		КонецЕсли; 

	КонецЦикла;
	
		
	Если Движения.Свойство("СтруктураСодержитНаборыЗаписей") Тогда
		
		Движения.НДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
		Движения.НДСНачисленный.Записать(Ложь);
		
	Иначе	
		
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Движения.Период,"Период");
		Движения.Вставить("ИзмененыДвиженияНДСНачисленный", Истина);
		
	КонецЕсли;
		
	Если Не ТаблицаДвижений_НДСРеализация0 = Неопределено Тогда
		
		Если Движения.Свойство("СтруктураСодержитНаборыЗаписей") 
			И Движения.Свойство("СтруктураСодержитНаборыЗаписей") Тогда
			
			Движения.НДСРеализация0.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
			Движения.НДСРеализация0.ДобавитьДвижение();
			Движения.НДСРеализация0.Записать(Ложь);
			
		Иначе
			
			ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(Движения.Период,"Период");
			Движения.Вставить("ИзмененыДвиженияНДСРеализация0", Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	Если Движения.Свойство("СтруктураСодержитНаборыЗаписей") 
		И Движения.СтруктураСодержитНаборыЗаписей Тогда
		
		Если Движения.Свойство("НДСНачисленный") Тогда
			Движения.Удалить("НДСНачисленный");
		КонецЕсли;	
		Если Движения.Свойство("НДСРеализация0") Тогда
			Движения.Удалить("НДСРеализация0");
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации()

Процедура СформироватьДвиженияНДСНезавершенноеПроизводство_ОтчетПроизводстваЗаСмену(СтруктураШапкиДокумента,ТаблицаПоПродукцииНЗП) Экспорт
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоПродукцииНЗП.Количество()=0 Тогда
		 Возврат;
	 КонецЕсли;

	СтруктураПараметров = новый Структура();
	СтруктураПараметров.Вставить("НоменклатурныеГруппыДляРеализацииБезНДСиНДС0", УчетНДС.ПолучитьНоменклатурныеГруппыДляРеализацииБезНДСиНДС0(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, новый Структура()));

	 КолвоЭлементов = ТаблицаПоПродукцииНЗП.Количество();
	 Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
		 
		 СтрокаТаблицы = ТаблицаПоПродукцииНЗП[КолвоЭлементов - ОбратныйИндекс];
		 
		 ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТаблицы.СчетЗатрат, СтрокаТаблицы.СтатьяЗатрат);
		 
		 Если ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы ИЛИ
			 НЕ УчетНДС.ЭтоНоменклатурнаяГруппаДляРеализацииБезНДСиНДС0(СтруктураШапкиДокумента.Организация, СтрокаТаблицы.НоменклатурнаяГруппа, СтруктураПараметров) Тогда
			 ТаблицаПоПродукцииНЗП.Удалить(СтрокаТаблицы);
		 КонецЕсли;
	 КонецЦикла;
	 Если ТаблицаПоПродукцииНЗП.Количество()=0 Тогда
		 Возврат;
	 КонецЕсли;
	 
	ТабИмен = Неопределено;
	ttk_ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоПродукцииНЗП, ТабИмен, "Подразделение", 				"ПодразделениеУпр");
	ttk_ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоПродукцииНЗП, ТабИмен, "ПодразделениеОрганизации", 	"Подразделение");
	
	ТаблицаПоПродукцииНЗП.Колонки.Добавить("КодОперации");
	ТаблицаПоПродукцииНЗП.ЗаполнитьЗначения(Перечисления.КодыОперацийНезавершенноеПроизводство.ВнутренниеУслугиНаПроизводство,"КодОперации");

	Движения = новый Структура();
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСНезавершенноеПроизводство",СтруктураШапкиДокумента.Ссылка);

	Движения.НДСНезавершенноеПроизводство.мПериод      = СтруктураШапкиДокумента.Дата;
	Движения.НДСНезавершенноеПроизводство.мТаблицаДвижений = ТаблицаПоПродукцииНЗП;
	Движения.НДСНезавершенноеПроизводство.ВыполнитьПриход();
	Движения.НДСНезавершенноеПроизводство.Записать(ложь);

КонецПроцедуры

//Формирует движения по регистрам НДСНачисленный и НДССАвансов для документа СФ Выданный
Процедура СформироватьДвиженияНДС_СчетФактураВыданный(СтруктураШапкиДокумента, ТаблицаСчетаФактуры) Экспорт
	
	Движения = Новый Структура();
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСНачисленный",СтруктураШапкиДокумента.Ссылка);
    ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСсАвансов",СтруктураШапкиДокумента.Ссылка);

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
    ТаблицаДвижений_НДССАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();

	// Заполним таблицу движений НДСНачисленный.
	Для Каждого СтрокаТаблицы Из ТаблицаСчетаФактуры Цикл
		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений_НДСНачисленный.Добавить();
		
		СтрокаДвижений.Организация = 	СтруктураШапкиДокумента.Организация;
		Если СтруктураШапкиДокумента.Под0 Тогда
			СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0;
		Иначе
			СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
		КонецЕсли;
		
		СтрокаДвижений.Покупатель = 	СтруктураШапкиДокумента.Контрагент;
		
		СтрокаДвижений.СчетФактура =    СтруктураШапкиДокумента.ДокументОснование;
		
		СтрокаДвижений.Событие = 		Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		СтрокаДвижений.СтавкаНДС = 		СтрокаТаблицы.СтавкаНДС;
		
		СтрокаДвижений.СуммаБезНДС = 	СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.НДС = 			СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.ВидНачисления = 	Перечисления.НДСВидНачисления.НДСсАвансов;
		СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		
		СтрокаДвижений = ТаблицаДвижений_НДССАвансов.Добавить();
		
		СтрокаДвижений.Организация		= СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.ВидЦенности		= Перечисления.ВидыЦенностей.АвансыПолученные;
		СтрокаДвижений.Покупатель		= СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		
		СтрокаДвижений.СчетФактура		= СтруктураШапкиДокумента.ДокументОснование;
		
		СтрокаДвижений.СтавкаНДС		= СтрокаТаблицы.СтавкаНДС;
		СтрокаДвижений.СуммаБезНДС		= СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.НДС				= СтрокаТаблицы.СуммаНДС;
		
		СтрокаДвижений.ВалютнаяСуммаСНДС= СтрокаТаблицы.ВалютнаяСумма;
		СтрокаДвижений.ВалютаАванса     = СтруктураШапкиДокумента.ВалютаДокумента;
		
	КонецЦикла;
	
	Движения.НДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
	Движения.НДСНачисленный.ВыполнитьПриход();
    Движения.НДСНачисленный.Записать(ложь);
	
	Движения.НДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДССАвансов;
	Движения.НДСсАвансов.ВыполнитьПриход();
    Движения.НДСсАвансов.Записать(ложь);

КонецПроцедуры

// Процедура вызывается при поступлении оплаты.
// Отражает начисление НДС налогового агента в подсистеме учета НДС
//
//Процедура СформироватьДвиженияНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаОплаты) Экспорт
//	
//	Если Не СтруктураШапкиДокумента.ДоговорКонтрагента.УчетАгентскогоНДС
//		Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Движения = Новый Структура();
//	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСНачисленный",СтруктураШапкиДокумента.Ссылка);
//	
//	ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
//	
//	ДвиженияХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
//	ДвиженияХозрасчетный.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
//	
//	СчетУчетаРасчетовПоНДС = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
//	СчетНДС = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
//	
//	Для Каждого СтрокаТаблицы Из ТаблицаОплаты Цикл
//		
//		// НДС начисленный
//		НовоеДвижение = ТаблицаДвижений_НДСНачисленный.Добавить();
//		НовоеДвижение.Организация = СтруктураШапкиДокумента.Организация;
//		НовоеДвижение.Покупатель = СтруктураШапкиДокумента.Контрагент;
//		НовоеДвижение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
//		НовоеДвижение.СчетФактура = СтрокаТаблицы.СчетФактура;
//		НовоеДвижение.ВидЦенности = СтрокаТаблицы.ВидЦенности;
//		НовоеДвижение.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
//		НовоеДвижение.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
//			
//		НовоеДвижение.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС;
//		НовоеДвижение.НДС = СтрокаТаблицы.СуммаНДС;
//			
//		НовоеДвижение.Событие = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
//		НовоеДвижение.ДатаСобытия = СтруктураШапкиДокумента.Дата;
//		НовоеДвижение.СчетУчетаНДС	= СчетНДС;
//			
//		НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
//		
//		// Проводки по БУ
//		НовоеДвижение = ДвиженияХозрасчетный.Добавить();
//		НовоеДвижение.Период = СтруктураШапкиДокумента.Дата;
//		НовоеДвижение.Организация = СтруктураШапкиДокумента.Организация;
//		НовоеДвижение.НомерЖурнала = "НДС";
//		НовоеДвижение.Содержание = "НДС";
//		
//		НовоеДвижение.СчетДт = СчетУчетаРасчетовПоНДС;
//		НовоеДвижение.СчетКт = СчетНДС;
//		НовоеДвижение.Сумма = СтрокаТаблицы.СуммаНДС;
//		
//		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетДт, НовоеДвижение.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
//		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетДт, НовоеДвижение.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
//		
//		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетКт, НовоеДвижение.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
//		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетКт, НовоеДвижение.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
//		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетКт, НовоеДвижение.СубконтоКт, "СФВыданные", СтруктураШапкиДокумента.ДокументОснование);
//		
//	КонецЦикла;
//	
//	Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
//	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
//	Движения.НДСНачисленный.ВыполнитьПриход();
//	Движения.НДСНачисленный.Записать(Ложь);
//	
//	ДвиженияХозрасчетный.Записать(Ложь);
//			
//КонецПроцедуры

//////////////////////////////////////////////////
//  ПО НДС НАЧИСЛЕННОМУ С ПОЛУЧЕННОГО АВАНСА

// Формирует движения по регистрам НДС и бух.проводки для документа СФ Выданный на аванс
//
Процедура СформироватьДвиженияСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре) Экспорт
	
	// Движения по исправленным счетам-фактурам формируются только регламентной обработкой
	// проведения документов по регистрам НДС
	Если СтруктураШапкиДокумента.Исправление Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Новый Структура;
	
	СформироватьДвиженияНДСНачисленныйСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
	
	СформироватьДвиженияНДСсАвансовСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
	
	СформироватьПроводкиСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
	
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

// Формирует движения по регистру НДСНачисленный для документа СФ Выданный на аванс
//
Процедура СформироватьДвиженияНДСНачисленныйСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения)
	
	Если СтруктураШапкиДокумента.Исправление Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСНачисленный", СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоСчетуФактуре Цикл
		
		СтрокаДвижений = ТаблицаДвижений_НДСНачисленный.Добавить();
		
		СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
		Если СтруктураШапкиДокумента.Под0 Тогда
			СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0;
		Иначе
			СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
		КонецЕсли;
		
		СтрокаДвижений.Покупатель    = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижений.СчетФактура   = СтруктураШапкиДокумента.ДокументОснование;
		СтрокаДвижений.Событие       = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		СтрокаДвижений.СтавкаНДС     = СтрокаТаблицы.СтавкаНДС;
		СтрокаДвижений.ВидНачисления = Перечисления.НДСВидНачисления.НДСсАвансов;
		СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		
		СтрокаДвижений.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.НДС         = СтрокаТаблицы.СуммаНДС;
		
	КонецЦикла;
	
	Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
	Движения.НДСНачисленный.ВыполнитьПриход();
	
КонецПроцедуры

// Формирует движения по регистру НДСЗаписиКнигиПродаж для документа СФ Выданный на аванс
//
Процедура СформироватьДвиженияНДСЗаписиКнигиПродажСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения)
	
	Если НЕ СтруктураШапкиДокумента.Исправление Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	ДатаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапкиДокумента.ДокументОснование, "Дата");
	ЗаписьДопЛиста = НачалоКвартала(ДатаОплаты) < НачалоКвартала(СтруктураШапкиДокумента.Дата);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоСчетуФактуре Цикл
		
		СтрокаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Добавить();
		
		СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Покупатель  = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижений.СчетФактура = СтруктураШапкиДокумента.ДокументОснование;
		СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
		СтрокаДвижений.СтавкаНДС   = СтрокаТаблицы.СтавкаНДС;
		СтрокаДвижений.Событие     = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		СтрокаДвижений.ДатаОплаты  = ДатаОплаты;
		СтрокаДвижений.ИсправленныйСчетФактура = СтруктураШапкиДокумента.Ссылка;
		СтрокаДвижений.ДоговорКонтрагента      = СтруктураШапкиДокумента.ДоговорКонтрагента;
		
		Если ЗаписьДопЛиста Тогда
			СтрокаДвижений.ЗаписьДополнительногоЛиста = Истина;
			СтрокаДвижений.КорректируемыйПериод = НачалоКвартала(ДатаОплаты);
		КонецЕсли;
		
		СтрокаДвижений.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.НДС         = СтрокаТаблицы.СуммаНДС;
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение();
	
КонецПроцедуры

// Формирует движения по регистру НДСсАвансов для документа СФ Выданный на аванс
//
Процедура СформироватьДвиженияНДСсАвансовСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения)
	
    ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСсАвансов", СтруктураШапкиДокумента.Ссылка);
    ТаблицаДвижений_НДССАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();

	Для Каждого СтрокаТаблицы Из ТаблицаПоСчетуФактуре Цикл
		
		СтрокаДвижений = ТаблицаДвижений_НДССАвансов.Добавить();
		
		СтрокаДвижений.Организация		  = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.ВидЦенности		  = Перечисления.ВидыЦенностей.АвансыПолученные;
		СтрокаДвижений.Покупатель		  = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаДвижений.СтавкаНДС		  = СтрокаТаблицы.СтавкаНДС;
		СтрокаДвижений.ВалютаАванса       = СтруктураШапкиДокумента.ВалютаДокумента;
		СтрокаДвижений.СчетФактура		  = СтруктураШапкиДокумента.ДокументОснование;
		Если СтруктураШапкиДокумента.Исправление Тогда
			СтрокаДвижений.ИсправленныйСчетФактура = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;
		
		СтрокаДвижений.СуммаБезНДС		 = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.НДС				 = СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.ВалютнаяСуммаСНДС = СтрокаТаблицы.ВалютнаяСумма;
		
	КонецЦикла;
	
	Движения.НДСсАвансов.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДССАвансов;
	Движения.НДСсАвансов.ВыполнитьПриход();

КонецПроцедуры

// Формирование движений по регистру Хозрасчетный.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура СформироватьПроводкиСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения)

	ДобавитьНаборРегистраБухгалтерииВСтруктуруДвижений(Движения, "Хозрасчетный", СтруктураШапкиДокумента.Ссылка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоСчетуФактуре Цикл
		
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда
			//Формирование проводки не требуется
			Продолжить;
		КонецЕсли; 
	
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период 	 = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; //76.АВ
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтруктураШапкиДокумента.ДокументОснование);
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
		Проводка.Сумма = СтрокаТаблицы.СуммаНДС;
		
		Проводка.Содержание =   "НДС по предоплате";
		Проводка.НомерЖурнала = "НДС";
		
	КонецЦикла;
	
КонецПроцедуры 

//////////////////////////////////////////////////
//  ПО НДС НАЧИСЛЕННОМУ ПО РЕАЛИЗАЦИИ

// Процедура вызывается из модуля управления взаиморасчетами в тех случаях,
// когда взаиморасчеты с поставщиками ведутся в У.Е. с использованием рублевого 
// покрытия. По переданной таблице суммовых разниц формируются движения 
// корректирующие суммы событий, отраженных в регистре "НДСПокупки".
Процедура КорректировкаРегистровНДСПоСуммовымРазницам_Реализация(СтруктураШапкиДокумента, ИсходнаяТаблицаСуммовыхРазниц, КорректировкаДокумента = Ложь, ЗачетАванса = Ложь) Экспорт

	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		Или Не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС")
		Или Не СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС")
		Или Не СтруктураШапкиДокумента.Свойство("ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы")
		Или Не СтруктураШапкиДокумента.Свойство("НачислятьНДСПоОтгрузке")
		Тогда
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН",(ЗначениеЗаполнено(УчетнаяПолитика) И (УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная)));
		КонецЕсли;

		Если Не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС",?(Не ЗначениеЗаполнено(УчетнаяПолитика), Истина, УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС",?(Не ЗначениеЗаполнено(УчетнаяПолитика), Ложь, УчетнаяПолитика.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы") Тогда
			СтруктураШапкиДокумента.Вставить("ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы",?(Не ЗначениеЗаполнено(УчетнаяПолитика), Ложь, УчетнаяПолитика.ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("НачислятьНДСПоОтгрузке") Тогда
			СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке",?(Не ЗначениеЗаполнено(УчетнаяПолитика), Ложь, УчетнаяПолитика.НачислятьНДСПоОтгрузке));
		КонецЕсли;
	КонецЕсли;
	
	УчитыватьСРкакСуммыСвязанныеСРасчетамиПоОплате = СтруктураШапкиДокумента.ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы;
	УчитыватьПоложительныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС;
	УчитыватьОтрицательныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС;
	
	ВыделятьНДСпоСР = (УчитыватьПоложительныеРазницыДляНДС или УчитыватьОтрицательныеРазницыДляНДС или ЗачетАванса);
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если не ВыделятьНДСпоСР Тогда
		// Суммовые разницы не нужно учитывать для НДС по реализации
		Возврат;
	КонецЕсли;
	
	ТаблицаСуммовыхРазниц = ИсходнаяТаблицаСуммовыхРазниц.Скопировать();
	
	Если Не ЗачетАванса Тогда
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаТаблицы Из ТаблицаСуммовыхРазниц Цикл
		Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")
			И СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
			СтрокаТаблицы.Документ = СтрокаТаблицы.Документ.ДокументОтгрузки;
		КонецЕсли;

		Если СтрокаТаблицы.СуммоваяРазница>0 и УчитыватьПоложительныеРазницыДляНДС Тогда
			//Строка обрабатывается
			продолжить;
		ИначеЕсли СтрокаТаблицы.СуммоваяРазница<0 и УчитыватьОтрицательныеРазницыДляНДС Тогда
			//Строка обрабатывается
			продолжить;
		Иначе
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
		
	Для каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
		ТаблицаСуммовыхРазниц.Удалить(СтрокаТаблицы);
	КонецЦикла; 
	КонецЕсли;
	
	Если ТаблицаСуммовыхРазниц.Количество() = 0 Тогда
		// Нечего обрабатывать
		Возврат;
	КонецЕсли;
	
	Движения = новый Структура();
    СсылкаНаДокумент = СтруктураШапкиДокумента.Ссылка;
	
	// формируем дерево счетов-фактур по которым нужно отразить суммовые разницы
	СчетаФактурыПолученные = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("Документ"), Истина);

	РеестрСчетовФактур = ПолучитьДанныеПоКорректируемымСчетамФактурам_Реализация(СтруктураШапкиДокумента, СчетаФактурыПолученные, КорректировкаДокумента);
	
	СвернутаяТаблицаСФ = ТаблицаСуммовыхРазниц.Скопировать();
	СвернутаяТаблицаСФ.Свернуть("Документ","СуммоваяРазница");
	Для каждого СчетФактура Из СвернутаяТаблицаСФ Цикл
		Если РеестрСчетовФактур.Количество() = 0 Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не отражена суммовая разница в размере "+Формат(СчетФактура.СуммоваяРазница, "ЧЦ=15; ЧДЦ=2")  +" в регистрах НДС по документу <"+Строка(СчетФактура.Документ)+">");
		ИначеЕсли РеестрСчетовФактур.НайтиСтроки(Новый Структура("СчетФактура",СчетФактура.Документ)).Количество()=0 тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не отражена суммовая разница в размере "+Формат(СчетФактура.СуммоваяРазница, "ЧЦ=15; ЧДЦ=2")  +" в регистрах НДС по документу <"+Строка(СчетФактура.Документ)+">");
		КонецЕсли;
	КонецЦикла;
	
	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Отразить распределение в таблице суммовых разниц
	РеестрСчетовФактур.Колонки.Добавить("СуммоваяРазница",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РеестрСчетовФактур.Колонки.Добавить("СР_БезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_СНДС"),"СуммоваяРазница");

	Распределение = Новый Структура("СуммоваяРазница","СуммоваяРазница");
	Отбор         = Новый Структура("СчетФактура","Документ");
	
	РеестрСчетовФактур = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,РеестрСчетовФактур,Распределение,Отбор);//,Исключить); 

	СтрокиКУдалению = новый массив();
	
	// Разделим суммовую разницу на сумму без НДС и сумму с НДС
	Для каждого СтрокаРеестра Из РеестрСчетовФактур Цикл
		Если СтрокаРеестра.СуммоваяРазница=0 
			или СтрокаРеестра.Базис_СНДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		ИначеЕсли УчитыватьСРкакСуммыСвязанныеСРасчетамиПоОплате и не ЗачетАванса Тогда
            Если СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
				СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
            ИначеЕсли СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
				СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110;
			ИначеЕсли СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				// Отражение суммовой разницы в данном режиме по ставке НДС 0% не предусмотрено
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЕсли; 
		СтрокаРеестра.СР_НДС =  Окр(СтрокаРеестра.СуммоваяРазница*СтрокаРеестра.Базис_НДС/СтрокаРеестра.Базис_СНДС,2);
		СтрокаРеестра.СР_БезНДС =  СтрокаРеестра.СуммоваяРазница - СтрокаРеестра.СР_НДС;
	КонецЦикла; 
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РеестрСчетовФактур.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если РеестрСчетовФактур.Количество()=0 Тогда
	    Возврат;
	КонецЕсли; 
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСНачисленный",СсылкаНаДокумент);

	// Отражение сумовой разницы в регистре НДСНачисленный
	ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("СуммаБезНДС","СР_БезНДС");
	СоответствиеКолонок.Вставить("НДС","СР_НДС");
								 
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СоответствиеКолонок);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РеестрСчетовФактур,ТаблицаДвижений_НДСНачисленный);
	ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	Если УчитыватьСРкакСуммыСвязанныеСРасчетамиПоОплате и не ЗачетАванса Тогда
	    // Суммовая разница отражается по документу оплаты, а не по документу реализации
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"СчетФактура");
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате,"ВидЦенности");
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСНачисленКУплате,"ВидНачисления");
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате,"Событие");
	Иначе	
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация,"Событие");
	КонецЕсли; 
	
	ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах,"ВидРегламентнойОперации");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СоответствиеКолонок,Истина);
	
	// Далее корректировка регистра НДСНачисленный не планируется
	// Заполним набор записей регистра полученным результатом
	Движения.НДСНачисленный.мПериод          = ?(СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период),СтруктураШапкиДокумента.Период,?(СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты), СтруктураШапкиДокумента.ДатаОплаты, СтруктураШапкиДокумента.Дата));
	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
	Движения.НДСНачисленный.ДобавитьДвижение();
	Движения.НДСНачисленный.Записать(Ложь);
	
	Если (ЗачетАванса или не УчитыватьСРкакСуммыСвязанныеСРасчетамиПоОплате)
		// Отражение суммовой разницы при отражении суммовых разниц в соотвествии со ст 162 НК РФ 
		// по реализации 0% не предусмотрено
		И (РеестрСчетовФактур.Итог("ЕстьРеализация0")>0)
		тогда
		
		Построитель_РеестрСчетовФактур = новый ПостроительЗапроса();
		ОписаниеИсточника_РеестрСчетовФактур = новый ОписаниеИсточникаДанных(РеестрСчетовФактур);
		
		Построитель_РеестрСчетовФактур.ИсточникДанных = ОписаниеИсточника_РеестрСчетовФактур;

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьРеализация0");
		ОтборПостроитель["ЕстьРеализация0"].Значение = 1;
		ОтборПостроитель["ЕстьРеализация0"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСНачисленныйРеализация0 = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьРеализация0"].Использование = Ложь;
		Корректировки_НДСНачисленныйРеализация0.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Корректировки_НДСНачисленныйРеализация0.Колонки.Добавить("НДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСНачисленныйРеализация0 Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.Реализация0_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Реализация0_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСНачисленныйРеализация0 Цикл
			Если СтрокаРеестра.СуммаБезНДС=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСНачисленныйРеализация0.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		//ПереименованиеКолонок(Корректировки_НДСНачисленныйРеализация0, СоответствиеКолонок,Истина);
		Корректировки_НДСНачисленныйРеализация0.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС","СуммаБезНДС,НДС");//, СчетУчетаНДС
		
		ОтразитьСуммовыеРазницыПоРеализации0_НДСНачисленный(СтруктураШапкиДокумента,Корректировки_НДСНачисленныйРеализация0);
		
	КонецЕсли; //Если РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0 Тогда
	
КонецПроцедуры // КорректировкаРегистровНДСПоСуммовымРазницам_Реализация()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по реализации 0%
Процедура ОтразитьСуммовыеРазницыПоРеализации0_НДСНачисленный(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	СостоянияПредъявленный = Новый СписокЗначений;
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	Запрос.УстановитьПараметр("СостоянияПредъявленный", СостоянияПредъявленный);
	Запрос.УстановитьПараметр("СостоянияОжидание", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("КонецПериода",       Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСРеализация0Обороты.Организация,
	|	НДСРеализация0Обороты.СчетФактура,
	|	НДСРеализация0Обороты.Состояние,
	|	НДСРеализация0Обороты.ВидЦенности,
	|	НДСРеализация0Обороты.СтавкаНДС,
	|	НДСРеализация0Обороты.Покупатель,
	|	ВЫБОР
	|		КОГДА НДСРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСРеализация0Обороты.СуммаБезНДСПриход)
	|		КОГДА НДСРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСРеализация0Обороты.СуммаБезНДСПриход - НДСРеализация0Обороты.СуммаБезНДСРасход)
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА НДСРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСРеализация0Обороты.НДСПриход)
	|		КОГДА НДСРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСРеализация0Обороты.НДСПриход - НДСРеализация0Обороты.НДСРасход)
	|	КОНЕЦ КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Обороты(
	|		,
	|		&КонецПериода,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		    И СтавкаНДС В (&СписокСтавкиНДС)) КАК НДСРеализация0Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРеализация0Обороты.Организация,
	|	НДСРеализация0Обороты.СчетФактура,
	|	НДСРеализация0Обороты.Состояние,
	|	НДСРеализация0Обороты.ВидЦенности,
	|	НДСРеализация0Обороты.СтавкаНДС,
	|	НДСРеализация0Обороты.Покупатель";

	ТаблицаЗаписей_НДСРеализация0 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Счетчик = ТаблицаЗаписей_НДСРеализация0.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		СтрокаТаблицы = ТаблицаЗаписей_НДСРеализация0[Счетчик];
		Если (СтрокаТаблицы.СуммаБезНДС = 0) и (СтрокаТаблицы.НДС = 0) Тогда 
			ТаблицаЗаписей_НДСРеализация0.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Распределение = Новый Структура("СуммаБезНДС, НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС");
	Дополнение 	  = Новый Структура("ВидРегламентнойОперации", Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах);
	
	ТаблицаЗаписей_НДСРеализация0 = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц, ТаблицаЗаписей_НДСРеализация0, Распределение, Отбор, , Дополнение);
	
	 //Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	 //на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСРеализация0 Цикл
		Если СтрокаРеестра.СуммаБезНДС=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСРеализация0.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСРеализация0.Количество()>0 Тогда
		Движения = новый Структура();
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСРеализация0",СтруктураШапкиДокумента.Ссылка);

		Движения.НДСРеализация0.мПериод          = ?(СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период),СтруктураШапкиДокумента.Период,?(СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты), СтруктураШапкиДокумента.ДатаОплаты, СтруктураШапкиДокумента.Дата));
		Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаЗаписей_НДСРеализация0;
		Движения.НДСРеализация0.ВыполнитьПриход();
		Движения.НДСРеализация0.Записать(Ложь);
	КонецЕсли; 

КонецПроцедуры  // ОтразитьСуммовыеРазницыПоРеализации0_НДСНачисленный()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Реализация".
// Цель работы процедуры - сформировать дерево остатков по регистрам НДС (приобретение), содержащее
// суммы зарегистрированных событий, для последующей их корректировки
//
Функция ПолучитьДанныеПоКорректируемымСчетамФактурам_Реализация(СтруктураШапкиДокумента, СчетаФактурыПолученные, КорректировкаДокумента) 
	
	Если КорректировкаДокумента Тогда
		КонецПериода = Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Включая);
	Иначе
		КонецПериода = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	СчетаФактурыПолученные);
	Запрос.УстановитьПараметр("КонецПериода",       КонецПериода);
	Запрос.УстановитьПараметр("Предположение0",     Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НДСНачисленныйОбороты.Организация,
	|	НДСНачисленныйОбороты.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОбороты.ВидЦенности,
	|	НДСНачисленныйОбороты.СтавкаНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСНачисленныйОбороты.НДСПриход, 0)) КАК Базис_СНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.СуммаБезНДСПриход, 0)) КАК Базис_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.НДСПриход, 0)) КАК Базис_НДС,
	|	СУММА(НДСРеализация0.Реализация0_БезНДС) КАК Реализация0_БезНДС,
	|	СУММА(НДСРеализация0.Реализация0_НДС) КАК Реализация0_НДС,
	|	НДСНачисленныйОбороты.Покупатель,
	|	НДСНачисленныйОбороты.ВидНачисления,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСРеализация0.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЕстьРеализация0
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Обороты(
	|		,
	|		&КонецПериода,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		) КАК НДСНачисленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ВЫБОР
	|					КОГДА НДСРеализация0Обороты.Состояние = &Предположение0
	|						ТОГДА ЕСТЬNULL(НДСРеализация0Обороты.СуммаБезНДСОборот, 0)
	|					ИНАЧЕ ЕСТЬNULL(НДСРеализация0Обороты.СуммаБезНДСПриход, 0)
	|				КОНЕЦ) КАК Реализация0_БезНДС,
	|			СУММА(ВЫБОР
	|					КОГДА НДСРеализация0Обороты.Состояние = &Предположение0
	|						ТОГДА ЕСТЬNULL(НДСРеализация0Обороты.НДСОборот, 0)
	|					ИНАЧЕ ЕСТЬNULL(НДСРеализация0Обороты.НДСПриход, 0)
	|				КОНЕЦ) КАК Реализация0_НДС,
	|			НДСРеализация0Обороты.СчетФактура КАК СчетФактура,
	|			НДСРеализация0Обороты.ВидЦенности КАК ВидЦенности,
	|			НДСРеализация0Обороты.Покупатель КАК Покупатель,
	|			НДСРеализация0Обороты.СтавкаНДС КАК СтавкаНДС
	|		ИЗ
	|			РегистрНакопления.НДСРеализация0.Обороты(
	|				,
	|				&КонецПериода,
	|				Период,
	|				Организация = &Организация
	|				    И СчетФактура В (&СписокСчетовФактур)) КАК НДСРеализация0Обороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НДСРеализация0Обороты.СчетФактура,
	|			НДСРеализация0Обороты.ВидЦенности,
	|			НДСРеализация0Обороты.Покупатель,
	|			НДСРеализация0Обороты.СтавкаНДС) КАК НДСРеализация0
	|		ПО НДСНачисленныйОбороты.СчетФактура = НДСРеализация0.СчетФактура
	|			И НДСНачисленныйОбороты.ВидЦенности = НДСРеализация0.ВидЦенности
	|			И НДСНачисленныйОбороты.Покупатель = НДСРеализация0.Покупатель
	|			И НДСНачисленныйОбороты.СтавкаНДС = НДСРеализация0.СтавкаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСНачисленныйОбороты.Организация,
	|	НДСНачисленныйОбороты.СчетФактура,
	|	НДСНачисленныйОбороты.ВидЦенности,
	|	НДСНачисленныйОбороты.СтавкаНДС,
	|	НДСНачисленныйОбороты.Покупатель,
	|	НДСНачисленныйОбороты.ВидНачисления
	|";

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);

КонецФункции // ПолучитьДанныеПоКорректируемымСчетамФактурам_Реализация()

Процедура СформироватьДвиженияПоРегиструНДСРеализация0_КурсовыеРазницы(СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, Отказ) Экспорт
	
	ТаблицаВзаиморасчетовТекущийДокумент = ТаблицаВзаиморасчетов.Скопировать(Новый Структура("СчетФактура", СтруктураШапкиДокумента.Ссылка));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаВзаиморасчетов", ТаблицаВзаиморасчетов);
	Запрос.УстановитьПараметр("ТекущийДокумент", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаВзаиморасчетов.Контрагент,
	               |	ТаблицаВзаиморасчетов.СчетФактура КАК СчетФактура
	               |ПОМЕСТИТЬ ТаблицаВзаиморасчетов
	               |ИЗ
	               |	&ТаблицаВзаиморасчетов КАК ТаблицаВзаиморасчетов
	               |ГДЕ
	               |	ТаблицаВзаиморасчетов.СчетФактура <> &ТекущийДокумент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НДСРеализация0Остатки.Организация,
	               |	НДСРеализация0Остатки.СчетФактура,
	               |	НДСРеализация0Остатки.ВидЦенности,
	               |	НДСРеализация0Остатки.СтавкаНДС,
	               |	НДСРеализация0Остатки.Состояние,
	               |	НДСРеализация0Остатки.Покупатель,
	               |	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток, 0) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.НДСРеализация0.Остатки(
	               |			&Дата,
	               |			Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)
	               |				И Покупатель В
	               |					(ВЫБРАТЬ
	               |						ТаблицаВзаиморасчетов.Контрагент
	               |					ИЗ
	               |						ТаблицаВзаиморасчетов)
	               |				И СчетФактура В
	               |					(ВЫБРАТЬ
	               |						ТаблицаВзаиморасчетов.СчетФактура
	               |					ИЗ
	               |						ТаблицаВзаиморасчетов)) КАК НДСРеализация0Остатки";
			 
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() И ТаблицаВзаиморасчетовТекущийДокумент.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатков = Результат.Выгрузить();                       
	ТаблицаОстатков.Колонки.Добавить("КурсоваяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	СтруктураОтбора = Новый Структура("Покупатель, СчетФактура");
	МассивСумм = Новый Массив;
	МассивРаспределения = Новый Массив;

	УдаляемыеВидыОпераций = Новый Массив;
	УдаляемыеВидыОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах);
	
	ДвиженияНДСРеализация0 = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураШапкиДокумента.Ссылка, РегистрыНакопления.НДСРеализация0, Истина);
	Если ДвиженияНДСРеализация0 = Неопределено Тогда
		// Документ не может отражать реализацию по 0%
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ДвиженияНДСРеализация0, УдаляемыеВидыОпераций);
	Если ДвиженияНДСРеализация0.Модифицированность() Тогда
		ДвиженияНДСРеализация0.Записать();
	КонецЕсли;
	
	Если Не ТаблицаВзаиморасчетовТекущийДокумент.Количество() = 0 Тогда
	// Если курсовые разницы записываются в движения текущего документа (зачет аванса при реализации), 
	// то дополним таблицу реализаций по 0% движениями самого документа.
		Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетовТекущийДокумент Цикл
			
			Для Каждого СтрокаТаблицы Из ДвиженияНДСРеализация0 Цикл
				
				Если СтрокаТаблицы.Покупатель = СтрокаВзаиморасчетов.Контрагент
					И СтрокаТаблицы.СчетФактура = СтрокаВзаиморасчетов.СчетФактура Тогда 
					
					НоваяСтрока = ТаблицаОстатков.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.Сумма = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
					
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
	ДвиженияНДСРеализация0.Очистить();
	ТаблицаДвижений_НДСРеализация0 = ДвиженияНДСРеализация0.ВыгрузитьКолонки();
		
	Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
		Если СтрокаВзаиморасчетов.КурсоваяРазница = 0 Тогда
			Продолжить;			
		КонецЕсли;
		
		СтруктураОтбора.Покупатель = СтрокаВзаиморасчетов.Контрагент;
		СтруктураОтбора.СчетФактура = СтрокаВзаиморасчетов.СчетФактура;
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		
		СуммаРеализации0 = 0;
		
		МассивСумм.Очистить();
		РублеваяСумма = СтрокаВзаиморасчетов.РублеваяСумма;
		Для Каждого СтрокаОстатков Из СтрокиОстатков Цикл
			СуммаРасчетов = Мин(СтрокаОстатков.Сумма, РублеваяСумма);
			СуммаРеализации0 = СуммаРеализации0 + СуммаРасчетов;
			СтрокаОстатков.Сумма = СтрокаОстатков.Сумма - СуммаРасчетов;
			РублеваяСумма = РублеваяСумма - СуммаРасчетов;
			МассивСумм.Добавить(СуммаРасчетов);
		КонецЦикла;
		Если РублеваяСумма <> 0 Тогда
			МассивРаспределения.Очистить();
			МассивРаспределения.Добавить(СуммаРеализации0);
			МассивРаспределения.Добавить(РублеваяСумма);
			КурсоваяРазница = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаВзаиморасчетов.КурсоваяРазница, МассивРаспределения)[0];
		Иначе
			КурсоваяРазница = СтрокаВзаиморасчетов.КурсоваяРазница;
		КонецЕсли;
		
		Если СуммаРеализации0 = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивРаспределения = ttk_ОбщегоНазначения.РаспределитьПропорционально(КурсоваяРазница, МассивСумм);
		
		Для К = 0 По МассивРаспределения.Количество() - 1 Цикл
			
			СтрокаОстатков = СтрокиОстатков[К];
			НовоеДвижение = ТаблицаДвижений_НДСРеализация0.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаОстатков);
			НовоеДвижение.КурсоваяРазница = МассивРаспределения[К];
			НовоеДвижение.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах;
			НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСРеализация0.Количество() > 0 Тогда

		ДвиженияНДСРеализация0.мПериод          = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
		ДвиженияНДСРеализация0.ДобавитьДвижение();
		ДвиженияНДСРеализация0.Записать(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////
//  ПО НДС ПРЕДЪЯВЛЕННОМУ ПОСТАВЩИКАМИ

// Процедура вызывается из модуля управления взаиморасчетами в тех случаях,
// когда взаиморасчеты с поставщиками ведутся в У.Е. с использованием рублевого 
// покрытия. По переданной таблице суммовых разниц формируются движения 
// корректирующие суммы событий, отраженных в регистре "НДСПокупки".
// Процедура вызывается из модуля управления взаиморасчетами в тех случаях,
// когда взаиморасчеты с поставщиками ведутся в У.Е. с использованием рублевого 
// покрытия. По переданной таблице суммовых разниц формируются движения 
// корректирующие суммы событий, отраженных в регистре "НДСПокупки".
Процедура КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураШапкиДокумента, ИсходнаяТаблицаСуммовыхРазниц, КорректировкаДокумента = Ложь, ЗачетАванса = Ложь, КорректироватьПоРасчетамНА = Ложь, Проводки = Неопределено) Экспорт

	Если ИсходнаяТаблицаСуммовыхРазниц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Возможно во входящей таблице нет ненулевых разниц
	Если ИсходнаяТаблицаСуммовыхРазниц.Итог("СуммоваяРазница") = 0 Тогда
		// Возможно Итог() сложил положительные и отрицательные разницы, детализируем проверку
		СтруктураПоискаНулевыхРазниц = Новый Структура("СуммоваяРазница", 0);
		МассивНайденныхНулевыхРазниц = ИсходнаяТаблицаСуммовыхРазниц.НайтиСтроки(СтруктураПоискаНулевыхРазниц);
		
		// Если количество нулевых разниц равно количеству строк таблицы, то выходим из процедуры - обрабатывать нечего
		Если МассивНайденныхНулевыхРазниц.Количество() = ИсходнаяТаблицаСуммовыхРазниц.Количество() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("Период") 
		И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
		ДатаДвижений = СтруктураШапкиДокумента.Период;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ДатаОплаты") 
		И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		ДатаДвижений = СтруктураШапкиДокумента.ДатаОплаты;
	Иначе
		ДатаДвижений = СтруктураШапкиДокумента.Дата;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		Или Не СтруктураШапкиДокумента.Свойство("НДСНалоговыйПериод") 
		Или Не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС")
		Или Не СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС")
		Тогда
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН",(ЗначениеЗаполнено(УчетнаяПолитика) и  (УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная)));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("НДСНалоговыйПериод") тогда
			СтруктураШапкиДокумента.Вставить("НДСНалоговыйПериод",?(Не ЗначениеЗаполнено(УчетнаяПолитика), ?(СтруктураШапкиДокумента.Дата < '20080101', Перечисления.Периодичность.Месяц, Перечисления.Периодичность.Квартал), УчетнаяПолитика.НДСНалоговыйПериод));
		КонецЕсли;
		
		Если Не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС", ?(Не ЗначениеЗаполнено(УчетнаяПолитика), Ложь, УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС", ?(Не ЗначениеЗаполнено(УчетнаяПолитика), Ложь, УчетнаяПолитика.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС));
		КонецЕсли;
	КонецЕсли;
	
	Если ДатаДвижений >= '20111001'
		И НЕ ЗачетАванса 
		И НЕ КорректироватьПоРасчетамНА Тогда
		// Начиная с 01.10.2011 при расчетах в у.е. налоговая база по НДС, определенная на дату приобретения, 
		// при последующей оплате по другому курсу не корректируется
		Возврат;
	КонецЕсли;
	
	УчитыватьПоложительныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС Или КорректироватьПоРасчетамНА;
	УчитыватьОтрицательныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС Или КорректироватьПоРасчетамНА;
	
	ВыделятьНДСпоСР = (УчитыватьПоложительныеРазницыДляНДС или УчитыватьОтрицательныеРазницыДляНДС Или ЗачетАванса);
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если Не ВыделятьНДСпоСР Тогда
		// Суммовые разницы не нужно учитывать для НДС по приобретеннию
		Возврат;
	КонецЕсли;
	
	РеестрСчетовФактур = ПолучитьДанныеДляНДСПоСуммовымРазницам_Приобретение(СтруктураШапкиДокумента, ИсходнаяТаблицаСуммовыхРазниц, КорректировкаДокумента, ЗачетАванса, КорректироватьПоРасчетамНА);
	
	Если Не ЗачетАванса Тогда
		
		СтрокиКУдалению = Новый Массив();
		
		Для Каждого СтрокаРеестра Из РеестрСчетовФактур Цикл
			
			Если (СтрокаРеестра.СуммоваяРазница > 0 и УчитыватьПоложительныеРазницыДляНДС) 
				Или (СтрокаРеестра.СуммоваяРазница<0 и УчитыватьОтрицательныеРазницыДляНДС) Тогда
				//Строка обрабатывается
			Иначе
				СтрокиКУдалению.Добавить(СтрокаРеестра);
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
			РеестрСчетовФактур.Удалить(СтрокаТаблицы);
		КонецЦикла; 
		
	КонецЕсли;
	
	Если РеестрСчетовФактур.Количество()=0 Тогда
	    Возврат;
	КонецЕсли;
	
	СсылкаНаДокумент = СтруктураШапкиДокумента.Ссылка;
	Движения = новый Структура();
	
	УдаляемыеВидыОпераций = Новый Массив;
	УдаляемыеВидыОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах);
	
	Если КорректироватьПоРасчетамНА Тогда
		//Отразить проводки при исполнении обязанностей налогового агента
		Если Проводки = Неопределено Тогда
			Проводки = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СсылкаНаДокумент, РегистрыБухгалтерии.Хозрасчетный, Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(Проводки, УдаляемыеВидыОпераций);
			Если Проводки.Модифицированность() Тогда
				Проводки.Записать();
			КонецЕсли;
			СформироватьПроводкиПоРазницамНалоговыйАгент(СтруктураШапкиДокумента, РеестрСчетовФактур, Проводки);
			Проводки = Неопределено; // Набор движений не должен передаваться обратно из процедуры.
		Иначе
			СформироватьПроводкиПоРазницамНалоговыйАгент(СтруктураШапкиДокумента, РеестрСчетовФактур, Проводки);
		КонецЕсли;
	КонецЕсли;
	
	НДСПредъявленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СсылкаНаДокумент, РегистрыНакопления.НДСПредъявленный, Истина);
	Если НДСПредъявленный = Неопределено Тогда
		// Документ не может отражать проводиться по регистру "НДС предъявленный"
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(НДСПредъявленный, УдаляемыеВидыОпераций);
	Если НДСПредъявленный.Модифицированность() Тогда
		НДСПредъявленный.Записать();
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСПредъявленный", СсылкаНаДокумент);

	// Отражение сумовой разницы в регистре НДСПредъявленный
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("СуммаБезНДС","СР_БезНДС");
	СоответствиеКолонок.Вставить("НДС","СР_НДС");
								 
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСПредъявленный, СоответствиеКолонок);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РеестрСчетовФактур,ТаблицаДвижений_НДСПредъявленный);
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком,"Событие");
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах,"ВидРегламентнойОперации");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСПредъявленный, СоответствиеКолонок,Истина);
	
	Если (РеестрСчетовФактур.Итог("ЕстьВключениеВСтоимость")>0)
		или (РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0)
		или (РеестрСчетовФактур.Итог("ЕстьОСНМА")>0)
		или (РеестрСчетовФактур.Итог("ЕстьРеализация0")>0)
		или (РеестрСчетовФактур.Итог("ЕстьКосвенныеРасходы")>0)
		или (РеестрСчетовФактур.Итог("ЕстьНезавершенноеПроизводство")>0)
		тогда
		
		Построитель_РеестрСчетовФактур = новый ПостроительЗапроса();
		ОписаниеИсточника_РеестрСчетовФактур = новый ОписаниеИсточникаДанных(РеестрСчетовФактур);
		
		Построитель_РеестрСчетовФактур.ИсточникДанных = ОписаниеИсточника_РеестрСчетовФактур;
	КонецЕсли;
	
	// Если есть включение НДС в стоимость, необходимо пропорционально уменьшить 
	// сумму НДС предъявленного и зафиксировать включение НДС в стоимость в специальном регистре
	Если РеестрСчетовФактур.Итог("ЕстьВключениеВСтоимость")>0 Тогда
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСВключенныйВСтоимость",СсылкаНаДокумент);

		ТаблицаДвижений_НДСВключенныйВСтоимость = Движения.НДСВключенныйВСтоимость.ВыгрузитьКолонки();

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьВключениеВСтоимость");
		ОтборПостроитель.ЕстьВключениеВСтоимость.Значение = 1;
		ОтборПостроитель.ЕстьВключениеВСтоимость.Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСВключенныйВСтоимость = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель.ЕстьВключениеВСтоимость.Использование = Ложь;
		Корректировки_НДСВключенныйВСтоимость.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Корректировки_НДСВключенныйВСтоимость.Колонки.Добавить("НДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСВключенныйВСтоимость Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.ВключенВСтоимость_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
		    	СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.ВключенВСтоимость_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Корректировки_НДСВключенныйВСтоимость,ТаблицаДвижений_НДСВключенныйВСтоимость);
		
		// Внесем корректирующие записи в регистр "НДС предъявленный"
		ТаблицаДвижений_НДСВключенныйВСтоимость.Колонки.Добавить("ВидДвижения");
		ТаблицаДвижений_НДСВключенныйВСтоимость.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
		ТаблицаДвижений_НДСВключенныйВСтоимость.Колонки.Добавить("Событие");
		ТаблицаДвижений_НДСВключенныйВСтоимость.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,"Событие");
		ТаблицаДвижений_НДСВключенныйВСтоимость.ЗаполнитьЗначения(Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах,"ВидРегламентнойОперации");

		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвижений_НДСВключенныйВСтоимость,ТаблицаДвижений_НДСПредъявленный);
		
		ТаблицаДвижений_НДСВключенныйВСтоимость.Колонки.Удалить("ВидДвижения");
		ТаблицаДвижений_НДСВключенныйВСтоимость.Колонки.Удалить("Событие");
		
		Движения.НДСВключенныйВСтоимость.мПериод          = ДатаДвижений;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();
		Движения.НДСВключенныйВСтоимость.Записать(Ложь);

	КонецЕсли; //РеестрСчетовФактур.Итог("ЕстьВключениеВСтоимость")>0 Тогда

	// Далее корректировка регистра НДСПредъявленный не планируется
	// Заполним набор записей регистра полученным результатом
	Движения.НДСПредъявленный.мПериод          = ДатаДвижений;
	Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения.НДСПредъявленный.ДобавитьДвижение();
	Движения.НДСПредъявленный.Записать(Ложь);
	
	// Если есть остатки в регистре косвенных расходов, необходимо пропорционально отразить 
	// там же и суммовую разницу
	Если РеестрСчетовФактур.Итог("ЕстьКосвенныеРасходы")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьКосвенныеРасходы");
		ОтборПостроитель["ЕстьКосвенныеРасходы"].Значение = 1;
		ОтборПостроитель["ЕстьКосвенныеРасходы"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСКосвенныеРасходы = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьКосвенныеРасходы"].Использование = Ложь;
		Корректировки_НДСКосвенныеРасходы.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Корректировки_НДСКосвенныеРасходы.Колонки.Добавить("НДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСКосвенныеРасходы Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.Косвенные_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Косвенные_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСКосвенныеРасходы Цикл
			Если СтрокаРеестра.СуммаБезНДС=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСКосвенныеРасходы.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСКосвенныеРасходы.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","СуммаБезНДС,НДС");
		
		ОтразитьСуммовыеРазницыПоКосвеннымРасходам(СтруктураШапкиДокумента,Корректировки_НДСКосвенныеРасходы,СтруктураШапкиДокумента.НДСНалоговыйПериод);
		
	КонецЕсли; //РеестрСчетовФактур.Итог("ЕстьКосвенныеРасходы")>0 Тогда
	
	// Если есть остатки в регистре незавершенного производства, необходимо пропорционально отразить 
	// там же и суммовую разницу.
	Если РеестрСчетовФактур.Итог("ЕстьНезавершенноеПроизводство")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьНезавершенноеПроизводство");
		ОтборПостроитель["ЕстьНезавершенноеПроизводство"].Значение = 1;
		ОтборПостроитель["ЕстьНезавершенноеПроизводство"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСНезавершенноеПроизводство = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьНезавершенноеПроизводство"].Использование = Ложь;
		Корректировки_НДСНезавершенноеПроизводство.Колонки.Добавить("Стоимость",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Корректировки_НДСНезавершенноеПроизводство.Колонки.Добавить("НДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСНезавершенноеПроизводство Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.Стоимость = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.Производство_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Производство_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСНезавершенноеПроизводство Цикл
			Если СтрокаРеестра.Стоимость=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСНезавершенноеПроизводство.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСНезавершенноеПроизводство.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","Стоимость,НДС");
		
		ОтразитьСуммовыеРазницыПоНезавершенномуПроизводству(СтруктураШапкиДокумента,Корректировки_НДСНезавершенноеПроизводство, СтруктураШапкиДокумента.НДСНалоговыйПериод);
		
	КонецЕсли; // Если РеестрСчетовФактур.Итог("ЕстьНезавершенноеПроизводство")>0 Тогда
	
	// Если есть остатки в регистре ОС (НМА), необходимо пропорционально отразить 
	// там же и суммовую разницу
	Если РеестрСчетовФактур.Итог("ЕстьОСНМА")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьОСНМА");
		ОтборПостроитель["ЕстьОСНМА"].Значение = 1;
		ОтборПостроитель["ЕстьОСНМА"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСпоОСиНМА = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьОСНМА"].Использование = Ложь;
		Корректировки_НДСпоОСиНМА.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Корректировки_НДСпоОСиНМА.Колонки.Добавить("НДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСпоОСиНМА Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.ОС_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.ОС_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСпоОСиНМА Цикл
			Если СтрокаРеестра.СуммаБезНДС=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСпоОСиНМА.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСпоОСиНМА.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","СуммаБезНДС,НДС");
		
		ОтразитьСуммовыеРазницыПоОСНМА(СтруктураШапкиДокумента,Корректировки_НДСпоОСиНМА, КорректировкаДокумента);
		
	КонецЕсли; //Если РеестрСчетовФактур.Итог("ЕстьОСНМА")>0 Тогда

	// Если есть остатки в регистре партий, необходимо пропорционально отразить 
	// там же и суммовую разницу
	Если РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьОстаткиПоПартиям");
		ОтборПостроитель["ЕстьОстаткиПоПартиям"].Значение = 1;
		ОтборПостроитель["ЕстьОстаткиПоПартиям"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСПартииТоваров = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьОстаткиПоПартиям"].Использование = Ложь;
		Корректировки_НДСПартииТоваров.Колонки.Добавить("Стоимость",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Корректировки_НДСПартииТоваров.Колонки.Добавить("НДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		Для Каждого СтрокаКорректировки Из Корректировки_НДСПартииТоваров Цикл
			
			Если Не КорректироватьПоРасчетамНА Тогда
			
				Если Не СтрокаКорректировки.Базис_СНДС = 0 Тогда
					СтрокаКорректировки.Стоимость = Окр(СтрокаКорректировки.СуммоваяРазница*СтрокаКорректировки.Партии_СНДС/СтрокаКорректировки.Базис_СНДС,2);
				КонецЕсли; 
				Если Не СтрокаКорректировки.Базис_НДС = 0 Тогда
					СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Партии_НДС/СтрокаКорректировки.Базис_НДС,2);
				КонецЕсли; 
				
			Иначе
				
				Если Не СтрокаКорректировки.Базис_СНДС = 0 Тогда
					СтрокаКорректировки.Стоимость = Окр(СтрокаКорректировки.СуммоваяРазница*СтрокаКорректировки.Партии_СНДС/СтрокаКорректировки.Базис_СНДС,2);
				КонецЕсли; 
				Если Не СтрокаКорректировки.Базис_НДС = 0 Тогда
					СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Партии_НДС/СтрокаКорректировки.Базис_НДС,2);
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСПартииТоваров Цикл
			Если СтрокаРеестра.Стоимость=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСПартииТоваров.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСПартииТоваров.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","Стоимость,НДС");
		
		ОтразитьСуммовыеРазницыПоПартиям(СтруктураШапкиДокумента,Корректировки_НДСПартииТоваров, КорректировкаДокумента);
		
	КонецЕсли; //Если РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0 Тогда
	
	// Если были обороты по предположению 0%, необходимо пропорционально отразить 
	// там же и суммовую разницу
	Если РеестрСчетовФактур.Итог("ЕстьРеализация0")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьРеализация0");
		ОтборПостроитель["ЕстьРеализация0"].Значение = 1;
		ОтборПостроитель["ЕстьРеализация0"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСПредъявленныйРеализация0 = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьРеализация0"].Использование = Ложь;
		Корректировки_НДСПредъявленныйРеализация0.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Корректировки_НДСПредъявленныйРеализация0.Колонки.Добавить("НДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСПредъявленныйРеализация0 Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.Реализация0_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Реализация0_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСПредъявленныйРеализация0 Цикл
			Если СтрокаРеестра.СуммаБезНДС=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСПредъявленныйРеализация0.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСПредъявленныйРеализация0.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","СуммаБезНДС,НДС");
		
		ОтразитьСуммовыеРазницыПоРеализации0_НДСПредъявленный(СтруктураШапкиДокумента,Корректировки_НДСПредъявленныйРеализация0);
		
	КонецЕсли; //Если РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0 Тогда
	
КонецПроцедуры // КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение()

Функция ПолучитьДанныеДляНДСПоСуммовымРазницам_Приобретение(СтруктураШапкиДокумента, ИсходнаяТаблицаСуммовыхРазниц, КорректировкаДокумента, ЗачетАванса, КорректироватьПоРасчетамНА)
	
	КолонкаСчетФактура = ?(ИсходнаяТаблицаСуммовыхРазниц.Колонки.Найти("СчетФактура") <> Неопределено, "СчетФактура", "Документ");
		
	// формируем дерево счетов-фактур по которым нужно отразить суммовые разницы
	СчетаФактурыПолученные = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ИсходнаяТаблицаСуммовыхРазниц.ВыгрузитьКолонку(КолонкаСчетФактура), Истина);

	РеестрСчетовФактур = ПолучитьДанныеПоКорректируемымСчетамФактурам_Приобретение(СтруктураШапкиДокумента, СчетаФактурыПолученные, КорректировкаДокумента);
	
	СвернутаяТаблицаСФ = ИсходнаяТаблицаСуммовыхРазниц.Скопировать();
	СвернутаяТаблицаСФ.Свернуть(КолонкаСчетФактура, "СуммоваяРазница");
	
	Для Каждого СчетФактура Из СвернутаяТаблицаСФ Цикл
		Если РеестрСчетовФактур.Количество() = 0 Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не отражена суммовая разница в размере "+Формат(СчетФактура.СуммоваяРазница, "ЧЦ=15; ЧДЦ=2")  +" в регистрах НДС по документу <"+Строка(СчетФактура[КолонкаСчетФактура])+">");
		ИначеЕсли РеестрСчетовФактур.НайтиСтроки(Новый Структура("СчетФактура", СчетФактура[КолонкаСчетФактура])).Количество() = 0 
			И СчетФактура.СуммоваяРазница <> 0 Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не отражена суммовая разница в размере "+Формат(СчетФактура.СуммоваяРазница, "ЧЦ=15; ЧДЦ=2")  +" в регистрах НДС по документу <"+Строка(СчетФактура[КолонкаСчетФактура])+">");
		КонецЕсли;
	КонецЦикла;
	
	Если РеестрСчетовФактур.Количество() <> 0 Тогда
	
		//Отразить распределение в таблице суммовых разниц
		РеестрСчетовФактур.Колонки.Добавить("СуммоваяРазница",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		РеестрСчетовФактур.Колонки.Добавить("СР_БезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		РеестрСчетовФактур.Колонки.Добавить("СР_НДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		Если Не КорректироватьПоРасчетамНА Тогда
			РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_СНДС"),"СуммоваяРазница");
		Иначе
			РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_БезНДС"),"СуммоваяРазница");
		КонецЕсли;

		Распределение = Новый Структура("СуммоваяРазница","СуммоваяРазница");
		Отбор         = Новый Структура("СчетФактура", КолонкаСчетФактура);

		РеестрСчетовФактур = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ИсходнаяТаблицаСуммовыхРазниц,РеестрСчетовФактур,Распределение,Отбор); 

		СтрокиКУдалению = новый массив();
		
		// Разделим суммовую разницу на сумму без НДС и сумму с НДС
		Для каждого СтрокаРеестра Из РеестрСчетовФактур Цикл
			Если СтрокаРеестра.СуммоваяРазница = 0 
				Или СтрокаРеестра.Базис_СНДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				Продолжить;
			КонецЕсли; 
			Если Не КорректироватьПоРасчетамНА Тогда
				СтрокаРеестра.СР_НДС = Окр(СтрокаРеестра.СуммоваяРазница*СтрокаРеестра.Базис_НДС/СтрокаРеестра.Базис_СНДС,2);
				СтрокаРеестра.СР_БезНДС = СтрокаРеестра.СуммоваяРазница - СтрокаРеестра.СР_НДС;
			Иначе
				СтрокаРеестра.СР_БезНДС = СтрокаРеестра.СуммоваяРазница;
				СтрокаРеестра.СР_НДС = УчетНДС.РассчитатьСуммуНДС(СтрокаРеестра.СР_БезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаРеестра.СтавкаНДС));
			КонецЕсли;
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
		// на которые суммовая разница не относится
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				РеестрСчетовФактур.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		// В исходную таблицу требуется добавить колонку НДС_НУ с суммой НДС по суммовой разнице для целей налогового учета
		ИсходнаяТаблицаСуммовыхРазниц.Колонки.Добавить("НДС_НУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Если РеестрСчетовФактур.Количество() <> 0 Тогда
			
			ИсходнаяТаблицаСуммовыхРазниц.ЗагрузитьКолонку(ИсходнаяТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СуммоваяРазница"), "НДС_НУ");
		
			Распределение = Новый Структура("НДС_НУ", "СР_НДС");
			Отбор         = Новый Структура("Документ, Контрагент", "СчетФактура", "Поставщик");
			ИсходнаяТаблицаСуммовыхРазниц = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(РеестрСчетовФактур, ИсходнаяТаблицаСуммовыхРазниц,Распределение,Отбор); 
			
			// Вычислим общий НДС от исходной суммы + суммовая разница и сравним его с полученным НДС суммовой разницы
			// если есть погрешность в копейку - откорректируем её
			Для Каждого СтрокаРеестра Из РеестрСчетовФактур Цикл
				
				Если СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС ИЛИ СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОбщаяСуммаБазисаИСуммовойРазницыСНДС = СтрокаРеестра.Базис_СНДС + СтрокаРеестра.СР_БезНДС + СтрокаРеестра.СР_НДС;
				НДС = УчетНДС.РассчитатьСуммуНДС(ОбщаяСуммаБазисаИСуммовойРазницыСНДС, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаРеестра.СтавкаНДС));
				Дельта = Окр(НДС - СтрокаРеестра.Базис_НДС - СтрокаРеестра.СР_НДС, 2, 1);
				
				Если Макс(Дельта, -Дельта) = 0.01 Тогда
					СтрокаРеестра.СР_НДС = СтрокаРеестра.СР_НДС + Дельта;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеестрСчетовФактур;
	
КонецФункции

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по косвенным расходам
Процедура ОтразитьСуммовыеРазницыПоКосвеннымРасходам(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц, ПериодичностьНДС)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	
	Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
		КонецПериода = СтруктураШапкиДокумента.Период;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		КонецПериода = СтруктураШапкиДокумента.ДатаОплаты;
	Иначе
		КонецПериода = СтруктураШапкиДокумента.Дата;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецПериодаДата",   КонецПериода);
	Запрос.УстановитьПараметр("КонецПериода",       Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("НачалоПериода",      ?(ПериодичностьНДС = Перечисления.Периодичность.Квартал,НачалоКвартала(СтруктураШапкиДокумента.Дата),НачалоМесяца(СтруктураШапкиДокумента.Дата)));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСКосвенныеРасходыОстатки.Организация,
	|	НДСКосвенныеРасходыОстатки.СчетФактура,
	|	НДСКосвенныеРасходыОстатки.ВидЦенности,
	|	НДСКосвенныеРасходыОстатки.СтавкаНДС,
	|	НДСКосвенныеРасходыОстатки.СчетУчетаНДС,
	|	НДСКосвенныеРасходыОстатки.НДСВключенВСтоимость,
	|	НДСКосвенныеРасходы.СуммаБезНДС,
	|	НДСКосвенныеРасходы.НДС,
	|	НДСКосвенныеРасходы.СтатьяЗатрат,
	|	НДСКосвенныеРасходы.СчетЗатрат,
	|	НДСКосвенныеРасходы.Субконто1,
	|	НДСКосвенныеРасходы.Субконто2,
	|	НДСКосвенныеРасходы.Субконто3,
	|	НДСКосвенныеРасходы.ОтражатьВНалоговомУчете,
	|	НДСКосвенныеРасходы.СчетЗатратНУ,
	|	НДСКосвенныеРасходы.СубконтоНУ1,
	|	НДСКосвенныеРасходы.СубконтоНУ2,
	|	НДСКосвенныеРасходы.СубконтоНУ3
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		    И СтавкаНДС В (&СписокСтавкиНДС)
	|		    И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСКосвенныеРасходыОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСКосвенныеРасходы КАК НДСКосвенныеРасходы
	|		ПО НДСКосвенныеРасходыОстатки.Организация = НДСКосвенныеРасходы.Организация
	|			И НДСКосвенныеРасходыОстатки.СчетФактура = НДСКосвенныеРасходы.СчетФактура
	|			И НДСКосвенныеРасходыОстатки.ВидЦенности = НДСКосвенныеРасходы.ВидЦенности
	|			И НДСКосвенныеРасходыОстатки.СтавкаНДС = НДСКосвенныеРасходы.СтавкаНДС
	|			И НДСКосвенныеРасходыОстатки.СчетУчетаНДС = НДСКосвенныеРасходы.СчетУчетаНДС
	|			И НДСКосвенныеРасходыОстатки.НДСВключенВСтоимость = НДСКосвенныеРасходы.НДСВключенВСтоимость
	|			И (НДСКосвенныеРасходы.Период >= &НачалоПериода)
	|			И (НДСКосвенныеРасходы.Период <= &КонецПериодаДата)
	|			И НДСКосвенныеРасходыОстатки.НДСВключенВСтоимость = НДСКосвенныеРасходы.НДСВключенВСтоимость
	|ГДЕ
	|	(НЕ(ЕСТЬNULL(НДСКосвенныеРасходыОстатки.СуммаБезНДСОборот, 0) = 0
	|				И ЕСТЬNULL(НДСКосвенныеРасходыОстатки.НДСОборот, 0) = 0))";

	ТаблицаЗаписей_НДСКосвенныеРасходы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Распределение = Новый Структура("СуммаБезНДС,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	Дополнение 	  = Новый Структура("ВидРегламентнойОперации", Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах);
	
	ТаблицаЗаписей_НДСКосвенныеРасходы = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,ТаблицаЗаписей_НДСКосвенныеРасходы,Распределение,Отбор, , Дополнение);
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСКосвенныеРасходы Цикл
		Если СтрокаРеестра.СуммаБезНДС=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСКосвенныеРасходы.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСКосвенныеРасходы.Количество()>0 Тогда
		Движения = новый Структура();
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСКосвенныеРасходы",СтруктураШапкиДокумента.Ссылка);

		Движения.НДСКосвенныеРасходы.мПериод      = ?(СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период),СтруктураШапкиДокумента.Период,?(СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты), СтруктураШапкиДокумента.ДатаОплаты, СтруктураШапкиДокумента.Дата));
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаЗаписей_НДСКосвенныеРасходы;
		Движения.НДСКосвенныеРасходы.ВыполнитьПриход();
		Движения.НДСКосвенныеРасходы.Записать(Ложь);
	КонецЕсли; 

КонецПроцедуры // ОтразитьСуммовыеРазницыПоКосвеннымРасходам()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по незавершенному производству.
Процедура ОтразитьСуммовыеРазницыПоНезавершенномуПроизводству(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц, ПериодичностьНДС)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	
	Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
		КонецПериода = СтруктураШапкиДокумента.Период;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		КонецПериода = СтруктураШапкиДокумента.ДатаОплаты;
	Иначе
		КонецПериода = СтруктураШапкиДокумента.Дата;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецПериодаДата",   КонецПериода);
	Запрос.УстановитьПараметр("КонецПериода",       Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("НачалоПериода",      ?(ПериодичностьНДС = Перечисления.Периодичность.Квартал,НачалоКвартала(СтруктураШапкиДокумента.Дата),НачалоМесяца(СтруктураШапкиДокумента.Дата)));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НДСНезавершенноеПроизводствоОстатки.Подразделение,
	|	НДСНезавершенноеПроизводствоОстатки.СчетУчета,
	|	НДСНезавершенноеПроизводствоОстатки.СтатьяЗатрат,
	|	НДСНезавершенноеПроизводствоОстатки.НоменклатурнаяГруппа,
	|	НДСНезавершенноеПроизводствоОстатки.Заказ,
	|	НДСНезавершенноеПроизводствоОстатки.Затрата,
	|	НДСНезавершенноеПроизводствоОстатки.ХарактеристикаЗатраты,
	|	НДСНезавершенноеПроизводствоОстатки.СерияЗатраты,
	|	НДСНезавершенноеПроизводствоОстатки.СчетФактура,
	|	НДСНезавершенноеПроизводствоОстатки.ВидЦенности,
	|	НДСНезавершенноеПроизводствоОстатки.СтавкаНДС,
	|	НДСНезавершенноеПроизводствоОстатки.СчетУчетаНДС,
	|	НДСНезавершенноеПроизводствоОстатки.НДСВключенВСтоимость,
	|	НДСНезавершенноеПроизводство.Стоимость,
	|	НДСНезавершенноеПроизводство.НДС,
	|	НДСНезавершенноеПроизводство.КодОперации
	|ИЗ
	|	РегистрНакопления.НДСНезавершенноеПроизводство.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		Период,
	|		Подразделение.Владелец = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		    И СтавкаНДС В (&СписокСтавкиНДС)
	|		    И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСНезавершенноеПроизводствоОстатки
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрНакопления.НДСНезавершенноеПроизводство КАК НДСНезавершенноеПроизводство
	|		ПО 
	|			НДСНезавершенноеПроизводствоОстатки.Подразделение 			= НДСНезавершенноеПроизводство.Подразделение
	|			И НДСНезавершенноеПроизводствоОстатки.СчетУчета 			= НДСНезавершенноеПроизводство.СчетУчета
	|			И НДСНезавершенноеПроизводствоОстатки.СтатьяЗатрат 			= НДСНезавершенноеПроизводство.СтатьяЗатрат
	|			И НДСНезавершенноеПроизводствоОстатки.НоменклатурнаяГруппа	= НДСНезавершенноеПроизводство.НоменклатурнаяГруппа
	|			И НДСНезавершенноеПроизводствоОстатки.Заказ					= НДСНезавершенноеПроизводство.Заказ
	|			И НДСНезавершенноеПроизводствоОстатки.Затрата				= НДСНезавершенноеПроизводство.Затрата
	|			И НДСНезавершенноеПроизводствоОстатки.ХарактеристикаЗатраты	= НДСНезавершенноеПроизводство.ХарактеристикаЗатраты
	|			И НДСНезавершенноеПроизводствоОстатки.СерияЗатраты			= НДСНезавершенноеПроизводство.СерияЗатраты
	|			И НДСНезавершенноеПроизводствоОстатки.СчетФактура 			= НДСНезавершенноеПроизводство.СчетФактура
	|			И НДСНезавершенноеПроизводствоОстатки.ВидЦенности 			= НДСНезавершенноеПроизводство.ВидЦенности
	|			И НДСНезавершенноеПроизводствоОстатки.СтавкаНДС 			= НДСНезавершенноеПроизводство.СтавкаНДС
	|			И НДСНезавершенноеПроизводствоОстатки.СчетУчетаНДС 			= НДСНезавершенноеПроизводство.СчетУчетаНДС
	|			И НДСНезавершенноеПроизводствоОстатки.НДСВключенВСтоимость 	= НДСНезавершенноеПроизводство.НДСВключенВСтоимость
	|			И (НДСНезавершенноеПроизводство.Период >= &НачалоПериода)
	|			И (НДСНезавершенноеПроизводство.Период <= &КонецПериодаДата)
	|ГДЕ
	|	(НЕ(ЕСТЬNULL(НДСНезавершенноеПроизводствоОстатки.СтоимостьОборот, 0) = 0
	|				И ЕСТЬNULL(НДСНезавершенноеПроизводствоОстатки.НДСОборот, 0) = 0))";

	ТаблицаЗаписей_НДСНезавершенноеПроизводство = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Распределение = Новый Структура("Стоимость,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	Дополнение 	  = Новый Структура("ВидРегламентнойОперации", Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах);
	
	ТаблицаЗаписей_НДСНезавершенноеПроизводство = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,ТаблицаЗаписей_НДСНезавершенноеПроизводство,Распределение,Отбор, , Дополнение);
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСНезавершенноеПроизводство Цикл
		Если СтрокаРеестра.Стоимость=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСНезавершенноеПроизводство.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСНезавершенноеПроизводство.Количество()>0 Тогда
		Движения = новый Структура();
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСНезавершенноеПроизводство",СтруктураШапкиДокумента.Ссылка);

		Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
			Движения.НДСНезавершенноеПроизводство.мПериод      = СтруктураШапкиДокумента.Период;
		ИначеЕсли СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
			Движения.НДСНезавершенноеПроизводство.мПериод      = СтруктураШапкиДокумента.ДатаОплаты;
		Иначе
			Движения.НДСНезавершенноеПроизводство.мПериод      = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		
		Движения.НДСНезавершенноеПроизводство.мТаблицаДвижений = ТаблицаЗаписей_НДСНезавершенноеПроизводство;
		Движения.НДСНезавершенноеПроизводство.ВыполнитьПриход();
		Движения.НДСНезавершенноеПроизводство.Записать(Ложь);
	КонецЕсли; 

КонецПроцедуры // ОтразитьСуммовыеРазницыПоНезавершенномуПроизводству()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по ОС (НМА)
Процедура ОтразитьСуммовыеРазницыПоОСНМА(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц, КорректировкаДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	
	Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
		КонецПериода = Новый Граница(СтруктураШапкиДокумента.Период, ВидГраницы.Включая);
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		КонецПериода = Новый Граница(СтруктураШапкиДокумента.ДатаОплаты, ВидГраницы.Включая);
	Иначе
		КонецПериода = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Если КорректировкаДокумента Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НДСпоОСиНМАОстатки.Организация,
		|	НДСпоОСиНМАОстатки.СчетФактура,
		|	НДСпоОСиНМАОстатки.ВидЦенности,
		|	НДСпоОСиНМАОстатки.СтавкаНДС,
		|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
		|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
		|	НДСпоОСиНМАОстатки.Объект,
		|	НДСпоОСиНМАОстатки.Состояние,
		|	НДСпоОСиНМАОстатки.СуммаБезНДСПриход КАК СуммаБезНДС,
		|	НДСпоОСиНМАОстатки.НДСПриход КАК НДС,
		|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
		|ИЗ
		|	РегистрНакопления.НДСпоОСиНМА.Обороты(&КонецПериода, &КонецПериода, Период,
		|		Организация = &Организация
		|			И СчетФактура В (&СписокСчетовФактур)
		|			И СтавкаНДС В (&СписокСтавкиНДС)
		|			И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСпоОСиНМАОстатки
		|ГДЕ
		|	(НЕ(ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСПриход, 0) = 0
		|				И ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСПриход, 0) = 0))
		|";
		
	Иначе
	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НДСпоОСиНМАОстатки.Организация,
		|	НДСпоОСиНМАОстатки.СчетФактура,
		|	НДСпоОСиНМАОстатки.ВидЦенности,
		|	НДСпоОСиНМАОстатки.СтавкаНДС,
		|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
		|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
		|	НДСпоОСиНМАОстатки.Объект,
		|	НДСпоОСиНМАОстатки.Состояние,
		|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСпоОСиНМАОстатки.НДСОстаток КАК НДС,
		|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
		|ИЗ
		|	РегистрНакопления.НДСпоОСиНМА.Остатки(
		|		&КонецПериода,
		|		Организация = &Организация
		|			И СчетФактура В (&СписокСчетовФактур)
		|			И СтавкаНДС В (&СписокСтавкиНДС)
		|			И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСпоОСиНМАОстатки
		|ГДЕ
		|	(НЕ(ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) = 0
		|				И ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0) = 0))
		|";
		
	КонецЕсли;

	ТаблицаЗаписей_НДСпоОСиНМА = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Распределение = Новый Структура("СуммаБезНДС,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	Дополнение 	  = Новый Структура("ВидРегламентнойОперации", Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах);
	
	ТаблицаЗаписей_НДСпоОСиНМА = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,ТаблицаЗаписей_НДСпоОСиНМА,Распределение,Отбор, , Дополнение);
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСпоОСиНМА Цикл
		Если СтрокаРеестра.СуммаБезНДС=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСпоОСиНМА.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСпоОСиНМА.Количество()>0 Тогда
		Движения = новый Структура();
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСпоОСиНМА",СтруктураШапкиДокумента.Ссылка);

		Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
			Движения.НДСпоОСиНМА.мПериод      = СтруктураШапкиДокумента.Период;
		ИначеЕсли СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
			Движения.НДСпоОСиНМА.мПериод      = СтруктураШапкиДокумента.ДатаОплаты;
		Иначе
			Движения.НДСпоОСиНМА.мПериод      = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		
		Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаЗаписей_НДСпоОСиНМА;
		Движения.НДСпоОСиНМА.ВыполнитьПриход();
		Движения.НДСпоОСиНМА.Записать(Ложь);
	КонецЕсли; 

КонецПроцедуры // ОтразитьСуммовыеРазницыПоОСНМА()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по остаткам партий
Процедура ОтразитьСуммовыеРазницыПоПартиям(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц, КорректировкаДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	
	Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
		КонецПериода = Новый Граница(СтруктураШапкиДокумента.Период, ВидГраницы.Включая);
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		КонецПериода = Новый Граница(СтруктураШапкиДокумента.ДатаОплаты, ВидГраницы.Включая);
	Иначе
		КонецПериода = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Если КорректировкаДокумента Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НДСПартииТоваровОстатки.Организация,
		|	НДСПартииТоваровОстатки.СчетУчета,
		|	НДСПартииТоваровОстатки.Номенклатура,
		|	НДСПартииТоваровОстатки.ХарактеристикаНоменклатуры,
		|	НДСПартииТоваровОстатки.СерияНоменклатуры,
		|	НДСПартииТоваровОстатки.Заказ,
		|	НДСПартииТоваровОстатки.Партия,
		|	НДСПартииТоваровОстатки.Склад,
		|	НДСПартииТоваровОстатки.СчетФактура,
		|	НДСПартииТоваровОстатки.НДСВключенВСтоимость,
		|	НДСПартииТоваровОстатки.ВидЦенности,
		|	НДСПартииТоваровОстатки.СчетУчетаНДС,
		|	НДСПартииТоваровОстатки.СтавкаНДС,
		|	НДСПартииТоваровОстатки.СтоимостьПриход КАК Стоимость,
		|	НДСПартииТоваровОстатки.НДСПриход КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПартииТоваров.Обороты(&КонецПериода, &КонецПериода, Период,
		|			Организация = &Организация
		|			И СчетФактура В (&СписокСчетовФактур)
		|			И СтавкаНДС В (&СписокСтавкиНДС)
		|			И СчетУчетаНДС В (&СписокСчетаУчетаНДС)
		|		) КАК НДСПартииТоваровОстатки
		|ГДЕ
		|	(НЕ(ЕСТЬNULL(НДСПартииТоваровОстатки.СтоимостьПриход, 0) = 0
		|				И ЕСТЬNULL(НДСПартииТоваровОстатки.НДСПриход, 0) = 0))
		|";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НДСПартииТоваровОстатки.Организация,
		|	НДСПартииТоваровОстатки.СчетУчета,
		|	НДСПартииТоваровОстатки.Номенклатура,
		|	НДСПартииТоваровОстатки.ХарактеристикаНоменклатуры,
		|	НДСПартииТоваровОстатки.СерияНоменклатуры,
		|	НДСПартииТоваровОстатки.Заказ,
		|	НДСПартииТоваровОстатки.Партия,
		|	НДСПартииТоваровОстатки.Склад,
		|	НДСПартииТоваровОстатки.СчетФактура,
		|	НДСПартииТоваровОстатки.НДСВключенВСтоимость,
		|	НДСПартииТоваровОстатки.ВидЦенности,
		|	НДСПартииТоваровОстатки.СчетУчетаНДС,
		|	НДСПартииТоваровОстатки.СтавкаНДС,
		|	НДСПартииТоваровОстатки.СтоимостьОстаток КАК Стоимость,
		|	НДСПартииТоваровОстатки.НДСОстаток КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПартииТоваров.Остатки(&КонецПериода,
		|			Организация = &Организация
		|			И СчетФактура В (&СписокСчетовФактур)
		|			И СтавкаНДС В (&СписокСтавкиНДС)
		|			И СчетУчетаНДС В (&СписокСчетаУчетаНДС)
		|		) КАК НДСПартииТоваровОстатки
		|ГДЕ
		|	(НЕ(ЕСТЬNULL(НДСПартииТоваровОстатки.СтоимостьОстаток, 0) = 0
		|				И ЕСТЬNULL(НДСПартииТоваровОстатки.НДСОстаток, 0) = 0))
		|";
		
	КонецЕсли;

	ТаблицаЗаписей_НДСПартииТоваров = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Распределение = Новый Структура("Стоимость,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	Дополнение 	  = Новый Структура("ВидРегламентнойОперации", Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах);
	
	ТаблицаЗаписей_НДСПартииТоваров = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,ТаблицаЗаписей_НДСПартииТоваров,Распределение,Отбор, , Дополнение);
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСПартииТоваров Цикл
		Если СтрокаРеестра.Стоимость=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСПартииТоваров.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСПартииТоваров.Количество()>0 Тогда
		Движения = новый Структура();
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСПартииТоваров",СтруктураШапкиДокумента.Ссылка);

		Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
			Движения.НДСПартииТоваров.мПериод      = СтруктураШапкиДокумента.Период;
		ИначеЕсли СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
			Движения.НДСПартииТоваров.мПериод      = СтруктураШапкиДокумента.ДатаОплаты;
		Иначе
			Движения.НДСПартииТоваров.мПериод      = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		
		Движения.НДСПартииТоваров.мТаблицаДвижений = ТаблицаЗаписей_НДСПартииТоваров;
		Движения.НДСПартииТоваров.ВыполнитьПриход();
		Движения.НДСПартииТоваров.Записать(Ложь);
	КонецЕсли; 

КонецПроцедуры // ОтразитьСуммовыеРазницыПоПартиям()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по реализации 0%
Процедура ОтразитьСуммовыеРазницыПоРеализации0_НДСПредъявленный(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	СостоянияПредъявленный = Новый СписокЗначений;
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	Запрос.УстановитьПараметр("СостоянияПредъявленный", СостоянияПредъявленный);
	Запрос.УстановитьПараметр("СостоянияОжидание", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	
	Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
		КонецПериода = Новый Граница(СтруктураШапкиДокумента.Период, ВидГраницы.Включая);
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		КонецПериода = Новый Граница(СтруктураШапкиДокумента.ДатаОплаты, ВидГраницы.Включая);
	Иначе
		КонецПериода = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Обороты.Организация,
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.Состояние,
	|	НДСПредъявленныйРеализация0Обороты.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход - НДСПредъявленныйРеализация0Обороты.СуммаБезНДСРасход)
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход - НДСПредъявленныйРеализация0Обороты.НДСРасход)
	|	КОНЕЦ КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Обороты(
	|		,
	|		&КонецПериода,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		    И СтавкаНДС В (&СписокСтавкиНДС)
	|		    И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСПредъявленныйРеализация0Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0Обороты.Организация,
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.Состояние,
	|	НДСПредъявленныйРеализация0Обороты.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС";

	ТаблицаЗаписей_НДСПредъявленныйРеализация0 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Счетчик = ТаблицаЗаписей_НДСПредъявленныйРеализация0.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		СтрокаТаблицы = ТаблицаЗаписей_НДСПредъявленныйРеализация0[Счетчик];
		Если (СтрокаТаблицы.СуммаБезНДС = 0) и (СтрокаТаблицы.НДС = 0) Тогда 
			ТаблицаЗаписей_НДСПредъявленныйРеализация0.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Распределение = Новый Структура("СуммаБезНДС,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	Дополнение 	  = Новый Структура("ВидРегламентнойОперации", Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах);
	
	ТаблицаЗаписей_НДСПредъявленныйРеализация0 = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц, ТаблицаЗаписей_НДСПредъявленныйРеализация0, Распределение, Отбор, , Дополнение);
	
	 //Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	 //на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСПредъявленныйРеализация0 Цикл
		Если СтрокаРеестра.СуммаБезНДС=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСПредъявленныйРеализация0.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСПредъявленныйРеализация0.Количество()>0 Тогда
		Движения = новый Структура();
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСПредъявленныйРеализация0",СтруктураШапкиДокумента.Ссылка);

		Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
			Движения.НДСПредъявленныйРеализация0.мПериод      = СтруктураШапкиДокумента.Период;
		ИначеЕсли СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
			Движения.НДСПредъявленныйРеализация0.мПериод      = СтруктураШапкиДокумента.ДатаОплаты;
		Иначе
			Движения.НДСПредъявленныйРеализация0.мПериод      = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		
		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаЗаписей_НДСПредъявленныйРеализация0;
		Движения.НДСПредъявленныйРеализация0.ВыполнитьПриход();
		Движения.НДСПредъявленныйРеализация0.Записать(Ложь);
		
	КонецЕсли; 

КонецПроцедуры  // ОтразитьСуммовыеРазницыПоРеализации0_НДСПредъявленный()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - сформировать дерево остатков по регистрам НДС (приобретение), содержащее
// суммы зарегистрированных событий, для последующей их корректировки
//
Функция ПолучитьДанныеПоКорректируемымСчетамФактурам_Приобретение(СтруктураШапкиДокумента, СчетаФактурыПолученные, КорректировкаДокумента) 
	
	Если КорректировкаДокумента Тогда
		КонецПериода = Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Включая);
	Иначе
		Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
			КонецПериода = Новый Граница(СтруктураШапкиДокумента.Период, ВидГраницы.Включая);
		ИначеЕсли СтруктураШапкиДокумента.Свойство("ДатаОплаты") И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
			КонецПериода = Новый Граница(СтруктураШапкиДокумента.ДатаОплаты, ВидГраницы.Включая);
		Иначе
			КонецПериода = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	СчетаФактурыПолученные);
	Запрос.УстановитьПараметр("КонецПериода",       КонецПериода);
	Запрос.УстановитьПараметр("Предположение0",     Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.ДоговорКонтрагента,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0)) КАК Базис_СНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0)) КАК Базис_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0)) КАК Базис_НДС,
	|	СУММА(ЕСТЬNULL(НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток, 0)) КАК Косвенные_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСКосвенныеРасходыОстатки.НДСОстаток, 0)) КАК Косвенные_НДС,
	|	СУММА(ЕСТЬNULL(НДСНезавершенноеПроизводствоОстатки.СтоимостьОстаток, 0)) КАК Производство_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСНезавершенноеПроизводствоОстатки.НДСОстаток, 0)) КАК Производство_НДС,
	|	СУММА(ЕСТЬNULL(НДСПартииТоваровОстатки.СтоимостьОстаток, 0)) КАК Партии_СНДС,
	|	СУММА(ЕСТЬNULL(НДСПартииТоваровОстатки.НДСОстаток, 0)) КАК Партии_НДС,
	|	СУММА(ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0)) КАК ОС_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК ОС_НДС,
	|	СУММА(ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот, 0)) КАК ВключенВСтоимость_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0)) КАК ВключенВСтоимость_НДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход, 0)) КАК Реализация0_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Обороты.НДСПриход, 0)) КАК Реализация0_НДС,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСПредъявленныйРеализация0Обороты.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход = 0
	|							И НДСПредъявленныйРеализация0Обороты.НДСПриход = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьРеализация0,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСКосвенныеРасходыОстатки.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток = 0
	|							И НДСКосвенныеРасходыОстатки.НДСОстаток = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьКосвенныеРасходы,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСНезавершенноеПроизводствоОстатки.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСНезавершенноеПроизводствоОстатки.СтоимостьОстаток = 0
	|							И НДСНезавершенноеПроизводствоОстатки.НДСОстаток = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьНезавершенноеПроизводство,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСпоОСиНМАОстатки.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСпоОСиНМАОстатки.СуммаБезНДСОстаток = 0
	|							И НДСпоОСиНМАОстатки.НДСОстаток = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьОСНМА,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСПартииТоваровОстатки.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСПартииТоваровОстатки.СтоимостьОстаток = 0
	|							И НДСПартииТоваровОстатки.НДСОстаток = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьОстаткиПоПартиям,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСВключенныйВСтоимостьОбороты.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот = 0
	|							И НДСВключенныйВСтоимостьОбороты.НДСОборот = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьВключениеВСтоимость
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)) КАК НДСПредъявленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПартииТоваров.Остатки(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И СчетФактура В (&СписокСчетовФактур)) КАК НДСПартииТоваровОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСПартииТоваровОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСПартииТоваровОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСПартииТоваровОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСПартииТоваровОстатки.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Обороты(
	|				,
	|				&КонецПериода,
	|				Период,
	|				Организация = &Организация
	|					И СчетФактура В (&СписокСчетовФактур)
	|					И Состояние = &Предположение0) КАК НДСПредъявленныйРеализация0Обороты
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСПредъявленныйРеализация0Обороты.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСПредъявленныйРеализация0Обороты.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСПредъявленныйРеализация0Обороты.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСКосвенныеРасходы.Остатки(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И СчетФактура В (&СписокСчетовФактур)) КАК НДСКосвенныеРасходыОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСКосвенныеРасходыОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСКосвенныеРасходыОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСКосвенныеРасходыОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСКосвенныеРасходыОстатки.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСНезавершенноеПроизводство.Остатки(
	|				&КонецПериода,
	|				Подразделение.Владелец = &Организация
	|					И СчетФактура В (&СписокСчетовФактур)) КАК НДСНезавершенноеПроизводствоОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСНезавершенноеПроизводствоОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСНезавершенноеПроизводствоОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСНезавершенноеПроизводствоОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСНезавершенноеПроизводствоОстатки.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСпоОСиНМА.Остатки(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И СчетФактура В (&СписокСчетовФактур)) КАК НДСпоОСиНМАОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСпоОСиНМАОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСпоОСиНМАОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСпоОСиНМАОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСпоОСиНМАОстатки.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСВключенныйВСтоимость.Обороты(
	|				,
	|				&КонецПериода,
	|				Период,
	|				Организация = &Организация
	|					И СчетФактура В (&СписокСчетовФактур)) КАК НДСВключенныйВСтоимостьОбороты
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСВключенныйВСтоимостьОбороты.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСВключенныйВСтоимостьОбороты.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСВключенныйВСтоимостьОбороты.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСВключенныйВСтоимостьОбороты.СчетУчетаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.ДоговорКонтрагента";

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);

КонецФункции // ПолучитьДанныеПоКорректируемымСчетамФактурам_Приобретение()

//////////////////////////////////////////////////////////////////////////
// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ

Процедура ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров=неопределено, ТаблицаВыручки, Отказ, Заголовок, ВозвратБезУказанияПартии = Ложь) Экспорт
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		// Это не наши ценности (были даны в переработку), следовательно НДС по ним учитывать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Это не наши ценности (договор комиссии), следовательно НДС по ним отражать не нужно
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС  Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТаблицаВыручки.Количество() = 0 Тогда
		//Отработка по партиям НДС не требуется. 
		Возврат;
	КонецЕсли; 
	Если СтруктураПараметров = неопределено Тогда
		СтруктураПараметров = новый Структура("СтруктураСодержитНаборыЗаписей",истина);
		ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураПараметров,"НДСПартииТоваров",СтруктураШапкиДокумента.Ссылка);
		ТаблицаДвиженийПартии	= СтруктураПараметров.НДСПартииТоваров.ВыгрузитьКолонки();
	Иначе
        ТаблицаДвиженийПартии	= СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Скопировать();

	КонецЕсли;
	
	//ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Скопировать();
	
	Если ВозвратБезУказанияПартии Тогда

		ТаблицаНДСПартииСписания = ТаблицаВыручки.Скопировать();
		
		ТаблицаНДСПартииСписания.Колонки.СчетУчетаБУ.Имя = "СчетУчета";
		ТаблицаНДСПартииСписания.Колонки.Себестоимость.Имя = "Стоимость";
		ТаблицаНДСПартииСписания.Колонки.ОрганизацияДокументаПолучения.Имя = "Организация";
		ТаблицаНДСПартииСписания.Колонки.НДС.Имя = "НСД_Выручка";
		
		ТаблицаНДСПартииСписания.Колонки.Добавить("Период");
		ТаблицаНДСПартииСписания.Колонки.Добавить("НДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТаблицаНДСПартииСписания.Колонки.Добавить("Партия");
		ТаблицаНДСПартииСписания.Колонки.Добавить("СчетФактура");
		ТаблицаНДСПартииСписания.Колонки.Добавить("СкладПолучатель");
		ТаблицаНДСПартииСписания.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость", Новый ОписаниеТипов("Булево"));
		ТаблицаНДСПартииСписания.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости", Новый ОписаниеТипов("Булево"));
		ТаблицаНДСПартииСписания.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0", Новый ОписаниеТипов("Булево"));
		
		ТаблицаНДСПартииСписания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "Партия");
		ТаблицаНДСПартииСписания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
		
		ТаблицаНДСПартииСписания.ЗагрузитьКолонку(ТаблицаНДСПартииСписания.ВыгрузитьКолонку("Склад"), "СкладПолучатель");

	ИначеЕсли Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ТаблицаНДСПартииСписания = УчетНДС.ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаВыручки.Скопировать(), Отказ, Заголовок, , Истина, СтруктураПараметров);
	Иначе
		ТаблицаНДСПартииСписания = УчетНДС.ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаВыручки.Скопировать(), Отказ, Заголовок,,,СтруктураПараметров);
	КонецЕсли;				
	
	Если Не ТаблицаНДСПартииСписания.Количество() = 0 Тогда
	
		// Полученные партии могли быть реализованы с другого склада
		Для Каждого СтрокаПартии Из ТаблицаНДСПартииСписания Цикл
			Если НЕ УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаПартии.СчетУчета)  Тогда
				СтрокаПартии.Склад = Неопределено;
			КонецЕсли;
			
			// Делаем не приход, а сторно расхода по регистру.
			Если Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				СтрокаПартии.Стоимость  = - СтрокаПартии.Стоимость;
				СтрокаПартии.НДС  		= - СтрокаПартии.НДС;
				СтрокаПартии.Количество = - СтрокаПартии.Количество;
			КонецЕсли;
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////////
		// Отработка сторнирования предположения ставки 0% по НДС покупки.
		// При передачи товаров комиссионеру предположение ставки 0% не должно отрабатывать, только по фактическому отражению реализации
		Если не ВозвратБезУказанияПартии 
			и не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
			Тогда
			УчетНДС.ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);
		КонецЕсли;
		// Отработка сторнирования предположения ставки 0% по НДС покупки.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// Отработка сторнирования включения/исключения НДС из стоимости.
		Если не ВозвратБезУказанияПартии Тогда
			СторноПереквалификацииПартииПриРеализации(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, Неопределено, ТаблицаДвиженийПартии, СтруктураПараметров, Заголовок);
		
		
			Если ТаблицаДвиженийПартии.Количество()>0 Тогда
				ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
				//ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
				Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
					СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПартииТоваров", Истина);
				Иначе	
					СтруктураПараметров.НДСПартииТоваров.мПериод          = СтруктураШапкиДокумента.Дата;
					СтруктураПараметров.НДСПартииТоваров.мТаблицаДвижений = ТаблицаДвиженийПартии;
					СтруктураПараметров.НДСПартииТоваров.ДобавитьДвижение();
					СтруктураПараметров.НДСПартииТоваров.Записать(ложь);
				КонецЕсли;
				
			КонецЕсли; 
		КонецЕсли;
		// Отработка сторнирования включения/исключения НДС из стоимости.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по партиям - отразить сторно непосредственного списания.
		
		Если Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			// Склад возврата может не совпадать со складом списания
			Для каждого СтрокаПартии из ТаблицаНДСПартииСписания цикл
				Если ЗначениеЗаполнено(СтрокаПартии.СкладПолучатель) и УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаПартии.СчетУчета) тогда
					СтрокаПартии.Склад = СтрокаПартии.СкладПолучатель;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
		ТаблицаДвиженийПартии.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
		
		
		//ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
		Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
			СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПартииТоваров", Истина);
		Иначе	
			СтруктураПараметров.НДСПартииТоваров.мПериод          = СтруктураШапкиДокумента.Дата;
			СтруктураПараметров.НДСПартииТоваров.мТаблицаДвижений = ТаблицаДвиженийПартии;
			СтруктураПараметров.НДСПартииТоваров.ДобавитьДвижение();
			СтруктураПараметров.НДСПартииТоваров.Записать(ложь);
		КонецЕсли;
		
		// НДС по партиям - отразить сторно непосредственного списания.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по партиям - отразить приход от комиссионера.
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Для Каждого СтрокаПартии Из ТаблицаНДСПартииСписания Цикл 
				СтрокаПартии.СчетУчета = СтрокаПартии.КорСчетСписанияБУ;
				Если УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаПартии.СчетУчета) Тогда
					СтрокаПартии.Склад = СтрокаПартии.СкладПолучатель;
				КонецЕсли;
			КонецЦикла;                                                                                      	
			
			ТаблицаДвиженийПартии.Очистить();
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
			
			//ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
			Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
				СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПартииТоваров", Истина);
			Иначе	
				СтруктураПараметров.НДСПартииТоваров.мПериод          = СтруктураШапкиДокумента.Дата;
				СтруктураПараметров.НДСПартииТоваров.мТаблицаДвижений = ТаблицаДвиженийПартии;
				СтруктураПараметров.НДСПартииТоваров.ДобавитьДвижение();
				СтруктураПараметров.НДСПартииТоваров.Записать(ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		// НДС по партиям - отразить приход от комиссионера.
		/////////////////////////////////////////////////////////////////////////////////
		
		СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, СтруктураПараметров, Отказ)
		
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		/////////////////////////////////////////////////////////////////////////////////
		
	КонецЕсли;
			
	Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ДанныеДляОбработки = ТаблицаВыручки.Скопировать();
		
		Если СтруктураШапкиДокумента.ОтразитьВКнигеПокупок Тогда
			СформироватьДвиженияПоРегиструНДСПредъявленный_ВозвратОтПокупателя(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ);
		Иначе
			СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ, УчетНДС.СчетОтнесенияНДС(СтруктураШапкиДокумента), Истина);
			СформироватьПроводкиПоВозвратуОтПокупателя(СтруктураШапкиДокумента, ТаблицаВыручки, СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
		
	Если СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") Тогда
		Если СтруктураПараметров.НДСПартииТоваров.Количество()>0 тогда
			СтруктураПараметров.НДСПартииТоваров.Записать(Ложь);
    	КонецЕсли;
		СтруктураПараметров=неопределено;
	КонецЕсли;
КонецПроцедуры

// Отражение возврата от покупателя в книге покупок (в регистре НДСПредъявленный)
// 
Процедура СформироватьДвиженияПоРегиструНДСПредъявленный_ВозвратОтПокупателя(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, СтруктураПараметров, Отказ)

	
	Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
		ТаблицаДвижений_НДСПредъявленный	= СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный;
		ТаблицаДвижений_Хозрасчетный		= СтруктураПараметров.ДвиженияХозрасчетный;
	Иначе
		ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураПараметров,"НДСПредъявленный",СтруктураШапкиДокумента.Ссылка);
		ТаблицаДвижений_НДСПредъявленный	= СтруктураПараметров.НДСПредъявленный.ВыгрузитьКолонки();
		ТаблицаДвижений_Хозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		ТаблицаДвижений_Хозрасчетный.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	
	ИмяКолонкиСчет = ?(ТаблицаПредъявленногоНДС.Колонки.Найти("КорСчетБУ") <> Неопределено, "КорСчетБУ", "СчетРасходовБУ");
	ИмяКолонкиСубконто = ?(ТаблицаПредъявленногоНДС.Колонки.Найти("КорСубконтоСписанияБУ2") <> Неопределено, "КорСубконтоСписанияБУ2", "СубконтоБУ");
	
	Для Каждого СтрокаДок из ТаблицаПредъявленногоНДС Цикл
		
		Если СтрокаДок.СуммаБезНДС = 0 И СтрокаДок.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СчетУчетаЦенности = СтрокаДок.СчетУчетаБУ;
		Если (ТипЗнч(СчетУчетаЦенности) = Тип("ПланСчетовСсылка.Хозрасчетный")) и СчетУчетаЦенности.Забалансовый Тогда
			// Пропускаем забалансовые поступления
			Продолжить;
		КонецЕсли;

		СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.Возврат;

		СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.СчетФактура = ?(СтруктураШапкиДокумента.ПокупателемВыставляетсяСчетФактураНаВозврат Или НЕ ЗначениеЗаполнено(СтрокаДок.ДокументПартии), 
										СтруктураШапкиДокумента.Ссылка, 
										СтрокаДок.ДокументПартии);

		СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
			
		СтрокаДвижения.СчетУчетаНДС = СтруктураШапкиДокумента.СчетУчетаНДС;
		
		СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС         = СтрокаДок.НДС;
		
		СтрокаДвижения.ВидДвижения  = ВидДвиженияНакопления.Приход;

		СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		
		// Проводка в БУ
		Если СтрокаДок.НДС <> 0 Тогда
			
			Проводка = ТаблицаДвижений_Хозрасчетный.Добавить();
							
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = (-1) * СтрокаДок.НДС;
			Проводка.Содержание  = "Возврат товаров от покупателя";
			Если ЗначениеЗаполнено(СтрокаДок.ДокументПартии) Тогда
				Проводка.СписаниеПартий  = Истина;
				Проводка.НДСПродукции  = Истина;
			КонецЕсли;
							
			Если БухгалтерскийУчет.ЭтоСубсчет(СтрокаДок[ИмяКолонкиСчет], ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) тогда
				Проводка.СчетДт = СтрокаДок[ИмяКолонкиСчет];
				Если ТипЗнч(СтрокаДок[ИмяКолонкиСубконто]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаДок[ИмяКолонкиСубконто]);
				КонецЕсли;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Продажи_НДС;
			КонецЕсли;

			Если ТипЗнч(СтрокаДок[ИмяКолонкиСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаДок[ИмяКолонкиСубконто]);
			КонецЕсли;
		
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаДок.СтавкаНДС);
							
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаДвижения.СчетФактура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",  СтруктураШапкиДокумента.Контрагент, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда
		Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
			ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
			СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПредъявленный", Истина);
		Иначе	
			СтруктураПараметров.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
			СтруктураПараметров.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
			СтруктураПараметров.НДСПредъявленный.ДобавитьДвижение();
			СтруктураПараметров.НДСПредъявленный.Записать(Ложь);
			ТаблицаДвижений_Хозрасчетный.Записать(ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСПредъявленный()

// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ
//////////////////////////////////////////////////////////////////////////

Процедура СторноПереквалификацииПартииПриРеализации(СтруктураШапкиДокумента, ТаблицаСписания, ТаблицаДвиженийПокупки, ТаблицаДвиженийПартии, СтруктураПараметров, Заголовок) 

	Если ТаблицаСписания.Количество() = 0 Тогда
		//Включение НДС в стоимость по данному набору не требуется
		Возврат;
	КонецЕсли;
	
	//Фильтрование по произведенным в документе переквалификациям партий.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПартииТоваровОбороты.Организация,
	|	НДСПартииТоваровОбороты.СчетУчета,
	|	НДСПартииТоваровОбороты.Номенклатура,
	|	НДСПартииТоваровОбороты.Партия,
	|	НДСПартииТоваровОбороты.Склад,
	|	НДСПартииТоваровОбороты.СчетФактура,
	|	НДСПартииТоваровОбороты.ВидЦенности,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ИСТИНА
	|				ТОГДА НДСПартииТоваровОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ЛОЖЬ
	|				ТОГДА НДСПартииТоваровОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИсключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ИСТИНА
	|				ТОГДА НДСПартииТоваровОбороты.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтоимостьВключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ЛОЖЬ
	|				ТОГДА НДСПартииТоваровОбороты.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтоимостьИсключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ИСТИНА
	|				ТОГДА НДСПартииТоваровОбороты.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСВключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ЛОЖЬ
	|				ТОГДА НДСПартииТоваровОбороты.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСИсключен,
	|	НДСПартииТоваровОбороты.СчетУчетаНДС,
	|	НДСПартииТоваровОбороты.СтавкаНДС
	|ИЗ
	|	РегистрНакопления.НДСПартииТоваров КАК НДСПартииТоваровОбороты
	|ГДЕ
	|	НДСПартииТоваровОбороты.Регистратор в (&СписокДокументовРеализации)
	|	И НДСПартииТоваровОбороты.Номенклатура В(&Номенклатура)
	|	И НДСПартииТоваровОбороты.ВидЦенности В(&ВидыЦенностей)
	|	И НДСПартииТоваровОбороты.СчетФактура В(&СчетаФактуры)
	|	И НДСПартииТоваровОбороты.ВидДвижения = &ВидДвиженияПриход
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПартииТоваровОбороты.СчетУчета,
	|	НДСПартииТоваровОбороты.Номенклатура,
	|	НДСПартииТоваровОбороты.Склад,
	|	НДСПартииТоваровОбороты.СчетФактура,
	|	НДСПартииТоваровОбороты.ВидЦенности,
	|	НДСПартииТоваровОбороты.Организация,
	|	НДСПартииТоваровОбороты.Партия,
	|	НДСПартииТоваровОбороты.СчетУчетаНДС,
	|	НДСПартииТоваровОбороты.СтавкаНДС";

	СписокДокументовРеализации = ТаблицаСписания.ВыгрузитьКолонку("ДокументПартии");
	// Возврат может осуществляться как с указанием документа реализации, так и с указанием документа поступления
	// Необходимо разделить возвраты на две группы
	СписокДокументовПартии	   = ТаблицаСписания.ВыгрузитьКолонку("Партия");
		
	Для ИндексЭлемента = 0 по СписокДокументовРеализации.Количество()-1 Цикл
		Если СписокДокументовРеализации[ИндексЭлемента] = СписокДокументовПартии[ИндексЭлемента] Тогда
			 СписокДокументовРеализации[ИндексЭлемента] = Неопределено;
		Иначе
			 СписокДокументовПартии[ИндексЭлемента] = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
		
	СписокДокументовРеализации	= ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовРеализации,Истина);
	СписокДокументовПартии 		= ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовПартии,Истина);
		
	Если СтруктураПараметров.Свойство("ДеревоРасходныхОрдеров") Тогда
		// Дополним список документов реализации расходными ордерами, которые могли отразить непосредственное списание партии
		КоличествоДокументовРеализации = СписокДокументовРеализации.Количество();
		Для НоомерЭлемента = 1 по КоличествоДокументовРеализации Цикл
			ДокументРеализации = СписокДокументовРеализации[НоомерЭлемента - 1];
				
			СтрокаРегистратора = СтруктураПараметров.ДеревоРасходныхОрдеров.Строки.Найти(ДокументРеализации,"Регистратор");
			Если не СтрокаРегистратора =  Неопределено и СтрокаРегистратора.Строки.Количество()>0 Тогда
				МассивОрдеров = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтрокаРегистратора.Строки.ВыгрузитьКолонку("РасходныйОрдерНаТовары"), Истина);
				Для каждого Ордер Из МассивОрдеров Цикл
					СписокДокументовРеализации.добавить(Ордер);
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
		
	Запрос.УстановитьПараметр("СписокДокументовРеализации", СписокДокументовРеализации);
	Запрос.УстановитьПараметр("Номенклатура",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("Номенклатура")));
	Запрос.УстановитьПараметр("ВидыЦенностей",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("ВидЦенности")));
	Запрос.УстановитьПараметр("СчетаФактуры",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ВидДвиженияПриход",	ВидДвиженияНакопления.Приход);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		//Переквалификация возвращаемых партий при реализации не производилась.
		возврат;
	КонецЕсли; 
	ТаблицаПереквалификаций = Результат.Выгрузить(ОБходРезультатаЗапроса.Прямой);
	ТаблицаПереквалификаций.Колонки.Добавить("Период");
	ТаблицаПереквалификаций.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
	
	ТаблицаВключенияВСтоимость = ТаблицаСписания.СкопироватьКолонки();
	
	КолонкиТаблицыПереквалификации = ТаблицаПереквалификаций.Колонки;
	КолонкиТаблицыСписания = ТаблицаСписания.Колонки;
	
	Для каждого СтрокаСписания Из ТаблицаСписания Цикл
		Отбор = Новый Структура ("Номенклатура,ВидЦенности,СчетФактура",СтрокаСписания.номенклатура,СтрокаСписания.ВидЦенности,СтрокаСписания.СчетФактура);
		НаборПереквалификацияПоКлючу = ТаблицаПереквалификаций.НайтиСтроки(Отбор);
		Если НаборПереквалификацияПоКлючу.Количество()=0 Тогда
			// Переквалификация по данному набору не производилась
			Продолжить;
		КонецЕсли; 
		
		КоличествоПоДвижению = - СтрокаСписания.Количество;
		СтоимостьПоДвижению  = - СтрокаСписания.Стоимость;
		НДСПоДвижению  = - СтрокаСписания.НДС;
		Для каждого СтрокаПереквалификации Из НаборПереквалификацияПоКлючу Цикл
			СуммаПереквалификации = 0;
			КоличествоПереквалификации = 0;
			НДСПереквалификации = 0;
			
			Если СтрокаСписания.НДСВключенВСтоимость Тогда
				//Могло производиться только включениеНДС в стоимость товаров (КоличествоВключен>0, КоличествоИсключен<0)
				//Переквалификация по стоимости
				Если СтрокаПереквалификации.СтоимостьВключен >0 и СтоимостьПоДвижению >0 Тогда
					СуммаПереквалификации = мин(СтрокаПереквалификации.СтоимостьВключен, СтоимостьПоДвижению);
					СтрокаПереквалификации.СтоимостьВключен = СтрокаПереквалификации.СтоимостьВключен - СуммаПереквалификации;
					//Стоимость по НДС не включенному в стоимость должна быть отрицательной, компенсируем. 
					СтрокаПереквалификации.СтоимостьИсключен = СтрокаПереквалификации.СтоимостьИсключен + СуммаПереквалификации;
					СтоимостьПоДвижению = СтоимостьПоДвижению - СуммаПереквалификации;
				КонецЕсли; 
				//Переквалификация по количеству
				Если СтрокаПереквалификации.КоличествоВключен >0 и КоличествоПоДвижению >0 Тогда
					КоличествоПереквалификации = мин(СтрокаПереквалификации.КоличествоВключен, КоличествоПоДвижению);
					СтрокаПереквалификации.КоличествоВключен = СтрокаПереквалификации.КоличествоВключен - КоличествоПереквалификации;
					//Количество по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.КоличествоИсключен = СтрокаПереквалификации.КоличествоИсключен + КоличествоПереквалификации;
					КоличествоПоДвижению = КоличествоПоДвижению - КоличествоПереквалификации;
				КонецЕсли; 
				//Переквалификация по НДС
				Если СтрокаПереквалификации.НДСВключен >0 и НДСПоДвижению >0 Тогда
					НДСПереквалификации = мин(СтрокаПереквалификации.НДСВключен, НДСПоДвижению);
					СтрокаПереквалификации.НДСВключен = СтрокаПереквалификации.НДСВключен - НДСПереквалификации;
					//Количество по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.НДСИсключен = СтрокаПереквалификации.НДСИсключен + НДСПереквалификации;
					НДСПоДвижению = НДСПоДвижению - НДСПереквалификации;
				КонецЕсли; 
			Иначе
				//Могло производиться только исключение НДС из стоимости товаров (КоличествоИсключен>0, КоличествоВключен<0)
				//Переквалификация по стоимости
				Если СтрокаПереквалификации.СтоимостьИсключен >0 и СтоимостьПоДвижению >0 Тогда
					СуммаПереквалификации = мин(СтрокаПереквалификации.СтоимостьИсключен, СтоимостьПоДвижению);
					СтрокаПереквалификации.СтоимостьИсключен = СтрокаПереквалификации.СтоимостьИсключен - СуммаПереквалификации;
					//Стоимость по НДС не включенному в стоимость должна быть отрицательной, компенсируем. 
					СтрокаПереквалификации.СтоимостьВключен = СтрокаПереквалификации.СтоимостьВключен + СуммаПереквалификации;
					СтоимостьПоДвижению = СтоимостьПоДвижению - СуммаПереквалификации;
				КонецЕсли; 
				//Переквалификация по количеству
				Если СтрокаПереквалификации.КоличествоИсключен >0 и КоличествоПоДвижению >0 Тогда
					КоличествоПереквалификации = мин(СтрокаПереквалификации.КоличествоИсключен, КоличествоПоДвижению);
					СтрокаПереквалификации.КоличествоИсключен = СтрокаПереквалификации.КоличествоИсключен - КоличествоПереквалификации;
					//Количество по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.КоличествоВключен = СтрокаПереквалификации.КоличествоВключен + КоличествоПереквалификации;
					КоличествоПоДвижению = КоличествоПоДвижению - КоличествоПереквалификации;
				КонецЕсли; 
				//Переквалификация по НДС
				Если СтрокаПереквалификации.НДСИсключен >0 и НДСПоДвижению >0 Тогда
					НДСПереквалификации = мин(СтрокаПереквалификации.НДСИсключен, НДСПоДвижению);
					СтрокаПереквалификации.НДСИсключен = СтрокаПереквалификации.НДСИсключен - НДСПереквалификации;
					//НДС по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.НДСВключен = СтрокаПереквалификации.НДСВключен + НДСПереквалификации;
					НДСПоДвижению = НДСПоДвижению - НДСПереквалификации;
				КонецЕсли; 
			КонецЕсли;
			
			Если (КоличествоПереквалификации = 0 и СуммаПереквалификации = 0) Тогда
				продолжить;
			КонецЕсли;
				
			//Добавляем строки в движения по таблице НДС партии (по обратной переквалификации)
		
			//Отразим включения НДС в стоимость по регисту НДС партии
			СтрокаСписанияНДСПартии	= ТаблицаДвиженийПартии.Добавить();
			СтрокаДобавленияНДСПартии= ТаблицаДвиженийПартии.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаСписанияНДСПартии,СтрокаПереквалификации); 
			ЗаполнитьЗначенияСвойств(СтрокаДобавленияНДСПартии,СтрокаПереквалификации); 
			
			СтрокаСписанияНДСПартии.Количество 	= КоличествоПереквалификации;
			СтрокаДобавленияНДСПартии.Количество	= -КоличествоПереквалификации;
			
			СтрокаСписанияНДСПартии.Стоимость 	= СуммаПереквалификации;
			СтрокаДобавленияНДСПартии.Стоимость	= -СуммаПереквалификации;
			
			СтрокаСписанияНДСПартии.НДС 	= НДСПереквалификации;
			СтрокаДобавленияНДСПартии.НДС	= -НДСПереквалификации;
			
			БУ = СтрокаПереквалификации.СчетУчета.ПолучитьОбъект();
			ВестиСкладскойУчетБУ  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
			Если ВестиСкладскойУчетБУ Тогда
				ВестиСуммовойУчетПоСкладамБУ = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
			Иначе
				ВестиСуммовойУчетПоСкладамБУ = Ложь;
			КонецЕсли;
			Если ВестиСуммовойУчетПоСкладамБУ Тогда
				СтрокаСписанияНДСПартии.Склад 	= СтрокаСписания.СкладПолучатель;
				СтрокаДобавленияНДСПартии.Склад	= СтрокаСписания.СкладПолучатель;
			Иначе
				СтрокаСписанияНДСПартии.Склад 	= Справочники.Склады.ПустаяСсылка();
				СтрокаДобавленияНДСПартии.Склад	= Справочники.Склады.ПустаяСсылка();
			КонецЕсли; 
			
			СтрокаСписанияНДСПартии.НДСВключенВСтоимость = не СтрокаСписания.НДСВключенВСтоимость;
			СтрокаДобавленияНДСПартии.НДСВключенВСтоимость = СтрокаСписания.НДСВключенВСтоимость;
			
			
			// подготовка таблицы для отражения переквалификации по другим регистрам.
			СтрокаТаблицыВключенияВстоимость = ТаблицаВключенияВСтоимость.Добавить();
			Для каждого Колонка Из ТаблицаВключенияВСтоимость.Колонки Цикл
				Если Колонка.Имя = "Количество" или Колонка.Имя = "Стоимость" или Колонка.Имя = "НДС" тогда
					СтрокаТаблицыВключенияВстоимость[Колонка.Имя] 	= СтрокаДобавленияНДСПартии[Колонка.Имя];
				ИначеЕсли не КолонкиТаблицыСписания.Найти(Колонка.Имя) = неопределено тогда
					СтрокаТаблицыВключенияВстоимость[Колонка.Имя] =   СтрокаСписания[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
			СтрокаТаблицыВключенияВстоимость.ДействияНДСПокупки_ВключитьВСтоимость = СтрокаСписания.НДСВключенВСтоимость;
			СтрокаТаблицыВключенияВстоимость.ДействияНДСПокупки_ИсключитьИзСтоимости = не СтрокаСписания.НДСВключенВСтоимость;
			
			Если КоличествоПоДвижению= 0 и СтоимостьПоДвижению = 0 Тогда
				//Обработка данной строки списания завершена
				Прервать;
			КонецЕсли; 	
		КонецЦикла; 
	КонецЦикла; 
	
	Если ТаблицаВключенияВСтоимость.Количество()>0 Тогда
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаВключенияВСтоимость, ТаблицаДвиженийПартии,Истина,СтруктураПараметров,Заголовок, Ложь);
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаВключенияВСтоимость, ТаблицаДвиженийПартии,Ложь,СтруктураПараметров,Заголовок, Ложь);
	КонецЕсли; 
	
	
КонецПроцедуры // СторноПереквалификацииПартииПриРеализации()

// Начисляет НДС при реализации по бухгалтерскому учету
//
// Параметры:
//	Нет.
//
Процедура СформироватьПроводкиПоВозвратуОтПокупателя(СтруктураШапкиДокумента, ТаблицаВыручки, СтруктураПараметров) 
	
	ИмяКолонкиСчет = ?(ТаблицаВыручки.Колонки.Найти("КорСчетСписанияБУ") <> Неопределено, "КорСчетСписанияБУ", "СчетРасходовБУ");
	ИмяКолонкиСубконто = ?(ТаблицаВыручки.Колонки.Найти("КорСубконтоСписанияБУ2") <> Неопределено, "КорСубконтоСписанияБУ2", "СубконтоБУ");
	
	Если Не СтруктураШапкиДокумента.Свойство("МоментОпределенияНалоговойБазыНДС") Тогда
		УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		Если ЗначениеЗаполнено(УчетнаяПолитикаНУ) 
			И ЗначениеЗаполнено(УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС)
			Тогда
			МоментОпределенияНалоговойБазыНДС = УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС;
		Иначе
			МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке;
		КонецЕсли; 
		СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС",МоментОпределенияНалоговойБазыНДС);
	КонецЕсли; 
	Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") И СтруктураПараметров.Свойство("ДвиженияХозрасчетный") тогда
		ТаблицаДвижений_Хозрасчетный		= СтруктураПараметров.ДвиженияХозрасчетный;
	Иначе
		ТаблицаДвижений_Хозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		ТаблицаДвижений_Хозрасчетный.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;

	Для Каждого СтрокаДокумента Из ТаблицаВыручки Цикл
		// При нулевом НДС проводки не формируем.
		Если СтрокаДокумента.НДС = 0 Или СтрокаДокумента.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ТаблицаДвижений_Хозрасчетный.Добавить();
		Проводка.Период        = СтруктураШапкиДокумента.Дата;
		Проводка.Регистратор   = СтруктураШапкиДокумента.Ссылка;
		Проводка.Активность    = Истина;
		Проводка.Организация   = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Возврат товаров от покупателя";
		Проводка.Сумма       = (-1) * СтрокаДокумента.НДС;
		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументПартии) Тогда
			Проводка.СписаниеПартий  = Истина;
			Проводка.НДСПродукции  = Истина;
		КонецЕсли;
	
		// Счет расходов по НДС - могут быть бва варианта субсчет 91 и субсчет 90
		Если БухгалтерскийУчет.ЭтоСубсчет(СтрокаДокумента[ИмяКолонкиСчет], ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) тогда
			Проводка.СчетДт = СтрокаДокумента[ИмяКолонкиСчет];
			Если ТипЗнч(СтрокаДокумента[ИмяКолонкиСубконто]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаДокумента[ИмяКолонкиСубконто]);
			КонецЕсли;
		Иначе
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДокумента[ИмяКолонкиСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаДокумента[ИмяКолонкиСубконто]);
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаДокумента.СтавкаНДС);
		
		// Отчет о розничных продажах должен формировать проводку по отнесению НДС на счет 68 непосредственно,
		// вне зависимости от момента определения налоговой базы для НДС, указанного в учетной политике, так 
		// как при реализации в розницу выручка, отраженная в отчете о розничных продажах сразу считается оплаченной
		Если СтруктураШапкиДокумента.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке
			Или ТипЗнч(СтрокаДокумента.ДокументПартии) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") 
		   Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		Иначе
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФВыданные", СтрокаДокумента.ДокументПартии);
		КонецЕсли;
		
	КонецЦикла;
	Если СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
		ТаблицаДвижений_Хозрасчетный.Записать(ложь);
	КонецЕсли;

КонецПроцедуры // НачислитьНДСРеализации()

////////////////////////////////////////////////////////////////////////////////////////////////////
//  ОТРАЖЕНИЯ ДВИЖЕНИЙ СВЯЗАННЫХ С ОБЪЕКТАМИ СТРОИТЕЛЬСТВА, ОС И НМА

Процедура СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, ТаблицаСписания, Движения, Отказ) Экспорт
	
	ТаблицаДвижений_НДСпоОСиНМА = Неопределено;
	
	СчетаУчетаОС = УчетНДС.ОпределитьСчетаУчетаОСиНМА("ОС", СтруктураШапкиДокумента.Дата);
	СчетаУчетаОборудования = УчетНДС.ОпределитьСчетаУчетаОСиНМА("Оборудование", СтруктураШапкиДокумента.Дата);
	
	Для каждого СтрокаСписания Из ТаблицаСписания Цикл
		Если СчетаУчетаОС.НайтиПоЗначению(СтрокаСписания.СчетУчета) = Неопределено 
			И СчетаУчетаОборудования.НайтиПоЗначению(СтрокаСписания.СчетУчета) = Неопределено Тогда
			// Оставляем строки только по ОС
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаСписания.СчетФактура) Тогда
			// Обрабатываем только записи с заполненными счетами-фактурами
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаДвижений_НДСпоОСиНМА = Неопределено Тогда
			Если не Движения.Свойство("СтруктураСодержитНаборыЗаписей") тогда
				ТаблицаДвижений_НДСпоОСиНМА	= Движения.ТаблицаДвиженийНДСпоОСиНМА;
			Иначе
				ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСпоОСиНМА",СтруктураШапкиДокумента.Ссылка);
				ТаблицаДвижений_НДСпоОСиНМА	= Движения.НДСпоОСиНМА.ВыгрузитьКолонки();
			КонецЕсли;
		КонецЕсли; 
		
		СтрокаДвиженияОС = ТаблицаДвижений_НДСпоОСиНМА.Добавить();

		СтрокаДвиженияОС.Организация	= СтруктураШапкиДокумента.Организация;
		СтрокаДвиженияОС.ВидЦенности	= СтрокаСписания.ВидЦенности;
		СтрокаДвиженияОС.СчетФактура	= СтрокаСписания.СчетФактура;
		СтрокаДвиженияОС.СтавкаНДС		= СтрокаСписания.СтавкаНДС;
		СтрокаДвиженияОС.СчетУчетаНДС	= СтрокаСписания.СчетУчетаНДС;
		СтрокаДвиженияОС.НДСВключенВСтоимость = СтрокаСписания.НДСВключенВСтоимость;
		СтрокаДвиженияОС.Состояние		= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОС;
		СтрокаДвиженияОС.Объект 		= СтрокаСписания.Номенклатура;
		
		Множитель = ?(СтруктураШапкиДокумента.ВидДокумента = "ПринятиеКУчетуОС" или СтрокаСписания.ВидДвижения = ВидДвиженияНакопления.Приход,1,-1);
		СтрокаДвиженияОС.СуммаБезНДС 	= (СтрокаСписания.Стоимость - СтрокаСписания.НДС)*Множитель;
		СтрокаДвиженияОС.НДС         	= СтрокаСписания.НДС*Множитель;
		
		СтрокаДвиженияОС.ДатаСобытия	= СтруктураШапкиДокумента.Дата;
		
		Если СчетаУчетаОборудования.НайтиПоЗначению(СтрокаСписания.СчетУчета) <> Неопределено 
			И СтрокаСписания.Партия.Дата >= '20060101' Тогда
			СтрокаДвиженияОС.НеВлияетНаВычет = Истина;
		КонецЕсли;		
		СтрокаДвиженияОС.ВидДвижения = ?(СтруктураШапкиДокумента.ВидДокумента = "ПринятиеКУчетуОС", ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
		
		Если СтруктураШапкиДокумента.ВидДокумента = "ПередачаОборудованияВМонтаж" и СтрокаСписания.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
			
			СтрокаДвиженияОС.Событие = Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
			
			СтрокаДвиженияВМонтаж = ТаблицаДвижений_НДСпоОСиНМА.Добавить();

			СтрокаДвиженияВМонтаж.Организация	= СтрокаДвиженияОС.Организация;
			СтрокаДвиженияВМонтаж.ВидЦенности	= СтрокаДвиженияОС.ВидЦенности;
			СтрокаДвиженияВМонтаж.СчетФактура	= СтрокаДвиженияОС.СчетФактура;
			СтрокаДвиженияВМонтаж.СтавкаНДС		= СтрокаДвиженияОС.СтавкаНДС;
			СтрокаДвиженияВМонтаж.СчетУчетаНДС	= СтрокаДвиженияОС.СчетУчетаНДС;
			СтрокаДвиженияВМонтаж.НДСВключенВСтоимость = СтрокаДвиженияОС.НДСВключенВСтоимость;
			СтрокаДвиженияВМонтаж.Состояние		= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;
			СтрокаДвиженияВМонтаж.Объект 		= СтруктураШапкиДокумента.ОбъектСтроительства;
			СтрокаДвиженияВМонтаж.СуммаБезНДС 	= (СтрокаСписания.Стоимость - СтрокаСписания.НДС);
			СтрокаДвиженияВМонтаж.НДС         	= СтрокаСписания.НДС;
			
			СтрокаДвиженияВМонтаж.ДатаСобытия	= СтруктураШапкиДокумента.Дата;
			
			Если СчетаУчетаОборудования.НайтиПоЗначению(СтрокаСписания.СчетУчета) <> Неопределено 
					И СтрокаСписания.Партия.Дата >= '20060101' Тогда
				СтрокаДвиженияВМонтаж.НеВлияетНаВычет = Истина;
			КонецЕсли;		
			СтрокаДвиженияВМонтаж.ВидДвижения	= ВидДвиженияНакопления.Приход;
			СтрокаДвиженияВМонтаж.Событие		= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
		КонецЕсли;
	КонецЦикла; 
	
	Если не ТаблицаДвижений_НДСпоОСиНМА = Неопределено Тогда
		ТаблицаДвижений_НДСпоОСиНМА.Свернуть("Период,Активность,ДатаСобытия,Организация,ВидЦенности,СчетФактура,СтавкаНДС,СчетУчетаНДС,НДСВключенВСтоимость,Состояние,Объект,ВидДвижения,НеВлияетНаВычет, Событие","СуммаБезНДС,НДС");
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаТаблицы Из ТаблицаДвижений_НДСпоОСиНМА Цикл
			Если СтрокаТаблицы.СуммаБезНДС =0 и СтрокаТаблицы.НДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений_НДСпоОСиНМА.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		
		
		Если ТаблицаДвижений_НДСпоОСиНМА.Количество() > 0 тогда
			Если не Движения.Свойство("СтруктураСодержитНаборыЗаписей") тогда
				ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Движения.Период,"Период");
				Движения.Вставить("ИзмененыДвиженияНДСпоОСиНМА", Истина);
			Иначе	
				Движения.НДСпоОСиНМА.мПериод          = СтруктураШапкиДокумента.Дата;
				Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
				Движения.НДСпоОСиНМА.ДобавитьДвижение();
				Движения.НДСпоОСиНМА.Записать(ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Предназначена для отражения НДС при принятии к учету объекта строительства хоз  способом.
//Возвращает таблицу движений по регистру НДСПредъявленный для целей дальнейшего формирования движений по регистру НДСОСиНМА
Функция СформироватьДвиженияПоРегиструНДСНачисленныйПредъявленный_ПринятиеКУчету_ХозСпособ(СтруктураШапкиДокумента, Отказ, СуммаБезНДС, СуммаНДС,ТаблицаПоОС=неопределено) Экспорт
    Движения = новый Структура();
	СсылкаНаДокумент = СтруктураШапкиДокумента.Ссылка;
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСНачисленный",СсылкаНаДокумент);
    ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСПредъявленный",СсылкаНаДокумент);

	ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.Выгрузить();
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.Выгрузить();
	
	// Начисление НДС в бюджет. Подготовка записи для отражения в книге продаж.
	СтрокаДвижений_НДСНачисленный 						= ТаблицаДвижений_НДСНачисленный.Добавить();
	СтрокаДвижений_НДСНачисленный.Период 				= СтруктураШапкиДокумента.Дата;
	
	СтрокаДвижений_НДСНачисленный.Организация			= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСНачисленный.СчетФактура			= СтруктураШапкиДокумента.Ссылка;
	СтрокаДвижений_НДСНачисленный.ВидЦенности			= Перечисления.ВидыЦенностей.СМРСобственнымиСилами;
	СтрокаДвижений_НДСНачисленный.СтавкаНДС				= Перечисления.СтавкиНДС.НДС18;
	СтрокаДвижений_НДСНачисленный.Покупатель			= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСНачисленный.ВидНачисления			= Перечисления.НДСВидНачисления.НДСНачисленКУплате;
	
	СтрокаДвижений_НДСНачисленный.СуммаБезНДС			= СуммаБезНДС;
	СтрокаДвижений_НДСНачисленный.НДС					= СуммаНДС;
	
	СтрокаДвижений_НДСНачисленный.Событие 				= Перечисления.СобытияПоНДСПродажи.Реализация;
	СтрокаДвижений_НДСНачисленный.ДатаСобытия 			= СтруктураШапкиДокумента.Дата;
	СтрокаДвижений_НДСНачисленный.СчетУчетаНДС			= ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств.Ссылка;
	

	// Предъявление НДС себе же для последующего принятия к вычету.
	СтрокаДвижений_НДСПредъявленный 					= ТаблицаДвижений_НДСПредъявленный.Добавить();
	СтрокаДвижений_НДСПредъявленный.Период 				= СтруктураШапкиДокумента.Дата;
	
	СтрокаДвижений_НДСПредъявленный.Организация			= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСПредъявленный.СчетФактура			= СтруктураШапкиДокумента.Ссылка;
	СтрокаДвижений_НДСПредъявленный.ВидЦенности			= Перечисления.ВидыЦенностей.СМРСобственнымиСилами;
	СтрокаДвижений_НДСПредъявленный.СтавкаНДС			= Перечисления.СтавкиНДС.НДС18;
	СтрокаДвижений_НДСПредъявленный.Поставщик			= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСПредъявленный.СчетУчетаНДС		= Планысчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств.Ссылка;
	
	СтрокаДвижений_НДСПредъявленный.СуммаБезНДС			= СуммаБезНДС;
	СтрокаДвижений_НДСПредъявленный.НДС					= СуммаНДС;
	
	СтрокаДвижений_НДСПредъявленный.Событие 			= Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура;
	СтрокаДвижений_НДСПредъявленный.ДатаСобытия 		= СтруктураШапкиДокумента.Дата;
	
	Движения.НДСНачисленный.мПериод      = СтруктураШапкиДокумента.Дата;
	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
	Движения.НДСНачисленный.ДобавитьДвижение(); 
	Движения.НДСНачисленный.Записать(Ложь);

	Движения.НДСПредъявленный.мПериод      = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения.НДСПредъявленный.ДобавитьДвижение(); 
	Движения.НДСПредъявленный.Записать(Ложь);

	Возврат ТаблицаДвижений_НДСПредъявленный;
	
КонецФункции // СформироватьДвиженияПоРегиструНДСНачисленныйПредъявленный_ПринятиеКУчету_ХозСпособ()

Процедура СформироватьДвиженияПоРегиструНДСОСиНМА_ПринятиеКУчетуОС_Модернизация(СтруктураШапкиДокумента,ТаблицаДвижений_НДСПредъявленный,ТаблицаДвижений_НДСпоОСиНМА=неопределено, ТаблицаПоОС=неопределено) Экспорт
	Если ТаблицаДвижений_НДСПредъявленный.Количество()=0 И ТаблицаДвижений_НДСпоОСиНМА=неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Движения = новый Структура();
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСпоОСиНМА",СтруктураШапкиДокумента.Ссылка);
	Если ТаблицаДвижений_НДСпоОСиНМА = неопределено Тогда
		ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.ВыгрузитьКолонки();
    КонецЕсли;

	ОсобыеУсловияБлокировкиВычета2006 = (СтруктураШапкиДокумента.Дата >= '20060101');

	Если ТаблицаДвижений_НДСПредъявленный.Количество()>0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвижений_НДСПредъявленный,ТаблицаДвижений_НДСпоОСиНМА);

		//Дополним последнюю строку таблицы ТаблицаДвижений_НДСпоОСиНМА
		ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].Объект				 = СтруктураШапкиДокумента.ОбъектСтроительства;
		ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].НДСВключенВСтоимость = Ложь;
		ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].НеВлияетНаВычет = ОсобыеУсловияБлокировкиВычета2006;
	КонецЕсли;
	
	//Вызов из документа ПринятиеКУчетуОС
	Если  ТаблицаПоОС<>неопределено Тогда
		// По объектам строительства НДС можно принятть к вычету только на следующий месяц после ввода в эксплуатацию
		// (в момент, когда можно начислять амортизацию по объекту). Необходимо заблокировать вычет до этого момента.
		// Дальше объект строительства фигурировать не будет, 
		// необходимо распределить НДС по конкретным ОС для дальнейшей обработки (при принятии к учету).
		ТаблицаДвижений_НДСпоОСиНМА_Базовая = ТаблицаДвижений_НДСпоОСиНМА.Скопировать();
		ТаблицаДвижений_НДСпоОСиНМА.Очистить();
		Для каждого СтрокаОС Из ТаблицаПоОС Цикл
			ТаблицаДвижений_НДСпоОСиНМА_Базовая.ЗаполнитьЗначения(СтрокаОС.ОсновноеСредство,"Объект");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвижений_НДСпоОСиНМА_Базовая,ТаблицаДвижений_НДСпоОСиНМА);
		КонецЦикла; 
			
		Распределение = Новый Структура("СуммаБезНДС,НДС");
		Отбор         = Новый Структура("СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,НДСВключенВСтоимость");
			
		ТаблицаДвижений_НДСпоОСиНМА = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаДвижений_НДСпоОСиНМА_Базовая,ТаблицаДвижений_НДСпоОСиНМА,Распределение,Отбор); 

	КонецЕсли;
	
	Если ТаблицаДвижений_НДСпоОСиНМА.Количество()>0 Тогда
		ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию,"Состояние");
		ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"ДатаСобытия");

		Если ОсобыеУсловияБлокировкиВычета2006 тогда
			ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Истина, "НеВлияетНаВычет");
		КонецЕсли;

		// Заблокируем вычет в текущем месяце
		ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"Период");
		Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
		Движения.НДСпоОСиНМА.ВыполнитьПриход(ложь);

		Если  ТаблицаПоОС = неопределено //вызов из документа МодернизацияОС
			ИЛИ (СтруктураШапкиДокумента.Свойство("ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл")
			И  СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл) Тогда
			
			//на след. месяц разблокируем вычет по ОС введенн. в экспл.
			ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(НачалоМесяца(ДобавитьМесяц((СтруктураШапкиДокумента.Дата),1)),"Период");
			Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
			Движения.НДСпоОСиНМА.ВыполнитьРасход(ложь);

		КонецЕсли;	
		Движения.НДСпоОСиНМА.Записать(ложь);
	КонецЕсли;	
КонецПроцедуры

Процедура ПоТабличнойЧастиСформироватьДвиженияПоРегиструНДСОСиНМА_ПринятиеКУчетуОС_Модернизация(СтруктураШапкиДокумента,ТаблицаДвижений_НДСПредъявленный,ТаблицаДвижений_НДСпоОСиНМА=неопределено, ТаблицаПоОС=неопределено) Экспорт
	
	Если ТаблицаДвижений_НДСПредъявленный.Количество()=0 И ТаблицаДвижений_НДСпоОСиНМА=неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Движения = новый Структура();
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСпоОСиНМА",СтруктураШапкиДокумента.Ссылка);
	Если ТаблицаДвижений_НДСпоОСиНМА = неопределено Тогда
		ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.ВыгрузитьКолонки();
    КонецЕсли;

	ОсобыеУсловияБлокировкиВычета2006 = (СтруктураШапкиДокумента.Дата >= '20060101');

	Если ТаблицаДвижений_НДСПредъявленный.Количество()>0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвижений_НДСПредъявленный,ТаблицаДвижений_НДСпоОСиНМА);

		//Дополним последнюю строку таблицы ТаблицаДвижений_НДСпоОСиНМА
		ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].Объект				 = СтруктураШапкиДокумента.ОбъектСтроительства;
		ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].НДСВключенВСтоимость = Ложь;
		ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].НеВлияетНаВычет = ОсобыеУсловияБлокировкиВычета2006;
	КонецЕсли;
	
	//Вызов из документа ПринятиеКУчетуОС
	Если  ТаблицаПоОС<>неопределено Тогда
		// По объектам строительства НДС можно принять к вычету только на следующий месяц после ввода в эксплуатацию
		// (в момент, когда можно начислять амортизацию по объекту). Необходимо заблокировать вычет до этого момента.
		// Дальше объект строительства фигурировать не будет, 
		// необходимо распределить НДС по конкретным ОС для дальнейшей обработки (при принятии к учету).
		ТаблицаДвижений_НДСпоОСиНМА_Базовая = ТаблицаДвижений_НДСпоОСиНМА.Скопировать();
		ТаблицаДвижений_НДСпоОСиНМА.Очистить();
		
		ТаблицаДвижений_НДСпоОСиНМА_Базовая.Колонки.Добавить("СуммаОС_БУ");
		ТаблицаДвижений_НДСпоОСиНМА_Базовая.Колонки.Добавить("СуммаОС_БУ_Хоз");
		ТаблицаДвижений_НДСпоОСиНМА.Колонки.Добавить("СуммаОС_БУ");
		ТаблицаДвижений_НДСпоОСиНМА.Колонки.Добавить("СуммаОС_БУ_Хоз");		
		
		Для каждого СтрокаОС Из ТаблицаПоОС Цикл
			ТаблицаДвижений_НДСпоОСиНМА_Базовая.ЗаполнитьЗначения(СтрокаОС.ОсновноеСредство,"Объект");
			ТаблицаДвижений_НДСпоОСиНМА_Базовая.ЗаполнитьЗначения(СтрокаОС.СуммаОС_БУ,"СуммаОС_БУ");
			ТаблицаДвижений_НДСпоОСиНМА_Базовая.ЗаполнитьЗначения(СтрокаОС.СуммаОС_БУ_Хоз,"СуммаОС_БУ_Хоз");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвижений_НДСпоОСиНМА_Базовая,ТаблицаДвижений_НДСпоОСиНМА);
		КонецЦикла; 
			
		Распределение = Новый Структура("СуммаБезНДС,НДС");
		Отбор         = Новый Структура("СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,НДСВключенВСтоимость");
			
		ТаблицаДвижений_НДСпоОСиНМА = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаДвижений_НДСпоОСиНМА_Базовая,ТаблицаДвижений_НДСпоОСиНМА,Распределение,Отбор); 

	КонецЕсли;
	
	Если ТаблицаДвижений_НДСпоОСиНМА.Количество()>0 Тогда
		ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию,"Состояние");
		ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"ДатаСобытия");

		Если ОсобыеУсловияБлокировкиВычета2006 тогда
			ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Истина, "НеВлияетНаВычет");
		КонецЕсли;

		// Заблокируем вычет в текущем месяце
		ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"Период");
		
		Для каждого врСтрока из ТаблицаДвижений_НДСпоОСиНМА Цикл
			
			///Способ
			Если (врСтрока.СуммаОС_БУ - врСтрока.СуммаОС_БУ_Хоз) > 0 Тогда
				
				Если (врСтрока.СуммаОстатка <= 0) тогда
					КоэффициентРаспределения = 1;
				Иначе
					КоэффициентРаспределения = (врСтрока.СуммаОС_БУ - врСтрока.СуммаОС_БУ_Хоз)/врСтрока.СуммаОстатка;
				КонецЕсли;
				
			КонецЕсли;			
			
			//коэффициент не должен быть более единицы
			Если КоэффициентРаспределения > 1 Тогда
				КоэффициентРаспределения = 1;
			ИначеЕсли КоэффициентРаспределения = 0 тогда
				Возврат;
			КонецЕсли;				
			
			Если врСтрока.врСуммаБезНДС <> 0 Тогда
				 врСтрока.СуммаБезНДС = Окр(КоэффициентРаспределения*врСтрока.врСуммаБезНДС,2);
			КонецЕсли; 
			
			врСтрока.НДС = Окр(КоэффициентРаспределения*врСтрока.врСуммаCНДС,2) - врСтрока.СуммаБезНДС;
						            			
			/////ХозСпособ
			//Если (врСтрока.СуммаОстатка_Хозспособ <= 0) тогда
			//	КоэффициентРаспределения = 1;
			//Иначе
			//	КоэффициентРаспределения = врСтрока.СуммаОС_БУ_Хоз/врСтрока.СуммаОстатка_Хозспособ;
			//КонецЕсли;
			         			
		КонецЦикла;	
		
		Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
		Движения.НДСпоОСиНМА.ВыполнитьПриход(ложь);

		Если  ТаблицаПоОС = неопределено //вызов из документа МодернизацияОС
			ИЛИ (СтруктураШапкиДокумента.Свойство("ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл")
			И  СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл) Тогда
			
			//на след. месяц разблокируем вычет по ОС введенн. в экспл.
			ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(НачалоМесяца(ДобавитьМесяц((СтруктураШапкиДокумента.Дата),1)),"Период");
			Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
			Движения.НДСпоОСиНМА.ВыполнитьРасход(ложь);

		КонецЕсли;	
		Движения.НДСпоОСиНМА.Записать(ложь);
	КонецЕсли;	
КонецПроцедуры

// Функция вызывается из модулей документа принятие к учету ОС и документов списания
// Процедура "погашает" соответствующие записи по переданным параметрам на указанную  дату
Функция СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС(СтруктураШапкиДокумента, Объект, Состояние, Событие, ДатаЗаписи, КоэффициентРаспределения, Отказ) Экспорт
	
	УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
		Отказ = Истина;
		Возврат неопределено;
	КонецЕсли;
	
	Если (УчетнаяПолитикаНУ.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная) тогда
		// Движения по этому документу делать не нужно
		Возврат неопределено;
	КонецЕсли;

	
	//коэффициент не должен быть более единицы
	Если КоэффициентРаспределения > 1 Тогда
		КоэффициентРаспределения = 1;
	ИначеЕсли КоэффициентРаспределения = 0 тогда
		Возврат неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Объект",			Объект);
	Запрос.УстановитьПараметр("КонецПериода",   Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("Состояние", 		Состояние);
	Запрос.УстановитьПараметр("ВидЦенности_Исключение",Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСпоОСиНМАОстатки.Организация КАК Организация,
	|	НДСпоОСиНМАОстатки.Объект КАК Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура КАК СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности КАК ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние КАК Состояние,
	|	СУММА(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток) КАК СуммаCНДС,
	|	СУММА(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСпоОСиНМАОстатки.НДСОстаток) КАК НДС,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|		&КонецПериода,
	|		Организация = &Организация
	|			И Объект В (&Объект)
	|			И Состояние = &Состояние
	|			И (НЕ ВидЦенности = &ВидЦенности_Исключение)) КАК НДСпоОСиНМАОстатки
	|ГДЕ
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСпоОСиНМАОстатки.Организация,
	|	НДСпоОСиНМАОстатки.Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет";

	Результат = Запрос.Выполнить();
	//Ничего нет в регистре!
	Если Результат.Пустой() Тогда
		Возврат неопределено;
	КонецЕсли;	
	
	ТаблицаНДСпоОСиНМА = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ТаблицаНДСпоОСиНМА.Колонки.Добавить("врСуммаCНДС");
	ТаблицаНДСпоОСиНМА.Колонки.Добавить("врСуммаБезНДС");
	ТаблицаНДСпоОСиНМА.Колонки.Добавить("врНДС");
	ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаCНДС"),"врСуммаCНДС");
	ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаБезНДС"),"врСуммаБезНДС");
	ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("НДС"),"врНДС");       	
	
	ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ttk_ОбщегоНазначения.РаспределитьПропорционально(Окр(КоэффициентРаспределения*ТаблицаНДСпоОСиНМА.Итог("СуммаCНДС"),2),ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаCНДС")),"СуммаCНДС");
	
	Если ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС") <> 0 Тогда
		ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ttk_ОбщегоНазначения.РаспределитьПропорционально(Окр(КоэффициентРаспределения*ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС"),2),ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаБезНДС")),"СуммаБезНДС");
	КонецЕсли; 
	Для каждого СтрокаТаблицы Из ТаблицаНДСпоОСиНМА Цикл
		СтрокаТаблицы.НДС = СтрокаТаблицы.СуммаCНДС - СтрокаТаблицы.СуммаБезНДС;
	КонецЦикла; 
	Движения = новый Структура();
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСпоОСиНМА",СтруктураШапкиДокумента.Ссылка);

	ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
	
	ТаблицаДвижений_НДСпоОСиНМА.Колонки.Добавить("врСуммаCНДС");
	ТаблицаДвижений_НДСпоОСиНМА.Колонки.Добавить("врСуммаБезНДС");
	ТаблицаДвижений_НДСпоОСиНМА.Колонки.Добавить("врНДС");	
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНДСпоОСиНМА,ТаблицаДвижений_НДСпоОСиНМА);
	
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Событие,"Событие");
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"ДатаСобытия");
	
	Движения.НДСпоОСиНМА.мПериод          = ДатаЗаписи;
	Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	Движения.НДСпоОСиНМА.ВыполнитьРасход();
	Движения.НДСпоОСиНМА.Записать(ложь);
	Возврат ТаблицаДвижений_НДСпоОСиНМА;
	
КонецФункции	

// Процедура вызывается из модулей документа принятие к учету ОС и документов списания
// Процедура "погашает" соответствующие записи по переданным параметрам на указанную  дату
Функция СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС_Хозспособ(СтруктураШапкиДокумента, Объект, Состояние, Событие, ДатаЗаписи, КоэффициентРаспределения, Отказ) Экспорт
	
	ПустойРезультат = Новый Структура("СуммаБезНДС, НДС, ТаблицаДвижений_НДСпоОСиНМА", 0, 0, Неопределено);
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат ПустойРезультат;
	КонецЕсли;
	
	//коэффициент не должен быть более единицы
	Если КоэффициентРаспределения > 1 Тогда
		КоэффициентРаспределения = 1;
	ИначеЕсли КоэффициентРаспределения = 0 тогда
		Возврат ПустойРезультат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Объект",			Объект);
	Запрос.УстановитьПараметр("КонецПериода",   Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("ВидЦенности",   	Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("Состояние", 		Состояние);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСпоОСиНМАОстатки.Организация КАК Организация,
	|	НДСпоОСиНМАОстатки.Объект КАК Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура КАК СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности КАК ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние КАК Состояние,
	|	СУММА(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток) КАК СуммаCНДС,
	|	СУММА(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСпоОСиНМАОстатки.НДСОстаток) КАК НДС,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|		&КонецПериода,
	|		Организация = &Организация
	|		    И Объект В (&Объект)
	|		    И Состояние = &Состояние
	|		    И ВидЦенности = &ВидЦенности) КАК НДСпоОСиНМАОстатки
	|ГДЕ
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСпоОСиНМАОстатки.Организация,
	|	НДСпоОСиНМАОстатки.Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет";

	Результат = Запрос.Выполнить();
	//Ничего нет в регистре!
	Если Результат.Пустой() Тогда
		Возврат ПустойРезультат;
	КонецЕсли;	
	
	ТаблицаНДСпоОСиНМА = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ТаблицаНДСпоОСиНМА.Колонки.Добавить("врСуммаCНДС_Хозспособ");
	ТаблицаНДСпоОСиНМА.Колонки.Добавить("врСуммаБезНДС_Хозспособ");
	ТаблицаНДСпоОСиНМА.Колонки.Добавить("врНДС_Хозспособ");
	ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаCНДС"),"врСуммаCНДС_Хозспособ");
	ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаБезНДС"),"врСуммаБезНДС_Хозспособ");
	ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("НДС"),"врНДС_Хозспособ"); 
	
	ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ttk_ОбщегоНазначения.РаспределитьПропорционально(Окр(КоэффициентРаспределения*ТаблицаНДСпоОСиНМА.Итог("СуммаCНДС"),2),ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаCНДС")),"СуммаCНДС");
	
	Если ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС") <> 0 Тогда
		ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ttk_ОбщегоНазначения.РаспределитьПропорционально(Окр(КоэффициентРаспределения*ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС"),2),ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаБезНДС")),"СуммаБезНДС");
	КонецЕсли; 
	Для каждого СтрокаТаблицы Из ТаблицаНДСпоОСиНМА Цикл
		СтрокаТаблицы.НДС = СтрокаТаблицы.СуммаCНДС - СтрокаТаблицы.СуммаБезНДС;
	КонецЦикла; 
	Движения = новый Структура();
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСпоОСиНМА",СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
	ТаблицаДвижений_НДСпоОСиНМА.Колонки.Добавить("врСуммаCНДС_Хозспособ");
	ТаблицаДвижений_НДСпоОСиНМА.Колонки.Добавить("врСуммаБезНДС_Хозспособ");
	ТаблицаДвижений_НДСпоОСиНМА.Колонки.Добавить("врНДС_Хозспособ");	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНДСпоОСиНМА,ТаблицаДвижений_НДСпоОСиНМА);
	
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Событие,"Событие");
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"ДатаСобытия");
	
	Движения.НДСпоОСиНМА.мПериод          = ДатаЗаписи;
	Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	Движения.НДСпоОСиНМА.ВыполнитьРасход();
	
	Движения.НДСпоОСиНМА.Записать(ложь);
	Возврат Новый Структура("СуммаБезНДС, НДС, ТаблицаДвижений_НДСпоОСиНМА",
		ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС"), ТаблицаНДСпоОСиНМА.Итог("НДС"), ТаблицаДвижений_НДСпоОСиНМА);
	
КонецФункции // СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС_Хозспособ()

////////////////////////////////////////////////////////////////////////////////////////////////////
//  ОТРАЖЕНИЕ ВКЛЮЧЕНИЯ И ИСКЛЮЧЕНИЯ НДС ИЗ СТОИМОСТИ ПРИ ПЕРЕМЕЩЕНИИ ИЛИ СПИСАНИИ ПАРТИИ ТОВАРОВ

// Процедура вызывается из процедур.
// В тех случаях, когда розничная реализация в организации переведена на ЕНВД,
// при передаче товаров в розницу, происходит автоматическое включение НДС в себестоимость
// этих товаров
Процедура ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаСписания, ТаблицаДвиженийПартии, ВключитьВСтоимость, СтруктураПараметров=неопределено, Заголовок, ОтражатьПоПартиям = Истина) Экспорт

	ВременныеКолонки = Новый Массив;
	
	Если ТаблицаСписания.Колонки.Найти("Количество") = Неопределено Тогда
		ВременныеКолонки.Добавить("Количество");
		ТаблицаСписания.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	КонецЕсли;
	Если ТаблицаСписания.Колонки.Найти("QuieryId") = Неопределено Тогда
		ВременныеКолонки.Добавить("QuieryId");
		ТаблицаСписания.Колонки.Добавить("QuieryId", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
		Для К = 0 По ТаблицаСписания.Количество() - 1 Цикл
			ТаблицаСписания[К].QuieryId = К;
		КонецЦикла;
	КонецЕсли;
	Если ТаблицаСписания.Колонки.Найти("ОбъектСтроительства") = Неопределено Тогда	
		ВременныеКолонки.Добавить("ОбъектСтроительства");
		ТаблицаСписания.Колонки.Добавить("ОбъектСтроительства");
	КонецЕсли; 
	Если ТаблицаСписания.Колонки.Найти("Номенклатура") = Неопределено Тогда	
		ВременныеКолонки.Добавить("Номенклатура");
		ТаблицаСписания.Колонки.Добавить("Номенклатура");
	КонецЕсли; 
	Если ТаблицаСписания.Колонки.Найти("СкладПолучатель") = Неопределено тогда	
		ВременныеКолонки.Добавить("СкладПолучатель");
		ТаблицаСписания.Колонки.Добавить("СкладПолучатель");
	КонецЕсли; 
	Если ТаблицаСписания.Колонки.Найти("КодОперацииПартииТоваров") = Неопределено Тогда	
		ВременныеКолонки.Добавить("КодОперацииПартииТоваров");
		ТаблицаСписания.Колонки.Добавить("КодОперацииПартииТоваров");
	КонецЕсли; 
	Если ТаблицаСписания.Колонки.Найти("СписаниеНДС") = Неопределено Тогда	
		ТаблицаСписания.Колонки.Добавить("СписаниеНДС", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Построитель_ТаблицаСписания = Новый ПостроительЗапроса();
	Построитель_ТаблицаСписания.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаСписания); //ОписаниеИсточника_ТаблицаСписания
	//Построитель_ТаблицаСписания.ИсточникДанных = ОписаниеИсточника_ТаблицаСписания;
	Отбор = Построитель_ТаблицаСписания.Отбор;
	
	Если ВключитьВСтоимость Тогда
		Отбор.Добавить("ДействияНДСПокупки_ВключитьВСтоимость");
		Отбор["ДействияНДСПокупки_ВключитьВСтоимость"].Значение = Истина;
		Отбор["ДействияНДСПокупки_ВключитьВСтоимость"].Использование = Истина;
	Иначе
		Отбор.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости");
		Отбор["ДействияНДСПокупки_ИсключитьИзСтоимости"].Значение = Истина;
		Отбор["ДействияНДСПокупки_ИсключитьИзСтоимости"].Использование = Истина;
	КонецЕсли; 
	
	Построитель_ТаблицаСписания.Выполнить();
	ДанныеДляОбработки = Построитель_ТаблицаСписания.Результат.Выгрузить();
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаТаблицы Из ДанныеДляОбработки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДанныеДляОбработки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество() = 0 Тогда
		//Включение НДС в стоимость по данному набору не требуется
		Возврат;
	КонецЕсли;
	
	Если ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено тогда	
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
			Если не ВключитьВСтоимость Тогда
				СтрокаОбрабатываемая.Количество = СтрокаОбрабатываемая.Количество*(-1);
				СтрокаОбрабатываемая.Стоимость = СтрокаОбрабатываемая.Стоимость*(-1);
				СтрокаОбрабатываемая.НДС = СтрокаОбрабатываемая.НДС*(-1);
			КонецЕсли; 
			СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
		КонецЦикла; 
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.Свойство("ПартионныйУчетБУ") Тогда
		Если не СтруктураШапкиДокумента.Свойство("БухгалтерскийУчетСпособОценкиМПЗ") Тогда
			УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
			СтруктураШапкиДокумента.Вставить("БухгалтерскийУчетСпособОценкиМПЗ",?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), Перечисления.СпособыОценки.ПоСредней, УчетнаяПолитика.СпособОценкиМПЗ));
		КонецЕсли; 
		
		ПартионныйУчетБУ = (СтруктураШапкиДокумента.БухгалтерскийУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО 
						или СтруктураШапкиДокумента.БухгалтерскийУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
	
		СтруктураШапкиДокумента.Вставить("ПартионныйУчетБУ",ПартионныйУчетБУ);
	Иначе
		ПартионныйУчетБУ = СтруктураШапкиДокумента.ПартионныйУчетБУ;
	КонецЕсли;
	
	ОтражатьВНалоговомУчете = ?(ТаблицаСписания.Колонки.Найти("ОтражатьВНалоговомУчете") <> Неопределено, ТаблицаСписания.Найти(Истина, "ОтражатьВНалоговомУчете") <> Неопределено, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
	Если (не (СтруктураШапкиДокумента.Свойство("НалоговыйУчетСпособОценкиМПЗ") или СтруктураШапкиДокумента.Свойство("ПартионныйУчетНУ") или СтруктураШапкиДокумента.Свойство("ПартионныйУчетНДСвРазрезеСерийИХарактеристик")) и ОтражатьВНалоговомУчете) 
		или не СтруктураШапкиДокумента.Свойство("СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость") 
		Тогда
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("НалоговыйУчетСпособОценкиМПЗ",?(Не ЗначениеЗаполнено(УчетнаяПолитика), Перечисления.СпособыОценки.ПоСредней, УчетнаяПолитика.СпособОценкиМПЗ));
		СтруктураШапкиДокумента.Вставить("СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость",?(?(Не ЗначениеЗаполнено(УчетнаяПолитика), Истина, Не ЗначениеЗаполнено(УчетнаяПолитика.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость)),Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ, УчетнаяПолитика.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость));
		СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСерийИХарактеристик",?(?(Не ЗначениеЗаполнено(УчетнаяПолитика), Ложь, Не ЗначениеЗаполнено(УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик)), Ложь, УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик));
	КонецЕсли; 
	
	Если не СтруктураШапкиДокумента.Свойство("ПартионныйУчетНУ") Тогда
		Если ОтражатьВНалоговомУчете Тогда
			ПартионныйУчетНУ = (СтруктураШапкиДокумента.НалоговыйУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО 
						или СтруктураШапкиДокумента.НалоговыйУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
		Иначе
			ПартионныйУчетНУ = Ложь;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("ПартионныйУчетНУ",ПартионныйУчетНУ);
	Иначе
		ПартионныйУчетНУ = СтруктураШапкиДокумента.ПартионныйУчетНУ;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры",       ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка), ВидГраницы.Исключая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура.ДоговорКонтрагента, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НДСПредъявленныйОбороты.ДоговорКонтрагента
	|	КОНЕЦ КАК СчетФактураДоговорКонтрагента,
	|	НДСПредъявленныйОбороты.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
	
	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	Если ДанныеДляОбработки.Колонки.Найти("Поставщик") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	Если ДанныеДляОбработки.Колонки.Найти("СчетФактураДоговорКонтрагента") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("СчетФактураДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли;
	Если ДанныеДляОбработки.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли;
	
	ДанныеДляОбработки.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
		Если не СтрокаКонтрагента = Неопределено Тогда
		    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
			СтрокаОбрабатываемая.СчетФактураДоговорКонтрагента = СтрокаКонтрагента.СчетФактураДоговорКонтрагента;
			Если ЗначениеЗаполнено(СтрокаКонтрагента.ДоговорКонтрагента) Тогда
				СтрокаОбрабатываемая.ДоговорКонтрагента = СтрокаКонтрагента.ДоговорКонтрагента;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	ДанныеДляОбработки.Колонки.Добавить("Событие");
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,"Событие");
	
	Если ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");
	КонецЕсли; 
	
	ОсобыйПорядокОтражения_ст170НКРФ = (ВключитьВСтоимость и СтруктураШапкиДокумента.Дата >='20060101');
	
	Если ОсобыйПорядокОтражения_ст170НКРФ Тогда
		
		ДанныеДляОбработки.Колонки.Добавить("НДСкСписанию", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДСкСписанию", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		// Особый порядок отражения в соответствии со п.3 статьи 170 НК РФ
		// по НДС, принятому к вычету на момент "включения в стоимость" 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СчетаФактуры",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура"), Истина));
		Запрос.УстановитьПараметр("ВидыЦенностей",	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("ВидЦенности"), Истина));
		Запрос.УстановитьПараметр("СтавкиНДС",		ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СтавкаНДС"), Истина));
		Запрос.УстановитьПараметр("Период",			Новый Граница(Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка), ВидГраницы.Исключая));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&Период,
		|			Организация = &Организация
		|				И СчетФактура В (&СчетаФактуры)
		|				И ВидЦенности В (&ВидыЦенностей)
		|				И СтавкаНДС В (&СтавкиНДС)) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|				&Период,
		|				Организация = &Организация
		|					И СчетФактура В (&СчетаФактуры)
		|					И ВидЦенности В (&ВидыЦенностей)
		|					И СтавкаНДС В (&СтавкиНДС)) КАК НДСПредъявленныйРеализация0Остатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйРеализация0Остатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйРеализация0Остатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС
		|			И (НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток + НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
		|ГДЕ
		|	НДСПредъявленныйОстатки.НДСОстаток + НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|ИТОГИ ПО
		|	СчетФактура";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
		    ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("СуммаБезНДС"),"СуммаБезНДСкСписанию");
		    ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("НДС"),"НДСкСписанию");
			ДанныеДляОбработки.ЗаполнитьЗначения(0, "СуммаБезНДС,НДС");
		Иначе
			НДСнеПринятыйКВычету = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			СтруктураОтбора = Новый Структура("ВидЦенности, СтавкаНДС, СчетУчетаНДС"); 
			
			
			Для каждого ОбрабатываемаяСтрока Из ДанныеДляОбработки Цикл
				СтрокаОстаткаПоСФ = НДСнеПринятыйКВычету.Строки.Найти(ОбрабатываемаяСтрока.СчетФактура, "СчетФактура");
				Если СтрокаОстаткаПоСФ = Неопределено Тогда
				     ОбрабатываемаяСтрока.СуммаБезНДСКСписанию	= ОбрабатываемаяСтрока.СуммаБезНДС;
					 ОбрабатываемаяСтрока.НДСКСписанию			= ОбрабатываемаяСтрока.НДС;
					 ОбрабатываемаяСтрока.СуммаБезНДС			= 0;
					 ОбрабатываемаяСтрока.НДС					= 0;
				Иначе
					СуммаБезНДСКСписанию	= ОбрабатываемаяСтрока.СуммаБезНДС;
					НДСКСписанию			= ОбрабатываемаяСтрока.НДС;
					
					// Отбираем строки с фильтром по виду ценности, ставке НДС, счету учета НДС
					ЗаполнитьЗначенияСвойств(СтруктураОтбора,ОбрабатываемаяСтрока); 
					СтрокиПоОтбору			= СтрокаОстаткаПоСФ.Строки.НайтиСтроки(СтруктураОтбора);
					Для каждого СтрокаОстатка Из СтрокиПоОтбору Цикл
						СуммаБезНДС_ВСтоимость	= Мин(СтрокаОстатка.СуммаБезНДС,СуммаБезНДСКСписанию);
						НДС_ВСтоимость			= Мин(СтрокаОстатка.НДС,НДСКСписанию);
						
						СуммаБезНДСКСписанию	= СуммаБезНДСКСписанию - СуммаБезНДС_ВСтоимость;
						НДСКСписанию			= НДСКСписанию - НДС_ВСтоимость;
						
						СтрокаОстатка.СуммаБезНДС = СтрокаОстатка.СуммаБезНДС - СуммаБезНДС_ВСтоимость;
						СтрокаОстатка.НДС = СтрокаОстатка.НДС - НДС_ВСтоимость;
						
						Если СтрокаОстатка.СуммаБезНДС = 0 и СтрокаОстатка.НДС = 0 Тогда
							СтрокаОстаткаПоСФ.Строки.Удалить(СтрокаОстатка);
						КонецЕсли; 
						
						Если СуммаБезНДСКСписанию = 0 и НДСКСписанию = 0 Тогда
							Прервать;
						КонецЕсли; 
						
					КонецЦикла; 
					Если не (СуммаБезНДСКСписанию = 0 и НДСКСписанию = 0) Тогда
						ОбрабатываемаяСтрока.СуммаБезНДСКСписанию	= СуммаБезНДСКСписанию;
						ОбрабатываемаяСтрока.НДСКСписанию			= НДСКСписанию;
						ОбрабатываемаяСтрока.СуммаБезНДС			= ОбрабатываемаяСтрока.СуммаБезНДС - СуммаБезНДСКСписанию;
						ОбрабатываемаяСтрока.НДС					= ОбрабатываемаяСтрока.НДС - НДСКСписанию;
					КонецЕсли; 
					
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	ДанныеДляОтраженияВДополнительныхРегистрах = ДанныеДляОбработки.Скопировать();
	КолвоЭлементовКоллекции = ДанныеДляОтраженияВДополнительныхРегистрах.Количество(); 
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
	     ЭлементКоллекции = ДанныеДляОтраженияВДополнительныхРегистрах[КолвоЭлементовКоллекции - ОбратныйИндекс]; 
	     Если НЕ ЗначениеЗаполнено(ЭлементКоллекции.СчетФактура) Тогда 
	          ДанныеДляОтраженияВДополнительныхРегистрах.Удалить(ЭлементКоллекции); 
	     КонецЕсли; 
	КонецЦикла;
	
	// Отразить в регистре НДСПредъявленный
	Если СтруктураПараметров = неопределено Тогда
		СтруктураПараметров = новый Структура("СтруктураСодержитНаборыЗаписей",истина);
	КонецЕсли;
	СсылкаНаДокумент = СтруктураШапкиДокумента.Ссылка;
	Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
		ТаблицаДвижений_НДСПредъявленный = СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.СкопироватьКолонки();
	Иначе
		ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураПараметров,"НДСПредъявленный",СсылкаНаДокумент);
		ТаблицаДвижений_НДСПредъявленный = СтруктураПараметров.НДСПредъявленный.ВыгрузитьКолонки();
	КонецЕсли;
	ДанныеДляОтраженияВДополнительныхРегистрах.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляОтраженияВДополнительныхРегистрах, ТаблицаДвижений_НДСПредъявленный);
	
	//Зачистить таблицу от записей с пустыми суммами
	СтрокиКУдалению = ТаблицаДвижений_НДСПредъявленный.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений_НДСПредъявленный.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвижений_НДСПредъявленный, СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный);
		СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПредъявленный", Истина);
	ИначеЕсли ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда
		СтруктураПараметров.НДСПредъявленный.мПериод            = СтруктураШапкиДокумента.Дата;
		СтруктураПараметров.НДСПредъявленный.мТаблицаДвижений   = ТаблицаДвижений_НДСПредъявленный;
		СтруктураПараметров.НДСПредъявленный.ДобавитьДвижение();
		СтруктураПараметров.НДСПредъявленный.Записать(ложь);
	КонецЕсли; 
	
	// Отразить в регистре НДСВключенныйВСтоимость
	Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей")  Тогда
		ТаблицаДвижений_НДСВключенныйВСтоимость	= СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.СкопироватьКолонки();
	Иначе
		ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураПараметров,"НДСВключенныйВСтоимость",СсылкаНаДокумент);
		ТаблицаДвижений_НДСВключенныйВСтоимость	= СтруктураПараметров.НДСВключенныйВСтоимость.ВыгрузитьКолонки();
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляОтраженияВДополнительныхРегистрах, ТаблицаДвижений_НДСВключенныйВСтоимость);
	
	//Зачистить таблицу от записей с пустыми суммами
	СтрокиКУдалению = ТаблицаДвижений_НДСВключенныйВСтоимость.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений_НДСВключенныйВСтоимость.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей")  Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвижений_НДСВключенныйВСтоимость, СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость);
		СтруктураПараметров.Вставить("ИзмененыДвиженияНДСВключенныйВСтоимость", Истина);
	ИначеЕсли ТаблицаДвижений_НДСВключенныйВСтоимость.Количество() > 0 Тогда
		СтруктураПараметров.НДСВключенныйВСтоимость.мПериод            = СтруктураШапкиДокумента.Дата;
		СтруктураПараметров.НДСВключенныйВСтоимость.мТаблицаДвижений   = ТаблицаДвижений_НДСВключенныйВСтоимость;
		СтруктураПараметров.НДСВключенныйВСтоимость.ДобавитьДвижение();
		СтруктураПараметров.НДСВключенныйВСтоимость.Записать(ложь);
	КонецЕсли;
	
	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	Если ОсобыйПорядокОтражения_ст170НКРФ
		и (не ДанныеДляОбработки.Итог("НДСКСписанию") = 0 или не ДанныеДляОбработки.Итог("СуммаБезНДСКСписанию") = 0)
		Тогда
		
		//Отражение списания (восстановления) НДС в регистре "НДС начисленный"
		СтруктураПереименования = Новый Структура("СуммаБезНДС, НДС, Покупатель","СуммаБезНДСКСписанию", "НДСКСписанию", "Поставщик");
			
		Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей")  тогда
			ТаблицаДвижений_НДСНачисленный	= СтруктураПараметров.ТаблицаДвиженийНДСначисленный.СкопироватьКолонки();
		Иначе
			ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураПараметров,"НДСНачисленный",СсылкаНаДокумент);
			ТаблицаДвижений_НДСНачисленный	= СтруктураПараметров.НДСНачисленный.ВыгрузитьКолонки();
		КонецЕсли;
		
		УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СтруктураПереименования);
		ИспользоватьКорСчетСписанияПриСписанииНаРасходы = ?(СтруктураШапкиДокумента.Свойство("ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат"),
															СтруктураШапкиДокумента.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат, Ложь) Или Не СтруктураШапкиДокумента.Свойство("СчетСписанияНДС");
		
		Для Каждого СтрокаСписания Из ДанныеДляОбработки Цикл
			
			Движение_НДСНачисленный = ТаблицаДвижений_НДСНачисленный.Добавить();
			ЗаполнитьЗначенияСвойств(Движение_НДСНачисленный, СтрокаСписания);
			Если ИспользоватьКорСчетСписанияПриСписанииНаРасходы Тогда
				Движение_НДСНачисленный.СчетДоходовБУ = СтрокаСписания.КорСчетСписанияБУ;
			Иначе
				Движение_НДСНачисленный.СчетДоходовБУ = СтруктураШапкиДокумента.СчетСписанияНДС;
			КонецЕсли;
			
		КонецЦикла;
		
		УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СтруктураПереименования, Истина);
		
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСВосстановлен, "ВидНачисления");
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		
		//Зачистить таблицу от записей с пустыми суммами
		СтрокиКУдалению = ТаблицаДвижений_НДСНачисленный.НайтиСтроки(Новый Структура("НДС", 0));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений_НДСНачисленный.Удалить(СтрокаКУдалению);
		КонецЦикла; 
			
		Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвижений_НДСНачисленный, СтруктураПараметров.ТаблицаДвиженийНДСначисленный);
			СтруктураПараметров.Вставить("ИзмененыДвиженияНДСНачисленный", Истина);
		Иначе
			СтруктураПараметров.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
			СтруктураПараметров.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
			СтруктураПараметров.НДСНачисленный.ДобавитьДвижение();
			СтруктураПараметров.НДСНачисленный.Записать(ложь);
		КонецЕсли;
			
	КонецЕсли;
	
	КолонкиТаблицыДанныхДляОбработки = ДанныеДляОбработки.Колонки;
	////////////////////////////////////////////////////////
	// Движения по НДС партии,по регистру бухгалтерии и по партиям товаров на складах
	
	
	Если ВключитьВСтоимость Тогда
		Если ОтражатьПоПартиям Тогда
			МассивСтоимость = ДанныеДляОбработки.ВыгрузитьКолонку("Стоимость");
			МассивКоличество = ДанныеДляОбработки.ВыгрузитьКолонку("Количество");
			МассивНДС = ДанныеДляОбработки.ВыгрузитьКолонку("НДС");
			Если не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
				МассивСерийНДС = ДанныеДляОбработки.ВыгрузитьКолонку("СерияНоменклатуры");
				МассивХарактеристикНДС = ДанныеДляОбработки.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
				
				ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("СерияНоменклатуры_Базовая"),"СерияНоменклатуры");
				ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("ХарактеристикаНоменклатуры_Базовая"),"ХарактеристикаНоменклатуры");
			КонецЕсли;
		КонецЕсли;
		Для каждого СтрокаТаблицыВключения Из ДанныеДляОбработки Цикл
					
			СформироватьПроводкиПоВключениюИсключениюНДСИзСтоимости(СтруктураШапкиДокумента,ВключитьВСтоимость,СтрокаТаблицыВключения,КолонкиТаблицыДанныхДляОбработки, СтруктураПараметров,Заголовок, , ОтражатьПоПартиям);
					
			Если ОтражатьПоПартиям Тогда
				СтрокаТаблицыВключения.Стоимость = СтрокаТаблицыВключения.Стоимость*(-1);
				СтрокаТаблицыВключения.Количество = СтрокаТаблицыВключения.Количество*(-1);
				СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС*(-1);
				Если ОсобыйПорядокОтражения_ст170НКРФ Тогда
					СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС - СтрокаТаблицыВключения.НДСКСписанию;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Если ОтражатьПоПартиям Тогда
			Если не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
				ДанныеДляОбработки.ЗагрузитьКолонку(МассивСерийНДС,"СерияНоменклатуры");
				ДанныеДляОбработки.ЗагрузитьКолонку(МассивХарактеристикНДС,"ХарактеристикаНоменклатуры");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляОбработки,ТаблицаДвиженийПартии);
			
			ДанныеДляОбработки.ЗаполнитьЗначения(Истина, "НДСВключенВСтоимость");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивСтоимость,"Стоимость");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивКоличество,"Количество");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивНДС,"НДС");
		КонецЕсли;
		
		Если ОсобыйПорядокОтражения_ст170НКРФ 
			и не (ДанныеДляОбработки.Итог("НДСКСписанию") = 0 и ДанныеДляОбработки.Итог("СуммаБезНДСКСписанию") = 0) Тогда
			// Корректировка таблицы данных для обработки для последующего отражения в регистре партионного учета
			ДанныеДляОбработки_КоличествоЗаписей = ДанныеДляОбработки.Количество();
			Для Счетчик = 1 По ДанныеДляОбработки_КоличествоЗаписей Цикл
				ИндексСтроки = ДанныеДляОбработки_КоличествоЗаписей - Счетчик;
				СтрокаДанных = ДанныеДляОбработки[ИндексСтроки];
				Если не СтрокаДанных.НДСКСписанию = 0  
					или не СтрокаДанных.СуммаБезНДСКСписанию = 0 
					Тогда
					//Требуется корректировка. Списанная сумма отражается как доп. расходы, но без указанаия счета-фактуры.
					ДополнительнаяСтрока = ДанныеДляОбработки.Вставить(ИндексСтроки+1);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаДанных);
					ДополнительнаяСтрока.Стоимость = ДополнительнаяСтрока.СуммаБезНДСКСписанию + ДополнительнаяСтрока.НДСКСписанию;
					ДополнительнаяСтрока.СуммаБезНДС = ДополнительнаяСтрока.СуммаБезНДСКСписанию;
					ДополнительнаяСтрока.СписаниеНДС = Истина;
					ДополнительнаяСтрока.НДС = ДополнительнаяСтрока.НДСКСписанию;
					ДополнительнаяСтрока.СчетФактура = Неопределено;
					ДополнительнаяСтрока.Количество = 0;
					
					СтрокаДанных.Стоимость = СтрокаДанных.СуммаБезНДС + СтрокаДанных.НДС; 
					
				КонецЕсли; 
			КонецЦикла; 
			ДанныеДляОбработки.Колонки.Удалить(ДанныеДляОбработки.Колонки.СуммаБезНДСКСписанию);
			ДанныеДляОбработки.Колонки.Удалить(ДанныеДляОбработки.Колонки.НДСКСписанию);
			
			
			// Корректировка таблицы списания для последующего использования.
			СтрокиКУдалению = Новый Массив;
			
			ТаблицаСписания_КоличествоЗаписей = ТаблицаСписания.Количество();
			Для Счетчик = 1 По ТаблицаСписания_КоличествоЗаписей Цикл
				ИндексСтроки = ТаблицаСписания_КоличествоЗаписей - Счетчик;
				СтрокаДанных = ТаблицаСписания[ИндексСтроки];
				Если СтрокаДанных.ДействияНДСПокупки_ВключитьВСтоимость тогда
					СтрокиТаблицы_ДанныеДляОбработки = ДанныеДляОбработки.НайтиСтроки(Новый Структура("QuieryId", СтрокаДанных.QuieryId));
					Если не СтрокиТаблицы_ДанныеДляОбработки.Количество() = 0  Тогда
						СтрокиКУдалению.Добавить(СтрокаДанных);
						Для каждого СтрокаТаблицы_ДанныеДляОбработки Из СтрокиТаблицы_ДанныеДляОбработки Цикл
							НоваяСтрока = ТаблицаСписания.Вставить(ИндексСтроки+1);
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы_ДанныеДляОбработки); 
							НоваяСтрока.КодОперацииПартииТоваров = СтрокаДанных.КодОперацииПартииТоваров;
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаСписания.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
		КонецЕсли; 
		
		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;

	Иначе
		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляОбработки,ТаблицаДвиженийПартии);
			Если не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
				МассивСерийНДС = ДанныеДляОбработки.ВыгрузитьКолонку("СерияНоменклатуры");
				МассивХарактеристикНДС = ДанныеДляОбработки.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
				
				ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("СерияНоменклатуры_Базовая"),"СерияНоменклатуры");
				ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("ХарактеристикаНоменклатуры_Базовая"),"ХарактеристикаНоменклатуры");
			КонецЕсли;
		КонецЕсли;
		Для каждого СтрокаТаблицыВключения Из ДанныеДляОбработки Цикл
				СформироватьПроводкиПоВключениюИсключениюНДСИзСтоимости(СтруктураШапкиДокумента,ВключитьВСтоимость, СтрокаТаблицыВключения,КолонкиТаблицыДанныхДляОбработки,СтруктураПараметров,Заголовок, , ОтражатьПоПартиям);
				
			Если ОтражатьПоПартиям Тогда
				СтрокаТаблицыВключения.Стоимость = СтрокаТаблицыВключения.Стоимость*(-1);
				СтрокаТаблицыВключения.Количество = СтрокаТаблицыВключения.Количество*(-1);
				СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС*(-1);
			КонецЕсли;
		КонецЦикла;
		Если ОтражатьПоПартиям Тогда
			Если не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
				ДанныеДляОбработки.ЗагрузитьКолонку(МассивСерийНДС,"СерияНоменклатуры");
				ДанныеДляОбработки.ЗагрузитьКолонку(МассивХарактеристикНДС,"ХарактеристикаНоменклатуры");
			КонецЕсли;

			ДанныеДляОбработки.ЗаполнитьЗначения(Ложь, "НДСВключенВСтоимость");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;
	КонецЕсли; 
	
	Если ОтражатьПоПартиям Тогда
		Если не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
			МассивСерийНДС = ДанныеДляОбработки.ВыгрузитьКолонку("СерияНоменклатуры");
			МассивХарактеристикНДС = ДанныеДляОбработки.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
			
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивСерийНДС,"СерияНоменклатуры");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивХарактеристикНДС,"ХарактеристикаНоменклатуры");
		КонецЕсли;
		СтрокиКУдалению = ТаблицаДвиженийПартии.НайтиСтроки(Новый Структура("Стоимость, НДС, Количество",0,0,0));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвиженийПартии.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
			Если ЗначениеЗаполнено(СтрокаСписания.СчетФактура) 
				 И ?(ВключитьВСтоимость,СтрокаСписания.ДействияНДСПокупки_ВключитьВСтоимость,СтрокаСписания.ДействияНДСПокупки_ИсключитьИзСтоимости) Тогда
				СтрокаСписания.НДСВключенВСтоимость = ВключитьВСтоимость;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	// Движения по НДС партии и по регистру бухгалтерии
	////////////////////////////////////////////////////////
	
	Для Каждого ВременнаяКолонка Из ВременныеКолонки Цикл
		ТаблицаСписания.Колонки.Удалить(ВременнаяКолонка);
	КонецЦикла;
	
	Если СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") Тогда
		СтруктураПараметров = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоПередачеТоваровИзОптаВРозницуЕНВД()

Процедура СформироватьПроводкиПоВключениюИсключениюНДСИзСтоимости(СтруктураШапкиДокумента,ВключитьВСтоимость = Истина, СтрокаСписания, КолонкиСтрокиСписания, СтруктураПараметров, Заголовок, ЭтоВозврат=Ложь, ОтражатьПоПартиям = Истина) 
	
	Если ВключитьВСтоимость Тогда
		ЕстьКолонкаНДСКСписанию = (не КолонкиСтрокиСписания.Найти("НДСКСписанию")= неопределено);
		
		ДляБУСписыватьНаРаcходы = (СтруктураШапкиДокумента.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.СписыватьНаРасходы);
		
		ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету = (ДляБУСписыватьНаРаcходы 
								или (СтруктураШапкиДокумента.Дата >='20060101' и СтруктураШапкиДокумента.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ));
		ДляНУСписыватьНаРаcходыЕслиНДСПринятКВычету = (СтруктураШапкиДокумента.Дата >='20060101');
	КонецЕсли; 
	
	Если СтрокаСписания.НДС = 0 и (не (ВключитьВСтоимость и ЕстьКолонкаНДСКСписанию и не СтрокаСписания.НДСКСписанию = 0)) тогда
		//Формирование проводки не требуется
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = "БУ: Не хватает данных для формирования проводки по "+?(ВключитьВСтоимость,"включению НДС в стоимость МПЗ","исключению НДС из стоимости МПЗ:");
	НедостаточноДанных = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтрокаСписания.СчетФактура) тогда
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете-фактуре";
	Иначе
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " счет-фактура <"+Строка(СтрокаСписания.СчетФактура)+">";
	
		Если (НЕ ЗначениеЗаполнено(СтрокаСписания.СчетУчетаНДС)) тогда
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете учета НДС";
			НедостаточноДанных = Истина;
		КонецЕсли;
		
		ИспользоватьКорСчетСписанияПриСписанииНаРасходы = ?(СтруктураШапкиДокумента.Свойство("ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат"),СтруктураШапкиДокумента.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат, Ложь);
		
		Если не ИспользоватьКорСчетСписанияПриСписанииНаРасходы Тогда
			// Для списания на расходы необходим "СчетСписанияНДС" в строке т.ч. 
			Если не СтруктураШапкиДокумента.Свойство("СчетСписанияНДС") Тогда
				ИспользоватьКорСчетСписанияПриСписанииНаРасходы = Истина;
			ИначеЕсли ВключитьВСтоимость 
				и (ДляБУСписыватьНаРаcходы // НДС списывается на отдельный счет
				или (ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету и (ЕстьКолонкаНДСКСписанию и не СтрокаСписания.НДСКСписанию = 0))) // Есть НДС к списанию на отдельный счет
				и ?(не СтруктураШапкиДокумента.Свойство("СчетСписанияНДС"),Истина,НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетСписанияНДС))
			 	Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете списания НДС (при отнесении на расходы)";
				НедостаточноДанных = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Для включения в стоимость (исключения из стоимости) необходим "КорСчетСписанияБУ" в строке т.ч. 
		Если ((ВключитьВСтоимость 
			и не ДляБУСписыватьНаРаcходы // НДС списывается на отдельный счет
			и не (ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету и СтрокаСписания.НДС = 0)) // НДС только к списанию на отдельный счет
			или не ВключитьВСтоимость или ИспользоватьКорСчетСписанияПриСписанииНаРасходы) 
			и ?(КолонкиСтрокиСписания.Найти("КорСчетСписанияБУ") = неопределено,Истина,НЕ ЗначениеЗаполнено(СтрокаСписания.КорСчетСписанияБУ))
		 	Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете отнесения себестоимости ТМЦ";
			НедостаточноДанных = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
		НаборЗаписей_Хозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписей_Хозрасчетный.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		НаборЗаписей_Налоговый = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
		НаборЗаписей_Налоговый.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;

	Если НедостаточноДанных Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке,, Заголовок,СтатусСообщения.Внимание);
	Иначе
	
		// отразим факт включения НДС в стоимость (исключения из стоимости) соотвествующей проводкой 
		Если (не ВключитьВСтоимость = ЭтоВозврат) Тогда

			Если ВключитьВСтоимость тогда
				Если ДляБУСписыватьНаРаcходы тогда
					СуммаКВключениюВСтоимость = 0;
					СуммаКСписанию = СтрокаСписания.НДС + ?(ЕстьКолонкаНДСКСписанию,СтрокаСписания.НДСКСписанию, 0);
				ИначеЕсли ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету тогда
					СуммаКВключениюВСтоимость = СтрокаСписания.НДС;
					СуммаКСписанию = ?(ЕстьКолонкаНДСКСписанию,СтрокаСписания.НДСКСписанию, 0);
				Иначе
					СуммаКВключениюВСтоимость = СтрокаСписания.НДС + ?(ЕстьКолонкаНДСКСписанию,СтрокаСписания.НДСКСписанию, 0);
					СуммаКСписанию = 0;
				КонецЕсли;
			Иначе
				СуммаКВключениюВСтоимость = СтрокаСписания.НДС;
				СуммаКСписанию = 0;
			КонецЕсли; 
				
			Если не СуммаКВключениюВСтоимость = 0 Тогда
				
				// отразим факт включения НДС в стоимость соотвествующей проводкой 
				//СтрокаДвиженияПроводка = НаборДвиженийХозрасчетный.Добавить();
				Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
					СтрокаДвиженияПроводка = СтруктураПараметров.ДвиженияХозрасчетный.Добавить();
					СтруктураПараметров.Вставить("ИзмененыДвиженияХозрасчетный", истина);
				Иначе
					СтрокаДвиженияПроводка = НаборЗаписей_Хозрасчетный.Добавить();
				КонецЕсли;
			 	СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;
				СтрокаДвиженияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаДвиженияПроводка.НомерЖурнала = "НДС";
				СтрокаДвиженияПроводка.НДСПродукции = Истина;

				МассивКоррСубконто = новый Массив(3);
				Для НомерСубконто=1 По 3 Цикл
					Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписанияБУ"+НомерСубконто)= Неопределено Тогда
						МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписанияБУ"+НомерСубконто];
					КонецЕсли;
				КонецЦикла; 
				
				СтатьяЗатрат = СтрокаСписания.СтатьяЗатрат;
		
				ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаСписания.КорСчетСписанияБУ);

				// проводка, отражающая включение НДС в стоимость
				СтрокаДвиженияПроводка.СчетДт = СтрокаСписания.КорСчетСписанияБУ; 
				
				Если ПроизводственныеРасходы Тогда
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Подразделения",        СтрокаСписания.ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаСписания.НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СтатьиЗатрат",         СтатьяЗатрат);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "ОбъектыСтроительства", СтрокаСписания.ОбъектСтроительства);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
				Иначе
					БухгалтерскийУчет.ЗаполнитьСубконто(СтрокаДвиженияПроводка, СтрокаСписания, 
									  МассивКоррСубконто[0],
									  МассивКоррСубконто[1],
									  МассивКоррСубконто[2]
									  );
				КонецЕсли;
								  
 				Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
					Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
						БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Номенклатура", 	СтрокаСписания.НоменклатураНовая);
					КонецЕсли;
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Номенклатура", 	СтрокаСписания.Номенклатура);
				КонецЕсли;
					
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Склады", 		СтрокаСписания.СкладПолучатель);

				СтрокаДвиженияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

				СтрокаДвиженияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС включен в стоимость МПЗ";
				СтрокаДвиженияПроводка.Сумма        = СуммаКВключениюВСтоимость;
				
				Если СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами
					Или СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Комплектация Тогда
					СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВключениеНДСВСтоимость;
				КонецЕсли;
				
				СтарыйНДС = СтрокаСписания.НДС;
				СтрокаСписания.НДС = СуммаКВключениюВСтоимость;
				
				// Движения по партиям товаров на складах
				УправлениеЗапасамиПартионныйУчет.ВключениеИсключениеНДСВСтоимостьПартииТоваров(СтрокаСписания, СтруктураПараметров, СтруктураШапкиДокумента, ВключитьВСтоимость, Истина, Ложь, ОтражатьПоПартиям);
				
				СтрокаСписания.НДС = СтарыйНДС;
				
			КонецЕсли;
			
			Если не СуммаКСписанию = 0 Тогда
				
				// отразим факт включения НДС в стоимость соотвествующей проводкой 
				//СтрокаДвиженияПроводка = НаборДвиженийХозрасчетный.Добавить();
				Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
					СтрокаДвиженияПроводка = СтруктураПараметров.ДвиженияХозрасчетный.Добавить();
					СтруктураПараметров.Вставить("ИзмененыДвиженияХозрасчетный", истина);
				Иначе
					СтрокаДвиженияПроводка = НаборЗаписей_Хозрасчетный.Добавить();
				КонецЕсли;					
			 	СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;
				СтрокаДвиженияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаДвиженияПроводка.НомерЖурнала = "НДС";
				СтрокаДвиженияПроводка.НДСПродукции = Истина;

				Если ИспользоватьКорСчетСписанияПриСписанииНаРасходы Тогда
					СчетСписания = СтрокаСписания.КорСчетСписанияБУ;
					НоменклатурнаяГруппа = СтрокаСписания.НоменклатурнаяГруппа;
					МассивКоррСубконто = новый Массив(3);
					Для НомерСубконто=1 По 3 Цикл
						Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписанияБУ"+НомерСубконто)= Неопределено Тогда
							МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписанияБУ"+НомерСубконто];
						КонецЕсли;
					КонецЦикла; 
					
					Если КолонкиСтрокиСписания.Найти("СтатьяЗатратНДС") <> Неопределено 
						И ЗначениеЗаполнено(СтрокаСписания.СтатьяЗатратНДС) Тогда
						СтатьяЗатрат = СтрокаСписания.СтатьяЗатратНДС;
					Иначе
						СтатьяЗатрат = СтрокаСписания.СтатьяЗатрат;
					КонецЕсли;
					ПодразделениеОрганизации = СтрокаСписания.ПодразделениеОрганизации;
				Иначе	
					СчетСписания = СтруктураШапкиДокумента.СчетСписанияНДС;
					МассивКоррСубконто = новый Массив(3);
					Для НомерСубконто=1 По 3 Цикл
						Если СтруктураШапкиДокумента.Свойство("СубконтоСписанияНДС"+НомерСубконто) Тогда
							МассивКоррСубконто[НомерСубконто-1] = СтруктураШапкиДокумента["СубконтоСписанияНДС"+НомерСубконто];
						КонецЕсли;
					КонецЦикла;
					СтатьяЗатрат = ?(СтруктураШапкиДокумента.Свойство("СтатьяЗатратСписанияНДС"),СтруктураШапкиДокумента.СтатьяЗатратСписанияНДС,
										?(КолонкиСтрокиСписания.Найти("СчетЗатратНДС") <> Неопределено И ЗначениеЗаполнено(СтрокаСписания.СтатьяЗатратНДС), СтрокаСписания.СтатьяЗатратНДС, СтрокаСписания.СтатьяЗатрат));
					НоменклатурнаяГруппа = ?(СтруктураШапкиДокумента.Свойство("НоменклатурнаяГруппа"),СтруктураШапкиДокумента.НоменклатурнаяГруппа, СтрокаСписания.НоменклатурнаяГруппа);
					ПодразделениеОрганизации = ?(СтруктураШапкиДокумента.Свойство("ПодразделениеОрганизации"),СтруктураШапкиДокумента.ПодразделениеОрганизации, СтрокаСписания.ПодразделениеОрганизации);
				КонецЕсли; 
				
				ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетСписания);

				// проводка, отражающая Списание НДС на расходы
				СтрокаДвиженияПроводка.СчетДт = СчетСписания; 
				
				Если ПроизводственныеРасходы Тогда
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Подразделения",        ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "НоменклатурныеГруппы", НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СтатьиЗатрат",         СтатьяЗатрат);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "ОбъектыСтроительства", СтрокаСписания.ОбъектСтроительства);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
				Иначе                                 
					БухгалтерскийУчет.ЗаполнитьСубконто(СтрокаДвиженияПроводка, СтрокаСписания, 
									  МассивКоррСубконто[0],
									  МассивКоррСубконто[1],
									  МассивКоррСубконто[2]
									  );
				КонецЕсли;
								  
				 Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
					Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
						БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Номенклатура", 	СтрокаСписания.НоменклатураНовая);
					КонецЕсли;
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Номенклатура", 	СтрокаСписания.Номенклатура);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Склады", 			СтрокаСписания.СкладПолучатель);

				СтрокаДвиженияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

				СтрокаДвиженияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС списан на расходы";
				СтрокаДвиженияПроводка.Сумма        = СуммаКСписанию;
				
				// Движения по партиям товаров на складах.
				СтароеПодразделениеОрганизации 	= СтрокаСписания.ПодразделениеОрганизации;
				СтараяСтатьяЗатрат				= СтрокаСписания.СтатьяЗатрат;
				СтараяНоменклатурнаяГруппа		= СтрокаСписания.НоменклатурнаяГруппа;
				СтарыйКорСчетБУ					= СтрокаСписания.КорСчетБУ;
				СтарыйНДС						= СтрокаСписания.НДС;
				СтарыйКодОперацииПартииТоваров	= СтрокаСписания.КодОперацииПартииТоваров;
				
				СтрокаСписания.ПодразделениеОрганизации = ПодразделениеОрганизации;
				СтрокаСписания.СтатьяЗатрат 			= СтатьяЗатрат;
				СтрокаСписания.НоменклатурнаяГруппа 	= НоменклатурнаяГруппа;
				СтрокаСписания.КорСчетБУ 				= СчетСписания;
				СтрокаСписания.НДС 						= СуммаКСписанию;
				
				ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетСписания, СтатьяЗатрат);
				Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
					СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеПартийВПроизводствоОперативно;
				ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
					СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаБрак;
				ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
					СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаВложенияВоВнеоборотныеАктивы;
				ИначеЕсли ХарактерЗатрат <> Перечисления.ХарактерЗатрат.Прочие И ЗначениеЗаполнено(СтатьяЗатрат) Тогда
					СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты;
				Иначе
					СтрокаСписания.КодОперацииПартииТоваров = Неопределено;
				КонецЕсли;
					
				УправлениеЗапасамиПартионныйУчет.ВключениеИсключениеНДСВСтоимостьПартииТоваров(СтрокаСписания, СтруктураПараметров, СтруктураШапкиДокумента, ВключитьВСтоимость, Истина, Ложь, ОтражатьПоПартиям);
				
				СтрокаСписания.ПодразделениеОрганизации = СтароеПодразделениеОрганизации;
				СтрокаСписания.СтатьяЗатрат 			= СтараяСтатьяЗатрат;
				СтрокаСписания.НоменклатурнаяГруппа 	= СтараяНоменклатурнаяГруппа;
				СтрокаСписания.КорСчетБУ 				= СтарыйКорСчетБУ;
				СтрокаСписания.НДС 						= СтарыйНДС;
				СтрокаСписания.КодОперацииПартииТоваров	= СтарыйКодОперацииПартииТоваров;
				
			КонецЕсли; 
		
		ИначеЕсли (ВключитьВСтоимость =  ЭтоВозврат) тогда

			МассивКоррСубконто = новый Массив(3);
			Для НомерСубконто=1 По 3 Цикл
				Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписанияБУ"+НомерСубконто)= Неопределено Тогда
					МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписанияБУ"+НомерСубконто];
				КонецЕсли;
			КонецЦикла; 
			
			// обратная проводка, отражающая исключение НДС из стоимости при
			// передаче из розницы ЕНВД в опт

			Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
				СтрокаДвиженияПроводка = СтруктураПараметров.ДвиженияХозрасчетный.Добавить();
				СтруктураПараметров.Вставить("ИзмененыДвиженияХозрасчетный", истина);
			Иначе
				СтрокаДвиженияПроводка = НаборЗаписей_Хозрасчетный.Добавить();
			КонецЕсли;				
			СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;
			СтрокаДвиженияПроводка.Организация  = СтрокаСписания.Организация;
			СтрокаДвиженияПроводка.НомерЖурнала = "НДС";
			СтрокаДвиженияПроводка.НДСПродукции = Истина;
			
			ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаСписания.КорСчетСписанияБУ);
			
			СтрокаДвиженияПроводка.СчетДт = СтрокаСписания.КорСчетСписанияБУ; 
			
			Если ПроизводственныеРасходы Тогда
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Подразделения",        СтрокаСписания.ПодразделениеОрганизации);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаСписания.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СтатьиЗатрат",         СтрокаСписания.СтатьяЗатрат);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "ОбъектыСтроительства", СтрокаСписания.ОбъектСтроительства);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
			Иначе
				БухгалтерскийУчет.ЗаполнитьСубконто(СтрокаДвиженияПроводка, СтрокаСписания,
								  МассивКоррСубконто[0],
								  МассивКоррСубконто[1],
								  МассивКоррСубконто[2]
								   ,,,);
			КонецЕсли;
							   
				 Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
					Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
						БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Номенклатура", 	СтрокаСписания.НоменклатураНовая);
					КонецЕсли;
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Номенклатура", 	СтрокаСписания.Номенклатура);
				КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Склады", 			СтрокаСписания.СкладПолучатель);

	 		СтрокаДвиженияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

			СтрокаДвиженияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС исключен из стоимости МПЗ";
			СтрокаДвиженияПроводка.Сумма        = СтрокаСписания.НДС;
			
			// Движения по партиям товаров на складах
			СтарыйКодОперацииПартииТоваров	= СтрокаСписания.КодОперацииПартииТоваров;
				
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаСписания.КорСчетСписанияБУ, СтрокаСписания.СтатьяЗатрат);
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеПартийВПроизводствоОперативно;
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
				СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаБрак;
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
				СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаВложенияВоВнеоборотныеАктивы;
			ИначеЕсли ХарактерЗатрат <> Перечисления.ХарактерЗатрат.Прочие И ЗначениеЗаполнено(СтрокаСписания.СтатьяЗатрат) Тогда
				СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты;
			КонецЕсли;
			
			УправлениеЗапасамиПартионныйУчет.ВключениеИсключениеНДСВСтоимостьПартииТоваров(СтрокаСписания, СтруктураПараметров, СтруктураШапкиДокумента, ВключитьВСтоимость, Истина, Ложь, ОтражатьПоПартиям);
			
			СтрокаСписания.КодОперацииПартииТоваров	= СтарыйКодОперацииПартииТоваров;

		КонецЕсли;

	КонецЕсли; 

	Если ?(КолонкиСтрокиСписания.Найти("ОтражатьВНалоговомУчете") <> Неопределено, СтрокаСписания.ОтражатьВНалоговомУчете,
		?(СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете"), СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, Ложь)) Тогда
		
		СообщениеОбОшибке = "НУ: Не хватает данных для формирования проводки по "+?(ВключитьВСтоимость,"включению НДС в стоимость МПЗ","исключению НДС из стоимости МПЗ:");
		НедостаточноДанных = Ложь;
		
		КорСчетСписанияБУ_ЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаСписания.КорСчетСписанияБУ);
		СчетСписанияНДСБУ_ЕНВД = ?(СтруктураШапкиДокумента.Свойство("СчетСписанияНДС"), ?(НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетСписанияНДС),КорСчетСписанияБУ_ЕНВД,НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтруктураШапкиДокумента.СчетСписанияНДС)),КорСчетСписанияБУ_ЕНВД);
		
		ИспользоватьКорСчетСписанияПриСписанииНаРасходы = ?(СтруктураШапкиДокумента.Свойство("ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат"),СтруктураШапкиДокумента.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат, Ложь);
		
		// Для включения в стоимость (исключения из стоимости) необходим "КорСчетСписанияНУ" в строке т.ч. 
		Если ((ВключитьВСтоимость 
			и не (ДляНУСписыватьНаРаcходыЕслиНДСПринятКВычету и СтрокаСписания.НДС = 0)) // НДС только к списанию на отдельный счет
			или не ВключитьВСтоимость) 
			и (?(КолонкиСтрокиСписания.Найти("КорСчетСписанияНУ") = неопределено, Истина,НЕ ЗначениеЗаполнено(СтрокаСписания.КорСчетСписанияНУ)) и не КорСчетСписанияБУ_ЕНВД)
		 	Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете отнесения себестоимости ТМЦ";
			НедостаточноДанных = Истина;
		КонецЕсли;
		
		Если не ИспользоватьКорСчетСписанияПриСписанииНаРасходы Тогда
			// Для списания на расходы необходим "СчетСписанияНДСНУ" в строке т.ч. 
			Если не СтруктураШапкиДокумента.Свойство("СчетСписанияНДСНУ") Тогда
				ИспользоватьКорСчетСписанияПриСписанииНаРасходы = Истина;
			ИначеЕсли ВключитьВСтоимость 
				и ДляНУСписыватьНаРаcходыЕслиНДСПринятКВычету
				и (ЕстьКолонкаНДСКСписанию и не СтрокаСписания.НДСКСписанию = 0) // Есть НДС к списанию на отдельный счет
				и (?(не СтруктураШапкиДокумента.Свойство("СчетСписанияНДСНУ"), Истина,
				НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетСписанияНДСНУ)) и не СчетСписанияНДСБУ_ЕНВД)
			 	Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете списания НДС (при отнесении на расходы)";
					НедостаточноДанных = Истина;
			КонецЕсли;
		КонецЕсли; 
			
		Если НедостаточноДанных Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке,, Заголовок,СтатусСообщения.Внимание);
		Иначе
			Если (не ВключитьВСтоимость = ЭтоВозврат) тогда
				Если не СтрокаСписания.НДС = 0 	Тогда
				// отразим факт включения НДС в стоимость соотвествующей проводкой 
				МассивКоррСубконто = новый Массив(3);
				Для НомерСубконто=1 По 3 Цикл
					Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписанияНУ"+НомерСубконто)= Неопределено Тогда
						МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписанияНУ"+НомерСубконто];
					КонецЕсли;
				КонецЦикла; 
			
				ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаСписания.КорСчетСписанияНУ, "Налоговый");

				// проводка, отражающая включение НДС в стоимость
				Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
					СтрокаДвиженияПроводка = СтруктураПараметров.ДвиженияНалоговый.Добавить();
					СтруктураПараметров.Вставить("ИзмененыДвиженияНалоговый", истина);
				Иначе
					СтрокаДвиженияПроводка = НаборЗаписей_Налоговый.Добавить();
				КонецЕсли;
				СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;
				СтрокаДвиженияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаДвиженияПроводка.НомерЖурнала = "НДС";
				СтрокаДвиженияПроводка.СчетДт = СтрокаСписания.КорСчетСписанияНУ; 
				
				Если ПроизводственныеРасходы Тогда
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Подразделения",        СтрокаСписания.ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаСписания.НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СтатьиЗатрат",         СтатьяЗатрат);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "ОбъектыСтроительства", СтрокаСписания.ОбъектСтроительства);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
				Иначе
					БухгалтерскийУчет.ЗаполнитьСубконто(СтрокаДвиженияПроводка, СтрокаСписания, 
									  МассивКоррСубконто[0],
									  МассивКоррСубконто[1],
									  МассивКоррСубконто[2]
									  );
				КонецЕсли;
								  
				 Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
					Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
						БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Номенклатура", 	СтрокаСписания.НоменклатураНовая);
					КонецЕсли;
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Номенклатура", 	СтрокаСписания.Номенклатура);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Склады", 			СтрокаСписания.СкладПолучатель);				  
								  
				СтрокаДвиженияПроводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав; 
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Договоры", СтрокаСписания.СчетФактураДоговорКонтрагента);
								  
				СтрокаДвиженияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС включен в стоимость МПЗ";
				СтрокаДвиженияПроводка.Сумма        = СтрокаСписания.НДС;
				СтрокаДвиженияПроводка.СписаниеПартийНДС = Истина;
				
				Если СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами
					Или СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Комплектация Тогда
					СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВключениеНДСВСтоимость;
				КонецЕсли;
				
				// Движения по партиям товаров на складах
				УправлениеЗапасамиПартионныйУчет.ВключениеИсключениеНДСВСтоимостьПартииТоваров(СтрокаСписания, СтруктураПараметров, СтруктураШапкиДокумента, ВключитьВСтоимость, Ложь, Истина, ОтражатьПоПартиям);
				
			КонецЕсли;
			
			Если не ?(ЕстьКолонкаНДСКСписанию,СтрокаСписания.НДСКСписанию, 0) = 0 тогда
				// отразим факт включения НДС в стоимость соотвествующей проводкой 
				//СтрокаДвиженияПроводка = НаборДвиженийХозрасчетный.Добавить();
				Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
					СтрокаДвиженияПроводка = СтруктураПараметров.ДвиженияНалоговый.Добавить();
					СтруктураПараметров.Вставить("ИзмененыДвиженияНалоговый", истина);
				Иначе
					СтрокаДвиженияПроводка = НаборЗаписей_Налоговый.Добавить();
				КонецЕсли;					
			 	СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;
				СтрокаДвиженияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаДвиженияПроводка.НомерЖурнала = "НДС";

				Если ИспользоватьКорСчетСписанияПриСписанииНаРасходы Тогда
					СчетСписания = СтрокаСписания.КорСчетСписанияНУ;
					НоменклатурнаяГруппа = СтрокаСписания.НоменклатурнаяГруппа;
					МассивКоррСубконто = новый Массив(3);
					Для НомерСубконто=1 По 3 Цикл
						Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписанияНУ"+НомерСубконто)= Неопределено Тогда
							МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписанияНУ"+НомерСубконто];
						КонецЕсли;
					КонецЦикла; 
					
					Если КолонкиСтрокиСписания.Найти("СчетЗатратНДС") <> Неопределено 
						И ЗначениеЗаполнено(СтрокаСписания.СтатьяЗатратНДС) Тогда
						СтатьяЗатрат = СтрокаСписания.СтатьяЗатратНДС;
					Иначе
						СтатьяЗатрат = СтрокаСписания.СтатьяЗатрат;
					КонецЕсли;
					ПодразделениеОрганизации = СтрокаСписания.ПодразделениеОрганизации;
				Иначе	
					СчетСписания = СтруктураШапкиДокумента.СчетСписанияНДСНУ;
					МассивКоррСубконто = новый Массив(3);
					Для НомерСубконто=1 По 3 Цикл
						Если СтруктураШапкиДокумента.Свойство("СубконтоСписанияНДСНУ"+НомерСубконто) Тогда
							МассивКоррСубконто[НомерСубконто-1] = СтруктураШапкиДокумента["СубконтоСписанияНДСНУ"+НомерСубконто];
						КонецЕсли;
					КонецЦикла;
					СтатьяЗатрат = ?(СтруктураШапкиДокумента.Свойство("СтатьяЗатратСписанияНДС"),СтруктураШапкиДокумента.СтатьяЗатратСписанияНДС,
										?(КолонкиСтрокиСписания.Найти("СчетЗатратНДС") <> Неопределено И ЗначениеЗаполнено(СтрокаСписания.СтатьяЗатратНДС), СтрокаСписания.СтатьяЗатратНДС, СтрокаСписания.СтатьяЗатрат));
					НоменклатурнаяГруппа = ?(СтруктураШапкиДокумента.Свойство("НоменклатурнаяГруппа"),СтруктураШапкиДокумента.НоменклатурнаяГруппа, СтрокаСписания.НоменклатурнаяГруппа);
					ПодразделениеОрганизации = ?(СтруктураШапкиДокумента.Свойство("ПодразделениеОрганизации"),СтруктураШапкиДокумента.ПодразделениеОрганизации, СтрокаСписания.ПодразделениеОрганизации);
				КонецЕсли; 
				
				ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетСписания, "Налоговый");

				// проводка, отражающая Списание НДС на расходы
				СтрокаДвиженияПроводка.СчетДт = СчетСписания; 
				
				Если ПроизводственныеРасходы Тогда
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Подразделения",        ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "НоменклатурныеГруппы", НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СтатьиЗатрат",         СтатьяЗатрат);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "ОбъектыСтроительства", СтрокаСписания.ОбъектСтроительства);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
				Иначе
					БухгалтерскийУчет.ЗаполнитьСубконто(СтрокаДвиженияПроводка, СтрокаСписания, 
									  МассивКоррСубконто[0],
									  МассивКоррСубконто[1],
									  МассивКоррСубконто[2]
									  );
				КонецЕсли;
								  
				 Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
					Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
						БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Номенклатура", 	СтрокаСписания.НоменклатураНовая);
					КонецЕсли;
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Номенклатура", 	СтрокаСписания.Номенклатура);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Склады", 			СтрокаСписания.СкладПолучатель);

				СтрокаДвиженияПроводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав; 
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Договоры", СтрокаСписания.СчетФактураДоговорКонтрагента);

				СтрокаДвиженияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС списан на расходы";
				СтрокаДвиженияПроводка.Сумма        = СтрокаСписания.НДСКСписанию;
				СтрокаДвиженияПроводка.СписаниеПартийНДС = Истина;
				
				// Движения по партиям товаров на складах.
				СтароеПодразделениеОрганизации 	= СтрокаСписания.ПодразделениеОрганизации;
				СтараяСтатьяЗатрат				= СтрокаСписания.СтатьяЗатрат;
				СтараяНоменклатурнаяГруппа		= СтрокаСписания.НоменклатурнаяГруппа;
				СтарыйКорСчетНУ					= СтрокаСписания.КорСчетНУ;
				СтарыйНДС						= СтрокаСписания.НДС;
				СтарыйКодОперацииПартииТоваров	= СтрокаСписания.КодОперацииПартииТоваров;
				
				СтрокаСписания.ПодразделениеОрганизации = ПодразделениеОрганизации;
				СтрокаСписания.СтатьяЗатрат 			= СтатьяЗатрат;
				СтрокаСписания.НоменклатурнаяГруппа 	= НоменклатурнаяГруппа;
				СтрокаСписания.КорСчетНУ 				= СчетСписания;
				СтрокаСписания.НДС 						= СуммаКСписанию;
				
				ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетСписания, СтатьяЗатрат, "Налоговый");
				Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
					СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеПартийВПроизводствоОперативно;
				ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
					СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаБрак;
				ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
					СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаВложенияВоВнеоборотныеАктивы;
				ИначеЕсли ХарактерЗатрат <> Перечисления.ХарактерЗатрат.Прочие И ЗначениеЗаполнено(СтатьяЗатрат) Тогда
					СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты;
				Иначе
					СтрокаСписания.КодОперацииПартииТоваров = Неопределено;
				КонецЕсли;
					
				УправлениеЗапасамиПартионныйУчет.ВключениеИсключениеНДСВСтоимостьПартииТоваров(СтрокаСписания, СтруктураПараметров, СтруктураШапкиДокумента, ВключитьВСтоимость, Ложь, Истина, ОтражатьПоПартиям);
				
				СтрокаСписания.ПодразделениеОрганизации = СтароеПодразделениеОрганизации;
				СтрокаСписания.СтатьяЗатрат 			= СтараяСтатьяЗатрат;
				СтрокаСписания.НоменклатурнаяГруппа 	= СтараяНоменклатурнаяГруппа;
				СтрокаСписания.КорСчетНУ 				= СтарыйКорСчетНУ;
				СтрокаСписания.НДС 						= СтарыйНДС;
				СтрокаСписания.КодОперацииПартииТоваров	= СтарыйКодОперацииПартииТоваров;
				
			КонецЕсли;
			
		ИначеЕсли ВключитьВСтоимость = ЭтоВозврат тогда

			МассивКоррСубконто = новый Массив(3);
			Для НомерСубконто=1 По 3 Цикл
				Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписанияНУ"+НомерСубконто)= Неопределено Тогда
					МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписанияНУ"+НомерСубконто];
				КонецЕсли;
			КонецЦикла; 
			
			ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(СтатьяЗатрат);
			// обратная проводка, отражающая исключение НДС из стоимости при
			// передаче из розницы ЕНВД в опт
			Если не СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
				СтрокаДвиженияПроводка = СтруктураПараметров.ДвиженияНалоговый.Добавить();
				СтруктураПараметров.Вставить("ИзмененыДвиженияНалоговый", истина);
			Иначе
				СтрокаДвиженияПроводка = НаборЗаписей_Налоговый.Добавить();
			КонецЕсли;
			СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;
			СтрокаДвиженияПроводка.Организация  = СтрокаСписания.Организация;
			
			ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаСписания.КорСчетСписанияНУ, "Налоговый");

			СтрокаДвиженияПроводка.СчетДт = СтрокаСписания.КорСчетСписанияНУ; 
			
			Если ПроизводственныеРасходы Тогда
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Подразделения",        СтрокаСписания.ПодразделениеОрганизации);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаСписания.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СтатьиЗатрат",         СтрокаСписания.СтатьяЗатрат);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "ОбъектыСтроительства", СтрокаСписания.ОбъектСтроительства);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
			Иначе
				БухгалтерскийУчет.ЗаполнитьСубконто(СтрокаДвиженияПроводка, СтрокаСписания,
								  МассивКоррСубконто[0],
								  МассивКоррСубконто[1],
								  МассивКоррСубконто[2]
								   ,,,);
			КонецЕсли;

			 Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
				Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
					БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Номенклатура", 	СтрокаСписания.НоменклатураНовая);
				КонецЕсли;
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Номенклатура", 	СтрокаСписания.Номенклатура);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Склады", 			СтрокаСписания.СкладПолучатель);				   
							   
			СтрокаДвиженияПроводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав; 
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Договоры", СтрокаСписания.СчетФактураДоговорКонтрагента);
			
			СтрокаДвиженияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС исключен из стоимости МПЗ";
			СтрокаДвиженияПроводка.Сумма        = СтрокаСписания.НДС;
			СтрокаДвиженияПроводка.СписаниеПартийНДС = Истина;
			
			// Движения по партиям товаров на складах
			СтарыйКодОперацииПартииТоваров	= СтрокаСписания.КодОперацииПартииТоваров;
				
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаСписания.КорСчетСписанияНУ, СтрокаСписания.СтатьяЗатрат, "Налоговый");
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеПартийВПроизводствоОперативно;
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
				СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаБрак;
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
				СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаВложенияВоВнеоборотныеАктивы;
			ИначеЕсли ХарактерЗатрат <> Перечисления.ХарактерЗатрат.Прочие И ЗначениеЗаполнено(СтрокаСписания.СтатьяЗатрат) Тогда
				СтрокаСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты;
			//Иначе
			//	СтрокаСписания.КодОперацииПартииТоваров = Неопределено;
			КонецЕсли;
			
			УправлениеЗапасамиПартионныйУчет.ВключениеИсключениеНДСВСтоимостьПартииТоваров(СтрокаСписания, СтруктураПараметров, СтруктураШапкиДокумента, ВключитьВСтоимость, Ложь, Истина, ОтражатьПоПартиям);
			
			СтрокаСписания.КодОперацииПартииТоваров	= СтарыйКодОперацииПартииТоваров;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	Если СтруктураПараметров.Свойство("СтруктураСодержитНаборыЗаписей") тогда
		НаборЗаписей_Хозрасчетный.Записать(ложь);
		НаборЗаписей_Налоговый.Записать(ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьТаблицуПартийДляНДС(СтруктураШапкиДокумента, ТаблицаПартий)
	
	Если ТаблицаПартий.Колонки.Найти("Партия") = Неопределено тогда 
		ТаблицаПартий.Колонки.Добавить("Партия");
		ТаблицаПартий.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"Партия");
	КонецЕсли;
	
	Если ТаблицаПартий.Колонки.Найти("Склад") = Неопределено тогда 
		ТаблицаПартий.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		Если СтруктураШапкиДокумента.Свойство("Склад") Тогда
			ТаблицаПартий.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,"Склад");
		ИначеЕсли СтруктураШапкиДокумента.Свойство("СкладОрдер") Тогда
			Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				ТаблицаПартий.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладОрдер,"Склад");
			Иначе
				ТаблицаПартий.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладПриходногоОрдера,"Склад");
			КонецЕсли;
		КонецЕсли; 
	Иначе
		СкладИзШапкиДокумента = Неопределено;
		Если СтруктураШапкиДокумента.Свойство("Склад") Тогда
			СкладИзШапкиДокумента = СтруктураШапкиДокумента.Склад;
		ИначеЕсли СтруктураШапкиДокумента.Свойство("СкладОрдер") Тогда
			Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				СкладИзШапкиДокумента = СтруктураШапкиДокумента.СкладОрдер;
			Иначе
				СкладИзШапкиДокумента = СтруктураШапкиДокумента.СкладПриходногоОрдера;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СкладИзШапкиДокумента) Тогда
			Для Каждого Строка Из ТаблицаПартий Цикл
				Если Не ЗначениеЗаполнено(Строка.Склад) Тогда
					Строка.Склад = СкладИзШапкиДокумента;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	Если ТаблицаПартий.Колонки.Найти("Услуга") = Неопределено Тогда 
		ТаблицаПартий.Колонки.Добавить("Услуга", Новый описаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаПартий.Колонки.Найти("НДСВключенВСтоимость") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));
		Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") Тогда
			ТаблицаПартий.ЗаполнитьЗначения(СтруктураШапкиДокумента.НДСВключенВСтоимость, "НДСВключенВСтоимость");
		КонецЕсли; 
	КонецЕсли;
	
	Если ТаблицаПартий.Колонки.Найти("СчетФактура") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("СчетФактура");
		Если Не СтруктураШапкиДокумента.ВидДокумента = "ПолучениеУслугПоПереработке" 
			И Не СтруктураШапкиДокумента.ВидДокумента = "ВыпускПродукции" Тогда
			ТаблицаПартий.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "СчетФактура");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаПартий.Колонки.Найти("СчетУчетаНДС") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("СчетУчетаНДС");
		Если СтруктураШапкиДокумента.Свойство("СчетУчетаНДС") Тогда
		    ТаблицаПартий.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНДС, "СчетУчетаНДС");
		КонецЕсли; 
	КонецЕсли;
	
	Если ТаблицаПартий.Колонки.Найти("СтавкаНДС") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("СтавкаНДС");
		Если СтруктураШапкиДокумента.Свойство("СтавкаНДС") Тогда
		    ТаблицаПартий.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтавкаНДС, "СтавкаНДС");
		КонецЕсли; 
	КонецЕсли;
	
	// Добавим колонки для обработки заказа покупателя.
	Если ТаблицаПартий.Колонки.Найти("ОбособленныйУчетТоваровПоЗаказамПокупателей") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
		ТаблицаПартий.ЗаполнитьЗначения(Ложь,"ОбособленныйУчетТоваровПоЗаказамПокупателей");
	КонецЕсли;
	
	Если ТаблицаПартий.Колонки.Найти("ЗаказПокупателя")= Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("ЗаказПокупателя");
		ТаблицаПартий.ЗаполнитьЗначения(Неопределено,"ЗаказПокупателя");
	КонецЕсли;
	
	Если ТаблицаПартий.Колонки.Найти("ВидЦенности")= Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	КонецЕсли;
	
	Если ТаблицаПартий.Колонки.Найти("СчетУчетаЦенности")= Неопределено Тогда
		Если ТаблицаПартий.Колонки.Найти("СчетУчетаБУ") <> Неопределено Тогда
			ТаблицаПартий.Колонки.СчетУчетаБУ.Имя = "СчетУчетаЦенности";
		Иначе
			ТаблицаПартий.Колонки.Добавить("СчетУчетаЦенности", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРУ НДС ПО ПАРТИЯМ ЗАПАСОВ, ПАРТИОННЫЙ УЧЕТ ДЛЯ НДС
// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// Непосредственное заполнение таблицы движений для регистра "НДСПартииТоваров"
// Данные движения необходимо делать в следующих случаях:
// 1. Когда ведется сложный учет НДС и происходит приходование товаров или материалов.
//    Это соответсвтвует ситуации когда у организации существуют виды деятельности, 
//    облагаемые НДС по-разному, например обычный НДС, НДС по ставке 0%, и т.п.).
// 2. Когда происходит оприходование оборудования, требуегощего монтажа (бухсчет 07)
//    для того чтобы впоследствии, можно было правильно рассчитать суммы для отражения в 
//    регистре НДССтроительство при передаче этого оборудования в монтаж.
Процедура СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаПартий, ТаблицаДвиженийНДСПартии = Неопределено, Отказ) Экспорт
	
	Если ТаблицаПартий.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	Движения = Неопределено;
	
	Если ТаблицаДвиженийНДСПартии = Неопределено Тогда
		
		Движения = Новый Структура();
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСПартииТоваров", СтруктураШапкиДокумента.Ссылка);
		ТаблицаДвиженийНДСПартии = Движения.НДСПартииТоваров.Выгрузить();
		
	КонецЕсли;
	
	УчетНДС.ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, Истина);
	
	ДополнитьТаблицуПартийДляНДС(СтруктураШапкиДокумента, ТаблицаПартий);

	ЕстьКолонкаСтоимость = ТаблицаПартий.Колонки.Найти("Стоимость") <> Неопределено;
	ЕстьКолонкаСуммаБезНДС = ТаблицаПартий.Колонки.Найти("СуммаБезНДС") <> Неопределено;
	ЕстьКолонкаНДС = ТаблицаПартий.Колонки.Найти("НДС") <> Неопределено;
	ЕстьКолонкаКодОперации = ТаблицаПартий.Колонки.Найти("КодОперацииПартииТоваров") <> Неопределено;
	ЭтоПередачаНаКомиссию = СтруктураШапкиДокумента.Свойство("ВидДоговора")  
							И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	
	ТаблицаПартий.Свернуть("СчетФактура, Партия, Склад, ВидЦенности, СчетУчетаЦенности, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры,
						|НДСВключенВСтоимость, Услуга, СчетУчетаНДС, СтавкаНДС, ОбособленныйУчетТоваровПоЗаказамПокупателей, ЗаказПокупателя"
						+ ?(ЕстьКолонкаКодОперации,", КодОперацииПартииТоваров",""),
						"Количество" + ?(ЕстьКолонкаСтоимость, ", Стоимость", "") + ?(ЕстьКолонкаСуммаБезНДС, ", СуммаБезНДС", "") + ?(ЕстьКолонкаНДС, ", НДС", ""));
						
	Если Не СтруктураШапкиДокумента.СложныйУчетНДС Тогда					
		СчетаУчетаОС = УчетНДС.ОпределитьСчетаУчетаОСиНМА("ОС");
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Забалансовый = ИСТИНА";
	
	ЗабалансовыеСчета = Новый СписокЗначений;
	ЗабалансовыеСчета.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
		
	Для Каждого СтрокаДок из ТаблицаПартий Цикл
		
		Если ЗабалансовыеСчета.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) <> Неопределено
			Или Не ЗначениеЗаполнено(СтрокаДок.СчетУчетаЦенности) Тогда
			// Для товаров, учитываемых на забалансовых счетах учет НДС не ведется.
			Продолжить;
		
		ИначеЕсли СтруктураШапкиДокумента.СложныйУчетНДС Тогда
			//При сложном учете НДС все партии приобретенных ТМЦ учитываются в регистре.

		ИначеЕсли СчетаУчетаОС.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) <> Неопределено
			Тогда
			// По ОС партионный учет ведется всегда.
		Иначе 
			// Если не сложный учет НДС и не ОС, то не отражается в регистре партий.
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвиженийНДСПартии.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаДок);
		СтрокаДвижения.Активность = Истина;
		СтрокаДвижения.Период = СтруктураШапкиДокумента.Дата;
		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		
		Если Не УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаДок.СчетУчетаЦенности) Тогда
			СтрокаДвижения.Склад = Неопределено;
		КонецЕсли; 
		
		Если ЭтоПередачаНаКомиссию Тогда
			
			// При передаче на комиссию учет по сериям не ведётся
			СтрокаДвижения.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			Если Не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
				СтрокаДвижения.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
		ИначеЕсли Не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
			
			СтрокаДвижения.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			СтрокаДвижения.СерияНоменклатуры =  Справочники.СерииНоменклатуры.ПустаяСсылка();
			
		ИначеЕсли Не СтрокаДок.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			
			СтрокаДвижения.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			
		КонецЕсли;
		
		СтрокаДвижения.СчетУчета	= СтрокаДок.СчетУчетаЦенности;
		
		Если Не ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
		    СтрокаДвижения.СчетФактура	= Неопределено;
		КонецЕсли;
		
		Если СтрокаДок.Услуга Тогда
			СтрокаДвижения.Количество =	0;
		КонецЕсли;
		
		ОбособленныйУчет = СтрокаДок.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		СтрокаДвижения.Заказ = ?(ОбособленныйУчет <> NULL И ОбособленныйУчет <> Неопределено И ОбособленныйУчет 
								 И ЗначениеЗаполнено(СтрокаДок.ЗаказПокупателя), СтрокаДок.ЗаказПокупателя, Неопределено);
								 
		// При выпуске готовой продукции из давальческого сырья склад не указывается.
		Если ТипЗнч(СтрокаДок.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") 
			И ЗначениеЗаполнено(СтрокаДок.ЗаказПокупателя) 
			И (СтруктураШапкиДокумента.ВидДокумента = "ОтчетПроизводстваЗаСмену" 
				Или СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеТоваровИзПереработки") Тогда
				
			Если СтрокаДок.ЗаказПокупателя.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
					
				СтрокаДвижения.Склад = Неопределено;
				СтрокаДвижения.Заказ = СтрокаДок.ЗаказПокупателя;
				
			КонецЕсли;
			
		ИначеЕсли ЕстьКолонкаКодОперации 
			И (СтрокаДок.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию
				Или СтрокаДок.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ОтгрузкаБезПереходаПраваСобственности)
			И ЗначениеЗаполнено(СтрокаДвижения.Заказ) тогда
			// После передачи на комиссию или отгрузки обособленный учет по заказам не ведется
			СтрокаДвижения.Заказ = Неопределено;
		КонецЕсли;						 
		
		Если ЕстьКолонкаСуммаБезНДС Тогда
			СтрокаДвижения.Стоимость	= СтрокаДок.СуммаБезНДС + ?(ЕстьКолонкаНДС, СтрокаДок.НДС, 0);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Движения <> Неопределено 
		И ТаблицаДвиженийНДСПартии.Количество() > 0 Тогда
		
		Движения.НДСПартииТоваров.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПартииТоваров.мТаблицаДвижений = ТаблицаДвиженийНДСПартии;
		Движения.НДСПартииТоваров.ДобавитьДвижение();
		Движения.НДСПартииТоваров.Записать(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров()

//////////////////////////////////////////////////////////////////////////
//  РЕГИСТРАЦИЯ ДОКУМЕНТОВ
Процедура ЗарегистрироватьВЖурналеУчетаСчетовФактур(СтруктураШапкиДокумента, СуммаДокументаДляРегистрацииВЖурнале = 0, НДСДокументаДляРегистрацииВЖурнале = 0, Отказ, Заголовок) Экспорт
	
	Если УчетНДС.ПолучитьВерсиюПостановления(СтруктураШапкиДокумента.Дата) = 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДвиженияЖурналУчетаСчетовФактур = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
	ДвиженияЖурналУчетаСчетовФактур.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	СтрокаДвижения = ДвиженияЖурналУчетаСчетовФактур.Добавить();
	
	СтрокаДвижения.Период          = СтруктураШапкиДокумента.Дата;
	СтрокаДвижения.Организация     = СтруктураШапкиДокумента.Организация;
	//АБС ВСТАВКА №8935 НАЧАЛО
	//СтрокаДвижения.Контрагент    = СтруктураШапкиДокумента.Контрагент;
	Если СтруктураШапкиДокумента.Свойство("абс_Продавец") Тогда	
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.абс_Продавец) Тогда
			СтрокаДвижения.Контрагент  = СтруктураШапкиДокумента.абс_Продавец;
		Иначе
			СтрокаДвижения.Контрагент  = СтруктураШапкиДокумента.Контрагент;
        КонецЕсли;
	Иначе		
		СтрокаДвижения.Контрагент  = СтруктураШапкиДокумента.Контрагент;
	КонецЕсли;	
    //\\АБС ВСТАВКА №8935 КОНЕЦ
	СтрокаДвижения.СчетФактура     = СтруктураШапкиДокумента.Ссылка;
	СтрокаДвижения.КодВидаОперации = СтруктураШапкиДокумента.КодВидаОперации;
	СтрокаДвижения.Валюта          = СтруктураШапкиДокумента.ВалютаДокумента;
	
	РасчетыВУсловныхЕдиницах = Ложь;
    	
	Если СтруктураШапкиДокумента.Свойство("РасчетыВУсловныхЕдиницах") Тогда
		Если СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах = Истина Тогда
			СтрокаДвижения.Валюта = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
			Если СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				РасчетыВУсловныхЕдиницах = Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;		
		
	Если СтруктураШапкиДокумента.ВидДокумента = "СчетФактураПолученный" Тогда
		
		СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры;
		
		СтрокаДвижения.ДатаВыставленияПолучения       = СтруктураШапкиДокумента.Дата;
		СтрокаДвижения.КодСпособаВыставленияПолучения = СтруктураШапкиДокумента.КодСпособаПолучения;
		
		Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			
			СтрокаДвижения.НомерСчетаФактуры = СтруктураШапкиДокумента.НомерИсходногоДокумента;
			СтрокаДвижения.ДатаСчетаФактуры  = СтруктураШапкиДокумента.ДатаИсходногоДокумента;
			
			СтрокаДвижения.НомерКорректировочногоСчетаФактуры = СтруктураШапкиДокумента.НомерВходящегоДокумента;
			СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = СтруктураШапкиДокумента.ДатаВходящегоДокумента;
			
			
			СтрокаДвижения.СуммаПоСчетуФактуреРазницаУменьшение = СтруктураШапкиДокумента.СуммаУменьшение;
			СтрокаДвижения.СуммаПоСчетуФактуреРазницаУвеличение = СтруктураШапкиДокумента.СуммаУвеличение;
			
			СтрокаДвижения.СуммаНДСРазницаУменьшение            = СтруктураШапкиДокумента.СуммаНДСУменьшение;
			СтрокаДвижения.СуммаНДСРазницаУвеличение            = СтруктураШапкиДокумента.СуммаНДСУвеличение;
			
		Иначе
			
			СтрокаДвижения.НомерСчетаФактуры   = СтруктураШапкиДокумента.НомерВходящегоДокумента;
			СтрокаДвижения.ДатаСчетаФактуры    = СтруктураШапкиДокумента.ДатаВходящегоДокумента;

			СтрокаДвижения.СуммаПоСчетуФактуре = СуммаДокументаДляРегистрацииВЖурнале;
			СтрокаДвижения.СуммаНДС            = НДСДокументаДляРегистрацииВЖурнале;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.Исправление Тогда
			СтрокаДвижения.НомерИсправления = СтруктураШапкиДокумента.НомерИсправления;
			СтрокаДвижения.ДатаИсправления  = СтруктураШапкиДокумента.ДатаИсправления;
		КонецЕсли;
		
		Если РасчетыВУсловныхЕдиницах И НЕ СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			
			ПараметрыСФ = Неопределено;
			ПересчитатьСчетФактуруВРубли(СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента, ПараметрыСФ);
			
			СтрокаДвижения.СуммаПоСчетуФактуре = ПараметрыСФ.СуммаДокумента;
			СтрокаДвижения.СуммаНДС            = ПараметрыСФ.СуммаНДСДокумента;

		КонецЕсли;
		
		СтрокаДвижения.ПоСтавкеБезНДС = СтруктураШапкиДокумента.СчетФактураБезНДС;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "СчетФактураВыданный" Тогда
		
		
		// Определим контрагента для СМР хозспособом и налогового агента
		Если НЕ ЗначениеЗаполнено(СтрокаДвижения.Контрагент) //СМР 
			ИЛИ СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда //Налоговый агент
			СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		
		СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры;
		
		СтрокаДвижения.ДатаВыставленияПолучения       = СтруктураШапкиДокумента.ДатаВыставления;
		СтрокаДвижения.КодСпособаВыставленияПолучения = СтруктураШапкиДокумента.КодСпособаВыставления;
		СтрокаДвижения.Период          				  = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаВыставления),СтруктураШапкиДокумента.ДатаВыставления,СтруктураШапкиДокумента.Дата);
				
		Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			
			СтрокаДвижения.НомерСчетаФактуры = СтруктураШапкиДокумента.НомерИсходногоДокумента;
			СтрокаДвижения.ДатаСчетаФактуры  = СтруктураШапкиДокумента.ДатаИсходногоДокумента;
			
			Если СтруктураШапкиДокумента.Исправление Тогда
				СтрокаДвижения.НомерКорректировочногоСчетаФактуры = СтруктураШапкиДокумента.НомерИсправляемогоКорректировочногоДокумента;
				СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = СтруктураШапкиДокумента.ДатаИсправляемогоКорректировочногоДокумента;
			Иначе
				СтрокаДвижения.НомерКорректировочногоСчетаФактуры = ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураШапкиДокумента.Ссылка);
				СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = СтруктураШапкиДокумента.Дата;
			КонецЕсли;
			
			СтрокаДвижения.СуммаПоСчетуФактуреРазницаУменьшение = СтруктураШапкиДокумента.СуммаУменьшение;
			СтрокаДвижения.СуммаПоСчетуФактуреРазницаУвеличение = СтруктураШапкиДокумента.СуммаУвеличение;
			
			СтрокаДвижения.СуммаНДСРазницаУменьшение            = СтруктураШапкиДокумента.СуммаНДСУменьшение;
			СтрокаДвижения.СуммаНДСРазницаУвеличение            = СтруктураШапкиДокумента.СуммаНДСУвеличение;
			
			Если СтруктураШапкиДокумента.Исправление Тогда
				СтрокаДвижения.НомерИсправления = СтруктураШапкиДокумента.НомерИсправления;
				СтрокаДвижения.ДатаИсправления  = СтруктураШапкиДокумента.Дата;
			КонецЕсли;
			
			Если НЕ СтруктураШапкиДокумента.Исправление Тогда
				ДополнитьНомерИндексомОбособленногоПодразделения(СтруктураШапкиДокумента, СтрокаДвижения.НомерКорректировочногоСчетаФактуры);
			КонецЕсли;
			
		Иначе
			
			Если СтруктураШапкиДокумента.Исправление Тогда
				СтрокаДвижения.НомерСчетаФактуры = СтруктураШапкиДокумента.НомерИсходногоДокумента;
				СтрокаДвижения.ДатаСчетаФактуры  = СтруктураШапкиДокумента.ДатаИсходногоДокумента;
				СтрокаДвижения.НомерИсправления = СтруктураШапкиДокумента.НомерИсправления;
				СтрокаДвижения.ДатаИсправления  = СтруктураШапкиДокумента.Дата;				
			// {{KM WARE Малыгин П.К. Заявка № 35837 15.01.2016 начало
			// Для ндс налоговых агентов нужен полный номер
			ИначеЕсли СтруктураШапкиДокумента.Ссылка.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
        		СтрокаДвижения.НомерСчетаФактуры   = СтруктураШапкиДокумента.Ссылка.Номер;
				СтрокаДвижения.ДатаСчетаФактуры    = СтруктураШапкиДокумента.Дата;
			

			// }}KM WARE Малыгин П.К. Заявка № 35837 15.01.2016 окончание	
			Иначе				
				СтрокаДвижения.НомерСчетаФактуры   = ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураШапкиДокумента.Ссылка);
				
				Обрезать = kwr_ПроверитьУдалениеПостфикса(СтруктураШапкиДокумента.Ссылка); 
				ДлинаИсходной = СтрДлина(СокрЛП(СтрокаДвижения.НомерСчетаФактуры));
				СтрокаДвижения.НомерСчетаФактуры = Лев(СокрЛП(СтрокаДвижения.НомерСчетаФактуры),ДлинаИсходной-Обрезать);
				
				СтрокаДвижения.ДатаСчетаФактуры    = СтруктураШапкиДокумента.Дата;
			КонецЕсли;
			
			ДополнитьНомерИндексомОбособленногоПодразделения(СтруктураШапкиДокумента, СтрокаДвижения.НомерСчетаФактуры);
			
			СтрокаДвижения.СуммаПоСчетуФактуре = СуммаДокументаДляРегистрацииВЖурнале;
			СтрокаДвижения.СуммаНДС            = НДСДокументаДляРегистрацииВЖурнале;
		
		КонецЕсли;
		
		Если РасчетыВУсловныхЕдиницах И НЕ СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			
			ПараметрыСФ = Неопределено;
			ПересчитатьСчетФактуруВРубли(СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента, ПараметрыСФ);

			СтрокаДвижения.СуммаПоСчетуФактуре = ПараметрыСФ.СуммаДокумента;
			СтрокаДвижения.СуммаНДС            = ПараметрыСФ.СуммаНДСДокумента;			
			
		КонецЕсли;
		
		СтрокаДвижения.ПоСтавкеБезНДС = СтруктураШапкиДокумента.СчетФактураБезНДС;
		
		Если СтруктураШапкиДокумента.СчетФактураНеВыставляется Тогда
			СтрокаДвижения.СчетФактураНеВыставляется = СтруктураШапкиДокумента.СчетФактураНеВыставляется;
			СтрокаДвижения.ДатаВыставленияПолучения  = СтруктураШапкиДокумента.Дата;
			СтрокаДвижения.Период          			 = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		
	Иначе // любые другие документы поступления
		
		СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры;
		
		СтрокаДвижения.ДатаВыставленияПолучения       = СтруктураШапкиДокумента.Дата;
		СтрокаДвижения.КодСпособаВыставленияПолучения = СтруктураШапкиДокумента.КодСпособаПолучения;
		
		СтрокаДвижения.НомерСчетаФактуры   = СтруктураШапкиДокумента.НомерВходящегоСчетаФактуры;
		СтрокаДвижения.ДатаСчетаФактуры    = СтруктураШапкиДокумента.ДатаВходящегоСчетаФактуры;
		
		СтрокаДвижения.СуммаПоСчетуФактуре = СуммаДокументаДляРегистрацииВЖурнале;
		СтрокаДвижения.СуммаНДС            = НДСДокументаДляРегистрацииВЖурнале;
		
		Если СтрокаДвижения.СуммаНДС = 0 Тогда
			СтрокаДвижения.ПоСтавкеБезНДС = ЭтоДокументПоСтавкеБезНДС(СтруктураШапкиДокумента.Ссылка);
		КонецЕсли;		
				
	КонецЕсли;
	
// {{KM WARE Семенов И.С. Заявка №32103 24.07.2015 начало    
	если СтруктураШапкиДокумента.дата>дата(2015,1,1) и СтруктураШапкиДокумента.КодВидаОперации="04" и СтруктураШапкиДокумента.Ссылка.ВходитВЖурналСчетовФактур тогда
		СтрокаДвижения.КодВидаОперацииКомиссия="04";
		СтрокаДвижения.СуммаНДСКомиссия=СтрокаДвижения.СуммаНДС;
		СтрокаДвижения.СуммаПоСчетуФактуреКомиссия=СтрокаДвижения.СуммаПоСчетуФактуре;
		если типзнч(СтруктураШапкиДокумента.Ссылка)=тип("ДокументСсылка.СчетФактураВыданный") тогда
			СтрокаДвижения.НомерСчетаФактурыПродавца=СтруктураШапкиДокумента.Ссылка.абс_НомерСФНаЛьготуПоНДС;
// +++ввв 20.02.2016 г.
//			СтрокаДвижения.Контрагент= СтруктураШапкиДокумента.Ссылка.абс_Продавец;
//			СтрокаДвижения.Продавец=СтруктураШапкиДокумента.Ссылка.Контрагент;
			СтрокаДвижения.Продавец=СтруктураШапкиДокумента.Ссылка.абс_Продавец;
			СтрокаДвижения.Контрагент=СтруктураШапкиДокумента.Ссылка.Контрагент;
// ---ввв 20.02.2016 г.
//			СтрокаДвижения.КодВидаСделки = СтруктураШапкиДокумента.Ссылка.абс_КодВидаСделки;
			СтрокаДвижения.Субкомиссионер=СтруктураШапкиДокумента.Ссылка.контрагент;
		иначеесли типзнч(СтруктураШапкиДокумента.Ссылка)=тип("ДокументСсылка.СчетФактураПолученный") тогда
			СтрокаДвижения.Контрагент= СтруктураШапкиДокумента.Ссылка.Контрагент;
		конецесли;
	конецесли;
	
// }}KM WARE Семенов И.С. Заявка №32103 24.07.2015 окончание
	ДвиженияЖурналУчетаСчетовФактур.Записать();
	
КонецПроцедуры

///////////////////////////////////////////
// Блок пересчета сумм у.е. в рубли
// при регистрации счета-фактуры в Журнале
Процедура ПересчитатьСчетФактуруВРубли(СчетФактура, СтруктураШапкиДокумента, Результат)
	
	Результат = Новый Структура("СуммаДокумента, СуммаНДСДокумента");
	
	СуммаДокумента    = 0;
	СуммаНДСДокумента = 0;
	
	Для Каждого СтрокаОснования ИЗ СчетФактура.ДокументыОснования Цикл
		
		ТекущееОснование = СтрокаОснования.ДокументОснование;
		
		Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") 
			ИЛИ ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			ТаблицаДокумента = ПолучитьТаблицуДокументаНДС(ТекущееОснование);
		Иначе
			ТаблицаДокумента = УчетНДС.ПолучитьТаблицуДокументаНДС(ТекущееОснование, , ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный"));				
		КонецЕсли;
		
		Если ТаблицаДокумента = Неопределено Тогда
			Результат.СуммаДокумента    = 0;
			Результат.СуммаНДСДокумента = 0;
			Возврат;
		КонецЕсли;
		
		ТаблицаДокумента.Колонки.Добавить("СуммаСНДС");		
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл			
			СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		КонецЦикла;		
		
		СуммаПоДокументу = ТаблицаДокумента.Итог("СуммаБезНДС")+ ТаблицаДокумента.Итог("НДС");
		
		Если ТаблицаДокумента <> Неопределено Тогда
			
			СуммаСНДСКРаспределению = ПолучитьСуммуВзаиморасчетов(СчетФактура, ТекущееОснование, СтруктураШапкиДокумента);
			
			Если СуммаСНДСКРаспределению <> 0 Тогда
				
				БезНДСКРаспределению = Окр(СуммаСНДСКРаспределению * ТаблицаДокумента.Итог("СуммаБезНДСВал") / ТаблицаДокумента.Итог("СуммаВал"), 2);
				НДСКРаспределению    = СуммаСНДСКРаспределению - БезНДСКРаспределению;
				
				Если НЕ БезНДСКРаспределению = 0 тогда
					НовыеСуммы = ttk_ОбщегоНазначения.РаспределитьПропорционально(БезНДСКРаспределению,ТаблицаДокумента.ВыгрузитьКолонку("СуммаБезНДС"));
					ТаблицаДокумента.ЗагрузитьКолонку(НовыеСуммы,"СуммаБезНДС");
				КонецЕсли;
				
				Если НЕ НДСКРаспределению = 0 тогда
					НовыеСуммы = ttk_ОбщегоНазначения.РаспределитьПропорционально(НДСКРаспределению,ТаблицаДокумента.ВыгрузитьКолонку("НДС"));
					ТаблицаДокумента.ЗагрузитьКолонку(НовыеСуммы,"НДС");
				КонецЕсли;
				
				СуммаДокумента    = СуммаДокумента + ТаблицаДокумента.Итог("СуммаБезНДС") + ТаблицаДокумента.Итог("НДС");
				СуммаНДСДокумента = СуммаНДСДокумента + ТаблицаДокумента.Итог("НДС");
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.СуммаДокумента    = СуммаДокумента;
	Результат.СуммаНДСДокумента = СуммаНДСДокумента;
	
КонецПроцедуры

Функция ПолучитьСуммуВзаиморасчетов(СчетФактура, ТекущееОснование, СтруктураШапкиДокумента)
	
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ИмяРегистра = "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации";
	Иначе
		ИмяРегистра = "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 			ТекущееОснование);
	Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Контрагент",         СтруктураШапкиДокумента.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РасчетыПоРеализации.СуммаРег) КАК СуммаВзаиморасчетов,
	|	РасчетыПоРеализации.Регистратор КАК ДокументОснование
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализации
	|ГДЕ
	|	РасчетыПоРеализации.Регистратор = &Ссылка
	|	И РасчетыПоРеализации.Активность = ИСТИНА
	|	И РасчетыПоРеализации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыПоРеализации.Организация = &Организация
	|	И РасчетыПоРеализации.Контрагент = &Контрагент
	|	И РасчетыПоРеализации.ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоРеализации.Регистратор";
	
	ИспользоватьКурсДокумента = Ложь;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.СуммаВзаиморасчетов;
		КонецЕсли;
		
	КонецЕсли;
	
	// документ основание не проведен или это корректировка
	
	Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ТекущееОснование.ДокументРеализации, Истина);		
	ИначеЕсли ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда		
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ТекущееОснование.ДокументПоступления, Истина);		
	Иначе
		ИсходныйДокумент = ТекущееОснование;
	КонецЕсли;
	
	СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(ИсходныйДокумент.ВалютаДокумента, ИсходныйДокумент.Дата);
		
	СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущееОснование.СуммаДокумента,
		ТекущееОснование.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
		СтруктураКурсов.Курс, 1,
		СтруктураКурсов.Кратность, 1);
																			
	Возврат СуммаВзаиморасчетов;
		
КонецФункции

Функция ПолучитьТаблицуДокументаНДС(ТекущееОснование)
		
	Перем СтруктураШапкиДокумента, ТаблицаПоУслугам;
	
	ТекущийОбъект = ТекущееОснование.ПолучитьОбъект();
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ТекущийОбъект);
		
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"         , "НомерСтроки");
	
	Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		ИмяТабличнойЧасти = "Услуги";
		НДСВключенВСтоимость = Истина;
	ИначеЕсли ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда	
		ИмяТабличнойЧасти = "Товары";
		НДСВключенВСтоимость = ?(СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, Истина, СтруктураШапкиДокумента.НДСВключенВСтоимость);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатЗапроса = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ТекущийОбъект, ИмяТабличнойЧасти, СтруктураПолей);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаЗапроса, СтруктураШапкиДокумента, НДСВключенВСтоимость);
		
	Возврат ТаблицаЗапроса;
	
КонецФункции

Функция ЭтоДокументПоСтавкеБезНДС(ДокументСсылка)

	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ШаблонТекста =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таб.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Таб
	|ГДЕ
	|	Таб.Ссылка = &ДокументСсылка
	|	И Таб.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)";
	ШаблонОбъединения =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
		
	ТекстЗапроса = "";
	Для каждого ТабЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ТабЧасть.Реквизиты.Найти("СтавкаНДС") <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", ШаблонОбъединения)
				+ СтрЗаменить(ШаблонТекста, "РеализацияТоваровУслуг.Товары", МетаданныеДокумента.Имя + "." + ТабЧасть.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если МетаданныеДокумента.Реквизиты.Найти("СтавкаНДС") <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", ШаблонОбъединения)
			+ СтрЗаменить(ШаблонТекста, "РеализацияТоваровУслуг.Товары", МетаданныеДокумента.Имя);
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат Ложь;
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		Результат = Запрос.Выполнить();
		Возврат Результат.Пустой();
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьНомерИндексомОбособленногоПодразделения(СтруктураШапкиДокумента, НомерДокумента) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		СтруктураШапкиДокумента.Организация, "ГоловнаяОрганизация,ЦифровойИндексОбособленногоПодразделения");
	Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.ГоловнаяОрганизация) Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыОрганизации.ЦифровойИндексОбособленногоПодразделения) Тогда
		НомерДокумента = НомерДокумента + "/" + РеквизитыОрганизации.ЦифровойИндексОбособленногоПодразделения;
	КонецЕсли; 
	
КонецПроцедуры


//////////////////////////////////////////////////
//  ПО НДС ПРЕДЪЯВЛЕННОМУ ПО ПОЛУЧЕННОМУ СЧЕТУ-ФАКТУРЕ НА АВАНС

// Формирует движения по регистрам НДС для документа СФ Полученный на аванс
//
Процедура СформироватьДвиженияСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре) Экспорт
	
	// Движения по исправленным счетам-фактурам формируются только регламентной обработкой
	// проведения документов по регистрам НДС
	Если СтруктураШапкиДокумента.Исправление Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Новый Структура;
	
	СформироватьДвиженияНДСПредъявленныйСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
	
	СформироватьДвиженияНДСсАвансовСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
	
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

// Формирует движения по регистру НДСПредъявленный для документа СФ Полученный на аванс
//
Процедура СформироватьДвиженияНДСПредъявленныйСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения)
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСПредъявленный", СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
	
	Для Каждого СтрокаОснования Из ТаблицаПоСчетуФактуре Цикл
		
		ТаблицаПоОснованию = СтрокаОснования.ТаблицаДанных;
		Для Каждого СтрокаТаблицы Из ТаблицаПоОснованию Цикл
			СтрокаДвижений = ТаблицаДвижений_НДСПредъявленный.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы);
			СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.СчетУчетаНДС = Неопределено;
			Если СтруктураШапкиДокумента.Исправление Тогда
				СтрокаДвижений.ИсправленныйСчетФактура = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения.НДСПредъявленный.ВыполнитьПриход();
	
КонецПроцедуры

// Формирует движения по регистру НДСсАвансов для документа СФ полученный на аванс
//
Процедура СформироватьДвиженияНДСсАвансовСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения)
	
    ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСсАвансов", СтруктураШапкиДокумента.Ссылка);
    ТаблицаДвижений_НДССАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();

	Для Каждого СтрокаОснования Из ТаблицаПоСчетуФактуре Цикл
		
		ТаблицаПоОснованию = СтрокаОснования.ТаблицаДанных;
		Для Каждого СтрокаТаблицы Из ТаблицаПоОснованию Цикл
			СтрокаДвижений = ТаблицаДвижений_НДССАвансов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы);
			СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.Покупатель = СтрокаТаблицы.Контрагент;
			СтрокаДвижений.ДатаСобытия = СтруктураШапкиДокумента.Дата;
			Если СтруктураШапкиДокумента.Исправление Тогда
				СтрокаДвижений.ИсправленныйСчетФактура = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.НДСсАвансов.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДССАвансов;
	Движения.НДСсАвансов.ВыполнитьПриход();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////
// НАЛОГОВЫЙ АГЕНТ

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить начисление НДС налогового агента в подсистеме учета НДС,
// а именно в регистре: "НДСНачисленный"
Процедура СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента) Экспорт
	
	Если СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСПредъявленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураШапкиДокумента.Ссылка,РегистрыНакопления.НДСПредъявленный, Истина).Выгрузить();
	
	ВидыЦенностей_Агентские = УчетНДС.ВидыЦенностейНалоговыйАгент();
	
	СчетНДС = ПланыСчетов.Хозрасчетный.НДС;
	
	ТаблицаДвижений_НДСНачисленный = Неопределено;
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Неопределено;
	
	Движения = Новый Структура();
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСНачисленный", СтруктураШапкиДокумента.Ссылка);
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСУчетРаспределенныхОплатПоставщикам", СтруктураШапкиДокумента.Ссылка);

	Для каждого СтрокаДвижений_НДСПредъявленный Из ДвиженияНДСПредъявленный Цикл
		Если СтрокаДвижений_НДСПредъявленный.ВидДвижения = ВидДвиженияНакопления.Приход 
			И УчетНДС.ВидыЦенностейНалоговыйАгент().НайтиПоЗначению(СтрокаДвижений_НДСПредъявленный.ВидЦенности) <> Неопределено Тогда
			
			Если ТаблицаДвижений_НДСНачисленный = Неопределено тогда
				ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
			КонецЕсли;
			
			СтрокаДвижений_НДСНачисленный = ТаблицаДвижений_НДСНачисленный.Добавить();
			
			СтрокаДвижений_НДСНачисленный.Организация	= СтрокаДвижений_НДСПредъявленный.Организация;
			СтрокаДвижений_НДСНачисленный.Покупатель	= СтрокаДвижений_НДСПредъявленный.Поставщик;
			СтрокаДвижений_НДСНачисленный.СчетФактура	= СтрокаДвижений_НДСПредъявленный.СчетФактура;
			СтрокаДвижений_НДСНачисленный.ВидЦенности	= СтрокаДвижений_НДСПредъявленный.ВидЦенности;
			СтрокаДвижений_НДСНачисленный.СтавкаНДС		= СтрокаДвижений_НДСПредъявленный.СтавкаНДС;
			СтрокаДвижений_НДСНачисленный.СчетУчетаНДС	= СчетНДС;
			СтрокаДвижений_НДСНачисленный.СуммаБезНДС	= СтрокаДвижений_НДСПредъявленный.СуммаБезНДС;
			СтрокаДвижений_НДСНачисленный.НДС			= СтрокаДвижений_НДСПредъявленный.НДС;
			СтрокаДвижений_НДСНачисленный.Событие 		= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			СтрокаДвижений_НДСНачисленный.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
			СтрокаДвижений_НДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
			СтрокаДвижений_НДСНачисленный.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
			Если ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Неопределено тогда
				ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();
			КонецЕсли;
			
			СтрокаДвижений_НДСУчетРаспределенныхОплатПоставщикам = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
			
			СтрокаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Организация	= СтрокаДвижений_НДСПредъявленный.Организация;
			СтрокаДвижений_НДСУчетРаспределенныхОплатПоставщикам.СчетФактура	= СтрокаДвижений_НДСПредъявленный.СчетФактура;
			СтрокаДвижений_НДСУчетРаспределенныхОплатПоставщикам.РасчетыСБюджетом = Истина;
			СтрокаДвижений_НДСУчетРаспределенныхОплатПоставщикам.РаспределеннаяСумма = СтрокаДвижений_НДСПредъявленный.НДС;
			СтрокаДвижений_НДСУчетРаспределенныхОплатПоставщикам.ВидДвижения	= ВидДвиженияНакопления.Приход;
			
		КонецЕсли; 
	КонецЦикла; 
	
	Если не ТаблицаДвижений_НДСНачисленный = Неопределено Тогда

		Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
	    Движения.НДСНачисленный.Записать(ложь);
	КонецЕсли; 
	
	Если не ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Неопределено Тогда

		Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.ДобавитьДвижение();
	    Движения.НДСУчетРаспределенныхОплатПоставщикам.Записать(ложь);
	КонецЕсли; 
	
КонецПроцедуры //СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС()

// Процедура вызывается при поступлении оплаты.
// Отражает начисление НДС налогового агента в подсистеме учета НДС
//
Процедура СформироватьДвиженияНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаОплаты) Экспорт
	
	// Движения по исправленным счетам-фактурам формируются только регламентной обработкой
	// проведения документов по регистрам НДС
	Если СтруктураШапкиДокумента.Исправление Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.НалоговыйАгентПоОплате
		ИЛИ НЕ СтруктураШапкиДокумента.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Новый Структура;
	
	СформироватьДвиженияНДСНачисленныйНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаОплаты, Движения);
	
	СформироватьПроводкиНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаОплаты, Движения);
	
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаОплаты, Движения)
	
	Если СтруктураШапкиДокумента.Исправление Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСНачисленный", СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
	
	СчетНДС = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента; // 68.32
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплаты Цикл
		
		НовоеДвижение = ТаблицаДвижений_НДСНачисленный.Добавить();
		НовоеДвижение.Организация   = СтруктураШапкиДокумента.Организация;
		НовоеДвижение.Покупатель    = СтруктураШапкиДокумента.Контрагент;
		НовоеДвижение.СчетФактура   = СтрокаТаблицы.СчетФактура;
		НовоеДвижение.ВидЦенности   = СтрокаТаблицы.ВидЦенности;
		НовоеДвижение.СтавкаНДС     = СтрокаТаблицы.СтавкаНДС;
		НовоеДвижение.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
		НовоеДвижение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
			
		НовоеДвижение.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС;
		НовоеДвижение.НДС         = СтрокаТаблицы.СуммаНДС;
			
		НовоеДвижение.Событие      = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
		НовоеДвижение.ДатаСобытия  = СтруктураШапкиДокумента.Дата;
		НовоеДвижение.СчетУчетаНДС = СчетНДС;
			
	КонецЦикла;
	
	Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
	Движения.НДСНачисленный.ВыполнитьПриход();
			
КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаОплаты, Движения)
	
	Если НЕ СтруктураШапкиДокумента.Исправление Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	ДатаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапкиДокумента.ДокументОснование, "Дата");
	ЗаписьДопЛиста = НачалоКвартала(ДатаОплаты) < НачалоКвартала(СтруктураШапкиДокумента.Дата);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплаты Цикл
		
		СтрокаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Добавить();
		
		СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Покупатель  = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижений.СчетФактура = СтруктураШапкиДокумента.ДокументОснование;
		СтрокаДвижений.ВидЦенности = СтрокаТаблицы.ВидЦенности;
		СтрокаДвижений.СтавкаНДС   = СтрокаТаблицы.СтавкаНДС;
		СтрокаДвижений.Событие     = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
		СтрокаДвижений.ДатаОплаты  = ДатаОплаты;
		СтрокаДвижений.ИсправленныйСчетФактура = СтруктураШапкиДокумента.Ссылка;
		СтрокаДвижений.ДоговорКонтрагента      = СтруктураШапкиДокумента.ДоговорКонтрагента;
		
		Если ЗаписьДопЛиста Тогда
			СтрокаДвижений.ЗаписьДополнительногоЛиста = Истина;
			СтрокаДвижений.КорректируемыйПериод = НачалоКвартала(ДатаОплаты);
		КонецЕсли;
		
		СтрокаДвижений.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.НДС         = СтрокаТаблицы.СуммаНДС;
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение();
	
КонецПроцедуры

Процедура СформироватьПроводкиНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаОплаты, Движения)
	
	ДобавитьНаборРегистраБухгалтерииВСтруктуруДвижений(Движения, "Хозрасчетный", СтруктураШапкиДокумента.Ссылка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплаты Цикл
		
		НовоеДвижение = Движения.Хозрасчетный.Добавить();
		НовоеДвижение.Период       = СтруктураШапкиДокумента.Дата;
		НовоеДвижение.Организация  = СтруктураШапкиДокумента.Организация;
		НовоеДвижение.НомерЖурнала = "НДС";
		НовоеДвижение.Содержание   = "НДС";
		
		НовоеДвижение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента; // 76.НА
		НовоеДвижение.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента; // 68.32
		НовоеДвижение.Сумма  = СтрокаТаблицы.СуммаНДС;
		
		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетДт, НовоеДвижение.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетДт, НовоеДвижение.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
		
		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетКт, НовоеДвижение.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетКт, НовоеДвижение.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетКт, НовоеДвижение.СубконтоКт, "СФВыданные", СтруктураШапкиДокумента.ДокументОснование);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияНалоговыйАгентПоОплате_КурсовыеРазницы(СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, Проводки, Отказ) Экспорт
	
	ТаблицаВзаиморасчетовСР = ТаблицаВзаиморасчетов.СкопироватьКолонки("ВалютаВзаиморасчетов, СчетФактура, Контрагент, ДоговорКонтрагента, КурсоваяРазница");
	Для Каждого СтрокаТаблицы Из ТаблицаВзаиморасчетов Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)
			И СтрокаТаблицы.ДоговорКонтрагента.УчетАгентскогоНДС
			И СтрокаТаблицы.ДоговорКонтрагента.НалоговыйАгентПоОплате Тогда
			
			НоваяСтрока = ТаблицаВзаиморасчетовСР.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЕсли;
		
		
	КонецЦикла;
	ТаблицаВзаиморасчетовСР.Свернуть("ВалютаВзаиморасчетов, СчетФактура, Контрагент, ДоговорКонтрагента", "КурсоваяРазница");
	ТаблицаВзаиморасчетовСР.Колонки.КурсоваяРазница.Имя = "СуммоваяРазница";
	
	КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураШапкиДокумента, ТаблицаВзаиморасчетовСР, Ложь, , Истина, Проводки);
	
КонецПроцедуры

Процедура СформироватьПроводкиПоРазницамНалоговыйАгент(СтруктураШапкиДокумента, ТаблицаОплат, Проводки)
	
	Если Проводки = Неопределено Тогда
		ДвиженияХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		ДвиженияХозрасчетный.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	Иначе
		ДвиженияХозрасчетный = Проводки;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплат Цикл
		
		Если СтрокаТаблицы.СР_НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ДвиженияХозрасчетный.Добавить();

		Проводка.Период = СтруктураШапкиДокумента.Дата;
		
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание = "Корректировка НДС по договору " + СтрокаТаблицы.ДоговорКонтрагента;
		Проводка.Активность = Истина;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
		Если Проводки = Неопределено ИЛИ ТипЗнч(Проводки) = Тип("РегистрБухгалтерииНаборЗаписей.Хозрасчетный") Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаТаблицы.СчетФактура, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Поставщик, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтрокаТаблицы.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", СтрокаТаблицы.ДоговорКонтрагента);
		Иначе
			Проводка.СубконтоДт1 = СтрокаТаблицы.Поставщик;
			Проводка.СубконтоДт2 = СтрокаТаблицы.СчетФактура;
			Проводка.СубконтоКт1 = СтрокаТаблицы.Поставщик;
			Проводка.СубконтоКт2 = СтрокаТаблицы.ДоговорКонтрагента;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СР_НДС;
		
		Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах;
		
	КонецЦикла;	
	
	Если Проводки = Неопределено Тогда
		ДвиженияХозрасчетный.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

//  НАЛОГОВЫЙ АГЕНТ
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
// КОРРЕКТИРОВОЧНЫЕ ДОКУМЕНТЫ

////////////////////////////////////////////////////////////////////////////////////////////////////
// Корректировка поступления

Функция КорректировкаПоступленияПодготовитьСтруктуруТаблицСторнирующихНДСЗаписей(СтруктураШапкиДокумента) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления));
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование вычета НДС"" КАК Содержание,
	|	ЗаписиКнигиПокупок.Организация,
	|	ЗаписиКнигиПокупок.Поставщик,
	|	ЗаписиКнигиПокупок.СчетФактура,
	|	ЗаписиКнигиПокупок.ВидЦенности,
	|	ЗаписиКнигиПокупок.СтавкаНДС,
	|	ЗаписиКнигиПокупок.ДатаОплаты,
	|	ЗаписиКнигиПокупок.ДокументОплаты,
	|	ЗаписиКнигиПокупок.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПокупок.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПокупок.НДСОборот * -1 КАК НДС,
	|	ЗаписиКнигиПокупок.СчетУчетаНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПокупок";
	
	СтруктураТаблиц = Новый Структура();
	СтруктураТаблиц.Вставить("КнигаПокупок", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование восстановления НДС"" КАК Содержание,
	|	ЗаписиКнигиПродаж.Организация,
	|	ЗаписиКнигиПродаж.Покупатель,
	|	ЗаписиКнигиПродаж.СчетФактура,
	|	ЗаписиКнигиПродаж.ВидЦенности,
	|	ЗаписиКнигиПродаж.СтавкаНДС,
	|	ЗаписиКнигиПродаж.ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПродаж.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПродаж.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПродаж.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.СчетФактура.Дата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПродаж.НДСОборот * -1 КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПродаж";

	СтруктураТаблиц.Вставить("КнигаПродаж", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
    |	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК НДСПредъявленныйОстатки";
	
	СтруктураТаблиц.Вставить("НДСПредъявленный", Запрос.Выполнить().Выгрузить());
	
	Возврат СтруктураТаблиц;
	
КонецФункции	
          
Функция КорректировкаПоступленияПодготовитьТаблицуВычетНДСЗаМинусомНалогаВключенногоВСтоимость(СтруктураШапкиДокумента, ТаблицаДокумента)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления));
    Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности КАК ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.НДС КАК НДС,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Поставщик КАК Поставщик,
	|	ТаблицаДокумента.Событие КАК Событие,
	|	ТаблицаДокумента.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС КАК СчетУчетаНДС
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности КАК ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ТаблицаДокумента.НДС) КАК НДС,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Поставщик КАК Поставщик,
	|	ТаблицаДокумента.Событие КАК Событие,
	|	ТаблицаДокумента.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС КАК СчетУчетаНДС
	|ПОМЕСТИТЬ ВТСгруппированнаяТаблица
	|ИЗ
	|	ВТТаблицаДокумента КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Регистратор,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Поставщик,
	|	ТаблицаДокумента.Событие,
	|	ТаблицаДокумента.ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности КАК ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаБезНДС - ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот, 0) КАК СуммаБезНДС,
	|	ТаблицаДокумента.НДС - ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0) КАК НДС,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Поставщик КАК Поставщик,
	|	ТаблицаДокумента.Событие КАК Событие,
	|	ТаблицаДокумента.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	ВТСгруппированнаяТаблица КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСВключенныйВСтоимость.Обороты(, &МоментДокумента, , СчетФактура = &ИсправляемыйДокумент) КАК НДСВключенныйВСтоимостьОбороты
	|		ПО ТаблицаДокумента.ВидЦенности = НДСВключенныйВСтоимостьОбороты.ВидЦенности
	|			И ТаблицаДокумента.СтавкаНДС = НДСВключенныйВСтоимостьОбороты.СтавкаНДС
	|			И ТаблицаДокумента.СчетУчетаНДС = НДСВключенныйВСтоимостьОбороты.СчетУчетаНДС";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция КорректировкаПоступленияПодготовитьТаблицуВычетНДССУчетомПропорции(СтруктураШапкиДокумента, ТаблицаДокумента)
	
	ТаблицаКоэффициентов = КорректировкаПоступленияПодготовитьТаблицуКоэффициентов(СтруктураШапкиДокумента);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления));
    Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ТаблицаКоэффициентов", ТаблицаКоэффициентов);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности КАК ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.НДС КАК НДС,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Поставщик КАК Поставщик,
	|	ТаблицаДокумента.Событие КАК Событие,
	|	ТаблицаДокумента.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС КАК СчетУчетаНДС
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности КАК ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ТаблицаДокумента.НДС) КАК НДС,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Поставщик КАК Поставщик,
	|	ТаблицаДокумента.Событие КАК Событие,
	|	ТаблицаДокумента.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС КАК СчетУчетаНДС
	|ПОМЕСТИТЬ ВТСгруппированнаяТаблицаДокумента
	|ИЗ
	|	ВТТаблицаДокумента КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Регистратор,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Поставщик,
	|	ТаблицаДокумента.Событие,
	|	ТаблицаДокумента.ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦенности,
	|	СтавкаНДС,
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКоэффициентов.ВидЦенности КАК ВидЦенности,
	|	ТаблицаКоэффициентов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаКоэффициентов.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ТаблицаКоэффициентов.НДСКоэффициент КАК НДСКоэффициент,
	|	ТаблицаКоэффициентов.СуммаБезНДСКоэффициент КАК СуммаБезНДСКоэффициент
	|ПОМЕСТИТЬ ВТТаблицаКоэффициентов
	|ИЗ
	|	&ТаблицаКоэффициентов КАК ТаблицаКоэффициентов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦенности,
	|	СтавкаНДС,
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСгруппированнаяТаблицаДокумента.ВидЦенности,
	|	ВТСгруппированнаяТаблицаДокумента.СтавкаНДС,
	|	ВТСгруппированнаяТаблицаДокумента.СуммаБезНДС * ЕСТЬNULL(ВТТаблицаКоэффициентов.СуммаБезНДСКоэффициент, 1) КАК СуммаБезНДС,
	|	ВТСгруппированнаяТаблицаДокумента.НДС * ЕСТЬNULL(ВТТаблицаКоэффициентов.НДСКоэффициент, 1) КАК НДС,
	|	ВТСгруппированнаяТаблицаДокумента.Регистратор,
	|	ВТСгруппированнаяТаблицаДокумента.Период,
	|	ВТСгруппированнаяТаблицаДокумента.Организация,
	|	ВТСгруппированнаяТаблицаДокумента.Поставщик,
	|	ВТСгруппированнаяТаблицаДокумента.Событие,
	|	ВТСгруппированнаяТаблицаДокумента.ДатаСобытия,
	|	ВТСгруппированнаяТаблицаДокумента.СчетФактура,
	|	ВТСгруппированнаяТаблицаДокумента.ИсправленныйСчетФактура,
	|	ВТСгруппированнаяТаблицаДокумента.СчетУчетаНДС
	|ИЗ
	|	ВТСгруппированнаяТаблицаДокумента КАК ВТСгруппированнаяТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаКоэффициентов КАК ВТТаблицаКоэффициентов
	|		ПО ВТСгруппированнаяТаблицаДокумента.ВидЦенности = ВТТаблицаКоэффициентов.ВидЦенности
	|			И ВТСгруппированнаяТаблицаДокумента.СтавкаНДС = ВТТаблицаКоэффициентов.СтавкаНДС
	|			И ВТСгруппированнаяТаблицаДокумента.СчетУчетаНДС = ВТТаблицаКоэффициентов.СчетУчетаНДС";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции	

Функция КорректировкаПоступленияПодготовитьТаблицуКоэффициентов(СтруктураШапкиДокумента)
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления, Истина));
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСКосвенныеРасходыОбороты.ВидЦенности,
	|	НДСКосвенныеРасходыОбороты.СтавкаНДС,
	|	НДСКосвенныеРасходыОбороты.СчетУчетаНДС,
	|	1 - ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0) / ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0)
	|	КОНЕЦ КАК НДСКоэффициент,
	|	1 - ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот, 0) / ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0)
	|	КОНЕЦ КАК СуммаБезНДСКоэффициент
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйДокумент) КАК НДСКосвенныеРасходыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСВключенныйВСтоимость.Обороты(
	|				,
	|				&МоментДокумента,
	|				,
	|				Организация = &Организация
	|					И СчетФактура = &ИсправляемыйДокумент) КАК НДСВключенныйВСтоимостьОбороты
	|		ПО НДСКосвенныеРасходыОбороты.СтавкаНДС = НДСВключенныйВСтоимостьОбороты.СтавкаНДС
	|			И НДСКосвенныеРасходыОбороты.ВидЦенности = НДСВключенныйВСтоимостьОбороты.ВидЦенности
	|			И НДСКосвенныеРасходыОбороты.СчетУчетаНДС = НДСВключенныйВСтоимостьОбороты.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|				,
	|				&МоментДокумента,
	|				,
	|				Организация = &Организация
	|					И СчетФактура = &ИсправляемыйДокумент) КАК НДСЗаписиКнигиПокупокОбороты
	|		ПО НДСКосвенныеРасходыОбороты.СтавкаНДС = НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	|			И НДСКосвенныеРасходыОбороты.ВидЦенности = НДСЗаписиКнигиПокупокОбороты.ВидЦенности
	|			И НДСКосвенныеРасходыОбороты.СчетУчетаНДС = НДСЗаписиКнигиПокупокОбороты.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
	|				&МоментДокумента,
	|				Организация = &Организация
	|					И СчетФактура = &ИсправляемыйДокумент) КАК НДСПредъявленныйОстатки
	|		ПО (НДСКосвенныеРасходыОбороты.СтавкаНДС = НДСВключенныйВСтоимостьОбороты.СтавкаНДС)
	|			И (НДСКосвенныеРасходыОбороты.ВидЦенности = НДСВключенныйВСтоимостьОбороты.ВидЦенности)
	|			И (НДСКосвенныеРасходыОбороты.СчетУчетаНДС = НДСВключенныйВСтоимостьОбороты.СчетУчетаНДС)"; 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Функция КорректировкаПоступленияПодготовитьТаблицуВычетНДСНаОснованииДокумента(СтруктураШапкиДокумента, СтруктураТаблицДокумента)
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("ИсправляемыйДокумент", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления));
	Запрос.УстановитьПараметр("ДокументИсправление", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ТаблицаПоТоварам", СтруктураТаблицДокумента.ТаблицаПоТоварам);
	Запрос.УстановитьПараметр("ТаблицаПоУслугам", СтруктураТаблицДокумента.ТаблицаПоУслугам);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоТоварам
	|ИЗ
	|	&ТаблицаПоТоварам КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоУслугам
	|ИЗ
	|	&ТаблицаПоУслугам КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Дата,
	|	ТаблицаТовары.Организация,
	|	ТаблицаТовары.Контрагент,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.СчетУчетаНДС
	|ПОМЕСТИТЬ ВТТоварыИУслуги
	|ИЗ
	|	ВТТаблицаПоТоварам КАК ТаблицаТовары
	|ГДЕ
	|	(НЕ ТаблицаТовары.СчетУчета.Забалансовый)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.СуммаНДС,
	|	ТаблицаУслуги.Ссылка,
	|	ТаблицаУслуги.Дата,
	|	ТаблицаУслуги.Организация,
	|	ТаблицаУслуги.Контрагент,
	|	ИСТИНА,
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.СчетЗатрат,
	|	ТаблицаУслуги.СчетУчетаНДС
	|ИЗ
	|	ВТТаблицаПоУслугам КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
	|	ТоварыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТоварыИУслуги.Сумма) КАК Сумма,
	|	СУММА(ТоварыИУслуги.СуммаНДС) КАК НДС,
	|	ТоварыИУслуги.Ссылка КАК Регистратор,
	|	ТоварыИУслуги.Дата КАК Период,
	|	ТоварыИУслуги.Организация КАК Организация,
	|	ТоварыИУслуги.Контрагент КАК Поставщик,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	ТоварыИУслуги.Дата КАК ДатаСобытия,
	|	&ИсправляемыйДокумент КАК СчетФактура,
	|	&ДокументИсправление КАК ИсправленныйСчетФактура,
	|	ТоварыИУслуги.ЭтоУслуга КАК ЭтоУслуга,
	|	ТоварыИУслуги.Номенклатура КАК Номенклатура,
	|	ТоварыИУслуги.СчетУчета КАК СчетУчета,
	|	ТоварыИУслуги.СчетУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	ВТТоварыИУслуги КАК ТоварыИУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыИУслуги.СтавкаНДС,
	|	ТоварыИУслуги.Ссылка,
	|	ТоварыИУслуги.Дата,
	|	ТоварыИУслуги.Организация,
	|	ТоварыИУслуги.ЭтоУслуга,
	|	ТоварыИУслуги.Номенклатура,
	|	ТоварыИУслуги.СчетУчета,
	|	ТоварыИУслуги.СчетУчетаНДС,
	|	ТоварыИУслуги.Контрагент,
	|	ТоварыИУслуги.Дата";
	
	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
			СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчета, , , , , СтрокаТаблицы.ЭтоУслуга);
	КонецЦикла;	
	
	Возврат ТаблицаДокумента;
	
КонецФункции	

Функция КорректировкаПоступленияПодготовитьТаблицуКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("СчетФактураДата", 
		?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,
		СтруктураШапкиДокумента.ИсправляемыйДокументПоступления.Дата, СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("СчетФактура", 
		?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, 
		УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления), СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("ИсправленныйСчетФактура", 
		?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,
		СтруктураШапкиДокумента.Ссылка, Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка())); 
	Запрос.УстановитьПараметр("Курс", СтруктураШапкиДокумента.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность", СтруктураШапкиДокумента.КратностьДокумента);
	
	Запрос.УстановитьПараметр("ТаблицаПоТоварам", СтруктураТаблицДокумента.ТаблицаПоТоварам);
	Запрос.УстановитьПараметр("ТаблицаПоУслугам", СтруктураТаблицДокумента.ТаблицаПоУслугам);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоТоварам
	|ИЗ
	|	&ТаблицаПоТоварам КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоУслугам
	|ИЗ
	|	&ТаблицаПоУслугам КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СчетФактура КАК СчетФактура,
	|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	""Восстановление НДС"" КАК Содержание,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС) КАК Событие,
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма > 0
	|			ТОГДА КорректировкаПоступленияТовары.СуммаНДСДоКорректировки - КорректировкаПоступленияТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДС,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма > 0
	|			ТОГДА КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	КорректировкаПоступленияТовары.СчетУчета,
	|	КорректировкаПоступленияТовары.СчетУчетаНДС,
	|	КорректировкаПоступленияТовары.Ссылка.Дата КАК Период,
	|	КорректировкаПоступленияТовары.Ссылка.Дата КАК ДатаСобытия,
	|	КорректировкаПоступленияТовары.Ссылка.Организация КАК Организация,
	|	КорректировкаПоступленияТовары.Ссылка.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЛОЖЬ КАК СторнирующаяЗаписьДопЛиста,
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Ссылка КАК Регистратор
	|ИЗ
	|	ВТТаблицаПоТоварам КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма > 0
	|	И (НЕ КорректировкаПоступленияТовары.СчетУчета.Забалансовый)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	&ИсправленныйСчетФактура,
	|	""Восстановление НДС"",
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС),
	|	КорректировкаПоступленияУслуги.Номенклатура,
	|	КорректировкаПоступленияУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма > 0
	|			ТОГДА КорректировкаПоступленияУслуги.СуммаНДСДоКорректировки - КорректировкаПоступленияУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма > 0
	|			ТОГДА КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	КорректировкаПоступленияУслуги.СчетЗатрат,
	|	КорректировкаПоступленияУслуги.СчетУчетаНДС,
	|	КорректировкаПоступленияУслуги.Ссылка.Дата,
	|	КорректировкаПоступленияУслуги.Ссылка.Дата,
	|	КорректировкаПоступленияУслуги.Ссылка.Организация,
	|	КорректировкаПоступленияУслуги.Ссылка.Контрагент,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	КорректировкаПоступленияУслуги.НомерСтроки,
	|	КорректировкаПоступленияУслуги.Ссылка
	|ИЗ
	|	ВТТаблицаПоУслугам КАК КорректировкаПоступленияУслуги
	|ГДЕ
	|	КорректировкаПоступленияУслуги.Ссылка = &Ссылка
	|	И КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СчетФактура КАК СчетФактура,
	|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	""НДС"" КАК Содержание,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	КорректировкаПоступленияТовары.Ссылка.Дата КАК ДатаСобытия,
	|	ЛОЖЬ КАК ЗаписьДополнительногоЛиста,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК КорректируемыйПериод,
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма < 0
	|			ТОГДА (КорректировкаПоступленияТовары.СуммаНДСДоКорректировки - КорректировкаПоступленияТовары.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДС,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма < 0
	|			ТОГДА (КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	КорректировкаПоступленияТовары.СчетУчета,
	|	КорректировкаПоступленияТовары.СчетУчетаНДС,
	|	КорректировкаПоступленияТовары.Ссылка.Дата КАК Период,
	|	КорректировкаПоступленияТовары.Ссылка.Организация КАК Организация,
	|	КорректировкаПоступленияТовары.Ссылка.Контрагент КАК Поставщик,
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Ссылка КАК Регистратор
	|ИЗ
	|	ВТТаблицаПоТоварам КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма < 0
	|	И (НЕ КорректировкаПоступленияТовары.СчетУчета.Забалансовый)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	&ИсправленныйСчетФактура,
	|	""НДС"",
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету),
	|	КорректировкаПоступленияУслуги.Ссылка.Дата,
	|	ЛОЖЬ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	КорректировкаПоступленияУслуги.Номенклатура,
	|	КорректировкаПоступленияУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма < 0
	|			ТОГДА (КорректировкаПоступленияУслуги.СуммаНДСДоКорректировки - КорректировкаПоступленияУслуги.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма < 0
	|			ТОГДА (КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	КорректировкаПоступленияУслуги.СчетЗатрат,
	|	КорректировкаПоступленияУслуги.СчетУчетаНДС,
	|	КорректировкаПоступленияУслуги.Ссылка.Дата,
	|	КорректировкаПоступленияУслуги.Ссылка.Организация,
	|	КорректировкаПоступленияУслуги.Ссылка.Контрагент,
	|	КорректировкаПоступленияУслуги.НомерСтроки,
	|	КорректировкаПоступленияУслуги.Ссылка
	|ИЗ
	|	ВТТаблицаПоУслугам КАК КорректировкаПоступленияУслуги
	|ГДЕ
	|	КорректировкаПоступленияУслуги.Ссылка = &Ссылка
	|	И КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма < 0";

	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаВосстановление = Результат[2].Выгрузить();
	ТаблицаВычет = Результат[3].Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаВосстановление Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
			СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчета, , , , , СтрокаТаблицы.ЭтоУслуга);
	КонецЦикла;		
		
	Для Каждого СтрокаТаблицы Из ТаблицаВычет Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
			СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчета, , , , , СтрокаТаблицы.ЭтоУслуга);
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаВосстановление, ТаблицаВычет", ТаблицаВосстановление, ТаблицаВычет);
		
КонецФункции	

Функция КорректировкаПоступленияПодготовитьТаблицуКорректировкаНДСПоПартиямЗапасов(СтруктураШапкиДокумента, СтруктураТаблицДокумента)
	
	Если НЕ СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СчетФактура", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления, Истина));  
	Запрос.УстановитьПараметр("Курс", СтруктураШапкиДокумента.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность", СтруктураШапкиДокумента.КратностьДокумента);
	Запрос.УстановитьПараметр("ТаблицаПоТоварам", СтруктураТаблицДокумента.ТаблицаПоТоварам);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоТоварам
	|ИЗ
	|	&ТаблицаПоТоварам КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СчетФактура КАК СчетФактура,
	|	&СчетФактура КАК Партия,
	|	КорректировкаПоступленияТовары.Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
	|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступленияТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	КорректировкаПоступленияТовары.Количество - КорректировкаПоступленияТовары.КоличествоДоИзменения КАК Количество,
	|	ВЫБОР
	|		КОГДА (НЕ КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС)
	|			ТОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения)
	|		ИНАЧЕ КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения
	|	КОНЕЦ КАК Стоимость,
	|	КорректировкаПоступленияТовары.СчетУчета,
	|	КорректировкаПоступленияТовары.СчетУчетаНДС,
	|	КорректировкаПоступленияТовары.Ссылка.Дата КАК Период,
	|	КорректировкаПоступленияТовары.Ссылка.Организация КАК Организация,
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Ссылка КАК Регистратор,
	|	ЛОЖЬ КАК НоваяСтрока,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 20 / 120
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 18 / 118
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 10 / 110
	//АБС ВСТАВКА 44538  06.06.2014 8:17:01  Коломиец
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС4)
	|			ТОГДА 4 / 104	
	//АБС ВСТАВКА 44538 КОНЕЦ		
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтавкаНДСМножитель
	|ИЗ
	|	ВТТаблицаПоТоварам КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И (КорректировкаПоступленияТовары.КоличествоДоИзменения - КорректировкаПоступленияТовары.Количество <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма <> 0)
	|	И КорректировкаПоступленияТовары.КоличествоДоИзменения <> 0
	|	И (НЕ КорректировкаПоступленияТовары.СчетУчета.Забалансовый)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	&СчетФактура,
	|	КорректировкаПоступленияТовары.Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка),
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.СерияНоменклатуры,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	КорректировкаПоступленияТовары.Количество,
	|	ВЫБОР
	|		КОГДА (НЕ КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС)
	|			ТОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступленияТовары.Сумма
	|	КОНЕЦ,
	|	КорректировкаПоступленияТовары.СчетУчета,
	|	КорректировкаПоступленияТовары.СчетУчетаНДС,
	|	КорректировкаПоступленияТовары.Ссылка.Дата,
	|	КорректировкаПоступленияТовары.Ссылка.Организация,
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Ссылка,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 20 / 120
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 18 / 118
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 10 / 110
	//АБС ВСТАВКА 44538  06.06.2014 8:17:01  Коломиец
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС4)
	|			ТОГДА 4 / 104	
	//АБС ВСТАВКА 44538 КОНЕЦ	
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ВТТаблицаПоТоварам КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И (КорректировкаПоступленияТовары.КоличествоДоИзменения - КорректировкаПоступленияТовары.Количество <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма <> 0)
	|	И КорректировкаПоступленияТовары.КоличествоДоИзменения = 0
	|	И (НЕ КорректировкаПоступленияТовары.СчетУчета.Забалансовый)";
		
	ТаблицаКорректировки = Запрос.Выполнить().Выгрузить();
				
	Для Каждого СтрокаТаблицы Из ТаблицаКорректировки Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
			СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчета, , , , , Ложь);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаКорректировки);
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.Партия,
	|	ТаблицаДокумента.Склад,
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.СерияНоменклатуры,
	|	ТаблицаДокумента.ХарактеристикаНоменклатуры,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Количество,
	|	ТаблицаДокумента.Стоимость,
	|	ТаблицаДокумента.СчетУчета,
	|	ТаблицаДокумента.СчетУчетаНДС,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Регистратор,
	|	ТаблицаДокумента.НоваяСтрока,
	|	ТаблицаДокумента.СтавкаНДСМножитель
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаДокумента.СчетФактура,
	|	ВТТаблицаДокумента.Партия,
	|	ВТТаблицаДокумента.Склад,
	|	ВТТаблицаДокумента.ВидЦенности,
	|	ВТТаблицаДокумента.Номенклатура,
	|	ВТТаблицаДокумента.СерияНоменклатуры,
	|	ВТТаблицаДокумента.ХарактеристикаНоменклатуры,
	|	ВТТаблицаДокумента.СтавкаНДС,
	|	ВТТаблицаДокумента.Количество,
	|	ВТТаблицаДокумента.Стоимость * (&Курс / &Кратность) * ВТТаблицаДокумента.СтавкаНДСМножитель КАК НДС,
	|	ВТТаблицаДокумента.Стоимость * (&Курс / &Кратность) КАК Стоимость,
	|	ВТТаблицаДокумента.СчетУчета,
	|	ВТТаблицаДокумента.СчетУчетаНДС,
	|	ВТТаблицаДокумента.Период,
	|	ВТТаблицаДокумента.Организация,
	|	ВТТаблицаДокумента.НомерСтроки,
	|	ВТТаблицаДокумента.Регистратор,
	|	ВТТаблицаДокумента.НоваяСтрока,
	|	НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСОстаток
	|ИЗ
	|	ВТТаблицаДокумента КАК ВТТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПартииТоваров.Остатки(
	|				&МоментДокумента,
	|				Организация = &Организация
	|					И СчетФактура = &СчетФактура) КАК НДСПоПриобретеннымЦенностямОстатки
	|		ПО ВТТаблицаДокумента.Номенклатура = НДСПоПриобретеннымЦенностямОстатки.Номенклатура
	|			И ВТТаблицаДокумента.СерияНоменклатуры = НДСПоПриобретеннымЦенностямОстатки.СерияНоменклатуры
	|			И ВТТаблицаДокумента.ХарактеристикаНоменклатуры = НДСПоПриобретеннымЦенностямОстатки.ХарактеристикаНоменклатуры
	|			И ВТТаблицаДокумента.ВидЦенности = НДСПоПриобретеннымЦенностямОстатки.ВидЦенности
	|			И ВТТаблицаДокумента.Склад = НДСПоПриобретеннымЦенностямОстатки.Склад
	|			И ВТТаблицаДокумента.СчетУчетаНДС = НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС
	|ГДЕ
	|	(НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток > 0
	|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.НДСОстаток > 0
	|			ИЛИ ВТТаблицаДокумента.НоваяСтрока)";
		
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции	

Функция КорректировкаПоступленияПроверитьНаличиеКосвенныхРасходов(СтруктураШапкиДокумента)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления, Истина));
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
    Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДСКосвенныеРасходыОбороты.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(
	|			,
	|			&МоментДокумента,
	|			Регистратор,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК НДСКосвенныеРасходыОбороты";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции	

Процедура КорректировкаПоступленияСформироватьКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, Движения)
	
	СтруктураТаблиц = КорректировкаПоступленияПодготовитьТаблицуКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(СтруктураТаблиц.ТаблицаВычет, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(СтруктураТаблиц.ТаблицаВосстановление, СтруктураШапкиДокумента, Истина);
    	                                                                                
	Если СтруктураШапкиДокумента.ВосстановитьНДС Тогда
		КорректировкаПоступленияСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, СтруктураТаблиц.ТаблицаВосстановление, , Движения);	
	КонецЕсли;	
	
	Если ЕстьКосвенныеРасходы Тогда
		// НДС принят к вычету в пропорции определенной согласно п.4 ст.170 НК РФ
		ТаблицаВычетНДС = КорректировкаПоступленияПодготовитьТаблицуВычетНДССУчетомПропорции(СтруктураШапкиДокумента, СтруктураТаблиц.ТаблицаВычет);
	Иначе
		// НДС будет предъявлен к вычету по строкам на увеличение стоимости	
		ТаблицаВычетНДС = СтруктураТаблиц.ТаблицаВычет;
	КонецЕсли;
	
	КорректировкаПоступленияСформироватьДвиженияНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаВычетНДС, , Движения);
			
КонецПроцедуры	

Процедура КорректировкаПоступленияСформироватьИсправительныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, СтруктураТаблицСторноНДС, Движения)
	
	ИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления);
	
	Если ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		// Сторно движений исправляемого документа
		КорректировкаПоступленияСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС.КнигаПродаж, Истина, Движения);
		// Новые движения по исправленному корректировочному счету-фактуре
		КорректировкаПоступленияСформироватьКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, Движения);	
				
	Иначе	
						
		ТаблицаДокумента = КорректировкаПоступленияПодготовитьТаблицуВычетНДСНаОснованииДокумента(СтруктураШапкиДокумента, СтруктураТаблицДокумента);
		
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаДокумента, СтруктураШапкиДокумента, Истина);
		
		Если ЕстьКосвенныеРасходы Тогда
			// НДС принят к вычету в пропорции определенной согласно п.4 ст.170 НК РФ
			ТаблицаВычетНДС = КорректировкаПоступленияПодготовитьТаблицуВычетНДССУчетомПропорции(СтруктураШапкиДокумента, ТаблицаДокумента);					
		Иначе
			// НДС будет предъявлен к вычету за минусом включенного в стомость
			ТаблицаВычетНДС = КорректировкаПоступленияПодготовитьТаблицуВычетНДСЗаМинусомНалогаВключенногоВСтоимость(СтруктураШапкиДокумента, ТаблицаДокумента);
		КонецЕсли;;	
				
		КорректировкаПоступленияСформироватьДвиженияНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаВычетНДС, , Движения);	
						
	КонецЕсли;	
		
КонецПроцедуры	

Процедура КорректировкаПоступленияДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, Движения)
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда // Исправительный счет-фактура	
		
		// Сторно движений исправляемого документа
		КорректировкаПоступленияСформироватьДвиженияЗаписьКнигиПокупок(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС.КнигаПокупок, Движения);
		КорректировкаПоступленияСформироватьДвиженияНДСПредъявленный(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС.НДСПредъявленный, Истина, Движения);
		
		КорректировкаПоступленияСформироватьИсправительныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, СтруктураТаблицСторноНДС, Движения);
		
		
	Иначе // Корректировочный счет-фактура
		
		КорректировкаПоступленияСформироватьКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, Движения);
				
	КонецЕсли;
	
	ТаблицаКорректировкаНДСПоПартиямЗапасов = КорректировкаПоступленияПодготовитьТаблицуКорректировкаНДСПоПартиямЗапасов(СтруктураШапкиДокумента, СтруктураТаблицДокумента);
	КорректировкаПоступленияСформироватьДвиженияКорректировкаНДСПоПартиямЗапасов(СтруктураШапкиДокумента, ТаблицаКорректировкаНДСПоПартиямЗапасов, Движения);
		
КонецПроцедуры		

Процедура КорректировкаПоступленияСформироватьПроводкиСторноВосстановленияНДС(СтруктураШапкиДокумента, Движения)
	
	ДобавитьНаборРегистраБухгалтерииВСтруктуруДвижений(Движения,"Хозрасчетный", СтруктураШапкиДокумента.Ссылка);
	
	НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписейХозрасчетный.Отбор.Регистратор.Значение = СтруктураШапкиДокумента.ДокументПоступления;
	НаборЗаписейХозрасчетный.Прочитать();
	
	Для Каждого ДвижениеСторнируемое Из НаборЗаписейХозрасчетный Цикл

		Если ДвижениеСторнируемое.СчетКт = ПланыСчетов.Хозрасчетный.НДС
			И ДвижениеСторнируемое.Сумма > 0 Тогда
			
			Движение = Движения.Хозрасчетный.Добавить();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			
			ЗаполнитьЗначенияСвойств(Движение, ДвижениеСторнируемое, , "Период, Регистратор");
			
			Для каждого Субконто Из ДвижениеСторнируемое.СубконтоДт Цикл
				Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
			КонецЦикла;
			
			Для каждого Субконто Из ДвижениеСторнируемое.СубконтоКт Цикл
				Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			КонецЦикла;
			
			Движение.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПроведениеДокументовПоНДС;
			Движение.Сумма = -ДвижениеСторнируемое.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
					
КонецПроцедуры

Процедура КорректировкаПоступленияСформироватьДвиженияЗаписьКнигиПокупок(СтруктураШапкиДокумента, ТаблицаДвижений, Движения)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПокупок", СтруктураШапкиДокумента.Ссылка);
	ДобавитьНаборРегистраБухгалтерииВСтруктуруДвижений(Движения,"Хозрасчетный", СтруктураШапкиДокумента.Ссылка);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
			
		// НДС Покупки
		Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		//АБС ВСТАВКА №37870 НАЧАЛО «27 января 2014 г.», Пополитов  				
		абс_ЗаписьДопЛиста(СтруктураШапкиДокумента,Движение);
		//\\АБС ВСТАВКА №37870 КОНЕЦ
		
		Если СтруктураШапкиДокумента.КорректироватьБУиНУ Тогда
		
			// Хозрасчетный
			
			//Дт 19 - Кт 68 "-"
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период = СтрокаДвижения.Период;
			Проводка.Организация = СтрокаДвижения.Организация;
			Проводка.Содержание = СтрокаДвижения.Содержание;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			////АБС+ Тупиков 15133
			//Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Ссылка.абс_ПериодОтражения) Тогда
			//	ПериодОтражения = Документы.КорректировкаРеализации.ПолучитьПериодНДСПоДатеКвартал(СтруктураШапкиДокумента.ДокументПоступленияДата);
			//Иначе
			//	ПериодОтражения = СтруктураШапкиДокумента.Ссылка.абс_ПериодОтражения;
			//КонецЕсли; 
			////АБС- Тупиков 
			//АБС ВСТАВКА №37834 НАЧАЛО «25 января 2014 г.», Пополитов
			Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				ПериодОтражения = абс_СерверныеФункции.КорректныйПериодОтраженияНеДляНДС(СтруктураШапкиДокумента.абс_ПериодОтражения
																							,Неопределено                  
																							,СтруктураШапкиДокумента.ДокументПоступленияДата);
			ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				ПериодОтражения = абс_СерверныеФункции.КорректныйПериодОтраженияДляНДС(СтруктураШапкиДокумента.абс_ПериодОтражения
																							,Неопределено                  
																							,СтруктураШапкиДокумента.ДокументРеализацииДата);
			Иначе
				ПериодОтражения = СтруктураШапкиДокумента.абс_ПериодОтражения;	
			КонецЕсли;
			//\\АБС ВСТАВКА №37834 КОНЕЦ			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения", ПериодОтражения);
			
			
			Проводка.СчетКт = СтрокаДвижения.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаДвижения.СчетФактура, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаДвижения.Поставщик, Истина);
			
			Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПроведениеДокументовПоНДС;
			Проводка.Сумма = СтрокаДвижения.НДС;
			
		КонецЕсли;	
                       	
	КонецЦикла;
		
КонецПроцедуры

//АБС ВСТАВКА №37870,18833,37301 НАЧАЛО «27 января 2014 г.», Пополитов
Процедура абс_ЗаписьДопЛиста(СтруктураШапкиДокумента,Движение) Экспорт 
		
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления") 
		или ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда   		
		//Ручной учет
		Если СтруктураШапкиДокумента.абс_ОпределенияПризнакаДопЛистаДляКниги = Перечисления.абс_ОпределенияПризнакаДопЛистаДляКниги.Вручную Тогда
			Движение.ЗаписьДополнительногоЛиста = СтруктураШапкиДокумента.абс_ЗаписьДополнительногоЛиста;
			Движение.КорректируемыйПериод = СтруктураШапкиДокумента.абс_КорректируемыйПериод;
			
		Иначе	  			
			//Автоматический учет
			абс_ДатаИзмененияОтраженияКорректировкиПоНДС = глЗначениеПеременной("абс_ДатаИзмененияОтраженияКорректировкиПоНДС");
			Если абс_ДатаИзмененияОтраженияКорректировкиПоНДС = '00010101' 
				или СтруктураШапкиДокумента.Дата < абс_ДатаИзмененияОтраженияКорректировкиПоНДС Тогда
            	Возврат;
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
				врКорректируемыйПериод = СтруктураШапкиДокумента.Дата;
				Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
					врКорректируемыйПериод = СтруктураШапкиДокумента.ДокументПоступленияДата;
				ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					врКорректируемыйПериод = СтруктураШапкиДокумента.ДокументРеализацииДата;
				КонецЕсли;
				Если НачалоКвартала(врКорректируемыйПериод) <> НачалоКвартала(СтруктураШапкиДокумента.Дата) Тогда
					Движение.ЗаписьДополнительногоЛиста = Истина;
					Движение.КорректируемыйПериод = врКорректируемыйПериод;
				КонецЕсли;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
				Движение.СторнирующаяЗаписьДопЛиста = Ложь;
				Движение.ЗаписьДополнительногоЛиста = Ложь;
				Движение.КорректируемыйПериод = '00010101';
			КонецЕсли;
			
		КонецЕсли; 		
	КонецЕсли; 		
	
КонецПроцедуры	
//\\АБС ВСТАВКА №37870 КОНЕЦ

Процедура КорректировкаПоступленияСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, ТаблицаДвижений, Сторно = Ложь, Движения)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборРегистраБухгалтерииВСтруктуруДвижений(Движения,"Хозрасчетный", СтруктураШапкиДокумента.Ссылка);
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);  
	//АБС Коломиец 13843+
	абс_ДатаУчетаПоСчетамУчетаВНДСПродажи = глЗначениеПеременной("абс_ДатаУчетаПоСчетамУчетаВНДСПродажи");  
	//АБС Коломиец 13843-

	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
    		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		
		//АБС ВСТАВКА №37870 НАЧАЛО «27 января 2014 г.», Пополитов  				
		абс_ЗаписьДопЛиста(СтруктураШапкиДокумента,Движение);
		//\\АБС ВСТАВКА №37870 КОНЕЦ
		
		Если абс_ДатаУчетаПоСчетамУчетаВНДСПродажи <> '00010101000000' И СтруктураШапкиДокумента.Дата >= абс_ДатаУчетаПоСчетамУчетаВНДСПродажи  Тогда		
			Движение.абс_СчетУчета = ПланыСчетов.Хозрасчетный.ОтрицательныеКорректировкиНДС; 
		КонецЕсли; 		
		Если СтруктураШапкиДокумента.КорректироватьБУиНУ Тогда
		
			Если Сторно Тогда
				КорректировкаПоступленияСформироватьПроводкиСторноВосстановленияНДС(СтруктураШапкиДокумента, Движения);
			Иначе	
				
				// Хозрасчетный
				
				//абсо
				//Проводка = Движения.Хозрасчетный.Добавить();
				//
				//Проводка.Период = СтрокаДвижения.Период;
				//Проводка.Организация = СтрокаДвижения.Организация;
				//Проводка.Содержание = СтрокаДвижения.Содержание;
				//
				//Проводка.СчетДт = СтрокаДвижения.СчетУчетаНДС;
				//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура, Истина);
				//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДвижения.Покупатель, Истина);
				//
				//Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
				//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				//
				//Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПроведениеДокументовПоНДС;
				//Проводка.Сумма = СтрокаДвижения.НДС;
				
				//Дт 76.КР - Кт 19 "-"
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период = СтрокаДвижения.Период;
				Проводка.Организация = СтрокаДвижения.Организация;
				Проводка.Содержание = СтрокаДвижения.Содержание;
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ОтрицательныеКорректировкиНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура, Истина);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДвижения.Покупатель, Истина);
				
				Проводка.СчетКт = СтрокаДвижения.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаДвижения.СчетФактура, Истина);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаДвижения.Покупатель, Истина);
				
				Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПроведениеДокументовПоНДС;
				Проводка.Сумма = - СтрокаДвижения.НДС;
				
				//76.КР - Кт 68 ("--" = "+")
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период = СтрокаДвижения.Период;
				Проводка.Организация = СтрокаДвижения.Организация;
				Проводка.Содержание = СтрокаДвижения.Содержание;
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ОтрицательныеКорректировкиНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура, Истина);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДвижения.Покупатель, Истина);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				////АБС+ Тупиков 15133
				//Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Ссылка.абс_ПериодОтражения) Тогда
				//	ПериодОтражения = Документы.КорректировкаРеализации.ПолучитьПериодНДСПоДатеКвартал(СтруктураШапкиДокумента.ДокументПоступленияДата);
				//Иначе
				//	ПериодОтражения = СтруктураШапкиДокумента.Ссылка.абс_ПериодОтражения;
				//КонецЕсли; 
				//АБС- Тупиков
				//АБС ВСТАВКА №37834 НАЧАЛО «25 января 2014 г.», Пополитов
				Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
					ПериодОтражения = абс_СерверныеФункции.КорректныйПериодОтраженияНеДляНДС(СтруктураШапкиДокумента.абс_ПериодОтражения
																								,Неопределено                  
																								,СтруктураШапкиДокумента.ДокументПоступленияДата);
				ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					ПериодОтражения = абс_СерверныеФункции.КорректныйПериодОтраженияДляНДС(СтруктураШапкиДокумента.абс_ПериодОтражения
																								,Неопределено                  
																								,СтруктураШапкиДокумента.ДокументРеализацииДата);
				Иначе
					ПериодОтражения = СтруктураШапкиДокумента.абс_ПериодОтражения;	
				КонецЕсли;
				//\\АБС ВСТАВКА №37834 КОНЕЦ				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ас_ПериодыОтражения", ПериодОтражения);  				 
				
				Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПроведениеДокументовПоНДС;
				Проводка.Сумма = СтрокаДвижения.НДС;
				
			КонецЕсли;	
			
		КонецЕсли;	
                       	
	КонецЦикла;
			
КонецПроцедуры

Процедура КорректировкаПоступленияСформироватьДвиженияНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, Сторно = Ложь, Движения)
	
	Если ТаблицаПредъявленногоНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСПредъявленный", СтруктураШапкиДокумента.Ссылка);
	
	Для Каждого СтрокаДвижения Из ТаблицаПредъявленногоНДС Цикл 
		Если Сторно Тогда
			Движение = Движения.НДСПредъявленный.ДобавитьРасход();
		Иначе
			Движение = Движения.НДСПредъявленный.ДобавитьПриход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
				
	КонецЦикла;	
		
КонецПроцедуры	

Процедура КорректировкаПоступленияСформироватьДвиженияКорректировкаНДСПоПартиямЗапасов(СтруктураШапкиДокумента, ТаблицаДвижений, Движения)
	
	Если ТаблицаДвижений = Неопределено
		ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСПартииТоваров", СтруктураШапкиДокумента.Ссылка);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл 
				
		Движение = Движения.НДСПартииТоваров.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		
	КонецЦикла;
				
КонецПроцедуры	

Функция КорректировкаПоступленияПолучитьТаблицыДокумента(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.Количество,
	|	КорректировкаПоступленияТовары.Цена,
	|	КорректировкаПоступленияТовары.Сумма,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	КорректировкаПоступленияТовары.СуммаНДС,
	|	КорректировкаПоступленияТовары.СерияНоменклатуры,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.СчетУчетаБУ,
	|	КорректировкаПоступленияТовары.СчетУчетаНДС,
	|	КорректировкаПоступленияТовары.Склад,
	|	КорректировкаПоступленияТовары.КоличествоДоИзменения,
	|	КорректировкаПоступленияТовары.ЦенаДоИзменения,
	|	КорректировкаПоступленияТовары.СтавкаНДСДоИзменения,
	|	КорректировкаПоступленияТовары.СуммаДоИзменения,
	|	КорректировкаПоступленияТовары.СуммаНДСДоИзменения,
	|	КорректировкаПоступленияТовары.КоличествоДоКорректировки,
	|	КорректировкаПоступленияТовары.ЦенаДоКорректировки,
	|	КорректировкаПоступленияТовары.СуммаДоКорректировки,
	|	КорректировкаПоступленияТовары.СуммаНДСДоКорректировки,
	|	КорректировкаПоступленияТовары.Ссылка,
	|	КорректировкаПоступленияТовары.СчетУчетаНУ,
	|	КорректировкаПоступленияТовары.Ссылка.Дата,
	|	КорректировкаПоступленияТовары.Ссылка.Организация,
	|	КорректировкаПоступленияТовары.Ссылка.Контрагент
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка";
	
	ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступленияУслуги.НомерСтроки,
	|	КорректировкаПоступленияУслуги.Номенклатура,
	|	КорректировкаПоступленияУслуги.Количество,
	|	КорректировкаПоступленияУслуги.Цена,
	|	КорректировкаПоступленияУслуги.Сумма,
	|	КорректировкаПоступленияУслуги.СтавкаНДС,
	|	КорректировкаПоступленияУслуги.СуммаНДС,
	|	КорректировкаПоступленияУслуги.СчетУчетаНДС,
	|	КорректировкаПоступленияУслуги.КоличествоДоИзменения,
	|	КорректировкаПоступленияУслуги.ЦенаДоИзменения,
	|	КорректировкаПоступленияУслуги.СтавкаНДСДоИзменения,
	|	КорректировкаПоступленияУслуги.СуммаНДСДоИзменения,
	|	КорректировкаПоступленияУслуги.СуммаДоИзменения,
	|	КорректировкаПоступленияУслуги.КоличествоДоКорректировки,
	|	КорректировкаПоступленияУслуги.ЦенаДоКорректировки,
	|	КорректировкаПоступленияУслуги.СуммаДоКорректировки,
	|	КорректировкаПоступленияУслуги.СуммаНДСДоКорректировки,
	|	КорректировкаПоступленияУслуги.Ссылка,
	|	КорректировкаПоступленияУслуги.СтатьяЗатрат,
	|	КорректировкаПоступленияУслуги.Субконто1,
	|	КорректировкаПоступленияУслуги.Субконто2,
	|	КорректировкаПоступленияУслуги.Субконто3,
	|	КорректировкаПоступленияУслуги.НоменклатурнаяГруппа,
	|	КорректировкаПоступленияУслуги.Подразделение,
	|	КорректировкаПоступленияУслуги.ПодразделениеОрганизации,
	|	КорректировкаПоступленияУслуги.СчетЗатратНУ,
	|	КорректировкаПоступленияУслуги.СубконтоНУ1,
	|	КорректировкаПоступленияУслуги.СубконтоНУ2,
	|	КорректировкаПоступленияУслуги.СубконтоНУ3,
	|	КорректировкаПоступленияУслуги.СчетЗатрат,
	|	КорректировкаПоступленияУслуги.Ссылка.Дата,
	|	КорректировкаПоступленияУслуги.Ссылка.Организация,
	|	КорректировкаПоступленияУслуги.Ссылка.Контрагент
	|ИЗ
	|	Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступленияУслуги
	|ГДЕ
	|	КорректировкаПоступленияУслуги.Ссылка = &Ссылка";
	
	ТаблицаПоУслугам = Запрос.Выполнить().Выгрузить();
	
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Услуги", ТаблицаПоУслугам, СтруктураШапкиДокумента);
	
	ТаблицаПоТоварам.Колонки.СчетУчетаБУ.Имя = "СчетУчета";
	
	Возврат Новый Структура("ТаблицаПоТоварам, ТаблицаПоУслугам", ТаблицаПоТоварам, ТаблицаПоУслугам);
	
КонецФункции

Процедура ПровестиКорректировкуПоступленияПоРегистрамНДС(СтруктураШапкиДокумента, ДокументСсылка) Экспорт
	
	УчетНДС.ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, Истина);
	
	Движения = Новый Структура();
		
	СтруктураТаблицСторноНДС = КорректировкаПоступленияПодготовитьСтруктуруТаблицСторнирующихНДСЗаписей(СтруктураШапкиДокумента);
	СтруктураТаблицДокумента = КорректировкаПоступленияПолучитьТаблицыДокумента(СтруктураШапкиДокумента);
	ЕстьКосвенныеРасходы = КорректировкаПоступленияПроверитьНаличиеКосвенныхРасходов(СтруктураШапкиДокумента);
	
	Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН 
		И СтруктураШапкиДокумента.УчитыватьНДС Тогда	
		КорректировкаПоступленияДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, Движения);	
	КонецЕсли;
		
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		Если НЕ Элемент.Ключ = "Хозрасчетный" Тогда
			НаборЗаписей.мПериод = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		НаборЗаписей.Записать(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Корректировка реализации

Функция КорректировкаРеализацииПодготовитьСтруктуруТаблицСторнирующихНДСЗаписей(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос();
	
	ИсходныйСчетФактура = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации, Истина);
	Запрос.УстановитьПараметр("ИсходныйСчетФактураДата", ИсходныйСчетФактура.Дата);
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации));
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);

	абс_ДатаУчетаПоСчетамУчетаВНДСПродажи = Константы.абс_ДатаУчетаПоСчетамУчетаВНДСПродажи.Получить();  //АБС Коломиец 13843
	Если абс_ДатаУчетаПоСчетамУчетаВНДСПродажи <> '00010101000000' И СтруктураШапкиДокумента.Дата >= абс_ДатаУчетаПоСчетамУчетаВНДСПродажи  Тогда
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование реализации"" КАК Содержание,
	|	ЗаписиКнигиПродаж.Организация,
	|	ЗаписиКнигиПродаж.Покупатель,
	|	ЗаписиКнигиПродаж.СчетФактура,
	|	ЗаписиКнигиПродаж.ВидЦенности,
	|	ЗаписиКнигиПродаж.СтавкаНДС,
	|	ЗаписиКнигиПродаж.ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПродаж.НДСОборот * -1 КАК НДС,
	|	ЗаписиКнигиПродаж.абс_СчетУчета
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПродаж";
	
    Иначе // АБС Коломиец-
	
	Запрос.Текст =  	 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование реализации"" КАК Содержание,
	|	ЗаписиКнигиПродаж.Организация,
	|	ЗаписиКнигиПродаж.Покупатель,
	|	ЗаписиКнигиПродаж.СчетФактура,
	|	ЗаписиКнигиПродаж.ВидЦенности,
	|	ЗаписиКнигиПродаж.СтавкаНДС,
	|	ЗаписиКнигиПродаж.ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПродаж.НДСОборот * -1 КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПродаж";
	КонецЕсли;
	
	СтруктураТаблиц = Новый Структура();
	
	СтруктураТаблиц.Вставить("КнигаПродаж", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование реализации"" КАК Содержание,
	|	ЗаписиКнигиПокупок.Организация,
	|	ЗаписиКнигиПокупок.Поставщик,
	|	ЗаписиКнигиПокупок.СчетФактура,
	|	ЗаписиКнигиПокупок.ВидЦенности,
	|	ЗаписиКнигиПокупок.СтавкаНДС,
	|	ЗаписиКнигиПокупок.ДатаОплаты,
	|	ЗаписиКнигиПокупок.ДокументОплаты,
	|	ЗаписиКнигиПокупок.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПокупок.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПокупок.НДСОборот * -1 КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПокупок";
	
	СтруктураТаблиц.Вставить("КнигаПокупок", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
	|	NULL КАК Событие,
	|	NULL КАК ДатаСобытия
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК НДСПредъявленныйОстатки";
	
	СтруктураТаблиц.Вставить("НДСПредъявленный", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСНачисленныйОстатки.Организация,
	|	НДСНачисленныйОстатки.СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента,
	|	НДСНачисленныйОстатки.ВидНачисления,
	|	НДСНачисленныйОстатки.ИсправленныйСчетФактура,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	NULL КАК Событие,
	|	NULL КАК ДатаСобытия
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК НДСНачисленныйОстатки";
	
	СтруктураТаблиц.Вставить("НДСНачисленный", Запрос.Выполнить().Выгрузить());
    	
	Возврат СтруктураТаблиц;
			
КонецФункции

Функция КорректировкаРеализацииПодготовитьТаблицуНачисленияНДСПоДаннымДокумента(СтруктураШапкиДокумента, СтруктураТаблицДокумента)
	
	Запрос = Новый Запрос();
	ИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации);
	ДатаСчетаФактуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокумент, "Дата");		
	
	Запрос.УстановитьПараметр("Курс", СтруктураШапкиДокумента.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность", СтруктураШапкиДокумента.КратностьДокумента);
    Запрос.УстановитьПараметр("ИсправляемыйДокумент", ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("ИсходныйДокумент", УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации, Истина));
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("ДатаСчетаФактуры", ДатаСчетаФактуры);
	Запрос.УстановитьПараметр("Принятые", Перечисления.ПринадлежностьНоменклатуры.Принятый);
	Запрос.УстановитьПараметр("Событие", ?(ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику"), 
			Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате, Перечисления.СобытияПоНДСПродажи.Реализация));
	Запрос.УстановитьПараметр("ТаблицаПоТоварам", СтруктураТаблицДокумента.ТаблицаПоТоварам);
	Запрос.УстановитьПараметр("ТаблицаПоУслугам", СтруктураТаблицДокумента.ТаблицаПоУслугам);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоТоварам
	|ИЗ
	|	&ТаблицаПоТоварам КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоУслугам
	|ИЗ
	|	&ТаблицаПоУслугам КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.Ссылка,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ТаблицаТовары.Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК ВидЦенности,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Субконто,
	|	""Реализация товаров"" КАК Содержание
	|	, ТаблицаТовары.СчетРасходовБУ   //АБС Коломиец 13843	
	|ПОМЕСТИТЬ ВТТоварыИУслуги
	|ИЗ
	|	ВТТаблицаПоТоварам КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ПринадлежностьНоменклатуры <> &Принятые
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.СуммаНДС,
	|	ТаблицаУслуги.Ссылка,
	|	ИСТИНА,
	|	ТаблицаУслуги.Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги),
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаУслуги.Субконто,
	|	""Реализация услуг""
	|	, ТаблицаУслуги.СчетРасходовБУ   //АБС Коломиец	13843
	|ИЗ
	|	ВТТаблицаПоУслугам КАК ТаблицаУслуги
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыИУслуги.ВидЦенности КАК ВидЦенности,
	|	ТоварыИУслуги.Содержание КАК Содержание,
	|	ТоварыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТоварыИУслуги.Сумма) КАК Сумма,
	|	СУММА(ТоварыИУслуги.СуммаНДС) КАК НДС,
	|	ТоварыИУслуги.Ссылка КАК Регистратор,
	|	ТоварыИУслуги.Ссылка.Дата КАК Период,
	|	ТоварыИУслуги.Ссылка.Организация КАК Организация,
	|	ТоварыИУслуги.Ссылка.Контрагент КАК Покупатель,
	|	ТоварыИУслуги.Ссылка КАК ИсправленныйСчетФактура,
	|	&Событие КАК Событие,
	|	ТоварыИУслуги.Ссылка.Дата КАК ДатаСобытия,
	|	&ИсправляемыйДокумент КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ДатаСчетаФактуры, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ЛОЖЬ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ДатаСчетаФактуры, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ТоварыИУслуги.ЭтоУслуга КАК ЭтоУслуга,
	|	ТоварыИУслуги.Номенклатура КАК Номенклатура,
	|	ТоварыИУслуги.СчетУчета КАК СчетУчета,
	|	ТоварыИУслуги.Субконто
	|	, ТоварыИУслуги.СчетРасходовБУ КАК абс_СчетУчета  //АБС Коломиец 13843	
	|ИЗ
	|	ВТТоварыИУслуги КАК ТоварыИУслуги
	|ГДЕ
	|	ТоварыИУслуги.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыИУслуги.СтавкаНДС,
	|	ТоварыИУслуги.ВидЦенности,
	|	ТоварыИУслуги.Субконто,
	|	ТоварыИУслуги.Содержание,
	|	ТоварыИУслуги.Ссылка,
	|	ТоварыИУслуги.Ссылка.Дата,
	|	ТоварыИУслуги.Ссылка.Организация,
	|	ТоварыИУслуги.ЭтоУслуга,
	|	ТоварыИУслуги.Номенклатура,
	|	ТоварыИУслуги.СчетУчета,
	|	ТоварыИУслуги.Ссылка.Контрагент,
	|	ТоварыИУслуги.Ссылка,
	|	ТоварыИУслуги.Ссылка.Дата
	|	,ТоварыИУслуги.СчетРасходовБУ";   //АБС Коломиец 13843
	
	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл 
		Если НЕ СтрокаТаблицы.ЭтоУслуга Тогда
			СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
				СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчета, , , , , СтрокаТаблицы.ЭтоУслуга);
		КонецЕсли;		
	КонецЦикла;	
		
	Возврат ТаблицаДокумента;
    	
КонецФункции	

Функция КорректировкаРеализацииПодготовитьТаблицуКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента)
	
	СчетФактура = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, 
		УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации), СтруктураШапкиДокумента.Ссылка);
		
	СчетФактураДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации, Истина), "Дата");	
    	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Курс", СтруктураШапкиДокумента.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность", СтруктураШапкиДокумента.КратностьДокумента);
    Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Запрос.УстановитьПараметр("Принятые", Перечисления.ПринадлежностьНоменклатуры.Принятый);
	Запрос.УстановитьПараметр("СчетФактураДата", СчетФактураДата);
	Запрос.УстановитьПараметр("ИсправленныйСчетФактура", 
		?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, СтруктураШапкиДокумента.Ссылка, Неопределено)); 
	Запрос.УстановитьПараметр("Событие", Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("ТаблицаПоТоварам", СтруктураТаблицДокумента.ТаблицаПоТоварам);
	Запрос.УстановитьПараметр("ТаблицаПоУслугам", СтруктураТаблицДокумента.ТаблицаПоУслугам);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоТоварам
	|ИЗ
	|	&ТаблицаПоТоварам КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоУслугам
	|ИЗ
	|	&ТаблицаПоУслугам КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СчетФактура КАК СчетФактура,
	|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	""Корректировка НДС"" КАК Содержание,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	НЕОПРЕДЕЛЕНО КАК ВидЦенности,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма > 0
	|			ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоКорректировки - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДС,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма > 0
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	КорректировкаРеализацииТовары.СчетУчета,
	|	КорректировкаРеализацииТовары.Ссылка.Дата КАК Период,
	|	КорректировкаРеализацииТовары.Ссылка.Дата КАК ДатаСобытия,
	|	КорректировкаРеализацииТовары.Ссылка.Организация КАК Организация,
	|	КорректировкаРеализацииТовары.Ссылка.Контрагент КАК Поставщик,
	|	ЛОЖЬ КАК ЗаписьДополнительногоЛиста,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК КорректируемыйПериод,
	|	ЛОЖЬ КАК СторнирующаяЗаписьДопЛиста,
	|	КорректировкаРеализацииТовары.НомерСтроки,
	//|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации) КАК СчетУчетаНДС, //абсо по ТЗ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтрицательныеКорректировкиНДС) КАК СчетУчетаНДС,
	|	КорректировкаРеализацииТовары.Субконто,
	|	КорректировкаРеализацииТовары.Ссылка КАК Регистратор
	|	, КорректировкаРеализацииТовары.СчетРасходовБУ КАК абс_СчетУчета  //АБС Коломиец 13843
	|ИЗ
	|	ВТТаблицаПоТоварам КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма > 0
	|	И КорректировкаРеализацииТовары.ПринадлежностьНоменклатуры <> &Принятые
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	&ИсправленныйСчетФактура,
	|	""Корректировка НДС"",
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету),
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма > 0
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма > 0
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	КорректировкаРеализацииУслуги.Ссылка.Дата,
	|	КорректировкаРеализацииУслуги.Ссылка.Дата,
	|	КорректировкаРеализацииУслуги.Ссылка.Организация,
	|	КорректировкаРеализацииУслуги.Ссылка.Контрагент,
	|	ЛОЖЬ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ЛОЖЬ,
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	//|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации),//абсо по ТЗ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтрицательныеКорректировкиНДС),
	|	КорректировкаРеализацииУслуги.Субконто,
	|	КорректировкаРеализацииУслуги.Ссылка
	|	, КорректировкаРеализацииУслуги.СчетРасходовБУ   //АБС Коломиец 13843
	|ИЗ
	|	ВТТаблицаПоУслугам КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка
	|	И КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СчетФактура КАК СчетФактура,
	|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	""Реализация товаров"" КАК Содержание,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	НЕОПРЕДЕЛЕНО КАК ВидЦенности,
	|	&Событие КАК Событие,
	|	КорректировкаРеализацииТовары.Ссылка.Дата КАК ДатаСобытия,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма < 0
	|			ТОГДА (КорректировкаРеализацииТовары.СуммаНДСДоКорректировки - КорректировкаРеализацииТовары.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДС,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма < 0
	|			ТОГДА (КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	КорректировкаРеализацииТовары.СчетУчета,
	|	КорректировкаРеализацииТовары.Ссылка.Дата КАК Период,
	|	КорректировкаРеализацииТовары.Ссылка.Организация КАК Организация,
	|	КорректировкаРеализацииТовары.Ссылка.Контрагент КАК Покупатель,
	|	КорректировкаРеализацииТовары.НомерСтроки,
	|	КорректировкаРеализацииТовары.Субконто,
	|	КорректировкаРеализацииТовары.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ЛОЖЬ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод
	|	, КорректировкаРеализацииТовары.СчетРасходовБУ КАК абс_СчетУчета  //АБС Коломиец 13843
	|ИЗ
	|	ВТТаблицаПоТоварам КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма < 0
	|	И КорректировкаРеализацииТовары.ПринадлежностьНоменклатуры <> &Принятые
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	&ИсправленныйСчетФактура,
	|	""Реализация услуг"",
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО,
	|	&Событие,
	|	КорректировкаРеализацииУслуги.Ссылка.Дата,
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма < 0
	|			ТОГДА (КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки - КорректировкаРеализацииУслуги.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма < 0
	|			ТОГДА (КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	КорректировкаРеализацииУслуги.Ссылка.Дата,
	|	КорректировкаРеализацииУслуги.Ссылка.Организация,
	|	КорректировкаРеализацииУслуги.Ссылка.Контрагент,
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Субконто,
	|	КорректировкаРеализацииУслуги.Ссылка,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ
	|	, КорректировкаРеализацииУслуги.СчетРасходовБУ КАК абс_СчетУчета  //АБС Коломиец 13843
	|ИЗ
	|	ВТТаблицаПоУслугам КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка
	|	И КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма < 0";

	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаВычет = Результат[2].Выгрузить();
	ТаблицаВосстановление = Результат[3].Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаВосстановление Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
			СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчета, , , , , СтрокаТаблицы.ЭтоУслуга);
	КонецЦикла;		
		
	Для Каждого СтрокаТаблицы Из ТаблицаВычет Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
			СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчета, , , , , СтрокаТаблицы.ЭтоУслуга);
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаВосстановление, ТаблицаВычет", ТаблицаВосстановление, ТаблицаВычет);
    	
КонецФункции	

Процедура КорректировкаРеализацииСформироватьДвиженияСторноВычетаНДС(СтруктураШапкиДокумента, ТаблицаСторноНДС, Движения)
	
	КорректировкаРеализацииСформироватьДвиженияЗаписьКнигиПокупок(СтруктураШапкиДокумента, ТаблицаСторноНДС, Движения);
	
	Если СтруктураШапкиДокумента.КорректироватьБУиНУ Тогда
		КорректировкаРеализацииСформироватьПроводкиСторноВычетаНДС(СтруктураШапкиДокумента, Движения);	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура КорректировкаРеализацииСформироватьДвиженияПредъявленНДС(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, Сторно = Ложь, Движения)
	
	Если ТаблицаПредъявленногоНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСПредъявленный", СтруктураШапкиДокумента.Ссылка);
		
	ТаблицаПредъявленногоНДС.Свернуть(
		"ВидЦенности, СтавкаНДС, Поставщик, Организация, СчетФактура, ИсправленныйСчетФактура, Событие, ДатаСобытия, 
		| СчетУчетаНДС, Регистратор, Период", "СуммаБезНДС, НДС");
		
	Для каждого СтрокаДвижения Из ТаблицаПредъявленногоНДС Цикл
		
		Если Сторно Тогда
			Движение = Движения.НДСПредъявленный.ДобавитьРасход();
		Иначе			
			Движение = Движения.НДСПредъявленный.ДобавитьПриход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
          
  	КонецЦикла;
		
КонецПроцедуры

Процедура КорректировкаРеализацииСформироватьДвиженияЗаписьКнигиПокупок(СтруктураШапкиДокумента, ТаблицаДвижений, Движения)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПокупок", СтруктураШапкиДокумента.Ссылка);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
      		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		//АБС ВСТАВКА №37870 НАЧАЛО «27 января 2014 г.», Пополитов  				
		абс_ЗаписьДопЛиста(СтруктураШапкиДокумента,Движение);
		//\\АБС ВСТАВКА №37870 КОНЕЦ
		
	КонецЦикла;
				
КонецПроцедуры

Процедура КорректировкаРеализацииСформироватьПроводкиСторноВычетаНДС(СтруктураШапкиДокумента, Движения)
	
	ДобавитьНаборРегистраБухгалтерииВСтруктуруДвижений(Движения,"Хозрасчетный", СтруктураШапкиДокумента.Ссылка);
	
	НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписейХозрасчетный.Отбор.Регистратор.Значение = СтруктураШапкиДокумента.ДокументРеализации;
	НаборЗаписейХозрасчетный.Прочитать();
	
	Для Каждого ДвижениеСторнируемое Из НаборЗаписейХозрасчетный Цикл

		Если ДвижениеСторнируемое.СчетДт = ПланыСчетов.Хозрасчетный.НДС
			И ДвижениеСторнируемое.Сумма > 0 Тогда
			
			Движение = Движения.Хозрасчетный.Добавить();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			
			ЗаполнитьЗначенияСвойств(Движение, ДвижениеСторнируемое, , "Период, Регистратор");
			
			Для каждого Субконто Из ДвижениеСторнируемое.СубконтоДт Цикл
				Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
			КонецЦикла;
			
			Для каждого Субконто Из ДвижениеСторнируемое.СубконтоКт Цикл
				Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			КонецЦикла;
			Движение.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПроведениеДокументовПоНДС;
			Движение.Сумма = -ДвижениеСторнируемое.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры	

Процедура КорректировкаРеализацииСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, ТаблицаДвижений, Движения, СторноПроводка = Ложь)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
	
	ЕстьКолонкаПокупатель = НЕ СторноПроводка и ?(не ТаблицаДвижений.Колонки.Найти("Покупатель") = Неопределено,Истина,Ложь) и СтруктураШапкиДокумента.Свойство("абс_Контрагент");
	ЕстьКолонкаДоговорКонтрагента = НЕ СторноПроводка и ?(не ТаблицаДвижений.Колонки.Найти("ДоговорКонтрагента") = Неопределено,Истина,Ложь) и СтруктураШапкиДокумента.Свойство("абс_ДоговорКонтрагента"); 	
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
        		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);		
		абс_ЗаполнитьСчетУчетаНДС(СтруктураШапкиДокумента, СтрокаДвижения, Движение, Истина); //АБС Коломиец 13843
		//АБС ВСТАВКА №37834 НАЧАЛО «25 января 2014 г.», Пополитов	
		абс_ЗаписьДопЛиста(СтруктураШапкиДокумента,Движение);
		//\\АБС ВСТАВКА №37870 КОНЕЦ

	КонецЦикла;
	
КонецПроцедуры

Процедура КорректировкаРеализацииСформироватьКорректировочныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, Движения)
	
	СтруктураТаблиц = КорректировкаРеализацииПодготовитьТаблицуКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(СтруктураТаблиц.ТаблицаВычет, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(СтруктураТаблиц.ТаблицаВосстановление, СтруктураШапкиДокумента, Истина);
	
	// Отражение предъявленного НДС по строкам на уменьшение стоимости	
	КорректировкаРеализацииСформироватьДвиженияПредъявленНДС(СтруктураШапкиДокумента, СтруктураТаблиц.ТаблицаВычет, , Движения);
			
	ТаблицаДвижений = СтруктураТаблиц.ТаблицаВосстановление;
	ТаблицаДвижений.Свернуть(
		"Организация, Покупатель, СчетФактура, ВидЦенности, СтавкаНДС, Событие, ДатаСобытия, ЗаписьДополнительногоЛиста, СторнирующаяЗаписьДопЛиста, 
		| КорректируемыйПериод, ИсправленныйСчетФактура, Период, Регистратор,
		| абс_СчетУчета",   //АБС Коломиец 13843
		"СуммаБезНДС, НДС");
    	
	КорректировкаРеализацииСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, ТаблицаДвижений, Движения);
		
КонецПроцедуры	

Процедура КорректировкаРеализацииСформироватьИсправительныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, СтруктураТаблицСторноНДС, Движения)
	
	ИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации);
	
	Если ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		// Сторно движений исправляемого документа
		КорректировкаРеализацииСформироватьДвиженияПредъявленНДС(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС.НДСПредъявленный, Истина, Движения);
    	КорректировкаРеализацииСформироватьДвиженияСторноВычетаНДС(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС.КнигаПокупок, Движения);
		
		// Новые движения по исправленному корректировочному счету-фактуре
		КорректировкаРеализацииСформироватьКорректировочныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, Движения);
		
	Иначе
		
		ТаблицаДокумента = КорректировкаРеализацииПодготовитьТаблицуНачисленияНДСПоДаннымДокумента(СтруктураШапкиДокумента, СтруктураТаблицДокумента);	
		
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаДокумента, СтруктураШапкиДокумента, Истина);
		
		ТаблицаДокумента.Свернуть(
			"ВидЦенности, СтавкаНДС, Покупатель, Организация, СчетФактура, ИсправленныйСчетФактура, Событие, ДатаСобытия, 
			| ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста, Регистратор, Период
			| , абс_СчетУчета", 
			//",              //АБС Коломиец  13843
			"СуммаБезНДС, НДС");
				
		КорректировкаРеализацииСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, ТаблицаДокумента, Движения);
				
	КонецЕсли;	
		
КонецПроцедуры	

Процедура КорректировкаРеализацииДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента, СтруктураТаблицСторноНДС, Движения)
	
	//Если НДС еще не отражен в книге продаж, следует его там отразить
	Если СтруктураТаблицСторноНДС.НДСНачисленный.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСНачисленный", СтруктураШапкиДокумента.Ссылка);
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
		
		Для Каждого СтрокаДвижения Из СтруктураТаблицСторноНДС.НДСНачисленный Цикл
			 
			// НДС Начисленный
			Движение = Движения.НДСНачисленный.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
			
			// Книга продаж
			Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
			Движение.Событие 		= Перечисления.СобытияПоНДСПродажи.Реализация;
			Движение.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
			абс_ЗаполнитьСчетУчетаНДС(СтруктураШапкиДокумента, СтрокаДвижения, Движение);  //АБС Коломиец 13843
			//АБС ВСТАВКА №37870 НАЧАЛО «27 января 2014 г.», Пополитов  				
			абс_ЗаписьДопЛиста(СтруктураШапкиДокумента,Движение);
			//\\АБС ВСТАВКА №37870 КОНЕЦ
		
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
				// Книга продаж сторно
				Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
				Движение.Событие 		= Перечисления.СобытияПоНДСПродажи.Реализация;
				Движение.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
				Движение.СуммаБезНДС	= - СтрокаДвижения.СуммаБезНДС;
				Движение.НДС			= - СтрокаДвижения.НДС;
				абс_ЗаполнитьСчетУчетаНДС(СтруктураШапкиДокумента, СтрокаДвижения, Движение);  //АБС Коломиец 13843
				//АБС ВСТАВКА №37870 НАЧАЛО «27 января 2014 г.», Пополитов  				
				абс_ЗаписьДопЛиста(СтруктураШапкиДокумента,Движение);
				//\\АБС ВСТАВКА №37870 КОНЕЦ				
			КонецЕсли;
			
		КонецЦикла;
		
		Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
		ДатаСобытия = СтруктураШапкиДокумента.Дата;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		ЕСли  СтруктураШапкиДокумента.ВидДокумента =	"КорректировкаРеализации"  	ТОгда
			Если СтруктураШапкиДокумента.Контрагент = Константы.ttk_АгрегатноеЮридическоеЛицо.Получить() ТОгда
				ТаблицаКнПродаж =  СтруктураТаблицСторноНДС.КнигаПродаж.Скопировать();
				ТаблицаКнПродаж.Очистить();
				ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
				Движения.НДСЗаписиКнигиПродаж.Очистить();
				ОбработатьДокументДляРегистра(СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Контрагент,ТаблицаКнПродаж);
				Для Каждого СтрокаДвижения Из ТаблицаКнПродаж Цикл
					// НДС Продажи
					Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
					ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);		
					абс_ЗаполнитьСчетУчетаНДС(СтруктураШапкиДокумента, СтрокаДвижения, Движение, Истина); //АБС Коломиец 13843
					//АБС ВСТАВКА №37834 НАЧАЛО «25 января 2014 г.», Пополитов	
					абс_ЗаписьДопЛиста(СтруктураШапкиДокумента,Движение);
					//\\АБС ВСТАВКА №37870 КОНЕЦ
					
				КонецЦикла;
			иначе
				// Сторно движений исправляемого документа
				КорректировкаРеализацииСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС.КнигаПродаж, Движения, Истина);
				
				// Формирование исправленных движений
				КорректировкаРеализацииСформироватьИсправительныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, СтруктураТаблицСторноНДС, Движения);
				
			КонецЕсли;
		КонецЕсли;	
		
	Иначе
		// Формирование корректировочных движений
		КорректировкаРеализацииСформироватьКорректировочныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, Движения);
		
	КонецЕсли;	
	
КонецПроцедуры
//++КТТК Готовцев 21.08.2018
Процедура ОбработатьДокументДляРегистра(ВыборкаРегистратор,КонтрагентПосле,ТаблицаРегистра) 
	
	  ТабУслуги =  ВыборкаРегистратор.Услуги;
	  ТЗУслуги  =  ТабУслуги.выгрузить();
	  ТЗУслуги.Свернуть("СтавкаНДС,СтавкаНДСДоИзменения","Сумма,СуммаНДС,СуммаДоИзменения,СуммаНДСДоИзменения");
	  
	  Для каждого СтрокаУслуг из ТЗУслуги Цикл
		  Если СтрокаУслуг.СтавкаНДСДоИзменения <> 0 ТОгда
		  НоваяСтрока = ТаблицаРегистра.добавить();
		  НоваяСтрока.Период = ВыборкаРегистратор.Дата;
		  НоваяСтрока.Регистратор = ВыборкаРегистратор;
//		  НоваяСтрока.Активность = истинА;
		  
		  НоваяСтрока.Организация =  ВыборкаРегистратор.Организация;
		  НоваяСтрока.Покупатель =   КонтрагентПосле;
		  НоваяСтрока.СчетФактура =  ВыборкаРегистратор.ИсправляемыйДокументРеализации;
		  НоваяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		  НоваяСтрока.СтавкаНДС = СтрокаУслуг.СтавкаНДСДоИзменения;
		  //НоваяСтрока.ДатаОплаты,
		  //НоваяСтрока.ДокументОплаты,
		  НоваяСтрока.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
		  НоваяСтрока.ДатаСобытия = НоваяСтрока.Период;
		  //НоваяСтрока.ДоговорКонтрагента = 
		   
		  НоваяСтрока.ЗаписьДополнительногоЛиста = истина;
		  НоваяСтрока.КорректируемыйПериод  = ВыборкаРегистратор.ИсправляемыйДокументРеализации.Дата;
		   
		  НоваяСтрока.ЗаписьДополнительногоЛиста = НоваяСтрока.КорректируемыйПериод < НачалоКвартала(НоваяСтрока.Период);
  
		  	  
		  НоваяСтрока.СторнирующаяЗаписьДопЛиста = истинА;
		  //НоваяСтрока.ИсправленныйСчетФактура,
		  НоваяСтрока.абс_СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
		  НоваяСтрока.СуммаБезНДС = - (СтрокаУслуг.СуммаДоИзменения);
		  НоваяСтрока.НДС = - СтрокаУслуг.СуммаНДСДоИзменения;
		  //НоваяСтрока.НомерДокументаОплаты,
		  //НоваяСтрока.ДатаДокументаОплаты,
		//  НоваяСтрока.КодВидаОперации  = "01";
		  //НоваяСтрока.МоментВремени
		  КонецЕсли;
		  //*****************
		  НоваяСтрока = ТаблицаРегистра.добавить();
		  НоваяСтрока.Период = ВыборкаРегистратор.Дата;
		  НоваяСтрока.Регистратор = ВыборкаРегистратор;
		//  НоваяСтрока.Активность = истинА;
		  
		  НоваяСтрока.Организация =  ВыборкаРегистратор.Организация;
		  НоваяСтрока.Покупатель = КонтрагентПосле;
		  НоваяСтрока.СчетФактура =  ВыборкаРегистратор.ИсправляемыйДокументРеализации;
		  НоваяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		  НоваяСтрока.СтавкаНДС = СтрокаУслуг.СтавкаНДС;
		  //НоваяСтрока.ДатаОплаты,
		  //НоваяСтрока.ДокументОплаты,
		  НоваяСтрока.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
		  НоваяСтрока.ДатаСобытия = НоваяСтрока.Период;
		  //НоваяСтрока.ДоговорКонтрагента = 
		   НоваяСтрока.КорректируемыйПериод  = ВыборкаРегистратор.ИсправляемыйДокументРеализации.Дата;
		  НоваяСтрока.ЗаписьДополнительногоЛиста = НоваяСтрока.КорректируемыйПериод < НачалоКвартала(НоваяСтрока.Период);
		 
		  НоваяСтрока.СторнирующаяЗаписьДопЛиста = ложь;
		  НоваяСтрока.ИсправленныйСчетФактура = ВыборкаРегистратор;
		  НоваяСтрока.абс_СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
		  НоваяСтрока.СуммаБезНДС = СтрокаУслуг.Сумма;
		  НоваяСтрока.НДС =  СтрокаУслуг.СуммаНДС;
		  //НоваяСтрока.НомерДокументаОплаты,
		  //НоваяСтрока.ДатаДокументаОплаты,
		 // НоваяСтрока.КодВидаОперации  = "01";
		  //НоваяСтрока.МоментВремени

		  
	  КонецЦикла;
	  
 КонецПроцедуры	
//--КТТК Готовцев 21.08.2018


Функция КорректировкаРеализацииПолучитьТаблицыДокумента(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Ссылка,
	|	КорректировкаРеализацииТовары.НомерСтроки,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Количество,
	|	КорректировкаРеализацииТовары.ПринадлежностьНоменклатуры,
	|	КорректировкаРеализацииТовары.СерияНоменклатуры,
	|	КорректировкаРеализацииТовары.Склад,
	|	КорректировкаРеализацииТовары.ПереданныеПринятыеБУ,
	|	КорректировкаРеализацииТовары.ПереданныеПринятыеНУ,
	|	КорректировкаРеализацииТовары.ПереданныеСобственныеБУ,
	|	КорректировкаРеализацииТовары.ПереданныеСобственныеНУ,
	|	КорректировкаРеализацииТовары.ПринятыеСчетУчетаБУ,
	|	КорректировкаРеализацииТовары.ПринятыеСчетУчетаНУ,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.Цена,
	|	КорректировкаРеализацииТовары.Сумма,
	|	КорректировкаРеализацииТовары.СуммаНДС,
	|	КорректировкаРеализацииТовары.СубконтоБУ,
	|	КорректировкаРеализацииТовары.СубконтоНУ,
	|	КорректировкаРеализацииТовары.СчетДоходовБУ,
	|	КорректировкаРеализацииТовары.СчетДоходовНУ,
	|	КорректировкаРеализацииТовары.СчетРасходовБУ,
	|	КорректировкаРеализацииТовары.СчетРасходовНУ,
	|	КорректировкаРеализацииТовары.СчетУчетаБУ,
	|	КорректировкаРеализацииТовары.СчетУчетаНУ,
	|	КорректировкаРеализацииТовары.КоличествоДоКорректировки,
	|	КорректировкаРеализацииТовары.ЦенаДоКорректировки,
	|	КорректировкаРеализацииТовары.СуммаДоКорректировки,
	|	КорректировкаРеализацииТовары.СуммаНДСДоКорректировки,
	|	КорректировкаРеализацииТовары.КоличествоДоИзменения,
	|	КорректировкаРеализацииТовары.ЦенаДоИзменения,
	|	КорректировкаРеализацииТовары.СуммаДоИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.СтавкаНДСДоИзменения
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка";
	
	ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.Ссылка,
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	КорректировкаРеализацииУслуги.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КорректировкаРеализацииУслуги.Содержание,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.Цена,
	|	КорректировкаРеализацииУслуги.Сумма,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СчетДоходовБУ,
	|	КорректировкаРеализацииУслуги.СубконтоБУ,
	|	КорректировкаРеализацииУслуги.СчетДоходовНУ,
	|	КорректировкаРеализацииУслуги.СубконтоНУ,
	|	КорректировкаРеализацииУслуги.СчетРасходовБУ,
	|	КорректировкаРеализацииУслуги.СчетРасходовНУ,
	|	КорректировкаРеализацииУслуги.КоличествоДоКорректировки,
	|	КорректировкаРеализацииУслуги.ЦенаДоКорректировки,
	|	КорректировкаРеализацииУслуги.СуммаДоКорректировки,
	|	КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки,
	|	КорректировкаРеализацииУслуги.СодержаниеДоИзменения,
	|	КорректировкаРеализацииУслуги.КоличествоДоИзменения,
	|	КорректировкаРеализацииУслуги.ЦенаДоИзменения,
	|	КорректировкаРеализацииУслуги.СуммаДоИзменения,
	|	КорректировкаРеализацииУслуги.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.СтавкаНДСДоИзменения
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка";
	
	ТаблицаПоУслугам = Запрос.Выполнить().Выгрузить();
	
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Услуги", ТаблицаПоУслугам, СтруктураШапкиДокумента);
	
	ТаблицаПоТоварам.Колонки.СчетУчетаБУ.Имя = "СчетУчета";
	ТаблицаПоТоварам.Колонки.СубконтоБУ.Имя = "Субконто";
	ТаблицаПоУслугам.Колонки.СубконтоБУ.Имя = "Субконто";
	
	Возврат Новый Структура("ТаблицаПоТоварам, ТаблицаПоУслугам", ТаблицаПоТоварам, ТаблицаПоУслугам);
	
КонецФункции

Процедура ПровестиКорректировкуРеализацииПоРегистрамНДС(СтруктураШапкиДокумента, ДокументСсылка) Экспорт
	
	УчетНДС.ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, Истина);
	
	Движения = Новый Структура();
		
	СтруктураТаблицСторноНДС = КорректировкаРеализацииПодготовитьСтруктуруТаблицСторнирующихНДСЗаписей(СтруктураШапкиДокумента);
	СтруктураТаблицДокумента = КорректировкаРеализацииПолучитьТаблицыДокумента(СтруктураШапкиДокумента);
	
	Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН 
		И СтруктураШапкиДокумента.УчитыватьНДС Тогда	
		КорректировкаРеализацииДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента, СтруктураТаблицСторноНДС, Движения);	
	КонецЕсли;
		
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		Если НЕ Элемент.Ключ = "Хозрасчетный" Тогда
			НаборЗаписей.мПериод = СтруктураШапкиДокумента.Дата;
		КонецЕсли;		
		НаборЗаписей.Записать(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры


 // {{KM WARE Малыгин П.К. Заявка № 000035884 30.12.2015 начало  
Процедура KWR_ПровестиКорректировкуРеализацииПоРегистрамНДС(СтруктураШапкиДокумента, ДокументСсылка) Экспорт
	
// +++ввв 14.11.2016 г.
// +++Казаков 26.12.2016 г.
	ДокументИсточник = СтруктураШапкиДокумента.Ссылка.ДокументРеализации;
	Если ТипЗнч(ДокументИсточник)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Пока ТипЗнч(ДокументИсточник)=Тип("ДокументСсылка.КорректировкаРеализации") Цикл
			ДокументИсточник = ДокументИсточник.ДокументРеализации;
			//ОрганизацияИсточник = ДокументИсточник.Организация;
		КонецЦикла;
	КонецЕсли;	
	ОрганизацияИсточник = ДокументИсточник.абс_ДокументОснование.Организация;
	ДокументИсточник = ДокументИсточник.абс_ДокументОснование;
// ---Казаков 26.12.2016 г.
// ---ввв 14.11.2016 г.	
	ОрганизацияПриемнки = СтруктураШапкиДокумента.Организация;
	ДокументПриемник = СтруктураШапкиДокумента.Ссылка.ДокументРеализации;
	
	
	СтруктураШапкиДокумента.Вставить("Организация", ОрганизацияИсточник);
	СтруктураШапкиДокумента.Вставить("ДокументРеализации", ДокументИсточник); 	
	
	УчетНДС.ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, Истина);

	Движения = Новый Структура();
		
	СтруктураТаблицСторноНДС = КорректировкаРеализацииПодготовитьСтруктуруТаблицСторнирующихНДСЗаписей(СтруктураШапкиДокумента);
	
	Для Каждого СтрокаКнигиПродаж ИЗ СтруктураТаблицСторноНДС.КнигаПродаж Цикл 
	СтрокаКнигиПродаж.Организация = ОрганизацияПриемнки;	
	СтрокаКнигиПродаж.СчетФактура = ДокументПриемник;	
	КонецЦикла;	
	
	
	СтруктураШапкиДокумента.Вставить("Организация", ОрганизацияПриемнки);
	СтруктураШапкиДокумента.Вставить("ДокументРеализации", ДокументПриемник);
	
	СтруктураТаблицДокумента = КорректировкаРеализацииПолучитьТаблицыДокумента(СтруктураШапкиДокумента);
	
	Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН 
		И СтруктураШапкиДокумента.УчитыватьНДС Тогда	
		КорректировкаРеализацииДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента, СтруктураТаблицСторноНДС, Движения);	
	КонецЕсли;
		
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		Если НЕ Элемент.Ключ = "Хозрасчетный" Тогда
			НаборЗаписей.мПериод = СтруктураШапкиДокумента.Дата;
		КонецЕсли;		
		НаборЗаписей.Записать(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры
 // }}KM WARE Малыгин П.К. Заявка № 000035884 30.12.2015 окончание

////////////////////////////////////////////////////////////////////////////////////////////////////
// Исправленные счета-фактуры выданные (на аванс и налоговый агент)

Процедура ПровестиИсправленныйВыданныйСчетФактуру(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре) Экспорт

	УчетНДС.ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, Истина);
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Новый Структура;
	
	// Готовим таблицы с данными для сторно-движений
	
	СтруктураТаблицСторноНДС = ИсправленныйВыданныйСчетФактураПодготовитьТаблицыСторноЗаписей(СтруктураШапкиДокумента);
	
	// Формируем движения
	
	ОтразитьВКнигеПродажИсправляемыйСчетФактуруВыданный(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения);
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		
		// Делаем расход регистра НДСсАвансов по исправляемому счету-фактуре
		Если СтруктураТаблицСторноНДС.НДСсАвансов.Количество() > 0 Тогда
			
			ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСсАвансов", СтруктураШапкиДокумента.Ссылка);
			
			Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСсАвансов Цикл
				Движение = Движения.НДСсАвансов.ДобавитьРасход();
				ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			КонецЦикла;
			
		КонецЕсли;
		
		// Делаем сторно проводки Дт 76.АВ Кт 68.02
		СформироватьСторноПроводкиСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения);
		
		// По исправленному счету-фактуре сразу формируем записи книги продаж, без записи в НДСначисленный
		СформироватьДвиженияНДСЗаписиКнигиПродажСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
		
		// Формируем движения по НДСсАвансов по исправленному счету-фактуре
		СформироватьДвиженияНДСсАвансовСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
		
		// Формируем проводки по исправленному счету-фактуре Дт 76.АВ Кт 68.02
		СформироватьПроводкиСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		
		// Делаем сторно проводки Дт 76.НА Кт 68.32
		СформироватьСторноПроводкиНалоговыйАгентПоОплате(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения);
		
		// По исправленному счету-фактуре сразу формируем записи книги продаж, без записи в НДСначисленный
		СформироватьДвиженияНДСЗаписиКнигиПродажНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
		
		// Формируем проводки по исправленному счету-фактуре Дт 76.НА Кт 68.32
		СформироватьПроводкиНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
		
	КонецЕсли;
	
	// Записываем сформированные движения
	
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

Функция ИсправленныйВыданныйСчетФактураПодготовитьТаблицыСторноЗаписей(СтруктураШапкиДокумента)

	ИсходныйСчетФактура = 
		?(ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
		И НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента), 
		СтруктураШапкиДокумента.ИсправляемыйСчетФактура, СтруктураШапкиДокумента.ДокументОснование);

	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ИсходныйСчетФактура", ИсходныйСчетФактура);
	Запрос.УстановитьПараметр("ИсходныйСчетФактураДата", ИсходныйСчетФактура.Дата);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	// Регистр накопления НДСЗаписиКнигиПродаж
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗаписиКнигиПродаж.Организация,
	|	ЗаписиКнигиПродаж.Покупатель,
	|	ЗаписиКнигиПродаж.СчетФактура,
	|	ЗаписиКнигиПродаж.ВидЦенности,
	|	ЗаписиКнигиПродаж.СтавкаНДС,
	|	ЗаписиКнигиПродаж.ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.СуммаБезНДСОборот КАК СуммаБезНДС,
	|	ЗаписиКнигиПродаж.НДСОборот КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсходныйСчетФактура
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ЗаписиКнигиПродаж";
	
	СтруктураТаблиц = Новый Структура();
	СтруктураТаблиц.Вставить("НДСЗаписиКнигиПродаж", Запрос.Выполнить().Выгрузить());
	
	// Регистр накопления НДСНачисленный
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСНачисленныйОстатки.Организация,
	|	НДСНачисленныйОстатки.СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.ВидНачисления,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	&ИсходныйСчетФактураДата КАК ДатаОплаты,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента,
	|	НДСНачисленныйОстатки.ИсправленныйСчетФактура,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ПолученАванс) КАК Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсходныйСчетФактура
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК НДСНачисленныйОстатки";
	
	СтруктураТаблиц.Вставить("НДСНачисленный", Запрос.Выполнить().Выгрузить());
    	
	// Регистр накопления НДСсАвансов
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСсАвансовОстатки.Организация,
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.ВидЦенности,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ИсправленныйСчетФактура,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток КАК ВалютнаяСуммаСНДС,
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСсАвансовОстатки.НДСОстаток КАК НДС,
	|	&Период КАК ДатаСобытия
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсходныйСчетФактура
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК НДСсАвансовОстатки";
	
	СтруктураТаблиц.Вставить("НДСсАвансов", Запрос.Выполнить().Выгрузить());
    	
	Возврат СтруктураТаблиц;
	
КонецФункции

Процедура ОтразитьВКнигеПродажИсправляемыйСчетФактуруВыданный(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения)

	// Если исправляемый счет-фактура еще не был отражен в книге продаж, следует его там отразить и сразу сторнировать.
	Если СтруктураТаблицСторноНДС.НДСНачисленный.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСНачисленный", СтруктураШапкиДокумента.Ссылка);
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
		ДатаИсходногоДокумента = СтруктураШапкиДокумента.ДокументОснование.Дата;
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСНачисленный Цикл
			
			// НДС начисленный расход
			Движение = Движения.НДСНачисленный.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			Движение.Событие = Перечисления.СобытияПоНДСПродажи.НДССкорректирован;
			
			// Книга продаж
			Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			Движение.ДатаСобытия = ДатаИсходногоДокумента;
			//АБС ВСТАВКА №37870 НАЧАЛО «27 января 2014 г.», Пополитов  				
			абс_ЗаписьДопЛиста(СтруктураШапкиДокумента,Движение);
			//\\АБС ВСТАВКА №37870 КОНЕЦ
				
			// Книга продаж сторно
			Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			Движение.СуммаБезНДС = - СтрокаТаблицы.СуммаБезНДС;
			Движение.НДС         = - СтрокаТаблицы.НДС;
			Движение.СторнирующаяЗаписьДопЛиста = Движение.ЗаписьДополнительногоЛиста;
			//АБС ВСТАВКА №37870 НАЧАЛО «27 января 2014 г.», Пополитов  				
			абс_ЗаписьДопЛиста(СтруктураШапкиДокумента,Движение);
			//\\АБС ВСТАВКА №37870 КОНЕЦ
				
		КонецЦикла;
		
	КонецЕсли;

	// Если счет-фактура был отражен в книге продаж ранее, делаем сторно движения
	Если СтруктураТаблицСторноНДС.НДСЗаписиКнигиПродаж.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСЗаписиКнигиПродаж Цикл
			
			// Книга продаж сторно
			Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			Движение.СуммаБезНДС = - СтрокаТаблицы.СуммаБезНДС;
			Движение.НДС         = - СтрокаТаблицы.НДС;
			Движение.СторнирующаяЗаписьДопЛиста = Движение.ЗаписьДополнительногоЛиста;
			//АБС ВСТАВКА №37870 НАЧАЛО «27 января 2014 г.», Пополитов  				
			абс_ЗаписьДопЛиста(СтруктураШапкиДокумента,Движение);
			//\\АБС ВСТАВКА №37870 КОНЕЦ

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСторноПроводкиСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения)
	
	// Сторнирующие проводки Дт 76.АВ Кт 68.02 по остаткам НДС начисленный
	Если СтруктураТаблицСторноНДС.НДСНачисленный.Количество() > 0 Тогда
		
		ДобавитьНаборРегистраБухгалтерииВСтруктуруДвижений(Движения, "Хозрасчетный", СтруктураШапкиДокумента.Ссылка);
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСНачисленный Цикл
			
			Если СтрокаТаблицы.НДС = 0 Тогда
				//Формирование проводки не требуется
				Продолжить;
			КонецЕсли; 
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период 	 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; //76.АВ
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтрокаТаблицы.СчетФактура);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Проводка.Сумма = - СтрокаТаблицы.НДС;
			
			Проводка.Содержание   = "Сторнирование НДС по предоплате";
			Проводка.НомерЖурнала = "НДС";
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Сторнирующие проводки Дт 76.АВ Кт 68.02 по оборотам книги продаж
	Если СтруктураТаблицСторноНДС.НДСЗаписиКнигиПродаж.Количество() > 0 Тогда
		
		ДобавитьНаборРегистраБухгалтерииВСтруктуруДвижений(Движения, "Хозрасчетный", СтруктураШапкиДокумента.Ссылка);
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСЗаписиКнигиПродаж Цикл
			
			Если СтрокаТаблицы.НДС = 0 Тогда
				//Формирование проводки не требуется
				Продолжить;
			КонецЕсли; 
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период 	 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; //76.АВ
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтрокаТаблицы.СчетФактура);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Проводка.Сумма = - СтрокаТаблицы.НДС;
			
			Проводка.Содержание   = "Сторнирование НДС по предоплате";
			Проводка.НомерЖурнала = "НДС";
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСторноПроводкиНалоговыйАгентПоОплате(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения)

		// Сторнирующие проводки Дт 76.НА Кт 68.32 по остаткам НДС начисленный
		Если СтруктураТаблицСторноНДС.НДСНачисленный.Количество() > 0 Тогда
			
			ДобавитьНаборРегистраБухгалтерииВСтруктуруДвижений(Движения, "Хозрасчетный", СтруктураШапкиДокумента.Ссылка);
			
			Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСНачисленный Цикл
				
				Если СтрокаТаблицы.НДС = 0 Тогда
					//Формирование проводки не требуется
					Продолжить;
				КонецЕсли; 
			
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период 	 = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента; //76.НА
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента; //68.32
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФВыданные", СтруктураШапкиДокумента.ДокументОснование);
					
				Проводка.Сумма = - СтрокаТаблицы.НДС;
				
				Проводка.Содержание   = "Сторнирование НДС налогового агента";
				Проводка.НомерЖурнала = "НДС";
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Сторнирующие проводки Дт 76.НА Кт 68.32 по оборотам книги продаж
		Если СтруктураТаблицСторноНДС.НДСЗаписиКнигиПродаж.Количество() > 0 Тогда
			
			ДобавитьНаборРегистраБухгалтерииВСтруктуруДвижений(Движения, "Хозрасчетный", СтруктураШапкиДокумента.Ссылка);
			
			Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСЗаписиКнигиПродаж Цикл
				
				Если СтрокаТаблицы.НДС = 0 Тогда
					//Формирование проводки не требуется
					Продолжить;
				КонецЕсли; 
			
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период 	 = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента; //76.НА
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента; //68.32
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФВыданные", СтруктураШапкиДокумента.ДокументОснование);
					
				Проводка.Сумма = - СтрокаТаблицы.НДС;
				
				Проводка.Содержание   = "Сторнирование НДС налогового агента";
				Проводка.НомерЖурнала = "НДС";
				
			КонецЦикла;
			
		КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Исправленные счета-фактуры полученные на аванс

Процедура ПровестиИсправленныйПолученныйСчетФактуру(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре) Экспорт

	УчетНДС.ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, Истина);
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Новый Структура;
	
	// Готовим таблицы с данными для сторно-движений
	
	СтруктураТаблицСторноНДС = ИсправленныйПолученныйСчетФактураПодготовитьТаблицыСторноЗаписей(СтруктураШапкиДокумента);
	
	// Формируем движения
	
	СформироватьСторноДвиженияИсправляемыйСчетФактуруПолученный(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения);
	
	// Делаем сторно проводки Дт 68.02 Кт 76.ВА
	СформироватьСторноПроводкиСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения);
	
	// По исправленному счету-фактуре делаем записи в НДСпредъявленный
	СформироватьДвиженияНДСпредъявленныйСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
	
	// Формируем движения по НДСсАвансов по исправленному счету-фактуре
	СформироватьДвиженияНДСсАвансовСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
	
	// Записываем сформированные движения
	
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

Функция ИсправленныйПолученныйСчетФактураПодготовитьТаблицыСторноЗаписей(СтруктураШапкиДокумента)

	Запрос = Новый Запрос();
	
	ИсходныйСчетФактура = СтруктураШапкиДокумента.ДокументОснование;
	Запрос.УстановитьПараметр("ИсходныйСчетФактура", ИсходныйСчетФактура);
	Запрос.УстановитьПараметр("ИсходныйСчетФактураДата", ИсходныйСчетФактура.Дата);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	// Регистр накопления НДСЗаписиКнигиПокупок
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗаписиКнигиПокупок.Организация,
	|	ЗаписиКнигиПокупок.Поставщик,
	|	ЗаписиКнигиПокупок.СчетФактура,
	|	ЗаписиКнигиПокупок.ВидЦенности,
	|	ЗаписиКнигиПокупок.СтавкаНДС,
	|	ЗаписиКнигиПокупок.ДатаОплаты,
	|	ЗаписиКнигиПокупок.ДокументОплаты,
	|	ЗаписиКнигиПокупок.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПокупок.СуммаБезНДСОборот КАК СуммаБезНДС,
	|	ЗаписиКнигиПокупок.НДСОборот КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсходныйСчетФактура
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ЗаписиКнигиПокупок";
	
	СтруктураТаблиц = Новый Структура();
	СтруктураТаблиц.Вставить("НДСЗаписиКнигиПокупок", Запрос.Выполнить().Выгрузить());
	
	// Регистр накопления НДСПредъявленный
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
	|	&Период КАК ДатаСобытия
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсходныйСчетФактура
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК НДСПредъявленныйОстатки";
	
	СтруктураТаблиц.Вставить("НДСПредъявленный", Запрос.Выполнить().Выгрузить());
    	
	// Регистр накопления НДСсАвансов
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСсАвансовОстатки.Организация,
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.ВидЦенности,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ИсправленныйСчетФактура,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток КАК ВалютнаяСуммаСНДС,
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСсАвансовОстатки.НДСОстаток КАК НДС,
	|	&Период КАК ДатаСобытия
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсходныйСчетФактура
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК НДСсАвансовОстатки";
	
	СтруктураТаблиц.Вставить("НДСсАвансов", Запрос.Выполнить().Выгрузить());
    	
	Возврат СтруктураТаблиц;
	
КонецФункции

Процедура СформироватьСторноДвиженияИсправляемыйСчетФактуруПолученный(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения)

	// Если НДС по исправляемому счету-фактуре еще не был принят к вычету (не был отражен в книге покупок), 
	// списываем остатки регистра НДСПредъявленный
	Если СтруктураТаблицСторноНДС.НДСПредъявленный.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСПредъявленный", СтруктураШапкиДокумента.Ссылка);
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСЗаписиКнигиПокупок", СтруктураШапкиДокумента.Ссылка);
		ДатаИсходногоДокумента = СтруктураШапкиДокумента.ДокументОснование.Дата;
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСПредъявленный Цикл
			
			Движение = Движения.НДСПредъявленный.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;

	// Если счет-фактура был отражен в книге покупок ранее, делаем сторно движения
	Если СтруктураТаблицСторноНДС.НДСЗаписиКнигиПокупок.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСЗаписиКнигиПокупок", СтруктураШапкиДокумента.Ссылка);
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСЗаписиКнигиПокупок Цикл
			
			// Книга покупок сторно
			Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			Движение.СуммаБезНДС = - СтрокаТаблицы.СуммаБезНДС;
			Движение.НДС         = - СтрокаТаблицы.НДС;
			//АБС ВСТАВКА №37870 НАЧАЛО «27 января 2014 г.», Пополитов  				
			абс_ЗаписьДопЛиста(СтруктураШапкиДокумента,Движение);
			//\\АБС ВСТАВКА №37870 КОНЕЦ
		
		КонецЦикла;
		
	КонецЕсли;
	
	// Списываем остатки регистра НДСсАвансов по исправляемому счету-фактуре
	Если СтруктураТаблицСторноНДС.НДСсАвансов.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСсАвансов", СтруктураШапкиДокумента.Ссылка);
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСсАвансов Цикл
			Движение = Движения.НДСсАвансов.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьСторноПроводкиСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения)
	
	// Сторнирующие проводки Дт 68.02 Кт 76.ВА по оборотам книги покупок
	Если СтруктураТаблицСторноНДС.НДСЗаписиКнигиПокупок.Количество() > 0 Тогда
		
		ДобавитьНаборРегистраБухгалтерииВСтруктуруДвижений(Движения, "Хозрасчетный", СтруктураШапкиДокумента.Ссылка);
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСЗаписиКнигиПокупок Цикл
			
			Если СтрокаТаблицы.НДС = 0 Тогда
				//Формирование проводки не требуется
				Продолжить;
			КонецЕсли; 
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период 	 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным; //76.ВА
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтруктураШапкиДокумента.ДокументОснование);
			
			Проводка.Сумма = - СтрокаТаблицы.НДС;
			
			Проводка.Содержание   = "Сторнирование вычета НДС по выданным авансам";
			Проводка.НомерЖурнала = "НДС";
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ  И ФУНКЦИИ
/////////////////////

Процедура ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураДвижений,ИмяРегистра,СсылкаНаДокумент)
	Если не СтруктураДвижений.Свойство(ИмяРегистра) Тогда
		СтруктураДвижений.Вставить(ИмяРегистра,РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей());
		СтруктураДвижений[ИмяРегистра].Отбор.Регистратор.Установить(СсылкаНаДокумент);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьНаборРегистраБухгалтерииВСтруктуруДвижений(СтруктураДвижений,ИмяРегистра,СсылкаНаДокумент)
	Если не СтруктураДвижений.Свойство(ИмяРегистра) Тогда
		СтруктураДвижений.Вставить(ИмяРегистра,РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей());
		СтруктураДвижений[ИмяРегистра].Отбор.Регистратор.Установить(СсылкаНаДокумент);
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНОЕ ЗАДАНИЕ

Функция ЗаписатьСформированныйРегламентныйДокумент(ДокументОбъект)
	
	Если ДокументОбъект.Проведен Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе	
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Отказ = Ложь;
	
	//Переменная используется при проведении документа. Т.к. вне транзакции могут проводиться только непроведенные документы, то движения очищать не нужно
	ДокументОбъект.мУдалятьДвижения = Ложь;
	
	ДокументОбъект.ОбработкаПроведения(Отказ, РежимПроведенияДокумента.Неоперативный);
	
	Если Не Отказ Тогда
		
		//Если при выполнении процедуры ОбработкаПроведения() были добавлены движения в коллекцию Движения, то их нужно записать
		Для Каждого ТекущееДвижение Из ДокументОбъект.Движения Цикл
			Если ТекущееДвижение.Модифицированность() ТОгда
				ТекущееДвижение.Записать();
			КонецЕсли;
		КонецЦикла;	
		
		ДокументОбъект.Проведен = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;	
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Процедура СформироватьРегламентныеДокументыПоНДС(Настройка, СформированныеДокументы = Неопределено) Экспорт
	
	СформированныеДокументы = Новый Массив;
	
	ДатаДокумента = КонецМесяца(Настройка.Дата);
	
	// Начисление НДС по СМР хозспособом
	
	ДокументОбъект = Документы.НачислениеНДСпоСМРхозспособом.СоздатьДокумент();
	ДокументОбъект.Дата = ДатаДокумента;
	ДокументОбъект.Организация = Настройка.Организация;
	ДокументОбъект.ЗаполнитьДокумент(, Ложь, , Истина, Истина);
	
	Если ДокументОбъект.СМРХозспособом.Количество() <> 0 Тогда
		
		СформированныеДокументы.Добавить(ЗаписатьСформированныйРегламентныйДокумент(ДокументОбъект));
		
		СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.Заполнить(ДокументОбъект.Ссылка);
		СчетФактура.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
	// Расчет НДС по продукции
	
	Если Метаданные.Документы.Найти("РасчетНДСпоПродукции") <> Неопределено Тогда 
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	РасчетНДСпоПродукции.Ссылка
		                      |ИЗ
		                      |	Документ.РасчетНДСпоПродукции КАК РасчетНДСпоПродукции
		                      |ГДЕ
		                      |	РасчетНДСпоПродукции.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
		                      |	И РасчетНДСпоПродукции.Проведен
		                      |	И РасчетНДСпоПродукции.Организация = &Организация
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	РасчетНДСпоПродукции.Дата,
		                      |	РасчетНДСпоПродукции.Ссылка");
							  
		Запрос.УстановитьПараметр("Дата", ДатаДокумента);
		Запрос.УстановитьПараметр("Организация", Настройка.Организация);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() ТОгда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
		Иначе
			
			ДокументОбъект = Документы.РасчетНДСпоПродукции.СоздатьДокумент();
			ДокументОбъект.Дата = ДатаДокумента;
			ДокументОбъект.ПериодРегистрации = НачалоМесяца(ДатаДокумента);
			ДокументОбъект.Организация = Настройка.Организация;
			
		КонецЕсли;	
		
	КонецЕсли;
		
	// Распределение НДС по косвенным расходам
	
	ДокументОбъект = Документы.РаспределениеНДСКосвенныхРасходов.СоздатьДокумент();
	ДокументОбъект.Дата = ДатаДокумента;
	ДокументОбъект.НачалоПериода = НачалоКвартала(ДатаДокумента);
	ДокументОбъект.Организация = Настройка.Организация;
	ДокументОбъект.ЗаполнитьДокумент(, Ложь, , Истина);
	
	Если ДокументОбъект.СоставКосвенныхРасходов.Количество() <> 0 Тогда
		СформированныеДокументы.Добавить(ЗаписатьСформированныйРегламентныйДокумент(ДокументОбъект));
	КонецЕсли;
	
	// Восстановление НДС
	
	ДокументОбъект = Документы.ВосстановлениеНДС.СоздатьДокумент();
	ДокументОбъект.Дата = ДатаДокумента;
	ДокументОбъект.Организация = Настройка.Организация;
	ДокументОбъект.ЗаполнитьДокумент(, Ложь, , Истина, Истина);
	
	Если ДокументОбъект.Состав.Количество() <> 0 Тогда
		СформированныеДокументы.Добавить(ЗаписатьСформированныйРегламентныйДокумент(ДокументОбъект));
	КонецЕсли;
	
	// Формирование записей книги покупок
	
	ДокументОбъект = Документы.ФормированиеЗаписейКнигиПокупок.СоздатьДокумент();
	ДокументОбъект.Дата = ДатаДокумента;
	ДокументОбъект.Организация = Настройка.Организация;
	ДокументОбъект.ЗаполнитьДокумент(, Ложь, , Истина, Истина);
	
	СформированныеДокументы.Добавить(ЗаписатьСформированныйРегламентныйДокумент(ДокументОбъект));
	
	// Формирование записей книги покупок 0%
	
	ДокументОбъект = Документы.ФормированиеЗаписейКнигиПокупок.СоздатьДокумент();
	ДокументОбъект.Дата = ДатаДокумента;
	ДокументОбъект.Организация = Настройка.Организация;
	ДокументОбъект.ПредъявленНДСКВычету0 = Истина;
	ДокументОбъект.ЗаполнитьДокумент(, Ложь, , Истина, Истина);
	
	Если ДокументОбъект.ВычетПоПриобретеннымЦенностям.Количество() <> 0 
		Или ДокументОбъект.НДСсАвансов.Количество() <> 0 Тогда
		СформированныеДокументы.Добавить(ЗаписатьСформированныйРегламентныйДокумент(ДокументОбъект));
	КонецЕсли;
	
	// Формирование записей книги продаж
	
	ДокументОбъект = Документы.ФормированиеЗаписейКнигиПродаж.СоздатьДокумент();
	ДокументОбъект.Дата = ДатаДокумента;
	ДокументОбъект.Организация = Настройка.Организация;
	ДокументОбъект.ЗаполнитьДокумент(, Ложь, , Истина, Истина);
	
	СформированныеДокументы.Добавить(ЗаписатьСформированныйРегламентныйДокумент(ДокументОбъект));
		
	// Формирование записей книги продаж 0%
	
	ДокументОбъект = Документы.ФормированиеЗаписейКнигиПродаж.СоздатьДокумент();
	ДокументОбъект.Дата = ДатаДокумента;
	ДокументОбъект.Организация = Настройка.Организация;
	ДокументОбъект.Реализация0 = Истина;
	ДокументОбъект.ЗаполнитьДокумент(, Ложь, , Истина, Истина);
	
	Если ДокументОбъект.Реализация.Количество() <> 0 Тогда
		СформированныеДокументы.Добавить(ЗаписатьСформированныйРегламентныйДокумент(ДокументОбъект));
	КонецЕсли;
	
КонецПроцедуры

Процедура абс_ЗаполнитьСчетУчетаНДС(СтруктураШапкиДокумента, СтрокаДвижения, Движение, ЕстьСчетРасходов = Ложь) //АБС Коломиец 13843+	
	
	абс_ДатаУчетаПоСчетамУчетаВНДСПродажи = глЗначениеПеременной("абс_ДатаУчетаПоСчетамУчетаВНДСПродажи");
	абс_Счет_91_03 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.03");
	
	Если абс_ДатаУчетаПоСчетамУчетаВНДСПродажи <> '00010101000000' И СтруктураШапкиДокумента.Дата >= абс_ДатаУчетаПоСчетамУчетаВНДСПродажи  Тогда
		
		ПрошлыйПериод = Год(СтруктураШапкиДокумента.ДокументРеализацииДата) < Год(СтруктураШапкиДокумента.Дата);
		БУ_Тек  = (НЕ ПрошлыйПериод) ИЛИ (ПрошлыйПериод И СтруктураШапкиДокумента.ОтчетностьПодписана);
		Счет91  = ?(БУ_Тек, ПрошлыйПериод, Истина);
		СписатьНДС 	= СтрокаДвижения.НДС;
		
		Если ЕстьСчетРасходов Тогда 
			СчетУчетаНДСПоРеализации = ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаДвижения.абс_СчетУчета, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы), СтрокаДвижения.абс_СчетУчета, ПланыСчетов.Хозрасчетный.Продажи_НДС);			
		Иначе
			СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС; //?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаДвижения.абс_СчетУчета, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы), СтрокаДвижения.абс_СчетУчета, ПланыСчетов.Хозрасчетный.Продажи_НДС);
		КонецЕсли;
		
		Если Счет91 И СписатьНДС < 0 Тогда
			Движение.абс_СчетУчета = абс_Счет_91_03;
		Иначе
			//Проводка.СчетДт = ?(Счет91, ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД, СчетУчетаНДСПоРеализации);
			Движение.абс_СчетУчета = ?(Счет91, абс_Счет_91_03, СчетУчетаНДСПоРеализации); //АБС+ Тупиков 17928
		КонецЕсли;		
		
		//АБС ВСТАВКА №44969 НАЧАЛО «2 июля 2014 г.», Пополитов
		Если Движение.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные Тогда
			Движение.абс_СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.АВ");	
		ИначеЕсли Движение.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные Тогда
			Движение.абс_СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.ВА");	
		КонецЕсли;	
		//\\АБС ВСТАВКА №44969 КОНЕЦ     	
		
	КонецЕсли;
	
КонецПроцедуры  //АБС Коломиец 13843-

Функция kwr_ПроверитьУдалениеПостфикса(СчетФактура)
Номер = СокрЛП(СчетФактура.Номер);
Организация = СчетФактура.Организация;

ЗапросДанныеРегистра = Новый Запрос;
ЗапросДанныеРегистра.Текст ="ВЫБРАТЬ
                            |	kwr_СписокУдаляемыхПостфиксовДляСФпоОрганизациям.Организация,
                            |	kwr_СписокУдаляемыхПостфиксовДляСФпоОрганизациям.Постфикс,
                            |	kwr_СписокУдаляемыхПостфиксовДляСФпоОрганизациям.ИсточникДанных
                            |ИЗ
                            |	РегистрСведений.kwr_СписокУдаляемыхПостфиксовДляСФпоОрганизациям КАК kwr_СписокУдаляемыхПостфиксовДляСФпоОрганизациям
                            |ГДЕ
                            |	kwr_СписокУдаляемыхПостфиксовДляСФпоОрганизациям.Организация = &Организация";
							
ЗапросДанныеРегистра.УстановитьПараметр("Организация",Организация);
						
РезультатТЗ = ЗапросДанныеРегистра.Выполнить().Выгрузить();							
Для каждого СтрокаРезультата ИЗ РезультатТЗ Цикл
ДлинаПостфикса = СтрДлина(СокрЛП(СтрокаРезультата.Постфикс));
Если Прав(Номер,ДлинаПостфикса) = СтрокаРезультата.Постфикс И  Найти(СчетФактура.Комментарий, СтрокаРезультата.ИсточникДанных)>0 И  СчетФактура.СуммаДокумента<0 Тогда
Возврат ДлинаПостфикса;
Иначе
Продолжить;
КонецЕсли;
КонецЦикла;	
Возврат 0;	
КонецФункции	
