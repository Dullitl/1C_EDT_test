//*********************************************************************************************
//
Функция ПроверитьТабличнуюЧастьЗаказыНаДублиОрганизаций(ТаблицаДанных) Экспорт
	
	Результат = Новый Структура();
	
	Запрос = Новый Запрос();
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ТаблицаТЧ.Организация,
	                |	ТаблицаТЧ.ЗаказПокупателя,
	                |	ТаблицаТЧ.НомерСтроки
	                |ПОМЕСТИТЬ ВТ_ТаблицаТЧ
	                |ИЗ
	                |	&ТаблицаТЧ КАК ТаблицаТЧ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ ПЕРВЫЕ 1
	                |	ВТ_ТаблицаТЧ.Организация,
	                |	КОЛИЧЕСТВО(ВТ_ТаблицаТЧ.ЗаказПокупателя) КАК ЗаказПокупателя
	                |ИЗ
	                |	ВТ_ТаблицаТЧ КАК ВТ_ТаблицаТЧ
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВТ_ТаблицаТЧ.Организация
	                |
	                |ИМЕЮЩИЕ
	                |	КОЛИЧЕСТВО(ВТ_ТаблицаТЧ.ЗаказПокупателя) > 1";
					
	Запрос.УстановитьПараметр("ТаблицаТЧ", ТаблицаДанных);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Результат.Вставить("ЕстьДубли", Истина);
		Результат.Вставить("Организация", ВыборкаЗапроса.Организация);
	КонецЕСли;
	
	Возврат Результат;
	
КонецФункции

//*********************************************************************************************
//
Процедура НачалоВыбораОрганизации(ФормаОбъекта, ИмяТабЧасти, ЭлементФормы, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаФормы = ФормаОбъекта[ИмяТабЧасти];
	
	ЕСли Не ФормаОбъекта.ТекущийЭлемент.Значение = ТаблицаФормы Тогда
		Возврат;
	КонецЕСли;
	
	ИмяЭлементаФормы = ФормаОбъекта.ТекущийЭлемент.ТекущаяКолонка.Имя;  //предполанается, что это "Организация"
	
	Если ТипЗнч(ТаблицаФормы) = Тип("ТаблицаЗначений") Тогда
		ТЗ_ФормыОбъекта = ТаблицаФормы.Скопировать();
	Иначе
		ТЗ_ФормыОбъекта = ТаблицаФормы.Выгрузить(,ИмяЭлементаФормы);
	КонецЕсли;
			
	НайденныеСтрокиСТекущимиЭлементами = ТЗ_ФормыОбъекта.НайтиСтроки(Новый Структура(ИмяЭлементаФормы, ЭлементФормы.Значение));
	Если НайденныеСтрокиСТекущимиЭлементами.Количество() = 1 Тогда
		ТЗ_ФормыОбъекта.Удалить(НайденныеСтрокиСТекущимиЭлементами[0]);
	КонецЕсли;
	                                       
	ОтборЭлементов = Новый СписокЗначений();
	ОтборЭлементов.ЗагрузитьЗначения(ТЗ_ФормыОбъекта.ВыгрузитьКолонку(ИмяЭлементаФормы));
	ОтборЭлементов.Добавить(Справочники.Организации.ПустаяСсылка());
	
	ФормаВыбора = Справочники.Организации.ПолучитьФормуВыбора(, ЭлементФормы);
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Ложь;
	ФормаВыбора.СправочникСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбора.СправочникСписок.Отбор.Ссылка.Значение = ОтборЭлементов;
	ФормаВыбора.СправочникСписок.Отбор.Ссылка.Использование = Истина;
	
	Если НайденныеСтрокиСТекущимиЭлементами.Количество() = 1 Тогда
		ФормаВыбора.НачальноеЗначениеВыбора = ЭлементФормы.Значение;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	                            
КонецПроцедуры

//*******************************************************************
//
Процедура НачалоВыбораЗаказаПокупателя(ФормаОбъекта, ИмяТабЧасти, ЭлементФормы, ИмяРеквизитаОрганизация, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаФормы = ФормаОбъекта[ИмяТабЧасти];
	
	ЕСли Не ФормаОбъекта.ТекущийЭлемент.Значение = ТаблицаФормы Тогда
		Возврат;
	КонецЕСли;
	
	ИмяЭлементаФормы = ФормаОбъекта.ТекущийЭлемент.ТекущаяКолонка.Имя;  //предполанается, что это "ЗаказПокупателя"
	
	ОрганизацияОтбор = ФормаОбъекта.ТекущийЭлемент.ТекущиеДанные[ИмяРеквизитаОрганизация];
	                                       	
	ФормаВыбора = Документы.ЗаказПокупателя.ПолучитьФормуВыбора(, ЭлементФормы);
	
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	ФормаВыбора.ДокументСписок.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ДокументСписок.Отбор.Организация.Значение = ОрганизацияОтбор;
	ФормаВыбора.ДокументСписок.Отбор.Организация.Использование = Истина;
	
	ФормаВыбора.НачальноеЗначениеВыбора = ЭлементФормы.Значение;
		
	ФормаВыбора.Открыть();
	                            
КонецПроцедуры

//*******************************************************************
//
Процедура ПередОкончаниемРедактированияСтрокиТаблицыФормыПроекта(ТаблицаФормы, ИмяТаблицы, ИмяРеквизитаОрганизация, ИмяРеквизитаЗаказ, Отказ, ОтменаРедактирования, ТекущаяОрганизация = Неопределено, ТекущийЗаказ = Неопределено) Экспорт
	
	Если ТекущаяОрганизация = Неопределено Или ТекущаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
		ТекущаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ТекущийЗаказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
	
	Если ТекущийЗаказ = Неопределено Тогда
		ТекущийЗаказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕСли;
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕСли;
	
	НайдСтроки = ТаблицаФормы.Значение.НайтиСтроки(Новый Структура("Организация", ТаблицаФормы.ТекущиеДанные[ИмяРеквизитаОрганизация]));
	Для каждого НайдСтрока Из НайдСтроки Цикл
		
		ЕСли НайдСтрока = ТаблицаФормы.ТекущаяСтрока Тогда
			Продолжить;
		КонецЕСли;
		
		Сообщить("Невозможно установить данную организацию в данной строке, так как она уже существует в строке № "+Строка(ТаблицаФормы.Значение.Индекс(НайдСтрока)+1), СтатусСообщения.Внимание);
		
		ТаблицаФормы.ТекущиеДанные[ИмяРеквизитаОрганизация] = ТекущаяОрганизация;
		ТаблицаФормы.ТекущиеДанные[ИмяРеквизитаЗаказ] 		= ТекущийЗаказ;
		
		Отказ = Истина;
		
		Прервать;
		
	КонецЦикла;	
	
КонецПроцедуры

//*******************************************************************
//
Функция СоздатьЗаказПокупателяДляПроекта(ПроектСсылка, ОрганизацияПроекта, ДатаДокумента) Экспорт //на всякий случай....
	
	Возврат абс_Привилегированный.СоздатьЗаказПокупателяДляПроектаБезКонтроляПрав(ПроектСсылка, ОрганизацияПроекта, ДатаДокумента);
	
КонецФункции

//********************************************************************
Процедура ПроектНачалоВыбора(ЭлементФормы, ОрганизацияДокумента, СтандартнаяОбработка) Экспорт
		
	Если НЕ ЗначениеЗаполнено(ОрганизацияДокумента) Тогда
		СтандартнаяОбработка = Ложь;
		#Если Клиент Тогда
		Предупреждение("Не установлена организация для документа! Выбор проекта невозможен!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//********************************************************************
//
Процедура ПроектПриИзменении(ТекущаяСтрокаДокумента, ПроектСтрока, ЗаказСтрока, ОрганизацияДокумента, ДатаДокумента = Неопределено, ТекущийПроект = Неопределено, ТекущийЗаказПокупателя = Неопределено) Экспорт
	
	ПроектСсылка = ТекущаяСтрокаДокумента[ПроектСтрока];
	
	Если ТекущаяСтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕСли;
		
	Если ПроектСсылка = Справочники.Проекты.ПустаяСсылка() Или Не ЗначениеЗаполнено(ПроектСсылка) Тогда
		ТекущаяСтрокаДокумента[ЗаказСтрока] = Документы.ЗаказПокупателя.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Если ТекущийПроект = Неопределено Тогда
		ТекущийПроект = Справочники.Проекты.ПустаяСсылка();
		ТекущийЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
	
	ЕСли ТекущийЗаказПокупателя = Неопределено Тогда
		ТекущийЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕСли;
	
	Если ЗначениеЗаполнено(ОрганизацияДокумента) Тогда
		
		СтрокаТЧПроекта = ПроектСсылка.абс_Заказы.Найти(ОрганизацияДокумента, "Организация");
		
		ЕСли СтрокаТЧПроекта = Неопределено Или Не ЗначениеЗаполнено(СтрокаТЧПроекта.ЗаказПокупателя) Тогда
			ЗаказПроекта = СоздатьЗаказПокупателяДляПроекта(ПроектСсылка, ОрганизацияДокумента, ДатаДокумента);
		Иначе
			ЗаказПроекта = СтрокаТЧПроекта.ЗаказПокупателя;
		КонецЕсли;
		
		Если НЕ ЗаказПроекта = Документы.ЗаказПокупателя.ПустаяСсылка() Тогда
			ТекущаяСтрокаДокумента[ЗаказСтрока] = ЗаказПроекта;
		Иначе
			ТекущаяСтрокаДокумента[ПроектСтрока] = ТекущийПроект;
			ТекущаяСтрокаДокумента[ЗаказСтрока] = ТекущийЗаказПокупателя;
		КонецЕСли;
	Иначе
		#Если Клиент Тогда
		Предупреждение("Невозможно установить данный проект, так как не заполнена организация для этого документа!");
		#КонецЕсли
		ПроектСсылка = Справочники.Проекты.ПустаяСсылка();
		ТекущаяСтрокаДокумента[ЗаказСтрока] = Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

//***** Создание проектов из общей формы
Функция ЗаписатьПроектПривилегированныйРежим(СтруктураПараметров) Экспорт
	РезультатЗаписи = абс_СерверныеФункции.ЗаписатьПроектПривилегированныйРежимСервер(СтруктураПараметров);
	Возврат РезультатЗаписи;
КонецФункции

// Процедура позволяет открыть отчет с дополнительной настройкой
Процедура ОткрытьОтчетДДСПоПроектам() Экспорт 
	Отчет = Отчеты.абс_ОтчетПоСуммарнымПрогнознымОбязательствам.Создать();
	
	нФорма = Отчет.ПолучитьФорму();
	
	
	Результат = нФорма.ЭлементыФормы.Результат; 

	// Схема компоновки данных 
	СхемаКомпоновкиДанных = Отчет.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"); 

	// Загрузка настроек 
	КомпоновщикНастроекКомпоновкиДанных = Отчет.КомпоновщикНастроек;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных)); 
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(Отчет.СхемаКомпоновкиДанных.ВариантыНастроек[2].Настройки); 

	нФорма.Открыть();
КонецПроцедуры

// Процедура выполняет заполнение проектов по договору. Поиск проектов выполняется в ЗЗ по входящему договору
Процедура ОбновитьПроектыПоДоговору(ДоговорВходящий) Экспорт 
	
	Если ДоговорВходящий = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ДоговорВходящий.ЭтоГруппа Тогда
		
		ПереданОбъект = Ложь;
		Если ТипЗнч(ДоговорВходящий) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
			Договор = ДоговорВходящий.ПолучитьОбъект();
		Иначе 
			Договор = ДоговорВходящий;
			ПереданОбъект = Истина;
		КонецЕсли;
		
		Если Договор.ОбменДанными.Загрузка Тогда 
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	абс_ЗакупочныйЗаказДоговоры.Ссылка КАК ЗакупочныйЗаказ
		|ПОМЕСТИТЬ втЗакупочныеЗаказы
		|ИЗ
		|	Документ.абс_ЗакупочныйЗаказ.Договоры КАК абс_ЗакупочныйЗаказДоговоры
		|ГДЕ
		|	абс_ЗакупочныйЗаказДоговоры.ДоговорКонтрагента = &Договор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	абс_ЗакупочныйЗаказДоходныеДоговоры.Ссылка
		|ИЗ
		|	Документ.абс_ЗакупочныйЗаказ.ДоходныеДоговоры КАК абс_ЗакупочныйЗаказДоходныеДоговоры
		|ГДЕ
		|	абс_ЗакупочныйЗаказДоходныеДоговоры.Договор = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	абс_ЗакупочныйЗаказРаспределениеПоПроектам.Проект,
		|	абс_ЗакупочныйЗаказРаспределениеПоПроектам.ДоляРаспределения КАК Сумма
		|ИЗ
		|	Документ.абс_ЗакупочныйЗаказ.РаспределениеПоПроектам КАК абс_ЗакупочныйЗаказРаспределениеПоПроектам
		|ГДЕ
		|	НЕ абс_ЗакупочныйЗаказРаспределениеПоПроектам.Проект В (&СписокПроектовДоговора)
		|	И абс_ЗакупочныйЗаказРаспределениеПоПроектам.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И абс_ЗакупочныйЗаказРаспределениеПоПроектам.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				втЗакупочныеЗаказы.ЗакупочныйЗаказ
		|			ИЗ
		|				втЗакупочныеЗаказы КАК втЗакупочныеЗаказы)
		|	И абс_ЗакупочныйЗаказРаспределениеПоПроектам.Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("СписокПроектовДоговора", Договор.абс_Проекты.ВыгрузитьКолонку("Проект"));
		Запрос.УстановитьПараметр("Договор", Договор.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = Договор.абс_Проекты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		Если Не ПереданОбъект Тогда 
			Попытка
				Договор.Записать();
			Исключение
				ОбщегоНазначения.Сообщение(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//АБС ВСТАВКА Проектный учет  24.12.2013 10:43:18  Глебов
Процедура абс_ПередЗаписьюПроверкаЗаполненияПроектаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//АБС ВСТАВКА   17.11.2014 16:29:09  Шамов
	Если Источник.ОбменДанными.Загрузка  тогда
		Возврат;
	КонецЕсли;
	//АБС ВСТАВКА  КОНЕЦ	
	// АБС Вставка 05.02.14 Гетц
	ПроверкаГраницыЗапрета(Источник, Отказ); 
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	// АБС Вставка 05.02.14 Гетц \\
	РегистрыСведений.абс_КонтрольАналитикПроектныйУчет.ВыполнитьПроверкуДокументаПроектныйУчет(Источник, Источник.Организация, Отказ);
	
КонецПроцедуры
//АБС ВСТАВКА Проектный учет КОНЕЦ 

//АБС ВСТАВКА Проектный учет  05.02.204 Гетц
Процедура ПроверкаГраницыЗапрета(ДокументОбъект, Отказ) Экспорт 
	
	Если Не глЗначениеПеременной("абс_ПроектныйУчет") Тогда		
		Возврат;
	КонецЕсли;
	
	ТаблицаЗапрета = ПараметрыСеанса.абс_СоответствиеДатыЗапертаПроектныйУчет.Получить();
	Если ТаблицаЗапрета = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если НЕ ДокументОбъект.ЭтоНовый() Тогда		
		ДатаДляПроверки 			= Мин(ДокументОбъект.Ссылка.Дата, ДокументОбъект.Дата);		
	Иначе		
		ДатаДляПроверки 			= ДокументОбъект.Дата;		
	КонецЕсли;
	
	ЕстьРеквизитОрганизация = (НЕ ДокументОбъект.Метаданные().Реквизиты.Найти("Организация") = Неопределено);
	
	СтруктураПроверкиЗапретаРедактирования = Новый Структура();
	СтруктураПроверкиЗапретаРедактирования.Вставить("ТипДокумента"	, ДокументОбъект.Метаданные().Имя);	
	Если ЕстьРеквизитОрганизация Тогда
		СтруктураПроверкиЗапретаРедактирования.Вставить("Организация",ДокументОбъект.Организация);	
	Иначе
		СтруктураПроверкиЗапретаРедактирования.Вставить("Организация",Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	СтрокиЗапрета = ТаблицаЗапрета.НайтиСтроки(СтруктураПроверкиЗапретаРедактирования);
	
	Если СтрокиЗапрета.Количество() = 0 Тогда
		СтруктураПроверкиЗапретаРедактирования.Вставить("Организация", Справочники.Организации.ПустаяСсылка());	
		СтрокиЗапрета = ТаблицаЗапрета.НайтиСтроки(СтруктураПроверкиЗапретаРедактирования);
	КонецЕсли;	
	
	Если Не СтрокиЗапрета.Количество() = 0 Тогда
		
		СтрокаЗапрета = СтрокиЗапрета[0];
		
		Если ЗначениеЗаполнено(СтрокаЗапрета.ДатаЗапрета) Тогда
			Если ДатаДляПроверки <= СтрокаЗапрета.ДатаЗапрета Тогда
				
				ТекстСообщения = "Для документа """ + ДокументОбъект.Метаданные().Синоним + """";				
				ТекстСообщения = ТекстСообщения +  " установлена дата запрета проведения по проектному учету " + СтрокаЗапрета.ДатаЗапрета + ".";												
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//АБС ВСТАВКА   25.08.2014 15:07:01  Шамов
Процедура ЗаполнитьПоступлениеАвансамиПоДоговоруСтроительства(Объект) Экспорт
	
	КоэффициентПоставки = Объект.СуммаДокумента / Объект.ДоговорКонтрагента.абс_СуммаСНДС;
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ДатаДок", Новый Граница(Объект.МоментВремени(), ВидГраницы.Исключая)); 
	Запрос.УстановитьПараметр("КоэффициентПоставки", КоэффициентПоставки);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Договор", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	мСчетаАвансов = Новый Массив;
	мСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02"));
	мСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02.Д"));
	мСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.22"));
	мСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.22.Д"));
	мСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.32"));
	мСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.32.Д"));
		
	Запрос.УстановитьПараметр("СчетаАвансов", мСчетаАвансов);

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК ОстатокВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаДок, ДоговорКонтрагента = &Договор) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Документ КАК ДокументРасчетовСКонтрагентом,
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.ДатаОплаты КАК ДатаОплаты,
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Сделка КАК Сделка,
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток КАК СуммаРегл
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки(
		|			&ДатаДок,
		|			ДоговорКонтрагента = &Договор
		|				И СчетОплаты В (&СчетаАвансов)
		|				И Организация = &Организация
		|				И Контрагент = &Контрагент) КАК РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Документ КАК ДокументРасчетовСКонтрагентом,
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.ДатаОплаты КАК ДатаОплаты,
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Сделка КАК Сделка,
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовПриход * &КоэффициентПоставки КАК СуммаВзаиморасчетов,
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.СуммаРегПриход * &КоэффициентПоставки КАК СуммаРегл
		|ИЗ
		|	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Обороты(
		|			,
		|			&ДатаДок,
		|			Регистратор,
		|			ДоговорКонтрагента = &Договор
		|				И СчетОплаты В (&СчетаАвансов)
		|				И Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И (Документ, ДатаОплаты, Сделка) В
		|					(ВЫБРАТЬ
		|						А.ДокументРасчетовСКонтрагентом,
		|						А.ДатаОплаты,
		|						А.Сделка
		|					ИЗ
		|						ВТ_Остатки КАК А)) КАК РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Остатки.ДокументРасчетовСКонтрагентом,
		|	ВТ_Остатки.ДатаОплаты,
		|	ВТ_Остатки.Сделка,
		|	ВТ_Остатки.СуммаВзаиморасчетов,
		|	ВТ_Остатки.СуммаРегл
		|ИЗ
		|	ВТ_Остатки КАК ВТ_Остатки";
		
		
	Результаты = Запрос.ВыполнитьПакет();
	Объект["ДокументыРасчетовСКонтрагентом"].Очистить();
	
	ИспользуемОстаткиАвансов = ЛОЖЬ;
	ВыборкаОстатокВзаиморасчетов = Результаты[0].Выбрать();
	Если НЕ Результаты[0].Пустой() Тогда
		Выборка = Результаты[0].Выбрать();
		Выборка.Следующий();
		ИспользуемОстаткиАвансов = Выборка.ОстатокВзаиморасчетов = Объект.СуммаДокумента;
	КонецЕсли;
	
	Если ИспользуемОстаткиАвансов Тогда
		Выборка = Результаты[3].Выбрать();
	Иначе
		Выборка = Результаты[2].Выбрать();
	КонецЕсли;
		
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект["ДокументыРасчетовСКонтрагентом"].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);		
	КонецЦикла;
	
КонецПроцедуры
//АБС ВСТАВКА  КОНЕЦ

//АБС ВСТАВКА Навценя 29.01.2015
//перенесено из Справочник.ДоговорыКонтрагентов.ФормаЭлемента
Процедура ЗаполнитьГрафикиВДаговореПоЗакупочномуЗаказу(Договор, ЗакупочныйЗаказ, Записывать = Ложь, ТаблицаПроектов = Неопределено) Экспорт
	
	Ссылка = Договор;
	абс_ЗакупочныйЗаказ = ЗакупочныйЗаказ; 
	ВидДоговора = Договор.ВидДоговора;
	 
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Сообщить("Перед заполнением договора необходимо его записать!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(абс_ЗакупочныйЗаказ) Тогда
		Сообщить("Не выбран закупочный заказ!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если абс_ЗакупочныйЗаказ.ТипЗакупочногоЗаказа <> Перечисления.абсТипЗакупочногоЗаказа.Оборудование Тогда
		Сообщить("Тип выбранного закупочного заказа не является оборудованием!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", абс_ЗакупочныйЗаказ);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Проект,
	|	СУММА(ВложенныйЗапрос.ДоляРаспределения) КАК ДоляРаспределения
	|//ПОМЕСТИТЬ ВТ_Проекты
	|ИЗ
	|	(ВЫБРАТЬ
	|		абс_ЗакупочныйЗаказРаспределениеПоПроектам.Проект КАК Проект,
	|		СУММА(абс_ЗакупочныйЗаказРаспределениеПоПроектам.ДоляРаспределения) КАК ДоляРаспределения
	|	ИЗ
	|		Документ.абс_ЗакупочныйЗаказ.РаспределениеПоПроектам КАК абс_ЗакупочныйЗаказРаспределениеПоПроектам
	|	ГДЕ
	|		абс_ЗакупочныйЗаказРаспределениеПоПроектам.Ссылка = &ЗакупочныйЗаказ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		абс_ЗакупочныйЗаказРаспределениеПоПроектам.Проект
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка),
	|		0) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_ЗакупочныйЗаказГрафикОплат.Период КАК Период,
	|	СУММА(абс_ЗакупочныйЗаказГрафикОплат.ВалютнаяСуммаБезНДС) КАК ВалютнаяСуммаБезНДС,
	|	СУММА(абс_ЗакупочныйЗаказГрафикОплат.ВалютнаяСуммаСНДС) КАК ВалютнаяСуммаСНДС,
	|	СУММА(абс_ЗакупочныйЗаказГрафикОплат.ВалютнаяСуммаНДС) КАК ВалютнаяСуммаНДС,
	|	СУММА(абс_ЗакупочныйЗаказГрафикОплат.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(абс_ЗакупочныйЗаказГрафикОплат.СуммаНДС) КАК СуммаНДС,
	|	СУММА(абс_ЗакупочныйЗаказГрафикОплат.СуммаСНДС) КАК СуммаСНДС
	|//ПОМЕСТИТЬ ВТ_ГрафикОплат
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.ГрафикОплат КАК абс_ЗакупочныйЗаказГрафикОплат
	|ГДЕ
	|	абс_ЗакупочныйЗаказГрафикОплат.Ссылка = &ЗакупочныйЗаказ
	|	И абс_ЗакупочныйЗаказГрафикОплат.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_ЗакупочныйЗаказГрафикОплат.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_ЗакупочныйЗаказГрафикПоставок.Период,
	|	СУММА(абс_ЗакупочныйЗаказГрафикПоставок.ВалютнаяСуммаБезНДС) КАК ВалютнаяСуммаБезНДС,
	|	СУММА(абс_ЗакупочныйЗаказГрафикПоставок.ВалютнаяСуммаСНДС) КАК ВалютнаяСуммаСНДС,
	|	СУММА(абс_ЗакупочныйЗаказГрафикПоставок.ВалютнаяСуммаНДС) КАК ВалютнаяСуммаНДС,
	|	СУММА(абс_ЗакупочныйЗаказГрафикПоставок.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(абс_ЗакупочныйЗаказГрафикПоставок.СуммаНДС) КАК СуммаНДС,
	|	СУММА(абс_ЗакупочныйЗаказГрафикПоставок.СуммаСНДС) КАК СуммаСНДС
	|//ПОМЕСТИТЬ ВТ_ГрафикПоставок
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.ГрафикПоставок КАК абс_ЗакупочныйЗаказГрафикПоставок
	|ГДЕ
	|	абс_ЗакупочныйЗаказГрафикПоставок.Ссылка = &ЗакупочныйЗаказ
	|	И абс_ЗакупочныйЗаказГрафикПоставок.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_ЗакупочныйЗаказГрафикПоставок.Период
	|;";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();

	ТаблицаПроектов = РезультатЗапроса[0].Выгрузить();
	ВыборкаГрафикаОплат = РезультатЗапроса[1].Выбрать();
	ВыборкаГрафикаПоставок = РезультатЗапроса[2].Выбрать();
	
	//Доработка таблицы проектов
	ТаблицаПроектов.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	Если ТаблицаПроектов.Количество() = 1 
		И ТаблицаПроектов[0].Проект = Справочники.Проекты.ПустаяСсылка() Тогда
		
		СтрокаПроекта = ТаблицаПроектов[0];
		Если СтрокаПроекта.ДоляРаспределения = 0 Тогда
			СтрокаПроекта.ДоляРаспределения = 1;
		КонецЕсли;
	КонецЕсли;
	
	ИтогоДоляРаспределения = ТаблицаПроектов.Итог("ДоляРаспределения");
	Если ИтогоДоляРаспределения = 0 Тогда
		ТаблицаПроектов.ЗаполнитьЗначения(1, "ДоляРаспределения");
		ИтогоДоляРаспределения = ТаблицаПроектов.Итог("ДоляРаспределения");
	КонецЕсли;
	
	//Создание таблицы проектов по периодам и суммам
	ТаблицаПроектовСПериодами = ТаблицаПроектов.СкопироватьКолонки();
	ТаблицаПроектовСПериодами.Колонки.Удалить("ДоляРаспределения");
	ТаблицаПроектовСПериодами.Колонки.Удалить("Сумма");
	ТаблицаПроектовСПериодами.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПроектовСПериодами.Колонки.Добавить("СуммаОплат", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаПроектовСПериодами.Колонки.Добавить("СуммаРеглОплат", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаПроектовСПериодами.Колонки.Добавить("СуммаПоставки", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаПроектовСПериодами.Колонки.Добавить("СуммаРеглПоставки", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	МассивСтрокУдаленияПроектов = Новый Массив;
	
	//Создание данных таблицы проектов с периодами из выборки графика оплат
	Пока ВыборкаГрафикаОплат.Следующий() Цикл
		
		ПериодРегистрации = ВыборкаГрафикаОплат.Период;
		СуммаРеглЗаПериодГрафика = ВыборкаГрафикаОплат.СуммаСНДС;
		СуммаЗаПериодГрафика = ВыборкаГрафикаОплат.ВалютнаяСуммаСНДС;
		
		Для каждого СтрокаПроектов Из ТаблицаПроектов Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаПроектов.проект) И СтрокаПроектов.ДоляРаспределения = 0 Тогда
				Если  МассивСтрокУдаленияПроектов.Найти(СтрокаПроектов) = Неопределено Тогда
					МассивСтрокУдаленияПроектов.Добавить(СтрокаПроектов);
				КонецЕсли;
			КонецЕсли;
			
			СуммаРеглЗаПериодПроекта = Окр(СтрокаПроектов.ДоляРаспределения*СуммаРеглЗаПериодГрафика/ИтогоДоляРаспределения, 2);
			СуммаЗаПериодПроекта = Окр(СтрокаПроектов.ДоляРаспределения*СуммаЗаПериодГрафика/ИтогоДоляРаспределения, 2);
			
			Если СуммаРеглЗаПериодПроекта = 0 И СуммаЗаПериодПроекта = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			нОтбор = Новый Структура("Период, Проект", ПериодРегистрации, СтрокаПроектов.Проект);
			НайденСтроки = ТаблицаПроектовСПериодами.НайтиСтроки(нОтбор);
			Если НайденСтроки.Количество() = 0 Тогда
				СтрокаТаблПериодов = ТаблицаПроектовСПериодами.Добавить();
				СтрокаТаблПериодов.Проект = СтрокаПроектов.Проект;
				СтрокаТаблПериодов.Период = ПериодРегистрации;
			Иначе
				СтрокаТаблПериодов = НайденСтроки[0];
			КонецЕсли;
			СтрокаТаблПериодов.СуммаОплат = СуммаЗаПериодПроекта;
			СтрокаТаблПериодов.СуммаРеглОплат = СуммаРеглЗаПериодПроекта;
						
		КонецЦикла;
		
	КонецЦикла;
	
	а = 0;
	Пока а < МассивСтрокУдаленияПроектов.Количество() Цикл
		ТаблицаПроектов.Удалить(МассивСтрокУдаленияПроектов[а]);
		МассивСтрокУдаленияПроектов.Удалить(а);
	КонецЦикла;
		
	//Создание данных таблицы проектов с периодами из выборки графика поставок
	Пока ВыборкаГрафикаПоставок.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаПроектов.проект) И СтрокаПроектов.ДоляРаспределения = 0 Тогда
			Если  МассивСтрокУдаленияПроектов.Найти(СтрокаПроектов) = Неопределено Тогда
				МассивСтрокУдаленияПроектов.Добавить(СтрокаПроектов);
			КонецЕсли;
		КонецЕсли;
		
		ПериодРегистрации = ВыборкаГрафикаПоставок.Период;
		СуммаРеглЗаПериодГрафика = ВыборкаГрафикаПоставок.СуммаСНДС;
		СуммаЗаПериодГрафика = ВыборкаГрафикаПоставок.ВалютнаяСуммаСНДС;
		
		Для каждого СтрокаПроектов Из ТаблицаПроектов Цикл
			
			СуммаРеглЗаПериодПроекта = Окр(СтрокаПроектов.ДоляРаспределения*СуммаРеглЗаПериодГрафика/ИтогоДоляРаспределения, 2);
			СуммаЗаПериодПроекта = Окр(СтрокаПроектов.ДоляРаспределения*СуммаЗаПериодГрафика/ИтогоДоляРаспределения, 2);
			
			Если СуммаРеглЗаПериодПроекта = 0 И СуммаЗаПериодПроекта = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			нОтбор = Новый Структура("Период, Проект", ПериодРегистрации, СтрокаПроектов.Проект);
			НайденСтроки = ТаблицаПроектовСПериодами.НайтиСтроки(нОтбор);
			Если НайденСтроки.Количество() = 0 Тогда
				СтрокаТаблПериодов = ТаблицаПроектовСПериодами.Добавить();
				СтрокаТаблПериодов.Проект = СтрокаПроектов.Проект;
				СтрокаТаблПериодов.Период = ПериодРегистрации;
			Иначе
				СтрокаТаблПериодов = НайденСтроки[0];
			КонецЕсли;
			СтрокаТаблПериодов.СуммаПоставки = СуммаЗаПериодПроекта;
			СтрокаТаблПериодов.СуммаРеглПоставки = СуммаРеглЗаПериодПроекта;
			
			СтрокаПроектов.Сумма = СтрокаПроектов.Сумма + СуммаРеглЗаПериодПроекта;
						
		КонецЦикла;
		
	КонецЦикла;
	
	а = 0;
	Пока а < МассивСтрокУдаленияПроектов.Количество() Цикл
		ТаблицаПроектов.Удалить(МассивСтрокУдаленияПроектов[а]);
		МассивСтрокУдаленияПроектов.Удалить(а);
	КонецЦикла;
	
	Если ТаблицаПроектовСПериодами.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаПроектовСПериодами", ТаблицаПроектовСПериодами);
	Запрос.УстановитьПараметр("ГраницаСреза", Новый Граница(ТекущаяДата(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Ссылка);
	
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		парамУсловиеОплатыГрафикаОплат = Перечисления.абс_ВидыУсловийОплатПоДоговорам.РеализацияДДС;
		парамУсловиеОплатыГрафикаПоставок = Перечисления.абс_ВидыУсловийОплатПоДоговорам.Реализация;

	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		парамУсловиеОплатыГрафикаОплат = Перечисления.абс_ВидыУсловийОплатПоДоговорам.ПоступлениеДДС;
		парамУсловиеОплатыГрафикаПоставок = Перечисления.абс_ВидыУсловийОплатПоДоговорам.Поступление;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УсловиеОплатыГрафикаОплат", парамУсловиеОплатыГрафикаОплат);
	Запрос.УстановитьПараметр("УсловиеОплатыГрафикаПоставок", парамУсловиеОплатыГрафикаПоставок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПроектовСПериодами.Проект,
	|	ТаблицаПроектовСПериодами.Период,
	|	ТаблицаПроектовСПериодами.СуммаОплат,
	|	ТаблицаПроектовСПериодами.СуммаРеглОплат,
	|	ТаблицаПроектовСПериодами.СуммаПоставки,
	|	ТаблицаПроектовСПериодами.СуммаРеглПоставки
	|ПОМЕСТИТЬ ВТ_ТаблицаПроектовСПериодами
	|ИЗ
	|	&ТаблицаПроектовСПериодами КАК ТаблицаПроектовСПериодами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Оплаты"" КАК ВидГрафика,
	|	ВТ_ТаблицаПроектовСПериодами.Проект,
	|	ВТ_ТаблицаПроектовСПериодами.Период КАК ПериодРегистрации,
	|	ВТ_ТаблицаПроектовСПериодами.СуммаОплат КАК Сумма,
	|	ВТ_ТаблицаПроектовСПериодами.СуммаРеглОплат КАК СуммаРегл,
	|	ЕСТЬNULL(абс_УсловияОплатыПоДоговорамСрезПоследних.Регистратор, НЕОПРЕДЕЛЕНО) КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ДанныеГрафиковОплатПоставок
	|ИЗ
	|	ВТ_ТаблицаПроектовСПериодами КАК ВТ_ТаблицаПроектовСПериодами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_УсловияОплатыПоДоговорам.СрезПоследних(
	|				&ГраницаСреза,
	|				ДоговорКонтрагента = &ДоговорКонтрагента
	|					И НАЧАЛОПЕРИОДА(ПериодРегистрации, МЕСЯЦ) В
	|						(ВЫБРАТЬ
	|							НАЧАЛОПЕРИОДА(ВТ_ТаблицаПроектовСПериодами.Период, МЕСЯЦ) КАК ПериодРегистрации
	|						ИЗ
	|							ВТ_ТаблицаПроектовСПериодами КАК ВТ_ТаблицаПроектовСПериодами)
	|					И Проект В
	|						(ВЫБРАТЬ
	|							ВТ_ТаблицаПроектовСПериодами.Проект
	|						ИЗ
	|							ВТ_ТаблицаПроектовСПериодами КАК ВТ_ТаблицаПроектовСПериодами)
	|					И УсловиеОплаты = &УсловиеОплатыГрафикаОплат
	|					И НЕ ОперативныеДанные) КАК абс_УсловияОплатыПоДоговорамСрезПоследних
	|		ПО ВТ_ТаблицаПроектовСПериодами.Проект = абс_УсловияОплатыПоДоговорамСрезПоследних.Проект
	|			И (НАЧАЛОПЕРИОДА(ВТ_ТаблицаПроектовСПериодами.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(абс_УсловияОплатыПоДоговорамСрезПоследних.ПериодРегистрации, МЕСЯЦ))
	|ГДЕ
	|	(абс_УсловияОплатыПоДоговорамСрезПоследних.Регистратор ЕСТЬ NULL 
	|			ИЛИ (абс_УсловияОплатыПоДоговорамСрезПоследних.Сумма <> ВТ_ТаблицаПроектовСПериодами.СуммаОплат
	|				ИЛИ абс_УсловияОплатыПоДоговорамСрезПоследних.СуммаРегл <> ВТ_ТаблицаПроектовСПериодами.СуммаРеглОплат))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Поставки"",
	|	ВТ_ТаблицаПроектовСПериодами.Проект,
	|	ВТ_ТаблицаПроектовСПериодами.Период,
	|	ВТ_ТаблицаПроектовСПериодами.СуммаПоставки,
	|	ВТ_ТаблицаПроектовСПериодами.СуммаРеглПоставки,
	|	ЕСТЬNULL(абс_УсловияОплатыПоДоговорамСрезПоследних.Регистратор, НЕОПРЕДЕЛЕНО)
	|ИЗ
	|	ВТ_ТаблицаПроектовСПериодами КАК ВТ_ТаблицаПроектовСПериодами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_УсловияОплатыПоДоговорам.СрезПоследних(
	|				&ГраницаСреза,
	|				ДоговорКонтрагента = &ДоговорКонтрагента
	|					И НАЧАЛОПЕРИОДА(ПериодРегистрации, МЕСЯЦ) В
	|						(ВЫБРАТЬ
	|							НАЧАЛОПЕРИОДА(ВТ_ТаблицаПроектовСПериодами.Период, МЕСЯЦ) КАК ПериодРегистрации
	|						ИЗ
	|							ВТ_ТаблицаПроектовСПериодами КАК ВТ_ТаблицаПроектовСПериодами)
	|					И Проект В
	|						(ВЫБРАТЬ
	|							ВТ_ТаблицаПроектовСПериодами.Проект
	|						ИЗ
	|							ВТ_ТаблицаПроектовСПериодами КАК ВТ_ТаблицаПроектовСПериодами)
	|					И УсловиеОплаты = &УсловиеОплатыГрафикаПоставок
	|					И НЕ ОперативныеДанные) КАК абс_УсловияОплатыПоДоговорамСрезПоследних
	|		ПО ВТ_ТаблицаПроектовСПериодами.Проект = абс_УсловияОплатыПоДоговорамСрезПоследних.Проект
	|			И (НАЧАЛОПЕРИОДА(ВТ_ТаблицаПроектовСПериодами.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(абс_УсловияОплатыПоДоговорамСрезПоследних.ПериодРегистрации, МЕСЯЦ))
	|ГДЕ
	|	(абс_УсловияОплатыПоДоговорамСрезПоследних.Регистратор ЕСТЬ NULL 
	|			ИЛИ (абс_УсловияОплатыПоДоговорамСрезПоследних.Сумма <> ВТ_ТаблицаПроектовСПериодами.СуммаПоставки
	|				ИЛИ абс_УсловияОплатыПоДоговорамСрезПоследних.СуммаРегл <> ВТ_ТаблицаПроектовСПериодами.СуммаРеглПоставки))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеГрафиковОплатПоставок.ВидГрафика КАК ВидГрафика,
	|	ВТ_ДанныеГрафиковОплатПоставок.Проект КАК Проект,
	|	ВТ_ДанныеГрафиковОплатПоставок.ПериодРегистрации КАК ПериодРегистрации,
	|	ВТ_ДанныеГрафиковОплатПоставок.Сумма,
	|	ВТ_ДанныеГрафиковОплатПоставок.СуммаРегл,
	|	ВТ_ДанныеГрафиковОплатПоставок.Регистратор КАК Регистратор
	|ИЗ
	|	ВТ_ДанныеГрафиковОплатПоставок КАК ВТ_ДанныеГрафиковОплатПоставок
	|ГДЕ
	|	ВТ_ДанныеГрафиковОплатПоставок.Сумма <> 0
	|	И ВТ_ДанныеГрафиковОплатПоставок.СуммаРегл <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидГрафика,
	|	Проект,
	|	Регистратор,
	|	ПериодРегистрации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписейРегистра = РегистрыСведений.абс_УсловияОплатыПоДоговорам.СоздатьНаборЗаписей();
	
	ВыборкаДанных = РезультатЗапроса.Выбрать();
	Пока ВыборкаДанных.СледующийПоЗначениюПоля("ВидГрафика") Цикл
		Если ВыборкаДанных.ВидГрафика = "Оплаты" Тогда
			УсловиеОплатыДокумента = парамУсловиеОплатыГрафикаОплат;
		Иначе
			УсловиеОплатыДокумента = парамУсловиеОплатыГрафикаПоставок;
		КонецЕсли;
		
		Пока ВыборкаДанных.СледующийПоЗначениюПоля("Проект") Цикл
			
			РегистраторОбъект = Неопределено;
			
			Пока ВыборкаДанных.СледующийПоЗначениюПоля("Регистратор") Цикл
				Если ВыборкаДанных.Регистратор = Неопределено Тогда
					РегистраторОбъект = Документы.абс_ПлановыйГрафикОплат.СоздатьДокумент();
					РегистраторОбъект.ОбменДанными.Загрузка = Истина;
					РегистраторОбъект.Дата = КонецДня(абс_ЗакупочныйЗаказ.Дата);
					РегистраторОбъект.ДоговорКонтрагента = Ссылка;
					РегистраторОбъект.ОперативныеДанные = Ложь;
					РегистраторОбъект.Год = абс_ЗакупочныйЗаказ.ГодОплат;
					РегистраторОбъект.Проект = ВыборкаДанных.Проект;
					РегистраторОбъект.УсловиеОплаты = УсловиеОплатыДокумента;
					РегистраторОбъект.Проведен = Истина;
					РегистраторОбъект.УстановитьНовыйНомер();
					РегистраторОбъект.Записать(РежимЗаписиДокумента.Запись);
					РегистраторСсылка = РегистраторОбъект.Ссылка;					
				Иначе
					РегистраторСсылка = ВыборкаДанных.Регистратор;
				КонецЕсли;
				
				ТЧ_Оплаты = РегистраторСсылка.Оплаты.Выгрузить();
				ПереЗаписатьДокументРегистратор = Ложь;
				
				НаборЗаписейРегистра.Отбор.Сбросить();
				НаборЗаписейРегистра.Отбор.Регистратор.Установить(РегистраторСсылка);
				НаборЗаписейРегистра.Прочитать();
				
				ТаблицаЗаписейРегистра = НаборЗаписейРегистра.Выгрузить();
				
				Пока ВыборкаДанных.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
					рОтбор = Новый Структура("ДоговорКонтрагента, Проект, ПериодРегистрации, ОперативныеДанные, УсловиеОплаты",
											Ссылка, ВыборкаДанных.Проект, ВыборкаДанных.ПериодРегистрации, Ложь, УсловиеОплатыДокумента);
											
					НайдСтрокиТаблицыЗаписей = ТаблицаЗаписейРегистра.НайтиСтроки(рОтбор);
					Если НайдСтрокиТаблицыЗаписей.Количество() = 0 Тогда
						
						СтрокаТаблицыЗаписей = ТаблицаЗаписейРегистра.Добавить();
						
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗаписей, рОтбор);
						СтрокаТаблицыЗаписей.Активность = Истина;
						СтрокаТаблицыЗаписей.Период = РегистраторОбъект.Дата;
						СтрокаТаблицыЗаписей.Регистратор = РегистраторСсылка;
					Иначе
						СтрокаТаблицыЗаписей = НайдСтрокиТаблицыЗаписей[0];
					КонецЕсли;
					СтрокаТаблицыЗаписей.Сумма = ВыборкаДанных.Сумма;
					СтрокаТаблицыЗаписей.СуммаРегл = ВыборкаДанных.СуммаРегл;
					
					СтрокиТЧ_Оплаты = ТЧ_Оплаты.НайтиСтроки(Новый Структура("ПериодРегистрации", ВыборкаДанных.ПериодРегистрации));
					Если СтрокиТЧ_Оплаты.Количество() = 0 Тогда
						СтрокаТЧ_Оплаты = ТЧ_Оплаты.Добавить();
						СтрокаТЧ_Оплаты.ПериодРегистрации = ВыборкаДанных.ПериодРегистрации;
						СтрокаТЧ_Оплаты.Сумма = ВыборкаДанных.СуммаРегл;
						ПереЗаписатьДокументРегистратор = Истина;
					Иначе
						а = 0;
						Пока а < СтрокиТЧ_Оплаты.Количество() Цикл
							Если СтрокиТЧ_Оплаты.Количество() > 1 Тогда
								ТЧ_Оплаты.Удалить(СтрокиТЧ_Оплаты[а]);
								СтрокиТЧ_Оплаты.Удалить(а);
								ПереЗаписатьДокументРегистратор = Истина;
								Продолжить;
							КонецЕсли;
							СтрокаТЧ_Оплаты = СтрокиТЧ_Оплаты[а];
							Если СтрокаТЧ_Оплаты.Сумма <> ВыборкаДанных.СуммаРегл Тогда
								СтрокаТЧ_Оплаты.Сумма = ВыборкаДанных.СуммаРегл;
								ПереЗаписатьДокументРегистратор = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				
				КонецЦикла;
				
				НаборЗаписейРегистра.Загрузить(ТаблицаЗаписейРегистра);
				НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
				НаборЗаписейРегистра.Записать(Истина);
				
				Если ПереЗаписатьДокументРегистратор Тогда
					Если РегистраторОбъект = Неопределено Тогда
						РегистраторОбъект = РегистраторСсылка.ПолучитьОбъект();
					КонецЕсли;
					РегистраторОбъект.ОбменДанными.Загрузка = Истина;
					РегистраторОбъект.Оплаты.Загрузить(ТЧ_Оплаты);
					РегистраторОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	Если Записывать Тогда 
		ДоговорОбъект = Договор.ПолучитьОбъект();
		ДоговорОбъект.абс_ЗакупочныйЗаказ = ЗакупочныйЗаказ;
		ДоговорОбъект.абс_Проекты.Очистить();
		ДоговорОбъект.абс_Проекты.Загрузить(ТаблицаПроектов);
		//мабс_Проекты = абс_Проекты.Выгрузить();
		
		//ЗаполнитьДеревоОплат();
		ДоговорОбъект.ОбменДанными.Загрузка = Истина;
		ДоговорОбъект.Записать();
	КонецЕсли;
		
КонецПроцедуры
//АБС ВСТАВКА  КОНЕЦ
