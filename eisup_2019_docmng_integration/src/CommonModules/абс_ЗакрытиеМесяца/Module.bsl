// В модуле содержатся процедуры и функции документа "Закрытие месяца"
/////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ


//Функция осуществляет формирование таблицы счетов,
//	по которым происходит закрытие. 
Функция  ЗаполнитьТаблицыСчетов(Объект) Экспорт
	
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("Список");
	ТаблицаСчетов.Колонки.Добавить("БУ");
	ТаблицаСчетов.Колонки.Добавить("НУ");
	
	//Закрытие счета 20
	НовСтр = ТаблицаСчетов.Добавить();
	НовСтр.Список = "Закрытие счета 20";
	НовСтр.БУ = Объект.ЗакрытиеСчета20БУ;
	НовСтр.НУ = Объект.ЗакрытиеСчета20НУ;
	//\\Закрытие счета 20
	
	//Закрытие счета 25
	НовСтр = ТаблицаСчетов.Добавить();
	НовСтр.Список = "Закрытие счета 25";
	НовСтр.БУ = Объект.ЗакрытиеСчета25БУ;
	НовСтр.НУ = Объект.ЗакрытиеСчета25НУ;
	//\\Закрытие счета 25
	
	//Закрытие счета 26
	НовСтр = ТаблицаСчетов.Добавить();
	НовСтр.Список = "Закрытие счета 26";
	НовСтр.БУ = Объект.ЗакрытиеСчета26БУ;
	НовСтр.НУ = Объект.ЗакрытиеСчета26НУ;
	//\\Закрытие счета 26

	//Закрытие счета 44
	НовСтр = ТаблицаСчетов.Добавить();
	НовСтр.Список = "Закрытие счета 44";
	НовСтр.БУ = Объект.ЗакрытиеСчета44БУ;
	НовСтр.НУ = Объект.ЗакрытиеСчета44НУ;
	//\\Закрытие счета 44
	Возврат ТаблицаСчетов;	
КонецФункции

// Функция получает остатки по счетам БУ и НУ
//
// Параметры
//  Объект    -   Документ "Закрытие месяца"
//  ВидУчета  -   Хозрасчетный или Налоговый
//  Счет      -   Счет для закрытия остатков        
//
// Возвращаемое значение:
//   Таблица остатков
//
Функция СформироватьОстаткиБУ_НУ(Объект,ВидУчета, Счет) Экспорт
	
	ЗапросОстатки=Новый Запрос;
	Если ВидУчета="Налоговый" Тогда
		ТекстУсловия=", НалоговыйОбороты.ВидУчета";
		Ограничение="";
	Иначе
		ТекстУсловия="";
		Ограничение="";
	КонецЕсли;
	Счет20="";
	Если Найти(Счет.Код,"20")>0  Тогда
		Счет20=ВидУчета+"Обороты.Субконто3 КАК НоменклатурныеГруппы ,";
	КонецЕсли;
	
	
	
	ЗапросОстатки.Текст=
	"ВЫБРАТЬ
	|	"+ВидУчета+"Обороты.Счет КАК Счет,
	|	"+ВидУчета+"Обороты.Субконто1 КАК Подразделения,
	|	"+ВидУчета+"Обороты.Субконто2 КАК СтатьиЗатрат," +Счет20+"
	|	ЕстьNULL("+ВидУчета+"Обороты.СуммаОборотДт,0)- ЕстьNULL("+ВидУчета+"Обороты.СуммаОборотКт,0) КАК СуммаОстатокДт,
	|	0  КАК СуммаОстатокКт,
	|	ЕстьNULL("+ВидУчета+"Обороты.СуммаОборотДт,0) - ЕстьNULL("+ВидУчета+"Обороты.СуммаОборотКт,0) КАК СуммаОстаток "+ТекстУсловия+"
	|ИЗ
	|	РегистрБухгалтерии."+ВидУчета+".Обороты(&НачалоПериода, &ОкончаниеПериода, Месяц, Счет В ИЕРАРХИИ (&Счет), &МассивСубконто, Организация = &Организация) КАК "+ВидУчета+"Обороты
	|"+Ограничение+"";
	
	
	НачалоПериода = Новый Граница(НачалоМесяца(Объект.Дата), ВидГраницы.Включая);
	ОкончаниеПериода = Новый Граница(КонецМесяца(Объект.Дата), ВидГраницы.Включая);	
	ЗапросОстатки.УстановитьПараметр("НачалоПериода", НачалоПериода);
	ЗапросОстатки.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	ЗапросОстатки.УстановитьПараметр("Счет", Счет);
	ЗапросОстатки.УстановитьПараметр("Организация",Объект.Организация);
	МассивСубконто=Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Если Найти(Счет.Код,"20")>0 Тогда
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		
	КонецЕсли;
	ЗапросОстатки.УстановитьПараметр("МассивСубконто",МассивСубконто);
	
	
	Результат = ЗапросОстатки.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка;

	
КонецФункции // СформироватьОстаткиБУ_НУ()

// Функция возвращает выборку из результата запроса по остаткам по субсчетам 25 счета
// в БУ и НУ (в зависимости от вида учета) с распределением по базе - оборотам счета 90.01
Процедура ЗакрытьБУ_НУ25Счет(Объект, ВидУчета, Счет) Экспорт
	
	ВидУчетаНУ = ?(ВидУчета = "Налоговый", ", 
	|	ОборотыСчета.ВидУчета", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", Новый Граница(НачалоМесяца(Объект.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецМесяца", Новый Граница(КонецМесяца(Объект.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатурныеГруппы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОборотыСчета.Счет,
	               |	ОборотыСчета.Субконто1 КАК НоменклатурнаяГруппа,
	               |	СУММА(ОборотыСчета.СуммаОборотКт) КАК База" + ВидУчетаНУ + "
	               |ИЗ
	               |	РегистрБухгалтерии." + ВидУчета + ".Обороты(
	               |			&НачалоМесяца,
	               |			&КонецМесяца,
	               |			Месяц,
	               |			Счет = " + ?(ВидУчета = "Хозрасчетный", "ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД)
	               |				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаОблагаемаяЕНВД) ", "ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства) ") + ",
	               |			&ВидСубконтоНоменклатурныеГруппы,
	               |			Организация = &Организация,
	               |			,
	               |			) КАК ОборотыСчета
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОборотыСчета.Субконто1,
	               |	ОборотыСчета.Счет" + ВидУчетаНУ + "
				   |ИТОГИ
				   |	СУММА(База)
				   |ПО
				   |	Счет" + ?(ВидУчета = "Налоговый", ", 
				   |	ВидУчета", "") + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОборотыСчета.Счет,
	               |	ОборотыСчета.Субконто1 КАК Подразделение,
	               |	ОборотыСчета.Субконто2 КАК СтатьяЗатрат,

	               |	СУММА(ОборотыСчета.СуммаОборотДт - ОборотыСчета.СуммаОборотКт) КАК Сумма" + ВидУчетаНУ + "
	               |ИЗ
	               |	РегистрБухгалтерии." + ВидУчета + ".Обороты(
	               |			&НачалоМесяца,
	               |			&КонецМесяца,
	               |			Месяц,
	               |			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов." + ВидУчета + ".ОбщепроизводственныеРасходы))
	               |				И (НЕ Счет = ЗНАЧЕНИЕ(ПланСчетов." + ВидУчета + ?(ВидУчета = "Хозрасчетный", ".ОбщепроизводственныеРасходыРаспределяемые", ".КосвенныеОбщепроизводственныеРасходыРаспределяемые") + ")),
	               |			,
	               |			Организация = &Организация,
	               |			,
	               |			) КАК ОборотыСчета
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОборотыСчета.Счет,
	               |	ОборотыСчета.Субконто1,
	               |	ОборотыСчета.Субконто2" + ВидУчетаНУ+"
				   |ИТОГИ(Сумма" + ВидУчетаНУ + "
				   |ПО
				   |    ВидДеятельности
				   |";

	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаСчет = МассивРезультатов[1].Выбрать();
	ВыборкаБаза = МассивРезультатов[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// теперь распределим остатки 25 счета по полученной базе
	// 25.01 закроем по базе 90.01.1 в БУ
	// 25.02 закроем по базе 90.01.2 в БУ
	// в НУ 25.01 и 25.02 по общей базе на 20.01.1 и 20.01.2, соответственно
	Если ВидУчета = "Хозрасчетный" Тогда
		Пока ВыборкаБаза.Следующий() Цикл
			ВыборкаСчет.Сбросить();
			Если ВыборкаБаза.База = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОбщаяБаза = ВыборкаБаза.База;
			Пока ВыборкаСчет.Следующий() Цикл
				Если ВыборкаСчет.Сумма = 0 ИЛИ (ВыборкаСчет.Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД И
					ВыборкаБаза.Счет <> ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД) ИЛИ
					(ВыборкаСчет.Счет <> ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД И
					ВыборкаБаза.Счет = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД) ТОГДА
					Продолжить;
				КонецЕсли;
				ОстатокСуммыКРаспределению = ВыборкаСчет.Сумма;
				ВыборкаНГ = ВыборкаБаза.Выбрать();
				Пока ВыборкаНГ.Следующий() Цикл
					Если ВыборкаНГ.База = 0 Тогда
						Продолжить;
					КонецЕсли;
					КоэффициентНГ = ВыборкаНГ.База / ОбщаяБаза;
					СуммаРаспределено = ВыборкаСчет.Сумма * КоэффициентНГ;
					Если СуммаРаспределено <> 0 Тогда
						Движение = Объект.Движения.Хозрасчетный.Добавить();
						Движение.Активность = Истина;
						Движение.Организация = Объект.Организация;
						Движение.Период = Объект.Дата;
						Движение.Содержание = "Закрытие счета " + СокрЛП(ВыборкаСчет.Счет.Код);
						Движение.Сумма = СуммаРаспределено;
						Движение.СчетКт = ВыборкаСчет.Счет;
						Движение.СчетДт = ?(ВыборкаСчет.Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД,
											ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД,
											ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД);
						Движение.СубконтоДт.НоменклатурныеГруппы = ВыборкаНГ.НоменклатурнаяГруппа;
						Движение.СубконтоДт.Подразделения = ВыборкаСчет.Подразделение;
						Движение.СубконтоДт.СтатьиЗатрат = ВыборкаСчет.СтатьяЗатрат;
						Движение.СубконтоКт.Подразделения = ВыборкаСчет.Подразделение;
						Движение.СубконтоКт.СтатьиЗатрат = ВыборкаСчет.СтатьяЗатрат;
						ОстатокСуммыКРаспределению = ОстатокСуммыКРаспределению - СуммаРаспределено;
					КонецЕсли;
				КонецЦикла;
				Если ОстатокСуммыКРаспределению <> 0 Тогда
					Движение.Сумма = Движение.Сумма + ОстатокСуммыКРаспределению;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Объект.Движения.Хозрасчетный.Записать(Ложь);
	Иначе
		Если ВыборкаБаза.Следующий() И ВыборкаБаза.База <> 0 Тогда // 90
			ВыборкаВидУчета = ВыборкаБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВидУчета.Следующий() Цикл // НУ, ПР, ВР
				ВыборкаСчет.Сбросить();
				Если ВыборкаВидУчета.База = 0 Тогда
					Продолжить;
				КонецЕсли;				
				ОбщаяБаза = ВыборкаВидУчета.База;
				Пока ВыборкаСчет.Следующий() Цикл
					Если ВыборкаСчет.Сумма = 0 ИЛИ ВыборкаСчет.ВидУчета <> ВыборкаВидУчета.ВидУчета Тогда
						Продолжить;
					КонецЕсли;
					ОстатокСуммыКРаспределению = ВыборкаСчет.Сумма;
					ВыборкаНГ = ВыборкаВидУчета.Выбрать();
					Пока ВыборкаНГ.Следующий() Цикл
						Если ВыборкаНГ.База = 0 Тогда
							Продолжить;
						КонецЕсли;
						КоэффициентНГ = ВыборкаНГ.База / ОбщаяБаза;
						СуммаРаспределено = ВыборкаСчет.Сумма * КоэффициентНГ;
						Если СуммаРаспределено <> 0 Тогда
							Движение = Объект.Движения.Налоговый.Добавить();
							Движение.ВидУчетаДт = ВыборкаСчет.ВидУчета;
							Движение.ВидУчетаКт = ВыборкаСчет.ВидУчета;
							Движение.Период = Объект.Дата;
							Движение.Организация = Объект.Организация;
							Движение.Сумма = СуммаРаспределено;
							Движение.Содержание = "Закрытие счета " + СокрЛП(ВыборкаСчет.Счет.Код);
							Движение.Активность = Истина;
							Движение.СчетКт = ВыборкаСчет.Счет;
							Движение.СчетДт = ?(ВыборкаСчет.Счет = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы, 
												ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства, 
												ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства);
							Движение.СубконтоДт.НоменклатурныеГруппы = ВыборкаНГ.НоменклатурнаяГруппа;
							Движение.СубконтоДт.Подразделения = ВыборкаСчет.Подразделение;
							Движение.СубконтоДт.СтатьиЗатрат = ВыборкаСчет.СтатьяЗатрат;
							Движение.СубконтоКт.Подразделения = ВыборкаСчет.Подразделение;
							Движение.СубконтоКт.СтатьиЗатрат = ВыборкаСчет.СтатьяЗатрат;
							ОстатокСуммыКРаспределению = ОстатокСуммыКРаспределению - СуммаРаспределено;
						КонецЕсли;
					КонецЦикла;
					Если ОстатокСуммыКРаспределению <> 0 Тогда
						Движение.Сумма = Движение.Сумма + ОстатокСуммыКРаспределению;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		Объект.Движения.Налоговый.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСчетСписания(ВидУчета, Счет) Экспорт
	Если ВидУчета="Налоговый" Тогда
		Если Счет=ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы Тогда
			СчетУчета=ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
		ИначеЕсли Счет=ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы Тогда
			СчетУчета=ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
		ИначеЕсли Счет=ПланыСчетов.Налоговый.КоммерческиеРасходыНеОблагаемыеЕНВД ИЛИ Счет=ПланыСчетов.Налоговый.ИздержкиОбращенияНеОблагаемыеЕНВД Тогда
			СчетУчета=ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
		ИначеЕсли Счет=ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы Тогда
			СчетУчета=ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства;
		ИначеЕсли Счет=ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы Тогда
			СчетУчета=ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства;
		ИначеЕсли Счет=ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства Тогда
			СчетУчета=ПланыСчетов.Налоговый.СебестоимостьПродаж;
		ИначеЕсли Счет=ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства Тогда
			СчетУчета=ПланыСчетов.Налоговый.СебестоимостьПродаж;
			
		Иначе
			СчетУчета=Неопределено;
		КонецЕсли;
		
		//Дт 90.08 <без указания аналитики> Кт 26.01  <Сальдо 26.01 счета>
		//Дт 90.08 <без указания аналитики> Кт 26.02  <Сальдо 26.01 счета>
		//Дт 90.07 <без указания аналитики> Кт 44.02.1  <Сальдо 44.02.1>
		//Дт 20.01.1 <без указания аналитики> Кт 25.01 <Сальдо 25.01>
		//Дт 20.01.2 <без указания аналитики> Кт 25.02 <Сальдо 25-.02>
		//Дт 90.02 <Номенклатурные группы аналогичны остатками 20-го счета>  Кт 20.01.1 <Сальдо 20.01.1>
		//Дт 90.02 <Номенклатурные группы аналогичны остатками 20-го счета>  Кт 20.01.2 <Сальдо 20.01.2>
	Иначе
		Если Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) Тогда
			СчетУчета=ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеОблагаемыеЕНВД;
		ИначеЕсли Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыНаПродажу) Тогда
			СчетУчета=ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеОблагаемыеЕНВД;
		ИначеЕсли Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) Тогда
			СчетУчета=ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД;
		ИначеЕсли Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство) Тогда
			СчетУчета=ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
		ИначеЕсли Найти(Счет,"26") Тогда
			СчетУчета=ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеОблагаемыеЕНВД;

		Иначе
			СчетУчета=Неопределено;
		КонецЕсли;
		//Дт 90.08 <без указания аналитики> Кт 26  <Сальдо 26-го счета>
		//Дт 90.07 <без указания аналитики> Кт 44  <Сальдо 44-го счета>
		//Дт 20.01.1 <без указания аналитики> Кт 25.01 <Сальдо 25-го счета>
		//Дт 90.02 <Номенклатурные группы аналогичны остатками 20-го счета>  Кт 20.01.1 <Сальдо 20-го счета>
	КонецЕсли;
	
	Возврат СчетУчета;
КонецФункции

// Функция формирует остатки по регистрам накопления
// Незавершенное производство (бухгалтерский учет),
// Незавершенное производство (налоговый учет),
// Параметры
//  Объект       - документ "Закрытие месяца"
//              
//  Вид учета    - "Хозрасчетный" или "Налоговый"
//                
//
// Возвращаемое значение:
//  Таблицу остатков
//
Функция СформироватьОстаткиЗатратыНезавершенноеПроизводство(Объект,ВидУчета,Счет) Экспорт
	ДатаКон=новый Граница(КонецМесяца(Объект.Дата),ВидГраницы.Включая);
	Если ВидУчета="Налоговый" Тогда
		ТекстПоля=" ,
		|	Затраты"+ВидУчета+"УчетОстатки.ПостояннаяРазницаОстаток,
		|	Затраты"+ВидУчета+"УчетОстатки.ВременнаяРазницаОстаток";
		
		ВтораяТаблица=" ,
		|	NULL,
		|	NULL";
	Иначе
		ТекстПоля="";
		ВтораяТаблица="";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Затраты"+ВидУчета+"УчетОстатки.Организация,
	|	Затраты"+ВидУчета+"УчетОстатки.СчетУчета КАК СчетУчета,
	|	Затраты"+ВидУчета+"УчетОстатки.Подразделение КАК Подразделение,
	|	Затраты"+ВидУчета+"УчетОстатки.СтатьяЗатрат КАК СтатьяЗатрат,
	|	NULL КАК СуммаОстатокДт,
	|	Затраты"+ВидУчета+"УчетОстатки.СуммаОстаток КАК Сумма,
	|	""Затраты"" КАК ВидЗаписей,
	|	Затраты"+ВидУчета+"УчетОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Затраты"+ВидУчета+"УчетОстатки.Заказ КАК Заказ,
	|	NULL КАК Затрата,
	|	NULL КАК ХарактеристикаЗатраты,
	|	NULL КАК СерияЗатраты "+ ТекстПоля+"
	|ИЗ
	|	РегистрНакопления.Затраты"+ВидУчета+"Учет.Остатки(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И СчетУчета В ИЕРАРХИИ (&СчетУчета)) КАК Затраты"+ВидУчета+"УчетОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   НезавершенноеПроизводство"+ВидУчета+"УчетОстатки.Организация,
	|	НезавершенноеПроизводство"+ВидУчета+"УчетОстатки.СчетУчета,
	|	НезавершенноеПроизводство"+ВидУчета+"УчетОстатки.Подразделение,
	|	НезавершенноеПроизводство"+ВидУчета+"УчетОстатки.СтатьяЗатрат,
	|	НезавершенноеПроизводство"+ВидУчета+"УчетОстатки.КоличествоОстаток,
	|	НезавершенноеПроизводство"+ВидУчета+"УчетОстатки.СтоимостьОстаток,
	|	""Незавершенка"",
	|	НезавершенноеПроизводство"+ВидУчета+"УчетОстатки.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство"+ВидУчета+"УчетОстатки.Заказ,
	|	НезавершенноеПроизводство"+ВидУчета+"УчетОстатки.Затрата,
	|	НезавершенноеПроизводство"+ВидУчета+"УчетОстатки.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство"+ВидУчета+"УчетОстатки.СерияЗатраты" +ВтораяТаблица+"
	|ИЗ
	|	РегистрНакопления.НезавершенноеПроизводство"+ВидУчета+"Учет.Остатки(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И СчетУчета В ИЕРАРХИИ (&СчетУчета)) КАК НезавершенноеПроизводство"+ВидУчета+"УчетОстатки";
	
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("СчетУчета", Счет);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Возврат Выборка;
	
КонецФункции // СформироватьОстаткиЗатратыНезавершенноеПроизводство()

//Процедура выполняет движения по регистрам накопления по 
// полученным данным
Процедура ЗакрытьРегистрыНакопления(Объект,Движения,ВидУчета,РегистрыНакопленияОстатки) Экспорт
	ДатаКон=новый Граница(КонецМесяца(Объект.Дата),ВидГраницы.Включая);
	//затраты
	Если ВидУчета="Налоговый" Тогда
		НаборЗаписей = Движения.ЗатратыНалоговыйУчет;
	Иначе
		НаборЗаписей = Движения.ЗатратыБухгалтерскийУчет;
	КонецЕсли;
	
	
	Отбор=Новый Структура("ВидЗаписей","Затраты");
	ТЗ=РегистрыНакопленияОстатки.Скопировать();
	МассивТЗ=ТЗ.НайтиСтроки(Отбор);
	
	ТЗСОтбором=ТЗ.СкопироватьКолонки();
	Для Каждого Стр из МассивТЗ Цикл
		НовСтр=ТЗСОтбором.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,Стр);
	КонецЦикла;
	
	Наборзаписей.мТаблицаДвижений = ТЗСОтбором;
	НаборЗаписей.мПериод=ДатаКон.Значение;
	НаборЗаписей.ВыполнитьРасход();
	НаборЗаписей.Записать();
	//\\
	
	//незавершенное производство
	Если ВидУчета="Налоговый" Тогда
		НаборЗаписей = Движения.НезавершенноеПроизводствоНалоговыйУчет;
	Иначе
		НаборЗаписей = Движения.НезавершенноеПроизводствоБухгалтерскийУчет;
	КонецЕсли;
	
	
	Отбор=Новый Структура("ВидЗаписей","Незавершенка");
	ТЗ=РегистрыНакопленияОстатки.Скопировать();
	МассивТЗ=ТЗ.НайтиСтроки(Отбор);
	
	ТЗСОтбором=ТЗ.СкопироватьКолонки();
	Для Каждого Стр из МассивТЗ Цикл
		НовСтр=ТЗСОтбором.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,Стр);
	КонецЦикла;
	
	Наборзаписей.мТаблицаДвижений = ТЗСОтбором;
	ТЗСОтбором.Колонки["СуммаОстатокДт"].Имя = "Количество";
	ТЗСОтбором.Колонки["Сумма"].Имя = "Стоимость";

	НаборЗаписей.мПериод=ДатаКон.Значение;
	НаборЗаписей.ВыполнитьРасход();
	НаборЗаписей.Записать();
	//\\
	
	
КонецПроцедуры

 //Процедура выполняет движения по закрытию остатков по регистрам Бухгалтерии
 // "Хозрасчетный" и "Налоговый"
Процедура ЗакрытиеСчетовИРегистров(Объект,Движения,Счет, ВидУчета) Экспорт
	
	// АБС ВСТАВКА 51169
	// если это 25 счет (его субсчета), тогда остатки по нему формируются с учетом базы распределения 
	// - оборотов по 90.01.1 в месяце закрытия
	Если Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы
		ИЛИ Счет = ПланыСчетов.Налоговый.ОбщепроизводственныеРасходы Тогда
		
		СвойВидУчета = ?(ВидУчета = "Налоговый", "Налоговый", "Хозрасчетный");
		ЗакрытьБУ_НУ25Счет(Объект, СвойВидУчета, Счет);
		
	Иначе
		//\\ АБС ВСТАВКА
		
		Если ВидУчета="Налоговый" Тогда
			ВыборкаПоСчету=СформироватьОстаткиБУ_НУ(Объект,"Налоговый", Счет);
			НомерРегистра=4;
			
		Иначе 
			ВыборкаПоСчету=СформироватьОстаткиБУ_НУ(Объект,"Хозрасчетный", Счет);
			НомерРегистра=0;
		КонецЕсли;
		
		
		Если ВыборкаПоСчету.Количество()=0 Тогда
			Сообщить("По счету "+Счет.Наименование+" нет остатков!!!");
		Иначе
			
			Пока ВыборкаПоСчету.Следующий() Цикл
				Если ВыборкаПоСчету.СуммаОстаток<>0 Тогда
					Движение = Движения[НомерРегистра].Добавить();
					Движение.Организация = Объект.Организация;
					Движение.Период = Объект.Дата;
					Движение.Активность=Истина;
					Движение.Содержание = "Закрытие счета "+ВыборкаПоСчету.Счет.Код;
					Если ВидУчета="Налоговый" Тогда
						Движение.СчетДт =ПолучитьСчетСписания("Налоговый",ВыборкаПоСчету.Счет);
						Движение.ВидУчетаДт = ВыборкаПоСчету.ВидУчета;
						Движение.ВидУчетаКт = ВыборкаПоСчету.ВидУчета;
						Если ЗначениеЗаполнено(Движение.СчетДт) Тогда
							попытка
								Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы]=ВыборкаПоСчету.НоменклатурныеГруппы; 
							исключение
							конецпопытки;
							
						КонецЕсли;
						
						
					Иначе
						Движение.СчетДт = ПолучитьСчетСписания(,ВыборкаПоСчету.Счет);
						Если ЗначениеЗаполнено(Движение.СчетДт) Тогда
							
							попытка
								Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы]=ВыборкаПоСчету.НоменклатурныеГруппы; 
							исключение
							конецпопытки;
							
						КонецЕсли;
						
					КонецЕсли;
					Движение.СчетКт = ВыборкаПоСчету.Счет;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат] = ВыборкаПоСчету.СтатьиЗатрат;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения] = ВыборкаПоСчету.Подразделения;
					
					Движение.Сумма = ВыборкаПоСчету.СуммаОстаток;
					Если Найти(Счет,"20")>0 Тогда
						Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы]=ВыборкаПоСчету.НоменклатурныеГруппы; 
					КонецЕсли;
					
					
				КонецЕсли;
			КонецЦикла;	
			
			Движения[НомерРегистра].Записать(Ложь);
		КонецЕсли;
		
		// АБС ВСТАВКА 51169
	КонецЕсли; // Если Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы Тогда
	//\\ АБС ВСТАВКА
	
	Если ВидУчета="Налоговый" Тогда
		РегистрыНакопленияОстатки=СформироватьОстаткиЗатратыНезавершенноеПроизводство(Объект,"Налоговый",Счет);
		ЗакрытьРегистрыНакопления(Объект,Движения,"Налоговый",РегистрыНакопленияОстатки);
		
	Иначе
		РегистрыНакопленияОстатки=СформироватьОстаткиЗатратыНезавершенноеПроизводство(Объект,"Бухгалтерский",Счет);
		ЗакрытьРегистрыНакопления(Объект,Движения,"Бухгалтерский",РегистрыНакопленияОстатки);
	КонецЕсли;
	
КонецПроцедуры

// ФУНКЦИЯ ДЛЯ ЗАЩИТЫ МОДУЛЯ -----------------------------------------------

// Функция возвращает строку, наименование макета Компоненты защиты
//
// Параметры:
//			Нет
//
Функция GetUSBKeyComponentLocation()
	Перем Постфикс;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 тогда
		Постфикс = "Win32";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 тогда
		Постфикс = "Win64";
	КонецЕсли;
	
	
	Макет = Метаданные.ОбщиеМакеты.Найти("КомпонентаЗащиты_Hasp_" + Постфикс);
	Если Макет = Неопределено тогда
		ВызватьИсключение("Макет с образом компоненты защиты не найден");
	КонецЕсли;

	Возврат Макет.ПолноеИмя();
КонецФункции


