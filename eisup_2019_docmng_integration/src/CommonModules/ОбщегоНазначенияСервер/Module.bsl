////////////////////////////////////////////////////////////////////////////////
// Работа с массивами и таблицами значений

// Функция возвращает результат вычитания элементов множества таблицы
// ТаблицаВычитаемая из ТаблицаОсновная.
//
Функция ВычестьТаблицу(знач ТаблицаОсновная,
                       знач ТаблицаВычитаемая,
                       знач КолонкаСравненияОсновнойТаблицы = "",
                       знач КолонкаСравненияВычитаемойТаблицы = "") Экспорт
	
	Если Не ЗначениеЗаполнено(КолонкаСравненияОсновнойТаблицы) Тогда
		КолонкаСравненияОсновнойТаблицы = "Значение";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаСравненияВычитаемойТаблицы) Тогда
		КолонкаСравненияВычитаемойТаблицы = "Значение";
	КонецЕсли;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат = ТаблицаОсновная.Скопировать();
	
	Для Каждого Элемент Из ТаблицаВычитаемая Цикл
		Значение = Элемент[КолонкаСравненияОсновнойТаблицы];
		НайденнаяСтрока = ТаблицаРезультат.Найти(Значение, КолонкаСравненияОсновнойТаблицы);
		Если НайденнаяСтрока <> Неопределено Тогда
			ТаблицаРезультат.Удалить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Функция возвращает таблицу созданную на основе ТаблицаИнициализации.
// Если ТаблицаИнициализации не указана, то создается пустая таблица.
//
Функция СоздатьТаблицуСравнения(ТаблицаИнициализации = Неопределено,
                                ИмяКолонкиСравнения = "Значение") Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить(ИмяКолонкиСравнения);
	
	Если ТаблицаИнициализации <> Неопределено Тогда
		
		МассивЗначений = ТаблицаИнициализации.ВыгрузитьКолонку(ИмяКолонкиСравнения);
		
		Для Каждого Элемент Из ТаблицаИнициализации Цикл
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Установить(0, Элемент[ИмяКолонкиСравнения]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблица;

КонецФункции

Функция ЗапретитьОткрытиеНесколькихСеансов() Экспорт
	
	ЗапретитьОткрытиеНесколькихСеансов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗапретитьОткрытиеНесколькихСеансов");
	
	Если НЕ ЗапретитьОткрытиеНесколькихСеансов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущийНомерСоединения = НомерСоединенияИнформационнойБазы();
	УникальныйИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого ТекСоединение Из МассивСоединений Цикл
		Если (ТекСоединение.ИмяПриложения = "1CV8") 
		   И (НЕ ТекСоединение.НомерСоединения = ТекущийНомерСоединения)
		   И (НЕ ТекСоединение.Пользователь = неопределено)
		   И (ТекСоединение.Пользователь.УникальныйИдентификатор = УникальныйИдентификаторПользователя) Тогда
		  
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;	
	
	 Возврат Ложь;
	 
 КонецФункции // 
 
// +++ввв 13.08.2016 г.

////////////////////////// Блок проверки контрагентов на сервисе ИФНС /////////////////////// 

Функция ДатаСтрокой(Дата)
	Результат = Неопределено;
	Если ТипЗнч(Дата) = Тип("Строка") Тогда 
		// Дата уже в нужном формате в виде строки.
		Результат = Дата;
	ИначеЕсли ТипЗнч(Дата) = Тип("Дата") Тогда 
		Результат = Формат(Дата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПараметрыРаботыСервиса()
	АдресСервиса = "http://npchk.nalog.ru/FNSNDSCAWS_2?wsdl";
	// заполняем общие настройки
	Результат = Новый Структура();
	Результат.Вставить("АдресСервиса", 					АдресСервиса);
	Результат.Вставить("ИмяТипаКонтрагентаФабрикиXDTO", "NdsRequest2_NP");
	Результат.Вставить("ИмяТипаЗапросаФабрикиXDTO", 	"NdsRequest2");
	Результат.Вставить("АдресWSDL", 					АдресСервиса);
	Результат.Вставить("URIПространстваИмен", 			"http://ws.unisoft");
	Результат.Вставить("ИмяСервиса", 					"FNSNDSCAWS2");
	Результат.Вставить("ИмяТочкиПодключения", 			"FNSNDSCAWS2_Port");
	Результат.Вставить("ПространствоИменОтвета", 		"http://ws.unisoft/FNSNDSCAWS2/Request");
	Возврат Результат;
КонецФункции

Функция ПолучитьWSПрокси(Таймаут) 
	Параметры = ПараметрыРаботыСервиса();
	WSПрокси = ОбщегоНазначения.WSПрокси(
			Параметры.АдресWSDL,
			Параметры.URIПространстваИмен,
			Параметры.ИмяСервиса,
			Параметры.ИмяТочкиПодключения,
			Неопределено,
			Неопределено,
			Таймаут);
	Возврат WSПрокси;
КонецФункции

// +++ввв 18.01.2017 г.
//Процедура ПроксиСервиса(WSПрокси = Неопределено, Таймаут = 120
Процедура ПроксиСервиса(WSПрокси = Неопределено, Таймаут = 300
// ---ввв 18.01.2017 г.
// +++ввв 30.08.2016 г.
	,СтрОшибка
// ---ввв 30.08.2016 г.
	)
	Попытка
		WSПрокси = ПолучитьWSПрокси(Таймаут);
	Исключение
		СтрОшибка=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки; 
КонецПроцедуры

Функция ЕстьДоступКВебСервисуФНС(
// +++ввв 30.08.2016 г.
	СтрОшибка
// ---ввв 30.08.2016 г.
	)
// +++ввв 18.01.2017 г.
	//Таймаут = 10;
	Таймаут = 200;
// ---ввв 18.01.2017 г.
	Прокси = Неопределено;
	ПроксиСервиса(Прокси
// +++ввв 30.08.2016 г.
	, Таймаут, СтрОшибка
// ---ввв 30.08.2016 г.
	);
	Если Прокси = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	// Проверяем на конкретных данных
	ДанныеКонтрагента = Новый Структура();
	ДанныеКонтрагента.Вставить("ИНН", "7709860400");
	ДанныеКонтрагента.Вставить("КПП", "770901001");
	мДатаЗапросаКСервисуИФНС=ДатаСтрокой(ТекущаяДатаСеанса());
	ДанныеКонтрагента.Вставить("Дата", ДатаСтрокой(ТекущаяДатаСеанса()));
// +++ввв 13.09.2016 г.
	ДанныеКонтрагента.Вставить("Состояние", Неопределено);
// ---ввв 13.09.2016 г.
	Параметры 			= ПараметрыРаботыСервиса();
	ЗапросФабрикиXDTO 	= Прокси.ФабрикаXDTO.Тип(
		Параметры.ПространствоИменОтвета, 
		Параметры.ИмяТипаЗапросаФабрикиXDTO);
	WSЗапрос = Прокси.ФабрикаXDTO.Создать(ЗапросФабрикиXDTO);
	ДобавитьКонтрагентаВЗапросКСервису(
		WSЗапрос, 
		Прокси,
		ДанныеКонтрагента, СтрОшибка);
	NdsResponse = ОтветСервисаФНС(Прокси, WSЗапрос);
	Если NdsResponse = Неопределено Тогда
		Возврат "";
	Иначе
		йДата=NdsResponse.DTActFL;
		Если Сред(NdsResponse.DTActFL,7,4)+Сред(NdsResponse.DTActFL,4,2)+Сред(NdsResponse.DTActFL,1,2)>
			 Сред(NdsResponse.DTActUL,7,4)+Сред(NdsResponse.DTActUL,4,2)+Сред(NdsResponse.DTActUL,1,2) Тогда
			йДата=NdsResponse.DTActUL;
		КонецЕсли;
		Возврат йДата;
	КонецЕсли;
КонецФункции

Процедура ДобавитьКонтрагентаВЗапросКСервису(WSЗапрос, Прокси, ДанныеКонтрагента
// +++ввв 30.08.2016 г.
	,СтрОшибка
// ---ввв 30.08.2016 г.
	)
	Попытка
		Параметры = ПараметрыРаботыСервиса();
		КонтрагентФабрикиXDTO = Прокси.ФабрикаXDTO.Тип(
			Параметры.ПространствоИменОтвета, 
			Параметры.ИмяТипаКонтрагентаФабрикиXDTO);
		WSКонтрагент = Прокси.ФабрикаXDTO.Создать(КонтрагентФабрикиXDTO);
		// Указываем ИНН, КПП и Дату
		WSКонтрагент.INN = ДанныеКонтрагента.ИНН;
		Если ЗначениеЗаполнено(ДанныеКонтрагента.КПП) Тогда
			WSКонтрагент.KPP = ДанныеКонтрагента.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Дата)Тогда
			Если ТипЗнч(ДанныеКонтрагента.Дата)=Тип("Строка") Тогда
				йДата=ДанныеКонтрагента.Дата;
			Иначе
				йДата=ДатаСтрокой(ДанныеКонтрагента.Дата);
			КонецЕсли;
			WSКонтрагент.DT = йДата;
		КонецЕсли;
		// Добавляем данные по контрагенту в список на проверку.
		WSЗапрос.NP.Добавить(WSКонтрагент);
		ДанныеКонтрагента.Состояние = Неопределено;
	Исключение
// +++ввв 13.09.2016 г.
		//ИнформацияОбОшибке = ИнформацияОбОшибке();
// ---ввв 13.09.2016 г.
		ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных;
// +++ввв 13.09.2016 г.
		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Формирование данных для обращения к сервису ФНС'"),
		//	УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		//СтрОшибка=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
// ---ввв 13.09.2016 г.
	КонецПопытки; 
КонецПроцедуры

Функция ОтветСервисаФНС(Прокси, WSЗапрос)
	// Получаем результат проверки от сервиса.
	Попытка
		NdsResponse = Прокси.NdsRequest2(WSЗапрос);
	Исключение
		// Страхуемся от ошибки "Timeout was reached".
// +++ввв 13.09.2016 г.
		//	ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.NdsRequest2'"),
		//	УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
// ---ввв 13.09.2016 г.
		NdsResponse = Неопределено;
	КонецПопытки;
	Возврат NdsResponse;
КонецФункции

Функция СостояниеНаОсновеОтветаСервиса(Ответ)
// +++ввв 26.09.2016 г.
	//Если Ответ = "0" ИЛИ Ответ = "2" Тогда
	Если Ответ = "0" Тогда
// ---ввв 26.09.2016 г.
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС;
	ИначеЕсли Ответ = "1" Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП;
	ИначеЕсли Ответ = "3" Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС;
	ИначеЕсли Ответ = "4" Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентОтсутствуетВБазеФНС;
	ИначеЕсли Ответ = "5" Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.НеверныйИНН;
	ИначеЕсли Ответ = "6" Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.НевернаяДлинаИНН;
	ИначеЕсли Ответ = "7" Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.НевернаяДлинаКПП;
	ИначеЕсли Ответ = "8" Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.НедопустимыеСимволыВИНН;
	ИначеЕсли Ответ = "9" Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.НедопустимыеСимволыВКПП;
	ИначеЕсли Ответ = "10" Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.ИПНеМожетИметьКПП;
	ИначеЕсли Ответ = "11" Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.НекорректныйФорматДаты;
	ИначеЕсли Ответ = "12" Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.НевернаяДата;
	Иначе
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.ОшибкаОбработкиЗапроса;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

// +++ввв 13.09.2016 г.
Функция УточнениеСостоянияНаОсновеВторогоОтветаСервиса(КПП="", ОтветСКПП=Неопределено, ОтветБезКПП=Неопределено)
	Если ОтветСКПП=Неопределено Тогда
		Состояние = Неопределено;
	ИначеЕсли ОтветСКПП=Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС Тогда
		Состояние = ОтветСКПП;
	ИначеЕсли ПустаяСтрока(КПП) И
			  ОтветСКПП=Перечисления.ttk_СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЗарегистрированВБазеФНСНоНеДействует;
	ИначеЕсли ОтветСКПП=Перечисления.ttk_СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП И
			  ОтветБезКПП=Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЗарегистрированВБазеФНСНоУказанНеверныйКПП;
	ИначеЕсли ОтветБезКПП=Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС Тогда
		Состояние = ОтветСКПП;
	ИначеЕсли ОтветСКПП=Перечисления.ttk_СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП И
			  ОтветБезКПП=Перечисления.ttk_СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЗарегистрированВБазеФНСНоНеДействует;
	ИначеЕсли ОтветСКПП=Перечисления.ttk_СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС И
			  ОтветБезКПП=Перечисления.ttk_СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС Тогда
		Состояние = Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЗарегистрированВБазеФНСНоУказанНеверныйКПП;
	Иначе
		Состояние = ОтветБезКПП;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция ПравильныйИНН(ИНН)
	Если СтрДлина(ИНН)<>10 И СтрДлина(ИНН)<>12 Тогда
		Возврат "";
	КонецЕсли;
	Множители="26139248357";
	КолРазрядов=?(СтрДлина(ИНН)=10,1,2);
	ИНН0=Лев(ИНН,8+КолРазрядов);
	Для йй=1 По КолРазрядов Цикл
		КонтрСумма=0;
		ДлинаСтроки=7+КолРазрядов+йй;
		Для уу=1 По ДлинаСтроки Цикл
			КонтрСумма=КонтрСумма+((Число(Сред(Множители,уу-ДлинаСтроки+11,1))+1)*(Число(Сред(ИНН0,уу,1))));
		КонецЦикла;
		КонтрСумма=КонтрСумма-(Цел(КонтрСумма/11)*11);
		КонтрСумма=КонтрСумма-(Цел(КонтрСумма/10)*10);
		ИНН0=ИНН0+Строка(КонтрСумма);
	КонецЦикла;
	Возврат ИНН0;
КонецФункции

Функция ПроверитьИННиКПП(йИНН="", йКПП="")
	ФлагОшибки=Ложь;
	Для йй=1 По СтрДлина(йИНН) Цикл
		Если Найти("1234567890",Сред(йИНН,йй,1))=0 Тогда
			ФлагОшибки=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ФлагОшибки Тогда
		Возврат Перечисления.ttk_СостоянияСуществованияКонтрагента.НедопустимыеСимволыВИНН;
	КонецЕсли;
// +++ввв 26.09.2016 г.
	//Если ПустаяСтрока(йИНН) Тогда
	//	Возврат Перечисления.ttk_СостоянияСуществованияКонтрагента.ПустойИННИлиКПП;
	//КонецЕсли;
// ---ввв 26.09.2016 г.
	Если СтрДлина(йИНН)<>10 И СтрДлина(йИНН)<>12 Тогда
		Возврат Перечисления.ttk_СостоянияСуществованияКонтрагента.НевернаяДлинаИНН;
	КонецЕсли;
	ФлагОшибки=Ложь;
	Для йй=1 По СтрДлина(йКПП) Цикл
		Если Найти("1234567890",Сред(йКПП,йй,1))=0 Тогда
			ФлагОшибки=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ФлагОшибки Тогда
		Возврат Перечисления.ttk_СостоянияСуществованияКонтрагента.НедопустимыеСимволыВКПП;
	ИначеЕсли йКПП="" Тогда
	ИначеЕсли Число(йКПП)=0 Тогда
		йКПП="";
	КонецЕсли;
	Если СтрДлина(йКПП)<>9 И СтрДлина(йИНН)=10 Тогда
		Возврат Перечисления.ttk_СостоянияСуществованияКонтрагента.НевернаяДлинаКПП;
	КонецЕсли;
	Если СтрДлина(йКПП)>0 И СтрДлина(йИНН)=12 Тогда
		Возврат Перечисления.ttk_СостоянияСуществованияКонтрагента.ИПНеМожетИметьКПП;
	КонецЕсли;
	Если ПравильныйИНН(йИНН)<>йИНН Тогда
		Возврат Перечисления.ttk_СостоянияСуществованияКонтрагента.НеверныйИНН;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
// ---ввв 13.09.2016 г.

Функция ПроверкаКонтрагентаПоИННиКППнаИФНС(ИНН, КПП, СтатусОтвета=Неопределено) Экспорт
// +++ввв 13.09.2016 г.
	йИНН=СокрЛП(""+ИНН);
	йКПП=СокрЛП(""+КПП);
	йСтатус=ПроверитьИННиКПП(йИНН,йКПП);
	Если йСтатус<>Неопределено Тогда
		СтатусОтвета = йСтатус;
		Возврат "";
	КонецЕсли;
// ---ввв 13.09.2016 г.
// +++ввв 30.08.2016 г.
	СтрОшибка="";
// ---ввв 30.08.2016 г.
	ДатаЗапроса=ЕстьДоступКВебСервисуФНС(СтрОшибка);
	Если ПустаяСтрока(ДатаЗапроса) Тогда
		Возврат СтрОшибка;
	КонецЕсли;
	Прокси = Неопределено;
	ПроксиСервиса(Прокси,,СтрОшибка);
// +++ввв 30.08.2016 г.
	Если Прокси = Неопределено Тогда
		Возврат СтрОшибка;
	КонецЕсли;
// ---ввв 30.08.2016 г.
	ДанныеКонтрагента = Новый Структура();
	ДанныеКонтрагента.Вставить("ИНН", йИНН);
	ДанныеКонтрагента.Вставить("КПП", йКПП);
	ДанныеКонтрагента.Вставить("Дата", ДатаЗапроса);
	ДанныеКонтрагента.Вставить("Состояние", Неопределено);
	Параметры 			= ПараметрыРаботыСервиса();
	ЗапросФабрикиXDTO 	= Прокси.ФабрикаXDTO.Тип(Параметры.ПространствоИменОтвета, Параметры.ИмяТипаЗапросаФабрикиXDTO);
	WSЗапрос = Прокси.ФабрикаXDTO.Создать(ЗапросФабрикиXDTO);
	ДобавитьКонтрагентаВЗапросКСервису(WSЗапрос, Прокси, ДанныеКонтрагента, СтрОшибка);
	Если ДанныеКонтрагента.Состояние<>Неопределено Тогда
		СтатусОтвета=ДанныеКонтрагента.Состояние;
		Возврат "";
	КонецЕсли;
	NdsResponse = ОтветСервисаФНС(Прокси, WSЗапрос);
	СтрВозврата="";
	Если NdsResponse = Неопределено Тогда
		Возврат "Нет ответа от сервиса ИФНС.";
	Иначе
		Попытка
			СтатусОтвета=СостояниеНаОсновеОтветаСервиса(NdsResponse.NP[0].State);
		Исключение
			СтрВозврата=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
// +++ввв 23.01.2017 г.
	Если ПустаяСтрока(СтрВозврата) Тогда
		Если СтатусОтвета<>Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС Тогда
			ДанныеКонтрагента = Новый Структура();
			ДанныеКонтрагента.Вставить("ИНН", йИНН);
			ДанныеКонтрагента.Вставить("КПП", "");
			ДанныеКонтрагента.Вставить("Дата", ДатаЗапроса);
			ДанныеКонтрагента.Вставить("Состояние", Неопределено);
			Параметры 			= ПараметрыРаботыСервиса();
			ЗапросФабрикиXDTO 	= Прокси.ФабрикаXDTO.Тип(Параметры.ПространствоИменОтвета, Параметры.ИмяТипаЗапросаФабрикиXDTO);
			WSЗапрос = Прокси.ФабрикаXDTO.Создать(ЗапросФабрикиXDTO);
			ДобавитьКонтрагентаВЗапросКСервису(WSЗапрос, Прокси, ДанныеКонтрагента, СтрОшибка);
			Если ДанныеКонтрагента.Состояние<>Неопределено Тогда
				СтатусОтвета=ДанныеКонтрагента.Состояние;
				Возврат "";
			КонецЕсли;
			NdsResponse = ОтветСервисаФНС(Прокси, WSЗапрос);
			СтрВозврата="";
			Если NdsResponse = Неопределено Тогда
				СтатусОтвета = Неопределено;
				Возврат "Нет ответа от сервиса ИФНС.";
			Иначе
				Попытка
					//СтатусОтвета=УточнениеСостоянияНаОсновеВторогоОтветаСервиса(йКПП,СтатусОтвета,
					//						СостояниеНаОсновеОтветаСервиса(NdsResponse.NP[0].State));
					СтатусОтвета=СостояниеНаОсновеОтветаСервиса(NdsResponse.NP[0].State);
				Исключение
					СтатусОтвета = Неопределено;
					СтрВозврата=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
// ---ввв 23.01.2017 г.
	Возврат СтрВозврата;
КонецФункции
// ---ввв 13.08.2016 г. 

// +++ввв 22.08.2016 г.
Процедура ОбработатьОтветСервиса(NdsResponse, ДанныеКонтрагентовДляПроверкиСервисом, СтрОшибка)
	Для ИндексТекущегоКонтрагента = 0 По ДанныеКонтрагентовДляПроверкиСервисом.Количество()-1 Цикл 
		ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
		Если ДанныеКонтрагента.Состояние <> Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных Тогда
			Попытка
				// Ответ от сервиса - возвращается Статус
				ОтветПоКонтрагенту 			= NdsResponse.NP[ИндексТекущегоКонтрагента];
				ДанныеКонтрагента.Состояние	= СостояниеНаОсновеОтветаСервиса(ОтветПоКонтрагенту.State);
			Исключение
				// Если нет ответа то возвращается Строка ошибки
				СтрОшибка=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПроверкаКонтрагентовСпискомНаИФНС(АдресХранилища=NULL) Экспорт
	РазмерПорции = 10000;
	Если АдресХранилища=NULL Тогда
		Возврат РазмерПорции;
	КонецЕсли;
	ТаблКонтров=ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(ТаблКонтров) <> Тип("ТаблицаЗначений") Тогда
		Возврат "Неверный формат передаваемой таблицы для проверки";
	КонецЕсли;
	Если ТаблКонтров.Колонки.Найти("ИНН")=Неопределено Тогда
		Возврат "Обязательный параметр ""ИНН"" отсутствует";
	КонецЕсли;
	Если ТаблКонтров.Колонки.Найти("КПП")=Неопределено Тогда
		Возврат "Обязательный параметр ""КПП"" отсутствует";
	КонецЕсли;
	Если ТаблКонтров.Колонки.Найти("Дата")=Неопределено Тогда
		Возврат "Обязательный параметр ""Дата"" отсутствует";
	КонецЕсли;
	Если ТаблКонтров.Колонки.Найти("Состояние")=Неопределено Тогда
		Возврат "Обязательный параметр ""Состояние"" отсутствует";
	КонецЕсли;
	Если ТаблКонтров.Количество()=0 Тогда
		Возврат "Размер порции проверки равен нулю";
	КонецЕсли;
	Если ТаблКонтров.Количество()>РазмерПорции Тогда
		Возврат "Размер порции проверки превышает максимум - "+РазмерПорции;
	КонецЕсли;
// +++ввв 30.08.2016 г.
	СтрОшибка="";
// ---ввв 30.08.2016 г.
	ДатаЗапроса=ЕстьДоступКВебСервисуФНС(СтрОшибка);
	Если ПустаяСтрока(ДатаЗапроса) Тогда
		Возврат СтрОшибка;
	КонецЕсли;
	Прокси = Неопределено;
	ПроксиСервиса(Прокси
// +++ввв 30.08.2016 г.
	,,СтрОшибка
// ---ввв 30.08.2016 г.
	);
// +++ввв 30.08.2016 г.
	Если Прокси = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
// ---ввв 30.08.2016 г.
	Параметры 		  = ПараметрыРаботыСервиса();
	ЗапросФабрикиXDTO = Прокси.ФабрикаXDTO.Тип(Параметры.ПространствоИменОтвета, 
											   Параметры.ИмяТипаЗапросаФабрикиXDTO);
	WSЗапрос = Прокси.ФабрикаXDTO.Создать(ЗапросФабрикиXDTO);
	ОтправленныеКонтры=Новый ТаблицаЗначений;
	ОтправленныеКонтры.Колонки.Добавить("Индекс",);
	ОтправленныеКонтры.Колонки.Добавить("Состояние",);
	Для ИндексТекущегоКонтрагента = 0 По ТаблКонтров.Количество()-1 Цикл
		Если НЕ ЗначениеЗаполнено(ТаблКонтров[ИндексТекущегоКонтрагента].Дата) Тогда
			ТаблКонтров[ИндексТекущегоКонтрагента].Дата=ДатаЗапроса;
		КонецЕсли;
		ТаблКонтров[ИндексТекущегоКонтрагента].ИНН=СокрЛП(""+ТаблКонтров[ИндексТекущегоКонтрагента].ИНН);
		ТаблКонтров[ИндексТекущегоКонтрагента].КПП=СокрЛП(""+ТаблКонтров[ИндексТекущегоКонтрагента].КПП);
		//Сообщить(""+ИндексТекущегоКонтрагента+" - "+ТаблКонтров[ИндексТекущегоКонтрагента].КПП);
		ТаблКонтров[ИндексТекущегоКонтрагента].Состояние=ПроверитьИННиКПП(ТаблКонтров[ИндексТекущегоКонтрагента].ИНН,ТаблКонтров[ИндексТекущегоКонтрагента].КПП);
		Если ТаблКонтров[ИндексТекущегоКонтрагента].Состояние=Неопределено Тогда
			йКонтра=ОтправленныеКонтры.Добавить();
			йКонтра.Индекс=ИндексТекущегоКонтрагента;
			ДобавитьКонтрагентаВЗапросКСервису(WSЗапрос,Прокси,ТаблКонтров[ИндексТекущегоКонтрагента],СтрОшибка); 
			йКонтра.Состояние=ТаблКонтров[ИндексТекущегоКонтрагента].Состояние;
		КонецЕсли;
	КонецЦикла;
	Если WSЗапрос.NP.Количество()>0 Тогда
		NdsResponse = ОтветСервисаФНС(Прокси, WSЗапрос);
		Если NdsResponse <> Неопределено Тогда
			ОбработатьОтветСервиса(NdsResponse, ОтправленныеКонтры, СтрОшибка);
			Если НЕ ПустаяСтрока(СтрОшибка) Тогда
				Возврат СтрОшибка;
			КонецЕсли;
// ---ввв 30.08.2016 г.
// +++ввв 13.09.2016 г.
// +++ввв 23.01.2017 г.
			Параметры 		  = ПараметрыРаботыСервиса();
			ЗапросФабрикиXDTO = Прокси.ФабрикаXDTO.Тип(Параметры.ПространствоИменОтвета, 
													   Параметры.ИмяТипаЗапросаФабрикиXDTO);
			WSЗапрос = Прокси.ФабрикаXDTO.Создать(ЗапросФабрикиXDTO);
			ПовторноОтправленныеКонтры=Новый ТаблицаЗначений;
			ПовторноОтправленныеКонтры.Колонки.Добавить("Индекс",);
			ПовторноОтправленныеКонтры.Колонки.Добавить("ИНН",);
			ПовторноОтправленныеКонтры.Колонки.Добавить("КПП",);
			ПовторноОтправленныеКонтры.Колонки.Добавить("Дата",);
			ПовторноОтправленныеКонтры.Колонки.Добавить("Состояние",);
// ---ввв 23.01.2017 г.
			Для ИндексТекущегоКонтрагента = 0 По ОтправленныеКонтры.Количество()-1 Цикл
				ПервыйИндекс=ОтправленныеКонтры[ИндексТекущегоКонтрагента].Индекс;
				ТаблКонтров[ПервыйИндекс].Состояние=ОтправленныеКонтры[ИндексТекущегоКонтрагента].Состояние;
// +++ввв 23.01.2017 г.
				Если ОтправленныеКонтры[ИндексТекущегоКонтрагента].Состояние<>Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС Тогда
					ЙПовтор=ПовторноОтправленныеКонтры.Добавить();
					йПовтор.Индекс=ИндексТекущегоКонтрагента;
					йПовтор.ИНН=ТаблКонтров[ПервыйИндекс].ИНН;
					йПовтор.КПП="";
					йПовтор.Дата=ТаблКонтров[ПервыйИндекс].Дата;
					ДобавитьКонтрагентаВЗапросКСервису(WSЗапрос,Прокси,йПовтор,СтрОшибка); 
				КонецЕсли;
// ---ввв 23.01.2017 г.
			КонецЦикла;
// +++ввв 23.01.2017 г.
			Если WSЗапрос.NP.Количество()>0 Тогда
				NdsResponse = ОтветСервисаФНС(Прокси, WSЗапрос);
				Если NdsResponse <> Неопределено Тогда
					ОбработатьОтветСервиса(NdsResponse, ПовторноОтправленныеКонтры, СтрОшибка);
					Если НЕ ПустаяСтрока(СтрОшибка) Тогда
						Возврат СтрОшибка;
					КонецЕсли;
					Для ИндексТекущегоКонтрагента = 0 По ПовторноОтправленныеКонтры.Количество()-1 Цикл
						ПервыйИндекс=ПовторноОтправленныеКонтры[ИндексТекущегоКонтрагента].Индекс;
						ВторойИндекс=ОтправленныеКонтры[ПервыйИндекс].Индекс;
						йСтатусСКПП=ОтправленныеКонтры[ПервыйИндекс].Состояние;
						йСтатусБезКПП=ПовторноОтправленныеКонтры[ИндексТекущегоКонтрагента].Состояние;
						йКПП=ТаблКонтров[ВторойИндекс].КПП;
						//ТаблКонтров[ВторойИндекс].Состояние=УточнениеСостоянияНаОсновеВторогоОтветаСервиса(йКПП,йСтатусСКПП,йСтатусБезКПП);
						ТаблКонтров[ВторойИндекс].Состояние=йСтатусБезКПП;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
// ---ввв 23.01.2017 г.
// ---ввв 13.09.2016 г.
		КонецЕсли;
	КонецЕсли;
	ПоместитьВоВременноеХранилище(ТаблКонтров,АдресХранилища);
	Возврат "";
КонецФункции
// ---ввв 22.08.2016 г.
// +++ввв 14.09.2016 г.

Процедура ОбновитьСтатусВИФНСКонтрагента(Контрагент=Неопределено,СтатусСтарый=Неопределено,СтатусНовый=Неопределено
// +++ввв 27.09.2016 г.
	,ФИОКтоОбновил="робот_ФНС"
// ---ввв 27.09.2016 г.
	) Экспорт
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		СтатусНовый=Неопределено;
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Контрагент)<>Тип("СправочникСсылка.Контрагенты") И
// +++ввв 27.09.2016 г.
		 //ТипЗнч(Контрагент)<>Тип("СправочникОбъект.Контрагенты") Тогда
		 ТипЗнч(Контрагент)<>Тип("СправочникОбъект.Контрагенты") И
		 ТипЗнч(Контрагент)<>Тип("СправочникСсылка.абс_Продавец") И
		 ТипЗнч(Контрагент)<>Тип("СправочникОбъект.абс_Продавец") Тогда
// ---ввв 27.09.2016 г.
		СтатусНовый=Неопределено;
		Возврат;
	КонецЕсли;
	Если СтатусСтарый=Неопределено Тогда
		Запрос=Новый Запрос("ВЫБРАТЬ
		                    |	ttk_ПроверкаКонтрагентовНаСервисеИФНССрезПоследних.СтатусКонтрагентаВИФНС
	    	                |ИЗ
	        	            |	РегистрСведений.ttk_ПроверкаКонтрагентовНаСервисеИФНС.СрезПоследних КАК ttk_ПроверкаКонтрагентовНаСервисеИФНССрезПоследних
	            	        |ГДЕ
	                	    |	ttk_ПроверкаКонтрагентовНаСервисеИФНССрезПоследних.Контрагент = &Контрагент");
		Запрос.УстановитьПараметр("Контрагент", Контрагент.Ссылка);
		СтатусПоследний=Запрос.Выполнить().Выбрать();
		Если СтатусПоследний.Следующий() Тогда
			СтатусСтарый=СтатусПоследний.СтатусКонтрагентаВИФНС;
		КонецЕсли;
	КонецЕсли;
// +++ввв 12.01.2017 г.
	//Если ЗначениеЗаполнено(СтатусНовый) Тогда
	Если ЗначениеЗаполнено(СтатусНовый) И СтатусНовый <> Перечисления.ttk_СостоянияСуществованияКонтрагента.ОшибкаОбработкиЗапроса Тогда
// ---ввв 12.01.2017 г.
		Если СтатусСтарый<>СтатусНовый Тогда
			НаборЗаписей=РегистрыСведений.ttk_ПроверкаКонтрагентовНаСервисеИФНС.СоздатьНаборЗаписей();
			ДатаПроверки=ТекущаяДата();
			НаборЗаписей.Отбор.Контрагент.Установить(Контрагент.Ссылка);
			НаборЗаписей.Отбор.Период.Установить(ДатаПроверки);
			НоваяЗапись=НаборЗаписей.Добавить();
			НоваяЗапись.Контрагент=Контрагент.Ссылка;
			НоваяЗапись.Период=ДатаПроверки;
			НоваяЗапись.СтатусКонтрагентаВИФНС=СтатусНовый;
// +++ввв 27.09.2016 г.
			НоваяЗапись.ФИОКтоОбновил=ФИОКтоОбновил;
			НоваяЗапись.ИНН=Контрагент.ИНН;
			НоваяЗапись.КПП=Контрагент.КПП;
// ---ввв 27.09.2016 г.
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
// ---ввв 14.09.2016 г.

// {{ТТК Сладков А. Заявка №7749021 — 22.09.2016 начало
Функция ПолучитьСтроковойСтатусИФНСКонтрагента(Контрагент) Экспорт
	СтатусКонтрагента="";
	Запрос = новый запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ttk_ПроверкаКонтрагентовНаСервисеИФНССрезПоследних.Контрагент,
	              |	ttk_ПроверкаКонтрагентовНаСервисеИФНССрезПоследних.СтатусКонтрагентаВИФНС
	              |ИЗ
	              |	РегистрСведений.ttk_ПроверкаКонтрагентовНаСервисеИФНС.СрезПоследних(, Контрагент = &Контрагент) КАК ttk_ПроверкаКонтрагентовНаСервисеИФНССрезПоследних";
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Выборка = ЗАпрос.Выполнить().Выбрать();
	Если  Выборка.Следующий() Тогда
		Возврат Строка(Выборка.СтатусКонтрагентаВИФНС);
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
// }}ТТК Сладков А. Заявка №7749021 — 22.09.2016 окончание

// +++ввв 22.05.2017 г.
Процедура ИсполнительФоновогоЗаданияЧерезВнешнююОбработку(ВнешнийМодульИсполнения=Неопределено, НаименованиеФоновогоЗадания=Неопределено, НомерПотока=0) Экспорт
	Если ВнешнийМодульИсполнения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ВнешнийМодульИсполнения) Тогда
		Возврат;
	КонецЕсли;
	Если НаименованиеФоновогоЗадания=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(НаименованиеФоновогоЗадания) Тогда
		Возврат;
	КонецЕсли;
	Если НомерПотока<=0 Тогда
		Возврат;
	КонецЕсли;
// вызов внешней процедуры ВнешнийМодульИсполнения и передача управления процедуре ИсполнительПотокаЗаданий
// с параметром НомерПотока
	йВнешняяОбработка = Справочники.ВнешниеОбработки.НайтиПоНаименованию(ВнешнийМодульИсполнения);
	Если йВнешняяОбработка=Справочники.ВнешниеОбработки.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	ДвоичныеДанные = йВнешняяОбработка.ХранилищеВнешнейОбработки.Получить();
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяФайла);
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла);
	Попытка
		ВнешняяОбработка.ИсполнительПотокаЗаданий(НомерПотока);
	Исключение
	КонецПопытки;
КонецПроцедуры
// ---ввв 22.05.2017 г.
