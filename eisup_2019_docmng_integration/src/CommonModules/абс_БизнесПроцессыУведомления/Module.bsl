Процедура ЗарегестрироватьУведомление(БПСсылка, ТочкаМаршрута, СтатусНовый = Неопределено, ОборудованиеПоОЗК = Ложь) Экспорт
	
	// Start КТТК Ермолов Е.Л.  23.07.2014 Внутренний проект отправка уведомлений
	Если НЕ Константы.абс_ОтправкаУведомленийБПВключена.Получить() Тогда
// КТТК Ермолов Е.Л.  30.07.2014 Внутренний проект отправка уведомлений //		 И ТочкаМаршрута <> БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.НалоговыйКонтроль  //АБС Коломиец 13891
// КТТК Ермолов Е.Л.  30.07.2014 Внутренний проект отправка уведомлений //		 И НЕ ОборудованиеПоОЗК Тогда 
		Возврат;
	КонецЕсли;
	// Stop КТТК Ермолов Е.Л.  30.07.2014
	ЗапросНастройка = Новый Запрос(
	"ВЫБРАТЬ
	|	абс_НастройкаОтправкиУведомленийБП.ВидБП,
	|	абс_НастройкаОтправкиУведомленийБП.ТочкаМаршрутаБП,
	|	абс_НастройкаОтправкиУведомленийБП.СтатусНовый,
	|	абс_НастройкаОтправкиУведомленийБП.ОтправкаОтветственным,
	|	абс_НастройкаОтправкиУведомленийБП.ОтправкаИнициатору
	|ИЗ
	|	РегистрСведений.абс_НастройкаОтправкиУведомленийБП КАК абс_НастройкаОтправкиУведомленийБП
	|ГДЕ
	|	абс_НастройкаОтправкиУведомленийБП.ВидБП = &ВидБП
	|	И абс_НастройкаОтправкиУведомленийБП.ТочкаМаршрутаБП = &ТочкаМаршрутаБП
	|	И (абс_НастройкаОтправкиУведомленийБП.ОтправкаОтветственным
	|			ИЛИ абс_НастройкаОтправкиУведомленийБП.ОтправкаИнициатору)");
	
	ВидБП = ПолучитьВидБП(БПСсылка);
	
	ЗапросНастройка.УстановитьПараметр("ВидБП", ПолучитьВидБП(БПСсылка));
	ЗапросНастройка.УстановитьПараметр("ТочкаМаршрутаБП", ТочкаМаршрута);
	
	ВыборкаНастройка = ЗапросНастройка.Выполнить().Выбрать();
	
	Если ВыборкаНастройка.Количество() > 0 Тогда
		
		НаборУведомления = РегистрыСведений.абс_ОтправкаУведомленийБП.СоздатьНаборЗаписей();
		//АБС_ПС Вставка
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.абс_ОтправкаУведомленийБП");
		ЭлементБлокировки.УстановитьЗначение("БП", БПСсылка);
		ЭлементБлокировки.УстановитьЗначение("ТочкаМаршрута", ТочкаМаршрута);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		//\\АБС_ПС
		
		НаборУведомления.Отбор.БП.Установить(БПСсылка);
		НаборУведомления.Отбор.ТочкаМаршрута.Установить(ТочкаМаршрута);
		
		НаборУведомления.Прочитать();
		
		ЗаписьУведомления = НаборУведомления.Добавить();
		
		ЗаписьУведомления.Период = абс_СерверныеФункции.ПолучитьДатуСервера();		
		ЗаписьУведомления.БП 					= БПСсылка;
		ЗаписьУведомления.ТочкаМаршрута 		= ТочкаМаршрута;
		ЗаписьУведомления.СтатусНовый 			= СтатусНовый;
		
		ЗаписьУведомления.ВидБП					= ВидБП;
		ЗаписьУведомления.УведомлениеОтправлено = Ложь;
		
		ЗаписьУведомления.Ответственный			= глЗначениеПеременной("глТекущийПользователь");
		// Start КТТК Ермолов Е.Л.  23.07.2014 Внутренний проект отправка уведомлений
		ВыборкаНастройка.Следующий();
		ЗаписьУведомления.ОтправкаИнициатору = ВыборкаНастройка.ОтправкаИнициатору;
		ЗаписьУведомления.ОтправкаОтветственным = ВыборкаНастройка.ОтправкаОтветственным;
		
		// Stop КТТК Ермолов Е.Л.  23.07.2014
		НаборУведомления.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура регистрации отправки уведомлений ППД
// по ППД уведомления отправляются только инициаторам ППД
Процедура ЗарегестрироватьУведомлениеППД(ППДСсылка, СтатусНовый) Экспорт
	
	Если НЕ Константы.абс_ОтправкаУведомленийБПВключена.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если абс_ПроцедурыСПовторнымВызовом.ПолучитьМассивТиповППД().Найти(ТипЗнч(ППДСсылка)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросНастройка = Новый Запрос(
	"ВЫБРАТЬ
	|	абс_НастройкаОтправкиУведомленийБП.ВидБП,
	|	абс_НастройкаОтправкиУведомленийБП.ТочкаМаршрутаБП,
	|	абс_НастройкаОтправкиУведомленийБП.СтатусНовый,
	|	абс_НастройкаОтправкиУведомленийБП.ОтправкаОтветственным,
	|	абс_НастройкаОтправкиУведомленийБП.ОтправкаИнициатору
	|ИЗ
	|	РегистрСведений.абс_НастройкаОтправкиУведомленийБП КАК абс_НастройкаОтправкиУведомленийБП
	|ГДЕ
	|	абс_НастройкаОтправкиУведомленийБП.ВидБП = &ВидБП
// КТТК Ермолов Е.Л.  30.07.2014 Внутренний проект отправка уведомлений //|	И абс_НастройкаОтправкиУведомленийБП.ОтправкаИнициатору 		
	|	И абс_НастройкаОтправкиУведомленийБП.Статус = &Статус
	|	И (абс_НастройкаОтправкиУведомленийБП.ОтправкаОтветственным
	|			ИЛИ абс_НастройкаОтправкиУведомленийБП.ОтправкаИнициатору)");
	
	ЗапросНастройка.УстановитьПараметр("ВидБП"			, Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеПервичныхДокументов);
	ЗапросНастройка.УстановитьПараметр("Статус"			, СтатусНовый);
	
	ВыборкаНастройка = ЗапросНастройка.Выполнить().Выбрать();
	
	Если ВыборкаНастройка.Количество() > 0 Тогда
		
		НаборУведомления = РегистрыСведений.абс_ОтправкаУведомленийБП.СоздатьНаборЗаписей();
		
		НаборУведомления.Отбор.ДокументСсылка.Установить(ППДСсылка);
		
		НаборУведомления.Прочитать();
		
		ЗаписьУведомления = НаборУведомления.Добавить();
		
		ЗаписьУведомления.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
		ЗаписьУведомления.ВидБП 				= Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеПервичныхДокументов;
		ЗаписьУведомления.ДокументСсылка 		= ППДСсылка;
		ЗаписьУведомления.СтатусНовый 			= СтатусНовый;
		
		ЗаписьУведомления.УведомлениеОтправлено = Ложь;
		
		ЗаписьУведомления.Ответственный			= глЗначениеПеременной("глТекущийПользователь");
		
		Если НЕ ППДСсылка.Метаданные().Реквизиты.Найти("абс_ПричинаИзмененияСтатуса") = Неопределено Тогда
			ЗаписьУведомления.ПричинаИзмененияСтатуса = ППДСсылка.абс_ПричинаИзмененияСтатуса;
		КонецЕсли;
		// Start КТТК Ермолов Е.Л.  30.07.2014 Внутренний проект отправка уведомлений
		ВыборкаНастройка.Следующий();
		ЗаписьУведомления.ОтправкаИнициатору = ВыборкаНастройка.ОтправкаИнициатору;
		ЗаписьУведомления.ОтправкаОтветственным = ВыборкаНастройка.ОтправкаОтветственным;
		
		// Stop КТТК Ермолов Е.Л.  30.07.2014
		
		НаборУведомления.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры
//Процедура ЗафиксироватьОтправкуУведомления(СтрокаУведомления) Экспорт
Процедура ЗафиксироватьОтправкуУведомления(СтрокаУведомления, ПричинаСтатуса = Неопределено) Экспорт  // КТТК Ермолов Е.Л.  23.07.2014 Внутренний проект отправка уведомлений
	
	НаборУведомления = РегистрыСведений.абс_ОтправкаУведомленийБП.СоздатьНаборЗаписей();
	
	НаборУведомления.Отбор.ДокументСсылка 	.Установить(СтрокаУведомления.ДокументСсылка);
	НаборУведомления.Отбор.ВидБП			.Установить(СтрокаУведомления.ВидБП);
	НаборУведомления.Отбор.БП				.Установить(СтрокаУведомления.БП);
	НаборУведомления.Отбор.ТочкаМаршрута	.Установить(СтрокаУведомления.ТочкаМаршрутаБП);
	
	НаборУведомления.Отбор.Статус			.Установить(СтрокаУведомления.Статус);
	НаборУведомления.Отбор.СтатусНовый		.Установить(СтрокаУведомления.СтатусНовый);
	
	НаборУведомления.Прочитать();
	
	ЗаписьУведомления = НаборУведомления.Добавить();
	
	ЗаписьУведомления.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьУведомления.ДокументСсылка		= СтрокаУведомления.ДокументСсылка;
	ЗаписьУведомления.ВидБП					= СтрокаУведомления.ВидБП;
	ЗаписьУведомления.БП 					= СтрокаУведомления.БП;
	ЗаписьУведомления.ТочкаМаршрута 		= СтрокаУведомления.ТочкаМаршрутаБП;
	ЗаписьУВедомления.Статус 				= СтрокаУведомления.Статус;
	ЗаписьУведомления.СтатусНовый 			= СтрокаУведомления.СтатусНовый;
	
	ЗаписьУведомления.ПериодРегистрацииУведомления = СтрокаУведомления.Период;
	ЗаписьУведомления.УведомлениеОтправлено = Истина;
	// Start КТТК Ермолов Е.Л.  23.07.2014 Внутренний проект отправка уведомлений
	Если ЗначениеЗаполнено(ПричинаСтатуса) Тогда
		ЗаписьУведомления.ПричинаИзмененияСтатуса = ПричинаСтатуса;
	КонецЕсли;
	// Stop КТТК Ермолов Е.Л.  23.07.2014
	Попытка
		НаборУведомления.Записать();
	Исключение
		ЗаписьУведомления.Период = абс_СерверныеФункции.ПолучитьДатуСервера()+1;
		НаборУведомления.Записать();
	КонецПопытки;
	// Stop КТТК Ермолов Е.Л.  05.08.2014
	
	
КонецПроцедуры

// Start КТТК Ермолов Е.Л.  22.07.2014 Внутреннее задание ТТК

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОтправитьУведомленияПоИсполнителямЗадач()Экспорт
	
	НеВключенныеБП = Новый Массив;
//	НеВключенныеБП.Добавить(Тип("БизнесПроцессСсылка.абсЗаявкаВПоддержку"));
    ПользователиСemailРаботающие = Новый Запрос("ВЫБРАТЬ
                                                |	ВложенныйЗапрос.Пользователь,
                                                |	ПОДСТРОКА(ВложенныйЗапрос.Представление, 1, 100) КАК Почтовый
                                                |ИЗ
                                                |	(ВЫБРАТЬ
                                                |		Пользователи.Ссылка КАК Пользователь,
                                                |		ВЫБОР
                                                |			КОГДА Пользователи.абс_Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
                                                |					И Пользователи.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
                                                |				ТОГДА ЛОЖЬ
                                                |			ИНАЧЕ ВЫБОР
                                                |					КОГДА Работающие.Объект ЕСТЬ NULL 
                                                |						ТОГДА ЛОЖЬ
                                                |					ИНАЧЕ ИСТИНА
                                                |				КОНЕЦ
                                                |		КОНЕЦ КАК Работает,
                                                |		Работающие.Объект.Ссылка КАК Сотрудник,
                                                |		Пользователи.абс_Сотрудник КАК СотрудникПользователя,
                                                |		Майло.Представление КАК Представление
                                                |	ИЗ
                                                |		Справочник.Пользователи КАК Пользователи
                                                |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                                                |				абс_ИсторияСтатусовСотрудниковСрезПоследних.Объект КАК Объект
                                                |			ИЗ
                                                |				РегистрСведений.абс_ИсторияСтатусовСотрудников.СрезПоследних КАК абс_ИсторияСтатусовСотрудниковСрезПоследних
                                                |			ГДЕ
                                                |				абс_ИсторияСтатусовСотрудниковСрезПоследних.Статус В(&Статус)) КАК Работающие
                                                |			ПО Пользователи.абс_Сотрудник = Работающие.Объект
                                                |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                                                |				КонтактнаяИнформация.Объект КАК Объект,
                                                |				КонтактнаяИнформация.Представление КАК Представление
                                                |			ИЗ
                                                |				РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
                                                |			ГДЕ
                                                |				КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) КАК Майло
                                                |			ПО Пользователи.ФизЛицо = Майло.Объект
                                                |	ГДЕ
                                                |		НЕ Пользователи.ЭтоГруппа) КАК ВложенныйЗапрос
                                                |ГДЕ
                                                |	ВложенныйЗапрос.Работает
                                                |	И НЕ ВложенныйЗапрос.Представление ЕСТЬ NULL ");
												
	Статусы = Новый СписокЗначений;
	Статусы.Добавить(Перечисления.абс_СтатусыСотрудников.Работает);
	Статусы.Добавить(Перечисления.абс_СтатусыСотрудников.Согласование);
	Статусы.Добавить(Перечисления.абс_СтатусыСотрудников.ИзменениеИнформации);
	ПользователиСemailРаботающие.УстановитьПараметр("Статус",Статусы);
	ТаблицаПользователей  = ПользователиСemailРаботающие.Выполнить().Выгрузить();
	ПроверкаНаВыполненность = Новый Запрос("ВЫБРАТЬ
	                                       |	абс_ОтправкаУведомленийБПСрезПоследних.БП,
	                                       |	МАКСИМУМ(абс_ОтправкаУведомленийБПСрезПоследних.Период) КАК Период,
	                                       |	абс_ОтправкаУведомленийБПСрезПоследних.УведомлениеОтправлено
	                                       |ИЗ
	                                       |	РегистрСведений.абс_ОтправкаУведомленийБП.СрезПоследних(, ) КАК абс_ОтправкаУведомленийБПСрезПоследних
	                                       |ГДЕ
	                                       |	абс_ОтправкаУведомленийБПСрезПоследних.БП = &БП
	                                       |	И НЕ абс_ОтправкаУведомленийБПСрезПоследних.УведомлениеОтправлено
	                                       |
	                                       |СГРУППИРОВАТЬ ПО
	                                       |	абс_ОтправкаУведомленийБПСрезПоследних.БП,
	                                       |	абс_ОтправкаУведомленийБПСрезПоследних.УведомлениеОтправлено");

	ЗапросПроверкиРассылки = Новый Запрос("ВЫБРАТЬ
	                                    |	абсЗадачаДоговора.Исполнитель КАК Исполнитель
	                                    |ИЗ
	                                    |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                                    |ГДЕ
	                                    |	абсЗадачаДоговора.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	                                    |	И абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                                    |	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	                                    |	И абсЗадачаДоговора.Исполнитель = &Сформировавший
	                                    |
	                                    |ОБЪЕДИНИТЬ ВСЕ
	                                    |
	                                    |ВЫБРАТЬ
	                                    |	РолиИИсполнители.Исполнитель
	                                    |ИЗ
	                                    |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	                                    |		ПО абсЗадачаДоговора.Роль = РолиИИсполнители.Роль
	                                    |			И (ВЫБОР
	                                    |				КОГДА абсЗадачаДоговора.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	                                    |					ТОГДА абсЗадачаДоговора.ИнициаторБП.абс_Сотрудник.Организация
	                                    |				ИНАЧЕ абсЗадачаДоговора.Организация
	                                    |			КОНЕЦ = РолиИИсполнители.Организация)
	                                    |ГДЕ
	                                    |	абсЗадачаДоговора.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	                                    |	И НЕ абсЗадачаДоговора.Роль В (&РолиИсключения)
	                                    |	И абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                                    |	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	                                    |	И абсЗадачаДоговора.Исполнитель = &Сформировавший");					   
	ЗапросСпискаРассылки = Новый Запрос;									
	ЗапросСпискаРассылки.Текст = "ВЫБРАТЬ
	                             |	Пользователи.Пользователь КАК Пользователь,
	                             |	Пользователи.Почтовый
	                             |ПОМЕСТИТЬ ПользователиСМейл
	                             |ИЗ
	                             |	&ТаблицаС КАК Пользователи
	                             |
	                             |ИНДЕКСИРОВАТЬ ПО
	                             |	Пользователь
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                             |	абсЗадачаДоговора.Ссылка,
	                             |	абсЗадачаДоговора.Дата,
	                             |	абсЗадачаДоговора.БизнесПроцесс,
	                             |	абсЗадачаДоговора.ТочкаМаршрута,
	                             |	абсЗадачаДоговора.Наименование,
	                             |	абсЗадачаДоговора.Организация,
	                             |	абсЗадачаДоговора.ОбъектЗадачи,
	                             |	абсЗадачаДоговора.ВидЗадачи,
	                             |	абсЗадачаДоговора.ИнициаторБП,
	                             |	абсЗадачаДоговора.Комментарий,
	                             |	абсЗадачаДоговора.Исполнитель,
	                             |	абсЗадачаДоговора.Роль,
	                             |	ПользователиСМейл.Почтовый КАК епочта
	                             |ИЗ
	                             |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ ПользователиСМейл КАК ПользователиСМейл
	                             |		ПО абсЗадачаДоговора.Исполнитель = ПользователиСМейл.Пользователь
	                             |ГДЕ
	                             |	абсЗадачаДоговора.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	                             |	И абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                             |	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	                             |	И НЕ абсЗадачаДоговора.ПометкаУдаления
	                             |	И НЕ абсЗадачаДоговора.Выполнена
	                             |	И абсЗадачаДоговора.Исполнитель.абс_ОтправлятьУведомления = ЗНАЧЕНИЕ(Перечисление.абс_РежимОтправкиУведомлений.Отправлять)
	                             |	И НЕ ПользователиСМейл.Почтовый ЕСТЬ NULL 
	                             |
	                             |ОБЪЕДИНИТЬ ВСЕ
	                             |
	                             |ВЫБРАТЬ
	                             |	абсЗадачаДоговора.Ссылка,
	                             |	абсЗадачаДоговора.Дата,
	                             |	абсЗадачаДоговора.БизнесПроцесс,
	                             |	абсЗадачаДоговора.ТочкаМаршрута,
	                             |	абсЗадачаДоговора.Наименование,
	                             |	абсЗадачаДоговора.Организация,
	                             |	абсЗадачаДоговора.ОбъектЗадачи,
	                             |	абсЗадачаДоговора.ВидЗадачи,
	                             |	абсЗадачаДоговора.ИнициаторБП,
	                             |	абсЗадачаДоговора.Комментарий,
	                             |	РолиИИсполнители.Исполнитель,
	                             |	абсЗадачаДоговора.Роль,
	                             |	ПользователиСМейл.Почтовый
	                             |ИЗ
	                             |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	                             |			ЛЕВОЕ СОЕДИНЕНИЕ ПользователиСМейл КАК ПользователиСМейл
	                             |			ПО РолиИИсполнители.Исполнитель = ПользователиСМейл.Пользователь
	                             |		ПО абсЗадачаДоговора.Роль = РолиИИсполнители.Роль
	                             |			И (ВЫБОР
	                             |				КОГДА абсЗадачаДоговора.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	                             |					ТОГДА абсЗадачаДоговора.ИнициаторБП.абс_Сотрудник.Организация
	                             |				ИНАЧЕ абсЗадачаДоговора.Организация
	                             |			КОНЕЦ = РолиИИсполнители.Организация)
	                             |ГДЕ
	                             |	абсЗадачаДоговора.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	                             |	И НЕ абсЗадачаДоговора.Роль В (&РолиИсключения)
	                             |	И абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                             |	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	                             |	И НЕ абсЗадачаДоговора.ПометкаУдаления
	                             |	И НЕ абсЗадачаДоговора.Выполнена
	                             |	И РолиИИсполнители.Исполнитель.абс_ОтправлятьУведомления = ЗНАЧЕНИЕ(Перечисление.абс_РежимОтправкиУведомлений.Отправлять)
	                             |	И НЕ ПользователиСМейл.Почтовый ЕСТЬ NULL ";
	ЗапросСпискаРассылки.УстановитьПараметр("ТаблицаС",ТаблицаПользователей);							  
	Инициатор = Новый Запрос("ВЫБРАТЬ
	                         |	ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 100) КАК email
	                         |ИЗ
	                         |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	                         |		ПО КонтактнаяИнформация.Объект = Пользователи.ФизЛицо
	                         |ГДЕ
	                         |	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	                         |	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)
	                         |	И Пользователи.Ссылка = &Инициатор
	                         |	И Пользователи.абс_ОтправлятьУведомленияКакИнициатору = ЗНАЧЕНИЕ(Перечисление.абс_РежимОтправкиУведомлений.Отправлять)
							 //КТТК Ермолов 27.11.2014
	                         //|	И НЕ Пользователи.Ссылка В (&Ответственные)");									
							 |	И НЕ ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 100) В (&Ответственные)");
							 //\\
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_ОтправкаУведомленийБПСрезПоследних.Период КАК Период,
		|	абс_ОтправкаУведомленийБПСрезПоследних.БП,
		|	абс_ОтправкаУведомленийБПСрезПоследних.УведомлениеОтправлено,
		|	абс_ОтправкаУведомленийБПСрезПоследних.ТочкаМаршрута КАК ТочкаМаршрутаБП,
		|	абс_ОтправкаУведомленийБПСрезПоследних.ДокументСсылка,
		|	абс_ОтправкаУведомленийБПСрезПоследних.СтатусНовый,
		|	абс_ОтправкаУведомленийБПСрезПоследних.Ответственный,
		|	абс_ОтправкаУведомленийБПСрезПоследних.ВидБП,
		|	абс_ОтправкаУведомленийБПСрезПоследних.Статус,
		|	абс_ОтправкаУведомленийБПСрезПоследних.ОтправкаОтветственным,
		|	абс_ОтправкаУведомленийБПСрезПоследних.ОтправкаИнициатору,
		|	абс_ОтправкаУведомленийБПСрезПоследних.ПричинаИзмененияСтатуса
		|ИЗ
		|	РегистрСведений.абс_ОтправкаУведомленийБП.СрезПоследних(&Время, ) КАК абс_ОтправкаУведомленийБПСрезПоследних
		|ГДЕ
		|	НЕ абс_ОтправкаУведомленийБПСрезПоследних.УведомлениеОтправлено
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
    Время = абс_СерверныеФункции.ПолучитьДатуСервера();
	Запрос.УстановитьПараметр("Время", Время);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	РолиИсключения = Новый СписокЗначений;
	РолиИсключения.Добавить(Справочники.РолиИсполнителей.ПустаяСсылка());
	РолиИсключения.Добавить(Справочники.РолиИсполнителей.СуперПользователь);
	РолиИсключения.Добавить(Справочники.РолиИсполнителей.СотрудникГруппыНСИ);
	РолиИсключения.Добавить(Справочники.РолиИсполнителей.ДирМФС);
	РолиИсключения.Добавить(Справочники.РолиИсполнителей.ПроверкаКонтрагентаДФМ);
	

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Start КТТК Ермолов Е.Л.  09.06.2016 7733632 
	    СписокРассылки = Новый Массив;
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументСсылка) Тогда // И (Время - ВыборкаДетальныеЗаписи.Период) > 604800 Тогда  // Если прошло больше недели
			Попытка
				Если  ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументСсылка) Тогда 
					ПользовательИнициатор = ВыборкаДетальныеЗаписи.ДокументСсылка.Ответственный;
				Иначе 
					ПользовательИнициатор = Неопределено;
				КонецЕсли;
			Исключение
				ПользовательИнициатор = Неопределено;
			КонецПопытки;
			Если ЗначениеЗаполнено(ПользовательИнициатор)  Тогда
			    Инициатор.УстановитьПараметр("Инициатор",ПользовательИнициатор);
			    Инициатор.УстановитьПараметр("Ответственные", Новый Массив );
				КтоЭто = Инициатор.Выполнить().Выбрать();
				Если КтоЭто.Следующий() Тогда 
					СписокРассылки.Добавить(КтоЭто.email);
				КонецЕсли;
			Иначе
				ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи,"Не получен инициатор");
			КонецЕсли;
			// Start КТТК Ермолов Е.Л.  01.07.2016 7733632  если что - проверяем на рассылку руководителю
			Попытка
			
				ДатаМетки = Дата(СокрЛП(ВыборкаДетальныеЗаписи.ПричинаИзмененияСтатуса));
			
			Исключение
			    ДатаМетки = абс_СерверныеФункции.ПолучитьДатуСервера();
			КонецПопытки; 
			Если  ((ДатаМетки - ВыборкаДетальныеЗаписи.Период) > 1209600) и ЗначениеЗаполнено(ПользовательИнициатор) Тогда  // Если прошло аш две недели
				Сотрудник = абс_БизнесПроцессы.ПолучитьСотрудникаПользователя(ПользовательИнициатор);
				Если Сотрудник = Неопределено Тогда
				//	Возврат Неопределено;
				КонецЕсли;
				
				// Найдем подразделение по сотруднику.
				
				Подразделение = Сотрудник.ПодразделениеОрганизации;
				Сообщить(Подразделение);
				Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
				//	Возврат Неопределено;
				КонецЕсли;
				
				// Получим Физлицо руководителя подразделения
				ФизЛицоРуководителя = абс_БизнесПроцессы.ПолучитьРуководителяПодразделения(Подразделение, абс_СерверныеФункции.ПолучитьДатуСервера());
				
				Если ФизЛицоРуководителя = Неопределено Тогда
				//	Возврат Неопределено;
				КонецЕсли;
				
				// Найдем пользователя руководителя по физлицу
				ПользовательРуководитель = абс_БизнесПроцессы.ПолучитьПользователяФизЛица(ФизЛицоРуководителя);
				Если ЗначениеЗаполнено(ПользовательРуководитель) Тогда 
				    Инициатор.УстановитьПараметр("Инициатор",(ПользовательИнициатор));
				    Инициатор.УстановитьПараметр("Ответственные", Новый Массив );
    				КтоЭто = Инициатор.Выполнить().Выбрать();
					Если КтоЭто.Следующий() Тогда 
						СписокРассылки.Добавить(КтоЭто.email);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СписокРассылки.Количество() > 0 Тогда 
				Ответ = ОтправитьПочтовыеСообщения(ВыборкаДетальныеЗаписи, СписокРассылки ); 
				Если ЗначениеЗаполнено(Ответ)  Тогда 
					ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи,Ответ);
				Иначе 
					ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи,"Инициатору: " + СписокРассылки[0] + " Руководителю: " + ?(СписокРассылки.Количество()=2,СписокРассылки[1],"не найден почтовый адрес"));
				КонецЕсли;
			КонецЕсли;	
			// Stop КТТК Ермолов Е.Л.  01.07.2016
			Продолжить;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументСсылка) Тогда 
			Если (Время - ВыборкаДетальныеЗаписи.Период)> 86400 Тогда 
				ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи,"Отправка уведомления задержана более суток");
				Продолжить;	
			КонецЕсли;
			Если НеВключенныеБП.Найти(ТипЗнч(ВыборкаДетальныеЗаписи.БП)) <> Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			ПроверкаНаВыполненность.УстановитьПараметр("БП",ВыборкаДетальныеЗаписи.БП);
			ЕщеАктуально = ПроверкаНаВыполненность.Выполнить().Выбрать();
			ЕщеАктуально.Следующий();
			Если ВыборкаДетальныеЗаписи.Период <> ЕщеАктуально.Период Тогда 
				ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи,"Статус изменен до отправки уведомления");
				Продолжить;	
			КонецЕсли;
			Если ВыборкаДетальныеЗаписи.ОтправкаОтветственным Тогда 
					ЗапросПроверкиРассылки.УстановитьПараметр("РолиИсключения", РолиИсключения);
					ЗапросПроверкиРассылки.УстановитьПараметр("Сформировавший", ВыборкаДетальныеЗаписи.Ответственный);
					ЗапросПроверкиРассылки.УстановитьПараметр("БизнесПроцесс", ВыборкаДетальныеЗаписи.БП);
					ЗапросПроверкиРассылки.УстановитьПараметр("ТочкаМаршрута", ВыборкаДетальныеЗаписи.ТочкаМаршрутаБП);
					Если ЗапросПроверкиРассылки.Выполнить().Пустой() Тогда 
						ЗапросСпискаРассылки.УстановитьПараметр("РолиИсключения", РолиИсключения);
						ЗапросСпискаРассылки.УстановитьПараметр("Сформировавший", ВыборкаДетальныеЗаписи.Ответственный);
						ЗапросСпискаРассылки.УстановитьПараметр("БизнесПроцесс", ВыборкаДетальныеЗаписи.БП);
						ЗапросСпискаРассылки.УстановитьПараметр("ТочкаМаршрута", ВыборкаДетальныеЗаписи.ТочкаМаршрутаБП);
													 
						СписокЗадач = ЗапросСпискаРассылки.Выполнить();
						СписокРассылки = СписокЗадач.Выгрузить().ВыгрузитьКолонку("епочта");
				
						Если СписокРассылки.Количество() = 0 Тогда 
							ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи,"Нет адресов для рассылки");
						Иначе 
							Ответ = ОтправитьПочтовыеСообщения(ВыборкаДетальныеЗаписи, СписокРассылки );
							Если ЗначениеЗаполнено(Ответ)  Тогда 
								ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи,Ответ);
							Иначе 
								ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи,абс_СлужебныеФункции.МассивВСтрокуСРазделителями(СписокРассылки));
							КонецЕсли;	
						КонецЕсли; 
					Иначе  
						ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи, "Автор задачи в списке рассылки");
					КонецЕсли;
			КонецЕсли;		
			Если ВыборкаДетальныеЗаписи.ОтправкаИнициатору  Тогда
				Попытка
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.БП) Тогда 
						ПользовательИнициатор = ВыборкаДетальныеЗаписи.БП.ПользовательИнициаторБП;
					ИначеЕсли  ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументСсылка) Тогда 
						ПользовательИнициатор = ВыборкаДетальныеЗаписи.ДокументСсылка.Ответственный;
					Иначе 
						ПользовательИнициатор = Неопределено;
					КонецЕсли;
				Исключение
					ПользовательИнициатор = Неопределено;
				КонецПопытки;
				Если ЗначениеЗаполнено(ПользовательИнициатор)  Тогда
				    Инициатор.УстановитьПараметр("Инициатор",ПользовательИнициатор);
				    Инициатор.УстановитьПараметр("Ответственные",СписокРассылки);
					
					КтоЭто = Инициатор.Выполнить().Выбрать();
					Если КтоЭто.Следующий() Тогда 
						Ответ = ОтправитьПочтовыеСообщения(ВыборкаДетальныеЗаписи, КтоЭто.email  ); 
						Если ЗначениеЗаполнено(Ответ)  Тогда 
							ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи,Ответ);
						Иначе 
							ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи,"Инициатору: " + КтоЭто.email);
						КонецЕсли;
					Иначе	
						ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи,"Нет адреса для инициатора или дублирован ответственным");
					КонецЕсли;
				Иначе
					ЗафиксироватьОтправкуУведомления(ВыборкаДетальныеЗаписи,"Не получен инициатор");
	 			КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;


	

КонецПроцедуры // ОтправитьУведомленияПоИсполнителямЗадач()


// <Описание функции>
//
// Параметры
//  <Уведомление>  - <ВыборкаИзРезультаЗАпроса> - <описание параметра>
//                 <продолжение описания параметра>
//  <Адрес>  - <Массив , строка> - <адреса отравки ссобщения>
//
Функция ОтправитьПочтовыеСообщения(Уведомление,  Знач Адреса, Тест = Неопределено)
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	Если ТипЗнч(Адреса) = Тип("Строка") Тогда 
		Адрес = Новый Массив;
		Адрес.Добавить(Адреса);
		Адреса = Адрес;
	КонецЕсли;
	Если ЗначениеЗаполнено(Тест) Тогда
		Адрес = Сообщение.Получатели.Добавить(Тест);
	Иначе 
		ш = 0;
		Пока ш < Адреса.Количество() Цикл
			Сообщение.Получатели.Добавить(СокрЛП(Адреса[ш]));
		    ш = ш + 1;
		КонецЦикла;
	КонецЕсли;
	Попытка
		Учетная = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
		Сообщение.Отправитель.Адрес = Учетная.АдресЭлектроннойПочты;
		Сообщение.Отправитель.ОтображаемоеИмя = "Уведомления";
	Исключение
	    Сообщить("Не найдена системная учетная запись");
	КонецПопытки;
	Если ЗначениеЗаполнено(Уведомление.БП) Тогда
		Если ТипЗнч(Уведомление.БП) = Тип("БизнесПроцессСсылка.абсЗаявкаВПоддержку") Тогда 
			обращение = "заявка в поддержку";
			//АБС ИЗМЕНЕНИЕ   13.10.2014 16:39:47  Шамов
			//ИдентификатрОбъекта = ?(ЗначениеЗаполнено(Уведомление.БП.ЗадачаВПоддержку), Уведомление.БП.ЗадачаВПоддержку.Номер  + " от " + Уведомление.БП.ЗадачаВПоддержку.Дата," от " + Уведомление.БП.Дата);
			//некорректное получение реквизитов через три точки
			//для оптимизации рекомендуется использовать запросы
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	абсЗаявкаВПоддержку.Дата,
				|	абсЗаявкаВПоддержку.ЗадачаВПоддержку.Номер,
				|	абсЗаявкаВПоддержку.ЗадачаВПоддержку.Дата
				|ИЗ
				|	БизнесПроцесс.абсЗаявкаВПоддержку КАК абсЗаявкаВПоддержку
				|ГДЕ
				|	абсЗаявкаВПоддержку.Ссылка = &Ссылка";

			Запрос.УстановитьПараметр("Ссылка", Уведомление.БП);

			Результат = Запрос.Выполнить();
			ДанныеБП = Результат.Выбрать();
			ДанныеБП.Следующий();

			ИдентификатрОбъекта = ?(ЗначениеЗаполнено(ДанныеБП.ЗадачаВПоддержкуНомер), ДанныеБП.ЗадачаВПоддержкуНомер  + " от " + ДанныеБП.ЗадачаВПоддержкуДата," от " + ДанныеБП.Дата);			
			//АБС ИЗМЕНЕНИЕ  КОНЕЦ 
			НачалоТела = "Заявка в службу поддержки";
			ИдНомера = " № ";
		Иначе 
			БП = Уведомление.БП;
			Мета = БП.Метаданные();
			Если Мета.Реквизиты[0].Тип = Новый ОписаниеТипов("СправочникСсылка.Пользователи") Тогда 
				Реквизит = Мета.Реквизиты[1];
			Иначе
				Реквизит = Мета.Реквизиты[0];
			КонецЕсли;	
			ОсновнойОбъект = БП[Реквизит.Имя];
			ТипОбъекта = ОсновнойОбъект.Метаданные();
			НазваниеОбъекта = ?(ЗначениеЗаполнено(ТипОбъекта.Синоним),ТипОбъекта.Синоним, ТипОбъекта.Имя);
			Если Метаданные.Документы.Содержит(ТипОбъекта) Тогда 
				обращение = "документ";
				ИдентификатрОбъекта = СокрЛП(ОсновнойОбъект.Номер)  + " от " + Формат(ОсновнойОбъект.Дата,"ДЛФ=DD");
				НачалоТела = НазваниеОбъекта;
				ИдНомера = " № ";
			Иначе
				обращение = "элемент справочника"; 
				ИдентификатрОбъекта = ОсновнойОбъект.Код; 
				НачалоТела = НазваниеОбъекта;
				ИдНомера = " код: ";		
			КонецЕсли;
		КонецЕсли;		
	Иначе
		обращение = "документ";
		Если ЗначениеЗаполнено(Уведомление.ДокументСсылка) Тогда
			НазваниеОбъекта = Уведомление.ДокументСсылка.Метаданные().Синоним;
			ИдентификатрОбъекта = СокрЛП(Уведомление.ДокументСсылка.Номер)  + " от " + Формат(Уведомление.ДокументСсылка.Дата,"ДЛФ=DD");
			НачалоТела = НазваниеОбъекта;
			ИдНомера = " № ";	
		Иначе 
			// Если нет никаких идентификаторов, то не надо отправлять письмо
			Возврат "Не удалось определить первичный документ";
		КонецЕсли;	
		
	КонецЕсли;
	Если обращение = "заявка в поддержку" Тогда 
		Склонение = "";
	ИначеЕсли обращение="документ" Тогда 
		Склонение = "документа";
	Иначе 
		Склонение = "элемента справочника";	
	КонецЕсли;
	
//	Сообщение.Тема = обращение + НачалоТела + ИдентификатрОбъекта + " ;статус: " + Уведомление.СтатусНовый ;
	Сообщение.Тема = "ФинСистема : Смена статуса " + НачалоТела + ИдНомера + ИдентификатрОбъекта;
	// Start КТТК Ермолов Е.Л.  09.06.2016 ОПервичке
	Если  ЗначениеЗаполнено(Уведомление.БП) Тогда 
		Тело = ?(ЗначениеЗаполнено(Уведомление.ВидБП), "Согласно бизнес-процессу <em>" + Уведомление.ВидБП + " </em>", "")
		 + ?(ЗначениеЗаполнено(Уведомление.Ответственный) И ЗначениеЗаполнено(Уведомление.Ответственный.Наименование),"<br/> сотрудником <em>" + Уведомление.Ответственный.Наименование + "</em> ","")
		 +  "<br/>установлен статус: <b>" + Уведомление.СтатусНовый + "</b>" + "<br/> у " + Склонение + " <b>" + НачалоТела + "</b><br/>" +  ИдНомера + "<b>" +  ИдентификатрОбъекта + "</b>"; 
		
		Основное = Сообщение.Тексты.Добавить(Тело);
		Основное.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;	
		Примечание = Сообщение.Тексты.Добавить("<br/><br/><em>Для принятия решения по статусу необходимо перейти в  ЕИСУП и найти " + обращение + " по присланным данным</em>");
		Примечание.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	Иначе 
		Сообщение.Тема = "ФинСистема : Оповещение о необходимости предоставления оригиналов " + НачалоТела + ИдНомера + ИдентификатрОбъекта;
		Тело = "Необходимо предоставить оригиналы  документов для "
		 +  Склонение + " <b>" + НачалоТела + "</b><br/>" +  ИдНомера + "<b>" +  ИдентификатрОбъекта + "</b>"; 
		
		Основное = Сообщение.Тексты.Добавить(Тело);
		Основное.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;	
				
	КонецЕсли;
	//Примечание = Сообщение.Тексты.Добавить("<br/><br/><em>В случае, если это сообщение не предназначено для вас - проигнорируйте его</em>");
	//Примечание.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	Если ЗначениеЗаполнено(Тест) Тогда
		Сообщение.Тексты.Добавить("
		|
		|
		|
		|Всего должно быть добавлено " + 	Адреса.Количество() + " писем ");
	КонецЕсли;
	Если абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Попытка
		
			СерверКТТК.ОтправитьПисьмо(Сообщение);
			
		
		Исключение
		    Возврат ИнформацияОбОшибке().Описание;
		КонецПопытки;
	КонецЕсли;	
	

КонецФункции // ОтправитьПочтовыеСообщения()
// Stop КТТК Ермолов Е.Л.  22.07.2014




Процедура ОтправитьУведомления() Экспорт
	
	//Если НЕ Константы.абс_ОтправкаУведомленийБПВключена.Получить() Тогда                  //АБС 13891 //
	//	Возврат;
	//КонецЕсли;
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	//АБС 13891+
    ТолькоНалоговыйКонтроль = Ложь;//НЕ Константы.абс_ОтправкаУведомленийБПВключена.Получить();    //АБС 13891
	УсловиеНК = ?(ТолькоНалоговыйКонтроль, "абс_НастройкаОтправкиУведомленийБП.ТочкаМаршрутаБП = &ТочкаМаршрутаБП", "");
    //АБС 13891-
	
	ЗапросУведомления = Новый Запрос;  	
	ЗапросУведомления.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;  	
	ЗапросУведомления.Текст = 
	"ВЫБРАТЬ
	|	абс_НастройкаОтправкиУведомленийБП.ВидБП,
	|	абс_НастройкаОтправкиУведомленийБП.ТочкаМаршрутаБП,
	|	абс_ОтправкаУведомленийБПСрезПоследних.БП,
	|	абс_ОтправкаУведомленийБПСрезПоследних.Статус,
	|	абс_ОтправкаУведомленийБПСрезПоследних.СтатусНовый,
	|	абс_ОтправкаУведомленийБПСрезПоследних.Период,
	|	абс_ОтправкаУведомленийБПСрезПоследних.БП.ПользовательИнициаторБП,
	|	ВЫБОР
	|		КОГДА абс_ОтправкаУведомленийБПСрезПоследних.БП.ПользовательИнициаторБП.абс_ОтправлятьУведомления В (ЗНАЧЕНИЕ(Перечисление.абс_режимОтправкиУведомлений.Отправлять), ЗНАЧЕНИЕ(Перечисление.абс_РежимОтправкиУведомлений.ПустаяСсылка))
	|			ТОГДА абс_ОтправкаУведомленийБПСрезПоследних.БП.ПользовательИнициаторБП.абс_ИмяВДомене
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяВДоменеИнициатора,
	|	абс_ОтправкаУведомленийБПСрезПоследних.Ответственный,
	|	абс_ОтправкаУведомленийБПСрезПоследних.УведомлениеОтправлено
	|ПОМЕСТИТЬ ВТ_ТабУведомлений
	|ИЗ
	|	РегистрСведений.абс_НастройкаОтправкиУведомленийБП КАК абс_НастройкаОтправкиУведомленийБП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.абс_ОтправкаУведомленийБП.СрезПоследних(&ТекДата, ) КАК абс_ОтправкаУведомленийБПСрезПоследних
	|		ПО абс_НастройкаОтправкиУведомленийБП.ВидБП = абс_ОтправкаУведомленийБПСрезПоследних.ВидБП
	|			И абс_НастройкаОтправкиУведомленийБП.ТочкаМаршрутаБП = абс_ОтправкаУведомленийБПСрезПоследних.ТочкаМаршрута
	|			И (абс_НастройкаОтправкиУведомленийБП.ОтправкаОтветственным
	|				ИЛИ абс_НастройкаОтправкиУведомленийБП.ОтправкаИнициатору)
	|ГДЕ
	|	(НЕ абс_ОтправкаУведомленийБПСрезПоследних.УведомлениеОтправлено)
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_НастройкаОтправкиУведомленийБП.ВидБП,
	|	абс_НастройкаОтправкиУведомленийБП.ТочкаМаршрутаБП,
	|	абс_ОтправкаУведомленийБПСрезПоследних.БП,
	|	абс_ОтправкаУведомленийБПСрезПоследних.Статус,
	|	абс_ОтправкаУведомленийБПСрезПоследних.СтатусНовый,
	|	абс_ОтправкаУведомленийБПСрезПоследних.Период,
	|	абс_ОтправкаУведомленийБПСрезПоследних.БП.ПользовательИнициаторБП,
	|	абс_ОтправкаУведомленийБПСрезПоследних.Ответственный,
	|	абс_ОтправкаУведомленийБПСрезПоследних.УведомлениеОтправлено,
	|	ВЫБОР
	|		КОГДА абс_ОтправкаУведомленийБПСрезПоследних.БП.ПользовательИнициаторБП.абс_ОтправлятьУведомления В (ЗНАЧЕНИЕ(Перечисление.абс_режимОтправкиУведомлений.Отправлять), ЗНАЧЕНИЕ(Перечисление.абс_РежимОтправкиУведомлений.ПустаяСсылка))
	|			ТОГДА абс_ОтправкаУведомленийБПСрезПоследних.БП.ПользовательИнициаторБП.абс_ИмяВДомене
	|		ИНАЧЕ """"
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТабУведомлений.ВидБП,
	|	ВТ_ТабУведомлений.ТочкаМаршрутаБП,
	|	ВТ_ТабУведомлений.БП,
	|	ВТ_ТабУведомлений.Статус,
	|	ВТ_ТабУведомлений.СтатусНовый,
	|	ВТ_ТабУведомлений.Период КАК Период,
	|	ВТ_ТабУведомлений.Ответственный,
	|	ВТ_ТабУведомлений.Ответственный.абс_ИмяВДомене КАК ИмяВДоменеИнициатора
	|ИЗ
	|	ВТ_ТабУведомлений КАК ВТ_ТабУведомлений
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	
	ЗапросУведомления.Текст = 
	"ВЫБРАТЬ
	|	абс_НастройкаОтправкиУведомленийБП.ВидБП,
	|	абс_НастройкаОтправкиУведомленийБП.ТочкаМаршрутаБП,
	|	абс_ОтправкаУведомленийБПСрезПоследних.БП,
	|	абс_ОтправкаУведомленийБПСрезПоследних.ДокументСсылка,
	|	абс_ОтправкаУведомленийБПСрезПоследних.Статус,
	|	абс_ОтправкаУведомленийБПСрезПоследних.СтатусНовый,
	|	абс_ОтправкаУведомленийБПСрезПоследних.Период,
	|	ВЫБОР
	|		КОГДА абс_НастройкаОтправкиУведомленийБП.ВидБП = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнеспроцессовТТК.СогласованиеПервичныхДокументов)
	|			ТОГДА абс_ОтправкаУведомленийБПСрезПоследних.ДокументСсылка.Ответственный
	|		ИНАЧЕ абс_ОтправкаУведомленийБПСрезПоследних.БП.ПользовательИнициаторБП
	|	КОНЕЦ КАК ПользовательИнициаторБП,
	|	ВЫБОР
	|		КОГДА абс_НастройкаОтправкиУведомленийБП.ВидБП = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнеспроцессовТТК.СогласованиеПервичныхДокументов)
	|			ТОГДА ВЫБОР
	|					КОГДА абс_ОтправкаУведомленийБПСрезПоследних.ДокументСсылка.Ответственный.абс_ОтправлятьУведомления В (ЗНАЧЕНИЕ(Перечисление.абс_режимОтправкиУведомлений.Отправлять), ЗНАЧЕНИЕ(Перечисление.абс_РежимОтправкиУведомлений.ПустаяСсылка))
	|						ТОГДА абс_ОтправкаУведомленийБПСрезПоследних.ДокументСсылка.Ответственный.абс_ИмяВДомене
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА абс_ОтправкаУведомленийБПСрезПоследних.БП.ПользовательИнициаторБП.абс_ОтправлятьУведомления В (ЗНАЧЕНИЕ(Перечисление.абс_режимОтправкиУведомлений.Отправлять), ЗНАЧЕНИЕ(Перечисление.абс_РежимОтправкиУведомлений.ПустаяСсылка))
	|					ТОГДА абс_ОтправкаУведомленийБПСрезПоследних.БП.ПользовательИнициаторБП.абс_ИмяВДомене
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ИмяВДоменеИнициатора,
	|	абс_ОтправкаУведомленийБПСрезПоследних.Ответственный,
	|	абс_ОтправкаУведомленийБПСрезПоследних.УведомлениеОтправлено,
	|	абс_НастройкаОтправкиУведомленийБП.ОтправкаОтветственным,
	|	абс_НастройкаОтправкиУведомленийБП.ОтправкаИнициатору
	|ПОМЕСТИТЬ ВТ_ТабУведомлений
	|ИЗ
	|	РегистрСведений.абс_НастройкаОтправкиУведомленийБП КАК абс_НастройкаОтправкиУведомленийБП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.абс_ОтправкаУведомленийБП.СрезПоследних(&ТекДата, ) КАК абс_ОтправкаУведомленийБПСрезПоследних
	|		ПО абс_НастройкаОтправкиУведомленийБП.ВидБП = абс_ОтправкаУведомленийБПСрезПоследних.ВидБП
	|			И абс_НастройкаОтправкиУведомленийБП.ТочкаМаршрутаБП = абс_ОтправкаУведомленийБПСрезПоследних.ТочкаМаршрута
	|			И (абс_НастройкаОтправкиУведомленийБП.ОтправкаОтветственным
	|				ИЛИ абс_НастройкаОтправкиУведомленийБП.ОтправкаИнициатору)
	|			И абс_НастройкаОтправкиУведомленийБП.Статус = абс_ОтправкаУведомленийБПСрезПоследних.СтатусНовый
	|ГДЕ
	|	(НЕ абс_ОтправкаУведомленийБПСрезПоследних.УведомлениеОтправлено)
	|   " + УсловиеНК + " 
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_НастройкаОтправкиУведомленийБП.ВидБП,
	|	абс_НастройкаОтправкиУведомленийБП.ТочкаМаршрутаБП,
	|	абс_ОтправкаУведомленийБПСрезПоследних.БП,
	|	абс_ОтправкаУведомленийБПСрезПоследних.Статус,
	|	абс_ОтправкаУведомленийБПСрезПоследних.СтатусНовый,
	|	абс_ОтправкаУведомленийБПСрезПоследних.Период,
	|	абс_ОтправкаУведомленийБПСрезПоследних.Ответственный,
	|	абс_ОтправкаУведомленийБПСрезПоследних.УведомлениеОтправлено,
	|	абс_НастройкаОтправкиУведомленийБП.ОтправкаОтветственным,
	|	абс_НастройкаОтправкиУведомленийБП.ОтправкаИнициатору,
	|	абс_ОтправкаУведомленийБПСрезПоследних.ДокументСсылка,
	|	ВЫБОР
	|		КОГДА абс_НастройкаОтправкиУведомленийБП.ВидБП = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнеспроцессовТТК.СогласованиеПервичныхДокументов)
	|			ТОГДА ВЫБОР
	|					КОГДА абс_ОтправкаУведомленийБПСрезПоследних.ДокументСсылка.Ответственный.абс_ОтправлятьУведомления В (ЗНАЧЕНИЕ(Перечисление.абс_режимОтправкиУведомлений.Отправлять), ЗНАЧЕНИЕ(Перечисление.абс_РежимОтправкиУведомлений.ПустаяСсылка))
	|						ТОГДА абс_ОтправкаУведомленийБПСрезПоследних.ДокументСсылка.Ответственный.абс_ИмяВДомене
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА абс_ОтправкаУведомленийБПСрезПоследних.БП.ПользовательИнициаторБП.абс_ОтправлятьУведомления В (ЗНАЧЕНИЕ(Перечисление.абс_режимОтправкиУведомлений.Отправлять), ЗНАЧЕНИЕ(Перечисление.абс_РежимОтправкиУведомлений.ПустаяСсылка))
	|					ТОГДА абс_ОтправкаУведомленийБПСрезПоследних.БП.ПользовательИнициаторБП.абс_ИмяВДомене
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА абс_НастройкаОтправкиУведомленийБП.ВидБП = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнеспроцессовТТК.СогласованиеПервичныхДокументов)
	|			ТОГДА абс_ОтправкаУведомленийБПСрезПоследних.ДокументСсылка.Ответственный
	|		ИНАЧЕ абс_ОтправкаУведомленийБПСрезПоследних.БП.ПользовательИнициаторБП
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТабУведомлений.ВидБП,
	|	ВТ_ТабУведомлений.ТочкаМаршрутаБП,
	|	ВТ_ТабУведомлений.БП,
	|	ВТ_ТабУведомлений.ДокументСсылка,
	|	ВТ_ТабУведомлений.Статус,
	|	ВТ_ТабУведомлений.СтатусНовый,
	|	абс_ОтправкаУведомленийБП.Период КАК Период,
	|	абс_ОтправкаУведомленийБП.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА абс_ОтправкаУведомленийБП.ВидБП = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнеспроцессовТТК.СогласованиеПервичныхДокументов)
	|			ТОГДА абс_ОтправкаУведомленийБП.ДокументСсылка.Ответственный.абс_ИмяВДомене
	|		ИНАЧЕ абс_ОтправкаУведомленийБП.БП.ПользовательИнициаторБП.абс_ИмяВДомене
	|	КОНЕЦ КАК ИмяВДоменеИнициатора,
	|	ВЫБОР
	|		КОГДА абс_ОтправкаУведомленийБП.ВидБП = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнеспроцессовТТК.СогласованиеПервичныхДокументов)
	|			ТОГДА абс_ОтправкаУведомленийБП.ДокументСсылка.Ответственный.абс_ОтправлятьУведомленияКакИнициатору
	|		ИНАЧЕ абс_ОтправкаУведомленийБП.БП.ПользовательИнициаторБП.абс_ОтправлятьУведомленияКакИнициатору
	|	КОНЕЦ КАК ОтправлятьУведомленияИнициатору,
	|	ВЫБОР
	|		КОГДА абс_ОтправкаУведомленийБП.ВидБП = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнеспроцессовТТК.СогласованиеПервичныхДокументов)
	|			ТОГДА абс_ОтправкаУведомленийБП.ДокументСсылка.Ответственный
	|		ИНАЧЕ абс_ОтправкаУведомленийБП.БП.ПользовательИнициаторБП
	|	КОНЕЦ КАК ИнициаторБП,
	|	ВТ_ТабУведомлений.ОтправкаОтветственным,
	|	ВТ_ТабУведомлений.ОтправкаИнициатору
	|ИЗ
	|	ВТ_ТабУведомлений КАК ВТ_ТабУведомлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_ОтправкаУведомленийБП КАК абс_ОтправкаУведомленийБП
	|		ПО ВТ_ТабУведомлений.ВидБП = абс_ОтправкаУведомленийБП.ВидБП
	|			И ВТ_ТабУведомлений.ТочкаМаршрутаБП = абс_ОтправкаУведомленийБП.ТочкаМаршрута
	|			И ВТ_ТабУведомлений.БП = абс_ОтправкаУведомленийБП.БП
	|			И ВТ_ТабУведомлений.Статус = абс_ОтправкаУведомленийБП.Статус
	|			И ВТ_ТабУведомлений.СтатусНовый = абс_ОтправкаУведомленийБП.СтатусНовый
	|			И ВТ_ТабУведомлений.ДокументСсылка = абс_ОтправкаУведомленийБП.ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	ЗапросУведомления.УстановитьПараметр("ТекДата", абс_СерверныеФункции.ПолучитьДатуСервера() - 1);

	ЗапросУведомления.УстановитьПараметр("ТочкаМаршрутаБП", БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.НалоговыйКонтроль); //АБС 13891

	ТабУведомлений = ЗапросУведомления.Выполнить().Выгрузить();
	
	Если ТабУведомлений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросУведомления.Текст = 
	"ВЫБРАТЬ
	|	ВТ_ТабУведомлений.ТочкаМаршрутаБП,
	|	ВТ_ТабУведомлений.БП,
	|	ВТ_ТабУведомлений.Период,
	|	абсЗадачаДоговора.Ссылка КАК ЗадачаСсылка,
	|	абсЗадачаДоговора.Исполнитель.абс_ИмяВДомене КАК ИмяВДомене
	|ИЗ
	|	ВТ_ТабУведомлений КАК ВТ_ТабУведомлений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|		ПО ВТ_ТабУведомлений.БП = абсЗадачаДоговора.БизнесПроцесс
	|			И ВТ_ТабУведомлений.ТочкаМаршрутаБП = абсЗадачаДоговора.ТочкаМаршрута
	|			И (абсЗадачаДоговора.Дата <= ВТ_ТабУведомлений.Период)
	|			И (абсЗадачаДоговора.Дата >= ДОБАВИТЬКДАТЕ(абсЗадачаДоговора.Дата, СЕКУНДА, -2))
	|			И ((НЕ абсЗадачаДоговора.Исполнитель = ЗНАЧЕНИЕ(Справочник.пользователи.ПустаяСсылка)))
	|			И (ВТ_ТабУведомлений.ОтправкаОтветственным
	|					И (НЕ абсЗадачаДоговора.Исполнитель.абс_ОтправлятьУведомления = ЗНАЧЕНИЕ(Перечисление.абс_РежимОтправкиУведомлений.Запретить))
	|				ИЛИ ВТ_ТабУведомлений.ОтправкаИнициатору
	|					И (НЕ абсЗадачаДоговора.Исполнитель.абс_ОтправлятьУведомленияКакИнициатору = ЗНАЧЕНИЕ(Перечисление.абс_РежимОтправкиУведомлений.Запретить)))";
	
	ТабЗадачУведомлений = ЗапросУведомления.Выполнить().Выгрузить();
	
	//АБС ИЗМЕНЕНИЕ 44744  23.06.2014 12:28:39  Попов
		//Если ТабЗадачУведомлений.Количество() = 0 Тогда
			//	Возврат;
		//КонецЕсли;
	//АБС ИЗМЕНЕНИЕ 44744 КОНЕЦ

	Для Каждого СтрокаУведомления Из ТабУведомлений Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаУведомления.БП) И НЕ СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеПервичныхДокументов Тогда
			Продолжить;
		КонецЕсли;
			
		СтруктураОтбораЗадач = Новый Структура;
		
		СтруктураОтбораЗадач.Вставить("БП", СтрокаУведомления.БП);
		СтруктураОтбораЗадач.Вставить("ТочкаМаршрутаБП", СтрокаУведомления.ТочкаМаршрутаБП);
		СтрокиЗадач = ТабЗадачУведомлений.НайтиСтроки(СтруктураОтбораЗадач);
		
		СтруктураУведомления = Новый Структура;
		
		СформироватьСтруктуруУведомления(СтрокаУведомления, СтрокиЗадач, СтруктураУведомления);
		
		Если Константы.абс_ЭтоТестоваяБаза.Получить() Тогда
			ОтправитьУведомлениеПользователямABS(СтруктураУведомления);
		Иначе
			ОтправитьУведомлениеПользователям(СтруктураУведомления);
			// Для тестирования и проверки получателей.
			СформироватьЭлектронноеПисьмо(СтруктураУведомления);
		КонецЕсли;
		
		// Запишем в регистр что уведомление отправлено.
		ЗафиксироватьОтправкуУведомления(СтрокаУведомления);
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Отправка уведомлений пользователям", УровеньЖурналаРегистрации.Информация,,,"Отправка уведомлений пользователям завершена.");
	
КонецПроцедуры

Процедура СформироватьСтруктуруУведомления(СтрокаУведомления, СтрокиЗадач, СтруктураУведомления) Экспорт
	
	//СтрокаПолучателей = "IIvanov|APetrov";
	СтрокаПолучателей = "";
	
	Если СтрокаУведомления.ОтправкаИнициатору Тогда
		Если ЗначениеЗаполнено(СтрокаУведомления.ИмяВДоменеИнициатора) И НЕ СтрокаУведомления.ОтправлятьУведомленияИнициатору = Перечисления.абс_РежимОтправкиУведомлений.Запретить Тогда
			СтрокаПолучателей = СтрокаПолучателей + СтрокаУведомления.ИмяВДоменеИнициатора;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаУведомления.ОтправкаОтветственным Тогда
		Для Каждого СтрокаЗадачи Из СтрокиЗадач Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаЗадачи.ИмяВДомене) Тогда
				Продолжить;
			КонецЕсли;
			
			//АБС 13891+
			Если СтрокаУведомления.ТочкаМаршрутаБП = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.НалоговыйКонтроль И 
				(СтрокаЗадачи.ИмяВДомене <> "Molkova" И СтрокаЗадачи.ИмяВДомене <> "OIGavrilova" И СтрокаЗадачи.ИмяВДомене <> "Evtyushkina") Тогда
				Продолжить;
			КонецЕсли;
			//АБС 13891-
			
			Если ЗначениеЗаполнено(СтрокаПолучателей) Тогда
				СтрокаПолучателей = СтрокаПолучателей + "|" + СтрокаЗадачи.ИмяВДомене;	
			Иначе
				СтрокаПолучателей = СтрокаЗадачи.ИмяВДомене; //АБС 13891
			КонецЕсли;
		КонецЦикла;
		//АБС ВСТАВКА 44744  16.06.2014 13:55:59  Попов
		
		Если СтрокаУведомления.ТочкаМаршрутаБП = БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.НалоговыйКонтроль Тогда
			Если Найти(СтрокаПолучателей,"Molkova") = 0 Тогда
				СтрокаПолучателей = СтрокаПолучателей + "|" + "Molkova";
			КонецЕсли;
			Если Найти(СтрокаПолучателей,"OIGavrilova") = 0 Тогда
				СтрокаПолучателей = СтрокаПолучателей + "|" + "OIGavrilova";
			КонецЕсли;
			Если Найти(СтрокаПолучателей,"biserova") = 0 Тогда
				СтрокаПолучателей = СтрокаПолучателей + "|" + "Evtyushkina";
			КонецЕсли;
		КонецЕсли;
		
		//АБС ВСТАВКА 44744 КОНЕЦ
	КонецЕсли;
	
	// Вид бизнес-процесса, тема письма
	СтруктураУведомления.Вставить("ДокументСсылка"			, СтрокаУведомления.ДокументСсылка);
	СтруктураУведомления.Вставить("ВидБП"					, СтрокаУведомления.ВидБП);
	СтруктураУведомления.Вставить("Получатели"				, СтрокаПолучателей);
	СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Ложь);
	СтруктураУведомления.Вставить("Статус" 					, СтрокаУведомления.СтатусНовый);
	
	Если СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеКонтрагентов Тогда
		
		Контрагент 					= СтрокаУведомления.БП.Контрагент;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			НаименованиеКонтрагента 	= РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(Контрагент.Наименование);
			КодКонтрагента 				= СокрЛП(Контрагент.Код);
			
			Тип							= "Контрагент";
			КодОбъекта					= КодКонтрагента;
			Наименование				= НаименованиеКонтрагента;
			
			Тема = "Контрагент " + НаименованиеКонтрагента + " (Код: " + КодКонтрагента + ") переведен в статус: " + СтрокаУведомления.СтатусНовый + ".";
			
			Текст = Тема + "
			|Период: " + СтрокаУведомления.Период + ", Ответственный: " + СтрокаУведомления.Ответственный + ".";
		Иначе
			СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Истина);			
		КонецЕсли;
		
	ИначеЕсли СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров Тогда
		ДоговорКонтрагента			= СтрокаУведомления.БП.ДоговорКонтрагента;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			НаименованиеДоговора 		= РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(ДоговорКонтрагента);	
			КодДоговора 				= СокрЛП(ДоговорКонтрагента.Код);
			
			Контрагент 					= ДоговорКонтрагента.Владелец;
			
			НаименованиеКонтрагента 	= РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(Контрагент.Наименование);
			КодКонтрагента 				= СокрЛП(Контрагент.Код);		
			
			Тип							= "Договор контрагента";
			КодОбъекта					= КодДоговора;
			Наименование				= НаименованиеДоговора;
			
			Тема = "Договор " + НаименованиеДоговора + " (Код: " + КодДоговора + ") с контрагентом " + НаименованиеКонтрагента + " переведен в статус: " + СтрокаУведомления.СтатусНовый;
			
			Текст = Тема + "
			|Период: " + СтрокаУведомления.Период + ", Ответственный: " + СтрокаУведомления.Ответственный + ".";			
		Иначе
			СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Истина);
		КонецЕсли;
		
	ИначеЕсли СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов Тогда
		ЗЗ = СтрокаУведомления.БП.ЗакупочныйЗаказ;
		
		Если ЗначениеЗаполнено(ЗЗ) Тогда
			ПредставлениеЗЗ = "Закупочный заказ " + ЗЗ.Номер + " от " + Формат(ЗЗ.Дата, "ДФ=dd.MM.yyyy");
			
			Тип							= "Закупочный заказ";
			КодОбъекта					= ЗЗ.Номер;
			Наименование				= ПредставлениеЗЗ;
			
			Тема = "" + ПредставлениеЗЗ + " переведен в статус " + СтрокаУведомления.СтатусНовый;
			
			Текст = Тема + "
			|Период: " + СтрокаУведомления.Период + ", Ответственный: " + СтрокаУведомления.Ответственный + ".";			
		Иначе
			СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Истина);
		КонецЕсли;
		
	ИначеЕсли СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату Тогда
		СчетНаОплату = СтрокаУведомления.БП.СчетНаОплату;
		
		Если ЗначениеЗаполнено(СчетНаОплату) Тогда
			ПредставлениеСчета = "Счет на оплату " + СчетНаОплату.Номер + " от " + Формат(СчетНаОплату.Дата, "ДФ=dd.MM.yyyy");
			
			Тип							= "Счет на оплату";
			КодОбъекта					= СчетНаОплату.Номер;
			Наименование				= ПредставлениеСчета;			
			
			Тема = "" + ПредставлениеСчета + " переведен в статус " + СтрокаУведомления.СтатусНовый;
			
			Текст = Тема + "
			|Период: " + СтрокаУведомления.Период + ", Ответственный: " + СтрокаУведомления.Ответственный + ".";			
		Иначе
			СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Истина);
		КонецЕсли;
		
	ИначеЕсли СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеПервичныхДокументов Тогда
		ППД = СтрокаУведомления.ДокументСсылка;
		
		Если ЗначениеЗаполнено(ППД) Тогда
			ПредставлениеППД = "" + ППД.Метаданные().Синоним + " " + ППД.Номер + " от " + Формат(ППД.Дата, "ДФ=dd.MM.yyyy");
			
			Тип							= ППД.Метаданные().Синоним;
			КодОбъекта					= ППД.Номер;
			Наименование				= ПредставлениеППД;			
			
			Тема = "ППД " + ПредставлениеППД + " переведен в статус " + СтрокаУведомления.СтатусНовый;
			
			Текст = Тема + "
			|Период: " + СтрокаУведомления.Период + ", Ответственный: " + СтрокаУведомления.Ответственный + ".";			
			
		Иначе
			СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Истина);
		КонецЕсли;
		
	ИначеЕсли СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗаявкиНаСклад Тогда
		СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Истина);
	ИначеЕсли СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.РекласификацияБюджета Тогда
		Реклас = СтрокаУведомления.БП.РекласификацияБюджета;
		
		Если ЗначениеЗаполнено(Реклас) Тогда
			ПредставлениеРекласа = "Рекласификация бюджета " + Реклас.Номер + " от " + Формат(Реклас.Дата, "ДФ=dd.MM.yyyy");
			
			Тип							= "Рекласификация бюджета";
			КодОбъекта					= Реклас.Номер;
			Наименование				= ПредставлениеРекласа;				
			
			Тема = "" + ПредставлениеРекласа + " переведена в статус " + СтрокаУведомления.СтатусНовый;
			
			Текст = Тема + "
			|Период: " + СтрокаУведомления.Период + ", Ответственный: " + СтрокаУведомления.Ответственный + ".";			
			
		Иначе
			СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Истина);
		КонецЕсли;
		
	ИначеЕсли СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.ЗаявкиВПоддержку Тогда
		Заявка = СтрокаУведомления.БП.ЗадачаВПоддержку;
		
		Если ЗначениеЗаполнено(Заявка) Тогда
			ПредставлениеЗаявки = "Заявка в поддержку " + Заявка.Номер + " от " + Формат(Заявка.Дата, "ДФ=dd.MM.yyyy");
			
			Тип							= "Заявка в поддержку";
			КодОбъекта					= Заявка.Номер;
			Наименование				= ПредставлениеЗаявки;				
			
			Тема = "" + ПредставлениеЗаявки + " переведена в статус " + СтрокаУведомления.СтатусНовый;
			
			Текст = Тема + "
			|Период: " + СтрокаУведомления.Период + ", Ответственный: " + СтрокаУведомления.Ответственный + ".";			
			
		Иначе
			СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Истина);
		КонецЕсли;
	ИначеЕсли СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеПланаБюджета Тогда
		ПланБюджета = СтрокаУведомления.БП.ДокументВводаБюджета;
		
		Если ЗначениеЗаполнено(ПланБюджета) Тогда
			ПредставлениеПланаБюджета = "Ввод плана бюджета" + ПланБюджета.Номер + " от " + Формат(ПланБюджета.Дата, "ДФ=dd.MM.yyyy");
			
			Тип							= "Ввод плана бюджета";
			КодОбъекта					= ПланБюджета.Номер;
			Наименование				= ПредставлениеПланаБюджета;				
			
			Тема = "" + ПредставлениеПланаБюджета + " переведен в статус " + СтрокаУведомления.СтатусНовый;
			
			Текст = Тема + "
			|Период: " + СтрокаУведомления.Период + ", Ответственный: " + СтрокаУведомления.Ответственный + ".";			
			
		Иначе
			СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Истина);
		КонецЕсли;
		
		
	ИначеЕсли СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.ЗаявкаНаИзменениеРеквизитов Тогда
		Заявка = СтрокаУведомления.БП.ЗаявкаНаИзменениеРеквизитов;
		
		Контрагент = Заявка.Контрагент;
		
		НаименованиеКонтрагента 	= РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(Контрагент.Наименование);
		КодКонтрагента 				= СокрЛП(Контрагент.Код);
		
		
		Если ЗначениеЗаполнено(Заявка) Тогда
			ПредставлениеЗаявки = "Заявка на изменение реквизитов " + Заявка.Номер + " от " + Формат(Заявка.Дата, "ДФ=dd.MM.yyyy") + " Контрагент: " + НаименованиеКонтрагента + " (" + КодКонтрагента + ").";
			
			Тип							= "Заявка на изменение реквизитов";
			КодОбъекта					= Заявка.Номер;
			Наименование				= ПредставлениеЗаявки;				
			
			Тема = "" + ПредставлениеЗаявки + " переведена в статус " + СтрокаУведомления.СтатусНовый;
			
			Текст = Тема + "
			|Период: " + СтрокаУведомления.Период + ", Ответственный: " + СтрокаУведомления.Ответственный + ".";			
			
		Иначе
			СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Истина);
		КонецЕсли;
		
		
	ИначеЕсли СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеСтатейЗатрат Тогда
		СтатьяЗатрат = СтрокаУведомления.БП.СтатьяЗатрат;
		
		Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			
			НаименованиеСтатьи 			= РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(СтатьяЗатрат.Наименование);
			КодСтатьи 					= СокрЛП(СтатьяЗатрат.Код);
			
			Тип							= "Статья затрат";
			КодОбъекта					= КодСтатьи;
			Наименование				= НаименованиеСтатьи;				
			
			Тема = "Статья затрат " + Наименование + " (Код: " + КодОбъекта + ") переведена в статус: " + СтрокаУведомления.СтатусНовый + ".";
			
			Текст = Тема + "
			|Период: " + СтрокаУведомления.Период + ", Ответственный: " + СтрокаУведомления.Ответственный + ".";			
			
		Иначе
			СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Истина);
		КонецЕсли;
		
	ИначеЕсли СтрокаУведомления.ВидБП = Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеНоменклатуры Тогда
		НоменклатурнаяГруппа = СтрокаУведомления.БП.НоменклатурнаяГруппа;
		
		Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
			
			НаименованиеНГ	 			= РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(НоменклатурнаяГруппа.Наименование);
			КодНГ	 					= СокрЛП(НоменклатурнаяГруппа.Код);
			
			Тип							= "Номенклатурная группа";
			КодОбъекта					= КодНГ;
			Наименование				= НаименованиеНГ;				
			
			Тема = "Номенклатурная группа " + Наименование + " (Код: " + КодОбъекта + ") переведена в статус: " + СтрокаУведомления.СтатусНовый + ".";
			
			Текст = Тема + "
			|Период: " + СтрокаУведомления.Период + ", Ответственный: " + СтрокаУведомления.Ответственный + ".";			
			
		Иначе
			СтруктураУведомления.Вставить("НеОтправлятьУведомление"	, Истина);
		КонецЕсли;		
		
	КонецЕсли;	
	
	СтруктураУведомления.Вставить("Тема"				, Тема);
	СтруктураУведомления.Вставить("ТекстЗаголовка"		, СокрЛП(СтрокаУведомления.ВидБП));
	СтруктураУведомления.Вставить("ТекстУведомления"	, Текст);
	
	СтруктураУведомления.Вставить("ТипОбъекта"			, Тип);
	СтруктураУведомления.Вставить("КодОбъекта"			, КодОбъекта);
	СтруктураУведомления.Вставить("НаименованиеОбъекта"	, Наименование);
	СтруктураУведомления.Вставить("Ответственный"		, СтрокаУведомления.Ответственный);
	СтруктураУведомления.Вставить("Период"				, СтрокаУведомления.Период);
	
	СтруктураУведомления.Вставить("СсылкаНаОбъектИБ", "");	
	
КонецПроцедуры


//Процедуры Синхронизации статусов счетов на оплату с оплатами по
// документам Платежное поручение исходящее
Процедура ВыполнитьСинхронизациюСОплатами() Экспорт
	
	//АБС ВСТАВКА №000028283 НАЧАЛО «8 октября 2014 г.», Пополитов  		
	Если Не глЗначениеПеременной("абс_ИспользоватьСинхронизациюСтатусов") Тогда
	//\\АБС ВСТАВКА №000028283 КОНЕЦ	
		Возврат;	
	КонецЕсли; 	
	
	ТекДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	ТекстСообщения = "Синхронизация статусов " + ТекДата;
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения); 	
	
	мСписокСтатусов = абс_БизнесПроцессы.ПолучитьМассивСтатусовСчетаНаОплату();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//АБС ВСТАВКА №000028283 НАЧАЛО «8 октября 2014 г.», Пополитов
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.СчетНаОплату КАК СчетНаОплату,
	//|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.СтатусСчета,
	//|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ПлатежноеПоручение,
	//|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.Оплата КАК Оплата,
	//|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ЗРС
	//|ПОМЕСТИТЬ ВТ_СчетаДляСинхронизации
	//|ИЗ
	//|	РегистрСведений.абс_СинхронизацияСтатусовСчетовПриОплате.СрезПоследних(&ТекДата, ) КАК абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних
	//|ГДЕ
	//|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ТребуетсяСинхронизация
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	СчетНаОплату,
	//|	Оплата
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	ВТ_СчетаДляСинхронизации.СчетНаОплату,
	//|	ВТ_СчетаДляСинхронизации.ПлатежноеПоручение,
	//|	ВТ_СчетаДляСинхронизации.Оплата,
	//|	ВТ_СчетаДляСинхронизации.ЗРС,
	//|	абс_СчетНаОплатуОплаты.ПланПлатежей
	//|ИЗ
	//|	ВТ_СчетаДляСинхронизации КАК ВТ_СчетаДляСинхронизации
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	//|		ПО ВТ_СчетаДляСинхронизации.СчетНаОплату = абс_СчетНаОплатуОплаты.Ссылка
	//|			И ВТ_СчетаДляСинхронизации.Оплата = абс_СчетНаОплатуОплаты.Оплата";
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.СчетНаОплату КАК СчетНаОплату,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.СтатусСчета,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ПлатежноеПоручение,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.Оплата КАК Оплата,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ЗРС,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ТребуетсяСинхронизация,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ВыполненоСОшибками,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТ_СчетаДляСинхронизацииСОшибками
	|ИЗ
	|	РегистрСведений.абс_СинхронизацияСтатусовСчетовПриОплате.СрезПоследних(&ТекДата, ) КАК абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних
	|ГДЕ
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ВыполненоСОшибками
	|	И абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), ДЕНЬ, -15) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), СЕКУНДА, -1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНаОплату,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ПлатежноеПоручение,
	|	Оплата,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ЗРС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_СчетаДляСинхронизацииСОшибками.СчетНаОплату КАК СчетНаОплату,
	|	ВТ_СчетаДляСинхронизацииСОшибками.СтатусСчета,
	|	ВТ_СчетаДляСинхронизацииСОшибками.ПлатежноеПоручение,
	|	ВТ_СчетаДляСинхронизацииСОшибками.Оплата КАК Оплата,
	|	ВТ_СчетаДляСинхронизацииСОшибками.ЗРС,
	|	ВТ_СчетаДляСинхронизацииСОшибками.ТребуетсяСинхронизация,
	|	ВТ_СчетаДляСинхронизацииСОшибками.ВыполненоСОшибками,
	|	ВТ_СчетаДляСинхронизацииСОшибками.Период,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПервых.Период КАК ПериодПервойОшибки
	|ПОМЕСТИТЬ ВТ_СчетаДляСинхронизацииСОшибками_ВТ
	|ИЗ
	|	ВТ_СчетаДляСинхронизацииСОшибками КАК ВТ_СчетаДляСинхронизацииСОшибками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_СинхронизацияСтатусовСчетовПриОплате.СрезПервых(
	|				,
	|				(СчетНаОплату, ПлатежноеПоручение, Оплата, ЗРС) В
	|						(ВЫБРАТЬ
	|							ВТ_СчетаДляСинхронизацииСОшибками.СчетНаОплату,
	|							ВТ_СчетаДляСинхронизацииСОшибками.ПлатежноеПоручение,
	|							ВТ_СчетаДляСинхронизацииСОшибками.Оплата,
	|							ВТ_СчетаДляСинхронизацииСОшибками.ЗРС
	|						ИЗ
	|							ВТ_СчетаДляСинхронизацииСОшибками КАК ВТ_СчетаДляСинхронизацииСОшибками)
	|					И ВыполненоСОшибками) КАК абс_СинхронизацияСтатусовСчетовПриОплатеСрезПервых
	|		ПО ВТ_СчетаДляСинхронизацииСОшибками.СчетНаОплату = абс_СинхронизацияСтатусовСчетовПриОплатеСрезПервых.СчетНаОплату
	|			И ВТ_СчетаДляСинхронизацииСОшибками.ПлатежноеПоручение = абс_СинхронизацияСтатусовСчетовПриОплатеСрезПервых.ПлатежноеПоручение
	|			И ВТ_СчетаДляСинхронизацииСОшибками.Оплата = абс_СинхронизацияСтатусовСчетовПриОплатеСрезПервых.Оплата
	|			И ВТ_СчетаДляСинхронизацииСОшибками.ЗРС = абс_СинхронизацияСтатусовСчетовПриОплатеСрезПервых.ЗРС
	|ГДЕ
	|	РАЗНОСТЬДАТ(абс_СинхронизацияСтатусовСчетовПриОплатеСрезПервых.Период, ВТ_СчетаДляСинхронизацииСОшибками.Период, ДЕНЬ) < 15
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.СчетНаОплату КАК СчетНаОплату,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.СтатусСчета,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ПлатежноеПоручение,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.Оплата КАК Оплата,
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ЗРС
	|ПОМЕСТИТЬ ВТ_СчетаДляСинхронизации
	|ИЗ
	|	РегистрСведений.абс_СинхронизацияСтатусовСчетовПриОплате.СрезПоследних(&ТекДата, ) КАК абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних
	|ГДЕ
	|	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ТребуетсяСинхронизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СчетаДляСинхронизацииСОшибками_ВТ.СчетНаОплату,
	|	ВТ_СчетаДляСинхронизацииСОшибками_ВТ.СтатусСчета,
	|	ВТ_СчетаДляСинхронизацииСОшибками_ВТ.ПлатежноеПоручение,
	|	ВТ_СчетаДляСинхронизацииСОшибками_ВТ.Оплата,
	|	ВТ_СчетаДляСинхронизацииСОшибками_ВТ.ЗРС
	|ИЗ
	|	ВТ_СчетаДляСинхронизацииСОшибками_ВТ КАК ВТ_СчетаДляСинхронизацииСОшибками_ВТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНаОплату,
	|	Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_СчетаДляСинхронизации.СчетНаОплату,
	|	ВТ_СчетаДляСинхронизации.ПлатежноеПоручение,
	|	ВТ_СчетаДляСинхронизации.Оплата,
	|	ВТ_СчетаДляСинхронизации.ЗРС,
	|	абс_СчетНаОплатуОплаты.ПланПлатежей
	|ИЗ
	|	ВТ_СчетаДляСинхронизации КАК ВТ_СчетаДляСинхронизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	|		ПО ВТ_СчетаДляСинхронизации.СчетНаОплату = абс_СчетНаОплатуОплаты.Ссылка
	|			И ВТ_СчетаДляСинхронизации.Оплата = абс_СчетНаОплатуОплаты.Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаДляСинхронизацииСОшибками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаДляСинхронизацииСОшибками_ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаДляСинхронизации";
	
	Запрос.УстановитьПараметр("ТекДата", ТекДата - 5);
	//\\АБС ВСТАВКА №000028283 КОНЕЦ
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ВыполненоСОшибками = Ложь;
		ТекстОшибок = "";		
		
		ТекстСообщения = "Синхронизация статусов по документы "+Результат.ПлатежноеПоручение;
		ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
		
		Источник	 = Результат.ПлатежноеПоручение;
		ЗРС      	 = Результат.ЗРС;
		СчетНаОплату = Результат.СчетНаОплату;
		Оплата       = Результат.Оплата;
		
		//1. Синхронизация статусов Заявки на расходование средств и Платежного поручения исходящего
		Если Источник.Статус<> ЗРС.Статус Тогда   			
			Попытка
				Об = ЗРС.ПолучитьОбъект();
				Об.Статус = Источник.Статус;
				Об.ОбменДанными.Загрузка = Истина;   				
				Об.Записать();
			Исключение   				
				СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи ЗРС: " + ЗРС + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
			КонецПопытки;                         			
		КонецЕсли;
		//\\1.
		СтруктураОтбора = Новый структура("Оплата");
		СтруктураОтбора.Вставить("Оплата",Результат.Оплата);
		
		МассивСтрок =СчетНаОплату.Оплаты.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество()>0 Тогда
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				Если СчетНаОплату.Оплаты[СтрокаМассива.НомерСтроки-1].ПлатежноеПоручение <> Источник Тогда
					СчетОбъект = СчетНаОплату.ПолучитьОбъект();
					СчетОбъект.Оплаты[Строкамассива.НомерСтроки-1].ПлатежноеПоручение = Источник;
					Если Источник.Оплачено И Источник.Проведен Тогда
						СчетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.Оплачен;
						ДокумПлатеж = счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
						Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
							Если ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
								Попытка
									ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
									ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен;
									ДокПлатеж.Записать();
								Исключение
									СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи платежа: " + ДокумПлатеж + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
								КонецПопытки; 
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли Источник.Статус = Перечисления.абсСтатусыПлатежей.Отправлено Тогда
						ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
						ИндексТекСтатуса       = мСписокСтатусов.Найти(СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
						Если ИндексТекСтатуса < ИндексСтатусаОтправлен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ОтправленВБанк;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							Попытка 
								счетОбъект.Записать();	
							Исключение
								СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи счета: " + СчетНаОплату + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
							КонецПопытки;
							
						КонецЕсли;
						ДокумПлатеж = счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
						Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
							Если ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
								Попытка
									ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
									ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен;
									ДокПлатеж.Записать();
								Исключение
									СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи платежа: " + ДокумПлатеж + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
								КонецПопытки; 
							КонецЕсли;
						КонецЕсли;   						
						
					ИначеЕсли Источник.Статус = Перечисления.абсСтатусыПлатежей.ГотовКОплате Тогда
						ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ГотовКОплате);
						ИндексТекСтатуса       = мСписокСтатусов.Найти(СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
						Если ИндексТекСтатуса < ИндексСтатусаОтправлен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ГотовКОплате;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							Попытка 
								счетОбъект.Записать();	
							Исключение
								СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи счета: " + СчетНаОплату + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
							КонецПопытки;
							
						КонецЕсли;
					ИначеЕсли Источник.Статус = Перечисления.абсСтатусыПлатежей.ПеренесенаВГК Тогда
						ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
						ИндексТекСтатуса       = мСписокСтатусов.Найти(СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
						Если ИндексТекСтатуса < ИндексСтатусаОтправлен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ПеренесенВГК;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							Попытка 
								счетОбъект.Записать();	
							Исключение
								СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи счета: " + СчетНаОплату + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
							КонецПопытки;   							
						КонецЕсли;
						
					ИначеЕсли Источник.Статус = Перечисления.абсСтатусыПлатежей.Подготовка ИЛИ (Не Источник.Проведен) ИЛИ (Источник.ПометкаУдаления) Тогда
						СтатусОплатыСчета = СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты;
						Если СтатусОплатыСчета<> Перечисления.абсСтатусыСчетов.Утвержден Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.Утвержден;	
						КонецЕсли;
						ДокумПлатеж = СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
						Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
							Если ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Утвержден Тогда
								попытка
									ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
									ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Утвержден;
									ДокПлатеж.Записать();
								Исключение
									СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи платежа: " + ДокумПлатеж + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;						
					КонецЕсли;	
					
					СчетОбъект.ОбменДанными.Загрузка = Истина;
					Попытка 
						счетОбъект.Записать();	
					Исключение
						СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи счета: " + СчетНаОплату + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
					КонецПопытки;
					
				Иначе
					
					Если Источник.Оплачено И Источник.Проведен Тогда
						Если СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты <> Перечисления.абсСтатусыСчетов.Оплачен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.Оплачен;
							СчетОбъект.ОбменДанными.Загрузка = Истина;    							
							Попытка 
								счетОбъект.Записать();	
							Исключение
								СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи счета: " + СчетНаОплату + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
							КонецПопытки;     							
						КонецЕсли;
						//Изменение статуса плана платежей
						ДокумПлатеж = СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
						Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
							Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
								Попытка
									ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
									ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен;
									ДокПлатеж.Записать();
								Исключение
									СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи платежа: " + ДокумПлатеж + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
						//Изменение статуса плана платежей
						
					ИначеЕсли Источник.Статус = Перечисления.абсСтатусыПлатежей.Отправлено Тогда
						ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
						ИндексТекСтатуса       = мСписокСтатусов.Найти(СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
						Если ИндексТекСтатуса < ИндексСтатусаОтправлен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ОтправленВБанк;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							Попытка 
								счетОбъект.Записать();	
							Исключение
								СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи счета: " + СчетНаОплату + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
							КонецПопытки;
							
						КонецЕсли;
						
						//Изменение статуса плана платежей
						ДокумПлатеж = СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
						Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
							Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
								Попытка
									ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
									ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен;
									ДокПлатеж.Записать();
								Исключение
									СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи платежа: " + ДокумПлатеж + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
								КонецПопытки; 
							КонецЕсли;
						КонецЕсли;
						
					//Изменение статуса плана платежей
					ИначеЕсли Источник.Статус = Перечисления.абсСтатусыПлатежей.ГотовКОплате Тогда
						ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ГотовКОплате);
						ИндексТекСтатуса       = мСписокСтатусов.Найти(СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
						Если ИндексТекСтатуса < ИндексСтатусаОтправлен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ГотовКОплате;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							Попытка 
								счетОбъект.Записать();	
							Исключение
								СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи счета: " + СчетНаОплату + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
							КонецПопытки;
							ДокумПлатеж = СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
							Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
								Если ДокумПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
									Попытка
										ДокПлатеж = ДокумПлатеж.ПолучитьОбъект();
										ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Утвержден;
										ДокПлатеж.Записать();
									Исключение
										СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи платежа: " + ДокумПлатеж + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
									КонецПопытки;   
								КонецЕсли;
							КонецЕсли;
							
						ИначеЕсли СчетНаОплату.СтатусСчета = Перечисления.абсСтатусыСчетов.Оплачен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ГотовКОплате;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							Попытка 
								счетОбъект.Записать();	
							Исключение
								СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи счета: " + СчетНаОплату + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
							КонецПопытки;
							ДокумПлатеж = СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
							Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
								Если ДокумПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
									Попытка
										ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
										ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Утвержден;
										ДокПлатеж.Записать();
									Исключение
										СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи платежа: " + ДокумПлатеж + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
									КонецПопытки; 
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли Источник.Статус = Перечисления.абсСтатусыПлатежей.ПеренесенаВГК Тогда
						ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
						ИндексТекСтатуса       = мСписокСтатусов.Найти(СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
						Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ПеренесенВГК;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							Попытка 
								счетОбъект.Записать();	
							Исключение
								СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи счета: " + СчетНаОплату + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
							КонецПопытки; 							
						КонецЕсли;
						
					ИначеЕсли Источник.Статус = Перечисления.абсСтатусыПлатежей.Подготовка ИЛИ (Не Источник.Проведен) ИЛИ (Источник.ПометкаУдаления) Тогда
						СтатусОплатыСчета =СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты;
						Если СтатусОплатыСчета <> Перечисления.абсСтатусыСчетов.Утвержден Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.Утвержден;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							Попытка 
								счетОбъект.Записать();	
							Исключение
								СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи счета: " + СчетНаОплату + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
							КонецПопытки;  							
						КонецЕсли;
						
						ДокумПлатеж = СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
						Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
							Если ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Утвержден Тогда
								Попытка
									ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
									ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Утвержден;
									ДокПлатеж.Записать();
								Исключение  					
									СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, "Ошибка при записи платежа: " + ДокумПлатеж + " при синхронизации статусов: " + ОписаниеОшибки() + ". ");
								КонецПопытки; 
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
		Организация = Источник.Организация;
		Если не ЗначениеЗаполнено(Организация) Тогда
			Организация = СчетНаОплату.Организация;	
		КонецЕсли;	
		
		НаборДанных = РегистрыСведений.абс_СинхронизацияСтатусовСчетовПриОплате.СоздатьНаборЗаписей();
		НаборДанных.Отбор.ПлатежноеПоручение		.Установить(Источник);
		НаборДанных.Отбор.Организация				.Установить(Организация);
		НаборДанных.Отбор.Оплата                    .Установить(Оплата);
		НаборДанных.Отбор.СчетНаОплату              .Установить(СчетНаОплату);
		НаборДанных.Прочитать();
		
		НоваяЗапись = НаборДанных.Добавить();
		НоваяЗапись.ЗРС                    = ЗРС;
		НоваяЗапись.Оплата                 = Оплата;
		НоваяЗапись.СчетНаОплату           = СчетНаОплату;
		НоваяЗапись.Период                 = абс_СерверныеФункции.ПолучитьДатуСервера();
		НоваяЗапись.Активность             = Истина;
		НоваяЗапись.ПлатежноеПоручение     = Источник;
		НоваяЗапись.Организация            = Организация;
		НоваяЗапись.ТребуетсяСинхронизация = Ложь;
		
		Если ВыполненоСОшибками Тогда
			НоваяЗапись.ВыполненоСОшибками = Истина;
			НоваяЗапись.ТекстОшибки = ТекстОшибок;
		КонецЕсли;
		
		НаборДанных.Записать();
		
	КонецЦикла;
	
	ТекстСообщения = "Окончание синхронизации статусов " + абс_СерверныеФункции.ПолучитьДатуСервера();	
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
		
КонецПроцедуры //\\ Процедуры Синхронизации статусов счетов на оплату с оплатами по документам Платежное поручение исходящее

Процедура СообщитьОбОшибкеСинхронизации(ВыполненоСОшибками, ТекстОшибок, ТекстОшибки)
	
	ВыполненоСОшибками = Истина;
	
	ТекстОшибок = ТекстОшибок + ТекстОшибки + Символы.ПС; 
	
	ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);	
	
КонецПроцедуры



// Данную процедуру используем для тестирования отправки сообщений используя ящик АБС
Процедура ОтправитьУведомлениеПользователямABS(СтруктураУведомления) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураУведомления.Получатели) Тогда
		Возврат;
	КонецЕсли;	
	
	// все проверки пройдены, нужно письмо отсылать
	Попытка
		
		СтруктураНовогоПисьма = Новый Структура;
		
		// получатель
		СписокПолучателей = Новый СписокЗначений();
		
		СписокПолучателей.Добавить("d.frolov@abs-soft.ru");
		//СписокПолучателей.Добавить("v.elin@abs-soft.ru");
		//
		//СписокПолучателей.Добавить("s.pavlov@ttk.ru");
		
		//СтруктураНовогоПисьма.Вставить("Кому", "d.frolov@abs-soft.ru");
		СтруктураНовогоПисьма.Вставить("Кому", СписокПолучателей);
		СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000002"));
		СтруктураНовогоПисьма.Вставить("Тема", СтруктураУведомления.Тема);
		СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.HTML);
		
		//ТелоПисьма = "<H1>" + СтруктураУведомления.ТекстЗаголовка + "</H1><H2>ЕИСУП ТТК 1С</H2><P><BR>" + СтруктураУведомления.ТекстУведомления + "<BR><BR><BR><A href=""https://portal.transtk.ru"">Компания ТТК Корпоративный информационный портал</A></P><PRE class="""">Данное сообщение сформировано автоматически.</PRE><PRE class="""">Не отвечайте на это сообщение.</PRE><P>&nbsp;</P>";
		ТелоПисьма = "<H3>" + СтруктураУведомления.Тема + "</H3><P><BR>Тип - " + СтруктураУведомления.ТипОбъекта + "<BR>Код объекта - " + СтруктураУведомления.КодОбъекта + "<BR>Наименование - " + СтруктураУведомления.НаименованиеОбъекта + "<BR>Период - " + СтруктураУведомления.Период + "<BR>Ответственный - " + СтруктураУведомления.Ответственный + "<BR>Статус - " + СтруктураУведомления.Статус + "<BR><BR><PRE ??>Данное сообщение сформировано автоматически. Ответа не требует.</PRE><PRE ??>Для просмотра и принятия решения необходимо зайти в ИСУП ТТК.</PRE>";
		
		ТелоПисьма = ТелоПисьма + "<P><BR>Получатели:" + СтруктураУведомления.Получатели + "<BR>";
		
		СтруктураНовогоПисьма.Вставить("Тело", ТелоПисьма);		
		
		СтруктураПисем = УправлениеЭлектроннойПочтой.НаписатьПисьмо(ПолучитьПользователяДляОтправкиЭлектронныхСообщений(), СтруктураНовогоПисьма, Ложь, Ложь,
		Ложь, Неопределено, Неопределено, Ложь, ЛОЖЬ);
		
		// А теперь отправим письмо.
		Если СтруктураПисем <> Неопределено Тогда				   
			
			СоответствиеПисем = Новый Соответствие();
			
			СсылкаНаПисьмо = Неопределено;
			СтруктураПисем.Свойство("ПисьмоСсылка", СсылкаНаПисьмо);
			
			Если ЗначениеЗаполнено(СсылкаНаПисьмо) Тогда   
				
				СоответствиеПисем.Вставить(СсылкаНаПисьмо); 
				
			КонецЕсли;
			
			ТекстОшибок = "";
			УправлениеЭлектроннойПочтой.ОтправитьПисьма(СоответствиеПисем, СтруктураПисем, ПолучитьПользователяДляОтправкиЭлектронныхСообщений(), Ложь, ТекстОшибок);
			
			Если НЕ ПустаяСтрока(ТекстОшибок) Тогда
				
				СообщитьИнформациюОбОшибкеОтправкиСообщения("Не удалось отправить письмо - уведомление о произошедшей ошибке: " + ТекстОшибок);	
				
			КонецЕсли;
			
		КонецЕсли;			
		
	Исключение
		
		СообщитьИнформациюОбОшибкеОтправкиСообщения("Не удалось отправить письмо - уведомление о произошедшей ошибке: " + ОписаниеОшибки());	
		
	Конецпопытки;
	
КонецПроцедуры

Процедура ОтправитьУведомлениеПользователям(СтруктураУведомления) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураУведомления.Получатели) Тогда
		Возврат;
	КонецЕсли;	
	
	Шел = Новый ComОбъект("WScript.Shell");
	//АдресСкрипта = "c:\Program Files (x86)\1cv82\8.2.13.199\bin\Scripts\mail_alert_isup-ttk_1c.vbs";
	
	// Константы:
	АдресСкрипта 				= Константы.абс_ПутьКСкриптуОтправкиПочты.Получить();	
	АдресПочтовогоСервера 		= "kttk-mail-tech.transtk.ru";
	ПортСервера 				= "25";
	АдресОтпраителя				= "isup-ttk@ttk.ru";
	АдресаАдминистраторов 		= Константы.абс_АдресаАдминистраторовУведомлений.Получить();
	
	Получатели 					= СтруктураУведомления.Получатели;
	ТемаПисьма 					= СтруктураУведомления.Тема;
	//ТелоПисьма 					= "<H1>" + СтруктураУведомления.ТекстЗаголовка + "</H1><H2>ЕИСУП ТТК 1С</H2><P><BR>" + СтруктураУведомления.ТекстУведомления + "<BR><BR><BR><A href=""https://portal.transtk.ru"">Компания ТТК Корпоративный информационный портал</A></P><PRE class="""">Данное сообщение сформировано автоматически.</PRE><PRE class="""">Не отвечайте на это сообщение.</PRE><P>&nbsp;</P>";
	
	ТелоПисьма					= "<H3>" + СтруктураУведомления.Тема + "</H3><P><BR>Тип - " + СтруктураУведомления.ТипОбъекта + "<BR>Код объекта - " + СтруктураУведомления.КодОбъекта + "<BR>Наименование - " + СтруктураУведомления.НаименованиеОбъекта + "<BR>Период - " + СтруктураУведомления.Период + "<BR>Ответственный - " + СтруктураУведомления.Ответственный + "<BR>Статус - " + СтруктураУведомления.Статус + "<BR><BR><PRE ??>Данное сообщение сформировано автоматически. Ответа не требует.</PRE><PRE ??>Для просмотра и принятия решения необходимо зайти в ИСУП ТТК.</PRE>";
	
	// Новая версия скрипта отправки почты от 20111227
	//Вернулось = Шел.Run("cscript.exe """+АдресСкрипта+""" """+АдресПочтовогоСервера+""" """+ПортСервера+""" """+АдресОтпраителя+""" """+АдресаАдминистраторов+""" """+Получатели+""" """+ТемаПисьма+""" """+ТелоПисьма+"""" ,2,Истина);	
	// Пример вызова скрипта
	// cscript.exe //nologo "mail_alert_isup-ttk_1c.vbs" "mail.transtk.ru" "25" "isup-ttk@ttk.ru" "1CAdmin_1@ttk.ru|1CAdmin_2@ttk.ru" "1CUser_1|1CUser_2" "Контрагент Тестовый контрагент (Код: K027853) переведен в статус: Согласование ДЭБ." "Контрагент Тестовый контрагент (Код: K027853) переведен в статус: Согласование ДЭБ." "Контрагент" "К027853" "Тестовый контрагент" "31.10.11 20:18:07" "АБС-Ф" "Согласование ДЭБ"
	Вернулось = Шел.Run("cscript.exe //nologo """+АдресСкрипта+""" """+АдресПочтовогоСервера+""" """+ПортСервера+""" """+АдресОтпраителя+""" """+АдресаАдминистраторов+""" """+Получатели+""" """+ТемаПисьма+""" """+ТемаПисьма+""" """+СтруктураУведомления.ТипОбъекта+""" """+СтруктураУведомления.КодОбъекта+""" """+СтруктураУведомления.НаименованиеОбъекта+""" """+СтруктураУведомления.Период+""" """+СтруктураУведомления.Ответственный+""" """+СтруктураУведомления.Статус+"""", 2, Истина);
	
	ЗаписьЖурналаРегистрации("Отправка уведомлений пользователям", УровеньЖурналаРегистрации.Информация,,,"Отправка уведомлений пользователям завершена с кодом " + Вернулось);	
	
КонецПроцедуры

Процедура СформироватьЭлектронноеПисьмо(СтруктураУведомления) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураУведомления.Получатели) Тогда
		Возврат;
	КонецЕсли;	
	
	// все проверки пройдены, нужно письмо отсылать
	Попытка
		
		СтруктураНовогоПисьма = Новый Структура;
		
		// получатель
		СписокПолучателей = Новый СписокЗначений();
		
		СписокПолучателей.Добавить("ttk@abs-soft.ru");
		//СписокПолучателей.Добавить("v.elin@abs-soft.ru");
		//
		//СписокПолучателей.Добавить("s.pavlov@ttk.ru");
		
		//СтруктураНовогоПисьма.Вставить("Кому", "d.frolov@abs-soft.ru");
		СтруктураНовогоПисьма.Вставить("Кому"					, СписокПолучателей);
		СтруктураНовогоПисьма.Вставить("УчетнаяЗапись"			, Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001"));
		СтруктураНовогоПисьма.Вставить("Тема"					, СтруктураУведомления.Тема);
		СтруктураНовогоПисьма.Вставить("ВидТекста"				, Перечисления.ВидыТекстовЭлектронныхПисем.HTML);
		
		//ТелоПисьма = "<H1>" + СтруктураУведомления.ТекстЗаголовка + "</H1><H2>ЕИСУП ТТК 1С</H2><P><BR>" + СтруктураУведомления.ТекстУведомления + "<BR><BR><BR><A href=""https://portal.transtk.ru"">Компания ТТК Корпоративный информационный портал</A></P><PRE class="""">Данное сообщение сформировано автоматически.</PRE><PRE class="""">Не отвечайте на это сообщение.</PRE><P>&nbsp;</P>";
		ТелоПисьма = "<H3>" + СтруктураУведомления.Тема + "</H3><P><BR>Тип - " + СтруктураУведомления.ТипОбъекта + "<BR>Код объекта - " + СтруктураУведомления.КодОбъекта + "<BR>Наименование - " + СтруктураУведомления.НаименованиеОбъекта + "<BR>Период - " + СтруктураУведомления.Период + "<BR>Ответственный - " + СтруктураУведомления.Ответственный + "<BR>Статус - " + СтруктураУведомления.Статус + "<BR><BR><PRE ??>Данное сообщение сформировано автоматически. Ответа не требует.</PRE><PRE ??>Для просмотра и принятия решения необходимо зайти в ИСУП ТТК.</PRE>";
		
		ТелоПисьма = ТелоПисьма + "<P><BR>Получатели:" + СтруктураУведомления.Получатели + "<BR>";
		
		СтруктураНовогоПисьма.Вставить("Тело", ТелоПисьма);		
		
		СтруктураПисем = УправлениеЭлектроннойПочтой.НаписатьПисьмо(ПолучитьПользователяДляОтправкиЭлектронныхСообщений(), СтруктураНовогоПисьма, Ложь, Ложь,
		Ложь, Неопределено, Неопределено, Ложь, ЛОЖЬ);
		
		//// А теперь отправим письмо.
		//Если СтруктураПисем <> Неопределено Тогда				   
		//					   
		//	СоответствиеПисем = Новый Соответствие();
		//	
		//	СсылкаНаПисьмо = Неопределено;
		//	СтруктураПисем.Свойство("ПисьмоСсылка", СсылкаНаПисьмо);
		//	
		//	Если ЗначениеЗаполнено(СсылкаНаПисьмо) Тогда   
		//		
		//		СоответствиеПисем.Вставить(СсылкаНаПисьмо); 
		//		
		//	КонецЕсли;
		//							
		//	ТекстОшибок = "";
		//	УправлениеЭлектроннойПочтой.ОтправитьПисьма(СоответствиеПисем, СтруктураПисем, ПолучитьПользователяДляОтправкиЭлектронныхСообщений(), Ложь, ТекстОшибок);
		//	
		//	Если НЕ ПустаяСтрока(ТекстОшибок) Тогда
		//		
		//		СообщитьИнформациюОбОшибкеОтправкиСообщения("Не удалось отправить письмо - уведомление о произошедшей ошибке: " + ТекстОшибок);	
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;			
		
	Исключение
		
		СообщитьИнформациюОбОшибкеОтправкиСообщения("Не удалось отправить письмо - уведомление о произошедшей ошибке: " + ОписаниеОшибки());	
		
	Конецпопытки;
	
КонецПроцедуры

//АБС ВСТАВКА 35763  05.12.2013 11:41:46  Стрельцов
Процедура ВыполнитьРассылкуОСВдляМатериальноОтветственныхЛиц(МОЛ, Склад, АдресЭлПочтыМОЛ, СтруктураДокументовОСВ, ОшибкаОтправкиРассылки = Неопределено) Экспорт
		
	//Создание Excel-файлов на основе создаваемых табличных документов отчета ОСВ по счету
	ИменаФайловОСВ = СформироватьФайлыОСВНаСервере(СтруктураДокументовОСВ, СокрЛП(Склад.Наименование));
	
	//Инициализация системной учетной записи, от которой будет происходить рассылка
	//===============================================================================
	objCdoConfig = Новый COMОбъект("CDO.Configuration"); 
	objCdoConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendusing").Value = 2; 
	objCdoConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpserver").Value = "kttk-mail-tech.transtk.ru"; //"mail.transtk.ru"; 
	objCdoConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpserverport").Value	= 25;
	
	//objCdoConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendusername") = xUserName;
	//objCdoConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendpassword") = xUserPassword;
	
	//objCdoConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpauthenticate") = 1; 
	objCdoConfig.Fields.Update();
	
	//Выполнение рассылки по каждому адресу МОЛ
	//====================================================================
	objCdoMessage = Новый COMОбъект("CDO.Message"); 
	objCdoMessage.BodyPart.Charset = "windows-1251"; 
	objCdoMessage.Configuration = objCdoConfig; 
	objCdoMessage.From = "status.eisup-ttk@ttk.ru";//"eisup-ttk@ttk.ru"; 
	objCdoMessage.To = СокрЛП(АдресЭлПочтыМОЛ);
	objCdoMessage.Subject = "Остатки на складе по данным БУ"; 
	objCdoMessage.TextBody = "Уважаемый "+СокрЛП(МОЛ.Наименование)+"!
							 |Просьба ознакомится с остатками номенклатуры на вашем складе по данным БУ, в файлах, во вложении к данному письму!";
							 
							 
	//Помещение файлов во вложение к письму
	ВыполнитьРассылку = Ложь;
	Для каждого ИмяФайлаОСВ Из ИменаФайловОСВ Цикл
		ФайлОСВ = Новый Файл(ИмяФайлаОСВ);
		Если ФайлОСВ.Существует() Тогда
			objCdoMessage.AddAttachment(ИмяФайлаОСВ);
			ВыполнитьРассылку = Истина;
		КонецЕсли;				
	КонецЦикла; 

	ОшибкаОтправкиРассылки = Новый Структура;
	
	//АБС ВСТАВКА 37505  16.01.2014 18:42:31  Стрельцов
	Если Не ВыполнитьРассылку Тогда
		ОшибкаОтправкиРассылки.Вставить("Ошибка", Истина);
		ОшибкаОтправкиРассылки.Вставить("ОписаниеОшибки","отсутствуют остатки номенклатуры по данному складу");
		Возврат;
	КонецЕсли;
	//\\АБС ВСТАВКА 37505 КОНЕЦ
	
	Попытка
		objCdoMessage.Send();
		//Сообщить(СокрЛП(МОЛ.Наименование)+": Сообщение успешно отправлено по адресу: """+СокрЛП(АдресЭлПочтыМОЛ)+"""", СтатусСообщения.Информация);
		//Вернулось=Ложь;
	Исключение
		ОшибкаОтправкиРассылки.Вставить("Ошибка", Истина);
		ОшибкаОтправкиРассылки.Вставить("ОписаниеОшибки",ОписаниеОшибки());
		//Сообщить(СокрЛП(МОЛ.Наименование)+": Ошибка при отправке сообщения: "+ОписаниеОшибки(), СтатусСообщения.Важное); 
	КонецПопытки;
	
	//Удаление файлов
	Для каждого ИмяФайлаОСВ Из ИменаФайловОСВ Цикл
		ФайлОСВ = Новый Файл(ИмяФайлаОСВ);
		Если ФайлОСВ.Существует() Тогда
			УдалитьФайлы(ИмяФайлаОСВ);
		КонецЕсли;				
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьФайлыОСВНаСервере(сДокументыОСВ, НаименованиеСклада)
	
	Результат = Новый Массив;
	
	//===============================Счета 10============================================
	//АБС ИЗМЕНЕНИЕ 35763  10.12.2013 18:05:10  Стрельцов
	Если сДокументыОСВ.Свойство("ТабДокументОСВ_10") Тогда
		ТабДокумент = сДокументыОСВ.ТабДокументОСВ_10.Получить();
		
		//АБС ВСТАВКА 37505  16.01.2014 18:42:31  Стрельцов
		ИмяФайлаОСВ_10 = КаталогВременныхФайлов()+"10_"+СокрЛП(НаименованиеСклада)+".XLS";
		ТабДокумент.Записать(ИмяФайлаОСВ_10, ТипФайлаТабличногоДокумента.XLS);
		Результат.Добавить(ИмяФайлаОСВ_10);
		//\\АБС ВСТАВКА 37505 КОНЕЦ
	КонецЕсли;
	//\\АБС ИЗМЕНЕНИЕ 35763 КОНЕЦ 
		
	//===============================Счет 08.4============================================
	//АБС ИЗМЕНЕНИЕ 35763  10.12.2013 18:05:10  Стрельцов
	Если сДокументыОСВ.Свойство("ТабДокументОСВ_084") Тогда
		ТабДокумент = сДокументыОСВ.ТабДокументОСВ_084.Получить();
		
		//АБС ВСТАВКА 37505  16.01.2014 18:42:31  Стрельцов
		ИмяФайлаОСВ_084 = КаталогВременныхФайлов()+"08-4_"+СокрЛП(НаименованиеСклада)+".XLS";
		ТабДокумент.Записать(ИмяФайлаОСВ_084, ТипФайлаТабличногоДокумента.XLS);
		Результат.Добавить(ИмяФайлаОСВ_084);
		//\\АБС ВСТАВКА 37505 КОНЕЦ
	КонецЕсли;
	//\\АБС ИЗМЕНЕНИЕ 35763 КОНЕЦ
	
	Возврат Результат;
	
КонецФункции
//АБС ВСТАВКА 35763 КОНЕЦ 


//АБС ВСТАВКА 34171  06.11.2013 12:01:52  Мачихина

Процедура ОтправитьУведомлениеПользователямОРегламентныхРаботах(Кому,АдресЭлектроннойПочты,Тема,Тело) Экспорт
	
	ТестоваяИБ=Константы.абс_ЭтоТестоваяБаза.Получить();
	
	Если НЕ ЗначениеЗаполнено(Кому) и НЕ ТестоваяИБ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТестоваяИБ Тогда
		КомуСтрокой="s.machihina@abs-soft.ru";
	Иначе
		КомуСтрокой="";
	КонецЕсли;
	
	objCdoConfig = Новый COMОбъект("CDO.Configuration"); 
	objCdoConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendusing").Value = 2; 
	objCdoConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpserver").Value = "kttk-mail-tech.transtk.ru"; //"mail.transtk.ru"; 
	objCdoConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpserverport").Value	= 25;
	
	//objCdoConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendusername") = xUserName;
	//objCdoConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendpassword") = xUserPassword;
	
	//objCdoConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpauthenticate") = 1; 
	objCdoConfig.Fields.Update();
	
	//objCdoMessage = CreateObject("CDO.Message"); 
	objCdoMessage = Новый COMОбъект("CDO.Message"); 
	objCdoMessage.BodyPart.Charset = "windows-1251"; 
	objCdoMessage.Configuration = objCdoConfig; 
	objCdoMessage.From = ?(ЗначениеЗаполнено(АдресЭлектроннойПочты),СокрЛП(АдресЭлектроннойПочты),"eisup-ttk@ttk.ru");//"eisup-ttk@ttk.ru"; 
	objCdoMessage.To = ?(ПустаяСтрока(КомуСтрокой),Кому,КомуСтрокой);
	objCdoMessage.Subject = Тема; 
	objCdoMessage.TextBody = Тело;
	
	//Вернулось=Истина;

	Попытка
		objCdoMessage.Send();
		Сообщить("Сообщение успешно отправлено: "+СокрЛП(Кому));
		//Вернулось=Ложь;
	Исключение
		Сообщить("Ошибка при отправке сообщения: "+ОписаниеОшибки()); 
	КонецПопытки;
	
	//// Константы:
	//АдресСкрипта 				= Константы.абс_ПутьКСкриптуОтправкиПочты.Получить();	
	//АдресПочтовогоСервера 		= "mail.transtk.ru";
	//ПортСервера 				= "25";
	//АдресОтпраителя				= "isup-ttk@ttk.ru";
	//АдресаАдминистраторов 		= Константы.абс_АдресаАдминистраторовУведомлений.Получить();
	//
	//Получатели 					= СтруктураУведомления.Получатели;
	//ТемаПисьма 					= СтруктураУведомления.Тема;
	//ТелоПисьма					= "<H3>" + СтруктураУведомления.Тема + "</H3><P><BR>Тип - " + СтруктураУведомления.ТипОбъекта + "<BR>Код объекта - " + СтруктураУведомления.КодОбъекта + "<BR>Наименование - " + СтруктураУведомления.НаименованиеОбъекта + "<BR>Период - " + СтруктураУведомления.Период + "<BR>Ответственный - " + СтруктураУведомления.Ответственный + "<BR>Статус - " + СтруктураУведомления.Статус + "<BR><BR><PRE ??>Данное сообщение сформировано автоматически. Ответа не требует.</PRE><PRE ??>Для просмотра и принятия решения необходимо зайти в ИСУП ТТК.</PRE>";
	//
	//Вернулось = Шел.Run("cscript.exe //nologo """+АдресСкрипта+""" """+АдресПочтовогоСервера+""" """+ПортСервера+""" """+АдресОтпраителя+""" """+АдресаАдминистраторов+""" """+Получатели+""" """+ТемаПисьма+""" """+ТемаПисьма+""" """+СтруктураУведомления.ТипОбъекта+""" """+СтруктураУведомления.КодОбъекта+""" """+СтруктураУведомления.НаименованиеОбъекта+""" """+СтруктураУведомления.Период+""" """+СтруктураУведомления.Ответственный+""" """+СтруктураУведомления.Статус+"""", 2, Истина);
	//
	//ЗаписьЖурналаРегистрации("Отправка уведомлений пользователям о регламентных работах", УровеньЖурналаРегистрации.Информация,,,"Отправка уведомлений пользователям завершена с кодом (ЛОЖЬ-ОТПРАВКА УСПЕШНА) " + Вернулось);	
	
КонецПроцедуры

//АБС ВСТАВКА 34171 КОНЕЦ

Функция ПолучитьВидБП(БПСсылка)
	
	Если ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеДоговоров") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсЗакрытиеДоговоров") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеКонтрагентов") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеКонтрагентов;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсЗавершениеОтношенийСКонтрагентами") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеКонтрагентов;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсПереутверждениеКонтрагентов") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеКонтрагентов;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеЗакупочногоЗаказа") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеСчетаНаОплату") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсУточнениеСчетаНаОплату") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеНоменклатуры") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеНоменклатуры;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеПервичныхДокументов") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеПервичныхДокументов;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсРекласификацияБюджета") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.РекласификацияБюджета;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсЗаявкаВПоддержку") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.ЗаявкиВПоддержку;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеБюджета") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеПланаБюджета;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсИзменениеРеквизитовКонтрагентов") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.ЗаявкаНаИзменениеРеквизитов;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеСтатейЗатрат") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеСтатейЗатрат;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеНоменклатурныхГрупп") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеНоменклатурныхГрупп;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеДоговоровПодряда") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоровПодряда;
	ИначеЕсли ТипЗнч(БПСсылка) = Тип("БизнесПроцессСсылка.абсСогласованиеАктовПриёмки") Тогда
		Возврат Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеАктовПриёмкиВыполненныхРабот;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции

Процедура СообщитьИнформациюОбОшибкеОтправкиСообщения(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка);	
	
КонецПроцедуры

Функция ПолучитьПользователяДляОтправкиЭлектронныхСообщений()
	
	#Если Сервер Тогда
		// Выполнение отправки писем фоновым заданием
		Возврат Справочники.Пользователи.ПустаяСсылка();
	#Иначе
		Возврат ПараметрыСеанса.ТекущийПользователь;
	#КонецЕсли
	
КонецФункции

//Процедуры синхронизации статусов Счетов на оплату и Платежного поручения
//
Процедура ВыполнитьСинхронизацию() Экспорт
	
	мСписокСтатусов = абс_БизнесПроцессы.ПолучитьМассивСтатусовСчетаНаОплату();
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.СчетНаОплату,
	              |	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.СтатусСчета,
	              |	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ПлатежноеПоручение,
	              |	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.Оплата,
	              |	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ЗРС
	              |ПОМЕСТИТЬ ВТ_СчетаДляСинхронизации
	              |ИЗ
	              |	РегистрСведений.абс_СинхронизацияСтатусовСчетовПриОплате.СрезПоследних КАК абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних
	              |ГДЕ
	              |	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ТребуетсяСинхронизация
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ВТ_СчетаДляСинхронизации.СчетНаОплату,
	              |	ВТ_СчетаДляСинхронизации.ПлатежноеПоручение,
	              |	ВТ_СчетаДляСинхронизации.Оплата,
	              |	ВТ_СчетаДляСинхронизации.ЗРС,
	              |	абс_СчетНаОплатуОплаты.ПланПлатежей
	              |ИЗ
	              |	ВТ_СчетаДляСинхронизации КАК ВТ_СчетаДляСинхронизации
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	              |		ПО ВТ_СчетаДляСинхронизации.СчетНаОплату = абс_СчетНаОплатуОплаты.Ссылка
	              |			И ВТ_СчетаДляСинхронизации.Оплата = абс_СчетНаОплатуОплаты.Оплата";
	// АБС Вставка Гетц. 18.02.2014 Изменен запрос (исключено лишнее соединение и поле "ПланПлатежей")
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.СчетНаОплату,
	              |	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.СтатусСчета,
	              |	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ПлатежноеПоручение,
	              |	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.Оплата,
	              |	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ЗРС
	              |ИЗ
	              |	РегистрСведений.абс_СинхронизацияСтатусовСчетовПриОплате.СрезПоследних КАК абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних
	              |ГДЕ
	              |	абс_СинхронизацияСтатусовСчетовПриОплатеСрезПоследних.ТребуетсяСинхронизация";
	// АБС Вставка Гетц. 18.02.2014 \\
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		Источник	 = Результат.ПлатежноеПоручение;
		ЗРС      	 = Результат.ЗРС;
		СчетНаОплату = Результат.СчетНаОплату;
		
		//1. Синхронизация статусов Заявки на расходование средств и Платежного поручения исходящего
		Если Источник.Статус<> ЗРС.Статус Тогда
			Об = ЗРС.ПолучитьОбъект();
			Об.Статус = Источник.Статус;
			Об.ОбменДанными.Загрузка = Истина;
			Об.Записать();
		КонецЕсли;
		//\\1.
		СтруктураОтбора = Новый структура("Оплата");
		СтруктураОтбора.Вставить("Оплата",Результат.Оплата);
		
		МассивСтрок =СчетНаОплату.Оплаты.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество()>0 Тогда
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				Если  СчетНаОплату.Оплаты[СтрокаМассива.НомерСтроки-1].ПлатежноеПоручение <> Источник.Ссылка Тогда
					СчетОбъект = СчетНаОплату.ПолучитьОбъект();
					СчетОбъект.Оплаты[Строкамассива.НомерСтроки-1].ПлатежноеПоручение = Источник.Ссылка;
					Если Источник.Ссылка.Оплачено И Источник.Проведен Тогда
						СчетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.Оплачен;
						ДокумПлатеж = счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
						Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
							Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
								ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
								ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен;
								ДокПлатеж.Записать();
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.Отправлено Тогда
						ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
						ИндексТекСтатуса       = мСписокСтатусов.Найти(СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
						Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ОтправленВБанк;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							счетОбъект.Записать();	
						КонецЕсли;
						ДокумПлатеж = счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
						Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
							Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
								ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
								ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен;
								ДокПлатеж.Записать();
							КонецЕсли;
						КонецЕсли;
						
						
					ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.ГотовКОплате Тогда
						ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ГотовКОплате);
						ИндексТекСтатуса       = мСписокСтатусов.Найти(СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
						Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ГотовКОплате;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							счетОбъект.Записать();	
						КонецЕсли;
					ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.ПеренесенаВГК Тогда
						ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
						ИндексТекСтатуса       = мСписокСтатусов.Найти(СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
						Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ПеренесенВГК;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							счетОбъект.Записать();	
						КонецЕсли;
						
						//3082
					ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.Подготовка ИЛИ (Не Источник.Ссылка.Проведен) Тогда
						
						СтатусОплатыСчета = СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты;
						Если СтатусОплатыСчета<> Перечисления.абсСтатусыСчетов.Утвержден Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.Утвержден;	
						КонецЕсли;
						ДокумПлатеж = СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
						Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
							Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Утвержден Тогда
								ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
								ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Утвержден;
								ДокПлатеж.Записать();
							КонецЕсли;
						КонецЕсли;
						//3082
						
					КонецЕсли;	
					СчетОбъект.ОбменДанными.Загрузка = Истина;
					СчетОбъект.Записать();
				Иначе
					
					Если Источник.Ссылка.Оплачено И Источник.Ссылка.Проведен Тогда
						Если СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты<>Перечисления.абсСтатусыСчетов.Оплачен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.Оплачен;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							счетОбъект.Записать();
						КонецЕсли;
						//Изменение статуса плана платежей
						ДокумПлатеж = СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
						Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
							Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
								ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
								ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен;
								ДокПлатеж.Записать();
							КонецЕсли;
						КонецЕсли;
						//Изменение статуса плана платежей
						
					ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.Отправлено Тогда
						ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
						ИндексТекСтатуса       = мСписокСтатусов.Найти(СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
						Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ОтправленВБанк;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							счетОбъект.Записать();	
						КонецЕсли;
						//Изменение статуса плана платежей
						ДокумПлатеж = СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
						Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
							Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
								ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
								ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен;
								ДокПлатеж.Записать();
							КонецЕсли;
						КонецЕсли;
						//Изменение статуса плана платежей
					ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.ГотовКОплате Тогда
						ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ГотовКОплате);
						ИндексТекСтатуса       = мСписокСтатусов.Найти(СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
						Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ГотовКОплате;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							счетОбъект.Записать();	
						КонецЕсли;
					ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.ПеренесенаВГК Тогда
						ИндексСтатусаОтправлен = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
						ИндексТекСтатуса       = мСписокСтатусов.Найти(СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты);
						Если ИндексТекСтатуса< ИндексСтатусаОтправлен Тогда
							счетОбъект = СчетНаОплату.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.ПеренесенВГК;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							счетОбъект.Записать();	
						КонецЕсли;
					ИначеЕсли Источник.Ссылка.Статус = Перечисления.абсСтатусыПлатежей.Подготовка Тогда
						СтатусОплатыСчета =СчетНаОплату.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты;
						Если СтатусОплатыСчета<> Перечисления.абсСтатусыСчетов.Утвержден Тогда
							счетОбъект = СтрокаМассива.Счет.ПолучитьОбъект();
							счетОбъект.Оплаты[Строкамассива.НомерСтроки-1].СтатусОплаты = Перечисления.абсСтатусыСчетов.Утвержден;
							СчетОбъект.ОбменДанными.Загрузка = Истина;
							счетОбъект.Записать();	
						КонецЕсли;
						ДокумПлатеж = СтрокаМассива.Счет.Оплаты[Строкамассива.НомерСтроки-1].ПланПлатежей;
						Если ЗначениеЗаполнено(ДокумПлатеж) Тогда
							Если  ДокумПлатеж.СтатусПлана <> Перечисления.абс_СтатусыПланаПлатежей.Утвержден Тогда
								ДокПлатеж =ДокумПлатеж.ПолучитьОбъект();
								ДокПлатеж.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Утвержден;
								ДокПлатеж.Записать();
							КонецЕсли;
						КонецЕсли;
						//3082
						
						
						
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура абс_ФоновоеЗаданиеАБС() Экспорт
	
	МодульФоновогоЗадания = Константы.абс_МодульФоновогоЗаданияАБС.Получить();
	
	Если НЕ ЗначениеЗаполнено(МодульФоновогоЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	ОбъектЗадания = МодульФоновогоЗадания.ПолучитьОбъект();	
	ОбъектЗадания.ВыполнитьМодуль();	
	
КонецПроцедуры

Процедура ЗарегестрироватьУведомлениеСопровожденияЕИСУП(Ссылка, Статус) Экспорт
	
	Если НЕ Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение И НЕ Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОшибкаТестирования
		Тогда
		Возврат;
		
	КонецЕсли;
	
	ГруппаИсполнителейАБС = Справочники.Пользователи.НайтиПоКоду("АБС");
	
	Если не ЗначениеЗаполнено(Ссылка.Исполнитель) или не Ссылка.Исполнитель.ПринадлежитЭлементу(ГруппаИсполнителейАБС) Тогда
		Возврат;
	КонецЕсли;
	
	НЗ = РегистрыСведений.абс_УведомленияСопровожденияЕИСУП.СоздатьНаборЗаписей();
	
	НЗ.Отбор.ЗаявкаВПоддрежку.Установить(Ссылка);
	НЗ.Отбор.Статус.Установить(Статус);
	
	НЗ.Прочитать();
	
	ЗаписьУведомление = НЗ.Добавить();
	ЗаписьУведомление.ЗаявкаВПоддрежку 			= Ссылка;
	ЗаписьУведомление.Статус 					= Статус;
	
	ЗаписьУведомление.Период 					= абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьУведомление.УведомлениеОтправлено 	= Ложь;
	
	НЗ.Записать();
	
КонецПроцедуры

Процедура СнятьРегистрациюУведомленияСопровожденияЕИСУП(Ссылка, Статус)
	
	НЗ = РегистрыСведений.абс_УведомленияСопровожденияЕИСУП.СоздатьНаборЗаписей();
	
	НЗ.Отбор.ЗаявкаВПоддрежку.Установить(Ссылка);
	НЗ.Отбор.Статус.Установить(Статус);
	
	НЗ.Прочитать();
	
	ЗаписьУведомление = НЗ.Добавить();
	ЗаписьУведомление.ЗаявкаВПоддрежку 			= Ссылка;
	ЗаписьУведомление.Статус 					= Статус;
	
	ЗаписьУведомление.Период 					= абс_СерверныеФункции.ПолучитьДатуСервера();
	ЗаписьУведомление.УведомлениеОтправлено 	= Истина;
	
	НЗ.Записать();
	
КонецПроцедуры

Процедура абс_УведомленияСопровожденияЕИСУП() Экспорт
	
	МодульОтправкиУведомления = Константы.абс_МодульОтправкиУведомленийСопровожденияЕИСУП.Получить();
	
	Если НЕ ЗначениеЗаполнено(МодульОтправкиУведомления) Тогда
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	ЗапросУведомления = Новый Запрос(
	"ВЫБРАТЬ
	|	абс_УведомленияСопровожденияЕИСУПСрезПоследних.ЗаявкаВПоддрежку КАК ЗаявкаВПоддержку,
	|	абс_УведомленияСопровожденияЕИСУПСрезПоследних.Статус,
	|	абс_УведомленияСопровожденияЕИСУПСрезПоследних.УведомлениеОтправлено
	|ИЗ
	|	РегистрСведений.абс_УведомленияСопровожденияЕИСУП.СрезПоследних(&ТекДата, ) КАК абс_УведомленияСопровожденияЕИСУПСрезПоследних
	|ГДЕ
	|	(НЕ абс_УведомленияСопровожденияЕИСУПСрезПоследних.УведомлениеОтправлено)
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_УведомленияСопровожденияЕИСУПСрезПоследних.ЗаявкаВПоддрежку,
	|	абс_УведомленияСопровожденияЕИСУПСрезПоследних.Статус,
	|	абс_УведомленияСопровожденияЕИСУПСрезПоследних.УведомлениеОтправлено");
	
	ЗапросУведомления.УстановитьПараметр("ТекДата", абс_СерверныеФункции.ПолучитьДатуСервера() - 1);
	
	ВыборкаУведомления = ЗапросУведомления.Выполнить().Выбрать();
	
	Пока ВыборкаУведомления.Следующий() Цикл
		
		Справочники.абс_МодулиДляВыполнения.ВыполнитьМодуль(МодульОтправкиУведомления, ВыборкаУведомления);   		
		СнятьРегистрациюУведомленияСопровожденияЕИСУП(ВыборкаУведомления.ЗаявкаВПоддержку, ВыборкаУведомления.Статус);
		
	КонецЦикла;
	
КонецПроцедуры

//АБС_Родин
Функция ПолучитьПодразделениеИзКонстанты(НаименованиеКонтанты) Экспорт

	Возврат СокрЛП(Константы[НаименованиеКонтанты].Получить().Наименование)

КонецФункции 
 
Функция ПолучитьПодразделениеПоУмолчанию(мОрганизация) Экспорт
	Если ЗначениеЗаполнено(мОрганизация) Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК ПодразделениеОрганизации
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Владелец = &Владелец
		|	И ПодразделенияОрганизаций.абс_ЯвляетсяДирекцией = ИСТИНА";
		
		Запрос.УстановитьПараметр("Владелец", мОрганизация);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.ПодразделениеОрганизации;	
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьМассивРолейПользователя(ИД) Экспорт
	
	ТаблицаРолей = Новый ТаблицаЗначений;
	ТаблицаРолей.Колонки.Добавить("Имя"); 
	ТаблицаРолей.Колонки.Добавить("Синоним");
	
	Если ИД <> Null Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИД);		
		Если ПользовательИБ <> Неопределено Тогда
			Для каждого Роль Из ПользовательИБ.Роли Цикл
				НоваяСтрока = ТаблицаРолей.Добавить();
				НоваяСтрока.Имя        = Роль.Имя;
				НоваяСтрока.Синоним    = Роль.Синоним;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаРолей;
	
КонецФункции 

Функция ПолучитьМассивРолейПользователейИСУЗК(СписокПользователей)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_РолиПользователейВИСУЗК.Роль.НаименованиеЗаданноеВКонфигураторе КАК ИмяРоли,
	|	абс_РолиПользователейВИСУЗК.Пользователь
	|ИЗ
	|	РегистрСведений.абс_РолиПользователейВИСУЗК КАК абс_РолиПользователейВИСУЗК
	|ГДЕ
	|	абс_РолиПользователейВИСУЗК.Роль.РольИСУЗК = ИСТИНА
	|	И абс_РолиПользователейВИСУЗК.Пользователь В(&СписокПользователей)";
	
	Запрос.УстановитьПараметр("СписокПользователей", СписокПользователей);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

Функция ПолучитьМассивРолейБППользователейИСУЗК(СписокПользователей)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиИИсполнители.Роль КАК ИмяРоли,
	|	РолиИИсполнители.Исполнитель КАК Пользователь
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Роль.абс_РольИСУЗК = ИСТИНА
	|	И РолиИИсполнители.Исполнитель В(&СписокПользователей)";
	
	Запрос.УстановитьПараметр("СписокПользователей", СписокПользователей);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СоздатьПользователяИБ(ФИО,ДоменноеИмя,Организация) Экспорт
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ФИО);
	Префикс = "";
	
	Если ПользовательИБ <> Неопределено Тогда
		Префикс = СокрЛП(Организация); 	
	КонецЕсли;	
	
	ПользовательИБ                           = ПользователиИнформационнойБазы.СоздатьПользователя();
	ПользовательИБ.Имя                       = СокрЛП(ФИО + " "+ Префикс);
	ПользовательИБ.АутентификацияОС			 = Истина;
	ПользовательИБ.АутентификацияСтандартная = Ложь;
	ПользовательИБ.ПолноеИмя                 = СокрЛП(ФИО + " " + Префикс); 
	ПользовательИБ.ПоказыватьВСпискеВыбора   = Истина;
	ПользовательИБ.ПользовательОС            = ДоменноеИмя;
	ПользовательИБ.Записать();
	
	Возврат ПользовательИБ;		
КонецФункции

Функция ПолучитьПользователяИБ(ИД)  Экспорт
	Возврат ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИД.Пользователь.ИдентификаторПользователяИБ);	
КонецФункции	

Функция СоздатьНовогоПользователя(ФИО,Сотрудник,ДоменноеИмя,ПользовательИБ,ГруппаПользователя,Организация) Экспорт
	//Создание нового пользователя
	НовыйПользователь = Справочники.Пользователи.НайтиПоНаименованию(ПользовательИБ.Имя);
	
	Если НовыйПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
		НовыйПользователь  = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Родитель = ГруппаПользователя;
		НовыйПользователь.Наименование = ПользовательИБ.Имя;
		НовыйПользователь.Код          = ПользовательИБ.Имя;
		НовыйПользователь.ФизЛицо      = Сотрудник.Физлицо;
		НовыйПользователь.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
		НовыйПользователь.абс_Сотрудник = Сотрудник;
		НовыйПользователь.абс_ИмяВДомене = ДоменноеИмя;
		НовыйПользователь.Записать();
	КонецЕсли; 
	
	//Настройки пользователя
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(НовыйПользователь.Ссылка);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись =  НаборЗаписей.Добавить();
		
		НоваяЗапись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОтражатьДокументыВБухгалтерскомУчете;
		НоваяЗапись.Пользователь = НовыйПользователь.Ссылка;
		НоваяЗапись.Значение     = Истина;
		
		НоваяЗапись =  НаборЗаписей.Добавить();
		НоваяЗапись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОтражатьДокументыВНалоговомУчете;
		НоваяЗапись.Пользователь = НовыйПользователь.Ссылка;
		НоваяЗапись.Значение     = Истина;
		
		НоваяЗапись =  НаборЗаписей.Добавить();
		НоваяЗапись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОтражатьДокументыВУправленческомУчете;
		НоваяЗапись.Пользователь = НовыйПользователь.Ссылка;
		НоваяЗапись.Значение     = Истина;
		
		НоваяЗапись =  НаборЗаписей.Добавить();
		НоваяЗапись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация;
		НоваяЗапись.Пользователь = НовыйПользователь.Ссылка;
		НоваяЗапись.Значение     = Организация; 
		
		НоваяЗапись =  НаборЗаписей.Добавить();
		НоваяЗапись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный;
		НоваяЗапись.Пользователь = НовыйПользователь.Ссылка;
		НоваяЗапись.Значение     = НовыйПользователь.Ссылка;
		
		НоваяЗапись =  НаборЗаписей.Добавить();
		НоваяЗапись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяСтавкаНДС;
		НоваяЗапись.Пользователь = НовыйПользователь.Ссылка;
		НоваяЗапись.Значение     = Перечисления.СтавкиНДС.НДС18;
		
		НоваяЗапись =  НаборЗаписей.Добавить();
		НоваяЗапись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяВалютаВзаиморасчетов;
		НоваяЗапись.Пользователь = НовыйПользователь.Ссылка;
		НоваяЗапись.Значение     = Справочники.Валюты.НайтиПоКоду("643");
		
		НоваяЗапись =  НаборЗаписей.Добавить();
		НоваяЗапись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяЕдиницаПоКлассификатору;
		НоваяЗапись.Пользователь = НовыйПользователь.Ссылка;
		НоваяЗапись.Значение     = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		
		НоваяЗапись =  НаборЗаписей.Добавить();
		НоваяЗапись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеВедениеВзаиморасчетовПоДоговорам;
		НоваяЗапись.Пользователь = НовыйПользователь.Ссылка;
		НоваяЗапись.Значение     = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
	
	Возврат НовыйПользователь;
КонецФункции // ()

Функция ПолучитьПодразделение(Документ)  Экспорт
	Возврат Документ.Сотрудник.ПодразделениеОрганизации;	
КонецФункции

Функция ПолучитьТекущееПодразделение(Документ)  Экспорт
	Возврат Документ.Сотрудник.ТекущееПодразделениеОрганизации;	 //АБС Коломиец 26620
КонецФункции

Функция ОпределитьПодразделениеПоУмолчанию(Подразделение) Экспорт
	ПодразделениеИзКонстант = Ложь;
	
	Если Константы.абс_ПодразделениеДФМ.Получить() = Подразделение или  Константы.абс_ПодразделениеОФК.Получить() = Подразделение или
		Константы.абс_ПодразделениеДРУ.Получить() = Подразделение или  Константы.абс_ПодразделениеПД.Получить()   = Подразделение или
		Константы.абс_ПодразделениеДирККР.Получить() = Подразделение Тогда 
		ПодразделениеИзКонстант = Истина;	
	КонецЕсли;
	
	Возврат   ПодразделениеИзКонстант;
КонецФункции

Процедура ПеребратьРекурсивно(ВыборкаСсылка,ИерархияЦФО) Экспорт
	ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылка.Следующий() Цикл
		Если ТипЗнч(ВыборкаСсылка.Ссылка) = Тип("СправочникСсылка.Подразделения") Тогда
			Если НЕ ВыборкаСсылка.Ссылка.ЭтоГруппа Тогда
				ИерархияЦФО = ИерархияЦФО + ?(ИерархияЦФО = "","","/") + СокрЛП(ВыборкаСсылка.Ссылка.Наименование);
			КонецЕсли;
		КонецЕсли;
		ПеребратьРекурсивно(ВыборкаСсылка,ИерархияЦФО);   
	КонецЦикла;	   
КонецПроцедуры  

Функция ПолучитьИерархиюЦФО(ЦФО) Экспорт
    ИерархияЦФО = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Подразделения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	Подразделения.Ссылка = &Ссылка
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";

	Запрос.УстановитьПараметр("Ссылка", ЦФО);
	Результат = Запрос.Выполнить();
	ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПеребратьРекурсивно(ВыборкаСсылка,ИерархияЦФО);
	
	Возврат ИерархияЦФО;
КонецФункции 

Функция ПолучитьСтатусОрганизацииСотрудника(ОС) Экспорт
	
	Если ОС.абс_ИнициаторВводаНового.абс_Сотрудник.Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОрганизациюСотрудника(абс_ИнициаторВводаНового) Экспорт
	
	Возврат абс_ИнициаторВводаНового.абс_Сотрудник.Организация;
	
КонецФункции


Процедура ДобавитьПодразделениеВТЧ(ДокументОбъект) Экспорт
	 
	 СтрокаТЧ = ДокументОбъект.Подразделения.Найти(ДокументОбъект.Сотрудник.ПодразделениеОрганизации); 
	 Если СтрокаТЧ = Неопределено Тогда
		 НоваяСтрока = ДокументОбъект.Подразделения.Добавить();
		 НоваяСтрока.Подразделение = ДокументОбъект.Сотрудник.ПодразделениеОрганизации;
		 НоваяСтрока.Просмотр      = Истина;
	 Иначе
		 СтрокаТЧ.Просмотр         = Истина;
	 КонецЕсли;	 
	 
 КонецПроцедуры

Процедура ЗаполнитьПраваПользователей(ДокументОбъект,ТЗ,Пользователь) Экспорт
	
	//Типовые роли
	ТаблицаРолейПользователя = ПолучитьМассивРолейПользователя(Пользователь.ИдентификаторПользователяИБ);
	
	//АБС ВСТАВКА №29993 НАЧАЛО «15 декабря 2014 г.», Пополитов
	РольДоступна_ПолныеПрава = РольДоступна("ПолныеПрава");
	//\\АБС ВСТАВКА №29993 КОНЕЦ     	
	
	Если ТаблицаРолейПользователя <> Неопределено Тогда
		Для каждого Роль Из ТаблицаРолейПользователя Цикл
			ТиповаяРоль = Справочники.абс_ТиповыеРоли.НайтиПоРеквизиту("НаименованиеЗаданноеВКонфигураторе",СокрЛП(Роль.Имя));
			Если ТиповаяРоль = Справочники.абс_ТиповыеРоли.ПустаяСсылка() Тогда
				ТиповаяРоль = Справочники.абс_ТиповыеРоли.СоздатьЭлемент();
				ТиповаяРоль.Наименование = Роль.Синоним;
				ТиповаяРоль.НаименованиеЗаданноеВКонфигураторе = Роль.Имя;
				ТиповаяРоль.Записать();
			КонецЕсли;	
			
			//АБС ВСТАВКА №29993 НАЧАЛО «15 декабря 2014 г.», Пополитов
			//Если ТиповаяРоль.Активна Тогда
			Если ТиповаяРоль.Активна или РольДоступна_ПолныеПрава Тогда
			//\\АБС ВСТАВКА №29993 КОНЕЦ
				НоваяСтрока = ДокументОбъект.ТиповыеРолиЕИСУП.Добавить();	
				НоваяСтрока.Роль = 	ТиповаяРоль.Ссылка;
				НоваяСтрока.Использование = Истина;
				НоваяСтрока.ТекущаяРоль   = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		//+++ Григорьев Д.В.
		Если Пользователь <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	абс_СоответствиеТиповыхРолейИРолейБП.ТиповаяРоль
				|ИЗ
				|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_СоответствиеТиповыхРолейИРолейБП КАК абс_СоответствиеТиповыхРолейИРолейБП
				|		ПО РолиИИсполнители.Роль = абс_СоответствиеТиповыхРолейИРолейБП.РольБП
				|ГДЕ
				|	РолиИИсполнители.Исполнитель = &Исполнитель";
			Запрос.УстановитьПараметр("Исполнитель", Пользователь);
			
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				НайденнаяСтрока = ДокументОбъект.ТиповыеРолиЕИСУП.Найти(Результат.ТиповаяРоль, "Роль");
				Если НайденнаяСтрока = Неопределено Тогда
					НовСтр = ДокументОбъект.ТиповыеРолиЕИСУП.Добавить();
					НовСтр.Роль = Результат.ТиповаяРоль;
					НовСтр.Использование = Истина;
					НовСтр.ТекущаяРоль = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//--- Григорьев Д.В.
		
	КонецЕсли;
	
	РольСотрудникЕИСУП = Справочники.абс_ТиповыеРоли.НайтиПоРеквизиту("НаименованиеЗаданноеВКонфигураторе", "абс_СотрудникКомпании");
	Если ДокументОбъект.ТиповыеРолиЕИСУП.Найти(РольСотрудникЕИСУП) = Неопределено Тогда
		НоваяСтрока = ДокументОбъект.ТиповыеРолиЕИСУП.Добавить();
		НоваяСтрока.Роль 		  = РольСотрудникЕИСУП.Ссылка;
		НоваяСтрока.ТекущаяРоль   = Ложь;
		НоваяСтрока.Использование = Истина;
	КонецЕсли;
	
	РольПользователь = Справочники.абс_ТиповыеРоли.НайтиПоРеквизиту("НаименованиеЗаданноеВКонфигураторе","Пользователь");
	Если  ДокументОбъект.ТиповыеРолиЕИСУП.Найти(РольПользователь) = Неопределено Тогда
		НоваяСтрока = ДокументОбъект.ТиповыеРолиЕИСУП.Добавить();
		НоваяСтрока.Роль 		  = РольПользователь.Ссылка;
		НоваяСтрока.ТекущаяРоль   = Ложь;
		НоваяСтрока.Использование = Истина;
	КонецЕсли;
	
	
	//Роли ИСУЗК
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_РолиПользователейВИСУЗК.Роль
		|ИЗ
		|	РегистрСведений.абс_РолиПользователейВИСУЗК КАК абс_РолиПользователейВИСУЗК
		|ГДЕ
		|	абс_РолиПользователейВИСУЗК.Пользователь = &Пользователь
		|	И абс_РолиПользователейВИСУЗК.Организация = &Организация";

	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ДокументОбъект.ТиповыеРолиЕИСУП.Добавить();
		НоваяСтрока.Роль 		  = ВыборкаДетальныеЗаписи.Роль;
		НоваяСтрока.ТекущаяРоль   = Истина;
		НоваяСтрока.Использование = Истина;
	КонецЦикла;

	////Роли БП
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	РолиИИсполнители.Роль КАК Роль
	//|ИЗ
	//|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	//|ГДЕ
	//|	РолиИИсполнители.Исполнитель = &Исполнитель
	//|	И РолиИИсполнители.Организация = &Организация";
	//
	//Запрос.УстановитьПараметр("Исполнитель", Пользователь);
	//Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	//Результат = Запрос.Выполнить();
	//ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	НоваяСтрока = ДокументОбъект.РолиВЦепочкахСогласования.Добавить();
	//	НоваяСтрока.Роль        = ВыборкаДетальныеЗаписи.Роль;
	//	НоваяСтрока.ТекущаяРоль = Истина;
	//	НоваяСтрока.Использование = Истина;
	//КонецЦикла;
	
	ТЗ = ДокументОбъект.ТиповыеРолиЕИСУП.Выгрузить();
	ТЗ.Колонки.Добавить("Приоритет");
	
	Если ТЗ.Колонки.Найти("ТекущаяРоль") = Неопределено Тогда
		ТЗ.Колонки.Добавить("ТекущаяРоль",Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.абс_ВидыОперацийЗаявокНаДобавлениеИзменениеПрав.ИзменениеПравТекущегоПользователя") Тогда
		ТЗ.ЗаполнитьЗначения(Истина,"Использование,ТекущаяРоль");
	КонецЕсли;

	//АБС ВСТАВКА №29993 НАЧАЛО «15 декабря 2014 г.», Пополитов
	Если ТЗ.Колонки.Найти("НеАктивность") = Неопределено Тогда
		ТЗ.Колонки.Добавить("НеАктивность",Новый ОписаниеТипов("Булево"));		
	КонецЕсли;
	//\\АБС ВСТАВКА №29993 КОНЕЦ                                          	
	
	Для каждого Стр Из ТЗ Цикл
		мРоль = Стр.Роль;		
		Стр.Приоритет =  мРоль.Приоритет;
		//АБС ВСТАВКА №29993 НАЧАЛО «15 декабря 2014 г.», Пополитов
		Если не мРоль.Активна Тогда
			Стр.НеАктивность = Истина;	
		КонецЕсли;	
		//\\АБС ВСТАВКА №29993 КОНЕЦ
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ЦФОПользователей.ЦФО КАК ЦФО,
	|	абс_ЦФОПользователей.ЦФУ КАК ЦФУ,
	|	абс_ЦФОПользователей.Дирекция,
	|	абс_ЦФОПользователей.Департамент
	|ИЗ
	|	РегистрСведений.абс_ЦФОПользователей КАК абс_ЦФОПользователей
	|ГДЕ
	|	абс_ЦФОПользователей.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ОтборЦФУ = Новый Структура("ЦФУ");
	ОтборЦФО = Новый Структура("ЦФО");
	ОтборП   = Новый Структура("Подразделение");
	ОтборПодразделение = Новый Структура("Подразделение");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЦФО) Тогда
			ОтборЦФО.ЦФО = ВыборкаДетальныеЗаписи.ЦФО;
			Строки       = ДокументОбъект.ЦФО.НайтиСтроки(ОтборЦФО);
			Если Строки.Количество() > 0 Тогда
				Строки[0].Просмотр  = Истина;
				Строки[0].Ответственный = Ложь;
				Строки[0].ЦФОРНПД = Ложь;
				Строки[0].ПросмотрТекущая      = Истина;
			Иначе	
				НоваяСтрока = ДокументОбъект.ЦФО.Добавить();
				НоваяСтрока.ЦФО = ВыборкаДетальныеЗаписи.ЦФО;
				НоваяСтрока.ИерархияЦФО = ПолучитьИерархиюЦФО(НоваяСтрока.ЦФО);
				НоваяСтрока.Просмотр =  Истина;
				НоваяСтрока.ПросмотрТекущая      = Истина;
			КонецЕсли;
		ИначеЕсли	ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЦФУ) Тогда
			ОтборЦФУ.ЦФУ = ВыборкаДетальныеЗаписи.ЦФУ;
			Строки       = ДокументОбъект.ЦФУ.НайтиСтроки(ОтборЦФУ);
			Если Строки.Количество() > 0 Тогда
				Строки[0].Просмотр  = Истина;
				Строки[0].Ответственный = Ложь;
				Строки[0].ЦФУРНПД = Ложь;
				Строки[0].ПросмотрТекущая      = Истина;
			Иначе	
				НоваяСтрока = ДокументОбъект.ЦФУ.Добавить();
				НоваяСтрока.ЦФУ = ВыборкаДетальныеЗаписи.ЦФУ;
				НоваяСтрока.Просмотр =  Истина;
				НоваяСтрока.ПросмотрТекущая      = Истина;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Дирекция) Тогда
			ОтборП.Подразделение = ВыборкаДетальныеЗаписи.Дирекция;
			Строки       = ДокументОбъект.Подразделения.НайтиСтроки(ОтборП);
			Если Строки.Количество() > 0 Тогда
				Строки[0].Просмотр        = Истина;
				Строки[0].ПросмотрТекущий = Истина;
			Иначе	
				НоваяСтрока = ДокументОбъект.Подразделения.Добавить();
				НоваяСтрока.Подразделение   = ВыборкаДетальныеЗаписи.Дирекция;
				НоваяСтрока.Просмотр        = Истина;
				НоваяСтрока.ПросмотрТекущий = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//ЦФО,ЦФУ,Подразделения
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	абс_ОтветственныеЛицаПодразделенийСрезПоследних.СтруктурнаяЕдиница,
	|	абс_ОтветственныеЛицаПодразделенийСрезПоследних.Ответственный
	|ИЗ
	|	РегистрСведений.абс_ОтветственныеЛицаПодразделений.СрезПоследних(
	|			&НаДату,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК абс_ОтветственныеЛицаПодразделенийСрезПоследних";
	
	Запрос.УстановитьПараметр("НаДату", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Сотрудник", Пользователь.абс_Сотрудник);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТипЗнч(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница) = Тип("СправочникСсылка.абс_ЦФУ") Тогда
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница) Тогда
				ОтборЦФУ.ЦФУ = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
				Строки = ДокументОбъект.ЦФУ.НайтиСтроки(ОтборЦФУ);
				Если Строки.Количество() > 0  Тогда
					Строки[0].Ответственный = Истина;
					
					Строки[0].ОтветственныйТекущая = Истина;
					//	Строки[0].ПросмотрТекущая      = Истина;
					//	Строки[0].ЦФУРНПДТекущая       = Истина;
				Иначе
					НоваяСтрока          = ДокументОбъект.ЦФУ.Добавить();
					НоваяСтрока.ЦФУ      = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
					НоваяСтрока.Ответственный = Истина;
					
					НоваяСтрока.ОтветственныйТекущая = Истина;
					//	НоваяСтрока.ПросмотрТекущая      = Истина;
					//	НоваяСтрока.ЦФУРНПДТекущая       = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Подразделения") Тогда
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница) Тогда
				ОтборЦФО.ЦФО = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
				Строки = ДокументОбъект.ЦФО.НайтиСтроки(ОтборЦФО);
				Если Строки.Количество() > 0 Тогда
					Строки[0].Ответственный = Истина;
					Строки[0].ОтветственныйТекущая = Истина;
				Иначе
					НоваяСтрока     = ДокументОбъект.ЦФО.Добавить();
					НоваяСтрока.ЦФО = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
					НоваяСтрока.ИерархияЦФО = ПолучитьИерархиюЦФО(НоваяСтрока.ЦФО);
					НоваяСтрока.Ответственный = Истина;
					НоваяСтрока.ОтветственныйТекущая      = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			
			ПодразделениеИзКонстант = ОпределитьПодразделениеПоУмолчанию(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница);
			//абс_БизнесПроцессыУведомления.ПолучитьПодразделениеИзКонстанты(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница);
			Если ПодразделениеИзКонстант Тогда
				ОтборПодразделение.Подразделение = СокрЛП(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница.Наименование);	
			Иначе	
				ОтборПодразделение.Подразделение = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;	
			КонецЕсли;	
			
			//АБС ВСТАВКА №45096 НАЧАЛО «7 июля 2014 г.», Пополитов
			Если не ПодразделениеИзКонстант Тогда  				
				Строки = ДокументОбъект.ПодразделенияПоУмолчанию.НайтиСтроки(ОтборПодразделение); 
				Если Строки.Количество() > 0 Тогда
					Строки[0].Ответственный  = Истина;
					Строки[0].ОтветственныйТекущая      = Истина;
				Иначе 	
					НоваяСтрока = ДокументОбъект.ПодразделенияПоУмолчанию.Добавить();
					НоваяСтрока.Подразделение = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
					НоваяСтрока.Ответственный  = Истина;
					НоваяСтрока.ОтветственныйТекущая      = Истина;
				КонецЕсли;  				
			Иначе   				
				Строки = ДокументОбъект.ПодразделенияПоУмолчаниюОсновное.НайтиСтроки(ОтборПодразделение); 
				Если Строки.Количество() > 0 Тогда
					Строки[0].Ответственный  = Истина;
					Строки[0].ОтветственныйТекущая      = Истина;
				Иначе 	
					НоваяСтрока = ДокументОбъект.ПодразделенияПоУмолчаниюОсновное.Добавить();
					НоваяСтрока.Подразделение = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница.Наименование;
					НоваяСтрока.Ответственный  = Истина;
					НоваяСтрока.ОтветственныйТекущая      = Истина;
				КонецЕсли;	
			КонецЕсли;
			//\\АБС ВСТАВКА №45096 КОНЕЦ
			
		КонецЕсли;	
	КонецЦикла;
	
	//Ответственные РНПД
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ОтветственныеРНПД.ЦФО КАК ЦФО
	|ИЗ
	|	РегистрСведений.абс_ОтветственныеРНПД КАК абс_ОтветственныеРНПД
	|ГДЕ
	|	абс_ОтветственныеРНПД.Организация = &Организация
	|	И абс_ОтветственныеРНПД.Ответственный = &Ответственный
	|	И абс_ОтветственныеРНПД.ВидДокументаРНПД В(&ВидДокументаРНПД)";
	
	ВидыДокументаРНПД = Новый Массив;
	ВидыДокументаРНПД.Добавить(Перечисления.абс_ВидыДокументовРНПД.ПоДирекции);
	
	Запрос.УстановитьПараметр("ВидДокументаРНПД", ВидыДокументаРНПД);
	Запрос.УстановитьПараметр("Ответственный",Пользователь);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОтборЦФО.ЦФО = ВыборкаДетальныеЗаписи.ЦФО;
		Строки = ДокументОбъект.ЦФО.НайтиСтроки(ОтборЦФО);
		Если Строки.Количество() > 0 Тогда
			Строки[0].ЦФОРНПД = Истина;
			Строки[0].ЦФОРНПДТекущая       = Истина;
		Иначе
			НоваяСтрока     		   = ДокументОбъект.ЦФО.Добавить();
			НоваяСтрока.ЦФО            = ОтборЦФО.ЦФО;
			НоваяСтрока.ИерархияЦФО    = ПолучитьИерархиюЦФО(НоваяСтрока.ЦФО);
			НоваяСтрока.ЦФОРНПД        = Истина;
			НоваяСтрока.ЦФОРНПДТекущая = Истина;
		КонецЕсли;
	КонецЦикла;
	
	
	//Группы доступа
	//ДокументОбъект.ПрофильПолномочийПользователя = Пользователь.ПрофильПолномочийПользователя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГруппыПользователейПользователиГруппы.Ссылка КАК ГруппаПользователя,
	|	ИСТИНА КАК ТекущаяГруппа,
	|	ИСТИНА КАК Использование,
	|	ИСТИНА КАК Просмотр,
	|	ГруппыПользователейПользователиГруппы.абс_Редактируют КАК Редактирование
	|ИЗ
	|	Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
	|ГДЕ
	|	ГруппыПользователейПользователиГруппы.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = ДокументОбъект.ГруппыДоступаПользователя.Найти(Выборка.ГруппаПользователя);	
		
		Если Строка = Неопределено Тогда
			НоваяСтрока = ДокументОбъект.ГруппыДоступаПользователя.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		Иначе
			Строка.ТекущаяГруппа   =  Истина;
			Строка.Использование   =  Истина;
			Строка.Просмотр        =  Истина;
			Строка.Редактирование  =  Выборка.Редактирование;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

 Функция ПолучитьВозможностьВыбратьПользователяСервер(ДокументОбъект)  Экспорт
	
	МожноВыбрать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПравСрезПоследних.Заявка,
	|	абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПравСрезПоследних.СтатусЗаявки
	|ПОМЕСТИТЬ Исполнено
	|ИЗ
	|	РегистрСведений.абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПрав.СрезПоследних(
	|			&НаДату,
	|			Заявка.Пользователь = &Исполнитель
	|				И СтатусЗаявки В (&Исполнено)) КАК абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПравСрезПоследних
	|ГДЕ
	|	абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПравСрезПоследних.Заявка <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПравСрезПоследних.Заявка,
	|	Исполнено.СтатусЗаявки КАК СтатусЗаявки1
	|ИЗ
	|	РегистрСведений.абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПрав.СрезПоследних(
	|			&НаДату,
	|			Заявка.Пользователь = &Исполнитель
	|				И СтатусЗаявки = &Подготовка) КАК абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПравСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Исполнено КАК Исполнено
	|		ПО абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПравСрезПоследних.Заявка = Исполнено.Заявка
	|ГДЕ
	|	абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПравСрезПоследних.Заявка <> &Ссылка
	|	И Исполнено.Заявка ЕСТЬ NULL ";
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	Если НЕ СогласованиеБезБП Тогда
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Исполнено);
		МассивСтатусов.Добавить(Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.ИсполняетсяВводЗадач);
	Иначе
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Утверждена);
	КонецЕсли;
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	
	Запрос.УстановитьПараметр("Исполнитель", ДокументОбъект.Пользователь);
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Исполнено", МассивСтатусов);
	Запрос.УстановитьПараметр("Подготовка", Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Подготовка);
    Запрос.УстановитьПараметр("НаДату", абс_СерверныеФункции.ПолучитьДатуСервера());
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		МожноВыбрать = Ложь;
	КонецЕсли;
	
	Возврат  МожноВыбрать;
	
КонецФункции

//АБС_Родин

// +++ввв 14.04.2017 г.
Функция ОтправитьПочтовоеСообщениеВнутриКТТКсКлиента(АдресХранилища) Экспорт
	Сообщение=ПолучитьИзВременногоХранилища(АдресХранилища);
	Попытка
		СерверКТТК.ОтправитьПисьмо(Сообщение);
	Исключение
	    Возврат ИнформацияОбОшибке().Описание;
	КонецПопытки;
	Возврат "Успех";
КонецФункции
// ---ввв 14.04.2017 г.
	