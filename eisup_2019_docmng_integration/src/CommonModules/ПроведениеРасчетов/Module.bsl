////////////////////////////////////////////////////////////////////////////////
// Алгоритмы расчета

// Для указанного алгоритма расчета записи регистра расчетов дописывает  
//  в текст запроса используемые алгоритмом поля
//
// Параметры
//  ИмяАлгоритма - строка - "имя" алгоритма
//  КомментироватьРасчет - булево - обозначает режим, 
//                 в котором производится расчет
//  ТекстЗапроса - строка - текст запроса, который 
//                 используется в дальнейшем при расчете записей регистра
//  ПоляЗапроса - массив - содержит перечень полей
Процедура ДописатьПоляАлгоритмов(ИмяАлгоритма, КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса) Экспорт
	
	Если ИмяАлгоритма = "ИсчисленныйНДФЛ" Тогда
		ТекстЗапроса = ТекстЗапроса + ", 
		|	ИсчисленныйНДФЛ.ИсчисленныйНалог Как ИсчисленныйНалог";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("ИсчисленныйНалог");
		КонецЕсли;
	ИначеЕсли ИмяАлгоритма = "РасчетнаяБазаУдержаний" Тогда
		// если присоединяем к базе
		ТекстЗапроса = ТекстЗапроса + ",
		|	База.РезультатБаза КАК РезультатБаза";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("РезультатБаза");
		КонецЕсли;
	ИначеЕсли ИмяАлгоритма = "ДоходыОблагаемыеСтраховымиВзносамиЕСН" Тогда
		ТекстЗапроса = ТекстЗапроса + ", 
		|ОблагаемыеЕСНДоходы.Результат КАК ОблагаемыйЕСНДоход";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("ОблагаемыйЕСНДоход");
		КонецЕсли;
	ИначеЕсли ИмяАлгоритма = "РазмерОграниченияПособия" Тогда
		// размер ограничения пособия по нетрудоспособности
		ТекстЗапроса = ТекстЗапроса + ", 
		|	ЕСТЬNULL(РазмерММОТ.Размер, 0) КАК РазмерММОТ,
		|	ЕСТЬNULL(РазмерОграниченияПособия2010.Размер, 0) КАК РазмерОбщегоОграничения2010,
		|	ЕСТЬNULL(РазмерОграниченияПособия.Размер, 0) КАК РазмерОбщегоОграничения,
		|	ЕСТЬNULL(РазмерОграниченияПособия.РазмерПоБеременности, 0) КАК РазмерПоБеременности";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("РазмерММОТ");
			ПоляЗапроса.Добавить("РазмерОбщегоОграничения2010");
			ПоляЗапроса.Добавить("РазмерОбщегоОграничения");
			ПоляЗапроса.Добавить("РазмерПоБеременности");
		КонецЕсли;
	ИначеЕсли ИмяАлгоритма = "ПочтовыеПереводы" Тогда
		ТекстЗапроса = ТекстЗапроса + ", 
		|	ЕСТЬNULL(ПочтовыеПереводы.РазмерПочтовогоПеревода,0) КАК РазмерПочтовогоПеревода,
		|	ПочтовыеПереводы.ПоТарифу,
		|	ПочтовыеПереводы.СуммаАлиментов";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("РазмерПочтовогоПеревода");
			ПоляЗапроса.Добавить("ПоТарифу");
			ПоляЗапроса.Добавить("СуммаАлиментов");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДописатьПоляАлгоритма()

// Для указанного алгоритма расчета записи регистра расчетов   
// исполняет вспомогательные запросы и дописывает текст запроса 
// используемые временные таблицы
//
// Параметры
//  ИмяАлгоритма - строка - "имя" алгоритма
//  КомментироватьРасчет - булево - обозначает режим, 
//                 в котором производится расчет
//  Запрос - запрос - запрос, который используется
//                 в дальнейшем при расчете записей регистра
//  ТекстЗапроса - строка - текст запроса, который 
//                 используется в дальнейшем при расчете записей регистра
//  Условие - строка - дополнительный текст запроса 
//  ИмяРегистра - строка - "имя" рассчитываемого регистра
//
Процедура ДописатьАлгоритмВЗапрос(ИмяАлгоритма = "", КомментироватьРасчет = Ложь, Запрос = Неопределено, ТекстЗапроса = "", Условие = "", ИмяРегистра = "") Экспорт
	
	Если ИмяАлгоритма = "ИсчисленныйНДФЛ" Тогда
		
		МассивУдержанийИЛ = Новый Массив;
		МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентом);
		МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомБезБЛ);
		МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПредела);
		МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПределаБезБЛ);
		МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой);
		МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммойДоПредела);
		
		Запрос.УстановитьПараметр("парамМассивУдержанийИЛ", МассивУдержанийИЛ);
		
		// ИсчисленныйНДФЛ
		//	данные по исчисленному НДФЛ в текущем периоде регистрации
		//	Поля 
		//		НомерСтроки
		//		ИсчисленныйНалог
		//
		//	Описание
		//	Суммируем исчисленный НДФЛ по заданной организации в разрезе физлиц за 
		//  базовый период строки удержания
		//	
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.НомерСтроки КАК НомерСтроки,
		|	Удержания.ФизЛицо КАК Физлицо,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК МесяцУдержания
		|ПОМЕСТИТЬ ВТФизлица
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
		|ГДЕ
		|	Удержания.ВидРасчета В(&парамМассивУдержанийИЛ)
		|	И Удержания.Регистратор = &парамРегистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	МесяцУдержания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Физлица.НомерСтроки КАК НомерСтроки,
		|	СУММА(НДФЛРасчетыСБюджетом.Налог) КАК ИсчисленныйНалог
		|ПОМЕСТИТЬ ВТИсчисленныйНДФЛ
		|ИЗ
		|	ВТФизлица КАК Физлица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
		|		ПО Физлица.Физлицо = НДФЛРасчетыСБюджетом.ФизЛицо
		|			И (НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.Период, МЕСЯЦ) = Физлица.МесяцУдержания)
		|ГДЕ
		|	НДФЛРасчетыСБюджетом.Организация = &парамОрганизация
		|	И НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)
		|
		|СГРУППИРОВАТЬ ПО
		|	Физлица.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
		// присоединяем данные по исчисленному НДФЛ
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленныйНДФЛ КАК ИсчисленныйНДФЛ
		|ПО Основной.НомерСтроки = ИсчисленныйНДФЛ.НомерСтроки";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "РасчетнаяБазаУдержаний" Тогда	
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.Регистратор КАК Регистратор,
		|	Удержания.НомерСтроки КАК НомерСтроки,
		|	Удержания.ФизЛицо,
		|	Удержания.ПериодРегистрации,
		|	Удержания.Организация,
		|	Удержания.БазовыйПериодНачало,
		|	БазовыеВидыРасчета.ВидРасчета,
		|	Удержания.ПорядокРасчетаБазы,
		|	Удержания.БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТ_ЗаписиУдержаний
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		|		ПО Удержания.ВидРасчета = БазовыеВидыРасчета.Ссылка
		|ГДЕ
		|	&Условие
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Удержания.Регистратор КАК Регистратор,
		|	Удержания.НомерСтроки КАК НомерСтроки,
		|	Удержания.ФизЛицо,
		|	Удержания.ПериодРегистрации КАК ПериодРегистрации,
		|	Удержания.Организация,
		|	Удержания.БазовыйПериодНачало,
		|	Удержания.ВидРасчета,
		|	Удержания.ПорядокРасчетаБазы,
		|	Удержания.БазовыйПериодКонец,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_Удержания
		|ИЗ
		|	ВТ_ЗаписиУдержаний КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Удержания.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И Удержания.Организация = СотрудникиОрганизаций.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодРегистрации,
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(База.РезультатБаза) КАК РезультатБаза,
		|	База.Регистратор КАК Регистратор,
		|	База.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТБаза
		|ИЗ
		|	(ВЫБРАТЬ
		|		База.Результат КАК РезультатБаза,
		|		Основной.Регистратор КАК Регистратор,
		|		Основной.НомерСтроки КАК НомерСтроки
		|	ИЗ
		|		ВТ_Удержания КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК База
		|			ПО Основной.ПериодРегистрации = База.ПериодРегистрации
		|				И Основной.Сотрудник = База.Сотрудник
		|				И Основной.Организация = База.Организация
		|				И Основной.БазовыйПериодНачало <= База.ПериодДействияНачало
		|				И Основной.ВидРасчета = База.ВидРасчета
		|	ГДЕ
		|		Основной.ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ПриПриемеНаРаботу)
		|		И База.ВидРасчета ЕСТЬ НЕ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База.Результат,
		|		Основной.Регистратор,
		|		Основной.НомерСтроки
		|	ИЗ
		|		ВТ_Удержания КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК База
		|			ПО (Основной.ПериодРегистрации = НАЧАЛОПЕРИОДА(База.ПериодРегистрации, МЕСЯЦ))
		|				И Основной.Сотрудник = База.Сотрудник
		|				И Основной.Организация = База.Организация
		|				И Основной.БазовыйПериодНачало <= База.ПериодРегистрации
		|				И Основной.ВидРасчета = База.ВидРасчета
		|	ГДЕ
		|		Основной.ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ПриПриемеНаРаботу)
		|		И База.ВидРасчета ЕСТЬ НЕ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База.Результат,
		|		Основной.Регистратор,
		|		Основной.НомерСтроки
		|	ИЗ
		|		ВТ_Удержания КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК База
		|			ПО Основной.ПериодРегистрации = База.ПериодРегистрации
		|				И Основной.Сотрудник = База.Сотрудник
		|				И Основной.Организация = База.Организация
		|				И Основной.БазовыйПериодКонец >= База.ПериодДействияНачало
		|				И Основной.ВидРасчета = База.ВидРасчета
		|	ГДЕ
		|		Основной.ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ПриУвольнении)
		|		И База.ВидРасчета ЕСТЬ НЕ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База.Результат,
		|		Основной.Регистратор,
		|		Основной.НомерСтроки
		|	ИЗ
		|		ВТ_Удержания КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК База
		|			ПО (Основной.ПериодРегистрации = НАЧАЛОПЕРИОДА(База.ПериодРегистрации, МЕСЯЦ))
		|				И Основной.Сотрудник = База.Сотрудник
		|				И Основной.Организация = База.Организация
		|				И Основной.БазовыйПериодКонец >= База.ПериодРегистрации
		|				И Основной.ВидРасчета = База.ВидРасчета
		|	ГДЕ
		|		Основной.ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ПриУвольнении)
		|		И База.ВидРасчета ЕСТЬ НЕ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База1.РезультатБаза,
		|		База1.Регистратор,
		|		База1.НомерСтроки
		|	ИЗ
		|		РегистрРасчета.УдержанияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(
		|				&парамИзмеренияОсновного,
		|				&парамИзмеренияБазового,
		|				&парамРазрезы,
		|				&Условие
		|					И ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ЗаВесьПериод)) КАК База1
		|	ГДЕ
		|		((НЕ База1.Сторно)
		|				ИЛИ База1.ПериодРегистрацииРазрез < База1.ПериодРегистрации)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База2.РезультатБаза,
		|		База2.Регистратор,
		|		База2.НомерСтроки
		|	ИЗ
		|		РегистрРасчета.УдержанияРаботниковОрганизаций.БазаДополнительныеНачисленияРаботниковОрганизаций(
		|				&парамИзмеренияОсновного,
		|				&парамИзмеренияБазового,
		|				&парамРазрезы,
		|				&Условие
		|					И ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ЗаВесьПериод)) КАК База2
		|	ГДЕ
		|		((НЕ База2.Сторно)
		|				ИЛИ База2.ПериодРегистрацииРазрез < База2.ПериодРегистрации)) КАК База
		|
		|СГРУППИРОВАТЬ ПО
		|	База.Регистратор,
		|	База.НомерСтроки";
		
		Разрезы = Новый Массив;
		Разрезы.Добавить("ПериодРегистрации");
		Запрос.УстановитьПараметр("парамРазрезы", Разрезы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", Условие);
		Запрос.Выполнить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБаза Как База
		|		ПО База.Регистратор = Основной.Регистратор И База.НомерСтроки = Основной.НомерСтроки
		|";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ВсегоОтработаноВремени" Тогда	
		
		// Сумма отработанного времени по видам времени: 
		//	ОтработанноеВПределахНормы,
		//	ЧасовоеОтработанноеВПределахНормы,
		//	ОтработанноеСверхНормы, необходим для расчета показателей ОтработаноВремениВДнях, ОтработаноВремениВЧасах
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ОсновныеНачисления.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТ_СотрудникиПериодыДействия
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.Регистратор = &парамРегистратор
		|	И ОсновныеНачисления.Авторасчет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТ_СписокВРПоДням
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТ_СписокВРПоЧасам
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическийПериодДействия.НомерСтроки,
		|	ФактическийПериодДействия.Сторно,
		|	ФактическийПериодДействия.Сотрудник КАК Сотрудник,
		|	ФактическийПериодДействия.Организация КАК Организация,
		|	ФактическийПериодДействия.ПериодДействия КАК ПериодДействия,
		|	ФактическийПериодДействия.ПериодДействияНачало,
		|	ФактическийПериодДействия.ПериодДействияКонец,
		|	ФактическийПериодДействия.ПериодРегистрации
		|ПОМЕСТИТЬ ВТ_ОсновныеФПД
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|			Регистратор = &парамРегистратор
		|				И Авторасчет) КАК ФактическийПериодДействия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Организация,
		|	ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НесгруппированныеДанные.НомерСтроки КАК НомерСтроки,
		|	СУММА(НесгруппированныеДанные.ОтработаноДней) КАК ВсегоОтработаноДней,
		|	СУММА(НесгруппированныеДанные.ОтработаноЧасов) КАК ВсегоОтработаноЧасов
		|ПОМЕСТИТЬ ВТВсегоОтработаноВремени
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		ВЫБОР
		|			КОГДА Вспомогательный.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
		|				ТОГДА ВЫБОР
		|						КОГДА Вспомогательный.Сторно
		|							ТОГДА -1
		|						ИНАЧЕ 1
		|					КОНЕЦ * Вспомогательный.ОтработаноДней
		|			ИНАЧЕ ГрафикиРаботы.ОсновноеЗначение
		|		КОНЕЦ КАК ОтработаноДней,
		|		ВЫБОР
		|			КОГДА Вспомогательный.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
		|				ТОГДА 0
		|			ИНАЧЕ ГрафикиРаботы.ДополнительноеЗначение
		|		КОНЕЦ КАК ОтработаноЧасов
		|	ИЗ
		|		ВТ_ОсновныеФПД КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|					ВидРасчета В
		|							(ВЫБРАТЬ
		|								СписокВР.ВидРасчета
		|							ИЗ
		|								ВТ_СписокВРПоДням КАК СписокВР)
		|						И (Сотрудник, ПериодДействия) В
		|							(ВЫБРАТЬ
		|								ОсновныеНачисления.Сотрудник,
		|								ОсновныеНачисления.ПериодДействия
		|							ИЗ
		|								ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК Вспомогательный
		|			ПО Основной.Сотрудник = Вспомогательный.Сотрудник
		|				И Основной.Организация = Вспомогательный.Организация
		|				И Основной.ПериодДействия = Вспомогательный.ПериодДействия
		|				И (Основной.Сторно = Вспомогательный.Сторно
		|					ИЛИ Вспомогательный.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы))
		|				И Основной.ПериодРегистрации >= Вспомогательный.ПериодРегистрации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|			ПО (Вспомогательный.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
		|				И (Вспомогательный.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы))
		|				И (ГрафикиРаботы.Месяц = Вспомогательный.ПериодДействия)
		|				И (ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
		|				И (ГрафикиРаботы.Дата МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
		|				И (ГрафикиРаботы.Дата МЕЖДУ Вспомогательный.ПериодДействияНачало И Вспомогательный.ПериодДействияКонец)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Основной.НомерСтроки,
		|		0,
		|		ВЫБОР
		|			КОГДА Вспомогательный.Сторно
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ * Вспомогательный.ОтработаноЧасов
		|	ИЗ
		|		ВТ_ОсновныеФПД КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|					ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|						И ВидРасчета В
		|							(ВЫБРАТЬ
		|								СписокВР.ВидРасчета
		|							ИЗ
		|								ВТ_СписокВРПоЧасам КАК СписокВР)
		|						И (Сотрудник, ПериодДействия) В
		|							(ВЫБРАТЬ
		|								ОсновныеНачисления.Сотрудник,
		|								ОсновныеНачисления.ПериодДействия
		|							ИЗ
		|								ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК Вспомогательный
		|			ПО Основной.Сотрудник = Вспомогательный.Сотрудник
		|				И Основной.Организация = Вспомогательный.Организация
		|				И Основной.ПериодДействия = Вспомогательный.ПериодДействия
		|				И (Вспомогательный.ПериодДействияНачало МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
		|				И (Вспомогательный.ПериодДействияКонец МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)) КАК НесгруппированныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	НесгруппированныеДанные.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТВсегоОтработаноВремени КАК ВсегоОтработаноВремени
		|ПО Основной.НомерСтроки = ВсегоОтработаноВремени.НомерСтроки
		|";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "РасчетнаяБазаСреднегоЗаработка" Тогда	
		
		Если КомментироватьРасчет Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасчетСреднегоЗаработка.НомерСтроки,
			|	РасчетСреднегоЗаработка.ДатаНачалаСобытия,
			|	РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода,
			|	РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода,
			|	РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|	РасчетСреднегоЗаработка.ПериодРегистрации,
			|	РасчетСреднегоЗаработка.БазовыйПериодНачало,
			|	РасчетСреднегоЗаработка.БазовыйПериодКонец,
			|	РасчетСреднегоЗаработка.Сотрудник КАК Сотрудник,
			|	РасчетСреднегоЗаработка.Сотрудник.Физлицо КАК ФизЛицо,
			|	РасчетСреднегоЗаработка.Сотрудник.Организация КАК Организация,
			|	РасчетСреднегоЗаработка.ВидРасчета КАК ВидРасчета,
			|	СреднийЗаработокБазовыеВидыРасчета.ВидРасчета КАК БазовыйВидРасчета
			|ПОМЕСТИТЬ ВТСтрокиСреднегоЗаработка
			|ИЗ
			|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
			|		ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
			|ГДЕ
			|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ВидРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтраховыеВзносыСведенияОДоходахОбороты.Период КАК Период,
			|	СтраховыеВзносыСведенияОДоходахОбороты.ФизЛицо КАК ФизЛицо,
			|	СтраховыеВзносыСведенияОДоходахОбороты.Организация КАК Организация,
			|	СтраховыеВзносыСведенияОДоходахОбороты.ВидДохода КАК ВидДохода,
			|	СтраховыеВзносыСведенияОДоходахОбороты.СкидкаОборот
			|ПОМЕСТИТЬ ВТДанныеУчетаСкидок
			|ИЗ
			|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
			|			&парамДатаС,
			|			&парамДатаПо,
			|			Месяц,
			|			(ФизЛицо, Организация) В
			|					(ВЫБРАТЬ
			|						СтрокиСреднегоЗаработка.ФизЛицо,
			|						СтрокиСреднегоЗаработка.Организация
			|					ИЗ
			|						ВТСтрокиСреднегоЗаработка КАК СтрокиСреднегоЗаработка)
			|				И ВидДохода В (ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.Матпомощь), ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка))) КАК СтраховыеВзносыСведенияОДоходахОбороты
			|ГДЕ
			|	СтраховыеВзносыСведенияОДоходахОбороты.Период >= &ДатаЗакона213ФЗ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ),
			|	ЕСНСведенияОДоходах.ФизЛицо,
			|	ЕСНСведенияОДоходах.Организация,
			|	ЕСНСведенияОДоходах.КодДоходаЕСН,
			|	СУММА(ЕСНСведенияОДоходах.Скидка)
			|ИЗ
			|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
			|ГДЕ
			|	(ЕСНСведенияОДоходах.ФизЛицо, ЕСНСведенияОДоходах.Организация) В
			|			(ВЫБРАТЬ
			|				СтрокиСреднегоЗаработка.ФизЛицо,
			|				СтрокиСреднегоЗаработка.Организация
			|			ИЗ
			|				ВТСтрокиСреднегоЗаработка КАК СтрокиСреднегоЗаработка)
			|	И ЕСНСведенияОДоходах.КодДоходаЕСН В (ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.Матпомощь), ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.МатпомощьПриРожденииРебенка))
			|	И ЕСНСведенияОДоходах.Период МЕЖДУ &парамДатаС И &парамДатаПо
			|	И ЕСНСведенияОДоходах.Период < &ДатаЗакона213ФЗ
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСНСведенияОДоходах.ФизЛицо,
			|	ЕСНСведенияОДоходах.Организация,
			|	ЕСНСведенияОДоходах.КодДоходаЕСН,
			|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	ВидДохода,
			|	ФизЛицо,
			|	Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	БазаДополнительныеНачисления.РезультатБаза,
			|	БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
			|	БазаДополнительныеНачисления.НомерСтроки,
			|	БазаДополнительныеНачисления.ФизЛицо КАК ФизЛицо,
			|	БазаДополнительныеНачисления.Организация КАК Организация,
			|	БазаДополнительныеНачисления.ВидРасчетаРазрез,
			|	ВЫБОР
			|		КОГДА БазаДополнительныеНачисления.БазовыйПериодНачало < &ДатаЗакона213ФЗ
			|			ТОГДА БазаДополнительныеНачисления.ВидРасчетаРазрез.КодДоходаЕСН
			|		ИНАЧЕ БазаДополнительныеНачисления.ВидРасчетаРазрез.КодДоходаСтраховыеВзносы
			|	КОНЕЦ КАК КодДоходаСтраховыеВзносы,
			|	БазаДополнительныеНачисления.Сотрудник.ВидЗанятости КАК ВидЗанятости,
			|	БазаДополнительныеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало
			|ПОМЕСТИТЬ ВТБазаДопНачисленийПоБЛ
			|ИЗ
			|	РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
			|			&парамИзмерения,
			|			&парамИзмерения,
			|			&парамРазрезыБЛ,
			|			Регистратор = &парамРегистратор
			|				И ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010))) КАК БазаДополнительныеНачисления
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	БазовыйПериодНачало,
			|	КодДоходаСтраховыеВзносы,
			|	ФизЛицо,
			|	Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(База.РезультатБаза), 0) КАК РезультатБаза,
			|	ЕСТЬNULL(СУММА(База.СкидкаПоСтраховымВзносам), 0) КАК СкидкаПоСтраховымВзносам,
			|	База.ЧислоМесяцев,
			|	База.ПериодРасчетаСреднегоЗаработка,
			|	База.ВидРасчетаРазрез,
			|	База.ВидРасчетаРазрез.Наименование КАК ВидРасчетаНаименование,
			|	База.НомерСтроки КАК НомерСтроки,
			|	База.ОшибкаВводаСводногоТабеля
			|ИЗ
			|	(ВЫБРАТЬ
			|		БазаОсновныеНачисления.РезультатБаза КАК РезультатБаза,
			|		1 КАК ЧислоМесяцев,
			|		БазаОсновныеНачисления.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
			|		БазаОсновныеНачисления.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
			|		БазаОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ОтработанноеВремя.Период ЕСТЬ НЕ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК ОшибкаВводаСводногоТабеля,
			|		0 КАК СкидкаПоСтраховымВзносам
			|	ИЗ
			|		РегистрРасчета.РасчетСреднегоЗаработка.БазаОсновныеНачисленияРаботниковОрганизаций(
			|				&парамИзмерения,
			|				&парамИзмерения,
			|				&парамРазрезы,
			|				Регистратор = &парамРегистратор
			|					И ВидРасчета В (&парамЗаработок)
			|					И (БазовыйПериодНачало <> НАЧАЛОПЕРИОДА(БазовыйПериодНачало, МЕСЯЦ)
			|						ИЛИ БазовыйПериодКонец <> КОНЕЦПЕРИОДА(БазовыйПериодКонец, МЕСЯЦ))) КАК БазаОсновныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
			|			ПО БазаОсновныеНачисления.Сотрудник = ОтработанноеВремя.Сотрудник
			|				И (НАЧАЛОПЕРИОДА(БазаОсновныеНачисления.БазовыйПериодНачало, МЕСЯЦ) = ОтработанноеВремя.Период)
			|				И (ОтработанноеВремя.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
			|				И (ОтработанноеВремя.ВЦеломЗаПериод)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисленияРаботниковОрганизаций.Результат,
			|		1,
			|		ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
			|				И (ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия = НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ))
			|				И (ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамЗаработок)
			|		И РасчетСреднегоЗаработка.БазовыйПериодНачало = НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ)
			|		И РасчетСреднегоЗаработка.БазовыйПериодКонец = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, МЕСЯЦ)
			|		И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		БазаДополнительныеНачисления.РезультатБаза,
			|		ВЫБОР
			|			КОГДА БазаДополнительныеНачисления.ЧислоМесяцевРазрез = 0
			|				ТОГДА 1
			|			ИНАЧЕ БазаДополнительныеНачисления.ЧислоМесяцевРазрез
			|		КОНЕЦ,
			|		БазаДополнительныеНачисления.ВидРасчетаРазрез,
			|		БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
			|		БазаДополнительныеНачисления.НомерСтроки,
			|		ЛОЖЬ,
			|		0
			|	ИЗ
			|		РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
			|				&парамИзмерения,
			|				&парамИзмерения,
			|				&парамРазрезыДоп,
			|				Регистратор = &парамРегистратор
			|					И ВидРасчета В (&парамЗаработокБезБольничных)) КАК БазаДополнительныеНачисления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		БазаДополнительныеНачисления.РезультатБаза - ЕСТЬNULL(ВЫБОР
			|				КОГДА ЕСТЬNULL(ДанныеУчетаСкидок.СкидкаОборот, 0) = 0
			|					ТОГДА 0
			|				КОГДА БазаДополнительныеНачисления.РезультатБаза > ДанныеУчетаСкидок.СкидкаОборот
			|					ТОГДА ДанныеУчетаСкидок.СкидкаОборот
			|				ИНАЧЕ БазаДополнительныеНачисления.РезультатБаза
			|			КОНЕЦ, 0),
			|		1,
			|		БазаДополнительныеНачисления.ВидРасчетаРазрез,
			|		БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
			|		БазаДополнительныеНачисления.НомерСтроки,
			|		ЛОЖЬ,
			|		ЕСТЬNULL(ВЫБОР
			|				КОГДА ЕСТЬNULL(ДанныеУчетаСкидок.СкидкаОборот, 0) = 0
			|					ТОГДА 0
			|				КОГДА БазаДополнительныеНачисления.РезультатБаза > ДанныеУчетаСкидок.СкидкаОборот
			|					ТОГДА ДанныеУчетаСкидок.СкидкаОборот
			|				ИНАЧЕ БазаДополнительныеНачисления.РезультатБаза
			|			КОНЕЦ, 0)
			|	ИЗ
			|		ВТБазаДопНачисленийПоБЛ КАК БазаДополнительныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаСкидок КАК ДанныеУчетаСкидок
			|			ПО БазаДополнительныеНачисления.ФизЛицо = ДанныеУчетаСкидок.ФизЛицо
			|				И БазаДополнительныеНачисления.Организация = ДанныеУчетаСкидок.Организация
			|				И БазаДополнительныеНачисления.КодДоходаСтраховыеВзносы = ДанныеУчетаСкидок.ВидДохода
			|				И (БазаДополнительныеНачисления.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|				И БазаДополнительныеНачисления.БазовыйПериодНачало = ДанныеУчетаСкидок.Период
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Результат,
			|		12,
			|		Дополнительные.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = Дополнительные.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = Дополнительные.Сотрудник
			|				И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|				И (ГОД(Дополнительные.БазовыйПериодНачало) = ГОД(РасчетСреднегоЗаработка.ДатаНачалаСобытия) - 1)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
			|		И Дополнительные.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисления.Результат,
			|		12,
			|		ОсновныеНачисления.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисления.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисления.Сотрудник
			|				И (ОсновныеНачисления.ПериодРегистрации <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|				И (ГОД(ВЫБОР
			|						КОГДА ОсновныеНачисления.ВидРасчета.ПериодДействияБазовый
			|							ТОГДА ОсновныеНачисления.ПериодДействияНачало
			|						ИНАЧЕ ОсновныеНачисления.БазовыйПериодНачало
			|					КОНЕЦ) = ГОД(РасчетСреднегоЗаработка.ДатаНачалаСобытия) - 1)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
			|		И ОсновныеНачисления.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Результат,
			|		12,
			|		Дополнительные.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = Дополнительные.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = Дополнительные.Сотрудник
			|				И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|				И (ГОД(Дополнительные.БазовыйПериодНачало) = ГОД(РасчетСреднегоЗаработка.ДатаНачалаСобытия) - 1)
			|				И (Дополнительные.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец
			|					ИЛИ РасчетСреднегоЗаработка.БазовыйПериодНачало = РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|						И Дополнительные.ПериодРегистрации < РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|					ИЛИ КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода, ДЕНЬ)
			|						И Дополнительные.ПериодРегистрации > РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремииИндексируемые)
			|		И Дополнительные.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисления.Результат,
			|		12,
			|		ОсновныеНачисления.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисления.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисления.Сотрудник
			|				И (ОсновныеНачисления.ПериодРегистрации <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|				И (ГОД(ВЫБОР
			|						КОГДА ОсновныеНачисления.ВидРасчета.ПериодДействияБазовый
			|							ТОГДА ОсновныеНачисления.ПериодДействияНачало
			|						ИНАЧЕ ОсновныеНачисления.БазовыйПериодНачало
			|					КОНЕЦ) = ГОД(РасчетСреднегоЗаработка.ДатаНачалаСобытия) - 1)
			|				И (ОсновныеНачисления.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец
			|					ИЛИ РасчетСреднегоЗаработка.БазовыйПериодНачало = РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|						И ОсновныеНачисления.ПериодРегистрации < РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|					ИЛИ КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода, ДЕНЬ)
			|						И ОсновныеНачисления.ПериодРегистрации > РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремииИндексируемые)
			|		И ОсновныеНачисления.ВидРасчета ЕСТЬ НЕ NULL ) КАК База
			|
			|СГРУППИРОВАТЬ ПО
			|	База.НомерСтроки,
			|	База.ЧислоМесяцев,
			|	База.ПериодРасчетаСреднегоЗаработка,
			|	База.ВидРасчетаРазрез,
			|	База.ВидРасчетаРазрез.Наименование,
			|	База.ОшибкаВводаСводногоТабеля
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			Разрезы = Новый Массив(1);
			Разрезы[0] = "ВидРасчета";
			
			РазрезыДоп = Новый Массив(2);
			РазрезыДоп[0] = "ЧислоМесяцев";
			РазрезыДоп[1] = "ВидРасчета";
		
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасчетСреднегоЗаработка.НомерСтроки,
			|	РасчетСреднегоЗаработка.ДатаНачалаСобытия,
			|	РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода,
			|	РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода,
			|	РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|	РасчетСреднегоЗаработка.ПериодРегистрации,
			|	РасчетСреднегоЗаработка.БазовыйПериодНачало,
			|	РасчетСреднегоЗаработка.БазовыйПериодКонец,
			|	РасчетСреднегоЗаработка.Сотрудник КАК Сотрудник,
			|	РасчетСреднегоЗаработка.Сотрудник.Физлицо КАК ФизЛицо,
			|	РасчетСреднегоЗаработка.Сотрудник.Организация КАК Организация,
			|	РасчетСреднегоЗаработка.ВидРасчета КАК ВидРасчета,
			|	СреднийЗаработокБазовыеВидыРасчета.ВидРасчета КАК БазовыйВидРасчета
			|ПОМЕСТИТЬ ВТСтрокиСреднегоЗаработка
			|ИЗ
			|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
			|		ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
			|ГДЕ
			|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ВидРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтраховыеВзносыСведенияОДоходахОбороты.Период КАК Период,
			|	СтраховыеВзносыСведенияОДоходахОбороты.ФизЛицо КАК ФизЛицо,
			|	СтраховыеВзносыСведенияОДоходахОбороты.Организация КАК Организация,
			|	СтраховыеВзносыСведенияОДоходахОбороты.ВидДохода КАК ВидДохода,
			|	СтраховыеВзносыСведенияОДоходахОбороты.СкидкаОборот
			|ПОМЕСТИТЬ ВТДанныеУчетаСкидок
			|ИЗ
			|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
			|			&парамДатаС,
			|			&парамДатаПо,
			|			Месяц,
			|			(ФизЛицо, Организация) В
			|					(ВЫБРАТЬ
			|						СтрокиСреднегоЗаработка.ФизЛицо,
			|						СтрокиСреднегоЗаработка.Организация
			|					ИЗ
			|						ВТСтрокиСреднегоЗаработка КАК СтрокиСреднегоЗаработка)
			|				И ВидДохода В (ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.Матпомощь), ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка))) КАК СтраховыеВзносыСведенияОДоходахОбороты
			|ГДЕ
			|	СтраховыеВзносыСведенияОДоходахОбороты.Период >= &ДатаЗакона213ФЗ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ),
			|	ЕСНСведенияОДоходах.ФизЛицо,
			|	ЕСНСведенияОДоходах.Организация,
			|	ЕСНСведенияОДоходах.КодДоходаЕСН,
			|	СУММА(ЕСНСведенияОДоходах.Скидка)
			|ИЗ
			|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
			|ГДЕ
			|	(ЕСНСведенияОДоходах.ФизЛицо, ЕСНСведенияОДоходах.Организация) В
			|			(ВЫБРАТЬ
			|				СтрокиСреднегоЗаработка.ФизЛицо,
			|				СтрокиСреднегоЗаработка.Организация
			|			ИЗ
			|				ВТСтрокиСреднегоЗаработка КАК СтрокиСреднегоЗаработка)
			|	И ЕСНСведенияОДоходах.КодДоходаЕСН В (ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.Матпомощь), ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.МатпомощьПриРожденииРебенка))
			|	И ЕСНСведенияОДоходах.Период МЕЖДУ &парамДатаС И &парамДатаПо
			|	И ЕСНСведенияОДоходах.Период < &ДатаЗакона213ФЗ
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСНСведенияОДоходах.ФизЛицо,
			|	ЕСНСведенияОДоходах.Организация,
			|	ЕСНСведенияОДоходах.КодДоходаЕСН,
			|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	ВидДохода,
			|	ФизЛицо,
			|	Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	БазаДополнительныеНачисления.РезультатБаза,
			|	БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
			|	БазаДополнительныеНачисления.НомерСтроки,
			|	БазаДополнительныеНачисления.ФизЛицо КАК ФизЛицо,
			|	БазаДополнительныеНачисления.Организация КАК Организация,
			|	ВЫБОР
			|		КОГДА БазаДополнительныеНачисления.БазовыйПериодНачало < &ДатаЗакона213ФЗ
			|			ТОГДА БазаДополнительныеНачисления.ВидРасчетаРазрез.КодДоходаЕСН
			|		ИНАЧЕ БазаДополнительныеНачисления.ВидРасчетаРазрез.КодДоходаСтраховыеВзносы
			|	КОНЕЦ КАК КодДоходаСтраховыеВзносы,
			|	БазаДополнительныеНачисления.Сотрудник.ВидЗанятости КАК ВидЗанятости,
			|	БазаДополнительныеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало
			|ПОМЕСТИТЬ ВТБазаДопНачисленийПоБЛ
			|ИЗ
			|	РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
			|			&парамИзмерения,
			|			&парамИзмерения,
			|			&парамРазрезыБЛ,
			|			Регистратор = &парамРегистратор
			|				И ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010))) КАК БазаДополнительныеНачисления
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	БазовыйПериодНачало,
			|	КодДоходаСтраховыеВзносы,
			|	ФизЛицо,
			|	Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(База.РезультатБаза), 0) КАК РезультатБаза,
			|	База.ЧислоМесяцев,
			|	База.ПериодРасчетаСреднегоЗаработка,
			|	База.НомерСтроки КАК НомерСтроки,
			|	База.ОшибкаВводаСводногоТабеля,
			|	ЕСТЬNULL(СУММА(База.СкидкаПоСтраховымВзносам), 0) КАК СкидкаПоСтраховымВзносам
			|ИЗ
			|	(ВЫБРАТЬ
			|		БазаОсновныеНачисления.РезультатБаза КАК РезультатБаза,
			|		1 КАК ЧислоМесяцев,
			|		БазаОсновныеНачисления.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
			|		БазаОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ОтработанноеВремя.Период ЕСТЬ НЕ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК ОшибкаВводаСводногоТабеля,
			|		0 КАК СкидкаПоСтраховымВзносам
			|	ИЗ
			|		РегистрРасчета.РасчетСреднегоЗаработка.БазаОсновныеНачисленияРаботниковОрганизаций(
			|				&парамИзмерения,
			|				&парамИзмерения,
			|				&парамРазрезы,
			|				Регистратор = &парамРегистратор
			|					И ВидРасчета В (&парамЗаработок)
			|					И (БазовыйПериодНачало <> НАЧАЛОПЕРИОДА(БазовыйПериодНачало, МЕСЯЦ)
			|						ИЛИ БазовыйПериодКонец <> КОНЕЦПЕРИОДА(БазовыйПериодКонец, МЕСЯЦ))) КАК БазаОсновныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
			|			ПО БазаОсновныеНачисления.Сотрудник = ОтработанноеВремя.Сотрудник
			|				И (НАЧАЛОПЕРИОДА(БазаОсновныеНачисления.БазовыйПериодНачало, МЕСЯЦ) = ОтработанноеВремя.Период)
			|				И (ОтработанноеВремя.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
			|				И (ОтработанноеВремя.ВЦеломЗаПериод)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисленияРаботниковОрганизаций.Результат,
			|		1,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
			|				И (ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия = НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ))
			|				И (ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамЗаработок)
			|		И РасчетСреднегоЗаработка.БазовыйПериодНачало = НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ)
			|		И РасчетСреднегоЗаработка.БазовыйПериодКонец = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, МЕСЯЦ)
			|		И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		БазаДополнительныеНачисления.РезультатБаза,
			|		ВЫБОР
			|			КОГДА БазаДополнительныеНачисления.ЧислоМесяцевРазрез = 0
			|				ТОГДА 1
			|			ИНАЧЕ БазаДополнительныеНачисления.ЧислоМесяцевРазрез
			|		КОНЕЦ,
			|		БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
			|		БазаДополнительныеНачисления.НомерСтроки,
			|		ЛОЖЬ,
			|		0
			|	ИЗ
			|		РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
			|				&парамИзмерения,
			|				&парамИзмерения,
			|				&парамРазрезыДоп,
			|				Регистратор = &парамРегистратор
			|					И ВидРасчета В (&парамЗаработокБезБольничных)) КАК БазаДополнительныеНачисления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		БазаДополнительныеНачисления.РезультатБаза - ЕСТЬNULL(ВЫБОР
			|				КОГДА ЕСТЬNULL(ДанныеУчетаСкидок.СкидкаОборот, 0) = 0
			|					ТОГДА 0
			|				КОГДА БазаДополнительныеНачисления.РезультатБаза > ДанныеУчетаСкидок.СкидкаОборот
			|					ТОГДА ДанныеУчетаСкидок.СкидкаОборот
			|				ИНАЧЕ БазаДополнительныеНачисления.РезультатБаза
			|			КОНЕЦ, 0),
			|		1,
			|		БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
			|		БазаДополнительныеНачисления.НомерСтроки,
			|		ЛОЖЬ,
			|		ЕСТЬNULL(ВЫБОР
			|				КОГДА ЕСТЬNULL(ДанныеУчетаСкидок.СкидкаОборот, 0) = 0
			|					ТОГДА 0
			|				КОГДА БазаДополнительныеНачисления.РезультатБаза > ДанныеУчетаСкидок.СкидкаОборот
			|					ТОГДА ДанныеУчетаСкидок.СкидкаОборот
			|				ИНАЧЕ БазаДополнительныеНачисления.РезультатБаза
			|			КОНЕЦ, 0)
			|	ИЗ
			|		ВТБазаДопНачисленийПоБЛ КАК БазаДополнительныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаСкидок КАК ДанныеУчетаСкидок
			|			ПО БазаДополнительныеНачисления.ФизЛицо = ДанныеУчетаСкидок.ФизЛицо
			|				И БазаДополнительныеНачисления.Организация = ДанныеУчетаСкидок.Организация
			|				И БазаДополнительныеНачисления.КодДоходаСтраховыеВзносы = ДанныеУчетаСкидок.ВидДохода
			|				И (БазаДополнительныеНачисления.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|				И БазаДополнительныеНачисления.БазовыйПериодНачало = ДанныеУчетаСкидок.Период
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Результат,
			|		12,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = Дополнительные.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = Дополнительные.Сотрудник
			|				И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|				И (ГОД(Дополнительные.БазовыйПериодНачало) = ГОД(РасчетСреднегоЗаработка.ДатаНачалаСобытия) - 1)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
			|		И Дополнительные.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисления.Результат,
			|		12,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисления.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисления.Сотрудник
			|				И (ОсновныеНачисления.ПериодРегистрации <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|				И (ГОД(ВЫБОР
			|						КОГДА ОсновныеНачисления.ВидРасчета.ПериодДействияБазовый
			|							ТОГДА ОсновныеНачисления.ПериодДействияНачало
			|						ИНАЧЕ ОсновныеНачисления.БазовыйПериодНачало
			|					КОНЕЦ) = ГОД(РасчетСреднегоЗаработка.ДатаНачалаСобытия) - 1)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
			|		И ОсновныеНачисления.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Результат,
			|		12,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = Дополнительные.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = Дополнительные.Сотрудник
			|				И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|				И (ГОД(Дополнительные.БазовыйПериодНачало) = ГОД(РасчетСреднегоЗаработка.ДатаНачалаСобытия) - 1)
			|				И (Дополнительные.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец
			|					ИЛИ РасчетСреднегоЗаработка.БазовыйПериодНачало = РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|						И Дополнительные.ПериодРегистрации < РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|					ИЛИ КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода, ДЕНЬ)
			|						И Дополнительные.ПериодРегистрации > РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремииИндексируемые)
			|		И Дополнительные.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисления.Результат,
			|		12,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисления.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисления.Сотрудник
			|				И (ОсновныеНачисления.ПериодРегистрации <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|				И (ГОД(ВЫБОР
			|						КОГДА ОсновныеНачисления.ВидРасчета.ПериодДействияБазовый
			|							ТОГДА ОсновныеНачисления.ПериодДействияНачало
			|						ИНАЧЕ ОсновныеНачисления.БазовыйПериодНачало
			|					КОНЕЦ) = ГОД(РасчетСреднегоЗаработка.ДатаНачалаСобытия) - 1)
			|				И (ОсновныеНачисления.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец
			|					ИЛИ РасчетСреднегоЗаработка.БазовыйПериодНачало = РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|						И ОсновныеНачисления.ПериодРегистрации < РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|					ИЛИ КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода, ДЕНЬ)
			|						И ОсновныеНачисления.ПериодРегистрации > РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремииИндексируемые)
			|		И ОсновныеНачисления.ВидРасчета ЕСТЬ НЕ NULL ) КАК База
			|
			|СГРУППИРОВАТЬ ПО
			|	База.ЧислоМесяцев,
			|	База.ПериодРасчетаСреднегоЗаработка,
			|	База.НомерСтроки,
			|	База.ОшибкаВводаСводногоТабеля
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			Разрезы = Новый Массив;
			
			РазрезыДоп = Новый Массив(1);
			РазрезыДоп[0] = "ЧислоМесяцев";
			
		КонецЕсли;
		
		РазрезыДляБЛ = Новый Массив(1);
		РазрезыДляБЛ[0] = "ВидРасчета";
		Запрос.УстановитьПараметр("парамРазрезыБЛ",	РазрезыДляБЛ);
			
		Измерения = Новый Массив(1);
		Измерения[0] = "Сотрудник";
		Запрос.УстановитьПараметр("парамИзмерения",	Измерения);

		Запрос.УстановитьПараметр("парамРазрезы",	Разрезы);
		Запрос.УстановитьПараметр("парамРазрезыДоп",РазрезыДоп);
	
		Запрос.УстановитьПараметр("ДатаЗакона213ФЗ",ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "РазмерОграниченияПособия" Тогда	
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Основной.НомерСтроки КАК НомерСтроки,
		|	Основной.ПериодДействияНачало,
		|	Основной.ДатаНачалаСобытия
		|ПОМЕСТИТЬ ВТРассчитываемыеЗаписиБольничных
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
		|ГДЕ
		|	Основной.Регистратор = &парамРегистратор
		|	И Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
		// РазмерММОТ
		//	Поля:
		//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
		//		Размер - размер ММОТ
		//	Описание:
		//		получает размер ММОТ для каждой строки начислений
		//
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыАктуальностиММОТ.НомерСтроки КАК ОсновнойНомерСтроки,
		|	МинимальнаяОплатаТрудаРФ.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерММОТ
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(МинимальнаяОплатаТрудаРФ.Период) КАК ДатаАктуальности
		|	ИЗ
		|		ВТРассчитываемыеЗаписиБольничных КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|			ПО МинимальнаяОплатаТрудаРФ.Период <= Основной.ПериодДействияНачало
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальностиММОТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|		ПО МинимальнаяОплатаТрудаРФ.Период = ДатыАктуальностиММОТ.ДатаАктуальности";
		Запрос.Выполнить();
		
		// РазмерОграниченияПособия
		//	Поля:
		//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
		//		Размер - размер ограничения
		//	Описание:
		//		получает размер ограничения пособия для каждой строки начислений
		//
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
		|	РазмерОграниченияПособияПоНетрудоспособности.Размер КАК Размер,
		|	РазмерОграниченияПособияПоНетрудоспособности.РазмерПоБеременности
		|ПОМЕСТИТЬ ВТРазмерОграниченияПособия
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(РазмерОграниченияПособияПоНетрудоспособности.Период) КАК ДатаАктуальности
		|	ИЗ
		|		ВТРассчитываемыеЗаписиБольничных КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|			ПО РазмерОграниченияПособияПоНетрудоспособности.Период <= Основной.ПериодДействияНачало
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|		ПО РазмерОграниченияПособияПоНетрудоспособности.Период = ДатыАктуальности.ДатаАктуальности";
		Запрос.Выполнить();
		
		// ПредельнаяВеличинаБазы
		//	Поля:
		//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
		//		Размер - размер ограничения
		//	Описание:
		//		получает размер ограничения пособия для каждой строки начислений
		//
		Запрос.УстановитьПараметр("ДатаЗакона213ФЗ",ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
		|	ПредельнаяВеличинаБазыСтраховыхВзносов.Размер КАК Размер
		|ПОМЕСТИТЬ ВТПредельнаяВеличинаБазы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(ПредельнаяВеличинаБазыСтраховыхВзносов.Период) КАК ДатаАктуальности
		|	ИЗ
		|		ВТРассчитываемыеЗаписиБольничных КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредельнаяВеличинаБазыСтраховыхВзносов КАК ПредельнаяВеличинаБазыСтраховыхВзносов
		|			ПО (ПредельнаяВеличинаБазыСтраховыхВзносов.Период <= ВЫБОР
		|					КОГДА &ДатаЗакона213ФЗ < Основной.ДатаНачалаСобытия
		|						ТОГДА Основной.ДатаНачалаСобытия
		|					ИНАЧЕ &ДатаЗакона213ФЗ
		|				КОНЕЦ)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредельнаяВеличинаБазыСтраховыхВзносов КАК ПредельнаяВеличинаБазыСтраховыхВзносов
		|		ПО (ПредельнаяВеличинаБазыСтраховыхВзносов.Период = ДатыАктуальности.ДатаАктуальности)";
		Запрос.Выполнить();
		
		// присоединяем данные о размере пособия
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерММОТ КАК РазмерММОТ
		|ПО Основной.НомерСтроки = РазмерММОТ.ОсновнойНомерСтроки
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТПредельнаяВеличинаБазы КАК РазмерОграниченияПособия2010
		|ПО Основной.НомерСтроки = РазмерОграниченияПособия2010.ОсновнойНомерСтроки
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерОграниченияПособия КАК РазмерОграниченияПособия
		|ПО Основной.НомерСтроки = РазмерОграниченияПособия.ОсновнойНомерСтроки";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ДоходыОблагаемыеСтраховымиВзносамиЕСН" Тогда
		
		// временная таблица с рассчитываемыми записями
		Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Основной.ФизЛицо КАК ФизЛицо,
			|	Основной.Организация КАК Организация,
			|	НАЧАЛОПЕРИОДА(ВЫБОР
			|			КОГДА Основной.ВидРасчета.ПериодДействияБазовый
			|				ТОГДА Основной.ПериодДействияНачало
			|			ИНАЧЕ Основной.БазовыйПериодНачало
			|		КОНЕЦ, МЕСЯЦ) КАК ПериодРасчета,
			|	Основной.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
			|	Основной.НомерСтроки,
			|	Основной.Регистратор,
			|	Основной.ПериодРегистрации
			|ПОМЕСТИТЬ ВТРассчитываемыеЗаписи
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|	И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизЛицо,
			|	Организация,
			|	ОбособленноеПодразделение,
			|	ПериодРасчета";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Основной.ФизЛицо КАК ФизЛицо,
			|	Основной.Организация КАК Организация,
			|	НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) КАК ПериодРасчета,
			|	Основной.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
			|	Основной.НомерСтроки,
			|	Основной.Регистратор,
			|	НАЧАЛОПЕРИОДА(Основной.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации
			|ПОМЕСТИТЬ ВТРассчитываемыеЗаписи
			|ИЗ
			|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|	И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизЛицо,
			|	Организация,
			|	ОбособленноеПодразделение,
			|	ПериодРасчета";
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"УдержанияРаботниковОрганизаций",ИмяРегистра);
		КонецЕсли;
		Запрос.Выполнить();
		
		// ОблагаемыеЕСНДоходы - таблица с облагаемой базой
		//	Поля:
		//		НомерСтроки - номер строки рассчитываемых движений
		//		Результат - сумма доходов физлица за указанный период регистрации
		//	Описание:
		//		выбираются все облагаемые взносами в ПФР доходы физлица, начисленные 
		//      в указанном периоде регистрации по указанному в строке расчета 
		//      обособленному подразделению 
		//
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Доходы.НомерСтроки КАК НомерСтроки,
		|	СУММА(Доходы.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТОблагаемыеЕСНДоходы
		|ИЗ
		|	(ВЫБРАТЬ
		|		РассчитываемыеЗаписи.НомерСтроки КАК НомерСтроки,
		|		ДополнительныеНачисленияРаботниковОрганизаций.Результат - ДополнительныеНачисленияРаботниковОрганизаций.СкидкаПриНалогообложении КАК Результат
		|	ИЗ
		|		ВТРассчитываемыеЗаписи КАК РассчитываемыеЗаписи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
		|			ПО РассчитываемыеЗаписи.Организация = ДополнительныеНачисленияРаботниковОрганизаций.Организация
		|				И РассчитываемыеЗаписи.ФизЛицо = ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо
		|				И РассчитываемыеЗаписи.ОбособленноеПодразделение = ДополнительныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение
		|				И (РассчитываемыеЗаписи.ПериодРасчета = НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ))
		|	ГДЕ
		|		(ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет
		|					И ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.Матпомощь)
		|					И РассчитываемыеЗаписи.ПериодРегистрации < &ДатаЗаменыЕСНСтраховымиВзносами
		|				ИЛИ ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаСтраховыеВзносы.ВходитВБазуПФР
		|					И ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаСтраховыеВзносы <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.Матпомощь)
		|					И РассчитываемыеЗаписи.ПериодРегистрации >= &ДатаЗаменыЕСНСтраховымиВзносами)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РассчитываемыеЗаписи.НомерСтроки,
		|		ОсновныеНачисленияРаботниковОрганизаций.Результат
		|	ИЗ
		|		ВТРассчитываемыеЗаписи КАК РассчитываемыеЗаписи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|			ПО РассчитываемыеЗаписи.ПериодРасчета = ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации
		|				И РассчитываемыеЗаписи.Организация = ОсновныеНачисленияРаботниковОрганизаций.Организация
		|				И РассчитываемыеЗаписи.ФизЛицо = ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо
		|				И РассчитываемыеЗаписи.ОбособленноеПодразделение = ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение
		|	ГДЕ
		|		(ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет
		|					И РассчитываемыеЗаписи.ПериодРегистрации < &ДатаЗаменыЕСНСтраховымиВзносами
		|				ИЛИ ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаСтраховыеВзносы.ВходитВБазуПФР
		|					И РассчитываемыеЗаписи.ПериодРегистрации >= &ДатаЗаменыЕСНСтраховымиВзносами)) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("ДатаЗаменыЕСНСтраховымиВзносами", ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
		Запрос.Выполнить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТОблагаемыеЕСНДоходы КАК ОблагаемыеЕСНДоходы
		|ПО Основной.НомерСтроки = ОблагаемыеЕСНДоходы.НомерСтроки";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ПочтовыеПереводы" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Основная.ФизЛицо КАК ФизЛицо,
		|	Основная.Организация КАК Организация,
		|	Основная.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА Основная.ДополнительныеДанные <> ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоТарифу,
		|	СУММА(ЕСТЬNULL(Дополнительная.Результат,0)) КАК СуммаАлиментов,
		|	СУММА(ВЫБОР
		|			КОГДА Основная.ДополнительныеДанные = ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка)
		|				ТОГДА Дополнительная.Результат
		|			ИНАЧЕ (Дополнительная.Результат - ЕСТЬNULL(Дополнительная.ЗначениеС, 0)) * ЕСТЬNULL(Дополнительная.Процент, 0) / 100 + ЕСТЬNULL(Дополнительная.Сумма, 0)
		|		КОНЕЦ) КАК РазмерПочтовогоПеревода
		|ПОМЕСТИТЬ ВТПочтовыеПереводыТекст
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основная
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
		|			Дополнительная.ФизЛицо КАК ФизЛицо,
		|			Дополнительная.Организация КАК Организация,
		|			Дополнительная.ДокументОснование КАК ДокументОснование,
		|			Дополнительная.ВидРасчета КАК ВидРасчета,
		|			СУММА(Дополнительная.Результат) КАК Результат,
		|			РазмерыТарифовПочтовогоСбора.ЗначениеС КАК ЗначениеС,
		|			РазмерыТарифовПочтовогоСбора.Процент КАК Процент,
		|			РазмерыТарифовПочтовогоСбора.Сумма КАК Сумма
		|		ИЗ
		|			РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыТарифовПочтовогоСбора КАК РазмерыТарифовПочтовогоСбора
		|				ПО Дополнительная.ДополнительныеДанные = РазмерыТарифовПочтовогоСбора.Тариф
		|					И Дополнительная.Результат >= РазмерыТарифовПочтовогоСбора.ЗначениеС
		|					И (Дополнительная.Результат < ВЫБОР
		|						КОГДА РазмерыТарифовПочтовогоСбора.ЗначениеПо = 0
		|							ТОГДА 99999999
		|						ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеПо
		|					КОНЕЦ)
		|		ГДЕ
		|			Дополнительная.Регистратор = &парамРегистратор
		|		СГРУППИРОВАТЬ ПО
		|			Дополнительная.ПериодРегистрации,
		|			Дополнительная.ФизЛицо,
		|			Дополнительная.Организация,
		|			Дополнительная.ДокументОснование,
		|			Дополнительная.ВидРасчета,
		|			РазмерыТарифовПочтовогоСбора.ЗначениеС,
		|			РазмерыТарифовПочтовогоСбора.Процент,
		|			РазмерыТарифовПочтовогоСбора.Сумма

		|) КАК Дополнительная
		
		|		ПО Основная.ПериодРегистрации = Дополнительная.ПериодРегистрации
		|			И Основная.ФизЛицо = Дополнительная.ФизЛицо
		|			И Основная.Организация = Дополнительная.Организация
		|			И Основная.ДокументОснование = Дополнительная.ДокументОснование
		|			И Основная.ВидРасчета <> Дополнительная.ВидРасчета
		|ГДЕ
		|	Основная.Регистратор = &парамРегистратор
		|	И Основная.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор)
		|
		|СГРУППИРОВАТЬ ПО
		|	Основная.ФизЛицо,
		|	Основная.Организация,
		|	Основная.ДокументОснование,
		|	Основная.ДополнительныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	ДокументОснование,
		|	Организация
		|";
		Запрос.Выполнить();
		
		// присоединяем данные для расчета почтового перевода
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТПочтовыеПереводыТекст КАК ПочтовыеПереводы
		|ПО Основной.Физлицо = ПочтовыеПереводы.Физлицо И
		|Основной.Организация = ПочтовыеПереводы.Организация И
		|Основной.ДокументОснование = ПочтовыеПереводы.ДокументОснование";
		
	КонецЕсли;
	
КонецПроцедуры // ДописатьАлгоритмВЗапрос()

// Для указанного алгоритма расчетывает ресурсы записи регистра расчетов   
Функция РассчитатьРесурсыПоАлгоритму(ИмяАлгоритма = "", КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, СтрокаДвижений = Неопределено, ИсходныеДанные = Неопределено) Экспорт
	
	Если ИмяАлгоритма = "ПоСреднемуЗаработкуФСС213ФЗ" Тогда
		
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		
		Если СтрокаДвижений.ПериодРегистрации < ДатаЗакона213ФЗ Или СтрокаДвижений.ПериодДействияНачало < ДатаЗакона213ФЗ Тогда
			Возврат Ложь
		КонецЕсли;
		
		Если НЕ СтрокаДвижений.Сторно Тогда
			Если Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий2010) Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
				СтрокаДвижений.Результат = 0;
				СтрокаДвижений.ДополнительныйРезультат = 0;
				Возврат Истина;
			ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДнейПособий2010) Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
				СтрокаДвижений.Результат = 0;
				СтрокаДвижений.ДополнительныйРезультат = 0;
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		ПроцентОплаты = СтрокаДвижений.Показатель1;
		ПроцентОплатыБезЛьгот = СтрокаДвижений.Показатель2;
		
		ОплачиваемоеВремя = ?(ИсходныеДанные.ОплачиватьДнейПособия = Null, 0,ИсходныеДанные.ОплачиватьДнейПособия);
		
		// Рассчитаем заработок за день (или за час для суммированного учета времени)
		// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
		Если НЕ СтрокаДвижений.Сторно Тогда
			
			НормаВремени = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
			ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий2010 / ИсходныеДанные.ОтработаноДнейПособий2010,2);
			
			// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
			СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
			
		Иначе
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
			ОбщегоНазначения.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
		КонецЕсли;
		
		Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемС2010года Тогда
			РазмерОграничения = ИсходныеДанные.РазмерОбщегоОграничения2010 / 365
		ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемИВРазмереММОТС2010года Тогда
			РазмерОграничения = ИсходныеДанные.РазмерОбщегоОграничения2010 / 365
		ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничением Тогда
			РазмерОграничения = ИсходныеДанные.РазмерОбщегоОграничения * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1)
		ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемПоБеременности Тогда
			РазмерОграничения = ИсходныеДанные.РазмерПоБеременности * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1)
		ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТ Тогда
			РазмерОграничения = ИсходныеДанные.РазмерММОТ * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1)
		ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТбезРК Тогда
			РазмерОграничения = ИсходныеДанные.РазмерММОТ
		Иначе
			РазмерОграничения = 0;
		КонецЕсли;
		
		Если РазмерОграничения = 0 Тогда
			Результат = ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2);
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Пособие начисляется без ограничений", КомментарийВидаРасчета);
			КонецЕсли;
		ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемС2010года
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемИВРазмереММОТС2010года Тогда
			ОграничениеПособия = Окр(РазмерОграничения,2);
			Результат = ОплачиваемоеВремя * Окр(Мин(ЗаработокЗаЕдиницуВремени, ОграничениеПособия) * ПроцентОплаты / 100,2);
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Ограничение среднего заработка: " + ОграничениеПособия, КомментарийВидаРасчета);
			КонецЕсли;
		ИначеЕсли НормаВремени = 0 Или ОплачиваемоеВремя = 0 Тогда
			ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
		Иначе
			Если ОплачиваемоеВремя < НормаВремени Тогда
				ОграничениеПособия = Окр(РазмерОграничения / НормаВремени,2);
				Результат = ОплачиваемоеВремя * Мин(Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2), ОграничениеПособия);
			Иначе
				ОграничениеПособия = Окр(РазмерОграничения,2);
				Результат = Мин(ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2), ОграничениеПособия);
			КонецЕсли;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Ограничение пособия: " + ОграничениеПособия, КомментарийВидаРасчета);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
		СтрокаДвижений.Результат = Результат;
		
		Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемИВРазмереММОТС2010года Тогда
			РазмерОграничения = ИсходныеДанные.РазмерММОТ * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПроцентОплатыБезЛьгот) Тогда
			Результат = 0;
			Если РазмерОграничения = 0 Тогда
				Результат = ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплатыБезЛьгот / 100,2);
			ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемС2010года Тогда
				ОграничениеПособия = Окр(РазмерОграничения,2);
				Результат = ОплачиваемоеВремя * Окр(Мин(ЗаработокЗаЕдиницуВремени, ОграничениеПособия) * ПроцентОплатыБезЛьгот / 100,2);
			ИначеЕсли Не (НормаВремени = 0 Или ОплачиваемоеВремя = 0) Тогда
				Если ОплачиваемоеВремя < НормаВремени Тогда
					ОграничениеПособия = Окр(РазмерОграничения / НормаВремени,2);
					Результат = ОплачиваемоеВремя * Мин(Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплатыБезЛьгот / 100,2), ОграничениеПособия);
				Иначе
					ОграничениеПособия = Окр(РазмерОграничения,2);
					Результат = Мин(ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплатыБезЛьгот / 100,2), ОграничениеПособия);
				КонецЕсли;
			КонецЕсли;
			
			Если Результат < СтрокаДвижений.Результат Тогда
				СтрокаДвижений.ДополнительныйРезультат = (СтрокаДвижений.Результат - Результат) * ?(СтрокаДвижений.Сторно,-1,1);
			Иначе
				СтрокаДвижений.ДополнительныйРезультат = 0
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ПособиеПоУходуЗаРебенком213ФЗ" Тогда
		
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		
		КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
		
		Если СтрокаДвижений.Показатель2 = 0 Тогда
			ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не указано количество детей, за которыми производится уход ");
			СтрокаДвижений.Результат = 0;
			Возврат Истина;
		КонецЕсли;
		
		ОплачиваемыеДни = ИсходныеДанные.ОплачиватьДнейПособия; // календарных дней за фактический период действия
		КоличествоДетейВсего = СтрокаДвижений.Показатель2;
		КоличествоПервыхДетей = СтрокаДвижений.Показатель3;
		
		Если ИсходныеДанные.ПериодДействияНачало < ДатаЗакона213ФЗ Тогда
			
			// часть 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
			//	"В случае ухода за двумя и более детьми до достижения ими возраста полутора лет размер пособия, исчисленный в 
			//	соответствии с частями первой и второй настоящей статьи, суммируется. При этом суммированный размер пособия, 
			//	исчисленный исходя из среднего заработка (дохода, денежного довольствия), не может превышать 100 процентов 
			//	размера указанного заработка (дохода, денежного довольствия)."
			ПроцентОплаты = Мин(40 * КоличествоДетейВсего,100); 
			
			// части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
			//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате, 
			//	минимальный и максимальный размеры указанного пособия определяются с учетом этих коэффициентов."
			
			//	"...суммированный размер пособия ... не может быть менее суммированного минимального размера пособия"
			
			ОграничениеПособияСнизу = (ИсходныеДанные.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * КоличествоПервыхДетей 
				+ ИсходныеДанные.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - КоличествоПервыхДетей)) * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
			ОграничениеПособияСверху = ИсходныеДанные.МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет * КоличествоДетейВсего * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
			
			// определяем среднемесячный заработок путем умножения среднего дневного заработка на среднемесячное число календарных дней
			// согласно п.5 Разъяснения о порядке назначения и выплаты ежемесячного пособия по уходу за ребенком, утв. приказом 
			// Минздравсоцразвития РФ N 270, ФСС РФ N 106 от 13.04.2007
			
			РазмерПособия = Окр(СтрокаДвижений.Показатель1 * ПроцентОплаты / 100 * ?(ДеньГода(КонецГода(ИсходныеДанные.ПериодДействияНачало)) = 365,30.4,30.5), 2);
			
			// пособие за месяц с учетом ограничений
			ОрганиченныйРазмер = Макс(Мин(РазмерПособия, ОграничениеПособияСверху), ОграничениеПособияСнизу);
			
			Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
				Результат = Окр(ОрганиченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
			Иначе 
				Результат = ОрганиченныйРазмер;
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Размер пособия в процентах от среднего заработка: " + ПроцентОплаты, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Размер пособия за месяц исходя из среднего заработка: " + РазмерПособия, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Учтенный районный коэффициент: " + Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1), КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Минимальный размер пособия: " + ОграничениеПособияСнизу, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Максимальный размер пособия: " + ОграничениеПособияСверху, КомментарийВидаРасчета);
				Если ОрганиченныйРазмер = РазмерПособия Тогда
					ТекстСообщения = "Расчет производится исходя из среднего заработка";
				ИначеЕсли ОрганиченныйРазмер = ОграничениеПособияСверху Тогда
					ТекстСообщения = "Расчет производится исходя из максимального размера пособия";
				Иначе
					ТекстСообщения = "Расчет производится исходя из минимального размера пособия";
				КонецЕсли;
				ОбщегоНазначения.КомментарийРасчета(ТекстСообщения, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Календарных дней в месяце: " + КалендарныхДнейВМесяце, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Оплачиваемые дни отпуска: " + ОплачиваемыеДни, КомментарийВидаРасчета);
			КонецЕсли;
			
		Иначе
			
			// для расчетов используется максимальный среднедневной заработок (из исчисленных по "старым" и по "новым" правилам)
			СреднедневнойЗаработок = Макс(СтрокаДвижений.Показатель1, СтрокаДвижений.Показатель6);
			
			// льготы предусмотрены статьей 18 Закона РФ от 15.05.1991 № 1244-1 «О социальной  
			// защите граждан, подвергшихся воздействию радиации вследствие катастрофы на 
			// Чернобыльской АЭС», дополнительные суммы пособия при этом финансируются
			// федеральным бюджетом
			КоэффициентЛьготы = Макс(СтрокаДвижений.Показатель4, 1); // если льгота не применяется, коэффициент будет равен 1
			КоэффициентФедеральногоБюджета = Мин(СтрокаДвижений.Показатель5, 1); 
			
			// часть 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
			//	"В случае ухода за двумя и более детьми до достижения ими возраста полутора лет размер пособия, исчисленный в 
			//	соответствии с частями первой и второй настоящей статьи, суммируется. При этом суммированный размер пособия, 
			//	исчисленный исходя из среднего заработка (дохода, денежного довольствия), не может превышать 100 процентов 
			//	размера указанного заработка (дохода, денежного довольствия)."
			ПроцентОплаты = Мин(40 * КоличествоДетейВсего * КоэффициентЛьготы,100); 
			
			// части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
			//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате, 
			//	минимальный размер указанного пособия определяются с учетом этих коэффициентов."
			
			//	"...суммированный размер пособия ... не может быть менее суммированного минимального размера пособия"
			
			ОграничениеПособияСнизу = (ИсходныеДанные.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * КоличествоПервыхДетей 
				+ ИсходныеДанные.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - КоличествоПервыхДетей)) * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1) * КоэффициентЛьготы;
			
			// В соответствии с частью 5.1 статьи 14 Федеральный закон от 29 декабря 2006 года № 255-ФЗ «Об обязательном социальном 
			// страховании на случай временной нетрудоспособности и в связи с материнством»
			// определяем среднемесячный заработок путем умножения среднего дневного заработка на 30.4
			
			СреднийЗаработок = Окр(СреднедневнойЗаработок * 30.4, 2);
			
		    // Средний заработок, из которого исчисляется ежемесячное пособие по уходу за ребенком, не может превышать 
			// средний заработок, определяемый путем деления предельной величины базы для начисления страховых взносов 
			// в Фонд социального страхования Российской Федерации, установленной Федеральным законом "О страховых взносах 
			// в Пенсионный фонд Российской Федерации, Фонд социального страхования Российской Федерации, Федеральный фонд 
			// обязательного медицинского страхования и территориальные фонды обязательного медицинского страхования" на день 
			// наступления страхового случая, на 12.
			
			РазмерОграничения = Окр(ИсходныеДанные.РазмерОбщегоОграничения2010 / 12, 2);
			РазмерПособия = Окр(Мин(СреднийЗаработок,РазмерОграничения) * ПроцентОплаты / 100, 2);
			
			// пособие за месяц с учетом ограничений
			ОрганиченныйРазмер = Макс(РазмерПособия, ОграничениеПособияСнизу);
			
			Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
				Результат = Окр(ОрганиченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
			Иначе 
				Результат = ОрганиченныйРазмер;
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Максимальный размер среднего заработка: " + РазмерОграничения, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Учтенный районный коэффициент: " + Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1), КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Средний заработок, из которого исчисляется пособие: " + СреднийЗаработок, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Размер пособия в процентах от среднего заработка: " + ПроцентОплаты, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Размер пособия за месяц исходя из среднего заработка: " + РазмерПособия, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Минимальный размер пособия: " + ОграничениеПособияСнизу, КомментарийВидаРасчета);
				Если ОрганиченныйРазмер = РазмерПособия Тогда
					ТекстСообщения = "Расчет производится исходя из среднего заработка";
				Иначе
					ТекстСообщения = "Расчет производится исходя из минимального размера пособия";
				КонецЕсли;
				ОбщегоНазначения.КомментарийРасчета(ТекстСообщения, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Календарных дней в месяце: " + КалендарныхДнейВМесяце, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Оплачиваемые дни отпуска: " + ОплачиваемыеДни, КомментарийВидаРасчета);
			КонецЕсли;
			
			Если КоэффициентФедеральногоБюджета = 1 Тогда // пособие целиком за счет федерального бюджета
				СтрокаДвижений.ДополнительныйРезультат = Результат * ?(СтрокаДвижений.Сторно,-1,1);
			ИначеЕсли КоэффициентФедеральногоБюджета = 0.5 Тогда // пособие за счет федерального бюджета выплачивается частично
				
				ОрганиченныйРазмер = Макс(Окр(Мин(СреднийЗаработок,РазмерОграничения) * Мин(40 * КоличествоДетейВсего,100) / 100, 2), ОграничениеПособияСнизу);
				Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
					ДопРезультат = Окр(ОрганиченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
				Иначе 
					ДопРезультат = ОрганиченныйРазмер;
				КонецЕсли;
				
				СтрокаДвижений.ДополнительныйРезультат = Макс(Результат - ДопРезультат, 0) * ?(СтрокаДвижений.Сторно,-1,1);
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		СтрокаДвижений.Результат = Результат;
		СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемыеДни * ?(СтрокаДвижений.Сторно,-1,1);
		
		Возврат Истина
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ДоплатаДоСреднегоЗаработкаФСС" Тогда
		
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		
		ЭтоПорядок2010 = СтрокаДвижений.ПериодРегистрации >= ДатаЗакона213ФЗ И СтрокаДвижений.ПериодДействияНачало >= ДатаЗакона213ФЗ;
		
		Если НЕ СтрокаДвижений.Сторно Тогда
			Если ЭтоПорядок2010 Тогда
				Если Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий2010) Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
					СтрокаДвижений.Результат = 0;
					Возврат Истина;
				ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДнейПособий2010) Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
					СтрокаДвижений.Результат = 0;
					Возврат Истина;
				КонецЕсли;
			ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий) Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
				СтрокаДвижений.Результат = 0;
				Возврат Истина;
			ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДнейПособий) Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
				СтрокаДвижений.Результат = 0;
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		// Рассчитаем заработок за день 
		// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
		Если НЕ СтрокаДвижений.Сторно Тогда
			
			Если ЭтоПорядок2010 Тогда
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий2010 / ИсходныеДанные.ОтработаноДнейПособий2010,2);
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий / ИсходныеДанные.ОтработаноДнейПособий,2);
			КонецЕсли;
			
			// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
			СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
			
		Иначе
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
		КонецЕсли;
		
		Если СтрокаДвижений.Сторно И НЕ СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени = 0 Тогда
			// при расчете сторно получаем "отнормированную" базу из реквизита записи регистра 
			// и учтем отработанное время; для записей которые были рассчитаны ранее, этот реквизит пуст, 
			// поэтому для них получим базу прежним способом
			ОтработанноеВремя = ?(ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ИсходныеДанные.ОтработаноДней, ИсходныеДанные.ОтработаноЧасов);
			РезультатБаза = СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени * ОтработанноеВремя;
		Иначе
			РезультатБаза = ИсходныеДанные.РезультатБаза;
		КонецЕсли;
		
		ОплачиваемоеВремя = ?(ИсходныеДанные.ОплачиватьДнейПособия = Null, 0,ИсходныеДанные.ОплачиватьДнейПособия);
		СреднийЗаработок = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени;
		
		Результат = Макс(СреднийЗаработок - ?(РезультатБаза = NULL, 0, РезультатБаза), 0);
		
		Если КомментироватьРасчет Тогда
			ОбщегоНазначения.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
			ОбщегоНазначения.КомментарийРасчета("Средний заработок: " + СреднийЗаработок, КомментарийВидаРасчета);
			КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("Вычитаемые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
			РасшифровкаБазы = ИсходныеДанные.Выбрать();
			Пока РасшифровкаБазы.Следующий() Цикл
				Если РасшифровкаБазы.РезультатБаза <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
		СтрокаДвижений.Результат = Результат;
		
		Возврат Истина
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ПочтовыеПереводы" Тогда
		
		Если ИсходныеДанные.ПоТарифу Тогда
			Если ИсходныеДанные.СуммаАлиментов > 500000 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": превышена максимальная сумма почтового перевода - 500000 рублей");
			Иначе
				СтрокаДвижений.Результат = ИсходныеДанные.РазмерПочтовогоПеревода;
			КонецЕсли;
		Иначе
			СтрокаДвижений.Результат = СтрокаДвижений["Показатель1"] / 100 * ОбщегоНазначения.ЦелМаксимальное(ИсходныеДанные.РазмерПочтовогоПеревода);
		КонецЕсли;
		
		Возврат Истина
		
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

// получить данные для расчета НДФЛ по ставке 13 процентов
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - месяц налогового периода, по который (включительно) считается налог. 
//  						Это текущий или будущий месяц относительно периода регистрации
//							Если Неопределено - нужно определить максимальный месяц налогового периода и 
//							минимальный месяц налоговго периода 
//  ПериодРегистрации - дата, по которую учитываются зарегистрированные доходы и начисленные налоги 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей НДФЛ
//  СписокФизЛицТекст - текст запроса выборки списка физлиц, по которым необходимо выполнить расчет налога
//	ДополнительныеПараметрыЗапроса - структура значений параметров запроса, необходимых для выполнения текста запроса "СписокФизЛицТекст"
//
// Возвращаемое значение:
//  Нет.
//
Функция ПолучитьДанныеНДФЛПоРегистратору(Знач ПервыйМесяцНалоговогоПериода,
											Знач ПоследнийМесяцНалоговогоПериода,
											ПериодРегистрации,
											ОбособленноеПодразделение,
											Организация,
											Регистратор,
											Знач СписокФизЛицТекст,
											ДополнительныеПараметрыЗапроса = Неопределено,
											ЭтоПерерасчет = Ложь,
											КомментироватьРасчет = Ложь,
											ВыборкаПодразделений = НеОпределено,
											ДанныеДляПрогноза = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамОрганизация",			Организация);
	Запрос.УстановитьПараметр("парамРегистратор",			Регистратор);
	Запрос.УстановитьПараметр("парамОбособленноеПодразделение", ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("парамПериодРегистрации",		НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачалоГодаРегистрации",	НачалоГода(ПериодРегистрации));
	
	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ Физлицо
	|ПОМЕСТИТЬ ВТСписокФизЛиц
	|ИЗ (" + СписокФизЛицТекст + ") СписокФизЛиц
	|ИНДЕКСИРОВАТЬ ПО Физлицо";
	Запрос.Выполнить();

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	НДФЛСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
		|		ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	НДФЛСведенияОДоходах.Организация = &парамОрганизация И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	Если ПервыйМесяцНалоговогоПериода = Неопределено Тогда
		// получим самый ранний месяц налогового периода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	НДФЛСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
		|		ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	НДФЛСведенияОДоходах.Организация = &парамОрганизация И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
			
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамСтавкаРезидента13",			   ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13) / 100);
	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамНачалоГода",                   НачалоГода(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецГода",                    КонецГода(ПоследнийМесяцНалоговогоПериода));
	
	МассивКодовДоходовРаздела7 = Новый Массив;
	МассивКодовДоходовРаздела7.Добавить(Справочники.ДоходыНДФЛ.Код1510);
	МассивКодовДоходовРаздела7.Добавить(Справочники.ДоходыНДФЛ.Код1520);
	МассивКодовДоходовРаздела7.Добавить(Справочники.ДоходыНДФЛ.Код1530);
	МассивКодовДоходовРаздела7.Добавить(Справочники.ДоходыНДФЛ.Код4600);
	Запрос.УстановитьПараметр("МассивКодовДоходовРаздела7", МассивКодовДоходовРаздела7);
	
	КодыВычетовРезидентов = Новый Массив;
	КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код403);
	КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код404);
	КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код405);
	Запрос.УстановитьПараметр("КодыВычетовРезидентов", КодыВычетовРезидентов);
	
	// Таблица ВТДатыПоМесяцам: список дат налоговых периодов, в которых рассчитывается налог 
	// Поля:
	//		Период
	
	НачМесяца = НачалоГода(ПервыйМесяцНалоговогоПериода);
	ДатыПоМесяцамТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	ДатыПоМесяцамТекст = ДатыПоМесяцамТекст + "
	|ПОМЕСТИТЬ ВТДатыПоМесяцам";
	Пока НачМесяца < НачалоМесяца(ПоследнийМесяцНалоговогоПериода) Цикл
		НачМесяца = НачалоМесяца(КонецМесяца(НачМесяца) + 1);
		ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	ДатыПоМесяцамТекст = ДатыПоМесяцамТекст + "
	|ИНДЕКСИРОВАТЬ ПО Период";
	
	Запрос.Текст = ДатыПоМесяцамТекст;
	Запрос.Выполнить();
	
	// Периоды
	// Таблица ВТПериоды: список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	
	Если ЭтоПерерасчет Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Работники.Физлицо КАК Физлицо,
		|	Месяцы.Период КАК Период
		|ПОМЕСТИТЬ ВТПериоды
		|ИЗ
		|	ВТСписокФизЛиц КАК Работники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
		|		ПО (ИСТИНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	Период";
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПериодыДохода.ФизЛицо КАК ФизЛицо,
		|	Месяцы.Период КАК Период
		|ПОМЕСТИТЬ ВТПериоды
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДФЛСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|		МАКСИМУМ(НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ)) КАК ПериодМакс,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
		|					ТОГДА НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, ГОД)
		|				ИНАЧЕ &парамНачалоГодаРегистрации
		|			КОНЕЦ) КАК ПериодМин
		|	ИЗ
		|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|	ГДЕ
		|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) МЕЖДУ &парамНачалоГодаРегистрации И &парамПериодРегистрации
		|		И НДФЛСведенияОДоходах.Организация = &парамОрганизация
		|		И НДФЛСведенияОДоходах.ФизЛицо В
		|				(ВЫБРАТЬ
		|					Работники.Физлицо
		|				ИЗ
		|					ВТСписокФизЛиц КАК Работники)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НДФЛСведенияОДоходах.ФизЛицо) КАК ПериодыДохода
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
		|		ПО (Месяцы.Период МЕЖДУ ПериодыДохода.ПериодМин И ПериодыДохода.ПериодМакс)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	Период";
	КонецЕсли;
	Запрос.Выполнить();
	
	// ФизлицаНеРезиденты
	//	Поля:
	//		Физлицо
	//		Период
	//
	//	Описание:
	//	сисок физлиц-нерезидентов

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
	|	ГражданствоПоГодам.ПериодФизлица КАК Период
	|ПОМЕСТИТЬ ВТФизлицаНеРезиденты
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Физлица.ФизЛицо КАК Физлицо,
	|		Физлица.Период КАК ПериодФизлица,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК Период
	|	ИЗ
	|		ВТПериоды КАК Физлица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО Физлица.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	|				И (ГражданствоФизЛиц.Период <= ВЫБОР
	|					КОГДА КОНЕЦПЕРИОДА(Физлица.Период, ГОД) >= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|						ТОГДА КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|					ИНАЧЕ КОНЕЦПЕРИОДА(Физлица.Период, ГОД)
	|				КОНЕЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Физлица.ФизЛицо,
	|		Физлица.Период) КАК ГражданствоПоГодам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО ГражданствоПоГодам.Физлицо = ГражданствоФизЛиц.ФизЛицо
	|			И ГражданствоПоГодам.Период = ГражданствоФизЛиц.Период
	|ГДЕ
	|	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРФ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период";
	Запрос.Выполнить();

	// ДоходыСКодамиВычетов
	//	Поля:
	//		ФизЛицо
	//		Период
	//		КодДохода
	//		КодВычета
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//
	//	Описание:
	// Выбирает облагаемые налогом доходы за весь год по физлицам из СписокФизлиц

	Ставка30Текст        = "0.3";
	ТипЗначенияНДФЛТекст = "ЧИСЛО(10, 0)";
	
	// ДоходыЗаГод 
	//	Поля:
	//		ФизЛицо
	//		Период
	//		Резидент
	//		ОблагаемыйДоходЗаГод
	//
	//	Описание:
	//	Выбирает по всем периодам с начала года сумму дохода нарастающим итогом за год

	ДоходыЗаГодТекст = 
	"ВЫБРАТЬ
	|	НДФЛОбороты.Физлицо КАК ФизЛицо,
	|	НДФЛОбороты.Период КАК Период,
	|	НДФЛОбороты.ВычетТолькоДляРезидентов КАК ВычетТолькоДляРезидентов,
	|	НДФЛОбороты.НеВключатьВДоходыРезидентов,
	|	СУММА(НДФЛОбороты.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|	СУММА(НДФЛОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот
	|ПОМЕСТИТЬ ВТДоходыСКодамиВычетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		НДФЛСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		ВЫБОР
	|			КОГДА НДФЛСведенияОДоходах.КодВычета В (&КодыВычетовРезидентов)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВычетТолькоДляРезидентов,
	|		ВЫБОР
	|			КОГДА НДФЛСведенияОДоходах.КодДохода В (&МассивКодовДоходовРаздела7)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеВключатьВДоходыРезидентов,
	|		ЕСТЬNULL(СУММА(НДФЛСведенияОДоходах.СуммаДохода), 0) КАК СуммаДоходаОборот,
	|		ЕСТЬNULL(СУММА(НДФЛСведенияОДоходах.СуммаВычета), 0) КАК СуммаВычетаОборот
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|			ПО Периоды.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
	|				И (Периоды.Период = НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ))
	|	ГДЕ
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) <= &парамПериодРегистрации
	|		И НДФЛСведенияОДоходах.Организация = &парамОрганизация
	|		И НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|		И (НЕ НДФЛСведенияОДоходах.КодДохода В (ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2220), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2210)))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
	|		НДФЛСведенияОДоходах.ФизЛицо,
	|		ВЫБОР
	|			КОГДА НДФЛСведенияОДоходах.КодВычета В (&КодыВычетовРезидентов)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДФЛСведенияОДоходах.КодДохода В (&МассивКодовДоходовРаздела7)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НДФЛОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛОбороты.Физлицо,
	|	НДФЛОбороты.Период,
	|	НДФЛОбороты.ВычетТолькоДляРезидентов,
	|	НДФЛОбороты.НеВключатьВДоходыРезидентов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	Периоды.Физлицо КАК ФизЛицо,
	|	СУММА(ПредоставленныеВычетыФизЛиц.ПримененныйВычет) КАК Сумма
	|ПОМЕСТИТЬ ВТСоциальныеВычеты
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛПредоставленныеСтандартныеВычетыФизЛиц КАК ПредоставленныеВычетыФизЛиц
	|		ПО Периоды.Физлицо = ПредоставленныеВычетыФизЛиц.ФизЛицо
	|			И (ПредоставленныеВычетыФизЛиц.МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
	|ГДЕ
	|	ПредоставленныеВычетыФизЛиц.Организация = &парамОрганизация
	|	И ПредоставленныеВычетыФизЛиц.Регистратор <> &парамРегистратор
	|	И ПредоставленныеВычетыФизЛиц.Период <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|	И (НЕ ПредоставленныеВычетыФизЛиц.КодВычета В (ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код103), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код104), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код105)))
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛОбороты.Период КАК Период,
	|	НДФЛОбороты.ФизЛицо КАК ФизЛицо,
	|	НДФЛОбороты.Резидент КАК Резидент,
	|	СУММА(НДФЛОбороты.НалогНерезидента) КАК НалогНерезидента,
	|	СУММА(НДФЛОбороты.ОблагаемыйДоходЗаГод) КАК ОблагаемыйДоходЗаГод
	|ПОМЕСТИТЬ ВТДоходыНарастающимЗаГод
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		Периоды.Физлицо КАК ФизЛицо,
	|		ВЫБОР
	|			КОГДА ФизлицаНеРезиденты.Физлицо ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Резидент,
	|		ВЫБОР
	|			КОГДА НДФЛОбороты.Период = Периоды.Период
	|				ТОГДА ВЫРАЗИТЬ((НДФЛОбороты.СуммаДоходаОборот - ВЫБОР
	|							КОГДА ФизлицаНеРезиденты.Физлицо ЕСТЬ NULL 
	|									ИЛИ (НЕ НДФЛОбороты.ВычетТолькоДляРезидентов)
	|								ТОГДА НДФЛОбороты.СуммаВычетаОборот
	|							ИНАЧЕ 0
	|						КОНЕЦ) * 0.3 КАК ЧИСЛО(10, 0))
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НалогНерезидента,
	|		ВЫБОР
	|			КОГДА ФизлицаНеРезиденты.Физлицо ЕСТЬ NULL 
	|					И НДФЛОбороты.НеВключатьВДоходыРезидентов
	|				ТОГДА 0
	|			ИНАЧЕ НДФЛОбороты.СуммаДоходаОборот - ВЫБОР
	|					КОГДА ФизлицаНеРезиденты.Физлицо ЕСТЬ NULL 
	|							ИЛИ (НЕ НДФЛОбороты.ВычетТолькоДляРезидентов)
	|						ТОГДА НДФЛОбороты.СуммаВычетаОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ КАК ОблагаемыйДоходЗаГод
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаНеРезиденты КАК ФизлицаНеРезиденты
	|			ПО Периоды.Физлицо = ФизлицаНеРезиденты.Физлицо
	|				И Периоды.Период = ФизлицаНеРезиденты.Период
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСКодамиВычетов КАК НДФЛОбороты
	|			ПО (НДФЛОбороты.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период)
	|				И Периоды.Физлицо = НДФЛОбороты.ФизЛицо) КАК НДФЛОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛОбороты.Период,
	|	НДФЛОбороты.ФизЛицо,
	|	НДФЛОбороты.Резидент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыНарастающимЗаГод.Период КАК Период,
	|	ДоходыНарастающимЗаГод.ФизЛицо КАК ФизЛицо,
	|	ДоходыНарастающимЗаГод.Резидент,
	|	ДоходыНарастающимЗаГод.НалогНерезидента,
	|	ВЫБОР
	|		КОГДА ДоходыНарастающимЗаГод.ОблагаемыйДоходЗаГод > ЕСТЬNULL(СоциальныеВычеты.Сумма, 0)
	|			ТОГДА ДоходыНарастающимЗаГод.ОблагаемыйДоходЗаГод - ЕСТЬNULL(СоциальныеВычеты.Сумма, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоходЗаГод,
	|	ВЫБОР
	|		КОГДА ДоходыНарастающимЗаГод.ОблагаемыйДоходЗаГод > ЕСТЬNULL(СоциальныеВычеты.Сумма, 0)
	|			ТОГДА ДоходыНарастающимЗаГод.ОблагаемыйДоходЗаГод - ЕСТЬNULL(СоциальныеВычеты.Сумма, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоходыНарастающимПоПрошлыйМесяц.ОблагаемыйДоходЗаГод, 0) > ЕСТЬNULL(СоциальныеВычетыПоПрошлыйМесяц.Сумма, 0)
	|			ТОГДА ЕСТЬNULL(ДоходыНарастающимПоПрошлыйМесяц.ОблагаемыйДоходЗаГод, 0) - ЕСТЬNULL(СоциальныеВычетыПоПрошлыйМесяц.Сумма, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоходЗаПериод
	|ПОМЕСТИТЬ ВТДоходыЗаГод
	|ИЗ
	|	ВТДоходыНарастающимЗаГод КАК ДоходыНарастающимЗаГод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоциальныеВычеты КАК СоциальныеВычеты
	|		ПО ДоходыНарастающимЗаГод.Период = СоциальныеВычеты.Период
	|			И ДоходыНарастающимЗаГод.ФизЛицо = СоциальныеВычеты.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыНарастающимЗаГод КАК ДоходыНарастающимПоПрошлыйМесяц
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСоциальныеВычеты КАК СоциальныеВычетыПоПрошлыйМесяц
	|			ПО ДоходыНарастающимПоПрошлыйМесяц.Период = СоциальныеВычетыПоПрошлыйМесяц.Период
	|				И ДоходыНарастающимПоПрошлыйМесяц.ФизЛицо = СоциальныеВычетыПоПрошлыйМесяц.ФизЛицо
	|		ПО ДоходыНарастающимЗаГод.ФизЛицо = ДоходыНарастающимПоПрошлыйМесяц.ФизЛицо
	|			И (ДоходыНарастающимЗаГод.Период = ДОБАВИТЬКДАТЕ(ДоходыНарастающимПоПрошлыйМесяц.Период, МЕСЯЦ, 1))
	|			И (ГОД(ДоходыНарастающимЗаГод.Период) = ГОД(ДоходыНарастающимПоПрошлыйМесяц.Период))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период";
	Запрос.Текст = ДоходыЗаГодТекст;
	Запрос.Выполнить();

	// НДФЛРасчетыСБюджетомЗаГод
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныйНалогЗаГод
	//
	//	Описание:
	//	Выбирает исчисленные налоги нарастающим итогом за год
	
	НДФЛРасчетыСБюджетомЗаГодТекст = 
	"ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	Периоды.Физлицо КАК ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА ФизлицаНеРезиденты.Физлицо ЕСТЬ NULL 
	|				ТОГДА НДФЛРасчетыСБюджетом.Налог
	|			КОГДА Периоды.Период = НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода
	|				ТОГДА НДФЛРасчетыСБюджетом.Налог
	|		КОНЕЦ) КАК ИсчисленныйНалогЗаГод
	|ПОМЕСТИТЬ ВТНДФЛРасчетыСБюджетомЗаГод
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|		ПО (НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период)
	|			И Периоды.Физлицо = НДФЛРасчетыСБюджетом.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаНеРезиденты КАК ФизлицаНеРезиденты
	|		ПО Периоды.Физлицо = ФизлицаНеРезиденты.Физлицо
	|			И Периоды.Период = ФизлицаНеРезиденты.Период
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.Организация = &парамОрганизация
	|	И НДФЛРасчетыСБюджетом.Регистратор <> &парамРегистратор
	|	И НДФЛРасчетыСБюджетом.Период <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|	И НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	И НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период";
	Запрос.Текст = НДФЛРасчетыСБюджетомЗаГодТекст;
	Запрос.Выполнить();
	
	ПредоставленныеСтандартныеВычетыЗаГодТекст = 
	"ВЫБРАТЬ
	|	НДФЛПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НДФЛПредоставленныеСтандартныеВычеты.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета В (ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код103), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код104), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код105))
	|				ТОГДА НДФЛПредоставленныеСтандартныеВычеты.ПримененныйВычет
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныеВычетыЛичные,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101)
	|				ТОГДА НДФЛПредоставленныеСтандартныеВычеты.ПримененныйВычет
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПримененныеВычетыДетские,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102)
	|				ТОГДА НДФЛПредоставленныеСтандартныеВычеты.ПримененныйВычет
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПримененныеВычетыДетскиеДвойные,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111)
	|				ТОГДА НДФЛПредоставленныеСтандартныеВычеты.ПримененныйВычет
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПримененныеВычетыДетскиеДвойныеВторые,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106)
	|				ТОГДА НДФЛПредоставленныеСтандартныеВычеты.ПримененныйВычет
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПримененныеВычетыНаДетейИнвалидов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107)
	|				ТОГДА НДФЛПредоставленныеСтандартныеВычеты.ПримененныйВычет
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПримененныеВычетыНаДетейИнвалидовДвойные,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113)
	|				ТОГДА НДФЛПредоставленныеСтандартныеВычеты.ПримененныйВычет
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПримененныеВычетыНаДетейИнвалидовДвойныеВторые
	|ПОМЕСТИТЬ ВТПредоставленныеСтандартныеВычеты
	|ИЗ
	|	РегистрНакопления.НДФЛПредоставленныеСтандартныеВычетыФизЛиц КАК НДФЛПредоставленныеСтандартныеВычеты
	|ГДЕ
	|	НДФЛПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода
	|	И НДФЛПредоставленныеСтандартныеВычеты.Организация = &парамОрганизация
	|	И НДФЛПредоставленныеСтандартныеВычеты.Регистратор <> &парамРегистратор
	|	И НДФЛПредоставленныеСтандартныеВычеты.Период <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|	И НДФЛПредоставленныеСтандартныеВычеты.ФизЛицо В
	|			(ВЫБРАТЬ
	|				Работники.Физлицо
	|			ИЗ
	|				ВТСписокФизЛиц КАК Работники)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода,
	|	НДФЛПредоставленныеСтандартныеВычеты.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	Периоды.Физлицо КАК ФизЛицо,
	|	СУММА(ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПримененныеВычетыЛичные, 0)) КАК ПримененныеВычетыЛичныеЗаГод,
	|	СУММА(ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПолеПримененныеВычетыДетские, 0)) КАК ПолеПримененныеВычетыДетскиеЗаГод,
	|	СУММА(ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПолеПримененныеВычетыДетскиеДвойные, 0)) КАК ПолеПримененныеВычетыДетскиеДвойныеЗаГод,
	|	СУММА(ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПолеПримененныеВычетыДетскиеДвойныеВторые, 0)) КАК ПолеПримененныеВычетыДетскиеДвойныеВторыеЗаГод,
	|	СУММА(ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПолеПримененныеВычетыНаДетейИнвалидов, 0)) КАК ПолеПримененныеВычетыНаДетейИнвалидовЗаГод,
	|	СУММА(ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПолеПримененныеВычетыНаДетейИнвалидовДвойные, 0)) КАК ПолеПримененныеВычетыНаДетейИнвалидовДвойныеЗаГод,
	|	СУММА(ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПолеПримененныеВычетыНаДетейИнвалидовДвойныеВторые, 0)) КАК ПолеПримененныеВычетыНаДетейИнвалидовДвойныеВторыеЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА Периоды.Период = ПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода
	|				ТОГДА ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПримененныеВычетыЛичные, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныеВычетыЛичныеЗаМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА Периоды.Период = ПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода
	|				ТОГДА ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПолеПримененныеВычетыДетские, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПримененныеВычетыДетскиеЗаМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА Периоды.Период = ПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода
	|				ТОГДА ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПолеПримененныеВычетыДетскиеДвойные, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПримененныеВычетыДетскиеДвойныеЗаМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА Периоды.Период = ПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода
	|				ТОГДА ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПолеПримененныеВычетыДетскиеДвойныеВторые, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПримененныеВычетыДетскиеДвойныеВторыеЗаМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА Периоды.Период = ПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода
	|				ТОГДА ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПолеПримененныеВычетыНаДетейИнвалидов, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПримененныеВычетыНаДетейИнвалидовЗаМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА Периоды.Период = ПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода
	|				ТОГДА ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПолеПримененныеВычетыНаДетейИнвалидовДвойные, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПримененныеВычетыНаДетейИнвалидовДвойныеЗаМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА Периоды.Период = ПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода
	|				ТОГДА ЕСТЬNULL(ПредоставленныеСтандартныеВычеты.ПолеПримененныеВычетыНаДетейИнвалидовДвойныеВторые, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПримененныеВычетыНаДетейИнвалидовДвойныеВторыеЗаМесяц
	|ПОМЕСТИТЬ ВТПредоставленныеСтандартныеВычетыЗаГод
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставленныеСтандартныеВычеты КАК ПредоставленныеСтандартныеВычеты
	|		ПО Периоды.Физлицо = ПредоставленныеСтандартныеВычеты.ФизЛицо
	|			И (ПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период";
	Запрос.Текст = ПредоставленныеСтандартныеВычетыЗаГодТекст;
	Запрос.Выполнить();

	// первый год
	НачалоГода = НачалоГода(ПоследнийМесяцНалоговогоПериода);	
	ПериодыТекстПоГодам = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачалоГода,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	ПериодыТекстПоГодам = ПериодыТекстПоГодам + "
	|ПОМЕСТИТЬ ВТПериодыПоГодам";
	Для Сч = Год(ПервыйМесяцНалоговогоПериода)+ 1 По Год(ПоследнийМесяцНалоговогоПериода) Цикл
		НачалоГода = НачалоГода(НачалоГода - 1);
		ПериодыТекстПоГодам = ПериодыТекстПоГодам +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачалоГода,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	ПериодыТекстПоГодам = ПериодыТекстПоГодам + "
	|ИНДЕКСИРОВАТЬ ПО Период";
 	Запрос.Текст = ПериодыТекстПоГодам;
	Запрос.Выполнить();
	
	// НДФЛРазмерВычетов
	// Таблица "НДФЛРазмерВычетов": - таблица это список вычетов, их размер, ограничения по доходам
	// поля:
	//		Период, 
	//		КодВычета,
	//		Размер, 
	//		ОграничениеПоДоходам,
	// Описание:	
	//	Выбираем Из Список периодов (период - год)
	//	Левое соединение с НДФЛРазмерВычетов
	//	по равенству периодов
	// 
	
	// ПрименениеВычетовВОрганизации
	//	Поля:
	//		Физлицо,
	//		Период
	//
	// Описание:
	//	Выбирает список физлиц + периодв в которые применяются стандартные вычеты по 
	//	заданной организации

	// Временная таблица СтандартныеВычетыНаДетей
	//	Поля:
	//		Физлицо
	//		Период
	//		КодВычета
	//		КоличествоДетей
	//
	//	Описание:
	//	Выбирает по всем периодам года стандартные вычеты на детей на которые имеет право физлицо

	ПраваНаВычетыТекст =      
	"ВЫБРАТЬ
	|	НДФЛПрименениеВычетовСрезПоследних.Физлицо КАК Физлицо,
	|	НДФЛПрименениеВычетовСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТПрименениеВычетовВОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(НДФЛПрименениеВычетов.Период) КАК ПериодСреза,
	|		Периоды.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|			ПО Периоды.Период >= НДФЛПрименениеВычетов.Период
	|				И (НДФЛПрименениеВычетов.Физлицо = Периоды.Физлицо)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Физлицо,
	|		Периоды.Период) КАК НДФЛПрименениеВычетовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|		ПО НДФЛПрименениеВычетовСрезПоследних.ПериодСреза = НДФЛПрименениеВычетов.Период
	|			И НДФЛПрименениеВычетовСрезПоследних.Физлицо = НДФЛПрименениеВычетов.Физлицо
	|ГДЕ
	|	НДФЛПрименениеВычетов.Организация = &парамОрганизация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	ЕСТЬNULL(НДФЛРазмерВычетов.КодВычета, ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)) КАК КодВычета,
	|	НДФЛРазмерВычетов.Размер КАК Размер,
	|	НДФЛРазмерВычетов.ОграничениеПоДоходам КАК ОграничениеПоДоходам
	|ПОМЕСТИТЬ ВТНДФЛРазмерВычетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		НДФЛРазмерВычетов.КодВычета КАК КодВычета,
	|		МАКСИМУМ(НДФЛРазмерВычетов.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериодыПоГодам КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК НДФЛРазмерВычетов
	|			ПО Периоды.Период >= НДФЛРазмерВычетов.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период,
	|		НДФЛРазмерВычетов.КодВычета) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК НДФЛРазмерВычетов
	|		ПО (НДФЛРазмерВычетов.Период = Периоды.ПериодРегистра)
	|			И Периоды.КодВычета = НДФЛРазмерВычетов.КодВычета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодВычета,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрезПоследних.Период,
	|	СрезПоследних.Физлицо КАК Физлицо,
	|	СрезПоследних.КодВычета КАК КодВычета,
	|	ВЫБОР
	|		КОГДА НДФЛСтандартныеВычетыНаДетей.ПериодЗавершения <= СрезПоследних.Период
	|				И НДФЛСтандартныеВычетыНаДетей.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА НДФЛСтандартныеВычетыНаДетей.КоличествоДетейЗавершения
	|		ИНАЧЕ НДФЛСтандартныеВычетыНаДетей.КоличествоДетей
	|	КОНЕЦ КАК КоличествоДетей
	|ПОМЕСТИТЬ ВТСтандартныеВычетыНаДетей
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		Периоды.Физлицо КАК Физлицо,
	|		НДФЛСтандартныеВычетыНаДетей.КодВычета КАК КодВычета,
	|		МАКСИМУМ(НДФЛСтандартныеВычетыНаДетей.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыНаДетей КАК НДФЛСтандартныеВычетыНаДетей
	|			ПО Периоды.Период >= НДФЛСтандартныеВычетыНаДетей.Период
	|				И Периоды.Физлицо = НДФЛСтандартныеВычетыНаДетей.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Физлицо,
	|		НДФЛСтандартныеВычетыНаДетей.КодВычета,
	|		Периоды.Период) КАК СрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыНаДетей КАК НДФЛСтандартныеВычетыНаДетей
	|		ПО СрезПоследних.ПериодРегистра = НДФЛСтандартныеВычетыНаДетей.Период
	|			И СрезПоследних.Физлицо = НДФЛСтандартныеВычетыНаДетей.Физлицо
	|			И СрезПоследних.КодВычета = НДФЛСтандартныеВычетыНаДетей.КодВычета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	КодВычета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Физлицо КАК Физлицо,
	|	Периоды.Период КАК Период,
	|	НДФЛРазмерВычетовЛичный.ОграничениеПоДоходам КАК ОграничениеПоДоходамЛичные,
	|	НДФЛРазмерВычетовНаДетей.ОграничениеПоДоходам КАК ОграничениеПоДоходамНаДетей,
	|	ВычетыФизлиц.КодВычетаЛичный,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.Физлицо ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовЛичный.Размер, 0)
	|	КОНЕЦ КАК СтандартныеВычетыЛичные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.Физлицо ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовНаДетей.Размер, 0) * ЕСТЬNULL(СтандартныеВычетыНаДетей.КоличествоДетей, 0)
	|	КОНЕЦ КАК СтандартныеВычетыДетские,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.Физлицо ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовНаДетейДвойные.Размер, 0) * ЕСТЬNULL(СтандартныеВычетыНаДетейДвойные.КоличествоДетей, 0)
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеДвойные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.Физлицо ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовНаДетейДвойныеВторые.Размер, 0) * ЕСТЬNULL(СтандартныеВычетыНаДетейДвойныеВторые.КоличествоДетей, 0)
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеДвойныеВторые,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.Физлицо ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовНаДетейИнвалидов.Размер, 0) * ЕСТЬNULL(СтандартныеВычетыНаДетейИнвалидов.КоличествоДетей, 0)
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.Физлицо ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовНаДетейИнвалидовДвойные.Размер, 0) * ЕСТЬNULL(СтандартныеВычетыНаДетейИнвалидовДвойные.КоличествоДетей, 0)
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидовДвойные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.Физлицо ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовНаДетейИнвалидовДвойныеВторые.Размер, 0) * ЕСТЬNULL(СтандартныеВычетыНаДетейИнвалидовДвойныеВторые.КоличествоДетей, 0)
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидовДвойныеВторые
	|ПОМЕСТИТЬ ВТПраваНаВычеты
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|			Периоды.Физлицо КАК Физлицо,
	|			Периоды.Период КАК Период
	|		ИЗ
	|			ВТПериоды КАК Периоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|				ПО Периоды.Период >= ВычетыФизлиц.Период
	|					И Периоды.Физлицо = ВычетыФизлиц.Физлицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Физлицо,
	|			Периоды.Период) КАК НДФЛСтандартныеВычетыФизлицСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО НДФЛСтандартныеВычетыФизлицСрезПоследних.ПериодСреза = ВычетыФизлиц.Период
	|				И НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо = ВычетыФизлиц.Физлицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРазмерВычетов КАК НДФЛРазмерВычетовЛичный
	|			ПО (ВычетыФизлиц.КодВычетаЛичный = НДФЛРазмерВычетовЛичный.КодВычета)
	|				И (НДФЛРазмерВычетовЛичный.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, ГОД))
	|		ПО Периоды.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.Период
	|			И Периоды.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтандартныеВычетыНаДетей КАК СтандартныеВычетыНаДетей
	|		ПО (СтандартныеВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101))
	|			И Периоды.Физлицо = СтандартныеВычетыНаДетей.Физлицо
	|			И Периоды.Период = СтандартныеВычетыНаДетей.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРазмерВычетов КАК НДФЛРазмерВычетовНаДетей
	|		ПО (НДФЛРазмерВычетовНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101))
	|			И (НДФЛРазмерВычетовНаДетей.Период = НАЧАЛОПЕРИОДА(Периоды.Период, ГОД))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтандартныеВычетыНаДетей КАК СтандартныеВычетыНаДетейДвойные
	|		ПО (СтандартныеВычетыНаДетейДвойные.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102))
	|			И Периоды.Физлицо = СтандартныеВычетыНаДетейДвойные.Физлицо
	|			И Периоды.Период = СтандартныеВычетыНаДетейДвойные.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРазмерВычетов КАК НДФЛРазмерВычетовНаДетейДвойные
	|		ПО (НДФЛРазмерВычетовНаДетейДвойные.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102))
	|			И (НДФЛРазмерВычетовНаДетейДвойные.Период = НАЧАЛОПЕРИОДА(Периоды.Период, ГОД))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтандартныеВычетыНаДетей КАК СтандартныеВычетыНаДетейДвойныеВторые
	|		ПО (СтандартныеВычетыНаДетейДвойныеВторые.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111))
	|			И Периоды.Физлицо = СтандартныеВычетыНаДетейДвойныеВторые.Физлицо
	|			И Периоды.Период = СтандартныеВычетыНаДетейДвойныеВторые.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРазмерВычетов КАК НДФЛРазмерВычетовНаДетейДвойныеВторые
	|		ПО (НДФЛРазмерВычетовНаДетейДвойныеВторые.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111))
	|			И (НДФЛРазмерВычетовНаДетейДвойныеВторые.Период = НАЧАЛОПЕРИОДА(Периоды.Период, ГОД))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтандартныеВычетыНаДетей КАК СтандартныеВычетыНаДетейИнвалидов
	|		ПО (СтандартныеВычетыНаДетейИнвалидов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106))
	|			И Периоды.Физлицо = СтандартныеВычетыНаДетейИнвалидов.Физлицо
	|			И Периоды.Период = СтандартныеВычетыНаДетейИнвалидов.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРазмерВычетов КАК НДФЛРазмерВычетовНаДетейИнвалидов
	|		ПО (НДФЛРазмерВычетовНаДетейИнвалидов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106))
	|			И (НДФЛРазмерВычетовНаДетейИнвалидов.Период = НАЧАЛОПЕРИОДА(Периоды.Период, ГОД))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтандартныеВычетыНаДетей КАК СтандартныеВычетыНаДетейИнвалидовДвойные
	|		ПО (СтандартныеВычетыНаДетейИнвалидовДвойные.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107))
	|			И Периоды.Физлицо = СтандартныеВычетыНаДетейИнвалидовДвойные.Физлицо
	|			И Периоды.Период = СтандартныеВычетыНаДетейИнвалидовДвойные.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРазмерВычетов КАК НДФЛРазмерВычетовНаДетейИнвалидовДвойные
	|		ПО (НДФЛРазмерВычетовНаДетейИнвалидовДвойные.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107))
	|			И (НДФЛРазмерВычетовНаДетейИнвалидовДвойные.Период = НАЧАЛОПЕРИОДА(Периоды.Период, ГОД))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтандартныеВычетыНаДетей КАК СтандартныеВычетыНаДетейИнвалидовДвойныеВторые
	|		ПО (СтандартныеВычетыНаДетейИнвалидовДвойныеВторые.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113))
	|			И Периоды.Физлицо = СтандартныеВычетыНаДетейИнвалидовДвойныеВторые.Физлицо
	|			И Периоды.Период = СтандартныеВычетыНаДетейИнвалидовДвойныеВторые.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРазмерВычетов КАК НДФЛРазмерВычетовНаДетейИнвалидовДвойныеВторые
	|		ПО (НДФЛРазмерВычетовНаДетейИнвалидовДвойныеВторые.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113))
	|			И (НДФЛРазмерВычетовНаДетейИнвалидовДвойныеВторые.Период = НАЧАЛОПЕРИОДА(Периоды.Период, ГОД))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеВычетовВОрганизации КАК ПрименениеВычетов
	|		ПО (НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо = ПрименениеВычетов.Физлицо)
	|			И (НДФЛСтандартныеВычетыФизлицСрезПоследних.Период = ПрименениеВычетов.Период)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период";
 	Запрос.Текст = ПраваНаВычетыТекст;
	Запрос.Выполнить();
	
	НалоговаяПолитикаНДФЛ = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.ПолучитьПоследнее(КонецГода(ПериодРегистрации), Новый Структура("Организация", Организация)).ОсобенностиИсчисленияНДФЛ;
	Если Не ЗначениеЗаполнено(НалоговаяПолитикаНДФЛ) Тогда
		НалоговаяПолитикаНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом;
	КонецЕсли;

	Если НалоговаяПолитикаНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом Тогда
		
		// ПрименяемыеВычеты
		// Поля:
		//		Физлицо
		//		Период
		//		ПрименяемыеВычетыЛичные
		//		ПрименяемыеВычетыДетские
		//
		//	Описание:
		//	Выбирает по всем периодам года применяемые стандартные вычеты
		//  с использованием ограничения по доходам
		
		// ПрименяемыеВычетыЗаГод
		//	Поля:
		//		Физлицо
		//		Период
		//		ВычетыЛичныеЗаГод
		//		ВычетыДетскиеЗаГод
		//
		//	Описание:
		//	Выбирает по всем периодам года применяемые стандартные вычеты нарастающим итогом за год
		//
		
		ПрименяемыеВычетыТекст = 
		"ВЫБРАТЬ
		|	РаботникиОргПраваНаВычеты.ФизЛицо КАК Физлицо,
		|	РаботникиОргПраваНаВычеты.Период КАК Период,
		|	РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные,
		|	РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные = 0
		|			ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыЛичные,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0
		|			ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыДетские,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0
		|			ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыДетскиеДвойные,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0
		|			ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыДетскиеДвойныеВторые,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0
		|			ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыДетскиеИнвалидов,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0
		|			ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыДетскиеИнвалидовДвойные,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0
		|			ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыДетскиеИнвалидовДвойныеВторые
		|ПОМЕСТИТЬ ВТПрименяемыеВычеты
		|ИЗ
		|	ВТПраваНаВычеты КАК РаботникиОргПраваНаВычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыЗаГод КАК ДоходыЗаГод
		|		ПО РаботникиОргПраваНаВычеты.Период = ДоходыЗаГод.Период
		|			И РаботникиОргПраваНаВычеты.ФизЛицо = ДоходыЗаГод.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛДоходыПредыдущегоМестаРаботы КАК НДФЛДоходыПредыдущегоМестаРаботы
		|		ПО (НДФЛДоходыПредыдущегоМестаРаботы.Организация = &парамОрганизация)
		|			И РаботникиОргПраваНаВычеты.Период = НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода
		|			И РаботникиОргПраваНаВычеты.ФизЛицо = НДФЛДоходыПредыдущегоМестаРаботы.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Периоды.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		|	ПраваНаВычеты.КодВычетаЛичный,
		|	МАКСИМУМ(ВычетыПоПериодам.ОграничениеПоДоходамЛичные) КАК ОграничениеПоДоходамЛичные,
		|	МАКСИМУМ(ВычетыПоПериодам.ОграничениеПоДоходамНаДетей) КАК ОграничениеПоДоходамНаДетей,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыЛичные) КАК ВычетыЛичныеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетские) КАК ВычетыДетскиеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетскиеДвойные) КАК ВычетыДетскиеДвойныеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетскиеДвойныеВторые) КАК ВычетыДетскиеДвойныеВторыеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетскиеИнвалидов) КАК ВычетыДетскиеИнвалидовЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетскиеИнвалидовДвойные) КАК ВычетыДетскиеИнвалидовДвойныеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетскиеИнвалидовДвойныеВторые) КАК ВычетыДетскиеИнвалидовДвойныеВторыеЗаГод
		|ПОМЕСТИТЬ ВТПрименяемыеВычетыЗаГод
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычеты КАК ПраваНаВычеты
		|		ПО Периоды.Физлицо = ПраваНаВычеты.Физлицо
		|			И Периоды.Период = ПраваНаВычеты.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименяемыеВычеты КАК ВычетыПоПериодам
		|		ПО Периоды.Физлицо = ВычетыПоПериодам.Физлицо
		|			И (ВычетыПоПериодам.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваНаВычеты.КодВычетаЛичный,
		|	Периоды.Физлицо,
		|	Периоды.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	Период";
	Иначе	
		ПрименяемыеВычетыТекст = 
		"ВЫБРАТЬ
		|	РаботникиОргПраваНаВычеты.ФизЛицо КАК Физлицо,
		|	РаботникиОргПраваНаВычеты.Период КАК Период,
		|	РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные,
		|	РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0
		|			ТОГДА ВЫБОР
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|						ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > 0
		|						ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыДетские,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0
		|			ТОГДА ВЫБОР
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|						ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские > 0
		|						ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыДетскиеДвойные,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0
		|			ТОГДА ВЫБОР
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|						ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные > 0
		|						ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыДетскиеДвойныеВторые,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0
		|			ТОГДА ВЫБОР
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|						ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские > 0
		|						ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыДетскиеИнвалидов,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0
		|			ТОГДА ВЫБОР
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|						ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские > 0
		|						ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыДетскиеИнвалидовДвойные,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0
		|			ТОГДА ВЫБОР
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|						ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские > 0
		|						ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыДетскиеИнвалидовДвойныеВторые,
		|	ВЫБОР
		|		КОГДА РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные = 0
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей
		|						ТОГДА ВЫБОР
		|								КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|									ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные
		|								КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые > 0
		|									ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые
		|								ИНАЧЕ 0
		|							КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные
		|								ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные
		|							КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > 0
		|								ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОГДА ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(НДФЛДоходыПредыдущегоМестаРаботы.Размер, 0) <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные
		|			ТОГДА ВЫБОР
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
		|						ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые > 0
		|						ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеДвойныеВторые - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыЛичные
		|ПОМЕСТИТЬ ВТПрименяемыеВычеты
		|ИЗ
		|	ВТПраваНаВычеты КАК РаботникиОргПраваНаВычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыЗаГод КАК ДоходыЗаГод
		|		ПО РаботникиОргПраваНаВычеты.Период = ДоходыЗаГод.Период
		|			И РаботникиОргПраваНаВычеты.ФизЛицо = ДоходыЗаГод.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛДоходыПредыдущегоМестаРаботы КАК НДФЛДоходыПредыдущегоМестаРаботы
		|		ПО (НДФЛДоходыПредыдущегоМестаРаботы.Организация = &парамОрганизация)
		|			И РаботникиОргПраваНаВычеты.Период = НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода
		|			И РаботникиОргПраваНаВычеты.ФизЛицо = НДФЛДоходыПредыдущегоМестаРаботы.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВычетыПоПериодам.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		|	ПраваНаВычеты.КодВычетаЛичный,
		|	МАКСИМУМ(ВычетыПоПериодам.ОграничениеПоДоходамЛичные) КАК ОграничениеПоДоходамЛичные,
		|	МАКСИМУМ(ВычетыПоПериодам.ОграничениеПоДоходамНаДетей) КАК ОграничениеПоДоходамНаДетей,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыЛичные) КАК ВычетыЛичныеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетские) КАК ВычетыДетскиеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетскиеДвойные) КАК ВычетыДетскиеДвойныеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетскиеДвойныеВторые) КАК ВычетыДетскиеДвойныеВторыеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетскиеИнвалидов) КАК ВычетыДетскиеИнвалидовЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетскиеИнвалидовДвойные) КАК ВычетыДетскиеИнвалидовДвойныеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетскиеИнвалидовДвойныеВторые) КАК ВычетыДетскиеИнвалидовДвойныеВторыеЗаГод
		|ПОМЕСТИТЬ ВТПрименяемыеВычетыЗаГод
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычеты КАК ПраваНаВычеты
		|		ПО Периоды.Физлицо = ПраваНаВычеты.Физлицо
		|			И Периоды.Период = ПраваНаВычеты.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименяемыеВычеты КАК ВычетыПоПериодам
		|		ПО Периоды.Физлицо = ВычетыПоПериодам.Физлицо
		|			И (ВычетыПоПериодам.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваНаВычеты.КодВычетаЛичный,
		|	ВычетыПоПериодам.Физлицо,
		|	Периоды.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	Период";
	КонецЕсли;
	
	Запрос.Текст = ПрименяемыеВычетыТекст;
	Запрос.Выполнить();

	// Временные таблицы ВТВычеты312 и ВТВычеты311
	// Вычеты 311 и 312 за месяц и нарастающим итогом за год  
	//	Поля:
	//		Физлицо
	//		Период
	//		Вычет(311,312)Остаток
	//		Вычет(311,312)ЗаГод
	//		Вычет(311,312)ЗаМесяц
	//
	
	Вычеты312ПоМесяцамТекст = 
	"ВЫБРАТЬ
	|	Остатки.ФизЛицо КАК ФизЛицо,
	|	Остатки.Период КАК Период,
	|	Остатки.Год КАК НалоговыйПериод,
	|	Остатки.РазмерНачальныйОстаток КАК Вычет312Остаток,
	|	0 КАК ПримененныеВычеты312
	|ПОМЕСТИТЬ ВТВычеты312ПоМесяцам
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
	|			&парамНачалоГода,
	|			&парамКонецГода,
	|			Год,
	|			,
	|			КодВычетаИмущественный = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код312)
	|				И Физлицо В
	|					(ВЫБРАТЬ
	|						ФизЛица.Физлицо
	|					ИЗ
	|						ВТСписокФизЛиц КАК ФизЛица)
	|				И Организация = &парамОрганизация) КАК Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Обороты.ФизЛицо,
	|	Обороты.Период,
	|	Обороты.Год,
	|	Обороты.РазмерПриход,
	|	Обороты.РазмерРасход
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.Обороты(
	|			&парамНачалоГода,
	|			&парамКонецГода,
	|			Месяц,
	|			КодВычетаИмущественный = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код312)
	|				И Физлицо В
	|					(ВЫБРАТЬ
	|						ФизЛица.Физлицо
	|					ИЗ
	|						ВТСписокФизЛиц КАК ФизЛица)
	|				И Организация = &парамОрганизация) КАК Обороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Физлицо КАК Физлицо,
	|	Периоды.Период КАК Период,
	|	СУММА(Обороты.Вычет312Остаток) КАК Вычет312Остаток,
	|	СУММА(Обороты.ПримененныеВычеты312) КАК Вычет312ЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) = Периоды.Период
	|				ТОГДА Обороты.ПримененныеВычеты312
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Вычет312ЗаМесяц
	|ПОМЕСТИТЬ ВТВычеты312
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты312ПоМесяцам КАК Обороты
	|		ПО Периоды.ФизЛицо = Обороты.ФизЛицо
	|			И (Обороты.НалоговыйПериод = ГОД(Периоды.Период))
	|			И (Обороты.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Физлицо,
	|	Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период";
	
	Запрос.Текст = Вычеты312ПоМесяцамТекст;
	Запрос.Выполнить();
	
	Вычеты311ПоМесяцамТекст = 
	"ВЫБРАТЬ
	|	Остатки.ФизЛицо КАК ФизЛицо,
	|	Остатки.Период КАК Период,
	|	Остатки.Год КАК НалоговыйПериод,
	|	Остатки.РазмерНачальныйОстаток КАК Вычет311Остаток,
	|	0 КАК ПримененныеВычеты311
	|ПОМЕСТИТЬ ВТВычеты311ПоМесяцам
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
	|			&парамНачалоГода,
	|			&парамКонецГода,
	|			Год,
	|			,
	|			КодВычетаИмущественный = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код311)
	|				И Физлицо В
	|					(ВЫБРАТЬ
	|						ФизЛица.Физлицо
	|					ИЗ
	|						ВТСписокФизЛиц КАК ФизЛица)
	|				И Организация = &парамОрганизация) КАК Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Обороты.ФизЛицо,
	|	Обороты.Период,
	|	Обороты.Год,
	|	Обороты.РазмерПриход,
	|	Обороты.РазмерРасход
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.Обороты(
	|			&парамНачалоГода,
	|			&парамКонецГода,
	|			Месяц,
	|			КодВычетаИмущественный = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код311)
	|				И Физлицо В
	|					(ВЫБРАТЬ
	|						ФизЛица.Физлицо
	|					ИЗ
	|						ВТСписокФизЛиц КАК ФизЛица)
	|				И Организация = &парамОрганизация) КАК Обороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК Физлицо,
	|	Периоды.Период КАК Период,
	|	СУММА(Обороты.Вычет311Остаток) КАК Вычет311Остаток,
	|	СУММА(Обороты.ПримененныеВычеты311) КАК Вычет311ЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) = Периоды.Период
	|				ТОГДА Обороты.ПримененныеВычеты311
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Вычет311ЗаМесяц
	|ПОМЕСТИТЬ ВТВычеты311
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты311ПоМесяцам КАК Обороты
	|		ПО Периоды.ФизЛицо = Обороты.ФизЛицо
	|			И (Обороты.НалоговыйПериод = ГОД(Периоды.Период))
	|			И (Обороты.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период";
	Запрос.Текст = Вычеты311ПоМесяцамТекст;
	Запрос.Выполнить();
	
	// облагаемый доход с начала года
	ПолеОблагаемыйДоходЗаГод = "ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0)";

	// право на личный вычет за год
	ПолеВычетыЛичныеЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыЛичныеЗаГод, 0)";

	// право на вычет на детей за год
	ПолеВычетыДетскиеЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыДетскиеЗаГод, 0)";
	ПолеВычетыДетскиеДвойныеЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыДетскиеДвойныеЗаГод, 0)";
	ПолеВычетыДетскиеИнвалидовЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыДетскиеИнвалидовЗаГод, 0)";
	ПолеВычетыДетскиеИнвалидовДвойныеЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыДетскиеИнвалидовДвойныеЗаГод, 0)";
	ПолеВычетыДетскиеДвойныеВторыеЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыДетскиеДвойныеВторыеЗаГод, 0)";
	ПолеВычетыДетскиеИнвалидовДвойныеВторыеЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыДетскиеИнвалидовДвойныеВторыеЗаГод, 0)";
	
	ПолеВычет312Остаток = "ЕСТЬNULL(Вычеты312.Вычет312Остаток, 0)";
	ПолеВычет311Остаток = "ЕСТЬNULL(Вычеты311.Вычет311Остаток, 0)";
	
	// размер вычета на детей с начала года
	ПолеПримененныеВычетыДетские = 
	"ВЫБОР 
	|	КОГДА ДоходыЗаГод.Резидент 
	|	ТОГДА 
	|		ВЫБОР 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыДетскиеЗаГод + " 
	|				ТОГДА " + ПолеВычетыДетскиеЗаГод +" 
	|			ИНАЧЕ " + ПолеОблагаемыйДоходЗаГод + "
	|		КОНЕЦ 
	|	ИНАЧЕ 0 
	|КОНЕЦ";

	ПолеПримененныеВычетыДетскиеДвойные = 
	"ВЫБОР 
	|	КОГДА ДоходыЗаГод.Резидент 
	|	ТОГДА 
	|		ВЫБОР 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеДвойныеЗаГод + " 
	|				ТОГДА " + ПолеВычетыДетскиеДвойныеЗаГод +" 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод +" > " + ПолеВычетыДетскиеЗаГод + " 
	|				ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеВычетыДетскиеЗаГод + " 
	|			ИНАЧЕ 0 
	|		КОНЕЦ 
	|	ИНАЧЕ 0 
	|КОНЕЦ";

	ПолеПримененныеВычетыДетскиеДвойныеВторые = 
	"ВЫБОР 
	|	КОГДА ДоходыЗаГод.Резидент 
	|	ТОГДА 
	|		ВЫБОР 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеДвойныеЗаГод + " + " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " 
	|				ТОГДА " + ПолеВычетыДетскиеДвойныеВторыеЗаГод +" 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод +" > " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеДвойныеЗаГод + " 
	|				ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеВычетыДетскиеЗаГод + " - " + ПолеВычетыДетскиеДвойныеЗаГод + " 
	|			ИНАЧЕ 0 
	|		КОНЕЦ 
	|	ИНАЧЕ 0 
	|КОНЕЦ";

	ПолеПримененныеВычетыДетскиеИнвалидов = 
	"ВЫБОР 
	|	КОГДА ДоходыЗаГод.Резидент 
	|	ТОГДА 
	|		ВЫБОР 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеДвойныеЗаГод + " + " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " + " + ПолеВычетыДетскиеИнвалидовЗаГод + " 
	|				ТОГДА " + ПолеВычетыДетскиеИнвалидовЗаГод +" 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод +" > " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеДвойныеЗаГод + " + " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " 
	|				ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеВычетыДетскиеЗаГод + " - " + ПолеВычетыДетскиеДвойныеЗаГод + " - " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " 
	|			ИНАЧЕ 0 
	|		КОНЕЦ 
	|	ИНАЧЕ 0 
	|КОНЕЦ";
	
	ПолеПримененныеВычетыДетскиеИнвалидовДвойные = 
	"ВЫБОР 
	|	КОГДА ДоходыЗаГод.Резидент 
	|	ТОГДА 
	|		ВЫБОР 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеДвойныеЗаГод + " + " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " + " + ПолеВычетыДетскиеИнвалидовЗаГод + " + " + ПолеВычетыДетскиеИнвалидовДвойныеЗаГод + " 
	|				ТОГДА " + ПолеВычетыДетскиеИнвалидовДвойныеЗаГод +" 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод +" > " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеДвойныеЗаГод + " + " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " + " + ПолеВычетыДетскиеИнвалидовЗаГод + " 
	|				ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеВычетыДетскиеЗаГод + " - " + ПолеВычетыДетскиеДвойныеЗаГод + " - " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " - " + ПолеВычетыДетскиеИнвалидовЗаГод + " 
	|			ИНАЧЕ 0 
	|		КОНЕЦ 
	|	ИНАЧЕ 0 
	|КОНЕЦ";
	
	ПолеПримененныеВычетыДетскиеИнвалидовДвойныеВторые = 
	"ВЫБОР 
	|	КОГДА ДоходыЗаГод.Резидент 
	|	ТОГДА 
	|		ВЫБОР 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеДвойныеЗаГод + " + " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " + " + ПолеВычетыДетскиеИнвалидовЗаГод + " + " + ПолеВычетыДетскиеИнвалидовДвойныеЗаГод + " + " + ПолеВычетыДетскиеИнвалидовДвойныеВторыеЗаГод + " 
	|				ТОГДА " + ПолеВычетыДетскиеИнвалидовДвойныеВторыеЗаГод +" 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод +" > " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеДвойныеЗаГод + " + " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " + " + ПолеВычетыДетскиеИнвалидовЗаГод + " + " + ПолеВычетыДетскиеИнвалидовДвойныеЗаГод + " 
	|				ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеВычетыДетскиеЗаГод + " - " + ПолеВычетыДетскиеДвойныеЗаГод + " - " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " - " + ПолеВычетыДетскиеИнвалидовЗаГод + " - " + ПолеВычетыДетскиеИнвалидовДвойныеЗаГод + " 
	|			ИНАЧЕ 0 
	|		КОНЕЦ 
	|	ИНАЧЕ 0 
	|КОНЕЦ";
	
	// размер примененного вычета на себя с начала года
	ПолеПримененныеВычетыЛичные = 
	"ВЫБОР 
	|	КОГДА ДоходыЗаГод.Резидент 
	|	ТОГДА 
	|		ВЫБОР 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыЛичныеЗаГод + " + " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеДвойныеЗаГод + " + " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " + " + ПолеВычетыДетскиеИнвалидовЗаГод + " + " + ПолеВычетыДетскиеИнвалидовДвойныеЗаГод + " + " + ПолеВычетыДетскиеИнвалидовДвойныеВторыеЗаГод + " 
	|				ТОГДА " + ПолеВычетыЛичныеЗаГод + " 
	|			КОГДА " + ПолеОблагаемыйДоходЗаГод +" > " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеДвойныеЗаГод + " + " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " + " + ПолеВычетыДетскиеИнвалидовЗаГод + " + " + ПолеВычетыДетскиеИнвалидовДвойныеЗаГод + " + " + ПолеВычетыДетскиеИнвалидовДвойныеВторыеЗаГод + "
	|				ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеВычетыДетскиеЗаГод + " - " + ПолеВычетыДетскиеДвойныеЗаГод + " - " + ПолеВычетыДетскиеДвойныеВторыеЗаГод + " - " + ПолеВычетыДетскиеИнвалидовЗаГод + " - " + ПолеВычетыДетскиеИнвалидовДвойныеЗаГод + " - " + ПолеВычетыДетскиеИнвалидовДвойныеВторыеЗаГод + " 
	|			ИНАЧЕ 0 
	|		КОНЕЦ 
	|	ИНАЧЕ 0 
	|КОНЕЦ";
	// размер вычета по коду 312
	ПолеПримененныеВычеты312 = 
	"ВЫБОР 
	|	КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеПримененныеВычетыЛичные + " + " + ПолеПримененныеВычетыДетские + " + " + ПолеПримененныеВычетыДетскиеДвойные + " + " + ПолеПримененныеВычетыДетскиеДвойныеВторые + " + " + ПолеПримененныеВычетыДетскиеИнвалидов + " + " + ПолеПримененныеВычетыДетскиеИнвалидовДвойные + " + " + ПолеПримененныеВычетыДетскиеИнвалидовДвойныеВторые + " 
	|	ТОГДА 
	|		ВЫБОР 
	|			КОГДА " + ПолеВычет312Остаток + " > " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеПримененныеВычетыЛичные + " - " + ПолеПримененныеВычетыДетские + " - " + ПолеПримененныеВычетыДетскиеДвойные + " + " + ПолеПримененныеВычетыДетскиеДвойныеВторые + " - " + ПолеПримененныеВычетыДетскиеИнвалидов + " - " + ПолеПримененныеВычетыДетскиеИнвалидовДвойные + " - " + ПолеПримененныеВычетыДетскиеИнвалидовДвойныеВторые + " 
	|				ТОГДА "  + ПолеОблагаемыйДоходЗаГод + " - " + ПолеПримененныеВычетыЛичные + " - " + ПолеПримененныеВычетыДетские + " - " + ПолеПримененныеВычетыДетскиеДвойные + " - " + ПолеПримененныеВычетыДетскиеДвойныеВторые + " - " + ПолеПримененныеВычетыДетскиеИнвалидов + " - " + ПолеПримененныеВычетыДетскиеИнвалидовДвойные + " - " + ПолеПримененныеВычетыДетскиеИнвалидовДвойныеВторые + " 
	|			ИНАЧЕ " + ПолеВычет312Остаток + "
	|		КОНЕЦ 
	|	ИНАЧЕ 0 
	|КОНЕЦ";
	// размер вычета по коду 311
	ПолеПримененныеВычеты311 = 
	"ВЫБОР 
	|	КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеПримененныеВычеты312 + " + " + ПолеПримененныеВычетыЛичные + " + " + ПолеПримененныеВычетыДетские + " + " + ПолеПримененныеВычетыДетскиеДвойные + " + " + ПолеПримененныеВычетыДетскиеДвойныеВторые + " + " + ПолеПримененныеВычетыДетскиеИнвалидов + " + " + ПолеПримененныеВычетыДетскиеИнвалидовДвойные + " + " + ПолеПримененныеВычетыДетскиеИнвалидовДвойныеВторые + " 
	|	ТОГДА 
	|		ВЫБОР 
	|			КОГДА " + ПолеВычет311Остаток + " > " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеПримененныеВычеты312 + " - " + ПолеПримененныеВычетыЛичные + " - " + ПолеПримененныеВычетыДетские + " - " + ПолеПримененныеВычетыДетскиеДвойные + " + " + ПолеПримененныеВычетыДетскиеДвойныеВторые + " - " + ПолеПримененныеВычетыДетскиеИнвалидов + " - " + ПолеПримененныеВычетыДетскиеИнвалидовДвойные + " - " + ПолеПримененныеВычетыДетскиеИнвалидовДвойныеВторые + " 
	|				ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеПримененныеВычеты312 + " - " + ПолеПримененныеВычетыЛичные + " - " + ПолеПримененныеВычетыДетские + " - " + ПолеПримененныеВычетыДетскиеДвойные + " - " + ПолеПримененныеВычетыДетскиеДвойныеВторые + " - " + ПолеПримененныеВычетыДетскиеИнвалидов + " - " + ПолеПримененныеВычетыДетскиеИнвалидовДвойные + " - " + ПолеПримененныеВычетыДетскиеИнвалидовДвойныеВторые + " 
	|			ИНАЧЕ " + ПолеВычет311Остаток + "
	|		КОНЕЦ 
	|	ИНАЧЕ 0 
	|КОНЕЦ";
	
	// сумма налога исчисленная
	ПолеНалогИсчисленный = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА ДоходыЗаГод.Резидент 
	|				ТОГДА (" + ПолеОблагаемыйДоходЗаГод +" - "+ ПолеПримененныеВычетыЛичные + " - " + ПолеПримененныеВычетыДетские + " - " + ПолеПримененныеВычетыДетскиеДвойные + " - " + ПолеПримененныеВычетыДетскиеДвойныеВторые + " - " + ПолеПримененныеВычетыДетскиеИнвалидов + " - " + ПолеПримененныеВычетыДетскиеИнвалидовДвойные + " - " + ПолеПримененныеВычетыДетскиеИнвалидовДвойныеВторые + " - " + ПолеПримененныеВычеты312 + " - " + ПолеПримененныеВычеты311+ ")  * &парамСтавкаРезидента13 
	|				ИНАЧЕ ЕСТЬNULL(ДоходыЗаГод.НалогНерезидента, 0)
	|				КОНЕЦ КАК " + ТипЗначенияНДФЛТекст + "))";
	
	// сумма ранее исчисленного налога
	ПолеРанееНалогИсчисленный = 
	"ВЫБОР 
	|	КОГДА НДФЛРасчетыСБюджетомЗаГод.ИсчисленныйНалогЗаГод = -99999999 
	|	ТОГДА 0 
	|	ИНАЧЕ ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ИсчисленныйНалогЗаГод, 0) 
	|КОНЕЦ";
	
	// сумма ранее примененных вычетов личных
	ПолеРанееПримененныеВычетыЛичные = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПримененныеВычетыЛичныеЗаГод, 0)";
	ПолеРанееПримененныеВычетыЛичныеЗаМесяц = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПримененныеВычетыЛичныеЗаМесяц, 0)";

	// сумма ранее примененных вычетов на детей
	ПолеРанееПримененныеВычетыДетские = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПолеПримененныеВычетыДетскиеЗаГод, 0)";
	ПолеРанееПримененныеВычетыДетскиеДвойные = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПолеПримененныеВычетыДетскиеДвойныеЗаГод, 0)";
	ПолеРанееПримененныеВычетыДетскиеЗаМесяц = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПолеПримененныеВычетыДетскиеЗаМесяц, 0)";
	ПолеРанееПримененныеВычетыДетскиеДвойныеЗаМесяц = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПолеПримененныеВычетыДетскиеДвойныеЗаМесяц, 0)";
	ПолеРанееПримененныеВычетыДетскиеИнвалидов = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПолеПримененныеВычетыНаДетейИнвалидовЗаГод, 0)";
	ПолеРанееПримененныеВычетыДетскиеИнвалидовДвойные = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПолеПримененныеВычетыНаДетейИнвалидовДвойныеЗаГод, 0)";
	ПолеРанееПримененныеВычетыДетскиеИнвалидовЗаМесяц = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПолеПримененныеВычетыНаДетейИнвалидовЗаМесяц, 0)";
	ПолеРанееПримененныеВычетыДетскиеИнвалидовДвойныеЗаМесяц = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПолеПримененныеВычетыНаДетейИнвалидовДвойныеЗаМесяц, 0)";
	ПолеРанееПримененныеВычетыДетскиеДвойныеВторые = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПолеПримененныеВычетыДетскиеДвойныеВторыеЗаГод, 0)";
	ПолеРанееПримененныеВычетыДетскиеДвойныеВторыеЗаМесяц = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПолеПримененныеВычетыДетскиеДвойныеВторыеЗаМесяц, 0)";
	ПолеРанееПримененныеВычетыДетскиеИнвалидовДвойныеВторые = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПолеПримененныеВычетыНаДетейИнвалидовДвойныеВторыеЗаГод, 0)";
	ПолеРанееПримененныеВычетыДетскиеИнвалидовДвойныеВторыеЗаМесяц = "ЕСТЬNULL(ПредоставленныеСтандартныеВычетыЗаГод.ПолеПримененныеВычетыНаДетейИнвалидовДвойныеВторыеЗаМесяц, 0)";

	// сумма ранее примененных вычетов по коду 312
	ПолеРанееПримененныеВычеты312 = "ЕСТЬNULL(Вычеты312.Вычет312ЗаГод, 0)";
	ПолеРанееПримененныеВычеты312ЗаМесяц = "ЕСТЬNULL(Вычеты312.Вычет312ЗаМесяц, 0)";

	// сумма ранее примененных вычетов по коду 311
	ПолеРанееПримененныеВычеты311 = "ЕСТЬNULL(Вычеты311.Вычет311ЗаГод, 0)";
	ПолеРанееПримененныеВычеты311ЗаМесяц = "ЕСТЬNULL(Вычеты311.Вычет311ЗаМесяц, 0)";
	
	Если КомментироватьРасчет Тогда
		
		ДоходыПоВидамРасчетаТекст = 
		"ВЫБРАТЬ
		|	НДФЛСведенияОДоходах.ДоходЗаМесяц КАК ДоходЗаМесяц,
		|	НДФЛСведенияОДоходах.ВычетЗаМесяц КАК ВычетЗаМесяц,
		|	СУММА(ДоходыПоВидамРасчета.Результат) КАК ДоходЗаМесяцПоВидамРасчета,
		|	НДФЛСведенияОДоходах.Физлицо КАК Физлицо,
		|	ДоходыПоВидамРасчета.ВидРасчета КАК ВидРасчета,
		|	ДоходыПоВидамРасчета.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
		|	НДФЛСведенияОДоходах.Период КАК Период
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(НДФЛСведенияОДоходах.СуммаДохода) КАК ДоходЗаМесяц,
		|		СУММА(НДФЛСведенияОДоходах.СуммаВычета) КАК ВычетЗаМесяц,
		|		НДФЛСведенияОДоходах.ФизЛицо КАК Физлицо,
		|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК Период
		|	ИЗ
		|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
		|			ПО (Месяцы.Период = НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ))
		|	ГДЕ
		|		НДФЛСведенияОДоходах.ФизЛицо В
		|				(ВЫБРАТЬ
		|					ФизЛица.Физлицо
		|				ИЗ
		|					ВТСписокФизЛиц КАК ФизЛица)
		|		И НДФЛСведенияОДоходах.Организация = &парамОрганизация
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НДФЛСведенияОДоходах.ФизЛицо,
		|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ)) КАК НДФЛСведенияОДоходах
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Начисления.Результат КАК Результат,
		|			Начисления.ФизЛицо КАК Физлицо,
		|			Начисления.ВидРасчета КАК ВидРасчета,
		|			ВЫБОР
		|				КОГДА Начисления.ВидРасчета.КодДоходаНДФЛ В (ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2012), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.КодДоходаПоУмолчанию))
		|					ТОГДА Начисления.ПериодДействия
		|				ИНАЧЕ Начисления.ПериодРегистрации
		|			КОНЕЦ КАК Период
		|		ИЗ
		|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
		|				ПО (Месяцы.Период = ВЫБОР
		|						КОГДА (НЕ Начисления.ВидРасчета.КодДоходаНДФЛ В (ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2012), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.КодДоходаПоУмолчанию)))
		|							ТОГДА Начисления.ПериодДействия
		|						ИНАЧЕ Начисления.ПериодРегистрации
		|					КОНЕЦ)
		|		ГДЕ
		|			Начисления.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
		|			И Начисления.ФизЛицо В
		|					(ВЫБРАТЬ
		|						ФизЛица.Физлицо
		|					ИЗ
		|						ВТСписокФизЛиц КАК ФизЛица)
		|			И Начисления.Организация = &парамОрганизация
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			Начисления.Результат,
		|			Начисления.ФизЛицо,
		|			Начисления.ВидРасчета,
		|			НАЧАЛОПЕРИОДА(Начисления.ПериодРегистрации, МЕСЯЦ)
		|		ИЗ
		|			РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
		|				ПО (Месяцы.Период = НАЧАЛОПЕРИОДА(Начисления.ПериодРегистрации, МЕСЯЦ))
		|		ГДЕ
		|			Начисления.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
		|			И Начисления.ФизЛицо В
		|					(ВЫБРАТЬ
		|						ФизЛица.Физлицо
		|					ИЗ
		|						ВТСписокФизЛиц КАК ФизЛица)
		|			И Начисления.Организация = &парамОрганизация) КАК ДоходыПоВидамРасчета
		|		ПО (ДоходыПоВидамРасчета.Период = НДФЛСведенияОДоходах.Период)
		|			И (ДоходыПоВидамРасчета.Физлицо = НДФЛСведенияОДоходах.Физлицо)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛСведенияОДоходах.ДоходЗаМесяц,
		|	НДФЛСведенияОДоходах.ВычетЗаМесяц,
		|	НДФЛСведенияОДоходах.Физлицо,
		|	НДФЛСведенияОДоходах.Период,
		|	ДоходыПоВидамРасчета.ВидРасчета,
		|	ДоходыПоВидамРасчета.ВидРасчета.Наименование";
		
	КонецЕсли;
	
	// ИсчисленныйНДФЛ
	//	Поля:
	//		Физлицо
	//		Период
	//		НалогУжеИсчисленный
	//		НалогИсчисленный
	//		ПримененныеВычетыЛичные
	//		ПолеПримененныеВычетыДетские
	//		ПолеПримененныеВычетыДетскиеИнвалидов
	//	    ПримененныеВычеты312
	//	    ПримененныеВычеты311
	//	
	//	Описание:
	//	Выбирает применяемые вычеты нарастающим итогом, доход нарастающим итогом и 
	//	исчисленный налог нарастающим итогом и производит расчет налога и примененных вычетов

	ИсчисленныйНДФЛТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОргВычетыЗаГод.Физлицо КАК Физлицо,
	|	РаботникиОргВычетыЗаГод.Период КАК Период,
	|	ЕСТЬNULL(ДоходыЗаГод.Резидент, ИСТИНА) КАК Резидент,
	|	" + ПолеНалогИсчисленный + "-" + ПолеРанееНалогИсчисленный + " КАК НалогИсчисленный,
	|	" + ПолеПримененныеВычетыЛичные + " КАК ПримененныеВычетыЛичные,
	|	" + ПолеПримененныеВычетыДетские + " КАК ПримененныеВычетыДетские,
	|	" + ПолеПримененныеВычетыДетскиеДвойные + " КАК ПримененныеВычетыДетскиеДвойные,
	|	" + ПолеПримененныеВычетыДетскиеИнвалидов + " КАК ПримененныеВычетыДетскиеИнвалидов,
	|	" + ПолеПримененныеВычетыДетскиеИнвалидовДвойные + " КАК ПримененныеВычетыДетскиеИнвалидовДвойные,
	|	" + ПолеПримененныеВычеты312 + " КАК ПримененныеВычеты312,
	|	" + ПолеПримененныеВычеты311 + " КАК ПримененныеВычеты311,
	|	" + ПолеРанееПримененныеВычетыЛичные + " КАК РанееПримененныеВычетыЛичные,
	|	" + ПолеРанееПримененныеВычетыДетские + " КАК РанееПримененныеВычетыДетские,
	|	" + ПолеРанееПримененныеВычетыДетскиеДвойные + " КАК РанееПримененныеВычетыДетскиеДвойные,
	|	" + ПолеРанееПримененныеВычетыДетскиеИнвалидов + " КАК РанееПримененныеВычетыДетскиеИнвалидов,
	|	" + ПолеРанееПримененныеВычетыДетскиеИнвалидовДвойные + " КАК РанееПримененныеВычетыДетскиеИнвалидовДвойные,
	|	" + ПолеРанееПримененныеВычеты312 + " КАК РанееПримененныеВычеты312,
	|	" + ПолеРанееПримененныеВычеты311 + " КАК РанееПримененныеВычеты311,
	|	" + ПолеРанееПримененныеВычетыЛичныеЗаМесяц + " КАК РанееПримененныеВычетыЛичныеЗаМесяц,
	|	" + ПолеРанееПримененныеВычетыДетскиеЗаМесяц + " КАК РанееПримененныеВычетыДетскиеЗаМесяц,
	|	" + ПолеРанееПримененныеВычетыДетскиеДвойныеЗаМесяц + " КАК РанееПримененныеВычетыДетскиеДвойныеЗаМесяц,
	|	" + ПолеРанееПримененныеВычетыДетскиеИнвалидовЗаМесяц + " КАК РанееПримененныеВычетыДетскиеИнвалидовЗаМесяц,
	|	" + ПолеРанееПримененныеВычетыДетскиеИнвалидовДвойныеЗаМесяц + " КАК РанееПримененныеВычетыДетскиеИнвалидовДвойныеЗаМесяц,
	|	" + ПолеПримененныеВычетыДетскиеДвойныеВторые + " КАК ПримененныеВычетыДетскиеДвойныеВторые,
	|	" + ПолеПримененныеВычетыДетскиеИнвалидовДвойныеВторые + " КАК ПримененныеВычетыДетскиеИнвалидовДвойныеВторые,
	|	" + ПолеРанееПримененныеВычетыДетскиеДвойныеВторые + " КАК РанееПримененныеВычетыДетскиеДвойныеВторые,
	|	" + ПолеРанееПримененныеВычетыДетскиеИнвалидовДвойныеВторые + " КАК РанееПримененныеВычетыДетскиеИнвалидовДвойныеВторые,
	|	" + ПолеРанееПримененныеВычетыДетскиеДвойныеВторыеЗаМесяц + " КАК РанееПримененныеВычетыДетскиеДвойныеВторыеЗаМесяц,
	|	" + ПолеРанееПримененныеВычетыДетскиеИнвалидовДвойныеВторыеЗаМесяц + " КАК РанееПримененныеВычетыДетскиеИнвалидовДвойныеВторыеЗаМесяц,
	|	" + ПолеРанееПримененныеВычеты312ЗаМесяц + " КАК РанееПримененныеВычеты312ЗаМесяц,
	|	" + ПолеРанееПримененныеВычеты311ЗаМесяц + " КАК РанееПримененныеВычеты311ЗаМесяц";
    Если ДанныеДляПрогноза Тогда
		ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + ",
    	|	РаботникиОргВычетыЗаГод.ОграничениеПоДоходамЛичные КАК ОграничениеПоДоходамЛичные,
    	|	РаботникиОргВычетыЗаГод.ОграничениеПоДоходамНаДетей КАК ОграничениеПоДоходамНаДетей,
    	|   Вычеты312.Вычет312Остаток КАК Вычет312Остаток,
    	|   Вычеты311.Вычет311Остаток КАК Вычет311Остаток";
    КонецЕсли;
	Если КомментироватьРасчет Или ДанныеДляПрогноза Тогда
		ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + ",
		|	" + ПолеОблагаемыйДоходЗаГод + " КАК ОблагаемыйДоходЗаГод,
		|	" + ПолеРанееНалогИсчисленный + " КАК РанееНалогИсчисленный";
    КонецЕсли;
	Если КомментироватьРасчет Тогда
		ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + ",
		|	ЕСТЬNULL(ДоходыПоВидамРасчета.ДоходЗаМесяц, 0) КАК ДоходЗаМесяц,
		|	ЕСТЬNULL(ДоходыПоВидамРасчета.ВычетЗаМесяц, 0) КАК ВычетЗаМесяц,
		|	ЕСТЬNULL(ДоходыПоВидамРасчета.ДоходЗаМесяцПоВидамРасчета, 0) КАК ДоходЗаМесяцПоВидамРасчета,
		|	ДоходыПоВидамРасчета.ВидРасчета КАК ВидРасчета,
		|	ДоходыПоВидамРасчета.ВидРасчета.Наименование КАК ВидРасчетаНаименование";
	КонецЕсли;
	ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
	|ИЗ
	|	ВТПрименяемыеВычетыЗаГод КАК РаботникиОргВычетыЗаГод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРасчетыСБюджетомЗаГод КАК НДФЛРасчетыСБюджетомЗаГод
	|		ПО НДФЛРасчетыСБюджетомЗаГод.Период = РаботникиОргВычетыЗаГод.Период И НДФЛРасчетыСБюджетомЗаГод.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставленныеСтандартныеВычетыЗаГод КАК ПредоставленныеСтандартныеВычетыЗаГод
	|		ПО ПредоставленныеСтандартныеВычетыЗаГод.Период = РаботникиОргВычетыЗаГод.Период И ПредоставленныеСтандартныеВычетыЗаГод.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыЗаГод КАК ДоходыЗаГод
	|		ПО ДоходыЗаГод.Период = РаботникиОргВычетыЗаГод.Период И ДоходыЗаГод.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты312 КАК Вычеты312
	|		ПО Вычеты312.Период = РаботникиОргВычетыЗаГод.Период И Вычеты312.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты311 КАК Вычеты311
	|		ПО Вычеты311.Период = РаботникиОргВычетыЗаГод.Период И Вычеты311.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо";
	Если КомментироватьРасчет Тогда
		ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыПоВидамРасчетаТекст + ") КАК ДоходыПоВидамРасчета
		|		ПО ДоходыПоВидамРасчета.Период = РаботникиОргВычетыЗаГод.Период 
		|		И ДоходыПоВидамРасчета.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо";
	КонецЕсли;
    Если Не ДанныеДляПрогноза Тогда
    	ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
	   	|
		|	ГДЕ
		|		(" + ПолеНалогИсчисленный + " <> " + ПолеРанееНалогИсчисленный + " ИЛИ 
		|		" + ПолеПримененныеВычеты312 + " <> " + ПолеРанееПримененныеВычеты312 + " ИЛИ 
		|		" + ПолеПримененныеВычеты311 + " <> " + ПолеРанееПримененныеВычеты311 + " ИЛИ 
		|		" + ПолеПримененныеВычетыЛичные + " <> " + ПолеРанееПримененныеВычетыЛичные + " ИЛИ 
		|		" + ПолеПримененныеВычетыДетские + " <> " + ПолеРанееПримененныеВычетыДетские + " ИЛИ
		|		" + ПолеПримененныеВычетыДетскиеДвойные + " <> " + ПолеРанееПримененныеВычетыДетскиеДвойные + " ИЛИ
		|		" + ПолеПримененныеВычетыДетскиеИнвалидов + " <> " + ПолеРанееПримененныеВычетыДетскиеИнвалидов +" ИЛИ
		|		" + ПолеПримененныеВычетыДетскиеИнвалидовДвойные + " <> " + ПолеРанееПримененныеВычетыДетскиеИнвалидовДвойные +" ИЛИ
		|		" + ПолеПримененныеВычетыДетскиеДвойныеВторые + " <> " + ПолеРанееПримененныеВычетыДетскиеДвойныеВторые + " ИЛИ
		|		" + ПолеПримененныеВычетыДетскиеИнвалидовДвойныеВторые + " <> " + ПолеРанееПримененныеВычетыДетскиеИнвалидовДвойныеВторые +")
		|	УПОРЯДОЧИТЬ ПО РаботникиОргВычетыЗаГод.Физлицо.Наименование, РаботникиОргВычетыЗаГод.Физлицо, РаботникиОргВычетыЗаГод.Период";
    Иначе
    	ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
    	|
    	|	ГДЕ
    	|		РаботникиОргВычетыЗаГод.Период >= &парамПериодРегистрации
    	|	УПОРЯДОЧИТЬ ПО РаботникиОргВычетыЗаГод.Физлицо, РаботникиОргВычетыЗаГод.Период";
    КонецЕсли;
	Если КомментироватьРасчет Тогда
		ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
		|	ИТОГИ 
		|		МАКСИМУМ(Физлицо),
		|		МАКСИМУМ(Период),
		|		МАКСИМУМ(Резидент),
		|		МАКСИМУМ(НалогИсчисленный),
		|		МАКСИМУМ(ПримененныеВычетыЛичные),
		|		МАКСИМУМ(ПримененныеВычетыДетские),
		|		МАКСИМУМ(ПримененныеВычетыДетскиеДвойные),
		|		МАКСИМУМ(ПримененныеВычетыДетскиеИнвалидов),
		|		МАКСИМУМ(ПримененныеВычетыДетскиеИнвалидовДвойные),
		|		МАКСИМУМ(ПримененныеВычеты312),
		|		МАКСИМУМ(ПримененныеВычеты311),
		|		МАКСИМУМ(РанееПримененныеВычетыЛичные),
		|		МАКСИМУМ(РанееПримененныеВычетыДетские),
		|		МАКСИМУМ(РанееПримененныеВычетыДетскиеДвойные),
		|		МАКСИМУМ(РанееПримененныеВычетыДетскиеИнвалидов),
		|		МАКСИМУМ(РанееПримененныеВычетыДетскиеИнвалидовДвойные),
		|		МАКСИМУМ(РанееПримененныеВычеты312),
		|		МАКСИМУМ(РанееПримененныеВычеты311),
		|		МАКСИМУМ(РанееПримененныеВычетыЛичныеЗаМесяц),
		|		МАКСИМУМ(РанееПримененныеВычетыДетскиеЗаМесяц),
		|		МАКСИМУМ(РанееПримененныеВычетыДетскиеДвойныеЗаМесяц),
		|		МАКСИМУМ(РанееПримененныеВычетыДетскиеИнвалидовЗаМесяц),
		|		МАКСИМУМ(РанееПримененныеВычетыДетскиеИнвалидовДвойныеЗаМесяц),
		|		МАКСИМУМ(ПримененныеВычетыДетскиеДвойныеВторые),
		|		МАКСИМУМ(ПримененныеВычетыДетскиеИнвалидовДвойныеВторые),
		|		МАКСИМУМ(РанееПримененныеВычетыДетскиеДвойныеВторые),
		|		МАКСИМУМ(РанееПримененныеВычетыДетскиеИнвалидовДвойныеВторые),
		|		МАКСИМУМ(РанееПримененныеВычетыДетскиеДвойныеВторыеЗаМесяц),
		|		МАКСИМУМ(РанееПримененныеВычетыДетскиеИнвалидовДвойныеВторыеЗаМесяц),
		|		МАКСИМУМ(РанееПримененныеВычеты312ЗаМесяц),
		|		МАКСИМУМ(РанееПримененныеВычеты311ЗаМесяц),
		|		МАКСИМУМ(ОблагаемыйДоходЗаГод),
		|		МАКСИМУМ(РанееНалогИсчисленный),
		|		МАКСИМУМ(ДоходЗаМесяц),
		|		МАКСИМУМ(ВычетЗаМесяц),
		|		СУММА(ДоходЗаМесяцПоВидамРасчета)
		|	ПО
		|		Период";
	КонецЕсли;

	Если ВыборкаПодразделений <> НеОпределено Тогда
		
		// Временная таблица ПодразделенияРаботников
		//	Поля:
		//		Физлицо
		//		Период
		//		ПодразделениеОрганизации
		//		УжеУволен
		//		ДатаДвижения
		//
		//	Описание:
		//	список подразделений в которых работают физлица по трудовым договорам по состоянию на конец месяца налогового периода
		
		// Временная таблица ПодразделенияДоговорников
		//	Поля:
		//		Физлицо
		//		Период
		//		ПодразделениеОрганизации
		//		ДатаНачала
		//
		//	Описание:
		//	список подразделений в которых работают физлица по договорам ГПХ по состоянию на конец месяца налогового периода
		
		// Основной запрос
		//	Поля:
		//		Физлицо
		//		Период
		//		ПодразделениеОрганизации
		//
		//	Описание:
		//  как правило, используется подразделение по данным кадрового учета работающих по трудовым договорам
		//	подразделение по договору ГПХ берется в следующих случаях:
		//  - сотрудник никогда не имел трудовых отношений с нашей организацией
		//  - на конец месяца сотрудник уже уволен со всех мест работы в нашей организации,
		//    но после даты увольнения с ним заключен договор ГПХ
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Периоды.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПоследниеСотрудники
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.ФизЛицо КАК Физлицо,
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаРегистра,
		|		РаботникиОрганизаций.Организация КАК Организация
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО (КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.Период)
		|				И Периоды.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|	ГДЕ
		|		РаботникиОрганизаций.Организация = &парамОрганизация
		|		И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|		И ВЫБОР
		|				КОГДА КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.ПериодЗавершения
		|						И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
		|				ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
		|			КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.ФизЛицо,
		|		Периоды.Период,
		|		РаботникиОрганизаций.Организация) КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО Периоды.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|			И Периоды.ДатаРегистра = РаботникиОрганизаций.Период
		|			И Периоды.Организация = РаботникиОрганизаций.Организация
		|			И (ВЫБОР
		|				КОГДА КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.ПериодЗавершения
		|						И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
		|				ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
		|			КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|			И (РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Периоды.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.ПериодЗавершения
		|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.ПериодЗавершения
		|						И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
		|				ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
		|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УжеУволен,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.ПериодЗавершения
		|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизаций.ПериодЗавершения
		|		ИНАЧЕ РаботникиОрганизаций.Период
		|	КОНЕЦ КАК ДатаДвижения
		|ПОМЕСТИТЬ ВТПодразделенияРаботников
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Физлицо КАК Физлицо,
		|		Периоды.Период КАК Период,
		|		Периоды.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаРегистра,
		|		РаботникиОрганизаций.Организация КАК Организация
		|	ИЗ
		|		ВТПоследниеСотрудники КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО (КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.Период)
		|				И Периоды.Сотрудник = РаботникиОрганизаций.Сотрудник
		|	ГДЕ
		|		РаботникиОрганизаций.Организация = &парамОрганизация
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Физлицо,
		|		Периоды.Период,
		|		Периоды.Сотрудник,
		|		РаботникиОрганизаций.Организация) КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО Периоды.Сотрудник = РаботникиОрганизаций.Сотрудник
		|			И Периоды.ДатаРегистра = РаботникиОрганизаций.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыПоследнихДоговоров.Физлицо КАК Физлицо,
		|	ДатыПоследнихДоговоров.Период КАК Период,
		|	ДатыПоследнихДоговоров.ДатаНачала,
		|	МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации) КАК ПодразделениеОрганизации
		|ПОМЕСТИТЬ ВТПодразделенияДоговорников
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		Периоды.ФизЛицо КАК Физлицо,
		|		ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК Организация,
		|		МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала) КАК ДатаНачала
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		|			ПО (ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|				И (ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|				И Периоды.ФизЛицо = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
		|	ГДЕ
		|		ДоговорНаВыполнениеРаботСФизЛицом.Организация = &парамОбособленноеПодразделение
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период,
		|		Периоды.ФизЛицо,
		|		ДоговорНаВыполнениеРаботСФизЛицом.Организация) КАК ДатыПоследнихДоговоров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		|		ПО ДатыПоследнихДоговоров.Организация = ДоговорНаВыполнениеРаботСФизЛицом.Организация
		|			И ДатыПоследнихДоговоров.ДатаНачала = ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
		|			И ДатыПоследнихДоговоров.Физлицо = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПоследнихДоговоров.Физлицо,
		|	ДатыПоследнихДоговоров.Организация,
		|	ДатыПоследнихДоговоров.Период,
		|	ДатыПоследнихДоговоров.ДатаНачала
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.ФизЛицо,
		|	Периоды.Период,
		|	ВЫБОР
		|		КОГДА ПодразделенияРаботников.УжеУволен
		|				И ПодразделенияРаботников.ДатаДвижения < ПодразделенияДоговорников.ДатаНачала
		|				И ПодразделенияДоговорников.ПодразделениеОрганизации ЕСТЬ НЕ NULL 
		|			ТОГДА ПодразделенияДоговорников.ПодразделениеОрганизации
		|		ИНАЧЕ ЕСТЬNULL(ПодразделенияРаботников.ПодразделениеОрганизации, ПодразделенияДоговорников.ПодразделениеОрганизации)
		|	КОНЕЦ КАК ПодразделениеОрганизации
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделенияРаботников КАК ПодразделенияРаботников
		|		ПО Периоды.Период = ПодразделенияРаботников.Период
		|			И Периоды.ФизЛицо = ПодразделенияРаботников.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделенияДоговорников КАК ПодразделенияДоговорников
		|		ПО Периоды.Период = ПодразделенияДоговорников.Период
		|			И Периоды.ФизЛицо = ПодразделенияДоговорников.Физлицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодразделенияРаботников.Физлицо,
		|	ПодразделенияРаботников.Период";

		ВыборкаПодразделений = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;

	Запрос.Текст = ИсчисленныйНДФЛТекст;

	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

КонецФункции  // ПолучитьДанныеНДФЛПоРегистратору

////////////////////////////////////////////////////////////////////////////////

// Создает строку в движениях  РасчетСреднегоЗаработка, заполняет по данным выборки 
// из запроса и возвращает ее
// Используется в СформироватьИЗаписатьДанныеРасчетаСреднего
// Параметры:
// 	Выборка - спозиционированная выборка результата запроса
//  НаборЗаписей - набор записей РасчетСреднегоЗаработка
//  Регистратор - документ
//  ВидРасчета - вид расчета среднего заработка
//
// Возвращаемое значение:
// Запись регистра расчета РасчетСреднегоЗаработка
//
Функция СоздатьСтрокуРасчетаСреднего(Выборка, НаборЗаписей, Регистратор, ВидРасчета) Экспорт
	
	Строка = НаборЗаписей.Добавить();
	
	// предопределенные поля
	Строка.ПериодРегистрации				= Выборка.ПериодРегистрации;
	Строка.ВидРасчета						= ВидРасчета;

	// измерения
	Строка.Сотрудник						= Выборка.Сотрудник;
	Строка.Физлицо							= Выборка.Физлицо;
	Строка.Организация						= Выборка.Организация;

	// реквизиты
	Строка.СпособРасчета					= Выборка.СпособРасчета;
	Строка.ВидУчетаВремени					= Выборка.ВидУчетаВремени;
	Строка.ДатаНачалаСобытия				= Выборка.ДатаНачалаСобытия;
	Строка.ДатаНачалаРасчетногоПериода		= Выборка.НачалоБП;
	Строка.ДатаОкончанияРасчетногоПериода	= Выборка.КонецБП;
	Строка.ПериодРасчетаСреднегоЗаработка	= Выборка.ПериодРасчетаСреднегоЗаработка;
	Строка.КоэффициентИндексации			= 1;
	
	Возврат Строка;
	
КонецФункции // СоздатьСтрокуРасчетаСреднего()

Процедура СкорректироватьНормируемыеВычетыПоНДФЛ(ДокументОбъект) Экспорт

	Если ДокументОбъект.ДополнительныеНачисления.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДоходыП28Ст217 = Новый Массив;
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2761);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2720);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2730);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2740);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2760);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2770);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2790);
	Запрос.УстановитьПараметр("ДоходыП28Ст217", ДоходыП28Ст217);
	Запрос.УстановитьПараметр("ДополнительныеНачисления", ДокументОбъект.ДополнительныеНачисления.Выгрузить());
	
	// прочитаем т.ч. документа и добавим в каждую строку Физлицо сотрудника и КодДоходаНДФЛ начисления
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Работники.НомерСтроки,
	|	Работники.Сотрудник КАК Сотрудник,
	|	Работники.ВидРасчета КАК ВидРасчета,
	|	Работники.КодВычета,
	|	Работники.СуммаВычета
	|ПОМЕСТИТЬ ВТРаботники
	|ИЗ
	|	&ДополнительныеНачисления КАК Работники
	|ГДЕ
	|	Работники.Авторасчет
	|	И (НЕ Работники.Сторно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Работники.Сотрудник.Физлицо КАК Физлицо,
	|	Работники.КодВычета КАК КодВычета,
	|	МИНИМУМ(Работники.СуммаВычета) КАК СуммаВычета
	|ИЗ
	|	ВТРаботники КАК Работники
	|ГДЕ
	|	Работники.ВидРасчета.КодДоходаНДФЛ В(&ДоходыП28Ст217)
	|
	|СГРУППИРОВАТЬ ПО
	|	Работники.Сотрудник.Физлицо,
	|	Работники.КодВычета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	КодВычета";
	ТаблицаВычетов = Запрос.Выполнить().Выгрузить();
	ТаблицаВычетов.Индексы.Добавить("Физлицо,КодВычета");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияРаботников.Сотрудник.Физлицо КАК Физлицо,
	|	НачисленияРаботников.КодВычета КАК КодВычета,
	|	НачисленияРаботников.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТРаботники КАК НачисленияРаботников
	|ГДЕ
	|	НачисленияРаботников.ВидРасчета.КодДоходаНДФЛ В(&ДоходыП28Ст217)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	КодВычета,
	|	НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураПоиска = Новый Структура("Физлицо,КодВычета");
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = ДокументОбъект.ДополнительныеНачисления.Найти(Выборка.НомерСтроки,"НомерСтроки");
		Если СтрокаТЧ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,Выборка);
			СтрокаВычета = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска)[0];
			Если СтрокаВычета.СуммаВычета = 0 Тогда
				СтрокаТЧ.СуммаВычета = 0
			ИначеЕсли СтрокаТЧ.Результат >= 0 Тогда
				СтрокаТЧ.СуммаВычета = Мин(СтрокаТЧ.Результат, СтрокаВычета.СуммаВычета);
				СтрокаВычета.СуммаВычета = Макс(0, СтрокаВычета.СуммаВычета - СтрокаТЧ.СуммаВычета);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // СкорректироватьНормируемыеВычетыПоНДФЛ()

// Проверяет необходимость выполнения перерасчета документа
// если в таблицах перерасчета по документу ссылка на который передана 
// есть хоть одна запись - возращает Истина
// Параметры:
//  Регистратор - ссылка на документ
// Возвращаемое значение:
//  булево
//
Функция НеобходимостьПерерасчета(Регистратор) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.ФизЛицо
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет");
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции  // НеобходимостьПерерасчета

// Возвращает вид учета времени в зависимости от вида расчета и вида графика 
Функция ПолучитьВидУчетаВремени(СпособРасчета, ВидВремени, СуммированныйУчетРабочегоВремени = Ложь, НачислениеВидУчетаВремени = Неопределено, Показатели = Неопределено) Экспорт
	
	// вид учета времени определяется по способу расчета
	
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
		или ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное 
		или ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы Тогда
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку  
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка  
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом  
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда 
		
		Если СуммированныйУчетРабочегоВремени Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		КонецЕсли;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда	
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула
		И НачислениеВидУчетаВремени <> Неопределено Тогда
		Если НачислениеВидУчетаВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
		ИначеЕсли НачислениеВидУчетаВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
		Иначе
			
			ИмеютсяЧасовыеПоказатели = Ложь;
			ИмеютсяДневныеПоказатели = Ложь;
			Если Показатели <> Неопределено Тогда
				Для Каждого СтрокаПоказатель Из Показатели Цикл
					Если СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ВремяВДнях
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ВремяВКалендарныхДнях
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.КалендарныхДнейВмесяце
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
						Тогда ИмеютсяДневныеПоказатели = Истина;
					ИначеЕсли СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ВремяВЧасах
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая
						Тогда ИмеютсяЧасовыеПоказатели = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ИмеютсяЧасовыеПоказатели И Не ИмеютсяДневныеПоказатели Тогда
				ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
			Иначе
				ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;	
			КонецЕсли;

		КонецЕсли;
	Иначе
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
	КонецЕсли;
		
	Возврат ВидУчетаВремени;
КонецФункции

// Помещает в запрос временную таблицу "ВТПоказатели" с описанием
// показателей расчета, используемых в произвольных формулах
// Поля временной таблицы:
//    ВидРасчета,
//    КоличествоПоказателей,
//    РасчетИмеетБазовыеНачисления,
//    Показатель(1...N)ЯвляетсяРасчетнойБазой,
//    Показатель(1...N)Наименование,
//    Показатель(1...N)
//
// Параметры
//	ИмяРегистра - строка, имя регистра расчета
//	ИмяПВР - строка, имя соответствующего регистру расчета ПВР
//	ВнешнееУсловие - строка, задает условие для отбора записей расчета
//
// Возвращаемое значение:
//   число - количество показателей, используемых при расчете всех записей
//
Функция ПолучитьДанныеОПроизвольныхФормулахВЗапросе(Запрос, ИмяРегистра, ВнешнееУсловие, ИмяПВР) Экспорт 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основной.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТВидыРасчета
	|ИЗ
	|	РегистрРасчета." + ИмяРегистра + " КАК Основной
	|ГДЕ
	|	" + ВнешнееУсловие + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	Запрос.Выполнить();	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Показатели.Ссылка КАК Ссылка,
	|	Показатели.НомерСтроки,
	|	Показатели.Показатель
	|ПОМЕСТИТЬ ВТВСЕПоказатели
	|ИЗ
	|	ПланВидовРасчета." + ИмяПВР +".Показатели КАК Показатели
	|ГДЕ
	|	Показатели.Ссылка В
	|			(ВЫБРАТЬ
	|				Основной.ВидРасчета
	|			ИЗ
	|				ВТВидыРасчета КАК Основной)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	Запрос.Выполнить();
	
	// Получим максимальное число показателей			
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КолВоПоказателей
	|ИЗ
	|	ВТВСЕПоказатели КАК Показатели";
	
	ВыборкаКоличестваПоказателей = Запрос.Выполнить().Выбрать();
	ВыборкаКоличестваПоказателей.Следующий();
	КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;		
	Если КоличествоПоказателей = Null Тогда
		КоличествоПоказателей = 0;
	КонецЕсли;
	
	// получим временную таблицу с расчетом показателей
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основной.ВидРасчета КАК ВидРасчета,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВСЕПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК РасчетИмеетБазовыеНачисления,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВСЕПоказатели.Показатель В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВЧасах),ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВДнях),ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях),ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВЧасах))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК РасчетИмеетОтработанноеВремя,
	|	МАКСИМУМ(ВСЕПоказатели.НомерСтроки) КАК КоличествоПоказателей";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА Показатели" + СчПоказателей + ".Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой,
		|	Показатели" + СчПоказателей + ".Показатель.Наименование КАК Показатель" + СчПоказателей + "Наименование,
		|	Показатели" + СчПоказателей + ".Показатель КАК Показатель" + СчПоказателей;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ВТВидыРасчета КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВСЕПоказатели КАК ВСЕПоказатели
	|		ПО Основной.ВидРасчета = ВСЕПоказатели.Ссылка";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВСЕПоказатели КАК Показатели"+ СчПоказателей + "
	|		ПО Основной.ВидРасчета = Показатели"+ СчПоказателей + ".Ссылка 
	|			И Показатели"+ СчПоказателей + ".НомерСтроки = "+ СчПоказателей;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.ВидРасчета";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА Показатели" + СчПоказателей + ".Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	Показатели"+ СчПоказателей + ".Показатель";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	
	Запрос.Выполнить();	
	
	Возврат КоличествоПоказателей
	
КонецФункции // ()

Процедура ДобавитьПоказатели(НеобходимыеДанные, КоличествоПоказателей, ТекстЗапроса, КомментироватьРасчет, ПоляЗапроса, Показатель1Текст, Показатель1ТекстПредопределенный) Экспорт
	
	Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
		
		Если КоличествоПоказателей = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			| ВЫБОР
			|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СевернаяНадбавка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК РасчетИмеетБазовыеНачисления,
			| Ложь КАК РасчетИмеетОтработанноеВремя,
			| 0 КАК КоличествоПоказателей,";
		Иначе
			ТекстЗапроса = ТекстЗапроса + ",
			| ВЫБОР
			|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СевернаяНадбавка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
			|			ТОГДА ИСТИНА
			|		КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула)
			|			ТОГДА Показатели.РасчетИмеетБазовыеНачисления
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК РасчетИмеетБазовыеНачисления,
			| Показатели.РасчетИмеетОтработанноеВремя КАК РасчетИмеетОтработанноеВремя,
			| Показатели.КоличествоПоказателей КАК КоличествоПоказателей,";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		| Основной.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета";
		
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("КоличествоПоказателей");
			ПоляЗапроса.Добавить("РасчетИмеетБазовыеНачисления");
			ПоляЗапроса.Добавить("РасчетИмеетОтработанноеВремя");
			ПоляЗапроса.Добавить("ФормулаРасчета");
		КонецЕсли;
		
		Для СчПоказателей = 1 По КоличествоПоказателей Цикл
			Если СчПоказателей > 6 Тогда					
				ПоказательТекст = СтрЗаменить(Показатель1ТекстПредопределенный, "Показатель1", "Показатель"+СчПоказателей);
			ИначеЕсли СчПоказателей > 1 Тогда
				ПоказательТекст = СтрЗаменить(Показатель1Текст, "Показатель1", "Показатель"+СчПоказателей);
			Иначе
				ПоказательТекст = Показатель1Текст;
			КонецЕсли;					
			
			ТекстЗапроса = ТекстЗапроса + ", 
			|Показатели.Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой Как Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой,
			|Показатели.Показатель" + СчПоказателей+".Наименование Как Показатель" + СчПоказателей + "Наименование,
			|" + ПоказательТекст + " Как Показатель"+СчПоказателей;
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой");
				ПоляЗапроса.Добавить("Показатель" + СчПоказателей + "Наименование");
				ПоляЗапроса.Добавить("Показатель" + СчПоказателей);
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДАТЫ ИЗМЕНЕНИЯ ЗАКОНОДАТЕЛЬСТВА

// Возвращает дату вступления в силу Федерального Закона от 24.07.2009 № 212-ФЗ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаЗаменыЕСНСтраховымиВзносами() Экспорт 

	Возврат '20100101'

КонецФункции // ДатаЗаменыЕСНСтраховымиВзносами()

Функция ДатаПереходаНаКодыОКТМО() Экспорт

	Возврат '20140101'

КонецФункции

// Возвращает дату вступления в силу Федерального Закона от 24.07.2009 № 212-ФЗ в очередной редакции
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаРасширенияПеречняЛьготныхТарифовСтраховыхВзносов() Экспорт 

	Возврат '20110101'

КонецФункции // ДатаЗаменыЕСНСтраховымиВзносами()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА ДОКУМЕНТОВ

// Заполняем переданный набор записей регистра расчета ОсновныеНачисленияОрганизации переданными данными
Функция ДобавитьСтрокуОсновныхНачислений(НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента) Экспорт
	
	Движение = НаборЗаписей.Добавить();
	
	СтрокаСвойствИзДокумента = "ПериодРегистрации,ФизЛицо,Организация,ОбособленноеПодразделение";
	СтрокаСвойствИзСтрокиДокумента = ПроведениеРасчетовПереопределяемый.СтрокаСвойствИзСтрокиДокументаДляОсновныхНачислений();
	
	
	// ресурсы по норме времени
	Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
		СтрокаСвойствИзСтрокиДокумента = СтрокаСвойствИзСтрокиДокумента + ",НормаДней,НормаЧасов,НормаДнейПоПятидневке,НормаЧасовПоПятидневке";
	КонецЕсли;
	
	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		СтрокаСвойствИзСтрокиДокумента = СтрокаСвойствИзСтрокиДокумента + ",ОтработаноДней,ОтработаноЧасов,ОтработаноДнейПоПятидневке,ОтработаноЧасовПоПятидневке";
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
	Возврат Движение
	
КонецФункции // ДобавитьСтрокуОсновныхНачислений

// Заполняем переданный набор записей регистра расчета ДополнительныеНачисленияОрганизации переданными данными
Функция ДобавитьСтрокуДополнительныхНачислений(НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента) Экспорт
	
	Движение = НаборЗаписей.Добавить();
	
	СтрокаСвойствИзДокумента = "ДатаНачалаСобытия,ФизЛицо,Организация,ОбособленноеПодразделение";
	СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Сторно,Результат,ОплаченоДнейЧасов,СторнируемыйДокумент,ЧислоМесяцев," 
									+ "Сотрудник,ПодразделениеОрганизации,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ГрафикРаботы,ВидУчетаВремени,"
									+ "Авторасчет,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание";
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
	Движение.ПериодРегистрации   = ВыборкаПоШапкеДокумента.ПериодРегистрацииДополнительныхНачислений;
	
	Возврат Движение
	
КонецФункции // ДобавитьСтрокуДополнительныхНачислений()

// Заполняем переданный набор записей регистра расчета УдержанияРаботниковОрганизаций переданными данными
Функция ДобавитьСтрокуУдержаний(НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента) Экспорт
	
	Движение = НаборЗаписей.Добавить();
	
	СтрокаСвойствИзДокумента = "ФизЛицо,Организация,ОбособленноеПодразделение,ПериодРегистрации";
	СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Сторно,Результат," 
									+ "Сотрудник,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ГрафикРаботы,ВидУчетаВремени,"
									+ "Авторасчет,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание";
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
	Возврат Движение
	
КонецФункции // ДобавитьСтрокуДополнительныхНачислений()

// Процедура формирует сторно-записи по перерассчитываемому документу
Процедура СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент = Неопределено, ВыборкаПоШапкеДокумента = Неопределено, НаборОсновныеНачисления = Неопределено, НаборДополнительныеНачисления = Неопределено, НаборУдержания = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда // по переданному документу заведомо нет движений
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("ПериодРегистрации", ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ДокументИсправление", ВыборкаПоШапкеДокумента.Ссылка);
	
	Если НаборОсновныеНачисления <> Неопределено Тогда // выполним запрос по основным начислениям
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
		|	ОсновныеНачисления.Показатель1,
		|	ОсновныеНачисления.Показатель2,
		|	ОсновныеНачисления.Показатель3,
		|	ОсновныеНачисления.Показатель4,
		|	ОсновныеНачисления.Показатель5,
		|	ОсновныеНачисления.Показатель6,
		|	-ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0) КАК Результат,
		|	-ОсновныеНачисления.ДополнительныйРезультат - ЕСТЬNULL(СУММА(СторноНачисления.ДополнительныйРезультат), 0) КАК ДополнительныйРезультат,
		|	-ОсновныеНачисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0) КАК ОплаченоДнейЧасов,
		|	-ОсновныеНачисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0) КАК ОтработаноДней,
		|	-ОсновныеНачисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0) КАК ОтработаноЧасов,
		|	-ОсновныеНачисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0) КАК ОтработаноДнейПоПятидневке,
		|	-ОсновныеНачисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0) КАК ОтработаноЧасовПоПятидневке,
		|	-ОсновныеНачисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0) КАК НормаДней,
		|	-ОсновныеНачисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0) КАК НормаЧасов,
		|	-ОсновныеНачисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0) КАК НормаДнейПоПятидневке,
		|	-ОсновныеНачисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0) КАК НормаЧасовПоПятидневке,
		|	ОсновныеНачисления.ПодразделениеОрганизации,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ОсновныеНачисления.ДополнительныеДанные,
		|	ОсновныеНачисления.ДатаНачалаСобытия,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.ГрафикРаботы,
		|	ОсновныеНачисления.ГрафикРаботыНорма,
		|	ОсновныеНачисления.ВидУчетаВремени,
		|	ОсновныеНачисления.Регистратор КАК СторнируемыйДокумент,
		|	ОсновныеНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	НЕОПРЕДЕЛЕНО КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
		|		ПО ОсновныеНачисления.Сотрудник = СторноНачисления.Сотрудник
		|			И ОсновныеНачисления.ВидРасчета = СторноНачисления.ВидРасчета
		|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
		|			И (СторноНачисления.ПериодДействияКонец МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
		|			И (СторноНачисления.ПериодРегистрации > ОсновныеНачисления.ПериодРегистрации)
		|			И (СторноНачисления.ПериодРегистрации <= &ПериодРегистрации)
		|			И (СторноНачисления.СторнируемыйДокумент = ОсновныеНачисления.Регистратор)
		|			И (СторноНачисления.Регистратор <> &ДокументИсправление)
		|ГДЕ
		|	(НЕ ОсновныеНачисления.Сторно)
		|	И ОсновныеНачисления.Регистратор = &ПерерассчитываемыйДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ОсновныеНачисления.Показатель1,
		|	ОсновныеНачисления.Показатель2,
		|	ОсновныеНачисления.Показатель3,
		|	ОсновныеНачисления.Показатель4,
		|	ОсновныеНачисления.Показатель5,
		|	ОсновныеНачисления.Показатель6,
		|	ОсновныеНачисления.ПодразделениеОрганизации,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ОсновныеНачисления.ДополнительныеДанные,
		|	ОсновныеНачисления.ДатаНачалаСобытия,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.ГрафикРаботы,
		|	ОсновныеНачисления.ГрафикРаботыНорма,
		|	ОсновныеНачисления.ВидУчетаВремени,
		|	ОсновныеНачисления.Регистратор,
		|	ОсновныеНачисления.Результат,
		|	ОсновныеНачисления.ДополнительныйРезультат,
		|	ОсновныеНачисления.НормаДней,
		|	ОсновныеНачисления.НормаЧасов,
		|	ОсновныеНачисления.НормаДнейПоПятидневке,
		|	ОсновныеНачисления.ОтработаноДней,
		|	ОсновныеНачисления.ОтработаноЧасов,
		|	ОсновныеНачисления.ОтработаноДнейПоПятидневке,
		|	ОсновныеНачисления.ОплаченоДнейЧасов,
		|	ОсновныеНачисления.ОтработаноЧасовПоПятидневке,
		|	ОсновныеНачисления.НормаЧасовПоПятидневке,
		|	ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени,
		|	ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени,
		|	ОсновныеНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьСтрокуОсновныхНачислений(НаборОсновныеНачисления, ВыборкаПоШапкеДокумента, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НаборДополнительныеНачисления <> Неопределено Тогда // выполним запрос по дополнительным начислениям
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеНачисления.Сотрудник,
		|	ДополнительныеНачисления.ВидРасчета,
		|	ДополнительныеНачисления.Показатель1,
		|	ДополнительныеНачисления.Показатель2,
		|	ДополнительныеНачисления.Показатель3,
		|	ДополнительныеНачисления.Показатель4,
		|	ДополнительныеНачисления.Показатель5,
		|	ДополнительныеНачисления.Показатель6,
		|	-ДополнительныеНачисления.Результат КАК Результат,
		|	-ДополнительныеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|	ДополнительныеНачисления.ПодразделениеОрганизации,
		|	ДополнительныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ДополнительныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ДополнительныеНачисления.ДатаНачалаСобытия,
		|	ДополнительныеНачисления.ГрафикРаботы,
		|	ДополнительныеНачисления.ВидУчетаВремени,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	ДополнительныеНачисления.Регистратор КАК СторнируемыйДокумент,
		|	ДополнительныеНачисления.ЧислоМесяцев,
		|	ДополнительныеНачисления.БазовыйПериодНачало,
		|	ДополнительныеНачисления.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|ГДЕ
		|	(НЕ ДополнительныеНачисления.Сторно)
		|	И ДополнительныеНачисления.Регистратор = &ПерерассчитываемыйДокумент";
		
		// выполним запрос по дополнительным начислениям
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьСтрокуДополнительныхНачислений(НаборДополнительныеНачисления, ВыборкаПоШапкеДокумента, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НаборУдержания <> Неопределено Тогда // выполним запрос по удержаниям
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдержанияРаботниковОрганизаций.Сотрудник,
		|	УдержанияРаботниковОрганизаций.ВидРасчета,
		|	УдержанияРаботниковОрганизаций.Показатель1,
		|	УдержанияРаботниковОрганизаций.Показатель2,
		|	УдержанияРаботниковОрганизаций.Показатель3,
		|	УдержанияРаботниковОрганизаций.Показатель4,
		|	УдержанияРаботниковОрганизаций.Показатель5,
		|	УдержанияРаботниковОрганизаций.Показатель6,
		|	-УдержанияРаботниковОрганизаций.Результат КАК Результат,
		|	УдержанияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаНачало,
		|	УдержанияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	УдержанияРаботниковОрганизаций.ДатаНачалаСобытия,
		|	УдержанияРаботниковОрганизаций.ГрафикРаботы,
		|	УдержанияРаботниковОрганизаций.ВидУчетаВремени,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	УдержанияРаботниковОрганизаций.Регистратор КАК СторнируемыйДокумент,
		|	УдержанияРаботниковОрганизаций.БазовыйПериодНачало,
		|	УдержанияРаботниковОрганизаций.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизаций
		|ГДЕ
		|	(НЕ УдержанияРаботниковОрганизаций.Сторно)
		|	И УдержанияРаботниковОрганизаций.Регистратор = &ПерерассчитываемыйДокумент";
		
		// выполним запрос по дополнительным начислениям
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьСтрокуУдержаний(НаборУдержания, ВыборкаПоШапкеДокумента, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьСторноЗаписиПоПерерассчитываемомуДокументу()

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//  	РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
// 		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Функция РассчитатьДокументСреднегоЗаработка(Документ, РассчитываемыеТаблицы, ВыборкаПоШапкеДокумента, РежимПерерасчета = Ложь, РезультатЗапросаПоРасчетСреднего = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Ссылка = Документ.Ссылка;
	
	// Создадим наборы записей используемых регистров 
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
		
	НаборДополнительныеНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДополнительныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
	
	Если НЕ РассчитываемыеТаблицы.РасчетСреднего Тогда

		// получим реквизиты табличной части РасчетСреднего 
		
		Если РезультатЗапросаПоРасчетСреднего = Неопределено Тогда

			Запрос = Новый Запрос;
			
			// Установим параметры запроса
			Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СтрокаРасчетСреднего.НомерСтроки,
			|	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
			|	СтрокаРасчетСреднего.Ссылка.Сотрудник.Физлицо КАК Физлицо,
			|	ВЫБОР
			|		КОГДА СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА СтрокаРасчетСреднего.Ссылка.Организация
			|		ИНАЧЕ СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация
			|	КОНЕЦ КАК Организация,
			|	СтрокаРасчетСреднего.ВидРасчета,
			|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
			|	ВЫБОР КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ) ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КОНЕЦ КАК БазовыйПериодКонец,
			|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
			|	СтрокаРасчетСреднего.НормаПоПятидневке,
			|	СтрокаРасчетСреднего.ОтработаноДней,
			|	СтрокаРасчетСреднего.ОтработаноЧасов,
			|	СтрокаРасчетСреднего.ЧислоМесяцев,
			|	СтрокаРасчетСреднего.КоэффициентИндексации,
			|	СтрокаРасчетСреднего.Результат
			|ИЗ
			|	Документ." + Документ.Метаданные().Имя + ".РасчетСреднего КАК СтрокаРасчетСреднего
			|
			|ГДЕ
			|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка";
			
			РезультатЗапросаПоРасчетСреднего = Запрос.Выполнить();
		
		КонецЕсли;
		
		ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоРасчетСреднего.НомерСтроки) +
			""" табл. части ""Расчет среднего"": ";
			
			// Вид расчета
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.ВидРасчета) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ);
			КонецЕсли;
			
			// Дата начала базового периода
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодНачало) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ);
				// Дата окончания базового периода
			ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодКонец) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ);
			ИначеЕсли ВыборкаПоРасчетСреднего.БазовыйПериодКонец < ВыборкаПоРасчетСреднего.БазовыйПериодНачало Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ);
			КонецЕсли; 
			
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				Движение = НаборРасчетСреднего.Добавить();
				
				// Свойства
				Движение.ПериодРегистрации				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
				Движение.БазовыйПериодНачало			= ВыборкаПоРасчетСреднего.БазовыйПериодНачало;
				Движение.БазовыйПериодКонец				= ВыборкаПоРасчетСреднего.БазовыйПериодКонец;
				Движение.ВидРасчета						= ВыборкаПоРасчетСреднего.ВидРасчета;
				
				// Измерения
				Движение.Сотрудник						= ВыборкаПоРасчетСреднего.Сотрудник;
				Движение.Физлицо						= ВыборкаПоРасчетСреднего.Физлицо;
				Движение.Организация					= ВыборкаПоРасчетСреднего.Организация;
				
				// Ресурсы
				Движение.Результат						= ВыборкаПоРасчетСреднего.Результат;
				Движение.ОтработаноПоПятидневке			= ВыборкаПоРасчетСреднего.ОтработаноПоПятидневке;
				Движение.НормаПоПятидневке				= ВыборкаПоРасчетСреднего.НормаПоПятидневке;
				Движение.ОтработаноДней					= ВыборкаПоРасчетСреднего.ОтработаноДней;
				Движение.ОтработаноЧасов				= ВыборкаПоРасчетСреднего.ОтработаноЧасов;
				
				// Реквизиты
				Движение.КоэффициентИндексации			= ВыборкаПоРасчетСреднего.КоэффициентИндексации;
				Движение.ЧислоМесяцев					= ВыборкаПоРасчетСреднего.ЧислоМесяцев;
				Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка;
				Движение.ДатаНачалаСобытия				= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
				Движение.СпособРасчета					= ВыборкаПоШапкеДокумента.СпособРасчета;
				Движение.ДатаНачалаРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
				Движение.ДатаОкончанияРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			НаборРасчетСреднего.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	// Если это документ-исправление, тогда добавим сторно-записи из исправляемого документа.
	Если ЗначениеЗаполнено(Документ.ПерерассчитываемыйДокумент) Тогда
		ПроведениеРасчетов.СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(Документ.ПерерассчитываемыйДокумент, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления);
	КонецЕсли;
	
	Документ.СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	ТаблицаСторноЗаписей.Колонки.Удалить("СторнируемыйДокумент");
	ТаблицаСторноЗаписей.Колонки.Регистратор.Имя = "СторнируемыйДокумент";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		
		// новая запись движений
		Движение = НаборОсновныеНачисления.Добавить();

		ЗаполнитьЗначенияСвойств(Движение,СтрокаСторно);
		
		// Свойства
		Движение.Сторно	= Истина;
		Движение.Авторасчет	= Истина;

	КонецЦикла;
	
	Если ТаблицаСторноЗаписей.Количество() <> 0 Тогда
		// если таблица сторно-записей не пустая, получим таблицу
		// начислений зависисяцих от тех начислений, которые зарегистрированы,
		
		ТаблицаОсновныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийОсновные(НаборОсновныеНачисления.Выгрузить());
		Для каждого СтрокаТаблицы Из ТаблицаОсновныхНачислений Цикл
			
			Если СтрокаТаблицы.Начислить > 0 Тогда
				// начисление зависит от сторнирующего, добавим не сторно
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.СторнируемыйДокумент = Неопределено;
				Движение.Сторно	= Ложь;
				Движение.Авторасчет	= Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.Сторнировать > 0 Тогда
				
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.Сторно	= Истина;
				Движение.Авторасчет	= Ложь;
				
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.СторнируемыйДокумент = Неопределено;
				Движение.Сторно	= Ложь;
				Движение.Авторасчет	= Истина;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		ТаблицаДополнительныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийДополнительные(ТаблицаСторноЗаписей);
		Для каждого СтрокаТаблицы Из ТаблицаДополнительныхНачислений Цикл
			
			Движение = НаборДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.Сторно	= Истина;
			Движение.Авторасчет	= Ложь;
			
			Движение = НаборДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.СторнируемыйДокумент = Неопределено;
			Движение.Сторно	= Ложь;
			Движение.Авторасчет	= Истина;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Очистим начисления
	Документ.Начисления.Очистить();

	// рассчитываем записи начислений и если надо, записи расчета среднего заработка
	Если РассчитываемыеТаблицы.Начисления Тогда
		
		Если РассчитываемыеТаблицы.РасчетСреднего Тогда
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,Истина);
		Иначе
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
		КонецЕсли;
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			НаборОсновныеНачисления.Записать(Истина, Истина);
			
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
			НаборДополнительныеНачисления.Записать(Истина, Истина);
			
			// повторный расчет на случай зависимости основных начислений от дополнительных
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
			
		КонецЕсли;
		
		// перепишем записи начислений в документ
		ЗаписиНачислений = НаборОсновныеНачисления.Выгрузить();
		ЗаписиНачислений.Колонки.ПериодДействияНачало.Имя = "ДатаНачала";
		ЗаписиНачислений.Колонки.ПериодДействияКонец.Имя  = "ДатаОкончания";
		Документ.Начисления.Загрузить(ЗаписиНачислений);
		
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			// перепишем записи начислений в документ
			ЗаписиНачислений = НаборДополнительныеНачисления.Выгрузить();
			ЗаписиНачислений.Колонки.БазовыйПериодНачало.Имя = "ДатаНачала";
			ЗаписиНачислений.Колонки.БазовыйПериодКонец.Имя = "ДатаОкончания";
			Для каждого СтрокаТаблицы Из ЗаписиНачислений Цикл
				НоваяСтрока = Документ.Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;			
		
	ИначеЕсли РассчитываемыеТаблицы.РасчетСреднего Тогда
		НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		ПроведениеРасчетовПереопределяемый.СформироватьИЗаписатьДанныеРасчетаСреднего("ОсновныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
	КонецЕсли;

	Если РассчитываемыеТаблицы.РасчетСреднего Тогда
		// перепишем записи расчета среднего заработка в документ
		Документ.РасчетСреднего.Загрузить(НаборРасчетСреднего.Выгрузить());
	КонецЕсли;
	
	Если ПроведениеРасчетовПереопределяемый.ЗаписыватьДвиженияПриРасчетеДокументаСреднегоЗаработка(РассчитываемыеТаблицы, РежимПерерасчета) Тогда
		
		Если НаборОсновныеНачисления.Модифицированность() Тогда
			НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		Если НаборДополнительныеНачисления.Модифицированность() Тогда
			НаборДополнительныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		Если НаборРасчетСреднего.Модифицированность() Тогда
			НаборРасчетСреднего.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		
		ПроведениеРасчетовПереопределяемый.ВыполнитьДополнительныеДействияПриРасчетеДокументаСреднегоЗаработка(Документ);
	КонецЕсли;
	
	Если Не РежимПерерасчета тогда
		
		// Удаляем движения для режима интерактивного расчета
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			НаборДополнительныеНачисления.Очистить();
			НаборДополнительныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		
		НаборРасчетСреднего.Очистить();
		НаборРасчетСреднего.Записать();
	КонецЕсли;
		
	Возврат Не Отказ;
		
КонецФункции // РассчитатьДокументСреднегоЗаработка()

// Разбивает строку таблицы начислений на помесячные записи (длиной не более месяца)
// Параметры:
//		СтрокаНачислений - строка таблицы начислений, которую следует разбить
//		ТаблицаНачислений - таблица начислений, имеющая 2 обязательные колонки: КолонкаДатаНачала и  КолонкаДатаОкончания
//		КоллекцияКолонокТаблицы - коллекция колонок таблицы
//		КолонкаДатаНачала - имя колонки, содержащей дату начала периода записи
//		КолонкаДатаОкончания - имя колонки, содержащей дату окончания периода записи
Процедура РазбитьСтрокуНачисленийНаПомесячныеЗаписи(СтрокаНачислений, ТаблицаНачислений, КолонкаДатаНачала = "ДатаНачала", КолонкаДатаОкончания = "ДатаОкончания") Экспорт
	
	НачалоПериода = СтрокаНачислений[КолонкаДатаНачала];
	КонецПериода = СтрокаНачислений[КолонкаДатаОкончания];
	
	Если НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) ИЛИ КонецПериода < НачалоПериода Тогда
		Возврат;// разбивать не надо
	КонецЕсли; 
	
	РазницаВМесяцах = (Год(КонецПериода)*12 + Месяц(КонецПериода)) - (Год(НачалоПериода)*12 + Месяц(НачалоПериода));
	
	// У первоначальной строки дату конца установим в конец первого месяца
	СтрокаНачислений[КолонкаДатаОкончания] = КонецМесяца(НачалоПериода);	
	
	ОчередноеНачалоМесяца = НачалоМесяца(НачалоПериода);
	Для Счетчик = 1 По РазницаВМесяцах Цикл
		
		НоваяСтрока = ТаблицаНачислений.Добавить();
		
		// Скопируем строку
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНачислений);
		
		// Установим период
		ОчередноеНачалоМесяца = ДобавитьМесяц(ОчередноеНачалоМесяца, 1);
		НоваяСтрока[КолонкаДатаНачала] = ОчередноеНачалоМесяца;	
		НоваяСтрока[КолонкаДатаОкончания] = КонецМесяца(ОчередноеНачалоМесяца);	
		
	КонецЦикла;
	
	// Для  последней строки установим конец периода в конец разбиваемого периода
	НоваяСтрока[КолонкаДатаОкончания]	 = КонецПериода;
		
КонецПроцедуры

// Сворачивает таблицу значений в которой расположены движения НДФЛСведенияОДоходах
// опирается на структуру метаданных - сворачивает все ресурсы по измерениям+реквизитам 
// Парамтеры:
//	ДвиженияНДФЛСведенияОДоходах - таблица значений
// Возвращаемое значение:
//	нет
Процедура СвернутьДвиженияНДФЛСведенияОДоходах(ДвиженияНДФЛСведенияОДоходах) Экспорт
	
	СтрокаСуммирования = "";
	Для Каждого Изм Из Метаданные.РегистрыНакопления["НДФЛСведенияОДоходах"].Ресурсы Цикл
		СтрокаСуммирования = СтрокаСуммирования + Изм.Имя +",";
	КонецЦикла;
	СтрокаСуммирования = Лев(СтрокаСуммирования, СтрДлина(СтрокаСуммирования)-1);// удалим последнюю запятую
	
	СтрокаГруппировки = "Регистратор,Период,";
	Для Каждого Изм Из Метаданные.РегистрыНакопления["НДФЛСведенияОДоходах"].Измерения Цикл
		СтрокаГруппировки = СтрокаГруппировки + Изм.Имя +",";
	КонецЦикла;
	Для Каждого Изм Из Метаданные.РегистрыНакопления["НДФЛСведенияОДоходах"].Реквизиты Цикл
		СтрокаГруппировки = СтрокаГруппировки + Изм.Имя +",";
	КонецЦикла;
	СтрокаГруппировки = Лев(СтрокаГруппировки, СтрДлина(СтрокаГруппировки)-1);// удалим последнюю запятую
	
	ДвиженияНДФЛСведенияОДоходах.Свернуть(СтрокаГруппировки,СтрокаСуммирования);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ СПОСОБОВ РАСЧЕТА

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокОсновныхВариантовНачисленийОрганизации() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
     
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);	 	
	 
	 ПроведениеРасчетовПереопределяемый.ДополнитьСписокОсновныхВариантовНачисленийОрганизации(СписокСпособов);
	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокОсновныхВариантовНачисленийОрганизации()

// Возвращает список алгоритмов начислений, зависящих от среднего заработка
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПоСреднемуЗаработку() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокНачисленийПоСреднемуЗаработку()

// Возвращает список алгоритмов начислений, являющихся почасовыми отклонениями
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПочасовыхОтклонений() Экспорт

	СписокСпособов = Новый СписокЗначений;
	 
	СписокСпособов.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	СписокСпособов.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);

	Возврат СписокСпособов

КонецФункции // ПолучитьСписокНачисленийПочасовыхОтклонений()

// Возвращает список регламентированных алгоритмов удержаний
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовУдержанийОрганизации() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений);
	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокВариантовУдержанийОрганизации()

// Возвращает алгоритмы начислений, не требующих указания валюты начислений, в виде соответствия
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Соответствие, содержащая подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСоответствиеСпособовРасчетаТребующихВалюту() Экспорт
	
	Список = ПроведениеРасчетовПереопределяемый.ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты();
	СоответствиеСпособов = Новый Соответствие;
	Для Сч = 0 По Перечисления.СпособыРасчетаОплатыТруда.Количество() - 1 Цикл
		Значение = Перечисления.СпособыРасчетаОплатыТруда.Получить(Сч);
		СоответствиеСпособов.Вставить(Значение, Список.НайтиПоЗначению(Значение) = Неопределено);
	КонецЦикла;  
	
    Возврат СоответствиеСпособов
	
КонецФункции // Получить()

// Возвращает список процентных способов расчета
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПроцентом() Экспорт
	
	СписокСпособов = Новый Массив;
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка);
	
	Возврат СписокСпособов;
	
КонецФункции

// Возвращает список предопределенных начислений
Функция ПредопределенныеНачисленияОрганизации() Экспорт

	СписокПредопределенныхВР = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОсновныеНачисленияОрганизаций.Ссылка,
	                      |	ОсновныеНачисленияОрганизаций.Наименование
	                      |ИЗ
	                      |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	                      |
	                      |ГДЕ
	                      |	(ОсновныеНачисленияОрганизаций.Предопределенный)");

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
	    СписокПредопределенныхВР.Добавить(Результат.Ссылка,Результат.Наименование);
	КонецЦикла;
	
    Возврат СписокПредопределенныхВР
	
КонецФункции

// Возвращает список кодов вычетов, относящихся к конкретным доходам
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   список значений, содержащий ссылки на предопределенные эл-ты спр-ка ВычетыНДФЛ
//
Функция ПолучитьСписокВычетовКДоходам() Экспорт

	СписокВычетов = Новый Массив;
	
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код101);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код102);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код103);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код104);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код105);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код106);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код107);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код111);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код113);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код311);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код312);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВычетыНДФЛ.Ссылка,
	|	ВычетыНДФЛ.Код + "" ("" + ВычетыНДФЛ.Наименование + "")"" КАК Представление
	|ИЗ
	|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|ГДЕ
	|	(НЕ ВычетыНДФЛ.Ссылка В (&Ссылка))
	|	И (НЕ ВычетыНДФЛ.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВычетыНДФЛ.Код");
	
	Запрос.УстановитьПараметр("Ссылка",СписокВычетов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокВычетов = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокВычетов.Добавить(Выборка.Ссылка,Выборка.Представление);
	КонецЦикла;
	
	Возврат СписокВычетов
	
КонецФункции // ПолучитьСписокВычетовКДоходам()

Функция ПолучитьСоответствиеДоходовИВычетов() Экспорт

	// Устанавливаем соответствие доходов и положенных по ним вычетов для целей исчисления НДФЛ
	СоответствиеДоходовИВычетов = Новый Соответствие;
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2761,Справочники.ВычетыНДФЛ.Код506);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка,Справочники.ВычетыНДФЛ.МатпомощьПриРожденииРебенка);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2720,Справочники.ВычетыНДФЛ.Код501);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2730,Справочники.ВычетыНДФЛ.Код502);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2740,Справочники.ВычетыНДФЛ.Код505);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2760,Справочники.ВычетыНДФЛ.Код503);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2770,Справочники.ВычетыНДФЛ.Код504);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2790,Справочники.ВычетыНДФЛ.Код507);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2791,Справочники.ВычетыНДФЛ.Код509);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1211,Справочники.ВычетыНДФЛ.Код607);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2010,Справочники.ВычетыНДФЛ.Код403);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2201,Справочники.ВычетыНДФЛ.Код405);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2202,Справочники.ВычетыНДФЛ.Код405);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2203,Справочники.ВычетыНДФЛ.Код405);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2204,Справочники.ВычетыНДФЛ.Код405);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2205,Справочники.ВычетыНДФЛ.Код405);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2206,Справочники.ВычетыНДФЛ.Код405);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2207,Справочники.ВычетыНДФЛ.Код405);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2208,Справочники.ВычетыНДФЛ.Код405);
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2209,Справочники.ВычетыНДФЛ.Код405);
	
	Возврат СоответствиеДоходовИВычетов
	
КонецФункции // ПолучитьСоответствиеДоходовИВычетов()

Функция ПолучитьТаблицуСоответствияДоходовИВычетов() Экспорт
	
	ТаблицаСоответствияДоходовИВычетов = Новый ТаблицаЗначений;
	ТаблицаСоответствияДоходовИВычетов.Колонки.Добавить("КодВычета",Новый ОписаниеТипов("СправочникСсылка.ВычетыНДФЛ"));
	ТаблицаСоответствияДоходовИВычетов.Колонки.Добавить("КодДохода",Новый ОписаниеТипов("СправочникСсылка.ДоходыНДФЛ"));
	Для каждого Элемент Из ПолучитьСоответствиеДоходовИВычетов() Цикл
		СтрокаТЗ = ТаблицаСоответствияДоходовИВычетов.Добавить();
		СтрокаТЗ.КодДохода = Элемент.Ключ;
		СтрокаТЗ.КодВычета = Элемент.Значение;
	КонецЦикла;
	
	Возврат ТаблицаСоответствияДоходовИВычетов
	
КонецФункции // ПолучитьТаблицуСоответствияДоходовИВычетов()

// Проверяет соответствует ли указанный код вычета коду дохода по НДФЛ
//
// Параметры
//  КодДохода - тип СправочникСсылка.ДоходыНДФЛ, код дохода
//  КодВычета - тип СправочникСсылка.ВычетыНДФЛ, проверяемый код вычета
//
// Возвращаемое значение:
//   булево - ответ на вопрос "соответствует ли?"
//
Функция ВычетСоответствуетДоходу(КодДохода = Неопределено, КодВычета = Неопределено, СоответствиеДоходовИВычетов = Неопределено) Экспорт
    Если Не ЗначениеЗаполнено(СоответствиеДоходовИВычетов) Тогда
		СоответствиеДоходовИВычетов = ПолучитьСоответствиеДоходовИВычетов()
	КонецЕсли;
	Если КодДохода = Справочники.ДоходыНДФЛ.Код2761  // вычеты по пп 8, 28 ст. 217 НК РФ и договор ГПХ
		Или КодДохода = Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2720 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2730 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2740 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2760 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2770 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2790 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2791 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код1211 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2010 Тогда
		Возврат КодВычета = СоответствиеДоходовИВычетов[КодДохода]
	ИначеЕсли КодДохода = Справочники.ДоходыНДФЛ.Код2201 // авторские вознаграждения
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2202
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2203
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2204
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2205
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2206
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2207
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2208
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2209 Тогда 
		Возврат КодВычета = Справочники.ВычетыНДФЛ.Код404 Или КодВычета = Справочники.ВычетыНДФЛ.Код405
	Иначе // по переданному коду дохода вычета не предусмотрено	
		Возврат Не ЗначениеЗаполнено(КодВычета)
	КонецЕсли;
	
КонецФункции // ПроверитьСоответствиеДоходаИВычета()

// Выбирает все зарегистрированные в ИБ категории расчета кроме Справочники.КатегорииРасчетов.Первичное
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   список значений с категориями для выбора
//
Функция ПолучитьСписокЗависимыхКатегорийРасчета() Экспорт

	// Установим значение переключателя "ОчередностьНачисления" и список выбора для реквизита "КатегорияРасчета"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Первичное", Справочники.КатегорииРасчетов.Первичное);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииРасчетов.Ссылка,
	|	КатегорииРасчетов.Наименование
	|ИЗ
	|	Справочник.КатегорииРасчетов КАК КатегорииРасчетов
	|ГДЕ
	|	КатегорииРасчетов.Ссылка <> &Первичное
	|
	|УПОРЯДОЧИТЬ ПО
	|	КатегорииРасчетов.Код";
	Категории = Запрос.Выполнить().Выбрать();
	СписокКатегорийРасчета = Новый СписокЗначений;
	Пока Категории.Следующий() Цикл
		СписокКатегорийРасчета.Добавить(Категории.Ссылка, Категории.Наименование);
	КонецЦикла;

	Возврат СписокКатегорийРасчета
	
КонецФункции // ПолучитьСписокВычетовКДоходам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВИДАМИ РАСЧЕТА

// Эта функция возвращает информацию о виде расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информащцию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОВидеРасчета(СведенияОВидахРасчета, ВидРасчета) Экспорт
	
	СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	
	Если СведенияОВидеРасчета = Неопределено Тогда
		
		ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
		
		СведенияОВидеРасчета = Новый Структура("
		|КодДоходаНДФЛ, 
		|СпособРасчета, 
		|ЗачетОтработанногоВремени,
		|ЗачетНормыВремени,
		|ВидВремени,
		|ПериодРасчетаСреднегоЗаработка,
		|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
		|РазмерТребуется,
		|НеТребуетВалюты,
		|ТребуетВводаТарифногоРазряда, 
		|ОбозначениеВТабелеУчетаРабочегоВремени", 
		Неопределено,            			// КодДоходаНДФЛ
		Неопределено,            			// СпособРасчета
		Ложь,            					// ЗачетОтработанногоВремени
		Ложь,            					// ЗачетНормыВремени
		Неопределено,      					// ВидВремени
		0,            						// ПериодРасчетаСреднегоЗаработка
		Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,
		Ложь,								// РазмерТребуется
		Ложь,                               // НеТребуетВалюты
		Ложь,	                            // ТребуетВводаТарифногоРазряда
		Неопределено);                      // ОбозначениеВТабелеУчетаРабочегоВремени
		
		СпособРасчета = ВидРасчета.СпособРасчета;
		ТипВР = ТипЗнч(ВидРасчета);
		// размер требует способ расчета
		СведенияОВидеРасчета.СпособРасчета = СпособРасчета;
		СведенияОВидеРасчета.РазмерТребуется = СпособРасчетаТребуетРазмер(СпособРасчета);
		СведенияОВидеРасчета.НеТребуетВалюты = СпособРасчетаНеТребуетВалюты(СпособРасчета);
		// размер требует вид расчета
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ВидВремени,ЗачетОтработанногоВремени,ЗачетНормыВремени,КодДоходаНДФЛ,ТребуетВводаТарифногоРазряда,ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,ПериодРасчетаСреднегоЗаработка,ОбозначениеВТабелеУчетаРабочегоВремени");
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
				СведенияОВидеРасчета.РазмерТребуется = Истина;
			КонецЕсли;	
			Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
				СведенияОВидеРасчета.НеТребуетВалюты = Истина
			КонецЕсли;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций")  Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"КодДоходаНДФЛ,ТребуетВводаТарифногоРазряда,ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка");
			Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
				СведенияОВидеРасчета.НеТребуетВалюты = Истина
			КонецЕсли;
			Если ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> Неопределено Тогда
				СведенияОВидеРасчета.ПериодРасчетаСреднегоЗаработка = ВидРасчета.ЧислоМесяцев;
			КонецЕсли;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
			Если ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,ПериодРасчетаСреднегоЗаработка");
			КонецЕсли;
		КонецЕсли;
		
		СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;
	КонецЕсли;
	
	Возврат СведенияОВидеРасчета;
	
КонецФункции  // ПолучитьСведенияОВидеРасчета

// функция проверяет необходимость задавать размер для расчета по заданному способу
// Парамерты:
//	СпособРасчета
//
// Возвращаемое значение:
//	булево - признак того, нужен ли размер для расчета таким способом
//
Функция СпособРасчетаТребуетРазмер(СпособРасчета) Экспорт
	Возврат НЕ (
    СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула
  );
КонецФункции

Функция СпособРасчетаНеТребуетВалюты(СпособРасчета) Экспорт
	
	Возврат (
	
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
	
    );
	
КонецФункции

// Проверяет правильность заполнения реквизитов вида расчета 
// для некуоторых случаев выдает сообщение об ошибке
// для некоторых - возвращает текст сообщения
// 	Параметры:
//		ВидРасчета - объект Вид расчета
//		Отказ - признак отказа (проверка не прошла)
//	Возвращаемое значение:
//		ТекстСообщения - текст сообщения о результате проверки
Функция ПроверитьНастройкуВидаРасчета(ВидРасчета, Отказ, ПроверятьСоответствиеБазовыхИВедущихРасчетов = Истина, ОбработкаКомментариев) Экспорт

	МетаданныеВидаРасчета = ВидРасчета.Метаданные();
	
	ВидРасчетаЯвляетсяНачислением = ПроведениеРасчетовПереопределяемый.ВидРасчетаЯвляетсяНачислением(МетаданныеВидаРасчета);
	
	Если НЕ ЗначениеЗаполнено(ВидРасчета.Наименование) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не задано наименование " + ?(ВидРасчетаЯвляетсяНачислением, "начисления", "удержания") + "!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли; 

	ЕстьРеквизитСпособРасчета = МетаданныеВидаРасчета.Реквизиты.Найти("СпособРасчета") <> Неопределено;
	Если ЕстьРеквизитСпособРасчета И НЕ ЗначениеЗаполнено(ВидРасчета.СпособРасчета) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не задан способ расчета!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;

	ЭтоДоплата = ЕстьРеквизитСпособРасчета 
				И (ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка 
					Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
	
	ЕстьРеквизитКатегорияНачисления = МетаданныеВидаРасчета.Реквизиты.Найти("КатегорияРасчета") <> Неопределено;
	Если ЕстьРеквизитКатегорияНачисления и НЕ ЗначениеЗаполнено(ВидРасчета.КатегорияРасчета) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не задана последовательность расчета!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли; 

	// Вид расчета не может входить в собственную базу
	ВидРасчетаСсылка = ВидРасчета.Ссылка;

	// рассчитываем на то, что данная функция вызывается для видов расчета с поддержкой базового периода
	Если ВидРасчета.БазовыеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  Неопределено Тогда
		// в расчетную базу входят только начисления
		ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственной расчетной базы!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;

	Если ВидРасчета.ВедущиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  Неопределено Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственного списка ведущих начислений!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;
	
	ЕстьРеквизитПроизвольнаяФормулаРасчета = МетаданныеВидаРасчета.Реквизиты.Найти("ПроизвольнаяФормулаРасчета") <> Неопределено;
	Если ЕстьРеквизитПроизвольнаяФормулаРасчета И ВидРасчета.ПроизвольнаяФормулаРасчета И Не ЗначениеЗаполнено(ВидРасчета.ФормулаРасчета) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не заполнена формула расчета!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина
	КонецЕсли;
	
	// если поддерживается период действия
	Если МетаданныеВидаРасчета.ИспользованиеПериодаДействия Тогда
		Если ВидРасчета.ВытесняющиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  Неопределено Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственного списка вытесняющих начислений!", Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстСообщения = "";
	// Проверим значение реквизита "Категория начисления".
	// Для ПВР "Удержания организаций" проверку пропустим.
	Если ЕстьРеквизитКатегорияНачисления и ВидРасчетаЯвляетсяНачислением и Не ПроведениеРасчетовПереопределяемый.ЕстьДоначисление(ВидРасчета) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазовыеВидыРасчета.ВидРасчета
		|ПОМЕСТИТЬ ВТ_ТаблицаБазовыхВидовРасчета
		|ИЗ
		|	&ТаблицаБазовыхВидовРасчета КАК БазовыеВидыРасчета";
		
		ТаблицаБазовыхВидовРасчета = Видрасчета.БазовыеВидыРасчета.Выгрузить();
		ТаблицаБазовыхВидовРасчета.Колонки.Добавить("Ссылка");
		ТаблицаБазовыхВидовРасчета.ЗаполнитьЗначения(Видрасчета,"Ссылка");
		Запрос.УстановитьПараметр("ТаблицаБазовыхВидовРасчета", ТаблицаБазовыхВидовРасчета);
		Запрос.Выполнить();

		Запрос.Текст = ПроведениеРасчетовПереопределяемый.ПолучитьТекстОписанияБазовыхНачислений(МетаданныеВидаРасчета);
		Категории = Запрос.Выполнить().Выбрать();
		Если Категории.Следующий() Тогда
			МаксимальныйИндексКатегории = Категории.МаксимальныйИндексКатегории;
			ЕстьДополнительныеВР = Категории.ЕстьДополнительныеВР;
			ЕстьОсновныеВР = Категории.ЕстьОсновныеВР;
		Иначе
			МаксимальныйИндексКатегории = "";
			ЕстьДополнительныеВР = Ложь;
			ЕстьОсновныеВР = Ложь;
		КонецЕсли;
		
		// Если в базу доп.начислений входят только основные, тогда категория расчета нам не интересна 
		НеПроверять = МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций И Не ЕстьДополнительныеВР И ЕстьОсновныеВР;
		
		Если НеПроверять Тогда // ничего не делаем
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(КатегорииРасчетов.Код) КАК МаксимальныйИндексКатегории
			|ИЗ
			|	Справочник.КатегорииРасчетов КАК КатегорииРасчетов";
			
			Категории = Запрос.Выполнить().Выбрать();
			Категории.Следующий();
			МаксимальныйКодВСправочнике = Категории.МаксимальныйИндексКатегории;
		
			Если МаксимальныйИндексКатегории = МаксимальныйКодВСправочнике Тогда
				
				// В базе расчетов есть расчеты с максимальной категорией
				Если ЭтоДоплата Тогда
					ТекстСообщения = "Откорректируйте список Вычитаемых начислений. В список не должны входить начисления с категорией """ + МаксимальныйКодВСправочнике + """!.";
				Иначе	
					ТекстСообщения = "Откорректируйте список начислений Расчетная база. В базу не должны входить начисления с категорией  """ + МаксимальныйКодВСправочнике + """!.";
				КонецЕсли;
				
			Иначе
				
				ИндексВыбраннойКатегории = ВидРасчета.КатегорияРасчета.Код;
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	МИНИМУМ(КатегорииРасчетов.Код) КАК ИндексКатегории
				|ИЗ
				|	Справочник.КатегорииРасчетов КАК КатегорииРасчетов
				|ГДЕ
				|	КатегорииРасчетов.Код > &Код";
				
				Запрос.УстановитьПараметр("Код", МаксимальныйИндексКатегории);
				Категории = Запрос.Выполнить().Выбрать();
				Категории.Следующий();
				ОжидаемаяКатегорияКод = Категории.ИндексКатегории;
				ОжидаемаяКатегория = Справочники.КатегорииРасчетов.НайтиПоКоду(ОжидаемаяКатегорияКод);
				Если ИндексВыбраннойКатегории <= МаксимальныйИндексКатегории Тогда
					// Категория начислений вида расчета должна быть на уровень выше любого из видов расчетов, составляющих базу расчета
					// Пользователь установил категорию меньше чем самая максимальная категория базы расчетов
					МаксимальнаяКатегорияБазы = Справочники.КатегорииРасчетов.НайтиПоКоду(МаксимальныйИндексКатегории);
					Если ЭтоДоплата Тогда
						ТекстСообщения = "Неверно установлена категория начисления. В список Вычитаемых начислений входят начисления с категорией """ + МаксимальнаяКатегорияБазы + """. Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """!";
					Иначе	
						ТекстСообщения = "Неверно установлена категория начисления. В расчетную базу входят начисления с категорией """ + МаксимальнаяКатегорияБазы + """. Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """!";
					КонецЕсли;
				ИначеЕсли ИндексВыбраннойКатегории > ОжидаемаяКатегорияКод тогда
					// Категория слишком большая - предупредим
					Если Не ЗначениеЗаполнено(МаксимальныйИндексКатегории) Тогда  // нет в базе ничего
						Если ЕстьРеквизитСпособРасчета Тогда
							Если ТипЗнч(ВидРасчета.Ссылка) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
								Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом 
									Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
									Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
									Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС
									Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
									
									ТекстСообщения = "Рекомендуется заполнить базовые начисления!";
								Иначе
									БылоСообщение = Ложь;
									Для Каждого Показатель Из ВидРасчета.Показатели Цикл
										Если  Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза
											Или Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза
											Или Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза
											Или Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза
											Или Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза Тогда
											ТекстСообщения = "Рекомендуется заполнить базовые начисления!";
											БылоСообщение = Истина;
										КонецЕсли;
									КонецЦикла;
									Если Не БылоСообщение Тогда
										ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. для вида расчета не заданы базовые начисления или для базовых начислений не заданы категории начисления!";								
									КонецЕсли;
								КонецЕсли;
							Иначе
								ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. для вида расчета не заданы базовые начисления или для базовых начислений не заданы категории начисления!";
							КонецЕсли;
						КонецЕсли;
					Иначе
						МаксимальнаяКатегорияБазы = Справочники.КатегорииРасчетов.НайтиПоКоду(МаксимальныйИндексКатегории);
						Если ЭтоДоплата Тогда
							ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. максимальной категорией среди вычитаемых начислений является категория """ + МаксимальнаяКатегорияБазы + """!";
						Иначе	
							ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. максимальной категорией среди начислений расчетной базы является категория """ + МаксимальнаяКатегорияБазы + """!";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПроведениеРасчетовПереопределяемый.ЕстьДоначисление(ВидРасчета) Тогда
		
		ПроведениеРасчетовПереопределяемый.ПроверитьНастройкуВидаРасчета(ВидРасчета, Отказ, ОбработкаКомментариев);
		
	КонецЕсли;
	
	// Проверим соответствие списков базовых и ведущих расчетов
	Если ПроверятьСоответствиеБазовыхИВедущихРасчетов Тогда
		
		Для Каждого СтрокаБазовыйРасчет из ВидРасчета.БазовыеВидыРасчета Цикл
			
			Если ВидРасчета.ВедущиеВидыРасчета.Найти(СтрокаБазовыйРасчет.ВидРасчета,"ВидРасчета") = Неопределено Тогда
				Если ЭтоДоплата Тогда
					ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения),Символы.ПС,"") + "Список ведущих начислений отличается от списка начислений, вычитаемых при доплате. Рекомендуется синхронизировать указанные списки!";
				Иначе
					ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения),Символы.ПС,"") + "Список ведущих начислений отличается от списка расчетной базы. Рекомендуется синхронизировать указанные списки!";
				КонецЕсли;
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
		
	// Если ВР связан со средним заработком, проверим, чтобы был заполнен реквизит "ПериодРасчетаСреднегоЗаработка"
	ЕстьРеквизитПериодРасчетаСреднегоЗаработка = МетаданныеВидаРасчета.Реквизиты.Найти("ПериодРасчетаСреднегоЗаработка") <> Неопределено;
	Если ЕстьРеквизитСпособРасчета и ЕстьРеквизитПериодРасчетаСреднегоЗаработка Тогда
	
		Если ПроведениеРасчетов.ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(ВидРасчета.СпособРасчета) <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ВидРасчета.ПериодРасчетаСреднегоЗаработка) и ВидРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Необходимо задать количество месяцев для расчета среднего заработка!", Перечисления.ВидыСообщений.Ошибка);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим соответствие способа отражения, кода ЕСН и отношения к ЕНВД
	Если (МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций 
		или МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций)
		и ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
		
		ПроведениеРасчетовПереопределяемый.ПроверитьОтражениеВУчетеВидаРасчета(ВидРасчета, Отказ, ОбработкаКомментариев);
		
	КонецЕсли;
	
	Возврат ТекстСообщения;

КонецФункции //ПроверитьНастройкуВидаРасчета

Функция УстановитьФлагНачисляетсяВЦеломЗаМесяц(ПроизвольнаяФормулаРасчета, Показатели, СпособРасчета, ПериодДействияБазовый) Экспорт
	
	Если ПроизвольнаяФормулаРасчета Тогда
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВКалендарныхДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВЧасах);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.РасчетнаяБаза);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.СдельнаяВыработка);
		
		Для Каждого СтрПоказателя Из Показатели Цикл
			Если СписокПоказателей.НайтиПоЗначению(СтрПоказателя.Показатель) <> Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой
			Или Не ПериодДействияБазовый И (СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТАЖЕМ
// 

// проверка того, что способ расчета относится к расчетам от стажа
Функция ЭтоРасчетОтСтажа(СпособРасчета) Экспорт
    Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом;
КонецФункции

// Проверяет является ли способ расчета тем способом, которому требуется 
// информация о проценте надбавки за северный стаж
//
// Параметры:
//  СпособРасчета - ПеречислениеСсылка.СпособыРасчетаОплатыТруда
//
Функция ЭтоРасчетСеверныхНадбавок(СпособРасчета) Экспорт
    Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Тогда
        Возврат Истина;
    КонецЕсли;
    Возврат Ложь;
КонецФункции

// ПолучитьПроцентыСевернойНадбавкиЗаПериод
// Предназначена для получения информации о процентах северной надбавки и датах начала их действия 
// за определенный период
// Параметры:
//  ДатаРегистрации - дата регистрации записи о стаже
//  ПорядокНачисления - порядок начисления северной надбавки - ПеречислениеСсылка.ПорядокНачисленияСеверныхНадбавок
//  НачальныйПроцент - процент на дату ДатаРегистрации
//  Месяцев - количество месяцев стажа на дату ДатаРегистрации
//  Дней - количество дней стажа на дату ДатаРегистрации
//  ДатаНачала - начало периода, в котором мы получаем сведения о процентах надбавки
//  ДатаОкончания - конец периода, в котором мы получаем сведения о процентах надбавки
//
// Возвращаемое значение:
//  Массив структур вида "Период, Процент"
//
Функция ПолучитьПроцентыСевернойНадбавкиЗаПериод(ДатаРегистрации, ПорядокНачисления, 
                        НачальныйПроцент, Месяцев, Дней, ДатаНачала, ДатаОкончания) Экспорт
                        
    мДлинаДня = 60*60*24;
    ВозврМассив = Новый Массив;
    
    // в общем случае шкала может состоять из двух участков
    РазмерПериода1 = 0;
    РазмерПрироста1 = 0;
    Ограничение1 = 0;
    РазмерПериода2 = 0;
    РазмерПрироста2 = 0;
    Ограничение2 = 0;
    Если      ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа1Льготная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 20;
        Ограничение1 = 60;
        РазмерПериода2 = 6;
        РазмерПрироста2 = 10;
        Ограничение2 = 100;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа1Обычная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 10;
        Ограничение1 = 100;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа2Льготная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 20;
        Ограничение1 = 60;
        РазмерПериода2 = 12;
        РазмерПрироста2 = 20;
        Ограничение2 = 80;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа2Обычная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 10;
        Ограничение1 = 60;
        РазмерПериода2 = 12;
        РазмерПрироста2 = 10;
        Ограничение2 = 80;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа3Льготная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 10;
        Ограничение1 = 50;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа3Обычная Тогда
        РазмерПериода1 = 12;
        РазмерПрироста1 = 10;
        Ограничение1 = 50;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа4Льготная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 10;
        Ограничение1 = 30;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа4Обычная Тогда
        РазмерПериода1 = 12;
        РазмерПрироста1 = 10;
        Ограничение1 = 10;
        РазмерПериода2 = 24;
        РазмерПрироста2 = 10;
        Ограничение2 = 30;
	Иначе // порядок не указан
        Элемент = Новый Структура("Период, Процент", ДатаНачала, 0);
        ВозврМассив.Добавить(Элемент);
		Возврат ВозврМассив;
	КонецЕсли;
    
    ДатаОтсчета = ДатаРегистрации - Дней * мДлинаДня;
    ПрошлоМесяцевПослеДатыОтсчета = (Год(ДатаНачала) - Год(ДатаОтсчета)) * 12 + Месяц(ДатаНачала) - Месяц(ДатаОтсчета) -
        ?(День(ДатаНачала) >= День(ДатаОтсчета), 0, 1);
    ПрошлоМесяцев = (Год(ДатаНачала) - Год(ДатаОтсчета)) * 12 + Месяц(ДатаНачала) - Месяц(ДатаОтсчета) -
        ?(День(ДатаНачала) >= День(ДатаОтсчета), 0, 1) + Месяцев;
    Если РазмерПериода2 = 0 Тогда    
        // у шкалы только один участок
        ПрошлоПериодов = Цел(ПрошлоМесяцев / РазмерПериода1);
        ОстатокМесяцев = ПрошлоМесяцев - ПрошлоПериодов * РазмерПериода1;
        Процент = Мин(НачальныйПроцент + ПрошлоПериодов * РазмерПрироста1, Ограничение1);
        Элемент = Новый Структура("Период, Процент", ДатаНачала, Процент);
        ВозврМассив.Добавить(Элемент);
        ДатаСменыПроцента = ДобавитьМесяц(ДатаОтсчета, ПрошлоМесяцевПослеДатыОтсчета + РазмерПериода1 - ОстатокМесяцев);
        Пока ДатаСменыПроцента < ДатаОкончания Цикл
            Процент = Мин(Процент + РазмерПрироста1, Ограничение1);
            Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
            ВозврМассив.Добавить(Элемент);
            Если Процент = Ограничение1 Тогда
                Прервать;
            КонецЕсли;
            ДатаСменыПроцента = ДобавитьМесяц(ДатаСменыПроцента, РазмерПериода1);
        КонецЦикла;
    ИначеЕсли НачальныйПроцент >= Ограничение1 Тогда
        // используем уже второй участок шкалы
        ПрошлоПериодов = Цел(ПрошлоМесяцев / РазмерПериода2);
        Процент = Мин(НачальныйПроцент + ПрошлоПериодов * РазмерПрироста2, Ограничение2);
        Элемент = Новый Структура("Период, Процент", ДатаНачала, Процент);
        ВозврМассив.Добавить(Элемент);
        ДатаСменыПроцента = ДобавитьМесяц(ДатаОтсчета, (ПрошлоПериодов + 1) * РазмерПериода2);
        Пока ДатаСменыПроцента < ДатаОкончания Цикл
            Процент = Мин(Процент + РазмерПрироста2, Ограничение2);
            Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
            ВозврМассив.Добавить(Элемент);
            Если Процент = Ограничение2 Тогда
                Прервать;
            КонецЕсли;
            ДатаСменыПроцента = ДобавитьМесяц(ДатаСменыПроцента, РазмерПериода1);
        КонецЦикла;
    Иначе
        // два участка у шкалы
        ДатаСменыПроцента = ДобавитьМесяц(ДатаОтсчета, - Месяцев);
        Процент = НачальныйПроцент;
        РазмерПрироста = РазмерПрироста1;
        РазмерПериода = РазмерПериода1;
        Ограничение = Ограничение1;
		Если ДатаСменыПроцента >= ДатаНачала И ДатаСменыПроцента <= ДатаОкончания Тогда
			Если ДатаСменыПроцента > ДатаНачала Тогда
				Элемент = Новый Структура("Период, Процент", ДатаНачала, Макс(Процент - РазмерПрироста,0));
				ВозврМассив.Добавить(Элемент);
			КонецЕсли;
			Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, НачальныйПроцент);
			ВозврМассив.Добавить(Элемент);
		Иначе
			Пока ДатаСменыПроцента < ДатаОкончания Цикл
				Если ДатаСменыПроцента = ДатаНачала Тогда
					Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
					ВозврМассив.Добавить(Элемент);
					Прервать;
				ИначеЕсли ДатаСменыПроцента > ДатаНачала Тогда
					Элемент = Новый Структура("Период, Процент", ДатаНачала, Макс(Процент - РазмерПрироста,НачальныйПроцент));
					ВозврМассив.Добавить(Элемент);
					Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
					ВозврМассив.Добавить(Элемент);
					Прервать;
				КонецЕсли;
				Процент = Процент + РазмерПрироста;
				Если Процент > Ограничение Тогда
					Если Процент > Ограничение2 Тогда 
						Процент = Ограничение2;
						Прервать;
					Иначе
						// если уже перешли на второй участок...
						// сначала отменим увеличение процента
						Процент = Процент - РазмерПрироста;
						// сменим параметры участка шкалы
						РазмерПрироста = РазмерПрироста2;
						РазмерПериода = РазмерПериода2;
						Ограничение = Ограничение2;
						// установим процент с использованием новых параметров
						Процент = Процент + РазмерПрироста;
					КонецЕсли;
				КонецЕсли;
				ДатаСменыПроцента = ДобавитьМесяц(ДатаСменыПроцента, РазмерПериода);
				Если ДатаСменыПроцента > ДатаОкончания Тогда
					// если это уже за пределами периода - отменим увеличение процента
					Процент = Процент - РазмерПрироста;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// если так ничего и не добавили - вернем последнее значение процента на дату начала периода
			Если ВозврМассив.Количество() = 0 Тогда
				Элемент = Новый Структура("Период, Процент", ДатаНачала, Процент);
				ВозврМассив.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
    КонецЕсли;
        
    Возврат ВозврМассив;
    
КонецФункции

// Функция выбирает стажи по физлицу из ТЧ "Стажи" справочника "Физические лица"
//
// Параметры
//  Физлицо		– СправочникСсылка.ФизическиеЛица – работник, которому вычисляется стаж
//  ДопУсловие	– Строка – строка дополнительного условия в запрос
//  ВидСтажа	– СправочникСсылка.ВидыСтажа - значение параметра для дополнительного условия
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса   – выборка со стажами работника
//
Функция ВыбратьСтажиРаботника(Физлицо, ДопУсловие = Неопределено, ВидСтажа = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	ФизическиеЛицаСтажи.ВидСтажа,
	|	ФизическиеЛицаСтажи.ВидСтажа.Наименование КАК Наименование,
	|	ФизическиеЛицаСтажи.ДатаОтсчета,
	|	ФизическиеЛицаСтажи.РазмерМесяцев,
	|	ФизическиеЛицаСтажи.РазмерДней
	|ИЗ
	|	Справочник.ФизическиеЛица.Стажи КАК ФизическиеЛицаСтажи
	|ГДЕ
	|	ФизическиеЛицаСтажи.Ссылка = &Физлицо
	|	И ФизическиеЛицаСтажи.ДатаОтсчета <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Если ДопУсловие <> Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + " " + ДопУсловие;
		
		Если ВидСтажа <> Неопределено Тогда
			
			Запрос.УстановитьПараметр("ВидСтажа", ВидСтажа);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции // ВыбратьСтажиРаботника()

// определяет начало непрерывного стажа физлица
//
// Параметры
//  ДатаНачала - Дата, дата на которую формируется стаж
//  Физлицо - Справочник.ФизическиеЛица, физ. лицо для которого определяется стаж
//  Организация - Справочник.Организации, организация, где работает физлицо.
//
// Возвращаемое значение:
//  дата - дата начала непрерывного стажа
//
Функция ПолучитьНачалоСтажаДляБольничногоЛиста(ДатаНачала, Физлицо, Организация, ВидСтажа = Неопределено) Экспорт
	
	Если ВидСтажа = Неопределено Тогда
		ВидСтажа = ПроведениеРасчетовПереопределяемый.ПолучитьВидСтажаПоУмолчаниюДляБольничногоЛиста(ДатаНачала);
	КонецЕсли;
	
	ВыборкаПоСтажу = ВыбратьСтажиРаботника(Физлицо, "И ФизическиеЛицаСтажи.ВидСтажа = &ВидСтажа", ВидСтажа);
	Если ВыборкаПоСтажу.Следующий() Тогда
	
		ДатаСтажа = ДобавитьМесяц(ВыборкаПоСтажу.ДатаОтсчета, - ВыборкаПоСтажу.РазмерМесяцев) - ВыборкаПоСтажу.РазмерДней*86400;
		
	Иначе // стаж не введен, возьмем дату последнего приема на работу.
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Период), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Период
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		&ДатаАктуальности,
		|		Сотрудник.Физлицо = &Физлицо
		|			И Организация = &ГоловнаяОрганизация
		|			И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиОрганизацийСрезПоследних";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаАктуальности",			ДатаНачала);
		Запрос.УстановитьПараметр("Физлицо",					Физлицо);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",		Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаСтажа = Выборка.Период
		Иначе 
			ДатаСтажа = Дата(1,1,1)
		КонецЕсли; 
		
	КонецЕсли; 
	
    Возврат ДатаСтажа
	
КонецФункции // ПолучитьНачалоСтажаДляБольничногоЛиста()

////////////////////////////////////////////////////////////////////////////////
// ОБСЛУЖИВАНИЕ ПЕРЕРАСЧЕТОВ
// 

// процедура выполняет дописывание наборов записей перерасчетов основных начислений по 
// переданной выборке
// выборка должна содержать уникальные комбинации Физлицо+Регистратор (т.е. ОбъектПерерасчета)
// которых еще нет в таблице перерасчета
Процедура ДописатьПерерасчетыОсновныхНачислений(Выборка) Экспорт
	Наборы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Набор = Наборы[Выборка.Регистратор];
		Если Набор = Неопределено Тогда
			Набор = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектПерерасчета.Значение = Выборка.Регистратор;
			Набор.Отбор.ОбъектПерерасчета.Использование = Истина;
			Наборы.Вставить(Выборка.Регистратор, Набор);
		КонецЕсли;
		НоваяСтрока = Набор.Добавить();
		НоваяСтрока.ОбъектПерерасчета	= Выборка.Регистратор;
		НоваяСтрока.Сотрудник			= Выборка.Сотрудник;
		НоваяСтрока.ФизЛицо				= Выборка.Физлицо;
		НоваяСтрока.Организация			= Выборка.Организация;
	КонецЦикла;
	Для Каждого ЭлементСтруктуры Из Наборы Цикл
		// дописываем набор записей по данному объекту перерасчета
		ЭлементСтруктуры.Значение.Записать(Ложь);
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет дописывание наборов записей перерасчетов в
// регистр сведений ЗаполнениеПлановыхНачислений
//
Процедура ДописатьПерерасчетыВЗаполнениеПлановыхНачислений(Выборка) Экспорт
	
	Наборы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Набор = Наборы[Выборка.ОбъектЗаполнения];
		Если Набор = Неопределено Тогда
			Набор = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектЗаполнения.Значение = Выборка.ОбъектЗаполнения;
			Набор.Отбор.ОбъектЗаполнения.Использование = Истина;
			Наборы.Вставить(Выборка.ОбъектЗаполнения, Набор);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Набор.Добавить(),Выборка);
	КонецЦикла;
		
	Для Каждого ЭлементыСтруктуры Из Наборы Цикл
		ЭлементыСтруктуры.Значение.Записать(Ложь);
	КонецЦикла;
	
КонецПроцедуры // ДописатьПерерасчетыВЗаполнениеПлановыхНачислений()

Процедура ОбработатьТаблицуПерерасчетов(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчеты.ОбъектПерерасчета КАК ОбъектПерерасчетаОсновные,
	|	ПерерасчетыДоп.ОбъектПерерасчета КАК ОбъектПерерасчетаДополнительные
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчеты
	|		ПО Начисления.СторнируемыйДокумент = Перерасчеты.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = Перерасчеты.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ПерерасчетыДоп
	|		ПО Начисления.СторнируемыйДокумент = ПерерасчетыДоп.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = ПерерасчетыДоп.ФизЛицо
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.Сторно";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаОбъектПерерасчета = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОбъектПерерасчета.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчеты.ОбъектПерерасчета КАК ОбъектПерерасчетаОсновные,
	|	ПерерасчетыДоп.ОбъектПерерасчета КАК ОбъектПерерасчетаДополнительные
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчеты
	|		ПО Начисления.СторнируемыйДокумент = Перерасчеты.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = Перерасчеты.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ПерерасчетыДоп
	|		ПО Начисления.СторнируемыйДокумент = ПерерасчетыДоп.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = ПерерасчетыДоп.ФизЛицо
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.Сторно";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаОбъектПерерасчета = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОбъектПерерасчета.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция получает по таблице начислений таблицу зависимых начислений
//
// Параметры
//  ТаблицаНачислений  – <Таблица значений> – таблица начислений по которым необходимо собрать зависимые начисления
//  
// Возвращаемое заначение - – <Таблица значений>
Функция ПолучитьТаблицуЗависимыхНачисленийОсновные(ТаблицаНачислений) Экспорт

	Если ТаблицаНачислений.Количество() = 0 Тогда
		Возврат ТаблицаНачислений;
	КонецЕсли;	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	
	// поместим таблицу значений во временную таблицу
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	|	ТаблицаНачислений.ВидРасчета КАК ВидРасчета,
	|	ТаблицаНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаНачислений.ПериодДействия КАК ПериодДействия,
	|	ТаблицаНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаНачислений.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ТаблицаНачислений.Сторно
	|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗависимыеНачисления.ПериодРегистрации,
	|	ЗависимыеНачисления.Регистратор,
	|	ЗависимыеНачисления.ВидРасчета,
	|	ЗависимыеНачисления.ПериодДействия КАК ПериодДействия,
	|	ЗависимыеНачисления.ПериодДействияНачало,
	|	ЗависимыеНачисления.ПериодДействияКонец,
	|	ЗависимыеНачисления.БазовыйПериодНачало,
	|	ЗависимыеНачисления.БазовыйПериодКонец,
	|	ЗависимыеНачисления.Сторно,
	|	ЗависимыеНачисления.Сотрудник КАК Сотрудник,
	|	ЗависимыеНачисления.ФизЛицо,
	|	ЗависимыеНачисления.Организация,
	|	ЗависимыеНачисления.ГрафикРаботы,
	|	ЗависимыеНачисления.ГрафикРаботыНорма,
	|	ЗависимыеНачисления.ВидУчетаВремени,
	|	ЗависимыеНачисления.Показатель1,
	|	ЗависимыеНачисления.Показатель2,
	|	ЗависимыеНачисления.Показатель3,
	|	ЗависимыеНачисления.Показатель4,
	|	ЗависимыеНачисления.Показатель5,
	|	ЗависимыеНачисления.Показатель6,
	|	ЗависимыеНачисления.ПодразделениеОрганизации,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ЗависимыеНачисления.ДатаНачалаСобытия,
	|	ЗависимыеНачисления.ОбособленноеПодразделение,
	|	ЗависимыеНачисления.Авторасчет,
	|	ЗависимыеНачисления.СторнируемыйДокумент,
	|	ЗависимыеНачисления.Результат КАК Результат,
	|	ЗависимыеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|	ЗависимыеНачисления.ОтработаноДней КАК ОтработаноДней,
	|	ЗависимыеНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	ЗависимыеНачисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|	ЗависимыеНачисления.ОтработаноЧасовПоПятидневке КАК ОтработаноЧасовПоПятидневке,
	|	ЗависимыеНачисления.НормаДней КАК НормаДней,
	|	ЗависимыеНачисления.НормаЧасов КАК НормаЧасов,
	|	ЗависимыеНачисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|	ЗависимыеНачисления.НормаЧасовПоПятидневке КАК НормаЧасовПоПятидневке
	|ПОМЕСТИТЬ ВТ_ЗависимыеНачисления
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			(Сотрудник, ПериодДействия) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОсновныеНачисления.Сотрудник,
	|						ОсновныеНачисления.ПериодДействия
	|					ИЗ
	|						ВТ_ОсновныеНачисления КАК ОсновныеНачисления)
	|				И (НЕ ВидРасчета В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ОсновныеНачисления.ВидРасчета
	|						ИЗ
	|							ВТ_ОсновныеНачисления КАК ОсновныеНачисления))) КАК ЗависимыеНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗависимыеНачисления.Сотрудник КАК Сотрудник,
	|	ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.Сторнировать > 0
	|			ТОГДА ЗависимыеНачисления.ПериодДействияНачало
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействияНачалоНеСторно
	|	КОНЕЦ КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.Сторнировать > 0
	|			ТОГДА ЗависимыеНачисления.ПериодДействияКонец
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействияКонецНеСторно
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ЗависимыеНачисления.Сторнировать,
	|	ЗависимыеНачисления.Начислить КАК Начислить,
	|	ЗависимыеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|	ЗависимыеНачисления.ПериодРегистрацииЗависимогоНачисления,
	|	ЗависимыеНачисления.ПериодДействия,
	|	ЗависимыеНачисления.БазовыйПериодНачало,
	|	ЗависимыеНачисления.БазовыйПериодКонец,
	|	ЗависимыеНачисления.Сторно,
	|	ЗависимыеНачисления.ФизЛицо,
	|	ЗависимыеНачисления.Организация,
	|	ЗависимыеНачисления.ГрафикРаботы,
	|	ЗависимыеНачисления.ГрафикРаботыНорма,
	|	ЗависимыеНачисления.ВидУчетаВремени,
	|	ЗависимыеНачисления.Показатель1,
	|	ЗависимыеНачисления.Показатель2,
	|	ЗависимыеНачисления.Показатель3,
	|	ЗависимыеНачисления.Показатель4,
	|	ЗависимыеНачисления.Показатель5,
	|	ЗависимыеНачисления.Показатель6,
	|	ЗависимыеНачисления.ПодразделениеОрганизации,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ЗависимыеНачисления.ДатаНачалаСобытия,
	|	ЗависимыеНачисления.ОбособленноеПодразделение,
	|	ЗависимыеНачисления.Авторасчет,
	|	ЗависимыеНачисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ЗависимыеНачисления.Результат,
	|	ЗависимыеНачисления.ОплаченоДнейЧасов,
	|	ЗависимыеНачисления.ОтработаноДней,
	|	ЗависимыеНачисления.ОтработаноЧасов,
	|	ЗависимыеНачисления.ОтработаноДнейПоПятидневке,
	|	ЗависимыеНачисления.ОтработаноЧасовПоПятидневке,
	|	ЗависимыеНачисления.НормаДней,
	|	ЗависимыеНачисления.НормаЧасов,
	|	ЗависимыеНачисления.НормаДнейПоПятидневке,
	|	ЗависимыеНачисления.НормаЧасовПоПятидневке
	|ПОМЕСТИТЬ ВТ_Начисления
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|		ЗависимыеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|		ЗависимыеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.ПериодДействияНачало
	|				ТОГДА ЗависимыеНачисления.ПериодДействияНачало
	|			ИНАЧЕ ОсновныеНачисления.ПериодДействияНачало
	|		КОНЕЦ КАК ПериодДействияНачалоНеСторно,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.ПериодДействияКонец
	|				ТОГДА ЗависимыеНачисления.ПериодДействияКонец
	|			ИНАЧЕ ОсновныеНачисления.ПериодДействияКонец
	|		КОНЕЦ КАК ПериодДействияКонецНеСторно,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.Сторно
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Сторнировать,
	|		ВЫБОР
	|			КОГДА (НЕ ОсновныеНачисления.Сторно)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Начислить,
	|		ОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|		ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
	|		ЗависимыеНачисления.ПериодРегистрации КАК ПериодРегистрацииЗависимогоНачисления,
	|		ЗависимыеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|		ЗависимыеНачисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|		ЗависимыеНачисления.Сторно КАК Сторно,
	|		ЗависимыеНачисления.ФизЛицо КАК ФизЛицо,
	|		ЗависимыеНачисления.Организация КАК Организация,
	|		ЗависимыеНачисления.ГрафикРаботы КАК ГрафикРаботы,
	|		ЗависимыеНачисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
	|		ЗависимыеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|		ЗависимыеНачисления.Показатель1 КАК Показатель1,
	|		ЗависимыеНачисления.Показатель2 КАК Показатель2,
	|		ЗависимыеНачисления.Показатель3 КАК Показатель3,
	|		ЗависимыеНачисления.Показатель4 КАК Показатель4,
	|		ЗависимыеНачисления.Показатель5 КАК Показатель5,
	|		ЗависимыеНачисления.Показатель6 КАК Показатель6,
	|		ЗависимыеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|		ЗависимыеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|		ЗависимыеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		ЗависимыеНачисления.Авторасчет КАК Авторасчет,
	|		ЗависимыеНачисления.Регистратор КАК СторнируемыйДокумент,
	|		ЗависимыеНачисления.Результат КАК Результат,
	|		ЗависимыеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|		ЗависимыеНачисления.ОтработаноДней КАК ОтработаноДней,
	|		ЗависимыеНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|		ЗависимыеНачисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|		ЗависимыеНачисления.ОтработаноЧасовПоПятидневке КАК ОтработаноЧасовПоПятидневке,
	|		ЗависимыеНачисления.НормаДней КАК НормаДней,
	|		ЗависимыеНачисления.НормаЧасов КАК НормаЧасов,
	|		ЗависимыеНачисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|		ЗависимыеНачисления.НормаЧасовПоПятидневке КАК НормаЧасовПоПятидневке
	|	ИЗ
	|		ВТ_ОсновныеНачисления КАК ОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗависимыеНачисления КАК ЗависимыеНачисления
	|			ПО ОсновныеНачисления.Сотрудник = ЗависимыеНачисления.Сотрудник
	|				И ОсновныеНачисления.ПериодДействия = ЗависимыеНачисления.ПериодДействия
	|				И ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.ПериодДействияКонец
	|				И ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.ПериодДействияНачало
	|				И (ЗависимыеНачисления.ПериодРегистрации < ОсновныеНачисления.ПериодРегистрации)
	|				И ((НЕ ЗависимыеНачисления.Сторно))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК Ведущие
	|			ПО (Ведущие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Ведущие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК Вытесняющие
	|			ПО (Вытесняющие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Вытесняющие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|	ГДЕ
	|		((НЕ Ведущие.ВидРасчета ЕСТЬ NULL )
	|				ИЛИ (НЕ Вытесняющие.ВидРасчета ЕСТЬ NULL ))) КАК ЗависимыеНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодРегистрации,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	СторнируемыйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|	ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.Сторнировать,
	|	ОсновныеНачисления.Начислить КАК Начислить,
	|	ОсновныеНачисления.ПериодРегистрации,
	|	ОсновныеНачисления.ПериодДействия,
	|	ОсновныеНачисления.БазовыйПериодНачало,
	|	ОсновныеНачисления.БазовыйПериодКонец,
	|	ОсновныеНачисления.Сторно,
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ГрафикРаботы,
	|	ОсновныеНачисления.ГрафикРаботыНорма,
	|	ОсновныеНачисления.ВидУчетаВремени,
	|	ОсновныеНачисления.Показатель1,
	|	ОсновныеНачисления.Показатель2,
	|	ОсновныеНачисления.Показатель3,
	|	ОсновныеНачисления.Показатель4,
	|	ОсновныеНачисления.Показатель5,
	|	ОсновныеНачисления.Показатель6,
	|	ОсновныеНачисления.ПодразделениеОрганизации,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ОсновныеНачисления.ДатаНачалаСобытия,
	|	ОсновныеНачисления.ОбособленноеПодразделение,
	|	ОсновныеНачисления.Авторасчет,
	|	ОсновныеНачисления.СторнируемыйДокумент,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Результат,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОплаченоДнейЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноДней,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноДнейПоПятидневке,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноЧасовПоПятидневке,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаДней,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаДнейПоПятидневке,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаЧасовПоПятидневке
	|ИЗ
	|	ВТ_Начисления КАК ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
	|		ПО ОсновныеНачисления.Сотрудник = СторноНачисления.Сотрудник
	|			И ОсновныеНачисления.ВидРасчета = СторноНачисления.ВидРасчета
	|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
	|			И (СторноНачисления.ПериодДействияКонец МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
	|			И (СторноНачисления.ПериодРегистрации > ОсновныеНачисления.ПериодРегистрацииЗависимогоНачисления)
	|			И (СторноНачисления.ПериодРегистрации <= ОсновныеНачисления.ПериодРегистрации)
	|			И (СторноНачисления.СторнируемыйДокумент = ОсновныеНачисления.СторнируемыйДокумент)
	|			И (ОсновныеНачисления.Сторнировать > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.ВидРасчета,
	|	ОсновныеНачисления.ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.ПериодРегистрации,
	|	ОсновныеНачисления.ПериодДействия,
	|	ОсновныеНачисления.БазовыйПериодНачало,
	|	ОсновныеНачисления.БазовыйПериодКонец,
	|	ОсновныеНачисления.Сторно,
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ГрафикРаботы,
	|	ОсновныеНачисления.ГрафикРаботыНорма,
	|	ОсновныеНачисления.ВидУчетаВремени,
	|	ОсновныеНачисления.ПодразделениеОрганизации,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ОсновныеНачисления.ДатаНачалаСобытия,
	|	ОсновныеНачисления.ОбособленноеПодразделение,
	|	ОсновныеНачисления.Авторасчет,
	|	ОсновныеНачисления.СторнируемыйДокумент,
	|	ОсновныеНачисления.Сторнировать,
	|	ОсновныеНачисления.Начислить,
	|	ОсновныеНачисления.Показатель1,
	|	ОсновныеНачисления.Показатель2,
	|	ОсновныеНачисления.Показатель3,
	|	ОсновныеНачисления.Показатель4,
	|	ОсновныеНачисления.Показатель5,
	|	ОсновныеНачисления.Показатель6,
	|	ОсновныеНачисления.Результат,
	|	ОсновныеНачисления.НормаДней,
	|	ОсновныеНачисления.НормаЧасов,
	|	ОсновныеНачисления.НормаДнейПоПятидневке,
	|	ОсновныеНачисления.ОтработаноДней,
	|	ОсновныеНачисления.ОтработаноЧасов,
	|	ОсновныеНачисления.ОтработаноДнейПоПятидневке,
	|	ОсновныеНачисления.ОплаченоДнейЧасов,
	|	ОсновныеНачисления.ОтработаноЧасовПоПятидневке,
	|	ОсновныеНачисления.НормаЧасовПоПятидневке
	|
	|ИМЕЮЩИЕ
	|	(ВЫБОР
	|				КОГДА ОсновныеНачисления.Сторнировать > 0
	|					ТОГДА -ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|			И ОсновныеНачисления.Сторнировать > 0
	|		ИЛИ ОсновныеНачисления.Начислить > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начислить УБЫВ,
	|	ВидРасчета,
	|	ПериодДействияНачало
	|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции // ПолучитьТаблицуЗависимыхНачисленийОсновные()

// Функция получает по таблице начислений таблицу зависимых начислений
//
// Параметры
//  ТаблицаНачислений  – <Таблица значений> – таблица начислений по которым необходимо собрать зависимые начисления
//  
// Возвращаемое заначение - – <Таблица значений>
Функция ПолучитьТаблицуЗависимыхНачисленийДополнительные(ТаблицаНачислений) Экспорт

	Если ТаблицаНачислений.Количество() = 0 Тогда
		Возврат ТаблицаНачислений;
	КонецЕсли;	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	|	ТаблицаНачислений.ВидРасчета КАК ВидРасчета,
	|	ТаблицаНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаНачислений.ПериодДействияКонец КАК ПериодДействияКонец
	|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодРегистрации,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопНачисления.Сотрудник,
	|	ДопНачисления.ВидРасчета,
	|	ДопНачисления.ПериодРегистрации,
	|	ДопНачисления.БазовыйПериодНачало,
	|	ДопНачисления.БазовыйПериодКонец,
	|	ДопНачисления.Сторно,
	|	ДопНачисления.ФизЛицо,
	|	ДопНачисления.Организация,
	|	ДопНачисления.ГрафикРаботы,
	|	ДопНачисления.ВидУчетаВремени,
	|	ДопНачисления.Показатель1,
	|	ДопНачисления.Показатель2,
	|	ДопНачисления.Показатель3,
	|	ДопНачисления.Показатель4,
	|	ДопНачисления.Показатель5,
	|	ДопНачисления.Показатель6,
	|	ДопНачисления.ПодразделениеОрганизации,
	|	ДопНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДопНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДопНачисления.ДатаНачалаСобытия,
	|	ДопНачисления.ОбособленноеПодразделение,
	|	ДопНачисления.ЧислоМесяцев,
	|	ДопНачисления.СторнируемыйДокумент,
	|	СУММА(ДопНачисления.Результат) КАК Результат
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|		ОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|		ЗависимыеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|		ЗависимыеНачисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|		ЗависимыеНачисления.Сторно КАК Сторно,
	|		ЗависимыеНачисления.ФизЛицо КАК ФизЛицо,
	|		ЗависимыеНачисления.Организация КАК Организация,
	|		ЗависимыеНачисления.ГрафикРаботы КАК ГрафикРаботы,
	|		ЗависимыеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|		ЗависимыеНачисления.Показатель1 КАК Показатель1,
	|		ЗависимыеНачисления.Показатель2 КАК Показатель2,
	|		ЗависимыеНачисления.Показатель3 КАК Показатель3,
	|		ЗависимыеНачисления.Показатель4 КАК Показатель4,
	|		ЗависимыеНачисления.Показатель5 КАК Показатель5,
	|		ЗависимыеНачисления.Показатель6 КАК Показатель6,
	|		ЗависимыеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|		ЗависимыеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|		ЗависимыеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		ЗависимыеНачисления.ЧислоМесяцев КАК ЧислоМесяцев,
	|		ЗависимыеНачисления.Регистратор КАК СторнируемыйДокумент,
	|		-ЗависимыеНачисления.Результат КАК Результат
	|	ИЗ
	|		ВТ_ОсновныеНачисления КАК ОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ЗависимыеНачисления
	|			ПО ОсновныеНачисления.Сотрудник = ЗависимыеНачисления.Сотрудник
	|				И (НАЧАЛОПЕРИОДА(ЗависимыеНачисления.ПериодРегистрации, МЕСЯЦ) < ОсновныеНачисления.ПериодРегистрации)
	|				И ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.БазовыйПериодКонец
	|				И ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.БазовыйПериодНачало
	|				И ((НЕ ЗависимыеНачисления.Сторно))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК Ведущие
	|			ПО (Ведущие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Ведущие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|	ГДЕ
	|		(НЕ Ведущие.ВидРасчета ЕСТЬ NULL )) КАК ДопНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДопНачисления.Сотрудник,
	|	ДопНачисления.ВидРасчета,
	|	ДопНачисления.ПериодРегистрации,
	|	ДопНачисления.БазовыйПериодНачало,
	|	ДопНачисления.БазовыйПериодКонец,
	|	ДопНачисления.Сторно,
	|	ДопНачисления.ФизЛицо,
	|	ДопНачисления.Организация,
	|	ДопНачисления.ГрафикРаботы,
	|	ДопНачисления.ВидУчетаВремени,
	|	ДопНачисления.ПодразделениеОрганизации,
	|	ДопНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДопНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДопНачисления.ДатаНачалаСобытия,
	|	ДопНачисления.ОбособленноеПодразделение,
	|	ДопНачисления.СторнируемыйДокумент,
	|	ДопНачисления.Показатель1,
	|	ДопНачисления.Показатель2,
	|	ДопНачисления.Показатель3,
	|	ДопНачисления.Показатель4,
	|	ДопНачисления.Показатель5,
	|	ДопНачисления.Показатель6,
	|	ДопНачисления.ЧислоМесяцев";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуЗависимыхНачисленийДополнительные()

// Удаляем записи перерасчетов как по самому документу, так и по исходному документу,
// если переданный документ является исправлением
//
// Параметры
//  ДокументСсылка - ссылка на документ, для которого требуется удалить записи таблиц перерасчетов
//  
Процедура УдалитьСведенияОПерерасчетеДокумента(ДокументСсылка, ТолькоПоИсправленнымДокументам = Ложь) Экспорт
	
	ПерерасчетыПоДокументам = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	ДопПерерасчетыПоДокументам = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
	ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	СредПерерасчетыПоДокументам = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	МассивИсправленныхДокументов = Новый Массив;
	ТипРегистратора = ТипЗнч(ДокументСсылка);
	Если ТипРегистратора <> Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
		
		// проверим, является ли переданный документ чьим-нибудь исправлением
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент КАК ОбъектПерерасчета
		|ИЗ
		|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.Ссылка = &Исправление";
		Запрос.УстановитьПараметр("Исправление", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
		
		Если ЗначениеЗаполнено(ОбъектПерерасчета) Тогда
			
			ПерерасчетыФизлицПоДокументам = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			ДопПерерасчетыФизлицПоДокументам = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
			ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			СредПерерасчетыФизлицПоДокументам = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			// выберем исправленных физлиц - соответствующие им записи перерасчетов надо будет также удалить
			ЗапросФизлиц = Новый Запрос;
			ЗапросФизлиц.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо
			|ИЗ
			|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
			|	И ДополнительныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент = &ИсходныйДокумент
			|	И ДополнительныеНачисленияРаботниковОрганизаций.Сторно
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
			|ГДЕ
			|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
			|	И ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент = &ИсходныйДокумент
			|	И ОсновныеНачисленияРаботниковОрганизаций.Сторно
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасчетСреднегоЗаработка.ФизЛицо
			|ИЗ
			|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|ГДЕ
			|	РасчетСреднегоЗаработка.Регистратор = &Регистратор";
			ЗапросФизлиц.УстановитьПараметр("Регистратор", ДокументСсылка);
			ЗапросФизлиц.УстановитьПараметр("ИсходныйДокумент", ОбъектПерерасчета);
			МассивФизлиц = ЗапросФизлиц.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
			
			// выявим все исправленные документы
			Пока ЗначениеЗаполнено(ОбъектПерерасчета) Цикл
				
				МассивИсправленныхДокументов.Добавить(ОбъектПерерасчета);
				Запрос.УстановитьПараметр("Исправление", ОбъектПерерасчета);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			ПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из ПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			ПерерасчетыФизлицПоДокументам.Записать();
			ПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
		
	КонецЕсли;
	Если ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			ДопПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ДопПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из ДопПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ДопПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			ДопПерерасчетыФизлицПоДокументам.Записать();
			ДопПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
	КонецЕсли;
	Если СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			СредПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			СредПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из СредПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СредПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			СредПерерасчетыФизлицПоДокументам.Записать();
			СредПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Удаляем записи перезаполнений как по самому документу, так и по исходному документу,
// если переданный документ является исправлением
//
// Параметры
//  ДокументСсылка - ссылка на документ, для которого требуется удалить записи рег-ра перезаполнений
//  
Процедура УдалитьСведенияОПерезаполненииДокумента(ДокументСсылка, СотрудникиДокумента = Неопределено, ТолькоПоИсправленнымДокументам = Ложь) Экспорт
	
	НаборПерезаполнения = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
	НаборПерезаполнения.Отбор.ОбъектЗаполнения.Использование = Истина;
	НаборПерезаполнения.Отбор.ОбъектЗаполнения.ВидСравнения = ВидСравнения.Равно;
	
	Если НаборПерезаполнения.Отбор.ОбъектЗаполнения.ТипЗначения.СодержитТип(ТипЗнч(ДокументСсылка)) Тогда
		
		НаборСотрудниковПерезаполнения = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
		НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Использование = Истина;
		НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.ВидСравнения = ВидСравнения.Равно;
		
		МассивИсправленныхДокументов = Новый Массив;
		
		
		ДополнительноеУсловие = ?(ДокументСсылка.Метаданные().Реквизиты.ПерерассчитываемыйДокумент.Тип.СодержитТип(Тип("ДокументСсылка.ПереносДанных")), " И (НЕ ДокументыИсправления.ПерерассчитываемыйДокумент ССЫЛКА Документ.ПереносДанных)", "");
		
		// проверим, является ли переданный документ чьим-нибудь исправлением
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент КАК ОбъектПерерасчета
		|ИЗ
		|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.Ссылка = &Исправление" + ДополнительноеУсловие + "";
		Запрос.УстановитьПараметр("Исправление", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
		
		Если ЗначениеЗаполнено(ОбъектПерерасчета) Тогда
			
			// выберем исправленных сотрудников - соответствующие им записи перерасчетов надо будет также удалить
			ЗапросСотрудников = Новый Запрос;
			ЗапросСотрудников.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаполнениеПлановыхНачислений.Сотрудник
			|ИЗ
			|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
			|ГДЕ
			|	ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ОбъектЗаполнения
			|	И (&ПоВсемСотрудникам
			|			ИЛИ ЗаполнениеПлановыхНачислений.Сотрудник В (&Сотрудники))";
			ЗапросСотрудников.УстановитьПараметр("ОбъектЗаполнения", ДокументСсылка);
			ЗапросСотрудников.УстановитьПараметр("Сотрудники", СотрудникиДокумента);
			ЗапросСотрудников.УстановитьПараметр("ПоВсемСотрудникам", СотрудникиДокумента = Неопределено);
			МассивСотрудников = ЗапросСотрудников.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
			
			// выявим все исправленные документы
			Пока ЗначениеЗаполнено(ОбъектПерерасчета) Цикл
				
				МассивИсправленныхДокументов.Добавить(ОбъектПерерасчета);
				Запрос.УстановитьПараметр("Исправление", ОбъектПерерасчета);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ТолькоПоИсправленнымДокументам Тогда 
			Если СотрудникиДокумента = Неопределено Тогда // удалим все записи перезаполнений по самому документу
				НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборПерезаполнения.Записать(Истина);
			Иначе // удалим записи перезаполнений по переданным сотрудникам
				НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборПерезаполнения.Прочитать();
				Для каждого Запись Из НаборПерезаполнения Цикл
					Если СотрудникиДокумента.Найти(Запись.Сотрудник) = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НаборСотрудниковПерезаполнения.Добавить(),Запись);
					КонецЕсли;
				КонецЦикла;
				НаборСотрудниковПерезаполнения.Записать(Истина);
				НаборСотрудниковПерезаполнения.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = Значение;
			НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Значение = Значение;
			НаборПерезаполнения.Прочитать();
			Для каждого Запись Из НаборПерезаполнения Цикл
				Если МассивСотрудников.Найти(Запись.Сотрудник) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НаборСотрудниковПерезаполнения.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			НаборСотрудниковПерезаполнения.Записать(Истина);
			НаборСотрудниковПерезаполнения.Очистить();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЧисло(Слово)
	
	Цифры = "1234567890";
	
	Для НомСимвола = 1 По СтрДлина(Слово) Цикл
		
		Если Найти(Цифры, Сред(Слово, НомСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина
	
КонецФункции

Функция ПолучитьМассивРазделителей() Экспорт
	
	МассивРазделителей = Новый Массив;
	
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	Возврат МассивРазделителей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формульные расчеты

Функция ПолучитьТекстОценитьПо(ОцениваемыйПоказатель, Шкала, ПустаяШкала = Ложь)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеС, 0) КАК ЗначениеС,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеПо, 0) КАК ЗначениеПо,
	|	СоставШкалОценкиПоказателейРасчета.Размер
	|ИЗ
	|	РегистрСведений.СоставШкалОценкиПоказателейРасчета КАК СоставШкалОценкиПоказателейРасчета
	|ГДЕ
	|	СоставШкалОценкиПоказателейРасчета.ШкалаОценкиПоказателя = &ШкалаОценкиПоказателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоставШкалОценкиПоказателейРасчета.НомерСтрокиШкалы";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ШкалаОценкиПоказателя", Шкала);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОцениваемыйПоказатель = "ИсходныеДанные.Показатель"+Строка(ОцениваемыйПоказатель);
	Текст = "";
	
	Если Выборка.Количество() = 0 Тогда
		ПустаяШкала = Истина;
		Возврат Текст;
	КонецЕсли;
	
	ПроцентнаяШкала = Шкала.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная;
	
	КоличествоОткрытыхСкобок = 0;
	Пока Выборка.Следующий() Цикл
		
		Если КоличествоОткрытыхСкобок > 0 Тогда
			Текст = Текст + " , ";
		КонецЕсли;
		Текст = Текст + "?(" + ОцениваемыйПоказатель+ " >" + Формат(Выборка.ЗначениеС,"ЧРД=.; ЧН=0; ЧГ=0") + " И " + ОцениваемыйПоказатель + " <="  + Формат(Выборка.ЗначениеПо,"ЧРД=.; ЧН=0; ЧГ=0") + " ," + Формат(Выборка.Размер / ?(ПроцентнаяШкала, 100, 1),"ЧРД=.; ЧН=0; ЧГ=0");
		КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок + 1;
		
	КонецЦикла;
	
	КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок - 1;
	Если КоличествоОткрытыхСкобок >= 0 И Текст <> "" Тогда
		Текст = Текст + ", 0";
	КонецЕсли;
	Пока КоличествоОткрытыхСкобок > 0 Цикл
		Текст = Текст + ")";
		КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок - 1;
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции //ПолучитьТекстОценитьПо

Функция ПроверкаИФормированиеФормулыРасчета(Отказ, Показатели, МассивРазделителей, ОператорыИФункцииОднойСтрокой, ОператорыИФункции, мПеременные, ОбработкаКомментариев, ТекстФормулы, мФормулаРасчета, мФормулаРасчетаПредставление) Экспорт
	
	Если Найти(ТекстФормулы, ";") <> 0 Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("В формуле не допустимо использование символа "";""", Отказ);
		Отказ = Истина;
	КонецЕсли;
	
	Показатели.Очистить();
	
	// установим начальные значения
	НовыйТекст								= "";
	ДлинаСтроки								= СтрДлина(ТекстФормулы);
	ДлинаСтрокиБезПробелов					= СтрДлина(СокрП(ТекстФормулы));
	Слово									= "";
	СловоСобрано							= Ложь;
	КоличествоПоказателей					= 0;
	КоличествоНеПредопределенныхПоказателей	= 0;
	мФормулаРасчета							= "";
	мФормулаРасчетаПредставление			= "";
	
	// переменные для проверки правельности ввода показателей
	БылоОценитьПО			= Ложь;
	БылоОценитьПОВЦикле		= Ложь;
	ОткрытыхСкобок			= 0;
	ЗакрытыхСкобок			= 0;
	КонечествоПарамОценитьПО= 0;
	ПервыйСимвОценитьПО		= 1;
	ПоследийСимвОценитьПО	= 1;
	НомерНеШкальногоПоказателя= 0;
	НеШкальныеПоказатели	= Новый СписокЗначений;
	
	СсылкаПоказатели		= Неопределено;
	
	// разбор слов
	Для НомерАнализируемогоСимвола = 1 По ДлинаСтроки Цикл
		
		Символ = Сред(ТекстФормулы, НомерАнализируемогоСимвола, 1);
		
		Если  МассивРазделителей.Найти(Символ) <> Неопределено Или Найти(ОператорыИФункцииОднойСтрокой, Символ) Тогда
			
			СловоСобрано = Истина;
		Иначе
			
			// символ не разделитель, можно его добавить к слову
			Слово = Слово + Символ;
			Если ДлинаСтроки = НомерАнализируемогоСимвола Тогда 
				СловоСобрано = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СловоСобрано Тогда
			
			НомерПоказателя = 0;
			СловоВРег = ВРег(СокрЛ(Слово));
			Если Найти(ОператорыИФункции, СловоВРег) <> 0 Или ЭтоЧисло(Слово) Тогда
				
				Если СловоВРег = "ОЦЕНИТЬПО" Тогда
					Слово					= "ОценитьПо";
					БылоОценитьПО			= Истина;
					БылоОценитьПОВЦикле		= Истина;
					ПервыйСимвОценитьПО		= СтрДлина(НовыйТекст);
					ПервыйСимвОценитьПОФорм	= СтрДлина(мФормулаРасчета);
				КонецЕсли;
				
				// функции и числа записываем 
				НовыйТекст = НовыйТекст + Слово;
				мФормулаРасчета					= мФормулаРасчета + Слово;
				мФормулаРасчетаПредставление	= мФормулаРасчетаПредставление + Слово;
				
				
			ИначеЕсли мПеременные.Получить(Слово) <> Неопределено Тогда
				
				СсылкаПоказатели = Справочники.ПоказателиСхемМотивации.НайтиПоРеквизиту("Идентификатор",Слово);
				Если СсылкаПоказатели = Справочники.ПоказателиСхемМотивации.ПустаяСсылка() Тогда
					Отказ = Истина;
					ОбработкаКомментариев.ДобавитьСообщение("Не найден показатель с идентификатором """ + Слово+ """", Перечисления.ВидыСообщений.Ошибка,);
					Прервать;
				КонецЕсли;
				
				// в идентификаторы показателей подставляем случайные числа, чтобы Вычислить() не упала при делении на нули
				// или при операциях с разными типами данных 				
				НовыйТекст				= НовыйТекст + СтрЗаменить(Строка(мПеременные.Получить(Слово)),",",".");
				
				Если СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная И СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
					НеШкальныйПоказательСсылка = НеШкальныеПоказатели.НайтиПоЗначению(СсылкаПоказатели);
					Если НеШкальныйПоказательСсылка = Неопределено Тогда
						НеШкальныеПоказатели.Добавить(СсылкаПоказатели);
						НомерНеШкальногоПоказателя = НеШкальныеПоказатели.Количество();
					Иначе
						НомерНеШкальногоПоказателя = Число(НеШкальныеПоказатели.Индекс(НеШкальныйПоказательСсылка) + 1);
					КонецЕсли;
					
				КонецЕсли;
				
				ПоказательИзСписка = Показатели.НайтиПоЗначению(СсылкаПоказатели);
				Если ПоказательИзСписка = Неопределено Тогда
					КоличествоПоказателей	= КоличествоПоказателей + 1;	
					Показатели.Добавить(СсылкаПоказатели);
					мФормулаРасчета					= мФормулаРасчета + "ИсходныеДанные.Показатель"+КоличествоПоказателей;
					мФормулаРасчетаПредставление	= мФормулаРасчетаПредставление + "ИсходныеДанные.Показатель"+КоличествоПоказателей;
					
					Если Не СсылкаПоказатели.Предопределенный
						И (СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная и 
						СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая И СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) Тогда
						КоличествоНеПредопределенныхПоказателей = КоличествоНеПредопределенныхПоказателей + 1;
					КонецЕсли;
					
				Иначе
					НомерП = Число(Показатели.Индекс(ПоказательИзСписка) + 1);
					мФормулаРасчета					= мФормулаРасчета + "ИсходныеДанные.Показатель"+НомерП;
					мФормулаРасчетаПредставление	= мФормулаРасчетаПредставление + "ИсходныеДанные.Показатель"+НомерП;
				КонецЕсли;
				
				НомерПоказателя			= КоличествоПоказателей;
				
				// проверим правильность ввода показателей
				Если КоличествоНеПредопределенныхПоказателей > 6 Тогда
					Отказ = Истина;
					ОбработкаКомментариев.ДобавитьСообщение("Количество не предопределенных показателей не может быть больше 6!", Перечисления.ВидыСообщений.Ошибка,);
					Прервать;
				КонецЕсли;
				
			Иначе
				// а это уже что-то непонятное, такие вещи вводить мы не договаривались ...
				Отказ = Истина;
				ОбработкаКомментариев.ДобавитьСообщение("Неопознанный показатель, оператор или функция: """ + Слово+ """", Перечисления.ВидыСообщений.Ошибка,);
				Прервать;
			КонецЕсли;
			
			Если МассивРазделителей.Найти(Символ) <> Неопределено или  Найти(ОператорыИФункцииОднойСтрокой, Символ) <> 0 Тогда	
				
				Если БылоОценитьПОВЦикле Тогда
					Если Символ = "(" Тогда
						ОткрытыхСкобок = ОткрытыхСкобок + 1;
					ИначеЕсли Символ = ")" Тогда
						ЗакрытыхСкобок = ЗакрытыхСкобок + 1;
						Если ЗакрытыхСкобок = ОткрытыхСкобок Тогда			// Проверим, является ли показатель шкалой
							ПоследийСимвОценитьПО = НомерАнализируемогоСимвола+19;
							Если СсылкаПоказатели <> Неопределено Тогда
								Если СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная И
									СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
									Отказ = Истина;
									ОбработкаКомментариев.ДобавитьСообщение("Показатель №" + КоличествоПоказателей +" должен быть шкалой оценки!", Перечисления.ВидыСообщений.Ошибка,);
									Прервать;
								ИначеЕсли Показатели.Количество() > 1 Тогда
									ПоказательШкала = СсылкаПоказатели;
									ПустаяШкала = Ложь;
									ТекстОценитьПо = ПолучитьТекстОценитьПо(НомерНеШкальногоПоказателя, ПоказательШкала, ПустаяШкала);
									Если ПустаяШкала Тогда
										ОбработкаКомментариев.ДобавитьСообщение("В качестве показателя №" + НомерПоказателя +" выбрана пустая оценочная шкала", Перечисления.ВидыСообщений.Ошибка,);
										Отказ = Истина;
									КонецЕсли;
									ЛеваяЧастьФормулы = Лев(мФормулаРасчета, ПервыйСимвОценитьПОФорм);
									мФормулаРасчета = ЛеваяЧастьФормулы + ТекстОценитьПо;
									НовыйТекст = Лев(НовыйТекст, ПервыйСимвОценитьПО) + СтрЗаменить(ТекстОценитьПо, "ИсходныеДанные.Показатель","");
								КонецЕсли;
								Если ДлинаСтрокиБезПробелов <> НомерАнализируемогоСимвола Тогда
									БылоОценитьПОВЦикле			= Ложь;
								КонецЕсли;
								ОткрытыхСкобок			= 0;
								ЗакрытыхСкобок			= 0;
								КонечествоПарамОценитьПО= 0;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли Символ = "," Тогда
						КонечествоПарамОценитьПО = КонечествоПарамОценитьПО + 1;
						Если КонечествоПарамОценитьПО > 1 Тогда
							Отказ = Истина;
							ОбработкаКомментариев.ДобавитьСообщение("Количество параметров в функции ОценитьПо() не должно быть больше двух!", Перечисления.ВидыСообщений.Ошибка,);
							Прервать;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли НомерПоказателя > 0 Тогда
					Если СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или
						СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
						Отказ = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				НовыйТекст						= НовыйТекст + Символ;
				мФормулаРасчета					= мФормулаРасчета + Символ;
				мФормулаРасчетаПредставление	= мФормулаРасчетаПредставление + Символ;
			КонецЕсли;
			
			// сбросим все флаги
			Слово			= "";
			СловоСобрано	= Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// проверим не является ли последний показатель шкалой оценки 
	Если Не БылоОценитьПО И НовыйТекст <> "" И СсылкаПоказатели <> Неопределено Тогда
		Если СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или
			СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
			Отказ = Истина;
			ОбработкаКомментариев.ДобавитьСообщение("Показатель №" + КоличествоПоказателей +" не может быть шкалой оценки!", Перечисления.ВидыСообщений.Ошибка,);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		// проверка формулы на прочие непредвиденные ошибки
		Если ЗначениеЗаполнено(НовыйТекст) Тогда
			Попытка
				Результат = Вычислить(НовыйТекст);
			Исключение
				Отказ = Истина;
				ОбработкаКомментариев.ДобавитьСообщение("Ошибка в формуле расчета! " + ОписаниеОшибки(), Перечисления.ВидыСообщений.Ошибка,);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	// проверим нужа ли подмена базовых показателей
	ДелатьПодменуПоказателей		= Ложь;
	ЕстьПредопределенные			= Ложь;
	ЕстьНеПредопределенные			= Ложь;
	ЕстьНеПредопределенныеПослеПред	= Ложь;
	СчПоказателей = Показатели.Количество()-1;
	Пока СчПоказателей >= 0 Цикл
		Предопределенный = Показатели[СчПоказателей].Значение.Предопределенный;
		Если ЕстьПредопределенные И Не ЕстьНеПредопределенные Тогда
			ЕстьНеПредопределенныеПослеПред = (ЕстьНеПредопределенныеПослеПред Или Не Предопределенный) И ЕстьПредопределенные;
		ИначеЕсли ЕстьНеПредопределенные И Предопределенный Тогда
			// не все предопределенные показатели находятся в конце, нужно переносить их в конец и проверять не был ли изменён состав показателей
			ДелатьПодменуПоказателей = Истина;
			Прервать;
		КонецЕсли;
		ЕстьПредопределенные = ЕстьПредопределенные Или Предопределенный;
		ЕстьНеПредопределенные	= ЕстьНеПредопределенные Или Не Предопределенный;
		Если ЕстьНеПредопределенныеПослеПред И Предопределенный Тогда
			// не все предопределенные показатели находятся в конце, нужно переносить их в конец и проверять не был ли изменён состав показателей
			ДелатьПодменуПоказателей = Истина;
			Прервать;
		КонецЕсли;
		СчПоказателей = СчПоказателей - 1;
	КонецЦикла;
	
	Если ДелатьПодменуПоказателей Тогда
		// подменим номера базовым показателям
		НомераПредопределенныхПоказателей	= Новый Массив;	
		НомераПоказателей					= Новый Массив;	
		Для Сч = 1 По Показатели.Количество() Цикл	
			СсылкаПоказатели =Показатели[Сч-1].Значение;
			Если СсылкаПоказатели.Предопределенный И (СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная и 
				СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая И СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) Тогда
				НомераПредопределенныхПоказателей.Добавить(Сч);
			Иначе
				НомераПоказателей.Добавить(Сч);
			КонецЕсли;
		КонецЦикла;
		ЗаменяемНаПоказатель		= Показатели.Количество() + 1;
		НомераПоказателейКоличество	= НомераПоказателей.Количество();
		Для Каждого НомерПредопределенногоПоказателя Из НомераПредопределенныхПоказателей Цикл
			Если НомераПоказателейКоличество > 0 Тогда
				
				НомераПоказателей_Минус1 = НомераПоказателей[НомераПоказателейКоличество-1]-1;
				
				Показатель 														= Показатели[НомераПоказателей_Минус1];
				Показатель_1													= Показатели[НомерПредопределенногоПоказателя-1];
				Показатели.Удалить(НомераПоказателей_Минус1);
				Показатели.Вставить(НомераПоказателей_Минус1, Показатель_1.Значение,Показатель_1.Значение);
				Показатели.Удалить(НомерПредопределенногоПоказателя-1);
				Показатели.Вставить(НомерПредопределенногоПоказателя-1, Показатель.Значение, Показатель.Значение);
				
				мФормулаРасчета = СтрЗаменить(мФормулаРасчета, "ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1],"ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель);
				мФормулаРасчета = СтрЗаменить(мФормулаРасчета, "ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя,"ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1]);
				мФормулаРасчета = СтрЗаменить(мФормулаРасчета, "ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель,"ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя);
				
				мФормулаРасчетаПредставление = СтрЗаменить(мФормулаРасчетаПредставление, "ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1],"ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель);
				мФормулаРасчетаПредставление = СтрЗаменить(мФормулаРасчетаПредставление, "ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя,"ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1]);
				мФормулаРасчетаПредставление = СтрЗаменить(мФормулаРасчетаПредставление, "ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель,"ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя);

				НомераПоказателейКоличество = НомераПоказателейКоличество - 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;

	Возврат Отказ;
	
КонецФункции //ПроверкаИФормированиеФормулыРасчета

Функция ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Показатели, Режим, ВыводитьИдентификатор = Ложь) Экспорт
	
	Числа = "0123456789";
	
	
	ОператорыИФункции				=  ".,+,-,/,*,ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,?,=,<,>,<=,>=,ОЦЕНИТЬПО,(,),И,ИЛИ,НЕ,OR,AND,NOT";
	ОператорыИФункцииОднойСтрокой	=  ".,+,-,/,*,?,=,<,>,(,)";
	
	МассивРазделителей = Новый Массив;
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	СловоСобрано		= Ложь;
	НайденПоказатель	= Ложь;
	
	Слово = "";
	
	ДлинаСтроки					= СтрДлина(ФормулаРасчета);
	НовыйHTMLКодФормулыРасчета	= "";
	
	
	// разбор слов
	НомерАнализируемогоСимвола = 1;
	Пока НомерАнализируемогоСимвола <= ДлинаСтроки Цикл
		
		Символ = Сред(ФормулаРасчета, НомерАнализируемогоСимвола, 1);
		
		Если Символ = "." И Слово = "ИсходныеДанные" и Сред(ФормулаРасчета, НомерАнализируемогоСимвола+1, 10) = "Показатель" Тогда
			
			
			НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 10;
			НомерПоказателя = "";
			ШагВнутриЦикла = 0;
			ПродолжитьЦикл = Истина;
			Пока ПродолжитьЦикл Цикл
				
				НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 1;
				СимволДляСравненияСЧислом = Сред(ФормулаРасчета, НомерАнализируемогоСимвола, 1);
				Если Найти(Числа, СимволДляСравненияСЧислом) <> 0 Тогда
					НомерПоказателя = НомерПоказателя + СимволДляСравненияСЧислом;
					ПродолжитьЦикл  = (НомерАнализируемогоСимвола <= ДлинаСтроки);
				Иначе
					ПродолжитьЦикл = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Режим = "Текст" Тогда
				Если Показатели.Количество() >= Число(НомерПоказателя) Тогда
					Если ВыводитьИдентификатор Тогда
						ПоказательДляФормулы = Строка(Показатели[Число(НомерПоказателя) - 1].Показатель.Идентификатор);
					Иначе
						ПоказательДляФормулы = Строка(Показатели[Число(НомерПоказателя) - 1].Показатель);
					КонецЕсли;
				Иначе
					Возврат НовыйHTMLКодФормулыРасчета;
				КонецЕсли;
			Иначе
				Если Показатели.Количество() >= Число(НомерПоказателя) Тогда
					ПоказательДляФормулы = "<FONT color=#0000ff>" + Строка(Показатели[Число(НомерПоказателя) - 1].Показатель)+"</FONT>";
				Иначе
					Возврат НовыйHTMLКодФормулыРасчета;
				КонецЕсли;
			КонецЕсли;
			
			НовыйHTMLКодФормулыРасчета = НовыйHTMLКодФормулыРасчета + ПоказательДляФормулы;
			
			НайденПоказатель = Истина;
			
			Слово = "";
			
		ИначеЕсли  МассивРазделителей.Найти(Символ) <> Неопределено Или Найти(ОператорыИФункцииОднойСтрокой, Символ) Тогда
			
			СловоСобрано = Истина;
			НайденПоказатель = Ложь;
			Слово = Слово + Символ;
		Иначе
			
			// символ не разделитель, можно его добавить к слову
			Слово = Слово + Символ;
			Если ДлинаСтроки = НомерАнализируемогоСимвола Тогда 
				СловоСобрано = Истина;
			КонецЕсли;
			НайденПоказатель = Ложь;
		КонецЕсли;
		
		Если СловоСобрано И Не НайденПоказатель Тогда
			//	ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ИсходныеДанные.Показатель"+Показатель.НомерСтроки, ПоказательДляФормулы);
			НовыйHTMLКодФормулыРасчета = НовыйHTMLКодФормулыРасчета + Слово;
			СловоСобрано = Ложь;
			Слово = "";
		КонецЕсли;
		
		Если НЕ НайденПоказатель Тогда
			НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйHTMLКодФормулыРасчета;
	
КонецФункции //ПолучитьHTLMКодФормулыРасчета

// Формирует текстовую интерпретацию формулы по способу расчета и показателям для отображения
// на экране.
//
// Параметры
//  Объект - ПланВидовРасчетаОбъект для ПВР УправленческиеНачисления или УправленческиеУдержания
//	Режим - "Текст" - формула выводится в виде текста, "HTML" - в виде HTML кода, по умолчанию = "Текст"
// Возвращаемое значение:
//   Строка   – содержит текстовую интерпретацию формулы расчета.
//
Функция ВизуализироватьФормулуРасчета(Объект, Режим = "Текст", ЭтоРегламентированныеУдержания = Ложь) Экспорт

	СпособРасчета = Объект.СпособРасчета;
	
	Если Режим = "HTML" Тогда
		
		
		СтрокаФормулы ="
		|	<HTML><HEAD>
		|	</HEAD>
		|	<BODY vlink=#000 link=#000 scroll=auto rightMargin=0><FONT face=""MS Sans Serif"" size=1>
		|";
		
	КонецЕсли;
	
	ОписаниеСпособаРасчета = ПроведениеРасчетовПереопределяемый.ПолучитьОписаниеДополнительногоСпособа(СпособРасчета, Режим);
	Если ЗначениеЗаполнено(ОписаниеСпособаРасчета) Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ОписаниеСпособаРасчета;
		Иначе
			СтрокаФормулы = СтрокаФормулы + ОписаниеСпособаРасчета
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Или
		СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>Фиксированная сумма</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>Фиксированная сумма</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>, до удержания указанной в документе суммы";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>Фиксированная сумма, до удержания указанной в документе суммы</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Сдельная выработка>";		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>Сдельная выработка</FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<0>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = 0"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Пособие по уходу за ребенком до 3х лет>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Пособие по уходу за ребенком до 3х лет</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ""+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная.Наименование + " * Время в днях"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в днях</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "> * <Время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в часах</FONT>"						
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
		ОписаниеПроцента = ?(ЭтоРегламентированныеУдержания,"<Процент удержаний>","<Процент оплаты>");
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ОписаниеПроцента + " * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>" + ОписаниеПроцента + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Расчетная база</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений Тогда
		ОписаниеПроцента = ?(ЭтоРегламентированныеУдержания,"<Процент удержаний>","<Процент оплаты>");
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ОписаниеПроцента + " * <Доход, облагаемый ЕСН в части Федерального бюджета>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>" + ОписаниеПроцента + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Доход, облагаемый ЕСН в части Федерального бюджета</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент сбора> * <Сумма по исполнительному листу>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Процент сбора</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Сумма по исполнительному листу</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент удержаний> * (<Расчетная база> - <Исчисленный НДФЛ>)"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Процент удержаний</FONT> <FONT color=#FF0000> * </FONT> (<FONT color=#0000ff>Расчетная база</FONT> <FONT color=#FF0000> - </FONT> <FONT color=#0000ff>Исчисленный НДФЛ</FONT>)"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент удержаний> * (<Расчетная база> - <Исчисленный НДФЛ>), до удержания указанной в документе суммы"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff><Процент удержаний></FONT> <FONT color=#FF0000> * </FONT> <FONT color=#FF0000>(</FONT><FONT color=#0000ff>Расчетная база</FONT> <FONT color=#FF0000> - </FONT> <FONT color=#0000ff>Исчисленный НДФЛ</FONT><FONT color=#FF0000>)</FONT>, до удержания указанной в документе суммы"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "> * <Процент доплаты> * <Вечернее время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Процент доплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Вечернее время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "> * <Процент доплаты> * <Ночное время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Процент доплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Ночное время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку 
		Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной (часовой) заработок> * <Время в днях (часах)>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Средний дневной (часовой) заработок</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в днях (часах)</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной заработок> * <Время в календарных днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Средний дневной заработок</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в календарных днях</FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний месячный заработок> * (40% * Количество детей, но не более 100%) / <Число календарных дней в месяце> * <Число календарных дней выплаты пособия>, с учетом минимального и максимального размеров пособия на каждого ребёнка"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Средний месячный заработок</FONT> <FONT color=#FF0000> * (</FONT> 40% <FONT color=#FF0000> * </FONT><FONT color=#0000ff>Количество детей</FONT>, но не более 100% <FONT color=#FF0000>) / </FONT> <FONT color=#0000ff>Число календарных дней в месяце</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Число календарных дней выплаты пособия</FONT> , с учетом минимального и максимального размеров пособия на каждого ребёнка"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной заработок> * <Время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Средний дневной заработок</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в днях</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.Наименование + "> / <Норма времени за месяц в днях> * <Время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.Наименование + "</FONT> <FONT color=#FF0000> / </FONT> <FONT color=#0000ee>Норма времени за месяц в днях</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в днях</FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.Наименование + "> / <Норма времени за месяц в часах> * <Время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.Наименование + "</FONT> <FONT color=#FF0000> / </FONT> <FONT color=#0000ff>Норма времени за месяц в часах</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала дневной тарифной ставки> * <Время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала дневной тарифной ставки</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в днях</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала месячной тарифной ставки>  / <Норма времени за месяц в днях> * <Время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала месячной тарифной ставки</FONT> <FONT color=#FF0000> / </FONT> <FONT color=#0000ff>Норма времени за месяц в днях</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в днях</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала часовой тарифной ставки> * <Время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала часовой тарифной ставки</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала месячной тарифной ставки>  / <Норма времени за месяц в часах> * <Время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала месячной тарифной ставки</FONT> <FONT color=#FF0000> / </FONT> <FONT color=#0000ff>Норма времени за месяц в часах</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала процентов оплаты> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала процентов оплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Расчетная база</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Северный стаж> оценить по <Шкала надбавок> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Северный стаж</FONT> оценить по <FONT color=#0000ff>Шкала надбавок</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Расчетная база</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум(<Средний заработок> - <Начислено>, <0>)";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Максимум</FONT><FONT color=#FF0000>(</FONT><FONT color=#0000ff>Средний заработок</FONT><FONT color=#FF0000> - </FONT><FONT color=#0000ff>Начислено</FONT> <FONT color=#FF0000>,</FONT> 0<FONT color=#FF0000>)</FONT>"		
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум(<Средний заработок, исчисленный по правилам ФСС> - <Начислено>, <0>)";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Максимум</FONT><FONT color=#FF0000>(</FONT><FONT color=#0000ff>Средний заработок, исчисленный по правилам ФСС</FONT><FONT color=#FF0000> - </FONT><FONT color=#0000ff>Начислено</FONT> <FONT color=#FF0000>,</FONT> 0<FONT color=#FF0000>)</FONT>"		
		КонецЕсли;
	ИначеЕсли Объект.ПроизвольнаяФормулаРасчета Тогда
		
		ФормулаРасчета	= Объект.ФормулаРасчетаПредставление;
		
		ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ПроведениеРасчетов.", "");
		
		СимволыДляЗамены = "/=-+*()?<,";
		
		Если Режим = "Текст" Тогда
			
			// заменим подставим вместо ИсходныеДанные.ПоказательN нужные показатели
			СтрокаФормулы = ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Объект.Показатели, Режим);
			
		Иначе
			
			НоваяФормулаРасчета = "";
			Для НомерСимвола = 1 По СтрДлина(ФормулаРасчета) Цикл
				Символ = Сред(ФормулаРасчета,НомерСимвола,1);
				Если Найти(СимволыДляЗамены,Символ) > 0 Тогда
					НоваяФормулаРасчета = НоваяФормулаРасчета + "<FONT color=#FF0000>" + Символ + "</FONT>"; 
				Иначе
					НоваяФормулаРасчета = НоваяФормулаРасчета + Символ;
				КонецЕсли;
			КонецЦикла;	
			
			ФормулаРасчета = НоваяФормулаРасчета;
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " NOT ", "<FONT color=#FF0000> NOT </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " OR ", "<FONT color=#FF0000> OR </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " AND ", "<FONT color=#FF0000> AND </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " И ", "<FONT color=#FF0000> И </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " ИЛИ ", "<FONT color=#FF0000> ИЛИ </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " НЕ ", "<FONT color=#FF0000> НЕ </FONT>"); 
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " not ", "<FONT color=#FF0000> not </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " or ", "<FONT color=#FF0000> or </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " and ", "<FONT color=#FF0000> and </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " и ", "<FONT color=#FF0000> и </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " или ", "<FONT color=#FF0000> или </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " не ", "<FONT color=#FF0000> не </FONT>");
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Not ", "<FONT color=#FF0000> Not </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Or ", "<FONT color=#FF0000> Or </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " And ", "<FONT color=#FF0000> And </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Или ", "<FONT color=#FF0000> Или </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Не ", "<FONT color=#FF0000> Не </FONT>");		
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Цел", "<FONT color=#0000ff>Цел</FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Окр", "<FONT color=#0000ff>Окр</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Макс", "<FONT color=#0000ff>Макс</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Мин", "<FONT color=#0000ff>Мин</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "ОценитьПо", "<FONT color=#0000ff>ОценитьПо</FONT>");		
			
			СтрокаФормулы = СтрокаФормулы + "Результат = " +  ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Объект.Показатели, Режим);
			
		КонецЕсли;
	Иначе
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ""	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|</font></HTML>"
		КонецЕсли;
	КонецЕсли;
	
	Если Режим = "HTML" Тогда
				
		СтрокаФормулы = СтрокаФормулы + "
		|</font></HTML>"

	КонецЕсли;
	
    Возврат СтрокаФормулы;	
	
КонецФункции // ВизуализироватьФормулуРасчета()

////////////////////////////////////////////////////////////////////////////////
// Законодательство

// Возвращает список кодов дохода, не требующих ни ввода вычетов, ни исчисления налога по ставкам 9% или 35%
//
// Параметры
//  нет
//
// Возвращаемое значение:
//  список значений, содержащий ссылки на предопределенные эл-ты спр-ка ДоходыНДФЛ 
//
Функция ПолучитьСписокКодовДоходаОсновныхНачислений() Экспорт 

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка,
	|	ДоходыНДФЛ.Представление
	|ИЗ
	|	Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ
	|ГДЕ
	|	ДоходыНДФЛ.СтавкаНалогообложенияРезидента = &СтавкаНалогообложенияРезидента
	|	И (НЕ ДоходыНДФЛ.Ссылка В (&ЧастичноОблагаемыеДоходы))");
	
	СписокКодовДохода = Новый Массив;
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2201);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2202);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2203);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2204);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2205);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2206);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2207);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2208);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2209);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2761);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2720);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2730);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2740);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2760);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2770);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2790);
	Запрос.УстановитьПараметр("ЧастичноОблагаемыеДоходы",СписокКодовДохода);
	Запрос.УстановитьПараметр("СтавкаНалогообложенияРезидента", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);

	СписокКодовДохода = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокКодовДохода.Добавить(Выборка.Ссылка,Выборка.Представление);
	КонецЦикла;
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.ПустаяСсылка(),"");
	Возврат СписокКодовДохода;
	
КонецФункции // ПолучитьСписокКодовДоходаТребующихДополнительнойОбработки()

// Возвращает список кодов дохода, облагаемых по ставке 13%
//
// Параметры
//  нет
//
// Возвращаемое значение:
//  список значений, содержащий ссылки на предопределенные эл-ты спр-ка ДоходыНДФЛ 
//
Функция ПолучитьСписокКодовДоходаДополнительныхНачислений() Экспорт 

	СписокКодовДохода = Новый СписокЗначений;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка,
	|	ДоходыНДФЛ.Представление
	|ИЗ
	|	Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ
	|ГДЕ
	|	ДоходыНДФЛ.СтавкаНалогообложенияРезидента = &СтавкаНалогообложенияРезидента");
						  
	Запрос.УстановитьПараметр("СтавкаНалогообложенияРезидента",Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);					  
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокКодовДохода.Добавить(Выборка.Ссылка,Выборка.Представление);
	КонецЦикла;
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.ПустаяСсылка(),"");
	
	Возврат СписокКодовДохода
	
КонецФункции // ПолучитьСписокКодовДоходаДопНачисленийТребующихДополнительнойОбработки()

// Возвращает список видов государственных единовременных пособий за счет ФСС
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления РазмерыГосударственныхПособий
//
Функция ПолучитьСписокРасходовПоСоцСтрахованию() Экспорт
	
	СписокПособий = Новый СписокЗначений;
	
	Для каждого ЗначениеПеречисления Из Перечисления.ВидыПособийСоциальногоСтрахования Цикл
		Если ЗначениеПеречисления = Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет 
			Или ЗначениеПеречисления = Перечисления.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка Тогда
			Продолжить;
		КонецЕсли;
		СписокПособий.Добавить(ЗначениеПеречисления)
	КонецЦикла; 
	
	Возврат СписокПособий
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ

// Функция получает документ(ы), которым был исправлен расчетный документ
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  Режим - строка, допустимые значения: "КритерийОтбора", "ТаблицаДокумента" 
//  ИмяДокумента - имя соответствующего объекта метаданных
//
// Возвращаемое значение:
//   Режим = "КритерийОтбора": массив документов-исправлений, возможно, пустой.
//   Режим = "ТаблицаДокумента": ссылка на документ того же вида, что и переданный параметр; 
//   или Неопределено, если документ-исправление не найден.
//
Функция ПолучитьДокументИсправление(ДокументСсылка = Неопределено, Режим = Неопределено, ИмяДокумента = Неопределено, ИмяРеквизита = "ПерерассчитываемыйДокумент") Экспорт 
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Если Режим = Неопределено Тогда
		Режим = ?(ДокументСсылка.Метаданные().Реквизиты.Найти("Сотрудник") = Неопределено, "КритерийОтбора","ТаблицаДокумента")	
	КонецЕсли;
	
	Если Режим = "КритерийОтбора" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыИсправления.Ссылка
		|ИЗ
		|	КритерийОтбора.ДокументыИсправления(&ИсходныйДокумент) КАК ДокументыИсправления
		|";
	ИначеЕсли Режим = "ТаблицаДокумента" Тогда
		Если Не ЗначениеЗаполнено(ИмяДокумента) Тогда
			ИмяДокумента = ДокументСсылка.Метаданные().Имя;
		КонецЕсли;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыИсправления.Ссылка
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления." + ИмяРеквизита + " = &ИсходныйДокумент";
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
	Результат = Запрос.Выполнить();
	
	Если Режим = "КритерийОтбора" Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка
		Иначе
			Возврат Неопределено
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция получает документ(ы), которым был исправлен расчетный документ
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  Режим - строка, допустимые значения: "КритерийОтбора", "ТаблицаДокумента" 
//
// Возвращаемое значение:
//   Режим = "КритерийОтбора": массив документов-исправлений, возможно, пустой.
//   Режим = "ТаблицаДокумента": ссылка на документ того же вида, что и переданный параметр; 
//   или Неопределено, если документ-исправление не найден.
//
Функция ПолучитьДокументСторнирование(ДокументСсылка = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыИсправления.Ссылка
	|ИЗ
	|	Документ.Сторнирование КАК ДокументыИсправления
	|ГДЕ
	|	ДокументыИсправления.СторнируемыйДокумент = &ИсходныйДокумент";
	
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	Иначе
		Возврат Документы.Сторнирование.ПустаяСсылка()
	КонецЕсли;
	
КонецФункции

// Определяет, можно ли изменять документ "задним числом", т.е. проверяет
//   отсутствие исправлений и сторнирований.
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  ОписаниеПричиныОтказа - переменная, куда возвращается описание проблемы
//
// Возвращаемое значение:
//  булево
//
Функция ДокументНельзяИзменятьЗаднимЧислом(ДокументСсылка = Неопределено, ОписаниеПричиныОтказа = "") Экспорт 
	
	ОписаниеПричиныОтказа = "";
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь
	ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументИсправление(ДокументСсылка)) Тогда
		ОписаниеПричиныОтказа = "Документ был исправлен, перерасчет документа ""задним числом"" запрещен!";
		Возврат Истина
	ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументСторнирование(ДокументСсылка)) Тогда
		ОписаниеПричиныОтказа = "Документ был сторнирован, перерасчет документа ""задним числом"" запрещен!";
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь
		
КонецФункции

// Выбирает из документов-исправлений сотрудников и помещает их в соответствие
//
// Параметры
//  ТекстЗапроса - строка. содержит текст запроса выора сотрудников
//  ДокументыИсправления - массив документов-исправлений
//  ИмяПоля - строка, имя поля запроса, содержащего сотрудника
//  ИмяПараметра - строка, имя параметра запроса, содержащего документы-исправления
//
// Возвращаемое значение:
//   Соответствие с сотрудниками документов исправлений
//
Функция СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса = "", ДокументыИсправления = Неопределено, ИмяПоля = "Сотрудник", ИмяПараметра = "Исправления") Экспорт
                                                                             
	Сотрудники = Новый Соответствие;
	
	Если ПустаяСтрока(ТекстЗапроса) Или Не ЗначениеЗаполнено(ДокументыИсправления) Тогда
		Возврат	Сотрудники
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр(ИмяПараметра,ДокументыИсправления);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сотрудники.Вставить(Выборка[ИмяПоля], Истина);
	КонецЦикла;
	
	Возврат Сотрудники

КонецФункции // СформироватьСоответствиеСотрудниковСИсправлениями()

// Обработчик подписки ПередЗаписьюДокументаИсправление
// 
Процедура ПередЗаписьюДокументаПроверкаИсправленногоДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Или РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Источник.Метаданные().Реквизиты.Найти("ИсправляемыйДокумент") <> Неопределено Тогда
			ИмяРеквизита = "ИсправляемыйДокумент";
		Иначе
			ИмяРеквизита = "ПерерассчитываемыйДокумент";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПолучитьДокументИсправление(Источник.Ссылка, ИмяРеквизита)) Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ТекстСообщенияОбОшибке = "Документ был исправлен, проведение документа запрещено!";
			Иначе
				ТекстСообщенияОбОшибке = "Документ был исправлен, отмена проведения документа запрещена!";
			КонецЕсли;
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
			
		ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументСторнирование(Источник.Ссылка)) Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ТекстСообщенияОбОшибке = "Документ был сторнирован, проведение документа запрещено!";
			Иначе
				ТекстСообщенияОбОшибке = "Документ был сторнирован, отмена проведения документа запрещена!";
			КонецЕсли;
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Создает набор записей регистра, описание объекта метаданных которого передано
//
// Параметры
//  Движение - Объект метаданных, описывающий регистр, по которому производится движение
//
// Возвращаемое значение:
//   новый набор записей переданного регистра
//
Функция НаборЗаписейПоОбъектуМетаданных(Движение)
	
	НаборЗаписей = Неопределено;
	
	Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
		НаборЗаписей = РегистрыСведений[Движение.Имя].СоздатьНаборЗаписей();
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(Движение) Тогда
		НаборЗаписей = РегистрыНакопления[Движение.Имя].СоздатьНаборЗаписей();
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции // НаборДвиженийДокумента()


// Читает движения переданного документа, сохраняет их в соответствие,  
//  а затем очищает
//
// Параметры
//  ДокументСсылка - ДокументСсылка.<ИмяИсправляемогоДокумента>, исправляемый документ, 
//					чьи движения будут исправлены
//  СоответствиеДвижений - соответствие, в этот параметр возвращаются удаленные движения
//  Сотрудники, ФизЛица - соответствия, содержат сотрудников, физлиц, по которым следует  
//                  отбирать движения
//
// Возвращаемое значение:
//   нет
//
Процедура ОбработатьДвиженияИсправляемогоДокумента(ДокументСсылка = Неопределено, СоответствиеДвижений = Неопределено, Сотрудники = Неопределено, ФизЛица = Неопределено)
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат
	КонецЕсли;

	Если СоответствиеДвижений = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Режим = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "ПоНесколькимСотрудникам","ПоОдномуСотруднику");
	
	Если Режим = "ПоНесколькимСотрудникам" Тогда
		
		Если Не ЗначениеЗаполнено(Сотрудники) Тогда
			Возврат
		КонецЕсли;
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			Если Движение.Измерения.Найти("Сотрудник") <> Неопределено Или Движение.Реквизиты.Найти("Сотрудник") <> Неопределено Тогда
				МассивПроверки = Сотрудники;
				ИмяПоля = "Сотрудник";
			ИначеЕсли Движение.Измерения.Найти("ФизЛицо") <> Неопределено Или Движение.Реквизиты.Найти("ФизЛицо") <> Неопределено Тогда
				МассивПроверки = ФизЛица;
				ИмяПоля = "ФизЛицо";
			Иначе 
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура(ИмяПоля);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			
			НаборЗаписей.Прочитать();
			ВременнаяТЗ = НаборЗаписей.Выгрузить();
			СохраненныеДвижения = СоответствиеДвижений.Получить(Движение.Имя);
			Если СохраненныеДвижения <> Неопределено Тогда
				Для Каждого Строка Из СохраненныеДвижения Цикл
					ЗаполнитьЗначенияСвойств(ВременнаяТЗ.Добавить(), Строка);
				КонецЦикла;
			КонецЕсли;
			
			УдаляемыеДвижения = ВременнаяТЗ.СкопироватьКолонки();
			Для каждого ОбъектПроверки Из МассивПроверки Цикл
				СтруктураПоиска[ИмяПоля] = ОбъектПроверки;
				МассивДвижений = ВременнаяТЗ.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаТЗ Из МассивДвижений Цикл
					ЗаполнитьЗначенияСвойств(УдаляемыеДвижения.Добавить(),СтрокаТЗ);
					ВременнаяТЗ.Удалить(СтрокаТЗ);
				КонецЦикла;
			КонецЦикла;
			СоответствиеДвижений.Вставить(Движение.Имя,УдаляемыеДвижения);
			НаборЗаписей.Загрузить(ВременнаяТЗ);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	ИначеЕсли Режим = "ПоОдномуСотруднику" Тогда
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			НаборЗаписей.Прочитать();
			СоответствиеДвижений.Вставить(Движение.Имя,НаборЗаписей.Выгрузить());
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ОбработатьДвиженияИсправляемогоДокумента()

// Восстанавливает движения для переданного документа из переданного соответствия
//
Процедура ВосстановитьДвиженияИсправляемогоДокумента(ДокументСсылка = Неопределено, СоответствиеДвижений = Неопределено)
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат
	КонецЕсли;

	Если СоответствиеДвижений = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Режим = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "ПоНесколькимСотрудникам","ПоОдномуСотруднику");	
	
	Если Режим = "ПоНесколькимСотрудникам" Тогда
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВременнаяТЗ = СоответствиеДвижений[Движение.Имя];
			Если ВременнаяТЗ <> Неопределено Тогда
				НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
				НаборЗаписей.Прочитать();
				Для каждого СтрокаТЗ Из ВременнаяТЗ Цикл
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
				КонецЦикла;
				НаборЗаписей.Записать(Ложь);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Режим = "ПоОдномуСотруднику" Тогда
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			НаборЗаписей.Загрузить(СоответствиеДвижений[Движение.Имя]);
			НаборЗаписей.Записать(Ложь);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьДвиженияИсправляемогоДокумента()

// Заполняет документ-исправление по исходному кадровому документу
//
Процедура ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ЭтотОбъект.ИсправляемыйДокумент = ИсходныйДокумент;
	
	МД = ИсходныйДокумент.Метаданные();
	
	МассивНепереносимыхРеквизитов = Новый Массив;
	МассивНепереносимыхРеквизитов.Добавить("Проведен");
	МассивНепереносимыхРеквизитов.Добавить("Номер");
	МассивНепереносимыхРеквизитов.Добавить("Дата");
	МассивНепереносимыхРеквизитов.Добавить("ПометкаУдаления");
	МассивНепереносимыхРеквизитов.Добавить("Комментарий");
	МассивНепереносимыхРеквизитов.Добавить("Ответственный");
	МассивНепереносимыхРеквизитов.Добавить("КраткийСоставДокумента");
	МассивНепереносимыхРеквизитов.Добавить("ДанныеПрошлойВерсии");
	МассивНепереносимыхРеквизитов.Добавить("ИсправляемыйДокумент");
	МассивНепереносимыхРеквизитов.Добавить("ДвиженияИсправляемогоДокумента");
	
	Реквизиты = Новый Массив;
	Для Каждого Реквизит Из МД.Реквизиты Цикл
		Имя = Реквизит.Имя;
		Если МассивНепереносимыхРеквизитов.Найти(Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Реквизиты.Добавить(Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИсходныйДокумент",	ИсходныйДокумент);
	Текст = "";
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Не ПустаяСтрока(Текст) Тогда
			Текст = Текст + ",";
		КонецЕсли;
		Текст = Текст + "
		|	Док." + Реквизит + " КАК " + Реквизит;
	КонецЦикла;
	Запрос.Текст =
	"ВЫБРАТЬ
	|"+Текст+"
	|ИЗ
	|	Документ." + МД.Имя + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &ИсходныйДокумент
	|	И Док.Проведен";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники",			Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам",	Сотрудники = Неопределено);
	
	Для Каждого МДТабличнаяЧасть Из МД.ТабличныеЧасти Цикл
		ЗаписиСторнируются	= МДТабличнаяЧасть.Реквизиты.Найти("Сторно") <> Неопределено;
		ЕстьСотрудник		= МДТабличнаяЧасть.Реквизиты.Найти("Сотрудник") <> Неопределено;
		
		РеквизитыТЧ = Новый Массив;
		Для Каждого РеквизитТЧ Из МДТабличнаяЧасть.Реквизиты Цикл
			Имя = РеквизитТЧ.Имя;
			Если Имя = "Сторно" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыТЧ.Добавить(Имя);
		КонецЦикла;
		
		Текст = "";
		Для Каждого РеквизитТЧ Из РеквизитыТЧ Цикл
			Текст = Текст + "
			|	Док." + РеквизитТЧ + " КАК " + РеквизитТЧ + ",";
		КонецЦикла;
		ТекстЗапроса =
		"ВЫБРАТЬ"+Текст+"
		|	Док.НомерСтроки
		|ПОМЕСТИТЬ ВТДок
		|ИЗ
		|	Документ." + МД.Имя + "." + МДТабличнаяЧасть.Имя + " КАК Док
		|ГДЕ
		|	Док.Ссылка = &ИсходныйДокумент
		|	И Док.Ссылка.Проведен
		|	" + ?(ЗаписиСторнируются, "И (НЕ Док.Сторно)", "") + "
		|	" + ?(ЕстьСотрудник, "И (&ПоВсемСотрудникам ИЛИ Док.Сотрудник В (&Сотрудники))", "") + "
		|;";
		
		Если ЗаписиСторнируются Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ИСТИНА КАК Сторно,
			|	Док.*
			|ИЗ
			|	ВТДок КАК Док
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЛОЖЬ,
			|	Док.*
			|ИЗ
			|	ВТДок КАК Док
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сторно УБЫВ,
			|	Док.НомерСтроки";
			
		Иначе
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	Док.*
			|ИЗ
			|	ВТДок КАК Док
			|
			|УПОРЯДОЧИТЬ ПО
			|	Док.НомерСтроки";
			
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		
		ЭтотОбъект[МДТабличнаяЧасть.Имя].Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, ВосстанавливатьДвижения, ИсправляемыйДокумент, СоответствиеДвижений) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не ЭтотОбъект.ИсправляемыйДокумент.Пустая() Тогда
		Сотрудники	= Новый Массив;
		Физлица		= Новый Массив;
		Если ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти("РаботникиОрганизации") = Неопределено Тогда
			Сотрудники.Добавить(ЭтотОбъект.Сотрудник);
			Физлица.Добавить(ЭтотОбъект.Физлицо);
			
		Иначе
			МассивСтрок = ЭтотОбъект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сторно", Истина));
			Для Каждого Строка Из МассивСтрок Цикл
				Если Сотрудники.Найти(Строка.Сотрудник) = Неопределено Тогда
					Сотрудники.Добавить(Строка.Сотрудник);
				КонецЕсли;
				Если Физлица.Найти(Строка.Физлицо) = Неопределено Тогда
					Физлица.Добавить(Строка.Физлицо);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СоответствиеДвижений = ЭтотОбъект.ДвиженияИсправляемогоДокумента.Получить();
		Если СоответствиеДвижений = Неопределено Тогда
			СоответствиеДвижений = Новый Соответствие;
		КонецЕсли;
		ОбработатьДвиженияИсправляемогоДокумента(ЭтотОбъект.ИсправляемыйДокумент, СоответствиеДвижений, Сотрудники, Физлица);
		
		ЭтотОбъект.ДвиженияИсправляемогоДокумента = Новый ХранилищеЗначения(СоответствиеДвижений);
	КонецЕсли;
		
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		СоответствиеДвижений = ЭтотОбъект.ДвиженияИсправляемогоДокумента.Получить();
		Если СоответствиеДвижений <> Неопределено Тогда
			ЭтотОбъект.ДвиженияИсправляемогоДокумента	= Неопределено;
			
			Если ЭтотОбъект.ИсправляемыйДокумент.Пустая() Тогда
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("ДокументСсылка",	ЭтотОбъект.Ссылка);
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Док.ИсправляемыйДокумент
				|ИЗ
				|	Документ." + ЭтотОбъект.Метаданные().Имя + " КАК Док
				|ГДЕ
				|	Док.Ссылка = &ДокументСсылка";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ИсправляемыйДокумент = Выборка.ИсправляемыйДокумент;
					ВосстанавливатьДвижения		= Истина;
				КонецЕсли;
				
			Иначе
				ИсправляемыйДокумент = ЭтотОбъект.ИсправляемыйДокумент;
				ВосстанавливатьДвижения		= Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеКадровогоДокументаПриЗаписи(Отказ, ВосстанавливатьДвижения, ИсправляемыйДокумент, СоответствиеДвижений) Экспорт
	
	Если ВосстанавливатьДвижения Тогда
		ВосстановитьДвиженияИсправляемогоДокумента(ИсправляемыйДокумент, СоответствиеДвижений);
		ВосстанавливатьДвижения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ КОНТРОЛЯ ПЕРИОДИЧЕСКИХ ВЫПЛАТ

Функция ПолучитьНаборПериодическихВыплатПоДокументу(Ссылка, ДанныеДокумента = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	// Проверка в форме выполняется в ПередЗаписью, поэтому ссылки еще нет, 
	//  используем ДанныеДокумента, при проведении - используем ссылку
	
	Если ДанныеДокумента <> Неопределено Тогда
		
		ТекстЗапроса =  "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокумента.ДатаНачала КАК ПериодНачисления,
		|	ДанныеДокумента.Сотрудник КАК Сотрудник,
		|	ДанныеДокумента.ВидРасчета КАК ВидРасчета
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	&ДанныеДокумента КАК ДанныеДокумента";
		
		Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеДокумента);
	
	Иначе		
	
		НаименованиеДокумента = Ссылка.Метаданные().Имя;
		
		Если НаименованиеДокумента = "НачислениеЗарплатыРаботникамОрганизаций" Тогда
			
			ТекстЗапроса =  "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.ПериодНачисленияДатаНачала КАК ПериодНачисления,
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник КАК Сотрудник,
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета КАК ВидРасчета
			|ПОМЕСТИТЬ ВТДанныеДокумента
			|ИЗ
			|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
			|ГДЕ
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка = &Ссылка
			|	И (НЕ НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сторно)";
			
		ИначеЕсли НаименованиеДокумента = "ПремииРаботниковОрганизаций" Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПремииРаботниковОрганизацийНачисления.Ссылка.ДатаНачалаБП КАК ПериодНачисления,
			|	ПремииРаботниковОрганизацийНачисления.Сотрудник КАК Сотрудник,
			|	ПремииРаботниковОрганизацийНачисления.Ссылка.ВидРасчета КАК ВидРасчета
			|ПОМЕСТИТЬ ВТДанныеДокумента
			|ИЗ
			|	Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацийНачисления
			|ГДЕ
			|	ПремииРаботниковОрганизацийНачисления.Ссылка = &Ссылка
			|	И (НЕ ПремииРаботниковОрганизацийНачисления.Сторно)";
			
		ИначеЕсли НаименованиеДокумента = "РегистрацияРазовыхНачисленийРаботниковОрганизаций" Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.ПериодРегистрации КАК ПериодНачисления,
			|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Сотрудник КАК Сотрудник,
			|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.ВидРасчета КАК ВидРасчета
			|ПОМЕСТИТЬ ВТДанныеДокумента
			|ИЗ
			|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления
			|ГДЕ
			|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка = &Ссылка
			|	И (НЕ РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Сторно)";
			
		Иначе
		
			ПроведениеРасчетовПереопределяемый.ДополнитьТекстЗапросаНабораПериодическихВыплат(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.РазВГод)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодНачисления, ГОД)
	|		КОГДА ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.РазВКвартал)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодНачисления, КВАРТАЛ)
	|		КОГДА ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.РазВМесяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодНачисления, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодНачисления,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ВидРасчета,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|		ПО ДанныеДокумента.ВидРасчета = ДополнительныеНачисленияОрганизаций.Ссылка
	|ГДЕ
	|	(НЕ ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления В (ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.НеОпределена), ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.ПустаяСсылка)))";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьДвиженияПериодическихВыплат(Движения, Ссылка) Экспорт
	
	Движения.ПериодическиеНачисления.Загрузить(ПолучитьНаборПериодическихВыплатПоДокументу(Ссылка));
	
КонецПроцедуры
