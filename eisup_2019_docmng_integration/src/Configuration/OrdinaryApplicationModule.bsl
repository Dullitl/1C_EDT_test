Перем глОбщиеЗначения Экспорт;
Перем глСерверТО Экспорт;
Перем АдресРесурсовОбозревателя Экспорт; // В переменной содержится значение 
                                         // адреса ресурса данной конфигурации

Перем мКлиентOnline;

Перем ПараметрыВнешнихРегламентированныхОтчетов Экспорт;
Перем КонтекстЭДО Экспорт;
Перем КонтекстОнлайнСервисовРегламентированнойОтчетности Экспорт;

//АБС ВСТАВКА 37725  17.01.2014 21:13:40  Шамов
Перем СтруктураПараметровЗавершенияРаботы Экспорт;
//АБС ВСТАВКА 37725 КОНЕЦ

//АБС_Вставка Попов Мониторинг PerfExpert
Перем ЗапросМониторинг Экспорт;    
//\\Попов Мониторинг PerfExpert

//АБС ВСТАВКА 38320 30.01.2014 15:15:15  Пугачев

// СтандартныеПодсистемы.ОценкаПроизводительности
Перем ОценкаПроизводительностиЗамерВремени Экспорт;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

//+ Интеграция ЕИСУП_Документооборот
// Хранилище глобальных переменных.
//
// ПараметрыПриложения - Соответствие - хранилище переменных, где:
//   * Ключ - Строка - имя переменной в формате "ИмяБиблиотеки.ИмяПеременной";
//   * Значение - Произвольный - значение переменной.
//
// Инициализация (на примере СообщенияДляЖурналаРегистрации):
//   ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
//   Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
//     ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
//   КонецЕсли;
//  
// Использование (на примере СообщенияДляЖурналаРегистрации):
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Добавить(...);
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"] = ...;
Перем ПараметрыПриложения Экспорт;
//- Интеграция ЕИСУП_Документооборот

//АБС ВСТАВКА 38320 КОНЕЦ 

// перед завершением работы системы
Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	ЗапрашиватьПотверждение = глЗначениеПеременной("глЗапрашиватьПодтверждениеПриЗакрытии") <> Ложь и УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗапрашиватьПодтверждениеПриЗакрытии") = Истина;
	
	Если ЗапрашиватьПотверждение Тогда
		Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
		Отказ = (Ответ = КодВозвратаДиалога.Нет);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы
		ПроцедурыОбменаДанными.ВыполнитьОбменПриЗавершенииРаботыПрограммы(глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
			
	КонецЕсли;

КонецПроцедуры

// Процедура осуществляет обработку события "При завершении работы системы".
// Данное событие возникает перед завершением работы в режиме 1С:Предприятие
// после закрытия главного окна.
// В данной процедуре могут быть выполнены действия, необходимые при выходе
// из программы.
// Примечание:
// В данной процедуре не допускаются открытие форм и других окон, не
// поддерживаются выдача сообщений, установка текста в панели состояния,
// а также другие действия, требующие наличия главного окна.
//
// Параметры:
//  Нет.
//
Процедура ПриЗавершенииРаботыСистемы()

	Если мКлиентOnline <> Неопределено Тогда
		мКлиентOnline.ЗавершитьРаботу();
	КонецЕсли;
	
	// Показ финальной дополнительной информации
	Форма = Обработки.ДополнительнаяИнформация.Создать();
	Форма.ВыполнитьДействие();
	
	// {{ТТК Сладков А. Заявка № 24.05.2016 начало
	//<< вн	
	внЖурналРегистрацииКлиент.ПриЗавершенииРаботыСистемы();
	//>>	
	// }}ТТК Сладков А. Заявка № 24.05.2016 окончание

КонецПроцедуры // ПриЗавершенииРаботыСистемы()

// перед началом работы системы
Процедура ПередНачаломРаботыСистемы(Отказ)
	
	Если НЕ РольДоступна("Пользователь")
		И (НЕ РольДоступна("ПолныеПрава")) Тогда
		
		Предупреждение("Вам не назначена роль ""Пользователь"". Запуск конфигурации невозможен.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Отказ = НЕ УправлениеПользователями.ПользовательОпределен();
	
	//АБС ВСТАВКА НАЧАЛО
	Если ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) Тогда
		врШрифт = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"абс_ШрифтПрограммы");
		Если ЗначениеЗаполнено(врШрифт) Тогда
			ГлавныйСтиль=БиблиотекаСтилей[Строка(врШрифт)];
		КонецЕсли;
	КонецЕсли;
	//АБС ВСТАВКА КОНЕЦ
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы();
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

// при начале работы системы
Процедура ПриНачалеРаботыСистемы()
	
	//АБС_Вставка Попов Мониторинг PerfExpert 	
	Если глЗначениеПеременной("абс_ВключитьМониторингPerfExpert") Тогда
		ЗагрузкаМониторинга();   		
	КонецЕсли; 	
	//\\Попов Мониторинг PerfExpert   
	
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить();
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	//\\АБС ВСТАВКА №40078 КОНЕЦ
	//Сторчевой А.Н. 7753872 {
	ЗаголовокСистемы = ЗаголовокСистемы + ?(ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")), " / "+ глЗначениеПеременной("глТекущийПользователь") + " /", "") +
		?(абс_СерверныеФункции.абс_ДаннаяБазаНеКопия(), "", " (Это копия рабочей базы)");
	// } Сторчевой А.Н. 7753872 
	Если ЗначениеЗаполнено(ЗаголовокСистемы) Тогда
		УстановитьЗаголовокСистемы(ЗаголовокСистемы);
	КонецЕсли;
	
 	НеобходимоОбновлениеИБ = НЕ ПустаяСтрока(Метаданные.Версия)
	   И Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия;

	// Установить начальное значение ТипДетализацииСтандартныхОтчетов
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ТипДетализацииСтандартныхОтчетов") = Перечисления.ТипДетализацииСтандартныхОтчетов.ПустаяСсылка() Тогда
		//УстановитьЗначениеПоУмолчанию(глТекущийПользователь, "ТипДетализацииСтандартныхОтчетов", Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы);
		СсылкаНастройки = ПланыВидовХарактеристик.НастройкиПользователей["ТипДетализацииСтандартныхОтчетов"];
		МенеджерЗаписи = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		МенеджерЗаписи.Настройка = СсылкаНастройки;
		МенеджерЗаписи.Значение = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	    
	ЗапретитьОткрытиеНесколькихСеансов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗапретитьОткрытиеНесколькихСеансов");
	Если ЗапретитьОткрытиеНесколькихСеансов Тогда
		ТекущийНомерСоединения = НомерСоединенияИнформационнойБазы();
		УникальныйИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		
		МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
		Для Каждого ТекСоединение Из МассивСоединений Цикл
			Если (ТекСоединение.ИмяПриложения = "1CV8") 
			   И (НЕ ТекСоединение.НомерСоединения = ТекущийНомерСоединения)
			   И (НЕ ТекСоединение.Пользователь = неопределено)
			   И (ТекСоединение.Пользователь.УникальныйИдентификатор = УникальныйИдентификаторПользователя) Тогда
			  
				Предупреждение("Пользователем с таким именем уже выполнен вход в систему");
				ЗавершитьРаботуСистемы(Ложь);
				Возврат;
				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	ПервыйЗапуск = (Константы.НомерВерсииКонфигурации.Получить()="");
	
	//АБС ВСТАВКА
	//	абс_УТК_Клиент.ПриНачалеРаботыСистемы();
	//\\АБС ВСТАВКА
	
	ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы();
	
	// Выполнить проверку разницы времени с сервером приложения
	Если НЕ ПроверкаРазницыВремениКлиент.ВыполнитьПроверку() Тогда
		Возврат;	
	КонецЕсли;
	
	// отработка параметров запуска системы
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеСоединениямиИБ.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
	
	СформироватьОтчеты();
	
	ПроверитьПодключениеОбработчикаОжидания(Истина);

	// Проверка заполнения констант валют учетов
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаРегламентированногоУчета")) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена константа валюты регламентированного учета!");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаУправленческогоУчета")) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена константа валюты управленческого учета!");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаМеждународногоУчета")) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена константа валюты международного учета!");
	КонецЕсли;

	// Проверка наличия комплекта обновления обработок обслуживания торгового оборудования
	ПроверятьООПриЗапуске = ВосстановитьЗначение("ПроверкаНаличияОбновленияОбработокОбслуживанияПриЗапуске");
	ПроверятьООПриЗапуске = ?(ПроверятьООПриЗапуске = Неопределено, Ложь, ПроверятьООПриЗапуске);

	Если ПроверятьООПриЗапуске Тогда
		АдресИПараметрыСервера = Новый Структура;
		АдресИПараметрыСервера.Вставить("АдресОбработок", ПолучитьСерверТО().ПолучитьАдресОбновленияОбработокОбслуживания());

		Если РаботаСТорговымОборудованием.ПроверитьДоступностьНовыхОбработок(АдресИПараметрыСервера, Истина) Тогда
			Ответ = Вопрос("Доступны новые обработки обслуживания торгового оборудования.
			|Открыть форму проверки и обновления обработок обслуживания?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				РаботаСТорговымОборудованием.ОткрытьОбновлениеОбработокОбслуживания(АдресИПараметрыСервера);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ВключенИнтерфейсКассира = Ложь;
	УправлениеРозничнойТорговлей.ЗапускИнтерфейсаКассира(глЗначениеПеременной("глТекущийПользователь"), ВключенИнтерфейсКассира);

	// Если интерфейс кассира включен - эти действия выполнять не нужно.
	Если НЕ ВключенИнтерфейсКассира Тогда
		
		//Если ПравоДоступа("Использование", Метаданные.Обработки.АвтоПолучениеОтправкаЭлектронныхПисем) Тогда
		//	глОбработкаАвтоПолученияОтправкиЭлектронныхПисем = Обработки.АвтоПолучениеОтправкаЭлектронныхПисем.ПолучитьФорму();
		//КонецЕсли; 
		
		Если Не ВосстановитьЗначение("ОбзорКонфигурации_ПоказыватьПриСтарте") = Ложь Тогда
			Обработки.ОбзорКонфигурации.ПолучитьФорму().Открыть();
		КонецЕсли;                                                       
		
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "АвтооткрытиеМенеджераКонтактовПриЗапускеПрограммы") = Истина Тогда
			Если ПравоДоступа("Использование", Метаданные.Обработки.МенеджерКонтактов) Тогда
				Обработки.МенеджерКонтактов.ПолучитьФорму().Открыть();
			Иначе
				ОбщегоНазначения.Сообщение("Недостаточно прав доступа к обработке ""Менеджер контактов"". Обратитесь к администратору пользователей.", Перечисления.ВидыСообщений.ВажнаяИнформация);
			КонецЕсли; 
		КонецЕсли; 

		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "АвтооткрытиеФормыРабочегоМестаМенеджераПоПродажамПриЗапускеПрограммы") = Истина Тогда
			Если ПравоДоступа("Использование", Метаданные.Обработки.РабочееМестоМенеджераПоПродажам) Тогда
				Обработки.РабочееМестоМенеджераПоПродажам.ПолучитьФорму().Открыть();
			Иначе
				ОбщегоНазначения.Сообщение("Недостаточно прав доступа к обработке ""Рабочее место менеджера по продажам"". Обратитесь к администратору пользователей.", Перечисления.ВидыСообщений.ВажнаяИнформация);
			КонецЕсли; 
		КонецЕсли;
		
		ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
		
		Если ЭтоФайловаяИБ Тогда
						
			ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
			
			Если глЗначениеПеременной("глТекущийПользователь") = ПользовательДляВыполненияРеглЗаданий Тогда
				
				// с интервалом секунд вызываем процедуру работы с регламентными заданиями
				ПоддержкаРегламентныхЗаданиеДляФайловойВерсии();
				
				ИнтервалДляОпроса = Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Получить();
				
				Если ИнтервалДляОпроса = Неопределено
					ИЛИ ИнтервалДляОпроса = 0 Тогда
					
					ИнтервалДляОпроса = 60;	
					
				КонецЕсли;
				
				ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", ИнтервалДляОпроса);
				
			КонецЕсли;
			
		КонецЕсли;

		Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") <> Неопределено Тогда
			// подключим обработчик обменов данными
			ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));
		КонецЕсли;
		
		// защищенный документооборот с ФНС
		Если ИнициализироватьКонтекстДокументооборотаСНалоговымиОрганами() Тогда
			ПодключитьОбработчикАвтообменаСНалоговымиОрганами();
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьПроверкуДинамическогоОбновленияИБ();

	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗагружатьАктуальныеКурсыВалютПриЗапускеСистемы") = Истина Тогда
		Если ПравоДоступа("Использование", Метаданные.Обработки.КурсыВалютРБК) Тогда
			ОбработкаЗагрузкиКурсовВалют = Обработки.КурсыВалютРБК.Создать();
			ОбработкаЗагрузкиКурсовВалют.УстановитьПериодЗагрузки();
			ОбработкаЗагрузкиКурсовВалют.ЗаполнитьВалюты(Истина);
			ОбработкаЗагрузкиКурсовВалют.ЗагрузитьКурсыСРБК();
		Иначе
			ОбщегоНазначения.Сообщение("Недостаточно прав доступа к обработке ""Загрузка курсов валют с РБК"". Курсы валют не загружены. Обратитесь к администратору пользователей.", Перечисления.ВидыСообщений.ВажнаяИнформация);
		КонецЕсли; 
	КонецЕсли;

	Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ИспользованиеТорговогоОборудования") Тогда
		мКлиентOnline = Обработки.ТОКлиентККМOnline.Создать();
		мКлиентOnline.НачатьРаботу();
	КонецЕсли;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.НаборПерсонала)
	   И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "АвтооткрытиеНабораПриЗапускеПрограммы") = Истина Тогда
		Обработки.НаборПерсонала.ПолучитьФорму().Открыть();
	КонецЕсли;
	
	ПолучитьВнешниеКомпонентыПриНеобходимости();
	
	// Календарь бухгалтера. Регламентированная отчетность.
	ПроверитьНапоминанияКалендарьБухгалтераСобытия();

	// Открытие дополнительной информации
	Если НЕ НеобходимоОбновлениеИБ Тогда
		Форма = Обработки.ДополнительнаяИнформация.ПолучитьФорму("ФормаРабочийСтол");
		Форма.Открыть();
	КонецЕсли;
	
	// Открытие формы помощника обновления конфигурации 
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ОбработкаОбновлениеКонфигурации = Обработки.ОбновлениеКонфигурации.Создать();
		ОбработкаОбновлениеКонфигурации.ПроверитьНаличиеОбновлений();
	КонецЕсли;
	
	Если Не ПервыйЗапуск Тогда
		
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьПриЗапускеСписокТекущихЗадачПользователя") Тогда
			//Задачи.ЗадачаИсполнителя.ПолучитьФормуСписка().Открыть();
			//АБС ВСТАВКА 54270
			Задачи.абсЗадачаДоговора.ПолучитьФорму("ФормаСпискаВсехЗадач").Открыть();
			//АБС ВСТАВКА 54270 КОНЕЦ
		КонецЕсли;
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "абс_ОткрыватьРабочийСтол") Тогда
			Обработки.абс_РабочийСтол.ПолучитьФорму("РабочийСтол").Открыть();
		КонецЕсли;
                		
	КонецЕсли;
	
	
	//Добавление обязательных значений в кеш ОбщиеЗначения
	РаботаСОбщимиПеременными.ДобавитьОбязательныеЗначенияВКэш();
	//АБС ВСТАВКА 37725  17.01.2014 18:37:40  Шамов
	СтруктураПараметровЗавершенияРаботы = абс_УправлениеСеансомТонкогоКлиентаСервер.абс_УстановитьПараметрыКонтроляЗавершенияРаботыСервер();
	//АБС ВСТАВКА 37725 КОНЕЦ
	
	//АБС Настройка системы отправки сообщений
	ИнтервалПроверка = 0;
	ИнтервалПроверка = абс_УправлениеСеансомТонкогоКлиентаСервер.ПолучитьИнтервалПроверкиНаСервере();
	Если ИнтервалПроверка>0 Тогда
		ПодключитьОбработчикОжидания("абс_ПроверитьСообщения", ИнтервалПроверка);
	КонецЕсли;
    абс_СлужебныеФункции.абс_ПлановыеРегламентныеРаботыЗаВесьДень();
	//\\АБС
	
	Структура = ПроверитьПользователяНаУсловнуюОптимизацию(глЗначениеПеременной("глТекущийПользователь"));
	Если Структура.Свойство("Пользователь") и Структура.Пользователь = глЗначениеПеременной("глТекущийПользователь") Тогда		
		ПодключитьОбработчикОжидания("абс_Ожидание", Структура.ИнтервалПроверкиЗадержкиВСекундах,Ложь);
	КонецЕсли;		
          	
	ИнтервалПроверка = 0;
	ИнтервалПроверка = абс_УправлениеСеансомТонкогоКлиентаСервер.ПолучитьИнтервалПроверкиОповещения();
	Если ИнтервалПроверка > 0 Тогда		
		ПодключитьОбработчикОжидания("абс_ПроверитьОповещение", ИнтервалПроверка);
		абс_СлужебныеФункции.абс_ОповещениеПользователей();
	КонецЕсли;
	
	//АБС ВСТАВКА 37725  17.01.2014 18:37:40  Шамов
	Если СтруктураПараметровЗавершенияРаботы.абс_ИспользоватьТаймаутЗавершенияРаботы
		И НЕ СтруктураПараметровЗавершенияРаботы.ЭтоИсключение Тогда
		ПодключитьОбработчикОжидания("абс_ЗавершениеРаботы", СтруктураПараметровЗавершенияРаботы.абс_ИнтервалПроверкиЗавершенияРаботы);
	КонецЕсли;
	//АБС ВСТАВКА 37725 КОНЕЦ
	
	//АБС ВСТАВКА №31118 НАЧАЛО «20 февраля 2015 г.», Пополитов 
	ИнтервалПроверка = 0;
	ИнтервалПроверка = абс_УправлениеСеансомТонкогоКлиентаСервер.ПолучитьИнтервалПроверкиСообщенийНаСервере();
	Если ИнтервалПроверка > 0 Тогда		
		ПодключитьОбработчикОжидания("абс_ПроверятьСообщенияНаСервере", ИнтервалПроверка);
	КонецЕсли;
	//\\АБС ВСТАВКА №31118 КОНЕЦ
	
	// {{ТТК Сладков А. Заявка № 24.05.2016 начало
	//<< вн
	внЖурналРегистрацииКлиент.ПриНачалеРаботыСистемы();
	//>>
	// }}ТТК Сладков А. Заявка № 24.05.2016 окончание
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

Процедура абс_ПроверятьСообщенияНаСервере() Экспорт
	абс_СлужебныеФункции.абс_ПроверитьВывестиСообщенияСервера();
КонецПроцедуры	

Процедура абс_ПроверитьОповещение() Экспорт
	абс_СлужебныеФункции.абс_ПлановыеРегламентныеРаботы();
	//абс_СлужебныеФункции.абс_ОповещениеПользователей();
	//абс_СлужебныеФункции.абс_ПроверкаНеПроверенныхЗадач();
КонецПроцедуры	

//АБС Настройка системы отправки сообщений
Процедура абс_ПроверитьСообщения() Экспорт
	абс_УправлениеСеансомТонкогоКлиентаСервер.ВывестиСообщениеПользователю();
	//абс_УправлениеСеансомТонкогоКлиента.ПрочитатьСообщения();
	//АБС ВСТАВКА 37725  17.01.2014 18:22:08  Шамов
	СтруктураПараметровЗавершенияРаботыСтар = Новый Структура("ЭтоИсключение,абс_ИспользоватьТаймаутЗавершенияРаботы,абс_ИнтервалПроверкиЗавершенияРаботы,абс_ТаймаутЗавершенияРаботы",
		СтруктураПараметровЗавершенияРаботы.ЭтоИсключение,
		СтруктураПараметровЗавершенияРаботы.абс_ИспользоватьТаймаутЗавершенияРаботы,
		СтруктураПараметровЗавершенияРаботы.абс_ИнтервалПроверкиЗавершенияРаботы,
		СтруктураПараметровЗавершенияРаботы.абс_ТаймаутЗавершенияРаботы);
	СтруктураПараметровЗавершенияРаботы = абс_УправлениеСеансомТонкогоКлиентаСервер.абс_ОбновитьПараметрыКонтроляЗавершенияРаботыСервер(СтруктураПараметровЗавершенияРаботы);	
	
	Если СтруктураПараметровЗавершенияРаботыСтар.абс_ИспользоватьТаймаутЗавершенияРаботы <> СтруктураПараметровЗавершенияРаботы.абс_ИспользоватьТаймаутЗавершенияРаботы
		ИЛИ СтруктураПараметровЗавершенияРаботыСтар.абс_ИнтервалПроверкиЗавершенияРаботы <> СтруктураПараметровЗавершенияРаботы.абс_ИнтервалПроверкиЗавершенияРаботы
		ИЛИ СтруктураПараметровЗавершенияРаботыСтар.ЭтоИсключение <> СтруктураПараметровЗавершенияРаботы.ЭтоИсключение
		Тогда
		
		Если СтруктураПараметровЗавершенияРаботы.абс_ИспользоватьТаймаутЗавершенияРаботы И НЕ СтруктураПараметровЗавершенияРаботы.ЭтоИсключение Тогда
			ПодключитьОбработчикОжидания("абс_ЗавершениеРаботы", СтруктураПараметровЗавершенияРаботы.абс_ИнтервалПроверкиЗавершенияРаботы);			
		Иначе
			ОтключитьОбработчикОжидания("абс_ЗавершениеРаботы");
		КонецЕсли;
				
	КонецЕсли;	
	
	Если СтруктураПараметровЗавершенияРаботыСтар.ЭтоИсключение И СтруктураПараметровЗавершенияРаботыСтар.ЭтоИсключение <> СтруктураПараметровЗавершенияРаботы.ЭтоИсключение Тогда
		абс_ЗавершениеРаботы();	
	КонецЕсли;
	//АБС ВСТАВКА 37725 КОНЕЦ 
КонецПроцедуры

Процедура абс_Ожидание() Экспорт
	
	Секунд = ПроверитьПользователяНаУсловнуюОптимизацию(глЗначениеПеременной("глТекущийПользователь")).ЗадержкаВСекундах;	
	
    ВремяОтсчета = ТекущаяДата();
    Пока ТекущаяДата() - ВремяОтсчета < Секунд Цикл
	КонецЦикла;
	
КонецПроцедуры

//АБС ВСТАВКА 37725  17.01.2014 18:22:08  Шамов
Процедура абс_ЗавершениеРаботы() Экспорт
	Проверять = абс_УправлениеСеансомТонкогоКлиентаСервер.абс_ЗавершениеРаботыСервер(СтруктураПараметровЗавершенияРаботы.абс_ИнтервалПроверкиЗавершенияРаботы);	
	
	Если Проверять ТОгда
		
		Ответ = Вопрос("Система не используется продолжительное время. Продолжить работу в системе?", РежимДиалогаВопрос.ДаНет, СтруктураПараметровЗавершенияРаботы.абс_ТаймаутЗавершенияРаботы, КодВозвратаДиалога.Да, "ВНИМАНИЕ", КодВозвратаДиалога.Нет);
	
		Если Ответ = КодВозвратаДиалога.Таймаут
			ИЛИ Ответ = КодВозвратаДиалога.Нет Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры
//АБС ВСТАВКА 37725 КОНЕЦ 

Функция ПроверитьПользователяНаУсловнуюОптимизацию(Пользователь) 
	
	Структура = Новый Структура;
	Структура.Вставить("Пользователь",Неопределено);
	Структура.Вставить("ИнтервалПроверкиЗадержкиВСекундах",0);
	Структура.Вставить("ЗадержкаВСекундах",0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	абс_УсловнаяОптимизация.Пользователь,
	               |	абс_УсловнаяОптимизация.ИнтервалПроверкиЗадержкиВСекундах,
	               |	абс_УсловнаяОптимизация.ЗадержкаВСекундах
	               |ИЗ
	               |	РегистрСведений.абс_УсловнаяОптимизация КАК абс_УсловнаяОптимизация
	               |ГДЕ
	               |	абс_УсловнаяОптимизация.Пользователь В(&Пользователь)";
	Запрос.УстановитьПараметр("Пользователь",Пользователь);			   
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Структура = Новый Структура;
		Структура.Вставить("Пользователь",Результат.Пользователь);
		Структура.Вставить("ИнтервалПроверкиЗадержкиВСекундах",Результат.ИнтервалПроверкиЗадержкиВСекундах);
		Структура.Вставить("ЗадержкаВСекундах",Результат.ЗадержкаВСекундах);	
	КонецЕсли;	
	
	Возврат Структура;
	
КонецФункции	

// Обработать параметр запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ПараметрЗапуска  – Строка – параметр запуска, переданный в конфигурацию 
//								с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(Знач ПараметрЗапуска)

	// есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	Результат = УправлениеСоединениямиИБ.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	Возврат Результат;

КонецФункции 

// Открывает форму текущего пользователя для изменения его настроек.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуТекущегоПользователя() Экспорт

	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не задан текущий пользователь.");
	Иначе
		Форма = глЗначениеПеременной("глТекущийПользователь").ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуТекущегоПользователя()

// ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия
//
Процедура ПроверитьНапоминанияКалендарьБухгалтераСобытия() Экспорт
	РегламентированнаяОтчетность.ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия(глЗначениеПеременной("глТекущийПользователь"));
КонецПроцедуры // ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия
	
// Процедура осуществляет проверку на необходимость обмена данными с заданным интервалом
Процедура ПроверкаОбменаДанными() Экспорт

	Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ОтключитьОбработчикОжидания("ПроверкаОбменаДанными");
	
	// проводим обмен данными
	глЗначениеПеременной("глОбработкаАвтоОбменДанными").ПровестиОбменДанными(); 
		
	ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));


КонецПроцедуры

// функция вызова формы редактирования настройки файла обновления конфигурации
Процедура ОткрытьФормуРедактированияНастройкиФайлаОбновления() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		
		Предупреждение("Нет прав на чтение данных константы ""Настройка файла обновления конфигурации""", 30, "Настройка файла обновления конфигурации");		
		Возврат;
		
	КонецЕсли;

	ФормаРедактирования = ПолучитьОбщуюФорму("НастройкаФайлаОбновленияКонфигурации");
	ФормаРедактирования.СтруктураПараметров = ПроцедурыОбменаДанными.ПолучитьНастройкиДляФайлаОбновленияКонфигурации(); 
	ФормаРедактирования.Открыть();
	
КонецПроцедуры

// Функция возвращает объект для взаимодействия с торговым оборудованием.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <ОбработкаОбъект> - Объект для взаимодействия с торговым оборудованием.
//
Функция ПолучитьСерверТО() Экспорт

	Если глСерверТО = Неопределено Тогда
		глСерверТО = Обработки.ТОСервер.Создать();
	КонецЕсли;

	Возврат глСерверТО;

КонецФункции // ПолучитьСерверТО()

////////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТООБОРОТ С НАЛОГОВЫМИ ОРГАНАМИ
//

Функция ИнициализироватьКонтекстДокументооборотаСНалоговымиОрганами() Экспорт
	
	ЭтоПерваяИтерация = Истина;
	ИнициализироватьКонтекст = Истина;
	Пока ИнициализироватьКонтекст Цикл
	
		ИнициализироватьКонтекст = Ложь;
		
		// если подключена внешняя обработка, то используем ее
		Если ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль)
		И ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль) Тогда
			
			// если подключена внешняя обработка, то используем ее
			Если Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Получить() Тогда
				ВнешниеОбъектыХранилище = Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль;
				ДвоичныеДанныеОбработки = ВнешниеОбъектыХранилище.Получить().Получить();
				Если ДвоичныеДанныеОбработки <> Неопределено Тогда
					ИмяФайлаОбработки = ПолучитьИмяВременногоФайла("epf");
					ДвоичныеДанныеОбработки.Записать(ИмяФайлаОбработки);
					Попытка
						КонтекстЭДО = ВнешниеОбработки.Создать(ИмяФайлаОбработки);
					Исключение
						Сообщить("Не удалось загрузить внешний модуль для документооборота с налоговыми органами:
								|" + ИнформацияОбОшибке().Описание + "
								|Будет использован модуль, встроенный в конфигурацию.", СтатусСообщения.Важное);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// если внешняя не подключена, то используем встроенную
		Если КонтекстЭДО = Неопределено И ПравоДоступа("Использование", Метаданные.Обработки.ДокументооборотСКонтролирующимиОрганами) Тогда
			КонтекстЭДО = Обработки.ДокументооборотСКонтролирующимиОрганами.Создать();
		КонецЕсли;
		
		// обновляем модуль документооборота с ФНС из Интернет при необходимости
		Если ЭтоПерваяИтерация И КонтекстЭДО <> Неопределено Тогда
			Попытка
				МодульОбновлен = КонтекстЭДО.ОбновитьМодульДокументооборотаСФНСПриНеобходимости();
				Если МодульОбновлен Тогда
					ИнициализироватьКонтекст = Истина;
				КонецЕсли;
			Исключение
				Сообщить("Не удалось проверить доступность обновления модуля документооборота с ФНС по причине внутренней ошибки:
						|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
		
		ЭтоПерваяИтерация = Ложь;
		
	КонецЦикла;
	
	Возврат (КонтекстЭДО <> Неопределено);
	
КонецФункции

Процедура ОбработчикАвтообменаСНалоговымиОрганами() Экспорт
	
	Если КонтекстЭДО <> Неопределено Тогда
		КонтекстЭДО.ОбработчикАвтообмена();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьОбработчикАвтообменаСНалоговымиОрганами()
	
	Если РольДоступна("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами") ИЛИ РольДоступна("ПолныеПрава") Тогда
		Если КонтекстЭДО <> Неопределено Тогда
			Попытка
				КонтекстЭДО.ПодключитьОбработчикАвтообменаСНалоговымиОрганами();
			Исключение
				Сообщить("Не удалось инициализировать обработчик автоматического обмена с контролирующими органами:
								|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// процедура служит для поддержки работы регламентных заданий в файловой версии
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры

// Процедура подключает внешние компоненты, которые поставляются с конфигурацией.
//
Процедура ПолучитьВнешниеКомпонентыПриНеобходимости()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеКомпоненты.ИмяФайла,
	|	ВнешниеКомпоненты.ДатаИзмененияФайла
	|ИЗ
	|	РегистрСведений.ВнешниеКомпоненты КАК ВнешниеКомпоненты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Файл = Новый Файл(КаталогПрограммы()+ Выборка.ИмяФайла);
		Если Не Файл.Существует() Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не Файл.ПолучитьВремяИзменения() = Выборка.ДатаИзмененияФайла Тогда
			НаборЗаписей = РегистрыСведений.ВнешниеКомпоненты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИмяФайла.Установить(Выборка.ИмяФайла);
			НаборЗаписей.Прочитать();
			
			Попытка
				НаборЗаписей[0].ХранилищеФайла.Получить().Записать(КаталогПрограммы()+ Выборка.ИмяФайла);
				Файл = Новый Файл(КаталогПрограммы()+ Выборка.ИмяФайла);
				Файл.УстановитьВремяИзменения(Выборка.ДатаИзмененияФайла);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьВнешниеКомпонентыПриНеобходимости()

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в данной процедуре.
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)

	Если мКлиентOnline <> Неопределено Тогда
		мКлиентOnline.ВнешнееСобытие(Источник, Событие, Данные);
	КонецЕсли;

	ПолучитьСерверТО().ЗавершитьОбработкуВнешнегоСобытия(Источник, Событие, Данные);

КонецПроцедуры // ВнешнееСобытие()

// Процедура выполняет запуск отчетов, у которых установлен
// признак "Формировать при входе в систему"
//
Процедура СформироватьОтчеты()

	//МониторНачалоСеанса = ВосстановитьЗначение("МониторНачалоСеанса");

	//Если МониторНачалоСеанса <> Неопределено
	//	И МониторНачалоСеанса Тогда

		ВыбраннаяНастройка = ВосстановитьЗначение( "ОбработкаРапортРуководителю_Настройки");
		Если Не ВыбраннаяНастройка = Неопределено Тогда

			Параметры = Неопределено;
			Если ВыбраннаяНастройка.Свойство("_ДанныеФормы", Параметры) Тогда
				АвтоЗапуск = Неопределено;
				Параметры.Свойство("ФормироватьПриСтартеСистемы", АвтоЗапуск);
				Если Не АвтоЗапуск = Неопределено И АвтоЗапуск Тогда
					НовыйОтчет = Отчеты.РапортРуководителю.Создать();
					НовыйОтчетФорма = НовыйОтчет.ПолучитьФорму("ФормаГлавная");
					НовыйОтчетФорма.НачальноеЗначениеВыбора = Истина;
					НовыйОтчетФорма.Открыть();
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	//	
	//КонецЕсли;

КонецПроцедуры

// Процедура проверяет и при необходимости подключает обработчик ожидания
// на запуск процедуры ПроверитьНапоминания()
//
// Параметры:
//  Нет.
//
Процедура ПроверитьПодключениеОбработчикаОжидания(ПроверятьДеньРождения = Ложь) Экспорт
	
	ИнтервалПроверкиНапоминанийВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	
	Если глЗначениеПеременной("глТекущийПользователь") <> Неопределено
		 И ТипЗнч(глЗначениеПеременной("глТекущийПользователь")) = Тип("СправочникСсылка.Пользователи")
		 И НЕ глЗначениеПеременной("глТекущийПользователь").Пустая()
		 И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьНапоминания")
		 И ИнтервалПроверкиНапоминанийВСекундах > 0 Тогда
		 
		ПодключитьОбработчикОжидания("ПроверитьНапоминания", ИнтервалПроверкиНапоминанийВСекундах);

		УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"), ПроверятьДеньРождения);

	Иначе
		
		ОтключитьОбработчикОжидания("ПроверитьНапоминания");
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура проверяет Напоминания
//
Процедура ПроверитьНапоминания() Экспорт
	
	УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));
	
КонецПроцедуры

//АБС_Вставка Попов Мониторинг PerfExpert   
Процедура СообщениеМониторинга(сообщение)
     Сообщить(сообщение);
КонецПроцедуры    

Процедура ЗагрузкаМониторинга()
	Перем Запр;
	Перем Spid;
	Перем mon;
	Перем версия1с;
    КаталогКомпоненты = глЗначениеПеременной("абс_ОбщийКаталогPerfExpert");	
	
	НайденныеФайлы = НайтиФайлы(КаталогКомпоненты + "\sp_mon8.dll");
	Если НайденныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	try
		СисИнфо = Новый СистемнаяИнформация;
		версия1с = СисИнфо.ВерсияПриложения;
		НайденныйИндекс = Найти(версия1с, "8.3");
		Если НайденныйИндекс = 0 Тогда
			ЗапросМониторинг=Новый Запрос("Выбрать ""softpoint auth""");
			ЗапросМониторинг.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ЗапросМониторинг.Выполнить();
		Иначе
			ЗапросМониторинг = Новый Запрос;
			ЗапросМониторинг.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ЗапросМониторинг.Текст="ВЫБРАТЬ
			                       |	""softpoint auth"" КАК Авторизация
			                       |ПОМЕСТИТЬ Softpoint";
			ЗапросМониторинг.Выполнить();
		КонецЕсли;
		
		ЗагрузитьВнешнююКомпоненту(КаталогКомпоненты+"\sp_mon8.dll");
        ЗагрузитьВнешнююКомпоненту(КаталогКомпоненты+"\sp_mon8.dll");
		
		mon = Новый("AddIn.SPMon8");
		Если mon.InitMonitor() = 0 Тогда
			СообщениеМониторинга("Ошибка инициализации мониторинга: " + mon.GetLastError());
			ЗапросМониторинг.МенеджерВременныхТаблиц.Закрыть();
			Возврат;
		КонецЕсли
	except
		СообщениеМониторинга("Ошибка 1С при загрузке внешней компоненты мониторинга: " + ОписаниеОшибки());
		ЗапросМониторинг.МенеджерВременныхТаблиц.Закрыть();
		Возврат;
	endtry;

	mon.SetParam("server", НСтр(СтрокаСоединенияИнформационнойБазы(), "Srvr"));
  	mon.SetParam("db", СтрокаСоединенияИнформационнойБазы());
	Spid = НомерСеансаИнформационнойБазы();
	
	try
		Если mon.SetupMonitor(ИмяПользователя(), СтрЗаменить(Строка(Spid), Символы.НПП, "")) = 0 Тогда
			СообщениеМониторинга("Ошибка запуска мониторинга: " + mon.GetLastError());
			ЗапросМониторинг.МенеджерВременныхТаблиц.Закрыть();
			Возврат;	
		КонецЕсли
	except
		СообщениеМониторинга("Ошибка 1С при запуске мониторинга: " + ОписаниеОшибки());
		ЗапросМониторинг.МенеджерВременныхТаблиц.Закрыть();
		Возврат;
	endtry;
	
    mon.SetParam("user", ИмяПользователя());
    mon.SetParam("log", "on");	
КонецПроцедуры
//АБС_Вставка Попов Мониторинг PerfExpert


//глСоответствиеТекстовЭлектронныхПисем = Новый Соответствие;

АдресРесурсовОбозревателя = "Enterprise";