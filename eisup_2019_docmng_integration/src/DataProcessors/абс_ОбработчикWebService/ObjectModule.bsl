Перем Описание Экспорт, Прокси Экспорт, Фабрика Экспорт;


////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ

&НаКлиенте
// Саморегистрация в интерактивных параметрах системы
Процедура Регистрация() Экспорт
	
	// Получить обработку для регистрации
	абс_ОбработчикWebServiceПараметры = Константы.абс_ОбработчикWebService.Получить().Получить();
	Если НЕ ТипЗнч(абс_ОбработчикWebServiceПараметры) = Тип("Соответствие") Тогда
		абс_ОбработчикWebServiceПараметры = Новый Соответствие;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(абс_ОбработчикWebServiceПараметры) Тогда
		абс_ОбработчикWebServiceСсылка = абс_ОбработчикWebServiceПараметры["Ссылка"];
	Иначе
		абс_ОбработчикWebServiceСсылка = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(абс_ОбработчикWebServiceСсылка) Тогда
		ВнОбработка = Справочники.ВнешниеОбработки.СоздатьЭлемент();	
		ВнОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
		//ВнОбработка.ПолучитьФорму().ОткрытьМодально();
	Иначе
		ВнОбработка = абс_ОбработчикWebServiceСсылка.ПолучитьОбъект();
	КонецЕсли;	
	
	ЗначениеВозврата = ВыбратьФайл();
	Если ЗначениеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаВнешнейОбработки   = ЗначениеВозврата.ПолноеИмяФайлаОбработки;
	
	ВнОбработка.ХранилищеВнешнейОбработки = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаВнешнейОбработки));
	ВнОбработка.Наименование = Метаданные().Синоним;
	ВнОбработка.КомментарийКФайлуИсточнику  = ЗначениеВозврата.КомментарийКФайлу;
	
	ВнОбработка.ОбменДанными.Загрузка = Истина;
	ВнОбработка.Записать();
	
	// Регистрация обработки
	Если НЕ ВнОбработка.ЭтоНовый() Тогда
		Если НЕ ТипЗнч(абс_ОбработчикWebServiceПараметры) = Тип("Соответствие") Тогда
			абс_ОбработчикWebServiceПараметры = Новый Соответствие();
		КонецЕсли;
		абс_ОбработчикWebServiceПараметры.Вставить("Ссылка", ВнОбработка.Ссылка);
		Константы.абс_ОбработчикWebService.Установить(Новый ХранилищеЗначения(абс_ОбработчикWebServiceПараметры));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
// Саморегистрация в интерактивных параметрах системы
Процедура ОткатРегистрации() Экспорт
	
	// Регистрация пустой обработки
	абс_ОбработчикWebServiceПараметры = Константы.абс_ОбработчикWebService.Получить().Получить();
	Если НЕ ТипЗнч(абс_ОбработчикWebServiceПараметры) = Тип("Соответствие") Тогда
		абс_ОбработчикWebServiceПараметры = Новый Соответствие;
	КонецЕсли;
	
	абс_ОбработчикWebServiceПараметры["Ссылка"] = Неопределено;
	
	Константы.абс_ОбработчикWebService.Установить(Новый ХранилищеЗначения(абс_ОбработчикWebServiceПараметры));
	
КонецПроцедуры

&НаКлиенте
// Выбирает файл внешней обработки
Функция ВыбратьФайл()
	
	ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогФайла.Заголовок = "Укажите путь к файлу внешней обработки абс_ОбработчикWebService.epf";
	ДиалогФайла.Фильтр = "Внешняя обработка(*.epf)|*.epf";
	
	ВнешняяОбработка = Неопределено;
	
	Если ДиалогФайла.Выбрать() Тогда
		
		ПолноеИмяФайлаОбработки = ДиалогФайла.ПолноеИмяФайла;
		
		Попытка
			
			СообщениеОшибки = "Выбранный файл не является внешней обработкой.
			|Либо, данная обработка не предназначена для
			|запуска в этой конфигурации.";
			ВнешняяОбработка = ВнешниеОбработки.Создать(ПолноеИмяФайлаОбработки);
			
		Исключение
			
			Сообщить(ОписаниеОшибки());
			Предупреждение(СообщениеОшибки);
			
			ПолноеИмяФайлаОбработки = "";
			
			Возврат Неопределено;
			
		КонецПопытки;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогФайла.ПолноеИмяФайла);
	
	КомментарийКФайлу = Файл.Имя + Символы.ПС + "размер:" + Файл.Размер()+" байт; изменен:" + Файл.ПолучитьВремяИзменения() + "; сохранен в ИБ:" + ТекущаяДата();
	
	СтруктураВозврата = Новый Структура("КомментарийКФайлу,ПолноеИмяФайлаОбработки,ИмяФайлаОбработки,ВнешняяОбработка", КомментарийКФайлу, ПолноеИмяФайлаОбработки, Файл.Имя, ВнешняяОбработка);
	
	Возврат СтруктураВозврата;
	
КонецФункции // ВыбратьФайл()



////////////////////////////////////////////////////////////////////////////////////	
// ОБЩИЕ ПРОЦЕДУРЫ ДЛЯ РАБОТЫ WEBSERVICE

&НаСервере
// Инициализирует WebService
Процедура ИнициализацияWebService() Экспорт
	
	#Если Клиент Тогда
		Состояние("Инициализация WebService");
	#КонецЕсли	
	
	Если НЕ ЗначениеЗаполнено(_Сервер) ИЛИ НЕ ЗначениеЗаполнено(_БазаДанных) ИЛИ НЕ ЗначениеЗаполнено(_Пользователь) Тогда
		абс_WebService.СообщитьОбОшибке("Необходимо задать настройки подключения к WebServer!", "ИнициализацияWebService()");
		Возврат;
	КонецЕсли;
	
	Протокол = ?(_https, "https://", "http://");
	
	// Попытка соединиться по WS-ссылке
	Если НЕ Метаданные.WSСсылки.Найти("Countragents_") = Неопределено Тогда
		Прокси = WSСсылки.Countragents.СоздатьWSПрокси("http://www.abs-soft.ru/", "Countragents", "CountragentsSoap"); 	
	Иначе
		// Создание описания по WSDL файлу	
		Определение = Новый WSОпределения(Протокол + _Сервер + "/" + _БазаДанных + "/ws/Countragents.1cws?wsdl", _Пользователь, _ПарольПользователя); 
		// Создание прокси для обращения к сервису и фабрике XDTO
		Прокси = Новый WSПрокси(Определение, "http://www.abs-soft.ru/", "Countragents", "CountragentsSoap"); 
	КонецЕсли;
	
	Прокси.Пользователь = _Пользователь;
	Прокси.Пароль 		= _ПарольПользователя;
	Фабрика 			= Прокси.ФабрикаXDTO;
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
КонецПроцедуры
// Инициализирует WebService
Процедура ИнициализацияWebServiceДоговоры() Экспорт
	
	#Если Клиент Тогда
		Состояние("Инициализация WebService");
	#КонецЕсли	
	
	Если НЕ ЗначениеЗаполнено(_Сервер) ИЛИ НЕ ЗначениеЗаполнено(_БазаДанных) ИЛИ НЕ ЗначениеЗаполнено(_Пользователь) Тогда
		абс_WebService.СообщитьОбОшибке("Необходимо задать настройки подключения к WebServer!", "ИнициализацияWebService()");
		Возврат;
	КонецЕсли;
	
	Протокол = ?(_https, "https://", "http://");
	
	// Попытка соединиться по WS-ссылке
	Если НЕ Метаданные.WSСсылки.Найти("Dogovory_") = Неопределено Тогда
		Прокси = WSСсылки.Dogovory.СоздатьWSПрокси("http://www.sample-package.org", "Dogovory", "DogovorySoap"); 	
	Иначе
		// Создание описания по WSDL файлу	
		Определение = Новый WSОпределения(Протокол + _Сервер + "/" + _БазаДанных + "/ws/Dogovory?wsdl", _Пользователь, _ПарольПользователя); 
		// Создание прокси для обращения к сервису и фабрике XDTO
		Прокси = Новый WSПрокси(Определение, "http://www.sample-package.org", "Dogovory", "DogovorySoap"); 
		//Прокси = Новый WSПрокси(Определение, "http://www.abs-soft.ru/", "Dogovory", "DogovorySoap"); 
	КонецЕсли;
	
	Прокси.Пользователь = _Пользователь;
	Прокси.Пароль 		= _ПарольПользователя;
	Фабрика 			= Прокси.ФабрикаXDTO;
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
КонецПроцедуры

// Сохраняет параметры подключения
Процедура СохранитьПараметры() Экспорт
	
	абс_ОбработчикWebServiceПараметры = Константы.абс_ОбработчикWebService.Получить().Получить();
	Если НЕ ТипЗнч(абс_ОбработчикWebServiceПараметры) = Тип("Соответствие") Тогда
		абс_ОбработчикWebServiceПараметры = Новый Соответствие();
	КонецЕсли;
	абс_ОбработчикWebServiceПараметры.Вставить("_Сервер", 					_Сервер);
	абс_ОбработчикWebServiceПараметры.Вставить("_БазаДанных", 				_БазаДанных);
	абс_ОбработчикWebServiceПараметры.Вставить("_Пользователь", 			_Пользователь);
	абс_ОбработчикWebServiceПараметры.Вставить("_ПарольПользователя", 		_ПарольПользователя);
	абс_ОбработчикWebServiceПараметры.Вставить("_https", 					_https);
	абс_ОбработчикWebServiceПараметры.Вставить("_БазаДанныхНоменклатура",	_БазаДанныхНоменклатура);
	
	
	Константы.абс_ОбработчикWebService.Установить(Новый ХранилищеЗначения(абс_ОбработчикWebServiceПараметры));
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// ИНТЕГРАЦИЯ С ИСУЗК

Функция ChangeStatusDogovor(Number, ID, Status) Экспорт
	
	Модуль = Справочники.абс_МодулиДляВыполнения.ChangeStatusDogovor;
	МодульОбъект = Модуль.ПолучитьОбъект();
	
	МодульОбъект.Параметры.Очистить();
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "Number";
	НоваяСтрокаПараметры.ЗначениеПараметра = Number;
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "ID";
	НоваяСтрокаПараметры.ЗначениеПараметра = ID;
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "Status";
	НоваяСтрокаПараметры.ЗначениеПараметра = Status;
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "Result";
	НоваяСтрокаПараметры.ЗначениеПараметра = "";
	
	МодульОбъект.Записать();

	МодульОбъект.ВыполнитьМодуль();
	
	Результат = Ложь;
	Строка = МодульОбъект.Параметры.Найти("Result", "ИмяПараметра");
	Если Строка <> Неопределено Тогда 
		Результат = Строка.ЗначениеПараметра;
	КонецЕсли;
		
	Возврат Результат;

КонецФункции

Функция ChangeStatusAct(Number, ID, Status) Экспорт
	
	Модуль = Справочники.абс_МодулиДляВыполнения.ChangeStatusAct;
	МодульОбъект = Модуль.ПолучитьОбъект();
	
	МодульОбъект.Параметры.Очистить();
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "Number";
	НоваяСтрокаПараметры.ЗначениеПараметра = Number;
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "ID";
	НоваяСтрокаПараметры.ЗначениеПараметра = ID;
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "Status";
	НоваяСтрокаПараметры.ЗначениеПараметра = Status;
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "Result";
	НоваяСтрокаПараметры.ЗначениеПараметра = "";
	
	МодульОбъект.Записать();

	МодульОбъект.ВыполнитьМодуль();
	
	Результат = Ложь;
	Строка = МодульОбъект.Параметры.Найти("Result", "ИмяПараметра");
	Если Строка <> Неопределено Тогда 
		Результат = Строка.ЗначениеПараметра;
	КонецЕсли;
		
	Возврат Результат;

КонецФункции

Функция CreateDogovor(Number, Date, Data) Экспорт
	
	Модуль = Справочники.абс_МодулиДляВыполнения.CreateDogovor;
	МодульОбъект = Модуль.ПолучитьОбъект();
	
	МодульОбъект.Параметры.Очистить();
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "Number";
	НоваяСтрокаПараметры.ЗначениеПараметра = Number;
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "Date";
	НоваяСтрокаПараметры.ЗначениеПараметра = Date;
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "Result";
	НоваяСтрокаПараметры.ЗначениеПараметра = "Ложь";

	ДанныеДокумента = Data;
	
	МодульОбъект.Записать();
	МодульОбъект.ВыполнитьМодуль(, ДанныеДокумента);
	
	Результат = Ложь;
	Строка = МодульОбъект.Параметры.Найти("Result", "ИмяПараметра");
	Если Строка <> Неопределено Тогда 
		Результат = Строка.ЗначениеПараметра;
	КонецЕсли;
		
	Возврат Результат;

КонецФункции

Функция CreateAct(Number, Date, Data) Экспорт
	
	Модуль = Справочники.абс_МодулиДляВыполнения.CreateAct;
	МодульОбъект = Модуль.ПолучитьОбъект();
	
	МодульОбъект.Параметры.Очистить();
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "Number";
	НоваяСтрокаПараметры.ЗначениеПараметра = Number;
	
	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "Date";
	НоваяСтрокаПараметры.ЗначениеПараметра = Date;

	НоваяСтрокаПараметры = МодульОбъект.Параметры.Добавить();
	НоваяСтрокаПараметры.ИмяПараметра = "Result";
	НоваяСтрокаПараметры.ЗначениеПараметра = "Ложь";
	
	ДанныеДокумента = Data;

	МодульОбъект.Записать();
	МодульОбъект.ВыполнитьМодуль(, ДанныеДокумента);
	
	Результат = Ложь;
	Строка = МодульОбъект.Параметры.Найти("Result", "ИмяПараметра");
	Если Строка <> Неопределено Тогда 
		Результат = Строка.ЗначениеПараметра;
	КонецЕсли;
		
	Возврат Результат;   

КонецФункции

//АБС+++ Гончаров 16.04.2013
Функция CreateVedomost(Number, Date, Data) Экспорт
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("Viplata_Zarplati", "Rezult"));
	ОтветXDTO.Rez = Ложь;
	ОтветXDTO.Error = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗарплатаКВыплатеОрганизаций.Ссылка
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизаций.Номер = &Номер
		|	И НачалоПериода(ЗарплатаКВыплатеОрганизаций.Дата, ДЕНЬ) = НачалоПериода(&Дата, ДЕНЬ)";
	Запрос.УстановитьПараметр("Дата", Date);
	Запрос.УстановитьПараметр("Номер", Number);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ВыплатаЗПСсылка = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыплатаЗПСсылка = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ВыплатаЗПСсылка.Прочитать();
	КонецЦикла;	
	Если ВыплатаЗПСсылка = Неопределено Тогда
		ВыплатаЗПСсылка = Документы.ЗарплатаКВыплатеОрганизаций.СоздатьДокумент(); 		
	КонецЕсли;	
	абс_ТекстОшибки = "";
	РезультатXDTO = Ложь;
	Попытка
		ВыплатаЗПСсылка.Дата = Date;
		ВыплатаЗПСсылка.Номер = Number;
		ВыплатаЗПСсылка.абс_ВводПрограммно = Истина;
		абс_Данные = ЗначениеИзСтрокиВнутр(Data);
		ПервыйРаз = Истина;
		Для Каждого Строка Из абс_Данные Цикл
			Если ПервыйРаз Тогда 				
				ВыплатаЗПСсылка.Организация = ОпределитьОрганизацию(Строка.Организация_Код, абс_ТекстОшибки);
				ВыплатаЗПСсылка.абс_Статус = ОпределитьСтатусВыплатыЗП(Строка.Статус_, абс_ТекстОшибки);
				ВыплатаЗПСсылка.Банк = ОпределитьКонтрагента(Строка.Банк_Код, абс_ТекстОшибки);
				ВыплатаЗПСсылка.ДатаНачала = Строка.ДатаНачала;
				ВыплатаЗПСсылка.ДатаОкончания = Строка.ДатаОкончания;
				ВыплатаЗПСсылка.ПериодРегистрации = Строка.ПериодРегистрации;
				ВыплатаЗПСсылка.ПодразделениеОрганизации = ОпределитьПодразделениеОрганизации(Строка.Подразделение_Код, абс_ТекстОшибки);
				ВыплатаЗПСсылка.Комментарий = Строка.Комментарий;
				ВыплатаЗПСсылка.ДнейНеВыплаты = Строка.ДнейНеВыплаты;
				ВыплатаЗПСсылка.Округление = ОпределитьОкругление(Строка.Округление_, абс_ТекстОшибки);
				ВыплатаЗПСсылка.ПроцентВыплаты = Строка.ПроцентВыплаты;
				ВыплатаЗПСсылка.СуммаДокумента = Строка.СуммаДокумента;
				ВыплатаЗПСсылка.ХарактерВыплаты = ОпределитьХарактерВыплаты(Строка.ХарактерВыплаты_, абс_ТекстОшибки);
				ВыплатаЗПСсылка.СпособВыплаты = ОпределитьСпособВыплаты(Строка.СпособВыплаты_, абс_ТекстОшибки);
				ВыплатаЗПСсылка.Зарплата.Очистить();
			КонецЕсли;	
			/////////////////////////////////////////////////////////////////////////////////////
			СтрокаЗП = ВыплатаЗПСсылка.Зарплата.Добавить(); 
			СтрокаЗП.Авторасчет = Истина;
			СтрокаЗП.ВыплаченностьЗарплаты = ОпределитьВыплаченностьЗарплаты(Строка.ВыплаченностьЗарплаты, абс_ТекстОшибки);  			
			//АБС ВСТАВКА №45081 НАЧАЛО «4 июля 2014 г.», Пополитов   
			//было закомментировано 		
			//СтрокаЗП.КомпенсацияЗаЗадержкуЗарплаты = ;
			СтрокаЗП.КомпенсацияЗаЗадержкуЗарплаты = Строка.КомпенсацияЗаЗадержкуЗарплаты;
   			//\\АБС ВСТАВКА №45081 КОНЕЦ
			СтрокаЗП.Начислено = Строка.Начислено;
			СтрокаЗП.Сумма = Строка.Сумма;
			СтрокаЗП.Удержано = Строка.Удержано;
			Если ВыплатаЗПСсылка.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
				СтрокаЗП.Физлицо = ОпределитьФизЛицо(Строка.ФизЛицо, абс_ТекстОшибки);
			ИначеЕсли ВыплатаЗПСсылка.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
				СтрокаЗП.Физлицо = Константы.абс_СводноеФизЛицо.Получить();
			КонецЕСли;	
			///////////////////////////////////////////////////////////////////////////////////
			Если ПервыйРаз Тогда	
				ПервыйРаз = Ложь;
				абс_Проведен = Строка.Проведен;
				Если абс_ТекстОшибки = "" Тогда 				
					ВыплатаЗПСсылка.ПометкаУдаления = Строка.ПометкаУдаления;
					Если ВыплатаЗПСсылка.Проведен Тогда
						ВыплатаЗПСсылка.Проведен = абс_Проведен;
					КонецЕСлИ;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		ВыплатаЗПСсылка.абс_WebService_ = Истина;
		Если абс_ТекстОшибки = "" Тогда 
			ВыплатаЗПСсылка.Записать();
			Если абс_Проведен Тогда
				ВыплатаЗПСсылка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕСли;
		КонецЕсли;				
		РезультатXDTO = Истина;
	Исключение
		ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("Viplata_Zarplati", "Rezult"));
		ОтветXDTO.Rez = Ложь;
		ОтветXDTO.Error = ОписаниеОшибки();//"Невозможно записать документ в ИБ ЕИСУП!";
		Возврат ОтветXDTO;
	КонецПопытки;	
	Если Не абс_ТекстОшибки = "" Тогда
		ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("Viplata_Zarplati", "Rezult"));
		ОтветXDTO.Rez = Ложь;
		ОтветXDTO.Error = абс_ТекстОшибки;
	Иначе
		ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("Viplata_Zarplati", "Rezult"));
		ОтветXDTO.Rez = РезультатXDTO;
		ОтветXDTO.Error = "Успешно создан документ в ИБ ЕИСУП!";
	КонецЕсли;	
	//ОтветXDTO.Error = "вввввв" + Number;
	Возврат ОтветXDTO; 
КонецФункции

Функция ОпределитьФизЛицо(ФизЛицо, абс_ТекстОшибки)
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.абс_КодИСУЗК = &Код";  
	Запрос.УстановитьПараметр("Код", ФизЛицо); 
	Результат = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = Результат.Выбрать(); 
	Если Не ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	Иначе
		//абс_Текст = "Не найдено соответствующее физ. лицо с кодом: """ + ФизЛицо + """!";
		//абс_ТекстОшибки = ?(абс_ТекстОшибки = "", абс_Текст, "" + абс_ТекстОшибки + Символы.ПС + абс_Текст);
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕслИ;	
КонецФункции

//АБС Новоселов+
Функция ObnovitAktAgenta(Number, Date, Data, UIN) Экспорт
	
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-soft.ru/AgentScheme", "Rezult"));
	ОтветXDTO.Rez = Ложь;
	ОтветXDTO.Error = "Ошибка ЕИСУП: ";
	БылаОшибка = Ложь;
	
	ДанныеДок = ЗначениеИзСтрокиВнутр(Data);
	
	Попытка
		НовыйСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Получить(ДанныеДок.Статус);
	Исключение
		ДобавитьТекстОшибки("Переданы неверные данные 'Data': " + ОписаниеОшибки(), ОтветXDTO.Error);
		Возврат ОтветXDTO;
	КонецПопытки;
	
	Если не СокрЛП(UIN) = "" Тогда
		ПоступлениеСсылка = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(UIN)));
		Если ПоступлениеСсылка.Пустая() Тогда
			БылаОшибка = ДобавитьТекстОшибки("Не найден документ ПТиУ № " + Number + " от " + Date+ ", ключ:"+СокрЛП(UIN), ОтветXDTO.Error); 
			Возврат ОтветXDTO;
		Иначе
			Попытка
				Поступление = ПоступлениеСсылка.ПолучитьОбъект();
			Исключение
				БылаОшибка = ДобавитьТекстОшибки("Получение существующего документа: " + ОписаниеОшибки(), ОтветXDTO.Error); 
				Возврат ОтветXDTO;
			КонецПопытки;
		КонецЕсли;	
	Иначе   
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Номер = &Номер
		|	И НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)";
		Запрос.УстановитьПараметр("Дата", Date);
		Запрос.УстановитьПараметр("Номер", Number);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 		
			Попытка
				Поступление = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Исключение
				БылаОшибка = ДобавитьТекстОшибки("Получение существующего документа: " + ОписаниеОшибки(), ОтветXDTO.Error); 
				Возврат ОтветXDTO;
			КонецПопытки;		
		Иначе 		
			БылаОшибка = ДобавитьТекстОшибки("Не найден документ ПТиУ № " + Number + " от " + Date, ОтветXDTO.Error); 
			Возврат ОтветXDTO;  
		КонецЕсли;	
		
	КонецЕсли;
	
	Поступление.абс_Статус = НовыйСтатус;
	Поступление.ЭтоВэбСервис = Истина; 
	Поступление.ОбменДанными.Загрузка = Истина;
	
	Попытка
		Поступление.Записать(РежимЗаписиДокумента.Запись);
		Поступление.ЗаписатьНовыйСтатус(НовыйСтатус, ДанныеДок.ИмяПоьзователя, ДанныеДок.ИмяПоьзователя);
	Исключение
		БылаОшибка = ДобавитьТекстОшибки(ОписаниеОшибки(), ОтветXDTO.Error);
	КонецПопытки;
	ОтветXDTO.Rez = Не БылаОшибка;
			
	Возврат ОтветXDTO;

КонецФункции

Функция ДобавитьТекстОшибки(Текст, ТекстОшибки)
	Если ПустаяСтрока(ТекстОшибки) Тогда 
		ТекстОшибки = "" + Текст;
	Иначе 
		ТекстОшибки = ТекстОшибки + "
		|" + Текст;
	КонецЕсли;
	Возврат Истина;
КонецФункции
//\\АБС--- Новоселов 16.05.2013

Функция ОпределитьСпособВыплаты(СпособВыплаты, абс_ТекстОшибки)
	Если Не ЗначениеЗаполнено(СпособВыплаты) Тогда
		Возврат Перечисления.СпособыВыплатыЗарплаты.ПустаяСсылка();
	КонецЕсли; 	
	Возврат Перечисления.СпособыВыплатыЗарплаты.Получить(СпособВыплаты); 		
КонецФункции

Функция ОпределитьХарактерВыплаты(ХарактерВыплаты, абс_ТекстОшибки)
	Если Не ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		Возврат Перечисления.ХарактерВыплатыЗарплаты.ПустаяСсылка();
	КонецЕсли;
	Возврат Перечисления.ХарактерВыплатыЗарплаты.Получить(ХарактерВыплаты); 		
КонецФункции

Функция ОпределитьВыплаченностьЗарплаты(ВыплаченностьЗарплаты, абс_ТекстОшибки)
	Если Не ЗначениеЗаполнено(ВыплаченностьЗарплаты) Тогда
		Возврат Перечисления.ВыплаченностьЗарплаты.Выплачено;
	КонецЕсли;
	Возврат Перечисления.ВыплаченностьЗарплаты.Получить(ВыплаченностьЗарплаты); 		
КонецФункции

Функция ОпределитьОкругление(Округление, абс_ТекстОшибки)
	Если Не ЗначениеЗаполнено(Округление) Тогда
		Возврат Перечисления.СпособыОкругленияЗарплатыКВыплате.ПустаяСсылка();
	КонецЕсли;
	Возврат Перечисления.СпособыОкругленияЗарплатыКВыплате.Получить(Округление); 		
КонецФункции

Функция ОпределитьПодразделениеОрганизации(Подразделение_Код, абс_ТекстОшибки)
	Если Не ЗначениеЗаполнено(Подразделение_Код) Тогда
		Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.абс_КодИСУЗК = &Код";  
	Запрос.УстановитьПараметр("Код", Подразделение_Код); 
	Результат = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = Результат.Выбрать(); 
	Если Не ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	Иначе
		абс_Текст = "Не найден соответствующее подразделение с кодом: """ + Подразделение_Код + """!";
		абс_ТекстОшибки = ?(абс_ТекстОшибки = "", абс_Текст, "" + абс_ТекстОшибки + Символы.ПС + абс_Текст);
		Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕслИ;	
КонецФункции

Функция ОпределитьКонтрагента(Контрагент_Код, абс_ТекстОшибки)
	Если Не ЗначениеЗаполнено(Контрагент_Код) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Код = &Код";  
	Запрос.УстановитьПараметр("Код", Контрагент_Код); 
	Результат = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = Результат.Выбрать(); 
	Если Не ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	Иначе
		абс_Текст = "Не найден соответствующий контрагент с кодом: """ + Контрагент_Код + """!";
		абс_ТекстОшибки = ?(абс_ТекстОшибки = "", абс_Текст, "" + абс_ТекстОшибки + Символы.ПС + абс_Текст);
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕслИ;	
КонецФункции

Функция ОпределитьСтатусВыплатыЗП(Статус, абс_ТекстОшибки)
	Если Не ЗначениеЗаполнено(Статус) Тогда
		Возврат Перечисления.абс_СтатусыВыплатыЗарплаты.ПустаяСсылка();
	КонецЕсли;
	Возврат Перечисления.абс_СтатусыВыплатыЗарплаты.Получить(Статус); 		
КонецФункции

Функция ОпределитьОрганизацию(Организация_Код, абс_ТекстОшибки)
	Если Не ЗначениеЗаполнено(Организация_Код) Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Код = &Код";  
	Запрос.УстановитьПараметр("Код", Организация_Код); 
	Результат = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = Результат.Выбрать(); 
	Если Не ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	Иначе
		абс_Текст = "Не найдена соответствующая организация с кодом: """ + Организация_Код + """!";
		абс_ТекстОшибки = ?(абс_ТекстОшибки = "", абс_Текст, "" + абс_ТекстОшибки + Символы.ПС + абс_Текст);
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕслИ;	
КонецФункции	
//\\АБС--- Гончаров 16.04.2013

/////////////////////////////////////////////////////////////////////////////////////
// КОНТРАГЕНТЫ

Функция ПолучитьПеречислениеПоПредставлению(ИмяПеречисления,Представление)
	ТекПеречисление = Метаданные.Перечисления[ИмяПеречисления];
	Для Каждого ТекЗначПеречисления из   ТекПеречисление.ЗначенияПеречисления Цикл
		Если ТекЗначПеречисления.Синоним = Представление ТОгда
			Возврат Перечисления[ИмяПеречисления][ТекЗначПеречисления.Имя];
		КонецЕсли;
	КонецЦикла;
	Возврат   Перечисления[ИмяПеречисления].ПустаяСсылка();
КонецФункции

// KTTK. Обработчик согласования создания контрагента (KTTK)
Функция СоздатьКонтрагента(ПакетXDTO) Экспорт
	
	//ИнициализацияWebService();
	
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-soft.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	
	//Если НЕ ЗначениеЗаполнено(ТекКонтрагент) Тогда
	абс_Код_ИСУП_ТТК = СокрЛП(ПакетXDTO.ID);
	БылСозданНовый = Ложь;
	Если абс_Код_ИСУП_ТТК = "" Тогда
		ТекКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		ТекКонтрагент.ОбменДанными.Загрузка = Ложь;
		Попытка
			ТекКонтрагент.абс_Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Исключение
		КонецПопытки;
		
		БылСозданНовый = Истина;
	Иначе
		Нашли = Справочники.Контрагенты.НайтиПоКоду(абс_Код_ИСУП_ТТК);
		Если Нашли.Пустая() Тогда
			//ТекКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();	
			//ТекКонтрагент.ОбменДанными.Загрузка = Ложь;
			//ТекКонтрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка;
			ОтветXDTO.Error = "Контрагент с кодом " + абс_Код_ИСУП_ТТК + " не обнаружен!";
			Возврат ОтветXDTO;
		ИначеЕсли Нашли.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка ТОгда
			
			ТекКонтрагент = Нашли.ПолучитьОбъект();
			ТекКонтрагент.ОбменДанными.Загрузка = Ложь;
			ТекКонтрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка;
			
		ИначеЕсли  Нашли.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Отказ Тогда
			
			ТекКонтрагент = Нашли.ПолучитьОбъект();
			ТекКонтрагент.ОбменДанными.Загрузка = Ложь;
			ТекКонтрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка;
			
			Попытка
		
				// Попытка записать контрагента
				ТекКонтрагент.Записать();
				Если БылСозданНовый  Тогда
					ТекКонтрагент.ГоловнойКонтрагент = ТекКонтрагент.Ссылка;
					ТекКонтрагент.ОбменДанными.Загрузка = Истина;
					ТекКонтрагент.Записать();
				КонецЕсли;
				ОтветXDTO.ID = ТекКонтрагент.Код;
				
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "СогласоватьСозданиеКонтрагента()");
				ОтветXDTO.Error = ОписаниеОшибки;
				//ОтменитьТранзакцию();
			КонецПопытки;
	
	
			Возврат ОтветXDTO;
			
			
		Иначе
			ОписаниеОшибки = "Статус контрагента в ЕИСУП ТТК отличный от Подготовки. Статус заменен на "+СокрЛП(Нашли.абс_СтатусКонтрагента)+" #"+Перечисления.абсСтатусыКонтрагентов.Индекс(Нашли.абс_СтатусКонтрагента)+"#";//21092011
			абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "СогласоватьСозданиеКонтрагента()");
			ОтветXDTO.Error = ОписаниеОшибки;
			Возврат ОтветXDTO;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыКонтрагентаПоXTDO(ПакетXDTO, ТекКонтрагент);
	
	//Вставка 17.11.2077 нач
	СЗОшибок = новый СписокЗначений;
	СтрокаСообщений = "";
	Если СокрЛП(ПакетXDTO.Type_ID) = "" ТОгда
		СЗОшибок.Добавить("не заполнено поле - Тип контрагента");
		СтрокаСообщений = СтрокаСообщений+ "не заполнено поле - Тип контрагента"+ Символы.ПС;
	КонецЕсли;
	
	//Если СокрЛП(ПакетXDTO.No_Resident) = "0" ТОгда
	//	Если 
	//	СтрокаСообщений = СтрокаСообщений+ "не заполнено поле - Тип контрагента"		
	//КонецЕсли;
	
	СЗОшибок = ПроверитьЗаполнениеРеквизитовXTDOКонтрагентыЕИСУП(ПакетXDTO);
	СтрокаСообщений ="";
	Если СЗОшибок.Количество() > 0 ТОгда
		Для Каждого СтрокаСЗ из СЗОшибок Цикл
			СтрокаСообщений = СтрокаСообщений + (СтрокаСЗ.Значение) + Символы.ПС;	
		КонецЦикла;
		ОтветXDTO.Error = СтрокаСообщений;
		Возврат ОтветXDTO;
		//ОтветXDTO.Error = СтрокаСообщений;
		//Возврат ОтветXDTO;	
	КонецЕсли;
	//Вставка 17.11.2077 кон

	
	
	
	Попытка
		
		// Попытка записать контрагента
		ТекКонтрагент.Записать();
		Если БылСозданНовый  Тогда
			ТекКонтрагент.ГоловнойКонтрагент = ТекКонтрагент.Ссылка;
			ТекКонтрагент.ОбменДанными.Загрузка = Истина;
			ТекКонтрагент.Записать();
		КонецЕсли;
		ОтветXDTO.ID = ТекКонтрагент.Код;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "СогласоватьСозданиеКонтрагента()");
		ОтветXDTO.Error = ОписаниеОшибки;
		//ОтменитьТранзакцию();
	КонецПопытки;
	
	
	Возврат ОтветXDTO;
	
КонецФункции
// {{KM WARE Червяков В.М. Заявка № 25.01.2016 начало
Функция СоздатьДоговор(ПакетXDTO) Экспорт
	
	//ИнициализацияWebService();
	
	//ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.sample-package.org/", "Answer"));
ТипXDTOРезультатОперации  = ФабрикаXDTO.Тип("http://www.sample-package.org", "Answer");
ОтветXDTO =  ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	ОтветXDTO.Guid 	= "";
	
	//Если НЕ ЗначениеЗаполнено(ТекКонтрагент) Тогда
	абс_Код_ИСУП_ТТК = СокрЛП(ПакетXDTO.ID_Kontr);
	//БылСозданНовый = Ложь;
	Если (абс_Код_ИСУП_ТТК = "") ИЛИ (абс_Код_ИСУП_ТТК = "ОбъектXDTO") Тогда
			ОтветXDTO.Error = "не заполнено поле - код контрагента!";
			Возврат ОтветXDTO;
		//БылСозданНовый = Истина;
	Иначе
		КонтрагентВладелец = Справочники.Контрагенты.НайтиПоКоду(абс_Код_ИСУП_ТТК);
		Если КонтрагентВладелец.Пустая() Тогда
			//ТекКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();	
			//ТекКонтрагент.ОбменДанными.Загрузка = Ложь;
			//ТекКонтрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка;
			ОтветXDTO.Error = "Контрагент с кодом " + абс_Код_ИСУП_ТТК + " не обнаружен!";
			Возврат ОтветXDTO;
		КонецЕсли;	
	КонецЕсли;
	абс_Код_Организации = СокрЛП(ПакетXDTO.ID_Org);
	//БылСозданНовый = Ложь;
	Если (абс_Код_Организации = "") ИЛИ  (абс_Код_Организации = "ОбъектXDTO") Тогда
			ОтветXDTO.Error = "не заполнено поле - код организации!";
			Возврат ОтветXDTO;
		//БылСозданНовый = Истина;
	Иначе
		Организация = Справочники.Организации.НайтиПоКоду(абс_Код_Организации);
		Если Организация.Пустая() Тогда
			//ТекКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();	
			//ТекКонтрагент.ОбменДанными.Загрузка = Ложь;
			//ТекКонтрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка;
			ОтветXDTO.Error = "организация с кодом " + абс_Код_Организации + " не обнаружена!";
			Возврат ОтветXDTO;
		КонецЕсли;	
		КонецЕсли;
    мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				 КодВалюты =  СокрЛП(ПакетXDTO.ID_Val);
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	Если КодВалюты = "" ТОгда
    НовыйДоговор.ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаРегламентированногоУчета");
    Иначе
	НовыйДоговор.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(КодВалюты);			 
    КонецЕсли;
	Если НЕ (ЗначениеЗаполнено(НовыйДоговор.ВалютаВзаиморасчетов)) Тогда
    НовыйДоговор.ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаРегламентированногоУчета");
КонецЕсли;	
	НовыйДоговор.Организация = Организация;
	
	//ЗаполнитьЗначенияСвойств(НовыйДоговор, ЭтотОбъект);
	
	//НовыйДоговор.Номер                       = НомерДоговора;
	ДатаДоговора = ТекущаяДата();
	НовыйДоговор.Дата                        = ДатаДоговора;
	НовыйДоговор.абс_ДатаНачалаДействия      = ДатаДоговора;
	НовыйДоговор.абс_ДатаРегистрацииДоговора = ДатаДоговора; 
	НовыйДоговор.Владелец                    = КонтрагентВладелец;
	НовыйДоговор.ВедениеВзаиморасчетов       = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	
	Если СокрЛП(ПакетXDTO.Vid_Dog) = "СПоставщиком" Тогда
	НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	ИначеЕсли СокрЛП(ПакетXDTO.Vid_Dog) = "СПокупателем" Тогда
	НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ИначеЕсли СокрЛП(ПакетXDTO.Vid_Dog) = "СКомитентом" Тогда
	НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ИначеЕсли СокрЛП(ПакетXDTO.Vid_Dog) = "СКомиссионером" Тогда
	НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	Иначе
	НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	КонецЕсли;
	//НовыйДоговор.ВидДоговора                 = ВидДоговораТек;
	//НовыйДоговор.абс_Подключения             = Подключения;
	//НовыйДоговор.абс_ЛицевойСчетБиллинга     = абс_ЛицевойСчетБиллинга;
	//НовыйДоговор.абс_Агент                   = абс_Агент;
	//
	Если КонтрагентВладелец.НеЯвляетсяРезидентом И НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		НовыйДоговор.РеализацияНаЭкспорт = Истина;
	КонецЕсли;
	
	НовыйДоговор.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
	
	Если НовыйДоговор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		НовыйДоговор.ВестиПоДокументамРасчетовСКонтрагентом = Истина;
	КонецЕсли;
	
	Если (НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		ИЛИ  НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		И НовыйДоговор.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		НовыйДоговор.РасчетыВУсловныхЕдиницах = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДоговоруВУсловныхЕдиницах");
	КонецЕсли;
	
	Если НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		НовыйДоговор.ПроцентПредоплаты = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойРазмерПредоплатыПоЗаказуПокупателя");
	КонецЕсли;
	
	НовыйДоговор.ОбособленныйУчетТоваровПоЗаказамПокупателей = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОбособленныйУчетТоваровПоЗаказамПокупателей");
	
	Если (НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) И ТипЗнч(НовыйДоговор.ТипЦен) <> Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		НовыйДоговор.ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	ИначеЕсли (НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) И ТипЗнч(НовыйДоговор.ТипЦен) <> Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
		НовыйДоговор.ТипЦен = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
	КонецЕсли; 

	НовыйДоговор.НалоговыйАгентПоОплате = Истина;
	
	НовыйДоговор.абс_СтатусДоговора  = Перечисления.абсСтатусыДоговоров.Исполнение;
	НовыйДоговор.абс_Ответственный   = глЗначениеПеременной("глТекущийПользователь"); 	
	НовыйДоговор.абс_ВидДеятельности = Справочники.абс_ВидыДеятельностиКТТК.НайтиПоНаименованию("Связь");
	Если ПакетXDTO.Name = "" Тогда
	НовыйДоговор.Наименование        =  " Договор биллинга от " + Формат(ДатаДоговора, "ДФ=dd.MM.yyyy");
    Иначе
	НовыйДоговор.Наименование = ПакетXDTO.Name;
	КонецЕсли;
	НовыйДоговор.абс_ВидДоговора     = Справочники.абс_ПредметДоговораГК.ДоговорОказанияУслуг;
	НовыйДоговор.абс_ТипДоговора     = Перечисления.абсТипыДоговоров.Договор;
	НовыйДоговор.абс_ДоговорБезСуммы = Истина;
	//НовыйДоговор.абс_ДоходныйДоговор = ВстречныйДоговор;
	
				 /////
//	ЗаполнитьРеквизитыКонтрагентаПоXTDO(ПакетXDTO, ТекКонтрагент);
	
	//Вставка 17.11.2077 нач
	СЗОшибок = новый СписокЗначений;
	СтрокаСообщений = "";
	Если (СокрЛП(ПакетXDTO.Name) = "") ИЛИ  (ТипЗнч(ПакетXDTO.Name) <> Тип("Строка")) ТОгда
		СЗОшибок.Добавить("не заполнено поле - наименование договора");
		СтрокаСообщений = СтрокаСообщений+ "не заполнено поле - Наименование договора"+ Символы.ПС;
	КонецЕсли;
	Если (СокрЛП(ПакетXDTO.Vid_Dog) = "")  ИЛИ  (ТипЗнч(ПакетXDTO.Vid_Dog) <> Тип("Строка")) ТОгда
		СЗОшибок.Добавить("не заполнено поле - вид договора");
		СтрокаСообщений = СтрокаСообщений+ "не заполнено поле - Вид договора"+ Символы.ПС;
	КонецЕсли;
	//
	////Если СокрЛП(ПакетXDTO.No_Resident) = "0" ТОгда
	////	Если 
	////	СтрокаСообщений = СтрокаСообщений+ "не заполнено поле - Тип контрагента"		
	////КонецЕсли;
	//
	//СЗОшибок = ПроверитьЗаполнениеРеквизитовXTDOКонтрагентыЕИСУП(ПакетXDTO);
	СтрокаСообщений ="";
	Если СЗОшибок.Количество() > 0 ТОгда
		Для Каждого СтрокаСЗ из СЗОшибок Цикл
			СтрокаСообщений = СтрокаСообщений + (СтрокаСЗ.Значение) + Символы.ПС;	
		КонецЦикла;
		ОтветXDTO.Error = СтрокаСообщений;
		Возврат ОтветXDTO;
		//ОтветXDTO.Error = СтрокаСообщений;
		//Возврат ОтветXDTO;	
	КонецЕсли;
	////Вставка 17.11.2077 кон

	
	
	
	Попытка
		
		// Попытка записать контрагента
		НовыйДоговор.Записать();
		//Если БылСозданНовый  Тогда
		//	ТекКонтрагент.ГоловнойКонтрагент = ТекКонтрагент.Ссылка;
			НовыйДоговор.ОбменДанными.Загрузка = Истина;
		//	ТекКонтрагент.Записать();
		//КонецЕсли;
		ГУИД_Договора = НовыйДоговор.Ссылка.УникальныйИдентификатор();

		ОтветXDTO.Guid = Строка(ГУИД_Договора);		
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "Ошибка создания договора через вебсервис");
		ОтветXDTO.Error = ОписаниеОшибки;
		//ОтменитьТранзакцию();
	КонецПопытки;
	
	
	Возврат ОтветXDTO;
	
КонецФункции
// }}KM WARE Червяков В.М. Заявка № 25.01.2016 окончание
// Возвращает заполненный пакет XDTO для контрагента
// Источник - владелец свойств
Функция СоздатьПакетXDTOКонтрагента(Источник) Экспорт
	
	#Если Клиент Тогда
		Состояние("Формирование пакета XDTO");
	#КонецЕсли	
	
	XDTOКонтрагентСозданиеТип 	= Фабрика.Тип("http://www.abs-soft.ru/", "CountragentsAdd");
	XDTOКонтрагентСоздание 		= Фабрика.Создать(XDTOКонтрагентСозданиеТип);
	
	//// Заполенение данных
	//XDTOКонтрагентСоздание.Ext_System 		= 13;
	//XDTOКонтрагентСоздание.Ext_System_ID 	= Источник.Код;
	//XDTOКонтрагентСоздание.ID               = Источник.абс_Код_ИСУП_ТТК;
	//XDTOКонтрагентСоздание.Name         	= Источник.Наименование;
	//XDTOКонтрагентСоздание.Full_Name        = Источник.НаименованиеПолное;
	//XDTOКонтрагентСоздание.OKPO             = ?(ЗначениеЗаполнено(Источник.КодПоОКПО), Число(Источник.КодПоОКПО), 0);
	//XDTOКонтрагентСоздание.INN              = ?(ЗначениеЗаполнено(Источник.ИНН), Число(Источник.ИНН), 0);
	//XDTOКонтрагентСоздание.KPP             	= ?(ЗначениеЗаполнено(Источник.КПП), Число(Источник.КПП), 0);
	//
	
	//АБС Бабшанов начало	
	ЗаполнитьXDTOКонтрагент(Источник,XDTOКонтрагентСоздание) ;
	//АБС Бабшанов конец
	
	//// Упаковка связанных файлов
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	ХранилищеДополнительнойИнформации.Ссылка,
	//|	ХранилищеДополнительнойИнформации.Хранилище
	//|ИЗ
	//|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	//|ГДЕ
	//|	ХранилищеДополнительнойИнформации.Объект = &Объект");
	//Запрос.УстановитьПараметр("Объект", Источник.Ссылка);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	ТекХранилище = Выборка.Ссылка.ПолучитьОбъект();
	//	ТекСодержимое = ТекХранилище.Хранилище.Получить();
	//	Если ТипЗнч(ТекСодержимое) = Тип("Картинка") Тогда
	//		ТекДвоичныеДанные = ТекСодержимое.ПолучитьДвоичныеДанные();
	//	Иначе
	//		ТекДвоичныеДанные = ТекСодержимое;
	//	КонецЕсли;
	//	
	//	XDTOКонтрагентСоздание.File_Kontractors.Добавить(ТекДвоичныеДанные);
	//	
	//КонецЦикла;
	//
	//ЗначениеВФайл("tmp.txt", "");
	//XDTOКонтрагентСоздание.Ext_System_File  = Новый ДвоичныеДанные("tmp.txt");
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
	Возврат XDTOКонтрагентСоздание;
	
КонецФункции

// Вызывает тестовый вебсервис
Функция ТестСоединения() Экспорт
	
	Если НЕ ЗначениеЗаполнено(_Сервер) ИЛИ НЕ ЗначениеЗаполнено(_БазаДанных) ИЛИ НЕ ЗначениеЗаполнено(_Пользователь) Тогда
		Сообщить("Необходимо задать настройки подключения к WebServer!", СтатусСообщения.Внимание);
		#Если Клиент Тогда
			ПолучитьФорму("Параметры").Открыть();
		#КонецЕсли
		ОтветXDTO = Новый Структура("ID, Error", "", "Не заданы настройки подключения к WebServer!");
		Возврат ОтветXDTO;
	КонецЕсли;
	
	//ИнициализацияWebService();
	
	#Если Клиент Тогда
		Состояние("Ожидание ответа WebService");
	#КонецЕсли	
	
	ОтветXDTO = абс_WebServiceСервер.ВыполнитьНаСервереФункцию("ТестСоединенияСервер");
	
	Сообщить("Код возврата: " + ОтветXDTO.ID);
	Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
	Возврат ОтветXDTO;
	
КонецФункции
&НаСервере
// Вызов теста с сервера
Функция ТестСоединенияСервер() Экспорт
	
	ИнициализацияWebService();
	
	ОтветXDTO = Фабрика.Создать(Фабрика.Тип("http://www.abs-soft.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	
	Попытка
		ОтветXDTO = Прокси.ConnectionTest();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "ТестСоединения()");
		ОтветXDTO = Новый Структура("ID, Error", "", ОписаниеОшибки);
	КонецПопытки;
	
	Если ОтветXDTO.Error = Неопределено Тогда
		ОтветXDTO.Error = "";
	КонецЕсли;
	
	//Возврат ОтветXDTO;
	Возврат Новый Структура("ID, Error", ОтветXDTO.ID, ОтветXDTO.Error);
	
КонецФункции
// Вызывает тестовый вебсервис
Функция ТестСоединенияДоговоры() Экспорт
	
	Если НЕ ЗначениеЗаполнено(_Сервер) ИЛИ НЕ ЗначениеЗаполнено(_БазаДанных) ИЛИ НЕ ЗначениеЗаполнено(_Пользователь) Тогда
		Сообщить("Необходимо задать настройки подключения к WebServer!", СтатусСообщения.Внимание);
		#Если Клиент Тогда
			ПолучитьФорму("Параметры").Открыть();
		#КонецЕсли
		ОтветXDTO = Новый Структура("Guid, Error", "", "Не заданы настройки подключения к WebServer!");
		Возврат ОтветXDTO;
	КонецЕсли;
	
	//ИнициализацияWebService();
	
	#Если Клиент Тогда
		Состояние("Ожидание ответа WebService");
	#КонецЕсли	
	
	//ОтветXDTO = ТестСоединенияДоговорыСервер();
	ОтветXDTO = абс_WebServiceСервер.ВыполнитьНаСервереФункцию("ТестСоединенияДоговорыСервер");
	
	Сообщить("Код возврата: " + ОтветXDTO.Guid);
	Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
	Возврат ОтветXDTO;
	
КонецФункции

&НаСервере
// Вызов теста с сервера
Функция ТестСоединенияДоговорыСервер() Экспорт
	
	ИнициализацияWebServiceДоговоры();
	
	ОтветXDTO = Фабрика.Создать(Фабрика.Тип("http://www.sample-package.org", "Answer"));
	ОтветXDTO.Guid 	= "";
	XDTOДоговорСозданиеТип 	= Фабрика.Тип("http://www.sample-package.org", "DogovoryAdd");
	XDTOдоговорСоздание 		= Фабрика.Создать(XDTOДоговорСозданиеТип);
	
	Попытка
		ОтветXDTO = Прокси.ConnectionTest();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "ТестСоединенияДоговорыСервер()");
		ОтветXDTO = Новый Структура("Guid, Error", "", ОписаниеОшибки);
	КонецПопытки;
	
	Если ОтветXDTO.Error = Неопределено Тогда
		ОтветXDTO.Error = "";
	КонецЕсли;
	
	//Возврат ОтветXDTO;
	Возврат Новый Структура("Guid, Error", ОтветXDTO.Guid, ОтветXDTO.Error);
	
КонецФункции

&НаСервере
// КТТК. Возвращает список файлов контрагента
Функция ПолучитьВсеФайлыКонтрагентаИзЕИСУП(ID) Экспорт
	
	ТЗФайлов = Новый ТаблицаЗначений;
	
	ТЗФайлов.Колонки.Добавить("Наименование");
	ТЗФайлов.Колонки.Добавить("ДатаИзменения");
	ТЗФайлов.Колонки.Добавить("Размер");
	
	Если СокрЛП(ID) = "" Тогда
		Возврат ТЗФайлов;
	КонецЕсли;
	
	ИнициализацияWebService();
	
	ОтветXDTO = Прокси.GetCountragentsFileList(СокрЛП(ID));
	
	Для Каждого ТекФайл Из ОтветXDTO.FileDescriptionList Цикл
		НовСтрока = ТЗФайлов.Добавить();
		НовСтрока.Наименование = ТекФайл.Name;
		НовСтрока.ДатаИзменения = ТекФайл.DataTime;
		НовСтрока.Размер = "" + ТекФайл.Size + " B";
	КонецЦикла;                                                                  
	ТЗФайлов.Сортировать("ДатаИзменения,Наименование");	
	
	Возврат ТЗФайлов;
	
КонецФункции

// КТТК. Возвращает ОтветXDTO FileList  
Функция GetCountragentsFileList(ID) Экспорт
	
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-soft.ru/", "FileList"));
	//ОтветXDTO.Error = "";
	
	// Поиск контрагента
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(ID);
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ОтветXDTO.Error = "Не найден контрагент с кодом " + ID;
		Возврат ОтветXDTO;
	КонецЕсли;
	
	// Запрос связанных файлов
	Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	ХранилищеДополнительнойИнформации.Хранилище,
	//|	ХранилищеДополнительнойИнформации.ИмяФайла КАК Наименование,
	//|	ХранилищеДополнительнойИнформации.абс_ДатаПрикрепленияФайла,
	//|	ХранилищеДополнительнойИнформации.Ссылка
	//|ИЗ
	//|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	//|ГДЕ
	//|	ХранилищеДополнительнойИнформации.Объект = &Объект
	//|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Файл)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ХранилищеДополнительнойИнформации.Хранилище,
	//|	ХранилищеДополнительнойИнформации.Наименование,
	//|	ХранилищеДополнительнойИнформации.абс_ДатаПрикрепленияФайла,
	//|	ХранилищеДополнительнойИнформации.Ссылка
	//|ИЗ
	//|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	//|ГДЕ
	//|	ХранилищеДополнительнойИнформации.Объект = &Объект
	//|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Изображение)");
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка,
	|	ХранилищеДополнительнойИнформации.Хранилище,
	|	ХранилищеДополнительнойИнформации.Наименование,
	|	ХранилищеДополнительнойИнформации.абс_ДатаПрикрепленияФайла
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Объект", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекФайлXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-soft.ru/", "FileDescription"));
		ТекФайлXDTO.Name 		= Выборка.Наименование;
		ТекФайлXDTO.DataTime 	= Выборка.абс_ДатаПрикрепленияФайла;
		
		КаталогХранилищаФайлов 	= Константы.абс_ПутьКВнешнемуХранилищу.Получить();
		ПолноеИмяФайла 			= КаталогХранилищаФайлов + "/" + Выборка.Хранилище.Получить();
		ТекФайл					= Новый Файл(ПолноеИмяФайла);
		ТекФайлXDTO.Size		= ?(ТекФайл.Существует(), ТекФайл.Размер(), 0);
		
		ОтветXDTO.FileDescriptionList.Добавить(ТекФайлXDTO);
		
	КонецЦикла;
	
	Возврат ОтветXDTO;
	
КонецФункции

// КТТК. Возвращает файл контрагента по его наименованию
Функция GetCountragentsFile(ID, Name) Экспорт
	
	ОтветXDTO 		= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-soft.ru/", "File"));	
	//ОтветXDTO.Error = "";
	
	// Поиск контрагента
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(ID);
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ОтветXDTO.Error = "Не найден контрагент с кодом " + ID;
		Возврат ОтветXDTO;
	КонецЕсли;
	
	// Запрос файла
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка,
	|	ХранилищеДополнительнойИнформации.Хранилище,
	|	ХранилищеДополнительнойИнформации.Наименование,
	|	ХранилищеДополнительнойИнформации.абс_ДатаПрикрепленияФайла
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.Наименование = &Наименование");
	Запрос.УстановитьПараметр("Объект", 		Контрагент);
	Запрос.УстановитьПараметр("Наименование", 	Name);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Формирование ответного пакета
	Если Выборка.Следующий() Тогда
		
		ТекФайлDescXDTO 			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-soft.ru/", "FileDescription"));
		ТекФайлDescXDTO.Name 		= Выборка.Наименование;
		ТекФайлDescXDTO.DataTime 	= Выборка.абс_ДатаПрикрепленияФайла;
		
		КаталогХранилищаФайлов 		= Константы.абс_ПутьКВнешнемуХранилищу.Получить();
		ПолноеИмяФайла 				= КаталогХранилищаФайлов + "/" + Выборка.Хранилище.Получить();
		ТекФайл						= Новый Файл(ПолноеИмяФайла);
		ТекФайлDescXDTO.Size		= ?(ТекФайл.Существует(), ТекФайл.Размер(), 0);
		
		ОтветXDTO 					= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-soft.ru/", "File"));
		ОтветXDTO.FileDescription 	= ТекФайлDescXDTO;
		ОтветXDTO.base64Binary 		= Новый ДвоичныеДанные(ПолноеИмяФайла);
		
	Иначе
		
		ОтветXDTO.Error = "Не обнаружен файл " + Name;
		
	КонецЕсли;
	
	Возврат ОтветXDTO;
	
КонецФункции

// КТТК. Помещает файл контрагента
Функция PutCountragentsFile(ID, FileXDTO) Экспорт
	
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-soft.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	//ОтветXDTO.Error = "";
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(ID);
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ОтветXDTO.Error = "Не найден контрагент с кодом " + ID;	
		Возврат ОтветXDTO;
	КонецЕсли;
	
	//ТекХранилище 			= Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
	//ТекХранилище.ВидДанных 	= Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
	//ТекХранилище.Объект    	= Контрагент;
	//ТекХранилище.ИмяФайла   = FileXDTO.Name;
	//ТекХранилище.Хранилище  = Новый ХранилищеЗначения(FileXDTO.base64Binary);
	//ТекХранилище.Записать();
	
	//ЗаписатьФайлВоВнешнееХранилище(СсылкаОбъекта, ДвоичныеДанные, ИмяФайла, СсылкаФайлаХранилища = Неопределено, КлючСтроки = Неопределено) 
	Попытка
		СтатусЗагрузкиФайла = абс_РаботаСФайлами.ЗаписатьФайлВоВнешнееХранилище(Контрагент, FileXDTO.base64Binary, FileXDTO.FileDescription.Name);
		Если СтатусЗагрузкиФайла.Свойство("Успешно") и СтатусЗагрузкиФайла.Успешно Тогда 
			ОтветXDTO.ID = "Файл успешно загружен";
		Иначе	
			ОтветXDTO.ID = "Файл не загружен, возможно, превышен максимальный размер «"+СокрЛП(Константы.абс_МаксимальныйРазмерФайла.Получить())+" МБ» прикрепляемого файла.";
		КонецЕсли;	
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "Ошибка записи во внешнее хранилище обработчика PutCountragentsFile(ID, FileXDTO)");
		ОтветXDTO.Error = ОписаниеОшибки;
	КонецПопытки;
	
	Возврат ОтветXDTO;
	
КонецФункции

// КТТК. Запись контрагента со статусом ДЭБ
Функция СогласованиеДЭБ(ПакетXDTO) Экспорт
	
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-soft.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	//ОтветXDTO.Error = "";
	
	//Сообщить("Код возврата: " + ОтветXDTO.ID);
	//Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
	абс_Код_ИСУП_ТТК = СокрЛП(ПакетXDTO.ID);
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(абс_Код_ИСУП_ТТК);
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ОтветXDTO.Error = "Не найден контрагент с кодом " + абс_Код_ИСУП_ТТК;	
		Возврат ОтветXDTO;
	КонецЕсли;
	ОтветXDTO.ID = абс_Код_ИСУП_ТТК;
	
	Попытка
		КонтрагентОбъект = Контрагент.ПолучитьОбъект(); 
		Если Контрагент.абс_СтатусКонтрагента =  Перечисления.абсСтатусыКонтрагентов.Подготовка Тогда //ИЛИ Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда
			
			КонтрагентОбъект.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ;
			
			ЗаполнитьРеквизитыКонтрагентаПоXTDO(ПакетXDTO,КонтрагентОбъект);
			
			СЗОшибок = ПроверитьЗаполнениеРеквизитовXTDOКонтрагентыЕИСУП(ПакетXDTO);
			СтрокаСообщений ="";
			Если СЗОшибок.Количество() > 0 ТОгда
				Для Каждого СтрокаСЗ из СЗОшибок Цикл
					СтрокаСообщений = СтрокаСообщений + (СтрокаСЗ.Значение) + Символы.ПС;	
				КонецЦикла;
				ОтветXDTO.Error = СтрокаСообщений;
				Возврат ОтветXDTO;
				//ОтветXDTO.Error = СтрокаСообщений;
				//Возврат ОтветXDTO;	
			КонецЕсли;
			
			Если Найти(КонтрагентОбъект.Наименование,"##*#") ТОгда
				КонтрагентОбъект.Наименование = СтрЗаменить(КонтрагентОбъект.Наименование,"##*#","");	
				КонтрагентОбъект.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ;
				КонтрагентОбъект.Записать();
				КонтрагентОбъект.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ;
				КонтрагентОбъект.Записать();
			КонецЕсли;
			КонтрагентОбъект.Записать();
		Иначе
			//ОтветXDTO.Error = "Статус контрагента В ЕИСУП отличается от значения в текущей базе";     //21092011
			ОтветXDTO.Error = "Статус контрагента в ЕИСУП ТТК отличный от Подготовки. Статус заменен на "+СокрЛП(КонтрагентОбъект.абс_СтатусКонтрагента)+" #"+Перечисления.абсСтатусыКонтрагентов.Индекс(КонтрагентОбъект.абс_СтатусКонтрагента)+"#";  //21092011
		КонецЕсли;
	Исключение
		ОтветXDTO.Error = ОписаниеОшибки();	
	КонецПопытки;
	
	Возврат ОтветXDTO;
	
КонецФункции

// КТТК. Заявка на согласованию изменений контрагента
Функция CountragentsChangeRequest(ПакетXDTO,абс_Номер_ИСУП_ТТК) Экспорт
	
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-soft.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	//ОтветXDTO.Error = "";
	КодКонтрагента =ПакетXDTO.ID;
	НашлиКонтрагента = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
	Если НашлиКонтрагента.Пустая() ТОгда
		ОтветXDTO.Error = "Не найден контрагент с кодом " + КодКонтрагента+"!!!";	
		Возврат ОтветXDTO;
		
	ИначеЕсли НашлиКонтрагента.абс_СтатусКонтрагента <>Перечисления.абсСтатусыКонтрагентов.Активный ТОгда
		ОтветXDTO.Error = "Контрагент не является активным!!!";		
		Возврат ОтветXDTO;
	КонецЕсли;
	
	Если СокрЛП(абс_Номер_ИСУП_ТТК) <>"" Тогда
		ДокЗаявка = Документы.абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.НайтиПоНомеру(абс_Номер_ИСУП_ТТК);
		Если НЕ ЗначениеЗаполнено(ДокЗаявка) Тогда
			ОтветXDTO.Error = "Не найден документ с номером " + абс_Номер_ИСУП_ТТК;	
			Возврат ОтветXDTO;
		КонецЕсли;
		ДокЗаявкаОбъект = ДокЗаявка.ПолучитьОбъект();
	Иначе
		ДокЗаявкаОбъект = Документы.абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.СоздатьДокумент();	
		ДокЗаявкаОбъект.Контрагент = НашлиКонтрагента;
		Документы.абс_ЗаявкаНаИзменениеРеквизитовКонтрагента.ЗаполнитьПрежниеЗначенияКонтрагента(НашлиКонтрагента,ДокЗаявкаОбъект);
	КонецЕсли;
	ЗаполнитьРеквизитыЗаявкиПоXTDO(ПакетXDTO,ДокЗаявкаОбъект);
	
	Попытка
		Если ДокЗаявкаОбъект.ЭтоНовый() ТОгда
			ДокЗаявкаОбъект.Дата  = ТекущаяДата();
		КонецЕсли;
		ДокЗаявкаОбъект.Статус = Перечисления.абс_СтатусыЗаявокНаИзменениеРеквизитовКонтрагентов.ПроверкаНСИ;
		ДокЗаявкаОбъект.ДокументВнешнейСистемы = Истина;
		ДокЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		// АБС ВСТАВКА 20111116 Фролов Не обновляем статус контрагента при создании заявки
		СпрКонтр =  ДокЗаявкаОбъект.Контрагент.ПолучитьОбъект();
		СпрКонтр.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов;//Раскоменчено 17.11.2011 по Диту
		СпрКонтр.Записать();                                                                 //Раскоменчено 17.11.2011 по Диту
		ОтветXDTO.ID = Сокрлп(ДокЗаявкаОбъект.Номер);                                        //Раскоменчено 17.11.2011 по Диту
	Исключение
		ОтветXDTO.Error = ОписаниеОшибки();	
	КонецПопытки;
	
	Возврат ОтветXDTO;
	
КонецФункции


&НаСервере
// ХТТК. Возникает при записи контрагента со статусом СогласованиеДЭБ
Функция ВызовСогласованиеДЭБ(Источник,ЭтоОбработкаМэппинга = Ложь) Экспорт
	
	ИнициализацияWebService();
	
	ОтветXDTO = Фабрика.Создать(Фабрика.Тип("http://www.abs-soft.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	//ОтветXDTO.Error = "";
	
	#Если Клиент Тогда
		Состояние("Ожидание ответа WebService");
	#КонецЕсли	
	
	// Заполенение данных
	XDTOКонтрагентСозданиеТип 	= Фабрика.Тип("http://www.abs-soft.ru/", "CountragentsAdd");
	XDTOКонтрагентСоздание 		= Фабрика.Создать(XDTOКонтрагентСозданиеТип);
	Для Каждого ТекРеквизит Из Источник Цикл
		Попытка
			XDTOКонтрагентСоздание[ТекРеквизит.Ключ] = ТекРеквизит.Значение;
		Исключение
		конецПопытки;
	КонецЦикла;
	//ЗаполнитьЗначенияСвойств(XDTOКонтрагентСоздание, Источник);
	//XDTOКонтрагентСоздание = СоздатьПакетXDTOКонтрагента(Источник);
	Если ЭтоОбработкаМэппинга ТОгда
		XDTOКонтрагентСоздание.Name = XDTOКонтрагентСоздание.Name+"##*#";		
	КонецЕсли;
	
	
	Попытка
		ОтветXDTO = Прокси.CountragentsDEB_Check(XDTOКонтрагентСоздание);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "ВызовСогласованиеДЭБ(" + Источник["абс_Код_ИСУП_ТТК"] + ")");
		ОтветXDTO.Error = ОписаниеОшибки;
	КонецПопытки;
	
	//Сообщить("Код возврата: " + ОтветXDTO.ID);
	//Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
	//Возврат ОтветXDTO;
	Возврат Новый Структура("ID, Error", ОтветXDTO.ID, ОтветXDTO.Error);
	
КонецФункции

&НаСервере
// ХТТК. Вызов заявки на согласованию изменений контрагента
Функция ВызовCountragentsChangeRequest(Источник) Экспорт
	
	ИнициализацияWebService();
	
	ОтветXDTO = Фабрика.Создать(Фабрика.Тип("http://www.abs-soft.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	//ОтветXDTO.Error = "";
	
	#Если Клиент Тогда
		Состояние("Ожидание ответа WebService");
	#КонецЕсли	
	XDTOКонтрагентИзменениеРеквизитовТип 	= Фабрика.Тип("http://www.abs-soft.ru/", "CountragentsAdd");
	XDTOКонтрагентИзменениеРеквизитов 		= Фабрика.Создать(XDTOКонтрагентИзменениеРеквизитовТип);
	
	//ЗаполнитьXTDOДаннымиДокументаЗаявки(Источник, XDTOКонтрагентИзменениеРеквизитов);
	Для Каждого ТекРеквизит Из Источник Цикл
		Попытка
			XDTOКонтрагентИзменениеРеквизитов[ТекРеквизит.Ключ] = ТекРеквизит.Значение;
		Исключение
		конецПопытки;
	КонецЦикла;
	
	Попытка
		ОтветXDTO = Прокси.CountragentsChangeRequest(XDTOКонтрагентИзменениеРеквизитов, СокрЛП(Источник["абс_Номер_ИСУП_ТТК"]));   
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "ВызовCountragentsChangeRequest()");
		ОтветXDTO.Error = ОписаниеОшибки;
	КонецПопытки;
	
	//Сообщить("Код возврата: " + ОтветXDTO.ID);
	//Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
	//Возврат ОтветXDTO;
	Возврат Новый Структура("ID, Error", ОтветXDTO.ID, ОтветXDTO.Error);
	
КонецФункции

//&НаСервере
// ХТТК. Вызов GetCountragentsFile
Процедура ЗагрузитьФайлыПоТЗ_ЕИСУП(КоллекцияСтрокТЗДляЗагрузки, ТекКонтрагент) Экспорт
	
	#Если Сервер Тогда
	ИнициализацияWebService();
	#КонецЕсли
	
	Для Каждого СТрокаТЗ из КоллекцияСтрокТЗДляЗагрузки Цикл
		
		ОтветXDTO = Прокси.GetCountragentsFile(СокрЛП(ТекКонтрагент.абс_Код_ИСУП_ТТК), СТрокаТЗ.Значение.Наименование);
		Если ЗначениеЗаполнено(ОтветXDTO.Error) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолученныйФайл = ОтветXDTO.base64Binary;
		
		//НашлиСТроку = ТЗФайлы.Найти(СТрокаТЗ.Наименование,"Наименование");
		//Если НашлиСТроку<>Неопределено Тогда
		//	//Дальше идет не оптимальный код (по логике надо было все поместить в ТЗ и потом поиск в запросе делать), но небыло времени 
		//	Запрос = новый запрос;
		//	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
		//	|	ХранилищеДополнительнойИнформации.Ссылка
		//	|ИЗ
		//	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		//	|ГДЕ
		//	|	ХранилищеДополнительнойИнформации.ИмяФайла Подобно &ИмяФайла
		//	|	И ХранилищеДополнительнойИнформации.Объект = &Объект";
		//	Запрос.УстановитьПараметр("Объект",ТекКонтрагент);
		//	Запрос.УстановитьПараметр("ИмяФайла",СТрокаТЗ.Наименование);
		//	ТЗ = Запрос.Выполнить().Выгрузить();
		//	Если ТЗ.Количество() <> 0 Тогда //То перезапишем файл
		//		ТекХранилищеФайлов = ТЗ[0].ссылка.ПолучитьОбъект();
		//		ТекХранилищеФайлов.Хранилище = Новый ХранилищеЗначения(ПолученныйФайл);
		//		Попытка
		//			ТекХранилищеФайлов.Записать();
		//		Исключение
		//		КонецПопытки;
		//		Продолжить;	
		//	КонецЕсли;
		//КонецЕсли;
		НовХранилищеФайлов = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
		Если ТипЗнч(ПолученныйФайл) = Тип("Картинка") Тогда
			НовХранилищеФайлов.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение;
		Иначе
			НовХранилищеФайлов.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
		КонецЕсли;
		НовХранилищеФайлов.Хранилище = Новый ХранилищеЗначения(ПолученныйФайл);
		НовХранилищеФайлов.ИмяФайла =  ОтветXDTO.FileDescription.Name;
		НовХранилищеФайлов.Объект = Текконтрагент;
		Попытка
			НовХранилищеФайлов.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПРоцедуры
//&НаСервере
// ХТТК. Вызов GetCountragentsFile
Процедура ЗагрузитьФайлыПоТЗ_ЕИСУПБух1_6(КоллекцияСтрокТЗДляЗагрузки, ТекКонтрагент) Экспорт
	
	#Если Сервер Тогда
	ИнициализацияWebService();
	#КонецЕсли
	
	Для Каждого СТрокаТЗ из КоллекцияСтрокТЗДляЗагрузки Цикл
		
		ОтветXDTO = Прокси.GetCountragentsFile(СокрЛП(ТекКонтрагент.абс_Код_ИСУП_ТТК), СТрокаТЗ.Значение.Наименование);
		Если ЗначениеЗаполнено(ОтветXDTO.Error) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолученныйФайл = ОтветXDTO.base64Binary;
		
		//НашлиСТроку = ТЗФайлы.Найти(СТрокаТЗ.Наименование,"Наименование");
		//Если НашлиСТроку<>Неопределено Тогда
		//	//Дальше идет не оптимальный код (по логике надо было все поместить в ТЗ и потом поиск в запросе делать), но небыло времени 
		//	Запрос = новый запрос;
		//	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
		//	|	ХранилищеДополнительнойИнформации.Ссылка
		//	|ИЗ
		//	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		//	|ГДЕ
		//	|	ХранилищеДополнительнойИнформации.ИмяФайла Подобно &ИмяФайла
		//	|	И ХранилищеДополнительнойИнформации.Объект = &Объект";
		//	Запрос.УстановитьПараметр("Объект",ТекКонтрагент);
		//	Запрос.УстановитьПараметр("ИмяФайла",СТрокаТЗ.Наименование);
		//	ТЗ = Запрос.Выполнить().Выгрузить();
		//	Если ТЗ.Количество() <> 0 Тогда //То перезапишем файл
		//		ТекХранилищеФайлов = ТЗ[0].ссылка.ПолучитьОбъект();
		//		ТекХранилищеФайлов.Хранилище = Новый ХранилищеЗначения(ПолученныйФайл);
		//		Попытка
		//			ТекХранилищеФайлов.Записать();
		//		Исключение
		//		КонецПопытки;
		//		Продолжить;	
		//	КонецЕсли;
		//КонецЕсли;
		
		//ИмяФайла    	= ДиалогВыбораФайла.ПолноеИмяФайла;
		ВнешнийФайл 	= ПолученныйФайл;
		////Хранилище   	= Новый ХранилищеЗначения(ВнешнийФайл);
		//
		//Записать();
		ТекКлючСтроки = Неопределено;
		
		Выполнить("РезультатЗаписи = абс_РаботаСФайлами.ЗаписатьФайлВоВнешнееХранилище(ТекКонтрагент, ВнешнийФайл, ОтветXDTO.FileDescription.Name, , ТекКлючСтроки)");
		
		
		
	КонецЦикла;
	
КонецПРоцедуры

//&НаСервере
// XTTK. Вызов PutCountragentsFile
Процедура ВыгрузитьФайлыПоТЗДЗО(КоллекцияСтрокТЗДляВыгрузки, ТекКонтрагент) Экспорт
	
	#Если Сервер Тогда
		ИнициализацияWebService();
	#КонецЕсли
	
	Для Каждого СТрокаТЗ из КоллекцияСтрокТЗДляВыгрузки Цикл
		
		//ТекСодержимое = СТрокаТЗ.ФайлДЗО;
		ТекСодержимое = СТрокаТЗ.Значение.Ссылка.Хранилище.Получить(); 
		Если ТипЗнч(ТекСодержимое)  = Тип("Картинка") Тогда
			ТекДвоичныеДанные = ТекСодержимое.ПолучитьДвоичныеДанные();
		Иначе
			ТекДвоичныеДанные = ТекСодержимое;
		КонецЕсли;
		
		FileXDTO 					= Фабрика.Создать(Фабрика.Тип("http://www.abs-soft.ru/", "File"));
		FileDescXDTO 				= Фабрика.Создать(Фабрика.Тип("http://www.abs-soft.ru/", "FileDescription"));
		FileDescXDTO.Name 			= СТрокаТЗ.Значение.Наименование;
		FileDescXDTO.DataTime 		= ТекущаяДата();
		FileDescXDTO.Size 			= ТекДвоичныеДанные.Размер();
		
		FileXDTO.FileDescription    = FileDescXDTO;
		
		FileXDTO.base64Binary 		= ТекДвоичныеДанные;
		ТекID 						= СокрЛП(Текконтрагент.абс_Код_ИСУП_ТТК);
		Прокси.PutCountragentsFile(ТекID, FileXDTO);
		
	КонецЦикла;
	
КонецПРоцедуры
//&НаСервере
// XTTK. Вызов PutCountragentsFile
Процедура ВыгрузитьФайлыПоТЗДЗОБух1_6(КоллекцияСтрокТЗДляВыгрузки, ТекКонтрагент) Экспорт
	
	#Если Сервер Тогда
		ИнициализацияWebService();
	#КонецЕсли
	
	Для Каждого СТрокаТЗ из КоллекцияСтрокТЗДляВыгрузки Цикл
		
		//ТекСодержимое = СТрокаТЗ.ФайлДЗО;
		
		КаталогХранилищаФайлов 		= Константы.абс_ПутьКВнешнемуХранилищу.Получить();
		ПолноеИмяФайла 				= КаталогХранилищаФайлов + "/" + СТрокаТЗ.Значение.Ссылка.Хранилище.Получить();
		ТекФайл						= Новый Файл(ПолноеИмяФайла);
		Если Не  ТекФайл.Существует() Тогда
			Продолжить;
		КонецЕсли;
		
		//Если ТипЗнч(ТекФайл)  = Тип("Картинка") Тогда
		//	ТекДвоичныеДанные = ТекФайл.ПолучитьДвоичныеДанные();
		//Иначе
		ТекДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
		//КонецЕсли;              ДвоичныеДанные
		
		FileXDTO 					= Фабрика.Создать(Фабрика.Тип("http://www.abs-soft.ru/", "File"));
		FileDescXDTO 				= Фабрика.Создать(Фабрика.Тип("http://www.abs-soft.ru/", "FileDescription"));
		FileDescXDTO.Name 			= СТрокаТЗ.Значение.Наименование;
		FileDescXDTO.DataTime 		= ТекущаяДата();
		FileDescXDTO.Size 			= ТекДвоичныеДанные.Размер();
		
		FileXDTO.FileDescription    = FileDescXDTO;
		
		FileXDTO.base64Binary 		= ТекДвоичныеДанные;
		ТекID 						= СокрЛП(Текконтрагент.абс_Код_ИСУП_ТТК);
		Прокси.PutCountragentsFile(ТекID, FileXDTO);
		
	КонецЦикла;
	
КонецПРоцедуры

// XTTK. При записи контрагента со статусом "Согласование ДЭБ" стартует БП согласования ДЭБ, публикация при переводе с Отказ в Подготовка
Функция КонтрагентПередЗаписьюWebСогласование(Источник, Отказ,ЭтоОбработкаМэппинга = Ложь) Экспорт
	
	ТекЭтапМэппинга = "";
	Выполнить("ТекЭтапМэппинга = абс_ПроцедурыСПовторнымВызовом.ПолучитьЭтапыМэппингаПоИннКппДляТекущейБазы()");
	
	ЭтоБиллинг = ?(Найти(Источник.Комментарий,"Создан обработкой по импорту данных биллинга")=0,Ложь,Истина И не ЭтоОбработкаМэппинга);
	ЭтоГрупповаОбработкаПубликации3Этап = Ложь;
	ПричинаПубликации = "";
	Попытка
		Если Источник.абс_СтруктураПараметров.ЭтоГрупповаОбработкаПубликации3Этап = Истина Тогда
			ЭтоГрупповаОбработкаПубликации3Этап = Истина;
			ПричинаПубликации =   Источник.абс_СтруктураПараметров.ПричинаПубликации;
		КонецЕсли;
	Исключение
			
	КонецПопытки;

    Если ЭтоБиллинг = Ложь и ЭтоГрупповаОбработкаПубликации3Этап = Ложь ТОгда
		Если  ТекЭтапМэппинга = 1 ТОгда
			Возврат Ложь;
		ИначеЕсли ТекЭтапМэппинга =2 и ЭтоОбработкаМэппинга = Ложь ТОгда
			ВОзврат Ложь;
		ИначеЕсли ТекЭтапМэппинга =3 и ЭтоОбработкаМэппинга  ТОгда
			ВОзврат Ложь;
		КонецЕсли ;
	КонецЕсли;

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат Истина;
	КонецЕсли;
	Если Источник.ЭтоНовый() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызов вебсервис только при переводе с Отказ в Подготовка или при Согласовании ДЭБ
	Если НЕ (Источник.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка И Источник.Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Отказ) 
		И НЕ (Источник.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ И НЕ Источник.Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//ОбработчикWebService = абс_WebService.ПолучитьОбработчикWebService();

	СЗОшибок = ПроверитьЗаполнениеРеквизитовКонтрагента(Источник);
	СтрокаСообщений ="";
	Если СЗОшибок.Количество() > 0 ТОгда
		Для Каждого СтрокаСЗ из СЗОшибок Цикл
			СтрокаСообщений = СтрокаСообщений + (СтрокаСЗ.Значение) + Символы.ПС;	
		КонецЦикла;
		Отказ = Истина;
		Возврат СЗОшибок;
		//ОтветXDTO.Error = СтрокаСообщений;
		//Возврат ОтветXDTO;	
	КонецЕсли;
	
	#Если Клиент Тогда
		
		// Перед публикацией запрос подтверждения
		Если ЭтоОбработкаМэппинга = ЛОжь ТОгда
			Если  ЭтоБиллинг = Ложь и ЭтоГрупповаОбработкаПубликации3Этап = Ложь ТОгда
				Ответ = Вопрос("Согласовать изменение статуса контрагента с ЕИСУП ТТК?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
					Отказ = Истина;
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Обязательный комментарий при изменении статуса
		Если  ЭтоБиллинг = Ложь и ЭтоГрупповаОбработкаПубликации3Этап = Ложь ТОгда 
			Источник.абс_ПричинаИзмененияСтатуса = "";
		КонецЕсли;
		Если  ЭтоБиллинг = Ложь и ЭтоГрупповаОбработкаПубликации3Этап = Ложь ТОгда
			Если ЭтоОбработкаМэппинга = ЛОжь ТОгда
				Пока НЕ ЗначениеЗаполнено(Источник.абс_ПричинаИзмененияСтатуса) И ВвестиСтроку(Источник.абс_ПричинаИзмененияСтатуса, "Причина изменения статуса",,Истина) Цикл
				КонецЦикла;
			Иначе
				Источник.абс_ПричинаИзмененияСтатуса = "Мэппинг";
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоГрупповаОбработкаПубликации3Этап  ТОгда
			Источник.абс_ПричинаИзмененияСтатуса = ПричинаПубликации;
		КонецЕсли;
		
		Если Источник.абс_ПричинаИзмененияСтатуса = "" Тогда
			Сообщить("Отказ пользователя", СтатусСообщения.Информация);
			Отказ = Истина;
			Возврат ЛОжь;
		КонецЕсли;
		
		Состояние("Ожидание ответа WebService");
		
	#КонецЕсли	
	
	// Передача вызова вебсервиса на сервер
	ИсточникСоответствие = Новый Соответствие;
	ЗаполнитьXDTOКонтрагент(Источник, 	ИсточникСоответствие) ;
	ИсточникСоответствие.Вставить("абс_СтатусКонтрагента", 	Источник.абс_СтатусКонтрагента);
	ИсточникСоответствие.Вставить("абс_Код_ИСУП_ТТК", 		Источник.абс_Код_ИСУП_ТТК);
	
	
	//Сообщить("ОтказДО " + Отказ);
	
	//ОтветXDTO = КонтрагентПередЗаписьюWebСогласованиеСервер(ИсточникСоответствие, Отказ);
	ОтветXDTO = абс_WebServiceСервер.ВыполнитьНаСервереФункцию("КонтрагентПередЗаписьюWebСогласованиеСервер", ИсточникСоответствие, Отказ,ЭтоОбработкаМэппинга);
	
	//Сообщить("ОтказПОСЛЕ " + Отказ);
	
	Если ЗначениеЗаполнено(ОтветXDTO.Error) Тогда
		Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
		
		// Ошибка статуса. Выделение переданного индекса Перечисления.абсСтатусыКонтрагентов
		Если Найти(ОтветXDTO.Error, "Статус контрагента в ЕИСУП ТТК отличный от") Тогда
			
			НачалоИндекса = Найти(ОтветXDTO.Error, "#");
			
			СтрИндекс = Прав(ОтветXDTO.Error, СтрДлина(ОтветXDTO.Error) - НачалоИндекса);
			СтрИндекс = СокрЛП(СтрЗаменить(СтрИндекс, "#", ""));
			//Сообщить("СтрИндекс=" + СтрИндекс + ".");
			//ОбработчикWebService.ЗаполнитьРеквизитыКонтрагентаПоXTDO(ПакетXDTO, ТекКонтрагент);
			Источник.абс_СтатусКонтрагента 			= Перечисления.абсСтатусыКонтрагентов.Получить(Число(СтрИндекс));
			Источник.абс_ПричинаИзмененияСтатуса 	= ОтветXDTO.Error;
			
		Иначе
			
			Если ЭтоОбработкаМэппинга ТОгда
				Возврат  ОтветXDTO.Error;
			КонецЕсли;
			
			Отказ = Истина;      // При ошибке запись запрещена
			//Сообщить("Статус контрагента в ЕИСУП ТТК отличный от не обнаружено:" + ОтветXDTO.Error);
			
		КонецЕсли;
		
	Иначе
		Сообщить("Статус контрагента """ + Источник + """ успешно обновлен, код ИСУП ТТК: " + ОтветXDTO.ID, СтатусСообщения.Обычное);
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
КонецФункции

&НаСервере
// XTTK. Вызывает вебсервис по согласованию с КТТК заведение контрагента
Функция СогласоватьСозданиеКонтрагента(Источник) Экспорт
	
	ИнициализацияWebService();
	
	ОтветXDTO = Фабрика.Создать(Фабрика.Тип("http://www.abs-soft.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	//ОтветXDTO.Error = "";
	
	// Заполенение данных
	XDTOКонтрагентСозданиеТип 	= Фабрика.Тип("http://www.abs-soft.ru/", "CountragentsAdd");
	XDTOКонтрагентСоздание 		= Фабрика.Создать(XDTOКонтрагентСозданиеТип);
	//ЗаполнитьЗначенияСвойств(XDTOКонтрагентСоздание, Источник);
	//XDTOКонтрагентСоздание = СоздатьПакетXDTOКонтрагента(Источник);
	// Передача вызова вебсервиса на сервер
	//ИсточникСоответствие = Новый Соответствие;
	//абс_ОбработчикWebService.ЗаполнитьXDTOКонтрагент(ЭтотОбъект, 	ИсточникСоответствие) ;
	//ИсточникСоответствие.Вставить("абс_Номер_ИСУП_ТТК", 			ЭтотОбъект.абс_Номер_ИСУП_ТТК);
	//ИсточникСоответствие.Вставить("ID", 							ЭтотОбъект.Контрагент.абс_Код_ИСУП_ТТК);
	
	Для Каждого ТекРеквизит Из Источник Цикл
		Попытка
			XDTOКонтрагентСоздание[ТекРеквизит.Ключ] = ТекРеквизит.Значение;
		Исключение
		конецПопытки;
	КонецЦикла;
		
	
	#Если Клиент Тогда
		Состояние("Ожидание ответа WebService");
	#КонецЕсли	
	
	Попытка
		ОтветXDTO = Прокси.CountragentsAdd(XDTOКонтрагентСоздание);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "СогласоватьСозданиеКонтрагента()");
		ОтветXDTO.Error = ОписаниеОшибки;
	КонецПопытки;
	
	
	
	//Сообщить("Код возврата: " + ОтветXDTO.ID);
	//Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
	//Возврат ОтветXDTO;
	Возврат Новый Структура("ID, Error", ОтветXDTO.ID, ОтветXDTO.Error);

КонецФункции

&НаСервере
// Вызов вебсервиса с сервера
Функция КонтрагентПередЗаписьюWebСогласованиеСервер(Источник, Отказ,ЭтоОбработкаМэппинга = Ложь) Экспорт
	
	абс_ОбработчикWebService = абс_WebService.ПолучитьОбработчикWebService(); 
	
	//XDTOКонтрагентСозданиеТип 	= Фабрика.Тип("http://www.abs-soft.ru/", "CountragentsDEB_Check");
	//XDTOКонтрагентСоздание 		= Фабрика.Создать(XDTOКонтрагентСозданиеТип);

	//ЗаполнитьЗначенияСвойств(XDTOКонтрагентСоздание, Источник);
	
	// Вызов обработчика
	Попытка
		Если Источник["абс_СтатусКонтрагента"] = Перечисления.абсСтатусыКонтрагентов.Подготовка Тогда
			ОтветXDTO = абс_ОбработчикWebService.СогласоватьСозданиеКонтрагента(Источник);
			//Источник.абс_Код_ИСУП_ТТК = ОтветXDTO.ID;
		ИначеЕсли Источник["абс_СтатусКонтрагента"] = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда
			ОтветXDTO = абс_ОбработчикWebService.ВызовСогласованиеДЭБ(Источник,ЭтоОбработкаМэппинга);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОтветXDTO = Новый Структура("ID, Error");
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "Вызов обработчика согласования создания контрагента по вебсервису");
		ОтветXDTO.Error = ОписаниеОшибки;
	КонецПопытки;
	
	//// Ошибка статуса. Обновление данных контрагента через входной-выходной параметр
	//// Выделение переданного индекса Перечисления.абсСтатусыКонтрагентов
	//НачалоИндекса = Найти(ОтветXDTO.Error, "#");
	//Если НачалоИндекса > 0 Тогда
	//	
	//	СтрИндекс = Прав(ОтветXDTO.Error, СтрДлина(ОтветXDTO.Error) - НачалоИндекса);
	//	СтрИндекс = СтрЗаменить(СтрИндекс, "#");
	//	//Перечисления.абсСтатусыКонтрагентов.Индекс(КонтрагентОбъект.абс_СтатусКонтрагента
	//	
	//	ОбработчикWebService.ЗаполнитьРеквизитыКонтрагентаПоXTDO(ПакетXDTO, ТекКонтрагент);
	//	
	//КонецЕсли;
		
	
	//Сообщить("Код возврата WebService: " + ОтветXDTO.ID);
	//Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
	
	Отказ = ЗначениеЗаполнено(ОтветXDTO.Error) И Найти(ОтветXDTO.Error, "Статус контрагента в ЕИСУП ТТК отличный от") = 0;	
	                                                                    
	//Возврат ОтветXDTO;
	Возврат Новый Структура("ID, Error", ОтветXDTO.ID, ОтветXDTO.Error);
	
КонецФункции


// Запрос связанных файлов Контрагента
Функция ПолучитьСписокФайловДЗО(ТекКонтрагент)Экспорт
	
	ТЗФайлов =Новый ТаблицаЗначений;
	//ТЗФайлов.Колонки.Добавить("ФайлДЗО");
	
	ТЗФайлов.Колонки.Добавить("Наименование");
	ТЗФайлов.Колонки.Добавить("ДатаИзменения");
	ТЗФайлов.Колонки.Добавить("Размер");
	Если НЕ ЗначениеЗаполнено(ТекКонтрагент) Тогда
		Возврат ТЗФайлов;
	КонецЕсли;
	
	// Запрос связанных файлов
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.ИмяФайла КАК Наименование,
	|	ХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Файл)
	|	И ХранилищеДополнительнойИнформации.ПометкаУдаления = ЛОЖЬ");
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ХранилищеДополнительнойИнформации.Хранилище,
	//|	ХранилищеДополнительнойИнформации.Наименование
	//|ИЗ
	//|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	//|ГДЕ
	//|	ХранилищеДополнительнойИнформации.Объект = &Объект
	//|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Изображение)");
	Запрос.УстановитьПараметр("Объект", ТекКонтрагент);
	
	ТЗФайлов = Запрос.Выполнить().Выгрузить();
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	НовСтрока = ТЗФайлов.Добавить();
	//	НовСтрока.Наименование = Выборка.Наименование;
	//	//ТекФайл = Выборка.Хранилище.Получить();
	//	//НовСтрока.ФайлДЗО = ТекФайл;
	//КонецЦикла;
	//ТЗФайлов.Сортировать("ДатаИзменения, Наименование");
	
	Возврат ТЗФайлов;
	
КонецФункции

// Запрос связанных файлов Контрагента
Функция ПолучитьСписокФайловДЗОБух1_6(ТекКонтрагент)Экспорт
	
	ТЗФайлов =Новый ТаблицаЗначений;
	//ТЗФайлов.Колонки.Добавить("ФайлДЗО");
	
	ТЗФайлов.Колонки.Добавить("Наименование");
	ТЗФайлов.Колонки.Добавить("ДатаИзменения");
	ТЗФайлов.Колонки.Добавить("Размер");
	Если НЕ ЗначениеЗаполнено(ТекКонтрагент) Тогда
		Возврат ТЗФайлов;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка,
	|	ХранилищеДополнительнойИнформации.Наименование
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Объект", ТекКонтрагент);
	ТЗФайлов	= Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗФайлов;
	
КонецФункции

Процедура ПоказатьФайлыЕИСУП(ТекКонтрагент) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекКонтрагент) Тогда
		Возврат;
	КонецЕсли;
	
	//ТЗФайлов = ПолучитьВсеФайлыКонтрагентаИзЕИСУП(ТекКонтрагент.Код) ;
	ТЗФайлов = абс_WebServiceСервер.ВыполнитьНаСервереФункцию("ПолучитьВсеФайлыКонтрагентаИзЕИСУП", ТекКонтрагент.Код);
	
	ФормаРаботаСФайлами = ПолучитьФорму("РаботаСФайлами");
	Для Каждого СтрокаТЗ из ТЗФайлов Цикл
		НовСТрока = ФормаРаботаСФайлами.ТЗФайлы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСТрока,СтрокаТЗ);
	КонецЦикла;
	ФормаРаботаСФайлами.ТекКонтрагент = ТекКонтрагент;
	//ФормаРаботаСФайлами.ТЗФайлы =  ТЗФайлов;
	ФормаРаботаСФайлами.Открыть();
	
КонецПРоцедуры

Функция ВыполнитьFunction(Name, ID, XML) Экспорт
	
	#Если Клиент Тогда
		Состояние("Ожидание ответа WebService");
	#КонецЕсли	
	
	ОтветXDTO = Фабрика.Создать(Фабрика.Тип("http://www.abs-soft.ru/", "Answer"));
	ОтветXDTO.ID 	= "WebService в разработке, уточните наличие обновления";
	//ОтветXDTO.Error = "";
	
	Сообщить("Код возврата: " + ОтветXDTO.ID);
	Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
КонецФункции

//АБС БАбшанов начало
Процедура ЗаполнитьРеквизитыКонтрагентаПоXTDO(ТекXTDO,ТекОбъект)
	
	СЗРеквизитовПоиска = Новый СписокЗначений;
	ТЗНастроекКонтрагенты = ПолучитьТЗНастроекКонтрагенты();
	ТЗСоответствий = ПолучитьТЗСоответствийДляЗаписиПрием(ТЗНастроекКонтрагенты,СЗРеквизитовПоиска);
	Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
		СтрокаТЗСоответствий.ПутьКДаннымЗагрузкаИзXTDO = СтрЗаменить(СокрЛП(СтрокаТЗСоответствий.ПутьКДаннымЗагрузкаИзXTDO),Символ(160),"");
		Попытка
			Если СтрокаТЗСоответствий.ПутьКДаннымВSQL = "Curator_Name"  Тогда
			КонецЕсли;
			Если СтрокаТЗСоответствий.ПутьКДаннымВSQL <> "IE" Тогда
				Выполнить(СтрокаТЗСоответствий.ПутьКДаннымЗагрузкаИзXTDO);
			КонецЕсли;
					
		Исключение
			Сообщить("Ошибка при загрузке реквизита: "+СтрокаТЗСоответствий.ПутьКДаннымВSQL);	
		КонецПопытки;
		Если  СтрокаТЗСоответствий.ПутьКДаннымВSQL  =  "OKOPF" ТОгда
						
			ТекОкопф = СтрЗаменить(СокрЛП(ТекXTDO.OKOPF),Символ(160),"");
			Если  СокрЛП(ТекОкопф) = "" ТОгда
				Сообщить("Не заполнено поле - ОКОПФ (OKOPF) ");	
			Иначе
				НашлиОкопф = Справочники.КлассификаторОКОПФ.НайтиПоКоду(ТекОкопф);
				Если НашлиОкопф.Пустая() ТОгда
					НашлиОкопф = Справочники.КлассификаторОКОПФ.НайтиПоНаименованию(ТекОкопф,Истина);
					Если НашлиОкопф.Пустая() ТОгда
						Сообщить("Не найден - ОКОПФ (OKOPF): "+ ТекОкопф);		
					Иначе
						ТекОбъект.ОКОПФ =НашлиОкопф.Ссылка;
					КонецЕсли;
				Иначе
					ТекОбъект.ОКОПФ =НашлиОкопф.Ссылка; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//===============
	//Если Не ТекОбъект.абс_ТипыКонтрагентов.Пустая() ТОгда
	//	ТекОбъект.ЮрФизЛицо =ТекОбъект.абс_ТипыКонтрагентов.ЮрФизЛицо; 		
	//КонецЕсли;
		
	Если ТекОбъект.ИНН = "0" Тогда
		ТекОбъект.ИНН = "";
	КонецЕсли;
	Если ТекОбъект.КПП = "0" Тогда
		ТекОбъект.КПП = "";
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТЗНастроекКонтрагенты(ИмяМакета ="Контрагенты" ) Экспорт
	
	ТЗНастроек = РеквизитыДляОбмена.Выгрузить();
	ТекМакет = ПолучитьМакет(ИмяМакета);
	ТекВысота = ТекМакет.ВысотаТаблицы;
	Итер = 2;
	Пока Итер<=ТекВысота Цикл
		НовСтрока = ТЗНастроек.Добавить();
		НовСтрока.ИскатьПоРеквизиту  				= ТекМакет.ПолучитьОбласть(Итер,1,Итер,1).ТекущаяОбласть.Текст;
		НовСтрока.ВыполнятьОбмен 					= ТекМакет.ПолучитьОбласть(Итер,2,Итер,2).ТекущаяОбласть.Текст;
		НовСтрока.ИмяРеквизитаВSQL					= ТекМакет.ПолучитьОбласть(Итер,3,Итер,3).ТекущаяОбласть.Текст;
		НовСтрока.ТипРеквизитаВSQL					= ТекМакет.ПолучитьОбласть(Итер,4,Итер,4).ТекущаяОбласть.Текст;
		НовСтрока.ПутьКДаннымРеквизита				= ТекМакет.ПолучитьОбласть(Итер,5,Итер,5).ТекущаяОбласть.Текст;
		НовСтрока.ПутьКДаннымРеквизитаСУсловием		= ТекМакет.ПолучитьОбласть(Итер,6,Итер,6).ТекущаяОбласть.Текст;
		НовСтрока.Описание							= ТекМакет.ПолучитьОбласть(Итер,7,Итер,7).ТекущаяОбласть.Текст;
		//НовСтрока.РеквизитГруппы					= ТекМакет.ПолучитьОбласть(Итер,8,Итер,8).ТекущаяОбласть.Текст;
		
		НовСтрока.ПутьКДаннымЗагрузкаИзXTDO 		= ТекМакет.ПолучитьОбласть(Итер,8,Итер,8).ТекущаяОбласть.Текст;
		НовСтрока.ПутьКДаннымЗагрузкаИзXTDOУсловие 	= ТекМакет.ПолучитьОбласть(Итер,9,Итер,9).ТекущаяОбласть.Текст;
		
		НовСтрока.ОбязательноеЗаполнение 				= СОкрЛП(ТекМакет.ПолучитьОбласть(Итер,10,Итер,10).ТекущаяОбласть.Текст);  //21092011
		НовСтрока.ИмяРеквизитаОбязательногоЗаполнения1С	= СОкрЛП(ТекМакет.ПолучитьОбласть(Итер,11,Итер,11).ТекущаяОбласть.Текст);  //21092011

		НовСтрока.НаименованиеПоляВводаНаФорме		= СОкрЛП(ТекМакет.ПолучитьОбласть(Итер,12,Итер,12).ТекущаяОбласть.Текст);  
		
		
		Итер = Итер+1;	 
	КонецЦикла;
	
	Возврат ТЗНастроек;
	
КонецФункции

Функция ПолучитьТЗСоответствийДляЗаписи(ТЗНастроек,СЗРеквизитовПоиска) Экспорт
	
	ТекПутьКРевизитамSQL =""; 
	ТЗСоответствий = Новый ТаблицаЗначений;
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВSQL");
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВ1С");
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымЗагрузкаИзXTDO");
	ТЗСоответствий.Колонки.Добавить("ЭтоУсловие");
	ТЗСоответствий.Колонки.Добавить("Тип");
	ТЗСоответствий.Колонки.Добавить("РеквизитГруппы");
	
	Для Каждого СтрокаТЧ из   ТЗНастроек Цикл
		Если СтрокаТЧ.ВыполнятьОбмен = Ложь ТОгда
			ПРодолжить;		
		КонецЕсли;
		НовСтрока = ТЗСоответствий.Добавить();
		Если СтрокаТЧ.ИскатьПоРеквизиту ТОгда
			СЗРеквизитовПоиска.Добавить(СтрокаТЧ.ИмяРеквизитаВSQL,СтрокаТЧ.ПутьКДаннымРеквизита);
		КонецЕсли;
		НовСтрока.ЭтоУсловие = СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием;
		НовСтрока.Тип =   НРег(СокрЛП(СтрокаТЧ.ТипРеквизитаВSQL));
		НовСтрока.РеквизитГруппы = СтрокаТЧ.РеквизитГруппы;
		
		Если СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDOУсловие = 1 ТОгда
			НовСтрока.ПутьКДаннымЗагрузкаИзXTDO =СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDO+ " = ТекXTDO["""+СтрокаТЧ.ИмяРеквизитаВSQL+"""]"	 
		ИНачеЕсли  СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDOУсловие = 2 Тогда
			НовСтрока.ПутьКДаннымЗагрузкаИзXTDO =СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDO;	 
		КонецЕсли;
		//------------------------------
		
		НовСтрока.ПутьКДаннымВSQL = ТекПутьКРевизитамSQL+СокрЛП(СтрокаТЧ.ИмяРеквизитаВSQL);
		
		Если  СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием ТОгда
			//Это условие так на всяки пожарный, вдруг все таки поставили галку условие и ниче не сделали , то есть оставили в поле к примеру "Наименование" или "ТекОбъект.наименование"
			Если Лев(СтрокаТЧ.ПутьКДаннымРеквизита,1) <>"?" ТОгда
				Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
					НовСтрока.ПутьКДаннымВ1С ="Значение = "+ СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
				Иначе
					НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
				КонецЕсли;
			Иначе
				НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			КонецЕсли;
		ИначеЕсли  Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),6) = "запись" ТОгда
			НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
		Иначе
			Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
				НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			Иначе
				НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗСоответствий;
	
КонецФункции

Функция ПолучитьТЗСоответствийДляЗаписиПрием(ТЗНастроек,СЗРеквизитовПоиска) Экспорт
	
	ТекПутьКРевизитамSQL =""; 
	ТЗСоответствий = Новый ТаблицаЗначений;
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВSQL");
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВ1С");
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымЗагрузкаИзXTDO");
	ТЗСоответствий.Колонки.Добавить("ЭтоУсловие");
	ТЗСоответствий.Колонки.Добавить("Тип");
	ТЗСоответствий.Колонки.Добавить("РеквизитГруппы");
	
	Для Каждого СтрокаТЧ из   ТЗНастроек Цикл
		Если СтрокаТЧ.ВыполнятьОбмен = Ложь ТОгда
			ПРодолжить;		
		КонецЕсли;
		НовСтрока = ТЗСоответствий.Добавить();
		Если СтрокаТЧ.ИскатьПоРеквизиту ТОгда
			СЗРеквизитовПоиска.Добавить(СтрокаТЧ.ИмяРеквизитаВSQL,СтрокаТЧ.ПутьКДаннымРеквизита);
		КонецЕсли;
		НовСтрока.ЭтоУсловие = СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием;
		НовСтрока.Тип =   НРег(СокрЛП(СтрокаТЧ.ТипРеквизитаВSQL));
		НовСтрока.РеквизитГруппы = СтрокаТЧ.РеквизитГруппы;
		
		Если СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDOУсловие = 1 ТОгда
			НовСтрока.ПутьКДаннымЗагрузкаИзXTDO =СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDO+ " = СтрЗаменить(СокрЛП(ТекXTDO["""+СтрокаТЧ.ИмяРеквизитаВSQL+"""]),Символ(160),"""")";
		ИНачеЕсли  СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDOУсловие = 2 Тогда
			НовСтрока.ПутьКДаннымЗагрузкаИзXTDO =СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDO;	 
		КонецЕсли;
		//------------------------------
		
		НовСтрока.ПутьКДаннымВSQL = ТекПутьКРевизитамSQL+СокрЛП(СтрокаТЧ.ИмяРеквизитаВSQL);
		
		Если  СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием ТОгда
			//Это условие так на всяки пожарный, вдруг все таки поставили галку условие и ниче не сделали , то есть оставили в поле к примеру "Наименование" или "ТекОбъект.наименование"
			Если Лев(СтрокаТЧ.ПутьКДаннымРеквизита,1) <>"?" ТОгда
				Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
					НовСтрока.ПутьКДаннымВ1С ="Значение = "+ СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
				Иначе
					НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
				КонецЕсли;
			Иначе
				НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			КонецЕсли;
		ИначеЕсли  Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),6) = "запись" ТОгда
			НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
		Иначе
			Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
				НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			Иначе
				НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗСоответствий;
	
КонецФункции

Процедура ЗаполнитьXDTOКонтрагент(ТекОбъект, XDTOКонтрагентСоздание) Экспорт
	
	СЗРеквизитовПоиска = Новый СписокЗначений;
	ТЗНастроекКонтрагенты = ПолучитьТЗНастроекКонтрагенты();
	ТЗСоответствий = ПолучитьТЗСоответствийДляЗаписи(ТЗНастроекКонтрагенты,СЗРеквизитовПоиска);
	
	СтруктураЗначений = Новый Структура;
	Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
		Значение = "";
		Попытка
			Выполнить(СтрокаТЗСоответствий.ПутьКДаннымВ1С);
		Исключение           
			
		КонецПопытки;
		Если СтрокаТЗСоответствий.Тип = "строка" Тогда
			Значение = СтрЗаменить(СокрЛП(Значение),Символ(160),"");
		ИначеЕсли СтрокаТЗСоответствий.Тип = "число" ТОгда
			Если ЗначениеЗаполнено(Значение) Тогда
				Попытка
					Значение = Число(Значение);	
				Исключение
					Значение = 0;	
				КонецПопытки;
				
			Иначе
				Значение = 0;
			КонецЕсли;
		КонецЕсли;
		Попытка                                                                        //АБС 00459  21092011
			XDTOКонтрагентСоздание[СтрокаТЗСоответствий.ПутьКДаннымВSQL] = Значение;   //АБС 00459  21092011
			//XDTOКонтрагентСоздание["Status"] = ТекОбъект.абс_СтатусКонтрагента;   //АБС 00459  21092011
		Исключение                                                                     //АБС 00459  21092011
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

//АБС Бабшанов Конец 
//АБС 00459 начало 21092011 
функция ПроверитьКонтрольнуюСумму(Знач ИНН)
	
	Если (стрДлина(ИНН) = 10) тогда
		//юр.лицо
		//н10
		делимое = 2*число(сред(ИНН,1,1))+4*число(сред(ИНН,2,1))+10*число(сред(ИНН,3,1))+3*число(сред(ИНН,4,1))+5*число(сред(ИНН,5,1))+9*число(сред(ИНН,6,1))+4*число(сред(ИНН,7,1))+6*число(сред(ИНН,8,1))+8*число(сред(ИНН,9,1));
		делитель = 11;
		остатокОтДеления = делимое - цел(делимое/делитель)*делитель;
		делимое = остатокОтДеления;
		делитель = 10;
		остатокОтДеления = делимое - цел(делимое/делитель)*делитель;
		н10 = остатокОтДеления;
		
		Если число(сред(ИНН,10,1)) = н10 тогда
			возврат 1;
		Иначе 
			возврат 0;
		КонецЕсли;
		
	ИначеЕсли (стрДлина(ИНН) = 12) тогда
		//физлицо
		//н11
		делимое = 7*число(сред(ИНН,1,1))+2*число(сред(ИНН,2,1))+4*число(сред(ИНН,3,1))+10*число(сред(ИНН,4,1))+3*число(сред(ИНН,5,1))+5*число(сред(ИНН,6,1))+9*число(сред(ИНН,7,1))+4*число(сред(ИНН,8,1))+6*число(сред(ИНН,9,1))+8*число(сред(ИНН,10,1));
		делитель = 11;
		остатокОтДеления = делимое - цел(делимое/делитель)*делитель;
		делимое = остатокОтДеления;
		делитель = 10;
		остатокОтДеления = делимое - цел(делимое/делитель)*делитель;
		н11 = остатокОтДеления;
		
		//н12
		делимое = 3*число(сред(ИНН,1,1))+7*число(сред(ИНН,2,1))+2*число(сред(ИНН,3,1))+4*число(сред(ИНН,4,1))+10*число(сред(ИНН,5,1))+3*число(сред(ИНН,6,1))+5*число(сред(ИНН,7,1))+9*число(сред(ИНН,8,1))+4*число(сред(ИНН,9,1))+6*число(сред(ИНН,10,1))+8*число(сред(ИНН,11,1));
		делитель = 11;
		остатокОтДеления = делимое - цел(делимое/делитель)*делитель;
		делимое = остатокОтДеления;
		делитель = 10;
		остатокОтДеления = делимое - цел(делимое/делитель)*делитель;
		н12 = остатокОтДеления;
		
		н1112 = н11*10 + н12;
		Если число(сред(ИНН,11,2)) = н1112 тогда
			возврат 1;
		Иначе 
			возврат 0;
		КонецЕсли;
	Иначе 
		сообщить("Неверная длина ИНН.");
	КонецЕсли;
	
КонецФункции

Функция ПроверитьИНННаКонтрольнуюСумму(ИНН,ЮрФизЛицо) Экспорт
	
	ИННДляПроверки = СокрЛП(ИНН);
	Если ИННДляПроверки = "" тогда
		Возврат Истина;
	Иначе
		попытка 
			ЧислоИНН = число(ИННДляПроверки);
		исключение	
			возврат -3; //в строке инн присутствуют не только цифры
		конецпопытки;
		
		Если (стрДлина(ИННДляПроверки) = 10) или (стрДлина(ИННДляПроверки) = 12) тогда
			
			Если ПроверитьКонтрольнуюСумму(ИННДляПроверки) = 1 тогда
				Если ((ЮрФизЛицо = перечисления.ЮрФизЛицо.ФизЛицо) и (стрДлина(ИННДляПроверки) = 10)) тогда
					возврат 2; //ИНН не соответствует Физ.Лицу (ИНН Юр.Лица)	
				конецесли;
				Если ((ЮрФизЛицо = перечисления.ЮрФизЛицо.ЮрЛицо) и (стрДлина(ИННДляПроверки) = 12)) тогда
					возврат 3; //ИНН не соответствует Юр.Лицу  (ИНН Физ.Лица)
				КонецЕсли;
				возврат 1;
			иначе
				возврат 0;
			КонецЕсли;
			
			Возврат ПроверитьКонтрольнуюСумму(ИННДляПроверки);
		Иначе
			возврат -2; //не верная длинна ИНН
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьИНН(текИНН,ЮрФизЛицо,НеЯвляетсяРезидентом)
	
	ИНН = СтрЗаменить(СокрЛП(ТекИНН),Символ(160),"");
	СЗОшибок = новый СписокЗначений;
	Если   ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо ТОгда
		Если НЕ ЗначениеЗаполнено(ИНН) Тогда
			Возврат СЗОшибок;
		КонецЕсли;
	ИначеЕсли ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо ТОгда
		Если НЕ ЗначениеЗаполнено(ИНН) Тогда
			СЗОшибок.Добавить("Не заполнено поле - ИНН (INN) ");
			Возврат СЗОшибок;
		КонецЕсли;

		
		
	КонецЕсли;
	
	
	// АБС ВСТАВКА ПроверкаИНН
	Если НеЯвляетсяРезидентом Тогда
		Возврат СЗОшибок;
	КонецЕсли;
	// АБС ВСТАВКА ПроверкаИНН КОНЕЦ
	
	// АБС Добавлено 6
	КодОшибки = ПроверитьИНННаКонтрольнуюСумму(ИНН,ЮрФизЛицо);
	
	ТекстСообщения = "";
	
	Если КодОшибки = -3 Тогда
		ТекстСообщения = "В ""ИНН"" содержаться символы.";
	ИначеЕсли КодОшибки = 3 Тогда
		ТекстСообщения = """ИНН"" не соответствует Физ.Лицу (ИНН Юр.Лица).";
	ИначеЕсли КодОшибки = 2 Тогда
		ТекстСообщения = """ИНН"" не соответствует Юр.Лицу (ИНН Физ.Лица).";
	ИначеЕсли КодОшибки = -2 Тогда
		ТекстСообщения = "Неверная длина ИНН.";
	ИначеЕсли КодОшибки = 0 Тогда
		ТекстСообщения = "Не пройдена проверка контрольного числа ИНН (ИНН неверный).";
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		СЗОшибок.Добавить("""ИНН"" не соответствует требованиям: " + ТекстСообщения);
	КонецЕсли;
	
	Возврат СЗОшибок;
КонецФункции

Функция ПолучитьТЗОбязательныхРеквизитовКонтрагентов() Экспорт
	
	ТЗОбязательныхРеквизитов = ОбязательныеРеквизиты.Выгрузить();
	ТекМакет = ПолучитьМакет("ОбязательныеРеквизитыКонтрагентов");
	ТекВысота = ТекМакет.ВысотаТаблицы;
	Итер = 2;
	Пока Итер<=ТекВысота Цикл
		НовСтрока = ТЗОбязательныхРеквизитов.Добавить();
		НовСтрока.ИмяРеквизита  				= СокрЛП(ТекМакет.ПолучитьОбласть(Итер,1,Итер,1).ТекущаяОбласть.Текст);
		НовСтрока.ИмяЭлементаФормы 				= СокрЛП(ТекМакет.ПолучитьОбласть(Итер,2,Итер,2).ТекущаяОбласть.Текст);
		НовСтрока.ОбязательноеЗаполнение		= СокрЛП(ТекМакет.ПолучитьОбласть(Итер,3,Итер,3).ТекущаяОбласть.Текст);
				
		Итер = Итер+1;	 
	КонецЦикла;
	
	Возврат ТЗОбязательныхРеквизитов;
	
КонецФункции


Функция ПроверитьЗАполнениеРеквизитовКонтрагентаВерсия2(ТекКонтрагент,ТекФорма) Экспорт
	
	ТЗОбязательныхРеквизитов = ПолучитьТЗОбязательныхРеквизитовКонтрагентов();	
	
	СЗОшибок = новый СписокЗначений;
	
	МетаданныеКонтрагентаРеквизиты = Метаданные.Справочники.Контрагенты.Реквизиты;
	Для Каждого СтрокаТЗ из ТЗОбязательныхРеквизитов Цикл
		Если СтрокаТЗ.ОбязательноеЗаполнение = "0"	 ТОгда
			ПРодолжить;
		КонецЕсли;
		Если СтрокаТЗ.ОбязательноеЗаполнение = "1" Тогда
			Если    (СтрокаТЗ.ИмяРеквизита = "ИНН" 
					или  СтрокаТЗ.ИмяРеквизита = "КПП") и   ТекКонтрагент.НеЯвляетсяРезидентом       Тогда
					
					Продолжить;
			КонецЕсли;
				
			Если   СтрокаТЗ.ИмяРеквизита = "КПП" 
				    и   ТекКонтрагент.абс_ТипыКонтрагентов = Справочники.абс_ТипыКонтрагентов.ИндивидуальныеПредприниматели   Тогда
					Продолжить;
			КонецЕсли;
				
			
			Если Не ЗначениеЗаполнено(ТекКонтрагент[СтрокаТЗ.ИмяРеквизита])  Тогда
				
				// При записи старого элемента, где еще не заполнен Инициатор, ошибка, поле блокировано
								
				ПредставлениеРеквизита = "";
				Если СтрокаТЗ.ИмяРеквизита = "Наименование" или СтрокаТЗ.ИмяРеквизита = "Код"  Тогда
					ПредставлениеРеквизита = СтрокаТЗ.ИмяРеквизита;
				Иначе
					ПредставлениеРеквизита = МетаданныеКонтрагентаРеквизиты[СтрокаТЗ.ИмяРеквизита].Синоним;
				КонецЕсли;
				СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: "+ПредставлениеРеквизита);
				
			ИначеЕсли СтрокаТЗ.ИмяРеквизита = "ИНН"  ТОгда
				
				ТекСЗОшибок = ПроверитьИНН(ТекКонтрагент.ИНН,ТекКонтрагент.ЮрФизЛицо,ТекКонтрагент.НеЯвляетсяРезидентом);
				
				Для Каждого СтрокаСЗ из ТекСЗОшибок Цикл
					СЗОшибок.Добавить(СтрокаСЗ.Значение);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если ТекКонтрагент.Покупатель = ложь и ТекКонтрагент.Поставщик = ложь ТОгда
		СЗОшибок.Добавить("Контрагент должен быть либо поставщиком либо покупателем!!!");	
	КонецЕсли;
		
	Возврат СЗОшибок;

	
КонецФункции
Процедура  УстановитьДоступностьДляЭтапа1ДляЭлементаФормыКонтрагента(ЭлементыФормы)Экспорт
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОтправитьДанные.Доступность 			= Ложь;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОтправитьФайлы.Доступность 			= Ложь;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.СоздатьЗаявкуНаИзменение.Доступность = Ложь;
	ЭлементыФормы.Статус.Доступность 												= Ложь

	
Конецпроцедуры
Процедура  УстановитьДоступностьДляЭтапа1ДляСпискаФормыКонтрагента(ЭлементыФормы)Экспорт
	ТекЭтапМэппинга = "";
	Выполнить("ТекЭтапМэппинга = абс_ПроцедурыСПовторнымВызовом.ПолучитьЭтапыМэппингаПоИннКппДляТекущейБазы()");
	
	
	Если  ТекЭтапМэппинга <>3 ТОгда
		Попытка
			ЭлементыФормы.ДействияФормы.Кнопки.ОтправитьФайлы.Доступность = Ложь;
		Исключение
		КонецПопытки;
		
	    Попытка
		    ЭлементыФормы.ДействияФормы.Кнопки.ОткрытьСписокЗаявокНаИзменений.Доступность = Ложь;
		Исключение
		КонецПопытки;
		
	КонецЕсли;

	
Конецпроцедуры
Процедура ПередЗаписьюДокументов(Источник,Отказ, РежимЗаписи, РежимПроведения)  Экспорт
	
	Если Источник.ОбменДанными.Загрузка  ТОгда
		Возврат;
	КонецЕсли;
	Если Отказ ТОгда
		ВОзврат;
	КонецЕсли;
	ТекЭтапМэппинга = "";
	Выполнить("ТекЭтапМэппинга = абс_ПроцедурыСПовторнымВызовом.ПолучитьЭтапыМэппингаПоИннКппДляТекущейБазы()");
	
	Если ТекЭтапМэппинга =1  или ТекЭтапМэппинга =2 ТОгда
		ВОзврат;
	КонецЕсли;
	
	Если Константы.абс_ОтключитьКонтрольЗаписиДокументовИСправочниковСактивнымКонтрагентом.Получить()  ТОгда
		Возврат;	
	КонецЕсли;
	Если РежимЗаписи <> РежимЗаписиДокумента.Запись  и РежимЗаписи <> РежимЗаписиДокумента.Проведение   Тогда
		Возврат;	
	КонецЕсли;
	
	
	Если  ( Источник.Метаданные().Имя = "абс_ЗаявкаНаИзменениеРеквизитовКонтрагента" )
		  Или  ( Источник.Метаданные().Имя = "абс_ЗакупочныйЗаказ" )
		  Или  ( Источник.Метаданные().Имя = "КорректировкаДолга" )
		  
																					ТОгда
		ВОзврат;
	КонецЕсли;
	ТекИмяМетаданных = Источник.Метаданные().Имя ;
	
	ЗАпрос = Новый запрос;
	ЗАпрос.УстановитьПараметр("ТипДокументы","Документы");
	ЗАпрос.УстановитьПараметр("ВидМетаданных",ТекИмяМетаданных) ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ВидМетаданных
	|ИЗ
	|	РегистрСведений.АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов КАК АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов
	|ГДЕ
	|	АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ТипМетаданных = &ТипДокументы
	|	И АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.НеКонтролировать = ИСТИНА
	|	И АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ВидМетаданных = &ВидМетаданных";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() <> 0 ТОгда
		Возврат;
	КонецЕсли;
	
	ТИпКонтрагентаСсылка = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка());
	ТекМетаданные = Источник.Метаданные().Имя;
	
	СЗОшибок = Новый СписокЗначений;
	Для Каждого Реквизиты из Источник.Метаданные().Реквизиты Цикл
		
		Если ТипЗнч(Источник[Реквизиты.Имя]) =   ТИпКонтрагентаСсылка Тогда
			
			Если ЗначениеЗаполнено(Источник[Реквизиты.Имя]) 
				И Источник[Реквизиты.Имя].Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.Активный
				И Источник[Реквизиты.Имя].Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов		ТОгда
				
				СЗОшибок.Добавить("Реквизит: " +	Реквизиты.Синоним+"  - выбраный контрагент не является активным!");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Источник.Метаданные().Имя = "ОперацияБух"   ТОгда
		//Проверим на активность контрагентов  все проводки
		
		ТекДВижения = Источник.ДВижения.Хозрасчетный;
		
		Для Каждого Проводка Из ТекДВижения Цикл
		
	
			// Приведение пустых значений субконто составного типа.
			Для Каждого Субконто Из Проводка.СубконтоДт Цикл
				
				Если ТипЗнч(Субконто.Значение) =   ТИпКонтрагентаСсылка Тогда
			
					Если ЗначениеЗаполнено(Субконто.Значение) 
						И Субконто.Значение.Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.Активный
						И Субконто.Значение.Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов		ТОгда
						
						СЗОшибок.Добавить("Проводка: " +	Субконто.Значение+"  - выбраный контрагент не является активным!");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;

	
	Если  СЗОшибок.Количество() <> 0 ТОгда
		Для Каждого СТрокаСЗ из СЗОшибок Цикл
			Сообщить(СТрокаСЗ.Значение);	
		КонецЦикла;
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//Если  Источник.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено ТОгда
	//	Если ТипЗнч(Источник["Контрагент"].Ссылка) =  ТипЗнч(Справочники.Контрагенты.ПустаяСсылка())  ТОгда
	//		Если  Источник["Контрагент"].Абс_СТатусКонтрагента <>Перечисления.абсСтатусыКонтрагентов.Активный ТОгда
	//			Сообщить("Выбраный контрагент не является Активным!!!");
	//			Отказ = Истина;
	//			Возврат;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли
	
	// Вставить содержимое обработчика.
КонецПРоцедуры

Процедура ПриЗаписиДоговора(Источник,Отказ)  Экспорт
	
		
	
	Если Источник.ОбменДанными.Загрузка  ТОгда
		Возврат;
	КонецЕсли;
	
	Если Отказ ТОгда
		ВОзврат;
	КонецЕсли;
	
	Если Константы.абс_ОтключитьКонтрольЗаписиДокументовИСправочниковСактивнымКонтрагентом.Получить()  ТОгда
		Возврат;	
	КонецЕсли;
	ТекЭтапМэппинга = "";
	Выполнить("ТекЭтапМэппинга = абс_ПроцедурыСПовторнымВызовом.ПолучитьЭтапыМэппингаПоИннКппДляТекущейБазы()");
	
	Если ТекЭтапМэппинга =1  или ТекЭтапМэппинга =2 ТОгда
		ВОзврат;
	КонецЕсли;

	ТекМетаданне = Источник.Ссылка.Метаданные();
	
	Если   (ТекМетаданне.Имя =   "ХранилищеДополнительнойИнформации") или  ТекМетаданне.Имя  = "Контрагенты" ТОгда
		Возврат;
	КонецЕсли;
	
		
	ТекИмяМетаданных = Источник.Метаданные().Имя ;
	
	ЗАпрос = Новый запрос;
	ЗАпрос.УстановитьПараметр("ТипДокументы","Справочники");
	ЗАпрос.УстановитьПараметр("ВидМетаданных",ТекИмяМетаданных) ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ВидМетаданных
	|ИЗ
	|	РегистрСведений.АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов КАК АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов
	|ГДЕ
	|	АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ТипМетаданных = &ТипДокументы
	|	И АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.НеКонтролировать = ИСТИНА
	|	И АБС_СписокИсключенийПриКонтролеАктивностиКонтрагентов.ВидМетаданных = &ВидМетаданных";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() <> 0 ТОгда
		Возврат;
	КонецЕсли;
	
	ТИпКонтрагентаСсылка = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка());
	ТекМетаданные = Источник.Метаданные().Имя;
	
	СЗОшибок = Новый СписокЗначений;
	Для Каждого Реквизиты из Источник.Метаданные().Реквизиты Цикл
		
		Если ТипЗнч(Источник[Реквизиты.Имя]) =   ТИпКонтрагентаСсылка Тогда
			
			Если ЗначениеЗаполнено(Источник[Реквизиты.Имя]) 
				И Источник[Реквизиты.Имя].Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.Активный
				И Источник[Реквизиты.Имя].Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов	ТОгда
				СЗОшибок.Добавить("Реквизит: " +	Реквизиты.Синоним+"  - выбраный контрагент не является активным или не в статусе изменение информации о контрагенте!");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Если ЗначениеЗаполнено(Источник.Владелец) ТОгда
	//	Если ТипЗнч(Источник.Владелец) =   ТИпКонтрагентаСсылка 
	//		И Источник.Владелец.Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.Активный
	//		И Источник.Владелец.Абс_СТатусКонтрагента  <>Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов  ТОгда
	//		
	//		СЗОшибок.Добавить("Реквизит: Владелец (контрагент)  - выбраный контрагент не является активным!");
	//	КонецЕсли;
	//КонецЕсли;
	
	
	Если  СЗОшибок.Количество() <> 0 ТОгда
		Для Каждого СТрокаСЗ из СЗОшибок Цикл
			Сообщить(СТрокаСЗ.Значение);	
		КонецЦикла;
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	

	
	
КонецПРоцедуры



Процедура УстановитьДоступностьОбязательныхРеквизитовКонтрагентаЭтап2(ЭлементыФормы)Экспорт
	//ТЗОбязательныхРеквизитов = ПолучитьТЗОбязательныхРеквизитовКонтрагентов();	
	//
	//мТолькоПросмотр = Истина;
	//МетаданныеКонтрагентаРеквизиты = Метаданные.Справочники.Контрагенты.Реквизиты;
	//Для Каждого СтрокаТЗ из ТЗОбязательныхРеквизитов Цикл
	//	Если СтрокаТЗ.ОбязательноеЗаполнение = "0"	 ТОгда
	//		ПРодолжить;
	//	КонецЕсли;
	//	
	//	Если ТипЗнч(ЭлементыФормы[СтрокаТЗ.ИмяЭлементаФормы]) = Тип("ПолеВвода") Тогда
	//		ЭлементыФормы[СтрокаТЗ.ИмяЭлементаФормы].ТолькоПросмотр = мТолькоПросмотр;
	//	Иначе
	//		ЭлементыФормы[СтрокаТЗ.ИмяЭлементаФормы].Доступность = НЕ мТолькоПросмотр;
	//	КонецЕсли;
	//	
	//	
	//КонецЦикла;
//	ЭлементыФормы.КнопкаГенарацииКПП.Доступность = Ложь;
	ЭлементыФормы.ЮрФизЛицо.Доступность = Ложь;
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОтправитьДанные.Доступность 			= Ложь;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОтправитьФайлы.Доступность 			= Ложь;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.СоздатьЗаявкуНаИзменение.Доступность = Ложь;
	ЭлементыФормы.Статус.Доступность 												= Ложь;
	
	Возврат ;
				
КонецПроцедуры
Процедура УстановитьДоступностьОбязательныхРеквизитовКонтрагентаЭтап3(ЭлементыФормы)Экспорт
	ТЗОбязательныхРеквизитов = ПолучитьТЗОбязательныхРеквизитовКонтрагентов();	
	
	мТолькоПросмотр = Истина;
	МетаданныеКонтрагентаРеквизиты = Метаданные.Справочники.Контрагенты.Реквизиты;
	Для Каждого СтрокаТЗ из ТЗОбязательныхРеквизитов Цикл
		Если СтрокаТЗ.ОбязательноеЗаполнение = "0"	 ТОгда
			ПРодолжить;
		КонецЕсли;
		Попытка
			Если ТипЗнч(ЭлементыФормы[СтрокаТЗ.ИмяЭлементаФормы]) = Тип("ПолеВвода") Тогда
				ЭлементыФормы[СтрокаТЗ.ИмяЭлементаФормы].ТолькоПросмотр = мТолькоПросмотр;
			Иначе
				ЭлементыФормы[СтрокаТЗ.ИмяЭлементаФормы].Доступность = НЕ мТолькоПросмотр;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		
	КонецЦикла;
	//ЭлементыФормы.КнопкаГенарацииКПП.Доступность = Ложь;
	ЭлементыФормы.ЮрФизЛицо.Доступность = Ложь;
	
	Возврат ;
				
КонецПроцедуры


Функция ПроверитьЗаполнениеРеквизитовКонтрагента(ТекКонтрагент) Экспорт
	
	ТЗНастроек = ПолучитьТЗНастроекКонтрагенты();	
	СЗОшибок = новый СписокЗначений;
	//Возврат СЗОшибок; //нафиг
	МетаданныеКонтрагентаРеквизиты = Метаданные.Справочники.Контрагенты.Реквизиты;
	Для Каждого СтрокаТЗ из ТЗНастроек Цикл
		Если СтрокаТЗ.ОбязательноеЗаполнение = "0"	 ТОгда
			ПРодолжить;
		КонецЕсли;
		Если СтрокаТЗ.ОбязательноеЗаполнение = "1" Тогда
			ТекЗначениеРеквизита = ТекКонтрагент[СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С];
			ТекИмяРеквизита =   СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С;
			Если НЕ  ЗначениеЗаполнено(ТекЗначениеРеквизита) 
				И нЕ (ТекКонтрагент.НеЯвляетсяРезидентом И (ТекИмяРеквизита = "КПП" или ТекИмяРеквизита = "ИНН" или 
															ТекИмяРеквизита = "КодПоОКПО" или ТекИмяРеквизита = "абс_КодОКОНХ" или ТекИмяРеквизита = "ОКОПФ" )) 
				И Не (ТекКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо и (ТекИмяРеквизита = "КПП" или ТекИмяРеквизита = "КодПоОКПО" или ТекИмяРеквизита = "ИНН"
				                                                                  или ТекИмяРеквизита = "абс_КодОКОНХ" или ТекИмяРеквизита = "ОКОПФ" ))
																				  
																				  																					Тогда

				
				// При записи старого элемента, где еще не заполнен Инициатор, ошибка, поле блокировано
				Если СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С = "абс_Инициатор" Тогда
					ТекКонтрагент.абс_Инициатор = ПараметрыСеанса.ТекущийПользователь;
					Продолжить;
				КонецЕсли;
				
				ПредставлениеРеквизита = "";
				Если СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С = "Наименование" или СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С = "Код"  Тогда
					ПредставлениеРеквизита = СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С;
				Иначе
					ПредставлениеРеквизита = МетаданныеКонтрагентаРеквизиты[СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С].Синоним;
				КонецЕсли;
				СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: "+ПредставлениеРеквизита);
				
			ИначеЕсли СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С = "ИНН" И нЕ ТекКонтрагент.НеЯвляетсяРезидентом  ТОгда
				
				Если  ТекКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо и  СокрЛП(ТекЗначениеРеквизита) = "" или  СокрЛП(ТекЗначениеРеквизита) = "0" ТОгда
					ПРодолжить;
				КонецЕсли;
				
				ТекСЗОшибок = ПроверитьИНН(ТекКонтрагент.ИНН,ТекКонтрагент.ЮрФизЛицо,ТекКонтрагент.НеЯвляетсяРезидентом);
				
				Для Каждого СтрокаСЗ из ТекСЗОшибок Цикл
					СЗОшибок.Добавить(СтрокаСЗ.Значение);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если ТекКонтрагент.Покупатель = ложь и ТекКонтрагент.Поставщик = ложь и Не ТекКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо ТОгда
		СЗОшибок.Добавить("Контрагент должен быть либо поставщиком либо покупателем!!!");	
	КонецЕсли;
	//Раскомментировать-----начало
	//Если ТекКонтрагент.Метаданные().Реквизиты.Найти("абс_КураторХТТК") = Неопределено ТОгда
	//	
	//	Если   СокрЛП(ТекКонтрагент.абс_КураторНаименование) = "" ТОгда
	//		СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: Куратор (наименование)!!!");	
	//	КОнецЕсли;
	//	Если   СокрЛП(ТекКонтрагент.абс_КураторКод) = "" ТОгда
	//		СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: Куратор (e-mail)!!!");	
	//	КОнецЕсли;
	//Иначе
	//	Если  Не ЗначениеЗаполнено(ТекКонтрагент.абс_КураторХТТК)  ТОгда
	//		СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: Куратор !!!");	
	//	КОнецЕсли;
	//КонецЕсли;
	//Раскомментировать-----конец
	
	Возврат СЗОшибок;
КонецФункции
Функция ПроверитьЗаполнениеРеквизитовXTDOКонтрагентыЕИСУП(XTDO) Экспорт
	
	СЗОшибок = Новый СписокЗначений;
	Если СокрЛП(XTDO.Name) = "" ТОгда
	 	СЗОшибок.Добавить("Не заполнено поле - Наименование (Name) ");
	КОнецЕсли;
	Если СокрЛП(XTDO.Full_Name) = "" ТОгда
	 	СЗОшибок.Добавить("Не заполнено поле - Полное Наименование (Full_Name) ");
	КОнецЕсли;
	Если СокрЛП(XTDO.Type_ID) = "" ТОгда
	 	СЗОшибок.Добавить("Не заполнено поле - Тип контрагента (Type_ID) ");
	КОнецЕсли;
	Если СокрЛП(XTDO.Type_ID) = "" ТОгда
	 	СЗОшибок.Добавить("Не заполнено поле - Тип контрагента (Type_ID) ");
	КОнецЕсли;
	
	
	Если XTDO.No_Resident = Ложь ТОгда
		
		Если XTDO.IE = Ложь ТОгда      //Если ЮрЛицо
			
			Если XTDO.Customer =Ложь и XTDO.Supplier = Ложь ТОгда
				СЗОшибок.Добавить("Контрагент должен быть либо поставщиком либо покупателем  (Customer или Supplier)!!!");	
			КонецЕсли;
			
			//Теперь проверим ИНН и КПП
			Если СокрЛП(XTDO.KPP) = "" ТОгда
			 	СЗОшибок.Добавить("Не заполнено поле - КПП (KPP) ");
			КОнецЕсли;
			
			//ТекОкопф = СтрЗаменить(СокрЛП(XTDO.OKOPF),Символ(160),"");
			//Если  СокрЛП(XTDO.OKOPF) = "" ТОгда
			//	СЗОшибок.Добавить("Не заполнено поле - ОКОПФ (OKOPF) ");	
			//Иначе
			//	НашлиОкопф = Справочники.КлассификаторОКОПФ.НайтиПоКоду(ТекОкопф);
			//	Если НашлиОкопф.Пустая() ТОгда
			//		НашлиОкопф = Справочники.КлассификаторОКОПФ.НайтиПоНаименованию(ТекОкопф,Истина);
			//		Если НашлиОкопф.Пустая() ТОгда
			//			СЗОшибок.Добавить("Не найден - ОКОПФ (OKOPF): "+ ТекОкопф);			
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;
			
			ТекЮрФиз = Перечисления.ЮрФизЛицо.ЮрЛицо;
			
			ТекСЗОшибок = ПроверитьИНН(СокрЛП(XTDO.INN),ТекЮрФиз,Ложь);
			
			Для Каждого СтрокаСЗ из ТекСЗОшибок Цикл
				СЗОшибок.Добавить(СтрокаСЗ.Значение);
			КонецЦикла;
			
		Иначе //ФизЛицо
			
			
			Если XTDO.Customer =Ложь и XTDO.Supplier = Ложь ТОгда
				СЗОшибок.Добавить("Контрагент должен быть либо поставщиком либо покупателем  (Customer или Supplier)!!!");	
			КонецЕсли;
			
			Если СокрЛП(XTDO.INN) <>"" ТОгда
				
				ТекЮрФиз = Перечисления.ЮрФизЛицо.ФизЛицо;

				ТекСЗОшибок = ПроверитьИНН(СокрЛП(XTDO.INN),ТекЮрФиз,Ложь);
			
				Для Каждого СтрокаСЗ из ТекСЗОшибок Цикл
					СЗОшибок.Добавить(СтрокаСЗ.Значение);
				КонецЦикла;	
				
			КонецЕсли;
			
			
		КОнецЕсли;
		
	КонецЕсли;
	
	
	//МетаданныеКонтрагентаРеквизиты = Метаданные.Справочники.Контрагенты.Реквизиты;
	//Для Каждого СтрокаТЗ из ТЗНастроек Цикл
	//	Если СтрокаТЗ.ОбязательноеЗаполнение = "0"	 ТОгда
	//		ПРодолжить;
	//	КонецЕсли;
	//	Если СтрокаТЗ.ОбязательноеЗаполнение = "1" Тогда
	//		ТекЗначениеРеквизита = ТекКонтрагент[СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С];
	//		ТекИмяРеквизита =   СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С;
	//		Если НЕ  ЗначениеЗаполнено(ТекЗначениеРеквизита) 
	//			И нЕ (ТекКонтрагент.НеЯвляетсяРезидентом И (ТекИмяРеквизита = "КПП" или ТекИмяРеквизита = "ИНН" или 
	//														ТекИмяРеквизита = "КодПоОКПО" или ТекИмяРеквизита = "абс_КодОКОНХ" или ТекИмяРеквизита = "ОКОПФ" )) 
	//			И Не (ТекКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо и (ТекИмяРеквизита = "КПП" или ТекИмяРеквизита = "КодПоОКПО" или ТекИмяРеквизита = "ИНН"
	//																			  или ТекИмяРеквизита = "абс_КодОКОНХ" или ТекИмяРеквизита = "ОКОПФ" ))
	//																			  
	//																			  																					Тогда

	//			
	//			// При записи старого элемента, где еще не заполнен Инициатор, ошибка, поле блокировано
	//			Если СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С = "абс_Инициатор" Тогда
	//				ТекКонтрагент.абс_Инициатор = ПараметрыСеанса.ТекущийПользователь;
	//				Продолжить;
	//			КонецЕсли;
	//			
	//			ПредставлениеРеквизита = "";
	//			Если СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С = "Наименование" или СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С = "Код"  Тогда
	//				ПредставлениеРеквизита = СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С;
	//			Иначе
	//				ПредставлениеРеквизита = МетаданныеКонтрагентаРеквизиты[СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С].Синоним;
	//			КонецЕсли;
	//			СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: "+ПредставлениеРеквизита);
	//			
	//		ИначеЕсли СтрокаТЗ.ИмяРеквизитаОбязательногоЗаполнения1С = "ИНН" И нЕ ТекКонтрагент.НеЯвляетсяРезидентом  ТОгда
	//			
	//			Если  ТекКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо и  СокрЛП(ТекЗначениеРеквизита) = "" или  СокрЛП(ТекЗначениеРеквизита) = "0" ТОгда
	//				ПРодолжить;
	//			КонецЕсли;
	//			
	//			ТекСЗОшибок = ПроверитьИНН(ТекКонтрагент.ИНН,ТекКонтрагент.ЮрФизЛицо,ТекКонтрагент.НеЯвляетсяРезидентом);
	//			
	//			Для Каждого СтрокаСЗ из ТекСЗОшибок Цикл
	//				СЗОшибок.Добавить(СтрокаСЗ.Значение);
	//			КонецЦикла;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	
	//КонецЦикла;
	//
	//Если ТекКонтрагент.Покупатель = ложь и ТекКонтрагент.Поставщик = ложь и Не ТекКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо ТОгда
	//	СЗОшибок.Добавить("Контрагент должен быть либо поставщиком либо покупателем!!!");	
	//КонецЕсли;
	////Раскомментировать-----начало
	////Если ТекКонтрагент.Метаданные().Реквизиты.Найти("абс_КураторХТТК") = Неопределено ТОгда
	////	
	////	Если   СокрЛП(ТекКонтрагент.абс_КураторНаименование) = "" ТОгда
	////		СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: Куратор (наименование)!!!");	
	////	КОнецЕсли;
	////	Если   СокрЛП(ТекКонтрагент.абс_КураторКод) = "" ТОгда
	////		СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: Куратор (e-mail)!!!");	
	////	КОнецЕсли;
	////Иначе
	////	Если  Не ЗначениеЗаполнено(ТекКонтрагент.абс_КураторХТТК)  ТОгда
	////		СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: Куратор !!!");	
	////	КОнецЕсли;
	////КонецЕсли;
	////Раскомментировать-----конец
	//
	Возврат СЗОшибок;
КонецФункции

Функция ПроверитьЗаполнениеРеквизитовXTDO(ТекXTDO)Экспорт
	
	ТЗНастроек = ПолучитьТЗНастроекКонтрагенты();	
	СЗОшибок = новый СписокЗначений;
	ТекТипКонтрагента = Справочники.абс_ТипыКонтрагентов.ПустаяСсылка();
	Попытка
		ТекТипКонтрагента = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду(ТекXTDO.Type_ID);
	Исключение
		СЗОшибок.Добавить(ОписаниеОшибки());
		Возврат СЗОшибок;
	Конецпопытки;
	Если ТекТипКонтрагента.Пустая() ТОгда
		СЗОшибок.Добавить("Не найден тип контрагента с кодом: "+ТекXTDO.Type_ID);
		Возврат СЗОшибок;	
	КонецЕсли;
	ТекЮрФиз = ТекТипКонтрагента.ЮрФизЛицо;
	НеявляетсяРезидентом = ТекТипКонтрагента.НеЯвляетсяРезидентом;
	Для Каждого СтрокаТЗ из ТЗНастроек Цикл
		Если СтрокаТЗ.ОбязательноеЗаполнение = "0"	 ТОгда
			ПРодолжить;
		КонецЕсли;
		Если  СтрокаТЗ.ОбязательноеЗаполнение = "1" Тогда
			Если Не ЗначениеЗаполнено(ТекXTDO[СтрокаТЗ.ИмяРеквизитаВSQL]) ТОгда
				ПредставлениеРеквизита = "";
				СЗОшибок.Добавить("Не заполнен реквизит: "+СтрокаТЗ.ИмяРеквизитаВSQL);
			ИначеЕсли   СтрокаТЗ.ИмяРеквизитаВSQL = "INN" и Не НеявляетсяРезидентом ТОгда
				
				Если  ТекЮрФиз.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо и  СокрЛП(ТекXTDO.INN) = "" или  СокрЛП(ТекXTDO.INN) = "0" ТОгда
					ПРодолжить;
				КонецЕсли;

				
				//ТекЮрФизЛицо =?(ТекXTDO.IE =Ложь,Перечисления.ЮрФизЛицо.ФизЛицо,Перечисления.ЮрФизЛицо.ЮрЛицо);
				ТекСЗОшибок = ПроверитьИНН(ТекXTDO.INN,ТекЮрФиз,ТекXTDO.No_Resident);
				
				
				Для Каждого  СтрокаСЗ из ТекСЗОшибок Цикл
					СЗОшибок.Добавить(СтрокаСЗ.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ТекXTDO.Customer = ложь и ТекXTDO.Supplier = ложь и Не ТекЮрФиз = Перечисления.ЮрФизЛицо.ФизЛицо  ТОгда
		СЗОшибок.Добавить("Контрагент должен быть либо Customer (Поставщик)  либо Supplier (Покупатель)!!!");	
	КонецЕсли;
	Возврат СЗОшибок;
КонецФункции

Процедура ВыгрузитьЗаявку(ТекКонтрагент)
	
	
КонецПроцедуры

Функция ПолучитьТЗНастроекЗаявка()
	
	ТЗНастроек = РеквизитыДляОбмена.Выгрузить();
	ТекМакет = ПолучитьМакет("Заявка");
	ТекВысота = ТекМакет.ВысотаТаблицы;
	Итер = 2;
	Пока Итер<=ТекВысота Цикл
		НовСтрока = ТЗНастроек.Добавить();
		НовСтрока.ИскатьПоРеквизиту  				= ТекМакет.ПолучитьОбласть(Итер,1,Итер,1).ТекущаяОбласть.Текст;
		НовСтрока.ВыполнятьОбмен 					= ТекМакет.ПолучитьОбласть(Итер,2,Итер,2).ТекущаяОбласть.Текст;
		НовСтрока.ИмяРеквизитаВSQL					= ТекМакет.ПолучитьОбласть(Итер,3,Итер,3).ТекущаяОбласть.Текст;
		НовСтрока.ТипРеквизитаВSQL					= ТекМакет.ПолучитьОбласть(Итер,4,Итер,4).ТекущаяОбласть.Текст;
		НовСтрока.ПутьКДаннымРеквизита				= ТекМакет.ПолучитьОбласть(Итер,5,Итер,5).ТекущаяОбласть.Текст;
		НовСтрока.ПутьКДаннымРеквизитаСУсловием		= ТекМакет.ПолучитьОбласть(Итер,6,Итер,6).ТекущаяОбласть.Текст;
		НовСтрока.Описание							= ТекМакет.ПолучитьОбласть(Итер,7,Итер,7).ТекущаяОбласть.Текст;
		//НовСтрока.РеквизитГруппы					= ТекМакет.ПолучитьОбласть(Итер,8,Итер,8).ТекущаяОбласть.Текст;
		
		НовСтрока.ПутьКДаннымЗагрузкаИзXTDO 		= ТекМакет.ПолучитьОбласть(Итер,8,Итер,8).ТекущаяОбласть.Текст;
		НовСтрока.ПутьКДаннымЗагрузкаИзXTDOУсловие 	= ТекМакет.ПолучитьОбласть(Итер,9,Итер,9).ТекущаяОбласть.Текст;
		
		НовСтрока.ОбязательноеЗаполнение 				= СОкрЛП(ТекМакет.ПолучитьОбласть(Итер,10,Итер,10).ТекущаяОбласть.Текст);  //21092011
		НовСтрока.ИмяРеквизитаОбязательногоЗаполнения1С	= СОкрЛП(ТекМакет.ПолучитьОбласть(Итер,11,Итер,11).ТекущаяОбласть.Текст);  //21092011
		
		Итер = Итер+1;	 
	КонецЦикла;
	
	Возврат ТЗНастроек;
	
	
КонецФункции

Функция ПолучитьТЗСоответствийДляЗаписиЗаявки(ТЗНастроек,СЗРеквизитовПоиска)
	
	ТекПутьКРевизитамSQL =""; 
	ТЗСоответствий = Новый ТаблицаЗначений;
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВSQL");
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВ1С");
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымЗагрузкаИзXTDO");
	ТЗСоответствий.Колонки.Добавить("ЭтоУсловие");
	ТЗСоответствий.Колонки.Добавить("Тип");
	ТЗСоответствий.Колонки.Добавить("РеквизитГруппы");
	
	Для Каждого СтрокаТЧ из   ТЗНастроек Цикл
		Если СтрокаТЧ.ВыполнятьОбмен = Ложь ТОгда
			ПРодолжить;		
		КонецЕсли;
		НовСтрока = ТЗСоответствий.Добавить();
		Если СтрокаТЧ.ИскатьПоРеквизиту ТОгда
			СЗРеквизитовПоиска.Добавить(СтрокаТЧ.ИмяРеквизитаВSQL,СтрокаТЧ.ПутьКДаннымРеквизита);
		КонецЕсли;
		НовСтрока.ЭтоУсловие = СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием;
		НовСтрока.Тип =   НРег(СокрЛП(СтрокаТЧ.ТипРеквизитаВSQL));
		НовСтрока.РеквизитГруппы = СтрокаТЧ.РеквизитГруппы;
		
		Если СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDOУсловие = 1 ТОгда
			НовСтрока.ПутьКДаннымЗагрузкаИзXTDO =СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDO+ " = ТекXTDO["""+СтрокаТЧ.ИмяРеквизитаВSQL+"""]"	 
		ИНачеЕсли  СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDOУсловие = 2 Тогда
			НовСтрока.ПутьКДаннымЗагрузкаИзXTDO =СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDO;	 
		КонецЕсли;
		//------------------------------
		
		НовСтрока.ПутьКДаннымВSQL = ТекПутьКРевизитамSQL+СокрЛП(СтрокаТЧ.ИмяРеквизитаВSQL);
		
		Если  СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием ТОгда
			//Это условие так на всяки пожарный, вдруг все таки поставили галку условие и ниче не сделали , то есть оставили в поле к примеру "Наименование" или "ТекОбъект.наименование"
			Если Лев(СтрокаТЧ.ПутьКДаннымРеквизита,1) <>"?" ТОгда
				Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
					НовСтрока.ПутьКДаннымВ1С ="Значение = "+ СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
				Иначе
					НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
				КонецЕсли;
			Иначе
				НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			КонецЕсли;
		ИначеЕсли  Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),6) = "запись" ТОгда
			НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
		Иначе
			Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
				НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			Иначе
				НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗСоответствий;
	
КонецФункции

Процедура ЗаполнитьXTDOДаннымиДокументаЗаявки(НовЗаявка, XTDOЗаявка) Экспорт
	
	СЗРеквизитовПоиска = Новый СписокЗначений;
	ТЗНастроекКонтрагенты = ПолучитьТЗНастроекЗаявка();
	ТЗСоответствий = ПолучитьТЗСоответствийДляЗаписиЗаявки(ТЗНастроекКонтрагенты,СЗРеквизитовПоиска);
	
	ТекОбъект =  НовЗаявка;
	СтруктураЗначений = Новый Структура;
	Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
		Значение = "";
		Попытка
			Выполнить(СтрокаТЗСоответствий.ПутьКДаннымВ1С);
		Исключение           
			
		КонецПопытки;
		Если СтрокаТЗСоответствий.Тип = "строка" Тогда
			Значение = СтрЗаменить(СокрЛП(Значение),Символ(160),"");
		ИначеЕсли СтрокаТЗСоответствий.Тип = "число" ТОгда
			Если ЗначениеЗаполнено(Значение) Тогда
				Попытка
					Значение = Число(Значение);	
				Исключение
					Значение = 0;	
				КонецПопытки;
				
			Иначе
				Значение = 0;
			КонецЕсли;
		КонецЕсли;
		Попытка
			XTDOЗаявка[СтрокаТЗСоответствий.ПутьКДаннымВSQL] = Значение;
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПРоцедуры

Процедура ЗаполнитьРеквизитыЗаявкиПоXTDO(ТекXTDO,ТекОбъект)
	
	СЗРеквизитовПоиска = Новый СписокЗначений;
	ТЗНастроекКонтрагенты = ПолучитьТЗНастроекКонтрагенты("Заявка");
	ТЗСоответствий = ПолучитьТЗСоответствийДляЗаписиПрием(ТЗНастроекКонтрагенты,СЗРеквизитовПоиска);
	Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
		СтрокаТЗСоответствий.ПутьКДаннымЗагрузкаИзXTDO = СтрЗаменить(СокрЛП(СтрокаТЗСоответствий.ПутьКДаннымЗагрузкаИзXTDO),Символ(160),"");
		Попытка
			Выполнить(СтрокаТЗСоответствий.ПутьКДаннымЗагрузкаИзXTDO);		
		Исключение
			Сообщить("Ошибка при загрузке реквизита: "+СтрокаТЗСоответствий.ПутьКДаннымВSQL);	
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры
//АБС 00459 Конец 21092011 



//=======================================================================================
//Процедуры и функции для webСервиса номенклатуры  начало
// Вызывает тестовый вебсервис
&НаСервере
// Инициализирует WebService
Процедура ИнициализацияWebServiceНоменклатура() 
	
	#Если Клиент Тогда
		Состояние("Инициализация WebService");
	#КонецЕсли	
	
	Если НЕ ЗначениеЗаполнено(_Сервер) ИЛИ НЕ ЗначениеЗаполнено(_БазаДанныхНоменклатура) ИЛИ НЕ ЗначениеЗаполнено(_Пользователь) Тогда
		абс_WebService.СообщитьОбОшибке("Необходимо задать настройки подключения к WebServer!", "ИнициализацияWebService()");
		Возврат;
	КонецЕсли;
	
	Протокол = ?(_https, "https://", "http://");
	
	// Попытка соединиться по WS-ссылке
	Если НЕ Метаданные.WSСсылки.Найти("Nomenclatures_") = Неопределено Тогда
		Прокси = WSСсылки.Nomenclatures.СоздатьWSПрокси("http://www.abs-softNom.ru/", "Nomenclatures", "NomenclaturesSoap"); 	
	Иначе
		// Создание описания по WSDL файлу	
		Определение = Новый WSОпределения(Протокол + _Сервер + "/" + _БазаДанныхНоменклатура + "/ws/Nomenclatures.1cws?wsdl", _Пользователь, _ПарольПользователя); 
		// Создание прокси для обращения к сервису и фабрике XDTO
		Прокси = Новый WSПрокси(Определение, "http://www.abs-softNom.ru/", "Nomenclatures", "NomenclaturesSoap"); 
	КонецЕсли;
	
	Прокси.Пользователь = _Пользователь;
	Прокси.Пароль 		= _ПарольПользователя;
	Фабрика 			= Прокси.ФабрикаXDTO;
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
КонецПроцедуры


Функция ТестСоединенияНоменклатура() Экспорт
	
	Если НЕ ЗначениеЗаполнено(_Сервер) ИЛИ НЕ ЗначениеЗаполнено(_БазаДанных) ИЛИ НЕ ЗначениеЗаполнено(_Пользователь) Тогда
		Сообщить("Необходимо задать настройки подключения к WebServer!", СтатусСообщения.Внимание);
		#Если Клиент Тогда
			ПолучитьФорму("Параметры").Открыть();
		#КонецЕсли
		ОтветXDTO = Новый Структура("ID, Error", "", "Не заданы настройки подключения к WebServer!");
		Возврат ОтветXDTO;
	КонецЕсли;
	
	//ИнициализацияWebService();
	
	#Если Клиент Тогда
		Состояние("Ожидание ответа WebService");
	#КонецЕсли	
	
	ОтветXDTO = абс_WebServiceСервер.ВыполнитьНаСервереФункцию("ТестСоединенияСерверНоменклатура");
	
	Сообщить("Код возврата: " + ОтветXDTO.ID);
	Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
	Возврат ОтветXDTO;
	
КонецФункции
 &НаСервере
// Вызов теста с сервера
Функция ТестСоединенияСерверНоменклатура() Экспорт
	
	ИнициализацияWebServiceНоменклатура();
	
	ОтветXDTO = Фабрика.Создать(Фабрика.Тип("http://www.abs-softNom.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	
	Попытка
		ОтветXDTO = Прокси.ConnectionTest();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "ТестСоединения()");
		ОтветXDTO = Новый Структура("ID, Error", "", ОписаниеОшибки);
	КонецПопытки;
	
	Если ОтветXDTO.Error = Неопределено Тогда
		ОтветXDTO.Error = "";
	КонецЕсли;
	
	//Возврат ОтветXDTO;
	Возврат Новый Структура("ID, Error", ОтветXDTO.ID, ОтветXDTO.Error);
	
КонецФункции
// KTTK. Обработчик согласования создания номенклатуры (KTTK)



Функция ПРоверитьЗаполнениеXTDOНоменклатуры(ТекXTDO,ТекОбъект,ЕдиницаПоКлассификатору,ВидНоменклатуры,ВидНоменклатурыМатериал,ЕдиницаШт)
	СЗОшибок = новый СписокЗначений;	
	
	Если СокрЛП(ТекXTDO.Name) = "" ТОгда
		
		СЗОшибок.Добавить("Не заполнено поле: наименование (Name)");	
		
	КонецЕсли;
	
	Если СокрЛП(ТекXTDO.Full_Name) = "" ТОгда
		
		СЗОшибок.Добавить("Не заполнено поле: полное наименование (Full_Name)");
		
	КонецЕсли;
	
	Если СокрЛП(ТекXTDO.Unit) = "" ТОгда
		
		//СЗОшибок.Добавить("Не заполнена поле: единица измерения (Unit)");	
		ЕдиницаПоКлассификатору = ЕдиницаШт.Ссылка;
	Иначе
		
		ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(СокрЛП(ТекXTDO.Unit),Истина);
		Если ЕдиницаПоКлассификатору.Пустая() ТОгда
			ЕдиницаПоКлассификатору = ЕдиницаШт.Ссылка;
			//СЗОшибок.Добавить("Не найдена единица измерения по классификатору:"+ТекXTDO.Unit);
		КонецЕсли;
		
	КонецЕсли;
	Если СокрЛП(ТекXTDO.Type_ID) = "" ТОгда
		
		ВидНоменклатуры = ВидНоменклатурыМатериал.Ссылка;
		//СЗОшибок.Добавить("Не заполнено поле:вид номенклататуры (Name)");	
	Иначе
		
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию(СокрЛП(ТекXTDO.Type_ID),Истина);
		Если ВидНоменклатуры.Пустая() ТОгда
			
			ВидНоменклатуры = ВидНоменклатурыМатериал.Ссылка;
			
			//СЗОшибок.Добавить("Не найден вид номенклатуры по классификатору:"+ТекXTDO.Type_ID);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СЗОшибок.Количество() <> 0 ТОгда
		
		Возврат СЗОшибок;	
		
	КонецЕсли;
	
	
	
		
	
	Возврат СЗОшибок;
КонецФункции
//==========================================================
Функция СоздатьНоменклатуру(ПакетXDTO) Экспорт
	
	//ИнициализацияWebService();
	
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-softNom.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	
	//Если НЕ ЗначениеЗаполнено(ТекКонтрагент) Тогда
	абс_Код_ИСУП_ТТК = СокрЛП(ПакетXDTO.ID);
	БылСозданНовый = Ложь;
	Если абс_Код_ИСУП_ТТК = "" Тогда
		ТекНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		ТекНоменклатура.абс_НоменклатураДЗОилиВнешнейСистемы = Истина;
		ТекНоменклатура.абс_СтатусНоменклатуры= Перечисления.Абс_СтатусыНоменклатуры.Подготовка;
		ТекИмяПользователя =  ПараметрыСеанса.ТекущийПользователь.Наименование;
		Нашли = Справочники.Номенклатура.НайтиПоНаименованию(ТекИмяПользователя,Истина);
		Если Нашли.Пустая() ТОгда
			НовГр = Справочники.Номенклатура.СоздатьГруппу();
			НовГр.Наименование = ТекИмяПользователя;
			НовГр.Записать();
			Нашли = НовГр.Ссылка;
		КонецЕсли;
		ТекНоменклатура.Родитель = Нашли;
		ТекНоменклатура.ОбменДанными.Загрузка = Ложь;
		БылСозданНовый = Истина;
	Иначе
		Нашли = Справочники.Номенклатура.НайтиПоКоду(абс_Код_ИСУП_ТТК);
		Если Нашли.Пустая() Тогда
			
			ОтветXDTO.Error = "Номенклатура с кодом " + абс_Код_ИСУП_ТТК + " не обнаружена!";
			
			Возврат ОтветXDTO;
			
		Иначе
			Попытка
				
				Если Нашли.абс_статусНоменклатуры <> Перечисления.Абс_СтатусыНоменклатуры.Подготовка  ТОгда
					
					ОтветXDTO.Error = "Номенклатура с кодом " + абс_Код_ИСУП_ТТК + " не находится в статусе Подготовка. Текущий статус #"+Нашли.абс_статусНоменклатуры+"#";
					Возврат ОтветXDTO;
					
				КонецЕсли;
				
			    ТекНоменклатура =  Нашли.ПолучитьОбъект();
				
				
				
			Исключение
				ОтветXDTO.Error = ОписаниеОшибки()+"_";
				Возврат ОтветXDTO;
			КонецПопытки;
			
			
			
			
		КонецЕсли;
		
	КонецЕсли;
	ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	ЕдиницаШт =			Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт",Истина);
	ВидНоменклатуры			= Справочники.ВидыНоменклатуры.ПустаяСсылка();
	ВидНоменклатурыМатериал = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Материал",Истина);
	СЗОшибок = ПРоверитьЗаполнениеXTDOНоменклатуры(ПакетXDTO, ТекНоменклатура,ЕдиницаПоКлассификатору,ВидНоменклатуры,ВидНоменклатурыМатериал,ЕдиницаШт);
	
	Если СЗОшибок.Количество() <> 0 Тогда
		ТекОписаниеОшибки = "";
		Для Каждого СТрокаСЗ из СЗОшибок Цикл
			ТекОписаниеОшибки = ТекОписаниеОшибки+	СТрокаСЗ.Значение+Символы.ПС;
		КонецЦикла;
		ОтветXDTO.Error = ТекОписаниеОшибки;
		Возврат  ОтветXDTO;	
		
	КонецЕсли;
	
	//Теперь заполнение реквизитов ( не стал выносить в отдельную процедуру т.к. есть единицы измерения которые надо создавать после записи номенклатуры
	ТекНоменклатура.Наименование 						=  ПакетXDTO.Name;
	ТекНоменклатура.НаименованиеПолное 					=  ПакетXDTO.Full_Name;
	ТекНоменклатура.абс_ПричинаИзмененияСтатуса 		=  "Согласование";
	ТекНоменклатура.ВестиПартионныйУчетПоСериям 		=  ПакетXDTO.Part_Acc_Series;
	ТекНоменклатура.ВестиУчетПоСериям 					=  ПакетXDTO.Acc_Series;
	
	Попытка
		ТекНоменклатура.ВестиУчетПоХарактеристикам		=  ПакетXDTO.Acc_Add_Descript;
	Исключение
	КонецПопытки;
	
	
	
	
	ТекНоменклатура.БазоваяЕдиницаИзмерения = ЕдиницаПоКлассификатору;
	
	
	
	ТекНоменклатура.ВидНоменклатуры =  ВидНоменклатуры;
	
	Попытка
		
		// Попытка записать номенклатуру
		ТекНоменклатура.Записать();
		НовЕдиница = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		БылоИзменениеЕдиницы = Ложь;
		Если  ТекНоменклатура.ЕдиницаХраненияОстатков.Пустая() ТОгда
			
			НовЕдиница 							= Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			НовЕдиница.Владелец 				= ТекНоменклатура.Ссылка;
			НовЕдиница.Наименование 			= ЕдиницаПоКлассификатору.Наименование;
			НовЕдиница.ЕдиницаПоКлассификатору 	= ЕдиницаПоКлассификатору.Ссылка;
			НовЕдиница.Коэффициент		 		= 1;
			НовЕдиница.Записать();
			ТекНоменклатура.ЕдиницаХраненияОстатков = НовЕдиница.Ссылка;
			БылоИзменениеЕдиницы = Истина;
		ИначеЕсли 	ЕдиницаПоКлассификатору  <>ТекНоменклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору ТОгда
			НовЕдиница 							= Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			НовЕдиница.Владелец 				= ТекНоменклатура.Ссылка;
			НовЕдиница.Наименование 			= ЕдиницаПоКлассификатору.Наименование;
			НовЕдиница.ЕдиницаПоКлассификатору 	= ЕдиницаПоКлассификатору.Ссылка;
			НовЕдиница.Коэффициент		 		= 1;
			НовЕдиница.Записать();
			ТекНоменклатура.ЕдиницаХраненияОстатков = НовЕдиница.Ссылка;
			БылоИзменениеЕдиницы = Истина;	
		КонецЕсли;
		Если  (ТекНоменклатура.ЕдиницаДляОтчетов.Пустая() и Не  НовЕдиница.Ссылка.Пустая())  ТОгда
			ТекНоменклатура.ЕдиницаДляОтчетов = НовЕдиница.Ссылка;	
		КонецЕсли;
		
		
		ТекСсылка =  ТекНоменклатура.ссылка;
		ТекНоменклатура = ТекСсылка.ПолучитьОбъект();
		
		//
		//ТекНоменклатура.абс_ПричинаИзмененияСтатуса = "Согласование";
		//ТекНоменклатура.абс_СтатусНоменклатуры = Перечисления.Абс_СтатусыНоменклатуры.СогласованиеНСИ;	
		////ТекНоменклатура.Комментарий = Перечисления.Абс_СтатусыНоменклатуры.СогласованиеНСИ;	
		//
		//
		//ТекНоменклатура.Записать();
		
		ТекСсылка =  ТекНоменклатура.ссылка;
		ТекНоменклатура = ТекСсылка.ПолучитьОбъект();
		
		//ТекНоменклатура.абс_ДатаИзмененияСтатуса = ТекущаяДата()+3;
		ТекНоменклатура.абс_ПричинаИзмененияСтатуса = "Согласование";
		ТекНоменклатура.абс_СтатусНоменклатуры = Перечисления.Абс_СтатусыНоменклатуры.Использование;	
		
		//ТекНоменклатура.Комментарий = Перечисления.Абс_СтатусыНоменклатуры.СогласованиеНСИ;	
		
		
		ТекНоменклатура.Записать();
		
		
		ОтветXDTO.ID = ТекНоменклатура.Код;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "СогласоватьСозданиеНоменклатуры()");
		ОтветXDTO.Error = ОписаниеОшибки;
		//ОтменитьТранзакцию();
	КонецПопытки;
	
		
		
	
	Возврат ОтветXDTO;
	
КонецФункции

//========================================
Функция ИзменитьСтатусНоменклатуры(ПакетXDTO) Экспорт
	
	
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-softNom.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	
	//Если НЕ ЗначениеЗаполнено(ТекКонтрагент) Тогда
	абс_Код_ИСУП_ТТК = СокрЛП(ПакетXDTO.ID);
	БылСозданНовый = Ложь;
	Если абс_Код_ИСУП_ТТК = "" Тогда
		
		ОтветXDTO.Error = "Номенклатура не заполнен код ЕИСУП!";
		Возврат ОтветXDTO;
		
	КОнецЕсли;
		
	Нашли = Справочники.Номенклатура.НайтиПоКоду(абс_Код_ИСУП_ТТК);
	Если Нашли.Пустая() Тогда
		
		ОтветXDTO.Error = "Номенклатура с кодом " + абс_Код_ИСУП_ТТК + " не обнаружена!";
		
		Возврат ОтветXDTO;
		
	КонецЕсли;
		
	Если 	Нашли.абс_СтатусНоменклатуры <> Перечисления.Абс_СтатусыНоменклатуры.Отказ ТОгда
		
		ОтветXDTO.Error = "Номенклатура с кодом " + абс_Код_ИСУП_ТТК + " в ЕИСУП ТТК не находится в статусе отказ! Текущий статус #"+Нашли.абс_СтатусНоменклатуры+"#";
		
		Возврат ОтветXDTO;		
		
	КонецЕсли;
	
	ТекНоменклатура = Нашли.ПолучитьОбъект();
	
	
	
	
	
	ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	ЕдиницаШт =			Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт",Истина);
	ВидНоменклатуры			= Справочники.ВидыНоменклатуры.ПустаяСсылка();
	ВидНоменклатурыМатериал = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Материал",Истина);
	СЗОшибок = ПРоверитьЗаполнениеXTDOНоменклатуры(ПакетXDTO, ТекНоменклатура,ЕдиницаПоКлассификатору,ВидНоменклатуры,ВидНоменклатурыМатериал,ЕдиницаШт);
	
	Если СЗОшибок.Количество() <> 0 Тогда
		ТекОписаниеОшибки = "";
		Для Каждого СТрокаСЗ из СЗОшибок Цикл
			ТекОписаниеОшибки = ТекОписаниеОшибки+	СТрокаСЗ.Значение+Символы.ПС;
		КонецЦикла;
		ОтветXDTO.Error = ТекОписаниеОшибки;
		Возврат  ОтветXDTO;	
		
	КонецЕсли;
	
	//Теперь заполнение реквизитов ( не стал выносить в отдельную процедуру т.к. есть единицы измерения которые надо создавать после записи номенклатуры
	ТекНоменклатура.Наименование 				=  ПакетXDTO.Name;
	ТекНоменклатура.НаименованиеПолное 		=  ПакетXDTO.Full_Name;
	
	ТекНоменклатура.ВестиПартионныйУчетПоСериям 		=  ПакетXDTO.Part_Acc_Series;
	ТекНоменклатура.ВестиУчетПоСериям 					=  ПакетXDTO.Acc_Series;
	
	Попытка
		ТекНоменклатура.ВестиУчетПоХарактеристикам			=  ПакетXDTO.Acc_Add_Descript;
	Исключение
	КонецПопытки;
	
	
	
	
	//ТекНоменклатура.БазоваяЕдиницаИзмерения = ЕдиницаПоКлассификатору;
	
	
	
	ТекНоменклатура.ВидНоменклатуры =  ВидНоменклатуры;
	
	Попытка
		
		// Попытка записать номенклатуру
		//ТекНоменклатура.Записать();
		//НовЕдиница = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		//БылоИзменениеЕдиницы = Ложь;
		//Если  ТекНоменклатура.ЕдиницаХраненияОстатков.Пустая() ТОгда
		//	
		//	НовЕдиница 							= Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		//	НовЕдиница.Владелец 				= ТекНоменклатура.Ссылка;
		//	НовЕдиница.Наименование 			= ЕдиницаПоКлассификатору.Наименование;
		//	НовЕдиница.ЕдиницаПоКлассификатору 	= ЕдиницаПоКлассификатору.Ссылка;
		//	НовЕдиница.Коэффициент		 		= 1;
		//	НовЕдиница.Записать();
		//	ТекНоменклатура.ЕдиницаХраненияОстатков = НовЕдиница.Ссылка;
		//	БылоИзменениеЕдиницы = Истина;
		//ИначеЕсли 	ЕдиницаПоКлассификатору  <>ТекНоменклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору ТОгда
		//	НовЕдиница 							= Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		//	НовЕдиница.Владелец 				= ТекНоменклатура.Ссылка;
		//	НовЕдиница.Наименование 			= ЕдиницаПоКлассификатору.Наименование;
		//	НовЕдиница.ЕдиницаПоКлассификатору 	= ЕдиницаПоКлассификатору.Ссылка;
		//	НовЕдиница.Коэффициент		 		= 1;
		//	НовЕдиница.Записать();
		//	ТекНоменклатура.ЕдиницаХраненияОстатков = НовЕдиница.Ссылка;
		//	БылоИзменениеЕдиницы = Истина;	
		//КонецЕсли;
		//Если  (ТекНоменклатура.ЕдиницаДляОтчетов.Пустая() и Не  НовЕдиница.Ссылка.Пустая())  ТОгда
		//	ТекНоменклатура.ЕдиницаДляОтчетов = НовЕдиница.Ссылка;	
		//КонецЕсли;
		
		ТекНоменклатура.абс_СтатусНоменклатуры = Перечисления.Абс_СтатусыНоменклатуры.Подготовка;
		ТекНоменклатура.Записать();		
		
		ОтветXDTO.ID = ТекНоменклатура.Код;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "ИзменитьСтатусНоменклатурыИзОтказа()");
		ОтветXDTO.Error = ОписаниеОшибки;
	КонецПопытки;
	
	
	
	Возврат ОтветXDTO;
	
КонецФункции

Процедура ПровестиИзОтказаВПодготовку(Источник,Отказ) Экспорт
	
	Если Отказ ТОгда
		Возврат;
	КонецЕсли;
	
	Если  СокрЛП(Источник.абс_Код_ИСУП_ТТК) = "" ТОгда
		Возврат ;
	КонецЕсли;
	
	Попытка
		ЗаписьВФорме = Источник.мАбс_СтруктураПараметров.ЗаписьВФорме;
	Исключение
		ЗаписьВФорме = Ложь;	
	КонецПопытки;
	
	
	Если Источник.Ссылка.абс_СтатусНоменклатуры = Перечисления.Абс_СтатусыНоменклатуры.Отказ и  Источник.абс_СтатусНоменклатуры =  Перечисления.Абс_СтатусыНоменклатуры.Подготовка ТОгда
		
		абс_ОбработчикWebService = абс_WebService.ПолучитьОбработчикWebService();	      
			#Если Клиент Тогда
				// Обязательный комментарий при изменении статуса
				
				//
				//Если   ЗаписьВФорме ТОгда
				//	Источник.абс_ПричинаИзмененияСтатуса = "";
				//	ВвестиСтроку(Источник.абс_ПричинаИзмененияСтатуса, "Причина изменения статуса",,Истина);
				//				
				//	Если Источник.абс_ПричинаИзмененияСтатуса = "" Тогда
				//		Сообщить("Отказ пользователя", СтатусСообщения.Информация);
				//		Отказ = Истина;
				//		Возврат;
				//	КонецЕсли;
				//КонецЕсли;

								
				Состояние("Ожидание ответа WebService");
				
			#КонецЕсли	
			
			
			// Вызов обработчика
			Попытка
				
				//Сначала проверка на заполненность
				СЗОшибок = абс_ОбработчикWebService.ПроверитьЗаполнениеРеквизитовНоменклатурыПередВыгрузкойЧерезWebСервис(Источник);
				Если СЗОшибок.Количество() >0 ТОгда
					Для Каждого СтрокаСЗ из  СЗОшибок Цикл
						Сообщить(СтрокаСЗ.Значение);	
					КонецЦикла;
					Возврат;	
				КонецЕсли;
				
				// Передача вызова вебсервиса на сервер
				ИсточникСоответствие = Новый Соответствие;
				абс_ОбработчикWebService.ЗаполнитьXDTOНоменклатура(Источник, 	ИсточникСоответствие) ;

				абс_ОбработчикWebService.ЗаполнитьXDTOНоменклатура(Источник, 	ИсточникСоответствие) ;
				ИсточникСоответствие.Вставить("абс_СтатусНоменклатуры", 		Источник.абс_СтатусНоменклатуры);
				ИсточникСоответствие.Вставить("абс_Код_ИСУП_ТТК", 				Источник.абс_Код_ИСУП_ТТК);
				
				//ОтветXDTO = абс_ОбработчикWebService.СогласоватьСозданиеКонтрагента(ЭтотОбъект);
				ОтветXDTO = абс_WebServiceСервер.ВыполнитьНаСервереФункцию("СогласоватьИзменениеНоменклатуры", ИсточникСоответствие);

			//	абс_Код_ИСУП_ТТК = СокрЛП(ОтветXDTO.ID);
				Источник.абс_СтатусНоменклатуры = Перечисления.Абс_СтатусыНоменклатуры.Подготовка;
				
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ОтветXDTO = Новый Структура("ID, Error");
				абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "Вызов обработчика согласования изменени номенклатуры по вебсервису (из отказа в подготовку)");
				ОтветXDTO.Error = ОписаниеОшибки;
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(ОтветXDTO.Error) Тогда
				Сообщить("Номенклатура """ + Источник.Наименование + """ успешно изменена, код ИСУП ТТК: " + ОтветXDTO.ID);
			Иначе
				Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
			КонецЕсли;
			
			Отказ = ЗначениеЗаполнено(ОтветXDTO.Error);	
			
			#Если Клиент Тогда
				Состояние();
			#КонецЕсли
		
		КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьЭлементовФормыНоменклатурыСПБФилиал(Номенклатура,ЭлементыФормы) Экспорт
	
	
	
	Если 
		 Номенклатура.абс_СтатусНоменклатуры <> Перечисления.Абс_СтатусыНоменклатуры.Подготовка 
		или Номенклатура.абс_СтатусНоменклатуры = Перечисления.Абс_СтатусыНоменклатуры.Архив
		
		ТОгда
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОтправитьДанные.Доступность = Ложь;
		ЭлементыФормы.НаименованиеПолное.ТОлькоПРосмотр = Истина;
		ЭлементыФормы.Наименование.ТОлькоПРосмотр = Истина;
		
		ЭлементыФормы.СтавкаНДС.ТОлькоПРосмотр = Истина;
		
		ЭлементыФормы.БазоваяЕдиницаИзмерения.Доступность = Ложь;
		ЭлементыФормы.Услуга.Доступность = Ложь;
		
		
		
	КонецЕсли;
	
	Если    Номенклатура.абс_СтатусНоменклатуры =Перечисления.Абс_СтатусыНоменклатуры.Архив  Тогда
		ЭлементыФормы.абс_СтатусНоменклатуры.ТолькоПРосмотр = Истина;	
	КонецЕсли;
	
КонецПроцедуры


Процедура УстановитьДоступностьЭлементовФормыНоменклатуры(Номенклатура,ЭлементыФормы) Экспорт
	
	
	
	Если 
		 Номенклатура.абс_СтатусНоменклатуры <> Перечисления.Абс_СтатусыНоменклатуры.Подготовка
		или Номенклатура.абс_СтатусНоменклатуры = Перечисления.Абс_СтатусыНоменклатуры.Архив
		
		ТОгда
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОтправитьДанные.Доступность = Ложь;
		ЭлементыФормы.НаименованиеПолное.ТОлькоПРосмотр = Истина;
		ЭлементыФормы.Наименование.ТОлькоПРосмотр = Истина;
		
		ЭлементыФормы.ВестиУчетПоСериям.Доступность = Ложь;
		ЭлементыФормы.ВестиПартионныйУчетПоСериям.Доступность = Ложь;
		ЭлементыФормы.абс_Комкод.ТОлькоПРосмотр = Истина;
		ЭлементыФормы.Артикул.ТОлькоПРосмотр = Истина;
		ЭлементыФормы.СтавкаНДС.ТОлькоПРосмотр = Истина;
		ЭлементыФормы.ВестиУчетПоХарактеристикам.Доступность = Ложь;
		ЭлементыФормы.ВидНоменклатуры.ТОлькоПРосмотр = Истина;
		
		ЭлементыФормы.ЕдиницаХраненияОстатков.Доступность = Ложь;
		ЭлементыФормы.БазоваяЕдиницаИзмерения.Доступность = Ложь;
		Попытка
			ЭлементыФормы.ЕдиницыИзмерения.Доступность = Ложь;
		Исключение
		КонецПопытки;
		
		
		
		
	КонецЕсли;
	Если    Номенклатура.абс_СтатусНоменклатуры =Перечисления.Абс_СтатусыНоменклатуры.Архив  Тогда
		ЭлементыФормы.абс_СтатусНоменклатуры.ТолькоПРосмотр = Истина;	
	КонецЕсли;
	
КонецПроцедуры
Процедура УстановитьДоступностьЭлементовФормыНоменклатурыБизнесТТК(Номенклатура,ЭлементыФормы) Экспорт
	
	
	
	Если 
		 Номенклатура.абс_СтатусНоменклатуры <> Перечисления.Абс_СтатусыНоменклатуры.Подготовка
		или Номенклатура.абс_СтатусНоменклатуры = Перечисления.Абс_СтатусыНоменклатуры.Архив
		
		ТОгда
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОтправитьДанные.Доступность = Ложь;
		ЭлементыФормы.НаименованиеПолное.ТОлькоПРосмотр = Истина;
		ЭлементыФормы.Наименование.ТОлькоПРосмотр = Истина;
		
		ЭлементыФормы.ВестиУчетПоСериям.Доступность = Ложь;
		ЭлементыФормы.ВестиПартионныйУчетПоСериям.Доступность = Ложь;
		ЭлементыФормы.СтавкаНДС.ТОлькоПРосмотр = Истина;
		ЭлементыФормы.ВестиУчетПоХарактеристикам.Доступность = Ложь;
		ЭлементыФормы.ВидНоменклатуры.ТОлькоПРосмотр = Истина;
		
		ЭлементыФормы.ЕдиницаХраненияОстатков.Доступность = Ложь;
		ЭлементыФормы.БазоваяЕдиницаИзмерения.Доступность = Ложь;
		Попытка
			ЭлементыФормы.ЕдиницыИзмерения.Доступность = Ложь;
		Исключение
		КонецПопытки;
		
		
		
		
	КонецЕсли;
	Если    Номенклатура.абс_СтатусНоменклатуры =Перечисления.Абс_СтатусыНоменклатуры.Архив  Тогда
		ЭлементыФормы.абс_СтатусНоменклатуры.ТолькоПРосмотр = Истина;	
	КонецЕсли;
	
КонецПроцедуры

//======================================================================
Функция СоздатьПакетXDTOНоменклатура(Источник)Экспорт
	#Если Клиент Тогда
		Состояние("Формирование пакета XDTO");
	#КонецЕсли	
	//ИнициализацияWebServiceНоменклатура();
	XDTOНоменклатураСозданиеТип 	= Фабрика.Тип("http://www.abs-softNom.ru/", "NomenclaturesAdd");
	XDTOНоменклатураСоздание 		= Фабрика.Создать(XDTOНоменклатураСозданиеТип);
	
	//// Заполенение данных
	//XDTOКонтрагентСоздание.Ext_System 		= 13;
	//XDTOКонтрагентСоздание.Ext_System_ID 	= Источник.Код;
	//XDTOКонтрагентСоздание.ID               = Источник.абс_Код_ИСУП_ТТК;
	//XDTOКонтрагентСоздание.Name         	= Источник.Наименование;
	//XDTOКонтрагентСоздание.Full_Name        = Источник.НаименованиеПолное;
	//XDTOКонтрагентСоздание.OKPO             = ?(ЗначениеЗаполнено(Источник.КодПоОКПО), Число(Источник.КодПоОКПО), 0);
	//XDTOКонтрагентСоздание.INN              = ?(ЗначениеЗаполнено(Источник.ИНН), Число(Источник.ИНН), 0);
	//XDTOКонтрагентСоздание.KPP             	= ?(ЗначениеЗаполнено(Источник.КПП), Число(Источник.КПП), 0);
	//
	
	//АБС Бабшанов начало	
	//ЗаполнитьXDTOКонтрагент(Источник,XDTOКонтрагентСоздание) ;
	//АБС Бабшанов конец
	
	ЗаполнитьXDTOНоменклатура(Источник,XDTOНоменклатураСоздание) ;
	
	
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
	Возврат XDTOНоменклатураСоздание;	
КонецФункции


Функция ПолучитьТЗНастроекНоменклатураИз1СВXTDO(ИмяМакета ="НоменклатураНастройкаИз1СВWeb" ) Экспорт
	
	ТЗНастроек = РеквизитыДляОбмена.Выгрузить();
	ТекМакет = ПолучитьМакет(ИмяМакета);
	ТекВысота = ТекМакет.ВысотаТаблицы;
	Итер = 2;
	Пока Итер<=ТекВысота Цикл
		НовСтрока = ТЗНастроек.Добавить();
		НовСтрока.ИскатьПоРеквизиту  					= ТекМакет.ПолучитьОбласть(Итер,1			,Итер,1).ТекущаяОбласть.Текст;
		НовСтрока.ВыполнятьОбмен 						= ТекМакет.ПолучитьОбласть(Итер,2			,Итер,2).ТекущаяОбласть.Текст;
		НовСтрока.ИмяРеквизитаВSQL						= ТекМакет.ПолучитьОбласть(Итер,3			,Итер,3).ТекущаяОбласть.Текст;
		НовСтрока.ТипРеквизитаВSQL						= ТекМакет.ПолучитьОбласть(Итер,4			,Итер,4).ТекущаяОбласть.Текст;
		НовСтрока.ПутьКДаннымРеквизита					= ТекМакет.ПолучитьОбласть(Итер,5			,Итер,5).ТекущаяОбласть.Текст;
		НовСтрока.ПутьКДаннымРеквизитаСУсловием			= ТекМакет.ПолучитьОбласть(Итер,6			,Итер,6).ТекущаяОбласть.Текст;
		
	//	НовСтрока.Описание							= ТекМакет.ПолучитьОбласть(Итер,7,Итер,7).ТекущаяОбласть.Текст;
		
		Итер = Итер+1;	 
	КонецЦикла;
	
	Возврат ТЗНастроек;
	
КонецФункции
Функция ПолучитьТЗСоответствийДляЗаписиИз1cXTDOНоменклатуры(ТЗНастроек,СЗРеквизитовПоиска) Экспорт
	
	ТекПутьКРевизитамSQL =""; 
	ТЗСоответствий = Новый ТаблицаЗначений;
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВSQL");
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВ1С");
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымЗагрузкаИзXTDO");
	ТЗСоответствий.Колонки.Добавить("ЭтоУсловие");
	ТЗСоответствий.Колонки.Добавить("Тип");
	//ТЗСоответствий.Колонки.Добавить("РеквизитГруппы");
	
	Для Каждого СтрокаТЧ из   ТЗНастроек Цикл
		Если СтрокаТЧ.ВыполнятьОбмен = Ложь ТОгда
			ПРодолжить;		
		КонецЕсли;
		НовСтрока = ТЗСоответствий.Добавить();
		Если СтрокаТЧ.ИскатьПоРеквизиту ТОгда
			СЗРеквизитовПоиска.Добавить(СтрокаТЧ.ИмяРеквизитаВSQL,СтрокаТЧ.ПутьКДаннымРеквизита);
		КонецЕсли;
		НовСтрока.ЭтоУсловие = СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием;
		НовСтрока.Тип =   НРег(СокрЛП(СтрокаТЧ.ТипРеквизитаВSQL));
		//НовСтрока.РеквизитГруппы = СтрокаТЧ.РеквизитГруппы;
		
		Если СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDOУсловие = 1 ТОгда
			НовСтрока.ПутьКДаннымЗагрузкаИзXTDO =СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDO+ " = ТекXTDO["""+СтрокаТЧ.ИмяРеквизитаВSQL+"""]"	 
		ИНачеЕсли  СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDOУсловие = 2 Тогда
			НовСтрока.ПутьКДаннымЗагрузкаИзXTDO =СтрокаТЧ.ПутьКДаннымЗагрузкаИзXTDO;	 
		КонецЕсли;
		//------------------------------
		
		НовСтрока.ПутьКДаннымВSQL = ТекПутьКРевизитамSQL+СокрЛП(СтрокаТЧ.ИмяРеквизитаВSQL);
		
		Если  СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием ТОгда
			//Это условие так на всяки пожарный, вдруг все таки поставили галку условие и ниче не сделали , то есть оставили в поле к примеру "Наименование" или "ТекОбъект.наименование"
			Если Лев(СтрокаТЧ.ПутьКДаннымРеквизита,1) <>"?" ТОгда
				Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
					НовСтрока.ПутьКДаннымВ1С ="Значение = "+ СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
				Иначе
					НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
				КонецЕсли;
			Иначе
				НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			КонецЕсли;
		ИначеЕсли  Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),6) = "запись" ТОгда
			НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
		Иначе
			Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
				НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			Иначе
				НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗСоответствий;
	
КонецФункции
Процедура ЗаполнитьXDTOНоменклатура(ТекОбъект, XDTOНоменклатураСоздание) Экспорт
	
	СЗРеквизитовПоиска = Новый СписокЗначений;
	ТЗНастроекНоменклатура = ПолучитьТЗНастроекНоменклатураИз1СВXTDO();
	ТЗСоответствий = ПолучитьТЗСоответствийДляЗаписиИз1cXTDOНоменклатуры(ТЗНастроекНоменклатура,СЗРеквизитовПоиска);
	
	СтруктураЗначений = Новый Структура;
	Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
		Значение = "";
		Попытка
			Выполнить(СтрокаТЗСоответствий.ПутьКДаннымВ1С);
		Исключение           
			
		КонецПопытки;
		Если СтрокаТЗСоответствий.Тип = "строка" Тогда
			Значение = СтрЗаменить(СокрЛП(Значение),Символ(160),"");
		ИначеЕсли СтрокаТЗСоответствий.Тип = "число" ТОгда
			Если ЗначениеЗаполнено(Значение) Тогда
				Попытка
					Значение = Число(Значение);	
				Исключение
					Значение = 0;	
				КонецПопытки;
				
			Иначе
				Значение = 0;
			КонецЕсли;
		КонецЕсли;
		Попытка                                                                        
			XDTOНоменклатураСоздание[СтрокаТЗСоответствий.ПутьКДаннымВSQL] = Значение;   
		Исключение                                                                     
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьXDTOНоменклатураСПБ(ТекОбъект, XDTOНоменклатураСоздание) Экспорт
	
	СЗРеквизитовПоиска = Новый СписокЗначений;
	ТЗНастроекНоменклатура = ПолучитьТЗНастроекНоменклатураИз1СВXTDO();
	ТЗСоответствий = ПолучитьТЗСоответствийДляЗаписиИз1cXTDOНоменклатуры(ТЗНастроекНоменклатура,СЗРеквизитовПоиска);
	
	СтруктураЗначений = Новый Структура;
	Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
		Значение = "";
		Попытка
			Выполнить(СтрокаТЗСоответствий.ПутьКДаннымВ1С);
		Исключение           
			
		КонецПопытки;
		Если СтрокаТЗСоответствий.Тип = "строка" Тогда
			Значение = СтрЗаменить(СокрЛП(Значение),Символ(160),"");
		ИначеЕсли СтрокаТЗСоответствий.Тип = "число" ТОгда
			Если ЗначениеЗаполнено(Значение) Тогда
				Попытка
					Значение = Число(Значение);	
				Исключение
					Значение = 0;	
				КонецПопытки;
				
			Иначе
				Значение = 0;
			КонецЕсли;
		КонецЕсли;
		Попытка                                                                        
			XDTOНоменклатураСоздание[СтрокаТЗСоответствий.ПутьКДаннымВSQL] = Значение;   
		Исключение                                                                     
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

Функция ПроверитьЗаполнениеРеквизитовНоменклатурыПередВыгрузкойЧерезWebСервис(ТекНоменклатура) Экспорт
	
	СЗОшибок = новый СписокЗначений;
	
	//Порешил что реквизитов для контроля мало, можно и в коде за бабахать
	
	Если  Не ЗначениеЗаполнено(СокрЛП(ТекНоменклатура.Наименование))  ТОгда
		СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: Наименование! ");
	КонецЕсли;
	Если  Не ЗначениеЗаполнено(СокрЛП(ТекНоменклатура.НаименованиеПолное))  ТОгда
		СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: Наименование полное! ");
	КонецЕсли;
	Если  Не ЗначениеЗаполнено(СокрЛП(ТекНоменклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Наименование))  ТОгда
		СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: единица измерения (наименование по классификатору)!");
	КонецЕсли;
					
	
	Возврат СЗОшибок;
КонецФункции
Функция ПроверитьЗаполнениеРеквизитовНоменклатурыПередВыгрузкойЧерезWebСервисСПБ(ТекНоменклатура) Экспорт
	
	СЗОшибок = новый СписокЗначений;
	
	//Порешил что реквизитов для контроля мало, можно и в коде за бабахать
	
	Если  Не ЗначениеЗаполнено(СокрЛП(ТекНоменклатура.Наименование))  ТОгда
		СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: Наименование! ");
	КонецЕсли;
	Если  Не ЗначениеЗаполнено(СокрЛП(ТекНоменклатура.НаименованиеПолное))  ТОгда
		СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: Наименование полное! ");
	КонецЕсли;
	Если  Не ЗначениеЗаполнено(СокрЛП(ТекНоменклатура.БазоваяЕдиницаИзмерения.Наименование))  ТОгда
		СЗОшибок.Добавить("Не заполнен или неверно заполнен реквизит: единица измерения (наименование по классификатору)!");
	КонецЕсли;
					
	
	Возврат СЗОшибок;
КонецФункции
&НаСервере
// XTTK. Вызывает вебсервис по согласованию с КТТК заведение номенклатуры
Функция СогласоватьСозданиеНоменклатуры(Источник) Экспорт
	
	ИнициализацияWebServiceНоменклатура();
	
	ОтветXDTO = Фабрика.Создать(Фабрика.Тип("http://www.abs-softNom.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	//ОтветXDTO.Error = "";
	
	// Заполенение данных
	XDTOНоменклатураСозданиеТип 	= Фабрика.Тип("http://www.abs-softNom.ru/", "NomenclaturesAdd");
	XDTOНоменклатураСоздание 		= Фабрика.Создать(XDTOНоменклатураСозданиеТип);
	//ЗаполнитьЗначенияСвойств(XDTOКонтрагентСоздание, Источник);
	//XDTOКонтрагентСоздание = СоздатьПакетXDTOКонтрагента(Источник);
	// Передача вызова вебсервиса на сервер
	//ИсточникСоответствие = Новый Соответствие;
	//абс_ОбработчикWebService.ЗаполнитьXDTOКонтрагент(ЭтотОбъект, 	ИсточникСоответствие) ;
	//ИсточникСоответствие.Вставить("абс_Номер_ИСУП_ТТК", 			ЭтотОбъект.абс_Номер_ИСУП_ТТК);
	//ИсточникСоответствие.Вставить("ID", 							ЭтотОбъект.Контрагент.абс_Код_ИСУП_ТТК);
	
	Для Каждого ТекРеквизит Из Источник Цикл
		Попытка
			XDTOНоменклатураСоздание[ТекРеквизит.Ключ] = ТекРеквизит.Значение;
		Исключение
		конецПопытки;
	КонецЦикла;
		
	
	#Если Клиент Тогда
		Состояние("Ожидание ответа WebService");
	#КонецЕсли	
	
	Попытка
		ОтветXDTO = Прокси.NomenclaturesAdd(XDTOНоменклатураСоздание);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "СогласоватьСозданиеНоменклатуры()");
		ОтветXDTO.Error = ОписаниеОшибки;
	КонецПопытки;
	
	
	
	//Сообщить("Код возврата: " + ОтветXDTO.ID);
	//Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
	//Возврат ОтветXDTO;
	Возврат Новый Структура("ID, Error", ОтветXDTO.ID, ОтветXDTO.Error);

КонецФункции

&НаСервере
// XTTK. Вызывает вебсервис по согласованию с КТТК заведение номенклатуры
Функция СогласоватьИзменениеНоменклатуры(Источник) Экспорт
	
	ИнициализацияWebServiceНоменклатура();
	
	ОтветXDTO = Фабрика.Создать(Фабрика.Тип("http://www.abs-softNom.ru/", "Answer"));
	ОтветXDTO.ID 	= "";
	//ОтветXDTO.Error = "";
	
	// Заполенение данных
	XDTOНоменклатураСозданиеТип 	= Фабрика.Тип("http://www.abs-softNom.ru/", "NomenclaturesAdd");
	XDTOНоменклатураСоздание 		= Фабрика.Создать(XDTOНоменклатураСозданиеТип);
	//ЗаполнитьЗначенияСвойств(XDTOКонтрагентСоздание, Источник);
	//XDTOКонтрагентСоздание = СоздатьПакетXDTOКонтрагента(Источник);
	// Передача вызова вебсервиса на сервер
	//ИсточникСоответствие = Новый Соответствие;
	//абс_ОбработчикWebService.ЗаполнитьXDTOКонтрагент(ЭтотОбъект, 	ИсточникСоответствие) ;
	//ИсточникСоответствие.Вставить("абс_Номер_ИСУП_ТТК", 			ЭтотОбъект.абс_Номер_ИСУП_ТТК);
	//ИсточникСоответствие.Вставить("ID", 							ЭтотОбъект.Контрагент.абс_Код_ИСУП_ТТК);
	
	Для Каждого ТекРеквизит Из Источник Цикл
		Попытка
			XDTOНоменклатураСоздание[ТекРеквизит.Ключ] = ТекРеквизит.Значение;
		Исключение
		конецПопытки;
	КонецЦикла;
		
	
	#Если Клиент Тогда
		Состояние("Ожидание ответа WebService");
	#КонецЕсли	
	
	Попытка
		ОтветXDTO = Прокси.NomenclatureChangeStatus(XDTOНоменклатураСоздание);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "СогласоватьСозданиеНоменклатуры()");
		ОтветXDTO.Error = ОписаниеОшибки;
	КонецПопытки;
	
	
	
	//Сообщить("Код возврата: " + ОтветXDTO.ID);
	//Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли	
	
	//Возврат ОтветXDTO;
	Возврат Новый Структура("ID, Error", ОтветXDTO.ID, ОтветXDTO.Error);

КонецФункции
Процедура ОбновитьДанныеВSQL(ТекстЗапроса,Настройка,БылаОшибка) Экспорт
	
	Перем Соединение;
	
	Если Соединение = Неопределено Тогда
		Соединение =ВыполнитьПодключениеКSQL(Настройка);
	КонецЕсли;
	
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;	
	Cmd.CommandText = ТекстЗапроса;
	Rs = Новый COMОбъект("ADODB.RecordSet"); 
	
	Попытка
		ЗаписьЖурналаРегистрации("Cmd.Execute()", УровеньЖурналаРегистрации.Информация, , , ТекстЗапроса);
		Rs = Cmd.Execute(); 		
			
	Исключение
		абс_WebService.СообщитьОбОшибке("Запрос не выполнен: " + ОписаниеОшибки(), "Cmd.Execute()");
		БылаОшибка = Истина;
		
	КонецПопытки;
	

	
КонецПроцедуры

Процедура ДобавитьЗаписьНоменклатурыВSQLЧерезХранимыеПроцедуры(ТЗЗначений,СтруктураПодключения,БылаОшибка)
	ТЗПараметры = Новый ТаблицаЗначений;
	ТЗПараметры.Колонки.Добавить("ИмяПараметра");
	ТЗПараметры.Колонки.Добавить("Параметр");
	
	ТекстрЗапроса ="Exec "+СтруктураПодключения.DataSource+".dbo.Nomenclature_ins_All ";
	Для Каждого СтрокаТЗЗначений из ТЗЗначений  Цикл
		Если  СтрЗаменить(СтрокаТЗЗначений.ПутьКДаннымВSQL,СтруктураПодключения.DataSource+"."+СтруктураПодключения.Table+".","")= "ID_Change" Тогда
			Продолжить;
		Иначе
			ТекстрЗапроса = ТекстрЗапроса+ СтрЗаменить(СокрЛП(СтрокаТЗЗначений.Значение),Символ(160),"")+",";
		КонецЕсли;
	КонецЦикла;
	ТекстрЗапроса = Сред(ТекстрЗапроса,1,СтрДлина(ТекстрЗапроса)-1)+" ";
	ОбновитьДанныеВSQL(ТекстрЗапроса,СтруктураПодключения,БылаОшибка);	
	//Если   БылаОшибка = Ложь Тогда 
	//	ПоследняяВерсия = ПоследняяВерсия+1;
	//КонецЕсли;
КонецПРоцедуры
//---------------

Функция ПолучитьТЗЗначенийПоПоНоменклатуре(ТЗСоответствий,ТекОбъект)Экспорт
	
	ТЗЗначений = Новый ТаблицаЗначений;
	ТЗЗначений.Колонки.Добавить("ПутьКДаннымВSQL");
	ТЗЗначений.Колонки.Добавить("Значение");
	СтруктураЗначений = Новый Структура;
	
	Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
		Значение = "";
		Попытка
			Выполнить(СтрокаТЗСоответствий.ПутьКДаннымВ1С);
		Исключение           
			
		КонецПопытки;
		Если   Значение <>NULL ТОгда
			Если   СтрокаТЗСоответствий.Тип = "строка" или СтрокаТЗСоответствий.Тип = "дата"  или СтрокаТЗСоответствий.Тип = "датаивремя"  Тогда
				Значение = СтрЗаменить(СокрЛП(Значение),"'","""");
				
				Значение = "'"+СокрЛП(Значение)+"'";
			ИначеЕсли  СтрокаТЗСоответствий.Тип = "число"  Тогда
				Если ЗначениеЗаполнено(Значение) ТОгда
					Попытка
						Значение = Число(Значение);
					Исключение
						Значение = 0;
					КонецПопытки;
					
				Иначе
					Значение = 0;	
				КонецЕсли;
			ИначеЕсли  СтрокаТЗСоответствий.Тип = "логическое" Тогда
				Значение =?(Значение ,1,0);
			КонецЕсли;
		Иначе
			Значение = "NULL";
		КонецЕсли;
		НовСТрока = ТЗЗначений.Добавить();
		НовСТрока.ПутьКДаннымВSQL 	=  СтрокаТЗСоответствий.ПутьКДаннымВSQL;
		НовСТрока.Значение 			= Значение;
		
	КонецЦикла;	
	Возврат ТЗЗначений;
КонецФункции
Функция ПолучитьТЗСоответствийДляЗаписиНоменклатуры(ТекущийОбмен) Экспорт
	
	ТЗРеквизитыДляОбмена = ТекущийОбмен.РеквизитыДляОбмена.Выгрузить();
	ТЗРеквизитыДляОбмена.Очистить();
	ТекИмяБазы =  СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL);
	ТекИмяТаблицы =  СокрЛП(ТекущийОбмен.ИмяТаблицыSQL);
	ТекПутьКРевизитамSQL =ТекИмяБазы+"."+ТекИмяТаблицы; 
	ТЗСоответствий = Новый ТаблицаЗначений;
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВSQL");
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВ1С");
	ТЗСоответствий.Колонки.Добавить("ЭтоУсловие");
	ТЗСоответствий.Колонки.Добавить("Тип");
	
	ЭтоТестБаза = Не Справочники.Организации.НайтиПоНаименованию("#123#",Истина).Пустая();
	Если ЭтоТестБаза ТОгда
		ТекМакет = ПолучитьМакет("НоменклатураНастройкаВыгрузкаИз1CвSQL1");
	Иначе
		ТекМакет = ПолучитьМакет("НоменклатураНастройкаВыгрузкаИз1CвSQL");
	КонецЕсли;
	 ТекВысота = ТекМакет.ВысотаТаблицы;
	 Итер = 2;
	 
	 Пока Итер<=ТекВысота Цикл
		 НовСтрока = ТЗРеквизитыДляОбмена.Добавить();
		 НовСтрока.ИскатьПоРеквизиту  				= ТекМакет.ПолучитьОбласть(Итер,1,Итер,1).ТекущаяОбласть.Текст;
		 НовСтрока.ВыполнятьОбмен 					= ТекМакет.ПолучитьОбласть(Итер,2,Итер,2).ТекущаяОбласть.Текст;
		 НовСтрока.ИмяРеквизитаВSQL					= ТекМакет.ПолучитьОбласть(Итер,3,Итер,3).ТекущаяОбласть.Текст;
		 НовСтрока.ТипРеквизитаВSQL					= ТекМакет.ПолучитьОбласть(Итер,4,Итер,4).ТекущаяОбласть.Текст;
		 НовСтрока.ПутьКДаннымРеквизита				= ТекМакет.ПолучитьОбласть(Итер,5,Итер,5).ТекущаяОбласть.Текст;
		 НовСтрока.ПутьКДаннымРеквизитаСУсловием	= ТекМакет.ПолучитьОбласть(Итер,6,Итер,6).ТекущаяОбласть.Текст;
		 НовСтрока.Описание							= ТекМакет.ПолучитьОбласть(Итер,7,Итер,7).ТекущаяОбласть.Текст;
		 
		 
		 Итер = Итер+1;	 
	 КонецЦикла;

	
	Для Каждого СтрокаТЧ из   ТЗРеквизитыДляОбмена Цикл
		Если СтрокаТЧ.ВыполнятьОбмен = Ложь ТОгда
			ПРодолжить;		
		КонецЕсли;
		НовСтрока = ТЗСоответствий.Добавить();
		НовСтрока.ЭтоУсловие = СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием;
		НовСтрока.Тип =   НРег(СокрЛП(СтрокаТЧ.ТипРеквизитаВSQL));
		//НовСтрока.РеквизитГруппы = СтрокаТЧ.РеквизитГруппы;
		
		//------------------------------
		
		
		НовСтрока.ПутьКДаннымВSQL = ТекПутьКРевизитамSQL+"."+СокрЛП(СтрокаТЧ.ИмяРеквизитаВSQL);
		
		Если  СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием ТОгда
			//Это условие так на всяки пожарный, вдруг все таки поставили галку условие и ниче не сделали , то есть оставили в поле к примеру "Наименование" или "ТекОбъект.наименование"
			Если Лев(СтрокаТЧ.ПутьКДаннымРеквизита,1) <>"?" ТОгда
				Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
					НовСтрока.ПутьКДаннымВ1С ="Значение = "+ СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
				Иначе
					НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
				КонецЕсли;
			Иначе
				НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			КонецЕсли;
		ИначеЕсли  Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),6) = "запись" ТОгда
			 НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
		Иначе
			Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
				НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			Иначе
				НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТЗСоответствий;
	
КонецФункции
Функция ВыполнитьПодключениеКSQL(Настройка) Экспорт
	
    удачноеСоединение = Истина;
	Попытка
		ConnectionString="DRIVER={SQL Server};SERVER="+СокрЛП(Настройка.Provider)+";UID="+СокрЛП(Настройка.UserID)+";PWD="+СокрЛП(Настройка.Password)+";DATABASE="+СокрЛП(Настройка.DataSource)+";";
		Соединение=Новый COMОбъект("ADODB.Connection");
		Соединение.Open(СокрЛП(ConnectionString));
	Исключение
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки(), "ВыполнитьПодключениеКSQL(Настройка)");
		//Сообщить(ОписаниеОшибки());
		Соединение = 0;
	КонецПопытки; 
	  Возврат Соединение;
	
КонецФункции
Процедура ВыполнитьОбменПоНоменклатуреЧерезПланОбмена(ТекущийОбмен) Экспорт
	
	Если ТекущийОбмен.ВыполнятьОбмен = Ложь ТОгда
		Возврат;
	КонецЕсли;
	//Проверка соединения
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	СтруктураПодключения.Вставить("Provider",		СокрЛП(ТекущийОбмен.ИмяСервераSQL));	
	СтруктураПодключения.Вставить("DataSource",		СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL));	
	СтруктураПодключения.Вставить("UserID",			СокрЛП(ТекущийОбмен.ИмяПользователя));	
	СтруктураПодключения.Вставить("Password",		СокрЛП(ТекущийОбмен.Пароль));	
	СтруктураПодключения.Вставить("Table",			СокрЛП(ТекущийОбмен.ИмяТаблицыSQL));	
	
	//Проверка соединения
	Соединение = ВыполнитьПодключениеКSQL(СтруктураПодключения);
	Если Соединение  = Ложь Тогда
		Возврат;	
	КонецЕсли;
	БылаОшибка = Ложь;
	
	
	ТипОбъекта = ТекущийОбмен.ТипОбъекта;
	ТекНомер = ТекущийОбмен.Узел.НомерОтправленного;
	//Фильтр = Метаданные.Справочники.Номенклатура;
	Выборка = ПланыОбмена.ВыбратьИзменения(ТекущийОбмен.Узел,ТекНомер);
	ТЗСоответствий = ПолучитьТЗСоответствийДляЗаписиНоменклатуры(ТекущийОбмен);
	СЗНоменклатурБезОсновнойНоменклатуры = новый СписокЗначений;
	//Сначала с основной номенклатурой
	Пока Выборка.Следующий() Цикл
		
		ТекОб = Выборка.Получить();
		
		
		Если   Найти(Строка(ТипЗНЧ(ТекОб)),"Версии номенклатуры")>0 ТОгда
			
			Попытка
				РегЗапись = ТекОб[0];
			Исключение
			КонецПопытки;
			
			ТекНаборИлиОбъект   = РегЗапись.Номенклатура;
			
			//			
			Если ТекНаборИлиОбъект.абс_ОсновнаяНоменклатура.Пустая() ТОгда
				СЗНоменклатурБезОсновнойНоменклатуры.Добавить(ТекОб);
				Продолжить;
			КонецЕсли;
			СтруктураРеквизитов =  РегЗапись.ХранилищеСтруктура.Получить();
			ТекСтруктура = Новый Структура;
			ТекСтруктура.Вставить("Объект",ТекНаборИлиОбъект);
			ТЗЗначений = ПолучитьТЗЗначенийПоПоНоменклатуре(ТЗСоответствий,СтруктураРеквизитов);
			БылаОшибка = Ложь;
			ДобавитьЗаписьНоменклатурыВSQLЧерезХранимыеПроцедуры(ТЗЗначений,СтруктураПодключения,БылаОшибка);

			Если  БылаОшибка = Ложь Тогда
				
				ПланыОбмена.УдалитьРегистрациюИзменений(ТекущийОбмен.Узел,ТекОб);
				
			Иначе
				//Сообщить("не выгружен объект: "+ТекНаборИлиОбъект);
				абс_WebService.СообщитьОбОшибке("Не выгружен объект: " + ТекНаборИлиОбъект, "ВыполнитьОбменПоНоменклатуреЧерезПланОбмена(ТекущийОбмен)");

			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	////Теперь без основной номенклатуры  ========================
	
	Для Каждого СТрокаСЗ из СЗНоменклатурБезОсновнойНоменклатуры   Цикл
		
		ТекОб = СТрокаСЗ.Значение;
		
		
		Если   Найти(Строка(ТипЗНЧ(ТекОб)),"Версии номенклатуры")>0 ТОгда
			
			Попытка
				РегЗапись = ТекОб[0];
			Исключение
			КонецПопытки;
			
			ТекНаборИлиОбъект   = РегЗапись.Номенклатура;
			
			//			
			СтруктураРеквизитов =  РегЗапись.ХранилищеСтруктура.Получить();
			ТекСтруктура = Новый Структура;
			ТекСтруктура.Вставить("Объект",ТекНаборИлиОбъект);
			ТЗЗначений = ПолучитьТЗЗначенийПоПоНоменклатуре(ТЗСоответствий,СтруктураРеквизитов);
			БылаОшибка = Ложь;
			ДобавитьЗаписьНоменклатурыВSQLЧерезХранимыеПроцедуры(ТЗЗначений,СтруктураПодключения,БылаОшибка);

			Если  БылаОшибка = Ложь Тогда
				
				ПланыОбмена.УдалитьРегистрациюИзменений(ТекущийОбмен.Узел,ТекОб);
				
			Иначе
				//Сообщить("не выгружен объект: "+ТекНаборИлиОбъект);
				абс_WebService.СообщитьОбОшибке("Не выгружен объект: " + ТекНаборИлиОбъект, "ВыполнитьОбменПоНоменклатуреЧерезПланОбмена(ТекущийОбмен)");

			КонецЕсли;
			
		КонецЕсли;


			
	КонецЦикла;	
КонецПроцедуры
//--------------------------

//процедуры ДЗО по мэпингу номенклатуры начало
Функция ПолучитьТЗСоответствийДляЧтенияИзSQLВ1сНоменклатура(ТекущийОбмен)
	//ТекИмяБазы =  СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL);
	//ТекИмяТаблицы =  СокрЛП(ТекущийОбмен.ИмяТаблицыSQL);
	//ТекПутьКРевизитамSQL =ТекИмяБазы+"."+ТекИмяТаблицы; 
	//ТЗСоответствий = Новый ТаблицаЗначений;
	//ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВSQL");
	//ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВ1С");
	//ТЗСоответствий.Колонки.Добавить("ЭтоУсловие");
	//ТЗСоответствий.Колонки.Добавить("Тип");
	//ТЗСоответствий.Колонки.Добавить("РеквизитГруппы");
	//ТЗСоответствий.Колонки.Добавить("ПутьКДаннымРеквизитаИзSQL");
	//ТЗСоответствий.Колонки.Добавить("ПутьКДаннымРеквизитаИзSQLУсловие");
	//
	//
	//
	//
	//Для Каждого СтрокаТЧ из   ТекущийОбмен.РеквизитыДляОбмена Цикл
	//	Если СтрокаТЧ.ВыполнятьОбмен = Ложь ТОгда
	//		ПРодолжить;		
	//	КонецЕсли;
	//	НовСтрока = ТЗСоответствий.Добавить();
	//	Если СтрокаТЧ.ИскатьПоРеквизиту ТОгда
	//		СЗРеквизитовПоиска.Добавить(СтрокаТЧ.ИмяРеквизитаВSQL,СтрокаТЧ.ПутьКДаннымРеквизита);
	//	КонецЕсли;
	//	НовСтрока.ЭтоУсловие = СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием;
	//	НовСтрока.Тип =   НРег(СокрЛП(СтрокаТЧ.ТипРеквизитаВSQL));
	//	НовСтрока.РеквизитГруппы = СтрокаТЧ.РеквизитГруппы;
	//	
	//	//-----------------------------
	//	Если   СтрокаТЧ.ПутьКДаннымРеквизитаИзSQLУсловие = 1 ТОгда
	//		НовСтрока.ПутьКДаннымРеквизитаИзSQL =СтрокаТЧ.ПутьКДаннымРеквизитаИзSQL+ " = ТекSQL["""+СтрокаТЧ.ИмяРеквизитаВSQL+"""]";	 
	//	ИНачеЕсли  СтрокаТЧ.ПутьКДаннымРеквизитаИзSQLУсловие = 2 Тогда
	//		НовСтрока.ПутьКДаннымРеквизитаИзSQL =СтрокаТЧ.ПутьКДаннымРеквизитаИзSQL;	 
	//	КонецЕсли;
	//	//------------------------------
	//	
	//	НовСтрока.ПутьКДаннымВSQL = СокрЛП(СтрокаТЧ.ИмяРеквизитаВSQL);
	//	
	//	Если  СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием ТОгда
	//		//Это условие так на всяки пожарный, вдруг все таки поставили галку условие и ниче не сделали , то есть оставили в поле к примеру "Наименование" или "ТекОбъект.наименование"
	//		Если Лев(СтрокаТЧ.ПутьКДаннымРеквизита,1) <>"?" ТОгда
	//			Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
	//				НовСтрока.ПутьКДаннымВ1С ="Значение = "+ СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
	//			Иначе
	//				НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
	//			КонецЕсли;
	//		Иначе
	//			НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
	//		КонецЕсли;
	//	ИначеЕсли  Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),6) = "запись" ТОгда
	//		 НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
	//	Иначе
	//		Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
	//			НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
	//		Иначе
	//			НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//Возврат ТЗСоответствий;		
КонецФункции
Процедура ТипизироватьТЗ(ТЗ)
	КС = Новый КвалификаторыСтроки(300);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);

	НовТЗ = Новый ТаблицаЗначений;
	Для Каждого КолонкаТЗ из ТЗ.Колонки Цикл
		НовТЗ.Колонки.Добавить(КолонкаТЗ.Имя,ОписаниеТиповС);		
	КонецЦикла;
	Для Каждого СТрокаТЗ из ТЗ Цикл
		//Делается так потому что при числовых значениях еще появляется долюаны символ 160!!!
		НовСТрока = НовТЗ.Добавить();

		Для Каждого КолонкаТЗ из ТЗ.Колонки Цикл
			ТекИмя = КолонкаТЗ.Имя;
			НовСТрока[ТекИмя]	=  СтрЗаменить(СокрЛП(СТрокаТЗ[ТекИмя]),Символ(160),"");
		КонецЦикла;
				//ЗаполнитьЗначенияСвойств(НовСТрока,СТрокаТЗ);		
	КонецЦикла;
	ТЗ =  НовТЗ.Скопировать();
КонецПРоцедуры
Функция  НайтиИПолучитьДеревоНоменклатуры(ТЗ,СЗ_ID)
	ТипизироватьТЗ(ТЗ);
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗ",ТЗ);
	Запрос.Текст = " выбрать ТЗ.*  Поместить ВТ Из &ТЗ как ТЗ";
	Запрос.Выполнить();
	Запрос.УстановитьПараметр("СЗ_ID",СЗ_ID); 
	ЗАпрос.Текст ="ВЫБРАТЬ
	              |	Номенклатура.Ссылка КАК Ссылка,
	              |	Номенклатура.абс_Код_ИСУП_ТТК КАК ID
	              |ИЗ
	              |	Справочник.Номенклатура КАК Номенклатура
	              |ГДЕ
	              |	Номенклатура.абс_Код_ИСУП_ТТК В(&СЗ_ID)
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	Номенклатура.Ссылка,
	              |	Номенклатура.абс_Код_ИСУП_ТТК
	              |ИТОГИ ПО
	              |	ID,
	              |	Ссылка";
	
	 Возврат ЗАпрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
//	Справочники		
КонецФункции
Функция СоздатьПерезаписатьНоменклатуру(Выборка,ТЗСоответствий,ПоследняяВерсияВSQL,ТекНоменклатура,ПользовательДляСтатусов,ТЗНоменклатур)
	
	Если Не	ТекНоменклатура.Пустая() Тогда
		ТекОбъект = ТекНоменклатура.ПолучитьОбъект();
	КонецЕсли;

	ТекSQL = Выборка;
	Попытка
		ТекОбъект.мАбс_СтруктураПараметров.Вставить("ЭтоЗагрузкаИзSQL",Истина)  ;
	Исключение
	КонецПопытки;
	
	
	Если  СокрЛП(Выборка.ID_Head) <>"" ТОгда
		
			ТекОбъект.абс_Код_ИСУП_ТТК = СокрЛП(Выборка.ID_Head);
			Попытка
				ТекОбъект.Записать();
				ПоследняяВерсияВSQL =  ТекSQL["ID_Change"];
				ТекНоменклатура =  ТекОбъект.Ссылка;
				
				НовСтрока			= ТЗНоменклатур.Добавить();
				НовСтрока.Ссылка 	= ТекОбъект.Ссылка;
				НовСтрока.ID 		= ТекОбъект.абс_Код_ИСУП_ТТК;
				
				Возврат Истина;
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Ложь;
				
			КонецПопытки;
	Иначе //присвоим реквизиты
		
		
		ТекОбъект.НАименование 					= СокрЛП(ТекSQL["Name"]);	
		ТекОбъект.НАименованиеПолное 			= СокрЛП(ТекSQL["Full_Name"]);	
		//Попытка
		//	ТекОбъект.ВестиУчетПоСериям 			= Число(ТекSQL["Acc_Series"]);
		//Исключение
		//	
		//КонецПопытки;
		//Попытка
		//	ТекОбъект.ВестиПартионныйУчетПоСериям 	= Число(ТекSQL["Part_Acc_Series"]);	
		//Исключение
		//	
		//КонецПопытки;
		//Попытка
		//	ТекОбъект.ВестиУчетПоХарактеристикам 	= Число(ТекSQL["Acc_Add_Descript"]);	
		//Исключение
		//	
		//КонецПопытки;
		//ТекОбъект.Артикул 						= СокрЛП(ТекSQL["Article"]);	
		//ТекОбъект.абс_Комкод 					= СокрЛП(ТекSQL["COMCODE"]);	
		
		//ТекОбъект.СтавкаНДС 					= ПолучитьПеречислениеПоПредставлению("СтавкиНДС",ТекSQL["NDS"]);	
		
		ТекОбъект.абс_СтатусНоменклатуры		= ПолучитьПеречислениеПоПредставлению("Абс_СтатусыНоменклатуры",ТекSQL["Status"]);	
		ТекОбъект.абс_ПричинаИзмененияСтатуса 	= СокрЛП(ТекSQL["Status_Change_Cause"]);	
		ТекОбъект.Мабс_ДатаИзмененияСтатуса 		= ТекSQL["NSI_Check_Date"];	
		ТекОбъект.мАбс_ПользовательДляСтатуса 	= ПользовательДляСтатусов;
		
				
		
	КонецЕсли;	
	
	//ТекОбъект.абс_ПользовательДляСтатуса = ПользовательДляСтатусов;
	Попытка
		
		Попытка
			ТекОбъект.абс_ДатаИзмененияСтатуса = Выборка.Date;	
		Исключение
			
		КонецПопытки;
		
		ТекОбъект.Записать();
		
		ПоследняяВерсияВSQL =  ТекSQL["ID_Change"];
		ТекНоменклатура =  ТекОбъект.Ссылка;
		Возврат Истина;
	Исключение
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки(), "ВыполнитьПодключениеКSQL(Настройка)");
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;	
КонецФункции

Процедура  ЗагрузитьНоменклатуруИзSQL(ТекущийОбмен) Экспорт
	
	Если ТекущийОбмен.ВыполнятьОбмен = Ложь ТОгда
		Возврат;
	КонецЕсли;
	//Проверка соединения
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	СтруктураПодключения.Вставить("Provider",		СокрЛП(ТекущийОбмен.ИмяСервераSQL));	
	СтруктураПодключения.Вставить("DataSource",		СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL));	
	СтруктураПодключения.Вставить("UserID",			СокрЛП(ТекущийОбмен.ИмяПользователя));	
	СтруктураПодключения.Вставить("Password",		СокрЛП(ТекущийОбмен.Пароль));	
	//Проверка соединения
	Соединение = абс_ПроцедурыОбмена.ВыполнитьПодключениеКSQL(СтруктураПодключения);
	Если Соединение  = Ложь Тогда
		Возврат;	
	КонецЕсли;
	БылаОшибка = Ложь;
	ТЗВерсии =  РегистрыСведений.абс_ВерсияЗагрузкиНоменклатуры.СрезПоследних();
	Если ТЗВерсии = Неопределено  ТОгда
		ПоследняяВерсияВSQL = 0;
	ИначеЕсли  ТЗВерсии.Количество()<> 0 Тогда
		ПоследняяВерсияВSQL = ТЗВерсии[0].НомерВерсии;
	ИНаче
		ПоследняяВерсияВSQL = 0;
	КонецЕсли;
	СЗРеквизитовПоиска = новый СписокЗначений;
	ТЗСоответствий = ПолучитьТЗСоответствийДляЧтенияИзSQLВ1сНоменклатура(ТекущийОбмен);
	//Убрать когда сделаем хранимые процедуры в SQL ---------------------------------
	СтрокаЗапросаВыборкиИзSQL = "Select ";
	//============
	//ПерезаписыватьНайденные = ТекущийОбмен.ПерезаписыватьНайденные;
	//Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
	//	СтрокаЗапросаВыборкиИзSQL = СтрокаЗапросаВыборкиИзSQL+"
	//	| Kontr."+СтрокаТЗСоответствий.ПутьКДаннымВSQL +",";
	//КонецЦикла;
	//СтрокаЗапросаВыборкиИзSQL =Сред(СтрокаЗапросаВыборкиИзSQL,1,СтрДлина(СтрокаЗапросаВыборкиИзSQL)-1);
	//СтрокаЗапросаВыборкиИзSQL = СтрокаЗапросаВыборкиИзSQL+" From  "+СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL)+"." +СокрЛП(ТекущийОбмен.ИмяТаблицыSQL)+" as Kontr"+
	//" where  Kontr.ID_Change > " + ПоследняяВерсияВSQL;
	//;
	ТЗНоменклатурыSQL =  абс_ПроцедурыОбмена.ПрочитатЗаписиЧерезХранимыПроцедурыНоменклатуру(ПоследняяВерсияВSQL,СтруктураПодключения);
	
	Попытка
		Итер = ТЗНоменклатурыSQL.Количество()-1;
		Пока Итер >=0 Цикл
			Если  СокрЛП(ТЗНоменклатурыSQL[Итер].ID) = "" ТОгда
				ТЗНоменклатурыSQL.Удалить(Итер);		
			КонецЕсли;
			
			ИТер = Итер-1;	
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	Попытка 
		НеОстанавливатьсяПриОшибке = ТекущийОбмен.НеОстанавливатьсяПриОшибке;
	Исключение
		НеОстанавливатьсяПриОшибке = Истина;
	КонецПопытки;
	
	СЗ_ID = Новый СписокЗначений;
	СЗ_ID.ЗагрузитьЗначения(ТЗНоменклатурыSQL.ВыгрузитьКолонку("ID"));
	СЗ_ID_Head = новый СписокЗначений;
	СЗ_ID_Head.ЗагрузитьЗначения(ТЗНоменклатурыSQL.ВыгрузитьКолонку("ID_Head"));
	
	Для Каждого СТрокаСЗ из  СЗ_ID_Head Цикл
		
		Если СокрЛП(СТрокаСЗ.Значение) <> "" Тогда
			СЗ_ID.Добавить(СТрокаСЗ.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	ТипизироватьТЗ(ТЗНоменклатурыSQL);
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗ",ТЗНоменклатурыSQL);
	Запрос.Текст = " выбрать ТЗ.*  Поместить ВТ Из &ТЗ как ТЗ";
	Запрос.Выполнить();
	Запрос.УстановитьПараметр("СЗ_ID",СЗ_ID); 
	ЗАпрос.Текст ="ВЫБРАТЬ
	              |	Номенклатура.Ссылка КАК Ссылка,
	              |	Номенклатура.абс_Код_ИСУП_ТТК КАК ID
	              |ИЗ
	              |	Справочник.Номенклатура КАК Номенклатура
	              |ГДЕ
	              |	Номенклатура.абс_Код_ИСУП_ТТК В(&СЗ_ID)
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	Номенклатура.Ссылка,
	              |	Номенклатура.абс_Код_ИСУП_ТТК";


	ТЗНоменклатур = ЗАпрос.Выполнить().Выгрузить();
	//ДеревоКОнтрагентов = НайтиИПолучитьДеревоНоменклатуры(ТЗНоменклатурыSQL,СЗ_ID);
	
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗ",ТЗНоменклатурыSQL);
	Запрос.Текст = " выбрать ТЗ.*  Поместить ВТ Из &ТЗ как ТЗ";
	Запрос.Выполнить();
	
	Запрос.Текст ="Выбрать  ВТ.*
	              |
				  |Из  ВТ как ВТ 
				  |
				  |Упорядочить По  ВТ.ID_Change   ";
	Выборка  = Запрос.Выполнить().Выбрать();
	//ТекЭтапМэппинга = абс_ПроцедурыСПовторнымВызовом.ПолучитьЭтапыМэппингаПоИннКппДляТекущейБазы();			  
	ПрошлыйID = "";    
	ТекКОнтрагент = "";
	ТекКОнтрагент = Справочники.Номенклатура.ПустаяСсылка();
	ВсеОК = Ложь;
	ПользовательДляСтатусов = ТекущийОбмен.ПользовательДляСтатусов;
	СЗКонтрагентовИмеющиеОсновного = Новый СписокЗначений;
	Пока Выборка.Следующий() цикл
		Если   СокрЛП(Выборка.ID) =  "" ТОгда
			Продолжить;
		КОнецЕсли;
		
		СЗКонтрагентовИмеющиеОсновного.Добавить(Выборка.ID_Change);
		
		Если ПрошлыйID<>Выборка.ID ТОгда
			ПрошлыйID =  Выборка.ID;
			ТекНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
			
			СТруктураОтбора = новый Структура;
			СТруктураОтбора.Вставить("ID",ПрошлыйID);
			Нашли = ТЗНоменклатур.НайтиСтроки(СТруктураОтбора);
			//Нашли = ДеревоКОнтрагентов.СТроки.Найти(ПрошлыйID, "ID");
		КОнецЕсли;
		Если Нашли <> Неопределено ТОгда //То ничего не делаем
			Если  Нашли.Количество() = 0 ТОгда
				ПоследняяВерсияВSQL = Выборка.ID_Change;
			Иначе
				Для Каждого СТрокаТЗ из  Нашли Цикл
					ВсеОК = СоздатьПерезаписатьНоменклатуру(Выборка,ТЗСоответствий,ПоследняяВерсияВSQL,СТрокаТЗ.Ссылка,ПользовательДляСтатусов,ТЗНоменклатур);		
					Если ВсеОК = Ложь и НеОстанавливатьсяПриОшибке = Ложь Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ПоследняяВерсияВSQL = Выборка.ID_Change;
		КОнецЕсли;
	КонецЦикла;
	
		
	
	Если ВсеОК = Ложь и НеОстанавливатьсяПриОшибке = Ложь  Тогда
		Возврат;
	КонецЕсли;
	
	ТекНабор = РегистрыСведений.абс_ВерсияЗагрузкиНоменклатуры.СоздатьНаборЗаписей();
	НовЗапись = ТекНабор.Добавить();
	НовЗапись.НомерВерсии = ПоследняяВерсияВSQL;
	НовЗапись.Период = ТекущаяДата();
	ТекНабор.записать(Истина);
		
КонецПроцедуры

//Функция при переводе из статуса подготовка в согласование
Функция НоменклатураПередЗаписьюWebСогласование(Источник,Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		
		Если Источник.мАбс_СтруктураПараметров.Свойство("ЭтоПубликация")  ТОгда
			Если    Источник.мАбс_СтруктураПараметров.ЭтоПубликация ТОгда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
	КонецПопытки;		
	
	
	
	
	//Здесь три случая:
	//1. Запись в форме, когда статус подготовка и нет кода ЕИСУП, Получив код, записываем со статусом согласование НСИ  (нажали на кнопку Опубликовать)
	//2. Запись в форме, когда прежний статус отказ и переводим в подготовку (код ЕИСУП есть), записываем со статусом Подготовка если на стороне ЕИСУП тоже статус Отказ, если нет,
	//то Меняем на статус который в ЕИСУП   (Поменяли статус в форме на Подготовку и записали;
	//3. Запись в Форме, когда статус был подготовка и был код ЕИСУП,  записываем со статусом Согласование НСИ если на стороне ЕИСУП тоже статус Подготовка, если нет,
	//то Меняем на статус который в ЕИСУП;
	
	
	//Так вот, данная процедура предназначена только для записи когда перевели из подготовки на согласование НСИ
	
	
	//Запись и
	Если Не(Источник.абс_СтатусНоменклатуры = Перечисления.Абс_СтатусыНоменклатуры.СогласованиеНСИ и  Источник.Ссылка.Абс_СтатусНоменклатуры = Перечисления.Абс_СтатусыНоменклатуры.Подготовка) ТОгда
		Возврат ЛОжь ;		
	КонецЕсли;
	
	Если Источник.абс_СтатусНоменклатуры = Перечисления.Абс_СтатусыНоменклатуры.СогласованиеНСИ и СокрЛП(Источник.абс_Код_ИСУП_ТТК) = "" ТОгда
		Возврат ЛОжь;	
	КонецЕсли;
	
	// Вызов обработчика
		Попытка
			
			//Сначала проверка на заполненность
			СЗОшибок = ПроверитьЗаполнениеРеквизитовНоменклатурыПередВыгрузкойЧерезWebСервис(Источник);
			Если СЗОшибок.Количество() >0 ТОгда
				Для Каждого СтрокаСЗ из  СЗОшибок Цикл
					Сообщить(СтрокаСЗ.Значение);	
				КонецЦикла;
				Возврат Ложь;	
			КонецЕсли;
			
			// Передача вызова вебсервиса на сервер
			ИсточникСоответствие = Новый Соответствие;
			ЗаполнитьXDTOНоменклатура(Источник, 	ИсточникСоответствие) ;

			ИсточникСоответствие.Вставить("абс_СтатусНоменклатуры", 		Источник.абс_СтатусНоменклатуры);
			ИсточникСоответствие.Вставить("абс_Код_ИСУП_ТТК", 				Источник.абс_Код_ИСУП_ТТК);
			
			//ОтветXDTO = абс_ОбработчикWebService.СогласоватьСозданиеКонтрагента(ЭтотОбъект);
			ОтветXDTO = абс_WebServiceСервер.ВыполнитьНаСервереФункцию("НоменклатураПередЗаписьюWebСогласованиеСервер", ИсточникСоответствие,Отказ);

		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ОтветXDTO = Новый Структура("ID, Error");
			абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "Вызов обработчика согласования номенклатуры по вебсервису");
			ОтветXDTO.Error = ОписаниеОшибки;
		КонецПопытки;
		
		Если НЕ ЗначениеЗаполнено(ОтветXDTO.Error) Тогда
			
			абс_СтатусНоменклатуры = Перечисления.Абс_СтатусыНоменклатуры.СогласованиеНСИ;
			
			Сообщить("Номенклатура """ + Источник.Наименование + """ успешно согласована ");
		Иначе
			Сообщить(ОтветXDTO.Error, СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		Отказ = ЗначениеЗаполнено(ОтветXDTO.Error);	
		

	Возврат Истина;
КонецФункции
&НаСервере
// Вызов вебсервиса с сервера
Функция НоменклатураПередЗаписьюWebСогласованиеСервер(Источник, Отказ) Экспорт
	
	абс_ОбработчикWebService = абс_WebService.ПолучитьОбработчикWebService(); 
	

	//ЗаполнитьЗначенияСвойств(XDTOКонтрагентСоздание, Источник);
	
	// Вызов обработчика
	Попытка
		ОтветXDTO = абс_ОбработчикWebService.СогласоватьСозданиеНоменклатуры(Источник);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОтветXDTO = Новый Структура("ID, Error");
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки, "Вызов обработчика согласования создания номенклатуры по вебсервису");
		ОтветXDTO.Error = ОписаниеОшибки;
	КонецПопытки;
	
	
	Отказ = ЗначениеЗаполнено(ОтветXDTO.Error);	
	                                                                    
	Возврат Новый Структура("ID, Error", ОтветXDTO.ID, ОтветXDTO.Error);
	
КонецФункции	
	
	

//процедура ДЗО по мэпингу номенклатуры конец



//Процедуры и функции для webСервиса номенклатуры  конец

//=======================================================================================

 // Интеграция договоров с ИСУЗК
 Функция ПолучитьСписокФайловДоговор(Договор) Экспорт
	
	ТЗФайлов =Новый ТаблицаЗначений;
		
	ТЗФайлов.Колонки.Добавить("Наименование");
	ТЗФайлов.Колонки.Добавить("ДатаИзменения");
	ТЗФайлов.Колонки.Добавить("Размер");
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат ТЗФайлов;
	КонецЕсли;
	
	// Запрос связанных файлов
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.ИмяФайла КАК Наименование,
	|	ХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Файл)
	|	И ХранилищеДополнительнойИнформации.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Объект", Договор);
	
	ТЗФайлов = Запрос.Выполнить().Выгрузить();
		
	Возврат ТЗФайлов;
	
КонецФункции


Функция CreateUpdateReflectionZP(Data) Экспорт
	
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("Reflection", "Answer"));
	ОтветXDTO.Error = "";
	ОтветXDTO.Result = Ложь;
	
	Если Data.XML <> Неопределено И ЗначениеЗаполнено(Data.XML) Тогда
		
		ИмяФайлаДанных = КаталогВременныхФайлов() + Новый УникальныйИдентификатор() + ".xml";
		
		Попытка
			Data.XML.Записать(ИмяФайлаДанных); 
		Исключение
			ОтветXDTO.Error = ОписаниеОшибки();    
			Возврат  ОтветXDTO;
		КонецПопытки;
		
		мУниверсальныйОбменДаннымиXML = Обработки.УниверсальныйОбменДаннымиXML.Создать();
		мУниверсальныйОбменДаннымиXML.ИмяФайлаОбмена = ИмяФайлаДанных;
		//мУниверсальныйОбменДаннымиXML.ЗагружатьДанныеВРежимеОбмена = Истина;
		мУниверсальныйОбменДаннымиXML.ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты = Истина;
		мУниверсальныйОбменДаннымиXML.ОбъектыПоСсылкеЗагружатьБезПометкиУдаления = Истина;
		мУниверсальныйОбменДаннымиXML.ОптимизированнаяЗаписьОбъектов = Истина;
		мУниверсальныйОбменДаннымиXML.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
		мУниверсальныйОбменДаннымиXML.РежимОбмена = "Загрузка";
			
		Попытка
			мУниверсальныйОбменДаннымиXML.ВыполнитьЗагрузку();
		Исключение
			ОтветXDTO.Error = ОписаниеОшибки();
			Возврат  ОтветXDTO;
		КонецПопытки;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗАпрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеЗарплатыВРеглУчете.Ссылка
	|ИЗ
	|	Документ.ОтражениеЗарплатыВРеглУчете КАК ОтражениеЗарплатыВРеглУчете
	|ГДЕ
	|	ОтражениеЗарплатыВРеглУчете.Дата = &Дата
	|	И ОтражениеЗарплатыВРеглУчете.Номер = &Номер";
	
	ЗАпрос.УстановитьПараметр("Дата",  Data.Date);
	Запрос.УстановитьПараметр("Номер", Data.Number);
	
	ВЫборка = Запрос.Выполнить().Выбрать();
	
	Если ВЫборка.Следующий() Тогда
		
		ДокументОтражение = ВЫборка.Ссылка;
		
	КонецЕсли;
	
	//ДокументОтражение = Документы.ОтражениеЗарплатыВРеглУчете.НайтиПоНомеру(Data.Number, Data.Date);
	
	Если ЗначениеЗаполнено(ДокументОтражение) Тогда
		
		ДокОбъект = ДокументОтражение.ПолучитьОбъект();
		ДокОбъект.абс_Статус = ОпределитьСтатусПоСтроке(Data.Status);
		ДокОбъект.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(Data.User, Истина);
		Если ДокОбъект.абс_Статус <> Перечисления.абс_СтатусыРасчетныхДокументов.Рассчитан Тогда
			
			ДокОбъект.ОтражениеВУчете.Очистить();
			ДокОбъект.ОсновныеНачисления.Очистить();
			ДокОбъект.ДополнительныеНачисления.Очистить();
			ДокОбъект.ФизическиеЛица.Очистить();
					
		КонецЕсли;
		
		//ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Записать();
		
		Если  Data.StatusHistory <> Неопределено Тогда
			
			Для Каждого СтрокаТЗ Из Data.StatusHistory Цикл
				
				НоваяСтрока = РегистрыСведений.абс_ИсторияСтатусовРасчетныхДокументов.СоздатьМенеджерЗаписи();
				
				НоваяСтрока.Документ = ДокументОтражение;
				НоваяСтрока.Статус = ОпределитьСтатусПоСтроке(СтрокаТЗ.Status);
				НоваяСтрока.Период = СтрокаТЗ.Period;
				
				НоваяСтрока.Прочитать();
				
				Если Не НоваяСтрока.Выбран() Тогда
					НоваяСтрока.Документ 				= ДокументОтражение;
					НоваяСтрока.Период 					= СтрокаТЗ.Period;
					НоваяСтрока.Статус 					= ОпределитьСтатусПоСтроке(СтрокаТЗ.Status);
					НоваяСтрока.Пользователь 			= Справочники.Пользователи.НайтиПоНаименованию(СтрокаТЗ.User, Истина);
					НоваяСтрока.Комментарий 			= СтрокаТЗ.Comment;
					
					НоваяСтрока.Записать(Ложь);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОтветXDTO.Result = Истина;
		
	КонецЕсли; 
	
	Возврат ОтветXDTO;
	
КонецФункции

Функция ОпределитьСтатусПоСтроке(СтатусСтрока)
	
	Статус = Перечисления.абс_СтатусыРасчетныхДокументов.ПустаяСсылка();
	Если СтатусСтрока = "Подготовка" Тогда
		Статус = Перечисления.абс_СтатусыРасчетныхДокументов.Подготовка;
	ИначеЕсли СтатусСтрока = "Согласование" Тогда
		Статус = Перечисления.абс_СтатусыРасчетныхДокументов.Согласование;
	ИначеЕсли СтатусСтрока = "Получение документов" Тогда
		Статус = Перечисления.абс_СтатусыРасчетныхДокументов.ОбработкаПринятыхДокументов;
	ИначеЕсли СтатусСтрока = "Обработка бухгалтером" Тогда
		Статус = Перечисления.абс_СтатусыРасчетныхДокументов.ОбработкаБухгалтером;
	ИначеЕсли СтатусСтрока = "Рассчитан" Тогда
		Статус = Перечисления.абс_СтатусыРасчетныхДокументов.Рассчитан;
	ИначеЕсли СтатусСтрока = "Отказ" Тогда
		Статус = Перечисления.абс_СтатусыРасчетныхДокументов.Отказ;
	ИначеЕсли СтатусСтрока = "Отмена" Тогда
		Статус = Перечисления.абс_СтатусыРасчетныхДокументов.Отмена;
	ИначеЕсли СтатусСтрока = "Корректировка" Тогда
		Статус = Перечисления.абс_СтатусыРасчетныхДокументов.Корректировка;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции   

// Start КТТК Ермолов Е.Л.  17.03.2016 Получить состояние расчетов по документу
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьБаланс(OrderNumber) Экспорт
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-soft.ru/", "AnswerBalance"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ПОМЕСТИТЬ РТУ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Номер = &Номер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента.Номер КАК номерДоговора,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ.Номер КАК номерДокумента,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Контрагент.Код КАК Ко,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ.СуммаДокумента КАК СуммаДокумента,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код КАК кодВалюты,
		|	ВЫБОР
		|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код = ""643""
		|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток
		|		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток
		|	КОНЕЦ КАК Остаток,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ.Дата КАК датаДокумента,
		|	0 КАК DebtTTK,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом КАК ПоДокументамРасчетов
		|ИЗ
		|	РТУ КАК РТУ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки
		|		ПО РТУ.Ссылка = РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ";
	
	Запрос.УстановитьПараметр("Номер", OrderNumber);
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.НайтиПоКоду("000000001"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ОтветXDTO.Sum 	= ВыборкаДетальныеЗаписи.Остаток;
		//ОтветXDTO.Error = "Ок";
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Номер = &Номер");
		Запрос.УстановитьПараметр("Номер", OrderNumber);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
			ОтветXDTO.Sum 	= 0;
			//ОтветXDTO.Error = "Ок";
		Иначе 
			ОтветXDTO.Error = "Такого счета нет в 1с";
		КонецЕсли;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	

	Возврат ОтветXDTO;

КонецФункции // ПолучитьБаланс(Answer)()

Функция ПолучитьБалансПоДоговору(DogID, Dt) Экспорт
	
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.abs-soft.ru/", "AnswerBalance"));
	ОтветXDTO.Sum = 0;
	ОтветXDTO.Error = "";
	
	Если Не ЗначениеЗаполнено(DogID) Или Не ЗначениеЗаполнено(Dt) Тогда
		ОтветXDTO.Sum = 0;
		ОтветXDTO.Error = "Не указан один из обязательных параметров.";
		Возврат ОтветXDTO;
	КонецЕсли;
	
	СсылкаНаДоговор = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(СокрЛП(DogID));
	Если СсылкаНаДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		ОтветXDTO.Sum = 0;
		ОтветXDTO.Error = "Не найден договор контрагента с кодом: " + СокрЛП(DogID);
		Возврат ОтветXDTO;
	КонецЕсли;		
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Balance
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Dt, Счет В ИЕРАРХИИ (&Acc), , ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто2 = &DogID";
	
	Запрос.УстановитьПараметр("Dt", Dt);
	Запрос.УстановитьПараметр("Acc", СписокСчетов);
	Запрос.УстановитьПараметр("DogID", СсылкаНаДоговор);
	
	Выборка = Запрос.Выполнить();
	
	Если Выборка.Пустой() Тогда
		ОтветXDTO.Sum = 0;
		ОтветXDTO.Error = "Запрос не вернул ни одной строки по указанному коду договора.";
		Возврат ОтветXDTO;
	КонецЕсли;
	
	Результат = Выборка.Выбрать();
	Пока Результат.Следующий() Цикл
		ОтветXDTO.Sum = Число(Результат.Balance);
		ОтветXDTO.Error = "Ок";
	КонецЦикла;
	
	Возврат ОтветXDTO;

КонецФункции

&НаСервере
Функция ПолучитьПрокси(Счет) Экспорт
	Таймаут = 60;
//	URLСсылка = "http://kttk-1c-dev01.transtk.ru/Eisup_EE/ws/GetBalance.1cws?wsdl";
//	URLСсылка = "http://kttk-1c-dev01.transtk.ru/Eisup_EE/ws/Countragents.1cws?wsdl";
	URLСсылка = "https://isup-ttk.transtk.ru/1cworkdb/ws/Countragents.1cws?wsdl";
	//Пользователь = "Admin";
	//Пароль = "a";
	//Пользователь = "EISUP_PersonalData";
	//Пароль = "EISUP_PersonalData";
	Сообщить(_Пользователь);
	Сообщить(_ПарольПользователя);
	Пользователь = _Пользователь;
	Пароль = _ПарольПользователя;
	Пользователь = "ISUZK_PersonalData";
	Пароль = "ISUZK_PersonalData";
	WSОпр =  Новый WSОпределения(URLСсылка, Пользователь, Пароль,,Таймаут);
//    Прокси = Новый WSПрокси(WSОпр, "MutBalance", "GetBalance", "GetBalanceSoap", Таймаут);
    Прокси = Новый WSПрокси(WSОпр, "http://www.abs-soft.ru/", "Countragents", "CountragentsSoap", Таймаут);
	Прокси.Пользователь = Пользователь;
	Прокси.Пароль = Пароль;
	ОтветXDTO = Ложь;
	Попытка
		ОтветXDTO = Прокси.GetBalance(Счет);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		ОтветXDTO =  Новый Структура("Sum, Error", Ложь, СообщениеОбОшибке);
	КонецПопытки;
    Возврат ОтветXDTO;
	
КонецФункции // ПолучитьПрокси()
// Stop КТТК Ермолов Е.Л.  22.03.2016

Функция ОбновитьКонтактнуюИнформациюКонтрагента(ID, ContactInfo) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	       
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://transtk.ru", "Response"));
	ОтветXDTO.RC = 0;
	ОтветXDTO.Msg = "Ok";
	
	Если Не ЗначениеЗаполнено(ID) Тогда
		ОтветXDTO.RC = -1;
		ОтветXDTO.Msg = "Не указан обязательный параметр код контрагента в ЕИСУП.";
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ОтветXDTO;
	КонецЕсли;
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(ID));
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		ОтветXDTO.RC = -2;
		ОтветXDTO.Msg = "Не найден контрагент с кодом: " + СокрЛП(ID);
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ОтветXDTO;
	КонецЕсли;
	
	Страна = Справочники.КлассификаторСтранМира.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(Контрагент.абс_Страна) Тогда 
		Если Не Контрагент.НеЯвляетсяРезидентом Тогда
			Страна = Справочники.КлассификаторСтранМира.Россия;
		Иначе
			Страна = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(СокрЛП(ContactInfo.LegalAddress.Country));
		КонецЕсли;
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
		КонтрагентОбъект.абс_Страна = Страна;
		КонтрагентОбъект.Записать();		
	КонецЕсли;
	
	НаборКонтактнойИнформации = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборКонтактнойИнформации.Отбор.Объект.Установить(Контрагент);
	
	Если ContactInfo.LegalAddress <> Неопределено Тогда
		ЗаписьКИ_LegalAddress = НаборКонтактнойИнформации.Добавить();
		ЗаписьКИ_LegalAddress.Объект = Контрагент;
		ЗаписьКИ_LegalAddress.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ЗаписьКИ_LegalAddress.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;		
		ЗаписьКИ_LegalAddress.Поле1 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.LegalAddress.PostCode)), СокрЛП(ContactInfo.LegalAddress.PostCode), "");
		ЗаписьКИ_LegalAddress.Поле2 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.LegalAddress.Region)), СокрЛП(ContactInfo.LegalAddress.Region), "");
		ЗаписьКИ_LegalAddress.Поле4 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.LegalAddress.City)), СокрЛП(ContactInfo.LegalAddress.City), "");
		ЗаписьКИ_LegalAddress.Поле6 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.LegalAddress.Street)), СокрЛП(ContactInfo.LegalAddress.Street), "");
		ЗаписьКИ_LegalAddress.Поле7 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.LegalAddress.House)), СокрЛП(ContactInfo.LegalAddress.House), "");
		Если ЗначениеЗаполнено(ЗаписьКИ_LegalAddress.Поле7) Тогда
			ЗаписьКИ_LegalAddress.ТипДома = Перечисления.ТипыДомов.Дом;
		КонецЕсли;
		ЗаписьКИ_LegalAddress.Поле8 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.LegalAddress.Building)), СокрЛП(ContactInfo.LegalAddress.Building), "");
		Если ЗначениеЗаполнено(ЗаписьКИ_LegalAddress.Поле8) Тогда
			ЗаписьКИ_LegalAddress.ТипКорпуса = Перечисления.ТипыКорпусов.Корпус;
		КонецЕсли;
		ЗаписьКИ_LegalAddress.Поле9 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.LegalAddress.Room)), СокрЛП(ContactInfo.LegalAddress.Room), "");
		Если ЗначениеЗаполнено(ЗаписьКИ_LegalAddress.Поле9) Тогда
			ЗаписьКИ_LegalAddress.ТипКвартиры = Перечисления.ТипыКвартир.Офис;
		КонецЕсли;		
		ЗаписьКИ_LegalAddress.Представление = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(ЗаписьКИ_LegalAddress);
	КонецЕсли;
	
	Если ContactInfo.ActualAddress <> Неопределено Тогда
		ЗаписьКИ_ActualAddress = НаборКонтактнойИнформации.Добавить();
		ЗаписьКИ_ActualAddress.Объект = Контрагент;
		ЗаписьКИ_ActualAddress.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ЗаписьКИ_ActualAddress.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		ЗаписьКИ_ActualAddress.Поле1 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.ActualAddress.PostCode)), СокрЛП(ContactInfo.ActualAddress.PostCode), "");
		ЗаписьКИ_ActualAddress.Поле2 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.ActualAddress.Region)), СокрЛП(ContactInfo.ActualAddress.Region), "");
		ЗаписьКИ_ActualAddress.Поле4 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.ActualAddress.City)), СокрЛП(ContactInfo.ActualAddress.City), "");
		ЗаписьКИ_ActualAddress.Поле6 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.ActualAddress.Street)), СокрЛП(ContactInfo.ActualAddress.Street), "");
		ЗаписьКИ_ActualAddress.Поле7 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.ActualAddress.House)), СокрЛП(ContactInfo.ActualAddress.House), "");
		Если ЗначениеЗаполнено(ЗаписьКИ_ActualAddress.Поле7) Тогда
			ЗаписьКИ_ActualAddress.ТипДома = Перечисления.ТипыДомов.Дом;
		КонецЕсли;
		ЗаписьКИ_ActualAddress.Поле8 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.ActualAddress.Building)), СокрЛП(ContactInfo.ActualAddress.Building), "");
		Если ЗначениеЗаполнено(ЗаписьКИ_ActualAddress.Поле8) Тогда
			ЗаписьКИ_ActualAddress.ТипКорпуса = Перечисления.ТипыКорпусов.Корпус;
		КонецЕсли;
		ЗаписьКИ_ActualAddress.Поле9 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.ActualAddress.Room)), СокрЛП(ContactInfo.ActualAddress.Room), "");
		Если ЗначениеЗаполнено(ЗаписьКИ_ActualAddress.Поле9) Тогда
			ЗаписьКИ_ActualAddress.ТипКвартиры = Перечисления.ТипыКвартир.Офис;
		КонецЕсли;		
		ЗаписьКИ_ActualAddress.Представление = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(ЗаписьКИ_ActualAddress);
	КонецЕсли;
	
	Если ContactInfo.PostalAddress <> Неопределено Тогда
		ЗаписьКИ_PostalAddress = НаборКонтактнойИнформации.Добавить();
		ЗаписьКИ_PostalAddress.Объект = Контрагент;
		ЗаписьКИ_PostalAddress.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ЗаписьКИ_PostalAddress.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000033");
		ЗаписьКИ_PostalAddress.Поле1 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.PostalAddress.PostCode)), СокрЛП(ContactInfo.PostalAddress.PostCode), "");
		ЗаписьКИ_PostalAddress.Поле2 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.PostalAddress.Region)), СокрЛП(ContactInfo.PostalAddress.Region), "");
		ЗаписьКИ_PostalAddress.Поле4 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.PostalAddress.City)), СокрЛП(ContactInfo.PostalAddress.City), "");
		ЗаписьКИ_PostalAddress.Поле6 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.PostalAddress.Street)), СокрЛП(ContactInfo.PostalAddress.Street), "");
		ЗаписьКИ_PostalAddress.Поле7 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.PostalAddress.House)), СокрЛП(ContactInfo.PostalAddress.House), "");
		Если ЗначениеЗаполнено(ЗаписьКИ_PostalAddress.Поле7) Тогда
			ЗаписьКИ_PostalAddress.ТипДома = Перечисления.ТипыДомов.Дом;
		КонецЕсли;
		ЗаписьКИ_PostalAddress.Поле8 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.PostalAddress.Building)), СокрЛП(ContactInfo.PostalAddress.Building), "");
		Если ЗначениеЗаполнено(ЗаписьКИ_PostalAddress.Поле8) Тогда
			ЗаписьКИ_PostalAddress.ТипКорпуса = Перечисления.ТипыКорпусов.Корпус;
		КонецЕсли;
		ЗаписьКИ_PostalAddress.Поле9 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.PostalAddress.Room)), СокрЛП(ContactInfo.PostalAddress.Room), "");
		Если ЗначениеЗаполнено(ЗаписьКИ_PostalAddress.Поле9) Тогда
			ЗаписьКИ_PostalAddress.ТипКвартиры = Перечисления.ТипыКвартир.Офис;
		КонецЕсли;		
		ЗаписьКИ_PostalAddress.Представление = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(ЗаписьКИ_PostalAddress);
	КонецЕсли;
	
	Если ContactInfo.Phone <> Неопределено Тогда
		ЗаписьКИ_Phone = НаборКонтактнойИнформации.Добавить();
		ЗаписьКИ_Phone.Объект = Контрагент;
		ЗаписьКИ_Phone.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ЗаписьКИ_Phone.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ЗаписьКИ_Phone.Поле1 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.Phone.CountryCode)), СокрЛП(ContactInfo.Phone.CountryCode), "");
		ЗаписьКИ_Phone.Поле2 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.Phone.AreaCode)), СокрЛП(ContactInfo.Phone.AreaCode), "");
		ЗаписьКИ_Phone.Поле3 = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.Phone.Number)), СокрЛП(ContactInfo.Phone.Number), "");
		УправлениеКонтактнойИнформацией.СформироватьПредставлениеТелефона(ЗаписьКИ_Phone);
	КонецЕсли;
	
	Если ContactInfo.Email <> Неопределено Тогда
		ЗаписьКИ_Email = НаборКонтактнойИнформации.Добавить();
		ЗаписьКИ_Email.Объект = Контрагент;
		ЗаписьКИ_Email.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ЗаписьКИ_Email.Вид = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами;
		ЗаписьКИ_Email.Представление = ?(ЗначениеЗаполнено(СокрЛП(ContactInfo.Email.Email)), СокрЛП(ContactInfo.Email.Email), "");
	КонецЕсли;
	
	РезультатЗаписи = Истина;
	Попытка
		НаборКонтактнойИнформации.Записать();
	Исключение
		РезультатЗаписи = Ложь;
		ОтветXDTO.RC = -3;
		ОтветXDTO.Msg = "Ошибка записи контактной информации для контрагент с кодом " + СокрЛП(ID) + " по причине " + ОписаниеОшибки();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ОтветXDTO;		
	КонецПопытки;
	
	Если РезультатЗаписи Тогда
		Объект = РегистрыСведений.ttk_ИсторияИзмененияОбъектов.СоздатьМенеджерЗаписи();
		Объект.Объект = Контрагент;
		Объект.Период = ТекущаяДатаСеанса();
		Объект.Прочитать();
		Если Не Объект.Выбран() Тогда
			Объект.Объект = Контрагент;
			Объект.Период = ТекущаяДатаСеанса();
		Иначе 
			Объект.Объект = Контрагент;		
		КонецЕсли;
		Объект.Записать();
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОтветXDTO;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////////	
// ФУНКЦИИ ВЕБСЕРВИСА abs_XMLExchange

Функция abs_XMLExchange_PutData(XMLData) Экспорт
	
	ПутьКФайлуВыгрузки = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлуВыгрузки);
	ЗаписьXML.ЗаписатьБезОбработки(XMLData.XMLString);	
	ЗаписьXML.Закрыть();
	
	ОбработкаЗагрузкиДанных = Обработки.абс_УниверсальныйОбменДаннымиXML_ИСУЗК.Создать();
	
	ОбработкаЗагрузкиДанных.ИмяФайлаОбмена = ПутьКФайлуВыгрузки;
	ОбработкаЗагрузкиДанных.ФлагРежимОтладки = Ложь;
	
	РезультирующаяСтрокаСИнформациейОбОшибке = "";
	
	ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("abs_XMLData", "Answer"));
	ОтветXDTO.Result 			= abs_XMLExchange_ВыполнитьЗагрузку(ОбработкаЗагрузкиДанных, РезультирующаяСтрокаСИнформациейОбОшибке);
	ОтветXDTO.Error 			= РезультирующаяСтрокаСИнформациейОбОшибке;
	ОтветXDTO.AnswerXMLString 	= "";
	
	Возврат ОтветXDTO;
	
КонецФункции

Функция abs_XMLExchange_ВыполнитьЗагрузку(ОбработкаЗагрузки, РезультирующаяСтрокаСИнформациейОбОшибке = "")
	
	РаботаВозможна = ОбработкаЗагрузки.ВыполнитьДействияПередЧтениемДанных();
	
	Если НЕ РаботаВозможна Тогда
		РезультирующаяСтрокаСИнформациейОбОшибке = "Ошибка перед чтением данных.";
		Возврат Ложь;
	КонецЕсли;	
	
	ОбработкаЗагрузки.ФайлОбмена = Новый ЧтениеXML;
	ОбработкаЗагрузки.ФайлОбмена.ОткрытьФайл(ОбработкаЗагрузки.ИмяФайлаОбмена);
	
	ОбработкаЗагрузки.ПроизвестиЧтениеДанных(РезультирующаяСтрокаСИнформациейОбОшибке);
	ОбработкаЗагрузки.ВыполнитьДействияПослеЗавершенияЧтенияДанных(); 
	
	Возврат НЕ ОбработкаЗагрузки.ФлагОшибки;
	
КонецФункции


// Получение параметров из настроек	
абс_ОбработчикWebServiceПараметры = Константы.абс_ОбработчикWebService.Получить().Получить();
Если НЕ ТипЗнч(абс_ОбработчикWebServiceПараметры) = Тип("Соответствие") Тогда
	абс_ОбработчикWebServiceПараметры = Новый Соответствие;
КонецЕсли;
Если ЗначениеЗаполнено(абс_ОбработчикWebServiceПараметры) Тогда
	_Сервер 			= абс_ОбработчикWebServiceПараметры["_Сервер"]; 	
	_БазаДанных 		= абс_ОбработчикWebServiceПараметры["_БазаДанных"]; 
	_Пользователь 		= абс_ОбработчикWebServiceПараметры["_Пользователь"]; 
	_ПарольПользователя = абс_ОбработчикWebServiceПараметры["_ПарольПользователя"]; 
	_https				= абс_ОбработчикWebServiceПараметры["_https"]; 
	Попытка
		_БазаДанныхНоменклатура 		= абс_ОбработчикWebServiceПараметры["_БазаДанныхНоменклатура"]; 
	Исключение
	КонецПопытки;
	
КонецЕсли;

_Сертификат = 
"TTK root
|========
| 
|MD5 Fingerprint=DA:6A:2B:94:81:DA:35:F3:22:BE:8A:02:9A:88:9E:E5
|-----BEGIN CERTIFICATE-----
|MIIFbDCCA1SgAwIBAgIQd1chbAW6I75K2TysNeC/CTANBgkqhkiG9w0BAQUFADA1
|MTMwMQYDVQQDEypKU0MgVHJhbnNUZWxlQ29tIENvbXBhbnkgQ29ycG9yYXRlIFJv
|b3QgQ0EwIBcNMDYwODE2MDgyMDQzWhgPMjA1MTA4MTUwNDM4NDNaMDUxMzAxBgNV
|BAMTKkpTQyBUcmFuc1RlbGVDb20gQ29tcGFueSBDb3Jwb3JhdGUgUm9vdCBDQTCC
|AiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMcPjFIiRhZ5bu7rYIWDpsam
|9mM3VfS6e6LOqQiLFZRkAprWtpIKkoOjJJ99oLDHMS9gHlM86+coIGeI5GYKQCx1
|s+/2r8wW5bu/R7cbweoLuvqcMu1Cp/qtiPwKye/4kZ0j6lQkIvufSh9IeTbOGP7G
|OktDRJlpie06tcAR/WwUz8HgU1eUFIlvXnEouAzGIGmiWAG/VdvhPDnrSgNNbuMV
|z/OQ2eP5PguMDe8NP8RmIKNS1cjzMVOLwjjLGdPExOXrzZOJApPp/jiJ/YI5b3ht
|m864fWrkLIGR+3WZVyVeazIiaA8pUbgCVs3SfuyxzZE6+0fNkrpOU2xLA1+l/Ade
|EDzGEpJEnQl23JoI/4HMjm1RNZfP4pH8Mtvx8FEgSbSUmlyIhLgz56iRmAJTGCER
|lec0Bmh7QONubwZOqSq2LptTFvKNJZSa3hPR4fFg44twbqB3Ryi1tEp5IKF57ig/
|6oJft+6dr3J5GRcVrXzIZ0vOYKh+LGjpGaIUREJtWlyuui+jtyItMs8FNTmzYcL/
|/5wzMrL7WsIJpw9NqQm+hl6h3VAkh9rhMHtdmKM4Jgg4IZa83weHg7kcEU+fxwnH
|5yhuMr7qexthX/+4wKWGC7SOvqbuqmFWLgY0VPlyzq6K7qXNPrf25IxhkbnIBUAM
|SliP2r3DmOjGoXeRozhTAgMBAAGjdjB0MAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8E
|BTADAQH/MB0GA1UdDgQWBBQNvnf7/Gj3jzvXO9hCAojaq+Op9zAQBgkrBgEEAYI3
|FQEEAwIBATAjBgkrBgEEAYI3FQIEFgQUdJBpX3fsXibRuCGsIWQCBuJ9py0wDQYJ
|KoZIhvcNAQEFBQADggIBAJjMd4PWWSayDBiLhgTXfqFkN+IfuwzgXUcotLqBmsda
|E6GsYPQD/3zm+74wOKXBnC15qehL2+LEIzuC1pnSf3G+QYxJ7CiO297a5q2aS4z0
|A3VH4N+wcoMqjIBl/zSiSdPAOGLSqlXf0XtjMexROWqHjfCjCkQbwToXyTyxVAKr
|jyx1kcfweu20sLTVQIGi9fTHiYzd0pP7kSx85iN8KgejHwH3FdF0i3AWE9DYhxvj
|ulOxTp9OyBdGICebZ+RdOatpTFc856ydwkeYTv6uopJzZlpYtB7VHBX2zM5yLCOR
|08vN1NZLCTrq60GG9AxN5TpYAOWO/GgQxp558xHYjZHzuvuRxQJNTxH2VwUsvnks
|MNSNbLfeWsbovFgGvS0NOPWTaR3x6xiFlVcN4GtadFhpd5YMsUGMPI5yxmUtd1hF
|CP/kGAAlUXllE1gr81cGhI3fqR8WPvhFvK6vSjNA2uB1od9t2JyIfaoEFmEoPesb
|wca6xVrR21XB757eRCOoc6VKhXrXZUlPzEa6+jQZLjppalxn0tdJ3HoTeqgJ8oPd
|7A7EzGN6BmSdqEaL/3gl5MgrZp3MObzzMM2P7daF3yRV0QwUodC3kWwyNhIt3rQf
|PXA5VcM1+jl+ZT9YYKxFKB+L+h27JyTOvAqDzMjvzO1yviSbeO/ToZCShH/bvkVD
|-----END CERTIFICATE-----
|
|TTK issuing
|===========
|
|MD5 Fingerprint=03:8E:8F:89:94:34:71:C2:79:8E:3F:9C:E5:53:C3:4E
|-----BEGIN CERTIFICATE-----
|MIIIZjCCBk6gAwIBAgIKYUUCoAABAAAABTANBgkqhkiG9w0BAQUFADA1MTMwMQYD
|VQQDEypKU0MgVHJhbnNUZWxlQ29tIENvbXBhbnkgQ29ycG9yYXRlIFJvb3QgQ0Ew
|HhcNMTEwODE1MDUwODUzWhcNMzEwODE1MDUxODUzWjBrMRIwEAYKCZImiZPyLGQB
|GRYCcnUxFzAVBgoJkiaJk/IsZAEZFgd0cmFuc3RrMTwwOgYDVQQDEzNKU0MgVHJh
|bnNUZWxlQ29tIENvbXBhbnkgSGVhZHF1YXJ0ZXJzIEVudGVycHJpc2UgQ0EwggIi
|MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC0Et4684bO3iO7ORF53NdT0M+v
|MaynPHn24Rk3NliyX0cRrEQ4Zgy4Q4HYM0tXrNLfCUgZn2gRS4Vg+daKXeuvmbXj
|pa26y6YPlj1hp6FkP8ABYspwdUQGUI0sz5L1vLC7h9A6a/YZBniOqdAT9tUBo8Om
|kt2+pfmBaANkKRRVQJqtVifebOlYtcPWucSQHwLxqIrdLf0KDKLTGz6k8+MN5pd5
|PYLd3cf05R4srwMrhMfgcthsk1xIpPOscK9Z9YdV2GKoBYQpDZaem+MPhVA8CTxj
|WnbqqZp0hTwg2GGVTorFZu8Wm3UTFy3AQeNXoir06X5hzYIrnMUVeCUtg3M7O3ry
|DOzBkDQruZ3jysTxq3+7xY6bQPWklQgbqk4NtigY1tZm0w3yMUwi4EJP0a8ZkxGV
|iiHfUWQCDZWOXTVyA2l+VTkF6FdmeUiuA+roNbSK7XWNCI964qn8v8zfo25l1scE
|Wr+89A9B2KU+FTZWe8FTl7XUUp+XXJfj8cLeIFud8BvhxBivqf74TuaLl1Eqs96Y
|Q4NE8wxFoIiQ2Lc3tCjSsiZihrxaJtSxDwthf/I+JJEvWFVckeYMZZ4iwwcFBwP2
|gTRQh/DhdjqDiAB2CPC+TCZaMd+bdJfZXGZXO9cf7AIrBmXPOJhmob/W8WEdcKbN
|VKFwPudICGsCKX/K2wIDAQABo4IDQDCCAzwwDwYDVR0TAQH/BAUwAwEB/zAdBgNV
|HQ4EFgQUoygbKHbBJyVzTC2b/xmcTGJJShAwCwYDVR0PBAQDAgGGMBAGCSsGAQQB
|gjcVAQQDAgECMCMGCSsGAQQBgjcVAgQWBBTRAZTqifqqknS6yTSXgkJfSg3YojAZ
|BgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQNvnf7/Gj3jzvX
|O9hCAojaq+Op9zCBwgYDVR0fBIG6MIG3MIG0oIGxoIGuhlJmaWxlOi8vXFx0cmFu
|c3RrLnJ1XENlcnRFbnJvbGxcUm9vdFxKU0MgVHJhbnNUZWxlQ29tIENvbXBhbnkg
|Q29ycG9yYXRlIFJvb3QgQ0EuY3JshlhodHRwOi8vZW50LWNhLnRyYW5zdGsucnUv
|cm9vdGNhL0pTQyUyMFRyYW5zVGVsZUNvbSUyMENvbXBhbnklMjBDb3Jwb3JhdGUl
|MjBSb290JTIwQ0EuY3JsMIIBwwYIKwYBBQUHAQEEggG1MIIBsTBpBggrBgEFBQcw
|AoZdZmlsZTovL1xcdHJhbnN0ay5ydVxDZXJ0RW5yb2xsXFJvb3RcUk9PVC1DQV9K
|U0MgVHJhbnNUZWxlQ29tIENvbXBhbnkgQ29ycG9yYXRlIFJvb3QgQ0EoMSkuY3J0
|MG8GCCsGAQUFBzAChmNodHRwOi8vZW50LWNhLnRyYW5zdGsucnUvcm9vdGNhL1JP
|T1QtQ0FfSlNDJTIwVHJhbnNUZWxlQ29tJTIwQ29tcGFueSUyMENvcnBvcmF0ZSUy
|MFJvb3QlMjBDQSgxKS5jcnQwgdIGCCsGAQUFBzAChoHFbGRhcDovLy9DTj1KU0Ml
|MjBUcmFuc1RlbGVDb20lMjBDb21wYW55JTIwQ29ycG9yYXRlJTIwUm9vdCUyMENB
|LENOPUFJQSxDTj1QdWJsaWMlMjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2aWNlcyxD
|Tj1Db25maWd1cmF0aW9uLERDPXRyYW5zdGssREM9cnU/Y0FDZXJ0aWZpY2F0ZT9i
|YXNlP29iamVjdENsYXNzPWNlcnRpZmljYXRpb25BdXRob3JpdHkwDQYJKoZIhvcN
|AQEFBQADggIBADfHBUMfWOmUZCjMK32UqKH+8IxH/pWX4+dmO+5I0KmK6CmO7xXJ
|DFl422Ci+/2wOpDFEIztitnrvl5vENnyAzr6fDZOPujg66ZFraMPNvdOdlMAYV7C
|a6bAy1GgLj4qqSJlehTJwdenByaCuPOsLxItpg0VTSAoQ33FxHORd1oyYIVr9CLu
|WzvGMAsKnLnOZJHumTjG+Fqy2mOTmTfQmVG/heuOldOTS9SMdwTvp0W3VsGrX5JP
|iOgS4GFm6aiod2XFRKkVVqK2ZbzCubdRlLZNAUv3AaW1MTb+T3TB6XBKtALgy+6g
|/tLK7wwaMeFxJ3/oR985PplCRAOki5nlxvXu11+C+TK57Y/P2sJSOg8m1i6owt/8
|gfatMPqk5Yj1xAvH9TxnyJr0mi4X51COidgmj5sZnldyv8x8+rBOpTuYHr7OH6XJ
|LPNeORXukFl0EXEkeoPLpHuvB9WgsK+wARajTMxXnCrY9FbK3UNfQBy2ZnaBCbWu
|KmRVZUMtHlfZ4Lql4hswOTjiN04FF2gR18J6rZgs3HUyYgC2S9ZUfWsWyX5l10Jp
|hA8zuq9LHrmpZE/Zqb6Bpcq6ZhbXZX0/Oe/rGCicqkkOKTopwMr8Y8A7JdPlOt53
|Ork62P/M/YIncbM9ltdJKM6af5q0jjiaYsAn/KQBxX7cxv/x/+eMLqrC
|-----END CERTIFICATE-----
|
|TTK isup-ttk
|============
|
|MD5 Fingerprint=D3:2D:1D:15:53:BD:D1:1F:B6:22:2B:7F:C5:1B:30:1F 
|-----BEGIN CERTIFICATE-----
|MIIIgTCCBmmgAwIBAgIKRTMuJwACAAAGLTANBgkqhkiG9w0BAQUFADBrMRIwEAYK
|CZImiZPyLGQBGRYCcnUxFzAVBgoJkiaJk/IsZAEZFgd0cmFuc3RrMTwwOgYDVQQD
|EzNKU0MgVHJhbnNUZWxlQ29tIENvbXBhbnkgSGVhZHF1YXJ0ZXJzIEVudGVycHJp
|c2UgQ0EwHhcNMTEwOTIyMTUyMTU0WhcNMTMwOTIxMTUyMTU0WjB9MQswCQYDVQQG
|EwJSVTEPMA0GA1UECBMGTW9zY293MQ8wDQYDVQQHEwZNb3Njb3cxITAfBgNVBAoT
|GEpTQyBUcmFuc1RlbGVDb20gQ29tcGFueTELMAkGA1UECxMCSVQxHDAaBgNVBAMT
|E2lzdXAtdHRrLnRyYW5zdGsucnUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
|AoIBAQDcUmDDe/rGIgkif0eKpcTzw7cBr9KO90+OtyzKL2rxlfnkuvPLkm3oZmD0
|A2BBCV5z6QhJrEC8/+kNrjsn8iYLFil1+DohAOHGSC1GZejay3MqbfRtjZfnGaIi
|bQttd6Wsaoc2qmel41Yaj3NKiR1jPUoJvE7cTdd7VDeGxHbwJzUNVrfpOZqRmp8a
|q0+CdW+p7EKpopLO6+rLBXU0BheT91CnSdGNMnqzajdCVz8/rKDSNzPySvfZf9i/
|04kzIf8WXqZTlm9a40893iMJHclK3Ttb6e881KmprcVdDS7fm6FZh/exnQsnBxu6
|aZoxt0JbwyO4E/lmfI6oTrQCApiJAgMBAAGjggQTMIIEDzALBgNVHQ8EBAMCBaAw
|EwYDVR0lBAwwCgYIKwYBBQUHAwEweAYJKoZIhvcNAQkPBGswaTAOBggqhkiG9w0D
|AgICAIAwDgYIKoZIhvcNAwQCAgCAMAsGCWCGSAFlAwQBKjALBglghkgBZQMEAS0w
|CwYJYIZIAWUDBAECMAsGCWCGSAFlAwQBBTAHBgUrDgMCBzAKBggqhkiG9w0DBzAd
|BgNVHQ4EFgQUuE4sexLYyrylBO5+d2D1U4JkW2EwHwYDVR0jBBgwFoAUoygbKHbB
|JyVzTC2b/xmcTGJJShAwggFlBgNVHR8EggFcMIIBWDCCAVSgggFQoIIBTIaB4mxk
|YXA6Ly8vQ049SlNDJTIwVHJhbnNUZWxlQ29tJTIwQ29tcGFueSUyMEhlYWRxdWFy
|dGVycyUyMEVudGVycHJpc2UlMjBDQSxDTj1lbnQtY2EsQ049Q0RQLENOPVB1Ymxp
|YyUyMEtleSUyMFNlcnZpY2VzLENOPVNlcnZpY2VzLENOPUNvbmZpZ3VyYXRpb24s
|REM9dHJhbnN0ayxEQz1ydT9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0P2Jhc2U/
|b2JqZWN0Q2xhc3M9Y1JMRGlzdHJpYnV0aW9uUG9pbnSGZWh0dHA6Ly9lbnQtY2Eu
|dHJhbnN0ay5ydS9DZXJ0RW5yb2xsL0pTQyUyMFRyYW5zVGVsZUNvbSUyMENvbXBh
|bnklMjBIZWFkcXVhcnRlcnMlMjBFbnRlcnByaXNlJTIwQ0EuY3JsMIIBeQYIKwYB
|BQUHAQEEggFrMIIBZzCB2wYIKwYBBQUHMAKGgc5sZGFwOi8vL0NOPUpTQyUyMFRy
|YW5zVGVsZUNvbSUyMENvbXBhbnklMjBIZWFkcXVhcnRlcnMlMjBFbnRlcnByaXNl
|JTIwQ0EsQ049QUlBLENOPVB1YmxpYyUyMEtleSUyMFNlcnZpY2VzLENOPVNlcnZp
|Y2VzLENOPUNvbmZpZ3VyYXRpb24sREM9dHJhbnN0ayxEQz1ydT9jQUNlcnRpZmlj
|YXRlP2Jhc2U/b2JqZWN0Q2xhc3M9Y2VydGlmaWNhdGlvbkF1dGhvcml0eTCBhgYI
|KwYBBQUHMAKGemh0dHA6Ly9lbnQtY2EudHJhbnN0ay5ydS9DZXJ0RW5yb2xsL2Vu
|dC1jYS50cmFuc3RrLnJ1X0pTQyUyMFRyYW5zVGVsZUNvbSUyMENvbXBhbnklMjBI
|ZWFkcXVhcnRlcnMlMjBFbnRlcnByaXNlJTIwQ0EoMikuY3J0MCEGCSsGAQQBgjcU
|AgQUHhIAVwBlAGIAUwBlAHIAdgBlAHIwKAYDVR0RBCEwH4ITaXN1cC10dGsudHJh
|bnN0ay5ydYIIaXN1cC10dGswDQYJKoZIhvcNAQEFBQADggIBADLy7QQ1GpQPPhqh
|haZ9qRue+++UNJpnqTu3hR+g8WPLMR8OYpZxgR23T1zhpqZ5prUiIeXXE9LNcQ9P
|j54bGs4l/xeQgsK6gH54JqLNbG3SzyWkkq71DQIea7e0+Ahv93hb/KpOutfWa6B3
|A2b8bqnb7i5nNMSZoWc8eQtIYhsnyE9uJFqzw/DUqlAsN3lHb8PxDXcf0Bnje/+6
|34Y8cvbdfJ+KMj26V0Y29zv1HnF2Il92d8UsF+roPyxA1pVJ9ylYoyEPGdbqsFPe
|462mgQ9JCaMBzQXtQ5tGFG4e3v6bwUadgmfvr6vN8usZWU7B+5FntG8TgG27Gjy+
|4qVdm/E59fQRWo5R0G4/ipwMZXdYJGMrT7gOVDkb2b2JX1/2wqmd6/cPpNebqfDk
|VaNXyeXdhBJzS2D5X9o7f1dhyLHQu2mv+pr3N52sHG1Nnt86/1blWsWocp2cHkVU
|c91qbsx/n6a62StDXqqxPZ/SKBzywm1EviBwHNSiCcvQfd1ruP5DwE0sHkY4zkkE
|DZk6WTrrh/n9aC87TiJgnMQpcgoc/7wVwcX5Zbrp+3keL6/4GNlyr3hnaSvESa9G
|7CeYvAxjqLtzuhqgjSZXyLwwZP4Tg0RleSnTglsjDg9f1jtQSyp0xSR0Y8tEE9FM
|5DwO29XK/iNITaJlbda7HO5YiYi4
|-----END CERTIFICATE-----";

//_Сертификат = СтрЗаменить(_Сертификат, "¶", Символы.ПС);

Версия = СтрЗаменить(Метаданные(), "абс Обработчик WebService ", ""); 

//ИнициализацияWebService();