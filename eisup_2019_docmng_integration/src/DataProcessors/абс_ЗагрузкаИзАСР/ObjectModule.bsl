перем ДанныеТекущейЗагрузки Экспорт;
перем СтруктураПодключения Экспорт;
Процедура УстановитьНастройки(СтруктураНастроек = Неопределено) Экспорт
	
	Если Не СтруктураНастроек = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек, 
		"Provider, PersistSecurityInfo, Password, UserID, InitialCatalog, DataSource");
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.Provider 			= "kttk-1c-db";
	ЭтотОбъект.DataSource 			= "billing_old";
	ЭтотОбъект.UserID 				= "1cbilling";
	ЭтотОбъект.Password 			= "jVxBPBZ2";
	ЭтотОбъект.InitialCatalog 		= "";
	ЭтотОбъект.PersistSecurityInfo 	= Истина;
	
КонецПроцедуры

Функция ВыполнитьПодключениеКSQL(Настройка) Экспорт
	
	//ConnectionString = 	"Provider="+СокрЛП(Настройка.Provider)+
	//					";Persist Security Info="+Формат(Настройка.PersistSecurityInfo, "БЛ=false; БИ=true")+
	//					";Password=" + СокрЛП(Настройка.Password) + 
	//					";User ID=" + СокрЛП(Настройка.UserID) + 
	//					";Initial Catalog=" + СокрЛП(Настройка.InitialCatalog) + 
	//					";Data Source=" + СокрЛП(Настройка.DataSource) + 
	//					"";
	
	//Соединение = Новый COMОбъект("ADODB.Connection"); 
	//Соединение.ConnectionString = ConnectionString;
	//Соединение.CommandTimeout = 2700; //--секунды
	//Попытка
	//	Соединение.Open();
	//Исключение
	//	Сообщить("Невозможно установить соединение с базой данных. " + ОписаниеОшибки()); 
	//	Возврат Ложь;
	//КонецПопытки;
	Попытка
		ConnectionString="DRIVER={SQL Server};SERVER="+СокрЛП(Настройка.Provider)+";UID="+СокрЛП(Настройка.UserID)+";PWD="+СокрЛП(Настройка.Password)+";DATABASE="+СокрЛП(Настройка.DataSource)+";";
		Соединение=Новый COMОбъект("ADODB.Connection");
		Соединение.Open(СокрЛП(ConnectionString));
		//Сообщить("Подключение к базе "+ СокрЛП(Настройка.DataSource)+ " успешно выполнен! ");
	Исключение
		Сообщить(ОписаниеОшибки());
		Соединение = 0;
	КонецПопытки; 
	
	
	
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузиьДанныеSQL(Сессия) Экспорт
	//Дата1 = Формат(НачалоМесяца(КонПериода),"ДФ=yyyyMMdd");
	//Дата2 = Формат(КонецМесяца(КонПериода),"ДФ=yyyyMMdd");
	//Дата1="19990101";
	//Дата2="20120101";
	//top 22 
	//ТекстЗапроса =
	//"SELECT  top 225 
	//|TTLEDGERJOURNALTRANSBILLING.DELIVERYDATE,
	//|TTLEDGERJOURNALTRANSBILLING.FACTUREEXTERNALID, 
	//|TTLEDGERJOURNALTRANSBILLING.INN, 
	//|TTLEDGERJOURNALTRANSBILLING.KPP,
	//|TTLEDGERJOURNALTRANSBILLING.CUSTNAME,
	//|TTLEDGERJOURNALTRANSBILLING.CUSTADDRESS,
	//|TTLEDGERJOURNALTRANSBILLING.INCLTAX, 
	//|TTLEDGERJOURNALTRANSBILLING.CURRENCYCODE,
	//|TTLEDGERJOURNALTRANSBILLING.BILLINGGLCODE,
	//|TTLEDGERJOURNALTRANSBILLING.STRINGNAME, 
	//|TTLEDGERJOURNALTRANSBILLING.SESSIONID,
	//|TTLEDGERJOURNALTRANSBILLING.QTY, 
	//|TTLEDGERJOURNALTRANSBILLING.PRICE,
	//|TTLEDGERJOURNALTRANSBILLING.SESSIONID,
	//|TTLEDGERJOURNALTRANSBILLING.AMOUNT, 
	//|TTLEDGERJOURNALTRANSBILLING.TAXGROUP,
	//|TTLEDGERJOURNALTRANSBILLING.LINEID
	//|FROM   TTLEDGERJOURNALTRANSBILLING WHERE  TTLEDGERJOURNALTRANSBILLING.SESSIONID = "+Сессия;
	////|FROM   TTLEDGERJOURNALTRANSBILLING WHERE  TTLEDGERJOURNALTRANSBILLING.DELIVERYDATE >= '"+Дата1+"' AND TTLEDGERJOURNALTRANSBILLING.DELIVERYDATE <= '"+ Дата2 +"'";
	//
	ТекстЗапроса =
	"SELECT top 800
	|TTLEDGERJOURNALTRANSBILLING.JOURNALID,
	|TTLEDGERJOURNALTRANSBILLING.LINEID,
	|TTLEDGERJOURNALTRANSBILLING.TRANSDATE,
	|TTLEDGERJOURNALTRANSBILLING.SESSIONID,
	|TTLEDGERJOURNALTRANSBILLING.SESSIONISOK,
	|TTLEDGERJOURNALTRANSBILLING.SESSIONERRORLOG,
	|TTLEDGERJOURNALTRANSBILLING.ITEMID,
	|TTLEDGERJOURNALTRANSBILLING.INN,
	|TTLEDGERJOURNALTRANSBILLING.KPP,
	|TTLEDGERJOURNALTRANSBILLING.CUSTADDRESS,
	|TTLEDGERJOURNALTRANSBILLING.CUSTNAME,
	|TTLEDGERJOURNALTRANSBILLING.FACTURENUM,
	|TTLEDGERJOURNALTRANSBILLING.EXECUTIONPERIOD,
	|TTLEDGERJOURNALTRANSBILLING.CURRENCYCODE,
	|TTLEDGERJOURNALTRANSBILLING.TAXGROUP,
	|TTLEDGERJOURNALTRANSBILLING.DELIVERYDATE,
	|TTLEDGERJOURNALTRANSBILLING.EXTERNALLINEID,
	|TTLEDGERJOURNALTRANSBILLING.DATAPLATEJKI,
	|TTLEDGERJOURNALTRANSBILLING.NOMERPLATEJKI,
	|TTLEDGERJOURNALTRANSBILLING.SUMMABEZNDS,
	|TTLEDGERJOURNALTRANSBILLING.SUMMANDS,
	|TTLEDGERJOURNALTRANSBILLING.DATADOGOVORA,
	|TTLEDGERJOURNALTRANSBILLING.TIPKONTRAGENTA,
	|TTLEDGERJOURNALTRANSBILLING.NOMERDOGOVORA,
	|TTLEDGERJOURNALTRANSBILLING.KURATOR,
	|TTLEDGERJOURNALTRANSBILLING.SUMMABEZNDS_1,
	|TTLEDGERJOURNALTRANSBILLING.SUMMANDS_1,
	|TTLEDGERJOURNALTRANSBILLING.FULLCUSTNAME,
	//АБС ВСТАВКА №45453 НАЧАЛО «4 августа 2014 г.», Пополитов
 	|TTLEDGERJOURNALTRANSBILLING.ElDoc,
 	//\\АБС ВСТАВКА №45453 КОНЕЦ	
	|TTLEDGERJOURNALTRANSBILLING.CUSTNAME_1,
	|TTLEDGERJOURNALTRANSBILLING.NOMERDOGOVORA_1
	|FROM   TTLEDGERJOURNALTRANSBILLING WHERE  TTLEDGERJOURNALTRANSBILLING.SESSIONID = "+Сессия;

	Попытка
		ЭтотОбъект.ДанныеБиллинга.Загрузить(абс_СерверныеФункции.ЗапросВТаблицуSQL(ТекстЗапроса,СтруктураПодключения));
		Возврат Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат ЛОЖЬ;
	КонецПопытки;
	
	
	
КонецФункции

Функция ЗагрузиьДанныеСессииSQL() Экспорт
	
	ТекстЗапроса =
	"SELECT     TTLEDGERJOURNALTABLEBILLING.JOURNALID,
	|TTLEDGERJOURNALTABLEBILLING.TXT,
	|TTLEDGERJOURNALTABLEBILLING.SESSIONID,
	|TTLEDGERJOURNALTABLEBILLING.TRANSDATE
	|FROM         TTLEDGERJOURNALTABLEBILLING";
	
	Попытка
		ЭтотОбъект.ТЧСессии.Загрузить(абс_СерверныеФункции.ЗапросВТаблицуSQL(ТекстЗапроса,СтруктураПодключения));
		Возврат Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат ЛОЖЬ;
	КонецПопытки;
	
	
КонецФункции

Функция ОбработатьДанныеЗагруженныеИзБиллинга()Экспорт
	КолСтрок = ДанныеБиллинга.Количество();
	Счет = 0;
	Для каждого Строка Из ДанныеБиллинга Цикл
		Счет = Счет+1;
		ОбработкаПрерыванияПользователя();
		Состояние("Обрабатывается "+Счет+" из "+КолСтрок);

		//Поиск счета на оплату по FACTUREEXTERNALID
		СчетНаОплату = НайтиСчетНаОплату(СокрЛП(Строка.FACTURENUM));
		Строка.СчетНаОплату = СчетНаОплату;
		
		
		//Поиск контрагента по ИНН и КПП
		СтруктураИмен = Новый Структура("Наименование,НаименованиеПолное");
		СтруктураИмен.Вставить("Наименование",СокрЛп(Строка.CustName));
		СтруктураИмен.Вставить("НаименованиеПолное",СокрЛп(Строка.FULLCUSTNAME));
		Контрагент = НайтиКонтрагентаВБазе(СокрЛп(Строка.INN), СокрЛп(Строка.KPP), СтруктураИмен);
		Если   ЗначениеЗаполнено(Контрагент) Тогда
			Строка.Контрагент = Контрагент;
		Иначе
			Строка.ПереченьОшибок = Строка.ПереченьОшибок + " С данными ИНН и КПП контрагент не найден!; ";
		КонецЕсли;
		
		////////////////
		//Поиск договора Контрагента
		ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если   ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(СокрЛП(Строка.NOMERDOGOVORA_1)) Тогда
			ДоговорКонтрагента = НайтиДоговорКонтрагента(Контрагент,СокрЛП(Строка.NOMERDOGOVORA_1));
		КонецЕсли;
		Строка.ДоговорКонтрагента = ДоговорКонтрагента; 
		Если НЕ ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
			Строка.ПереченьОшибок = Строка.ПереченьОшибок + " Договор контрагента не найден!; ";
		КонецЕсли;
		
		////////////////////////???????????????????????????
		
		//Поиск номенклатуры
		Номенклатура  = НайтиНоменклатуруПоБилингКоду(СокрЛп(Строка.ITEMID));
		Если   ЗначениеЗаполнено(Номенклатура) Тогда
			Строка.Номенклатура = Номенклатура;
		Иначе
			Строка.ПереченьОшибок = Строка.ПереченьОшибок + " С данным БиллингКодом номенклатура не найдена!; ";
			
		КонецЕсли;
		
		//Поиск валюты
		Валюта = НайтиВалюту(СокрЛп(Строка.CURRENCYCODE));
		Если   ЗначениеЗаполнено(Валюта) Тогда
			Строка.Валюта = Валюта;
		Иначе
			Строка.ПереченьОшибок = Строка.ПереченьОшибок + " Валюта не найдена!; ";
		КонецЕсли;
		
		//Ставка НДС
		СтавкаНДС = ПолучитьСтавкуНДС(СокрЛп(Строка.TAXGROUP));
		Если   ЗначениеЗаполнено(СтавкаНДС) Тогда
			Строка.СтавкаНДС = СтавкаНДС;
		Иначе
			Строка.ПереченьОшибок = Строка.ПереченьОшибок + " Ставка НДС не найдена!; ";
		КонецЕсли;
		
		//Количество
		Количество= ПолучитьСумму(Строка.QTY);
		Если  Количество = Неопределено Тогда
			Строка.ПереченьОшибок = Строка.ПереченьОшибок + " Количество неправильного формата; ";
		Иначе
			Строка.Количество = Количество;
		КонецЕсли; 
		
		//Дата документа.
		ДатаДокумента = ПреобразоватьКДате(СокрЛП(Строка.DELIVERYDATE));
		Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
			Строка.ПереченьОшибок = Строка.ПереченьОшибок + " Дата неправильного формата; ";
		Иначе
			Строка.ДатаДокумента =  ДатаДокумента;
		КонецЕсли;
		
		//Сумма
		Сумма= ПолучитьСумму(СокрЛП(Строка.AMOUNT));
		Если  Сумма = Неопределено Тогда
			Строка.ПереченьОшибок = Строка.ПереченьОшибок + " Сумма неправильного формата; ";
		Иначе
			Строка.Сумма = Сумма;
		КонецЕсли;
		
		//Цена
		Цена = ПолучитьСумму(Строка.PRICE);
		Если  Цена = Неопределено Тогда
			Строка.ПереченьОшибок = Строка.ПереченьОшибок + " Цена неправильного формата; ";
		Иначе
			Строка.Цена = Цена;
		КонецЕсли;
		
		Строка.УникальныйИдентификаторЗаписи = Строка.FACTURENUM +"_"+ Строка.LINEID;
		
		//Проверим возможность ввода документов по данной записи.
		Если Не ЗначениеЗаполнено(Строка.ПереченьОшибок) Тогда
			Строка.Загружать = Истина;
			Строка.ЗагрузкаРазрешена = Истина;
		КонецЕсли;
		
		//Если загружать возможно проверим требуется ли перезаписать данную запись
		ТребуетсяПерезаписать = Ложь;
		Если  Строка.ЗагрузкаРазрешена Тогда
			Если ЗначениеЗаполнено(Строка.СчетНаОплату) Тогда
				Если Строка.Контрагент<> СчетНаОплату.Контрагент ИЛИ
					Строка.ДоговорКонтрагента<> СчетНаОплату.ДоговорКонтрагента Тогда
					ТребуетсяПерезаписать =  Истина;
				КонецЕсли;
				
				НайтеннаяСтрокаУслуги = СчетНаОплату.Услуги.Найти(Строка.УникальныйИдентификаторЗаписи);
				Если  НайтеннаяСтрокаУслуги= Неопределено Тогда
					ТребуетсяПерезаписать =  Истина;
				Иначе 
					Если НайтеннаяСтрокаУслуги.Номенклатура<> Строка.Номенклатура
						ИЛИ НайтеннаяСтрокаУслуги.Количество<> Строка.Количество
						ИЛИ НайтеннаяСтрокаУслуги.Сумма<> Строка.Сумма Тогда
						ТребуетсяПерезаписать =  Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(Строка.СчетНаОплату) И ТребуетсяПерезаписать Тогда
				Строка.Загружать = Истина;
				Строка.Комментарий = "Строка изменена, рекоммендуется перезаписать документ: Счет на оплату";
				
			ИначеЕсли    ЗначениеЗаполнено(Строка.СчетНаОплату) И НЕ  ТребуетсяПерезаписать Тогда
				Строка.Загружать = Ложь;
				Строка.Комментарий = "Перезаписывать строку не требуется";
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецФункции

Функция НайтиДоговорКонтрагента(Контрагент,НомерДоговора)
	Запрос = НОвый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Владелец = &Владелец
	               |	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	               |	И ДоговорыКонтрагентов.Номер = &НомерДоговора";
	Запрос.УстановитьПараметр("Владелец",Контрагент);
	Запрос.УстановитьПараметр("НомерДоговора",НомерДоговора);
	Запрос.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество()>0 Тогда
		РезультатЗапроса.Следующий();
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПреобразоватьКДате(СтрокаДата)
	
	ПустаяДата=Дата('00010101');
	СтрокаДата = СокрЛП(Лев(СтрокаДата,11));
	День=Лев(СтрокаДата,2);
	Месяц=Сред(СтрокаДата,4,2);
	Год=Прав(СтрокаДата,4);
	СтрокаДата=""+Год + Месяц +  День;
	
	Попытка 
		ДатаДокумента=Дата(СтрокаДата);
		
	Исключение
		Возврат ПустаяДата;	
	КонецПопытки;
	
	Возврат  ДатаДокумента;
	
КонецФункции

Функция НайтиСчетНаОплату(FACTURENUM)
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.FACTUREEXTERNALID = &FACTUREEXTERNALID";
	Запрос.УстановитьПараметр("FACTUREEXTERNALID",FACTURENUM);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество()>0 Тогда
		РезультатЗапроса.Следующий();
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСумму(Сумма) Экспорт
	Если НЕ ЗначениеЗаполнено(Сумма) Тогда
		Возврат 0;
		
	КонецЕсли;
	Сумма=СтрЗаменить(Сумма," ","");
	Сумма=СтрЗаменить(Сумма,".",",");
	Попытка
		Сумма=Число(Сумма);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Возврат Сумма;
	
КонецФункции

Функция ПолучитьСтавкуНДС(Ставка)
	Если  Ставка="К18ПП" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли  Ставка="КНБН" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	Иначе 
		Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция НайтиКонтрагентаВБазе(ИНН, КПП, СтруктураИмени)
	
	Наименование = СтруктураИмени.Наименование;
	Если  ЗначениеЗаполнено(ИНН) и ЗначениеЗаполнено(ИНН) и  ИНН<>"-"  ТОгда
		//Ищем контрагента по ИНН и КПП
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		              |	Контрагенты.Ссылка
		              |ИЗ
		              |	Справочник.Контрагенты КАК Контрагенты
		              |ГДЕ
		              |	Контрагенты.ИНН = &ИНН
		              |	И Контрагенты.КПП = &КПП
		              |	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)";
		Запрос.УстановитьПараметр("ИНН",ИНН);
		Запрос.УстановитьПараметр("КПП",КПП);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Количество() > 0 Тогда
			//с даными ИНН и КПП контраент не найден, произведем поиск по наименованию
			Если РезультатЗапроса.Количество() = 1 Тогда 
				
				РезультатЗапроса.Следующий();
				Контрагент = РезультатЗапроса.Ссылка;
				Возврат Контрагент;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст ="ВЫБРАТЬ
				|	Контрагенты.Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &ИНН
				|	И Контрагенты.КПП = &КПП
				|	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)
				|	И Контрагенты.абс_НаименованиеБиллинг = &Наименование";
				Запрос.УстановитьПараметр("ИНН",ИНН);
				Запрос.УстановитьПараметр("КПП",КПП);
				Запрос.УстановитьПараметр("Наименование",СтруктураИмени.Наименование);
				
				РезультатЗапроса = Запрос.Выполнить().Выбрать();
				Если РезультатЗапроса.Следующий() Тогда
					Возврат РезультатЗапроса.Ссылка;
					
				КонецЕсли;
				//Ищем контрагента по ИНН и КПП +наименование биллинга
				//Сообщить("Контрагент "+Наименование+" имеет "+РезультатЗапроса.Количество()+" аналогов по ИНН "+ИНН+"и КПП "+КПП);			
			КонецЕсли;
		Иначе 
			
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	//В случае если онтрагент Нерезидент произведем поиск по наименованию
	Если Не ЗначениеЗаполнено("ИНН") или ИНН="-" Тогда
		Запрос=Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		              |	Контрагенты.Ссылка
		              |ИЗ
		              |	Справочник.Контрагенты КАК Контрагенты
		              |ГДЕ
		              |	Контрагенты.абс_НаименованиеБиллинг = &Наименование
		              |	И (Контрагенты.ИНН = """"
		              |			ИЛИ Контрагенты.ИНН = ""-"")
		              |	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)";
		Запрос.УстановитьПараметр("Наименование",СтруктураИмени.Наименование);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если  РезультатЗапроса.Количество()>0 Тогда
			РезультатЗапроса.Следующий();
			Контрагент = РезультатЗапроса.Ссылка;
			Возврат  Контрагент;
		Иначе
			Возврат 	Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция НайтиНоменклатуруПоБилингКоду(BILLINGGLCODE)
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.BILLINGGLCODE = &BILLINGGLCODE ";
	Запрос.УстановитьПараметр("BILLINGGLCODE",BILLINGGLCODE);
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество()>0 Тогда
		РезультатЗапроса.Следующий();
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка(); 
	КонецЕсли;
	
КонецФункции

Функция НайтиВалюту(КодВалюты)
	
	Если Найти(КодВалюты,"810")>0 Тогда
		Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП("643"));
	Иначе
		Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП(КодВалюты));

	КонецЕсли;	
	
	Возврат Валюта;
	
КонецФункции

Процедура НайтиДанные() Экспорт
	
	//СписокДанныхКонтрагента = "INN, KPP, CustName, CustAddress";
	//	
	//ТабКонтрагентов = ЭтотОбъект.ДанныеБиллинга.Выгрузить(, СписокДанныхКонтрагента);
	//
	//ТабКонтрагентов.Свернуть(СписокДанныхКонтрагента);
	//
	//ТаблицаКонтрагентов.Очистить();
	//
	//ТаблицаКонтрагентов.Загрузить(ТабКонтрагентов);
	//
	//Запрос = Новый Запрос;
	//
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//Запрос.УстановитьПараметр("ДанныеБиллинга", ТаблицаКонтрагентов.Выгрузить(,"НомерСтроки,INN,KPP"));
	//
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |    ДанныеБиллинга.НомерСтроки КАК НомерСтроки,
	//			   |	ДанныеБиллинга.INN КАК ИНН,
	//			   |	ДанныеБиллинга.KPP КАК КПП
	//			   |ПОМЕСТИТЬ ВТДанныеБиллинга
	//			   |ИЗ
	//			   |	&ДанныеБиллинга КАК ДанныеБиллинга
	//			   |;
	//			   |ВЫБРАТЬ
	//			   |	ДанныеБиллинга.НомерСтроки КАК НомерСтроки,
	//			   |	Контрагенты.Ссылка КАК Контрагент
	//			   |ИЗ
	//			   |	ВТДанныеБиллинга КАК ДанныеБиллинга
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	//			   |		ПО ДанныеБиллинга.ИНН = Контрагенты.ИНН
	//			   |			И ДанныеБиллинга.КПП = Контрагенты.КПП
	//			   |
	//			   |УПОРЯДОЧИТЬ ПО
	//			   |	НомерСтроки";
	//			   
	//ИдентифицированныеДанные = Запрос.Выполнить().Выгрузить();
	//
	//ТаблицаКонтрагентов.ЗагрузитьКолонку(ИдентифицированныеДанные.ВыгрузитьКолонку("Контрагент"), "Контрагент");
	//
	//// Проставим ключ для контрагентов в основную таблицу загрузки.
	//
	//Для Каждого СтрокаКонтрагентов Из ТаблицаКонтрагентов Цикл
	//	ОтборДанныхБиллинга = Новый Структура("INN,KPP");
	//	
	//	ЗаполнитьЗначенияСвойств(ОтборДанныхБиллинга, СтрокаКонтрагентов, "INN,KPP");
	//	
	//	СтрокиДанныхБиллинга = ДанныеБиллинга.НайтиСтроки(ОтборДанныхБиллинга);
	//	Для Каждого СтрокаДанныхБиллинга Из СтрокиДанныхБиллинга Цикл
	//		
	//		// Заплоним ключ для идентификации контрагентов в таблице данных биллинга.
	//		СтрокаДанныхБиллинга.КлючДляПоискаКонтрагентов 	= СтрокаКонтрагентов.НомерСтроки;
	//		
	//		СтрокаДанныхБиллинга.Контрагент 				= СтрокаКонтрагентов.Контрагент;
	//	КонецЦикла;
	//КонецЦикла;
	
	
КонецПроцедуры

Процедура УстановитьКонтрагентовПоКлючу() Экспорт
	//СтрокиКонтрагентов = ТаблицаКонтрагентов.НайтиСтроки(Новый Структура("СтрокаИзмененна", Истина));
	//
	//Для Каждого СтрокаКонтрагента Из СтрокиКонтрагентов Цикл
	//	СтрокиБиллингаПоКонтрагенту = ДанныеБиллинга.НайтиСтроки(Новый Структура("КлючДляПоискаКонтрагентов", СтрокаКонтрагента.НомерСтроки));
	//	
	//	Для Каждого СтрокаБиллингаПоКонтрагенту Из СтрокиБиллингаПоКонтрагенту Цикл
	//		// Установим контрагента в таблице биллинга
	//		
	//		СтрокаБиллингаПоКонтрагенту.Контрагент = СтрокаКонтрагента.Контрагент;
	//	КонецЦикла;
	//КонецЦикла;
	//
	
КонецПроцедуры

Процедура ЗаписатьДокументБиллинга() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументЗагрузкиБиллинга) Тогда
		ДокЗагрузки = Документы.абс_ЗагрузкаБиллинга.СоздатьДокумент();
		ДокЗагрузки.Дата = ТекущаяДата();
	Иначе
		ДокЗагрузки = ДокументЗагрузкиБиллинга.ПолучитьОбъект();
	КонецЕсли;
	
	Для Каждого СтрокаБиллинга из ДанныеБиллинга Цикл
		СтрокаЗагрузки = ДокЗагрузки.ДанныеБиллинга.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаЗагрузки, СтрокаБиллинга);
		
	КонецЦикла;
	
	ДокЗагрузки.Записать();
	
	ДокументЗагрузкиБиллинга = ДокЗагрузки.Ссылка;
	
КонецПроцедуры


Процедура СоздатьСчетНаОплату() Экспорт
	
	СозданныеДокументы.Очистить();
	
	СтруктураДокументов = Новый Структура("ДокументСчетНаОплату, ДокументРеализацияТиУ, ДокументСФ, Перезаписан");
	//Создадим документы Счет на оплату покупателя
	//По каждой уникальной строке ТЗ создаем свой счет на оплату.
	СтруктураПоиска = Новый Структура("FACTURENUM");
	ТЗБиллинга=ДанныеБиллинга.Выгрузить();
	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM");
	ТЗСчетовНаОплату.Свернуть("FACTURENUM");
	Для каждого СтрокаСчета Из ТЗСчетовНаОплату Цикл
		
		//Осуществим проверку, можно ли загружать данный счет -
		//проверка осуществляется по всем строкам счета если 
		//хотябы одна строка счета некорректна, весь счет не будет загружен
		
		СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		НайденныеСтроки = ТЗБиллинга.НайтиСтроки(СтруктураПоиска);
		Если  НайденныеСтроки.Количество() =0 Тогда
			//Фатальная ошибка...
			Сообщить("Ошибка!!! Строки с номером: "+СтруктураПоиска.FACTURENUM+" в ТЗ Биллинга не найдены!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		//Проверяем все найденные строки на возможность загрузки Счета на оплату.
		Отказ = Ложь;
		ОтказПоОшибке = Ложь;
		Для Каждого СтрокаБиллинга Из НайденныеСтроки Цикл
			Если НЕ СтрокаБиллинга.Загружать ИЛИ НЕ СтрокаБиллинга.ЗагрузкаРазрешена	Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			Продолжить;
		КонецЦикла;	
		
		Если Отказ Тогда
			Продолжить;
			//Счет на оплату не создаем.
		КонецЕсли;
		
		Если НЕ НайденныеСтроки[0].СчетНаОплату.Пустая() Тогда
			//Документ уже существует, перезапишем его.
			ДокументСчет = НайденныеСтроки[0].СчетНаОплату.ПолучитьОбъект();
			ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
			ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента; 
			ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
			ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
			ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
			ДокументСчет.Организация = Организация;
			ДокументСчет.УчитыватьНДС = Истина;
			ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
			Если НайденныеСтроки[0].INCLTAX = "0" Тогда
				СуммаВключаетНДС = Ложь;
			Иначе
				СуммаВключаетНДС = Истина;
			КонецЕсли;
			
			ДокументСчет.СуммаВключаетНДС = СуммаВключаетНДС;
			Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
				ДокументСчет.КурсВзаиморасчетов =1;
			Иначе
				ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			ДокументСчет.КратностьВзаиморасчетов = 1;
			//Заполним ТЧ Услуги документа.
			ДокументСчет.Услуги.Очистить();
			Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
				НоваяСтрокаУслуг = ДокументСчет.Услуги.Добавить();
				НоваяСтрокаУслуг.Содержание = СтрокаУслуги.STRINGNAME;
				НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
				НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура; 
				НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
				НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
				НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
				НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
				
				
				
			КонецЦикла;
			НовыйДокумент =Ложь;
			
			
			//Документ
		Иначе
			
			//Создаем СчетНаОплату
			НовыйДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
			НовыйДокументСчетНаОплату.Дата = НайденныеСтроки[0].ДатаДокумента;
			НовыйДокументСчетНаОплату.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента; 
			НовыйДокументСчетНаОплату.FACTUREEXTERNALID =НайденныеСтроки[0].FACTURENUM;
			НовыйДокументСчетНаОплату.Контрагент =НайденныеСтроки[0].Контрагент;
			НовыйДокументСчетНаОплату.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
			НовыйДокументСчетНаОплату.ВалютаДокумента = НайденныеСтроки[0].Валюта;
			НовыйДокументСчетНаОплату.Организация = Организация;
			НовыйДокументСчетНаОплату.СтруктурнаяЕдиница = СчетКасса;
			Если НайденныеСтроки[0].INCLTAX = "0" Тогда
				СуммаВключаетНДС = Ложь;
			Иначе
				СуммаВключаетНДС = Истина;
			КонецЕсли;
			
			НовыйДокументСчетНаОплату.СуммаВключаетНДС = СуммаВключаетНДС;
			Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
				НовыйДокументСчетНаОплату.КурсВзаиморасчетов =1;
			Иначе
				НовыйДокументСчетНаОплату.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			НовыйДокументСчетНаОплату.КратностьВзаиморасчетов = 1;
			//Заполним ТЧ Услуги документа.
			Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
				НоваяСтрокаУслуг = НовыйДокументСчетНаОплату.Услуги.Добавить();
				НоваяСтрокаУслуг.Содержание = СтрокаУслуги.STRINGNAME;
				НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
				НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура; 
				НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
				НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
				НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
				НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
				
			КонецЦикла;
			//Запишем документ счет на оплату покупателя.
			НовыйДокумент = Истина;
		КонецЕсли;
		
		Попытка
			
			Если НовыйДокумент Тогда
				НовыйДокументСчетНаОплату.Записать();
				Сообщить("Создан документ: "+НовыйДокументСчетНаОплату.Ссылка);
				ДокСсылка = НовыйДокументСчетНаОплату.Ссылка;
			Иначе
				ДокументСчет.Записать();
				Сообщить("Перезаписан документ: "+ДокументСчет.Ссылка);
				ДокСсылка = ДокументСчет.Ссылка;
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		СтруктураДокументов.ДокументСчетНаОплату = ДокСсылка;
		
		
		//Если документ записан создадим документ реализация ТиУ на основании данного Счета
		Если  НовыйДокумент Тогда
			СоздатьРеализациюТиУ(ДокСсылка, СтруктураДокументов);
		Иначе
			СтруктураДокументов.перезаписан = Истина;
			ПерезаписатьДокументы(ДокСсылка,СтруктураДокументов);
			
		КонецЕсли;
		
		НСоздДок = СозданныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НСоздДок, СтруктураДокументов);		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьРеализациюТиУ(ДокСсылка, СтруктураДокументов)
	ДокРеализацияТиУ = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	ДокРеализацияТиУ.Дата = ТекущаяДата();
	ДокРеализацияТиУ.Заполнить(ДокСсылка);
	Попытка
		ДокРеализацияТиУ.Записать();
		Сообщить("Документ "+ДокРеализацияТиУ.Ссылка + " Записан! ");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	СтруктураДокументов.ДокументРеализацияТиУ = ДокРеализацияТиУ.Ссылка;
	
КонецПроцедуры

Процедура СоздатьЛогЗагрузки() Экспорт
	
	ДокументЛог =  Документы.Абс_ЛогЗагрузкиИзАСР.СоздатьДокумент();
	ДокументЛог.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
	Если ДанныеТекущейЗагрузки <> Неопределено Тогда
		ДокументЛог.SESSIONID 	= ДанныеТекущейЗагрузки.SESSIONID;
		ДокументЛог.TXT 		= ДанныеТекущейЗагрузки.TXT;
		ДокументЛог.JOURNALID 	= ДанныеТекущейЗагрузки.JOURNALID;
	КонецЕсли;
	ДокументЛог.Организация = Организация;  	
	ДокументЛог.ДанныеБиллинга.Загрузить(ДанныеБиллинга.Выгрузить());
    
	Попытка
		ДокументЛог.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Сообщить("Записан документ: "+ ДокументЛог.Ссылка );
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	Конецпопытки;
	
	НоваяСтрокаЛога = ЛогЗагрузок.Добавить();
	НоваяСтрокаЛога.ДокументЛог = ДокументЛог.Ссылка;
	
КонецПроцедуры

Процедура ПерезаписатьДокументы(ДокСсылка,СтруктураДокументов)
	
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.абс_СчетНаОплатуПокупателю = &абс_СчетНаОплатуПокупателю
	|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("абс_СчетНаОплатуПокупателю",ДокСсылка);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если  РезультатЗапроса.Количество() =0 Тогда
		//Если реализация отсутствует создаем реализацию и выходим
		СоздатьРеализациюТиУ(ДокСсылка, СтруктураДокументов);
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса.Следующий();
	ДокРеализацияТиУ =  РезультатЗапроса.Ссылка.ПолучитьОбъект();
	ДокРеализацияТиУ.Услуги.Очистить();
	ДокРеализацияТиУ.Дата = ТекущаяДата();
	ДокРеализацияТиУ.Заполнить(ДокСсылка);
	Попытка
		ДокРеализацияТиУ.Записать();
		Сообщить("Документ "+ДокРеализацияТиУ.Ссылка + " Перезаписан! ")	;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	СтруктураДокументов.ДокументРеализацияТиУ = ДокРеализацияТиУ.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = " ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ДокументОснование",ДокРеализацияТиУ.Ссылка );
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если  РезультатЗапроса.Количество() =0 Тогда
		Возврат;
	КонецЕсли;
	РезультатЗапроса.Следующий();
	ДокСФ =  РезультатЗапроса.Ссылка.ПолучитьОбъект();
	ДокСФ.Дата = ТекущаяДата();
	ДокСФ.ДокументыОснования.Очистить();
	ДокСФ.Заполнить(ДокРеализацияТиУ.Ссылка);
	Попытка
		ДокСФ.Записать();
		Сообщить("Документ "+ДокСФ.Ссылка + " Перезаписан! ")	;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	СтруктураДокументов.ДокументСФ = ДокСФ.Ссылка;
	
КонецПроцедуры

Функция ПолучитьКурс(Дата, Валюта)
	Отбор=Новый Структура("Валюта");
	Отбор.Валюта = Валюта; 
	ПоследняяЗапись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата,Валюта);
	Если ПоследняяЗапись.Количество()>0 Тогда
		Возврат ПоследняяЗапись.Курс;
	Иначе
		Возврат 1;
	КонецЕсли
КонецФункции


Функция ВыполнитьЗапросSQL(ТекстЗапроса) Экспорт
	
	Если Соединение = Неопределено Тогда
		ЭтотОбъект.ВыполнитьПодключениеКSQL(ЭтотОбъект);
	КонецЕсли;
	
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;
	
	Cmd.CommandText = ТекстЗапроса;
	
	Попытка
		
		Cmd.Execute();
		
	Исключение
		Сообщить("Ошибка при выполнении запроса. " + ОписаниеОшибки());	
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗапросВТаблицуSQL(ТекстЗапроса) Экспорт
	
	Перем ТаблицаРезультат;
	
	Если Соединение = Неопределено Тогда
		ЭтотОбъект.ВыполнитьПодключениеКSQL(ЭтотОбъект);
	КонецЕсли;
	
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;	
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	
	Cmd.CommandText = ТекстЗапроса;
	Rs = Новый COMОбъект("ADODB.RecordSet"); 
	
	Попытка
		
		Rs = Cmd.Execute(); 		
		КолонкиРезультат = ТаблицаРезультат.Колонки;
		
		Для ИндексКолонки = 0 По Rs.Fields.Count - 1 Цикл
			Если КолонкиРезультат.Найти(Rs.Fields(ИндексКолонки).name) = Неопределено Тогда
				КолонкиРезультат.Добавить(Rs.Fields(ИндексКолонки).name);
			КонецЕсли;
		КонецЦикла;
		
		Если Rs.BOF = 0 Тогда
			Rs.MoveFirst();                 
			Пока Rs.EOF() = 0 do  
				
				ТекСтрокаРезультат = ТаблицаРезультат.Добавить();
				
				Для Каждого ТекКолонка Из ТаблицаРезультат.Колонки Цикл
					ТекСтрокаРезультат[ТекКолонка.Имя] = Rs.Fields(ТекКолонка.Имя).Value;
				КонецЦикла;
				
				Rs.MoveNext();  
			КонецЦикла;
		КонецЕсли;	  
		
		Rs.Close();
		
	Исключение
		
		Сообщить("Запрос не выполнен: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		
		ТаблицаРезультат.Очистить();
		
	КонецПопытки;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция СоздатьДоговор(Контрагент,НомерДоговора,ДатаДоговора,Валюта) Экспорт
	
ПроверитьКонтрагента(Контрагент);

ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
ДоговорОбъект.Организация 	= Организация;
ДоговорОбъект.Владелец 	    = Контрагент.ссылка;
ДоговорОбъект.Номер 				= НомерДоговора;
ДоговорОбъект.УстановитьНовыйКод("_");
//ДоговорОбъект.абс_РегНомер          = СтрокаДоговора.РегНомер;
ДоговорОбъект.Дата					= ДатаДоговора;
ДоговорОбъект.абс_ДатаРегистрацииДоговора	= ДатаДоговора;

ДоговорОбъект.абс_ДатаНачалаДействия		= ДатаДоговора;


ДоговорОбъект.Наименование 			= "" + НомерДоговора + ?(ЗначениеЗаполнено(ДатаДоговора)," от " + Формат(ДатаДоговора,"ДФ=dd.MM.yyyy"),"");

ДоговорОбъект.ВалютаВзаиморасчетов 	= Валюта;

ДоговорОбъект.ВидДоговора			= Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
ДоговорОбъект.абс_ТипДоговора       = Перечисления.абсТипыДоговоров.Договор;
ДоговорОбъект.абс_ВидДоговора		= Справочники.абс_ПредметДоговораГК.ДоговорОказанияУслуг;
ДоговорОбъект.ВедениеВзаиморасчетов	= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
ДоговорОбъект.абс_СтатусДоговора    = Перечисления.абсСтатусыДоговоров.Исполнение;;
ДоговорОбъект.абс_Ответственный     = глЗначениеПеременной("глТекущийПользователь");

//ДоговорОбъект.ОбменДанными.Загрузка = Истина;

//Попытка
ДоговорОбъект.Записать();
Сообщить("Добавлен договор: " + ДоговорОбъект.Ссылка);

Возврат ДоговорОбъект.Ссылка;
//ЗаписатьНовыйСтатус(ДоговорОбъект.Ссылка,Перечисления.абсСтатусыДоговоров.Подготовка, "Загрузка данных");

КонецФункции

Процедура ПроверитьКонтрагента(Контрагент)
	Если Не Контрагент.Покупатель Тогда
		Об = Контрагент.ПолучитьОбъект();
		Об.Покупатель = Истина;
		Об.ОбменДанными.Загрузка = Истина;
		Об.Записать();
		Сообщить("Устанавливлен признак Покупатель для контрагента "+Контрагент);
	КонецЕсли;	
КонецПроцедуры


//Процедура ЗаписатьНовыйСтатус(Договор,НовыйСтатус, Комментарий = Неопределено) Экспорт
//	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовДоговоров.СоздатьНаборЗаписей();
//	
//	НаборЗаписей.Отбор.Договор.Установить(Договор);
//	НаборЗаписей.Прочитать();
//	
//	Запись = НаборЗаписей.Добавить();
//	Запись.Период = ТекущаяДата();

//	Запись.Договор				= Договор;
//	Запись.Исполнитель	 		= глЗначениеПеременной("глТекущийПользователь");	
//	Запись.СтатусДоговора		= НовыйСтатус;
//	
//	Запись.Комментарий 			= Комментарий;
//	
//	НаборЗаписей.Записать();
//	
//КонецПроцедуры


		
//Настройки подключения КТТК

СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
СтруктураПодключения.Вставить("Provider","kttk-1c-db");	
СтруктураПодключения.Вставить("DataSource","billing_old");	
СтруктураПодключения.Вставить("UserID","billing_old");	
СтруктураПодключения.Вставить("Password","jVxBPBZ2");

//Настройки подключения Абсолют-Софт
//СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
//СтруктураПодключения.Вставить("Provider","bd");	
//СтруктураПодключения.Вставить("DataSource","billing_old");	
//СтруктураПодключения.Вставить("UserID","sa");	
//СтруктураПодключения.Вставить("Password","AbsoluTSofT");

