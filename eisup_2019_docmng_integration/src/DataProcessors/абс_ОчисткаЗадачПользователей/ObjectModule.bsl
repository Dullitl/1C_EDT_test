Процедура ЗагрузитьПравила() Экспорт
	
	Т = Новый ТабличныйДокумент;
	
	Т.Вывести(ЭтотОбъект.ПолучитьМакет("МакетСоответствиеСтатусовТочкамМаршрута"));
	
	ТаблицаПравил.Очистить();
	
	Для Н = 2 по Т.ВысотаТаблицы Цикл
		
		СтрокаПравила = ТаблицаПравил.Добавить();
		
		СтрокаПравила.НомерПравила 					= Т.Область(Н, 1).Текст;
		СтрокаПравила.ИмяДокумента                  = Т.Область(Н, 2).Текст;
		СтрокаПравила.ИмяРеквизитаСтатуса           = Т.Область(Н, 3).Текст;
		СтрокаПравила.ИмяПеречисленияСтатуса        = Т.Область(Н, 4).Текст;
		СтрокаПравила.ИмяСтатуса                    = Т.Область(Н, 5).Текст;
		СтрокаПравила.ИмяБизнесПроцесса             = Т.Область(Н, 6).Текст;
        СтрокаПравила.ИмяРеквизитаДокумента         = Т.Область(Н, 7).Текст;
		СтрокаПравила.ИмяТочкиМаршрута              = Т.Область(Н, 8).Текст;
		СтрокаПравила.ЗадачаТолькоИнициатору        = Т.Область(Н, 9).Текст = "Да";
		СтрокаПравила.ИмяПроцедурыПриСозданииЗадач	= Т.Область(Н, 10).Текст;
		
		СтрокаПравила.СтатусДокументаСсылка			= Перечисления[СтрокаПравила.ИмяПеречисленияСтатуса][СтрокаПравила.ИмяСтатуса];
		СтрокаПравила.ТочкаМаршрутаСсылка			= БизнесПроцессы[СтрокаПравила.ИмяБизнесПроцесса].ТочкиМаршрута[СтрокаПравила.ИмяТочкиМаршрута];
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьЗадачиПоПравилу(НомерПравила) Экспорт
	
	Состояние("Обработка правила " + НомерПравила + " из " + ТаблицаПравил.Количество() + "...");
	
	//НеверныеЗадачи.Очистить();
	
	СтрокаПравила = ТаблицаПравил.Найти(НомерПравила, "НомерПравила");
	
	Если Не ЗначениеЗаполнено(СтрокаПравила) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абсЗадачаДоговора.Ссылка КАК ЗадачаСсылка,
	|	абсЗадачаДоговора.БизнесПроцесс КАК БизнесПроцесс,
	|	абсЗадачаДоговора.ТочкаМаршрута КАК ТочкаМаршрута,
	|	абсЗадачаДоговора.ИнициаторБП КАК ИнициаторБП,
	|	абсЗадачаДоговора.Исполнитель КАК ИсполнительЗадачи,
	|	абсЗадачаДоговора.БизнесПроцесс.ДокументВводаБюджета КАК Документ,
	|	абсЗадачаДоговора.БизнесПроцесс.ДокументВводаБюджета.Статус КАК СтатусДокумента
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|ГДЕ
	|	(НЕ абсЗадачаДоговора.Выполнена)
	|	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	|	И абсЗадачаДоговора.БизнесПроцесс.ДокументВводаБюджета.Статус <> &СтатусДокумента
	|	И ВЫБОР
	|			КОГДА &ЗадачаТолькоИнициатору
	|				ТОГДА (НЕ абсЗадачаДоговора.ИнициаторБП = абсЗадачаДоговора.Исполнитель)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И абсЗадачаДоговора.Исполнитель = &Исполнитель";
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абсЗадачаДоговора.Ссылка КАК ЗадачаСсылка,
	|	абсЗадачаДоговора.БизнесПроцесс КАК БизнесПроцесс,
	|	абсЗадачаДоговора.ТочкаМаршрута КАК ТочкаМаршрута,
	|	абсЗадачаДоговора.ИнициаторБП КАК ИнициаторБП,
	|	абсЗадачаДоговора.Исполнитель КАК ИсполнительЗадачи,
	|	абсЗадачаДоговора.БизнесПроцесс." + СтрокаПравила.ИмяРеквизитаДокумента + " КАК Документ,
	|	абсЗадачаДоговора.БизнесПроцесс." + СтрокаПравила.ИмяРеквизитаДокумента + "." + СтрокаПравила.ИмяРеквизитаСтатуса + " КАК СтатусДокумента
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|ГДЕ
	|	(НЕ абсЗадачаДоговора.Выполнена)
	|	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	|	И абсЗадачаДоговора.БизнесПроцесс." + СтрокаПравила.ИмяРеквизитаДокумента + "." + СтрокаПравила.ИмяРеквизитаСтатуса + " <> &СтатусДокумента
	|	И ВЫБОР
	|			КОГДА &ЗадачаТолькоИнициатору
	|				ТОГДА (НЕ абсЗадачаДоговора.ИнициаторБП = абсЗадачаДоговора.Исполнитель)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	//И абсЗадачаДоговора.Исполнитель = &Исполнитель";
	
	                          
	Запрос.УстановитьПараметр("ЗадачаТолькоИнициатору", СтрокаПравила.ЗадачаТолькоИнициатору);
	Запрос.УстановитьПараметр("ТочкаМаршрута"	, БизнесПроцессы[СтрокаПравила.ИмяБизнесПроцесса].ТочкиМаршрута[СтрокаПравила.ИмяТочкиМаршрута]);
	Запрос.УстановитьПараметр("Статусдокумента"	, Перечисления[СтрокаПравила.ИмяПеречисленияСтатуса][СтрокаПравила.ИмяСтатуса]);
	Запрос.УстановитьПараметр("Исполнитель"		, Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабЗадач = НеверныеЗадачи.Добавить();
		
		СтрокаТабЗадач.НомерПравила = НомерПравила;
		ЗаполнитьЗначенияСвойств(СтрокаТабЗадач, Выборка);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПереформироватьЗадачи() Экспорт
	
	МассивБП = Новый Массив();
	
	СтрокиЗадач = НеверныеЗадачи.НайтиСтроки(Новый Структура("Удалить", Истина));
	
	Для Каждого СтрокаЗадачи Из СтрокиЗадач Цикл
		
		Если МассивБП.Найти(СтрокаЗадачи.БизнесПроцесс) = Неопределено Тогда 
			
			МассивБП.Добавить(СтрокаЗадачи.БизнесПроцесс);
			                                                                            
		КонецЕсли;
		
	КонецЦикла;	
	
	
	Для Каждого БПСсылка Из МассивБП Цикл
		
		ПереформироватьЗадачуПоБП(БПСсылка);
		
	КонецЦикла;
			
КонецПроцедуры

Процедура ПереформироватьЗадачуПоБП(БПссылка)
	
	БП = БПСсылка.ПолучитьОбъект();
	
	// 1. Получим статус документа по таблице неверных задач
	// 2. Получим правило по статусу документа
	// 3. Запустим формирование задач по БП
	
	СтрокаЗадачи = НеверныеЗадачи.Найти(БПСсылка, "БизнесПроцесс");
	
	Если НЕ ЗначениеЗаполнено(СтрокаЗадачи) Тогда 
		Возврат;
	КонецЕсли;
		
	СтрокаПравила = ТаблицаПравил.Найти(СтрокаЗадачи.СтатусДокумента, "СтатусДокументаСсылка");
	
	Если НЕ ЗначениеЗаполнено(СтрокаПравила) Тогда 
		Возврат;
	КонецЕсли;	
	
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(СтрокаПравила.ИмяПроцедурыПриСозданииЗадач) Тогда
		Выполнить("БП." + СтрокаПравила.ИмяПроцедурыПриСозданииЗадач + "(СтрокаПравила.ТочкаМаршрутаСсылка, Новый Массив, Отказ);");
		Сообщить("Сформирована БП " + БП.Ссылка + ": " + СтрокаПравила.ИмяПроцедурыПриСозданииЗадач);
	Иначе
		Сообщить("Не указана процедура формирования задач по БП " + БП.Ссылка);
	КонецЕсли;
		
	//Если СтрокаПравила.ЗадачаТолькоИнициатору Тогда
	//	БП.СформироватьЗадачуИнициатору(СтрокаПравила.ТочкаМаршрутаСсылка, Новый Массив, Отказ);
	//	Сообщить("Сформирована задача инициатору по БП " + БП.Ссылка);
	//Иначе
	//	БП.СформироватьГрупповуюЗадачу(СтрокаПравила.ТочкаМаршрутаСсылка, Новый Массив, Отказ);
	//	Сообщить("Сформирована групповая задача по БП " + БП.Ссылка);
	//КонецЕсли;
	
	Если Отказ Тогда
		Сообщить("По БП " + БП.Ссылка + " задачи не сформированы.");
		
		Возврат;
	КонецЕсли;
	
	// Удалим ошибочные задачи из БП
	
	ЗадачиКУдалению = НеверныеЗадачи.НайтиСтроки(Новый Структура("БизнесПроцесс", БП.Ссылка));
	
	Для Каждого СтрокаЗадачи Из ЗадачиКУдалению Цикл
		
		Сообщить("Удалена задача " + СтрокаЗадачи.ЗадачаСсылка + СтрокаЗадачи.ЗадачаСсылка.Наименование);
		
		ЗадачаОбъект = СтрокаЗадачи.ЗадачаСсылка.ПолучитьОбъект();
		
		ЗадачаОбъект.Удалить();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура УдалитьСогласованныеБП() Экспорт
	
	МассивБП = Новый Массив();
	
	СтрокиЗадач = НеверныеЗадачи.НайтиСтроки(Новый Структура("Удалить", Истина));
	
	Для Каждого СтрокаЗадачи Из СтрокиЗадач Цикл
		
		Если НЕ ТаблицаПравил.НайтиСтроки(Новый Структура("СтатусДокументаСсылка",СтрокаЗадачи.СтатусДокумента)).Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивБП.Найти(СтрокаЗадачи.БизнесПроцесс) = Неопределено Тогда 
			
			МассивБП.Добавить(СтрокаЗадачи.БизнесПроцесс);
			                                                                            
		КонецЕсли;
		
	КонецЦикла;	
		
	Для Каждого БПСсылка Из МассивБП Цикл
		
		
		
		УдалитьЗадачиПоБП(БПСсылка);
		
	КонецЦикла;
 	
КонецПроцедуры

Процедура УдалитьЗадачиПоБП(БПСсылка)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абсЗадачаДоговора.Ссылка
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|ГДЕ
	|	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	|	И (НЕ абсЗадачаДоговора.Выполнена)";
	
	Запрос.УстановитьПараметр("Бизнеспроцесс", БПСсылка);
	
	ВыборкаЗадач = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗадач.Следующий() Цикл
		
		Сообщить("Удаляется задача " + ВыборкаЗадач.Ссылка);
		
		ОбъектЗадачи = ВыборкаЗадач.Ссылка.получитьОбъект();
		
		ОбъектЗадачи.Удалить();
		
	КонецЦикла;
			
	БПОбъект = БПСсылка.ПолучитьОбъект();
	                                                             
	БПОбъект.Завершен = Истина;
	
	БПОбъект.Записать();
	
	Сообщить("Завершен БП " + БПОБъект.Ссылка);
	
	
КонецПроцедуры

Процедура ПроверитьБППоПравилу(НомерПравила) Экспорт
	
	Состояние("Обработка правила " + НомерПравила + " из " + ТаблицаПравил.Количество() + "...");
	
	//НеверныеЗадачи.Очистить();
	
	СтрокаПравила = ТаблицаПравил.Найти(НомерПравила, "НомерПравила");
	
	Если Не ЗначениеЗаполнено(СтрокаПравила) Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абсЗадачаДоговора.БизнесПроцесс КАК БизнесПроцесс,
	|	абсЗадачаДоговора.ТочкаМаршрута КАК ТочкаМаршрута,
	|	абсЗадачаДоговора.ИнициаторБП КАК ИнициаторБП,
	|	абсЗадачаДоговора.Исполнитель КАК ИсполнительЗадачи,
	|	абсЗадачаДоговора.БизнесПроцесс.ДокументВводаБюджета КАК Документ,
	|	абсЗадачаДоговора.БизнесПроцесс.ДокументВводаБюджета.Статус КАК СтатусДокумента
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|ГДЕ
	|	(НЕ абсЗадачаДоговора.Выполнена)
	|	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	|	И абсЗадачаДоговора.БизнесПроцесс.ДокументВводаБюджета.Статус = &СтатусДокумента
	|	И ВЫБОР
	|			КОГДА &ЗадачаТолькоИнициатору
	|				ТОГДА (НЕ абсЗадачаДоговора.ИнициаторБП = абсЗадачаДоговора.Исполнитель)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И абсЗадачаДоговора.Исполнитель = &Исполнитель
	|
	|СГРУППИРОВАТЬ ПО
	|	абсЗадачаДоговора.БизнесПроцесс,
	|	абсЗадачаДоговора.ТочкаМаршрута,
	|	абсЗадачаДоговора.ИнициаторБП,
	|	абсЗадачаДоговора.Исполнитель,
	|	абсЗадачаДоговора.БизнесПроцесс.ДокументВводаБюджета,
	|	абсЗадачаДоговора.БизнесПроцесс.ДокументВводаБюджета.Статус";
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абсЗадачаДоговора.БизнесПроцесс КАК БизнесПроцесс,
	|	абсЗадачаДоговора.ТочкаМаршрута КАК ТочкаМаршрута,
	|	абсЗадачаДоговора.ИнициаторБП КАК ИнициаторБП,
	|	//абсЗадачаДоговора.Исполнитель КАК ИсполнительЗадачи,
	|	абсЗадачаДоговора.БизнесПроцесс." + СтрокаПравила.ИмяРеквизитаДокумента + " КАК Документ,
	|	абсЗадачаДоговора.БизнесПроцесс." + СтрокаПравила.ИмяРеквизитаДокумента + "." + СтрокаПравила.ИмяРеквизитаСтатуса + " КАК СтатусДокумента
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|ГДЕ
	|	(НЕ абсЗадачаДоговора.Выполнена)
	|	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	|	И абсЗадачаДоговора.БизнесПроцесс." + СтрокаПравила.ИмяРеквизитаДокумента + "." + СтрокаПравила.ИмяРеквизитаСтатуса + " = &СтатусДокумента
	|	//И ВЫБОР
	|	//		КОГДА &ЗадачаТолькоИнициатору
	|	//			ТОГДА (НЕ абсЗадачаДоговора.ИнициаторБП = абсЗадачаДоговора.Исполнитель)
	|	//		ИНАЧЕ ИСТИНА
	|	//	КОНЕЦ
	|	//И абсЗадачаДоговора.Исполнитель = &Исполнитель
	|
	|СГРУППИРОВАТЬ ПО
	|	абсЗадачаДоговора.БизнесПроцесс,
	|	абсЗадачаДоговора.ТочкаМаршрута,
	|	абсЗадачаДоговора.ИнициаторБП,
	|	//абсЗадачаДоговора.Исполнитель,
	|	абсЗадачаДоговора.БизнесПроцесс.ДокументВводаБюджета,
	|	абсЗадачаДоговора.БизнесПроцесс.ДокументВводаБюджета.Статус";
	
	                          
	Запрос.УстановитьПараметр("ЗадачаТолькоИнициатору", СтрокаПравила.ЗадачаТолькоИнициатору);
	Запрос.УстановитьПараметр("ТочкаМаршрута"	, БизнесПроцессы[СтрокаПравила.ИмяБизнесПроцесса].ТочкиМаршрута[СтрокаПравила.ИмяТочкиМаршрута]);
	Запрос.УстановитьПараметр("Статусдокумента"	, Перечисления[СтрокаПравила.ИмяПеречисленияСтатуса][СтрокаПравила.ИмяСтатуса]);
	Запрос.УстановитьПараметр("Исполнитель"		, Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтрокаТабЗадач = ТаблицаБП.Добавить();
		
		СтрокаТабЗадач.НомерПравила = НомерПравила;
		ЗаполнитьЗначенияСвойств(СтрокаТабЗадач, Выборка);
		
	КонецЦикла;		
	
КонецПроцедуры

Процедура ПереформироватьБП() Экспорт
	
	СтрокиБП = ТаблицаБП.НайтиСтроки(Новый Структура("Обновлять", Истина));
	
	Для Каждого СтрокаБП Из СтрокиБП Цикл
		
		ПереформироватьЗадачиПоТаблицеБП(СтрокаБП.БизнесПроцесс);
		
	КонецЦикла;
			
КонецПроцедуры

Процедура ПереформироватьЗадачиПоТаблицеБП(БПссылка)
	
	БП = БПСсылка.ПолучитьОбъект();
	
	// 1. Получим статус документа по таблице неверных задач
	// 2. Получим правило по статусу документа
	// 3. Запустим формирование задач по БП
	
	СтрокаБП = ТаблицаБП.Найти(БПСсылка, "БизнесПроцесс");
	
	Если НЕ ЗначениеЗаполнено(СтрокаБП) Тогда 
		Возврат;
	КонецЕсли;
		
	СтрокаПравила = ТаблицаПравил.Найти(СтрокаБП.СтатусДокумента, "СтатусДокументаСсылка");
	
	Если НЕ ЗначениеЗаполнено(СтрокаПравила) Тогда 
		Возврат;
	КонецЕсли;	
	
	Отказ = Ложь;
	
	Если УдалятьРанееСозданныеЗадачиПоБП Тогда
		
		ЗапросЗадачПоБП = Новый Запрос(
		"ВЫБРАТЬ
		|	абсЗадачаДоговора.Ссылка
		|ИЗ
		|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
		|ГДЕ
		|	(НЕ абсЗадачаДоговора.Выполнена)
		|	И абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс");
		
		ЗапросЗадачПоБП.УстановитьПараметр("БизнесПроцесс", БПСсылка);
		
		ТаблицаЗадачПоБП = ЗапросЗадачПоБП.Выполнить().Выгрузить();	
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтрокаПравила.ИмяПроцедурыПриСозданииЗадач) Тогда
		Выполнить("БП." + СтрокаПравила.ИмяПроцедурыПриСозданииЗадач + "(СтрокаПравила.ТочкаМаршрутаСсылка, Новый Массив, Отказ);");
		Сообщить("Сформирована БП " + БП.Ссылка + ": " + СтрокаПравила.ИмяПроцедурыПриСозданииЗадач);
	Иначе
		Сообщить("Не указана процедура формирования задач по БП " + БП.Ссылка);
	КонецЕсли;
		
	//Если СтрокаПравила.ЗадачаТолькоИнициатору Тогда
	//	БП.СформироватьЗадачуИнициатору(СтрокаПравила.ТочкаМаршрутаСсылка, Новый Массив, Отказ);
	//	Сообщить("Сформирована задача инициатору по БП " + БП.Ссылка);
	//Иначе
	//	БП.СформироватьГрупповуюЗадачу(СтрокаПравила.ТочкаМаршрутаСсылка, Новый Массив, Отказ);
	//	Сообщить("Сформирована групповая задача по БП " + БП.Ссылка);
	//КонецЕсли;
	
	Если Отказ Тогда
		Сообщить("По БП " + БП.Ссылка + " задачи не сформированы.");
		
		Возврат;
	КонецЕсли;
	
	//// Удалим ошибочные задачи из БП
	//
	//ЗадачиКУдалению = НеверныеЗадачи.НайтиСтроки(Новый Структура("БизнесПроцесс", БП.Ссылка));
	//
	//Для Каждого СтрокаЗадачи Из ЗадачиКУдалению Цикл
	//	
	//	Сообщить("Удалена задача " + СтрокаЗадачи.ЗадачаСсылка + СтрокаЗадачи.ЗадачаСсылка.Наименование);
	//	
	//	ЗадачаОбъект = СтрокаЗадачи.ЗадачаСсылка.ПолучитьОбъект();
	//	
	//	ЗадачаОбъект.Удалить();
	//	
	//КонецЦикла;
	
	Если УдалятьРанееСозданныеЗадачиПоБП Тогда
		
		Для Каждого СтрокаЗадачи Из ТаблицаЗадачПоБП Цикл
			
			Сообщить("Удалена задача " + СтрокаЗадачи.Ссылка + СтрокаЗадачи.Ссылка.Наименование);
			
			ОбъектЗадачи = СтрокаЗадачи.Ссылка.ПолучитьОбъект();
			
			ОбъектЗадачи.Удалить();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры







	
