Перем Дирекция;
Перем Департамент;

Процедура СохранитьНастойки() Экспорт
	
	КлючОбъекта  = "ВыводПутиСогласования";
    КлючНастроек = "СсылкаНаОбъект";

	Настройки = Новый Структура("СсылкаНаОбъект"
								, СсылкаНаОбъект);
    ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь();

    ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, Настройки, , ИмяПользователя);
	
КонецПроцедуры

Функция Печать() Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.абс_ЗакупочныйЗаказ") Тогда          
		ПутьСогласованияВТЗПоЗЗ();
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда          
		ПутьСогласованияВТЗПоДоговору();
	КонецЕсли;
	
КонецФункции
//Вывод пути согласования по ЗЗ
Процедура  ПутьСогласованияВТЗПоЗЗ() Экспорт 
	
	СотрудникОтветствененого = абс_БизнесПроцессыПривелегированный.ПолучитьСотрудникаПользователя(СсылкаНаОбъект.Ответственный);
	
	Если СотрудникОтветствененого = Неопределено Тогда
		Дирекция 	= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Департамент = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Дирекция 	= абс_БизнесПроцессыПривелегированный.ПолучитьПодразделениеДирекции(СотрудникОтветствененого);
	Департамент = абс_БизнесПроцессыПривелегированный.ПолучитьПодразделениеДепартамента(СотрудникОтветствененого);
	
	//Определяем цепочку статусов
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
	МассивСтатусов.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
	МассивСтатусов.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
	Если СокрЛП(СсылкаНаОбъект.Организация.Наименование) <> "КТТК" Тогда
		МассивСтатусов.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
		СогласованиеЦИ = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ;
		Если НЕ ПроверитьНаобходимостьВыводаСтатуса(СогласованиеЦИ) = Неопределено Тогда
			МассивСтатусов.Добавить(СогласованиеЦИ);
		КонецЕсли;
	КонецЕсли;
	МассивСтатусов.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК);
	УтверждениеРуководителемЦФУ = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ;
	Если НЕ ПроверитьНаобходимостьВыводаСтатуса(УтверждениеРуководителемЦФУ) = Неопределено Тогда 
		МассивСтатусов.Добавить(УтверждениеРуководителемЦФУ);
	КонецЕсли;
	УтверждениеПВПрдПоЭкономикеИФинансам = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам;
	Если НЕ ПроверитьНаобходимостьВыводаСтатуса(УтверждениеПВПрдПоЭкономикеИФинансам) = Неопределено Тогда 
		МассивСтатусов.Добавить(УтверждениеПВПрдПоЭкономикеИФинансам);
	КонецЕсли;
	УтверждениеПрезидентом = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом;
	Если НЕ ПроверитьНаобходимостьВыводаСтатуса(УтверждениеПрезидентом) = Неопределено Тогда 
		МассивСтатусов.Добавить(УтверждениеПрезидентом);
	КонецЕсли;
	МассивСтатусов.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ПорядокСогласования", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.абсСтатусЗакупочногоЗаказа"));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
	МассивТипов.Добавить(Тип("СправочникСсылка.СотрудникиОрганизаций"));
	ТЗ.Колонки.Добавить("Ответственный", Новый ОписаниеТипов(МассивТипов));
	ТЗ.Колонки.Добавить("Роль", Новый ОписаниеТипов("СправочникСсылка.РолиИсполнителей"));
	
	Для каждого Статус Из МассивСтатусов Цикл 
		Данные = ПолучитьДанныеПоСтатусуЗЗ(Статус);
		Ответственные = Данные.Ответственные;
		ПорядокСогласования = МассивСтатусов.Найти(Статус);
		Для каждого Элем из Ответственные Цикл 
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.ПорядокСогласования = ПорядокСогласования;
			НоваяСтрока.Статус = Статус;
			НоваяСтрока.Ответственный = Элем;
			
		КонецЦикла;
	КонецЦикла;
	
	ВыводВТабДок(ТЗ);
	
КонецПроцедуры
//Вывод пути согласования по договорам контрагентов
Процедура ПутьСогласованияВТЗПоДоговору() Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Подготовка);
	МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ПроверкаДФМ);
	МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеБухгалтерией);
	
	СогласованиеДирКСП = Перечисления.абсСтатусыДоговоров.СогласованиеДирКСП;
	Если НЕ ПроверитьНаобходимостьВыводаСтатуса(СогласованиеДирКСП) = Неопределено Тогда 
		МассивСтатусов.Добавить(СогласованиеДирКСП);
	КонецЕсли;
	МассивСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
	
	СогласованиеДВКУР = Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР;
	Если НЕ ПроверитьНаобходимостьВыводаСтатуса(СогласованиеДВКУР) = Неопределено Тогда 
		МассивСтатусов.Добавить(СогласованиеДВКУР);
	КонецЕсли;
	
	СогласованиеРуководителемПД = Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД;
	Если НЕ ПроверитьНаобходимостьВыводаСтатуса(СогласованиеРуководителемПД) = Неопределено Тогда 
		МассивСтатусов.Добавить(СогласованиеРуководителемПД);
	КонецЕсли;
	
	СогласованиеПВП = Перечисления.абсСтатусыДоговоров.СогласованиеПВП;
	Если НЕ ПроверитьНаобходимостьВыводаСтатуса(СогласованиеПВП) = Неопределено Тогда 
		МассивСтатусов.Добавить(СогласованиеПВП);
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(СсылкаНаОбъект.Организация);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ПорядокСогласования", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.абсСтатусыДоговоров"));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
	МассивТипов.Добавить(Тип("СправочникСсылка.СотрудникиОрганизаций"));
	ТЗ.Колонки.Добавить("Ответственный", Новый ОписаниеТипов(МассивТипов));
	ТЗ.Колонки.Добавить("Роль", Новый ОписаниеТипов("СправочникСсылка.РолиИсполнителей"));
	
	Для каждого Статус Из МассивСтатусов Цикл 
		Данные = ПолучитьДанныеПоСтатусуДоговора(Статус, МассивОрганизаций);
		Ответственные = Данные.Ответственные;
		ПорядокСогласования = МассивСтатусов.Найти(Статус);
		Если Ответственные.Количество() Тогда 
			Для каждого Элем из Ответственные Цикл 
				
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.ПорядокСогласования = ПорядокСогласования;
				НоваяСтрока.Статус = Статус;
				НоваяСтрока.Ответственный = Элем;
				
			КонецЦикла;
		Иначе
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.ПорядокСогласования = ПорядокСогласования;
			НоваяСтрока.Статус = Статус;
		КонецЕсли;
	КонецЦикла;
	
	ВыводВТабДок(ТЗ);
	
КонецПроцедуры

Функция ПолучитьДанныеПоСтатусуЗЗ(ТекСтатус)
	
	ВыводитьДанные = Ложь;
	
	//Ссылка = СсылкаНаОбъект;
	
	Список = Новый Массив;
	
	ДанныеПоЭтапуБП = Новый Структура;
	
	Договоры = СсылкаНаОбъект.Договоры;
	ИспользоватьПроектныйУчет =  глЗначениеПеременной("абс_СогласованиеРП");
	//Ответственный = Ссылка.Ответственный;
	ЦФУ = СсылкаНаОбъект.ЦФУ;
	ЦФО = СсылкаНаОбъект.ЦФО;
	Организация = СсылкаНаОбъект.Организация;
	ИтогСуммаСНДС = СсылкаНаОбъект.ИтогСуммаСНДС;
	ТипЗакупочногоЗаказа = СсылкаНаОбъект.ТипЗакупочногоЗаказа;
	ОборудованиеЧерезОЗК = СсылкаНаОбъект.ОборудованиеЧерезОЗК;
	БюджетнаяСтатья = СсылкаНаОбъект.БюджетнаяСтатья;
	//Департамент = СсылкаНаОбъект.Департамент;
	//Дирекция = СсылкаНаОбъект.Дирекция;
	НефиксированнаяСумма = СсылкаНаОбъект.НефиксированнаяСумма;
	
	//Вставка 100114 Проектный учет Родин
	НеТребуетсяСогласованиеРП =  Ложь;
	//Вставка 100114 Проектный учет Родин
	
	СписокРуководителей = Новый Массив;
	РаспределениеПоПроектам = СсылкаНаОбъект.РаспределениеПоПроектам;
	Для каждого Стр Из РаспределениеПоПроектам Цикл
		Если ЗначениеЗаполнено(Стр.Проект.абс_РуководительПроекта) Тогда
			
			ПользовательРуководитель = Справочники.Пользователи.НайтиПоРеквизиту("абс_Сотрудник",Стр.Проект.абс_РуководительПроекта);
			
			Если ПользовательРуководитель <> Справочники.Пользователи.ПустаяСсылка() и СписокРуководителей.Найти(ПользовательРуководитель) = Неопределено Тогда
				СписокРуководителей.Добавить(ПользовательРуководитель);	
			КонецЕсли;
			
			//Вставка 100114 Проектный учет Родин
			Если Стр.Проект.абс_НеТребуетсяСогласованиеРПвЗЗ Тогда
				НеТребуетсяСогласованиеРП =  Истина;
			КонецЕсли;	
			//Вставка 100114 Проектный учет Родин
			
		КонецЕсли;
	КонецЦикла;
	
	//ВозможноУточнениеИнициатором 	= Ложь;
	//РазрешеноСогласование 			= Ложь;
	//
	
	//Проектный учет
	//СогласованиеРуководителемБлокаВЗЗ = ПараметрыСеанса.абс_НастройкиСистемы.СогласованиеРуководителемБлокаВЗЗ;
	//Если СогласованиеРуководителемБлокаВЗЗ Тогда 	
	//	ПревышаетЛимитПоБлоку = РегистрыСведений.абс_ЛимитыПоБлокам.ПревышенЛимитПоЦФО(СсылкаНаОбъект.ИтогСуммаСНДС,СсылкаНаОбъект.ЦФО);
	//	//ПользовательРуководительБлока = РегистрыСведений.абс_РуководителиБлока.ПользовательЯвляетсяРуководителемБлока(Ссылка.ЦФО,мТекущийПользователь);
	//Иначе
	//	ПревышаетЛимитПоБлоку = Ложь;
	//	ПользовательРуководительБлока = Ложь;
	//КонецЕсли;
	
	Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента Тогда
		
		Запрос = Новый Запрос;                    
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.РольСогласователя,
		|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.БюджетнаяСтатья
		|ИЗ
		|	РегистрСведений.ttk_СтатьиСОсобымКонтролемЦелевогоИспользования КАК ttk_СтатьиСОсобымКонтролемЦелевогоИспользования
		|ГДЕ
		|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.БюджетнаяСтатья = &БюджетнаяСтатья";
		
		Запрос.УстановитьПараметр("БюджетнаяСтатья", БюджетнаяСтатья.Ссылка);
		
		ТЗРезультат = Запрос.Выполнить().Выгрузить();
		Если ТЗРезультат.Количество() > 0 Тогда
			Если (ИспользоватьПроектныйУчет и НефиксированнаяСумма) ИЛИ (СписокРуководителей.Количество() <> 0 и ИспользоватьПроектныйУчет) ИЛИ (НеТребуетсяСогласованиеРП и ИспользоватьПроектныйУчет) или Не ИспользоватьПроектныйУчет Тогда  
				ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.ДиректорДирекции);   				
				Если ОтветственныеДирекции = Неопределено ИЛИ ОтветственныеДирекции.Количество() = 0 Тогда
					//Проверка по Департаменту
					ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента);  					
					Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
						//Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда 							
						//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
						//КонецЕсли;    						
					Иначе   
						МассивРолей = Новый Массив;
						МассивРолей.Добавить(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании);
						МассивОрганизаций = Новый Массив;
						МассивОрганизаций.Добавить(Организация);
						МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
					КонецЕсли;
				Иначе   								
					//Проверка по Департаменту
					ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента); 					
					Если НЕ (ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0) Тогда
						
						ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация));
						
						МассивРолей = Новый Массив;
						МассивРолей.Добавить(ТЗРезультат[0].РольСогласователя);
						МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(Неопределено, МассивРолей, ОтветственныеДирекции);

					Иначе//Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
						 ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(ОтветственныеДепартамента);
						 
						 МассивРолей = Новый Массив;
						 МассивРолей.Добавить(ТЗРезультат[0].РольСогласователя);
						 МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(Неопределено, МассивРолей, ОтветственныеДепартамента);

					КонецЕсли;		
				КонецЕсли;
			КонецЕсли;                                              
		КонецЕсли;
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО Тогда
		ОтветственныеСотрудники = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента);
		Если ОтветственныеСотрудники = Неопределено ИЛИ ОтветственныеСотрудники.Количество() = 0 Тогда
			ОтветственныеСотрудники = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО);
			ОтветственныеПользователи = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(ОтветственныеСотрудники);
			МассивРолей = Новый Массив;
			МассивРолей.Добавить(Справочники.РолиИсполнителей.ДиректорДирекции);
			МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(Неопределено, МассивРолей, ОтветственныеПользователи);
		Иначе
			ОтветственныеСотрудники = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
			ОтветственныеПользователи = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(ОтветственныеСотрудники);
			МассивОрганизаций = Новый Массив;
			МассивОрганизаций.Добавить(Организация);
			МассивРолей = Новый Массив;
			МассивРолей.Добавить(Справочники.РолиИсполнителей.РуководительДепартамента);
			МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей, ОтветственныеПользователи);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК Тогда	
		ОтветственныеСотрудники = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО,,Организация);
		ОтветственныеПользователи = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(ОтветственныеСотрудники);
		МассивОрганизаций = Новый Массив;
		МассивОрганизаций.Добавить(Организация);
		МассивРолей = Новый Массив;
		МассивРолей.Добавить(Справочники.РолиИсполнителей.РуководительЦФО);
		МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей, ОтветственныеПользователи);
		
		//МассивРолей = Новый Массив;
		//МассивРолей.Добавить(Справочники.РолиИсполнителей.РуководительЦФО);
		//МассивОрганизаций = Новый Массив;
		//МассивОрганизаций.Добавить(Организация);
		//МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК Тогда
		Если СокрЛП(Организация.Наименование) = "КТТК" Тогда
			МассивРолей = Новый Массив;
			МассивРолей.Добавить(Справочники.РолиИсполнителей.РуководительЦФО);
			МассивОрганизаций = Новый Массив;
			МассивОрганизаций.Добавить(Организация);
			//МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
			МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
									абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО,, Организация));
									
			МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(Неопределено, МассивРолей, МассивИсполнителей);


		Иначе
			ПодразделениеОФК = глЗначениеПеременной("абс_ПодразделениеОФК");
			ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,Организация));	
			
			МассивРолей = Новый Массив;
			МассивРолей.Добавить(Справочники.РолиИсполнителей.РуководительОФК);
			МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(Неопределено, МассивРолей, ПользовательИсполнитель);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда
		ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов,Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
		Если СсылкаНаОбъект.ИтогСуммаСНДС < ПределСуммыУтверждения Тогда 
			ОрганизацияКТТК = ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК;
			ПодразделениеОФК = глЗначениеПеременной("абс_ПодразделениеОФК");
			ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,ОрганизацияКТТК));
			МассивРолей = Новый Массив;
			МассивРолей.Добавить(Справочники.РолиИсполнителей.РуководительОФК);
			МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(Неопределено, МассивРолей, ПользовательИсполнитель);
		Иначе
			//Поднимем до вице президента
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, Справочники.РолиИсполнителей.Президент);
			Если ИтогСуммаСНДС < ПределСуммыУтверждения Тогда
				ОрганизацияКТТК = ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК;
				ПодразделениеОФК = глЗначениеПеременной("абс_ПодразделениеОФК");
				ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(глЗначениеПеременной("абс_ПодразделениеОФК"),,ОрганизацияКТТК));
				
				МассивРолей = Новый Массив;
				МассивРолей.Добавить(Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
				МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(, МассивРолей, ПользовательИсполнитель);
			Иначе						
				//Поднимем до президента
				МассивОрганизаций = Новый Массив;
				МассивОрганизаций.Добавить(Организация);
				МассивРолей = Новый Массив;
				МассивРолей.Добавить(Справочники.РолиИсполнителей.Президент);
				МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
			КонецЕсли;
		КонецЕсли;
	 
	ИначеЕсли  ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам Тогда
		ОрганизацияКТТК = ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК;
		ПодразделениеОФК = глЗначениеПеременной("абс_ПодразделениеОФК");
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,ОрганизацияКТТК));
		
		МассивРолей = Новый Массив;
		МассивРолей.Добавить(Справочники.РолиИсполнителей.РуководительОФК);
		МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом Тогда
		ОрганизацияКТТК = ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК;
		ПодразделениеОФК = глЗначениеПеременной("абс_ПодразделениеОФК");
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(,,ОрганизацияКТТК));
		
		МассивРолей = Новый Массив;
		МассивРолей.Добавить(Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
		МассивИсполнителей = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);

	КонецЕсли;
	
	СтруктураМассивов = Новый Структура;
	ОтветственныйИзСсылки = Истина;
	
	Если НЕ МассивИсполнителей = Неопределено и МассивИсполнителей.Количество() Тогда
		СтруктураМассивов.Вставить("МассивИсполнителей", МассивИсполнителей);
		ОтветственныйИзСсылки = Ложь;
	КонецЕсли;
	
	Если ОтветственныйИзСсылки Тогда 
		МассивОтветственных = Новый Массив;
		МассивОтветственных.Добавить(СсылкаНаОбъект.Ответственный);
		ДанныеПоЭтапуБП.Вставить("Ответственные", МассивОтветственных);
		//Сообщить("По статусу: " + ТекСтатус + " нет групп ответственных");
	Иначе
		ДанныеПоЭтапуБП.Вставить("Ответственные", СложитьМассивы(СтруктураМассивов));
	КонецЕсли;
	

	Возврат ДанныеПоЭтапуБП;
	
КонецФункции

Функция ПолучитьДанныеПоСтатусуДоговора(ТекСтатус, МассивОрганизаций)
	
	Если ТекСтатус = Перечисления.абсСтатусыДоговоров.Подготовка Тогда  //Проектный учет
		
		//Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено) ИЛИ
		//	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ОтправкаНаСогласованиеДоговоровОтИнициатора) = Неопределено) ИЛИ 
		//	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)
		//	
		//	Тогда
			////МассивРолей = Новый Массив;
			////МассивРолей.Добавить(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании);
			////МассивРолей.Добавить(Справочники.РолиИсполнителей.ОтправкаНаСогласованиеДоговоровОтИнициатора);
			////
			////МассивОтветственных = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
			МассивОтветственных = Новый Массив;
			МассивОтветственных.Добавить(СсылкаНаОбъект.абс_Ответственный);
			
			//Если НЕ абс_ТипДоговора = Перечисления.абсТипыДоговоров.СоглашениеОКонфиденциальности Тогда
			//	
			//	
			//	// АБС Изменение Родин Отключение бизнес-процессов 110314
			//	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
			//	
			//	
			//	
			//	Если (НЕ НайтиБПСогласование() = Неопределено И Не СогласованиеБезБП) ИЛИ СогласованиеБезБП Тогда
			//		// АБС Изменение Родин Отключение бизнес-процессов 110314
			//		
			//		// АБС ИЗМЕНЕНО АБС-Ф 20111117 Заявка на изменение реквизитов контрагентов
			//		//Если НЕ Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
			//		Если НЕ Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный И
			//			НЕ Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов Тогда
			//			// АБС ИЗМЕНЕНО АБС-Ф 20111117 Заявка на изменение реквизитов контрагентов КОНЕЦ
			//			
			//			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда 
			//				
			//				//Проектный учет
			//				Если Не абс_ДоговорБезСуммы И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ Тогда
			//					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемБлока);
			//				Иначе	
			//					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ПроверкаДФМ);
			//				КонецЕсли;
			//				//Проектный учет
			//				
			//			Иначе 
			//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ПроверкаКонтрагента);
			//			КонецЕсли;
			//		Иначе
			//			
			//			//Проектный учет
			//			Если Не абс_ДоговорБезСуммы И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ Тогда
			//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемБлока);
			//			Иначе	
			//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ПроверкаДФМ);
			//			КонецЕсли;
			//			//Проектный учет
			//			
			//		КонецЕсли;
			//	КонецЕсли;
			//	
			//	
			//Иначе
			//	
			//	Если абс_ТипСоглашенияОКонфиденциальности = Перечисления.абс_ТипыСоглашенийОКонфиденциальности.Типовое ИЛИ 
			//		НЕ ЗначениеЗаполнено(абс_ТипСоглашенияОКонфиденциальности) Тогда
			//		
			//		// 20110411 Типовые соглашения о конфиденциальности переходят из статуса "Подготовка" в статус "Подписание и регистрация"
			//		//СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
			//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
			//		
			//	Иначе 
			//		
			//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДЭБ);
			//		
			//	КонецЕсли;
			//	
			//КонецЕсли;
			
		//КонецЕсли;
		
		//Проектный учет
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемБлока Тогда
	//	
	//	Если ПользовательРуководительБлока Тогда
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ПроверкаДФМ);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отмена);
	//	КонецЕсли;
	//	//Проектный учет
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ПроверкаКонтрагента Тогда
	//	
	//	СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
	//	СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отмена);
	//	
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ Тогда
		
		МассивРолей = Новый Массив;
		МассивРолей.Добавить(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании);
		МассивРолей.Добавить(Справочники.РолиИсполнителей.ОтправкаНаСогласованиеДоговоровОтИнициатора);
			
		МассивОтветственных = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
			
		//	
	//	Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПроверкаДФМ) = Неопределено Тогда
	//		
	//		Если абс_ЕстьОригиналДоговора Тогда
	//			//АБС ВСТАВКА №15153 НАЧАЛО
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
	//			//\\АБС ВСТАВКА №15153 КОНЕЦ
	//		Иначе				
	//			ОбязательноСогласованиеБУ = Истина;
	//			Если Организация = Справочники.Организации.НайтиПоНаименованию("КТТК", Истина) Тогда //АБС+ Тупиков 21418
	//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДирКСП);
	//			КонецЕсли;
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование);
	//			
	//			// нач  закомментировано АБС  Нарыжный 17.10.2013 33925
	//			//Если абс_ТиповойДоговор И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда  				
	//			//	СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение); 				
	//			//ИначеЕсли абс_ТиповойДоговор И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда 				
	//			//	СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация); 				
	//			// кон  закомментировано АБС  Нарыжный 17.10.2013	33925
	//			
	//			// нач  ВСТАВКА АБС  Нарыжный 17.10.2013 33925
	//			Если абс_ТиповойДоговор  Тогда 				
	//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);	
	//				// кон  ВСТАВКА АБС  Нарыжный 17.10.2013 33925	
	//				
	//			Иначе  					
	//				
	//				// АБС Изменение Родин Отключение бизнес-процессов 110314
	//				СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	//				БПСогласование = НайтиБПСогласование();	
	//				
	//				Если (НЕ БПСогласование = Неопределено И НЕ СогласованиеБезБП) ИЛИ СогласованиеБезБП Тогда
	//					// АБС Изменение Родин Отключение бизнес-процессов 110314
	//					
	//					Если СогласованиеБезБП Тогда
	//						СогласованБухгалтером =	абс_СогласованБухгалтером;
	//					Иначе
	//						СогласованБухгалтером =	БПСогласование.СогласованБухгалтером;	
	//					КонецЕсли;
	//					
	//					Если ОбязательноСогласованиеБУ И НЕ СогласованБухгалтером Тогда
	//						СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеБухгалтерией);
	//					Иначе
	//						Если НЕ СогласованБухгалтером Тогда
	//							СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеБухгалтерией);
	//						КонецЕсли;     					
	//						ПределУтвержденияДВКУР = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
	//						Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров,
	//						Справочники.РолиИсполнителей.СогласованиеДВКУР); 	
	//						Соответствие = ЗапросДанныхСправочноИтогоБезНДС();   																	
	//						Если Соответствие.Получить("СправочноИтогоБезНДС") > ПределУтвержденияДВКУР Тогда
	//							СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР);
	//						Иначе
	//							СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
	//						КонецЕсли;
	//					КонецЕсли; 								
	//				КонецЕсли; 
	//				
	//				
	//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Подготовка);  					
	//				// АБС ИЗМЕНЕНО 59935
	//				// Если договор с покупателем, то должен быть вариант, либо отправлять на ПД, либо на исполнение	
	//				Если абс_БизнесПроцессы.ДоговорИзБиллинга(Ссылка) Тогда
	//					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);	
	//				КонецЕсли;
	//				// АБС ИЗМЕНЕНО 59935 КОНЕЦ 				
	//			КонецЕсли;
	//		КонецЕсли;	
	//		
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
	//		
	//	КонецЕсли;
	//	
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеБухгалтерией Тогда
	
		МассивРолей = Новый Массив;
		МассивРолей.Добавить(Справочники.РолиИсполнителей.ПроверкаДФМ);
			
		МассивОтветственных = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
		//МассивОтветственных = ПолучитьИсполнителейОрганизацийПоРолям(Неопределено, МассивРолей);
			
		//	
	//	Если Не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено Тогда
	//		
	//		//АБС ВСТАВКА №000020802 НАЧАЛО 
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
	//		//\\АБС ВСТАВКА №000020802 КОНЕЦ 
	//		//Сторчевой А.Н. 7747248 {
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДирКСП);
	//		// } Сторчевой А.Н. 7747248		
	//		//АБС ВСТАВКА №6106 НАЧАЛО
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией);
	//		//\\АБС ВСТАВКА №6106 КОНЕЦ 				
	//		//АБС ВСТАВКА №31836 НАЧАЛО «11 марта 2015 г.», Пополитов
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Уточнение);
	//		//\\АБС ВСТАВКА №31836 КОНЕЦ  			
	//		// Теперь бухгалтер может сделать отказ
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
	//		
	//	КонецЕсли;		
	//	
	//	//АБС ВСТАВКА №6106 НАЧАЛО
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией Тогда
	//	
	//	Если Не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеБухгалтерией);
	//		//АБС ВСТАВКА №14479 НАЧАЛО
	//		//СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
	//		//\\АБС ВСТАВКА №14479 КОНЕЦ	
	//	КонецЕсли;
	//	
	//	//\\АБС ВСТАВКА №6106 КОНЕЦ	
	//	
	//	// АБС ИЗМЕНЕНО 20101209 СогласованиеДоговоров
	//	// Добавилось подразделение ДВКУР, соответственно исполнители для него и статус.		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР Тогда
		
		МассивРолей = Новый Массив;
		МассивРолей.Добавить(Справочники.РолиИсполнителей.СогласованиеБухгалтером);
			
		МассивОтветственных = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
		
	//	Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеДВКУР) = Неопределено Тогда
	//		
	//		//АБС ВСТАВКА №000020802 НАЧАЛО
	//		ПределУтвержденияПВП = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
	//		Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров,
	//		Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
	//		
	//		//Сторчевой А.Н. 7747248 {
	//		//Если сумма не заполнена, но категория суммы указана то необходимо согласование высшего уровня
	//		врСуммаПоДоговору = МодульВалютногоУчета.ПересчитатьВСуммуРегл(абс_СуммаБезНДС, мВалютаРегламентированногоУчета, ВалютаВзаиморасчетов, абс_СерверныеФункции.ПолучитьДатуСервера());											 
	//		Если врСуммаПоДоговору = 0 и ttk_КатегорияСуммы = Перечисления.ttk_КатегорияСуммы.СуммаБольше20МлнБезНДС Тогда
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПВП);
	//		Иначе
	//			// } Сторчевой А.Н. 7747248
	//			Соответствие = ЗапросДанныхСправочноИтогоБезНДС();
	//			Если ПределУтвержденияПВП < Соответствие.Получить("СправочноИтогоБезНДС") Тогда
	//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПВП);
	//			Иначе
	//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
	//			КонецЕсли;
	//			//Сторчевой А.Н. 7747248 {
	//		КонецЕсли;
	//		// } Сторчевой А.Н. 7747248
	//		//СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
	//		//\\АБС ВСТАВКА №000020802 КОНЕЦ			
	//		
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Уточнение);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
	//	КонецЕсли;	
	//	
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД Тогда
	
		МассивРолей = Новый Массив;
		МассивРолей.Добавить(Справочники.РолиИсполнителей.РуководительПД);
			
		МассивОтветственных = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
	
	//	
	//	Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительПД) = Неопределено Тогда
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Уточнение);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);    
	//	КонецЕсли;	
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ОдобрениеСДилиОСА Тогда
	//	
	//	Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеПД_ОдобрениеСДилиОСА) = Неопределено Тогда
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Уточнение);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);    
	//	КонецЕсли;		
	//	
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПД Тогда
		
		МассивРолей = Новый Массив;
		//МассивРолей.Добавить(Справочники.РолиИсполнителей.СогласованиеПД);
		МассивРолей.Добавить(Справочники.РолиИсполнителей.СогласованиеБухгалтером);
		МассивОтветственных = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
		
		//	
	//	Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеПД) = Неопределено Тогда
	//		
	//		// АБС Изменение Родин Отключение бизнес-процессов 110314
	//		СписокСотрудниковПД = ПолучитьОтветственногоПД();
	//		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	//		
	//		Если (СписокСотрудниковПД.Найти(мТекущийПользователь) <> Неопределено и СогласованиеБезБП) или Не СогласованиеБезБП Тогда
	//			
	//			//АБС ВСТАВКА №000020914 НАЧАЛО
	//			ПределУтвержденияРуководителемПД = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
	//			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров,
	//			Справочники.РолиИсполнителей.РуководительПД);			
	//			//АБС ВСТАВКА №000020802 НАЧАЛО
	//			ПределУтвержденияДВКУР = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
	//			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров,
	//			Справочники.РолиИсполнителей.СогласованиеДВКУР);
	//			//АБС ИЗМЕНЕНО №000021266 НАЧАЛО				
	//			врСуммаПоДоговору = МодульВалютногоУчета.ПересчитатьВСуммуРегл(абс_СуммаБезНДС, мВалютаРегламентированногоУчета, ВалютаВзаиморасчетов, абс_СерверныеФункции.ПолучитьДатуСервера());											 
	//			//Сторчевой А.Н. 7747248 {
	//			//Если сумма не заполнена, но категория суммы указана то необходимо согласование высшего уровня
	//			Если врСуммаПоДоговору = 0 и ЗначениеЗаполнено(ttk_КатегорияСуммы) Тогда
	//				Если ttk_КатегорияСуммы = Перечисления.ttk_КатегорияСуммы.СуммаБольше2МлнБезНДС Тогда
	//					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР);
	//				ИначеЕсли ttk_КатегорияСуммы = Перечисления.ttk_КатегорияСуммы.СуммаБольше20МлнБезНДС Тогда
	//					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД);
	//				КонецЕсли;
	//			Иначе
	//				// } Сторчевой А.Н. 7747248
	//				Если ЗапросДанныхСправочноИтогоБезНДС().Получить("СправочноИтогоБезНДС") >= ПределУтвержденияДВКУР 
	//					и врСуммаПоДоговору < ПределУтвержденияРуководителемПД Тогда
	//					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР);
	//				ИначеЕсли врСуммаПоДоговору >= ПределУтвержденияРуководителемПД Тогда
	//					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД);
	//				Иначе
	//					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
	//				КонецЕсли;
	//				//\\АБС ВСТАВКА №000020802,000021266,000020914 КОНЕЦ
	//				//Сторчевой А.Н. 7747248 {
	//			КонецЕсли;
	//			// } Сторчевой А.Н. 7747248				
	//			Если Организация = Справочники.Организации.НайтиПоНаименованию("КТТК", Истина) Тогда //АБС+ Тупиков 21418
	//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДирКСП);
	//			КонецЕсли;
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование);
	//			//СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ПроверкаДФМ);
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ); 			
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Уточнение);
	//			
	//			// Найдем задачу по договору, посмотрим на ее ответственного
	//			// если у пользователя есть роль руководителя ПД или он является ответсвенным по данной задачи
	//			// то он может сменить исполнителя
	//			
	//			Если Не СогласованиеБезБП Тогда
	//				Запрос = Новый Запрос(
	//				"ВЫБРАТЬ
	//				|	абсЗадачаДоговора.Ссылка
	//				|ИЗ
	//				|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	//				|ГДЕ
	//				|	абсЗадачаДоговора.ОбъектЗадачи = &ТекДоговор
	//				|	И абсЗадачаДоговора.Исполнитель = &ТекИсполнитель
	//				|	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	//				|	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута");
	//				
	//				Запрос.УстановитьПараметр("ТекДоговор"		, Ссылка);
	//				Запрос.УстановитьПараметр("ТекИсполнитель"	, мТекущийПользователь);
	//				Запрос.УстановитьПараметр("ТочкаМаршрута"   , БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
	//				
	//				Результат = Запрос.Выполнить();       			
	//				Если НЕ Результат.Пустой() ИЛИ НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительПД) = Неопределено Тогда 				
	//					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПДСменаОтветственного);				
	//				КонецЕсли;
	//			Иначе	
	//				Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительПД) = Неопределено ИЛИ абс_ОтветственныйПД = мТекущийПользователь Тогда 				
	//					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПДСменаОтветственного);				
	//				КонецЕсли;
	//			КонецЕсли;	
	//			
	//		КонецЕсли;	
	//	КонецЕсли;		
	//	// АБС Изменение Родин Отключение бизнес-процессов 110314
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование Тогда
	//	
	//	// АБС Изменение Родин Отключение бизнес-процессов 110314
	//	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	//	Если  НЕ СогласованиеБезБП Тогда
	//		БПСогласование = НайтиБПСогласование();
	//	Иначе
	//		БПСогласование = БизнесПроцессы.абсСогласованиеДоговоров.ПустаяСсылка();
	//	КонецЕсли; 
	//	// АБС Изменение Родин Отключение бизнес-процессов 110314
	//	
	//	Если (ЗначениеЗаполнено(мТекущийПользователь) И ЗначениеЗаполнено(БПСогласование)) ИЛИ СогласованиеБезБП Тогда
	//		Если (Не СогласованиеБезБП И БПСогласование.СотрудникДопСогласование = мТекущийПользователь.абс_Сотрудник) ИЛИ 
	//			абс_СотрудникДопСогласование = мТекущийПользователь.абс_Сотрудник ИЛИ 
	//			НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
	//			
	//			// АБС Изменение Родин Отключение бизнес-процессов 110314
	//			
	//			Если (ЗначениеЗаполнено(БПСогласование.СтатусДопСогласования) И НЕ СогласованиеБезБП) Тогда   
	//				ТекущийСтатусДопСогласования  =  БПСогласование.СтатусДопСогласования;
	//			ИначеЕсли  (СогласованиеБезБП И ЗначениеЗаполнено(абс_СтатусДопСогласования)) Тогда
	//				ТекущийСтатусДопСогласования  =  абс_СтатусДопСогласования;
	//			КонецЕсли;
	//			
	//			// АБС Изменение Родин Отключение бизнес-процессов 110314
	//			Если ЗначениеЗаполнено(ТекущийСтатусДопСогласования) Тогда	
	//				СписокСтатусов.Добавить(ТекущийСтатусДопСогласования);			
	//			Иначе
	//				Если абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.СогласованиеПД
	//					и СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.СогласованиеПД) = Неопределено Тогда 
	//					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
	//				КонецЕсли				
	//			КонецЕсли;
	//			
	//			
	//			Если абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР
	//				и СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР) = Неопределено Тогда 
	//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР);
	//			КонецЕсли;	
	//			Если абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД
	//				и СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД) = Неопределено Тогда 
	//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД);
	//			КонецЕсли;
	//			Если абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.ОдобрениеСДилиОСА
	//				и СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.ОдобрениеСДилиОСА) = Неопределено Тогда 
	//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ОдобрениеСДилиОСА);
	//			КонецЕсли;
	//			//АБС ВСТАВКА №46998 НАЧАЛО «29 сентября 2014 г.», Пополитов
	//			Если абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.Уточнение
	//				и СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.Уточнение) = Неопределено Тогда 
	//				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Уточнение);
	//			КонецЕсли;
	//			//\\АБС ВСТАВКА №46998 КОНЕЦ
	//			
	//		КонецЕсли;
	//	КонецЕсли;
	//	//++ Задача № 10549 Логинчев А.С. 21.05.2012 16:45:05
	//	Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительПД) = Неопределено
	//		и СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.СогласованиеПД) = Неопределено 
	//		и абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.СогласованиеПД Тогда
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
	//	КонецЕсли;
	//	//-- Задача № 10549 Логинчев А.С.
	//	
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПВП Тогда
	
		МассивРолей = Новый Массив;
		МассивРолей.Добавить(Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
			
		МассивОтветственных = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
	
	//	
	//	Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПервыйВицеПрезидент) = Неопределено Тогда
	//		Если абс_ТребуетОдобрениеСДилиОСА Тогда
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ОдобрениеСДилиОСА);
	//		Иначе	
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
	//		КонецЕсли;
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
	//	КонецЕсли;
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПервоеЛицо Тогда
	//	
	//	Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеПЛ) = Неопределено Тогда
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
	//	КонецЕсли;			
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Регистрация Тогда
	//	Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ОбщийОтдел) = Неопределено) Тогда	
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ); 
	//	КонецЕсли;
	//	
	//	// АБС ВСТАВКА Фролов 2996
	//	Если (абс_Ответственный = мТекущийПользователь) 
	//		или (мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) <> Неопределено) Тогда
	//		Если СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.Отказ) = Неопределено Тогда
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
	//		КонецЕсли;
	//	КонецЕсли;	
	//	// АБС ВСТАВКА Фролов 2996 КОНЕЦ
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Исполнение Тогда
	//	
	//	Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено) 
	//		или (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПроверкаДФМ) = Неопределено) 
	//		или (абс_Ответственный = мТекущийПользователь)Тогда 			
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Закрытие);
	//	КонецЕсли;
	//	
	//	Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ОбщийОтдел) = Неопределено) Тогда 			
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.КорректировкаРеквизитовДоговора); 			
	//	КонецЕсли;
	//	
	//	//Родин лимитный контроль	
	//	
	//	Если мТекущийПользователь = абс_Ответственный Тогда
	//		Если глЗначениеПеременной("абс_ИспользоватьКонтрольЛимитовПоДоговорам") 
	//			и (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
	//			//АБС ВСТАВКА №29963 НАЧАЛО «15 декабря 2014 г.», Пополитов	
	//			или ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее) Тогда
	//			//\\АБС ВСТАВКА №29963 КОНЕЦ
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Корректировка); 			
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Корректировка и (мТекущийПользователь = абс_Ответственный ИЛИ НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)  Тогда
	//	Если глЗначениеПеременной("абс_ИспользоватьКонтрольЛимитовПоДоговорам") Тогда
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки);	
	//	КонецЕсли;
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки и (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПроверкаДФМ) = Неопределено ИЛИ НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
	//	Если глЗначениеПеременной("абс_ИспользоватьКонтрольЛимитовПоДоговорам") Тогда
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);
	//	КонецЕсли;
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки Тогда
	//	Если глЗначениеПеременной("абс_ИспользоватьКонтрольЛимитовПоДоговорам") и (мТекущийПользователь = абс_Ответственный ИЛИ НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПроверкаДФМ) = Неопределено ИЛИ НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)  Тогда
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);
	//	КонецЕсли;
	//	
	//	//Родин лимитный контроль	
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Закрытие Тогда
	//	
	//	Если Не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено Тогда
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Закрыт);			
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);
	//	КонецЕсли;
	//	
	//	//АБС ВСТАВКА №000030170 НАЧАЛО «4 января 2015 г.», Пополитов
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Закрыт Тогда
	//	
	//	Если Не мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительБухгалтерскойГруппы) = Неопределено Тогда
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Закрытие);			
	//	КонецЕсли;
	//	//\\АБС ВСТАВКА №000030170 КОНЕЦ   		
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.КорректировкаРеквизитовДоговора Тогда
	//	
	//	Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ОбщийОтдел) = Неопределено) Тогда			
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);  			
	//	КонецЕсли;
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДИБ Тогда
	//	
	//	Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеДИБ) = Неопределено) Тогда 			
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
	//	КонецЕсли;
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДЭБ Тогда
	//	
	//	Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеДЭБ) = Неопределено) или 
	//		(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеСОКДЭБ) = Неопределено) Тогда  			
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДИБ);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
	//	КонецЕсли;		
	//	
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДирКСП Тогда
	
	МассивРолей = Новый Массив;
	МассивРолей.Добавить(Справочники.РолиИсполнителей.СогласованиеДирКСП);
			
	МассивОтветственных = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);	
	//	
	//	Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеДирКСП) = Неопределено) или 
	//		(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда			
	//		//Сторчевой А.Н. 7747248 {
	//		//СписокСтатусов.Добавить(абс_СтатусДоговораДляДирКСП);
	//		Если СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.СогласованиеПД) = Неопределено Тогда
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
	//		КонецЕсли;
	//		// } Сторчевой А.Н. 7747248
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Уточнение);
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
	//	КонецЕсли;		
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Отказ Тогда
	//	//АБС 110111
	//	МассивПользователей =Новый Массив;
	//	
	//	Если абс_Кураторы.Количество() > 0 Тогда
	//		МассивСотрудников = абс_Кураторы.ВыгрузитьКолонку("Куратор");
	//		МассивПользователей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(МассивСотрудников); 			
	//	КонецЕсли;
	//	
	//	Если (абс_Ответственный = мТекущийПользователь) 
	//		или (МассивПользователей.Найти(мТекущийПользователь)<>Неопределено)
	//		или (мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) <> Неопределено) Тогда
	//		
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Подготовка);
	//	КонецЕсли;	
	//	
	//ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Уточнение Тогда
	//	
	//	МассивПользователей =Новый Массив;
	//	
	//	Если абс_Кураторы.Количество() > 0 Тогда
	//		МассивСотрудников = абс_Кураторы.ВыгрузитьКолонку("Куратор");
	//		МассивПользователей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(МассивСотрудников); 			
	//	КонецЕсли;
	//	
	//	Если (абс_Ответственный = мТекущийПользователь) 
	//		или (МассивПользователей.Найти(мТекущийПользователь)<>Неопределено)
	//		или (мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) <> Неопределено) Тогда
	//		
	//		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Подготовка);
	//		Если НЕ абс_СтатусДоговораСтарый.Пустая() Тогда
	//			СписокСтатусов.Добавить(абс_СтатусДоговораСтарый);	
	//		КонецЕсли;
	//		//АБС ВСТАВКА №46998 НАЧАЛО «29 сентября 2014 г.», Пополитов
	//		Если СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование) = Неопределено Тогда 
	//			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование);
	//		КонецЕсли;
	//		//\\АБС ВСТАВКА №46998 КОНЕЦ  
	//		
	//		//АБС ВСТАВКА №28363 НАЧАЛО «22 октября 2014 г.», Пополитов
	//		Если не абс_СтатусДоговораДляДопСогласования.Пустая() и СписокСтатусов.НайтиПоЗначению(абс_СтатусДоговораДляДопСогласования) = Неопределено Тогда 
	//			СписокСтатусов.Добавить(абс_СтатусДоговораДляДопСогласования);
	//		КонецЕсли;
	//		//\\АБС ВСТАВКА №28363 КОНЕЦ
	//		
	//	КонецЕсли;	
	//	// {{KM WARE Лазаревский К.В. Заявка №31760 05.11.2015 начало
	//	//      
	//	ДополнитьСписокСтатусовДляОтветстенногоЛица(СписокСтатусов);
		// }}KM WARE Лазаревский К.В. Заявка №31760 05.11.2015 окончание		
	КонецЕсли;
	
	//МассивОтветственных = ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций, МассивРолей);
	
	ДанныеПоЭтапуБП = Новый Структура;
	ДанныеПоЭтапуБП.Вставить("Ответственные", МассивОтветственных);
	
	Возврат ДанныеПоЭтапуБП;
	
КонецФункции

Функция ОбъекдинитьТаблицыЗначений(МассивТаблиц, Колонка)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	Индекс = 1;
	Для каждого Элем из МассивТаблиц Цикл
		ТекстЗапроса = ТекстЗапроса + ?(Индекс = 1,"","
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |") + 
					"ВЫБРАТЬ
	               |	ТЗ" + Индекс + ".Сотрудник
	               |ИЗ
	               |	&ТЗ" + Индекс + " КАК ТЗ" + Индекс;
				   
		Запрос.УстановитьПараметр("ТЗ" + Индекс, МассивТаблиц.Получить(Индекс - 1));
		Индекс = Индекс + 1;
	КонецЦикла;

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СложитьМассивы(СтруктураМассивов, ТолькоУникальные = Истина)
	ИтогМассив = Новый Массив;
	Для Каждого КлючИЗначение из СтруктураМассивов Цикл
		Если НЕ ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Элемент из КлючИЗначение.Значение Цикл
			Если ТолькоУникальные Тогда
				Если ИтогМассив.Найти(Элемент) = Неопределено Тогда
					ИтогМассив.Добавить(Элемент);
				КонецЕсли;
			Иначе
				ИтогМассив.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ИтогМассив;
КонецФункции

Процедура ВыводВТабДок(ТЗ)

	Макет = ПолучитьМакет("Макет");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ПорядокСогласования,
		|	ТЗ.Статус,
		|	ТЗ.Ответственный
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.абс_ЗакупочныйЗаказ") Тогда
		
		Статус = СсылкаНаОбъект.Статус;
		ЦФО = СсылкаНаОбъект.ЦФО;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	ВТ.ПорядокСогласования,
		|	ВТ.Статус КАК Статус,
		|	ВТ.Ответственный,
		|	абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних.Пользователь КАК Исполнитель,
		|	абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних.Период КАК Дата
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_ИзменениеСтатусовЗакупочногоЗаказа.СрезПоследних(&Дата, ЗакупочныйЗаказ = &СсылкаНаОбъект) КАК абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних
		|		ПО ВТ.Статус = абс_ИзменениеСтатусовЗакупочногоЗаказаСрезПоследних.СтатусЗакупочногоЗаказа
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСогласования
		|ИТОГИ
		|	МАКСИМУМ(Дата)
		|ПО
		|	Статус,
		|	Исполнитель";
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		Статус = СсылкаНаОбъект.абс_СтатусДоговора;
		ЦФО = Неопределено;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	ВТ.ПорядокСогласования,
		|	ВТ.Статус КАК Статус,
		|	ВТ.Ответственный,
		|	абс_ИзменениеСтатусов.Исполнитель КАК Исполнитель,
		|	абс_ИзменениеСтатусов.Период КАК Дата
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_ИзменениеСтатусовДоговоров.СрезПоследних(&Дата, Договор = &СсылкаНаОбъект) КАК абс_ИзменениеСтатусов
		|		ПО ВТ.Статус = абс_ИзменениеСтатусов.СтатусДоговора
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСогласования
		|ИТОГИ
		|	МАКСИМУМ(Дата)
		|ПО
		|	Статус,
		|	Исполнитель";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТЗ", ТЗ);	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());	
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);	
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьСтатус = Макет.ПолучитьОбласть("Статус");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	ОбластьЗаголовок.Параметры.ТекущийCтатус = "Текущий статус: " 
												+ ?(ЗначениеЗаполнено(Статус), Статус, "Не заполнен");
	ОбластьЗаголовок.Параметры.ЦФО = "ЦФО: " 
												+ ?(ЗначениеЗаполнено(ЦФО), ЦФО, "Не заполнен");
	
	//ТабДок.Очистить();
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	ВыборкаСтатус = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтатус.Следующий() Цикл
		
		ВыборкаСтатусИсполнитель = ВыборкаСтатус.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтатусИсполнитель.Следующий() Цикл
			
			Пройден = ЗначениеЗаполнено(ВыборкаСтатусИсполнитель.Исполнитель);
			
			ОбластьСтатус.Параметры.Заполнить(ВыборкаСтатусИсполнитель);
			ОбластьСтатус.Параметры.Пройден = Пройден;
			ОбластьОформления = ТабДок.Вывести(ОбластьСтатус, ВыборкаСтатусИсполнитель.Уровень());
			ТабДок.Область(ОбластьОформления.Верх, ОбластьОформления.Лево + 2, ОбластьОформления.Низ, 4).ЦветФона = ?(Пройден, WebЦвета.ЖелтоЗеленый
																																,WebЦвета.БледноЗолотистый);
			
			ВыборкаДетальныеЗаписи = ВыборкаСтатусИсполнитель.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень(),, НЕ Пройден);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.Показать("Объект согласования: " + СсылкаНаОбъект);
	
КонецПроцедуры

Функция ПолучитьПользователейСРолями(МассивСотркдников, МассивРолей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РолиИИсполнители.Исполнитель
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Роль В(&Роль)
	|	И РолиИИсполнители.Исполнитель В
	|			(ВЫБРАТЬ
	|				Пользователи.Ссылка
	|			ИЗ
	|				Справочник.Пользователи КАК Пользователи
	|			ГДЕ
	|				Пользователи.абс_Сотрудник В (&абс_Сотрудник))";
	Запрос.УстановитьПараметр("абс_Сотрудник", МассивСотркдников);
	Запрос.УстановитьПараметр("Роль", МассивРолей);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
КонецФункции	

Функция ПолучитьИсполнителейОрганизацийПоРолям(МассивОрганизаций = Неопределено, МассивРолей, МассивПользователей = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	               |	РолиИИсполнители.Исполнитель
	               |ИЗ
	               |	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	               |ГДЕ
	               |	" + ?(МассивОрганизаций = Неопределено, "","РолиИИсполнители.Организация В(&Организация)
	               |	И ") + "РолиИИсполнители.Роль В(&Роль)"
				   + ?(МассивПользователей = Неопределено, "", "
				   |	И РолиИИсполнители.Исполнитель В (&Исполнитель)") + "
				   |	И (РолиИИсполнители.Исполнитель.абс_Сотрудник.ДатаУвольнения = ДАТАВРЕМЯ(1,1,1,0,0,0)
				   |		ИЛИ РолиИИсполнители.Исполнитель.абс_Сотрудник.ДатаУвольнения > &ТекущаяДата)
				   |УПОРЯДОЧИТЬ ПО
				   |	РолиИИсполнители.Исполнитель.Наименование";
				   
	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	Запрос.УстановитьПараметр("Роль", МассивРолей);
	Запрос.УстановитьПараметр("Исполнитель", МассивПользователей);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
КонецФункции

//Для договоров контрагентов
Функция ПолучитьОтветственногоПД()
	
	СписокСотрудниковПД = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект.абс_ОтветственныйПД) Тогда
		
		// Попытаемся получить исполнителя ПД по подразделению инициатора договора.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	абс_НастройкаДляРаспределенияЗадачПД.Исполнитель
		|ИЗ
		|	РегистрСведений.абс_НастройкаДляРаспределенияЗадачПД КАК абс_НастройкаДляРаспределенияЗадачПД
		|ГДЕ
		|	абс_НастройкаДляРаспределенияЗадачПД.Использование
		|	И абс_НастройкаДляРаспределенияЗадачПД.Подразделение В(&Подразделение)");
		Запрос.УстановитьПараметр("Подразделение", абс_БизнесПроцессыПривелегированный.ПолучитьМассивРодителейПодразделения(СсылкаНаОбъект.абс_Ответственный.абс_Сотрудник.ПодразделениеОрганизации));
		
		ВыборкаИсполнителей = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаИсполнителей.Количество() > 0 Тогда
			Пока ВыборкаИсполнителей.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаИсполнителей.Исполнитель) Тогда
					СписокСотрудниковПД.Добавить(ВыборкаИсполнителей.Исполнитель);					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если  СписокСотрудниковПД.Количество() > 0 Тогда
			Возврат СписокСотрудниковПД;	
		КонецЕсли;	
		
		ЗапросЗадач = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РЗ.Пользователь КАК Исполнитель,
		|	РЗ.Период
		|ИЗ
		|	РегистрСведений.абс_РаспределениеЗадач КАК РЗ
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтборПоОрганизации
		|				ТОГДА РЗ.Организация = &Организация
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	РЗ.Период УБЫВ");
		
		//ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		
		ЗапросЗадач.УстановитьПараметр("ОтборПоОрганизации", Истина);
		ЗапросЗадач.УстановитьПараметр("Организация", СсылкаНаОбъект.Организация);			
		
		ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
		
		ПользовательКрайнейЗадачи = Неопределено;
		
		Если ВыборкаЗадач.Следующий() Тогда
			ПользовательКрайнейЗадачи = ВыборкаЗадач.Исполнитель;
		КонецЕсли;
		
		Если ПользовательКрайнейЗадачи <> Неопределено Тогда
			
			ЗапросНастройка = Новый Запрос(
			"ВЫБРАТЬ
			|	РолиИИсполнители.Исполнитель,
			|	РолиИИсполнители.абс_ИндексИсполнителя КАК абс_ИндексИсполнителя
			|ИЗ
			|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
			|ГДЕ
			|	РолиИИсполнители.Роль = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.СогласованиеПД)
			|	И (НЕ РолиИИсполнители.Исполнитель В
			|				(ВЫБРАТЬ
			|					РолиИИсполнители.Исполнитель
			|				ИЗ
			|					РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
			|				ГДЕ
			|					РолиИИсполнители.Роль = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.СуперПользователь)))
			|	И (НЕ РолиИИсполнители.абс_ИндексИсполнителя = 0)
			|	И ВЫБОР
			|			КОГДА &ОтборПоОрганизации
			|				ТОГДА РолиИИсполнители.Организация = &Организация
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	абс_ИндексИсполнителя");
			
			ЗапросНастройка.УстановитьПараметр("ОтборПоОрганизации", Истина);
			ЗапросНастройка.УстановитьПараметр("Организация", СсылкаНаОбъект.Организация);	
			
			ВыборкаНастройки = ЗапросНастройка.Выполнить().Выбрать();
			
			ПользовательТекущейЗадачи = Неопределено;
			
			ВыборкаНастройки.НайтиСледующий(Новый Структура("Исполнитель", ПользовательКрайнейЗадачи));
			
			Если НЕ ВыборкаНастройки.Следующий() Тогда
				ВыборкаНастройки.Сбросить();
				ВыборкаНастройки.Следующий();
			КонецЕсли;
			
			ПользовательТекущейЗадачи = ВыборкаНастройки.Исполнитель;
			СписокСотрудниковПД.Добавить(ПользовательТекущейЗадачи);
			
			Возврат СписокСотрудниковПД
			
		КонецЕсли;
	Иначе
		ПользовательТекущейЗадачи = СсылкаНаОбъект.абс_ОтветственныйПД;
		СписокСотрудниковПД.Добавить(ПользовательТекущейЗадачи);

		Возврат СписокСотрудниковПД
	КонецЕсли;
	
КонецФункции

//Проверка вывода статусов по большим лимитам
Функция ПроверитьНаобходимостьВыводаСтатуса(Статус)

	СписокСтатусов = Новый Массив;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.абс_ЗакупочныйЗаказ") Тогда
		Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.РольСогласователя,
			|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.БюджетнаяСтатья
			|ИЗ
			|	РегистрСведений.ttk_СтатьиСОсобымКонтролемЦелевогоИспользования КАК ttk_СтатьиСОсобымКонтролемЦелевогоИспользования
			|ГДЕ
			|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.БюджетнаяСтатья = &БюджетнаяСтатья";
			
			Запрос.УстановитьПараметр("БюджетнаяСтатья", СсылкаНаОбъект.БюджетнаяСтатья.Ссылка);
			
			ТЗРезультат = Запрос.Выполнить().Выгрузить();
			
			Если ТЗРезультат.Количество() > 0 Тогда
				
				СписокСтатусов.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ);
				
			КонецЕсли;
			
		ИначеЕсли Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам Тогда
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов,Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
			Если СсылкаНаОбъект.ИтогСуммаСНДС >= ПределСуммыУтверждения Тогда
				СписокСтатусов.Добавить(Статус);
			КонецЕсли;
			
		ИначеЕсли Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом Тогда
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, Справочники.РолиИсполнителей.Президент);
			Если СсылкаНаОбъект.ИтогСуммаСНДС >= ПределСуммыУтверждения Тогда
				СписокСтатусов.Добавить(Статус);
			КонецЕсли;
			
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");	
		
		ПределУтвержденияРуководителемПД = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
		Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров,
		Справочники.РолиИсполнителей.РуководительПД);			
		ПределУтвержденияДВКУР = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
		Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров,
		Справочники.РолиИсполнителей.СогласованиеДВКУР);
		врСуммаПоДоговору = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СсылкаНаОбъект.абс_СуммаБезНДС, мВалютаРегламентированногоУчета, СсылкаНаОбъект.ВалютаВзаиморасчетов, ТекущаяДата());											 
		Если врСуммаПоДоговору = 0 и ЗначениеЗаполнено(СсылкаНаОбъект.ttk_КатегорияСуммы) Тогда
			Если СсылкаНаОбъект.ttk_КатегорияСуммы = Перечисления.ttk_КатегорияСуммы.СуммаБольше2МлнБезНДС Тогда
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР);
			ИначеЕсли СсылкаНаОбъект.ttk_КатегорияСуммы = Перечисления.ttk_КатегорияСуммы.СуммаБольше20МлнБезНДС Тогда
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД);
			КонецЕсли;
		Иначе
			Если ЗапросДанныхСправочноИтогоБезНДС().Получить("СправочноИтогоБезНДС") >= ПределУтвержденияДВКУР 
				и врСуммаПоДоговору < ПределУтвержденияРуководителемПД Тогда
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР);
			ИначеЕсли врСуммаПоДоговору >= ПределУтвержденияРуководителемПД Тогда
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД);
			Иначе
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
			КонецЕсли;
		КонецЕсли;
		Если СсылкаНаОбъект.Организация = Справочники.Организации.НайтиПоНаименованию("КТТК", Истина) Тогда //АБС+ Тупиков 21418
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДирКСП);
		КонецЕсли;
	КонецЕсли;
		
	Возврат СписокСтатусов.Найти(Статус);

КонецФункции

Функция ЗапросДанныхСправочноИтогоБезНДС() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СсылкаНаОбъект.Организация);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(РС.Сумма) КАК СуммаПоОрганизации,
	               |	СУММА(РС.ПроцентОтклонения) КАК ПроцентОтклонения
	               |ИЗ
	               |	РегистрСведений.абс_СтоимостиАктивовНаПоследнююОтчетнуюДату.СрезПоследних(, Организация = &Организация) КАК РС";
				   
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	врСуммаПоОрганизации = ?(Результат.СуммаПоОрганизации=Null,0,Результат.СуммаПоОрганизации);
	врПроцентОтклонения  = ?(Результат.ПроцентОтклонения=Null,0,Результат.ПроцентОтклонения);
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(врСуммаПоОрганизации,"Сумма активов по организации: "+Формат(врСуммаПоОрганизации,"ЧДЦ=2")+" руб.");
	СписокЗначений.Добавить(врПроцентОтклонения,"Допустимый % отклонения: "+Формат(врПроцентОтклонения,"ЧДЦ=2")+"%");
	
	МассивСтатусовДоговора = Новый Массив;
	МассивСтатусовДоговора.Добавить(Перечисления.абсСтатусыДоговоров.Отмена);
	СтруктураПараметров = новый Структура;
	СтруктураПараметров.Вставить("Ссылка", СсылкаНаОбъект);
	СтруктураПараметров.Вставить("МассивСтатусовДоговора",МассивСтатусовДоговора);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(ДоговорыКонтрагентов.абс_СуммаБезНДС) КАК СуммаПоДоговору,
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	               |	ДоговорыКонтрагентов.абс_ОсновнойДоговор КАК ОсновнойДоговор,
	               |	ДоговорыКонтрагентов.Ссылка КАК Договор
	               |ПОМЕСТИТЬ ПреТаблица
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	(ДоговорыКонтрагентов.Ссылка = &Ссылка
	               |			ИЛИ ДоговорыКонтрагентов.абс_ОсновнойДоговор = &Ссылка)
	               |	И (НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	               |	И (НЕ ДоговорыКонтрагентов.абс_СтатусДоговора В (&МассивСтатусовДоговора))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	               |	ДоговорыКонтрагентов.абс_ОсновнойДоговор,
	               |	ДоговорыКонтрагентов.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	               |	СУММА(ДоговорыКонтрагентов.абс_СуммаБезНДС) КАК СуммаПоДоговору
	               |ПОМЕСТИТЬ ТаблицаДанных
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	(ДоговорыКонтрагентов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ПреТаблица.ОсновнойДоговор
	               |				ИЗ
	               |					ПреТаблица КАК ПреТаблица
	               |				ГДЕ
	               |					(НЕ ПреТаблица.ОсновнойДоговор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	               |				СГРУППИРОВАТЬ ПО
	               |								ПреТаблица.ОсновнойДоговор)
	               |			ИЛИ ДоговорыКонтрагентов.абс_ОсновнойДоговор В
	               |				(ВЫБРАТЬ
	               |					ПреТаблица.ОсновнойДоговор
	               |				ИЗ
	               |					ПреТаблица КАК ПреТаблица
	               |				ГДЕ
	               |					(НЕ ПреТаблица.ОсновнойДоговор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	               |				СГРУППИРОВАТЬ ПО
	               |								ПреТаблица.ОсновнойДоговор))
	               |	И (НЕ ДоговорыКонтрагентов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ПреТаблица.Договор
	               |				ИЗ
	               |					ПреТаблица КАК ПреТаблица
	               |				СГРУППИРОВАТЬ ПО
	               |								ПреТаблица.Договор))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПреТаблица.ВалютаВзаиморасчетов,
	               |	СУММА(ПреТаблица.СуммаПоДоговору)
	               |ИЗ
	               |	ПреТаблица КАК ПреТаблица
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПреТаблица.ВалютаВзаиморасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПреТаблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТаблицаДанных.ВалютаВзаиморасчетов,
	               |	СУММА(ТаблицаДанных.СуммаПоДоговору) КАК СуммаПоДоговору
	               |ИЗ
	               |	ТаблицаДанных КАК ТаблицаДанных
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаДанных.ВалютаВзаиморасчетов";
				   
	Результат = абс_Привилегированный.ВыполнитьЗапрос(ТекстЗапроса,СтруктураПараметров).Выбрать();
	врСуммаПоДоговору = 0;
	ДатаСервера = ТекущаяДата();
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Пока Результат.Следующий() Цикл
		Если Результат.ВалютаВзаиморасчетов.Пустая() Тогда
			Продолжить;
		КонецЕсли;		
		врСуммаПоДоговору = врСуммаПоДоговору + МодульВалютногоУчета.ПересчитатьВСуммуРегл(?(Результат.СуммаПоДоговору=Null,0,Результат.СуммаПоДоговору), ВалютаРегламентированногоУчета, Результат.ВалютаВзаиморасчетов, ДатаСервера)	
	КонецЦикла;	
	Если врСуммаПоОрганизации <= 0 Тогда 
		ТекПроцентОтклонения = 0
	Иначе
		ТекПроцентОтклонения = врСуммаПоДоговору / врСуммаПоОрганизации * 100;
	КонецЕсли;
	ПревышенПорогОтклонения = ТекПроцентОтклонения > врПроцентОтклонения; 
	СписокЗначений.Добавить(врСуммаПоДоговору,"Сумма по договору (и где он как основ.): "+Формат(врСуммаПоДоговору,"ЧДЦ=2")+" руб.");
	СписокЗначений.Добавить(ТекПроцентОтклонения,"Тек. % отклонения: "+Формат(ТекПроцентОтклонения,"ЧДЦ=2")+"%");
	СписокЗначений.Добавить(ПревышенПорогОтклонения,"Превышен % отклонения: "+?(ПревышенПорогОтклонения,"Да","Нет"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СправочноИтогоБезНДС",врСуммаПоДоговору);
	Соответствие.Вставить("ПревышенПорогОтклонения",ПревышенПорогОтклонения);
	Соответствие.Вставить("СписокЗначений",СписокЗначений);
	
	Возврат Соответствие;
	
КонецФункции