
Перем АДОДБСоединение; 
Перем АДОДБКоманда;

Перем ДатаОбработки Экспорт;


Процедура Загрузить() Экспорт
	
	Если ДатаОбработки = Неопределено Тогда 
		ДатаОбработки = ТекущаяДата();
	КонецЕсли;
	
	ТЗ_ОшибочныеСтроки = Новый ТаблицаЗначений;
	ТЗ_ОшибочныеСтроки.Колонки.Добавить("НомерСтрокиФайла");
	ТЗ_ОшибочныеСтроки.Колонки.Добавить("ТекстСтроки");
	
	//ДокументФайл = Новый ТекстовыйДокумент;
	//ДокументФайл.Прочитать(ПутьКФайлу, КодировкаТекста.UTF8);
	ДокументФайл = ПолучитьМакет("Макет");
	
	Для й = 0 по ДокументФайл.КоличествоСтрок() Цикл 
		ТекстСтроки = ДокументФайл.ПолучитьСтроку(й);
		Если НЕ ПустаяСтрока(ТекстСтроки) Тогда 
			ЗаписатьКонтрагента(й, ТекстСтроки);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьВнутрихолдинговыеОперации() Экспорт
	
	ТаблицаМакета = ПолучитьМакет("МакетВнутрихолдинговыхОпераций");
	
	Для й = 1 по ТаблицаМакета.ВысотаТаблицы Цикл 
		
		КодОперации = СокрЛП(ТаблицаМакета.Область(й, 1).Текст);
		
		Операция = Справочники.абс_ВнутрихолдинговыеОперацииРЖД.НайтиПоКоду(КодОперации);
		
		Если ЗначениеЗаполнено(Операция) Тогда 
			ОперацияОбъект = Операция.ПолучитьОбъект();
		Иначе 
			ОперацияОбъект = Справочники.абс_ВнутрихолдинговыеОперацииРЖД.СоздатьЭлемент();
		КонецЕсли;
		
		ОперацияОбъект.Наименование = СтрЗаменить(СокрЛП(ТаблицаМакета.Область(й, 2).Текст), Символы.ПС, "");
		ОперацияОбъект.Код = КодОперации; 
		ОперацияОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьКонтрагента(НомерСтроки, ТекстСтроки)
	
	СтруктураСтроки = Новый Структура("КодРЖД, НаименованиеРЖД, ИНН, КПП, ТекстСтроки, 
						| НайденоНесколько, КодСтраны, КодРодителяРЖД, 
						| КодРегионаРоссии, Город, Адрес, Индекс, Телефон, ДатаОбработки");
	СтруктураСтроки.ТекстСтроки  = ТекстСтроки;
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстСтроки, ";");
	
	Если МассивПодстрок.Количество() = 0 Тогда 
		ДобавитьСтрокуОшибки(СтруктураСтроки);
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки.КодРЖД       = СокрЛП(МассивПодстрок[0]);
	
	Если НЕ ЗначениеЗаполнено(СтруктураСтроки.КодРЖД) Тогда 
		Возврат;
	КонецЕсли;
		
	СтруктураСтроки.НаименованиеРЖД 	 = СокрЛП(МассивПодстрок[1]);
	СтруктураСтроки.КодСтраны 	 		 = СокрЛП(МассивПодстрок[2]);	
	СтруктураСтроки.КодРегионаРоссии 	 = СокрЛП(МассивПодстрок[3]);
	СтруктураСтроки.Город 				 = СокрЛП(МассивПодстрок[4]);
	СтруктураСтроки.Адрес 	 			 = СокрЛП(МассивПодстрок[6]);
	СтруктураСтроки.Индекс 	 			 = СокрЛП(МассивПодстрок[7]);
	СтруктураСтроки.Телефон 	 		 = СокрЛП(МассивПодстрок[13]);	
	СтруктураСтроки.ИНН 		 		 = СокрЛП(МассивПодстрок[8]);
	СтруктураСтроки.КПП 		 		 = СокрЛП(МассивПодстрок[9]);
	Если МассивПодстрок.Количество() > 17 Тогда
		СтруктураСтроки.КодРодителяРЖД  = СокрЛП(МассивПодстрок[17]);
	КонецЕсли;

	КонтрагентНайденПоБазе = Ложь;
	ЗаписьСуществует = Ложь;
	СтруктураЗаписи = РегистрыСведений.абс_КонтрагентыРЖД.ПолучитьСтруктуруЗаписи(СтруктураСтроки.КодРЖД);
	Если СтруктураЗаписи <> Неопределено Тогда 
		ЗаписьСуществует = Истина;
		СтруктураСтроки.ДатаОбработки = СтруктураЗаписи.Период;
	Иначе
		СтруктураСтроки.ДатаОбработки = ТекущаяДата();	
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(СтруктураСтроки.ИНН) И СтруктураСтроки.КодСтраны = "RU" Тогда 
		Контрагент = Неопределено;
	ИначеЕсли (НЕ ЗначениеЗаполнено(СтруктураСтроки.ИНН)) ИЛИ (НЕ ЗначениеЗаполнено(СтруктураСтроки.КПП)) Тогда 
		Контрагент = Неопределено;
	ИначеЕсли СтруктураСтроки.КодСтраны <> "RU" Тогда 
		Контрагент = Неопределено;
	Иначе
		Контрагент = НайтиКонтрагента(СтруктураСтроки, КонтрагентНайденПоБазе);	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда 
		ДобавитьСтрокуОшибки(СтруктураСтроки);
	Иначе
		СтруктураСтроки.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	Если (ЗаписьСуществует) И (НЕ КонтрагентНайденПоБазе) Тогда
		Возврат;
	КонецЕсли;
	 
	РегистрыСведений.абс_КонтрагентыРЖД.ЗаписатьКодРЖД(СтруктураСтроки.КодРЖД, СтруктураСтроки, СтруктураСтроки.ДатаОбработки);   
		
КонецПроцедуры

Процедура ЗагрузитьНастройкиОбработки() Экспорт 
	
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("абс_МэппингКонтрагентовРЖД",,,"абс_МэппингКонтрагентовРЖД");
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);	
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкиОбработки() Экспорт
	
	Настройки = Новый Структура("База, Сервер, Пользователь, Пароль, АутентификацияWindows");
								
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	
	ХранилищеОбщихНастроек.Сохранить("абс_МэппингКонтрагентовРЖД",  ,Настройки, ,"абс_МэппингКонтрагентовРЖД");
		
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ВЫГРУЩКА КОНТРАГЕНТОВ РЖД В SQL


Функция АДОСоединениеУстановить() Экспорт
	
	Попытка
		АДОДБСоединение = Новый COMОбъект("ADODB.Connection");
		АДОДБКоманда = Новый COMОбъект("ADODB.Command");
	Исключение
		
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#Иначе	
			
		#КонецЕсли
		
	КонецПопытки;	
	
	Если НЕ АутентификацияWindows Тогда
		
		АДОДБСоединение.ConnectionString = "Provider=sqloledb;Data Source=" 
			+ СокрЛП(Сервер)
			+ ";Initial Catalog=" + СокрЛП(База)
			+ ";User Id=" + СокрЛП(Пользователь)
			+ ";Password=" + Пароль + ";";
	Иначе
		
		АДОДБСоединение.ConnectionString = "Provider=sqloledb;Integrated Security=SSPI;Persist Security Info=False;Data Source=" 
			+ СокрЛП(Сервер)
			+ ";Initial Catalog=" + СокрЛП(База);
	КонецЕсли;
	
	
	Попытка
		
		АДОДБСоединение.ConnectionTimeout = 5;
		АДОДБСоединение.CommandTimeout = 6000;
		АДОДБСоединение.IsolationLevel = 256;
		АДОДБКоманда.CommandTimeout = 6000;
		
		АДОДБСоединение.Open();	
		АДОДБКоманда.ActiveConnection = АДОДБСоединение;
		Статус = Истина;
		
	Исключение
		
		АДОДБСоединение = Неопределено;
		АДОДБКоманда = Неопределено;
		Статус = Ложь;
		
		//Сообщить(ОписаниеОшибки());
		
		//#Если Клиент Тогда
			Сообщить("Не удалось установить соединение с промежуточной базой данных");
		//#Иначе	
			
		//#КонецЕсли
		
	КонецПопытки;
	
	Возврат Статус;
	
КонецФункции

Процедура ВыгрузитьКонтрагентыДоговора() Экспорт
	
	Если Не АДОСоединениеУстановить() Тогда	
		Возврат;
	КонецЕсли;
	
	ПекетРезультатов = ПолучитьПакетРезультатов_КонтрагентыДоговора();
	
	ЗаполнитьТаблицуСПроверкой("KontractorsRZD", 	  ПекетРезультатов[0]); 
	ЗаполнитьСтатусВыгрузкиВSQL(ПекетРезультатов[1]);
	
КонецПроцедуры

Функция ПолучитьПакетРезультатов_КонтрагентыДоговора()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абс_КонтрагентыРЖДСрезПоследних.КодРЖД КАК KODRZD,
	                      |	абс_КонтрагентыРЖДСрезПоследних.Контрагент.Код КАК KODEISUP,
	                      |	ВЫБОР
	                      |		КОГДА абс_КонтрагентыРЖДСрезПоследних.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	                      |			ТОГДА абс_КонтрагентыРЖДСрезПоследних.Контрагент.ИНН
	                      |		ИНАЧЕ абс_КонтрагентыРЖДСрезПоследних.ИНН
	                      |	КОНЕЦ КАК INN,
	                      |	ВЫБОР
	                      |		КОГДА абс_КонтрагентыРЖДСрезПоследних.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	                      |			ТОГДА абс_КонтрагентыРЖДСрезПоследних.Контрагент.КПП
	                      |		ИНАЧЕ абс_КонтрагентыРЖДСрезПоследних.КПП
	                      |	КОНЕЦ КАК KPP,
	                      |	ВЫБОР
	                      |		КОГДА абс_КонтрагентыРЖДСрезПоследних.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	                      |			ТОГДА ПОДСТРОКА(абс_КонтрагентыРЖДСрезПоследних.Контрагент.НаименованиеПолное, 0, 255)
	                      |		ИНАЧЕ абс_КонтрагентыРЖДСрезПоследних.НаименованиеРЖД
	                      |	КОНЕЦ КАК Full_Name,
	                      |	ВЫБОР
	                      |		КОГДА абс_КонтрагентыРЖДСрезПоследних.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	                      |			ТОГДА абс_КонтрагентыРЖДСрезПоследних.Контрагент.Наименование
	                      |		ИНАЧЕ абс_КонтрагентыРЖДСрезПоследних.НаименованиеРЖД
	                      |	КОНЕЦ КАК Name,
	                      |	абс_КонтрагентыРЖДСрезПоследних.Период КАК Data,
	                      |	ВЫБОР
	                      |		КОГДА абс_КонтрагентыРЖДСрезПоследних.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	                      |			ТОГДА 1
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК Status
	                      |ИЗ
	                      |	РегистрСведений.абс_КонтрагентыРЖД.СрезПоследних КАК абс_КонтрагентыРЖДСрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	абс_КонтрагентыРЖДСрезПоследних.Период,
	                      |	абс_КонтрагентыРЖДСрезПоследних.КодРЖД
	                      |ИЗ
	                      |	РегистрСведений.абс_КонтрагентыРЖД.СрезПоследних КАК абс_КонтрагентыРЖДСрезПоследних");
						  
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Процедура ЗаполнитьТаблицуСПроверкой(Таблица, Результат)
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Колонки = Результат.Колонки;
	ПоляИдентификаторы = "";
	Для каждого Колонка Из Колонки Цикл
		ПоляИдентификаторы = ПоляИдентификаторы + Колонка.Имя + ",";
	КонецЦикла;
	ПоляИдентификаторы = Лев(ПоляИдентификаторы, СтрДлина(ПоляИдентификаторы)-1);	
	
	Выборка = Результат.Выбрать();
	
	НачалоТекстаКоманды = "UPDATE " + Таблица + " SET ";  
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОбновление = "";
		ТекстВставка = "";
		Для каждого Колонка Из Колонки Цикл
			ТекстОбновление = ТекстОбновление + " " + Колонка.Имя + " = "  + ПолучитьПредставлениеПоля(Выборка[Колонка.Имя]) + ",";
			ТекстВставка = ТекстВставка + ПолучитьПредставлениеПоля(Выборка[Колонка.Имя]) + ",";	
		КонецЦикла;		
		ТекстОбновление = Лев(ТекстОбновление, СтрДлина(ТекстОбновление)-1);
		ТекстВставка = Лев(ТекстВставка, СтрДлина(ТекстВставка)-1);
		
		ТекстУсловия = " WHERE KODRZD = " + ПолучитьПредставлениеПоля(Выборка.KODRZD) + " IF (@@ROWCOUNT = 0 ) BEGIN INSERT INTO " + Таблица + " (";   
		
		АДОДБКоманда.CommandText = НачалоТекстаКоманды + ТекстОбновление + ТекстУсловия + ПоляИдентификаторы + ") VALUES (" + ТекстВставка + " ) END";	
		
		Попытка
			АДОДБКоманда.Execute();
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(АДОДБКоманда.CommandText);
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьСтатусВыгрузкиВSQL(Результат)
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		РегистрыСведений.абс_КонтрагентыРЖД.ЗаписатьСтатусВыгрузкиВSQL(Выборка.КодРЖД, Выборка.Период, Истина);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПОИСК КОНТРАГЕНТА

Функция НайтиКонтрагента(СтруктураСтроки, КонтрагентНайденПоБазе) 
	
	Контрагент = РегистрыСведений.абс_КонтрагентыРЖД.ПолучитьКонтрагентаПоКодуРЖД(СтруктураСтроки.КодРЖД);
	Если ЗначениеЗаполнено(Контрагент) Тогда 
		Возврат Контрагент;
	КонецЕсли;	
	
	Контрагент = ПоискКонтрагента_ИНН_КПП(СтруктураСтроки);	
	Если ЗначениеЗаполнено(Контрагент) Тогда 
		КонтрагентНайденПоБазе = Истина;
		Возврат Контрагент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПоискКонтрагента_ИНН_КПП(СтруктураСтроки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Контрагенты.Ссылка,
	                      |	Контрагенты.ИНН,
	                      |	Контрагенты.Наименование,
	                      |	Контрагенты.КПП
	                      |ИЗ
	                      |	Справочник.Контрагенты КАК Контрагенты
	                      |ГДЕ
	                      |	Контрагенты.ИНН = &ИНН
	                      |	И Контрагенты.КПП = &КПП
	                      |	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)");		
	
	Запрос.УстановитьПараметр("ИНН", СтруктураСтроки.ИНН);
	Запрос.УстановитьПараметр("КПП", СтруктураСтроки.КПП);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда 
		СтруктураСтроки.НайденоНесколько = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ПоискКонтрагента_ИНН(ИНН)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН,
	|	Контрагенты.Наименование,
	|	Контрагенты.КПП
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)");		
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ПоискКонтрагента_ИНН_Наименование(ИНН, наименование)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН,
	|	Контрагенты.Наименование,
	|	Контрагенты.КПП
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	Контрагенты.Наименование = &Наименование
	|	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)");		
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ

Процедура ДобавитьСтрокуОшибки(СтруктураСтроки)
	ЗаполнитьЗначенияСвойств(Мэппинг.Добавить(), СтруктураСтроки);
КонецПроцедуры

Функция ПолучитьПредставлениеПоля(Поле)
	
	Если ТипЗнч(Поле) = Тип("Число") Тогда
		Возврат Формат(Поле, "ЧРД=.; ЧН=0; ЧГ=0");
	ИначеЕсли Поле = NULL ИЛИ НЕ ЗначениеЗаполнено(Поле) Тогда
		Возврат "NULL";
	ИначеЕсли ТипЗнч(Поле) = Тип("Строка") Тогда
		Возврат "'" + СокрЛП(ОбработатьСтроку(Поле)) + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Булево") Тогда
		Возврат ?(Поле, "1", "0");
	ИначеЕсли ТипЗнч(Поле) = Тип("Дата") Тогда
		Возврат "'" + Формат(Поле, "ДФ='yyyyMMdd HH:mm:ss'") + "'";
	ИначеЕсли Поле = ВидДвиженияНакопления.Приход Тогда
		Возврат "0";
	ИначеЕсли Поле = ВидДвиженияНакопления.Расход Тогда
		Возврат "1";
	КонецЕсли;
	
КонецФункции

Функция ОбработатьСтроку(Знач Значение)
	
	Значение = СтрЗаменить(Значение, """", "");
	Значение = СтрЗаменить(Значение, "'", "");
	
	Возврат Значение;
	
КонецФункции






