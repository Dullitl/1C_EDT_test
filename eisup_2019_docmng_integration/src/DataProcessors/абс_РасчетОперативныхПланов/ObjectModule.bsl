
//////////////////////////////////////////
//// Функции получения расчетных таблиц

Функция ПолучитьТаблицуПланаОплат(ПланПоставокРеализаций, ПланОплат = Неопределено, Факт = Ложь) Экспорт 
	Если ПланОплат = Неопределено Тогда 
		ПланОплат = ПланПоставокРеализаций.СкопироватьКолонки();
	КонецЕсли;
	
	ЕстьКолонкаФакт = (Не ПланОплат.Колонки.Найти("ЭтоФакт") = Неопределено);
	ПлановыеСуммыПоПроектам = Новый Соответствие;
	Если ЕстьКолонкаФакт И Факт Тогда 
		ТаблицаПланПериодов = ПланОплат.Скопировать(Новый Структура("ЭтоФакт", Ложь));		
		Для Каждого СтрокаТЗ Из ПланПоставокРеализаций Цикл 
			ПериодОплаты = КонецМесяца(СтрокаТЗ.Период) + 86400 * ?(ОтсрочкаВРабочихДнях, ПолучитьКоличествоРбочихДней(КонецМесяца(СтрокаТЗ.Период), КоличествоДнейОтсрочки), КоличествоДнейОтсрочки);
			Если ТаблицаПланПериодов.НайтиСтроки(Новый Структура("Период, Проект", НачалоМесяца(ПериодОплаты), СтрокаТЗ.Проект)).Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;			
			Если ПлановыеСуммыПоПроектам.Получить(СтрокаТЗ.Проект) = Неопределено Тогда 
				ПлановыеСуммыПоПроектам.Вставить(СтрокаТЗ.Проект, 0);
			КонецЕсли;
			ПлановыеСуммыПоПроектам[СтрокаТЗ.Проект] = ПлановыеСуммыПоПроектам[СтрокаТЗ.Проект] + СтрокаТЗ.Сумма;
		КонецЦикла;
	Иначе 		
		Для Каждого СтрокаТЗ Из ПланПоставокРеализаций Цикл
			Если ПлановыеСуммыПоПроектам.Получить(СтрокаТЗ.Проект) = Неопределено Тогда 
				ПлановыеСуммыПоПроектам.Вставить(СтрокаТЗ.Проект, 0);
			КонецЕсли;
			ПлановыеСуммыПоПроектам[СтрокаТЗ.Проект] = ПлановыеСуммыПоПроектам[СтрокаТЗ.Проект] + СтрокаТЗ.Сумма;
		КонецЦикла;
	КонецЕсли;
	ПроцентАванса = ДоговорКонтрагента.абс_ПроцентАвансаПоДоговору;
	ПроцентРезерва = ДоговорКонтрагента.абс_ПроцентРезерваПоДоговору;
	
	ТаблицаПроектовСПериодами = ПланОплат.СкопироватьКолонки("Период, Проект");
	
	Для Каждого СтрокаПланПР Из ПланПоставокРеализаций Цикл 
		
		ПериодОплаты = КонецМесяца(СтрокаПланПР.Период) + 86400 * ?(ОтсрочкаВРабочихДнях, ПолучитьКоличествоРбочихДней(КонецМесяца(СтрокаПланПР.Период), КоличествоДнейОтсрочки), КоличествоДнейОтсрочки);
		
		МассивСтрокОплат = ПланОплат.НайтиСтроки(Новый Структура("Период, Проект", НачалоМесяца(ПериодОплаты), СтрокаПланПР.Проект));		
		Если МассивСтрокОплат.Количество() = 0 Тогда 
			НоваяСтрокаПланОплат = ПланОплат.Добавить();
		Иначе 
			НоваяСтрокаПланОплат = МассивСтрокОплат[0];
			Если ЕстьКолонкаФакт Тогда 
				Если НоваяСтрокаПланОплат.ЭтоФакт Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрокаПланОплат.Период = НачалоМесяца(ПериодОплаты);
		НоваяСтрокаПланОплат.Проект = СтрокаПланПР.Проект;
		НоваяСтрокаПланОплат.Сумма = РассчитатьСуммуОплаты(СтрокаПланПР.Сумма, ПлановыеСуммыПоПроектам[СтрокаПланПР.Проект], ПроцентАванса, ПроцентРезерва, Факт, СтрокаПланПР.Проект);
		
		НоваяСтрокаПроектовСПериодами = ТаблицаПроектовСПериодами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПроектовСПериодами, НоваяСтрокаПланОплат);
		
	КонецЦикла;
	
	//нахождение таблицы оплат проектов с минимальными периодами
	ЕСли ТаблицаПроектовСПериодами.Количество() > 0 Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТаблицаПланаОплат", ПланОплат);
		Запрос.УстановитьПараметр("ТаблицаПроектовСПериодами", ТаблицаПроектовСПериодами);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаПроектовСПериодами.Проект,
		               |	ТаблицаПроектовСПериодами.Период
		               |ПОМЕСТИТЬ ВТ_ТаблицаПроектовСПериодами
		               |ИЗ
		               |	&ТаблицаПроектовСПериодами КАК ТаблицаПроектовСПериодами
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ТаблицаПроектовСПериодами.Проект,
		               |	МИНИМУМ(ВТ_ТаблицаПроектовСПериодами.Период) КАК Период
		               |ПОМЕСТИТЬ ВТ_ТаблицаПроектовСМинПериодами
		               |ИЗ
		               |	ВТ_ТаблицаПроектовСПериодами КАК ВТ_ТаблицаПроектовСПериодами
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ТаблицаПроектовСПериодами.Проект
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаПланаОплат.Проект,
		               |	ТаблицаПланаОплат.Период
		               |ПОМЕСТИТЬ ВТ_ТаблицаПланаОплат
		               |ИЗ
		               |	&ТаблицаПланаОплат КАК ТаблицаПланаОплат
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ТаблицаПланаОплат.Проект,
		               |	ВТ_ТаблицаПланаОплат.Период
		               |ИЗ
		               |	ВТ_ТаблицаПланаОплат КАК ВТ_ТаблицаПланаОплат
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПроектовСМинПериодами КАК ВТ_ТаблицаПроектовСМинПериодами
		               |		ПО ВТ_ТаблицаПланаОплат.Проект = ВТ_ТаблицаПроектовСМинПериодами.Проект
		               |			И ВТ_ТаблицаПланаОплат.Период < ВТ_ТаблицаПроектовСМинПериодами.Период";
					   
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		
		//обнуляем суммы меньших периодов...
		Для каждого СтрокаТЗ Из ТаблицаРезультат Цикл
			
			НайдСтроки = ПланОплат.НайтиСтроки(Новый Структура("Проект, Период", СтрокаТЗ.Проект, СтрокаТЗ.Период));
			Для каждого НайдСтрока Из НайдСтроки Цикл
				НайдСтрока.Сумма = 0;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕСли;
	
	// Отнести аванс и резерв на необходимые дни
	ДобавитьАвансРезерв(ПланОплат, ПроцентАванса, ПроцентРезерва, ПлановыеСуммыПоПроектам, Факт);
	Возврат ПланОплат;
КонецФункции

Функция ПолучитьТаблицуОперПланаПоставокРеализаций(ПланПоставокРеализаций, ОперПланПоступленийРеализаций = Неопределено) Экспорт 
	Если ОперПланПоступленийРеализаций = Неопределено Тогда 
		ОперПланПоступленийРеализаций = ПланПоставокРеализаций.Скопировать();
	КонецЕсли;
	
	СписокСценариевФакт = Новый Массив;
	СписокСценариевФакт.Добавить(Справочники.СценарииПланирования.НайтиПоКоду("000000003"));  //Факт
	СписокСценариевФакт.Добавить(Справочники.СценарииПланирования.НайтиПоКоду("000000055"));  //ТД по поставке ФАКТ
	СписокСценариевФакт.Добавить(Справочники.СценарииПланирования.НайтиПоКоду("000000028"));  //КВ по поставке ФАКТ
	СписокСценариевФакт.Добавить(Справочники.СценарииПланирования.НайтиПоКоду("000000059"));  //Поступление ТМЦ
	
	МассивПроектов = ПланПоставокРеализаций.ВыгрузитьКолонку("Проект");
	СтруктураПериодов = ПолучитьПериодПоступленияРеализацииФакт(МассивПроектов, ПланПоставокРеализаций);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.Проект КАК Проект,
	|	ОборотыБюджетовОбороты.Период КАК Период,
	|	ОборотыБюджетовОбороты.СуммаУпрОборот КАК Сумма
	|ПОМЕСТИТЬ втФакт
	|ИЗ
	|	РегистрНакопления.ОборотыБюджетов.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Месяц,
	|			Сценарий В (&СценарииФакт)
	|				И ДоговорКонтрагента = &ДоговорКонтрагента
	|				И Проект В (&МассивПроектов)) КАК ОборотыБюджетовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ втПериоды
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапросФакт.Проект,
	|	втПериоды.Период,
	|	0 КАК Сумма
	|ПОМЕСТИТЬ втПустыеПериоды
	|ИЗ
	|	втПериоды КАК втПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			втФакт.Проект КАК Проект,
	|			МАКСИМУМ(втФакт.Период) КАК ПериодМаксимум,
	|			МИНИМУМ(втФакт.Период) КАК ПериодМинимум
	|		ИЗ
	|			втФакт КАК втФакт
	|		
	|		СГРУППИРОВАТЬ ПО
	|			втФакт.Проект) КАК ВложенныйЗапросФакт
	|		ПО втПериоды.Период < ВложенныйЗапросФакт.ПериодМаксимум
	|			//И втПериоды.Период > ВложенныйЗапросФакт.ПериодМинимум
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.Проект КАК Проект,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		втФакт.Период КАК Период,
	|		втФакт.Проект КАК Проект,
	|		втФакт.Сумма КАК Сумма
	|	ИЗ
	|		втФакт КАК втФакт
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втПустыеПериоды.Период,
	|		втПустыеПериоды.Проект,
	|		втПустыеПериоды.Сумма
	|	ИЗ
	|		втПустыеПериоды КАК втПустыеПериоды) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Проект,
	|	ВложенныйЗапрос.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Проект,
	|	ВложенныйЗапрос.Период
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	СУММА(Сумма)
	|ПО
	|	Проект";
	
	Запрос.УстановитьПараметр("СценарииФакт", СписокСценариевФакт);
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(СтруктураПериодов.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(СтруктураПериодов.КонецПериода));
	
	ДеревоФакт = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ФактЗаФактПериод = 0;
	
	Для Каждого СтрокаПроект Из ДеревоФакт.Строки Цикл 
		ФактЗаФактПериод = СтрокаПроект.Сумма;
		
		ПланЗаФактПериод = 0;
		
		Для Каждого СтрокаПериод Из СтрокаПроект.Строки Цикл 
			
			МассивСтрокПлан = ПланПоставокРеализаций.НайтиСтроки(Новый Структура("Период, Проект", НачалоМесяца(СтрокаПериод.Период), СтрокаПериод.Проект));
			Для Каждого СтрокаПлан Из МассивСтрокПлан Цикл 
				ПланЗаФактПериод = ПланЗаФактПериод + СтрокаПлан.Сумма;
			КонецЦикла;
			
			МассивСтрокОперПлан = ОперПланПоступленийРеализаций.НайтиСтроки(Новый Структура("Период, Проект", СтрокаПериод.Период, СтрокаПериод.Проект));
			Если МассивСтрокОперПлан.Количество() = 0 Тогда 
				НоваяСтрокаОперФакт = ОперПланПоступленийРеализаций.Добавить();
			Иначе 
				НоваяСтрокаОперФакт = МассивСтрокОперПлан[0];
			КонецЕсли;
			
			НоваяСтрокаОперФакт.Проект = СтрокаПериод.Проект;
			НоваяСтрокаОперФакт.Период = НачалоМесяца(СтрокаПериод.Период);
			НоваяСтрокаОперФакт.Сумма = СтрокаПериод.Сумма;
			 
		 КонецЦикла;
		 РазницаПланФакт = ФактЗаФактПериод - ПланЗаФактПериод;
		 РаскидатьРазницуПланФакт(СтрокаПериод.Период, РазницаПланФакт, ОперПланПоступленийРеализаций, СтрокаПроект.Проект);
	КонецЦикла;
	Возврат ОперПланПоступленийРеализаций;
КонецФункции

Функция ПолучитьТаблицуОперПланаОплат(ОперПланПоступленийРеализаций, ПланОплат) Экспорт 
	
	ЗапросПериод = Новый Запрос;
	ЗапросПериод.Текст =
	"ВЫБРАТЬ
	|	втПериоды.Период
	|ПОМЕСТИТЬ втПериоды
	|ИЗ
	|	&втПериоды КАК втПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(втПериоды.Период) КАК НачалоПериода,
	|	МАКСИМУМ(втПериоды.Период) КАК КонецПериода
	|ИЗ
	|	втПериоды КАК втПериоды";
	ЗапросПериод.УстановитьПараметр("втПериоды", ПланОплат);
	ВыборкаПериоды = ЗапросПериод.Выполнить().Выбрать();
	Если Не ВыборкаПериоды.Следующий() Тогда 
		Возврат ОперПланПоступленийРеализаций;
	КонецЕсли;
	Оплаты = ПолучитьТаблицуОплат(ВыборкаПериоды.НачалоПериода, ВыборкаПериоды.КонецПериода, ПланОплат);
	
	ОперПланОплат = ПланОплат.Скопировать();
	ОперПланОплат.Колонки.Добавить("ЭтоФакт", Новый ОписаниеТипов("Булево"));
	ОперПланОплат.ЗаполнитьЗначения(Ложь, "ЭтоФакт");
	Для Каждого СтрокаОплаты Из Оплаты Цикл 
		СтрокиОперПланПоступлений = ОперПланОплат.НайтиСтроки(Новый Структура("Период, Проект", НачалоДня(СтрокаОплаты.Период), СтрокаОплаты.Проект));
		Если СтрокиОперПланПоступлений.Количество() = 0 Тогда 
			СтрокаОперПланПоступлений = ОперПланОплат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперПланПоступлений, СтрокаОплаты);
		Иначе 
			СтрокаОперПланПоступлений = СтрокиОперПланПоступлений[0];
		КонецЕсли;  		
		СтрокаОперПланПоступлений.Сумма = СтрокаОплаты.Сумма;
		СтрокаОперПланПоступлений.ЭтоФакт = Истина;
	КонецЦикла;
	// Сначала опер план оплат считатется от опер плана реализаций-поступлений, а потом разница с факт суммами распределяетя (или падает на месяцы по порядку)
	ОперПланОплат = ПолучитьТаблицуПланаОплат(ОперПланПоступленийРеализаций, ОперПланОплат, Истина);	
	// Распределить разницу между фактом и планом по проектам
	ИтогиОперПланОплат = ОперПланОплат.Скопировать();
	ИтогиОперПланОплат.Свернуть("Проект", "Сумма");
	ИтогиОперПланПоступленийРеализаций = ОперПланПоступленийРеализаций.Скопировать();
	ИтогиОперПланПоступленийРеализаций.Свернуть("Проект", "Сумма");
	Для Каждого СтрокаПроект Из ИтогиОперПланОплат Цикл 
		СтрокаСравнения = ИтогиОперПланПоступленийРеализаций.Найти(СтрокаПроект.Проект, "Проект");
		Если СтрокаСравнения = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		РазницаДляРаспределения = СтрокаПроект.Сумма - СтрокаСравнения.Сумма;
		Если РазницаДляРаспределения = 0 Тогда 
			Продолжить;
		КонецЕсли;
		РаскидатьРазницуПланФакт(Дата(1,1,1), РазницаДляРаспределения, ОперПланОплат, СтрокаПроект.Проект);
	КонецЦикла;
	Возврат ОперПланОплат;
КонецФункции

//////////////////////////////////////////
//// Получение текущих данных

Функция ПолучитьТаблицуГрафика(УсловияОплат, ОперативныеДанные, Проект = Неопределено) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(УсловияОплатыПоДоговорам_СрезПоследних.ПериодРегистрации, МЕСЯЦ) КАК Период,
	|	ВЫРАЗИТЬ(УсловияОплатыПоДоговорам_СрезПоследних.Проект КАК Справочник.Проекты) КАК Проект,
	|	ВЫРАЗИТЬ(УсловияОплатыПоДоговорам_СрезПоследних.СуммаРегл КАК ЧИСЛО(15, 2)) КАК Сумма
	|ИЗ
	|	РегистрСведений.абс_УсловияОплатыПоДоговорам.СрезПоследних(
	|			,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И УсловиеОплаты = &УсловиеОплаты
	|				И ОперативныеДанные = &ОперативныеДанные
	|				" + ?(ЗначениеЗаполнено(Проект), "И Проект = &Проект", "") + ") КАК УсловияОплатыПоДоговорам_СрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проект,
	|	Период
	|АВТОУПОРЯДОЧИВАНИЕ";
		
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("УсловиеОплаты", УсловияОплат);
	Запрос.УстановитьПараметр("ОперативныеДанные", ОперативныеДанные);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Возврат ТЗ;	
КонецФункции

//////////////////////////////////////////
//// Вспомогательные процедуры и функции

Процедура ОбнулитьДанныеГрафиков(ТаблицаДанных, УсловиеОплаты, ОперативныеДанные, ДвиженияПоНулевымСуммам)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДанных.Проект,
	               |	ТаблицаДанных.Период
	               |ПОМЕСТИТЬ ВТ_ТаблицаОсновныхПериодов
	               |ИЗ
	               |	&ТаблицаДанных КАК ТаблицаДанных
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УсловияОплатыПоДоговорам_СрезПоследних.Проект КАК Проект,
	               |	УсловияОплатыПоДоговорам_СрезПоследних.ПериодРегистрации КАК Период,
	               |	УсловияОплатыПоДоговорам_СрезПоследних.Регистратор КАК ПлановыйГрафик,
	               |	0 КАК Сумма
	               |ИЗ
	               |	РегистрСведений.абс_УсловияОплатыПоДоговорам.СрезПоследних(
	               |			&ДатаСреза,
	               |			ДоговорКонтрагента = &ДоговорКонтрагента
	               |				И УсловиеОплаты = &УсловиеОплаты
	               |				И ОперативныеДанные = &ОперативныеДанные
	               |				И Проект В
	               |					(ВЫБРАТЬ
	               |						Т.Проект
	               |					ИЗ
	               |						ВТ_ТаблицаОсновныхПериодов КАК Т)
	               |				И (НЕ ПериодРегистрации В
	               |						(ВЫБРАТЬ
	               |							Т.Период
	               |						ИЗ
	               |							ВТ_ТаблицаОсновныхПериодов КАК Т))) КАК УсловияОплатыПоДоговорам_СрезПоследних
	               |ГДЕ
	               |	УсловияОплатыПоДоговорам_СрезПоследних.СуммаРегл <> 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УсловияОплатыПоДоговорам_СрезПоследних.Регистратор.Дата УБЫВ,
	               |	Период
	               |ИТОГИ ПО
	               |	ПлановыйГрафик";
				   
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("ДатаСреза", Новый Граница(КонецДня(ТекущаяДата())));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("УсловиеОплаты", УсловиеОплаты);
	Запрос.УстановитьПараметр("ОперативныеДанные", ОперативныеДанные);
				   
	ТаблицаОбнуляемыхДанных = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Для каждого СтрокаДокумент Из ТаблицаОбнуляемыхДанных.Строки Цикл
		
		ЕСли НачалоДня(СтрокаДокумент.ПлановыйГрафик.Дата) = НачалоДня(ТекущаяДата()) Тогда
			
			ПлановыйГрафикОбъект = СтрокаДокумент.ПлановыйГрафик.ПолучитьОбъект();
			
			Для каждого СтрокаТЗ Из СтрокаДокумент.Строки Цикл
				ТЧ_Оплаты = ПлановыйГрафикОбъект.Оплаты;
				СтрокаТЧ = ТЧ_Оплаты.Найти(СтрокаТЗ.Период, "ПериодРегистрации");
				СтрокаТЧ.Сумма = 0;
				СтрокаТЧ.ДвиженияПоНулевымСуммам = Истина;
			КонецЦикла;
			
			ПлановыйГрафикОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			
			Для каждого СтрокаТЗ Из СтрокаДокумент.Строки Цикл
				ДвиженияПоНулевымСуммам = Истина;
			
				СтрокаТаблицыДанных = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанных, СтрокаТЗ);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуОплат(НачалоПериода, КонецПериода, Таблица)
	МассивПроектов = Таблица.ВыгрузитьКолонку("Проект");
	СтруктураПериодов = ПолучитьПериодОплатыФакт(МассивПроектов, Таблица);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	абс_ДДСПоПроектамОбороты.Период,
	|	абс_ДДСПоПроектамОбороты.Проект,
	|	абс_ДДСПоПроектамОбороты.СуммаРеглОборот КАК Сумма
	|ПОМЕСТИТЬ втФакт
	|ИЗ
	|	РегистрНакопления.абс_ДДСПоПроектам.Обороты(
	|			НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ),
	|			Месяц,
	|			Проект В (&СписокПроектов)
	|				И ДоговорКонтрагента = &ДоговорКонтрагента
	|				И ОплатаАванс = ЗНАЧЕНИЕ(Перечисление.ВидыОтчетовПоПлатежамКомиссия.Оплата)
	|				И ФактОперФакт = ЗНАЧЕНИЕ(Перечисление.абс_ФактОперФакт.Факт)) КАК абс_ДДСПоПроектамОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ втПериоды
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапросФакт.Проект,
	|	втПериоды.Период,
	|	0 КАК Сумма
	|ПОМЕСТИТЬ втПустыеПериоды
	|ИЗ
	|	втПериоды КАК втПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			втФакт.Проект КАК Проект,
	|			МАКСИМУМ(втФакт.Период) КАК ПериодМаксимум,
	|			МИНИМУМ(втФакт.Период) КАК ПериодМинимум
	|		ИЗ
	|			втФакт КАК втФакт
	|		
	|		СГРУППИРОВАТЬ ПО
	|			втФакт.Проект) КАК ВложенныйЗапросФакт
	|		ПО втПериоды.Период < ВложенныйЗапросФакт.ПериодМаксимум
	|			//И втПериоды.Период > ВложенныйЗапросФакт.ПериодМинимум
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.Проект,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		втФакт.Период КАК Период,
	|		втФакт.Проект КАК Проект,
	|		втФакт.Сумма КАК Сумма
	|	ИЗ
	|		втФакт КАК втФакт
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втПустыеПериоды.Период,
	|		втПустыеПериоды.Проект,
	|		втПустыеПериоды.Сумма
	|	ИЗ
	|		втПустыеПериоды КАК втПустыеПериоды) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Проект,
	|	ВложенныйЗапрос.Период";

	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПериодов.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", СтруктураПериодов.КонецПериода);
	Запрос.УстановитьПараметр("СписокПроектов", МассивПроектов);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Возврат ТЗ;
КонецФункции

Функция РассчитатьСуммуОплаты(СуммаПериод, СуммаДоговор, ПроцентАванса, ПроцентРезерва, Факт, Проект) Экспорт 
	Если Факт Тогда 
		АвансРезерв = ПолучитьАвансРезерв(Проект);
		
		Если АвансРезерв.Аванс = 0 Тогда 
			Аванс = СуммаДоговор * ПроцентАванса / 100;
		Иначе 
			Аванс = АвансРезерв.Аванс;
		КонецЕсли;
		
		Если АвансРезерв.Резерв = 0 Тогда 
			Резерв = СуммаДоговор * ПроцентРезерва / 100;
		Иначе 
			Резерв = АвансРезерв.Резерв;
		КонецЕсли;
	Иначе 
		Аванс = СуммаДоговор * ПроцентАванса / 100;
		Резерв = СуммаДоговор * ПроцентРезерва / 100;
	КонецЕсли;
	СуммаОплаты = СуммаПериод - Аванс * (СуммаПериод / СуммаДоговор) - Резерв * (СуммаПериод / СуммаДоговор);
	Возврат СуммаОплаты;
КонецФункции

Процедура РаскидатьРазницуПланФакт(Период, СуммаРазницы, ОперПланПоступленийРеализаций, Проект = Неопределено)
	
	ИсходнаяСумма = ОперПланПоступленийРеализаций.Итог("Сумма") - СуммаРазницы;
	
	ЕстьКолонкаФакт = (Не ОперПланПоступленийРеализаций.Колонки.Найти("ЭтоФакт") = Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втПериоды.Период,
	|	втПериоды.Проект,
	|	втПериоды.Сумма
	|ПОМЕСТИТЬ втПериоды
	|ИЗ
	|	&втПериоды КАК втПериоды " + ?(ЕстьКолонкаФакт, " ГДЕ втПериоды.ЭтоФакт = ЛОЖЬ", "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПериоды.Период КАК Период,
	|	втПериоды.Проект КАК Проект,
	|	втПериоды.Сумма КАК Сумма
	|ИЗ
	|	втПериоды КАК втПериоды
	|ГДЕ
	|	" + ?(ЕстьКолонкаФакт, "ИСТИНА", " КОНЕЦПЕРИОДА(втПериоды.Период, МЕСЯЦ) > КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)") + "
	|	" + ?(ЗначениеЗаполнено(Проект), "И втПериоды.Проект = &Проект", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("втПериоды", ОперПланПоступленийРеализаций);
	ДеревоДанных = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаИтог Из ДеревоДанных.Строки Цикл 
		
		СтрокиПоПроекту = СтрокаИтог.Строки;			
		
		Если Не РаспределатьРазницуОперПлан Тогда 
			ОсталосьРаспределить = СуммаРазницы;
			Для Каждого СтрокаПоПроекту Из СтрокиПоПроекту Цикл 		
				
				МассивСтрокОплат = ОперПланПоступленийРеализаций.НайтиСтроки(Новый Структура("Период, Проект", НачалоМесяца(СтрокаПоПроекту.Период), СтрокаПоПроекту.Проект));		
				Если МассивСтрокОплат.Количество() = 0 Тогда 
					Продолжить;
				Иначе 
					НоваяСтрокаПланОплат = МассивСтрокОплат[0];
				КонецЕсли;
				
				НоваяСумма = Макс(НоваяСтрокаПланОплат.Сумма - ОсталосьРаспределить, 0);
				ОсталосьРаспределить = Макс(ОсталосьРаспределить - НоваяСтрокаПланОплат.Сумма, 0);
				НоваяСтрокаПланОплат.Сумма = НоваяСумма;
				
			КонецЦикла;
		Иначе 
			Для Каждого СтрокаПоПроекту Из СтрокиПоПроекту Цикл
				
				МассивСтрокОплат = ОперПланПоступленийРеализаций.НайтиСтроки(Новый Структура("Период, Проект", НачалоМесяца(СтрокаПоПроекту.Период), СтрокаПоПроекту.Проект));		
				Если МассивСтрокОплат.Количество() = 0 Тогда 
					Продолжить;
				Иначе 
					НоваяСтрокаПланОплат = МассивСтрокОплат[0];
				КонецЕсли;
				
				НоваяСтрокаПланОплат.Сумма = Окр(НоваяСтрокаПланОплат.Сумма - СуммаРазницы * СтрокаПоПроекту.Сумма / СтрокаИтог.Сумма, 2);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	НоваяСумма = ОперПланПоступленийРеализаций.Итог("Сумма");
	Если Не НоваяСумма = ИсходнаяСумма И Не НоваяСтрокаПланОплат = Неопределено Тогда 
		НоваяСтрокаПланОплат.Сумма = НоваяСтрокаПланОплат.Сумма + (ИсходнаяСумма - НоваяСумма);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьКоличествоРбочихДней(Период, КоличествоДней)
	Возврат КоличествоДней;
КонецФункции

Функция ПолучитьАвансРезерв(Проект)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	абс_ДДСПоПроектамОбороты.Проект,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА абс_ДДСПоПроектамОбороты.ОплатаАванс = ЗНАЧЕНИЕ(Перечисление.ВидыОтчетовПоПлатежамКомиссия.Резерв)
	|					ТОГДА абс_ДДСПоПроектамОбороты.СуммаРеглОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК Резерв,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА абс_ДДСПоПроектамОбороты.ОплатаАванс = ЗНАЧЕНИЕ(Перечисление.ВидыОтчетовПоПлатежамКомиссия.Аванс)
	|					ТОГДА абс_ДДСПоПроектамОбороты.СуммаРеглОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК Аванс
	|ИЗ
	|	РегистрНакопления.абс_ДДСПоПроектам.Обороты(
	|			,
	|			,
	|			,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И ОплатаАванс В (ЗНАЧЕНИЕ(Перечисление.ВидыОтчетовПоПлатежамКомиссия.Резерв), ЗНАЧЕНИЕ(Перечисление.ВидыОтчетовПоПлатежамКомиссия.Аванс))
	|				И ФактОперФакт = ЗНАЧЕНИЕ(Перечисление.абс_ФактОперФакт.Факт)
	|				И Проект = &Проект) КАК абс_ДДСПоПроектамОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_ДДСПоПроектамОбороты.Проект";
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Новый Структура("Аванс, Резерв", Выборка.Аванс, Выборка.Резерв);
	Иначе 
		Возврат Новый Структура("Аванс, Резерв", 0, 0);
	КонецЕсли;
КонецФункции

Процедура ДобавитьАвансРезерв(ПланОплат, ПроцентАванса, ПроцентРезерва, ПлановыеСуммыПоПроектам, Факт)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втВходящаяТаблица.Период,
	|	втВходящаяТаблица.Проект,
	|	втВходящаяТаблица.Сумма
	|ПОМЕСТИТЬ втВходящаяТаблица
	|ИЗ
	|	&втВходящаяТаблица КАК втВходящаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВходящаяТаблица.Проект
	|ПОМЕСТИТЬ втСуммыПроектов
	|ИЗ
	|	втВходящаяТаблица КАК втВходящаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	втВходящаяТаблица.Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВходящаяТаблица.Проект,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(абс_ИзменениеСтатусовДоговоровСрезПоследних.Период, МЕСЯЦ)) КАК ПериодАванса
	|ПОМЕСТИТЬ втАвансы
	|ИЗ
	|	втВходящаяТаблица КАК втВходящаяТаблица,
	|	РегистрСведений.абс_ИзменениеСтатусовДоговоров.СрезПоследних(
	|			,
	|			СтатусДоговора в (&СтатусДоговора)
	|				И Договор = &Договор) КАК абс_ИзменениеСтатусовДоговоровСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	втВходящаяТаблица.Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВходящаяТаблица.Проект,
	|	МАКСИМУМ(втВходящаяТаблица.Период) КАК ПериодРезерва
	|ПОМЕСТИТЬ втРезервы
	|ИЗ
	|	втВходящаяТаблица КАК втВходящаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	втВходящаяТаблица.Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСуммыПроектов.Проект КАК Проект,
	|	втАвансы.ПериодАванса,
	|	втРезервы.ПериодРезерва
	|ИЗ
	|	втСуммыПроектов КАК втСуммыПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАвансы КАК втАвансы
	|		ПО втСуммыПроектов.Проект = втАвансы.Проект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРезервы КАК втРезервы
	|		ПО втСуммыПроектов.Проект = втРезервы.Проект
	|
	|СГРУППИРОВАТЬ ПО
	|	втСуммыПроектов.Проект,
	|	втАвансы.ПериодАванса,
	|	втРезервы.ПериодРезерва";
	
	Запрос.УстановитьПараметр("втВходящаяТаблица", ПланОплат);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	
	//абс Родин Лимитный контроль	
	МассивСтатусовДоговоров = Новый Массив;
	МассивСтатусовДоговоров.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);	
	МассивСтатусовДоговоров.Добавить(Перечисления.абсСтатусыДоговоров.Корректировка);	
	МассивСтатусовДоговоров.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки);	
	МассивСтатусовДоговоров.Добавить(Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);	
	//абс Родин Лимитный контроль
	
	Запрос.УстановитьПараметр("СтатусДоговора", МассивСтатусовДоговоров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		МассивСтрокОперПланАванс = ПланОплат.НайтиСтроки(Новый Структура("Период, Проект", НачалоМесяца(Выборка.ПериодАванса), Выборка.Проект));
		Если МассивСтрокОперПланАванс.Количество() = 0 Тогда 
			НоваяСтрокаОперФактАванс = ПланОплат.Добавить();
			НоваяСтрокаОперФактАванс.Проект = Выборка.Проект;
			НоваяСтрокаОперФактАванс.Период = Выборка.ПериодАванса;
			НоваяСтрокаОперФактАванс.Сумма = 0;
		Иначе 
			НоваяСтрокаОперФактАванс = МассивСтрокОперПланАванс[0];
		КонецЕсли;
		
		МассивСтрокОперПланРезерв = ПланОплат.НайтиСтроки(Новый Структура("Период, Проект", НачалоМесяца(Выборка.ПериодРезерва), Выборка.Проект));
		НоваяСтрокаОперФактРезерв = МассивСтрокОперПланРезерв[0];
		
		СуммаПланПоПроекту = ПлановыеСуммыПоПроектам.Получить(Выборка.Проект);
		СуммаПланПоПроекту = ?(СуммаПланПоПроекту = Неопределено, 0, СуммаПланПоПроекту);
		
		Аванс = СуммаПланПоПроекту * ПроцентАванса / 100;		
		Резерв = СуммаПланПоПроекту * ПроцентРезерва / 100;
		
		Если Факт Тогда 
			АвансРезерв = ПолучитьАвансРезерв(Выборка.Проект);
			
			Если Не АвансРезерв.Аванс = 0 Тогда 
				Аванс = АвансРезерв.Аванс;
			КонецЕсли;
			
			Если Не АвансРезерв.Резерв = 0 Тогда  
				Резерв = АвансРезерв.Резерв;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрокаОперФактАванс.Сумма = НоваяСтрокаОперФактАванс.Сумма + Аванс;
		НоваяСтрокаОперФактРезерв.Сумма = НоваяСтрокаОперФактРезерв.Сумма + Резерв;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументПлановыйГрафик(Таблица, УсловиеОплаты, ОперативныеДанные, ДвиженияПоНулевымСуммам = Ложь) Экспорт
	
	ОбнулитьДанныеГрафиков(Таблица, УсловиеОплаты, ОперативныеДанные, ДвиженияПоНулевымСуммам);
	
	МассивПроектов = Таблица.ВыгрузитьКолонку("Проект");
	МассивПроектов = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПроектов);
	Для Каждого Проект Из МассивПроектов Цикл 
		
		ТаблицаДокумента = Таблица.Скопировать(Новый Структура("Проект", Проект));
		
		СтруктураПараметровДляНовогоДокумента = Новый Структура("Дата, ДоговорКонтрагента, Проект, УсловиеОплаты, ОперативныеДанные", НачалоДня(ТекущаяДата()), ДоговорКонтрагента, Проект, УсловиеОплаты, ОперативныеДанные);
		НовыйДокумент = ПолучитьСоздатьДокументГрафик(СтруктураПараметровДляНовогоДокумента);
		
		НовыйДокумент.ДвиженияПоНулевымСуммам = ДвиженияПоНулевымСуммам;
		ТаблицаДокумента.Колонки["Период"].Имя = "ПериодРегистрации";
		НовыйДокумент.Оплаты.Загрузить(ТаблицаДокумента);
		
		//возможно будет разница в копейках, так как реквизит "Сумма" в ТЧ "Оплаты" имеет точность 2, а в "ТаблицеДокумента" - точность неограничена
		//относим их на последний месяц...
		РазницаВКопейках = ТаблицаДокумента.Итог("Сумма") - НовыйДокумент.Оплаты.Итог("Сумма");
		ЕСли РазницаВКопейках <> 0 И НовыйДокумент.Оплаты.Количество() > 0 Тогда
			ПоследняяСтрока = НовыйДокумент.Оплаты[НовыйДокумент.Оплаты.Количество()-1];
			ПоследняяСтрока.Сумма = ПоследняяСтрока.Сумма + РазницаВКопейках;
		КонецЕСли;
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			#Если Клиент Тогда 
				Сообщить("Создан документ " + Строка(НовыйДокумент));
			#КонецЕсли
		Исключение
			#Если Клиент Тогда 
				Сообщить(ОписаниеОшибки());
			#КонецЕсли
		КонецПопытки;
				
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСоздатьДокументГрафик(СтруктураПараметров) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	абс_ПлановыйГрафикОплат.Ссылка
	|ИЗ
	|	Документ.абс_ПлановыйГрафикОплат КАК абс_ПлановыйГрафикОплат
	|ГДЕ
	|	абс_ПлановыйГрафикОплат.Проведен = ИСТИНА
	|	И НАЧАЛОПЕРИОДА(абс_ПлановыйГрафикОплат.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	|	И абс_ПлановыйГрафикОплат.ДоговорКонтрагента = &Договор
	|	И абс_ПлановыйГрафикОплат.Проект = &Проект
	|	И абс_ПлановыйГрафикОплат.УсловиеОплаты = &УсловиеОплаты
	|	И абс_ПлановыйГрафикОплат.ОперативныеДанные = &ОперативныеДанные";
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("Договор", СтруктураПараметров.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Проект", СтруктураПараметров.Проект);
	Запрос.УстановитьПараметр("УсловиеОплаты", СтруктураПараметров.УсловиеОплаты);
	Запрос.УстановитьПараметр("ОперативныеДанные", СтруктураПараметров.ОперативныеДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ДокО = Выборка.Ссылка.ПолучитьОбъект();
	Иначе 
		ДокО = Документы.абс_ПлановыйГрафикОплат.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокО, СтруктураПараметров);
	КонецЕсли;
	Возврат ДокО;
КонецФункции

Функция ПолучитьПериодПоступленияРеализацииФакт(МассивПроектов, ТаблицаПлан)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПлан.Проект,
	|	ТаблицаПлан.Период
	|ПОМЕСТИТЬ втТаблицаПлан
	|ИЗ
	|	&ТаблицаПлан КАК ТаблицаПлан
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВложенныйЗапрос.Период) КАК НачалоПериода,
	|	МАКСИМУМ(ВложенныйЗапрос.Период) КАК КонецПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОборотыБюджетовОбороты.Период КАК Период,
	|		ОборотыБюджетовОбороты.Проект КАК Проект
	|	ИЗ
	|		РегистрНакопления.ОборотыБюджетов.Обороты(
	|				,
	|				,
	|				Месяц,
	|				Сценарий В (&СценарииФакт)
	|					И ДоговорКонтрагента = &ДоговорКонтрагента
	|					И Проект В (&МассивПроектов)) КАК ОборотыБюджетовОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(втТаблицаПлан.Период, МЕСЯЦ),
	|		втТаблицаПлан.Проект
	|	ИЗ
	|		втТаблицаПлан КАК втТаблицаПлан) КАК ВложенныйЗапрос";
	
	СписокСценариевФакт = Новый Массив;
	СписокСценариевФакт.Добавить(Справочники.СценарииПланирования.НайтиПоКоду("000000003"));  //Факт
	СписокСценариевФакт.Добавить(Справочники.СценарииПланирования.НайтиПоКоду("000000055"));  //ТД по поставке ФАКТ
	СписокСценариевФакт.Добавить(Справочники.СценарииПланирования.НайтиПоКоду("000000028"));  //КВ по поставке ФАКТ
	СписокСценариевФакт.Добавить(Справочники.СценарииПланирования.НайтиПоКоду("000000059"));  //Поступление ТМЦ
	
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	Запрос.УстановитьПараметр("СценарииФакт", СписокСценариевФакт);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТаблицаПлан", ТаблицаПлан);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		СтруктураПериодов = Новый Структура("НачалоПериода, КонецПериода", Выборка.НачалоПериода, Выборка.КонецПериода);
	Иначе 
		СтруктураПериодов = Новый Структура("НачалоПериода, КонецПериода", Дата(1, 1, 1), ТекущаяДата());
	КонецЕсли;
	Возврат СтруктураПериодов;
КонецФункции

Функция ПолучитьПериодОплатыФакт(МассивПроектов, ТаблицаПлан)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПлан.Проект,
	|	ТаблицаПлан.Период
	|ПОМЕСТИТЬ втТаблицаПлан
	|ИЗ
	|	&ТаблицаПлан КАК ТаблицаПлан
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВложенныйЗапрос.Период) КАК НачалоПериода,
	|	МАКСИМУМ(ВложенныйЗапрос.Период) КАК КонецПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		абс_ДДСПоПроектамОбороты.Период КАК Период,
	|		абс_ДДСПоПроектамОбороты.Проект КАК Проект
	|	ИЗ
	|		РегистрНакопления.абс_ДДСПоПроектам.Обороты(
	|				,
	|				,
	|				Месяц,
	|				Проект В (&СписокПроектов)
	|					И ДоговорКонтрагента = &ДоговорКонтрагента
	|					И ОплатаАванс = ЗНАЧЕНИЕ(Перечисление.ВидыОтчетовПоПлатежамКомиссия.Оплата)
	|					И ФактОперФакт = ЗНАЧЕНИЕ(Перечисление.абс_ФактОперФакт.Факт)) КАК абс_ДДСПоПроектамОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(втТаблицаПлан.Период, МЕСЯЦ),
	|		втТаблицаПлан.Проект
	|	ИЗ
	|		втТаблицаПлан КАК втТаблицаПлан) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("СписокПроектов", МассивПроектов);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТаблицаПлан", ТаблицаПлан);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		СтруктураПериодов = Новый Структура("НачалоПериода, КонецПериода", Выборка.НачалоПериода, Выборка.КонецПериода);
	Иначе 
		СтруктураПериодов = Новый Структура("НачалоПериода, КонецПериода", Дата(1, 1, 1), ТекущаяДата());
	КонецЕсли;
	Возврат СтруктураПериодов;
КонецФункции

//////////////////////////////////////////
//// Для регламентного запуска

Процедура ПересчитатьОперативноПлановыеДанные() Экспорт 
	УсловиеОплат = ?(ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, Перечисления.абс_ВидыУсловийОплатПоДоговорам.Реализация, Перечисления.абс_ВидыУсловийОплатПоДоговорам.Поступление);
	УсловиеОплатДДС = ?(ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, Перечисления.абс_ВидыУсловийОплатПоДоговорам.РеализацияДДС, Перечисления.абс_ВидыУсловийОплатПоДоговорам.ПоступлениеДДС);
	
	ТабличноеПолеПоступленияПлан = ПолучитьТаблицуГрафика(УсловиеОплат, Ложь);
	Если ТабличноеПолеПоступленияПлан.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	ТабличноеПолеОплатыПлан = ПолучитьТаблицуГрафика(УсловиеОплатДДС, Ложь);
	ТабличноеПолеПоступленияОперПлан = ПолучитьТаблицуОперПланаПоставокРеализаций(ТабличноеПолеПоступленияПлан);
	СоздатьДокументПлановыйГрафик(ТабличноеПолеПоступленияОперПлан, УсловиеОплат, Истина, Истина);
	
	Если Не ТабличноеПолеОплатыПлан.Количество() = 0 Тогда 
		ТабличноеПолеОплатыОперПлан = ПолучитьТаблицуОперПланаОплат(ТабличноеПолеПоступленияОперПлан, ТабличноеПолеОплатыПлан);
		СоздатьДокументПлановыйГрафик(ТабличноеПолеОплатыОперПлан, УсловиеОплатДДС, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры
