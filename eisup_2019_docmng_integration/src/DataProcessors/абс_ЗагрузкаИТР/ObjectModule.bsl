Перем Версия Экспорт;

Функция ПолучитьСтруктуруТаблицыЗагружаемыхРеквизитов()
	
	Таб = Новый ТаблицаЗначений;
	
	Таб.Колонки.Добавить("НомерКолонки");
	Таб.Колонки.Добавить("ИмяРеквизита");
	
	Возврат Таб;
	
КонецФункции

Функция ПолучитьТаблицуЗагружаемыхРеквизитов() Экспорт
	
	Таб = ПолучитьСтруктуруТаблицыЗагружаемыхРеквизитов();
	
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 1, "Номер"));   						// Номер
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 2, "НаименованиеПолное"));  			// Название
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 3, "ИнженерСтрока"));   				// Инженер
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 4, "ДатаРазмещенияСтрока"));   		// Дата размещения
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 5, "ПланируемаяДатаВыдачиСтрока"));   // План. дата выдачи
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 6, "ФактическаяДатаВыдачиСтрока"));   // Факт. Дата выдачи
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 7, "СтатусСтрока"));   				// Статус
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 8, "ПриоритетСтрока"));   			// Приоритет
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 9, "ИнициаторСтрока"));   			// Инициатор
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 10, "ТипСтрока"));  					// Тип ИТР
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 11, "ГлубинаПроработкиСтрока"));  	// Глубина проработки
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 12, "Комментарий"));  				// Комментарий
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 13, "ПодазделениеДТРСтрока"));  		// Подазделение исполнителя
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 14, "ОсновнаяТематикаСтрока"));  		// Основная тематика
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 15, "КонтрагентСтрока"));  			// Заказчик
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 16, "ПодазделениеДТРСтрока"));  		// Подразделение инициатора
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 17, "Услуги"));  						// Услуги
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 18, "ПостановкаЗадачи"));  			// Постановка задачи
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 19, "ДополнительнаяИнформация"));  	// Дополнительная информация
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 20, "НомерЗаказаOM"));  				// Номер заказа в OM
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 21, "ТипУслугиСтрока"));  			// Тип услуги
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 22, "СтатусОМ"));  					// Статус в OM
	
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 2, "Наименование"));
	
	Возврат Таб;
	
КонецФункции

Процедура ПроизвестиЧтениеДанныхИзФайла(АдресФайлаВХранилище) Экспорт
	
	ТаблицаЗагрузки.Очистить();
	
	ВремТабЗагрузки = ТаблицаЗагрузки.Выгрузить();
	
	абс_СерверныеФункции.ВыполнитьЗагрузкуИзExcelВТабличныйДокумент(АдресФайлаВХранилище, ПолучитьТаблицуЗагружаемыхРеквизитов(), ВремТабЗагрузки);
	
	ТаблицаЗагрузки.Загрузить(ВремТабЗагрузки);
	
КонецПроцедуры

Процедура ПроизвестиРазборРеквизитов() Экспорт
	
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	
	Для Каждого СтрДанные Из ТаблицаЗагрузки Цикл
		
		СтрДанные.ИТРСсылка = Справочники.абс_ИТР.НайтиПоРеквизиту("Номер", СтрДанные.Номер);
		
		СтрДанные.Статус 				= ПолучитьПеречислениеПоСинониму(Перечисления.абс_СтатусыИТР, СтрДанные.СтатусСтрока);
		//СтрДанные.Инициатор
		СтрДанные.ДатаРазмещения        = ПолучитьДатуИзСтроки(СтрДанные.ДатаРазмещенияСтрока, "dd.MM.yyyy");
		СтрДанные.ПланируемаяДатаВыдачи = ПолучитьДатуИзСтроки(СтрДанные.ПланируемаяДатаВыдачиСтрока, "dd.MM.yyyy");
		СтрДанные.ФактическаяДатаВыдачи = ПолучитьДатуИзСтроки(СтрДанные.ФактическаяДатаВыдачиСтрока, "dd.MM.yyyy");
		СтрДанные.Инженер               = Справочники.ФизическиеЛица.НайтиПоКоду(СтрДанные.ИнженерСтрока);
		СтрДанные.Приоритет             = Число(ПолучитьТолькоЦифрыИзСтроки(СтрДанные.ПриоритетСтрока));
		СтрДанные.Тип                   = Справочники.абс_ТипыИТР.НайтиПоНаименованию(СтрДанные.ТипСтрока, Истина);
		СтрДанные.ГлубинаПроработки     = ПолучитьПеречислениеПоСинониму(Перечисления.абс_ДетальностьПроработки, СтрДанные.ГлубинаПроработкиСтрока);
		СтрДанные.ПодазделениеДТР       = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(СтрДанные.ПодазделениеДТРСтрока,,,Организация);
		СтрДанные.ОсновнаяТематика      = Справочники.абс_РазделыИТР.НайтиПоНаименованию(СтрДанные.ОсновнаяТематикаСтрока, Истина);
		СтрДанные.Контрагент            = Справочники.Контрагенты.НайтиПоКоду(СтрДанные.КонтрагентСтрока);
		СтрДанные.Проект                = Справочники.Проекты.НайтиПоРеквизиту("КодПроектаКомпании", СтрДанные.ПроектСтрока);
		СтрДанные.ОрганизацияЗаказчика  = Справочники.Организации.НайтиПоНаименованию(СтрДанные.ОрганизацияЗаказчикаСтрока);
		СтрДанные.Узел					= Справочники.абс_Узлы.НайтиПоНаименованию(СтрДанные.УзелСтрока, Истина);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаписатьИзменения() Экспорт
	
	Для Каждого СтрДанные Из ТаблицаЗагрузки Цикл
		
		ТекИТР = Неопределено;
		
		Если ЗначениеЗаполнено(СтрДанные.ИТРСсылка) Тогда
			ТекИТР = СтрДанные.ИТРСсылка.ПолучитьОбъект();
			Сообщить("Обновлен ИТР с номером: " + ТекИТР.Номер);
		Иначе
			ТекИТР = Справочники.абс_ИТР.СоздатьЭлемент();
			Сообщить("Добавлен ИТР с номером: " + ТекИТР.Номер);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекИТР, СтрДанные);
		
		Если ТекИТР.ЗаказыOM.Количество() > 0 Тогда
			ТекСтрЗаказыOM = ТекИТР.ЗаказыOM[0];
		Иначе
			ТекСтрЗаказыOM = ТекИТР.ЗаказыOM.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекСтрЗаказыOM, СтрДанные);
		
		Если ТекИТР.xTTK.Количество() > 0 Тогда
			ТекСтрxTTK = ТекИТР.xTTK[0];
		Иначе
			ТекСтрxTTK = ТекИТР.xTTK.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекСтрxTTK, СтрДанные);		
					
		Если ТекИТР.Узлы.Количество() > 0 Тогда
			ТекСтрУзлы = ТекИТР.Узлы[0];
		Иначе
			ТекСтрУзлы = ТекИТР.Узлы.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекСтрУзлы, СтрДанные);

		ТекИТР.Записать();	
		
		СтрДанные.ИТРСсылка = ТекИТР.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

// Процедуры и функции поиска реквизитов ИТК
Функция ПолучитьПеречислениеПоСинониму(ПеречислениеМенеджер, Синоним)
	
	Для Каждого Значение Из ПеречислениеМенеджер Цикл
		
		Если СокрЛП(Значение) = Синоним Тогда
			Возврат Значение;
		КонецЕсли;
			
	КонецЦикла;	
	
	Возврат ПеречислениеМенеджер.ПустаяСсылка();
	
КонецФункции

Функция ТолькоЦифры(Текст) Экспорт
	Длина = СтрДлина(Текст);
	Для Сч = 1 По Длина Цикл
		ТекКодСимвола = КодСимвола(Сред(Текст, Сч, 1));
		Если  ТекКодСимвола < 48 Или 57 < ТекКодСимвола Тогда
			Возврат Ложь;
		КонецЕсли;		
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ПолучитьТолькоЦифрыИзСтроки(Текст)
	Результат = "";
	Длина = СтрДлина(Текст);
	Для Сч = 1 По Длина Цикл
		ТекСимвол = Сред(Текст, Сч, 1);
		ТекКодСимвола = КодСимвола(ТекСимвол);
		Если  ТекКодСимвола < 48 Или 57 < ТекКодСимвола Тогда
			Продолжить;
		КонецЕсли;
		Результат = Результат + ТекСимвол;
	КонецЦикла;
	Возврат Результат;	
КонецФункции

Функция ПолучитьСоставляющиеДаты(стрДата)
	
	ДлинаСтроки = СтрДлина(стрДата);
	СоставляющиеДаты = Новый Массив;
	СоставляющиеДаты.Добавить("");
	ПоследняяПозицияЦифры = 1;
	
	Сч = 0;
	Пока Истина Цикл
		
		Если Сч = ДлинаСтроки Или СоставляющиеДаты.Количество() >=6 Тогда
			Прервать;
		КонецЕсли;
				
		Если Не ПустаяСтрока(СоставляющиеДаты[СоставляющиеДаты.ВГраница()]) Тогда 
			СоставляющиеДаты.Добавить("");
		КонецЕсли;
		
		Пока Сч < ДлинаСтроки Цикл
			Сч = Сч + 1;
			ТекСимвол = Сред(стрДата, Сч, 1);
			Если ТолькоЦифры(ТекСимвол) Тогда
				СоставляющиеДаты[СоставляющиеДаты.ВГраница()] = СоставляющиеДаты[СоставляющиеДаты.ВГраница()] + ТекСимвол;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СоставляющиеДаты;

КонецФункции

Функция ПолучитьДатуИзСтроки(стрДата, Знач ФорматнаяСтрока = "")  Экспорт
	
	Значение = Дата(1,1,1);
	
	Если ПустаяСтрока(стрДата) Или  ВРег(стрДата) = "NULL" Тогда
		
		Значение = Дата(1,1,1);
	
	Иначе 
		
		Если ПустаяСтрока(ФорматнаяСтрока) Тогда
			
			Попытка
				Значение = Дата(стрДата);
			Исключение
				Попытка
					Значение = Дата(стрДата + " 00:00:00");
				Исключение
					Значение = Дата(1,1,1);
				КонецПопытки;
			КонецПопытки;
			
		Иначе
			
			СоставляющиеДаты = ПолучитьСоставляющиеДаты(стрДата);
			
			Если СоставляющиеДаты.количество() < 3 Тогда
				Возврат Дата(1,1,1);
			КонецЕсли;
			
			Если ФорматнаяСтрока = "yyyy-MM-dd" Тогда// HH:mm:ss
				
				СтрГод = СоставляющиеДаты[0];
				СтрМесяц = СоставляющиеДаты[1];
				СтрДень = СоставляющиеДаты[2];
				
			ИначеЕсли ФорматнаяСтрока = "MM.dd.yyyy" Тогда  // HH:mm:ss
				
				СтрГод = СоставляющиеДаты[2];
				СтрМесяц = СоставляющиеДаты[0];
				СтрДень = СоставляющиеДаты[1];
				
			ИначеЕсли ФорматнаяСтрока = "dd.MM.yyyy" Тогда
				
				СтрГод = СоставляющиеДаты[2];
				СтрМесяц = СоставляющиеДаты[1];
				СтрДень = СоставляющиеДаты[0];
				
			Иначе
				
				ВызватьИсключение "Не предусмотренный формат строки";
				
			КонецЕсли;
			
			Если СоставляющиеДаты.Количество() >=6 Тогда			
				СтрВремя = СоставляющиеДаты[3] + ":" + СоставляющиеДаты[4] + ":" +СоставляющиеДаты[5]; 
			Иначе
				СтрВремя = "00:00:00";
			КонецЕсли;
			
			Попытка
				Значение = Дата(СтрДень + "." + СтрМесяц + "." + СтрГод + " " + СтрВремя);
			Исключение
				Значение = Дата(1,1,1);
			КонецПопытки;
			
		КонецЕсли;		

	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Версия = 1;