&НаКлиенте
Процедура Рассчитать(Команда)
	КоличествоТаблицSQL=0;
	КоличествоПолейSQL=0;
	НомерТекущейТаблицы=1;
	НомерТекущегоПоля=1;
	Состояние("Построение дерева метаданных...");
	ДЗ=ПолучитьДеревоМетаданных();
	ЗаполнитьРазмерыТаблиц(ДЗ);
	ЗаполнитьДанныеПолей(ДЗ);
	Состояние("Расчет итогов и вывод ....");
	ПодсчитатьИтоги(ДЗ);
	РассчитатьДоли(ДЗ);
	ЗаполнитьКартинкиВДереве(ДЗ);
	ДеревоВФорму(ПоместитьВоВременноеХранилище(ДЗ,УникальныйИдентификатор));
КонецПроцедуры
&НаСервере
Процедура ДеревоВФорму(АдресВоВременномХранилищие)
	ЗначениеВРеквизитФормы(ПолучитьИзВременногоХранилища(АдресВоВременномХранилищие),"РазмерыМетаданных");	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДеревоМетаданных()
	ДеревоМетаданных = Новый ДеревоЗначений;
	ДеревоМетаданных.Колонки.Добавить("Метаданные"		,Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ДеревоМетаданных.Колонки.Добавить("ТаблицаSQL"		,Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ДеревоМетаданных.Колонки.Добавить("ПолеВТаблицеSQL"	,Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ДеревоМетаданных.Колонки.Добавить("Картинка",Новый ОписаниеТипов("Картинка"));
    ДеревоМетаданных.Колонки.Добавить("Зарезервировано"	, 	Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15)));
	ДеревоМетаданных.Колонки.Добавить("РазмерДанных"		,	Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15)));
	ДеревоМетаданных.Колонки.Добавить("Доля"		,	Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,1)));
	ДеревоМетаданных.Колонки.Добавить("РазмерИндексов"	,	Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15)));
	ДеревоМетаданных.Колонки.Добавить("Свободно"			,	Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15)));
	ДеревоМетаданных.Колонки.Добавить("Строк"				, 	Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15)));
	СтруктураБазы=ПолучитьСтруктуруХраненияБазыДанных();
	Для каждого СтрокаСтруктурыБазы из СтруктураБазы Цикл
		ВеткаПоиска=ДеревоМетаданных;
		СтрокаОписанияМетаданных=ПолучитьСтрокуОписанияМетаданных(СтрокаСтруктурыБазы);
		ТекущиеМетаданные=ВыделитьПервого(СтрокаОписанияМетаданных);
		Пока ТекущиеМетаданные<>Неопределено Цикл
			ТекВетка=ВеткаПоиска.Строки.Найти(ТекущиеМетаданные,"Метаданные");
			Если ТекВетка=Неопределено тогда
				ТекВетка=ВеткаПоиска.Строки.Добавить();
				ТекВетка.Метаданные=ТекущиеМетаданные;
			КонецЕсли;
			ВеткаПоиска=ТекВетка;
			ТекущиеМетаданные=ВыделитьПервого(СтрокаОписанияМетаданных);
		КонецЦикла;
		ТекВетка.ТаблицаSQL=СтрокаСтруктурыБазы.ИмяТаблицыХранения;
		КоличествоТаблицSQL=КоличествоТаблицSQL+1;
		Если КвоЗаписейАнализаПолей Тогда
			//Добавление полей таблиц
			Если СтрокаСтруктурыБазы.Поля.Количество() Тогда
				Для каждого Поле Из СтрокаСтруктурыБазы.Поля Цикл
					ВеткаПоля=ТекВетка.Строки.Добавить();
					ВеткаПоля.Метаданные=Поле.ИмяПоля;
					ВеткаПоля.ПолеВТаблицеSQL=Поле.ИмяПоляХранения;
					КоличествоПолейSQL=КоличествоПолейSQL+1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ДеревоМетаданных;
КонецФункции
&НаКлиенте
Функция ПолучитьСтрокуОписанияМетаданных(СтрокаСтруктурыМетаданных)
	СтрокаОписанияМетаданных=Строка(СтрокаСтруктурыМетаданных.Метаданные);
	Если ПустаяСтрока(СтрокаОписанияМетаданных) Тогда
		Если СтрокаСтруктурыМетаданных.ИмяТаблицы="Константы" Тогда
			СтрокаОписанияМетаданных="Константы";
		Иначе
			СтрокаОписанияМетаданных="Общие таблицы";
		КонецЕсли;
	КонецЕсли;
	Если СтрокаСтруктурыМетаданных.Назначение<>"ТабличнаяЧасть" И СтрокаСтруктурыМетаданных.Назначение<>"Константы" тогда
		СтрокаОписанияМетаданных=СтрокаОписанияМетаданных+"."+Строка(СтрокаСтруктурыМетаданных.Назначение);	
	КонецЕсли;
	Возврат СтрокаОписанияМетаданных;
КонецФункции
&НаКлиенте
Функция ВыделитьПервого(СтрокаОписанияМетаданных)
	ПервоеЗначение=Неопределено;
	Если СтрДлина(СтрокаОписанияМетаданных) тогда
		Поз=Найти(СтрокаОписанияМетаданных,".");
		Если Поз Тогда
			ПервоеЗначение=Лев(СтрокаОписанияМетаданных,Поз-1);
			СтрокаОписанияМетаданных=Сред(СтрокаОписанияМетаданных,Поз+1);
		Иначе
			ПервоеЗначение=СтрокаОписанияМетаданных;
			СтрокаОписанияМетаданных="";
		КонецЕсли;
	КонецЕсли;
	Возврат ПервоеЗначение;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРазмерыТаблиц (ДеревоМетаданных)
	Для каждого Ветка Из ДеревоМетаданных.Строки Цикл
		Если НЕ ПустаяСтрока(Ветка.ТаблицаSQL) Тогда
			Состояние("Получение данных таблицы "+Ветка.ТаблицаSQL+"..."+"("+
					  НомерТекущейТаблицы+" из "+КоличествоТаблицSQL+")",
					  (НомерТекущейТаблицы/КоличествоТаблицSQL)*100);
			ЗаполнитьЗначенияСвойств(Ветка,ПолучитьРазмерыТаблицыSQL(Ветка.ТаблицаSQL));
			НомерТекущейТаблицы=НомерТекущейТаблицы+1;
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
		Если Ветка.Строки.Количество() Тогда
			ЗаполнитьРазмерыТаблиц(Ветка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
&НаСервере
Функция ПолучитьРазмерыТаблицыSQL(Знач ИмяТаблицыSQL)
	ИмяТаблицыSQL="_"+СтрЗаменить(СокрЛП(ИмяТаблицыSQL), ".", "_");
	РазмерыТаблицыSQL=Новый Структура("Строк,Зарезервировано,РазмерДанных,РазмерИндексов,Свободно");
	ШаблонЗапроса =   "CREATE TABLE #t([Name] varchar(255), [TableRows] varchar(255), [SizeReserved] varchar(255), [DataSize] varchar(255), [IndexSize] varchar(255), [Unused] varchar(255));
	|	INSERT INTO #t
	|	exec  sp_spaceused N'%ИмяТаблицы%','true';
	|	SELECT * FROM #t ORDER BY CONVERT(bigint, REPLACE([SizeReserved], ' KB', '')) DESC;
	|	DROP TABLE #t;";
	ШаблонЗапроса=СтрЗаменить(ШаблонЗапроса,"%ИмяТаблицы%",ИмяТаблицыSQL);
	Connect=Новый COMОбъект("ADODB.Connection");
	Попытка 
		Connect.Open(СтрокаСоединения);
		cmd = Новый COMОбъект("ADODB.Command");
		cmd.ActiveConnection 	=	Connect;
		cmd.CommandTimeout=360;
		cmd.CommandText=ШаблонЗапроса;
		Попытка
			RS 	= Новый COMОбъект("ADODB.Recordset");
			RS=cmd.Execute();
			Пока RS.State = 0 Цикл
				RS = RS.NextRecordset();
			КонецЦикла;
			RS.MoveFirst();
			Если RS.EOF()=0 Тогда
				РазмерыТаблицыSQL.Строк 			= Число(СокрЛП(RS.Fields("TableRows").Value));
				РазмерыТаблицыSQL.Зарезервировано 	= ПреобразоватьРазмерДанныхВКБ(RS.Fields("SizeReserved").Value);
				РазмерыТаблицыSQL.РазмерДанных 	= ПреобразоватьРазмерДанныхВКБ(RS.Fields("DataSize").Value);
				РазмерыТаблицыSQL.РазмерИндексов	= ПреобразоватьРазмерДанныхВКБ(RS.Fields("IndexSize").Value);
				РазмерыТаблицыSQL.Свободно			= ПреобразоватьРазмерДанныхВКБ(RS.Fields("Unused").Value);
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		RS.Close();
	Исключение
		Сообщить("Не удалось соединиться с SQL - сервером"+Символы.ПС+ОписаниеОшибки());
	КонецПопытки;
	RS=Неопределено;
	cmd=Неопределено;
	Connect=Неопределено;
	Возврат РазмерыТаблицыSQL;
КонецФункции
&НаСервере
Функция ПреобразоватьРазмерДанныхВКБ(Строка)
	РазмерКБ=0;
	СтрокаБезЕдиниц = СокрЛП(Лев(Строка, Найти(Строка,"KB")-1));
	Попытка 
		РазмерКБ=Число(СтрокаБезЕдиниц);
	Исключение
	КонецПопытки;
	Возврат РазмерКБ;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеПолей(ДеревоМетаданных)
	Для каждого Ветка Из ДеревоМетаданных.Строки Цикл
		Если НЕ ПустаяСтрока(Ветка.ПолеВТаблицеSQL) Тогда
			Состояние("Получение данных полей "+Ветка.ПолеВТаблицеSQL+"..."+"("+
			  НомерТекущегоПоля+" из "+КоличествоПолейSQL+")",
			  (НомерТекущегоПоля/КоличествоПолейSQL)*100);
			Ветка.РазмерДанных=ПолучитьРазмерПоля(Ветка.Родитель.ТаблицаSQL,Ветка.ПолеВТаблицеSQL);
			НомерТекущегоПоля=НомерТекущегоПоля+1;
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
		Если Ветка.Строки.Количество() Тогда
			ЗаполнитьДанныеПолей(Ветка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
&НаСервере
Функция ПолучитьРазмерПоля(Знач ИмяТаблицыSQL,Знач ИмяПоляSQL)
	РазмерПоля = 0;
	ИмяТаблицыSQL="_"+СтрЗаменить(СокрЛП(ИмяТаблицыSQL), ".", "_");
	ИмяПоляSQL="_"+ИмяПоляSQL+"%";
    ШаблонЗапроса="
	|declare 	@cname varchar (128),
	|			@SPCall nvarchar(128)
	|create table #tmpTable2 (
	|			name varchar(128),
	|			size int)
	|SELECT TOP (%КвоЗаписей%) * INTO #tmpTable3 FROM %ИмяТаблицы%
	|SELECT  * INTO    #tmpTable
	|FROM    OPENQUERY(KWF, 'exec sp_columns %ИмяТаблицы%')
	|insert into  #tmpTable exec sp_columns %ИмяТаблицы%
	|DECLARE Cur CURSOR READ_ONLY FOR
    |    select column_name from #tmpTable where column_name like '%ИмяПоля%'
	|OPEN Cur
	|FETCH NEXT FROM Cur INTO @cname
	|WHILE (@@FETCH_STATUS <> -1) BEGIN
    |	set @SPCall='select '''+@cname+''' as name, SUM (datalength('+@cname+')) as size from #tmpTable3'
    |	insert into #tmpTable2 exec sp_executesql @SPCall 
    |	FETCH NEXT FROM Cur INTO @cname
	|END
	|select SUM(size) as size from #tmpTable2
	|--cleaning
	|CLOSE Cur
	|DEALLOCATE Cur
	|drop table #tmpTable
	|drop table #tmpTable2
	|drop table #tmpTable3";
	ШаблонЗапроса=СтрЗаменить(ШаблонЗапроса,"%ИмяТаблицы%",ИмяТаблицыSQL);
	ШаблонЗапроса=СтрЗаменить(ШаблонЗапроса,"%ИмяПоля%",ИмяПоляSQL);
	ШаблонЗапроса=СтрЗаменить(ШаблонЗапроса,"%КвоЗаписей%",Формат(КвоЗаписейАнализаПолей,"ЧДЦ=0; ЧГ=0"));
	Connect=Новый COMОбъект("ADODB.Connection");
	Попытка 
		Connect.Open(СтрокаСоединения);
		cmd = Новый COMОбъект("ADODB.Command");
		cmd.ActiveConnection 	=	Connect;
		cmd.CommandTimeout=360; 
		cmd.CommandText=ШаблонЗапроса;
		Попытка
			RS 	= Новый COMОбъект("ADODB.Recordset");
			RS=cmd.Execute();
			Попытка
				Пока RS.State = 0 Цикл
					RS = RS.NextRecordset();
				КонецЦикла;
				RS.MoveFirst();
				Если RS.EOF()=0 Тогда
					Попытка
						РазмерПоля= Число(СокрЛП(RS.Fields("size").Value));
					Исключение
					КонецПопытки;
				КонецЕсли;
			Исключение
				Сообщить(ИмяТаблицыSQL+";"+ИмяПоляSQL);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			RS.Close();
		Исключение
			Сообщить(ИмяТаблицыSQL+";"+ИмяПоляSQL);
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	Исключение
		Сообщить("Не удалось соединиться с SQL - сервером"+Символы.ПС+ОписаниеОшибки());
	КонецПопытки;
	RS=Неопределено;
	cmd=Неопределено;
	Connect=Неопределено;
	Возврат РазмерПоля;
КонецФункции

&НаКлиенте
Процедура РассчитатьДоли(ДеревоМетаданных)
	Итог=ДеревоМетаданных.Строки.Итог("РазмерДанных");
	Для каждого Ветка из ДеревоМетаданных.Строки Цикл
		Если Ветка.Строки.Количество() Тогда
			РассчитатьДоли(Ветка);
		КонецЕсли;
		Если Итог<>0 Тогда
			Ветка.Доля=ОКР(Ветка.РазмерДанных/Итог*100,1)
		КонецЕсли;
		Если НЕ ПустаяСтрока(Ветка.ПолеВТаблицеSQL) Тогда
			Ветка.РазмерДанных=0;
		КонецЕсли;
	КонецЦикла;
	ДеревоМетаданных.Строки.Сортировать("Доля Убыв");
КонецПроцедуры

&НаКлиенте
Процедура ПодсчитатьИтоги(ДеревоМетаданных)
	Для каждого Ветка из ДеревоМетаданных.Строки цикл
		Если Ветка.Зарезервировано=0 Тогда
			Если Ветка.Строки.Количество() Тогда
				ПодсчитатьИтоги(Ветка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Ветка.Родитель<>Неопределено тогда
		Ветка.Родитель.Строк=Ветка.Родитель.Строки.Итог("Строк");
		Ветка.Родитель.Зарезервировано=Ветка.Родитель.Строки.Итог("Зарезервировано");
		Ветка.Родитель.РазмерДанных=Ветка.Родитель.Строки.Итог("РазмерДанных");
		Ветка.Родитель.РазмерИндексов=Ветка.Родитель.Строки.Итог("РазмерИндексов");
		Ветка.Родитель.Свободно=Ветка.Родитель.Строки.Итог("Свободно");
	КонецЕсли;
	ИтогСтрок=ДеревоМетаданных.Строки.Итог("Строк");
	ИтогЗарезервировано=ДеревоМетаданных.Строки.Итог("Зарезервировано");
	ИтогРазмерДанных=ДеревоМетаданных.Строки.Итог("РазмерДанных");
	ИтогРазмерИндексов=ДеревоМетаданных.Строки.Итог("РазмерИндексов");
	ИтогСвободно=ДеревоМетаданных.Строки.Итог("Свободно");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКартинкиВДереве(ДеревоМетаданных)
	Для каждого Ветка из ДеревоМетаданных.Строки Цикл
		Попытка
			Если Ветка.Метаданные="Константы" Тогда
				Ветка.Картинка=БиблиотекаКартинок.Константа;
			ИначеЕсли Ветка.Метаданные="Общие таблицы" Тогда
				Ветка.Картинка=БиблиотекаКартинок.НастройкиОтчета;
			Иначе
				Ветка.Картинка=БиблиотекаКартинок[Ветка.Метаданные];	
			КонецЕсли;
		Исключение
		КонецПопытки;
		Если Ветка.Строки.Количество() Тогда
			ЗаполнитьКартинкиВДереве(Ветка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//**События формы

&НаКлиенте
Процедура ИмяПользователяБДПриИзменении(Элемент)
	СформироватьСтрокуСоединения();
КонецПроцедуры
&НаКлиенте
Процедура ПарольПользователяБДПриИзменении(Элемент)
	СформироватьСтрокуСоединения();
КонецПроцедуры
&НаКлиенте
Процедура ИмяБДПриИзменении(Элемент)
	СформироватьСтрокуСоединения();
КонецПроцедуры
&НаКлиенте
Процедура ХостСУБДПриИзменении(Элемент)
	СформироватьСтрокуСоединения();
КонецПроцедуры
&НаКлиенте
Процедура СформироватьСтрокуСоединения()
	СтрокаСоединения="Provider=SQLOLEDB.1;Persist Security Info=False;User ID="+
						СокрЛП(ИмяПользователяБД)+";Password="+
						СокрЛП(ПарольПользователяБД)+";Initial Catalog="+
						СокрЛП(ИмяБД)+";Data Source="+
						СокрЛП(ХостСУБД);
КонецПроцедуры
