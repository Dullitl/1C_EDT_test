Перем мСоответствиеИмен;

//////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ                       

// Функция выполняет начальное заполнение информационной базы.
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
// Возвращаемое значение:
//  Функция возвращает номер первой коммерческой версии конфигурации.
//
Функция ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт

	ДатаНачалаВводаДанных = '19800101';
	
	// Обязательное начальное заполнение информационной базы.

	// Установка использования регистра "Свободные остатки"
	ПроцедурыКонтроляОстатков.УстановитьИспользованиеРегистраСвободныеОстатки(Истина, ДатаНачалаВводаДанных, Ложь);
	
	// Заполнение справочника Валюты.
	ВалютаРегламентированногоУчета = 
	НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета; //Рубли
	ВалютаМеждународногоУчета = ВалютаРегламентированногоУчета; //Рубли
	
	НайтиСоздатьВалюту("840", "USD", "Доллар США", "доллар, доллара, долларов, м, цент, цента, центов, м, 2");
	НайтиСоздатьВалюту("978", "EUR", "Евро"      , "евро, евро, евро, м, цент, цента, центов, м, 2");

	// Заполнение справочника КлассификаторЕдиницИзмерения.
	ЕдиницаИзмеренияВеса =
	НайтиСоздатьЕдиницу("166", "кг", "Килограмм");
	НайтиСоздатьЕдиницу("796", "шт", "Штука");
	
	
	// Заполнение сведений бухгалтерского и налогового учета.
	УстановитьСуммовойУчетНаСкладах();
	ЗаполнитьСоответствиеСчетовБУиНУ(ДатаНачалаВводаДанных);
	ЗаполнитьРегистрыСчетовУчета();
	ЗаполнитьРегистрСчетовЕНВД();
	ЗаполнитьСправочникПрочиеДоходыИРасходы();
	ЗаполнитьТипыОплатДляВидовОплатЧекаККМ();
	УстановитьКонстанту("НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов" , Дата("20100101"));

	// Заполнение сведений по заработной плате и учету персонала
	ЗаполнитьРегистрДопустимыхСочетанийМеждуГруппамиСтажа();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьКодыДоходовНДФЛ();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьКодыВычетовНДФЛ();
	ПроцедурыОбновленияИнформационнойБазы.КодыПерсучета2010();
	ЗаполнитьКодыДоходовЕСН();
	ЗаполнитьКлассификаторИспользованияРабочегоВремени();
	
	ЗаполнитьСведенияОСтавкахЕСНиПФР();
	ЗаполнитьСведенияОМинимальномРазмереОплатыТруда();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСведенияОРазмерахГосударственныхПособий();
	ЗаполнитьСведенияОСтавкеРефинансированияЦБ();
	ЗаполнитьРеквизитыВопросов();
	ЗаполнитьСправочникВоинскихЗваний();
	ЗаполнитьОснованияУвольнения();
	ЗаполнитьФормыОбучения();
	НачальноеЗаполнениеСправочникаКлассификаторСтранМира();
	НачальноеЗаполнениеСправочникаДокументыУдостоверяющиеЛичность();
	ЗаполнитьВидыЕжегодныхОтпусков();
	ЗаполнитьПериодичностьНачислений();
	УстановитьПризнакАвтоНачислениеПоТабелю();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьВидыДоходовПоСтраховымВзносам();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСведенияОТарифахСтраховыхВзносов();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьУченыеСтепениИЗвания();
	
	ЗаполнитьПланыВидовРасчетаОрганизации();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьРасчетнуюБазуСреднегоДляПособий2010();
	ОбновлениеИнформационнойБазыСервер.ЗаполнитьРеквизитыПВРДниНеоплачиваемыеСогласноТабелю();
	ЗаполнитьСхемыМотивации(ВалютаРегламентированногоУчета);
	ЗаполнитьПланыВидовРасчетаУправленческиеУдержания();
	ОбновитьНастройкиРасчетов();
	
	ЗаполнитьСписокВнешнихКомпонент();
	
	//Заполнить реквизиты предопределенных смен
	ЗаполнитьПредопределенныеСмены();
	// Заполнить предопределенные элементы для перехода с 1С:Предприятие 7.7
	ЗаполнитьПредопределенныеЭлементы77();
	// Включить генерацию всех видов задач
	УстановитьИспользованиеВидовЗадачПользователей();
	
	// Заполнение справочников "Шкалы оценок компетенций"
	ЗаполнитьСправочникШкалОценок();
	
	// Заполнение данных для механизма контактной информации
	ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию();
	ЗаполнитьСправочникВидыКонтактнойИнформации();
	
	Константы.ИнтервалПроверкиНапоминанийВСекундах.Установить(60);
	
	// Заполнение настроек учетной политики упр. учета
	НаборУчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	НаборУчетнаяПолитика.Отбор.Период.Установить(НачалоМесяца(ДатаНачалаВводаДанных));
	ПараметрыУчетнойПолитики = НаборУчетнаяПолитика.Добавить();
	
	ПараметрыУчетнойПолитики.Период                                                 = НачалоМесяца(ДатаНачалаВводаДанных);
	ПараметрыУчетнойПолитики.СпособОценкиМПЗ                                        = Перечисления.СпособыОценки.ПоСредней;
	ПараметрыУчетнойПолитики.СпособРасчетаСебестоимостиВыпускаПоОперациям           = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПрямымЗатратам;
	ПараметрыУчетнойПолитики.ДетализацияКосвенныхЗатратВСебестоимости               = Перечисления.ДетализацияКосвенныхЗатратВСебестоимости.ПоКаждойСтатьеЗатрат;
	ПараметрыУчетнойПолитики.СпособРасчетаСебестоимостиОсновногоПроизводства        = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам;
	ПараметрыУчетнойПолитики.СпособРасчетаСебестоимостиВспомогательногоПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам;
	ПараметрыУчетнойПолитики.СпособИспользованияНакопительныхСкидок                 = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоДисконтнойКарте;
	
	НаборУчетнаяПолитика.Записать();
	
	// Заполнение объектов для подсистемы Управление персоналом
	СоздатьАнкетуРезюме();
	
	// Заполнение справочника "Способы распределения затрат".
	ЗаполнитьСправочникСпособыРаспределенияЗатрат();
	
	// Заполнение справочника Банки.
	ЗагрузитьКлассификаторБанков();

	// Заполнение констант.
	УстановитьКонстанту("ВалютаРегламентированногоУчета"          , ВалютаРегламентированногоУчета);
	УстановитьКонстанту("ВалютаМеждународногоУчета"               , ВалютаМеждународногоУчета);
	УстановитьКонстанту("ВалютаУправленческогоУчета"              , ВалютаУправленческогоУчета);
	УстановитьКонстанту("ЕдиницаИзмеренияВеса"                    , ЕдиницаИзмеренияВеса);
	УстановитьКонстанту("ИспользованиеВстроенногоПочтовогоКлиента", Истина);
	УстановитьКонстанту("ИспользоватьВнутренниеЗаказы"            , Истина);
	УстановитьКонстанту("РазрешитьВыводитьСообщенияВПанельКомментариев", Истина);
	УстановитьКонстанту("РежимНабораПерсонала",						Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц);
	УстановитьКонстанту("СтратегияСписанияПартийТоваровПоСтатусам", Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные);
	УстановитьКонстанту("ОпределениеВремениПроведенияПлатежногоДокумента", Перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоВремениРегистрацииДокумента);
	
	#Если Клиент Тогда
	//Данная процедура вызывает функцию ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию,
	//	которая не может выполняться во внешнем соединении т.к. использует метод ПолучитьОбщуюФорму
	ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки();

	// Не обязательное заполнение ИБ
	// Вывод строк описания обновлений.
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ШапкаЗаполнениеПустойИБ"));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Заполнение пустой ИБ");
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ЗаполнениеПустойИБ"));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	
	#КонецЕсли
	УстановитьПараметрыСчетовБУиНУ();
	ЗаполнитьСписокРегламентированныхОтчетов(); 
	
	Константы.ИспользоватьТолькоСборочныеСпецификации.Установить(Ложь);
	
	ОбновитьСправочникСтатьиЗатрат();

	// Заполняем предопределенный элемент справочника "Виды оплат чека ККМ".
	ЗаполнитьСправочникВидыОплатЧекаККМ();

	НачальноеЗаполениеСправочникаСобытияОС();
	НачальноеЗаполениеСправочникаКлассификаторСтранМира();

	ЗаполнитьРегистрыРегламентныхОпераций(Истина, Истина);
	
	Константы.ПрефиксВесовогоТовара.Установить("1");
	Константы.ПрефиксШтучногоТовара.Установить("0");
	Константы.ДлинаКодаВесовогоТовара.Установить(5);
	Константы.ПорядокПрисвоенияPLU.Установить(Перечисления.ПорядокПрисвоенияPLU.ПоПорядку);
    УстановитьСубконтоНа44Счете();
	
	// Установка настроек расчета себестоимости по умолчанию
	УстановитьКонстанту("ГраницаПогрешностиСЛУ",1);
	УстановитьКонстанту("МаксимальноеКоличествоИтерацийСЛУ",50);
	УстановитьКонстанту("СреднееОтклонениеСЛУ",0.000001);//Установка среднего отклонения решения СЛУ при расчете себестоимости
	
	
	// Установим в качестве основного режима - расширенную аналитику
	УстановитьКонстанту("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат",Истина);
	УстановитьКонстанту("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат",ДатаНачалаВводаДанных);
	УстановитьКонстанту("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат",Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой);
	
	РасширеннаяАналитикаУчета.ЗаполнитьНастройкиАналитикиПоШаблону(Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой);
	
	Константы.ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре.Установить('20090609');
	
	// Заполнение кодов быстрого выбора в планах счетов
	ЗаполнениеКодовБыстрогоВыбора();
	
	// Устновка новой ставкви налога на прибыль
	УстановитьНовыеСтавкиНалогаНаПрибыль();
	
	// Установка начисления амортизации НМА способом уменьшаемого остатка в 2008 г.
	// исходя из остаточной стоимости на начало отчетного года.
	// {{KM WARE Акулов А.И. 04.10.2015 начало
	// 
	// {{Старый код:
	//Константы.ПрименятьВ2008ГодуПравилаПБУ142000.Установить(Истина);
	// }}Новый код:
	Попытка
		Константы.ПрименятьВ2008ГодуПравилаПБУ142000.Установить(Истина);
	Исключение
	КонецПопытки;
	// }}KM WARE Акулов А.И. 04.10.2015 окончание 
	
	ВключитьМеханизмОнлайнСервисовРО();
	
	ПроверкаРазницыВремени.ИнициализироватьПроверкуРазницыВремениССервером();
	
КонецФункции // ЗаполнитьПустуюИБ()

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновление() Экспорт

	// Подготовка к выводу формы описания обновлений.
	МакетОписаниеОбновлений = Неопределено;
	ДокументОписаниеОбновлений = Неопределено;
	#Если Клиент Тогда
	ФормаОписаниеОбновлений    = ПолучитьФорму("ОписаниеОбновлений");
	МакетОписаниеОбновлений    = ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений);
	ДокументОписаниеОбновлений = ФормаОписаниеОбновлений.ЭлементыФормы.ДокументОписаниеОбновлений;
	ДокументОписаниеОбновлений.Очистить();
	#КонецЕсли
	// Обновление информационной базы.
	// Последовательно вызываются функции для обновления с соответствующей версии.
	
	//Абс
	Если НЕ ПустаяСтрока(Метаданные.Версия) Тогда
		Если ЗначениеЗаполнено(абс_УТК_Сервер.ПолучитьНомерРелизаУТК(Метаданные.Версия)) Тогда
			абс_НомерВерсииКонфигурации = Лев(Метаданные.Версия,СтрДлина(Метаданные.Версия)-3); 
		Иначе
			абс_НомерВерсииКонфигурации = Метаданные.Версия;
		КонецЕсли;
		
	Иначе
	    абс_НомерВерсииКонфигурации = "";
	КонецЕсли;
	//\\Абс

	//Вызов функций заполнения данных для пустой информационной базы
	Если Константы.НомерВерсииКонфигурации.Получить() = "" Тогда

		СтрСообщения = "начальное заполнение информационной базы версии " + Метаданные.Версия;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		НачатьТранзакцию();

		Если НЕ ЗначениеЗаполнено(ПланыОбмена.ГлавныйУзел()) Тогда 
			                                                       		
			ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		КонецЕсли;
        // {{KM WARE Акулов А.И. 04.10.2015 начало
		// 
		// {{Старый код:
		//Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия); // после заполнения пустой ИБ установим последний номер версии
		// }}Новый код:
		Попытка
			Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия); // после заполнения пустой ИБ установим последний номер версии
		Исключение
		КонецПопытки;
		// }}KM WARE Акулов А.И. 04.10.2015 окончание 

		ЗафиксироватьТранзакцию();

		Возврат;

	КонецЕсли;

	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	ИсходнаяВерсияИБ = ТекущаяВерсияИБ;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	Если ТекущаяВерсияИБ = "1.2.32.1" Тогда
		
		НоваяВерсияИБ   = "1.3.5.1";
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		// Выполнить обновление на 1.3
		ВыполнитьДействияПриОбновлении1_3();
		
		// Выполнить обновление на 1.3.5
		ВыполнитьДействияПриОбновлении1_3_5();
		
		ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("131", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		ВывестиОписаниеИзменений("132", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		ВывестиОписаниеИзменений("133", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		ВывестиОписаниеИзменений("134", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		ВывестиОписаниеИзменений("135", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	Если ТекущаяВерсияИБ = "1.3.4.1" Тогда
		НоваяВерсияИБ   = "1.3.5.1";
		
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		

		// Выполнить действия при обновлении на 1.3.5.1
		ВыполнитьДействияПриОбновлении1_2_32();
		
		ВыполнитьДействияПриОбновлении1_3_5();
		
		// Установка номера версии информационной базы
		ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("135", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	#Область ОбновленияВерсий_АБС
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.01";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // 	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.01" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.02";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // 		//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.02" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.03";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   // 			//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.03" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.04";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.04" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.05";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.05" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.06";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.06" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.07";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // 	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.07" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.08";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   // 	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.08" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.09";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 		//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.09" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.10";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   //			//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.10" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.11";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   //	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.11" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.12";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   //	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.12" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.13";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   //	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.13" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.14";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   //    	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.14" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.15";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   //   
   //    	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.15" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.16";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 	   	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.16" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.17";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.17" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.18";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // 	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.18" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.19";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // 	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.19" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.20";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 	
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.20" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.21";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.21" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.22";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.22" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.23";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.23" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.24";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.24" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.25";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.25" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.26";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.26" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.27";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.27" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.28";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.28" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.29";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.29" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.30";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.30" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.31";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	

   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.31" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.32";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // 	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.32" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.33";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.33" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.34";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.34" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.35";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	

   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.35" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.36";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.36" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.37";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.37" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.38";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.38" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.39";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.39" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.40";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.40" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.41";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.41" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.42";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.42" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.43";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.43" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.44";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.44" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.45";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.45" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.46";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.46" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.47";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.47" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.48";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   //  //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.48" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.49";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   //  	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.49" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.50";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // 	 	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.50" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.51";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   //   //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.51" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.52";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс

   //   //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.52" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.53";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   //   //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.53" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.54";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   //   //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.54" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.55";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   //   //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.55" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.56";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   //   //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.56" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.57";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   //   //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.57" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.58";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   //   //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.58" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.59";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   //   //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.59" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.60";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   //   //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.60" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.61";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   //   //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.61" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.62";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   //   //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.62" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.63";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	

   //	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.63" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.64";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 

   //	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.64" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.65";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	

   //	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.65" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.66";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   //	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.66" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.67";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   //	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.67" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.68";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   //    	//Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.68" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.69";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.69" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.70";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   // //Абс
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.70" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.71";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.71" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.72";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс		
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.72" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.73";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс		
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.73" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.74";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс		
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.74" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.75";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.75" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.76";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.76" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.77";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		

   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.77" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.78";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.78" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.79";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.79" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.80";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.80" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.81";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.81" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.82";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.82" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.83";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.83" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.84";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.84" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.85";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   ////\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.85" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.86";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   ////\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.86" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.87";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 	
   //	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.87" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.88";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // 		
   //	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.88" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.89";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // 		
   //	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.89" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.90";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   //	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.90" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.91";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   //	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.91" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.92";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	

   //	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.92" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.93";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   //	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.93" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.94";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // 
   //	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.94" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.95";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   // 
   //	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.95" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.96";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 	
   //	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.96" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.97";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   //	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.97" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.98";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // 
   //	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.98" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.99";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.99" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.100";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.100" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.101";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // 	//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.101" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.102";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // 		//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.102" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.103";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   //	
   // 		//\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.103" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.104";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	

   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.104" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.105";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.105" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.106";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.106" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.107";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.107" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.108";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.108" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.109";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.109" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.110";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.110" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.111";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.111" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.112";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.112" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.113";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 	
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.113" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.114";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.114" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.115";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.115" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.116";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.116" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.117";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.117" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.118";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.118" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.119";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.119" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.120";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.120" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.121";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.121" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.122";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.122" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.123";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс		
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.123" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.124";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.124" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.125";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.125" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.126";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.126" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.127";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.127" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.128";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.128" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.129";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // //\\Абс			
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.129" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.130";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // //\\Абс	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.130" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.131";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.131" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.132";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.132" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.133";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.133" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.134";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.134" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.135";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.135" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.136";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.136" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.137";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.137" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.138";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	//ОбработкаЗаполнения = Обработки.абс_ЗаполнениеПорядкаИРодителяАБСФ.Создать();
   // 	//ОбработкаЗаполнения.Заполнить();
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.138" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.139";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.139" Тогда
   // 	 НоваяВерсияИБ = "1.3.5.1.01.140";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 		
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.140" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.141";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.141" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.142";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.142" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.143";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.143" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.144";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.144" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.145";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.145" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.146";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.146" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.147";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.147" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.148";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.148" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.149";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.149" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.150";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.150" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.151";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	


   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.151" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.152";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	

   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.152" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.153";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   //  ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.153" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.154";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   //  ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.154" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.155";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   //  Если ТекущаяВерсияИБ = "1.3.5.1.01.155" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.156";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   //  ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.156" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.157";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 	
   //  ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.157" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.158";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   //  Если ТекущаяВерсияИБ = "1.3.5.1.01.158" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.159";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 		
   //  ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.159" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.160";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   //  Если ТекущаяВерсияИБ = "1.3.5.1.01.160" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.161";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   //  Если ТекущаяВерсияИБ = "1.3.5.1.01.161" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.162";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   //  ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.162" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.163";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   //  Если ТекущаяВерсияИБ = "1.3.5.1.01.163" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.164";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.164" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.165";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.165" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.166";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.166" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.167";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	

   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.167" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.168";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   // //АБС ИЗМЕНЕНИЕ 01842
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.168"  Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.169";
   // 	Попытка
   // 		УстановитьВидАктиваДляРБП();
   // 		РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ЗаполнитьВидИмущества();
   // 		РегистрыСведений.РегистрацияТранспортныхСредств.ЗаполнитьКодыЭкологическихКлассов();
   // 		УстановитьРеквизитыДляКорректировочныхСубсчетов();
   // 	Исключение
   // 	КонецПопытки;
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // КонецЕсли;
   // //\\АБС ИЗМЕНЕНИЕ 01842 КОНЕЦ
   // 
   // 	//АБС ИЗМЕНЕНИЕ 01842
   // ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.169"  Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.170";
   // 	//Попытка
   // 	//	УстановитьВидАктиваДляРБП();
   // 	//	РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ЗаполнитьВидИмущества();
   // 	//	РегистрыСведений.РегистрацияТранспортныхСредств.ЗаполнитьКодыЭкологическихКлассов();
   // 	//	УстановитьРеквизитыДляКорректировочныхСубсчетов();
   // 	//Исключение
   // 	//КонецПопытки;
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // КонецЕсли;
   // //\\АБС ИЗМЕНЕНИЕ 01842 КОНЕЦ
   // 
   //  ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.170" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.171";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   //  ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.171" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.01.172";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	
   // 
   //  ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.01.172" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.02.01";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   //  ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.02.01" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.02.04";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;
   // 
   //  ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();	
   // Если ТекущаяВерсияИБ = "1.3.5.1.02.04" Тогда
   // 	НоваяВерсияИБ = "1.3.5.1.03.01";		
   // 	СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
   // 	ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
   // 	
   // 	// Установка номера версии информационной базы
   // 	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка номера версии информационной базы");
   // 	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
   // 	
   // 	// сообщение об успешном обновлении информационной базы
   // 	ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
   // 	
   // КонецЕсли;	

	#КонецОбласти
	
	// Заполнение списка регламентированных отчетов, отключение использования внешних регламентированных отчетов
	ЗаполнитьСписокРегламентированныхОтчетов(Ложь, Ложь); //абсо +", Ложь" - при обновлении не сбрасывать признак у внешних регл.отчетов
	
	// Отключить внешний модуль документооборота с ФНС
	ОтключитьВнешнийМодульДокументооборотаСФНС();
	
	#Если Клиент Тогда
	// Вывод формы дополнительной обработки.
	Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
		ФормаОписаниеОбновлений.Открыть();
	КонецЕсли;
	ДеревоОбработокДляЗапускаПакетаОбработокОбновления = ПолучитьДеревоОбработокДляЗапускаПакетаОбработокОбновления(ИсходнаяВерсияИБ);
	Если ДеревоОбработокДляЗапускаПакетаОбработокОбновления.Строки.Количество() > 0 Тогда
		ТекстВопроса = "При обновлении версии конфигурации " + 
		"для обеспечения корректной работы системы необходимо выполнение ряда дополнительных действий. " + 
		"Автоматический последовательный запуск этих действий может быть осуществлен при помощи обработки ""Запуск пакета обработок обновления конфигурации"". " +
		"Перед запуском этой обработки рекомендуется ознакомиться с описанием во встроенной справке обработки." +
		"
		|
		|Выполнение действий в пакетном режиме может занять продолжительное время, поэтому предоставляется возможность выполнить дополнительные действия позже: 
		| 1) Вызов обработки ""Запуск пакета обработок обновления конфигурации"" производится из формы обработки "+
		"""Обновление информационной базы"" (меню ""Справка - Дополнения к описанию""), по нажатию кнопки командной панели.
		| 2) Интерактивный запуск каждой отдельной процедуры. Ссылки на эти процедуры находятся в окне описания обновлений (меню ""Справка - Дополнения к описанию""). " +
		"
		|
		|Открыть обработку   ""Запуск пакета обработок обновления конфигурации""  сейчас?";	
		
		Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,,"Дополнительные действия при обновлении версии конфигурации") = КодВозвратаДиалога.Да Тогда
			Форма = ПолучитьФорму("ЗапускПакетаОбработокОбновленияКонфигурации");
			Форма.СписокОбработок = ДеревоОбработокДляЗапускаПакетаОбработокОбновления;
			Форма.Открыть();		
		КонецЕсли;
	КонецЕсли;
#КонецЕсли

КонецПроцедуры

// ВЫПОЛНЕНИЕ ДЕЙСТВИЙ ПРИ ОБНОВЛЕНИИ

// Действия при обновлении на 1.2.31 (1.3.5.1)
Процедура ВыполнитьДействияПриОбновлении1_2_32()
	
	// Добавим информацию об изменении ставки рефинансирования
	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка ставки рефинансирования");
	УстановитьСтавкуРефинансирования(7.75, '20100601');
	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее","Установка ставки рефинансирования завершена",,,Истина);
	
	// обрабатываем объекты эл. документооборота с контролирующими органами
	ОбновлениеОбъектовЭДОсКО();

КонецПроцедуры

// Действия при обновлении на редакцию 1.3 с версий 1.2
Процедура ВыполнитьДействияПриОбновлении1_3()
	
	ОбновитьПользователей();
	ОбновитьСпособыРаспределенияСтатейЗатратОрганизаций();
	
	ИсправитьКодЭлементаОбъектаМетаданных("ПланВидовХарактеристик.ТипыШтрихкодов", ПланыВидовХарактеристик.ТипыШтрихкодов.ITF14);
	
КонецПроцедуры

// Действия при обновлении на 1.3.5.1
Процедура ВыполнитьДействияПриОбновлении1_3_5()
	
	ПереносЗначенийОбъектовСИзмененнымиИдентификаторами();
	
КонецПроцедуры

//АБС ИЗМЕНЕНИЕ 01842 Переход на 1.3.22.1
Процедура УстановитьРеквизитыДляКорректировочныхСубсчетов() Экспорт
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета бухгалтерского учета 19.09, рекомендуется установить самостоятельно");
	КонецПопытки;
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета бухгалтерского учета 41.К, рекомендуется установить самостоятельно");
	КонецПопытки;
	
	ВестиПартионныйУчетПоСкладамРегл = Константы.ВестиПартионныйУчетПоСкладамРегл.Получить();
	УстановитьСубконтоНаСчете("Хозрасчетный", "ВидыСубконтоХозрасчетные", "КорректировкаТоваровПрошлогоПериода",, ВестиПартионныйУчетПоСкладамРегл);
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета бухгалтерского учета 76.К, рекомендуется установить самостоятельно");
	КонецПопытки;
	
	СчетОбъект = ПланыСчетов.Налоговый.КорректировкаТоваровПрошлогоПериода.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета налогового учета 41.К, рекомендуется установить самостоятельно");
	КонецПопытки;
	
	УстановитьСубконтоНаСчете("Налоговый", "ВидыСубконтоХозрасчетные", "КорректировкаТоваровПрошлогоПериода", Ложь, ВестиПартионныйУчетПоСкладамРегл);
	
	ЗаполнитьКодыБыстрогоВыбораПлановСчетов(Истина);
	
КонецПроцедуры

Процедура УстановитьСубконтоНаСчете(ИмяПланаСчетов, ВидСубконто, ИмяСчета, ЕстьКоличество = Истина, ЕстьСуммовойУчет = Ложь)

	Попытка

		Счет   = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Объект = Счет.ПолучитьОбъект();

		Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто") = Неопределено Тогда
			НовыйВид = Объект.ВидыСубконто.Добавить();

			НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Склады;
			НовыйВид.Суммовой    = ЕстьСуммовойУчет;

			Если ЕстьКоличество Тогда
				НовыйВид.Количественный = Истина;
			КонецЕсли;

			Объект.Записать();
		КонецЕсли;

	Исключение

	КонецПопытки;

КонецПроцедуры // УстановитьСубконтоНаСчете()

Процедура ЗаполнитьКодыБыстрогоВыбораПлановСчетов(Перезаполнить = Ложь)
	
	Для Каждого ЭлементПланСчетов ИЗ ПланыСчетов Цикл
		Попытка
			ПланСчетов = ЭлементПланСчетов.Выбрать();
			Пока ПланСчетов.Следующий() Цикл
				
				Объект = ПланСчетов.ПолучитьОбъект();
				
				Если Перезаполнить ИЛИ НЕ ЗначениеЗаполнено(Объект.КодБыстрогоВыбора) Тогда
					Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
				КонецЕсли;
				
				Объект.Записать();
				
			КонецЦикла; 
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры


// Процедура устанавливает новый реквизит "Вид актива" справочника РБП
//
// Параметры:
//  нет
//
Процедура УстановитьВидАктиваДляРБП() Экспорт
	
	РБП = Справочники.РасходыБудущихПериодов;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК РБПна76
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачала, &ДатаОкончания, , Счет В ИЕРАРХИИ (&Счет76), &ВидСубконтоРБП, , , ) КАК ХозрасчетныйОбороты";
	
	Запрос.УстановитьПараметр("ВидСубконтоРБП", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ДатаНачала",    '20081231000000');
	Запрос.УстановитьПараметр("ДатаОкончания", '20111231235959');
	Запрос.УстановитьПараметр("Счет76",        ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		РБПОбъект = ВыборкаДетальныеЗаписи.РБПна76.ПолучитьОбъект();
		РБПОбъект.ВидАктива = Перечисления.ВидыАктивовДляРБП.ДебиторскаяЗадолженность;
		
		Попытка
			РБПОбъект.Обменданными.Загрузка=Истина;
			РБПОбъект.Записать();
		Исключение
			ШаблонОшибки = НСтр("ru = 'Не удалось установить вид актива для статьи РБП %1, рекомендуется установить самостоятельно значение ""Дебиторская задолженность""'");
			ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки, СокрЛП(РБПОбъект.Наименование));
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		КонецПопытки;
	Исключение
		КонецПопытки;
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка КАК РБПНа97
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|ГДЕ
	|	(НЕ РасходыБудущихПериодов.ЭтоГруппа)
	|	И (НЕ РасходыБудущихПериодов.ВидАктива = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ДебиторскаяЗадолженность))";
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РБПОбъект = ВыборкаДетальныеЗаписи.РБПНа97.ПолучитьОбъект();
		РБПОбъект.ВидАктива = Перечисления.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы;
		Попытка
			РБПОбъект.Обменданными.Загрузка=Истина;
			РБПОбъект.Записать();
		Исключение
			ШаблонОшибки = НСтр("ru = 'Не удалось установить вид актива для статьи РБП %1, рекомендуется установить самостоятельно значение ""Прочие оборотные активы""'");
			ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки, СокрЛП(РБПОбъект.Наименование));
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

//\\//АБС ИЗМЕНЕНИЕ 01842 КОНЕЦ
// ВЫПОЛНЕНИЕ ДЕЙСТВИЙ ПОСЛЕ ОБНОВЛЕНИЯ

#Если Клиент Тогда
Функция ДобавитьСтрокуВДеревоОбработок(Корень, Наименование, Представление, Пометка, НомерРелиза="");
	НоваяСтрока = Корень.Строки.Добавить();
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.Пометка = Пометка;
	НоваяСтрока.НомерРелиза = НомерРелиза;
	
	Возврат НоваяСтрока;
КонецФункции	

// Функция получает дерево обработок для передачи в форму ЗапускПакетаОбработокОбновленияКонфигурации
// Параметры: 
//  ИсходныйНомерВерсии - номер версии, который был до обновления или Неопределено, если он не известен
Функция ПолучитьДеревоОбработокДляЗапускаПакетаОбработокОбновления(ИсходнаяВерсияИБ = Неопределено) Экспорт
	
	ДеревоОбработок = Новый ДеревоЗначений();
	ДеревоОбработок.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоОбработок.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ДеревоОбработок.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	ДеревоОбработок.Колонки.Добавить("НомерРелиза", Новый ОписаниеТипов("Строка"));
	
	// На версию 1.3.5
	
	// с 1.3.4
	Если НЕ ЗначениеЗаполнено(ИсходнаяВерсияИБ) 
	ИЛИ ИсходнаяВерсияИБ = "1.3.4.1" Тогда
		Ветка134 = ДобавитьСтрокуВДеревоОбработок(ДеревоОбработок,"РЕЛИЗ","Переход с 1.3.4", Истина);
		ДобавитьСтрокуВДеревоОбработок(Ветка134,"ОбновлениеФункционалаЗУП25_26","Обновление данных управления персоналом и учета заработной платы", Истина);
	КонецЕсли;
	
	// с 1.2.32 
	// не требуется никаких обработок
	
	Возврат ДеревоОбработок;
	
КонецФункции
#КонецЕсли

#Если Клиент Тогда
// Функция получает макет описания обновлений и заполняет его параметры расшифровок.
//
// Параметры:
//  ФормаОписаниеОбновлений - форма обработки "ОписаниеОбновлений", 
//                            назначается владельцем открываемых из нее форм.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет "ОписаниеОбновлений" с заполненными параметрами расшифровок.
//
Функция ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений) Экспорт

	МакетОписаниеОбновлений = ПолучитьМакет("ОписаниеОбновлений");
	Параметры               = МакетОписаниеОбновлений.Параметры;

	// Заполнение параметров расшифровок макета описания обновлений,

	// Параметры для секции "Начальное заполнение информационной базы"
	Параметры.ФормаПодбораВалют                = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Валюты, Справочники.Валюты, ,"ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаВалют                 = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Валюты, Справочники.Валюты, "ФормаСписка");
	Параметры.ФормаЗагрузкиКурсов              = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Обработки.КурсыВалютРБК, Обработки.КурсыВалютРБК);
	Параметры.ФормаПодбораЕдиниц               = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.КлассификаторЕдиницИзмерения, Справочники.КлассификаторЕдиницИзмерения,, "ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаЕдиниц                = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.КлассификаторЕдиницИзмерения, Справочники.КлассификаторЕдиницИзмерения, "ФормаСписка");
	Параметры.ФормаЗагрузкиБанков              = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Обработки.ЗагрузкаБанков, Обработки.ЗагрузкаБанков);
	Параметры.ФормаСпискаКонтрагентов          = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Контрагенты, Справочники.Контрагенты, "ФормаСписка");
	Параметры.ФормаСпискаНоменклатуры          = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Номенклатура, Справочники.Номенклатура, "ФормаСписка");
	Параметры.ФормаСпискаТиповЦенНоменклатуры  = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.ТипыЦенНоменклатуры, Справочники.ТипыЦенНоменклатуры, "ФормаСписка");
	Параметры.ФормаСпискаТиповСкидокНаценок    = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.ТипыСкидокНаценок, Справочники.ТипыСкидокНаценок, "ФормаСписка");
	Параметры.ФормаСпискаОрганизаций           = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Организации, Справочники.Организации, "ФормаСписка");
	Параметры.ФормаСпискаПодразделений         = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Подразделения, Справочники.Подразделения, "ФормаСписка");
	Параметры.ФормаСпискаСкладов               = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Склады, Справочники.Склады, "ФормаСписка");
	Параметры.ФормаСпискаКасс                  = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Кассы, Справочники.Кассы, "ФормаСписка");
	Параметры.ФормаСпискаКассККМ               = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.КассыККМ, Справочники.КассыККМ, "ФормаСписка");
	Параметры.ФормаКонстант                    = Константы.ПолучитьФорму(); // Основная форма констант доступна роли Пользователь

	// Параметры для секции "Новое в редакции 1.3"
	Параметры.ФормаИспользованиеРегистраСвободныеОстатки       = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Обработки.НастройкиПрограммы, Обработки.НастройкиПрограммы,, "ИспользованиеРегистраСвободныеОстатки");
	Параметры.ФормаНастройкиСогласованияЗаявокНаРасходованиеДС = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.РегистрыСведений.НастройкиСогласованияЗаявокНаРасходованиеДС, РегистрыСведений.НастройкиСогласованияЗаявокНаРасходованиеДС,, "ФормаСписка");
	Параметры.ОбновлениеПроизвольныхОтчетов                    = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Обработки.ОбновлениеИнформационнойБазы, Обработки.ОбновлениеИнформационнойБазы,, "ОбновлениеПроизвольныхОтчетов");
	Параметры.ФормаЗагрузкаНастроекТиповыхОтчетов              = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Обработки.ОбновлениеИнформационнойБазы, Обработки.ОбновлениеИнформационнойБазы,, "ЗагрузкаНастроекТиповыхОтчетов");
	
	// Параметры для секции "Новое в версии 1.3.2"
	Параметры.Переход2010 = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Обработки.ПереходНаПорядокИсчисленияПособий2010, Обработки.ПереходНаПорядокИсчисленияПособий2010);
	
	// Параметры для секции "Новое в версии 1.3.3"
	Параметры.ФормаНастройкаПрограммы					    = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Обработки.НастройкиПрограммы, Обработки.НастройкиПрограммы,, "НастройкаПрограммы");
	Параметры.ФормаНастройкаПараметровОграниченияДоступа	= РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Обработки.НастройкиПрограммы, Обработки.НастройкиПрограммы,, "ПараметрыДоступаНаУровнеЗаписей");
	Параметры.ФормаНастройкаПравДоступа						= РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Обработки.НастройкаПравДоступа, Обработки.НастройкаПравДоступа);
	
	Возврат МакетОписаниеОбновлений;

КонецФункции // ПодготовитьМакетОписаниеОбновлений()
#КонецЕсли

// ПЕРВОНАЧАЛЬНОЕ ЗАПОЛНЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		МодульВалютногоУчета.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Функция создает элемент справочника КатегорииРасчетов, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьКатегорию(Код, Наименование) Экспорт

	Ссылка = Справочники.КатегорииРасчетов.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КатегорииРасчетов.СоздатьЭлемент();

		СправочникОбъект.Код          = Код;
		СправочникОбъект.Наименование = Наименование;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты) Экспорт

	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;

	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

	СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ "
	             + "назначено значение """ + ЗначениеКонстанты + """";

	ОбщегоНазначения.Сообщение(СтрСообщения, СтатусСообщения.Обычное);

КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";

	Попытка
		СправочникОбъект.Записать();
		ОбщегоНазначения.Сообщение(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
	#Если Клиент Тогда
		ОбщегоНазначения.Сообщение("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	#КонецЕсли
	КонецПопытки;

КонецПроцедуры

//Заполняет регистр сведений ДопустимыеСочетанияМеждуГруппамиСтажа
//
Процедура ЗаполнитьРегистрДопустимыхСочетанийМеждуГруппамиСтажа() 
	
	НаборЗаписей = РегистрыСведений.ДопустимыеСочетанияМеждуГруппамиСтажа.СоздатьНаборЗаписей();
	
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.10 ", "ЗП12А   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.10 ", "ЗП12А   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.11 ", "27-1    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Л   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12К   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12И   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12З   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Ж   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Е   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Д   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Г   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12В   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Б   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12О   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12М   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Л   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12К   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12И   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12З   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Ж   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Е   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Д   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Г   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12В   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Б   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12О   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-8    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-7    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-6    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-9    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-10   ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "28-ОС   ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-5    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-4    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-3    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-2    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "28-ПЖ   ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "20.10 ", "ЗП12А   ", "=        ", "12100000-11465  ", "ВОДОЛАЗ", "_чм", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "20.11 ", "27-1    ", "=        ", "12100000-11465  ", "ВОДОЛАЗ", "_чм", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.10 ", "ЗП12А   ", "=        ", "1010100а        ", "       ", "___", "ЗП78ВП  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.10 ", "ЗП12А   ", "=        ", "1010100а        ", "       ", "ГМД", "ЗП78ВП  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.10 ", "ЗП12А   ", "=        ", "1010100а        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.10 ", "ЗП12А   ", "=        ", "1010100а        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.11 ", "27-1    ", "=        ", "1010100а        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.11 ", "27-1    ", "=        ", "1010100а        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.11 ", "27-1    ", "=        ", "1010100а        ", "       ", "_МД", "27-11ВП ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.11 ", "27-1    ", "=        ", "1010100а        ", "       ", "___", "27-11ВП ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12Б   ", "Первые Н ", "2010100а        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010600б        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010600а        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "=        ", "10104000        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010300б        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010300а        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010100д        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010100г        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "=        ", "1010100б        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12Б   ", "Первые Н ", "2010100а        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010600б        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010600а        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "=        ", "10104000        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010300б        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010300а        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010100д        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010100г        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "=        ", "1010100б        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010300а        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010100д        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010100г        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "=        ", "1010100б        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-2    ", "Первые Н ", "2010100а        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010600б        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010600а        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "=        ", "10104000        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010300б        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010300а        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010100д        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010100г        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "=        ", "1010100б        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010300б        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "=        ", "10104000        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010600а        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010600б        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-2    ", "Первые Н ", "2010100а        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "60.10 ", "ЗП12А   ", "Первые Н ", "1200200а        ", "       ", "___", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "60.10 ", "ЗП12А   ", "Первые Н ", "1200200а        ", "       ", "ГМД", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "60.11 ", "27-1    ", "Первые Н ", "1200200а        ", "       ", "___", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "60.11 ", "27-1    ", "Первые Н ", "1200200а        ", "       ", "_МД", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.10 ", "ЗП12Б   ", "Первые Н ", "23003010        ", "       ", "ГМД", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.10 ", "ЗП12Б   ", "Первые Н ", "22417020        ", "       ", "ГМД", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.10 ", "ЗП12Б   ", "Первые Н ", "22417010        ", "       ", "ГМД", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.10 ", "ЗП12Б   ", "Первые Н ", "23003010        ", "       ", "___", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.10 ", "ЗП12Б   ", "Первые Н ", "22417020        ", "       ", "___", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.10 ", "ЗП12Б   ", "Первые Н ", "22417010        ", "       ", "___", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.11 ", "27-2    ", "Первые Н ", "22417010        ", "       ", "___", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.11 ", "27-2    ", "Первые Н ", "22417020        ", "       ", "___", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.11 ", "27-2    ", "Первые Н ", "23003010        ", "       ", "___", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.11 ", "27-2    ", "Первые Н ", "22417010        ", "       ", "_МД", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.11 ", "27-2    ", "Первые Н ", "22417020        ", "       ", "_МД", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.11 ", "27-2    ", "Первые Н ", "23003010        ", "       ", "_МД", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "80.10 ", "ЗП12И   ", "Не указан", "                ", "СЕЗОН  ", "___", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "80.11 ", "27-9    ", "Не указан", "                ", "СЕЗОН  ", "___", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "90.10 ", "ЗП12И   ", "Не указан", "                ", "       ", "ГМД", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "90.11 ", "27-9    ", "Не указан", "                ", "       ", "_МД", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "100.10", "ЗП12И   ", "Не указан", "                ", "       ", "___", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "100.11", "27-9    ", "Не указан", "                ", "       ", "___", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "110.10", "ЗП12А   ", "=        ", "12003000-17541  ", "       ", "___", "УВД     ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "110.10", "ЗП12А   ", "=        ", "12003000-17541  ", "       ", "ГМД", "УВД     ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "110.11", "27-1    ", "=        ", "12003000-17541  ", "       ", "___", "27-14   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "110.11", "27-1    ", "=        ", "12003000-17541  ", "       ", "_МД", "27-14   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "140.10", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "140.10", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "140.10", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "140.10", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "160.10", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "ЗП80ПД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "160.10", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "ЗП80РК  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "170.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "170.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "170.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "170.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "180.10", "ЗП12Е   ", "Не указан", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "180.11", "27-6    ", "Не указан", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "190.10", "ЗП12Е   ", "Не указан", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "190.10", "ЗП12Е   ", "Не указан", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "190.11", "27-6    ", "Не указан", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "190.11", "27-6    ", "Не указан", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "200.10", "ЗП12Ж   ", "Любой    ", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "200.11", "27-7    ", "Не указан", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "200.20", "ЗП12И   ", "Не указан", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "200.21", "27-9    ", "Не указан", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.10", "ЗП12Ж   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.10", "ЗП12Ж   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.11", "27-7    ", "Не указан", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.11", "27-7    ", "Не указан", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.20", "ЗП12И   ", "Не указан", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.20", "ЗП12И   ", "Не указан", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.21", "27-9    ", "Не указан", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.21", "27-9    ", "Не указан", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "220.10", "ЗП12Л   ", "Не указан", "                ", "       ", "___", "ЗП78СС  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "220.10", "ЗП12Л   ", "Не указан", "                ", "       ", "ГМД", "ЗП78СС  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.10", "ЗП12М   ", "Любой    ", "                ", "       ", "_МД", "ЗП80РК  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.10", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "ЗП80РК  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.10", "ЗП12М   ", "Любой    ", "                ", "       ", "_МД", "ЗП80ПД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.10", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "ЗП80ПД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.11", "28-ОС   ", "Не указан", "                ", "       ", "___", "28-ПД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.11", "28-ОС   ", "Не указан", "                ", "       ", "_МД", "28-ПД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.11", "28-ОС   ", "Не указан", "                ", "       ", "___", "28-ПДРК ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.11", "28-ОС   ", "Не указан", "                ", "       ", "_МД", "28-ПДРК ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "250.10", "        ", "Не указан", "                ", "УИК104 ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "270.10", "ЗП12Б   ", "Первые Н ", "2200            ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "270.11", "27-2    ", "Первые Н ", "2200            ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "280.10", "ЗП12Б   ", "Первые Н ", "2200            ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "280.10", "ЗП12Б   ", "Первые Н ", "2200            ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "280.11", "27-2    ", "Первые Н ", "2200            ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "280.11", "27-2    ", "Первые Н ", "2200            ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "500.10", "        ", "Не указан", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "500.20", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "510.10", "СЕВ26   ", "Не указан", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "510.11", "28-СЕВ  ", "Не указан", "                ", "       ", "___", "        ");
	
	НаборЗаписей.Записать();
	
КонецПроцедуры 

// Выполняет заполнение справочника "КлассификаторИспользованияРабочегоВремени" 
//
Процедура ЗаполнитьКлассификаторИспользованияРабочегоВремени() 

	// Установка реквизитов предопределенных элементов
	ВремяОтработанноеВПределахНормы = Перечисления.ВидыВремени.ОтработанноеВПределахНормы;
	ВремяДополнительноОплачиваемоеВПределахНормы = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы;
	ВремяОтработанноеСверхНормы = Перечисления.ВидыВремени.ОтработанноеСверхНормы;
	ВремяЦелодневноеНеотработанное = Перечисления.ВидыВремени.ЦелодневноеНеотработанное;
	ВремяЧасовоеНеотработанное = Перечисления.ВидыВремени.ЧасовоеНеотработанное;
	
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни.ПолучитьОбъект(),									"В", "26", "Выходные дни",							"Выходные дни (еженедельный отпуск) и  нерабочие праздничные дни",Перечисления.ВидыВремени.ПустаяСсылка());
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Работа.ПолучитьОбъект(),										"Я", "01", "Явка",									"Продолжительность работы в дневное время", ВремяОтработанноеВПределахНормы,Истина);
	
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Командировка.ПолучитьОбъект(),									"К", "06", "Командировка",							"Служебная командировка",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации.ПолучитьОбъект(),						"ПК","07", "Повышение квалификации",				"Повышение квалификации с отрывом от работы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности.ПолучитьОбъект(),		"ПМ","08", "Повышение квалификации в другой местности",		"Повышение квалификации с отрывом от работы в другой местности",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск.ПолучитьОбъект(),								"ОТ","09", "Отпуск",								"Ежегодный основной оплачиваемый отпуск",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск.ПолучитьОбъект(),							"ОД","10", "Дополнительный отпуск",					"Ежегодный дополнительный оплачиваемый отпуск",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение.ПолучитьОбъект(),								"У", "11", "Отпуск дополнительный (оплачиваемый учебный)",	"Дополнительный отпуск в связи с обучением с сохранением среднего заработка работникам, совмещающим работу с обучением",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый.ПолучитьОбъект(),				"УД","13", "Отпуск дополнительный (неоплачиваемый учебный)",	"Дополнительный отпуск в связи с обучением без сохранения заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам.ПолучитьОбъект(),					"Р", "14", "Отпуск по беременности и родам",			"Отпуск по беременности и родам (отпуск в связи с усыновлением новорожденного ребенка)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком.ПолучитьОбъект(),						"ОЖ","15", "Отпуск по уходу за ребенком",			"Отпуск по уходу за ребенком до достижения им возраста трех лет",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя.ПолучитьОбъект(),	"ДО","16", "Отпуск неоплачиваемый с разрешения работодателя",	"Отпуск без сохранения заработной платы, предоставляемый работнику по разрешению работодателя",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству.ПолучитьОбъект(),		"ОЗ","17", "Отпуск неоплачиваемый в соответствии с законом",	"Отпуск без сохранения заработной платы в случаях, предусмотренных законодательством",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск.ПолучитьОбъект(),			"ДБ","18", "Доп.отпуск без сохранения заработной платы",	"Ежегодный дополнительный отпуск без сохранения заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь.ПолучитьОбъект(),										"Б ","19", "Больничный",							"Временная нетрудоспособность с назначением пособия согласно законодательству",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты.ПолучитьОбъект(),								"Т", "20", "Больничный неоплачиваемый",				"Временная нетрудоспособность без назначения пособия в случаях, предусмотренных законодательством",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ВынужденныйПрогул.ПолучитьОбъект(),							"ПВ","22", "Время вынужденного прогула",			"Время вынужденного прогула в случае признания увольнения, перевода на другую работу или отстранения от работы незаконными с восстановлением на прежней работе",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности.ПолучитьОбъект(),					"Г", "23", "Выполнение государственных обязанностей",		"Невыходы на время исполнения государственных или общественных обязанностей согласно законодательству",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Прогулы.ПолучитьОбъект(),										"ПР","24", "Прогул",								"Прогулы (отсутствие на рабочем месте без уважительных причин в течение времени, установленного законодательством)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые.ПолучитьОбъект(),		"ОВ","27", "Дополнительные выходные дни (оплачиваемые)",	"Дополнительные выходные дни (оплачиваемые)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниНеОплачиваемые.ПолучитьОбъект(),		"НВ","28", "Дополнительные выходные дни (неоплачиваемые)",	"Дополнительные выходные дни (без сохранения заработной платы)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Забастовка.ПолучитьОбъект(),									"ЗБ","29", "Забастовка",							"Забастовка (при условиях и в порядке, предусмотренных законом)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам.ПолучитьОбъект(),					"НН","30", "Неявки по невыясненным причинам",			"Неявки по невыясненным причинам (до выяснения обстоятельств)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателя.ПолучитьОбъект(),					"РП","31", "Время простоя по вине работодателя",		"Время простоя по вине работодателя",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Простой.ПолучитьОбъект(),										"НП","32", "Простой, не зависящий от работодателя и работника", "Время простоя по причинам, не зависящим от работодателя и работника",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника.ПолучитьОбъект(),						"ВП","33", "Простой по вине работника",				"Простои по вине работника",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыСОплатой.ПолучитьОбъект(),					"НО","34", "Отстранение от работы с оплатой",			"Отстранение от работы (недопущение к работе) с оплатой (пособием) в соответствии с законодательством",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты.ПолучитьОбъект(),					"НБ","35", "Отстранение от работы без оплаты",			"Отстранение от работы (недопущение к работе) по причинам, предусмотренным законодательством, без начисления заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ЗадержкаВыплатыЗаработнойПлаты.ПолучитьОбъект(),				"НЗ","36", "Приостановка работы в случае задержки выплаты з/п", "Время приостановки работы в случае задержки выплаты заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы.ПолучитьОбъект(),								"Н ","02", "Ночные часы",							"Продолжительность работы в ночное время",ВремяДополнительноОплачиваемоеВПределахНормы,Истина);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы.ПолучитьОбъект(),							"ВЧ","41", "Вечерние часы",							"Продолжительность работы в вечернее время",ВремяДополнительноОплачиваемоеВПределахНормы,Истина);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные.ПолучитьОбъект(),									"С ","04", "Сверхурочно",							"Продолжительность сверхурочной работы",ВремяОтработанноеСверхНормы, Истина);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Праздники.ПолучитьОбъект(),									"РВ","03", "Праздники",								"Продолжительность работы в выходные и нерабочие, праздничные дни", ВремяОтработанноеСверхНормы, Истина);

	// Создание остальных элементов классификатора
	ДобавитьКодИспользованияРабочегоВремени("ВМ","05", "Вахта", "Продолжительность работы вахтовым методом",ВремяОтработанноеВПределахНормы,Истина);
	ДобавитьКодИспользованияРабочегоВремени("УВ","12", "Сокр.время обучающихся без отрыва от производства", "Сокращенная продолжительность рабочего для обучающихся без отрыва от производства с частичным сохранением заработной платы",ВремяОтработанноеВПределахНормы,Истина);
	ДобавитьКодИспользованияРабочегоВремени("ЛЧ","21", "Сокращенное рабочее время в соответствии с законом", "Сокращенная продолжительность рабочего времени против нормальной продолжительности рабочего дня в случаях, предусмотренных законодательством",ВремяОтработанноеВПределахНормы,Истина);
	ДобавитьКодИспользованияРабочегоВремени("НС","25", "Работа в режиме неполного рабочего времени", "Продолжительность работы в режиме неполного рабочего времени по инициативе работодателя в случаях, предусмотренных законодательством",ВремяОтработанноеВПределахНормы,Истина);

КонецПроцедуры

#Если Клиент Тогда
// Процедура заполняет по умолчанию необходимые данные
// для отправки сообщений в службу технической поддержки.
//
Процедура ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки()

	Перем СтруктураЗначения;

	Если ТипЗнч(Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить()) <> Тип("Структура") Тогда

		ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураЗначения);

		СтрокаПараметровОтправки = СтруктураЗначения.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");

		Если СтрокаПараметровОтправки <> Неопределено Тогда

			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "v8@1c.ru";

			Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураЗначения, Новый СжатиеДанных));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
#КонецЕсли

// Заполнение кодов быстрого выбора в планах счетов
//Запускается при обновлении на 1.2.15 и при заполнении пустой ИБ
Процедура ЗаполнениеКодовБыстрогоВыбора(ТолькоНезаполненные = Ложь);
	
	Для Каждого ЭлементПланСчетов ИЗ ПланыСчетов Цикл
		Попытка
			ПланСчетов = ЭлементПланСчетов.Выбрать();
			Пока ПланСчетов.Следующий() Цикл
				Объект = ПланСчетов.ПолучитьОбъект();
				
				Если ТолькоНезаполненные Тогда
					Если НЕ ЗначениеЗаполнено(Объект.КодБыстрогоВыбора) Тогда
						Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
					КонецЕсли;
				Иначе
					Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
				КонецЕсли;
				Объект.Записать();
				
			КонецЦикла; 
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет константу шаблонов телефонов.
// 
Процедура ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()

	ТаблицаСоответствий = Новый Соответствие;
	ТаблицаСоответствий.Вставить(7,"999-99-99");
	ТаблицаСоответствий.Вставить(6,"99-99-99");
	ТаблицаСоответствий.Вставить(5,"9-99-99");
	ТаблицаСоответствий.Вставить(4,"99-99");

	ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);

	Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);

КонецПроцедуры // укЗаполнитьДанныеПоУмолчаниюДляКонтактнойИнформации()

// процедура производит обновление элемента справочника виды контактной информации
Процедура УстановитьПараметрыВидаКонтактнойИнформации(СсылкаВидыКонтактнойИнформации, Знач Тип, Знач ВидОбъектаКонтактнойИнформации)
	
	Если НЕ ЗначениеЗаполнено(СсылкаВидыКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОбъектВидКонтактнойИнформации = СсылкаВидыКонтактнойИнформации.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Тип;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = ВидОбъектаКонтактнойИнформации;
	
		ОбъектВидКонтактнойИнформации.Записать();
		
	Исключение
		ОбщегоНазначения.Сообщение("Ошибка при записи реквизитов элемента " + ОбъектВидКонтактнойИнформации.Наименование + " справочника ""Виды контактной информации""");
	КонецПопытки;

	
КонецПроцедуры

// Заполнение реквизитов справочника "Виды контактной информации"
//
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()
	#Если Клиент Тогда
	Состояние("Обновление справочника ""Виды контаткной информации""");
	#КонецЕсли
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный = Истина
	|	И (ВидыКонтактнойИнформации.Тип = &ПустойТип 
	|		ИЛИ ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ПустойВидОбъектаКонтактнойИнформации)
	|";
	
	Запрос.УстановитьПараметр("ПустойТип"                           , Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидОбъектаКонтактнойИнформации", Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
									
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.КонтактнТелефонКандидата Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛицаКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.РабочийТелефонКонтактногоЛицаКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
					
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.EmailОрганизации Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.EmailФизЛица Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
		КонецЕсли; 
	
	КонецЦикла; 
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
КонецПроцедуры

// Устанавливает флаг "Запретить использовать в проводках"
// хозрасчетным счетам 
//
Процедура УстановитьПараметрыСчетовБУиНУ()

	НачатьТранзакцию();
	#Если Клиент Тогда
	Состояние("Установка запрета использования в проводках групп счетов...");
	#КонецЕсли
	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

	ВыборкаСчетов = ПланыСчетов.Налоговый.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Заполняет регистр сведений СоответствиеСчетовБУиНУ 
//
Процедура ЗаполнитьСоответствиеСчетовБУиНУ(ТекущаяДата)
	ДокументУстановкаСоответствияСчетовБУиНУ = Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьДокумент();
	ДокументУстановкаСоответствияСчетовБУиНУ.Дата = ТекущаяДата;
	ДокументУстановкаСоответствияСчетовБУиНУ.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	ДокументУстановкаСоответствияСчетовБУиНУ.ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию();
	Попытка
		ДокументУстановкаСоответствияСчетовБУиНУ.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Возврат;
	КонецПопытки;
	Попытка
		ДокументУстановкаСоответствияСчетовБУиНУ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	КонецПопытки;
КонецПроцедуры // ЗаполнитьСоответствиеСчетовБУиНУ()

#Если Клиент Тогда
// Процедура выводит описания изменений в указанном релизе
//
// Параметры
//  НомерРелиза  – Строка - номер релиза, для которого выводится описание
//
Процедура ВывестиОписаниеИзменений(НомерРелиза, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)
	
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + НомерРелиза));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + НомерРелиза);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + НомерРелиза));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	
КонецПроцедуры // ВывестиОписаниеИзменений()
#КонецЕсли

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное) Экспорт

	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

// Заполнение реквизитов справочника "Прочие доходы и расходы"
//
Процедура ЗаполнитьСправочникПрочиеДоходыИРасходы()
	
	ПрочиеДоходыИРасходы = Справочники.ПрочиеДоходыИРасходы;
	
	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты.ПолучитьОбъект();
	СтатьяДоходовРаходов.ПринятиеКНалоговомуУчету = Ложь;
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы;
	СтатьяДоходовРаходов.Записать();

	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.КурсовыеРазницы.ПолучитьОбъект();
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы;
	СтатьяДоходовРаходов.ПринятиеКналоговомуУчету    = Истина;
	СтатьяДоходовРаходов.Записать();
	
	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ.ПолучитьОбъект();
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ;
	СтатьяДоходовРаходов.ПринятиеКналоговомуУчету    = Истина;
	СтатьяДоходовРаходов.Записать();
	
	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты.ПолучитьОбъект();
	СтатьяДоходовРаходов.ПринятиеКНалоговомуУчету = Истина;
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	СтатьяДоходовРаходов.Записать();
	
    СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.СписаниеНДСНаРасходы.ПолучитьОбъект();
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	СтатьяДоходовРаходов.ПринятиеКналоговомуУчету = Истина;
	СтатьяДоходовРаходов.Записать();

	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.СуммовыеРазницы.ПолучитьОбъект();
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	СтатьяДоходовРаходов.ПринятиеКналоговомуУчету    = Истина;
	СтатьяДоходовРаходов.Записать();
	
КонецПроцедуры

//Заполнение справочника "СобытияОС" первоначальными значениями
Процедура НачальноеЗаполениеСправочникаСобытияОС()
	 
	Попытка 
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
		СпрСобытияОС.Наименование = "Принятие к учету";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию;
		СпрСобытияОС.Наименование = "Ввод в эксплуатацию";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание;
		СпрСобытияОС.Наименование = "Списание";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Модернизация;
		СпрСобытияОС.Наименование = "Модернизация";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача;
		СпрСобытияОС.Наименование = "Передача";
		СпрСобытияОС.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//ЗАГРУЗКА КЛАССИФИКАТОРА БАНКОВ
//
Процедура ЗагрузитьКлассификаторБанков()
	
	СоответствиеТипГорода = новый соответствие;
	СоответствиеТипГорода.Вставить("1","Г.");  // ГОРОД
	СоответствиеТипГорода.Вставить("2","П.");  // ПОСЕЛОК
	СоответствиеТипГорода.Вставить("3","С.");  // СЕЛО
	СоответствиеТипГорода.Вставить("4","ПГТ.");// ПОСЕЛОК ГОРОДСКОГО ТИПА
	СоответствиеТипГорода.Вставить("5","СТ-ЦА.");// СТАНИЦА
	СоответствиеТипГорода.Вставить("6","АУЛ."); // АУЛ
	СоответствиеТипГорода.Вставить("7","РП.");   //  РАБОЧИЙ ПОСЕЛОК
	СоответствиеТипГорода.Вставить("0","");  // 
	СоответствиеТипГорода.Вставить("","");  // 
	
	Разделитель = Символы.Таб;
	СпрБанки = Справочники.Банки;
	СпРегионов = Новый СписокЗначений;

	мТекстГруппы = Справочники.Банки.ПолучитьМакет("Группы");
	КолСтрок = мТекстГруппы.КоличествоСтрок();

	//Составим список регионов
	Для к = 1 по КолСтрок Цикл
		Стр = мТекстГруппы.ПолучитьСтроку(к);

		Если (Лев(Стр,2) = "//") или (ПустаяСтрока(Стр)) Тогда
			Продолжить;
		КонецЕсли;
		НомПоля = 1;
		Пока (ПустаяСтрока(Стр) = 0) Цикл	//	пока не обработали всю шапку
	        Поз = Найти(Стр,Разделитель);
			Если Поз = 0 Тогда	//	не нашли
				НазваниеОдногоПоля = Стр;
				Стр = "";
			Иначе
				//	вырезаем очередное поля
				НазваниеОдногоПоля = Лев(Стр,Поз-1);
				Стр = Прав(Стр,СтрДлина(Стр)-Поз);
			КонецЕсли;

			НазваниеОдногоПоля = СокрЛП(НазваниеОдногоПоля);
			//	добавляем входное поле в таблицу
			Если НомПоля = 1 Тогда
				Симвл1 = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 2 Тогда
				Симвл2 = СокрЛП(НазваниеОдногоПоля);
			КонецЕсли; 

			НомПоля = НомПоля + 1;
			Если НомПоля > 2 Тогда 
				Прервать;  // Завершить просмотр строки, т.к. обработаны все необходимые поля, но есть еще что-то.
			КонецЕсли; 
		КонецЦикла;	
		
		СпРегионов.Добавить(Симвл1,Симвл2);
	КонецЦикла;	

	мТекстКлассификатора = Справочники.Банки.ПолучитьМакет("Классификатор");
	КолСтрок = мТекстКлассификатора.КоличествоСтрок();
	Коэф = 100/КолСтрок; 
	Процент=0;
	
	//Читаем реквизиты банка и сохраняем в справочник
	Для к = 1 по КолСтрок Цикл
		Стр = мТекстКлассификатора.ПолучитьСтроку(к);
		//1
		Поз = Найти(Стр,Разделитель);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//2
		Поз = Найти(Стр,Разделитель);
		ЗнПункт =Лев(Стр,Поз-1);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//3
		Поз = Найти(Стр,Разделитель);
		ЗнТипПункта = СоответствиеТипГорода.Получить(Лев(Стр,Поз-1));
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//4
		Поз = Найти(Стр,Разделитель);
		ЗнНаименование =Лев(Стр,Поз-1);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//5
		Поз = Найти(Стр,Разделитель);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//6
		Поз = Найти(Стр,Разделитель);
		ЗнБИК =Лев(Стр,Поз-1);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//7
		Поз = Найти(Стр,Разделитель);
		ЗнКорСчет =Стр;
		
		КодРег          = Сред(ЗнБИК,3,2);
		НайденныйРегион = СпРегионов.НайтиПоЗначению(КодРег);
		Если НайденныйРегион = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ЗагрузитьКлассификаторБанков_Запись(СпрБанки,ЗнНаименование,ЗнБИК,ЗнКорСчет,ЗнТипПункта+" "+ЗнПункт,НайденныйРегион.Значение,НайденныйРегион.Представление);
		#Если Клиент Тогда
		Если Процент<к*Коэф Тогда
			Состояние("Загрузка классификатора банков: "+Процент+"%");
			Процент=Процент+1;
		КонецЕсли;
		#КонецЕсли
	КонецЦикла;	
	
	ОбщегоНазначения.Сообщение("Загружен классификатор банков", Перечисления.ВидыСообщений.Информация);

КонецПроцедуры // ЗагрузитьКлассификаторБанков()

//Процедура добавляет новую запись в справочник Банки
Процедура ЗагрузитьКлассификаторБанков_Запись(СпрБанки,Наименование,БИК,КоррСчет,Город,ТекОКАТО,ТекРегион)
	
	РодительЭл = СпрБанки.НайтиПоКоду(ТекОКАТО);
	Если РодительЭл = СпрБанки.ПустаяСсылка() Тогда
		НоваяГр              = СпрБанки.СоздатьГруппу();
		НоваяГр.Код          = ТекОКАТО;
		НоваяГр.Наименование = ТекРегион;
		НоваяГр.Записать();
		РодительЭл = НоваяГр.Ссылка;
	КонецЕсли;	
	НовыйЭл = СпрБанки.СоздатьЭлемент();
	НовыйЭл.Родитель     = РодительЭл;
	НовыйЭл.Код          = БИК;
	НовыйЭл.Наименование = Наименование;
	НовыйЭл.КоррСчет     = КоррСчет;
	НовыйЭл.Город        = Город;
	НовыйЭл.Адрес        = ", ";
	НовыйЭл.Телефоны     = ""; 		
	НовыйЭл.ОбменДанными.Загрузка = истина;
	НовыйЭл.Записать();
	
КонецПроцедуры // ЗагрузитьКлассификаторБанков_Запись()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// УПРАВЛЕНИЕ ПЕРСОНАЛОМ И ЗАРАБОТНАЯ ПЛАТА

// Процедура заносит в регистр сведений ВнешниеКомпоненты все компоненты,
// которые указаны в регистре как макеты
//
Процедура ЗаполнитьСписокВнешнихКомпонент()
	
	Для Каждого Макет Из Метаданные.РегистрыСведений.ВнешниеКомпоненты.Макеты Цикл
		
		ВнешняяКомпонента = РегистрыСведений.ВнешниеКомпоненты.ПолучитьМакет(Макет.Имя);
		
		ИмяФайла = КаталогВременныхФайлов() + Макет.Имя + ".dll";
		УниверсальныеМеханизмы.ДобавлениеВнешнейКомпоненты(ИмяФайла, ВнешняяКомпонента, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВнешнихКомпонент()


// Выполняет заполнение справочника "ДоходыЕСН" 
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура ЗаполнитьКодыДоходовЕСН() 

	СпрКодыЕСН = Справочники.ДоходыЕСН;

	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.РаспределятьПоБазовымНачислениям, Ложь, 	Ложь,   Ложь);
	
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.НеЯвляетсяОбъектом,	Ложь, 	Ложь, 	Ложь); // ФБ , ФСС, ФОМС
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ВыплатыЗаСчетПрибыли,	Ложь, 	Ложь, 	Ложь);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.НеОблагаетсяЦеликом,	Ложь, 	Ложь,   Ложь); 
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ПособияЗаСчетФСС,		Ложь, 	Ложь,	Ложь);
	
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ДоговораАвторские,	Истина, Ложь,	Истина);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ДоговораГПХ,			Истина, Ложь,	Истина);
	
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ОблагаетсяЦеликом,	Истина, Истина, Истина);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.Матпомощь,			Истина, Истина,	Истина);

	// ---------------------------------------------------
	// ЗНАЧЕНИЯ СКИДОК К ДОХОДАМ ЕСН НА 01.01.2005

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЕСНДоходы.Ссылка
	|ИЗ
	|	Справочник.ДоходыЕСН КАК ЕСНДоходы
	|
	|ГДЕ
	|	(ЕСНДоходы.Предопределенный)");

	СписокПредопределенныхКодовДоходов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	ДатаСведений = Дата("20050101");

	НаборЗаписей = РегистрыСведений.ЕСНСкидкиКДоходам.СоздатьНаборЗаписей();

	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	НаборЗаписей.Отбор.Период.Значение = ДатаСведений;
	НаборЗаписей.Отбор.Период.Использование = Истина;

	НаборЗаписей.Отбор.КодДоходаЕСН.ВидСравнения = ВидСравнения.Равно;
	НаборЗаписей.Отбор.КодДоходаЕСН.Использование = Истина;
	Для Каждого КодДохода Из СписокПредопределенныхКодовДоходов Цикл
		НаборЗаписей.Отбор.КодДоходаЕСН.Значение = КодДохода;
		НаборЗаписей.Записать();
	КонецЦикла;

	// Скинем фильтр по кодам доходов перед получением оставшихся записей на дату сведений
	НаборЗаписей.Отбор.КодДоходаЕСН.Использование = Ложь;
	НаборЗаписей.Прочитать();

	ДобавитьСкидкуКДодохамЕСН(НаборЗаписей, ДатаСведений, СпрКодыЕСН.Матпомощь,3000);

	// Запишем набор записей
	НаборЗаписей.Записать();

КонецПроцедуры

// Выполняет заполнение реквизитов планов видов расчета регламентированного учета
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура ЗаполнитьПланыВидовРасчетаОрганизации() 
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ЗависимоеВторогоУровня = НайтиСоздатьКатегорию("00002","Зависимое второго уровня");
	ЗависимоеТретьегоУровня = НайтиСоздатьКатегорию("00003","Зависимое третьего уровня");
	ЗависимоеЧетвертогоУровня = НайтиСоздатьКатегорию("00004","Зависимое четвертого уровня");
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	ЕСНСпособыОтражения      = Справочники.ДоходыЕСН;
	ВзносыСпособыОтражения   = Справочники.ДоходыПоСтраховымВзносам;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	КодДоходаНДФЛБЛ = ДоходыНДФЛ.Код2300;
	КодДоходаНДФЛОтпуск = ДоходыНДФЛ.Код2012;
	КодДоходаЕСНПоУмолчанию  = ЕСНСпособыОтражения.ОблагаетсяЦеликом;
	КодДоходаВзносовПоУмолчанию = ВзносыСпособыОтражения.ОблагаетсяЦеликом;
	КодДоходаВзносовПоБазе   = ВзносыСпособыОтражения.РаспределятьПоБазовымНачислениям;
	ПособияЗаСчетФССВзносов	 = ВзносыСпособыОтражения.ПособияЗаСчетФСС;
	КодДоходаЕСНПоБазе		 = ЕСНСпособыОтражения.РаспределятьПоБазовымНачислениям;
	ПособияЗаСчетФСС		 = ЕСНСпособыОтражения.ПособияЗаСчетФСС;
	
	
	НеОтражатьВБухУчете   = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете;
	ПустойСпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	СпособОтраженияПоБазовымРасчетам = Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям;
	ПланСчетов = ПланыСчетов.Хозрасчетный;
	
	//заполним способ отражения по умолчанию
	СпособУчетПоУмолчанию = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию.ПолучитьОбъект();
	СпособУчетПоУмолчанию.СчетДт = ПланСчетов.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД;
	СпособУчетПоУмолчанию.СубконтоДт1 = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	СпособУчетПоУмолчанию.СубконтоДт2 = Справочники.СтатьиЗатрат.ПустаяСсылка();
	СпособУчетПоУмолчанию.СчетКт = ПланСчетов.РасчетыСПерсоналомПоОплатеТруда;
	СпособУчетПоУмолчанию.СубконтоКт1 = Справочники.ФизическиеЛица.ПустаяСсылка();
	СпособУчетПоУмолчанию.СчетДтНУ = БухгалтерскийУчетДополнительный.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПланСчетов.ОбщехозяйственныеРасходы));
	СпособУчетПоУмолчанию.СубконтоДтНУ1 = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	СпособУчетПоУмолчанию.СубконтоДтНУ2 = Справочники.СтатьиЗатрат.ПустаяСсылка();
	СпособУчетПоУмолчанию.СчетКтНУ = БухгалтерскийУчетДополнительный.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПланСчетов.РасчетыСПерсоналомПоОплатеТруда));
	СпособУчетПоУмолчанию.СубконтоКтНУ1 = Справочники.ФизическиеЛица.ПустаяСсылка();
	СпособУчетПоУмолчанию.СубконтоКтНУ2 = Справочники.СтатьиЗатрат.ПустаяСсылка();
	СпособУчетПоУмолчанию.Записать();
	
	// Основные начисления организации 
	
	 ПВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	УчетВремени = Справочники.КлассификаторИспользованияРабочегоВремени;

	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладПоДням, 						СпРасчета.ПоМесячнойТарифнойСтавкеПоДням,				Перечисления.ВидыВремени.ОтработанноеВПределахНормы,	Категории.Первичное,			УчетВремени.Работа,				Истина, Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп1ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладПоЧасам, 					СпРасчета.ПоМесячнойТарифнойСтавкеПоЧасам,				Перечисления.ВидыВремени.ОтработанноеВПределахНормы,	Категории.Первичное,			УчетВремени.Работа,	 			Истина, Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп1ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ТарифЧасовой, 					СпРасчета.ПоЧасовойТарифнойСтавке,						Перечисления.ВидыВремени.ОтработанноеВПределахНормы,	Категории.Первичное,			УчетВремени.Работа,				Истина, Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп1ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ТарифДневной, 					СпРасчета.ПоДневнойТарифнойСтавке,						Перечисления.ВидыВремени.ОтработанноеВПределахНормы,	Категории.Первичное,			УчетВремени.Работа, 				Истина, Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп1ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.СдельнаяОплата, 					СпРасчета.СдельныйЗаработок,							Перечисления.ВидыВремени.ОтработанноеВПределахНормы,	Категории.Первичное,			УчетВремени.Работа,				Истина, Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп1ст255,,,Ложь);
	
	КодДоходаЕСН    = КодДоходаЕСНПоУмолчанию; 
	СпособОтражения = ПустойСпособОтражения; 
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднему,   				СпРасчета.ПоСреднемуЗаработку,							Перечисления.ВидыВремени.ЦелодневноеНеотработанное,		Категории.Первичное,			УчетВремени.Командировка,			Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН,	КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, СпособОтражения, КодыДоходаПоСт255.пп6ст255,Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,,Ложь);
	
	// два отпуска
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднемуОтпШестидневка,	СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоШестидневке,	Перечисления.ВидыВремени.ЦелодневноеНеотработанное,		ЗависимоеТретьегоУровня, 	УчетВремени.ОсновнойОтпуск, 		Ложь,   Истина, КодДоходаНДФЛОтпуск,	КодДоходаЕСН, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, СпособОтражения, КодыДоходаПоСт255.пп7ст255,Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднемуОтпКалендарныеДни,СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня, 	УчетВремени.ОсновнойОтпуск, 		Ложь,   Истина, КодДоходаНДФЛОтпуск,	КодДоходаЕСН, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, СпособОтражения, КодыДоходаПоСт255.пп7ст255,Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,,Ложь);
	
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойОкладПоДням,				СпРасчета.ПоМесячнойТарифнойСтавкеПоДням,				Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Простой, 				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп6ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойОкладПоЧасам,				СпРасчета.ПоМесячнойТарифнойСтавкеПоЧасам,				Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Простой, 				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп6ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПочасовойПростойОкладПоЧасам,		СпРасчета.ПоМесячнойТарифнойСтавкеПоЧасам,				Перечисления.ВидыВремени.ЧасовоеНеотработанное, 		Категории.Первичное,	 		УчетВремени.Простой,				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп6ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойТарифДневной,				СпРасчета.ПоДневнойТарифнойСтавке,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Простой, 				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп6ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойТарифЧасовой,				СпРасчета.ПоЧасовойТарифнойСтавке,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Простой, 				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп6ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПочасовойПростойТарифЧасовой,		СпРасчета.ПоЧасовойТарифнойСтавке,						Перечисления.ВидыВремени.ЧасовоеНеотработанное, 		Категории.Первичное, 			УчетВремени.Простой,				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп6ст255,,,Ложь);
	
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойПоВинеРаботодателя,		СпРасчета.ПоСреднемуЗаработку,							Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное,			УчетВремени.ПростойПоВинеРаботодателя,		Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, СпособОтражения, КодыДоходаПоСт255.пп6ст255, Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПочасовойПростойПоВинеРаботодателя,СпРасчета.ПоСреднемуЗаработку,							Перечисления.ВидыВремени.ЧасовоеНеотработанное, 		Категории.Первичное,			УчетВремени.ПростойПоВинеРаботодателя,		Ложь,	Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН,	КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, СпособОтражения, КодыДоходаПоСт255.пп6ст255, Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,,Ложь);
	
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПраздничныхИВыходных,		СпРасчета.ФиксированнойСуммой,							Перечисления.ВидыВремени.ОтработанноеСверхНормы, 		Категории.Первичное, 			УчетВремени.Праздники, 				Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп1ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаПраздничныеИВыходные,	СпРасчета.ФиксированнойСуммой,							Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы,Категории.Первичное,		Неопределено, 					Ложь,   Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп3ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаСверхурочных,				СпРасчета.ФиксированнойСуммой,							Перечисления.ВидыВремени.ОтработанноеСверхНормы, 		Категории.Первичное,			УчетВремени.Сверхурочные, 			Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп3ст255,,,Ложь);
	
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаВечерниеЧасы,	 		СпРасчета.ДоплатаЗаВечерниеЧасы,						Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы,Категории.Первичное,		УчетВремени.РаботаВечерниеЧасы,			Ложь,   Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп3ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаНочныеЧасы, 				СпРасчета.ДоплатаЗаНочныеЧасы,							Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы,Категории.Первичное,		УчетВремени.РаботаНочныеЧасы, 			Ложь,   Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, , КодыДоходаПоСт255.пп3ст255,,,Ложь);

	// начисления по больничному листу	
	СпособУчетаБЛ = Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям;
	
	СпособУчетаФСС = ДобавитьСпособУчетаРегЗарплаты("За счет ЕСН в части ФСС", ПланСчетов.ФСС, Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, , , 
			ПланСчетов.РасчетыСПерсоналомПоОплатеТруда,Справочники.ФизическиеЛица.ПустаяСсылка(),,,
			ПланыСчетов.Налоговый.ПустаяСсылка(), , , ,
			ПланыСчетов.Налоговый.ПустаяСсылка());	
	СпособУчетаБЛпоТравме = ДобавитьСпособУчетаРегЗарплаты("Оплата б/л по травматизму", ПланСчетов.ФСС_НСиПЗ, Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию,,, 
			ПланСчетов.РасчетыСПерсоналомПоОплатеТруда,Справочники.ФизическиеЛица.ПустаяСсылка(),,,
			ПланыСчетов.Налоговый.ПустаяСсылка(), , , ,
			ПланыСчетов.Налоговый.ПустаяСсылка());	
	
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднемуБЛ, 				СпРасчета.ПоСреднемуЗаработкуФСС,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня, 		УчетВремени.Болезнь, 				Ложь,   Истина, КодДоходаНДФЛБЛ, 	 ПособияЗаСчетФСС, ПособияЗаСчетФССВзносов,	 Перечисления.ДоходыФСС_НС.НеОблагается, СпособУчетаБЛ, ,Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,,Ложь,Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаПоСреднемуБЛ, 				СпРасчета.ДоплатаДоСреднегоЗаработкаФСС,				Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, 	ЗависимоеЧетвертогоУровня, 	УчетВремени.Болезнь, 				Ложь,   Ложь, КодДоходаНДФЛПоУмолчанию,  КодДоходаЕСНПоБазе, КодДоходаВзносовПоБазе,	 Перечисления.ДоходыФСС_НС.Облагается, СпособОтраженияПоБазовымРасчетам, Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтсутствиеПоБолезни, 				СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Болезнь, 				Ложь,   Истина, , , ,						 Перечисления.ДоходыФСС_НС.НеОблагается, НеОтражатьВБухУчете);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами,СпРасчета.ПоСреднемуЗаработку,				Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.ДополнительныеВыходныеДниОплачиваемые,Ложь, Истина, КодДоходаНДФЛПоУмолчанию,ПособияЗаСчетФСС, ПособияЗаСчетФССВзносов,	 Перечисления.ДоходыФСС_НС.НеОблагается, СпособУчетаБЛ, ,Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,,Ложь, Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаБЛПоТравмеНаПроизводстве,	СпРасчета.ПоСреднемуЗаработкуФСС,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня, 		УчетВремени.Болезнь, 				Ложь,   Истина, КодДоходаНДФЛБЛ, ЕСНСпособыОтражения.НеОблагаетсяЦеликом, ВзносыСпособыОтражения.НеОблагаетсяЦеликом, Перечисления.ДоходыФСС_НС.НеОблагается, СпособУчетаБЛпоТравме, ,Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,,Ложь, Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускПоБеременностиИРодам, 		СпРасчета.ПоСреднемуЗаработкуФСС,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня, 		УчетВремени.ОтпускПоБеременностиИРодам, 	Ложь,   Истина, , 			 ПособияЗаСчетФСС, ПособияЗаСчетФССВзносов, 	 Перечисления.ДоходыФСС_НС.НеОблагается, СпособУчетаБЛ, ,Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,,Ложь, Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтсутствиеПоБолезниПоБеременности,СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.ОтпускПоБеременностиИРодам, 	Ложь,   Истина, , , ,						 Перечисления.ДоходыФСС_НС.НеОблагается, НеОтражатьВБухУчете);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаБЛПоТравмеВБыту,			СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное,		Категории.Первичное,			УчетВремени.БолезньБезОплаты,			Ложь,   Истина, , , , 						 Перечисления.ДоходыФСС_НС.НеОблагается, НеОтражатьВБухУчете);
	
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеПоУходуЗаРебенкомДо1_5Лет,	СпРасчета.ПособиеПоУходуЗаРебенкомДо1_5Лет,				Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 						Ложь,   Ложь, ,			 ПособияЗаСчетФСС, ПособияЗаСчетФССВзносов,	 Перечисления.ДоходыФСС_НС.НеОблагается, СпособУчетаБЛ, , Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,,Ложь,Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеПоУходуЗаРебенкомДо3Лет,	СпРасчета.ПособиеПоУходуЗаРебенкомДо3Лет,				Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 							Ложь,   Ложь, ,		ЕСНСпособыОтражения.НеОблагаетсяЦеликом, ВзносыСпособыОтражения.НеОблагаетсяЦеликом, Перечисления.ДоходыФСС_НС.НеОблагается);
	
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускПоУходуЗаРебенкомБезОплаты,	СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное,			УчетВремени.ОтпускПоУходуЗаРебенком, 		Ложь,   Истина, , , , Перечисления.ДоходыФСС_НС.Облагается, НеОтражатьВБухУчете);
	
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.Невыход,							СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.НеявкиПоНевыясненнымПричинам, 	Ложь,   Истина, , , , Перечисления.ДоходыФСС_НС.Облагается, НеОтражатьВБухУчете);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускБезОплатыПоТКРФ,			СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.НеоплачиваемыйОтпускПоЗаконодательству,Ложь,Истина, , , , Перечисления.ДоходыФСС_НС.Облагается, НеОтражатьВБухУчете);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускБезОплатыУчебный,			СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.ОтпускНаОбучениеНеоплачиваемый, 	Ложь,   Истина, , , , Перечисления.ДоходыФСС_НС.Облагается, НеОтражатьВБухУчете);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускЗаСвойСчет,					СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное,		УчетВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя,Ложь,	Истина, , , , Перечисления.ДоходыФСС_НС.Облагается, НеОтражатьВБухУчете);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.Прогул,							СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Прогулы, 				Ложь,   Истина, , , , Перечисления.ДоходыФСС_НС.Облагается, НеОтражатьВБухУчете);
	
	КодДоходаЕСН    = КодДоходаЕСНПоБазе; 
	СпособОтражения = СпособОтраженияПоБазовымРасчетам; 
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.РайонныйКоэффициент,				СпРасчета.Процентом,									Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, 	ЗависимоеВторогоУровня, УчетВремени.Работа, 		 		Ложь,   Ложь,	КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, КодДоходаВзносовПоБазе,Перечисления.ДоходыФСС_НС.Облагается, СпособОтражения, КодыДоходаПоСт255.пп11ст255,,,Ложь);
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.СевернаяНадбавка,					СпРасчета.СевернаяНадбавка,								Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы,	ЗависимоеВторогоУровня, УчетВремени.Работа, 		 		Ложь,   Ложь,	КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, КодДоходаВзносовПоБазе,Перечисления.ДоходыФСС_НС.Облагается, СпособОтражения, КодыДоходаПоСт255.пп12ст255,,,Ложь);
	
	// Непредопределенные виды расчетов

	// доплата до среднего заработка
	ВидРасчетаДоплатаДоСреднегоЗаработка = СоздатьВидРасчета(ПВР, "00035", "Доплата до среднего заработка");
	КодДоходаЕСН    = КодДоходаЕСНПоУмолчанию;
	СпособОтражения = ПустойСпособОтражения;
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ВидРасчетаДоплатаДоСреднегоЗаработка, СпРасчета.ДоплатаДоСреднегоЗаработка, Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.ЗависимоеПервогоУровня, УчетВремени.Работа, Ложь, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, СпособОтражения, КодыДоходаПоСт255.пп6ст255, Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству, Истина, Ложь);
	
	БЛпрофзаболевание = СоздатьВидРасчета(ПВР, "00028", "Пособие в связи с профессиональными заболеваниями");
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(БЛпрофзаболевание,					СпРасчета.ПоСреднемуЗаработкуФСС,	Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 				ЗависимоеТретьегоУровня, 		УчетВремени.Болезнь, Ложь,   Истина, КодДоходаНДФЛБЛ, ЕСНСпособыОтражения.НеОблагаетсяЦеликом, ВзносыСпособыОтражения.НеОблагаетсяЦеликом, Перечисления.ДоходыФСС_НС.НеОблагается, СпособУчетаБЛпоТравме, ,Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,,Ложь, Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание);
	
	// Внутрисменный прогул
	ВидРасчетаВнутрисменныйПрогул = СоздатьВидРасчета(ПВР, "00036", "Внутрисменный прогул");
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(ВидРасчетаВнутрисменныйПрогул, СпРасчета.НулеваяСумма, Перечисления.ВидыВремени.ЧасовоеНеотработанное, Категории.Первичное, УчетВремени.Прогулы, Ложь, Истина, , , , Перечисления.ДоходыФСС_НС.Облагается, НеОтражатьВБухУчете,,,, Ложь);
	
	// ОтпускУчебный
	ВидРасчетаОтпускУчебный = СоздатьВидРасчета(ПВР, "00037", "Отпуск учебный");
	ОбновлениеИнформационнойБазыСервер.УстановитьРеквизитыОсновногоНачисленияОрганизации(
		ВидРасчетаОтпускУчебный,
		СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,
		Перечисления.ВидыВремени.ЦелодневноеНеотработанное,
		ЗависимоеТретьегоУровня,
		УчетВремени.ОтпускНаОбучение,
		Ложь,
		Истина,
		КодДоходаНДФЛОтпуск,
		КодДоходаЕСН,
		КодДоходаВзносовПоУмолчанию,
		Перечисления.ДоходыФСС_НС.Облагается,
		СпособОтражения,
		КодыДоходаПоСт255.пп7ст255,
		Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,
		,
		Ложь);
	
	// Дополнительные начисления организации
	
	ПВР = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций;
	ВидыПремии = Перечисления.ВидыПремии;
	КодДоходаЕСН    = КодДоходаЕСНПоУмолчанию; 
	СпособОтражения = ПустойСпособОтражения;
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.Годовая, СпРасчета.Процентом, Категории.ЗависимоеПервогоУровня, ВидыПремии.ГодоваяПремия, 	12, , КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, СпособОтражения, КодыДоходаПоСт255.пп2ст255);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.Квартальная, СпРасчета.Процентом, Категории.ЗависимоеПервогоУровня, ВидыПремии.Премия, 		 3, , КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, СпособОтражения, КодыДоходаПоСт255.пп2ст255);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.Месячная, СпРасчета.Процентом, Категории.ЗависимоеПервогоУровня, ВидыПремии.Премия, 	   	 1, , КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.Облагается, СпособОтражения, КодыДоходаПоСт255.пп2ст255);
	
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ДивидендыРаботников,						СпРасчета.ФиксированнойСуммой, 			Категории.Первичное				, ВидыПремии.НеПремия, 		 0, , ДоходыНДФЛ.Код1010	, 	ЕСНСпособыОтражения.ВыплатыЗаСчетПрибыли, ВзносыСпособыОтражения.НеЯвляетсяОбъектом, Перечисления.ДоходыФСС_НС.НеОблагается, Неопределено, Неопределено);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ДивидендыАкционеров,						СпРасчета.ФиксированнойСуммой, 			Категории.Первичное				, ВидыПремии.НеПремия, 		 0, , ДоходыНДФЛ.Код1010	, 	ЕСНСпособыОтражения.ВыплатыЗаСчетПрибыли, ВзносыСпособыОтражения.НеЯвляетсяОбъектом, Перечисления.ДоходыФСС_НС.НеОблагается, Неопределено, Неопределено);
	
	КодДоходаЕСН    = ЕСНСпособыОтражения.НеОблагаетсяЦеликом; 
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ВыходноеПособие,							СпРасчета.ПоСреднемуЗаработку, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству, Неопределено	, 	КодДоходаЕСН, ВзносыСпособыОтражения.НеОблагаетсяЦеликом,  Перечисления.ДоходыФСС_НС.НеОблагается, СпособОтражения, КодыДоходаПоСт255.пп9ст255);
	
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.СохраняемыйЗаработокНаВремяТрудоустройства,	СпРасчета.ПоСреднемуЗаработку, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству, Неопределено	, 	КодДоходаЕСН, ВзносыСпособыОтражения.НеОблагаетсяЦеликом,  Перечисления.ДоходыФСС_НС.НеОблагается, СпособОтражения, КодыДоходаПоСт255.пп9ст255);
	
	// две компенсации отпуска (при увольнении)
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияОтпускаКалендарныеДни,	СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,	Категории.Первичное	, ВидыПремии.НеПремия,		 0, Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству, КодДоходаНДФЛОтпуск, КодДоходаЕСН, КодДоходаВзносовПоУмолчанию, Перечисления.ДоходыФСС_НС.НеОблагается, СпособОтражения, КодыДоходаПоСт255.пп8ст255);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияОтпускаШестидневка,		СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоШестидневке,		Категории.Первичное	, ВидыПремии.НеПремия,		 0, Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству, КодДоходаНДФЛОтпуск, КодДоходаЕСН, КодДоходаВзносовПоУмолчанию,  Перечисления.ДоходыФСС_НС.НеОблагается, СпособОтражения, КодыДоходаПоСт255.пп8ст255);
	
	// и еще две компенсации отпуска (без увольнения)
	КодДоходаЕСН    = КодДоходаЕСНПоУмолчанию; 
	СпособОтражения = ПустойСпособОтражения;
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.УдержаниеЗаНеотработанныйОтпускКалендарныеДни, СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,Категории.Первичное	, ВидыПремии.НеПремия,	 0, Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству, КодДоходаНДФЛОтпуск, КодДоходаЕСН, КодДоходаВзносовПоУмолчанию,	Перечисления.ДоходыФСС_НС.Облагается,	СпособОтражения, КодыДоходаПоСт255.пп7ст255);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.УдержаниеЗаНеотработанныйОтпускШестидневка,	СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоШестидневке,		Категории.Первичное	, ВидыПремии.НеПремия,	 0, Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству, КодДоходаНДФЛОтпуск, КодДоходаЕСН, КодДоходаВзносовПоУмолчанию,	Перечисления.ДоходыФСС_НС.Облагается,	СпособОтражения, КодыДоходаПоСт255.пп7ст255);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияОтпускаКалендарныеДниБезУвольнения,СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,	Категории.Первичное	, ВидыПремии.НеПремия,	 0, Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству, КодДоходаНДФЛОтпуск, КодДоходаЕСН, КодДоходаВзносовПоУмолчанию,	Перечисления.ДоходыФСС_НС.Облагается,	СпособОтражения, КодыДоходаПоСт255.пп8ст255);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияОтпускаШестидневкаБезУвольнения,	СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоШестидневке,		Категории.Первичное	, ВидыПремии.НеПремия,	 0, Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству, КодДоходаНДФЛОтпуск, КодДоходаЕСН, КодДоходаВзносовПоУмолчанию,	Перечисления.ДоходыФСС_НС.Облагается,	СпособОтражения, КодыДоходаПоСт255.пп8ст255);
	
	// пособия за счет ФСС
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ВСвязиСоСмертью,							СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, ,  Неопределено	, 	ПособияЗаСчетФСС, ПособияЗаСчетФССВзносов,	Перечисления.ДоходыФСС_НС.НеОблагается, Неопределено, Неопределено, Перечисления.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ПриПостановкеНаУчетВРанниеСрокиБеременности,СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, ,  Неопределено	, 	ПособияЗаСчетФСС, ПособияЗаСчетФССВзносов,	Перечисления.ДоходыФСС_НС.НеОблагается, Неопределено, Неопределено, Перечисления.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ПриРожденииРебенка,							СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, ,  Неопределено	, 	ПособияЗаСчетФСС, ПособияЗаСчетФССВзносов,	Перечисления.ДоходыФСС_НС.НеОблагается, Неопределено, Неопределено, Перечисления.ВидыПособийСоциальногоСтрахования.ПриРожденииРебенка);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ПриУсыновленииРебенка,						СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, ,  Неопределено	, 	ПособияЗаСчетФСС, ПособияЗаСчетФССВзносов,	Перечисления.ДоходыФСС_НС.НеОблагается, Неопределено, Неопределено, Перечисления.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка);
	
	// договора ГПХ
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ДоговорПодряда, 							СпРасчета.ПоДоговоруФиксированнойСуммой,	Категории.Первичное			, ВидыПремии.НеПремия,		 0, ,  ДоходыНДФЛ.Код2010, 	ЕСНСпособыОтражения.ДоговораГПХ, ВзносыСпособыОтражения.ДоговорыГПХ,	  Перечисления.ДоходыФСС_НС.НеОблагается, Неопределено, КодыДоходаПоСт255.пп21ст255);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.АвторскийДоговор, 							СпРасчета.ПоДоговоруФиксированнойСуммой,	Категории.Первичное			, ВидыПремии.НеПремия,		 0, ,  ДоходыНДФЛ.Код2201, 	ЕСНСпособыОтражения.ДоговораАвторские, ВзносыСпособыОтражения.АвторскиеЛитературныеПроизведения,	  Перечисления.ДоходыФСС_НС.НеОблагается, Неопределено, КодыДоходаПоСт255.пп21ст255);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ЛицензионныйДоговор, 						СпРасчета.ПоДоговоруФиксированнойСуммой,	Категории.Первичное			, ВидыПремии.НеПремия,		 0, ,  ДоходыНДФЛ.Код1300, 	ЕСНСпособыОтражения.НеЯвляетсяОбъектом, ВзносыСпособыОтражения.АвторскиеЛитературныеПроизведения,	  Перечисления.ДоходыФСС_НС.НеОблагается, Неопределено, КодыДоходаПоСт255.пп21ст255);

	// компенсация подотчетных ДС
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияПодотчетныхДС, 					СпРасчета.ФиксированнойСуммой,				Категории.Первичное			, ВидыПремии.НеПремия,		 0, , Неопределено, 		Неопределено,				  Неопределено,	Неопределено,			 Неопределено, Неопределено);
	
	// ----------------------------------------------------------------------------------------------------
	// Установка базовых видов расчетов
	
	ПВРОсн  = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	ПВРДоп  = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций;
	ПВРУд   = ПланыВидовРасчета.УдержанияОрганизаций;
	ПВРСред = ПланыВидовРасчета.СреднийЗаработок;
	
	СпНачисленийЗаОтработанноеВремя = Новый СписокЗначений;
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладПоДням);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладПоЧасам);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ТарифДневной);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ТарифЧасовой);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ДоплатаЗаПраздничныеИВыходные);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОплатаПраздничныхИВыходных);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОплатаСверхурочных);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.СдельнаяОплата);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ДоплатаЗаВечерниеЧасы);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ДоплатаЗаНочныеЧасы);
	
	// База основных начислений организации
	СпБазовыхРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать();
	СпБазовыхРасчетов.Добавить(ПВРДоп.Годовая);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Месячная);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Квартальная);
	УстановитьБазовыеИВедущиеРасчеты(ПВРОсн.РайонныйКоэффициент, СпБазовыхРасчетов, СпБазовыхРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРОсн.СевернаяНадбавка, СпБазовыхРасчетов, СпБазовыхРасчетов);
	
	// доплата до среднего заработка имеет базу
	УстановитьБазовыеИВедущиеРасчеты(ВидРасчетаДоплатаДоСреднегоЗаработка, СпБазовыхРасчетов, СпБазовыхРасчетов);
	
	СпБазовыхРасчетов = Новый СписокЗначений;
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаБЛПоТравмеНаПроизводстве);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаПоСреднемуБЛ);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОтпускПоБеременностиИРодам);
	УстановитьБазовыеИВедущиеРасчеты(ПВРОсн.ДоплатаПоСреднемуБЛ, СпБазовыхРасчетов, СпБазовыхРасчетов);
	
	// База дополнительных начислений организации
	
	// все виды премий
	СпБазовыхРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать();
	УстановитьБазовыеИВедущиеРасчеты(ПВРДоп.Годовая, СпБазовыхРасчетов, СпБазовыхРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРДоп.Квартальная, СпБазовыхРасчетов, СпБазовыхРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРДоп.Месячная, СпБазовыхРасчетов, СпБазовыхРасчетов);
	
	// Базы видов расчета плана "средний заработок" 
	
	// месячные и квартальные премии
	СпБазовыхРасчетов = Новый СписокЗначений;
	СпБазовыхРасчетов.Добавить(ПВРДоп.Годовая);
	СпВедущихРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать(); // т.е. изменение оклада должно вызвать перерасчет не только премии, но и среднего заработка
	СпВедущихРасчетов.Добавить(ПВРДоп.Годовая);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоГодовойПремии, СпБазовыхРасчетов, СпВедущихРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоГодовойПремииБЛ, СпБазовыхРасчетов, СпВедущихРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоГодовойПремииИндексируемые, СпБазовыхРасчетов, СпВедущихРасчетов);
	
	// месячные и квартальные премии
	СпБазовыхРасчетов = Новый СписокЗначений;
	СпБазовыхРасчетов.Добавить(ПВРДоп.Месячная);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Квартальная);
	СпВедущихРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать(); // т.е. изменение оклада должно вызвать перерасчет не только премии, но и среднего заработка
	СпВедущихРасчетов.Добавить(ПВРДоп.Месячная);
	СпВедущихРасчетов.Добавить(ПВРДоп.Квартальная);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоПремиям, СпБазовыхРасчетов, СпВедущихРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоПремиямБЛ, СпБазовыхРасчетов, СпВедущихРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоПремиямИндексируемые, СпБазовыхРасчетов, СпВедущихРасчетов);
	
	// основной заработок
	СпБазовыхРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать();



	СпБазовыхРасчетов.Добавить(ПВРОсн.РайонныйКоэффициент);
	СпБазовыхРасчетов.Добавить(ПВРОсн.СевернаяНадбавка);
	СпВедущихРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать();
	СпВедущихРасчетов.Добавить(ПВРДоп.Годовая);
	СпВедущихРасчетов.Добавить(ПВРДоп.Месячная);
	СпВедущихРасчетов.Добавить(ПВРДоп.Квартальная);
	СпВедущихРасчетов.Добавить(ПВРОсн.РайонныйКоэффициент);
	СпВедущихРасчетов.Добавить(ПВРОсн.СевернаяНадбавка);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоЗаработкуБЛ, СпБазовыхРасчетов, СпВедущихРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоЗаработку, СпБазовыхРасчетов, СпВедущихРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоЗаработкуИндексируемые, СпБазовыхРасчетов, СпВедущихРасчетов);
	
	// База удержаний организации
	
	// исполнительные листы
	СпБазовыхРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать();
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаПоСреднему);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаПоСреднемуОтпКалендарныеДни);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаПоСреднемуОтпШестидневка);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами);
	СпБазовыхРасчетов.Добавить(ВидРасчетаДоплатаДоСреднегоЗаработка);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойОкладПоДням);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойОкладПоЧасам);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойПоВинеРаботодателя);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойТарифДневной);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойТарифЧасовой);
	СпБазовыхРасчетов.Добавить(ПВРОсн.РайонныйКоэффициент);
	СпБазовыхРасчетов.Добавить(ПВРОсн.СевернаяНадбавка);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Годовая);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Квартальная);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Месячная);
	СпБазовыхРасчетов.Добавить(ПВРДоп.КомпенсацияОтпускаКалендарныеДниБезУвольнения);
	СпБазовыхРасчетов.Добавить(ПВРДоп.КомпенсацияОтпускаКалендарныеДни);
	СпБазовыхРасчетов.Добавить(ПВРДоп.КомпенсацияОтпускаШестидневка);
	СпБазовыхРасчетов.Добавить(ПВРДоп.КомпенсацияОтпускаШестидневкаБезУвольнения);
	
	СпБазовыхРасчетов.Добавить(ПВРДоп.СохраняемыйЗаработокНаВремяТрудоустройства);
	СпБазовыхРасчетов.Добавить(ПВРДоп.АвторскийДоговор);
	СпБазовыхРасчетов.Добавить(ПВРДоп.ДоговорПодряда);
	СпБазовыхРасчетов.Добавить(ПВРДоп.ЛицензионныйДоговор);
	СпБазовыхРасчетов.Добавить(ПВРДоп.ДивидендыРаботников);
	СпБазовыхРасчетов.Добавить(ПВРДоп.ДивидендыАкционеров);
	
	// Удержания организаций 
	
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.УдержаниеЗаНеотработанныйОтпускКалендарныеДни, 	СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,	Категории.Первичное, Неопределено, Неопределено, );
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.УдержаниеЗаНеотработанныйОтпускШестидневка, 	СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоШестидневке,		Категории.Первичное, Неопределено, Неопределено, );
	
	СпособУчетаИЛ = ДобавитьСпособУчетаРегЗарплаты("Удержания по исполнительным документам", ПланСчетов.РасчетыСПерсоналомПоОплатеТруда,Справочники.ФизическиеЛица.ПустаяСсылка(),,, 
					ПланСчетов.РасчетыПоИсполнительнымДокументамРаботников,Справочники.Контрагенты.ПустаяСсылка(),Документы.ИсполнительныйЛист.ПустаяСсылка(),,
					ПланыСчетов.Налоговый.ПустаяСсылка(), , , ,
					ПланыСчетов.Налоговый.ПустаяСсылка());	
	
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛПроцентомБезБЛ			, СпРасчета.ИсполнительныйЛистПроцентом				, Категории.Первичное			, СпособУчетаИЛ,СпБазовыхРасчетов);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛПроцентомДоПределаБезБЛ	, СпРасчета.ИсполнительныйЛистПроцентомДоПредела	, Категории.Первичное			, СпособУчетаИЛ,СпБазовыхРасчетов);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛФиксированнойСуммой		, СпРасчета.УдержаниеФиксированнойСуммой			, Категории.Первичное			, СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛФиксированнойСуммойДоПредела, СпРасчета.ИсполнительныйЛистФиксСуммойДоПредела	, Категории.Первичное			, СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ПочтовыйСборПоИЛ			, СпРасчета.ПочтовыйСбор							, Категории.ЗависимоеПервогоУровня,	СпособУчетаИЛ);
	
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаПоСреднемуБЛ);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаБЛПоТравмеВБыту);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаБЛПоТравмеНаПроизводстве);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ДоплатаПоСреднемуБЛ);
	
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛПроцентом					, СпРасчета.ИсполнительныйЛистПроцентом				, Категории.Первичное			, СпособУчетаИЛ,СпБазовыхРасчетов);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛПроцентомДоПредела		, СпРасчета.ИсполнительныйЛистПроцентомДоПредела	, Категории.Первичное			, СпособУчетаИЛ,СпБазовыхРасчетов);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.УдержаниеПодотчетныхДС	, СпРасчета.УдержаниеФиксированнойСуммой			, Категории.Первичное			, Неопределено);
	
	ВидРасчетаДСВ = СоздатьВидРасчета(ПВРУд, "00022", "Добровольные страховые взносы в ПФР (процентом)");
	УстановитьРеквизитыУдержанияОрганизации(ВидРасчетаДСВ, СпРасчета.ПроцентомОтОблагаемыхЕСННачислений	, Категории.Первичное, Неопределено, , , Истина);
	ВидРасчетаДСВ = СоздатьВидРасчета(ПВРУд, "00021", "Добровольные страховые взносы в ПФР (фиксированной суммой)");
	УстановитьРеквизитыУдержанияОрганизации(ВидРасчетаДСВ, СпРасчета.УдержаниеФиксированнойСуммой		, Категории.Первичное, Неопределено, , , Истина);
	
	// Дополнить "ОтсутствиеПоБолезниПоБеременности" и "ОтсутствиеПоБолезни" в те ВР, в вытесняющих ВР
	// которых есть "ОплатаПоСреднемуБЛ" или "ОтпускПоБеременностиИРодам" соответственно.
	СписокВидовРасчета = Новый Массив;
	СписокВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
	СписокВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
	
	СписокНовыхВидовРасчета = Новый Массив;
	СписокНовыхВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни);
	СписокНовыхВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета = &ОплатаПоСреднемуБЛ
	|			ТОГДА ""ОплатаПоСреднемуБЛ""
	|		ИНАЧЕ ""ОтпускПоБеременностиИРодам""
	|	КОНЕЦ КАК ВидБЛ
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета В(&СписокВидовРасчета)
	|	И (НЕ ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка КАК Ссылка
	|				ИЗ
	|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|				ГДЕ
	|					ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета В (&СписокНовыхВидовРасчета)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("СписокВидовРасчета", СписокВидовРасчета);
	Запрос.УстановитьПараметр("СписокНовыхВидовРасчета", СписокНовыхВидовРасчета);
	Запрос.УстановитьПараметр("ОплатаПоСреднемуБЛ", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ВРОбъект = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		ВРОбъект.ОбменДанными.Загрузка = Истина;
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			Если ВыборкаЗапроса.ВидБЛ = "ОплатаПоСреднемуБЛ" Тогда
				ВРОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни;
			ИначеЕсли ВыборкаЗапроса.ВидБЛ = "ОтпускПоБеременностиИРодам" Тогда
				ВРОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности;
			КонецЕсли; 
		КонецЦикла;
		
		Попытка
			ВРОбъект.Записать();
		Исключение
			ОбщегоНазначения.Сообщение("Вид расчета " + ВРОбъект.Наименование + ": обнаружено дублирование вытесняющих видов расчета!", СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецЦикла; 
	
	// для вида расчета ОтпускПоУходуЗаРебенкомБезОплаты заполним список вытесняющих
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное))
	|	И ОсновныеНачисленияОрганизаций.Ссылка <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты)";
	
	ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты.ПолучитьОбъект();
	ВидРасчета.ВытесняющиеВидыРасчета.Загрузить(Запрос.Выполнить().Выгрузить());
	ВидРасчета.ОбменДанными.Загрузка = Истина;
	ВидРасчета.Записать();
	
	// для вида расчета Отпуск учебный заполним список вытесняющих
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни)";
	
	ВидРасчета = ВидРасчетаОтпускУчебный.ПолучитьОбъект();
	ВидРасчета.ВытесняющиеВидыРасчета.Загрузить(Запрос.Выполнить().Выгрузить());
	ВидРасчета.ОбменДанными.Загрузка = Истина;
	ВидРасчета.Записать();
	
КонецПроцедуры

// Функция заполняет реквизиты элемента справочника "Показатели схем мотивации" по переданому
// наименованию. Если наименование не передано, создается новый элемент справочника.
// Запускается при первоначальном заполнении пустой ИБ.
//
Функция УстановитьРеквизитыПоказателяСхемМотивации(Показатель = Неопределено, ТипПоказателя, ВозможностьИзменения, Наименование = "", ВидПоказателя = Неопределено, Идентификатор = "", ТарифнаяСтавка = Ложь, ВалютаРегламентированногоУчета=Неопределено)
		
	Если Наименование <> "" Тогда 
		Ссылка = Справочники.ПоказателиСхемМотивации.НайтиПоНаименованию(Наименование);
		Если Ссылка.Пустая() Тогда
			ПоказательОбъект = Справочники.ПоказателиСхемМотивации.СоздатьЭлемент();
			ПоказательОбъект.Наименование = Наименование;	
		Иначе                      
			ПоказательОбъект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		ПоказательОбъект = Показатель;
	КонецЕсли;
	
	// по умолчанию показатель "индивидуальный"
	Если ВидПоказателя = Неопределено Тогда
		ПоказательОбъект.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный;
	Иначе
		ПоказательОбъект.ВидПоказателя = ВидПоказателя;
	КонецЕсли;
	
	Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
		ПоказательОбъект.Валюта = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	ПоказательОбъект.ТипПоказателя = ТипПоказателя;
    ПоказательОбъект.ВозможностьИзменения = ВозможностьИзменения;
	ПоказательОбъект.Идентификатор = Идентификатор;
	ПоказательОбъект.Записать();

	Возврат ПоказательОбъект.Ссылка
	
КонецФункции //УстановитьРеквизитыПоказателяСхемМотивации

// Процедура заполняет реквизиты упр. удержания УдержаноПоБухгалтерии
// Запускается при обновлении на 1.2.15 и при первоначальном заполнении пустой ИБ.
// 
Процедура ЗаполнитьПланыВидовРасчетаУправленческиеУдержания()Экспорт

	ОбъектВР = ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии.ПолучитьОбъект();
	ОбъектВР.ПроизвольнаяФормулаРасчета	= Истина;
	ОбъектВР.СпособРасчета				= Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой;
	ОбъектВР.КатегорияРасчета			= Справочники.КатегорииРасчетов.Первичное;
	ОбъектВР.ФормулаРасчета				= "";
	ОбъектВР.Записать();

КонецПроцедуры

// Выполняет заполнение реквизитов управленческих планов видов расчета
// Запускается при первоначальном заполнении пустой ИБ.
// 
Процедура ЗаполнитьСхемыМотивации(ВалютаРегламентированногоУчета) 
	
	
	Числовой = Перечисления.ТипыПоказателейСхемМотивации.Числовой;
	Денежный = Перечисления.ТипыПоказателейСхемМотивации.Денежный;
	Процентный = Перечисления.ТипыПоказателейСхемМотивации.Процентный;
	Ежемесячно = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно;
	НеИзменяется = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется;	
    ВозможностьИзмененияНеУказана = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
	
	ПоказателиСхемМотивации = Справочники.ПоказателиСхемМотивации;
	ВремяВДнях = ПоказателиСхемМотивации.ВремяВДнях.ПолучитьОбъект();
	ВремяВЧасах = ПоказателиСхемМотивации.ВремяВЧасах.ПолучитьОбъект();
	НормаВремениВДнях = ПоказателиСхемМотивации.НормаВремениВДнях.ПолучитьОбъект();
	НормаВремениВЧасах = ПоказателиСхемМотивации.НормаВремениВЧасах.ПолучитьОбъект();
	РасчетнаяБаза = ПоказателиСхемМотивации.РасчетнаяБаза.ПолучитьОбъект();
	СдельнаяВыработка = ПоказателиСхемМотивации.СдельнаяВыработка.ПолучитьОбъект();
	Стаж = ПоказателиСхемМотивации.Стаж.ПолучитьОбъект();
	
    // пустой вид показателя
    УстановитьРеквизитыПоказателяСхемМотивации(ВремяВДнях,				Числовой, ВозможностьИзмененияНеУказана,,,"ВремяВДнях",,ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ВремяВЧасах,				Числовой, ВозможностьИзмененияНеУказана,,,"ВремяВЧасах",,ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(НормаВремениВДнях,		Числовой, ВозможностьИзмененияНеУказана,,,"НормаВремениВДнях",,ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(НормаВремениВЧасах,		Числовой, ВозможностьИзмененияНеУказана,,,"НормаВремениВЧасах",,ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(РасчетнаяБаза,			Числовой, ВозможностьИзмененияНеУказана,,,"РасчетнаяБаза",,ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(СдельнаяВыработка,		Числовой, ВозможностьИзмененияНеУказана,,,"СдельнаяВыработка",,ВалютаРегламентированногоУчета);	
	УстановитьРеквизитыПоказателяСхемМотивации(Стаж,					Числовой, ВозможностьИзмененияНеУказана,,,"Стаж",,ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаДневная.ПолучитьОбъект(),	Денежный, НеИзменяется,,,"ТарифнаяСтавкаДневная",Истина,ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.ПолучитьОбъект(),	Денежный, НеИзменяется,,,"ТарифнаяСтавкаМесячная",Истина,ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.ПолучитьОбъект(),	Денежный, НеИзменяется,,,"ТарифнаяСтавкаЧасовая",Истина,ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ВремяВКалендарныхДнях.ПолучитьОбъект(),	Числовой, НеИзменяется,,,"ВремяВКалендарныхДнях",,ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ОтработаноВремениВДнях.ПолучитьОбъект(),	Числовой, ВозможностьИзмененияНеУказана,,,"ОтработаноВремениВДнях",,ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ОтработаноВремениВЧасах.ПолучитьОбъект(),Числовой, ВозможностьИзмененияНеУказана,,,"ОтработаноВремениВЧасах",,ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.КалендарныхДнейВмесяце.ПолучитьОбъект(),	Числовой, НеИзменяется,,,"КалендарныхДнейВмесяце",,ВалютаРегламентированногоУчета);
		
	ОкладПоДням = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,НеИзменяется,"Оклад по дням",,"ОкладПоДням",Истина,ВалютаРегламентированногоУчета);
	ОкладПоЧасам = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,НеИзменяется,"Оклад по часам",,"ОкладПоЧасам",Истина,ВалютаРегламентированногоУчета);
	КомиссионнаяВыручка = УстановитьРеквизитыПоказателяСхемМотивации(,Денежный,Ежемесячно,"Комиссионная выручка",,"КомиссионнаяВыручка",,ВалютаРегламентированногоУчета);
	Процент = УстановитьРеквизитыПоказателяСхемМотивации(,			Процентный,НеИзменяется,"Процент",,"Процент",,ВалютаРегламентированногоУчета);
	ТарифДневной = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,НеИзменяется,"Тариф дневной",,"ТарифДневной",Истина,ВалютаРегламентированногоУчета);
	ТарифЧасовой = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,НеИзменяется,"Тариф часовой",,"ТарифЧасовой",Истина,ВалютаРегламентированногоУчета);
	ПроцентПлана = УстановитьРеквизитыПоказателяСхемМотивации(,		Процентный,Ежемесячно,"Процент плана",,"ПроцентПлана",,ВалютаРегламентированногоУчета);
	РазмерПремии = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,Ежемесячно,"Размер премии",,"РазмерПремии",,ВалютаРегламентированногоУчета);
	ФиксированнаяСумма = УстановитьРеквизитыПоказателяСхемМотивации(,Денежный,НеИзменяется,"Фиксированная сумма",,"ФиксированнаяСумма",,ВалютаРегламентированногоУчета);

	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
    СпРасчетов = Новый СписокЗначений;
	
	// Управленческие начисления
	ПВР = ПланыВидовРасчета.УправленческиеНачисления;
	УстановитьРеквизитыУправленческогоНачисления(ПВР.НачисленоПоБухгалтерии,		СпРасчета.ФиксированнойСуммой, Категории.Первичное);
	УстановитьРеквизитыУправленческогоНачисления(ПВР.НачисленоПоБухгалтерииСдельно,	СпРасчета.ФиксированнойСуммой, Категории.Первичное);
	
	Оклад = СоздатьВидРасчета(ПВР, "00003", "Оклад");
	Невыход = СоздатьВидРасчета(ПВР, "00023", "Отсутствие по невыясненной причине");
	Отпуск = СоздатьВидРасчета(ПВР, "00021", "Отпуск");
	Больничный = СоздатьВидРасчета(ПВР, "00022", "Больничный");
	
	КомиссионнаяОплата = СоздатьВидРасчета(ПВР, "00024", "Комиссионная оплата");
	СдельнаяОплата = СоздатьВидРасчета(ПВР, "00025", "Сдельная оплата");
	ПочасоваяОплата = СоздатьВидРасчета(ПВР, "00026", "Почасовая оплата");

	СпРасчетов.Добавить(Невыход);
	СпРасчетов.Добавить(Отпуск);
	СпРасчетов.Добавить(Больничный);
	
		
	УстановитьРеквизитыУправленческогоНачисления(Невыход, 				СпРасчета.ПроизвольнаяФормула,	 Категории.Первичное,,,,					ФиксированнаяСумма,,,Справочники.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам,"ИсходныеДанные.Показатель1", Истина);
	УстановитьРеквизитыУправленческогоНачисления(Отпуск,				СпРасчета.ПроизвольнаяФормула,	 Категории.Первичное,,,,					ОкладПоДням,ПоказателиСхемМотивации.ВремяВДнях,ПоказателиСхемМотивации.НормаВремениВДнях, Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск,"ИсходныеДанные.Показатель1*ИсходныеДанные.Показатель2/ИсходныеДанные.Показатель3");
	УстановитьРеквизитыУправленческогоНачисления(Больничный,			СпРасчета.ПроизвольнаяФормула,	 Категории.Первичное,,,,					ФиксированнаяСумма,,, Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь,"ИсходныеДанные.Показатель1");
	УстановитьРеквизитыУправленческогоНачисления(Оклад, 				СпРасчета.ПроизвольнаяФормула,	 Категории.Первичное, Истина, СпРасчетов,,ОкладПоДням,ПоказателиСхемМотивации.ВремяВДнях,ПоказателиСхемМотивации.НормаВремениВДнях, Справочники.КлассификаторИспользованияРабочегоВремени.Работа,"ИсходныеДанные.Показатель1*ИсходныеДанные.Показатель2/ИсходныеДанные.Показатель3", Истина);
	
	УстановитьРеквизитыУправленческогоНачисления(КомиссионнаяОплата, 	СпРасчета.ПроизвольнаяФормула, 	Категории.Первичное, Истина, СпРасчетов,,КомиссионнаяВыручка,Процент,,,"ИсходныеДанные.Показатель1*ИсходныеДанные.Показатель2",,Истина);
	УстановитьРеквизитыУправленческогоНачисления(СдельнаяОплата, 		СпРасчета.ПроизвольнаяФормула, 	Категории.Первичное, Истина, СпРасчетов,,ПоказателиСхемМотивации.СдельнаяВыработка,,,"ИсходныеДанные.Показатель1");
	УстановитьРеквизитыУправленческогоНачисления(ПочасоваяОплата, 		СпРасчета.ПроизвольнаяФормула, 	Категории.Первичное, Истина, СпРасчетов,,ТарифЧасовой,ПоказателиСхемМотивации.ВремяВЧасах,,Справочники.КлассификаторИспользованияРабочегоВремени.Работа,"ИсходныеДанные.Показатель1*ИсходныеДанные.Показатель2", Истина);

КонецПроцедуры //ЗаполнитьСхемыМотивации

// Выполняет заполнение регистра сведений "СведенияОСтавкахЕСНиПФР"
// Запускается при первоначальном заполнении пустой ИБ.
// 
Процедура ЗаполнитьСведенияОСтавкахЕСНиПФР() 
	
	//заполним ставки
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахЕСНиПФР.СоздатьНаборЗаписей();
	НаборЗаписей.ЗаполнитьСведенияОСтавкахЕСНиПФР();
	
КонецПроцедуры

// Выполняет заполнение регистра сведений "МинимальнаяОплатаТрудаРФ"
// Запускается при первоначальном заполнении пустой ИБ.
// 
Процедура ЗаполнитьСведенияОМинимальномРазмереОплатыТруда() 

	НаборЗаписей = РегистрыСведений.МинимальнаяОплатаТрудаРФ.СоздатьНаборЗаписей();

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2000, 1, 1);
	НоваяЗапись.Размер = 132;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2001, 1, 1);
	НоваяЗапись.Размер = 200;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2001, 7, 1);
	НоваяЗапись.Размер = 300;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2002, 5, 1);
	НоваяЗапись.Размер = 450;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2003, 10, 1);
	НоваяЗапись.Размер = 600;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2005, 1, 1);
	НоваяЗапись.Размер = 720;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2005, 9, 1);
	НоваяЗапись.Размер = 800;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2006, 5, 1);
	НоваяЗапись.Размер = 1100;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2007, 9, 1);
	НоваяЗапись.Размер = 2300;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2009, 1, 1);
	НоваяЗапись.Размер = 4330;

	НаборЗаписей.Записать();

КонецПроцедуры

// Выполняет заполнение регистра сведений "СтавкаРефинансированияЦБ"
// Запускается при первоначальном заполнении пустой ИБ.
// 
Процедура ЗаполнитьСведенияОСтавкеРефинансированияЦБ()
	УстановитьСтавкуРефинансирования(25,	'20001104');
	УстановитьСтавкуРефинансирования(23,	'20020409');
	УстановитьСтавкуРефинансирования(21,	'20020807');
	УстановитьСтавкуРефинансирования(18,	'20030217');
	УстановитьСтавкуРефинансирования(16,	'20030621');
	УстановитьСтавкуРефинансирования(14,	'20040115');
	УстановитьСтавкуРефинансирования(13,	'20040615');
	УстановитьСтавкуРефинансирования(12,	'20051226');
	УстановитьСтавкуРефинансирования(11.5,	'20060626');
	УстановитьСтавкуРефинансирования(11,	'20061023');
	УстановитьСтавкуРефинансирования(10.5,	'20070129');
	УстановитьСтавкуРефинансирования(10,	'20070619');
	УстановитьСтавкуРефинансирования(10.25,	'20080204');
	УстановитьСтавкуРефинансирования(10.5,	'20080429');
	УстановитьСтавкуРефинансирования(10.75,	'20080610');
	УстановитьСтавкуРефинансирования(11,	'20080714');
	УстановитьСтавкуРефинансирования(12,	'20081112');
	УстановитьСтавкуРефинансирования(13,	'20081201');
	УстановитьСтавкуРефинансирования(12.5,	'20090424');
	УстановитьСтавкуРефинансирования(12,	'20090514');
	УстановитьСтавкуРефинансирования(11.5,	'20090605');
	УстановитьСтавкуРефинансирования(11,	'20090713');
	УстановитьСтавкуРефинансирования(10.75, '20090810');
	УстановитьСтавкуРефинансирования(10.5,	'20090915');
	УстановитьСтавкуРефинансирования(10,	'20090930');
	УстановитьСтавкуРефинансирования(9.5, 	'20091030');
	УстановитьСтавкуРефинансирования(9, 	'20091125');
	УстановитьСтавкуРефинансирования(8.75,	'20091228');
	УстановитьСтавкуРефинансирования(8.5,	'20100224');
	УстановитьСтавкуРефинансирования(8.25,  '20100329');
	УстановитьСтавкуРефинансирования(8, 	'20100430');
	УстановитьСтавкуРефинансирования(7.75,  '20100601');
КонецПроцедуры

// Процедура заполняет по умолчанию формы обучения
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура ЗаполнитьФормыОбучения()
	
	ФормыОбучения = Справочники.ФормыОбучения;
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Лекция");
	Если  СсылкаНаЭлемент.Пустая() Тогда
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Код = "00001";
		ЭлементФормыОбучения.Наименование = "Лекция";		
		ЭлементФормыОбучения.Записать();
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;	
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);		
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Тренинг");
	Если  СсылкаНаЭлемент.Пустая() Тогда
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Код = "00002";
		ЭлементФормыОбучения.Наименование = "Тренинг";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Семинар");
	Если  СсылкаНаЭлемент.Пустая() Тогда
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Код = "00003";
		ЭлементФормыОбучения.Наименование = "Семинар";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Деловая игра");
	Если  СсылкаНаЭлемент.Пустая() Тогда		
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Код = "00004";
		ЭлементФормыОбучения.Наименование = "Деловая игра";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Решение кейсов");
	Если  СсылкаНаЭлемент.Пустая() Тогда		
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Код = "00005";
		ЭлементФормыОбучения.Наименование = "Решение кейсов";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Экскурсия");
	Если  СсылкаНаЭлемент.Пустая() Тогда		
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Код = "00006";
		ЭлементФормыОбучения.Наименование = "Экскурсия";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;		
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
КонецПроцедуры  // ЗаполнитьФормыОбучения

//Добавляет запись в набор записей регистра сведений ДопустимыеСочетанияМеждуГруппамиСтажа
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура ДопустимоеСочетаниеСтажа(НаборЗаписей, НомерПравила, КодУсловийТруда, ТипШаблонаКПС, КодПозицииСписка, КодОснованияИсчисляемогоСтажа, ФорматФОВ, КодОснованияВыслугиЛет)

	Запись = НаборЗаписей.Добавить();

	Запись.НомерПравила                  = СокрЛП(НомерПравила);
	Запись.КодУсловийТруда               = СокрЛП(КодУсловийТруда);
	Запись.ТипШаблонаКПС                 = СокрЛП(ТипШаблонаКПС);
	Запись.КодПозицииСписка              = СокрЛП(КодПозицииСписка);
	Запись.КодОснованияИсчисляемогоСтажа = СокрЛП(КодОснованияИсчисляемогоСтажа);
	Запись.ФорматФОВ                     = СокрЛП(ФорматФОВ);
	Запись.КодОснованияВыслугиЛет        = СокрЛП(КодОснованияВыслугиЛет);

КонецПроцедуры 

// Добавляет в справочник "СпособыОтраженияЗарплатыВРеглУчете" новый элемент
// Запускается при первоначальном заполнении пустой ИБ.
//
Функция ДобавитьСпособУчетаРегЗарплаты(Наименование, СчетДт, СубконтоДт1 = Неопределено, СубконтоДт2 = Неопределено, СубконтоДт3 = Неопределено, 
													СчетКт, СубконтоКт1 = Неопределено, СубконтоКт2 = Неопределено, СубконтоКт3 = Неопределено, 
													СчетДтНУ = Неопределено, СубконтоДтНУ1 = Неопределено, СубконтоДтНУ2 = Неопределено, СубконтоДтНУ3 = Неопределено, 
													СчетКтНУ = Неопределено, СубконтоКтНУ1 = Неопределено, СубконтоКтНУ2 = Неопределено, СубконтоКтНУ3 = Неопределено)

	Элемент = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НайтиПоНаименованию(Наименование);
	Если Элемент.Пустая() Тогда
		Элемент     = Справочники.СпособыОтраженияЗарплатыВРеглУчете.СоздатьЭлемент();
		Элемент.Наименование     = Наименование;
	Иначе
		Элемент = Элемент.ПолучитьОбъект();	
	КонецЕсли;
	Элемент.СчетДт = СчетДт;
	Элемент.СубконтоДт1 = СубконтоДт1;
	Элемент.СубконтоДт2 = СубконтоДт2;
	Элемент.СубконтоДт3 = СубконтоДт3;
	Элемент.СчетКт = СчетКт;
	Элемент.СубконтоКт1 = СубконтоКт1;
	Элемент.СубконтоКт2 = СубконтоКт2;
	Элемент.СубконтоКт3 = СубконтоКт3;		
	Если СчетДтНУ = Неопределено Тогда
		Элемент.СчетДтНУ = БухгалтерскийУчетДополнительный.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетДт));
	Иначе
		Элемент.СчетДтНУ = СчетДтНУ	
	КонецЕсли;
	Элемент.СубконтоДтНУ1 = СубконтоДтНУ1;
	Элемент.СубконтоДтНУ2 = СубконтоДтНУ2;
	Элемент.СубконтоДтНУ3 = СубконтоДтНУ3;
	Если СчетКтНУ = Неопределено Тогда
		Элемент.СчетКтНУ = БухгалтерскийУчетДополнительный.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетКт));
	Иначе
		Элемент.СчетКтНУ =СчетКтНУ 	
	КонецЕсли;
	Элемент.СубконтоКтНУ1 = СубконтоКтНУ1;
	Элемент.СубконтоКтНУ2 = СубконтоКтНУ2;
	Элемент.СубконтоКтНУ3 = СубконтоКтНУ3;	
	
	Элемент.Записать();
	
	Возврат Элемент.Ссылка

КонецФункции

// Добавляет запись в набор записей регистра "ЕСНСкидкиКДоходам"
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура ДобавитьСкидкуКДодохамЕСН(НаборЗаписей, ДатаСведений, КодДохода, ГодоваяСкидка)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период         = ДатаСведений;
	НоваяЗапись.КодДоходаЕСН   = КодДохода;
	НоваяЗапись.ГодоваяСкидка  = ГодоваяСкидка;

КонецПроцедуры

// Устанавливает реквизиты элемента справочника "ДоходыНДФЛ"
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура УстановитьРеквизитыКодаЕСН(СпособОтражения, ВходитВБазуФедеральныйБюджет, ВходитВБазуФСС, ВходитВБазуФОМС)

	Объект = СпособОтражения.ПолучитьОбъект();

	Объект.ВходитВБазуФедеральныйБюджет = ВходитВБазуФедеральныйБюджет;
	Объект.ВходитВБазуФСС               = ВходитВБазуФСС;
	Объект.ВходитВБазуФОМС              = ВходитВБазуФОМС;

	Объект.Записать();

КонецПроцедуры

// Добавляет в справочник "КлассификаторИспользованияРабочегоВремени" новый элемент
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура ДобавитьКодИспользованияРабочегоВремени(Знач БуквенныйКод, Знач  ЦифровойКод, Знач  Наименование = Неопределено, Знач  ПолноеНаименование, ВидВремени, РабочееВремя = Неопределено)

	ЦифровойКод    = СокрЛП(ЦифровойКод);
	СсылкаНаЭлемент = Справочники.КлассификаторИспользованияРабочегоВремени.НайтиПоРеквизиту("ЦифровойКод", ЦифровойКод);

	Если  СсылкаНаЭлемент.Пустая() Тогда
		Элемент              = Справочники.КлассификаторИспользованияРабочегоВремени.СоздатьЭлемент();
	 	Элемент.ЦифровойКод  = СокрЛП(ЦифровойКод);
	Иначе
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();
	КонецЕсли;

	Элемент.БуквенныйКод = СокрЛП(БуквенныйКод);
	Элемент.ПолноеНаименование = СокрЛП(ПолноеНаименование);
	Элемент.Наименование = СокрЛП(?(Наименование = Неопределено,ПолноеНаименование,Наименование));
	//Элемент.ВидВремени = ВидВремени;
	Если РабочееВремя <> Неопределено Тогда
		Элемент.РабочееВремя = РабочееВремя;
	КонецЕсли;
	Элемент.Записать();

КонецПроцедуры

// Добавляет в справочник "КлассификаторИспользованияРабочегоВремени" новый элемент
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура ОписатьКодИспользованияРабочегоВремени(КодИспользованияРабочегоВремени, Знач БуквенныйКод, Знач  ЦифровойКод, Знач  Наименование = Неопределено, Знач  ПолноеНаименование, ВидВремени, РабочееВремя = Неопределено) Экспорт

	Если КодИспользованияРабочегоВремени.БуквенныйКод <> СокрЛП(БуквенныйКод) Тогда
		КодИспользованияРабочегоВремени.БуквенныйКод = СокрЛП(БуквенныйКод);
	КонецЕсли;
	Если КодИспользованияРабочегоВремени.ЦифровойКод <> СокрЛП(ЦифровойКод) Тогда
		КодИспользованияРабочегоВремени.ЦифровойКод  = СокрЛП(ЦифровойКод);
	КонецЕсли;
	Если КодИспользованияРабочегоВремени.ПолноеНаименование <> СокрЛП(ПолноеНаименование) Тогда
		КодИспользованияРабочегоВремени.ПолноеНаименование = СокрЛП(ПолноеНаименование);
	КонецЕсли;
	Если КодИспользованияРабочегоВремени.Наименование <> СокрЛП(Наименование) Тогда
		КодИспользованияРабочегоВремени.Наименование = СокрЛП(Наименование);
	КонецЕсли;
	Если РабочееВремя <> Неопределено Тогда
		КодИспользованияРабочегоВремени.РабочееВремя = РабочееВремя;
	КонецЕсли;
	Если КодИспользованияРабочегоВремени.Модифицированность() Тогда
		КодИспользованияРабочегоВремени.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает реквизиты элемента плана видов расчета "УправленческиеНачисления" 
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура УстановитьРеквизитыУправленческогоНачисления(	ВидРасчета, 
														СпособРасчета, 
														КатегорияРасчета, 
														ЗачетОтработанногоВремени = Ложь, 
														ВытесняющиеРасчеты = Неопределено, 
														ПериодДействияБазовый = Ложь,														
														Показатель1 = Неопределено,
														Показатель2 = Неопределено,
														Показатель3 = Неопределено,
														ВидУчетаРабочегоВремени = Неопределено,
														ФормулаРасчета = "", ЗапрашиватьПриКадровыхПеремещениях1= Ложь, ЗапрашиватьПриКадровыхПеремещениях2= Ложь, ЗапрашиватьПриКадровыхПеремещениях3= Ложь)

	ОбъектВР = ВидРасчета.ПолучитьОбъект();
	ОбъектВР.ПроизвольнаяФормулаРасчета	= Истина;
	ОбъектВР.ФормулаРасчета				= ФормулаРасчета;
	ОбъектВР.ФормулаРасчетаПредставление= ФормулаРасчета;
	ОбъектВР.СпособРасчета				= Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	ОбъектВР.КатегорияРасчета			= КатегорияРасчета;
	ОбъектВР.ЗачетОтработанногоВремени	= ЗачетОтработанногоВремени;
    ОбъектВР.ВидУчетаРабочегоВремени	= ВидУчетаРабочегоВремени;
	Если НЕ ОбъектВР.Предопределенный Тогда
		ОбъектВР.ПериодДействияБазовый = ПериодДействияБазовый;
	КонецЕсли;

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Индекс = ОбъектВР.ВытесняющиеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если ОбъектВР.ВытесняющиеВидыРасчета[Индекс].Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		ОбъектВР.ВытесняющиеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	Если ВытесняющиеРасчеты <> Неопределено Тогда
		Для каждого Элемент Из ВытесняющиеРасчеты Цикл
			НоваяСтрока            = ОбъектВР.ВытесняющиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Показатель1) Тогда
		Показатели = ОбъектВР.Показатели.Добавить();
		Показатели.Показатель = Показатель1;
		Показатели.ЗапрашиватьПриКадровыхПеремещениях = ЗапрашиватьПриКадровыхПеремещениях1;
		Если ЗначениеЗаполнено(Показатель2) Тогда
			Показатели = ОбъектВР.Показатели.Добавить();
			Показатели.Показатель = Показатель2;
			Показатели.ЗапрашиватьПриКадровыхПеремещениях = ЗапрашиватьПриКадровыхПеремещениях2;
			Если ЗначениеЗаполнено(Показатель3) Тогда
				Показатели = ОбъектВР.Показатели.Добавить();
				Показатели.Показатель = Показатель3;
				Показатели.ЗапрашиватьПриКадровыхПеремещениях = ЗапрашиватьПриКадровыхПеремещениях3;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектВР.Записать();

КонецПроцедуры // УстановитьРеквизитыУправленческогоНачисления()

// Устанавливает реквизиты элемента плана видов расчета "ДополнительныеНачисленияОрганизаций" 
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура УстановитьРеквизитыДополнительногоНачисленияОрганизации(ВидРасчета, СпособРасчета, КатегорияРасчета, ВидПремии, ЧислоМесяцев, ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка=Неопределено, КодДоходаНДФЛ, КодДоходаЕСН, КодДоходаСтраховыеВзносы, КодДоходаФСС_НС, СпособОтраженияВБухучете, ВидНачисленияПоСт255НК, ВидПособияСоциальногоСтрахования = Неопределено)

	ОбъектВР = ВидРасчета.ПолучитьОбъект();

	ОбъектВР.СпособРасчета            = СпособРасчета;
	ОбъектВР.КатегорияРасчета  		  = КатегорияРасчета;
	ОбъектВР.ВидПремии                = ВидПремии;
	ОбъектВР.ЧислоМесяцев             = ЧислоМесяцев;
	ОбъектВР.КодДоходаНДФЛ            = КодДоходаНДФЛ;
	ОбъектВР.КодДоходаЕСН             = КодДоходаЕСН;
	ОбъектВР.КодДоходаСтраховыеВзносы = КодДоходаСтраховыеВзносы;
	ОбъектВР.КодДоходаФСС_НС		  = КодДоходаФСС_НС;
	ОбъектВР.СпособОтраженияВБухучете = СпособОтраженияВБухучете;
	ОбъектВР.ВидПособияСоциальногоСтрахования       = ВидПособияСоциальногоСтрахования;
	ОбъектВР.СтратегияОтраженияВУчете = ?(СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям, Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления,
											?(ЗначениеЗаполнено(СпособОтраженияВБухучете), Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоВидуРасчета,Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоНаНачалоСобытия));
	ОбъектВР.ВидНачисленияПоСт255НК   = ВидНачисленияПоСт255НК;
	ОбъектВР.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка;
	ОбъектВР.ОтнесениеРасходовКДеятельностиЕНВД  = ?(КодДоходаЕСН = Справочники.ДоходыЕСН.ВыплатыЗаСчетПрибыли,Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД,Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются);

	ОбъектВР.Записать();

КонецПроцедуры // УстановитьРеквизитыДополнительногоНачисленияОрганизации()

// Создает новый вид расчета
//
// Параметры
//  ПВР  – менеджер плана видов расчетов
//  Код  – код создаваемого вида расчета
//  Наименование  – наименование создаваемого вида расчета
//  БазовыеВидыРасчетов - список базовых видов расчетов
//
// Возвращаемое значение:
//   ссылка на созданный вид расчета
Функция СоздатьВидРасчета(ПВР, Код, Наименование, БазовыеВидыРасчетов = Неопределено)

	ВР = ПВР.НайтиПоКоду(Код);
	Если ВР.Пустая() Тогда
		ВР = ПВР.СоздатьВидРасчета();
	Иначе
		ВР = ВР.ПолучитьОбъект();
		ВР.БазовыеВидыРасчета.Очистить();
	КонецЕсли;

	ВР.Код          = Код;
	ВР.Наименование = Наименование;

	Если БазовыеВидыРасчетов<>Неопределено Тогда
		Для каждого Элемент Из БазовыеВидыРасчетов Цикл
			НоваяСтрока            = ВР.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ВР.ОбменДанными.Загрузка = Истина;
	ВР.Записать();

	Возврат ВР.Ссылка;

КонецФункции

// Устанавливает реквизиты элемента плана видов расчета "УдержанияОрганизаций" 
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура УстановитьРеквизитыУдержанияОрганизации(ВидРасчета, СпособРасчета, КатегорияРасчета, СпособОтраженияВБухучете = Неопределено, БазовыеВидыРасчетов = Неопределено, ПериодРасчетаСреднегоЗаработка = 0, ЯвляетсяДСВ = Ложь)

	ОбъектВР = ВидРасчета.ПолучитьОбъект();

	ОбъектВР.СпособРасчета            = СпособРасчета;
	ОбъектВР.КатегорияРасчета         = КатегорияРасчета;
	ОбъектВР.СпособОтраженияВБухучете = СпособОтраженияВБухучете;
	ОбъектВР.ПериодРасчетаСреднегоЗаработка = ПериодРасчетаСреднегоЗаработка;
	ОбъектВР.ЯвляетсяДСВ			  = ЯвляетсяДСВ;
    Если ПериодРасчетаСреднегоЗаработка <> 0 Тогда
		ОбъектВР.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору;
	Иначе		
		ОбъектВР.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	КонецЕсли;
	
	Если БазовыеВидыРасчетов<>Неопределено Тогда
		ОбъектВР.БазовыеВидыРасчета.Очистить();
		Для каждого Элемент Из БазовыеВидыРасчетов Цикл
			НоваяСтрока            = ОбъектВР.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	ОбъектВР.Записать();

КонецПроцедуры

// Устанавливает список базовых расчетов для элемента плана видов расчета
//
// Параметры
//  ВидРасчета  – вид расчетов (ссылка)
//  БазовыеВидыРасчетов - список базовых видов расчетов
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура УстановитьБазовыеИВедущиеРасчеты(ВидРасчета, БазовыеВидыРасчетов, ВедущиеВидыРасчета)Экспорт

	ВР = ВидРасчета.ПолучитьОбъект();

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Индекс = ВР.БазовыеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если ВР.БазовыеВидыРасчета[Индекс].Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		ВР.БазовыеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	Если БазовыеВидыРасчетов <> Неопределено Тогда
		Для каждого Элемент Из БазовыеВидыРасчетов Цикл
			НоваяСтрока            = ВР.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Индекс = ВР.ВедущиеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если ВР.ВедущиеВидыРасчета[Индекс].Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		ВР.ВедущиеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	Если ВедущиеВидыРасчета <> Неопределено Тогда
		Для каждого Элемент Из ВедущиеВидыРасчета Цикл
			НоваяСтрока            = ВР.ВедущиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	ВР.ОбменДанными.Загрузка = Истина;
	ВР.Записать();

КонецПроцедуры

// Устанавливает реквизиты элемента ПВХ "ВопросыДляАнкетирования"
// Запускается при обновлении на 1.2.15 и при первоначальном заполнении пустой ИБ.
//
Процедура УстановитьРеквизитыВопроса(Вопрос, ПолнаяФормулировка, ТипыОтветаНаВопросАнкеты, БолееОдногоОтвета = Ложь, КоличествоСтрок = 0, ВидКонтактнойИнформации = 0, ТипЗначения = Неопределено, Длина = 0)
	
	Объект = Вопрос.ПолучитьОбъект();
	
	Объект.ПолнаяФормулировка		= ПолнаяФормулировка;
	Объект.ТипОтветаНаВопрос		= ТипыОтветаНаВопросАнкеты;
	Объект.КоличествоСтрокТаблицы	= КоличествоСтрок;
	Объект.ВидКонтактнойИнформации	= ВидКонтактнойИнформации;
	
	Если ТипЗначения <> Неопределено Тогда
		Объект.ТипЗначения				= ТипЗначения;
	КонецЕсли;
	Объект.Длина						= Длина;
	
	Объект.Записать();
	
КонецПроцедуры

// Записываем реквизиты предопределенных вопросов
// Запускается при обновлении на 1.2.15, 1.2.20 и при первоначальном заполнении пустой ИБ.
//
Процедура ЗаполнитьРеквизитыВопросов(ЗаполнятьТабличныеВопросы = Истина) Экспорт

	Менеджер		= ПланыВидовХарактеристик.ВопросыДляАнкетирования;
	ВВидеЧисла		= Перечисления.ТипыОтветаНаВопросАнкеты.Число;
	ВВидеСтроки		= Перечисления.ТипыОтветаНаВопросАнкеты.Строка;
	ВВидеДаты		= Перечисления.ТипыОтветаНаВопросАнкеты.Дата;
	ТабличныйВопрос	= Перечисления.ТипыОтветаНаВопросАнкеты.Табличный;
	ВВидеБулево		= Перечисления.ТипыОтветаНаВопросАнкеты.Булево;
	ВВидеКИ			= Перечисления.ТипыОтветаНаВопросАнкеты.КонтактнаяИнформация;
	ВВидеСсылки		= Перечисления.ТипыОтветаНаВопросАнкеты.Ссылка;
	
	// Описание типов
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	
	ОписаниеТиповДата	= Новый ОписаниеТипов("Дата", , , КД);
	ОписаниеТиповБулево	= Новый ОписаниеТипов("Булево");
	ОписаниеТиповВОТ	= Новый ОписаниеТипов("СправочникСсылка.ВариантыОтветовОпросов");
	
	УстановитьРеквизитыВопроса(Менеджер.Имя,			"Имя",			ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)), 50);
	УстановитьРеквизитыВопроса(Менеджер.Отчество,		"Отчество",		ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)), 50);
	УстановитьРеквизитыВопроса(Менеджер.Фамилия,		"Фамилия",		ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)), 50);
	УстановитьРеквизитыВопроса(Менеджер.Пол,			"Пол",			ВВидеСсылки,,,, Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическихЛиц"));
	УстановитьРеквизитыВопроса(Менеджер.ДатаРождения,	"Дата рождения",ВВидеДаты,,,, ОписаниеТиповДата);
	
	//УстановитьРеквизитыВопроса(Менеджер.ФизическоеЛицоАдресРегистрации,, ВВидеКИ,,, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	//УстановитьРеквизитыВопроса(Менеджер.ФизическоеЛицоАдресФактический,, ВВидеКИ,,, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	//УстановитьРеквизитыВопроса(Менеджер.ФизическоеЛицоТелефонДомашний,, ВВидеКИ,,, Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));

	УстановитьРеквизитыВопроса(Менеджер.СтраховойНомерПФР,	"Страховой № в ПФР",	ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(14)), 14);
	УстановитьРеквизитыВопроса(Менеджер.ИНН,				"ИНН",					ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12)), 12);
	УстановитьРеквизитыВопроса(Менеджер.КодИМНС,			"Код ИМНС",				ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)), 4);
	УстановитьРеквизитыВопроса(Менеджер.Гражданство,		"Гражданство",			ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.КлассификаторСтранМира"));
	УстановитьРеквизитыВопроса(Менеджер.СемейноеПоложение,	"Семейное положение",	ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.СемейноеПоложениеФизЛиц"));
	
	// Состав семьи
	УстановитьРеквизитыВопроса(Менеджер.СоставСемьиСтепеньРодства,	"Степень родства",				ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.СтепениРодстваФизЛиц"));
	УстановитьРеквизитыВопроса(Менеджер.СоставСемьиРодственник,		"Имя родственника",				ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)), 50);
	УстановитьРеквизитыВопроса(Менеджер.СоставСемьиДатаРождения,	"Дата рождения родственника",	ВВидеДаты,,,,  ОписаниеТиповДата, 4);
	
	// Образование
	УстановитьРеквизитыВопроса(Менеджер.ВидОбразования,		"Образование",		ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.ВидыОбразованияФизЛиц"));
	УстановитьРеквизитыВопроса(Менеджер.УчебноеЗаведение,	"Учебное заведение",ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.УчебныеЗаведения"));
	УстановитьРеквизитыВопроса(Менеджер.Специальность,		"Специальность",	ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.КлассификаторСпециальностейПоОбразованию"));
	УстановитьРеквизитыВопроса(Менеджер.ДипломСерияНомер,	"Диплом",			ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)), 50);
	УстановитьРеквизитыВопроса(Менеджер.ГодОкончания,		"Год окончания",	ВВидеЧисла,,,, Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(4, 0)), 4);
	УстановитьРеквизитыВопроса(Менеджер.Квалификация,		"Квалификация",		ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)), 100);
	
	// Трудовая деятельность
	УстановитьРеквизитыВопроса(Менеджер.ТрудоваяДеятельностьОрганизация,	"Наименование организации", ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)), 100);
	УстановитьРеквизитыВопроса(Менеджер.ТрудоваяДеятельностьДолжность,		"Должность",				ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)), 100);
	УстановитьРеквизитыВопроса(Менеджер.ТрудоваяДеятельностьНачалоРаботы,	"Начало работы",			ВВидеДаты,,,, ОписаниеТиповДата);
	УстановитьРеквизитыВопроса(Менеджер.ТрудоваяДеятельностьОкончаниеРаботы,"Окончание работы",			ВВидеДаты,,,, ОписаниеТиповДата);

	// Знание языков
	УстановитьРеквизитыВопроса(Менеджер.СтепеньЗнанияЯзыка,	"Знание языка",		ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.СтепениЗнанияЯзыка"));
	УстановитьРеквизитыВопроса(Менеджер.Язык,				"Язык",				ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.ЯзыкиНародовМира"));

	// ПаспортныеДанныеФизЛиц
	УстановитьРеквизитыВопроса(Менеджер.ВидДокументаУдостоверяющегоЛичность,"Вид документа",	ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.ДокументыУдостоверяющиеЛичность"));
	УстановитьРеквизитыВопроса(Менеджер.НомерДокумента,						"Номер",			ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(14)), 14);
	УстановитьРеквизитыВопроса(Менеджер.СерияДокумента,						"Серия",			ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(14)), 14);
	УстановитьРеквизитыВопроса(Менеджер.ДатаВыдачиДокумента,				"Дата выдачи",		ВВидеДаты,,,, ОписаниеТиповДата);
	УстановитьРеквизитыВопроса(Менеджер.КемВыданДокумент,					"Кем выдан",		ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	УстановитьРеквизитыВопроса(Менеджер.КодПодразделенияДокумента,			"Код подразделения",ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)), 15);

	// ВоинскийУчет
	УстановитьРеквизитыВопроса(Менеджер.ОтношениеКВоинскойОбязанности,	"Воинская обязанность",		ВВидеСсылки,,,, Новый ОписаниеТипов("ПеречислениеСсылка.ОтношениеКВоинскойОбязанности"));
	УстановитьРеквизитыВопроса(Менеджер.ОтношениеКВоинскомуУчету,		"Воинский учет",			ВВидеСсылки,,,, Новый ОписаниеТипов("ПеречислениеСсылка.ОтношениеКВоинскомуУчету"));
	УстановитьРеквизитыВопроса(Менеджер.КатегорияЗапаса,				"Категория запаса",			ВВидеСсылки,,,, Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииЗапасаВоеннообязанных"));
	УстановитьРеквизитыВопроса(Менеджер.Звание,							"Звание",					ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.ЗваниеГражданскогоВоинскогоУчета"));
	УстановитьРеквизитыВопроса(Менеджер.Состав,							"Состав (профиль)",			ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.СоставыВоеннослужащих"));
	УстановитьРеквизитыВопроса(Менеджер.ВУС,							"ВУС",						ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)), 10);
	УстановитьРеквизитыВопроса(Менеджер.Годность,						"Годность",					ВВидеСсылки,,,, Новый ОписаниеТипов("ПеречислениеСсылка.ГодностьКВоеннойСлужбе"));
	УстановитьРеквизитыВопроса(Менеджер.Военкомат,						"Наименование военкомата",	ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.Военкоматы"));
	УстановитьРеквизитыВопроса(Менеджер.НаличиеМобпредписания,			"Есть ли мобпредписание",	ВВидеБулево,,,, ОписаниеТиповБулево);
	УстановитьРеквизитыВопроса(Менеджер.НомерКомандыПартии,				"Номер команды, партии",	ВВидеСтроки,,,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)), 50);

	// табличные вопросы
	УстановитьРеквизитыВопроса(Менеджер.ТЗнаниеЯзыков,					"Знание языков",			ТабличныйВопрос,, 4,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)), 200);
	УстановитьРеквизитыВопроса(Менеджер.ТОбразование,					"Образование",				ТабличныйВопрос,, 4,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)), 200);
	УстановитьРеквизитыВопроса(Менеджер.ТСоставСемьи,					"Состав семьи",				ТабличныйВопрос,, 4,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)), 200);
	УстановитьРеквизитыВопроса(Менеджер.ТТрудоваяДеятельность,			"Трудовая деятельность",	ТабличныйВопрос,, 4,, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)), 200);
	
	Если ЗаполнятьТабличныеВопросы Тогда
		// табличный вопрос образование
		ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТОбразование.ПолучитьОбъект();
		Если ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Количество() = 0 Тогда
			
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ВидОбразования;
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.УчебноеЗаведение;
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Специальность;
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ДипломСерияНомер;
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ГодОкончания;
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Квалификация;
			ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
			ОбъектПВХВопросыДляАнкетирования.Записать();
			
		КонецЕсли; 
		
		// табличный вопрос знание языков
		ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТЗнаниеЯзыков.ПолучитьОбъект();
		Если ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Количество() = 0 Тогда
			
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Язык;
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СтепеньЗнанияЯзыка;
			ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
			ОбъектПВХВопросыДляАнкетирования.Записать();
			
		КонецЕсли; 
		
		// табличный вопрос состав семьи
		ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТСоставСемьи.ПолучитьОбъект();
		Если ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Количество() = 0 Тогда
			
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоставСемьиСтепеньРодства;
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоставСемьиРодственник;
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоставСемьиДатаРождения;
			ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
			ОбъектПВХВопросыДляАнкетирования.Записать();
			
		КонецЕсли; 
		
		// табличный вопрос трудовая деятельность
		ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТТрудоваяДеятельность.ПолучитьОбъект();
		Если ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Количество() = 0 Тогда
			
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТрудоваяДеятельностьОрганизация;
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТрудоваяДеятельностьНачалоРаботы;
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТрудоваяДеятельностьОкончаниеРаботы;
			НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
			НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТрудоваяДеятельностьДолжность;
			ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
			ОбъектПВХВопросыДляАнкетирования.Записать();
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыВопросов()

// Заполняет справочник воинских званий предопределенными реквизитами
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура ЗаполнитьСправочникВоинскихЗваний() 

	ВоинскиеЗвания = Справочники.ЗваниеГражданскогоВоинскогоУчета;

	ОбъектЗвание = ВоинскиеЗвания.ГенералАрмии.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ГенералАрмии;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.ГенералЛейтенант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ГенералЛейтенант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.ГенералМайор.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ГенералМайор;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.ГенералПолковник.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ГенералПолковник;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Ефрейтор.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Ефрейтор;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Капитан.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Капитан;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Лейтенант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Лейтенант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Майор.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Майор;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.МаршалРоссийскойФедерации.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.МаршалРоссийскойФедерации;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.МладшийЛейтенант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.МладшийЛейтенант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.МладшийСержант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.МладшийСержант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Подполковник.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Подполковник;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Полковник.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Полковник;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Прапорщик.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Прапорщик;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Рядовой.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Рядовой;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Сержант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Сержант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.СтаршийЛейтенант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.СтаршийЛейтенант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.СтаршийПрапорщик.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.СтаршийПрапорщик;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.СтаршийСержант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.СтаршийСержант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Старшина.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Старшина;
	ОбъектЗвание.Записать();

КонецПроцедуры

// Заполнение элементов и реквизитов справочников "Шкалы оценк"
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура ЗаполнитьСправочникШкалОценок()
	
	СправочникШкал = Справочники.ШкалыОценокКомпетенций;
	ШкальныйОценки = Справочники.СоставОценочныхШкалКомпетенций;
	
	// Двух Бальная шкала
	Если Справочники.ШкалыОценокКомпетенций.НайтиПоНаименованию("Двухбалльная").Пустая() Тогда
		Справочник = СправочникШкал.СоздатьЭлемент();
		Справочник.Наименование = "Двухбалльная";
		Справочник.Записать();
		
		// Заполнение шкал
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "НЕ зачет";
		Оценка.ПриоритетОценки = 1;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Зачет";
		Оценка.ПриоритетОценки = 2;
		Оценка.Записать();
	КонецЕсли;

	// Трехбалльная шкала
	Если Справочники.ШкалыОценокКомпетенций.НайтиПоНаименованию("Трехбалльная").Пустая()  Тогда

		Справочник = СправочникШкал.СоздатьЭлемент();
		Справочник.Наименование = "Трехбалльная";
		Справочник.Записать();
		
		// Заполнение шкал
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Ниже ожидаемого уровня";
		Оценка.ПриоритетОценки = 1;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "На ожидаемом уровне";
		Оценка.ПриоритетОценки = 2;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Выше ожидаемого уровня";
		Оценка.ПриоритетОценки = 3;
		Оценка.Записать();
	КонецЕсли;
			
	// Четырехбалльная шкала
	Если Справочники.ШкалыОценокКомпетенций.НайтиПоНаименованию("Четырехбалльная").Пустая() Тогда
	
		Справочник = СправочникШкал.СоздатьЭлемент();
		Справочник.Наименование = "Четырехбалльная";
		Справочник.Записать();
		
		// Заполнение шкал
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "НЕ удовлетворительно";
		Оценка.ПриоритетОценки = 1;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Удовлетворительно";
		Оценка.ПриоритетОценки = 2;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Хорошо";
		Оценка.ПриоритетОценки = 3;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Отлично";
		Оценка.ПриоритетОценки = 4;
		Оценка.Записать();
	КонецЕсли;

	// Пятибалльная шкала
	Справочник = СправочникШкал.Пятибалльная;
	
	Если ШкальныйОценки.НайтиПоНаименованию("E [-2]",Истина,,Справочник).Пустая() Тогда
		// Заполнение шкал
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "E [-2]";
		Оценка.ПриоритетОценки = 1;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "D [-1]";
		Оценка.ПриоритетОценки = 2;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "С [ 0]";
		Оценка.ПриоритетОценки = 3;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "В [+1]";
		Оценка.ПриоритетОценки = 4;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "А [+2]";
		Оценка.ПриоритетОценки = 5;
		Оценка.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет начальное заполнение справочника "ОснованияУвольнения"
// данными по умолчанию
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура ЗаполнитьОснованияУвольнения()
	
	ОснованияУвольнения = Справочники.ОснованияУвольненияИзОрганизации;
	ЭлементСпр = ОснованияУвольнения.НайтиПоНаименованию("п. 1 ст. 77 ТК");
	Если ЭлементСпр.Пустая() Тогда
		ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
		ЭлементСпр.Наименование		= "п. 1 ст. 77 ТК";
		ЭлементСпр.ТекстОснования	= "Соглашение сторон";
		ЭлементСпр.Записать();
	КонецЕсли;
	ЭлементСпр = ОснованияУвольнения.НайтиПоНаименованию("п. 2 ст. 77 ТК");
	Если ЭлементСпр.Пустая() Тогда
		ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
		ЭлементСпр.Наименование		= "п. 2 ст. 77 ТК";
		ЭлементСпр.ТекстОснования	= "Истечение срока трудового договора";
		ЭлементСпр.Записать();
	КонецЕсли;
	ЭлементСпр = ОснованияУвольнения.НайтиПоНаименованию("п. 3 ст. 77 ТК");
	Если ЭлементСпр.Пустая() Тогда
		ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
		ЭлементСпр.Наименование		= "п. 3 ст. 77 ТК";
		ЭлементСпр.ТекстОснования	= "Расторжение трудового договора по инициативе работника";
		ЭлементСпр.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Начальное заполнение справочника "КлассификаторСтранМира".
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура НачальноеЗаполнениеСправочникаКлассификаторСтранМира()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КлассификаторСтранМира.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Россия)
	|			ТОГДА ""Российская Федерация""
	|		КОГДА КлассификаторСтранМира.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ЛицоБезГражданства)
	|			ТОГДА ""Лицо без гражданства""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НаименованиеПолное,
	|	КлассификаторСтранМира.Ссылка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|ГДЕ
	|	КлассификаторСтранМира.Ссылка В (ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Россия), ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ЛицоБезГражданства))
	|	И КлассификаторСтранМира.НаименованиеПолное = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Заполнение полного наименования предопределенного элемента.
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.НаименованиеПолное = Выборка.НаименованиеПолное;
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры // НачальноеЗаполнениеСправочникаКлассификаторСтранМира()

//Заполнение справочника "ДокументыУдостоверяющиеЛичность" первоначальными значениями
// Запускается при первоначальном заполнении пустой ИБ.
//
Процедура НачальноеЗаполнениеСправочникаДокументыУдостоверяющиеЛичность()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыУдостоверяющиеЛичность.Ссылка
	|ИЗ
	|	Справочник.ДокументыУдостоверяющиеЛичность КАК ДокументыУдостоверяющиеЛичность
	|ГДЕ
	|	ДокументыУдостоверяющиеЛичность.Предопределенный
	|	И ДокументыУдостоверяющиеЛичность.КодИМНС ПОДОБНО """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Макет = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьМакет("КлассификаторИМНС");
	
	Пока Выборка.Следующий() Цикл
		ИмяЭлемента = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьИмяПредопределенного(Выборка.Ссылка);
		Область = Макет.НайтиТекст(Прав(ИмяЭлемента, 2),, Макет.Область("C2"));
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.КодИМНС	= СокрЛП(Макет.Область(Область.Низ, 2, Область.Низ, 2).Текст);
		СпрОбъект.КодПФР	= СокрЛП(Макет.Область(Область.Низ, 3, Область.Низ, 3).Текст);
		СпрОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет справочник ВидыЕжегодныхОтпусков для корректной работы механизма Остатков отпусков
// Запускается при обновлении на 1.2.15 и при первоначальном заполнении пустой ИБ.
//
Процедура ЗаполнитьВидыЕжегодныхОтпусков() Экспорт
	
	Выборка = РегистрыСведений.УчетнаяПолитикаПоПерсоналу.Выбрать();
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи =  Выборка.ПолучитьМенеджерЗаписи();
		Если МенеджерЗаписи.КоличествоДнейОтпускаВГод = 0 Тогда
			МенеджерЗаписи.КоличествоДнейОтпускаВГод	= 20;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
	// Основной отпуск
	ОсновнойОтпускСсылка = Справочники.ВидыЕжегодныхОтпусков.НайтиПоНаименованию("Основной ежегодный отпуск");
	Если ОсновнойОтпускСсылка.Пустая() Тогда
		ОсновнойОтпуск = Справочники.ВидыЕжегодныхОтпусков.СоздатьЭлемент();
		ОсновнойОтпуск.Наименование							= "Основной ежегодный отпуск";
		ОсновнойОтпуск.СпособРасчетаОстаткаОтпуска			= Перечисления.СпособыРасчетаОстаткаОтпуска.ПоКалендарнымДням;
		ОсновнойОтпуск.КоличествоДнейОтпускаВГод			= 28;
		ОсновнойОтпуск.ПредоставлятьОтпускВсемСотрудникам	= Истина;
		ОсновнойОтпуск.Записать();
		ОсновнойОтпускСсылка = ОсновнойОтпуск.Ссылка;
	КонецЕсли;
	
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни,						ОсновнойОтпускСсылка);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка,							ОсновнойОтпускСсылка);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни,					ОсновнойОтпускСсылка);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни,	ОсновнойОтпускСсылка);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения,	ОсновнойОтпускСсылка);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка,					ОсновнойОтпускСсылка);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка,		ОсновнойОтпускСсылка);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения,		ОсновнойОтпускСсылка);
	
КонецПроцедуры

// Процедура добавляет вопрос в анкету.
// Запускается при обновлении на 1.2.15 и при первоначальном заполнении пустой ИБ.
//
Процедура ДобавитьВопрос(Анкета, Вопрос, Обязательный)
	
	ВопросАнкеты = Анкета.ВопросыАнкеты.Добавить();
	ВопросАнкеты.Вопрос			= Вопрос;
	ВопросАнкеты.Обязательный	= Обязательный;
	
КонецПроцедуры

// Процедура создает элемент справочника "Типовые анкеты".
// Запускается при обновлении на 1.2.15 и при первоначальном заполнении пустой ИБ.
//
Процедура СоздатьАнкетуРезюме() Экспорт
	
	Если НЕ Константы.АнкетаРезюмеКандидата.Получить().Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НоваяАнкета	= Справочники.ТиповыеАнкеты.СоздатьЭлемент();
	НоваяАнкета.ВидАнкеты					= Перечисления.ВидыАнкет.Опрос;
	НоваяАнкета.Наименование				= "Резюме";
	НоваяАнкета.ЗагружатьОбъекты			= Истина;
	НоваяАнкета.ВидСправочникаДляЗагрузки	= Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.ФизическиеЛица;
	ДобавитьВопрос(НоваяАнкета, ПланыВидовХарактеристик.ВопросыДляАнкетирования.Фамилия, Перечисления.ОбязательностьЗаполненияОтветаНаВопрос.ОбязателенКЗаполнению);
	ДобавитьВопрос(НоваяАнкета, ПланыВидовХарактеристик.ВопросыДляАнкетирования.Имя, Перечисления.ОбязательностьЗаполненияОтветаНаВопрос.ОбязателенКЗаполнению);
	ДобавитьВопрос(НоваяАнкета, ПланыВидовХарактеристик.ВопросыДляАнкетирования.Отчество, Перечисления.ОбязательностьЗаполненияОтветаНаВопрос.ОбязателенКЗаполнению);
	ДобавитьВопрос(НоваяАнкета, ПланыВидовХарактеристик.ВопросыДляАнкетирования.ДатаРождения, Перечисления.ОбязательностьЗаполненияОтветаНаВопрос.ОбязателенКЗаполнению);
	ДобавитьВопрос(НоваяАнкета, ПланыВидовХарактеристик.ВопросыДляАнкетирования.Пол, Перечисления.ОбязательностьЗаполненияОтветаНаВопрос.НеОбязателенКЗаполнению);
	ДобавитьВопрос(НоваяАнкета, ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТОбразование, Перечисления.ОбязательностьЗаполненияОтветаНаВопрос.НеОбязателенКЗаполнению);
	ДобавитьВопрос(НоваяАнкета, ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТТрудоваяДеятельность, Перечисления.ОбязательностьЗаполненияОтветаНаВопрос.НеОбязателенКЗаполнению);
	
	НоваяАнкета.Записать();
	
	Константы.АнкетаРезюмеКандидата.Установить(НоваяАнкета.Ссылка);
	
КонецПроцедуры

// Процедура добавляет в ВР соответствующий вид отпуска
// Запускается при обновлении на 1.2.15 и при первоначальном заполнении пустой ИБ.
//
Процедура ДобавитьВидЕжегодногоОтпускаВВидРасчета(ВидРасчета, ВидОтпуска) Экспорт
	
	ВидРасчетаОбъект = ВидРасчета.ПолучитьОбъект();
	ВидРасчетаОбъект.ВидЕжегодногоОтпуска = ВидОтпуска;
	ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
	ВидРасчетаОбъект.Записать();
	
КонецПроцедуры

// Процедура изменяет ставшие неуникальными коды предопределенных элементов
//
Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов) Экспорт
	
	МассивЭлементов = Новый Массив;
	
	Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
		
		МассивЭлементов.Очистить();
		КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
		ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);		
		Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = Справочники[МетаданныеТипа.Имя];
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыВидовХарактеристик[МетаданныеТипа.Имя];
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыСчетов[МетаданныеТипа.Имя];	
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыВидовРасчета[МетаданныеТипа.Имя];
		Иначе
			МенеджерТекущегоТипа = Неопределено;
		КонецЕсли;
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
			ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
			
			Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда				
				ЕСли МетаданныеТипа.ДлинаКода <> 0 И МенеджерТекущегоТипа <> Неопределено Тогда
					МассивЭлементов.Добавить(ЭлементСписка.Значение);
				КонецЕсли;				
				СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);				
			КонецЕсли;			
		КонецЦикла;
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Предопределенные.Ссылка
		|ИЗ
		|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Ссылка В(&СписокЭлементов)
		|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
		
		Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();			
			Объект.УстановитьНовыйКод();			
			Если МенеджерТекущегоТипа.НайтиПоКоду(Объект.Код).Пустая() Тогда
				
				// Поскольку меняем только код элемента, проверку корректности заполнения
				// дополнительных реквизитов объекта не выполняем.
				Объект.ОбменДанными.Загрузка = Истина;
				
				Объект.Записать();
			КонецЕсли;			
		КонецЦикла;	
		
	КонецЦикла;


КонецПроцедуры

// Процедура заполняет предопределенную смену
//
Процедура ЗаполнитьПредопределенныеСмены() Экспорт
	
	Смена = Справочники.Смены.Смена24Часа.ПолучитьОбъект();
	Смена.ПериодыСмены.Очистить();
	ПериодСмены = Смена.ПериодыСмены.Добавить();
	ПериодСмены.ВремяНачала = Дата(1,1,1, 0, 0, 1);
	ПериодСмены.ВремяОкончания = Дата(1,1,1, 23, 59, 59);
	Смена.Записать();
	
КонецПроцедуры // ЗаполнитьПредопределенныеСмены()

Процедура ЗаполнитьПериодичностьНачислений() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеНачисленияОрганизаций.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.НеОпределена) КАК ПериодичностьНачисления
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|ГДЕ
	|	ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.ПустаяСсылка)";
	
	ОбновитьОбъектыПоЗапросу(Запрос, "Обработка разовых начислений");
	
КонецПроцедуры

// Переписывает реквизиты исправляемых объектов.
//
// Параметры: 
//  Запрос - исполняемый запрос, в котором обязательно присутствует поле Ссылка
//			 остальные поля должны содержать исправленные данные, имена полей 
//           должны соответствовать именам исправляемых реквизитов
//  ТекстСообщения - строка, начало сообщения, выводимого в строке состояния
//
// Возвращаемое значение:
//  Нет
//
Процедура ОбновитьОбъектыПоЗапросу(Запрос = Неопределено,ТекстСообщения = "") Экспорт

	Если Запрос = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	ВсегоДоков = ВыборкаОбъектов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока ВыборкаОбъектов.Следующий() Цикл
		Объект = ВыборкаОбъектов.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		ЗаполнитьЗначенияСвойств(Объект,ВыборкаОбъектов);
		Если Номер % 30 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
		Объект.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

Процедура УстановитьПризнакАвтоНачислениеПоТабелю() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ИСТИНА КАК АвтоНачислятьПоТабелю
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы), ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы))
	|	И (НЕ ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю)";
	
	ОбновитьОбъектыПоЗапросу(Запрос, "Обработка начисляемых по табелю доплат");

КонецПроцедуры

// ТИПОВЫЕ ОТЧЕТЫ

// Загрузка предопределенных настроек при первом запуске системы для отчетов
//
Процедура ЗагрузитьНастройкиОтчетов() Экспорт
	
	#Если НЕ Сервер Тогда
	ТаблицаНастроек = ТиповыеОтчеты.ПолучитьТаблицуПредопределенныхНастроек();
	
	Для каждого СтрокаНастройки из ТаблицаНастроек Цикл
		
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента(СтрокаНастройки.Макет, СтрокаНастройки.Отчет);
		
	КонецЦикла
	#КонецЕсли
	
КонецПроцедуры

Процедура УстановитьИспользованиеВидовЗадачПользователей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыЗадачПользователей.Ссылка
	|ИЗ
	|	Справочник.ВидыЗадачПользователей КАК ВидыЗадачПользователей
	|ГДЕ
	|	ВидыЗадачПользователей.Использование";
	
	// Если есть хотя бы одна задача, для которой установлен признак использование
	// повторно устанавливать использование не нужно
	Если Запрос.Выполнить().Пустой() Тогда
		ВыбранныеЗадачи = Справочники.ВидыЗадачПользователей.Выбрать();
		Пока ВыбранныеЗадачи.Следующий() Цикл
			ЗадачаОбъект = ВыбранныеЗадачи.ПолучитьОбъект();
			ЗадачаОбъект.Использование = Истина;
			ЗадачаОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет предопределенные элементы для перехода с 1С:Предприятие 7.7
//
Процедура ЗаполнитьПредопределенныеЭлементы77() Экспорт
	
	ЗиК = Справочники.КонвертацииИзИнформационныхБаз1СПредприятия77.ЗарплатаКадры.ПолучитьОбъект();
	Зик.Конфигурация				= "Зарплата+Кадры. Редакция 2.3";
	Зик.ИдентификаторКонфигурации	= "R2CLKTK";
	Зик.НомерРелиза					= "7.70.292";
	Зик.КонвертацияПомощник			= "PrB_Wiz";
	Зик.КонвертацияОбработка		= "V77Exp";
	Зик.КонвертацияПравила			= "PrB";
	Зик.Записать();
	
КонецПроцедуры

// Процедура очищает информацию о возможных загруженных из внешних файлов
// правил перехода
// Это необходимо для того, чтобы пользователь мог использовать новые правила
// которые поставляются с текущим релизом
//
Процедура ОчиститьЗагруженныеПравилаПереноса() Экспорт
	
	Конвертация = Справочники.КонвертацииИзИнформационныхБаз1СПредприятия77.ЗарплатаКадры;
	
	ОбъектКонвертации	= Конвертация.Ссылка.ПолучитьОбъект();
	ОбъектКонвертации.ХранилищеПомощник				= Неопределено;
	ОбъектКонвертации.ХранилищеОписаниеПомощника	= Неопределено;
	ОбъектКонвертации.ХранилищеОбработка			= Неопределено;
	ОбъектКонвертации.ХранилищеПравила				= Неопределено;
	ОбъектКонвертации.Записать();
	
КонецПроцедуры

Процедура ОбновитьНастройкиРасчетов()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.УдержаниеЗаОтпускУменьшаетНалоги КАК УдержаниеЗаОтпускУменьшаетНалоги
	|ИЗ
	|	РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты";
	Если Запрос.Выполнить().Пустой() Тогда
		НаборЗаписей = РегистрыСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.СоздатьНаборЗаписей();
		НаборЗаписей.Добавить().ПорядокПересчетаМесячнойСтавкиВЧасовую = Перечисления.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце;
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

// УПРАВЛЕНИЕ ПРОИЗВОДСТВОМ

// Процедура заполняет предопределенные элементы справочника "Способы распределения затрат".
Процедура ЗаполнитьСправочникСпособыРаспределенияЗатрат()
	
	СправочникОбъект = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПоОбъемуВыпуска.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.БазаРаспределенияЗатрат) Тогда
		СправочникОбъект.БазаРаспределенияЗатрат 		= Перечисления.БазыРаспределенияЗатрат.ПоОбъемуВыпуска;
		СправочникОбъект.ПоказательБазыРаспределения 	= Перечисления.ВидыПоказателейБазыРаспределения.НатуральныеЕдиницыИзмерения;
		СправочникОбъект.РаспределятьНаСобственнуюПродукцию 			= Истина;
		СправочникОбъект.РаспределятьНаПродукциюИзДавальческогоСырья 	= Истина;
		СправочникОбъект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		СправочникОбъект.Записать();
	КонецЕсли;
	
	СправочникОбъект = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПоПлановойСебестоимости.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.БазаРаспределенияЗатрат) Тогда
		СправочникОбъект.БазаРаспределенияЗатрат 		= Перечисления.БазыРаспределенияЗатрат.ПоОбъемуВыпуска;
		СправочникОбъект.ПоказательБазыРаспределения 	= Перечисления.ВидыПоказателейБазыРаспределения.ЦеныНоменклатуры;
		СправочникОбъект.ТипЦен 						= Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
		СправочникОбъект.РаспределятьНаСобственнуюПродукцию 			= Истина;
		СправочникОбъект.РаспределятьНаПродукциюИзДавальческогоСырья 	= Истина;
		СправочникОбъект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		СправочникОбъект.Записать();
	КонецЕсли;
	
	СправочникОбъект = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПоНормативам.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.БазаРаспределенияЗатрат) Тогда
		СправочникОбъект.БазаРаспределенияЗатрат 		= Перечисления.БазыРаспределенияЗатрат.ПоНормативам;
		СправочникОбъект.РаспределятьНаСобственнуюПродукцию 			= Истина;
		СправочникОбъект.РаспределятьНаПродукциюИзДавальческогоСырья 	= Истина;
		СправочникОбъект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		СправочникОбъект.Записать();
	КонецЕсли;
	
	СправочникОбъект = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПоВыручкеОтРеализации.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.БазаРаспределенияЗатрат) Тогда
		СправочникОбъект.БазаРаспределенияЗатрат 		= Перечисления.БазыРаспределенияЗатрат.ПоОбъемуПродаж;
		СправочникОбъект.ПоказательБазыРаспределения 	= Перечисления.ВидыПоказателейБазыРаспределения.ФактическаяЦенаРеализации;
		СправочникОбъект.РаспределятьНаСобственнуюПродукцию 			= Истина;
		СправочникОбъект.РаспределятьНаПродукциюИзДавальческогоСырья 	= Истина;
		СправочникОбъект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		СправочникОбъект.Записать();
	КонецЕсли;
	
	СправочникОбъект = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПоОплатеТруда.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.БазаРаспределенияЗатрат) Тогда
		СправочникОбъект.БазаРаспределенияЗатрат 		= Перечисления.БазыРаспределенияЗатрат.ПоСтоимостиЗатрат;
		СправочникОбъект.РаспределятьНаСобственнуюПродукцию 			= Истина;
		СправочникОбъект.РаспределятьНаПродукциюИзДавальческогоСырья 	= Истина;
		СправочникОбъект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		#Если Клиент Тогда
		ПостроительОтчета = Новый ПостроительОтчета;
		СправочникОбъект.ЗаполнитьНачальныеНастройки(ПостроительОтчета);
		
		ПостроительОтчета.Отбор.ВидЗатрат.Значение = Перечисления.ВидыЗатрат.ОплатаТруда;
		ПостроительОтчета.Отбор.ВидЗатрат.Использование = Истина;
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
		СтруктураНастроек.Вставить("Отбор", ПостроительОтчета.Отбор);
	
		ХранилищеДанных = Новый ХранилищеЗначения(СтруктураНастроек);
		СправочникОбъект.НастройкиПостроителя = ХранилищеДанных;
		#КонецЕсли	
		СправочникОбъект.Записать();
	КонецЕсли;
	
	СправочникОбъект = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПоМатериальнымЗатратам.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.БазаРаспределенияЗатрат) Тогда
		СправочникОбъект.БазаРаспределенияЗатрат 		= Перечисления.БазыРаспределенияЗатрат.ПоСтоимостиЗатрат;
		СправочникОбъект.РаспределятьНаСобственнуюПродукцию 			= Истина;
		СправочникОбъект.РаспределятьНаПродукциюИзДавальческогоСырья 	= Истина;
		СправочникОбъект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		#Если Клиент Тогда
		ПостроительОтчета = Новый ПостроительОтчета;
		СправочникОбъект.ЗаполнитьНачальныеНастройки(ПостроительОтчета);
		
		ПостроительОтчета.Отбор.ВидЗатрат.Значение = Перечисления.ВидыЗатрат.Материальные;
		ПостроительОтчета.Отбор.ВидЗатрат.Использование = Истина;
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
		СтруктураНастроек.Вставить("Отбор", ПостроительОтчета.Отбор);
	
		ХранилищеДанных = Новый ХранилищеЗначения(СтруктураНастроек);
		СправочникОбъект.НастройкиПостроителя = ХранилищеДанных;
		#КонецЕсли	
		СправочникОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСправочникСпособыРаспределенияЗатрат()

// Установка реквизитов у предопределенных элементов 
// справочника "Статьи затрат" при создании пустой базы
Процедура ОбновитьСправочникСтатьиЗатрат()

	Справочник_Менеджер = Справочники.СтатьиЗатрат;

	ЭлементСправочника = Справочник_Менеджер.СписаниеНДСНаРасходы.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(ЭлементСправочника.ХарактерЗатрат) Тогда
		ЭлементСправочника.ХарактерЗатрат 	= Перечисления.ХарактерЗатрат.ИздержкиОбращения;
		ЭлементСправочника.ВидЗатрат 		= Перечисления.ВидыЗатрат.Прочие;
		ЭлементСправочника.ВидРасходовНУ 	= Перечисления.ВидыРасходовНУ.ПрочиеРасходы;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	ЭлементСправочника = Справочник_Менеджер.СписаниеНДСНаРасходыПрочие.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(ЭлементСправочника.ХарактерЗатрат) Тогда
		ЭлементСправочника.ХарактерЗатрат 	= Перечисления.ХарактерЗатрат.Прочие;
		ЭлементСправочника.ВидЗатрат 		= Перечисления.ВидыЗатрат.Прочие;
		ЭлементСправочника.ВидРасходовНУ 	= Перечисления.ВидыРасходовНУ.ПрочиеРасходы;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	Справочник_Менеджер = Справочники.ПрочиеДоходыИРасходы;
	
	ЭлементСправочника = Справочник_Менеджер.СписаниеНДСНаРасходы.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(ЭлементСправочника.ВидПрочихДоходовИРасходов) Тогда
		ЭлементСправочника.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
		ЭлементСправочника.ПринятиеКналоговомуУчету = Истина;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСправочникСтатьиЗатрат()

// Обновление данных в регистре сведений "Способы распределения статей затрат организаций".
//
Процедура ОбновитьСпособыРаспределенияСтатейЗатратОрганизаций()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СпособыРаспределения.Период КАК Период,
	|	СпособыРаспределения.Организация КАК Организация,
	|	СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат,
	|	СпособыРаспределения.Подразделение КАК Подразделение,
	|	СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
	|	СпособыРаспределения.СчетЗатратНУ КАК СчетЗатратНУ,
	|
	|	СпособыРаспределения.СпособРаспределенияЗатрат КАК СпособРаспределенияЗатрат,
	|	ЗНАЧЕНИЕ(Перечисление.ХарактерРаспределенияЗатрат.ПустаяСсылка) КАК ХарактерРаспределенияЗатрат
	|
	|ИЗ
	| РегистрСведений.СпособыРаспределенияСтатейЗатратОрганизаций КАК СпособыРаспределения
	|
	|ГДЕ
	|	СпособыРаспределения.ХарактерРаспределенияЗатрат <> ЗНАЧЕНИЕ(Перечисление.ХарактерРаспределенияЗатрат.ПустаяСсылка)
	|	И СчетЗатрат В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.БракВПроизводстве))
	|");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.СпособыРаспределенияСтатейЗатратОрганизаций.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСпособыРаспределенияСтатейЗатратОрганизаций()

// БУХГАЛТЕРСКИЙ УЧЕТ

// Устанавливает субконто "Склады" у указанного счета.
//
Процедура УстанновитьСубконтоНаСчете(ИмяПланаСчетов, ВидСубконто, ИмяСчета, ЕстьКоличество = Истина, ЕстьСуммовойУчет = Ложь)

	Попытка

		Счет   = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Объект = Счет.ПолучитьОбъект();

		Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто") = Неопределено Тогда
			НовыйВид = Объект.ВидыСубконто.Добавить();

			НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Склады;
			НовыйВид.Суммовой    = ЕстьСуммовойУчет;

			Если ЕстьКоличество Тогда
				НовыйВид.Количественный = Истина;
			КонецЕсли;

			Объект.Записать();
			#Если Клиент Тогда
			Состояние("Добавлен вид субконто ""Склады"" на счете " + Объект.Код + " плана счетов """ + ИмяПланаСчетов + """...");
			#КонецЕсли
		КонецЕсли;

	Исключение

	КонецПопытки;

КонецПроцедуры // УстанновитьСубконтоНаСчете()

// Выполняет заполнение регистра сведений "УчетнаяПолитикаОбщаяДляРегламентированногоУчета"
// и устанавливает субконто "Склады" в счетах.
Процедура УстановитьСуммовойУчетНаСкладах()

	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ОборудованиеКУстановке");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ПриобретениеОбъектовОсновныхСредств");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Материалы");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "СырьеИМатериалы");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ПокупныеПолуфабрикатыИКомплектующие");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Топливо");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Тара");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ЗапасныеЧасти");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ПрочиеМатериалы");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "СтроительныеМатериалы");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ИнвентарьИХозяйственныеПринадлежности");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "СпецоснасткаИСпецодеждаНаСкладе");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Полуфабрикаты");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Товары");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ТоварыНаСкладах");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ТоварыВРозничнойТорговле");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ТараПодТоваромИПорожняя");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ПокупныеИзделия");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ГотоваяПродукция");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ТМЦпринятыеНаОтветственноеХранение");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "МатериалыПринятыеВПереработку_");
	УстанновитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "МатериалыПринятыеВПереработку");

	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ОборудованиеКУстановке", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ПриобретениеОбъектовОсновныхСредств", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Материалы", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "СырьеИМатериалы", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ПокупныеПолуфабрикатыИКомплектующие", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Топливо", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Тара", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ЗапасныеЧасти", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ПрочиеМатериалы", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "СтроительныеМатериалы", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ИнвентарьИХозяйственныеПринадлежности", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "СпецоснасткаИСпецодеждаНаСкладе", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Полуфабрикаты", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Товары", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ТоварыНаСкладах", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ТоварыВРозничнойТорговле", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ТараПодТоваромИПорожняя", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ПокупныеИзделия", Ложь);
	УстанновитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ГотоваяПродукция", Ложь);

	УстанновитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "СырьеИМатериалы");
	УстанновитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "СырьеИОсновныеМатериалы");
	УстанновитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "Топливо");
	УстанновитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "Тара");
	УстанновитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ЗапасныеЧасти");
	УстанновитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ПрочиеМатериалы");
	УстанновитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "СтроительныеМатериалы");
	УстанновитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ТоварыНаСкладе");
	УстанновитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ТоварыВРознице");
	УстанновитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ГотоваяПродукция");
	УстанновитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "КомплектующиеИПолуфабрикаты");

КонецПроцедуры // УправлениеСуммовымУчетомНаСкладах()

// Заполняет регистры сведения бухгалтерии связанных со счетами учета
//
Процедура ЗаполнитьРегистрыСчетовУчета()
	#Если Клиент Тогда
	Состояние("Выполняется начальное заполнение регистра сведений ""Счета учета номенклатуры""...");
	#КонецЕсли
	ВидНоменклатурыТовар = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыТовар) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Товар";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыТовар = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	ВидНоменклатурыМатериал = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Материал", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыМатериал) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Материал";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыМатериал = НовыйЭлемент.Ссылка;
	КонецЕсли;

	ВидНоменклатурыПродукция = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Продукция", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыПродукция) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Продукция";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыПродукция = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	ВидНоменклатурыПолуфабрикат = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Полуфабрикат", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыПолуфабрикат) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Полуфабрикат";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыПолуфабрикат = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	ВидНоменклатурыУслуга = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыУслуга) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Услуга";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		НовыйЭлемент.Записать();
	КонецЕсли;
	
	НачатьТранзакцию();

	Набор  = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьНаборЗаписей();
	
	// Пустая номенклатура, организация
	Запись = Набор.Добавить();
	Запись.Организация  = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();

	Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
	Запись.СчетУчетаНДС                     = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	Запись.СчетУчетаНДСУплаченногоНаТаможне = ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
	Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле;
	Запись.СчетДоходовОтРеализацииБУ        = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
	Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные;
	Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию;
	Запись.СчетРасходовБУ                   = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
	Запись.СчетДоходовВРозницеБУ            = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
	Запись.СчетРасходовВРозницеБУ           = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;

	Запись.СчетУчетаНУ                      = ПланыСчетов.Налоговый.ТоварыНаСкладах;
	Запись.СчетУчетаВРозницеНУ              = ПланыСчетов.Налоговый.ТоварыВРозничнойТорговле;
	Запись.СчетУчетаПередачиНУ              = ПланыСчетов.Налоговый.ПокупныеТоварыОтгруженные;
	Запись.СчетДоходовОтРеализацииНУ        = ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
	Запись.СчетРасходовНУ                   = ПланыСчетов.Налоговый.СебестоимостьПродаж;
	Запись.СчетУчетаЗабалансовыйНУ          = ПланыСчетов.Налоговый.ТоварыНаСкладе;
	Запись.СчетУчетаПередачиЗабалансовыйНУ  = ПланыСчетов.Налоговый.ТоварыПереданныеНаКомиссию;
	
	// Пустая организация, вид номенклатуры = ТОВАР
	Запись = Набор.Добавить();
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыТовар;

	Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
	Запись.СчетУчетаНДС                     = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	Запись.СчетУчетаНДСУплаченногоНаТаможне = ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
	Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле;
	Запись.СчетДоходовОтРеализацииБУ        = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
	Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные;
	Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию;
	Запись.СчетРасходовБУ                   = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
	Запись.СчетДоходовВРозницеБУ            = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
	Запись.СчетРасходовВРозницеБУ           = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;

	Запись.СчетУчетаНУ                      = ПланыСчетов.Налоговый.ТоварыНаСкладах;
	Запись.СчетУчетаВРозницеНУ              = ПланыСчетов.Налоговый.ТоварыВРозничнойТорговле;
	Запись.СчетУчетаПередачиНУ              = ПланыСчетов.Налоговый.ПокупныеТоварыОтгруженные;
	Запись.СчетДоходовОтРеализацииНУ        = ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
	Запись.СчетРасходовНУ                   = ПланыСчетов.Налоговый.СебестоимостьПродаж;
	Запись.СчетУчетаЗабалансовыйНУ          = ПланыСчетов.Налоговый.ТоварыНаСкладе;
	Запись.СчетУчетаПередачиЗабалансовыйНУ  = ПланыСчетов.Налоговый.ТоварыПереданныеНаКомиссию;
	
	// Пустая организация, вид номенклатуры = МАТЕРИАЛ
	Запись = Набор.Добавить();
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыМатериал;

	Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
	Запись.СчетУчетаНДС                     = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	Запись.СчетУчетаНДСУплаченногоНаТаможне = ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
	Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
	Запись.СчетДоходовОтРеализацииБУ        = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
	Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
	Запись.СчетРасходовБУ                   = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;

	Запись.СчетУчетаНУ                      = ПланыСчетов.Налоговый.СырьеИМатериалы;
	Запись.СчетУчетаПередачиНУ              = ПланыСчетов.Налоговый.СырьеИМатериалыПереданныеВПереработку;
	Запись.СчетДоходовОтРеализацииНУ        = ПланыСчетов.Налоговый.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг;
	Запись.СчетРасходовНУ                   = ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейПрочегоИмущества;
	
	// Пустая организация, вид номенклатуры = ПРОДУКЦИЯ
	Запись = Набор.Добавить();
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыПродукция;

	Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
	Запись.СчетУчетаНДС                     = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	Запись.СчетУчетаНДСУплаченногоНаТаможне = ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
	Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле;
	Запись.СчетДоходовОтРеализацииБУ        = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
	Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная;
	Запись.СчетРасходовБУ                   = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
	Запись.СчетДоходовВРозницеБУ            = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
	Запись.СчетРасходовВРозницеБУ           = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;

	Запись.СчетУчетаНУ                      = ПланыСчетов.Налоговый.ГотоваяПродукция;
	Запись.СчетУчетаВРозницеНУ              = ПланыСчетов.Налоговый.ТоварыВРозничнойТорговле;
	Запись.СчетУчетаПередачиНУ              = ПланыСчетов.Налоговый.ГотоваяПродукцияОтгруженная;
	Запись.СчетДоходовОтРеализацииНУ        = ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
	Запись.СчетРасходовНУ                   = ПланыСчетов.Налоговый.СебестоимостьПродаж;
	
	// Пустая организация, вид номенклатуры = ПОЛУФАБРИКАТ
	Запись = Набор.Добавить();
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыПолуфабрикат;

	Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.Полуфабрикаты;
	Запись.СчетУчетаНДС                     = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	Запись.СчетУчетаНДСУплаченногоНаТаможне = ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
	Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле;
	Запись.СчетДоходовОтРеализацииБУ        = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
	Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная;
	Запись.СчетРасходовБУ                   = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
	Запись.СчетДоходовВРозницеБУ            = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
	Запись.СчетРасходовВРозницеБУ           = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
	
	Запись.СчетУчетаНУ                      = ПланыСчетов.Налоговый.Полуфабрикаты;
	Запись.СчетУчетаВРозницеНУ              = ПланыСчетов.Налоговый.ТоварыВРозничнойТорговле;
	Запись.СчетУчетаПередачиНУ              = ПланыСчетов.Налоговый.ГотоваяПродукцияОтгруженная;
	Запись.СчетДоходовОтРеализацииНУ        = ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
	Запись.СчетРасходовНУ                   = ПланыСчетов.Налоговый.СебестоимостьПродаж;
	
	Набор.Записать();
	#Если Клиент Тогда
	Состояние("Выполняется начальное заполнение регистра сведений ""Контрагенты организаций""...");
	#КонецЕсли

	Набор  = РегистрыСведений.КонтрагентыОрганизаций.СоздатьНаборЗаписей();
	//Запись с пустым измерением ВидРасчетовПоДоговору после ввода обязательного признака
	// договора ВидыРасчетовПоДоговорам удалить.
	Запись = Набор.Добавить();
	Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка();
	Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;

	Запись = Набор.Добавить();
	Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
	Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным; 
	Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;

	Запись = Набор.Добавить();
	Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
	Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал;
	Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал; 
	Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал;
	Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал;
	Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
	Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал;
	Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал;

	Запись = Набор.Добавить();
	Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;
	Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ;
	Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ; 
	Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ;
	Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ;
	Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
	Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ;
	Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ;

	Набор.Записать();

	ЗафиксироватьТранзакцию();

КонецПроцедуры //ЗаполнитьРегистрыСчетовУчета()

// Заполняет регистры сведения бухгалтерии связанных со счетами учета по деятельности ЕНВД
//
Процедура ЗаполнитьРегистрСчетовЕНВД()
	#Если Клиент Тогда
	Состояние("Выполняется начальное заполнение регистра сведений ""Счета доходов и расходов по деятельности, облагаемой ЕНВД ""...");
	#КонецЕсли
	Набор = РегистрыСведений.СчетаУчетаПоДеятельностиЕНВД.СоздатьНаборЗаписей();

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваОблагаемоеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыОблагаемыеЕНВД;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыРаспределяемые;
	Запись.ПодлежитРаспределению = Истина;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыОблагаемыеЕНВД;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыРаспределяемые;
	Запись.ПодлежитРаспределению = Истина;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.БракВПроизводствеОблагаемоеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваОблагаемоеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияОблагаемыеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияРаспределяемые;
	Запись.ПодлежитРаспределению = Истина;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыОблагаемыеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыРаспределяемые;
	Запись.ПодлежитРаспределению = Истина;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ВыручкаОблагаемаяЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.СебестоимостьПродажОблагаемаяЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуОблагаемыеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыОблагаемыеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ПрочиеРасходыОблагаемыеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ПрочиеРасходыРаспределяемые;
	Запись.ПодлежитРаспределению = Истина;
	
	Набор.Записать();	
КонецПроцедуры

// Запись новой ставки рефинансирования в регистр сведений
// 
Процедура УстановитьСтавкуРефинансирования(Ставка, Дата)
	
	СтавкаЦБ = РегистрыСведений.СтавкаРефинансированияЦБ.СоздатьНаборЗаписей();
	СтавкаЦБ.Отбор.Период.Значение = Дата;
	СтавкаЦБ.Отбор.Период.Использование = Истина;
	СтавкаЦБ.Прочитать();
	
	Если СтавкаЦБ.Количество() > 0 Тогда
		СтрокаНабора = СтавкаЦБ[0];
	Иначе
		СтрокаНабора = СтавкаЦБ.Добавить();
	КонецЕсли;
	
	СтрокаНабора.Период = Дата;
	СтрокаНабора.Размер = Ставка;
	СтавкаЦБ.Записать();	
	
КонецПроцедуры // УстановитьСтавкуРефинансирования()

//Процедура добавляет субконто Подразделения на переданный счет
//Запускается при заполнении пустой ИБ
Процедура УстановитьСубконтоПодразделения(ИмяПланаСчетов, СчетОбъект)
	
	Если СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения, "ВидСубконто") = Неопределено Тогда
		НовыйВид = СчетОбъект.ВидыСубконто.Добавить();

		НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения;
		НовыйВид.Суммовой    = Истина;
		НовыйВид.ТолькоОбороты = Истина;

		Попытка
			СчетОбъект.Записать();
			#Если Клиент Тогда
			Состояние("Добавлен вид субконто ""Подразделения"" на счете " + СчетОбъект.Код + " плана счетов """ + ИмяПланаСчетов + """.");
			#КонецЕсли
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // УстановитьСубконтоПодразделения()

// Выполняет установку субконто "Подразделение" на субсчета 44 счета.
//Запускается при заполнении пустой ИБ
//
Процедура УстановитьСубконтоНа44Счете()
	
	УстановитьСубконтоПодразделения("Хозрасчетый", ПланыСчетов.Хозрасчетный.РасходыНаПродажу.ПолучитьОбъект());
	
	ПланСчетовВыборка = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	Пока ПланСчетовВыборка.Следующий() Цикл
		СчетОбъект = ПланСчетовВыборка.ПолучитьОбъект();
		УстановитьСубконтоПодразделения("Хозрасчетый", СчетОбъект)
	КонецЦикла;
	
	УстановитьСубконтоПодразделения("Налоговый", ПланыСчетов.Налоговый.РасходыНаПродажу.ПолучитьОбъект());
	
	ПланСчетовВыборка = ПланыСчетов.Налоговый.ВыбратьИерархически(ПланыСчетов.Налоговый.РасходыНаПродажу);
	Пока ПланСчетовВыборка.Следующий() Цикл
		СчетОбъект = ПланСчетовВыборка.ПолучитьОбъект();
		УстановитьСубконтоПодразделения("Налоговый", СчетОбъект)
	КонецЦикла;
	
КонецПроцедуры // УстановитьСубконтоНа44Счете()

// РЕГЛАМЕНТИРОВАННАЯ ОТЧЕТНОСТЬ

// Выполняет первоначальное заполнение справочника РегламентированныеОтчеты
// списком регламентированных отчетов. 
//  Процедура должна вызываться при первоначальном заполнении пустой 
// информационной базы. Предполагается, что перед запуском процедуры справочник
// РегламентированныеОтчеты - пустой.
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов(ПервоеЗаполнение = Истина, ИзменятьПризнакИспользованияВнешнегоОтчета = Истина)

	Перем ДеревоОтчетов;
	Перем ОбработкаОбновлениеОтчетов;

	Если ИзменятьПризнакИспользованияВнешнегоОтчета И НЕ ПервоеЗаполнение Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
							  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
		                      |ИЗ
		                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		                      |ГДЕ
		                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");
		Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Метаданные.Документы.Найти(Выборка.ИсточникОтчета) <> Неопределено ИЛИ	Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
				ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
				ОбъектРеглОтчет.Записать();
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	// Заполнением списка отчетов выполняется путем вызова экспортных процедур
	// обработки ОбновлениеРегламентированнойОтчетности.
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать();
	
	// Получаем список регламентированных отчетов в виде дерева.
	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		// нет обновлений
		Возврат;
	КонецЕсли;
	
	// Заполняем списко отчетов.
	ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов, ПервоеЗаполнение);

КонецПроцедуры // ЗаполнитьСписокРегламентированныхОтчетов()

Процедура ВключитьМеханизмОнлайнСервисовРО()
	// {{KM WARE Акулов А.И. 04.10.2015 начало
	// 
	// {{Старый код:
	//Константы.ИспользоватьМеханизмОнлайнСервисовРО.Установить(Истина);
	// }}Новый код:
	Попытка
		Константы.ИспользоватьМеханизмОнлайнСервисовРО.Установить(Истина);
	Исключение
	КонецПопытки;
	// }}KM WARE Акулов А.И. 04.10.2015 окончание 
	
КонецПроцедуры

Процедура ОтключитьВнешнийМодульДокументооборотаСФНС()
	
	Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Установить(Ложь);
	
КонецПроцедуры

Процедура ОбновлениеОбъектовЭДОсКО()
	
	Выборка = Справочники.УчетныеЗаписиДокументооборота.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектУЗ = Выборка.ПолучитьОбъект();
		ОбъектУЗ.ПредназначенаДляДокументооборотаСФНС = Истина;
		ОбъектУЗ.ОбменДанными.Загрузка = Истина;
		ОбъектУЗ.Записать();
	КонецЦикла;
	
	Выборка = Справочники.ЦиклыОбмена.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектУЗ = Выборка.ПолучитьОбъект();
		Если ОбъектУЗ.Вид.Пустая() Тогда
			ОбъектУЗ.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
			ОбъектУЗ.ОбменДанными.Загрузка = Истина;
			ОбъектУЗ.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//УПРАВЛЕНИЕ ТОРГОВЛЕЙ

//заполнение реквизита ТипОплаты значением Наличные в справочнике ВидыОплатЧекаККМ
Процедура ЗаполнитьТипыОплатДляВидовОплатЧекаККМ()
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.ВидыОплатЧекаККМ
	|ГДЕ ЭтоГруппа = ложь и ТипОплаты = &ПустаяСсылка";
	Запрос.УстановитьПараметр("ПустаяСсылка", Перечисления.ТипыОплатЧекаККМ.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		текОбъект = Выборка.ссылка.ПолучитьОбъект();
		текОбъект.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные;
		текОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Заполнение реквизитов справочника "Виды оплат чека ККМ"
//
Процедура ЗаполнитьСправочникВидыОплатЧекаККМ()

	ОбъектВидОплатыЧекаККМ                    = Справочники.ВидыОплатЧекаККМ.Наличные.ПолучитьОбъект();
	ОбъектВидОплатыЧекаККМ.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные;
	ОбъектВидОплатыЧекаККМ.Записать();

КонецПроцедуры // ЗаполнитьСправочникВидыОплатЧекаККМ()

// Начальное заполнение справочника "КлассификаторСтранМира".
//
Процедура НачальноеЗаполениеСправочникаКлассификаторСтранМира()

	Россия = Справочники.КлассификаторСтранМира.Россия;

	// Заполнение полного наименования предопределенного элемента.
	РоссияОбъект                    = Россия.ПолучитьОбъект();
	РоссияОбъект.НаименованиеПолное = "Российская Федерация";
	РоссияОбъект.Записать();

КонецПроцедуры // НачальноеЗаполениеСправочникаКлассификаторСтранМира()

// Функция для проверки возможности открытия форм - обработчиков обновления
//
Функция ПолучитьРазрешениеНаОткрытиеФормы() Экспорт
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	#Если Клиент Тогда
	Предупреждение("Форму обработки может открывать только пользователь с ролью ""Полные права""");
	#КонецЕсли
	Возврат Ложь;
	
КонецФункции

//Заполнение регистров сведений ДокументыРегламентныхОпераций и ОтчетыРегламентныхОпераций первоначальными значениями
Процедура ЗаполнитьРегистрыРегламентныхОпераций(ДокументыРегламентныхОпераций, ОтчетыРегламентныхОпераций)

	Если ДокументыРегламентныхОпераций Тогда
		НаборЗаписей = РегистрыСведений.ДокументыРегламентныхОпераций.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();	
		НаборЗаписей.ЗаполнитьРегистрПоумолчанию();
		НаборЗаписей.Записать();
	КонецЕсли; 
	
	Если ОтчетыРегламентныхОпераций Тогда
		НаборЗаписей = РегистрыСведений.ОтчетыРегламентныхОпераций.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();	
		НаборЗаписей.ЗаполнитьРегистрПоумолчанию();
		НаборЗаписей.Записать();
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьРегистрыРегламентныхОпераций

Функция УстановитьНовыеСтавкиНалогаНаПрибыль()
	// {{KM WARE Акулов А.И. 04.10.2015 начало
	// 
	Попытка	
		// }}KM WARE Акулов А.И. 04.10.2015 окончание
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УчетнаяПолитикаОрганизацийСрезПоследних.Организация,
		|	СтавкиНалогаНаПрибыльСрезПоследних.СтавкаФБ
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Дата, СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)) КАК УчетнаяПолитикаОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаПрибыль.СрезПоследних(&Дата, ) КАК СтавкиНалогаНаПрибыльСрезПоследних
		|		ПО УчетнаяПолитикаОрганизацийСрезПоследних.Организация = СтавкиНалогаНаПрибыльСрезПоследних.Организация";
		
		
		Запрос.УстановитьПараметр("Дата", '20090101');
		Результат = Запрос.Выполнить().Выгрузить();
		НаборЗаписей = РегистрыСведений.СтавкиНалогаНаПрибыль.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		
		
		Для Каждого Выборка Из Результат Цикл
			Если Не Выборка.СтавкаФБ = NULL И Не Выборка.СтавкаФБ = 6.5 Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.Период = '20090101';
			НоваяЗапись.СтавкаФБ = 2;
			НоваяЗапись.СтавкаСубъектРФ = 18;
			НоваяЗапись.СтавкаМестный = 0;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не возможно установить ставки налога на прибыль на 1 января 2009 года");
		КонецПопытки;
		// {{KM WARE Акулов А.И. 04.10.2015 начало
		// 
	Исключение
	КонецПопытки;;
	// }}KM WARE Акулов А.И. 04.10.2015 окончание
КонецФункции

Процедура ИсправитьКодЭлементаОбъектаМетаданных(ОбъектМетаданных, ЭлементОбъектаМетаданных)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаОбъекта.Код
	|ИЗ
	|	" + ОбъектМетаданных + " КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.Код = &Код
	|	И ТаблицаОбъекта.Ссылка <> &Ссылка
	|");

	Запрос.УстановитьПараметр("Код", ЭлементОбъектаМетаданных.Код);
	Запрос.УстановитьПараметр("Ссылка", ЭлементОбъектаМетаданных.Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НачатьТранзакцию();

		ОбъектЭлемента = ЭлементОбъектаМетаданных.ПолучитьОбъект();
		ОбъектЭлемента.УстановитьНовыйКод();
		ОбъектЭлемента.Записать();

		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры

// ПОЛЬЗОВАТЕЛИ

Процедура ОбновитьПользователей()

	ОбщегоНазначения.СообщитьОСостоянииОбновления("Пользователи", "Обновление пользователей");
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Пользователи.Код,
	               |	Пользователи.Ссылка,
	               |	Пользователи.ИдентификаторПользователяИБ
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	(НЕ Пользователи.ЭтоГруппа)";
	 
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
			Продолжить;
		КонецЕсли;
	
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(Выборка.Код));
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПользовательОбъект.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
		ПользовательОбъект.Записать();

	КонецЦикла;
	
	ОбщегоНазначения.СообщитьОСостоянииОбновления("Пользователи", "Обновление пользователей завершено",,, Истина);
	
КонецПроцедуры //

// СЛУЖЕБНЫЕ ОПЕРАЦИИ

Процедура ПереносЗначенийОбъектовСИзмененнымиИдентификаторами()
	
	// Копирование значений реквизитов документа Платежное поручение исходящее
	// УдалитьПеречислениеВБюджет -> ПеречислениеВБюджет
	// УдалитьВидПеречисленияВБюджет -> ВидПеречисленияВБюджет
	// Действие необходимо в связи с изменением внутренних идентификаторов реквизитов документа
	
	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее", "Обновление измененных реквизитов");
	
	// Заполним соответствие значений перечислений УдалитьВидыПеречисленийВБюджет и ВидыПеречисленийВБюджет 
	СоответствиеПеречисленийВПБ = Новый Соответствие;
	МетаданныеНовогоПеречисленияВПБ = Метаданные.Перечисления.ВидыПеречисленийВБюджет.ЗначенияПеречисления;
	
	Для Каждого СтароеЗначениеПеречисления Из Метаданные.Перечисления.УдалитьВидыПеречисленийВБюджет.ЗначенияПеречисления Цикл
		
		НовоеЗначениеПеречисления = МетаданныеНовогоПеречисленияВПБ.Найти(СтароеЗначениеПеречисления.Имя);
		СоответствиеПеречисленийВПБ.Вставить(Перечисления.УдалитьВидыПеречисленийВБюджет[СтароеЗначениеПеречисления.Имя],
											 ?(НовоеЗначениеПеречисления = Неопределено,
											 		Перечисления.ВидыПеречисленийВБюджет.ПустаяСсылка(),
													Перечисления.ВидыПеречисленийВБюджет[СтароеЗначениеПеречисления.Имя]));
		
	КонецЦикла;
	
	// Найдем все документы вида "Платежное поручение исходящее",
	// у которых заполнен хотя бы один из изменившихся реквизитов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ППИ.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ППИ
	|ГДЕ
	|	(ППИ.УдалитьПеречислениеВБюджет = ИСТИНА
	|		ИЛИ ППИ.УдалитьВидПеречисленияВБюджет <> ЗНАЧЕНИЕ(Перечисление.УдалитьВидыПеречисленийВБюджет.ПустаяСсылка))";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Для каждого найденного документа заполним значения новых реквизитов
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ПеречислениеВБюджет = ДокументОбъект.УдалитьПеречислениеВБюджет;
		Если ЗначениеЗаполнено(ДокументОбъект.УдалитьВидПеречисленияВБюджет) Тогда
			ДокументОбъект.ВидПеречисленияВБюджет = 
				СоответствиеПеречисленийВПБ.Получить(ДокументОбъект.УдалитьВидПеречисленияВБюджет);
		КонецЕсли;
		
		// Проверки при записи не нужны
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
	// Замена значения перечисления ВидыРасходовНУ
	// УдалитьСтраховыеВзносы -> СтраховыеВзносы
	// Действие необходимо в связи с изменением внутренних идентификаторов значения перечисления
	
	СтароеЗначениеВидыРасходовНУ = Перечисления.ВидыРасходовНУ.УдалитьСтраховыеВзносы;
	НовоеЗначениеВидыРасходовНУ  = Перечисления.ВидыРасходовНУ.СтраховыеВзносы;
	Запрос.УстановитьПараметр("СтароеЗначениеВидыРасходовНУ", СтароеЗначениеВидыРасходовНУ);
	
	// Найдем все элементы справочника "Статьи затрат",
	// у которых реквизит ВидРасходовНУ заполнен старым значением перечисления
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ = &СтароеЗначениеВидыРасходовНУ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Для каждого элемента установим новое значение реквизита
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СправочникОбъект.ВидРасходовНУ = НовоеЗначениеВидыРасходовНУ;
		
		// Проверки при записи не нужны
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
	// Найдем все документы вида "Установка соответствия счетов БУ и НУ",
	// у которых реквизит ТЧ СоответствиеСчетовБУиНУ.ВидЗатратНУ заполнен старым значением перечисления
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УСС.Ссылка
	|ИЗ
	|	Документ.УстановкаСоответствияСчетовБУиНУ.СоответствиеСчетовБУиНУ КАК УСС
	|ГДЕ
	|	УСС.ВидЗатратНУ = &СтароеЗначениеВидыРасходовНУ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Структура для поиска строк в табличной части документа
	СтруктураПоискаСтрок = Новый Структура("ВидЗатратНУ", СтароеЗначениеВидыРасходовНУ);
	
	Пока Выборка.Следующий() Цикл
		
		// Для каждой строки документа, содержащей  в реквизите ВидЗатратНУ
		// старое значение перечисления, установим новое значение перечисления
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СтрокиТЧ = ДокументОбъект.СоответствиеСчетовБУиНУ.НайтиСтроки(СтруктураПоискаСтрок);
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			СтрокаТЧ.ВидЗатратНУ = НовоеЗначениеВидыРасходовНУ;
		КонецЦикла;
		
		// Проверки при записи не нужны
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
	// Найдем все наборы записей регистров "Соответствие счетов БУ и НУ" и "Расчет нормирования расходов",
	// у которых реквизиты заполнены старым значением перечисления
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РНР.Регистратор,
	|	""РасчетНормированияРасходов"" КАК ИмяРегистра
	|ИЗ
	|	РегистрСведений.РасчетНормированияРасходов КАК РНР
	|ГДЕ
	|	РНР.ВидОперации = &СтароеЗначениеВидыРасходовНУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ССБУНУ.Регистратор,
	|	""СоответствиеСчетовБУиНУ""
	|ИЗ
	|	РегистрСведений.СоответствиеСчетовБУиНУ КАК ССБУНУ
	|ГДЕ
	|	ССБУНУ.ВидЗатратНУ = &СтароеЗначениеВидыРасходовНУ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Структура для определения имени измерения по имени регистра
	СтруктураИзмеренийРегистров = Новый Структура;
	СтруктураИзмеренийРегистров.Вставить("РасчетНормированияРасходов", "ВидОперации");
	СтруктураИзмеренийРегистров.Вставить("СоответствиеСчетовБУиНУ",    "ВидЗатратНУ");
	ИмяРеквизита = "";
	
	Пока Выборка.Следующий() Цикл
		
		// Определим имя проверяемого реквизита по имени регистра
		СтруктураИзмеренийРегистров.Свойство(Выборка.ИмяРегистра, ИмяРеквизита);
		// Создадим структуру для поиска строк в таблице регистра
		СтруктураПоискаСтрок = Новый Структура(ИмяРеквизита, СтароеЗначениеВидыРасходовНУ);
		
		// Прочитаем набор записей регистратора
		НаборЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		// Выгрузим из набора только колонку проверяемого реквизита
		ТаблицаЗаписей = НаборЗаписей.Выгрузить(, ИмяРеквизита);
		
		// Найдем и заменим старые значения перечисления
		СтрокиТЗ = ТаблицаЗаписей.НайтиСтроки(СтруктураПоискаСтрок);
		
		Для Каждого СтрокаТЗ Из СтрокиТЗ Цикл
			СтрокаТЗ[ИмяРеквизита] = НовоеЗначениеВидыРасходовНУ;
		КонецЦикла;
		
		// Загрузим измененные значения проверяемого реквизита в набор записей
		НаборЗаписей.ЗагрузитьКолонку(ТаблицаЗаписей.ВыгрузитьКолонку(ИмяРеквизита), ИмяРеквизита);
		
		// Проверки при записи не нужны
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее", "Обновление измененных реквизитов завершено",,, Истина);
	
КонецПроцедуры

// ОСНОВНЫЕ СРЕДСТВА И НЕМАТЕРИАЛЬНЫЕ АКТИВЫ

// Соответствие старых и новых имен файлов обработок обслуживания для автоматического обновления ИБ
мСоответствиеИмен = Новый Соответствие;
мСоответствиеИмен.Вставить("1CFPEmulator_v2.epf",        "1CFPEmulator_v2.epf");
мСоответствиеИмен.Вставить("ACOMNetsDataLoader_v2.epf",  "ACOMNetsScaleOffline_v2.epf");
мСоответствиеИмен.Вставить("AlfaBankES_v2.epf",          "AlfaBankES_v2.epf");
мСоответствиеИмен.Вставить("ATOLBarcodeMSR_v2.epf",      "ATOLBarcodeMSR_v2.epf");
мСоответствиеИмен.Вставить("ATOLBarcodeScan_v2.epf",     "ATOLBarcodeScan_v2.epf");
мСоответствиеИмен.Вставить("ATOLCashDesk_v2.epf",        "ATOLCashierECROffline_v2.epf");
мСоответствиеИмен.Вставить("ATOLCustDisp_v2.epf",        "ATOLCustomerDisplay_v2.epf");
мСоответствиеИмен.Вставить("ATOLGenECR_v2.epf",          "ATOLFiscalPrinters_v2.epf");
мСоответствиеИмен.Вставить("ATOLPDT_v2.epf",             "ATOLPDT_v2.epf");
мСоответствиеИмен.Вставить("ATOLScale_v2.epf",           "ATOLScale_v2.epf");
мСоответствиеИмен.Вставить("ECRA200Online_v2.epf",       "VersionTA200ECROnline_v2.epf");
мСоответствиеИмен.Вставить("FiscalOPOS_v2.epf",          "1CMoebiusFP_v2.epf");
мСоответствиеИмен.Вставить("FTCES_v2.epf",               "FTCES_v2.epf");
мСоответствиеИмен.Вставить("IncotexMercuryFP_v2.epf",    "IncotexMercuryFP_v2.epf");
мСоответствиеИмен.Вставить("KKSSparkFP_v2.epf",          "KKSSparkFP_v2.epf");
мСоответствиеИмен.Вставить("OKALadogaECR_v2.epf",        "OKALadogaECROffline_v2.epf");
мСоответствиеИмен.Вставить("SberBankES_v2.epf",          "SberBankES_v2.epf");
мСоответствиеИмен.Вставить("ScanCityCipherLab_v2.epf",   "ScanCityCipherLabPDT_v2.epf");
мСоответствиеИмен.Вставить("ScanCodeCipherLab_v2.epf",   "ScanCodeCipherLabPDT_v2.epf");
мСоответствиеИмен.Вставить("ScanOPOSMSR_v2.epf",         "1CScanOPOSMSR_v2.epf");
мСоответствиеИмен.Вставить("ScanOPOSScan_v2.epf",        "1CScanOPOSScan_v2.epf");
мСоответствиеИмен.Вставить("ShtrihMCash_v2.epf",         "ShtrihMCashierECROffline_v2.epf");
мСоответствиеИмен.Вставить("ShtrihMFP_v2.epf",           "ShtrihMFiscalPrinters_v2.epf");
мСоответствиеИмен.Вставить("ShtrihMMemoLite_v2.epf",     "ShtrihMMemoPlusECROffline_v2.epf");
мСоответствиеИмен.Вставить("ShtrihMPDT_v2.epf",          "ShtrihMPDT_v2.epf");
мСоответствиеИмен.Вставить("ShtrihMScaleOffline_v2.epf", "ShtrihMScaleOffline_v2.epf");


