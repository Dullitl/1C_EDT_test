Перем мВалютаРегламентированногоУчета Экспорт; 
Перем Структура_ТипыДокументовАванса;
Перем мПорядокРегистрацииСчетовФактурНаАванс Экспорт;
Перем мКонецНалоговогоПериода Экспорт;
Перем мКонецНалоговогоПериодаПоДатам Экспорт;

//Пересчет суммы НДС и валютной суммы при изменении суммы регл.
Процедура ПересчетНДСиВалютнойСуммыПоСтроке(ТД, ПересчетВалютнойСуммы = Ложь, СуммаСтарая = 0) Экспорт
	
	ТД.СуммаНДС = 0;
	
	Если ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		ТД.СуммаНДС = ТД.Сумма * 20 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ТД.СуммаНДС = ТД.Сумма * 10 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ТД.СуммаНДС = ТД.Сумма * 18 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		ТД.СуммаНДС = ТД.Сумма * 20 / 120;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ТД.СуммаНДС = ТД.Сумма * 10 / 110;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ТД.СуммаНДС = ТД.Сумма * 18 / 118;
	КонецЕсли;
	
	Если ПересчетВалютнойСуммы = Истина тогда 
		Если ТД.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			ТД.ВалютнаяСумма = ТД.Сумма;
		Иначе
			ТД.ВалютнаяСумма = ?(НЕ ЗначениеЗаполнено(СуммаСтарая) , 0, ТД.ВалютнаяСумма * ТД.Сумма / СуммаСтарая);
		КонецЕсли;
	КонецЕсли; 
	СуммаСтарая = ТД.Сумма;
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Запонить" в диалоге формы
// Реализует алгоритм автоматического заполнения документа.
//
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "") Экспорт
	
	ТаблицаРезультатов = Список.ВыгрузитьКолонки();
	
	ЗаполнитьСтрокиДокумента(ТаблицаРезультатов);
	
	Список.Загрузить(ТаблицаРезультатов);
	
	Список.Сортировать("Дата Возр");
	
	Если Не (Список.Количество() > 0) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС+" - авансы не обнаружены"
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Регистрация счетов-фактур на аванс не требуется:"+СтрокаСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокумент()

Процедура ЗаполнитьСтрокиДокумента(ТаблицаРезультатов) Экспорт
	
	мПорядокРегистрацииСчетовФактурНаАванс = УчетНДС.ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(Организация, КонецПериода);
	мКонецНалоговогоПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, КонецПериода);
	мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(КонецПериода), мКонецНалоговогоПериода);
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	
	// По ставке НДС 0% СФ на аванс выписывается по расчетной ставке 18/118
	Если НачалоПериода>'20051231' Тогда
		// Регистрация авансов по реализации на экспорт не производится
	Иначе
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	КонецЕсли; 
	
	ТаблицаАвансов = Неопределено;
	ИсключаемыеСчетаФактуры = Новый Массив;			

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ТекущийПорядокРегистрацииСчетовФактурНаАванс", мПорядокРегистрацииСчетовФактурНаАванс);
	Запрос.УстановитьПараметр("КонецНалоговогоПериода", УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, КонецПериода));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	ТекущийПериод = КонецДня(НачалоПериода);
	
	// {{KM WARE Акулов А.И. 07.07.2015 начало
	// формируем список исключаемых документов (исключаем те, по которым ранее уже быи созданы счет-фактуры на аванс)
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	ЗапросИскл = Новый Запрос;
	ЗапросИскл.Текст = 
	"ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК ДокументОснование
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетФактура ССЫЛКА Документ.ДокументРасчетовСКонтрагентом) КАК НДСсАвансовОстатки
	|ГДЕ
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура";
	
	ЗапросИскл.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(ТекущийПериод), ВидГраницы.Включая));
	ЗапросИскл.УстановитьПараметр("Организация",	Организация);
	
	РезультатЗапросаИсключаемые = ЗапросИскл.Выполнить().Выгрузить();
	ИсключаемыеАвансыПоАвизо     = РезультатЗапросаИсключаемые.ВыгрузитьКолонку("ДокументОснование");
	// }}KM WARE Акулов А.И. 07.07.2015 окончание
	
	Пока ТекущийПериод <= КонецДня(КонецПериода) Цикл
	
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(ТекущийПериод), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ТекущийПериод", ТекущийПериод);
		Запрос.УстановитьПараметр("ИсключаемыеСчетаФактуры", ИсключаемыеСчетаФактуры);
		// {{KM WARE Акулов А.И. 07.07.2015 начало
		// 
		Запрос.УстановитьПараметр("ИсключаемыеАвансыПоАвизо", ИсключаемыеАвансыПоАвизо);
		// }}KM WARE Акулов А.И. 07.07.2015 окончание
		//++ Задача № 10811 Логинчев А.С. 16.05.2012 12:42:22
		//АБС ВСТАВКА 45301  22.07.2014 15:03:02  Шамов
		//МассивСчетов = Новый Массив;
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.10.2"));
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("63.01"));
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.01.1"));
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.05"));
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.06"));
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.08.1"));
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.09"));
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01"));
		//Запрос.УстановитьПараметр("МассивСчетовИсключений",МассивСчетов);
		Запрос.УстановитьПараметр("МассивСчетовИсключений", абс_МассивСчетовИсключений.ВыгрузитьКолонку("Счет"));
		//АБС ВСТАВКА 45301 КОНЕЦ
		//-- Задача № 10811 Логинчев А.С.
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.Организация КАК Организация,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.Контрагент КАК Контрагент,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.Документ КАК ДокументОснование,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
			
			//АБС+ 9696
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.СуммаРегОстаток КАК СуммаАванса,
			//|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.Документ.СуммаДокумента КАК СуммаАванса,
			//АБС- 9696
			
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.СуммаВзаиморасчетовОстаток КАК ВалютнаяСуммаАванса,
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
			|	НАЧАЛОПЕРИОДА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.ДатаОплаты, ДЕНЬ) КАК ДокументАвансаДата,
			|	ВЫБОР
			|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка)
			|			ТОГДА &ТекущийПорядокРегистрацииСчетовФактурНаАванс
			|		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору
			|	КОНЕЦ КАК ПорядокРегистрацииСчетовФактурНаАванс,
			|	&ТекущийПериод КАК ДатаВыписки,
			|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.ДатаОплаты, ДЕНЬ), КОНЕЦПЕРИОДА(&ТекущийПериод, ДЕНЬ), ДЕНЬ) КАК Разность
			|ПОМЕСТИТЬ Расчеты
			|ИЗ
			|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки(
			|			&КонецПериода,
			|			Организация = &Организация
			//++ Задача № 10811 Логинчев А.С. 16.05.2012 12:44:32
			|				И (НЕ СчетОплаты В (&МассивСчетовИсключений))
			//-- Задача № 10811 Логинчев А.С.
			|				И (НЕ Документ В (&ИсключаемыеСчетаФактуры))
			// {{KM WARE Акулов А.И. 07.07.2015 начало
			|				И (НЕ Документ В (&ИсключаемыеАвансыПоАвизо))
			// }}KM WARE Акулов А.И. 07.07.2015 окончание
			|				И (НЕ Документ ССЫЛКА Документ.ОтчетКомиссионераОПродажах)
			|				И ВЫБОР
			|					КОГДА ЕСТЬNULL(Документ.ДокументОснование, НЕОПРЕДЕЛЕНО) ССЫЛКА Документ.ВводНачальныхОстатковНДС
			|						ТОГДА Документ.ДокументОснование = ЗНАЧЕНИЕ(Документ.ВводНачальныхОстатковНДС.ПустаяСсылка)
			|					ИНАЧЕ ИСТИНА
			|				КОНЕЦ
			|				И (НЕ ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки
			|ГДЕ
			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОборотыОстатки.СуммаВзаиморасчетовОстаток > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Расчеты.Организация,
			|	Расчеты.Контрагент,
			|	Расчеты.ДоговорКонтрагента,
			|	Расчеты.ДокументОснование,
			|	Расчеты.ВалютаРасчетов,
			|	Расчеты.СуммаАванса,
			|	Расчеты.ВалютнаяСуммаАванса,
			|	Расчеты.РасчетыВУсловныхЕдиницах,
			|	Расчеты.ДокументАвансаДата КАК ДокументАвансаДата,
			|	Расчеты.ПорядокРегистрацииСчетовФактурНаАванс,
			|	Расчеты.ДатаВыписки,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСНалоговыйПериод, ВЫБОР
			|					КОГДА Расчеты.ДокументАвансаДата < ДАТАВРЕМЯ(2008, 1, 1)
			|						ТОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
			|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
			|				КОНЕЦ) = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
			|			ТОГДА КОНЕЦПЕРИОДА(Расчеты.ДокументАвансаДата, КВАРТАЛ)
			|		ИНАЧЕ КОНЕЦПЕРИОДА(Расчеты.ДокументАвансаДата, МЕСЯЦ)
			|	КОНЕЦ КАК КонецНалоговогоПериода
			|ИЗ
			|	Расчеты КАК Расчеты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
			|		ПО (УчетнаяПолитикаОрганизаций.Организация = Расчеты.Организация)
			|			И (УчетнаяПолитикаОрганизаций.Период В
			|				(ВЫБРАТЬ
			|					МАКСИМУМ(УчетнаяПолитикаОрганизаций.Период) КАК Период
			|				ИЗ
			|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
			|				ГДЕ
			|					ЕСТЬNULL(НАЧАЛОПЕРИОДА(Расчеты.ДокументАвансаДата, ДЕНЬ), &ТекущийПериод) >= УчетнаяПолитикаОрганизаций.Период
			|					И УчетнаяПолитикаОрганизаций.Организация = Расчеты.Организация))
			|ГДЕ
			|	ВЫБОР 
			|			КОГДА Расчеты.ПорядокРегистрацииСчетовФактурНаАванс = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы)
			|				ТОГДА ИСТИНА
			|			КОГДА Расчеты.ПорядокРегистрацииСчетовФактурНаАванс = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.НеРегистрироватьСчетаФактурыНаАвансы)
			|				ТОГДА ЛОЖЬ
			|			КОГДА Расчеты.ПорядокРегистрацииСчетовФактурНаАванс = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней)
			|				ТОГДА КОНЕЦПЕРИОДА(&ТекущийПериод, ДЕНЬ) >= ВЫБОР
			|							КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСНалоговыйПериод, ВЫБОР
			|										КОГДА Расчеты.ДокументАвансаДата < ДАТАВРЕМЯ(2008, 1, 1)
			|											ТОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
			|										ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
			|									КОНЕЦ) = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
			|								ТОГДА КОНЕЦПЕРИОДА(Расчеты.ДокументАвансаДата, КВАРТАЛ)
			|							ИНАЧЕ КОНЕЦПЕРИОДА(Расчеты.ДокументАвансаДата, МЕСЯЦ)
			|						КОНЕЦ
			|						ИЛИ Расчеты.Разность >= 4
			|			КОГДА Расчеты.ПорядокРегистрацииСчетовФактурНаАванс = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца)
			|				ТОГДА КОНЕЦПЕРИОДА(&ТекущийПериод, ДЕНЬ) >= КОНЕЦПЕРИОДА(&ТекущийПериод, МЕСЯЦ)
			|			КОГДА Расчеты.ПорядокРегистрацииСчетовФактурНаАванс = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода)
			|				ТОГДА КОНЕЦПЕРИОДА(&ТекущийПериод, ДЕНЬ) >= ВЫБОР
			|						КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСНалоговыйПериод, ВЫБОР
			|									КОГДА Расчеты.ДокументАвансаДата < ДАТАВРЕМЯ(2008, 1, 1)
			|										ТОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
			|									ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
			|								КОНЕЦ) = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
			|							ТОГДА КОНЕЦПЕРИОДА(Расчеты.ДокументАвансаДата, КВАРТАЛ)
			|						ИНАЧЕ КОНЕЦПЕРИОДА(Расчеты.ДокументАвансаДата, МЕСЯЦ)
			|					КОНЕЦ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументАвансаДата";
		
		Если Структура_ТипыДокументовАванса.Количество()>0 Тогда
			ОграничениеТиповДокументов = "";
			
			Для каждого ТипДокументовАванса Из Структура_ТипыДокументовАванса Цикл
				ОграничениеТиповДокументов = ОграничениеТиповДокументов+?(ПустаяСтрока(ОграничениеТиповДокументов)," И ( "," ИЛИ ")+"Документ ссылка Документ." + ТипДокументовАванса.Ключ;
			КонецЦикла; 
			
			ОграничениеТиповДокументов = ОграничениеТиповДокументов+") ";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"И (НЕ Документ ССЫЛКА Документ.ОтчетКомиссионераОПродажах)", "И (НЕ Документ ССЫЛКА Документ.ОтчетКомиссионераОПродажах) "+ ОграничениеТиповДокументов);
		КонецЕсли; 
		
		Результат = Запрос.Выполнить();
		
		ТаблицаАвансовТекущая = Результат.Выгрузить();
		ТаблицаАвансовТекущая.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
		ОпределитьРанееВыписанныеСчетаФактуры(ТаблицаАвансовТекущая);
		
		Если ТаблицаАвансов = Неопределено Тогда
			ТаблицаАвансов = ТаблицаАвансовТекущая.СкопироватьКолонки();
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из ТаблицаАвансовТекущая Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура)
				Или КонецДня(СтрокаТаблицы.ДатаВыписки) = КонецДня(ТекущийПериод) Тогда
				НоваяСтрока = ТаблицаАвансов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		ИсключаемыеСчетаФактуры = ТаблицаАвансов.ВыгрузитьКолонку("ДокументОснование");
		
		ТекущийПериод = ТекущийПериод + 86400;
		
	КонецЦикла;
	
	НомерСтроки = 1;
	
	Если ТаблицаАвансов <> Неопределено 
		И ТаблицаАвансов.Количество() <> 0 Тогда
		
		Для Каждого Выборка Из ТаблицаАвансов Цикл
			
			мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(Выборка.ДокументАвансаДата), Выборка.КонецНалоговогоПериода);
			
			ДокАванса = Выборка.ДокументОснование;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ВалютаРасчетов) или Выборка.РасчетыВУсловныхЕдиницах Тогда
				//Незаполненное значение приравнивается к валюте регл. учета
				ВалютаДокумента = мВалютаРегламентированногоУчета;	
			Иначе
				ВалютаДокумента = Выборка.ВалютаРасчетов;     
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ДокАванса) 
				И ДокАванса.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено 
				Тогда
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.ЗаказПокупателя"));
				
				Для Каждого СтрПлатежа Из ДокАванса.РасшифровкаПлатежа Цикл
					Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента Тогда
						Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
							ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
						Иначе
							ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
						КонецЕсли; 
						СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
						СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
						СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
						СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.СуммаПлатежа;
						СтрокаПоСтавке.СчетНаОплату = СтрПлатежа.Сделка;
					КонецЕсли;
				КонецЦикла;
				
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату","Сумма,ВалютнаяСумма");
				
				//Распределение суммы рег учета
				МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если не МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 
				
				//Распределение валютной суммы
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
					Если не МассивСумм = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				Иначе
					МассивСуммВал = ttk_ОбщегоНазначения.РаспределитьПропорционально(Выборка.ВалютнаяСуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("ВалютнаяСумма"));
					Если не МассивСуммВал = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСуммВал,"ВалютнаяСумма");
					Иначе
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				КонецЕсли; 
				
				Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
					
					Если Выборка.ДокументАвансаДата >= '20060101' 
						И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						// НДС с авансов под экспортные поставки не начисляется с 2006 года
						Продолжить;
					ИначеЕсли Выборка.ДокументАвансаДата >= '20080101' 
						И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
						// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
						Продолжить;
					КонецЕсли;
					
					СтрокаТП = ТаблицаРезультатов.Добавить();
					СтрокаТП.НомерСтроки		= НомерСтроки;
					СтрокаТП.Дата				= Выборка.ДатаВыписки;
					СтрокаТП.ДатаДокументаОснования	= Выборка.ДокументАвансаДата;
					СтрокаТП.Контрагент			= Выборка.Контрагент;
					СтрокаТП.ДоговорКонтрагента	= Выборка.ДоговорКонтрагента;
					СтрокаТП.ДокументОснование	= Выборка.ДокументОснование;
					СтрокаТП.СчетНаОплату		= СтрокаПоСтавке.СчетНаОплату;
					
					СтрокаТП.ВалютаДокумента	= ВалютаДокумента;
					
					СтрокаТП.Сумма				= СтрокаПоСтавке.Сумма;
					СтрокаТП.ВалютнаяСумма		= СтрокаПоСтавке.ВалютнаяСумма;
					СтрокаТП.СтавкаНДС			= СтрокаПоСтавке.СтавкаНДС;
					СтрокаТП.СчетФактура		= Выборка.СчетФактура;
					СтрокаТП.ПорядокРегистрацииСчетовФактурНаАванс	= Выборка.ПорядокРегистрацииСчетовФактурНаАванс;
					
					ПересчетНДСиВалютнойСуммыПоСтроке(СтрокаТП);
					ПроверитьДатуВыпискиПоСтроке(СтрокаТП);
					
					НомерСтроки = НомерСтроки + 1;
					
				КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
			Иначе // Если ЗначениеЗаполнено(ДокАванса) И ДокАванса.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
				
				СтрокаТП = ТаблицаРезультатов.Добавить();
				СтрокаТП.НомерСтроки		= НомерСтроки;
				СтрокаТП.Дата				= Выборка.ДатаВыписки;
				СтрокаТП.ДатаДокументаОснования	= Выборка.ДокументАвансаДата;
				СтрокаТП.Контрагент			= Выборка.Контрагент;
				СтрокаТП.ДоговорКонтрагента	= Выборка.ДоговорКонтрагента;
				СтрокаТП.ДокументОснование	= Выборка.ДокументОснование;
				
				СтрокаТП.ВалютаДокумента	= ВалютаДокумента;
				
				СтрокаТП.Сумма				= Выборка.СуммаАванса;
				СтрокаТП.СтавкаНДС			= Перечисления.СтавкиНДС.НДС18_118;
				
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
					СтрокаТП.ВалютнаяСумма	= СтрокаТП.Сумма;
				Иначе
					СтрокаТП.ВалютнаяСумма	= Выборка.ВалютнаяСуммаАванса;
				КонецЕсли;
				СтрокаТП.СчетФактура		= Выборка.СчетФактура;
				СтрокаТП.ПорядокРегистрацииСчетовФактурНаАванс	= Выборка.ПорядокРегистрацииСчетовФактурНаАванс;
				
				ПересчетНДСиВалютнойСуммыПоСтроке(СтрокаТП);
				ПроверитьДатуВыпискиПоСтроке(СтрокаТП);
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЕсли; //Если ЗначениеЗаполнено(ДокАванса) И ДокАванса.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			
		КонецЦикла; // Пока Выборка.Следующий() Цикл
	КонецЕсли;
	
	ОпределитьНаличиеНереализованныхОтгрузок(ТаблицаРезультатов);
	
	// Далее нужно учесть оплаты товаров, переданных на комиссию
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
		|	НАЧАЛОПЕРИОДА(ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата, ДЕНЬ) КАК ДокументАвансаДата,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата КАК ДатаВыписки,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка КАК ДокументОснование,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.Сумма + ВЫБОР
		|			КОГДА ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.СуммаВключаетНДС = ИСТИНА
		|				ТОГДА 0
		|			ИНАЧЕ ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС) КАК СуммаНДС,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Сделка КАК СчетНаОплату
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.ДенежныеСредства КАК ОтчетКомиссионераОПродажахДенежныеСредства
		|ГДЕ
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Организация = &Организация
		|	И ОтчетКомиссионераОПродажахДенежныеСредства.ВидОтчетаПоПлатежам = ЗНАЧЕНИЕ(Перечисление.ВидыОтчетовПоПлатежамКомиссия.Аванс)
		|	И ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() Тогда
		
		ТаблицаАвансов = Результат.Выгрузить();
		ТаблицаАвансов.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
		
		ОпределитьРанееВыписанныеСчетаФактуры(ТаблицаАвансов);
			
		Для Каждого Выборка Из ТаблицаАвансов Цикл
			Если Выборка.ДатаВыписки >= '20060101' 
				и Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				// НДС с авансов под экспортные поставки не начисляется
				Продолжить;
			ИначеЕсли Выборка.ДатаВыписки >= '20080101' 
				И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
				Продолжить;
			КонецЕсли;
			
			СтрокаТП = ТаблицаРезультатов.Добавить();
			СтрокаТП.Дата = Выборка.ДатаВыписки;
			СтрокаТП.ДатаДокументаОснования	= Выборка.ДокументАвансаДата;
			СтрокаТП.Контрагент = Выборка.Контрагент;
			СтрокаТП.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			СтрокаТП.СчетНаОплату = Выборка.СчетНаОплату;
			Если СоответствиеСтавок[Выборка.СтавкаНДС] = Неопределено Тогда
				СтрокаТП.СтавкаНДС = Выборка.СтавкаНДС;
			Иначе
				СтрокаТП.СтавкаНДС = СоответствиеСтавок[Выборка.СтавкаНДС];
			КонецЕсли; 
			СтрокаТП.ДокументОснование = Выборка.ДокументОснование;
			
			СтрокаТП.СуммаНДС = Выборка.СуммаНДС;
			Если Не Выборка.РасчетыВУсловныхЕдиницах Тогда
				СтрокаТП.ВалютаДокумента = Выборка.ВалютаВзаиморасчетов;
			Иначе
				СтрокаТП.ВалютаДокумента = мВалютаРегламентированногоУчета;
			КонецЕсли;
			СтрокаТП.ВалютнаяСумма = Выборка.Сумма;
			Если не Выборка.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
				СтрокаТП.Сумма	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
														Выборка.ВалютаВзаиморасчетов,
														мВалютаРегламентированногоУчета,
														Выборка.КурсВзаиморасчетов, 1,
														Выборка.КратностьВзаиморасчетов, 1);
			Иначе
				СтрокаТП.Сумма	= Выборка.Сумма;
			КонецЕсли;
			СтрокаТП.СчетФактура		= Выборка.СчетФактура;
			
			ПересчетНДСиВалютнойСуммыПоСтроке(СтрокаТП);
			ПроверитьДатуВыпискиПоСтроке(СтрокаТП);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьНаличиеНереализованныхОтгрузок(ТаблицаАвансов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	ХозрасчетныйОстатки.Субконто1 КАК Покупатель,
	               	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Документ.РеализацияТоваровУслуг).ДоговорКонтрагента КАК ДоговорКонтрагента
	               	|ИЗ
	               	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               	|			&Период,
	               	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке),
	               	|			,
	               	|			Организация = &Организация
	               	|				И Субконто2 ССЫЛКА Документ.РеализацияТоваровУслуг
	               	|				И Субконто1 В (&СписокПокупателей)
	               	|				И ВЫРАЗИТЬ(Субконто2 КАК Документ.РеализацияТоваровУслуг).ДоговорКонтрагента В (&СписокДоговоров)
	               	|				И ВЫРАЗИТЬ(Субконто2 КАК Документ.РеализацияТоваровУслуг).ВидОперации = &ОперацияОтгрузка) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокПокупателей", ТаблицаАвансов.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("СписокДоговоров", ТаблицаАвансов.ВыгрузитьКолонку("ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("ОперацияОтгрузка", Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	
	Сообщить("Некоторые авансы могут быть отнесены к отгрузкам без перехода права собственности, но не отражена реализация в указанном периоде.
			|Возможно по данным суммам аванса не требуется начислять НДС, так как такая оплата не является предварительной для целей НДС:", СтатусСообщения.Важное);

	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		Сообщить("Контрагент <" + СтрокаРезультата.Покупатель + ">, договор <" + СтрокаРезультата.ДоговорКонтрагента + ">", СтатусСообщения.Важное);
	КонецЦикла;		
	
КонецПроцедуры

Процедура ПроверитьДатуВыпискиПоСтроке(СтрокаТаблицы)
	
	КонецНалоговогоПериода = ПолучитьКонецНалоговогоПериодаПоДате(СтрокаТаблицы.ДатаДокументаОснования);
	
	Если СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы 
		И (СтрокаТаблицы.Дата > КонецНалоговогоПериода
		Или СтрокаТаблицы.Дата - СтрокаТаблицы.ДатаДокументаОснования > 4 * 86400) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + Формат(?(СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400 > КонецНалоговогоПериода, КонецНалоговогоПериода, СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400), "ДФ=dd.MM.yyyy"), , , СтатусСообщения.Обычное);
	ИначеЕсли СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней 
		И (КонецМесяца(СтрокаТаблицы.Дата) > КонецМесяца(КонецНалоговогоПериода)
		Или СтрокаТаблицы.Дата - СтрокаТаблицы.ДатаДокументаОснования > 4 * 86400) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + ?(КонецМесяца(СтрокаТаблицы.ДатаДокументаОснования) > КонецМесяца(КонецНалоговогоПериода), 
																																							Формат(КонецНалоговогоПериода, "ДФ=dd.MM.yyyy"), Формат(СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400, "ДФ=dd.MM.yyyy")), , , СтатусСообщения.Обычное);
	ИначеЕсли СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца 
		И КонецМесяца(СтрокаТаблицы.Дата) > КонецМесяца(СтрокаТаблицы.ДатаДокументаОснования) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + Формат(КонецМесяца(СтрокаТаблицы.ДатаДокументаОснования), "ДФ=dd.MM.yyyy"), , , СтатусСообщения.Обычное);
	ИначеЕсли СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода 
		И КонецМесяца(СтрокаТаблицы.Дата) > КонецМесяца(КонецНалоговогоПериода) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + Формат(КонецНалоговогоПериода, "ДФ=dd.MM.yyyy"), , , СтатусСообщения.Обычное);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьРанееВыписанныеСчетаФактуры(ТаблицаАвансов)
	
	Если ТаблицаАвансов.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетФактураВыданный.Ссылка КАК СчетФактура,
			|	СчетФактураВыданный.Дата КАК ДатаВыписки,
			|	СчетФактураВыданный.ДоговорКонтрагента,
			|	СчетФактураВыданный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование В(&ДокументыОснования)
			|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
			|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ДокументыОснования", ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаАвансов.ВыгрузитьКолонку("ДокументОснование"), Истина));
		
		СФПоДокументам = Запрос.Выполнить().Выгрузить();
		
		Если СФПоДокументам.Количество()>0 Тогда
			
			СтруктураОтбора = Новый Структура("ДокументОснование, ДоговорКонтрагента");
			Для Каждого СФ Из СФПоДокументам Цикл
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, СФ);
				СтрокиОтбора = ТаблицаАвансов.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
					СтрокаОтбора.СчетФактура = СФ.СчетФактура;
					СтрокаОтбора.ДатаВыписки = СФ.ДатаВыписки;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСчетаФактуры(НеиспользуемыеСчетаФактуры, ЕстьОшибки = ложь) Экспорт
	
	Список.Сортировать("Дата Возр");
	
	ИспользоватьРанееОбнаруженныеДокументы = (НеиспользуемыеСчетаФактуры.Количество()>0);
	
	ПустаяСсылкаСФ = Новый(Тип("ДокументСсылка.СчетФактураВыданный"));
	////////////////////////////////////////////////////////////////////////////
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	СписокСФ = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("СчетФактура"),Истина);
	Для каждого СчФ Из СписокСФ Цикл
		Если СчФ = ПустаяСсылкаСФ Тогда
			Продолжить;
		Иначе
			СчФ = СчФ.Ссылка.ПолучитьОбъект();
			СчФ.УстановитьПометкуУдаления(Истина);
		КонецЕсли; 
	КонецЦикла; 
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	////////////////////////////////////////////////////////////////////////////
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойОтветственный");
	
	МассивДокументов = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("ДокументОснование"));
	МассивДоговоров = Новый Массив;
	
	СтруктураОтбораДокумент = Новый Структура("ДокументОснование");
	СтруктураОтбораДоговор = Новый Структура("ДокументОснование, ДоговорКонтрагента");
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");			
		
	Для Каждого Документ Из МассивДокументов Цикл
		//АБС ВСТАВКА 21.03.2014 15:50:36  Попов
		ВремяНачала = абс_БСПОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(Справочники.абс_БСПКлючевыеОперации.РегистрацияСчетФактурНаАванс_СозданиеДокумента);
		//\\АБС ВСТАВКА 21.03.2014 15:50:36  Попов
		СтруктураОтбораДокумент.ДокументОснование = Документ;
		СтрокиПоДокументу = Список.НайтиСтроки(СтруктураОтбораДокумент);
		
		МассивДоговоров.Очистить();
		Для Каждого СтрокаОтбора Из СтрокиПоДокументу Цикл
			МассивДоговоров.Добавить(СтрокаОтбора.ДоговорКонтрагента);
		КонецЦикла;
		МассивДоговоров = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров);
		ТЧАвансыСтарые = Новый Соответствие;
		
		Для Каждого Договор Из МассивДоговоров Цикл
			СтруктураОтбораДоговор.ДокументОснование = Документ;
			СтруктураОтбораДоговор.ДоговорКонтрагента = Договор;
			СтрокиПоДоговору = Список.НайтиСтроки(СтруктураОтбораДоговор);
			
			СчФ = Неопределено;
			ТЧАвансыСтарые.Очистить();
			
			ОшибкаФормирования = Ложь;
			
			Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
				
				Если СчФ = Неопределено Тогда
					// Создать/использовать Счет-фактуру
					Если не СтрокаОтбораДоговор.СчетФактура = ПустаяСсылкаСФ Тогда
						СчФ = СтрокаОтбораДоговор.СчетФактура.ПолучитьОбъект();
						Если ТЧАвансыСтарые[СчФ] = Неопределено Тогда
							ТЧАвансыСтарые.Вставить(СчФ, СчФ.Авансы.Выгрузить());
						КонецЕсли;
					ИначеЕсли ИспользоватьРанееОбнаруженныеДокументы тогда
						СчФ = НеиспользуемыеСчетаФактуры.Найти(Ложь,"Использован");
						Если СчФ = Неопределено Тогда
							ИспользоватьРанееОбнаруженныеДокументы = Ложь;
							СчФ  = Документы.СчетФактураВыданный.СоздатьДокумент();
						Иначе
							СчФ.Использован = Истина;
							СчФ = СчФ.Ссылка.ПолучитьОбъект();
						КонецЕсли;
					Иначе
						СчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
						СчФ.Ответственный = Ответственный;
						
					КонецЕсли; 
					ЗаполнитьЗначенияСвойств(СчФ, СтрокаОтбораДоговор);

					СчФ.Организация = Организация;
					СчФ.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс;
					СчФ.Под0 = Ложь;
					СчФ.СформированПриВводеНачальныхОстатковНДС = Ложь;
					СчФ.УстановитьКодВидаОперации();  //АБС-Пр2 с 01.04.2012 контроль при проведении сч.ф. коду вида операции

					СчФ.ДокументыОснования.Очистить();
					СчФ.ДокументыОснования.Добавить().ДокументОснование = СтрокаОтбораДоговор.ДокументОснование;
					СчФ.СуммаДокумента = СтрокаОтбораДоговор.ВалютнаяСумма;
					СчФ.Авансы.Очистить();

					СчФ.ПометкаУдаления = Ложь;
					СчФ.УстановитьВремя(РежимАвтоВремя.Последним);
					//++ Задача № 10893 Логинчев А.С. 17.05.2012 16:14:13
					СчФ.Выставлен = Истина;
					СчФ.ДатаВыставления = СчФ.Дата;
					//-- Задача № 10893 Логинчев А.С.
					ТипОснования = ТипЗнч(СтрокаОтбораДоговор.ДокументОснование);
					
					СчФ.ДатаНомерДокументовОплаты.Очистить();
					
					Если ТипОснования = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")

						или ТипОснования = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
						СчФ.НомерПлатежноРасчетногоДокумента = СчФ.ДокументОснование.НомерВходящегоДокумента;
						СчФ.ДатаПлатежноРасчетногоДокумента =  СчФ.ДокументОснование.ДатаВходящегоДокумента;
						
					ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
						Или ТипОснования = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное") Тогда
						СчФ.НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(СчФ.ДокументОснование);
						СчФ.ДатаПлатежноРасчетногоДокумента =  СчФ.ДокументОснование.Дата;
					Иначе
						СчФ.НомерПлатежноРасчетногоДокумента = "";
						СчФ.ДатаПлатежноРасчетногоДокумента =  Неопределено;
					КонецЕсли;
					
					СтрокаПРД = СчФ.ДатаНомерДокументовОплаты.Добавить();
					СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= СчФ.ДатаПлатежноРасчетногоДокумента;
					СтрокаПРД.НомерПлатежноРасчетногоДокумента	= СчФ.НомерПлатежноРасчетногоДокумента;
				Иначе
					СчФ.Сумма = СчФ.Сумма + СтрокаОтбораДоговор.Сумма;
					СчФ.СуммаНДС = СчФ.СуммаНДС + СтрокаОтбораДоговор.СуммаНДС;
					СчФ.СуммаДокумента = СчФ.СуммаДокумента + СтрокаОтбораДоговор.ВалютнаяСумма;
				КонецЕсли;
				
				СуммаПоСтроке = СтрокаОтбораДоговор.Сумма;
				СуммаНДСПоСтроке = СтрокаОтбораДоговор.СуммаНДС;
				СтавкаНДСПоСтроке = СтрокаОтбораДоговор.СтавкаНДС;
				Если ЗначениеЗаполнено(СтрокаОтбораДоговор.СчетНаОплату) Тогда
					ТаблицаАвансов = СчФ.ПолучитьТаблицуАвансовПоСчетуНаОплату(СуммаПоСтроке, СуммаНДСПоСтроке, СтавкаНДСПоСтроке, СтрокаОтбораДоговор.СчетНаОплату);
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаАвансов, СчФ.Авансы);
				Иначе
					Если ТЧАвансыСтарые[СчФ] <> Неопределено Тогда
						Для Каждого СтрокаСтарая Из ТЧАвансыСтарые[СчФ] Цикл
							Если СуммаПоСтроке = 0 Тогда
								Прервать;
							КонецЕсли;
							Если СтрокаСтарая.Сумма = 0 Тогда
								Продолжить;
							КонецЕсли;
							Если СтрокаОтбораДоговор.СтавкаНДС = СтрокаСтарая.СтавкаНДС Тогда
								НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
								НоваяСтрокаПоСуммам.Номенклатура = СтрокаСтарая.Номенклатура;
								НоваяСтрокаПоСуммам.Содержание = СтрокаСтарая.Содержание;
								НоваяСтрокаПоСуммам.Сумма = Мин(СуммаПоСтроке, СтрокаСтарая.Сумма);
								НоваяСтрокаПоСуммам.СуммаНДС = Мин(СуммаНДСПоСтроке, СтрокаСтарая.СуммаНДС);
								НоваяСтрокаПоСуммам.СтавкаНДС = СтрокаОтбораДоговор.СтавкаНДС;
								СуммаПоСтроке = СуммаПоСтроке - НоваяСтрокаПоСуммам.Сумма;
								СуммаНДСПоСтроке = СуммаНДСПоСтроке - НоваяСтрокаПоСуммам.СуммаНДС;
								СтрокаСтарая.Сумма = СтрокаСтарая.Сумма - НоваяСтрокаПоСуммам.Сумма;
								СтрокаСтарая.СуммаНДС = СтрокаСтарая.СуммаНДС - НоваяСтрокаПоСуммам.СуммаНДС;								
							КонецЕсли;
						КонецЦикла;
						Если СуммаПоСтроке <> 0 Тогда
							НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
							НоваяСтрокаПоСуммам.Сумма = СуммаПоСтроке;
							НоваяСтрокаПоСуммам.СуммаНДС = СуммаНДСПоСтроке;
							НоваяСтрокаПоСуммам.СтавкаНДС = СтрокаОтбораДоговор.СтавкаНДС;
							НоваяСтрокаПоСуммам.Номенклатура = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс;
						КонецЕсли;
					Иначе
						НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПоСуммам, СтрокаОтбораДоговор);
						НоваяСтрокаПоСуммам.Номенклатура = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс;
					КонецЕсли;					
				КонецЕсли;

			КонецЦикла;
			
			СообщениеОбОшибке = СчФ.ПроверитьВозможностьЗаписиСФ(ОшибкаФормирования);
			Если ОшибкаФормирования Тогда
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Строка "+Строка(СтрокаОтбораДоговор.НомерСтроки)+", не выписан счет-фактура на аванс."+Символы.ПС+СообщениеОбОшибке);
					СтрокаОтбораДоговор.СФсформирован = ложь;
					СтрокаОтбораДоговор.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
				Продолжить;
			КонецЕсли; 
				
			Попытка
				НовыйСФ = СчФ.ЭтоНовый();
				СчФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					Сообщить(?(НовыйСФ,"Выписан","Обновлен")+" счет-фактура на аванс по строке "+Строка(СтрокаОтбораДоговор.НомерСтроки)+" № " + СчФ.Номер + " от " + СчФ.Дата);
					СтрокаОтбораДоговор.СФсформирован = истина;
					СтрокаОтбораДоговор.СчетФактура = СчФ.Ссылка;
				КонецЦикла;
			Исключение
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					ttk_ОбщегоНазначения.СообщитьОбОшибке(?(НовыйСФ,"Не выписан","Не обновлен")+" счет-фактура на аванс по строке "+Строка(СтрокаОтбораДоговор.НомерСтроки));
					СтрокаОтбораДоговор.СФсформирован = ложь;
					СтрокаОтбораДоговор.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
			КонецПопытки;
			
		КонецЦикла;
		//АБС ВСТАВКА 21.03.2014 15:50:36  Попов

		абс_БСПОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.абс_БСПКлючевыеОперации.РегистрацияСчетФактурНаАванс_СозданиеДокумента,ВремяНачала);
		
		//\\АБС ВСТАВКА 21.03.2014 15:50:36  Попов

	КонецЦикла;

КонецПроцедуры

Функция ОпределитьНаличиеНеиспользуемыхСчетовФактурЗаПериод() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СчетФактураВыданный.Организация = &Организация
	|	И (НЕ СчетФактураВыданный.Ссылка В (&СФдляОбновления))
	|	И (НЕ СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Номер";

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("СФдляОбновления", ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("СчетФактура"),Истина));

	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;

КонецФункции // ОпределитьНаличиеНеиспользуемыхъСчетовФактурЗаПериод()

Функция ПолучитьКонецНалоговогоПериодаПоДате(ДатаПериода) Экспорт
	
	Если мКонецНалоговогоПериодаПоДатам[КонецМесяца(ДатаПериода)] = Неопределено Тогда
		мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(ДатаПериода), УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, ДатаПериода));
	КонецЕсли;
	
	Возврат мКонецНалоговогоПериодаПоДатам[КонецМесяца(ДатаПериода)];
	
КонецФункции

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

Массив_ТипыДокументовАванса = Метаданные.РегистрыНакопления.НДСсАвансов.Измерения.СчетФактура.Тип.Типы();
ОписаниеТипов_ДокументыРасчетовСПокупателями = Метаданные.РегистрыНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Измерения.Документ.Тип;
Структура_ТипыДокументовАванса = Новый Структура();
Для каждого ТипДокументаАванса Из Массив_ТипыДокументовАванса Цикл
	Если ТипДокументаАванса = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") тогда
		Продолжить;
	ИначеЕсли ОписаниеТипов_ДокументыРасчетовСПокупателями.СодержитТип(ТипДокументаАванса) Тогда
		Структура_ТипыДокументовАванса.Вставить(Метаданные.НайтиПоТипу(ТипДокументаАванса).Имя,ТипДокументаАванса);
	КонецЕсли; 
КонецЦикла;

мКонецНалоговогоПериодаПоДатам = Новый Соответствие;
