#Если Клиент Тогда 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОХРАНАНИЯ ДАННЫХ

// Функция выполняет проверку необходимости записи набора записей
//
// Параметры
//  НаборЗаписей  - набор записей регистра сведений, существующие значения
//  ТаблицаЗначенийДляЗаписи - таблица значений с новыми значениями
//  СтрокаОтбора - строка, список полей, разделенных зяпятой, в разрезе которых производится проверка
//					и запись набора записей
//
// Возвращаемое значение:
//   Булево   - Ложь, когда набор записей необходимо было записать, и записать набор не удалось
//
Функция ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗначенийДляЗаписи, СтрокаОтбора) Экспорт

	СтруктураПоиска = Новый Структура(СтрокаОтбора);
	
	НаборЗаписей.Прочитать();
	ТаблицаНаборЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаОтборов = ТаблицаНаборЗаписей.Скопировать(,СтрокаОтбора);
	ТаблицаОтборов.Свернуть(СтрокаОтбора,);
	
	// перепишем данные  во временную таблицу
	ВремТаблицаЗначенийДляЗаписи =  ТаблицаЗначенийДляЗаписи.Скопировать();
	
	Для каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
		ИмяОтбора = ЭлементСтруктуры.Ключ;
		НаборЗаписей.Отбор[ИмяОтбора].Использование = Истина;
	КонецЦикла;

	
	Для каждого СтрокаТЗ Из ТаблицаОтборов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
		ТаблицаНовыеЗначения = ВремТаблицаЗначенийДляЗаписи.Скопировать(СтруктураПоиска);
		НадоЗаписать = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ТаблицаНаборЗаписей.Скопировать(СтруктураПоиска), ТаблицаНовыеЗначения);
		
		Если НадоЗаписать  Тогда
			
			Для каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
				ИмяОтбора = ЭлементСтруктуры.Ключ;
				ЗначениеОтбора = ЭлементСтруктуры.Значение;
				НаборЗаписей.Отбор[ИмяОтбора].Значение = ЗначениеОтбора;
			КонецЦикла;
			
			Если ТаблицаНовыеЗначения.Количество() = 0 Тогда
				НаборЗаписей.Очистить();	
			Иначе
				НаборЗаписей.Загрузить(ТаблицаНовыеЗначения);
			КонецЕсли;	
			
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
				Возврат Ложь
			КонецЕсли;	
			
		КонецЕсли;
		
		// удалим из ВремТаблицаЗначенийДляЗаписи проверенные строки
		МассивСтрок = ВремТаблицаЗначенийДляЗаписи.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТЗ Из МассивСтрок Цикл
			ВремТаблицаЗначенийДляЗаписи.Удалить(СтрокаТЗ);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВремТаблицаЗначенийДляЗаписи.Количество() > 0 Тогда
		// остались сведения, которых не было, запишем
		Для каждого СтрокаТЗ Из ВремТаблицаЗначенийДляЗаписи Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
			ТаблицаНовыеЗначения = ВремТаблицаЗначенийДляЗаписи.Скопировать(СтруктураПоиска);
			
			Для каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
				ИмяОтбора = ЭлементСтруктуры.Ключ;
				ЗначениеОтбора = ЭлементСтруктуры.Значение;
				НаборЗаписей.Отбор[ИмяОтбора].Значение = ЗначениеОтбора;
			КонецЦикла;
			
			НаборЗаписей.Загрузить(ТаблицаНовыеЗначения);
			
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
				Возврат Ложь
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция записывает измененые константы, список констант
// получаетсяиз строковой переменной формы обработки мСтрокаКонстант
//
//  ФормаОбработки - форма обработки
//
// Возвращаемое значение:
//   Булево   - Ложь, когда есть изменные константы, и записать набор констант не удалось
//
Функция ЗаписатьКонстанты(ФормаОбработки) Экспорт

	Если ЗначениеЗаполнено(ФормаОбработки.мСтрокаКонстант) Тогда
		//есть константы, которые могли измениться
		
		// подготовим массив констант, значения которых необходимо записать
		КоллекцияКонстантДляПроверки = Новый Структура(ФормаОбработки.мСтрокаКонстант);
		ЗаполнитьЗначенияСвойств(КоллекцияКонстантДляПроверки, ФормаОбработки);
		МассивИзмененныхКонстант = ОбщегоНазначения.СоздатьМассивИзмененныхКонстант(КоллекцияКонстантДляПроверки);
		
		// запишем изменения
		Если МассивИзмененныхКонстант.Количество() > 0 Тогда
			
			// есть константы, значение которых изменилось, запишем их
			НаборКонстант = Константы.СоздатьНабор(МассивИзмененныхКонстант);
			СтрокаСвойств = "";
			Для каждого Константа Из МассивИзмененныхКонстант Цикл
				СтрокаСвойств = СтрокаСвойств + Константа.Имя + ",";
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(НаборКонстант, ФормаОбработки, СтрокаСвойств);
			
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборКонстант) Тогда
				Возврат Ложь
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Функция записывает изменненые данные в регистры сведений
// АлгоритмыРасчетов, РазмерыПособий, ВычетыНДФЛ
Функция ЗаписатьОбщиеДанные(ФормаОбработки) Экспорт

	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.АлгоритмыРасчетов.Видимость
		и ФормаОбработки.ЭлементыФормы.УдержаниеЗаОтпускУменьшаетНалоги.Доступность Тогда
		
		НадоЗаписать = Ложь;
		
		НаборЗаписей = РегистрыСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.УдержаниеЗаОтпускУменьшаетНалоги 		= ФормаОбработки.УдержаниеЗаОтпускУменьшаетНалоги;
			НоваяЗапись.ПорядокПересчетаМесячнойСтавкиВЧасовую 	= ФормаОбработки.ПорядокПересчетаМесячнойСтавкиВЧасовую;
			НадоЗаписать = Истина;
			
		ИначеЕсли НаборЗаписей[0].УдержаниеЗаОтпускУменьшаетНалоги <> ФормаОбработки.УдержаниеЗаОтпускУменьшаетНалоги
			ИЛИ НаборЗаписей[0].ПорядокПересчетаМесячнойСтавкиВЧасовую <> ФормаОбработки.ПорядокПересчетаМесячнойСтавкиВЧасовую Тогда
			
			НаборЗаписей[0].УдержаниеЗаОтпускУменьшаетНалоги 		= ФормаОбработки.УдержаниеЗаОтпускУменьшаетНалоги;
			НаборЗаписей[0].ПорядокПересчетаМесячнойСтавкиВЧасовую 	= ФормаОбработки.ПорядокПересчетаМесячнойСтавкиВЧасовую;
			НадоЗаписать = Истина;
			
		КонецЕсли;
		
		Если НадоЗаписать Тогда
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
				Возврат Ложь
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраховыеВзносы.Видимость
		и Не ФормаОбработки.ЭлементыФормы.ТарифСтраховыхВзносов.ТолькоПросмотр Тогда
		
		// тарифы страховых взносов
		ТаблицаСведенияОТарифах = ТарифСтраховыхВзносов.Выгрузить();
		ТаблицаСведенияОТарифах.Колонки.Удалить("НомерСтроки");
		
		// получим все сведений о тарифах
		НаборЗаписей = РегистрыСведений.ТарифСтраховыхВзносов.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		
		//проверку необходимости записи будем проверять по каждому году и виду тарифа
		ТаблицаБылиСведенияОТарифах = НаборЗаписей.Выгрузить();
		ТаблицаСочетанияПериодаИВидаТарифа = ТаблицаБылиСведенияОТарифах.Скопировать(,"Период, ВидТарифа");
		ТаблицаСочетанияПериодаИВидаТарифа.Свернуть("Период, ВидТарифа",);
		СтруктураПоиска = Новый Структура("Период, ВидТарифа");
		Для каждого СтрокаТЗ Из ТаблицаСочетанияПериодаИВидаТарифа Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
			ТаблицаНовыеЗначения = ТаблицаСведенияОТарифах.Скопировать(СтруктураПоиска);
			НадоЗаписать = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ТаблицаБылиСведенияОТарифах.Скопировать(СтруктураПоиска), ТаблицаНовыеЗначения);
			
			Если НадоЗаписать Тогда
				
				НаборЗаписей.Отбор.Период.Использование = Истина;
				НаборЗаписей.Отбор.Период.Значение = СтрокаТЗ.Период;
				НаборЗаписей.Отбор.ВидТарифа.Использование = Истина;
				НаборЗаписей.Отбор.ВидТарифа.Значение = СтрокаТЗ.ВидТарифа;
				НаборЗаписей.Загрузить(ТаблицаНовыеЗначения);
				
				Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
					Возврат Ложь
				КонецЕсли;	
				
			КонецЕсли;
			
			// удалим из ТаблицаСведенияОСтавках проверенные строки
			МассивСтрок = ТаблицаСведенияОТарифах.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаТЗ Из МассивСтрок Цикл
				ТаблицаСведенияОТарифах.Удалить(СтрокаТЗ);
			КонецЦикла;
								
		КонецЦикла;
		
		Если ТаблицаСведенияОТарифах.Количество() > 0 Тогда
			// остались сведения, которых не было, запишем
			ТаблицаСочетанияПериодаИВидаТарифа = ТаблицаСведенияОТарифах.Скопировать(,"Период, ВидТарифа");
			ТаблицаСочетанияПериодаИВидаТарифа.Свернуть("Период, ВидТарифа");
			Для каждого СтрокаТЗ Из ТаблицаСочетанияПериодаИВидаТарифа Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
				ТаблицаНовыеЗначения = ТаблицаСведенияОТарифах.Скопировать(СтруктураПоиска);
				НаборЗаписей.Отбор.Период.Использование = Истина;
				НаборЗаписей.Отбор.Период.Значение = СтрокаТЗ.Период;
				НаборЗаписей.Отбор.ВидТарифа.Использование = Истина;
				НаборЗаписей.Отбор.ВидТарифа.Значение = СтрокаТЗ.ВидТарифа;
				НаборЗаписей.Загрузить(ТаблицаНовыеЗначения);
				
				Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
					Возврат Ложь
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		
		
		// ПредельнаяВеличинаБазыСтраховыхВзносов
		СтруктураПоиска = Новый Структура("Период");
		СтруктураПоиска.Вставить("Период", Дата(ФормаОбработки.ПериодПредельнаяВеличинаБазыСтраховыхВзносов,01,01));
		МассивСтрок = ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Размер = ФормаОбработки.ПредельнаяВеличинаБазыСтраховыхВзносов;
		Иначе
			// добавим значение из формы в таблицу
			НоваяСтрока = ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов.Добавить();
			НоваяСтрока.Размер = ФормаОбработки.ПредельнаяВеличинаБазыСтраховыхВзносов;
			НоваяСтрока.Период = Дата(ФормаОбработки.ПериодПредельнаяВеличинаБазыСтраховыхВзносов,01,01);
			ТаблицаЗаписейОграниченияПособия.Сортировать("Период");
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПредельнаяВеличинаБазыСтраховыхВзносов.СоздатьНаборЗаписей();
		Если Не ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов, "Период") Тогда
			Возврат Ложь;	
		КонецЕсли;
		
		// СтраховыеВзносыСкидкиКДоходам
		НаборЗаписей = РегистрыСведений.СтраховыеВзносыСкидкиКДоходам.СоздатьНаборЗаписей();
		Если Не ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейСтраховыеВзносыСкидкиКДоходам, "Период, ВидДохода") Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.РазмерыПособий.Видимость
		и Не ФормаОбработки.ЭлементыФормы.СписокГосударственныеПособия.ТолькоПросмотр Тогда
		
		// максимальные размеры пособий по нетрудоспособности
				
		СтруктураПоиска = Новый Структура("Период");
		СтруктураПоиска.Вставить("Период", ФормаОбработки.ДатаРазмеровОграниченияПособий);
		МассивСтрок = ТаблицаЗаписейОграниченияПособия.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Размер = ФормаОбработки.ПособиеПоВременнойНетрудоспособности;
			МассивСтрок[0].РазмерПоБеременности = ФормаОбработки.ПособиеПоБеременности;
		Иначе
			// добавим значение из формы в таблицу
			НоваяСтрока = ТаблицаЗаписейОграниченияПособия.Добавить();
			НоваяСтрока.Размер = ФормаОбработки.ПособиеПоВременнойНетрудоспособности;
			НоваяСтрока.РазмерПоБеременности = ФормаОбработки.ПособиеПоБеременности;
			НоваяСтрока.Период = ФормаОбработки.ДатаРазмеровОграниченияПособий;
			ТаблицаЗаписейОграниченияПособия.Сортировать("Период");
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.РазмерОграниченияПособияПоНетрудоспособности.СоздатьНаборЗаписей();
		Если Не ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейОграниченияПособия, "Период") Тогда
			Возврат Ложь;	
		КонецЕсли;	
		
		//прочие государственные пособия 
		НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
		Если Не ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейГосударственныеПособия, "Период, ВидПособия") Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.ПрочиеСтавки.Видимость
		и Не ФормаОбработки.ЭлементыФормы.СтавкаРефинансированияЦБ.ТолькоПросмотр Тогда
		
		// Ставка рефинансирования
		СтруктураПоиска = Новый Структура("Период");
		СтруктураПоиска.Вставить("Период", ФормаОбработки.СтавкаРефинансированияЦБДата);
		МассивСтрок = ТаблицаЗаписейСтавкиРефинансированияЦБ.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Размер = ФормаОбработки.СтавкаРефинансированияЦБ;
		Иначе
			// добавим значение из формы в таблицу
			НоваяСтрока = ТаблицаЗаписейСтавкиРефинансированияЦБ.Добавить();
			НоваяСтрока.Размер = ФормаОбработки.СтавкаРефинансированияЦБ;
			НоваяСтрока.Период = ФормаОбработки.СтавкаРефинансированияЦБДата;
			ТаблицаЗаписейСтавкиРефинансированияЦБ.Сортировать("Период");
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.СтавкаРефинансированияЦБ.СоздатьНаборЗаписей();
		Если Не ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейСтавкиРефинансированияЦБ, "Период") Тогда
			Возврат Ложь;	
		КонецЕсли;
		
		// МРОТ
		СтруктураПоиска = Новый Структура("Период");
		СтруктураПоиска.Вставить("Период", ФормаОбработки.МинимальнаяОплатаТрудаРФДата);
		МассивСтрок = ТаблицаЗаписейМРОТ.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Размер = ФормаОбработки.МинимальнаяОплатаТрудаРФ;
		Иначе
			// добавим значение из формы в таблицу
			НоваяСтрока = ТаблицаЗаписейМРОТ.Добавить();
			НоваяСтрока.Размер = ФормаОбработки.МинимальнаяОплатаТрудаРФ;
			НоваяСтрока.Период = ФормаОбработки.МинимальнаяОплатаТрудаРФДата;
			ТаблицаЗаписейМРОТ.Сортировать("Период");
		КонецЕсли; 
		
		НаборЗаписей = РегистрыСведений.МинимальнаяОплатаТрудаРФ.СоздатьНаборЗаписей();
		Если Не ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейМРОТ, "Период") Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.ВычетыНДФЛ.Видимость
		и Не ФормаОбработки.ЭлементыФормы.НДФЛРазмерВычетов.ТолькоПросмотр Тогда
		
		НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
		Если Не ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейНДФЛВычетыПоДоходам, "Период, КодДохода") Тогда
			Возврат Ложь;	
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
		Если Не ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейНДФЛРазмерВычетов, "Период, КодВычета") Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Функция записывает изменненые данные в регистры сведений
// УчетнаяПолитикаПоПерсоналуОрганизаций, УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций, УчетнаяПолитикаНалоговыйУчет
// УчетнаяПолитикаПоЕСН, СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев
Функция ЗаписатьДанныеПоОрганизации(ФормаОбработки) Экспорт

	НадоОбновитьУчетнаяПолитикаПоПерсоналуОрганизации = Ложь;
	НадоОбновитьУчетнаяПолитикаОтраженияЗарплатыВУчете = Ложь;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.КадровыйУчет.Видимость и 
		ФормаОбработки.ЭлементыФормы.ПроверкаШтатногоРасписания.Доступность Тогда
		
		НадоЗаписать = Ложь;
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ФормаОбработки.мУчетнаяПолитикаПоПерсоналуОрганизаций);
		НоваяЗапись.Организация = Организация;

		НаборЗаписейДляПроверки = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписейДляПроверки.Отбор.Организация.Установить(Организация);
		НаборЗаписейДляПроверки.Прочитать();
		НадоЗаписать = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(НаборЗаписейДляПроверки.Выгрузить(), НаборЗаписей.Выгрузить());
				
		Если НадоЗаписать Тогда
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
				Возврат Ложь
			КонецЕсли;	
			НадоОбновитьУчетнаяПолитикаПоПерсоналуОрганизации = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.РасчетЗарплаты.Видимость
		и ФормаОбработки.ЭлементыФормы.ПроверкаПериодовНачисления.Доступность Тогда
		
		НадоЗаписать = Ложь;
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ФормаОбработки.мУчетнаяПолитикаПоРасчетуЗарплаты);
		НоваяЗапись.Организация = Организация;

		НаборЗаписейДляПроверки = РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписейДляПроверки.Отбор.Организация.Установить(Организация);
		НаборЗаписейДляПроверки.Прочитать();
		НадоЗаписать = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(НаборЗаписейДляПроверки.Выгрузить(), НаборЗаписей.Выгрузить());
				
		Если НадоЗаписать Тогда
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
				Возврат Ложь
			КонецЕсли;	
			НадоОбновитьУчетнаяПолитикаПоПерсоналуОрганизации = Истина;
		КонецЕсли;
		
		ТарифПочтовогоСбора = ФормаОбработки.ТарифПочтовогоСбора;
		Если ЗначениеЗаполнено(ТарифПочтовогоСбора) Тогда
			НаборЗаписейПочтовогоСбора = РегистрыСведений.ТарифПочтовогоСбораОрганизации.СоздатьНаборЗаписей();
			НаборЗаписейПочтовогоСбора.Отбор.Организация.Установить(Организация);

			НоваяЗапись = НаборЗаписейПочтовогоСбора.Добавить();
			НоваяЗапись.Организация = Организация;
			НоваяЗапись.Тариф = ТарифПочтовогоСбора;
			
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписейПочтовогоСбора) Тогда
				Возврат Ложь
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	//Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.РасчетЕСН.Видимость Тогда
	//	
	//	// регистр сведений УчетнаяПолитикаПоЕСН
	//	СтруктураПоиска = Новый Структура("Период");
	//	СтруктураПоиска.Вставить("Период", Дата(ФормаОбработки.ПериодЕСН,1,1));
	//	МассивСтрок = ТаблицаЗаписейУчетнаяПолитикаЕСН.НайтиСтроки(СтруктураПоиска);
	//	Если МассивСтрок.Количество() > 0 Тогда 
	//		ЗаполнитьЗначенияСвойств(МассивСтрок[0], ФормаОбработки.мУчетнаяПолитикаНалоговыйУчетИЕСН);
	//	Иначе
	//		// добавим значение из формы в таблицу
	//		НоваяСтрока = ТаблицаЗаписейУчетнаяПолитикаЕСН.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, ФормаОбработки.мУчетнаяПолитикаНалоговыйУчетИЕСН);
	//		НоваяСтрока.Организация = Организация;
	//		НоваяСтрока.Период = Дата(ФормаОбработки.ПериодЕСН,1,1);
	//		ТаблицаЗаписейУчетнаяПолитикаЕСН.Сортировать("Период");
	//	КонецЕсли;
	//	
	//	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Организация.Установить(Организация);
	//	Если Не ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейУчетнаяПолитикаЕСН, "Период") Тогда
	//		Возврат Ложь;	
	//	КонецЕсли;
	//	НадоОбновитьУчетнаяПолитикаОтраженияЗарплатыВУчете = Истина;
	//КонецЕсли;	
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтавкиФССНСиПЗ.Видимость
		и Не ФормаОбработки.ЭлементыФормы.СтавкиФССНС.ТолькоПросмотр Тогда
		
		ТаблицаСтавкиФССНС = СтавкиФССНС.Выгрузить();
		ТаблицаСтавкиФССНС.Колонки.Удалить("НомерСтроки");
		ВремТаблица = ТаблицаСтавкиФССНС.Скопировать();
		ВремТаблица.Свернуть("Организация");
		СтруктураПоиска = Новый Структура("Организация");
		
		Для каждого СтрокаВТ Из ВремТаблица Цикл
			
			СтруктураПоиска = Новый Структура("Организация", СтрокаВТ.Организация);
			МассивСтрок = ТаблицаСтавкиФССНС.НайтиСтроки(СтруктураПоиска);
			ТаблицаСтавкиФССНСПоОрганизации = ТаблицаСтавкиФССНС.Скопировать(МассивСтрок);
			
			// регистр сведений СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев
			НаборЗаписей = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(СтрокаВТ.Организация);
			
			Если Не ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаСтавкиФССНСПоОрганизации, "Период") Тогда
				Возврат Ложь;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.РасчетНДФЛ.Видимость
		и ФормаОбработки.ЭлементыФормы.ОсобенностиИсчисленияНДФЛ.Доступность Тогда
		
		// регистр сведений УчетнаяПолитикаПоЕСН
		СтруктураПоиска = Новый Структура("Период");
		СтруктураПоиска.Вставить("Период", Дата(ФормаОбработки.ПериодНДФЛ,1,1));
		МассивСтрок = ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(МассивСтрок[0], ФормаОбработки.мУчетнаяПолитикаПоНДФЛ);
		Иначе
			// добавим значение из формы в таблицу
			НоваяСтрока = ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ФормаОбработки.мУчетнаяПолитикаПоНДФЛ);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = Дата(ФормаОбработки.ПериодНДФЛ,1,1);
			ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ.Сортировать("Период");
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		Если Не ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ, "Период") Тогда
			Возврат Ложь;	
		КонецЕсли;

	КонецЕсли;
	
	Если НадоОбновитьУчетнаяПолитикаПоПерсоналуОрганизации Тогда
		глЗначениеПеременнойУстановить("глУчетнаяПолитикаПоПерсоналуОрганизации", ОбщегоНазначенияЗК.ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации(), ИСТИНА);
	КонецЕсли;
	
	Если НадоОбновитьУчетнаяПолитикаОтраженияЗарплатыВУчете Тогда
		глЗначениеПеременнойУстановить("УчетнаяПолитикаОтраженияЗарплатыВУчете", РаботаСОбщимиПеременными.ЗаполнениеУчетнойПолитикиНалоговомуУчету(), ИСТИНА);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ 

Процедура ПоказатьИсториюИзмененияСкидкиКДоходамСтраховыеВзносы(Элемент, ФормаОбработки) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат
	Иначе
		ВидДохода = Элемент.ТекущиеДанные.ВидДохода;
		ОткрытьФормуИсторииЗначений(ФормаОбработки, ФормаОбработки.ЭлементыФормы.СтраховыеВзносыСкидкиКДоходам, "СтраховыеВзносыСкидкиКДоходам", "ВидДохода", ВидДохода, "История изменения скидок к доходу: " + ВидДохода, ТаблицаЗаписейСтраховыеВзносыСкидкиКДоходам, Элемент.ТолькоПросмотр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьИсториюИзмененияВычетыНДФЛКДоходам(Элемент, ФормаОбработки) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат
	Иначе
		КодДохода = Элемент.ТекущиеДанные.КодДохода;
		ОткрытьФормуИсторииЗначений(ФормаОбработки, ФормаОбработки.ЭлементыФормы.НДФЛВычетыПоДоходам, "НДФЛВычетыПоДоходам", "КодДохода", КодДохода, "История изменения вычетов к доходу: " + КодДохода, ТаблицаЗаписейНДФЛВычетыПоДоходам, Элемент.ТолькоПросмотр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьИсториюИзмененияВычетыНДФЛ(Элемент, ФормаОбработки) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат
	Иначе
		КодВычета = Элемент.ТекущиеДанные.КодВычета;
		ОткрытьФормуИсторииЗначений(ФормаОбработки, ФормаОбработки.ЭлементыФормы.НДФЛВычетыПоДоходам, "НДФЛРазмерВычетов", "КодВычета", КодВычета, "История изменения вычета:  " + КодВычета, ТаблицаЗаписейНДФЛРазмерВычетов, Элемент.ТолькоПросмотр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает из ИБ новые значения индексируемых государственных
// пособий и обновляет данные в таблицах формы
Процедура ПолучитьРазмерыИндексируемыхГосударственныхПособий() Экспорт 
	
	МассивПособий = Новый Массив;
	МассивПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет);	
	МассивПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет);
	МассивПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет);
	МассивПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.ПриРожденииРебенка);
	МассивПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности);
	
	НаборЗаписейГосударственныеПособия = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
	НаборЗаписейГосударственныеПособия.Прочитать();
	ТаблицаЗаписейИндексируемыеГосударственныеПособия = НаборЗаписейГосударственныеПособия.Выгрузить();
	ТаблицаЗаписейИндексируемыеГосударственныеПособия.Сортировать("ВидПособия,Период");
	
	СтруктураПоиска = Новый Структура("ВидПособия");
	Для каждого ВидПособия Из МассивПособий Цикл
		//удалим данные по этому пособию из таблицы
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("ВидПособия", ВидПособия);
		
		МассивСтрок = СписокГосударственныеПособия.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТЗ Из МассивСтрок Цикл
			СписокГосударственныеПособия.Удалить(СтрокаТЗ);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаЗаписейИндексируемыеГосударственныеПособия.Количество() = 0 Тогда
		
		//Нет данных в ИБ по индексируемым пособиям
		Для каждого ВидПособия Из МассивПособий Цикл
			НоваяСтрока = СписокГосударственныеПособия.Добавить();
			НоваяСтрока.Период = Дата(2007,1,1);
			НоваяСтрока.ВидПособия = ВидПособия;
			НоваяСтрока.Размер = 0;
		КонецЦикла;
		
	Иначе
		
		Для каждого ВидПособия Из МассивПособий Цикл
			СтруктураПоиска.Очистить();
			СтруктураПоиска.Вставить("ВидПособия", ВидПособия);
			МассивСтрок = ТаблицаЗаписейИндексируемыеГосударственныеПособия.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока = СписокГосударственныеПособия.Добавить();
				НоваяСтрока.Период = Дата(2007,1,1);
				НоваяСтрока.ВидПособия = ВидПособия;
				НоваяСтрока.Размер = 0;
			Иначе
				ДатаДействия = Дата(1,1,1);
				Размер = 0;
				Для каждого СтрокаТаблицы Из МассивСтрок Цикл
					Если СтрокаТаблицы.Период > ДатаДействия Тогда
						ДатаДействия = СтрокаТаблицы.Период;
						Размер = СтрокаТаблицы.Размер;
					КонецЕсли;
				КонецЦикла;
				НоваяСтрока = СписокГосударственныеПособия.Добавить();
				НоваяСтрока.Период = ДатаДействия;
				НоваяСтрока.ВидПособия = ВидПособия;
				НоваяСтрока.Размер = Размер;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СписокГосударственныеПособия.Сортировать("ВидПособия,Период");
	
КонецПроцедуры
	
Функция ПолучитьПредставлениеПериода(ДатаПериода) Экспорт
	
	ПериодСтрокой = РаботаСДиалогами.ДатаКакМесяцПредставление(ДатаПериода);
	УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ПериодСтрокой, 2, Перечисления.ПолФизическихЛиц.Мужской, ПериодСтрокой);
	Возврат ПериодСтрокой;
	
КонецФункции

Процедура УстановитьЗаголовокНадписьПорядокРасчетаЧасовойСтавки(ФормаОбработки) Экспорт
	
	ТекстЗаголовка = "Пересчет месячного оклада в часовую ставку применяется, например, для расчета оплаты сверхурочных часов." + Символы.ПС;
	Если ФормаОбработки.ПорядокПересчетаМесячнойСтавкиВЧасовую = Перечисления.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоМесячнойНормеВремени Тогда
		ТекстЗаголовка = ТекстЗаголовка + "Часовая ставка будет рассчитана путем деления оклада на количество рабочих часов в месяце по графику работы сотрудника.";	
	ИначеЕсли ФормаОбработки.ПорядокПересчетаМесячнойСтавкиВЧасовую = Перечисления.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце Тогда
		ТекстЗаголовка = ТекстЗаголовка + "Часовая ставка будет рассчитана путем деления оклада на среднее количество часов в месяце за год.";
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + "Часовая ставка будет рассчитана путем деления оклада на количество рабочих часов в месяце по производственному календарю с учетом продолжительности рабочей недели в соответствии с Приказом Минздравсоцразвития России от 13.08.2009 № 588н.";
	КонецЕсли;	
	ФормаОбработки.ЭлементыФормы.НадписьПорядокРасчетаЧасовойСтавки.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры 

Процедура УстановитьЗаголовокНадписьУдержаниеЗаОтпускУменьшаетНалогиИнформация(ФормаОбработки) Экспорт
	
	Если ФормаОбработки.УдержаниеЗаОтпускУменьшаетНалоги Тогда
		ТекстЗаголовка = "Удержание за неотработанный отпуск при увольнении будет регистрироваться как сторно начисление.";
	Иначе
		ТекстЗаголовка = "Удержание за неотработанный отпуск при увольнении будет регистрироваться как «обычное» удержание.";
	КонецЕсли;	
	ФормаОбработки.ЭлементыФормы.НадписьУдержаниеЗаОтпускУменьшаетНалогиИнформация.Заголовок = ТекстЗаголовка;	
	
КонецПроцедуры

Процедура ОбработатьИзменениеПериодаЕСН(ФормаОбработки) Экспорт
	
	ДатаПериодЕСН = Дата(ФормаОбработки.ПериодЕСН,1,1);
	
	ДатаОкончания = "";
	Для каждого СтрокаТаблицы Из ТаблицаЗаписейУчетнаяПолитикаЕСН Цикл
		Если СтрокаТаблицы.Период > ДатаПериодЕСН Тогда
			ДатаОкончания = СтрокаТаблицы.Период;
			Прервать;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ФормаОбработки.мУчетнаяПолитикаНалоговыйУчетИЕСН, СтрокаТаблицы);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ЗаполнитьЗначенияСвойств(ФормаОбработки, ФормаОбработки.мУчетнаяПолитикаНалоговыйУчетИЕСН);
		НадписьОкончанияДействия = "по " + Формат(Год(ДатаОкончания), "ЧГ=") + " год";
	Иначе
		НадписьОкончанияДействия = "";
	КонецЕсли;
	ФормаОбработки.ЭлементыФормы.НадписьОкончанияДействияЕСН.Заголовок = НадписьОкончанияДействия;
	
КонецПроцедуры

Процедура ОбработатьИзменениеПериодаНДФЛ(ФормаОбработки) Экспорт
	
	ДатаПериодНДФЛ = Дата(ФормаОбработки.ПериодНДФЛ,1,1);
	
	ДатаОкончания = "";
	Для каждого СтрокаТаблицы Из ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ Цикл
		Если СтрокаТаблицы.Период > ДатаПериодНДФЛ Тогда
			ДатаОкончания = СтрокаТаблицы.Период;
			Прервать;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ФормаОбработки.мУчетнаяПолитикаПоНДФЛ, СтрокаТаблицы);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ЗаполнитьЗначенияСвойств(ФормаОбработки, ФормаОбработки.мУчетнаяПолитикаПоНДФЛ);
		НадписьОкончанияДействия = "по " + Формат(Год(ДатаОкончания), "ЧГ=") + " год";
	Иначе
		НадписьОкончанияДействия = "";
	КонецЕсли;
	ФормаОбработки.ЭлементыФормы.НадписьОкончанияДействияНДФЛ.Заголовок = НадписьОкончанияДействия;
	
КонецПроцедуры

Процедура ОткрытьФормуИсторииЗначений(ФормаОбработки, КлючУникальности, ИмяТаблицыИсторииЗначений, ИмяПараметраИсторииЗначений, ПараметрИсторииЗначений, Заголовок, ТаблицаИстории, РежимТолькоПросмотр = Истина) Экспорт

	Если ИмяПараметраИсторииЗначений = Неопределено Тогда
		ТаблицаИсторииЗначений = ТаблицаИстории.Скопировать();
	Иначе
		СтруктураПоиска = Новый Структура(ИмяПараметраИсторииЗначений, ПараметрИсторииЗначений);
		МассивСтрок = ТаблицаИстории.НайтиСтроки(СтруктураПоиска);
		ТаблицаИсторииЗначений = ТаблицаИстории.Скопировать(МассивСтрок);
	КонецЕсли;
	
	ФормаИстории = ПолучитьФорму("ФормаИстории", ФормаОбработки, );
	ФормаИстории.ИмяТаблицыИсторииЗначений = ИмяТаблицыИсторииЗначений;
	ФормаИстории.ПараметрИсторииЗначений   = ПараметрИсторииЗначений;
	ФормаИстории.Заголовок = Заголовок;
	ФормаИстории.ТолькоПросмотр = РежимТолькоПросмотр;
	ФормаИстории.Открыть();	

КонецПроцедуры

Процедура ОбработатьОкончаниеРедактирвоанияСтрокиТабличногоПоля(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, СтруктураТекущиеДанные, ТабицаДанных)Экспорт

	Если НоваяСтрока и ОтменаРедактирования Тогда
		Возврат;
	ИначеЕсли Элемент.ТекущиеДанные <> Неопределено и (Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Период)
		или Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Организация))Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли ОтменаРедактирования Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, СтруктураТекущиеДанные);
	Иначе
		СтруктураПоиска = Новый Структура("Период, Организация", Элемент.ТекущиеДанные.Период, Элемент.ТекущиеДанные.Организация);
		МассивСтрок = ТабицаДанных.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 1 Тогда
			Предупреждение("Значение на дату: " + Формат(Элемент.ТекущиеДанные.Период, "ДФ=dd.MM.yyyy") + " уже задано!");
			Отказ = Истина;
			Возврат;	
		КонецЕсли;	
	КонецЕсли;	
	
	ТабицаДанных.Сортировать("Организация,Период");	

КонецПроцедуры

Процедура ФормаОбработкиМинимальнаяОплатаТрудаРФДатаПриИзменении(Элемент, ФормаОбработки) Экспорт

	Элемент.Значение = НачалоМесяца(Элемент.Значение);
	ДатаОкончания = "";
	НовоеЗначениеМинимальнаяОплатаТрудаРФ = 0;
	Для каждого СтрокаТаблицы Из ТаблицаЗаписейМРОТ Цикл
		Если СтрокаТаблицы.Период > ФормаОбработки.МинимальнаяОплатаТрудаРФДата Тогда
			ДатаОкончания = СтрокаТаблицы.Период;
			Прервать;
		КонецЕсли;
		НовоеЗначениеМинимальнаяОплатаТрудаРФ = СтрокаТаблицы.Размер;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ФормаОбработки.МинимальнаяОплатаТрудаРФ = НовоеЗначениеМинимальнаяОплатаТрудаРФ;
		НадписьОкончанияДействия = "по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
	Иначе
		НадписьОкончанияДействия = "";
	КонецЕсли;
	ФормаОбработки.ЭлементыФормы.НадписьОкончанияДействияМРОТ.Заголовок = НадписьОкончанияДействия;

КонецПроцедуры

Процедура ФормаОбработкиСтавкаРефинансированияЦБДатаПриИзменении(Элемент, ФормаОбработки) Экспорт

	ДатаОкончания = "";
	НовоеЗначениеСтавкаРефинансированияЦБ = 0;
	Для каждого СтрокаТаблицы Из ТаблицаЗаписейСтавкиРефинансированияЦБ Цикл
		Если СтрокаТаблицы.Период > ФормаОбработки.СтавкаРефинансированияЦБДата Тогда
			ДатаОкончания = СтрокаТаблицы.Период;
			Прервать;
		КонецЕсли; 
		НовоеЗначениеСтавкаРефинансированияЦБ = СтрокаТаблицы.Размер;
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ФормаОбработки.СтавкаРефинансированияЦБ = НовоеЗначениеСтавкаРефинансированияЦБ;
		НадписьОкончанияДействия = "по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
	Иначе
		НадписьОкончанияДействия = "";
	КонецЕсли;
	ФормаОбработки.ЭлементыФормы.НадписьОкончанияДействияСтавкиРефинансирования.Заголовок = НадписьОкончанияДействия;

КонецПроцедуры  

Процедура ФормаОбработкиДатаРазмеровОграниченияПособийПриИзменении(Элемент, ФормаОбработки) Экспорт

	Элемент.Значение = НачалоМесяца(Элемент.Значение);
	ДатаОкончания = "";
	НовоеЗначениеПособиеПоВременнойНетрудоспособности = 0;
	НовоеЗначениеПособиеПоБеременности = 0;
	Для каждого СтрокаТаблицы Из ТаблицаЗаписейОграниченияПособия Цикл
		Если СтрокаТаблицы.Период > ФормаОбработки.ДатаРазмеровОграниченияПособий Тогда
			ДатаОкончания = СтрокаТаблицы.Период;
			Прервать;
		КонецЕсли;
		НовоеЗначениеПособиеПоВременнойНетрудоспособности = СтрокаТаблицы.Размер;
		НовоеЗначениеПособиеПоБеременности = СтрокаТаблицы.РазмерПоБеременности;
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ФормаОбработки.ПособиеПоВременнойНетрудоспособности = НовоеЗначениеПособиеПоВременнойНетрудоспособности;
		ФормаОбработки.ПособиеПоБеременности = НовоеЗначениеПособиеПоБеременности;
		НадписьОкончанияДействия = "по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
	Иначе
		НадписьОкончанияДействия = "";
	КонецЕсли;
	ФормаОбработки.ЭлементыФормы.НадписьОкончанияДействияОграниченияПособий.Заголовок = НадписьОкончанияДействия;

КонецПроцедуры

Процедура ФормаОбработкиСтавкиФССНСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование, ФормаОбработки) Экспорт

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Период = НачалоМесяца(ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
		Если Не Элемент.Колонки.Организация.Видимость Тогда
			Элемент.ТекущиеДанные.Организация = Организация;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ФормаОбработки.мСтавкиФССНСДоРедактирования, Элемент.ТекущиеДанные);	

КонецПроцедуры

Процедура ФормаОбработкиСтавкиФССНСПериодПриИзменении(Элемент, ФормаОбработки) Экспорт

	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Элемент.Значение = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Если Элемент.Значение <> НачалоМесяца(Элемент.Значение) Тогда
		Элемент.Значение = НачалоМесяца(Элемент.Значение);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьЗаголовокНадписиПорядокУчетаСтандартныхВычетов(ФормаОбработки) Экспорт

	ТекстНадписи = "";
	Если ФормаОбработки.ОсобенностиИсчисленияНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом Тогда
		ТекстНадписи = "Стандартные вычеты применяются нарастающим итогом в течение налогового периода – в этом случае вычеты, на которые имеет право налогоплательщик (сотрудник) с начала года по месяц исчисления налога, применяются к налоговой базе, исчисленной нарастающим итогом за год";	
	Иначе
		ТекстНадписи = "Стандартные вычеты применяются в пределах месячного дохода налогоплательщика – в этом случае вычеты, на которые имеет право налогоплательщик (сотрудник) в каждом месяце налогового периода, применяются к налоговой базе, исчисленной за этот месяц (вариант соответствует положениям письма Минфина РФ от 7 октября 2004 г. №03-05-01-04/41)";
	КонецЕсли;	
	
	ФормаОбработки.ЭлементыФормы.НадписьПорядокУчетаСтандартныхВычетов.Заголовок = ТекстНадписи;	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОЛУЧЕНИЯ ДАННЫХ И ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ФОРМЫ 

Процедура ПолучитьАлгоритмыРасчетов(ФормаОбработки)
	
	НаборЗаписей = РегистрыСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		ФормаОбработки.УдержаниеЗаОтпускУменьшаетНалоги 		= Ложь;
		ФормаОбработки.ПорядокПересчетаМесячнойСтавкиВЧасовую 	= Перечисления.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце;
	Иначе
		ФормаОбработки.УдержаниеЗаОтпускУменьшаетНалоги 		= НаборЗаписей[0].УдержаниеЗаОтпускУменьшаетНалоги;
		ФормаОбработки.ПорядокПересчетаМесячнойСтавкиВЧасовую 	= НаборЗаписей[0].ПорядокПересчетаМесячнойСтавкиВЧасовую;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСведенияОСтраховыхВзносах(ФормаОбработки)

	// получим ПредельнаяВеличинаБазыСтраховыхВзносов
    НаборЗаписей = РегистрыСведений.ПредельнаяВеличинаБазыСтраховыхВзносов.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов = НаборЗаписей.Выгрузить();
	ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов.Сортировать("Период");
	Если НаборЗаписей.Количество() = 0 Тогда
		ФормаОбработки.ПериодПредельнаяВеличинаБазыСтраховыхВзносов = 2010;
		ФормаОбработки.ПредельнаяВеличинаБазыСтраховыхВзносов = 0;
	Иначе
		ФормаОбработки.ПериодПредельнаяВеличинаБазыСтраховыхВзносов = Год(НаборЗаписей[НаборЗаписей.Количество()-1].Период);
		ФормаОбработки.ПредельнаяВеличинаБазыСтраховыхВзносов = НаборЗаписей[НаборЗаписей.Количество()-1].Размер;
	КонецЕсли;
	
	// получим скидки к доходам и запомним все данные в таблице значений
	// ТаблицаЗаписейНДФЛВычетыПоДоходам
	НаборЗаписей = РегистрыСведений.СтраховыеВзносыСкидкиКДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ТаблицаЗаписейСтраховыеВзносыСкидкиКДоходам = НаборЗаписей.Выгрузить();    
	
	// перепишем из таблицы значений ТаблицаЗаписейСтраховыеВзносыСкидкиКДоходам
	// в табличную часть СтраховыеВзносыСкидкиКДоходам последние значения
	// по каждому коду дохода
	ЗаполнитьТабличнуюЧасть(СтраховыеВзносыСкидкиКДоходам, ТаблицаЗаписейСтраховыеВзносыСкидкиКДоходам, "ВидДохода");
	
	НаборЗаписей = РегистрыСведений.ТарифСтраховыхВзносов.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ТарифСтраховыхВзносов.Загрузить(НаборЗаписей.Выгрузить());
	
	ТарифСтраховыхВзносов.Сортировать("ВидТарифа, Период");
	
	ТабличноеПолеСтавки = ФормаОбработки.ЭлементыФормы.ТарифСтраховыхВзносов;
	
	ТабличноеПолеСтавки.ОтборСтрок.ВидТарифа.Использование = Истина;
	ТабличноеПолеСтавки.ОтборСтрок.ВидТарифа.ВидСравнения = ВидСравнения.Равно;
	ТабличноеПолеСтавки.ОтборСтрок.ВидТарифа.Значение = Перечисления.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим;
	
КонецПроцедуры

Процедура ПолучитьРазмерыГосударственныхПособий(ФормаОбработки)
	
	НаборЗаписей = РегистрыСведений.РазмерОграниченияПособияПоНетрудоспособности.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ТаблицаЗаписейОграниченияПособия = НаборЗаписей.Выгрузить();
	ТаблицаЗаписейОграниченияПособия.Сортировать("Период");
	
	Если НаборЗаписей.Количество() = 0 Тогда
		ФормаОбработки.ДатаРазмеровОграниченияПособий = Дата(2007,1,1);
		ФормаОбработки.ПособиеПоВременнойНетрудоспособности = 0;
		ФормаОбработки.ПособиеПоБеременности = 0;
	Иначе
		ФормаОбработки.ДатаРазмеровОграниченияПособий = НаборЗаписей[НаборЗаписей.Количество()-1].Период;
		ФормаОбработки.ПособиеПоВременнойНетрудоспособности = НаборЗаписей[НаборЗаписей.Количество()-1].Размер;
		ФормаОбработки.ПособиеПоБеременности = НаборЗаписей[НаборЗаписей.Количество()-1].РазмерПоБеременности;
	КонецЕсли;
	
	МассивПособий = Новый Массив;
	МассивПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет);	
	МассивПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет);
	МассивПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет);
	МассивПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.ПриРожденииРебенка);
	МассивПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности);
	МассивПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.ПоУходуЗаРебенкомДо3хЛет);
	МассивПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.ВСвязиСоСмертью);
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ТаблицаЗаписейГосударственныеПособия = НаборЗаписей.Выгрузить();
	ТаблицаЗаписейГосударственныеПособия.Сортировать("ВидПособия,Период");
	
	Если ТаблицаЗаписейГосударственныеПособия.Количество() = 0 Тогда
		// заполним таблицу
		Для каждого ВидПособия Из МассивПособий Цикл
			НоваяСтрока = ТаблицаЗаписейГосударственныеПособия.Добавить();
			НоваяСтрока.Период = Дата(2007,1,1);
			НоваяСтрока.ВидПособия = ВидПособия;
			НоваяСтрока.Размер = 0;
		КонецЦикла;
		СписокГосударственныеПособия = ТаблицаЗаписейГосударственныеПособия.Скопировать();
	Иначе
		СтруктураПоиска = Новый Структура("ВидПособия");
		Для каждого ВидПособия Из МассивПособий Цикл
			СтруктураПоиска.Очистить();
			СтруктураПоиска.Вставить("ВидПособия", ВидПособия);
			МассивСтрок = ТаблицаЗаписейГосударственныеПособия.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаЗаписейГосударственныеПособия.Добавить();
				НоваяСтрока.Период = Дата(2007,1,1);
				НоваяСтрока.ВидПособия = ВидПособия;
				НоваяСтрока.Размер = 0;
				ЗаполнитьЗначенияСвойств(СписокГосударственныеПособия.Добавить(),НоваяСтрока);
			Иначе
				ДатаДействия = Дата(1,1,1);
				Размер = 0;
				Для каждого СтрокаТаблицы Из МассивСтрок Цикл
					Если СтрокаТаблицы.Период > ДатаДействия Тогда
						ДатаДействия = СтрокаТаблицы.Период;
						Размер = СтрокаТаблицы.Размер;
					КонецЕсли;
				КонецЦикла;
				НоваяСтрока = СписокГосударственныеПособия.Добавить();
				НоваяСтрока.Период = ДатаДействия;
				НоваяСтрока.ВидПособия = ВидПособия;
				НоваяСтрока.Размер = Размер;
			КонецЕсли;
		КонецЦикла;
		ТаблицаЗаписейГосударственныеПособия.Сортировать("ВидПособия,Период");
		СписокГосударственныеПособия.Сортировать("ВидПособия,Период");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПрочиеСтавки(ФормаОбработки)
	
	НаборЗаписей = РегистрыСведений.СтавкаРефинансированияЦБ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ТаблицаЗаписейСтавкиРефинансированияЦБ = НаборЗаписей.Выгрузить();
	ТаблицаЗаписейСтавкиРефинансированияЦБ.Сортировать("Период");
	
	НаборЗаписей = РегистрыСведений.МинимальнаяОплатаТрудаРФ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ТаблицаЗаписейМРОТ = НаборЗаписей.Выгрузить();
	ТаблицаЗаписейМРОТ.Сортировать("Период");
	
	Если ТаблицаЗаписейСтавкиРефинансированияЦБ.Количество() = 0 Тогда
		ФормаОбработки.СтавкаРефинансированияЦБДата = НачалоГода(ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
		ФормаОбработки.СтавкаРефинансированияЦБ = 0;
	Иначе
		ФормаОбработки.СтавкаРефинансированияЦБДата = ТаблицаЗаписейСтавкиРефинансированияЦБ[ТаблицаЗаписейСтавкиРефинансированияЦБ.Количество()-1].Период;
		ФормаОбработки.СтавкаРефинансированияЦБ 	 = ТаблицаЗаписейСтавкиРефинансированияЦБ[ТаблицаЗаписейСтавкиРефинансированияЦБ.Количество()-1].Размер;
	КонецЕсли;
	
	Если ТаблицаЗаписейМРОТ.Количество() = 0 Тогда
		ФормаОбработки.МинимальнаяОплатаТрудаРФДата = НачалоГода(ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
		ФормаОбработки.МинимальнаяОплатаТрудаРФ     = 0;
	Иначе
		ФормаОбработки.МинимальнаяОплатаТрудаРФДата = ТаблицаЗаписейМРОТ[ТаблицаЗаписейМРОТ.Количество()-1].Период;
		ФормаОбработки.МинимальнаяОплатаТрудаРФ     = ТаблицаЗаписейМРОТ[ТаблицаЗаписейМРОТ.Количество()-1].Размер;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет табличную часть данными из таблицы значений, из таблицы значений
// выбираются последние значения по колонке Период
// 	ТабличнаяЧастьОбработки - табличная часть, в которую необходимо переписать данные
//	ТаблицаЗначенийСДанными - таблица значений из которой получаем данные
//	ИмяКолонки - строка, имя колонки, по которой будут выбираться последние значения на дату
//	
Процедура ЗаполнитьТабличнуюЧасть(ТабличнаяЧастьОбработки, ТаблицаЗначенийСДанными, ИмяКолонки)

	СтрокаКолонкиСортировки = ИмяКолонки + ",Период";
	ТаблицаЗначенийСДанными.Сортировать(СтрокаКолонкиСортировки);
	
	ВремТаблица = ТаблицаЗначенийСДанными.Скопировать();
	ВремТаблица.Свернуть(ИмяКолонки);
	МассивКодов = ВремТаблица.ВыгрузитьКолонку(ИмяКолонки);	
	
	Если ТаблицаЗначенийСДанными.Количество() > 0 Тогда
		СтруктураПоиска = Новый Структура(ИмяКолонки);
		Для каждого ЭлементМассива Из МассивКодов Цикл
			СтруктураПоиска.Очистить();
			СтруктураПоиска.Вставить(ИмяКолонки, ЭлементМассива);
			МассивСтрок = ТаблицаЗначенийСДанными.НайтиСтроки(СтруктураПоиска);
			ДатаДействия = Дата(1,1,1);
			Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				Если СтрокаТаблицы.Период > ДатаДействия Тогда
					СтрокаТЗПоследнееЗначение = СтрокаТаблицы;
				КонецЕсли;
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ТабличнаяЧастьОбработки.Добавить(), СтрокаТЗПоследнееЗначение);
		КонецЦикла;
		ТабличнаяЧастьОбработки.Сортировать(СтрокаКолонкиСортировки);
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьВычетыПоНДФЛ()
	
	// получим вычеты к доходам и запомним все данные в таблице значений
	// ТаблицаЗаписейНДФЛВычетыПоДоходам
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ТаблицаЗаписейНДФЛВычетыПоДоходам = НаборЗаписей.Выгрузить();
	
	// перепишем из таблицы значений ТаблицаЗаписейНДФЛВычетыПоДоходам
	// в табличную часть НДФЛВычетыПоДоходам последние значения
	// по каждому коду дохода
	ЗаполнитьТабличнуюЧасть(НДФЛВычетыПоДоходам, ТаблицаЗаписейНДФЛВычетыПоДоходам, "КодДохода");
	
	// получим размеры вычетов и запомним все данные в таблице значений
	// ТаблицаЗаписейНДФЛРазмерВычетов
	НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ТаблицаЗаписейНДФЛРазмерВычетов = НаборЗаписей.Выгрузить();
	
	// перепишем из таблицы значений ТаблицаЗаписейНДФЛВычетыПоДоходам
	// в табличную часть НДФЛВычетыПоДоходам последние значения
	// по каждому коду дохода
	ЗаполнитьТабличнуюЧасть(НДФЛРазмерВычетов, ТаблицаЗаписейНДФЛРазмерВычетов, "КодВычета");
	
КонецПроцедуры

// Процедура получает данные: АлгоритмыРасчетов, РазмерыПособий, ВычетыНДФЛ
// и заполняет реквизиты формы
Процедура ПолучитьОбщиеДанныеИЗаполнитьФорму(ФормаОбработки) Экспорт

	// получим значения констант 
	Если ЗначениеЗаполнено(ФормаОбработки.мСтрокаКонстант) Тогда
		НаборКонстант = Константы.СоздатьНабор(ФормаОбработки.мСтрокаКонстант);
		НаборКонстант.Прочитать();
		ЗаполнитьЗначенияСвойств(ФормаОбработки, НаборКонстант);
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.АлгоритмыРасчетов.Видимость Тогда
		ПолучитьАлгоритмыРасчетов(ФормаОбработки);
		УстановитьЗаголовокНадписьПорядокРасчетаЧасовойСтавки(ФормаОбработки);
		УстановитьЗаголовокНадписьУдержаниеЗаОтпускУменьшаетНалогиИнформация(ФормаОбработки);
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраховыеВзносы.Видимость Тогда
		// Заполним сведения о страховых взносах
		ПолучитьСведенияОСтраховыхВзносах(ФормаОбработки);	
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.РазмерыПособий.Видимость Тогда
		ПолучитьРазмерыГосударственныхПособий(ФормаОбработки);	
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.ПрочиеСтавки.Видимость Тогда
		ПолучитьПрочиеСтавки(ФормаОбработки);	
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.ВычетыНДФЛ.Видимость Тогда
		ПолучитьВычетыПоНДФЛ();	
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьУчетнуюПолитикуПоПерсоналу(ФормаОбработки) 
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ФормаОбработки.мУчетнаяПолитикаПоПерсоналуОрганизаций, НаборЗаписей[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьУчетнуюПолитикуПоРасчетуЗарплаты(ФормаОбработки) 
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ФормаОбработки.мУчетнаяПолитикаПоРасчетуЗарплаты, НаборЗаписей[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьТарифПочтовогоСбора(ФормаОбработки)
	НаборЗаписей = РегистрыСведений.ТарифПочтовогоСбораОрганизации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		ФормаОбработки.ТарифПочтовогоСбора = НаборЗаписей[0].Тариф;
	КонецЕсли;

КонецПроцедуры //ПолучитьТарифПочтовогоСбора

Процедура ПолучитьСтавкиФССНС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТСписокОрганизаций
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.Ссылка = &Организация
	|			ИЛИ Организации.ГоловнаяОрганизация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтавкаВзноса.Организация КАК Организация,
	|	СтавкаВзноса.Период КАК Период,
	|	СтавкаВзноса.Ставка
	|ИЗ
	|	РегистрСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев КАК СтавкаВзноса
	|ГДЕ
	|	СтавкаВзноса.Организация В
	|			(ВЫБРАТЬ
	|				ВТСписокОрганизаций.Организация
	|			ИЗ
	|				ВТСписокОрганизаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаВзноса.Организация.Наименование,
	|	Период";
	Запрос.УстановитьПараметр("Организация", Организация);
	СтавкиФССНС.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ПолучитьУчетнуюПолитикуНДФЛ(ФормаОбработки)
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ = НаборЗаписей.Выгрузить();
	ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ.Сортировать("Период");
	
	Если ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ.Количество() > 0 Тогда
		СтрокаТаблицы = ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ[ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ.Количество()-1];
		ЗаполнитьЗначенияСвойств(ФормаОбработки.мУчетнаяПолитикаПоНДФЛ, СтрокаТаблицы);
		ФормаОбработки.ПериодНДФЛ = Год(СтрокаТаблицы.Период);
	Иначе
		НоваяСтрока = ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ.Добавить();
		НоваяСтрока.Период = Дата(ФормаОбработки.ПериодНДФЛ,1,1);
		НоваяСтрока.Организация = Организация;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ФормаОбработки.мУчетнаяПолитикаПоНДФЛ);
	КонецЕсли;
	
КонецПроцедуры


// Процедура получает по организации и заполняет реквизиты формы
Процедура ПолучитьДанныеПоОрганизации(ФормаОбработки) Экспорт
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.КадровыйУчет.Видимость Тогда
		ПолучитьУчетнуюПолитикуПоПерсоналу(ФормаОбработки);
		ЗаполнитьЗначенияСвойств(ФормаОбработки, ФормаОбработки.мУчетнаяПолитикаПоПерсоналуОрганизаций);
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.РасчетЗарплаты.Видимость Тогда
		// тут будут заполнены данные и для страницы Плановый аванс
		ПолучитьУчетнуюПолитикуПоРасчетуЗарплаты(ФормаОбработки);
		ЗаполнитьЗначенияСвойств(ФормаОбработки, ФормаОбработки.мУчетнаяПолитикаПоРасчетуЗарплаты);
		ФормаОбработки.ЭлементыФормы.НадписьСписокРасчетчиковЗарплаты.Видимость = ФормаОбработки.мУчетнаяПолитикаПоРасчетуЗарплаты.РасчетЗарплатыОрганизацииПоОтветственным;
		
		ПолучитьТарифПочтовогоСбора(ФормаОбработки);
		
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтавкиФССНСиПЗ.Видимость Тогда
		ПолучитьСтавкиФССНС();
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.РасчетНДФЛ.Видимость Тогда
		ФормаОбработки.ПериодНДФЛ = Год(ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
		ПолучитьУчетнуюПолитикуНДФЛ(ФормаОбработки);
		ЗаполнитьЗначенияСвойств(ФормаОбработки, ФормаОбработки.мУчетнаяПолитикаПоНДФЛ);
		УстановитьЗаголовокНадписиПорядокУчетаСтандартныхВычетов(ФормаОбработки);
		ФормаОбработки.ЭлементыФормы.НадписьОкончанияДействияНДФЛ.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ 

Процедура ФормаОбработкиПередОткрытием(ФормаОбработки, Отказ) Экспорт

	Если ЗначениеЗаполнено(Организация) Тогда
		// в форму передана организация
		// проверим доступ к головной организации
		Организация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		Отказ = Не ОбщегоНазначения.ЭтоДоступнаяОрганизация(ОбщегоНазначения.ГоловнаяОрганизация(Организация))
	Иначе
		Организация = РаботаСДиалогами.ПолучитьОрганизацию(Истина);
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		РаботаСДиалогами.СформироватьСтраницыФормы(ФормаОбработки.мСоответствиеОбъектыМетаданных, ФормаОбработки.мСоответствиеРеквизитыФормы);
		
		Отказ = Истина;
		Для каждого СтраницаФормы Из ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы Цикл
			Если СтраницаФормы.Видимость Тогда
				// на форме есть видимые страницы, можно открывать форму
				Если Отказ Тогда
					// это первая из видимых страниц, сделаем ее текущей
					ФормаОбработки.ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = СтраницаФормы;
				КонецЕсли;
				Отказ = Ложь;
				
				МассивОбъектовМетаданных = ФормаОбработки.мСоответствиеОбъектыМетаданных[СтраницаФормы];
				Для каждого ОбъектМетаданных Из МассивОбъектовМетаданных Цикл
					Если Найти(ОбъектМетаданных.ПолноеИмя(), "Константа") <> 0 Тогда
						ФормаОбработки.мСтрокаКонстант = ФормаОбработки.мСтрокаКонстант + ОбъектМетаданных.Имя + ",";
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры


#КонецЕсли



