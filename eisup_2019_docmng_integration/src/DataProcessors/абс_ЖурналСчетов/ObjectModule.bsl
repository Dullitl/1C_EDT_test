Перем ТаблицаСОшибками Экспорт;
Перем мСписокСтатусов Экспорт;
Перем мДатаНачала;
Перем мДатаОкончания;
Перем мНомерНедели;
Перем мРолиПользователя;
Перем мОрганизация Экспорт;

Функция ПолучитьПеречисление(ЗначениеСтрока,Вид)  Экспорт
	
	Если ПустаяСтрока(ЗначениеСтрока) Тогда
		Возврат Перечисления[Вид].ПустаяСсылка()
	КонецЕсли;	
	
	Для каждого ТекЗнач из Перечисления[Вид] Цикл
		ТекЗначСтр = Строка(ТекЗнач);
		Если СокрЛП(ТекЗначСтр) = СокрЛП(ЗначениеСтрока) Тогда
			Возврат ТекЗнач;
		КонецЕсли;	
	КонецЦикла;	
	
КонецФункции

//Процедура заполняет верхнюю табличную часть "Таблица платежей"
// всеми счетами со статусом к оплате и датой платежа не превышающей даты плана платежа
// всеми счетами со статусом К Оплате !
Процедура СформироватьПланПлатежейПривелегированный(ТекстПоПлану) Экспорт
	
	ТаблицаСОшибками.Очистить();
	
	//Проверка заполненых плановых курсов
	Состояние("Проверка курсов плана платежей на неделю " + НомерНедели + ".");
	// АБС ВСТАВКА Проверка курсов
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ПлановыйКурсы.Валюта,
	|	МАКСИМУМ(абс_ПлановыйКурсы.НомерНедели) КАК НомерНедели
	|ПОМЕСТИТЬ втНеделиВалюты
	|ИЗ
	|	РегистрСведений.абс_ПлановыйКурсы КАК абс_ПлановыйКурсы
	|ГДЕ
	|	ГОД(абс_ПлановыйКурсы.Период) = ГОД(&ТекДата)
	|	И абс_ПлановыйКурсы.НомерНедели <= &НомерНедели
    |
	|СГРУППИРОВАТЬ ПО
	|	абс_ПлановыйКурсы.Валюта
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_ПлановыйКурсы.Валюта КАК Валюта,
	|	абс_ПлановыйКурсы.ПлановыйКурс
	|ПОМЕСТИТЬ ВТПлановыеКурсы
	|ИЗ
	|	РегистрСведений.абс_ПлановыйКурсы КАК абс_ПлановыйКурсы
	|ГДЕ
	|	ГОД(абс_ПлановыйКурсы.Период) = ГОД(&ТекДата)
	|	И абс_ПлановыйКурсы.НомерНедели <= &НомерНедели
	|	И (абс_ПлановыйКурсы.Валюта, абс_ПлановыйКурсы.НомерНедели) В
	|			(ВЫБРАТЬ
	|				втНеделиВалюты.Валюта,
	|				втНеделиВалюты.НомерНедели
	|			ИЗ
	|				втНеделиВалюты КАК втНеделиВалюты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	абс_СчетНаОплатуОплаты.Оплата.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТВалютыСчетов
	|ИЗ
	|	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	|ГДЕ
	|	абс_СчетНаОплатуОплаты.Оплата.СтатусОплаты = ЗНАЧЕНИЕ(Перечисление.абсСтатусыСчетов.ВОплату)
	|	И (НЕ абс_СчетНаОплатуОплаты.Ссылка.ПометкаУдаления)
	|	И абс_СчетНаОплатуОплаты.Оплата <> ЗНАЧЕНИЕ(Документ.абс_Оплата.ПустаяСсылка)
	|	И ((&ПоПлану
	|				И НЕ абс_СчетНаОплатуОплаты.ВнеПлана)
	|			ИЛИ (&ВнеПлана
	|				И абс_СчетНаОплатуОплаты.ВнеПлана))
	|	И абс_СчетНаОплатуОплаты.Валюта <> &ВалютаРуб
	|	И абс_СчетНаОплатуОплаты.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И (НЕ абс_СчетНаОплатуОплаты.Ссылка.ДКПетля)
	|	И (НЕ абс_СчетНаОплатуОплаты.Ссылка.ДКДебиторы)
	|	И (НЕ абс_СчетНаОплатуОплаты.Ссылка.ДкВзаимозачет)
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_СчетНаОплатуОплаты.Оплата.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТВалютыСчетов.Валюта,
	|	ВТПлановыеКурсы.ПлановыйКурс
	|ПОМЕСТИТЬ ВТСчетаКурсы
	|ИЗ
	|	ВТВалютыСчетов КАК ВТВалютыСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеКурсы КАК ВТПлановыеКурсы
	|		ПО ВТВалютыСчетов.Валюта = ВТПлановыеКурсы.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТСчетаКурсы.Валюта
	|ИЗ
	|	ВТСчетаКурсы КАК ВТСчетаКурсы
	|ГДЕ
	|	ВТСчетаКурсы.ПлановыйКурс ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ПоПлану"			, ТекстПоПлану = "весь план" ИЛИ ТекстПоПлану = "только по плану");
	Запрос.УстановитьПараметр("ВнеПлана"		, ТекстПоПлану = "весь план" ИЛИ ТекстПоПлану = "вне плана");	
	Запрос.УстановитьПараметр("НомерНедели"		, НомерНедели);
	Запрос.УстановитьПараметр("ВалютаРуб"		, глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.УстановитьПараметр("ТекДата"			, КонецГода(абс_СерверныеФункции.ПолучитьДатуСервера()));
	
	Рез = Запрос.Выполнить();
	
	ЕстьКурсы = Рез.Пустой();
	
	Если НЕ ЕстьКурсы Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("По валютам """ + абс_СлужебныеФункции.МассивВСтрокуСРазделителями(Рез.Выгрузить().ВыгрузитьКолонку("Валюта")) + """ не задан плановый курс на " + НомерНедели + " неделю.");
		Возврат;
	КонецЕсли;
	
	// АБС ВСТАВКА Проверка курсов КОНЕЦ
	
	//НачатьТранзакцию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ПлановыйКурсы.Валюта, //абсо заявка 8740
	|	МАКСИМУМ(абс_ПлановыйКурсы.НомерНедели) КАК НомерНедели
	|ПОМЕСТИТЬ втНеделиВалюты
	|ИЗ
	|	РегистрСведений.абс_ПлановыйКурсы КАК абс_ПлановыйКурсы
	|ГДЕ
	|	ГОД(абс_ПлановыйКурсы.Период) = ГОД(&ТекДата)
	|	И абс_ПлановыйКурсы.НомерНедели <= &НомерНедели
    |
	|СГРУППИРОВАТЬ ПО
	|	абс_ПлановыйКурсы.Валюта
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	абс_ПлановыйКурсы.Валюта КАК Валюта,
	|	абс_ПлановыйКурсы.ПлановыйКурс
	|ПОМЕСТИТЬ ВТПлановыеКурсы
	|ИЗ
	|	РегистрСведений.абс_ПлановыйКурсы КАК абс_ПлановыйКурсы
	|ГДЕ
	|	ГОД(абс_ПлановыйКурсы.Период) = ГОД(&ТекДата)
	|	И абс_ПлановыйКурсы.НомерНедели <= &НомерНедели
	|	И (абс_ПлановыйКурсы.Валюта, абс_ПлановыйКурсы.НомерНедели) В
	|			(ВЫБРАТЬ
	|				втНеделиВалюты.Валюта,
	|				втНеделиВалюты.НомерНедели
	|			ИЗ
	|				втНеделиВалюты КАК втНеделиВалюты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	абс_СчетНаОплатуОплаты.Ссылка КАК Счет,
	|	абс_СчетНаОплатуОплаты.Оплата.Контрагент КАК Контрагент,
	|	абс_СчетНаОплатуОплаты.Оплата.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	абс_СчетНаОплатуОплаты.Оплата.СуммаПлатежа КАК СуммаПлатежа,
	|	абс_СчетНаОплатуОплаты.Оплата.ОснованиеПлатежа КАК ОснованиеПлатежа,
	|	абс_СчетНаОплатуОплаты.Оплата.НазначениеПлатежа КАК НазначениеПлатежа,
	|	абс_СчетНаОплатуОплаты.Оплата.ВалютнаяСумма КАК ВалютнаяСумма,
	|	абс_СчетНаОплатуОплаты.Оплата КАК Оплата,
	|	абс_СчетНаОплатуОплаты.Оплата.Валюта КАК Валюта,
	|	абс_СчетНаОплатуОплаты.Оплата.БюджетнаяКатегория КАК БюджетнаяКатегория,
	|	абс_СчетНаОплатуОплаты.Оплата.ЦФО КАК ЦФО,
	|	абс_СчетНаОплатуОплаты.Оплата.ЦФУ КАК ЦФУ,
	|	абс_СчетНаОплатуОплаты.Оплата.ДатаПлатежа КАК ДатаПлатежа,
	|	абс_СчетНаОплатуОплаты.Оплата.ТипСети КАК ТипСети,
	|	абс_СчетНаОплатуОплаты.Ссылка.Организация КАК Организация,
	|	ЕСТЬNULL(ВТПлановыеКурсы.ПлановыйКурс, 1) КАК Курс,
	|	1 КАК Кратность,
	|	абс_СчетНаОплатуОплаты.Оплата.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ,
	|	абс_СчетНаОплатуОплаты.ВнеПлана КАК ВнеПлана,
	|	абс_СчетНаОплатуОплаты.БюджетнаяСтатья КАК БюджетнаяСтатья,
	|	абс_СчетНаОплатуОплаты.Оплата.НомерЖурнала КАК НомерЖурнала,
	|	абс_СчетНаОплатуОплаты.Оплата.ДатаНачала КАК ДатаНачала,
	|	абс_СчетНаОплатуОплаты.Оплата.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеКурсы КАК ВТПлановыеКурсы
	|		ПО абс_СчетНаОплатуОплаты.Валюта = ВТПлановыеКурсы.Валюта
	|ГДЕ
	|	абс_СчетНаОплатуОплаты.Оплата.СтатусОплаты = ЗНАЧЕНИЕ(Перечисление.абсСтатусыСчетов.ВОплату)
	|	И (НЕ абс_СчетНаОплатуОплаты.Ссылка.ПометкаУдаления)
	|	И абс_СчетНаОплатуОплаты.Оплата <> ЗНАЧЕНИЕ(Документ.абс_Оплата.ПустаяСсылка)
	|	И ((&ПоПлану
	|				И НЕ абс_СчетНаОплатуОплаты.ВнеПлана)
	|			ИЛИ (&ВнеПлана
	|				И абс_СчетНаОплатуОплаты.ВнеПлана))
	|   И абс_СчетНаОплатуОплаты.Ссылка.Организация =  &Организация
	|ИТОГИ
	|	МАКСИМУМ(Счет),
	|	СУММА(СуммаПлатежа),
	|	МАКСИМУМ(НазначениеПлатежа),
	|	СУММА(ВалютнаяСумма),
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(ЦФО),
	|	МАКСИМУМ(ЦФУ),
	|	МАКСИМУМ(ДатаПлатежа),
	|	МАКСИМУМ(ТипСети),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Курс),
	|	МАКСИМУМ(Кратность),
	|	МАКСИМУМ(ЗакупочныйЗаказ),
	|	МАКСИМУМ(ВнеПлана),
	|	МАКСИМУМ(БюджетнаяСтатья),
	|	МАКСИМУМ(НомерЖурнала),
	|	МАКСИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания)
	|ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ОснованиеПлатежа,
	|	БюджетнаяКатегория,
	|	Оплата");
	
	Запрос.УстановитьПараметр("ТекДата"			, абс_СерверныеФункции.ПолучитьДатуСервера() + 7*24*60*60);	
	Запрос.УстановитьПараметр("ПоПлану"			, ТекстПоПлану = "весь план" ИЛИ ТекстПоПлану = "только по плану");
	Запрос.УстановитьПараметр("ВнеПлана"		, ТекстПоПлану = "весь план" ИЛИ ТекстПоПлану = "вне плана");	
	Запрос.УстановитьПараметр("НомерНедели"		, НомерНедели);
	Запрос.УстановитьПараметр("Организация", мОрганизация); // КТТК Ермолов Е.Л.  30.05.2015 000032948
	
	РезультатВыполнения = Запрос.Выполнить();
	ВыборкаПланВнеплан = РезультатВыполнения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	ТаблицаСОшибками = РезультатВыполнения.Выгрузить().СкопироватьКолонки();
	
	СтруктураСтрокиПлатежа = Новый Структура("Счет,Контрагент,ДоговорКонтрагента,СуммаПлатежа,ОснованиеПлатежа,НазначениеПлатежа,ВалютнаяСумма,Оплата,Валюта,БюджетнаяКатегория,ЦФО,ЦФУ,ДатаПлатежа,ТипСети,Организация,Курс,Кратность,ЗакупочныйЗаказ,ВнеПлана,БюджетнаяСтатья,НомерЖурнала,ДатаНачала,ДатаОкончания");
	
	Пока ВыборкаПланВнеплан.Следующий() Цикл
		
		Выборкаконтрагентов = ВыборкаПланВнеплан.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКонтрагентов.Следующий() Цикл
			
			ВыборкаДоговоров = ВыборкаКонтрагентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаДоговоров.Следующий() Цикл
				
				ВыборкаОснований = ВыборкаДоговоров.Выбрать(ОбходрезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаОснований.Следующий() Цикл
					ВыборкаСтрок = ВыборкаОснований.Выбрать(ОбходрезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаСтрок.Следующий() Цикл
						
						Состояние("Формирование плана платежей по счету: " + ВыборкаСтрок.Счет + ", Контрагент: " + ВыборкаСтрок.Контрагент + ", Сумма платежа: " + Формат(ВыборкаСтрок.ВалютнаяСумма * ВыборкаСтрок.Курс, "ЧЦ=15; ЧДЦ=2"));
						// Start КТТК Ермолов Е.Л.  27.04.2015 Инициализация пустых значений ДатаНачала
						Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.ДатаНачала) И Не ЗначениеЗаполнено(мДатаНачала) Тогда 
							//ФормаВыбора = ЭтотОбъект.ПолучитьФорму("Форма");
							//Если ФормаВыбора.Открыта() Тогда 
							//	ФормаВыбора.Активизировать();
							//	Форма
							//Иначе 
							//	ФормаВыбора.Открыть();
							//КонецЕсли;
							НомНедели = НеделяГода(ТекущаяДата());
							ТекНомНедели = ?(ЗначениеЗаполнено(НомерНедели),НомерНедели, НомНедели);
							Год = Год(ТекущаяДата());
							
							ФормаПериода = ПолучитьФорму("ФормаГода");
							ФормаПериода.Заголовок = "Укажите неделю плана счетов, в которую сформировать план платежей";
							ФормаПериода.НомНедели = ТекНомНедели;
							Результат = ФормаПериода.ОткрытьМодально();
							
							//Если Результат = Неопределено Тогда
							//	Возврат;
							//Иначе
							//	ТекНомНедели = Результат.Неделя;
							//КонецЕсли;
							
							Если Результат.Неделя = НомерНедели и Результат.Год = Год(ДатаНачала) Тогда 
								мДатаНачала = ДатаНачала;
								мДатаОкончания = ДатаОкончания;
								мНомерНедели = НомерНедели;
							Иначе
								СтрокаГода 		= СтрЗаменить(Строка(Результат.Год)+"0101", Символы.НПП ,""); 
								ДатаГода 		= Дата(СтрокаГода);
								мДатаНачала 	= НачалоНедели(ДатаГода+(Результат.Неделя-1)*604800);
								мДатаКонца 		= КонецНедели(ДатаГода+(Результат.Неделя-1)*604800);
								мНомерНедели 	= Результат.Неделя;
							КонецЕсли;
							
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(СтруктураСтрокиПлатежа, ВыборкаСтрок);
						Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.ДатаНачала) Тогда 
							ИзменитьДату = ВыборкаСтрок.Оплата.ПолучитьОбъект();
							ИзменитьДату.ДатаНачала = мДатаНачала;
							ИзменитьДату.ДатаОкончания = мДатаОкончания;
							ИзменитьДату.НомерЖурнала = мНомерНедели;
							Попытка
							    ИзменитьДату.Записать();
							Исключение
							    Сообщить(ИнформацияОбОшибке().Описание + "| Формирование плана прервано");
							КонецПопытки;
							СтруктураСтрокиПлатежа.НомерЖурнала = мНомерНедели;
							СтруктураСтрокиПлатежа.ДатаНачала = мДатаНачала;
							СтруктураСтрокиПлатежа.ДатаОкончания = мДатаОкончания;
						КонецЕсли;	
						
						абс_БизнесПроцессыПривелегированный.СформироватьСтрокуПланаПлатежей(СтруктураСтрокиПлатежа, НомерНедели, ДатаНачала, ДатаОкончания, ТаблицаСОшибками);
						
					КонецЦикла;					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
		
	//ЗафиксироватьТранзакцию();
	
	Если ТаблицаСОшибками.Количество() > 0 Тогда
		ТаблицаСРасшифровкой = Обработки.абс_ВспомогательныеФормы.ПолучитьФорму("ТаблицаСРасшифровкой");
		ТаблицаСРасшифровкой.Заголовок = "Таблица с ошибками: платежи не удалось сформировать";
		ТаблицаСРасшифровкой.ТаблицаЗначений = ТаблицаСОшибками;
		Если Не ТаблицаСРасшифровкой.Открыта() Тогда
			ТаблицаСРасшифровкой.Открыть();
		КонецЕсли;	
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("План платежей сформирован",10);
	КонецЕсли;	
	мДатаНачала = Неопределено;
КонецПроцедуры

//Процедура очищения реквизита ЗРС в счетах на оплату
//
Процедура ОчиститьЗРСВСчетах(МассивЗРС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	абс_СчетНаОплатуОплаты.Ссылка,
	              |	абс_СчетНаОплатуОплаты.НомерСтроки
	              |ИЗ
	              |	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	              |ГДЕ
	              |	абс_СчетНаОплатуОплаты.ЗРС В(&МассивЗРС)";
	Запрос.УстановитьПараметр("МассивЗРС",МассивЗРС);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектСчет = Выборка.Ссылка.ПолучитьОбъект();
		СтрокаСчета = ОбъектСчет.Оплаты.Получить(Выборка.НомерСтроки-1);
		Если СтрокаСчета<>Неопределено Тогда
			СтрокаСчета.ЗРС = Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка();
		КонецЕсли;
		
		ОбъектСчет.ОбменДанными.Загрузка = Истина;
		ОбъектСчет.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДокументы(вр_Документ, врОтказ = Истина) Экспорт
	
	НачатьТранзакцию();
	
	//МассивОплат
	//Поиск из "плана платежей" документы "ЗаявкаНаРасходованиеСредств" 
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	Док.Ссылка
	              |ИЗ
	              |	Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК Док
	              |ГДЕ
	              |	Док.Оплата В(&МассивОплат)";
				  
	Запрос.УстановитьПараметр("МассивОплат",вр_Документ.СоставПлатежей.выгрузитьКолонку("Оплата"));
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	//Проверка что нет оплаченых платежек ПП
	вр_ТаблицаПлатежек = ПроверитьНаличиеОплаченныхПлатежек(Результат,Истина); //ОПЛАЧЕННЫЕ ПП
	Если не вр_ТаблицаПлатежек.Количество() = 0 Тогда
		
		Для каждого Строка Из вр_ТаблицаПлатежек Цикл
			Сообщить("По выдаленным строкам уже есть оплаченный документ - "+Строка.Ссылка,СтатусСообщения.Важное);					  		
		КонецЦикла;
		
		//Прерываем удаление документов
		врОтказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	//Будет проведение документа
	врОтказ = Ложь;
	
	вр_ТаблицаПлатежек = ПроверитьНаличиеОплаченныхПлатежек(Результат,ЛОЖЬ); //НЕ ОПЛАЧЕННЫЕ ПП
	Если не вр_ТаблицаПлатежек.Количество() = 0 Тогда
		
		ОчиститьПлатежноеПоручениеВСчетах(вр_ТаблицаПлатежек.ВыгрузитьКолонку("Ссылка"));
		
		Для каждого Строка Из вр_ТаблицаПлатежек Цикл
			Попытка
				
				врУдалениеОбъекта(Строка.Ссылка,"ПлатежноеПоручение"); 
								
			Исключение
				//Прерываем удаление документов
				врОтказ = Истина;     				
				Сообщить("Не удалось удалить документ - "+Строка.Ссылка,СтатусСообщения.Важное);
			КонецПопытки
		КонецЦикла;
		
	КонецЕсли;
	
	ОчиститьЗРСВСчетах(Результат);
		
	Для Каждого Элемент Из Результат Цикл
		Попытка  
			
			врУдалениеОбъекта(Элемент.Ссылка,"ЗРС"); 			
				
		Исключение
			//Прерываем удаление документов
			врОтказ = Истина;  			
			Сообщить("Не удалось удалить документ - "+Элемент.Ссылка,СтатусСообщения.Важное);
		КонецПопытки;
	КонецЦикла;
	
	//Удаляем план платяжей
	ОчиститьПлатежВСчетах(вр_Документ);
	Попытка  
		
		врУдалениеОбъекта(вр_Документ,"Платеж");		
		
	Исключение
		//Прерываем удаление документов
		врОтказ = Истина;
		Сообщить("Не удалось удалить документ - "+вр_Документ,СтатусСообщения.Важное);
	КонецПопытки;	
	
	Если врОтказ Тогда
		ОтменитьТранзакцию();
	КонецЕсли;   	
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры	

//АБС ВСТАВКА №5010 НАЧАЛО
//Процедура удаляет документы:
//1. ЗаявкаНаРасходованиеСредств 2. ПлатежноеПоручениеИсходящее (если не в статусе оплачен) 3. ПланПлатежей  
Процедура врУдалениеОбъекта(Вр_Ссылка,ИмяИзмерения) Экспорт
	                              
	РССинхр = РегистрыСведений.абс_СинхронизацияСтатусовСчетовПриОплате.СоздатьНаборЗаписей();					
	РССинхр.Отбор[ИмяИзмерения].Установить(Вр_Ссылка);
	РССинхр.Очистить();
	РССинхр.Записать();
	
	Вр_ОбъектДляУдаления = Вр_Ссылка.ПолучитьОбъект();
	Сообщить("Удален документ - "+Вр_Ссылка,СтатусСообщения.Информация);
	Вр_ОбъектДляУдаления.Удалить();		
	
КонецПроцедуры	

Функция ПроверитьНаличиеОплаченныхПлатежек(МассивЗРС, Отбор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка,
	              |	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено КАК Оплачено
	              |ИЗ
	              |	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	              |ГДЕ
	              |	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа В(&МассивЗРС)
	              |	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено = &Оплачено";
	Запрос.УстановитьПараметр("МассивЗРС",МассивЗРС);
	Запрос.УстановитьПараметр("Оплачено",Отбор);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОчиститьПлатежноеПоручениеВСчетах(ПлатежноеПоручение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	абс_СчетНаОплатуОплаты.Ссылка,
	              |	абс_СчетНаОплатуОплаты.НомерСтроки
	              |ИЗ
	              |	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	              |ГДЕ
	              |	абс_СчетНаОплатуОплаты.ПлатежноеПоручение В(&ПлатежноеПоручение)";
	Запрос.УстановитьПараметр("ПлатежноеПоручение",ПлатежноеПоручение);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектСчет = Выборка.Ссылка.ПолучитьОбъект();
		СтрокаСчета = ОбъектСчет.Оплаты.Получить(Выборка.НомерСтроки-1);
		Если СтрокаСчета<>Неопределено Тогда
			СтрокаСчета.ПлатежноеПоручение = Документы.ПлатежноеПоручениеИсходящее.ПустаяСсылка();
		КонецЕсли;  		
		ОбъектСчет.ОбменДанными.Загрузка = Истина;
		ОбъектСчет.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьПлатежВСчетах(ПланПлатежей) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	абс_СчетНаОплатуОплаты.Ссылка,
	              |	абс_СчетНаОплатуОплаты.НомерСтроки
	              |ИЗ
	              |	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	              |ГДЕ
	              |	абс_СчетНаОплатуОплаты.ПланПлатежей = &ПланПлатежей";
	Запрос.УстановитьПараметр("ПланПлатежей",ПланПлатежей);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектСчет = Выборка.Ссылка.ПолучитьОбъект();
		СтрокаСчета = ОбъектСчет.Оплаты.Получить(Выборка.НомерСтроки-1);
		Если СтрокаСчета<>Неопределено Тогда
			СтрокаСчета.ПланПлатежей = Документы.абс_Платеж.ПустаяСсылка();
		КонецЕсли;  		
		ОбъектСчет.ОбменДанными.Загрузка = Истина;
		ОбъектСчет.Записать();
	КонецЦикла;
	
КонецПроцедуры
//\\АБС ВСТАВКА №5010 КОНЕЦ

Процедура ИзменитьСтатусПоСпискуСчетов(СписокСчетов, НовыйСтатус, НомерНедели, ДатаНачала, ДатаОкончания) Экспорт
	
	
	
	ЗапросСчетаОплаты = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_СчетНаОплату.Ссылка КАК СчетНаОплату,
	|	абс_СчетНаОплату.СтатусСчета КАК СтатусСчета,
	|	абс_СчетНаОплатуОплаты.Оплата КАК Оплата,
	|	абс_СчетНаОплатуОплаты.СтатусОплаты КАК СтатусОплаты,
	|	абс_СчетНаОплатуОплаты.ПланПлатежей КАК ПланПлатежей,
	|	абс_СчетНаОплатуОплаты.ПланПлатежей.СтатусПлана КАК СтатусПлана
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	|		ПО абс_СчетНаОплату.Ссылка = абс_СчетНаОплатуОплаты.Ссылка
	|ГДЕ
	|	абс_СчетНаОплату.Ссылка В(&МассивСчетов)");
	
	ЗапросСчетаОплаты.УстановитьПараметр("МассивСчетов", СписокСчетов);
	
	ТабСчетаОплаты = ЗапросСчетаОплаты.Выполнить().Выгрузить();
	ТаблицаСОшибками = ТабСчетаОплаты.СкопироватьКолонки();
	
	ЕстьОшибки = Ложь;
	
	Для Каждого ТекСчет Из СписокСчетов Цикл
		
		СтатусИзменен 	= Ложь;		
		СтатусОтказа 	= Неопределено;
		СтрокиОплат = ТабСчетаОплаты.НайтиСтроки(Новый Структура("СчетНаОплату", ТекСчет));
		
		Если НовыйСтатус = Перечисления.абсСтатусыСчетов.Отказ ИЛИ НовыйСтатус = Перечисления.абсСтатусыСчетов.Уточнить Тогда
			
			СтатусОтказа = НовыйСтатус;
			
			ПричинаОтказа  = "";
			
			// {{ТТК Лапин А. Заявка № 04.05.2016 начало
			ЭтоПользовательСРольюАбс_РедактированиеЗавершенногоПлана = Ложь;
			ЭтоПользовательСРольюАбс_РедактированиеЗавершенногоПлана = абс_БизнесПроцессы.РазрешеноУтверждениеПланаПлатежей();
			
			Если ТекСчет.СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ И ЭтоПользовательСРольюАбс_РедактированиеЗавершенногоПлана Тогда
				// это Пономарев переводит в отказ, ему можно.. он массово в отказ кидает
			Иначе
				// }}ТТК Лапин А. Заявка № 04.05.2016 окончание	
				Если НЕ ВвестиСтроку(ПричинаОтказа, "Введите причину изменения статуса!", 0, Истина) Тогда
					ПричинаОтказа = "";
				КонецЕсли;
				// {{ТТК Лапин А. Заявка № 04.05.2016 начало	
			КонецЕсли; 
			// }}ТТК Лапин А. Заявка № 04.05.2016 окончание
			
			втОтказПроверка = Ложь;
			
			Для Каждого СтрокаОплаты Из СтрокиОплат Цикл
			
				Если ЗначениеЗаполнено(СтрокаОплаты.ПланПлатежей)Тогда
					УдалитьДокументы(СтрокаОплаты.ПланПлатежей, втОтказПроверка);
				КонецЕсли;	

				Если втОтказПроверка Тогда
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи счета " + СтрокаОплаты.СчетНаОплату + ". Счет не переведен в статус " + НовыйСтатус + ".");
					ЕстьОшибки = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если втОтказПроверка Тогда
				Продолжить;
			КонецЕсли;		
						
			Для Каждого СтрокаОплаты Из СтрокиОплат Цикл
				
				ТекДанныеОплата = СтрокаОплаты.Оплата.ПолучитьОбъект();
				ТекДанныеОплата.СтатусОплаты = СтатусОтказа;
				ТекДанныеОплата.Записать();
				
			КонецЦикла;	
			
			ДокОбъект = ТекСчет.ПолучитьОбъект();		
			ДокОбъект.ЗаписатьНовыйСтатус(СтатусОтказа, ПричинаОтказа);
			
			Если ЗначениеЗаполнено(ДокОбъект.ДатаПлатежа) Тогда
				ДокОбъект.ДатаПлатежа = '00010101';
			КонецЕсли;
			
			ДокОбъект.СтатусСчета = СтатусОтказа;  	
			Для Каждого СтрокаОплата из ДокОбъект.Оплаты Цикл
				СтрокаОплата.СтатусОплаты = СтатусОтказа;               
			КонецЦикла;             			
			ДокОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка 
				ДокОбъект.Записать();
			Исключение
				//ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи счета " + СтрокаОплаты.СчетНаОплату + ". Счет не переведен в статус " + НовыйСтатус + ".");
				ЗаполнитьЗначенияСвойств(ТаблицаСОшибками.Добавить(), ТекСчет);
				ЕстьОшибки = Истина;
			КонецПопытки;

			Продолжить;
		КонецЕсли;
		Состояние("Обработка счета на оплату " + ТекСчет.Номер + " от " + ТекСчет.Дата);
			
		Для Каждого СтрокаОплаты Из СтрокиОплат Цикл
			
			Если СтрокаОплаты.СтатусОплаты = Перечисления.абсСтатусыСчетов.Согласован И СтрокаОплаты.СтатусОплаты <> НовыйСтатус Тогда
				                                                                       
				Если  НовыйСтатус = Перечисления.абсСтатусыСчетов.ВОплату Тогда
					
					ТекОплата = СтрокаОплаты.Оплата.ПолучитьОбъект();
					ТекОплата.НомерЖурнала 	= НомерНедели;
					ТекОплата.ДатаНачала 	= ДатаНачала;
					ТекОплата.ДатаОкончания = КонецДня(ДатаОкончания);
					
					ТекОплата.Записать();
				КонецЕсли;
				
				СтатусИзменен = Истина;
				
			ИначеЕсли СтрокаОплаты.СтатусОплаты = Перечисления.абсСтатусыСчетов.Уточнено И НовыйСтатус = Перечисления.абсСтатусыСчетов.Согласован Тогда
				
				ТекОплата = СтрокаОплаты.Оплата.ПолучитьОбъект();				
				ТекОплата.СтатусОплаты = НовыйСтатус;
				ТекОплата.Записать();
				
				СтатусИзменен = Истина;
					
			ИначеЕсли НовыйСтатус = Перечисления.абсСтатусыСчетов.Отказ ИЛИ НовыйСтатус = Перечисления.абсСтатусыСчетов.Уточнить Тогда
												
			КонецЕсли;	
		КонецЦикла;
		
		Если СтатусИзменен Тогда
			ДокОбъект = ТекСчет.ПолучитьОбъект();
			
			ДокОбъект.СтатусСчета = НовыйСтатус;			
			ДокОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка 
				ДокОбъект.Записать();
			Исключение
				//ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи счета " + СтрокаОплаты.СчетНаОплату + ". Счет не переведен в статус " + НовыйСтатус + ".");	
				ЗаполнитьЗначенияСвойств(ТаблицаСОшибками.Добавить(), ТекСчет);
				ЕстьОшибки = Истина;
			КонецПопытки;			
		КонецЕсли;	
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При смене статусов счетов произошли ошибки.");
		ТаблицаСРасшифровкой = Обработки.абс_ВспомогательныеФормы.ПолучитьФорму("ТаблицаСРасшифровкой");
		ТаблицаСРасшифровкой.Заголовок = "Таблица с ошибками: Счета не переведены в новый статус";
		ТаблицаСРасшифровкой.ТаблицаЗначений = ТаблицаСОшибками;
		Если Не ТаблицаСРасшифровкой.Открыта() Тогда
			ТаблицаСРасшифровкой.Открыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура КонтрольСпискаСчетовПриИзмененииСтатуса(СписокСчетов, НовыйСтатус, Отказ) Экспорт
	
	ЗапросПроверкаСчетов = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_СчетНаОплату.Ссылка КАК СчетНаОплату,
	|	абс_СчетНаОплату.Контрагент,
	|	ВЫБОР
	|		КОГДА абс_БлокировкаОплатыКонтрагентам.абс_Контрагент ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК КонтрагентЗаблокирован,
	|	абс_СчетНаОплату.СтатусСчета
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_БлокировкаОплатыКонтрагентам КАК абс_БлокировкаОплатыКонтрагентам
	|		ПО абс_СчетНаОплату.Контрагент = абс_БлокировкаОплатыКонтрагентам.абс_Контрагент
	|			И абс_СчетНаОплату.Организация = абс_БлокировкаОплатыКонтрагентам.абс_Организация
	|ГДЕ
	|	абс_СчетНаОплату.Ссылка В(&МассивСчетов)"
	);
	
	ЗапросПроверкаСчетов.УстановитьПараметр("МассивСчетов", СписокСчетов);
	
	ВыборкаПроверкаСчетов = ЗапросПроверкаСчетов.Выполнить().Выбрать();
	
	Пока ВыборкаПроверкаСчетов.Следующий() Цикл
		
		ИндексСтатусаСогласован = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.Согласован);
		ИндексТекСтатуса 		= мСписокСтатусов.Найти(ВыборкаПроверкаСчетов.СтатусСчета);
		// {{ТТК Лапин А. Заявка № 26.04.2016 начало
		// {{Новый код:
		Если НовыйСтатус <> Перечисления.абсСтатусыСчетов.Отказ Тогда
			Если ИндексТекСтатуса < ИндексСтатусаСогласован Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Счет: " + ВыборкаПроверкаСчетов.СчетНаОплату + ". Статус счета не может быть меньше ""Согласован"".", Отказ);	
			КонецЕсли;
		КонецЕсли;
		// }}Новый код:
		// {{Старый код:
		//Если ИндексТекСтатуса < ИндексСтатусаСогласован Тогда
		//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Счет: " + ВыборкаПроверкаСчетов.СчетНаОплату + ". Статус счета не может быть меньше ""Согласован"".", Отказ);	
		//КонецЕсли;
		// }}ТТК Лапин А. Заявка № 26.04.2016 окончание
		
		Если НовыйСтатус = Перечисления.абсСтатусыСчетов.ВОплату И ВыборкаПроверкаСчетов.КонтрагентЗаблокирован Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Счет: " + ВыборкаПроверкаСчетов.СчетНаОплату + ", Контрагент: " + ВыборкаПроверкаСчетов.Контрагент + ". Контрагент заблокирован для оплаты.", Отказ);	
		КонецЕсли;
		Если НовыйСтатус = Перечисления.абсСтатусыСчетов.ВОплату И НЕ ВыборкаПроверкаСчетов.СчетНаОплату.Технический Тогда
			Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникДК) = Неопределено Тогда 
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Счет: " + ВыборкаПроверкаСчетов.СчетНаОплату  + ". Счет не технический и перевести в оплату его может только сотрудник казначейства", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



ТаблицаСОшибками = Новый ТаблицаЗначений;
мСписокСтатусов = абс_БизнесПроцессы.ПолучитьМассивСтатусовСчетаНаОплату();
мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);  //  Ермолов Е.Л.  27.04.2015 000032638
мОрганизация =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");

