Перем АДОДБСоединение; 
Перем АДОДБКоманда;

Перем МассивОшибок;
Перем МассивСостояния;

Перем ЛогЗаказы;


Процедура ИнициализироватьПараметры() Экспорт
		
	МассивОшибок = Новый Массив;
	
	МассивСостояния = Новый Массив;
	МассивСостояния.Добавить("Начало выгрузки"); 				 	//0	
	МассивСостояния.Добавить("Конец выгрузки"); 					//1
	МассивСостояния.Добавить("Не удалось установить соединение");	//2
		
	
	//ЛогЗаказы	= РегистрыСведений.абс_ЛогКонтрагенты.СоздатьНаборЗаписей();
		
	ЗагрузитьНастройкиОбработки();
		
КонецПроцедуры

Процедура ЗагрузитьНастройкиОбработки() Экспорт 
	
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("абс_ИнтеграцияLotus",,,"абс_ИнтеграцияLotus");
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);				
	КонецЕсли;
	
	НастройкаОбменаПроекты = Справочники.абс_НастройкиОбменаСSQL.ИнтеграцияLotus_ПолучитьНастройкуОбмена("СправочникСсылка.Проекты");
	НастройкаОбменаЗаказы  = Справочники.абс_НастройкиОбменаСSQL.ИнтеграцияLotus_ПолучитьНастройкуОбмена("ДокументСсылка.ЗаказПокупателя");
	
	Если ЗначениеЗаполнено(НастройкаОбменаПроекты) Тогда 
		База = НастройкаОбменаПроекты.ИмяБазыДанныхSQL;
		Сервер = НастройкаОбменаПроекты.ИмяСервераSQL;
		Пользователь = НастройкаОбменаПроекты.ИмяПользователя;
		Пароль = НастройкаОбменаПроекты.Пароль;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаОбменаЗаказы) Тогда 
		База = ?(ЗначениеЗаполнено(База), База, НастройкаОбменаЗаказы.ИмяБазыДанныхSQL);
		Сервер = ?(ЗначениеЗаполнено(База), Сервер, НастройкаОбменаЗаказы.ИмяСервераSQL);
		Пользователь = ?(ЗначениеЗаполнено(База), Пользователь, НастройкаОбменаЗаказы.ИмяПользователя);
		Пароль = ?(ЗначениеЗаполнено(База), Пароль, НастройкаОбменаЗаказы.Пароль);
	КонецЕсли;
	
	Справочники.абс_НастройкиОбменаСSQL.СоздатьРегламентноеЗадание(НастройкаОбменаПроекты);
	Справочники.абс_НастройкиОбменаСSQL.СоздатьРегламентноеЗадание(НастройкаОбменаЗаказы);
			
КонецПроцедуры

Процедура СохранитьНастройкиОбработки() Экспорт
	
	Настройки = Новый Структура("СоздаватьТаблицыTPI");
								
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);	
	ХранилищеОбщихНастроек.Сохранить("абс_ИнтеграцияLotus",  ,Настройки, ,"абс_ИнтеграцияLotus");
	
	СохранитьНастройкиПодключения(НастройкаОбменаПроекты);
	СохранитьНастройкиПодключения(НастройкаОбменаЗаказы);
		
КонецПроцедуры

Функция АДОСоединениеУстановить() Экспорт
	
	Попытка
		АДОДБСоединение = Новый COMОбъект("ADODB.Connection");
		АДОДБКоманда = Новый COMОбъект("ADODB.Command");
	Исключение
		//	Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	АутентификацияWindows = Ложь;
	
	Если НЕ АутентификацияWindows Тогда	
		АДОДБСоединение.ConnectionString = "Provider=sqloledb;Data Source=" 
			+ СокрЛП(Сервер)
			+ ";Initial Catalog=" + СокрЛП(База)
			+ ";User Id=" + СокрЛП(Пользователь)
			+ ";Password=" + Пароль + ";";
	Иначе	
		АДОДБСоединение.ConnectionString = "Provider=sqloledb;Integrated Security=SSPI;Persist Security Info=False;Data Source=" 
			+ СокрЛП(Сервер)
			+ ";Initial Catalog=" + СокрЛП(База);
	КонецЕсли;
	
	
	Попытка
		АДОДБСоединение.ConnectionTimeout = 5;
		АДОДБСоединение.CommandTimeout = 6000;
		АДОДБСоединение.IsolationLevel = 256;
		АДОДБКоманда.CommandTimeout = 6000;
		
		АДОДБСоединение.Open();	
		АДОДБКоманда.ActiveConnection = АДОДБСоединение;
		Статус = Истина;
	Исключение	
		АДОДБСоединение = Неопределено;
		АДОДБКоманда = Неопределено;
		Статус = Ложь;
		//Сообщить("Не удалось установить соединение с промежуточной базой данных");
	КонецПопытки;
	
	Возврат Статус;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА ЗАКАЗОВ ПОКУПАТЕЛЕЙ

Процедура ЗагрузитьЗаказыПокупателей() Экспорт
		
	Если Не АДОСоединениеУстановить() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьТаблицуSQL("OrdersOM");
		
	АДОДБКоманда.CommandText = ПолучитьТекстЗапросаЗаказыПокупателей();	
	
	Попытка
		Result = АДОДБКоманда.Execute();
	Исключение
		Сообщить(ОписаниеОшибки());
		Сообщить(АДОДБКоманда.CommandText);
		Возврат;
	КонецПопытки;
		
	ОбработатьВыборкуЗаказовПокупателей(Result); 
		
КонецПроцедуры

Функция ПолучитьТекстЗапросаЗаказыПокупателей()
	
	Возврат "";
	
КонецФункции

Процедура ОбработатьВыборкуЗаказовПокупателей(Result)
	
	Пока НЕ Result.eof() Цикл

		СтруктураРеквизитов = Новый Структура("ID",
					Result.fields.item("OM_number").value);
					
		Result.MoveNext();			
		Отказ = Ложь;
		
		Объект = Неопределено;
							
		Попытка 
			Объект.Записать();
			ЗаписатьОшибку(0, ЛогЗаказы, СтруктураРеквизитов, , ,Объект);
		Исключение
			ЗаписатьОшибку(1, ЛогЗаказы, СтруктураРеквизитов, ИнформацияОбОшибке().Описание, Отказ, Объект);				
		КонецПопытки;
							
	КонецЦикла;
	
	ЗаписатьЛоги(ЛогЗаказы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ПРОЕКТОВ

Процедура ВыгрузитьПроекты() Экспорт
		
	Если Не АДОСоединениеУстановить() Тогда	
		Возврат;
	КонецЕсли;
	
	СоздатьТаблицуSQL("Projects");
	
	РезультатЗапроса = ПолучитьРезультатЗапроса_Проекты();
	
	МассивПолейУсловия = Новый Массив;
	МассивПолейУсловия.Добавить("project_id");
	МассивПолейУсловия.Добавить("status");
	
	МассивПолейИсключения = Новый Массив;
	МассивПолейИсключения.Добавить("Ссылка");

	ЗаполнитьТаблицуСПроверкой("Projects", РезультатЗапроса, МассивПолейУсловия, МассивПолейИсключения); 
		
КонецПроцедуры

Функция ПолучитьРезультатЗапроса_Проекты()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПроектыИзменения.Ссылка
	                      |ПОМЕСТИТЬ ВТ_Изменения
	                      |ИЗ
	                      |	Справочник.Проекты.Изменения КАК ПроектыИзменения
	                      |ГДЕ
	                      |	ПроектыИзменения.Узел = &Узел
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Проекты.Наименование КАК name,
	                      |	Проекты.ДатаНачала КАК start_date,
	                      |	Проекты.ДатаОкончания КАК end_date,
	                      |	Проекты.Ответственный.Наименование КАК senior,
	                      |	Проекты.Описание КАК description,
	                      |	Проекты.КодПроектаКомпании КАК code_project,
	                      |	Проекты.Закрыт КАК close_flg,
	                      |	ПРЕДСТАВЛЕНИЕ(Проекты.абс_Статус) КАК status,
	                      |	Проекты.абс_Case КАК case_flg,
	                      |	Проекты.абс_Организация.Код КАК organization,
	                      |	Проекты.абс_Доходный КАК profitable,
	                      |	Проекты.абс_ОснованиеПроекта.Наименование КАК basis_project,
	                      |	Проекты.абс_РуководительПроекта.Наименование КАК project_manager,
	                      |	Проекты.абс_ТЭО.Наименование КАК TEO,
	                      |	Проекты.абс_ВидПроекта.Наименование КАК type_project,
	                      |	Проекты.абс_Портфель.Код КАК potfolio,
	                      |	Проекты.Код КАК project_id,
	                      |	Проекты.Ссылка
	                      |ИЗ
	                      |	ВТ_Изменения КАК Изменения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	                      |		ПО Изменения.Ссылка = Проекты.Ссылка");
						  
	Запрос.УстановитьПараметр("Узел", НастройкаОбменаПроекты.Узел);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ЗаполнитьТаблицуСПроверкой(Таблица, Результат, МассивПолейУсловия, МассивПолейИсключения)
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Узел = НастройкаОбменаПроекты.Узел; 
	
	Колонки = Результат.Колонки;
	ПоляИдентификаторы = "";
	Для каждого Колонка Из Колонки Цикл
		Если МассивПолейИсключения.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПоляИдентификаторы = ПоляИдентификаторы + Колонка.Имя + ",";
	КонецЦикла;
	ПоляИдентификаторы = Лев(ПоляИдентификаторы, СтрДлина(ПоляИдентификаторы)-1);	
		
	НачалоТекстаКоманды = "UPDATE " + Таблица + " SET ";  
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОбновление = "";
		ТекстВставка = "";
		ТекстПоляУсловия = "";
		
		Для каждого Колонка Из Колонки Цикл
			Если МассивПолейИсключения.Найти(Колонка.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТекстОбновление = ТекстОбновление + " " + Колонка.Имя + " = "  + ПолучитьПредставлениеПоля(Выборка[Колонка.Имя]) + ",";
			ТекстВставка = ТекстВставка + ПолучитьПредставлениеПоля(Выборка[Колонка.Имя]) + ",";
			Если МассивПолейУсловия.Найти(Колонка.Имя) <> Неопределено Тогда
				Если ПолучитьПредставлениеПоля(Выборка[Колонка.Имя]) = "NULL" тогда
					ТекстПоляУсловия = ТекстПоляУсловия + " " + Колонка.Имя + " IS NULL AND";					
				Иначе
					ТекстПоляУсловия = ТекстПоляУсловия + " " + Колонка.Имя + " = "  + ПолучитьПредставлениеПоля(Выборка[Колонка.Имя]) + " AND";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекстОбновление = Лев(ТекстОбновление, СтрДлина(ТекстОбновление)-1);
		ТекстВставка = Лев(ТекстВставка, СтрДлина(ТекстВставка)-1);
		ТекстПоляУсловия = Лев(ТекстПоляУсловия, СтрДлина(ТекстПоляУсловия)-3);
		ТекстУсловия = " WHERE " + ТекстПоляУсловия + " IF (@@ROWCOUNT = 0 ) BEGIN INSERT INTO " + Таблица + " (";   
		
		АДОДБКоманда.CommandText = НачалоТекстаКоманды + ТекстОбновление + ТекстУсловия + ПоляИдентификаторы + ") VALUES (" + ТекстВставка + " ) END";	
		
		Попытка
			АДОДБКоманда.Execute();
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(АДОДБКоманда.CommandText);
			Продолжить;
		КонецПопытки;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Выборка.Ссылка);
		
	КонецЦикла;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПОИСК ССЫЛОК 

Функция ПолучитьСсылкуНаЭлемент_БиллингID(Тип, ID)
	
	//так как договор необходимо получать с доп. условиями
	Если Тип = "ДоговорыКонтрагентов" Тогда 
		Возврат ПодобратьДоговорСсылка_БиллингID(ID);
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Объект.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Объект
	|ГДЕ
	|	Объект.абс_биллинг_ID = &ID");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорыКонтрагентов", Тип);
	Запрос.УстановитьПараметр("ID", ID);  
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	Иначе
		Ссылка = Справочники[Тип].ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ПолучитьСсылкуНаЭлемент_Код1С(Тип, ID)
	
	//так как договор необходимо получать с доп. условиями
	Если Тип = "ДоговорыКонтрагентов" Тогда 
		Возврат ПодобратьДоговорСсылка_Код1С(ID);
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Объект.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Объект
	|ГДЕ
	|	Объект.Код = &ID");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорыКонтрагентов", Тип);
	Запрос.УстановитьПараметр("ID", ID);  
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	Иначе
		Ссылка = Справочники[Тип].ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ПодобратьДоговорСсылка_БиллингID(ID)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Объект.Ссылка
	                      |ИЗ
	                      |	Справочник.ДоговорыКонтрагентов КАК Объект
	                      |ГДЕ
	                      |	Объект.абс_биллинг_ID = &ID
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Объект.абс_Действующий УБЫВ");
	
	Запрос.УстановитьПараметр("ID", ID);  
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	Иначе
		Ссылка = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ПодобратьДоговорСсылка_Код1С(ID)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Объект.Ссылка
	                      |ИЗ
	                      |	Справочник.ДоговорыКонтрагентов КАК Объект
	                      |ГДЕ
	                      |	Объект.Код = &ID
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Объект.абс_Действующий УБЫВ");
	
	Запрос.УстановитьПараметр("ID", ID);  
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	Иначе
		Ссылка = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ПолучитьДокумент(Тип, ID)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Объект.Ссылка
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК Объект
	                      |ГДЕ
	                      |	Объект.абс_биллинг_ID = &ID");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеализацияТоваровУслуг", Тип);
	Запрос.УстановитьПараметр("ID", ID);  
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Ложь;
	Иначе
		Объект = Документы[Тип].СоздатьДокумент();
		Объект.абс_биллинг_ID = ID;
		Объект.УстановитьСсылкуНового(Документы[Тип].ПолучитьСсылку(Новый УникальныйИдентификатор()))
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ

Процедура ЗаписатьДокумент(Объект)
	Если ПроводитьЗагруженныеДокументы Тогда 
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		Объект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьОшибочныйДокументДокумент(Объект)
	Если ЗаписыватьОшибочные Тогда 
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьОшибку(НомерОшибки, НаборЗаписей, СтруктураРеквизитов, ЗначениеРеквизита = "", Отказ = Неопределено, Элемент = Неопределено)
	
	//Запись = Регистр.СоздатьМенеджерЗаписи();
	//НаборЗаписей = Регистр.СоздатьНаборЗаписей();
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, СтруктураРеквизитов);
	Запись.Период = ТекущаяДата();
	Запись.НомерОшибки = НомерОшибки;
	Запись.ОписаниеОшибки = МассивОшибок[НомерОшибки] + ?(ЗначениеРеквизита = "", "", ": <" + ЗначениеРеквизита + ">");
	
	
	Если Отказ <> Неопределено Тогда
		Запись.Отказ = Истина;
		Отказ = Истина;
	Иначе	
		//Запись.Элемент = Элемент.Ссылка;
		Если Элемент <> Неопределено Тогда 
			Запись.Элемент = ?(ЗначениеЗаполнено(Элемент.Ссылка),Элемент.Ссылка,Элемент.ПолучитьСсылкуНового());
		КонецЕсли;
	КонецЕсли;
	
	//Запись.Записать();
	
КонецПроцедуры

Процедура ЗаписатьВЖурнал(ВидЗадания, ВидСообщения, НомерСообщения, ДополнениеКСообщению = "")
	
	//Запись 					= РегистрыСведений.абс_ЖурналОбменаСБиллингом.СоздатьМенеджерЗаписи();
	//Запись.Период 			= ТекущаяДата();
	//Запись.ВидЗадания		= ВидЗадания;
	//Запись.ВидСообщения 	= ВидСообщения;
	//Запись.Пользователь		= глЗначениеПеременной("глТекущийПользователь");
	//Запись.НомерСообщения	= НомерСообщения;
	//Запись.Сообщение		= МассивСостояния[НомерСообщения] + ?(ДополнениеКСообщению = "", "", ": <" + ДополнениеКСообщению + ">");
	//
	//Запись.Записать(Ложь);
	
КонецПроцедуры

Процедура ЗаписатьЛоги(Лог)
	
	Если Лог.Количество() > 0 Тогда 
		Лог.Записать(Ложь);
	КонецЕсли;
	
	Лог.Очистить();
	
КонецПроцедуры

Функция ПолучитьПредставлениеПоля(Поле)
	
	Если ТипЗнч(Поле) = Тип("Число") Тогда
		Возврат Формат(Поле, "ЧРД=.; ЧН=0; ЧГ=0");
	ИначеЕсли Поле = NULL ИЛИ НЕ ЗначениеЗаполнено(Поле) Тогда
		Возврат "NULL";
	ИначеЕсли ТипЗнч(Поле) = Тип("Строка") Тогда
		Возврат "'" + СокрЛП(ОбработатьСтроку(Поле)) + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Булево") Тогда
		Возврат ?(Поле, "1", "0");
	ИначеЕсли ТипЗнч(Поле) = Тип("Дата") Тогда
		Возврат "'" + Формат(Поле, "ДФ='yyyyMMdd HH:mm:ss'") + "'";
	КонецЕсли;
	
КонецФункции

Функция ОбработатьСтроку(Знач Значение)
	
	Значение = СтрЗаменить(Значение, """", "");
	Значение = СтрЗаменить(Значение, "'", "");
	
	Возврат Значение;
	
КонецФункции

Процедура СохранитьНастройкиПодключения(Настройка)
	
	Если База <> НастройкаОбменаПроекты.ИмяБазыДанныхSQL
		ИЛИ Сервер <> НастройкаОбменаПроекты.ИмяСервераSQL
		ИЛИ Пользователь <> НастройкаОбменаПроекты.ИмяПользователя
		ИЛИ Пароль = НастройкаОбменаПроекты.Пароль Тогда 	
			НастройкаОбъект = Настройка.ПолучитьОбъект();
			НастройкаОбъект.ИмяБазыДанныхSQL = База;
			НастройкаОбъект.ИмяСервераSQL = Сервер;
			НастройкаОбъект.ИмяПользователя = Пользователь;
			НастройкаОбъект.Пароль = Пароль;
			НастройкаОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьТаблицуSQL(ИмяТаблицы)
	
	Если НЕ СоздаватьТаблицыTPI Тогда 
		Возврат;
	КонецЕсли;
	
	АДОДБКоманда.CommandText = ПолучитьМакет(ИмяТаблицы).ПолучитьТекст();
	
	Попытка
		АДОДБКоманда.Execute();
	Исключение
		Сообщить(ОписаниеОшибки());
		Сообщить(АДОДБКоманда.CommandText);
	КонецПопытки;
	
КонецПроцедуры



