
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект"); 
	ОбработкаОбъект.ЗагрузитьНастройкиОбработки();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	СтруктураПроекты = ПолучитьСтруктуруРегламентногоЗадания(Объект.НастройкаОбменаПроекты); 
	Элементы.РасписаниеПроекты.Заголовок = Строка(СтруктураПроекты.Расписание);
	РеглЗаданиеПроектыИспользование = СтруктураПроекты.Использование;
	
	СтруктураЗаказы = ПолучитьСтруктуруРегламентногоЗадания(Объект.НастройкаОбменаЗаказы); 
	Элементы.РасписаниеЗаказов.Заголовок = Строка(СтруктураЗаказы.Расписание);	
	РеглЗаданиеЗаказыИспользование = СтруктураЗаказы.Использование;
		
	ЛогПроекты.Параметры.УстановитьЗначениеПараметра("Узел", Объект.НастройкаОбменаПроекты.Узел);
	//ЛогВыгрузкаКонтрагентов.Параметры.УстановитьЗначениеПараметра("Узел", Объект.УзелОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьФоновыйЗаданияКлиент", 15);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С РАСПИСАНИЕМ

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруРегламентногоЗадания(НастройкаОбмена)
	
	СтруктураЗадания = Новый Структура("Расписание, Использование");
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена.РегламентноеЗадание) Тогда
		Возврат СтруктураЗадания;
	КонецЕсли;
	
	Попытка
		УИД = Новый УникальныйИдентификатор(НастройкаОбмена.РегламентноеЗадание);
	Исключение
		Возврат СтруктураЗадания;
	КонецПопытки;
	
	РеглЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УИД);
	
	Если РеглЗадание = Неопределено Тогда 
		Возврат СтруктураЗадания;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураЗадания, РеглЗадание);
	
	Возврат СтруктураЗадания; 
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьРасписаниеРегламентногоЗадания(НастройкаОбмена, Расписание)
	
	РегламетноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(НастройкаОбмена.РегламентноеЗадание));
	РегламетноеЗадание.Расписание = СтруктураВРасписание(Расписание);
	РегламетноеЗадание.Записать();
	
КонецПроцедуры

&НаКлиенте
Функция РасписаниеВСтруктуру(Знач Расписание) Экспорт
	
	ЗначениеРасписания = Расписание;
	Если ЗначениеРасписания = Неопределено Тогда
		ЗначениеРасписания = Новый РасписаниеРегламентногоЗадания();
	КонецЕсли;
	СписокПолей = "ВремяЗавершения,ВремяКонца,ВремяНачала,ДатаКонца,ДатаНачала,ДеньВМесяце,ДеньНеделиВМесяце," + 
		"ДниНедели,ИнтервалЗавершения,Месяцы,ПаузаПовтора,ПериодНедель,ПериодПовтораВТечениеДня,ПериодПовтораДней";
	Результат = Новый Структура(СписокПолей);
	ЗаполнитьЗначенияСвойств(Результат, ЗначениеРасписания, СписокПолей);
	ДетальныеРасписанияДня = Новый Массив;
	Для каждого РасписаниеДля Из Расписание.ДетальныеРасписанияДня Цикл
		ДетальныеРасписанияДня.Добавить(РасписаниеВСтруктуру(РасписаниеДля));
	КонецЦикла;
	Результат.Вставить("ДетальныеРасписанияДня", ДетальныеРасписанияДня);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураВРасписание(Знач СтруктураРасписания) Экспорт
	
	Если СтруктураРасписания = Неопределено Тогда
		Возврат Новый РасписаниеРегламентногоЗадания();
	КонецЕсли;
	СписокПолей = "ВремяЗавершения,ВремяКонца,ВремяНачала,ДатаКонца,ДатаНачала,ДеньВМесяце,ДеньНеделиВМесяце," + 
		"ДниНедели,ИнтервалЗавершения,Месяцы,ПаузаПовтора,ПериодНедель,ПериодПовтораВТечениеДня,ПериодПовтораДней";
	Результат = Новый РасписаниеРегламентногоЗадания;
	ЗаполнитьЗначенияСвойств(Результат, СтруктураРасписания, СписокПолей);
	ДетальныеРасписанияДня = Новый Массив;
	Для каждого Расписание Из СтруктураРасписания.ДетальныеРасписанияДня Цикл
		  ДетальныеРасписанияДня.Добавить(СтруктураВРасписание(Расписание));
	КонецЦикла;
	Результат.ДетальныеРасписанияДня = ДетальныеРасписанияДня;  
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИспользованиеРегламентногоЗадания(НастройкаОбмена, Использование)
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена.РегламентноеЗадание) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		УИД = Новый УникальныйИдентификатор(НастройкаОбмена.РегламентноеЗадание);
	Исключение
		Возврат;
	КонецПопытки;
	
	РеглЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УИД);	
	РеглЗадание.Использование = Использование;
	РеглЗадание.Записать();
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	ИспользованиеРегламентногоЗадания(Объект.НастройкаОбменаЗаказы, РеглЗаданиеЗаказыИспользование);
	ИспользованиеРегламентногоЗадания(Объект.НастройкаОбменаПроекты, РеглЗаданиеПроектыИспользование);
	СохранитьНастрйокиСервер();

КонецПроцедуры

&НаСервере
Процедура СохранитьНастрйокиСервер()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект"); 
	ОбработкаОбъект.СохранитьНастройкиОбработки();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФоновыеЗадания(Команда)
	
	ОбновитьФоновыйЗаданияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаПроектов(Команда)
	
	ВыгрузкаПроектовНаСервере();
	ОбновитьФоновыйЗаданияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПериодВыгрузкиПлатежей(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала = Объект.ПериодНачалаВыгрузкиОплат;
	Диалог.Период.ДатаОкончания = Объект.ПериодОкончанияВыгрузкиОплат;

	
	Если Диалог.Редактировать() Тогда 
    	Объект.ПериодНачалаВыгрузкиОплат = НачалоДня(Диалог.Период.ДатаНачала);
		Если ЗначениеЗаполнено(Диалог.Период.ДатаОкончания) Тогда 
			Объект.ПериодОкончанияВыгрузкиОплат = КонецДня(Диалог.Период.ДатаОкончания); 
		Иначе
			Объект.ПериодОкончанияВыгрузкиОплат = Дата(1,1,1);	
		КонецЕсли
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаЗаказов(Команда)
	
	ЗагрузкаЗаказовНаСервере();
	ОбновитьФоновыйЗаданияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеЗаказы(Команда)
	
	СтруктураЗадания = ПолучитьСтруктуруРегламентногоЗадания(Объект.НастройкаОбменаЗаказы);
	Если ТипЗнч(СтруктураЗадания.Расписание) <> Тип("РасписаниеРегламентногоЗадания") Тогда 
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(СтруктураЗадания.Расписание);

	Если Диалог.ОткрытьМодально() Тогда
		ЗаписатьРасписаниеРегламентногоЗадания(Объект.НастройкаОбменаЗаказы, РасписаниеВСтруктуру(Диалог.Расписание));
		Элементы.РасписаниеЗаказов.Заголовок = Строка(Диалог.Расписание);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПроекты(Команда)
	
	СтруктураЗадания = ПолучитьСтруктуруРегламентногоЗадания(Объект.НастройкаОбменаПроекты);
	Если ТипЗнч(СтруктураЗадания.Расписание) <> Тип("РасписаниеРегламентногоЗадания") Тогда 
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(СтруктураЗадания.Расписание);
	
	Если Диалог.ОткрытьМодально() Тогда
		ЗаписатьРасписаниеРегламентногоЗадания(Объект.НастройкаОбменаПроекты, РасписаниеВСтруктуру(Диалог.Расписание));
		Элементы.РасписаниеПроекты.Заголовок = Строка(Диалог.Расписание);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеПериодаВыгрузкиНачислений(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала = Объект.ПериодНачалаЗагрузкиНачислений;
	Диалог.Период.ДатаОкончания = Объект.ПериодОкончанияЗагрузкиНачислений;

	
	Если Диалог.Редактировать() Тогда 
    	Объект.ПериодНачалаЗагрузкиНачислений = НачалоДня(Диалог.Период.ДатаНачала);
		
		Если ЗначениеЗаполнено(Диалог.Период.ДатаОкончания) Тогда 
			Объект.ПериодОкончанияЗагрузкиНачислений = КонецДня(Диалог.Период.ДатаОкончания); 
		Иначе
			Объект.ПериодОкончанияЗагрузкиНачислений  = Дата(1,1,1);	
		КонецЕсли
 
	КонецЕсли;

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

 
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура УстановитьЭлементОтбора(ДинамическийСписок, ЭлементОтбора, ВидСравнения)
	
	Элемент = ДинамическийСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период");
	Элемент.ВидСравнения = ВидСравнения;	
	Элемент.ПравоеЗначение = ЭлементОтбора;	
	Элемент.Использование = ЗначениеЗаполнено(ЭлементОтбора);
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;  
			
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаЗаказовНаСервере()
		
	Если Объект.НаКлиенте Тогда 
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПараметры();
		ОбработкаОбъект.ЗагрузитьЗаказыПокупателей();
	Иначе
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить(Объект.НастройкаОбменаЗаказы.Код);
		МассивПараметров.Добавить("");	
		ФоновыеЗадания.Выполнить("абс_ПроцедурыОбмена.абс_ОбменСSQL", МассивПараметров, Объект.НастройкаОбменаЗаказы.РегламентноеЗадание, Объект.НастройкаОбменаЗаказы.Наименование);		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ВыгрузкаПроектовНаСервере()
	
	Если Объект.НаКлиенте Тогда 
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПараметры();
		ОбработкаОбъект.ВыгрузитьПроекты();
	Иначе
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить(Объект.НастройкаОбменаПроекты.Код);
		МассивПараметров.Добавить("");	
		ФоновыеЗадания.Выполнить("абс_ПроцедурыОбмена.абс_ОбменСSQL", МассивПараметров, Объект.НастройкаОбменаПроекты.РегламентноеЗадание, Объект.НастройкаОбменаПроекты.Наименование);		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФоновыйЗаданияКлиент()
	
	СписокАктивныхЗаданий.Очистить();
	ОбновитьФоновыйЗаданияСервер();
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьФоновыйЗаданияСервер()
	
	ТЗ = ДанныеФормыВЗначение(СписокАктивныхЗаданий, Тип("ТаблицаЗначений"));
	Отбор = Новый Структура("Наименование, Состояние", "СправочникСсылка.Проекты", СостояниеФоновогоЗадания.Активно);
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);	
	Для Каждого фоновое из МассивФоновыхЗаданий Цикл 	
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Задание = ?(ЗначениеЗаполнено(фоновое.Наименование), фоновое.Наименование, фоновое.РегламентноеЗадание.Наименование);
		НоваяСтрока.Состояние = фоновое.Состояние;
		НоваяСтрока.Начало = фоновое.Начало;
		НоваяСтрока.Конец = фоновое.Конец;	
	КонецЦикла;
	
	Отбор = Новый Структура("Наименование, Состояние", "ДокументСсылка.ЗаказПокупателя", СостояниеФоновогоЗадания.Активно);
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);	
	Для Каждого фоновое из МассивФоновыхЗаданий Цикл 		
		НоваяСтрока = ТЗ.Добавить();	
		НоваяСтрока.Задание = ?(ЗначениеЗаполнено(фоновое.Наименование), фоновое.Наименование, фоновое.РегламентноеЗадание.Наименование);
		НоваяСтрока.Состояние = фоновое.Состояние;
		НоваяСтрока.Начало = фоновое.Начало;
		НоваяСтрока.Конец = фоновое.Конец;	
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТЗ, СписокАктивныхЗаданий); 	
	
КонецПроцедуры






