Перем РассчитанныеПоказатели;
Перем СозданныеВременныеТаблицы;
Перем МВТ;


///////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции

Функция ПолучитьДеревоВычисленияПоказателей(МассивПоказателей) Экспорт
	
	ДеревоВычисления = Новый ДеревоЗначений;
	ДеревоВычисления.Колонки.Добавить("Показатель");
	ДеревоВычисления.Колонки.Добавить("Идентификатор");
	ДеревоВычисления.Колонки.Добавить("Значение");
	
	Для Каждого Показатель Из МассивПоказателей Цикл
		СтрокаПоказателя = ДеревоВычисления.Строки.Добавить();
		СтрокаПоказателя.Показатель = Показатель;
		СтрокаПоказателя.Идентификатор = Показатель.Код;
		ЗаполнитьДеревоИсточников(Показатель, СтрокаПоказателя);
	КонецЦикла;
	
	Возврат ДеревоВычисления;
	
КонецФункции

Функция ВычислитьПоказатели(МассивПоказателей) Экспорт
	
	Инициализация();
	
	//ДеревоРассчета = ПолучитьДеревоВычисленияПоказателей(МассивПоказателей);
	
	ДеревоВычисления = ПолучитьДеревоВычисленияПоказателей(МассивПоказателей);
	
	ВычислитьПоказателиПоДереву(ДеревоВычисления, Отказ);
	
КонецФункции

Функция ВыполнитьЗапросПоказателя(ТекстЗапроса, ТаблицаПараметров) Экспорт
	
	Попытка
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МВТ;
		Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(НачалоПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ДатаРассчета", Новый Граница(ДатаРассчета, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация", Организация);
		Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
			Запрос.УстановитьПараметр(СтрокаПараметра.Параметр, СтрокаПараметра.Значение);
		КонецЦикла;
		
		Возврат Запрос.Выполнить();
	Исключение
		Отказ = Истина;
		ОписаниеОшибки = "Ошибка запроса";
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьВременныеТаблицы(МассивВременныхТаблиц) Экспорт
	
	Для Каждого ВременнаяТаблица Из МассивВременныхТаблиц Цикл
		
		// проверяем, что ВТ еще не создана
		Если СозданныеВременныеТаблицы.Найти(ВременнаяТаблица.Код)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// заполняем таблицы-источники
		ЗаполнитьВременныеТаблицы(ВременнаяТаблица.ВременныеТаблицы.ВыгрузитьКолонку("ВременнаяТаблица"));
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ТекстЗапроса = ВременнаяТаблица.ТекстЗапроса;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,Символы.ПС," ");
			ПозицияИЗ = Найти(ВРег(ТекстЗапроса)," ИЗ ");
			ТекстЗапроса = Лев(ТекстЗапроса,ПозицияИЗ-1)+" ПОМЕСТИТЬ "+ВременнаяТаблица.Код+" "+Сред(ТекстЗапроса,ПозицияИЗ);
			
			Запрос = Новый Запрос(ТекстЗапроса);
			
			Запрос.МенеджерВременныхТаблиц = МВТ;
			ТаблицаПараметров = ВременнаяТаблица.ПараметрыЗапроса.Получить();
			Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
				Запрос.УстановитьПараметр(СтрокаПараметра.Параметр, СтрокаПараметра.Значение);
			КонецЦикла;
			Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(НачалоПериода, ВидГраницы.Включая));
			Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецПериода, ВидГраницы.Включая));
			Запрос.УстановитьПараметр("ДатаРассчета", Новый Граница(ДатаРассчета, ВидГраницы.Включая));
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.Выполнить();
			СозданныеВременныеТаблицы.Добавить(ВременнаяТаблица.Код);
		Исключение
			ОписаниеОшибки = "Ошибка формирования временной таблицы "+ВременнаяТаблица.Код;
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура Инициализация() Экспорт

	НачалоПериода = НачалоДня(НачалоПериода);
	КонецПериода = КонецДня(КонецПериода);
	ДатаРассчета = КонецДня(ДатаРассчета);
	
	РассчитанныеПоказатели = Новый Соответствие;
	СозданныеВременныеТаблицы = Новый Массив;
	МВТ = Новый МенеджерВременныхТаблиц;
	Отказ = Ложь;
КонецПроцедуры

Функция ПолучитьЗначениеПоказателя(Идентификатор) Экспорт
	
	Если РассчитанныеПоказатели=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РассчитанныеПоказатели[Идентификатор];
	
КонецФункции

Процедура Сформировать() Экспорт
	
	РезультатОтчета.Очистить();
	#Если Клиент Тогда
		Результат = абс_СерверныеФункции.СформироватьФинансовыйОтчет(Отчет, НачалоПериода, КонецПериода, ДатаРассчета, Организация.ВыгрузитьЗначения(), ОписаниеОшибки);
		Если ТипЗнч(Результат)<>Тип("ТаблицаЗначений") Тогда
			Отказ = Истина;
		Иначе
			РезультатОтчета.Загрузить(Результат);
		КонецЕсли;
	#Иначе
		
	Если Не ЗначениеЗаполнено(Отчет) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиОтчета = Отчет.СтрокиОтчета;                       
	
	ТаблицаИдентификаторов = СтрокиОтчета.Выгрузить(,"Идентификатор");
	ТаблицаИдентификаторов.Сортировать("Идентификатор Убыв");
	ИдентификаторыСтрок = ТаблицаИдентификаторов.ВыгрузитьКолонку("Идентификатор");
	ТаблицаИдентификаторов = Неопределено;
	
	МассивПоказателей = Новый Массив;
	Для Каждого СтрокаОтчета Из СтрокиОтчета Цикл
		Если Не СтрокаОтчета.Итоговая И ЗначениеЗаполнено(СтрокаОтчета.Значение) Тогда
			МассивПоказателей.Добавить(СтрокаОтчета.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// рассчитываем показатели отчета
	
	ВычислитьПоказатели(МассивПоказателей);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// заполняем таблицу результата отчета
	
	Для Каждого СтрокаОтчета Из СтрокиОтчета Цикл
		СтрокаРезультат = РезультатОтчета.Добавить();
		Если СтрокаОтчета.Уровень>0 Тогда
			СтрокаРезультат.Код = СтрокаОтчета.Код;
			СтрокаРезультат.Идентификатор = СтрокаОтчета.Идентификатор;
			СтрокаРезультат.Наименование = СтрокаОтчета.Наименование;
			СтрокаРезультат.Комментарий = СтрокаОтчета.Комментарий;
			СтрокаРезультат.Формула = ?(СтрокаОтчета.Итоговая, СтрокаОтчета.Значение, "");
			СтрокаРезультат.Значение = ?(СтрокаОтчета.Итоговая, 0, ?(ЗначениеЗаполнено(СтрокаОтчета.Значение),ПолучитьЗначениеПоказателя(СтрокаОтчета.Значение.Код),""));
			СтрокаРезультат.Уровень = СтрокаОтчета.Уровень;
		КонецЕсли;
	КонецЦикла;
	
	// рассчитываем итоговые строки отчета
	
	Для Каждого СтрокаРезультат Из РезультатОтчета Цикл
		Если ЗначениеЗаполнено(СтрокаРезультат.Формула) Тогда
			//АБС ВСТАВКА 35259  28.11.2013 17:17:16  Пугачев
			ФормулаРассчета = СформироватьФормулуРасчета(СтрокаРезультат.Формула);
			//АБС ВСТАВКА 35259 КОНЕЦ
			Попытка
				СтрокаРезультат.Значение = Вычислить(ФормулаРассчета);
			Исключение
				Отказ = Истина;
				ОписаниеОшибки = "Ошибка вычисления итоговой строки "+СтрокаРезультат.Код+" """+СтрокаРезультат.Наименование+"""";
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	#КонецЕсли
	
КонецПроцедуры

//АБС ВСТАВКА 35259  28.11.2013 17:17:16  Пугачев
Функция СформироватьФормулуРасчета(ИсходнаяФормула)
	
	СлужебныеСимволы = " ()/*-+%";
	ДлинаИсходнойФормулы = СтрДлина(ИсходнаяФормула);
	НоваяФормула = "";
	
	ЗаполняетсяИдентификатор = Ложь;
	Для Сч = 1 По ДлинаИсходнойФормулы Цикл
		
		ОчереднойСимвол = Сред(ИсходнаяФормула, Сч, 1);
		Если Найти(СлужебныеСимволы, ОчереднойСимвол)>0 Тогда
			
			Если ЗаполняетсяИдентификатор Тогда
				НоваяФормула = НоваяФормула+""")";
				ЗаполняетсяИдентификатор = Ложь;
			КонецЕсли;
			
			НоваяФормула = НоваяФормула+ОчереднойСимвол;
		Иначе
			Если Не ЗаполняетсяИдентификатор Тогда
				НоваяФормула = НоваяФормула+"ПолучитьЗначениеСтрокиОтчета(""";
				ЗаполняетсяИдентификатор = Истина;
			КонецЕсли;
			
			НоваяФормула = НоваяФормула+ОчереднойСимвол;
		КонецЕсли;
		
	КонецЦикла;
		
	Если ЗаполняетсяИдентификатор Тогда
		НоваяФормула = НоваяФормула+""")";
	КонецЕсли;
	
	Возврат НоваяФормула;
	
КонецФункции
//АБС ВСТАВКА 35259 КОНЕЦ

/////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ЗаполнитьДеревоИсточников(Показатель, ДеревоВычисления)
	
	Для Каждого Источник Из Показатель.ИспользуемыеПоказатели Цикл
		СтрокаПоказателя = ДеревоВычисления.Строки.Добавить();
		СтрокаПоказателя.Показатель = Источник.Показатель;
		СтрокаПоказателя.Идентификатор = Источник.Показатель.Код;
		ЗаполнитьДеревоИсточников(Источник.Показатель, СтрокаПоказателя);
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьПроцедуруПоказателя(ТекстПроцедуры)
	Значение = Неопределено;
	Выполнить(ТекстПроцедуры);
	Возврат Значение;
КонецФункции

Процедура ВычислитьПоказателиПоДереву(ДеревоВычисления, Отказ)
	
	Для Каждого СтрокаПоказатель Из ДеревоВычисления.Строки Цикл
		
		// если показатель рассчитан, то подставляем уже рассчитанное значение
		
		ЗначениеПоказателя = РассчитанныеПоказатели.Получить(СтрокаПоказатель.Идентификатор);
		Если ЗначениеПоказателя<>Неопределено Тогда
			СтрокаПоказатель.Значение = ЗначениеПоказателя;
			Продолжить;
		КонецЕсли;
		
		// показатель еще не рассчитан - рассчитываем сначала показатели-источники
		ВычислитьПоказателиПоДереву(СтрокаПоказатель, Отказ);
		
		// если при рассчете источников возникла проблема, то дальше считать нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Показатель = СтрокаПоказатель.Показатель;
		ВариантРассчета = Показатель.ВариантРассчета;
		
		// теперь дополним временные таблицы запросов, если они еще не вставлены
		ЗаполнитьВременныеТаблицы(СтрокаПоказатель.Показатель.ВременныеТаблицы.ВыгрузитьКолонку("ВременнаяТаблица"));
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ВариантРассчета=Перечисления.абс_ВариантыРассчетаФинансовыхПоказателей.Запрос Тогда
			
			ТаблицаПараметров = СтрокаПоказатель.Показатель.ПараметрыЗапроса.Получить();
			РезультатЗапроса = ВыполнитьЗапросПоказателя(СтрокаПоказатель.Показатель.АлгоритмРассчета, ТаблицаПараметров);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Попытка
				Если Выборка.Количество()>0 Тогда
					Выборка.Следующий();
					Значение = Выборка.Значение;
					
					Если Значение=NULL Тогда
						Отказ = Истина;
						ОписаниеОшибки = "Неверный результат запроса в показателе "+СтрокаПоказатель.Идентификатор;
						Возврат;
					КонецЕсли;
				Иначе
					//Отказ = Истина;
					//ОписаниеОшибки = "Неверный результат запроса в показателе "+СтрокаПоказатель.Идентификатор;
					//Возврат;
					Значение = 0;
				КонецЕсли;
			Исключение
				Отказ = Истина;
				ОписаниеОшибки = "Ошибка вычисления показателя "+СтрокаПоказатель.Идентификатор;
			КонецПопытки;
			
			СтрокаПоказатель.Значение = Значение;
			РассчитанныеПоказатели.Вставить(СтрокаПоказатель.Идентификатор, Значение);
			
		ИначеЕсли ВариантРассчета=Перечисления.абс_ВариантыРассчетаФинансовыхПоказателей.Процедура Тогда
			Значение = Неопределено;
			
			Попытка
				Значение = ВыполнитьПроцедуруПоказателя(Показатель.АлгоритмРассчета);
			Исключение
				Отказ = Истина;
				ОписаниеОшибки = "Ошибка вычисления показателя "+СтрокаПоказатель.Идентификатор;
				Возврат;
			КонецПопытки;
			
			Если Значение=Неопределено Тогда
				Отказ = Истина;
				ОписаниеОшибки = "Неверное значение показателя "+СтрокаПоказатель.Идентификатор;
				Возврат;
			КонецЕсли;
			
			СтрокаПоказатель.Значение = Значение;
			РассчитанныеПоказатели.Вставить(СтрокаПоказатель.Идентификатор, Значение);
			
		ИначеЕсли ВариантРассчета=Перечисления.абс_ВариантыРассчетаФинансовыхПоказателей.Формула Тогда
			ТекстФормулы = Показатель.АлгоритмРассчета;
			Для Каждого ПоказательИсточник Из Показатель.ИспользуемыеПоказатели Цикл
				ТекстФормулы = СтрЗаменить(ТекстФормулы,ПоказательИсточник.Показатель.Код,"ПолучитьЗначениеПоказателя("""+ПоказательИсточник.Показатель.Код+""")");
			КонецЦикла;
			
			Попытка
				Значение = Вычислить(ТекстФормулы);
				Если Значение=Неопределено Тогда
					Отказ = Истина;
					ОписаниеОшибки = "Неверное значение показателя "+СтрокаПоказатель.Идентификатор;
					Возврат;
				КонецЕсли;
				СтрокаПоказатель.Значение = Значение;
				РассчитанныеПоказатели.Вставить(СтрокаПоказатель.Идентификатор, Значение);
			Исключение
				Отказ = Истина;
				ОписаниеОшибки = "Ошибка вычисления показателя "+СтрокаПоказатель.Идентификатор;
			КонецПопытки;
		Иначе
			Отказ = Истина;
			ОписаниеОшибки = "Неверный вариант рассчета для показателя "+СтрокаПоказатель.Идентификатор;
			Возврат;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Функция ПолучитьЗначениеСтрокиОтчета(ИдентификаторСтроки)
	СтрокаОтчета = РезультатОтчета.Найти(ИдентификаторСтроки, "Идентификатор");
	Если СтрокаОтчета=Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтрокаОтчета.Значение;
	КонецЕсли;
КонецФункции


