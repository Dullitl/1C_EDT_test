Перем Версия Экспорт;

Функция ПолучитьСтруктуруТаблицыЗагружаемыхРеквизитов()
	
	Таб = Новый ТаблицаЗначений;
	
	Таб.Колонки.Добавить("НомерКолонки");
	Таб.Колонки.Добавить("ИмяРеквизита");
	
	Возврат Таб;
	
КонецФункции

Функция ПолучитьТаблицуЗагружаемыхРеквизитов() Экспорт
	
	Таб = ПолучитьСтруктуруТаблицыЗагружаемыхРеквизитов();
	
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 1, "абс_НомерЗаказаОМ"));   				// Номер заказа ОМ
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 2, "абс_СтатусЗаказаОМСтрока"));  		// Статус
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 3, "абс_ОписаниеЗаказа"));   				// Описание заказа
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 4, "абс_ИнициаторСтрока"));   			// Инициатор
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 5, "абс_КодПроекта"));   					// Код проекта
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 6, "абс_НаименованиеПроекта"));   		// Наименование проекта
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 7, "абс_ВидПроектаСтрока"));   			// Вид проекта
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 8, "абс_СуммаДоходаСтрока"));   			// Сумма дохода
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 9, "абс_СуммаРасходаСтрока"));   			// Сумма расхода
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 10, "абс_СтоимостьИнсталляцииСтрока"));  	// Стоимость  инсталляции
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 11, "абс_ДатаПодключенияСтрока"));  		// Дата подключения
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 12, "абс_ДатаВыключенияСтрока"));  		// Дата выключения
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 13, "абс_ВидУслуги"));  					// Вид услуги
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 14, "абс_КодМП"));  						// Код МП
	ЗаполнитьЗначенияСвойств(Таб.Добавить(), Новый Структура("НомерКолонки,ИмяРеквизита", 15, "абс_НаименованиеМП"));  				// Наименование МП
	
	Возврат Таб;
	
КонецФункции

Процедура ПроизвестиЧтениеДанныхИзФайла(АдресФайлаВХранилище) Экспорт
	
	ТаблицаЗагрузки.Очистить();
	
	ВремТабЗагрузки = ТаблицаЗагрузки.Выгрузить();
	
	абс_СерверныеФункции.ВыполнитьЗагрузкуИзExcelВТабличныйДокумент(АдресФайлаВХранилище, ПолучитьТаблицуЗагружаемыхРеквизитов(), ВремТабЗагрузки);
	
	ТаблицаЗагрузки.Загрузить(ВремТабЗагрузки);
	
КонецПроцедуры

Процедура ПроизвестиРазборРеквизитов() Экспорт
	
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	
	Для Каждого СтрДанные Из ТаблицаЗагрузки Цикл
		
		СтрДанные.ЗаказПокупателяСсылка = Документы.ЗаказПокупателя.НайтиПоРеквизиту("абс_НомерЗаказаОМ", СтрДанные.абс_НомерЗаказаОМ);
		
		СтрДанные.Организация 					= Организация;
		СтрДанные.абс_СтатусЗаказаОМ 			= ПолучитьПеречислениеПоСинониму(Перечисления.абс_СтатусыЗаказовOM, СтрДанные.абс_СтатусЗаказаОМСтрока);
		//СтрДанные.абс_Инициатор = 
		СтрДанные.абс_ВидПроекта 				= Справочники.абс_ВидыПроектов.НайтиПоНаименованию(СтрДанные.абс_ВидПроектаСтрока, Истина);
		СтрДанные.абс_СуммаДохода 				= ПолучитьЧислоИзСтроки(СтрДанные.абс_СуммаДоходаСтрока);
		СтрДанные.абс_СуммаРасхода 				= ПолучитьЧислоИзСтроки(СтрДанные.абс_СуммаРасходаСтрока);
		СтрДанные.абс_СтоимостьИнсталляции 		= ПолучитьЧислоИзСтроки(СтрДанные.абс_СтоимостьИнсталляцииСтрока);
		СтрДанные.абс_ДатаПодключения 			= ПолучитьДатуИзСтроки(СтрДанные.абс_ДатаПодключенияСтрока, "dd.MM.yyyy");
		СтрДанные.абс_ДатаВыключения 			= ПолучитьДатуИзСтроки(СтрДанные.абс_ДатаВыключенияСтрока, "dd.MM.yyyy");
			
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаписатьИзменения() Экспорт
	
	Для Каждого СтрДанные Из ТаблицаЗагрузки Цикл
		
		ТекЗаказ = Неопределено;
		
		Если ЗначениеЗаполнено(СтрДанные.ЗаказПокупателяСсылка) Тогда
			ТекЗаказ = СтрДанные.ЗаказПокупателяСсылка.ПолучитьОбъект();
			Сообщить("Обновлен Заказ покупателя с номером ОМ: " + СтрДанные.абс_НомерЗаказаОМ);
		Иначе
			ТекЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
			Сообщить("Добавлен Заказ покупателя с номером ОМ: " + СтрДанные.абс_НомерЗаказаОМ);
		КонецЕсли;
		
		ТекЗаказ.Дата = ТекущаяДата();
		
		ЗаполнитьЗначенияСвойств(ТекЗаказ, СтрДанные);

		ТекЗаказ.УстановитьНовыйНомер();
		
		ТекЗаказ.Записать(РежимЗаписиДокумента.Запись);	
		
		СтрДанные.ЗаказПокупателяСсылка = ТекЗаказ.Ссылка;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедуры и функции поиска реквизитов ИТК
Функция ПолучитьПеречислениеПоСинониму(ПеречислениеМенеджер, Синоним)
	
	МетаданныеПеречисления = ПеречислениеМенеджер.Получить(0).Метаданные();
	
	Для Н = 0 По ПеречислениеМенеджер.Количество() - 1 Цикл
		
		ТекЗначениеПеречисления = ПеречислениеМенеджер.Получить(н);
		
		ТекМетаданныеПеречисления = ТекЗначениеПеречисления.Метаданные().ЗначенияПеречисления.Получить(Н);

		Если Врег(СокрЛП(ТекМетаданныеПеречисления.Синоним)) = ВРег(Синоним) ИЛИ Врег(СокрЛП(ТекМетаданныеПеречисления.Комментарий)) = ВРег(Синоним) Тогда
			Возврат ТекЗначениеПеречисления;	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПеречислениеМенеджер.ПустаяСсылка();
	
КонецФункции

Функция ТолькоЦифры(Текст) Экспорт
	Длина = СтрДлина(Текст);
	Для Сч = 1 По Длина Цикл
		ТекКодСимвола = КодСимвола(Сред(Текст, Сч, 1));
		Если  ТекКодСимвола < 48 Или 57 < ТекКодСимвола Тогда
			Возврат Ложь;
		КонецЕсли;		
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ПолучитьТолькоЦифрыИзСтроки(Текст)
	Результат = "";
	Длина = СтрДлина(Текст);
	Для Сч = 1 По Длина Цикл
		ТекСимвол = Сред(Текст, Сч, 1);
		ТекКодСимвола = КодСимвола(ТекСимвол);
		Если  ТекКодСимвола < 48 Или 57 < ТекКодСимвола Тогда
			Продолжить;
		КонецЕсли;
		Результат = Результат + ТекСимвол;
	КонецЦикла;
	Возврат Результат;	
КонецФункции

Функция ПолучитьСоставляющиеДаты(стрДата)
	
	ДлинаСтроки = СтрДлина(стрДата);
	СоставляющиеДаты = Новый Массив;
	СоставляющиеДаты.Добавить("");
	ПоследняяПозицияЦифры = 1;
	
	Сч = 0;
	Пока Истина Цикл
		
		Если Сч = ДлинаСтроки Или СоставляющиеДаты.Количество() >=6 Тогда
			Прервать;
		КонецЕсли;
				
		Если Не ПустаяСтрока(СоставляющиеДаты[СоставляющиеДаты.ВГраница()]) Тогда 
			СоставляющиеДаты.Добавить("");
		КонецЕсли;
		
		Пока Сч < ДлинаСтроки Цикл
			Сч = Сч + 1;
			ТекСимвол = Сред(стрДата, Сч, 1);
			Если ТолькоЦифры(ТекСимвол) Тогда
				СоставляющиеДаты[СоставляющиеДаты.ВГраница()] = СоставляющиеДаты[СоставляющиеДаты.ВГраница()] + ТекСимвол;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СоставляющиеДаты;

КонецФункции

Функция ПолучитьДатуИзСтроки(стрДата, Знач ФорматнаяСтрока = "")  Экспорт
	
	Значение = Дата(1,1,1);
	
	Если ПустаяСтрока(стрДата) Или  ВРег(стрДата) = "NULL" Тогда
		
		Значение = Дата(1,1,1);
	
	Иначе 
		
		Если ПустаяСтрока(ФорматнаяСтрока) Тогда
			
			Попытка
				Значение = Дата(стрДата);
			Исключение
				Попытка
					Значение = Дата(стрДата + " 00:00:00");
				Исключение
					Значение = Дата(1,1,1);
				КонецПопытки;
			КонецПопытки;
			
		Иначе
			
			СоставляющиеДаты = ПолучитьСоставляющиеДаты(стрДата);
			
			Если СоставляющиеДаты.количество() < 3 Тогда
				Возврат Дата(1,1,1);
			КонецЕсли;
			
			Если ФорматнаяСтрока = "yyyy-MM-dd" Тогда// HH:mm:ss
				
				СтрГод = СоставляющиеДаты[0];
				СтрМесяц = СоставляющиеДаты[1];
				СтрДень = СоставляющиеДаты[2];
				
			ИначеЕсли ФорматнаяСтрока = "MM.dd.yyyy" Тогда  // HH:mm:ss
				
				СтрГод = СоставляющиеДаты[2];
				СтрМесяц = СоставляющиеДаты[0];
				СтрДень = СоставляющиеДаты[1];
				
			ИначеЕсли ФорматнаяСтрока = "dd.MM.yyyy" Тогда
				
				СтрГод = СоставляющиеДаты[2];
				СтрМесяц = СоставляющиеДаты[1];
				СтрДень = СоставляющиеДаты[0];
				
			Иначе
				
				ВызватьИсключение "Не предусмотренный формат строки";
				
			КонецЕсли;
			
			Если СоставляющиеДаты.Количество() >=6 Тогда			
				СтрВремя = СоставляющиеДаты[3] + ":" + СоставляющиеДаты[4] + ":" +СоставляющиеДаты[5]; 
			Иначе
				СтрВремя = "00:00:00";
			КонецЕсли;
			
			Попытка
				Значение = Дата(СтрДень + "." + СтрМесяц + "." + СтрГод + " " + СтрВремя);
			Исключение
				Значение = Дата(1,1,1);
			КонецПопытки;
			
		КонецЕсли;		

	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьЧислоИзСтроки(Знач СтрЧисло) Экспорт
	
	СтрЧисло = СтрЗаменить(СтрЧисло, Символы.НПП, "");
	СтрЧисло = СтрЗаменить(СтрЧисло, " ", "");
	
	Значение = 0;
	
	Попытка 
		Значение = Число(СтрЧисло);
	Исключение
		
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции


Версия = 1;