// В функции описано, какие данные следует сохранять в шаблоне
Функция СтруктураДополнительныхДанныхФормы() Экспорт
	
	Возврат ХранилищаНастроек.ДанныеФорм.СформироватьСтруктуруДополнительныхДанных("Товары,ВозвратнаяТара");
	
КонецФункции

Функция ПроверкаОстатков(Ссылка) Экспорт 

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	               |	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КолОстаток
	               |ИЗ
	               |	РегистрНакопления.абс_ЗаявкиНаОбеспечение.Остатки(&КонДата, Заказ = &Заказ) КАК ЗаказыОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыОстатки.Номенклатура
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата", Ссылка.Дата);
	Запрос.УстановитьПараметр( "Заказ",   Ссылка);

	Результат = Запрос.Выполнить();
    
	Возврат Не Результат.Пустой();
	
КонецФункции

Функция СформироватьПеремещениеТоваров(СсылкаНаДокументОснование, ОткрыватьФорму = Истина) Экспорт
	
	Перем ОбъектПеремещениеТоваров;
	
	
	Если ПроверкаОстатков(СсылкаНаДокументОснование) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	ОбъектПеремещениеТоваров = Документы.ПеремещениеТоваров.СоздатьДокумент();
	ОбъектПеремещениеТоваров.Заполнить(СсылкаНаДокументОснование);
	//ОбъектПеремещениеТоваров.Записать();
	
	Если ОбъектПеремещениеТоваров <> Неопределено и ОткрыватьФорму Тогда
		ОбъектПеремещениеТоваров.ПолучитьФорму("ФормаДокумента").Открыть();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьПередачаТоваров(СсылкаНаДокументОснование, ОткрыватьФорму = Истина) Экспорт
	
	ОбъектПередачаТоваров = Документы.ПередачаТоваров.СоздатьДокумент();
	// ШАПКА
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ОбъектПередачаТоваров, СсылкаНаДокументОснование);
	
	ОбъектПередачаТоваров.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку;
	ОбъектПередачаТоваров.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	ОбъектПередачаТоваров.абс_ЗаявкаНаТМЦ = СсылкаНаДокументОснование;
	ОбъектПередачаТоваров.Контрагент = СсылкаНаДокументОснование.Контрагент;
	ОбъектПередачаТоваров.Дата 		= ТекущаяДата();
	ОбъектПередачаТоваров.Склад    	= СсылкаНаДокументОснование.СкладПолучатель;
	ОбъектПередачаТоваров.Ответственный = СсылкаНаДокументОснование.Ответственный;
	ОбъектПередачаТоваров.абс_Статус  = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
	ОбъектПередачаТоваров.абс_Отпустил = СсылкаНаДокументОснование.Ответственный;
	ОбъектПередачаТоваров.абс_ЦФО = СсылкаНаДокументОснование.ЦФО;
	Если РольДоступна("абс_СотрудникСклада") Тогда
		ОбъектПередачаТоваров.ОтражатьВУправленческомУчете = Истина;		
		ОтражатьВБухгалтерскомУчете = Истина;
		ОтражатьВНалоговомУчете 	= Истина;
	КонецЕсли;
	// ТАБЛИЦА ТОВАРОВ
	ЗаполнитьОстаткамиТоваровПоЗаказу(СсылкаНаДокументОснование, ОбъектПередачаТоваров, "абс_Оборудование");
	
	Если ОткрыватьФорму Тогда
		ОбъектПередачаТоваров.ПолучитьФорму("ФормаДокумента").Открыть();
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьТребованиеНакладная(СсылкаНаДокументОснование, ОткрыватьФорму = Истина) Экспорт
	
	ОбъектТН = Документы.ТребованиеНакладная.СоздатьДокумент();
	Если ТипЗнч(СсылкаНаДокументОснование) = Тип("ДокументСсылка.абс_ЗаявкаНаТМЦ") Тогда 
		// Если в качестве основания используется сама заявка, документ создается кнопкой "Ввода на основании" и записывать его должен пользователь, поэтому только открываем форму
		// ШАПКА
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ОбъектТН, СсылкаНаДокументОснование);
		ОбъектТН.Дата = СсылкаНаДокументОснование.Дата + 1;
		ОбъектТН.Подразделение = СсылкаНаДокументОснование.ЦФО;
		ОбъектТН.абс_Отпустил = СсылкаНаДокументОснование.Ответственный;
		ОбъектТН.ОтражатьВУправленческомУчете = Истина;
		ОбъектТН.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
		ОбъектТН.Склад = СсылкаНаДокументОснование.СкладПолучатель;		
		ОбъектТН.абс_ЗаявкаНаТМЦ = СсылкаНаДокументОснование;
		// ТАБЛИЦА МАТЕРИАЛОВ
		ЗаполнитьОстаткамиТоваровПоЗаказу(СсылкаНаДокументОснование, ОбъектТН, "Материалы");
		Если ОткрыватьФорму Тогда 
			ОбъектТН.ПолучитьФорму("ФормаДокумента").Открыть();
		КонецЕсли;
		Возврат Истина;
	ИначеЕсли ТипЗнч(СсылкаНаДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда 
		// Типовой ввод на основании
		ОбъектТН.Заполнить(СсылкаНаДокументОснование.Ссылка);
		// Дополнительные реквизиты
		ОбъектТН.Дата = СсылкаНаДокументОснование.Дата + 1;
		ОбъектТН.Подразделение = СсылкаНаДокументОснование.Подразделение;
		Попытка
			ОбъектТН.Записать();
		Исключение
			ОбщегоНазначения.Сообщение(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОбъектТН.Ссылка;
	
КонецФункции

Функция ПолучитьОстатокТМЦПоЗаявке(СсылкаНаЗаявку) Экспорт 
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	               |	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КолОстаток,
	               |	ЗаказыОстатки.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмеренияЗаказа,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаИзмеренияЗаказаКоэффициент,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	               |	ЗаказыОстатки.Проект,
	               |	ЗаказыОстатки.СерияНоменклатуры,
	               |	ЗаказыОстатки.ХарактеристикаНоменклатуры,
	               |	ЗаказыОстатки.Заказ.ЦФО КАК абс_ЦФО,
	               |	ЗаказыОстатки.Заказ.ЦФУ КАК абс_ЦФУ,
	               |	ЗаказыОстатки.Заказ.Контрагент.абс_ТипыКонтрагентов КАК абс_ТипКонтрагента
	               |ИЗ
	               |	РегистрНакопления.абс_ЗаявкиНаОбеспечение.Остатки(&КонДата, Заказ = &Заказ) КАК ЗаказыОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыОстатки.Номенклатура,
	               |	ЗаказыОстатки.Номенклатура.СтавкаНДС,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	               |	ЗаказыОстатки.Проект,
	               |	ЗаказыОстатки.СерияНоменклатуры,
	               |	ЗаказыОстатки.ХарактеристикаНоменклатуры,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	               |	ЗаказыОстатки.Заказ.ЦФО,
	               |	ЗаказыОстатки.Заказ.ЦФУ,
	               |	ЗаказыОстатки.Заказ.Контрагент.абс_ТипыКонтрагентов
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	//Запрос.УстановитьПараметр("КонДата", Новый Граница(СсылкаНаЗаявку.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонДата", Неопределено);
	Запрос.УстановитьПараметр("Заказ", СсылкаНаЗаявку);
	

	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;
	
КонецФункции

Процедура ЗаполнитьОстаткамиТоваровПоЗаказу(СсылкаНаЗаявку, ДокументОбъект, ТабЧастьИмя) Экспорт
	
	ТабЧасть = ДокументОбъект[ТабЧастьИмя];
	Выборка = ПолучитьОстатокТМЦПоЗаявке(СсылкаНаЗаявку);
	
	ЕстьЕдиница  = Не Метаданные.НайтиПоТипу(ТипЗнч(ТабЧасть)).Реквизиты.Найти("ЕдиницаИзмерения") = Неопределено;
 	ЕстьКачество = Не Метаданные.НайтиПоТипу(ТипЗнч(ТабЧасть)).Реквизиты.Найти("Качество") = Неопределено;
		
	Пока Выборка.Следующий() цикл
		Если Выборка.КолОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		Количество = Выборка.КолОстаток;
		НоваяСтрока = ТабЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество = Количество;
		//если в таб части есть реквизит ЕДиницаИзмерения - заполним единицу по данным заказа и пересчитаем количество
		Если ЕстьЕдиница Тогда
			НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмеренияЗаказа;
			НоваяСтрока.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияЗаказа; 
			НоваяСтрока.Количество = Количество * Выборка.Коэффициент / Выборка.ЕдиницаИзмеренияЗаказаКоэффициент;
			НоваяСтрока.Коэффициент = Выборка.ЕдиницаИзмеренияЗаказаКоэффициент;
		КонецЕсли;
		Если ЕстьКачество Тогда
			НоваяСтрока.Качество = Справочники.Качество.Новый;
		КонецЕсли;
		НоваяСтрока.СерияНоменклатуры	 			= Выборка.СерияНоменклатуры;
		НоваяСтрока.ХарактеристикаНоменклатуры	 	= Выборка.ХарактеристикаНоменклатуры;
		Если Не Метаданные.НайтиПоТипу(ТипЗнч(ТабЧасть)).Реквизиты.Найти("абс_Проект") = Неопределено Тогда 
			НоваяСтрока.абс_Проект = Выборка.Проект;
		КонецЕсли;
		Если Не Метаданные.НайтиПоТипу(ТипЗнч(ТабЧасть)).Реквизиты.Найти("абс_ПроектНовый") = Неопределено Тогда
			НоваяСтрока.абс_ПроектНовый = Выборка.Проект;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ДокументОбъект); 
	КонецЦикла;
	
КонецПроцедуры

