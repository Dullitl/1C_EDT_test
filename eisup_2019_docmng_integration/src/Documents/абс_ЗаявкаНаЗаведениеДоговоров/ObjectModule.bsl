
Функция СоздатьДоговор(ВидДоговораТек, КонтрагентТек) Экспорт 
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(НовыйДоговор, ЭтотОбъект);
	
	НовыйДоговор.Номер                       = НомерДоговора;
	НовыйДоговор.Дата                        = ДатаДоговора;
	НовыйДоговор.абс_ДатаНачалаДействия      = ДатаДоговора;
	НовыйДоговор.абс_ДатаРегистрацииДоговора = ДатаДоговора; 
	НовыйДоговор.Владелец                    = КонтрагентТек;
	НовыйДоговор.ВедениеВзаиморасчетов       = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	НовыйДоговор.ВидДоговора                 = ВидДоговораТек;
	НовыйДоговор.абс_Подключения             = Подключения;
	НовыйДоговор.абс_ЛицевойСчетБиллинга     = абс_ЛицевойСчетБиллинга;
	НовыйДоговор.абс_Агент                   = абс_Агент;
	
	Если КонтрагентТек.НеЯвляетсяРезидентом И ВидДоговораТек = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		НовыйДоговор.РеализацияНаЭкспорт = Истина;
	КонецЕсли;
	
	НовыйДоговор.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
	
	Если ВидДоговораТек <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		НовыйДоговор.ВестиПоДокументамРасчетовСКонтрагентом = Истина;
	КонецЕсли;
	
	Если (ВидДоговораТек = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		ИЛИ  ВидДоговораТек = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		И ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		НовыйДоговор.РасчетыВУсловныхЕдиницах = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДоговоруВУсловныхЕдиницах");
	КонецЕсли;
	
	Если ВидДоговораТек = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		НовыйДоговор.ПроцентПредоплаты = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойРазмерПредоплатыПоЗаказуПокупателя");
	КонецЕсли;
	
	НовыйДоговор.ОбособленныйУчетТоваровПоЗаказамПокупателей = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОбособленныйУчетТоваровПоЗаказамПокупателей");
	
	Если (ВидДоговораТек = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ ВидДоговораТек = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) И ТипЗнч(НовыйДоговор.ТипЦен) <> Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		НовыйДоговор.ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	ИначеЕсли (ВидДоговораТек = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ ВидДоговораТек = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) И ТипЗнч(НовыйДоговор.ТипЦен) <> Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
		НовыйДоговор.ТипЦен = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
	КонецЕсли; 

	НовыйДоговор.НалоговыйАгентПоОплате = Истина;
	
	НовыйДоговор.абс_СтатусДоговора  = Перечисления.абсСтатусыДоговоров.Исполнение;
	НовыйДоговор.абс_Ответственный   = глЗначениеПеременной("глТекущийПользователь"); 	
    НовыйДоговор.абс_ВидДеятельности = Справочники.абс_ВидыДеятельностиКТТК.НайтиПоНаименованию("Связь");
	НовыйДоговор.Наименование        = СокрЛП(НомерДоговора) + " от " + Формат(ДатаДоговора, "ДФ=dd.MM.yyyy");
	НовыйДоговор.абс_ВидДоговора     = Справочники.абс_ПредметДоговораГК.ДоговорОказанияУслуг;
    НовыйДоговор.абс_ТипДоговора     = Перечисления.абсТипыДоговоров.Договор;
	НовыйДоговор.абс_ДоговорБезСуммы = Истина;
	НовыйДоговор.абс_ДоходныйДоговор = ВстречныйДоговор;
	
	Если ЗначениеЗаполнено(Куратор) Тогда
		НовСтрокаКураторы = НовыйДоговор.абс_Кураторы.Добавить();
		НовСтрокаКураторы.Куратор = Куратор;
	КонецЕсли;
	
	Попытка
		НовыйДоговор.Записать();
		Возврат НовыйДоговор.Ссылка;
	Исключение
		#Если Клиент Тогда
			Предупреждение("Не удалось создать договор");
		#Иначе
			Сообщить("Не удалось создать договор");
		#КонецЕсли
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

Функция НайтиБПСогласованиеЗаявки() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоЗаявкеНаЗаведениеДоговора(Ссылка);
	
КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	НачатьТранзакцию();
	
	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусЗаявкиНаЗаведениеДоговораПоРегистру(Ссылка);
	
	Если НЕ Статус = СтатусПоРегистру Тогда
		ЗаписатьНовыйСтатус(Статус, ПричинаИзмененияСтатуса);		
	КонецЕсли;	
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314	
	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	Если Не СогласованиеБезБП Тогда
		БПСогласованиеЗаявки = НайтиБПСогласованиеЗаявки();	
		
		Если НЕ ЗначениеЗаполнено(БПСогласованиеЗаявки) И Статус = Перечисления.абс_СтатусыЗаявокНаЗаведениеДоговоров.ПроверкаНСИ Тогда
			абс_БизнесПроцессы.ЗапуститьБПСогласованияЗаявкиНаЗаведениеДоговора(Ссылка);
		КонецЕсли;
		
		// Попробуем закрыть задачу переутверждения
		ЗадачаСогласованиеЗаявки = ПолучитьЗадачуПоСогласованиюЗаявкиНаЗаведениеДоговора();
		
		Если ЗначениеЗаполнено(ЗадачаСогласованиеЗаявки) Тогда
			Если Не ЗадачаСогласованиеЗаявки.Выполнена Тогда
				
				ЗадачаОбъект = ЗадачаСогласованиеЗаявки.ПолучитьОбъект();	
				ЗадачаОбъект.ВыполнитьЗадачу();
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// АБС Изменение Родин Отключение бизнес-процессов 110314	
	
	ЗафиксироватьТранзакцию();		
	
КонецПроцедуры

Функция ПолучитьЗадачуПоСогласованиюЗаявкиНаЗаведениеДоговора() Экспорт
	
	БП = НайтиБПСогласованиеЗаявки();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпТочек = Новый Массив;
	
	//АБС ИЗМЕНЕНИЕ Урал 28.01.2014
	Если Ссылка.Статус = Перечисления.абс_СтатусыЗаявокНаЗаведениеДоговоров.Выполнена ИЛИ Ссылка.Статус = Перечисления.абс_СтатусыЗаявокНаЗаведениеДоговоров.Отказ Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаЗаведениеДоговора.ТочкиМаршрута.ДействиеУтверждениеГруппойНСИ);
		
	ИначеЕсли Ссылка.Статус = Перечисления.абс_СтатусыЗаявокНаЗаведениеДоговоров.Подготовка Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаЗаведениеДоговора.ТочкиМаршрута.ДействиеОтказаноВСогласовании);
		
	ИначеЕсли Ссылка.Статус = Перечисления.абс_СтатусыЗаявокНаЗаведениеДоговоров.ПроверкаНСИ Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаЗаведениеДоговора.ТочкиМаршрута.ДействиеПовторнаяПодготовка);
	
	КонецЕсли;
	//\\АБС УРАЛ
	
	Возврат абс_БизнесПроцессы.НайтиЗадачуПоЗаявкеНаЗаведениеДоговора(БП, СпТочек);
	
КонецФункции

Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовЗаявкиНаЗаведениеДоговоров.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Заявка.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	Запись.Заявка				= Ссылка;
	Запись.Пользователь 		= ТекПользователь;	
	Запись.СтатусЗаявки			= НовыйСтатус;
	
	Запись.Комментарий 			= Комментарий;
		
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ТекДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	Если ЭтоНовый() Тогда
		Дата = ТекДата;
	КонецЕсли;
		
КонецПроцедуры

