Перем мВалютаРегламентированногоУчета Экспорт;

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	      ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	      ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность;

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
		  
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	Если ЭтоНовый() Тогда
		Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
		Ответственный = глЗначениеПеременной("глТекущийПользователь");
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДата();
	Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
	Комментарий = "";
	Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ДополнительныеСвойства.Вставить("ЗаписыватьСтатус", НЕ Статус = Ссылка.Статус);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	Если Не Отказ Тогда
		Если ДополнительныеСвойства.ЗаписыватьСтатус Тогда 
			НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовПервичныхДокументов.СоздатьНаборЗаписей();	
			НаборЗаписей.Отбор.ПервичныйДокумент.Установить(Ссылка);
			НаборЗаписей.Прочитать();
			
			Запись = НаборЗаписей.Добавить();
			Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
			Запись.ПервичныйДокумент = Ссылка;
			Запись.Пользователь = ТекПользователь;	
			Запись.СтатусДокумента = Статус;	
			Запись.Комментарий = Комментарий;
			
			НаборЗаписей.Записать();

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента");
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Дебитор""!");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор", "Не заполнено значение реквизита ""Кредитор""!");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Контрагент""!");
		
	Иначе //.ПереносЗадолженности Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Контрагент""!");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор", "Не заполнено значение реквизита ""Получатель""!");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента", "Не заполнено значение реквизита ""Договор""!");
	
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "СписыватьПартииПриПроведенииДокументов" , "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация", "ДоговорОрганизация");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора", "ВидДоговора");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах", "РасчетыВУсловныхЕдиницах");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом", "ВестиПоДокументамРасчетовСКонтрагентом");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов");
	КонецЕсли; 
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаДокумента Тогда
			СтруктураШапкиДокумента.Вставить("КурсВзаиморасчетов",      СтруктураШапкиДокумента.КурсДокумента);
			СтруктураШапкиДокумента.Вставить("КратностьВзаиморасчетов", СтруктураШапкиДокумента.КратностьДокумента);
		Иначе
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.Дата);
			СтруктураШапкиДокумента.Вставить("КурсВзаиморасчетов",      СтруктураКурса.Курс);
			СтруктураШапкиДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "КорректировкаДолга" Тогда		
		// Получить экземпляр документа на печать
		ТабДокумент = Новый ТабличныйДокумент;

		ТабДокумент = Документы.ttk_ПроектКорректировкиДога.КорректировкаДолга(ТабДокумент, Ссылка);//ПечатьДокумента();
	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировкаДолга","Корректировка долга");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
