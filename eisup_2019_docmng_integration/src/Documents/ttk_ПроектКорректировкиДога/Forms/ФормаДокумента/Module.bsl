&НаКлиенте
Перем мВалютаРегламентированногоУчета;
&НаКлиенте
Перем СтарыеЗначенияРеквизитов;
Перем мТекущаяДатаДокумента; 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтоНовый = Объект.Ссылка.Пустая();	
	
	Если ЭтоНовый Тогда // проверить объект на то, что он еще не внесен в ИБ

		СтарыеЗначенияРеквизитов.Вставить("ВалютаДокумента", Неопределено);
		ВалютаДокументаПриИзменении("");
		
	КонецЕсли;
	
	мТекущаяДатаДокумента = Объект.Дата;
	СтарыеЗначенияРеквизитов.Вставить("ВидОперации",        Объект.ВидОперации);
	СтарыеЗначенияРеквизитов.Вставить("Организация",        Объект.Организация);
	СтарыеЗначенияРеквизитов.Вставить("ВалютаДокумента",    Объект.ВалютаДокумента);
	СтарыеЗначенияРеквизитов.Вставить("КонтрагентДебитор",  Объект.КонтрагентДебитор);
	СтарыеЗначенияРеквизитов.Вставить("КонтрагентКредитор", Объект.КонтрагентКредитор);
	
	УстановитьВидимость();
	
	//Установим имя кнопки для установки метки
	Если НЕ ЭтоНовый Тогда
		ttk_ОбщегоНазначения.ОбновитьНадписьКнопкиМетки(ЭтаФорма, Объект.Ссылка);
	КонецЕсли;
	
	ВывестиНадписи();
	
КонецПроцедуры

// Устанавливает видимость реквизитов
&НаКлиенте
Процедура УстановитьВидимость()
	
	ЭтоНовый = Объект.Ссылка.Пустая();	
	
	Колонки = Элементы.СуммыДолга.ПодчиненныеЭлементы;
	ВидОперации = Объект.ВидОперации;
	
	Элементы.Найти("ФормаДокументttk_ПроектКорректировкиДогаКорректировкаДолга").Доступность = (мСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
	
	Элементы.СуммыДолга.Видимость = ЗначениеЗаполнено(ВидОперации);
	Элементы.ИсторияСогласования.Видимость = НЕ ЭтоНовый;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

		Элементы.КонтрагентДебитор.Видимость = Истина;
		Элементы.КонтрагентКредитор.Видимость = Истина;
		Элементы.КонтрагентДебитор.Заголовок = "Дебитор";
		Элементы.КонтрагентКредитор.Заголовок = "Кредитор";
		Элементы.ДоговорКонтрагента.Видимость                         = Ложь;
		
		Элементы.СуммыДолга.ОтборСтрок = Неопределено;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.абс_КорректировкаРегистровВзаиморасчетов Тогда
		
		Элементы.КонтрагентКредитор.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Истина;
		Элементы.ВалютаДокумента.ТолькоПросмотр = Истина;
		
		Элементы.СуммыДолга.ОтборСтрок = Неопределено;
		
	Иначе

		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			Элементы.КонтрагентКредитор.Видимость = Истина;
			Элементы.ДоговорКонтрагента.Видимость = Истина;
			Элементы.КонтрагентКредитор.Заголовок = "Получатель";
		Иначе
			Элементы.КонтрагентКредитор.Видимость = Ложь;
			Элементы.ДоговорКонтрагента.Видимость = Ложь;
		КонецЕсли;

		Элементы.КонтрагентДебитор.Заголовок = "Контрагент";
		
		//Элементы.СуммыДолга.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперации  = Объект.ВидОперации;
	ИзменяетсяВидОперации = НЕ ВидОперации = СтарыеЗначенияРеквизитов.ВидОперации;
	
	Если ИзменяетсяВидОперации Тогда
		Если СтарыеЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
			Если Объект.КонтрагентДебитор <> Объект.КонтрагентКредитор Тогда
				ОчиститьСтрокиПоВидуЗадолженности(Перечисления.ВидыЗадолженности.Кредиторская, Ложь);
				Объект.КонтрагентКредитор = Неопределено;
			КонецЕсли;
		
		ИначеЕсли СтарыеЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
			Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
				Объект.КонтрагентКредитор = Объект.КонтрагентДебитор;
			КонецЕсли;
			
		Иначе //.ПереносЗадолженности
			
			Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
				И Объект.КонтрагентДебитор <> Объект.КонтрагентКредитор Тогда
				ОчиститьСтрокиПоВидуЗадолженности(Перечисления.ВидыЗадолженности.Кредиторская, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			Объект.КонтрагентКредитор = Неопределено;
		КонецЕсли;
		Если ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.абс_КорректировкаРегистровВзаиморасчетов Тогда
			Если НЕ Объект.КонтрагентКредитор = Объект.КонтрагентДебитор Тогда
				Объект.КонтрагентКредитор = Объект.КонтрагентДебитор;
				Объект.ДоговорКонтрагента = Неопределено;				
			КонецЕсли;
			
			ВывестиНадписи();
			
		КонецЕсли;
		
		СтарыеЗначенияРеквизитов.Вставить("ВидОперации", ВидОперации);		
		
	КонецЕсли;
	
	УстановитьВидимость();

	ВывестиНадписи();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиНаСервере()
	
	ВидОперации = Объект.ВидОперации;
	ДоговорКонтрагента = Объект.ДоговорКонтрагента;

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыОтбора.Вставить("КонтрагентДебитор", Объект.КонтрагентДебитор);
	ПараметрыОтбора.Вставить("КонтрагентКредитор", Объект.КонтрагентКредитор);
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("Дата", Объект.Дата);
	ПараметрыОтбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	
	СуммыДолга = Объект.СуммыДолга;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

		ВыборкаДебиторскаяЗадолженость = Документы.ttk_ПроектКорректировкиДога.ПолучитьОстаткиДебиторскойЗадолженностиУпр(ПараметрыОтбора);
		Пока ВыборкаДебиторскаяЗадолженость.Следующий() Цикл
			НоваяСтрока                               = СуммыДолга.Добавить();
			НоваяСтрока.ДоговорКонтрагента            = ВыборкаДебиторскаяЗадолженость.ДоговорКонтрагента;
			НоваяСтрока.Сделка                        = ВыборкаДебиторскаяЗадолженость.Сделка;
			НоваяСтрока.ДокументРасчетовСКонтрагентом = ВыборкаДебиторскаяЗадолженость.ДокументРасчетовСКонтрагентом;
			НоваяСтрока.КурсВзаиморасчетов            = ВыборкаДебиторскаяЗадолженость.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов       = ВыборкаДебиторскаяЗадолженость.КратностьВзаиморасчетов;
			НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Дебиторская;
			НоваяСтрока.Сумма                         = ВыборкаДебиторскаяЗадолженость.СуммаВзаиморасчетовОстаток;
			//НоваяСтрока.СуммаРегл                     = ВыборкаДебиторскаяЗадолженость.СуммаРеглОстаток;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, Истина);
			
		КонецЦикла;
		
		ВыборкаКредиторскаяЗадолженость = Документы.ttk_ПроектКорректировкиДога.ПолучитьОстаткиКредиторскойЗадолженностиУпр(ПараметрыОтбора);
		Пока ВыборкаКредиторскаяЗадолженость.Следующий() Цикл
			НоваяСтрока                               = СуммыДолга.Добавить();
			НоваяСтрока.ДоговорКонтрагента            = ВыборкаКредиторскаяЗадолженость.ДоговорКонтрагента;
			НоваяСтрока.Сделка                        = ВыборкаКредиторскаяЗадолженость.Сделка;
			НоваяСтрока.ДокументРасчетовСКонтрагентом = ВыборкаКредиторскаяЗадолженость.ДокументРасчетовСКонтрагентом;
			НоваяСтрока.КурсВзаиморасчетов            = ВыборкаКредиторскаяЗадолженость.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов       = ВыборкаКредиторскаяЗадолженость.КратностьВзаиморасчетов;
			НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Кредиторская;
			НоваяСтрока.Сумма                         = - ВыборкаКредиторскаяЗадолженость.СуммаВзаиморасчетовОстаток;
			//НоваяСтрока.СуммаРегл                     = - ВыборкаКредиторскаяЗадолженость.СуммаРеглОстаток;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, Истина);
			
		КонецЦикла;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда //абсо +ИначеЕсли
		
		ВыборкаКредиторскаяЗадолженость = Документы.ttk_ПроектКорректировкиДога.ПолучитьОстаткиКредиторскойЗадолженностиУпр(ПараметрыОтбора);
		Пока ВыборкаКредиторскаяЗадолженость.Следующий() Цикл
			НоваяСтрока                               = СуммыДолга.Добавить();
			НоваяСтрока.ДоговорКонтрагента            = ВыборкаКредиторскаяЗадолженость.ДоговорКонтрагента;
			НоваяСтрока.Сделка                        = ВыборкаКредиторскаяЗадолженость.Сделка;
			НоваяСтрока.ДокументРасчетовСКонтрагентом = ВыборкаКредиторскаяЗадолженость.ДокументРасчетовСКонтрагентом;
			НоваяСтрока.КурсВзаиморасчетов            = ВыборкаКредиторскаяЗадолженость.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов       = ВыборкаКредиторскаяЗадолженость.КратностьВзаиморасчетов;
			НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Кредиторская;
			НоваяСтрока.Сумма                         = - ВыборкаКредиторскаяЗадолженость.СуммаВзаиморасчетовОстаток;
			//НоваяСтрока.СуммаРегл                     = - ВыборкаКредиторскаяЗадолженость.СуммаРеглОстаток;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, Истина);
			
		КонецЦикла;
	
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			МассивУдаляемыхСтрок = Новый Массив;
			Для Каждого СтрокаДолга Из СуммыДолга Цикл
				Если СтрокаДолга.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаДолга);
				КонецЕсли;
			КонецЦикла;
			Для каждого УдаляемаяСтрока из МассивУдаляемыхСтрок Цикл
				СуммыДолга.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;

	Иначе
		
		ВыборкаКредиторскаяЗадолженость = Документы.ttk_ПроектКорректировкиДога.ПолучитьОстаткиКредиторскойЗадолженностиУпр(ПараметрыОтбора);
		Пока ВыборкаКредиторскаяЗадолженость.Следующий() Цикл
			НоваяСтрока                               = СуммыДолга.Добавить();
			НоваяСтрока.ДоговорКонтрагента            = ВыборкаКредиторскаяЗадолженость.ДоговорКонтрагента;
			НоваяСтрока.Сделка                        = ВыборкаКредиторскаяЗадолженость.Сделка;
			НоваяСтрока.ДокументРасчетовСКонтрагентом = ВыборкаКредиторскаяЗадолженость.ДокументРасчетовСКонтрагентом;
			НоваяСтрока.КурсВзаиморасчетов            = ВыборкаКредиторскаяЗадолженость.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов       = ВыборкаКредиторскаяЗадолженость.КратностьВзаиморасчетов;
			НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Кредиторская;
			НоваяСтрока.Сумма                         = - ВыборкаКредиторскаяЗадолженость.СуммаВзаиморасчетовОстаток;
			//НоваяСтрока.СуммаРегл                     = - ВыборкаКредиторскаяЗадолженость.СуммаРеглОстаток;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, Истина);
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ВидОперации = Объект.ВидОперации;
	СуммыДолга = Объект.СуммыДолга;
	ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
		Предупреждение("Не выбран контрагент-дебитор! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Предупреждение("Не выбрана валюта документа! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.КонтрагентКредитор) Тогда
			Предупреждение("Не выбран контрагент-кредитор! Заполнение невозможно!");
			Возврат;
		КонецЕсли;
		
		// Заполняется и дебиторская, и кредиторская задолженность
		
		Если СуммыДолга.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			СуммыДолга.Очистить();
			
		КонецЕсли;
		
		ЗаполнитьОстаткамиНаСервере();		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда //абсо +ИначеЕсли
		
		// Заполняется только кредиторская задолженность
		СтрокиКредиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
		
		Если СтрокиКредиторскойЗадолженности.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением строки кредиторской задолженности будут очищены. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			Для каждого СтрокаТабличнойЧасти Из СтрокиКредиторскойЗадолженности Цикл
				СуммыДолга.Удалить(СтрокаТабличнойЧасти);
			КонецЦикла;
			
		КонецЕсли;
		           
		ЗаполнитьОстаткамиНаСервере();		
		
	Иначе
	
		// Заполняется только кредиторская задолженность
		СтрокиКредиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
		
		Если СтрокиКредиторскойЗадолженности.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением строки кредиторской задолженности будут очищены. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			Для каждого СтрокаТабличнойЧасти Из СтрокиКредиторскойЗадолженности Цикл
				СуммыДолга.Удалить(СтрокаТабличнойЧасти);
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьОстаткамиНаСервере();		
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ЗаполнятьБУ) Экспорт
	
	ВидОперации = Объект.ВидОперации;
	
	Если ЗаполнятьБУ Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
			И СтрокаТЧ.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			ТекКонтрагент = Объект.КонтрагентКредитор;
		Иначе
			ТекКонтрагент = Объект.КонтрагентДебитор;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, ТекКонтрагент, СтрокаТЧ.ДоговорКонтрагента);
    	
		Если СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
			СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансов;
		ИначеЕсли СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			ИЛИ СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансовПокупателя;
		ИначеЕсли СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовСКомитентом;
			СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансов;
		Иначе //.Прочее
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
		
	Иначе
		
		СтрокаТЧ.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаАвансов  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	мСтатус = Объект.Статус;
	
	Если ЭтоНовый Тогда
		// Заполнить реквизиты значениями по умолчанию.
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, , ПараметрОбъектКопирования);
		
		СтруктураПараметров = новый Структура();
		СтруктураПараметров.Вставить("Номер",				Объект.Номер);
		СтруктураПараметров.Вставить("Дата",				Объект.Дата);
		СтруктураПараметров.Вставить("Организация",			Объект.Организация);
		СтруктураПараметров.Вставить("ВидОперации",			Объект.ВидОперации);
		СтруктураПараметров.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
		СтруктураПараметров.Вставить("КурсДокумента",		Объект.КурсДокумента);
		СтруктураПараметров.Вставить("КратностьДокумента",	Объект.КратностьДокумента);
		СтруктураПараметров.Вставить("Ответственный",		Объект.Ответственный);
		ПолныеПрава.ПодготовитьСтруктуруДляЗаполненияШапкиДокумента(СтруктураПараметров, "", Неопределено);
		ЗаполнитьЗначенияСвойств(Объект,СтруктураПараметров);
		
	КонецЕсли;

	Если НЕ ЭтоНовый Тогда
		 ЗаполнитьПараметрыФормыНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура мСтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)         
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Документы.ttk_ПроектКорректировкиДога.ПолучитьДоступныеСтатусы(Объект.Статус);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.Статус = мСтатус;
	ПараметрыЗаписи.Вставить("ЗаполнитьПараметрыИсторииСогласования", Объект.Ссылка.Пустая());
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ПараметрыЗаписи.ЗаполнитьПараметрыИсторииСогласования Тогда
		ЗаполнитьПараметрыФормыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьВидимость();
	Элементы.ИсторияСогласования.Обновить();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыНаСервере()
	
	ИсторияСогласования.Параметры.УстановитьЗначениеПараметра("СсылкаНаДокумент", Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СуммыДолга.ТекущиеДанные;

	Если Объект.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Контрагент = Объект.КонтрагентДебитор;
	Иначе
		Если ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			Контрагент = Объект.КонтрагентКредитор;
		Иначе
			Контрагент = Объект.КонтрагентДебитор;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	Если Объект.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗначениеОтбора", Объект.ВалютаДокумента);
		СтруктураПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);
	КонецЕсли;

	НачалоВыбораДоговора(Элемент, Объект.Организация, Контрагент, ТекДанные.ДоговорКонтрагента);

КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораДоговора(Элемент, Организация, Контрагент, ДоговорКонтрагента)
	
	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);

	// Владельца менять по умолчанию не даем.
	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	// Еще надо фильтровать по организации, если она заполнена
	Если Организация <> Неопределено
	   И ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = Организация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.НачальноеЗначениеВыбора = ДоговорКонтрагента;

	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекДанные  = Элементы.СуммыДолга.ТекущиеДанные;
	
	ТекДанные.Сделка                        = Неопределено;
	ТекДанные.ДокументРасчетовСКонтрагентом = Неопределено; 
	
	ТекДоговор = ТекДанные.ДоговорКонтрагента;
	ТекВалюта  = ТекДоговор.ВалютаВзаиморасчетов;
	
	Если ТекВалюта <> Объект.ВалютаДокумента Тогда
		Если Объект.ВалютаДокумента <> мВалютаРегламентированногоУчета ИЛИ НЕ ТекДоговор.РасчетыВУсловныхЕдиницах Тогда
			Предупреждение("Нужно выбрать договор с валютой " + Объект.ВалютаДокумента
			+ ?(Объект.ВалютаДокумента <> мВалютаРегламентированногоУчета, "!", "
			|или договор в условных единицах!"));
			ТекДанные.ДоговорКонтрагента = Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДоговор) Тогда
		
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекВалюта, Объект.Дата);
		ТекДанные.КурсВзаиморасчетов = СтруктураКурса.Курс;
		ТекДанные.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
		ЗаполнитьсчетаУчетаНаКлиенте(ТекДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьсчетаУчетаНаКлиенте(ТекДанные)
	
	//Заполним счета учета
	ВидОперации = Объект.ВидОперации;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
		И ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
		ТекКонтрагент = Объект.КонтрагентКредитор;
	Иначе
		ТекКонтрагент = Объект.КонтрагентДебитор;
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, ТекКонтрагент, ТекДанные.ДоговорКонтрагента);
	
	Если ТекДанные.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		ТекДанные.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
		ТекДанные.СчетУчетаАвансов  = СчетаУчета.СчетАвансов;
	ИначеЕсли ТекДанные.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		ИЛИ ТекДанные.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ТекДанные.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
		ТекДанные.СчетУчетаАвансов  = СчетаУчета.СчетАвансовПокупателя;
	ИначеЕсли ТекДанные.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ТекДанные.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовСКомитентом;
		ТекДанные.СчетУчетаАвансов  = СчетаУчета.СчетАвансов;
	Иначе //.Прочее
		ТекДанные.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
		ТекДанные.СчетУчетаАвансов  = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДоговорКонтрагента = Элементы.СуммыДолга.ТекущиеДанные.ДоговорКонтрагента;

	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		Элементы.СуммыДолга.ТекущаяКолонка = Элементы.СуммыДолга.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли; 

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;

	//Список документов зависит от вида договора.
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя, Метаданные.Документы["ЗаказПокупателя"].Представление());
			
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["абс_СчетНаОплату"].Имя, Метаданные.Документы["абс_СчетНаОплату"].Представление());
			
		Иначе
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["абс_СчетНаОплату"].Имя, Метаданные.Документы["абс_СчетНаОплату"].Представление());
			
		КонецЕсли;

	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
			
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["абс_СчетНаОплату"].Имя, Метаданные.Документы["абс_СчетНаОплату"].Представление());
			
		Иначе
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["абс_СчетНаОплату"].Имя, Метаданные.Документы["абс_СчетНаОплату"].Представление());
			
		КонецЕсли;
		
	Иначе // Прочее

		СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя,        Метаданные.Документы["ЗаказПоставщику"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
        СписокТипов.Добавить( Метаданные.Документы["абс_СчетНаОплату"].Имя, Метаданные.Документы["абс_СчетНаОплату"].Представление());
		
	КонецЕсли;

	// Пользователь выбирает тип расчетного документа
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; // пользователь отказался от выбора
	КонецЕсли;

	ТипДокументаСделки = ВыбранныйЭлемент.Значение;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,Элемент,);
	
	// Отфильруем список документов по договору.
	Если не ФормаВыбора.Отбор.Найти("ДоговорКонтрагента") = Неопределено Тогда
		ФормаВыбора.Отбор.ДоговорКонтрагента.Значение = ДоговорКонтрагента;
		ФормаВыбора.Отбор.ДоговорКонтрагента.Использование = Истина;	
	Иначе	
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	КонецЕсли;	
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СуммыДолга.ТекущиеДанные;
	СтрокаВидаДвижения = ?(ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, "Приход", "Расход");
	НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(Элемент, ТекДанные.ДокументРасчетовСКонтрагентом, ТекДанные.ДоговорКонтрагента, ТекДанные.Сделка, СтандартнаяОбработка, СтрокаВидаДвижения)
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(Элемент, ТекЗначение, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, СтрокаВидаДвижения) 

	// Тип выбираемого значения зависит от договора.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбран договор контрагента!");
		//в шапке документа может не быть реквизита Контрагент - например, в Авансовом отчете
		Если ЭтаФорма.Элементы.Найти("Контрагент") <> Неопределено Тогда		
			ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.Контрагент;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;
	Если СтрокаВидаДвижения = "Приход" Тогда
		
		// Заполним список документов, которые могут делать расход по регистру.
		// Список документов зависит от вида договора
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,               Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,       Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                       Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,                   Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,               Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,                     Метаданные.Документы["АккредитивПолученный"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,            Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,          Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОплатаОтПокупателяПлатежнойКартой"].Имя, 	   Метаданные.Документы["ОплатаОтПокупателяПлатежнойКартой"].Представление());
			
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,               Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			КонецЕсли;
			СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,           	   Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
		ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,       Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                       Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,                  Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПолучениеУслугПоПереработке"].Имя, 			   Метаданные.Документы["ПолучениеУслугПоПереработке"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеДопРасходов"].Имя,                   Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,                  Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслугВНТТ"].Имя, 			   Метаданные.Документы["ПоступлениеТоваровУслугВНТТ"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОтражениеПоступленияТоваровИУслугНДС"].Имя,     Метаданные.Документы["ОтражениеПоступленияТоваровИУслугНДС"].Представление());
			
			СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,                   Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,               Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,                     Метаданные.Документы["АккредитивПолученный"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,            Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,          Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОплатаОтПокупателяПлатежнойКартой"].Имя, 	   Метаданные.Документы["ОплатаОтПокупателяПлатежнойКартой"].Представление());
			
			СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,               Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
			
		Иначе // Прочее
			
			СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,               Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,       Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                       Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,                  Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеДопРасходов"].Имя,                   Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,                  Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслугВНТТ"].Имя, 
			Метаданные.Документы["ПоступлениеТоваровУслугВНТТ"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОтражениеПоступленияТоваровИУслугНДС"].Имя,     Метаданные.Документы["ОтражениеПоступленияТоваровИУслугНДС"].Представление());
			
			СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,                   Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,               Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,                     Метаданные.Документы["АккредитивПолученный"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,            Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,          Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());
			
		КонецЕсли;
	Иначе
		
		// Заполним список документов, которые могут делать приход по регистру.
		// Список документов зависит от вида договора
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,    Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["АктОбОказанииПроизводственныхУслуг"].Имя,    Метаданные.Документы["АктОбОказанииПроизводственныхУслуг"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                    Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,            Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,                Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,                Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОтражениеРеализацииТоваровИУслугНДС"].Имя,   Метаданные.Документы["ОтражениеРеализацииТоваровИУслугНДС"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПередачаОС"].Имя,                            Метаданные.Документы["ПередачаОС"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,           Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,                  Метаданные.Документы["АккредитивПереданный"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Имя,         Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,         Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["РеализацияУслугПоПереработке"].Имя,          Метаданные.Документы["РеализацияУслугПоПереработке"].Представление());
			
		ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
			СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,                        Метаданные.Документы["АвансовыйОтчет"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,              Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщикуИзНТТ"].Имя, 
			Метаданные.Документы["ВозвратТоваровПоставщикуИзНТТ"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,    Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                    Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,                Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,           Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,                  Метаданные.Документы["АккредитивПереданный"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Имя,         Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,         Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());
			
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,               Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,           Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
			КонецЕсли;
		Иначе // Прочее
			
			СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,                        Метаданные.Документы["АвансовыйОтчет"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["АктОбОказанииПроизводственныхУслуг"].Имя,    Метаданные.Документы["АктОбОказанииПроизводственныхУслуг"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,              Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщикуИзНТТ"].Имя, 
			Метаданные.Документы["ВозвратТоваровПоставщикуИзНТТ"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,    Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                    Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,            Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,                Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,                Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОтражениеРеализацииТоваровИУслугНДС"].Имя,   Метаданные.Документы["ОтражениеРеализацииТоваровИУслугНДС"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПередачаОС"].Имя,                            Метаданные.Документы["ПередачаОС"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,           Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,                  Метаданные.Документы["АккредитивПереданный"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Имя,         Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,         Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());
			
		КонецЕсли;
	КонецЕсли;
	СписокТипов.Добавить(Метаданные.Документы["ДокументРасчетовСКонтрагентом"].Имя,                 Метаданные.Документы["ДокументРасчетовСКонтрагентом"].Представление());
	
	СписокТипов.Добавить(Метаданные.Документы["КорректировкаРеализации"].Имя,						Метаданные.Документы["КорректировкаРеализации"].Представление());
	
	СписокТипов.СортироватьПоПредставлению();
	
	Если ЗначениеЗаполнено(ТекЗначение) Тогда
		
		ИмяНачальногоТипа = ТекЗначение.Метаданные().Имя;
		НачальноеЗначение = СписокТипов.НайтиПоЗначению(ИмяНачальногоТипа);
		
	Иначе
		
		НачальноеЗначение = Неопределено;
		
	КонецЕсли;
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент, НачальноеЗначение);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; // пользователь отказался от выбора
	КонецЕсли;
	
	ТипДокументаРасчетов = ВыбранныйЭлемент.Значение;
	
	
	
	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаРасчетов].ПолучитьФормуВыбора(,Элемент,);
	
	Если ТипДокументаРасчетов = "ДокументРасчетовСКонтрагентом" Тогда
		
		СтруктураОтбора = Новый Структура;
		
		СтруктураОтбора.Вставить("Дата",               Объект.Дата);
		
		СтруктураОтбора.Вставить("Контрагент",         ДоговорКонтрагента.Владелец);
		СтруктураОтбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
		СтруктураОтбора.Вставить("Организация",        ДоговорКонтрагента.Организация);
		ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ДокументРасчетовСКонтрагентом");
		
		БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, Ложь, ДоговорКонтрагента.Организация, СтруктураОтбора, ОграничениеТипа);
		
		Возврат;
		
	Иначе
		
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Установить(ДоговорКонтрагента);
		ФормаВыбора.Отбор.Дата.Использование = Истина;
		ФормаВыбора.Отбор.Дата.ЗначениеПо = Объект.Дата;
		
		Если НЕ ФормаВыбора.Отбор.Найти("Организация") = Неопределено Тогда
			ФормаВыбора.Отбор.Организация.Установить(ДоговорКонтрагента.Организация);
			ФормаВыбора.Отбор.Организация.Использование = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Организация = Объект.Организация;
	ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ИзменяетсяОрганизация = НЕ Организация = СтарыеЗначенияРеквизитов.Организация;
	
	Если ИзменяетсяОрганизация Тогда
		ИзменятьОрганизацию = ОчиститьСтрокиПоВидуЗадолженности(Неопределено);
		
		Если ИзменятьОрганизацию Тогда
			Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ Организация = ДоговорКонтрагента.Организация Тогда
				ДоговорКонтрагента = Неопределено;
			КонецЕсли;
			СтарыеЗначенияРеквизитов.Вставить("Организация", Организация);
		Иначе
			Организация = СтарыеЗначенияРеквизитов.Организация;
		КонецЕсли;
		ВывестиНадписи();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Объект.Номер) Тогда
		ПрефиксацияОбъектовСобытия.ОчиститьНомерОбъекта(Объект.Номер, Организация);
	КонецЕсли; 

	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Функция ОчиститьСтрокиПоВидуЗадолженности(ВидЗадолженности = Неопределено, ЗадаватьВопрос = Истина)
	
	СуммыДолга = Объект.СуммыДолга;
	
	Если ВидЗадолженности = Неопределено Тогда
		НужноУдалятьСтроки = СуммыДолга.Количество() > 0;
	Иначе
		УдаляемыеСтроки = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", ВидЗадолженности));
		НужноУдалятьСтроки = УдаляемыеСтроки.Количество()>0;
	КонецЕсли; 
	
	Если НЕ НужноУдалятьСтроки Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗадаватьВопрос Тогда
		
		Если ВидЗадолженности = Неопределено Тогда
			ТекстВопроса = "Все строки задолженности ";
		ИначеЕсли ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			ТекстВопроса = "Строки дебиторской задолженности ";
		Иначе
			ТекстВопроса = "Строки кредиторской задолженности ";
		КонецЕсли;
		ТекстВопроса = ТекстВопроса + "будут удалены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидЗадолженности = Неопределено Тогда
		СуммыДолга.Очистить();
	Иначе
		Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			СуммыДолга.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ВалютаДокумента = Объект.ВалютаДокумента;
	ВалютаНеИзменилась = ВалютаДокумента = СтарыеЗначенияРеквизитов.ВалютаДокумента;
	Если ВалютаНеИзменилась Тогда
		
		СтруктураВалюта    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата);
		КурсДокумента      = СтруктураВалюта.Курс;
		КратностьДокумента = СтруктураВалюта.Кратность;
		Возврат;
		
	КонецЕсли;
	
	СуммыДолга = Объект.СуммыДолга;	
	СтрокиКУдалению = Новый Массив;
	ЭтоВалютныйДокумент = ВалютаДокумента <> мВалютаРегламентированногоУчета;
	Для каждого СтрокаДолга Из СуммыДолга Цикл
	
		Если СтрокаДолга.ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаДокумента 
			И (ЭтоВалютныйДокумент ИЛИ НЕ СтрокаДолга.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) Тогда
			СтрокиКУдалению.Добавить(СтрокаДолга);
		КонецЕсли;
	
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество() > 0 Тогда
	
		ТекстВопроса = "Строки с несоответствующей валютой взаиморасчетов договора 
		               |будут удалены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		ОставитьСтаруюВалюту = Ответ <> КодВозвратаДиалога.Да;
		Если ОставитьСтаруюВалюту Тогда
			ВалютаДокумента = СтарыеЗначенияРеквизитов.ВалютаДокумента;
			Возврат;
		КонецЕсли;
		
		Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			СуммыДолга.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		ВывестиНадписи();
	КонецЕсли;
	
	СтруктураВалюта    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураВалюта.Курс;
	КратностьДокумента = СтруктураВалюта.Кратность;
	
	СтарыеЗначенияРеквизитов.Вставить("ВалютаДокумента", ВалютаДокумента);
	
	ВывестиНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиНадписи() 
	
	ВидОперации = Объект.ВидОперации;
	ВалютаДокумента = Объект.ВалютаДокумента;
	СуммыДолга = Объект.СуммыДолга;
	Итоги = ПолучитьИтоги(СуммыДолга);
	
	Элементы.НадписьДебиторскаяЗадолженность.Заголовок
							= "Дебиторская задолженность: " + Формат(Итоги.СуммаДеб, "ЧЦ=15;ЧДЦ=2") + " " + Строка(ВалютаДокумента);
	Элементы.НадписьКредиторскаяЗадолженность.Заголовок
							= "Кредиторская задолженность: " + Формат(Итоги.СуммаКред, "ЧЦ=15;ЧДЦ=2") + " " + Строка(ВалютаДокумента);
							
	Если Итоги.Разница = 0 И ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Элементы.НадписьВзаимозачет.Заголовок = "ВЗАИМОЗАЧЕТ";
	Иначе
		Элементы.НадписьВзаимозачет.Заголовок
							= "Разница: " + Формат(Итоги.Разница, "ЧЦ=15;ЧДЦ=2") + " " + Строка(ВалютаДокумента);
	КонецЕсли;


КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИтоги(СуммыДолга)
	
	ТабСумм         = СуммыДолга.Выгрузить();
	ТабКредиторская = ТабСумм.Скопировать();
	Сч = 0;
	Пока Сч < ТабКредиторская.Количество() Цикл
		СтрокаТаблицы = ТабКредиторская.Получить(Сч);
		Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Кредиторская Тогда
			ТабКредиторская.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТабДебиторская = ТабСумм.Скопировать();
	Сч = 0;
	Пока Сч < ТабДебиторская.Количество() Цикл
		СтрокаТаблицы = ТабДебиторская.Получить(Сч);
		Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Дебиторская Тогда
			ТабДебиторская.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	СуммаКред = ТабКредиторская.Итог("Сумма");
	СуммаДеб  = ТабДебиторская.Итог("Сумма");
	Разница = СуммаДеб - СуммаКред;
	
	СтруктураИтогов = Новый Структура("СуммаДеб, СуммаКред, Разница", СуммаДеб, СуммаКред, Разница);
	
	Возврат СтруктураИтогов;
	
КонецФункции

&НаКлиенте
Процедура КонтрагентДебиторПриИзменении(Элемент)
	
	ВидОперации = Объект.ВидОперации;	
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.абс_КорректировкаРегистровВзаиморасчетов Тогда
		Объект.КонтрагентКредитор = Объект.КонтрагентДебитор;
		Возврат;
	КонецЕсли;
	
	ИзменяетсяКонтрагент = НЕ Объект.КонтрагентДебитор = СтарыеЗначенияРеквизитов.КонтрагентДебитор;
	
	Если НЕ ИзменяетсяКонтрагент Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		ИзменятьКонтрагента = ОчиститьСтрокиПоВидуЗадолженности(Перечисления.ВидыЗадолженности.Дебиторская);
	Иначе
		ИзменятьКонтрагента = ОчиститьСтрокиПоВидуЗадолженности(Неопределено);
	КонецЕсли;
	
	Если ИзменятьКонтрагента Тогда
		СтарыеЗначенияРеквизитов.Вставить("КонтрагентДебитор", Объект.КонтрагентДебитор);
	Иначе
		Объект.КонтрагентДебитор = СтарыеЗначенияРеквизитов.КонтрагентДебитор;
	КонецЕсли;
	
	Если ИзменяетсяКонтрагент Тогда
		ВывестиНадписи();
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКредиторПриИзменении(Элемент)
	
	ИзменяетсяКонтрагент = НЕ Объект.КонтрагентКредитор = СтарыеЗначенияРеквизитов.КонтрагентКредитор;
	
	Если НЕ ИзменяетсяКонтрагент Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		ИзменятьКонтрагента = ОчиститьСтрокиПоВидуЗадолженности(Перечисления.ВидыЗадолженности.Кредиторская);
		ВывестиНадписи();
		
		Если ИзменятьКонтрагента Тогда
			СтарыеЗначенияРеквизитов.Вставить("КонтрагентКредитор", Объект.КонтрагентКредитор);
		Иначе
			Объект.КонтрагентКредитор = СтарыеЗначенияРеквизитов.КонтрагентКредитор;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И Объект.ДоговорКонтрагента.Владелец <> Объект.КонтрагентКредитор Тогда
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СуммыДолга = Объект.СуммыДолга;	
	
	Если СуммыДолга.Количество()>0 Тогда
		Если Вопрос("Изменился договор."+Символы.ПС+"Удалить строки с прочими договорами?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаДолга Из СуммыДолга Цикл
		Если СтрокаДолга.ДоговорКонтрагента <> Объект.ДоговорКонтрагента Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаДолга);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока из МассивУдаляемыхСтрок Цикл
		
		СуммыДолга.Удалить(УдаляемаяСтрока);
		
	КонецЦикла;
		
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.абс_КорректировкаРегистровВзаиморасчетов Тогда
		
		Объект.ВалютаДокумента = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
	КонецЕсли;
	
	Если МассивУдаляемыхСтрок.Количество() Тогда
		ВывестиНадписи();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораДоговора(Элемент, Объект.Организация, Объект.КонтрагентКредитор, Объект.ДоговорКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ВывестиНадписи();
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаПослеУдаления(Элемент)
	ВывестиНадписи();
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
СтарыеЗначенияРеквизитов = Новый Структура;
