Перем мУдалятьДвижения Экспорт;

Перем мВестиУчетНДС Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат

		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ СТРОК ДОКУМЕНТА

Процедура УдалитьНезаполненныеСтроки(ТаблицаДанных, ОбязательныеПоля)
	
	// Удаление строк, в которых есть незаполненные обязательные поля
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеПоля);
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Для Каждого ОбязательноеПоле Из СтруктураОбязательныхПолей Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы[ОбязательноеПоле.Ключ]) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДанных.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Запонить" в диалоге документа
// Реализует алгоритм автоматического заполнения табличной части.
//
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОтменитьПроведение = Ложь, УдалятьНезаполненные = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ОшибкаЗаполнения = Истина;
			СтрокаСообщения = " перед заполнением требуется отменить проведение документа";
			Если Сообщать Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
			КонецЕсли; 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	
	ЗаполнитьРазделРеализация(?(НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ), Ложь, УчетнаяПолитикаНУ.НДСИспользованиеОплатПокупателя_Приоритет0), , УдалятьНезаполненные);
	
	Если Реализация0 Тогда
		Авансы.Очистить();
		НачисленКУплате.Очистить();
		Восстановлен.Очистить();
		НеОтражаетсяВКниге.Очистить();
		ВосстановленПоАвансам.Очистить();
	Иначе
		ЗаполнитьРазделАвансы(, УдалятьНезаполненные);
		ЗаполнитьРазделНачисленКУплате(, УдалятьНезаполненные);
		ЗаполнитьРазделНеОтражаетсяВКниге(, УдалятьНезаполненные);
		ЗаполнитьРазделВосстановлен(, УдалятьНезаполненные);
		ЗаполнитьРазделВосстановленПоАвансам(, УдалятьНезаполненные);
	КонецЕсли;
	
	Если Не (Реализация.Количество() > 0 
		Или Авансы.Количество() >0
		Или НачисленКУплате.Количество() >0
		Или Восстановлен.Количество() >0
		Или НеОтражаетсяВКниге.Количество() >0
		Или ВосстановленПоАвансам.Количество() >0
        ) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС+" - не обнаружены записи к отражению в книге продаж"
	КонецЕсли;	

   Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьСтрокиДокумента()

// Заполняет раздел "Реализация"
Процедура ЗаполнитьРазделРеализация(НДСИспользованиеОплатПокупателя_Приоритет0, ОтменитьПроведение = Ложь, УдалятьНезаполненные = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = Реализация.ВыгрузитьКолонки();
	
	Если Реализация0 Тогда
		Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0();
	Иначе	
		Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный();
	КонецЕсли; 
	
	Если Дерево_НДСНачисленный.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		Реализация.Очистить();
		Возврат;
	КонецЕсли;

	СписокСчетовФактур = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСНачисленный.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	РаспределенныеОплаты = ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур);
	
	Если Не Реализация0 = НДСИспользованиеОплатПокупателя_Приоритет0 Тогда
		// В учетная политике приоритет в распределении оплат установлен по НДС 0%, отрабатывается НДС по прочим ставкам 
		// или наоборот - приоритет по прочим ставкам, отрабатывается 0%.
		// В этом случае суммы сначала распределяются на начисления, которые не отражаются данным документом,
		// лишь затем на начисления, которые могут быть отражены данным документом.
		Если Реализация0 Тогда
			ДеревоНДС_ВычетЗаблокирован = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный(СписокСчетовФактур);
		Иначе	
			ДеревоНДС_ВычетЗаблокирован = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0(Истина, СписокСчетовФактур);
		КонецЕсли; 
		
		РаспределитьОплатыПоДеревуСФ(ДеревоНДС_ВычетЗаблокирован, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Ложь);
	КонецЕсли; 
	
	РаспределитьОплатыПоДеревуСФ(Дерево_НДСНачисленный, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Истина);

	// Удаление строк, в которых есть незаполненные обязательные поля
	Если УдалятьНезаполненные Тогда
		
		ОбязательныеПоля = "ВидЦенности, СчетФактура, СтавкаНДС";
		Если Реализация0 Тогда
			ОбязательныеПоля = ОбязательныеПоля + ", Состояние"; 
		КонецЕсли; 
		УдалитьНезаполненныеСтроки(ТаблицаРезультатов, ОбязательныеПоля);
		
	КонецЕсли;
	
	//АБС ВСТАВКА Навценя 27.04.2015
	абс_УчетНДС.ЗапонлитьКод_Реализация(ТаблицаРезультатов, Организация, Дата);
	//АБС ВСТАВКА КОНЕЦ
	
	// {{KM WARE Агапов Н.А. Заявка №34436 14.10.2015 начало
	УдалениеСтрокПоУсловиям(ТаблицаРезультатов);
	// }}KM WARE Агапов Н.А. Заявка №34436 14.10.2015 окончание
	
	Реализация.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// {{KM WARE Агапов Н.А. Заявка №34436 13.10.2015 начало
Процедура УдалениеСтрокПоУсловиям(ТаблицаДанных)
	
	СтрокиКУдалению = Новый Массив;    		
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл			
		Если СтрокаТаблицы.СуммаБезНДС >0 и СтрокаТаблицы.СуммаБезНДС < 0.041 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;    			
	КонецЦикла; 		
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДанных.Удалить(СтрокаКУдалению);
	КонецЦикла; 

КонецПроцедуры // УдалениеСтрокПоУсловиям() }}KM WARE Агапов Н.А. Заявка №34436 14.10.2015 окончание


// Вызывается из процедуры ЗаполнитьРазделРеализация.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (за вычетом реализации 0%)
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный(СписокСчетовФактур = неопределено)

	Запрос = Новый Запрос;
// +++ввв 04.04.2016 г.	
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст="";
	Если ЭтотОбъект.ВидОперации=Перечисления.kwr_ВидыОперацийФормированиеКнигиПродаж.Агентский ИЛИ
		 ЭтотОбъект.ВидОперации=Перечисления.kwr_ВидыОперацийФормированиеКнигиПродаж.Стандартное Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
		|	НДСНачисленныйОстатки.ВидЦенности КАК ВидЦенности,
		|	НДСНачисленныйОстатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель КАК Покупатель,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаНДС,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаСНДС,
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорКонтрагента,
		|	НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.kmw_ЗаписьДополнительногоЛиста КАК ЗаписьДополнительногоЛиста,
		|	НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.ввв_ДатаЗаПериод КАК КорректируемыйПериод,
		|	ИСТИНА КАК Агентский
		|ПОМЕСТИТЬ ВТ_РеестрНачислений
		|ИЗ
		|	РегистрНакопления.НДСНачисленный.Остатки(
		|			&КонецПериодаГраница,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА &ОтборПоСпискуСФ
		|						ТОГДА СчетФактура В (&СписокСчетовФактур)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И НЕ ВидНачисления В (&ИсключаемыеВидыНачисления)
		|				И ВЫБОР
		|					КОГДА СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС ТОГДА
		|						ВЫБОР
		|							КОГДА СчетФактура.РасчетныйДокумент ССЫЛКА Документ.ОтчетКомиссионераОПродажах ТОГДА
		|								ВЫБОР
		|									КОГДА СчетФактура.РасчетныйДокумент.ввв_ФлагВыбораКаналаЗагрузки ТОГДА ИСТИНА
		|									ИНАЧЕ ЛОЖЬ
		|								КОНЕЦ
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) КАК НДСНачисленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРеализация0.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСРеализация0Остатки
		|		ПО НДСНачисленныйОстатки.СчетФактура = НДСРеализация0Остатки.СчетФактура
		|			И НДСНачисленныйОстатки.ВидЦенности = НДСРеализация0Остатки.ВидЦенности
		|			И НДСНачисленныйОстатки.СтавкаНДС = НДСРеализация0Остатки.СтавкаНДС
		|			И НДСНачисленныйОстатки.Покупатель = НДСРеализация0Остатки.Покупатель
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СчетФактура,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.kmw_ЗаписьДополнительногоЛиста,
		|	НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.ввв_ДатаЗаПериод,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода),
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ИСТИНА
		|";
	КонецЕсли;
	Если ЭтотОбъект.ВидОперации=Перечисления.kwr_ВидыОперацийФормированиеКнигиПродаж.Биллинг ИЛИ
		 ЭтотОбъект.ВидОперации=Перечисления.kwr_ВидыОперацийФормированиеКнигиПродаж.Стандартное Тогда
		Если Запрос.Текст<>"" Тогда
			Запрос.Текст=Запрос.Текст+"
		|
		|ОБЪЕДИНИТЬ
		|";
			Запрос.Текст=Запрос.Текст+"
		|ВЫБРАТЬ
		|	НДСНачисленныйОстатки.СчетФактура,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода),
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0)),
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)),
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)),
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.kmw_ЗаписьДополнительногоЛиста,
		|	НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.ввв_ДатаЗаПериод,
		|	ИСТИНА
		|
		|ИЗ
		|	РегистрНакопления.НДСНачисленный.Остатки(
		|			&КонецПериодаГраница,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА &ОтборПоСпискуСФ
		|						ТОГДА СчетФактура В (&СписокСчетовФактур)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И НЕ ВидНачисления В (&ИсключаемыеВидыНачисления)
		|				И ВЫБОР
		|					КОГДА СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС ТОГДА
		|						ВЫБОР
		|							КОГДА СчетФактура.РасчетныйДокумент ССЫЛКА Документ.ОтчетКомиссионераОПродажах ТОГДА
		|								ВЫБОР
		|									КОГДА СчетФактура.РасчетныйДокумент.ввв_ФлагВыбораКаналаЗагрузки ТОГДА ЛОЖЬ
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) КАК НДСНачисленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРеализация0.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСРеализация0Остатки
		|		ПО НДСНачисленныйОстатки.СчетФактура = НДСРеализация0Остатки.СчетФактура
		|			И НДСНачисленныйОстатки.ВидЦенности = НДСРеализация0Остатки.ВидЦенности
		|			И НДСНачисленныйОстатки.СтавкаНДС = НДСРеализация0Остатки.СтавкаНДС
		|			И НДСНачисленныйОстатки.Покупатель = НДСРеализация0Остатки.Покупатель
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СчетФактура,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.kmw_ЗаписьДополнительногоЛиста,
		|	НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.ввв_ДатаЗаПериод,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода),
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ИСТИНА
		|";
		Иначе
			Запрос.Текст = "
		|ВЫБРАТЬ
		|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
		|	НДСНачисленныйОстатки.ВидЦенности КАК ВидЦенности,
		|	НДСНачисленныйОстатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель КАК Покупатель,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаНДС,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаСНДС,
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорКонтрагента,
		|	НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.kmw_ЗаписьДополнительногоЛиста КАК ЗаписьДополнительногоЛиста,
		|	НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.ввв_ДатаЗаПериод КАК КорректируемыйПериод,
		|	ИСТИНА КАК Агентский
		|ПОМЕСТИТЬ ВТ_РеестрНачислений
		|ИЗ
		|	РегистрНакопления.НДСНачисленный.Остатки(
		|			&КонецПериодаГраница,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА &ОтборПоСпискуСФ
		|						ТОГДА СчетФактура В (&СписокСчетовФактур)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И НЕ ВидНачисления В (&ИсключаемыеВидыНачисления)
		|				И ВЫБОР
		|					КОГДА СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС ТОГДА
		|						ВЫБОР
		|							КОГДА СчетФактура.РасчетныйДокумент ССЫЛКА Документ.ОтчетКомиссионераОПродажах ТОГДА
		|								ВЫБОР
		|									КОГДА СчетФактура.РасчетныйДокумент.ввв_ФлагВыбораКаналаЗагрузки ТОГДА ЛОЖЬ
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) КАК НДСНачисленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРеализация0.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСРеализация0Остатки
		|		ПО НДСНачисленныйОстатки.СчетФактура = НДСРеализация0Остатки.СчетФактура
		|			И НДСНачисленныйОстатки.ВидЦенности = НДСРеализация0Остатки.ВидЦенности
		|			И НДСНачисленныйОстатки.СтавкаНДС = НДСРеализация0Остатки.СтавкаНДС
		|			И НДСНачисленныйОстатки.Покупатель = НДСРеализация0Остатки.Покупатель
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СчетФактура,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.kmw_ЗаписьДополнительногоЛиста,
		|	НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.ввв_ДатаЗаПериод,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода),
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ИСТИНА
		|";
		КонецЕсли;
	КонецЕсли;
	Если ЭтотОбъект.ВидОперации=Перечисления.kwr_ВидыОперацийФормированиеКнигиПродаж.БезАгенскогоИБиллинга ИЛИ
		 ЭтотОбъект.ВидОперации=Перечисления.kwr_ВидыОперацийФормированиеКнигиПродаж.Стандартное Тогда
		Если Запрос.Текст<>"" Тогда
			Запрос.Текст=Запрос.Текст+"
		|
		|ОБЪЕДИНИТЬ
		|";
			Запрос.Текст=Запрос.Текст+"
		|ВЫБРАТЬ
		|	НДСНачисленныйОстатки.СчетФактура,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода),
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0)),
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)),
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)),
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ЛОЖЬ,
		|	&НулеваяДата,
		|	ЛОЖЬ
		|
		|ИЗ
		|	РегистрНакопления.НДСНачисленный.Остатки(
		|			&КонецПериодаГраница,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА &ОтборПоСпискуСФ
		|						ТОГДА СчетФактура В (&СписокСчетовФактур)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И НЕ ВидНачисления В (&ИсключаемыеВидыНачисления)
		|				И ВЫБОР
		|					КОГДА СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС ТОГДА
		|						ВЫБОР
		|							КОГДА СчетФактура.РасчетныйДокумент ССЫЛКА Документ.ОтчетКомиссионераОПродажах ТОГДА ЛОЖЬ
		|							ИНАЧЕ ИСТИНА
		|						КОНЕЦ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК НДСНачисленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРеализация0.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСРеализация0Остатки
		|		ПО НДСНачисленныйОстатки.СчетФактура = НДСРеализация0Остатки.СчетФактура
		|			И НДСНачисленныйОстатки.ВидЦенности = НДСРеализация0Остатки.ВидЦенности
		|			И НДСНачисленныйОстатки.СтавкаНДС = НДСРеализация0Остатки.СтавкаНДС
		|			И НДСНачисленныйОстатки.Покупатель = НДСРеализация0Остатки.Покупатель
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СчетФактура,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	ЛОЖЬ,
		|	&НулеваяДата,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода),
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ЛОЖЬ
		|";
		Иначе
			Запрос.Текст = "
		|ВЫБРАТЬ
		|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
		|	НДСНачисленныйОстатки.ВидЦенности КАК ВидЦенности,
		|	НДСНачисленныйОстатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель КАК Покупатель,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаНДС,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаСНДС,
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорКонтрагента,
		|	ЛОЖЬ КАК ЗаписьДополнительногоЛиста,
		|	&НулеваяДата КАК КорректируемыйПериод,
		|	ЛОЖЬ КАК Агентский
		|ПОМЕСТИТЬ ВТ_РеестрНачислений
		|ИЗ
		|	РегистрНакопления.НДСНачисленный.Остатки(
		|			&КонецПериодаГраница,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА &ОтборПоСпискуСФ
		|						ТОГДА СчетФактура В (&СписокСчетовФактур)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И НЕ ВидНачисления В (&ИсключаемыеВидыНачисления)
		|				И ВЫБОР
		|					КОГДА СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС ТОГДА
		|						ВЫБОР
		|							КОГДА СчетФактура.РасчетныйДокумент ССЫЛКА Документ.ОтчетКомиссионераОПродажах ТОГДА ЛОЖЬ
		|							ИНАЧЕ ИСТИНА
		|						КОНЕЦ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК НДСНачисленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРеализация0.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСРеализация0Остатки
		|		ПО НДСНачисленныйОстатки.СчетФактура = НДСРеализация0Остатки.СчетФактура
		|			И НДСНачисленныйОстатки.ВидЦенности = НДСРеализация0Остатки.ВидЦенности
		|			И НДСНачисленныйОстатки.СтавкаНДС = НДСРеализация0Остатки.СтавкаНДС
		|			И НДСНачисленныйОстатки.Покупатель = НДСРеализация0Остатки.Покупатель
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СчетФактура,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	ЛОЖЬ,
		|	&НулеваяДата,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода),
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ЛОЖЬ
		|";
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
		|;
		|///////////////////////////////////////////////////////////////////////////////////////
// ---ввв 04.04.2016 г.		
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрНачислений.СчетФактура КАК СчетФактура,
		|	РеестрНачислений.СчетФактураДата КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА РеестрНачислений.СчетФактураДата >= &Начало2006Года
		|			ТОГДА &МоментОпределения_ПоОтгрузке
		|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
		|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
		|	РеестрНачислений.ВидЦенности,
		|	РеестрНачислений.СтавкаНДС,
		|	РеестрНачислений.Покупатель,
		|	РеестрНачислений.СуммаБезНДС КАК СуммаБезНДС,
		|	РеестрНачислений.СуммаНДС КАК СуммаНДС,
		|	РеестрНачислений.СуммаСНДС КАК СуммаСНДС,
		|	РеестрНачислений.ДоговорКонтрагента КАК ДоговорКонтрагента,
// +++ввв 04.04.2016 г.
		|	РеестрНачислений.Агентский КАК Агентский,
// ---ввв 04.04.2016 г.
		|	РеестрНачислений.ЗаписьДополнительногоЛиста КАК ЗаписьДополнительногоЛиста,
		|	РеестрНачислений.КорректируемыйПериод КАК КорректируемыйПериод
		|ИЗ
		|	ВТ_РеестрНачислений КАК РеестрНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО (УчетнаяПолитикаНалоговыйУчет.Организация = &Организация)
		|			И (ВЫБОР
		|				КОГДА &ОтборПоСпискуСФ
		|					ТОГДА РеестрНачислений.СчетФактура В (&СписокСчетовФактур)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК Период
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					РеестрНачислений.СчетФактураДата >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И УчетнаяПолитикаНалоговыйУчет.Организация = &Организация))
		|ГДЕ
		|	НЕ РеестрНачислений.СуммаСНДС = 0
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата,
		|	СчетФактура
		|ИТОГИ
		|	МИНИМУМ(СчетФактураДата),
		|	СУММА(СуммаБезНДС),
		|	СУММА(СуммаНДС),
		|	СУММА(СуммаСНДС)
		|ПО
		|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
// +++ввв 09.03.2016 г.
	Запрос.УстановитьПараметр("НулеваяДата",Дата("00010101000000"));
// ---ввв 09.03.2016 г.
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыНачисления = Новый СписокЗначений;
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);		// не отражается в книге продаж
	
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСНачисленКУплате);	// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСсАвансов);			// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСВосстановлен);		// Отражается отдельно
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыНачисления", ИсключаемыеВидыНачисления);

	Запрос.УстановитьПараметр("ОтборПоСпискуСФ", (не СписокСчетовФактур = Неопределено));
	Запрос.УстановитьПараметр("СписокСчетовФактур",СписокСчетовФактур);
	
// +++ввв 04.04.2016 г.
	РезультатЗапроса=Запрос.Выполнить();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
//	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Возврат РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
// ---ввв 04.04.2016 г.
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Вызывается из процедуры ЗаполнитьРазделРеализация.
// Заполняет ТЧ Реализация по данным регистра НДСПредъявленныйРеализация0
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0(ВключитьОжиданиеПодтверждения = ложь, СписокСчетовФактур = Неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Остатки.Организация,
		|	НДСРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
		|			ТОГДА &МоментОпределения_ПоОтгрузке
		|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
		|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
		|	НДСРеализация0Остатки.ВидЦенности,
		|	НДСРеализация0Остатки.СтавкаНДС,
		|	НДСРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСРеализация0Остатки.НДСОстаток КАК СуммаНДС,
		|	НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток КАК СуммаСНДС,
		|	НДСРеализация0Остатки.Состояние,
		|	НДСНачисленныйОстатки.Покупатель,
		|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС_НачисленоВсего,
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток < НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток
		|				И (НЕ НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток < 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяКорректировка,
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорКонтрагента
// +++ввв 09.03.2016 г.
		|,
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
		|			ТОГДА ВЫБОР
		|					КОГДА НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент ССЫЛКА Документ.ОтчетКомиссионераОПродажах
		|						ТОГДА НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.kmw_ЗаписьДополнительногоЛиста
		|					ИНАЧЕ Ложь
		|				КОНЕЦ
		|		ИНАЧЕ Ложь
		|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
		|			ТОГДА ВЫБОР
		|					КОГДА НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент ССЫЛКА Документ.ОтчетКомиссионераОПродажах
		|						ТОГДА НДСНачисленныйОстатки.СчетФактура.РасчетныйДокумент.ввв_ДатаЗаПериод
		|					ИНАЧЕ &НулеваяДата
		|				КОНЕЦ
		|		ИНАЧЕ &НулеваяДата
		|	КОНЕЦ КАК КорректируемыйПериод
// ---ввв 09.03.2016 г.
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Остатки(
		|		&КонецПериодаГраница,
		|		Организация = &Организация
		|		    И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСРеализация0Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО УчетнаяПолитикаНалоговыйУчет.Организация = НДСРеализация0Остатки.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК Период
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И УчетнаяПолитикаНалоговыйУчет.Организация = НДСРеализация0Остатки.Организация))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСНачисленный.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСНачисленныйОстатки
		|		ПО НДСРеализация0Остатки.СчетФактура = НДСНачисленныйОстатки.СчетФактура
		|			И НДСРеализация0Остатки.ВидЦенности = НДСНачисленныйОстатки.ВидЦенности
		|			И НДСРеализация0Остатки.СтавкаНДС = НДСНачисленныйОстатки.СтавкаНДС
		|ГДЕ
		|	(НДСРеализация0Остатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСРеализация0Остатки.НДСОстаток > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(СуммаБезНДС),
		|	СУММА(СуммаНДС),
		|	СУММА(СуммаСНДС),
		|	МАКСИМУМ(ТребуетсяКорректировка)
		|ПО
		|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
// +++ввв 09.03.2016 г.
	Запрос.УстановитьПараметр("НулеваяДата",Дата("00010101000000"));
// ---ввв 09.03.2016 г.

	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);

	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	Если ВключитьОжиданиеПодтверждения Тогда
		ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	Если не СписокСчетовФактур = Неопределено Тогда
	   Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация"," 
			|		Организация = &Организация
			|		    И СчетФактура В (&СписокСчетовФактур)
			|");
		Запрос.УстановитьПараметр("СписокСчетовФактур",СписокСчетовФактур);
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СФДляКорректировки = РезультатЗапроса.Строки.НайтиСтроки(Новый Структура("ТребуетсяКорректировка", Истина));
	Для каждого СтрокаСФ Из СФДляКорректировки Цикл
		Для каждого СтрокаРасшифровки Из СтрокаСФ.Строки Цикл
			Если СтрокаРасшифровки.ТребуетсяКорректировка Тогда
				СтрокаРасшифровки.СуммаНДС = (СтрокаРасшифровки.СуммаНДС*СтрокаРасшифровки.СуммаСНДС_НачисленоВсего/СтрокаРасшифровки.СуммаСНДС);
				СтрокаРасшифровки.СуммаСНДС = СтрокаРасшифровки.СуммаСНДС_НачисленоВсего;
				СтрокаРасшифровки.СуммаБезНДС = СтрокаРасшифровки.СуммаСНДС - СтрокаРасшифровки.СуммаНДС;
			КонецЕсли; 
		КонецЦикла; 
		
		СтрокаСФ.СуммаНДС = СтрокаСФ.Строки.Итог("СуммаНДС");
		СтрокаСФ.СуммаСНДС = СтрокаСФ.Строки.Итог("СуммаСНДС");
		СтрокаСФ.СуммаБезНДС = СтрокаСФ.Строки.Итог("СуммаБезНДС");
	КонецЦикла; 
	
	Возврат РезультатЗапроса;

КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСРеализация0()

// Заполняет раздел "Авансы"
//
Процедура ЗаполнитьРазделАвансы(ОтменитьПроведение = Ложь, УдалятьНезаполненные = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = Авансы.ВыгрузитьКолонки();
	
	Таблица_НДСcАвансов = ЗаполнитьНДСНачисленныйДаннымиПоАвансам();
	
	Если Таблица_НДСcАвансов.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Авансы.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица_НДСcАвансов,ТаблицаРезультатов);

	// Удаление строк, в которых есть незаполненные обязательные поля
	Если УдалятьНезаполненные Тогда
		УдалитьНезаполненныеСтроки(ТаблицаРезультатов, "ВидЦенности, СчетФактура, СтавкаНДС, ДоговорКонтрагента");
	КонецЕсли;
	
	//АБС ВСТАВКА Навценя 27.04.2015
	абс_УчетНДС.ЗаполнитьКод_Авансы(ТаблицаРезультатов);
	//АБС ВСТАВКА КОНЕЦ
	
	Авансы.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделАвансы.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС с авансов)
Функция ЗаполнитьНДСНачисленныйДаннымиПоАвансам()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	&Событие_НДСсАвансов КАК Событие,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидНачисления = &НДСВидНачисления_НДСсАвансов) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСсАвансов", Перечисления.НДСВидНачисления.НДСсАвансов);
	Запрос.УстановитьПараметр("Событие_НДСсАвансов", Перечисления.СобытияПоНДСПродажи.ПолученАванс);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Заполняет раздел "НачисленКУплате"
//
Процедура ЗаполнитьРазделНачисленКУплате(ОтменитьПроведение = Ложь, УдалятьНезаполненные = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = НачисленКУплате.ВыгрузитьКолонки();
	
	Таблица_НДСНачисленКУплате = ЗаполнитьНДСНачисленныйДаннымиПоНДСНачисленномуКУплате();
	
	Если Таблица_НДСНачисленКУплате.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		НачисленКУплате.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица_НДСНачисленКУплате,ТаблицаРезультатов);

	// Удаление строк, в которых есть незаполненные обязательные поля
	Если УдалятьНезаполненные Тогда
		УдалитьНезаполненныеСтроки(ТаблицаРезультатов, "ВидЦенности, СчетФактура, СтавкаНДС");
	КонецЕсли;
	
	НачисленКУплате.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Заполняет раздел "Восстановлен"
//
Процедура ЗаполнитьРазделВосстановлен(ОтменитьПроведение = Ложь, УдалятьНезаполненные = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = Восстановлен.ВыгрузитьКолонки();
	
	Таблица_Восстановлен = ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленному();
	
	Если Таблица_Восстановлен.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Восстановлен.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица_Восстановлен, ТаблицаРезультатов);

	// Удаление строк, в которых есть незаполненные обязательные поля
	Если УдалятьНезаполненные Тогда
		УдалитьНезаполненныеСтроки(ТаблицаРезультатов, "ВидЦенности, СчетФактура, СтавкаНДС, СчетУчетаНДС");
	КонецЕсли;
	
	Восстановлен.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Заполняет раздел "Восстановлен по авансам"
Процедура ЗаполнитьРазделВосстановленПоАвансам(ОтменитьПроведение = Ложь, УдалятьНезаполненные = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = ВосстановленПоАвансам.ВыгрузитьКолонки();
	
	Таблица_Восстановлен = ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленномуПоАвансам();
	
	Если Таблица_Восстановлен.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		ВосстановленПоАвансам.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица_Восстановлен, ТаблицаРезультатов);

	// Удаление строк, в которых есть незаполненные обязательные поля
	Если УдалятьНезаполненные Тогда
		УдалитьНезаполненныеСтроки(ТаблицаРезультатов, "Поставщик, ДоговорКонтрагента, СчетФактура, СтавкаНДС");
	КонецЕсли;
	
	ВосстановленПоАвансам.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделНачисленКУплате.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСНачисленномуКУплате()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента,
// {{KM WARE Семенов И.С. Заявка № 33683 3.07.2015 начало
// Добавление Заполнения кода вида операции
// +++ввв 05.09.2016 г.
	//|выбор когда НДСНачисленныйОстатки.СчетФактура ссылка Документ.НачислениеНДСпоСМРхозспособом тогда ""08"" иначе """" конец как КодВидаОперации,
	|	ВЫБОР
// +++ввв 14.07.2017 г.
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.СМРСобственнымиСилами)
	|			ТОГДА ""01""
// ---ввв 14.07.2017 г.
	|		КОГДА НДСНачисленныйОстатки.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
	|			ТОГДА ""08""
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда)
	|			ТОГДА ""06""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаОперации,
// ---ввв 05.09.2016 г.
// }}KM WARE Семенов И.С. Заявка № 13.07.2015 окончание
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления = &НДСВидНачисления_НДСНачисленКУплате) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСНачисленКУплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 		 Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 			 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Вызывается из процедуры ЗаполнитьРазделВосстановлен.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленному()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.ИсправленныйСчетФактура,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления = &НДСВидНачисления) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления", 	 Перечисления.НДСВидНачисления.НДСВосстановлен);
	
	НДСкВосстановлению = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	НДСкВосстановлению.Колонки.Добавить("СчетУчетаНДС", новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Если НДСкВосстановлению.Количество() = 0 Тогда
		Возврат НДСкВосстановлению;
	КонецЕсли; 
	
	//Определение счетов учета НДС для формирования проводки по восстановлению
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленный.СчетФактура КАК СчетФактура,
	|	НДСНачисленный.ВидЦенности,
	|	НДСНачисленный.СтавкаНДС,
	|	НДСНачисленный.ИсправленныйСчетФактура,
	|	НДСНачисленный.СчетУчетаНДС,
	|	СУММА((НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС) * ВЫБОР
	|			КОГДА НДСНачисленный.ВидДвижения = &ДвижениеПриход
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|ГДЕ
	|	НДСНачисленный.Организация = &Организация
	|	И НДСНачисленный.СчетФактура В(&СписокСчетовФактур)
	|	И НДСНачисленный.ВидНачисления = &НДСВидНачисления
	|	И НДСНачисленный.ВидЦенности В(&СписокВидовЦенностей)
	|	И НДСНачисленный.СтавкаНДС В(&СписокСтавокНДС)
	|	И НДСНачисленный.Период <= &КонецПериода
	|	И (НЕ НДСНачисленный.СчетУчетаНДС = &ПустойСчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСНачисленный.Организация,
	|	НДСНачисленный.ВидЦенности,
	|	НДСНачисленный.СчетУчетаНДС,
	|	НДСНачисленный.СчетФактура,
	|	НДСНачисленный.СтавкаНДС,
	|	НДСНачисленный.ИсправленныйСчетФактура
	|
	|ИМЕЮЩИЕ
	|	СУММА((НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС) * ВЫБОР
	|			КОГДА НДСНачисленный.ВидДвижения = &ДвижениеПриход
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) > 0
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(Дата));
	Запрос.УстановитьПараметр("ПустаяДата"		, '00010101');
	Запрос.УстановитьПараметр("ПустойСчет"		, ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("НДСВидНачисления", Перечисления.НДСВидНачисления.НДСВосстановлен);
	
	Запрос.УстановитьПараметр("СписокСчетовФактур", ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидовЦенностей", ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавокНДС"	, ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	
	Запрос.УстановитьПараметр("ДвижениеПриход", ВидДвиженияНакопления.Приход);
	
	НДСкВосстановлениюВРазрезеСчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокиКУдалению = Новый Массив();
	КоличествоБазовыхСтрок = НДСкВосстановлению.Количество();
	
	Для НомерСтрокиВосстановления =1 по КоличествоБазовыхСтрок Цикл
		СтрокаВосстановления = НДСкВосстановлению[НомерСтрокиВосстановления-1];
		СтрокаСФВРазезеСчетов = НДСкВосстановлениюВРазрезеСчетов.Строки.Найти(СтрокаВосстановления.СчетФактура,"СчетФактура");
		Если СтрокаСФВРазезеСчетов = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		РасшифровкаСФвРазрезеСчетов = СтрокаСФВРазезеСчетов.Строки.НайтиСтроки(Новый Структура("ВидЦенности,СтавкаНДС",СтрокаВосстановления.ВидЦенности,СтрокаВосстановления.СтавкаНДС));
		
		Если РасшифровкаСФвРазрезеСчетов.Количество() =0 Тогда
			Продолжить;
		КонецЕсли; 
		
		СуммаСНДСПоСтроке = СтрокаВосстановления.СуммаСНДС;
		Для каждого СтрокаРасшифровки Из РасшифровкаСФвРазрезеСчетов Цикл
			СуммаПокрытия = 0;
			Если не СуммаСНДСПоСтроке*СтрокаРасшифровки.СуммаСНДС>0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СуммаПокрытия = ?(СуммаСНДСПоСтроке>0, Мин(СуммаСНДСПоСтроке,СтрокаРасшифровки.СуммаСНДС), Макс(СуммаСНДСПоСтроке,СтрокаРасшифровки.СуммаСНДС));
			
			//Добавление новой строки по восстановлению в разрезе СФ
			НоваяСтрокаВосстановления = НДСкВосстановлению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВосстановления, СтрокаВосстановления);
			НоваяСтрокаВосстановления.СуммаСНДС = СуммаПокрытия;
			НоваяСтрокаВосстановления.СуммаБезНДС = Окр(НоваяСтрокаВосстановления.СуммаБезНДС*СуммаПокрытия/СуммаСНДСПоСтроке,2);
			НоваяСтрокаВосстановления.НДС = НоваяСтрокаВосстановления.СуммаСНДС - НоваяСтрокаВосстановления.СуммаБезНДС;
			НоваяСтрокаВосстановления.СчетУчетаНДС = СтрокаРасшифровки.СчетУчетаНДС;
			
			СуммаСНДСПоСтроке = СуммаСНДСПоСтроке - СуммаПокрытия;
			
			//Уменьшение суммы по строке восстановления без указания счета
			СтрокаВосстановления.СуммаСНДС = СтрокаВосстановления.СуммаСНДС - НоваяСтрокаВосстановления.СуммаСНДС;
			СтрокаВосстановления.СуммаБезНДС = СтрокаВосстановления.СуммаБезНДС - НоваяСтрокаВосстановления.СуммаБезНДС;
			СтрокаВосстановления.НДС = СтрокаВосстановления.НДС - НоваяСтрокаВосстановления.НДС;
			
			//Уменьшение остатка в таблице расшифровки 
			СтрокаРасшифровки.СуммаСНДС = СтрокаРасшифровки.СуммаСНДС - НоваяСтрокаВосстановления.СуммаСНДС;
			
			Если СуммаСНДСПоСтроке = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаВосстановления);
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если не СуммаСНДСПоСтроке = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаВосстановления);
			НоваяСтрокаВосстановления = НДСкВосстановлению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВосстановления, СтрокаВосстановления);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		НДСкВосстановлению.Удалить(СтрокаКУдалению);
	КонецЦикла; 

	Возврат НДСкВосстановлению;
		
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Вызывается из процедуры ЗаполнитьРазделВосстановленПоАвансам.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленномуПоАвансам()

	ТаблицаВосстановлен = ВосстановленПоАвансам .ВыгрузитьКолонки();
	
	// Восстановление НДС по авансам выданным
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСсАвансовОстатки.Организация,
	               |	НДСсАвансовОстатки.СчетФактура,
	               |	НДСсАвансовОстатки.Покупатель КАК Поставщик,
	               |	НДСсАвансовОстатки.ДоговорКонтрагента,
	               |	НДСсАвансовОстатки.СтавкаНДС,
	               |	НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	               |	НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) КАК НДС,
	               |	НДСсАвансовОстатки.ВидЦенности,
				   |	НДСсАвансовОстатки.ИсправленныйСчетФактура
	               |ИЗ
	               |	РегистрНакопления.НДСсАвансов.Остатки(
	               |			&КонецПериодаГраница,
	               |			Организация = &Организация
	               |				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСсАвансовОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
	               |				&КонецПериодаГраница,
	               |				Организация = &Организация
	               |					И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСПредъявленныйОстатки
	               |		ПО НДСсАвансовОстатки.Организация = НДСПредъявленныйОстатки.Организация
	               |			И НДСсАвансовОстатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
	               |			И НДСсАвансовОстатки.Покупатель = НДСПредъявленныйОстатки.Поставщик
	               |			И НДСсАвансовОстатки.ДоговорКонтрагента = НДСПредъявленныйОстатки.ДоговорКонтрагента
	               |			И НДСсАвансовОстатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
	               |			И НДСсАвансовОстатки.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
	               |ГДЕ
	               |	НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) > 0
	               |	И НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) > 0";
				   
				   
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ТаблицаВосстановлен;
	КонецЕсли;

	ТаблицаНДССАвансов = Результат.Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНДССАвансов", ТаблицаНДССАвансов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаНДССАвансов.СчетФактура КАК СчетФактура
	               |ПОМЕСТИТЬ ТаблицаНДССАвансов
	               |ИЗ
	               |	&ТаблицаНДССАвансов КАК ТаблицаНДССАвансов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Контрагент КАК Поставщик,
	               |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента,
	               |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Документ КАК СчетФактура,
	               |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки(
	               |			&КонецПериодаГраница,
	               |			Организация = &Организация
	               |				И Документ В
	               |					(ВЫБРАТЬ
	               |						ТаблицаНДССАвансов.СчетФактура
	               |					ИЗ
	               |						ТаблицаНДССАвансов КАК ТаблицаНДССАвансов)) КАК РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки
	               |ГДЕ
	               |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток > 0";
				   
	ТаблицаНезачтенныхАвансов = Запрос.Выполнить().Выгрузить();
// +++ввв 01.04.2016 г.
	Запрос.МенеджерВременныхТаблиц.Закрыть();
// ---ввв 01.04.2016 г.
	
	СтруктураОтбора = Новый Структура("Поставщик, ДоговорКонтрагента, СчетФактура");
	МассивРаспределения = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНезачтенныхАвансов Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
		СтрокиОтбора = ТаблицаНДССАвансов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			Если (СтрокаОтбора.СуммаБезНДС = 0
				И СтрокаОтбора.НДС = 0) Или СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаРаспределения = Мин(СтрокаТаблицы.Сумма, СтрокаОтбора.СуммаБезНДС + СтрокаОтбора.НДС);
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - СуммаРаспределения;
			МассивРаспределения.Очистить();
			
			МассивРаспределения.Добавить(СтрокаОтбора.СуммаБезНДС);
			МассивРаспределения.Добавить(СтрокаОтбора.НДС);
			
			ИтогРаспределения = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаРаспределения, МассивРаспределения);
			
			СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС - ИтогРаспределения[0];
			СтрокаОтбора.НДС = СтрокаОтбора.НДС - ИтогРаспределения[1];
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	Для	Каждого СтрокаТаблицыНДССАвансов Из ТаблицаНДССАвансов Цикл
		Если СтрокаТаблицыНДССАвансов.СуммаБезНДС = 0
			И СтрокаТаблицыНДССАвансов.НДС = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыНДССАвансов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаНДССАвансов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНДССАвансов, ТаблицаВосстановлен);
	
	Возврат ТаблицаВосстановлен;
		
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Заполняет раздел "НеОтражаетсяВКниге"
Процедура ЗаполнитьРазделНеОтражаетсяВКниге(ОтменитьПроведение = Ложь, УдалятьНезаполненные = Ложь) Экспорт
	
	ТаблицаРезультатов = НеОтражаетсяВКниге.ВыгрузитьКолонки();
	ТаблицаРезультатов.Колонки.Добавить("ЗаписьДополнительногоЛиста",новый ОписаниеТипов("Булево"));
	ТаблицаРезультатов.Колонки.Добавить("КорректируемыйПериод");
	
	Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный_Неотражаемые();
	
	Если Дерево_НДСНачисленный.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		НеОтражаетсяВКниге.Очистить();
		Возврат;
	КонецЕсли;

	СписокСчетовФактур = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСНачисленный.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	РаспределенныеОплаты = ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур);
	
	// Заблокировать оплаты, зарегистрированные по счетам-фактурам,
	// которые могут быть использованы для погашения отражаемых в книге начислений.
	ДеревоНДС_ВычетЗаблокирован = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный(СписокСчетовФактур);
	ДеревоНДС_ВычетЗаблокирован0 = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0(Истина, СписокСчетовФактур);
	
	Если ДеревоНДС_ВычетЗаблокирован.Строки.Количество()>0 Тогда
		РаспределитьОплатыПоДеревуСФ(ДеревоНДС_ВычетЗаблокирован, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Ложь);
	КонецЕсли; 
	
	Если ДеревоНДС_ВычетЗаблокирован0.Строки.Количество()>0 Тогда
		РаспределитьОплатыПоДеревуСФ(ДеревоНДС_ВычетЗаблокирован0, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Ложь);
	КонецЕсли; 
	
	// Отражаем только оплаченные записи вне азвисимости от учетной политики - необходимо погасить запись в регистре начисления и в регистре оплат.
	РаспределитьОплатыПоДеревуСФ(Дерево_НДСНачисленный, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Истина, Истина);

	НеОтражаетсяВКниге.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделНеОтражаетсяВКниге.
// Заполняет ТЧ НеОтражаетсяВКниге по данным регистра НДС начисленный (по реализации ЕНВД)
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный_Неотражаемые()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
	|			ТОГДА &МоментОпределения_ПоОтгрузке
	|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
	|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК СуммаНДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие,
	|	НДСНачисленныйОстатки.ВидНачисления
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления В (&НДСВидыНачисления_Неотражаемые)) КАК НДСНачисленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО УчетнаяПолитикаНалоговыйУчет.Организация = НДСНачисленныйОстатки.Организация
	|			И (УчетнаяПолитикаНалоговыйУчет.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
	|				ГДЕ
	|					ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитикаНалоговыйУчет.Период
	|					И
	|					УчетнаяПолитикаНалоговыйУчет.Организация = НДСНачисленныйОстатки.Организация))
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаСНДС)
	|ПО
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	
	НДСВидыНачисления_Неотражаемые = новый массив();
	НДСВидыНачисления_Неотражаемые.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	Запрос.УстановитьПараметр("НДСВидыНачисления_Неотражаемые", 	 НДСВидыНачисления_Неотражаемые);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 		 Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 			 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Процедура вызывается из ЗаполнитьРазделРеализация.
// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
Функция ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Организация,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Период,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДатаОплаты,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегРасход,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегПриход,
	|	ВЫБОР
	|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор В (&СписокСчетовФактур)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоДокументРеализации
	|ПОМЕСТИТЬ РасчетыПоРеализации
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, &ДатаГраница, Регистратор, Организация = &Организация) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
	|ГДЕ
	|	(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор В (&СписокСчетовФактур)
	|			ИЛИ РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ В (&СписокСчетовФактур))
	|	И (НЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор = РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоРеализации.Организация,
	|	ВЫБОР
	|		КОГДА РасчетыПоРеализации.ЭтоДокументРеализации
	|			ТОГДА РасчетыПоРеализации.Регистратор
	|		ИНАЧЕ РасчетыПоРеализации.Документ
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА РасчетыПоРеализации.ЭтоДокументРеализации
	|			ТОГДА РасчетыПоРеализации.Документ
	|		ИНАЧЕ РасчетыПоРеализации.Регистратор
	|	КОНЕЦ КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА РасчетыПоРеализации.ЭтоДокументРеализации
	|			ТОГДА РасчетыПоРеализации.ДатаОплаты
	|		ИНАЧЕ РасчетыПоРеализации.Период
	|	КОНЕЦ КАК ДатаОплаты,
	|	ВЫБОР
	|		КОГДА РасчетыПоРеализации.ЭтоДокументРеализации
	|			ТОГДА РасчетыПоРеализации.СуммаРегРасход
	|		ИНАЧЕ РасчетыПоРеализации.СуммаРегПриход
	|	КОНЕЦ КАК РаспределеннаяОплата,
	|	ЛОЖЬ КАК РасчетыСБюджетом
	|ИЗ
	|	РасчетыПоРеализации КАК РасчетыПоРеализации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОплаты";
                                                              
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	РаспределенныеОплаты = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
// +++ввв 01.04.2016 г.
	Запрос.МенеджерВременныхТаблиц.Закрыть();
// ---ввв 01.04.2016 г.
	РаспределенныеОплаты.Колонки.Добавить("QueryId", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6)));

	Если РаспределенныеОплаты.Количество()>0 Тогда
		QueryId = Новый Массив(РаспределенныеОплаты.Количество());
		Для Счетчик=0 По РаспределенныеОплаты.Количество()-1 Цикл
			QueryId[Счетчик] = Счетчик;
		КонецЦикла; 
		РаспределенныеОплаты.ЗагрузитьКолонку(QueryId,"QueryId");
	КонецЕсли;
	
	Возврат РаспределенныеОплаты;	

КонецФункции // ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ()
 
// Процедура вызывается из тела процедуры "ЗаполнитьРазделРеализация".
// В процессе работы процедуры общая сумма НДС, которая может быть признана
// в качестве вычета распределяется по конкретным событиям оплаты, для того
// чтобы сопоставить факт признания вычета по НДС и факт оплаты поставщику, связанный
// с этим признанием.
Процедура РаспределитьОплатыПоДеревуСФ(Дерево_НДСНачисленный, ТаблицаРезультатов, СписокСчетовФактур, РаспределенныеОплаты, ОтражатьВРеестре = Истина, ОтражатьВидНачисления = Ложь )
	
	НДСНалоговыйПериод = Неопределено;
	
	Построитель_РаспределенныеОплаты = Новый построительЗапроса();
	Построитель_РаспределенныеОплаты.ИсточникДанных = Новый ОписаниеИсточникаДанных(РаспределенныеОплаты);
	
	// Подготовка структуры отбора
	Отбор = Построитель_РаспределенныеОплаты.Отбор;
	Отбор.Добавить("СчетФактура");
	Отбор.СчетФактура.Использование = Истина;
	Отбор.Добавить("РаспределеннаяОплата");
	Отбор.РаспределеннаяОплата.ВидСравнения = ВидСравнения.Больше;
	Отбор.РаспределеннаяОплата.Значение = 0;
	Отбор.РаспределеннаяОплата.Использование = Истина;
	
	Построитель_РаспределенныеОплаты.Порядок.Добавить("ДатаОплаты");
	
	ТаблицаОплат = Новый ТаблицаЗначений();
	ТаблицаОплат.Колонки.Добавить("ДокументОплаты");
	ТаблицаОплат.Колонки.Добавить("ДатаОплаты",Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаОплат.Колонки.Добавить("СуммаОплаты",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	// {{KM WARE Трухан А.Г. Агентский блок 28.09.2015 начало
	ТаблицаОплат.Колонки.Добавить("НомерОплаты",Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(30)));
	// }}KM WARE Трухан А.Г. Агентский блок 28.09.2015 окончание
	
	ТаблицаИсточникаПостроителя = Построитель_РаспределенныеОплаты.ИсточникДанных.ИсточникДанных;
	МоментОпределения_ПоОтгрузке = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке;
	
	Для каждого СтрокаСФ Из Дерево_НДСНачисленный.Строки Цикл
		
		ТаблицаОплат.Очистить();
		
		// {{KM WARE Трухан А.Г. Агентский блок 28.09.2015 начало
// +++ввв 11.04.2016 г.
		Попытка
			Если ТипЗнч(СтрокаСФ.СчетФактура)=Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") И ТипЗнч(СтрокаСФ.СчетФактура.Контрагент)=Тип("СправочникСсылка.абс_Продавец") Тогда
				СтрокаСФ.Агентский=Истина;
			КонецЕсли; 
		Исключение
		КонецПопытки;
// ---ввв 11.04.2016 г.
		// }}KM WARE Трухан А.Г. Агентский блок 28.09.2015 окончание
		
		Если УчетНДС.ДляСчетаФактурыНеТребуетсяОплата(СтрокаСФ.СчетФактура) Тогда
			НаличиеОплатыНеТребуется = Истина;
		Иначе
			НаличиеОплатыНеТребуется = (СтрокаСФ.Строки[0].МоментОпределенияНалоговойБазыНДС = МоментОпределения_ПоОтгрузке) Или Дата >= '20080101';
			Отбор = Построитель_РаспределенныеОплаты.Отбор;
			Отбор.СчетФактура.Значение = СтрокаСФ.СчетФактура;
			Отбор.РаспределеннаяОплата.ВидСравнения = ?(СтрокаСФ.СуммаСНДС>0,ВидСравнения.Больше,ВидСравнения.Меньше);
			
			Построитель_РаспределенныеОплаты.Выполнить();
			Если Построитель_РаспределенныеОплаты.Результат.Пустой() и не НаличиеОплатыНеТребуется и СтрокаСФ.СуммаСНДС	>= 0 Тогда
				// Оплата не обнаружена
				Продолжить;
			КонецЕсли; 
			
			ВыборкаОплат = Построитель_РаспределенныеОплаты.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
				
			СуммаКПогашению = СтрокаСФ.СуммаСНДС;

			Для каждого СтрокаРаспределеннойОплаты Из ВыборкаОплат Цикл
// +++ввв 17.06.2016 г.
				Если СтрокаСФ.СуммаСНДС>0 Тогда
					_СуммаОплаты = Мин(СуммаКПогашению,СтрокаРаспределеннойОплаты.РаспределеннаяОплата);
					_СуммаОплаты0=_СуммаОплаты;
					Если _СуммаОплаты0<0.41 Тогда
						_СуммаОплаты0=0;
					КонецЕсли;
				Иначе
					_СуммаОплаты = Макс(СуммаКПогашению,СтрокаРаспределеннойОплаты.РаспределеннаяОплата);
					_СуммаОплаты0=_СуммаОплаты;
					Если _СуммаОплаты0>-0.41 Тогда
						_СуммаОплаты0=0;
					КонецЕсли;
				КонецЕсли; 
				//СтрокаОплаты = ТаблицаОплат.Добавить();
				//СтрокаОплаты.ДокументОплаты = СтрокаРаспределеннойОплаты.ДокументОплаты;
				//СтрокаОплаты.ДатаОплаты = СтрокаРаспределеннойОплаты.ДатаОплаты;
				//Если СтрокаСФ.СуммаСНДС>0 Тогда
				//	СтрокаОплаты.СуммаОплаты = Мин(СуммаКПогашению,СтрокаРаспределеннойОплаты.РаспределеннаяОплата);
				//Иначе
				//	СтрокаОплаты.СуммаОплаты = Макс(СуммаКПогашению,СтрокаРаспределеннойОплаты.РаспределеннаяОплата);
				//КонецЕсли; 
				Если _СуммаОплаты0<>0 Тогда
					СтрокаОплаты = ТаблицаОплат.Добавить();
					СтрокаОплаты.ДокументОплаты = СтрокаРаспределеннойОплаты.ДокументОплаты;
					СтрокаОплаты.ДатаОплаты = СтрокаРаспределеннойОплаты.ДатаОплаты;
					СтрокаОплаты.СуммаОплаты=_СуммаОплаты;
				КонецЕсли;
				//СуммаКПогашению = СуммаКПогашению - СтрокаОплаты.СуммаОплаты;
				//ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QueryId].РаспределеннаяОплата = ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QueryId].РаспределеннаяОплата - СтрокаОплаты.СуммаОплаты;
				
				СуммаКПогашению = СуммаКПогашению - _СуммаОплаты;
				ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QueryId].РаспределеннаяОплата = ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QueryId].РаспределеннаяОплата - _СуммаОплаты;
// ---ввв 17.05.2016 г.
				Если СуммаКПогашению = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		Если ТаблицаОплат.Количество() = 0  Тогда
			// {{KM WARE Трухан А.Г. Агентский блок 28.09.2015 начало
// +++ввв 11.04.2016 г.
			ФлагНеАгентский=Истина;
			Попытка
				Если СтрокаСФ.Агентский=Истина Тогда
					// {{KM WARE Семенов И.С. Заявка № ... 13.01.2016 начало
        	        //СтрокаОплаты = ТаблицаОплат.Добавить();
					//ЗаписьОплаты = СтрокаСФ.СчетФактура.ДокументыОплаты[0];
					//СтрокаОплаты.ДатаОплаты = ЗаписьОплаты.ДатаОплаты;
					//СтрокаОплаты.НомерОплаты = ЗаписьОплаты.kmw_НомерОплаты;
					//СтрокаОплаты.СуммаОплаты = СтрокаСФ.СуммаСНДС;
					Если СтрокаСФ.СчетФактура.ДокументыОплаты.Количество()>0 Тогда    // Семенов Илья
						СтрокаОплаты = ТаблицаОплат.Добавить();
						ЗаписьОплаты = СтрокаСФ.СчетФактура.ДокументыОплаты[0];
						СтрокаОплаты.ДатаОплаты = ЗаписьОплаты.ДатаОплаты;
						СтрокаОплаты.НомерОплаты = ЗаписьОплаты.kmw_НомерОплаты;
						СтрокаОплаты.СуммаОплаты = СтрокаСФ.СуммаСНДС;
					Иначе
						СтрокаОплаты = ТаблицаОплат.Добавить();
						СтрокаОплаты.СуммаОплаты = СтрокаСФ.СуммаСНДС;
					КонецЕсли;			
					ФлагНеАгентский=Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;		
				// }}KM WARE Семенов И.С. Заявка № ... 13.01.2016 Окончание
 			   //Если НаличиеОплатыНеТребуется или СтрокаСФ.СуммаСНДС < 0 Тогда
			Если ФлагНеАгентский Тогда
				Если НаличиеОплатыНеТребуется или СтрокаСФ.СуммаСНДС < 0 Тогда
				// }}KM WARE Трухан А.Г. 28.09.2015 окончание
					СтрокаОплаты = ТаблицаОплат.Добавить();
					СтрокаОплаты.СуммаОплаты = СтрокаСФ.СуммаСНДС;
				Иначе
					Продолжить;	
				КонецЕсли;
			КонецЕсли;
// ---ввв 11.04.2016 г.
		ИначеЕсли ТаблицаОплат.Итог("СуммаОплаты")<> СтрокаСФ.СуммаСНДС и НаличиеОплатыНеТребуется тогда
			СтрокаОплаты = ТаблицаОплат.Добавить();
			СтрокаОплаты.СуммаОплаты = СтрокаСФ.СуммаСНДС - ТаблицаОплат.Итог("СуммаОплаты");
		ИначеЕсли СтрокаСФ.СуммаСНДС < 0 тогда
			СтрокаОплаты = ТаблицаОплат.Добавить();
			СтрокаОплаты.СуммаОплаты = СтрокаСФ.СуммаСНДС - ТаблицаОплат.Итог("СуммаОплаты");
		КонецЕсли; 
			
		Если не ОтражатьВРеестре тогда
			// Оплаты заблокированы, дальнейшая обработка не требуется
			Продолжить;
		КонецЕсли;
			
		Для каждого СтрокаОплаты Из ТаблицаОплат Цикл
			
			Если СтрокаСФ.Строки.Итог("СуммаСНДС") = 0 Тогда
				Прервать;
			КонецЕсли;
			
			МассивБазиса =  СтрокаСФ.Строки.ВыгрузитьКолонку("СуммаСНДС");
			Массив_БезНДС = СтрокаСФ.Строки.ВыгрузитьКолонку("СуммаБезНДС");
			
			МассивРезультата = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаОплаты.СуммаОплаты,МассивБазиса);
			КРаспределениюБезНДС = Окр(СтрокаОплаты.СуммаОплаты * СтрокаСФ.Строки.Итог("СуммаБезНДС")/СтрокаСФ.Строки.Итог("СуммаСНДС"),2);
			
			Если КРаспределениюБезНДС<>0 Тогда
				МассивРезультата_БезНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(КРаспределениюБезНДС,Массив_БезНДС);
			КонецЕсли; 
			
			НомерСтроки = 0;
			Для каждого СтрокаЗадолжености Из СтрокаСФ.Строки Цикл
				Если МассивРезультата[НомерСтроки] = 0 и ?(КРаспределениюБезНДС=0,Истина, МассивРезультата_БезНДС[НомерСтроки] =0) Тогда
					НомерСтроки = НомерСтроки + 1;
					Продолжить;
				КонецЕсли; 
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаЗадолжености);
				// {{KM WARE Трухан А.Г. Агентский блок 28.09.2015 начало
// +++ввв 11.04.2016 г.
				Попытка 
					СтрокаРезультата.Агентский = СтрокаСФ.Агентский;
				Исключение
				КонецПопытки;
// ---ввв 11.04.2016 г.
				// }}KM WARE Трухан А.Г. 28.09.2015 окончание
				СтрокаРезультата.СчетФактура	= СтрокаЗадолжености.СчетФактура;
				СтрокаРезультата.Покупатель		= СтрокаЗадолжености.Покупатель;
				СтрокаРезультата.ВидЦенности	= СтрокаЗадолжености.ВидЦенности;
				СтрокаРезультата.СтавкаНДС		= СтрокаЗадолжености.СтавкаНДС;
				
				СтрокаРезультата.ДокументОплаты	= СтрокаОплаты.ДокументОплаты;
				Если Реализация0 Тогда
					СтрокаРезультата.Состояние	= СтрокаЗадолжености.Состояние;
				КонецЕсли; 
				
				СтрокаРезультата.ДатаОплаты		= СтрокаОплаты.ДатаОплаты;
				
				СтрокаРезультата.СуммаБезНДС	= ?(КРаспределениюБезНДС=0,0, МассивРезультата_БезНДС[НомерСтроки]);
				СтрокаРезультата.НДС			= МассивРезультата[НомерСтроки]- СтрокаРезультата.СуммаБезНДС; //?(СтрокаСФ.ПорядокОплаты = 1,0,);
				
				СтрокаЗадолжености.СуммаБезНДС = СтрокаЗадолжености.СуммаБезНДС - СтрокаРезультата.СуммаБезНДС;
				СтрокаЗадолжености.СуммаНДС = СтрокаЗадолжености.СуммаНДС - СтрокаРезультата.НДС;
				СтрокаЗадолжености.СуммаСНДС = СтрокаЗадолжености.СуммаСНДС - (СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.НДС);
				Если Реализация0 Тогда
					Если СтрокаЗадолжености.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
						СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
					ИначеЕсли СтрокаЗадолжености.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
						СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
					КонецЕсли; 
				Иначе
					Если НаличиеОплатыНеТребуется Тогда
						СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
					Иначе
						СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.Оплата;
					КонецЕсли;
				КонецЕсли;
				
				Если (Реализация0 И СтрокаРезультата.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0) Тогда
					Если Дата >= '20060530' Тогда
						Если НДСНалоговыйПериод = Неопределено Тогда
							НДСНалоговыйПериод = УчетНДС.ПолучитьУПНДСНалоговыйПериод(Организация, Дата);
						КонецЕсли;
						СтрокаРезультата.ЗаписьДополнительногоЛиста = Истина;
						Если Реализация0 Тогда
							СтрокаРезультата.КорректируемыйПериод = Макс(СтрокаРезультата.ДатаОплаты, СтрокаЗадолжености.СчетФактураДата);
						Иначе 
							СтрокаРезультата.КорректируемыйПериод = ?(НаличиеОплатыНеТребуется, СтрокаЗадолжености.СчетФактураДата, 
																	Макс(СтрокаРезультата.ДатаОплаты, СтрокаЗадолжености.СчетФактураДата));
						КонецЕсли;
						Если ?(НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, 
								КонецМесяца(СтрокаРезультата.КорректируемыйПериод) = КонецМесяца(Дата),
								КонецКвартала(СтрокаРезультата.КорректируемыйПериод) = КонецКвартала(Дата)) Тогда
							СтрокаРезультата.ЗаписьДополнительногоЛиста = Ложь;
							СтрокаРезультата.КорректируемыйПериод = '00010101';
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ОтражатьВидНачисления Тогда
					СтрокаРезультата.ВидНачисления	= СтрокаЗадолжености.ВидНачисления;
				КонецЕсли; 
				НомерСтроки = НомерСтроки+1;
			КонецЦикла; 
			
		КонецЦикла; 
			
    КонецЦикла; 
	
	РаспределенныеОплаты = ТаблицаИсточникаПостроителя.Скопировать();
	
КонецПроцедуры // РаспределитьОплатыПоДеревуСФ()
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуЗаписей(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Начало2008", '20080101');
	Запрос.УстановитьПараметр("ВидНачисления_Реализация0", Перечисления.НДСВидНачисления.Реализация0);
	
	// Виды ценностей расчеты по которым не отражаются в расчетах с покупателями
	ВидаЦенностиБезОплаты = Новый Массив();
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидаЦенностиБезОплаты", ВидаЦенностиБезОплаты);
	
// +++ввв 01.04.2016 г.
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
// ---ввв 01.04.2016 г.
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.КорректируемыйПериод
		|		ИНАЧЕ &ПустаяДата
		|	КОНЕЦ КАК КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплаты,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_Реализация0 КАК ВидНачисления,
		|	ИСТИНА КАК ОтражатьВКниге,
		|	ТаблицаЗаписей.Состояние,
		|	УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС,
		|	""По реализации"" КАК НазваниеТаблицы,
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВлияетНаРасчеты,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.КорректируемыйПериод < &Начало2008
		|			ТОГДА УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.НДСНалоговыйПериод
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|	КОНЕЦ КАК НДСНалоговыйПериодДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА ТаблицаЗаписей.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорКонтрагента,
		|	ТаблицаЗаписей.КодВидаОперации
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода
		|		ПО (ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА)
		|			И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Организация
		|			И (УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.КорректируемыйПериод >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка";
		
	иначе
		
		абс_ДатаУчетаПоСчетамУчетаВНДСПродажи = Константы.абс_ДатаУчетаПоСчетамУчетаВНДСПродажи.Получить(); //АБС Коломиец 13849+
		
		Если абс_ДатаУчетаПоСчетамУчетаВНДСПродажи <> '00010101000000' И Дата >= абс_ДатаУчетаПоСчетамУчетаВНДСПродажи Тогда     
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаЗаписей.Ссылка.Организация,
			|	ТаблицаЗаписей.ВидЦенности,
			|	ТаблицаЗаписей.Покупатель,
			|	ТаблицаЗаписей.СчетФактура,
			|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
			|	ТаблицаЗаписей.СтавкаНДС,
			|	ТаблицаЗаписей.СуммаБезНДС,
			|	ТаблицаЗаписей.НДС,
			|	ТаблицаЗаписей.ДокументОплаты,
			|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
			|			ТОГДА ТаблицаЗаписей.КорректируемыйПериод
			|		ИНАЧЕ &ПустаяДата
			|	КОНЕЦ КАК КорректируемыйПериод,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
			|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
			|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
			|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
			|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
			|	КОНЕЦ КАК ДатаОплаты,
			|	ТаблицаЗаписей.Событие,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.СтавкаНДС = &СтавкаНДС_БезНДС
			|			ТОГДА &ВидНачисления_РеализацияБезНДС
			|		КОГДА ТаблицаЗаписей.СтавкаНДС = &СтавкаНДС_0
			|			ТОГДА &ВидНачисления_Реализация0
			|		ИНАЧЕ &ВидНачисления_РеализацияСНДС
			|	КОНЕЦ КАК ВидНачисления,
			|	ИСТИНА КАК ОтражатьВКниге,
			|	УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС,
			|	""По реализации"" КАК НазваниеТаблицы,
			|	ТаблицаЗаписей.НомерСтроки,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ВлияетНаРасчеты,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
			|			ТОГДА ТаблицаЗаписей.ДоговорКонтрагента
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ДоговорКонтрагента,
			|	NULL КАК СчетУчетаНДС,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.КорректируемыйПериод < &Начало2008
			|			ТОГДА УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.НДСНалоговыйПериод
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
			|	КОНЕЦ КАК НДСНалоговыйПериодДополнительногоЛиста,
			|	NULL КАК ИсправленныйСчетФактура,
			|	ТаблицаЗаписей.КодВидаОперации
			|ПОМЕСТИТЬ втНДСПродажи
			|ИЗ
			|	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК ТаблицаЗаписей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
			|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
			|			И (УчетнаяПолитикаНалоговыйУчет.Период В
			|				(ВЫБРАТЬ
			|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
			|				ИЗ
			|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
			|				ГДЕ
			|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитикаНалоговыйУчет.Период
			|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода
			|		ПО (ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА)
			|			И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Организация
			|			И (УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Период В
			|				(ВЫБРАТЬ
			|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
			|				ИЗ
			|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
			|				ГДЕ
			|					ТаблицаЗаписей.КорректируемыйПериод >= УчетнаяПолитикаНалоговыйУчет.Период
			|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
			|ГДЕ
			|	ТаблицаЗаписей.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаЗаписей.Ссылка.Организация,
			|	ТаблицаЗаписей.ВидЦенности,
			|	ТаблицаЗаписей.Покупатель,
			|	ТаблицаЗаписей.СчетФактура,
			|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
			|	ТаблицаЗаписей.СтавкаНДС,
			|	ТаблицаЗаписей.СуммаБезНДС,
			|	ТаблицаЗаписей.НДС,
			|	ТаблицаЗаписей.СчетФактура,
			|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
			|			ТОГДА ТаблицаЗаписей.КорректируемыйПериод
			|		ИНАЧЕ &ПустаяДата
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
			|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
			|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ,
			|	ТаблицаЗаписей.СчетФактура.Дата,
			|	ТаблицаЗаписей.Событие,
			|	&ВидНачисления_Авансы,
			|	ИСТИНА,
			|	НЕОПРЕДЕЛЕНО,
			|	""С авансов"",
			|	ТаблицаЗаписей.НомерСтроки,
			|	ЛОЖЬ,
			|	ТаблицаЗаписей.ДоговорКонтрагента,
			|	NULL,
			|	NULL,
			|	NULL,
			|	ТаблицаЗаписей.КодВидаОперации
			|ИЗ
			|	Документ.ФормированиеЗаписейКнигиПродаж.Авансы КАК ТаблицаЗаписей
			|ГДЕ
			|	ТаблицаЗаписей.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаЗаписей.Ссылка.Организация,
			|	ТаблицаЗаписей.ВидЦенности,
			|	ТаблицаЗаписей.Покупатель,
			|	ТаблицаЗаписей.СчетФактура,
			|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
			|	ТаблицаЗаписей.СтавкаНДС,
			|	ТаблицаЗаписей.СуммаБезНДС,
			|	ТаблицаЗаписей.НДС,
			|	ТаблицаЗаписей.ДокументОплаты,
			|	ТаблицаЗаписей.абс_ЗаписьДопЛиста,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.абс_ЗаписьДопЛиста = ИСТИНА
			|			ТОГДА ТаблицаЗаписей.абс_КорректируемыйПериод
			|		ИНАЧЕ &ПустаяДата
			|	КОНЕЦ,
			|	ЛОЖЬ,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
			|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
			|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
			|	КОНЕЦ,
			|	ТаблицаЗаписей.Событие,
			|	&ВидНачисления_НачисленКУплате,
			|	ИСТИНА,
			|	НЕОПРЕДЕЛЕНО,
			|	""Начисленный к уплате"",
			|	ТаблицаЗаписей.НомерСтроки,
			|	ЛОЖЬ,
			|	ТаблицаЗаписей.ДоговорКонтрагента,
			|	ТаблицаЗаписей.абс_СчетУчета,
			|	NULL,
			|	NULL,
			|	ТаблицаЗаписей.КодВидаОперации
			|ИЗ
			|	Документ.ФормированиеЗаписейКнигиПродаж.НачисленКУплате КАК ТаблицаЗаписей
			|ГДЕ
			|	ТаблицаЗаписей.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаЗаписей.Ссылка.Организация,
			|	ТаблицаЗаписей.ВидЦенности,
			|	ТаблицаЗаписей.Покупатель,
			|	ТаблицаЗаписей.СчетФактура,
			|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
			|	ТаблицаЗаписей.СтавкаНДС,
			|	ТаблицаЗаписей.СуммаБезНДС,
			|	ТаблицаЗаписей.НДС,
			|	ТаблицаЗаписей.ДокументОплаты,
			|	ЛОЖЬ,
			|	НЕОПРЕДЕЛЕНО,
			|	ЛОЖЬ,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
			|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
			|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
			|	КОНЕЦ,
			|	ТаблицаЗаписей.Событие,
			|	ТаблицаЗаписей.ВидНачисления,
			|	ЛОЖЬ,
			|	УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС,
			|	""Не отражается в книге"",
			|	ТаблицаЗаписей.НомерСтроки,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	""""
			|ИЗ
			|	Документ.ФормированиеЗаписейКнигиПродаж.НеОтражаетсяВКниге КАК ТаблицаЗаписей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
			|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
			|			И (УчетнаяПолитикаНалоговыйУчет.Период В
			|				(ВЫБРАТЬ
			|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
			|				ИЗ
			|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
			|				ГДЕ
			|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитикаНалоговыйУчет.Период
			|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
			|ГДЕ
			|	ТаблицаЗаписей.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаЗаписей.Ссылка.Организация,
			|	ТаблицаЗаписей.ВидЦенности,
			|	ТаблицаЗаписей.Покупатель,
			|	ТаблицаЗаписей.СчетФактура,
			|	&ПустаяДата,
			|	ТаблицаЗаписей.СтавкаНДС,
			|	ТаблицаЗаписей.СуммаБезНДС,
			|	ТаблицаЗаписей.НДС,
			|	НЕОПРЕДЕЛЕНО,
			|	ЛОЖЬ,
			|	НЕОПРЕДЕЛЕНО,
			|	ЛОЖЬ,
			|	&ПустаяДата,
			|	&Событие_НДСВосстановлен,
			|	&ВидНачисления_Восстановлен,
			|	ИСТИНА,
			|	НЕОПРЕДЕЛЕНО,
			|	""Восстановление по другим операциям"",
			|	ТаблицаЗаписей.НомерСтроки,
			|	ЛОЖЬ,
			|	NULL,
			|	ТаблицаЗаписей.СчетУчетаНДС,
			|	NULL,
			|	ТаблицаЗаписей.ИсправленныйСчетФактура,
			|	ТаблицаЗаписей.КодВидаОперации
			|ИЗ
			|	Документ.ФормированиеЗаписейКнигиПродаж.Восстановлен КАК ТаблицаЗаписей
			|ГДЕ
			|	ТаблицаЗаписей.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(Хозрасчетный.СчетДт) КАК Счет,
			|	ВЫБОР
			|		КОГДА Хозрасчетный.Регистратор ССЫЛКА Документ.СчетФактураВыданный
			|			ТОГДА Хозрасчетный.Регистратор.ДокументОснование
			|		ИНАЧЕ Хозрасчетный.Регистратор
			|	КОНЕЦ КАК Документ
			|ПОМЕСТИТЬ втХозрасчетный
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
			|ГДЕ
			|	Хозрасчетный.Организация = &Организация
			|	И (Хозрасчетный.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС)
			|			ИЛИ Хозрасчетный.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента)
			|			ИЛИ Хозрасчетный.СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСПоЭкспорту)))
			|	И Хозрасчетный.Активность = ИСТИНА
			|
			|СГРУППИРОВАТЬ ПО
			|	ВЫБОР
			|		КОГДА Хозрасчетный.Регистратор ССЫЛКА Документ.СчетФактураВыданный
			|			ТОГДА Хозрасчетный.Регистратор.ДокументОснование
			|		ИНАЧЕ Хозрасчетный.Регистратор
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втНДСПродажи.Организация,
			|	втНДСПродажи.ВидЦенности,
			|	втНДСПродажи.Покупатель,
			|	втНДСПродажи.СчетФактура,
			|	втНДСПродажи.СчетФактураДата,
			|	втНДСПродажи.СтавкаНДС,
			|	втНДСПродажи.СуммаБезНДС,
			|	втНДСПродажи.НДС,
			|	втНДСПродажи.ДокументОплаты,
			|	втНДСПродажи.ЗаписьДополнительногоЛиста,
			|	втНДСПродажи.КорректируемыйПериод,
			|	втНДСПродажи.СторнирующаяЗаписьДопЛиста,
			|	втНДСПродажи.ДатаОплаты,
			|	втНДСПродажи.Событие,
			|	втНДСПродажи.ВидНачисления,
			|	втНДСПродажи.ОтражатьВКниге,
			|	втНДСПродажи.МоментОпределенияНалоговойБазыНДС,
			|	втНДСПродажи.НазваниеТаблицы,
			|	втНДСПродажи.НомерСтроки,
			|	втНДСПродажи.ВлияетНаРасчеты,
			|	втНДСПродажи.ДоговорКонтрагента,
			|	втНДСПродажи.СчетУчетаНДС,
			|	втНДСПродажи.НДСНалоговыйПериодДополнительногоЛиста,
			|	втНДСПродажи.ИсправленныйСчетФактура,
			|	ЕСТЬNULL(втНДСПродажи.СчетУчетаНДС, втХозрасчетный.Счет) КАК абс_СчетУчета,
			|	втНДСПродажи.КодВидаОперации
			|ИЗ
			|	втНДСПродажи КАК втНДСПродажи
			|		ЛЕВОЕ СОЕДИНЕНИЕ втХозрасчетный КАК втХозрасчетный
			|		ПО (втХозрасчетный.Документ = ВЫБОР
			|				КОГДА втНДСПродажи.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
			|					ТОГДА втНДСПродажи.СчетФактура.ДокументОснование
			|				ИНАЧЕ ВЫБОР
			|						КОГДА втНДСПродажи.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
			|								И НЕ втНДСПродажи.СчетФактура.ФормироватьПроводки
			|							ТОГДА втНДСПродажи.СчетФактура.РасчетныйДокумент
			|						ИНАЧЕ втНДСПродажи.СчетФактура
			|					КОНЕЦ
			|			КОНЕЦ)";
		//АБС Коломиец 13843 -	
		Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.КорректируемыйПериод
		|		ИНАЧЕ &ПустаяДата
		|	КОНЕЦ КАК КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплаты,
		|	ТаблицаЗаписей.Событие,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.СтавкаНДС = &СтавкаНДС_БезНДС
		|			ТОГДА &ВидНачисления_РеализацияБезНДС
		|		КОГДА ТаблицаЗаписей.СтавкаНДС = &СтавкаНДС_0
		|			ТОГДА &ВидНачисления_Реализация0
		|		ИНАЧЕ &ВидНачисления_РеализацияСНДС
		|	КОНЕЦ КАК ВидНачисления,
		|	ИСТИНА КАК ОтражатьВКниге,
		|	УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС,
		|	""По реализации"" КАК НазваниеТаблицы,
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВлияетНаРасчеты,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА ТаблицаЗаписей.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорКонтрагента,
		|	NULL КАК СчетУчетаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.КорректируемыйПериод < &Начало2008
		|			ТОГДА УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.НДСНалоговыйПериод
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|	КОНЕЦ КАК НДСНалоговыйПериодДополнительногоЛиста,
		|	NULL КАК ИсправленныйСчетФактура,
		|	ТаблицаЗаписей.КодВидаОперации КАК КодВидаОперации
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода
		|		ПО (ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА)
		|			И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Организация
		|			И (УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.КорректируемыйПериод >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.СчетФактура,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.КорректируемыйПериод
		|		ИНАЧЕ &ПустаяДата
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ТаблицаЗаписей.СчетФактура.Дата,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_Авансы,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""С авансов"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	ТаблицаЗаписей.ДоговорКонтрагента,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ТаблицаЗаписей.КодВидаОперации
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Авансы КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.абс_ЗаписьДопЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.абс_ЗаписьДопЛиста = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.абс_КорректируемыйПериод
		|		ИНАЧЕ &ПустаяДата
		|	КОНЕЦ,
		|	ЛОЖЬ,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_НачисленКУплате,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""Начисленный к уплате"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	ТаблицаЗаписей.ДоговорКонтрагента,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ТаблицаЗаписей.КодВидаОперации
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.НачисленКУплате КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	ТаблицаЗаписей.Событие,
		|	ТаблицаЗаписей.ВидНачисления,
		|	ЛОЖЬ,
		|	УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС,
		|	""Не отражается в книге"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	""""
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.НеОтражаетсяВКниге КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	&ПустаяДата,
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	&ПустаяДата,
		|	&Событие_НДСВосстановлен,
		|	&ВидНачисления_Восстановлен,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""Восстановление по другим операциям"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	NULL,
		|	ТаблицаЗаписей.СчетУчетаНДС,
		|	NULL,
		|	ТаблицаЗаписей.ИсправленныйСчетФактура,
		|	ТаблицаЗаписей.КодВидаОперации
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Восстановлен КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка";
		
	    КонецЕсли;
	
		Запрос.УстановитьПараметр("СтавкаНДС_БезНДС", Перечисления.СтавкиНДС.БезНДС);
		Запрос.УстановитьПараметр("СтавкаНДС_0", Перечисления.СтавкиНДС.НДС0);		
		Запрос.УстановитьПараметр("ВидНачисления_РеализацияБезНДС", Перечисления.НДСВидНачисления.РеализацияБезНДС);
		Запрос.УстановитьПараметр("ВидНачисления_РеализацияСНДС",	Перечисления.НДСВидНачисления.РеализацияСНДС);
		Запрос.УстановитьПараметр("ВидНачисления_Авансы", 			Перечисления.НДСВидНачисления.НДСсАвансов);
		Запрос.УстановитьПараметр("ВидНачисления_НачисленКУплате",	Перечисления.НДСВидНачисления.НДСНачисленКУплате);
		Запрос.УстановитьПараметр("ВидНачисления_Восстановлен",		Перечисления.НДСВидНачисления.НДСВосстановлен);
		Запрос.УстановитьПараметр("Событие_НДСВосстановлен",		Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
		Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
		Запрос.УстановитьПараметр("Организация", Организация);

	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	
// +++ввв 01.04.2016 г.
	Попытка
		Запрос.МенеджерВременныхТаблиц.Закрыть();
	Исключение
	КонецПопытки;
// ---ввв 01.04.2016 г.
	
	ТаблицаЗаписей = Результат.Выгрузить();
	ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Для каждого СтрокаТаблицы из ТаблицаЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
			СтрокаТаблицы.ДатаОплаты = '00010101';
		КонецЕсли; 
		
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
		Иначе
			СтрокаТаблицы.ДатаСобытия = Макс(СтрокаТаблицы.ДатаОплаты,СтрокаТаблицы.СчетФактураДата);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаЗаписей;

КонецФункции // ПодготовитьТаблицуЗаписей()

Функция ПодготовитьТаблицуПоВосстановлениюПоАвансам(РезультатЗапросаПоВосстановлениюПоАвансам, СтруктураШапкиДокумента)
	
	ТаблицаПоВосстановлениюПоАвансам = РезультатЗапросаПоВосстановлениюПоАвансам.Выгрузить();
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные, "ВидЦенности");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ВидНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.НДСВидНачисления"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСВосстановлен, "ВидНачисления");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПродажи"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаСобытия");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.Периодичность.Квартал, "НДСНалоговыйПериодДополнительногоЛиста");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ДатаОплаты", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаОплаты");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ДокументОплаты", Новый ОписаниеТипов(ТаблицаПоВосстановлениюПоАвансам.Колонки.СчетФактура.ТипЗначения));
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("абс_СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));             //АБС Коломиец 13843
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным, "абс_СчетУчета");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоВосстановлениюПоАвансам Цикл
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
		СтрокаТаблицы.ДатаОплаты = СтрокаТаблицы.ДатаСчетаФактуры;
		СтрокаТаблицы.ДокументОплаты = СтрокаТаблицы.СчетФактура;
		                 
	КонецЦикла; 
	
	Возврат ТаблицаПоВосстановлениюПоАвансам;
	
КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличныхЧастей(СтруктураШапкиДокумента, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, СчетФактура, СтавкаНДС"); 
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		СтруктураОбязательныхПолей.Вставить("Состояние"); 
	КонецЕсли; 
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Реализация", СтруктураОбязательныхПолей, Отказ, Заголовок);
	

	Если не СтруктураШапкиДокумента.Реализация0 Тогда
		
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		// Теперь вызовем общую процедуру проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураОбязательныхПолей, Отказ, Заголовок);
		СтруктураОбязательныхПолей.Удалить("ДоговорКонтрагента");
		
		// Для НДС начисленного к уплате может быть не щаполнен покупатель по СМР пдрядным и внутреннему потреблению
		
		// Теперь вызовем общую процедуру проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НачисленКУплате", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		//СтруктураОбязательныхПолей.Вставить("ДокументОплаты");
		// Теперь вызовем общую процедуру проверки.
		// Для НДС начисленного к уплате может быть не щаполнен покупатель по СМР пдрядным и внутреннему потреблению
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НеОтражаетсяВКниге", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		
		// Для НДС восстановленного должен быть заполнен счет учета НДС для формирования проводки
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Восстановлен", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		СтруктураОбязательныхПолей.Удалить("СчетУчетаНДС");
		СтруктураОбязательныхПолей.Удалить("ВидЦенности");
		СтруктураОбязательныхПолей.Вставить("Поставщик");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		// Для НДС восстановленного должен быть заполнен счет учета НДС для формирования проводки
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВосстановленПоАвансам", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;                                          
	
	// Проверка полей на логическое соответствие
	//СтрокаСообщенияДатаОплаты = "Не заполнены документ оплаты и дата оплаты. В книге покупок по данной записи в качестве даты оплаты будет установлена дата текущего документа!";
	СтрокаСообщенияПокупатель = "Не заполнено значение реквизита ""Покупатель""!";
	СтрокаСообщенияПоставщик = "Не заполнено значение реквизита ""Поставщик""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";
	Для каждого СтрокаТаблицы из ТаблицаПоНачислению Цикл
		Если  СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ВнутреннееПотребление
			или СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
			// Покупателем является сама оргнизация
			СтрокаТаблицы.Покупатель = Неопределено;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") 
			Или (ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
			И НЕ (
				СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные 
				или СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 
				или СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате
				))
			тогда
			// По рознице покупатель не указывается
			СтрокаТаблицы.Покупатель = Неопределено;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.Покупатель) тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части """ + СтрокаТаблицы.НазваниеТаблицы + """: ";
			Если СтрокаТаблицы.НазваниеТаблицы = "Восстановление по другим операциям" Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПоставщик,Отказ,Заголовок);
			Иначе
				ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПокупатель,Отказ,Заголовок);
			КонецЕсли;
		КонецЕсли; 
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части """ + СтрокаТаблицы.НазваниеТаблицы + """: ";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод,Отказ,Заголовок);		
		КонецЕсли;
		
	КонецЦикла; 

	Для Каждого СтрокаТаблицы Из ТаблицаПоВосстановлениюПоАвансам Цикл
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста 
			И Не ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части """ + ВосстановленПоАвансам + """: ";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, Отказ ,Заголовок);		
		КонецЕсли;
	КонецЦикла; 
		
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок)
	
	ДвиженияПоРегистрамНачисления(СтруктураШапкиДокумента, ТаблицаПоНачислению, Отказ, Заголовок);
	ДвиженияПоРегистрамВосстановлениеПоАвансам(СтруктураШапкиДокумента, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамНачисления(СтруктураШапкиДокумента, ТаблицаПоНачислению, Отказ, Заголовок)
	
	Если ТаблицаПоНачислению.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
		// Отражение по регистру "НДС начисленный"
		ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();

		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоНачислению,ТаблицаДвижений_НДСНачисленный);
		ТаблицаДвижений_НДСНачисленный.Свернуть("Период,Активность,Организация,СчетФактура,ВидЦенности,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидНачисления,ДоговорКонтрагента,СчетУчетаНДС,ИсправленныйСчетФактура","СуммаБезНДС,НДС");
		
		Движения.НДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ВыполнитьРасход();
		
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПродаж
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();

	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("ОтражатьВКниге",Новый ОписаниеТипов("Булево"));
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста");
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("СчетФактураДата",Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоНачислению,ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПродаж Цикл
		Если не СтрокаЗаписи.ОтражатьВКниге Тогда
			СтрокиКУдалению.Добавить(СтрокаЗаписи);
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.Реализация0 и СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
			Если СтрокаЗаписи.ЗаписьДополнительногоЛиста = Ложь Тогда
				СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.СчетФактураДата);
			Иначе				
				СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
			КонецЕсли; 
			СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
		КонецЕсли;
	КонецЦикла; 
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
	    ТаблицаДвижений_НДСЗаписиКнигиПродаж.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.ОтражатьВКниге);
	
	ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДСНалоговыйПериодДополнительногоЛиста);
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Состояние);
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СчетФактураДата);
	КонецЕсли;
	
	абс_ДатаУчетаПоСчетамУчетаВНДСПродажи = глЗначениеПеременной("абс_ДатаУчетаПоСчетамУчетаВНДСПродажи"); //АБС Коломиец 13849+		
	Если абс_ДатаУчетаПоСчетамУчетаВНДСПродажи <> '00010101000000' И Дата >= абс_ДатаУчетаПоСчетамУчетаВНДСПродажи Тогда     			
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидЦенности,ЗаписьДополнительногоЛиста,КорректируемыйПериод,СторнирующаяЗаписьДопЛиста, ДоговорКонтрагента, ИсправленныйСчетФактура, КодВидаОперации, абс_СчетУчета","СуммаБезНДС,НДС");
	Иначе //АБС Коломиец 13849-
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидЦенности,ЗаписьДополнительногоЛиста,КорректируемыйПериод,СторнирующаяЗаписьДопЛиста, ДоговорКонтрагента, ИсправленныйСчетФактура, КодВидаОперации","СуммаБезНДС,НДС");	
	КонецЕсли;
	
	Движения.НДСЗаписиКнигиПродаж.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение(Ложь);
	
	Если мВестиУчетНДС Тогда
		Если СтруктураШапкиДокумента.Реализация0 Тогда
			// Отражение по регистру НДСРеализация0
			ТаблицаДвижений_НДСРеализация0 = Движения.НДСРеализация0.ВыгрузитьКолонки();

			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоНачислению,ТаблицаДвижений_НДСРеализация0);
			ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
			
			Движения.НДСРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
			Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
			Движения.НДСРеализация0.ДобавитьДвижение(Ложь);

		КонецЕслИ;
	КонецЕсли;
	
	ВидыНачисления_Реализация = Новый СписокЗначений;
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	// Сфоормировать проводи по записям книги продаж
	Для каждого ТекСтрокаВычета Из ТаблицаПоНачислению Цикл
			
		Если Не ТекСтрокаВычета.ОтражатьВКниге Тогда
			Продолжить;
		ИначеЕсли ТекСтрокаВычета.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если не ВидыНачисления_Реализация.НайтиПоЗначению(ТекСтрокаВычета.ВидНачисления) = Неопределено Тогда
			Если ТекСтрокаВычета.СчетФактураДата >= '20060101' Тогда 
				// C 2006 года учетная политика всегда по отгрузке
				Продолжить;
			ИначеЕсли не ТекСтрокаВычета.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате тогда
				Продолжить;
			ИначеЕсли ТипЗнч(ТекСтрокаВычета.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхпродажах")
				Или ТипЗнч(ТекСтрокаВычета.СчетФактура) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") тогда
				Продолжить;
			КонецЕсли; 
					
			Движение = Движения.Хозрасчетный.Добавить();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация =  СтруктураШапкиДокумента.Организация;
			Движение.Сумма = ТекСтрокаВычета.НДС;
			Движение.Содержание = "НДС ";
			Движение.НомерЖурнала = "НДС";
					
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет; //76.Н
			
			Попытка
			Вр_Контрагент = ?(ТипЗнч(ТекСтрокаВычета.Покупатель) = Тип("СправочникСсылка.Контрагенты")
							,ТекСтрокаВычета.Покупатель
							,ТекСтрокаВычета.СчетФактура.Контрагент);
			Исключение
			Вр_Контрагент = Справочники.Контрагенты.ПустаяСсылка();				
			КонецПопытки;							
							
			//БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", ТекСтрокаВычета.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", Вр_Контрагент);

			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФВыданные", ТекСтрокаВычета.СчетФактура);
					
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ИначеЕсли ТекСтрокаВычета.ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен Тогда
			// Проводка по восстановлению НДС на 19 счет 
			Движение = Движения.Хозрасчетный.Добавить();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация =  СтруктураШапкиДокумента.Организация;
			Движение.Сумма = ТекСтрокаВычета.НДС;
			Движение.Содержание = "Восстановление НДС";
			Движение.НомерЖурнала = "НДС";
					
			Движение.СчетДт = ТекСтрокаВычета.СчетУчетаНДС; //19.ХХ
			
			Попытка
			Вр_Контрагент = ?(ТипЗнч(ТекСтрокаВычета.Покупатель) = Тип("СправочникСсылка.Контрагенты")
							,ТекСтрокаВычета.Покупатель
							,ТекСтрокаВычета.СчетФактура.Контрагент);
			Исключение
			Вр_Контрагент = Справочники.Контрагенты.ПустаяСсылка();				
			КонецПопытки;							
							
			//БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", ТекСтрокаВычета.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", Вр_Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФполученные", ТекСтрокаВычета.СчетФактура);
					
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				
		КонецЕсли; 			
       
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамВосстановлениеПоАвансам(СтруктураШапкиДокумента, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок)
	
	Если ТаблицаПоВосстановлениюПоАвансам.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Отражение по регистру НДСПредъявленный
	ТаблицаДвижений_НДСсАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоВосстановлениюПоАвансам, ТаблицаДвижений_НДСсАвансов);
	ТаблицаДвижений_НДСсАвансов.Свернуть("Период, Активность, Организация, СчетФактура, ВидЦенности, СтавкаНДС, Покупатель, ДоговорКонтрагента, ДатаСобытия, ИсправленныйСчетФактура", "СуммаБезНДС, НДС");
		
	Движения.НДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДСсАвансов;
	Движения.НДСсАвансов.ВыполнитьРасход();
		
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоВосстановлениюПоАвансам, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	                                                                                                                                                                                                                                           
	ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДСНалоговыйПериодДополнительногоЛиста);
		
	абс_ДатаУчетаПоСчетамУчетаВНДСПродажи = глЗначениеПеременной("абс_ДатаУчетаПоСчетамУчетаВНДСПродажи"); //АБС Коломиец 13849+		
	Если абс_ДатаУчетаПоСчетамУчетаВНДСПродажи <> '00010101000000' И Дата >= абс_ДатаУчетаПоСчетамУчетаВНДСПродажи Тогда     			
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидЦенности,ЗаписьДополнительногоЛиста,КорректируемыйПериод,СторнирующаяЗаписьДопЛиста, ДоговорКонтрагента, ИсправленныйСчетФактура, КодВидаОперации, абс_СчетУчета","СуммаБезНДС,НДС");
	Иначе //АБС Коломиец 13849-	
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидЦенности,ЗаписьДополнительногоЛиста,КорректируемыйПериод,СторнирующаяЗаписьДопЛиста, ДоговорКонтрагента, ИсправленныйСчетФактура, КодВидаОперации","СуммаБезНДС,НДС");
	КонецЕсли;

	Движения.НДСЗаписиКнигиПродаж.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение(Ложь);
	
	// Сформировать проводки по записям книги покупок
	Для каждого СтрокаТаблицы Из ТаблицаПоВосстановлениюПоАвансам Цикл
		Если СтрокаТаблицы.НДС = 0 Тогда
			ПродолжитЬ;
		КонецЕсли; 
		
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация =  СтруктураШапкиДокумента.Организация;
		Движение.Сумма = СтрокаТаблицы.НДС;
		Движение.Содержание = "Восстановление НДС с выданного аванса";
		Движение.НомерЖурнала = "НДС";
		
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным; //76.ВА
		
		Попытка
		Вр_Контрагент = ?(ТипЗнч(СтрокаТаблицы.Покупатель) = Тип("СправочникСсылка.Контрагенты")
							,СтрокаТаблицы.Покупатель
							,СтрокаТаблицы.СчетФактура.Контрагент);
		Исключение
		Вр_Контрагент = Справочники.Контрагенты.ПустаяСсылка();				
		КонецПопытки;							
							
		//БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаТаблицы.Покупатель);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", Вр_Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФПолученные", СтрокаТаблицы.СчетФактура);
		
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
	КонецЦикла; 
	
	
КонецПроцедуры

Процедура ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж)
	
	Если СтруктураШапкиДокумента.ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Найти( Истина, "ЗаписьДополнительногоЛиста") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвернутаяТаблицаЗаписейДопЛиста = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Скопировать();
	
	Для каждого ТекущаяСтрока Из СвернутаяТаблицаЗаписейДопЛиста Цикл
		// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
		Если Не (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			Или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			Или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные)
			Тогда
			ТекущаяСтрока.СтавкаНДС = Неопределено;
		КонецЕсли; 
		// Авансы и налоговый агент (комитент) отрабатываются с учетом договора (на каждуй
		// договор отдельный счет-фактура или отдельное лист декларации)
		Если Не (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			Или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			Или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент
			Или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные)
			Тогда
			// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
			ТекущаяСтрока.ДоговорКонтрагента = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
// +++ввв 25.09.2017 г.
	//СвернутаяТаблицаЗаписейДопЛиста.Свернуть("СчетФактура,СтавкаНДС,ДоговорКонтрагента,ЗаписьДополнительногоЛиста,КорректируемыйПериод,НДСНалоговыйПериодДополнительногоЛиста","СуммаБезНДС,НДС");
	СвернутаяТаблицаЗаписейДопЛиста.Свернуть("СчетФактура,СтавкаНДС,ДоговорКонтрагента,ЗаписьДополнительногоЛиста,КорректируемыйПериод,НДСНалоговыйПериодДополнительногоЛиста, КодВидаОперации","СуммаБезНДС,НДС");
// ---ввв 25.09.2017 г.
	
	СтрокиДопЛистов = СвернутаяТаблицаЗаписейДопЛиста.НайтиСтроки(Новый Структура("ЗаписьДополнительногоЛиста", Истина));
	
	ОтработанныеСФпоПериодам = Новый ТаблицаЗначений();
	ОтработанныеСФпоПериодам.Колонки.Добавить("СчетФактура");
	ОтработанныеСФпоПериодам.Колонки.Добавить("НалоговыйПериод");
	ОтработанныеСФпоПериодам.Колонки.Добавить("СтавкаНДС");
	ОтработанныеСФпоПериодам.Колонки.Добавить("ДоговорКонтрагента");

	Для Каждого СтрокаДопЛиста Из СтрокиДопЛистов Цикл
		НачалоНалоговогоПериодаКорректировки = ?(СтрокаДопЛиста.НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал, НачалоКвартала(СтрокаДопЛиста.КорректируемыйПериод),НачалоМесяца(СтрокаДопЛиста.КорректируемыйПериод));
		ОтборОтработанныхЗаписей = новый Структура("СчетФактура,НалоговыйПериод",СтрокаДопЛиста.СчетФактура,НачалоНалоговогоПериодаКорректировки);
		Если ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС) Тогда
			ОтборОтработанныхЗаписей.Вставить("СтавкаНДС", СтрокаДопЛиста.СтавкаНДС);
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента) Тогда
			ОтборОтработанныхЗаписей.Вставить("ДоговорКонтрагента", СтрокаДопЛиста.ДоговорКонтрагента);
		КонецЕсли; 
		
		Если не (ОтработанныеСФпоПериодам.НайтиСтроки(ОтборОтработанныхЗаписей).Количество() = 0) Тогда
			// СФ по данному налоговому периоду уже отработан
			Продолжить;
		Иначе
			НоваяЗапись = ОтработанныеСФпоПериодам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ОтборОтработанныхЗаписей);
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Организация,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
		|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот * -1 КАК СуммаБезНДССторно,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот * -1 КАК НДССторно,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС,
		|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента,
// +++ввв 25.09.2017 г.
		|	&КодВО КАК КодВидаОперации,
// ---ввв 25.09.2017 г.
		|	НДСЗаписиКнигиПродажОбороты.абс_СчетУчета
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаГраница,
		|			Месяц,
		|			СчетФактура = &СчетФактура
		|				И ВЫБОР
		|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ДоговорКонтрагента = &ДоговорКонтрагента
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &СтавкаНДС = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ СтавкаНДС = &СтавкаНДС
		|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	((НЕ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста)
		|				И НДСЗаписиКнигиПродажОбороты.Период = &НачалоПериода
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста
		|				И (НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ)))";
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоНалоговогоПериодаКорректировки);
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СчетФактура", СтрокаДопЛиста.СчетФактура);
// +++ввв 25.09.2017 г.
		Запрос.УстановитьПараметр("КодВО", СтрокаДопЛиста.КодВидаОперации);
// ---ввв 25.09.2017 г.
		Запрос.УстановитьПараметр("СтавкаНДС", ?(ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС), СтрокаДопЛиста.СтавкаНДС, Неопределено));
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента), СтрокаДопЛиста.ДоговорКонтрагента, Неопределено));
		
		Если СтрокаДопЛиста.НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал Тогда
			Запрос.Текст = СтрЗаменить(Нрег(Запрос.Текст),"месяц","квартал");
		КонецЕсли; 
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			ТаблицаЗаписей = Результат.Выгрузить();
			
			ТаблицаЗаписей.Колонки.Добавить("ЗаписьДополнительногоЛиста");
			ТаблицаЗаписей.Колонки.Добавить("КорректируемыйПериод");
			ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия");
			ТаблицаЗаписей.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "ЗаписьДополнительногоЛиста,СторнирующаяЗаписьДопЛиста");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.КорректируемыйПериод, "КорректируемыйПериод");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаСобытия");
			
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДС.Имя = "СуммаБезНДССторно";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДС.Имя = "НДССторно";
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Ложь, "СторнирующаяЗаписьДопЛиста");
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДССторно.Имя = "СуммаБезНДС";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДССторно.Имя = "НДС";
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим) Экспорт
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	ТаблицаПоНачислению = ПодготовитьТаблицуЗаписей(СтруктураШапкиДокумента);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части по восстановлению по авансам.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",		 "Ссылка.Организация");
	СтруктураПолей.Вставить("Покупатель",		 "Поставщик");
	СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетФактура",	 	 "СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",	 "СчетФактура.Дата");
	СтруктураПолей.Вставить("СтавкаНДС",		 "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",		 "СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				 "НДС");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	СтруктураПолей.Вставить("ИсправленныйСчетФактура",		"ИсправленныйСчетФактура");
	СтруктураПолей.Вставить("КодВидаОперации",				"КодВидаОперации");
	
	РезультатЗапросаПоВосстановлениюПоАвансам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВосстановленПоАвансам", СтруктураПолей);
	ТаблицаПоВосстановлениюПоАвансам = ПодготовитьТаблицуПоВосстановлениюПоАвансам(РезультатЗапросаПоВосстановлениюПоАвансам, СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабличныхЧастей(СтруктураШапкиДокумента, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок);
	
	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

