Перем  СтруктураПодключения;

Функция НайтиКуратора(НаименованиеКуратора)
	Найд = Справочники.абс_Кураторы.НайтиПоНаименованию(НаименованиеКуратора,Истина);
	Если Найд.Пустая() Тогда
		НовКуратор = Справочники.абс_Кураторы.СоздатьЭлемент();
		НовКуратор.Наименование = НаименованиеКуратора;
		НовКуратор.УстановитьНовыйКод();
		НовКуратор.Записать();
		Найд = НовКуратор.Ссылка;
	КонецЕсли;
	
	Возврат Найд.Ссылка;
КонецФункции

Функция ПреобразоватьКДате(СтрокаДата)
	
	ПустаяДата=Дата('00010101');
	СтрокаДата = СокрЛП(Лев(СтрокаДата,11));
	День=Лев(СтрокаДата,2);
	Месяц=Сред(СтрокаДата,4,2);
	Год=Прав(СтрокаДата,4);
	СтрокаДата=""+Год + Месяц +  День;
	
	Попытка 
		ДатаДокумента=Дата(СтрокаДата);
		
	Исключение
		Возврат ПустаяДата;	
	КонецПопытки;
	
	Возврат  ДатаДокумента;
	
КонецФункции

Функция НайтиСчетНаОплату(FACTURENUM)
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетНаОплатуПокупателю.Ссылка
	               |ИЗ
	               |	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	               |ГДЕ
	               |	СчетНаОплатуПокупателю.FACTUREEXTERNALID = &FACTUREEXTERNALID
	               |	И СчетНаОплатуПокупателю.Организация = &Организация";
	Запрос.УстановитьПараметр("FACTUREEXTERNALID",FACTURENUM);
	Запрос.УстановитьПараметр("Организация",Организация);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество()>0 Тогда
		РезультатЗапроса.Следующий();
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Если Организация.абс_ИспользоватьПрефиксВБиллинге Тогда
			НомерСчета = СокрЛП(Организация.Префикс)+"B"+СокрЛП(Прав(СокрЛП(FACTURENUM),11));
			Запрос.Текст = "ВЫБРАТЬ
						|	СчетНаОплатуПокупателю.Ссылка
						|ИЗ
						|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
						|ГДЕ
						|	СчетНаОплатуПокупателю.Номер = &НомерСчета
						|	И СчетНаОплатуПокупателю.Организация = &Организация";
			Запрос.УстановитьПараметр("НомерСчета",НомерСчета);
			Если РезультатЗапроса.Количество()>0 Тогда
				РезультатЗапроса.Следующий();
				Возврат РезультатЗапроса.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		
		
		
		
		
		Возврат Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСумму(Сумма) Экспорт
	Если НЕ ЗначениеЗаполнено(Сумма) Тогда
		Возврат 0;
		
	КонецЕсли;
	Сумма=СтрЗаменить(Сумма," ","");
	Сумма=СтрЗаменить(Сумма,".",",");
	Сумма=СтрЗаменить(Сумма,символы.НПП,"");
	
	Попытка
		ЧислоСумма=Число(Сумма);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Возврат ЧислоСумма;
	
КонецФункции

Функция ПолучитьСтавкуНДС(Ставка)
	Если  Ставка="18" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли  Ставка="КНБН" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли  Ставка="0" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
		
	Иначе 
		Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция НайтиКонтрагентаВБазе(ИНН, КПП, СтруктураИмени)
	
	Наименование = СтруктураИмени.Наименование;
	Если  ЗначениеЗаполнено(ИНН)   ТОгда
		//Ищем контрагента по ИНН и КПП
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП
		|	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)";
		Запрос.УстановитьПараметр("ИНН",ИНН);
		Запрос.УстановитьПараметр("КПП",КПП);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Количество() > 0 Тогда
			//с даными ИНН и КПП контраент не найден, произведем поиск по наименованию
			Если РезультатЗапроса.Количество() = 1 Тогда 
				
				РезультатЗапроса.Следующий();
				Контрагент = РезультатЗапроса.Ссылка;
				Возврат Контрагент;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст ="ВЫБРАТЬ
				|	Контрагенты.Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &ИНН
				|	И Контрагенты.КПП = &КПП
				|	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)
				|	И Контрагенты.абс_НаименованиеБиллинг = &Наименование";
				Запрос.УстановитьПараметр("ИНН",ИНН);
				Запрос.УстановитьПараметр("КПП",КПП);
				Запрос.УстановитьПараметр("Наименование",СтруктураИмени.Наименование);
				
				РезультатЗапроса = Запрос.Выполнить().Выбрать();
				Если РезультатЗапроса.Следующий() Тогда
					Возврат РезультатЗапроса.Ссылка;
					
				КонецЕсли;
				//Ищем контрагента по ИНН и КПП +наименование биллинга
				//Сообщить("Контрагент "+Наименование+" имеет "+РезультатЗапроса.Количество()+" аналогов по ИНН "+ИНН+"и КПП "+КПП);			
			КонецЕсли;
		Иначе 
			
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	Иначе
		
		//В случае если онтрагент Нерезидент произведем поиск по наименованию
		Запрос=Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.абс_НаименованиеБиллинг = &Наименование
		|	И (Контрагенты.ИНН = """"
		|			ИЛИ Контрагенты.ИНН = ""-"")
		|	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)";
		Запрос.УстановитьПараметр("Наименование",СтруктураИмени.Наименование);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если  РезультатЗапроса.Количество()>0 Тогда
			РезультатЗапроса.Следующий();
			Контрагент = РезультатЗапроса.Ссылка;
			Возврат  Контрагент;
		Иначе
			Возврат 	Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция НайтиНоменклатуруПоБилингКоду(BILLINGGLCODE)
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				|	Номенклатура.Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.BILLINGGLCODE = &BILLINGGLCODE
				|	И Номенклатура.абс_СтатусНоменклатуры = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)";
	
	
	Если Организация.Префикс = "XBL" и Найти(BILLINGGLCODE,"401-") Тогда
		BILLINGGLCODE = "401";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("BILLINGGLCODE",BILLINGGLCODE);
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество()>0 Тогда
		РезультатЗапроса.Следующий();
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка(); 
	КонецЕсли;
	
КонецФункции

Функция НайтиВалюту(КодВалюты)
	
	//Если СтрДлина(СокрЛП(КодВалюты))=2 Тогда
	//	КодВалюты = "0"+КодВалюты;
	//КонецЕсли;
	
	
	Если Найти(КодВалюты,"810")>0 Тогда
		Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП("643"));
	ИначеЕсли Найти(КодВалюты,"250")>0 Тогда
		Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП("960"));	
	Иначе
		Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП(КодВалюты));
		
	КонецЕсли;	
	Если Валюта.Пустая() Тогда
		Валюта = Справочники.Валюты.НайтиПоНаименованию(СокрЛП(КодВалюты),Истина);
	КонецЕсли;
	
	Если Валюта.Пустая() Тогда 
		Если Найти(КодВалюты,"RUB")>0 Тогда
			Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП("643"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Валюта;

	
КонецФункции

Процедура СоздатьНенайденных(ТЧ)   Экспорт
	
	ТаблицаКонтрагентов=Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("ФЛ");
	ТаблицаКонтрагентов.Колонки.Добавить("Наименование");
	ТаблицаКонтрагентов.Колонки.Добавить("НаименованиеПолное");
	ТаблицаКонтрагентов.Колонки.Добавить("Адрес");
	ТаблицаКонтрагентов.Колонки.Добавить("ИНН");
	ТаблицаКонтрагентов.Колонки.Добавить("КПП"); 
	ТаблицаКонтрагентов.Колонки.Добавить("ЮрФизЛицо");
	ТаблицаКонтрагентов.Колонки.Добавить("Контрагент");
	
	
	
	Для каждого СТрока Из ТЧ Цикл
		ЮрЛицо=Неопределено;
		ДлинаИНН =СтрДлина(СокрЛП(Строка.INN));
		ДлинаКПП =СтрДлина(СокрЛП(Строка.KPP)); 
		Если ДлинаИНН = 10  И ДлинаКПП = 9 Тогда
			ЮрЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ИначеЕсли ДлинаИНН = 12 тогда
			ЮрЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		Иначе
			ЮрЛицо= Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;
		
		
		
		Если Не Строка.Контрагент.Пустая()
			Или Не ЗначениеЗаполнено(Строка.CUSTNAME_1)
			Или Не ЗначениеЗаполнено(Строка.FULLCUSTNAME)
			//ИЛИ Не ЗначениеЗаполнено(Строка.INN) 
			ИЛИ ЮрЛицо = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтотОбъект.УчитыватьОшибки Тогда
			Если ЗначениеЗаполнено(Строка.ТиповаяОшибка) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		
		НоваяСтрокаТЗ=ТаблицаКонтрагентов.Добавить();
		НоваяСтрокаТЗ.ФЛ=Истина;
		НоваяСтрокаТЗ.Наименование=СТрока.CUSTNAME_1;
		НоваяСтрокаТЗ.НаименованиеПолное=СТрока.FULLCUSTNAME;
		НоваяСтрокаТЗ.ИНН=СТрока.INN;
		НоваяСтрокаТЗ.КПП=СТрока.KPP;
		НоваяСтрокаТЗ.Адрес=СТрока.CUSTADDRESS;
		
		
		НоваяСтрокаТЗ.ЮрФизЛицо=ЮрЛицо;
	КонецЦикла;
	
	Если ТаблицаКонтрагентов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКонтрагентов.Свернуть("ФЛ,Наименование,НаименованиеПолное, ИНН,Адрес, КПП, ЮрФизЛицо,Контрагент");	
	Для Каждого Стр Из ТаблицаКонтрагентов Цикл
		
		СтруктураОтбора = Новый Структура("Наименование,ИНН,КПП");
		СтруктураОтбора.Наименование = Стр.Наименование;
		СтруктураОтбора.ИНН = Стр.ИНН;
		СтруктураОтбора.КПП = Стр.КПП;
		МасСтрок = ТаблицаКонтрагентов.НайтиСтроки(СтруктураОтбора);
		Если масСтрок.Количество()>0 Тогда
			Для каждого Эл из МасСтрок Цикл
				Эл.Адрес = Стр.Адрес;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	ТаблицаКонтрагентов.Свернуть("ФЛ,Наименование,НаименованиеПолное, ИНН,Адрес, КПП, ЮрФизЛицо,Контрагент");	
	ФормаЗагрузкаКонтрагентов= ПолучитьФорму("ФормаКонтрагентов");
	ТЗФормы=ФормаЗагрузкаКонтрагентов.Контрагенты;
	Для каждого СТрока Из  ТаблицаКонтрагентов Цикл
		НоваяСтрока= ТЗФормы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СТрока );
	КонецЦикла;
	МассивСозданныхКонтрагентов = Новый Массив;
	МассивСозданныхКонтрагентов = ФормаЗагрузкаКонтрагентов.ОткрытьМодально();
	
	Если МассивСозданныхКонтрагентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МакетОтчет=ПолучитьМакет("Контрагенты");
	ТабДок=Новый ТабличныйДокумент;
	ОбластьШапкаТаблицы = МакетОтчет.ПолучитьОбласть("Шапка");
	ОбластьСтроки= МакетОтчет.ПолучитьОбласть("Строка");
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	Для Каждого ЭлементТЗ из МассивСозданныхКонтрагентов Цикл
		Если ЗначениеЗаполнено(ЭлементТЗ) Тогда
			
			ОбластьСтроки.Параметры.Заполнить(ЭлементТЗ);
			ТабДок.Вывести(ОбластьСтроки);
		КонецЕсли;
		
	КонецЦикла;
	ТабДок.Показать();
	ТЧ=ДанныеБиллинга.Выгрузить();	
	Для Каждого СтрокаТЧ Из МассивСозданныхКонтрагентов Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ) Тогда
			СтруктураПоиска = Новый Структура("INN,KPP,CUSTNAME_1");	
			СтруктураПоиска.INN = СокрЛП(СтрокаТЧ.ИНН);
			СтруктураПоиска.KPP = СокрЛП(СтрокаТЧ.КПП);
			СтруктураПоиска.CUSTNAME_1 = СокрЛП(СтрокаТЧ.Наименование);
			
			
			МассивСтрок = ТЧ.НайтиСтроки(СтруктураПоиска);
			Если массивСтрок.Количество()>0 Тогда
				Для Каждого Элемент из МассивСтрок Цикл
					Элемент.НовыйКонтрагент = СтрокаТЧ;
					Элемент.Контрагент = СтрокаТЧ;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	ДанныеБиллинга.Очистить();
	ДанныеБиллинга.Загрузить(ТЧ);
КонецПроцедуры

Процедура СоздатьНенайденныеДоговора() Экспорт
	
	МассивДоговоров = Новый Массив;
	ТаблицаДог = Новый ТаблицаЗначений;
	ТаблицаДог = ДанныеБиллинга.Выгрузить();
	
	ТаблицаДог.Свернуть("Контрагент,Загружать,ДоговорКонтрагента,Валюта,DATADOGOVORA,NOMERDOGOVORA_1,TypeSchet,LSCHET,OPERATOR,Оператор");   //АБС Коломиец 12327 Оператор
	Кол = 0;
	Для Каждого СтрокаДоговоров Из ТаблицаДог Цикл
		Если ЗначениеЗаполнено(СтрокаДоговоров.Контрагент) 
			и ЗначениеЗаполнено(СтрокаДоговоров.Валюта) 
			И ЗначениеЗаполнено(СтрокаДоговоров.NOMERDOGOVORA_1)
			И Не ЗначениеЗаполнено(СтрокаДоговоров.ДоговорКонтрагента)  Тогда
			Кол = Кол+1;
		КонецЕсли;	 	 
	КонецЦикла;
	
	Сч = 0;
	
	Для Каждого СтрокаДоговоров Из ТаблицаДог Цикл
		Если ЗначениеЗаполнено(СтрокаДоговоров.Контрагент) 
			и ЗначениеЗаполнено(СтрокаДоговоров.Валюта) 
			И ЗначениеЗаполнено(СтрокаДоговоров.NOMERDOGOVORA_1)
			И Не ЗначениеЗаполнено(СтрокаДоговоров.ДоговорКонтрагента) Тогда
			Сч = Сч+1;
			#Если Клиент Тогда
				состояние("Обрабатывается "+Сч+" из "+Кол);
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			Если ЗначениеЗаполнено(СтрокаДоговоров.OPERATOR) Тогда
				СтрокаДоговоров.ДоговорКонтрагента = абс_СерверныеФункции.СоздатьДоговор(Организация, СтрокаДоговоров.Контрагент,СтрокаДоговоров.NOMERDOGOVORA_1,СтрокаДоговоров.DATADOGOVORA,СтрокаДоговоров.Валюта,Истина, Истина, СтрокаДоговоров.TypeSchet,СтрокаДоговоров.LSCHET, СтрокаДоговоров.Оператор);  //АБС Коломиец 12327 Строка.Оператор
			Иначе
				СтрокаДоговоров.ДоговорКонтрагента = абс_СерверныеФункции.СоздатьДоговор(Организация, СтрокаДоговоров.Контрагент,СтрокаДоговоров.NOMERDOGOVORA_1,СтрокаДоговоров.DATADOGOVORA,СтрокаДоговоров.Валюта,Ложь,Истина,  СтрокаДоговоров.TypeSchet,СтрокаДоговоров.LSCHET, СтрокаДоговоров.Оператор);
			КонецЕсли;		
		КонецЕсли;                                    
		
		
	КонецЦикла;
	//заполнение поля Договор в таблице
	Для Каждого ЭлДоговор Из МассивДоговоров Цикл
		
		Если ЗначениеЗаполнено(ЭлДоговор) Тогда 
			КодВалюты =  СтрЗаменить(ЭлДоговор.ВалютаВзаиморасчетов.Код,"643","810");
			СтруктураОтбора = Новый Структура("Контрагент,NOMERDOGOVORA_1,CURRENCYCODE");
			СтруктураОтбора.Вставить("Контрагент",ЭлДоговор.Владелец);
			СтруктураОтбора.Вставить("NOMERDOGOVORA_1",ЭлДоговор.Номер);
			СтруктураОтбора.Вставить("CURRENCYCODE",КодВалюты);
			НайденныеСтроки = ДанныеБиллинга.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество()>0 Тогда
				Для Каждого СтрБиллинга Из НайденныеСтроки Цикл
					СтрБиллинга.ДоговорКонтрагента = ЭлДоговор; 
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//заполнение поля Договор в таблице
	
	МакетОтчет=ПолучитьМакет("Договоры");
	ТабДок=Новый ТабличныйДокумент;
	ОбластьШапкаТаблицы = МакетОтчет.ПолучитьОбласть("Шапка");
	ОбластьСтроки= МакетОтчет.ПолучитьОбласть("Строка");
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	Для Каждого ЭлементТЗ из МассивДоговоров Цикл
		Если ЗначениеЗаполнено(ЭлементТЗ) Тогда
			
			ОбластьСтроки.Параметры.Заполнить(ЭлементТЗ);
			ОбластьСтроки.Параметры.КодКонтрагента = ЭлементТЗ.Владелец.Код;
			ОбластьСтроки.Параметры.НаименованиеКонтрагента = ЭлементТЗ.Владелец.Наименование;
			ОбластьСтроки.Параметры.НаименованиеПолное = ЭлементТЗ.Владелец.НаименованиеПолное;
			ОбластьСтроки.Параметры.ИНН = ЭлементТЗ.Владелец.ИНН;
			ОбластьСтроки.Параметры.КПП = ЭлементТЗ.Владелец.КПП;
			ТабДок.Вывести(ОбластьСтроки);
		КонецЕсли;
		
	КонецЦикла;
	ТабДок.Показать();
	
	
КонецПроцедуры

Процедура ПроверитьКонтрагента(Контрагент)
	
	Если Не Контрагент.Покупатель Тогда
		Об = Контрагент.ПолучитьОбъект();
		Об.Покупатель = Истина;
		Об.ОбменДанными.Загрузка = Истина;
		Об.Записать();
		Сообщить("Устанавливлен признак Покупатель для контрагента "+Контрагент);
	КонецЕсли;	
	
КонецПроцедуры

Процедура СоздатьСчетаНаОплату() Экспорт
	СозданныеДокументы.Очистить();
	СтруктураДокументов = Новый Структура("ДокументСчетНаОплату, ДокументРеализацияТиУ, ДокументСФ, Перезаписан");
	//Создадим документы Счет на оплату покупателя
	//По каждой уникальной строке ТЗ создаем свой счет на оплату.
	СтруктураПоиска = Новый Структура("FACTURENUM");
	ТЗБиллинга=ДанныеБиллинга.Выгрузить();
	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM");
	ТЗСчетовНаОплату.Свернуть("FACTURENUM");
	Сч = 0;
	Кол = ТЗСчетовНаОплату.Количество();
	Для каждого СтрокаСчета Из ТЗСчетовНаОплату Цикл
		Сч = Сч+1;
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		Состояние("Обрабатывается "+Сч+" из "+Кол);
		#КонецЕсли
		//Осуществим проверку, можно ли загружать данный счет -
		//проверка осуществляется по всем строкам счета если 
		//хотябы одна строка счета некорректна, весь счет не будет загружен
		
		СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		НайденныеСтроки = ТЗБиллинга.НайтиСтроки(СтруктураПоиска);
		Если  НайденныеСтроки.Количество() =0 Тогда
			//Фатальная ошибка...
			Сообщить("Ошибка!!! Строки с номером: "+СтруктураПоиска.FACTURENUM+" в ТЗ Биллинга не найдены!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		//Проверяем все найденные строки на возможность загрузки Счета на оплату.
		Отказ = Ложь;
		ОтказПоОшибке = Ложь;
		Для Каждого СтрокаБиллинга Из НайденныеСтроки Цикл
			Если НЕ СтрокаБиллинга.Загружать ИЛИ НЕ СтрокаБиллинга.ЗагрузкаРазрешена	Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			Продолжить;
		КонецЦикла;	
		
		Если Отказ Тогда
			Продолжить;
			//Счет на оплату не создаем.
		КонецЕсли;
		
		Если НЕ НайденныеСтроки[0].СчетНаОплату.Пустая() Тогда
			//Документ уже существует, перезапишем его.
			ДокументСчет = НайденныеСтроки[0].СчетНаОплату.ПолучитьОбъект();
			ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
			ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента; 
			ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
			ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
			ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
			ДокументСчет.FACTUREEXTERNALID =НайденныеСтроки[0].FACTURENUM;
			ДокументСчет.номер =НайденныеСтроки[0].FACTURENUM;
			ДокументСчет.абс_СуммаНДСБиллинг =НайденныеСтроки[0].СуммаНДС; 
			ДокументСчет.Организация = Организация;
			ДокументСчет.УчитыватьНДС = Истина;
			ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
			
			Если ДокументСчет.Метаданные().ТабличныеЧасти.Найти("Менеджеры")<>Неопределено Тогда
				Если ДокументСчет.Менеджеры.Количество()=0 Тогда
					Строкаменеджеров = ДокументСчет.Менеджеры.Добавить();
					Строкаменеджеров.Описание = НайденныеСтроки[0].KURATOR;
				КонецЕсли;
			КонецЕсли;
			
			ДокументСчет.СуммаВключаетНДС = Ложь;
			Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
				ДокументСчет.КурсВзаиморасчетов =1;
			Иначе
				ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			ДокументСчет.КратностьВзаиморасчетов = 1;
			//Заполним ТЧ Услуги документа.
			ДокументСчет.Услуги.Очистить();
			Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
				НайдСтрокаУслуги = ДокументСчет.Услуги.найти(СтрокаУслуги.УникальныйИдентификаторЗаписи,"ИдСтроки");
				Если  НайдСтрокаУслуги = Неопределено Тогда
					НоваяСтрокаУслуг = ДокументСчет.Услуги.Добавить();
				Иначе
					НоваяСтрокаУслуг = НайдСтрокаУслуги;
				КонецЕсли;

					НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное;
					НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
					НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура; 
					НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
					НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
					НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
					НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
					
				
				
			КонецЦикла;
			НовыйДокумент =Ложь;
			
			
			//Документ
		Иначе
			
			//Создаем СчетНаОплату
			//
			НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.НайтиПоРеквизиту("FACTUREEXTERNALID",НайденныеСтроки[0].FACTURENUM);
			Если НайдДокументСчетНаОплату.Пустая() Тогда
				ДокументСчет  = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
				НовыйДокумент = Истина;

			Иначе
				ДокументСчет =  НайдДокументСчетНаОплату.ПолучитьОбъект();
				НовыйДокумент =Ложь;
			КонецЕсли;
		
			ДокументСчет.абс_СуммаНДСБиллинг =НайденныеСтроки[0].СуммаНДС; 
			ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
			ДокументСчет.УчитыватьНДС = Истина;
			ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента; 
			ДокументСчет.FACTUREEXTERNALID =НайденныеСтроки[0].FACTURENUM;
			ДокументСчет.Номер  =НайденныеСтроки[0].FACTURENUM;
			ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
			ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
			ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
			ДокументСчет.Организация = Организация;
			ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
			СуммаВключаетНДС = Ложь;
			Если ДокументСчет.Метаданные().ТабличныеЧасти.Найти("Менеджеры")<>Неопределено Тогда
				Если ДокументСчет.Менеджеры.Количество()=0 Тогда
					Строкаменеджеров = ДокументСчет.Менеджеры.Добавить();
					Строкаменеджеров.Описание = НайденныеСтроки[0].KURATOR;
				КонецЕсли;
			КонецЕсли;
			ДокументСчет.СуммаВключаетНДС = СуммаВключаетНДС;
			Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
				ДокументСчет.КурсВзаиморасчетов =1;
			Иначе
				ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			ДокументСчет.КратностьВзаиморасчетов = 1;
			//Заполним ТЧ Услуги документа.
			Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
				НайдСтрокаУслуги = ДокументСчет.Услуги.найти(СтрокаУслуги.УникальныйИдентификаторЗаписи,"ИдСтроки");
				Если  НайдСтрокаУслуги = Неопределено Тогда
					НоваяСтрокаУслуг = ДокументСчет.Услуги.Добавить();
				Иначе
					НоваяСтрокаУслуг = НайдСтрокаУслуги;
				КонецЕсли;
	
					НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное;
					НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
					НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура; 
					НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
					НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
					НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
					НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
					
								
			КонецЦикла;
					
		КонецЕсли;
		
		Попытка
			Если НовыйДокумент Тогда
				ДокументСчет.Записать();
				#Если Клиент Тогда
				Состояние("Создан документ: "+ДокументСчет.Ссылка);
				#КонецЕсли
				ДокСсылка = ДокументСчет.Ссылка;
				
			Иначе
				ДокументСчет.Записать();
				#Если Клиент Тогда
				Состояние("Перезаписан документ: "+ДокументСчет.Ссылка);
				#КонецЕсли
				ДокСсылка = ДокументСчет.Ссылка;
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		СтруктураДокументов.ДокументСчетНаОплату = ДокСсылка;
		
		
		//Если документ записан создадим документ реализация ТиУ на основании данного Счета
		//Если  НовыйДокумент Тогда
		//	СоздатьРеализациюТиУ(ДокСсылка, СтруктураДокументов);
		//Иначе
		//	СтруктураДокументов.перезаписан = Истина;
		//	ПерезаписатьДокументы(ДокСсылка,СтруктураДокументов);
		//	
		//КонецЕсли;
		//
		НСоздДок = СозданныеДокументы.Добавить();
		НСоздДок.ДокументСчетНаОплату = ДокСсылка;
		//ЗаполнитьЗначенияСвойств(НСоздДок, СтруктураДокументов);		
	КонецЦикла;
	
	//Обновление колонки СчетНаОплату в таблице ДанныеБиллинга
	Таб = СозданныеДокументы.Выгрузить();
	Таб.Свернуть("ДокументСчетНаОплату");
	Для Каждого Стр Из Таб Цикл
		Если ЗначениеЗаполнено(Стр.ДокументСчетНаОплату) Тогда
			СтруктураОтбора = Новый Структура("FACTURENUM");
			СтруктураОтбора.Вставить("FACTURENUM",СокрЛП(Стр.ДокументСчетНаОплату.FACTUREEXTERNALID));
			НайденныеСтроки = ДанныеБиллинга.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайдСтрока Из НайденныеСтроки Цикл
				НайдСтрока.СчетНаОплату = Стр.ДокументСчетНаОплату;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабСчетов.ДокументСчетНаОплату
	               |ПОМЕСТИТЬ ВТСчета
	               |ИЗ
	               |	&ТабСчетов КАК ТабСчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализацияТиУ,
	               |	ВТСчета.ДокументСчетНаОплату КАК ДокументСчетНаОплату,
	               |	СФ.Ссылка КАК ДокументСФ
	               |ИЗ
	               |	ВТСчета КАК ВТСчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ВТСчета.ДокументСчетНаОплату = РеализацияТоваровУслуг.абс_СчетНаОплатуПокупателю
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	               |			СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование.абс_СчетНаОплатуПокупателю КАК ДокументОснованиеабс_СчетНаОплатуПокупателю
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |		ГДЕ
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг) КАК СФ
	               |		ПО ВТСчета.ДокументСчетНаОплату = СФ.ДокументОснованиеабс_СчетНаОплатуПокупателю";
	Запрос.УстановитьПараметр("ТабСчетов",Таб);
	СозданныеДокументы.Загрузить(Запрос.Выполнить().Выгрузить());
	Сч = 0;
	Кол = СозданныеДокументы.Количество();
	Для Каждого Стр Из СозданныеДокументы Цикл
		  Сч = Сч+1;
		  #Если Клиент Тогда
		 Состояние("Обрабатывается "+Сч+" из "+Кол);
		 #КонецЕсли
		Если ЗначениеЗаполнено(Стр.ДокументРеализацияТиУ) И ЗначениеЗаполнено(Стр.ДокументСФ) Тогда
				ПерезаписатьДокументы(Стр);

		ИначеЕсли Не ЗначениеЗаполнено(Стр.ДокументРеализацияТиУ) И Не ЗначениеЗаполнено(Стр.ДокументСФ) Тогда
				СоздатьРеализациюТиУ(Стр);


		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

Процедура ПерезаписатьДокументы(СтрокаТЧ,СтруктураДокументов = Неопределено)
	ДокСсылка = СтрокаТЧ.ДокументСчетНаОплату;
	
	//Запрос=Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	РеализацияТоваровУслуг.Ссылка
	//|ИЗ
	//|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//|ГДЕ
	//|	РеализацияТоваровУслуг.абс_СчетНаОплатуПокупателю = &абс_СчетНаОплатуПокупателю
	//|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ";
	//Запрос.УстановитьПараметр("абс_СчетНаОплатуПокупателю",ДокСсылка);
	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//
	//Если  РезультатЗапроса.Количество() =0 Тогда
	//	//Если реализация отсутствует создаем реализацию и выходим
	//	СоздатьРеализациюТиУ(СтрокаТЧ);
	//	Возврат;
	//КонецЕсли;
	
	//РезультатЗапроса.Следующий();
	ДокРеализацияТиУ =  СтрокаТЧ.ДокументРеализацияТиУ.Ссылка.ПолучитьОбъект();
	ДокРеализацияТиУ.Услуги.Очистить();
	ДокРеализацияТиУ.Дата = ДокСсылка.Дата;
	ДокРеализацияТиУ.Заполнить(ДокСсылка);
	ДокРеализацияТиУ.Сделка = ДокСсылка;
	ДокРеализацияТиУ.КурсВзаиморасчетов =ДокСсылка.КурсВзаиморасчетов;
	ДокРеализацияТиУ.КратностьВзаиморасчетов =ДокСсылка.КратностьВзаиморасчетов;
	Попытка
		ДокРеализацияТиУ.Записать();
		СтрокаТЧ.ДокументРеализацияТиУ =ДокРеализацияТиУ.Ссылка; 
		//Сообщить("Документ "+ДокРеализацияТиУ.Ссылка + " Перезаписан! ")	;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	//СтруктураДокументов.ДокументРеализацияТиУ = ДокРеализацияТиУ.Ссылка;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = " ВЫБРАТЬ
	//|	СчетФактураВыданный.Ссылка
	//|ИЗ
	//|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	//|ГДЕ
	//|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	//|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ";
	//Запрос.УстановитьПараметр("ДокументОснование",ДокРеализацияТиУ.Ссылка );
	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//Если  РезультатЗапроса.Количество() =0 Тогда
	//	Возврат;
	//КонецЕсли;
	//РезультатЗапроса.Следующий();
	ДокСФ =  СтрокаТЧ.ДокументСФ.Ссылка.ПолучитьОбъект();
	ДокСФ.Дата = ДокРеализацияТиУ.Ссылка.Дата;
	ДокСФ.ДокументыОснования.Очистить();
	ДокСФ.Заполнить(ДокРеализацияТиУ.Ссылка);
	Попытка
		ДокСФ.Записать();
		СтрокаТЧ.ДокументСФ =ДокСФ.Ссылка;
		//Сообщить("Документ "+ДокСФ.Ссылка + " Перезаписан! ")	;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	//СтруктураДокументов.ДокументСФ = ДокСФ.Ссылка;
	
КонецПроцедуры

Функция ПолучитьКурс(Дата, Валюта)
	Отбор=Новый Структура("Валюта");
	Отбор.Валюта = Валюта; 
	ПоследняяЗапись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата,Отбор);
	Если ПоследняяЗапись.Количество()>0 Тогда
		Возврат ПоследняяЗапись.Курс;
	Иначе
		Возврат 1;
	КонецЕсли
КонецФункции

Процедура СоздатьРеализациюТиУ(СтрокаТЧ, СтруктураДокументов = Неопределено)
	
	ДокСсылка = СтрокаТЧ.ДокументСчетНаОплату;

	ДокРеализацияТиУ = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	ДокРеализацияТиУ.Дата = ДокСсылка.Дата;
	ДокРеализацияТиУ.Заполнить(ДокСсылка);
	ДокРеализацияТиУ.Сделка = ДокСсылка;
	Если ЗначениеЗаполнено(ДокСсылка.FACTUREEXTERNALID) Тогда
		ДокРеализацияТиУ.Номер = ДокСсылка.FACTUREEXTERNALID;
	КонецЕсли;
	Попытка
		ДокРеализацияТиУ.Записать(РежимЗаписиДокумента.Запись);
		СтрокаТЧ.ДокументРеализацияТиУ =ДокРеализацияТиУ.Ссылка; 
		//Сообщить("Документ "+ДокРеализацияТиУ.Ссылка + " Записан! ");
	Исключение
		ДокРеализацияТиУ.Записать(РежимЗаписиДокумента.Запись);
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	//СтруктураДокументов.ДокументРеализацияТиУ = ДокРеализацияТиУ.Ссылка;
	Если Не ЗначениеЗаполнено(ДокРеализацияТиУ.Ссылка) Тогда
		возврат;
	КонецЕсли;	
	
	//Попытаемся найти счет фактуру
	СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокРеализацияТиУ.Ссылка, "СчетФактураВыданный", Неопределено);
	
	ОбъектСчетаФактуры = Неопределено;
	
	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (Не ЗначениеЗаполнено(СчетФактура)) Тогда
		//Вводим новый документ на основании нашего
		
		ОбъектСчетаФактуры = Документы["СчетФактураВыданный"].СоздатьДокумент();
		// Если установлен отбор по виду счета-фактуры (на реализацию/на аванс...) - устанавливаем его в новом документе
		ОбъектСчетаФактуры.Заполнить(ДокРеализацияТиУ.Ссылка);
		ОбъектСчетаФактуры.Номер = ДокРеализацияТиУ.Ссылка.Номер;
		ОбъектСчетаФактуры.Дата  = ДокРеализацияТиУ.Ссылка.Дата;
		// Откроем форму для редактирования счета фактуры
		ОбъектСчетаФактуры.Записать();
		СтрокаТЧ.ДокументСФ =ОбъектСчетаФактуры.Ссылка;
		//СтруктураДокументов.ДокументСФ = ОбъектСчетаФактуры.Ссылка;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ВнестиИзмененияВSQL() Экспорт
	Возврат;
	СтруктураПолей = Новый Структура("NOMERPLATEJKI,DATAPLATEJKI,EXTERNALLINEID,SESSIONERRORLOG,SESSIONISOK");
	Кол =0;	
	Для Каждого Стр Из ДанныеБиллинга Цикл
		
		Если ЗначениеЗаполнено(Стр.NOMERPLATEJKI) 
			ИЛИ ЗначениеЗаполнено(Стр.DATAPLATEJKI)
			ИЛИ СокрЛП(Стр.SESSIONERRORLOG)<>"1"
			Тогда
			Кол = Кол+1;	 
		КонецЕсли;
		
		
	КонецЦикла;
	
	Сч = 0;
	Для Каждого Стр Из ДанныеБиллинга Цикл
		
		//Если Стр.Загружать И Стр.ЗагрузкаРазрешена Тогда
		Если ЗначениеЗаполнено(Стр.NOMERPLATEJKI) 
			ИЛИ ЗначениеЗаполнено(Стр.DATAPLATEJKI)
			ИЛИ СокрЛП(Стр.SESSIONERRORLOG)<>"1"
			Тогда
			сч = Сч+1;
			#Если Клиент Тогда
			состояние("Обрабатывается "+Сч+" из "+Кол);
			#КонецЕсли
			СтруктураПолей.Вставить("NOMERPLATEJKI",Стр.NOMERPLATEJKI);
			СтруктураПолей.Вставить("DATAPLATEJKI",Стр.DATAPLATEJKI);
			СтруктураПолей.Вставить("SESSIONERRORLOG",Стр.SESSIONERRORLOG);
			СтруктураПолей.Вставить("SESSIONISOK",Стр.SESSIONISOK);
			СтруктураПолей.Вставить("EXTERNALLINEID",Стр.EXTERNALLINEID);
			
			ОбновитьДанныеВSQL(СтруктураПолей);
		КонецЕсли;
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДанныеВSQL(СтруктураПолей) Экспорт
	
	NOMERPLATEJKI = СтруктураПолей.NOMERPLATEJKI;
	DATAPLATEJKI = Формат(СтруктураПолей.DATAPLATEJKI,"ДФ=yyyyMMdd");
	Если Не ЗначениеЗаполнено(DATAPLATEJKI) Тогда
		DATAPLATEJKI = '00010101';
	КонецЕсли;
	
	EXTERNALLINEID = СтруктураПолей.EXTERNALLINEID;
	SESSIONERRORLOG = СтруктураПолей.SESSIONERRORLOG;
	SESSIONISOK = СтруктураПолей.SESSIONISOK;
	Если ЗначениеЗаполнено(NOMERPLATEJKI) 
		ИЛИ ЗначениеЗаполнено(DATAPLATEJKI)
		ИЛИ ЗначениеЗаполнено(SESSIONERRORLOG)
		ИЛИ ЗначениеЗаполнено(SESSIONISOK) Тогда
		ТекстЗапроса = 
		"UPDATE TTLEDGERJOURNALTRANSBILLING
		|SET "+?(ЗначениеЗаполнено(NOMERPLATEJKI)," NOMERPLATEJKI = '"+ NOMERPLATEJKI+"',","")+"
		|"+?(ЗначениеЗаполнено(DATAPLATEJKI)," DATAPLATEJKI  = '"+DATAPLATEJKI+"',","")+" 
		|SESSIONERRORLOG = '"+SESSIONERRORLOG+"',
		|SESSIONISOK = '"+SESSIONISOK+"'
		| WHERE  EXTERNALLINEID = "+EXTERNALLINEID;
		
		
		
		абс_СерверныеФункции.ОбновитьДанныеВSQL(ТекстЗапроса,СтруктураПодключения);
	КонецЕсли;	
КонецПроцедуры

Функция ЕстьЧисло(Текст) Экспорт
	
	ПервыйЗнакЧисло = Ложь;
	ПоследнийЗнакЧисло = Ложь;
	МассивЦифр = Новый Массив;
	МассивЦифр.Добавить("1");
	МассивЦифр.Добавить("2");
	МассивЦифр.Добавить("3");
	МассивЦифр.Добавить("4");
	МассивЦифр.Добавить("5");
	МассивЦифр.Добавить("6");
	МассивЦифр.Добавить("7");
	МассивЦифр.Добавить("8");
	МассивЦифр.Добавить("9");
	МассивЦифр.Добавить("0");
	поз = 0;
	Для Каждого Элемент Из МассивЦифр Цикл
		Если Найти(Текст,Элемент)>0 Тогда
			Возврат Найти(Текст,Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат 0;
	
КонецФункции

Функция ОбработатьДанныеЗагруженныеИзБиллинга(ТабДанныеБиллинга)Экспорт
	
	СтруктураВозврата = Новый Структура("ДанныеБиллинга,МассивДоговоров");
	
	МассивДоговоров = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст ="ВЫБРАТЬ
	              |	абс_Кураторы.Ссылка,
	              |	абс_Кураторы.Наименование
	              |ИЗ
	              |	Справочник.абс_Кураторы КАК абс_Кураторы
	              |ГДЕ
	              |	абс_Кураторы.Организация = &Организация
	              |	И абс_Кураторы.ПометкаУдаления = ЛОЖЬ";
	ТС_Кураторов = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	абс_СоответствиеАгентаОрганизации.Агент,
	              |	абс_СоответствиеАгентаОрганизации.Организация
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеАгентаОрганизации КАК абс_СоответствиеАгентаОрганизации";
	ТС_Агентов = Запрос.Выполнить().Выгрузить();

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов,
	              |	НоменклатурныеГруппы.Ссылка КАК НоменклатурнаяГруппа
	              |ПОМЕСТИТЬ ВТ_НГ
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеНоменклатурыБюджетнымАналитикам КАК абс_СоответствиеНоменклатурыБюджетнымАналитикам
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	              |		ПО абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов.Наименование = НоменклатурныеГруппы.Наименование
	              |ГДЕ
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Организация = &Организация
	              |	И абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов <> ЗНАЧЕНИЕ(Справочник.СтатьиОборотовПоБюджетам.ПустаяСсылка)
	              |	И НоменклатурныеГруппы.абс_СтатусНоменклатурнойГруппы = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Номенклатура,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.абс_ТипКонтрагента,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Организация,
	              |	ВЫБОР
	              |		КОГДА абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	              |			ТОГДА ВТ_НГ.НоменклатурнаяГруппа
	              |		ИНАЧЕ абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа
	              |	КОНЕЦ КАК НоменклатурнаяГруппа,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.ЦФО,
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.абс_ЦФУ
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеНоменклатурыБюджетнымАналитикам КАК абс_СоответствиеНоменклатурыБюджетнымАналитикам
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НГ КАК ВТ_НГ
	              |		ПО абс_СоответствиеНоменклатурыБюджетнымАналитикам.СтатьяОборотов = ВТ_НГ.СтатьяОборотов
	              |ГДЕ
	              |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Организация = &Организация";
	ТаблицаСоответствия = Запрос.Выполнить().Выгрузить();
	//Заполнение аналитики в реализациях
	//ПроверкаНГ(ТаблицаСоответствия);    
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	абс_СоответствиеНоменклатурныхГруппИНоменклатуры.Номенклатура,
	              |	абс_СоответствиеНоменклатурныхГруппИНоменклатуры.НоменклатурнаяГруппа
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеНоменклатурныхГруппИНоменклатуры КАК абс_СоответствиеНоменклатурныхГруппИНоменклатуры
	              |ГДЕ
	              |	абс_СоответствиеНоменклатурныхГруппИНоменклатуры.Организация = &Организация
	              |	И абс_СоответствиеНоменклатурныхГруппИНоменклатуры.НоменклатурнаяГруппа.абс_СтатусНоменклатурнойГруппы = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)";
	ТаблицаСоответствияНГ = Запрос.Выполнить().Выгрузить();

	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	абс_СоответствиеБиллинговыхУслугНоменклатуре.НаименованиеУслуги КАК Наименование,
	              |	абс_СоответствиеБиллинговыхУслугНоменклатуре.КодУслугиБиллинга КАК Код,
	              |	абс_СоответствиеБиллинговыхУслугНоменклатуре.Номенклатура,
	              |	абс_СоответствиеБиллинговыхУслугНоменклатуре.этоМГМН,
	              |	0 КАК ДлинаНаименования
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеБиллинговыхУслугНоменклатуре КАК абс_СоответствиеБиллинговыхУслугНоменклатуре
	              |ГДЕ
	              |	абс_СоответствиеБиллинговыхУслугНоменклатуре.Организация = &Организация
	              |	И абс_СоответствиеБиллинговыхУслугНоменклатуре.Номенклатура.абс_СтатусНоменклатуры = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)";
	Запрос.УстановитьПараметр("Организация",Организация);
	ТС_БилУслугНоменклатуре = Запрос.Выполнить().Выгрузить();
	
	//АБС Коломиец 12105+
	Для Каждого Стр Из ТС_БилУслугНоменклатуре Цикл				
		Стр.ДлинаНаименования = СтрДлина(Стр.Наименование);		
	КонецЦикла;	
	ТС_БилУслугНоменклатуре.Сортировать("ДлинаНаименования Убыв");
	//АБС Коломиец 12105-
// {{KM WARE Семенов И.С. Заявка № 28394 23.10.2015 начало			
// для заполнения ставки НДС по льготным ставкам НДС
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	Контрагент,СтавкаНДС
	              |ИЗ
	              |	РегистрСведений.абс_СоответствиеКонтрагентаЛьготеНДС 
	              |ГДЕ
	              |	СтавкаНДС<>&ПустаяСтавкаНДС";
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС",Перечисления.СтавкиНДС.ПустаяСсылка());
	ТС_СтавкиНДС= Запрос.Выполнить().Выгрузить();
	
// }}KM WARE Семенов И.С. Заявка № 28394 23.10.2015 окончание			
	КолСтрок = ТабДанныеБиллинга.Количество();	
	Счет = 0;
	Для каждого Строка Из ТабДанныеБиллинга Цикл
		Счет = Счет+1;
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			Состояние("Обрабатывается "+Счет+" из "+КолСтрок);
		#КонецЕсли
		
		Строка.абс_Куратор = "";
		Строка.Контрагент = "";
		//Строка.ДоговорКонтрагента = "";
		Строка.Номенклатура = "";
		Строка.Оператор = ""; //АБС Коломиец 12327
		
		// Кураторы
		Если ЗначениеЗаполнено(Строка.KURATOR) Тогда
			НайденнаяСтрока = ТС_Кураторов.Найти(Строка.KURATOR,"Наименование");
			
			Если НайденнаяСтрока<>Неопределено Тогда
				Строка.абс_Куратор = НайденнаяСтрока.Ссылка;
			Иначе
				НовКуратор = Справочники.абс_Кураторы.СоздатьЭлемент();
				НовКуратор.Наименование = Строка.KURATOR;
				НовКуратор.Организация= Организация;
				НовКуратор.УстановитьНовыйКод();
				НовКуратор.Записать();
				Строка.абс_Куратор = НовКуратор.Ссылка;
				
				СтрокаКураторы = ТС_Кураторов.Добавить();
				СтрокаКураторы.Наименование = Строка.KURATOR;
				СтрокаКураторы.Ссылка = НовКуратор.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		// Кураторы
		
		Если ЗначениеЗаполнено(Строка.Tsfu) Тогда
			Строка.ЦФУ = Справочники.абс_ЦФУ.НайтиПоНаименованию(Строка.Tsfu);  
		КонецЕсли;
		
		
		Строка.INN = СтрЗаменить(Строка.INN,"-","");
		Строка.KPP = СтрЗаменить(Строка.KPP,"-","");
		Строка.ПереченьОшибок ="";
		
		Если ЕстьЧисло(СокрЛП(Строка.INN)) =0 Тогда
			Строка.INN ="";	
		КонецЕсли;
		
		Если ЕстьЧисло(СокрЛП(Строка.KPP)) =0 Тогда
			Строка.KPP ="";	
		КонецЕсли;
		
		
		Строка.CUSTADDRESS = СтрЗаменить(Строка.CUSTADDRESS,"ru,","");
		Строка.CUSTADDRESS = СтрЗаменить(Строка.CUSTADDRESS,"RU,","");
		
		//Поиск счета на оплату по FACTUREEXTERNALID
		
		//Строка.СчетНаОплату = абс_серверныеФункции.НайтиСчетНаОплату(Организация, СокрЛП(Строка.FACTURENUM));
		
		
		//Поиск контрагента по ИНН и КПП
		//СтруктураИмен = Новый Структура("Наименование,НаименованиеПолное");
		//СтруктураИмен.Вставить("Наименование",СокрЛп(Строка.CustName_1));
		//СтруктураИмен.Вставить("НаименованиеПолное",СокрЛп(Строка.FULLCUSTNAME));
		//Контрагент = НайтиКонтрагентаВБазе(СокрЛп(Строка.INN), СокрЛп(Строка.KPP), СтруктураИмен);
		Контрагент = "";
		//проверка ИНН и КПП
		ИНН = СокрЛП(Строка.INN);
		КПП = СокрЛП(Строка.KPP);
		Если ЗначениеЗаполнено(ИНН) Тогда
			ИННВерный = РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИНН);
			ТиповаяОшибкаИНН = Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.НайтиПоНаименованию("ИНН не соответствует требованиям");
			Если Не  ИННВерный Тогда     
				
				Строка.ТиповаяОшибка =  ТиповаяОшибкаИНН;
				Строка.SESSIONERRORLOG = Строка.SESSIONERRORLOG +Символы.ПС+Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.НайтиПоНаименованию("ИНН не соответствует требованиям"); 
			Иначе
				Если Строка.ТиповаяОшибка   = ТиповаяОшибкаИНН Тогда
					Строка.ТиповаяОшибка   = Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.ПустаяСсылка();
				КонецЕсли;
				Строка.SESSIONERRORLOG = СтрЗаменить(Строка.SESSIONERRORLOG,"ИНН не соответствует требованиям","");
				
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(КПП) Тогда
				ТиповаяОшибкаКПП = Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.НайтиПоНаименованию("КПП не соответствует требованиям");
				Если Не ЕстьЧисло(Лев(КПП,1)) ИЛИ Не ЕстьЧисло(прав(КПП,1)) Тогда 
					Строка.ТиповаяОшибка = ТиповаяОшибкаКПП;
					Строка.SESSIONERRORLOG =Строка.SESSIONERRORLOG +Символы.ПС+Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.НайтиПоНаименованию("КПП не соответствует требованиям");
					//Продолжить;
				КонецЕсли;	
				
				Если СтрДлина(КПП)<>9 Тогда
					
					Строка.ТиповаяОшибка = ТиповаяОшибкаКПП;
					Строка.SESSIONERRORLOG = Строка.SESSIONERRORLOG +Символы.ПС+Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.НайтиПоНаименованию("КПП не соответствует требованиям");
				иначе
					Если Строка.ТиповаяОшибка   = ТиповаяОшибкаКПП Тогда
						Строка.ТиповаяОшибка   = Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.ПустаяСсылка();
					КонецЕсли;
					Строка.SESSIONERRORLOG = СтрЗаменить(Строка.SESSIONERRORLOG,"КПП не соответствует требованиям","");
					
					
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		
		//\\проверка ИНН и КПП
		Если   ЗначениеЗаполнено(Контрагент) Тогда
			Строка.Контрагент = Контрагент;
		Иначе
			Если  ЗначениеЗаполнено(Строка.KODKONTR_EISUP) и Найти(Строка.KODKONTR_EISUP,"KODKONTR_EISUP") = 0 Тогда
				Контрагент = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(Строка.KODKONTR_EISUP));
				Если ЗначениеЗаполнено(Контрагент) Тогда
					Если Контрагент.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Активный или
						Контрагент.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов или
						Контрагент.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.ЗавершениеОтношений Тогда
						Строка.Контрагент = Контрагент;
						//сообщить("В строке "+й+" выполнено заполнение контрагента");
					КонецЕсли;
				КонецЕсли;
			Иначе
			КонецЕсли;
			
			//Если Не ЗначениеЗаполнено(Строка.Контрагент) Тогда
			//	Если  ЗначениеЗаполнено(Строка.TIPKONTRAGENTA)  Тогда
			//		Контрагент = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(Строка.TIPKONTRAGENTA));
			//		Если ЗначениеЗаполнено(Контрагент) Тогда
			//			Если Контрагент.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Активный или
			//			Контрагент.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов или
			//			Контрагент.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.ЗавершениеОтношений Тогда
			//				Строка.Контрагент = Контрагент;
			//				//сообщить("В строке "+й+" выполнено заполнение контрагента");
			//			КонецЕсли;
			//		КонецЕсли;
			//		
			//	КонецЕсли;
			//КонецЕсли;
			
			Строка.ПереченьОшибок = Строка.ПереченьОшибок +Символы.ПС+ "С данными ИНН и КПП контрагент не найден!;";
		КонецЕсли;
		//Поиск валюты
		Валюта = НайтиВалюту(СокрЛп(Строка.CURRENCYCODE));
		Если   ЗначениеЗаполнено(Валюта) Тогда
			Строка.Валюта = Валюта;
			Строка.ПереченьОшибок = СтрЗаменить(Строка.ПереченьОшибок,"Валюта не найдена!;","");
			Строка.SESSIONERRORLOG = СтрЗаменить(Строка.SESSIONERRORLOG,"Валюта не найдена!;","");
			
		Иначе
			Если Найти(Строка.ПереченьОшибок,"Валюта не найдена!;")=0 Тогда	
				Строка.ПереченьОшибок = Строка.ПереченьОшибок +Символы.ПС+ "Валюта не найдена!;";
			КонецЕсли;
			Если Найти(Строка.SESSIONERRORLOG,"Валюта не найдена!;")=0 Тогда 
				Строка.SESSIONERRORLOG = Строка.SESSIONERRORLOG +Символы.ПС+ "Валюта не найдена!;";
			КонецЕсли;
		КонецЕсли;
		
		//АБС Коломиец 12327+		
		Если  ЗначениеЗаполнено(Строка.OPERATOR) и Найти(Строка.OPERATOR,"OPERATOR") = 0 Тогда
			Оператор = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(Строка.OPERATOR));
			Если ЗначениеЗаполнено(Оператор) Тогда
				Если Оператор.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Активный или
					Оператор.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов или
					Оператор.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.ЗавершениеОтношений Тогда
					Строка.Оператор = Оператор;;
				КонецЕсли;
			КонецЕсли;
		Иначе
		КонецЕсли;
        //АБС Коломиец 12327-
		
		////////////////
		//Поиск договора контрагента
		Если НЕ ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
			ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Если   ЗначениеЗаполнено(Строка.Контрагент) И ЗначениеЗаполнено(СокрЛП(Строка.NOMERDOGOVORA_1)) И ЗначениеЗаполнено(Строка.Валюта) Тогда
				Если ЗначениеЗаполнено(Строка.OPERATOR) Тогда
					врСтрВозврата = абс_серверныеФункции.СоздатьДоговор(Организация, Строка.Контрагент,Строка.NOMERDOGOVORA_1,Строка.DATADOGOVORA,Строка.Валюта, Истина, Ложь, Строка.TypeSchet,Строка.LSCHET, Строка.Оператор);   //АБС Коломиец 12327 Строка.Оператор
				Иначе
					врСтрВозврата = абс_серверныеФункции.СоздатьДоговор(Организация, Строка.Контрагент,Строка.NOMERDOGOVORA_1,Строка.DATADOGOVORA,Строка.Валюта, Ложь, Ложь, Строка.TypeSchet,Строка.LSCHET, Строка.Оператор);
				КонецЕсли;
				Строка.ДоговорКонтрагента = врСтрВозврата. ДоговорКонтрагента;
				Если врСтрВозврата.ДоговорСоздан Тогда
					МассивДоговоров.Добавить(Строка.ДоговорКонтрагента);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
			Строка.ПереченьОшибок = Строка.ПереченьОшибок +Символы.ПС+"Договор контрагента не найден!;";
		Иначе
			Строка.ПереченьОшибок =  СтрЗаменить(Строка.ПереченьОшибок,"Договор контрагента не найден!;","");
		КонецЕсли;
		
		
		
		
		////////////////////////
		//Поиск номенклатуры
		Номенклатура  = "";
		Если ЗначениеЗаполнено(Строка.ITEMID) Тогда
			
			Номенклатура  = абс_серверныеФункции.НайтиНоменклатуруПоБилингКоду(Организация, СокрЛп(Строка.ITEMID));
			Если   ЗначениеЗаполнено(Номенклатура) Тогда
				
				Строка.Номенклатура = Номенклатура;
				Строка.ПереченьОшибок = СтрЗаменить(Строка.ПереченьОшибок,"С данным БиллингКодом номенклатура не найдена!; ","");
				Строка.SESSIONERRORLOG =  СтрЗаменить(Строка.SESSIONERRORLOG,"С данным БиллингКодом номенклатура не найдена!; ","");
				
			Иначе
				
				Если Найти(Строка.ПереченьОшибок,"С данным БиллингКодом номенклатура не найдена!;")=0 Тогда
					Строка.ПереченьОшибок = Строка.ПереченьОшибок +Символы.ПС+ "С данным БиллингКодом номенклатура не найдена!;";
				КонецЕсли;
				Если Найти(Строка.SESSIONERRORLOG,"С данным БиллингКодом номенклатура не найдена!;")=0 Тогда
					Строка.SESSIONERRORLOG = Строка.SESSIONERRORLOG+Символы.ПС+ "С данным БиллингКодом номенклатура не найдена!;";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		//Поиск номенклатуры  ДЗО
		
			
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			СтрокаПоиска = Неопределено;
			Если ЗначениеЗаполнено(Строка.ITEMID) Тогда
				СтрокаПоиска = ТС_БилУслугНоменклатуре.Найти(СокрЛП(Строка.ITEMID),"Код");
				Если СтрокаПоиска = Неопределено Тогда
					СтрокаПоиска = ТС_БилУслугНоменклатуре.Найти(СокрЛП(Строка.ITEMID),"Наименование");
				КонецЕсли; 
			КонецЕсли;
			Если СтрокаПоиска = Неопределено Тогда
								
				Отбор = Новый Структура();
				Отбор.Вставить("Код","");
				НайденныеСтроки = ТС_БилУслугНоменклатуре.НайтиСтроки(Отбор);
				Для Каждого СтрокаРез Из НайденныеСтроки Цикл
					Если Найти(СокрЛП(Строка.FULLNAMESERVISE),СтрокаРез.Наименование)>0 ИЛИ
						Найти(СокрЛП(СтрокаРез.Наименование),Строка.FULLNAMESERVISE)>0 Тогда
						СтрокаПоиска = СтрокаРез;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;   
			
			Если СтрокаПоиска = Неопределено Тогда
				Если ЗначениеЗаполнено(Строка.ITEMID) Тогда
					Для Каждого СтрокаРез Из ТС_БилУслугНоменклатуре Цикл
						Если Найти(СокрЛП(Строка.ITEMID),СтрокаРез.Наименование)>0 ИЛИ
							Найти(СокрЛП(Строка.ITEMID),СтрокаРез.Номенклатура.НаименованиеПолное)>0 Тогда
							СтрокаПоиска = СтрокаРез;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаПоиска<>Неопределено Тогда
				Строка.Номенклатура = СтрокаПоиска.Номенклатура;
				Строка.МГМН = СтрокаПоиска.этоМГМН;
			КонецЕсли;
		КонецЕсли;
			
		
		////Поиск валюты
		//Валюта = НайтиВалюту(СокрЛп(Строка.CURRENCYCODE));
		
		//Ставка НДС
// {{KM WARE Семенов И.С. Заявка № 28394 23.10.2015 начало			
		м=ТС_СтавкиНДС.НайтиСтроки(новый структура("Контрагент",Контрагент));
		если м.Количество()=0 тогда
			СтавкаНДС = ПолучитьСтавкуНДС(СокрЛп(Строка.TAXGROUP));
		иначе
			СтавкаНДС =м[0].СтавкаНДС;
		конецесли;
//было
//
//			СтавкаНДС = ПолучитьСтавкуНДС(СокрЛп(Строка.TAXGROUP));
//			
// }}KM WARE Семенов И.С. Заявка № 28394 23.10.2015 окончание			
		Если   ЗначениеЗаполнено(СтавкаНДС) Тогда
			Строка.СтавкаНДС = СтавкаНДС;
			Строка.ПереченьОшибок = СтрЗаменить(Строка.ПереченьОшибок,"Ставка НДС не найдена!;","");
		Иначе
			Если Найти(Строка.ПереченьОшибок,"Ставка НДС не найдена!;")=0 Тогда
				Строка.ПереченьОшибок = Строка.ПереченьОшибок + "Ставка НДС не найдена!;";
			КонецЕсли;
			
		КонецЕсли;
		
		//Количество
		Количество = ПолучитьСумму(Строка.QTY);
		Если Количество> 0 Тогда
			Строка.Количество = Количество;
		ИначеЕсли Строка.Количество = 0 Тогда
			Строка.Количество = 1;
		КонецЕсли;
		
		
		//Дата документа.
		ДатаДокумента = ПреобразоватьКДате(СокрЛП(Строка.DELIVERYDATE));
		Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
			Если Найти(Строка.ПереченьОшибок,"Дата неправильного формата;")=0 Тогда
				Строка.ПереченьОшибок = Строка.ПереченьОшибок +символы.ПС+ "Дата неправильного формата;";
			КонецЕсли;
		Иначе
			Строка.ДатаДокумента =  ДатаДокумента;
			Строка.ПереченьОшибок = СтрЗаменить(Строка.ПереченьОшибок,"Дата неправильного формата;","");
		КонецЕсли;
		
		//Цена
		СуммаБЕЗНДС = ПолучитьСумму(Строка.SUMMABEZNDS_1);
		СуммаНДС = ПолучитьСумму(Строка.SUMMANDS_1);
		Цена     = СуммаБЕЗНДС/Строка.Количество;
		СуммаНДС = СуммаНДС;
		
		
		Если  Цена = Неопределено Тогда
			Если Найти(Строка.ПереченьОшибок,"Цена неправильного формата;")=0 Тогда
				Строка.ПереченьОшибок = Строка.ПереченьОшибок +Символы.ПС+ "Цена неправильного формата;";
			КонецЕсли;
		Иначе
			Строка.Цена = Цена;
			Строка.ПереченьОшибок = СтрЗаменить(Строка.ПереченьОшибок,"Цена неправильного формата;","");
		КонецЕсли;
		
		//Сумма НДС
		Если  СуммаНДС = Неопределено Тогда
			Если Найти(Строка.ПереченьОшибок,"Сумма ндс неправильного формата;")=0 Тогда
				Строка.ПереченьОшибок = Строка.ПереченьОшибок  +Символы.ПС+ "Сумма ндс неправильного формата;";
			КонецЕсли;
		Иначе
			Строка.СуммаНДС = СуммаНДС;
		КонецЕсли;
		
		//Сумма
		Сумма= СуммаБЕЗНДС;
		Если  Сумма = Неопределено Тогда
			Если Найти(Строка.ПереченьОшибок,"Сумма неправильного формата;")=0 Тогда	
				Строка.ПереченьОшибок = Строка.ПереченьОшибок +Символы.ПС+ "Сумма неправильного формата;";
			КонецЕсли;
			Если Найти(Строка.SESSIONERRORLOG,"Сумма неправильного формата;")=0 Тогда
				
				Строка.SESSIONERRORLOG = Строка.SESSIONERRORLOG +Символы.ПС+ "Сумма неправильного формата;";
			КонецЕсли;
		Иначе
			Строка.Сумма = Сумма;
			Строка.SESSIONERRORLOG = СтрЗаменить(Строка.SESSIONERRORLOG,"Сумма неправильного формата;","");
			Строка.ПереченьОшибок = СтрЗаменить(Строка.ПереченьОшибок,"Сумма неправильного формата;","");
			
		КонецЕсли;
		
		
		
		Строка.УникальныйИдентификаторЗаписи = Строка.EXTERNALLINEID;
		
		//Проверим возможность ввода документов по данной записи.
		Если Не ЗначениеЗаполнено(Строка.ПереченьОшибок) Тогда
			Строка.Загружать = Истина;
			Строка.ЗагрузкаРазрешена = Истина;
		КонецЕсли;
		
		//Если есть ошибки по статус обработки =1
		Если ЗначениеЗаполнено(СокрЛП(Строка.SESSIONERRORLOG)) И СокрЛП(Строка.SESSIONERRORLOG)<>"1"  Тогда
			Строка.SESSIONISOK = 1;
		КонецЕсли;	
		
		//Если загружать возможно проверим требуется ли перезаписать данную запись
		ТребуетсяПерезаписать = Ложь;
		Если  Строка.ЗагрузкаРазрешена Тогда
			Если ЗначениеЗаполнено(Строка.СчетНаОплату) Тогда
				Если Строка.Контрагент<> Строка.СчетНаОплату.Контрагент ИЛИ
					Строка.ДоговорКонтрагента<> Строка.СчетНаОплату.ДоговорКонтрагента Тогда
					ТребуетсяПерезаписать =  Истина;
				КонецЕсли;
				
				НайтеннаяСтрокаУслуги = Строка.СчетНаОплату.Услуги.Найти(Строка.УникальныйИдентификаторЗаписи);
				Если  НайтеннаяСтрокаУслуги = Неопределено Тогда
					ТребуетсяПерезаписать =  Истина;
				Иначе 
					Если НайтеннаяСтрокаУслуги.Номенклатура<> Строка.Номенклатура
						ИЛИ НайтеннаяСтрокаУслуги.Количество<> Строка.Количество
						ИЛИ НайтеннаяСтрокаУслуги.Сумма<> Строка.Сумма Тогда
						ТребуетсяПерезаписать =  Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(Строка.СчетНаОплату) И ТребуетсяПерезаписать Тогда
				Строка.Загружать = Истина;
				Строка.Комментарий = "Строка изменена, рекоммендуется перезаписать документ: Счет на оплату";
				
			ИначеЕсли    ЗначениеЗаполнено(Строка.СчетНаОплату) И НЕ  ТребуетсяПерезаписать Тогда
				Строка.Загружать = Ложь;
				Строка.Комментарий = "Перезаписывать строку не требуется";
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ТиповаяОшибка) ИЛИ (СокрЛП(Строка.SESSIONERRORLOG)<>"1") Тогда
			
			Если ЗначениеЗаполнено(СокрЛП(Строка.SESSIONERRORLOG)) Тогда
				Строка.Загружать = Ложь;
				Строка.ЗагрузкаРазрешена = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Номенклатура = Строка.Номенклатура;
		ЗаказПокупателя =  Строка.ЗаказПокупателя;
		
		//Отбор = Новый Структура();
		//Отбор.Вставить("Номенклатура",Номенклатура);
		//Отбор.Вставить("СчетНаОплату",СтрокаТЧ.ДокументСчетНаОплату);
		//Отбор.Вставить("ЗаказПокупателя",СтрокаТЧ_Услуги.ЗаказПокупателя);
		
		ЦФО = "";
		ЦФУ = Строка.ЦФУ;
		БюджетнаяСтатья = "";
		НоменклатурнаяГруппа = "";
		
		//АБС+ Тупиков 13309
		//если в TPI четко определено значение поля TSFU
		//Если ЗначениеЗаполнено(Строка.Tsfu) Тогда
		//	Строка.ЦФУ = Справочники.абс_ЦФУ.НайтиПоНаименованию(Строка.Tsfu);
		//	Если Строка.ЦфУ = Справочники.абс_ЦФУ.НайтиПоКоду("ЦФУ2") Тогда
		//		Строка.ЦФО = Справочники.Подразделения.НайтиПоКоду("ЦФО11004 ");  //розничные продажи
		//	Иначе
		//		Строка.ЦФО = Справочники.Подразделения.НайтиПоКоду("ЦФО11001 ");  //магистральные продажи
		//	КонецЕсли;
		//Иначе
		//АБС- Тупиков	
			
		Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
			//СтрокаТЧ_Услуги.ЗаказПокупателя = СтрокаДБ.ЗаказПокупателя;
			ЗаказПокупателяУслуги = ЗаказПокупателя.Услуги;
			
			СтрокаЗаказПокупателяУслуги = ЗаказПокупателяУслуги.Найти(Строка.УникальныйИдентификаторЗаписи,"ИдСтроки");
			Если  СтрокаЗаказПокупателяУслуги = Неопределено Тогда
				СтрокаЗаказПокупателяУслуги = ЗаказПокупателяУслуги.Найти(Строка.Номенклатура.Наименование,"Содержание");
			КонецЕсли;
			
			
			
			Если Не СтрокаЗаказПокупателяУслуги = Неопределено Тогда
				ЦФО = СтрокаЗаказПокупателяУслуги.абс_ЦФО;
				Если ЗначениеЗаполнено(СтрокаЗаказПокупателяУслуги.абс_ЦФУ) Тогда
					ЦФУ = СтрокаЗаказПокупателяУслуги.абс_ЦФУ; 
				КонецЕсли;
				БюджетнаяСтатья = СтрокаЗаказПокупателяУслуги.СтатьяОборотов;
				Если ЗначениеЗаполнено(СтрокаЗаказПокупателяУслуги.НоменклатурнаяГруппа) Тогда
					Если СтрокаЗаказПокупателяУслуги.НоменклатурнаяГруппа.абс_СтатусНоменклатурнойГруппы = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
						НоменклатурнаяГруппа = СтрокаЗаказПокупателяУслуги.НоменклатурнаяГруппа;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЦФО) Тогда
				ЦФО = ЗаказПокупателя.ЦФО;
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗаказПокупателя.ЦФУ) Тогда
				ЦФУ = ЗаказПокупателя.ЦФУ; 
			КонецЕсли;
			Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
				БюджетнаяСтатья = ЗаказПокупателя.БюджетнаяСтатья;
			КонецЕсли;
		КонецЕсли;
		
		
		
		Если ЗначениеЗаполнено(ЦФО)
			и ЗначениеЗаполнено(ЦФУ)
			и ЗначениеЗаполнено(БюджетнаяСтатья) 
			и ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
			
			Строка.ЦФУ = ЦФУ;
			Строка.ЦФО = ЦФО;
			Строка.СтатьяОборотов = БюджетнаяСтатья;
			Строка.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		Иначе
			
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура",Строка.Номенклатура);
			
			Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа)Тогда
				СтрокаНГ = ТаблицаСоответствияНГ.Найти(Номенклатура,"Номенклатура");
				Если Не СтрокаНГ = Неопределено Тогда
					НоменклатурнаяГруппа = СтрокаНГ.НоменклатурнаяГруппа;  
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЦФУ) Тогда
				Строка.ЦФУ = ЦФУ;
				Отбор.Вставить("абс_ЦФУ",ЦФУ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЦФО) Тогда
				ЦФО = Строка.абс_Куратор.ЦФО;  
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЦФО) Тогда
				Отбор.Вставить("ЦФО",ЦФО);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.TIPKONTRAGENTA) Тогда
				Отбор.Вставить("абс_ТипКонтрагента",СокрЛП(Строка.TIPKONTRAGENTA));
			ИначеЕсли ЗначениеЗаполнено(Строка.Контрагент.абс_ТипыКонтрагентов) Тогда      //АБС Коломиец 13632
				Отбор.Вставить("абс_ТипКонтрагента",Строка.Контрагент.абс_ТипыКонтрагентов);			
			КонецЕсли;
			
			
			
			СтрокиБА = ТаблицаСоответствия.НайтиСтроки(Отбор);
			Если СтрокиБА.Количество() > 0 Тогда
				НайденнаяСтрока = СтрокиБА[0];
				
				
				Если НайденнаяСтрока<>Неопределено Тогда
					Если Не ЗначениеЗаполнено(ЦФУ) Тогда
						ЦФУ = НайденнаяСтрока.абс_ЦФУ;  
					КонецЕсли;
					//Если Не ЗначениеЗаполнено(ЦФО) Тогда
					//	ЦФО = НайденнаяСтрока.ЦФО;	 	
					//КонецЕсли;
					
					Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
						БюджетнаяСтатья = НайденнаяСтрока.СтатьяОборотов;	 	
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
						НоменклатурнаяГруппа = НайденнаяСтрока.НоменклатурнаяГруппа;	 	
					КонецЕсли;   
					
					Строка.ЦФУ = ЦФУ;
					Строка.ЦФО = ЦФО;
					Строка.СтатьяОборотов = БюджетнаяСтатья;
					
					Строка.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				КонецЕсли; 
				
			ИначеЕсли ЗначениеЗаполнено(Строка.TIPKONTRAGENTA) Тогда
				Отбор.Удалить("абс_ТипКонтрагента");
				СтрокиБА = ТаблицаСоответствия.НайтиСтроки(Отбор);
				Если СтрокиБА.Количество() > 0 Тогда
					НайденнаяСтрока = СтрокиБА[0];
					
					
					Если НайденнаяСтрока<>Неопределено Тогда
						Если Не ЗначениеЗаполнено(ЦФУ) Тогда
							ЦФУ = НайденнаяСтрока.абс_ЦФУ;  
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(ЦФО) Тогда
							ЦФО = НайденнаяСтрока.ЦФО;	 	
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
							БюджетнаяСтатья = НайденнаяСтрока.СтатьяОборотов;	 	
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
							НоменклатурнаяГруппа = НайденнаяСтрока.НоменклатурнаяГруппа;	 	
						КонецЕсли;   
						
						Строка.ЦФУ = ЦФУ;
						Строка.ЦФО = ЦФО;
						Строка.СтатьяОборотов = БюджетнаяСтатья;
						
						Строка.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
						
					КонецЕсли; 
					
				Иначе
					
					НайденнаяСтрока = ТаблицаСоответствия.Найти(Номенклатура,"Номенклатура");
					Если Не ЗначениеЗаполнено(ЦФО) Тогда
						ЦФО = Строка.абс_Куратор.ЦФО;	 
					КонецЕсли;
					
					Если НайденнаяСтрока<>Неопределено Тогда
						Если Не ЗначениеЗаполнено(ЦФУ) Тогда
							ЦФУ = НайденнаяСтрока.абс_ЦФУ;	 
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(ЦФО) Тогда
							ЦФО = НайденнаяСтрока.ЦФО;	 	
						КонецЕсли;
						Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
							БюджетнаяСтатья = НайденнаяСтрока.СтатьяОборотов;	 	
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
							НоменклатурнаяГруппа = НайденнаяСтрока.НоменклатурнаяГруппа;	 	
						КонецЕсли;
					КонецЕсли; 
					
					
					Строка.ЦФУ = ЦФУ;
					Строка.ЦФО = ЦФО;
					Строка.СтатьяОборотов = БюджетнаяСтатья;
					Строка.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				КонецЕсли;	
			Иначе
				
				НайденнаяСтрока = ТаблицаСоответствия.Найти(Номенклатура,"Номенклатура");
				Если Не ЗначениеЗаполнено(ЦФО) Тогда
					ЦФО = Строка.абс_Куратор.ЦФО;	 
				КонецЕсли;
				
				Если НайденнаяСтрока<>Неопределено Тогда
					Если Не ЗначениеЗаполнено(ЦФУ) Тогда
						ЦФУ = НайденнаяСтрока.абс_ЦФУ;	 
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ЦФО) Тогда
						ЦФО = НайденнаяСтрока.ЦФО;	 	
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
						БюджетнаяСтатья = НайденнаяСтрока.СтатьяОборотов;	 	
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
						НоменклатурнаяГруппа = НайденнаяСтрока.НоменклатурнаяГруппа;	 	
					КонецЕсли;
					
				КонецЕсли; 
				
				Строка.ЦФУ = ЦФУ;
				Строка.ЦФО = ЦФО;
				Строка.СтатьяОборотов = БюджетнаяСтатья;
				Строка.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
			КонецЕсли;
		КонецЕсли;
		
	//КонецЕсли;
	
		//////////// Заполнение агентов
		Если ЗначениеЗаполнено(Строка.Agent) Тогда
			НайденнаяСтрока = ТС_Агентов.Найти(СокрЛП(Строка.Agent),"Агент");
			
			Если НайденнаяСтрока<>Неопределено Тогда
				Строка.Агент = НайденнаяСтрока.Организация;
			КонецЕсли;
			
		КонецЕсли;
	
		
		
		
	КонецЦикла;
	
	СтруктураВозврата.Вставить("ДанныеБиллинга",ТабДанныеБиллинга); 
	СтруктураВозврата.Вставить("МассивДоговоров",МассивДоговоров);
	Возврат СтруктураВозврата;	
	
КонецФункции



//Настройки подключения КТТК

СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
СтруктураПодключения.Вставить("Provider","kttk-1c-db");	
СтруктураПодключения.Вставить("DataSource","TransPlatformIntegration");	
СтруктураПодключения.Вставить("UserID","TransPlatformIntegration_BillingSync");	
СтруктураПодключения.Вставить("Password","5ic7sfre");

////Настройки подключения Абсолют-Софт
//СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
//СтруктураПодключения.Вставить("Provider","bd");	
//СтруктураПодключения.Вставить("DataSource","billing_old");	
//СтруктураПодключения.Вставить("UserID","sa");	
//СтруктураПодключения.Вставить("Password","AbsoluTSofT");

