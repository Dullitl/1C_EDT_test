Перем мУдалятьДвижения Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мВестиУчетНДС Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат

		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ СТРОК ДОКУМЕНТА

Процедура УдалитьНезаполненныеСтроки(ТаблицаДанных, ОбязательныеПоля)
	
	// Удаление строк, в которых есть незаполненные обязательные поля
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеПоля);
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Для Каждого ОбязательноеПоле Из СтруктураОбязательныхПолей Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы[ОбязательноеПоле.Ключ]) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДанных.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Запонить" в диалоге документа
// Реализует алгоритм автоматического заполнения табличной части.
//
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОтменитьПроведение = Ложь, УдалятьНезаполненные = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ОшибкаЗаполнения = Истина;
			СтрокаСообщения = " перед заполнением требуется отменить проведение документа";
			Если Сообщать Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
			КонецЕсли; 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям(, Ложь, СтрокаСообщения, ОшибкаЗаполнения, УдалятьНезаполненные);
	ЗаполнитьСтроки_НДСсАвансов(, , , , УдалятьНезаполненные);
	ЗаполнитьСтроки_НДСсАвансовВыданных(, УдалятьНезаполненные);
	ЗаполнитьСтроки_ВычетНДСПоНалоговомуАгенту(, , , , УдалятьНезаполненные);
	
	Если НЕ ПредъявленНДСКВычету0 Тогда
		ЗаполнитьСтроки_ВычетПриИзмененииСтоимостиВСторонуУменьшения(Ложь);
	КонецЕсли;
	
	Если НЕ (ВычетПоПриобретеннымЦенностям.Количество() > 0 
		ИЛИ НДСсАвансов.Количество() > 0
 		ИЛИ НДСсАвансовВыданных.Количество() > 0
 		ИЛИ ВычетНДСПоНалоговомуАгенту.Количество() > 0
		ИЛИ ВычетПриИзмененииСтоимостиВСторонуУменьшения.Количество() > 0
        ) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС+" - не обнаружены записи к отражению в книге покупок"
	КонецЕсли;	

   Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:"+СтрокаСообщения,,Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьСтрокиДокумента()

////////////////////////////////////////////////////////////////////////////////
// Заполнение табличной части "Вычет НДС по приобретенным ценностям"

// {{ТТК Сладков А. Заявка № 7740621  19.07.2016 начало

//// Процедура выполняет автоматическое заполнение табличной части документа
//// Вызывается из процедуры КоманднаяПанельВычетПоПриобретеннымЦенностямЗаполнить
////
//Процедура ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям(ОтменитьПроведение = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОшибкаЗаполнения = Ложь, УдалятьНезаполненные = Ложь) Экспорт
//	
//	Если Проведен Тогда
//		Если ОтменитьПроведение Тогда
//			Записать(РежимЗаписиДокумента.ОтменаПроведения);
//		Иначе
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
//	Если Не ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
//		ОшибкаЗаполнения = Истина;
//		СтрокаСообщения = "Не указаны параметры учетной политики ("+СокрЛП(Организация)+") на " + Формат(Дата, "ДЛФ=DD") + Символы.ПС 
//						+ "Табличное поле «Вычет НДС по приобретенным ценностям» не может быть заполнено автоматически.";
//		Если Сообщать Тогда
//			ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:"+СтрокаСообщения,,Строка(Ссылка));
//		КонецЕсли; 
//		Возврат;
//	КонецЕсли;
//	
//	ТаблицаРезультатов = ВычетПоПриобретеннымЦенностям.ВыгрузитьКолонки();
//	
//	КонтролироватьОплатуДляСФсДатойМенее01012006 = Истина;
//	ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету = ложь;
//	
//	ОшибкаПолученияУчетнойПолитики2005 = Ложь;
//	Если Дата>= '20080101' тогда
//		КонтролироватьОплатуДляСФсДатойМенее01012006 = Ложь;
//	ИначеЕсли Дата >= '20060101' Тогда
//		УчетнаяПолитикаНУ_31122005 = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл('20051231', Организация);
//		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ_31122005) Тогда
//			ОшибкаПолученияУчетнойПолитики2005 = Истина;
//		КонецЕсли; 
//		Если ОшибкаПолученияУчетнойПолитики2005 Или УчетнаяПолитикаНУ_31122005.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке тогда
//			// Учетная политика на 31.12.2005 велась по отгрузке, требуется отработка положений переходного периода по НДС.
//			КонтролироватьОплатуДляСФсДатойМенее01012006 = Ложь;
//			Если Дата<'20060601' Тогда
//				// Корректировка суммы, которую можно принять к вычету на основании
//				// п. 10. статьи 2 ФЗ №119-ФЗ - 1/6 в течении первого полугодия 2006 года
//				// Вся сумма должна быть списана "равными долями" в течении первого полугодия,
//				// поэтому не требуется контроль 1/6 в 6-м месяце.
//				ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету = Истина;
//			КонецЕсли; 
//		// Отработка положений переходного периода по НДС
//		Иначе
//			КонтролироватьОплатуДляСФсДатойМенее01012006 = Ложь;
//			ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету = Ложь;
//		КонецЕсли; 
//	КонецЕсли; 
//	
//	Если ПредъявленНДСКВычету0 Тогда
//		Дерево_НДСкВычету = ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0(КонтролироватьОплатуДляСФсДатойМенее01012006);
//	Иначе	
//		Дерево_НДСкВычету = ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный(КонтролироватьОплатуДляСФсДатойМенее01012006);
//	КонецЕсли;
//	
//	Если Дерево_НДСкВычету.Строки.Количество()=0 Тогда
//		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
//		ВычетПоПриобретеннымЦенностям.Очистить();
//		Возврат;
//	КонецЕсли;
//	
//	Если ОшибкаПолученияУчетнойПолитики2005 и Дерево_НДСкВычету.Строки[0].СчетФактураДата < '20060101' Тогда
//		СтрокаСообщения = "Не указаны параметры учетной политики ("+СокрЛП(Организация)+") на " + Формат('20051231', "ДЛФ=DD")+ Символы.ПС 
//						+ "Табличное поле «Вычет НДС по приобретенным ценностям» не может быть заполнено автоматически.";
//		ОшибкаЗаполнения = Истина;
//		Если Сообщать Тогда
//			ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:"+СтрокаСообщения,,Строка(Ссылка));
//		КонецЕсли; 
//		Возврат;
//	КонецЕсли; 
//	
//	// Определение суммы, которую можно принять к вычету на основании
//	// п. 10. статьи 2 ФЗ №119-ФЗ - 1/6 в течении первого полугодия 2006 года
//	Дерево_НДСкВычету.Колонки.Добавить("ОпределенаДоля_119ФЗ_2_10", Новый описаниеТипов("Булево"));
//	Дерево_НДСкВычету.Колонки.Добавить("КВычету_СНДС_Часть", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
//	Дерево_НДСкВычету.Колонки.Добавить("КВычету_НДС_Часть", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
//	Если ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету Тогда
//	    ОтработкаПоложенииПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету(Дерево_НДСкВычету);
//	КонецЕсли; 
//	
//	СписокСчетовФактур = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСкВычету.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
//	
//	// Ограничиваем получаемые распределенные оплаты только отфактурованными поступлениями.
//	// Отсутствие СФ допускается только для НДС, уплаченного на таможне, а оплаты по нему тоже не регистрируются.
//	ТаблицаСФ = УчетНДС.ОпределитьНаличиеСчетовФактурПолученных(, КонецДня(Дата),Организация, СписокСчетовФактур,Ложь, Истина, Истина, КонецДня(Дата));
//	ОтфактурованныеПоступления = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСФ.ВыгрузитьКолонку("Документ"),Истина);
//	
//	РаспределенныеОплаты = ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(ОтфактурованныеПоступления);
//	
//	Если Не УчетнаяПолитикаНУ.НДСРежимУчетаРаспределенныхОплат = Перечисления.НДСРежимУчетаРаспределенныхОплат.Приоритет_НДСМожетБытьПринятКВычету Тогда
//		// Пессимистическая политика отражения вычетов. Сначала оплаты относятся на НДС включенный в стоимость (заблокированный к вычету),
//		// лишь затем на НДС, который может быть принят к вычету.
//		ДеревоНДС_ВычетЗаблокирован = ПолучитьСведенияПоЗаблокированномуНДС(ОтфактурованныеПоступления);
//		
//		РаспределитьОплатыПоДеревуСФ(ДеревоНДС_ВычетЗаблокирован, ТаблицаРезультатов,ОтфактурованныеПоступления,РаспределенныеОплаты, Ложь);
//	КонецЕсли; 
//	
//	РаспределитьОплатыПоДеревуСФ(Дерево_НДСкВычету, ТаблицаРезультатов,ОтфактурованныеПоступления,РаспределенныеОплаты,,КонтролироватьОплатуДляСФсДатойМенее01012006);
//	
//	Для Каждого СтрокаСчетФактура Из ТаблицаРезультатов Цикл
//		
//		СтрокаСДатойСФ = ТаблицаСФ.Найти(СтрокаСчетФактура.СчетФактура, "Документ");
//		
//		Если СтрокаСДатойСФ <> Неопределено Тогда 
//			
//			СтрокаСчетФактура.ДатаПолученияСчетаФактуры = СтрокаСДатойСФ.СчетФактураДата;
//			
//			Если Дата >= '20150101' И НЕ ЗначениеЗаполнено(СтрокаСчетФактура.КодВидаОперации)
//				И (ТипЗнч(СтрокаСДатойСФ.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный")
//				ИЛИ ТипЗнч(СтрокаСДатойСФ.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный"))
//				И НЕ ТипЗнч(СтрокаСчетФактура.СчетФактура) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
//				
//				СтрокаСчетФактура.КодВидаОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
//					СтрокаСДатойСФ.СчетФактура, "КодВидаОперации");
//					
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	// Удаление строк, в которых есть незаполненные обязательные поля
//	Если УдалятьНезаполненные Тогда
//		УдалитьНезаполненныеСтроки(ТаблицаРезультатов, "ВидЦенности, СчетФактура, СтавкаНДС");
//	КонецЕсли;

//	УдалитьСтрокиНеоплаченныеКомандировачныеИПредставительские(ТаблицаРезультатов); //АБС-Пр2 9182
//	//АБС ВСТАВКА №37325 НАЧАЛО «5 февраля 2014 г.», Пополитов	
//	абс_УдалитьСтрокиНеоплаченныеНДСдоРеорганизации(ТаблицаРезультатов);
//	//\\АБС ВСТАВКА №37325 КОНЕЦ
//	
//	// {{KM WARE Агапов Н.А. Заявка №34436 13.10.2015 начало
//	УдалениеСтрокПоУсловиям(ТаблицаРезультатов);
//	// }}KM WARE Агапов Н.А. Заявка №34436 13.10.2015 окончание
//	
//	//АБС ВСТАВКА Навценя 27.04.2015
//	абс_УчетНДС.ЗаполнитьКод_ВычетПоПриобретеннымЦенностям(ТаблицаРезультатов);
//	//АБС ВСТАВКА КОНЕЦ
//	
//	ВычетПоПриобретеннымЦенностям.Загрузить(ТаблицаРезультатов);

//КонецПроцедуры // ЗаполнитьСтрокиДокумента()

Процедура ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям(ОтменитьПроведение = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОшибкаЗаполнения = Ложь, УдалятьНезаполненные = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если Не ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = "Не указаны параметры учетной политики ("+СокрЛП(Организация)+") на " + Формат(Дата, "ДЛФ=DD") + Символы.ПС 
						+ "Табличное поле «Вычет НДС по приобретенным ценностям» не может быть заполнено автоматически.";
		Если Сообщать Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:"+СтрокаСообщения,,Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультатов = ВычетПоПриобретеннымЦенностям.ВыгрузитьКолонки();
	
	КонтролироватьОплатуДляСФсДатойМенее01012006 = Истина;
	ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету = ложь;
	
	ОшибкаПолученияУчетнойПолитики2005 = Ложь;
	Если Дата>= '20080101' тогда
		КонтролироватьОплатуДляСФсДатойМенее01012006 = Ложь;
	ИначеЕсли Дата >= '20060101' Тогда
		УчетнаяПолитикаНУ_31122005 = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл('20051231', Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ_31122005) Тогда
			ОшибкаПолученияУчетнойПолитики2005 = Истина;
		КонецЕсли; 
		Если ОшибкаПолученияУчетнойПолитики2005 Или УчетнаяПолитикаНУ_31122005.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке тогда
			// Учетная политика на 31.12.2005 велась по отгрузке, требуется отработка положений переходного периода по НДС.
			КонтролироватьОплатуДляСФсДатойМенее01012006 = Ложь;
			Если Дата<'20060601' Тогда
				// Корректировка суммы, которую можно принять к вычету на основании
				// п. 10. статьи 2 ФЗ №119-ФЗ - 1/6 в течении первого полугодия 2006 года
				// Вся сумма должна быть списана "равными долями" в течении первого полугодия,
				// поэтому не требуется контроль 1/6 в 6-м месяце.
				ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету = Истина;
			КонецЕсли; 
		// Отработка положений переходного периода по НДС
		Иначе
			КонтролироватьОплатуДляСФсДатойМенее01012006 = Ложь;
			ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПредъявленНДСКВычету0 Тогда
		Дерево_НДСкВычету = ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0(КонтролироватьОплатуДляСФсДатойМенее01012006);
	Иначе
		Дерево_НДСкВычету = ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный(КонтролироватьОплатуДляСФсДатойМенее01012006);
	КонецЕсли;
	
	Если Дерево_НДСкВычету.Строки.Количество() = 0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		ВычетПоПриобретеннымЦенностям.Очистить();
		Возврат;
	КонецЕсли;
	
	Если ОшибкаПолученияУчетнойПолитики2005 и Дерево_НДСкВычету.Строки[0].СчетФактураДата < '20060101' Тогда
		СтрокаСообщения = "Не указаны параметры учетной политики ("+СокрЛП(Организация)+") на " + Формат('20051231', "ДЛФ=DD")+ Символы.ПС 
						+ "Табличное поле «Вычет НДС по приобретенным ценностям» не может быть заполнено автоматически.";
		ОшибкаЗаполнения = Истина;
		Если Сообщать Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:"+СтрокаСообщения,,Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	// Определение суммы, которую можно принять к вычету на основании
	// п. 10. статьи 2 ФЗ №119-ФЗ - 1/6 в течении первого полугодия 2006 года
	Дерево_НДСкВычету.Колонки.Добавить("ОпределенаДоля_119ФЗ_2_10", Новый описаниеТипов("Булево"));
	Дерево_НДСкВычету.Колонки.Добавить("КВычету_СНДС_Часть", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Дерево_НДСкВычету.Колонки.Добавить("КВычету_НДС_Часть", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Если ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету Тогда
		ОтработкаПоложенииПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету(Дерево_НДСкВычету);
	КонецЕсли; 
	
	СписокСчетовФактур = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСкВычету.Строки.ВыгрузитьКолонку("СчетФактура"), Истина);
	
	// Ограничиваем получаемые распределенные оплаты только отфактурованными поступлениями.
	// Отсутствие СФ допускается только для НДС, уплаченного на таможне, а оплаты по нему тоже не регистрируются
	ТаблицаСФ = УчетНДС.ОпределитьНаличиеСчетовФактурПолученных(
		Дата(2000, 01, 01),
		КонецДня(Дата),
		Организация,
		СписокСчетовФактур,
		Ложь,
		Истина,
		Истина,
		КонецДня(Дата));
		
	ОтфактурованныеПоступления = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСФ.ВыгрузитьКолонку("Документ"), Истина);
	
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);
		
	РаспределенныеОплаты = ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(ОтфактурованныеПоступления);
	
	Если УчетнаяПолитикаНУ.НДСРежимУчетаРаспределенныхОплат <> Перечисления.НДСРежимУчетаРаспределенныхОплат.Приоритет_НДСМожетБытьПринятКВычету Тогда
		// Пессимистическая политика отражения вычетов. Сначала оплаты относятся на НДС включенный в стоимость (заблокированный к вычету),
		// лишь затем на НДС, который может быть принят к вычету.
		ДеревоНДС_ВычетЗаблокирован = ПолучитьСведенияПоЗаблокированномуНДС(ОтфактурованныеПоступления);
		
		РаспределитьОплатыПоДеревуСФ(
			ДеревоНДС_ВычетЗаблокирован,
			ТаблицаРезультатов,
			ОтфактурованныеПоступления,
			РаспределенныеОплаты,
			Ложь);
	КонецЕсли; 
	
	РаспределитьОплатыПоДеревуСФ(
		Дерево_НДСкВычету, 
		ТаблицаРезультатов,
		ОтфактурованныеПоступления,
		РаспределенныеОплаты, ,
		КонтролироватьОплатуДляСФсДатойМенее01012006);
	
	Для Каждого СтрокаСчетФактура Из ТаблицаРезультатов Цикл
		
		Если ВерсияКодовВидовОпераций > 1 Тогда
			СчетФактураПоДокументу = ТаблицаСФ.Найти(СтрокаСчетФактура.СчетФактура, "Документ");

			
			Если СчетФактураПоДокументу <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаСчетФактура.КодВидаОперации)
					ИЛИ СтрокаСчетФактура.КодВидаОперации = "01" Тогда
					// Получим код вида операции из счета-фактуры
					СтрокаСчетФактура.КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактураПоДокументу.СчетФактура, "КодВидаОперации"), ВерсияКодовВидовОпераций);
				КонецЕсли;
				



			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление строк, в которых есть незаполненные обязательные поля
	Если УдалятьНезаполненные Тогда
		УдалитьНезаполненныеСтроки(ТаблицаРезультатов, "ВидЦенности, СчетФактура, СтавкаНДС");
	КонецЕсли;

	УдалитьСтрокиНеоплаченныеКомандировачныеИПредставительские(ТаблицаРезультатов); //АБС-Пр2 9182
	//АБС ВСТАВКА №37325 НАЧАЛО «5 февраля 2014 г.», Пополитов	
	абс_УдалитьСтрокиНеоплаченныеНДСдоРеорганизации(ТаблицаРезультатов);
	//\\АБС ВСТАВКА №37325 КОНЕЦ
	
// +++ввв 28.11.2016 г.
	// {{KM WARE Агапов Н.А. Заявка №34436 13.10.2015 начало
	//УдалениеСтрокПоУсловиям(ТаблицаРезультатов);
	// }}KM WARE Агапов Н.А. Заявка №34436 13.10.2015 окончание
// ---ввв 28.11.2016 г.
	
	//АБС ВСТАВКА Навценя 27.04.2015
	абс_УчетНДС.ЗаполнитьКод_ВычетПоПриобретеннымЦенностям(ТаблицаРезультатов);
	//АБС ВСТАВКА КОНЕЦ
	
	ВычетПоПриобретеннымЦенностям.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьСтрокиДокумента()

// }}ТТК Сладков А. Заявка №7740621  19.07.2016 окончание


// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// {{KM WARE Агапов Н.А. Заявка №34436 13.10.2015 начало
Процедура УдалениеСтрокПоУсловиям(ТаблицаДанных)
	СтрокиКУдалению = Новый Массив;    		
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл			
		Если СтрокаТаблицы.СуммаБезНДС >0 и СтрокаТаблицы.СуммаБезНДС < 0.041 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;    			
	КонецЦикла; 		
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДанных.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	

КонецПроцедуры // УдалениеСтрокПоУсловиям() }}KM WARE Агапов Н.А. Заявка №34436 13.10.2015 окончание


// Вызывается из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный(КонтролироватьОплатуДляСФсДатойМенее01012006 = истина)

	Запрос = Новый Запрос;
	//АБС+ Тупиков 13520
	//++ Задача № 10655 Логинчев А.С. 16.05.2012 10:55:29
	Если НДСПоНовымВидамДеятельности Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК КВычету_БезНДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК КВычету_НДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК КВычету_СНДС,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДССМР)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) < ДАТАВРЕМЯ(2009, 1, 1)
		|						ТОГДА 1
		|					ИНАЧЕ 5
		|				КОНЕЦ
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
		|					ТОГДА 3
		|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
		|					ТОГДА 3
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ПорядокОплаты,
	|	ВЫБОР
	|		КОГДА &Дата < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА """"
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						ТОГДА ""16""
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(НДСПредъявленныйОстатки.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).НомерРасходногоКассовогоОрдера <> """"
	|								ТОГДА ""17""
	// {{ТТК Сладков А. Заявка №7740621  19.07.2016 начало
	//|							ИНАЧЕ ""03""
	|							КОГДА &Дата < ДАТАВРЕМЯ(2016, 7, 1)
	|								ТОГДА ""03""
	|							ИНАЧЕ ""01""
	// }}ТТК Сладков А. Заявка №7740621  19.07.2016 окончание
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
	|			ТОГДА ""20""
	|		КОГДА НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				И ВЫРАЗИТЬ(НДСПредъявленныйОстатки.СчетФактура КАК Документ.СчетФактураПолученный).БланкСтрогойОтчетности
	|			ТОГДА ""23""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаОперации

		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И СчетУчетаНДС = &Счет19БП
		|				И (НЕ СчетФактура ССЫЛКА Документ.КорректировкаРеализации)
		|				И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|				И (ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|					ИЛИ (НЕ ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)))) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСпоОСиНМА.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И НДСВключенВСтоимость = ЛОЖЬ
		|					И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|					И НеВлияетНаВычет = ЛОЖЬ) КАК НДСпоОСиНМАОстатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСпоОСиНМАОстатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСпоОСиНМАОстатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСпоОСиНМАОстатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСпоОСиНМАОстатки.СчетУчетаНДС
		|			И (НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйРеализация0Остатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйРеализация0Остатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйРеализация0Остатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС
		|			И (НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток + НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
		|ГДЕ
		|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата),
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДССМР)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) < ДАТАВРЕМЯ(2009, 1, 1)
		|						ТОГДА 1
		|					ИНАЧЕ 5
		|				КОНЕЦ
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
		|					ТОГДА 3
		|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
		|					ТОГДА 3
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(КВычету_БезНДС),
		|	СУММА(КВычету_НДС),
		|	СУММА(КВычету_СНДС)
		|ПО
		|	СчетФактура,
		|	ПорядокОплаты";
		Запрос.УстановитьПараметр("Счет19БП",ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.БП"));
	Иначе
	//-- Задача № 10655 Логинчев А.С.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК КВычету_БезНДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК КВычету_НДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК КВычету_СНДС,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДССМР)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) < ДАТАВРЕМЯ(2009, 1, 1)
		|						ТОГДА 1
		|					ИНАЧЕ 5
		|				КОНЕЦ
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
		|					ТОГДА 3
		|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
		|					ТОГДА 3
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ПорядокОплаты,
	|	ВЫБОР
	|		КОГДА &Дата < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА """"
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						ТОГДА ""16""
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(НДСПредъявленныйОстатки.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).НомерРасходногоКассовогоОрдера <> """"
	|								ТОГДА ""17""
	// {{ТТК Сладков А. Заявка №7740621  19.07.2016 начало
	//|							ИНАЧЕ ""03""
	|							КОГДА &Дата < ДАТАВРЕМЯ(2016, 7, 1)
	|								ТОГДА ""03""
	|							ИНАЧЕ ""01""
	// }}ТТК Сладков А. Заявка №7740621  19.07.2016 окончание
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
	|			ТОГДА ""20""
	|		КОГДА НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				И ВЫРАЗИТЬ(НДСПредъявленныйОстатки.СчетФактура КАК Документ.СчетФактураПолученный).БланкСтрогойОтчетности
	|			ТОГДА ""23""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаОперации

		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		//++ Заявка № 10655 Логинчев А.С.
		|				И (НЕ СчетУчетаНДС В (&МассивИсключенийСчета19))
		|				И (НЕ СчетФактура ССЫЛКА Документ.КорректировкаРеализации)
		//-- Заявка № 10655 Логинчев А.С.
		|				И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|				И (ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|					ИЛИ (НЕ ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)))) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСпоОСиНМА.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И НДСВключенВСтоимость = ЛОЖЬ
		|					И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|					И НеВлияетНаВычет = ЛОЖЬ) КАК НДСпоОСиНМАОстатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСпоОСиНМАОстатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСпоОСиНМАОстатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСпоОСиНМАОстатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСпоОСиНМАОстатки.СчетУчетаНДС
		|			И (НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйРеализация0Остатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйРеализация0Остатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйРеализация0Остатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС
		|			И (НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток + НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
		|ГДЕ
		|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата),
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДССМР)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) < ДАТАВРЕМЯ(2009, 1, 1)
		|						ТОГДА 1
		|					ИНАЧЕ 5
		|				КОНЕЦ
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
		|					ТОГДА 3
		|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
		|					ТОГДА 3
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(КВычету_БезНДС),
		|	СУММА(КВычету_НДС),
		|	СУММА(КВычету_СНДС)
		|ПО
		|	СчетФактура,
		|	ПорядокОплаты";
	//++ Заявка № 10655 Логинчев А.С.
	КонецЕсли;
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.БП"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.НЕ"));
	Запрос.УстановитьПараметр("МассивИсключенийСчета19",МассивСчетов);
	//-- Заявка № 10655 Логинчев А.С.

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("КонтролироватьОплатуДляСФсДатойМенее01012006", КонтролироватьОплатуДляСФсДатойМенее01012006);

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);

	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДССМР = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДССМР.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_Возврат = Новый СписокЗначений;
	ВидыЦенностей_Возврат.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	ВидыЦенностей_НалоговыйАгент = УчетНДС.ВидыЦенностиНалоговыйАгентПоступление();
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДССМР", ВидыЦенностей_ОплатаПоНДССМР);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	Запрос.УстановитьПараметр("ВидыЦенностей_Возврат", ВидыЦенностей_Возврат);
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент", ВидыЦенностей_НалоговыйАгент);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

// Вызывается из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленныйРеализация0
Функция ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0(КонтролироватьОплатуДляСФсДатойМенее01012006 = истина)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) КАК КВычету_БезНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) КАК КВычету_НДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) КАК КВычету_СНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
		|					ТОГДА 3
		|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
		|					ТОГДА 3
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ПорядокОплаты,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйРеализация0Остатки.Состояние
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|		    И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйОстатки
		|		ПО НДСПредъявленныйРеализация0Остатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
		|			И НДСПредъявленныйРеализация0Остатки.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
		|			И НДСПредъявленныйРеализация0Остатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
		|			И НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС = НДСПредъявленныйОстатки.СчетУчетаНДС
		|			И (НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0)
		|ГДЕ
		|	(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(КВычету_БезНДС),
		|	СУММА(КВычету_НДС),
		|	СУММА(КВычету_СНДС)
		|ПО
		|	СчетФактура,
		|	ПорядокОплаты";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("КонтролироватьОплатуДляСФсДатойМенее01012006", КонтролироватьОплатуДляСФсДатойМенее01012006);

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);

	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_Возврат = Новый СписокЗначений;
	ВидыЦенностей_Возврат.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	Запрос.УстановитьПараметр("ВидыЦенностей_Возврат", ВидыЦенностей_Возврат);
	
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Проверяем возможность предъявления к вычету по остаткам регистра "НДС предъявленный)
	// (вычет не может превышать текущий остаток)
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток КАК СуммаСНДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|			И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|			И СчетФактура В (&СписокСчетовФактур)) КАК НДСПредъявленныйОстатки
		|ГДЕ
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0
		|ИТОГИ
		|	СУММА(СуммаСНДС)
		|ПО
		|	СчетФактура";
		
	Запрос.УстановитьПараметр("СписокСчетовФактур", РезультатЗапроса.Строки.ВыгрузитьКолонку("СчетФактура"));
    СтрокиСФкУдалению = новый массив();
	ДоступныйКВычетуНДС = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураОтбора = НОвый структура("ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	Для каждого СтрокаСФ Из РезультатЗапроса.Строки Цикл
		СтрокаСФ_НДСПРедъявленный = ДоступныйКВычетуНДС.строки.Найти(СтрокаСФ.СчетФактура,"СчетФактура");
		Если СтрокаСФ_НДСПРедъявленный = Неопределено Тогда
			// Не найдены положитьельные остатки по СФ
			// НДС по СФ не может быть принят к вычету
			СтрокиСФкУдалению.Добавить(СтрокаСФ);
			Продолжить;
		ИначеЕсли СтрокаСФ_НДСПРедъявленный.СуммаСНДС >= СтрокаСФ.КВычету_СНДС тогда
			// Сумма НДС доступного к вычету по СФ не менее, чем сумма списываемая документом.
			// Корректировка не требуется
			Продолжить;
		КонецЕсли;

		Для каждого СтрокаПорядкаОплат Из СтрокаСФ.Строки Цикл
		
			СтрокиКУдалению = Новый Массив();
			Для каждого СтрокаРасшифровки Из СтрокаПорядкаОплат.Строки Цикл
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаРасшифровки);
				СтрокиПоОтбору = СтрокаСФ_НДСПРедъявленный.строки.НайтиСтроки(СтруктураОтбора);
				Если СтрокиПоОтбору.Количество() = 0 Тогда
					СтрокиКУдалению.Добавить(СтрокаРасшифровки);
					Продолжить;
				КонецЕсли;
				//может быть выбрана только одна строка
				СтрокаПоОтбору = СтрокиПоОтбору[0];
				Если СтрокаПоОтбору.СуммаСНДС = 0 тогда 
					СтрокиКУдалению.Добавить(СтрокаРасшифровки);
					Продолжить;
				КонецЕсли;
				
				Если СтрокаПоОтбору.СуммаСНДС >= СтрокаРасшифровки.КВычету_СНДС тогда
					СтрокаПоОтбору.СуммаСНДС = СтрокаПоОтбору.СуммаСНДС - СтрокаРасшифровки.КВычету_СНДС;
				Иначе
					СтрокаРасшифровки.КВычету_НДС = (СтрокаРасшифровки.КВычету_НДС*СтрокаПоОтбору.СуммаСНДС/СтрокаРасшифровки.КВычету_СНДС);
					СтрокаРасшифровки.КВычету_СНДС = СтрокаПоОтбору.СуммаСНДС;
					СтрокаРасшифровки.КВычету_БезНДС = СтрокаРасшифровки.КВычету_СНДС - СтрокаРасшифровки.КВычету_НДС;
					СтрокаПоОтбору.СуммаСНДС = 0;
				КонецЕсли;
			КонецЦикла; 
			Для каждого СтрокаКУдалению	из СтрокиКУдалению Цикл
			    СтрокаПорядкаОплат.Строки.Удалить(СтрокаКУдалению);
			КонецЦикла; 
			
			СтрокаПорядкаОплат.КВычету_НДС = СтрокаПорядкаОплат.Строки.Итог("КВычету_НДС");
			СтрокаПорядкаОплат.КВычету_СНДС = СтрокаПорядкаОплат.Строки.Итог("КВычету_СНДС");
			СтрокаПорядкаОплат.КВычету_БезНДС = СтрокаПорядкаОплат.Строки.Итог("КВычету_БезНДС");
		
		КонецЦикла; 
		СтрокаСФ.КВычету_НДС = СтрокаСФ.Строки.Итог("КВычету_НДС");
		СтрокаСФ.КВычету_СНДС = СтрокаСФ.Строки.Итог("КВычету_СНДС");
		СтрокаСФ.КВычету_БезНДС = СтрокаСФ.Строки.Итог("КВычету_БезНДС");
		
		Если СтрокаСФ.КВычету_СНДС = 0 Тогда
			СтрокиСФкУдалению.Добавить(СтрокаСФ);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению	из СтрокиСФкУдалению Цикл
		РезультатЗапроса.Строки.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат РезультатЗапроса;

КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0()

// Вызывается из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Получает информацию о НДС включенном в стоимость и прочим блокирующим событиям 
// для блокировки распределенных оплат
Функция ПолучитьСведенияПоЗаблокированномуНДС(СписокСчетовФактур)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСВключенныйВСтоимостьОбороты.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0) КАК КВычету_СНДС,
	|	ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0) КАК КВычету_НДС,
	|	НДСВключенныйВСтоимостьОбороты.СчетФактура.Дата КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА НДСВключенныйВСтоимостьОбороты.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|			ТОГДА 1
	|		КОГДА НДСВключенныйВСтоимостьОбороты.ВидЦенности В (&ВидыЦенностей_БезОплаты)
	|			ТОГДА 2
	|		КОГДА НДСВключенныйВСтоимостьОбороты.ВидЦенности В (&ВидыЦенностей_Возврат)
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокОплаты
	|ИЗ
	|	РегистрНакопления.НДСВключенныйВСтоимость.Обороты(
	|		,
	|		&ДатаГраница,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСВключенныйВСтоимостьОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСпоОСиНМАОстатки.СчетФактура,
	|	ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0),
	|	ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0),
	|	НДСпоОСиНМАОстатки.СчетФактура.Дата,
	|	ВЫБОР
	|		КОГДА НДСпоОСиНМАОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|			ТОГДА 1
	|		КОГДА НДСпоОСиНМАОстатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
	|			ТОГДА 2
	|		КОГДА НДСпоОСиНМАОстатки.ВидЦенности В (&ВидыЦенностей_Возврат)
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|		&ДатаГраница,
	|		Организация = &Организация
	|			И СчетФактура В (&СписокСчетовФактур)
	|			И НДСВключенВСтоимость = ЛОЖЬ
	|			И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
	|			И НеВлияетНаВычет = ЛОЖЬ) КАК НДСпоОСиНМАОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ
	|	СУММА(КВычету_СНДС),
	|	СУММА(КВычету_НДС)
	|ПО
	|	СчетФактура,
	|	ПорядокОплаты";
	
	Если не ПредъявленНДСКВычету0 Тогда
		ДополнениеПоРеализации0 = "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0),
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0),
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|		    И СчетФактура В (&СписокСчетовФактур)
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйРеализация0Остатки
		| УПОРЯДОЧИТЬ ПО
		| ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО",ДополнениеПоРеализации0);
	КонецЕсли; 

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);

	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_Возврат = Новый СписокЗначений;
	ВидыЦенностей_Возврат.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	Запрос.УстановитьПараметр("ВидыЦенностей_Возврат", ВидыЦенностей_Возврат);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ПолучитьСведенияПоЗаблокированномуНДС()

// Процедура вызывается из ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
Функция ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Организация,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Период,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Регистратор,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Документ,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.ДатаОплаты,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.СуммаРегРасход,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.СуммаРегПриход,
	|	ВЫБОР
	|		КОГДА РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Регистратор В (&СписокСчетовФактур)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоДокументПриобретения
	|ПОМЕСТИТЬ РасчетыПоПриобретению
	|ИЗ
	|	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Обороты(, &ДатаГраница, Регистратор, Организация = &Организация) КАК РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты
	|ГДЕ
	|	(РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Регистратор В (&СписокСчетовФактур)
	|			ИЛИ РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Документ В (&СписокСчетовФактур))
	|	И НЕ РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Регистратор = РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
// +++ввв 21.11.2016 г.
	|ВЫБРАТЬ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.Организация КАК Организация,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.Период КАК Период,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.Регистратор КАК Регистратор,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.РасчетныйДокумент.Дата КАК РасчетныйДокументДата,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.СуммаВзаиморасчетовРасход КАК СуммаВзаиморасчетовРасход,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.СуммаВзаиморасчетовПриход КАК СуммаВзаиморасчетовПриход,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСПодотчетнымиЛицамиОбороты.Регистратор В (&СписокСчетовФактур)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоДокументПриобретения,
	|	ДокОснования.Ссылка КАК СчФ
	|ПОМЕСТИТЬ РасчетыСПодотчетнымиЛицами
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|		СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|	ГДЕ
	|		СчетФактураПолученныйДокументыОснования.Ссылка В(&СписокСчетовФактур)
	|		И СчетФактураПолученныйДокументыОснования.Ссылка.Организация = &Организация) КАК ДокОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Обороты(, &ДатаГраница, Регистратор, Организация = &Организация) КАК ВзаиморасчетыСПодотчетнымиЛицамиОбороты
	|		ПО ДокОснования.ДокументОснование = ВзаиморасчетыСПодотчетнымиЛицамиОбороты.Регистратор
	|ГДЕ
	|	НЕ ВзаиморасчетыСПодотчетнымиЛицамиОбороты.Регистратор = ВзаиморасчетыСПодотчетнымиЛицамиОбороты.РасчетныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.Организация,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.Период,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.РасчетныйДокумент,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.Регистратор,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.Регистратор.Дата,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.СуммаВзаиморасчетовПриход,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОбороты.СуммаВзаиморасчетовРасход,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСПодотчетнымиЛицамиОбороты.РасчетныйДокумент В (&СписокСчетовФактур)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДокОснования.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|		СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|	ГДЕ
	|		СчетФактураПолученныйДокументыОснования.Ссылка В(&СписокСчетовФактур)
	|		И СчетФактураПолученныйДокументыОснования.Ссылка.Организация = &Организация) КАК ДокОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Обороты(НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ), &ДатаГраница, Регистратор, Организация = &Организация) КАК ВзаиморасчетыСПодотчетнымиЛицамиОбороты
	|		ПО ДокОснования.ДокументОснование = ВзаиморасчетыСПодотчетнымиЛицамиОбороты.РасчетныйДокумент
	|ГДЕ
	|	НЕ ВзаиморасчетыСПодотчетнымиЛицамиОбороты.Регистратор = ВзаиморасчетыСПодотчетнымиЛицамиОбороты.РасчетныйДокумент
// ---ввв 21.11.2016 г.
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоПриобретению.Организация,
	|	ВЫБОР
	|		КОГДА РасчетыПоПриобретению.ЭтоДокументПриобретения
	|			ТОГДА РасчетыПоПриобретению.Регистратор
	|		ИНАЧЕ РасчетыПоПриобретению.Документ
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА РасчетыПоПриобретению.ЭтоДокументПриобретения
	|			ТОГДА РасчетыПоПриобретению.Документ
	|		ИНАЧЕ РасчетыПоПриобретению.Регистратор
	|	КОНЕЦ КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА РасчетыПоПриобретению.ЭтоДокументПриобретения
	|			ТОГДА РасчетыПоПриобретению.ДатаОплаты
	|		ИНАЧЕ РасчетыПоПриобретению.Период
	|	КОНЕЦ КАК ДатаОплаты,
	|	ВЫБОР
	|		КОГДА РасчетыПоПриобретению.ЭтоДокументПриобретения
	|			ТОГДА РасчетыПоПриобретению.СуммаРегРасход
	|		ИНАЧЕ РасчетыПоПриобретению.СуммаРегПриход
	|	КОНЕЦ КАК РаспределеннаяОплата,
	|	ЛОЖЬ КАК РасчетыСБюджетом
	|ИЗ
	|	РасчетыПоПриобретению КАК РасчетыПоПриобретению
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.Организация,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.СчетФактура,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.ДокументОплаты,
	|	ЕСТЬNULL(НДСУчетРаспределенныхОплатПоставщикамОстатки.ДокументОплаты.ДатаОплаты, НДСУчетРаспределенныхОплатПоставщикамОстатки.ДокументОплаты.Дата),
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.РаспределеннаяСуммаОстаток,
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.НДСУчетРаспределенныхОплатПоставщикам.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И НЕ ДокументОплаты = НЕОПРЕДЕЛЕНО
	|				И РасчетыСБюджетом = ИСТИНА) КАК НДСУчетРаспределенныхОплатПоставщикамОстатки
	|ГДЕ
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.СчетФактура В(&СписокСчетовФактур)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПодотчетнымиЛицами.Организация,
	|	РасчетыСПодотчетнымиЛицами.СчФ,
	|	РасчетыСПодотчетнымиЛицами.РасчетныйДокумент,
	|	РасчетыСПодотчетнымиЛицами.РасчетныйДокументДата,
	|	РасчетыСПодотчетнымиЛицами.СуммаВзаиморасчетовРасход,
	|	ЛОЖЬ
	|ИЗ
	|	РасчетыСПодотчетнымиЛицами КАК РасчетыСПодотчетнымиЛицами
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОплаты";
	
	Запрос.УстановитьПараметр("Дата", 		КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	РаспределенныеОплаты = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	РаспределенныеОплаты.Колонки.Добавить("QueryId", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6)));

	Если РаспределенныеОплаты.Количество()>0 Тогда
		QueryId = Новый Массив(РаспределенныеОплаты.Количество());
		Для Счетчик=0 По РаспределенныеОплаты.Количество()-1 Цикл
			QueryId[Счетчик] = Счетчик;
		КонецЦикла; 
		РаспределенныеОплаты.ЗагрузитьКолонку(QueryId,"QueryId");
	КонецЕсли; 
	
	Возврат РаспределенныеОплаты;	

КонецФункции // ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ()
 
// Процедура вызывается из ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// По списку счетов-фактур распределяет по видам ценностей суммы не использованных ранее распределенных оплат.
Процедура РаспределитьОплатыПоДеревуСФ(Дерево_НДСкВычету, ТаблицаРезультатов, СписокСчетовФактур, РаспределенныеОплаты, ОтражатьВРеестре = Истина,КонтролироватьОплатуДляСФсДатойМенее01012006 = Истина)

	НДСНалоговыйПериод = Неопределено;
	
	ОтфактурованныеПоступления = Новый СписокЗначений();
	ОтфактурованныеПоступления.ЗагрузитьЗначения(СписокСчетовФактур);
	
	Построитель_РаспределенныеОплаты = Новый построительЗапроса();
	Построитель_РаспределенныеОплаты.ИсточникДанных = Новый ОписаниеИсточникаДанных(РаспределенныеОплаты);
	
	// Подготовка структуры отбора
	Отбор = Построитель_РаспределенныеОплаты.Отбор;
	Отбор.Добавить("СчетФактура");
	Отбор.СчетФактура.Использование = Истина;
	Отбор.Добавить("РасчетыСБюджетом");
	Отбор.РасчетыСБюджетом.Использование = Истина;
	Отбор.Добавить("РаспределеннаяОплата");
	Отбор.РаспределеннаяОплата.ВидСравнения = ВидСравнения.Больше;
	Отбор.РаспределеннаяОплата.Значение = 0;
	Отбор.РаспределеннаяОплата.Использование = Истина;
	
	Построитель_РаспределенныеОплаты.Порядок.Добавить("ДатаОплаты");
	
	
	ТаблицаОплат = Новый ТаблицаЗначений();
	ТаблицаОплат.Колонки.Добавить("ДокументОплаты");
	ТаблицаОплат.Колонки.Добавить("ДатаОплаты",Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаОплат.Колонки.Добавить("СуммаОплаты",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаИсточникаПостроителя = Построитель_РаспределенныеОплаты.ИсточникДанных.ИсточникДанных;
	Для каждого СтрокаСФ Из Дерево_НДСкВычету.Строки Цикл
 		Для каждого СтрокаПорядокОплаты  Из СтрокаСФ.Строки Цикл
			Если СтрокаСФ.КВычету_СНДС = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			ТаблицаОплат.Очистить();
			Если СтрокаПорядокОплаты.ПорядокОплаты = 2 Тогда
				// Наличие оплаты не определяется
				СтрокаОплаты = ТаблицаОплат.Добавить();
				СтрокаОплаты.ДокументОплаты = СтрокаСФ.СчетФактура;
				СтрокаОплаты.ДатаОплаты = СтрокаСФ.СчетФактураДата;
				СтрокаОплаты.СуммаОплаты = СтрокаСФ.КВычету_СНДС;
			ИначеЕсли СтрокаПорядокОплаты.ПорядокОплаты = 4 
				И Не ОтфактурованныеПоступления.НайтиПоЗначению(СтрокаСФ.СчетФактура) = Неопределено Тогда
				// Наличие оплаты не определяется
				СтрокаОплаты = ТаблицаОплат.Добавить();
				СтрокаОплаты.ДокументОплаты = Неопределено;
				СтрокаОплаты.ДатаОплаты = Неопределено;
				СтрокаОплаты.СуммаОплаты = СтрокаСФ.КВычету_СНДС;
			Иначе
				Отбор = Построитель_РаспределенныеОплаты.Отбор;
				Отбор.СчетФактура.Значение = СтрокаПорядокОплаты.СчетФактура;
				Отбор.РасчетыСБюджетом.Значение = (СтрокаПорядокОплаты.ПорядокОплаты = 1 Или СтрокаПорядокОплаты.ПорядокОплаты = 5);
				Построитель_РаспределенныеОплаты.Выполнить();
				Если Построитель_РаспределенныеОплаты.Результат.Пустой() Тогда
					// Оплата не обнаружена
					Если СтрокаПорядокОплаты.ПорядокОплаты = 3 
						и не ОтфактурованныеПоступления.НайтиПоЗначению(СтрокаСФ.СчетФактура) = неопределено 
						Тогда
						Если СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 Тогда
						    СуммаОплаты = Мин(СтрокаПорядокОплаты.КВычету_СНДС_Часть,СтрокаПорядокОплаты.КВычету_СНДС);
						Иначе
							СуммаОплаты = СтрокаПорядокОплаты.КВычету_СНДС;
						КонецЕсли; 
						
						Если СуммаОплаты = 0 тогда
							Продолжить;
						КонецЕсли;
						
						// Наличие оплаты желательно, но не обязательно для принятия к вычету
						СтрокаОплаты = ТаблицаОплат.Добавить();
						СтрокаОплаты.ДокументОплаты = Неопределено;
						СтрокаОплаты.ДатаОплаты = Неопределено;
						СтрокаОплаты.СуммаОплаты = СуммаОплаты;
					ИначеЕсли СтрокаПорядокОплаты.ПорядокОплаты = 5 Тогда
						СуммаОплаты = СтрокаПорядокОплаты.КВычету_НДС;
						
						Если СуммаОплаты = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						// Наличие оплаты желательно, но не обязательно для принятия к вычету
						СтрокаОплаты = ТаблицаОплат.Добавить();
						СтрокаОплаты.ДокументОплаты = Неопределено;
						СтрокаОплаты.ДатаОплаты = Неопределено;
						СтрокаОплаты.СуммаОплаты = СуммаОплаты;
					Иначе	
						Продолжить;
					КонецЕсли;
				Иначе
					ВыборкаОплат = Построитель_РаспределенныеОплаты.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
					
					Если СтрокаПорядокОплаты.ПорядокОплаты = 1 
						Или СтрокаПорядокОплаты.ПорядокОплаты = 5 Тогда
						// Оплата определяется по сумме НДС
						СуммаКПогашению = СтрокаПорядокОплаты.КВычету_НДС;
					ИначеЕсли СтрокаПорядокОплаты.ПорядокОплаты = 6 Тогда
						// Оплата определяется в общем порядке (по сумме без НДС)
						СуммаКПогашению = СтрокаПорядокОплаты.КВычету_БезНДС;
					Иначе
						// Оплата определяется в общем порядке (по сумме с НДС)
						СуммаКПогашению = СтрокаПорядокОплаты.КВычету_СНДС;
					КонецЕсли; 
					
					Для каждого СтрокаРаспределеннойОплаты Из ВыборкаОплат Цикл
						СтрокаОплаты = ТаблицаОплат.Добавить();
						СтрокаОплаты.ДокументОплаты = СтрокаРаспределеннойОплаты.ДокументОплаты;
						СтрокаОплаты.ДатаОплаты = СтрокаРаспределеннойОплаты.ДатаОплаты;
						СтрокаОплаты.СуммаОплаты = Мин(СуммаКПогашению,СтрокаРаспределеннойОплаты.РаспределеннаяОплата);
						
						СуммаКПогашению = СуммаКПогашению - СтрокаОплаты.СуммаОплаты;
						ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QueryId].РаспределеннаяОплата = ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QueryId].РаспределеннаяОплата - СтрокаОплаты.СуммаОплаты;
						
						Если СуммаКПогашению = 0 Тогда
						    Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если СуммаКПогашению > 0 
						И (СтрокаПорядокОплаты.ПорядокОплаты = 3
						Или СтрокаПорядокОплаты.ПорядокОплаты = 5) Тогда
						// Наличие оплаты желательно, но не обязательно для принятия к вычету
						Если СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 Тогда
							ПредложеноКВычетуПоОплатам = СтрокаПорядокОплаты.КВычету_СНДС - СуммаКПогашению;
							СуммаКПогашению = Макс(0, СтрокаПорядокОплаты.КВычету_СНДС_Часть - ПредложеноКВычетуПоОплатам);
						КонецЕсли;
						
						Если не СуммаКПогашению = 0 Тогда
							СтрокаОплаты = ТаблицаОплат.Добавить();
							СтрокаОплаты.ДокументОплаты = Неопределено;
							СтрокаОплаты.ДатаОплаты = Неопределено;
							СтрокаОплаты.СуммаОплаты = СуммаКПогашению;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;
			Если ТаблицаОплат.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если не ОтражатьВРеестре тогда
				// Оплаты заблокированы, дальнейшая обработка не требуется
				Продолжить;
			КонецЕсли;
			
			ТаблицаОплат.Свернуть("ДокументОплаты, ДатаОплаты","СуммаОплаты");
			
			Для Каждого СтрокаОплаты Из ТаблицаОплат Цикл
				Если СтрокаПорядокОплаты.ПорядокОплаты = 1 
					Или СтрокаПорядокОплаты.ПорядокОплаты = 5 Тогда
					МассивБазиса = СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС");
					КРаспределениюНДС = СтрокаОплаты.СуммаОплаты;
					Массив_НДС = СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС");
					Если СтрокаПорядокОплаты.Строки.Итог("КВычету_НДС") <> 0 Тогда
						КРаспределениюСНДС = Окр(СтрокаОплаты.СуммаОплаты * СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС")/СтрокаПорядокОплаты.Строки.Итог("КВычету_НДС"),2);
						Если КРаспределениюСНДС > 0 Тогда
							МассивРезультата_СНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(КРаспределениюСНДС ,СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_СНДС"));
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтрокаПорядокОплаты.ПорядокОплаты = 6 Тогда
					МассивБазиса = СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_БезНДС");
					Массив_НДС = СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС");
					КРаспределениюНДС = СтрокаПорядокОплаты.Строки.Итог("КВычету_НДС");
					
					// {{KM WARE Агапов Н.А. Заявка №36024 08.01.2016 начало
					Если ЗначениеЗаполнено(СтрокаПорядокОплаты.Строки.Итог("КВычету_БезНДС")) тогда
						Если не СтрокаПорядокОплаты.Строки.Итог("КВычету_БезНДС") = 0 тогда 
							КРаспределениюНДС = Окр(КРаспределениюНДС * СтрокаОплаты.СуммаОплаты /СтрокаПорядокОплаты.Строки.Итог("КВычету_БезНДС"),2);
						КонецЕсли;	
					КонецЕсли;
					// }}KM WARE Агапов Н.А. Заявка №36024 08.01.2016 окончание
					
					//Бобылев А.А. 29.01.2018 добавил проверку на ноль
					Если не СтрокаПорядокОплаты.Строки.Итог("КВычету_БезНДС") = 0 Тогда
						КРаспределениюСНДС = Окр(СтрокаОплаты.СуммаОплаты * СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС")/СтрокаПорядокОплаты.Строки.Итог("КВычету_БезНДС"),2);
					Иначе
						КРаспределениюСНДС = 0;
					КонецЕсли;
					//Бобылев А.А.-----------
					Если КРаспределениюСНДС > 0 Тогда
						МассивРезультата_СНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(КРаспределениюСНДС ,СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_СНДС"));
					КонецЕсли;
				ИначеЕсли СтрокаПорядокОплаты.ПорядокОплаты = 3 и СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 и НЕ ЗначениеЗаполнено(СтрокаОплаты.ДокументОплаты)Тогда
					МассивБазиса =  СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_СНДС_Часть");
					КРаспределениюНДС = 0;
					Массив_НДС =  СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС_Часть");
					Для НомерЭлемента = 0 по Массив_НДС.Количество()-1 Цикл
						КРаспределениюНДС = КРаспределениюНДС + Массив_НДС[НомерЭлемента];
					КонецЦикла; 
					Если СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС_Часть") = 0 Тогда
						КРаспределениюНДС = 0;
						Продолжить;
					иначе
						КРаспределениюНДС = Окр(КРаспределениюНДС * СтрокаОплаты.СуммаОплаты /СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС_Часть"),2);
					КонецЕсли; 
					
				Иначе	
					МассивБазиса =  СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_СНДС");
					КРаспределениюНДС = Окр(СтрокаОплаты.СуммаОплаты * СтрокаПорядокОплаты.Строки.Итог("КВычету_НДС")/СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС"),2);
					Массив_НДС = СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС");
				КонецЕсли; 
				
				МассивРезультата = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаОплаты.СуммаОплаты,МассивБазиса);
				
				Если (СтрокаПорядокОплаты.ПорядокОплаты = 1 
					Или СтрокаПорядокОплаты.ПорядокОплаты = 5
					Или СтрокаПорядокОплаты.ПорядокОплаты = 6)
					И КРаспределениюСНДС > 0 Тогда
					МассивРезультата = МассивРезультата_СНДС;
				КонецЕсли; 
				
				Если КРаспределениюНДС <> 0 Тогда
					МассивРезультата_НДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(КРаспределениюНДС,Массив_НДС);
// {{KM WARE Семенов И.С. Заявка №  15.07.2015 начало
// иначе старый массив берется
				иначе
					МассивРезультата_НДС = 0;
// }}KM WARE Семенов И.С. Заявка №  15.07.2015 окончание
				КонецЕсли; 
				
				НомерСтроки = 0;
				Для Каждого СтрокаЗадолжености Из СтрокаПорядокОплаты.Строки Цикл
					//Бобылев А.А. 29.01.2018 добавлено условие МассивРезультата_НДС и МассивРезультата
					Если МассивРезультата_НДС <> 0 И МассивРезультата <> 0 и МассивРезультата <> НЕОПРЕДЕЛЕНО Тогда
						Если МассивРезультата[НомерСтроки] = 0 И ?(КРаспределениюНДС = 0,Истина, МассивРезультата_НДС[НомерСтроки] = 0) Тогда
							НомерСтроки = НомерСтроки+1;
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить
					КонецЕсли;
					//Бобылев А.А. ---------
					СтрокаРезультата = ТаблицаРезультатов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаЗадолжености);
					
					СтрокаРезультата.ДокументОплаты	= СтрокаОплаты.ДокументОплаты;
					Если ПредъявленНДСКВычету0 Тогда
						СтрокаРезультата.ДокументОтгрузки	= СтрокаЗадолжености.ДокументОтгрузки;
						СтрокаРезультата.Состояние	= СтрокаЗадолжености.Состояние;
					КонецЕсли; 
					
					СтрокаРезультата.ДатаОплаты		= СтрокаОплаты.ДатаОплаты;
					
					СтрокаРезультата.СуммаБезНДС	= МассивРезультата[НомерСтроки]- ?(КРаспределениюНДС=0,0,МассивРезультата_НДС[НомерСтроки]);
					//АБС ВСТАВКА №44829 НАЧАЛО «23 июня 2014 г.», Пополитов
					//СтрокаРезультата.НДС			= ?(СтрокаПорядокОплаты.ПорядокОплаты = 1 Или СтрокаПорядокОплаты.ПорядокОплаты = 5 Или СтрокаПорядокОплаты.ПорядокОплаты = 6,МассивРезультата_НДС[НомерСтроки], МассивРезультата[НомерСтроки]- СтрокаРезультата.СуммаБезНДС);
					СтрокаРезультата.НДС			= ?((СтрокаПорядокОплаты.ПорядокОплаты = 1 Или СтрокаПорядокОплаты.ПорядокОплаты = 5 Или СтрокаПорядокОплаты.ПорядокОплаты = 6) и ЗначениеЗаполнено(МассивРезультата_НДС),МассивРезультата_НДС[НомерСтроки], МассивРезультата[НомерСтроки]- СтрокаРезультата.СуммаБезНДС);
	 				//\\АБС ВСТАВКА №44829 КОНЕЦ 	 	
	
					Если (ПредъявленНДСКВычету0 И СтрокаРезультата.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0) 
						Или ((СтрокаРезультата.СуммаБезНДС < 0 Или СтрокаРезультата.НДС < 0) И СтрокаЗадолжености.СчетФактураДата >= '20060101') Тогда
						Если Дата >= '20060530' Тогда
							Если НДСНалоговыйПериод = Неопределено Тогда
								НДСНалоговыйПериод = УчетНДС.ПолучитьУПНДСНалоговыйПериод(Организация, Дата);
							КонецЕсли;
							СтрокаРезультата.ЗаписьДополнительногоЛиста = Истина;
							Если ПредъявленНДСКВычету0 Тогда
								СтрокаРезультата.КорректируемыйПериод = Макс(СтрокаРезультата.ДатаОплаты, СтрокаЗадолжености.ДокументОтгрузки.Дата);
							Иначе 
								СтрокаРезультата.КорректируемыйПериод = СтрокаЗадолжености.СчетФактураДата;
							КонецЕсли;
							Если ?(НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, 
									КонецМесяца(СтрокаРезультата.КорректируемыйПериод) = КонецМесяца(Дата),
									КонецКвартала(СтрокаРезультата.КорректируемыйПериод) = КонецКвартала(Дата)) Тогда
								СтрокаРезультата.ЗаписьДополнительногоЛиста = Ложь;
								СтрокаРезультата.КорректируемыйПериод = '00010101';
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
						
					СтрокаЗадолжености.КВычету_БезНДС = СтрокаЗадолжености.КВычету_БезНДС - СтрокаРезультата.СуммаБезНДС;
					СтрокаЗадолжености.КВычету_НДС = СтрокаЗадолжености.КВычету_НДС - СтрокаРезультата.НДС;
					СтрокаЗадолжености.КВычету_СНДС = СтрокаЗадолжености.КВычету_СНДС - (СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.НДС);
					Если СтрокаПорядокОплаты.ПорядокОплаты = 3 и СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 Тогда
						СтрокаЗадолжености.КВычету_НДС_Часть = СтрокаЗадолжености.КВычету_НДС_Часть - СтрокаРезультата.НДС;
						СтрокаЗадолжености.КВычету_СНДС_Часть = СтрокаЗадолжености.КВычету_СНДС_Часть - (СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.НДС);
					КонецЕсли; 
					
					НомерСтроки = НомерСтроки+1;
				КонецЦикла; 
				
			КонецЦикла; 
			
			
			
		КонецЦикла; 
		
	
	КонецЦикла; 
	
	РаспределенныеОплаты = ТаблицаИсточникаПостроителя.Скопировать();

КонецПроцедуры // РаспределитьОплатыПоДеревуСФ()

// Процедура из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Корректирует сумму, доступную к вычету исходя из положений преходного периода,
// установленных в п.10 статьи 2 федерального закона №119-ФЗ
Процедура ОтработкаПоложенииПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету(Дерево_НДСкВычету)
	
	Если Месяц(дата) > 6 Тогда
		Возврат;
	КонецЕсли;
	
	// Определение списка СФ (с аналитикой) с датой ранее 2006 года, по которым НДС был предъявлен к вычету в текущем месяце
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиНаНачалоГода.СчетФактура КАК СчетФактура,
	|	ОстаткиНаНачалоГода.ВидЦенности,
	|	ОстаткиНаНачалоГода.СтавкаНДС,
	|	ОстаткиНаНачалоГода.СчетУчетаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) > 0
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС_ПринятоКВычетуВТекущемМесяце,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0) > 0
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДС_ПринятоКВычетуВТекущемМесяце,
	|	ВЫБОР
	|		КОГДА ОстаткиНаНачалоГода.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля > 0
	|			ТОГДА ОстаткиНаНачалоГода.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля,
	|	ВЫБОР
	|		КОГДА ОстаткиНаНачалоГода.НДСНаНачалоГода_ЕжемесячнаяДоля > 0
	|			ТОГДА ОстаткиНаНачалоГода.НДСНаНачалоГода_ЕжемесячнаяДоля
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДСНаНачалоГода_ЕжемесячнаяДоля
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСПредъявленныйОстатки.Организация КАК Организация,
	|		НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|		НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
	|		НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
	|		НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|		НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
	|		НДСПредъявленныйОстатки.СуммаБезНДСОстаток / 6 КАК СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля,
	|		НДСПредъявленныйОстатки.НДСОстаток / 6 КАК НДСНаНачалоГода_ЕжемесячнаяДоля
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный.Остатки(
	|			&НачалоГода2006,
	|			Организация = &Организация
	|			    И СчетФактура.Дата < &НачалоГода2006
	|			    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйОстатки) КАК ОстаткиНаНачалоГода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|		&НачалоМесяца,
	|		&КонецМесяца,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура.Дата < &НачалоГода2006
	|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
	|		    И Событие = &ОтбираемоеСобытие) КАК НДСЗаписиКнигиПокупокОбороты
	|		ПО НДСЗаписиКнигиПокупокОбороты.Организация = ОстаткиНаНачалоГода.Организация
	|			И НДСЗаписиКнигиПокупокОбороты.Поставщик = ОстаткиНаНачалоГода.Поставщик
	|			И НДСЗаписиКнигиПокупокОбороты.СчетФактура = ОстаткиНаНачалоГода.СчетФактура
	|			И НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ОстаткиНаНачалоГода.ВидЦенности
	|			И НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = ОстаткиНаНачалоГода.СтавкаНДС
	|			И НДСЗаписиКнигиПокупокОбороты.СчетУчетаНДС = ОстаткиНаНачалоГода.СчетУчетаНДС
	|ГДЕ
	|	(ОстаткиНаНачалоГода.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля > 0
	|			ИЛИ ОстаткиНаНачалоГода.НДСНаНачалоГода_ЕжемесячнаяДоля > 0)
	|ИТОГИ
	|	СУММА(СуммаБезНДС_ПринятоКВычетуВТекущемМесяце),
	|	СУММА(НДС_ПринятоКВычетуВТекущемМесяце),
	|	СУММА(СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля),
	|	СУММА(НДСНаНачалоГода_ЕжемесячнаяДоля)
	|ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("НачалоГода2006", '20060101');
	Запрос.УстановитьПараметр("ОтбираемоеСобытие", Перечисления.СобытияПоНДСПокупки[?(ПредъявленНДСКВычету0,"ПредъявленНДСКВычету0","ПредъявленНДСКВычету")]);
	
	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	
	НаличиеОстатковНаНачалоГода = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаСФ Из Дерево_НДСкВычету.Строки Цикл
		Если СтрокаСФ.СчетФактураДата<'20060101' тогда
			СтрокаОстатковНаНачалоГода_СчетФактура = НаличиеОстатковНаНачалоГода.Строки.НайтиСтроки(Новый Структура("СчетФактура",СтрокаСФ.СчетФактура));
			Если СтрокаОстатковНаНачалоГода_СчетФактура.Количество() = 0 Тогда
				// Остатки по указанному счету-фактуре на начло года не обнаружены.
				// Расчет доли к вычету (ограничение) не производится.
				Продолжить;
			КонецЕсли; 
			СтрокаОстатковНаНачалоГода_СчетФактура = СтрокаОстатковНаНачалоГода_СчетФактура[0];
			
			
			КВычетуПоСФ_СНДС = Макс(0,СтрокаОстатковНаНачалоГода_СчетФактура.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля + СтрокаОстатковНаНачалоГода_СчетФактура.НДСНаНачалоГода_ЕжемесячнаяДоля);
			Если (СтрокаОстатковНаНачалоГода_СчетФактура.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_СчетФактура.НДС_ПринятоКВычетуВТекущемМесяце) > 0 Тогда
				КВычетуПоСФ_СНДС = макс(0,КВычетуПоСФ_СНДС - (СтрокаОстатковНаНачалоГода_СчетФактура.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_СчетФактура.НДС_ПринятоКВычетуВТекущемМесяце));
			КонецЕсли; 
			
			Если КВычетуПоСФ_СНДС = 0 Тогда
				// Доля определялась, но вся сумма, доступная к вычету в текущем месяце, уже принята.
				Продолжить;
			КонецЕсли; 
			
			Для каждого СтрокаПорядокОплаты  Из СтрокаСФ.Строки Цикл
				Если СтрокаПорядокОплаты.ПорядокОплаты = 3 Тогда
					СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 = истина;
					Для каждого СтрокаТаблицы из СтрокаПорядокОплаты.Строки Цикл
						СтрокаОстатковНаНачалоГода_Расшифровка = СтрокаОстатковНаНачалоГода_СчетФактура.Строки.НайтиСтроки(Новый структура("ВидЦенности, СтавкаНДС, СчетУчетаНДС",СтрокаТаблицы.ВидЦенности,СтрокаТаблицы.СтавкаНДС,СтрокаТаблицы.СчетУчетаНДС));
						
						Если СтрокаОстатковНаНачалоГода_Расшифровка.Количество() =0 Тогда
							// Остатки в указанном разрезе аналитики не обнаружены.
							// Расчет доли к вычету (ограничение) не производится.
							СтрокаТаблицы.КВычету_СНДС_Часть = СтрокаТаблицы.КВычету_СНДС;
							СтрокаТаблицы.КВычету_НДС_Часть = СтрокаТаблицы.КВычету_НДС;
							Продолжить;
						Иначе
							СтрокаОстатковНаНачалоГода_Расшифровка = СтрокаОстатковНаНачалоГода_Расшифровка[0];
						КонецЕсли;
						
						СтрокаТаблицы.ОпределенаДоля_119ФЗ_2_10 = истина;
						
						КВычету_СНДС = Макс(0,СтрокаОстатковНаНачалоГода_Расшифровка.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля + СтрокаОстатковНаНачалоГода_Расшифровка.НДСНаНачалоГода_ЕжемесячнаяДоля);
						Если (СтрокаОстатковНаНачалоГода_Расшифровка.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце) > 0 Тогда
							КВычету_СНДС = макс(0,КВычету_СНДС - (СтрокаОстатковНаНачалоГода_Расшифровка.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце));
						КонецЕсли; 
						
						Если КВычету_СНДС = 0 Тогда
							// Доля определялась, но вся сумма, доступная к вычету в текущем месяце, уже принята.
							Продолжить;
						КонецЕсли; 
						
						КВычету_НДС = СтрокаОстатковНаНачалоГода_Расшифровка.НДСНаНачалоГода_ЕжемесячнаяДоля;
						Если (СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце) > 0 Тогда
							КВычету_НДС = макс(0,КВычету_НДС - (СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце));
						КонецЕсли; 
						
						//Расчет суммы без НДС
						Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные Тогда
							// СМР подрядные отрабатываются в соответствии со ст.3 п.2 №119-ФЗ, а не с положениями ст.2 п.10 №119-ФЗ.
							// Суммы к вычету разблокируется поэтапно (1/12) с использование специального документа.
							// Пересчет сумм при формировании записей книги покупок не требуется.
							СтрокаТаблицы.КВычету_СНДС_Часть = СтрокаТаблицы.КВычету_СНДС;
							СтрокаТаблицы.КВычету_НДС_Часть = СтрокаТаблицы.КВычету_НДС;
							
						Иначе
							СтрокаТаблицы.КВычету_СНДС_Часть = Макс(Мин(КВычету_СНДС,СтрокаТаблицы.КВычету_СНДС),0);
							СтрокаТаблицы.КВычету_НДС_Часть = Макс(Мин(КВычету_НДС,СтрокаТаблицы.КВычету_НДС),0);
						КонецЕсли; 
						
					КонецЦикла;
					
					СтрокаПорядокОплаты.КВычету_НДС_Часть		= СтрокаПорядокОплаты.Строки.Итог("КВычету_НДС_Часть");
					СтрокаПорядокОплаты.КВычету_СНДС_Часть		= СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС_Часть");
					
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
 
// Заполнение табличной части "Вычет НДС по приобретенным ценностям"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Заполнение таблиячной части "Вычет НДС с полученных авансов"

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельНДСсАвансовЗаполнить
//
Процедура ЗаполнитьСтроки_НДСсАвансов(ОтменитьПроведение = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОшибкаЗаполнения = Ложь, УдалятьНезаполненные = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
		ОшибкаЗаполнения = Истина;
	КонецЕсли; 
	Если ОшибкаЗаполнения Тогда
		СтрокаСообщения = "Не указаны параметры учетной политики ("+СокрЛП(Организация)+") на " + Формат(Дата, "ДЛФ=DD") + Символы.ПС 
						+ "Табличное поле «Вычет НДС по приобретенным ценностям» не может быть заполнено автоматически.";
		Если Сообщать Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:"+СтрокаСообщения,,Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли;

	ТаблицаРезультатов = НДСсАвансов.ВыгрузитьКолонки();
	
	Если ПредъявленНДСКВычету0 Тогда
		ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансовИНДСПредъявленныйРеализация0(ТаблицаРезультатов);

	Иначе	
		Дерево_НДСсАвансов = ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов();
		Если Дерево_НДСсАвансов.Строки.Количество()=0 Тогда
			// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
			НДСсАвансов.Очистить();
			Возврат;
		КонецЕсли;
		
		СписокСчетовФактур = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
		
		ТаблицаЗачетовАвансов = ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ(СписокСчетовФактур);
		
		РаспределитьЗачетыАвансаПоСФ(Дерево_НДСсАвансов, ТаблицаРезультатов,СписокСчетовФактур,ТаблицаЗачетовАвансов);
	КонецЕсли; 
	
	СтрокиКУдалению = ТаблицаРезультатов.НайтиСтроки(Новый Структура("СуммаБезНДС, НДС, ВалютнаяСумма", 0, 0, 0));
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУдалению);
	КонецЦикла;

	// Удаление строк, в которых есть незаполненные обязательные поля
	Если УдалятьНезаполненные Тогда
		
		ОбязательныеПоля = "Покупатель, ДоговорКонтрагента, СчетФактура, СтавкаНДС";
		Если ПредъявленНДСКВычету0 Тогда
			ОбязательныеПоля = ОбязательныеПоля + ", Состояние";
		КонецЕсли;
		УдалитьНезаполненныеСтроки(ТаблицаРезультатов, ОбязательныеПоля);
		
	КонецЕсли;
	
	//АБС ВСТАВКА Навценя 27.04.2015
	абс_УчетНДС.ЗаполнитьКод_ВычетСПолученныхАвансов(ТаблицаРезультатов);
	//АБС ВСТАВКА КОНЕЦ
	
	НДСсАвансов.Загрузить(ТаблицаРезультатов);
	
КонецПроцедуры // ЗаполнитьСтрокиДокумента()

// Вызывается из процедуры ЗаполнитьСтроки_НДСсАвансов.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0) > НДСсАвансовОстатки.СуммаБезНДСОстаток
	|				ТОГДА 0
	|			ИНАЧЕ НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0)
	|		КОНЕЦ) КАК СуммаБезНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0) > НДСсАвансовОстатки.НДСОстаток
	|				ТОГДА 0
	|			ИНАЧЕ НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0)
	|		КОНЕЦ) КАК НДС,
	|	СУММА(ВЫРАЗИТЬ((ВЫБОР
	|				КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0) > НДСсАвансовОстатки.СуммаБезНДСОстаток
	|					ТОГДА 0
	|				ИНАЧЕ НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0)
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0) > НДСсАвансовОстатки.НДСОстаток
	|					ТОГДА 0
	|				ИНАЧЕ НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0)
	|			КОНЕЦ) * НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток / ВЫБОР
	|				КОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток > 0
	|					ТОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ВалютнаяСуммаСНДС,
	|	НЕОПРЕДЕЛЕНО КАК АвансВосстановленный
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)) КАК НДСсАвансовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|			НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
	|			НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
	|			НДСПредъявленныйРеализация0Остатки.НДСОстаток КАК НДСОстаток,
	|			НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент КАК Покупатель,
	|			НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента КАК ДоговорКонтрагента
	|		ИЗ
	|			РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|					&ДатаГраница,
	|					Организация = &Организация
	|						И ВидЦенности В (&ВидыЦенностейАванс)) КАК НДСПредъявленныйРеализация0Остатки) КАК НДСсАвансовПоРеализации0
	|		ПО НДСсАвансовОстатки.СчетФактура = НДСсАвансовПоРеализации0.СчетФактура
	|			И НДСсАвансовОстатки.СтавкаНДС = НДСсАвансовПоРеализации0.СтавкаНДС
	|			И НДСсАвансовОстатки.Покупатель = НДСсАвансовПоРеализации0.Покупатель
	|			И НДСсАвансовОстатки.ДоговорКонтрагента = НДСсАвансовПоРеализации0.ДоговорКонтрагента
	|ГДЕ
	|	(НДСсАвансовОстатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСсАвансовОстатки.НДСОстаток > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовПоРеализации0.СуммаБезНДСОстаток,
	|	НДСсАвансовПоРеализации0.НДСОстаток,
	|	НДСсАвансовОстатки.АвансВосстановленный
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ ПО
	|	СчетФактура,
	|	АвансВосстановленный";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	// Анализируемые виды ценностей
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностейАванс", ВидыЦенностейАванс);

	Дерево_НДСсАвансов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
// удалить ненужные строки для корректировок реализации
	//Для каждого йСФ Из Дерево_НДСсАвансов.Строки Цикл
	//	Если ТипЗнч(йСФ.СчетФактура)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
	//		йСФ.Строки.Удалить(йСФ.Строки[0]);
	//	КонецЕсли;
	//КонецЦикла;
		
	Если Дерево_НДСсАвансов.Строки.Количество() = 0 тогда 
		Возврат Дерево_НДСсАвансов;
	КонецЕсли;
	
	СписокСчетовФактур = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	СУММА(НДСсАвансовОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСсАвансовОстатки.НДСОстаток) КАК НДС,
	|	СУММА(ВЫРАЗИТЬ(НДСсАвансовОстатки.СуммаБезНДСОстаток * НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток / ВЫБОР
	|				КОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток > 0
	|					ТОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ВалютнаяСуммаСНДС,
	//|	СУММА(ВЫБОР
	//|			КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0) > НДСсАвансовОстатки.СуммаБезНДСОстаток
	//|				ТОГДА 0
	//|			ИНАЧЕ НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0)
	//|		КОНЕЦ) КАК СуммаБезНДС,
	//|	СУММА(ВЫБОР
	//|			КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0) > НДСсАвансовОстатки.НДСОстаток
	//|				ТОГДА 0
	//|			ИНАЧЕ НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0)
	//|		КОНЕЦ) КАК НДС,
	//|	СУММА(ВЫРАЗИТЬ((ВЫБОР
	//|				КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0) > НДСсАвансовОстатки.СуммаБезНДСОстаток
	//|					ТОГДА 0
	//|				ИНАЧЕ НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0)
	//|			КОНЕЦ + ВЫБОР
	//|				КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0) > НДСсАвансовОстатки.НДСОстаток
	//|					ТОГДА 0
	//|				ИНАЧЕ НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0)
	//|			КОНЕЦ) * НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток / ВЫБОР
	//|				КОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток > 0
	//|					ТОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток
	//|				ИНАЧЕ 1
	//|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ВалютнаяСуммаСНДС,
	|	НДСсАвансовОстатки.АвансВосстановленный КАК АвансВосстановленный
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)) КАК НДСсАвансовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|			НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
	|			НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
	|			НДСПредъявленныйРеализация0Остатки.НДСОстаток КАК НДСОстаток,
	|			НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент КАК Покупатель,
	|			НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента КАК ДоговорКонтрагента
	|		ИЗ
	|			РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|					&ДатаГраница,
	|					Организация = &Организация
	|						И ВидЦенности В (&ВидыЦенностейАванс)) КАК НДСПредъявленныйРеализация0Остатки) КАК НДСсАвансовПоРеализации0
	|		ПО НДСсАвансовОстатки.СчетФактура = НДСсАвансовПоРеализации0.СчетФактура
	|			И НДСсАвансовОстатки.СтавкаНДС = НДСсАвансовПоРеализации0.СтавкаНДС
	|			И НДСсАвансовОстатки.Покупатель = НДСсАвансовПоРеализации0.Покупатель
	|			И НДСсАвансовОстатки.ДоговорКонтрагента = НДСсАвансовПоРеализации0.ДоговорКонтрагента
	|ГДЕ
	|	НДСсАвансовОстатки.СчетФактура В(&СписокСчетовФактур)
	|	И НДСсАвансовОстатки.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовПоРеализации0.СуммаБезНДСОстаток,
	|	НДСсАвансовПоРеализации0.НДСОстаток,
	|	НДСсАвансовОстатки.АвансВосстановленный
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ ПО
	|	СчетФактура,
	|	АвансВосстановленный";
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Дерево_Корректировок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	СписокКорректировок = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_Корректировок.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);

// для корректировок реализации выложим погашение НДС с авансов	в разрезе АвансовВосстановленных
	Для каждого йСФ Из Дерево_НДСсАвансов.Строки Цикл
		Если ТипЗнч(йСФ.СчетФактура) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			Продолжить;
		КонецЕсли;
		йКорр = Дерево_Корректировок.Строки.Найти(йСФ.СчетФактура,"СчетФактура");
		Если йКорр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для каждого ййЭлем Из йКорр.Строки Цикл
			йЭлем=ййЭлем.Строки[0];
			Если НЕ ЗначениеЗаполнено(йЭлем.АвансВосстановленный) Тогда
				Продолжить;
			КонецЕсли;
			йСтрока = йСФ.Строки.Добавить();
			Для каждого йРекв Из Дерево_НДСсАвансов.Колонки Цикл
				Если Дерево_Корректировок.Колонки.Найти(йРекв.Имя)=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				йСтрока[йРекв.Имя]=йЭлем[йРекв.Имя];
			КонецЦикла;
			йСтрокаНиже = йСтрока.Строки.Добавить();
			Для каждого йРекв Из Дерево_НДСсАвансов.Колонки Цикл
				йСтрокаНиже[йРекв.Имя]=йСтрока[йРекв.Имя];
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	// Получим остатки по авансам для определения суммы незачтенного аванса.
	Запрос = Новый Запрос;

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор КАК СчетФактура,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ КАК ДокументОплаты,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
	|	ЕСТЬNULL(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент КАК Покупатель,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
	|	СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаРег) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаРег
	|			ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК ВалютнаяСумма
	|ПОМЕСТИТЬ ВТ_1
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
	|ГДЕ
	|	ПОДСТРОКА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СчетОплаты.Код, 1, 2) = ""62""
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период <= &Дата
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация = &Организация
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор В(&СписокСчетовФактур)
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
	|	ЕСТЬNULL(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_1.СчетФактура КАК СчетФактура,
	|	ВТ_1.ДокументОплаты КАК ДокументОплаты,
	|	ВТ_1.ВалютаРасчетов,
	|	ВТ_1.РасчетыВУсловныхЕдиницах,
	|	ВТ_1.Покупатель,
	|	ВТ_1.ДоговорКонтрагента,
	|	ВТ_1.Сумма,
	|	ВТ_1.ВалютнаяСумма
	|ИЗ
	|	ВТ_1 КАК ВТ_1
	|ГДЕ
	|	ВТ_1.ВалютнаяСумма > 0
	|ИТОГИ ПО
	|	СчетФактура,
	|	ДокументОплаты";
	

	Запрос.УстановитьПараметр("Дата", 				КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокКорректировок);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	НепогашенныеАвансыКорректировок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СчетаФактурыКосвенные=Новый Массив;
	
// наложение для корректировок реализации первичных авансов восстановленных	на погашенные суммы авансов
	Для каждого йСФ Из Дерево_НДСсАвансов.Строки Цикл
		Если ТипЗнч(йСФ.СчетФактура) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			Продолжить;
		КонецЕсли;
		йКорр = НепогашенныеАвансыКорректировок.Строки.Найти(йСФ.СчетФактура,"СчетФактура");
		Если йКорр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для каждого ййЭлем Из йКорр.Строки Цикл
			йЭлем=ййЭлем.Строки[0];
			йСтрока = йСФ.Строки.Найти(йЭлем.ДокументОплаты,"АвансВосстановленный");
			йСуммаНДС=Окр(йЭлем.Сумма*йСФ.НДС/(йСФ.НДС+йСФ.СуммаБезНДС),2,РежимОкругления.Окр15как20);
			Если йСтрока = Неопределено Тогда
				йСтрока = йСФ.Строки.Добавить();
				Для каждого йРекв Из НепогашенныеАвансыКорректировок.Колонки Цикл
					Если Дерево_НДСсАвансов.Колонки.Найти(йРекв.Имя)=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					йСтрока[йРекв.Имя]=йЭлем[йРекв.Имя];
				КонецЦикла;
				йСтрока.АвансВосстановленный=йЭлем.ДокументОплаты;
				йСтрока.ВалютнаяСуммаСНДС=йЭлем.ВалютнаяСумма;
				йСтрока.НДС=йСуммаНДС;
				йСтрока.СуммаБезНДС=йЭлем.Сумма-йСуммаНДС;
				йСтрокаНиже = йСтрока.Строки.Добавить();
				Для каждого йРекв Из Дерево_НДСсАвансов.Колонки Цикл
					йСтрокаНиже[йРекв.Имя]=йСтрока[йРекв.Имя];
				КонецЦикла;
				йСтрокаНиже.ВалютаАванса=йСФ.Строки[0].Строки[0].ВалютаАванса;
				йСтрокаНиже.СтавкаНДС=йСФ.Строки[0].Строки[0].СтавкаНДС;
				йСтрокаНиже.СчетФактураДата=йСФ.Строки[0].Строки[0].СчетФактураДата;
			Иначе
				Если (йСтрока.СуммаБезНДС+йСтрока.НДС)=-йЭлем.Сумма Тогда
					йСтрока.СуммаБезНДС=0;
					йСтрока.НДС=0;
					йСтрока.ВалютнаяСуммаСНДС=0;
					йСтрока.Строки[0].СуммаБезНДС=0;
					йСтрока.Строки[0].НДС=0;
					йСтрока.Строки[0].ВалютнаяСуммаСНДС=0;
				Иначе
					йСтрока.СуммаБезНДС=(йЭлем.Сумма-йСуммаНДС)+йСтрока.СуммаБезНДС;
					йСтрока.НДС=йСуммаНДС+йСтрока.НДС;
					йСтрока.ВалютнаяСуммаСНДС=йСтрока.ВалютнаяСуммаСНДС+йЭлем.ВалютнаяСумма;
					йСтрока.Строки[0].СуммаБезНДС=(йЭлем.Сумма-йСуммаНДС)+йСтрока.Строки[0].СуммаБезНДС;
					йСтрока.Строки[0].НДС=йСуммаНДС+йСтрока.Строки[0].НДС;
					йСтрока.Строки[0].ВалютнаяСуммаСНДС=йСтрока.Строки[0].ВалютнаяСуммаСНДС+йЭлем.ВалютнаяСумма;
				КонецЕсли;
			КонецЕсли;
			Если СчетаФактурыКосвенные.Найти(йСтрока.АвансВосстановленный)=Неопределено Тогда
				СчетаФактурыКосвенные.Добавить(йСтрока.АвансВосстановленный);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
// бывают случаи, когда в регистре расчётов сумма аванса больше чем в регистре НДС с авансов
	Дерево_ОтРасчетныхДокументов = Новый ДеревоЗначений;
	
	Дерево_ОтРасчетныхДокументов.Колонки.Добавить("АвансВосстановленный",);
	Дерево_ОтРасчетныхДокументов.Колонки.Добавить("АВ_СуммаБезНДС",);
	Дерево_ОтРасчетныхДокументов.Колонки.Добавить("АВ_НДС",);
	Дерево_ОтРасчетныхДокументов.Колонки.Добавить("АВ_ВалютнаяСуммаСНДС",);
	Дерево_ОтРасчетныхДокументов.Колонки.Добавить("ИндексСчетаФактуры",);
	Дерево_ОтРасчетныхДокументов.Колонки.Добавить("СФ_СуммаБезНДС",);
	Дерево_ОтРасчетныхДокументов.Колонки.Добавить("СФ_НДС",);
	Дерево_ОтРасчетныхДокументов.Колонки.Добавить("СФ_ВалютнаяСуммаСНДС",);
	Дерево_ОтРасчетныхДокументов.Колонки.Добавить("ИндексАвансаВосстановленного",);
	
	йСч0=-1;
	Для каждого йСФ Из Дерево_НДСсАвансов.Строки Цикл
		йСч0=йСч0+1;
		Если ТипЗнч(йСФ.СчетФактура) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			йТранс=Дерево_ОтРасчетныхДокументов.Строки.Найти(йСФ.СчетФактура,"АвансВосстановленный");
			Если йТранс=Неопределено Тогда
				йТранс=Дерево_ОтРасчетныхДокументов.Строки.Добавить();
				йТранс.АвансВосстановленный=йСФ.СчетФактура;
			КонецЕсли;
			йТрансНиже=йТранс.Строки.Найти(йСч0,"ИндексСчетаФактуры");
			Если йТрансНиже=Неопределено Тогда
				йТрансНиже=йТранс.Строки.Добавить();
				йТрансНиже.ИндексСчетаФактуры=йСч0;
				йТрансНиже.ИндексАвансаВосстановленного=0;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		йВсегоБезНДС=0;
		йВсегоНДС=0;
		йВсегоВалюта=0;
		йСФ.Строки.Удалить(йСФ.Строки[0]);
		йСчАванс=-1;
		Для каждого йАванс Из йСФ.Строки Цикл
			//Если ЗначениеЗаполнено(йАванс.АвансВосстановленный) Тогда
				йВсегоБезНДС=йВсегоБезНДС+йАванс.СуммаБезНДС;
				йВсегоНДС=йВсегоНДС+йАванс.НДС;
				йВсегоВалюта=йВсегоВалюта+йАванс.ВалютнаяСуммаСНДС;
			//КонецЕсли;
			йСчАванс=йСчАванс+1;
			Если ЗначениеЗаполнено(йАванс.АвансВосстановленный) Тогда
				йТранс=Дерево_ОтРасчетныхДокументов.Строки.Найти(йАванс.АвансВосстановленный,"АвансВосстановленный");
				Если йТранс=Неопределено Тогда
					йТранс=Дерево_ОтРасчетныхДокументов.Строки.Добавить();
					йТранс.АвансВосстановленный=йАванс.АвансВосстановленный;
				КонецЕсли;
				йТрансНиже=йТранс.Строки.Найти(йСч0,"ИндексСчетаФактуры");
				Если йТрансНиже=Неопределено Тогда
					йТрансНиже=йТранс.Строки.Добавить();
					йТрансНиже.ИндексСчетаФактуры=йСч0;
					йТрансНиже.ИндексАвансаВосстановленного=йСчАванс;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		йСч=0;
		дВсегоБезНДС=йВсегоБезНДС-йСФ.СуммаБезНДС;
		дВсегоНДС=йВсегоНДС-йСФ.НДС;
		дВсегоВалюта=йВсегоВалюта-йСФ.ВалютнаяСуммаСНДС;
		Пока (дВсегоБезНДС > 0 ИЛИ дВсегоНДС > 0 ИЛИ дВсегоВалюта > 0) И (йСч < йСФ.Строки.Количество()) Цикл
			//Если ЗначениеЗаполнено(йСФ.Строки[йСч].АвансВосстановленный) Тогда
				Если дВсегоБезНДС > 0 Тогда
					Если йСФ.Строки[йСч].СуммаБезНДС > дВсегоБезНДС Тогда
						йСФ.Строки[йСч].СуммаБезНДС = йСФ.Строки[йСч].СуммаБезНДС - дВсегоБезНДС;
						йСФ.Строки[йСч].Строки[0].СуммаБезНДС = йСФ.Строки[йСч].Строки[0].СуммаБезНДС - дВсегоБезНДС;
						дВсегоБезНДС = 0;
					Иначе
						дВсегоБезНДС = дВсегоБезНДС - йСФ.Строки[йСч].СуммаБезНДС;
						йСФ.Строки[йСч].СуммаБезНДС = 0;
						йСФ.Строки[йСч].Строки[0].СуммаБезНДС = 0;
					КонецЕсли;
				КонецЕсли;
				Если дВсегоНДС > 0 Тогда
					Если йСФ.Строки[йСч].НДС > дВсегоНДС Тогда
						йСФ.Строки[йСч].НДС = йСФ.Строки[йСч].НДС - дВсегоНДС;
						йСФ.Строки[йСч].Строки[0].НДС = йСФ.Строки[йСч].Строки[0].НДС - дВсегоНДС;
						дВсегоНДС = 0;
					Иначе
						дВсегоНДС = дВсегоНДС - йСФ.Строки[йСч].НДС;
						йСФ.Строки[йСч].НДС = 0;
						йСФ.Строки[йСч].Строки[0].НДС = 0;
					КонецЕсли;
				КонецЕсли;
				Если дВсегоВалюта > 0 Тогда
					Если йСФ.Строки[йСч].ВалютнаяСуммаСНДС > дВсегоВалюта Тогда
						йСФ.Строки[йСч].ВалютнаяСуммаСНДС = йСФ.Строки[йСч].ВалютнаяСуммаСНДС - дВсегоВалюта;
						йСФ.Строки[йСч].Строки[0].ВалютнаяСуммаСНДС = йСФ.Строки[йСч].Строки[0].ВалютнаяСуммаСНДС - дВсегоВалюта;
						дВсегоВалюта = 0;
					Иначе
						дВсегоВалюта = дВсегоВалюта - йСФ.Строки[йСч].ВалютнаяСуммаСНДС;
						йСФ.Строки[йСч].ВалютнаяСуммаСНДС = 0;
						йСФ.Строки[йСч].Строки[0].ВалютнаяСуммаСНДС = 0;
					КонецЕсли;
				КонецЕсли;
			//КонецЕсли;
			йСч=йСч+1;
		КонецЦикла;
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ КАК ДокументОплаты,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
	|	ЕСТЬNULL(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент КАК Покупатель,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаРег) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаРег
	|			ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК ВалютнаяСумма
	|ПОМЕСТИТЬ ВТ_1
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
	|ГДЕ
	|	ПОДСТРОКА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СчетОплаты.Код, 1, 2) = ""62""
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период <= &Дата
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация = &Организация
	|	И (РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ В (&СписокСчетовФактур)
	|			ИЛИ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ В (&СписокСчетовКосвенные))
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
	|	ЕСТЬNULL(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_1.ДокументОплаты КАК ДокументОплаты,
	|	ВТ_1.ВалютаРасчетов,
	|	ВТ_1.РасчетыВУсловныхЕдиницах,
	|	ВТ_1.Покупатель,
	|	ВТ_1.ДоговорКонтрагента,
	|	ВТ_1.Сумма,
	|	ВТ_1.ВалютнаяСумма
	|ИЗ
	|	ВТ_1 КАК ВТ_1
	|ГДЕ
	|	ВТ_1.ВалютнаяСумма > 0
	|ИТОГИ ПО
	|	ДокументОплаты";
	
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("СписокСчетовКосвенные", СчетаФактурыКосвенные);

	НепогашенныеАвансы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Для каждого НепогашенныйАвансПоСФ Из НепогашенныеАвансы.Строки Цикл
		ЗафиксированныйАвансПоСФ = Дерево_ОтРасчетныхДокументов.Строки.Найти(НепогашенныйАвансПоСФ.ДокументОплаты,"АвансВосстановленный");
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда
		    Продолжить;                                               
		КонецЕсли; 
		
		Для каждого СтрокаЗафиксированногоАванса Из НепогашенныйАвансПоСФ.Строки Цикл
			
			ВалютаАванса = ?(СтрокаЗафиксированногоАванса.РасчетыВУсловныхЕдиницах или НЕ ЗначениеЗаполнено(СтрокаЗафиксированногоАванса.ВалютаРасчетов),мВалютаРегламентированногоУчета,СтрокаЗафиксированногоАванса.ВалютаРасчетов);
			
			Отбор = Новый Структура("Покупатель,ДоговорКонтрагента, ВалютаАванса",СтрокаЗафиксированногоАванса.Покупатель, СтрокаЗафиксированногоАванса.ДоговорКонтрагента, ВалютаАванса);
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			МассивВалютнаяСуммаСНДС = новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			ВалютнаяСуммаСНДС = 0;
			Для каждого ЧастьЗафиксированногоАванса Из ЗафиксированныйАвансПоСФ.Строки Цикл
				СтрокиАвансаПоОтбору = Дерево_НДСсАвансов.Строки[ЧастьЗафиксированногоАванса.ИндексСчетаФактуры].Строки[ЧастьЗафиксированногоАванса.ИндексАвансаВосстановленного].Строки.НайтиСтроки(Отбор);
			//Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда
			//	Продолжить;
			//КонецЕсли; 
				Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
					МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
					МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
					МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
				
					СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
					СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
					ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
				КонецЦикла; 
			КонецЦикла;
			
			Если ВалютнаяСуммаСНДС = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаЗафиксированногоАванса.ВалютаРасчетов = мВалютаРегламентированногоУчета или 
				НЕ ЗначениеЗаполнено(СтрокаЗафиксированногоАванса.ВалютаРасчетов) Тогда
				// Сопоставление по рублевой сумме
				ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
				СуммаСНДС = Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС));
				Если СуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				// Сопоставление по валютной сумме
				СуммаСНДС = Окр((СуммаБезНДС+СуммаНДС)*Мин(СтрокаЗафиксированногоАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС)/ВалютнаяСуммаСНДС,2);
				ВалютнаяСуммаСНДС = Мин(СтрокаЗафиксированногоАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС);
				
				Если ВалютнаяСуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
			КонецЕсли; 
			
			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если ВалютнаяСуммаСНДС >0 Тогда
				МассивВалютнаяСуммаСНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
			КонецЕсли; 
			
			Счетчик =0;
			Для каждого ЧастьЗафиксированногоАванса Из ЗафиксированныйАвансПоСФ.Строки Цикл
				СтрокиАвансаПоОтбору = Дерево_НДСсАвансов.Строки[ЧастьЗафиксированногоАванса.ИндексСчетаФактуры].Строки[ЧастьЗафиксированногоАванса.ИндексАвансаВосстановленного].Строки.НайтиСтроки(Отбор);
				Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
					СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
					СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
					СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
				
					Счетчик = Счетчик +1;
				КонецЦикла; 
			КонецЦикла;
		КонецЦикла; 
	КонецЦикла;
	//Для каждого НепогашенныйАвансПоСФ Из НепогашенныеАвансы.Строки Цикл
	//	ЗафиксированныйАвансПоСФ = Дерево_НДСсАвансов.Строки.Найти(НепогашенныйАвансПоСФ.ДокументОплаты,"СчетФактура");
	//	Если ЗафиксированныйАвансПоСФ = Неопределено Тогда
	//	    Продолжить;                                               
	//	КонецЕсли; 
	//	
	//	Для каждого СтрокаЗафиксированногоАванса Из НепогашенныйАвансПоСФ.Строки Цикл
	//		
	//		ВалютаАванса = ?(СтрокаЗафиксированногоАванса.РасчетыВУсловныхЕдиницах или НЕ ЗначениеЗаполнено(СтрокаЗафиксированногоАванса.ВалютаРасчетов),мВалютаРегламентированногоУчета,СтрокаЗафиксированногоАванса.ВалютаРасчетов);
	//		
	//		Отбор = Новый Структура("Покупатель,ДоговорКонтрагента, ВалютаАванса",СтрокаЗафиксированногоАванса.Покупатель, СтрокаЗафиксированногоАванса.ДоговорКонтрагента, ВалютаАванса);
	//		
	//		СтрокиАвансаПоОтбору = ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
	//		Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		
	//		МассивСуммаБезНДС = новый Массив();
	//		МассивСуммаНДС = новый Массив();
	//		МассивВалютнаяСуммаСНДС = новый Массив();
	//		
	//		СуммаБезНДС = 0;
	//		СуммаНДС = 0;
	//		ВалютнаяСуммаСНДС = 0;
	//		Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
	//			МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
	//			МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
	//			МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
	//			
	//			СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
	//			СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
	//			ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
	//		КонецЦикла; 
	//		
	//		Если ВалютнаяСуммаСНДС = 0 Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		
	//		Если СтрокаЗафиксированногоАванса.ВалютаРасчетов = мВалютаРегламентированногоУчета или 
	//			НЕ ЗначениеЗаполнено(СтрокаЗафиксированногоАванса.ВалютаРасчетов) Тогда
	//			// Сопоставление по рублевой сумме
	//			ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
	//			СуммаСНДС = Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС));
	//			Если СуммаСНДС = 0 Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			
	//		Иначе
	//			// Сопоставление по валютной сумме
	//			СуммаСНДС = Окр((СуммаБезНДС+СуммаНДС)*Мин(СтрокаЗафиксированногоАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС)/ВалютнаяСуммаСНДС,2);
	//			ВалютнаяСуммаСНДС = Мин(СтрокаЗафиксированногоАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС);
	//			
	//			Если ВалютнаяСуммаСНДС = 0 Тогда
	//				Продолжить;
	//			КонецЕсли; 
	//			
	//		КонецЕсли; 
	//		
	//		СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
	//		СуммаНДС = СуммаСНДС - СуммаБезНДС;
	//		
	//		Если СуммаБезНДС>0 Тогда
	//			МассивСуммаБезНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
	//		КонецЕсли;
	//		
	//		Если СуммаНДС>0 Тогда
	//			МассивСуммаНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
	//		КонецЕсли; 
	//		
	//		Если ВалютнаяСуммаСНДС >0 Тогда
	//			МассивВалютнаяСуммаСНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
	//		КонецЕсли; 
	//		
	//		Счетчик =0;
	//		Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
	//			СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
	//			СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
	//			СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
	//			
	//			
	//			Счетчик = Счетчик +1;
	//		КонецЦикла; 
	//	КонецЦикла; 
	//КонецЦикла;
	
// удалить нулевые строки в дереве
	КУдалениюСФ = Новый Массив;
	КУдалениюАВ = Новый Массив;
	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаПоСФ Из Дерево_НДСсАвансов.Строки Цикл
	 	КУдалениюАВ.Очистить();
		Для каждого СтрокаПоАвансу Из СтрокаПоСФ.Строки Цикл
			СтрокиКУдалению.Очистить();
			Для каждого СтрокаАванса Из СтрокаПоАвансу.Строки Цикл
				Если СтрокаАванса.СуммаБезНДС = 0 и СтрокаАванса.НДС = 0  и СтрокаАванса.ВалютнаяСуммаСНДС = 0 Тогда
					СтрокиКУдалению.Добавить(СтрокаАванса);
				КонецЕсли; 
			КонецЦикла; 
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				СтрокаПоАвансу.Строки.Удалить(СтрокаКУдалению);
			КонецЦикла; 
			Если СтрокаПоАвансу.Строки.Количество() = 0 тогда
				КУдалениюАВ.Добавить(СтрокаПоАвансу);
			Иначе
				СтрокаПоАвансу.СуммаБезНДС = СтрокаПоАвансу.Строки.Итог("СуммаБезНДС");
				СтрокаПоАвансу.НДС = СтрокаПоАвансу.Строки.Итог("НДС");
				СтрокаПоАвансу.ВалютнаяСуммаСНДС = СтрокаПоАвансу.Строки.Итог("ВалютнаяСуммаСНДС");
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаКУдалению Из КУдалениюАВ Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		Если СтрокаПоСФ.Строки.Количество() = 0 тогда
			КУдалениюСФ.Добавить(СтрокаПоСФ);
		Иначе
			СтрокаПоСФ.СуммаБезНДС = СтрокаПоСФ.Строки.Итог("СуммаБезНДС");
			СтрокаПоСФ.НДС = СтрокаПоСФ.Строки.Итог("НДС");
			СтрокаПоСФ.ВалютнаяСуммаСНДС = СтрокаПоСФ.Строки.Итог("ВалютнаяСуммаСНДС");
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению Из КУдалениюСФ Цикл
		Дерево_НДСсАвансов.Строки.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
// сдвинуть нижний уровень в дереве выше
	Для каждого СтрокаПоСФ Из Дерево_НДСсАвансов.Строки Цикл
	 	КУдалениюАВ.Очистить();
		АвансыМакс=СтрокаПоСФ.Строки.Количество();
		Для йСч=0 По АвансыМакс-1 Цикл
			КУдалениюАВ.Добавить(СтрокаПоСФ.Строки[йСч]);
			Для каждого СтрокаАванса Из СтрокаПоСФ.Строки[йСч].Строки Цикл
				йСтрока=СтрокаПоСФ.Строки.Добавить();
				Для каждого йРекв Из Дерево_НДСсАвансов.Колонки Цикл
					йСтрока[йРекв.Имя]=СтрокаАванса[йРекв.Имя];
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		Для каждого СтрокаКУдалению Из КУдалениюАВ Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЦикла;
		
	Возврат Дерево_НДСсАвансов;
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

// Вызывается из процедуры ЗаполнитьСтроки_НДСсАвансов.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленный
Функция  ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансовИНДСПредъявленныйРеализация0(ТаблицаРезультатов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.Состояние,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
	|	СУММА(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСПредъявленныйРеализация0Остатки.НДСОстаток) КАК НДС,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент КАК Покупатель,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Дата
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|		&ДатаГраница,
	|		Организация = &Организация
	//++ Заявка № 10655 Логинчев А.С.
	|			И (НЕ СчетУчетаНДС В (&МассивИсключенийСчета19))
	//-- Заявка № 10655 Логинчев А.С.
	|		    И ВидЦенности В (&ВидыЦенностейАванс)
	|		    И состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0Остатки.Состояние,
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата
	|ИТОГИ ПО
	|	СчетФактура";
    //++ Заявка № 10655 Логинчев А.С.
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.БП"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.НЕ"));
	Запрос.УстановитьПараметр("МассивИсключенийСчета19",МассивСчетов);
	//-- Заявка № 10655 Логинчев А.С.

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	// Анализируемые виды ценностей
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностейАванс", ВидыЦенностейАванс);
	
	// Отрабатываемые состояния (ожидание 0% не отрабатываем)
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния", ОтрабатываемыеСостояния);

	АвансыНДСПредъявленныйРеализация0 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Если АвансыНДСПредъявленныйРеализация0.Строки.Количество() = 0 Тогда
	    Возврат ТаблицаРезультатов;
	КонецЕсли; 
	
	СписокСчетовФактур = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива( АвансыНДСПредъявленныйРеализация0.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	СУММА(НДСсАвансовОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСсАвансовОстатки.НДСОстаток) КАК НДС,
	|	СУММА(НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток) КАК ВалютнаяСуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)) КАК НДСсАвансовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ВалютаАванса
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура.Дата
	|ИТОГИ ПО
	|	СчетФактура";
	
	ЗафиксированныеАвансы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ЗафиксированныеАвансы.Строки.Количество() = 0 тогда
		Возврат ТаблицаРезультатов;
	КонецЕсли;
	
	Для каждого СтрокаСФ Из АвансыНДСПредъявленныйРеализация0.Строки Цикл
		
		ЗафиксированныйАвансПоСФ = ЗафиксированныеАвансы.Строки.Найти(СтрокаСФ.СчетФактура,"СчетФактура");
		
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда
		    Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаЗафиксированногоАванса Из ЗафиксированныйАвансПоСФ.Строки Цикл
			
			Отбор = Новый Структура("Покупатель,ДоговорКонтрагента,СтавкаНДС",СтрокаЗафиксированногоАванса.Покупатель, СтрокаЗафиксированногоАванса.ДоговорКонтрагента, СтрокаЗафиксированногоАванса.СтавкаНДС);
			
			СтрокиАванса0 = СтрокаСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАванса0.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			МассивСуммаСНДС = новый Массив();
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			Для каждого СтрокаАванса0 Из СтрокиАванса0 Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАванса0.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАванса0.НДС);
				МассивСуммаСНДС.Добавить(СтрокаАванса0.СуммаБезНДС+СтрокаАванса0.НДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАванса0.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАванса0.НДС;
			КонецЦикла; 
			
			СуммаБезНДС = Мин(СтрокаЗафиксированногоАванса.СуммаБезНДС, СуммаБезНДС);
			СуммаНДС = Мин(СтрокаЗафиксированногоАванса.НДС, СуммаНДС);
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли; 
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если СуммаБезНДС + СуммаНДС >0 Тогда
				ВалютнаяСуммаСНДС = Окр(СтрокаЗафиксированногоАванса.ВалютнаяСуммаСНДС * (СуммаБезНДС+СуммаНДС)/(СтрокаЗафиксированногоАванса.СуммаБезНДС+СтрокаЗафиксированногоАванса.НДС),2);
			Иначе 
				ВалютнаяСуммаСНДС = 0;
			КонецЕсли; 
			
			
			Если ВалютнаяСуммаСНДС>0 Тогда
				МассивСуммаСНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(ВалютнаяСуммаСНДС,МассивСуммаСНДС);
			КонецЕсли;
			
			Счетчик =0;
			Для каждого СтрокаАванса0 Из СтрокиАванса0 Цикл
			    СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура		= СтрокаАванса0.СчетФактура;
				СтрокаРезультата.Покупатель			= СтрокаАванса0.Покупатель;
				СтрокаРезультата.ДоговорКонтрагента	= СтрокаАванса0.ДоговорКонтрагента;
				СтрокаРезультата.СтавкаНДС			= СтрокаАванса0.СтавкаНДС;
				СтрокаРезультата.ДокументОтгрузки	= СтрокаАванса0.ДокументОтгрузки;
				СтрокаРезультата.Состояние			= СтрокаАванса0.Состояние;
				СтрокаРезультата.ВалютаДокумента	= СтрокаЗафиксированногоАванса.ВалютаАванса;
				
				//Если СтрокаРезультата.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
				СтрокаРезультата.ДатаСобытия	= СтрокаАванса0.ДокументОтгрузкиДата;
				//Иначе
				//	СтрокаРезультата.ДатаСобытия	= СтрокаАванса0.ДокументОтгрузкиДата;
				//КонецЕсли; 
				
				СтрокаРезультата.СуммаБезНДС		= ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаРезультата.НДС				= ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				СтрокаРезультата.ВалютнаяСумма		= ?(ВалютнаяСуммаСНДС>0,МассивСуммаСНДС[Счетчик],0);
				
				СтрокаАванса0.СуммаБезНДС = СтрокаАванса0.СуммаБезНДС - СтрокаРезультата.СуммаБезНДС;
				СтрокаАванса0.НДС = СтрокаАванса0.НДС - СтрокаРезультата.НДС;
				
			    Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат ТаблицаРезультатов;
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

// Процедура вызывается из ЗаполнитьСтроки_НДСсАвансов.
// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
Функция Удалить_ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ(СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ КАК ДокументОплаты,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Контрагент КАК Покупатель,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента,
	|	СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегРасход) КАК Сумма,
	|	СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовРасход) КАК ВалютнаяСумма,
	|	ЕСТЬNULL(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Период КАК Дата
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(
	|			,
	|			&ДатаГраница,
	|			День,
	|			Организация = &Организация
	|				И Документ В (&СписокСчетовФактур)) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Контрагент,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ,
	|	ЕСТЬNULL(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	ДокументОплаты";
	 
	Запрос.УстановитьПараметр("Дата", 				КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	 
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	

КонецФункции // ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ()

// Процедура вызывается из ЗаполнитьСтроки_НДСсАвансов.
// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
Функция ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ(СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Период, ДЕНЬ) КАК ДатаСобытия,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ КАК ДокументОплаты,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Контрагент КАК Покупатель,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегРасход КАК Сумма,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовРасход КАК ВалютнаяСумма
	|ПОМЕСТИТЬ ВТРасчетыПоРеализации
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(
	|			,
	|			&ДатаГраница,
	|			Регистратор,
	|			Организация = &Организация
	|				И Документ В (&СписокСчетовФактур)) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Покупатель,
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоРеализацииОрганизации.Регистратор КАК Регистратор,
	|	РасчетыПоРеализацииОрганизации.Контрагент КАК Контрагент,
	|	РасчетыПоРеализацииОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	МИНИМУМ(РасчетыПоРеализацииОрганизации.КоррСчет) КАК КоррСчет
	|ПОМЕСТИТЬ ВТТаблицаКорСчетов
	|ИЗ
	|	РегистрСведений.РасчетыПоРеализацииОрганизации КАК РасчетыПоРеализацииОрганизации
	|ГДЕ
	|	РасчетыПоРеализацииОрганизации.Организация = &Организация
	|	И (РасчетыПоРеализацииОрганизации.Регистратор, РасчетыПоРеализацииОрганизации.Контрагент, РасчетыПоРеализацииОрганизации.ДоговорКонтрагента) В
	|			(ВЫБРАТЬ
	|				ВТРасчетыПоРеализации.Регистратор,
	|				ВТРасчетыПоРеализации.Покупатель,
	|				ВТРасчетыПоРеализации.ДоговорКонтрагента
	|			ИЗ
	|				ВТРасчетыПоРеализации КАК ВТРасчетыПоРеализации)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоРеализацииОрганизации.Регистратор,
	|	РасчетыПоРеализацииОрганизации.Контрагент,
	|	РасчетыПоРеализацииОрганизации.ДоговорКонтрагента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Контрагент,
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасчетыПоРеализации.ДокументОплаты КАК ДокументОплаты,
	|	ВТРасчетыПоРеализации.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
	|	ВТРасчетыПоРеализации.Покупатель,
	|	ВТРасчетыПоРеализации.ДоговорКонтрагента,
	|	СУММА(ВТРасчетыПоРеализации.Сумма) КАК Сумма,
	|	СУММА(ВТРасчетыПоРеализации.ВалютнаяСумма) КАК ВалютнаяСумма,
	|	ВТРасчетыПоРеализации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВТРасчетыПоРеализации.ДатаСобытия КАК Дата,
	|	ЛОЖЬ КАК ДоговорСКомиссионером,
	|	ВЫБОР
	|		КОГДА ВТТаблицаКорСчетов.КоррСчет В (&СчетаУчетаДенежныхСредствОрганизации)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозвратАвансовПолученных
	|ИЗ
	|	ВТРасчетыПоРеализации КАК ВТРасчетыПоРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаКорСчетов КАК ВТТаблицаКорСчетов
	|		ПО ВТРасчетыПоРеализации.Регистратор = ВТТаблицаКорСчетов.Регистратор
	|			И ВТРасчетыПоРеализации.Покупатель = ВТТаблицаКорСчетов.Контрагент
	|			И ВТРасчетыПоРеализации.ДоговорКонтрагента = ВТТаблицаКорСчетов.ДоговорКонтрагента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВТТаблицаКорСчетов.КоррСчет В (&СчетаУчетаДенежныхСредствОрганизации)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВТРасчетыПоРеализации.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	ВТРасчетыПоРеализации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
	|	ВТРасчетыПоРеализации.ДоговорКонтрагента,
	|	ВТРасчетыПоРеализации.Покупатель,
	|	ВТРасчетыПоРеализации.ДокументОплаты,
	|	ВТРасчетыПоРеализации.ДатаСобытия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
	|	&ВалютаРегламентированногоУчета,
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент,
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Сумма,
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Сумма,
	|	ЛОЖЬ,
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.ДенежныеСредства КАК ОтчетКомиссионераОПродажахДенежныеСредства
	|ГДЕ
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата >= &НачалоКвартала
	|	И ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата <= &Дата
	|	И ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Организация = &Организация
	|	И ОтчетКомиссионераОПродажахДенежныеСредства.ВидОтчетаПоПлатежам = ЗНАЧЕНИЕ(Перечисление.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТРасчетыПоРеализации.ДатаСобытия УБЫВ
	|ИТОГИ ПО
	|	ДокументОплаты";
	 	 
	Запрос.УстановитьПараметр("Дата", 				КонецДня(Дата));
	Запрос.УстановитьПараметр("НачалоКвартала", 	НачалоКвартала(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	СчетаУчетаДенежныхСредствОрганизации = Новый Массив();
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
	
	Запрос.УстановитьПараметр("СчетаУчетаДенежныхСредствОрганизации", СчетаУчетаДенежныхСредствОрганизации);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	

КонецФункции // ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ()

// Процедура осуществляет автоматическое распределение фактов зачета авансов
// на документы отгрузки, оформленные в рамках соответствующего договора
//
Процедура РаспределитьЗачетыАвансаПоСФ(Дерево_НДСсАвансов, ТаблицаРезультатов,СписокСчетовФактур,ТаблицаЗачетовАвансов)
	
	Для каждого ПогашенныйАвансПоСФ Из ТаблицаЗачетовАвансов.Строки Цикл
		ЗафиксированныйАвансПоСФ = Дерево_НДСсАвансов.Строки.Найти(ПогашенныйАвансПоСФ.ДокументОплаты,"СчетФактура");
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда
		    Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаПогашенияАванса Из ПогашенныйАвансПоСФ.Строки Цикл
			
			ВалютаАванса = ?(СтрокаПогашенияАванса.РасчетыВУсловныхЕдиницах или НЕ ЗначениеЗаполнено(СтрокаПогашенияАванса.ВалютаРасчетов),мВалютаРегламентированногоУчета,СтрокаПогашенияАванса.ВалютаРасчетов);
			
			Отбор = Новый Структура("Покупатель,ДоговорКонтрагента, ВалютаАванса",СтрокаПогашенияАванса.Покупатель, СтрокаПогашенияАванса.ДоговорКонтрагента, ВалютаАванса);
			
			СтрокиАвансаПоОтбору = ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			МассивВалютнаяСуммаСНДС = новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			ВалютнаяСуммаСНДС = 0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
				МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
				ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
			КонецЦикла; 
			
			Если ВалютаАванса = мВалютаРегламентированногоУчета Тогда
				Если СуммаБезНДС+СуммаНДС = 0 тогда
					Продолжить;
				КонецЕсли; 
				// Сопоставление по рублевой сумме
				ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
				СуммаСНДС = Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС+СуммаНДС));
				Если СуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ВалютнаяСуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли; 
				// Сопоставление по валютной сумме
				СуммаСНДС = Окр((СуммаБезНДС+СуммаНДС)*Мин(СтрокаПогашенияАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС)/ВалютнаяСуммаСНДС,2);
				ВалютнаяСуммаСНДС = Мин(СтрокаПогашенияАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС);
				
				Если ВалютнаяСуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
			КонецЕсли; 
			
			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если ВалютнаяСуммаСНДС >0 Тогда
				МассивВалютнаяСуммаСНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
			КонецЕсли; 
			
			Счетчик =0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				Если ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0) = 0 и ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0) = 0 и ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0)= 0  Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура	= СтрокаАвансаПоОтбору.СчетФактура;
				СтрокаРезультата.АвансВосстановленный	= СтрокаАвансаПоОтбору.АвансВосстановленный;
								
				СтрокаРезультата.Покупатель		= СтрокаАвансаПоОтбору.Покупатель;
				СтрокаРезультата.ДоговорКонтрагента	= СтрокаАвансаПоОтбору.ДоговорКонтрагента;
				СтрокаРезультата.ВалютаДокумента	= СтрокаАвансаПоОтбору.ВалютаАванса;
				СтрокаРезультата.СтавкаНДС		= СтрокаАвансаПоОтбору.СтавкаНДС;
                СтрокаРезультата.ВозвратАвансовПолученных = СтрокаПогашенияАванса.ВозвратАвансовПолученных;
				СтрокаРезультата.ДатаСобытия	= СтрокаПогашенияАванса.Дата;
				
				СтрокаРезультата.СуммаБезНДС	= ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаРезультата.НДС			=  ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				СтрокаРезультата.ВалютнаяСумма	=  ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
				
				СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
				
				Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
 	КУдалениюСФ = новый массив();
	Для каждого СтрокаПоСФ Из Дерево_НДСсАвансов.Строки Цикл
		СтрокиКУдалению = Новый Массив();
		Для каждого СтрокаАванса Из СтрокаПоСФ.Строки Цикл
			Если СтрокаАванса.СуммаБезНДС = 0 и СтрокаАванса.НДС = 0  и СтрокаАванса.ВалютнаяСуммаСНДС = 0 Тогда
				продолжить;;
			КонецЕсли; 
			
			СтрокаРезультата = ТаблицаРезультатов.Добавить();
			СтрокаРезультата.СчетФактура	= СтрокаАванса.СчетФактура;
			СтрокаРезультата.АвансВосстановленный	= СтрокаАванса.АвансВосстановленный;
			
			СтрокаРезультата.Покупатель		= СтрокаАванса.Покупатель;
			СтрокаРезультата.ДоговорКонтрагента	= СтрокаАванса.ДоговорКонтрагента;
			СтрокаРезультата.ВалютаДокумента	= СтрокаАванса.ВалютаАванса;
			СтрокаРезультата.СтавкаНДС		= СтрокаАванса.СтавкаНДС;
			
			СтрокаРезультата.СуммаБезНДС	= СтрокаАванса.СуммаБезНДС;
			СтрокаРезультата.НДС			= СтрокаАванса.НДС;
			СтрокаРезультата.ВалютнаяСумма	= СтрокаАванса.ВалютнаяСуммаСНДС;
			
		КонецЦикла; 
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		Если СтрокаПоСФ.Строки.Количество() = 0 тогда
			КУдалениюСФ.Добавить(СтрокаПоСФ);
		Иначе
			СтрокаПоСФ.СуммаБезНДС = СтрокаПоСФ.Строки.Итог("СуммаБезНДС");
			СтрокаПоСФ.НДС = СтрокаПоСФ.Строки.Итог("НДС");
			СтрокаПоСФ.ВалютнаяСуммаСНДС = СтрокаПоСФ.Строки.Итог("ВалютнаяСуммаСНДС");
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Заполнение табличной части "Вычет НДС с полученных авансов"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Заполнение табличной части "Вычет НДС с выданных авансов"

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельНДСсАвансовЗаполнить
//
Процедура ЗаполнитьСтроки_НДСсАвансовВыданных(ОтменитьПроведение = Ложь, УдалятьНезаполненные = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = НДСсАвансовВыданных.ВыгрузитьКолонки();
	
	ЗаполнитьНДССАвансовВыданныхПоДаннымРегистраНДСПредъявленный(ТаблицаРезультатов);
	
	// Удаление строк, в которых есть незаполненные обязательные поля
	Если УдалятьНезаполненные Тогда
		УдалитьНезаполненныеСтроки(ТаблицаРезультатов, "Поставщик, ДоговорКонтрагента, СчетФактура, СтавкаНДС");
	КонецЕсли;
	
	НДСсАвансовВыданных.Загрузить(ТаблицаРезультатов);
	
КонецПроцедуры // ЗаполнитьСтрокиДокумента()

Процедура ЗаполнитьНДССАвансовВыданныхПоДаннымРегистраНДСПредъявленный(ТаблицаРезультатов)
	
	Запрос = Новый Запрос;
	//++ Заявка № 10655 Логинчев А.С.
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.БП"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.НЕ"));
	Запрос.УстановитьПараметр("МассивИсключенийСчета19",МассивСчетов);
	//-- Заявка № 10655 Логинчев А.С.
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСПредъявленныйОстатки.СчетФактура,
	               |	НДСПредъявленныйОстатки.СтавкаНДС,
	               |	НДСПредъявленныйОстатки.Поставщик,
	               |	НДСПредъявленныйОстатки.ДоговорКонтрагента,
				   |	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
	               |	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	               |	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
	               |ИЗ
	               |	РегистрНакопления.НДСПредъявленный.Остатки(
	               |			&ДатаГраница,
	               |			Организация = &Организация
				   	//++ Заявка № 10655 Логинчев А.С.
				   |				И (НЕ СчетУчетаНДС В (&МассивИсключенийСчета19))
					//-- Заявка № 10655 Логинчев А.С.
	               |				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСПредъявленныйОстатки";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаРезультатов);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение табличной части "Вычет НДС с авансов выданных"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Заполнение табличной части "Вычет НДС по налоговому агенту"

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельВычетПоПриобретеннымЦенностямЗаполнить
//
Процедура ЗаполнитьСтроки_ВычетНДСПоНалоговомуАгенту(ОтменитьПроведение = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОшибкаЗаполнения = Ложь, УдалятьНезаполненные = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПредъявленНДСКВычету0 Тогда
		Дерево_НДСкВычету = ЗаполнитьНДСПоНалоговомуАгентуКВычетуПоДаннымРегистраНДСПредъявленный();
	Иначе
		Дерево_НДСкВычету = ЗаполнитьНДСПоНалоговомуАгентуКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0();
	КонецЕсли;
	
	Если Дерево_НДСкВычету.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		ВычетНДСПоНалоговомуАгенту.Очистить();
		Возврат;
	КонецЕсли;
	
	СписокСчетовФактур = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСкВычету.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	// Определить оплаты поступления
	РаспределенныеОплаты = ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур);
	
	ТаблицаРезультатов = ВычетНДСПоНалоговомуАгенту.ВыгрузитьКолонки();
	
	РаспределитьОплатыПоДеревуСФ(Дерево_НДСкВычету, ТаблицаРезультатов, СписокСчетовФактур, РаспределенныеОплаты,);
	
	ИсключитьНДСНалоговогоАгентаНеоплаченныйВБюджет(ТаблицаРезультатов);
	
	ПолучитьДанныеОДокументахОплатыАгентскогоНДСВБюджет(ТаблицаРезультатов);
	
	ОтфактурованныеВычеты = ОпределитьНаличиеСчетовФактурНалоговогоАгента(ТаблицаРезультатов);
	
	СтруктураОтбора = Новый Структура("ДокументОплаты, ДоговорКонтрагента");
	
	ВычетНДСПоНалоговомуАгенту.Очистить();
	Для Каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
		МассивСчетовФактур = ОтфактурованныеВычеты.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСчетовФактур.Количество() <> 0 Тогда
			
			НоваяСтрока = ВычетНДСПоНалоговомуАгенту.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если МассивСчетовФактур[0].Исправление Тогда
				НоваяСтрока.ИсправленныйСчетФактура = МассивСчетовФактур[0].Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	// Удаление строк, в которых есть незаполненные обязательные поля
	Если УдалятьНезаполненные Тогда
		УдалитьНезаполненныеСтроки(ТаблицаРезультатов, "ВидЦенности, СчетФактура, СтавкаНДС, Поставщик, ДоговорКонтрагента, ДокументОплаты, ДатаОплаты");
	КонецЕсли;
	
	УдалитьСтрокиНеоплаченныеКомандировачныеИПредставительские(ТаблицаРезультатов); //АБС-Пр2 9182  
	//АБС ВСТАВКА №37325 НАЧАЛО «5 февраля 2014 г.», Пополитов	
	абс_УдалитьСтрокиНеоплаченныеНДСдоРеорганизации(ТаблицаРезультатов);
	//\\АБС ВСТАВКА №37325 КОНЕЦ	
	
	//АБС ВСТАВКА №46009 НАЧАЛО «29 августа 2014 г.», Пополитов
 	абс_ЗаполнитьДокументПодтверждающийУплатуНалога(ТаблицаРезультатов);
 	//\\АБС ВСТАВКА №46009 КОНЕЦ    	
// +++ввв 05.09.2016 г.	
	Для Каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		Если ПустаяСтрока(СтрокаТаблицы.КодВидаОперации) Тогда
			СтрокаТаблицы.КодВидаОперации="06";
		КонецЕсли;
	КонецЦикла;
// ---ввв 05.09.2016 г.
	ВычетНДСПоНалоговомуАгенту.Загрузить(ТаблицаРезультатов);
	
КонецПроцедуры

//АБС ВСТАВКА №46009 НАЧАЛО «29 августа 2014 г.», Пополитов
Процедура абс_ЗаполнитьДокументПодтверждающийУплатуНалога(ТаблицаРезультатов) Экспорт
	
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл			
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы.НомерСтроки = НомерСтроки;    			
	КонецЦикла; 		
	
	Если ТаблицаРезультатов.Колонки.Найти("абс_ДокументПодтверждающийУплатуНалога") = Неопределено Тогда
		ТаблицаРезультатов.Колонки.Добавить("абс_ДокументПодтверждающийУплатуНалога", Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеИсходящее"));	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("КонецКвартала",Новый Граница(КонецКвартала(Дата),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ТаблицаРезультатов",ТаблицаРезультатов);
// {{KM WARE Семенов И.С. Заявка №  15.07.2015 начало
// тормозило иначе
	Запрос.УстановитьПараметр("Сч6832",ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.32"));
	Запрос.УстановитьПараметр("Сч51",ПланыСчетов.Хозрасчетный.НайтиПоКоду("51"));
	мСуб6832=новый массив;
	мСуб6832.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	мСуб6832.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	мСуб6832.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные);
	Запрос.УстановитьПараметр("мСуб6832",мСуб6832);
// }}KM WARE Семенов И.С. Заявка № 15.07.2015 окончание
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТЗ.НомерСтроки,
	               |	ТЗ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ТЗ.ДокументОплаты КАК ДокументОплаты
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	&ТаблицаРезультатов КАК ТЗ
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДоговорКонтрагента,
	               |	ДокументОплаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ.НомерСтроки,
	               |	ВТ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВТ.ДокументОплаты КАК ДокументОплаты,
	               |	МАКСИМУМ(СчетФактура.Ссылка) КАК СчетФактура
	               |ПОМЕСТИТЬ СФ
	               |ИЗ
	               |	ВТ КАК ВТ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактура
	               |		ПО ВТ.ДоговорКонтрагента = СчетФактура.Ссылка.ДоговорКонтрагента
	               |			И ВТ.ДокументОплаты = СчетФактура.Ссылка.ДокументОснование
	               |ГДЕ
	               |	СчетФактура.ДокументОснование В
	               |			(ВЫБРАТЬ
	               |				ВТ.ДокументОплаты
	               |			ИЗ
	               |				ВТ КАК ВТ)
	               |	И СчетФактура.Ссылка.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ.НомерСтроки,
	               |	ВТ.ДоговорКонтрагента,
	               |	ВТ.ДокументОплаты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СчетФактура,
	               |	ДоговорКонтрагента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СФ.НомерСтроки КАК НомерСтроки,
	               |	МАКСИМУМ(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПлатежноеПоручениеИсходящее)) КАК абс_ДокументПодтверждающийУплатуНалога
	               |ИЗ
	               |	СФ КАК СФ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |				,
	               |				&КонецКвартала,
	               |				Регистратор,
// {{KM WARE Семенов И.С. Заявка №  15.07.2015 начало
// тормозило иначе
	               |				Счет=&Сч6832,
	               |				&мСуб6832,
// }}KM WARE Семенов И.С. Заявка № 15.07.2015 окончание
	               |				Организация = &Организация
	               |					И (ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов), ВЫРАЗИТЬ(Субконто3 КАК Документ.СчетФактураВыданный)) В
	               |						(ВЫБРАТЬ
	               |							СФ.ДоговорКонтрагента,
	               |							СФ.СчетФактура
	               |						ИЗ
	               |							СФ КАК СФ),
// {{KM WARE Семенов И.С. Заявка №  15.07.2015 начало
// тормозило иначе
	               |				КорСчет=&Сч51,
// }}KM WARE Семенов И.С. Заявка № 15.07.2015 окончание
	               |				) КАК ХозрасчетныйОбороты
	               |		ПО (СФ.СчетФактура = (ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Документ.СчетФактураВыданный)))
	               |			И (СФ.ДоговорКонтрагента = (ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ДоговорыКонтрагентов)))
	               |ГДЕ
	               |	НЕ ХозрасчетныйОбороты.Регистратор ЕСТЬ NULL 
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СФ.НомерСтроки
				   //АБС ВСТАВКА 48907  05.11.2014 15:49:56  Шамов
	               |ОБЪЕДИНИТЬ ВСЕ
	               |ВЫБРАТЬ
	               |	СФ.НомерСтроки КАК НомерСтроки,
	               |	МАКСИМУМ(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПлатежноеПоручениеИсходящее)) КАК абс_ДокументПодтверждающийУплатуНалога
	               |ИЗ
	               |	СФ КАК СФ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |				,
	               |				&КонецКвартала,
	               |				Регистратор,
// {{KM WARE Семенов И.С. Заявка №  15.07.2015 начало
// тормозило иначе
	               |				Счет=&Сч6832,
	               |				&мСуб6832,
// }}KM WARE Семенов И.С. Заявка № 15.07.2015 окончание
	               |				Организация = &Организация
	               |					И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов) В
	               |						(ВЫБРАТЬ
	               |							СФ.ДоговорКонтрагента
	               |						ИЗ
	               |							СФ КАК СФ),
// {{KM WARE Семенов И.С. Заявка №  15.07.2015 начало
// тормозило иначе
	               |				КорСчет=&Сч51,
// }}KM WARE Семенов И.С. Заявка № 15.07.2015 окончание
	               |				) КАК ХозрасчетныйОбороты
	               |		ПО (СФ.ДокументОплаты = ХозрасчетныйОбороты.Субконто3)
	               |			И (СФ.ДоговорКонтрагента = (ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ДоговорыКонтрагентов)))
	               |ГДЕ
	               |	НЕ ХозрасчетныйОбороты.Регистратор ЕСТЬ NULL 
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СФ.НомерСтроки				   
				   //АБС ВСТАВКА 48907 КОНЕЦ 
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ СФ";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Строка = ТаблицаРезультатов.Получить(Результат.НомерСтроки - 1);
		Если Строка <> Неопределено Тогда
			Строка.абс_ДокументПодтверждающийУплатуНалога = Результат.абс_ДокументПодтверждающийУплатуНалога;	
		КонецЕсли;	
	КонецЦикла; 		
	
	СтрокиКУдалению = Новый Массив;    		
	Для Каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл			
		Если не ЗначениеЗаполнено(СтрокаТаблицы.абс_ДокументПодтверждающийУплатуНалога) Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;    			
	КонецЦикла; 		
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	          		
КонецПроцедуры
//\\АБС ВСТАВКА №46009 КОНЕЦ  

Функция ОпределитьНаличиеСчетовФактурНалоговогоАгента(ТаблицаДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТаблицаДокументов.ВыгрузитьКолонку("ДокументОплаты"));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ТаблицаДокументов.ВыгрузитьКолонку("ДоговорКонтрагента"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактураВыданный.ДокументОснование КАК ДокументОплаты,
	               |	МАКСИМУМ(СчетФактураВыданный.Ссылка) КАК Ссылка,
	               |	МАКСИМУМ(СчетФактураВыданный.Ссылка.НомерИсправления) КАК НомерИсправления,
	               |	МАКСИМУМ(СчетФактураВыданный.Ссылка.Исправление) КАК Исправление,
	               |	МАКСИМУМ(СчетФактураВыданный.Ссылка.ДоговорКонтрагента) КАК ДоговорКонтрагента
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	               |ГДЕ
	               |	СчетФактураВыданный.ДокументОснование В(&ДокументОснование)
	               |	И СчетФактураВыданный.Ссылка.ДоговорКонтрагента В(&ДоговорКонтрагента)
	               |	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НалоговыйАгент)
	               |	И СчетФактураВыданный.Ссылка.Проведен = ИСТИНА
	               |	И СчетФактураВыданный.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СчетФактураВыданный.ДокументОснование";
 
			 
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Вызывается из процедуры ЗаполнитьСтроки_ВычетНДСПоНалоговомуАгенту.
// Заполняет ТЧ ВычетНДСПоНалоговомуАгенту по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСПоНалоговомуАгентуКВычетуПоДаннымРегистраНДСПредъявленный()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК КВычету_БезНДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК КВычету_НДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК КВычету_СНДС,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
		|	6 КАК ПорядокОплаты
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		//++ Заявка № 10655 Логинчев А.С.
		|				И (НЕ СчетУчетаНДС В (&МассивИсключенийСчета19))
		//-- Заявка № 10655 Логинчев А.С.
		|				И ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
		|				И ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСпоОСиНМА.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И НДСВключенВСтоимость = ЛОЖЬ
		|					И ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
		|					И НеВлияетНаВычет = ЛОЖЬ) КАК НДСпоОСиНМАОстатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСпоОСиНМАОстатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСпоОСиНМАОстатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСпоОСиНМАОстатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСпоОСиНМАОстатки.СчетУчетаНДС
		|			И (НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)) КАК НДСПредъявленныйРеализация0Остатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйРеализация0Остатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйРеализация0Остатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС
		|			И (НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток + НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
		|ГДЕ
		|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата)
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(КВычету_БезНДС),
		|	СУММА(КВычету_НДС),
		|	СУММА(КВычету_СНДС)
		|ПО
		|	СчетФактура,
		|	ПорядокОплаты";
    //++ Заявка № 10655 Логинчев А.С.
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.БП"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.НЕ"));
	Запрос.УстановитьПараметр("МассивИсключенийСчета19",МассивСчетов);
	//-- Заявка № 10655 Логинчев А.С.
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	ВидыЦенностей_НалоговыйАгент = УчетНДС.ВидыЦенностиНалоговыйАгентПоступление();
	
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент", ВидыЦенностей_НалоговыйАгент);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

// Вызывается из процедуры ЗаполнитьСтроки_ВычетНДСПоНалоговомуАгенту.
// Заполняет ТЧ ВычетНДСПоНалоговомуАгенту по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСПоНалоговомуАгентуКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйРеализация0Остатки.Состояние,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК КВычету_БезНДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК КВычету_НДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК КВычету_СНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
		|	6 КАК ПорядокОплаты
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
		|				И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
		|					И ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК НДСПредъявленныйОстатки
		|		ПО НДСПредъявленныйРеализация0Остатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
		|			И НДСПредъявленныйРеализация0Остатки.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
		|			И НДСПредъявленныйРеализация0Остатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
		|			И НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС = НДСПредъявленныйОстатки.СчетУчетаНДС
		|			И (НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0)
		|ГДЕ
		|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйРеализация0Остатки.Состояние,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(КВычету_БезНДС),
		|	СУММА(КВычету_НДС),
		|	СУММА(КВычету_СНДС)
		|ПО
		|	СчетФактура,
		|	ПорядокОплаты";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	ВидыЦенностей_НалоговыйАгент = УчетНДС.ВидыЦенностиНалоговыйАгентПоступление();
	
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент", ВидыЦенностей_НалоговыйАгент);
	
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

Процедура ИсключитьНДСНалоговогоАгентаНеоплаченныйВБюджет(ТаблицаРезультатов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаРезультатов", ТаблицаРезультатов);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	               |	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	               |	ХозрасчетныйОстатки.Субконто3 КАК ДокументОплаты,
	               |	ХозрасчетныйОстатки.СуммаОстатокКт КАК НДС
	               |ПОМЕСТИТЬ Остаток68_32
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента), , Организация = &Организация) КАК ХозрасчетныйОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРезультатов.ДокументОплаты,
	               |	ТаблицаРезультатов.Поставщик,
	               |	ТаблицаРезультатов.ДоговорКонтрагента
	               |ПОМЕСТИТЬ ТаблицаРезультатов
	               |ИЗ
	               |	&ТаблицаРезультатов КАК ТаблицаРезультатов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРезультатов.ДокументОплаты,
	               |	ТаблицаРезультатов.Поставщик,
	               |	ТаблицаРезультатов.ДоговорКонтрагента,
	               |	ЕСТЬNULL(Остаток68_32.НДС, 0) КАК НДС
	               |ИЗ
	               |	ТаблицаРезультатов КАК ТаблицаРезультатов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Остаток68_32 КАК Остаток68_32
	               |		ПО ТаблицаРезультатов.ДокументОплаты = Остаток68_32.ДокументОплаты
	               |			И ТаблицаРезультатов.Поставщик = Остаток68_32.Поставщик
	               |			И ТаблицаРезультатов.ДоговорКонтрагента = Остаток68_32.ДоговорКонтрагента
	               |ГДЕ
	               |	ЕСТЬNULL(Остаток68_32.НДС, 0) > 0";
				   
	НеоплаченныйНДС = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("ДокументОплаты, Поставщик, ДоговорКонтрагента");

	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из НеоплаченныйНДС Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = ТаблицаРезультатов.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			НДС = Мин(СтрокаТаблицы.НДС, СтрокаОтбора.НДС);
			Если не СтрокаОтбора.НДС = 0 Тогда
				СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС - Окр(СтрокаОтбора.СуммаБезНДС*НДС/СтрокаОтбора.НДС, 2);
			иначе	
				СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС;
			КонецЕсли;	
			СтрокаОтбора.НДС = СтрокаОтбора.НДС - НДС;
			
			СтрокаТаблицы.НДС = СтрокаТаблицы.НДС - НДС;
			
			Если СтрокаОтбора.СуммаБезНДС = 0 Или СтрокаОтбора.НДС = 0 Тогда
				Если СтрокиКУдалению.Найти(СтрокаОтбора) = Неопределено Тогда //АБС Чалавиев 2014_02_20 24215
					СтрокиКУдалению.Добавить(СтрокаОтбора);
				КонецЕсли;  //АБС Чалавиев 2014_02_20 24215
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

// Заполнение табличной части "Вычет НДС по налоговому агенту"
////////////////////////////////////////////////////////////////////////////////

// Заполнение табличной части "Вычет НДС при изменении стоимости в сторону уменьшения"

Процедура ЗаполнитьСтроки_ВычетПриИзмененииСтоимостиВСторонуУменьшения(Сообщать) Экспорт
		
	Если Проведен Тогда
		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	ОшибкаЗаполнения = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаЗаполнения, Организация);
	
	Если ОшибкаЗаполнения Тогда
		
		Если Сообщать Тогда
			СтрокаСообщения = "Не указаны параметры учетной политики ("+СокрЛП(Организация)+") на " + Формат(Дата, "ДЛФ=DD") + Символы.ПС 
				+ "Табличное поле «Вычет при изменении стоимости в сторону уменьшения» не может быть заполнено автоматически.";
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
    		
	ТаблицаРезультатов = ЗаполнитьВычетПриИзмененииСтоимостиПоДаннымРегистраНДСПредъявленный();
		
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		ВычетПриИзмененииСтоимостиВСторонуУменьшения.Очистить();
		Возврат;
	КонецЕсли;
		
	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Загрузить(ТаблицаРезультатов);
	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Сортировать("СчетФактура, Поставщик, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
		
КонецПроцедуры	

Функция ЗаполнитьВычетПриИзмененииСтоимостиПоДаннымРегистраНДСПредъявленный()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаСФНеБолее", КонецДня(Дата));
    	
	Если УчетНДС.ПолучитьВерсиюПостановления(Дата) = 1 Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И СчетФактура ССЫЛКА Документ.КорректировкаРеализации) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
		|		ПО НДСПредъявленныйОстатки.СчетФактура = СчетФактураВыданный.ДокументОснование
		|ГДЕ
		|	(НЕ СчетФактураВыданный.Ссылка ЕСТЬ NULL )
		|	И СчетФактураВыданный.Ссылка.Дата <= &ДатаСФНеБолее"; 
		
	Иначе
			
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	НДСПредъявленныйОстатки.Организация,
		//|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		//|	НДСПредъявленныйОстатки.ВидЦенности,
		//|	НДСПредъявленныйОстатки.СтавкаНДС,
		//|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		//|	НДСПредъявленныйОстатки.Поставщик,
		//|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
		//|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		//|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
		//|ИЗ
		//|	РегистрНакопления.НДСПредъявленный.Остатки(
		//|			&ДатаГраница,
		//|			Организация = &Организация
		//|				И СчетФактура ССЫЛКА Документ.КорректировкаРеализации) КАК НДСПредъявленныйОстатки
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
		//|		ПО (ВЫБОР
		//|				КОГДА НДСПредъявленныйОстатки.ИсправленныйСчетФактура ССЫЛКА Документ.КорректировкаРеализации
		//|					ТОГДА СчетФактураВыданный.ДокументОснование = НДСПредъявленныйОстатки.ИсправленныйСчетФактура
		//|				ИНАЧЕ СчетФактураВыданный.ДокументОснование = НДСПредъявленныйОстатки.СчетФактура
		//|			КОНЕЦ)
		//|ГДЕ
		//|	(НЕ СчетФактураВыданный.Ссылка ЕСТЬ NULL )
		//|	И СчетФактураВыданный.Ссылка.Выставлен
		//|	И СчетФактураВыданный.Ссылка.ДатаВыставления <= &ДатаСФНеБолее";
		
		//Из поставки
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.ИсправленныйСчетФактура ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА НДСПредъявленныйОстатки.ИсправленныйСчетФактура
		|		ИНАЧЕ НДСПредъявленныйОстатки.СчетФактура
		|	КОНЕЦ КАК ДокументОснование,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток,
		|	НДСПредъявленныйОстатки.НДСОстаток
		|ПОМЕСТИТЬ НДСПредъявленныйОстатки
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И СчетФактура ССЫЛКА Документ.КорректировкаРеализации) КАК НДСПредъявленныйОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация КАК Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
		|ИЗ
		|	НДСПредъявленныйОстатки КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
		|		ПО НДСПредъявленныйОстатки.ДокументОснование = СчетФактураВыданный.ДокументОснование
		|ГДЕ
		|	НЕ СчетФактураВыданный.Ссылка ЕСТЬ NULL 
		|	И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
		|	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
		|	И СчетФактураВыданный.Ссылка.Выставлен
		|	И СчетФактураВыданный.Ссылка.ДатаВыставления <= &ДатаСФНеБолее";   		
		
	КонецЕсли;	
	    	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоВычетам(РезультатЗапросаПоВычетам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ТаблицаВычетов = РезультатЗапросаПоВычетам.Выгрузить();
	
	МоментОпределенияНалоговойБазыНДСОплата = Неопределено;
	НачалоНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал, НачалоКвартала(СтруктураШапкиДокумента.Дата), НачалоМесяца(СтруктураШапкиДокумента.Дата));
	КонецНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал, КонецКвартала(СтруктураШапкиДокумента.Дата), КонецМесяца(СтруктураШапкиДокумента.Дата));
	
	Для Каждого СтрокаТаблицы Из ТаблицаВычетов Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаСчетаФактуры) Тогда
			СтрокаТаблицы.ДатаСчетаФактуры = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
							
		Если СтрокаТаблицы.ДатаОплаты = '00010101' Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаДокументаОплаты) Тогда
				Если (СтруктураШапкиДокумента.Дата < '20060101') Тогда
					СтрокаТаблицы.ДатаОплаты = СтруктураШапкиДокумента.Дата;
				ИначеЕсли СтрокаТаблицы.ДатаСчетаФактуры < '20060101' Тогда
					Если МоментОпределенияНалоговойБазыНДСОплата = Неопределено Тогда
						УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл('20051231', СтруктураШапкиДокумента.Организация);
                        Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
							Отказ = Истина;
						КонецЕсли; 
						Если Не Отказ Тогда
							МоментОпределенияНалоговойБазыНДСОплата = (УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате);
						Иначе
							МоментОпределенияНалоговойБазыНДСОплата = Ложь;
						КонецЕсли;
					КонецЕсли;
					Если МоментОпределенияНалоговойБазыНДСОплата Тогда
						СтрокаТаблицы.ДатаОплаты = СтруктураШапкиДокумента.Дата;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ДатаОплаты = СтрокаТаблицы.ДатаДокументаОплаты;
			КонецЕсли;
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
			Если СтруктураШапкиДокумента.Дата < '20060101' Тогда
				СтрокаТаблицы.ДатаСобытия = Макс(?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДатаОплаты), СтрокаТаблицы.ДатаСчетаФактуры, ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузкиДата), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДокументОтгрузкиДата));
			Иначе
				СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузкиДата), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДокументОтгрузкиДата);
				Если Не (СтрокаТаблицы.ДатаСобытия >= НачалоНалоговогоПериода И СтрокаТаблицы.ДатаСобытия <= КонецНалоговогоПериода) Тогда
					СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СтруктураШапкиДокумента.Дата < '20060101' Тогда
				СтрокаТаблицы.ДатаСобытия = Макс(?(СтрокаТаблицы.ДатаОплаты = '00010101', СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДатаОплаты), СтрокаТаблицы.ДатаСчетаФактуры);
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИсправленныйСчетФактура) Тогда
					Если СтрокаТаблицы.ДатаСчетаФактуры >= НачалоНалоговогоПериода И СтрокаТаблицы.ДатаСчетаФактуры <= КонецНалоговогоПериода Тогда
						СтрокаТаблицы.ДатаСобытия = СтрокаТаблицы.ДатаСчетаФактуры;
					Иначе
						СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
					КонецЕсли;
				Иначе
					Если СтрокаТаблицы.ИсправленныйСчетФактураДата >= НачалоНалоговогоПериода 
						И СтрокаТаблицы.ИсправленныйСчетФактураДата <= КонецНалоговогоПериода Тогда
						СтрокаТаблицы.ДатаСобытия = СтрокаТаблицы.ИсправленныйСчетФактураДата;
					Иначе
						СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
			// Контрагент по данным виждам ценностей не указывается
			СтрокаТаблицы.Поставщик = Неопределено;
		КонецЕсли; 
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
	КонецЦикла; 
	
	ТаблицаВычетов.Колонки.Добавить("Событие");
	ТаблицаВычетов.ЗаполнитьЗначения( ?(СтруктураШапкиДокумента.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету),"Событие");
	
	Возврат ТаблицаВычетов;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоАвансам(РезультатЗапросаПоАвансам, СтруктураШапкиДокумента)
	
	ТаблицаПоАвансам = РезультатЗапросаПоАвансам.Выгрузить();
	
	//ТаблицаПоАвансам.Колонки.Добавить("Событие");
	//ТаблицаПоАвансам.ЗаполнитьЗначения( ?(СтруктураШапкиДокумента.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету),"Событие");
	//
	//ТаблицаПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	//ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыПолученные,"ВидЦенности");
	
	//ТаблицаПоАвансам.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	//Если СтруктураШапкиДокумента.Дата >= '20150101' Тогда
	//	ТаблицаПоАвансам.ЗаполнитьЗначения("22", "КодВидаОперации");
	//КонецЕсли;
	
	Для каждого СтрокаТаблицы из ТаблицаПоАвансам Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
			СтрокаТаблицы.ДатаОплаты = СтруктураШапкиДокумента.Дата;
		КонецЕсли; 
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТаблицаПоАвансам;
	
КонецФункции // ПодготовитьТаблицуПоОплатам()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
Функция ПодготовитьТаблицуПоАвансамВыданным(РезультатЗапросаПоАвансамВыданным, СтруктураШапкиДокумента)
	
	ТаблицаПоАвансамВыданным = РезультатЗапросаПоАвансамВыданным.Выгрузить();
	
	ТаблицаПоАвансамВыданным.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПокупки"));
	ТаблицаПоАвансамВыданным.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
	
	ТаблицаПоАвансамВыданным.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаПоАвансамВыданным.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные,"ВидЦенности");
	
	ТаблицаПоАвансамВыданным.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	НачалоНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, НачалоМесяца(СтруктураШапкиДокумента.Дата), НачалоКвартала(СтруктураШапкиДокумента.Дата));
	КонецНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, КонецМесяца(СтруктураШапкиДокумента.Дата), КонецКвартала(СтруктураШапкиДокумента.Дата));
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоАвансамВыданным Цикл
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаСчетаФактуры) 
			И СтрокаТаблицы.ДатаСчетаФактуры >= НачалоНалоговогоПериода
			И СтрокаТаблицы.ДатаСчетаФактуры <= КонецНалоговогоПериода Тогда
			СтрокаТаблицы.ДатаСобытия = СтрокаТаблицы.ДатаСчетаФактуры;
		Иначе
			СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТаблицаПоАвансамВыданным;
	
КонецФункции // ПодготовитьТаблицуПоОплатам()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоВычетамНалоговыйАгент(РезультатЗапросаПоВычетамНалоговыйАгент, СтруктураШапкиДокумента, Отказ, Заголовок)

	ТаблицаВычетовНалоговыйАгент = РезультатЗапросаПоВычетамНалоговыйАгент.Выгрузить();
	ВерсияПостановления1137 = УчетНДС.ВерсияПостановленияНДС1137(СтруктураШапкиДокумента.Дата);	
	ТаблицаВычетовНалоговыйАгент.Колонки.Добавить("НомерДокументаОплаты");	
	
	Для Каждого СтрокаТаблицы из ТаблицаВычетовНалоговыйАгент Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСчетаФактуры) Тогда
			СтрокаТаблицы.ДатаСчетаФактуры = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
							
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
			СтрокаТаблицы.ДатаОплаты = СтрокаТаблицы.ДатаДокументаОплаты;
		КонецЕсли; 
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
		Если ВерсияПостановления1137 = 3 
			И ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплатыНДС) Тогда
			СтрокаТаблицы.НомерДокументаОплаты = ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаТаблицы.ДокументОплатыНДС);
		КонецЕсли;		
		
	КонецЦикла; 
	
	ТаблицаВычетовНалоговыйАгент.Колонки.Добавить("Событие");
	ТаблицаВычетовНалоговыйАгент.ЗаполнитьЗначения( ?(СтруктураШапкиДокумента.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету),"Событие");
	
	Возврат ТаблицаВычетовНалоговыйАгент;

КонецФункции // ПодготовитьТаблицуПоОплатам()

Процедура ПолучитьДанныеОДокументахОплатыАгентскогоНДСВБюджет(ТаблицаРезультатов)
	
	Если УчетНДС.ВерсияПостановленияНДС1137(Дата) < 3 Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.Документы.ФормированиеЗаписейКнигиПокупок;
	ТипыДокументовОплатыНДС = МетаданныеДокумента.ТабличныеЧасти.ВычетНДСПоНалоговомуАгенту.Реквизиты.ДокументОплатыНДС.Тип.Типы();

	УстановитьПривилегированныйРежим(Истина);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаРезультатов", 	ТаблицаРезультатов);
	Запрос.УстановитьПараметр("Организация", 			Организация);
	Запрос.УстановитьПараметр("Дата", 					Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода", 			КонецДня(Дата));
	Запрос.УстановитьПараметр("ВидыСубконто", 			ВидыСубконто);
	Запрос.УстановитьПараметр("НДСНалоговогоАгента",	ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);
	Запрос.УстановитьПараметр("СчетПереоценки", 		ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРезультатов.ДокументОплаты КАК ДокументОплаты,
	|	ТаблицаРезультатов.Поставщик КАК Поставщик,
	|	ТаблицаРезультатов.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ТаблицаРезультатов
	|ИЗ
	|	&ТаблицаРезультатов КАК ТаблицаРезультатов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты,
	|	Поставщик,
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОбороты.Субконто3 КАК ДокументОплаты,
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументОплатыНДС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&Дата,
	|			Регистратор,
	|			Счет = &НДСНалоговогоАгента,
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаРезультатов.Поставщик
	|					ИЗ
	|						ТаблицаРезультатов)
	|				И Субконто2 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаРезультатов.ДоговорКонтрагента
	|					ИЗ
	|						ТаблицаРезультатов)
	|				И Субконто3 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаРезультатов.ДокументОплаты
	|					ИЗ
	|						ТаблицаРезультатов),
	|			КорСчет <> &СчетПереоценки,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто3, ХозрасчетныйОбороты.Регистратор) <> ХозрасчетныйОбороты.Субконто3
	|	И ХозрасчетныйОбороты.СуммаОборотДт > 0";
	
	ОплаченныйНДС = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("ДокументОплаты, Поставщик, ДоговорКонтрагента");

	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = ОплаченныйНДС.НайтиСтроки(Отбор);
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			СтрокаТаблицы.ДокументОплатыНДС = СтрокаОтбора.ДокументОплатыНДС;
			Прервать;
		КонецЦикла;
			
	КонецЦикла;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоВычетам(СтруктураШапкиДокумента,ТаблицаПоВычетам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, СчетФактура, СтавкаНДС"); 
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураОбязательныхПолей.Вставить("Состояние"); 
	КонецЕсли; 
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВычетПоПриобретеннымЦенностям", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения или по условию
	СтрокаСообщения = "Не заполнены документ оплаты и дата оплаты. В книге покупок по данной записи в качестве даты оплаты будет установлена дата текущего документа!";
	СтрокаСообщенияДокОтгрузки = "Не заполнен документ отгрузки при реализации товара по ставке НДС 0%!";
	СтрокаСообщенияПоставщик = "Не заполнено значение реквизита ""Поставщик""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";
	СтрокаСообщенияСчетУчетаНДС = "Не заполнено значение реквизита ""Счет учета НДС""!";

	Для каждого СтрокаТаблицы из ТаблицаПоВычетам Цикл
		
		// Проверка на заполнение контрагента
		Если не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами и НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"" : ";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияПоставщик,Отказ,Заголовок);
		КонецЕсли; 
		
		// Проверка на заполнение счета учета НДС
		Если не СтрокаТаблицы.НДС = 0 и не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"" : ";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияСчетУчетаНДС,Отказ,Заголовок);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСобытия) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"" : ";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщения,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"" : ";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияДокОтгрузки,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"" : ";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияКорПериод,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоАвансам(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Покупатель,ДоговорКонтрагента, СчетФактура, СтавкаНДС"); 
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураОбязательныхПолей.Вставить("Состояние");
	КонецЕсли; 
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НДСсАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщенияДокОтгрузки = "Не заполнен документ отгрузки при реализации товара по ставке НДС 0%!";
 	СтрокаСообщения = "Не заполнена дата зачета аванса. В качестве даты зачета аванса будет использоваться дата текущего документа!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";

	Для каждого СтрокаТаблицы из ТаблицаПоАвансам Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСобытия) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет НДС с полученных авансов"": ";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщения,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет НДС с полученных авансов"": ";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияДокОтгрузки,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет НДС с полученных авансов"": ";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияКорПериод,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоАвансамВыданным(СтруктураШапкиДокумента, ТаблицаПоАвансамВыданным, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Поставщик, ДоговорКонтрагента, СчетФактура, СтавкаНДС"); 
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НДСсАвансовВыданных", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";

	Для Каждого СтрокаТаблицы Из ТаблицаПоАвансамВыданным Цикл
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста И Не ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет НДС с выданных авансов"": ";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, , Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиПоВычетамНалоговыйАгент(СтруктураШапкиДокумента, ТаблицаПоВычетамНалоговыйАгент, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, СчетФактура, СтавкаНДС, Поставщик, ДоговорКонтрагента, ДокументОплаты, ДатаОплаты"); 
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураОбязательныхПолей.Вставить("Состояние"); 
	КонецЕсли; 
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВычетНДСПоНалоговомуАгенту", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщенияСчетУчетаНДС = "Не заполнено значение реквизита ""Счет учета НДС""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";

	Для Каждого СтрокаТаблицы Из ТаблицаПоВычетамНалоговыйАгент Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"": ";
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) и СтрокаТаблицы.НДС <> 0 Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияСчетУчетаНДС, Отказ, Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, , Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;

	КонецЦикла; 

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицапоАвансам, ТаблицаПоАвансамВыданным, ТаблицаПоВычетамНалоговыйАгент, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок)
	
	ДвиженияПоВычетамНДСпоПриобретеннымЦенностям(СтруктураШапкиДокумента, ТаблицаПоВычетам, Отказ, Заголовок);
	ДвиженияПоВычетамНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок);
	ДвиженияПоВычетамНДСсАвансовВыданных(СтруктураШапкиДокумента, ТаблицаПоАвансамВыданным, Отказ, Заголовок);
	ДвиженияПоВычетамНДСпоНалоговомуАгенту(СтруктураШапкиДокумента, ТаблицаПоВычетамНалоговыйАгент, Отказ, Заголовок);
	
	ДвиженияПоВычетамПриИзмененииСтоимости(СтруктураШапкиДокумента, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСпоПриобретеннымЦенностям(СтруктураШапкиДокумента, ТаблицаПоВычетам, Отказ, Заголовок)

	Если ТаблицаПоВычетам.КОличество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
	// Отражение по регистру "НДС предъявленный"
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоВычетам,ТаблицаДвижений_НДСПредъявленный);
		//++ Задача № 10655 Логинчев А.С. 16.05.2012 16:11:34
		//ТаблицаДвижений_НДСПредъявленный.Свернуть("Период,Активность,Организация,СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,Поставщик,ДатаСобытия,Событие","СуммаБезНДС,НДС");
		ТаблицаДвижений_НДСПредъявленный.Свернуть("Период,Активность,Организация,СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,Поставщик,ДатаСобытия,Событие,ИсправленныйСчетФактура,РасходыБудущихПериодов","СуммаБезНДС,НДС");
		//-- Задача № 10655 Логинчев А.С.
		
		
		Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ВыполнитьРасход();
		
		// Виды ценностей с особой обработкой расчетов
		ВидыЦенностейОтражаемыеВРасчетах = Новый Массив();
		ВидыЦенностейОтражаемыеВРасчетах.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
		ВидыЦенностейОтражаемыеВРасчетах.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
		ВидыЦенностейОтражаемыеВРасчетах.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
		ВидыЦенностейОтражаемыеВРасчетах.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
		
		// Отражение по регистру взаиморасчетов
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();
		
		Для Каждого СтрокаВычета Из ТаблицаПоВычетам Цикл
			Если ВидыЦенностейОтражаемыеВРасчетах.Найти(СтрокаВычета.ВидЦенности) <> Неопределено Тогда
				Если СтрокаВычета.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами
					И СтрокаВычета.ДатаСчетаФактуры >= '20090101' Тогда
					Продолжить;
				КонецЕсли;
				СтрокаРасчетов = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
				СтрокаРасчетов.Организация = СтрокаВычета.Организация;
				СтрокаРасчетов.СчетФактура = СтрокаВычета.СчетФактура;
				СтрокаРасчетов.ДокументОплаты = СтрокаВычета.ДокументОплаты;
				СтрокаРасчетов.РасчетыСБюджетом = Истина;
				СтрокаРасчетов.РаспределеннаяСумма = СтрокаВычета.НДС;
			КонецЕсли; 
		КонецЦикла;

		ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты,РасчетыСБюджетом,ДатаСобытия","РаспределеннаяСумма");
		
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыполнитьРасход();
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("ДокументОтгрузкиДата",Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоВычетам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		
		
		Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
			Если СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
				Если СтрокаЗаписи.ЗаписьДополнительногоЛиста = Ложь Тогда
					СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.ДокументОтгрузкиДата);
				Иначе
					СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
				КонецЕсли; 
				СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
				
			КонецЕсли;
		КонецЦикла; 
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.ДокументОтгрузкиДата);
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Состояние);
		
		Если мВестиУчетНДС Тогда
			// Отражение по регистру НДСПредъявленныйРеализация0
			ТаблицаДвижений_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоВычетам,ТаблицаДвижений_НДСПредъявленныйРеализация0);
			
			Движения.НДСПредъявленныйРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
			Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
			Движения.НДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоВычетам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	КонецЕсли; 
	
	//АБС ВСТАВКА №55271 НАЧАЛО «21 января 2015 г.», Пополитов    	
	//ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,СчетУчетаНДС,Поставщик,ЗаписьДополнительногоЛиста,КорректируемыйПериод,ДатаСобытия,Событие,ВидЦенности","СуммаБезНДС,НДС");
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть(
		"Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,СчетУчетаНДС,Поставщик,ЗаписьДополнительногоЛиста,
		|КорректируемыйПериод,ДатаСобытия,Событие,ВидЦенности,ИсправленныйСчетФактура, НомерДокументаОплаты, ДатаДокументаОплаты, КодВидаОперации",
		"СуммаБезНДС,НДС");
	//\\АБС ВСТАВКА №55271 КОНЕЦ
		
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	
	// Сформировать проводи по записям книги покупок
	Для каждого ТекСтрокаВычета Из ТаблицаПоВычетам Цикл
		Если ТекСтрокаВычета.НДС = 0 Тогда
			ПродолжитЬ;
		КонецЕсли; 
		
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация =  СтруктураШапкиДокумента.Организация;
		Движение.Сумма = ТекСтрокаВычета.НДС;
		Движение.НомерЖурнала = "НДС";
		
		Если не ПредъявленНДСКВычету0 тогда
			Движение.Содержание = "НДС к вычету";
		ИначеЕсли ТекСтрокаВычета.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 тогда 
			Движение.Содержание = "НДС к вычету по реализации 0%";
		Иначе
			Движение.Содержание = "НДС к вычету по реализации 0% (не подтверждена)";
		КонецЕсли;
				
		Если ПредъявленНДСКВычету0 и ТекСтрокаВычета.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению; //68.22.2
			
			Попытка
			Вр_Контрагент = ?(ТипЗнч(ТекСтрокаВычета.ДокументОтгрузкиКонтрагент) = Тип("СправочникСсылка.Контрагенты")
							,ТекСтрокаВычета.ДокументОтгрузкиКонтрагент
							,ТекСтрокаВычета.ДокументОтгрузки.Контрагент);
			Исключение
			Вр_Контрагент = Справочники.Контрагенты.ПустаяСсылка();				
			КонецПопытки;				
							
			//БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", ТекСтрокаВычета.ДокументОтгрузкиКонтрагент);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", Вр_Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФВыданные",  ТекСтрокаВычета.ДокументОтгрузки);
		Иначе
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			Если Движение.Период >= '20120101000000' Тогда // АБС Коломиец начало
				Если Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ас_ПериодыОтражения) <> Неопределено Тогда
					Если ТаблицаПоВычетам.Колонки.Найти("КорректируемыйПериод") <> Неопределено И ТаблицаПоВычетам.Колонки.Найти("ЗаписьДополнительногоЛиста") <> Неопределено 
						И ТекСтрокаВычета.ЗаписьДополнительногоЛиста И (ЗначениеЗаполнено(ТекСтрокаВычета.КорректируемыйПериод) Или ЗначениеЗаполнено(ТекСтрокаВычета.абс_ПериодОтражения))  Тогда					
						Если ЗначениеЗаполнено(ТекСтрокаВычета.абс_ПериодОтражения) Тогда
							Движение.СубконтоДт.ас_ПериодыОтражения = ТекСтрокаВычета.абс_ПериодОтражения;							
						ИначеЕсли КонецДня(ТекСтрокаВычета.КорректируемыйПериод) <> КонецДня(Дата) Тогда
							ГодПериода = Год(ТекСтрокаВычета.КорректируемыйПериод);
							МесяцПериода = Месяц(ТекСтрокаВычета.КорректируемыйПериод);
							Если МесяцПериода < 10 Тогда
								МесяцПериода = "0" + СокрЛП(МесяцПериода);
							КонецЕсли;
							аСтрокаКода = СокрЛП(ГодПериода) + СокрЛП(МесяцПериода);
							аСтрокаКода = СтрЗаменить(СтрЗаменить(аСтрокаКода, " ", ""), Символы.НПП, "");
							Элемент = Справочники.ас_ПериодыОтражения.НайтиПоКоду(аСтрокаКода);
							Движение.СубконтоДт.ас_ПериодыОтражения = Элемент;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; // АБС Коломиец окончание			
		КонецЕсли;
		
		
		Если ПредъявленНДСКВычету0 Тогда // подстраховка для ручного ввода
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0; //19.07
		Иначе
			Движение.СчетКт = ТекСтрокаВычета.СчетУчетаНДС; //19.чч
		КонецЕсли;

		Попытка
		Вр_Контрагент = ?(ТипЗнч(ТекСтрокаВычета.Поставщик) = Тип("СправочникСсылка.Контрагенты")
							,ТекСтрокаВычета.Поставщик
							,ТекСтрокаВычета.СчетФактура.Контрагент);		
		Исключение
		Вр_Контрагент = Справочники.Контрагенты.ПустаяСсылка();				
		КонецПопытки;							
		
		Если ТекСтрокаВычета.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.БП") Тогда
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "РасходыБудущихПериодов", ТекСтрокаВычета.РасходыБудущихПериодов);
		КонецЕсли;

		//БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", ТекСтрокаВычета.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", Вр_Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", ТекСтрокаВычета.СчетФактура);
		
		Если ПредъявленНДСКВычету0 Тогда // Дополнительное субконто по 19.07
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДокументыРеализации", ТекСтрокаВычета.ДокументОтгрузки);
		КонецЕсли;
		
		Если ПредъявленНДСКВычету0 
			и ТекСтрокаВычета.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 
			и СтруктураШапкиДокумента.ИмеетсяРешениеОВозмещенииНДС 
			Тогда
			
			Движение = Движения.Хозрасчетный.Добавить();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация =  СтруктураШапкиДокумента.Организация;
			Движение.Сумма = ТекСтрокаВычета.НДС;
			Движение.НомерЖурнала = "НДС";
			Движение.Содержание = "Возмещение НДС при реализации 0%";
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			Если Движение.Период >= '20120101000000' Тогда // АБС Коломиец начало
			Если Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ас_ПериодыОтражения) <> Неопределено Тогда
				Если ТаблицаПоВычетам.Колонки.Найти("КорректируемыйПериод") <> Неопределено И ТаблицаПоВычетам.Колонки.Найти("ЗаписьДополнительногоЛиста") <> Неопределено 
					И ТекСтрокаВычета.ЗаписьДополнительногоЛиста И (ЗначениеЗаполнено(ТекСтрокаВычета.КорректируемыйПериод) Или ЗначениеЗаполнено(ТекСтрокаВычета.абс_ПериодОтражения))  Тогда					
						Если ЗначениеЗаполнено(ТекСтрокаВычета.абс_ПериодОтражения) Тогда
							Движение.СубконтоДт.ас_ПериодыОтражения = ТекСтрокаВычета.абс_ПериодОтражения;							
						ИначеЕсли КонецДня(ТекСтрокаВычета.КорректируемыйПериод) <> КонецДня(Дата) Тогда
						ГодПериода = Год(ТекСтрокаВычета.КорректируемыйПериод);
						МесяцПериода = Месяц(ТекСтрокаВычета.КорректируемыйПериод);
						Если МесяцПериода < 10 Тогда
							МесяцПериода = "0" + СокрЛП(МесяцПериода);
						КонецЕсли;
						аСтрокаКода = СокрЛП(ГодПериода) + СокрЛП(МесяцПериода);
						аСтрокаКода = СтрЗаменить(СтрЗаменить(аСтрокаКода, " ", ""), Символы.НПП, "");
						Элемент = Справочники.ас_ПериодыОтражения.НайтиПоКоду(аСтрокаКода);
						Движение.СубконтоДт.ас_ПериодыОтражения = Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			КонецЕсли; // АБС Коломиец окончание
			
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению; //68.22.2
			
			Попытка
			Вр_Контрагент = ?(ТипЗнч(ТекСтрокаВычета.ДокументОтгрузкиКонтрагент) = Тип("СправочникСсылка.Контрагенты")
							,ТекСтрокаВычета.ДокументОтгрузкиКонтрагент
							,ТекСтрокаВычета.ДокументОтгрузки.Контрагент);
			Исключение
			Вр_Контрагент = Справочники.Контрагенты.ПустаяСсылка();				
			КонецПопытки;							
						
			//БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", ТекСтрокаВычета.ДокументОтгрузкиКонтрагент);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", Вр_Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФВыданные",  ТекСтрокаВычета.ДокументОтгрузки);
        КонецЕсли;
	КонецЦикла; 
	
	//Задача 000020061
	//АБС ИЗМЕНЕНИЕ 33143
	Движения.Хозрасчетный.Записать();
	ЕстьУдаленныеСтроки=Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК СчетФактура
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток < 0";
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(СтруктураШапкиДокумента.Дата,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет", ТаблицаПоВычетам.ВыгрузитьКолонку("СчетУчетаНДС"));
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Отбор = Новый Структура("Поставщик, СчетФактура,СчетУчетаНДС");
			Отбор.Поставщик = Выборка.Контрагент;
			Отбор.СчетФактура = Выборка.СчетФактура;
			//АБС ИЗМЕНЕНИЕ 33143
			Отбор.СчетУчетаНДС = Выборка.Счет;
            //\\АБС ИЗМЕНЕНИЕ 33143 КОНЕЦ

			НайденыеСтроки = ВычетПоПриобретеннымЦенностям.НайтиСтроки(Отбор);
			Для Каждого СтрокаНаУдаление Из НайденыеСтроки Цикл
				
				#Если Клиент Тогда
					Сообщить("Строка из Вычет НДС по приобретенным ценностям № " + СтрокаНаУдаление.НомерСтроки + ", Контрагент: " + СтрокаНаУдаление.Поставщик + ", Счет-Фактура: " +СтрокаНаУдаление.СчетФактура+ " приведет к отрицательному сальдо на счете " + Строка(СтрокаНаУдаление.СчетУчетаНДС));
				#КонецЕсли
				
				Если абс_УдалятьСтроки Тогда
					
					#Если Клиент Тогда
						Сообщить("Удалена строка из Вычет НДС по приобретенным ценностям № " + СтрокаНаУдаление.НомерСтроки + ", Контрагент: " + СтрокаНаУдаление.Поставщик+ ", Счет-Фактура: " +СтрокаНаУдаление.СчетФактура);
					#КонецЕсли
					
					ВычетПоПриобретеннымЦенностям.Удалить(СтрокаНаУдаление);
					ЕстьУдаленныеСтроки=Истина;
					
				КонецЕсли;
			КонецЦикла
		КонецЦикла;
		Если ЕстьУдаленныеСтроки Тогда
			#Если Клиент Тогда
				Сообщить("Документ необходимо перепровести!");
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	//АБС ИЗМЕНЕНИЕ 33143 КОНЕЦ


КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()
 
// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок)

	Если ТаблицаПоАвансам.КОличество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
		// Отражение по регистру "НДС предъявленный"
		ТаблицаДвижений_НДСсАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();
		
		Для каждого СтрокаТаблицыИсточника Из ТаблицаПоАвансам Цикл
			
			Если ТипЗнч(СтрокаТаблицыИсточника.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицыПриемника = ТаблицаДвижений_НДСсАвансов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
			
			Если СтрокаТаблицыПриемника.ВидЦенности = Перечисления.ВидыЦенностей.ВозвратАвансовПолученных Тогда
				СтрокаТаблицыПриемника.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;		                   		
			КонецЕсли; 
			
		КонецЦикла;
		
		ТаблицаДвижений_НДСсАвансов.Свернуть(
			"Период, Активность, Организация, ВидЦенности, СчетФактура, Покупатель, ДоговорКонтрагента,СтавкаНДС,ВалютаАванса,ДатаСобытия,ИсправленныйСчетФактура,АвансВосстановленный",
			"СуммаБезНДС,НДС,ВалютнаяСуммаСНДС");
		
		Движения.НДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДСсАвансов;
		Движения.НДСсАвансов.ВыполнитьРасход();
	КонецЕсли;	
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("ДокументОтгрузкиДата",Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоАвансам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		
		Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
			Если СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
				Если Не СтрокаЗаписи.ЗаписьДополнительногоЛиста Тогда
					СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.ДокументОтгрузкиДата);
				Иначе
					СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
				КонецЕсли;
				СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
			КонецЕсли;
		КонецЦикла; 
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.ДокументОтгрузкиДата);
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Состояние);
		
		Если мВестиУчетНДС Тогда
			// Отражение по регистру НДСсАвансовРеализация0
			ТаблицаДвижений_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоАвансам,ТаблицаДвижений_НДСПредъявленныйРеализация0);
			
			Движения.НДСПредъявленныйРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
			Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
			Движения.НДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоАвансам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	КонецЕсли; 
	
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты,ДатаОплаты,СтавкаНДС,СчетУчетаНДС,Поставщик, ДоговорКонтрагента, ДатаСобытия,Событие,ВидЦенности,ЗаписьДополнительногоЛиста,КорректируемыйПериод,ИсправленныйСчетФактура, КодВидаОперации","СуммаБезНДС,НДС");
		
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	
	// Сформировать проводки по записям книги покупок
	Для каждого ТекСтрокаВычета Из ТаблицаПоАвансам Цикл
		Если ТекСтрокаВычета.НДС = 0 Тогда
			ПродолжитЬ;
		КонецЕсли; 
		
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация =  СтруктураШапкиДокумента.Организация;
		Движение.Сумма = ТекСтрокаВычета.НДС;
		Движение.НомерЖурнала = "НДС";
		
		СодержаниеПроводки = ?(Дата >= '20060101', "Вычет НДС по предоплате", "Вычет НДС с аванса");
		Если не СтруктураШапкиДокумента.ПредъявленНДСКВычету0 тогда
			Движение.Содержание = СодержаниеПроводки;
		ИначеЕсли ТекСтрокаВычета.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 тогда 
			Движение.Содержание = СодержаниеПроводки + " по реализации 0%";
		Иначе
			Движение.Содержание = СодержаниеПроводки + " по реализации 0% (не подтверждена)";
		КонецЕсли;
		
		Если ПредъявленНДСКВычету0 и ТекСтрокаВычета.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению; //68.22.2
			
			Попытка
			Вр_Контрагент = ?(ТипЗнч(ТекСтрокаВычета.Покупатель) = Тип("СправочникСсылка.Контрагенты")
							,ТекСтрокаВычета.Покупатель
							,ТекСтрокаВычета.ДокументОтгрузки.Контрагент);
			Исключение
			Вр_Контрагент = Справочники.Контрагенты.ПустаяСсылка();				
			КонецПопытки;							
			
			//БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", ТекСтрокаВычета.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", Вр_Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФВыданные",  ТекСтрокаВычета.ДокументОтгрузки);
		Иначе
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			Если Движение.Период >= '20120101000000' Тогда // АБС Коломиец начало 
			Если Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ас_ПериодыОтражения) <> Неопределено Тогда
				Если ТаблицаПоАвансам.Колонки.Найти("КорректируемыйПериод") <> Неопределено И ТаблицаПоАвансам.Колонки.Найти("ЗаписьДополнительногоЛиста") <> Неопределено 
					И ТекСтрокаВычета.ЗаписьДополнительногоЛиста И (ЗначениеЗаполнено(ТекСтрокаВычета.КорректируемыйПериод) Или ЗначениеЗаполнено(ТекСтрокаВычета.абс_ПериодОтражения))  Тогда					
						Если ЗначениеЗаполнено(ТекСтрокаВычета.абс_ПериодОтражения) Тогда
							Движение.СубконтоДт.ас_ПериодыОтражения = ТекСтрокаВычета.абс_ПериодОтражения;							
						ИначеЕсли КонецДня(ТекСтрокаВычета.КорректируемыйПериод) <> КонецДня(Дата) Тогда
						ГодПериода = Год(ТекСтрокаВычета.КорректируемыйПериод);
						МесяцПериода = Месяц(ТекСтрокаВычета.КорректируемыйПериод);
						Если МесяцПериода < 10 Тогда
							МесяцПериода = "0" + СокрЛП(МесяцПериода);
						КонецЕсли;
						аСтрокаКода = СокрЛП(ГодПериода) + СокрЛП(МесяцПериода);
						аСтрокаКода = СтрЗаменить(СтрЗаменить(аСтрокаКода, " ", ""), Символы.НПП, "");
						Элемент = Справочники.ас_ПериодыОтражения.НайтиПоКоду(аСтрокаКода);
						Движение.СубконтоДт.ас_ПериодыОтражения = Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			КонецЕсли; // АБС Коломиец окончание			
		КонецЕсли;
		
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; //76.АВ

		Попытка
		Вр_Контрагент = ?(ТипЗнч(ТекСтрокаВычета.Покупатель) = Тип("СправочникСсылка.Контрагенты")
							,ТекСтрокаВычета.Покупатель
							,ТекСтрокаВычета.СчетФактура.Контрагент);	
		Исключение
		Вр_Контрагент = Справочники.Контрагенты.ПустаяСсылка();				
		КонецПопытки;							
		
		//БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", ТекСтрокаВычета.Покупатель);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", Вр_Контрагент); 
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФВыданные", ТекСтрокаВычета.СчетФактура);

		Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 
			и ТекСтрокаВычета.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 
			и СтруктураШапкиДокумента.ИмеетсяРешениеОВозмещенииНДС 
			Тогда
			
			Движение = Движения.Хозрасчетный.Добавить();
			Движение.Период			= СтруктураШапкиДокумента.Дата;
			Движение.Организация	=  СтруктураШапкиДокумента.Организация;
			Движение.Сумма			= ТекСтрокаВычета.НДС;
			Движение.НомерЖурнала	= "НДС";
			Движение.Содержание		= "Возмещение НДС при реализации 0%";
			
			Движение.СчетДт			= ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			Если Движение.Период >= '20120101000000' Тогда // АБС Коломиец начало
			Если Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ас_ПериодыОтражения) <> Неопределено Тогда
				Если ТаблицаПоАвансам.Колонки.Найти("КорректируемыйПериод") <> Неопределено И ТаблицаПоАвансам.Колонки.Найти("ЗаписьДополнительногоЛиста") <> Неопределено 
					И ТекСтрокаВычета.ЗаписьДополнительногоЛиста И (ЗначениеЗаполнено(ТекСтрокаВычета.КорректируемыйПериод ) Или ЗначениеЗаполнено(ТекСтрокаВычета.абс_ПериодОтражения))  Тогда					
						Если ЗначениеЗаполнено(ТекСтрокаВычета.абс_ПериодОтражения) Тогда
							Движение.СубконтоДт.ас_ПериодыОтражения = ТекСтрокаВычета.абс_ПериодОтражения;							
						ИначеЕсли КонецДня(ТекСтрокаВычета.КорректируемыйПериод) <> КонецДня(Дата) Тогда
						ГодПериода = Год(ТекСтрокаВычета.КорректируемыйПериод);
						МесяцПериода = Месяц(ТекСтрокаВычета.КорректируемыйПериод);
						Если МесяцПериода < 10 Тогда
							МесяцПериода = "0" + СокрЛП(МесяцПериода);
						КонецЕсли;
						аСтрокаКода = СокрЛП(ГодПериода) + СокрЛП(МесяцПериода);
						аСтрокаКода = СтрЗаменить(СтрЗаменить(аСтрокаКода, " ", ""), Символы.НПП, "");
						Элемент = Справочники.ас_ПериодыОтражения.НайтиПоКоду(аСтрокаКода);
						Движение.СубконтоДт.ас_ПериодыОтражения = Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			КонецЕсли; // АБС Коломиец окончание
			
			Движение.СчетКт			= ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению; //68.22.2
			
			Попытка
			Вр_Контрагент = ?(ТипЗнч(ТекСтрокаВычета.Покупатель) = Тип("СправочникСсылка.Контрагенты")
								,ТекСтрокаВычета.Покупатель
								,ТекСтрокаВычета.ДокументОтгрузки.Контрагент);
			Исключение
			Вр_Контрагент = Справочники.Контрагенты.ПустаяСсылка();				
			КонецПопытки;								
							
			//БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", ТекСтрокаВычета.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", Вр_Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФВыданные",  ТекСтрокаВычета.ДокументОтгрузки);
			
        КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры // ДвиженияПоВычетамНДСсАвансов()

// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСсАвансовВыданных(СтруктураШапкиДокумента, ТаблицаПоАвансамВыданным, Отказ, Заголовок)

	Если ТаблицаПоАвансамВыданным.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Отражение по регистру НДСПредъявленный
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоАвансамВыданным, ТаблицаДвижений_НДСПредъявленный);
	ТаблицаДвижений_НДСПредъявленный.Свернуть("Период, Активность, Организация, СчетФактура, ВидЦенности, СтавкаНДС, Поставщик, ДоговорКонтрагента, ДатаСобытия, Событие, ИсправленныйСчетФактура", "СуммаБезНДС, НДС");
		
	Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения.НДСПредъявленный.ВыполнитьРасход();
		
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоАвансамВыданным, ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	                                                                                                                                                                                                                                           
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период, Активность, Организация, СчетФактура, СтавкаНДС, Поставщик, ДоговорКонтрагента, ДатаСобытия, Событие, ВидЦенности, ЗаписьДополнительногоЛиста, КорректируемыйПериод,ИсправленныйСчетФактура, КодВидаОперации", "СуммаБезНДС, НДС");
		
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	
	// Сформировать проводки по записям книги покупок
	Для Каждого ТекСтрокаВычета Из ТаблицаПоАвансамВыданным Цикл
		Если ТекСтрокаВычета.НДС = 0 Тогда
			ПродолжитЬ;
		КонецЕсли; 
		
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация =  СтруктураШапкиДокумента.Организация;
		Движение.Сумма = ТекСтрокаВычета.НДС;
		Движение.Содержание = "Вычет НДС с выданного аванса";
		Движение.НомерЖурнала = "НДС";

		
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		Если Движение.Период >= '20120101000000' Тогда // АБС Коломиец начало
		Если Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ас_ПериодыОтражения) <> Неопределено Тогда
			Если ТаблицаПоАвансамВыданным.Колонки.Найти("КорректируемыйПериод") <> Неопределено И ТаблицаПоАвансамВыданным.Колонки.Найти("ЗаписьДополнительногоЛиста") <> Неопределено 
				И ТекСтрокаВычета.ЗаписьДополнительногоЛиста И (ЗначениеЗаполнено(ТекСтрокаВычета.КорректируемыйПериод) Или ЗначениеЗаполнено(ТекСтрокаВычета.абс_ПериодОтражения))  Тогда					
						Если ЗначениеЗаполнено(ТекСтрокаВычета.абс_ПериодОтражения) Тогда
							Движение.СубконтоДт.ас_ПериодыОтражения = ТекСтрокаВычета.абс_ПериодОтражения;							
						ИначеЕсли КонецДня(ТекСтрокаВычета.КорректируемыйПериод) <> КонецДня(Дата) Тогда
					ГодПериода = Год(ТекСтрокаВычета.КорректируемыйПериод);
					МесяцПериода = Месяц(ТекСтрокаВычета.КорректируемыйПериод);
					Если МесяцПериода < 10 Тогда
						МесяцПериода = "0" + СокрЛП(МесяцПериода);
					КонецЕсли;
					аСтрокаКода = СокрЛП(ГодПериода) + СокрЛП(МесяцПериода);
					аСтрокаКода = СтрЗаменить(СтрЗаменить(аСтрокаКода, " ", ""), Символы.НПП, "");
					Элемент = Справочники.ас_ПериодыОтражения.НайтиПоКоду(аСтрокаКода);
					Движение.СубконтоДт.ас_ПериодыОтражения = Элемент;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		КонецЕсли; // АБС Коломиец окончание
		
		
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным; //76.ВА

		Попытка
		Вр_Контрагент = ?(ТипЗнч(ТекСтрокаВычета.Поставщик) = Тип("СправочникСсылка.Контрагенты")
							,ТекСтрокаВычета.Поставщик
							,ТекСтрокаВычета.СчетФактура.Контрагент);   
		Исключение
		Вр_Контрагент = Справочники.Контрагенты.ПустаяСсылка();				
		КонецПопытки;							
		
		//БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", ТекСтрокаВычета.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", Вр_Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", ТекСтрокаВычета.СчетФактура);

	КонецЦикла; 

КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()

// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСпоНалоговомуАгенту(СтруктураШапкиДокумента, ТаблицаПоВычетамНалоговыйАгент, Отказ, Заголовок)

	Если ТаблицаПоВычетамНалоговыйАгент.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Отражение по регистру "НДС предъявленный"
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоВычетамНалоговыйАгент, ТаблицаДвижений_НДСПредъявленный);
	//АБС ВСТАВКА №55271 НАЧАЛО «21 января 2015 г.», Пополитов
	//ТаблицаДвижений_НДСПредъявленный.Свернуть("Период,Активность,Организация,СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,Поставщик,ДоговорКонтрагента,ДатаСобытия,Событие","СуммаБезНДС,НДС");
 	ТаблицаДвижений_НДСПредъявленный.Свернуть(
		"Период,Активность,Организация,СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,Поставщик,ДоговорКонтрагента,ДатаСобытия,Событие,ИсправленныйСчетФактура",
		"СуммаБезНДС,НДС");
 	//\\АБС ВСТАВКА №55271 КОНЕЦ   	
	
	Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения.НДСПредъявленный.ВыполнитьРасход();
																																  	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("ДокументОтгрузкиДата",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоВычетамНалоговыйАгент,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		
		
		Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
			Если СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
				Если СтрокаЗаписи.ЗаписьДополнительногоЛиста = Ложь Тогда
					СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.ДокументОтгрузкиДата);
				Иначе
					СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
				КонецЕсли; 
				СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
				
			КонецЕсли;
		КонецЦикла; 
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.ДокументОтгрузкиДата);
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Состояние);
		
		// Отражение по регистру НДСПредъявленныйРеализация0
		ТаблицаДвижений_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоВычетамНалоговыйАгент,ТаблицаДвижений_НДСПредъявленныйРеализация0);
		
		Движения.НДСПредъявленныйРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
		Движения.НДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
		
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоВычетамНалоговыйАгент,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	КонецЕсли; 
	
	//АБС ВСТАВКА №55271 НАЧАЛО «21 января 2015 г.», Пополитов
	//ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,СчетУчетаНДС,Поставщик,ДоговорКонтрагента,ЗаписьДополнительногоЛиста,КорректируемыйПериод,ДатаСобытия,Событие,ВидЦенности","СуммаБезНДС,НДС");
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть(
		"Период,Активность,Организация,СчетФактура,ДокументОплаты,ДатаОплаты,НомерДокументаОплаты,ДатаДокументаОплаты,СтавкаНДС,СчетУчетаНДС,Поставщик,ДоговорКонтрагента,ЗаписьДополнительногоЛиста,
		|КорректируемыйПериод,ДатаСобытия,Событие,ВидЦенности,ИсправленныйСчетФактура, КодВидаОперации",
		"СуммаБезНДС,НДС");
	//\\АБС ВСТАВКА №55271 КОНЕЦ 	
		
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	                                                                                                                                                                                        
	// Сформировать проводи по записям книги покупок
	Для каждого ТекСтрокаВычета Из ТаблицаПоВычетамНалоговыйАгент Цикл
		Если ТекСтрокаВычета.НДС = 0 Тогда
			ПродолжитЬ;
		КонецЕсли; 
		                                                                                                                                                                                               
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация =  СтруктураШапкиДокумента.Организация;
		Движение.Сумма = ТекСтрокаВычета.НДС;
		Движение.Содержание = "НДС";
		Движение.НомерЖурнала = "НДС";
		
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		Если ПредъявленНДСКВычету0 Тогда // подстраховка для ручного ввода
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0; //19.07
		Иначе
			Движение.СчетКт = ТекСтрокаВычета.СчетУчетаНДС; //19.чч
		КонецЕсли;

		Попытка
		Вр_Контрагент = ?(ТипЗнч(ТекСтрокаВычета.Поставщик) = Тип("СправочникСсылка.Контрагенты")
							,ТекСтрокаВычета.Поставщик
							,ТекСтрокаВычета.СчетФактура.Контрагент); 	
		Исключение
		Вр_Контрагент = Справочники.Контрагенты.ПустаяСсылка();				
		КонецПопытки;							
		
		//БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", ТекСтрокаВычета.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", Вр_Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", ТекСтрокаВычета.СчетФактура);
		
		Если ПредъявленНДСКВычету0 Тогда // Дополнительное субконто по 19.07
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДокументыРеализации", ТекСтрокаВычета.ДокументОтгрузки);
		КонецЕсли;

	КонецЦикла; 

КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()


// {{ТТК Сладков А. Заявка №7740621  19.07.2016 начало

//Процедура ДвиженияПоВычетамПриИзмененииСтоимости(СтруктураШапкиДокумента, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок)
//	
//	ТаблицаПоВычетамПриИзмененииСтоимости.Свернуть(
//		"Организация, ДатаСобытия, Поставщик, СчетФактура, ДатаСчетаФактуры, СтавкаНДС, ВидЦенности, СчетУчетаНДС, ИсправленныйСчетФактура, ИсправленныйСчетФактураДата, КодВидаОперации", 
//		"СуммаБезНДС, НДС");
//		
//	Если ТаблицаПоВычетамПриИзмененииСтоимости.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	НачалоНалоговогоПериода = НачалоКвартала(СтруктураШапкиДокумента.Дата);
//	КонецНалоговогоПериода  = КонецДня(КонецКвартала(СтруктураШапкиДокумента.Дата));
//	
//	Для Каждого СтрокаДвижения Из ТаблицаПоВычетамПриИзмененииСтоимости Цикл
//		
//		Если НЕ ЗначениеЗаполнено(СтрокаДвижения.ИсправленныйСчетФактура) Тогда
//			СтрокаДвижения.ИсправленныйСчетФактура = Неопределено;
//			Если СтрокаДвижения.ДатаСчетаФактуры >= НачалоНалоговогоПериода 
//				И СтрокаДвижения.ДатаСчетаФактуры <= КонецНалоговогоПериода Тогда
//				СтрокаДвижения.ДатаСобытия = СтрокаДвижения.ДатаСчетаФактуры;
//			Иначе
//				СтрокаДвижения.ДатаСобытия = СтруктураШапкиДокумента.Дата;
//			КонецЕсли;
//		Иначе
//			Если СтрокаДвижения.ИсправленныйСчетФактураДата >= НачалоНалоговогоПериода 
//				И СтрокаДвижения.ИсправленныйСчетФактураДата <= КонецНалоговогоПериода Тогда
//				СтрокаДвижения.ДатаСобытия = СтрокаДвижения.ИсправленныйСчетФактураДата;
//			Иначе
//				СтрокаДвижения.ДатаСобытия = СтруктураШапкиДокумента.Дата;
//			КонецЕсли;
//        КонецЕсли;	
//		
//		Движение = Движения.НДСПредъявленный.ДобавитьРасход();
//		
//		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
//		Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
//		Движение.ДатаСобытия = СтруктураШапкиДокумента.Дата;
//		Движение.Период 	 = СтруктураШапкиДокумента.Дата;
//		Движение.Событие 	 = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
//		
//		Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();	
//			
//		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
//		Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
//		Движение.ДатаСобытия = СтруктураШапкиДокумента.Дата;
//		Движение.Период 	 = СтруктураШапкиДокумента.Дата;
//		Движение.Событие 	 = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
//		Если СтруктураШапкиДокумента.Дата >= '20150101' Тогда
//			Движение.КодВидаОперации = "18";
//		КонецЕсли;
//		
//		Если СтрокаДвижения.НДС = 0 Тогда
//			Продолжить;
//		КонецЕсли; 
//        		
//		Движение = Движения.Хозрасчетный.Добавить();
//				                                                                                                                                                                                               
//		Движение.Период = СтруктураШапкиДокумента.Дата;
//		Движение.Организация =  СтруктураШапкиДокумента.Организация;
//		Движение.Сумма = СтрокаДвижения.НДС;
//		Движение.Содержание = "НДС";
//		
//		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС;
//		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
//		
//		Движение.СчетКт = СтрокаДвижения.СчетУчетаНДС; 
//		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", СтрокаДвижения.Поставщик);
//		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", СтрокаДвижения.СчетФактура);
//						
//	КонецЦикла;	
//	
//	Движения.НДСПредъявленный.Записывать = Истина;
//	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;
//	Движения.Хозрасчетный.Записывать = Истина;
//	
//КонецПроцедуры


Процедура ДвиженияПоВычетамПриИзмененииСтоимости(СтруктураШапкиДокумента, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок)
	
	ТаблицаПоВычетамПриИзмененииСтоимости.Свернуть(
		"Организация,Событие,ДатаСчетаФактуры,ДатаИсправленногоСчетаФактуры,ДатаСобытия,Поставщик,СчетФактура,СтавкаНДС,ВидЦенности,
		|СчетУчетаНДС,ИсправленныйСчетФактура,Содержание,Период,Регистратор,КодВидаОперации",
		"СуммаБезНДС,НДС");
		
	Если ТаблицаПоВычетамПриИзмененииСтоимости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачалоНалоговогоПериода = НачалоКвартала(СтруктураШапкиДокумента.Дата);
	КонецНалоговогоПериода  = КонецДня(КонецКвартала(СтруктураШапкиДокумента.Дата));
	
	Для Каждого СтрокаДвижения Из ТаблицаПоВычетамПриИзмененииСтоимости Цикл
		
		Если ЗначениеЗаполнено(СтрокаДвижения.ДатаИсправленногоСчетаФактуры) Тогда
			Если СтрокаДвижения.ДатаИсправленногоСчетаФактуры >= НачалоНалоговогоПериода
				И СтрокаДвижения.ДатаИсправленногоСчетаФактуры <= КонецНалоговогоПериода Тогда
				СтрокаДвижения.ДатаСобытия = СтрокаДвижения.ДатаИсправленногоСчетаФактуры;

			Иначе
				СтрокаДвижения.ДатаСобытия = СтруктураШапкиДокумента.Дата;
			КонецЕсли;
		Иначе
			Если СтрокаДвижения.ДатаСчетаФактуры >= НачалоНалоговогоПериода 
				И СтрокаДвижения.ДатаСчетаФактуры <= КонецНалоговогоПериода Тогда
				СтрокаДвижения.ДатаСобытия = СтрокаДвижения.ДатаСчетаФактуры;
			Иначе
				СтрокаДвижения.ДатаСобытия = СтруктураШапкиДокумента.Дата;
			КонецЕсли;
		КонецЕсли;
		
		Движение = Движения.НДСПредъявленный.ДобавитьРасход();

		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);




		
		Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);







		
		Если СтрокаДвижения.НДС = 0 Тогда
			Продолжить;
		КонецЕсли; 

		Движение = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения, "Период,Организация,Содержание");


		Движение.Сумма = СтрокаДвижения.НДС;

		
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС;
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		Движение.СчетКт = СтрокаДвижения.СчетУчетаНДС; 
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", СтрокаДвижения.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", СтрокаДвижения.СчетФактура);

	КонецЦикла;
	
	Движения.НДСПредъявленный.Записывать = Истина;
	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры	
// }}ТТК Сладков А. Заявка №7740621  19.07.2016 окончание
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("НДСНалоговыйПериод");
	Если Не СтруктураШапкиДокумента.Свойство("НДСНалоговыйПериод") Тогда
		СтруктураШапкиДокумента.Вставить("НДСНалоговыйПериод", ?(Дата < '20080101', Перечисления.Периодичность.Месяц, Перечисления.Периодичность.Квартал));
	КонецЕсли; 
	ttk_ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицаПоАвансам, ТаблицаПоАвансамВыданным, ТаблицаПоВычетамНалоговыйАгент, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок) Экспорт
	
	ВерсияПостановления1137 = УчетНДС.ВерсияПостановленияНДС1137(СтруктураШапкиДокумента.Дата);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",		"Ссылка.Организация");
	СтруктураПолей.Вставить("ВидЦенности",		"ВидЦенности");
	СтруктураПолей.Вставить("Поставщик",		"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",		"СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",	"СчетФактура.Дата");
	СтруктураПолей.Вставить("ДокументОплаты",	"ДокументОплаты");
	СтруктураПолей.Вставить("ДатаОплаты",		"ДатаОплаты");
	СтруктураПолей.Вставить("ДатаДокументаОплаты",	"ДокументОплаты.Дата");
	СтруктураПолей.Вставить("ДатаСобытия",		"ДатаОплаты");
	СтруктураПолей.Вставить("СтавкаНДС",		"СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",		"СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				"НДС");
	СтруктураПолей.Вставить("СчетУчетаНДС",		"СчетУчетаНДС");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	СтруктураПолей.Вставить("абс_ПериодОтражения",			"абс_ПериодОтражения");
	//++ Задача № 10655 Логинчев А.С. 16.05.2012 15:52:37
	//АБС+ Тупиков в счете 19.БП поменяли первое субконто на "Расходы будущих периодов"
	//Если НДСПоНовымВидамДеятельности Тогда
	СтруктураПолей.Вставить("РасходыБудущихПериодов","абс_РасходыБудущихПериодов");
	//КонецЕсли;
	//-- Задача № 10655 Логинчев А.С.
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураПолей.Вставить("ДокументОтгрузки",	"ДокументОтгрузки");
		СтруктураПолей.Вставить("ДокументОтгрузкиДата",	"ДокументОтгрузки.Дата");
		СтруктураПолей.Вставить("ДокументОтгрузкиКонтрагент",	"ДокументОтгрузки.Контрагент");
		СтруктураПолей.Вставить("Состояние",	"Состояние");
	КонецЕсли; 

	СтруктураПолей.Вставить("ИсправленныйСчетФактура",	  "ИсправленныйСчетФактура");
	СтруктураПолей.Вставить("ИсправленныйСчетФактураДата", "ИсправленныйСчетФактура.Дата");
	СтруктураПолей.Вставить("НомерДокументаОплаты",			"НомерДокументаОплаты");
	СтруктураПолей.Вставить("КодВидаОперации",				"КодВидаОперации");
	
	Если ВерсияПостановления1137 = 3 Тогда
		СтруктураПолей.Вставить("ДатаДокументаОплаты",		"ДатаДокументаОплаты");
	Иначе	
		СтруктураПолей.Вставить("ДатаДокументаОплаты",		"ДокументОплаты.Дата");	
	КонецЕсли;			
	
	РезультатЗапросаПоВычетам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВычетПоПриобретеннымЦенностям", СтруктураПолей);
	ТаблицаПоВычетам = 			ПодготовитьТаблицуПоВычетам(РезультатЗапросаПоВычетам,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	// {{ТТК Сладков А. Заявка №7740621   20.07.2016 начало
	//// Подготовим данные необходимые для проведения и проверки заполнения табличной части по авансам.
	//СтруктураПолей = Новый Структура;
	//СтруктураПолей.Вставить("Организация",		 "Ссылка.Организация");
	//СтруктураПолей.Вставить("Покупатель",		 "Покупатель");
	//СтруктураПолей.Вставить("Поставщик",		 "Покупатель");
	//СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	//СтруктураПолей.Вставить("СчетФактура",	 	 "СчетФактура");
	//СтруктураПолей.Вставить("СтавкаНДС",		 "СтавкаНДС");
	//СтруктураПолей.Вставить("СуммаБезНДС",		 "СуммаБезНДС");
	//СтруктураПолей.Вставить("НДС",				 "НДС");
	//СтруктураПолей.Вставить("ВалютнаяСуммаСНДС", "ВалютнаяСумма");
	//СтруктураПолей.Вставить("ВалютаАванса",	 	 "ВалютаДокумента");
	//СтруктураПолей.Вставить("ДатаСобытия",	 	 "ДатаСобытия");
	//СтруктураПолей.Вставить("ДатаОплаты",		 "ДатаСобытия");
	//СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	//СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	//СтруктураПолей.Вставить("абс_ПериодОтражения",			"абс_ПериодОтражения");
	//СтруктураПолей.Вставить("ИсправленныйСчетФактура",	  	"ИсправленныйСчетФактура");
	//СтруктураПолей.Вставить("ВозвратАвансовПолученных", 	"ВозвратАвансовПолученных");
	//СтруктураПолей.Вставить("КодВидаОперации", 			"КодВидаОперации");

	//
	//Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
	//	СтруктураПолей.Вставить("ДокументОтгрузки",	"ДокументОтгрузки");
	//	СтруктураПолей.Вставить("ДокументОплаты",	"ДокументОтгрузки");
	//	СтруктураПолей.Вставить("ДокументОтгрузкиДата",	"ДокументОтгрузки.Дата");
	//	СтруктураПолей.Вставить("Состояние",	"Состояние");
	//КонецЕсли; 
	//
	//РезультатЗапросаПоАвансам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НДСсАвансов", СтруктураПолей);
	
	
		
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                     Ссылка);
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("ДатаДокумента",              Дата);
	Запрос.УстановитьПараметр("ПустыеДокументыИсправления", УчетНДС.МассивПустыхИсправленныхСчетовФактур());
	Запрос.УстановитьПараметр("ПредъявленНДСКВычету0",      ПредъявленНДСКВычету0);
	Запрос.Текст = ТекстЗапросаАвансыПолученные();
	
	РезультатЗапросаПоАвансам = Запрос.Выполнить();
	ТаблицаПоАвансам 		  = 	ПодготовитьТаблицуПоАвансам(РезультатЗапросаПоАвансам, СтруктураШапкиДокумента);
	// }}ТТК Сладков А. Заявка №7740621  20.07.2016 окончание	
	
	
	// {{ТТК Сладков А. Заявка №7740621 20.07.2016 начало
	//// Подготовим данные необходимые для проведения и проверки заполнения табличной части по авансам.
	//СтруктураПолей = Новый Структура;
	//СтруктураПолей.Вставить("Организация",		 "Ссылка.Организация");
	//СтруктураПолей.Вставить("Поставщик",		 "Поставщик");
	//СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	//СтруктураПолей.Вставить("СчетФактура",	 	 "СчетФактура");
	//СтруктураПолей.Вставить("ДатаСчетаФактуры",	 "СчетФактура.Дата");
	//СтруктураПолей.Вставить("СтавкаНДС",		 "СтавкаНДС");
	//СтруктураПолей.Вставить("СуммаБезНДС",		 "СуммаБезНДС");
	//СтруктураПолей.Вставить("НДС",				 "НДС");
	//СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	//СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	//СтруктураПолей.Вставить("ИсправленныйСчетФактура",	  "ИсправленныйСчетФактура");
	//СтруктураПолей.Вставить("абс_ПериодОтражения",			"абс_ПериодОтражения");
	//СтруктураПолей.Вставить("КодВидаОперации", 			"КодВидаОперации");

	//	
	//РезультатЗапросаПоАвансамВыданным = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НДСсАвансовВыданных", СтруктураПолей);
	//ТаблицаПоАвансамВыданным = ПодготовитьТаблицуПоАвансамВыданным(РезультатЗапросаПоАвансамВыданным, СтруктураШапкиДокумента);
	//
	//
	
		
	// Авансы выданные

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",                "Ссылка.Организация");
	СтруктураПолей.Вставить("Поставщик",                  "Поставщик");
	СтруктураПолей.Вставить("ДоговорКонтрагента",         "ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетФактура",                "СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",           "СчетФактура.Дата");
	СтруктураПолей.Вставить("СтавкаНДС",                  "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",                "СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",                        "НДС");

	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста", "ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",       "КорректируемыйПериод");
	СтруктураПолей.Вставить("абс_ПериодОтражения",			"абс_ПериодОтражения");
	СтруктураПолей.Вставить("КодВидаОперации", 				"КодВидаОперации");

	
	
	РезультатЗапросаПоАвансамВыданным = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НДСсАвансовВыданных", СтруктураПолей);
	ТаблицаПоАвансамВыданным = ПодготовитьТаблицуПоАвансамВыданным(РезультатЗапросаПоАвансамВыданным, СтруктураШапкиДокумента);
	// }}ТТК Сладков А. Заявка №7740621  20.07.2016 окончание
	
	
	// {{ТТК Сладков А. Заявка №7740621  20.07.2016 начало
	//СтруктураПолей = Новый Структура;
	//СтруктураПолей.Вставить("Организация",					"Ссылка.Организация");
	//СтруктураПолей.Вставить("ВидЦенности",					"ВидЦенности");
	//СтруктураПолей.Вставить("Поставщик",					"Поставщик");
	//СтруктураПолей.Вставить("ДоговорКонтрагента",			"ДоговорКонтрагента");
	//СтруктураПолей.Вставить("СчетФактура",					"СчетФактура");
	//СтруктураПолей.Вставить("ДатаСчетаФактуры",				"СчетФактура.Дата");
	//СтруктураПолей.Вставить("ДокументОплаты",				"ДокументОплаты");
	//СтруктураПолей.Вставить("ДатаОплаты",					"ДатаОплаты");
	//СтруктураПолей.Вставить("ДатаДокументаОплаты",			"ДокументОплаты.Дата");
	//СтруктураПолей.Вставить("ДатаСобытия",					"Ссылка.Дата");
	//СтруктураПолей.Вставить("СтавкаНДС",					"СтавкаНДС");
	//СтруктураПолей.Вставить("СуммаБезНДС",					"СуммаБезНДС");
	//СтруктураПолей.Вставить("НДС",							"НДС");
	//СтруктураПолей.Вставить("СчетУчетаНДС",					"СчетУчетаНДС");
	//СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	//СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	//СтруктураПолей.Вставить("ИсправленныйСчетФактура",	  "ИсправленныйСчетФактура");
	//СтруктураПолей.Вставить("абс_ПериодОтражения",			"абс_ПериодОтражения");

	//Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
	//	СтруктураПолей.Вставить("ДокументОтгрузки",	"ДокументОтгрузки");
	//	СтруктураПолей.Вставить("ДокументОтгрузкиДата",	"ДокументОтгрузки.Дата");
	//	СтруктураПолей.Вставить("Состояние",	"Состояние");
	//КонецЕсли; 

	//СтруктураПолей.Вставить("ДокументОплатыНДС",			"ДокументОплатыНДС");
	//
	//Если ВерсияПостановления1137 = 3 Тогда 
	//	СтруктураПолей.Вставить("ДокументОплатыНДС",			"ДокументОплатыНДС");
	//	СтруктураПолей.Вставить("ДатаДокументаОплаты",			"ДокументОплатыНДС.Дата");
	//Иначе
	//	СтруктураПолей.Вставить("ДатаДокументаОплаты",			"ДокументОплаты.Дата");
	//КонецЕсли;
	//СтруктураПолей.Вставить("КодВидаОперации", 			"КодВидаОперации");

	//
	//РезультатЗапросаПоНалоговомуАгенту = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВычетНДСПоНалоговомуАгенту", СтруктураПолей);
	//ТаблицаПоВычетамНалоговыйАгент = ПодготовитьТаблицуПоВычетамНалоговыйАгент(РезультатЗапросаПоНалоговомуАгенту, СтруктураШапкиДокумента, Отказ, Заголовок);

	//// Подготовим данные необходимые для проведения и проверки заполнения табличной части по вычету при уменьшении стоимости.
	//СтруктураПолей = Новый Структура;
	//СтруктураПолей.Вставить("Организация",		 	   "Ссылка.Организация");
	//СтруктураПолей.Вставить("ДатаСобытия",		 	   "Ссылка.Дата");
	//СтруктураПолей.Вставить("Поставщик",		  	   "Поставщик");
	//СтруктураПолей.Вставить("СчетФактура",	 	 	   "СчетФактура");
	//СтруктураПолей.Вставить("ДатаСчетаФактуры",		   "СчетФактура.Дата");
	//СтруктураПолей.Вставить("СтавкаНДС",		 	   "СтавкаНДС");
	//СтруктураПолей.Вставить("СуммаБезНДС",		 	   "СуммаБезНДС");
	//СтруктураПолей.Вставить("НДС",				 	   "НДС");
	//СтруктураПолей.Вставить("ВидЦенности",	 	 	   "ВидЦенности");	
	//СтруктураПолей.Вставить("СчетУчетаНДС",	 	 	   "СчетУчетаНДС");	
	//СтруктураПолей.Вставить("ИсправленныйСчетФактура", "ИсправленныйСчетФактура");
	//СтруктураПолей.Вставить("ИсправленныйСчетФактураДата", "ИсправленныйСчетФактура.Дата");
	//СтруктураПолей.Вставить("КодВидаОперации", 			"КодВидаОперации");
	//
	//РезультатЗапросаПоВычетамПриИзмененииСтоимости = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВычетПриИзмененииСтоимостиВСторонуУменьшения", СтруктураПолей);
	//ТаблицаПоВычетамПриИзмененииСтоимости = РезультатЗапросаПоВычетамПриИзмененииСтоимости.Выгрузить();

	
	
	// Изменение стоимости в сторону уменьшения	
	Запрос.Текст = ТекстЗапросаИзменениеСтоимостиВСторонуУменьшения();
	ТаблицаПоВычетамПриИзмененииСтоимости = Запрос.Выполнить().Выгрузить();
	
	// Налоговый агент
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",                "Ссылка.Организация");
	СтруктураПолей.Вставить("ВидЦенности",                "ВидЦенности");
	СтруктураПолей.Вставить("Поставщик",                  "Поставщик");
	СтруктураПолей.Вставить("ДоговорКонтрагента",         "ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетФактура",                "СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",           "СчетФактура.Дата");
	СтруктураПолей.Вставить("ДокументОплаты",             "ДокументОплаты");
	СтруктураПолей.Вставить("ДатаОплаты",                 "ДатаОплаты");
	СтруктураПолей.Вставить("ДатаСобытия",                "Ссылка.Дата");
	СтруктураПолей.Вставить("СтавкаНДС",                  "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",                "СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",                        "НДС");
	СтруктураПолей.Вставить("СчетУчетаНДС",               "СчетУчетаНДС");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста", "ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",       "КорректируемыйПериод");
	СтруктураПолей.Вставить("ИсправленныйСчетФактура",    "ИсправленныйСчетФактура");
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураПолей.Вставить("ДокументОтгрузки",       "ДокументОтгрузки");
		СтруктураПолей.Вставить("ДокументОтгрузкиДата",   "ДокументОтгрузки.Дата");
		СтруктураПолей.Вставить("Состояние",              "Состояние");
	КонецЕсли; 
	
	СтруктураПолей.Вставить("ДокументОплатыНДС",          "ДокументОплатыНДС");
	
	Если ВерсияПостановления1137 = 3 Тогда 
		СтруктураПолей.Вставить("ДокументОплатыНДС",      "ДокументОплатыНДС");
		СтруктураПолей.Вставить("ДатаДокументаОплаты",    "ДокументОплатыНДС.Дата");
	Иначе
		СтруктураПолей.Вставить("ДатаДокументаОплаты",    "ДокументОплаты.Дата");
	КонецЕсли;
	СтруктураПолей.Вставить("КодВидаОперации", 			"КодВидаОперации");

	РезультатЗапросаПоНалоговомуАгенту = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВычетНДСПоНалоговомуАгенту", СтруктураПолей);
	ТаблицаПоВычетамНалоговыйАгент = ПодготовитьТаблицуПоВычетамНалоговыйАгент(РезультатЗапросаПоНалоговомуАгенту, СтруктураШапкиДокумента, Отказ, Заголовок);

	// }}ТТК Сладков А. Заявка №7740621  20.07.2016 окончание
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, Режим) Экспорт
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицаПоАвансам, ТаблицаПоАвансамВыданным, ТаблицаПоВычетамНалоговыйАгент, ТаблицаПоВычетамПриИзмененииСтоимости;
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицаПоАвансам, ТаблицаПоАвансамВыданным, ТаблицаПоВычетамНалоговыйАгент, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиПоВычетам(СтруктураШапкиДокумента,ТаблицаПоВычетам, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоАвансам(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоАвансамВыданным(СтруктураШапкиДокумента, ТаблицаПоАвансамВыданным, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоВычетамНалоговыйАгент(СтруктураШапкиДокумента, ТаблицаПоВычетамНалоговыйАгент, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицаПоАвансам, ТаблицаПоАвансамВыданным, ТаблицаПоВычетамНалоговыйАгент, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

//АБС-Пр2 9182+

// Процедура вызывается из ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
Функция абс_ПолучитьДанныеОРаспределенныхОплатахПоАвансовым(СчетФактура)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Организация,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Период,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Регистратор,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Документ,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.ДатаОплаты,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.СуммаРегРасход,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.СуммаРегПриход,
	|	ВЫБОР
	|		КОГДА РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Регистратор В (&СписокСчетовФактур)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоДокументПриобретения
	|ПОМЕСТИТЬ РасчетыПоПриобретению
	|ИЗ
	|	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Обороты(, &ДатаГраница, Регистратор, Организация = &Организация) КАК РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты
	|ГДЕ
	|	(РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Регистратор В (&СписокСчетовФактур)
	|			ИЛИ РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Документ В (&СписокСчетовФактур))
	|	И (НЕ РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Регистратор = РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОбороты.Документ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоПриобретению.Организация,
	|	ВЫБОР
	|		КОГДА РасчетыПоПриобретению.ЭтоДокументПриобретения
	|			ТОГДА РасчетыПоПриобретению.Регистратор
	|		ИНАЧЕ РасчетыПоПриобретению.Документ
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА РасчетыПоПриобретению.ЭтоДокументПриобретения
	|			ТОГДА РасчетыПоПриобретению.Документ
	|		ИНАЧЕ РасчетыПоПриобретению.Регистратор
	|	КОНЕЦ КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА РасчетыПоПриобретению.ЭтоДокументПриобретения
	|			ТОГДА РасчетыПоПриобретению.ДатаОплаты
	|		ИНАЧЕ РасчетыПоПриобретению.Период
	|	КОНЕЦ КАК ДатаОплаты,
	|	ВЫБОР
	|		КОГДА РасчетыПоПриобретению.ЭтоДокументПриобретения
	|			ТОГДА РасчетыПоПриобретению.СуммаРегРасход
	|		ИНАЧЕ РасчетыПоПриобретению.СуммаРегПриход
	|	КОНЕЦ КАК РаспределеннаяОплата,
	|	ЛОЖЬ КАК РасчетыСБюджетом
	|ИЗ
	|	РасчетыПоПриобретению КАК РасчетыПоПриобретению
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.Организация,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.СчетФактура,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.ДокументОплаты,
	|	ЕСТЬNULL(НДСУчетРаспределенныхОплатПоставщикамОстатки.ДокументОплаты.ДатаОплаты, НДСУчетРаспределенныхОплатПоставщикамОстатки.ДокументОплаты.Дата),
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.РаспределеннаяСуммаОстаток,
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.НДСУчетРаспределенныхОплатПоставщикам.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И (НЕ ДокументОплаты = НЕОПРЕДЕЛЕНО)
	|				И РасчетыСБюджетом = ИСТИНА) КАК НДСУчетРаспределенныхОплатПоставщикамОстатки
	|ГДЕ
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.СчетФактура В(&СписокСчетовФактур)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОплаты";
	
	Запрос.УстановитьПараметр("Дата", 		КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СчетФактура);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	РаспределенныеОплаты = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	РаспределенныеОплаты.Колонки.Добавить("QueryId", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6)));

	Если РаспределенныеОплаты.Количество()>0 Тогда
		QueryId = Новый Массив(РаспределенныеОплаты.Количество());
		Для Счетчик=0 По РаспределенныеОплаты.Количество()-1 Цикл
			QueryId[Счетчик] = Счетчик;
		КонецЦикла; 
		РаспределенныеОплаты.ЗагрузитьКолонку(QueryId,"QueryId");
	КонецЕсли; 
	
	Возврат РаспределенныеОплаты;	

КонецФункции // ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ()
 
Процедура УдалитьСтрокиНеоплаченныеКомандировачныеИПредставительские(ТаблицаДанных) //ст. 171 НК РФ п.7
	
	// Удаление строк с видом ценности "Командировочные расходы", "Представительские расходы", но пустым значением "Документ оплаты"
	
	Если абс_ПриниматьКомандировочныеИПредставительскиеПослеОплаты Тогда
		СтрокиКУдалению = Новый Массив;    		
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл			
			Если (СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы
				Или СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы) 
				И Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;    			
		КонецЦикла; 		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДанных.Удалить(СтрокаКУдалению);
		КонецЦикла; 		
	КонецЕсли;
	
КонецПроцедуры

//АБС ВСТАВКА №37325 НАЧАЛО «5 февраля 2014 г.», Пополитов
Процедура абс_УдалитьСтрокиНеоплаченныеНДСдоРеорганизации(ТаблицаДанных) 
	
	Счет_19_ДР = ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.ДР");
	
	Если не абс_НДС_до_реорганизации_после_оплаты или Счет_19_ДР.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;    		
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл			
		Если СтрокаТаблицы.СчетУчетаНДС = Счет_19_ДР
			и не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;    			
	КонецЦикла; 		
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДанных.Удалить(СтрокаКУдалению);
	КонецЦикла; 		
		
КонецПроцедуры	
//\\АБС ВСТАВКА №37325 КОНЕЦ 	


// {{ТТК Сладков А. Заявка № 20.07.2016 начало
Функция ТекстЗапросаАвансыПолученные()
	
	Возврат
// +++ввв 17.10.2016 г.
	"ВЫБРАТЬ
	|	ФормированиеЗаписейКнигиПокупокНДСсАвансов.СчетФактура КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ДокументыОснования
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок.НДСсАвансов КАК ФормированиеЗаписейКнигиПокупокНДСсАвансов
	|ГДЕ
	|	ФормированиеЗаписейКнигиПокупокНДСсАвансов.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МИНИМУМ(СчетФактураВыданный.Ссылка) КАК Ссылка,
	|	СчетФактураВыданный.КодВидаОперации,
	|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураВыданный.ДоговорКонтрагента
	|ПОМЕСТИТЬ СчетаФактурыДокументы_1
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование В
	|			(ВЫБРАТЬ
	|				ВТ_ДокументыОснования.ДокументОснование
	|			ИЗ
	|				ВТ_ДокументыОснования)
	|	И СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.Дата >= ДАТАВРЕМЯ(2015, 10, 1)
	|	И СчетФактураВыданный.Организация = &Организация
	|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураВыданный.ДокументОснование,
	|	СчетФактураВыданный.ДоговорКонтрагента,
	|	СчетФактураВыданный.КодВидаОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыОснования.ДокументОснование
	|ПОМЕСТИТЬ ВТ_ДО_1
	|ИЗ
	|	ВТ_ДокументыОснования КАК ВТ_ДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыДокументы_1 КАК СчетаФактурыДокументы
	|		ПО ВТ_ДокументыОснования.ДокументОснование = СчетаФактурыДокументы.ДокументОснование
	|ГДЕ
	|	СчетаФактурыДокументы.ДокументОснование ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МИНИМУМ(СчетФактураВыданный.Ссылка) КАК Ссылка,
	|	СчетФактураВыданный.КодВидаОперации,
	|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураВыданный.ДоговорКонтрагента
	|ПОМЕСТИТЬ СчетаФактурыДокументы_2
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование В
	|			(ВЫБРАТЬ
	|				ВТ_ДО_1.ДокументОснование
	|			ИЗ
	|				ВТ_ДО_1)
	|	И СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.Дата >= ДАТАВРЕМЯ(2015, 10, 1)
	|	И СчетФактураВыданный.Организация = &Организация
	|	И НЕ СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураВыданный.ДокументОснование,
	|	СчетФактураВыданный.ДоговорКонтрагента,
	|	СчетФактураВыданный.КодВидаОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗачетАвансовПолученных.Покупатель КАК Покупатель,
	|	ЗачетАвансовПолученных.Покупатель КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЗачетАвансовПолученных.ВозвратАвансовПолученных
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученных)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|	КОНЕЦ КАК ВидЦенности,
	|	ВЫБОР
	|		КОГДА &ПредъявленНДСКВычету0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету0)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету)
	|	КОНЕЦ КАК Событие,
	|	ЗачетАвансовПолученных.ДоговорКонтрагента,
	|	ЗачетАвансовПолученных.СчетФактура,
	|	ЗачетАвансовПолученных.СтавкаНДС,
	|	ЗачетАвансовПолученных.СуммаБезНДС,
	|	ЗачетАвансовПолученных.НДС КАК НДС,
	|	ЗачетАвансовПолученных.ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ЗачетАвансовПолученных.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА &ДатаДокумента
	|		ИНАЧЕ ЗачетАвансовПолученных.ДатаСобытия
	|	КОНЕЦ КАК ДатаОплаты,
	|	ЗачетАвансовПолученных.ДокументОтгрузки КАК ДокументОплаты,
	|	ЗачетАвансовПолученных.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ЗачетАвансовПолученных.ДокументОтгрузки.Дата КАК ДокументОтгрузкиДата,
	|	ЗачетАвансовПолученных.ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА ЗачетАвансовПолученных.ЗаписьДополнительногоЛиста
	|			ТОГДА ЗачетАвансовПолученных.КорректируемыйПериод
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗачетАвансовПолученных.ВалютаДокумента КАК ВалютаАванса,
	|	ЗачетАвансовПолученных.ВалютнаяСумма КАК ВалютнаяСуммаСНДС,
	|	ВЫБОР
	|		КОГДА ЗачетАвансовПолученных.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗачетАвансовПолученных.ИсправленныйСчетФактура
	|	КОНЕЦ КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗачетАвансовПолученных.КодВидаОперации = ""26""
	|					ТОГДА ""26""
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(ЕСТЬNULL(СчетаФактурыДокументы.КодВидаОперации, СчетаФактурыДокументы_2.КодВидаОперации), ""22"") = ""26""
	|							ТОГДА ""26""
	|						ИНАЧЕ ""22""
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА """"
	|	КОНЕЦ КАК НомерДокументаОплаты,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаДокументаОплаты,
	|	ЗачетАвансовПолученных.Ссылка.Организация КАК Организация,
	|	ЗачетАвансовПолученных.Состояние,
	|	ЗачетАвансовПолученных.НомерСтроки,
	|	ЗачетАвансовПолученных.абс_ПериодОтражения,
	|	ЗачетАвансовПолученных.ВозвратАвансовПолученных,
	|	ЗачетАвансовПолученных.АвансВосстановленный
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок.НДСсАвансов КАК ЗачетАвансовПолученных
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыДокументы_1 КАК СчетаФактурыДокументы
	|		ПО ЗачетАвансовПолученных.СчетФактура = СчетаФактурыДокументы.ДокументОснование
	|			И ЗачетАвансовПолученных.ДоговорКонтрагента = СчетаФактурыДокументы.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыДокументы_2 КАК СчетаФактурыДокументы_2
	|		ПО ЗачетАвансовПолученных.СчетФактура = СчетаФактурыДокументы_2.ДокументОснование
	|			И ЗачетАвансовПолученных.ДоговорКонтрагента = СчетаФактурыДокументы_2.ДоговорКонтрагента
	|ГДЕ
	|	ЗачетАвансовПолученных.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Покупатель,
	|	ВТ.Поставщик,
	|	ВТ.ВидЦенности,
	|	ВТ.Событие,
	|	ВТ.ДоговорКонтрагента,
	|	ВТ.СчетФактура,
	|	ВТ.СтавкаНДС,
	|	ВТ.СуммаБезНДС,
	|	ВТ.НДС,
	|	ВТ.ДатаСобытия,
	|	ВТ.ДатаОплаты,
	|	ВТ.ДокументОплаты,
	|	ВТ.ДокументОтгрузки,
	|	ВТ.ДокументОтгрузкиДата,
	|	ВТ.ЗаписьДополнительногоЛиста,
	|	ВТ.КорректируемыйПериод,
	|	ВТ.ВалютаАванса,
	|	ВТ.ВалютнаяСуммаСНДС,
	|	ВТ.ИсправленныйСчетФактура,
	|	ВТ.КодВидаОперации,
	|	ВТ.НомерДокументаОплаты,
	|	ВТ.ДатаДокументаОплаты,
	|	ВТ.Организация,
	|	ВТ.Состояние,
	|	ВТ.НомерСтроки,
	|	ВТ.абс_ПериодОтражения,
	|	ВТ.ВозвратАвансовПолученных,
	|	ВТ.АвансВосстановленный
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ВозвратАвансовПолученных,
	|	ВТ.Состояние,
	|	ВТ.Организация,
	|	ВТ.ДатаДокументаОплаты,
	|	ВТ.НомерДокументаОплаты,
	|	ВТ.КодВидаОперации,
	|	ВТ.ИсправленныйСчетФактура,
	|	ВТ.ВидЦенности,
	|	ВТ.абс_ПериодОтражения,
	|	ВТ.ВалютаАванса,
	|	ВТ.КорректируемыйПериод,
	|	ВТ.ЗаписьДополнительногоЛиста,
	|	ВТ.ДокументОтгрузкиДата,
	|	ВТ.ДокументОтгрузки,
	|	ВТ.ДокументОплаты,
	|	ВТ.ДатаОплаты,
	|	ВТ.Событие,
	|	ВТ.ДоговорКонтрагента,
	|	ВТ.ДатаСобытия,
	|	ВТ.Покупатель,
	|	ВТ.Поставщик,
	|	ВТ.СтавкаНДС,
	|	ВТ.СчетФактура,
	|	ВТ.СуммаБезНДС,
	|	ВТ.НДС,
	|	ВТ.ВалютнаяСуммаСНДС,
	|	ВТ.НомерСтроки,
	|	ВТ.АвансВосстановленный";
	//"ВЫБРАТЬ
	//|	ФормированиеЗаписейКнигиПокупокНДСсАвансов.СчетФактура КАК ДокументОснование
	//|ПОМЕСТИТЬ ВТ_ДокументыОснования
	//|ИЗ
	//|	Документ.ФормированиеЗаписейКнигиПокупок.НДСсАвансов КАК ФормированиеЗаписейКнигиПокупокНДСсАвансов
	//|ГДЕ
	//|	ФормированиеЗаписейКнигиПокупокНДСсАвансов.Ссылка = &Ссылка
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ДокументОснование
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	СчетФактураВыданный.Ссылка,
	//|	СчетФактураВыданный.КодВидаОперации,
	//|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
	//|	СчетФактураВыданный.ДоговорКонтрагента
	//|ПОМЕСТИТЬ СчетаФактурыДокументы
	//|ИЗ
	//|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	//|ГДЕ
	//|	СчетФактураВыданный.ДокументОснование В
	//|			(ВЫБРАТЬ
	//|				ВТ_ДокументыОснования.ДокументОснование
	//|			ИЗ
	//|				ВТ_ДокументыОснования)
	//|	И СчетФактураВыданный.Проведен
	//|	И СчетФактураВыданный.Дата >= ДАТАВРЕМЯ(2015, 10, 1)
	//|	И СчетФактураВыданный.Организация = &Организация
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ДокументОснование
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЗачетАвансовПолученных.Покупатель КАК Покупатель,
	//|	ЗачетАвансовПолученных.Покупатель КАК Поставщик,
	//|	ВЫБОР
	//|		КОГДА ЗачетАвансовПолученных.ВозвратАвансовПолученных
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученных)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	//|	КОНЕЦ КАК ВидЦенности,
	//|	ВЫБОР
	//|		КОГДА &ПредъявленНДСКВычету0
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету0)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету)
	//|	КОНЕЦ КАК Событие,
	//|	ЗачетАвансовПолученных.ДоговорКонтрагента,
	//|	ЗачетАвансовПолученных.СчетФактура,
	//|	ЗачетАвансовПолученных.СтавкаНДС,
	//|	ЗачетАвансовПолученных.СуммаБезНДС,
	//|	ЗачетАвансовПолученных.НДС КАК НДС,
	//|	ЗачетАвансовПолученных.ДатаСобытия,
	//|	ВЫБОР
	//|		КОГДА ЗачетАвансовПолученных.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|			ТОГДА &ДатаДокумента
	//|		ИНАЧЕ ЗачетАвансовПолученных.ДатаСобытия
	//|	КОНЕЦ КАК ДатаОплаты,
	//|	ЗачетАвансовПолученных.ДокументОтгрузки КАК ДокументОплаты,
	//|	ЗачетАвансовПолученных.ДокументОтгрузки КАК ДокументОтгрузки,
	//|	ЗачетАвансовПолученных.ДокументОтгрузки.Дата КАК ДокументОтгрузкиДата,
	//|	ЗачетАвансовПолученных.ЗаписьДополнительногоЛиста,
	//|	ВЫБОР
	//|		КОГДА ЗачетАвансовПолученных.ЗаписьДополнительногоЛиста
	//|			ТОГДА ЗачетАвансовПолученных.КорректируемыйПериод
	//|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|	КОНЕЦ КАК КорректируемыйПериод,
	//|	ЗачетАвансовПолученных.ВалютаДокумента КАК ВалютаАванса,
	//|	ЗачетАвансовПолученных.ВалютнаяСумма КАК ВалютнаяСуммаСНДС,
	//|	ВЫБОР
	//|		КОГДА ЗачетАвансовПолученных.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ЗачетАвансовПолученных.ИсправленныйСчетФактура
	//|	КОНЕЦ КАК ИсправленныйСчетФактура,
	//|	ЗачетАвансовПолученных.КодВидаОперации КАК КодВидаОперации,
	//|	ВЫБОР
	//|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2014, 10, 1)
	//|			ТОГДА """"
	//|	КОНЕЦ КАК НомерДокументаОплаты,
	//|	ВЫБОР
	//|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2014, 10, 1)
	//|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	//|	КОНЕЦ КАК ДатаДокументаОплаты,
	//|	ЗачетАвансовПолученных.Ссылка.Организация КАК Организация,
	//|	ЗачетАвансовПолученных.Состояние,
	//|	ЗачетАвансовПолученных.НомерСтроки,
	//|	ЗачетАвансовПолученных.абс_ПериодОтражения,
	//|	ЗачетАвансовПолученных.ВозвратАвансовПолученных
	//|ПОМЕСТИТЬ ВТ
	//|ИЗ
	//|	Документ.ФормированиеЗаписейКнигиПокупок.НДСсАвансов КАК ЗачетАвансовПолученных
	//|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыДокументы КАК СчетаФактурыДокументы
	//|		ПО ЗачетАвансовПолученных.СчетФактура = СчетаФактурыДокументы.ДокументОснование
	//|			И ЗачетАвансовПолученных.ДоговорКонтрагента = СчетаФактурыДокументы.ДоговорКонтрагента
	//|ГДЕ
	//|	ЗачетАвансовПолученных.Ссылка = &Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ.Покупатель,
	//|	ВТ.Поставщик,
	//|	ВТ.ВидЦенности,
	//|	ВТ.Событие,
	//|	ВТ.ДоговорКонтрагента,
	//|	ВТ.СчетФактура,
	//|	ВТ.СтавкаНДС,
	//|	ВТ.СуммаБезНДС КАК СуммаБезНДС,
	//|	ВТ.НДС КАК НДС,
	//|	ВТ.ДатаСобытия,
	//|	ВТ.ДатаОплаты,
	//|	ВТ.ДокументОплаты,
	//|	ВТ.ДокументОтгрузки,
	//|	ВТ.ДокументОтгрузкиДата,
	//|	ВТ.ЗаписьДополнительногоЛиста,
	//|	ВТ.КорректируемыйПериод,
	//|	ВТ.ВалютаАванса,
	//|	ВТ.ВалютнаяСуммаСНДС,
	//|	ВТ.ИсправленныйСчетФактура,
	//|	ВТ.КодВидаОперации,
	//|	ВТ.НомерДокументаОплаты,
	//|	ВТ.ДатаДокументаОплаты,
	//|	ВТ.Организация,
	//|	ВТ.Состояние,
	//|	ВТ.НомерСтроки,
	//|	ВТ.абс_ПериодОтражения,
	//|	ВТ.ВозвратАвансовПолученных
	//|ИЗ
	//|	ВТ КАК ВТ
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ.ВозвратАвансовПолученных,
	//|	ВТ.Состояние,
	//|	ВТ.Организация,
	//|	ВТ.ДатаДокументаОплаты,
	//|	ВТ.НомерДокументаОплаты,
	//|	ВТ.КодВидаОперации,
	//|	ВТ.ИсправленныйСчетФактура,
	//|	ВТ.ВидЦенности,
	//|	ВТ.абс_ПериодОтражения,
	//|	ВТ.ВалютаАванса,
	//|	ВТ.КорректируемыйПериод,
	//|	ВТ.ЗаписьДополнительногоЛиста,
	//|	ВТ.ДокументОтгрузкиДата,
	//|	ВТ.ДокументОтгрузки,
	//|	ВТ.ДокументОплаты,
	//|	ВТ.ДатаОплаты,
	//|	ВТ.Событие,
	//|	ВТ.ДоговорКонтрагента,
	//|	ВТ.ДатаСобытия,
	//|	ВТ.Покупатель,
	//|	ВТ.Поставщик,
	//|	ВТ.СтавкаНДС,
	//|	ВТ.СчетФактура,
	//|	ВТ.СуммаБезНДС,
	//|	ВТ.НДС,
	//|	ВТ.ВалютнаяСуммаСНДС,
	//|	ВТ.НомерСтроки";
// ---ввв 17.10.2016 г.
	
КонецФункции

Функция ТекстЗапросаИзменениеСтоимостиВСторонуУменьшения()

	Возврат
	"ВЫБРАТЬ
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.СчетФактура КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ДокументыОснованияУменьшениеСтоимости
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок.ВычетПриИзмененииСтоимостиВСторонуУменьшения КАК ВычетПриИзмененииСтоимостиВСторонуУменьшения
	|ГДЕ
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.КодВидаОперацииНаУменьшение КАК КодВидаОперации,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ СчетаФактурыДокументыУменьшениеСтоимости
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование В
	|			(ВЫБРАТЬ
	|				ВТ_ДокументыОснованияУменьшениеСтоимости.ДокументОснование
	|			ИЗ
	|				ВТ_ДокументыОснованияУменьшениеСтоимости)
	|	И СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
	|	И СчетФактураВыданный.Организация = &Организация
	|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.СчетФактура,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Поставщик,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.НДС,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.СуммаБезНДС,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.СтавкаНДС,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.СчетУчетаНДС,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОтгрузки,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОплаты,
	|	НЕОПРЕДЕЛЕНО КАК Состояние,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.СчетФактура.Дата КАК ДатаСчетаФактуры,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.ИсправленныйСчетФактура.Дата КАК ДатаИсправленногоСчетаФактуры,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСобытия,
	|	НЕОПРЕДЕЛЕНО КАК ДатаОплаты,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.ВидЦенности,
	|	НЕОПРЕДЕЛЕНО КАК ЗаписьДополнительногоЛиста,
	|	НЕОПРЕДЕЛЕНО КАК КорректируемыйПериод,
	|	ВЫБОР
	|		КОГДА ВычетПриИзмененииСтоимостиВСторонуУменьшения.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВычетПриИзмененииСтоимостиВСторонуУменьшения.ИсправленныйСчетФактура
	|	КОНЕЦ КАК ИсправленныйСчетФактура,
	|	""НДС"" КАК Содержание,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Ссылка.Дата КАК Период,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Ссылка КАК Регистратор,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Ссылка.Организация,
	|	"""" КАК НомерДокументаОплаты,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДокументаОплаты,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(СчетаФактурыДокументы.КодВидаОперации, ""18"")
	|	КОНЕЦ КАК КодВидаОперации
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок.ВычетПриИзмененииСтоимостиВСторонуУменьшения КАК ВычетПриИзмененииСтоимостиВСторонуУменьшения
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыДокументыУменьшениеСтоимости КАК СчетаФактурыДокументы
	|		ПО ВычетПриИзмененииСтоимостиВСторонуУменьшения.СчетФактура = СчетаФактурыДокументы.ДокументОснование
	|ГДЕ
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.НомерСтроки";
	
КонецФункции
// }}ТТК Сладков А. Заявка № 20.07.2016 окончание

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

