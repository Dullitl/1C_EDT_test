////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

//АБС ВСТАВКА 36048  11.03.2014 14:41:22  Глебов
Функция ПеренестиПроводки(ПоказатьПротоколПереноса) Экспорт 
	
	ТабДок = Неопределено;
	МассивСчетов = Новый Массив;
	
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("01"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("02"));

	
	//Проверка операция переноса за выбранный период
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПереносПроводок.Ссылка
	               |ИЗ
	               |	Документ.ПереносПроводокМеждународный КАК ПереносПроводок
	               |ГДЕ
	               |	(ПереносПроводок.ПериодНачало МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |			ИЛИ ПереносПроводок.ПериодКонец МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |			ИЛИ ПереносПроводок.ПериодНачало < &ДатаНачала
	               |				И ПереносПроводок.ПериодКонец > &ДатаНачала
	               |			ИЛИ ПереносПроводок.ПериодНачало < &ДатаОкончания
	               |				И ПереносПроводок.ПериодКонец > &ДатаОкончания)
	               |	И ПереносПроводок.Организация = &Организация
	               |	И ПереносПроводок.Ссылка <> &Ссылка
	               |	И ПереносПроводок.абс_ЗагружатьТолько01_02Счета";
				   
	Запрос.УстановитьПараметр("ДатаНачала", ПериодНачало);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ПериодКонец));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ПараметрыВТ = "";
	Если абс_ЗагружатьТолько01_02Счета Тогда	  //АБС
		Пока Выборка.Следующий() Цикл
			Сообщить(Выборка.Ссылка);
		КонецЦикла;
		
		Если Выборка.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По выбранной организации и периоду уже имеются перенесенные проводки. Перенос не выполнен.");
			Возврат ТабДок;
		КонецЕсли;
		ПараметрыВТ = "(СчетДт В ИЕРАРХИИ (&МассивСчетов)
		|ИЛИ СчетКт В ИЕРАРХИИ (&МассивСчетов))
		|И Организация = &Организация";
	Иначе	
		ПараметрыВТ = "Организация = &Организация";
		
	КонецЕсли;    //АБС
	
	
	// Начало переноса
	Движения.Международный.Очистить();
	Состояние("Перенос проводок. Пожалуйста ждите...");
	
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ХозрасчетныйДвиженияССубконто.Период,
	        |	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	        |	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	        |	ХозрасчетныйДвиженияССубконто.СчетДт,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	        |	ХозрасчетныйДвиженияССубконто.СчетКт,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	        |	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	        |	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	        |	ХозрасчетныйДвиженияССубконто.Сумма,
	        |	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	        |	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	        |	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	        |	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	        |	ХозрасчетныйДвиженияССубконто.НомерЖурнала,
	        |	ХозрасчетныйДвиженияССубконто.Содержание,
	        |	ВЫБОР
	        |		КОГДА (НЕ СоответствиеСчетовСрезПоследнихКт.СчетМеждународный ЕСТЬ NULL )
	        |				И СоответствиеСчетовСрезПоследнихДт.СчетМеждународный ЕСТЬ NULL 
	        |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Международный.Служебный)
	        |		ИНАЧЕ СоответствиеСчетовСрезПоследнихДт.СчетМеждународный
	        |	КОНЕЦ КАК СчетМеждународныйДт,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд1 КАК СубконтоМеждДт1,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд2 КАК СубконтоМеждДт2,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд3 КАК СубконтоМеждДт3,
	        |	СоответствиеСчетовСрезПоследнихДт.Реквизит КАК РеквизитДт,
	        |	СоответствиеСчетовСрезПоследнихДт.Значение КАК ЗначениеДт,
	        |	ВЫБОР
	        |		КОГДА (НЕ СоответствиеСчетовСрезПоследнихДт.СчетМеждународный ЕСТЬ NULL )
	        |				И СоответствиеСчетовСрезПоследнихКт.СчетМеждународный ЕСТЬ NULL 
	        |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Международный.Служебный)
	        |		ИНАЧЕ СоответствиеСчетовСрезПоследнихКт.СчетМеждународный
	        |	КОНЕЦ КАК СчетМеждународныйКт,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд1 КАК СубконтоМеждКт1,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд2 КАК СубконтоМеждКт2,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд3 КАК СубконтоМеждКт3,
	        |	СоответствиеСчетовСрезПоследнихКт.Реквизит КАК РеквизитКт,
	        |	СоответствиеСчетовСрезПоследнихКт.Значение КАК ЗначениеКт
	        |ИЗ
	        |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ПериодНач, &ПериодКон,"+ПараметрыВТ+", , ) КАК ХозрасчетныйДвиженияССубконто
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсключениеПроводок.СрезПоследних(&ПериодНач, ) КАК ИсключениеПроводокСрезПоследних
	        |		ПО (ХозрасчетныйДвиженияССубконто.СчетДт = ИсключениеПроводокСрезПоследних.СчетДт
	        |					И ИсключениеПроводокСрезПоследних.СчетКт = &ПустойСчет
	        |				ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт = ИсключениеПроводокСрезПоследних.СчетКт
	        |					И ИсключениеПроводокСрезПоследних.СчетДт = &ПустойСчет
	        |				ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт = ИсключениеПроводокСрезПоследних.СчетДт
	        |					И ХозрасчетныйДвиженияССубконто.СчетКт = ИсключениеПроводокСрезПоследних.СчетКт)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт1 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт2 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт3 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт1 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт2 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт3 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиМСФО.СрезПоследних(&ПериодНач, ) КАК СоответствиеСчетовСрезПоследнихДт
	        |		ПО ХозрасчетныйДвиженияССубконто.СчетДт = СоответствиеСчетовСрезПоследнихДт.СчетХозрасчетный
	        |			И (СоответствиеСчетовСрезПоследнихДт.ВидДвижения = &ВидДвиженияДебет)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиМСФО.СрезПоследних(&ПериодНач, ) КАК СоответствиеСчетовСрезПоследнихКт
	        |		ПО ХозрасчетныйДвиженияССубконто.СчетКт = СоответствиеСчетовСрезПоследнихКт.СчетХозрасчетный
	        |			И (СоответствиеСчетовСрезПоследнихКт.ВидДвижения = &ВидДвиженияКредит)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |ГДЕ
	        |	ХозрасчетныйДвиженияССубконто.Активность = &Активность
	        |	И ХозрасчетныйДвиженияССубконто.Период МЕЖДУ &ПериодНач И &ПериодКон
	        //|	И ХозрасчетныйДвиженияССубконто.Организация = &Организация
	        |	И ИсключениеПроводокСрезПоследних.Период ЕСТЬ NULL ";
				   
				   Если НЕ ПоказатьПротоколПереноса Тогда 
					   Текст = Текст + " И
	               |	((СоответствиеСчетовСрезПоследнихДт.СчетМеждународный) ЕСТЬ НЕ NULL ) И
	               |	((СоответствиеСчетовСрезПоследнихКт.СчетМеждународный) ЕСТЬ НЕ NULL )";
			   КонецЕсли;
			   //АБС
			   //Если абс_ЗагружатьТолько01_02Счета Тогда
			   //	   Текст = Текст + " И
			   //	|	(ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&МассивСчетов) ИЛИ
			   //	|	ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (&МассивСчетов))";
			   //КонецЕсли;
			   ////\\АБС
				   Текст = Текст + "
				   |УПОРЯДОЧИТЬ ПО
	               |	СоответствиеСчетовСрезПоследнихДт.Приоритет,
	               |	СоответствиеСчетовСрезПоследнихКт.Приоритет
	               |
	               |ИТОГИ ПО
	               |	НомерСтроки,
	               |	Регистратор";
	
	Запрос.Текст = Текст;			   
	Запрос.УстановитьПараметр("Активность", Истина);
	Запрос.УстановитьПараметр("ПериодНач", ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКон", КонецДня(ПериодКонец));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МассивСчетов",МассивСчетов);
			
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	//Запрос.УстановитьПараметр("ПустоеСубконто", Неопределено);
	//АБС 080811
	Запрос.УстановитьПараметр("ПустоеСубконто", ПолучитьСписокПустыхСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные));
	//АБС 080811
	Запрос.УстановитьПараметр("ВидДвиженияДебет", Перечисления.ВидыДвиженийБухгалтерии.Дебет);
	Запрос.УстановитьПараметр("ВидДвиженияКредит", Перечисления.ВидыДвиженийБухгалтерии.Кредит);

	Результат = Запрос.Выполнить();

	Если ПоказатьПротоколПереноса Тогда
		ТабДок = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("Макет");
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Заголовок = "Список не перенесенных проводок";
		Область.Параметры.Информация = "Организация: " + Организация.НаименованиеПолное + "; Период: " + ПредставлениеПериода(ПериодНачало,ПериодКонец);
		ТабДок.Вывести(Область);
	КонецЕсли;
	
	//Для отладки.
	//Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам).ВыбратьСтроку(,);
	
	
	Ном = 1;
	ВыборкаНомерСтроки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтроки",);
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		ВыборкаРегистратор = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор",);
		
		Пока ВыборкаРегистратор.Следующий() Цикл
			//АБС
			НужноПродолжить = Ложь;
			Для Каждого СтрокаИсключений Из абс_Исключения Цикл
				Если СтрокаИсключений.Исключить Тогда
					Если ТипЗнч(ВыборкаРегистратор.Регистратор)=Тип("ДокументСсылка."+СокрЛП(СтрокаИсключений.ВидДокумента)) Тогда
						НужноПродолжить = Истина;
					КонецЕСли;
				Иначе
					Если ТипЗнч(ВыборкаРегистратор.Регистратор)<>Тип("ДокументСсылка."+СокрЛП(СтрокаИсключений.ВидДокумента)) Тогда
						НужноПродолжить = Истина;
					КонецЕСли;
					
				КонецЕсли;
				
			КонецЦикла;
			Если НужноПродолжить Тогда
				Продолжить;
			КонецЕсли;
			
			//\\АБС
			Выборка = ВыборкаРегистратор.Выбрать(,);
			СоответствиеНайдено = Ложь;
			Пока Выборка.Следующий() Цикл
				Если Не ЗначениеЗаполнено(Выборка.СчетМеждународныйДт) или Не ЗначениеЗаполнено(Выборка.СчетМеждународныйКт) Тогда
					Прервать;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Выборка.РеквизитДт) и Не ЗначениеЗаполнено(Выборка.РеквизитКт) Тогда
					ДобавитьПроводку(Выборка);
					СоответствиеНайдено = Истина;
					Прервать; // нашли нужное правило!
				Иначе
					Если ЗначениеЗаполнено(Выборка.РеквизитДт) Тогда // Условие по дебету
						НомерСубконто = Число(Сред(Выборка.РеквизитДт,9,1));
						Рекв = Сред(Выборка.РеквизитДт,Найти(Выборка.РеквизитДт, ".")+1);
						Попытка
							Если (НомерСубконто = 1) и (Выборка.СубконтоДт1[Рекв] <> Выборка.ЗначениеДт) или
								 (НомерСубконто = 2) и (Выборка.СубконтоДт2[Рекв] <> Выборка.ЗначениеДт) или
								 (НомерСубконто = 3) и (Выборка.СубконтоДт3[Рекв] <> Выборка.ЗначениеДт) Тогда
								Продолжить;
							КонецЕсли
						Исключение
							Сообщить("В правиле соответствия для проводки по дебету счета "+Выборка.СчетДт+" не найден реквизит "+Рекв);
						КонецПопытки;
					КонецЕсли;
					Если ЗначениеЗаполнено(Выборка.РеквизитКт) Тогда // Условие по кредиту
						НомерСубконто = Число(Сред(Выборка.РеквизитКт,9,1));
						Рекв = Сред(Выборка.РеквизитКт,Найти(Выборка.РеквизитКт, ".")+1);
						Попытка
							Если (НомерСубконто = 1) и (Выборка.СубконтоКт1[Рекв] <> Выборка.ЗначениеКт) или
								 (НомерСубконто = 2) и (Выборка.СубконтоКт2[Рекв] <> Выборка.ЗначениеКт) или
								 (НомерСубконто = 3) и (Выборка.СубконтоКт3[Рекв] <> Выборка.ЗначениеКт) Тогда
								Продолжить;
							КонецЕсли
						Исключение
							Сообщить("В правиле соответствия для проводки по кредиту счета "+Выборка.СчетКт+" не найден реквизит "+Рекв);
						КонецПопытки;
					КонецЕсли;
					ДобавитьПроводку(Выборка);
					СоответствиеНайдено = Истина;
					Прервать; // нашли нужное правило!
				КонецЕсли;
			КонецЦикла;
			// Соответствие не найдено
			Если (НЕ СоответствиеНайдено) и ПоказатьПротоколПереноса Тогда
				Область = Макет.ПолучитьОбласть("Строка");
				
				Область.Параметры.Номер = Ном;
				Область.Параметры.СчетДт = Выборка.СчетДт;
				Область.Параметры.СубконтоДт1 = Выборка.СубконтоДт1;
				Область.Параметры.СубконтоДт2 = Выборка.СубконтоДт2;
				Область.Параметры.СубконтоДт3 = Выборка.СубконтоДт3;
				Область.Параметры.КоличествоДт = Выборка.КоличествоДт;
				Область.Параметры.ВалютаДт = Выборка.ВалютаДт;
				Область.Параметры.ВалСуммаДт = Выборка.ВалютнаяСуммаДт;
				Область.Параметры.СчетКт = Выборка.СчетКт;
				Область.Параметры.СубконтоКт1 = Выборка.СубконтоКт1;
				Область.Параметры.СубконтоКт2 = Выборка.СубконтоКт2;
				Область.Параметры.СубконтоКт3 = Выборка.СубконтоКт3;
				Область.Параметры.КоличествоКт = Выборка.КоличествоКт;
				Область.Параметры.ВалютаКт = Выборка.ВалютаКт;
				Область.Параметры.ВалСуммаКт = Выборка.ВалютнаяСуммаКт;
				Область.Параметры.Сумма = Выборка.Сумма;
				Область.Параметры.Расшифровка = Выборка.Регистратор;
				
				Если Не ЗначениеЗаполнено(Выборка.СчетМеждународныйДт) и Не ЗначениеЗаполнено(Выборка.СчетМеждународныйКт) Тогда
					Область.Параметры.Причина = "Нет правила соответствия счетам Дт и Кт.";
				ИначеЕсли Не ЗначениеЗаполнено(Выборка.СчетМеждународныйДт) Тогда
					Область.Параметры.Причина = "Нет правила соответствия счету Дт.";
				ИначеЕсли Не ЗначениеЗаполнено(Выборка.СчетМеждународныйКт) Тогда
					Область.Параметры.Причина = "Нет правила соответствия счету Кт.";
				Иначе
					Область.Параметры.Причина = "Нет подходящего условия по счету Дт или Кт.";
				КонецЕсли;

				Если НЕ ((""+Выборка.СчетДт="") И (""+Выборка.СчетКт="")) Тогда
					ТабДок.Вывести(Область);
				КонецЕсли;

				Ном = Ном + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

// Функция возвращает СЗ с ссылками на пустые субконто 
// 
// Параметры 
// <пвхДляОбработки> – <План видов характеристик менеджер> – План видов характеристик по которому будет строить список 
// 
// 
// Возвращаемое значение: 
// <Список значений> – Содержащий список пустых ссылок на все субконто 
// 
Функция ПолучитьСписокПустыхСубконто(пвхДляОбработки) 
	выборкаСубконто = пвхДляОбработки.Выбрать(); 
	сзПустыеСубконто = Новый СписокЗначений(); 
	Пока выборкаСубконто.Следующий() Цикл 
		сзПустыеСубконто.Добавить(выборкаСубконто.ТипЗначения.ПривестиЗначение()); 
	КонецЦикла; 
	//Добавим и неопределено 
	сзПустыеСубконто.Добавить(Неопределено); 
	Возврат сзПустыеСубконто; 
КонецФункции // () 

Процедура ДобавитьПроводку(Выборка)
	//Заполняем основные реквизиты записи регистра
	Движение = Движения.Международный.Добавить();
	Движение.Период = Выборка.Период;
	Движение.СчетДт = Выборка.СчетМеждународныйДт;
	Движение.СчетКт = Выборка.СчетМеждународныйКт;
	Движение.Организация = Организация;
	Движение.Содержание = Выборка.Содержание;
	Движение.ПервичныйДокумент = Выборка.Регистратор;
	Движение.НомерЖурнала = Выборка.НомерЖурнала;
	
	// Заполняем количество
	Если Движение.СчетДт.Количественный Тогда
		Движение.КоличествоДт = Выборка.КоличествоДт;
	КонецЕсли;
	Если Движение.СчетКт.Количественный Тогда
		Движение.КоличествоКт = Выборка.КоличествоКт;
	КонецЕсли;
	
	// Заполняем суммы и валюту
	Если Константы.ВалютаМеждународногоУчета.Получить() = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Движение.Сумма = Выборка.Сумма;
		
		Если Движение.СчетДт.Валютный Тогда
			Движение.ВалютаДт = Выборка.ВалютаДт;
			Движение.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаДт;
		КонецЕсли;
		Если Движение.СчетКт.Валютный Тогда
			Движение.ВалютаКт = Выборка.ВалютаКт;
			Движение.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаКт;
		КонецЕсли;

	Иначе
		Если Не ЗначениеЗаполнено(Выборка.ВалютаДт) Тогда
			Если Движение.СчетДт.Валютный Тогда
				Движение.ВалютаДт = Константы.ВалютаРегламентированногоУчета.Получить();
				Движение.ВалютнаяСуммаДт = Выборка.Сумма;
			КонецЕсли;
			Движение.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Константы.ВалютаРегламентированногоУчета.Получить(), Константы.ВалютаМеждународногоУчета.Получить(), ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Движение.Период).Кратность, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Кратность);

		ИначеЕсли Движение.ВалютаДт = Константы.ВалютаМеждународногоУчета.Получить() Тогда
			Движение.Сумма = Выборка.ВалютнаяСуммаДт;
			
		ИначеЕсли Движение.ВалютаДт <> Константы.ВалютаМеждународногоУчета.Получить() Тогда
			Если Движение.СчетДт.Валютный Тогда
				Движение.ВалютаДт = Выборка.ВалютаДт;
				Движение.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаДт;
			КонецЕсли;
			Движение.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.ВалютнаяСуммаДт, Выборка.ВалютаДт, Константы.ВалютаМеждународногоУчета.Получить(), ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаДт, Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаДт, Движение.Период).Кратность, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Кратность);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.ВалютаКт) Тогда
			Если Движение.СчетКт.Валютный Тогда
				Движение.ВалютаКт = Константы.ВалютаРегламентированногоУчета.Получить();
				Движение.ВалютнаяСуммаКт = Выборка.Сумма;
			КонецЕсли;
			Движение.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Константы.ВалютаРегламентированногоУчета.Получить(), Константы.ВалютаМеждународногоУчета.Получить(), ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Движение.Период).Кратность, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Кратность);
			
		ИначеЕсли Движение.ВалютаКт = Константы.ВалютаМеждународногоУчета.Получить() Тогда
			Движение.Сумма = Выборка.ВалютнаяСуммаКт;
			
		ИначеЕсли Движение.ВалютаКт <> Константы.ВалютаМеждународногоУчета.Получить() Тогда
			Если Движение.СчетКт.Валютный Тогда
				Движение.ВалютаКт = Выборка.ВалютаКт;
				Движение.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаКт;
			КонецЕсли;
			Движение.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.ВалютнаяСуммаКт, Выборка.ВалютаКт, Константы.ВалютаМеждународногоУчета.Получить(), ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаКт, Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаКт, Движение.Период).Кратность, ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаМеждународногоУчета.Получить(), Движение.Период).Кратность);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Заполняем субконто
	Для ДТ = 0 по 1 Цикл
		Если ДТ = 0 Тогда
			СтрокаДТ = "Дт";
		Иначе
			СтрокаДТ = "Кт";
		КонецЕсли;

		Для Ном = 1 по 3 Цикл
			Если Ном <= Выборка["СчетМеждународный"+СтрокаДТ].ВидыСубконто.Количество() Тогда
				ВидСубконтоМежд = Движение["Счет"+СтрокаДТ].ВидыСубконто[Ном-1].ВидСубконто;
				
				Если Не ЗначениеЗаполнено(Выборка["СубконтоМежд"+СтрокаДТ+Ном]) Тогда
					// Заполняем значением из исходной проводки (если совпадают типы)
					Для НомБух = 1 по 3 Цикл
						Если НомБух <= Выборка["Счет"+СтрокаДТ].ВидыСубконто.Количество() Тогда
							Если ВидСубконтоМежд.ТипЗначения = Выборка["Счет"+СтрокаДТ].ВидыСубконто[НомБух-1].ВидСубконто.ТипЗначения Тогда
								Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд] = Выборка["Субконто"+СтрокаДТ+НомБух];
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

				Иначе
					// Заполняем как указано в соответствиях
					Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд] = Выборка["СубконтоМежд"+СтрокаДТ+Ном];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Движения.Международный.Прочитать();
	
	Для каждого Движение Из Движения.Международный Цикл		
		Движение.Активность = Не ПометкаУдаления;		
	КонецЦикла; 
	
	Движения.абс_СтоимостьОСМеждународный.Очистить();
	
	Если Не ПометкаУдаления Тогда
		ЗаполнитьСтоимостьОСМеждународный();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтоимостьОСМеждународный()
	Для каждого Движение Из Движения.Международный Цикл		
		Если Движение.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Международный.ОсновныеСредства) И Не Движение.СчетДт = ПланыСчетов.Международный.ВыбытиеОС Тогда
			НовоеДвижение = Движения.абс_СтоимостьОСМеждународный.Добавить();
			НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
			НовоеДвижение.Организация = Движение.Организация;
			НовоеДвижение.ОсновноеСредство = Движение.СубконтоДт.Получить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ОсновныеСредства);
			НовоеДвижение.Стоимость = Движение.Сумма;
			НовоеДвижение.Период = Движение.Период;
		КонецЕсли;
		Если Движение.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Международный.ОсновныеСредства) И Не Движение.СчетКт = ПланыСчетов.Международный.ВыбытиеОС Тогда
			НовоеДвижение = Движения.абс_СтоимостьОСМеждународный.Добавить();
			НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
			НовоеДвижение.Организация = Движение.Организация;
			НовоеДвижение.ОсновноеСредство = Движение.СубконтоКт.Получить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ОсновныеСредства);
			НовоеДвижение.Стоимость = Движение.Сумма;
			НовоеДвижение.Период = Движение.Период;
		КонецЕсли;
		Если Движение.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Международный.АмортизацияОсновныхСредств) Тогда
			НовоеДвижение = Движения.абс_СтоимостьОСМеждународный.Добавить();
			НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
			НовоеДвижение.Организация = Движение.Организация;
			НовоеДвижение.ОсновноеСредство = Движение.СубконтоДт.Получить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ОсновныеСредства);
			НовоеДвижение.Амортизация = Движение.Сумма;
			НовоеДвижение.Период = Движение.Период;
		КонецЕсли;
		Если Движение.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Международный.АмортизацияОсновныхСредств) Тогда
			НовоеДвижение = Движения.абс_СтоимостьОСМеждународный.Добавить();
			НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
			НовоеДвижение.Организация = Движение.Организация;
			НовоеДвижение.ОсновноеСредство = Движение.СубконтоКт.Получить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ОсновныеСредства);
			НовоеДвижение.Амортизация = Движение.Сумма;
			НовоеДвижение.Период = Движение.Период;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//АБС ВСТАВКА 36048 КОНЕЦ