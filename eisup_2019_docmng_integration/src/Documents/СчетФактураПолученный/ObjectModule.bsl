Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мОбновлятьРеквизитыПриЗаписи Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры(ЗаполнятьРеквизитыСчетаФактуры = Ложь) Экспорт  //АБС ИЗМЕНЕНИЕ 36164  10.12.2013 18:49:44  Стрельцов
																							 
	Если ДокументыОснования.Количество()=0 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	ПараметрыСФ = Неопределено;
	
	УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, мВалютаРегламентированногоУчета, ПараметрыСФ);
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	РеквизитыОбновлены  = Ложь;
	
	Если ПараметрыСФ.Организация <> Неопределено 
		И ПараметрыСФ.Организация <> Организация Тогда
		Номер = "";
		Организация = ПараметрыСФ.Организация;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если ПараметрыСФ.Контрагент <> Неопределено 
		И ПараметрыСФ.Контрагент <> Контрагент Тогда
		Контрагент = ПараметрыСФ.Контрагент;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если ПараметрыСФ.Договор <> Неопределено 
		И ПараметрыСФ.Договор <> ДоговорКонтрагента Тогда
		ДоговорКонтрагента = ПараметрыСФ.Договор;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если СуммаДокумента <> ПараметрыСФ.СуммаДокумента Тогда
		СуммаДокумента = ПараметрыСФ.СуммаДокумента;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	Если ВерсияПостановления = 2 Тогда
		Если СуммаНДСДокумента <> ПараметрыСФ.СуммаНДСДокумента Тогда
			СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
			РеквизитыОбновлены  = Истина;
		КонецЕсли; 
	КонецЕсли; 
	Если СуммаУвеличение <> ПараметрыСФ.СуммаУвеличение Тогда
		СуммаУвеличение = ПараметрыСФ.СуммаУвеличение;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	Если СуммаУменьшение <> ПараметрыСФ.СуммаУменьшение Тогда
		СуммаУменьшение = ПараметрыСФ.СуммаУменьшение;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	Если СуммаНДСУвеличение <> ПараметрыСФ.СуммаНДСУвеличение Тогда
		СуммаНДСУвеличение = ПараметрыСФ.СуммаНДСУвеличение;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	Если СуммаНДСУменьшение <> ПараметрыСФ.СуммаНДСУменьшение Тогда
		СуммаНДСУменьшение = ПараметрыСФ.СуммаНДСУменьшение;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если ПараметрыСФ.ВалютаДокумента <> Неопределено 
		И ВалютаДокумента <> ПараметрыСФ.ВалютаДокумента Тогда
		ВалютаДокумента = ПараметрыСФ.ВалютаДокумента;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	Если ВерсияПостановления = 2 Тогда
		Если СчетФактураБезНДС <> ПараметрыСФ.СчетФактураБезНДС Тогда
			СчетФактураБезНДС = ПараметрыСФ.СчетФактураБезНДС;
			РеквизитыОбновлены  = Истина;
		КонецЕсли; 			
	КонецЕсли; 
	
	Если ЭтоНовый() И ВерсияПостановления = 2 Тогда
		Если НЕ ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			УстановитьКодВидаОперации();
		КонецЕсли;	
	КонецЕсли;
	
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		РезультатПоискаИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование.ИсправляемыйДокументПоступления, "СчетФактураПолученный");
		Если РезультатПоискаИсправляемыйСчетФактура = Неопределено Тогда
			РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
	Иначе
		РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка();
	КонецЕсли;
	Если Не ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура Тогда
		ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ДокументОснование) И ДокументыОснования.Количество() > 0)
		ИЛИ (ДокументыОснования.Количество() = 1 И ДокументыОснования[0].ДокументОснование <> ДокументОснование) Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	//АБС ВСТАВКА 36164  10.12.2013 18:52:45  Стрельцов
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный 
		И ПараметрыСФ.РеквизитыОснований.Количество() > 0 Тогда
		
		Для Каждого Основание Из ДокументыОснования Цикл
			
			СтрокаСРеквизитами = ПараметрыСФ.РеквизитыОснований.Найти(Основание.ДокументОснование, "ДокументОснование");	
			Если Основание.СуммаУвеличение <> СтрокаСРеквизитами.СуммаУвеличение Тогда
				Основание.СуммаУвеличение = СтрокаСРеквизитами.СуммаУвеличение;
				РеквизитыОбновлены = Истина;
			КонецЕсли;
			Если Основание.СуммаУменьшение <> СтрокаСРеквизитами.СуммаУменьшение Тогда
				Основание.СуммаУменьшение = СтрокаСРеквизитами.СуммаУменьшение;
				РеквизитыОбновлены = Истина;
			КонецЕсли;
			Если Основание.СуммаНДСУвеличение <> СтрокаСРеквизитами.СуммаНДСУвеличение Тогда
				Основание.СуммаНДСУвеличение = СтрокаСРеквизитами.СуммаНДСУвеличение;
				РеквизитыОбновлены = Истина;
			КонецЕсли;
			Если Основание.СуммаНДСУменьшение <> СтрокаСРеквизитами.СуммаНДСУменьшение Тогда
				Основание.СуммаНДСУменьшение = СтрокаСРеквизитами.СуммаНДСУменьшение;
				РеквизитыОбновлены = Истина;
			КонецЕсли;
			Если ЗаполнятьРеквизитыСчетаФактуры Тогда
				Если Основание.НомерИсходногоДокумента <> СтрокаСРеквизитами.НомерИсходногоДокумента Тогда
					Основание.НомерИсходногоДокумента = СтрокаСРеквизитами.НомерИсходногоДокумента;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.ДатаИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсходногоДокумента Тогда
					Основание.ДатаИсходногоДокумента = СтрокаСРеквизитами.ДатаИсходногоДокумента;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.УчитыватьИсправлениеИсходногоДокумента <> СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента Тогда
					Основание.УчитыватьИсправлениеИсходногоДокумента = СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.НомерИсправленияИсходногоДокумента <> СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента Тогда
					Основание.НомерИсправленияИсходногоДокумента = СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.ДатаИсправленияИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента Тогда
					Основание.ДатаИсправленияИсходногоДокумента = СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	//\\АБС ВСТАВКА 36164 КОНЕЦ
	
	Если РеквизитыОбновлены 
		И ДополнительныеСвойства.Свойство("СообщитьОбИзмененииРеквизитов")
		И ДополнительныеСвойства.СообщитьОбИзмененииРеквизитов Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Реквизиты документа ""%1"" перезаполнены автоматически'"),
			Ссылка));
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьСчетФактуруНаАванс() Экспорт
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ДокументыОснования[0].ДокументОснование.Организация;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Контрагент,
	               |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
	               |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	               |	СУММА(РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.СуммаРег) КАК СуммаДокумента,
	               |	СУММА(РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов) КАК ВалютнаяСумма
	               |ИЗ
	               |	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации КАК РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации
	               |ГДЕ
	               |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Регистратор = &ДокументОснование
	               |	И РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Документ = &ДокументОснование
	               |	И РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Контрагент,
	               |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
	               |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов";
					   
	Результат = Запрос.Выполнить().Выгрузить();
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС4, Перечисления.СтавкиНДС.НДС4); //АБС ВСТАВКА 44538  06.06.2014 8:17:01  Коломиец
	
	ОшибкаПриЗаполнении = Ложь;
	СтрокаСообщения = "";
	СуммаДокумента  = 0;
	Для Каждого СтрокаТаблицы Из Результат Цикл
		
		Если ДокументыОснования[0].ДокументОснование.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			
			ТаблицаПоСтавкам = Новый ТаблицаЗначений();
			ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаПоСтавкам.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			
			Для Каждого СтрПлатежа Из ДокументыОснования[0].ДокументОснование.РасшифровкаПлатежа Цикл
				Если СтрПлатежа.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента Тогда
					ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
					Если ТекСтавкаНДС = Неопределено Тогда
						ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
					КонецЕсли; 
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
					СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаПоСтавкам.Свернуть("СтавкаНДС", "Сумма");
			
			//Распределение суммы рег учета
			МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаТаблицы.СуммаДокумента, ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
			Если Не МассивСумм = Неопределено Тогда
				ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
			Иначе
				МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
			КонецЕсли; 
			
			Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
				Если СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
					Или СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				КонецЕсли;
				
				ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
				СуммаДокумента		= СуммаДокумента + СтрокаПоСтавке.Сумма;
				НовыйАванс = Авансы.Добавить();
				НовыйАванс.Сумма = СтрокаПоСтавке.Сумма;
				НовыйАванс.СтавкаНДС	  = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);;
				НовыйАванс.СуммаНДС		  = УчетНДС.РассчитатьСуммуНДС(НовыйАванс.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(НовыйАванс.СтавкаНДС));
				ОшибкаПриЗаполнении = Ложь;
			КонецЦикла;
			
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Авансы.Очистить();
				СуммаДокумента = 0;
			Иначе
				Прервать;
			КонецЕсли;

		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаТаблицы);
			СтрокаАванса = Авансы.Добавить();
			СтрокаАванса.Сумма = СтрокаТаблицы.СуммаДокумента;
			СтрокаАванса.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
			СтрокаАванса.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаАванса.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаАванса.СтавкаНДС));
			СтрокаСообщения = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьКодВидаОперации(); //Абс-Пр2 12286

	Если Результат.Количество() = 0 Тогда 
		ДокументОснование = Неопределено;
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаДокумента = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаНДСДокумента = 0;
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры на предварительную оплату.");
		Возврат;
	КонецЕсли;		
	
	Если ОшибкаПриЗаполнении Тогда
		ДокументыОснования.Очистить();
		ДокументОснование = Неопределено;
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаДокумента = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаНДСДокумента = 0;
		ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	СуммаНДСДокумента = Авансы.Итог("СуммаНДС");
	//УстановитьКодВидаОперации(); //Абс-Пр2 12286
	
КонецПроцедуры

Функция ПроверитьВозможностьЗаписиСФ(Отказ = Ложь, УдалятьЛишниеСтроки = Ложь) Экспорт
	
	Если Исправление Тогда
		
		СтрокаСообщения = "";
		СтруктураОтбора = Новый Структура("ПометкаУдаления, ВидСчетаФактуры, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура", 
			Ложь, ВидСчетаФактуры, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура);
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураПолученный", СтруктураОтбора, Ссылка);
		
		Если НЕ СуществующийСФ = Неопределено Тогда
			Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СуществующийСФ, "НомерИсправления, ИсправляемыйСчетФактура"); 
			Если Реквизиты.НомерИсправления = НомерИсправления
				И Реквизиты.ИсправляемыйСчетФактура = ИсправляемыйСчетФактура Тогда
							
				СтрокаСообщения = "На основании документа «" + ИсправляемыйСчетФактура + "» уже введен исправленный счет-фактура "
					+ Символы.ПС + "«" +Строка(СуществующийСФ) + "» с номером исправления «" + НомерИсправления + "»";
				
				Отказ = Истина;
				Возврат СтрокаСообщения;
				
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("ПометкаУдаления, ВидСчетаФактуры, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура", 
		Ложь, ВидСчетаФактуры, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура);
    			
	Для Каждого ТекущееОснование Из ДокументыОснования Цикл
		Если ТипЗнч(ТекущееОснование.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда 
			// Может быть много СФ, проверка затруднительна. СФ отрабатываются при записи документа АО.
			Продолжить;
		КонецЕсли;

		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураПолученный", СтруктураОтбора, Ссылка);
		
		Если НЕ СуществующийСФ = неопределено Тогда
			Если ПустаяСтрока(СтрокаСообщения) Тогда
				СтрокаСообщения = "Для указанного документа-основания уже зарегистрирован счет-фактура:";
			КонецЕсли;
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + " - " + ?(ДокументыОснования.Количество() > 1, " строка № " + ТекущееОснование.НомерСтроки 
				+ ": для «" + ТекущееОснование.ДокументОснование + "» зарегистрирован счет-фактура ","");
			#Если Клиент Тогда
				СтрокаСообщения = СтрокаСообщения + " «" + РаботаСДиалогами.ПолучитьТекстСчетаФактуры(СуществующийСФ) + "»";
			#Иначе
				СтрокаСообщения = СтрокаСообщения + " «" + Строка(СуществующийСФ) + "»";
			#КонецЕсли
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Регистрация еще одного счета-фактуры не допускается."
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции 

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактуры, Исправление = Ложь) Экспорт
	
	СписокТипов = Новый Массив;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		
		// АБС ВСТАВКА Фролов 20120714
		// Вводим исправленную СФ на основании отражения начисления НДС
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС"));
        // АБС ВСТАВКА Фролов 20120714 КОНЕЦ		
		
	Иначе
		
		СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		СписокТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
		СписокТипов.Добавить(Тип("ДокументСсылка.АккредитивПереданный"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное"));
		
		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
			СписокТипов = Новый ОписаниеТипов(
				ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);
			СписокТипов = СписокТипов.Типы();
		КонецЕсли;
		
		Если НЕ Исправление Тогда
			ИндексУдаляемогоЭлемента = СписокТипов.Найти(Тип("ДокументСсылка.КорректировкаПоступления"));
			Если ИндексУдаляемогоЭлемента <> Неопределено Тогда
				СписокТипов.Удалить(ИндексУдаляемогоЭлемента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
// {{KM WARE Агапов Н.А. Заявка № 30.09.2015 начало
Функция ВозвратКодаВидаОперации(ДокументыОснования)
	Для каждого строка из ДокументыОснования цикл 
		Если строка.СтатьяЗатрат = справочники.СтатьиЗатрат.НайтиПоКоду("000001010") тогда
    		ПроверкаКодаВидаОперации = "найден";
		КонецЕсли;
	КонецЦикла;

	возврат ПроверкаКодаВидаОперации;
КонецФункции // ВозвратКодаВидаОперации() }}KM WARE Агапов Н.А. Заявка № 30.09.2015 окончание


Процедура УстановитьКодВидаОперации(КодВидаОперацииОснования = Неопределено) Экспорт
	
		
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	
	Если ВерсияПостановления <> 2 Тогда
		Возврат;
	КонецЕсли;
	// {{ТТК Сладков А. Заявка №7738336 29.06.2016 начало
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);
	// {{ТТК Сладков А. Заявка №7738336 29.06.2016 окончание
	
	Если Исправление ИЛИ ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда		
		Если КодВидаОперацииОснования <> Неопределено Тогда
			
			// {{ТТК Сладков А. Заявка №7738336 29.06.2016 начало
			//КодВидаОперации = КодВидаОперацииОснования;
			//Возврат;
			 КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(КодВидаОперацииОснования, ВерсияКодовВидовОпераций);
			Возврат;
			// {{ТТК Сладков А. Заявка №7738336 29.06.2016 окончание

		КонецЕсли;
	КонецЕсли;
	
	
	// {{ТТК Сладков А. Заявка №7738336 29.06.2016 начало
	//Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
	//	
	//	//АБС-Пр2 12286+
	//	Если ДоговорКонтрагента.абс_ВидДоговора = Справочники.абс_ПредметДоговораГК.АгентскийДоговор Тогда			
	//		КодВидаОперации = "05";			
	//	Иначе	//АБС-Пр2 12286-		
	//		КодВидаОперации = "02";			
	//	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		
		Если ВерсияКодовВидовОпераций = 1 Тогда
			КодВидаОперацииНаУменьшение = "";
		ИначеЕсли ВерсияКодовВидовОпераций = 2 Тогда
			КодВидаОперацииНаУменьшение = "18";
		Иначе
			КодВидаОперацииНаУменьшение = ?(СводныйКорректировочный, "01", "18");
		КонецЕсли;		
	// {{ТТК Сладков А. Заявка №7738336 29.06.2016 окончание
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
			
		Для Каждого СтрокаТабличнойЧасти ИЗ ДокументыОснования Цикл
			
			// {{ТТК Сладков А. Заявка №7738336 29.06.2016 начало
			ТипОснования = ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование);
			// {{ТТК Сладков А. Заявка №7738336 29.06.2016 окончание
			
			// {{KM WARE Агапов Н.А. Заявка №34510 30.09.2015 начало
			// {{KM WARE Агапов Н.А. Заявка №35167 06.11.2015 начало
			//Добавлено исключение документа "ПоступлениеДопРасходов"
			попытка
				Если не ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов") тогда
					ПроверкаКодаВидаОперации = ВозвратКодаВидаОперации(СтрокаТабличнойЧасти.ДокументОснование.Услуги);
				КонецЕсли;
			Исключение
			КонецПопытки;
			// }}KM WARE Агапов Н.А. Заявка №35167 06.11.2015 окончание
			// }}KM WARE Агапов Н.А. Заявка №34510 30.09.2015 окончание

			
			// {{ТТК Сладков А. Заявка №7738336 29.06.2016 начало

			//Если ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
			//	Или  ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда   //АБС-Пр2 12286
			//	КодВидаОперации = "03";
			//// {{KM WARE Агапов Н.А. Заявка №34510 30.09.2015 начало	
			//ИначеЕсли ПроверкаКодаВидаОперации = "найден" Тогда
			//	КодВидаОперации = "01";
			//// }}KM WARE Агапов Н.А. Заявка №34510 30.09.2015 окончание
			//ИначеЕсли ДоговорКонтрагента.абс_ВидДоговора = Справочники.абс_ПредметДоговораГК.АгентскийДоговор Тогда   	//АБС-Пр2 12286+		
			//	КодВидаОперации = "04";		
			//ИначеЕсли НайтиОбъектыСтроительстваВДокументе(СтрокаТабличнойЧасти.ДокументОснование) Тогда
			//	КодВидаОперации = "13";
			//Иначе //АБС-Пр2 12286-
			//	КодВидаОперации = "01";
			//КонецЕсли;
			
			Если ВерсияКодовВидовОпераций < 3 Тогда
				
				Если ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
					Или  ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда   //АБС-Пр2 12286
					КодВидаОперации = "03";
				// {{KM WARE Агапов Н.А. Заявка №34510 30.09.2015 начало	
				ИначеЕсли ПроверкаКодаВидаОперации = "найден" Тогда
					КодВидаОперации = "01";
				// }}KM WARE Агапов Н.А. Заявка №34510 30.09.2015 окончание
				ИначеЕсли ДоговорКонтрагента.абс_ВидДоговора = Справочники.абс_ПредметДоговораГК.АгентскийДоговор Тогда   	//АБС-Пр2 12286+		
					КодВидаОперации = "04";		
				ИначеЕсли НайтиОбъектыСтроительстваВДокументе(СтрокаТабличнойЧасти.ДокументОснование) Тогда
					КодВидаОперации = "13";
				Иначе //АБС-Пр2 12286-
					КодВидаОперации = "01";
				КонецЕсли;
				
			Иначе
					
				Если ТипОснования = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС")
				И ВерсияКодовВидовОпераций > 1 Тогда
					// Код операции указывается в документе
					КодВидаОперацииИзДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаТабличнойЧасти.ДокументОснование, "КодВидаОперации");
					КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(КодВидаОперацииИзДокумента, ВерсияКодовВидовОпераций);
					Прервать;	
				ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
					Или  ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда   //АБС-Пр2 12286
					КодВидаОперации = "01";
				// {{KM WARE Агапов Н.А. Заявка №34510 30.09.2015 начало	
				ИначеЕсли ПроверкаКодаВидаОперации = "найден" Тогда
					КодВидаОперации = "01";
				// }}KM WARE Агапов Н.А. Заявка №34510 30.09.2015 окончание
				ИначеЕсли ДоговорКонтрагента.абс_ВидДоговора = Справочники.абс_ПредметДоговораГК.АгентскийДоговор Тогда   	//АБС-Пр2 12286+		
					КодВидаОперации = "01";		
				ИначеЕсли НайтиОбъектыСтроительстваВДокументе(СтрокаТабличнойЧасти.ДокументОснование) Тогда
					КодВидаОперации = "13";
				Иначе //АБС-Пр2 12286-
					КодВидаОперации = "01";
				КонецЕсли;
					
			КонецЕсли;

			// {{ТТК Сладков А. Заявка №7738336 29.06.2016 окончание

			
		КонецЦикла;
		
		// {{KM WARE Семенов И.С. Заявка № 32189 20.07.2015 начало		
		// 04 для заполненного продавца
		абс_ЗаполнитьКодВидаОперации(); 
		// }}KM WARE Семенов И.С. Заявка № 32189 20.07.2015 окончание
				
	// {{ТТК Сладков А. Заявка №7738336 29.06.2016 начало
	ИначеЕсли ВерсияКодовВидовОпераций = 3 Тогда 
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
			КодВидаОперации = "02";
		КонецЕсли;
		
	// Коды операций до 1 июля 2016 года
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		Если ДокументыОснования.Количество() > 0
			И ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			КодВидаОперации = "05";
		Иначе
			КодВидаОперации = "02";
		КонецЕсли;
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		КодВидаОперации = "05";
		
	// {{ТТК Сладков А. Заявка №7738336 29.06.2016 окончание	
		
	Иначе
		
		КодВидаОперации = "01";		
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьНаОснованииСчетаФактуры(Основание)
	
	Если Основание.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, , "Номер,Дата,Проведен,ПометкаУдаления");
	Дата = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	
	Для Каждого СтрокаАванса Из Основание.Авансы Цикл 
		НоваяСтрока = Авансы.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
	КонецЦикла;	
	
	Исправление      = Истина;
	НомерИсправления = НомерИсправления + 1;
	
	Если Основание.Исправление Тогда
		ИсправляемыйСчетФактура = Основание.ИсправляемыйСчетФактура;
	Иначе
		ИсправляемыйСчетФактура = Основание;
	КонецЕсли;
	
	УстановитьКодВидаОперации(КодВидаОперации);
			
КонецПроцедуры	

Процедура ЗаполнитьНаОснованииИсправления(Основание, СтрокаОснования)
	
	ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументПоступления(Основание.ДокументПоступления);
	
	//АБС+ Тупиков закомментировано по заявке 15197
	//Если ЗначениеЗаполнено(ИсходныйДокумент.ВалютаДокумента) 
	//	И ИсходныйДокумент.ВалютаДокумента <> мВалютаРегламентированногоУчета 
	//	И ЗначениеЗаполнено(ИсходныйДокумент.ДоговорКонтрагента)
	//	И ИсходныйДокумент.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
	//	
	//	Если Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
	//		УточнениеСообщения = НСтр("ru='корректировочных'"); 
	//	Иначе
	//		УточнениеСообщения = НСтр("ru='исправленных'");
	//	КонецЕсли;
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru='Для договоров в условных единицах регистрация %1 счетов-фактур, оформленных в валюте, не поддерживается.
	//		|Документ-основание должен быть оформлен в рублях.'"),
	//		УточнениеСообщения);
	//	ВызватьИсключение ТекстСообщения;
	//	
	//КонецЕсли;
	//АБС- Тупиков
	
	// {{ТТК Сладков А. Заявка №7738336 29.06.2016 начало
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);
	// {{ТТК Сладков А. Заявка №7738336 29.06.2016 окончание
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение 
		ИЛИ ТипЗнч(Основание.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
	Иначе
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
	КонецЕсли;
	
	Исправление = Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
	
	ИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание.ДокументПоступления, "СчетФактураПолученный");
	
	Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
		
		//АБС ВСТАВКА 36164  10.12.2013 18:30:40  Стрельцов
		Запрос = Новый Запрос;		
		Запрос.УстановитьПараметр("ИсходныйДокумент", 		 Основание.ДокументПоступления);		
		Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", ИсправляемыйСчетФактура);		
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		// {{ТТК Сладков А. Заявка №7738336 29.06.2016 начало
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
		|			ТОГДА ВЫБОР
		|					КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
		|							И СчетФактураПолученныйДокументыОснования.Ссылка.КодВидаОперацииНаУменьшение <> """"
		|						ТОГДА СчетФактураПолученныйДокументыОснования.Ссылка.КодВидаОперацииНаУменьшение
		|					ИНАЧЕ ""18""
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КодВидаОперацииНаУменьшение,
		// {{ТТК Сладков А. Заявка №7738336 29.06.2016 окончание
		|	СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.Исправление КАК Исправление,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсправления КАК ДатаИсправления,
		|	СчетФактураПолученныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
		|	СчетФактураПолученныйДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
		|	СчетФактураПолученныйДокументыОснования.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
		|	СчетФактураПолученныйДокументыОснования.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
		|	СчетФактураПолученныйДокументыОснования.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
		|	И СчетФактураПолученныйДокументыОснования.Ссылка = &ИсправляемыйСчетФактура
		|	И СчетФактураПолученныйДокументыОснования.ДатаИсходногоДокумента <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РеквизитыСФ = Выборка;
		Иначе
		//\\АБС ВСТАВКА 36164 КОНЕЦ 
		    // {{ТТК Сладков А. Заявка №7738336 29.06.2016 начало
			
			//РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ИсправляемыйСчетФактура,
			//"НомерВходящегоДокумента,ДатаВходящегоДокумента,
			//|Исправление,НомерИсправления,ДатаИсправления,
			//|НомерИсходногоДокумента,ДатаИсходногоДокумента,
			//|УчитыватьИсправлениеИсходногоДокумента,НомерИсправленияИсходногоДокумента,ДатаИсправленияИсходногоДокумента,
			//|КодВидаОперации");
			
			РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ИсправляемыйСчетФактура,
			"НомерВходящегоДокумента,ДатаВходящегоДокумента,
			|Исправление,НомерИсправления,ДатаИсправления,
			|НомерИсходногоДокумента,ДатаИсходногоДокумента,
			|УчитыватьИсправлениеИсходногоДокумента,НомерИсправленияИсходногоДокумента,ДатаИсправленияИсходногоДокумента,
			|КодВидаОперации,КодВидаОперацииНаУменьшение");

			// {{ТТК Сладков А. Заявка №7738336 29.06.2016 окончание

		КонецЕсли;
			
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			
			
			// {{ТТК Сладков А. Заявка №7738336 29.06.2016 начало
			Если ВерсияКодовВидовОпераций > 1 Тогда
				КодВидаОперацииНаУменьшение = РеквизитыСФ.КодВидаОперацииНаУменьшение;
			КонецЕсли;
			// {{ТТК Сладков А. Заявка №7738336 29.06.2016 окончание

			
			Если Исправление Тогда
				
				//АБС ВСТАВКА 36164  10.12.2013 18:38:11  Стрельцов
				НомерИсправленияСФ  = РеквизитыСФ.НомерИсправления;
				//\\АБС ВСТАВКА 36164 КОНЕЦ 
				
				НомерВходящегоДокумента = РеквизитыСФ.НомерВходящегоДокумента;
				ДатаВходящегоДокумента  = РеквизитыСФ.ДатаВходящегоДокумента;
				
				//АБС ИЗМЕНЕНИЕ 36164  10.12.2013 18:59:52  Стрельцов
				СтрокаОснования.НомерИсходногоДокумента = РеквизитыСФ.НомерИсходногоДокумента;
				СтрокаОснования.ДатаИсходногоДокумента  = РеквизитыСФ.ДатаИсходногоДокумента;
				
				СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = РеквизитыСФ.УчитыватьИсправлениеИсходногоДокумента;
				Если СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента Тогда
					СтрокаОснования.НомерИсправленияИсходногоДокумента = РеквизитыСФ.НомерИсправленияИсходногоДокумента;
					СтрокаОснования.ДатаИсправленияИсходногоДокумента  = РеквизитыСФ.ДатаИсправленияИсходногоДокумента;
				КонецЕсли;
				
			Иначе
				
				СтрокаОснования.НомерИсходногоДокумента = РеквизитыСФ.НомерВходящегоДокумента;
				СтрокаОснования.ДатаИсходногоДокумента  = РеквизитыСФ.ДатаВходящегоДокумента;
				
				СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = РеквизитыСФ.Исправление;
				Если СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента Тогда
					СтрокаОснования.НомерИсправленияИсходногоДокумента = РеквизитыСФ.НомерИсправления;
					СтрокаОснования.ДатаИсправленияИсходногоДокумента  = РеквизитыСФ.ДатаИсправления;
				КонецЕсли;
				//\\АБС ИЗМЕНЕНИЕ 36164 КОНЕЦ 
				
			КонецЕсли;
			
			
		Иначе
		
			НомерВходящегоДокумента = РеквизитыСФ.НомерВходящегоДокумента;
			ДатаВходящегоДокумента  = РеквизитыСФ.ДатаВходящегоДокумента;
			
		КонецЕсли;
	
		УстановитьКодВидаОперации(РеквизитыСФ.КодВидаОперации);
		
	Иначе
	
		УстановитьКодВидаОперации();
		
	КонецЕсли;
		
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	Иначе
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.СчетФактураПолученный", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.СчетФактураПолученный", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	Если Дата < '20040216' Тогда
		СтруктураМакетов.Вставить("СчетФактура575", "Счет-фактура");
	ИначеЕсли Дата < '20060530' Тогда
		СтруктураМакетов.Вставить("СчетФактура84", "Счет-фактура");
	Иначе
		СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура");
	КонецЕсли;
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,ВидСчетаФактуры,Контрагент");
	
	Если НЕ СформированПриВводеНачальныхОстатковНДС Тогда
		
		// АБС ИЗМЕНЕНО Фролов 20120712
		// Если это СФ на льготу по НДС, то входящий номер проставляется автоматически
		Если НЕ ЗначениеЗаполнено(абс_ЛьготаПоНДС) Тогда
			
			СтруктураОбязательныхПолей.Вставить("ДатаВходящегоДокумента");
			СтруктураОбязательныхПолей.Вставить("НомерВходящегоДокумента");
			//АБС ВСТАВКА 57038  25.05.2015 10:11:19  Коломиец
		Иначе
			СтруктураОбязательныхПолей.Вставить("ДатаВходящегоДокумента");
			//АБС ВСТАВКА 57038 КОНЕЦ				
			
		КонецЕсли;
		
		
		Если Дата >= '20111001' Тогда
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				//АБС ИЗМЕНЕНИЕ 36443  12.12.2013 15:47:22  Стрельцов
				//Если Дата < '20131106' Тогда
					//СтруктураОбязательныхПолей.Вставить("НомерИсходногоДокумента");
					//СтруктураОбязательныхПолей.Вставить("ДатаИсходногоДокумента");
				//КонецЕсли;
				//\\АБС ИЗМЕНЕНИЕ 36443 КОНЕЦ 	
			КонецЕсли;
			
			ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
			Если ВерсияПостановления = 2 Тогда
				СтруктураОбязательныхПолей.Вставить("КодВидаОперации");
				//АБС ИЗМЕНЕНИЕ 36443  12.12.2013 15:47:22  Стрельцов
				//Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				//	Если УчитыватьИсправлениеИсходногоДокумента Тогда
				//		СтруктураОбязательныхПолей.Вставить("НомерИсправленияИсходногоДокумента");
				//		СтруктураОбязательныхПолей.Вставить("ДатаИсправленияИсходногоДокумента");
				//	КонецЕсли;
				//КонецЕсли;
				//\\АБС ИЗМЕНЕНИЕ 36443 КОНЕЦ 
				Если Исправление Тогда
					СтруктураОбязательныхПолей.Вставить("НомерИсправления");
					СтруктураОбязательныхПолей.Вставить("ДатаИсправления");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры 

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, Отказ, Заголовок)
	Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) 
			И Не ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") И Не СтрокаТЧ.ДокументОснование.Проведен Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Счет-фактуру можно вводить только на основании проведенного документа (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ПодготовитьТаблицыДокументовОснования = Ложь) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументОснование"      	, "ДокументОснование");
	СтруктураПолей.Вставить("ДокументОснованиеПроведен" , "ДокументОснование.Проведен");
	СтруктураПолей.Вставить("УчитыватьНДС"				, "ДокументОснование.УчитыватьНДС");
	СтруктураПолей.Вставить("НДСВключенВСтоимость"		, "ДокументОснование.НДСВключенВСтоимость");
	СтруктураПолей.Вставить("СуммаВключаетНДС"			, "ДокументОснование.СуммаВключаетНДС");
	СтруктураПолей.Вставить("СуммаВключаетНДС"			, "ДокументОснование.СуммаВключаетНДС");
	
	РезультатЗапросаПоДокументамОснованиям = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураПолей);
	
	ТаблицаПоДокументамОснованиям = РезультатЗапросаПоДокументамОснованиям.Выгрузить();
	
	Если СтруктураШапкиДокумента.НаАванс Тогда
		
		ТаблицаПоДокументамОснованиям.Колонки.Добавить("ТаблицаДанных");
		
		Для Каждого СтрокаОснования Из ТаблицаПоДокументамОснованиям Цикл
			
			СтрокаОснования.УчитыватьНДС = Истина;
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Сумма",		"Сумма");
			СтруктураПолей.Вставить("НДС",			"СуммаНДС");
			СтруктураПолей.Вставить("СтавкаНДС",	"СтавкаНДС");
			
			РезультатЗапросаПоАвансам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураПолей);
			
			СтрокаОснования.ТаблицаДанных = РезультатЗапросаПоАвансам.Выгрузить();
			ТаблицаПоАвансам = СтрокаОснования.ТаблицаДанных; 
			
			ТаблицаПоАвансам.Колонки.Добавить("СчетФактура", ТаблицаПоДокументамОснованиям.Колонки.ДокументОснование.ТипЗначения);
			
			ТаблицаПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные, "ВидЦенности");
			ТаблицаПоАвансам.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Поставщик");
			ТаблицаПоАвансам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
			ТаблицаПоАвансам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаПоАвансам.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "СуммаБезНДС");
			ТаблицаПоАвансам.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным, "СчетУчетаНДС");
			ТаблицаПоАвансам.Колонки.Добавить("СчетУчетаНДСПоРеализации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным, "СчетУчетаНДСПоРеализации");
			ТаблицаПоАвансам.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПокупки"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком, "Событие");
			
			Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
				
				СтрокаТаблицы.СчетФактура = СтрокаОснования.ДокументОснование;
				СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
			
			КонецЦикла;
			
		КонецЦикла; 
	ИначеЕсли ПодготовитьТаблицыДокументовОснования Тогда
		
		ТаблицаПоДокументамОснованиям.Колонки.Добавить("ТаблицаДанных");
		
		Для Каждого СтрокаОснования Из ТаблицаПоДокументамОснованиям Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаОснования.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Или СтруктураШапкиДокумента.НаАванс Тогда
				СтрокаОснования.УчитыватьНДС = Истина;
				СтрокаОснования.НДСВключенВСтоимость = Ложь;
				СтрокаОснования.СуммаВключаетНДС = Ложь;
			КонецЕсли;
			
			Если СтрокаОснования.НДСВключенВСтоимость Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОснования.ТаблицаДанных = УчетНДС.ПолучитьТаблицуДокументаНДС(СтрокаОснования.ДокументОснование);
			
			Если СтрокаОснования.ТаблицаДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				СтрокиКУдалению = Новый Массив;
				Для Каждого СтрокаТаблицы Из СтрокаОснования.ТаблицаДанных Цикл
					Если СтрокаТаблицы.СчетФактура <> Ссылка Тогда
						СтрокиКУдалению.Добавить(СтрокаТаблицы);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					СтрокаОснования.ТаблицаДанных.Удалить(СтрокаКУдалению);
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаОснования.ТаблицаДанных.Колонки.Найти("СчетФактура") = Неопределено Тогда
				
				СтрокаОснования.ТаблицаДанных.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов(ТаблицаПоДокументамОснованиям.Колонки.ДокументОснование.ТипЗначения));
				СтрокаОснования.ТаблицаДанных.ЗаполнитьЗначения(СтрокаОснования.ДокументОснование, "СчетФактура");
				
			КонецЕсли;			
			
		КонецЦикла; 
	КонецЕсли;
		
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДокумента, Отказ, Заголовок)
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаДокумента);
	
	УчетНДСФормированиеДвижений.ЗарегистрироватьВЖурналеУчетаСчетовФактур(СтруктураШапкиДокумента, СуммаДокумента, СуммаНДСДокумента, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвижениеПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.НаАванс Тогда
		
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ТаблицаДвижений_НДССАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();
		
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Для Каждого СтрокаДанных Из СтрокаТаблицы.ТаблицаДанных Цикл
				
				НоваяЗапись = ТаблицаДвижений_НДСПредъявленный.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных);
				НоваяЗапись.Организация = СтруктураШапкиДокумента.Организация;
				НоваяЗапись.СчетУчетаНДС = Неопределено;
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				НоваяЗапись = ТаблицаДвижений_НДССАвансов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных);
				НоваяЗапись.Организация = СтруктураШапкиДокумента.Организация;
				НоваяЗапись.Покупатель = СтрокаДанных.Контрагент;
				НоваяЗапись.ДатаСобытия = СтруктураШапкиДокумента.Дата;
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				
			КонецЦикла;
		КонецЦикла;
			
		Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда

			Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
			Движения.НДСПредъявленный.ДобавитьДвижение();
			
		КонецЕсли;
		
		Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда

			Движения.НДСсАвансов.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДССАвансов;
			Движения.НДСсАвансов.ДобавитьДвижение();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ЗаполнитьНаОснованииСчетаФактуры(Основание);
		
	ИначеЕсли ЗначениеЗаполнено(Основание) 
		И ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		
		Дата = Основание.Дата;
		
		СтрДокОснования = ДокументыОснования.Добавить();
		СтрДокОснования.ДокументОснование = Основание.Ссылка;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			//АБС ИЗМЕНЕНИЕ 36164  10.12.2013 18:26:33  Стрельцов 
			ЗаполнитьНаОснованииИсправления(Основание, СтрДокОснования);
			//\\АБС ИЗМЕНЕНИЕ 36164 КОНЕЦ
			
			ОпределениеПараметровСчетаФактуры();
			
		Иначе
			
			СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыПолученного.НаАванс);
			
			Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
				ЗаполнитьСчетФактуруНаАванс();
			Иначе
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
				ОпределениеПараметровСчетаФактуры();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	//АБС ВСТАВКА №16350 НАЧАЛО
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") и не ЗначениеЗаполнено(Комментарий) Тогда
		Комментарий = Основание.Комментарий;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №16350 КОНЕЦ
	
	//АБС ВСТАВКА №46008 НАЧАЛО «28 августа 2014 г.», Пополитов
	абс_СлужебныеФункции.абс_ЗаполнитьКодВидаОперации(ЭтотОбъект);
	//\\АБС ВСТАВКА №46008 КОНЕЦ
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	ДокументыОснования.Очистить();
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ОбъектКопирования.Ссылка);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если НЕ мОбновлятьРеквизитыПриЗаписи 
		ИЛИ ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОснование) 
		И ДокументыОснования.Найти(ДокументОснование) = Неопределено Тогда
		ДокументОснование = Неопределено;
	КонецЕсли;
	
	Если ДокументОснование = Неопределено 
		И ДокументыОснования.Количество() > 0 Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный)
		И НЕ СформированПриВводеНачальныхОстатковНДС Тогда
		ОпределениеПараметровСчетаФактуры();
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс 
		И Авансы.Количество() = 0 Тогда
		Авансы.Добавить();
	КонецЕсли;
	
	//АБС ВСТАВКА №46008 НАЧАЛО «28 августа 2014 г.», Пополитов
	абс_СлужебныеФункции.абс_ЗаполнитьКодВидаОперации(ЭтотОбъект);
	//\\АБС ВСТАВКА №46008 КОНЕЦ 
	
	//АБС ВСТАВКА Навценя 03.07.2015
	ПроверитьНомерВходящегоДокумента(Отказ);
	//АБС ВСТАВКА КОНЕЦ
	
	//АБС ВСТАВКА Стрельцов 33347(номер в ЕИСУПе) 08.07.2015
	абс_ПроверитьДатуВходящегоДокумента(Отказ);
	//\\АБС ВСТАВКА КОНЕЦ
	
КонецПроцедуры

//АБС ВСТАВКА №46008 НАЧАЛО «28 августа 2014 г.», Пополитов
Процедура абс_ЗаполнитьКодВидаОперации() Экспорт
	
	
	
	Если не ЗначениеЗаполнено(абс_Продавец) или Дата < Дата(2014,8,1) Тогда
		Возврат;
	КонецЕсли;
	
	// {{ТТК Сладков А. Заявка №7738336 29.06.2016 начало
	//КодВидаОперации = "04";
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);
	
	Если ВерсияКодовВидовОпераций<3 Тогда
		КодВидаОперации = "04";
	Иначе
		КодВидаОперации = "01";
	КонецЕсли;	
	// {{ТТК Сладков А. Заявка №7738336 29.06.2016 окончание

	
		
КонецПроцедуры
//\\АБС ВСТАВКА №46008 КОНЕЦ  	

Процедура ОбработкаПроведения(Отказ)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям;
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям);
	
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
		
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		НепроверяемыеРеквизиты.Добавить("ДокументыОснования.ДокументОснование");
	КонецЕсли;
	
	Если СформированПриВводеНачальныхОстатковНДС
		ИЛИ ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс  Тогда
		НепроверяемыеРеквизиты.Добавить("Авансы.Сумма");
		НепроверяемыеРеквизиты.Добавить("Авансы.СтавкаНДС");
	КонецЕсли;
	
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		НепроверяемыеРеквизиты.Добавить("НомерВходящегоДокумента");
		НепроверяемыеРеквизиты.Добавить("ДатаВходящегоДокумента");
	КонецЕсли;
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		НепроверяемыеРеквизиты.Добавить("НомерИсходногоДокумента");
		НепроверяемыеРеквизиты.Добавить("ДатаИсходногоДокумента");				
	КонецЕсли;
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Если ВерсияПостановления = 1 Тогда
		НепроверяемыеРеквизиты.Добавить("КодСпособаПолучения");
		НепроверяемыеРеквизиты.Добавить("НомерИсправленияИсходногоДокумента");
		НепроверяемыеРеквизиты.Добавить("ДатаИсправленияИсходногоДокумента");
		НепроверяемыеРеквизиты.Добавить("НомерИсправления");
		НепроверяемыеРеквизиты.Добавить("ДатаИсправления");
		
	Иначе
		
		Если СформированПриВводеНачальныхОстатковНДС Тогда
			НепроверяемыеРеквизиты.Добавить("КодВидаОперации");
			НепроверяемыеРеквизиты.Добавить("КодСпособаПолучения");
		КонецЕсли;
		
		Если СформированПриВводеНачальныхОстатковНДС ИЛИ ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			НепроверяемыеРеквизиты.Добавить("НомерИсправленияИсходногоДокумента");
			НепроверяемыеРеквизиты.Добавить("ДатаИсправленияИсходногоДокумента");
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			
			//АБС ВСТАВКА 36164  11.12.2013 17:37:53  Стрельцов
			НепроверяемыеРеквизиты.Добавить("НомерИсходногоДокумента");
			НепроверяемыеРеквизиты.Добавить("ДатаИсходногоДокумента");
			Если НЕ Исправление Тогда
				НепроверяемыеРеквизиты.Добавить("НомерИсправляемогоКорректировочногоДокумента");
				НепроверяемыеРеквизиты.Добавить("ДатаИсправляемогоКорректировочногоДокумента");
			КонецЕсли;
			//\\АБС ВСТАВКА 36164 КОНЕЦ 
			
			Если НЕ УчитыватьИсправлениеИсходногоДокумента Тогда
				НепроверяемыеРеквизиты.Добавить("НомерИсправленияИсходногоДокумента");
				НепроверяемыеРеквизиты.Добавить("ДатаИсправленияИсходногоДокумента");				
			КонецЕсли;
		КонецЕсли;
		
		Если СформированПриВводеНачальныхОстатковНДС ИЛИ НЕ Исправление Тогда
			НепроверяемыеРеквизиты.Добавить("НомерИсправления");
			НепроверяемыеРеквизиты.Добавить("ДатаИсправления");			
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);	
	
КонецПроцедуры

//АБС ВСТАВКА 4500/4501 НАЧАЛО
Функция ОшибкаСДатойВСписке()
	
	Отказ = Ложь;
	
	Для каждого Строка из ДокументыОснования Цикл
		Если НачалоДня(ДатаВходящегоДокумента) > НачалоДня(Строка.ДокументОснование.Дата) Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

Функция СообщениеСДатойВСписке()
	
	Отказ = Ложь;
	
	Для каждого Строка из ДокументыОснования Цикл
		Если Год(ДатаВходящегоДокумента) < Год(Строка.ДокументОснование.Дата) Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции
//\\АБС ВСТАВКА 4500/4501 КОНЕЦ

//АБС-Пр2 12286+
Функция НайтиОбъектыСтроительстваВДокументе(Основание)
	
	Для Каждого ТабЧасть Из Основание.Метаданные().ТабличныеЧасти Цикл
		
		Если ТабЧасть.Реквизиты.Найти("СчетУчетаБУ") <> Неопределено Тогда
			
			ТабЧастьДанные = Основание[ТабЧасть.Имя];
			Для Каждого Стр Из ТабЧастьДанные Цикл
				Если Стр.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков
					Или Стр.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования
					Или Стр.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТабЧасть.Реквизиты.Найти("СчетЗатрат") <> Неопределено Тогда
			
			ТабЧастьДанные = Основание[ТабЧасть.Имя];
			Для Каждого Стр Из ТабЧастьДанные Цикл
				Если Стр.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков
					Или Стр.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования
					Или Стр.СчетЗатрат = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	                                                                                      
	
	Возврат Ложь;
	
КонецФункции

//АБС-Пр2 12286-

//АБС ВСТАВКА Навценя 03.07.2015
Процедура ПроверитьНомерВходящегоДокумента(Отказ)
	// {{KM WARE Агапов Н.А. Заявка №33347 30.09.2015 начало	
	//Если НЕ ПараметрыСеанса.абс_НастройкиСистемы.Свойство("НедопустимыеСимволыНомераСФ") Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//НедопустимыеСимыволы = ПараметрыСеанса.абс_НастройкиСистемы.НедопустимыеСимволыНомераСФ;
	//Если НЕ ЗначениеЗаполнено(НедопустимыеСимыволы) Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//
	//ШаблонОшибки = "Номер входящего документа содержимт недопустимые символы: %1";
	////МассивСимволов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НедопустимыеСимыволы);
	//
	//МассивСимволов = Новый Массив;
	//Для а = 1 По СтрДлина(НедопустимыеСимыволы) Цикл
	//	МассивСимволов.Добавить(Сред(НедопустимыеСимыволы,а,а));
	//КонецЦикла;
	//
	//Для Каждого Символ из МассивСимволов Цикл 
	//	Если Найти(НомерВходящегоДокумента, Символ) <> 0 Тогда 
	//		ttk_ОбщегоНазначения.СообщитьОбОшибке(
	//				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Символ),
	//				Отказ);
	//	КонецЕсли;
	//КонецЦикла;
	
	ШаблонОшибки = "Номер входящего документа содержимт недопустимые символы";
	Если Найти(НомерВходящегоДокумента, "<") <> 0 или Найти(НомерВходящегоДокумента, ">") <> 0 Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, "< или >"),
					Отказ);
	КонецЕсли;	
	// {{KM WARE Агапов Н.А. Заявка №33347 30.09.2015 начало
КонецПроцедуры
//АБС ВСТАВКА КОНЕЦ

//АБС ВСТАВКА Стрельцов 33347(номер в ЕИСУПе) 08.07.2015
Процедура абс_ПроверитьДатуВходящегоДокумента(Отказ)
		
	ДатаНачалаИнтервала = Дата("200001010000");
	
	Если Не ЗначениеЗаполнено(Дата) Или 
		КонецКвартала(Дата) <= ДатаНачалаИнтервала Тогда
		Возврат;
	КонецЕсли;
	
	ДатаКонцаИнтервала = КонецКвартала(Дата);
	
	//Если Не ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если НЕ (ДатаВходящегоДокумента >= ДатаНачалаИнтервала
		И ДатаВходящегоДокумента <= ДатаКонцаИнтервала) Тогда
	
		ТекстОшибки = "Неверно указана дата входящего документа! Дата входящего документа должна быть в периоде с "+Формат(ДатаНачалаИнтервала,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаКонцаИнтервала,"ДФ=dd.MM.yyyy");
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки,Отказ);		
	КонецЕсли;
	
КонецПроцедуры
//\\АБС ВСТАВКА КОНЕЦ

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мОбновлятьРеквизитыПриЗаписи = Истина;