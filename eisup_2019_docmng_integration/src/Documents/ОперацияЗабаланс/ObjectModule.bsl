////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой бухгалтерской справки.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма бухгалтерской справки.
//
Функция ПечатьБухгалтерскойСправки()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияЗабаланс.Организация,
	|	ОперацияЗабаланс.Номер,
	|	ОперацияЗабаланс.Дата,
	|	ОперацияЗабаланс.Содержание
	|ИЗ
	|	Документ.ОперацияЗабаланс КАК ОперацияЗабаланс
	|ГДЕ
	|	ОперацияЗабаланс.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗабалансовыйУчетДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ЗабалансовыйУчетДвиженияССубконто.СчетДт,
	|	ЗабалансовыйУчетДвиженияССубконто.СубконтоДт1,
	|	ЗабалансовыйУчетДвиженияССубконто.СубконтоДт2,
	|	ЗабалансовыйУчетДвиженияССубконто.СубконтоДт3,
	|	ЗабалансовыйУчетДвиженияССубконто.СчетКт,
	|	ЗабалансовыйУчетДвиженияССубконто.СубконтоКт1,
	|	ЗабалансовыйУчетДвиженияССубконто.СубконтоКт2,
	|	ЗабалансовыйУчетДвиженияССубконто.СубконтоКт3,
	|	ЗабалансовыйУчетДвиженияССубконто.Организация,
	|	ЗабалансовыйУчетДвиженияССубконто.Сумма,
	|	""-"" КАК ВалютнаяСуммаДт,
	|	""-"" КАК ВалютнаяСуммаКт,
	|	ЗабалансовыйУчетДвиженияССубконто.КоличествоДт,
	|	ЗабалансовыйУчетДвиженияССубконто.КоличествоКт,
	|	ЗабалансовыйУчетДвиженияССубконто.Содержание
	|ИЗ
	|	РегистрБухгалтерии.ЗабалансовыйУчет.ДвиженияССубконто(, , Регистратор = &Регистратор) КАК ЗабалансовыйУчетДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();
	
	Макет = ПолучитьМакет("БухгалтерскаяСправка");
	
	// Получаем области макета для вывода в табличный документ.
	ШапкаДокумента   = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодвалДокумента  = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию.
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя.
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОперацияБух_БухгалтерскаяСправка_Забаланс";

	// Выведем шапку документа.
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
	
	ШапкаДокумента.Параметры.Организация    = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
	ШапкаДокумента.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Док);
	ШапкаДокумента.Параметры.ДатаДокумента  = Формат(Док.Дата, "ДЛФ=D");
	ШапкаДокумента.Параметры.Содержание     = Док.Содержание;
	
	ТабДокумент.Вывести(ШапкаДокумента);
	
	// Выведем заголовок таблицы.
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выведем строки документа.
	Пока ВыборкаДвижений.Следующий() Цикл
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
		
		АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоДт3);
					
		АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоКт3);
					
		СтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
		СтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
									 
		// Проверим, помещается ли строка с подвалом.
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалДокумента);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			// Выведем подвал таблицы.
			ТабДокумент.Вывести(ПодвалТаблицы);
				
			// Выведем разрыв страницы.
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			// Выведем заголовок таблицы.
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;
	
	// Выведем подвал таблицы.
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выведем подвал документа.
	ПодвалДокумента.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Ответственный), "", ОбщегоНазначения.ФамилияИнициалыФизЛица(Ответственный.ФизЛицо));
	ТабДокумент.Вывести(ПодвалДокумента);
	
	Возврат ТабДокумент;
		
КонецФункции // ПечатьБухгалтерскойСправки()	

Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	ИначеЕсли ИмяМакета = "БухгалтерскаяСправка" Тогда

		ТабДокумент = ПечатьБухгалтерскойСправки();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("БухгалтерскаяСправка", "Бухгалтерская справка");
//	Возврат Новый Структура("БухгалтерскаяСправка,НалоговаяСправка", "Бухгалтерская справка","Налоговая справка");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	ЭтоНовыйДокумент = Ссылка.Пустая();

	Если ЭтоНовыйДокумент Тогда
		РанееУстановленнаяПометкаУдаления = Ложь;

	Иначе
		Запрос = Новый Запрос();
		Запрос.Текст ="
		|ВЫБРАТЬ 
		|	0 
		|ИЗ
		|	Документ.ОперацияЗабаланс КАК Операция
		|
		|ГДЕ
		|	(Операция.Ссылка = &СсылкаНаОперацию) И
		|	(Операция.ПометкаУдаления = Ложь)";

		Запрос.УстановитьПараметр("СсылкаНаОперацию", Ссылка); 
		Результат = Запрос.Выполнить();
		РанееУстановленнаяПометкаУдаления = Результат.Пустой();

	КонецЕсли;

	Если ПометкаУдаления <> РанееУстановленнаяПометкаУдаления Тогда

		Для каждого ПроводкиДокумента из Движения Цикл

			Если (НЕ ПроводкиДокумента.Модифицированность()) И 
					(НЕ ПроводкиДокумента.Выбран()) И
					(НЕ ЭтоНовыйДокумент) Тогда

				ПроводкиДокумента.Прочитать();

			КонецЕсли;

			КоличествоПроводок = ПроводкиДокумента.Количество();

			Если КоличествоПроводок > 0 Тогда

				// Определяем текущую активность проводок по первой проводке
				ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;
				НужнаяАктивностьПроводок  = НЕ ПометкаУдаления;

				Если ТекущаяАктивностьПроводок <> НужнаяАктивностьПроводок Тогда
					ПроводкиДокумента.УстановитьАктивность(НужнаяАктивностьПроводок);
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры



