перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение, ЗатратыПоБракуВПроизводстве.Сумма";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
							   |ЗатратыПоБракуВПроизводстве.СчетЗатрат,
							   |ЗатратыПоБракуВПроизводстве.СуммаРегл";
	
	мСтрокаРеквизитыНалУчета = "ЗатратыПоБракуВПроизводстве.СчетЗатратНУ,
		|ЗатратыПоБракуВПроизводстве.СуммаНал";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок) Экспорт
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	РеквизитыШапки = "Организация, СтатьяЗатрат";
	ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ЗатратыПоБракуВПроизводстве", Новый Структура("Номенклатура, ЕдиницаИзмерения"), Отказ, Заголовок);
	
	Для Каждого СтрокаТЧ Из ЗатратыПоБракуВПроизводстве Цикл
		
		Если ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете И НЕ ОтражатьВНалоговомУчете И СтрокаТЧ.Сумма = 0 Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Укажите сумму в строке № " + СтрокаТЧ.НомерСтроки + " (таб. часть ""Затраты по браку в производстве"")", Отказ, Заголовок);
		ИначеЕсли НЕ ОтражатьВУправленческомУчете И ОтражатьВБухгалтерскомУчете И НЕ ОтражатьВНалоговомУчете И СтрокаТЧ.СуммаРегл = 0 Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Укажите сумму в строке № " + СтрокаТЧ.НомерСтроки + " (таб. часть ""Затраты по браку в производстве"")", Отказ, Заголовок);
		ИначеЕсли НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете И ОтражатьВНалоговомУчете И СтрокаТЧ.СуммаНал = 0 Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Укажите сумму в строке № " + СтрокаТЧ.НомерСтроки + " (таб. часть ""Затраты по браку в производстве"")", Отказ, Заголовок);
		ИначеЕсли НЕ ОтражатьВУправленческомУчете И ОтражатьВБухгалтерскомУчете И ОтражатьВНалоговомУчете И СтрокаТЧ.СуммаРегл = 0 И СтрокаТЧ.СуммаНал = 0 Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Укажите сумму в строке № " + СтрокаТЧ.НомерСтроки + " (таб. часть ""Затраты по браку в производстве"")", Отказ, Заголовок);
		ИначеЕсли ОтражатьВУправленческомУчете И ОтражатьВБухгалтерскомУчете И НЕ ОтражатьВНалоговомУчете И СтрокаТЧ.СуммаРегл = 0 И СтрокаТЧ.Сумма = 0 Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Укажите сумму в строке № " + СтрокаТЧ.НомерСтроки + " (таб. часть ""Затраты по браку в производстве"")", Отказ, Заголовок);
		ИначеЕсли ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете И ОтражатьВНалоговомУчете И СтрокаТЧ.СуммаРегл = 0 И СтрокаТЧ.СуммаНал = 0 Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Укажите сумму в строке № " + СтрокаТЧ.НомерСтроки + " (таб. часть ""Затраты по браку в производстве"")", Отказ, Заголовок);
		ИначеЕсли ОтражатьВУправленческомУчете И ОтражатьВБухгалтерскомУчете И ОтражатьВНалоговомУчете И СтрокаТЧ.Сумма = 0 И СтрокаТЧ.СуммаРегл = 0 И СтрокаТЧ.СуммаНал = 0 Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Укажите сумму в строке № " + СтрокаТЧ.НомерСтроки + " (таб. часть ""Затраты по браку в производстве"")", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Подразделение";
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "ПодразделениеОрганизации";
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверкаРеквизитов(Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры	// ОбработкаПроведения()


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");

