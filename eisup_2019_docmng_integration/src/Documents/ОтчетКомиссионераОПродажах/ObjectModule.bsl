Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мУчетнаяПолитика;                 // (Общ)
Перем УчетнаяПолитикаБух;

Перем мСтруктураПараметровДляДокументовРасчетов Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;
Перем ОТаблицаЗапретаППД Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОтчетаКомиссионера()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмеренияМест.Представление  КАК ЕдиницаИзмеренияМест,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаВознаграждения КАК Вознаграждение,
	|		СуммаНДС,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомиссионераОПродажах_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Отчет комиссионера");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Получатель = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	
	ТабДокумент.Вывести(ОбластьМакета);

	Сумма    = 0;
	СуммаНДС = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтроки.Параметры.Товар = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьСтроки);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	МестВсего = Шапка.Товары.Выгрузить().Итог("КоличествоМест");
    Если МестВсего = 0 Тогда
		УниверсальныеМеханизмы.СкрытьКолонкиВТабличномДокументе(ТабДокумент, "Мест",5, "ШапкаТаблицы");
    КонецЕсли;

	
	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаКомиссионера()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Накладная" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаКомиссионера();	
		
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// +++ввв 01.04.2016 г.
Функция НетЗапретаПереходаСтатусов(СтатусТекущий, СтатусПоследующий, ДатаЗапрета) Экспорт
	ЕСтатусТекущий=Неопределено;
	Если СтатусТекущий=Перечисления.ttk_СтатусыДокументаОтчетОПродажах.ЗагрузкаДанных Тогда
		ЕСтатусТекущий=Перечисления.абс_СтатусыПервичныхДокументов.ЗагрузкаДанных;
	ИначеЕсли СтатусТекущий=Перечисления.ttk_СтатусыДокументаОтчетОПродажах.ОбработкаДанных Тогда
		ЕСтатусТекущий=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных;
	ИначеЕсли СтатусТекущий=Перечисления.ttk_СтатусыДокументаОтчетОПродажах.ОбработкаБухгалтером Тогда
		ЕСтатусТекущий=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером;
	ИначеЕсли СтатусТекущий=Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Проведен Тогда
		ЕСтатусТекущий=Перечисления.абс_СтатусыПервичныхДокументов.Завершен;
	КонецЕсли;
	Если ЕСтатусТекущий=Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	ЕСтатусПоследующий=Неопределено;
	Если СтатусПоследующий=Перечисления.ttk_СтатусыДокументаОтчетОПродажах.ЗагрузкаДанных Тогда
		ЕСтатусПоследующий=Перечисления.абс_СтатусыПервичныхДокументов.ЗагрузкаДанных;
	ИначеЕсли СтатусПоследующий=Перечисления.ttk_СтатусыДокументаОтчетОПродажах.ОбработкаДанных Тогда
		ЕСтатусПоследующий=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных;
	ИначеЕсли СтатусПоследующий=Перечисления.ttk_СтатусыДокументаОтчетОПродажах.ОбработкаБухгалтером Тогда
		ЕСтатусПоследующий=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером;
	ИначеЕсли СтатусПоследующий=Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Проведен Тогда
		ЕСтатусПоследующий=Перечисления.абс_СтатусыПервичныхДокументов.Завершен;
	КонецЕсли;
	Если ЕСтатусПоследующий=Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
// +++ввв 15.06.2016 г.
	ПолныеПрава.УстановитьПараметрСоответствиеДатыЗапретаППД(ЭтотОбъект.Метаданные().Имя
// раскоментировать при отладке	
//	,Истина
	);
	Попытка
		ВТ_ОТаблицаЗапретаППД = ПараметрыСеанса.абс_СоответствиеДатыЗапертаППД.Получить().Скопировать();
	Исключение
		ВТ_ОТаблицаЗапретаППД=Новый ТаблицаЗначений; 
	КонецПопытки;
	ПолныеПрава.УстановитьПараметрСоответствиеДатыЗапретаППД();
// ---ввв 15.06.2016 г.
	Для каждого йСтр Из ВТ_ОТаблицаЗапретаППД Цикл
		Если йСтр.Статус=ЕСтатусТекущий И йСтр.СтатусНовый=ЕСтатусПоследующий Тогда
			ЕСтатусТекущий=Неопределено;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕСтатусТекущий=Неопределено Тогда
		Если ЗначениеЗаполнено(йСтр.ДатаЗапрета) Тогда
			ДатаЗапрета=йСтр.ДатаЗапрета;
			Если йСтр.ДатаЗапрета>=ЭтотОбъект.Дата Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции
// ---ввв 01.04.2016 г.

// Процедура выполняет заполниение табличной части.
//
// Параметры:
//  ДокументПередачи - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыУпр(ДокументПередачи = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("ДокументПередачи", ДокументПередачи);
	Запрос.УстановитьПараметр("СтатусПередачи",   Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("ДатаОстатков",     ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Если ДокументПередачи = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.ХарактеристикаНоменклатуры,
		|	Остатки.СерияНоменклатуры,
		|	Остатки.КоличествоОстаток,
		|	Остатки.СуммаВзаиморасчетовОстаток КАК СтоимостьОтданнаяВалОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков,
		|												ДоговорКонтрагента   = &ДоговорКонтрагента
		|												И СтатусПередачи = &СтатусПередачи
		|" + ?(НЕ ЗначениеЗаполнено(Сделка), "", " И Сделка = &Сделка") + "
		|											) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0
		|";
	Иначе
		ПараметрСделка = Сделка;
		УказаниеЗаказов = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
		УказаниеЗаказовВТЧ = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
						Или (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации);
		ВедениеВзаиморасчетов = ДокументПередачи.ДоговорКонтрагента.ВедениеВзаиморасчетов;
		ПолеЗаказ             = "";
		УсловиеЗаказ          = "";
		ПолеГруппировкиЗаказ  = "";
		Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ПолеЗаказ = ", Документ.Сделка КАК ЗаказПокупателя";
			ПолеГруппировкиЗаказ = ", Документ.Сделка";
		Иначе
			Если УказаниеЗаказовВТЧ Тогда
				ПараметрСделка = Неопределено;
			КонецЕсли;
			ПолеЗаказ = ",	ВЫБОР	КОГДА ДокТабличнаяЧасть.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
						|			ТОГДА Неопределено
						|			ИНАЧЕ ДокТабличнаяЧасть.ЗаказПокупателя
						|	КОНЕЦ КАК ЗаказПокупателя";
			ПолеГруппировкиЗаказ = "
						|,	ВЫБОР	КОГДА ДокТабличнаяЧасть.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
						|			ТОГДА Неопределено
						|			ИНАЧЕ ДокТабличнаяЧасть.ЗаказПокупателя
						|	КОНЕЦ";
			Если ЗначениеЗаполнено(ПараметрСделка) Тогда
				УсловиеЗаказ = "
						| И ДокТабличнаяЧасть.ЗаказПокупателя = &Сделка";
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр("Сделка", ПараметрСделка);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокТабличнаяЧасть.Номенклатура                КАК Номенклатура,
		|	ДокТабличнаяЧасть.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
		|	ДокТабличнаяЧасть.СерияНоменклатуры           КАК СерияНоменклатуры,
		|	ДокТабличнаяЧасть.СтавкаНДС                   КАК СтавкаНДС,
		|	МИНИМУМ(ДокТабличнаяЧасть.НомерСтроки)        КАК НомерСтроки,
		|	ДоговорыКонтрагентов.Ссылка                   КАК ДоговорКонтрагента,
		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов     КАК ВалютаВзаиморасчетов,
		|	СУММА(ДокТабличнаяЧасть.Количество)           КАК Количество
		|" + ПолеЗаказ + "
		|ПОМЕСТИТЬ ТабличнаяЧастьДок
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ДокТабличнаяЧасть
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг КАК Документ
		|ПО
		|	Документ.Ссылка = ДокТабличнаяЧасть.Ссылка
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ПО
		|	ДоговорыКонтрагентов.Ссылка = Документ.ДоговорКонтрагента
		|ГДЕ
		|	Документ.Ссылка = &ДокументПередачи
		|" + УсловиеЗаказ + "
		|СГРУППИРОВАТЬ ПО	Номенклатура,
		|					ХарактеристикаНоменклатуры,
		|					СерияНоменклатуры,
		|					СтавкаНДС,
		|					ДоговорыКонтрагентов.Ссылка,
		|					ДоговорыКонтрагентов.ВалютаВзаиморасчетов
		|" + ПолеГруппировкиЗаказ + "
		|ИНДЕКСИРОВАТЬ ПО	Номенклатура,
		|					ХарактеристикаНоменклатуры,
		|					СерияНоменклатуры,
		|					ЗаказПокупателя
		|";
		Запрос.Выполнить();

		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.ЗаказПокупателя КАК ЗаказПокупателя
		|ИЗ
		|	ТабличнаяЧастьДок КАК Док
		|УПОРЯДОЧИТЬ ПО ЗаказПокупателя
		|";

		ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();

		Если ТаблицаЗаказов.Количество() = 0 Тогда
			возврат;
		ИначеЕсли ТаблицаЗаказов.Количество() = 1 Тогда
			ПараметрСделка = ТаблицаЗаказов[0]["ЗаказПокупателя"];
		Иначе
			СписокСделок = Новый СписокЗначений();
			Для Каждого элементСделка Из ТаблицаЗаказов Цикл
				Если ЗначениеЗаполнено(элементСделка.ЗаказПокупателя) Тогда
					СписокСделок.Добавить(элементСделка.ЗаказПокупателя, Строка(элементСделка.ЗаказПокупателя));
				Иначе
					СписокСделок.Добавить(Документы.ЗаказПокупателя.ПустаяСсылка(), "Пустой заказ");
				КонецЕсли;
			КонецЦикла;
			СтруктПараметры = Новый Структура("СписокВыбора, ЗаполнитьСписокВыбора", СписокСделок, Ложь);
			ВыбранноеЗначение = УправлениеЗаказами.ВыбратьЗаказИзДокументаОснования(СтруктПараметры);
			Если ВыбранноеЗначение = Неопределено Тогда
				возврат;
			КонецЕсли;

			ПараметрСделка = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ВыбранноеЗначение, Неопределено);
		КонецЕсли;

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабличнаяЧастьДок.Номенклатура                     КАК Номенклатура,
		|	ТабличнаяЧастьДок.ХарактеристикаНоменклатуры       КАК ХарактеристикаНоменклатуры,
		|	ТабличнаяЧастьДок.ДоговорКонтрагента               КАК ДоговорКонтрагента,
		|	ТабличнаяЧастьДок.ВалютаВзаиморасчетов             КАК ВалютаВзаиморасчетов,
		|	ТабличнаяЧастьДок.СтавкаНДС                        КАК СтавкаНДС,
		|	ТабличнаяЧастьДок.СерияНоменклатуры                КАК СерияНоменклатуры,
		|	ТабличнаяЧастьДок.Количество                       КАК КоличествоПоДокументу,
		|	ТабличнаяЧастьДок.НомерСтроки                      КАК НомерСтроки,
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00)          КАК КоличествоОстатокПереданных,
		|	ЕСТЬNULL(Остатки.СуммаВзаиморасчетовОстаток, 0.00) КАК СтоимостьОтданнаяВалОстаток
		|ИЗ
		// Временная таблица документа
		|	ТабличнаяЧастьДок КАК ТабличнаяЧастьДок
		//
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПереданные.Остатки(,
		|												ДоговорКонтрагента = &ДоговорКонтрагента
		|												И СтатусПередачи = &СтатусПередачи
		|												И Сделка = &ПараметрСделка
		|												И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ ТабличнаяЧастьДок)
		|											) КАК Остатки
		|ПО
		|	ТабличнаяЧастьДок.Номенклатура = Остатки.Номенклатура
		|	И ТабличнаяЧастьДок.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|	И ТабличнаяЧастьДок.СерияНоменклатуры = Остатки.СерияНоменклатуры
		|	И ТабличнаяЧастьДок.ЗаказПокупателя = Остатки.Сделка
		|ГДЕ
		|	ТабличнаяЧастьДок.ЗаказПокупателя = &ПараметрСделка
		|	И ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00) > 0
		|УПОРЯДОЧИТЬ ПО
		|	ТабличнаяЧастьДок.НомерСтроки
		|
		|ИТОГИ МАКСИМУМ(КоличествоОстатокПереданных) ПО ТабличнаяЧастьДок.Номенклатура, ТабличнаяЧастьДок.ХарактеристикаНоменклатуры
		|";
		Запрос.УстановитьПараметр("ПараметрСделка", ПараметрСделка);

		Сделка = ПараметрСделка;

	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			КолвоОстПереданных    = ?(Выборка.КоличествоОстатокПереданных = NULL, 0, Выборка.КоличествоОстатокПереданных);
			КолвоПереданных       = КолвоОстПереданных;
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;

		Если ДокументПередачи = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество       = Выборка.КоличествоОстаток;
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе
			СтрокаТабличнойЧасти.Количество = Мин(Выборка.КоличествоПоДокументу, КолвоОстПереданных);
			КолвоОстПереданных = КолвоОстПереданных - СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.СтавкаНДС         = Выборка.СтавкаНДС;
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;

		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		Если ДокументПередачи = Неопределено Тогда
			Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / Выборка.КоличествоОстаток, 
			               ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			               КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		Иначе
			Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / КолвоПереданных, 
			               ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			               КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		КонецЕсли;

		СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
											  Истина, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
											  
		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ЦенаПередачи  = СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		//Если СпособРасчетаКомиссионногоВознаграждения
		//	 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
		//	СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
		//										* СтрокаТабличнойЧасти.Сумма;
		//	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
		//																УчитыватьНДС, СуммаВключаетНДС,
		//																УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		//КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыУпр()

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (ИнвентаризацияТоваровОтданныхНаКомиссию).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр(ДокументОснование) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента",    ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументОснование",     ДокументОснование);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаОстатков",    	   ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(Остатки.КоличествоОстаток) - СУММА(Док.Количество) КАК Количество,
	|	(МАКСИМУМ(Остатки.КоличествоОстаток) - СУММА(Док.Количество)) * МАКСИМУМ(Остатки.СуммаВзаиморасчетовОстаток) / МАКСИМУМ(Остатки.КоличествоОстаток) КАК Стоимость
	|ИЗ
	|	Документ.ИнвентаризацияТоваровОтданныхНаКомиссию.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента) КАК Остатки
	|		ПО Док.Номенклатура = Остатки.Номенклатура
	|			И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|			И Док.СерияНоменклатуры = Остатки.СерияНоменклатуры
	|			И (Док.Ссылка.Сделка = Остатки.Сделка
	|				ИЛИ Док.Ссылка.Сделка = &ПустойЗаказПокупателя
	|					И Остатки.Сделка = НЕОПРЕДЕЛЕНО)
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|	И Док.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Сумма            = Выборка.Стоимость;
		СтрокаТабличнойЧасти.СуммаПередачи    = Выборка.Стоимость;

		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,  ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		//Если СпособРасчетаКомиссионногоВознаграждения
		//	 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
		//	СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
		//											 * СтрокаТабличнойЧасти.Сумма;
		//	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
		//												  УчитыватьНДС, СуммаВключаетНДС,
		//												  УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		//КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("Накладная","Отчет комиссионера");
	СтруктураМакетов.Вставить("СерийныеНомера",      "Список серийных номеров");
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Рассчитывает комиссионное вознаграждение в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти)

	//Если СпособРасчетаКомиссионногоВознаграждения
	//	 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

	//ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
	//	 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда

	//	СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
	//										   * СтрокаТабличнойЧасти.Сумма / 100;

	//ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
	//	 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда

	//	СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
	//		  * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;

	//Иначе
	//	СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	//КонецЕсли;
	//
	//СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
	//																УчитыватьНДС, СуммаВключаетНДС,
	//																УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

КонецПроцедуры // РассчитатьКомиссионноеВознаграждение()

// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(ДоговорКонтрагента, Организация, МассивНоменклатуры, Контрагент);
	
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура", ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество", Справочники.Качество.Новый);
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;
		
		ЗаполненКлючСвязи = Ложь;

		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			Если ОстатокВЕдиницахДокумента  >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = Строка.СерияНоменклатуры;
			НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
			НоваяСтрока.Количество                 = СписанноеКоличество; 
			ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);
			
			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);

			НоваяСтрока.ЦенаПередачи               = ИсходнаяСтрока.ЦенаПередачи;
			НоваяСтрока.СуммаПередачи              = НоваяСтрока.ЦенаПередачи * НоваяСтрока.Количество;
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустыойСерией = НоваяСтрока;
			КонецЕсли;
			РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры          = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
				НоваяСтрока.ЦенаПередачи               = ИсходнаяСтрока.ЦенаПередачи;
				НоваяСтрока.СуммаПередачи              = НоваяСтрока.ЦенаПередачи * НоваяСтрока.Количество;
				НоваяСтрока.Количество                 = КоличествоОсталосьПогасить;
				НоваяСтрока.КоличествоМест             = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
				ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);

				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
			Иначе
				СтрокаСПустойСерией.Количество    = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				СтрокаСПустойСерией.СуммаПередачи = СтрокаСПустойСерией.ЦенаПередачи * СтрокаСПустойСерией.Количество;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				РассчитатьКомиссионноеВознаграждение(СтрокаСПустойСерией);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоСериям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура СписатьЛимиты(СуммаПотрЛимитов,ДокЗЗ)
	
	ТекВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ТекКурс = ?(ВалютаДокумента <> ТекВалютаВзаиморасчетов, МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата).Курс, КурсВзаиморасчетов);
	
	Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
	Движение.Период 					= Дата;
	Движение.СтатьяОборотов 			= ДокЗЗ.БюджетнаяСтатья;
	Движение.ЦФО 						= ДокЗЗ.ЦФО;
	Движение.абс_ТипКонтрагента 		= ДокЗЗ.ТипКонтрагента;
	Движение.абс_ТипСети 				= ДокЗЗ.ТипСети;
	Движение.абс_КВ 					= ДокЗЗ.КВ;
	Движение.абс_ТЭО 					= ДокЗЗ.ТЭО;
	Движение.абс_ЦФУ 					= ДокЗЗ.ЦФУ;
	Движение.абс_ТипРасхода 			= ДокЗЗ.ТипРасхода;
	Движение.Организация 				= Организация;
	Движение.СуммаСценарияИсполнение	= СуммаПотрЛимитов*ТекКурс;   //АБС Коломиец 12392
	Движение.СуммаСценарияИсполнениеВал = СуммаПотрЛимитов;
	Движение.Валюта						= ВалютаДокумента;
		
КонецПроцедуры // )
// АБС ВСТАВКА 9287 конец
  
Процедура ДвиженияПоРегиструГрафикПоставкиЗакупочногоЗаказа(СтруктураШапкиДокумента,Отказ)
	
	Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Записывать = Истина;
	Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Очистить();
	
	Если СтруктураШапкиДокумента.ввв_ЗЗ.УбыткиПрошлыхЛет Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ввв_ЗЗ.РасходыБудущихПериодов Тогда
		Возврат;
	КонецЕсли;
	                                               
	абс_ИсключитьДатуИзГрафикаПоставок = Константы.абс_ИсключитьДатуИзГрафикаПоставок.Получить();
	Если ЗначениеЗаполнено(абс_ИсключитьДатуИзГрафикаПоставок) и НачалоДня(Дата) = НачалоДня(абс_ИсключитьДатуИзГрафикаПоставок) Тогда
		врДатаПоставки = НачалоДня(абс_ИсключитьДатуИзГрафикаПоставок)-1;
	Иначе
		врДатаПоставки = КонецМесяца(ЭтотОбъект.MONT_F);
	КонецЕсли;	
		
	// АБС Фролов 20120509
	// Для организаций ДЗО
	// для поставок по ЗЗ с нефиксированной суммой:
	// 1. не контролируем график поставок
	// 2. производим списание лимитов документом поставки при их наличии
	// 3. при отсутствии лимита не проводим документ
	
	КонтрольЛимитовНефиксЗЗвПОставке = (ПараметрыСеанса.абс_ПользовательДЗО 
							или Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ДЗО
							или Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.Филиал)
							//АБС ВСТАВКА №35063,000023920 НАЧАЛО
							и глЗначениеПеременной("абс_СписаниеИКонтрольЛимитовПоСхемеГоловнойКомпании") > СтруктураШапкиДокумента.Дата
							//\\АБС ВСТАВКА №35063 КОНЕЦ
							;	
							
	врСуммаБезНДС=ЭтотОбъект.ввв_ПТУ.Итог("Сумма")-?(ЭтотОбъект.ЗатратыСуммаВключаетНДС,ЭтотОбъект.ввв_ПТУ.Итог("СуммаНДС"),0);
	врСуммаОтгрузки = 0;
	//++ Задача № 10097 Логинчев А.С. 16.05.2012 17:04:28
	ПерваяЗаписьвРНКонтролируемыеЗначенияПоБюджету = Истина;
	//-- Задача № 10097 Логинчев А.С.
	Если ЗначениеЗаполнено(ЭтотОбъект.ввв_ЗЗ) Тогда  
		ТекЗЗ=ЭтотОбъект.ввв_ЗЗ.Ссылка;
		
		врабс_ЗакупочныйЗаказ = ТекЗЗ;
		
		Если врабс_ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
			
			//АБС ВСТАВКА №10351 НАЧАЛО
			Если КонтрольЛимитовНефиксЗЗвПОставке Тогда
				
				врСумма = врСуммаБезНДС;//СуммаДокумента - абс_СуммаНДС;
				
				////+ПРИХОД
				//Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
				//Движение.ВидДвижения     = ВидДвиженияНакопления.Приход;
				//Движение.Период          = Дата;
				//Движение.ЗакупочныйЗаказ = врабс_ЗакупочныйЗаказ;
				//Движение.ПериодПоставки  = НачалоМесяца(врДатаПоставки);
				//Движение.Сумма           = врСумма;
				//-РАСХОД
				Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
				Движение.ВидДвижения     = ВидДвиженияНакопления.Расход;
				Движение.Период          = Дата;
				Движение.ЗакупочныйЗаказ = врабс_ЗакупочныйЗаказ;
				Движение.ПериодПоставки  = НачалоМесяца(врДатаПоставки);
				Движение.Сумма           = врСумма;  		
				//++ Задача № 10097 Логинчев А.С. 16.05.2012 17:05:36
				Если ПерваяЗаписьвРНКонтролируемыеЗначенияПоБюджету Тогда
					Движения.КонтролируемыеЗначенияБюджетов.Записывать = Истина;
					Движения.КонтролируемыеЗначенияБюджетов.Очистить();
					Движения.КонтролируемыеЗначенияБюджетов.Записать();
					ПерваяЗаписьвРНКонтролируемыеЗначенияПоБюджету = Ложь;
				КонецЕсли;
				//-- Задача № 10097 Логинчев А.С.
				СписатьЛимиты(врСумма, врабс_ЗакупочныйЗаказ);
				
			Иначе	
				
				ЗапросСтатьиБезЛимитов = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СтатьяБезКонтроляЛимита.СтатьяОборотовПоБюджетам
				|ИЗ
				|	РегистрСведений.абс_СписокСтатейБезКонтроляЛимита КАК СтатьяБезКонтроляЛимита
				|ГДЕ
				|	СтатьяБезКонтроляЛимита.СтатьяОборотовПоБюджетам В(&СтатьяОборотовПоБюджетам)
				|
				|СГРУППИРОВАТЬ ПО
				|	СтатьяБезКонтроляЛимита.СтатьяОборотовПоБюджетам");
				ЗапросСтатьиБезЛимитов.УстановитьПараметр("СтатьяОборотовПоБюджетам", ЭтотОбъект.ввв_ПТУ.ВыгрузитьКолонку("БюджетнаяСтатья"));
				Если ЗапросСтатьиБезЛимитов.Выполнить().Пустой() Тогда
					Запрос = Новый Запрос; 				
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					               |	абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.ПериодПоставки КАК ПериодПоставки,
					               |	ЕСТЬNULL(абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.СуммаОстаток, 0) КАК Остаток
					               |ИЗ
					               |	РегистрНакопления.абс_ГрафикПоставкиЗакупочногоЗаказа.Остатки(, ЗакупочныйЗаказ = &ЗакупочныйЗаказ) КАК абс_ГрафикПоставкиЗакупочногоЗаказаОстатки
					               |
					               |УПОРЯДОЧИТЬ ПО
					               |	ПериодПоставки";
					
					Запрос.УстановитьПараметр("ЗакупочныйЗаказ", врабс_ЗакупочныйЗаказ);
					
					врСуммаОтгрузки = врСуммаБезНДС;
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
								
					врОстаток = 0;
					врОтгрузка = врСуммаОтгрузки;
					
					Пока Выборка.Следующий() Цикл
						
						врСуммаДвижения = Мин(врСуммаОтгрузки, Выборка.Остаток);
						
						врОстаток = врОстаток + Выборка.Остаток;
						
						Если врСуммаДвижения > 0 Тогда  						                         		
							
							Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
							Движение.Период = Дата;
							Движение.ЗакупочныйЗаказ = врабс_ЗакупочныйЗаказ;
							Движение.ПериодПоставки = НачалоМесяца(Выборка.ПериодПоставки);
							Движение.Сумма = врСуммаДвижения;
							
							врСуммаОтгрузки = врСуммаОтгрузки -  врСуммаДвижения; 		
							
						КонецЕсли;	
						         					
					КонецЦикла;
					
					//Контроль графика поставок "начало"
					//Отказ = врОтгрузка > врОстаток; 					
					//Если Отказ Тогда
					//Задача 19053
// +++ввв 20.07.2017 г.
					// записываем хвостик в любом случае
					Разница = врОстаток - врОтгрузка;
					Если Разница < -1 Тогда
						Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
						Движение.ВидДвижения     = ВидДвиженияНакопления.Расход;
						Движение.Период          = Дата;
						Движение.ЗакупочныйЗаказ = врабс_ЗакупочныйЗаказ;
						Движение.ПериодПоставки  = НачалоМесяца(врДатаПоставки);
						Движение.Сумма           = врОтгрузка - врОстаток;  		
					КонецЕсли;
// ---ввв 20.07.2017 г.
					//\\конец				
				КонецЕсли;					
			КонецЕсли;
			//\\АБС ВСТАВКА №10351 КОНЕЦ					
			
		Иначе
			
			//ВКЛЮЧЕН КОНТРОЛЬ
			
			//Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
			//Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			//Движение.Период = Дата;
			//Движение.ЗакупочныйЗаказ = врабс_ЗакупочныйЗаказ;
			//Движение.ПериодПоставки = НачалоМесяца(Дата);
			//Движение.Сумма = ТекСтрокаГрафикПоставок.абс_СуммаБезНДС;
			
			Запрос = Новый Запрос; 			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.ПериодПоставки КАК ПериодПоставки,
			               |	ЕСТЬNULL(абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.СуммаОстаток, 0) КАК Остаток
			               |ИЗ
			               |	РегистрНакопления.абс_ГрафикПоставкиЗакупочногоЗаказа.Остатки(, ЗакупочныйЗаказ = &ЗакупочныйЗаказ) КАК абс_ГрафикПоставкиЗакупочногоЗаказаОстатки
			               |ГДЕ
			               |	абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.ПериодПоставки МЕЖДУ &Дата И &Дата1
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ПериодПоставки";
			
			Запрос.УстановитьПараметр("ЗакупочныйЗаказ", врабс_ЗакупочныйЗаказ);
			Запрос.УстановитьПараметр("Дата"           , НачалоМесяца(врДатаПоставки));
			Запрос.УстановитьПараметр("Дата1"          , КонецМесяца(врДатаПоставки));
                                                                    			
			врСуммаОтгрузки = врСуммаБезНДС;
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			врОстаток = 0;
			врОтгрузка = врСуммаОтгрузки;
			
			Пока Выборка.Следующий() Цикл
				
				врСуммаДвижения = Мин(врСуммаОтгрузки, Выборка.Остаток);
				
				врОстаток = врОстаток + Выборка.Остаток;
				
				Если врСуммаДвижения > 0 Тогда  						                         		
					
					Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Дата;
					Движение.ЗакупочныйЗаказ = врабс_ЗакупочныйЗаказ;
					Движение.ПериодПоставки = НачалоМесяца(Выборка.ПериодПоставки);
					Движение.Сумма = врСуммаДвижения;
					
					врСуммаОтгрузки = врСуммаОтгрузки -  врСуммаДвижения; 		
					
				КонецЕсли;	
				
			КонецЦикла;
			
			//Контроль графика поставок "начало"
			//Задача 19053
			Разница = врОстаток - врОтгрузка;
			Если Разница < -1 Тогда
// +++ввв 20.07.2017 г.
					// записываем хвостик в любом случае
				//ТекстСообщения = "Сумма по документу превышает сумму по графику поставок на "+(врОтгрузка - врОстаток)+" !";
				//ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
				Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
				Движение.ВидДвижения     = ВидДвиженияНакопления.Расход;
				Движение.Период          = Дата;
				Движение.ЗакупочныйЗаказ = врабс_ЗакупочныйЗаказ;
				Движение.ПериодПоставки  = НачалоМесяца(врДатаПоставки);
				Движение.Сумма           = врОтгрузка - врОстаток;  		
// ---ввв 20.07.2017 г.
			КонецЕсли;
			//\\конец							
		КонецЕсли;
	КонецЕсли;     	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Добавляем колонки, используемые при проведении.
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ВознаграждениеСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма + 
		                          ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.ВознаграждениеСНДС = СтрокаТаблицы.СуммаВознаграждения + 
		                          ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.СуммаНДСВознаграждения, 0);

	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"                     , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетовПередачи"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"                 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСПередачи"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"                       , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаСНДСПередачи = СтрокаТаблицы.СуммаПередачи + 
	                                      ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.СуммаНДСПередачи, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаСНДС,
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаСНДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.НДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СуммаВзаиморасчетовПередачи = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаСНДСПередачи,
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		СтрокаТаблицы.СтоимостьБезСкидок  = СтрокаТаблицы.СуммаУпр;
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",              Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС",           Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ВознаграждениеСНДСрегл",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВознагражденияРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаСНДС - СтрокаТаблицы.НДС;

		// Суммы пересчитаем в валюту регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
			СтрокаТаблицы.ВознаграждениеСНДСрегл     = СтрокаТаблицы.ВознаграждениеСНДС;
			СтрокаТаблицы.СуммаНДСВознагражденияРегл = СтрокаТаблицы.СуммаНДСВознаграждения;
		Иначе
			
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				Сумма, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
			
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				НДС, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, Данные.Кратность);
				
			СтрокаТаблицы.ВознаграждениеСНДСрегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.ВознаграждениеСНДС, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, Данные.Кратность);
				
			СтрокаТаблицы.СуммаНДСВознагражденияРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.СуммаНДСВознаграждения, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, Данные.Кратность);
				
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

Функция ПодготовитьТаблицуУслуг(СтруктураШапкиДокумента)
	
	ШапкаДокумента = Новый ТаблицаЗначений;
// +++ввв 12.07.2016 г.
	ШапкаДокумента.Колонки.Добавить("ВидЦенности"             , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
// ---ввв 12.07.2016 г.
	ШапкаДокумента.Колонки.Добавить("СтавкаНДС"               , Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ШапкаДокумента.Колонки.Добавить("СчетЗатрат"              , Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ШапкаДокумента.Колонки.Добавить("СчетУчетаНДС"            , Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ШапкаДокумента.Колонки.Добавить("СчетЗатратНУ"            , Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ШапкаДокумента.Колонки.Добавить("СтатьяЗатрат"            , Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ШапкаДокумента.Колонки.Добавить("Подразделение"           , Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ШапкаДокумента.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ШапкаДокумента.Колонки.Добавить("НоменклатурнаяГруппа"    , Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ШапкаДокумента.Колонки.Добавить("Сумма"                   , Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ШапкаДокумента.Колонки.Добавить("НДС"                     , Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ШапкаДокумента.Колонки.Добавить("Субконто1");
	ШапкаДокумента.Колонки.Добавить("Субконто2");
	ШапкаДокумента.Колонки.Добавить("Субконто3");
	ШапкаДокумента.Колонки.Добавить("СубконтоНУ1");
	ШапкаДокумента.Колонки.Добавить("СубконтоНУ2");
	ШапкаДокумента.Колонки.Добавить("СубконтоНУ3");
	
// +++ввв 30.05.2016 г.	
	Для каждого йСтр Из ЭтотОбъект.ввв_ПТУ Цикл
// +++ввв 17.06.2016 г.
		Если йСтр.Сумма = 0 И йСтр.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
// ---ввв 17.06.2016 г.
		СтрокаШапкиДокумента = ШапкаДокумента.Добавить();
		СтрокаШапкиДокумента.СтавкаНДС                = йСтр.СтавкаНДС;
		СтрокаШапкиДокумента.СчетЗатрат               = йСтр.СчетЗатрат;
		СтрокаШапкиДокумента.СчетУчетаНДС             = йСтр.СчетУчетаНДС;
		СтрокаШапкиДокумента.СчетЗатратНУ             = йСтр.СчетЗатратНУ;
		СтрокаШапкиДокумента.Субконто1                = йСтр.Субконто1;
		СтрокаШапкиДокумента.Субконто2                = йСтр.Субконто2;
		СтрокаШапкиДокумента.Субконто3                = йСтр.Субконто3;
		СтрокаШапкиДокумента.СубконтоНУ1              = йСтр.СубконтоНУ1;
		СтрокаШапкиДокумента.СубконтоНУ2              = йСтр.СубконтоНУ2;
		СтрокаШапкиДокумента.СубконтоНУ3              = йСтр.СубконтоНУ3;
		СтрокаШапкиДокумента.СтатьяЗатрат             = ЭтотОбъект.СтатьяЗатрат;
		СтрокаШапкиДокумента.Подразделение            = ЭтотОбъект.Подразделение;
		СтрокаШапкиДокумента.ПодразделениеОрганизации = ЭтотОбъект.ПодразделениеОрганизации;
		СтрокаШапкиДокумента.НоменклатурнаяГруппа     = йСтр.НоменклатурнаяГруппа;
	//Сумма должна быть без учета НДС если установлено что сумма не включает НДС (в реквизите шапки сумма всегда с НДС)
// +++ввв 21.12.2015 г.
// +++ввв 14.07.2016 г.
		//СтрокаШапкиДокумента.Сумма                    = йСтр.Сумма - ?(ЭтотОбъект.ЗатратыСуммаВключаетНДС,0,йСтр.СуммаНДС);
		СтрокаШапкиДокумента.Сумма                    = йСтр.Сумма - ?(ЭтотОбъект.ЗатратыСуммаВключаетНДС,йСтр.СуммаНДС,0);
// ---ввв 14.07.2016 г.
// ---ввв
		СтрокаШапкиДокумента.НДС                      = йСтр.СуммаНДС;
	КонецЦикла;
// --ввв 30.05.2016 г.
	Возврат ШапкаДокумента;
КонецФункции // ПодготовитьТаблицуУслуг()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоДенежнымСредствам - результат запроса по табличной части "ДенежныеСредства",
//  СтруктураШапкиДокумента             - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуДенежныхСредств(РезультатЗапросаПоДенежнымСредствам, СтруктураШапкиДокумента)

	ТаблицаДенежныеСредства = РезультатЗапросаПоДенежнымСредствам.Выгрузить();

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуДенежныхСредствУпр(ТаблицаДенежныеСредства, СтруктураШапкиДокумента);

	Возврат ТаблицаДенежныеСредства;

КонецФункции // ПодготовитьТаблицуДенежныхСредств()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
// Параметры: 
//  РезультатЗапросаПоДенежнымСредствам - результат запроса по табличной части "ДенежныеСредства",
//  СтруктураШапкиДокумента             - выборка по результату запроса по шапке документа.
//
Процедура ПодготовитьТаблицуДенежныхСредствУпр(ТаблицаДенежныхСредств, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаДенежныхСредств.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДенежныхСредств.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаДенежныхСредств Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуДенежныхСредствУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Процедура ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента)

	// Создаем колонку "СуммаУпр"
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаВзаиморасчетов Цикл
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаВзаиморасчетов, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента)

	ТаблицаВзаиморасчетов = РезультатЗапросаПоДокументамРасчетовСКонтрагентами.Выгрузить();
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаДокумента - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0), 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	// Если сумма взиморасчетов по документу превышает итог по таблице взаиморасчетов, то 
	// добавляем в таблицу новую строку со сылкой на проводимый документ
	СуммаВзаиморасчетовПоТекущемуДокументу = СуммаВзаиморасчетов - ТаблицаВзаиморасчетов.Итог("СуммаВзаиморасчетов");
	Если СуммаВзаиморасчетовПоТекущемуДокументу > 0 Тогда
		НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВзаиморасчетовПоТекущемуДокументу;
		НоваяСтрока.СуммаРегл   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СуммаВзаиморасчетовПоТекущемуДокументу, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
			КурсВзаиморасчетов, 1, 
			КратностьВзаиморасчетов, 1);
	КонецЕсли;

	ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказПоставщику, 
		|ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика, Неопределено"), "Сделка");
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(Неопределено, "Сделка");
	Иначе
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(Сделка, "Сделка");
	КонецЕсли;
	
	ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	Если ЭтотОбъект.ввв_ФлагВыбораКаналаЗагрузки Тогда
		СтруктураОбязательныхПолей = 
			Новый Структура("Организация,ВалютаДокумента,Контрагент,ДоговорКонтрагента,КратностьВзаиморасчетов");
// +++ввв 19.12.2016 г.
		Если ЭтотОбъект.ttk_Взаимозачет ИЛИ ЭтотОбъект.ttk_УступкаДебиторскойЗадолженности Тогда
			СтруктураОбязательныхПолей.Вставить("ttk_ДоговорАгентаСПокупателем");
		КонецЕсли;
// ---ввв 19.12.2016 г.
	Иначе
		СтруктураОбязательныхПолей = 
			Новый Структура("Организация,ВалютаДокумента,КратностьВзаиморасчетов");
	КонецЕсли;	

	//Если НЕ СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается
	// ИЛИ Товары.Итог("СуммаВознаграждения") <> 0 Тогда
	//	СтруктураОбязательныхПолей.Вставить("СтатьяЗатрат");
	//	СтруктураОбязательныхПолей.Вставить("Подразделение");
	//КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка");
	КонецЕсли;

	//Если СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли
	// ИЛИ СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
	//	СтруктураОбязательныхПолей.Вставить("СтавкаНДСВознаграждения");
	//КонецЕсли;
	//
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
//	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, СтавкаНДС");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для каждого СтрокаТабличнойЧасти из Товары цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТабличнойЧасти.НомерСтроки) +
		""" табличной части ""Товары"" обнаружено отрицательное значение в реквизитах: ";
		Выводить = Ложь;

		Если СтрокаТабличнойЧасти.Количество < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Количество,";
		КонецЕсли;
		Если СтрокаТабличнойЧасти.КоличествоМест < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Количество мест,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.Сумма < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаВознаграждения < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма вознаграждения,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаНДС < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма НДС,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаНДСВознаграждения < 0 Тогда
			Отказ = истина;			
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма НДС вознаграждения,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаНДСПередачи < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма НДС передачи,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаПередачи < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма передачи,";
		КонецЕсли;
		Если Выводить Тогда
			СтрокаНачалаСообщенияОбОшибке = Лев(СтрокаНачалаСообщенияОбОшибке, СтрДлина(СтрокаНачалаСообщенияОбОшибке)-1);
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС +
				                   "Отрицательных значений здесь быть не должно!", Отказ, Заголовок);

		КонецЕсли;
		
	КонецЦикла;
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Документы расчетов с контрагентом".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументРасчетовСКонтрагентом, СуммаВзаиморасчетов");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	Если (СуммаВзаиморасчетов - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0)) < ТаблицаПоДокументамРасчетовСКонтрагентом.Итог("СуммаВзаиморасчетов") Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Сумма по таблице документов расчетов с контрагентами превышает сумму взаиморасчетов по документу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства()

// Проверяет правильность заполнения строк табличной части "ДенежныеСредства".
//
// Параметры:
// Параметры: 
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки ТЧ ДенежныеСредства
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОтчетаПоПлатежам, Сумма, СтавкаНДС");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоДенежнымСредствам,
								ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

//	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
//	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоДокументамРасчетовСКонтрагентом,
//	                                                    Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// {{KM WARE Трухан А.Г. Агентский блок 28.09.2015 начало
	Если kmw_Услуги.Количество()=0 Тогда //агентские услуги для партий не нужны
 	// }}KM WARE Трухан А.Г. Агентский блок 28.09.2015 окончание
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	// {{KM WARE Трухан А.Г. Агентский блок 28.09.2015 начало
	КонецЕсли; 
	// }}KM WARE Трухан А.Г. Агентский блок 28.09.2015 окончание

	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать();
		КонецЕсли;
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если Движения.Налоговый.Модифицированность() Тогда
			Движения.Налоговый.Записать();
		КонецЕсли;
	КонецЕсли;
	  
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	// Формирование движений документа для подсистемы НДС.
// +++ввв 24.02.2016 г.
	ЭтотОбъект.НДСВключенВСтоимость=Ложь;
// ---ввв 24.02.2016 г.
	ДвиженияРегистровПодсистемыНДСПоступление(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ);
// +++ввв 15.12.2015 г.
	Если ЭтотОбъект.ввв_ПТУ[0].Сумма>0 Тогда
		ДвиженияПоРегиструГрафикПоставкиЗакупочногоЗаказа(СтруктураШапкиДокумента, Отказ);
	КонецЕсли;
// ---ввв	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

// Формируем движения по регистру ТоварыОрганизаций
//
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Количество()=0 Тогда Возврат; КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;
	
	// Проверка остатков
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	Если Не Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
		ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
				
		ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// По результату запроса по шапке документа формируем движения по упр. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		// Если комиссионное вознаграждение удерживается, то на него уменьшаем сумму долга.
		СуммаДолга = ?(СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение, СуммаДокумента - СуммаВознаграждения, СуммаДокумента);

		// По регистру ВзаиморасчетыСКонтрагентами.
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоДокументамРасчетовСКонтрагентом, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");

		ИначеЕсли СуммаДолга<>0 Тогда

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
			                                       СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                                       СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			                                       СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
			                                       СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                                       СтруктураШапкиДокумента.КурсДокумента, 
			                                       СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                                       СтруктураШапкиДокумента.КратностьДокумента, 
			                                       СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
		КонецЕсли;

		// Долг комиссионера за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение и СуммаВознаграждения<>0 Тогда

			// По регистру ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		  = Контрагент;
			СтрокаДвижений.Организация  	  = Организация;

			СтрокаДвижений.Сделка                = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		Если (НЕ ЗначениеЗаполнено(Сделка) 
		 Или ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПокупателя")) и (СуммаДолга<>0) Тогда

			// По регистру РасчетыСКонтрагентами
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента    = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		     = Контрагент;
			СтрокаДвижений.Организация  	     = Организация;

			СтрокаДвижений.Сделка                = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;
			
		КонецЕсли;

		// Долг перед комиссионером за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		Если (Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение) и (СуммаВознаграждения<>0) Тогда

			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		  = Контрагент;
			СтрокаДвижений.Организация  	  = Организация;

			СтрокаДвижений.Сделка                = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		Если  СуммаВознаграждения<>0 Тогда
			// По регистру Закупки.
			НаборДвижений = Движения.Закупки;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент 		  = Контрагент;
			СтрокаДвижений.Организация 		  = Организация;
			СтрокаДвижений.ДокументЗакупки    = Ссылка;
			СтрокаДвижений.Проект             = Проект;
			СтрокаДвижений.Подразделение      = Подразделение;
			СтрокаДвижений.СтатусПартии       = Перечисления.СтатусыПартийТоваров.Купленный;
			СтрокаДвижений.Номенклатура       = Неопределено;
			СтрокаДвижений.ХарактеристикаНоменклатуры = Неопределено;

			СтрокаДвижений.Количество         = 1;

			СтрокаДвижений.Стоимость          = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			СтрокаДвижений.НДС                = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаНДСВознаграждения,
													СтруктураШапкиДокумента.ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			НаборДвижений.мПериод             = Дата;
			НаборДвижений.мТаблицаДвижений    = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.Закупки.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные.
		НаборДвижений = Движения.ТоварыПереданные;

		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;

		Если НЕ Отказ Тогда

			ТаблицаПереданные = ТаблицаПоТоварам.Скопировать();
			ТаблицаПереданные.Колонки.СуммаВзаиморасчетов.Имя = "СуммаВзаиморасчетовПродажи";
			ТаблицаПереданные.Колонки.СуммаВзаиморасчетовПередачи.Имя = "СуммаВзаиморасчетов";

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПереданные);

			ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);

			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента, , Истина));

			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);

			ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ Продажи

		НаборДвижений = Движения.Продажи;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаПродажи = ТаблицаПоТоварам.Скопировать();
		ТаблицаПродажи.Колонки.СуммаУпр.Имя = "Стоимость";
		ТаблицаПродажи.Колонки.НДС.Имя      = "НДСВрем";
		ТаблицаПродажи.Колонки.НДСУпр.Имя   = "НДС";
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПродажи,ТаблицаДвижений,Проект,Дата,"Продажи");
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПродажи, ТаблицаДвижений);
			
		КонецЕсли;
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,   "ДокументПродажи");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Продажи.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецЕсли;

	//ДЕНЕЖНЫЕ СРЕДСТВА КОМИССИОНЕРА
	// По денежным средствам у комиссионера проводим только если в договоре выставлен флаг.
	Если СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента Тогда
		
		НаборДвижений = Движения.ДенежныеСредстваКомиссионера;
		
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаДенежныеСредства = ТаблицаПоДенежнымСредствам.Скопировать();
		
		Сч = 0;
		// Зачеты аванса в движения не включаем.
		Пока Сч < ТаблицаДенежныеСредства.Количество() Цикл
			СтрокаТаблицы = ТаблицаДенежныеСредства.Получить(Сч);
			Если СтрокаТаблицы.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса Тогда 
				 ТаблицаДенежныеСредства.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДенежныеСредства, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента), "Сделка");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ДенежныеСредстваКомиссионера.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;

	// Движения по посредническим услугам.
	Если СуммаВознаграждения <> 0 Тогда

		ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();

		НоваяСтрока = ТаблицаЗатрат.Добавить();
		НоваяСтрока.Подразделение = Подразделение;
		НоваяСтрока.СтатьяЗатрат = СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		НоваяСтрока.Заказ = Сделка;
		НоваяСтрока.Сумма = СуммаВознаграждения - ?(мУчетнаяПолитика.НеВключатьНДСВЗатраты, ТаблицаПоТоварам.Итог("СуммаНДСВознаграждения"), 0);

		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			СтруктураШапкиДокумента, 
			ТаблицаЗатрат
		);
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
	// Долг перед комиссионером за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
	Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		И СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом
		И СуммаВознаграждения <> 0 Тогда
	   
		ВидДвижения = ВидДвиженияНакопления.Расход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		
		ТаблицаВознаграждения = ТаблицаПоВзаиморасчетам.СкопироватьКолонки();
		
		НоваяСтрока = ТаблицаВознаграждения.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.Сделка                        = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВознаграждения;
		НоваяСтрока.СуммаРегл   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СуммаВознаграждения, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
			КурсВзаиморасчетов, 1, 
			КратностьВзаиморасчетов, 1);
		
		УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаВознаграждения, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	   
	КонецЕсли;
	
КонецПроцедуры

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), "КратностьДокумента");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	КонецЕсли;
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для регл. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");

	// Кор.Счет для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, "КорСчетЗадолженностиБУ");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "КорСчетНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату, "КорСубконтоНУ1");
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,  "КорСубконтоНУ2");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "КорСубконтоНУ3");

	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

		Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
		Строка.КорСчетНУ      = СтрокаТЧ.СчетРасходовНУ;
		Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоБУ;
		Строка.КорСубконтоНУ2 = СтрокаТЧ.СубконтоНУ;
		Строка.ПринятыеСчетУчетаБУ = СтрокаТЧ.ПереданныеПринятыеБУ;
		Строка.ПринятыеСчетУчетаНУ = СтрокаТЧ.ПереданныеПринятыеНУ;
		
		// Доход от продажи может облагаться ЕНВД (что определяется по бух. счету учета)
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ)
			И НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ) Тогда
			
			// в этом случае товар списывается на счет расходов по ЕНВД
			Строка.КорСчетНУ = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			Строка.ОтражатьВНалоговомУчете = Истина;
			Строка.СчетУчетаНУ = СтрокаТЧ.СчетУчетаБУ;
			Строка.ПринятыеСчетУчетаНУ = СтрокаТЧ.ПереданныеПринятыеБУ;
		КонецЕсли;
		
		// Субконто кор.счета для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
		Строка.КорСубконтоЗадолженностиБУ1 = Контрагент;
		Строка.КорСубконтоЗадолженностиБУ2 = ДоговорКонтрагента;
		
		Строка.СчетДоходовБУ = СтрокаТЧ.СчетДоходовБУ;
		Строка.СчетДоходовНУ = СтрокаТЧ.СчетДоходовНУ;
		
		Строка.СуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДС+СтрокаТЧ.НДС;
		Строка.СуммаНДС = СтрокаТЧ.НДС;
		
		Если СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			
			Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДСВал+СтрокаТЧ.НДСВал;
			Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			
		КонецЕсли;
		
		Если Строка.СчетУчетаБУ.Забалансовый Тогда
			Строка.ПринятыеСчетУчетаБУ = Строка.СчетУчетаБУ;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл() 

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам), ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		
	КонецЦикла; 

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	
	//Заполним общие поля для всех видов учета
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		
	// Заказ, на который списывается
	ТаблицаДвижений.ЗаполнитьЗначения(?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено),"ЗаказСписания");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия,"КодОперацииПартииТоваров");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	//// АБС ВСТАВКА Проведение по ЦФО и назначению использования
	//ТаблицаДвижений.ЗаполнитьЗначения(абс_ЦФО, "абс_ЦФО");
	//ТаблицаДвижений.ЗаполнитьЗначения(абс_НазначениеПлатежа, "абс_НазначениеПлатежа");
	//// АБС ВСТАВКА Проведение по ЦФО и назначению использования
	
	//Заполним поля специфичные для регл. учета
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	КонецЕсли;	

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Дополняет полями, нужными для упр. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр()

// Процедура вызывается из тела процедуры ДвиженияПоПриобретениюУслуг
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДСПоступление(СтруктураШапкиДокумента, ТабЧасть, Отказ) Экспорт

	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если Не ТабЧасть.Количество() = 0 Тогда 
	
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТабЧасть, Отказ);
		
		//Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда                   ЭтотОбъект.у
		//		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента);
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДСПоступление()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ttk_ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	СтруктураШапкиДокумента.Вставить("Комиссионер", Контрагент); // Для контроля по регистру "Остатки организаций"
	СтруктураШапкиДокумента.Вставить("Склад", Справочники.Склады.ПустаяССылка()); 
	
// +++ввв 07.12.2015 г.
	Если ЭтотОбъект.СуммаНДСВознаграждения>0 Тогда
		СтруктураШапкиДокумента["СуммаНДСВознаграждения"]=ЭтотОбъект.СуммаНДСВознаграждения;
    КонецЕсли;
// ---ввв

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета"             , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета"         , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                  , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"               , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                   , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                            , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьДенежныеСредстваКомитента", "КонтролироватьДенежныеСредстваКомитента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"               , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом" , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"		 , "ОтражатьВРегламентированномУчете"       , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                            , "СделкаВидОперации");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                 , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "УчетАгентскогоНДС"    					, "УчетАгентскогоНДС");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидАгентскогоДоговора"                  , "ВидАгентскогоДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "НалоговыйАгентПоОплате"                 , "НалоговыйАгентПоОплате");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                   			, "ВидДоговора");
 	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
// +++ввв 29.12.2015 г.
	Для каждого нСтр Из СтруктураШапкиДокумента Цикл
		Если нСтр.Значение=NULL Тогда
			СтруктураШапкиДокумента.Вставить(нСтр.Ключ,Ложь);
		КонецЕсли;
	КонецЦикла;
// ---ввв 29.12.2015 г.

	СтруктураШапкиДокумента.Вставить("СписаниеПартий", Ложь);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ) 

	мУчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УчетнаяПолитикаБух = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам) Экспорт
	
	//Формируем отдельную таблицу для Комиссионного вознаграждения.
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(СтруктураШапкиДокумента);
	
	//// {{KM WARE Трухан А.Г. Агентский блок 28.09.2015 начало
	//Если kmw_Услуги.Количество()>0 Тогда
	//	СтрокаЗатрат = ТаблицаПоУслугам[0];	
	//	ТаблицаПоУслугам[0].СчетЗатрат = kmw_ЗатратыУслуги[0].СчетДоходов;
	//	ТаблицаПоУслугам[0].СчетЗатратНУ = kmw_ЗатратыУслуги[0].СчетДоходовНУ;
	//	ТаблицаПоУслугам[0].НДС = СуммаНДСВознаграждения;
	//	ТаблицаПоУслугам[0].Субконто1 = kmw_ЗатратыУслуги[0].Субконто1;
	//	ТаблицаПоУслугам[0].Субконто2 = kmw_ЗатратыУслуги[0].Субконто2;
	//	ТаблицаПоУслугам[0].Субконто3 = kmw_ЗатратыУслуги[0].Субконто3;
	//	ТаблицаПоУслугам[0].СубконтоНУ1 = kmw_ЗатратыУслуги[0].СубконтоНУ1;
	//	ТаблицаПоУслугам[0].СубконтоНУ2 = kmw_ЗатратыУслуги[0].СубконтоНУ2;
	//	ТаблицаПоУслугам[0].СубконтоНУ3 = kmw_ЗатратыУслуги[0].СубконтоНУ3;
	//КонецЕсли; 
	// }}KM WARE Трухан А.Г. Агентский блок 28.09.2015 окончание
	
// +++ввв 12.07.2016 г.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
//// +++ввв 07.12.2015 г.
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, ЭтотОбъект.ЗатратыСуммаВключаетНДС);
//		стрИзм=ТаблицаПоУслугам[0];
//		стрИзм["Сумма"]=ЭтотОбъект.СуммаВознаграждения+?(ЭтотОбъект.ЗатратыСуммаВключаетНДС,0,ЭтотОбъект.СуммаНДСВознаграждения);
//		стрИзм["СуммаВал"]=ЭтотОбъект.СуммаВознаграждения+?(ЭтотОбъект.ЗатратыСуммаВключаетНДС,0,ЭтотОбъект.СуммаНДСВознаграждения);
//		стрИзм["СуммаБезНДС"]=ЭтотОбъект.СуммаВознаграждения-?(ЭтотОбъект.ЗатратыСуммаВключаетНДС,ЭтотОбъект.СуммаНДСВознаграждения,0);
//		стрИзм["СуммаБезНДСВал"]=ЭтотОбъект.СуммаВознаграждения-?(ЭтотОбъект.ЗатратыСуммаВключаетНДС,ЭтотОбъект.СуммаНДСВознаграждения,0);
//// ---ввв
	КонецЕсли;
// ---ввв 12.07.2016 г.
	
	Если не ТаблицаПоУслугам.Колонки.Найти("ВидЦенности") = Неопределено Тогда
		ТаблицаПоУслугам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ПосредническиеУслуги, "ВидЦенности");
	КонецЕсли; 
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                  , "Сумма");
	СтруктураПолей.Вставить("СуммаПередачи"             , "СуммаПередачи");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                    , "СуммаНДС");
	СтруктураПолей.Вставить("СуммаНДСПередачи"          , "СуммаНДСПередачи");
	СтруктураПолей.Вставить("СуммаВознаграждения"       , "СуммаВознаграждения");
	СтруктураПолей.Вставить("СтавкаНДСВознаграждения"   , "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("СуммаНДСВознаграждения" 	, "СуммаНДСВознаграждения");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры", "ПринадлежностьНоменклатуры");

	// Дополним полями, нужными для упр. и регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	//Заполнение счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, 	СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	КонецЕсли;
	
	ТаблицаПоДенежнымСредствам = Новый ТаблицаЗначений();
	
	Если СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента = Истина Тогда // Получается запросом через точку и может быть равно NULL, если договор не заполнен

		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ВидОтчетаПоПлатежам", "ВидОтчетаПоПлатежам");
		СтруктураПолей.Вставить("Сумма"              , "Сумма");
		СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
		СтруктураПолей.Вставить("СуммаНДС"           , "СуммаНДС");
		СтруктураПолей.Вставить("СуммаСНДС"          , "Сумма" + ?(СтруктураШапкиДокумента.СуммаВключаетНДС, "", "+ СуммаНДС"));

		РезультатЗапросаПоДенежнымСредствам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураПолей);

		// Подготовим таблицу денежных средств для проведения.
		ТаблицаПоДенежнымСредствам = ПодготовитьТаблицуДенежныхСредств(РезультатЗапросаПоДенежнымСредствам, СтруктураШапкиДокумента);
		
	КонецЕсли;

КонецПроцедуры // СформироватьТаблицыДокумента()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры

//Заполняет счета учета номенклатуры и затрат в шапке документа
Процедура ЗаполнитьСчетаУчетаВШапке(ЗаполнятьСчетУчетаНДС = Истина) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаШапки(ЭтотОбъект, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Истина, ЗаполнятьСчетУчетаНДС);
	
КонецПроцедуры

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	//Счета учета затрат в этом документе с использованием этой функции не заполняются
	
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
	
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);

		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",			СчетаУчета.СчетРасчетовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансамПолученным",	СчетаУчета.СчетАвансовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовЗаПосредническиеУслуги",	ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансамВыданным",		СчетаУчета.СчетАвансов);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

// Дополняет новую строку реквизитами регламентированного учета из исходной строки
//
// Параметры:
// НоваяСтрока    - строка, которую необходимо дополнить
// ИсходнаяСтрока - строка, из которой берутся исходные данные
//
Процедура ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока)
	
	НоваяСтрока.СчетУчетаБУ   = ИсходнаяСтрока.СчетУчетаБУ;
	НоваяСтрока.СчетУчетаНУ   = ИсходнаяСтрока.СчетУчетаНУ;
	НоваяСтрока.СчетДоходовБУ = ИсходнаяСтрока.СчетДоходовБУ;
	НоваяСтрока.СубконтоБУ    = ИсходнаяСтрока.СубконтоБУ;
	НоваяСтрока.СчетДоходовНУ = ИсходнаяСтрока.СчетДоходовНУ;
	НоваяСтрока.СубконтоНУ    = ИсходнаяСтрока.СубконтоНУ;
	
КонецПроцедуры // ДополнитьСтрокуРегл

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансамПолученным");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовЗаПосредническиеУслуги");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансамВыданным");
		//Если НЕ СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается
		//	ИЛИ Товары.Итог("СуммаВознаграждения") <> 0 Тогда
		//	СтруктураОбязательныхПолей.Вставить("ПодразделениеОрганизации");
		//КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаПоУслугам)
					
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;				
	
	ТаблицаДвижений = новый ТаблицаЗначений();				
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства, СправочникСсылка.Номенклатура"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаЦенности"	, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНДС"			, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("НДС"					, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаДвижений.Колонки.Добавить("НоменклатурнаяГруппа"	, Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаДвижений.Колонки.Добавить("СтатьяЗатрат"			, Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаДвижений.Колонки.Добавить("Субконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("Субконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("Субконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("Сделка"				);
	
	УчетНДС.ПереименованиеКолонок(ТаблицаПоУслугам,новый Структура("СчетЗатратНУ","СчетУчетаНУ"));
	//УчетНДС.ПереименованиеКолонок(ТаблицаПоТоварам,новый Структура("СчетЗатратНУ","СчетУчетаНУ"));
	
	НаборТаблиц = Новый Массив;
	//НаборТаблиц.Добавить(ТаблицаПоТоварам);
	НаборТаблиц.Добавить(ТаблицаПоУслугам);
	
	Для каждого ТекущаяТаблица Из НаборТаблиц Цикл
		Для каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
			СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
			
			СтрокаНовойТаблицы.СуммаВзаиморасчетов	= СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			СтрокаНовойТаблицы.СуммаСНДС			= СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		КонецЦикла; 
	КонецЦикла; 
	
	СтруктураДляПереименованияКолонок = Новый Структура("НДС,СчетУчетаЦенности,СчетУчетаНДС,ПодразделениеОрганизации, СубконтоНУ1,СубконтоНУ2,СубконтоНУ3"
														,"СуммаНДС","КоррСчет","СчетНДС","Подразделение","СубконтоНУ1Базовое","СубконтоНУ2Базовое","СубконтоНУ3Базовое");
														
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений,СтруктураДляПереименованияКолонок);
	УчетНДС.ПереименованиеКолонок(ТаблицаПоУслугам,новый Структура("СчетУчетаНУ","СчетЗатратНУ"));
	//УчетНДС.ПереименованиеКолонок(ТаблицаПоТоварам,новый Структура("СчетУчетаНУ","СчетЗатратНУ"));
	
	ЧисловыеКолонкиСтрокой = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1",ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2",ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	КонецЕсли;
	Для Каждого Движение Из ТаблицаДвижений Цикл
		КоррСчет = Движение["КоррСчет"];
		Для каждого ВидСубконто из КоррСчет.ВидыСубконто Цикл
			ДопустимыеТипыСубконто = ВидСубконто.ВидСубконто.ТипЗначения;
			Если ЗначениеЗаполнено(Движение["СтатьяЗатрат"]) и не УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(Движение["СтатьяЗатрат"]) Тогда
				// Это услуги непроизводственного характера. При формировании проводок использовалась аналитика из ТЧ.  
				Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Субконто"+ВидСубконто.НомерСтроки])) Тогда
					Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["Субконто"+ВидСубконто.НомерСтроки];
                КонецЕсли;
			Иначе
				//Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Номенклатура"])) Тогда
				//	Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["Номенклатура"];
				//ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Склад"])) Тогда
				//	Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["Склад"];
				//Иначе
				Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["СтатьяЗатрат"])) Тогда
					Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["СтатьяЗатрат"];
				ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["НоменклатурнаяГруппа"])) Тогда
					Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["НоменклатурнаяГруппа"];
				ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Подразделение"])) Тогда
					Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["Подразделение"];
				//ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(Тип("ПеречислениеСсылка.СпособыСтроительства")) Тогда
				//	Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Перечисления.СпособыСтроительства.Подрядный;
				//ИначеЕсли ЗначениеЗаполнено(Движение["ОбъектСтроительства"]) 
				//	и ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["ОбъектСтроительства"])) Тогда
				//	Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["ОбъектСтроительства"];
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;	
		
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			СчетУчетаНУ = Движение["СчетУчетаНУ"];
			Для каждого ВидСубконто из СчетУчетаНУ.ВидыСубконто Цикл
				ДопустимыеТипыСубконто = ВидСубконто.ВидСубконто.ТипЗначения;
				Если ЗначениеЗаполнено(Движение["СтатьяЗатрат"]) и не УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(Движение["СтатьяЗатрат"]) Тогда
					// Это услуги непроизводственного характера. При формировании проводок использовалась аналитика из ТЧ.  
					Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["СубконтоНУ"+ВидСубконто.НомерСтроки+"Базовое"])) Тогда
						Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["СубконтоНУ"+ВидСубконто.НомерСтроки+"Базовое"];
	                КонецЕсли;
				Иначе
					//Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Номенклатура"])) Тогда
					//	Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["Номенклатура"];
					//ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Склад"])) Тогда
					//	Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["Склад"];
					//Иначе
					Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["СтатьяЗатрат"])) Тогда
						Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["СтатьяЗатрат"];
					ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["НоменклатурнаяГруппа"])) Тогда
						Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["НоменклатурнаяГруппа"];
					ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Подразделение"])) Тогда
						Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["Подразделение"];
					//ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(Тип("ПеречислениеСсылка.СпособыСтроительства")) Тогда
					//	Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Перечисления.СпособыСтроительства.Подрядный;
					//ИначеЕсли ЗначениеЗаполнено(Движение["ОбъектСтроительства"]) 
					//	и ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["ОбъектСтроительства"])) Тогда
					//	Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["ОбъектСтроительства"];
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
	
	//ТаблицаДвижений.Колонки.ЗаказПоставщику.Имя = "Сделка";
	//
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	Иначе //.ПоСчетам или .ПоЗаказам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "Сделка");
	КонецЕсли;
	
	//СтруктураПараметров.Вставить("Склад",СкладПроводок);
	Возврат ТаблицаДвижений;
КонецФункции

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, СтруктураШапкиДокумента,	ТаблицаПоТоварам)
	Перем Счет91, Счет90_03;
	
	//Счет91 = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	Счет91 = СчетУчетаЗатрат;
	Счет90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;				
	ТаблицаДвижений = новый ТаблицаЗначений();				
	
	//ТаблицаДвижений.Колонки.Добавить("ТекущаяТаблица");
	
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя"		, Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСчет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоБУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетНДС"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаНДС"				, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		
	КонецЕсли;
	
	ПереименованиеКолонокРезультирующейТаблицы = Новый Структура();
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("КоррСчет", "СчетДоходовБУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СчетУчетаНУ", "СчетДоходовНУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СуммаНДС", "НДС");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы);
	
	НаборТаблиц = Новый Массив;
	//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
	//	или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование
	//	Тогда
		НаборТаблиц.Добавить(ТаблицаПоТоварам);
	//	НаборТаблиц.Добавить(ТаблицаПоУслугам);
	//КонецЕсли;
	
	Для каждого ТекущаяТаблица Из НаборТаблиц Цикл
		
		Для каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
			СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
			
			СтрокаНовойТаблицы.СчетНДС = ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаТаблицы.СчетРасходовБУ, Счет91),СтрокаТаблицы.СчетРасходовБУ, Счет90_03);
			
			СтрокаНовойТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			СтрокаНовойТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			
			Если СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение Тогда
				СтрокаНовойТаблицы.СуммаСНДС = СтрокаНовойТаблицы.СуммаСНДС - СтрокаТаблицы.ВознаграждениеСНДСрегл;
				СтрокаНовойТаблицы.СуммаВзаиморасчетов = СтрокаНовойТаблицы.СуммаВзаиморасчетов - СтрокаТаблицы.ВознаграждениеСНДС;
				СтрокаНовойТаблицы.НДС = СтрокаНовойТаблицы.НДС - СтрокаТаблицы.СуммаНДСВознагражденияРегл;
			КонецЕсли;
			
			КоррСчет = СтрокаНовойТаблицы.СчетДоходовБУ;
			
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				Конецесли;
			КонецЦикла; 
			
			КоррСчет = СтрокаНовойТаблицы.СчетНДС;
			
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) ТОгда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				Конецесли;
			КонецЦикла; 
			
			Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
				КоррСчет = СтрокаНовойТаблицы.СчетДоходовНУ;
				Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
					ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
					Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
					ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.Номенклатура)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.Номенклатура;
					Конецесли;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы, Истина);
	
	ТаблицаДвижений.Колонки.ЗаказПокупателя.Имя = "Сделка";
	
	ЧисловыеКолонкиСтрокой = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	
	Возврат ТаблицаДвижений;
	
КонецФункции

//Формирует структуру параметров для передачи в процедуры зачета аванса по ссылке на документ
Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоУслугам0(СтруктураШапкиДокумента, Заголовок = Неопределено, СуммаДокументаСНДС, ТаблицаПоВзаиморасчетам = Неопределено ,Контрагент0,Договор0) Экспорт
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("ВидДокумента, ТаблицаРегистрации
										  |, Организация, ВалютаРегламентированногоУчета
	                                      |, ОрганизацияПрименяетУСН, ОтражатьВНалоговомУчете, ОтражатьВНалоговомУчетеУСН, ОтражатьВНалоговомУчетеУСНДоходы
										  |, ВалютаДокумента, КурсДокумента, КратностьДокумента
										  |, Сделка
										  |, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС, ВедениеВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом
										  |, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов
										  |");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	                                                               
	СтруктураПараметров.Вставить("Контрагент", Контрагент0);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", Договор0);
	СтруктураПараметров.Вставить("НДСВключенВСтоимость", ЭтотОбъект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамПолученным);
	СтруктураПараметров.Вставить("ВидОперации", Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);	
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	
	СтруктураПараметров.Вставить("СуммаДокументаСНДС",СуммаДокументаСНДС);
	СтруктураПараметров.Вставить("Период",Дата);	
	СтруктураПараметров.Вставить("Дата",Дата);	
	СтруктураПараметров.Вставить("Ссылка",Ссылка);	
	СтруктураПараметров.Вставить("ОпределятьАвансыПриПроведенииДокумента",Ложь);	
	
	//Определение вида операции
	СтруктураПараметров.Вставить("Направление", "Выбытие");	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	СтруктураПараметров.Вставить("РасчетыВозврат",БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента,СтруктураПараметров.ВидОперации).РасчетыВозврат);
	
	Если СтруктураПараметров.РасчетыВозврат=Неопределено тогда
		//Другие операции не обрабатываются
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	//Будут заполнены в модуле зачета аванса
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	Возврат СтруктураПараметров;
КонецФункции

Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоУслугам(СтруктураШапкиДокумента, Заголовок = Неопределено, СуммаДокументаСНДС, ТаблицаПоВзаиморасчетам = Неопределено ) Экспорт
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("ВидДокумента, ТаблицаРегистрации
										  |, Организация, ВалютаРегламентированногоУчета
	                                      |, ОрганизацияПрименяетУСН, ОтражатьВНалоговомУчете, ОтражатьВНалоговомУчетеУСН, ОтражатьВНалоговомУчетеУСНДоходы
										  |, НДСВключенВСтоимость
										  |, ВалютаДокумента, КурсДокумента, КратностьДокумента
										  |, Контрагент, Сделка
										  |, ДоговорКонтрагента, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС, ВедениеВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом
										  |, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов
										  |");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	                                                               
	СтруктураПараметров.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамВыданным);
	СтруктураПараметров.Вставить("ВидОперации", Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);	
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	
	СтруктураПараметров.Вставить("СуммаДокументаСНДС",СуммаДокументаСНДС);
	СтруктураПараметров.Вставить("Период",Дата);	
	СтруктураПараметров.Вставить("Дата",Дата);	
	СтруктураПараметров.Вставить("Ссылка",Ссылка);	
	СтруктураПараметров.Вставить("ОпределятьАвансыПриПроведенииДокумента",Ложь);	
	
	//Определение вида операции
	СтруктураПараметров.Вставить("Направление", "Поступление");	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	СтруктураПараметров.Вставить("РасчетыВозврат",БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента,СтруктураПараметров.ВидОперации).РасчетыВозврат);
	
	Если СтруктураПараметров.РасчетыВозврат=Неопределено тогда
		//Другие операции не обрабатываются
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	//Будут заполнены в модуле зачета аванса
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	Возврат СтруктураПараметров;
КонецФункции

Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоТоварам(СтруктураШапкиДокумента, Заголовок = Неопределено, СуммаДокументаСНДС, ТаблицаПоВзаиморасчетам = Неопределено ) Экспорт
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("ВидДокумента,
										  |, Организация, ВалютаРегламентированногоУчета
	                                      |, ОрганизацияПрименяетУСН, ОтражатьВНалоговомУчете, ОтражатьВНалоговомУчетеУСН, ОтражатьВНалоговомУчетеУСНДоходы
										  |, НДСВключенВСтоимость
										  |, ВалютаДокумента, КурсДокумента, КратностьДокумента
										  |, Контрагент, Сделка
										  |, ДоговорКонтрагента, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС, ВедениеВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом
										  |, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов
										  |");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	                                                               
	СтруктураПараметров.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамПолученным);
	СтруктураПараметров.Вставить("ВидОперации", Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);	
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	
	СтруктураПараметров.Вставить("СуммаДокументаСНДС",СуммаДокументаСНДС);
	СтруктураПараметров.Вставить("Период",Дата);	
	СтруктураПараметров.Вставить("Дата",Дата);	
	СтруктураПараметров.Вставить("Ссылка",Ссылка);	
	
	//Определение вида операции
	СтруктураПараметров.Вставить("Направление", "Выбытие");	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	СтруктураПараметров.Вставить("РасчетыВозврат",БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента,СтруктураПараметров.ВидОперации).РасчетыВозврат);
	
	Если СтруктураПараметров.РасчетыВозврат=Неопределено тогда
		//Другие операции не обрабатываются
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	//Будут заполнены в модуле зачета аванса
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	Возврат СтруктураПараметров;
КонецФункции

Функция РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметров,ВалютаРегламентированногоУчета,РежимПроведения=Неопределено,ПроводкиБУ,Объект = Null,Отказ=Ложь,УдаляемыеВидыРегОпераций=Неопределено, ПолучатьПроводкиПоСсылке = Ложь, ТЗ_СуммовыеРазницы = Неопределено) экспорт
	
	Перем ТаблицаРегистрации;	
	//АБС ВСТАВКА ***** Разнесение платежей  20.03.2014 20:17:23  Гетц
	ИспользоватьРазнесениеПлатежей = Ложь;
	//АБС ВСТАВКА ***** Разнесение платежей КОНЕЦ
	ИспользоватьРазнесениеПлатежей = Ложь;
	Если СтруктураПараметров.Свойство("ТаблицаРегистрации", ТаблицаРегистрации) 
		И (ТипЗнч(ТаблицаРегистрации) <> Тип("ТаблицаЗначений")
			ИЛИ ТаблицаРегистрации.Количество() = 0) 
		Тогда
		ТаблицаРегистрации = Неопределено;
	КонецЕсли;
	
	Если ТаблицаРегистрации = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	//АБС ВСТАВКА Навценя 25.08.2014
	Если СтруктураПараметров.ВидДокумента = "КорректировкаРеализации" Тогда
		Если абс_ВосстановлениеВзаиморасчетов.КорректировкаРеализации_ИспользоватьВосстановлениеАванса(СтруктураПараметров) Тогда 
			Возврат абс_ВосстановлениеВзаиморасчетов.КорректировкаРеализации_СформироватьДвижения(
																СтруктураПараметров,
																ВалютаРегламентированногоУчета, 
																ПроводкиБУ,
																Объект);
		КонецЕсли;
	КонецЕсли;
	//АБС ВСТАВКА КОНЕЦ
	
		
	пСсылка			= СтруктураПараметров.Регистратор;
	пВидДокумента	= СтруктураПараметров.ВидДокумента;
	пДатаДока		= СтруктураПараметров.Период;
	пЗаголовок       = "";                                    
	СтруктураПараметров.Свойство("Заголовок", пЗаголовок);
	Если НЕ ЗначениеЗаполнено(пЗаголовок) тогда
		 Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(пСсылка);
	Конецесли;
	 
	//////////////////////////////////////////////////////////////////////////////////////////
	// Подменим документ расчетов для "Корректировка поступления" и "Корректировка реализации"
	
	Если пВидДокумента = "КорректировкаПоступления" Тогда
		ДокументРасчетов = УчетНДС.ПолучитьИсправляемыйДокументПоступления(пСсылка, Истина);
	ИначеЕсли пВидДокумента = "КорректировкаРеализации" Тогда
		ДокументРасчетов = УчетНДС.ПолучитьИсправляемыйДокументРеализации(пСсылка, Истина);
	Иначе
		ДокументРасчетов = пСсылка;
	КонецЕсли;	
	
	пДоговорКонтрагента   = СтруктураПараметров.ДоговорКонтрагента;
	пСчетОплаты			 = СтруктураПараметров.СчетУчетаРасчетовСКонтрагентом;
	пСчетАванса			 = СтруктураПараметров.СчетУчетаРасчетовПоАвансам;
//	ОценкаДоходовРасходовПоКурсуАвансов = ПолучитьОценкуДоходовРасходовПоКурсуАвансов(ДатаДока);
    
	//Проверка правильности заполнения реквизитов документа
	ПокупкиПродажи = БухгалтерскийУчетРасчетовСКонтрагентами.ПроверкаРасчетыВУсловныхЕдиницах(СтруктураПараметров, 
		пДоговорКонтрагента, пСчетОплаты,пСчетАванса, ВалютаРегламентированногоУчета, Отказ, пЗаголовок, Истина);
		
	Если ПокупкиПродажи = Ложь Тогда
		Возврат Ложь;
	Иначе
		Покупки	= ПокупкиПродажи.Покупки;
		Продажи	= ПокупкиПродажи.Продажи;
	КонецЕсли;
	
	пОрганизация          = СтруктураПараметров.Организация;
	пКонтрагент           = СтруктураПараметров.Контрагент;
	пВалютаВзаиморасчетов = СтруктураПараметров.ВалютаВзаиморасчетов;
	пКурсРасчетов		 = СтруктураПараметров.КурсВзаиморасчетов;
	пКратностьРасчетов	 = СтруктураПараметров.КратностьВзаиморасчетов;
	пВалютаДокумента		 = СтруктураПараметров.ВалютаДокумента;
	пКурсДокумента		 = СтруктураПараметров.КурсДокумента;
	пКратностьДокумента	 = СтруктураПараметров.КратностьДокумента;
	пЭтоВозврат			 = (СтруктураПараметров.РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат);
	пЗнакОстатка          = ?(пЭтоВозврат, -1, 1);
	пВидРегОперацииКорр 	 = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах;
	Если СтруктураПараметров.Свойство("НДСВключенВСтоимость") И ТипЗнч(СтруктураПараметров.НДСВключенВСтоимость) = Тип("Булево") Тогда
		пНДСВключенВСтоимость = СтруктураПараметров.НДСВключенВСтоимость;
	Иначе
		пНДСВключенВСтоимость = Ложь;
	КонецЕсли;
	
	ЕстьТаблицаПоВзаиморасчетам = СтруктураПараметров.ВестиПоДокументамРасчетовСКонтрагентом 
		И СтруктураПараметров.Свойство("ТаблицаПоВзаиморасчетам")
		И ТипЗнч(СтруктураПараметров.ТаблицаПоВзаиморасчетам) = Тип("ТаблицаЗначений");
	Если ЕстьТаблицаПоВзаиморасчетам Тогда
									
		ТаблицаПоВзаиморасчетам = СтруктураПараметров.ТаблицаПоВзаиморасчетам.Скопировать();
		Если пЭтоВозврат Тогда
			УправлениеВзаиморасчетами.ИзменитьЗнакКолонокТаблицы(ТаблицаПоВзаиморасчетам, Новый Структура("СуммаВзаиморасчетов, СуммаРегл, СуммаУпр"));
		КонецЕсли;
		ТаблицаПоВзаиморасчетам.Колонки.СуммаРегл.Имя = "СуммаРег";
		ТаблицаПоВзаиморасчетам.Колонки.ДокументРасчетовСКонтрагентом.Имя = "Документ";
		НетСделкиВТаблице = ТаблицаПоВзаиморасчетам.Колонки.Найти("Сделка") = Неопределено;
		Если НетСделкиВТаблице Тогда
			ТаблицаПоВзаиморасчетам.Колонки.Добавить("Сделка", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказПоставщику, 
				|ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика, ДокументСсылка.абс_СчетНаОплату, Неопределено"), "Сделка");
		КонецЕсли;
		Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ТаблицаПоВзаиморасчетам.ЗаполнитьЗначения(Неопределено, "Сделка");
		ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам ИЛИ НетСделкиВТаблице Тогда
			ТаблицаПоВзаиморасчетам.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
		КонецЕсли;
		
		Если пВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
			ТаблицаПоВзаиморасчетам.ЗагрузитьКолонку(ТаблицаПоВзаиморасчетам.ВыгрузитьКолонку("СуммаВзаиморасчетов"), "СуммаРег");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаРегистрации.Колонки.Найти("НДСВал") = Неопределено Тогда
		ТаблицаРегистрации.Колонки.Добавить("НДСВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		Если не ТаблицаРегистрации.Итог("СуммаНДС") = 0 Тогда
			Для каждого СтрокаТаблицы Из ТаблицаРегистрации Цикл
				Если СтрокаТаблицы.СуммаНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов) или СтруктураПараметров.ВалютаВзаиморасчетов = СтруктураПараметров.ВалютаРегламентированногоУчета Тогда
					СтрокаТаблицы.НДСВал = СтрокаТаблицы.СуммаНДС;
				Иначе
					СтрокаТаблицы.НДСВал = Окр(СтрокаТаблицы.СуммаНДС*СтрокаТаблицы.СуммаВзаиморасчетов/СтрокаТаблицы.СуммаСНДС,2);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	ТаблицаСделокДокумента = ТаблицаРегистрации.Скопировать();
	ТаблицаСделокДокумента.Свернуть("Сделка", "СуммаВзаиморасчетов, СуммаСНДС, НДСВал, СуммаНДС");
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаСделокДокумента.ЗаполнитьЗначения(Неопределено, "Сделка");
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаСделокДокумента.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	ВызванРегламентнойПроцедурой = (Объект = Null);
	
	Если ВызванРегламентнойПроцедурой Тогда 
		СтруктураДвижений = Новый Структура;
	Конецесли;
	
	//Определяем образ действий (on/off-line)
	Если НЕ ВызванРегламентнойПроцедурой И НЕ СтруктураПараметров.Свойство("ОпределятьАвансыПриПроведенииДокумента") Тогда
		УчетнаяПолитика  = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(пДатаДока, пОрганизация);
		СтруктураПараметров.Вставить("ОпределятьАвансыПриПроведенииДокумента",?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), Истина, УчетнаяПолитика.ОпределятьАвансыПриПроведенииДокумента));
	КонецЕсли; 
	
// +++ввв 02.06.2016 г.
	УчитыватьАванс	= Ложь; //(ВызванРегламентнойПроцедурой ИЛИ СтруктураПараметров.ОпределятьАвансыПриПроведенииДокумента) И ЗначениеЗаполнено(пСчетАванса);
// ---ввв 02.06.2016 г.
	
	//АБС ВСТАВКА №42177 НАЧАЛО «14 мая 2014 г.», Пополитов
	Если ТипЗнч(пСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если СтруктураПараметров.Свойство("ПризнаватьЗачитыватьАванс") Тогда 
			абс_ПризнаватьЗачитыватьАванс = СтруктураПараметров.ПризнаватьЗачитыватьАванс;
		Иначе
			абс_ПризнаватьЗачитыватьАванс = Ссылка.ПризнаватьЗачитыватьАванс;	
		КонецЕсли;	
		УчитыватьАванс = УчитыватьАванс или (не абс_ПризнаватьЗачитыватьАванс и ЗначениеЗаполнено(пСчетАванса));		
		Если не ЗначениеЗаполнено(пСчетАванса) и не УчитыватьАванс Тогда
			СчетАванса = пСчетОплаты;	
			СтруктураПараметров.СчетУчетаРасчетовПоАвансам = СчетАванса;
		КонецЕсли;		
	КонецЕсли;
 	//\\АБС ВСТАВКА №42177 КОНЕЦ          	
	
	Если ЕстьТаблицаПоВзаиморасчетам И УчитыватьАванс Тогда
		ТаблицаПоВзаиморасчетам.Свернуть("Сделка, Документ, ДатаОплаты", "СуммаВзаиморасчетов, СуммаРег");
	КонецЕсли;
	
	//Получаем записи регистра, по которому отслеживается изменение состояния расчетов по документу
	Если ВызванРегламентнойПроцедурой тогда
		ДвиженияПоРегиструУЕ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(пСсылка, РегистрыНакопления[?(покупки, "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации")]);
		//***** Гетц. Разнесение платежей. 14.11.12
		ИспользоватьРазнесениеПлатежей = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьИспользованиеРаспределенияПлатежей(СтруктураПараметров.Ссылка);
		Если ИспользоватьРазнесениеПлатежей Тогда 
			Если СтруктураПараметров.Свойство("ПорядокОбходаВосставновления") И СтруктураПараметров.ПорядокОбходаВосставновления = 1 Тогда 
				ДвиженияПоРегиструУЕ.Прочитать(); // При втором обходе, движения первого затирать не нужно
			КонецЕсли;
		КонецЕсли;
		//***** Гетц. Разнесение платежей \\
	Иначе
		ДвиженияПоРегиструУЕ = ОбщегоНазначения.ПолучитьДвижение(Объект, ?(покупки, "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации"));
	КонецЕсли;
	
	Если ДвиженияПоРегиструУЕ = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	Если ВызванРегламентнойПроцедурой тогда 
		СтруктураДвижений.Вставить("ДвиженияПоРегиструУЕ", ДвиженияПоРегиструУЕ);
	Конецесли;
	
	// Создание таблицы для последующего отражения расчетов по НДС.
	ТаблицаАвансовДляНДС = Новый ТаблицаЗначений();
	ТаблицаАвансовДляНДС.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
	ТаблицаАвансовДляНДС.Колонки.Добавить("СчетФактура",         Документы.ТипВсеСсылки());
	ТаблицаАвансовДляНДС.Колонки.Добавить("РублеваяСумма",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАвансовДляНДС.Колонки.Добавить("СуммаВал",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАвансовДляНДС.Колонки.Добавить("КурсоваяРазница",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Если пЭтоВозврат Тогда
		ТаблицаАвансовДляНДС.Колонки.Добавить("ДокументРасчетов");
	КонецЕсли; 
	
	ТаблицаАвансовДляНДС.Колонки.Добавить("Контрагент", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаАвансовДляНДС.Колонки.Добавить("ДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаАвансовДляНДС.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	//Сокращенная схема в случае off-line проведения
	Если НЕ УчитыватьАванс Тогда
		
		ТаблицаДвиженийПоРегиструУЕ = ДвиженияПоРегиструУЕ.ВыгрузитьКолонки();
		Для каждого СтрокаТаблицыСделок Из ТаблицаСделокДокумента Цикл
		
			СтрокаДвижения = ТаблицаДвиженийПоРегиструУЕ.Добавить();
			СтрокаДвижения.Сделка = СтрокаТаблицыСделок.Сделка;
			СтрокаДвижения.СуммаВзаиморасчетов = СтрокаТаблицыСделок.СуммаВзаиморасчетов * пЗнакОстатка;
			СтрокаДвижения.СуммаРег            = СтрокаТаблицыСделок.СуммаСНДС * пЗнакОстатка;
		
		КонецЦикла;
		
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(пДатаДока, "Период");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(Истина, "Активность");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(пДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(пКонтрагент, "Контрагент");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(пОрганизация, "Организация");
		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(ДокументРасчетов, "Документ");

		ТаблицаДвиженийПоРегиструУЕ.ЗаполнитьЗначения(пСчетОплаты, "СчетОплаты");
		
		ДвиженияПоРегиструУЕ.Загрузить(ТаблицаДвиженийПоРегиструУЕ);
		
		Возврат Истина;
		
	КонецЕсли;	
	
	Возврат СтруктураДвижений;
	
КонецФункции // РасчетыВУсловныхЕдиницахПриобретениеРеализация
//\\АБС ВСТАВКА №9181 КОНЕЦ

// По результату запроса по шапке документа формируем движения по регл. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	//СубконтоТЧ_kmw_ЗатратыУслуги = kmw_ЗатратыУслуги[0]
	
	// Формирование движений по регистру "Учет продаж и себестоимости".
	РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам);
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	
	Если НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух Тогда
		
		ТаблицаВыручкиДляБУ = ТаблицаПоТоварам.Скопировать( Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.ПустаяСсылка()), "СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ, СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал");
		ТаблицаВыручкиДляБУ.Свернуть("СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ", "СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал");
		
		ДатаДока   = Дата;
		//Счет91     = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
		Счет91     = СчетУчетаЗатрат;
		
		// Проводки по выручке и НДС без списания партий
		Для каждого СтрокаТЧ из ТаблицаВыручкиДляБУ Цикл
			
			// Выручка
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период                 = ДатаДока;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание 			= "Реализация комиссионером";
			Проводка.СписаниеПартий         = Истина;
			Проводка.Сумма = СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
			
			Проводка.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт           = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт	= СтрокаТЧ.СуммаБезНДСВал + СтрокаТЧ.НДСВал;
			КонецЕсли; 
			
			Проводка.СчетКт                 = СтрокаТЧ.СчетДоходовБУ;
			Для каждого СубконтоСчета Из Проводка.СчетКт.ВидыСубконто Цикл
				Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУ)) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУ);
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
			
			// НДС
			Если СтруктураШапкиДокумента.УчитыватьНДС 
				И СтрокаТЧ.НДС <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период               = ДатаДока;
				Проводка.Организация          = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание           = "Реализация комиссионером";
				Проводка.СписаниеПартий       = Истина;
				
				Проводка.СчетДт = ?( БухгалтерскийУчет.ЭтоСубсчет(СтрокаТЧ.СчетРасходовБУ, Счет91), СтрокаТЧ.СчетРасходовБУ, ПланыСчетов.Хозрасчетный.Продажи_НДС);
				Для каждого СубконтоСчета Из Проводка.СчетДт.ВидыСубконто Цикл
					Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУ)) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУ);
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
				
				Если не СтруктураШапкиДокумента.Свойство("МоментОпределенияНалоговойБазыНДС") Тогда
					Если ЗначениеЗаполнено(УчетнаяПолитикаБух)
						И ЗначениеЗаполнено(УчетнаяПолитикаБух.МоментОпределенияНалоговойБазыНДС) 
						Тогда
						МоментОпределенияНалоговойБазыНДС = УчетнаяПолитикаБух.МоментОпределенияНалоговойБазыНДС;
					Иначе
						МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке;
					КонецЕсли; 
					СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС",МоментОпределенияНалоговойБазыНДС);
				КонецЕсли; 
				
				Если СтруктураШапкиДокумента.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", Ссылка);
				Иначе
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);					
								КонецЕсли;
				
				Проводка.Сумма                = СтрокаТЧ.НДС;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписейРасчетыПоРеализацииОрг	  = Движения.РасчетыПоРеализацииОрганизации;
	НаборЗаписейРасчетыПоРеализацииБУ	  = Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации;
	НаборЗаписейРасчетыПоПриобретениюОрг  = Движения.РасчетыПоПриобретениюОрганизации;
	НаборЗаписейРасчетыПоПриобретениюБУ	  = Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации;
	НаборЗаписейВзаиморасчетыПоДокументам = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов;
	НаборДвиженийВК						  = Движения.ВзаиморасчетыСКонтрагентами;
	НаборДвиженийРК 					  = Движения.РасчетыСКонтрагентами;

// +++ввв 28.12.2015 г.
	Если ЭтотОбъект.ввв_РТУ.Количество()>0 Тогда
		
		ДатаДока   = Дата;
		
		// Проводки по выручке и НДС 
		Для каждого СтрокаТЧ из ЭтотОбъект.ввв_РТУ Цикл
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				
				// Сумма реализации
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                 = ДатаДока;
				Проводка.Организация            = СтруктураШапкиДокумента.Организация;
				Проводка.СписаниеПартий         = Ложь;
				йСумма = СтрокаТЧ.Сумма+?(ЭтотОбъект.СуммаВключаетНДС,0,СтрокаТЧ.СуммаНДС);
				Если йСумма<0 Тогда
					Проводка.Содержание 			= "Корректировка реализации агентом "+СтрокаТЧ.Контрагент;
				Иначе
					Проводка.Содержание 			= "Реализация агентом "+СтрокаТЧ.Контрагент;
				КонецЕсли;
				Если Сред(СтрокаТЧ.СчетДоходовБУ.Код,1,2)="91" И йСумма<0 Тогда
					Проводка.СчетДт                 = СтрокаТЧ.СчетРасходовБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоБУ);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.абс_СубконтоБУ2);
					йСумма = -йСумма;
					Проводка.СчетКт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТЧ.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаТЧ.ДоговорКонтрагента);
				Иначе
					Проводка.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТЧ.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаТЧ.ДоговорКонтрагента);
					Проводка.СчетКт                 = СтрокаТЧ.СчетДоходовБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоБУ);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.абс_СубконтоБУ2);
				КонецЕсли;
				Проводка.Сумма=йСумма;
				// НДС
// +++ввв 16.12.2016 г.
				// проводка уступки дебиторской задолженности
				Если ЭтотОбъект.ttk_УступкаДебиторскойЗадолженности Тогда
					йПериодОтражения=Справочники.ас_ПериодыОтражения.НайтиПоКоду(СтрЗаменить(""+Цел(ЭтотОбъект.kmw_ПериодОтражения.Код/10),Символы.НПП,""));
				// Дт 76.07.1 - Кт 91.01
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период                 = ДатаДока;
					Проводка.Организация            = СтруктураШапкиДокумента.Организация;
					Проводка.СписаниеПартий         = Ложь;
					Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.07.1");
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ЭтотОбъект.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ЭтотОбъект.ttk_ДоговорАгентаСПокупателем);
					Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.01");
// +++ввв 13.07.2017 г.
					//Если Число(йПериодОтражения.Код) > 2015 Тогда
					Если Число(йПериодОтражения.Код) = Год(ДатаДока) Тогда
// ---ввв 13.07.2017 г.
						йСтатья = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000027");
					ИначеЕсли Число(йПериодОтражения.Код) > 2013 Тогда
						йСтатья = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000175");
					Иначе
						йСтатья = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000211");
					КонецЕсли;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, йСтатья);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, йПериодОтражения);
					Проводка.Сумма=йСумма;
					Проводка.Содержание 			= "Возврат";
				// Дт 91.02.1 - Кт 62.01
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период                 = ДатаДока;
					Проводка.Организация            = СтруктураШапкиДокумента.Организация;
					Проводка.СписаниеПартий         = Ложь;
					Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02.1");
// +++ввв 11.07.2017 г.
					//Если Число(йПериодОтражения.Код) > 2015 Тогда
					Если Число(йПериодОтражения.Код) = Год(ДатаДока) Тогда
// ---ввв 11.07.2017 г.
						йСтатья = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000027");
					ИначеЕсли Число(йПериодОтражения.Код) > 2013 Тогда
						йСтатья = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000174");
					Иначе
						йСтатья = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000212");
					КонецЕсли;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, йСтатья);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, йПериодОтражения);
					Проводка.СчетКт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТЧ.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаТЧ.ДоговорКонтрагента);
					Проводка.Сумма=йСумма;
					Проводка.Содержание 			= "Оплата";
				КонецЕсли;
// ---ввв 16.12.2016 г.
				Если СтрокаТЧ.СуммаНДС <> 0 Тогда
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период               = ДатаДока;
					Проводка.Организация          = СтруктураШапкиДокумента.Организация;
					Проводка.СписаниеПартий       = Ложь;
					
					Проводка.СчетДт = СтрокаТЧ.СчетНДС;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоБУ);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СтавкаНДС);
					Если СтрокаТЧ.СчетДоходовБУ.Код="91.01" Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.абс_СубконтоБУ2);
					КонецЕсли;
					
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ас_ПериодыОтражения", kmw_ПериодОтражения);
					Если СтрокаТЧ.СуммаНДС<0 Тогда
						Проводка.Содержание           = "Корректировка реализации агентом "+СтрокаТЧ.Контрагент;
					Иначе
						Проводка.Содержание           = "Реализация агентом "+СтрокаТЧ.Контрагент;
					КонецЕсли;
					Проводка.Сумма                = СтрокаТЧ.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
			
			// НУ
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				йСумма        = СтрокаТЧ.Сумма-?(ЭтотОбъект.СуммаВключаетНДС,СтрокаТЧ.СуммаНДС,0);
				Если йСумма<0 Тогда
					Проводка.Содержание   = "Корректировка реализации агентом "+СтрокаТЧ.Контрагент;
				Иначе
					Проводка.Содержание   = "Реализация агентом "+СтрокаТЧ.Контрагент;
				КонецЕсли;
				Если Сред(СтрокаТЧ.СчетДоходовНУ.Код,1,2)="91" И йСумма<0 Тогда
					йСумма=-йСумма;
					Проводка.СчетДт         = СтрокаТЧ.СчетРасходовНУ;    
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоНУ);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.ввв_СубконтоНУ2);
					Проводка.СчетКт       = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТЧ.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаТЧ.ДоговорКонтрагента);
					Проводка.ВидУчетаКт=Перечисления.ВидыУчетаПоПБУ18.ВР;
				Иначе
					Проводка.СчетДт       = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТЧ.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаТЧ.ДоговорКонтрагента);
					Проводка.СчетКт         = СтрокаТЧ.СчетДоходовНУ;    
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоНУ);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.ввв_СубконтоНУ2);
				КонецЕсли;
				Проводка.Сумма = йСумма;
// +++ввв 20.12.2016 г.
				Если ЭтотОбъект.ttk_УступкаДебиторскойЗадолженности Тогда
					// проводка Уступки дебиторской задолженности
					// Дт ПВ - Кт 91.01.5(7)
// +++ввв 21.12.2016 г.
					йСумма = СтрокаТЧ.Сумма + ?(ЭтотОбъект.СуммаВключаетНДС,0, СтрокаТЧ.СуммаНДС);
// ---ввв 21.12.2016 г.
					йПериодОтражения = Справочники.ас_ПериодыОтражения.НайтиПоКоду(СтрЗаменить(""+Цел(ЭтотОбъект.kmw_ПериодОтражения.Код/10),Символы.НПП,""));
					йПОКод=Число(йПериодОтражения.Код);
// +++ввв 11.07.2017 г.
					//Если йПОКод > 2015 Тогда
					Если йПОКод = Год(ДатаДока) Тогда
// ---ввв 11.07.2017 г.
						йСтатья = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000027");
					ИначеЕсли йПОКод > 2013 Тогда
						йСтатья = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000175");
					Иначе
						йСтатья = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000211");
					КонецЕсли;
					Проводка = ПроводкиНУ.Добавить();
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.СчетДт       = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ЭтотОбъект.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ЭтотОбъект.ttk_ДоговорАгентаСПокупателем);
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
// +++ввв 11.07.2017 г.
					//Если йПОКод > 2015 Тогда
					Если йПОКод = Год(ДатаДока) Тогда
// ---ввв 11.07.2017 г.
						Проводка.СчетКт         = ПланыСчетов.Налоговый.НайтиПоКоду("91.01.5");    
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, йСтатья);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ЭтотОбъект.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", ЭтотОбъект.ttk_ДоговорАгентаСПокупателем);
						Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					Иначе
						Проводка.СчетКт         = ПланыСчетов.Налоговый.НайтиПоКоду("91.01.7");
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, йСтатья);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, йПериодОтражения);
						Если йПОКод < 2014 Тогда
							Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
						Иначе
							Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;
						КонецЕсли;
					КонецЕсли;
					Проводка.Содержание   = "Списана кредиторская задолженность";
					Проводка.Сумма = йСумма;
					// Дт 91.02.5(7) - Кт ПВ
// +++ввв 11.07.2017 г.
					//Если Число(йПериодОтражения.Код)>2015 Тогда
					Если Число(йПериодОтражения.Код)=Год(ДатаДока) Тогда
// ---ввв 11.07.2017 г.
						йСтатья=Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000027");
					ИначеЕсли Число(йПериодОтражения.Код)>2013 Тогда
						йСтатья=Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000174");
					Иначе
						йСтатья=Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("й00000212");
					КонецЕсли;
					Проводка = ПроводкиНУ.Добавить();
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
// +++ввв 11.07.2017 г.
					//Если йПОКод > 2015 Тогда
					Если йПОКод = Год(ДатаДока) Тогда
// ---ввв 11.07.2017 г.
						Проводка.СчетДт   = ПланыСчетов.Налоговый.НайтиПоКоду("91.02.5");    
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, йСтатья);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТЧ.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаТЧ.ДоговорКонтрагента);
						Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					Иначе
						Проводка.СчетДт   = ПланыСчетов.Налоговый.НайтиПоКоду("91.02.7");
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, йСтатья);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, йПериодОтражения);
						Если йПОКод < 2014 Тогда
							Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
						Иначе
							Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
						КонецЕсли;
					КонецЕсли;
					Проводка.СчетКт       = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТЧ.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаТЧ.ДоговорКонтрагента);
					Проводка.ВидУчетаКт=Перечисления.ВидыУчетаПоПБУ18.НУ;
					Проводка.Содержание   = "Списана дебиторская задолженность";
					Проводка.Сумма = йСумма;
				КонецЕсли;
// ---ввв 20.12.2016 г.
			КонецЕсли;
		КонецЦикла;
// +++ввв 21.12.2015 г.	
		БухгалтерскийУчет.ЗаписатьДвижения(Движения);
		// расчёты по реализации по загруженным услугам
		Если ЭтотОбъект.ввв_ФлагВыбораКаналаЗагрузки Тогда
			йВидЦенности=Перечисления.ВидыЦенностей.ПосредническиеУслуги;
		Иначе
			йВидЦенности=Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕсли;
// +++ввв 28.12.2016 г.
		// Учтём указанный в отчёте аванс, погашаемый при уступке дебиторской задолженности
		СуммаАвансаПоУслугам = 0;
		ДатаОплатыАванса=Дата(1,1,1);
		Если ЗначениеЗаполнено(ЭтотОбъект.ttk_ПлатежноеПоручение) Тогда
			Запрос=Новый Запрос;
			Запрос.УстановитьПараметр("Дока", ЭтотОбъект.ttk_ПлатежноеПоручение);
			Запрос.УстановитьПараметр("Орга", ЭтотОбъект.Организация);
			Запрос.УстановитьПараметр("СчетО", ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.07.1"));
			Запрос.УстановитьПараметр("Контра", ЭтотОбъект.Контрагент);
			Запрос.УстановитьПараметр("Дога", ЭтотОбъект.ttk_ДоговорАгентаСПокупателем);
			Запрос.Текст="ВЫБРАТЬ
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток,
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДатаОплаты
			             |ИЗ
			             |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки
			             |ГДЕ
			             |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ = &Дока
			             |	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Организация = &Орга
			             |	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СчетОплаты = &СчетО
			             |	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Контрагент = &Контра
			             |	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента = &Дога";
			Осты=Запрос.Выполнить().Выбрать();
			Если Осты.Следующий() Тогда
				СуммаАвансаПоУслугам = Осты.СуммаВзаиморасчетовОстаток;
				ДатаОплатыАванса = Осты.ДатаОплаты;
				Если СуммаАвансаПоУслугам < 0 Тогда
					СуммаАвансаПоУслугам = - СуммаАвансаПоУслугам;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
// ---ввв 28.12.2016 г.
		Для каждого СтрокаТЧ из ЭтотОбъект.ввв_РТУ Цикл
			СуммаПоУслугам = СтрокаТЧ.Сумма+?(ЭтотОбъект.СуммаВключаетНДС,0,СтрокаТЧ.СуммаНДС);
// +++ввв 22.12.2015г
        	// Движение по реализации в регистре РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
			ТаблицаДвижений = НаборЗаписейРасчетыПоРеализацииБУ.Выгрузить();
			ТаблицаДвижений.Очистить();

			РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			
			Движение = ТаблицаДвижений.Добавить();
	
			Движение.Организация            	   = ЭтотОбъект.Организация;
			Движение.Контрагент            		   = СтрокаТЧ.Контрагент;
			Движение.ДоговорКонтрагента            = СтрокаТЧ.ДоговорКонтрагента;
			Движение.Документ					   = ЭтотОбъект.Ссылка;
			Движение.СчетОплаты                    = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
	
			Движение.СуммаВзаиморасчетов = СуммаПоУслугам;
			Движение.СуммаРег	         = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
														ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);

			НаборЗаписейРасчетыПоРеализацииБУ.мТаблицаДвижений = ТаблицаДвижений;
			НаборЗаписейРасчетыПоРеализацииБУ.мПериод = ДатаДока;

			Если Не Отказ Тогда
				ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейРасчетыПоРеализацииБУ,
															 ВидДвиженияНакопления.Расход);
				Если ЭтотОбъект.ttk_УступкаДебиторскойЗадолженности Тогда
// +++ввв 28.12.2016 г.
					// движение по счёту 62.01
					ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейРасчетыПоРеализацииБУ,
															 	 ВидДвиженияНакопления.Приход);
					// движение по счёту 76.07.1
					Движение.Контрагент         = ЭтотОбъект.Контрагент;
					Движение.ДоговорКонтрагента = ЭтотОбъект.ttk_ДоговорАгентаСПокупателем;
					Движение.СчетОплаты         = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.07.1");
					Если СуммаАвансаПоУслугам > 0 Тогда
						Если СуммаАвансаПоУслугам > СуммаПоУслугам Тогда
							Сумма76Аванс = СуммаПоУслугам;
							СуммаАвансаПоУслугам = СуммаАвансаПоУслугам - СуммаПоУслугам;
						Иначе
							Сумма76Аванс = СуммаАвансаПоУслугам;
							СуммаАвансаПоУслугам = 0;
						КонецЕсли;
						Движение.Документ			 = ЭтотОбъект.ttk_ПлатежноеПоручение;
						Движение.ДатаОплаты		     = ДатаОплатыАванса;
						Движение.СуммаВзаиморасчетов = Сумма76Аванс;
						Движение.СуммаРег	         = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма76Аванс, ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
																	ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);
						ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейРасчетыПоРеализацииБУ,
																 	 ВидДвиженияНакопления.Расход);
						Сумма76Расчет = СуммаПоУслугам - Сумма76Аванс;
					Иначе
						Сумма76Расчет = СуммаПоУслугам;
						Сумма76Аванс = 0;
					КонецЕсли;
					Если Сумма76Расчет <> 0 Тогда
						Движение.Документ			 = ЭтотОбъект.Ссылка;
						Движение.ДатаОплаты		     = Дата(1,1,1);
						Движение.СуммаВзаиморасчетов = Сумма76Расчет;
						Движение.СуммаРег	         = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма76Расчет, ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
																	ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);
						ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейРасчетыПоРеализацииБУ,
																 	 ВидДвиженияНакопления.Расход);
					КонецЕсли;
// ---ввв 28.12.2016 г.
				КонецЕсли;
			КонецЕсли;
        	// Движение по реализации в регистре РасчетыПоРеализацииОрганизации
			Движения.РасчетыПоРеализацииОрганизации.Очистить();
			
			Движение = Движения.РасчетыПоРеализацииОрганизации.Добавить();
			
			// измерения
			Движение.Период						= ДатаДока;
			Движение.Организация            	= ЭтотОбъект.Организация;
			Движение.НомерСтрокиДокумента      	= СтрокаТЧ.НомерСтроки;
			// ресурсы
			Движение.Контрагент            		= СтрокаТЧ.Контрагент;
			Движение.ДоговорКонтрагента         = СтрокаТЧ.ДоговорКонтрагента;
			Движение.РасчетыВУсловныхЕдиницах   = СтрокаТЧ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
			Движение.КурсВзаиморасчетов			= ЭтотОбъект.КурсВзаиморасчетов;
			Движение.КратностьВзаиморасчетов	= ЭтотОбъект.КратностьВзаиморасчетов;
			Движение.СуммаВзаиморасчетов		= СуммаПоУслугам;
			Движение.СчетОплаты                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			Движение.СчетАванса                 = СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамПолученным;
			Движение.СуммаСНДС			        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
														ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);
			Движение.ВалютаДокумента			= ЭтотОбъект.ВалютаДокумента;
			Движение.КурсДокумента				= ЭтотОбъект.КурсВзаиморасчетов;
			Движение.КратностьДокумента			= ЭтотОбъект.КратностьВзаиморасчетов;
			Движение.РасчетыВозврат				= Перечисления.РасчетыВозврат.Расчеты;
			Движение.ОтражатьВНалоговомУчете	= Истина;
			Движение.СуммаНДС					= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаНДС, ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
														ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);
			Движение.СтавкаНДС					= СтрокаТЧ.СтавкаНДС;
			Движение.СчетНДС					= СтрокаТЧ.СчетНДС;
			Движение.ВидЦенности				= йВидЦенности;
			Движение.Направление				= "Выбытие";
			// реквизиты
			Движение.ВидДокумента				= ЭтотОбъект.Ссылка.Метаданные().Имя;
			Движение.Документ					= ЭтотОбъект.Ссылка;

			Если Не Отказ Тогда
				Движения.РасчетыПоРеализацииОрганизации.Записать(Ложь);
			КонецЕсли;
// ---ввв 16.12.2016 г.

			Если СтрокаТЧ.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
	        	// Движение по реализации в регистре ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов
				ТаблицаДвижений = НаборЗаписейВзаиморасчетыПоДокументам.Выгрузить();
				ТаблицаДвижений.Очистить();
	
				РежимПроведения = РежимПроведенияДокумента.Неоперативный;
				
				Движение = ТаблицаДвижений.Добавить();
		
				Движение.Организация            	   = ЭтотОбъект.Организация;
				Движение.Контрагент            		   = СтрокаТЧ.Контрагент;
				Движение.ДоговорКонтрагента            = СтрокаТЧ.ДоговорКонтрагента;
				Движение.ДокументРасчетовСКонтрагентом = ЭтотОбъект.Ссылка;
				Движение.УпрУчет                       = ЭтотОбъект.ОтражатьВУправленческомУчете;
				Движение.ВидРасчетовСКонтрагентом      = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		
				Движение.СуммаВзаиморасчетов = СуммаПоУслугам;
				Движение.СуммаРегл       = 0;
	
				НаборЗаписейВзаиморасчетыПоДокументам.мТаблицаДвижений = ТаблицаДвижений;
				НаборЗаписейВзаиморасчетыПоДокументам.мПериод = ДатаДока;
	
				Если Не Отказ Тогда
					ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейВзаиморасчетыПоДокументам,
																 ВидДвиженияНакопления.Приход);
					Если ЭтотОбъект.ttk_УступкаДебиторскойЗадолженности Тогда
						ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейВзаиморасчетыПоДокументам,
																 ВидДвиженияНакопления.Расход);
// +++ввв 28.12.2016 г.
						Движение.Контрагент            		   = ЭтотОбъект.Контрагент;
						Движение.ДоговорКонтрагента            = ЭтотОбъект.ttk_ДоговорАгентаСПокупателем;
						Если Сумма76Аванс > 0 Тогда
							Движение.ДокументРасчетовСКонтрагентом = ЭтотОбъект.ttk_ПлатежноеПоручение;
							Движение.СуммаВзаиморасчетов = Сумма76Аванс;
							ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейВзаиморасчетыПоДокументам,
																	 ВидДвиженияНакопления.Приход);
						КонецЕсли;
						Если Сумма76Расчет > 0 Тогда
							Движение.ДокументРасчетовСКонтрагентом = ЭтотОбъект.Ссылка;
							Движение.СуммаВзаиморасчетов = Сумма76Расчет;
							ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейВзаиморасчетыПоДокументам,
																	 ВидДвиженияНакопления.Приход);
						КонецЕсли;
// ---ввв 28.12.2016 г.
					КонецЕсли;
				КонецЕсли;

				// Движение по реализации в регистре ВзаиморасчетыСКонтрагентами
				ТаблицаДвижений = НаборДвиженийВК.Выгрузить();
				ТаблицаДвижений.Очистить();

				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
				СтрокаДвижений.Контрагент  		  = СтрокаТЧ.Контрагент;
				СтрокаДвижений.Организация  	  = ЭтотОбъект.Организация;
	
				СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
														ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);

				СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.КурсВзаиморасчетов, 
														ЭтотОбъект.КурсВзаиморасчетов,
														ЭтотОбъект.КратностьВзаиморасчетов, 
														ЭтотОбъект.КратностьВзаиморасчетов);
				НаборДвиженийВК.мПериод            = ДатаДока;
				НаборДвиженийВК.мТаблицаДвижений   = ТаблицаДвижений;

				Если Не Отказ Тогда
					НаборДвиженийВК.ВыполнитьПриход();
					Если ЭтотОбъект.ttk_УступкаДебиторскойЗадолженности Тогда
						НаборДвиженийВК.ВыполнитьРасход();
// +++ввв 28.12.2016 г.
						СтрокаДвижений.ДоговорКонтрагента = ЭтотОбъект.ttk_ДоговорАгентаСПокупателем;
						СтрокаДвижений.Контрагент  		  = ЭтотОбъект.Контрагент;
						Если Сумма76Аванс > 0 Тогда
							СтрокаДвижений.СуммаВзаиморасчетов= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма76Аванс, ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
																	ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);
							СтрокаДвижений.СуммаУпр           = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма76Аванс, ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.КурсВзаиморасчетов, 
																	ЭтотОбъект.КурсВзаиморасчетов,
																	ЭтотОбъект.КратностьВзаиморасчетов, 
																	ЭтотОбъект.КратностьВзаиморасчетов);
							НаборДвиженийВК.ВыполнитьПриход();
						КонецЕсли;
						Если Сумма76Расчет > 0 Тогда
							СтрокаДвижений.СуммаВзаиморасчетов= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма76Расчет, ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
																	ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);
							СтрокаДвижений.СуммаУпр           = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма76Расчет, ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.КурсВзаиморасчетов, 
																	ЭтотОбъект.КурсВзаиморасчетов,
																	ЭтотОбъект.КратностьВзаиморасчетов, 
																	ЭтотОбъект.КратностьВзаиморасчетов);
							НаборДвиженийВК.ВыполнитьПриход();
						КонецЕсли;
// ---ввв 28.12.2016 г.
					КонецЕсли;
				КонецЕсли;

				// Движение по реализации в регистре РасчетыСКонтрагентами
				ТаблицаДвижений = НаборДвиженийРК.Выгрузить();
				ТаблицаДвижений.Очистить();

				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
				СтрокаДвижений.ДоговорКонтрагента    = СтрокаТЧ.ДоговорКонтрагента;
				СтрокаДвижений.Контрагент  		     = СтрокаТЧ.Контрагент;
				СтрокаДвижений.Организация  	     = ЭтотОбъект.Организация;

				СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
														ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);

				СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.КурсВзаиморасчетов, 
														ЭтотОбъект.КурсВзаиморасчетов,
														ЭтотОбъект.КратностьВзаиморасчетов, 
														ЭтотОбъект.КратностьВзаиморасчетов);
														
				НаборДвиженийРК.мПериод            = Дата;
				НаборДвиженийРК.мТаблицаДвижений   = ТаблицаДвижений;

				Если Не Отказ Тогда
					НаборДвиженийРК.ВыполнитьПриход();
					Если ЭтотОбъект.ttk_УступкаДебиторскойЗадолженности Тогда
						НаборДвиженийРК.ВыполнитьРасход();
// +++ввв 28.12.2016 г.
						СтрокаДвижений.ДоговорКонтрагента = ЭтотОбъект.ttk_ДоговорАгентаСПокупателем;
						СтрокаДвижений.Контрагент  		  = ЭтотОбъект.Контрагент;
						Если Сумма76Аванс > 0 Тогда
							СтрокаДвижений.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма76Аванс, ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
																	ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);
							СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма76Аванс, ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.КурсВзаиморасчетов, 
																	ЭтотОбъект.КурсВзаиморасчетов,
																	ЭтотОбъект.КратностьВзаиморасчетов, 
																	ЭтотОбъект.КратностьВзаиморасчетов);
							НаборДвиженийРК.ВыполнитьПриход();
						КонецЕсли;
						Если Сумма76Расчет > 0 Тогда
							СтрокаДвижений.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма76Расчет, ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
																	ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);
							СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма76Расчет, ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.ВалютаДокумента,
																	ЭтотОбъект.КурсВзаиморасчетов, 
																	ЭтотОбъект.КурсВзаиморасчетов,
																	ЭтотОбъект.КратностьВзаиморасчетов, 
																	ЭтотОбъект.КратностьВзаиморасчетов);
							НаборДвиженийРК.ВыполнитьПриход();
						КонецЕсли;
// ---ввв 28.12.2016 г.
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
// ---ввв 22.12.2015 г.
// ---ввв 21.12.2015 г.
	КонецЕсли;
// ---ввв 28.12.2015 г.

	Если не ТаблицаПоУслугам.Итог("Сумма")=0 тогда 
		
		// Движения по посредническим услугам.
		Если СуммаВознаграждения <> 0 Тогда
			
			ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();

			НоваяСтрока = ТаблицаЗатрат.Добавить();
			НоваяСтрока.Подразделение = ЭтотОбъект.ввв_ПТУ[0].ПодразделениеОрганизации;
			НоваяСтрока.СтатьяЗатрат = ЭтотОбъект.ввв_ПТУ[0].СтатьяЗатрат;
			НоваяСтрока.НоменклатурнаяГруппа = ЭтотОбъект.ввв_ПТУ[0].НоменклатурнаяГруппа;
			НоваяСтрока.Заказ = Сделка;
			НоваяСтрока.СчетЗатрат = ЭтотОбъект.ввв_ПТУ[0].СчетЗатрат;
			НоваяСтрока.СчетЗатратНУ = ЭтотОбъект.ввв_ПТУ[0].СчетЗатратНУ;
			НоваяСтрока.СуммаБезНДС = ЭтотОбъект.СуммаВознаграждения-?(ЭтотОбъект.ЗатратыСуммаВключаетНДС,ЭтотОбъект.СуммаНДСВознаграждения,0);

			УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
				СтруктураШапкиДокумента, 
				ТаблицаЗатрат
			);
			
		КонецЕсли;
		
		ДатаДока   = Дата;
	
		// Проводки по взаиморасчетам
		Для каждого СтрокаТаблицы Из ЭтотОбъект.ввв_ПТУ Цикл
// +++ввв 17.06.2016 г.
			Если СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.СуммаНДС = 0 Тогда
	        	Продолжить;
			КонецЕсли;
// ---ввв 17.06.2016 г.
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Вознаграждение комиссионера";
			Проводка.Сумма        = СтрокаТаблицы.Сумма + (?(СтруктураШапкиДокумента.ЗатратыСуммаВключаетНДС,-1,1)*СтрокаТаблицы.СуммаНДС);

			Проводка.СчетДт       = СтрокаТаблицы.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
			Если Проводка.СчетДт.ВидыСубконто.Количество()>1 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
			КонецЕсли;
			Если Проводка.СчетДт.ВидыСубконто.Количество()>2 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			КонецЕсли;

			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.Сумма - ?(СтруктураШапкиДокумента.ЗатратыСуммаВключаетНДС,СтрокаТаблицы.СуммаНДС,0);
			КонецЕсли;
			
// +++ввв 16.12.2016 г.
			// проводка на перенос 60.01 на 76.07.1
			Если ЭтотОбъект.ttk_Взаимозачет Тогда
				Проводка = ПроводкиБУ.Добавить();
	
				Проводка.Период       = Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Взаимозачёт комиссии агента";
				Проводка.Сумма        = СтрокаТаблицы.Сумма + (?(СтруктураШапкиДокумента.ЗатратыСуммаВключаетНДС,0,1)*СтрокаТаблицы.СуммаНДС);
				
				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", ЭтотОбъект.Контрагент, Истина);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",    ЭтотОбъект.ДоговорКонтрагента);

				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.Сумма + ?(СтруктураШапкиДокумента.ЗатратыСуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
				КонецЕсли;
			

				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.07.1");
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", ЭтотОбъект.Контрагент, Истина);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",    ЭтотОбъект.ttk_ДоговорАгентаСПокупателем);
			КонецЕсли;
// ---ввв 16.12.2016 г.

			// Проводки по НДС
			Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
// +++ввв 17.06.2016 г.
				Если СтрокаТаблицы.СуммаНДС <> 0 Тогда
// ---ввв 17.06.2016 г.
					Если СтруктураШапкиДокумента.ЗатратыСуммаВключаетНДС Тогда

	//				НалоговыйАгентЗаСчетСобственныхСредств = УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
					
						Проводка = ПроводкиБУ.Добавить();

						Проводка.Период      = ДатаДока;

						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание  = "Вознаграждение комиссионера";

						Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СФПолученные",    СтруктураШапкиДокумента.Ссылка,Истина, Заголовок);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент,Истина, Заголовок);

						//Если Не НалоговыйАгентЗаСчетСобственныхСредств 
						//	Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
						//	
							Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
							Если Проводка.СчетКт.Валютный Тогда
								Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
								Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДС;
							КонецЕсли;
						//	
						//Иначе
						//	
						//	Проводка.СчетКт =  ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
						//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
						//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
						//	
						//КонецЕсли;
						
						Проводка.Сумма       = СтрокаТаблицы.СуммаНДС;
							
						//
						//Если СтруктураШапкиДокумента.УчетАгентскогоНДС
						//	И (Не НалоговыйАгентЗаСчетСобственныхСредств 
						//	Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда

						//	// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
					Иначе
						Проводка2 = ПроводкиБУ.Добавить();

						Проводка2.Период          = ДатаДока;
						Проводка2.Организация     = СтруктураШапкиДокумента.Организация;
						Проводка2.Содержание      = "Начислен НДС в качестве налогового агента";

						Проводка2.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги;
						БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
						
						Если Проводка2.СчетДт.Валютный Тогда
							Проводка2.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
							Проводка2.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДС;
						КонецЕсли;
						
						//Если Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
						Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.НДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
						//Иначе
						//	Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
						//	БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
						//	БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
						//КонецЕсли;	
						
						Проводка2.Сумма       = СтрокаТаблицы.СуммаНДС;

					КонецЕсли;
// +++ввв 17.06.2016 г.
				КонецЕсли;
// ---ввв 17.06.2016 г.
			КонецЕсли; // Проводки по НДС

			// Налоговый учет
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

				Проводка = ПроводкиНУ.Добавить();
				
				СуммаБезНДС = СтрокаТаблицы.Сумма - ?(СтруктураШапкиДокумента.ЗатратыСуммаВключаетНДС,СтрокаТаблицы.СуммаНДС,0);

				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Вознаграждение комиссионера";
				Проводка.Сумма        = СуммаБезНДС;

				Проводка.СчетДт       = СтрокаТаблицы.СчетЗатратНУ;
// +++ввв 01.06.2016 г.
//				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
// ---ввв 01.06.2016 г.
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоНУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоНУ3);
				
				Проводка.СчетКт       = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
// +++ввв 01.06.2016 г.
//				Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
// ---ввв 01.06.2016 г.
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
// +++ввв 31.05.2016 г.
				// 
				СчетЗатратНУПлан = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТаблицы.СчетЗатрат));
				
				Если Лев(СчетЗатратНУПлан.Код,2)<>Лев(СтрокаТаблицы.СчетЗатратНУ.Код,2) Тогда
					// плюс то что по СчетуЗатрат в НУ соответствующему СчетуЗатрат в БУ
					СтатьяПрочихДоходовИРасходов=НЕОПРЕДЕЛЕНО;
// +++ввв 01.06.2016 г.
					Для й=1 По 3 Цикл
// ---ввв 01.06.2016 г.
// +++ввв 02.06.2016 г.            
						Если ТипЗнч(СтрокаТаблицы["Субконто"+й]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
							СтатьяПрочихДоходовИРасходов=СтрокаТаблицы["Субконто"+й];
// ---ввв 02.06.2016 г.
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если СтатьяПрочихДоходовИРасходов<>НЕОПРЕДЕЛЕНО Тогда
						ФлагПБУ=Перечисления.ВидыУчетаПоПБУ18.ВР;
						йСтатья=СтатьяПрочихДоходовИРасходов;
						Пока Истина Цикл
							Если СокрЛП(йСтатья.Код)="й00000143" Тогда
								ФлагПБУ=Перечисления.ВидыУчетаПоПБУ18.ПР;
								Прервать;
							КонецЕсли;
							Если НЕ ЗначениеЗаполнено(йСтатья.Родитель) Тогда
								Прервать;
							КонецЕсли;
							йСтатья=йСтатья.Родитель;
						КонецЦикла;
						Проводка = ПроводкиНУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание   = "Вознаграждение комиссионера";
						Проводка.Сумма        = СуммаБезНДС;
						Проводка.СчетДт       = СчетЗатратНУПлан;
						Проводка.ВидУчетаДт   = ФлагПБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
						
						// минус то что по СчетуЗатратНУ
						Проводка = ПроводкиНУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание   = "Вознаграждение комиссионера";
						Проводка.Сумма        = -СуммаБезНДС;
						Проводка.СчетДт       = СтрокаТаблицы.СчетЗатратНУ;
						Проводка.ВидУчетаДт   = ФлагПБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоНУ2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоНУ3);
					КонецЕсли;
				КонецЕсли;
// ---ввв 31.05.2016 г.				
			КонецЕсли;
// +++ввв 19.12.2016 г.
			СуммаПоУслугам = СтрокаТаблицы.Сумма + (?(СтруктураШапкиДокумента.ЗатратыСуммаВключаетНДС,0,1)*СтрокаТаблицы.СуммаНДС);
			ТаблицаДвижений = НаборЗаписейРасчетыПоПриобретениюБУ.Выгрузить();
			ТаблицаДвижений.Очистить();

			РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			
			Движение = ТаблицаДвижений.Добавить();

			Движение.Организация            	   = ЭтотОбъект.Организация;
			Движение.Контрагент            		   = ЭтотОбъект.Контрагент;
			Движение.ДоговорКонтрагента            = ЭтотОбъект.ДоговорКонтрагента;
			Движение.Документ					   = ЭтотОбъект.Ссылка;
			Движение.СчетОплаты                    = СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги;

			Движение.СуммаВзаиморасчетов = СуммаПоУслугам;
			Движение.СуммаРег	         = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
														ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);

			НаборЗаписейРасчетыПоПриобретениюБУ.мТаблицаДвижений = ТаблицаДвижений;
			НаборЗаписейРасчетыПоПриобретениюБУ.мПериод = ДатаДока;

			Если Не Отказ Тогда
				ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейРасчетыПоПриобретениюБУ,
															 ВидДвиженияНакопления.Расход);
				Если ЭтотОбъект.ttk_Взаимозачет Тогда
					ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейРасчетыПоПриобретениюБУ,
															 	 ВидДвиженияНакопления.Приход);
// +++ввв 28.12.2016 г.
		        	// Движение по реализации в регистре РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
					ТаблицаДвижений = НаборЗаписейРасчетыПоРеализацииБУ.Выгрузить();
					ТаблицаДвижений.Очистить();
					РежимПроведения = РежимПроведенияДокумента.Неоперативный;
					Движение = ТаблицаДвижений.Добавить();
					Движение.Организация            	   = ЭтотОбъект.Организация;
					Движение.Контрагент            		   = ЭтотОбъект.Контрагент;
					Движение.ДоговорКонтрагента            = ЭтотОбъект.ttk_ДоговорАгентаСПокупателем;
					Движение.Документ					   = ЭтотОбъект.Ссылка;
					Движение.СчетОплаты                    = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.07.1");
					Движение.СуммаВзаиморасчетов = СуммаПоУслугам;
					Движение.СуммаРег	         = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
																ЭтотОбъект.ВалютаДокумента,
																ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
																ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);
					НаборЗаписейРасчетыПоРеализацииБУ.мТаблицаДвижений = ТаблицаДвижений;
					НаборЗаписейРасчетыПоРеализацииБУ.мПериод = ДатаДока;
					ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейРасчетыПоРеализацииБУ,
																 ВидДвиженияНакопления.Приход);
// ---ввв 28.12.2016 г.
				КонецЕсли;
			КонецЕсли;
	    	// Движение по реализации в регистре РасчетыПоРеализацииОрганизации
			Движения.РасчетыПоПриобретениюОрганизации.Очистить();
			
			Движение = Движения.РасчетыПоПриобретениюОрганизации.Добавить();
			
			// измерения
			Движение.Период						= ДатаДока;
			Движение.Организация            	= ЭтотОбъект.Организация;
			Движение.НомерСтрокиДокумента      	= СтрокаТаблицы.НомерСтроки;
			// ресурсы
			Движение.Контрагент            		= ЭтотОбъект.Контрагент;
			Движение.ДоговорКонтрагента         = ЭтотОбъект.ДоговорКонтрагента;
			Движение.РасчетыВУсловныхЕдиницах   = ЭтотОбъект.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
			Движение.КурсВзаиморасчетов			= ЭтотОбъект.КурсВзаиморасчетов;
			Движение.КратностьВзаиморасчетов	= ЭтотОбъект.КратностьВзаиморасчетов;
			Движение.СуммаВзаиморасчетов		= СуммаПоУслугам;
			Движение.СчетОплаты                 = СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги;
			Движение.СчетАванса                 = СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамВыданным;
			Движение.СуммаСНДС			        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
														ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);
			Движение.ВалютаДокумента			= ЭтотОбъект.ВалютаДокумента;
			Движение.КурсДокумента				= ЭтотОбъект.КурсВзаиморасчетов;
			Движение.КратностьДокумента			= ЭтотОбъект.КратностьВзаиморасчетов;
			Движение.РасчетыВозврат				= Перечисления.РасчетыВозврат.Расчеты;
			Движение.ОтражатьВНалоговомУчете	= Истина;
			Движение.СуммаНДС					= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаНДС, ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.ВалютаДокумента,
														ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
														ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);
			Движение.СтавкаНДС					= СтрокаТаблицы.СтавкаНДС;
			Движение.СчетНДС					= СтрокаТаблицы.СчетУчетаНДС;
			Движение.ВидЦенности				= Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			Движение.Направление				= "Поступление";
			// реквизиты
			Движение.ВидДокумента				= ЭтотОбъект.Ссылка.Метаданные().Имя;
			Движение.Документ					= ЭтотОбъект.Ссылка;

			Если Не Отказ Тогда
				Движения.РасчетыПоПриобретениюОрганизации.Записать(Ложь);
			КонецЕсли;
	// ---ввв 19.12.2016 г.
		КонецЦикла;
// +++ввв 22.12.2015 г.
		// регистрация движений по комиссии в регистре накопления расчёты по приобретению
		СуммаПоУслугам = ЭтотОбъект.СуммаВознаграждения+?(ЭтотОбъект.ЗатратыСуммаВключаетНДС,0,ЭтотОбъект.СуммаНДСВознаграждения);
// +++ввв 01.06.2016 г.
// +++ввв 19.12.2016 г.
//// +++ввв 16.12.2016 г.
//		СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоУслугам(СтруктураШапкиДокумента, Заголовок,СуммаПоУслугам);
//		//СтруктураПараметровЗачетАванса = Ложь;
//// ---ввв 01.06.2016 г.
//// всю эту херню удаляем и пишем как в доходах только на поступление
//		Если СтруктураПараметровЗачетАванса = ложь тогда
//		   //Отказ = Истина;
//		   ТаблицаАвансов = 0;
//		Иначе
//			//Возвращает сумму аванса в валюте регламентированного учета
//			ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметровЗачетАванса,
//				СтруктураШапкиДокумента, ТаблицаПоУслугам);
//			ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса,
//				ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению);
//		КонецЕсли;
//			
////			БухгалтерскийУчет.ЗаписатьДвижения(Движения);

//		Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
//			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
//					СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
//			КонецЕсли;
//			РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса,
//					мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
//		КонецЕсли; 
//// ---ввв 16.12.2016 г.
// ---ввв 19.12.2016 г.
		Если ЭтотОбъект.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			
			ТаблицаДвижений = НаборЗаписейВзаиморасчетыПоДокументам.Выгрузить();
			ТаблицаДвижений.Очистить();

			РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			
			Движение = ТаблицаДвижений.Добавить();
	
			Движение.Организация            	   = ЭтотОбъект.Организация;
			Движение.Контрагент            		   = ЭтотОбъект.Контрагент;
			Движение.ДоговорКонтрагента            = ЭтотОбъект.ДоговорКонтрагента;
			Движение.ДокументРасчетовСКонтрагентом = ЭтотОбъект.Ссылка;
			Движение.УпрУчет                       = ЭтотОбъект.ОтражатьВУправленческомУчете;
			Движение.ВидРасчетовСКонтрагентом      = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	
			Движение.СуммаВзаиморасчетов = СуммаПоУслугам;
			Движение.СуммаРегл       = 0;

			НаборЗаписейВзаиморасчетыПоДокументам.мТаблицаДвижений = ТаблицаДвижений;
			НаборЗаписейВзаиморасчетыПоДокументам.мПериод = ДатаДока;

			Если Не Отказ Тогда
				ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейВзаиморасчетыПоДокументам,
															 ВидДвиженияНакопления.Расход);
// +++ввв 16.12.2016 г.
				Если ЭтотОбъект.ttk_Взаимозачет Тогда
					ttk_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейВзаиморасчетыПоДокументам,
															 	 ВидДвиженияНакопления.Приход);
// +++ввв 28.12.2016 г.
// ---ввв 28.12.2016 г.
				КонецЕсли;
// ---ввв 16.12.2016 г.
			КонецЕсли;
			
			// Движение по поступлению в регистре ВзаиморасчетыСКонтрагентами
			ТаблицаДвижений = НаборДвиженийВК.Выгрузить();
			ТаблицаДвижений.Очистить();
            // Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		  = ЭтотОбъект.Контрагент;
			СтрокаДвижений.Организация  	  = ЭтотОбъект.Организация;
	
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
													ЭтотОбъект.ВалютаДокумента,
													ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
													ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
													ЭтотОбъект.ВалютаДокумента,
													ЭтотОбъект.КурсВзаиморасчетов, 
													ЭтотОбъект.КурсВзаиморасчетов,
													ЭтотОбъект.КратностьВзаиморасчетов, 
													ЭтотОбъект.КратностьВзаиморасчетов);
			НаборДвиженийВК.мПериод            = ДатаДока;
			НаборДвиженийВК.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвиженийВК.ВыполнитьРасход();
// +++ввв 16.12.2016 г.
				Если ЭтотОбъект.ttk_Взаимозачет Тогда
					НаборДвиженийВК.ВыполнитьПриход();
// +++ввв 28.12.2016 г.
// ---ввв 28.12.2016 г.
				КонецЕсли;
// ---ввв 16.12.2016 г.
			КонецЕсли;

			// Движение по поступлению в регистре РасчетыСКонтрагентами
			ТаблицаДвижений = НаборДвиженийРК.Выгрузить();
			ТаблицаДвижений.Очистить();

			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента    = ЭтотОбъект.ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		     = ЭтотОбъект.Контрагент;
			СтрокаДвижений.Организация  	     = ЭтотОбъект.Организация;

			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
													ЭтотОбъект.ВалютаДокумента,
													ЭтотОбъект.КурсВзаиморасчетов, ЭтотОбъект.КурсВзаиморасчетов,
													ЭтотОбъект.КратностьВзаиморасчетов, ЭтотОбъект.КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоУслугам, ЭтотОбъект.ВалютаДокумента,
													ЭтотОбъект.ВалютаДокумента,
													ЭтотОбъект.КурсВзаиморасчетов, 
													ЭтотОбъект.КурсВзаиморасчетов,
													ЭтотОбъект.КратностьВзаиморасчетов, 
													ЭтотОбъект.КратностьВзаиморасчетов);
													
			НаборДвиженийРК.мПериод            = Дата;
			НаборДвиженийРК.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвиженийРК.ВыполнитьРасход();
// +++ввв 16.12.2016 г.
				Если ЭтотОбъект.ttk_Взаимозачет Тогда
					НаборДвиженийРК.ВыполнитьПриход();
// +++ввв 28.12.2016 г.
// ---ввв 28.12.2016 г.
				КонецЕсли;
// ---ввв 16.12.2016 г.
			КонецЕсли;
			
		КонецЕсли;
// ---ввв 22.12.2015 г.
	КонецЕсли;
		
	//Отражение взаиморасчетов по реализации товаров
	// Проводки по взаиморасчетам
	СуммаПоТоварам = ТаблицаПоТоварам.Итог("СуммаБезНДСВал") + ТаблицаПоТоварам.Итог("НДСВал");
// +++ввв 01.06.2016 г.
	СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоТоварам(СтруктураШапкиДокумента, Заголовок, СуммаПоТоварам, ТаблицаПоВзаиморасчетам);
	//СтруктураПараметровЗачетАванса = Ложь;
// ---ввв 01.06.2016 г.
	
	Если СтруктураПараметровЗачетАванса = Ложь тогда
		Отказ       = Истина;
		СуммаАванса = 0;
	Иначе
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса, СтруктураШапкиДокумента, ТаблицаПоТоварам);
		СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
	КонецЕсли;// Проводки по взаиморасчетам
	
	БухгалтерскийУчет.ЗаписатьДвижения(Движения);
	
	Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
		Конецесли;
		РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса, 
			мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ, , Истина);
		БухгалтерскийУчет.ЗаписатьДвижения(Движения);
	Конецесли;
	//		//АБС Доработка для 45 счета
	//		Если  ЭтотОбъект.ОтгрузкаБезПереходаПравСобственности Тогда
	//			//\\АБС Доработка для 45 счета
	//			НаборЗаписей = РегистрыНакопления.НДСНачисленный.СоздатьНаборЗаписей();
	//			НаборЗаписей.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
	//			НаборЗаписей.Прочитать();
	//			НаборЗаписей.Очистить();
	//			НаборЗаписей.Записать();
	//			//АБС Доработка для 45 счета
	//		КонецЕсли; //\\АБС Доработка для 45 счета
	//
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	//Отразим услугу
	НаборДвижений = Движения.РасходыПриУСН;
		
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.Валюта 				= СтруктураШапкиДокумента.ВалютаДокумента;
	СтрокаДвижений.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
	СтрокаДвижений.СтатусыПартийУСН		= Перечисления.СтатусыПартийУСН.Купленные;
	СтрокаДвижений.РасчетныйДокумент 	= СтруктураШапкиДокумента.Ссылка;
	СтрокаДвижений.ВидРасхода 			= Перечисления.ВидыРасходовУСН.Услуги;
	СтрокаДвижений.ОтражениеВУСН 		= Перечисления.ОтражениеВУСН.НеПринимаются;
	СтрокаДвижений.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
	СтрокаДвижений.Сумма 				= СуммаВознаграждения;
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ"  ,  "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"  ,  "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетДоходовБУ",  "СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ"   ,  "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ",  "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ"   ,  "СубконтоНУ");
	СтруктураПолей.Вставить("СчетРасходовБУ", "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетРасходовНУ", "СчетРасходовНУ");
	СтруктураПолей.Вставить("ПереданныеПринятыеБУ", "ПереданныеПринятыеБУ");
	СтруктураПолей.Вставить("ПереданныеПринятыеНУ", "ПереданныеПринятыеНУ");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	
	ЭтотОбъект.kmw_ФизЛицоПроводок=Константы.ttk_АгрегатноеФизическоеЛицо.Получить();
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.kmw_ФизЛицоПроводок) Тогда
		ЭтотОбъект.kmw_ФизЛицоПроводок=Справочники.Контрагенты.НайтиПоКоду("K007280");
	КонецЕсли;
	ЭтотОбъект.kmw_ЮрЛицоПроводок=Константы.ttk_АгрегатноеЮридическоеЛицо.Получить();
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.kmw_ЮрЛицоПроводок) Тогда
		ЭтотОбъект.kmw_ЮрЛицоПроводок=Справочники.Контрагенты.НайтиПоКоду("K020971");
	КонецЕсли;
	// Заполнение по Договору с агентом
	Если ТипОснования = Тип("Структура") Тогда
		Если Основание.Свойство("ДоговорКонтрагента") И Основание.Свойство("Дата") Тогда
			ЗаполнениеДляАгентскогоБлока(Основание);
			возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипОснования <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И ТипОснования <> Тип("ДокументСсылка.ИнвентаризацияТоваровОтданныхНаКомиссию") Тогда
		возврат;
	КонецЕсли;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Возврат;
		КонецЕсли;

		Если Основание.Проведен Тогда

			// Сделку заполняем только если взаиморасчеты ведутся не по договору в целом
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 

			 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				Сделка = Основание.Сделка;
			КонецЕсли;

			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			СтавкаНДСВознаграждения                  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

			ЗаполнитьТоварыУпр(Основание);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда

			Сделка = Основание;

			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			СтавкаНДСВознаграждения                  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

			ЗаполнитьТоварыУпр();
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровОтданныхНаКомиссию") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Заполним флаги учета налогов.
		УчитыватьНДС     = Истина;
		СуммаВключаетНДС = Истина;

		Сделка                  = Основание.Сделка;
		ВалютаДокумента         = Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		СтавкаНДСВознаграждения                  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

		ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр(Основание);

	КонецЕсли;

	ОтражатьВБухгалтерскомУчете = Истина;
	ОтражатьВНалоговомУчете     = Истина;
	ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	
КонецПроцедуры // ОбработкаЗаполнения()

// {{KM WARE Трухан А.Г. АгентскийБлок 13.09.2015 начало
Процедура ЗаполнениеДляАгентскогоБлока(ПараметрыЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаполнения);
	Грузоотправитель = Контрагент;
	Грузополучатель = Контрагент;

	ВалютаДокумента  = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
	КурсВзаиморасчетов      = КурсДокумента;
	КратностьВзаиморасчетов = КратностьДокумента;
	СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
	ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
	
	//мСтруктураПараметровДляДокументовРасчетов.Вставить("ДоговорКонтрагента",ДоговорКонтрагента);
	//мСтруктураПараметровДляДокументовРасчетов.Вставить("ВестиПоДокументамРасчетовСКонтрагентом",Истина);
	
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
КонецПроцедуры // ЗаполнениеДляАгентскогоБлока() }}KM WARE Трухан А.Г. АгентскийБлок 13.09.2015 окончание 

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//Бобылев А.А. 17.10.2018 [811]
	Если ttk_ИнтеграцияБП30Сервер.ПроверкаПометкиУдаления(Дата, ПометкаУдаления) Тогда
		Отказ = Истина;
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Запрещено устанавливать пометку удаления", Истина);
	КонецЕсли;
	//Бобылев А.А. ----------------
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Сделка) И Сделка <> Неопределено Тогда
		Сделка = Неопределено;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, ДенежныеСредства);
						  
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	
	// {{KM WARE Трухан А.Г. Агентский блок 01.10.2015 начало
	Если kmw_Услуги.Количество()=0 Тогда
	// }}KM WARE Трухан А.Г. Агентский блок 01.10.2015 окончание
	
		СуммаДокумента      = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
		СуммаНДСВознаграждения = Товары.Итог("СуммаНДСВознаграждения");
		СуммаВознаграждения = Товары.Итог("СуммаВознаграждения")+ 
							  ?(УчитыватьНДС И (Не СуммаВключаетНДС), СуммаНДСВознаграждения, 0);
							  
	// {{KM WARE Трухан А.Г. Агентский блок 01.10.2015 начало
	 Иначе
		СуммаДокумента      = СуммаВознаграждения;
		//СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СуммаВознаграждения,
		//													 УчитыватьНДС, СуммаВключаетНДС,
		//													 УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
	КонецЕсли; 
	// }}KM WARE Трухан А.Г. Агентский блок 01.10.2015 окончание
						  
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
// +++ввв 06.10.2016 г.	
	Если ЭтотОбъект.kmw_Статус = Перечисления.ttk_СтатусыДокументаОтчетОПродажах.ОбработкаБухгалтером Тогда 
		//Если ((ЭтотОбъект.Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация И Константы.абс_КонтрольВГоловнойПоБухгалтеру.Получить())
		//	 ИЛИ (НЕ ЭтотОбъект.Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация И Константы.абс_КонтрольВДЗОпоБухгалтеру.Получить())) Тогда
		//	Если (НЕ ЗначениеЗаполнено(ЭтотОбъект.абс_ОтветственныйБухгалтер) ИЛИ НЕ ЗначениеЗаполнено(НомерВходящегоДокумента) ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.ДатаВходящегоДокумента)) Тогда
				ЭтотОбъект.абс_ОтветственныйБухгалтер=глЗначениеПеременной("глТекущийПользователь"); 
		//	КонецЕсли;
		//КонецЕсли;	
	КонецЕсли;	
// ---ввв 06.10.2016 г.
// +++ввв 07.04.2016 г.
	ДатаЗапрета="";
	
	Если ЭтотОбъект.kmw_Статус=Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Подготовка Тогда
		Если НЕ НетЗапретаПереходаСтатусов(Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Подготовка,
										Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Подготовка,ДатаЗапрета) Тогда
			Отказ=Истина;
// +++ввв 13.08.2016 г.
#Если НаКлиенте Тогда
// ---ввв 13.08.2016 г.
			Предупреждение("Нельзя записывать документ в статусе Подготовка в закрытом периоде до "+Формат(ДатаЗапрета,"ДФ=dd.MM.yyyy")+" г.");
// +++ввв 13.08.2016 г.
#КонецЕсли
// ---ввв 13.08.2016 г.
		КонецЕсли;
// ---ввв 07.04.2016 г.
	ИначеЕсли ЭтотОбъект.kmw_Статус<>Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Проведен Тогда
		Если ЭтотОбъект.Проведен Тогда
			РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения;
//			ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			РежимЗаписи=РежимЗаписиДокумента.Запись;
		КонецЕсли;
	ИначеЕсли РежимЗаписи<>РежимЗаписиДокумента.Проведение И ЭтотОбъект.kmw_Статус=Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Проведен Тогда
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		//РежимЗаписи=РежимЗаписиДокумента.Проведение;
		//РежимПроведения=РежимПроведенияДокумента.Неоперативный;
// +++ввв 01.04.2016 г.
	ИначеЕсли ЭтотОбъект.kmw_Статус=Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Проведен Тогда
		Если НЕ НетЗапретаПереходаСтатусов(Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Проведен,
										Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Проведен,ДатаЗапрета) Тогда
			Отказ=Истина;
// +++ввв 13.08.2016 г.
#Если НаКлиенте Тогда
// ---ввв 13.08.2016 г.
			Предупреждение("Нельзя записывать документ в статусе Проведён в закрытом периоде до "+Формат(ДатаЗапрета,"ДФ=dd.MM.yyyy")+" г.");
// +++ввв 13.08.2016 г.
#КонецЕсли
// ---ввв 13.08.2016 г.
		КонецЕсли;
// ---ввв 01.04.2016 г.
	КонецЕсли;
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
   
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам;
	
	 // {{KM WARE Агапов Н.А. Заявка № 10.11.2015 начало
	Если ЭтотОбъект.kmw_Статус = Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Проведен тогда
		
 		Если мУдалятьДвижения Тогда
			ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
		КонецЕсли;
		
		Если ЭтотОбъект.ввв_РТУ.Количество()>0 Тогда
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.абс_ЦФО) Тогда
				ЭтотОбъект.абс_ЦФО=ЭтотОбъект.ввв_РТУ[0].абс_ЦФО;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.абс_ЦФУ) Тогда
				ЭтотОбъект.абс_ЦФУ=ЭтотОбъект.ввв_РТУ[0].абс_ЦФУ;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.абс_БюджетнаяСтатья) Тогда
				ЭтотОбъект.абс_БюджетнаяСтатья=Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ДХС0302");
			КонецЕсли;
		КонецЕсли;
		
		ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
		
		ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ);
		
		// Проверим правильность заполнения шапки документа
		ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	//	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам);
		
		Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом = Истина Тогда
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом", "ДокументРасчетовСКонтрагентом");
			СтруктураПолей.Вставить("ДатаОплаты"                   , "ДатаОплаты");
			СтруктураПолей.Вставить("СуммаВзаиморасчетов"          , "СуммаВзаиморасчетов");
			СтруктураПолей.Вставить("СуммаРегл"                    , "СуммаРегл");
		
			РезультатЗапросаПоДокументамРасчетовСКонтрагентами = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураПолей);
			ТаблицаПоДокументамРасчетовСКонтрагентом = ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента);
			ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок);
		Иначе
			ТаблицаПоДокументамРасчетовСКонтрагентом = Неопределено;
		КонецЕсли;

		// Проверить заполнение ТЧ "Товары".
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		// Проверить заполнение ТЧ "ДенежныеСредства"
		ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента, Отказ, Заголовок);

		//Проверка заполнения счетов учета номенклатуры и затрат
		СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
		
		//Проверим на возможность проведения в БУ и НУ.
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		 Или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
			                                     СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
			                                     Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                                     СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
		КонецЕсли;

		// Движения по документу
		Если Не Отказ Тогда
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоДенежнымСредствам,
									ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
									
			// АБС ДОБАВЛЕНО Комиссии нету, но есть отгрузка без перехода прав собственности
			Если ОтгрузкаБезПереходаПравСобственности Тогда
				ПроводкиБУ = Движения.Хозрасчетный;
				ПроводкиБУ.Прочитать();
				
				Для Каждого ПроводкаБУ из ПроводкиБУ Цикл
					
					Если ПроводкаБУ.СчетКт = ПланыСчетов.Хозрасчетный.НДС Тогда
						ПроводкаБУ.СчетКт = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;
						ПроводкаБУ.СубконтоКт.Очистить();
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетКт,ПроводкаБУ.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// АБС ДОБАВЛЕНО Комиссии нету, но есть отгрузка без перехода прав собственности КОНЕЦ
			
			// {{KM WARE Трухан А.Г. Агентский блок 28.09.2015 начало
			//Создадим сч.фактуру
			Если ЭтотОбъект.СуммаВознаграждения<>0 Тогда
// +++ввв 19.08.2016 г.
				НомерСФ=ЭтотОбъект.НомерВходящегоДокумента;
				ДатаСФ=ЭтотОбъект.ДатаВходящегоДокумента;
// ---ввв 19.08.2016 г.
				НайденныйСФ = Документы.СчетФактураПолученный.НайтиПоРеквизиту("ДокументОснование",Ссылка);
				Если ЗначениеЗаполнено(НайденныйСФ) Тогда
					СФ = НайденныйСФ.ПолучитьОбъект();
// +++ввв 19.08.2016 г.
					НомерСФ=СФ.НомерВходящегоДокумента;
					ДатаСФ=СФ.ДатаВходящегоДокумента;
// ---ввв 19.0.2016 г.
					СФ.ДокументыОснования.Очистить();
				Иначе	
					СФ = Документы.СчетФактураПолученный.СоздатьДокумент();
				КонецЕсли; 
				СФ.Заполнить(Ссылка);
// +++ввв 19.08.2016 г.
				//СФ.ДатаВходящегоДокумента = СФ.Дата;
				СФ.ДатаВходящегоДокумента = ДатаСФ;
				СФ.НомерВходящегоДокумента = НомерСФ;
// ---ввв 19.08.2016 г.
// +++ввв 10.10.2016 г.
				СФ.ВходитВЖурналСчетовФактур=Истина;
// +++ввв 18.10.2016 г.
				СФ.СформированПриВводеНачальныхОстатковНДС=Ложь;
				СФ.ДокументыОснования.Очистить();
				йСФ=СФ.ДокументыОснования.Добавить();
				йСФ.ДокументОснование=(Ссылка);
// ---ввв 18.10.2016 г.
// ---ввв 10.10.2016 г.
				СФ.СуммаДокумента = ЭтотОбъект.СуммаВознаграждения+?(ЭтотОбъект.ЗатратыСуммаВключаетНДС,0,ЭтотОбъект.СуммаНДСВознаграждения);
				СФ.СуммаНДСДокумента = ЭтотОбъект.СуммаНДСВознаграждения;
//				СФ.СформированПриВводеНачальныхОстатковНДС = Истина; //что бы не очищался при записи													 
				СФ.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
			// }}KM WARE Трухан А.Г. Агентский блок 28.09.2015 окончание
		КонецЕсли;
		//Сделаем переменные доступными из подписок на события
		ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
		ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));
	//ИначеЕсли ЭтотОбъектkmw_Статус=Перечисления.абс_СтатусыКадровоРасчетныхДокументов.Отказ Тогда
	//	Отказ=Истина;
	//	Сообщить("Проведение документа в статусе отказ невозможно!",СтатусСообщения.ОченьВажное);
	//	Возврат;
	//Иначе	
	КонецЕсли;
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ФлагНаличия=Ложь;
	Если ЭтотОбъект.kmw_Статус<>Перечисления.ttk_СтатусыДокументаОтчетОПродажах.Отмена Тогда
// +++ввв 13.08.2016 г.
#Если НаКлиенте Тогда
// ---ввв 13.08.2016 г.
		Предупреждение("Документ можно помечать на удаление только в статусе ОТМЕНА.");
// +++ввв 13.08.2016 г.
#КонецЕсли
// ---ввв 13.08.2016 г.
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	Для каждого нСтр Из ЭтотОбъект.kmw_Услуги Цикл
		Если ЗначениеЗаполнено(нСтр.СчетФактураВыданный) Тогда
			ФлагНаличия=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	Если ФлагНаличия Тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
// +++ввв 06.06.2016 г.
	// Павлов заявка 000013537
	Движения.РасчетыПоРеализацииОрганизации.Прочитать();
	
	абс_ВосстановлениеВзаиморасчетов.СдвинутьГраницуПоследовательностиНазадПриОтменеПроведедния(Ссылка, Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, Дата, Организация,, Движения.РасчетыПоРеализацииОрганизации.Выгрузить());
	//
// ---ввв 06.06.2016 г.
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровДляДокументовРасчетов = Новый Структура;
мСтруктураПараметровДляДокументовРасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровДляДокументовРасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровДляДокументовРасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровДляДокументовРасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");

мСтруктураПараметровДляПолученияДоговора = Новый Структура();
мСписокДопустимыхВидовДоговоров = Новый СписокЗначений();
мСписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);