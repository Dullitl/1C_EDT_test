Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУдалятьДвижения;

Функция СобратьДанныеПоРеализацияТоваровУслуг(Основание)

	Запрос = Новый Запрос;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		Запрос.УстановитьПараметр("ДокументОснование", Основание.ДокументОтгрузки);
	Иначе
		Запрос.УстановитьПараметр("ДокументОснование", Основание);
	КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК НаименованиеНоменклатуры,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.СчетУчетаБУ.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Количество КАК КоличествоДоИзменения,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА РеализацияТоваровУслугТовары.Количество <> 0
	|						ТОГДА ВЫРАЗИТЬ((РеализацияТоваровУслугТовары.Сумма - РеализацияТоваровУслугТовары.СуммаНДС) / РеализацияТоваровУслугТовары.Количество КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Цена
	|	КОНЕЦ КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугТовары.Сумма - РеализацияТоваровУслугТовары.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма
	|	КОНЕЦ КАК СтоимостьБезНДСДоИзменения,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугТовары.Сумма
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма + РеализацияТоваровУслугТовары.СуммаНДС
	|	КОНЕЦ КАК СтоимостьСНДСДоИзменения
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	РеализацияТоваровУслугУслуги.НомерСтроки,
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(1000))) = """"
	|			ТОГДА РеализацияТоваровУслугУслуги.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(1000))
	|	КОНЕЦ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслугУслуги.Количество,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА РеализацияТоваровУслугУслуги.Количество <> 0
	|						ТОГДА ВЫРАЗИТЬ((РеализацияТоваровУслугУслуги.Сумма - РеализацияТоваровУслугУслуги.СуммаНДС) / РеализацияТоваровУслугУслуги.Количество КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугУслуги.Сумма - РеализацияТоваровУслугУслуги.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Сумма
	|	КОНЕЦ,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугУслуги.Сумма
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Сумма + РеализацияТоваровУслугУслуги.СуммаНДС
	|	КОНЕЦ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура РассчитатьРазницыБезНДС(ТекДанные) Экспорт

	Если ТекДанные.СтоимостьБезНДСДоИзменения > ТекДанные.СтоимостьБезНДСПослеИзменения Тогда
		ТекДанные.РазницаБезНДСКУменьшению = ТекДанные.СтоимостьБезНДСДоИзменения - ТекДанные.СтоимостьБезНДСПослеИзменения;
		ТекДанные.РазницаБезНДСКДоплате    = 0;
	Иначе
		ТекДанные.РазницаБезНДСКУменьшению = 0;
		ТекДанные.РазницаБезНДСКДоплате    = ТекДанные.СтоимостьБезНДСПослеИзменения - ТекДанные.СтоимостьБезНДСДоИзменения;
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьРазницыНДС(ТекДанные) Экспорт

	Если ТекДанные.СуммаНДСДоИзменения > ТекДанные.СуммаНДСПослеИзменения Тогда
		ТекДанные.РазницаНДСКУменьшению = ТекДанные.СуммаНДСДоИзменения - ТекДанные.СуммаНДСПослеИзменения;
		ТекДанные.РазницаНДСКДоплате    = 0;
	Иначе
		ТекДанные.РазницаНДСКУменьшению = 0;
		ТекДанные.РазницаНДСКДоплате    = ТекДанные.СуммаНДСПослеИзменения - ТекДанные.СуммаНДСДоИзменения;
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьРазницыСНДС(ТекДанные) Экспорт

	Если ТекДанные.СтоимостьСНДСДоИзменения > ТекДанные.СтоимостьСНДСПослеИзменения Тогда
		ТекДанные.РазницаСНДСКУменьшению = ТекДанные.СтоимостьСНДСДоИзменения - ТекДанные.СтоимостьСНДСПослеИзменения;
		ТекДанные.РазницаСНДСКДоплате    = 0;
	Иначе
		ТекДанные.РазницаСНДСКУменьшению = 0;
		ТекДанные.РазницаСНДСКДоплате    = ТекДанные.СтоимостьСНДСПослеИзменения - ТекДанные.СтоимостьСНДСДоИзменения;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТоварыИУслугиПоСчетуФактуре(Основание) Экспорт

	ТаблицаТоварыИУслуги = ТоварыИУслуги.ВыгрузитьКолонки();
	ТаблицаТоварыИУслуги.Колонки.Добавить("ЭтоУслуга",   Новый ОписаниеТипов("Булево"));
	ТаблицаТоварыИУслуги.Колонки.Добавить("ЭтоКомиссия", Новый ОписаниеТипов("Булево"));
	ТаблицаТоварыИУслуги.Колонки.Добавить("СчетУчета",   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Для каждого СтрокаОснования Из Основание.ДокументыОснования Цикл
	
		Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ТаблицаДокумента = СобратьДанныеПоРеализацияТоваровУслуг(СтрокаОснования.ДокументОснование);
		ИначеЕсли ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			ТаблицаДокумента = СобратьДанныеПоРеализацияТоваровУслуг(СтрокаОснования.ДокументОснование);
		Иначе
			ТаблицаДокумента = Новый ТаблицаЗначений;
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			НоваяСтрока = ТаблицаТоварыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
	
	КонецЦикла;
	
	ТаблицаТоварыИУслуги.ЗагрузитьКолонку(
		ТаблицаТоварыИУслуги.ВыгрузитьКолонку("КоличествоДоИзменения"), "КоличествоПослеИзменения");
	ТаблицаТоварыИУслуги.ЗагрузитьКолонку(
		ТаблицаТоварыИУслуги.ВыгрузитьКолонку("ЦенаДоИзменения"), "ЦенаПослеИзменения");
	ТаблицаТоварыИУслуги.ЗагрузитьКолонку(
		ТаблицаТоварыИУслуги.ВыгрузитьКолонку("СтоимостьБезНДСДоИзменения"), "СтоимостьБезНДСПослеИзменения");
	ТаблицаТоварыИУслуги.ЗагрузитьКолонку(
		ТаблицаТоварыИУслуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"), "СуммаНДСПослеИзменения");
	ТаблицаТоварыИУслуги.ЗагрузитьКолонку(
		ТаблицаТоварыИУслуги.ВыгрузитьКолонку("СтоимостьСНДСДоИзменения"), "СтоимостьСНДСПослеИзменения");
		
	ВидыЦенностейПоСчетамУчета = Новый Соответствие;
	Для каждого СтрокаТаблицы Из ТаблицаТоварыИУслуги Цикл
		
		Если СтрокаТаблицы.ЭтоКомиссия Тогда
			СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТоварыУслугиКомитентов;
		Иначе
			СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
				СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчета, , , , , СтрокаТаблицы.ЭтоУслуга, , , ВидыЦенностейПоСчетамУчета);
		КонецЕсли;
		РассчитатьРазницыБезНДС(СтрокаТаблицы);
		РассчитатьРазницыНДС(СтрокаТаблицы);
		РассчитатьРазницыСНДС(СтрокаТаблицы);
	
	КонецЦикла;
	
	ТоварыИУслуги.Загрузить(ТаблицаТоварыИУслуги);
	РассчитатьИтоговыеСуммыДокумента();
	УстановитьНДСПредъявленКВычету();

КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ Основание.ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
		ТекстСообщения = "Корректировочный счет-фактура вводится на основании документа ""Счет-фактура выданный"" с видом ""На реализацию"".";
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание,
		"Организация, Контрагент, ДоговорКонтрагента");
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		ТекстСообщения = "Корректировочный счет-фактура вводится по договорам в рублях.";
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СчетФактура        = Основание;
	ВалютаДокумента    = мВалютаРегламентированногоУчета;
			
	ЗаполнитьТоварыИУслугиПоСчетуФактуре(Основание);
	
КонецПроцедуры	

Процедура РассчитатьИтоговыеСуммыДокумента() Экспорт
	
	РазницаСНДСКУменьшению = ТоварыИУслуги.Итог("РазницаСНДСКУменьшению");
	РазницаСНДСКДоплате    = ТоварыИУслуги.Итог("РазницаСНДСКДоплате");
	РазницаНДСКУменьшению  = ТоварыИУслуги.Итог("РазницаНДСКУменьшению");
	РазницаНДСКДоплате     = ТоварыИУслуги.Итог("РазницаНДСКДоплате");
	
КонецПроцедуры

Процедура УстановитьНДСПредъявленКВычету() Экспорт

	НДСПредъявленКВычету = (РазницаСНДСКУменьшению > 0);
	
КонецПроцедуры
              
Функция ПолучитьРеквизитыСчетаФактуры(Знач Организация, Знач Контрагент, Знач ТекущееОснование) Экспорт
	
	Перем ПодразделениеОтветственныхЛиц;
	
	Реквизиты = Новый Структура;
	
	Поставщик  = Организация;
	Покупатель = Контрагент;
	
	Если ЗначениеЗаполнено(ТекущееОснование) Тогда
	
		Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			ТекущееОснование = ТекущееОснование.ДокументОтгрузки;
		КонецЕсли;	
		
		МетаданныеОснования = ТекущееОснование.Метаданные();
		              		
	КонецЕсли;
			
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата);
		
	// Получение контактной информации
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Покупатель, Дата);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Поставщик, Дата);
	
	// Формирование строковых реквизитов счета-фактуры
	
	Реквизиты.Вставить("НаименованиеПродавца",   СведенияОПоставщике.ПолноеНаименование);
	Реквизиты.Вставить("АдресПродавца",          СведенияОПоставщике.ЮридическийАдрес);
	Реквизиты.Вставить("ИННПродавца",            СведенияОПоставщике.ИНН);
	Реквизиты.Вставить("КПППродавца",            СведенияОПоставщике.КПП);
	Реквизиты.Вставить("НаименованиеПокупателя", СведенияОПокупателе.ПолноеНаименование);
	Реквизиты.Вставить("АдресПокупателя",        СведенияОПокупателе.ЮридическийАдрес);
	Реквизиты.Вставить("ИННПокупателя",          СведенияОПокупателе.ИНН);
	Реквизиты.Вставить("КПППокупателя",          СведенияОПокупателе.КПП);
	Реквизиты.Вставить("ФИОРуководителя", 	     Руководители.Руководитель);
	Реквизиты.Вставить("ФИОГлавногоБухгалтера",  Руководители.ГлавныйБухгалтер);
	Реквизиты.Вставить("СвидетельствоИП", 		 
		?(СведенияОПоставщике.Свойство("Свидетельство"), СведенияОПоставщике.Свидетельство, ""));
	      		
	Возврат Реквизиты;
    	
КонецФункции	
             
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ПЕЧАТНОЙ ФОРМЫ ДОКУМЕНТА

#Если Клиент Тогда
	
Функция ПечатьКорректировочногоСчетаФактуры() Экспорт
	
	ДанныеДляПечати = СобратьДанныеДляПечати();	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировочныйСчетФактура_КорректировочныйСчетФактура";
	Макет = ПолучитьМакет("КорректировочныйСчетФактура");
	
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим заголовок таблицы
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
	ТаблицаТовары = ДанныеДляПечати.ТабличнаяЧасть;

	// Выводим строки таблицы
	ОбластьМакета   = Макет.ПолучитьОбласть("Строка");
	НомерСтроки     = 0;
	КоличествоСтрок = ТаблицаТовары.Количество();
	
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");

	Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
		
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС              = "Без налога (НДС)";
			ОбластьМакета.Параметры.СуммаНДСДоИзменения    = "Без налога (НДС)";
			ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "Без налога (НДС)";
		КонецЕсли;	
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместиться итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
		КонецЕсли;
				
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, , ТабДокумент.ВысотаТаблицы, ).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	// Выводим итоги и подвал документа
	
	ОбластьМакетаИтого.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаИтого);
    	
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	// Задаем параметры табличного документа
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;

	ТабДокумент.ВерхнийКолонтитул.Выводить              = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница     = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа           = "Лист [&НомерСтраницы]";
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева            = "Корректировочный счет-фактура №" 
		+ ДанныеДляПечати.НомерКорректировки + "от " + ДанныеДляПечати.Дата;
	
	Возврат ТабДокумент;

КонецФункции

Функция СобратьДанныеДляПечати()
	
	// Подготовка данных шапки
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировочныйСчетФактура.Дата КАК Дата,
	|	КорректировочныйСчетФактура.Номер КАК Номер,
	|	КорректировочныйСчетФактура.СчетФактура КАК СчетФактура,
	|	КорректировочныйСчетФактура.СчетФактура.Дата КАК ДатаСчетаФактуры,
	|	КорректировочныйСчетФактура.НаименованиеПродавца КАК НаименованиеПродавца,
	|	КорректировочныйСчетФактура.АдресПродавца КАК АдресПродавца,
	|	КорректировочныйСчетФактура.ИННПродавца КАК ИННПродавца,
	|	КорректировочныйСчетФактура.КПППродавца КАК КПППродавца,
	|	КорректировочныйСчетФактура.НаименованиеПокупателя КАК НаименованиеПокупателя,
	|	КорректировочныйСчетФактура.АдресПокупателя КАК АдресПокупателя,
	|	КорректировочныйСчетФактура.ИННПокупателя КАК ИННПокупателя,
	|	КорректировочныйСчетФактура.КПППокупателя КАК КПППокупателя,
	|	КорректировочныйСчетФактура.ФИОРуководителя КАК ФИОРуководителя,
	|	КорректировочныйСчетФактура.ФИОГлавногоБухгалтера КАК ФИОГлавногоБухгалтера,
	|	КорректировочныйСчетФактура.Организация КАК Организация,
	|	КорректировочныйСчетФактура.СвидетельствоИП КАК СвидетельствоИП,
	|	СУММА(ЕСТЬNULL(ТаблицаТоварыИУслуги.РазницаБезНДСКУменьшению, 0)) КАК РазницаБезНДСКУменьшению,
	|	СУММА(ЕСТЬNULL(ТаблицаТоварыИУслуги.РазницаБезНДСКДоплате, 0)) КАК РазницаБезНДСКДоплате,
	|	СУММА(ЕСТЬNULL(ТаблицаТоварыИУслуги.РазницаНДСКУменьшению, 0)) КАК РазницаНДСКУменьшению,
	|	СУММА(ЕСТЬNULL(ТаблицаТоварыИУслуги.РазницаНДСКДоплате, 0)) КАК РазницаНДСКДоплате,
	|	СУММА(ЕСТЬNULL(ТаблицаТоварыИУслуги.РазницаСНДСКУменьшению, 0)) КАК РазницаСНДСКУменьшению,
	|	СУММА(ЕСТЬNULL(ТаблицаТоварыИУслуги.РазницаСНДСКДоплате, 0)) КАК РазницаСНДСКДоплате
	|ИЗ
	|	Документ.КорректировочныйСчетФактураВыданный КАК КорректировочныйСчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировочныйСчетФактураВыданный.ТоварыИУслуги КАК ТаблицаТоварыИУслуги
	|		ПО КорректировочныйСчетФактура.Ссылка = ТаблицаТоварыИУслуги.Ссылка
	|ГДЕ
	|	КорректировочныйСчетФактура.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировочныйСчетФактура.Ссылка,
	|	КорректировочныйСчетФактура.Дата,
	|	КорректировочныйСчетФактура.Номер,
	|	КорректировочныйСчетФактура.СчетФактура,
	|	КорректировочныйСчетФактура.СчетФактура.Дата,
	|	КорректировочныйСчетФактура.НаименованиеПродавца,
	|	КорректировочныйСчетФактура.АдресПродавца,
	|	КорректировочныйСчетФактура.ИННПродавца,
	|	КорректировочныйСчетФактура.КПППродавца,
	|	КорректировочныйСчетФактура.НаименованиеПокупателя,
	|	КорректировочныйСчетФактура.АдресПокупателя,
	|	КорректировочныйСчетФактура.ИННПокупателя,
	|	КорректировочныйСчетФактура.КПППокупателя,
	|	КорректировочныйСчетФактура.ФИОРуководителя,
	|	КорректировочныйСчетФактура.ФИОГлавногоБухгалтера,
	|	КорректировочныйСчетФактура.Организация,
	|	КорректировочныйСчетФактура.СвидетельствоИП";

	
	ТаблицаШапки = Запрос.Выполнить().Выгрузить();

	СтрокаТаблицыЗначений = ТаблицаШапки[0];
	
	ДанныеДляПечати = Новый Структура;
	Для каждого Колонка Из ТаблицаШапки.Колонки Цикл
		ДанныеДляПечати.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	// Дополнительная подготовка данных
	Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(ДанныеДляПечати.Организация) Тогда
		ДанныеДляПечати.Вставить("ФИОПБОЮЛ", ДанныеДляПечати.ФИОРуководителя);
		ДанныеДляПечати.ФИОРуководителя = "";
	Иначе
		ДанныеДляПечати.СвидетельствоИП = "";
	КонецЕсли;
	ДанныеДляПечати.Дата             = Формат(ДанныеДляПечати.Дата, "ДФ='дд ММММ гггг'") + " г.";
	ДанныеДляПечати.ДатаСчетаФактуры = Формат(ДанныеДляПечати.ДатаСчетаФактуры, "ДФ='дд ММММ гггг'") + " г.";
	ДанныеДляПечати.Вставить("НомерСчетаФактуры", ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеДляПечати.СчетФактура));
	ДанныеДляПечати.Вставить("НомерКорректировки", ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
	ДанныеДляПечати.Вставить("ИННКПППродавца",    ДанныеДляПечати.ИННПродавца
		+ ?(ПустаяСтрока(ДанныеДляПечати.КПППродавца), "", "/" + ДанныеДляПечати.КПППродавца));
	ДанныеДляПечати.Вставить("ИННКПППокупателя",  ДанныеДляПечати.ИННПокупателя
		+ ?(ПустаяСтрока(ДанныеДляПечати.КПППокупателя), "", "/" + ДанныеДляПечати.КПППокупателя));
		
	// Подготовка данных табличной части
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыИУслуги.НомерСтроки КАК НомерСтроки,
	|	ТоварыИУслуги.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТоварыИУслуги.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
	|	ТоварыИУслуги.ЕдиницаИзмерения.Наименование КАК НаименованиеЕдиницыИзмерения,
	|	ТоварыИУслуги.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|	ТоварыИУслуги.КоличествоПослеИзменения КАК КоличествоПослеИзменения,
	|	ТоварыИУслуги.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|	ТоварыИУслуги.ЦенаПослеИзменения КАК ЦенаПослеИзменения,
	|	ТоварыИУслуги.СтоимостьБезНДСДоИзменения КАК СтоимостьБезНДСДоИзменения,
	|	ТоварыИУслуги.СтоимостьБезНДСПослеИзменения КАК СтоимостьБезНДСПослеИзменения,
	|	ТоварыИУслуги.РазницаБезНДСКУменьшению КАК РазницаБезНДСКУменьшению,
	|	ТоварыИУслуги.РазницаБезНДСКДоплате КАК РазницаБезНДСКДоплате,
	|	ТоварыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыИУслуги.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|	ТоварыИУслуги.СуммаНДСПослеИзменения КАК СуммаНДСПослеИзменения,
	|	ТоварыИУслуги.РазницаНДСКУменьшению КАК РазницаНДСКУменьшению,
	|	ТоварыИУслуги.РазницаНДСКДоплате КАК РазницаНДСКДоплате,
	|	ТоварыИУслуги.СтоимостьСНДСДоИзменения КАК СтоимостьСНДСДоИзменения,
	|	ТоварыИУслуги.СтоимостьСНДСПослеИзменения КАК СтоимостьСНДСПослеИзменения,
	|	ТоварыИУслуги.РазницаСНДСКУменьшению КАК РазницаСНДСКУменьшению,
	|	ТоварыИУслуги.РазницаСНДСКДоплате КАК РазницаСНДСКДоплате
	|ИЗ
	|	Документ.КорректировочныйСчетФактураВыданный.ТоварыИУслуги КАК ТоварыИУслуги
	|ГДЕ
	|	ТоварыИУслуги.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
    	
	ТаблицаТоварыИУслуги = Запрос.Выполнить().Выгрузить();
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТаблицаТоварыИУслуги);
	
	Возврат ДанныеДляПечати;

КонецФункции 
       
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "КорректировочныйСчетФактура" Тогда
        	
		ТабДокумент = ПечатьКорректировочногоСчетаФактуры();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры 

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировочныйСчетФактура", "Корректировочный счет-фактура");

КонецФункции 

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

Функция ПодготовитьТаблицыДокумента()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоварыИУслуги.Ссылка.Дата КАК Период,
	|	ТаблицаТоварыИУслуги.Ссылка.Организация КАК Организация,
	|	ТаблицаТоварыИУслуги.Ссылка.Контрагент КАК Покупатель,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	ТаблицаТоварыИУслуги.Ссылка КАК СчетФактура,
	|	ТаблицаТоварыИУслуги.ВидЦенности КАК ВидЦенности,
	|	ТаблицаТоварыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаТоварыИУслуги.РазницаБезНДСКДоплате) КАК СуммаБезНДС,
	|	СУММА(ТаблицаТоварыИУслуги.РазницаНДСКДоплате) КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.Реализация) КАК Событие,
	|	ТаблицаТоварыИУслуги.Ссылка.Дата КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.Дата, КВАРТАЛ) = КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.Дата, КВАРТАЛ) = КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.СчетФактура.Дата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЛОЖЬ КАК СторнирующаяЗаписьДопЛиста
	|ИЗ
	|	Документ.КорректировочныйСчетФактураВыданный.ТоварыИУслуги КАК ТаблицаТоварыИУслуги
	|ГДЕ
	|	ТаблицаТоварыИУслуги.Ссылка = &Ссылка
	|	И ТаблицаТоварыИУслуги.ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыУслугиКомитентов)
	|	И ТаблицаТоварыИУслуги.РазницаБезНДСКДоплате > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоварыИУслуги.Ссылка,
	|	ТаблицаТоварыИУслуги.ВидЦенности,
	|	ТаблицаТоварыИУслуги.СтавкаНДС,
	|	ТаблицаТоварыИУслуги.Ссылка.Дата,
	|	ТаблицаТоварыИУслуги.Ссылка.Организация,
	|	ТаблицаТоварыИУслуги.Ссылка.Контрагент,
	|	ТаблицаТоварыИУслуги.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.Дата, КВАРТАЛ) = КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.Дата, КВАРТАЛ) = КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.СчетФактура.Дата, КВАРТАЛ)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидЦенности,
	|	СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоварыИУслуги.Ссылка.Дата КАК Период,
	|	ТаблицаТоварыИУслуги.Ссылка.Организация КАК Организация,
	|	ТаблицаТоварыИУслуги.Ссылка.Контрагент КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	ТаблицаТоварыИУслуги.Ссылка КАК СчетФактура,
	|	ТаблицаТоварыИУслуги.ВидЦенности КАК ВидЦенности,
	|	ТаблицаТоварыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаТоварыИУслуги.РазницаБезНДСКУменьшению) КАК СуммаБезНДС,
	|	СУММА(ТаблицаТоварыИУслуги.РазницаНДСКУменьшению) КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	ТаблицаТоварыИУслуги.Ссылка.Дата КАК ДатаСобытия,
	|	ЛОЖЬ КАК ЗаписьДополнительногоЛиста,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК КорректируемыйПериод
	|ИЗ
	|	Документ.КорректировочныйСчетФактураВыданный.ТоварыИУслуги КАК ТаблицаТоварыИУслуги
	|ГДЕ
	|	ТаблицаТоварыИУслуги.Ссылка = &Ссылка
	|	И ТаблицаТоварыИУслуги.ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыУслугиКомитентов)
	|	И ТаблицаТоварыИУслуги.РазницаБезНДСКУменьшению > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоварыИУслуги.Ссылка,
	|	ТаблицаТоварыИУслуги.ВидЦенности,
	|	ТаблицаТоварыИУслуги.СтавкаНДС,
	|	ТаблицаТоварыИУслуги.Ссылка.Дата,
	|	ТаблицаТоварыИУслуги.Ссылка.Организация,
	|	ТаблицаТоварыИУслуги.Ссылка.Контрагент,
	|	ТаблицаТоварыИУслуги.Ссылка.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидЦенности,
	|	СтавкаНДС";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыДокумента = Новый Структура;
	ТаблицыДокумента.Вставить("КДоплате",    Результат[0].Выгрузить());
	ТаблицыДокумента.Вставить("КУменьшению", Результат[1].Выгрузить());
	
	Возврат ТаблицыДокумента;	
	
КонецФункции

// Формирование записей книги покупок при уменьшении стоимости (разницы к уменьшению)
//
Процедура СформироватьДвиженияУменьшениеСтоимостиРеализации(СтруктураШапкиДокумента, ТаблицаКУменьшению, Отказ, Заголовок) 
	
	Если НЕ СтруктураШапкиДокумента.НДСПредъявленКВычету
		ИЛИ ТаблицаКУменьшению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаКУменьшению Цикл
		
		Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
	КонецЦикла;
		
КонецПроцедуры	

// Формирование записей книги продаж (или доп.листа книги продаж) при увеличении стоимости (разницы к доплате)
//
Процедура СформироватьДвиженияУвеличениеСтоимостиРеализации(СтруктураШапкиДокумента, ТаблицаКДоплате, Отказ, Заголовок) 
	           	
	Если ТаблицаКДоплате.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаКДоплате Цикл
		
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
	КонецЦикла;
		
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	
	Если  ТипЗнч(ДанныеЗаполнения) <> ТипЗнч(Документы.РеализацияТоваровУслуг.ПустаяСсылка()) ТОгда   //абс вставка
		
		ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(
			ЭтотОбъект);
			
		Реквизиты = ПолучитьРеквизитыСчетаФактуры(Организация, Контрагент, СчетФактура);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	Иначе
	
		Попытка  //абс вставка начало
			
			
			Контрагент 			= ДанныеЗаполнения.Контрагент;
			ДоговорКонтрагента 	= ДанныеЗаполнения.ДоговорКонтрагента;
			Организация			= ДанныеЗаполнения.Организация;
			
			
			
			
			
			Реквизиты = ПолучитьРеквизитыСчетаФактуры(Организация, Контрагент, СчетФактура);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
			Абс_Основание = ДанныеЗаполнения;
			
		Исключение
			
		КонецПопытки;//абс вставка конец
     КонецЕсли;
	
	
	
КонецПроцедуры 

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный        = глЗначениеПеременной("глТекущийПользователь");

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьИтоговыеСуммыДокумента();
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
    	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ТаблицыДокумента = ПодготовитьТаблицыДокумента();
	
	СформироватьДвиженияУменьшениеСтоимостиРеализации(
		СтруктураШапкиДокумента, ТаблицыДокумента.КУменьшению, Отказ, Заголовок);	
	
	СформироватьДвиженияУвеличениеСтоимостиРеализации(
		СтруктураШапкиДокумента, ТаблицыДокумента.КДоплате, Отказ, Заголовок);	
		
		
	//абс вставка начало
	Попытка
		абс_СформироватьДВиженияУменьшенияСтоимостиРеализацииБУ(Отказ);
	Исключение
	КонецПопытки;
	
	Попытка
		абс_СформироватьДВиженияУвеличениеСтоимостиРеализацииБУ(Отказ);
	Исключение
	КонецПопытки;

	
	
	//абс вставка конец
		
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

//абс вставка начало
Функция Абс_ПолучитьТЗНДСНачисленный(ТекДокумент)  Экспорт
	
	
	СЗДокументов = новый СписокЗначений;
	
	Если ТипЗнч(ТекДокумент) <> ТипЗнч(Новый СписокЗначений) ТОгда
		СЗДокументов.Добавить(ТекДокумент);	
	Иначе
		СЗДокументов = ТекДокумент;	
	КонецЕсли;
	
	ТЗНДС = новый ТаблицаЗначений;
	
	
	Запрос  = новый запрос;
	Запрос.УстановитьПараметр("ТекДокумент",ТекДокумент);
	Запрос.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	
	ЗАпрос.Текст = "ВЫБРАТЬ
	               |	НДСНачисленный.Номенклатура,
	               |	НДСНачисленный.ВидЦенности,
	               |	НДСНачисленный.СтавкаНДС,
	               |	ВЫБОР
	               |		КОГДА НДСНачисленный.ВидДвижения = &Приход
	               |			ТОГДА НДСНачисленный.СуммаБезНДС
	               |		ИНАЧЕ -НДСНачисленный.СуммаБезНДС
	               |	КОНЕЦ КАК СуммаБезНДС,
	               |	ВЫБОР
	               |		КОГДА НДСНачисленный.ВидДвижения = &Приход
	               |			ТОГДА НДСНачисленный.НДС
	               |		ИНАЧЕ -НДСНачисленный.НДС
	               |	КОНЕЦ КАК НДС
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	               |ГДЕ
	               |	НДСНачисленный.Регистратор В(&ТекДокумент)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.Номенклатура,
	               |	ВТ.ВидЦенности,
	               |	ВТ.СтавкаНДС,
	               |	СУММА(ВТ.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(ВТ.НДС) КАК НДС
	               |ИЗ
	               |	ВТ КАК ВТ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ.Номенклатура,
	               |	ВТ.ВидЦенности,
	               |	ВТ.СтавкаНДС";
	               
				   
	ТЗВыборка = ЗАпрос.Выполнить().Выгрузить();
	
	Возврат ТЗВыборка;
	
				   
КонецФункции
Процедура Абс_РасчитатьДокумент()Экспорт
	
	
	СЗДокументов = новый СписокЗначений;
	
	Для Каждого СТрокаТЧ из абс_ДокументыКорректировки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Документ)  ТОгда
			Продолжить;
		КонецЕсли;
		
		Если  ТипЗнч(СтрокаТЧ.Документ) = ТипЗнч(Документы.КорректировкаЗаписейРегистров.ПустаяСсылка()) ТОгда
			Продолжить;
		КонецЕсли;
		
		СЗДокументов.Добавить(СТрокаТЧ.Документ);
		
	КонецЦикла;
	
	//ТЗСтарыхРеализацийДСНачисленный=Абс_ПолучитьТЗНДСНачисленный(СЗДокументов);
	
	СЗДокументов.Очистить();

	СЗДокументов.Добавить(Абс_Основание);
	
	ТекТЗНовыхНачислений=Абс_ПолучитьТЗНДСНачисленный(СЗДокументов);
	
	Для Каждого СТрокаТЧ из ТоварыИУслуги Цикл
		
		СуммаБезНДС 		= СТрокаТЧ.СтоимостьБезНДСДоИзменения;
		СуммаНДС 			= СТрокаТЧ.СуммаНДСДоИзменения;
		
		ТекНоменклатура 	= СТрокаТЧ.Номенклатура;
		
		ТекВидЦенности  	= СТрокаТЧ.ВидЦенности;
		
		текСТрОтбора = новый Структура;
		текСТрОтбора.Вставить("Номенклатура",ТекНоменклатура);
		текСТрОтбора.Вставить("ВидЦенности",ТекВидЦенности);
		
		НашлиСТроки = ТекТЗНовыхНачислений.НайтиСтроки(текСТрОтбора);
		
		СуммаБезНДСПосле = 0;
		СуммаНДСПосле = 0;
		СуммаСНДСПосле = 0;
		
		Для Каждого СТрокаТЗ из НашлиСТроки Цикл
			
			СуммаБезНДСПосле 	= СуммаБезНДСПосле + СТрокаТЗ.СуммаБезНДС;
			СуммаНДСПосле 		= СуммаНДСПосле + СТрокаТЗ.НДС;
			
			СуммаСНДСПосле = СуммаБезНДСПосле+ СуммаНДСПосле;
			
		КонецЦикла;
		
		СТрокаТЧ.СтоимостьБезНДСПослеИзменения 	= СуммаБезНДСПосле;
		Если СТрокаТЧ.КоличествоПослеИзменения <>0 ТОгда
			СТрокаТЧ.ЦенаПослеИзменения = СТрокаТЧ.СтоимостьБезНДСПослеИзменения/СТрокаТЧ.КоличествоПослеИзменения;	
		КонецЕсли;
		
		ТекДанные =СТрокаТЧ ;
		РассчитатьРазницыБезНДС(ТекДанные);
		РассчитатьСуммуНДСПослеИзменения(ТекДанные);
		РассчитатьСтоимостьСНДСПослеИзменения(ТекДанные);
		
		
	КонецЦикла;
	
	
	//Если  ТекСТруктураСтарыхРеализаций.СуммаСНДС>ТекСТруктураНовойРеализации.СуммаСНДС ТОгда
	//	
	//	РазницаСНДСКУменьшению = -ТекСТруктураНовойРеализации.СуммаСНДС+ТекСТруктураСтарыхРеализаций.СуммаСНДС;
	//	РазницаНДСКУменьшению 	= -ТекСТруктураНовойРеализации.СуммаНДС+ТекСТруктураСтарыхРеализаций.СуммаНДС;
	//	
	//Иначе
	//	
	//	РазницаСНДСКДоплате = ТекСТруктураНовойРеализации.СуммаСНДС - ТекСТруктураСтарыхРеализаций.СуммаСНДС;
	//	РазницаНДСКДоплате = ТекСТруктураНовойРеализации.СуммаНДС-ТекСТруктураСтарыхРеализаций.СуммаНДС;
	//	
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтоимостьСНДСПослеИзменения(ТекДанные)

	ТекДанные.СтоимостьСНДСПослеИзменения = ТекДанные.СтоимостьБезНДСПослеИзменения + ТекДанные.СуммаНДСПослеИзменения;
	РассчитатьРазницыСНДС(ТекДанные);

КонецПроцедуры

 Процедура РассчитатьСуммуНДСПослеИзменения(ТекДанные)

	ТекДанные.СуммаНДСПослеИзменения = Окр(ТекДанные.СтоимостьБезНДСПослеИзменения 
		* УчетНДС.ПолучитьСтавкуНДС(ТекДанные.СтавкаНДС) / 100, 2);
	РассчитатьРазницыНДС(ТекДанные);

КонецПроцедуры
Функция НайтиВидНоменклатурыВРеализации(ТекРеализация,ТекНоменклатура)
	ПустойВид = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	Если  ТекРеализация.Метаданные().Имя <> "РеализацияТоваровУслуг" ТОгда
		Возврат ПустойВид;	
	КонецЕсли;
	
	СтруктураОтбора = новый Структура;
	СтруктураОтбора.Вставить("СчетДоходовБУ",ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД);
	СтруктураОтбора.Вставить("Номенклатура",ТекНоменклатура);
	
	НашлиСтроки = ТекРеализация.Товары.НайтиСТроки(СтруктураОтбора);
	
		
	Для Каждого СТрокаТЧ из  НашлиСтроки Цикл
		
		Если Не ЗначениеЗаполнено(СТрокаТЧ.СубконтоБУ) ТОгда
			Продолжить;
		Иначе
			
			Если  ТипЗнч(СТрокаТЧ.СубконтоБУ) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) ТОгда
				Возврат  СТрокаТЧ.СубконтоБУ;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//================Теперь услуги
	
	НашлиСтроки = ТекРеализация.Услуги.НайтиСТроки(СтруктураОтбора);
	
		
	Для Каждого СТрокаТЧ из  НашлиСтроки Цикл
		
		Если Не ЗначениеЗаполнено(СТрокаТЧ.СубконтоБУ) ТОгда
			Продолжить;
		Иначе
			
			Если  ТипЗнч(СТрокаТЧ.СубконтоБУ) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) ТОгда
				Возврат  СТрокаТЧ.СубконтоБУ;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПустойВид;
КонецФункции


 Процедура абс_СформироватьДВиженияУменьшенияСтоимостиРеализацииБУ(Отказ)
	 
	 Если Отказ ТОгда
		 Возврат;
	 КонецЕсли;
	 
	 
	ТекДВиженияХозрасчетный = Движения.Хозрасчетный;
	Для Каждого СТрокаТЧ из ТоварыИУслуги Цикл
		
		Если  СТрокаТЧ.СуммаНДСДоИзменения <= СТрокаТЧ.СуммаНДСПослеИзменения ТОгда
			
			Продолжить;	
			
		КонецЕсли;
		
		
		НовПроводка = ТекДВиженияХозрасчетный.Добавить();	
		НовПроводка.Организация = Организация;
		НовПроводка.Период = Дата;
		
		НовПроводка.СчетДт =ПланыСчетов.Хозрасчетный.НДС ;
		БухгалтерскийУчет.УстановитьСубконто(НовПроводка.СчетДт, НовПроводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		НовПроводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
		ТекВид = НайтиВидНоменклатурыВРеализации(Абс_Основание,СТрокаТЧ.Номенклатура);
		
		БухгалтерскийУчет.УстановитьСубконто(НовПроводка.СчетКт, НовПроводка.СубконтоКт, "НоменклатурныеГруппы", ТекВид);
		БухгалтерскийУчет.УстановитьСубконто(НовПроводка.СчетКт, НовПроводка.СубконтоКт, "СтавкиНДС", СТрокаТЧ.СтавкаНДС);
		
        НовПроводка.Сумма  = СТрокаТЧ.СуммаНДСДоИзменения - СТрокаТЧ.СуммаНДСПослеИзменения; 
		
		
		НовПроводка.Содержание = "Поставлен НДС к вычету";
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура абс_СформироватьДВиженияУвеличениеСтоимостиРеализацииБУ(Отказ)
	
	Если Отказ ТОгда
		 Возврат;
	 КонецЕсли;
	 
	
	ТекДВиженияХозрасчетный = Движения.Хозрасчетный;
	Для Каждого СТрокаТЧ из ТоварыИУслуги Цикл
		
		Если  СТрокаТЧ.СуммаНДСДоИзменения >= СТрокаТЧ.СуммаНДСПослеИзменения ТОгда
			
			Продолжить;	
			
		КонецЕсли;
		
		
		НовПроводка = ТекДВиженияХозрасчетный.Добавить();	
		НовПроводка.Организация = Организация;
		НовПроводка.Период = Дата;
		
		
		НовПроводка.СчетДт = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
		ТекВид = НайтиВидНоменклатурыВРеализации(Абс_Основание,СТрокаТЧ.Номенклатура);
		
		БухгалтерскийУчет.УстановитьСубконто(НовПроводка.СчетДт, НовПроводка.СубконтоДт, "НоменклатурныеГруппы", ТекВид);
		БухгалтерскийУчет.УстановитьСубконто(НовПроводка.СчетДт, НовПроводка.СубконтоДт, "СтавкиНДС", СТрокаТЧ.СтавкаНДС);
		
		НовПроводка.СчетКт =ПланыСчетов.Хозрасчетный.НДС ;
		БухгалтерскийУчет.УстановитьСубконто(НовПроводка.СчетКт, НовПроводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		
		
        НовПроводка.Сумма  = СТрокаТЧ.СуммаНДСПослеИзменения - СТрокаТЧ.СуммаНДСДоИзменения ; 
		
		
		НовПроводка.Содержание = "Восстановлен НДС";
		
	КонецЦикла;

	
КонецПроцедуры



//абс вставка Конец



мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
