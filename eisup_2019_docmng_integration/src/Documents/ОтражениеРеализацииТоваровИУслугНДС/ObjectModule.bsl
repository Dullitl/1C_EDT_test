Перем мУдалятьДвижения;


Перем мВалютаРегламентированногоУчета Экспорт;
Перем абс_ДатаУчетаПоСчетамУчетаВНДСПродажи Экспорт;  

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет ТЧ Товары и Услуги по расчетному документу
//
Процедура ЗаполнитьПоРасчетномуДокументу(РежимДобавления) Экспорт

	Перем ВидыЦенностейПоСчетамУчета;
	
	Если НЕ ЗначениеЗаполнено(РасчетныйДокумент) тогда
		Возврат;
	КонецЕсли;

	Если ТоварыИУслуги.Количество() > 0 И Не РежимДобавления Тогда

		#Если Клиент Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		#КонецЕсли

		ТоварыИУслуги.Очистить();

	КонецЕсли;
	
	ТаблицаДокумента = УчетНДС.ПолучитьТаблицуДокументаНДС(РасчетныйДокумент, , Истина);
	Если ТаблицаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокумента.Колонки.Найти("СуммаБезНДСВал") <> Неопределено Тогда
		Если ТаблицаДокумента.Колонки.Найти("Сумма") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.Удалить("Сумма");
		КонецЕсли;
		ТаблицаДокумента.Колонки.СуммаБезНДСВал.Имя = "Сумма";
		Если ТаблицаДокумента.Колонки.Найти("СуммаНДС") = Неопределено Тогда
			Если ТаблицаДокумента.Колонки.Найти("НДСВал") <> Неопределено Тогда
				ТаблицаДокумента.Колонки.НДСВал.Имя = "СуммаНДС";
			Иначе
				ТаблицаДокумента.Колонки.НДС.Имя = "СуммаНДС";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТаблицаДокумента.Колонки.Найти("СуммаБезНДС") <> Неопределено Тогда
		Если ТаблицаДокумента.Колонки.Найти("Сумма") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.Удалить("Сумма");
		КонецЕсли;
		ТаблицаДокумента.Колонки.СуммаБезНДС.Имя = "Сумма";
		Если ТаблицаДокумента.Колонки.Найти("СуммаНДС") = Неопределено Тогда
			ТаблицаДокумента.Колонки.НДС.Имя = "СуммаНДС";
		КонецЕсли;
	Иначе
		Если ТаблицаДокумента.Колонки.Найти("СуммаНДС") = Неопределено Тогда
			ТаблицаДокумента.Колонки.НДС.Имя = "СуммаНДС";
		КонецЕсли;
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДокумента, ТоварыИУслуги);
	//АБС Коломиец 13843+
	Если Не ФормироватьПроводки И (абс_ДатаУчетаПоСчетамУчетаВНДСПродажи <> '00010101000000' И Дата >= абс_ДатаУчетаПоСчетамУчетаВНДСПродажи) Тогда
		Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			ТоварыИУслуги.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку("СчетРасходовБУ"), "СчетУчетаНДСПоРеализации");	
			Для Каждого СтрокаТоварыИУслуги Из ТоварыИУслуги Цикл 
				СтрокаТоварыИУслуги.СчетУчетаНДСПоРеализации = ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаТоварыИУслуги.СчетУчетаНДСПоРеализации, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы), СтрокаТоварыИУслуги.СчетУчетаНДСПоРеализации, ПланыСчетов.Хозрасчетный.Продажи_НДС);
			КонецЦикла;
		ИначеЕсли ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ТоварыИУслуги.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку("СчетУчетаНДС"), "СчетУчетаНДСПоРеализации");		
		ИначеЕсли ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда	 
			Если РасчетныйДокумент.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда		 
				Для Каждого СтрокаТоварыИУслуги Из ТоварыИУслуги Цикл
					СтрокаТоварыИУслуги.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;	
				КонецЦикла;
			ИначеЕсли РасчетныйДокумент.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда			 
				Для Каждого СтрокаТоварыИУслуги Из ТоварыИУслуги Цикл
					СтрокаТоварыИУслуги.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;	
				КонецЦикла;		 
			КонецЕсли;		 
		ИначеЕсли ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда	 	 
			Для Каждого СтрокаТоварыИУслуги Из ТоварыИУслуги Цикл
				СтрокаТоварыИУслуги.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;	
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	//АБС Коломиец 13843-
	//Сторчевой А.Н. 22.08.2016 7744692 { Добавлена колонка "Содержание" для того чтобы она заполнялась в документ.
	Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ТоварыИУслуги.Свернуть("ВидЦенности, Номенклатура, СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, СчетУчетаНДСПоРеализации, СтавкаНДС, Содержание,
			|Коэффициент, Событие", "Количество, Цена, Сумма, СуммаНДС");
	// } Сторчевой А.Н. 22.08.2016 7744692
	ИначеЕсли ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда		
		ТоварыИУслуги.Свернуть("ВидЦенности, Номенклатура, СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, СчетУчетаНДСПоРеализации, СтавкаНДС, Содержание,
			|Коэффициент, Событие", "Количество, Цена, Сумма, СуммаНДС");
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РасчетыПоРеализацииОрганизации.СчетНДС КАК СчетУчетаБУ
			|ИЗ
			|	РегистрСведений.РасчетыПоРеализацииОрганизации КАК РасчетыПоРеализацииОрганизации
			|ГДЕ
			|	РасчетыПоРеализацииОрганизации.Регистратор = &Регистратор";
		Запрос.УстановитьПараметр("Дт", РасчетныйДокумент.Дата);
		Запрос.УстановитьПараметр("Регистратор", РасчетныйДокумент);
		ТоварыИУслуги.ЗагрузитьКолонку(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетУчетаБУ"), "СчетУчетаБУ");
	Иначе	
		ТоварыИУслуги.Свернуть("ВидЦенности, Номенклатура, СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, СчетУчетаНДСПоРеализации, СтавкаНДС,
			|Коэффициент, Событие", "Количество, Цена, Сумма, СуммаНДС");
	КонецЕсли;
						
	ПересчитыватьЗаполненнуюЦену = Не (РасчетныйДокумент.Метаданные().Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			И РасчетныйДокумент.СуммаВключаетНДС = СуммаВключаетНДС);
	
	Для Каждого СтрокаДокумента Из ТоварыИУслуги Цикл
		
		Если СуммаВключаетНДС Тогда
			СтрокаДокумента.Сумма = СтрокаДокумента.Сумма + СтрокаДокумента.СуммаНДС;
		КонецЕсли;
		Если (СтрокаДокумента.Цена = 0 или ПересчитыватьЗаполненнуюЦену) 
			И СтрокаДокумента.Сумма <> 0 
			Тогда
			Если СтрокаДокумента.Количество = 0 Тогда
				СтрокаДокумента.Количество = 1;
			КонецЕсли;
			СтрокаДокумента.Цена = СтрокаДокумента.Сумма / СтрокаДокумента.Количество;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидЦенности) Тогда
			СтрокаДокумента.ВидЦенности = УчетНДС.ОпределитьВидЦенности(СтрокаДокумента.Номенклатура, СтрокаДокумента.СчетУчетаБУ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.Событие) Тогда
			Если СтрокаДокумента.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда
					Или СтрокаДокумента.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы
					Или СтрокаДокумента.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества
					Или СтрокаДокумента.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
				СтрокаДокумента.Событие	= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			Иначе
				СтрокаДокумента.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;    	

КонецПроцедуры // ЗаполнитьПоРасчетномуДокументу()

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ=Ложь) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, Ложь);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ=Ложь) Экспорт
	
	//Заполняем счета учета вне зависимости от режима "Определять счета при проведении документов"
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, Ложь,,,Истина);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура("Организация");
	Если Не (СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру И УчетНДС.ДляСчетаФактурыНеТребуетсяКонтрагент(СтруктураШапкиДокумента.РасчетныйДокумент)) Тогда 
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста Тогда
		СтруктураОбязательныхПолей.Вставить("КорректируемыйПериод");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Дата >= '20150101' Тогда
		СтруктураОбязательныхПолей.Вставить("КодВидаОперации");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет структуру шапки документа значениями, требуемыми для проведения
//
Процедура ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента, Отказ)
	
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, МоментОпределенияНалоговойБазыНДС");
	ttk_ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("Период");
	ТаблицаТоваров.Колонки.Добавить("Активность");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("Покупатель");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("СчетФактура");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("ЗаписьДополнительногоЛиста");
	ТаблицаТоваров.Колонки.Добавить("КорректируемыйПериод");
 	ТаблицаТоваров.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));

	Если СтруктураШапкиДокумента.Дата >= '20150101' Тогда
		ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.КодВидаОперации, "КодВидаОперации");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.Организация = СтруктураШапкиДокумента.Организация;
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.абс_Продавец) Тогда
			СтрокаТаблицы.Покупатель  = СтруктураШапкиДокумента.абс_Продавец;
		Иначе
			СтрокаТаблицы.Покупатель = СтруктураШапкиДокумента.Контрагент;
        КонецЕсли;		 		
		СтрокаТаблицы.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаТаблицы.СчетФактура = ?(СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру, 
										СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
		СтрокаТаблицы.ЗаписьДополнительногоЛиста = СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста;
		Если СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = СтруктураШапкиДокумента.КорректируемыйПериод;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
			Если СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				СтрокаТаблицы.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
																					СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																					СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
																					СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
				СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
																					СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																					СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
																					СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
			КонецЕсли;
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(СтруктураШапкиДокумента.СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Событие) Тогда
			СтрокаТаблицы.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
		КонецЕсли;
	КонецЦикла;

	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		ТаблицаТоваров.Свернуть("Период, Активность, Организация, ВидЦенности, Покупатель, ДоговорКонтрагента, Событие, СчетФактура, СтавкаНДС, ЗаписьДополнительногоЛиста, КорректируемыйПериод, КодВидаОперации, абс_ЛьготаПоНДС,абс_СубконтоБУ,абс_СубконтоНУ, Номенклатура "  // АБС ВСТАВКА добавлена льгота по НДС
								+ ?(СтруктураШапкиДокумента.ФормироватьПроводки, ", СчетУчетаНДСПоРеализации, СубконтоБУ, СчетУчетаБУ, СчетДоходовБУ", "")
								+ ?((не ТаблицаТоваров.Найти(Истина, "ЗаписьДополнительногоЛиста") = неопределено) и СтруктураШапкиДокумента.ФормироватьСторнирующиеЗаписиДопЛистовВручную, ", СторнирующаяЗаписьДопЛиста", "")
								+ ?(абс_ДатаУчетаПоСчетамУчетаВНДСПродажи <> '00010101000000' И Дата >= абс_ДатаУчетаПоСчетамУчетаВНДСПродажи И Не СтруктураШапкиДокумента.ФормироватьПроводки, ", СчетУчетаНДСПоРеализации", "")    //АБС Коломиец 13843
								, "Количество, Цена, Сумма, СуммаБезНДС, НДС");
		Если Не ТаблицаТоваров.Найти(Истина, "ЗаписьДополнительногоЛиста") = Неопределено 
			И Не СтруктураШапкиДокумента.ФормироватьСторнирующиеЗаписиДопЛистовВручную 
			Тогда
			ТаблицаТоваров.Колонки.Добавить("СторнирующаяЗаписьДопЛиста", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ТоварыИУслуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма, СтавкаНДС"+?(СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу,"",", Номенклатура"));

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Функция ПодготовитьТаблицуДокументовОплаты(РезультатЗапросаПоДокументамОплаты, СтруктураШапкиДокумента)

	ТаблицаДокументовОплаты = РезультатЗапросаПоДокументамОплаты.Выгрузить();
	ТаблицаДокументовОплаты.Колонки.Добавить("Период");
	ТаблицаДокументовОплаты.Колонки.Добавить("Активность");
	ТаблицаДокументовОплаты.Колонки.Добавить("Организация");
	ТаблицаДокументовОплаты.Колонки.Добавить("Покупатель");
	ТаблицаДокументовОплаты.Колонки.Добавить("Событие");
	ТаблицаДокументовОплаты.Колонки.Добавить("СчетФактура");
	ТаблицаДокументовОплаты.Колонки.Добавить("ЗаписьДополнительногоЛиста");
	ТаблицаДокументовОплаты.Колонки.Добавить("КорректируемыйПериод");
	ТаблицаДокументовОплаты.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");
	ТаблицаДокументовОплаты.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,       "Организация");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,        "Покупатель");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(?(СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру, 
												СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка), "СчетФактура");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста, "ЗаписьДополнительногоЛиста");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.КорректируемыйПериод, "КорректируемыйПериод");
	
	Если СтруктураШапкиДокумента.Дата >= '20150101' Тогда
		ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.КодВидаОперации, "КодВидаОперации");
	КонецЕсли;
	
	ТаблицаДокументовОплаты.Свернуть("Период, Активность, Организация, Покупатель, Событие, СчетФактура, ДатаОплаты, ДокументОплаты, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста, КодВидаОперации");

	Возврат ТаблицаДокументовОплаты;

КонецФункции  //ПодготовитьТаблицуДокументовОплаты()

// Проверяет правильность заполнения строк табличной части "ДокументыОплаты".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыОплаты(ТаблицаПоДокументамОплаты, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("ДатаОплаты");
		
		// Теперь вызовем общую процедуру проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОплаты", СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		ТаблицаПоТоварам.Свернуть("Период, Активность, Организация, ВидЦенности, Покупатель, ДоговорКонтрагента, Событие, СчетФактура, СтавкаНДС, ЗаписьДополнительногоЛиста, КорректируемыйПериод, КодВидаОперации, Номенклатура,абс_ЛьготаПоНДС,абс_СубконтоБУ,абс_СубконтоНУ" //АБС ВСТАВКА движения по лготам НДС
		                        + ?(СтруктураШапкиДокумента.ФормироватьПроводки, ", СчетУчетаНДСПоРеализации, СубконтоБУ", "") 
								+ ?((Не ТаблицаПоТоварам.Найти(Истина, "ЗаписьДополнительногоЛиста") = Неопределено) И СтруктураШапкиДокумента.ФормироватьСторнирующиеЗаписиДопЛистовВручную, ", СторнирующаяЗаписьДопЛиста", "")
		                        + ?(абс_ДатаУчетаПоСчетамУчетаВНДСПродажи <> '00010101000000' И Дата >= абс_ДатаУчетаПоСчетамУчетаВНДСПродажи И Не СтруктураШапкиДокумента.ФормироватьПроводки , ", СчетУчетаНДСПоРеализации", "")    //АБС Коломиец 13843								
								, "СуммаБезНДС, НДС");
	КонецЕсли;
	//++ Задача № 10388 Логинчев А.С. 17.05.2012 17:26:14
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01.1"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.02"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("25.01"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("25.02"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("25.03"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("26.01"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("26.02"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("26.03"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01.1"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01.2"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01.3"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.02.1"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.02.2"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.02.3"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02.1"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02.2"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02.3"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.03"));
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.09"));
	
	//-- Задача № 10388 Логинчев А.С.
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу И СтруктураШапкиДокумента.ФормироватьПроводки Тогда
		ПроводкиБУ = Движения.Хозрасчетный;
		//++ Задача № 10388 Логинчев А.С. 17.05.2012 17:33:18
		ПроводкиНУ = Движения.Налоговый;
		//-- Задача № 10388 Логинчев А.С.
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			// Проводки по вычету в случае упрощенного учета НДС
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			Проводка.Содержание  = "Выделен НДС";

			Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтрокаТаблицы.СубконтоБУ);
			//АБС Заявка 1970
			Если ЗначениеЗаполнено(СтрокаТаблицы.абс_СубконтоБУ) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,           СтрокаТаблицы.абс_СубконтоБУ);
			КонецЕсли;
		
			//АБС Заявка 1970
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
            //++ Задача № 10388 Логинчев А.С. 17.05.2012 17:22:36
			Если НЕ  МассивСчетов.Найти(СтрокаТаблицы.СчетУчетаНДСПоРеализации) = Неопределено Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Период",Дата);
				Запрос.УстановитьПараметр("СчетБУ",СтрокаТаблицы.СчетУчетаНДСПоРеализации);
				
				Если ТипЗнч(СтрокаТаблицы.СубконтоБУ) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
					Запрос.УстановитьПараметр("ОтборПоВидуЗатрат", Истина);
					Запрос.УстановитьПараметр("ВидЗатрат", СтрокаТаблицы.СубконтоБУ.ВидЗатрат);
				ИначеЕсли ТипЗнч(СтрокаТаблицы.СубконтоБУ) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
					Запрос.УстановитьПараметр("ОтборПоВидуЗатрат", Истина);
					Запрос.УстановитьПараметр("ВидЗатрат", СтрокаТаблицы.СубконтоБУ.ВидПрочихДоходовИРасходов);					
				Иначе
					Запрос.УстановитьПараметр("ОтборПоВидуЗатрат", Ложь);
					Запрос.УстановитьПараметр("ВидЗатрат", Неопределено);						
				КонецЕсли;
				
				
				//Запрос.УстановитьПараметр("ВидЗатрат",СтрокаТаблицы.СубконтоБУ);
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СоответствиеСчетовБУиНУСрезПоследних.СчетНУ,
				|	СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ
				|ИЗ
				|	РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(
				|			&Период,
				|			СчетБУ = &СчетБУ
				|				И ВЫБОР
				|					КОГДА &ОтборПоВидуЗатрат
				|						ТОГДА ВидЗатратНУ = &ВидЗатрат
				|					ИНАЧЕ Истина
				|				КОНЕЦ) КАК СоответствиеСчетовБУиНУСрезПоследних
				|
				|УПОРЯДОЧИТЬ ПО
				|	СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ УБЫВ";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Проводка = ПроводкиНУ.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтрокаТаблицы.НДС;
					Проводка.Содержание  = "Выделен НДС";
					Проводка.СчетДт = Выборка.СчетНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоБУ);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ?(ЗначениеЗаполнено(СтрокаТаблицы.абс_СубконтоНУ),СтрокаТаблицы.абс_СубконтоНУ,СтрокаТаблицы.абс_СубконтоБУ));

					Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", ДоговорКонтрагента);
					
					Проводка = ПроводкиНУ.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтрокаТаблицы.НДС;
					Проводка.Содержание  = "Выделен НДС";
					Проводка.СчетДт = ПланыСчетов.Налоговый.ВнереализационныеРасходыНеУчитываемые;
					
				Иначе
					ttk_ОбщегоНазначения.СообщитьОбОшибке("По счету БУ " + СтрокаТаблицы.СчетУчетаНДСПоРеализации + " не найден соответствующий счет НУ.", Отказ);					
				КонецЕсли;
				
			КонецЕсли;
			//-- Задача № 10388 Логинчев А.С.
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	
	// АБС ВСТАВКА Движения по льготам
	ПодчиненныйСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный");	
	
	Для Каждого СтрокаТоварУслуга Из ТаблицаПоТоварам Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТоварУслуга.абс_ЛьготаПоНДС) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДвижениеЛьготы = Движения.абс_ЛьготаПоНДС.Добавить();		
		
		ДвижениеЛьготы.Период 				= СтруктураШапкиДокумента.Дата;
		ДвижениеЛьготы.Регистратор 			= СтруктураШапкиДокумента.Ссылка;
		
		ДвижениеЛьготы.Организация			= СтруктураШапкиДокумента.Организация;
		ДвижениеЛьготы.Номенклатура 		= СтрокаТоварУслуга.Номенклатура;
		ДвижениеЛьготы.Контрагент 			= СтруктураШапкиДокумента.Контрагент;
		ДвижениеЛьготы.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
		ДвижениеЛьготы.ВидНДС				= Перечисления.абс_ВидыНДС.НДСПродажи;
		ДвижениеЛьготы.ЛьготаПоНДС			= СтрокаТоварУслуга.абс_ЛьготаПоНДС;
		
		ДвижениеЛьготы.СуммаБезНДС			= СтрокаТоварУслуга.СуммаБезНДС;
		ДвижениеЛьготы.НДС					= СтрокаТоварУслуга.НДС;
		
		ДвижениеЛьготы.СчетФактура 			= ПодчиненныйСФ;
		//++ Задача № 9662 Логинчев А.С.
		ДвижениеЛьготы.СтавкаНДС			= СтрокаТоварУслуга.СтавкаНДС;
		//-- Задача № 9662 Логинчев А.С.		
	КонецЦикла;
	
	Если Движения.абс_ЛьготаПоНДС.Количество() > 0 И НЕ ЗначениеЗаполнено(ПодчиненныйСФ) Тогда
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Введите сч.фактуру и перепроведите документ. В противном случае Отчет ""Льготы по НДС"" покажет некортекные данные");
		
	КонецЕсли;	
	// АБС ВСТАВКА Движения по льготам КОНЕЦ	
	
	
		//АБС закрытие регистра НДС начисленный
			// АБС ВСТАВКА списание НДС с доп. листов
			Если СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста И СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу
				и НЕ ТипЗнч(СтруктураШапкиДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.ОперацияБух") Тогда 
										
			НДСНачисленный = ТаблицаПоТоварам.Скопировать();

			СформироватьДвиженияПоРегиструНДСНачисленныйРасход(СтруктураШапкиДокумента, НДСНачисленный, Отказ);
			
			// АБС ВСТАВКА АБС-Ф Если это по частичной ликвидации, то сформируем сразу же приход
			Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
				Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.абс_ЧастичнаяЛиквидацияОС") 
					или ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.СписаниеОС") //абсо
					Тогда
					СформироватьДвиженияПоРегиструНДСНачисленныйПриход(СтруктураШапкиДокумента, НДСНачисленный, Отказ);
				КонецЕсли;
			КонецЕсли;
			// АБС ВСТАВКА АБС-Ф Если это по частичной ликвидации, то сформируем сразу же приход КОНЕЦ
			
		КонецЕсли;

	//\\АБС закрытие регистра НДС начисленный

	
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		// Прямая запись в книгу покупок
		ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоТоварам,ТаблицаДвижений_НДСЗаписиКнигиПродаж);
		//АБС Коломиец 13843+
		Если абс_ДатаУчетаПоСчетамУчетаВНДСПродажи <> '00010101000000' И Дата >= абс_ДатаУчетаПоСчетамУчетаВНДСПродажи  Тогда
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.ЗагрузитьКолонку(ТаблицаПоТоварам.ВыгрузитьКолонку("СчетУчетаНДСПоРеализации"), "абс_СчетУчета");		
		КонецЕсли;
		//АБС Коломиец 13843-		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоДокументамОплаты, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
		ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж, ТаблицаПоДокументамОплаты);
		
		Для Каждого СтрокаДвижения Из ТаблицаДвижений_НДСЗаписиКнигиПродаж Цикл
			Если Не (СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
					Или СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
					Или СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент) Тогда
				СтрокаДвижения.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Движения.НДСЗаписиКнигиПродаж.мПериод 			= СтруктураШапкиДокумента.Дата;
		Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений	= ТаблицаДвижений_НДСЗаписиКнигиПродаж;
		Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение();
	    Возврат;
		
	КонецЕсли;
	
	СчетОтнесенияНДС = ?(СтруктураШапкиДокумента.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате,
						ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет,
						ПланыСчетов.Хозрасчетный.НДС);
						
	//АБС ВСТАВКА №4964 НАЧАЛО
	Если НЕ ТипЗнч(СтруктураШапкиДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.ОперацияБух") Тогда					
						
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам,, Отказ, СчетОтнесенияНДС);	
		
	КонецЕсли;
	//\\АБС ВСТАВКА №4964 КОНЕЦ
		
КонецПроцедуры // ДвиженияПоРегистрам()

//АБС закрытие регистра НДС начисленный
Процедура СформироватьДвиженияПоРегиструНДСНачисленныйРасход(СтруктураШапкиДокумента, ТаблицаНачисленнногоНДС, Отказ)
	
	УчетНДС.ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента);
	
	СсылкаНаДокумент = СтруктураШапкиДокумента.Ссылка;
	СтруктураДвижений = Новый Структура();
	ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураДвижений, "НДСНачисленный", СсылкаНаДокумент);
	
	ТаблицаДвижений_НДСНачисленный = СтруктураДвижений.НДСНачисленный.ВыгрузитьКолонки();	
	
	//АБС+ Тупиков 15290
	//СФ = ?(ИспользоватьДокументРасчетовКакСчетФактуру, СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
	СФ = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.РасчетныйДокумент),СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
	//АБС- Тупиков
	
	ДатаСобытия = Неопределено;
	Событие     = Неопределено;
	Номенклатура  = Неопределено;
	СчетДоходовБУ  = Неопределено;
	СчетУчетаНДС   = Неопределено;
	СписаниеПартий = Неопределено;
	ВидРегламентнойОперации = Неопределено;
	
	НаборЗаписейСФ = РегистрыНакопления.НДСНачисленный.СоздатьНаборЗаписей();
	НаборЗаписейСФ.Отбор.Регистратор.Установить(СФ);
	НаборЗаписейСФ.Прочитать();
	Если НаборЗаписейСФ.Количество()>0 Тогда
		ДатаСобытия = НаборЗаписейСФ[0].ДатаСобытия;
		Событие = НаборЗаписейСФ[0].Событие;
		Номенклатура = НаборЗаписейСФ[0].Номенклатура;
		СчетДоходовБУ = НаборЗаписейСФ[0].СчетДоходовБУ;
		СчетУчетаНДС = НаборЗаписейСФ[0].СчетУчетаНДС;
		СписаниеПартий = НаборЗаписейСФ[0].СписаниеПартий;
		ВидРегламентнойОперации = НаборЗаписейСФ[0].ВидРегламентнойОперации;
	КонецЕсли;
	
	Для Каждого СтрокаДок Из ТаблицаНачисленнногоНДС Цикл	
	
		СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаДок.ВидЦенности;

		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.абс_Продавец) Тогда
			СтрокаДвижения.Покупатель  = СтруктураШапкиДокумента.абс_Продавец;
		Иначе
			СтрокаДвижения.Покупатель = СтруктураШапкиДокумента.Контрагент;
        КонецЕсли;	
		СтрокаДвижения.СчетФактура = СФ;
		
		// АБС ВСТАВКА АБС-Ф 20111205 
		//Если УчетНДС.ВидыЦенностиНалоговыйАгентПоступление().Найти(СтрокаДок.ВидЦенности) <> Неопределено
		//	И СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
			СтрокаДвижения.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		//КонецЕсли;	
		
		СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
	
			
		
		СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС = СтрокаДок.НДС;
		СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаДвижения.Событие = СтрокаДок.Событие;
		
		// АБС ИЗМЕНЕНО Фролов 20120711
		// Если вид ценности аванс, то вид начисления = НДС с авансов
		Если СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные Тогда
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.НДСсАвансов
		Иначе
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли;
		
		СтрокаДвижения.ДатаСобытия = ДатаСобытия;
				Если ЗначениеЗаполнено(Событие) Тогда
			СтрокаДвижения.Событие     = Событие;
		КонецЕсли;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			СтрокаДвижения.Номенклатура = Номенклатура;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетДоходовБУ) Тогда
			СтрокаДвижения.СчетДоходовБУ = СчетДоходовБУ;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетУчетаНДС) Тогда
			СтрокаДвижения.СчетУчетаНДС = СчетУчетаНДС;
		КонецЕсли;
		Если ЗначениеЗАполнено(СписаниеПартий) Тогда
			СтрокаДвижения.СписаниеПартий = СписаниеПартий;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидРегламентнойОперации) Тогда
			СтрокаДвижения.ВидРегламентнойОперации = ВидРегламентнойОперации;
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСНачисленный.Количество() > 0 Тогда

		СтруктураДвижений.НДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
		СтруктураДвижений.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		СтруктураДвижений.НДСНачисленный.ДобавитьДвижение();
		СтруктураДвижений.НДСНачисленный.Записать(Ложь);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСНачисленныйПриход(СтруктураШапкиДокумента, ТаблицаНачисленнногоНДС, Отказ)
	
	УчетНДС.ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента);
	
	СсылкаНаДокумент = СтруктураШапкиДокумента.Ссылка;
	СтруктураДвижений = Новый Структура();
	ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураДвижений, "НДСНачисленный", СсылкаНаДокумент);
	
	ТаблицаДвижений_НДСНачисленный = СтруктураДвижений.НДСНачисленный.ВыгрузитьКолонки();	
	СФ = ?(ИспользоватьДокументРасчетовКакСчетФактуру, СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
	ДатаСобытия = Неопределено;
	Событие     = Неопределено;
	Номенклатура  = Неопределено;
	СчетДоходовБУ  = Неопределено;
	СчетУчетаНДС   = Неопределено;
	СписаниеПартий = Неопределено;
	ВидРегламентнойОперации = Неопределено;
	
	НаборЗаписейСФ = РегистрыНакопления.НДСНачисленный.СоздатьНаборЗаписей();
	НаборЗаписейСФ.Отбор.Регистратор.Установить(СФ);
	НаборЗаписейСФ.Прочитать();
	Если НаборЗаписейСФ.Количество()>0 Тогда
		ДатаСобытия = НаборЗаписейСФ[0].ДатаСобытия;
		Событие = НаборЗаписейСФ[0].Событие;
		Номенклатура = НаборЗаписейСФ[0].Номенклатура;
		СчетДоходовБУ = НаборЗаписейСФ[0].СчетДоходовБУ;
		СчетУчетаНДС = НаборЗаписейСФ[0].СчетУчетаНДС;
		СписаниеПартий = НаборЗаписейСФ[0].СписаниеПартий;
		ВидРегламентнойОперации = НаборЗаписейСФ[0].ВидРегламентнойОперации;
	КонецЕсли;
	
	Для Каждого СтрокаДок Из ТаблицаНачисленнногоНДС Цикл	
	
		СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаДок.ВидЦенности;

		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.абс_Продавец) Тогда
			СтрокаДвижения.Покупатель  = СтруктураШапкиДокумента.абс_Продавец;
		Иначе
			СтрокаДвижения.Покупатель = СтруктураШапкиДокумента.Контрагент;
        КонецЕсли;	
		СтрокаДвижения.СчетФактура = СФ;
		

		Если УчетНДС.ВидыЦенностиНалоговыйАгентПоступление().Найти(СтрокаДок.ВидЦенности) <> Неопределено
			И СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
			СтрокаДвижения.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		КонецЕсли;	
		
		СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
	
			
		
		СтрокаДвижения.СуммаБезНДС 		= СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС 				= СтрокаДок.НДС;
		СтрокаДвижения.ВидДвижения 		= ВидДвиженияНакопления.Приход;
		СтрокаДвижения.Событие 			= СтрокаДок.Событие;
		
		// АБС ИЗМЕНЕНО Фролов 20120711
		// Если вид ценности аванс, то вид начисления = НДС с авансов
		Если СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные Тогда
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.НДСсАвансов
		Иначе
			СтрокаДвижения.ВидНачисления 	= Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли;
		
		СтрокаДвижения.ДатаСобытия = ДатаСобытия;
				Если ЗначениеЗаполнено(Событие) Тогда
			СтрокаДвижения.Событие     = Событие;
		КонецЕсли;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			СтрокаДвижения.Номенклатура = Номенклатура;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетДоходовБУ) Тогда
			СтрокаДвижения.СчетДоходовБУ = СчетДоходовБУ;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетУчетаНДС) Тогда
			СтрокаДвижения.СчетУчетаНДС = СчетУчетаНДС;
		КонецЕсли;
		Если ЗначениеЗАполнено(СписаниеПартий) Тогда
			СтрокаДвижения.СписаниеПартий = СписаниеПартий;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидРегламентнойОперации) Тогда
			СтрокаДвижения.ВидРегламентнойОперации = ВидРегламентнойОперации;
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСНачисленный.Количество() > 0 Тогда

		СтруктураДвижений.НДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
		СтруктураДвижений.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		СтруктураДвижений.НДСНачисленный.ДобавитьДвижение();
		СтруктураДвижений.НДСНачисленный.Записать(Ложь);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураДвижений,ИмяРегистра,СсылкаНаДокумент)
	Если не СтруктураДвижений.Свойство(ИмяРегистра) Тогда
		СтруктураДвижений.Вставить(ИмяРегистра,РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей());
		СтруктураДвижений[ИмяРегистра].Отбор.Регистратор.Установить(СсылкаНаДокумент);
	КонецЕсли;
КонецПроцедуры

//\\АБС закрытие регистра НДс начисленный

Процедура ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж, ТаблицаПоДокументамОплаты)
	
	Если СтруктураШапкиДокумента.ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Индексы.Добавить("ЗаписьДополнительногоЛиста");
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Найти(Истина, "ЗаписьДополнительногоЛиста") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Найти("СторнирующаяЗаписьДопЛиста") = Неопределено Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("СторнирующаяЗаписьДопЛиста", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 

	СвернутаяТаблицаЗаписейДопЛиста = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Скопировать();
	Для каждого ТекущаяСтрока Из СвернутаяТаблицаЗаписейДопЛиста Цикл
		// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
		Если Не (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0)
			Тогда
			ТекущаяСтрока.СтавкаНДС = Неопределено;
		КонецЕсли; 
		// Авансы и налоговый агент (комитент) отрабатываются с учетом договора (на каждуй
		// договор отдельный счет-фактура или отдельное лист декларации)
		Если Не (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент)
			Тогда
			// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
			ТекущаяСтрока.ДоговорКонтрагента = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
	СвернутаяТаблицаЗаписейДопЛиста.Свернуть("СчетФактура,СтавкаНДС,ДоговорКонтрагента,ЗаписьДополнительногоЛиста,КорректируемыйПериод","СуммаБезНДС,НДС");
	
	//СвернутаяТаблицаЗаписейДопЛиста.Свернуть("СчетФактура,ЗаписьДополнительногоЛиста,КорректируемыйПериод","СуммаБезНДС,НДС");
	
	СвернутаяТаблицаЗаписейДопЛиста.Индексы.Добавить("ЗаписьДополнительногоЛиста");
	СтрокиДопЛистов = СвернутаяТаблицаЗаписейДопЛиста.НайтиСтроки(Новый Структура("ЗаписьДополнительногоЛиста", Истина));
	
	ОтработанныеСФпоПериодам = Новый ТаблицаЗначений();
	ОтработанныеСФпоПериодам.Колонки.Добавить("СчетФактура");
	ОтработанныеСФпоПериодам.Колонки.Добавить("НалоговыйПериод");
	ОтработанныеСФпоПериодам.Колонки.Добавить("СтавкаНДС");
	ОтработанныеСФпоПериодам.Колонки.Добавить("ДоговорКонтрагента");
	ОтработанныеСФпоПериодам.Индексы.Добавить("СчетФактура,НалоговыйПериод");
	
	КэшПараметровУП = Новый Соответствие;
	ПараметрыУПКорректируемогоПериода = Неопределено;
	
	Для Каждого СтрокаДопЛиста Из СтрокиДопЛистов Цикл
		
		НДСНалоговыйПериодДополнительногоЛиста = УчетНДС.ПолучитьУПНДСНалоговыйПериод(СтруктураШапкиДокумента.Организация, СтрокаДопЛиста.КорректируемыйПериод, КэшПараметровУП[НачалоМесяца(СтрокаДопЛиста.КорректируемыйПериод)]);
		
		НачалоНалоговогоПериодаКорректировки = ?(НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал, НачалоКвартала(СтрокаДопЛиста.КорректируемыйПериод),НачалоМесяца(СтрокаДопЛиста.КорректируемыйПериод));
		ОтборОтработанныхЗаписей = Новый Структура("СчетФактура,НалоговыйПериод",СтрокаДопЛиста.СчетФактура,НачалоНалоговогоПериодаКорректировки);
		Если ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС) Тогда
			ОтборОтработанныхЗаписей.Вставить("СтавкаНДС", СтрокаДопЛиста.СтавкаНДС);
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента) Тогда
			ОтборОтработанныхЗаписей.Вставить("ДоговорКонтрагента", СтрокаДопЛиста.ДоговорКонтрагента);
		КонецЕсли; 
		
		Если не (ОтработанныеСФпоПериодам.НайтиСтроки(ОтборОтработанныхЗаписей).Количество() = 0) Тогда
			// СФ по данному налоговому периоду уже отработан
			Продолжить;
		Иначе
			НоваяЗапись = ОтработанныеСФпоПериодам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ОтборОтработанныхЗаписей);
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Организация,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
		|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот * -1 КАК СуммаБезНДССторно,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот * -1 КАК НДССторно,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС,
		|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаГраница,
		|			Месяц,
		|			СчетФактура = &СчетФактура
		|				И ВЫБОР
		|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ДоговорКонтрагента = &ДоговорКонтрагента
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &СтавкаНДС = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ СтавкаНДС = &СтавкаНДС
		|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	((НЕ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста)
		|				И НДСЗаписиКнигиПродажОбороты.Период = &НачалоПериода
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста
		|				И (НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ)))";
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоНалоговогоПериодаКорректировки);
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СчетФактура", СтрокаДопЛиста.СчетФактура);
		Запрос.УстановитьПараметр("СтавкаНДС", ?(ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС), СтрокаДопЛиста.СтавкаНДС, Неопределено));
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента), СтрокаДопЛиста.ДоговорКонтрагента, Неопределено));
		
		Если НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал Тогда
			Запрос.Текст = СтрЗаменить(Нрег(Запрос.Текст),"месяц","квартал");
		КонецЕсли; 
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			ТаблицаЗаписей = Результат.Выгрузить();
			
			ТаблицаЗаписей.Колонки.Добавить("ЗаписьДополнительногоЛиста");
			ТаблицаЗаписей.Колонки.Добавить("КорректируемыйПериод");
			ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия");
			ТаблицаЗаписей.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "ЗаписьДополнительногоЛиста,СторнирующаяЗаписьДопЛиста");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.КорректируемыйПериод, "КорректируемыйПериод");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаСобытия");
			
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДС.Имя = "СуммаБезНДССторно";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДС.Имя = "НДССторно";
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Ложь, "СторнирующаяЗаписьДопЛиста");
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДССторно.Имя = "СуммаБезНДС";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДССторно.Имя = "НДС";
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
		КонецЕсли;
		
	КонецЦикла;
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Найти(Истина, "СторнирующаяЗаписьДопЛиста") <> Неопределено Тогда
		КоличествоСтрок = ТаблицаПоДокументамОплаты.Количество();
		Для К = 0 По КоличествоСтрок - 1 Цикл
			НоваяСтрока = ТаблицаПоДокументамОплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаПоДокументамОплаты[К]);
			НоваяСтрока.СторнирующаяЗаписьДопЛиста = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация", "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора", "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ТипЦен"              , "ЦенаВключаетНДС"      , "ЦенаВключаетНДС");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
 	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты) Экспорт
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"	, "Номенклатура");
	СтруктураПолей.Вставить("ВидЦенности"	, "ВидЦенности");
	СтруктураПолей.Вставить("Количество"	, "Количество");
	СтруктураПолей.Вставить("Цена"			, "Цена");
	СтруктураПолей.Вставить("Сумма"			, "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"		, "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"			, "СуммаНДС");
	СтруктураПолей.Вставить("СчетУчетаБУ"	, "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетДоходовБУ" , "СчетДоходовБУ");
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации"	, "СчетУчетаНДСПоРеализации");
	СтруктураПолей.Вставить("СубконтоБУ"	, "СубконтоБУ");
	СтруктураПолей.Вставить("СторнирующаяЗаписьДопЛиста", "СторнирующаяЗаписьДопЛиста");
	СтруктураПолей.Вставить("Событие", 		"Событие");
	// АБС ВСТАВКА Движения по льготам
	СтруктураПолей.Вставить("абс_ЛьготаПоНДС", "абс_ЛьготаПоНДС");
    	// АБС ВСТАВКА Движения по льготам
	СтруктураПолей.Вставить("абс_СубконтоБУ", "абс_СубконтоБУ");
	СтруктураПолей.Вставить("абс_СубконтоНУ", "абс_СубконтоНУ");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ТоварыИУслуги", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
   // АБС ВСТАВКА в случае доп. листа закрываем НДС начисленный 
	Если Не СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу ИЛИ (СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу И СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста) Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Ложь, мВалютаРегламентированногоУчета);
	КонецЕсли;
		
	ТаблицаПоДокументамОплаты = Неопределено;
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		СтруктураПолей.Очистить();
		СтруктураПолей.Вставить("ДокументОплаты", 	"ДокументОплаты");
		СтруктураПолей.Вставить("ДатаОплаты", 		"ДатаОплаты");
		РезультатЗапросаПоДокументамОплаты = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОплаты", СтруктураПолей);
		ТаблицаПоДокументамОплаты = ПодготовитьТаблицуДокументовОплаты(РезультатЗапросаПоДокументамОплаты, СтруктураШапкиДокумента);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ТоварыИУслуги.Итог("Сумма") + ?(Не СуммаВключаетНДС, ТоварыИУслуги.Итог("СуммаНДС"), 0);
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли; 

	Если Не ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		
		УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);

		УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
		
	КонецЕсли;
	
	Если Не ПрямаяЗаписьВКнигу И ФормироватьПроводки Тогда
		ФормироватьПроводки = Ложь;
	КонецЕсли;

	мУдалятьДвижения = Не ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаЗаполнения(Основание)
	
	Если Не (ЗначениеЗаполнено(Основание)) Тогда
		//И ЭтотОбъект.Метаданные().Реквизиты.РасчетныйДокумент.Тип.СодержитТип(ТипЗнч(Основание))) Тогда //АБС Заявка 2117 
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	РасчетныйДокумент = Основание;

	//ИспользоватьДокументРасчетовКакСчетФактуру = Истина;
	
	ЗаполнитьПоРасчетномуДокументу(Ложь);
	
	//АБС Заявка 2117 
	
	////АБС заявка 1970
	//Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке") Тогда
	//	ФормироватьПроводки = Истина;
	//	ПрямаяЗаписьВКнигу = Истина;
	//	Контрагент = Основание.абс_Контрагент;
	//	ДоговорКонтрагента = Основание.абс_ДоговорКонтрагента;
	//КонецЕсли;
	//
	////АБС заявка 1970
	
	ДанныеЗаполнения = Основание;
	
    //АБС ВСТАВКА №4964 НАЧАЛО
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОперацияБух") Тогда
		ИспользоватьДокументРасчетовКакСчетФактуру = Ложь;
		ДанныеЗаполненияТЧ = ПолучитьДанныеДокумента(ДанныеЗаполнения);		
		Если ДанныеЗаполненияТЧ.Количество() > 0 Тогда
			Контрагент = ДанныеЗаполненияТЧ[0].Контрагент;
			ДоговорКонтрагента = ДанныеЗаполненияТЧ[0].Договор;
		//	Для Каждого ТекСтрокаМатериалы Из ДанныеЗаполненияТЧ Цикл
		//		НоваяСтрока = ТоварыИУслуги.Добавить();
		//		НоваяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		//		НоваяСтрока.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
		//		НоваяСтрока.Количество = 1;
		//		НоваяСтрока.Коэффициент = 1;
		//		//НоваяСтрока.Номенклатура = ТекСтрокаМатериалы.Номенклатура;
		//		//НоваяСтрока.СчетУчетаНДСПоРеализации = ТекСтрокаМатериалы.Счет;
		//		НоваяСтрока.СчетДоходовБУ = ТекСтрокаМатериалы.СчетДт;
		//		НоваяСтрока.СчетУчетаБУ = ТекСтрокаМатериалы.СчетДт;
		//		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		//		//НоваяСтрока.СуммаНДС = ТекСтрокаМатериалы.Сумма * 18 / 100;  
		//		НоваяСтрока.Сумма = ТекСтрокаМатериалы.Сумма;			
		//		НоваяСтрока.Цена = ТекСтрокаМатериалы.Сумма;   
		//		//НоваяСтрока.СубконтоБУ = ТекСтрокаМатериалы.Субконто;
		//	КонецЦикла; 
		КонецЕсли;		
	 КонецЕсли;	
	 //\\АБС ВСТАВКА №4964 КОНЕЦ
		
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке") Тогда
		
		абс_БюджетнаяСтатья = ДанныеЗаполнения.абс_БюджетнаяСтатья;
		абс_КВ = ДанныеЗаполнения.абс_КВ;
		абс_ТипКонтрагента = ДанныеЗаполнения.абс_ТипКонтрагента;
		абс_ТипРасхода = ДанныеЗаполнения.абс_ТипРасхода;
		абс_ТипСети = ДанныеЗаполнения.абс_ТипСети;
		абс_ТЭО = ДанныеЗаполнения.абс_ТЭО;
		абс_ЦФО = ДанныеЗаполнения.абс_ЦФО;
		абс_ЦФУ = ДанныеЗаполнения.абс_ЦФУ;
		ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
		ДатаВходящегоДокумента = ДанныеЗаполнения.ДатаВходящегоДокумента;
		ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Контрагент = ДанныеЗаполнения.Контрагент;
		КратностьВзаиморасчетов = ДанныеЗаполнения.КратностьВзаиморасчетов;
		КурсВзаиморасчетов = ДанныеЗаполнения.КурсВзаиморасчетов;
		НомерВходящегоДокумента = ДанныеЗаполнения.НомерВходящегоДокумента;
		Организация = ДанныеЗаполнения.Организация;
		РасчетныйДокумент = ДанныеЗаполнения.Ссылка;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		ФормироватьПроводки = Истина;
		ПрямаяЗаписьВКнигу = Истина;
		ИспользоватьДокументРасчетовКакСчетФактуру = Ложь;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		
		Комментарий = ДанныеЗаполнения.Комментарий;
		Организация = ДанныеЗаполнения.Организация;
		ФормироватьПроводки = Истина;
		ПрямаяЗаписьВКнигу = Истина;
		РасчетныйДокумент = Ссылка;
		ИспользоватьДокументРасчетовКакСчетФактуру = Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке")
	 Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТребованиеНакладная")Тогда
	 
	 		ДанныеЗаполненияТЧ = ПолучитьСуммыСписанияМатериалов(ДанныеЗаполнения);
			
			Для Каждого ТекСтрокаМатериалы Из ДанныеЗаполненияТЧ Цикл
				НоваяСтрока = ТоварыИУслуги.Добавить();
				НоваяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.Материалы;
				НоваяСтрока.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаМатериалы.ЕдиницаИзмерения;
				НоваяСтрока.Количество = ТекСтрокаМатериалы.Количество;
				НоваяСтрока.Коэффициент = ТекСтрокаМатериалы.Коэффициент;
				НоваяСтрока.Номенклатура = ТекСтрокаМатериалы.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаМатериалы.СерияНоменклатуры;
				НоваяСтрока.СчетУчетаНДСПоРеализации = ТекСтрокаМатериалы.Счет;
				НоваяСтрока.СчетДоходовБУ = ТекСтрокаМатериалы.Счет;
				НоваяСтрока.СчетУчетаБУ = ТекСтрокаМатериалы.Счет;
				НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаМатериалы.ХарактеристикаНоменклатуры;
				НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				НоваяСтрока.СуммаНДС = ТекСтрокаМатериалы.Сумма * 18 / 100;  
				НоваяСтрока.Сумма = ТекСтрокаМатериалы.Сумма;			
				НоваяСтрока.Цена = ТекСтрокаМатериалы.Сумма
				/ ?(ТекСтрокаМатериалы.Количество <> 0, ТекСтрокаМатериалы.Количество, 1);   
				НоваяСтрока.СубконтоБУ = ТекСтрокаМатериалы.Субконто;
			КонецЦикла;                                  
		
	КонецЕсли;

	//АБС Заявка 2117
	
	//АБС ВСТАВКА №8385 НАЧАЛО
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		Если НЕ ДанныеЗаполнения.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
			Возврат;
		КонецЕсли;	
		
		СуммаВключаетНДС    = Истина;
		ПрямаяЗаписьВКнигу  = Истина;
		ФормироватьПроводки = Ложь;
		ИспользоватьДокументРасчетовКакСчетФактуру = Истина;
		
		ТоварыИУслуги.Очистить();
		НоваяСтрока = ТоварыИУслуги.Добавить();
		НоваяСтрока.ВидЦенности = ?(ДанныеЗаполнения.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс, 
																	   Перечисления.ВидыЦенностей.АвансыПолученные,
																	   Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
		НоваяСтрока.Количество  = 1;
		НоваяСтрока.Коэффициент = 1;
		НоваяСтрока.Цена        = ДанныеЗаполнения.СуммаДокумента;
		НоваяСтрока.Сумма       = ДанныеЗаполнения.СуммаДокумента;
		НоваяСтрока.СтавкаНДС   = ДанныеЗаполнения.СтавкаНДС;
		НоваяСтрока.СуммаНДС    = ДанныеЗаполнения.СуммаНДСДокумента;		
		НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		
	КонецЕсли;	
	//\\АБС ВСТАВКА №8385 КОНЕЦ	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты;
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	ДокументСоздан_НО_НДС = (ЗначениеЗаполнено(РасчетныйДокумент)) и (ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС"));

	Если ДокументСоздан_НО_НДС Тогда
		// Проверка и дополнительная обработка не требуются
		Возврат;
	КонецЕсли; 
	
	//АБС ВСТАВКА №4964 НАЧАЛО
	Если ЗначениеЗаполнено(РасчетныйДокумент)
		и ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ОперацияБух")
		и ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		//Не проводим (иначе в регистре НДС Продажи не заполнится поле "Счет-Фактура")
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	//\\АБС ВСТАВКА №4964 КОНЕЦ
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		ПроверитьЗаполнениеТабличнойЧастиДокументыОплаты(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты, Отказ, Заголовок);
		УчетНДС.СинхронизацияПроведенияУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Отказ)
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()


Процедура ОбработкаУдаленияПроведения(Отказ)

	УчетНДС.СинхронизацияПроведенияУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Отказ);
КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
															
КонецПроцедуры

//АБС ВСТАВКА №4964 НАЧАЛО
Функция ПолучитьДанныеДокумента(ДанныеЗаполнения)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("СчетДт");
	Таблица.Колонки.Добавить("Контрагент");
	Таблица.Колонки.Добавить("Договор");
	Таблица.Колонки.Добавить("СчетКт");
	Таблица.Колонки.Добавить("Субконто1");
	Таблица.Колонки.Добавить("Субконто2");
	Таблица.Колонки.Добавить("Сумма");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Счет,
	               |	ХозрасчетныйОбороты.Субконто1,
	               |	ХозрасчетныйОбороты.Субконто2,
	               |	ХозрасчетныйОбороты.КорСчет,
	               |	ХозрасчетныйОбороты.КорСубконто1,
	               |	ХозрасчетныйОбороты.КорСубконто2,
	               |	ХозрасчетныйОбороты.СуммаОборот КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, Счет В иерархии (&Счет), , , КорСчет В иерархии (&КорСчет), ) КАК ХозрасчетныйОбороты
	               |ГДЕ
	               |	ХозрасчетныйОбороты.Регистратор = &Регистратор";
				   
	Запрос.УстановитьПараметр("Счет",ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	Запрос.УстановитьПараметр("КорСчет",ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Регистратор",ДанныеЗаполнения);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Строка = Таблица.Добавить();
		Строка.СчетДт     = Результат.Счет;
		Строка.Контрагент = Результат.Субконто1;
		Строка.Договор    = Результат.Субконто2;
		Строка.СчетКт     = Результат.КорСчет;
		Строка.Субконто1  = Результат.КорСубконто1;
		Строка.Субконто2  = Результат.КорСубконто2;
		Строка.Сумма      = Результат.Сумма;
	КонецЦикла;	
		
	Возврат Таблица;
	
КонецФункции
//\\АБС ВСТАВКА №4964 КОНЕЦ

//АБС Заявка 2117 
Функция ПолучитьСуммыСписанияМатериалов(ДанныеЗаполнения)
	
	ЗапросТекст = "ВЫБРАТЬ
	              |	ТребованиеНакладная.Номенклатура,
	              |	ТребованиеНакладная.ЕдиницаИзмерения,
	              |	ТребованиеНакладная.Характеристика,
	              |	ТребованиеНакладная.Серия,
	              |	ТребованиеНакладная.Количество,
	              |	ТребованиеНакладная.СчетЗатрат КАК Счет,
	              |	ТребованиеНакладная.Коэффициент,
	              |	ТребованиеНакладная.НомерСтроки,
	              |	ТребованиеНакладная.Субконто КАК Субконто
	              |ПОМЕСТИТЬ ТЧ
	              |ИЗ
	              |	(ВЫБРАТЬ
	              |		ТребованиеНакладная.Номенклатура КАК Номенклатура,
	              |		ТребованиеНакладная.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	              |		ТребованиеНакладная.Коэффициент КАК Коэффициент,
	              |		ТребованиеНакладная.СчетЗатрат КАК СчетЗатрат,
	              |		ТребованиеНакладная.ХарактеристикаНоменклатуры КАК Характеристика,
	              |		ТребованиеНакладная.СерияНоменклатуры КАК Серия,
	              |		СУММА(ТребованиеНакладная.Количество) КАК Количество,
	              |		МИНИМУМ(ТребованиеНакладная.НомерСтроки) КАК НомерСтроки,
	              |		ТребованиеНакладная.Субконто1 КАК Субконто
	              |	ИЗ
	              |		Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладная
	              |	ГДЕ
	              |		ТребованиеНакладная.Ссылка = &ТекущийДокумент
	              |	
	              |	СГРУППИРОВАТЬ ПО
	              |		ТребованиеНакладная.Номенклатура,
	              |		ТребованиеНакладная.ЕдиницаИзмерения,
	              |		ТребованиеНакладная.Коэффициент,
	              |		ТребованиеНакладная.ХарактеристикаНоменклатуры,
	              |		ТребованиеНакладная.СерияНоменклатуры,
	              |		ТребованиеНакладная.СчетЗатрат,
	              |		ТребованиеНакладная.Субконто1) КАК ТребованиеНакладная
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ТЧ.Номенклатура,
	              |	ТЧ.ЕдиницаИзмерения,
	              |	ТЧ.Характеристика КАК ХарактеристикаНоменклатуры,
	              |	ТЧ.Серия КАК СерияНоменклатуры,
	              |	ТЧ.Количество,
	              |	ТЧ.Счет,
	              |	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаСебестоимостиОбороты.Стоимость, 0) * ТЧ.Количество * ТЧ.Коэффициент / ЕСТЬNULL(ТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1) / ЕСТЬNULL(ТаблицаСебестоимостиОбороты.Количество, 1) КАК ЧИСЛО(15, 2)) КАК Сумма,
	              |	ТЧ.Коэффициент,
	              |	ТЧ.Субконто
	              |ИЗ
	              |	ТЧ КАК ТЧ
	              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              |			ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Регистратор КАК Регистратор,
	              |			ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура КАК Номенклатура,
	              |			ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	              |			ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СерияНоменклатуры КАК СерияНоменклатуры,
	              |			СУММА(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьРасход) КАК Стоимость,
	              |			СУММА(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоРасход) КАК Количество
	              |		ИЗ
	              |			РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Обороты(, , Регистратор, ) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОбороты
	              |		
	              |		СГРУППИРОВАТЬ ПО
	              |			ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура,
	              |			ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ХарактеристикаНоменклатуры,
	              |			ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Регистратор,
	              |			ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СерияНоменклатуры) КАК ТаблицаСебестоимостиОбороты
	              |		ПО (ТЧ.Характеристика = ТаблицаСебестоимостиОбороты.ХарактеристикаНоменклатуры
	              |				ИЛИ ТаблицаСебестоимостиОбороты.ХарактеристикаНоменклатуры = ""Не используется"")
	              |			И (ТЧ.Серия = ТаблицаСебестоимостиОбороты.СерияНоменклатуры
	              |				ИЛИ ТаблицаСебестоимостиОбороты.СерияНоменклатуры = ""Не используется"")
	              |			И (ТаблицаСебестоимостиОбороты.Регистратор = &Регистратор)
	              |			И ТЧ.Номенклатура = ТаблицаСебестоимостиОбороты.Номенклатура
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	ТЧ.НомерСтроки";
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке") Тогда
		ЗапросТекст = СтрЗаменить(ЗапросТекст,"Материалы", "ИспользованныеМатериалы");
		ЗапросТекст = СтрЗаменить(ЗапросТекст,"ТребованиеНакладная.Субконто1", "ПолучениеУслугПоПереработке.Ссылка.абс_Контрагент"); 
		ЗапросТекст = СтрЗаменить(ЗапросТекст,"ТребованиеНакладная", "ПолучениеУслугПоПереработке");
		ЗапросТекст = СтрЗаменить(ЗапросТекст,"ПартииТоваровНаСкладах", "ПартииТоваровПереданные");
	КонецЕсли;
	
	СтруктраПараметров = Новый Структура();
	СтруктраПараметров.Вставить("ТекущийДокумент", ДанныеЗаполнения);
	СтруктраПараметров.Вставить("Регистратор", ДанныеЗаполнения);
	СтруктраПараметров.Вставить("НачГраница", Новый Граница(ДанныеЗаполнения.Дата, ВидГраницы.Включая));
		
	ТаблицаЗатрат = УправлениеЗапасами.ПолучитьТаблицуЗатратДляПечатиИЗаполненияДокументов(Ссылка, ЗапросТекст, СтруктраПараметров);
	
	Возврат ТаблицаЗатрат;	
	
КонецФункции
//АБС Заявка 2117 

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
абс_ДатаУчетаПоСчетамУчетаВНДСПродажи = Константы.абс_ДатаУчетаПоСчетамУчетаВНДСПродажи.Получить();  //АБС Коломиец 13843