Перем мУдалятьДвижения;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мНадписьПредоплата;

Перем мОбновлятьРеквизитыПриЗаписи Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактурыСписка, ЭтоИсправление = Ложь, врДокументОснование = Неопределено) Экспорт
	
	СписокТипов = Новый Массив;
	
	Если ВидСчетаФактурыСписка = Перечисления.НДСВидСчетаФактуры.Корректировочный 
		ИЛИ ЭтоИсправление И ВидСчетаФактурыСписка = Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		
		// АБС ВСТАВКА Фролов 20120714
		// Вводим исправленную СФ на основании отражения начисления НДС
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС"));
        // АБС ВСТАВКА Фролов 20120714 КОНЕЦ
		
		Возврат СписокТипов;
	КонецЕсли;
		
	СписокТипов.Добавить(Тип("ДокументСсылка.АккредитивПолученный"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"));
// {{KM WARE Семенов И.С. Заявка №32103 24.07.2015 начало    
// закоментировал:
// ПО ВИДУ НАДО ПОНИМАТЬ!!!! а не на все документы кидать!!!

	////АБС ВСТАВКА №44736 НАЧАЛО «16 июня 2014 г.», Пополитов
	
	// {{KM WARE Агапов Н.А. Заявка №34638 13.10.2015 начало
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	// }}KM WARE Агапов Н.А. Заявка №34638 13.10.2015 окончание
	
	//СписокТипов.Добавить(Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС"));
	////\\АБС ВСТАВКА №44736 КОНЕЦ 		
// }}KM WARE Семенов И.С. Заявка №32103 24.07.2015 окончание
	
	Если ВидСчетаФактурыСписка = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу Тогда
		// Список типов не требует корректировки
		
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		Если не врДокументОснование = Неопределено
			и ТипЗнч(врДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации")  
			и врДокументОснование.ПризнаватьЗачитыватьАванс Тогда
			//АБС+ Тупиков 13209 
			СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
			//АБС- Тупиков
		КонецЕсли;
		
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
		// Типы документов оплаты исключаются из состава доступных типов.
		// Дополним типами, не выбираемыми вручную
		СписокТипов.Очистить();
		СписокТипов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатковНДС"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС"));
		СписокТипов.Добавить(Тип("ДокументСсылка.МодернизацияОС"));
		СписокТипов.Добавить(Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом"));
		
// {{KM WARE Семенов И.С. Заявка №32103 24.07.2015 начало    
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС"));
// }}KM WARE Семенов И.С. Заявка №32103 24.07.2015 окончание
		
		СписокТипов = Новый ОписаниеТипов(Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);
		СписокТипов = СписокТипов.Типы();
		
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда 
		СписокТипов.Очистить();
		СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
		СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеПолученное"));
		СписокТипов.Добавить(Тип("ДокументСсылка.АккредитивПереданный"));
// +++ввв 22.06.2017 г.
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
// ---ввв 22.06.2017 г.
		
	КонецЕсли;
		
	Возврат СписокТипов;
	
КонецФункции

Процедура УстановитьКодВидаОперации(КодВидаОперацииОснования = Неопределено) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Если ВерсияПостановления <> 2 Тогда
		Возврат;
	КонецЕсли;
	
	// {{ТТК Сладков А. Заявка №7735159  28.06.2016 начало
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);
	// {{ТТК Сладков А. Заявка №7735159  28.06.2016 окончание
	
	Если Исправление ИЛИ ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда		
		
		//Если НЕ КодВидаОперацииОснования = Неопределено Тогда
		//	КодВидаОперации = КодВидаОперацииОснования;
		//	Возврат;
		//КонецЕсли;	
		
		// {{ТТК Сладков А. Заявка №7735159  28.06.2016 начало
		Если ЗначениеЗаполнено(КодВидаОперацииОснования) Тогда
			КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(КодВидаОперацииОснования, ВерсияКодовВидовОпераций);
			Возврат;
		КонецЕсли;
		// {{ТТК Сладков А. Заявка №7735159  28.06.2016 окончание

	КонецЕсли;
	
	// {{ТТК Сладков А. Заявка №7735159  13.09.2016 начало
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
		
		Если ВерсияКодовВидовОпераций = 1 Тогда
			КодВидаОперацииНаУменьшение = "";
		ИначеЕсли ВерсияКодовВидовОпераций = 2 Тогда
			КодВидаОперацииНаУменьшение = "18";
		Иначе
			КодВидаОперацииНаУменьшение = ?(СводныйКорректировочный, "01", "18");
		КонецЕсли;

	// {{ТТК Сладков А. Заявка №7735159  13.09.2016 окончание			
	ИначеЕсли ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		
		//АБС-Пр2 12286+
		Если ДоговорКонтрагента.абс_ВидДоговора = Справочники.абс_ПредметДоговораГК.АгентскийДоговор Тогда			
			КодВидаОперации = "05";			
		Иначе	//АБС-Пр2 12286-		
		КодВидаОперации = "02";
	    КонецЕсли;
	
	ИначеЕсли ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			КодВидаОперации = "06";			
		КонецЕсли;		
		
	// {{ТТК Сладков А. Заявка №7735159  28.06.2016 начало	
	ИначеЕсли ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу Тогда
		
		КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "09", "01");	
	// {{ТТК Сладков А. Заявка №7735159  28.06.2016 окончание

		
	ИначеЕсли ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда 
		
		МассивДокументовРеализации = Новый Массив;
		Для Каждого СтрокаТабличнойЧасти ИЗ ДокументыОснования Цикл
			
		
			// {{ТТК Сладков А. Заявка №7735159  28.06.2016 начало	
			
			//КодВидаОперации = "";
			//Если ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			//	КодВидаОперации = "03";
			//ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			//	КодВидаОперации = "04";	
			//ИначеЕсли ДоговорКонтрагента.абс_ВидДоговора = Справочники.абс_ПредметДоговораГК.АгентскийДоговор Тогда   	//АБС-Пр2 12286+		
			//	КодВидаОперации = "04";		
			//ИначеЕсли НайтиОбъектыСтроительстваВДокументе(СтрокаТабличнойЧасти.ДокументОснование) Тогда
			//	КодВидаОперации = "13";
			////АБС-Пр2 12286-				
			//ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			//	МассивДокументовРеализации.Добавить(СтрокаТабличнойЧасти.ДокументОснование);
			//ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
			//	МассивДокументовРеализации.Очистить();
			//	КодВидаОперации = "08";
			//	Прервать;
			//	
			//Иначе
			//	КодВидаОперации = "01";
			//КонецЕсли;
			
			
			ТипОснования = ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование);
			
			Если ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")
				И ВерсияКодовВидовОпераций > 1 Тогда
				// Код операции указывается в документе
				КодВидаОперацииИзДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаТабличнойЧасти.ДокументОснование, "КодВидаОперации");
				КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(КодВидаОперацииИзДокумента, ВерсияКодовВидовОпераций);
				Прервать;
			ИначеЕсли ВерсияКодовВидовОпераций = 3 Тогда
				// По умолчанию код "01", но необходимо проверить случай "смешанной" реализации (код 15),
				// которая может быть оформлена документом "Реализация товаров услуг".
				КодВидаОперации = "01";
				
				Если НайтиОбъектыСтроительстваВДокументе(СтрокаТабличнойЧасти.ДокументОснование) Тогда
					КодВидаОперации = "13";
				ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					МассивДокументовРеализации.Добавить(СтрокаТабличнойЧасти.ДокументОснование);
				ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
					ДокументОтгрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						СтрокаТабличнойЧасти.ДокументОснование, "ДокументОтгрузки");
					Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						МассивДокументовРеализации.Добавить(ДокументОтгрузки);
					КонецЕсли;
				Иначе
					МассивДокументовРеализации.Очистить();
					Прервать;
				КонецЕсли;
				
				// Коды видов операций до 1 июля 2016 года
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				КодВидаОперации = "03";
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				КодВидаОперации = "04";
			ИначеЕсли ДоговорКонтрагента.абс_ВидДоговора = Справочники.абс_ПредметДоговораГК.АгентскийДоговор Тогда   	//АБС-Пр2 12286+		
				КодВидаОперации = "04";		
			ИначеЕсли НайтиОбъектыСтроительстваВДокументе(СтрокаТабличнойЧасти.ДокументОснование) Тогда
				КодВидаОперации = "13";	
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				МассивДокументовРеализации.Добавить(СтрокаТабличнойЧасти.ДокументОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
				ДокументОтгрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаТабличнойЧасти.ДокументОснование, "ДокументОтгрузки");
				Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					МассивДокументовРеализации.Добавить(ДокументОтгрузки);
				КонецЕсли;
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
				МассивДокументовРеализации.Очистить();
				КодВидаОперации = "08";
				Прервать;
			КонецЕсли;
			
			// {{ТТК Сладков А. Заявка №7735159  28.06.2016 окончание

			
		КонецЦикла;
		
		Если МассивДокументовРеализации.Количество() > 0 Тогда
			
			СчетаУчетаКомиссионногоТовара = Новый Массив;
			СчетаУчетаКомиссионногоТовара.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
			СчетаУчетаКомиссионногоТовара.Добавить(ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументыОснования", МассивДокументовРеализации);
			Запрос.УстановитьПараметр("СчетаУчетаКомиссионногоТовара", СчетаУчетаКомиссионногоТовара);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслугТовары.ПринадлежностьНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ПринадлежностьНоменклатуры.Принятый)
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ЕстьКомиссионныеТоварыИУслуги,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслугТовары.ПринадлежностьНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ПринадлежностьНоменклатуры.Принятый)
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ЕстьСобственныеТоварыИУслуги
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка В(&ДокументыОснования)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугУслуги.Ссылка,
			|	0,
			|	1
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
			|ГДЕ
			|	РеализацияТоваровУслугУслуги.Ссылка В(&ДокументыОснования)
			|ИТОГИ
			|	СУММА(ЕстьКомиссионныеТоварыИУслуги),
			|	СУММА(ЕстьСобственныеТоварыИУслуги)
			|ПО
			|	Ссылка";

			КодВидаОперации = "";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() Тогда
					
					
					// {{ТТК Сладков А. Заявка №7735159  28.06.2016 начало
					//Если Выборка.ЕстьСобственныеТоварыИУслуги > 0 Тогда
					//	Если Найти(КодВидаОперации, "01") = 0 Тогда
					//		КодВидаОперации = КодВидаОперации + ?(КодВидаОперации = "","",";") + "01";
					//	КонецЕсли;
					//КонецЕсли;
					//Если Выборка.ЕстьКомиссионныеТоварыИУслуги > 0 Тогда
					//	Если Найти(КодВидаОперации, "04") = 0 Тогда
					//		КодВидаОперации = КодВидаОперации + ?(КодВидаОперации = "","",";") + "04";
					//	КонецЕсли;
					//КонецЕсли;
					
					Если Выборка.ЕстьСобственныеТоварыИУслуги > 0
						И Выборка.ЕстьКомиссионныеТоварыИУслуги > 0 Тогда
						КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "01;04", "15");
					ИначеЕсли ВерсияКодовВидовОпераций < 3 И Выборка.ЕстьКомиссионныеТоварыИУслуги > 0 Тогда
						КодВидаОперации = "04";
					КонецЕсли;
					
					// {{ТТК Сладков А. Заявка №7735159  28.06.2016 окончание
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если КодВидаОперации = "" Тогда
			КодВидаОперации = "01";
		КонецЕсли;

	Иначе
		
		КодВидаОперации = "01";		
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры(ЗаполнятьРеквизитыСчетаФактуры = Ложь) Экспорт
	
	Если ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		// Основание не выбрано, параметры не определяем
		СуммаДокумента = 0;
		Возврат;
	КонецЕсли; 
	
	ПараметрыСФ = Неопределено;
	
	УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, мВалютаРегламентированногоУчета, ПараметрыСФ);
	
	//АБС ВСТАВКА 36164  10.12.2013 11:09:59  Стрельцов
	//=======================================================
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный И ПараметрыСФ.РеквизитыОснований.Количество() <> 0 Тогда
		
		Для Каждого Основание Из ДокументыОснования Цикл
			
			СтрокаСРеквизитами = ПараметрыСФ.РеквизитыОснований.Найти(Основание.ДокументОснование, "ДокументОснование");
			Если СтрокаСРеквизитами <> Неопределено Тогда
				Если Основание.СуммаУвеличение <> СтрокаСРеквизитами.СуммаУвеличение Тогда
					Основание.СуммаУвеличение = СтрокаСРеквизитами.СуммаУвеличение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаУменьшение <> СтрокаСРеквизитами.СуммаУменьшение Тогда
					Основание.СуммаУменьшение = СтрокаСРеквизитами.СуммаУменьшение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаНДСУвеличение <> СтрокаСРеквизитами.СуммаНДСУвеличение Тогда
					Основание.СуммаНДСУвеличение = СтрокаСРеквизитами.СуммаНДСУвеличение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаНДСУменьшение <> СтрокаСРеквизитами.СуммаНДСУменьшение Тогда
					Основание.СуммаНДСУменьшение = СтрокаСРеквизитами.СуммаНДСУменьшение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если ЗаполнятьРеквизитыСчетаФактуры Тогда
					Если Основание.НомерИсходногоДокумента <> СтрокаСРеквизитами.НомерИсходногоДокумента Тогда
						Основание.НомерИсходногоДокумента = СтрокаСРеквизитами.НомерИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.ДатаИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсходногоДокумента Тогда
						Основание.ДатаИсходногоДокумента = СтрокаСРеквизитами.ДатаИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.УчитыватьИсправлениеИсходногоДокумента <> СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента Тогда
						Основание.УчитыватьИсправлениеИсходногоДокумента = СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.НомерИсправленияИсходногоДокумента <> СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента Тогда
						Основание.НомерИсправленияИсходногоДокумента = СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.ДатаИсправленияИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента Тогда
						Основание.ДатаИсправленияИсходногоДокумента = СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПараметрыСФ.РеквизитыОснований.Количество() > 1 Тогда
			СводныйКорректировочный = Истина;
		Иначе
			СводныйКорректировочный = Ложь;
		КонецЕсли; 
	Иначе
		СводныйКорректировочный = Ложь;
	КонецЕсли;
	//==============================================================
	//\\АБС ВСТАВКА 1452 КОНЕЦ 
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	РеквизитыОбновлены  = Ложь;
	
	Если ПараметрыСФ.Организация <> Неопределено 
		И ПараметрыСФ.Организация <> Организация Тогда
		Номер       = "";
		Организация	= ПараметрыСФ.Организация;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если ПараметрыСФ.Контрагент <> Неопределено 
		И ПараметрыСФ.Контрагент <> Контрагент Тогда
		Контрагент = ПараметрыСФ.Контрагент;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если ПараметрыСФ.Договор <> Неопределено 
		И ПараметрыСФ.Договор <> ДоговорКонтрагента Тогда
		ДоговорКонтрагента = ПараметрыСФ.Договор;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если ПараметрыСФ.ВалютаДокумента <> Неопределено 
		И ВалютаДокумента <> ПараметрыСФ.ВалютаДокумента Тогда
		ВалютаДокумента = ПараметрыСФ.ВалютаДокумента;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	Если СуммаДокумента <> ПараметрыСФ.СуммаДокумента Тогда
		СуммаДокумента = ПараметрыСФ.СуммаДокумента;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	Если СуммаНДСДокумента <> ПараметрыСФ.СуммаНДСДокумента Тогда
		СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 
	Если СуммаУвеличение <> ПараметрыСФ.СуммаУвеличение Тогда
		СуммаУвеличение = ПараметрыСФ.СуммаУвеличение;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	Если СуммаУменьшение <> ПараметрыСФ.СуммаУменьшение Тогда
		СуммаУменьшение = ПараметрыСФ.СуммаУменьшение;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	Если СуммаНДСУвеличение <> ПараметрыСФ.СуммаНДСУвеличение Тогда
		СуммаНДСУвеличение = ПараметрыСФ.СуммаНДСУвеличение;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	Если СуммаНДСУменьшение <> ПараметрыСФ.СуммаНДСУменьшение Тогда
		СуммаНДСУменьшение = ПараметрыСФ.СуммаНДСУменьшение;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	Если ВерсияПостановления = 2 Тогда
		Если СчетФактураБезНДС <> ПараметрыСФ.СчетФактураБезНДС Тогда
			СчетФактураБезНДС = ПараметрыСФ.СчетФактураБезНДС;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
		
		Если ЭтоНовый() Тогда //абсо +// 11444      //Абс-Пр2 комментарий удален, заявка 12286
			Если НЕ ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда		
				УстановитьКодВидаОперации();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		РезультатПоискаИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(
			ДокументыОснования[0].ДокументОснование.ИсправляемыйДокументРеализации, "СчетФактураВыданный");
		Если РезультатПоискаИсправляемыйСчетФактура = Неопределено Тогда
			РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
	Иначе
		РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	Если ИсправляемыйСчетФактура <> РезультатПоискаИсправляемыйСчетФактура Тогда
		ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	Если ДокументыОснования[0].ДокументОснование <> ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 
	
	Если РеквизитыОбновлены 
		И ДополнительныеСвойства.Свойство("СообщитьОбИзмененииРеквизитов")
		И ДополнительныеСвойства.СообщитьОбИзмененииРеквизитов Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Реквизиты документа ""%1"" перезаполнены автоматически'"),
			Ссылка));
	КонецЕсли;
	
КонецПроцедуры // ОпределениеПараметровСчетаФактуры()

// Процедура для определения параметров счета-фактуры на аванс
Процедура ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен) Экспорт
	
	Если ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	Организация = ДокументыОснования[0].ДокументОснование.Организация;
		
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.ПустаяСсылка());
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
	ТекущийДоговорКонтрагента = ДоговорКонтрагента;
		
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
			|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.Сумма + ВЫБОР
			|			КОГДА ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.СуммаВключаетНДС = ИСТИНА
			|				ТОГДА 0
			|			ИНАЧЕ ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС
			|		КОНЕЦ) КАК Сумма,
			|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС) КАК СуммаНДС,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.ДенежныеСредства КАК ОтчетКомиссионераОПродажахДенежныеСредства
			|ГДЕ
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка = &ДокументОснование
			|	И ОтчетКомиссионераОПродажахДенежныеСредства.ВидОтчетаПоПлатежам = &ВидОтчетаПоПлатежамАванс
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
		Запрос.УстановитьПараметр("ВидОтчетаПоПлатежамАванс", Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс);
		
		Результат = Запрос.Выполнить();
		Сумма = 0;
		ДокументЗаполнен = Ложь;
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Дата >= '20060101' 
					И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				ИначеЕсли Выборка.Дата >= '20080101' 
					И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
					Продолжить;
				КонецЕсли;
				ДокументЗаполнен = Истина;
				
				Контрагент = Выборка.Контрагент;
				ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
 				Сумма = Сумма + Выборка.Сумма;
				СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[Выборка.СтавкаНДС]), СоответствиеСтавок[Выборка.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);
				Если Выборка.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
					СуммаРуб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
						Выборка.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
						Выборка.КурсВзаиморасчетов, 1,
						Выборка.КратностьВзаиморасчетов, 1);
					СуммаНДСруб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС,
						Выборка.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
						Выборка.КурсВзаиморасчетов, 1,
						Выборка.КратностьВзаиморасчетов, 1);
					ДобавитьСтрокуАвансы(Авансы, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , СуммаРуб, СуммаНДСруб, СтавкаНДС);
				Иначе
					ДобавитьСтрокуАвансы(Авансы, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , Выборка.Сумма, Выборка.СуммаНДС, СтавкаНДС);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Выборка.РасчетыВУсловныхЕдиницах 
				ИЛИ НЕ ЗначениеЗаполнено(Выборка.ВалютаВзаиморасчетов) Тогда
				ВалютаДокумента = мВалютаРегламентированногоУчета;
			Иначе
				ВалютаДокумента = Выборка.ВалютаВзаиморасчетов;
			КонецЕсли; 
			
			ВалютнаяСумма = Сумма;
			
			ОшибкаПриЗаполнении = Ложь;
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщенияТекущая;
			КонецЕсли;
			
			СуммаДокумента 	= Сумма;
			
		Иначе
			ДокументЗаполнен = Ложь;
		КонецЕсли;
	
	 ИначеЕсли ДокументыОснования[0].ДокументОснование.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		Если ДокументыОснования[0].ДокументОснование.Метаданные().ТабличныеЧасти["РасшифровкаПлатежа"].Реквизиты.Найти("СчетУчетаРасчетовПоАвансам") = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
		Запрос = Новый Запрос;
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		
		Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", ДокументыОснования[0].ДокументОснование.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовПоАвансам"));
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", ДокументыОснования[0].ДокументОснование.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"));
		Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
		Запрос.УстановитьПараметр("СчетУчетаДоходов", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
		
		ТекстЗапросаАванс =
		"ВЫБРАТЬ
		|	РасчетыПоРеализацииОбороты.Организация,
		|	РасчетыПоРеализацииОбороты.СуммаРегПриход КАК СуммаАванса,
		|	РасчетыПоРеализацииОбороты.СуммаВзаиморасчетовПриход КАК ВалютнаяСуммаАванса,
		|	РасчетыПоРеализацииОбороты.Контрагент,
		|	РасчетыПоРеализацииОбороты.ДоговорКонтрагента,
		|	РасчетыПоРеализацииОбороты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	РасчетыПоРеализацииОбороты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
		|	РасчетыПоРеализацииОбороты.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	РасчетыПоРеализацииОбороты.СчетОплаты КАК СчетУчетаРасчетовПоАвансам,
		|	РасчетыПоРеализацииОбороты.Сделка КАК СчетНаОплату,
		|	РасчетыПоРеализацииОбороты.ДатаОплаты,
		|	ИСТИНА КАК ЭтоНаАванс
		|ИЗ
		|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, СчетОплаты В (&СчетУчетаРасчетовПоАвансам)) КАК РасчетыПоРеализацииОбороты
		|ГДЕ
		|	РасчетыПоРеализацииОбороты.Регистратор = &ДокументОснование";
		ТекстЗапросаСуммовыеРазницы =
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Организация,
		|	ХозрасчетныйОбороты.СуммаОборот,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
		|	ХозрасчетныйОбороты.Субконто1,
		|	ХозрасчетныйОбороты.Субконто2,
		|	ХозрасчетныйОбороты.Субконто2.РасчетыВУсловныхЕдиницах,
		|	ХозрасчетныйОбороты.Валюта,
		|	ХозрасчетныйОбороты.Субконто2.ВедениеВзаиморасчетов,
		|	НЕОПРЕДЕЛЕНО КАК СчетУчетаРасчетовПоАвансам,
		|	ХозрасчетныйОбороты.Счет,
		|	НЕОПРЕДЕЛЕНО КАК СчетНаОплату,
		|	ЛОЖЬ КАК ЭтоНаАванс
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, Счет В (&СчетУчетаРасчетовСКонтрагентом), &МассивСубконто, КорСубконто1 = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ), КорСчет В (&СчетУчетаДоходов), ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор = &ДокументОснование";
		
		Запрос.Текст = ТекстЗапросаАванс;
		Если Дата < '20111001' Тогда
			Запрос.Текст = Запрос.Текст
			+ "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|"
			+ ТекстЗапросаСуммовыеРазницы;
		КонецЕсли;
		
		ДоговорЗафиксирован = Ложь;			   
		Результат = Запрос.Выполнить();
			
		Если НЕ Результат.Пустой() Тогда
			СуммаДокумента = 0;
			ДокАванса = ДокументыОснования[0].ДокументОснование;
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Организация = Выборка.Организация;
				Контрагент = Выборка.Контрагент;
				
				Если ДоговорЗафиксирован Тогда
					Если НЕ (Выборка.ДоговорКонтрагента = ДоговорКонтрагента)
						И ДокументЗаполнен Тогда
						Продолжить;
					КонецЕсли;	
				Иначе	
					ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
					ДоговорЗафиксирован = Истина;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютаРасчетов) ИЛИ Выборка.РасчетыВУсловныхЕдиницах Тогда
					//Незаполненное значение приравнивается к валюте регл. учета
					ВалютаДокумента = мВалютаРегламентированногоУчета;	
				Иначе
					ВалютаДокумента = Выборка.ВалютаРасчетов;     
				КонецЕсли; 
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ТаблицаПоСтавкам.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.ЗаказПокупателя"));
				
				Для Каждого СтрПлатежа Из ДокАванса.РасшифровкаПлатежа Цикл
					Если СтрПлатежа.ДоговорКонтрагента = ДоговорКонтрагента 
						И (Выборка.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом 
						    ИЛИ СтрПлатежа.Сделка = Выборка.СчетНаОплату)
						И ((Выборка.ЭтоНаАванс И СтрПлатежа.СчетУчетаРасчетовПоАвансам = Выборка.СчетУчетаРасчетовПоАвансам) 
							ИЛИ (НЕ Выборка.ЭтоНаАванс И СтрПлатежа.СчетУчетаРасчетовСКонтрагентом = Выборка.СчетУчетаРасчетовПоАвансам)) Тогда
						Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
							ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
						Иначе
							ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
						КонецЕсли; 
						СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
						СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
						СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
						СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.СуммаПлатежа;
						СтрокаПоСтавке.СчетНаОплату = СтрПлатежа.Сделка;
					КонецЕсли;
				КонецЦикла;
				
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату","Сумма, ВалютнаяСумма");
				
				//Распределение суммы рег учета
				МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если НЕ МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 
				
				//Распределение валютной суммы
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
					Если НЕ МассивСумм = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				Иначе
					МассивСуммВал = ttk_ОбщегоНазначения.РаспределитьПропорционально(Выборка.ВалютнаяСуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("ВалютнаяСумма"));
					Если НЕ МассивСуммВал = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСуммВал,"ВалютнаяСумма");
					Иначе
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				КонецЕсли; 
				
				Если Выборка.ЭтоНаАванс Тогда
					ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс;
				Иначе 
					ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу;
				КонецЕсли;
				
				ВалютнаяСумма = 0;
				Если Выборка.ЭтоНаАванс Тогда
					Сумма = 0;
					Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
						
						Если Выборка.ДатаОплаты >= '20060101' 
							И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
							// НДС с авансов под экспортные поставки не начисляется
							Продолжить;
						ИначеЕсли Выборка.ДатаОплаты >= '20080101' 
							И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
							// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
							Продолжить;
						КонецЕсли;
						
						// Для СФ на аванс возможна выписка нескольких СФ (разные договора и ставки НДС).
						СтруктураОтбора = Новый Структура("ПометкаУдаления", Ложь);
						СтруктураОтбора.Вставить("ДоговорКонтрагента"	, ДоговорКонтрагента);
						СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
						Если НЕ (СуществующийСФ = Неопределено) Тогда
							ДоговорЗафиксирован = Ложь;
							Продолжить;
						КонецЕсли;
											
						Контрагент = Выборка.Контрагент;
						Если Выборка.ВалютаРасчетов <> мВалютаРегламентированногоУчета И НЕ Выборка.РасчетыВУсловныхЕдиницах Тогда
							СуммаДокумента = СуммаДокумента + СтрокаПоСтавке.ВалютнаяСумма;
						Иначе
							СуммаДокумента = СуммаДокумента + СтрокаПоСтавке.Сумма;
						КонецЕсли;
						ВалютнаяСумма = ВалютнаяСумма + СтрокаПоСтавке.ВалютнаяСумма;
						СтавкаНДС = ?(СтрокаПоСтавке.СтавкаНДС <> Неопределено, СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);
						ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(СтрокаПоСтавке.Сумма, 
																УчетНДС.РассчитатьСуммуНДС(СтрокаПоСтавке.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)), 
																СтавкаНДС, 
																СтрокаПоСтавке.СчетНаОплату);
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаАвансов, Авансы);							
											
					КонецЦикла;
					
					СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
					Если ОшибкаПриЗаполнении Тогда
						СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
					Иначе
						ДокументЗаполнен = Истина;
					КонецЕсли;
				Иначе	
					Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
						
						Контрагент 			= Выборка.Контрагент;
						ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
						Сумма				= СтрокаПоСтавке.Сумма;
						ВалютнаяСумма		= СтрокаПоСтавке.ВалютнаяСумма;
						СтавкаНДС			= ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);
						СуммаНДС			= УчетНДС.РассчитатьСуммуНДС(Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
						СуммаДокумента		= Сумма;
						СчетНаОплату		= СтрокаПоСтавке.СчетНаОплату;
						ОшибкаПриЗаполнении = Ложь;
						СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
						Если ОшибкаПриЗаполнении Тогда
							СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
						Иначе
							ДокументЗаполнен = Истина;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			
			КонецЦикла;
			
			Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
				Авансы.Свернуть("Номенклатура, Содержание, СтавкаНДС","Сумма, СуммаНДС");
				Если Авансы.Количество() = 0 Тогда
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры на предварительную оплату.");
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		
		Авансы.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистратор", ДокументыОснования[0].ДокументОснование);
		Запрос.Текст = "ВЫБРАТЬ
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Контрагент,
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента,
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегПриход КАК Сумма,
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовПриход КАК ВалютнаяСумма,
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Сделка КАК СчетНаОплату,
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДатаОплаты
		               |ИЗ
		               |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, ) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
		               |ГДЕ
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор = &Регистратор
		               |	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ = &Регистратор";
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() И Не ДокументЗаполнен Цикл
				
				Контрагент 			= Выборка.Контрагент;
				ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
				Сумма				= Выборка.Сумма;
				ВалютнаяСумма		= Выборка.ВалютнаяСумма;
				СтавкаНДС			= Перечисления.СтавкиНДС.НДС18_118;
				
				ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(Выборка.Сумма, 
														УчетНДС.РассчитатьСуммуНДС(Выборка.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)), 
														СтавкаНДС, Выборка.СчетНаОплату);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаАвансов, Авансы);							
				ОшибкаПриЗаполнении = Ложь;
				
				СуммаДокумента = Сумма;
				
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				
				Если ОшибкаПриЗаполнении Тогда
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					ДокументЗаполнен = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	//АБС+ Тупиков 13209	
	ИначеЕсли ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда	
		
		Авансы.Очистить();
		
		//АБС ВСТАВКА №44736 НАЧАЛО «16 июня 2014 г.», Пополитов
		СчетаАванса = Новый Массив;
		СчетаАванса.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02"));
		СчетаАванса.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.22"));
		СчетаАванса.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.32"));
		СчетаАванса.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02"));
		СчетаАванса.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.22"));
		СчетаАванса.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.32"));
  		//\\АБС ВСТАВКА №44736 КОНЕЦ		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистратор", ДокументыОснования[0].ДокументОснование);
		//АБС ВСТАВКА №44736 НАЧАЛО «16 июня 2014 г.», Пополитов
		Запрос.УстановитьПараметр("СчетаАванса", СчетаАванса);
  		//\\АБС ВСТАВКА №44736 КОНЕЦ			
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РН.Контрагент,
		|	РН.ДоговорКонтрагента,
		|	-РН.СуммаРегРасход КАК Сумма,
		|	-РН.СуммаВзаиморасчетовРасход КАК ВалютнаяСумма,
		|	РН.Сделка КАК СчетНаОплату,
		|	РН.ДатаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, СчетОплаты В ИЕРАРХИИ (&СчетаАванса)) КАК РН
		|ГДЕ
		|	РН.Регистратор = &Регистратор";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() И НЕ ДокументЗаполнен Цикл
				
				ВалютаДокумента = мВалютаРегламентированногоУчета;	
				
				Контрагент 			= Выборка.Контрагент;
				ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
				Сумма				= Выборка.Сумма;
				ВалютнаяСумма		= Выборка.ВалютнаяСумма;
				СтавкаНДС			= Перечисления.СтавкиНДС.НДС18_118;
				
				ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(Выборка.Сумма, 
					УчетНДС.РассчитатьСуммуНДС(Выборка.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)), 
					СтавкаНДС, Выборка.СчетНаОплату);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаАвансов, Авансы);							
				ОшибкаПриЗаполнении = Ложь;
				
				СуммаДокумента = Сумма;	
				
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				
				Если ОшибкаПриЗаполнении Тогда
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					ДокументЗаполнен = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;	
		//АБС- Тупиков
	КонецЕсли;
	
	СуммаНДСДокумента = Авансы.Итог("СуммаНДС");
	
	Если ОшибкаПриЗаполнении Тогда
		ДоговорКонтрагента = ТекущийДоговорКонтрагента;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Сумма = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаДокумента = 0;
		СуммаНДСДокумента = 0;
		ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
			
	абс_ПериодОтражения = ПолучитьПериодНДСПоДатеКвартал(абс_ДатаСФ); //АБС Коломиец 13841
	
КонецПроцедуры

Функция ПолучитьТаблицуАвансовПоСчетуНаОплату(Сумма, СуммаНДС, СтавкаНДС, СчетНаОплату) Экспорт
	
	ТаблицаРезультата = Авансы.ВыгрузитьКолонки();
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18_118));
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(СчетНаОплату) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
		СтавкиНДС = Новый СписокЗначений;
		Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС10);
			СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС18);
			СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
		Иначе
			СоответствиеСтавокИзСчета = Новый Соответствие;
			СоответствиеСтавокИзСчета.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
			СоответствиеСтавокИзСчета.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
			СоответствиеСтавокИзСчета.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);
			СтавкиНДС.Добавить(СтавкаНДС);
			СтавкиНДС.Добавить(СоответствиеСтавокИзСчета[СтавкаНДС]);
		КонецЕсли;
		Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
		Запрос.Текст = "ВЫБРАТЬ
					   |	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
		               |	&ПустаяСтрока КАК Содержание,
					   |	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
					   |	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС,
					   |	ВЫБОР
					   |		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
					   |			ТОГДА СчетНаОплатуПокупателюТовары.Сумма
					   |		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
					   |	КОНЕЦ КАК Сумма,
					   |	ВЫБОР
					   |		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
					   |			ТОГДА СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаНДС
					   |		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма
					   |	КОНЕЦ КАК СуммаБезНДС,
					   |	СчетНаОплатуПокупателюТовары.НомерСтроки КАК НомерСтроки,
					   |	СчетНаОплатуПокупателюТовары.Ссылка.ВалютаДокумента,
					   |	1 КАК ID
					   |ИЗ
					   |	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
					   |ГДЕ
					   |	СчетНаОплатуПокупателюТовары.Ссылка = &СчетНаОплату
					   |	И СчетНаОплатуПокупателюТовары.СтавкаНДС В(&СтавкиНДС)
					   |
					   |ОБЪЕДИНИТЬ ВСЕ
					   |
					   |ВЫБРАТЬ
					   |	СчетНаОплатуПокупателюУслуги.Номенклатура,
					   |	СчетНаОплатуПокупателюУслуги.Содержание,
					   |	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
					   |	СчетНаОплатуПокупателюУслуги.СуммаНДС,
					   |	ВЫБОР
					   |		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС
					   |			ТОГДА СчетНаОплатуПокупателюУслуги.Сумма
					   |		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Сумма + СчетНаОплатуПокупателюУслуги.СуммаНДС
					   |	КОНЕЦ,
					   |	ВЫБОР
					   |		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС
					   |			ТОГДА СчетНаОплатуПокупателюУслуги.Сумма - СчетНаОплатуПокупателюУслуги.СуммаНДС
					   |		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Сумма
					   |	КОНЕЦ,
					   |	СчетНаОплатуПокупателюУслуги.НомерСтроки,
					   |	СчетНаОплатуПокупателюУслуги.Ссылка.ВалютаДокумента,
					   |	2
					   |ИЗ
					   |	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
					   |ГДЕ
					   |	СчетНаОплатуПокупателюУслуги.Ссылка = &СчетНаОплату
					   |	И СчетНаОплатуПокупателюУслуги.СтавкаНДС В(&СтавкиНДС)
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	ID,
					   |	НомерСтроки";
					   
		Если ТипЗнч(СчетНаОплату) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.СчетНаОплатуПокупателю", "Документ.ЗаказПокупателя");
		КонецЕсли;
					   
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() <> 0 Тогда
			
			Если Сумма = 0 Тогда
				ТаблицаРезультата.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");
				СтрокаСообщения = НСтр("ru = 'Не заполнена сумма аванса'");
				ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
     			Возврат ТаблицаРезультата;
			КонецЕсли;
			
			Результат.Колонки.Добавить("СуммаРаспределение", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			Результат.ЗагрузитьКолонку(РаспределитьПропорционально(Сумма, Результат.ВыгрузитьКолонку("Сумма")), "СуммаРаспределение");
						
			МассивРаспределения = Новый Массив;
			
			
			Для Каждого СтрокаРезультата Из Результат Цикл
				
				Если ДокументыОснования.Количество() = 0
					Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, Дата);
				Иначе
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, ДокументыОснования[0].ДокументОснование.Дата);
				КонецЕсли;
				
				Если СтрокаРезультата.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
					СтрокаРезультата.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.Сумма, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаБезНДС, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаНДС, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
				КонецЕсли;
				
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаБезНДС);
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаНДС);
				
				РезультатРаспределения = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаРезультата.СуммаРаспределение, МассивРаспределения);
				
				Если Не РезультатРаспределения = Неопределено Тогда
					СтрокаРезультата.СуммаНДС = Мин(СтрокаРезультата.СуммаНДС, РезультатРаспределения[1]);
					СтрокаРезультата.СуммаБезНДС = Мин(СтрокаРезультата.СуммаБезНДС, РезультатРаспределения[0]); 
					СтрокаРезультата.Сумма = СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.СуммаНДС; 
					
					ДобавитьСтрокуАвансы(ТаблицаРезультата, СтрокаРезультата.Номенклатура, СтрокаРезультата.Содержание, СтрокаРезультата.Сумма, СтрокаРезультата.СуммаНДС, СоответствиеСтавок[СтрокаРезультата.СтавкаНДС]);
					Сумма = Сумма - СтрокаРезультата.Сумма;
					СуммаНДС = СуммаНДС - СтрокаРезультата.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			ДобавитьСтрокуАвансы(ТаблицаРезультата, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , Сумма, СуммаНДС, СоответствиеСтавок[СтавкаНДС]);
		КонецЕсли;
		
	Иначе
		ДобавитьСтрокуАвансы(ТаблицаРезультата, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , Сумма, СуммаНДС, СоответствиеСтавок[СтавкаНДС]);
	КонецЕсли;
	
	ТаблицаРезультата.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения
//
// Параметры:
//		ИсхСумма - распределяемая сумма
//		МассивКоэф - массив коэффициентов распределения
//		Точность - точность округления при распределении. Необязателен.
//
//	Возврат:
//		МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//			суммы в соответствии с весом коэффициента (из массива коэффициентов)
//          В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//          или суммарный вес коэф. = 0), тогда возвращается значение Неопределено
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2, ПроверкаНулевыхЗначений = Истина)

	Если МассивКоэф.Количество() = 0 Или (ПроверкаНулевыхЗначений И ИсхСумма = 0) Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Массив коэффициентов необходимо упорядочить, поэтому создадим таблицу для распределения
    УпорядоченнаяТаблица = Новый ТаблицаЗначений;
	УпорядоченнаяТаблица.Колонки.Добавить("Коэф", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,4)));
	УпорядоченнаяТаблица.Колонки.Добавить("ИсходныйИндекс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	СуммаКоэф  = 0;

	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		СуммаКоэф = СуммаКоэф + МассивКоэф[К];
		
		СтрокаТаблицы = УпорядоченнаяТаблица.Добавить();
		СтрокаТаблицы.Коэф = МассивКоэф[К];
		СтрокаТаблицы.ИсходныйИндекс = К;
	КонецЦикла;

	УпорядоченнаяТаблица.Сортировать("Коэф Убыв");
	
	МассивСумм = Новый Массив(УпорядоченнаяТаблица.Количество());
	
	Для каждого СтрокаТаблицы Из УпорядоченнаяТаблица Цикл
		// Возвращаемый результат должен быть в том же порядке
		МассивСумм[СтрокаТаблицы.ИсходныйИндекс] = ?(СуммаКоэф <> 0, Окр(ИсхСумма * МассивКоэф[СтрокаТаблицы.ИсходныйИндекс] / СуммаКоэф, Точность, 1), 0);
		
		ИсхСумма = ИсхСумма - МассивСумм[СтрокаТаблицы.ИсходныйИндекс]; 
		СуммаКоэф = СуммаКоэф - МассивКоэф[СтрокаТаблицы.ИсходныйИндекс]; 
	КонецЦикла;

	Возврат МассивСумм;

КонецФункции // РаспределитьПропорционально()

Процедура ДобавитьСтрокуАвансы(ТаблицаРезультата, Номенклатура, Содержание = "", Сумма, СуммаНДС, СтавкаНДС)
	
	НоваяСтрока = ТаблицаРезультата.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Содержание = Содержание;
	
	Если ПустаяСтрока(НоваяСтрока.Содержание) 
		И ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
		И НоваяСтрока.Номенклатура.Услуга Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
		Если ПустаяСтрока(НоваяСтрока.Содержание) Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.Наименование;
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.Сумма     = Сумма;
	НоваяСтрока.СуммаНДС  = СуммаНДС;
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
		
КонецПроцедуры

Процедура ОпределениеПараметровСчетаФактурыНалоговыйАгент(ДокументЗаполнен) Экспорт
	
	Если ДокументыОснования.Количество()=0 
		Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	ВалютаДокумента = мВалютаРегламентированногоУчета;	
	ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент;
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
	ТекущийДоговорКонтрагента = ДоговорКонтрагента;
		
	ДокументОплаты = ДокументыОснования[0].ДокументОснование;
	ДокументОплатыМетаданные = ДокументОплаты.Метаданные();
	
	Если ДокументОплатыМетаданные.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		Если ДокументОплатыМетаданные.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СчетУчетаРасчетовПоАвансам") = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
		Запрос = Новый Запрос;
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		
		Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", ДокументОплаты.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовПоАвансам"));
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", ДокументОплаты.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"));
		Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
		Запрос.УстановитьПараметр("СчетУчетаРасходов", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОплаты);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.СуммаОборот КАК СуммаОплаты,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		               |	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента,
		               |	ХозрасчетныйОбороты.Счет КАК СчетУчетаРасчетов
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			,
		               |			,
		               |			Регистратор,
		               |			Счет В (&СчетУчетаРасчетовПоАвансам)
		               |				ИЛИ Счет В (&СчетУчетаРасчетовСКонтрагентом),
		               |			&МассивСубконто,
		               |			Субконто2.УчетАгентскогоНДС
		               |				И Субконто2.НалоговыйАгентПоОплате,
		               |			,
		               |			) КАК ХозрасчетныйОбороты
		               |ГДЕ
		               |	ХозрасчетныйОбороты.Регистратор = &ДокументОснование";
					   
		Результат = Запрос.Выполнить();

		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() И Не ДокументЗаполнен Цикл
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				
				Для Каждого СтрПлатежа Из ДокументОплаты.РасшифровкаПлатежа Цикл
					
					Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента 
						И ((СтрПлатежа.СчетУчетаРасчетовПоАвансам = Выборка.СчетУчетаРасчетов) 
							ИЛИ (СтрПлатежа.СчетУчетаРасчетовСКонтрагентом = Выборка.СчетУчетаРасчетов)) Тогда
							
						Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
							ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
						Иначе
							ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
						КонецЕсли; 
						СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
						СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
						СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
						
					КонецЕсли;
				КонецЦикла;
				
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС", "Сумма");
				
				//Распределение суммы рег учета
				МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаОплаты, ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если не МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 
				
				Сумма = 0;
				Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
							
					Контрагент = Выборка.Контрагент;
					ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
					СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);
					СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаПоСтавке.Сумма, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
					Сумма = Сумма + СтрокаПоСтавке.Сумма + СуммаНДС;
					ВалютнаяСумма = Сумма;
					
					ТаблицаОплат = ПолучитьТаблицуАвансовПоСчетуНаОплату(СтрокаПоСтавке.Сумма + СуммаНДС, СуммаНДС, СтавкаНДС, Неопределено);
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОплат, Авансы);							
					ОшибкаПриЗаполнении = Ложь;
							
				КонецЦикла;
						
				СуммаДокумента = Сумма;
						
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				Если ОшибкаПриЗаполнении Тогда
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					ДокументЗаполнен = Истина;
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаНДСДокумента = Авансы.Итог("СуммаНДС");
	
	Если ОшибкаПриЗаполнении Тогда
		ДоговорКонтрагента = ТекущийДоговорКонтрагента;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Сумма = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаДокумента = 0;
		СуммаНДСДокумента = 0;
		ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры

//АБС ИЗМЕНЕНИЕ 36164  09.12.2013 18:58:59  Стрельцов
Процедура ЗаполнитьНаОснованииИсправления(Основание, СтрокаОснованиеВТабличнойЧасти) 
 //АБС ИЗМЕНЕНИЕ 36164 КОНЕЦ																					 
	
	Если ТипЗнч(Основание.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ЗначениеЗаполнено(Основание.ИсправляемыйДокументРеализации)
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки 
		И Основание.ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		УточнениеСообщения = "корректировочных"; 
	Иначе
		УточнениеСообщения = "исправленных";
	КонецЕсли;
	
	ОснованиеДляВидаОперации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание);
	
	Если ЗначениеЗаполнено(ОснованиеДляВидаОперации.ВалютаДокумента) 
		И ОснованиеДляВидаОперации.ВалютаДокумента <> мВалютаРегламентированногоУчета 
		И ЗначениеЗаполнено(ОснованиеДляВидаОперации.ДоговорКонтрагента)
		И ОснованиеДляВидаОперации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Для договоров в условных единицах, выставление " 
			+ УточнениеСообщения + " счетов-фактур, оформленных в валюте, не поддерживается.
			|Документ-основание должен быть оформлен в рублях.");
		Возврат;			
	КонецЕсли;
	
	Если ТипЗнч(Основание.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ЗначениеЗаполнено(Основание.ИсправляемыйДокументРеализации)
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки 
		И Основание.ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный;
		ЭтотОбъект.Исправление = Истина;
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный;
		ЭтотОбъект.Исправление = Ложь;
	Иначе		
		
		СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.НДСВидСчетаФактуры.НаАванс,,Основание);
		СписокТиповНалоговыйАгент = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.НДСВидСчетаФактуры.НалоговыйАгент,,Основание);
		СписокТиповКорректировочный = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.НДСВидСчетаФактуры.Корректировочный,,Основание);
		СписокТиповНаРеализацию = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.НДСВидСчетаФактуры.НаРеализацию,,Основание);
		
		Если СписокТиповНалоговыйАгент.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
			ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент;
		ИначеЕсли СписокТиповНаАванс.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда			
			Если ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
				ИЛИ ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию;
			Иначе
				ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс;
			КонецЕсли;
		ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
			ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный;	
		Иначе
			ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию;
		КонецЕсли;
		
		ЭтотОбъект.Исправление = Истина;
		
	КонецЕсли;
	
	ИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание.ИсправляемыйДокументРеализации, "СчетФактураВыданный");
	
	//АБС ВСТАВКА 36164  10.12.2013 10:26:13  Стрельцов
	//=================================================================================================================================
	ДокументРеализации = Основание.ДокументРеализации;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
	
	Если ТипЗнч(УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;
	//===================================================================================================================================
	//\\АБС ВСТАВКА 36164 КОНЕЦ 
	
	// Определение кода вида операции для исправления
	// Определение номера и даты исходного документа
	КодВидаОперацииОснования = "";
	
	//АБС ВСТАВКА 36164  10.12.2013 10:28:19  Стрельцов
	//==================================================
	НомерИсправленияСФ = 0;
	
	// {{ТТК Сладков А. Заявка №7735159  13.09.2016 начало
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);
	// {{ТТК Сладков А. Заявка №7735159  13.09.2016 окончание
	
	ИсходныйДокумент = Неопределено;
	ИспользоватьПараметрыСчетаФактуры = Ложь;
	Если ТипЗнч(Основание.ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ИспользоватьПараметрыСчетаФактуры = Истина;
		ИсходныйДокумент = Основание.ДокументРеализации;
	ИначеЕсли ТипЗнч(Основание.ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание.ДокументРеализации);
		Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ИспользоватьПараметрыСчетаФактуры = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ИспользоватьПараметрыСчетаФактуры И ЗначениеЗаполнено(ИсходныйДокумент) Тогда // реквизиты из документа основания
		
		ПараметрыСчетаФактуры = Новый Структура("НомерИсходногоДокумента, ДатаИсходногоДокумента, НомерИсправленияИсходногоДокумента,
			|ДатаИсправленияИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента");
		
		Если Исправление И ИсходныйДокумент.ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			КодВидаОперацииОснования = КодВидаОперации;
		КонецЕсли;
		
		НомерИсправленияСФ = ИсходныйДокумент.НомерИсправления;
		
		Если ИсходныйДокумент.Исправление ИЛИ ИсходныйДокумент.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			ПараметрыСчетаФактуры.НомерИсходногоДокумента = ИсходныйДокумент.НомерИсходногоДокумента;
			ПараметрыСчетаФактуры.ДатаИсходногоДокумента  = ИсходныйДокумент.ДатаИсходногоДокумента;
		Иначе
			ПараметрыСчетаФактуры.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ИсходныйДокумент.ПолучитьОбъект());
			ПараметрыСчетаФактуры.ДатаИсходногоДокумента  = ИсходныйДокумент.Дата;
		КонецЕсли;
		
		Если ИсходныйДокумент.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			ПараметрыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = ИсходныйДокумент.УчитыватьИсправлениеИсходногоДокумента;
			Если ПараметрыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента Тогда
				ПараметрыСчетаФактуры.НомерИсправленияИсходногоДокумента = ИсходныйДокумент.НомерИсправленияИсходногоДокумента;
				ПараметрыСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ИсходныйДокумент.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
			
			Если ИсходныйДокумент.Исправление Тогда
				НомерИсправляемогоКорректировочногоДокумента = ИсходныйДокумент.НомерИсправляемогоКорректировочногоДокумента;
				ДатаИсправляемогоКорректировочногоДокумента  = ИсходныйДокумент.ДатаИсправляемогоКорректировочногоДокумента;
			ИначеЕсли Исправление Тогда
				НомерИсправляемогоКорректировочногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ИсходныйДокумент.ПолучитьОбъект());
				ДатаИсправляемогоКорректировочногоДокумента  = ИсходныйДокумент.Дата;
			КонецЕсли;
			
		Иначе
			Если ИсходныйДокумент.Исправление И ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				ПараметрыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = Истина;
				ПараметрыСчетаФактуры.НомерИсправленияИсходногоДокумента = ИсходныйДокумент.НомерИсправления;
				ПараметрыСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ИсходныйДокумент.Дата;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			ЗаполнитьЗначенияСвойств(СтрокаОснованиеВТабличнойЧасти, ПараметрыСчетаФактуры);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСчетаФактуры);
		КонецЕсли;
		
	Иначе
	//==================================================
	//\\АБС ВСТАВКА 36164 КОНЕЦ 

		Запрос = Новый Запрос;
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание.ДокументРеализации);
	
		Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
		Запрос.УстановитьПараметр("КорректировочныйСчетФактура", Перечисления.НДСВидСчетаФактуры.Корректировочный);
	
		//АБС ИЗМЕНЕНИЕ 36164  10.12.2013 10:31:47  Стрельцов
		//==================================================== 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.Номер
		|	КОНЕЦ КАК НомерИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.Дата
		|	КОНЕЦ КАК ДатаИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента
		|		КОГДА (НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура)
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления
		|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента
		|		КОГДА (НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура)
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Дата
		|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерИсправления,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КорректировочныйСчетФактура,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Исправление КАК Исправление,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата,
		// {{ТТК Сладков А. Заявка №7735159  13.09.2016 начало
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
		|			ТОГДА ВЫБОР
		|					КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|							И СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперацииНаУменьшение <> """"
		|						ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперацииНаУменьшение
		|					ИНАЧЕ ""18""
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КодВидаОперацииНаУменьшение
		// {{ТТК Сладков А. Заявка №7735159  13.09.2016 окончание	
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
		|	И (НЕ СчетФактураВыданныйДокументыОснования.Ссылка.Исправление)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса.Количество() > 0 Тогда
			
			ТекущаяСтрока = РезультатЗапроса[0];
			
			Если КорректировкаКорректировочногоСчетаФактуры Тогда
				
				КодВидаОперацииОснования = ТекущаяСтрока.КодВидаОперации;
				
				СтрокаОснованиеВТабличнойЧасти.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());	
				СтрокаОснованиеВТабличнойЧасти.ДатаИсходногоДокумента  = ТекущаяСтрока.Дата;
				
				НомерИсправляемогоКорректировочногоДокумента = ТекущаяСтрока.НомерИсправляемогоКорректировочногоДокумента;
				ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.ДатаИсправляемогоКорректировочногоДокумента;
				
				ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный;
				
			Иначе
				
				ПараметрыСчетаФактуры = Новый Структура("НомерИсходногоДокумента, ДатаИсходногоДокумента, НомерИсправленияИсходногоДокумента,
				|ДатаИсправленияИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента");
				
				КодВидаОперацииОснования = ТекущаяСтрока.КодВидаОперации;
				НомерИсправленияСФ  = ТекущаяСтрока.НомерИсправления;
				
				Если НЕ ТекущаяСтрока.КорректировочныйСчетФактура И НЕ ТекущаяСтрока.Исправление Тогда
					ПараметрыСчетаФактуры.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());
				Иначе
					ПараметрыСчетаФактуры.НомерИсходногоДокумента = ТекущаяСтрока.НомерИсходногоДокумента;
				КонецЕсли;
				
				ПараметрыСчетаФактуры.ДатаИсходногоДокумента  = ТекущаяСтрока.ДатаИсходногоДокумента;
				
				ПараметрыСчетаФактуры.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправленияИсходногоДокумента;
				ПараметрыСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.ДатаИсправленияИсходногоДокумента;
				
				ЭтотОбъект.НомерИсправляемогоКорректировочногоДокумента = ТекущаяСтрока.НомерИсправляемогоКорректировочногоДокумента;
				ЭтотОбъект.ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.ДатаИсправляемогоКорректировочногоДокумента;
				
				Если ТекущаяСтрока.КорректировочныйСчетФактура И ЭтотОбъект.ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
					ЭтотОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный;
				КонецЕсли;
				
				Если ТекущаяСтрока.КорректировочныйСчетФактура И НЕ ТекущаяСтрока.Исправление Тогда
					ЭтотОбъект.НомерИсправляемогоКорректировочногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());
					ЭтотОбъект.ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.Ссылка.Дата;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекущаяСтрока.НомерИсправленияИсходногоДокумента)
					ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ДатаИсправленияИсходногоДокумента) Тогда
					ПараметрыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
				
				Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
					ЗаполнитьЗначенияСвойств(СтрокаОснованиеВТабличнойЧасти, ПараметрыСчетаФактуры);
				Иначе
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСчетаФактуры);
				КонецЕсли;
				
			КонецЕсли;
			
			
			// {{ТТК Сладков А. Заявка №7735159  13.09.2016 начало
			Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный
					И ВерсияКодовВидовОпераций > 1 Тогда
				КодВидаОперацииНаУменьшение = ТекущаяСтрока.КодВидаОперацииНаУменьшение;
			КонецЕсли;
			// {{ТТК Сладков А. Заявка №7735159  13.09.2016 окончание
			
		ИначеЕсли ЭтотОбъект.Исправление Тогда
			НомерИсправленияСФ = 0;		
		КонецЕсли;
	
	КонецЕсли;
	//===============================================================
	//\\АБС ИЗМЕНЕНИЕ 36164 КОНЕЦ
	
	// Определение кода вида операции для исправления
	// и номера исправления
	
	Запрос.УстановитьПараметр("ИсходныйДокумент", Основание.ДокументРеализации);		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		ТекущаяСтрока = РезультатЗапроса[0];
		НомерИсправленияСФ  = Макс(НомерИсправленияСФ, ТекущаяСтрока.НомерИсправления) + 1;			
		
		Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			Если НЕ ЭтотОбъект.УчитыватьИсправлениеИсходногоДокумента Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрока.НомерИсправления) Тогда
					ЭтотОбъект.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправления;
					ЭтотОбъект.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.Ссылка.Дата;
					ЭтотОбъект.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьКодВидаОперации(КодВидаОперацииОснования);
	
	Если ЭтотОбъект.Исправление Тогда		
		ЭтотОбъект.НомерИсправления = НомерИсправленияСФ + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииСчетаФактуры(Основание)
	
	Если Основание.ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НаАванс
		И Основание.ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтотОбъект.Дата = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	Если УчетНДС.ПолучитьВерсиюПостановления(ЭтотОбъект.Дата) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, , "Номер,Дата,Проведен,ПометкаУдаления");
		
	СтрокаОснования = ДокументыОснования.Добавить();
	СтрокаОснования.ДокументОснование = ДокументОснование;
	
	Для Каждого СтрокаАванса Из Основание.Авансы Цикл 
		НоваяСтрока = Авансы.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
	КонецЦикла;
	
	Исправление = Истина;		
	НомерИсправления = НомерИсправления + 1;
	Выставлен = Ложь;
	ДатаВыставления = '00010101';
	
	Если Основание.Исправление Тогда
		ИсправляемыйСчетФактура = Основание.ИсправляемыйСчетФактура;
	Иначе
		ИсправляемыйСчетФактура = Основание;
	КонецЕсли;
			
	Если НЕ Основание.Исправление Тогда
		ЭтотОбъект.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
		ЭтотОбъект.ДатаИсходногоДокумента  = Основание.Дата;
	КонецЕсли;
	
	Если Основание.ДатаНомерДокументовОплаты.Количество() <> 0 Тогда
		СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента  = Основание.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента = Основание.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента;
	КонецЕсли;
	
	УстановитьКодВидаОперации();
		
КонецПроцедуры	

Процедура ЗаполнитьДатуИНомерВходящегоДокумента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ КАК ДокументОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
	|ГДЕ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор В(&СписокОснований)
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ <> РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор";
				   
	Запрос.УстановитьПараметр("СписокОснований", ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"),Истина));
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	ЗапросПоДокументуОплаты = Новый Запрос;
	НачальныйТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументОплаты.НомерВходящегоДокумента КАК Номер,
	|   ДокументОплаты.ДатаВходящегоДокумента КАК Дата
	|ИЗ
	|   %ИмяТаблицыДокумента% КАК ДокументОплаты
	|ГДЕ
	|   ДокументОплаты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.ДокументОплаты) Тогда
			Продолжить;
		КонецЕсли;
		ВходящийНомер = НЕ(Выборка.ДокументОплаты.Метаданные().Реквизиты.Найти("ДатаВходящегоДокумента") = Неопределено);
		ТекстЗапроса = ?(НЕ ВходящийНомер, СтрЗаменить(НачальныйТекстЗапроса, "ВходящегоДокумента", Символы.НПП), НачальныйТекстЗапроса);
		ЗапросПоДокументуОплаты.Текст = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыДокумента%", Выборка.ДокументОплаты.Метаданные().ПолноеИмя());
		ЗапросПоДокументуОплаты.УстановитьПараметр("Ссылка", Выборка.ДокументОплаты);
		ВыборкаПоДокументуОплаты = ЗапросПоДокументуОплаты.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументуОплаты.Следующий() Тогда
			НовыйПРД = ДатаНомерДокументовОплаты.Добавить();
			НовыйПРД.ДатаПлатежноРасчетногоДокумента  = ВыборкаПоДокументуОплаты.Дата;
			НовыйПРД.НомерПлатежноРасчетногоДокумента = ?(ВходящийНомер, ВыборкаПоДокументуОплаты.Номер, ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументОплаты));
		КонецЕсли;	
	КонецЦикла;
    	
КонецПроцедуры

// Проверка возможности выписки счета-фактуры (на наличие существующих СФ)
Функция ПроверитьВозможностьЗаписиСФ(Отказ, УдалятьЛишниеСтроки = Ложь) Экспорт
	
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("ВидСчетаФактуры, ПометкаУдаления, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура", 
		ВидСчетаФактуры, Ложь, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура);
		
	Если Исправление Тогда
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
		
		Если НЕ СуществующийСФ = Неопределено Тогда
			Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СуществующийСФ, "НомерИсправления, ИсправляемыйСчетФактура"); 
			Если Реквизиты.НомерИсправления = НомерИсправления
				И Реквизиты.ИсправляемыйСчетФактура = ИсправляемыйСчетФактура Тогда
				
				СтрокаСообщения = "На основании документа «" + ИсправляемыйСчетФактура + "» уже введен исправленный счет-фактура "
				+ Символы.ПС + "«" +Строка(СуществующийСФ) + "» с номером исправления «" + НомерИсправления + "»";
				
				Отказ = Истина;
				Возврат СтрокаСообщения;
				
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;

	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
					
		// Для СФ на аванс и СФ налогового агента возможна выписка нескольких СФ (разные договоры).
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
		
		Если Не СуществующийСФ = Неопределено Тогда
			
			СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура " 
				+ ?(ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс, "на аванс", "налогового агента") + "
				|по договору """+ДоговорКонтрагента+""":"+Символы.ПС
				+ " - """+ Строка(СуществующийСФ)+"""";
			
			Если УдалятьЛишниеСтроки Тогда
				Авансы.Очистить();
			КонецЕсли;
			
			Отказ = Не (УдалятьЛишниеСтроки И Авансы.Количество() <> 0);
		КонецЕсли;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу Тогда
		
		//Для СФ на суммовую разницу возможна выписка нескольких СФ (разные ставки НДС).
		
		СтруктураОтбора.Вставить("СтавкаНДС", СтавкаНДС);
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
		
		Если не СуществующийСФ = неопределено Тогда
			СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура на суммовую разницу со ставкой НДС «"+СтавкаНДС+"»:"
			+ Символы.ПС+" - «"+ Строка(СуществующийСФ)+"»";
			Отказ = Истина;
		КонецЕсли;
	Иначе
		
		Для каждого ТекущееОснование Из ДокументыОснования Цикл
			
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
			
			Если СуществующийСФ <> Неопределено Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
					СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура:";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения + Символы.ПС + " - " + ?(ДокументыОснования.Количество() > 1, " строка № " + ТекущееОснование.НомерСтроки + ": для «" + ТекущееОснование.ДокументОснование + "» зарегистрирован счет-фактура ", "") + " «" + СуществующийСФ + "»";
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Запись еще одного документа ""Счет-фактура выданный"" не допускается!"
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции // ПроверитьВозможностьЗаписиСФ()

// Сравнивает дату счета-фактуры и документов основания
Функция ПроверитьДатуСчетаФактуры(СообщениеПользователю) Экспорт
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СообщениеПользователю = "";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	Запрос.УстановитьПараметр("ДатаСчетаФактуры", Дата);
	ПроверятьТолькоДатуМеньше = Исправление
		И (ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент);
	Запрос.УстановитьПараметр("ПроверятьТолькоДатуМеньше", ПроверятьТолькоДатуМеньше);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕ(ДокументОснованиеСФ.Ссылка) КАК ПредставлениеДокумента,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ) < НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДатаСФМеньше,
	               |	ВЫБОР
	               |		КОГДА &ПроверятьТолькоДатуМеньше
	               |			ТОГДА ЛОЖЬ
	               |		КОГДА НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДатаНеРавнаСФ
	               |ИЗ
	               |	Документ." + ДокументыОснования[0].ДокументОснование.Метаданные().Имя + " КАК ДокументОснованиеСФ
	               |ГДЕ
	               |	ДокументОснованиеСФ.Ссылка В (&СписокДокументов)";
								  
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Результат.Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Если Результат.ДатаНеРавнаСФ Тогда
			СообщениеПользователю = "Дата счета-фактуры не равна дате документа-основания";
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Пока Результат.Следующий() Цикл
			Если Результат.ДатаСФМеньше Тогда
				СообщениеПользователю = СообщениеПользователю + Символы.ПС + Результат.ПредставлениеДокумента;
			КонецЕсли;
		КонецЦикла;
		Если СообщениеПользователю <> "" Тогда
			СообщениеПользователю = "Дата счета-фактуры меньше даты документов-оснований:" + СообщениеПользователю;
			Возврат Ложь;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоАвансам);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаПоАвансам);
	
	КонецЕсли;
								  
	УчетНДСФормированиеДвижений.ЗарегистрироватьВЖурналеУчетаСчетовФактур(СтруктураШапкиДокумента, СуммаДокумента, СуммаНДСДокумента, Отказ, Заголовок);	
		
КонецПроцедуры // ДвиженияПоРегистрам()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,ВидСчетаФактуры");

	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс
		Или СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");

	ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу Тогда
		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("Сумма");
	
	КонецЕсли;
	
	Если НЕ СформированПриВводеНачальныхОстатковНДС Тогда
		
		Если Дата >= '20111001' Тогда
			Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный И Исправление Тогда  //АБС ИЗМЕНЕНИЕ 36443  12.12.2013 15:59:14  Стрельцов
																										 
				СтруктураОбязательныхПолей.Вставить("НомерИсходногоДокумента");
				СтруктураОбязательныхПолей.Вставить("ДатаИсходногоДокумента");
			КонецЕсли;
			
			ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
			Если ВерсияПостановления = 2 Тогда
				СтруктураОбязательныхПолей.Вставить("КодВидаОперации");
				Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
					//АБС ИЗМЕНЕНИЕ 36443  12.12.2013 16:00:15  Стрельцов
					//Если УчитыватьИсправлениеИсходногоДокумента Тогда
					//	СтруктураОбязательныхПолей.Вставить("НомерИсправленияИсходногоДокумента");
					//	СтруктураОбязательныхПолей.Вставить("ДатаИсправленияИсходногоДокумента");
					//КонецЕсли;
					//\\АБС ИЗМЕНЕНИЕ 36443 КОНЕЦ 
					Если Исправление Тогда
						СтруктураОбязательныхПолей.Вставить("НомерИсправляемогоКорректировочногоДокумента");
						СтруктураОбязательныхПолей.Вставить("ДатаИсправляемогоКорректировочногоДокумента");
					КонецЕсли;
				КонецЕсли;
				Если Исправление Тогда
					СтруктураОбязательныхПолей.Вставить("НомерИсправления");					
				КонецЕсли;
				Если Выставлен Тогда
					СтруктураОбязательныхПолей.Вставить("ДатаВыставления");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры 

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
		Если не ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
			Док = СтрокаТЧ.ДокументОснование;
			Если Док.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
				Если Док.СтоимостьБУХоз = 0 Тогда
					ttk_ОбщегоНазначения.СообщитьОбОшибке( "Счет-фактуру можно вводить только на основании документа принятия к учету объектов строительства, построенных хоз. способом. (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
				КонецЕсли;
			Иначе
				ttk_ОбщегоНазначения.СообщитьОбОшибке( "Счет-фактуру можно вводить только на основании документа принятия к учету объектов строительства, построенных хоз. способом. (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		Если не ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") и НЕ СтрокаТЧ.ДокументОснование.Проведен Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке( "Счет-фактуру можно вводить только на основании проведенного документа (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
		
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "УчетАгентскогоНДС", "УчетАгентскогоНДС");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВидАгентскогоДоговора", "ВидАгентскогоДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "НалоговыйАгентПоОплате", "НалоговыйАгентПоОплате");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "РасчетыВУсловныхЕдиницах", "РасчетыВУсловныхЕдиницах");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
		
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументОснование"      , "ДокументОснование");
	СтруктураПолей.Вставить("Организация"		     , "ДокументОснование.Организация");
	СтруктураПолей.Вставить("Контрагент"             , "ДокументОснование.Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"     , "ДокументОснование.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВалютаДокумента"        , "ДокументОснование.ВалютаДокумента");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"     , "ДокументОснование.КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов", "ДокументОснование.КратностьВзаиморасчетов");
	
	РезультатЗапросаПоДокументамОснованиям = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураПолей);
	
	ТаблицаПоДокументамОснованиям = РезультатЗапросаПоДокументамОснованиям.Выгрузить();
		
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс 
		Или ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("Сумма",		"Сумма");
		СтруктураПолей.Вставить("СуммаНДС",		"СуммаНДС");
		СтруктураПолей.Вставить("СтавкаНДС",	"СтавкаНДС");
		
		РезультатЗапросаПоАвансам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураПолей);
		
		ТаблицаПоАвансам = РезультатЗапросаПоАвансам.Выгрузить();
		
		ТаблицаПоАвансам.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаПоАвансам.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТаблицаПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
		
		Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
			ТаблицаПоАвансам.Колонки.Добавить("СчетФактура");
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
			
			Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
				СтрокаТаблицы.СчетФактура = ДокументОснование;
			КонецЕсли;
		
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
			Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
				СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
			Иначе
				СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
			КонецЕсли;
			
			Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
				СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(Неопределено, Неопределено, , , Истина, ДоговорКонтрагента.ВидАгентскогоДоговора);	
			Иначе
				Если Под0 Тогда
					СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0;
				Иначе
					СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаПоАвансам.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		МассивРаспределения = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаДокумента, ТаблицаПоАвансам.ВыгрузитьКолонку("Сумма"));
		
		Если Не МассивРаспределения = Неопределено Тогда
			Для К = 0 По ТаблицаПоАвансам.Количество() - 1 Цикл
				
				ТаблицаПоАвансам[К].ВалютнаяСумма = МассивРаспределения[К];			
												
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицыДокумента()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли; 
	Иначе
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.СчетФактураВыданный", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.СчетФактураВыданный", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура 283");
		СтруктураМакетов.Вставить("СчетФактура575", "Счет-фактура 575");
		СтруктураМакетов.Вставить("СчетФактура84" , "Счет-фактура 84");
	Иначе
		Если Дата < '20040216' Тогда
			СтруктураМакетов.Вставить("СчетФактура575", "Счет-фактура");
		ИначеЕсли Дата < '20060530' Тогда
			СтруктураМакетов.Вставить("СчетФактура84", "Счет-фактура");
		Иначе
			СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	ДокументыОснования.Очистить();
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,, ОбъектКопирования.Ссылка);

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ЗаполнитьНаОснованииСчетаФактуры(Основание);
	ИначеЕсли ЗначениеЗаполнено(Основание) 
		И ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		
		Дата = Основание.Дата;
		Организация = Основание.Организация;
		
		//АБС ВСТАВКА 36164  09.12.2013 18:52:41  Стрельцов
		СтрокаОснованиеВТабличнойЧасти = ДокументыОснования.Добавить();
		СтрокаОснованиеВТабличнойЧасти.ДокументОснование = Основание;
		//ДокументыОснования.Добавить().ДокументОснование = Основание;
		//АБС ВСТАВКА 36164 КОНЕЦ 
		
		ДокументОснование = Основание;
		
		ЗаполнитьДатуИНомерВходящегоДокумента();
		
		Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
		
			СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.НДСВидСчетаФактуры.НаАванс,,Основание);
			СписокТиповНалоговыйАгент = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.НДСВидСчетаФактуры.НалоговыйАгент,,Основание);
			СписокТиповКорректировочный = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.НДСВидСчетаФактуры.Корректировочный,,Основание);
			Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
				ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс;
			ИначеЕсли СписокТиповНалоговыйАгент.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
				ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент;
			ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(Основание)) <> Неопределено 
				И ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный;
			Иначе
				ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию;
			КонецЕсли;
		
		КонецЕсли;
		
		Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
			
			ДатаНомерДокументовОплаты.Очистить();
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
				Или ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
				НомерПлатежноРасчетногоДокумента = Основание.НомерВходящегоДокумента;
				ДатаПлатежноРасчетногоДокумента =  Основание.ДатаВходящегоДокумента;
				
			ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
// {{KM WARE Семенов И.С. Заявка № 27607 18.07.2015 начало
// по идее надо, ждем ответ бухов
//				или
//				ТипЗнч(Основание) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой")
// }}KM WARE Семенов И.С. Заявка № 18.07.2015 окончание		
				Тогда
				НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
				ДатаПлатежноРасчетногоДокумента =  Основание.Дата;
				
			// {{KM WARE Агапов Н.А. Заявка №34608 30.10.2015 начало
			ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
            	НомерПлатежноРасчетногоДокумента = Основание.абс_ПлатежноеПоручение.Номер;
				ДатаПлатежноРасчетногоДокумента =  Основание.абс_ПлатежноеПоручение.Дата;
			// }}KM WARE Агапов Н.А. Заявка №34608 30.10.2015 окончание
			
			Иначе
				НомерПлатежноРасчетногоДокумента = "";
				ДатаПлатежноРасчетногоДокумента =  Неопределено;
			КонецЕсли;
			
			СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
			СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
			СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
			
			ДокументЗаполнен = Ложь;
			ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен);
			
			Если не ДокументЗаполнен Тогда
				Если Дата < '20111001' Тогда
					ТекстСообщения = "Не обнаружены данные для регистрации счета-фактуры на предварительную оплату или на суммовую разницу.";
				Иначе
					ТекстСообщения = "Не обнаружены данные для регистрации счета-фактуры на предварительную оплату.";
				КонецЕсли;
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
			
		ИначеЕсли ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
			
			ДатаНомерДокументовОплаты.Очистить();
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
			ДатаПлатежноРасчетногоДокумента = Основание.Дата;
			
			СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
			СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
			СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
			
			// АБС ВСТАВКА 20121015 Фролов
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
				Контрагент = Основание.Контрагент;
			КонецЕсли;
			// АБС ВСТАВКА 20121015 Фролов КОНЕЦ
			
			ДокументЗаполнен = Ложь;
			ОпределениеПараметровСчетаФактурыНалоговыйАгент(ДокументЗаполнен);
			
			Если Не ДокументЗаполнен Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры налогового агента.");
			КонецЕсли; 
			
			СчетФактураНеВыставляется = Истина;
			
		ИначеЕсли ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			
			//АБС ВСТАВКА 36164  09.12.2013 18:52:41  Стрельцов
			ЗаполнитьНаОснованииИсправления(Основание, СтрокаОснованиеВТабличнойЧасти);
			//ЗаполнитьНаОснованииИсправления(Основание);
			//АБС ВСТАВКА 36164 КОНЕЦ 
			
			ОпределениеПараметровСчетаФактуры();
			
		ИначеЕсли ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
			
			ОпределениеПараметровСчетаФактуры();
			
			//АБС ВСТАВКА №8676 НАЧАЛО
			Если НЕ Основание.Метаданные().ТабличныеЧасти.Найти("ДокументыРасчетовСКонтрагентом") = Неопределено Тогда
				
				Для каждого Строка Из Основание.ДокументыРасчетовСКонтрагентом Цикл
									
					СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
					Если ТипЗнч(Строка.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
						ДатаВходящегоДокумента = Строка.ДокументРасчетовСКонтрагентом.ДатаВходящегоДокумента;
						НомерВходящегоДокумента= Строка.ДокументРасчетовСКонтрагентом.НомерВходящегоДокумента;
						СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ?(ЗначениеЗаполнено(ДатаВходящегоДокумента),ДатаВходящегоДокумента,Строка.ДатаОплаты);
						СтрокаПРД.НомерПлатежноРасчетногоДокумента	= ?(ЗначениеЗаполнено(НомерВходящегоДокумента),НомерВходящегоДокумента,ОбщегоНазначения.ПолучитьНомерНаПечать(Строка.ДокументРасчетовСКонтрагентом));	
					Иначе	
						СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= Строка.ДатаОплаты;
						СтрокаПРД.НомерПлатежноРасчетногоДокумента	= ОбщегоНазначения.ПолучитьНомерНаПечать(Строка.ДокументРасчетовСКонтрагентом);
					КонецЕсли;	
					           									
				КонецЦикла;	
	
			КонецЕсли;
			//\\АБС ВСТАВКА №8676 КОНЕЦ
			
			//+++ Григорьев Д.В. (#77143527)
			Если НЕ ЗначениеЗаполнено(ДатаНомерДокументовОплаты) И ТипЗнч(Основание) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	ВЫРАЗИТЬ(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ КАК Документ.ПлатежноеПоручениеВходящее) КАК Документ,
					|	ВЫРАЗИТЬ(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ КАК Документ.ПлатежноеПоручениеВходящее).ДатаОплаты КАК ДатаОплаты,
					|	ВЫРАЗИТЬ(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ КАК Документ.ПлатежноеПоручениеВходящее).ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
					|	ВЫРАЗИТЬ(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ КАК Документ.ПлатежноеПоручениеВходящее).НомерВходящегоДокумента КАК НомерВходящегоДокумента
					|ИЗ
					|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
					|ГДЕ
					|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор = &Регистратор
					|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ ССЫЛКА Документ.ПлатежноеПоручениеВходящее";
				Запрос.УстановитьПараметр("Регистратор", Основание.РасчетныйДокумент);
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл
					НоваяСтрока = ДатаНомерДокументовОплаты.Добавить();
					НоваяСтрока.ДатаПлатежноРасчетногоДокумента = Результат.ДатаВходящегоДокумента;
					НоваяСтрока.НомерПлатежноРасчетногоДокумента = Результат.НомерВходящегоДокумента;
				КонецЦикла;
			КонецЕсли;
			//--- Григорьев Д.В. (#77143527)				
			
			//АБС ВСТАВКА №11286 НАЧАЛО
			Если НЕ ЗначениеЗаполнено(ДатаНомерДокументовОплаты) Тогда
				
				Запрос = новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВЫРАЗИТЬ(Хозрасчетный.Регистратор КАК Документ.ПлатежноеПоручениеВходящее) КАК Документ,
				|	ВЫРАЗИТЬ(Хозрасчетный.Регистратор КАК Документ.ПлатежноеПоручениеВходящее).ДатаОплаты КАК ДатаОплаты,
				|	ВЫРАЗИТЬ(Хозрасчетный.Регистратор КАК Документ.ПлатежноеПоручениеВходящее).ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
				|	ВЫРАЗИТЬ(Хозрасчетный.Регистратор КАК Документ.ПлатежноеПоручениеВходящее).НомерВходящегоДокумента КАК НомерВходящегоДокумента
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Обороты(
				|			&ДатаНачала,
				|			&ДатаОкончания,
				|			Регистратор,
				|			Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)),
				|			,
				|			Организация = &Организация
				|				И Субконто2 = &ДоговорКонтрагента,
				|			,
				|			) КАК Хозрасчетный
				|ГДЕ
				|	Хозрасчетный.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее";
				
				Запрос.УстановитьПараметр("Организация"       ,Организация);
				Запрос.УстановитьПараметр("ДатаНачала"        ,НачалоМесяца(Дата));
				Запрос.УстановитьПараметр("ДатаОкончания"     ,Новый Граница(КонецМесяца(Дата),ВидГраницы.Включая));
				Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл
					СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
					ДатаВходящегоДокумента = Результат.ДатаВходящегоДокумента;
					НомерВходящегоДокумента= Результат.НомерВходящегоДокумента;
					СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ?(ЗначениеЗаполнено(ДатаВходящегоДокумента),ДатаВходящегоДокумента,Результат.ДатаОплаты);
					СтрокаПРД.НомерПлатежноРасчетногоДокумента	= ?(ЗначениеЗаполнено(НомерВходящегоДокумента),НомерВходящегоДокумента,ОбщегоНазначения.ПолучитьНомерНаПечать(Результат.Документ));
				КонецЦикла;	
				
			КонецЕсли;	
			//\\АБС ВСТАВКА №11286
			            			
		КонецЕсли;
		
		Если КодВидаОперации = "" Тогда //абсо +// 11444  //Абс-Пр2 комментарий удален, заявка 12286
			УстановитьКодВидаОперации();
		КонецЕсли;	

	КонецЕсли;
	// Start КТТК Ермолов Е.Л.  18.06.2015 33367
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание,"Контрагент, ДоговорКонтрагента");
		Если НЕ ЗначениеЗаполнено(Основание.НомерВходящегоДокумента) Тогда 
			Если ТипЗнч(Основание.абс_ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда 
				Осн = Основание.абс_ДокументОснование;
				ДатаНомерДокументовОплаты.Очистить();
				СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
				СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= Осн.ДатаВходящегоДокумента;
				СтрокаПРД.НомерПлатежноРасчетногоДокумента	= Осн.НомерВходящегоДокумента;
			КонецЕсли;
		Иначе 
			ДатаНомерДокументовОплаты.Очистить();
			СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
			СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= Основание.ДатаВходящегоДокумента;
			СтрокаПРД.НомерПлатежноРасчетногоДокумента	= Основание.НомерВходящегоДокумента;
		КонецЕсли;
	КонецЕсли;
	// Stop КТТК Ермолов Е.Л.  18.06.2015
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
	//абсо - заявка 11444
	Выставлен = Истина;
	ДатаВыставления = Дата;
	
	//АБС ВСТАВКА №46008 НАЧАЛО «28 августа 2014 г.», Пополитов
	абс_СлужебныеФункции.абс_ЗаполнитьКодВидаОперации(ЭтотОбъект);
	//\\АБС ВСТАВКА №46008 КОНЕЦ		
		
КонецПроцедуры 

	Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
		НепроверяемыеРеквизиты = Новый Массив;
			
		Если СформированПриВводеНачальныхОстатковНДС Тогда
			НепроверяемыеРеквизиты.Добавить("ДокументыОснования.ДокументОснование");
		КонецЕсли;
		
		Если СформированПриВводеНачальныхОстатковНДС
			ИЛИ ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НаАванс  Тогда
			НепроверяемыеРеквизиты.Добавить("Авансы.Сумма");
			НепроверяемыеРеквизиты.Добавить("Авансы.СтавкаНДС");
		КонецЕсли;
		
		ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
		
		Если ВерсияПостановления = 1 Тогда
			НепроверяемыеРеквизиты.Добавить("КодСпособаВыставления");
			НепроверяемыеРеквизиты.Добавить("ДатаВыставления");
			НепроверяемыеРеквизиты.Добавить("Выставлен");
			Если СформированПриВводеНачальныхОстатковНДС ИЛИ ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				НепроверяемыеРеквизиты.Добавить("НомерИсходногоДокумента");
				НепроверяемыеРеквизиты.Добавить("ДатаИсходногоДокумента");
			КонецЕсли;
			
			НепроверяемыеРеквизиты.Добавить("НомерИсправленияИсходногоДокумента");
			НепроверяемыеРеквизиты.Добавить("ДатаИсправленияИсходногоДокумента");
			НепроверяемыеРеквизиты.Добавить("НомерИсправления");
			НепроверяемыеРеквизиты.Добавить("ДатаВыставления");
			НепроверяемыеРеквизиты.Добавить("НомерИсправляемогоКорректировочногоДокумента");			
			НепроверяемыеРеквизиты.Добавить("ДатаИсправляемогоКорректировочногоДокумента");			
		Иначе
					
			Если СформированПриВводеНачальныхОстатковНДС ИЛИ ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				Если НЕ Исправление Тогда
					НепроверяемыеРеквизиты.Добавить("НомерИсходногоДокумента");
					НепроверяемыеРеквизиты.Добавить("ДатаИсходногоДокумента");
				КонецЕсли;
				НепроверяемыеРеквизиты.Добавить("НомерИсправленияИсходногоДокумента");
				НепроверяемыеРеквизиты.Добавить("ДатаИсправленияИсходногоДокумента");
				НепроверяемыеРеквизиты.Добавить("НомерИсправляемогоКорректировочногоДокумента");			
				НепроверяемыеРеквизиты.Добавить("ДатаИсправляемогоКорректировочногоДокумента");			
			ИначеЕсли ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				//АБС ВСТАВКА 36164  10.12.2013 12:16:35  Стрельцов
				Если НЕ Исправление Тогда
					НепроверяемыеРеквизиты.Добавить("НомерИсходногоДокумента");
					НепроверяемыеРеквизиты.Добавить("ДатаИсходногоДокумента");
				КонецЕсли;
				//\\АБС ВСТАВКА 36164 КОНЕЦ
				Если НЕ УчитыватьИсправлениеИсходногоДокумента Тогда
					НепроверяемыеРеквизиты.Добавить("НомерИсправленияИсходногоДокумента");
					НепроверяемыеРеквизиты.Добавить("ДатаИсправленияИсходногоДокумента");
				КонецЕсли;
				Если НЕ Исправление Тогда
					НепроверяемыеРеквизиты.Добавить("НомерИсправляемогоКорректировочногоДокумента");			
					НепроверяемыеРеквизиты.Добавить("ДатаИсправляемогоКорректировочногоДокумента");			
				КонецЕсли;
			КонецЕсли;
			
			Если СформированПриВводеНачальныхОстатковНДС ИЛИ НЕ Исправление Тогда
				НепроверяемыеРеквизиты.Добавить("НомерИсправления");			
			КонецЕсли;
					
			Если СформированПриВводеНачальныхОстатковНДС ИЛИ НЕ Выставлен Тогда
				НепроверяемыеРеквизиты.Добавить("ДатаВыставления");
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
		
	КонецПроцедуры

	Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
		Если ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		мУдалятьДвижения = НЕ ЭтоНовый();
		
		Если НЕ мОбновлятьРеквизитыПриЗаписи 
			ИЛИ ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;

		Если ДокументыОснования.Количество() = 0 Тогда
			ДокументыОснования.Добавить();
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОснование) И ДокументыОснования.Найти(ДокументОснование) = Неопределено Тогда
			ДокументОснование = Неопределено;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			ДокументОснование = ДокументыОснования[0].ДокументОснование;
		КонецЕсли;
		
		Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			ДатаНомерДокументовОплаты.Очистить();
			ДатаПлатежноРасчетногоДокумента  = '00010101';
			НомерПлатежноРасчетногоДокумента = "";
		Иначе
			Если ДатаНомерДокументовОплаты.Количество() = 0 Тогда
				ДатаНомерДокументовОплаты.Добавить();
			КонецЕсли;
			ДатаПлатежноРасчетногоДокумента  = ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента;
			НомерПлатежноРасчетногоДокумента = ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента;
		КонецЕсли;
		
		Если (ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию
			ИЛИ ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.Корректировочный) 
			И НЕ СформированПриВводеНачальныхОстатковНДС Тогда
			ОпределениеПараметровСчетаФактуры();
		КонецЕсли;

		//АБС ВСТАВКА №46008 НАЧАЛО «28 августа 2014 г.», Пополитов
		абс_СлужебныеФункции.абс_ЗаполнитьКодВидаОперации(ЭтотОбъект);
		//\\АБС ВСТАВКА №46008 КОНЕЦ		      	
		
// {{KM WARE Трухан А.Г. Агентский блок 25.09.2015 начало    временно закоментировано Alex Lapin 13.10.2015 Лапин
		//Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
		//	Агентский=ДокументОснование.Агентский;
		//	CC =ДокументОснование.ДокументыОплаты[0];
		//	ДатаНомерДокументовОплаты.Очистить();
		//	НС = ДатаНомерДокументовОплаты.Добавить();
		//	НС.ДатаПлатежноРасчетногоДокумента = CC.ДатаОплаты;
		//	НС.НомерПлатежноРасчетногоДокумента = CC.kmw_НомерОплаты;
		//КонецЕсли; 
// }}KM WARE Трухан А.Г. Агентский блок 25.09.2015 окончание		
	КонецПроцедуры 

	Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
		
		ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
		Если Исправление Тогда
			Префикс = "И" + Префикс;
		ИначеЕсли ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
			Префикс = "А" + Префикс;
		КонецЕсли;
		ttk_ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
			
	КонецПроцедуры

	Процедура ОбработкаПроведения(Отказ)

		Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам;
		
		Если мУдалятьДвижения Тогда
			ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
		КонецЕсли;
		
		Если СформированПриВводеНачальныхОстатковНДС Тогда
			Возврат;
		КонецЕсли;
		
		ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		
		Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу
			И СтруктураШапкиДокумента.Дата >= '20111001' Тогда
			ТекстСообщения = "Счета-фактуры на суммовые разницы не выписываются, начиная с 01.10.2011 г.";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			Возврат;
		КонецЕсли;
		
		ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ПодготовитьТаблицыДокумента(ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам);
		
		ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		// Движения по документу
		Если Не Отказ Тогда
			ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам, Отказ, Заголовок);
		КонецЕсли;
		
	КонецПроцедуры 

	//АБС-Пр2 12286+
Функция НайтиОбъектыСтроительстваВДокументе(Основание)
	
	Если Основание = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Для Каждого ТабЧасть Из Основание.Метаданные().ТабличныеЧасти Цикл
		
		Если ТабЧасть.Реквизиты.Найти("СчетУчетаБУ") <> Неопределено Тогда
			
			ТабЧастьДанные = Основание[ТабЧасть.Имя];
			Для Каждого Стр Из ТабЧастьДанные Цикл
				Если Стр.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков
					Или Стр.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования
					Или Стр.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТабЧасть.Реквизиты.Найти("СчетЗатрат") <> Неопределено Тогда
			
			ТабЧастьДанные = Основание[ТабЧасть.Имя];
			Для Каждого Стр Из ТабЧастьДанные Цикл
				Если Стр.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков
					Или Стр.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования
					Или Стр.СчетЗатрат = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	                                                                                      
	
	Возврат Ложь;
	
КонецФункции
//АБС-Пр2 12286-

Функция ПолучитьПериодНДСПоДатеКвартал(ДатаПериода) Экспорт //АБС Коломиец 13841
	
	НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(ДатаПериода)), " ",""), Символы.НПП, "");
	Квартал = НачалоКвартала(ДатаПериода);
    НомерМесяца = Месяц(Квартал);

	Если НомерМесяца = 1 Тогда
		НомерКвартала = 1;
	ИначеЕсли НомерМесяца = 4 Тогда
		НомерКвартала = 2;
	ИначеЕсли НомерМесяца = 7 Тогда
		НомерКвартала = 3;
	ИначеЕсли НомерМесяца = 10 Тогда
		НомерКвартала = 4;
	КонецЕсли;
	
	КодПоиска = СокрЛП(НомерГода) + СокрЛП(НомерКвартала);
	Элемент = Справочники.ас_ПериодыОтражения.НайтиПоКоду(КодПоиска);
	
	Возврат Элемент;
	
КонецФункции

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мНадписьПредоплата = "Предварительный платеж";

мОбновлятьРеквизитыПриЗаписи = Истина;

