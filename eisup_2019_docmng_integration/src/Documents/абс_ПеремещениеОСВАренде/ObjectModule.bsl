Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем Счет;
Перем Содержание;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура проверяет заполненость шапки и табличной части документа
//
Функция ПроверитьЗаполнениеДокумента()
	
	ЕстьОшибки =Ложь;
	
	Если НЕ ЗначениеЗаполнено(Отправитель)Тогда
		Сообщить("Не выбран  отправитель");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Получатель)Тогда
		Сообщить("Не выбран  получатель");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	
	Для каждого СтрокаТабличнойЧасти Из ОС Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.АрендованноеОС) Тогда
			Сообщить("Строка " + СтрокаТабличнойЧасти.НомерСтроки + ", не указано Арендованное ОС.");
			ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
			Сообщить("Строка " + СтрокаТабличнойЧасти.НомерСтроки + ", не указан счет учета.");
			ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) Тогда
			Сообщить("Строка " + СтрокаТабличнойЧасти.НомерСтроки + ", не указан контрагент.");
			ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.Количество = 0 Тогда
			Сообщить("Строка " + СтрокаТабличнойЧасти.НомерСтроки + ", не указано количество  """ + СтрокаТабличнойЧасти.Номенклатура + ".");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Функция получает остатки по арендованным ос, из табличной части документа
//
Функция ПодготовитьТаблицу()
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.АБС_ОСАрендованные);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);

	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	абс_ПеремещениеОСВАрендеОС.АрендованноеОС,
	              |	абс_ПеремещениеОСВАрендеОС.Ссылка.Отправитель,
	              |	абс_ПеремещениеОСВАрендеОС.Контрагент,
	              |	СУММА(абс_ПеремещениеОСВАрендеОС.Количество) КАК Количество,
	              |	абс_ПеремещениеОСВАрендеОС.Счет
	              |ПОМЕСТИТЬ ВТНоменклатура
	              |ИЗ
	              |	Документ.абс_ПеремещениеОСВАренде.ОС КАК абс_ПеремещениеОСВАрендеОС
	              |ГДЕ
	              |	абс_ПеремещениеОСВАрендеОС.Ссылка = &Ссылка
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	абс_ПеремещениеОСВАрендеОС.АрендованноеОС,
	              |	абс_ПеремещениеОСВАрендеОС.Счет,
	              |	абс_ПеремещениеОСВАрендеОС.Контрагент,
	              |	абс_ПеремещениеОСВАрендеОС.Ссылка.Отправитель
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ВложенныйЗапрос.Количество,
	              |	СУММА(ВложенныйЗапрос.СуммаОстВсего) КАК СуммаОстВсего,
	              |	СУММА(ВложенныйЗапрос.КоличествоОстВсего) КАК КоличествоОстВсего,
	              |	ВложенныйЗапрос.АрендованноеОС,
	              |	ВложенныйЗапрос.Контрагент,
	              |	ВложенныйЗапрос.Отправитель,
	              |	ВложенныйЗапрос.Счет
	              |ИЗ
	              |	(ВЫБРАТЬ
	              |		ВТНоменклатура.АрендованноеОС КАК АрендованноеОС,
	              |		ВТНоменклатура.Количество КАК Количество,
	              |		СУММА(ЕСТЬNULL(ЗабалансовыйУчетОстатки.СуммаОстатокДт, 0)) КАК СуммаОстВсего,
	              |		СУММА(ЕСТЬNULL(ЗабалансовыйУчетОстатки.КоличествоОстатокДт, 0)) КАК КоличествоОстВсего,
	              |		ВТНоменклатура.Контрагент КАК Контрагент,
	              |		ВТНоменклатура.Отправитель КАК Отправитель,
	              |		ВТНоменклатура.Счет КАК Счет
	              |	ИЗ
	              |		ВТНоменклатура КАК ВТНоменклатура
	              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.ЗабалансовыйУчет.Остатки(&Дата, , &ВидыСубконто, Организация = &Организация) КАК ЗабалансовыйУчетОстатки
	              |			ПО ВТНоменклатура.АрендованноеОС = ЗабалансовыйУчетОстатки.Субконто1
	              |				И ВТНоменклатура.Отправитель = ЗабалансовыйУчетОстатки.Субконто2
	              |				И ВТНоменклатура.Контрагент = ЗабалансовыйУчетОстатки.Субконто3
	              |				И ВТНоменклатура.Счет = ЗабалансовыйУчетОстатки.Счет
	              |	
	              |	СГРУППИРОВАТЬ ПО
	              |		ВТНоменклатура.Количество,
	              |		ВТНоменклатура.АрендованноеОС,
	              |		ВТНоменклатура.Контрагент,
	              |		ВТНоменклатура.Отправитель,
	              |		ВТНоменклатура.Счет) КАК ВложенныйЗапрос
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ВложенныйЗапрос.Количество,
	              |	ВложенныйЗапрос.АрендованноеОС,
	              |	ВложенныйЗапрос.Контрагент,
	              |	ВложенныйЗапрос.Отправитель,
	              |	ВложенныйЗапрос.Счет";
		Запрос.УстановитьПараметр("Дата",МоментВремени());	
		Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	 Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//АБС+
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.абс_ПеремещениеОСВАренде", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.абс_ПеремещениеОСВАренде", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект ), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("М11", "M-11 (Требование-накладная)");
		
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()
//АБС-

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура - обработчик события "Обработка проведения" 
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	Если Не ЛизинговоеИмущество Тогда
		Отказ = ПроверитьЗаполнениеДокумента();
		Если Не Отказ Тогда
			
			ТаблицаОстатков = ПодготовитьТаблицу();
			
			Для Каждого СтрокаТаблицы Из  ТаблицаОстатков Цикл
				
				КоличествоОстВсего = СтрокаТаблицы.КоличествоОстВсего;
				СуммаОстВсего      = СтрокаТаблицы.СуммаОстВсего;
				Количество         = СтрокаТаблицы.Количество;
				Если КоличествоОстВсего < Количество Тогда
					
					ТекстСообщения = "У контрагента "+СтрокаТаблицы.Контрагент+", по сотруднику "+СтрокаТаблицы.Отправитель+" "+КоличествоОстВсего+
					" из необходимых "+Количество+" "+СтрокаТаблицы.АрендованноеОС + " ("+СтрокаТаблицы.Счет+")";
					Сообщить(ТекстСообщения);
					Отказ = Истина;
					
				КонецЕсли; 
				
			КонецЦикла;
			
			Если Не Отказ Тогда
				
				Для Каждого СтрокаТаблицы Из  ТаблицаОстатков Цикл
					Проводка = Движения.ЗабалансовыйУчет.Добавить();
					Проводка.ДатаЗаписи = Дата;
					Проводка.Организация = Организация;
					Проводка.Период      = Дата;
					Проводка.Регистратор = Ссылка;
					Проводка.СчетДт      = СтрокаТаблицы.Счет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"АБС_ОСАрендованные",СтрокаТаблицы.АрендованноеОС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"РаботникиОрганизации",Получатель);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтрокаТаблицы.Контрагент);
					
					Проводка.СчетКт      = СтрокаТаблицы.Счет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"АБС_ОСАрендованные",СтрокаТаблицы.АрендованноеОС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"РаботникиОрганизации",СтрокаТаблицы.Отправитель);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтрокаТаблицы.Контрагент);
										
					Проводка.КоличествоДт = СтрокаТаблицы.Количество;
					Проводка.КоличествоКт = СтрокаТаблицы.Количество;
					Проводка.Сумма        = СтрокаТаблицы.СуммаОстВсего*СтрокаТаблицы.Количество/?(СтрокаТаблицы.КоличествоОстВсего <> 0, СтрокаТаблицы.КоличествоОстВсего, 1);
					Проводка.Содержание   = "Перемещение по счету "+СтрокаТаблицы.Счет;

				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура  - обработчик события "Перед записью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
   
	 
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры  // ПередЗаписью



