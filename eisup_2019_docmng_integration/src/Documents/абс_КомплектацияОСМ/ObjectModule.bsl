
//////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.абс_КомплектацияОС") Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьКомплектациюОСМПоКомплектацииОС(ДанныеЗаполнения);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	Если Не ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Номер) Тогда
		УстановитьНовыйНомер(Организация.Префикс);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда 
		Возврат;
	КонецЕсли;	
	
	Для Каждого НаборЗаписей Из Движения Цикл
		НаборЗаписей.Очистить();
		НаборЗаписей.Записывать = Истина;
	КонецЦикла;
	
	Движения.абс_СтоимостьОСМеждународный.Записывать = Истина;
	Движения.ОсновныеСредстваМеждународныйУчет.Записывать = Истина;
	Движения.Международный.Записывать = Истина;
	
	НачалоПериода = НачалоМесяца(Дата);
	КонецПериода = КонецМесяца(Дата);
	
	СтруктураЗапросов = Документы.абс_КомплектацияОСМ.ПолучитьСтруктуруЗапросовПроведения();
	
	СтруктураПараметровСтрока = ПолучитьМакет("СтруктураПараметров").ПолучитьТекст();
	СтруктураПараметров = ЗначениеИзСтрокиВнутр(СтруктураПараметровСтрока);
	
	ТаблицаСроков = Новый ТаблицаЗначений;
	ТаблицаСроков.Колонки.Добавить("ГруппаОС", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыОС"));
	ТаблицаСроков.Колонки.Добавить("ЦельИспользования", Новый ОписаниеТипов("СправочникСсылка.ЦелиИспользования"));
	ТаблицаСроков.Колонки.Добавить("СрокИспользования", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	
	Для Сч = 1 По 12 Цикл
		СтрокаТаблицы = ТаблицаСроков.Добавить();
		СтрокаТаблицы.ГруппаОС = СтруктураПараметров["ГруппаУчета"+Сч];
		СтрокаТаблицы.ЦельИспользования = СтруктураПараметров["Цель"+Сч];
		СтрокаТаблицы.СрокИспользования = СтруктураПараметров["СПИ"+Сч];
	КонецЦикла;
	
	ПустыеСубконто = ПолучитьПустыеСубконто();
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", НачалоПериода);
	Запрос.УстановитьПараметр("ТаблицаСроков", ТаблицаСроков);
	Запрос.УстановитьПараметр("ПустыеСубконто", ПустыеСубконто);
	
	ТекстыЗапросов = Новый СписокЗначений;
	ТекстыЗапросов.Добавить(СтруктураЗапросов.абс_МеждународныйУчет_ТекстЗапросаВидыСубконтоСчетов, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.абс_МеждународныйУчет_ТекстЗапросаСоответствиеСчетовХозрасчетный, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.абс_МеждународныйУчет_ТекстЗапросаСрокиПолезногоИспользования, "");
	
	Запрос.Текст = "";
	Для Каждого ЭлементСписка Из ТекстыЗапросов Цикл
		Запрос.Текст = Запрос.Текст+ЭлементСписка.Значение;
	КонецЦикла;
	
	Запрос.ВыполнитьПакет();
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("МоментДокументаДляРН", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МоментДокумента", МоментВремени());
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ТекстыЗапросов = Новый СписокЗначений;
	
	/////////////////////////////////////////////////////////////////////////
	
	Запрос.УстановитьПараметр("ГлавноеОсновноеСредство", ДокументОснование.ГлавноеОсновноеСредство);
	
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Комплектация_ТекстЗапросаТабличнаяЧастьОсновныеСредства, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.абс_ВнеоборотныеАктивы_ТекстЗапросаОсновныеСредстваМСФОПоТаблицеОС, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Комплектация_ТекстЗапросаШапкаДокумента, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.абс_ВнеоборотныеАктивы_ТекстЗапросаСтоимостьОСМСФОПоТаблицеОС, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Комплектация_ТекстЗапросаСтоимостьНовогоОсновногоСредства, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Комплектация_ТекстЗапросаПервоначальнаяСтоимостьНовогоОсновногоСредства, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Комплектация_ТекстЗапросаТаблица_абс_СтоимостьОСМеждународный, "Таблица_абс_СтоимостьОСМеждународный");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Комплектация_ТекстЗапросаТаблица_ОсновныеСредстваМеждународныйУчет, "Таблица_ОсновныеСредстваМеждународныйУчет");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Комплектация_ТекстЗапросаТаблица_Международный, "Таблица_Международный");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Комплектация_УдалениеВременныхТаблиц, "");
	
	
	/////////////////////////////////////////////////////////////////////////
	
	
	Запрос.Текст = "";
	Для Каждого ТекстЗапроса Из ТекстыЗапросов Цикл
		Запрос.Текст = Запрос.Текст+ТекстЗапроса.Значение;
	КонецЦикла;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыДанных = Новый Структура;
	
	Для Каждого ТекстЗапроса Из ТекстыЗапросов Цикл
		
		ИмяТаблицы = ТекстЗапроса.Представление;
		
		Если Не ПустаяСтрока(ИмяТаблицы) Тогда
			Индекс = ТекстыЗапросов.Индекс(ТекстЗапроса);
			ТаблицыДанных.Вставить(ИмяТаблицы, Результат[Индекс].Выгрузить());
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицыДанных.Свойство("Таблица_ОсновныеСредстваМеждународныйУчет") Тогда
		
		ТаблицаРегистра = ТаблицыДанных.Таблица_ОсновныеСредстваМеждународныйУчет;
		Если ТаблицаРегистра.Количество()>0 Тогда
			
			НаборЗаписей = Движения.ОсновныеСредстваМеждународныйУчет;
			НаборЗаписей.Загрузить(ТаблицаРегистра);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицыДанных.Свойство("Таблица_абс_СтоимостьОСМеждународный") Тогда
		
		ТаблицаРегистра = ТаблицыДанных.Таблица_абс_СтоимостьОСМеждународный;
		Если ТаблицаРегистра.Количество()>0 Тогда
			
			НаборЗаписей = Движения.абс_СтоимостьОСМеждународный;
			НаборЗаписей.Загрузить(ТаблицаРегистра);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицыДанных.Свойство("Таблица_Международный") Тогда
		
		ТаблицаРегистра = ТаблицыДанных.Таблица_Международный;
		Если ТаблицаРегистра.Количество()>0 Тогда
			
			НаборЗаписей = Движения.Международный;
			НаборЗаписей.Загрузить(ТаблицаРегистра);
			
		КонецЕсли;
		
	КонецЕсли;
	
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// Обработка заполнения

Процедура ЗаполнитьКомплектациюОСМПоКомплектацииОС(ДанныеЗаполнения)
	
	ДокОснование = ДанныеЗаполнения.ПолучитьОбъект();
	ЗаполнитьШапкуИОчиститьТЧ(ДокОснование);
		
	ОсновноеСредство = ДокОснование.ОсновноеСредство;
	ДанныеРегистра = РегистрыСведений.МестонахождениеОСБухгалтерскийУчет.ПолучитьПоследнее(ДокОснование.Дата, Новый Структура("ОсновноеСредство, Организация", ОсновноеСредство, ДокОснование.Организация));
	МОЛ = ДанныеРегистра.МОЛ;
	Местонахождение = ДанныеРегистра.Местонахождение;
	ДанныеРегистра = РегистрыСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.ПолучитьПоследнее(ДокОснование.Дата, Новый Структура("ОсновноеСредство, Организация", ОсновноеСредство, ДокОснование.Организация));
	КоэффициентУскорения = ДанныеРегистра.КоэффициентУскорения;
	Если КоэффициентУскорения=0 Тогда
		КоэффициентУскорения = 1;
	КонецЕсли;
	
	ДанныеРегистра = РегистрыСведений.НачислениеАмортизацииОСБухгалтерскийУчет.ПолучитьПоследнее(ДокОснование.Дата, Новый Структура("ОсновноеСредство, Организация", ОсновноеСредство, ДокОснование.Организация));
	НачислятьАмортизацию = ДанныеРегистра.НачислятьАмортизацию;
	
	СчетСниженияСтоимости = ПланыСчетов.Международный.Служебный;
	
	ДанныеРегистра = РегистрыСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.ПолучитьПоследнее(ДокОснование.Дата, Новый Структура("ОсновноеСредство, Организация", ДокОснование.ОсновноеСредство, ДокОснование.Организация));
	
	Способ = ДанныеРегистра.СпособыОтраженияРасходовПоАмортизации.Способы[0];
	СчетЗатрат = ПланыСчетов.Международный.НайтиПоКоду("М"+Способ.СчетЗатрат.Код);
	Субконто1 = Способ.Субконто1;
	Субконто2 = Способ.Субконто2;
	Субконто3 = Способ.Субконто3;
	ВидыСубконто = СчетЗатрат.ВидыСубконто;
	КоличествоСубконто = ВидыСубконто.Количество();
	Для Сч = 1 По КоличествоСубконто Цикл
		Если ЭтотОбъект["Субконто"+Сч]=Неопределено Или Не ЗначениеЗаполнено(ЭтотОбъект["Субконто"+Сч]) Тогда
			Если ВидыСубконто[Сч-1].ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоМеждународные.СтатьиЗатрат Тогда
				ЭтотОбъект["Субконто"+Сч] = Способ.СтатьяЗатрат;
			ИначеЕсли ВидыСубконто[Сч-1].ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоМеждународные.НоменклатурныеГруппы Тогда
				ЭтотОбъект["Субконто"+Сч] = Способ.НоменклатурнаяГруппа;
			ИначеЕсли ВидыСубконто[Сч-1].ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Подразделения Тогда
				ЭтотОбъект["Субконто"+Сч] = Способ.ПодразделениеОрганизации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаОС Из ДокОснование.Комплектация Цикл
		
		СтрокаТЧ = ОсновныеСредства.Добавить();
		СтрокаТЧ.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуИОчиститьТЧ(ДокОснование)
	
	Дата = ДокОснование.Дата;
	Организация = ДокОснование.Организация;
	ДокументОснование = ДокОснование.Ссылка;
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	Если Номер = "" Тогда
		УстановитьНовыйНомер(Организация.Префикс);
	КонецЕсли;
	
	ОсновныеСредства.Очистить();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

Функция ПолучитьПустыеСубконто()

	ПустыеСубконто = Новый СписокЗначений;
	ВыборкаСубконто = ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Выбрать();
	Пока ВыборкаСубконто.Следующий() Цикл
		ПустыеСубконто.Добавить(ВыборкаСубконто.ТипЗначения.ПривестиЗначение());
	КонецЦикла;
	ПустыеСубконто.Добавить(Неопределено);

	Возврат ПустыеСубконто;

КонецФункции // ПолучитьПустыеСубконто()




//////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

//Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
//	
//	Если ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.абс_КомплектацияОС") Тогда
//		
//		СтандартнаяОбработка = Ложь;
//				
//		Запрос = Новый Запрос("ВЫБРАТЬ
//							  |	абс_КомплектацияОС.Дата,
//							  |	абс_КомплектацияОС.Организация,
//							  |	абс_КомплектацияОС.ОсновноеСредство
//							  |ПОМЕСТИТЬ ДанныеОснования
//							  |ИЗ
//							  |	Документ.абс_КомплектацияОС КАК абс_КомплектацияОС
//							  |ГДЕ
//							  |	абс_КомплектацияОС.Ссылка = &Основание
//							  |;
//							  |
//							  |////////////////////////////////////////////////////////////////////////////////
//							  |ВЫБРАТЬ
//							  |	абс_ОсновныеСредстваРЖДСрезПоследних.МестонахождениеОбъекта,
//							  |	абс_ОсновныеСредстваРЖДСрезПоследних.МОЛ,
//							  |	абс_ОсновныеСредстваРЖДСрезПоследних.СчетЗатрат,
//							  |	абс_ОсновныеСредстваРЖДСрезПоследних.Субконто1,
//							  |	абс_ОсновныеСредстваРЖДСрезПоследних.Субконто2,
//							  |	абс_ОсновныеСредстваРЖДСрезПоследних.Субконто3,
//							  |	абс_ОсновныеСредстваРЖДСрезПоследних.СчетСниженияСтоимости,
//							  |	абс_ОсновныеСредстваРЖДСрезПоследних.ОсновноеСредство
//							  |ПОМЕСТИТЬ ДанныеОСРЖД
//							  |ИЗ
//							  |	РегистрСведений.абс_ОсновныеСредстваРЖД.СрезПоследних(
//							  |			&ДатаДокумента,
//							  |			ОсновноеСредство В
//							  |				(ВЫБРАТЬ
//							  |					ДанныеОснования.ОсновноеСредство
//							  |				ИЗ
//							  |					ДанныеОснования КАК ДанныеОснования)) КАК абс_ОсновныеСредстваРЖДСрезПоследних
//							  |;
//							  |
//							  |////////////////////////////////////////////////////////////////////////////////
//							  |ВЫБРАТЬ
//							  |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
//							  |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ,
//							  |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
//							  |ПОМЕСТИТЬ МестонахождениеОСБУ
//							  |ИЗ
//							  |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
//							  |			&ПериодОснования,
//							  |			(ОсновноеСредство, Организация) В
//							  |				(ВЫБРАТЬ
//							  |					ДанныеОснования.ОсновноеСредство,
//							  |					ДанныеОснования.Организация
//							  |				ИЗ
//							  |					ДанныеОснования КАК ДанныеОснования)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
//							  |;
//							  |
//							  |////////////////////////////////////////////////////////////////////////////////
//							  |ВЫБРАТЬ
//							  |	СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат КАК СчетЗатратБУ,
//							  |	СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1,
//							  |	СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2,
//							  |	СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3,
//							  |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
//							  |ПОМЕСТИТЬ ОтражениеЗатрат
//							  |ИЗ
//							  |	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
//							  |			&ПериодОснования,
//							  |			(Организация, ОсновноеСредство) В
//							  |				(ВЫБРАТЬ
//							  |					ДанныеОснования.Организация,
//							  |					ДанныеОснования.ОсновноеСредство
//							  |				ИЗ
//							  |					ДанныеОснования КАК ДанныеОснования)) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
//							  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
//							  |		ПО СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации = СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка
//							  |			И (СпособыОтраженияРасходовПоАмортизацииСпособы.НомерСтроки = 1)
//							  |;
//							  |
//							  |////////////////////////////////////////////////////////////////////////////////
//							  |ВЫБРАТЬ
//							  |	ДанныеОснования.Дата,
//							  |	ДанныеОснования.Организация,
//							  |	ДанныеОснования.ОсновноеСредство,
//							  |	ДанныеОСРЖД.СчетЗатрат,
//							  |	ЕСТЬNULL(ДанныеОСРЖД.Субконто1, ОтражениеЗатрат.Субконто1) КАК Субконто1,
//							  |	ЕСТЬNULL(ДанныеОСРЖД.Субконто2, ОтражениеЗатрат.Субконто2) КАК Субконто2,
//							  |	ЕСТЬNULL(ДанныеОСРЖД.Субконто3, ОтражениеЗатрат.Субконто3) КАК Субконто3,
//							  |	ДанныеОСРЖД.СчетСниженияСтоимости,
//							  |	МестонахождениеОСБУ.Местонахождение,
//							  |	МестонахождениеОСБУ.МОЛ,
//							  |	ОтражениеЗатрат.СчетЗатратБУ
//							  |ИЗ
//							  |	ДанныеОснования КАК ДанныеОснования
//							  |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеОСРЖД КАК ДанныеОСРЖД
//							  |		ПО ДанныеОснования.ОсновноеСредство = ДанныеОСРЖД.ОсновноеСредство
//							  |		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБУ КАК МестонахождениеОСБУ
//							  |		ПО ДанныеОснования.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
//							  |		ЛЕВОЕ СОЕДИНЕНИЕ ОтражениеЗатрат КАК ОтражениеЗатрат
//							  |		ПО ДанныеОснования.ОсновноеСредство = ОтражениеЗатрат.ОсновноеСредство");
//		Запрос.УстановитьПараметр("ДатаДокумента", Дата);
//		Запрос.УстановитьПараметр("ПериодОснования", Новый Граница(ДанныеЗаполнения.Дата, ВидГраницы.Включая));
//		Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
//			Если Не ЗначениеЗаполнено(СчетЗатрат) Тогда
//				СчетЗатрат = абс_МеждународныйУчетОСРЖД.ПреобразоватьСчетаБУвСчетМСФОРЖД(Выборка.СчетЗатратБУ);
//			КонецЕсли;
//		КонецЕсли;
//		
//		Ответственный = ПараметрыСеанса.ТекущийПользователь;
//		ДокументОснование = ДанныеЗаполнения;
//		ОсновныеСредства.Загрузить(ДанныеЗаполнения.Комплектация.Выгрузить());
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ОбработкаПроведения(Отказ, РежимПроведения)
//	
//	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
//		абс_ПроведениеДокументов.УдалитьДвиженияРегистратора(Ссылка);
//	КонецЕсли;
//	
//	абс_ПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
//	Документы.абс_КомплектацияОСРЖД.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
//	
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	абс_ПроведениеДокументов.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект, ДополнительныеСвойства.ЭтоНовый);
//	
//	абс_ВнеоборотныеАктивы.Отразить_абс_ОсновныеСредстваРЖД(ДополнительныеСвойства, Движения, Отказ);
//	абс_ВнеоборотныеАктивы.Отразить_абс_СтоимостьОСРЖД(ДополнительныеСвойства, Движения, Отказ);
//	абс_ВнеоборотныеАктивы.Отразить_абс_МеждународныйОСРЖД(ДополнительныеСвойства, Движения, Отказ);
//	
//	абс_ПроведениеДокументов.ЗаписатьНаборыЗаписей(ЭтотОбъект);	
//		
//КонецПроцедуры

//Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
//	
//	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
//	
//	Если ОбменДанными.Загрузка Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ПустаяСтрока(Номер) Тогда
//		УстановитьНовыйНомер(Организация.Префикс);
//	КонецЕсли;
//	
//КонецПроцедуры
