
Процедура ПроверитьОстаток(Результат,Стр,Отказ)
	
	Если ЗначениеЗаполнено(Стр.СчетДт) ИЛИ ЗначениеЗаполнено(Стр.СчетКт) Тогда
		Если Стр.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_) ИЛИ Стр.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_) Тогда
			
			СтрПоиск = Новый Структура("Счет,Субконто1,Субконто2");
			
			Если Стр.СчетДт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				СтрПоиск.Счет  = Стр.СчетДт
			ИначеЕсли Стр.СчетКт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда	
				СтрПоиск.Счет  = Стр.СчетКт
			КонецЕсли;
			
			СтрПоиск.Субконто1 = Стр.Подразделение;
			СтрПоиск.Субконто2 = Стр.НоменклатурнаяГруппа; 
			
			Строки = Результат.НайтиСтроки(СтрПоиск);
			
			Если Строки.Количество() = 0 Тогда
				Сообщить("Не хватает остатка по счету " + СтрПоиск.Счет.Код + "/"+Строка(Стр.Подразделение) + "/" + Строка(Стр.НоменклатурнаяГруппа));
				Отказ = Истина;
			КонецЕсли;
			
			Если Строки.Количество() <> 0 Тогда
				Если Строки[0].СуммаОстаток < Стр.ОбщаяСуммаКРаспределению Тогда
					Сообщить("Не хватает остатка по счету " + СтрПоиск.Счет.Код + "/"+Строка(Стр.Подразделение) + "/" + Строка(Стр.НоменклатурнаяГруппа));
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Стр.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) ИЛИ Стр.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) Тогда
			
			СтрПоиск = Новый Структура("Счет,Субконто1,Субконто3");
			
			СтрПоиск.Субконто1 = Стр.Подразделение;
			СтрПоиск.Субконто3 = Стр.ВидДеятельности;
			
			Если Стр.СчетДт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				СтрПоиск.Счет  = Стр.СчетДт
			ИначеЕсли Стр.СчетКт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда	
				СтрПоиск.Счет  = Стр.СчетКт
			КонецЕсли;
			
			СтрПоиск.Субконто1 = Стр.Подразделение;
			СтрПоиск.Субконто3 = Стр.ВидДеятельности;
			
			Строки = Результат.НайтиСтроки(СтрПоиск);
			
			Если Строки.Количество() = 0 Тогда
				Сообщить("Не хватает остатка по счету " + СтрПоиск.Счет.Код + "/"+Строка(Стр.Подразделение) + "/"+Строка(Стр.ВидДеятельности) );
				Отказ = Истина;
			КонецЕсли;
			
			Если Строки.Количество() <> 0 Тогда
				Если Строки[0].СуммаОстаток < Стр.ОбщаяСуммаКРаспределению Тогда
					Сообщить("Не хватает остатка по счету " + СтрПоиск.Счет.Код + "/"+Строка(Стр.Подразделение) + "/"+Строка(Стр.ВидДеятельности) );
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Стр.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) ИЛИ Стр.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) Тогда 
			
			СтрПоиск = Новый Структура("Счет,Субконто1");
			
			Если Стр.СчетДт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				СтрПоиск.Счет  = Стр.СчетДт
			ИначеЕсли Стр.СчетКт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда	
				СтрПоиск.Счет  = Стр.СчетКт
			КонецЕсли;
			
			СтрПоиск.Субконто1 = Стр.Подразделение;
			
			Строки = Результат.НайтиСтроки(СтрПоиск);
			
			Если Строки.Количество() = 0 Тогда
				Сообщить("Не хватает остатка по счету " + СтрПоиск.Счет.Код + "/"+Строка(Стр.Подразделение));
				Отказ = Истина;
			КонецЕсли;
			
			Если Строки.Количество() <> 0 Тогда
				Если Строки[0].СуммаОстаток < Стр.ОбщаяСуммаКРаспределению Тогда
					Сообщить("Не хватает остатка по счету " + СтрПоиск.Счет.Код + "/"+Строка(Стр.Подразделение));
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Стр.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыНаПродажу) ИЛИ Стр.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыНаПродажу) Тогда
			
			СтрПоиск = Новый Структура("Счет");
			
			Если Стр.СчетДт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				СтрПоиск.Счет  = Стр.СчетДт
			ИначеЕсли Стр.СчетКт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда	
				СтрПоиск.Счет  = Стр.СчетКт
			КонецЕсли;
			
			
			Строки = Результат.НайтиСтроки(СтрПоиск);
			
			Если Строки.Количество() = 0 Тогда
				Сообщить("Не хватает остатка по счету " + СтрПоиск.Счет.Код);
				Отказ = Истина;
			КонецЕсли;
			
			Если Строки.Количество() <> 0 Тогда
				Если Строки[0].СуммаОстаток < Стр.ОбщаяСуммаКРаспределению Тогда
					Сообщить("Не хватает остатка по счету " + СтрПоиск.Счет.Код);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли  Стр.СчетДт = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД ИЛИ Стр.СчетКт = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД  Тогда
			
			СтрПоиск = Новый Структура("Счет");
			
			Если Стр.СчетДт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				СтрПоиск.Счет  = Стр.СчетДт
			ИначеЕсли Стр.СчетКт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда	
				СтрПоиск.Счет  = Стр.СчетКт
			КонецЕсли;
			
			
			Строки = Результат.НайтиСтроки(СтрПоиск);
			
			Если Строки.Количество() = 0 Тогда
				Сообщить("Не хватает остатка по счету " + СтрПоиск.Счет.Код);
				Отказ = Истина;
			КонецЕсли;
			
			Если Строки.Количество() <> 0 Тогда
				Если Строки[0].СуммаОстаток < Стр.ОбщаяСуммаКРаспределению Тогда
					Сообщить("Не хватает остатка по счету " + СтрПоиск.Счет.Код);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли  Стр.СчетДт = ПланыСчетов.Хозрасчетный.Продажи_НДС ИЛИ Стр.СчетКт = ПланыСчетов.Хозрасчетный.Продажи_НДС  Тогда
			
			СтрПоиск = Новый Структура("Счет");
			
			Если Стр.СчетДт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				СтрПоиск.Счет  = Стр.СчетДт
			ИначеЕсли Стр.СчетКт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда	
				СтрПоиск.Счет  = Стр.СчетКт
			КонецЕсли;
			
			
			Строки = Результат.НайтиСтроки(СтрПоиск);
			
			Если Строки.Количество() = 0 Тогда
				Сообщить("Не хватает остатка по счету " + СтрПоиск.Счет.Код);
			КонецЕсли;
			
			Если Строки.Количество() <> 0 Тогда
				Если Строки[0].СуммаОстаток < Стр.ОбщаяСуммаКРаспределению Тогда
					Сообщить("Не хватает остатка по счету " + СтрПоиск.Счет.Код);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Стр.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы ИЛИ Стр.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы Тогда
			
		ИначеЕсли Стр.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеРасходы) ИЛИ Стр.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеРасходы) Тогда
			
		КонецЕсли;
	КонецЕсли;
 
КонецПроцедуры
 
Процедура ПроверкаОстатков(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НаДату, Счет В (&МассивСчетов), , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	МассивСчетов  = Новый Массив;
	
	Если ВидОперацииРаспределния = 0 Тогда
		Для каждого Стр Из Доходы Цикл
			Если Стр.СчетДт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				МассивСчетов.Добавить(Стр.СчетДт);
			ИначеЕсли Стр.СчетКт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда	
				МассивСчетов.Добавить(Стр.СчетКт);
			КонецЕсли;
		КонецЦикла;
	Иначе		
		Для каждого Стр Из Расходы Цикл
			Если Стр.СчетДт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				МассивСчетов.Добавить(Стр.СчетДт);
			ИначеЕсли Стр.СчетКт <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда	
				МассивСчетов.Добавить(Стр.СчетКт);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаДату", Новый Граница(Дата,ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.НайтиПоНаименованию("КТТК"));
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ВидОперацииРаспределния = 0 Тогда
		Для каждого Стр Из Доходы Цикл
			ПроверитьОстаток(Результат,Стр,Отказ);
		КонецЦикла;
	Иначе		
		Для каждого Стр Из Расходы Цикл
			ПроверитьОстаток(Результат,Стр,Отказ);			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
  
Процедура ПроверитьЗаполнениеАналитики(Стр, Отказ)
	//1) По Дт и Кт 79
	//2) По Дт 20, 25, 26, 44, 91.02
	//3) По Кт 90.01.1
	
	Если ЗначениеЗаполнено(Стр.СчетДт) ИЛИ ЗначениеЗаполнено(Стр.СчетКт) Тогда
		Если Стр.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_) ИЛИ Стр.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_) Тогда
			
			НГ = Стр.НоменклатурнаяГруппа;
			
			Если Статус = Перечисления.абс_СтатусыРаспределенияДоходовРасходов.Подготовка Тогда
				
				Если Не ЗначениеЗаполнено(НГ)  Тогда
					Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенена номенклатурная группа!");	
					Отказ = Истина;	
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(Стр.Подразделение) Тогда
					Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенено подразделение!");	
					Отказ = Истина;	
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(Стр.СтатьяЗатрат) Тогда
					Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенена статья затрат!");	
					Отказ = Истина;	
				КонецЕсли;	
				
				////Бобылев А.А. 19.02.2018 77244218 
				//Если ЗначениеЗаполнено(НГ) Тогда
				//	Если ЗначениеЗаполнено(НГ.абс_ДатаЗакрытия) И КонецДня(НГ.абс_ДатаЗакрытия) < Дата Тогда      
				//		Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Номенклатурная группа " + НГ + " (" + СокрЛП(НГ.Код) + ") закрыта " + НГ.абс_ДатаЗакрытия + ".", СтатусСообщения.Внимание);
				//		РезОтказа=Истина;
				//	КонецЕсли;
				//КонецЕсли;
				////Бобылев А.А. -------------------------------
			Иначе
				
				Если Не ЗначениеЗаполнено(Стр.ПодразделениеПриемник) Тогда
					Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенено подразделение приемник!");	
					Отказ = Истина;	
				КонецЕсли;	
				
			КонецЕсли;	
			
		ИначеЕсли Стр.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) ИЛИ Стр.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) Тогда
			
			Если Статус = Перечисления.абс_СтатусыРаспределенияДоходовРасходов.Подготовка Тогда
				Если Не ЗначениеЗаполнено(Стр.Подразделение) Тогда
					Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенено подразделение!");	
					Отказ = Истина;	
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(Стр.СтатьяЗатрат) Тогда
					Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенена статья затрат!");	
					Отказ = Истина;	
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(Стр.ВидДеятельности) Тогда
					Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенен вид деятельности!");	
					Отказ = Истина;	
				КонецЕсли;	
				
			Иначе
				
				Если Не ЗначениеЗаполнено(Стр.ПодразделениеПриемник) Тогда
					Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенено подразделение приемник!");	
					Отказ = Истина;	
				КонецЕсли;
				
			КонецЕсли;	
			
		ИначеЕсли Стр.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) ИЛИ Стр.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) Тогда 
			
			Если Статус = Перечисления.абс_СтатусыРаспределенияДоходовРасходов.Подготовка Тогда
				Если Не ЗначениеЗаполнено(Стр.Подразделение) Тогда
					Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенено подразделение!");	
					Отказ = Истина;	
				КонецЕсли;	
				
				
				Если Не ЗначениеЗаполнено(Стр.СтатьяЗатрат) Тогда
					Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенена статья затрат!");	
					Отказ = Истина;	
				КонецЕсли;	
			Иначе
				Если Не ЗначениеЗаполнено(Стр.ПодразделениеПриемник) Тогда
					Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенено подразделение приемник!");	
					Отказ = Истина;	
				КонецЕсли;	
			КонецЕсли;	
		
		ИначеЕсли Стр.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыНаПродажу) ИЛИ Стр.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыНаПродажу) Тогда
			
			Если Не ЗначениеЗаполнено(Стр.СтатьяЗатрат) Тогда
				Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенена статья затрат!");	
				Отказ = Истина;	
			КонецЕсли;	
			
		ИначеЕсли  Стр.СчетДт = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД ИЛИ Стр.СчетКт = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД  Тогда
			НГ = Стр.НоменклатурнаяГруппа;
			
			Если Не ЗначениеЗаполнено(НГ)  Тогда
				Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенена номенклатурная группа!");	
				Отказ = Истина;	
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(Стр.СтавкаНДС) Тогда
				Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенена ставка НДС!");	
				Отказ = Истина;	
			КонецЕсли;	
			
			////Бобылев А.А. 19.02.2018 77244218 
			//Если ЗначениеЗаполнено(НГ) Тогда
			//	Если ЗначениеЗаполнено(НГ.абс_ДатаЗакрытия) И КонецДня(НГ.абс_ДатаЗакрытия) < Дата Тогда      
			//		Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Номенклатурная группа " + НГ + " (" + СокрЛП(НГ.Код) + ") закрыта " + НГ.абс_ДатаЗакрытия + ".", СтатусСообщения.Внимание);
			//		РезОтказа=Истина;
			//	КонецЕсли;
			//КонецЕсли;
			////Бобылев А.А. ----------------------------
			
		ИначеЕсли  Стр.СчетДт = ПланыСчетов.Хозрасчетный.Продажи_НДС ИЛИ Стр.СчетКт = ПланыСчетов.Хозрасчетный.Продажи_НДС  Тогда
			НГ = Стр.НоменклатурнаяГруппа;
			
			Если Не ЗначениеЗаполнено(НГ)  Тогда
				Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенена номенклатурная группа!");	
				Отказ = Истина;	
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(Стр.СтавкаНДС) Тогда
				Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Не заполенена ставка НДС!");	
				Отказ = Истина;	
			КонецЕсли;	
			
			////Бобылев А.А. 19.02.2018 77244218
			//Если ЗначениеЗаполнено(НГ) Тогда
			//	Если ЗначениеЗаполнено(НГ.абс_ДатаЗакрытия) И КонецДня(НГ.абс_ДатаЗакрытия) < Дата Тогда      
			//		Сообщить("В строке " + Строка(Стр.НомерСтроки) + " Номенклатурная группа " + НГ + " (" + СокрЛП(НГ.Код) + ") закрыта " + НГ.абс_ДатаЗакрытия + ".", СтатусСообщения.Внимание);
			//		РезОтказа=Истина;
			//	КонецЕсли;
			//КонецЕсли;
			////Бобылев А.А. ----------------------------
			
		ИначеЕсли Стр.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы ИЛИ Стр.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы Тогда
			
		ИначеЕсли Стр.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеРасходы) ИЛИ Стр.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеРасходы) Тогда
	
		КонецЕсли;
	КонецЕсли;
	
	

	//Если ЗначениеЗаполнено(СчетДт) Тогда 
	//	Если СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
	//		Если ЗначениеЗаполнено(СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы]) Тогда	
	//			Если НЕ СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы].абс_Статус = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
	//				
	//				ttk_ОбщегоНазначения.СообщитьОбОшибке("Статья прочих доходов и расходов " + СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы] + " не используется.", РезОтказа);
	//			КонецЕсли;
	//		КонецЕсли; 
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(СчетКт) Тогда 
	//	Если СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
	//		Если ЗначениеЗаполнено(СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы]) Тогда	
	//			Если НЕ СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы].абс_Статус = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
	//				
	//				ttk_ОбщегоНазначения.СообщитьОбОшибке("Статья прочих доходов и расходов " + СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы] + " не используется.", РезОтказа);
	//			КонецЕсли;
	//		КонецЕсли; 
	//	КонецЕсли;
	//КонецЕсли;
	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ПроверитьПериодРедактирования(Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусРаспреденияДоходовРасходов(Ссылка);
	
	Если НЕ Статус = СтатусПоРегистру Тогда
		РегистрыСведений.абс_ИзменениеСтатусовРаспреденияДоходовРасходов.ЗаписатьНовыйСтатус(Ссылка, Статус, ПричинаИзмененияСтатуса);
	
		Если Статус = Перечисления.абс_СтатусыРаспределенияДоходовРасходов.Отказ Тогда
			
			Если ЗначениеЗаполнено(ДокументДвижений) Тогда
				ДокументДвиженийОб = ДокументДвижений.ПолучитьОбъект();	
				ДокументДвиженийОб.ОбменДанными.Загрузка = Истина;
				ОбщегоНазначения.ИзменитьАктивностьПоРегистратору(ДокументДвиженийОб,Отказ,Ложь);
				ДокументДвиженийОб.УстановитьПометкуУдаления(Истина);
			КонецЕсли;	
			
			Для каждого Стр Из СформированныеДокументы Цикл
				ДокументОбъект = Стр.Документ.ПолучитьОбъект();
				ДокументОбъект.Статус = Перечисления.абс_СтатусыАвизо.Отказ;
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЦикла;
			
		ИначеЕсли Статус = Перечисления.абс_СтатусыРаспределенияДоходовРасходов.Исполнение Тогда
			Если ЗначениеЗаполнено(ДокументДвижений) Тогда
				ДокументДвиженийОб = ДокументДвижений.ПолучитьОбъект();	
				ДокументДвиженийОб.ОбменДанными.Загрузка = Истина;
				ОбщегоНазначения.ИзменитьАктивностьПоРегистратору(ДокументДвиженийОб,Отказ,Истина);
				ДокументДвиженийОб.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Если (Статус = Перечисления.абс_СтатусыРаспределенияДоходовРасходов.Подготовка 
		ИЛИ Статус = Перечисления.абс_СтатусыРаспределенияДоходовРасходов.ПереводВФилиал 
		ИЛИ Статус = Перечисления.абс_СтатусыРаспределенияДоходовРасходов.ПереводВКЦ) 
		И СтатусПоРегистру <> Перечисления.абс_СтатусыРаспределенияДоходовРасходов.Отказ Тогда
		
		Если ПараметрыСеанса.абс_НастройкиСистемы.ПроверятьОстатокПоРаспределениюДР Тогда
			ПроверкаОстатков(Отказ);
		КонецЕсли;
		
		Если ВидОперацииРаспределния = 0 Тогда
			Для каждого Стр Из Доходы Цикл
				ПроверитьЗаполнениеАналитики(Стр, Отказ)					
			КонецЦикла;
		Иначе		
			Для каждого Стр Из Расходы Цикл
				ПроверитьЗаполнениеАналитики(Стр, Отказ)					
			КонецЦикла;
		КонецЕсли;
		
		Если СуммаКРаспределению <> СуммаПоДокументу Тогда
			Сообщить("Не совпадает сумма для распределения и общая сумма по документу!");
			Отказ = Истина;
		КонецЕсли;
		
		Если ВариантЗаполнения = 1 Тогда	
			Если (Доходы.Количество() <> 0 И Доходы.Итог("СуммарныйКоэффициентРаспределения") <> 100) ИЛИ (Расходы.Количество() <> 0 И Расходы.Итог("СуммарныйКоэффициентРаспределения") <> 100) Тогда
				Сообщить("Общий распределенный коэффициент не равен 100%!");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОперацииРаспределния = 1 Тогда
			Для каждого Стр  Из Расходы Цикл
				Если Стр.СчетДт  = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД ИЛИ Стр.СчетКт  = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД Тогда
					Если Не ЗначениеЗаполнено(Стр.ВидДеятельности) Тогда
						Сообщить("Необходимо заполнить вид деятельности!");	
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура СформироватьДвиженияПоОперации(НаправлениеПереноса) Экспорт
	
	Объект = ЭтотОбъект;
	
	УстановитьПривилегированныйРежим(Истина);
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &НаправлениеПереноса = ""-""
	|			ТОГДА -абс_РаспределяемыеДоходыРасходыДоходы.ОбщаяСуммаКРаспределению
	|		ИНАЧЕ абс_РаспределяемыеДоходыРасходыДоходы.ОбщаяСуммаКРаспределению
	|	КОНЕЦ КАК Сумма,
	|	абс_РаспределяемыеДоходыРасходыДоходы.СчетДт,
	|	абс_РаспределяемыеДоходыРасходыДоходы.СчетКт,
	|	абс_РаспределяемыеДоходыРасходыДоходы.СтавкаНДС,
	|	абс_РаспределяемыеДоходыРасходыДоходы.НоменклатурнаяГруппа,
	|	абс_РаспределяемыеДоходыРасходыДоходы.СтатьяЗатрат,
	|	NULL КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &НаправлениеПереноса = ""-""
	|			ТОГДА &ОрганизацияКТТК
	|		ИНАЧЕ абс_РаспределяемыеДоходыРасходыДоходы.Филиал
	|	КОНЕЦ КАК Организация,
	|	абс_РаспределяемыеДоходыРасходыДоходы.СтатьяБюджета,
	|	NULL КАК ВидДеятельности,
	|	абс_РаспределяемыеДоходыРасходыДоходы.Филиал КАК Филиал,
	|	NULL КАК ПодразделениеПриемник
	|ИЗ
	|	Документ.абс_РаспределяемыеДоходыРасходы.Доходы КАК абс_РаспределяемыеДоходыРасходыДоходы
	|ГДЕ
	|	абс_РаспределяемыеДоходыРасходыДоходы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &НаправлениеПереноса = ""-""
	|			ТОГДА -абс_РаспределяемыеДоходыРасходыРасходы.ОбщаяСуммаКРаспределению
	|		ИНАЧЕ абс_РаспределяемыеДоходыРасходыРасходы.ОбщаяСуммаКРаспределению
	|	КОНЕЦ,
	|	абс_РаспределяемыеДоходыРасходыРасходы.СчетДт,
	|	абс_РаспределяемыеДоходыРасходыРасходы.СчетКт,
	|	абс_РаспределяемыеДоходыРасходыРасходы.СтавкаНДС,
	|	абс_РаспределяемыеДоходыРасходыРасходы.НоменклатурнаяГруппа,
	|	абс_РаспределяемыеДоходыРасходыРасходы.СтатьяЗатрат,
	|	абс_РаспределяемыеДоходыРасходыРасходы.Подразделение,
	|	ВЫБОР
	|		КОГДА &НаправлениеПереноса = ""-""
	|			ТОГДА &ОрганизацияКТТК
	|		ИНАЧЕ абс_РаспределяемыеДоходыРасходыРасходы.Филиал
	|	КОНЕЦ,
	|	абс_РаспределяемыеДоходыРасходыРасходы.СтатьяБюджета,
	|	абс_РаспределяемыеДоходыРасходыРасходы.ВидДеятельности,
	|	абс_РаспределяемыеДоходыРасходыРасходы.Филиал,
	|	абс_РаспределяемыеДоходыРасходыРасходы.ПодразделениеПриемник
	|ИЗ
	|	Документ.абс_РаспределяемыеДоходыРасходы.Расходы КАК абс_РаспределяемыеДоходыРасходыРасходы
	|ГДЕ
	|	абс_РаспределяемыеДоходыРасходыРасходы.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	Филиал";
	
	
	
	ОрганизацияКТТК = Справочники.Организации.НайтиПоНаименованию("КТТК");
	
	Если ОрганизацияКТТК <> Объект.Организация Тогда
		ОрганизацияКТТК = Объект.Организация; 
	КонецЕсли;
	
	
	ДокументОбъект = Неопределено;
	
	Запрос.УстановитьПараметр("ОрганизацияКТТК", ОрганизацияКТТК);
	Запрос.УстановитьПараметр("НаправлениеПереноса", НаправлениеПереноса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Филиал");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если НаправлениеПереноса = "-" Тогда
			Если Не ЗначениеЗаполнено(Объект.ДокументДвижений) Тогда
				ДокументОбъект = Документы.ОперацияБух.СоздатьДокумент();	
				ДокументОбъект.Дата        = Объект.Дата;
				ДокументОбъект.Организация = ОрганизацияКТТК;
				ДокументОбъект.абс_ЦФУ     = Объект.ЦФУ;
				ДокументОбъект.абс_ЦФО     = Объект.ЦФО;
				ДокументОбъект.абс_БюджетнаяСтатья = ВыборкаДетальныеЗаписи.СтатьяБюджета;
				ДокументОбъект.УстановитьНовыйНомер();
				ДокументОбъект.абс_РучноеФормированиеОборотовБюджетов = Истина;
				
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				
			Иначе	
				Если ДокументОбъект = Неопределено Тогда
					ДокументОбъект =  Объект.ДокументДвижений.ПолучитьОбъект();
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
			КонецЕсли;	
		Иначе
			
			Авизо = Документы.абс_АВИЗО.ПустаяСсылка();
			Для каждого Стр Из Объект.СформированныеДокументы Цикл
				Если Стр.Документ.ОрганизацияПриемник = ВыборкаДетальныеЗаписи.Организация Тогда
					Авизо  = Стр.Документ.ПолучитьОбъект();	
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Авизо = Документы.абс_АВИЗО.ПустаяСсылка() Тогда  
				Авизо = Документы.абс_АВИЗО.СоздатьДокумент();
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Авизо.ДокументОснованиеПриемник) Тогда
				ДокументОбъект = Документы.ОперацияБух.СоздатьДокумент();	
				ДокументОбъект.УстановитьНовыйНомер();
			Иначе	
				ДокументОбъект = Авизо.ДокументОснованиеПриемник.ПолучитьОбъект();
				ДокументОбъект.Движения.Хозрасчетный.Очистить();
				ДокументОбъект.Движения.ОборотыБюджетов.Очистить();
			КонецЕсли;
			
			ДокументОбъект.Дата        = Объект.Дата;
			ДокументОбъект.Организация = ВыборкаДетальныеЗаписи.Филиал;
			ДокументОбъект.абс_ЦФУ     = Объект.ЦФУ;
			ДокументОбъект.абс_ЦФО     = Объект.ЦФО;
			ДокументОбъект.абс_БюджетнаяСтатья = ВыборкаДетальныеЗаписи.СтатьяБюджета;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ПометкаУдаления = Ложь;
			
			ДокументОбъект.абс_РучноеФормированиеОборотовБюджетов = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Авизо.Организация                  = ОрганизацияКТТК;
			Авизо.РаспределениеДоходовРасходов = Объект.Ссылка;
			Авизо.Статус					   = Перечисления.абс_СтатусыАвизо.ОбработкаФилиалом;
			Авизо.ОрганизацияПриемник          = ВыборкаДетальныеЗаписи.Филиал;
			Авизо.Дата       		           = Объект.Дата;					
			Авизо.ДокументОснованиеИсточник    = Объект.ДокументДвижений;
			Авизо.ДокументОснованиеПриемник    = ДокументОбъект.Ссылка;
			Авизо.КорСчет					   = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям;
			Авизо.ВидОперации				   = Перечисления.абс_ВидыОперацийАвизо.РасчетныеОперации;
			Авизо.НомерДляПечати 			   = Объект.НомерДляПечати;
			Авизо.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
		мСумма = 0;
		ПоФилиалу = ВыборкаДетальныеЗаписи.Выбрать();
		Пока ПоФилиалу.Следующий() Цикл
			
			НС = ДокументОбъект.Движения.Хозрасчетный.Добавить(); 	
			ЗаполнитьЗначенияСвойств(НС,ПоФилиалу);
			НС.Организация = ДокументОбъект.Организация;
			// Start КТТК Ермолов Е.Л.  23.03.2015 000031968
			Если ЭтотОбъект.ВидОперацииРаспределния = 0 Тогда 
				ПофилиалуСумма = 100 * ПоФилиалу.Сумма / (100 + УчетНДС.ПолучитьСтавкуНДС(ПоФилиалу.СтавкаНДС));
			Иначе
				ПофилиалуСумма = ПоФилиалу.Сумма;
			КонецЕсли;
			//мСумма  =  мСумма + ПоФилиалу.Сумма;
			мСумма  =  мСумма + ПоФилиалуСумма;
			// Stop КТТК Ермолов Е.Л.  23.03.2015
			Для каждого ВидСубконто Из ПоФилиалу.СчетКт.ВидыСубконто Цикл
				Если ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПоФилиалу.НоменклатурнаяГруппа;	
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПоФилиалу.СтатьяЗатрат;	
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда
					
					Если НаправлениеПереноса = "-" Тогда
						НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПоФилиалу.Подразделение;	
					Иначе
						Ошибки = Новый Структура;
						Ошибки.Вставить("СписокОшибок", Новый Массив);
						Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
						
						СтруктураПараметров          = Новый Структура("ДЗО,Филиал");
						СтруктураПараметров.ДЗО      = ОрганизацияКТТК;
						СтруктураПараметров.Филиал	 = ПоФилиалу.Филиал;
						
						ПодразделениеФилиала = ПоФилиалу.ПодразделениеПриемник;
						//ПодразделениеФилиала = абс_Филиализация.ПолучитьПодразделениеОрганизацииФилиала(ПоФилиалу.Подразделение, СтруктураПараметров, Отказ, Ошибки);
						
						НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПодразделениеФилиала;	
					КонецЕсли;
					
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПоФилиалу.СтавкаНДС;
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыДеятельности Тогда
					НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПоФилиалу.ВидДеятельности;	
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения Тогда
					
					Если НаправлениеПереноса = "+" Тогда
						НС.СубконтоКт[ВидСубконто.ВидСубконто] = ОрганизацияКТТК;	
					Иначе
						НС.СубконтоКт[ВидСубконто.ВидСубконто] = ПоФилиалу.Филиал;	
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Для каждого ВидСубконто Из ПоФилиалу.СчетДт.ВидыСубконто Цикл
				Если ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПоФилиалу.НоменклатурнаяГруппа;	
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПоФилиалу.СтатьяЗатрат;	
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда
					
					Если НаправлениеПереноса = "-" Тогда
						НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПоФилиалу.Подразделение;	
					Иначе
						Ошибки = Новый Структура;
						Ошибки.Вставить("СписокОшибок", Новый Массив);
						Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
						
						СтруктураПараметров          = Новый Структура("ДЗО,Филиал");
						СтруктураПараметров.ДЗО      = ОрганизацияКТТК;
						СтруктураПараметров.Филиал	 = ПоФилиалу.Филиал;
						
						ПодразделениеФилиала = ПоФилиалу.ПодразделениеПриемник;
						
						Если НЕ ЗначениеЗаполнено(ПодразделениеФилиала) ИЛИ ПодразделениеФилиала  = Неопределено Тогда
							Сообщить("Не найдено соответствие для подразделения " + Строка(ПоФилиалу.Подразделение));	
						Иначе	
							НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПодразделениеФилиала;	
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПоФилиалу.СтавкаНДС;	
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыДеятельности Тогда
					НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПоФилиалу.ВидДеятельности;	
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения Тогда
					
					Если НаправлениеПереноса = "+" Тогда
						НС.СубконтоДт[ВидСубконто.ВидСубконто] = ОрганизацияКТТК;
					Иначе
						НС.СубконтоДт[ВидСубконто.ВидСубконто] = ПоФилиалу.Филиал;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Если НС.СчетДт <> ПланыСчетов.Хозрасчетный.Продажи_НДС И НС.СчетКт <> ПланыСчетов.Хозрасчетный.Продажи_НДС Тогда
				НС = ДокументОбъект.Движения.ОборотыБюджетов.Добавить(); 	
				// Start КТТК Ермолов Е.Л.  23.03.2015 000031968
				//НС.СуммаСценария  = ПоФилиалу.Сумма;
				//НС.СуммаУпр       = ПоФилиалу.Сумма;
				//НС.ВалютнаяСумма  = ПоФилиалу.Сумма;
				НС.СуммаСценария  = ПоФилиалуСумма;
				НС.СуммаУпр       = ПоФилиалуСумма;
				НС.ВалютнаяСумма  = ПоФилиалуСумма;
				НС.абс_СчетБУ = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям;
				
				// Stop КТТК Ермолов Е.Л.  23.03.2015
				НС.Период         = Объект.Дата;
				НС.абс_ЦФУ        = Объект.ЦФУ;
				НС.ЦФО            = Объект.ЦФО;
				НС.Организация    = ДокументОбъект.Организация;
				НС.СтатьяОборотов = ПоФилиалу.СтатьяБюджета;
				НС.Сценарий       = глЗначениеПеременной("абс_СценарийДляФакта");
				НС.Валюта         = Справочники.Валюты.НайтиПоКоду("643");
				
				НС = ДокументОбъект.Движения.ОборотыБюджетов.Добавить(); 	
				// Start КТТК Ермолов Е.Л.  23.03.2015 000031968
				//НС.СуммаСценария  = ПоФилиалу.Сумма;
				//НС.СуммаУпр       = ПоФилиалу.Сумма;
				//НС.ВалютнаяСумма  = ПоФилиалу.Сумма;
				НС.СуммаСценария  = ПоФилиалуСумма;
				НС.СуммаУпр       = ПоФилиалуСумма;
				НС.ВалютнаяСумма  = ПоФилиалуСумма;
				НС.абс_СчетБУ = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям;
				// Stop КТТК Ермолов Е.Л.  23.03.2015
				НС.Период         = Объект.Дата;
				НС.абс_ЦФУ        = Объект.ЦФУ;
				НС.ЦФО            = Объект.ЦФО;
				НС.Организация    = ДокументОбъект.Организация;
				НС.СтатьяОборотов = ПоФилиалу.СтатьяБюджета;
				НС.Сценарий       = глЗначениеПеременной("абс_СценарийДляОперФакта");
				НС.Валюта         = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			
		КонецЦикла;
		
		ДокументОбъект.СуммаОперации = мСумма;
		ДокументОбъект.Содержание = "Передача доходов/расходов по документу № " + СокрЛП(Объект.Номер);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если НаправлениеПереноса = "+" Тогда
			
			НайденныеСтроки = Объект.СформированныеДокументы.НайтиСтроки(Новый Структура("Документ,Организация",Авизо.Ссылка,Авизо.ОрганизацияПриемник));
			
			ЗаполнитьАвизоПоОснованию(Авизо);
			Авизо.НомерДляПечати = Объект.НомерДляПечати;
			Авизо.Записать(РежимЗаписиДокумента.Запись);
			
			Если НайденныеСтроки.Количество() = 0 Тогда	
				НС = Объект.СформированныеДокументы.Добавить();
				НС.Документ      = Авизо.Ссылка;
				НС.Организация   = Авизо.ОрганизацияПриемник;
			КонецЕсли;
		Иначе
			Объект.ДокументДвижений = ДокументОбъект.Ссылка;
		КонецЕсли;
		
		//Если НаправлениеПереноса = "-" Тогда
		Если ДокументОбъект <> Неопределено Тогда
			
			Если НаправлениеПереноса = "+" Тогда
				ПроводкиПоНУ(ДокументОбъект,НаправлениеПереноса);
			КонецЕсли;	
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НаправлениеПереноса = "-" Тогда  
		Если ДокументОбъект <> Неопределено Тогда
			ПроводкиПоНУ(ДокументОбъект,НаправлениеПереноса);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроводкиПоНУ(ДокументОбъект, НаправлениеПереноса)
	
	Объект = ЭтотОбъект;
	НалоговыйУчет.ЗаполнитьДанныеНалоговогоУчетаПоБухгалтерскомуУчету(ДокументОбъект.Движения.Налоговый, ДокументОбъект.Движения.Хозрасчетный, ДокументОбъект.Дата);
	
	МассивСтрокДляУдаления = Новый Массив;
	
	Для каждого Стр Из ДокументОбъект.Движения.Налоговый Цикл
		Если Не ЗначениеЗаполнено(Стр.СчетДт) ИЛИ Не ЗначениеЗаполнено(Стр.СчетКт)  Тогда
			МассивСтрокДляУдаления.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Стр Из МассивСтрокДляУдаления Цикл
		ДокументОбъект.Движения.Налоговый.Удалить(Стр);		
	КонецЦикла;
	
	Для каждого Стр Из ДокументОбъект.Движения.Налоговый Цикл
		Если СчетЗатратный(Стр.СчетДт) ИЛИ СчетЗатратный(Стр.СчетКт) Тогда
			Стр.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			Стр.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ПР; 
		КонецЕсли;
		
		Знак = ?(Стр.Сумма < 0 ,-1,1);
		
		Если Объект.ВидОперацииРаспределния = 0 Тогда
			
			
			Если НаправлениеПереноса = "-" Тогда
				Строки = Объект.Доходы.НайтиСтроки(Новый Структура("СчетДт,Филиал,НоменклатурнаяГруппа",ПланыСчетов.Хозрасчетный.Продажи_НДС,Стр.СубконтоДт.ОбособленныеПодразделения,Стр.СубконтоКт.НоменклатурныеГруппы));	
			Иначе
				Строки = Объект.Доходы.НайтиСтроки(Новый Структура("СчетДт,Филиал,НоменклатурнаяГруппа",ПланыСчетов.Хозрасчетный.Продажи_НДС,ДокументОбъект.Организация,Стр.СубконтоКт.НоменклатурныеГруппы));	
			КонецЕсли;
			
			Если Строки.Количество() > 0 Тогда
				
				Для каждого Стр1 Из Строки Цикл
					//Стр.Сумма = ?(Стр.Сумма < 0,- Стр.Сумма,Стр.Сумма) - Стр1.ОбщаяСуммаКРаспределению;
					//АБС ИЗМЕНЕНИЕ 56112  27.05.2015 17:07:10  Коломиец
					Стр.Сумма = Стр.Сумма + ?(НаправлениеПереноса = "-", Стр1.ОбщаяСуммаКРаспределению, -Стр1.ОбщаяСуммаКРаспределению);
					//Стр.Сумма = ?(Стр.Сумма < 0,- Стр.Сумма,Стр.Сумма) - ?(Стр1.ОбщаяСуммаКРаспределению < 0,-Стр1.ОбщаяСуммаКРаспределению,Стр1.ОбщаяСуммаКРаспределению);
					//АБС ИЗМЕНЕНИЕ 56112 КОНЕЦ
				КонецЦикла;
				//Стр.Сумма = Стр.Сумма * Знак;
			КонецЕсли;
			
			//Если НаправлениеПереноса = "-" Тогда
				//Стр.Сумма = Стр.Сумма * Знак;	//АБС ИЗМЕНЕНИЕ 56112  27.05.2015 17:07:10  Коломиец
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАвизоПоОснованию(Авизо)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт3,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт3,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОборотыДтКт.СчетДт = &корсчет
		|			ТОГДА ХозрасчетныйОборотыДтКт.СчетКт
		|		ИНАЧЕ ХозрасчетныйОборотыДтКт.СчетДт
		|	КОНЕЦ КАК СчетУчета
		|ПОМЕСТИТЬ втХозрасчетный
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , , , ) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втХозрасчетный.СубконтоДт1,
		|	втХозрасчетный.СубконтоДт2,
		|	втХозрасчетный.СубконтоДт3,
		|	втХозрасчетный.СубконтоКт1,
		|	втХозрасчетный.СубконтоКт2,
		|	втХозрасчетный.СубконтоКт3,
		|	втХозрасчетный.Сумма,
		|	втХозрасчетный.СчетДт,
		|	втХозрасчетный.СчетКт,
		|	втХозрасчетный.СубконтоДт1 КАК СубконтоДтНУ1,
		|	втХозрасчетный.СубконтоДт2 КАК СубконтоДтНУ2,
		|	втХозрасчетный.СубконтоДт3 КАК СубконтоДтНУ3,
		|	втХозрасчетный.СубконтоКт1 КАК СубконтоКтНУ1,
		|	втХозрасчетный.СубконтоКт2 КАК СубконтоКтНУ2,
		|	втХозрасчетный.СубконтоКт3 КАК СубконтоКтНУ3,
		|	втХозрасчетный.Сумма КАК СуммаНУ
		|ИЗ
		|	втХозрасчетный КАК втХозрасчетный";
		
	Запрос.УстановитьПараметр("Регистратор", Авизо.ДокументОснованиеПриемник);
	Запрос.УстановитьПараметр("корсчет", Авизо.КорСчет);
	Авизо.ТабличнаяЧасть.Загрузить(Запрос.Выполнить().Выгрузить());	

	Для каждого Стр Из Авизо.ТабличнаяЧасть Цикл
		ЗаполнитьСчетНУ(Стр,"СубконтоДт","СчетДт","СчетДтНУ");
		ЗаполнитьСчетНУ(Стр,"СубконтоКт","СчетКт","СчетКтНУ");
	КонецЦикла;
	
КонецПроцедуры

Функция СчетЗатратный(Счет)
	
	Если Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ОсновноеПроизводство_) ИЛИ 
		Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ОбщепроизводственныеРасходы) ИЛИ
		Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ОбщехозяйственныеРасходы)ИЛИ   
		Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу)  Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСчетНУ(Стр, ИмяРеквизита, ИмяСчетаБУ, ИмяСчетаНУ)
	
	Объект = ЭтотОбъект;
	
	Если ТипЗнч(Стр[ИмяРеквизита + "1"]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = Стр[ИмяРеквизита + "1"].ВидРасходовНУ;
	ИначеЕсли ТипЗнч(Стр[ИмяРеквизита + "2"]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = Стр[ИмяРеквизита + "2"].ВидРасходовНУ;
	ИначеЕсли ТипЗнч(Стр[ИмяРеквизита + "3"]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = Стр[ИмяРеквизита + "3"].ВидРасходовНУ;
	ИначеЕсли ТипЗнч(Стр[ИмяРеквизита + "1"]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		ВидЗатратНУ = Стр[ИмяРеквизита + "1"].ВидПрочихДоходовИРасходов;
	ИначеЕсли ТипЗнч(Стр[ИмяРеквизита + "2"]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		ВидЗатратНУ = Стр[ИмяРеквизита + "2"].ВидПрочихДоходовИРасходов;
	ИначеЕсли ТипЗнч(Стр[ИмяРеквизита + "3"]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		ВидЗатратНУ = Стр[ИмяРеквизита + "3"].ВидПрочихДоходовИРасходов;
	Иначе
		ВидЗатратНУ = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		Стр[ИмяСчетаНУ] = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", Стр[ИмяСчетаБУ], ВидЗатратНУ), , Объект.Дата);
		Если Не ЗначениеЗаполнено(Стр[ИмяСчетаНУ]) Тогда
			Стр[ИмяСчетаНУ] = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", Стр[ИмяСчетаБУ]), , Объект.Дата);
		КонецЕсли;
	Иначе
		Стр[ИмяСчетаНУ] = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", Стр[ИмяСчетаБУ]), , Объект.Дата);
	КонецЕсли;
	
	// {{ТТК Сладков А. Заявка № T#7726595  07.04.2016 начало
	
	ОтнестиСуммуНУнаПР=Ложь;
	
	Если ЗначениеЗаполнено(Стр.СчетДтНУ) Тогда
		
		Если СчетЗатратный(Стр.СчетДтНУ) и Стр.СуммаНУ <> 0 Тогда
				
			ОтнестиСуммуНУнаПР=Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Стр.СчетКтНУ) Тогда
		
		Если СчетЗатратный(Стр.СчетКтНУ) и Стр.СуммаНУ <> 0 Тогда
				
			ОтнестиСуммуНУнаПР=Истина;
			
		КонецЕсли;
		
	КонецЕсли;

	Если ОтнестиСуммуНУнаПР Тогда
		
		Стр.СуммаПР = Стр.СуммаНУ;
		Стр.СуммаНУ = 0;
		
		
	КонецЕсли;
	// }}ТТК Сладков А. Заявка № T#7726595  07.04.2016 окончание
	
КонецПроцедуры

Процедура ПроверитьПериодРедактирования(Отказ)
	
	Если ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	ТребуетсяПроверкаПериода = Истина;
	
	Если Статус <> Перечисления.абс_СтатусыРаспределенияДоходовРасходов.СогласованиеРуководителемБлока Тогда 
		ТребуетсяПроверкаПериода = Ложь;
	КонецЕсли;
	
	Если Ссылка.Статус <> Перечисления.абс_СтатусыРаспределенияДоходовРасходов.Подготовка Тогда 
		ТребуетсяПроверкаПериода = Ложь;
	КонецЕсли;
	
	Если НЕ ТребуетсяПроверкаПериода Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ПериодыРедактироавния.ДатаНачалаРедактирования,
	                      |	ПериодыРедактироавния.ДатаОкончанияРедактирования
	                      |ИЗ
	                      |	РегистрСведений.абс_РаспределяемыеДоходыРасходыПериодыРедактирования.СрезПоследних(
	                      |			,
	                      |			КОНЕЦПЕРИОДА(Период, МЕСЯЦ) = КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	                      |				И ВидОперацииРаспределния = &Вид) КАК ПериодыРедактироавния");
						  
	Запрос.УстановитьПараметр("Период", 		КонецМесяца(Дата));
	//Запрос.УстановитьПараметр("ТекущаяДата", 	абс_СерверныеФункции.ПолучитьДатуСервера());
	Запрос.УстановитьПараметр("Вид", 	ВидОперацииРаспределния);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не указан период редактирования документа за " + Формат(Дата, "ДФ='ММММ гггг'"), Отказ);
		Возврат;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если НЕ (ТекущаяДата >= Выборка.ДатаНачалаРедактирования И ТекущаяДата <= Выборка.ДатаОкончанияРедактирования) Тогда 
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ за " + Формат(Дата, "ДФ='ММММ гггг'") 
		+ " возможно перевести в статус ""Согласование руководителем ЦФО"" в период: " 
		+ Формат(Выборка.ДатаНачалаРедактирования, "ДЛФ=D") + " - " + Формат(Выборка.ДатаОкончанияРедактирования, "ДЛФ=D"), 
		Отказ);		
	КонецЕсли;
	
КонецПроцедуры


