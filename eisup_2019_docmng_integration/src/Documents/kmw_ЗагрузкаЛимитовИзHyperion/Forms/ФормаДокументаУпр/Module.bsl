
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
	
	//Если Не ЗначениеЗаполнено(СокрЛП(Объект.ИмяСервера))
	//	Или Не ЗначениеЗаполнено(СокрЛП(Объект.ИмяБазыДанных)) 
	//	Или Не ЗначениеЗаполнено(СокрЛП(Объект.Пользователь))
	//	Или Не ЗначениеЗаполнено(СокрЛП(Объект.Пароль)) Тогда
		ЗаполнитьПараметрыПодключенияПоУмолчанию();
	КонецЕсли;
	
	ИнициализацияПеременных();
	ЗаполнитьИндексКартинки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтрокаДокумента = Объект.ТаблицаДокументов.Добавить();
	СтрокаДокумента.ТабЧасть = "<Таблица>";
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьИндексКартинки();	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТаблицаДокументов

//Процедура ТаблицаДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
//	
//	ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
//	Если ДанныеСтроки.Документ.Проведен Тогда
//		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
//	Иначе 
//		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 2;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ТаблицаДокументовПередНачаломДобавления(Элемент, Отказ, Копирование)
//	
//	Отказ = Истина;
//	
//КонецПроцедуры

//Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
//	
//	Если Колонка.Имя = "ТабЧасть" Тогда
//		
//		СтандартнаяОбработка = Ложь;
//		НомерСтроки 		 = ВыбраннаяСтрока.НомерСтроки;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - НАЖАТИЯ НА КНОПКИ

&НаКлиенте
Процедура СчитатьДанные(Команда)
	
	СчитатьДанныеНаСервере();
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ЗаполнитьПараметрыПодключенияПоУмолчанию()
	
	ИмяСервера      = "kttk-1c-db";
	ИмяБазыДанных   = "TransPlatformIntegration";
	Пользователь    = "TransPlatformIntegration_BillingSync";
	Пароль 			= "5ic7sfre";
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПодключениеSQL(ИмяСервера, ИмяБазыДанных, Пользователь, Пароль)
	
	Попытка
		
		Если Не ПустаяСтрока(СокрЛП(ИмяСервера)) И Не ПустаяСтрока(СокрЛП(Пароль)) Тогда
			
			ConnectionString="Provider=sqloledb; SERVER="+ СокрЛП(ИмяСервера)
				+ ";UID=" + СокрЛП(Пользователь) 
				+ ";PWD=" + СокрЛП(Пароль) 
				+ ";DATABASE=" + СокрЛП(ИмяБазыДанных) + ";";
				
		КонецЕсли;
			
		Соединение = Новый COMОбъект("ADODB.Connection");
		Соединение.Open(СокрЛП(ConnectionString));
		Сообщить("Соединение с TPI установлено!");
		
	Исключение
		
		Сообщить("Нет подключения к TPI! " + ОписаниеОшибки());
		
	КонецПопытки; 
	
	Возврат Соединение; 
	
КонецФункции

&НаСервере
Процедура СчитатьДанныеНаСервере()
	
	// очистка параметров
	ТаблицаИзБуфераОбмена = СтруктураПараметров.ТаблицаИзБуфераОбмена;
	ТаблицаИзБуфераОбмена.Очистить();
	
	// соединение с TPI
	Соединение 				= ВыполнитьПодключениеSQL(Объект.ИмяСервера, Объект.ИмяБазыДанных, Объект.Пользователь, Объект.Пароль);
	ПустоеЗначение 			= "";
	
	//ОрганизацияДляЛимитов 	= ЭлементыФормы.тзОрганизации.ТекущиеДанные.Организация.Наименование;
	//ОрганизацияДляЛимитов 	= "ОРГ_ВЕРХ_КТТК_МКФ";
	
	// запрос к таблице BUDGET_LIMIT в TPI
	ТекстЗапросаADO 		= "select top 50 * from [TransPlatformIntegration].[dbo].[BUDGET_LIMIT]"; // where ORGANIZATION = '" + ОрганизацияДляЛимитов + "'";
	RecordSet = Соединение.Execute(ТекстЗапросаADO);
	Если Не RecordSet.eof Тогда
        RecordSet.MoveFirst();
    КонецЕсли;		
	
	// обход результата запроса
	Пока Не RecordSet.eof Цикл  
		
		Если RecordSet.Fields("ORGANIZATION").Value = Null Тогда 
			RecordSet.MoveNext(); 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаИзБуфераОбмена.Добавить();
		
		Для Каждого Колонка Из ТаблицаИзБуфераОбмена.Колонки Цикл
			
			Попытка
				НоваяСтрока[Колонка.Имя] = RecordSet.Fields(Колонка.Имя).Value;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		RecordSet.MoveNext();  
		
	КонецЦикла;		
	
	Соединение.Close();
	
	// обработка считанных данных
	Для Каждого СтрокаТаблицыИзБуфераОбмена Из ТаблицаИзБуфераОбмена Цикл
		
		Организация 	  	= ОпределитьОрганизацию(СтрокаТаблицыИзБуфераОбмена.ORGANIZATION);
		kwr_НомерЗагрузки 	= СтрокаТаблицыИзБуфераОбмена.NUM_LOAD;
		kwr_CREDIT   		= СтрокаТаблицыИзБуфераОбмена.CREDIT;
		ВалютаПланирования	= ОпределитьВалюту(СтрокаТаблицыИзБуфераОбмена.CURRENCY);
		Год 				= ОпределитьГод(СтрокаТаблицыИзБуфераОбмена.YEAR);
		Сценарий 			= ОпределитьСценарий(СтрокаТаблицыИзБуфераОбмена.SCENARIO);
		ЦФУ		 			= ОпределитьЦФУ(СтрокаТаблицыИзБуфераОбмена.FINSTRUCTION);
		ЦФО		 			= ОпределитьЦФО(СтрокаТаблицыИзБуфераОбмена.FINSTRUCTION);
		ТипКонтрагента 		= ОпределитьТипКонтрагента(СтрокаТаблицыИзБуфераОбмена.TYPE_CONTR);
		
		
		//Бюджет.ЦФУ 				= ЦФУ;
		//Бюджет.ЦФО 				= ЦФО;		
		//Бюджет.Проект 			= ОпределитьПроект(СтрокаТаблицыИзБуфераОбмена.PROJECT);
		//Бюджет.БюджетнаяСтатья 	= ОпределитьБюджетнуюСтатью(СтрокаТаблицыИзБуфераОбмена.ACCOUNT);		
		//Бюджет.Период 			= ОпределитьПериод(СтрокаТаблицыИзБуфераОбмена.PERIOD);
		//Бюджет.СтавкаНДС 		= ОпределитьСтавкуНДС(СтрокаТаблицыИзБуфераОбмена.VAT);		
		//Бюджет.СуммаРуб 		= СтрокаТаблицыИзБуфераОбмена.VALUE;
		//Бюджет.СуммаВал 		= Бюджет.СуммаРуб;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияПеременных()
	
	СтруктураПараметров   = Новый Структура;
	
	ТаблицаИзБуфераОбмена = Новый ТаблицаЗначений;
	ТаблицаИзБуфераОбмена.Колонки.Добавить("NUM_LOAD");		//kwr_НомерЗагрузки	
	ТаблицаИзБуфераОбмена.Колонки.Добавить("ORGANIZATION");	//Организация	
	ТаблицаИзБуфераОбмена.Колонки.Добавить("CREDIT");	    //kwr_CREDIT
	ТаблицаИзБуфераОбмена.Колонки.Добавить("CURRENCY");	    //ВалютаПланирования
	ТаблицаИзБуфераОбмена.Колонки.Добавить("YEAR");	        //Год
	ТаблицаИзБуфераОбмена.Колонки.Добавить("SCENARIO"); 	//Сценарий	
	ТаблицаИзБуфераОбмена.Колонки.Добавить("FINSTRUCTION"); //ЦФУ_ЦФО и Бюджет.ЦФУ_ЦФО
	ТаблицаИзБуфераОбмена.Колонки.Добавить("TYPE_CONTR"); 	//Бюджет.ТипКонтрагента
	ТаблицаИзБуфераОбмена.Колонки.Добавить("PROJECT"); 		//Бюджет.Проект
	ТаблицаИзБуфераОбмена.Колонки.Добавить("ACCOUNT"); 		//Бюджет.БюджетнаяСтатья
	ТаблицаИзБуфераОбмена.Колонки.Добавить("PERIOD"); 		//Бюджет.Период
	ТаблицаИзБуфераОбмена.Колонки.Добавить("VAT"); 			//Бюджет.СтавкаНДС
	ТаблицаИзБуфераОбмена.Колонки.Добавить("VALUE"); 		//Бюджет.СуммаРуб

	СтруктураПараметров.Вставить("ТаблицаИзБуфераОбмена", ТаблицаИзБуфераОбмена);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьОрганизацию(Параметр)
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ОпределитьВалюту(Параметр)
	
	Возврат Справочники.Валюты.НайтиПоКоду(Параметр);
	
КонецФункции

&НаСервере
Функция ОпределитьГод(Параметр)
	
	Год = СтрЗаменить(ВРЕГ(Параметр), "FY", "");
	Попытка
		Год = Число("20"+Год);
	Исключение
		Год = 2015;
	КонецПопытки;
	
	Возврат Год;
	
КонецФункции

&НаСервере
Функция ОпределитьСценарий(Параметр)	
	
	Возврат Справочники.СценарииПланирования.НайтиПоНаименованию(Параметр, Истина);
	
КонецФункции

&НаСервере
Функция ОпределитьЦФУ(Параметр)
	
	ЦФУ = Неопределено;
	Позиция = Найти(Параметр, "_");
	Если Позиция > 0 Тогда
		
		КодЦФУ 	= Сред(Параметр, 1, Позиция - 1);
		ЦФУ		= Справочники.абс_ЦФУ.НайтиПоКоду(КодЦФУ);
		
	КонецЕсли;
	
	Возврат ЦФУ;
	
КонецФункции		

&НаСервере
Функция ОпределитьЦФО(Параметр)
	
	ЦФО = Неопределено;
	Позиция = Найти(Параметр, "_");
	Если Позиция > 0 Тогда
		
		КодЦФО 	= Сред(Параметр, Позиция + 1);
		ЦФО		= Справочники.Подразделения.НайтиПоКоду(КодЦФО);
		
	КонецЕсли;
	
	Возврат ЦФО;
	
КонецФункции

&НаСервере
Функция ОпределитьТипКонтрагента(Параметр)
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ОпределитьПроект(Параметр)
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ОпределитьБюджетнуюСтатью(Параметр)
	
	Возврат Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду(Параметр);
	
КонецФункции

&НаСервере
Функция ОпределитьПериод(Параметр)
	
	Возврат Неопределено;
	
КонецФункции		

&НаСервере
Функция ОпределитьСтавкуНДС(Параметр)
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаДокументовДокументПриИзменении(Элемент)
	
	ТаблицаДокументовДокументПриИзмененииНаСервере();
	
КонецПроцедуры

 &НаСервере
Процедура ТаблицаДокументовДокументПриИзмененииНаСервере()
	
	ТекущаяСтрока 		 = Элементы.ТаблицаДокументов.ТекущиеДанные;	
	ТекущаяСтрока.Индекс = ?(ТекущаяСтрока.Документ.Проведен, 0, 2);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИндексКартинки()
	
	Для Каждого СтрокаТаблицыДокументов Из Объект.ТаблицаДокументов Цикл
		СтрокаТаблицыДокументов.ИндексКартинки = ?(СтрокаТаблицыДокументов.Документ.Проведен, 0, 2);			
	КонецЦикла;
	
КонецПроцедуры