////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет перерасчет налога для указанного списка физлиц 
Процедура Рассчитать() Экспорт

	// Используем временную таблицу для исбежания моргания в форме документа
	ВременнаяТаблицаНДФЛ = РаботникиОрганизации.Выгрузить();
	ВременнаяТаблицаНДФЛ.Индексы.Добавить("ФизЛицо");
	
	// Очистим имеющиеся данные
	ВременнаяТаблицаНДФЛ.ЗаполнитьЗначения(0,"НалогПоСтавке09,НалогПоСтавке13,НалогПоСтавке35,ПримененныйВычетЛичный,ПримененныйВычетНаДетей,ПримененныйВычетНаДетейИнвалидов,ПримененныйВычетНаДетейДвойной,ПримененныйВычетНаДетейИнвалидовДвойной,ПримененныйВычетНаДетейДвойнойВторой,ПримененныйВычетНаДетейИнвалидовДвойнойВторой,ПримененныйВычетИмущественныйРасход,ПримененныйВычетИмущественныйПроцентыПоКредитам");
	ВременнаяТаблицаНДФЛ.ЗаполнитьЗначения(Справочники.ПодразделенияОрганизаций.ПустаяСсылка(),"ПодразделениеОрганизации");
	
	// определим месяц налогового периода, по который будем рассчитывать налог с начала года 						 
	Если Год(Дата) = НалоговыйПериод Тогда
		МесяцНалоговогоПериода = НачалоМесяца(Дата);
	Иначе	
		// последний месяц налогового периода
		МесяцНалоговогоПериода = Дата(НалоговыйПериод, 12, 1);
	КонецЕсли; 		
	
	// дата, по которую будем учитывать зарегистрированные доходы и начисленные налоги 
	ПериодРегистрации = КонецМесяца(Дата);
	
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	//------------------------------------------------------------------------------------------------------
	// Расчет налога по ставке 13% (30% для нерезидентов)
	
	// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ
	СписокФизЛицТекст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.ФизЛицо
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &парамРегистратор";
	
	// получение результата НДФЛ по ставке 13 процентов
	// для него передается Организация, период и ссылка на регистратор
	
	ВыборкаПодразделений = "";
	ДанныеНДФЛ = ПроведениеРасчетов.ПолучитьДанныеНДФЛПоРегистратору(НачалоГода(МесяцНалоговогоПериода), МесяцНалоговогоПериода, ПериодРегистрации, Организация, ГоловнаяОрганизация, Ссылка, СписокФизлицТекст,,Истина,,ВыборкаПодразделений);
	
	СтруктураПоиска = Новый Структура("Физлицо,Период");
	
	// Перепишем данные расчета в табличную часть документа
	// Учитывая, что в выборке данные расчета отсортированы по месяцам налогового периода и все значения 
	// хранятся нарастающим итогом, то для каждого физлица просто возьмем данные за последний рассчитанный месяц  
	Если ДанныеНДФЛ <> НеОпределено Тогда
		
		Пока ДанныеНДФЛ.Следующий() Цикл
			
			СтрокаТЗ = ВременнаяТаблицаНДФЛ.Найти(ДанныеНДФЛ.ФизЛицо, "ФизЛицо");
			Если СтрокаТЗ = Неопределено Тогда
				Продолжить;
			КонецЕсли;	

			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ДанныеНДФЛ);
			
			ВыборкаПодразделений.Сбросить();
			Если ВыборкаПодразделений.НайтиСледующий(СтруктураПоиска) Тогда
				СтрокаТЗ.ПодразделениеОрганизации	= ВыборкаПодразделений.ПодразделениеОрганизации;
			КонецЕсли;
			
			СтрокаТЗ.НалогПоСтавке13   			= ДанныеНДФЛ.НалогИсчисленный;
			СтрокаТЗ.ПримененныйВычетЛичный		= ДанныеНДФЛ.ПримененныеВычетыЛичные - ДанныеНДФЛ.РанееПримененныеВычетыЛичные;
			СтрокаТЗ.ПримененныйВычетНаДетей	= ДанныеНДФЛ.ПримененныеВычетыДетские - ДанныеНДФЛ.РанееПримененныеВычетыДетские;
			СтрокаТЗ.ПримененныйВычетНаДетейИнвалидов			= ДанныеНДФЛ.ПримененныеВычетыДетскиеИнвалидов - ДанныеНДФЛ.РанееПримененныеВычетыДетскиеИнвалидов;
			СтрокаТЗ.ПримененныйВычетНаДетейДвойной				= ДанныеНДФЛ.ПримененныеВычетыДетскиеДвойные - ДанныеНДФЛ.РанееПримененныеВычетыДетскиеДвойные;
			СтрокаТЗ.ПримененныйВычетНаДетейИнвалидовДвойной	= ДанныеНДФЛ.ПримененныеВычетыДетскиеИнвалидовДвойные - ДанныеНДФЛ.РанееПримененныеВычетыДетскиеИнвалидовДвойные;
			СтрокаТЗ.ПримененныйВычетНаДетейДвойнойВторой		= ДанныеНДФЛ.ПримененныеВычетыДетскиеДвойныеВторые - ДанныеНДФЛ.РанееПримененныеВычетыДетскиеДвойныеВторые;
			СтрокаТЗ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой	= ДанныеНДФЛ.ПримененныеВычетыДетскиеИнвалидовДвойныеВторые - ДанныеНДФЛ.РанееПримененныеВычетыДетскиеИнвалидовДвойныеВторые;
			СтрокаТЗ.ПримененныйВычетИмущественныйРасход		= ДанныеНДФЛ.ПримененныеВычеты311 - ДанныеНДФЛ.РанееПримененныеВычеты311;
            СтрокаТЗ.ПримененныйВычетИмущественныйПроцентыПоКредитам = ДанныеНДФЛ.ПримененныеВычеты312 - ДанныеНДФЛ.РанееПримененныеВычеты312;
			
		КонецЦикла;	
		
	КонецЕсли;

	//------------------------------------------------------------------------------------------------------
	// Расчет налогов по ставке 9 и 35 %
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамСтавкаРезидента09", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09));
	Запрос.УстановитьПараметр("парамСтавкаРезидента35", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35));
	Запрос.УстановитьПараметр("парамСтавкаНеРезидента", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛСНерезидента());
	Запрос.УстановитьПараметр("парамСтавкаНеРезидентаСДивидендов", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛСНерезидента(Справочники.ДоходыНДФЛ.Код1010,КонецГода(МесяцНалоговогоПериода)));

	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", КонецМесяца(МесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(МесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецГода", КонецГода(МесяцНалоговогоПериода));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТСписокФизЛиц
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &парамРегистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Выполнить();
	
	// Ранее рассчитанные налоги
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСБюджетом.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|				ТОГДА РасчетыСБюджетом.Налог
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НалогПоСтавке09,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСБюджетом.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|				ТОГДА РасчетыСБюджетом.Налог
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НалогПоСтавке35
	|ПОМЕСТИТЬ ВТРанееНачисленныеНалоги
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК РасчетыСБюджетом
	|ГДЕ
	|	РасчетыСБюджетом.Организация = &парамГоловнаяОрганизация
	|	И РасчетыСБюджетом.ФизЛицо В
	|			(ВЫБРАТЬ
	|				СписокФизЛиц.ФизЛицо
	|			ИЗ
	|				ВТСписокФизЛиц КАК СписокФизЛиц)
	|	И РасчетыСБюджетом.Период <= &парамПериодРегистрации
	|	И РасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода
	|	И РасчетыСБюджетом.Регистратор <> &парамРегистратор
	|	И РасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСБюджетом.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Выполнить();
	 
	// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ (исключим нерезидентов)
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТСписокФизлицРезидентов
	|ИЗ
	|	ВТСписокФизЛиц КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
	|				&парамКонецГода,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						СписокФизЛиц.ФизЛицо
	|					ИЗ
	|						ВТСписокФизЛиц КАК СписокФизЛиц)) КАК НеРезиденты
	|		ПО ТЧРаботникиОрганизации.ФизЛицо = НеРезиденты.ФизЛицо
	|			И (НеРезиденты.НеЯвляетсяНалоговымРезидентомРФ)
	|ГДЕ
	|	НеРезиденты.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Выполнить();
	
	// НачислениеНалоговТекст
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДФЛОбороты.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫРАЗИТЬ((НДФЛОбороты.СуммаДоходаОборот - НДФЛОбороты.СуммаВычетаОборот) * ВЫБОР
	|				КОГДА НДФЛОбороты.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТСписокФизлицРезидентов.ФизЛицо ЕСТЬ NULL 
	|									И НДФЛОбороты.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|								ТОГДА &парамСтавкаНеРезидентаСДивидендов
	|							КОГДА ВТСписокФизлицРезидентов.ФизЛицо ЕСТЬ NULL 
	|								ТОГДА &парамСтавкаНеРезидента
	|							ИНАЧЕ &парамСтавкаРезидента09
	|						КОНЕЦ / 100
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЧИСЛО(10, 0))) КАК НалогПоСтавке09,
	|	СУММА(ВЫРАЗИТЬ((НДФЛОбороты.СуммаДоходаОборот - НДФЛОбороты.СуммаВычетаОборот) * ВЫБОР
	|				КОГДА НДФЛОбороты.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТСписокФизлицРезидентов.ФизЛицо ЕСТЬ NULL 
	|								ТОГДА &парамСтавкаНеРезидента
	|							ИНАЧЕ &парамСтавкаРезидента35
	|						КОНЕЦ / 100
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЧИСЛО(10, 0))) КАК НалогПоСтавке35
	|ПОМЕСТИТЬ ВТНачислениеНалогов
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах.Обороты(
	|			&парамНачалоГода,
	|			&парамКонецМесяцаНалоговогоПериода,
	|			Месяц,
	|			ПериодРегистрации <= &парамПериодРегистрации
	|				И Организация = &парамГоловнаяОрганизация
	|				И Физлицо В
	|					(ВЫБРАТЬ
	|						СписокФизЛиц.ФизЛицо
	|					ИЗ
	|						ВТСписокФизЛиц КАК СписокФизЛиц)) КАК НДФЛОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСписокФизлицРезидентов КАК ВТСписокФизлицРезидентов
	|		ПО НДФЛОбороты.ФизЛицо = ВТСписокФизлицРезидентов.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛОбороты.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Выполнить();
	
	// Объединение запросов
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизЛицаДокумента.ФизЛицо КАК ФизЛицо,
	|	ЕСТЬNULL(НачисленныеНалоги.НалогПоСтавке09, 0) - ЕСТЬNULL(РанееНачислено.НалогПоСтавке09, 0) КАК НалогПоСтавке09,
	|	ЕСТЬNULL(НачисленныеНалоги.НалогПоСтавке35, 0) - ЕСТЬNULL(РанееНачислено.НалогПоСтавке35, 0) КАК НалогПоСтавке35
	|ИЗ
	|	ВТСписокФизЛиц КАК ФизЛицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеНалогов КАК НачисленныеНалоги
	|		ПО ФизЛицаДокумента.ФизЛицо = НачисленныеНалоги.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРанееНачисленныеНалоги КАК РанееНачислено
	|		ПО ФизЛицаДокумента.ФизЛицо = РанееНачислено.ФизЛицо
	|ГДЕ
	|	(НачисленныеНалоги.ФизЛицо ЕСТЬ НЕ NULL 
	|			ИЛИ РанееНачислено.ФизЛицо ЕСТЬ НЕ NULL )";

	ДанныеНДФЛ = Запрос.Выполнить().Выбрать();
	Пока ДанныеНДФЛ.Следующий() Цикл
		
		Строка = ВременнаяТаблицаНДФЛ.Найти(ДанныеНДФЛ.ФизЛицо, "ФизЛицо");
		
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Строка.НалогПоСтавке09 = ДанныеНДФЛ.НалогПоСтавке09;
		Строка.НалогПоСтавке35 = ДанныеНДФЛ.НалогПоСтавке35;
		
	КонецЦикла;	
	
	// Загружаем результаты расчета
	РаботникиОрганизации.Загрузить(ВременнаяТаблицаНДФЛ);
	
	НДФЛПерерасчетПереопределяемый.РассчитатьДополнительно(ЭтотОбъект, ГоловнаяОрганизация, МесяцНалоговогоПериода);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
   |	НДФЛПерерасчет.Дата,
   |	НДФЛПерерасчет.Ссылка,
   |	НДФЛПерерасчет.НалоговыйПериод,
   |	НДФЛПерерасчет.ПериодВзаиморасчетов,
   |	НДФЛПерерасчет.Организация,
   |	НДФЛПерерасчет.Ответственный,
   |	ВЫБОР
   |		КОГДА НДФЛПерерасчет.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
   |			ТОГДА НДФЛПерерасчет.Организация
   |		ИНАЧЕ НДФЛПерерасчет.Организация.ГоловнаяОрганизация
   |	КОНЕЦ КАК ГоловнаяОрганизация
   |ИЗ
   |	Документ.НДФЛПерерасчет КАК НДФЛПерерасчет
   |ГДЕ
   |	НДФЛПерерасчет.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НалоговыйПериод) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан налоговый период, за который выполняется перерасчет налога!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодВзаиморасчетов) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан месяц, в котором следует отразить расчеты с сотрудниками!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура СформироватьВычетыПоНДФЛ(ВыборкаПоШапкеДокумента, УпрощенныйУчетНДФЛ, Отказ, Заголовок) Экспорт
	
	// получим реквизиты табличной части
	Если Год(Дата) > НалоговыйПериод Тогда
		МесяцНалоговогоПериода = Дата(НалоговыйПериод, 12, 1);
	Иначе	
		МесяцНалоговогоПериода = НачалоМесяца(Дата);
	КонецЕсли;
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("МесяцНалоговогоПериода" , МесяцНалоговогоПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	ТЧРаботникиОрганизации.ПримененныйВычетЛичный,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетей,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетейДвойной,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетейДвойнойВторой,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетейИнвалидов,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетейИнвалидовДвойной,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетейИнвалидовДвойнойВторой,
	|	ТЧРаботникиОрганизации.ПримененныйВычетИмущественныйРасход,
	|	ТЧРаботникиОрганизации.ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТСтрокиНДФЛ
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки КАК НомерСтроки,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СтрокиНДФЛ.ФизЛицо КАК ФизЛицо,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный,
	|	ВычетыФизлиц.КодВычетаЛичный,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетей,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейДвойнойВторой,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидов,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйРасход,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	СтрокиНДФЛ.ПодразделениеОрганизации
	|ИЗ
	|	ВТСтрокиНДФЛ КАК СтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц.СрезПоследних(
	|				&МесяцНалоговогоПериода,
	|				Физлицо В
	|					(ВЫБРАТЬ
	|						СтрокиНДФЛ.ФизЛицо КАК ФизЛицо
	|					ИЗ
	|						ВТСтрокиНДФЛ КАК СтрокиНДФЛ)) КАК ВычетыФизлиц
	|		ПО СтрокиНДФЛ.ФизЛицо = ВычетыФизлиц.Физлицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	
	//ВыборкаПоРаботникиОрганизации
	ВыборкаПоТЧ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// Заполним записи в наборах записей регистров
	Пока ВыборкаПоТЧ.Следующий() Цикл 
		
		НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоТЧ.НомерСтроки) +
										""" табл. части ""Сотрудники Организации"": ";
										
		Если ВыборкаПоТЧ.ПримененныйВычетЛичный <> 0 И Не ЗначениеЗаполнено(ВыборкаПоТЧ.КодВычетаЛичный) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "для указанного физического лица не зарегистрировано право на предоставление личного вычета!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда // формируем движения
			
			// Стандартные вычеты
			
			Если ВыборкаПоТЧ.ПримененныйВычетЛичный <> 0 Тогда
				ДобавитьСтрокуСтандартныхВычетовПоНДФЛ(ВыборкаПоТЧ, ВыборкаПоШапкеДокумента, ВыборкаПоТЧ.КодВычетаЛичный, ВыборкаПоТЧ.ПримененныйВычетЛичный);
			КонецЕсли;
			Если ВыборкаПоТЧ.ПримененныйВычетНаДетей <> 0 Тогда
				ДобавитьСтрокуСтандартныхВычетовПоНДФЛ(ВыборкаПоТЧ, ВыборкаПоШапкеДокумента, Справочники.ВычетыНДФЛ.Код101, ВыборкаПоТЧ.ПримененныйВычетНаДетей);
			КонецЕсли;
			Если ВыборкаПоТЧ.ПримененныйВычетНаДетейДвойной <> 0 Тогда
				ДобавитьСтрокуСтандартныхВычетовПоНДФЛ(ВыборкаПоТЧ, ВыборкаПоШапкеДокумента, Справочники.ВычетыНДФЛ.Код102, ВыборкаПоТЧ.ПримененныйВычетНаДетейДвойной);
			КонецЕсли;
			Если ВыборкаПоТЧ.ПримененныйВычетНаДетейДвойнойВторой <> 0 Тогда
				ДобавитьСтрокуСтандартныхВычетовПоНДФЛ(ВыборкаПоТЧ, ВыборкаПоШапкеДокумента, Справочники.ВычетыНДФЛ.Код111, ВыборкаПоТЧ.ПримененныйВычетНаДетейДвойнойВторой);
			КонецЕсли;
			Если ВыборкаПоТЧ.ПримененныйВычетНаДетейИнвалидов <> 0 Тогда
				ДобавитьСтрокуСтандартныхВычетовПоНДФЛ(ВыборкаПоТЧ, ВыборкаПоШапкеДокумента, Справочники.ВычетыНДФЛ.Код106, ВыборкаПоТЧ.ПримененныйВычетНаДетейИнвалидов);
			КонецЕсли;
			Если ВыборкаПоТЧ.ПримененныйВычетНаДетейИнвалидовДвойной <> 0 Тогда
				ДобавитьСтрокуСтандартныхВычетовПоНДФЛ(ВыборкаПоТЧ, ВыборкаПоШапкеДокумента, Справочники.ВычетыНДФЛ.Код107, ВыборкаПоТЧ.ПримененныйВычетНаДетейИнвалидовДвойной);
			КонецЕсли;
			Если ВыборкаПоТЧ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой <> 0 Тогда
				ДобавитьСтрокуСтандартныхВычетовПоНДФЛ(ВыборкаПоТЧ, ВыборкаПоШапкеДокумента, Справочники.ВычетыНДФЛ.Код113, ВыборкаПоТЧ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой);
			КонецЕсли;
			
			// имущественные вычеты
			Если ВыборкаПоТЧ.ПримененныйВычетИмущественныйРасход <> 0 Тогда 
				
				Движение = Движения.НДФЛИмущественныеВычетыФизлиц.Добавить();
				
				// Свойства
				Движение.Период							= ВыборкаПоШапкеДокумента.Дата;
				Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
				
				// Измерения
				Движение.ФизЛицо	 	 	 			= ВыборкаПоТЧ.ФизЛицо;
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.Год							= ВыборкаПоШапкеДокумента.НалоговыйПериод;
				Движение.КодВычетаИмущественный			= Справочники.ВычетыНДФЛ.Код311;
				
				// Ресурсы
				Движение.Размер							= ВыборкаПоТЧ.ПримененныйВычетИмущественныйРасход; 
				
				// Реквизиты
				Движение.ОбособленноеПодразделение		= ВыборкаПоШапкеДокумента.Организация;
				
			КонецЕсли;
			Если ВыборкаПоТЧ.ПримененныйВычетИмущественныйПроцентыПоКредитам <> 0 Тогда
				
				Движение = Движения.НДФЛИмущественныеВычетыФизлиц.Добавить();
				
				// Свойства
				Движение.Период							= ВыборкаПоШапкеДокумента.Дата;
				Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
				
				// Измерения
				Движение.ФизЛицо	 	 	 			= ВыборкаПоТЧ.ФизЛицо;
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.Год							= ВыборкаПоШапкеДокумента.НалоговыйПериод;
				Движение.КодВычетаИмущественный			= Справочники.ВычетыНДФЛ.Код312;
				
				// Ресурсы
				Движение.Размер							= ВыборкаПоТЧ.ПримененныйВычетИмущественныйПроцентыПоКредитам; 
				
				// Реквизиты
				Движение.ОбособленноеПодразделение		= ВыборкаПоШапкеДокумента.Организация;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// По строке выборок из результатов запроса по документу формируем движения по регистрам вычетов по НДФЛ
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ШапкаДокумента		- выборка по данным шапки документа
//	НаборСтандартныеВычеты		- набор записей для НДФЛПредоставленныеСтандартныеВычетыФизЛиц
//	НаборИмущественныеВычеты	- набор записей для НДФЛИмущественныеВычетыФизлиц
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуСтандартныхВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, КодВычета, ПримененныйВычет)
	
	Движение = Движения.НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Добавить();
	
	// Свойства
	Движение.Период						= ВыборкаПоШапкеДокумента.Дата;
	// Измерения
	Движение.Организация	 	   		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ФизЛицо	 	 	  		= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.МесяцНалоговогоПериода		= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	Движение.КодВычета	 	 	  		= КодВычета;
	
	// Ресурсы
	Движение.ПримененныйВычет			= ПримененныйВычет;
	// Реквизиты 
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛВычеты

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛудержанный(ВыборкаСуммКУдержанию, ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента) Экспорт
	
	СтруктураПоиска = Новый Структура("ФизЛицо, СтавкаНалогообложенияРезидента");
	
	НДФЛПерерасчетПереопределяемый.ДополнитьСтруктуруПоиска(СтруктураПоиска);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаСуммКУдержанию); 
	
	НалогКУдержанию = ВыборкаСуммКУдержанию.Налог; // положительная сумма исчисленного налога
	
	// учтем возможный зачет образовавшейся ранее переплаты налога
	ВыборкаПоНДФЛКЗачету.Сбросить();
	Если ВыборкаПоНДФЛКЗачету.НайтиСледующий(СтруктураПоиска) Тогда
		НалогКУдержанию = НалогКУдержанию - ВыборкаПоНДФЛКЗачету.НДФЛКЗачетуУчтено;
	КонецЕсли;
	
	Если Год(ВыборкаПоШапкеДокумента.Дата) > ВыборкаПоШапкеДокумента.НалоговыйПериод Тогда
		МесяцНалоговогоПериода = Дата(ВыборкаПоШапкеДокумента.НалоговыйПериод, 12, 1);
	Иначе	
		МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
	КонецЕсли; 
	
	Если НалогКУдержанию > 0 Тогда
		Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
		// Свойства
		Движение.Период                 		= ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
		// Измерения
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо                		= ВыборкаСуммКУдержанию.ФизЛицо;
		Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		Движение.МесяцНалоговогоПериода      	= МесяцНалоговогоПериода;
		// Ресурсы
		Движение.Налог							= НалогКУдержанию; 
		// Реквизиты
		Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
		Движение.ПодразделениеОрганизации  		= ВыборкаСуммКУдержанию.ПодразделениеОрганизации;
		Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛудержанный

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		НДФЛПерерасчетПереопределяемый.ОбработкаПроведенияДополнительно(ЭтотОбъект, ВыборкаПоШапкеДокумента, Отказ, Режим, Заголовок);
		
	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции для работы формы документа

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ(ЭтаФорма) Экспорт
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭтаФорма.ЭлементыФормы.РаботникиОрганизации,ЭтаФорма.ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	
	ЭтаФорма.мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(ЭтаФорма.Ссылка, СоответствиеТЧ, ЭтаФорма.мДействиеНажатиеНаДополнительнуюКнопкуЗаполненияТЧ);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати(ЭтаФорма) Экспорт
	
	ЭтаФорма.мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, ЭтаФорма.мДействиеОсновныеДействияФормыПечать, ЭтаФорма.мДействиеОсновныеДействияФормыУстановитьПечатьПоУмолчанию);

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (ЭтаФорма.мПодменюПечати, ЭтаФорма.ЭлементыФормы.ОсновныеДействияФормы, ЭтаФорма.мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(ЭтаФорма.мПечатьПоУмолчанию, ЭтаФорма.ЭлементыФормы.ОсновныеДействияФормы, ЭтаФорма.мДеревоМакетов, Метаданные().Имя,ЭтаФорма.мДействиеОсновныеДействияФормыПечатьПоУмолчанию);

	Если Не ЭтаФорма.мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(ЭтаФорма.мДеревоМакетов, ЭтаФорма.мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ФормаДокументаПередОткрытием(Отказ, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	// Установка кнопок печати
	УстановитьКнопкиПечати(ЭтаФорма);
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ(ЭтаФорма);
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ФормаДокументаПриОткрытии(ЭтаФорма) Экспорт
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	
	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		НалоговыйПериод = Год(Дата);
		
		ПериодВзаиморасчетов = НачалоМесяца(Дата);	
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;	
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Заполним реквизит формы МесяцСтрока.
	ЭтаФорма.МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодВзаиморасчетов);
	
	МассивСсылок = Новый Массив;
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код101);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код102);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код106);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код107);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код111);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код113);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код311);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код312);
 	Представления = ОбщегоНазначения.ПолучитьПредставленияОбъектов(МассивСсылок);
	
	КолонкиНДФЛ = ЭлементыФормы.РаботникиОрганизации.Колонки;
	КолонкиНДФЛ.НалогПоСтавке09.ТекстШапки = ?(НалоговыйПериод >= 2008,"По ставке 9 (15)%","По ставке 9 (30)%");
	КолонкиНДФЛ.ПримененныйВычетНаДетей.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код101];
	КолонкиНДФЛ.ПримененныйВычетНаДетейДвойной.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код102];
	КолонкиНДФЛ.ПримененныйВычетНаДетейДвойнойВторой.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код111];
	КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидов.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код106];
	КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код107];
	КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код113];
	КолонкиНДФЛ.ПримененныйВычетИмущественныйРасход.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код311];
	КолонкиНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код312];
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	ЭтаФорма.мТекущаяДатаДокумента        = Дата;
	
	// Получим и запомним ссылку на головную организацию
	ЭтаФорма.мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаДокументаОбновлениеОтображения(ЭтаФорма) Экспорт
	КолонкиНДФЛ = ЭтаФорма.ЭлементыФормы.РаботникиОрганизации.Колонки;
	
	БлокКолонок = Новый Массив;
	БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетей);
	БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейДвойной);
	БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейДвойнойВторой);
	БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидов);
	БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной);
	БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой);
	РаботаСДиалогами.ПеренестиБлокКолонокЦеликом(КолонкиНДФЛ, КолонкиНДФЛ.КолонкаЗаголовок, БлокКолонок);
	
	БлокКолонок = Новый Массив;
	БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетИмущественныйРасход);
	БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам);
	РаботаСДиалогами.ПеренестиБлокКолонокЦеликом(КолонкиНДФЛ, КолонкиНДФЛ.КолонкаЗаголовокИмущественный, БлокКолонок);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ФормаДокументаОбработкаВыбора(ЗначениеВыбора, Источник, ЭтаФорма) Экспорт
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			РаботникиОрганизации.Загрузить(ЗначениеВыбора.Данные.Выгрузить())
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ФормаДокументаПослеЗаписи(ЭтаФорма) Экспорт
    
	// Установка кнопок печати
	УстановитьКнопкиПечати(ЭтаФорма);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭтаФорма.ЭлементыФормы.Номер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события нажатия кнопки "Рассчитать"
Процедура ФормаДокументаДействияФормыРассчитать(Кнопка, ЭтаФорма) Экспорт
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ЭтаФорма.ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		Возврат;
	КонецЕсли;
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	Рассчитать();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ФормаДокументаДействияФормыДвиженияДокументаПоРегистрам(Кнопка, ЭтаФорма) Экспорт

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ФормаДокументаДействияФормыЗаполнить(Кнопка, ЭтаФорма) Экспорт
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, "РаботникиОрганизаций", Организация, Неопределено, Истина, Ложь,,,,,Истина);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельРаботникиОрганизации"

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура ФормаДокументаКоманднаяПанельРаботникиОрганизацииПодбор(Кнопка, ЭтаФорма) Экспорт
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудникаОрганизации(ЭтаФорма.ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, ЭтаФорма.мГоловнаяОрганизация,,,,, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ФормаДокументаДатаПриИзменении(Элемент, ЭтаФорма) Экспорт

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, ЭтаФорма.мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭтаФорма.ЭлементыФормы.Номер);

	ЭтаФорма.мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ФормаДокументаОрганизацияПриИзменении(Элемент, ЭтаФорма) Экспорт

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭтаФорма.ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	ЭтаФорма.мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода, за который производится перерасчет.
//
Процедура ФормаДокументаНалоговыйПериодПриИзменении(Элемент, ЭтаФорма) Экспорт
	ЭтаФорма.ЭлементыФормы.РаботникиОрганизации.Колонки.НалогПоСтавке09.ТекстШапки = ?(Элемент.Значение >= 2008, "По ставке 9 (15)%", "По ставке 9 (30)%");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ФормаДокументаПериодВзаиморасчетовПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодВзаиморасчетов);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодВзаиморасчетов);
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ФормаДокументаПериодВзаиморасчетовРегулирование(Элемент, Направление, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	ПериодВзаиморасчетов = ДобавитьМесяц(ПериодВзаиморасчетов, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодВзаиморасчетов);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ФормаДокументаПериодВзаиморасчетовОчистка(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ФормаДокументаПериодВзаиморасчетовНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодВзаиморасчетов, ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ФормаДокументаПериодВзаиморасчетовАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ЭтаФорма) Экспорт
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ФормаДокументаПериодВзаиморасчетовОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ЭтаФорма) Экспорт
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

// Процедура - обработчик события вывода строки табличной части
Процедура ФормаДокументаРаботникиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма) Экспорт
	ОформлениеСтроки.Ячейки.КолонкаЗаголовок.Видимость = Ложь;	
	ОформлениеСтроки.Ячейки.КолонкаЗаголовокИмущественный.Видимость = Ложь;	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура ФормаДокументаРаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Физлицо = ВыбранноеЗначение;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо)).Количество() = 0 Тогда
		РаботникиОрганизации.Добавить().Физлицо = Физлицо;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ РаботникиОрганизации

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФормаДокументаРаботникиОрганизацииФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, ЭтаФорма.мГоловнаяОрганизация, 6, СтандартнаяОбработка, Элемент.Значение,, Истина);
	
КонецПроцедуры

Процедура ФормаДокументаРаботникиОрганизацииФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФормаДокументаРаботникиОрганизацииФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ЭтаФорма) Экспорт
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 6, Текст, Организация, Истина);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФормаДокументаРаботникиОрганизацииФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ЭтаФорма) Экспорт
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 6, Текст, Организация, Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ФормаДокументаДействияФормыДействиеОткрытьСвойства(Кнопка, ЭтаФорма) Экспорт

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ФормаДокументаДействияФормыДействиеОткрытьКатегории(Кнопка, ЭтаФорма) Экспорт

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ФормаДокументаДействияФормыСтруктураПодчиненностиДокумента(Кнопка, ЭтаФорма) Экспорт
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура ФормаДокументаНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка, ЭтаФорма) Экспорт
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(ЭтаФорма.мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ФормаДокументаОсновныеДействияФормыПечатьПоУмолчанию(Кнопка, ЭтаФорма) Экспорт
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(ЭтаФорма.мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ФормаДокументаОсновныеДействияФормыПечать(Кнопка, ЭтаФорма) Экспорт
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(ЭтаФорма.мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ФормаДокументаОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка, ЭтаФорма) Экспорт
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(ЭтаФорма.мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати(ЭтаФорма);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ФормаДокументаДействияФормыРедактироватьНомер(Кнопка, ЭтаФорма) Экспорт
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭтаФорма.ЭлементыФормы.Номер);
			
КонецПроцедуры

#КонецЕсли