
Перем ТЗ_Сессия;
Перем Запрос;
&НаКлиенте
Перем КоличествоДокументовНаОперации;

&НаКлиенте
Процедура йИсторияСтатусов(Команда)
	СтандартнаяОбработка=Ложь;
	ФормаВыбора = ПолучитьФорму("Документ.ttk_ЗагрузкаНачисленийИзБиллинга.Форма.ФормаИсторииСтатусов");
	ФормаВыбора.ЗакрыватьПриЗакрытииВладельца=Истина;
	ФормаВыбора.ЗакрыватьПриВыборе=Истина;
	ФормаВыбора.ВладелецФормы=ЭтаФорма.ЭтаФорма;
	ФормаВыбора.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура йОбновитьВсе(Команда)
	Состояние("Обновляется информация в документе загрузки по завершённым операциям...");
	//ОбновитьСтатусыПослеОперации();
	ОбновитьСтатусыСогласованияНоменклатур();
	ОбновитьСтатусыСогласованияАналитик();
//	Если ЭтаФорма.ОбновитьБюджетнуюСтатьюПриУстановкеФлагаОбновленияБюджетнойСтатьи Тогда
//		ОбновитьБС();
//	КонецЕсли;
	ОбновлениеСтатусовОбъектовЗагрузки();
	ОбновитьТранспарантОшибок();
	Если Модифицированность Тогда
		йЗаписатьБыстро();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыСогласованияНоменклатур()
	РСОС=РегистрыСведений.ttk_Task_Queue_СогласованиеНоменклатурИАналитик.СоздатьНаборЗаписей();
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ttk_Task_Queue_СогласованиеНоменклатурИАналитик.Номенклатура,
	             |	ttk_Task_Queue_СогласованиеНоменклатурИАналитик.Согласовано
	             |ИЗ
	             |	РегистрСведений.ttk_Task_Queue_СогласованиеНоменклатурИАналитик КАК ttk_Task_Queue_СогласованиеНоменклатурИАналитик
	             |ГДЕ
	             |	ttk_Task_Queue_СогласованиеНоменклатурИАналитик.ДокументЗагрузки = &ДокументЗагрузки
	             |	И ttk_Task_Queue_СогласованиеНоменклатурИАналитик.СтрокаНомерДляНоменклатуры = &СтрокаНомер
	             |	И ttk_Task_Queue_СогласованиеНоменклатурИАналитик.СтрокаНомерДляАналитики = 0";
	Запрос.УстановитьПараметр("ДокументЗагрузки",Объект.Ссылка);
	Для каждого йСтр Из Объект.УслугиНоменклатуры Цикл
		Если йСтр.Статус = Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
			Продолжить;
		КонецЕсли;
		Если йСтр.НаСогласовании Тогда
			Запрос.УстановитьПараметр("СтрокаНомер",йСтр.НомерСтроки);
			йСтроки=Запрос.Выполнить().Выбрать();
			Если йСтроки.Следующий() Тогда
				Если йСтроки.Согласовано Тогда
					РСОС.Отбор.ДокументЗагрузки.Установить(Объект.Ссылка);
					РСОС.Отбор.СтрокаНомерДляНоменклатуры.Установить(йСтр.НомерСтроки);
					РСОС.Отбор.СтрокаНомерДляАналитики.Установить(0);
					РСОС.Прочитать();
					РСОС.Очистить();
					Попытка
						РСОС.Записать();
					Исключение
						Продолжить;
					КонецПопытки;
					йСтр.НаСогласовании=Ложь;
					йСтр.Номенклатура=йСтроки.Номенклатура;
					йСтр.Согласовано=Истина;
					Модифицированность=Истина;
				КонецЕсли;
			Иначе
				йСтр.НаСогласовании=Ложь;
				Модифицированность=Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОтображениеМодифицированности();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыСогласованияАналитик()
	РСОС=РегистрыСведений.ttk_Task_Queue_СогласованиеНоменклатурИАналитик.СоздатьНаборЗаписей();
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ttk_Task_Queue_СогласованиеНоменклатурИАналитик.НоменклатурнаяГруппа,
	             //|	ttk_Task_Queue_СогласованиеНоменклатурИАналитик.БюджетнаяСтатья,
	             |	ttk_Task_Queue_СогласованиеНоменклатурИАналитик.Согласовано
	             |ИЗ
	             |	РегистрСведений.ttk_Task_Queue_СогласованиеНоменклатурИАналитик КАК ttk_Task_Queue_СогласованиеНоменклатурИАналитик
	             |ГДЕ
	             |	ttk_Task_Queue_СогласованиеНоменклатурИАналитик.ДокументЗагрузки = &ДокументЗагрузки
	             |	И ttk_Task_Queue_СогласованиеНоменклатурИАналитик.СтрокаНомерДляНоменклатуры = 0
	             |	И ttk_Task_Queue_СогласованиеНоменклатурИАналитик.СтрокаНомерДляАналитики = &СтрокаНомер";
	Запрос.УстановитьПараметр("ДокументЗагрузки",Объект.Ссылка);
	Для каждого йСтр Из Объект.Аналитики Цикл
		Если йСтр.Статус = Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
			Продолжить;
		КонецЕсли;
		Если йСтр.НаСогласовании Тогда
			Запрос.УстановитьПараметр("СтрокаНомер",йСтр.НомерСтроки);
			йСтроки=Запрос.Выполнить().Выбрать();
			Если йСтроки.Следующий() Тогда
				Если йСтроки.Согласовано Тогда
					РСОС.Отбор.ДокументЗагрузки.Установить(Объект.Ссылка);
					РСОС.Отбор.СтрокаНомерДляНоменклатуры.Установить(0);
					РСОС.Отбор.СтрокаНомерДляАналитики.Установить(йСтр.НомерСтроки);
					РСОС.Прочитать();
					РСОС.Очистить();
					Попытка
						РСОС.Записать();
					Исключение
						Продолжить;
					КонецПопытки;
					йСтр.НаСогласовании=Ложь;
					йСтр.НоменклатурнаяГруппа=йСтроки.НоменклатурнаяГруппа;
					//йСтр.БюджетнаяСтатья=йСтроки.БюджетнаяСтатья;
					йСтр.Согласовано=Истина;
					Модифицированность=Истина;
				КонецЕсли;
			Иначе
				йСтр.НаСогласовании=Ложь;
				Модифицированность=Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОтображениеМодифицированности();
КонецПроцедуры

&НаКлиенте
Процедура йЗаписатьВсе(Команда)
	ПараметрыЗаписи=Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписиДокумента",РежимЗаписиДокумента.ОтменаПроведения);
	ПараметрыЗаписи.Вставить("РежимПроведенияДокумента",РежимПроведенияДокумента.Неоперативный);
	ЭтаФорма.Записать(ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура йВыходИзДокумента(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура йВыбиратьСессию(Команда)
	Если Объект.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ЗагрузкаДанных Тогда	
		Отказ=Ложь;
		Состояние("Идет загрузка сессии...");
		ЗагрузитьОперативныеТаблицы(Отказ);
		ПоискДокументовОснованийДляКорректировок();
		ОбновлениеСтатусовОбъектовЗагрузки();
		ОбновитьТранспарантОшибок();
		СмотретьДокументыТолькоОшибки=Ложь;
		СмотретьДеталировкуТолькоОшибки=Ложь;
		ИнициализацияФильтровТаблиц();
		Если НЕ Отказ Тогда
			Запрос=Новый Запрос;
			Запрос.УстановитьПараметр("Дока",Объект.Ссылка);
			Запрос.Текст="ВЫБРАТЬ
			            |	ttk_ЗагруженныеСессииИзЗагрузкиНачислений.МестонахождениеБиллинга,
			            |	ttk_ЗагруженныеСессииИзЗагрузкиНачислений.MONT_F,
			            |	ttk_ЗагруженныеСессииИзЗагрузкиНачислений.JOURNALID,
		    	        |	ttk_ЗагруженныеСессииИзЗагрузкиНачислений.SESSIONID,
			            |	ttk_ЗагруженныеСессииИзЗагрузкиНачислений.TRANSDATE
		        	    |ИЗ
		            	|	РегистрСведений.ttk_ЗагруженныеСессииИзЗагрузкиНачислений КАК ttk_ЗагруженныеСессииИзЗагрузкиНачислений
			            |ГДЕ
			            |	ttk_ЗагруженныеСессииИзЗагрузкиНачислений.Документ = &Дока";
			йЗаписи=Запрос.Выполнить().Выбрать();
			Пока йЗаписи.Следующий() Цикл
				НСессии=РегистрыСведений.ttk_ЗагруженныеСессииИзЗагрузкиНачислений.СоздатьНаборЗаписей();
				НСессии.Отбор.JOURNALID.Установить(йЗаписи.JOURNALID);
				НСессии.Отбор.SESSIONID.Установить(йЗаписи.SESSIONID);
				НСессии.Отбор.TRANSDATE.Установить(йЗаписи.TRANSDATE);
				//НСессии.Отбор.MONT_F.Установить(йЗаписи.MONT_F);
				НСессии.Отбор.МестонахождениеБиллинга.Установить(йЗаписи.МестонахождениеБиллинга);
				НСессии.Прочитать();
				_ДЗ=Дата(1,1,1);
				Если НСессии.Количество()>0 Тогда
					_ДЗ = НСессии[0].ЗагруженИзTPI;
				КонецЕсли;
				НСессии.Очистить();
				НСессия=НСессии.Добавить();
				НСессия.JOURNALID=йЗаписи.JOURNALID;
				НСессия.SESSIONID=йЗаписи.SESSIONID;
				НСессия.TRANSDATE=йЗаписи.TRANSDATE;
				НСессия.MONT_F=йЗаписи.MONT_F;
				НСессия.МестонахождениеБиллинга=йЗаписи.МестонахождениеБиллинга;
				НСессия.Документ=Документы.ttk_ЗагрузкаНачисленийИзБиллинга.ПустаяСсылка();
				НСессия.Актуальность=Истина;
				НСессия.ЗагруженИзTPI=_ДЗ;
				НСессии.Записать();
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если Вопрос("Перезагрузить сессию?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		Предупреждение("Заявка на перезагрузку сессии отправлена. Нажмите ОК и ожидайте сообщений от Сервис-Робота");
		НСессии=РегистрыСведений.ttk_ЗагруженныеСессииИзЗагрузкиНачислений.СоздатьНаборЗаписей();
		НСессии.Отбор.JOURNALID.Установить(Объект.ЖурналID);
		НСессии.Отбор.SESSIONID.Установить(Объект.СессияID);
		НСессии.Отбор.TRANSDATE.Установить(Объект.ДатаЗагрузкиВTPI);
		//НСессии.Отбор.MONT_F.Установить(Объект.MONT_F);
		НСессии.Отбор.МестонахождениеБиллинга.Установить(Объект.МестонахождениеБиллинга);
		НСессии.Прочитать();
		НСессии.Очистить();
		НСессия=НСессии.Добавить();
		НСессия.JOURNALID=Объект.ЖурналID;
		НСессия.SESSIONID=Объект.СессияID;
		НСессия.TRANSDATE=Объект.ДатаЗагрузкиВTPI;
		НСессия.MONT_F=Объект.MONT_F;
		НСессия.МестонахождениеБиллинга=Объект.МестонахождениеБиллинга;
		НСессия.Документ=Объект.Ссылка;
		НСессия.Актуальность=Истина;
		// выставляется семафор, когда начнётся перезагрузка с гарантированным таймоутом 2,5 минут
		НСессия.ЗагруженИзTPI=абс_СерверныеФункции.ПолучитьДатуСервера()+150;
		НСессия.АнализПроведен=Дата(1,1,1);
		НСессии.Записать();
		йЗаписатьБыстро();
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяУстановкаОперацииСДокументами()
	Для каждого йСтр Из Объект.Документы Цикл
		ФлагЗастопорен=Ложь;
		ФлагОтсутствияДокументов=Ложь;
		ФлагНеЗавершенныхДокументов=Ложь;
		Если ПустаяСтрока(йСтр.НомерКорректировкиРеализации) Тогда
			// обычная реализация
			
		Иначе
			// корректировка
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПоискДокументаОснованияПоНомеру(НомерДокумента, йОрганизация=Неопределено, йДоговор=Неопределено)
	йнд=СокрЛП(НомерДокумента);
	// поиск документа основания в обычном режиме если есть суффикс, то корректировка, иначе реализация
	ЭтоКорректировка=(Найти("CDEFGHIJKLMN",Прав(йнд,1))>0);
	йДока=Неопределено;
	Запрос=Новый Запрос;
	ТекстЗапросаДоп="";
	Если НЕ йОрганизация=Неопределено Тогда
		Запрос.УстановитьПараметр("Организация",йОрганизация);
		ТекстЗапросаДоп=ТекстЗапросаДоп+"
		|	И Доки.Организация = &Организация";
	КонецЕсли;
	Если НЕ йДоговор=Неопределено Тогда
		Запрос.УстановитьПараметр("Договор",йДоговор);
		ТекстЗапросаДоп=ТекстЗапросаДоп+"
		|	И Доки.ДоговорКонтрагента = &Договор";
	КонецЕсли;
	Для йИнд=1 По 2 Цикл
		Запрос.УстановитьПараметр("НомерДокумента",йнд);
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	Доки.Ссылка КАК Документ
	             |ИЗ
	             |	Документ."+?(ЭтоКорректировка,"КорректировкаРеализации","РеализацияТоваровУслуг")+" КАК Доки
	             |ГДЕ
	             |	Доки.Номер = &НомерДокумента"+ТекстЗапросаДоп;
		Доки=Запрос.Выполнить().Выбрать();
		// поиск документа основания по полному номеру
		пДока=Неопределено;
		Пока Доки.Следующий() Цикл
			пДока=Доки.Документ;
			Если ?(ЭтоКорректировка,Доки.Документ.абс_СтатусДокумента,Доки.Документ.абс_Статус) = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
				йДока=Доки.Документ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если йДока<>Неопределено Тогда
			Возврат йДока;
		КонецЕсли;
		Если пДока<>Неопределено Тогда
			Возврат пДока;
		КонецЕсли;
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"Доки.Номер = &НомерДокумента","ПОДСТРОКА(Доки.Номер,2,30) = ВЫРАЗИТЬ(&НомерДокумента КАК СТРОКА(30))");
		Доки=Запрос.Выполнить().Выбрать();			 
		// поиск документа основания по номеру без первого символа
		пДока=Неопределено;
		Пока Доки.Следующий() Цикл
			пДока=Доки.Документ;
			Если ?(ЭтоКорректировка,Доки.Документ.абс_СтатусДокумента,Доки.Документ.абс_Статус) = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
				йДока=Доки.Документ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если йДока<>Неопределено Тогда
			Возврат йДока;
		КонецЕсли;
		Если пДока<>Неопределено Тогда
			Возврат пДока;
		КонецЕсли;
		Если йИнд=2 Тогда
			Прервать;
		КонецЕсли;
		Если йОрганизация=Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ПустаяСтрока(йОрганизация.Префикс) Тогда
			Прервать;
		КонецЕсли;
		// идём на второй круг, но номер теперь со сложным префиксом
		йнд = СокрЛП(""+СокрЛП(йОрганизация.Префикс)+"B"+йнд);
	КонецЦикла;
	// поиск документа основания как корректировки, так как есть ещё и несуффиксные региональные корректировки
	Для йИнд=1 По 2 Цикл
		Запрос.УстановитьПараметр("НомерДокумента",йнд);
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	Доки.Ссылка КАК Документ
	             |ИЗ
	             |	Документ.КорректировкаРеализации КАК Доки
	             |ГДЕ
	             |	Доки.Номер = &НомерДокумента"+ТекстЗапросаДоп;
		Доки=Запрос.Выполнить().Выбрать();			 
		// поиск документа основания по полному номеру
		пДока=Неопределено;
		Пока Доки.Следующий() Цикл
			пДока=Доки.Документ;
			Если Доки.Документ.абс_СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
				йДока=Доки.Документ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если йДока<>Неопределено Тогда
			Возврат йДока;
		КонецЕсли;
		Если пДока<>Неопределено Тогда
			Возврат пДока;
		КонецЕсли;
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"Доки.Номер = &НомерДокумента","ПОДСТРОКА(Доки.Номер,2,30) = ВЫРАЗИТЬ(&НомерДокумента КАК СТРОКА(30))");
		Доки=Запрос.Выполнить().Выбрать();			 
		// поиск документа основания по номеру без первого символа
		пДока=Неопределено;
		Пока Доки.Следующий() Цикл
			пДока=Доки.Документ;
			Если Доки.Документ.абс_СтатусДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
				йДока=Доки.Документ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если йДока<>Неопределено Тогда
			Возврат йДока;
		КонецЕсли;
		Если пДока<>Неопределено Тогда
			Возврат пДока;
		КонецЕсли;
		Если йИнд=2 Тогда
			Прервать;
		КонецЕсли;
		Если йОрганизация=Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ПустаяСтрока(йОрганизация.Префикс) Тогда
			Прервать;
		КонецЕсли;
		// идём на второй круг, но номер теперь со сложным префиксом
		йнд = СокрЛП(""+СокрЛП(йОрганизация.Префикс)+"B"+йнд);
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ПоискДоговоровДоМиграции(ДоговорПослеМиграции)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДоговорыКонтрагентов.Ссылка КАК Договор
	             |ИЗ
	             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	             |ГДЕ
	             |	ДоговорыКонтрагентов.Ссылка <> &ДоговорПослеМиграции
	             |	И ДоговорыКонтрагентов.ДоговорПослеМиграции = &ДоговорПослеМиграцииДоп";
	Запрос.УстановитьПараметр("ДоговорПослеМиграции",ДоговорПослеМиграции);
	Запрос.УстановитьПараметр("ДоговорПослеМиграцииДоп",ДоговорПослеМиграции);
	Для йИнд=1 По 2 Цикл
		Доги=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Договор");
		Если Доги.Количество()>0 Тогда
			Возврат Доги;
		КонецЕсли;
		Если йИнд=2 Тогда
			Прервать;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДоговорПослеМиграции.ДоговорПослеМиграции) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.УстановитьПараметр("ДоговорПослеМиграцииДоп",ДоговорПослеМиграции.ДоговорПослеМиграции);
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ПолучитьДокументМиграции(ОрганизацияИсточник,ДоговорПриемник,ДокументОснование,ОрганизацияПриемник)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_СоответствияОбъектовПереноса.ОбъектПриемник
	|ИЗ
	|	РегистрСведений.абс_СоответствияОбъектовПереноса КАК абс_СоответствияОбъектовПереноса
	|ГДЕ
	|	абс_СоответствияОбъектовПереноса.ОрганизацияИсточник = &Организация
	|	И абс_СоответствияОбъектовПереноса.ОрганизацияПриемник = &ОрганизацияПриемник
	|	И абс_СоответствияОбъектовПереноса.ОбъектИсточник = &ОбъектИсточник";
	Запрос.УстановитьПараметр("ОбъектИсточник", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", ОрганизацияИсточник);
	Запрос.УстановитьПараметр("ОрганизацияПриемник", ОрганизацияПриемник);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ОбъектПриемник;
	Иначе
		Док = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
// +++ввв 14.11.2016 г.
		Док.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		ДокОсн=ДокументОснование;
		Пока ТипЗнч(ДокОсн)=Тип("ДокументСсылка.КорректировкаРеализации") Цикл
			ДокОсн=ДокОсн.ДокументРеализации;
		КонецЦикла;
		Док.Дата 		= ДокОсн.Дата;
		Если ТипЗнч(ДокОсн)=Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
			// переносим реквизиты при многоступенчатой миграции
			Док.ttk_Дата	= ДокОсн.ttk_Дата;
			Док.ttk_Номер	= ДокОсн.ttk_Номер;
			Док.ttk_ДатаСФ	= ДокОсн.ttk_ДатаСФ;
			Док.ttk_НомерСФ	= ДокОсн.ttk_НомерСФ;
		ИначеЕсли ТипЗнч(ДокОсн)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			// Реквизиты берём из первичного документа реализации
			Док.ttk_Дата	= ДокОсн.Дата;
			Док.ttk_Номер	= ДокОсн.Номер;
			_СФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокОсн, "СчетФактураВыданный", Неопределено);
			Если ЗначениеЗаполнено(_СФ) Тогда
				Док.ttk_ДатаСФ	= _СФ.Дата;
				Док.ttk_НомерСФ	= _СФ.Номер;
			Иначе
				Док.ttk_ДатаСФ	= "";
				Док.ttk_НомерСФ	= Дата(1,1,1);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокОсн)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			// Реквизиты берём из СФ на корректировку из специальных полей.
// требуется доработка для определения полей забора реквизитов Номер и Даты.
			Док.ttk_Дата	= ДокОсн.Дата;
			Док.ttk_Номер	= ДокОсн.Номер;
		КонецЕсли;
// ---ввв 14.11.2016 г.
		Док.Организация           = ОрганизацияПриемник;
		Док.абс_ДокументОснование = ДокументОснование;  
		Док.Контрагент            = ДоговорПриемник.Владелец;
		Док.ДоговорКонтрагента    = ДоговорПриемник;
		Док.ВалютаДокумента       = ДоговорПриемник.ВалютаВзаиморасчетов;
		МетаданныеДокумента		  = ДокументОснование.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаДокумента",МетаданныеДокумента) Тогда
			Док.СуммаДокумента = ДокументОснование.СуммаДокумента;
		КонецЕсли;
		Попытка
			Док.ОбменДанными.Загрузка=Истина;
			Док.Записать(РежимЗаписиДокумента.Запись);	
		Исключение
			Док=Неопределено;
		КонецПопытки;
		СтруктураПараметров = Новый Структура("Филиал,ДЗО", ОрганизацияПриемник, ОрганизацияИсточник);     
		абс_Филиализация.ДобавитьСоответствиеОбъектов(ДокументОснование.Ссылка, Док.Ссылка, "ДокументСсылка."+МетаданныеДокумента.Имя, СтруктураПараметров);
		Возврат Док.Ссылка;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПоискКорректировкиПоДокументуОснованию(ДокаОснование,МесяцУчета)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокаОснование", ДокаОснование);
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	             |	КорректировкаРеализации.Ссылка
	             |ИЗ
	             |	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	             |ГДЕ
	             |	КорректировкаРеализации.ДокументРеализации = &ДокаОснование
	             |	И ГОД(КорректировкаРеализации.Дата) * 100 + МЕСЯЦ(КорректировкаРеализации.Дата) = &МесяцУчета";
	Запрос.УстановитьПараметр("МесяцУчета",МесяцУчета);
	Доки=Запрос.Выполнить().Выбрать();
	Если Доки.Следующий() Тогда
		Возврат Доки.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПоискСФПоДокументуОснованию(ДокаОснование,МесяцУчета)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокаОснование", ДокаОснование);
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	             |	СчетФактураВыданныйДокументыОснования.Ссылка
	             |ИЗ
	             |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	             |ГДЕ
	             |	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокаОснование
	             |	И ГОД(СчетФактураВыданныйДокументыОснования.Ссылка.Дата) * 100 + МЕСЯЦ(СчетФактураВыданныйДокументыОснования.Ссылка.Дата) = &МесяцУчета";
	Запрос.УстановитьПараметр("МесяцУчета",МесяцУчета);
	Доки=Запрос.Выполнить().Выбрать();
	Если Доки.Следующий() Тогда
		Возврат Доки.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОбновитьПараметрыСтрокиДокументКорректировка(йСтр)
	Если ПустаяСтрока(йСтр.НомерКорректировкиРеализации) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(йСтр.Договор) Тогда
		Возврат;
	КонецЕсли;
	йнд=йСтр.НомерДокументаОснования;
	Если НЕ ЗначениеЗаполнено(йСтр.ДокументОснование) Тогда
		ДокаОснование=Неопределено;
		ДоговорМиграции=Неопределено;
		ОрганизацияМиграции=Неопределено;
		ДокументМиграции=Неопределено;
		ДокаОснование=ПоискДокументаОснованияПоНомеру(йнд,Объект.Организация,йСтр.Договор);
		Если ДокаОснование=Неопределено Тогда
		// поиск документов в организации источнике миграции, так как не нашли в основной
			ДоговорПослеМиграции=йСтр.Договор;
			Пока Истина Цикл
				Если НЕ ЗначениеЗаполнено(ДоговорПослеМиграции) Тогда
					Прервать;
				КонецЕсли;
				ДоговорыДоМиграции=ПоискДоговоровДоМиграции(ДоговорПослеМиграции);
				Если ДоговорыДоМиграции=Неопределено Тогда
					Прервать;
				КонецЕсли;
				ДоговорМиграции=NULL;
				ОрганизацияМиграции=NULL;
				Для каждого йДога Из ДоговорыДоМиграции Цикл
					ДокаОснование=ПоискДокументаОснованияПоНомеру(йнд,йДога.Организация,йДога.Ссылка);
					Если ДокаОснование=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДоговорМиграции=йДога.Ссылка;
					ОрганизацияМиграции=йДога.Организация;
					//Сообщить(ДокаОснование);
					Прервать;
				КонецЦикла;
				ДоговорПослеМиграции=ДоговорыДоМиграции[0].Ссылка;
				Если ЗначениеЗаполнено(ДокаОснование) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			//ДоговорыДоМиграции=ПоискДоговоровДоМиграции(йСтр.Договор);
			//Если ДоговорыДоМиграции<>Неопределено Тогда
			//	Для каждого йДога Из ДоговорыДоМиграции Цикл
			//		ДокаОснование=ПоискДокументаОснованияПоНомеру(йнд,йДога.Организация,йДога.Ссылка);
			//		Если ДокаОснование=Неопределено Тогда
			//			Продолжить;
			//		КонецЕсли;
			//		ДоговорМиграции=йДога.Ссылка;
			//		ОрганизацияМиграции=йДога.Организация;
			//		Прервать;
			//	КонецЦикла;
			//КонецЕсли;
		КонецЕсли;
		Если ДокаОснование=Неопределено Тогда
			Возврат;
		КонецЕсли;
		йСтр.ДатаИсходногоДокумента=ДокаОснование.Дата;
		йСтр.ДокументОснование=ДокаОснование;
		Если НЕ ОрганизацияМиграции=Неопределено Тогда
			// если документ основание из организации источника миграции, то ищем документ ручного учёта
			йСтр.ОрганизацияМиграции=ОрганизацияМиграции;
			йСтр.ДоговорМиграции=ДоговорМиграции;
			йСтр.ДокументМиграции=ПолучитьДокументМиграции(ОрганизацияМиграции,йСтр.Договор,ДокаОснование,Объект.Организация);
			Объект.КонтрагентыДоговоры[йСтр.ИндексДоговора].ДоговорДоМиграции=ДоговорМиграции;
		Иначе
			// если документ основание из текущей организации, то обнуляем реквизиты контрагента шапки
			йСтр.ОрганизацияМиграции=Справочники.Организации.ПустаяСсылка();
			йСтр.ДоговорМиграции=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			йСтр.ДокументМиграции=Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка();
			Объект.КонтрагентыДоговоры[йСтр.ИндексДоговора].ДоговорДоМиграции=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(йСтр.КорректировкаРеализации) Тогда
		ДокаКорректировка=ПоискДокументаОснованияПоНомеру(йСтр.НомерКорректировкиРеализации,Объект.Организация,йСтр.Договор);
		Если ДокаКорректировка=Неопределено Тогда
			Если ЗначениеЗаполнено(йСтр.ОрганизацияМиграции) Тогда
				ДокаОснование=йСтр.ДокументМиграции;
			Иначе
				ДокаОснование=йСтр.ДокументОснование;
			КонецЕсли;
			ДокаКорректировка=ПоискКорректировкиПоДокументуОснованию(ДокаОснование,Объект.MONT_F);
		КонецЕсли;
		Если ДокаКорректировка<>Неопределено Тогда
			йСтр.КорректировкаРеализации=ДокаКорректировка;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(йСтр.СчетФактура) И ЗначениеЗаполнено(йСтр.КорректировкаРеализации) Тогда
		ДокаСчетФактура=ПоискСФПоДокументуОснованию(йСтр.КорректировкаРеализации,Объект.MONT_F);
		Если ДокаСчетФактура<>Неопределено Тогда
			йСтр.СчетФактура=ДокаСчетФактура;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискДокументовОснованийДляКорректировок()
	Для каждого йСтр Из Объект.Документы Цикл
		Если ПустаяСтрока(йСтр.НомерКорректировкиРеализации) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.Договор) Тогда
			Продолжить;
		КонецЕсли;
		йСтр.ДокументОснование=Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		йСтр.КорректировкаРеализации=Документы.КорректировкаРеализации.ПустаяСсылка();
		йСтр.СчетФактура=Документы.СчетФактураВыданный.ПустаяСсылка();
		ОбновитьПараметрыСтрокиДокументКорректировка(йСтр);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТранспарантОшибок()
	ОбъектДокументыРеализацииБезОшибок=0;
	ОбъектДокументыРеализацииСОшибками=0;
	ОбъектДокументыКорректировкиРеализацииБезОшибок=0;
	ОбъектДокументыКорректировкиРеализацииСОшибками=0;
	ОбъектДокументЗадолженностиБезОшибки=0;
	ОбъектДокументЗадолженностиСОшибкой=0;
	ОбъектКоличествоДокументовРеализацииНаИсполненииОперации=0;
	ОбъектКоличествоДокументовКорректировкиРеализацииНаИсполненииОперации=0;
	ОбъектДокументЗадолженностиНаИсполненииОперации=0;
	ОбъектКоличествоДокументовРеализацииВРаботе=0;
	ОбъектКоличествоДокументовКорректировкиРеализацииВРаботе=0;
	ОбъектДокументЗадолженностиВРаботе=0;
	ОбъектКоличествоДокументовРеализацииВОтказе=0;
	ОбъектКоличествоДокументовКорректировкиРеализацииВОтказе=0;
	ОбъектДокументЗадолженностиВОтказе=0;
	ОбъектКоличествоДокументовРеализацииВручную=0;
	ОбъектКоличествоДокументовКорректировкиРеализацииВручную=0;
	ОбъектКоличествоДокументовРеализацииВЗавершено=0;
	ОбъектКоличествоДокументовКорректировкиРеализацииВЗавершено=0;
	ОбъектДокументЗадолженностиВЗавершено=0;
	ОбъектКонтрагентыБезОшибок=0;
	ОбъектКонтрагентыСОшибками=0;
	ОбъектНоменклатурыБезОшибок=0;
	ОбъектНоменклатурыСОшибками=0;
	ОбъектКураторыБезОшибок=0;
	ОбъектКураторыСОшибками=0;
	ОбъектАналитикиБезОшибок=0;
	ОбъектАналитикиСОшибками=0;
	ОбъектВалютыБезОшибок=0;
	ОбъектВалютыСОшибками=0;
	ОбъектСтавкиНДСБезОшибок=0;
	ОбъектСтавкиНДССОшибками=0;
	ОбъектДетализацияБезОшибок=0;
	ОбъектДетализацияСОшибками=0;
	ОбъектДетализацияМГМНБезОшибок=0;
	ОбъектДетализацияМГМНСОшибками=0;
	ОбъектНоменклатурыВСогласовании=0;
	ОбъектНоменклатурыСогласованы=0;
	ОбъектАналитикиВСогласовании=0;
	ОбъектАналитикиСогласованы=0;
	Для каждого йСтр Из Объект.Документы Цикл
		// общее количество документов
		Если (йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов ИЛИ
			 	//йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Загружен ИЛИ
			 	йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Проведен) ИЛИ
			 (йСтр.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Отказать) Тогда
			Если ПустаяСтрока(йСтр.НомерКорректировкиРеализации) Тогда
				ОбъектДокументыРеализацииБезОшибок=ОбъектДокументыРеализацииБезОшибок+1;
			Иначе
				ОбъектДокументыКорректировкиРеализацииБезОшибок=ОбъектДокументыКорректировкиРеализацииБезОшибок+1;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(йСтр.НомерКорректировкиРеализации) Тогда
				ОбъектДокументыРеализацииСОшибками=ОбъектДокументыРеализацииСОшибками+1;
			Иначе
				ОбъектДокументыКорректировкиРеализацииСОшибками=ОбъектДокументыКорректировкиРеализацииСОшибками+1;
			КонецЕсли;
		КонецЕсли;
		// документов в стадии завершено
		Если НЕ ЗначениеЗаполнено(йСтр.ОперацияСДокументом) Тогда
			Если йСтр.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Отказать ИЛИ
				 ((йСтр.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение ИЛИ
				 йСтр.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Вручную) И
				 йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Проведен) Тогда
				Если ПустаяСтрока(йСтр.НомерКорректировкиРеализации) Тогда
					ОбъектКоличествоДокументовРеализацииВЗавершено=ОбъектКоличествоДокументовРеализацииВЗавершено+1;
				Иначе
					ОбъектКоличествоДокументовКорректировкиРеализацииВЗавершено=ОбъектКоличествоДокументовКорректировкиРеализацииВЗавершено+1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// документов на операции
		Если ЗначениеЗаполнено(йСтр.ОперацияСДокументом) Тогда
			Если ПустаяСтрока(йСтр.НомерКорректировкиРеализации) Тогда
				ОбъектКоличествоДокументовРеализацииНаИсполненииОперации=ОбъектКоличествоДокументовРеализацииНаИсполненииОперации+1;
			Иначе
				ОбъектКоличествоДокументовКорректировкиРеализацииНаИсполненииОперации=ОбъектКоличествоДокументовКорректировкиРеализацииНаИсполненииОперации+1;
			КонецЕсли;
		КонецЕсли;
		// документов в активности
		Если йСтр.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение Тогда
			Если ПустаяСтрока(йСтр.НомерКорректировкиРеализации) Тогда
				ОбъектКоличествоДокументовРеализацииВРаботе=ОбъектКоличествоДокументовРеализацииВРаботе+1;
			Иначе
				ОбъектКоличествоДокументовКорректировкиРеализацииВРаботе=ОбъектКоличествоДокументовКорректировкиРеализацииВРаботе+1;
			КонецЕсли;
		// документов вручную
		ИначеЕсли йСтр.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Вручную Тогда
			Если ПустаяСтрока(йСтр.НомерКорректировкиРеализации) Тогда
				ОбъектКоличествоДокументовРеализацииВручную=ОбъектКоличествоДокументовРеализацииВручную+1;
			Иначе
				ОбъектКоличествоДокументовКорректировкиРеализацииВручную=ОбъектКоличествоДокументовКорректировкиРеализацииВручную+1;
			КонецЕсли;
		Иначе
		// документов в отказе
			Если ПустаяСтрока(йСтр.НомерКорректировкиРеализации) Тогда
				ОбъектКоличествоДокументовРеализацииВОтказе=ОбъектКоличествоДокументовРеализацииВОтказе+1;
			Иначе
				ОбъектКоличествоДокументовКорректировкиРеализацииВОтказе=ОбъектКоличествоДокументовКорректировкиРеализацииВОтказе+1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// контрагенты-договоры
	Для каждого йСтр Из Объект.КонтрагентыДоговоры Цикл
		Если йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
			ОбъектКонтрагентыБезОшибок=ОбъектКонтрагентыБезОшибок+1;
		Иначе
			ОбъектКонтрагентыСОшибками=ОбъектКонтрагентыСОшибками+1;
		КонецЕсли;
	КонецЦикла;
	// услуги - номенклатуры
	Для каждого йСтр Из Объект.УслугиНоменклатуры Цикл
		Если йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
			ОбъектНоменклатурыБезОшибок=ОбъектНоменклатурыБезОшибок+1;
		Иначе
			Если йСтр.НаСогласовании Тогда
				ОбъектНоменклатурыВСогласовании=ОбъектНоменклатурыВСогласовании+1;
			ИначеЕсли йСтр.Согласовано Тогда
				ОбъектНоменклатурыСогласованы=ОбъектНоменклатурыСогласованы+1;
			Иначе
				ОбъектНоменклатурыСОшибками=ОбъектНоменклатурыСОшибками+1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// аналитики
	Для каждого йСтр Из Объект.Аналитики Цикл
		Если йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
			ОбъектАналитикиБезОшибок=ОбъектАналитикиБезОшибок+1;
		ИначеЕсли йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Отказ Тогда
		ИначеЕсли йСтр.НаСогласовании Тогда
			ОбъектАналитикиВСогласовании=ОбъектАналитикиВСогласовании+1;
		ИначеЕсли йСтр.Согласовано Тогда
			ОбъектАналитикиСогласованы=ОбъектАналитикиСогласованы+1;
		Иначе
			ОбъектАналитикиСОшибками=ОбъектАналитикиСОшибками+1;
		КонецЕсли;
	КонецЦикла;
	// кураторы
	Для каждого йСтр Из Объект.Кураторы Цикл
		Если йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
			ОбъектКураторыБезОшибок=ОбъектКураторыБезОшибок+1;
		Иначе
			ОбъектКураторыСОшибками=ОбъектКураторыСОшибками+1;
		КонецЕсли;
	КонецЦикла;
	// валюты
	Для каждого йСтр Из Объект.Валюты Цикл
		Если йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
			ОбъектВалютыБезОшибок=ОбъектВалютыБезОшибок+1;
		Иначе
			ОбъектВалютыСОшибками=ОбъектВалютыСОшибками+1;
		КонецЕсли;
	КонецЦикла;
	// ставки ндс
	Для каждого йСтр Из Объект.СтавкиНДС Цикл
		Если йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
			ОбъектСтавкиНДСБезОшибок=ОбъектСтавкиНДСБезОшибок+1;
		Иначе
			ОбъектСтавкиНДССОшибками=ОбъектСтавкиНДССОшибками+1;
		КонецЕсли;
	КонецЦикла;
	// детализация без учёта в отказе
	Для каждого йСтр Из Объект.Деталировка Цикл
		Если Объект.Документы[йСтр.ИндексДокумента-1].ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Отказать Тогда
		ИначеЕсли йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
			ОбъектДетализацияБезОшибок=ОбъектДетализацияБезОшибок+1;
		Иначе
			ОбъектДетализацияСОшибками=ОбъектДетализацияСОшибками+1;
		КонецЕсли;
	КонецЦикла;
	// блок Задолженности МГМН
	Если Объект.МестонахождениеБиллинга.БиллингМГМН И Объект.ЗадолженностьМГМН.Количество()>0 Тогда
		Элементы.ДокументЗадолженностиБезОшибки.Видимость=Истина;
		Элементы.ДокументЗадолженностиСОшибкой.Видимость=Истина;
		Элементы.ДокументЗадолженностиВЗавершено.Видимость=Истина;
		Элементы.ДокументЗадолженностиНаИсполненииОперации.Видимость=Истина;
		Элементы.ДокументЗадолженностиВРаботе.Видимость=Истина;
		Элементы.ДокументЗадолженностиВОтказе.Видимость=Истина;
		Элементы.ДетализацияМГМНБезОшибок.Видимость=Истина;
		Элементы.ДетализацияМГМНСОшибками.Видимость=Истина;
		Элементы.СтраницаЗадолженностьМГМН.Видимость=Истина;
		Если Объект.ТипЗагрузкиДокументаЗадолженностиМГМН = Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение Тогда
			ФлагГотовностиДокумента = Истина;
			Для каждого йСтр Из Объект.ЗадолженностьМГМН Цикл
				Если йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
					ОбъектДетализацияМГМНБезОшибок = ОбъектДетализацияМГМНБезОшибок+1;
				Иначе
					ОбъектДетализацияМГМНСОшибками = ОбъектДетализацияМГМНСОшибками+1;
					ФлагГотовностиДокумента = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если ФлагГотовностиДокумента Тогда
				ОбъектДокументЗадолженностиБезОшибки=1;
			Иначе
				ОбъектДокументЗадолженностиСОшибкой=1;
			КонецЕсли;
			ОбъектДокументЗадолженностиВРаботе=1;
			Если ЗначениеЗаполнено(Объект.ОперацияСДокументомЗадолженностиМГМН) Тогда
				ОбъектДокументЗадолженностиНаИсполненииОперации=1;
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ДокументЗадолженностьМГМН) Тогда
				ОбъектДокументЗадолженностиВЗавершено=1;
			КонецЕсли;
		Иначе
			ОбъектДокументЗадолженностиВОтказе=1;
		КонецЕсли;
		Если Объект.ДокументЗадолженностиБезОшибки<>ОбъектДокументЗадолженностиБезОшибки Тогда
			Объект.ДокументЗадолженностиБезОшибки=ОбъектДокументЗадолженностиБезОшибки;
			Модифицированность=Истина;
		КонецЕсли;
		Если Объект.ДокументЗадолженностиСОшибкой<>ОбъектДокументЗадолженностиСОшибкой Тогда
			Объект.ДокументЗадолженностиСОшибкой=ОбъектДокументЗадолженностиСОшибкой;
			Модифицированность=Истина;
		КонецЕсли;
		Если Объект.ДокументЗадолженностиВЗавершено<>ОбъектДокументЗадолженностиВЗавершено Тогда
			Объект.ДокументЗадолженностиВЗавершено=ОбъектДокументЗадолженностиВЗавершено;
			Модифицированность=Истина;
		КонецЕсли;
		Если Объект.ДокументЗадолженностиНаИсполненииОперации<>ОбъектДокументЗадолженностиНаИсполненииОперации Тогда
			Объект.ДокументЗадолженностиНаИсполненииОперации=ОбъектДокументЗадолженностиНаИсполненииОперации;
			Модифицированность=Истина;
		КонецЕсли;
		Если Объект.ДокументЗадолженностиВРаботе<>ОбъектДокументЗадолженностиВРаботе Тогда
			Объект.ДокументЗадолженностиВРаботе=ОбъектДокументЗадолженностиВРаботе;
			Модифицированность=Истина;
		КонецЕсли;
		Если Объект.ДокументЗадолженностиВОтказе<>ОбъектДокументЗадолженностиВОтказе Тогда
			Объект.ДокументЗадолженностиВОтказе=ОбъектДокументЗадолженностиВОтказе;
			Модифицированность=Истина;
		КонецЕсли;
		Если Объект.ДетализацияМГМНБезОшибок<>ОбъектДетализацияМГМНБезОшибок Тогда
			Объект.ДетализацияМГМНБезОшибок=ОбъектДетализацияМГМНБезОшибок;
			Модифицированность=Истина;
		КонецЕсли;
		Если Объект.ДетализацияМГМНСОшибками<>ОбъектДетализацияМГМНСОшибками Тогда
			Объект.ДетализацияМГМНСОшибками=ОбъектДетализацияМГМНСОшибками;
			Модифицированность=Истина;
		КонецЕсли;
	Иначе
		Элементы.ДокументЗадолженностиБезОшибки.Видимость=Ложь;
		Элементы.ДокументЗадолженностиСОшибкой.Видимость=Ложь;
		Элементы.ДокументЗадолженностиВЗавершено.Видимость=Ложь;
		Элементы.ДокументЗадолженностиНаИсполненииОперации.Видимость=Ложь;
		Элементы.ДокументЗадолженностиВРаботе.Видимость=Ложь;
		Элементы.ДокументЗадолженностиВОтказе.Видимость=Ложь;
		Элементы.ДетализацияМГМНБезОшибок.Видимость=Ложь;
		Элементы.ДетализацияМГМНСОшибками.Видимость=Ложь;
		Элементы.СтраницаЗадолженностьМГМН.Видимость=Ложь;
	КонецЕсли;
	Если Объект.ДокументыРеализацииБезОшибок<>ОбъектДокументыРеализацииБезОшибок Тогда
		Объект.ДокументыРеализацииБезОшибок=ОбъектДокументыРеализацииБезОшибок;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.ДокументыРеализацииСОшибками<>ОбъектДокументыРеализацииСОшибками Тогда
		Объект.ДокументыРеализацииСОшибками=ОбъектДокументыРеализацииСОшибками;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.ДокументыКорректировкиРеализацииБезОшибок<>ОбъектДокументыКорректировкиРеализацииБезОшибок Тогда
		Объект.ДокументыКорректировкиРеализацииБезОшибок=ОбъектДокументыКорректировкиРеализацииБезОшибок;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.ДокументыКорректировкиРеализацииСОшибками<>ОбъектДокументыКорректировкиРеализацииСОшибками Тогда
		Объект.ДокументыКорректировкиРеализацииСОшибками=ОбъектДокументыКорректировкиРеализацииСОшибками;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КоличествоДокументовРеализацииНаИсполненииОперации<>ОбъектКоличествоДокументовРеализацииНаИсполненииОперации Тогда
		Объект.КоличествоДокументовРеализацииНаИсполненииОперации=ОбъектКоличествоДокументовРеализацииНаИсполненииОперации;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КоличествоДокументовКорректировкиРеализацииНаИсполненииОперации<>ОбъектКоличествоДокументовКорректировкиРеализацииНаИсполненииОперации Тогда
		Объект.КоличествоДокументовКорректировкиРеализацииНаИсполненииОперации=ОбъектКоличествоДокументовКорректировкиРеализацииНаИсполненииОперации;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КоличествоДокументовРеализацииВРаботе<>ОбъектКоличествоДокументовРеализацииВРаботе Тогда
		Объект.КоличествоДокументовРеализацииВРаботе=ОбъектКоличествоДокументовРеализацииВРаботе;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КоличествоДокументовКорректировкиРеализацииВРаботе<>ОбъектКоличествоДокументовКорректировкиРеализацииВРаботе Тогда
		Объект.КоличествоДокументовКорректировкиРеализацииВРаботе=ОбъектКоличествоДокументовКорректировкиРеализацииВРаботе;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КоличествоДокументовРеализацииВОтказе<>ОбъектКоличествоДокументовРеализацииВОтказе Тогда
		Объект.КоличествоДокументовРеализацииВОтказе=ОбъектКоличествоДокументовРеализацииВОтказе;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КоличествоДокументовКорректировкиРеализацииВОтказе<>ОбъектКоличествоДокументовКорректировкиРеализацииВОтказе Тогда
		Объект.КоличествоДокументовКорректировкиРеализацииВОтказе=ОбъектКоличествоДокументовКорректировкиРеализацииВОтказе;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КоличествоДокументовРеализацииВручную<>ОбъектКоличествоДокументовРеализацииВручную Тогда
		Объект.КоличествоДокументовРеализацииВручную=ОбъектКоличествоДокументовРеализацииВручную;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КоличествоДокументовКорректировкиРеализацииВручную<>ОбъектКоличествоДокументовКорректировкиРеализацииВручную Тогда
		Объект.КоличествоДокументовКорректировкиРеализацииВручную=ОбъектКоличествоДокументовКорректировкиРеализацииВручную;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КоличествоДокументовРеализацииВЗавершено<>ОбъектКоличествоДокументовРеализацииВЗавершено Тогда
		Объект.КоличествоДокументовРеализацииВЗавершено=ОбъектКоличествоДокументовРеализацииВЗавершено;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КоличествоДокументовКорректировкиРеализацииВЗавершено<>ОбъектКоличествоДокументовКорректировкиРеализацииВЗавершено Тогда
		Объект.КоличествоДокументовКорректировкиРеализацииВЗавершено=ОбъектКоличествоДокументовКорректировкиРеализацииВЗавершено;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КонтрагентыБезОшибок<>ОбъектКонтрагентыБезОшибок Тогда
		Объект.КонтрагентыБезОшибок=ОбъектКонтрагентыБезОшибок;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КонтрагентыСОшибками<>ОбъектКонтрагентыСОшибками Тогда
		Объект.КонтрагентыСОшибками=ОбъектКонтрагентыСОшибками;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.НоменклатурыБезОшибок<>ОбъектНоменклатурыБезОшибок Тогда
		Объект.НоменклатурыБезОшибок=ОбъектНоменклатурыБезОшибок;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.НоменклатурыСОшибками<>ОбъектНоменклатурыСОшибками Тогда
		Объект.НоменклатурыСОшибками=ОбъектНоменклатурыСОшибками;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.НоменклатурыВСогласовании<>ОбъектНоменклатурыВСогласовании Тогда
		Объект.НоменклатурыВСогласовании=ОбъектНоменклатурыВСогласовании;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.НоменклатурыСогласованы<>ОбъектНоменклатурыСогласованы Тогда
		Объект.НоменклатурыСогласованы=ОбъектНоменклатурыСогласованы;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КураторыБезОшибок<>ОбъектКураторыБезОшибок Тогда
		Объект.КураторыБезОшибок=ОбъектКураторыБезОшибок;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.КураторыСОшибками<>ОбъектКураторыСОшибками Тогда
		Объект.КураторыСОшибками=ОбъектКураторыСОшибками;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.АналитикиБезОшибок<>ОбъектАналитикиБезОшибок Тогда
		Объект.АналитикиБезОшибок=ОбъектАналитикиБезОшибок;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.АналитикиСОшибками<>ОбъектАналитикиСОшибками Тогда
		Объект.АналитикиСОшибками=ОбъектАналитикиСОшибками;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.АналитикиВСогласовании<>ОбъектАналитикиВСогласовании Тогда
		Объект.АналитикиВСогласовании=ОбъектАналитикиВСогласовании;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.АналитикиСогласованы<>ОбъектАналитикиСогласованы Тогда
		Объект.АналитикиСогласованы=ОбъектАналитикиСогласованы;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.ВалютыБезОшибок<>ОбъектВалютыБезОшибок Тогда
		Объект.ВалютыБезОшибок=ОбъектВалютыБезОшибок;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.ВалютыСОшибками<>ОбъектВалютыСОшибками Тогда
		Объект.ВалютыСОшибками=ОбъектВалютыСОшибками;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.СтавкиНДСБезОшибок<>ОбъектСтавкиНДСБезОшибок Тогда
		Объект.СтавкиНДСБезОшибок=ОбъектСтавкиНДСБезОшибок;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.СтавкиНДССОшибками<>ОбъектСтавкиНДССОшибками Тогда
		Объект.СтавкиНДССОшибками=ОбъектСтавкиНДССОшибками;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.ДетализацияБезОшибок<>ОбъектДетализацияБезОшибок Тогда
		Объект.ДетализацияБезОшибок=ОбъектДетализацияБезОшибок;
		Модифицированность=Истина;
	КонецЕсли;
	Если Объект.ДетализацияСОшибками<>ОбъектДетализацияСОшибками Тогда
		Объект.ДетализацияСОшибками=ОбъектДетализацияСОшибками;
		Модифицированность=Истина;
	КонецЕсли;
	ОтображениеМодифицированности();
КонецПроцедуры

&НаКлиенте
Функция НормализацияИмени(стр)
	стр0=""+Врег(стр);
	СтрИсточник="№#|OCT(){},;:K""MBPH'/\-";
	СтрПриемник="   ОСТ       К МВРН    ";
	стр00="";
	Для й=1 По СтрДлина(стр0) Цикл
		йС=Сред(стр0,й,1);
		йй=Найти(СтрИсточник,йС);
		Если йй>0 Тогда
			йС=Сред(СтрПриемник,йй,1);
		КонецЕсли;
		Если йС=" " Тогда
			Продолжить;
		КонецЕсли;
		стр00=стр00+йС;
	КонецЦикла;
	Возврат стр00;
КонецФункции

&НаКлиенте
Функция НормализацияУслуги(стр)
	стр0=""+Врег(стр);
	СтрИсточник="№#|OCT(){},;:K""MBPH'/\-+[]A.<>@&?=%!";
	СтрПриемник="   ОСТ       К МВРН       А         ";
	стр00="";
	Для й=1 По СтрДлина(стр0) Цикл
		йС=Сред(стр0,й,1);
		йй=Найти(СтрИсточник,йС);
		Если йй>0 Тогда
			йС=Сред(СтрПриемник,йй,1);
		КонецЕсли;
		Если йС=" " Тогда
			Продолжить;
		КонецЕсли;
		стр00=стр00+йС;
	КонецЦикла;
	Возврат стр00;
КонецФункции

&НаКлиенте
Процедура ОбновлениеСтатусаОбъектаЗагрузки(СтДоговоры=-1,СтУслуги=-1,СтАналитики=-1,СтКураторы=-1,СтВалюты=-1,СтСтавкиНДС=-1,СтДеталировки=-1,СтДокумента=-1,СтЗадолженности=-1,ФлагГотовностьЗадолженности=NULL)
	// Контрагент - Договор
	Если СтДоговоры>-1 И СтДоговоры<Объект.КонтрагентыДоговоры.Количество() Тогда
		йСтр=Объект.КонтрагентыДоговоры[СтДоговоры];
		Если ЗначениеЗаполнено(йСтр.Контрагент) Тогда
			Если йСтр.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Активный ИЛИ
				йСтр.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов Тогда
				Если ЗначениеЗаполнено(йСтр.Договор) Тогда
					Если йСтр.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Исполнение Тогда
						йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов;
						йСтр.СтатусОшибка=Ложь;
						йСтр.Комментарий="";
					ИначеЕсли йСтр.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Закрыт ИЛИ
							  йСтр.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Закрытие Тогда
						йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
						йСтр.СтатусОшибка=Истина;
						йСтр.Комментарий="Договор ["+СокрЛП(йСтр.НомерДоговора)+"] нужно создать новый вместо закрытого";
					Иначе
						йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НаСогласовании;
						йСтр.СтатусОшибка=Истина;
						йСтр.Комментарий="Договор ["+СокрЛП(йСтр.НомерДоговора)+"] на согласовании";
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(йСтр.ДоговорСтарый) Тогда
						йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
						йСтр.СтатусОшибка=Истина;
						йСтр.Комментарий="Договор ["+СокрЛП(йСтр.НомерДоговора)+"] не найден, но есть похожий с таким номером";
					Иначе
						йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
						йСтр.СтатусОшибка=Истина;
						йСтр.Комментарий="Договор ["+СокрЛП(йСтр.НомерДоговора)+"] не найден, нужно создать новый";
					КонецЕсли;
				КонецЕсли;
			Иначе
				йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НаСогласовании;
				йСтр.СтатусОшибка=Истина;
				йСтр.Комментарий="Контрагент ["+СокрЛП(йСтр.КодКонтрагента)+"] на согласовании";
			КонецЕсли;
		Иначе
			йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками;
			йСтр.СтатусОшибка=Истина;
			йСтр.Комментарий="Контрагент ["+СокрЛП(йСтр.КодКонтрагента)+"] в ЕИСУП отсутствует";
		КонецЕсли;
	КонецЕсли;
	// Услуги - Номенклатуры
	Если СтУслуги>-1 И СтУслуги<Объект.УслугиНоменклатуры.Количество() Тогда
		йСтр=Объект.УслугиНоменклатуры[СтУслуги];
		Если ЗначениеЗаполнено(йСтр.Номенклатура) ИЛИ йСтр.ЕстьКатегорияУслуги Тогда
			йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов;
			йСтр.СтатусОшибка=Ложь;
			йСтр.Комментарий="";
		Иначе
			йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			йСтр.СтатусОшибка=Истина;
			йСтр.Комментарий="Услуге ["+СокрЛП(йСтр.УслугаИзБиллинга)+"]["+СокрЛП(йСтр.КодУслуги)+"] не сопоставлена номенклатура";
		КонецЕсли;
	КонецЕсли;
	// Аналитики
	Если СтАналитики>-1 И СтАналитики<Объект.Аналитики.Количество() Тогда
		йСтр=Объект.Аналитики[СтАналитики];
		Если ЗначениеЗаполнено(йСтр.Номенклатура) Тогда
			йКомм="";
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов;
			Если НЕ ЗначениеЗаполнено(йСтр.НоменклатурнаяГруппа) Тогда
				йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
				йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле Номен.группа не заполнено";
			КонецЕсли;
			йСтр.СтатусОшибка=НЕ (йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов);
			йСтр.Статус=йСтатус;
			йСтр.Комментарий=йКомм;
		Иначе
			йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Отказ;
			йСтр.СтатусОшибка=Истина;
			йСтр.Комментарий="Без заполненной номенклатуры соответствие неработает";
		КонецЕсли;
	КонецЕсли;
	// Кураторы
	Если СтКураторы>-1 И СтКураторы<Объект.Кураторы.Количество() Тогда
		йСтр=Объект.Кураторы[СтКураторы];
		Если ЗначениеЗаполнено(йСтр.Куратор) Тогда
			йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов;
			йСтр.Комментарий="";
			йСтр.СтатусОшибка=Ложь;
		Иначе
			йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			йСтр.Комментарий="Требуется нового куратора ["+СокрЛП(йСтр.НаименованиеКуратор)+"] создать";
			йСтр.СтатусОшибка=Истина;
		КонецЕсли;
	КонецЕсли;
	// Валюты
	Если СтВалюты>-1 И СтВалюты<Объект.Валюты.Количество() Тогда
		йСтр=Объект.Валюты[СтВалюты];
		Если ЗначениеЗаполнено(йСтр.Валюта) Тогда
			йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов;
			йСтр.Комментарий="";
		Иначе
			йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками;
			йСтр.Комментарий="В классификаторе валют валюта ["+СокрЛП(йСтр.КодВалюты)+"] не найдена, ошибка биллинга";
		КонецЕсли;
	КонецЕсли;
	// СтавкиНДС
	Если СтСтавкиНДС>-1 И СтСтавкиНДС<Объект.СтавкиНДС.Количество() Тогда
		йСтр=Объект.СтавкиНДС[СтСтавкиНДС];
		Если ЗначениеЗаполнено(йСтр.СтавкаНДС) Тогда
			йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов;
			йСтр.Комментарий="";
		Иначе
			йСтр.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками;
			Если ЗначениеЗаполнено(йСтр.Валюта) Тогда
				йСтр.Комментарий="Ставка НДС из биллинга ["+СокрЛП(йСтр.СтрокаСтавкиНДС)+"] не верна, ошибка биллинга";
			Иначе
				йСтр.Комментарий="Ставка НДС из биллинга ["+СокрЛП(йСтр.СтрокаСтавкиНДС)+"] не найдена из-за неопределённой валюты";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Деталировка
	Если СтДеталировки>-1 И СтДеталировки<Объект.Деталировка.Количество() Тогда
		йСтр=Объект.Деталировка[СтДеталировки];
		йКомм="";
		йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов;
		Если НЕ ЗначениеЗаполнено(йСтр.Номенклатура) Тогда
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			йКомм="поле Номенклатура не заполнено";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.СтавкаНДС) Тогда
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле СтавкаНДС не заполнено";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.ЦФО) Тогда
			Если йСтатус<>Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками Тогда
				йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			КонецЕсли;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле ЦФО не заполнено";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.ЦФУ) Тогда
			Если йСтатус<>Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками Тогда
				йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			КонецЕсли;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле ЦФУ не заполнено";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.НоменклатурнаяГруппа) Тогда
			Если йСтатус<>Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками Тогда
				йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			КонецЕсли;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле Номен.группа не заполнено";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.БюджетнаяСтатья) Тогда
			Если йСтатус<>Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками Тогда
				йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			КонецЕсли;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле Бюдж.статья не заполнено";
		КонецЕсли;
		йСтр.СтатусОшибкаАналитики=Истина;
		Если ЗначениеЗаполнено(йСтр.ЦФО) И ЗначениеЗаполнено(йСтр.ЦФУ) Тогда
			йЦФО=СокрЛП(йСтр.ЦФО.Код);
			йЦФУ=СокрЛП(йСтр.ЦФУ.Код);
			Если Объект.Дата > Дата("20180120") Тогда
				Если йЦФУ = "РС0401" ИЛИ (йЦФУ = "РС0403" И йЦФО = "ЦФО1348") ИЛИ
					йЦФУ = "РС0402" ИЛИ йЦФУ = "РС0404" Тогда
					йСтр.СтатусОшибкаАналитики=Ложь;
				ИначеЕсли йЦФО = "ЦФО1349" И (йЦФУ = "РС0303" ИЛИ
					йЦФУ = "РС0304" ИЛИ
					йЦФУ = "РС0303" ИЛИ
					йЦФУ = "РС0304" ИЛИ
					йЦФУ = "РС0203" ИЛИ
					йЦФУ = "РС0302") Тогда
					йСтр.СтатусОшибкаАналитики=Ложь;
				ИначеЕсли йЦФО = "ЦФО1353" И (йЦФУ = "РС0101" ИЛИ йЦФУ = "РС0204") Тогда
					йСтр.СтатусОшибкаАналитики=Ложь;
				КонецЕсли;

			иначе	
				Если йЦФУ = "Сегмент1" ИЛИ (йЦФУ = "Сегмент2" И йЦФО = "ЦФО1348") ИЛИ
					йЦФУ = "Сегмент3" ИЛИ йЦФУ = "Сегмент10" Тогда
					йСтр.СтатусОшибкаАналитики=Ложь;
				ИначеЕсли йЦФО = "ЦФО1349" И (йЦФУ = "Сегмент4" ИЛИ
					йЦФУ = "Сегмент5" ИЛИ
					йЦФУ = "Сегмент11" ИЛИ
					йЦФУ = "Сегмент12" ИЛИ
					йЦФУ = "Сегмент6" ИЛИ
					йЦФУ = "Сегмент7") Тогда
					йСтр.СтатусОшибкаАналитики=Ложь;
				ИначеЕсли йЦФО = "ЦФО1353" И (йЦФУ = "Сегмент8" ИЛИ йЦФУ = "Сегмент9") Тогда
					йСтр.СтатусОшибкаАналитики=Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если йСтр.СтатусОшибкаАналитики Тогда
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поля ЦФО и ЦФУ не соответствуют друг другу";
		КонецЕсли;
		йСтр.СтатусОшибка=НЕ (йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов);
		йСтр.Статус=йСтатус;
		йСтр.Комментарий=йКомм;
	КонецЕсли;
	// Документы
	Если СтДокумента>-1 И СтДокумента<Объект.Документы.Количество() Тогда
		йСтр=Объект.Документы[СтДокумента];
		йКомм="";
		йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов;
		Если НЕ ЗначениеЗаполнено(йСтр.Контрагент) Тогда
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			йКомм="поле Контрагент не заполнено";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.Договор) Тогда
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле Договор не заполнено";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.Куратор) Тогда
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле Куратор не заполнено";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.Валюта) Тогда
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле Валюта не заполнено";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.БанковскийСчет) Тогда
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле Банковский счёт не заполнено";
		КонецЕсли;
		Если Год(йСтр.ДатаДокумента)*100+Месяц(йСтр.ДатаДокумента)>Объект.MONT_F Тогда //Если Год(йСтр.ДатаДокумента)*100+Месяц(йСтр.ДатаДокумента)<>Объект.MONT_F Тогда
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+" дата документа за пределами месяца учёта";
		КонецЕсли;
		Отбор=Новый Структура("ИндексДокумента",йСтр.НомерСтроки);
		йСтроки=Объект.Деталировка.НайтиСтроки(Отбор);
		Если йСтроки.Количество()>0 Тогда
			ФлагОшибок=Ложь;
			Для каждого йСтрока Из йСтроки Цикл
				Если йСтрока.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
					Продолжить;
				КонецЕсли;
				ФлагОшибок=Истина;
				Прервать;
			КонецЦикла;
			Если ФлагОшибок Тогда
				йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
				йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"в табличной части документа есть проблемы";
			КонецЕсли;
		Иначе
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"табличная часть документа отсутствует";
		КонецЕсли;
		// проверка на документы в ЕИСУПе
		ФлагЗагружен=0;
		ФлагПроведен=0;
		Если ПустаяСтрока(йСтр.НомерКорректировкиРеализации) Тогда
			// реализация
			МаксимумПроведен=3;
			Если ЗначениеЗаполнено(йСтр.СчетНаОплату) Тогда
				ФлагЗагружен=ФлагЗагружен+1;
				Если йСтр.СчетНаОплату.ПометкаУдаления Тогда
					йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Отказ;
					йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"счет на оплату помечен на удаление";
				Иначе
					ФлагПроведен=ФлагПроведен+1;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(йСтр.Реализация) Тогда
				ФлагЗагружен=ФлагЗагружен+1;
				Если йСтр.Реализация.ПометкаУдаления Тогда
					йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Отказ;
					йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"реализация помечена на удаление";
				ИначеЕсли йСтр.Реализация.абс_Статус=Перечисления.абс_СтатусыПервичныхДокументов.Отказ ИЛИ
					 йСтр.Реализация.абс_Статус=Перечисления.абс_СтатусыПервичныхДокументов.Отмена Тогда
					йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Отказ;
					йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"реализация в статусе Отказ";
				ИначеЕсли Год(йСтр.Реализация.Дата)*100+Месяц(йСтр.Реализация.Дата)<>Объект.MONT_F Тогда
					йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками;
					йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+" дата реализации за пределами месяца учёта";
				ИначеЕсли йСтр.Реализация.абс_Статус=Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
					ФлагПроведен=ФлагПроведен+1;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// корректировка
			МаксимумПроведен=2;
			Если ЗначениеЗаполнено(йСтр.ДокументОснование) Тогда
				Если йСтр.ДокументОснование.ПометкаУдаления Тогда
					йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Отказ;
					йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"документ-основание помечен на удаление";
				ИначеЕсли (ТипЗнч(йСтр.ДокументОснование)=Тип("ДокументСсылка.РеализацияТоваровУслуг") И 
					(йСтр.ДокументОснование.абс_Статус=Перечисления.абс_СтатусыПервичныхДокументов.Отказ ИЛИ
					 йСтр.ДокументОснование.абс_Статус=Перечисления.абс_СтатусыПервичныхДокументов.Отмена)) ИЛИ
					 	  (ТипЗнч(йСтр.ДокументОснование)=Тип("ДокументСсылка.КорректировкаРеализации") И  
					(йСтр.ДокументОснование.абс_СтатусДокумента=Перечисления.абс_СтатусыПервичныхДокументов.Отказ ИЛИ
					 йСтр.ДокументОснование.абс_СтатусДокумента=Перечисления.абс_СтатусыПервичныхДокументов.Отмена)) Тогда
					йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Отказ;
					йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"документ-основание в статусе Отказ";
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(йСтр.ОрганизацияМиграции) Тогда
				Если ЗначениеЗаполнено(йСтр.ДокументМиграции) Тогда
					Если йСтр.ДокументМиграции.ПометкаУдаления Тогда
						йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Отказ;
						йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"документ миграции помечен на удаление";
					КонецЕсли;
				Иначе
					йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками;
					йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"документ миграции не определился";
				КонецЕсли;
			Иначе
				йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками;
				йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"документ-основание не определился";
			КонецЕсли;
			Если ЗначениеЗаполнено(йСтр.КорректировкаРеализации) Тогда
				ФлагЗагружен=ФлагЗагружен+1;
				Если йСтр.КорректировкаРеализации.ПометкаУдаления Тогда
					йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Отказ;
					йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"корректировка реализации помечена на удаление";
				ИначеЕсли йСтр.КорректировкаРеализации.абс_СтатусДокумента=Перечисления.абс_СтатусыПервичныхДокументов.Отказ ИЛИ
					 йСтр.КорректировкаРеализации.абс_СтатусДокумента=Перечисления.абс_СтатусыПервичныхДокументов.Отмена Тогда
					йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Отказ;
					йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"корректировка реализации в статусе Отказ";
				ИначеЕсли Год(йСтр.КорректировкаРеализации.Дата)*100+Месяц(йСтр.КорректировкаРеализации.Дата)<>Объект.MONT_F Тогда
					йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками;
					йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+" дата корректировки реализации за пределами месяца учёта";
				ИначеЕсли йСтр.КорректировкаРеализации.абс_СтатусДокумента=Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
					ФлагПроведен=ФлагПроведен+1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если йСтр.СчетФактураНеТребуется Тогда
			МаксимумПроведен=МаксимумПроведен-1;
		ИначеЕсли ЗначениеЗаполнено(йСтр.СчетФактура) Тогда
			ФлагЗагружен=ФлагЗагружен+1;
			Если йСтр.СчетФактура.ПометкаУдаления Тогда
				йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Отказ;
				йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"СчетФактура помечен на удаление";
			ИначеЕсли НЕ йСтр.СчетФактура.Проведен Тогда
				йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"СчетФактура не проведён";
			ИначеЕсли Год(йСтр.СчетФактура.Дата)*100+Месяц(йСтр.СчетФактура.Дата)<>Объект.MONT_F Тогда
				йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.СОшибками;
				йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+" дата счёта-фактуры за пределами месяца учёта";
			Иначе
				ФлагПроведен=ФлагПроведен+1;
			КонецЕсли;
		КонецЕсли;
		Если йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
			Если ФлагЗагружен=МаксимумПроведен И ФлагПроведен=МаксимумПроведен Тогда
				йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Проведен;
			ИначеЕсли ФлагЗагружен>0 Тогда
				йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Загружен;
			КонецЕсли;
		КонецЕсли;
		йСтр.СтатусОшибка=НЕ (йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов ИЛИ
							 // йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Загружен ИЛИ
							  йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.ЗаСтопорен ИЛИ
							  йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Проведен);
		йСтр.Статус=йСтатус;
		Если йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Загружен И
			 йСтр.ОперацияСДокументом=Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение Тогда
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+" Документы пакета не допроведены, требуется ещё раз эту строку отправить на операцию Проведение";
		КонецЕсли;
		йСтр.Комментарий=йКомм;
	КонецЕсли;
	// Задолженность МГМН
	Если СтЗадолженности>-1 И СтЗадолженности<Объект.ЗадолженностьМГМН.Количество() Тогда
		йСтр=Объект.ЗадолженностьМГМН[СтЗадолженности];
		йКомм="";
		йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов;
		Если НЕ ЗначениеЗаполнено(йСтр.Контрагент) Тогда
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			йКомм="поле Контрагент не заполнено";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.Договор) Тогда
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле Договор не заполнено";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.Оператор) Тогда
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле Оператор не заполнено";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йСтр.АгентскийДоговор) Тогда
			йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
			йКомм=йКомм+?(ПустаяСтрока(йКомм),"","; ")+"поле АгентскийДоговор не заполнено";
		КонецЕсли;
		йСтр.СтатусОшибка=(йСтатус=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен);
		йСтр.Статус=йСтатус;
		йСтр.Комментарий=йКомм;
	КонецЕсли;
	Если ФлагГотовностьЗадолженности <> NULL Тогда
		Если ФлагГотовностьЗадолженности Тогда
			Если ЗначениеЗаполнено(Объект.ДокументЗадолженностьМГМН) Тогда
				Если Объект.ДокументЗадолженностьМГМН.ПометкаУдаления Тогда
					Объект.СтатусДокументаЗадолженностиМГМН=Перечисления.ttk_СтатусыЭлементовЗагрузки.Отказ;
				ИначеЕсли Объект.ДокументЗадолженностьМГМН.Проведен Тогда
					Объект.СтатусДокументаЗадолженностиМГМН=Перечисления.ttk_СтатусыЭлементовЗагрузки.Проведен;
				Иначе
					Объект.СтатусДокументаЗадолженностиМГМН=Перечисления.ttk_СтатусыЭлементовЗагрузки.Загружен;
				КонецЕсли;
			Иначе
				Объект.СтатусДокументаЗадолженностиМГМН=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов;
			КонецЕсли;
		Иначе
			Объект.СтатусДокументаЗадолженностиМГМН=Перечисления.ttk_СтатусыЭлементовЗагрузки.НеЗаполнен;
		КонецЕсли;
		ОбновитьШапкуТаблицыДокументаЗадолженностиМГМН();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШапкуТаблицыДокументаЗадолженностиМГМН()
	Если ЗначениеЗаполнено(Объект.ДокументЗадолженностьМГМН) Тогда
		Если ЗначениеЗаполнено(Объект.ОперацияСДокументомЗадолженностиМГМН) Тогда
			Элементы.КнопкаОперацииСДокументомЗадолженностиМГМН.Видимость=Ложь;
			Элементы.КнопкаОперацииСДокументомЗадолженностиМГМН.Заголовок="";
		Иначе
			Элементы.КнопкаОперацииСДокументомЗадолженностиМГМН.Видимость=Истина;
			Элементы.КнопкаОперацииСДокументомЗадолженностиМГМН.Заголовок="Отправить в очередь на операцию удаления из ЕИСУП";
		КонецЕсли;
		Элементы.КнопкаИзменениеТипаЗагрузкиДокументаЗадолженности.Видимость=Ложь;
		Элементы.КнопкаИзменениеТипаЗагрузкиДокументаЗадолженности.Заголовок="";
	Иначе
		Если Объект.ТипЗагрузкиДокументаЗадолженностиМГМН = Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение Тогда
			Если Объект.СтатусДокументаЗадолженностиМГМН=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов И 
				 НЕ ЗначениеЗаполнено(Объект.ОперацияСДокументомЗадолженностиМГМН) Тогда
				Элементы.КнопкаОперацииСДокументомЗадолженностиМГМН.Видимость=Истина;
				Элементы.КнопкаОперацииСДокументомЗадолженностиМГМН.Заголовок="Отправить в очередь на операцию создания и проведения";
			Иначе
				Элементы.КнопкаОперацииСДокументомЗадолженностиМГМН.Видимость=Ложь;
				Элементы.КнопкаОперацииСДокументомЗадолженностиМГМН.Заголовок="";
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ОперацияСДокументомЗадолженностиМГМН) Тогда
				Элементы.КнопкаИзменениеТипаЗагрузкиДокументаЗадолженности.Видимость=Ложь;
				Элементы.КнопкаИзменениеТипаЗагрузкиДокументаЗадолженности.Заголовок="";
			Иначе
				Элементы.КнопкаИзменениеТипаЗагрузкиДокументаЗадолженности.Видимость=Истина;
				Элементы.КнопкаИзменениеТипаЗагрузкиДокументаЗадолженности.Заголовок="Отказать в загрузке";
			КонецЕсли;
		Иначе
			Элементы.КнопкаОперацииСДокументомЗадолженностиМГМН.Видимость=Ложь;
			Элементы.КнопкаОперацииСДокументомЗадолженностиМГМН.Заголовок="";
			Если ЗначениеЗаполнено(Объект.ОперацияСДокументомЗадолженностиМГМН) Тогда
				Элементы.КнопкаИзменениеТипаЗагрузкиДокументаЗадолженности.Видимость=Ложь;
				Элементы.КнопкаИзменениеТипаЗагрузкиДокументаЗадолженности.Заголовок="";
			Иначе
				Элементы.КнопкаИзменениеТипаЗагрузкиДокументаЗадолженности.Видимость=Истина;
				Элементы.КнопкаИзменениеТипаЗагрузкиДокументаЗадолженности.Заголовок="Разрешить загрузку";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОперацияСДокументомЗадолженностиМГМН) Тогда
		Элементы.КнопкаПроверкиСтатусаОперацииСДокументомЗадолженности.Видимость=Истина;
		Элементы.КнопкаПроверкиСтатусаОперацииСДокументомЗадолженности.Заголовок="Проверить статус очереди";
	Иначе
		Элементы.КнопкаПроверкиСтатусаОперацииСДокументомЗадолженности.Видимость=Ложь;
		Элементы.КнопкаПроверкиСтатусаОперацииСДокументомЗадолженности.Заголовок="";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеСтатусовОбъектовЗагрузки()
	// Контрагенты - Договоры
	Для йИнд=0 По Объект.КонтрагентыДоговоры.Количество()-1 Цикл
		ОбновлениеСтатусаОбъектаЗагрузки(йИнд,,,,,,,);
	КонецЦикла;
	// Услуги - Номенклатуры
	Для йИнд=0 По Объект.УслугиНоменклатуры.Количество()-1 Цикл
		ОбновлениеСтатусаОбъектаЗагрузки(,йИнд,,,,,,);
	КонецЦикла;
	// Аналитики
	Для йИнд=0 По Объект.Аналитики.Количество()-1 Цикл
		ОбновлениеСтатусаОбъектаЗагрузки(,,йИнд,,,,,);
	КонецЦикла;
	// Кураторы
	Для йИнд=0 По Объект.Кураторы.Количество()-1 Цикл
		ОбновлениеСтатусаОбъектаЗагрузки(,,,йИнд,,,,);
	КонецЦикла;
	// Валюты
	Для йИнд=0 По Объект.Валюты.Количество()-1 Цикл
		ОбновлениеСтатусаОбъектаЗагрузки(,,,,йИнд,,,);
	КонецЦикла;
	// СтавкиНДС
	Для йИнд=0 По Объект.СтавкиНДС.Количество()-1 Цикл
		ОбновлениеСтатусаОбъектаЗагрузки(,,,,,йИнд,,);
	КонецЦикла;
	// Деталировка
	Для йИнд=0 По Объект.Деталировка.Количество()-1 Цикл
		ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,йИнд,);
	КонецЦикла;
	// Документы
	Для йИнд=0 По Объект.Документы.Количество()-1 Цикл
		ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,йИнд);
	КонецЦикла;
	// Документ Задолженности МГМН
	//Дока=Документы.ttk_ЗагрузкаНачисленийИзБиллинга.СоздатьДокумент();
	Если Объект.МестонахождениеБиллинга.БиллингМГМН И Объект.ЗадолженностьМГМН.Количество()>0 Тогда
		ФлагГотов=Истина;
		Для йИнд=0 По Объект.ЗадолженностьМГМН.Количество()-1 Цикл
			ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,,йИнд);
			Если Объект.ЗадолженностьМГМН[йИнд].СтатусОшибка Тогда
				ФлагГотов=Ложь;
			КонецЕсли;
		КонецЦикла;
		ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,,,ФлагГотов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОперативныеТаблицы(Отказ)
//	Если ФлагЭтапа=1 Тогда
		Запрос=Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		ТЗ_Сессия=Новый ТаблицаЗначений;
		//РСХ=РегистрыСведений.ttk_ЗагруженныеСессииИзБиллинга.СоздатьНаборЗаписей();
		//РСХ.Отбор.Документ.Установить(Объект.Ссылка);
		//РСХ.Прочитать();
		//ФлагЗаписи=Истина;
		//Если РСХ.Количество()>0 Тогда
		//	Если РСХ[0].СессияID=Объект.СессияID И РСХ[0].ЖурналID=Объект.ЖурналID Тогда
		//		ФлагЗаписи=Ложь;
		//	КонецЕсли;
		//КонецЕсли;
		//Если ФлагЗаписи Тогда
			ПрефиксТаблицы=СокрЛП(Объект.МестонахождениеБиллинга.ПрефиксТаблицыНачисленияВTPI);
			Если ПрефиксТаблицы="КТТ" Тогда
				ПрефиксТаблицы="";
			Иначе
				ПрефиксТаблицы="_"+ПрефиксТаблицы;
			КонецЕсли;
			Отказ=Ложь;
			МассивПеременных=Новый Массив;
			// [[1]] - Суффикс таблицы
			МассивПеременных.Добавить(ПрефиксТаблицы);
			ПрефиксСессии=СокрЛП(Объект.МестонахождениеБиллинга.ПрефиксСессииНачисленияВTPI);
			// [[2]] - для поля SESSIONID
			МассивПеременных.Добавить(Объект.СессияID);
			// [[3]] - для поля JOURNALID
			МассивПеременных.Добавить(Объект.ЖурналID);
			// [[4]] - Если установлено поле Местонахождениебиллинга.БиллингМГМН
			МассивПеременных.Добавить(?(Объект.МестонахождениеБиллинга.БиллингМГМН," and [OPERATOR] IS NULL",""));
			// [[5]] - Если заполнено поле Бренд
			МассивПеременных.Добавить(?(ПустаяСтрока(Объект.МестонахождениеБиллинга.Регион),"", " and [AGENT]='"+СокрЛП(Объект.МестонахождениеБиллинга.Регион)+"'"));
			//ТЗ_Сессия=Новый ТаблицаЗначений;
			//ПоказатьСостояние("Читается сессия из базы TPI...");
			ОбщегоНазначения.ttk_ПолучитьТаблицуИзTPIпоНастройкеОбмена(Отказ,"000001.БиллингНачисленияТело",ТЗ_Сессия,Истина,МассивПеременных);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			Объект.Документы.Очистить();
			Объект.КонтрагентыДоговоры.Очистить();
			Объект.УслугиНоменклатуры.Очистить();
			Объект.Аналитики.Очистить();
			Объект.Кураторы.Очистить();
			Объект.Валюты.Очистить();
			Объект.СтавкиНДС.Очистить();
			Объект.Деталировка.Очистить();
			ФлагНетУслуги=Истина;
			ФлагНетТипаКонтрагента=Истина;
			ФлагНетИспр=Истина;
			ФлагНетТипаСчета=Истина;
			Для каждого йКол Из ТЗ_Сессия.Колонки Цикл
				Если йКол.Имя="FULLNAMESERVISE" Тогда
					ФлагНетУслуги=Ложь;
				КонецЕсли;
				Если йКол.Имя="TIPKONTRAGENTA" Тогда
					ФлагНетТипаКонтрагента=Ложь;
				КонецЕсли;
				Если Врег(йКол.Имя)="ISPR_FAKTURENUM" Тогда
					ФлагНетИспр=Ложь;
				КонецЕсли;
				Если Врег(йКол.Имя)="TYPESCHET" Тогда
					ФлагНетТипаСчета=Ложь;
				КонецЕсли;
				Если Строка(йКол.ТипЗначения)="Строка" Тогда
					Для каждого йСтр Из ТЗ_Сессия Цикл
						йСтр[йКол.Имя]=СокрЛП(йСтр[йКол.Имя]);
						Если йКол.Имя="KODKONTR_EISUP" Тогда
							йСтр[йКол.Имя]="K"+Сред(йСтр[йКол.Имя],2);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если ФлагНетУслуги Тогда
				ТЗ_Сессия.Колонки.Добавить("FULLNAMESERVISE",Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			Если ФлагНетТипаКонтрагента Тогда
				ТЗ_Сессия.Колонки.Добавить("TIPKONTRAGENTA",Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			Если ФлагНетИспр Тогда
				ТЗ_Сессия.Колонки.Добавить("ISPR_FAKTURENUM",Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			Если ФлагНетТипаСчета Тогда
				ТЗ_Сессия.Колонки.Добавить("TYPESCHET",Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			ТЗ_Сессия.Колонки.Добавить("ДлинаНомера",Новый ОписаниеТипов("Число"));
			ТЗ_Сессия.Колонки.Добавить("УслугаПоисковая",Новый ОписаниеТипов("Строка"));
			Для каждого йСтр Из ТЗ_Сессия Цикл
				йСтр["ДлинаНомера"]=СтрДлина(йСтр["FACTURENUM"]);
				йИ=Найти("СЕКМН",Прав(йСтр["FACTURENUM"],1));
				Если йИ>0 Тогда
					йСтр["FACTURENUM"]=Сред(йСтр["FACTURENUM"],1,йСтр["ДлинаНомера"]-1)+Сред("CEKMN",йИ,1);
				КонецЕсли;
				йСтр["УслугаПоисковая"]=НормализацияУслуги(йСтр["FULLNAMESERVISE"]);
			КонецЦикла;
			//Запрос=Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("Сессия",ТЗ_Сессия);
		//Иначе
		//	//Табл=РСХ[0].ДанныеИзБиллинга.Получить();
		//	Запрос.УстановитьПараметр("Сессия",РСХ[0].ДанныеИзБиллинга.Получить());
		//КонецЕсли;
		Запрос.Текст="ВЫБРАТЬ * ПОМЕСТИТЬ ВТ_Сырец ИЗ &Сессия КАК ВТ_";
		Запрос.Выполнить();
		Запрос.УстановитьПараметр("ЦФУиЦФОпоУмолчанию",Объект.МестонахождениеБиллинга.БратьЦФУиЦФОПоУмолчанию);
		Запрос.УстановитьПараметр("ЦФУпоУмолчанию",Объект.МестонахождениеБиллинга.ЦФУ.Код);
		Запрос.УстановитьПараметр("ЦФОпоУмолчанию",Объект.МестонахождениеБиллинга.ЦФО.Код);
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	абс_СоответствиеКонтрагентаЛьготеНДС.Контрагент.Код КАК КодКонтрагента
		             |ПОМЕСТИТЬ ВТ_ЛьготыПоНДС
		             |ИЗ
		             |	РегистрСведений.абс_СоответствиеКонтрагентаЛьготеНДС КАК абс_СоответствиеКонтрагентаЛьготеНДС
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВЫРАЗИТЬ(ВТ_.KODKONTR_EISUP КАК СТРОКА(10)) КАК КодКонтрагента,
		             |	ВЫРАЗИТЬ(ВТ_.LSCHET КАК СТРОКА(20)) КАК ЛицевойСчет,
		             |	ВЫРАЗИТЬ(ВТ_.NOMERDOGOVORA_1 КАК СТРОКА(30)) КАК НомерДоговора,
		             |	ВТ_.DATADOGOVORA КАК ДатаДоговора,
		             |	ВЫРАЗИТЬ(ВТ_.FULLNAMESERVISE КАК СТРОКА(250)) КАК Содержание,
		             |	ВЫРАЗИТЬ(ВТ_.УслугаПоисковая КАК СТРОКА(250)) КАК УслугаПоисковая,
		             |	ВЫРАЗИТЬ(ВТ_.ITEMID КАК СТРОКА(25)) КАК КодУслуги,
		             |	ВЫРАЗИТЬ(ВТ_.KURATOR КАК СТРОКА(30)) КАК НаименованиеКуратора,
		             |	ВЫРАЗИТЬ(ВТ_.CURRENCYCODE КАК СТРОКА(3)) КАК КодВалюты,
		             |	ВЫБОР
		             |		КОГДА (ВЫРАЗИТЬ(ВТ_.TAXGROUP КАК СТРОКА(10))) = ""0""
		             |				ИЛИ ВТ_.ispr_SUMMANDS = 0
		             |					И ВТ_.SUMMANDS_1 = 0
		             |			ТОГДА ВЫБОР
		             |					КОГДА ВТ_ЛьготыПоНДС.КодКонтрагента ЕСТЬ NULL 
		             |						ТОГДА ""БЕЗНДС""
		             |					ИНАЧЕ ""0""
		             |				КОНЕЦ
		             |		ИНАЧЕ ВЫРАЗИТЬ(ВТ_.TAXGROUP КАК СТРОКА(10))
		             |	КОНЕЦ КАК СтрокаСтавкиНДС,
		             |	ВЫРАЗИТЬ(ВТ_.BILL КАК СТРОКА(30)) КАК НомерСчета,
		             |	ВЫРАЗИТЬ(ВТ_.FACTURENUM КАК СТРОКА(30)) КАК НомерДокумента,
		             |	ВЫРАЗИТЬ(ВТ_.ispr_FaktureNum КАК СТРОКА(30)) КАК НомерДокументаОснования,
		             |	ВЫБОР
		             |		КОГДА (ВЫРАЗИТЬ(ВТ_.TypeSchet КАК СТРОКА(1))) = """"
		             |				И (ВЫРАЗИТЬ(ВТ_.ispr_FaktureNum КАК СТРОКА(30))) <> """"
		             |			ТОГДА 1
		             |		КОГДА (ВЫРАЗИТЬ(ВТ_.TypeSchet КАК СТРОКА(1))) = ""I""
		             |			ТОГДА 1
		             |		КОГДА (ВЫРАЗИТЬ(ВТ_.TypeSchet КАК СТРОКА(1))) = ""K""
		             |			ТОГДА 2
		             |		ИНАЧЕ 0
		             |	КОНЕЦ КАК ТипКорректировки,
		             |	ВЫРАЗИТЬ(ВТ_.TIPKONTRAGENTA КАК СТРОКА(40)) КАК ТипКонтрагента,
		             |	ВТ_.SUMMABEZNDS_1 / ВЫБОР
		             |		КОГДА ЕСТЬNULL(ВТ_.QTY, 1) = 0
		             |			ТОГДА 1
		             |		ИНАЧЕ ВТ_.QTY
		             |	КОНЕЦ КАК Цена,
		             |	ВЫБОР
		             |		КОГДА ЕСТЬNULL(ВТ_.QTY, 1) = 0
		             |			ТОГДА 1
		             |		ИНАЧЕ ВТ_.QTY
		             |	КОНЕЦ КАК Количество,
		             |	ВТ_.SUMMABEZNDS_1 КАК Сумма,
		             |	ВТ_.ispr_SUMMABEZNDS КАК СуммаДо,
		             |	ВТ_.SUMMANDS_1 КАК СуммаНДС,
		             |	ВТ_.ispr_SUMMANDS КАК СуммаНДСДо,
		             |	ВТ_.DELIVERYDATE КАК ДатаДокумента,
		             |	ВТ_.ДлинаНомера КАК ДлинаНомера,
		             |	ВЫБОР
		             |		КОГДА ТИПЗНАЧЕНИЯ(ВТ_.INCLTAX) = ТИП(СТРОКА)
		             |				И (ВТ_.INCLTAX = ""да""
		             |					ИЛИ ВТ_.INCLTAX = ""Да""
		             |					ИЛИ ВТ_.INCLTAX = ""дА""
		             |					ИЛИ ВТ_.INCLTAX = ""ДА"")
		             |			ТОГДА ИСТИНА
		             |		КОГДА ТИПЗНАЧЕНИЯ(ВТ_.INCLTAX) = ТИП(БУЛЕВО)
		             |				И ВТ_.INCLTAX
		             |			ТОГДА ИСТИНА
		             |		ИНАЧЕ ЛОЖЬ
		             |	КОНЕЦ КАК СуммаВключаетНДС,
		             |	ВЫРАЗИТЬ(ВЫБОР
		             |			КОГДА &ЦФУиЦФОпоУмолчанию
		             |				ТОГДА &ЦФОпоУмолчанию
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""B2B""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""ЦФО1349""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""ЦФО1285""
		             |				ТОГДА ""ЦФО1349""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""B2C""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""ЦФО1353""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""ЦФО1291""
		             |				ТОГДА ""ЦФО1353""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""B2O""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""ЦФО1348""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""ЦФО1297""
		             |				ТОГДА ""ЦФО1348""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""B2G""
		             |				ТОГДА ""ЦФО1383""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""РЖД""
		             |				ТОГДА ""ЦФО1384""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = """"
		             |					И ((ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент1""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент2""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент3""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент10""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0404""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0401""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0403""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0402"")
		             |				ТОГДА ""ЦФО1348""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = """"
		             |					И ((ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент4""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент5""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент6""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент7""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0303""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0304""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0203""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0302"")
		             |				ТОГДА ""ЦФО1349""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = """"
		             |					И ((ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент8""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент9""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0101""
		             |						ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0204"")
		             |				ТОГДА ""ЦФО1353""
		             |			ИНАЧЕ """"
		             |		КОНЕЦ КАК СТРОКА(10)) КАК КодЦФО,
					 |";
					 //**
					 ЕСли Объект.Дата > дата("20180120") ТОгда
					 ТекстЗапроса = ТекстЗапроса+"
	 
					 |	ВЫРАЗИТЬ(ВЫБОР
		             |			КОГДА &ЦФУиЦФОпоУмолчанию
		             |				ТОГДА &ЦФУпоУмолчанию
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""ТОП 4""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""B2O_TOP""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0401""
		             |				ТОГДА ""Сегмент1""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""B2O_МН""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0403""
		             |				ТОГДА ""Сегмент2""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""B2O_РФ""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0402""
		             |				ТОГДА ""Сегмент3""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""XTTK""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""ДЗО""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0404""
		             |				ТОГДА ""Сегмент10""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""B2G_РЖД""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0303""
		             |				ТОГДА ""Сегмент4""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""B2G_ДЗО РЖД""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0304""
		             |				ТОГДА ""Сегмент5""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""B2B_MA""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0203""
		             |				ТОГДА ""Сегмент6""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""B2G_REG""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0302""
		             |				ТОГДА ""Сегмент7""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""ФЛ""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0101""
		             |				ТОГДА ""Сегмент8""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0204""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""B2B_SOHO""
		             |				ТОГДА ""РС0204""
		             |			ИНАЧЕ ВТ_.Tsfu
		             |		КОНЕЦ КАК СТРОКА(20)) КАК КодЦФУ,
					 |";

					 иначе	 
					 ТекстЗапроса = ТекстЗапроса+"
					 |	ВЫРАЗИТЬ(ВЫБОР
		             |			КОГДА &ЦФУиЦФОпоУмолчанию
		             |				ТОГДА &ЦФУпоУмолчанию
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""ТОП 4""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""ТОП-4""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент1""
		             |				ТОГДА ""Сегмент1""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""МН операторы""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент2""
		             |				ТОГДА ""Сегмент2""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РФ операторы (не ТОП-4)""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент3""
		             |				ТОГДА ""Сегмент3""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""XTTK""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""ДЗО""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент10""
		             |				ТОГДА ""Сегмент10""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РЖД""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент4""
		             |				ТОГДА ""Сегмент4""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""ДЗО РЖД""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент5""
		             |				ТОГДА ""Сегмент5""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Корпоративные клиенты""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент6""
		             |				ТОГДА ""Сегмент6""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Госсектор""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент7""
		             |				ТОГДА ""Сегмент7""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Физические лица""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент8""
		             |				ТОГДА ""Сегмент8""
		             |			КОГДА (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Юридические лица - B2C""
		             |					ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент9""
		             |				ТОГДА ""Сегмент9""
		             |			ИНАЧЕ ВТ_.Tsfu
		             |		КОНЕЦ КАК СТРОКА(20)) КАК КодЦФУ,
					 |";
					 КонецЕсли;
					  ТекстЗапроса = ТекстЗапроса+"
		             |	СП_ЦФО.Ссылка КАК ЦФО,
		             |	СП_КатегорииУслуг.Ссылка КАК КатегорияУслуги
		             |ПОМЕСТИТЬ ВТ_Сессия_Пром
		             |ИЗ
		             |	ВТ_Сырец КАК ВТ_
		             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подразделения КАК СП_ЦФО
		             |		ПО ((ВЫРАЗИТЬ(ВЫБОР
		             |					КОГДА &ЦФУиЦФОпоУмолчанию
		             |						ТОГДА &ЦФОпоУмолчанию
		             |					КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""B2B""
		             |							ИЛИ (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""ЦФО1349""
		             |							ИЛИ (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""ЦФО1285""
		             |						ТОГДА ""ЦФО1349""
		             |					КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""B2C""
		             |							ИЛИ (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""ЦФО1353""
		             |							ИЛИ (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""ЦФО1291""
		             |						ТОГДА ""ЦФО1353""
		             |					КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""B2O""
		             |							ИЛИ (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""ЦФО1348""
		             |							ИЛИ (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""ЦФО1297""
		             |						ТОГДА ""ЦФО1348""
		             |					КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""B2G""
		             |						ТОГДА ""ЦФО1383""
		             |					КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = ""РЖД""
		             |						ТОГДА ""ЦФО1384""
		             |					КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = """"
		             |							И ((ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент1""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент2""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент3""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент10""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0401""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0403""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0402""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0404"")
		             |						ТОГДА ""ЦФО1348""
		             |					КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = """"
		             |							И ((ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент4""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент5""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент6""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент7""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0303""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0304""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0203""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0302"")
		             |						ТОГДА ""ЦФО1349""
		             |					КОГДА (ВЫРАЗИТЬ(ВТ_.CFO КАК СТРОКА(10))) = """"
		             |							И ((ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент8""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""Сегмент9""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0101""
		             |								ИЛИ (ВЫРАЗИТЬ(ВТ_.Tsfu КАК СТРОКА(20))) = ""РС0204"")
		             |						ТОГДА ""ЦФО1353""
		             |					ИНАЧЕ """"
		             |				КОНЕЦ КАК СТРОКА(10))) = СП_ЦФО.Код)
		             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		             |			Номенклатура.Ссылка КАК Ссылка,
		             |			Номенклатура.Наименование КАК Наименование
		             |		ИЗ
		             |			Справочник.Номенклатура КАК Номенклатура
		             |		ГДЕ
		             |			Номенклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.УслугиПоКатегориям)) КАК СП_КатегорииУслуг
		             |		ПО ((ВЫРАЗИТЬ(ВТ_.KOD_NG КАК СТРОКА(50))) = (ВЫРАЗИТЬ(СП_КатегорииУслуг.Наименование КАК СТРОКА(50))))
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЛьготыПоНДС КАК ВТ_ЛьготыПоНДС
		             |		ПО ((ВЫРАЗИТЬ(ВТ_.KODKONTR_EISUP КАК СТРОКА(20))) = (ВЫРАЗИТЬ(ВТ_ЛьготыПоНДС.КодКонтрагента КАК СТРОКА(20))))";
		Запрос.Текст = ТекстЗапроса;			 
		Запрос.Выполнить();
			//Запрос.Текст="ВЫБРАТЬ * ИЗ ВТ_Сессия";
			//Табл=Запрос.Выполнить().Выгрузить();
			//Возврат;
	//	Отказ=Ложь;
	//	Возврат;
	//КонецЕсли;
	//Если ФлагЭтапа = 5 Тогда
		// Грузим Кураторы
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВТ_Сессия.НаименованиеКуратора КАК НаименованиеКуратор,
		             |	ЕСТЬNULL(ВложенныйЗапрос.Куратор, &КураторПоУмолчанию) КАК Куратор,
		             |	ЕСТЬNULL(ВложенныйЗапрос.Куратор.ЦФО, ВЫРАЗИТЬ(&КураторПоУмолчанию КАК Справочник.абс_Кураторы).ЦФО) КАК ЦФО
		             |ИЗ
		             |	ВТ_Сессия_Пром КАК ВТ_Сессия
		             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		             |			МИНИМУМ(абс_Кураторы.Ссылка) КАК Куратор,
		             |			абс_Кураторы.Наименование КАК НаименованиеКуратора
		             |		ИЗ
		             |			Справочник.абс_Кураторы КАК абс_Кураторы
		             |		ГДЕ
		             |			абс_Кураторы.Организация = &Организация
		             |		
		             |		СГРУППИРОВАТЬ ПО
		             |			абс_Кураторы.Наименование) КАК ВложенныйЗапрос
		             |		ПО (ВЫБОР
		             |				КОГДА ВТ_Сессия.НаименованиеКуратора = """"
		             |					ТОГДА ВЫРАЗИТЬ(&КураторПоУмолчанию КАК Справочник.абс_Кураторы).Наименование
		             |				ИНАЧЕ ВТ_Сессия.НаименованиеКуратора
		             |			КОНЕЦ = ВложенныйЗапрос.НаименованиеКуратора)
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	НаименованиеКуратор";
		Запрос.УстановитьПараметр("Организация",Объект.МестонахождениеБиллинга.ОрганизацияУчета);
		Запрос.УстановитьПараметр("КураторПоУмолчанию",Объект.МестонахождениеБиллинга.КураторПоУмолчанию);
		Объект.Кураторы.Загрузить(Запрос.Выполнить().Выгрузить());
		// Заполнить пустое ЦФО значением ЦФО из Куратора
		Запрос.УстановитьПараметр("ОКураторы",Объект.Кураторы.Выгрузить());
		Запрос.Текст="ВЫБРАТЬ
		             |	ВТ_.НаименованиеКуратор КАК СтрокаКуратор,
		             |	ВТ_.Куратор КАК Куратор,
		             |	ВТ_.ЦФО КАК ЦФО,
		             |	ВТ_.НомерСтроки КАК ИндексКуратора
		             |ПОМЕСТИТЬ ВТ_Кураторы
		             |ИЗ
		             |	&ОКураторы КАК ВТ_
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	СтрокаКуратор
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ttk_СоответствиеУслугПоКатегориямСрезПоследних.ЦФО,
		             |	ttk_СоответствиеУслугПоКатегориямСрезПоследних.Номенклатура,
		             |	ttk_СоответствиеУслугПоКатегориямСрезПоследних.НоменклатурнаяГруппа
		             |ПОМЕСТИТЬ ВТ_Соответствие_КатегорияУслуги_ЦФО_НоменклатурнаяГруппа
		             |ИЗ
		             |	РегистрСведений.ttk_СоответствиеУслугПоКатегориям.СрезПоследних(&ДатаУчета, ) КАК ttk_СоответствиеУслугПоКатегориямСрезПоследних
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_.КодКонтрагента,
		             |	ВТ_.ЛицевойСчет,
		             |	ВТ_.НомерДоговора,
		             |	ВТ_.ДатаДоговора,
		             |	ВТ_.Содержание,
		             |	ВТ_.УслугаПоисковая,
		             |	ВТ_.КодУслуги,
		             |	ВТ_.НаименованиеКуратора,
		             |	ВТ_.КодВалюты,
		             |	ВТ_.СтрокаСтавкиНДС,
		             |	ВТ_.НомерСчета,
		             |	ВТ_.НомерДокумента,
		             |	ВТ_.НомерДокументаОснования,
		             |	ВТ_.ТипКорректировки,
		             |	ВТ_.ТипКонтрагента,
		             |	ВТ_.Цена,
		             |	ВТ_.Количество,
		             |	ВТ_.Сумма,
		             |	ВТ_.СуммаДо,
		             |	ВТ_.СуммаНДС,
		             |	ВТ_.СуммаНДСДо,
		             |	ВТ_.ДатаДокумента,
		             |	ВТ_.ДлинаНомера,
		             |	ВТ_.СуммаВключаетНДС,
		             |	ВТ_.КодЦФО,
		             |	ВТ_.КодЦФУ,
		             |	ВЫБОР
		             |		КОГДА ВТ_.ЦФО = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		             |			ТОГДА ВТ_Кураторы.ЦФО
		             |		ИНАЧЕ ВТ_.ЦФО
		             |	КОНЕЦ КАК ЦФО,
		             |	ВТ_.КатегорияУслуги КАК КатегорияУслуги,
		             |	ВТ_Соответствие_КатегорияУслуги_ЦФО_НоменклатурнаяГруппа.НоменклатурнаяГруппа КАК НГ_ПоКатегории
		             |ПОМЕСТИТЬ ВТ_Сессия
		             |ИЗ
		             |	ВТ_Сессия_Пром КАК ВТ_
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Кураторы КАК ВТ_Кураторы
		             |		ПО (ВТ_Кураторы.СтрокаКуратор = ВТ_.НаименованиеКуратора)
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Соответствие_КатегорияУслуги_ЦФО_НоменклатурнаяГруппа КАК ВТ_Соответствие_КатегорияУслуги_ЦФО_НоменклатурнаяГруппа
		             |		ПО ВТ_.КатегорияУслуги = ВТ_Соответствие_КатегорияУслуги_ЦФО_НоменклатурнаяГруппа.Номенклатура
		             |			И (ВЫБОР
		             |				КОГДА ВТ_.ЦФО = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		             |					ТОГДА ВТ_Кураторы.ЦФО
		             |				ИНАЧЕ ВТ_.ЦФО
		             |			КОНЕЦ = ВТ_Соответствие_КатегорияУслуги_ЦФО_НоменклатурнаяГруппа.ЦФО)";
		Запрос.УстановитьПараметр("ДатаУчета",КонецМесяца(Объект.Дата));
		Запрос.Выполнить();
	//	Отказ=Ложь;
	//	Возврат;
	//КонецЕсли;
	//Если ФлагЭтапа = 6 Тогда
		// Грузим Валюты
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВТ_Сессия.КодВалюты КАК КодВалюты,
		             |	Валюты.Ссылка КАК Валюта
		             |ИЗ
		             |	ВТ_Сессия КАК ВТ_Сессия
		             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
		             |		ПО (ВЫБОР
		             |				КОГДА ВТ_Сессия.КодВалюты = """"
		             |						ИЛИ ВТ_Сессия.КодВалюты = ""810""
		             |						ИЛИ ВТ_Сессия.КодВалюты = ""286""
		             |					ТОГДА ""643""
		             |				ИНАЧЕ ВТ_Сессия.КодВалюты
		             |			КОНЕЦ = Валюты.Код)
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	КодВалюты";
		//ПоказатьСостояние("Готовиться таблица Контрагенты-Договоры...");
		Объект.Валюты.Загрузить(Запрос.Выполнить().Выгрузить());
	//	Отказ=Ложь;
	//	Возврат;
	//КонецЕсли;
	//Если ФлагЭтапа = 2 Тогда
		// Грузим КонтрагентыДоговоры
		Запрос.УстановитьПараметр("ОВалюты",Объект.Валюты.Выгрузить());
		Запрос.Текст="ВЫБРАТЬ
		             |	ВТ_.КодВалюты КАК КодВалюты,
		             |	ВТ_.Валюта КАК Валюта,
		             |	ВТ_.НомерСтроки КАК ИндексВалюты
		             |ПОМЕСТИТЬ ВТ_Валюты
		             |ИЗ
		             |	&ОВалюты КАК ВТ_
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	КодВалюты
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВТ_Сессия.КодКонтрагента КАК КодКонтрагента,
		             |	ВТ_Сессия.ЛицевойСчет КАК ЛицевойСчет,
		             |	ВТ_Сессия.НомерДоговора КАК НомерДоговора,
		             |	ВТ_Сессия.ДатаДоговора КАК ДатаДоговора,
		             |	ВТ_Сессия.КодВалюты КАК КодВалюты,
		             |	ВТ_Валюты.ИндексВалюты КАК ИндексВалюты,
		             |	ВТ_Валюты.Валюта КАК Валюта,
		             |	ВЫБОР
		             |		КОГДА НЕ Контрагенты.Ссылка ЕСТЬ NULL 
		             |			ТОГДА Контрагенты.Ссылка
		             |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		             |	КОНЕЦ КАК Контрагент,
		             |	"""" КАК Комментарий,
		             |	ВЫБОР
		             |		КОГДА Контрагенты.Ссылка ЕСТЬ NULL 
		             |			ТОГДА аТипыКонтрагентов.Ссылка
		             |		ИНАЧЕ Контрагенты.абс_ТипыКонтрагентов
		             |	КОНЕЦ КАК ТипКонтрагента,
		             |	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		             |	ЗНАЧЕНИЕ(Перечисление.абсСтатусыДоговоров.ПустаяСсылка) КАК абс_СтатусДоговора
		             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты_1этап
		             |ИЗ
		             |	ВТ_Сессия КАК ВТ_Сессия
		             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		             |		ПО ВТ_Сессия.КодКонтрагента = Контрагенты.Код
		             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.абс_ТипыКонтрагентов КАК аТипыКонтрагентов
		             |		ПО ((ВЫРАЗИТЬ(ВТ_Сессия.ТипКонтрагента КАК СТРОКА(50))) = (ВЫРАЗИТЬ(аТипыКонтрагентов.Наименование КАК СТРОКА(50))))
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Валюты КАК ВТ_Валюты
		             |		ПО ВТ_Сессия.КодВалюты = ВТ_Валюты.КодВалюты
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	КодКонтрагента,
		             |	ЛицевойСчет";
		Запрос.Выполнить();
		Запрос.УстановитьПараметр("ГодЗагрузки",Цел(Объект.MONT_F/100));
		Запрос.УстановитьПараметр("МесяцЗагрузки",Объект.MONT_F);
		Запрос.УстановитьПараметр("МестонахождениеБиллинга",Объект.МестонахождениеБиллинга);
		Если Объект.МестонахождениеБиллинга.ИспользоватьИсториюСтарыхЗагрузокИзЛогов Тогда
			Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			             |	ВТ_ДоговорыКонтрагенты.КодКонтрагента КАК КодКонтрагента,
			             |	ВТ_ДоговорыКонтрагенты.ЛицевойСчет КАК ЛицевойСчет,
			             |	ВТ_ДоговорыКонтрагенты.НомерДоговора КАК НомерДоговора,
			             |	ВТ_ДоговорыКонтрагенты.КодВалюты КАК КодВалюты
			             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты_1этап_Поиск
			             |ИЗ
			             |	ВТ_ДоговорыКонтрагенты_1этап КАК ВТ_ДоговорыКонтрагенты
			             |ГДЕ
			             |	ВТ_ДоговорыКонтрагенты.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			             |	ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.KODKONTR_EISUP КАК СТРОКА(10)) КАК КодКонтрагента,
			             |	ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.LSCHET КАК СТРОКА(25)) КАК ЛицевойСчет,
			             |	ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.NOMERDOGOVORA_1 КАК СТРОКА(30)) КАК НомерДоговора,
			             |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.Ссылка.Дата КАК Дата,
			             |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.Контрагент,
			             |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.Контрагент.абс_ТипыКонтрагентов,
			             |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.ДоговорКонтрагента,
			             |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.ДоговорКонтрагента.абс_СтатусДоговора,
			             |	ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.CURRENCYCODE КАК СТРОКА(3)) КАК КодВалюты,
			             |	ВТ_Валюты.Валюта КАК Валюта
			             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты_1этап_Сырые
			             |ИЗ
			             |	Документ.абс_ЛогЗагрузкиИзАСР.ДанныеБиллинга КАК абс_ЛогЗагрузкиИзАСРДанныеБиллинга
			             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Валюты КАК ВТ_Валюты
			             |		ПО абс_ЛогЗагрузкиИзАСРДанныеБиллинга.CURRENCYCODE = ВТ_Валюты.КодВалюты
			             |ГДЕ
			             |	(ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.KODKONTR_EISUP КАК СТРОКА(10)), ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.LSCHET КАК СТРОКА(25)), ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.NOMERDOGOVORA_1 КАК СТРОКА(30)), ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.CURRENCYCODE КАК СТРОКА(3))) В
			             |			(ВЫБРАТЬ
			             |				ВЫРАЗИТЬ(ВТ_ДоговорыКонтрагенты_1этап_Поиск.КодКонтрагента КАК СТРОКА(10)),
			             |				ВЫРАЗИТЬ(ВТ_ДоговорыКонтрагенты_1этап_Поиск.ЛицевойСчет КАК СТРОКА(25)),
			             |				ВЫРАЗИТЬ(ВТ_ДоговорыКонтрагенты_1этап_Поиск.НомерДоговора КАК СТРОКА(30)),
			             |				ВТ_ДоговорыКонтрагенты_1этап_Поиск.КодВалюты
			             |			ИЗ
			             |				ВТ_ДоговорыКонтрагенты_1этап_Поиск)
			             |	И абс_ЛогЗагрузкиИзАСРДанныеБиллинга.Ссылка.Организация = &Организация
			             |	И абс_ЛогЗагрузкиИзАСРДанныеБиллинга.Ссылка.Дата < &ДатаУчета
			             |	И ВТ_Валюты.Валюта = абс_ЛогЗагрузкиИзАСРДанныеБиллинга.ДоговорКонтрагента.ВалютаВзаиморасчетов
			             |	И НЕ абс_ЛогЗагрузкиИзАСРДанныеБиллинга.ДоговорКонтрагента ЕСТЬ NULL 
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			             |	ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.KODKONTR_EISUP КАК СТРОКА(10)) КАК КодКонтрагента,
			             |	ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.LSCHET КАК СТРОКА(25)) КАК ЛицевойСчет,
			             |	ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.NOMERDOGOVORA_1 КАК СТРОКА(30)) КАК НомерДоговора,
			             |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.CURRENCYCODE КАК КодВалюты,
			             |	МАКСИМУМ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.Ссылка.Дата) КАК Дата
			             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты_1этап_Найденные
			             |ИЗ
			             |	Документ.абс_ЛогЗагрузкиИзАСР.ДанныеБиллинга КАК абс_ЛогЗагрузкиИзАСРДанныеБиллинга
			             |
			             |СГРУППИРОВАТЬ ПО
			             |	ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.KODKONTR_EISUP КАК СТРОКА(10)),
			             |	ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.LSCHET КАК СТРОКА(25)),
			             |	ВЫРАЗИТЬ(абс_ЛогЗагрузкиИзАСРДанныеБиллинга.NOMERDOGOVORA_1 КАК СТРОКА(30)),
			             |	абс_ЛогЗагрузкиИзАСРДанныеБиллинга.CURRENCYCODE
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗЛИЧНЫЕ
			             |	ВТ_ДоговорыКонтрагенты_1этап_Сырые.КодКонтрагента,
			             |	ВТ_ДоговорыКонтрагенты_1этап_Сырые.ЛицевойСчет,
			             |	ВТ_ДоговорыКонтрагенты_1этап_Сырые.НомерДоговора,
			             |	ВТ_ДоговорыКонтрагенты_1этап_Сырые.КодВалюты,
			             |	ВТ_ДоговорыКонтрагенты_1этап_Сырые.Контрагент,
			             |	ВТ_ДоговорыКонтрагенты_1этап_Сырые.Контрагентабс_ТипыКонтрагентов КАК ТипКонтрагента,
			             |	ВТ_ДоговорыКонтрагенты_1этап_Сырые.ДоговорКонтрагента КАК Договор,
			             |	ВТ_ДоговорыКонтрагенты_1этап_Сырые.ДоговорКонтрагентаабс_СтатусДоговора КАК абс_СтатусДоговора
			             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты_1этап_Пром
			             |ИЗ
			             |	ВТ_ДоговорыКонтрагенты_1этап_Сырые КАК ВТ_ДоговорыКонтрагенты_1этап_Сырые
			             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговорыКонтрагенты_1этап_Найденные КАК ВТ_ДоговорыКонтрагенты_1этап_Найденные
			             |		ПО ВТ_ДоговорыКонтрагенты_1этап_Сырые.КодКонтрагента = ВТ_ДоговорыКонтрагенты_1этап_Найденные.КодКонтрагента
			             |			И ВТ_ДоговорыКонтрагенты_1этап_Сырые.ЛицевойСчет = ВТ_ДоговорыКонтрагенты_1этап_Найденные.ЛицевойСчет
			             |			И ВТ_ДоговорыКонтрагенты_1этап_Сырые.НомерДоговора = ВТ_ДоговорыКонтрагенты_1этап_Найденные.НомерДоговора
			             |			И ВТ_ДоговорыКонтрагенты_1этап_Сырые.КодВалюты = ВТ_ДоговорыКонтрагенты_1этап_Найденные.КодВалюты
			             |			И ВТ_ДоговорыКонтрагенты_1этап_Сырые.Дата = ВТ_ДоговорыКонтрагенты_1этап_Найденные.Дата
			             |ГДЕ
			             |	НЕ ВТ_ДоговорыКонтрагенты_1этап_Найденные.КодКонтрагента ЕСТЬ NULL 
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	ВТ_ДоговорыКонтрагенты_1этап.КодКонтрагента,
			             |	ВТ_ДоговорыКонтрагенты_1этап.КодВалюты,
			             |	ВТ_ДоговорыКонтрагенты_1этап.ЛицевойСчет,
			             |	ВТ_ДоговорыКонтрагенты_1этап.НомерДоговора,
			             |	ВТ_ДоговорыКонтрагенты_1этап.ИндексВалюты,
			             |	ВТ_ДоговорыКонтрагенты_1этап.Валюта,
			             |	ВТ_ДоговорыКонтрагенты_1этап.ДатаДоговора,
			             |	ЕСТЬNULL(ВТ_ДоговорыКонтрагенты_1этап_Пром.Контрагент, ВТ_ДоговорыКонтрагенты_1этап.Контрагент) КАК Контрагент,
			             |	ВТ_ДоговорыКонтрагенты_1этап.Комментарий,
			             |	ЕСТЬNULL(ВТ_ДоговорыКонтрагенты_1этап_Пром.ТипКонтрагента, ВТ_ДоговорыКонтрагенты_1этап.ТипКонтрагента) КАК ТипКонтрагента,
			             |	ЕСТЬNULL(ВТ_ДоговорыКонтрагенты_1этап_Пром.Договор, ВТ_ДоговорыКонтрагенты_1этап.Договор) КАК Договор,
			             |	ЕСТЬNULL(ВТ_ДоговорыКонтрагенты_1этап_Пром.абс_СтатусДоговора, ВТ_ДоговорыКонтрагенты_1этап.абс_СтатусДоговора) КАК абс_СтатусДоговора
			             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты_2этап
			             |ИЗ
			             |	ВТ_ДоговорыКонтрагенты_1этап КАК ВТ_ДоговорыКонтрагенты_1этап
			             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговорыКонтрагенты_1этап_Пром КАК ВТ_ДоговорыКонтрагенты_1этап_Пром
			             |		ПО ВТ_ДоговорыКонтрагенты_1этап.КодКонтрагента = ВТ_ДоговорыКонтрагенты_1этап_Пром.КодКонтрагента
			             |			И ВТ_ДоговорыКонтрагенты_1этап.ЛицевойСчет = ВТ_ДоговорыКонтрагенты_1этап_Пром.ЛицевойСчет
			             |			И ВТ_ДоговорыКонтрагенты_1этап.НомерДоговора = ВТ_ДоговорыКонтрагенты_1этап_Пром.НомерДоговора
			             |			И ВТ_ДоговорыКонтрагенты_1этап.КодВалюты = ВТ_ДоговорыКонтрагенты_1этап_Пром.КодВалюты";
			Запрос.Выполнить();
			//Запрос.Текст="ВЫБРАТЬ * ИЗ ВТ_ДоговорыКонтрагенты_1этап_Пром";
			//Табл=Запрос.Выполнить().Выгрузить();
		Иначе
			Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			             |	ВТ_ДоговорыКонтрагенты_1этап.КодКонтрагента,
			             |	ВТ_ДоговорыКонтрагенты_1этап.КодВалюты,
			             |	ВТ_ДоговорыКонтрагенты_1этап.ЛицевойСчет,
			             |	ВТ_ДоговорыКонтрагенты_1этап.НомерДоговора,
			             |	ВТ_ДоговорыКонтрагенты_1этап.ИндексВалюты,
			             |	ВТ_ДоговорыКонтрагенты_1этап.Валюта,
			             |	ВТ_ДоговорыКонтрагенты_1этап.ДатаДоговора,
			             |	ВТ_ДоговорыКонтрагенты_1этап.Контрагент,
			             |	ВТ_ДоговорыКонтрагенты_1этап.Комментарий,
			             |	ВТ_ДоговорыКонтрагенты_1этап.ТипКонтрагента,
			             |	ВТ_ДоговорыКонтрагенты_1этап.Договор,
			             |	ВТ_ДоговорыКонтрагенты_1этап.абс_СтатусДоговора
			             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты_2этап
			             |ИЗ
			             |	ВТ_ДоговорыКонтрагенты_1этап КАК ВТ_ДоговорыКонтрагенты_1этап";
			Запрос.Выполнить();
		КонецЕсли;
		Если Объект.МестонахождениеБиллинга.ИспользоватьРегистрИсторииЗагрузок Тогда
			Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			             |	ВТ_ДоговорыКонтрагенты.КодКонтрагента КАК КодКонтрагента,
			             |	ВТ_ДоговорыКонтрагенты.ЛицевойСчет КАК ЛицевойСчет,
			             |	ВТ_ДоговорыКонтрагенты.НомерДоговора КАК НомерДоговора,
			             |	ВТ_ДоговорыКонтрагенты.КодВалюты КАК КодВалюты,
			             |	ВТ_ДоговорыКонтрагенты.Валюта КАК Валюта
			             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты_2этап_Поиск
			             |ИЗ
			             |	ВТ_ДоговорыКонтрагенты_2этап КАК ВТ_ДоговорыКонтрагенты
			             |ГДЕ
			             |	ВТ_ДоговорыКонтрагенты.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			             |	ttk_СоответствиеВБиллингеИЕисупеНормативноСправочнойИнформацииСрезПоследних.Контрагент,
			             |	ttk_СоответствиеВБиллингеИЕисупеНормативноСправочнойИнформацииСрезПоследних.ТипКонтрагента,
			             |	ttk_СоответствиеВБиллингеИЕисупеНормативноСправочнойИнформацииСрезПоследних.Договор,
			             |	ВТ_ДоговорыКонтрагенты_2этап_Поиск.КодКонтрагента,
			             |	ВТ_ДоговорыКонтрагенты_2этап_Поиск.ЛицевойСчет,
			             |	ВТ_ДоговорыКонтрагенты_2этап_Поиск.НомерДоговора,
			             |	ВТ_ДоговорыКонтрагенты_2этап_Поиск.КодВалюты,
			             |	ВТ_ДоговорыКонтрагенты_2этап_Поиск.Валюта,
			             |	ttk_СоответствиеВБиллингеИЕисупеНормативноСправочнойИнформацииСрезПоследних.Договор.абс_СтатусДоговора КАК абс_СтатусДоговора
			             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты_2этап_Найденные
			             |ИЗ
			             |	ВТ_ДоговорыКонтрагенты_2этап_Поиск КАК ВТ_ДоговорыКонтрагенты_2этап_Поиск
			             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ttk_СоответствиеВБиллингеИЕисупеНормативноСправочнойИнформации.СрезПоследних(
			             |				НАЧАЛОПЕРИОДА(&ДатаУчета, МЕСЯЦ),
			             |				Договор.Организация = &Организация
			             |					И МестонахождениеБиллинга = &МестонахождениеБиллинга) КАК ttk_СоответствиеВБиллингеИЕисупеНормативноСправочнойИнформацииСрезПоследних
			             |		ПО ВТ_ДоговорыКонтрагенты_2этап_Поиск.КодКонтрагента = ttk_СоответствиеВБиллингеИЕисупеНормативноСправочнойИнформацииСрезПоследних.КодКонтрагента
			             |			И ВТ_ДоговорыКонтрагенты_2этап_Поиск.ЛицевойСчет = ttk_СоответствиеВБиллингеИЕисупеНормативноСправочнойИнформацииСрезПоследних.ЛицевойСчет
			             |			И ВТ_ДоговорыКонтрагенты_2этап_Поиск.НомерДоговора = ttk_СоответствиеВБиллингеИЕисупеНормативноСправочнойИнформацииСрезПоследних.НомерДоговора
			             |			И ВТ_ДоговорыКонтрагенты_2этап_Поиск.Валюта = ttk_СоответствиеВБиллингеИЕисупеНормативноСправочнойИнформацииСрезПоследних.Договор.ВалютаВзаиморасчетов
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	ВТ_ДоговорыКонтрагенты_2этап.КодКонтрагента,
			             |	ВТ_ДоговорыКонтрагенты_2этап.КодВалюты,
			             |	ВТ_ДоговорыКонтрагенты_2этап.ЛицевойСчет,
			             |	ВТ_ДоговорыКонтрагенты_2этап.НомерДоговора,
			             |	ВТ_ДоговорыКонтрагенты_2этап.ИндексВалюты,
			             |	ВТ_ДоговорыКонтрагенты_2этап.Валюта,
			             |	ВТ_ДоговорыКонтрагенты_2этап.ДатаДоговора,
			             |	ЕСТЬNULL(ВТ_ДоговорыКонтрагенты_2этап_Найденные.Контрагент, ВТ_ДоговорыКонтрагенты_2этап.Контрагент) КАК Контрагент,
			             |	ВТ_ДоговорыКонтрагенты_2этап.Комментарий,
			             |	ЕСТЬNULL(ВТ_ДоговорыКонтрагенты_2этап_Найденные.ТипКонтрагента, ВТ_ДоговорыКонтрагенты_2этап.ТипКонтрагента) КАК ТипКонтрагента,
			             |	ЕСТЬNULL(ВТ_ДоговорыКонтрагенты_2этап_Найденные.Договор, ВТ_ДоговорыКонтрагенты_2этап.Договор) КАК Договор,
			             |	ЕСТЬNULL(ВТ_ДоговорыКонтрагенты_2этап_Найденные.абс_СтатусДоговора, ВТ_ДоговорыКонтрагенты_2этап.абс_СтатусДоговора) КАК абс_СтатусДоговора
			             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты
			             |ИЗ
			             |	ВТ_ДоговорыКонтрагенты_2этап КАК ВТ_ДоговорыКонтрагенты_2этап
			             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговорыКонтрагенты_2этап_Найденные КАК ВТ_ДоговорыКонтрагенты_2этап_Найденные
			             |		ПО ВТ_ДоговорыКонтрагенты_2этап.КодКонтрагента = ВТ_ДоговорыКонтрагенты_2этап_Найденные.КодКонтрагента
			             |			И ВТ_ДоговорыКонтрагенты_2этап.ЛицевойСчет = ВТ_ДоговорыКонтрагенты_2этап_Найденные.ЛицевойСчет
			             |			И ВТ_ДоговорыКонтрагенты_2этап.НомерДоговора = ВТ_ДоговорыКонтрагенты_2этап_Найденные.НомерДоговора
			             |			И ВТ_ДоговорыКонтрагенты_2этап.КодВалюты = ВТ_ДоговорыКонтрагенты_2этап_Найденные.КодВалюты";
			Запрос.Выполнить();
		Иначе
			Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			             |	ВТ_ДоговорыКонтрагенты_2этап.КодКонтрагента,
			             |	ВТ_ДоговорыКонтрагенты_2этап.КодВалюты,
			             |	ВТ_ДоговорыКонтрагенты_2этап.ЛицевойСчет,
			             |	ВТ_ДоговорыКонтрагенты_2этап.НомерДоговора,
			             |	ВТ_ДоговорыКонтрагенты_2этап.ИндексВалюты,
			             |	ВТ_ДоговорыКонтрагенты_2этап.Валюта,
			             |	ВТ_ДоговорыКонтрагенты_2этап.ДатаДоговора,
			             |	ВТ_ДоговорыКонтрагенты_2этап.Контрагент,
			             |	ВТ_ДоговорыКонтрагенты_2этап.Комментарий,
			             |	ВТ_ДоговорыКонтрагенты_2этап.ТипКонтрагента,
			             |	ВТ_ДоговорыКонтрагенты_2этап.Договор,
			             |	ВТ_ДоговорыКонтрагенты_2этап.абс_СтатусДоговора
			             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты
			             |ИЗ
			             |	ВТ_ДоговорыКонтрагенты_2этап КАК ВТ_ДоговорыКонтрагенты_2этап";
			Запрос.Выполнить();
		КонецЕсли;
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВТ_ДоговорыКонтрагенты.КодКонтрагента,
		             |	ВТ_ДоговорыКонтрагенты.ТипКонтрагента
		             |ПОМЕСТИТЬ ВТ_ТипыКонтрагентов
		             |ИЗ
		             |	ВТ_ДоговорыКонтрагенты КАК ВТ_ДоговорыКонтрагенты
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_ДоговорыКонтрагенты.Контрагент
		             |ПОМЕСТИТЬ ВТ_Контры_Пром
		             |ИЗ
		             |	ВТ_ДоговорыКонтрагенты КАК ВТ_ДоговорыКонтрагенты
		             |ГДЕ
		             |	ВТ_ДоговорыКонтрагенты.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		             |	И ВТ_ДоговорыКонтрагенты.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ДоговорыКонтрагентов.Ссылка КАК Договор,
		             |	ДоговорыКонтрагентов.Владелец КАК Контрагент,
		             |	ДоговорыКонтрагентов.Номер КАК Номер,
		             |	ДоговорыКонтрагентов.абс_СтатусДоговора,
		             |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК Валюта,
		             |	ДоговорыКонтрагентов.абс_ЛицевойСчетБиллинга КАК ЛицевойСчет
		             |ИЗ
		             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		             |ГДЕ
		             |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		             |	И ДоговорыКонтрагентов.Владелец В
		             |			(ВЫБРАТЬ
		             |				ВТ_Контры_Пром.Контрагент
		             |			ИЗ
		             |				ВТ_Контры_Пром)
		             |	И НЕ ДоговорыКонтрагентов.ЭтоГруппа
		             |	И ДоговорыКонтрагентов.Организация = &Организация
		             |	И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		             |			ИЛИ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
		             |	И ДоговорыКонтрагентов.абс_СтатусДоговора = ЗНАЧЕНИЕ(Перечисление.абсСтатусыДоговоров.Исполнение)
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	Контрагент,
		             |	Номер";
		// Искать договоры не найденные ранее среди загруженных
		ДогиРеальные=Запрос.Выполнить().Выгрузить();		 
			//Запрос.Текст="ВЫБРАТЬ * ИЗ ВТ_Контры_Пром";
			//Табл=Запрос.Выполнить().Выгрузить();
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_ДоговорыКонтрагенты.ЛицевойСчет,
		             |	ВТ_ДоговорыКонтрагенты.НомерДоговора,
		             |	ВТ_ДоговорыКонтрагенты.Контрагент,
		             |	ВТ_ДоговорыКонтрагенты.КодВалюты,
		             |	ВТ_ДоговорыКонтрагенты.ИндексВалюты,
		             |	ВТ_ДоговорыКонтрагенты.Валюта,
		             |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК КонтрагентСтарый,
		             |	ВТ_ДоговорыКонтрагенты.Договор,
		             |	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорСтарый,
		             |	ЗНАЧЕНИЕ(Перечисление.абсСтатусыДоговоров.ПустаяСсылка) КАК абс_СтатусДоговора
		             |ИЗ
		             |	ВТ_ДоговорыКонтрагенты КАК ВТ_ДоговорыКонтрагенты
		             |ГДЕ
		             |	ВТ_ДоговорыКонтрагенты.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		             |	И ВТ_ДоговорыКонтрагенты.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
		ДогиЗагрузки=Запрос.Выполнить().Выгрузить();
		// Искать договоры не найденные ранее среди активных по номеру договора и лицевому счёту в загрузке
		Для каждого йДога Из ДогиЗагрузки Цикл
			Отбор=Новый Структура("Контрагент",йДога.Контрагент);
			йДогиРеальные=ДогиРеальные.НайтиСтроки(Отбор);
			Если йДогиРеальные.Количество()>0 Тогда
				Для каждого йСтр Из йДогиРеальные Цикл
					Если НормализацияИмени(йДога.НомерДоговора)=НормализацияИмени(йСтр.Номер) И
						 НормализацияИмени(йДога.ЛицевойСчет)=НормализацияИмени(йСтр.ЛицевойСчет) И
						 йДога.Валюта=йСтр.Валюта Тогда
						йДога.Договор=йСтр.Договор;
						йДога.абс_СтатусДоговора=йСтр.абс_СтатусДоговора;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		//// Искать договоры не найденные ранее среди активных по номеру договора в загрузке
		//Для каждого йДога Из ДогиЗагрузки Цикл
		//	Отбор=Новый Структура("Контрагент",йДога.Контрагент);
		//	йДогиРеальные=ДогиРеальные.НайтиСтроки(Отбор);
		//	Если йДогиРеальные.Количество()>0 Тогда
		//		Для каждого йСтр Из йДогиРеальные Цикл
		//			Если НормализацияИмени(йДога.НомерДоговора)=НормализацияИмени(йСтр.Номер) Тогда
		//				йДога.Договор=йСтр.Договор;
		//				йДога.абс_СтатусДоговора=йСтр.абс_СтатусДоговора;
		//				Прервать;
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЦикла;
		//// Искать договоры не найденные ранее среди активных по лицевому счёту договора в загрузке
		//Для каждого йДога Из ДогиЗагрузки Цикл
		//	Если ЗначениеЗаполнено(йДога.Договор) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	//НомерЗагрузки=НормализацияИмени(йДога.НомерДоговора);
		//	Отбор=Новый Структура("Контрагент",йДога.Контрагент);
		//	йДогиРеальные=ДогиРеальные.НайтиСтроки(Отбор);
		//	Если йДогиРеальные.Количество()>0 Тогда
		//		Для каждого йСтр Из йДогиРеальные Цикл
		//			Если НормализацияИмени(йДога.ЛицевойСчет)=НормализацияИмени(йСтр.Номер) Тогда
		//				йДога.Договор=йСтр.Договор;
		//				йДога.абс_СтатусДоговора=йСтр.абс_СтатусДоговора;
		//				Прервать;
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЦикла;
		Запрос.УстановитьПараметр("ТаблДогов_Пром", ДогиЗагрузки);
		Запрос.Текст="ВЫБРАТЬ
		             |	ВТ_ДоговорыКонтрагенты.Контрагент,
		             |	ВТ_ДоговорыКонтрагенты.Договор
		             |ПОМЕСТИТЬ ВТ_Договоры_3этап_Сырая
		             |ИЗ
		             |	&ТаблДогов_Пром КАК ВТ_ДоговорыКонтрагенты
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_ДоговорыКонтрагенты.Контрагент
		             |ПОМЕСТИТЬ ВТ_Контры_3этап_Пром
		             |ИЗ
		             |	ВТ_ДоговорыКонтрагенты КАК ВТ_ДоговорыКонтрагенты
		             |ГДЕ
		             |	ВТ_ДоговорыКонтрагенты.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ДоговорыКонтрагентов.Ссылка КАК Договор,
		             |	ДоговорыКонтрагентов.Владелец КАК Контрагент,
		             |	ДоговорыКонтрагентов.Номер КАК Номер,
		             |	ДоговорыКонтрагентов.абс_СтатусДоговора,
		             |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК Валюта,
		             |	ДоговорыКонтрагентов.абс_ЛицевойСчетБиллинга КАК ЛицевойСчет
		             |ИЗ
		             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		             |ГДЕ
		             |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		             |	И ДоговорыКонтрагентов.Владелец В
		             |			(ВЫБРАТЬ
		             |				ВТ_Контры_Пром.Контрагент
		             |			ИЗ
		             |				ВТ_Контры_Пром)
		             |	И НЕ ДоговорыКонтрагентов.ЭтоГруппа
		             |	И ДоговорыКонтрагентов.Организация = &Организация
		             |	И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		             |			ИЛИ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
		             |	И ДоговорыКонтрагентов.абс_СтатусДоговора <> ЗНАЧЕНИЕ(Перечисление.абсСтатусыДоговоров.Исполнение)
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	Контрагент,
		             |	Номер";
		// Искать договоры не найденные ранее среди активных
		ДогиРеальные=Запрос.Выполнить().Выгрузить();		 
		// Искать договоры не найденные ранее среди активных по номеру договора в загрузке
		Для каждого йДога Из ДогиЗагрузки Цикл
			Если ЗначениеЗаполнено(йДога.Договор) Тогда
				Продолжить;
			КонецЕсли;
			Отбор=Новый Структура("Контрагент",йДога.Контрагент);
			йДогиРеальные=ДогиРеальные.НайтиСтроки(Отбор);
			Если йДогиРеальные.Количество()>0 Тогда
				Для каждого йСтр Из йДогиРеальные Цикл
					Если НормализацияИмени(йДога.НомерДоговора)=НормализацияИмени(йСтр.Номер) И
						 НормализацияИмени(йДога.ЛицевойСчет)=НормализацияИмени(йСтр.ЛицевойСчет) И
						 йДога.Валюта=йСтр.Валюта Тогда
						йДога.Договор=йСтр.Договор;
						йДога.абс_СтатусДоговора=йСтр.абс_СтатусДоговора;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		//// Искать договоры не найденные ранее среди активных по номеру договора в загрузке
		//Для каждого йДога Из ДогиЗагрузки Цикл
		//	Если ЗначениеЗаполнено(йДога.Договор) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	Отбор=Новый Структура("Контрагент",йДога.Контрагент);
		//	йДогиРеальные=ДогиРеальные.НайтиСтроки(Отбор);
		//	Если йДогиРеальные.Количество()>0 Тогда
		//		Для каждого йСтр Из йДогиРеальные Цикл
		//			Если НормализацияИмени(йДога.НомерДоговора)=НормализацияИмени(йСтр.Номер) Тогда
		//				йДога.Договор=йСтр.Договор;
		//				йДога.абс_СтатусДоговора=йСтр.абс_СтатусДоговора;
		//				Прервать;
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЦикла;
		//// Искать договоры не найденные ранее среди активных по лицевому счёту договора в загрузке
		//Для каждого йДога Из ДогиЗагрузки Цикл
		//	Если ЗначениеЗаполнено(йДога.Договор) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	//НомерЗагрузки=НормализацияИмени(йДога.НомерДоговора);
		//	Отбор=Новый Структура("Контрагент",йДога.Контрагент);
		//	йДогиРеальные=ДогиРеальные.НайтиСтроки(Отбор);
		//	Если йДогиРеальные.Количество()>0 Тогда
		//		Для каждого йСтр Из йДогиРеальные Цикл
		//			Если НормализацияИмени(йДога.ЛицевойСчет)=НормализацияИмени(йСтр.Номер) Тогда
		//				йДога.Договор=йСтр.Договор;
		//				йДога.абс_СтатусДоговора=йСтр.абс_СтатусДоговора;
		//				Прервать;
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЦикла;
		Запрос.УстановитьПараметр("ТаблДогов_Старые", ДогиЗагрузки);
		Запрос.Текст="ВЫБРАТЬ
		             |	ВТ_ДоговорыКонтрагенты.ЛицевойСчет,
		             |	ВЫРАЗИТЬ(ВТ_ДоговорыКонтрагенты.НомерДоговора КАК СТРОКА(30)) КАК НомерДоговора,
		             |	ВТ_ДоговорыКонтрагенты.Контрагент,
		             |	ВТ_ДоговорыКонтрагенты.Договор,
		             |	ВТ_ДоговорыКонтрагенты.Валюта
		             |ПОМЕСТИТЬ ВТ_Договоры_4этап_Старые
		             |ИЗ
		             |	&ТаблДогов_Старые КАК ВТ_ДоговорыКонтрагенты
		             |ГДЕ
		             |	ВТ_ДоговорыКонтрагенты.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_ДоговорыКонтрагенты.Контрагент
		             |ПОМЕСТИТЬ ВТ_Договоры_4этап_НеКонтрагенты
		             |ИЗ
		             |	ВТ_Договоры_4этап_Старые КАК ВТ_ДоговорыКонтрагенты
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_ДоговорыКонтрагенты.НомерДоговора,
		             |	ВТ_ДоговорыКонтрагенты.ЛицевойСчет,
		             |	ВТ_ДоговорыКонтрагенты.Валюта
		             |ПОМЕСТИТЬ ВТ_Договоры_4этап_СтарыеДоговоры
		             |ИЗ
		             |	ВТ_Договоры_4этап_Старые КАК ВТ_ДоговорыКонтрагенты
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ДоговорыКонтрагентов.Ссылка КАК Договор,
		             |	ДоговорыКонтрагентов.Владелец КАК Контрагент,
		             |	ДоговорыКонтрагентов.Номер КАК Номер,
		             |	ДоговорыКонтрагентов.абс_ЛицевойСчетБиллинга КАК ЛицевойСчет,
		             |	ДоговорыКонтрагентов.Дата,
		             |	ДоговорыКонтрагентов.Владелец.Код КАК КодКонтрагента,
		             |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК Валюта
		             |ИЗ
		             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		             |ГДЕ
		             |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		             |	И НЕ ДоговорыКонтрагентов.Владелец В
		             |				(ВЫБРАТЬ
		             |					ВТ_Договоры_4этап_НеКонтрагенты.Контрагент
		             |				ИЗ
		             |					ВТ_Договоры_4этап_НеКонтрагенты)
		             |	И (ВЫРАЗИТЬ(ДоговорыКонтрагентов.Номер КАК СТРОКА(30)), ВЫРАЗИТЬ(ДоговорыКонтрагентов.абс_ЛицевойСчетБиллинга КАК СТРОКА(30)), ДоговорыКонтрагентов.ВалютаВзаиморасчетов) В
		             |			(ВЫБРАТЬ
		             |				ВТ_Договоры_4этап_СтарыеДоговоры.НомерДоговора,
		             |				ВТ_Договоры_4этап_СтарыеДоговоры.ЛицевойСчет,
		             |				ВТ_Договоры_4этап_СтарыеДоговоры.Валюта
		             |			ИЗ
		             |				ВТ_Договоры_4этап_СтарыеДоговоры)
		             |	И НЕ ДоговорыКонтрагентов.ЭтоГруппа
		             |	И ДоговорыКонтрагентов.Организация = &Организация
		             |	И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		             |			ИЛИ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
		             |	И ДоговорыКонтрагентов.абс_СтатусДоговора = ЗНАЧЕНИЕ(Перечисление.абсСтатусыДоговоров.Исполнение)
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	Номер,
		             |	ДоговорыКонтрагентов.Дата УБЫВ,
		             |	ДоговорыКонтрагентов.Владелец.Код УБЫВ";
		ДогиРеальные=Запрос.Выполнить().Выгрузить();		 
		// Искать договоры скорее всего до реорганизации контрагента или нормализовать закрытые
		Для каждого йДога Из ДогиЗагрузки Цикл
			Если ЗначениеЗаполнено(йДога.Договор) Тогда
				// если текущий договор в закрытии, то перенесём его в старые, чтобы он правильно закрылся
				Если йДога.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Закрыт ИЛИ
					 йДога.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Закрытие Тогда
					йДога.ДоговорСтарый=йДога.Договор;
					йДога.Договор=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					йДога.КонтрагентСтарый=йДога.Контрагент;
					//йДога.Контрагент=Справочники.Контрагенты.ПустаяСсылка();
					йДога.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.ПустаяСсылка();
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Отбор=Новый Структура("Номер",йДога.НомерДоговора);
				йДогиРеальные=ДогиРеальные.НайтиСтроки(Отбор);
				Если йДогиРеальные.Количество()>0 Тогда
					йДога.ДоговорСтарый=йДогиРеальные[0].Договор;
					йДога.КонтрагентСтарый=йДогиРеальные[0].Контрагент;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Запрос.УстановитьПараметр("ТаблДогов_Итог", ДогиЗагрузки);
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_ДоговорыКонтрагенты.ЛицевойСчет,
		             |	ВТ_ДоговорыКонтрагенты.НомерДоговора,
		             |	ВТ_ДоговорыКонтрагенты.Контрагент,
		             |	ВТ_ДоговорыКонтрагенты.Договор,
		             |	ВТ_ДоговорыКонтрагенты.абс_СтатусДоговора,
		             |	ВТ_ДоговорыКонтрагенты.КодВалюты,
		             |	ВТ_ДоговорыКонтрагенты.ИндексВалюты,
		             |	ВТ_ДоговорыКонтрагенты.Валюта
		             |ПОМЕСТИТЬ ВТ_Договоры_3этап_Пром
		             |ИЗ
		             |	&ТаблДогов_Итог КАК ВТ_ДоговорыКонтрагенты
		             |ГДЕ
		             |	ВТ_ДоговорыКонтрагенты.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_ДоговорыКонтрагенты.ЛицевойСчет,
		             |	ВТ_ДоговорыКонтрагенты.НомерДоговора,
		             |	ВТ_ДоговорыКонтрагенты.КонтрагентСтарый,
		             |	ВТ_ДоговорыКонтрагенты.ДоговорСтарый,
		             |	ВТ_ДоговорыКонтрагенты.КодВалюты,
		             |	ВТ_ДоговорыКонтрагенты.ИндексВалюты,
		             |	ВТ_ДоговорыКонтрагенты.Валюта
		             |ПОМЕСТИТЬ ВТ_Договоры_3этап_Пром_Старый
		             |ИЗ
		             |	&ТаблДогов_Итог КАК ВТ_ДоговорыКонтрагенты
		             |ГДЕ
		             |	ВТ_ДоговорыКонтрагенты.ДоговорСтарый <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_ДоговорыКонтрагенты.КодКонтрагента,
		             |	ВТ_ДоговорыКонтрагенты.КодВалюты,
		             |	ВТ_ДоговорыКонтрагенты.ЛицевойСчет,
		             |	ВТ_ДоговорыКонтрагенты.НомерДоговора,
		             |	ВТ_ДоговорыКонтрагенты.ИндексВалюты,
		             |	ВТ_ДоговорыКонтрагенты.Валюта,
		             |	МИНИМУМ(ВТ_ДоговорыКонтрагенты.ДатаДоговора) КАК ДатаДоговора,
		             |	ВТ_ДоговорыКонтрагенты.Контрагент,
		             |	ВТ_ДоговорыКонтрагенты.ТипКонтрагента,
		             |	ЕСТЬNULL(ВТ_Договоры_3этап_Пром.Договор, ВТ_ДоговорыКонтрагенты.Договор) КАК Договор,
		             |	ЕСТЬNULL(ВТ_Договоры_3этап_Пром.абс_СтатусДоговора, ВТ_ДоговорыКонтрагенты.абс_СтатусДоговора) КАК абс_СтатусДоговора,
		             |	ЕСТЬNULL(ВТ_Договоры_3этап_Пром_Старый.ДоговорСтарый, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорСтарый,
		             |	ЕСТЬNULL(ВТ_Договоры_3этап_Пром_Старый.КонтрагентСтарый, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК КонтрагентСтарый
		             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты_Пред
		             |ИЗ
		             |	ВТ_ДоговорыКонтрагенты КАК ВТ_ДоговорыКонтрагенты
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Договоры_3этап_Пром КАК ВТ_Договоры_3этап_Пром
		             |		ПО ВТ_ДоговорыКонтрагенты.ЛицевойСчет = ВТ_Договоры_3этап_Пром.ЛицевойСчет
		             |			И ВТ_ДоговорыКонтрагенты.НомерДоговора = ВТ_Договоры_3этап_Пром.НомерДоговора
		             |			И ВТ_ДоговорыКонтрагенты.Контрагент = ВТ_Договоры_3этап_Пром.Контрагент
		             |			И ВТ_ДоговорыКонтрагенты.КодВалюты = ВТ_Договоры_3этап_Пром.КодВалюты
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Договоры_3этап_Пром_Старый КАК ВТ_Договоры_3этап_Пром_Старый
		             |		ПО ВТ_ДоговорыКонтрагенты.ЛицевойСчет = ВТ_Договоры_3этап_Пром_Старый.ЛицевойСчет
		             |			И ВТ_ДоговорыКонтрагенты.НомерДоговора = ВТ_Договоры_3этап_Пром_Старый.НомерДоговора
		             |			И ВТ_ДоговорыКонтрагенты.КодВалюты = ВТ_Договоры_3этап_Пром_Старый.КодВалюты
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВТ_ДоговорыКонтрагенты.КодКонтрагента,
		             |	ВТ_ДоговорыКонтрагенты.КодВалюты,
		             |	ВТ_ДоговорыКонтрагенты.ЛицевойСчет,
		             |	ВТ_ДоговорыКонтрагенты.НомерДоговора,
		             |	ВТ_ДоговорыКонтрагенты.ИндексВалюты,
		             |	ВТ_ДоговорыКонтрагенты.Валюта,
		             |	ВТ_ДоговорыКонтрагенты.Контрагент,
		             |	ВТ_ДоговорыКонтрагенты.ТипКонтрагента,
		             |	ЕСТЬNULL(ВТ_Договоры_3этап_Пром.Договор, ВТ_ДоговорыКонтрагенты.Договор),
		             |	ЕСТЬNULL(ВТ_Договоры_3этап_Пром.абс_СтатусДоговора, ВТ_ДоговорыКонтрагенты.абс_СтатусДоговора),
		             |	ЕСТЬNULL(ВТ_Договоры_3этап_Пром_Старый.ДоговорСтарый, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)),
		             |	ЕСТЬNULL(ВТ_Договоры_3этап_Пром_Старый.КонтрагентСтарый, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_ДоговорыКонтрагенты.Контрагент,
		             |	ВТ_ДоговорыКонтрагенты.Договор
		             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты_ПослеМиграции
		             |ИЗ
		             |	ВТ_ДоговорыКонтрагенты_Пред КАК ВТ_ДоговорыКонтрагенты
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ДоговорыКонтрагентов.Ссылка КАК ДоговорДоМиграции,
		             |	ДоговорыКонтрагентов.Владелец КАК Контрагент,
		             |	ДоговорыКонтрагентов.ДоговорПослеМиграции КАК Договор
		             |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагенты_ДоМиграции
		             |ИЗ
		             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		             |ГДЕ
		             |	ЛОЖЬ
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_ДоговорыКонтрагенты.КодКонтрагента,
		             |	ВТ_ДоговорыКонтрагенты.ЛицевойСчет,
		             |	ВТ_ДоговорыКонтрагенты.НомерДоговора,
		             |	ВТ_ДоговорыКонтрагенты.ДатаДоговора,
		             |	ВТ_ДоговорыКонтрагенты.Контрагент,
		             |	ВТ_ДоговорыКонтрагенты.КодВалюты,
		             |	ВТ_ДоговорыКонтрагенты.ИндексВалюты,
		             |	ВТ_ДоговорыКонтрагенты.Валюта,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДоговорыКонтрагенты.Контрагент ЕСТЬ NULL 
		             |				ИЛИ ВТ_ДоговорыКонтрагенты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.ПустаяСсылка)
		             |		ИНАЧЕ ВЫРАЗИТЬ(ВТ_ДоговорыКонтрагенты.Контрагент КАК Справочник.Контрагенты).абс_СтатусКонтрагента
		             |	КОНЕЦ КАК абс_СтатусКонтрагента,
		             |	ВТ_ДоговорыКонтрагенты.ТипКонтрагента,
		             |	ВТ_ДоговорыКонтрагенты.Договор,
		             |	ВТ_ДоговорыКонтрагенты.абс_СтатусДоговора,
		             |	ЕСТЬNULL(ВТ_Договоры_ДоМиграции.ДоговорДоМиграции, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорДоМиграции,
		             |	ВТ_ДоговорыКонтрагенты.ДоговорСтарый,
		             |	ВТ_ДоговорыКонтрагенты.КонтрагентСтарый
		             |ИЗ
		             |	ВТ_ДоговорыКонтрагенты_Пред КАК ВТ_ДоговорыКонтрагенты
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговорыКонтрагенты_ДоМиграции КАК ВТ_Договоры_ДоМиграции
		             |		ПО ВТ_ДоговорыКонтрагенты.Договор = ВТ_Договоры_ДоМиграции.Договор
		             |			И ВТ_ДоговорыКонтрагенты.Контрагент = ВТ_Договоры_ДоМиграции.Контрагент";
		//ПоказатьСостояние("Готовиться таблица Контрагенты-Договоры...");
		Объект.КонтрагентыДоговоры.Загрузить(Запрос.Выполнить().Выгрузить());
	//	Отказ=Ложь;
	//	Возврат;
	//КонецЕсли;
	//Если ФлагЭтапа = 3 Тогда
		// Грузим УслугиНоменклатуры
		Запрос.УстановитьПараметр("ПоискТолькоПоКодуУслуги",Объект.МестонахождениеБиллинга.ТипБиллинга.ПоискНоменклатурыТолькоПоКодуУслуги);
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВТ_Сессия.КодУслуги КАК КодУслуги,
		             |	ВТ_Сессия.Содержание КАК УслугаИзБиллинга,
		             |	ВТ_Сессия.УслугаПоисковая КАК УслугаПоисковая,
		             |	ВТ_Сессия.КодЦФО КАК КодЦФО,
		             |	ВТ_Сессия.ЦФО КАК ЦФО,
		             |	ВТ_Сессия.НГ_ПоКатегории КАК НГ
		             |ПОМЕСТИТЬ ВТ_Услуги_Пром_ТекущиеУслуги
		             |ИЗ
		             |	ВТ_Сессия КАК ВТ_Сессия
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВЫРАЗИТЬ(ВТ_Сессия.КодУслуги КАК СТРОКА(250)) КАК КодУслуги
		             |ПОМЕСТИТЬ ВТ_Услуги_Пром_ТекущиеУслуги_ПоКоду
		             |ИЗ
		             |	ВТ_Услуги_Пром_ТекущиеУслуги КАК ВТ_Сессия
		             |ГДЕ
		             |	ВТ_Сессия.УслугаИзБиллинга = """" ИЛИ &ПоискТолькоПоКодуУслуги
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             |	ВЫРАЗИТЬ(абс_СоответствиеБиллинговыхУслугНоменклатуре.КодУслугиБиллинга КАК СТРОКА(250)) КАК КодУслугиБиллинга,
		             |	МИНИМУМ(абс_СоответствиеБиллинговыхУслугНоменклатуре.Номенклатура) КАК Номенклатура
		             |ПОМЕСТИТЬ ВТ_Номенклатура_По_Соответствию_Кода_Коду
		             |ИЗ
		             |	РегистрСведений.абс_СоответствиеБиллинговыхУслугНоменклатуре КАК абс_СоответствиеБиллинговыхУслугНоменклатуре
		             |ГДЕ
		             |	абс_СоответствиеБиллинговыхУслугНоменклатуре.Организация = &Организация
		             |	И абс_СоответствиеБиллинговыхУслугНоменклатуре.Номенклатура.абс_СтатусНоменклатуры = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)
		             |	И ВЫРАЗИТЬ(абс_СоответствиеБиллинговыхУслугНоменклатуре.КодУслугиБиллинга КАК СТРОКА(250)) В
		             |			(ВЫБРАТЬ
		             |				ВТ_Услуги_Пром_ТекущиеУслуги_ПоКоду.КодУслуги
		             |			ИЗ
		             |				ВТ_Услуги_Пром_ТекущиеУслуги_ПоКоду)
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВЫРАЗИТЬ(абс_СоответствиеБиллинговыхУслугНоменклатуре.КодУслугиБиллинга КАК СТРОКА(250))
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             |	ВЫРАЗИТЬ(абс_СоответствиеБиллинговыхУслугНоменклатуре.НаименованиеУслуги КАК СТРОКА(250)) КАК КодУслугиБиллинга,
		             |	МИНИМУМ(абс_СоответствиеБиллинговыхУслугНоменклатуре.Номенклатура) КАК Номенклатура
		             |ПОМЕСТИТЬ ВТ_Номенклатура_По_Соответствию_Кода_Имени
		             |ИЗ
		             |	РегистрСведений.абс_СоответствиеБиллинговыхУслугНоменклатуре КАК абс_СоответствиеБиллинговыхУслугНоменклатуре
		             |ГДЕ
		             |	абс_СоответствиеБиллинговыхУслугНоменклатуре.Организация = &Организация
		             |	И абс_СоответствиеБиллинговыхУслугНоменклатуре.Номенклатура.абс_СтатусНоменклатуры = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)
		             |	И ВЫРАЗИТЬ(абс_СоответствиеБиллинговыхУслугНоменклатуре.НаименованиеУслуги КАК СТРОКА(250)) В
		             |			(ВЫБРАТЬ
		             |				ВТ_Услуги_Пром_ТекущиеУслуги_ПоКоду.КодУслуги
		             |			ИЗ
		             |				ВТ_Услуги_Пром_ТекущиеУслуги_ПоКоду)
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВЫРАЗИТЬ(абс_СоответствиеБиллинговыхУслугНоменклатуре.НаименованиеУслуги КАК СТРОКА(250))
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             |	МАКСИМУМ(Номенклатура.Ссылка) КАК Номенклатура,
		             |	ВЫРАЗИТЬ(Номенклатура.BILLINGGLCODE КАК СТРОКА(250)) КАК КодУслугиБиллинга
		             |ПОМЕСТИТЬ ВТ_Номенклатура_По_БиллингКоду_В_Номенклатурах
		             |ИЗ
		             |	Справочник.Номенклатура КАК Номенклатура
		             |ГДЕ
		             |	Номенклатура.абс_СтатусНоменклатуры = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)
		             |	И ВЫРАЗИТЬ(Номенклатура.BILLINGGLCODE КАК СТРОКА(250)) В
		             |			(ВЫБРАТЬ
		             |				ВТ_Услуги_Пром_ТекущиеУслуги_ПоКоду.КодУслуги
		             |			ИЗ
		             |				ВТ_Услуги_Пром_ТекущиеУслуги_ПоКоду)
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВЫРАЗИТЬ(Номенклатура.BILLINGGLCODE КАК СТРОКА(250))
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВТ_Сессия.КодУслуги КАК КодУслуги,
		             |	ВТ_Сессия.УслугаИзБиллинга КАК УслугаИзБиллинга,
		             |	ВТ_Сессия.УслугаПоисковая КАК УслугаПоисковая,
		             |	ВЫБОР
		             |		КОГДА ЕСТЬNULL(СоответствияПоКоду.Номенклатура, ЕСТЬNULL(СоответствияПоИмени.Номенклатура, ЕСТЬNULL(Номенклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)))) = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		             |			ТОГДА ВТ_Сессия.УслугаИзБиллинга
		             |		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(СоответствияПоКоду.Номенклатура, ЕСТЬNULL(СоответствияПоИмени.Номенклатура, ЕСТЬNULL(Номенклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)))) КАК Справочник.Номенклатура).Наименование
		             |	КОНЕЦ КАК Содержание,
		             |	ЕСТЬNULL(СоответствияПоКоду.Номенклатура, ЕСТЬNULL(СоответствияПоИмени.Номенклатура, ЕСТЬNULL(Номенклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)))) КАК Номенклатура,
		             |	ВТ_Сессия.КодЦФО КАК КодЦФО,
		             |	ВТ_Сессия.ЦФО КАК ЦФО,
					 |	ВТ_Сессия.НГ КАК НГ
		             |ПОМЕСТИТЬ ВТ_Услуги_Пром
		             |ИЗ
		             |	ВТ_Услуги_Пром_ТекущиеУслуги КАК ВТ_Сессия
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура_По_Соответствию_Кода_Коду КАК СоответствияПоКоду
		             |		ПО ((ВЫРАЗИТЬ(ВТ_Сессия.КодУслуги КАК СТРОКА(250))) = СоответствияПоКоду.КодУслугиБиллинга)
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура_По_Соответствию_Кода_Имени КАК СоответствияПоИмени
		             |		ПО ((ВЫРАЗИТЬ(ВТ_Сессия.КодУслуги КАК СТРОКА(250))) = СоответствияПоИмени.КодУслугиБиллинга)
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура_По_БиллингКоду_В_Номенклатурах КАК Номенклатуры
		             |		ПО ((ВЫРАЗИТЬ(ВТ_Сессия.КодУслуги КАК СТРОКА(250))) = Номенклатуры.КодУслугиБиллинга)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	абс_СоответствиеБиллинговыхУслугНоменклатуре.НаименованиеУслуги КАК НаименованиеУслуги,
		             |	абс_СоответствиеБиллинговыхУслугНоменклатуре.Номенклатура,
		             |	1 КАК ДлинаСтроки,
		             |	абс_СоответствиеБиллинговыхУслугНоменклатуре.Номенклатура.абс_СтатусНоменклатуры = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование) КАК Статус,
		             |	абс_СоответствиеБиллинговыхУслугНоменклатуре.КодУслугиБиллинга
		             |ИЗ
		             |	РегистрСведений.абс_СоответствиеБиллинговыхУслугНоменклатуре КАК абс_СоответствиеБиллинговыхУслугНоменклатуре
		             |ГДЕ
		             |	абс_СоответствиеБиллинговыхУслугНоменклатуре.Организация = &Организация";
		СУН=Запрос.Выполнить().Выгрузить();
		//Запрос.Текст="ВЫРАЗИТЬ * ИЗ ВТ_Услуги_Пром";
		//Табл=Запрос.Выполнить().Выгрузить();
		СУН.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
		СУН.Колонки.Добавить("УслугаПоисковая",Новый ОписаниеТипов("Строка"));
		Для каждого йСУН из СУН Цикл
			йСУН.УслугаПоисковая=НормализацияУслуги(йСУН.НаименованиеУслуги);
			йСУН.ДлинаСтроки=СтрДлина(йСУН.УслугаПоисковая);
		КонецЦикла;
		СУН.Сортировать("УслугаПоисковая УБЫВ,ДлинаСтроки УБЫВ");
		йй=0;
		Для каждого йСУН из СУН Цикл
			йй=йй+1;
			йСУН.НомерСтроки=йй;
		КонецЦикла;
		Запрос.УстановитьПараметр("СУН",СУН);
		Запрос.Текст="ВЫБРАТЬ
		             |	ВЫРАЗИТЬ(ВТ_.НаименованиеУслуги КАК СТРОКА(250)) КАК НаименованиеУслуги,
		             |	ВТ_.КодУслугиБиллинга КАК КодУслугиБиллинга,
		             |	ВЫРАЗИТЬ(ВТ_.УслугаПоисковая КАК СТРОКА(250)) КАК УслугаПоисковая,
		             |	ВТ_.Номенклатура КАК Номенклатура,
		             |	ВТ_.ДлинаСтроки КАК ДлинаСтроки,
		             |	ВТ_.НомерСтроки КАК Приоритет
		             |ПОМЕСТИТЬ ВТ_СУН_Сырая
		             |ИЗ
		             |	&СУН КАК ВТ_
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	НаименованиеУслуги,
		             |	Приоритет
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_СУН.УслугаПоисковая КАК УслугаПоисковая,
		             |	ВТ_СУН.ДлинаСтроки КАК ДлинаСтроки,
		             |	МИНИМУМ(ВТ_СУН.Приоритет) КАК Приоритет,
		             |	ВТ_СУН.КодУслугиБиллинга КАК КодУслугиБиллинга
		             |ПОМЕСТИТЬ ВТ_СУН_Сжато
		             |ИЗ
		             |	ВТ_СУН_Сырая КАК ВТ_СУН
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВТ_СУН.УслугаПоисковая,
		             |	ВТ_СУН.ДлинаСтроки,
		             |	ВТ_СУН.КодУслугиБиллинга
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	УслугаПоисковая,
		             |	КодУслугиБиллинга
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_СУН_Сырая.НаименованиеУслуги КАК НаименованиеУслуги,
		             |	ВТ_СУН.УслугаПоисковая КАК УслугаПоисковая,
		             |	ВТ_СУН.ДлинаСтроки КАК ДлинаСтроки,
		             |	ВТ_СУН_Сырая.Номенклатура,
		             |	ВТ_СУН.КодУслугиБиллинга КАК КодУслугиБиллинга
		             |ПОМЕСТИТЬ ВТ_СУН
		             |ИЗ
		             |	ВТ_СУН_Сжато КАК ВТ_СУН
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СУН_Сырая КАК ВТ_СУН_Сырая
		             |		ПО ВТ_СУН.УслугаПоисковая = ВТ_СУН_Сырая.УслугаПоисковая
		             |			И ВТ_СУН.ДлинаСтроки = ВТ_СУН_Сырая.ДлинаСтроки
		             |			И ВТ_СУН.Приоритет = ВТ_СУН_Сырая.Приоритет
		             |			И ВТ_СУН.КодУслугиБиллинга = ВТ_СУН_Сырая.КодУслугиБиллинга
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВТ_СУН_Сырая.НаименованиеУслуги,
		             |	ВТ_СУН.УслугаПоисковая,
		             |	ВТ_СУН.ДлинаСтроки,
		             |	ВТ_СУН_Сырая.Номенклатура,
		             |	ВТ_СУН.КодУслугиБиллинга
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	УслугаПоисковая,
		             |	КодУслугиБиллинга
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_СУН.УслугаПоисковая КАК УслугаПоисковая,
		             |	МИНИМУМ(ВТ_СУН.КодУслугиБиллинга) КАК КодУслугиБиллинга
		             |ПОМЕСТИТЬ ВТ_СУН_СМинимальнымКодом
		             |ИЗ
		             |	ВТ_СУН КАК ВТ_СУН
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВТ_СУН.УслугаПоисковая
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	УслугаПоисковая
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_СУН_СМинимальнымКодом.УслугаПоисковая КАК УслугаПоисковая,
		             |	ВТ_СУН.НаименованиеУслуги,
		             |	ВТ_СУН.ДлинаСтроки,
		             |	ВТ_СУН.Номенклатура
		             |ПОМЕСТИТЬ ВТ_СУН_БезКода
		             |ИЗ
		             |	ВТ_СУН_СМинимальнымКодом КАК ВТ_СУН_СМинимальнымКодом
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СУН КАК ВТ_СУН
		             |		ПО ВТ_СУН_СМинимальнымКодом.УслугаПоисковая = ВТ_СУН.УслугаПоисковая
		             |			И ВТ_СУН_СМинимальнымКодом.КодУслугиБиллинга = ВТ_СУН.КодУслугиБиллинга
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	УслугаПоисковая
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_Услуги.КодУслуги КАК КодУслуги,
		             |	ЕСТЬNULL(ВТ_СУН.Номенклатура, ЕСТЬNULL(ВТ_СУН_БезКода.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))) КАК Номенклатура,
		             |	ЕСТЬNULL(ВТ_СУН.НаименованиеУслуги, ЕСТЬNULL(ВТ_СУН_БезКода.НаименованиеУслуги, ВТ_Услуги.Содержание)) КАК Услуга,
		             |	ВТ_Услуги.Содержание КАК Содержание,
		             |	ЕСТЬNULL(ВТ_СУН.ДлинаСтроки, ВТ_СУН_БезКода.ДлинаСтроки) КАК ДлинаСтроки,
		             |	ВТ_Услуги.ЦФО
		             |ПОМЕСТИТЬ ВТ_Услуги_Сырая
		             |ИЗ
		             |	ВТ_Услуги_Пром КАК ВТ_Услуги
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СУН КАК ВТ_СУН
		             |		ПО ((ВЫРАЗИТЬ(ПОДСТРОКА(ВТ_Услуги.УслугаПоисковая, 1, ВТ_СУН.ДлинаСтроки) КАК СТРОКА(250))) = (ВЫРАЗИТЬ(ВТ_СУН.УслугаПоисковая КАК СТРОКА(250))))
		             |			И ((ВЫРАЗИТЬ(ВТ_Услуги.КодУслуги КАК СТРОКА(30))) = (ВЫРАЗИТЬ(ВТ_СУН.КодУслугиБиллинга КАК СТРОКА(30))))
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СУН_БезКода КАК ВТ_СУН_БезКода
		             |		ПО ((ВЫРАЗИТЬ(ПОДСТРОКА(ВТ_Услуги.УслугаПоисковая, 1, ВТ_СУН_БезКода.ДлинаСтроки) КАК СТРОКА(250))) = (ВЫРАЗИТЬ(ВТ_СУН_БезКода.УслугаПоисковая КАК СТРОКА(250))))
		             |ГДЕ
		             |	ВТ_Услуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_Услуги_Сырая.КодУслуги,
		             |	ВТ_Услуги_Сырая.Содержание,
		             |	ВТ_Услуги_Сырая.ЦФО,
		             |	МАКСИМУМ(ВТ_Услуги_Сырая.ДлинаСтроки) КАК ДлинаСтрока
		             |ПОМЕСТИТЬ ВТ_УслугиСДлиной
		             |ИЗ
		             |	ВТ_Услуги_Сырая КАК ВТ_Услуги_Сырая
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВТ_Услуги_Сырая.Содержание,
		             |	ВТ_Услуги_Сырая.КодУслуги,
		             |	ВТ_Услуги_Сырая.ЦФО
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВТ_УслугиСДлиной.Содержание КАК Содержание,
		             |	ВТ_УслугиСДлиной.КодУслуги КАК КодУслуги,
		             |	ВТ_Услуги_Сырая.Номенклатура,
		             |	ЕСТЬNULL(ВТ_Услуги_Сырая.Услуга, """") КАК Услуга,
		             |	ВТ_УслугиСДлиной.ЦФО
		             |ПОМЕСТИТЬ ВТ_УслугиНоменклатуры_Пром
		             |ИЗ
		             |	ВТ_УслугиСДлиной КАК ВТ_УслугиСДлиной
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Услуги_Сырая КАК ВТ_Услуги_Сырая
		             |		ПО ВТ_УслугиСДлиной.КодУслуги = ВТ_Услуги_Сырая.КодУслуги
		             |			И ВТ_УслугиСДлиной.Содержание = ВТ_Услуги_Сырая.Содержание
		             |			И ВТ_УслугиСДлиной.ДлинаСтрока = ВТ_Услуги_Сырая.ДлинаСтроки
		             |			И ВТ_УслугиСДлиной.ЦФО = ВТ_Услуги_Сырая.ЦФО
		             |ГДЕ
		             |	НЕ ВТ_Услуги_Сырая.КодУслуги ЕСТЬ NULL 
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_Услуги.КодУслуги КАК КодУслуги,
		             |	ВЫБОР
		             |		КОГДА ВТ_Услуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		             |			ТОГДА ВТ_СУН.Номенклатура
		             |		ИНАЧЕ ВТ_Услуги.Номенклатура
		             |	КОНЕЦ КАК Номенклатура,
		             |	ЕСТЬNULL(ВТ_СУН.Услуга, ВТ_Услуги.Содержание) КАК Услуга,
		             |	ВТ_Услуги.Содержание КАК Содержание,
		             |	ВТ_Услуги.УслугаИзБиллинга КАК УслугаИзБиллинга,
		             |	ВТ_Услуги.КодЦФО,
		             |	ВТ_Услуги.ЦФО,
		             |	ВТ_Услуги.НГ
		             |ПОМЕСТИТЬ ВТ_УслугиНоменклатуры_Сырая
		             |ИЗ
		             |	ВТ_Услуги_Пром КАК ВТ_Услуги
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УслугиНоменклатуры_Пром КАК ВТ_СУН
		             |		ПО ВТ_Услуги.Содержание = ВТ_СУН.Содержание
		             |			И ВТ_Услуги.КодУслуги = ВТ_СУН.КодУслуги
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВТ_УслугиНоменклатуры_Сырая.Номенклатура,
		             |	ВТ_УслугиНоменклатуры_Сырая.ЦФО,
		             |	ВТ_УслугиНоменклатуры_Сырая.КодЦФО
		             |ПОМЕСТИТЬ ВТ_Номенклатуры
		             |ИЗ
		             |	ВТ_УслугиНоменклатуры_Сырая КАК ВТ_УслугиНоменклатуры_Сырая
		             |ГДЕ
		             |	ВТ_УслугиНоменклатуры_Сырая.НГ ЕСТЬ NULL 
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_УслугиНоменклатуры_Сырая.Содержание,
		             |	ВТ_УслугиНоменклатуры_Сырая.КодУслуги,
		             |	ВТ_УслугиНоменклатуры_Сырая.Номенклатура,
		             |	ВТ_УслугиНоменклатуры_Сырая.Услуга,
		             |	ВТ_УслугиНоменклатуры_Сырая.УслугаИзБиллинга
		             |ИЗ
		             |	ВТ_УслугиНоменклатуры_Сырая КАК ВТ_УслугиНоменклатуры_Сырая";
		Объект.УслугиНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
		//Запрос.Текст="	
		//             |ВЫБРАТЬ
		//             |	ВТ_Сессия.КодУслуги,
		//             |	ВТ_Сессия.УслугаИзБиллинга,
		//             |	ВТ_Сессия.УслугаПоисковая,
		//             |	ВТ_Сессия.Содержание,
		//             |	ВТ_Сессия.Номенклатура,
		//             |	ВТ_Сессия.ТипКонтрагента
		//             |ИЗ
		//             |	ВТ_Услуги_Пром КАК ВТ_Сессия
		//			 |";
		//Запрос.Текст="ВЫБРАТЬ * ИЗ ВТ_Номенклатуры";
		//Табл=Запрос.Выполнить().Выгрузить();
	//	Отказ=Ложь;
	//	Возврат;
	//КонецЕсли;
	//Если ФлагЭтапа = 4 Тогда
		// Грузим Аналитики
		Запрос.Текст="ВЫБРАТЬ
		             |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Номенклатура,
		             |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.ЦФО КАК ЦФО,
		             |	МИНИМУМ(абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа
		             |ПОМЕСТИТЬ ВТ_Соответствие_Аналитики
		             |ИЗ
		             |	РегистрСведений.абс_СоответствиеНоменклатурыБюджетнымАналитикам КАК абс_СоответствиеНоменклатурыБюджетнымАналитикам
		             |ГДЕ
		             |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Организация = &Организация
		             |	И абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа.абс_СтатусНоменклатурнойГруппы = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Номенклатура,
		             |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.ЦФО
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	МИНИМУМ(абс_СоответствиеНоменклатурыБюджетнымАналитикам.ЦФО) КАК ЦФО,
		             |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Номенклатура
		             |ПОМЕСТИТЬ ВТ_Соответствие_Аналитики_ПоУмолчанию_Приоритет
		             |ИЗ
		             |	ВТ_Соответствие_Аналитики КАК абс_СоответствиеНоменклатурыБюджетнымАналитикам
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Номенклатура
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Номенклатура,
		             |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа
		             |ПОМЕСТИТЬ ВТ_Соответствие_Аналитики_ПоУмолчанию
		             |ИЗ
		             |	ВТ_Соответствие_Аналитики КАК абс_СоответствиеНоменклатурыБюджетнымАналитикам
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Соответствие_Аналитики_ПоУмолчанию_Приоритет КАК ВТ_Соответствие_Аналитики_ПоУмолчанию_Приоритет
		             |		ПО абс_СоответствиеНоменклатурыБюджетнымАналитикам.ЦФО = ВТ_Соответствие_Аналитики_ПоУмолчанию_Приоритет.ЦФО
		             |			И абс_СоответствиеНоменклатурыБюджетнымАналитикам.Номенклатура = ВТ_Соответствие_Аналитики_ПоУмолчанию_Приоритет.Номенклатура
		             |ГДЕ
		             |	НЕ ВТ_Соответствие_Аналитики_ПоУмолчанию_Приоритет.Номенклатура ЕСТЬ NULL 
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВТ_Номенклатуры.Номенклатура КАК Номенклатура,
		             |	ВТ_Номенклатуры.ЦФО КАК ЦФО,
		             |	ЕСТЬNULL(ВТ_Аналитика.НоменклатурнаяГруппа, ВТ_Аналитика_ПоУмолчанию.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа
		             |ИЗ
		             |	ВТ_Номенклатуры КАК ВТ_Номенклатуры
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Соответствие_Аналитики КАК ВТ_Аналитика
		             |		ПО ВТ_Номенклатуры.Номенклатура = ВТ_Аналитика.Номенклатура
		             |			И ВТ_Номенклатуры.ЦФО = ВТ_Аналитика.ЦФО
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Соответствие_Аналитики_ПоУмолчанию КАК ВТ_Аналитика_ПоУмолчанию
		             |		ПО ВТ_Номенклатуры.Номенклатура = ВТ_Аналитика_ПоУмолчанию.Номенклатура";
		//НеКонтры=Новый Массив;
		//НеКонтры.Добавить(Справочники.абс_ТипыКонтрагентов.ЮридическоеЛицоНерезидентНеоператор);
		//НеКонтры.Добавить(Справочники.абс_ТипыКонтрагентов.ИностранныеОрганизации);
		//НеКонтры.Добавить(Справочники.абс_ТипыКонтрагентов.ЮридическоеЛицоНерезидентОператор);
		//НеКонтры.Добавить(Справочники.абс_ТипыКонтрагентов.ФизическиеЛица);
		//Запрос.УстановитьПараметр("НеКонтры",НеКонтры);
		Объект.Аналитики.Загрузить(Запрос.Выполнить().Выгрузить());
		//Запрос.Текст="ВЫБРАТЬ * ИЗ ВТ_Соответствие_Аналитики";
		//Табл=Запрос.Выполнить().Выгрузить();
	//	Отказ=Ложь;
	//	Возврат;
	//КонецЕсли;
	//Если ФлагЭтапа = 7 Тогда
		// Грузим СтавкиНДС
		Запрос.УстановитьПараметр("ВалютаПоУмолчанию",Константы.ВалютаРегламентированногоУчета.Получить());
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВТ_Сессия.СтрокаСтавкиНДС КАК СтрокаСтавкиНДС,
		             |	ВТ_Валюты.ИндексВалюты КАК ИндексВалюты,
		             |	ВТ_Валюты.Валюта КАК Валюта,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.СтрокаСтавкиНДС = """"
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		             |		КОГДА ВТ_Сессия.СтрокаСтавкиНДС = ""18""
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		             |		КОГДА ВТ_Сессия.СтрокаСтавкиНДС = ""18/118""
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		             |		КОГДА ВТ_Сессия.СтрокаСтавкиНДС = ""10""
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		             |		КОГДА ВТ_Сессия.СтрокаСтавкиНДС = ""10/110""
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		             |		КОГДА ВТ_Сессия.СтрокаСтавкиНДС = ""20""
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		             |		КОГДА ВТ_Сессия.СтрокаСтавкиНДС = ""20/120""
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
		             |		КОГДА ВТ_Сессия.СтрокаСтавкиНДС = ""0""
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		             |		КОГДА ВТ_Сессия.СтрокаСтавкиНДС = ""4""
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС4)
		             |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		             |	КОНЕЦ КАК СтавкаНДС
		             |ИЗ
		             |	ВТ_Сессия КАК ВТ_Сессия
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Валюты КАК ВТ_Валюты
		             |		ПО (ВТ_Валюты.КодВалюты = ВТ_Сессия.КодВалюты)
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	СтавкаНДС";
		Объект.СтавкиНДС.Загрузить(Запрос.Выполнить().Выгрузить());
	//	Отказ=Ложь;
	//	Возврат;
	//КонецЕсли;
	//Если ФлагЭтапа = 8 Тогда
	// Грузим Документы
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	МАКСИМУМ(ВЫБОР
		             |			КОГДА ВТ_Сессия.НомерСчета = """"
		             |				ТОГДА ВТ_Сессия.НомерДокумента
		             |			ИНАЧЕ ВТ_Сессия.НомерСчета
		             |		КОНЕЦ) КАК НомерСчета,
		             |	ВТ_Сессия.НомерДокумента КАК НомерДокумента
		             |ПОМЕСТИТЬ ВТ_НумерацияСчетовНаОплату
		             |ИЗ
		             |	ВТ_Сессия КАК ВТ_Сессия
		             |ГДЕ
		             |	&ИспользоватьНумерациюСчетовНаОплату
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВТ_Сессия.НомерДокумента";
		Запрос.УстановитьПараметр("ИспользоватьНумерациюСчетовНаОплату",Объект.МестонахождениеБиллинга.ИспользоватьНумерациюСчетовНаОплату);
		Запрос.Выполнить();
		Запрос.УстановитьПараметр("ОДоговоры",Объект.КонтрагентыДоговоры.Выгрузить());
		Запрос.УстановитьПараметр("БанковскийСчет",Объект.МестонахождениеБиллинга.БанковскийСчет);
		Запрос.УстановитьПараметр("ОСтавкиНДС",Объект.СтавкиНДС.Выгрузить());
		Запрос.Текст="ВЫБРАТЬ
		             |	ВТ_.КодКонтрагента КАК КодКонтрагента,
		             |	ВТ_.ЛицевойСчет КАК ЛицевойСчет,
		             |	ВТ_.НомерДоговора КАК НомерДоговора,
		             |	ВТ_.Контрагент КАК Контрагент,
		             |	ВТ_.ТипКонтрагента КАК ТипКонтрагента,
		             |	ВТ_.Договор КАК Договор,
		             |	ВТ_.НомерСтроки КАК ИндексДоговора
		             |ПОМЕСТИТЬ ВТ_Договоры
		             |ИЗ
		             |	&ОДоговоры КАК ВТ_
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_.СтрокаСтавкиНДС КАК СтрокаСтавкиНДС,
		             |	ВТ_.СтавкаНДС КАК СтавкаНДС,
		             |	ВТ_.НомерСтроки КАК ИндексСтавкиНДС,
		             |	ВТ_.ИндексВалюты КАК ИндексВалюты,
		             |	ВТ_.Валюта КАК Валюта
		             |ПОМЕСТИТЬ ВТ_СтавкиНДС_Пром
		             |ИЗ
		             |	&ОСтавкиНДС КАК ВТ_
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_.СтрокаСтавкиНДС КАК СтрокаСтавкиНДС,
		             |	ВТ_.СтавкаНДС КАК СтавкаНДС,
		             |	ВТ_.ИндексСтавкиНДС,
		             |	ВТ_.ИндексВалюты КАК ИндексВалюты,
		             |	ВТ_.Валюта КАК Валюта,
		             |	ВТ_Валюты.КодВалюты КАК КодВалюты,
		             |	ВЫБОР
		             |		КОГДА ВТ_.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		             |			ТОГДА ИСТИНА
		             |		ИНАЧЕ ЛОЖЬ
		             |	КОНЕЦ КАК СчетФактураНеТребуется
		             |ПОМЕСТИТЬ ВТ_СтавкиНДС
		             |ИЗ
		             |	ВТ_СтавкиНДС_Пром КАК ВТ_
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Валюты КАК ВТ_Валюты
		             |		ПО (ВТ_Валюты.ИндексВалюты = ВТ_.ИндексВалюты)
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	СтрокаСтавкиНДС,
		             |	КодВалюты
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             |	ВЫРАЗИТЬ(ВЫБОР
		             |			КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""D""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""F""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""H""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""J""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""L""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""N""
		             |					ИЛИ ВТ_Сессия.НомерДокументаОснования <> """"
		             |				ТОГДА """"
		             |			ИНАЧЕ ЕСТЬNULL(ВТ_СчетаНаОплату.НомерСчета, ВТ_Сессия.НомерДокумента)
		             |		КОНЕЦ КАК СТРОКА(30)) КАК НомерСчета,
		             |	ВЫБОР
		             |		КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""D""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""F""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""H""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""J""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""L""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""N""
		             |			ТОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1)
		             |		ИНАЧЕ """"
		             |	КОНЕЦ КАК СуффиксНомера,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.ТипКорректировки = 2
		             |			ТОГДА 0
		             |		КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""D""
		             |			ТОГДА 1
		             |		КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""F""
		             |			ТОГДА 2
		             |		КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""H""
		             |			ТОГДА 3
		             |		КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""J""
		             |			ТОГДА 4
		             |		КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""L""
		             |			ТОГДА 5
		             |		КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""N""
		             |			ТОГДА 6
		             |		КОГДА ВТ_Сессия.НомерДокументаОснования <> """"
		             |			ТОГДА 1
		             |		ИНАЧЕ 0
		             |	КОНЕЦ КАК Исправление,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.ТипКорректировки = 2
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		             |		КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""D""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""F""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""H""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""J""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""L""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""N""
		             |				ИЛИ ВТ_Сессия.НомерДокументаОснования <> """"
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
		             |		ИНАЧЕ НЕОПРЕДЕЛЕНО
		             |	КОНЕЦ КАК ВидОперацииКорректировки,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.ТипКорректировки = 2
		             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
		             |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаРеализацию)
		             |	КОНЕЦ КАК ВидСчетаФактуры,
		             |	ВЫРАЗИТЬ(ВЫБОР
		             |			КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""D""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""F""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""H""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""J""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""L""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""N""
		             |				ТОГДА ВЫБОР
		             |						КОГДА ВТ_Сессия.ТипКорректировки = 0
		             |								ИЛИ ВТ_Сессия.НомерДокументаОснования = """"
		             |							ТОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, 1, ВТ_Сессия.ДлинаНомера - 1)
		             |						ИНАЧЕ ВТ_Сессия.НомерДокументаОснования
		             |					КОНЕЦ
		             |			ИНАЧЕ ВТ_Сессия.НомерДокумента
		             |		КОНЕЦ КАК СТРОКА(30)) КАК НомерРеализации,
		             |	ВЫРАЗИТЬ(ВЫБОР
		             |			КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""D""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""F""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""H""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""J""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""L""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""N""
		             |				ТОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, 1, ВТ_Сессия.ДлинаНомера - 1)
		             |			ИНАЧЕ ВТ_Сессия.НомерДокументаОснования
		             |		КОНЕЦ КАК СТРОКА(30)) КАК НомерДокументаОснования,
		             |	ВЫРАЗИТЬ(ВЫБОР
		             |			КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""D""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""F""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""H""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""J""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""L""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""N""
		             |				ТОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, 1, ВТ_Сессия.ДлинаНомера - 1)
		             |			КОГДА ВТ_Сессия.НомерДокументаОснования <> """"
		             |				ТОГДА ВТ_Сессия.НомерДокумента
		             |			ИНАЧЕ """"
		             |		КОНЕЦ КАК СТРОКА(30)) КАК НомерКорректировкиРеализации,
		             |	ВЫРАЗИТЬ(ВЫБОР
		             |			КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""D""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""F""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""H""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""J""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""L""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""N""
		             |				ТОГДА ""И"" + (ВЫРАЗИТЬ(ПОДСТРОКА(ВТ_Сессия.НомерДокумента, 1, ВТ_Сессия.ДлинаНомера - 1) КАК СТРОКА(30)))
		             |			ИНАЧЕ ВТ_Сессия.НомерДокумента
		             |		КОНЕЦ КАК СТРОКА(30)) КАК НомерСчетаФактуры,
		             |	ВТ_Сессия.ДатаДокумента КАК ДатаДокумента,
		             |	ВТ_Договоры.ИндексДоговора,
		             |	ВЫБОР
		             |		КОГДА НЕ ВТ_Договоры.Контрагент ЕСТЬ NULL 
		             |				И НЕ ВТ_Договоры.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		             |				И (ВЫРАЗИТЬ(ВТ_Договоры.Контрагент КАК Справочник.Контрагенты).абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)
		             |					ИЛИ ВЫРАЗИТЬ(ВТ_Договоры.Контрагент КАК Справочник.Контрагенты).абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.СменаРеквизитов))
		             |			ТОГДА ВТ_Договоры.Контрагент
		             |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		             |	КОНЕЦ КАК Контрагент,
		             |	ВЫБОР
		             |		КОГДА НЕ ВТ_Договоры.Договор ЕСТЬ NULL 
		             |				И НЕ ВТ_Договоры.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		             |				И ВЫРАЗИТЬ(ВТ_Договоры.Договор КАК Справочник.ДоговорыКонтрагентов).абс_СтатусДоговора = ЗНАЧЕНИЕ(Перечисление.абсСтатусыДоговоров.Исполнение)
		             |			ТОГДА ВТ_Договоры.Договор
		             |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		             |	КОНЕЦ КАК Договор,
		             |	ВТ_Договоры.ТипКонтрагента,
		             |	ВТ_Кураторы.ИндексКуратора,
		             |	ВТ_Кураторы.Куратор,
		             |	ВТ_Кураторы.ЦФО,
		             |	ВТ_Валюты.ИндексВалюты,
		             |	ВТ_Валюты.Валюта,
		             |	ВТ_Сессия.СуммаВключаетНДС КАК СуммаВключаетНДС,
		             |	ВТ_СтавкиНДС.СчетФактураНеТребуется КАК СчетФактураНеТребуется,
		             |	ВТ_Сессия.КодКонтрагента КАК КодКонтрагента
		             |ПОМЕСТИТЬ ВТ_Документы_Пром
		             |ИЗ
		             |	ВТ_Сессия КАК ВТ_Сессия
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Договоры КАК ВТ_Договоры
		             |		ПО ВТ_Сессия.КодКонтрагента = ВТ_Договоры.КодКонтрагента
		             |			И ВТ_Сессия.ЛицевойСчет = ВТ_Договоры.ЛицевойСчет
		             |			И ВТ_Сессия.НомерДоговора = ВТ_Договоры.НомерДоговора
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Кураторы КАК ВТ_Кураторы
		             |		ПО ВТ_Сессия.НаименованиеКуратора = ВТ_Кураторы.СтрокаКуратор
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Валюты КАК ВТ_Валюты
		             |		ПО ВТ_Сессия.КодВалюты = ВТ_Валюты.КодВалюты
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НумерацияСчетовНаОплату КАК ВТ_СчетаНаОплату
		             |		ПО ((ВЫРАЗИТЬ(ВТ_Сессия.НомерДокумента КАК СТРОКА(30))) = (ВЫРАЗИТЬ(ВТ_СчетаНаОплату.НомерДокумента КАК СТРОКА(30))))
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
		             |		ПО ВТ_Сессия.СтрокаСтавкиНДС = ВТ_СтавкиНДС.СтрокаСтавкиНДС
		             |			И ВТ_Сессия.КодВалюты = ВТ_СтавкиНДС.КодВалюты
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_Документы_Сырая.НомерСчета КАК НомерСчета,
		             |	ВТ_Документы_Сырая.НомерРеализации КАК НомерРеализации,
		             |	ВТ_Документы_Сырая.НомерКорректировкиРеализации,
		             |	МИНИМУМ(ВТ_Документы_Сырая.СуффиксНомера) КАК СуффиксНомера,
		             |	ВТ_Документы_Сырая.НомерСчетаФактуры,
		             |	ВТ_Документы_Сырая.ДатаДокумента,
		             |	ВТ_Документы_Сырая.ИндексДоговора,
		             |	ВТ_Документы_Сырая.Контрагент,
		             |	ВТ_Документы_Сырая.ТипКонтрагента,
		             |	ВТ_Документы_Сырая.КодКонтрагента,
		             |	ВТ_Документы_Сырая.Договор,
		             |	ВТ_Документы_Сырая.ИндексКуратора,
		             |	ВТ_Документы_Сырая.Куратор,
		             |	ВТ_Документы_Сырая.ЦФО,
		             |	ВТ_Документы_Сырая.ИндексВалюты,
		             |	ВТ_Документы_Сырая.Валюта,
		             |	ВТ_Документы_Сырая.СуммаВключаетНДС,
		             |	ВТ_Документы_Сырая.Исправление,
		             |	ВТ_Документы_Сырая.ВидОперацииКорректировки,
		             |	ВТ_Документы_Сырая.ВидСчетаФактуры,
		             |	ВТ_Документы_Сырая.НомерДокументаОснования,
		             |	МИНИМУМ(ВТ_Документы_Сырая.СчетФактураНеТребуется) КАК СчетФактураНеТребуется
		             |ПОМЕСТИТЬ ВТ_Документы_Сырая
		             |ИЗ
		             |	ВТ_Документы_Пром КАК ВТ_Документы_Сырая
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВТ_Документы_Сырая.НомерСчета,
		             |	ВТ_Документы_Сырая.НомерРеализации,
		             |	ВТ_Документы_Сырая.НомерКорректировкиРеализации,
		             |	ВТ_Документы_Сырая.НомерСчетаФактуры,
		             |	ВТ_Документы_Сырая.ДатаДокумента,
		             |	ВТ_Документы_Сырая.ИндексДоговора,
		             |	ВТ_Документы_Сырая.Контрагент,
		             |	ВТ_Документы_Сырая.ТипКонтрагента,
		             |	ВТ_Документы_Сырая.КодКонтрагента,
		             |	ВТ_Документы_Сырая.Договор,
		             |	ВТ_Документы_Сырая.ИндексКуратора,
		             |	ВТ_Документы_Сырая.Куратор,
		             |	ВТ_Документы_Сырая.ЦФО,
		             |	ВТ_Документы_Сырая.ИндексВалюты,
		             |	ВТ_Документы_Сырая.Валюта,
		             |	ВТ_Документы_Сырая.СуммаВключаетНДС,
		             |	ВТ_Документы_Сырая.Исправление,
		             |	ВТ_Документы_Сырая.ВидОперацииКорректировки,
		             |	ВТ_Документы_Сырая.ВидСчетаФактуры,
		             |	ВТ_Документы_Сырая.НомерДокументаОснования
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_Документы_Сырая.НомерСчета КАК НомерСчета
		             |ПОМЕСТИТЬ ВТ_Документы_ДляПоиска_СчетНаОплату
		             |ИЗ
		             |	ВТ_Документы_Сырая КАК ВТ_Документы_Сырая
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	СчетНаОплатуПокупателю.Ссылка КАК СчетНаОплату,
		             |	ВЫРАЗИТЬ(СчетНаОплатуПокупателю.Номер КАК СТРОКА(30)) КАК Номер
		             |ПОМЕСТИТЬ ВТ_СчетаНаОплату
		             |ИЗ
		             |	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		             |ГДЕ
		             |	ГОД(СчетНаОплатуПокупателю.Дата) * 100 + МЕСЯЦ(СчетНаОплатуПокупателю.Дата) = &МесяцЗагрузки
		             |	И СчетНаОплатуПокупателю.Организация = &Организация
		             |	И ВЫРАЗИТЬ(СчетНаОплатуПокупателю.Номер КАК СТРОКА(30)) В
		             |			(ВЫБРАТЬ
		             |				ВТ_Документы_ДляПоиска_СчетНаОплату.НомерСчета
		             |			ИЗ
		             |				ВТ_Документы_ДляПоиска_СчетНаОплату)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	МАКСИМУМ(СчетНаОплатуПокупателю.Ссылка) КАК СчетНаОплату,
		             |	ВЫРАЗИТЬ(СчетНаОплатуПокупателю.Номер КАК СТРОКА(30)) КАК Номер
		             |ПОМЕСТИТЬ ВТ_СчетаНаОплату_ДоЗагрузки
		             |ИЗ
		             |	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		             |ГДЕ
		             |	ГОД(СчетНаОплатуПокупателю.Дата) = &ГодЗагрузки
		             |	И СчетНаОплатуПокупателю.Организация = &Организация
		             |	И ГОД(СчетНаОплатуПокупателю.Дата) * 100 + МЕСЯЦ(СчетНаОплатуПокупателю.Дата) < &МесяцЗагрузки
		             |	И ВЫРАЗИТЬ(СчетНаОплатуПокупателю.Номер КАК СТРОКА(30)) В
		             |			(ВЫБРАТЬ
		             |				ВТ_Документы_ДляПоиска_СчетНаОплату.НомерСчета
		             |			ИЗ
		             |				ВТ_Документы_ДляПоиска_СчетНаОплату)
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВЫРАЗИТЬ(СчетНаОплатуПокупателю.Номер КАК СТРОКА(30))
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_Документы_Сырая.НомерРеализации КАК НомерРеализации
		             |ПОМЕСТИТЬ ВТ_Документы_ДляПоиска_Реализации
		             |ИЗ
		             |	ВТ_Документы_Сырая КАК ВТ_Документы_Сырая
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номер КАК СТРОКА(30)) КАК Номер,
		             |	РеализацияТоваровУслуг.Ссылка КАК Реализация
		             |ПОМЕСТИТЬ ВТ_Реализации
		             |ИЗ
		             |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		             |ГДЕ
		             |	РеализацияТоваровУслуг.Организация = &Организация
		             |	И ГОД(РеализацияТоваровУслуг.Дата) * 100 + МЕСЯЦ(РеализацияТоваровУслуг.Дата) = &МесяцЗагрузки
		             |	И ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номер КАК СТРОКА(30)) В
		             |			(ВЫБРАТЬ
		             |				ВТ_Документы_ДляПоиска_Реализации.НомерРеализации
		             |			ИЗ
		             |				ВТ_Документы_ДляПоиска_Реализации)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номер КАК СТРОКА(30)) КАК Номер,
		             |	МАКСИМУМ(РеализацияТоваровУслуг.Ссылка) КАК Реализация
		             |ПОМЕСТИТЬ ВТ_Реализации_ДоЗагрузки
		             |ИЗ
		             |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		             |ГДЕ
		             |	ГОД(РеализацияТоваровУслуг.Дата) = &ГодЗагрузки
		             |	И РеализацияТоваровУслуг.Организация = &Организация
		             |	И ГОД(РеализацияТоваровУслуг.Дата) * 100 + МЕСЯЦ(РеализацияТоваровУслуг.Дата) < &МесяцЗагрузки
		             |	И ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номер КАК СТРОКА(30)) В
		             |			(ВЫБРАТЬ
		             |				ВТ_Документы_ДляПоиска_Реализации.НомерРеализации
		             |			ИЗ
		             |				ВТ_Документы_ДляПоиска_Реализации)
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номер КАК СТРОКА(30))
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_Документы_Сырая.НомерКорректировкиРеализации + ВТ_Документы_Сырая.СуффиксНомера КАК НомерКорректировкиРеализации
		             |ПОМЕСТИТЬ ВТ_Документы_ДляПоиска_КорректировкиРеализации
		             |ИЗ
		             |	ВТ_Документы_Сырая КАК ВТ_Документы_Сырая
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВЫРАЗИТЬ(КорректировкаРеализации.Номер КАК СТРОКА(30)) КАК Номер,
		             |	КорректировкаРеализации.Ссылка КАК КорректировкаРеализации
		             |ПОМЕСТИТЬ ВТ_КорректировкиРеализации
		             |ИЗ
		             |	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		             |ГДЕ
		             |	КорректировкаРеализации.Организация = &Организация
		             |	И ГОД(КорректировкаРеализации.Дата) * 100 + МЕСЯЦ(КорректировкаРеализации.Дата) = &МесяцЗагрузки
		             |	И ВЫРАЗИТЬ(КорректировкаРеализации.Номер КАК СТРОКА(30)) В
		             |			(ВЫБРАТЬ
		             |				ВТ_Документы_ДляПоиска_КорректировкиРеализации.НомерКорректировкиРеализации
		             |			ИЗ
		             |				ВТ_Документы_ДляПоиска_КорректировкиРеализации)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВЫРАЗИТЬ(КорректировкаРеализации.Номер КАК СТРОКА(30)) КАК Номер,
		             |	МАКСИМУМ(КорректировкаРеализации.Ссылка) КАК КорректировкаРеализации
		             |ПОМЕСТИТЬ ВТ_КорректировкиРеализации_ДоЗагрузки
		             |ИЗ
		             |	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		             |ГДЕ
		             |	ГОД(КорректировкаРеализации.Дата) = &ГодЗагрузки
		             |	И КорректировкаРеализации.Организация = &Организация
		             |	И ГОД(КорректировкаРеализации.Дата) * 100 + МЕСЯЦ(КорректировкаРеализации.Дата) < &МесяцЗагрузки
		             |	И ВЫРАЗИТЬ(КорректировкаРеализации.Номер КАК СТРОКА(30)) В
		             |			(ВЫБРАТЬ
		             |				ВТ_Документы_ДляПоиска_КорректировкиРеализации.НомерКорректировкиРеализации
		             |			ИЗ
		             |				ВТ_Документы_ДляПоиска_КорректировкиРеализации)
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВЫРАЗИТЬ(КорректировкаРеализации.Номер КАК СТРОКА(30))
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ВТ_Документы_Сырая.НомерСчетаФактуры + ВТ_Документы_Сырая.СуффиксНомера КАК НомерСчетаФактуры
		             |ПОМЕСТИТЬ ВТ_Документы_ДляПоиска_СчетаФактуры
		             |ИЗ
		             |	ВТ_Документы_Сырая КАК ВТ_Документы_Сырая
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВЫРАЗИТЬ(СчетФактураВыданный.Номер КАК СТРОКА(30)) КАК Номер,
		             |	СчетФактураВыданный.Ссылка КАК СчетФактура
		             |ПОМЕСТИТЬ ВТ_СчетаФактуры
		             |ИЗ
		             |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		             |ГДЕ
		             |	СчетФактураВыданный.Организация = &Организация
		             |	И ГОД(СчетФактураВыданный.Дата) * 100 + МЕСЯЦ(СчетФактураВыданный.Дата) = &МесяцЗагрузки
		             |	И ВЫРАЗИТЬ(СчетФактураВыданный.Номер КАК СТРОКА(30)) В
		             |			(ВЫБРАТЬ
		             |				ВТ_Документы_ДляПоиска_СчетаФактуры.НомерСчетаФактуры
		             |			ИЗ
		             |				ВТ_Документы_ДляПоиска_СчетаФактуры)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВЫРАЗИТЬ(СчетФактураВыданный.Номер КАК СТРОКА(30)) КАК Номер,
		             |	МАКСИМУМ(СчетФактураВыданный.Ссылка) КАК СчетФактура
		             |ПОМЕСТИТЬ ВТ_СчетаФактуры_ДоЗагрузки
		             |ИЗ
		             |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		             |ГДЕ
		             |	ГОД(СчетФактураВыданный.Дата) = &ГодЗагрузки
		             |	И СчетФактураВыданный.Организация = &Организация
		             |	И ГОД(СчетФактураВыданный.Дата) * 100 + МЕСЯЦ(СчетФактураВыданный.Дата) < &МесяцЗагрузки
		             |	И ВЫРАЗИТЬ(СчетФактураВыданный.Номер КАК СТРОКА(30)) В
		             |			(ВЫБРАТЬ
		             |				ВТ_Документы_ДляПоиска_СчетаФактуры.НомерСчетаФактуры
		             |			ИЗ
		             |				ВТ_Документы_ДляПоиска_СчетаФактуры)
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВЫРАЗИТЬ(СчетФактураВыданный.Номер КАК СТРОКА(30))
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВТ_Документы_Сырая.НомерСчета КАК НомерСчета,
		             |	ВТ_Документы_Сырая.НомерРеализации КАК НомерРеализации,
		             |	ВТ_Документы_Сырая.ДатаДокумента,
		             |	ЕСТЬNULL(ВТ_СчетаНаОплату.СчетНаОплату, ВТ_СчетаНаОплату_ДоЗагрузки.СчетНаОплату) КАК СчетНаОплату,
		             |	ЕСТЬNULL(ВТ_Реализации.Реализация, ВТ_Реализации_ДоЗагрузки.Реализация) КАК Реализация,
		             |	ЕСТЬNULL(ВТ_КорректировкиРеализации.КорректировкаРеализации, ВТ_КорректировкиРеализации_ДоЗагрузки.КорректировкаРеализации) КАК КорректировкаРеализации,
		             |	ВЫБОР
		             |		КОГДА ВТ_Документы_Сырая.СчетФактураНеТребуется
		             |			ТОГДА NULL
		             |		ИНАЧЕ ЕСТЬNULL(ВТ_СчетаФактуры.СчетФактура, ВТ_СчетаФактуры_ДоЗагрузки.СчетФактура)
		             |	КОНЕЦ КАК СчетФактура,
		             |	ВТ_Документы_Сырая.ИндексДоговора,
		             |	ВТ_Документы_Сырая.Контрагент,
		             |	ВТ_Документы_Сырая.ТипКонтрагента,
		             |	ВТ_Документы_Сырая.КодКонтрагента,
		             |	ВТ_Документы_Сырая.Договор,
		             |	ВТ_Документы_Сырая.ИндексКуратора,
		             |	ВТ_Документы_Сырая.Куратор,
		             |	ВТ_Документы_Сырая.ЦФО,
		             |	ВТ_Документы_Сырая.ИндексВалюты,
		             |	ВТ_Документы_Сырая.Валюта,
		             |	ВТ_Документы_Сырая.СуммаВключаетНДС,
		             |	ВЫБОР
		             |		КОГДА ВТ_Документы_Сырая.СчетФактураНеТребуется
		             |			ТОГДА NULL
		             |		ИНАЧЕ ВТ_Документы_Сырая.Исправление
		             |	КОНЕЦ КАК Исправление,
		             |	ВТ_Документы_Сырая.ВидОперацииКорректировки,
		             |	ВЫБОР
		             |		КОГДА ВТ_Документы_Сырая.СчетФактураНеТребуется
		             |			ТОГДА NULL
		             |		ИНАЧЕ ВТ_Документы_Сырая.ВидСчетаФактуры
		             |	КОНЕЦ КАК ВидСчетаФактуры,
		             |	ВТ_Документы_Сырая.СчетФактураНеТребуется,
		             |	ВТ_Документы_Сырая.НомерДокументаОснования,
		             |	ВТ_Документы_Сырая.НомерКорректировкиРеализации + ВТ_Документы_Сырая.СуффиксНомера КАК НомерКорректировкиРеализации,
		             |	ВЫБОР
		             |		КОГДА ВТ_Документы_Сырая.СчетФактураНеТребуется
		             |			ТОГДА """"
		             |		ИНАЧЕ ВТ_Документы_Сырая.НомерСчетаФактуры + ВТ_Документы_Сырая.СуффиксНомера
		             |	КОНЕЦ КАК НомерСчетаФактуры,
		             |	&БанковскийСчет КАК БанковскийСчет,
		             |	ЗНАЧЕНИЕ(Перечисление.ttk_ОперацииСДокументамиНачислений.Проведение) КАК ТипЗагрузкиДокумента
		             |ИЗ
		             |	ВТ_Документы_Сырая КАК ВТ_Документы_Сырая
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаНаОплату КАК ВТ_СчетаНаОплату
		             |		ПО ВТ_Документы_Сырая.НомерСчета = ВТ_СчетаНаОплату.Номер
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Реализации КАК ВТ_Реализации
		             |		ПО ВТ_Документы_Сырая.НомерРеализации = ВТ_Реализации.Номер
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КорректировкиРеализации КАК ВТ_КорректировкиРеализации
		             |		ПО (ВТ_Документы_Сырая.НомерКорректировкиРеализации + ВТ_Документы_Сырая.СуффиксНомера = ВТ_КорректировкиРеализации.Номер)
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактуры КАК ВТ_СчетаФактуры
		             |		ПО (ВТ_Документы_Сырая.НомерСчетаФактуры + ВТ_Документы_Сырая.СуффиксНомера = ВТ_СчетаФактуры.Номер)
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаНаОплату_ДоЗагрузки КАК ВТ_СчетаНаОплату_ДоЗагрузки
		             |		ПО ВТ_Документы_Сырая.НомерСчета = ВТ_СчетаНаОплату_ДоЗагрузки.Номер
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Реализации_ДоЗагрузки КАК ВТ_Реализации_ДоЗагрузки
		             |		ПО ВТ_Документы_Сырая.НомерРеализации = ВТ_Реализации_ДоЗагрузки.Номер
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КорректировкиРеализации_ДоЗагрузки КАК ВТ_КорректировкиРеализации_ДоЗагрузки
		             |		ПО (ВТ_Документы_Сырая.НомерКорректировкиРеализации + ВТ_Документы_Сырая.СуффиксНомера = ВТ_КорректировкиРеализации_ДоЗагрузки.Номер)
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактуры_ДоЗагрузки КАК ВТ_СчетаФактуры_ДоЗагрузки
		             |		ПО (ВТ_Документы_Сырая.НомерСчетаФактуры + ВТ_Документы_Сырая.СуффиксНомера = ВТ_СчетаФактуры_ДоЗагрузки.Номер)
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	НомерКорректировкиРеализации,
		             |	НомерСчетаФактуры";
		Объект.Документы.Загрузить(Запрос.Выполнить().Выгрузить());
	//	Отказ=Ложь;
	//	Возврат;
	//КонецЕсли;
	//Если ФлагЭтапа = 9 Тогда
	// Грузим Деталировку
		йТабл=Объект.Документы.Выгрузить(,"НомерРеализации,НомерКорректировкиРеализации,
										  |ТипКонтрагента,НомерСтроки,Контрагент");
		йТабл.Колонки.Добавить("ЦФУОператора",Новый ОписаниеТипов("СправочникСсылка.абс_ЦФУ"));
		йТабл.Колонки.Добавить("ЦФУКорпората",Новый ОписаниеТипов("СправочникСсылка.абс_ЦФУ"));
		Для каждого йСтр Из йТабл Цикл
			Если ЗначениеЗаполнено(йСтр.Контрагент) Тогда
				йПапка = йСтр.Контрагент.ПолныйКод();
			Иначе
				йПапка = "";
			КонецЕсли;
			йИ=Найти(йПапка,"/");
			//++Готовцев 02.02.2018
			Если Объект.Дата > Дата("20180120") ТОгда
				йСтр.ЦФУОператора = Справочники.абс_ЦФУ.НайтиПоКоду("РС0402");
			иначе	
				йСтр.ЦФУОператора = Справочники.абс_ЦФУ.НайтиПоКоду("Сегмент3");
			КонецЕсли;
			//--Готовцев 02.02.2018
			Если Объект.Дата > Дата("20180120") ТОгда
				Если йИ > 0 Тогда
					йПапка = СокрЛП(Лев(йПапка,йИ-1));
					Если йПапка="K023538" ИЛИ йПапка="K023539" ИЛИ йПапка="K024385" ИЛИ йПапка="K022999" Тогда
						йСтр.ЦФУОператора = Справочники.абс_ЦФУ.НайтиПоКоду("РС0401");
					ИначеЕсли йПапка="K002763" Тогда
						йСтр.ЦФУОператора = Справочники.абс_ЦФУ.НайтиПоКоду("РС0404");
					ИначеЕсли йСтр.Контрагент.НеЯвляетсяРезидентом Тогда
						йСтр.ЦФУОператора = Справочники.абс_ЦФУ.НайтиПоКоду("РС0403");
					КонецЕсли;
				КонецЕсли;
				йСтр.ЦФУКорпората = Справочники.абс_ЦФУ.НайтиПоКоду("РС0203");
				Если йСтр.ТипКонтрагента = Справочники.абс_ТипыКонтрагентов.РЖДбезДЗО ИЛИ
					йСтр.ТипКонтрагента = Справочники.абс_ТипыКонтрагентов.РЖД Тогда
					йСтр.ЦФУКорпората = Справочники.абс_ЦФУ.НайтиПоКоду("РС0303");
				ИначеЕсли йСтр.ТипКонтрагента = Справочники.абс_ТипыКонтрагентов.РЖДДЗО Тогда
					йСтр.ЦФУКорпората = Справочники.абс_ЦФУ.НайтиПоКоду("РС0304 ");
				КонецЕсли;
				
			иначе
				Если йИ > 0 Тогда
					йПапка = СокрЛП(Лев(йПапка,йИ-1));
					Если йПапка="K023538" ИЛИ йПапка="K023539" ИЛИ йПапка="K024385" ИЛИ йПапка="K022999" Тогда
						йСтр.ЦФУОператора = Справочники.абс_ЦФУ.НайтиПоКоду("Сегмент1");
					ИначеЕсли йПапка="K002763" Тогда
						йСтр.ЦФУОператора = Справочники.абс_ЦФУ.НайтиПоКоду("Сегмент10");
					ИначеЕсли йСтр.Контрагент.НеЯвляетсяРезидентом Тогда
						йСтр.ЦФУОператора = Справочники.абс_ЦФУ.НайтиПоКоду("Сегмент2");
					КонецЕсли;
				КонецЕсли;
				йСтр.ЦФУКорпората = Справочники.абс_ЦФУ.НайтиПоКоду("Сегмент6");
				Если йСтр.ТипКонтрагента = Справочники.абс_ТипыКонтрагентов.РЖДбезДЗО ИЛИ
					йСтр.ТипКонтрагента = Справочники.абс_ТипыКонтрагентов.РЖД Тогда
					йСтр.ЦФУКорпората = Справочники.абс_ЦФУ.НайтиПоКоду("Сегмент4");
				ИначеЕсли йСтр.ТипКонтрагента = Справочники.абс_ТипыКонтрагентов.РЖДДЗО Тогда
					йСтр.ЦФУКорпората = Справочники.абс_ЦФУ.НайтиПоКоду("Сегмент5");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Запрос.УстановитьПараметр("ОДокументы",йТабл);
		// Продажи операторам связи
		Запрос.УстановитьПараметр("ЦФО_B2O",Справочники.Подразделения.НайтиПоКоду("ЦФО1348"));
		// Корпоративные продажи
		Запрос.УстановитьПараметр("ЦФО_B2B",Справочники.Подразделения.НайтиПоКоду("ЦФО1349"));
		// Розничные продажи
		Запрос.УстановитьПараметр("ЦФО_B2C",Справочники.Подразделения.НайтиПоКоду("ЦФО1353"));
		// Юридические лица - B2C
		Если Объект.Дата <= Дата("20180120") ТОгда
			Запрос.УстановитьПараметр("ЦФУ_ЮРЛ",Справочники.абс_ЦФУ.НайтиПоКоду("Сегмент9"));
		Иначе
			Запрос.УстановитьПараметр("ЦФУ_ЮРЛ",Справочники.абс_ЦФУ.НайтиПоКоду("РС0204"));
		КонецЕсли;
		// Поддержка продаж
		// Расходный технический ЦФУ
		Запрос.УстановитьПараметр("ЦФУ_DEF",Справочники.абс_ЦФУ.НайтиПоКоду("ЦФУ8"));
		Запрос.УстановитьПараметр("БС_DEF",Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ДХ001"));
		Запрос.УстановитьПараметр("ОУслуги",Объект.УслугиНоменклатуры.Выгрузить());
		Запрос.УстановитьПараметр("ОАналитики",Объект.Аналитики.Выгрузить());
		Запрос.Текст="ВЫБРАТЬ
		             |	ВТ_.НомерРеализации КАК НомерРеализации,
		             |	ВТ_.НомерКорректировкиРеализации КАК НомерКорректировкиРеализации,
		             |	ВТ_.ТипКонтрагента КАК ТипКонтрагента,
		             |	ВТ_.ЦФУОператора КАК ЦФУОператора,
		             |	ВТ_.ЦФУКорпората КАК ЦФУКорпората,
		             |	ВТ_.НомерСтроки КАК ИндексДокумента
		             |ПОМЕСТИТЬ ВТ_Документы
		             |ИЗ
		             |	&ОДокументы КАК ВТ_
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	НомерРеализации
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_.Содержание КАК Услуга,
		             |	ВТ_.УслугаИзБиллинга КАК УслугаИзБиллинга,
		             |	ВТ_.КодУслуги КАК КодУслуги,
		             |	ВТ_.Номенклатура КАК Номенклатура,
		             |	ВТ_.НомерСтроки КАК ИндексУслуги
		             |ПОМЕСТИТЬ ВТ_Услуги
		             |ИЗ
		             |	&ОУслуги КАК ВТ_
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	Услуга,
		             |	КодУслуги
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_.Номенклатура КАК Номенклатура,
		             |	ВТ_.ЦФО КАК ЦФО,
		             |	ВТ_.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		             |	ВТ_.НомерСтроки КАК ИндексАналитики
		             |ПОМЕСТИТЬ ВТ_НОМ_НГ
		             |ИЗ
		             |	&ОАналитики КАК ВТ_
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	Номенклатура,
		             |	ЦФО
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Ссылка КАК СтатьяОборотов
		             |ПОМЕСТИТЬ ВТ_ОборотыБюджетов
		             |ИЗ
		             |	Справочник.СтатьиОборотовПоБюджетам.абс_ПериодыИспользования КАК СтатьиОборотовПоБюджетамабс_ПериодыИспользования
		             |ГДЕ
		             |	СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Использование
		             |	И ГОД(СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Период) = &ГодЗагрузки
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВЫРАЗИТЬ(kwr_СоответствиеАналитикБУиУУСрезПоследних.СубконтоХозр1 КАК Справочник.НоменклатурныеГруппы) КАК НоменклатурнаяГруппа,
		             |	МИНИМУМ(kwr_СоответствиеАналитикБУиУУСрезПоследних.СтатьиОборотовПоБюджетам) КАК БюджетнаяСтатья,
		             |	kwr_СоответствиеАналитикБУиУУСрезПоследних.ЦФУ
		             |ПОМЕСТИТЬ ВТ_НГ_БЕЗЦФО_ЦФУ_БС
		             |ИЗ
		             |	РегистрСведений.kwr_СоответствиеАналитикБУиУУ.СрезПоследних(
		             |			&ДатаУчета,
		             |			СчетХозрасчетный.Код = ""90.01.1""
		             |				И СтатьиОборотовПоБюджетам В
		             |					(ВЫБРАТЬ
		             |						ВТ_.СтатьяОборотов
		             |					ИЗ
		             |						ВТ_ОборотыБюджетов КАК ВТ_)) КАК kwr_СоответствиеАналитикБУиУУСрезПоследних
		             |ГДЕ
		             |	kwr_СоответствиеАналитикБУиУУСрезПоследних.СтатьиОборотовПоБюджетам <> &БС_DEF
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ВЫРАЗИТЬ(kwr_СоответствиеАналитикБУиУУСрезПоследних.СубконтоХозр1 КАК Справочник.НоменклатурныеГруппы),
		             |	kwr_СоответствиеАналитикБУиУУСрезПоследних.ЦФУ
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	ВЫРАЗИТЬ(kwr_СоответствиеАналитикБУиУУСрезПоследних.СубконтоХозр1 КАК Справочник.НоменклатурныеГруппы) КАК НоменклатурнаяГруппа,
		             |	kwr_СоответствиеАналитикБУиУУСрезПоследних.СтатьиОборотовПоБюджетам КАК БюджетнаяСтатья,
		             |	kwr_СоответствиеАналитикБУиУУСрезПоследних.ЦФУ КАК ЦФУ,
		             |	kwr_СоответствиеАналитикБУиУУСрезПоследних.ЦФО КАК ЦФО
		             |ПОМЕСТИТЬ ВТ_НГ_ЦФО_ЦФУ_БС
		             |ИЗ
		             |	РегистрСведений.kwr_СоответствиеАналитикБУиУУ.СрезПоследних(
		             |			&ДатаУчета,
		             |			СчетХозрасчетный.Код = ""90.01.1""
		             |				И СтатьиОборотовПоБюджетам В
		             |					(ВЫБРАТЬ
		             |						ВТ_.СтатьяОборотов
		             |					ИЗ
		             |						ВТ_ОборотыБюджетов КАК ВТ_)) КАК kwr_СоответствиеАналитикБУиУУСрезПоследних
		             |ГДЕ
		             |	kwr_СоответствиеАналитикБУиУУСрезПоследних.СтатьиОборотовПоБюджетам <> &БС_DEF
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВЫБОР
		             |		КОГДА (ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M"")
		             |				И ВТ_Сессия.ТипКорректировки = 0
		             |			ТОГДА ИСТИНА
		             |		ИНАЧЕ ЛОЖЬ
		             |	КОНЕЦ КАК СтрокаКоррекции,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.ТипКорректировки = 0
		             |				И (ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M"")
		             |			ТОГДА -ВТ_Сессия.Цена
		             |		КОГДА ВТ_Сессия.ТипКорректировки <> 0
		             |			ТОГДА ВТ_Сессия.СуммаДо
		             |		ИНАЧЕ 0
		             |	КОНЕЦ КАК ЦенаДо,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.ТипКорректировки = 0
		             |				И (ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M"")
		             |			ТОГДА ВТ_Сессия.Количество
		             |		КОГДА ВТ_Сессия.ТипКорректировки <> 0
		             |			ТОГДА ВТ_Сессия.Количество
		             |		ИНАЧЕ 0
		             |	КОНЕЦ КАК КоличествоДо,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.ТипКорректировки = 0
		             |				И (ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M"")
		             |			ТОГДА -ВТ_Сессия.Сумма
		             |		КОГДА ВТ_Сессия.ТипКорректировки <> 0
		             |			ТОГДА ВТ_Сессия.СуммаДо
		             |		ИНАЧЕ 0
		             |	КОНЕЦ КАК СуммаДо,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.ТипКорректировки = 0
		             |				И (ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M"")
		             |			ТОГДА -ВТ_Сессия.СуммаНДС
		             |		КОГДА ВТ_Сессия.ТипКорректировки <> 0
		             |			ТОГДА ВТ_Сессия.СуммаНДСДо
		             |		ИНАЧЕ 0
		             |	КОНЕЦ КАК СуммаНДСДо,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.ТипКорректировки = 0
		             |				И (ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M"")
		             |			ТОГДА ВТ_СтавкиНДС.СтавкаНДС
		             |		КОГДА ВТ_Сессия.ТипКорректировки <> 0
		             |			ТОГДА ВТ_СтавкиНДС.СтавкаНДС
		             |		ИНАЧЕ НЕОПРЕДЕЛЕНО
		             |	КОНЕЦ КАК СтавкаНДСДо,
		             |	ВТ_Документы.ИндексДокумента КАК ИндексДокумента,
		             |	ВТ_Договоры.ИндексДоговора КАК ИндексДоговора,
		             |	ВТ_Услуги.ИндексУслуги КАК ИндексУслуги,
		             |	ВТ_НОМ_НГ.ИндексАналитики КАК ИндексАналитики,
		             |	ВТ_СтавкиНДС.ИндексСтавкиНДС КАК ИндексСтавкиНДС,
		             |	ВТ_Кураторы.ИндексКуратора КАК ИндексКуратора,
		             |	ВТ_Валюты.ИндексВалюты КАК ИндексВалюты,
		             |	ВТ_Услуги.Услуга КАК Услуга,
		             |	ВТ_Услуги.Номенклатура КАК Номенклатура,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.ТипКорректировки = 0
		             |				И (ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M"")
		             |			ТОГДА 0
		             |		КОГДА ВТ_Сессия.ТипКорректировки <> 0
		             |			ТОГДА ВТ_Сессия.Сумма
		             |		ИНАЧЕ ВТ_Сессия.Сумма
		             |	КОНЕЦ КАК Цена,
		             |	ВТ_Сессия.Количество КАК Количество,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.ТипКорректировки = 0
		             |				И (ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M"")
		             |			ТОГДА 0
		             |		КОГДА ВТ_Сессия.ТипКорректировки <> 0
		             |			ТОГДА ВТ_Сессия.Сумма
		             |		ИНАЧЕ ВТ_Сессия.Сумма
		             |	КОНЕЦ КАК Сумма,
		             |	ВТ_СтавкиНДС.СтавкаНДС КАК СтавкаНДС,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.ТипКорректировки = 0
		             |				И (ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |					ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M"")
		             |			ТОГДА 0
		             |		КОГДА ВТ_Сессия.ТипКорректировки <> 0
		             |			ТОГДА ВТ_Сессия.СуммаНДС
		             |		ИНАЧЕ ВТ_Сессия.СуммаНДС
		             |	КОНЕЦ КАК СуммаНДС,
		             |	ВТ_Сессия.ЦФО КАК ЦФО,
		             |	ВЫБОР
		             |		КОГДА &ЦФУиЦФОпоУмолчанию
		             |				ИЛИ ПОДСТРОКА(ВТ_Сессия.КодЦФУ, 1, 7) = ""Сегмент"" ИЛИ ПОДСТРОКА(ВТ_Сессия.КодЦФУ, 1, 2) = ""РС""
		             |			ТОГДА СП_ЦФУ.Ссылка
		             |		КОГДА ВТ_Сессия.ЦФО = &ЦФО_B2O
		             |			ТОГДА ВТ_Документы.ЦФУОператора
		             |		КОГДА ВТ_Сессия.ЦФО = &ЦФО_B2B
		             |			ТОГДА ВТ_Документы.ЦФУКорпората
		             |		КОГДА ВТ_Сессия.ЦФО = &ЦФО_B2C
		             |			ТОГДА &ЦФУ_ЮРЛ
		             |		ИНАЧЕ &ЦФУ_DEF
		             |	КОНЕЦ КАК ЦФУ,
		             |	ВТ_Сессия.КатегорияУслуги КАК КатегорияУслуги,
		             |	ВЫБОР
		             |		КОГДА ВТ_Сессия.НГ_ПОКатегории ЕСТЬ NULL 
		             |			ТОГДА ВТ_НОМ_НГ.НоменклатурнаяГруппа
		             |		ИНАЧЕ ВТ_Сессия.НГ_ПОКатегории
		             |	КОНЕЦ КАК НоменклатурнаяГруппа,
		             |	ВТ_НГ_ЦФО_ЦФУ_БС.БюджетнаяСтатья КАК БюджетнаяСтатья
		             |ИЗ
		             |	ВТ_Сессия КАК ВТ_Сессия
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
		             |		ПО ((ВЫРАЗИТЬ(ВЫБОР
		             |					КОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""C""
		             |							ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""D""
		             |							ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""E""
		             |							ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""F""
		             |							ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""G""
		             |							ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""H""
		             |							ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""I""
		             |							ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""J""
		             |							ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""K""
		             |							ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""L""
		             |							ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""M""
		             |							ИЛИ ПОДСТРОКА(ВТ_Сессия.НомерДокумента, ВТ_Сессия.ДлинаНомера, 1) = ""N""
		             |						ТОГДА ВЫБОР
		             |								КОГДА ВТ_Сессия.ТипКорректировки = 0
		             |										ИЛИ ВТ_Сессия.НомерДокументаОснования = """"
		             |									ТОГДА ПОДСТРОКА(ВТ_Сессия.НомерДокумента, 1, ВТ_Сессия.ДлинаНомера - 1)
		             |								ИНАЧЕ ВТ_Сессия.НомерДокументаОснования
		             |							КОНЕЦ
		             |					ИНАЧЕ ВТ_Сессия.НомерДокумента
		             |				КОНЕЦ КАК СТРОКА(30))) = ВТ_Документы.НомерРеализации)
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Услуги КАК ВТ_Услуги
		             |		ПО ВТ_Сессия.Содержание = ВТ_Услуги.УслугаИзБиллинга
		             |			И ВТ_Сессия.КодУслуги = ВТ_Услуги.КодУслуги
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НОМ_НГ КАК ВТ_НОМ_НГ
		             |		ПО (ВТ_Услуги.Номенклатура = ВТ_НОМ_НГ.Номенклатура)
		             |			И (ЕСТЬNULL(ВТ_Сессия.ЦФО, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) = ВТ_НОМ_НГ.ЦФО)
		             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.абс_ЦФУ КАК СП_ЦФУ
		             |		ПО ((ВЫРАЗИТЬ(ВЫБОР
		             |					КОГДА &ЦФУиЦФОпоУмолчанию
		             |						ТОГДА &ЦФУпоУмолчанию
		             |					ИНАЧЕ ВТ_Сессия.КодЦФУ
		             |				КОНЕЦ КАК СТРОКА(10))) = СП_ЦФУ.Код)
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НГ_ЦФО_ЦФУ_БС КАК ВТ_НГ_ЦФО_ЦФУ_БС
		             |		ПО (ВТ_НГ_ЦФО_ЦФУ_БС.НоменклатурнаяГруппа = ВЫБОР
		             |				КОГДА ВТ_Сессия.НГ_ПОКатегории ЕСТЬ NULL 
		             |					ТОГДА ВТ_НОМ_НГ.НоменклатурнаяГруппа
		             |				ИНАЧЕ ВТ_Сессия.НГ_ПОКатегории
		             |			КОНЕЦ)
		             |			И (ВТ_НГ_ЦФО_ЦФУ_БС.ЦФО = ВТ_Сессия.ЦФО)
		             |			И (ВТ_НГ_ЦФО_ЦФУ_БС.ЦФУ = ВЫБОР
		             |				КОГДА &ЦФУиЦФОпоУмолчанию
		             |						ИЛИ ПОДСТРОКА(ВТ_Сессия.КодЦФУ, 1, 7) = ""Сегмент"" ИЛИ ПОДСТРОКА(ВТ_Сессия.КодЦФУ, 1, 2) = ""РС""
		             |					ТОГДА СП_ЦФУ.Ссылка
		             |				КОГДА ВТ_Сессия.ЦФО = &ЦФО_B2O
		             |					ТОГДА ВТ_Документы.ЦФУОператора
		             |				КОГДА ВТ_Сессия.ЦФО = &ЦФО_B2B
		             |					ТОГДА ВТ_Документы.ЦФУКорпората
		             |				КОГДА ВТ_Сессия.ЦФО = &ЦФО_B2C
		             |					ТОГДА &ЦФУ_ЮРЛ
		             |				ИНАЧЕ &ЦФУ_DEF
		             |			КОНЕЦ)
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
		             |		ПО ВТ_Сессия.СтрокаСтавкиНДС = ВТ_СтавкиНДС.СтрокаСтавкиНДС
		             |			И ВТ_Сессия.КодВалюты = ВТ_СтавкиНДС.КодВалюты
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Валюты КАК ВТ_Валюты
		             |		ПО ВТ_Сессия.КодВалюты = ВТ_Валюты.КодВалюты
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Договоры КАК ВТ_Договоры
		             |		ПО ВТ_Сессия.КодКонтрагента = ВТ_Договоры.КодКонтрагента
		             |			И ВТ_Сессия.ЛицевойСчет = ВТ_Договоры.ЛицевойСчет
		             |			И ВТ_Сессия.НомерДоговора = ВТ_Договоры.НомерДоговора
		             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Кураторы КАК ВТ_Кураторы
		             |		ПО ВТ_Сессия.НаименованиеКуратора = ВТ_Кураторы.СтрокаКуратор
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	ИндексДокумента,
		             |	Номенклатура,
		             |	СтавкаНДС,
		             |	СтрокаКоррекции УБЫВ";
		Объект.Деталировка.Загрузить(Запрос.Выполнить().Выгрузить());
			//Запрос.Текст="ВЫБРАТЬ * ИЗ ВТ_НГ_ЦФО_ЦФУ_БС";
			//Табл=Запрос.Выполнить().Выгрузить();
		//Запрос.Текст="ВЫБРАТЬ
		//			|	*
		//			|ИЗ ВТ_Договоры";
		//Табл=Запрос.Выполнить().Выгрузить();
	//	Отказ=Ложь;
	//	Возврат;
	//КонецЕсли;
	//Если ФлагЭтапа = 10 Тогда
		//РСХ=РегистрыСведений.ttk_ЗагруженныеСессииИзБиллинга.СоздатьНаборЗаписей();
		//РСХ.Отбор.Документ.Установить(Объект.Ссылка);
		//РСХ.Прочитать();
		//ФлагЗаписи=Истина;
		//Если РСХ.Количество()>0 Тогда
		//	Если РСХ[0].СессияID=Объект.СессияID И РСХ[0].ЖурналID=Объект.ЖурналID Тогда
		//		ФлагЗаписи=Ложь;
		//	КонецЕсли;
		//КонецЕсли;
		//Если ФлагЗаписи Тогда
		//	Запрос.Текст="ВЫБРАТЬ * ИЗ ВТ_Сырец";
		//	РСХ=РегистрыСведений.ttk_ЗагруженныеСессииИзБиллинга.СоздатьМенеджерЗаписи();
		//	РСХ.ДанныеИзБиллинга=Новый ХранилищеЗначения(Запрос.Выполнить().Выгрузить());
		//	РСХ.СессияID=Объект.СессияID;
		//	РСХ.ЖурналID=Объект.ЖурналID;
		//	РСХ.Документ=Объект.Ссылка;
		//	РСХ.Записать();
		//КонецЕсли;
		//Запрос.МенеджерВременныхТаблиц.Закрыть();
		//Записать();
		//Табл=РСХ[0].ДанныеИзБиллинга.Получить();
	//	Отказ=Ложь;
	//	Возврат;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияФильтровТаблиц()
	ЭтаФорма.ТекущийФильтрАналитик="";
	ЭтаФорма.СмотретьАналитикиТолькоОшибки=Ложь;
	ОбновитьФильтрациюАналитик();	
	
	ЭтаФорма.ТекущийФильтрВалюты="";
	ОбновитьФильтрациюВалюты();	
	
	ЭтаФорма.ТекущийФильтрДоговоров="";
	ЭтаФорма.СмотретьКонтрагентыДоговорыТолькоОшибки=Ложь;
	ЭтаФорма.СмотретьКонтрагентыДоговорыНовые=Ложь;
	ОбновитьФильтрациюДоговоров();	
	
	ЭтаФорма.ТекущийФильтрДеталировки="";
	ЭтаФорма.СмотретьДеталировкуТолькоОшибки=Ложь;
	ЭтаФорма.СмотретьДеталировкуОшибкиАналитики=Ложь;
	ОбновитьФильтрациюДеталировки();	
	
	ЭтаФорма.ТекущийФильтрЗадолженности="";
	ЭтаФорма.СмотретьЗадолженностьТолькоОшибки=Ложь;
	ОбновитьФильтрациюЗадолженности();	
	
	ЭтаФорма.ТекущийФильтрДокументов="";
	ЭтаФорма.СмотретьДокументыТолькоОшибки=Ложь;
	ОбновитьФильтрациюДокументов();	
	
	ЭтаФорма.ТекущийФильтрКураторов="";
	ЭтаФорма.СмотретьКураторыТолькоОшибки=Ложь;
	ОбновитьФильтрациюКураторов();	
	
	ЭтаФорма.ТекущийФильтрСтавкиНДС="";
	ОбновитьФильтрациюСтавкиНДС();	
	
	ЭтаФорма.ТекущийФильтрУслугиНоменклатуры="";
	ЭтаФорма.СмотретьУслугиНоменклатурыТолькоОшибки=Ложь;
	ОбновитьФильтрациюУслуг();	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкуОбновленияКоличестваДокументовНаОперации(йКоличествоДокументовНаОперации)
	йКоличествоДокументовНаОперации=Объект.КоличествоДокументовРеализацииНаИсполненииОперации+
								   Объект.КоличествоДокументовКорректировкиРеализацииНаИсполненииОперации;
	Если йКоличествоДокументовНаОперации>0 Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ДокументЗагрузки",Объект.Ссылка);
		Запрос.Текст="ВЫБРАТЬ
		             |	КОЛИЧЕСТВО(ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ДокументЗагрузки) КАК ОстатокДокументовНаОперации
		             |ИЗ
		             |	РегистрСведений.ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга КАК ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга
		             |ГДЕ
		             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ДокументЗагрузки = &ДокументЗагрузки
		             |	И ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ОкончаниеОперации = ДАТАВРЕМЯ(1, 1, 1)
		             |	И ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СтрокаНомер <> 0";
		йОстаток=Запрос.Выполнить().Выбрать();
		Если йОстаток.Следующий() Тогда
			йКоличествоДокументовНаОперации = йОстаток.ОстатокДокументовНаОперации;
		Иначе
			йКоличествоДокументовНаОперации = 0;
		КонецЕсли;
	КонецЕсли;
	Если йКоличествоДокументовНаОперации>0 Тогда
		Элементы.КнопкаДокументыНаОперации.Видимость=Истина;
		Элементы.КнопкаДокументыНаОперации.Доступность=Истина;
		ОкончаниеЧисла=йКоличествоДокументовНаОперации-Цел(йКоличествоДокументовНаОперации/10)*10;
		Если ОкончаниеЧисла = 1 Тогда
			Окончание="";
		ИначеЕсли ОкончаниеЧисла = 2 ИЛИ ОкончаниеЧисла = 3 ИЛИ ОкончаниеЧисла = 4 Тогда
			Окончание="а";
		Иначе
			Окончание="ов";
		КонецЕсли;
		Элементы.КнопкаДокументыНаОперации.Заголовок="  На операции сейчас "+СтрЗаменить(""+йКоличествоДокументовНаОперации,Символы.НПП,"")+" документ"+Окончание;
	ИначеЕсли Объект.КоличествоДокументовРеализацииНаИсполненииОперации+
			  Объект.КоличествоДокументовКорректировкиРеализацииНаИсполненииОперации > 0 Тогда
		Элементы.КнопкаДокументыНаОперации.Видимость=Истина;
		Элементы.КнопкаДокументыНаОперации.Доступность=Истина;
		Элементы.КнопкаДокументыНаОперации.Заголовок="Нажмите для обновления таблицы документов";
	Иначе
		Элементы.КнопкаДокументыНаОперации.Видимость=Ложь;
		Элементы.КнопкаДокументыНаОперации.Доступность=Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗаголовокФормы();
	РежимФормированияДокументов="0";
	//ОбновитьФильтрациюДокументов();
	//Если Объект.КоличествоДокументовРеализацииНаИсполненииОперации>0 ИЛИ
	//	 Объект.КоличествоДокументовКорректировкиРеализацииНаИсполненииОперации>0 Тогда
	//	 Если Вопрос("Обновить информацию по завершённым операциям?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
	//		Состояние("Обновляется информация в документе загрузки по завершённым операциям...");
	//		ОбновитьСтатусыПослеОперации();
	//	КонецЕсли;
	//КонецЕсли;
	ОбновитьШапкуТаблицыДокументаЗадолженностиМГМН();
	ОбновитьТранспарантОшибок();
	КоличествоДокументовНаОперации = Объект.КоличествоДокументовРеализацииНаИсполненииОперации +
									 Объект.КоличествоДокументовКорректировкиРеализацииНаИсполненииОперации;
	ОбновитьКнопкуОбновленияКоличестваДокументовНаОперации(КоличествоДокументовНаОперации);
	Если Модифицированность Тогда
		йЗаписатьБыстро();
	КонецЕсли;
	НаложитьНаФормуНовыйСтатус(Объект.абс_Статус);
	ИнициализацияФильтровТаблиц();
	Элементы.ДекорацияОсобоеВнимание.Заголовок="";
	Элементы.ДекорацияЗначенияТекущегоСтатуса.Заголовок=Объект.Ссылка.абс_Статус;
	Элементы.Заказы.Видимость=Ложь;
	Элементы.абс_СтатусНовый.СписокВыбора.Очистить();
	Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Объект.абс_Статус);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	ЭтаФорма.Заголовок=Метаданные.Документы.ttk_ЗагрузкаНачисленийИзБиллинга.Синоним+" № "+Объект.Номер+" от "+Объект.Дата;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьЗаголовокФормы();
	НаложитьНаФормуНовыйСтатус(Объект.Ссылка.абс_Статус);
	Элементы.ДекорацияЗначенияТекущегоСтатуса.Заголовок=Объект.Ссылка.абс_Статус;
	Если НЕ Модифицированность Тогда
		Элементы.ДекорацияОсобоеВнимание.Заголовок="";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СессияTPIНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ФормаВыбора = ПолучитьФорму("Документ.ttk_ЗагрузкаНачисленийИзБиллинга.Форма.ФормаВыбораСессии");
	ФормаВыбора.ЗакрыватьПриЗакрытииВладельца=Истина;
	ФормаВыбора.ЗакрыватьПриВыборе=Истина;
	ФормаВыбора.ВладелецФормы=ЭтаФорма.ЭтаФорма;
	ФормаВыбора.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
КонецПроцедуры

&НаКлиенте
Процедура ПриЗаписиНаКлиенте(Отказ, ТекущийОбъект, ПараметрыЗаписи)
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьДеталировкуПоДокументуПриИзменении(Элемент)
	Отбор = Новый Структура;
	Если СмотретьДеталировкуТолькоОшибки Тогда
		Отбор.Вставить("СтатусОшибка", Истина);
	КонецЕсли;
	ТекДанные = Элементы.ТаблицаДокументы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Отбор.Вставить("ИндексДокумента", ТекДанные.НомерСтроки);
	КонецЕсли;
	Элементы.ТаблицаДеталировка.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

&НаКлиенте
Процедура йttk_СоответствиеВБиллингеИЕисупеНормативноСправочнойИнформации(Команда)
	фНастройки = Новый НастройкиКомпоновкиДанных;
	йОтбор = фНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	йОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Регистратор");
	йОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	йОтбор.ПравоеЗначение = Объект.Ссылка;
	йОтбор.Использование = Истина;
	йОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Парамы = Новый Структура;
	Парамы.Вставить("ФиксированныеНастройки", фНастройки);
	ОткрытьФорму("РегистрСведений.ttk_СоответствиеВБиллингеИЕисупеНормативноСправочнойИнформации.ФормаСписка",Парамы);
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьУслугиНоменклатурыТолькоОшибкиПриИзменении(Элемент)
	ОбновитьФильтрациюУслуг();
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьАналитикиТолькоОшибкиПриИзменении(Элемент)
	ОбновитьФильтрациюАналитик();
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьКонтрагентовДоговорыТолькоОшибкиПриИзменении(Элемент)
	ОбновитьФильтрациюДоговоров();
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьДокументыТолькоОшибкиПриИзменении(Элемент)
	ОбновитьФильтрациюДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьДеталировкуТолькоОшибкиПриИзменении(Элемент)
	ОбновитьФильтрациюДеталировки();	
КонецПроцедуры

&НаКлиенте
Процедура йКомандаСоздатьДоговор(Команда)
	// начальные установки +++
	МетодикаТрансфертногоЦенообразования = Справочники.абс_МетодикиДляТрансфертногоЦенообразования.НайтиПоКоду("000000002");
	ВидДеятельностиСвязь = Справочники.абс_ВидыДеятельностиКТТК.НайтиПоКоду("000000005");
	// начальные установки ---
	МассивОперации=Новый Массив;
	МассивОперации=Элементы.ТаблицаКонтрагентыДоговоры.ВыделенныеСтроки;
	КолДог=Объект.КонтрагентыДоговоры.Количество();
	ЗапросДоги=Новый Запрос;
	ЗапросДоги.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ДоговорыКонтрагентов.Ссылка КАК Договор,
	                 |	ДоговорыКонтрагентов.Номер КАК Номер,
	                 |	ДоговорыКонтрагентов.абс_СтатусДоговора,
	                 |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК Валюта,
	                 |	ДоговорыКонтрагентов.абс_ЛицевойСчетБиллинга КАК ЛицевойСчет
	                 |ИЗ
	                 |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                 |ГДЕ
	                 |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	                 |	И ДоговорыКонтрагентов.Владелец = &Контрагент
	                 |	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта
	                 |	И НЕ ДоговорыКонтрагентов.ЭтоГруппа
	                 |	И ДоговорыКонтрагентов.Организация = &Организация
	                 |	И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	                 |			ИЛИ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
	                 |	И ДоговорыКонтрагентов.абс_СтатусДоговора = ЗНАЧЕНИЕ(Перечисление.абсСтатусыДоговоров.Исполнение)";
	ЗапросДоги.УстановитьПараметр("Организация", Объект.МестонахождениеБиллинга.ОрганизацияУчета);
	Для йИнд=0 По МассивОперации.Количество()-1 Цикл
		йНомСтр=МассивОперации[йИнд];
		йНомСтр=йНомСтр-Цел(йНомСтр/КолДог)*КолДог;
		йСтр=Объект.КонтрагентыДоговоры[йНомСтр];
		Если НЕ ЗначениеЗаполнено(йСтр.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		Если йСтр.абс_СтатусКонтрагента<>Перечисления.абсСтатусыКонтрагентов.Активный И 
			 йСтр.абс_СтатусКонтрагента<>Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(йСтр.Договор) Тогда
			Если йСтр.абс_СтатусДоговора<>Перечисления.абсСтатусыДоговоров.Закрыт И
				 йСтр.абс_СтатусДоговора<>Перечисления.абсСтатусыДоговоров.Закрытие Тогда
				Продолжить;
			КонецЕсли;
		Иначе
// проверка на наличие договора в справочнике, во избежания задвоения договоров при сбоях
			ЗапросДоги.УстановитьПараметр("Контрагент", йСтр.Контрагент);
			ЗапросДоги.УстановитьПараметр("Валюта", йСтр.Валюта);
			йДогиКонтры=ЗапросДоги.Выполнить().Выгрузить();
			ФлагНашли=Ложь;
			Для каждого йДога Из йДогиКонтры Цикл
				Если НормализацияИмени(йСтр.НомерДоговора)=НормализацияИмени(йДога.Номер) И
					 НормализацияИмени(йСтр.ЛицевойСчет)=НормализацияИмени(йДога.ЛицевойСчет) Тогда
					ФлагНашли=Истина;
					йСтр.Договор=йДога.Договор;
					йСтр.абс_СтатусДоговора=йДога.абс_СтатусДоговора;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ФлагНашли Тогда
				ОбновитьДанныеПоДоговору(йСтр.НомерСтроки);
				Сообщить("Строка "+йСтр.НомерСтроки+" набор [кодКонтрагента="+йСтр.КодКонтрагента+"][НомерДоговора="+йСтр.НомерДоговора+"][ЛицевойСчет="+йСтр.ЛицевойСчет+"] найден договор "+йСтр.Договор+" [код="+йСтр.Договор.Код+"]");
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Попытка
// правильно закрыть договор реорганизации
			Если ЗначениеЗаполнено(йСтр.ДоговорСтарый) И йСтр.ЗакрыватьСтарый Тогда
				йНаименование="";
				Если Найти(Врег(йСтр.ДоговорСтарый.Наименование),"ЗАКР")=0 Тогда
					йНаименование="ЗАКР#"+йСтр.ДоговорСтарый.Наименование;
				КонецЕсли;
				йНомер="";
				Если Найти(Врег(йСтр.ДоговорСтарый.Номер),"ЗАКР")=0 Тогда
					йНомер="ЗАКР#"+йСтр.ДоговорСтарый.Номер;
				КонецЕсли;
				йЛСБ="";
				Если Найти(Врег(йСтр.ДоговорСтарый.абс_ЛицевойСчетБиллинга),"ЗАКР")=0 Тогда
					йЛСБ="ЗАКР#"+йСтр.ДоговорСтарый.абс_ЛицевойСчетБиллинга;
				КонецЕсли;
				йСтатус=NULL;
				Если йСтр.ДоговорСтарый.абс_СтатусДоговора<>Перечисления.абсСтатусыДоговоров.Закрыт И
					 йСтр.ДоговорСтарый.абс_СтатусДоговора<>Перечисления.абсСтатусыДоговоров.Закрытие Тогда
					йСтатус=Перечисления.абсСтатусыДоговоров.Закрытие;
				КонецЕсли;
// привести договор в нерабочее состояние: в Наименование, Номер и Лицевой счет добавить спереди префикс "Закр"
// и перевести договор в статус Закрытие
				Если йНаименование<>"" ИЛИ йНомер<>"" ИЛИ йЛСБ<>"" ИЛИ йСтатус<>NULL Тогда
					йДога=йСтр.ДоговорСтарый.ПолучитьОбъект();
					Если йНаименование<>"" Тогда
						йДога.Наименование=йНаименование;
					КонецЕсли;
					Если йНомер<>"" Тогда
						йДога.Номер=йНомер;
					КонецЕсли;
					Если йЛСБ<>"" Тогда
						йДога.абс_ЛицевойСчетБиллинга=йЛСБ;
					КонецЕсли;
					Если йСтатус<>NULL Тогда
						йДога.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Закрытие;
					КонецЕсли;
					йДога.ОбменДанными.Загрузка=Истина;
					йДога.Записать();
				КонецЕсли;
			КонецЕсли;
			Если НЕ йСтр.Контрагент.Покупатель Тогда
				Контра = йСтр.Контрагент.ПолучитьОбъект();
				Контра.Покупатель = Истина;
				Контра.ОбменДанными.Загрузка = Истина;
				Контра.Записать();
			КонецЕсли;	
			Дога=Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			Дога.Организация = Объект.Организация;
			Дога.Номер = СокрЛП(йСтр.НомерДоговора);
			Дога.Дата = йСтр.ДатаДоговора;
			Дога.абс_ДатаНачалаДействия = йСтр.ДатаДоговора;
			Дога.абс_ДатаРегистрацииДоговора = йСтр.ДатаДоговора;
			Дога.Владелец = йСтр.Контрагент.Ссылка;
			Дога.абс_ВидДеятельности = ВидДеятельностиСвязь;
			Дога.ВестиПоДокументамРасчетовСКонтрагентом = Ложь;
			Дога.УстановитьНовыйКод("_");
			Дога.Наименование = "" + Дога.Номер + ?(ЗначениеЗаполнено(Дога.Дата)," от " + Формат(Дога.Дата,"ДФ=dd.MM.yyyy"),"");
			Дога.ВалютаВзаиморасчетов = йСтр.Валюта; //Объект.Валюты[йСтр.ИндексВалюты-1].Валюта;
			Если Дога.ВалютаВзаиморасчетов.Код = "36" ИЛИ Дога.ВалютаВзаиморасчетов = "124" Тогда
				Дога.РасчетыВУсловныхЕдиницах = Истина;
			КонецЕсли;
			Дога.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			Дога.абс_ТипДоговора = Перечисления.абсТипыДоговоров.Договор;
			Дога.абс_ВидДоговора = Справочники.абс_ПредметДоговораГК.ДоговорОказанияУслуг;
			Дога.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
			Дога.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение;
			Дога.абс_Ответственный = глЗначениеПеременной("глТекущийПользователь");
			Дога.абс_КлиентБиллинга	= Истина;
			Дога.абс_ЛицевойСчетБиллинга = йСтр.ЛицевойСчет;
			Дога.ввв_МестонахождениеБиллинга = Объект.МестонахождениеБиллинга;
			Если йСтр.Контрагент.ИНН ="7708503727" тогда
				Дога.абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования = МетодикаТрансфертногоЦенообразования;
			КонецЕсли;
			Дога.Записать();
			йСтр.Договор=Дога.Ссылка;
			йСтр.абс_СтатусДоговора=Дога.абс_СтатусДоговора;
			ОбновитьДанныеПоДоговору(йСтр.НомерСтроки);
			Сообщить("Строка "+йСтр.НомерСтроки+" набор [кодКонтрагента="+йСтр.КодКонтрагента+"][НомерДоговора="+йСтр.НомерДоговора+"][ЛицевойСчет="+йСтр.ЛицевойСчет+"] создан договор "+йСтр.Договор+" [код="+йСтр.Договор.Код+"]");
		Исключение
		КонецПопытки;
	КонецЦикла;
	Элементы.ТаблицаКонтрагентыДоговоры.ВыделенныеСтроки.Очистить();
	Элементы.ТаблицаКонтрагентыДоговоры.ВыделенныеСтроки.Добавить(0);
	ОбновитьТранспарантОшибок();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыПослеОперации()
	// этап определения строк прошедших обработку
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	йТабл=Новый ТаблицаЗначений;
	йТабл.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
	Для каждого йСтр Из Объект.Документы Цикл
		Если йСтр.ТипЗагрузкиДокумента = Перечисления.ttk_ОперацииСДокументамиНачислений.Отказать Тогда
			Продолжить;
		КонецЕсли;
		Если йСтр.ОперацияСДокументом = Перечисления.ttk_ОперацииСДокументамиНачислений.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		йЭлем=йТабл.Добавить();
		йЭлем.НомерСтроки=йСтр.НомерСтроки;
	КонецЦикла;
	Запрос.УстановитьПараметр("ОсновнаяТаблица",йТабл);
	Запрос.УстановитьПараметр("ДокументЗагрузки",Объект.Ссылка);
	Запрос.УстановитьПараметр("МесяцЗагрузки",Объект.MONT_F);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.Текст="ВЫБРАТЬ
	             |	ВТ_.НомерСтроки КАК НомерСтроки
	             |ПОМЕСТИТЬ ВТ_ИсходнаяТаблица
	             |ИЗ
	             |	&ОсновнаяТаблица КАК ВТ_
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СтрокаНомер,
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СчетНаОплату КАК СчетНаОплату,
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.Реализация КАК Реализация,
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.КорректировкаРеализации КАК КорректировкаРеализации,
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СчетФактура КАК СчетФактура,
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.НачалоОперации КАК НачалоОперации,
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ОкончаниеОперации КАК ОкончаниеОперации
	             |ПОМЕСТИТЬ ВТ_РеальнаяОчередь
	             |ИЗ
	             |	РегистрСведений.ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга КАК ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга
	             |ГДЕ
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ДокументЗагрузки = &ДокументЗагрузки
	             |	И ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.НачалоОперации <> ДАТАВРЕМЯ(1, 1, 1)
	             |	И ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ОкончаниеОперации <> ДАТАВРЕМЯ(1, 1, 1)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВТ_ИсходнаяТаблица.НомерСтроки,
	             |	ВТ_РеальнаяОчередь.СчетНаОплату,
	             |	ВТ_РеальнаяОчередь.Реализация,
	             |	ВТ_РеальнаяОчередь.КорректировкаРеализации,
	             |	ВТ_РеальнаяОчередь.СчетФактура,
	             |	ВЫБОР
	             |		КОГДА ВТ_РеальнаяОчередь.СтрокаНомер ЕСТЬ NULL 
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ИСТИНА
	             |	КОНЕЦ КАК НеСбойный
	             |ИЗ
	             |	ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеальнаяОчередь КАК ВТ_РеальнаяОчередь
	             |		ПО ВТ_ИсходнаяТаблица.НомерСтроки = ВТ_РеальнаяОчередь.СтрокаНомер";
	// этап заполнения строк прошедших обработку
	// этап зануления строк ушедших в очередь на обработку, но отсутствующих в очереди
	// этап обновления статуса строк отправленных в обработку
	йСтроки=Запрос.Выполнить().Выгрузить();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Для каждого йСтр Из йСтроки Цикл
		йСтрока = Объект.Документы[йСтр.НомерСтроки-1];
		йСтрока.ОперацияСДокументом = Перечисления.ttk_ОперацииСДокументамиНачислений.ПустаяСсылка();
		Если йСтр.НеСбойный Тогда
			йСтрока.СчетНаОплату = йСтр.СчетНаОплату;
			йСтрока.Реализация = йСтр.Реализация;
			йСтрока.КорректировкаРеализации = йСтр.КорректировкаРеализации;
			йСтрока.СчетФактура = йСтр.СчетФактура;
		КонецЕсли;
		ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,йСтр.НомерСтроки-1);
		Модифицированность=Истина;
	КонецЦикла;
	РОО=РегистрыСведений.ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СоздатьНаборЗаписей();
	РОО.Отбор.ДокументЗагрузки.Установить(Объект.Ссылка);
	//РОО.Отбор.СтрокаНомер.Установить(йСтр.НомерСтроки);
	РОО.Прочитать();
	// идёт зануление очереди на операции по текущему документу загрузки
	РОО.Очистить();
	// идёт восстановление строки Задолженности МГМН в очереди после удаления очереди по документу загрузки
	Запрос.Текст="ВЫБРАТЬ
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ЗадолженностьМГМН,
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.НачалоОперации КАК НачалоОперации,
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ОкончаниеОперации КАК ОкончаниеОперации,
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.Ответственный,
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ЦельОперации
	             |ИЗ
	             |	РегистрСведений.ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга КАК ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга
	             |ГДЕ
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ДокументЗагрузки = &ДокументЗагрузки
	             |	И ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СтрокаНомер = 0";
	йСтроки=Запрос.Выполнить().Выбрать();
	Если йСтроки.Следующий() Тогда
		йРОО=РОО.Добавить();
		йРОО.ДокументЗагрузки=Объект.Ссылка;
		йРОО.СтрокаНомер=0;
		йРОО.Пул=0;
		йРОО.ЦельОперации=йСтроки.ЦельОперации;
		йРОО.ЗадолженностьМГМН=йСтроки.ЗадолженностьМГМН;
		йРОО.НачалоОперации=йСтроки.НачалоОперации;
		йРОО.ОкончаниеОперации=йСтроки.ОкончаниеОперации;
		йРОО.Ответственный=йСтроки.Ответственный;
		Модифицированность=Истина;
	КонецЕсли;
	РОО.Записать();
	ОтображениеМодифицированности();
КонецПроцедуры

&НаКлиенте
Функция йКомандаСоздатьИПровестиДокументы(Команда,йКоличествоДокументовНаОперации)
	// этап определения порции постановки в очередь
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;                            
	йТабл=Новый ТаблицаЗначений;
	йТабл.Колонки.Добавить("ИндексСтроки",Новый ОписаниеТипов("Число"));
	йТабл.Колонки.Добавить("СчетНаОплату",Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"));
	йТабл.Колонки.Добавить("Реализация",Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	йТабл.Колонки.Добавить("КорректировкаРеализации",Новый ОписаниеТипов("ДокументСсылка.КорректировкаРеализации"));
	йТабл.Колонки.Добавить("СчетФактура",Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
	Для каждого йСтр Из Объект.Документы Цикл
		Если йСтр.ТипЗагрузкиДокумента = Перечисления.ttk_ОперацииСДокументамиНачислений.Отказать Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ йСтр.ОперацияСДокументом = Перечисления.ttk_ОперацииСДокументамиНачислений.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		Если йСтр.Статус = Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов ИЛИ
			 йСтр.Статус = Перечисления.ttk_СтатусыЭлементовЗагрузки.Загружен Тогда
		Иначе
			 Продолжить;
		КонецЕсли;
		йЭлем=йТабл.Добавить();
		йЭлем.ИндексСтроки=йСтр.НомерСтроки-1;
		йЭлем.СчетНаОплату=йСтр.СчетНаОплату;
		йЭлем.Реализация=йСтр.Реализация;
		йЭлем.КорректировкаРеализации=йСтр.КорректировкаРеализации;
		йЭлем.СчетФактура=йСтр.СчетФактура;
	КонецЦикла;
	Запрос.УстановитьПараметр("ОсновнаяТаблица",йТабл);
	_Строки=Новый Массив;
	Для каждого йСтр Из Элементы.ТаблицаДокументы.ВыделенныеСтроки Цикл
		_Строки.Добавить(йСтр-Цел(йСтр/Объект.Документы.Количество())*Объект.Документы.Количество());
	КонецЦикла;
	Запрос.УстановитьПараметр("СтрокиНаЗаказ",_Строки);
	Запрос.Текст="ВЫБРАТЬ
	             |	ВТ_.ИндексСтроки,
	             |	ВТ_.СчетНаОплату КАК СчетНаОплату,
	             |	ВТ_.Реализация КАК Реализация,
	             |	ВТ_.КорректировкаРеализации КАК КорректировкаРеализации,
	             |	ВТ_.СчетФактура КАК СчетФактура
	             |ПОМЕСТИТЬ ВТ_ИсходнаяТаблица
	             |ИЗ
	             |	&ОсновнаяТаблица КАК ВТ_
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВТ_ИсходнаяТаблица.ИндексСтроки,
	             |	ВТ_ИсходнаяТаблица.СчетНаОплату КАК СчетНаОплату,
	             |	ВТ_ИсходнаяТаблица.Реализация КАК Реализация,
	             |	ВТ_ИсходнаяТаблица.КорректировкаРеализации КАК КорректировкаРеализации,
	             |	ВТ_ИсходнаяТаблица.СчетФактура КАК СчетФактура
	             |ИЗ
	             |	ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
	             |ГДЕ
	             |	ВТ_ИсходнаяТаблица.ИндексСтроки В(&СтрокиНаЗаказ)";
	// этап записи порции в очередь
	// этап установки флага исполнения операции
	йСтроки=Запрос.Выполнить().Выбрать();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Если йСтроки.Количество()=0 Тогда
		Возврат 0;
	КонецЕсли;
	Пока йСтроки.Следующий() Цикл
		РОО=РегистрыСведений.ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СоздатьНаборЗаписей();
		РОО.Отбор.ДокументЗагрузки.Установить(Объект.Ссылка);
		РОО.Отбор.СтрокаНомер.Установить(йСтроки.ИндексСтроки+1);
		РОО.Прочитать();
		РОО.Очистить();
		йРОО=РОО.Добавить();
		йРОО.ДокументЗагрузки = Объект.Ссылка;
		йРОО.СтрокаНомер = йСтроки.ИндексСтроки+1;
		йРОО.Пул = Цел(йРОО.СтрокаНомер/100);
		йРОО.ЦельОперации = Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение;
		йРОО.НачалоОперации = Дата(1,1,1);
		йРОО.ОкончаниеОперации = Дата(1,1,1);
		йРОО.СчетНаОплату=йСтроки.СчетНаОплату;
		йРОО.Реализация=йСтроки.Реализация;
		йРОО.КорректировкаРеализации=йСтроки.КорректировкаРеализации;
		йРОО.СчетФактура=йСтроки.СчетФактура;
		йРОО.Ответственный = ?(ЗначениеЗаполнено(Объект.МестонахождениеБиллинга.ПользовательПоУмолчанию),Объект.МестонахождениеБиллинга.ПользовательПоУмолчанию,глЗначениеПеременной("глТекущийПользователь"));
		РОО.ОбменДанными.Загрузка=Истина;
		РОО.Записать();
		Объект.Документы[йСтроки.ИндексСтроки].ОперацияСДокументом = Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение;
		Модифицированность=Истина;
	КонецЦикла;
	Элементы.ТаблицаДокументы.ВыделенныеСтроки.Очистить();
	Элементы.ТаблицаДокументы.ВыделенныеСтроки.Добавить(0);
	ОбновитьТранспарантОшибок();
	ОбновитьКнопкуОбновленияКоличестваДокументовНаОперации(йКоличествоДокументовНаОперации);
	Если Модифицированность Тогда
		йЗаписатьБыстро();
	КонецЕсли;
	Возврат йСтроки.Количество();
КонецФункции

&НаКлиенте
Функция йКомандаОтменитьСозданиеИПроведениеВыделенныхДокументов(Команда,йКоличествоДокументовНаОперации)
	// накладываем выделенное в Документы на реальную очередь для операции = Проведение 
	Запрос=Новый Запрос;
	_Строки=Новый Массив;
	Для каждого йСтр Из Элементы.ТаблицаДокументы.ВыделенныеСтроки Цикл
		_Строки.Добавить(йСтр+1-Цел(йСтр/Объект.Документы.Количество())*Объект.Документы.Количество());
	КонецЦикла;
	Запрос.УстановитьПараметр("СтрокиНаЗаказ",_Строки);
	Запрос.УстановитьПараметр("Дока",Объект.Ссылка);
	Запрос.Текст="ВЫБРАТЬ
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СтрокаНомер
	             |ИЗ
	             |	РегистрСведений.ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга КАК ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга
	             |ГДЕ
	             |	ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ЦельОперации = ЗНАЧЕНИЕ(Перечисление.ttk_ОперацииСДокументамиНачислений.Проведение)
	             |	И ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.НачалоОперации = ДАТАВРЕМЯ(1, 1, 1)
	             |	И ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ОкончаниеОперации = ДАТАВРЕМЯ(1, 1, 1)
	             |	И ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СтрокаНомер В(&СтрокиНаЗаказ)
	             |	И ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.ДокументЗагрузки = &Дока";
	Оперы=Запрос.Выполнить().Выбрать();
	РОО=РегистрыСведений.ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СоздатьНаборЗаписей();
	Пока Оперы.Следующий() Цикл
		РОО.Отбор.ДокументЗагрузки.Установить(Объект.Ссылка);
		РОО.Отбор.СтрокаНомер.Установить(Оперы.СтрокаНомер);
		РОО.Прочитать();
		РОО.Очистить();
		РОО.Записать();
		Объект.Документы[Оперы.СтрокаНомер-1].ОперацияСДокументом=Перечисления.ttk_ОперацииСДокументамиНачислений.ПустаяСсылка();
		Модифицированность=Истина;
	КонецЦикла;
	ОбновитьТранспарантОшибок();
	ОбновитьКнопкуОбновленияКоличестваДокументовНаОперации(йКоличествоДокументовНаОперации);
	Если Модифицированность Тогда
		йЗаписатьБыстро();
	КонецЕсли;
	Возврат Оперы.Количество();
КонецФункции

&НаКлиенте
Функция йКомандаУдалитьРанееСозданныеИПроведенныеДокументы(Команда,йКоличествоДокументовНаОперации)
	// этап определения порции постановки в очередь
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	йТабл=Новый ТаблицаЗначений;
	йТабл.Колонки.Добавить("ИндексСтроки",Новый ОписаниеТипов("Число"));
	йТабл.Колонки.Добавить("СчетНаОплату",Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"));
	йТабл.Колонки.Добавить("Реализация",Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	йТабл.Колонки.Добавить("КорректировкаРеализации",Новый ОписаниеТипов("ДокументСсылка.КорректировкаРеализации"));
	йТабл.Колонки.Добавить("СчетФактура",Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
	Для каждого йСтр Из Объект.Документы Цикл
		Если йСтр.ТипЗагрузкиДокумента = Перечисления.ttk_ОперацииСДокументамиНачислений.Отказать Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ йСтр.ОперацияСДокументом = Перечисления.ttk_ОперацииСДокументамиНачислений.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		Если йСтр.Статус = Перечисления.ttk_СтатусыЭлементовЗагрузки.Проведен ИЛИ
			 йСтр.Статус = Перечисления.ttk_СтатусыЭлементовЗагрузки.Загружен Тогда
		Иначе
			 Продолжить;
		КонецЕсли;
		йЭлем=йТабл.Добавить();
		йЭлем.ИндексСтроки=йСтр.НомерСтроки-1;
		йЭлем.СчетНаОплату=йСтр.СчетНаОплату;
		йЭлем.Реализация=йСтр.Реализация;
		йЭлем.КорректировкаРеализации=йСтр.КорректировкаРеализации;
		йЭлем.СчетФактура=йСтр.СчетФактура;
	КонецЦикла;
	Запрос.УстановитьПараметр("ОсновнаяТаблица",йТабл);
	_Строки=Новый Массив;
	Для каждого йСтр Из Элементы.ТаблицаДокументы.ВыделенныеСтроки Цикл
		_Строки.Добавить(йСтр-Цел(йСтр/Объект.Документы.Количество())*Объект.Документы.Количество());
	КонецЦикла;
	Запрос.УстановитьПараметр("СтрокиНаЗаказ",_Строки);
	Запрос.Текст="ВЫБРАТЬ
	             |	ВТ_.ИндексСтроки,
	             |	ВТ_.СчетНаОплату КАК СчетНаОплату,
	             |	ВТ_.Реализация КАК Реализация,
	             |	ВТ_.КорректировкаРеализации КАК КорректировкаРеализации,
	             |	ВТ_.СчетФактура КАК СчетФактура
	             |ПОМЕСТИТЬ ВТ_ИсходнаяТаблица
	             |ИЗ
	             |	&ОсновнаяТаблица КАК ВТ_
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВТ_ИсходнаяТаблица.ИндексСтроки,
	             |	ВТ_ИсходнаяТаблица.СчетНаОплату КАК СчетНаОплату,
	             |	ВТ_ИсходнаяТаблица.Реализация КАК Реализация,
	             |	ВТ_ИсходнаяТаблица.КорректировкаРеализации КАК КорректировкаРеализации,
	             |	ВТ_ИсходнаяТаблица.СчетФактура КАК СчетФактура
	             |ИЗ
	             |	ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
	             |ГДЕ
	             |	ВТ_ИсходнаяТаблица.ИндексСтроки В(&СтрокиНаЗаказ)";
	// этап записи порции в очередь
	// этап установки флага исполнения операции
	йСтроки=Запрос.Выполнить().Выбрать();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Если йСтроки.Количество()=0 Тогда
		Возврат 0;
	КонецЕсли;
	Пока йСтроки.Следующий() Цикл
		РОО=РегистрыСведений.ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СоздатьНаборЗаписей();
		РОО.Отбор.ДокументЗагрузки.Установить(Объект.Ссылка);
		РОО.Отбор.СтрокаНомер.Установить(йСтроки.ИндексСтроки+1);
		РОО.Прочитать();
		РОО.Очистить();
		йРОО=РОО.Добавить();
		йРОО.ДокументЗагрузки = Объект.Ссылка;
		йРОО.СтрокаНомер = йСтроки.ИндексСтроки+1;
		йРОО.Пул = Цел(йРОО.СтрокаНомер/100);
		йРОО.ЦельОперации = Перечисления.ttk_ОперацииСДокументамиНачислений.Готов;
		йРОО.НачалоОперации = Дата(1,1,1);
		йРОО.ОкончаниеОперации = Дата(1,1,1);
		йРОО.СчетНаОплату=йСтроки.СчетНаОплату;
		йРОО.Реализация=йСтроки.Реализация;
		йРОО.КорректировкаРеализации=йСтроки.КорректировкаРеализации;
		йРОО.СчетФактура=йСтроки.СчетФактура;
		йРОО.Ответственный = ?(ЗначениеЗаполнено(Объект.МестонахождениеБиллинга.ПользовательПоУмолчанию),Объект.МестонахождениеБиллинга.ПользовательПоУмолчанию,глЗначениеПеременной("глТекущийПользователь"));
		РОО.Записать();
		Объект.Документы[йСтроки.ИндексСтроки].ОперацияСДокументом = Перечисления.ttk_ОперацииСДокументамиНачислений.Готов;
		Модифицированность=Истина;
	КонецЦикла;
	Элементы.ТаблицаДокументы.ВыделенныеСтроки.Очистить();
	Элементы.ТаблицаДокументы.ВыделенныеСтроки.Добавить(0);
	ОбновитьТранспарантОшибок();
	ОбновитьКнопкуОбновленияКоличестваДокументовНаОперации(йКоличествоДокументовНаОперации);
	Если Модифицированность Тогда
		йЗаписатьБыстро();
	КонецЕсли;
	Возврат йСтроки.Количество();
КонецФункции

&НаКлиенте
Процедура йКомандаПодобратьВручнуюЗаведенныеДокументы(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура йКомандаОтказатьДокументамЗагрузкиВОперацииЗагрузкиВЕИСУП(Команда)
	Если Вопрос("Вы действительно хотите перевести текущую строку в статус ОТКАЗАТЬ?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Элементы.ТаблицаДокументы.ТекущиеДанные.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Отказать;
	ОбновитьТранспарантОшибок();
	Если Модифицированность Тогда
		йЗаписатьБыстро();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентыДоговорыДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ТекДанные=Элементы.ТаблицаКонтрагентыДоговоры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Валюта) Тогда
		Предупреждение("Поле Валюта не определилось. Необходимо перезагрузить сессию после исправления в биллинге!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
		Предупреждение("Поле Контрагент не заполнено");
		Возврат;
	КонецЕсли;
	ДогаСтарая=ТекДанные.Договор;
	ФормаВыбора = ПолучитьФорму("Документ.ttk_ЗагрузкаНачисленийИзБиллинга.Форма.ФормаВыбораДоговора");
	ФормаВыбора.ЗакрыватьПриЗакрытииВладельца=Истина;
	ФормаВыбора.ЗакрыватьПриВыборе=Истина;
	ФормаВыбора.ВладелецФормы=ЭтаФорма.ЭтаФорма;
	ФормаВыбора.ОткрытьМодально();
	Если ДогаСтарая=ТекДанные.Договор Тогда
		Возврат;
	КонецЕсли;
	Состояние("Обновляется информация после изменения договора...");
	ОбновитьДанныеПоДоговору(ТекДанные.НомерСтроки);
	ОбновитьТранспарантОшибок();
	//Записать(РежимЗаписиДокумента.Запись,РежимПроведенияДокумента.Неоперативный);
	//Записать();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентыДоговорыДоговорОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ТекДанные=Элементы.ТаблицаКонтрагентыДоговоры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Договор) Тогда
		Предупреждение("Поле Договор не заполнено");
		Возврат;
	КонецЕсли;
	СтатусСтарый=ТекДанные.абс_СтатусДоговора;
	ФормаЭлемента=ТекДанные.Договор.Ссылка.ПолучитьФорму("ФормаЭлемента");
	ФормаЭлемента.ОткрытьМодально();
	Если СтатусСтарый=ТекДанные.Договор.абс_СтатусДоговора Тогда
		Возврат;
	КонецЕсли;
	Состояние("Обновляется информация после редактирования договора...");
	ОбновитьДанныеПоДоговору(ТекДанные.НомерСтроки);
	ОбновитьТранспарантОшибок();
	//Записать(РежимЗаписиДокумента.Запись,РежимПроведенияДокумента.Неоперативный);
	//Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоДоговору(ИндексДоговора)
	ТекДанные=Объект.КонтрагентыДоговоры[ИндексДоговора-1];
	Если ЗначениеЗаполнено(ТекДанные.Договор) Тогда
		ТекДанные.абс_СтатусДоговора=ТекДанные.Договор.абс_СтатусДоговора;
	Иначе
		ТекДанные.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.ПустаяСсылка();
	КонецЕсли;
	ОбновлениеСтатусаОбъектаЗагрузки(ИндексДоговора-1);
	Для каждого йСтр Из Объект.Документы Цикл
		Если йСтр.ИндексДоговора<>ИндексДоговора Тогда
			Продолжить;
		КонецЕсли;
		Если ТекДанные.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Исполнение Тогда
			йСтр.Договор=ТекДанные.Договор;
		Иначе
			йСтр.Договор=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,йСтр.НомерСтроки-1);
	КонецЦикла;
	Если Объект.МестонахождениеБиллинга.БиллингМГМН И Объект.ЗадолженностьМГМН.Количество()>0 Тогда
		ФлагГотов=Истина;
		Для каждого йСтр Из Объект.ЗадолженностьМГМН Цикл
			Если йСтр.ИндексДоговора=ИндексДоговора Тогда
				Если ТекДанные.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Исполнение Тогда
					йСтр.Договор=ТекДанные.Договор;
				Иначе
					йСтр.Договор=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				КонецЕсли;
				ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,,йСтр.НомерСтроки-1);
			КонецЕсли;
			Если йСтр.СтатусОшибка Тогда
				ФлагГотов=Ложь;
			КонецЕсли;
		КонецЦикла;
		ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,,,ФлагГотов);
	КонецЕсли;
	Модифицированность=Истина;
	ОтображениеМодифицированности();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентыДоговорыКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ТекДанные=Элементы.ТаблицаКонтрагентыДоговоры.ТекущиеДанные;
	КонтрагентСтарый=ТекДанные.Контрагент;
	ФормаВыбора = Справочники.Контрагенты.ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.ЗакрыватьПриЗакрытииВладельца=Истина;
	ФормаВыбора.ЗакрыватьПриВыборе=Истина;
	ФормаВыбора.РежимВыбора=Истина;
	ФормаВыбора.НачальноеЗначениеВыбора=КонтрагентСтарый.Ссылка;
	ФормаВыбора.ВладелецФормы=ЭтаФорма.ЭтаФорма;
	ФормаВыбора.ОткрытьМодально();
	йВыбор=ФормаВыбора.ТекущийЭлемент.ТекущаяСтрока.Ссылка;
	Если КонтрагентСтарый=йВыбор Тогда
		Возврат;
	КонецЕсли;
	Состояние("Обновляется информация после изменения контрагента...");
	Если КонтрагентСтарый<>йВыбор Тогда
		КонтрагентИсходный=Справочники.Контрагенты.НайтиПоКоду(ТекДанные.КодКонтрагента);
		Если КонтрагентИсходный=йВыбор Тогда
			ТекДанные.Договор=ТекДанные.ДоговорСтарый;
			ТекДанные.ДоговорСтарый=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ТекДанные.КонтрагентСтарый=Справочники.Контрагенты.ПустаяСсылка();
		Иначе
			ТекДанные.ДоговорСтарый=ТекДанные.Договор;
			ТекДанные.Договор=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ТекДанные.КонтрагентСтарый=КонтрагентИсходный;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекДанные.Договор) Тогда
			Запрос=Новый Запрос;
			Запрос.УстановитьПараметр("Контрагент",йВыбор);
			Запрос.УстановитьПараметр("Организация",Объект.Организация);
			Запрос.Текст="ВЫБРАТЬ
			             |	ДоговорыКонтрагентов.Ссылка КАК Договор,
			             |	ДоговорыКонтрагентов.Номер КАК НомерДоговора,
			             |	ДоговорыКонтрагентов.абс_СтатусДоговора,
			             |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК Валюта,
			             |	ДоговорыКонтрагентов.абс_ЛицевойСчетБиллинга КАК ЛицевойСчет
			             |ИЗ
			             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			             |ГДЕ
			             |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
			             |	И НЕ ДоговорыКонтрагентов.ЭтоГруппа
			             |	И ДоговорыКонтрагентов.Владелец = &Контрагент
			             |	И ДоговорыКонтрагентов.Организация = &Организация
			             |	И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
			             |			ИЛИ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))";
			йДогиРеальные=Запрос.Выполнить().Выгрузить();
			Для каждого йДога Из йДогиРеальные Цикл
				Если НормализацияИмени(йДога.НомерДоговора)=НормализацияИмени(ТекДанные.НомерДоговора) И
						 НормализацияИмени(йДога.ЛицевойСчет)=НормализацияИмени(ТекДанные.ЛицевойСчет) И
						 йДога.Валюта=ТекДанные.Валюта Тогда
					ТекДанные.Договор=йДога.Договор;
					//ТекДанные.абс_СтатусДоговора=йДогиРеальные.абс_СтатусДоговора;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЗначениеЗаполнено(ТекДанные.Договор) Тогда
				Если Объект.МестонахождениеБиллинга.УчитыватьСписокЛицевыхСчетовНаОдномДоговоре Тогда
					Для каждого йДога Из йДогиРеальные Цикл
						Если НормализацияИмени(йДога.НомерДоговора)=НормализацияИмени(ТекДанные.НомерДоговора) И
								 йДога.Валюта=ТекДанные.Валюта Тогда
							ТекДанные.Договор=йДога.Договор;
							//ТекДанные.абс_СтатусДоговора=йДогиРеальные.абс_СтатусДоговора;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ТекДанные.Контрагент=йВыбор;
	ТекДанные.абс_СтатусКонтрагента=ТекДанные.Контрагент.абс_СтатусКонтрагента;
	Если ЗначениеЗаполнено(ТекДанные.Договор) Тогда
		ТекДанные.абс_СтатусДоговора=ТекДанные.Договор.абс_СтатусДоговора;
	Иначе
		ТекДанные.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.ПустаяСсылка();
	КонецЕсли;
	ТекДанные.ТипКонтрагента=ТекДанные.Контрагент.абс_ТипыКонтрагентов;
	ОбновитьДанныеПоКонтрагенту(ТекДанные.НомерСтроки,(КонтрагентСтарый<>йВыбор));
	ОбновитьТранспарантОшибок();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентыДоговорыКонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ТекДанные=Элементы.ТаблицаКонтрагентыДоговоры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
		Предупреждение("Поле Контрагент не заполнено");
		Возврат;
	КонецЕсли;
	СтатусСтарый=ТекДанные.абс_СтатусКонтрагента;
	ТипСтарый=ТекДанные.ТипКонтрагента;
	ФормаЭлемента=ТекДанные.Контрагент.Ссылка.ПолучитьФорму("ФормаЭлемента");
	ФормаЭлемента.ОткрытьМодально();
	Если СтатусСтарый=ТекДанные.Контрагент.абс_СтатусКонтрагента И ТипСтарый=ТекДанные.Контрагент.абс_ТипыКонтрагентов Тогда
		Возврат;
	КонецЕсли;
	ТекДанные.абс_СтатусКонтрагента=ТекДанные.Контрагент.абс_СтатусКонтрагента;
	ТекДанные.ТипКонтрагента=ТекДанные.Контрагент.абс_ТипыКонтрагентов;
	ОбновитьДанныеПоКонтрагенту(ТекДанные.НомерСтроки);
	ОбновитьТранспарантОшибок();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоКонтрагенту(ИндексДоговора, ФлагДругогоКонтрагента=Ложь)
	ТекДанные=Объект.КонтрагентыДоговоры[ИндексДоговора-1];
	Для каждого йДога Из Объект.КонтрагентыДоговоры Цикл
		Если йДога.Контрагент<>ТекДанные.Контрагент Тогда
			Продолжить;
		КонецЕсли;
		Если ФлагДругогоКонтрагента Тогда
			Если йДога.НомерСтроки<>ИндексДоговора Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ИндексВДоговорах=йДога.НомерСтроки;
		Если ИндексДоговора<>ИндексВДоговорах Тогда
			йДога.абс_СтатусКонтрагента=ТекДанные.абс_СтатусКонтрагента;
			йДога.ТипКонтрагента=ТекДанные.ТипКонтрагента;
		КонецЕсли;
		ОбновлениеСтатусаОбъектаЗагрузки(ИндексВДоговорах-1);
		Для каждого йСтр Из Объект.Документы Цикл
			Если йСтр.ИндексДоговора<>ИндексВДоговорах Тогда
				Продолжить;
			КонецЕсли;
			Если ТекДанные.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Активный ИЛИ
				 ТекДанные.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов Тогда
				йСтр.Контрагент=ТекДанные.Контрагент;
				йСтр.ТипКонтрагента=ТекДанные.ТипКонтрагента;
			Иначе
				йСтр.Контрагент=Справочники.Контрагенты.ПустаяСсылка();
				йСтр.ТипКонтрагента=Справочники.абс_ТипыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
			Если ТекДанные.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Исполнение Тогда
				йСтр.Договор=ТекДанные.Договор;
			Иначе
				йСтр.Договор=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
			ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,йСтр.НомерСтроки-1);
		КонецЦикла;
		Если Объект.МестонахождениеБиллинга.БиллингМГМН И Объект.ЗадолженностьМГМН.Количество()>0 Тогда
			ФлагГотов=Истина;
			Для каждого йСтр Из Объект.ЗадолженностьМГМН Цикл
				Если йСтр.ИндексДоговора=ИндексВДоговорах Тогда
					Если ТекДанные.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Активный ИЛИ
						 ТекДанные.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов Тогда
						йСтр.Контрагент=ТекДанные.Контрагент;
					Иначе
						йСтр.Контрагент=Справочники.Контрагенты.ПустаяСсылка();
					КонецЕсли;
					Если ТекДанные.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Исполнение Тогда
						йСтр.Договор=ТекДанные.Договор;
					Иначе
						йСтр.Договор=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					КонецЕсли;
					ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,,йСтр.НомерСтроки-1);
				КонецЕсли;
				Если йСтр.СтатусОшибка Тогда
					ФлагГотов=Ложь;
				КонецЕсли;
			КонецЦикла;
			ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,,,ФлагГотов);
		КонецЕсли;
	КонецЦикла;
	Модифицированность=Истина;
	ОтображениеМодифицированности();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность Тогда
		йКнопки=Новый СписокЗначений;
		йКнопки.Добавить(КодВозвратаДиалога.Да,"Сохранить и выйти");
		йКнопки.Добавить(КодВозвратаДиалога.Нет,"Выйти без сохранения");
		йКнопки.Добавить(КодВозвратаДиалога.Отмена,"Не выходить");
		йКод = Вопрос("Вы сейчас хотите:",йКнопки,);
		СтандартнаяОбработка = Ложь;
		Если йКод = КодВозвратаДиалога.Да Тогда
			йЗаписатьБыстро();
			Отказ = Ложь;
		ИначеЕсли йКод = КодВозвратаДиалога.Нет Тогда
			Отказ = Ложь;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФильтрациюДеталировки()
	Отбор = Новый Структура;
	Если СмотретьДеталировкуТолькоОшибки Тогда
		Отбор.Вставить("СтатусОшибка", Истина);
	КонецЕсли;
	Если СмотретьДеталировкуОшибкиАналитики Тогда
		Отбор.Вставить("СтатусОшибкаАналитики", Истина);
	КонецЕсли;
	Если ПустаяСтрока(ЭтаФорма.ТекущийФильтрДеталировки) Тогда
		ЭтаФорма.СмотретьДеталировкуПоФильтру=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьДеталировкуПоФильтру.Доступность=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьДеталировкуПоФильтру.Заголовок="";
	Иначе
		ЭтаФорма.Элементы.ПолеСмотретьДеталировкуПоФильтру.Доступность=Истина;
		Если ЭтаФорма.СмотретьДеталировкуПоФильтру Тогда
			ТекДанные=Неопределено;
			йИндекс="";
			йЗаголовок="Отбор по ";
			Если ЭтаФорма.ТекущийФильтрДеталировки="Документы" Тогда
				ТекДанные=Элементы.ТаблицаДокументы.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Документу";
				йИндекс="ИндексДокумента";
			ИначеЕсли ЭтаФорма.ТекущийФильтрДеталировки="Договоры" Тогда
				ТекДанные=Элементы.ТаблицаКонтрагентыДоговоры.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Договору";
				йИндекс="ИндексДоговора";
			ИначеЕсли ЭтаФорма.ТекущийФильтрДеталировки="Услуги" Тогда
				ТекДанные=Элементы.ТаблицаУслугиНоменклатуры.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Услуге";
				йИндекс="ИндексУслуги";
			ИначеЕсли ЭтаФорма.ТекущийФильтрДеталировки="Аналитики" Тогда
				ТекДанные=Элементы.ТаблицаАналитики.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Аналитике";
				йИндекс="ИндексАналитики";
			ИначеЕсли ЭтаФорма.ТекущийФильтрДеталировки="СтавкиНДС" Тогда
				ТекДанные=Элементы.ТаблицаСтавкиНДС.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Ставке НДС";
				йИндекс="ИндексСтавкиНДС";
			ИначеЕсли ЭтаФорма.ТекущийФильтрДеталировки="Валюты" Тогда
				ТекДанные=Элементы.ТаблицаВалюты.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Валюте";
				йИндекс="ИндексВалюты";
			ИначеЕсли ЭтаФорма.ТекущийФильтрДеталировки="Кураторы" Тогда
				ТекДанные=Элементы.ТаблицаКураторы.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Куратору";
				йИндекс="ИндексКуратора";
			КонецЕсли;
			Если ТекДанные<>Неопределено Тогда
				ЭтаФорма.Элементы.ПолеСмотретьДеталировкуПоФильтру.Заголовок=йЗаголовок+" "+ЭтаФорма.ТекущийФильтрНаименование;
				Отбор.Вставить(йИндекс, ТекДанные.НомерСтроки);
			Иначе
				ЭтаФорма.СмотретьДеталировкуПоФильтру=Ложь;
				ЭтаФорма.Элементы.ПолеСмотретьДеталировкуПоФильтру.Доступность=Ложь;
				ЭтаФорма.Элементы.ПолеСмотретьДеталировкуПоФильтру.Заголовок="";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.ТаблицаДеталировка.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

&НаКлиенте
Процедура йВосстановитьДокументИзСтатусаОтказать(Команда)
	Если Вопрос("Вы действительно хотите перевести текущую строку в статус ПРОВЕДЕНИЕ?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Элементы.ТаблицаДокументы.ТекущиеДанные.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение;
	ОбновитьТранспарантОшибок();
	Если Модифицированность Тогда
		йЗаписатьБыстро();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура йДобавитьДокументВручную(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура йУдалитьРучнойДокумент(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура йВыборОперацииИзВыпадающегоСписка(Команда)
	МенюОпераций=Новый СписокЗначений;
	ТекСтрока=Элементы.ТаблицаДокументы.ТекущиеДанные;
	Если ТекСтрока<>Неопределено Тогда
		КолСтрок=Элементы.ТаблицаДокументы.ВыделенныеСтроки.Количество();
		Если КолСтрок>0 Тогда
			Если Объект.Ссылка.абс_Статус=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
	// показать строку ЗАПУСТИТЬ операцию доведения до статуса ПРОВЕДЁН
				Если КолСтрок>1 ИЛИ
					(КолСтрок=1 И 
						((ТекСтрока.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение ИЛИ
						  ТекСтрока.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Вручную) И 
						 	(ТекСтрока.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов ИЛИ
							 ТекСтрока.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Загружен) И
							 ТекСтрока.ОперацияСДокументом=Перечисления.ttk_ОперацииСДокументамиНачислений.ПустаяСсылка())) Тогда
					МенюОпераций.Добавить(1,"ЗАПУСТИТЬ операцию ""довести до статуса ПРОВЕДЁН""");
				КонецЕсли;
				// показать строку ОТМЕНИТЬ операцию "довести до статуса ПРОВЕДЁН"
				Если КолСтрок>1 ИЛИ 
					(КолСтрок=1 И ТекСтрока.ОперацияСДокументом=Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение) Тогда
					МенюОпераций.Добавить(2,"ОТМЕНИТЬ операцию ""довести до статуса ПРОВЕДЁН""");
				КонецЕсли;
				// показать строку ОТКАТИТЬ до статуса ГОТОВ
				Если КолСтрок>1 ИЛИ
					(КолСтрок=1 И (ТекСтрока.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Проведен ИЛИ
									ТекСтрока.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Загружен)) Тогда
					МенюОпераций.Добавить(3,"ОТКАТИТЬ до статуса ГОТОВ");
				КонецЕсли;
			КонецЕсли;
			// показать строку ОТКАЗАТЬ в загрузке документа
			Если КолСтрок=1 И ТекСтрока.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение И
					ТекСтрока.ОперацияСДокументом=Перечисления.ttk_ОперацииСДокументамиНачислений.ПустаяСсылка() И
					НЕ (ТекСтрока.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Загружен ИЛИ
						ТекСтрока.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Проведен) Тогда
				МенюОпераций.Добавить(4,"ОТКАЗАТЬ в загрузке документа");
			КонецЕсли;
			// показать строку ВОССТАНОВИТЬ документ из ОТКАЗАТЬ
			Если КолСтрок=1 И ТекСтрока.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Отказать Тогда
				МенюОпераций.Добавить(5,"ВОССТАНОВИТЬ документ из ОТКАЗАТЬ");
			КонецЕсли;
			// раскоментировать когда будет понятно как это делать
			//// показать ДОБАВИТЬ документ ВРУЧНУЮ
			//МенюОпераций.Добавить(6,"ДОБАВИТЬ документ ВРУЧНУЮ");
			//// показать УДАЛИТЬ ручной документ
			//Если КолСтрок=1 И ТекСтрока.ТипЗагрузкиДокумента=Перечисления.ttk_ОперацииСДокументамиНачислений.Вручную И
			//		ТекСтрока.ОперацияСДокументом=Перечисления.ttk_ОперацииСДокументамиНачислений.ПустаяСсылка() И
			//		(ТекСтрока.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Загружен ИЛИ
			//			ТекСтрока.Статус=Перечисления.ttk_СтатусыЭлементовЗагрузки.Проведен) Тогда
			//	МенюОпераций.Добавить(7,"УДАЛИТЬ ручной документ");
			//КонецЕсли;
			Если МенюОпераций.Количество()=0 Тогда
				Предупреждение("Для выбранных документов нельзя производить ни одной операции");
				Возврат;
			КонецЕсли;
			ВыбраннаяОперация=МенюОпераций.ВыбратьЭлемент("Выбрано документов - "+КолСтрок);
			//Если ВыбраннаяОперация<>Неопределено И ВыбраннаяОперация.Значение<4 Тогда
			//	Состояние("Обновляется информация в документе загрузки по завершённым операциям...");
			//	ОбновитьСтатусыПослеОперации();
			//КонецЕсли;
			Если ВыбраннаяОперация=Неопределено Тогда
			ИначеЕсли ВыбраннаяОперация.Значение=1 Тогда
				Состояние("Выбранные документы ставятся в очередь на операцию проведения...");
				йй=йКомандаСоздатьИПровестиДокументы(NULL,КоличествоДокументовНаОперации);
				Если йй=0 Тогда
					Предупреждение("К сожалению в выбранных строках нет документов для данной операции.");
				Иначе
					Предупреждение("В очередь на операцию ПРОВЕДЕНИЯ встало документов - "+йй);
				КонецЕсли;
			ИначеЕсли ВыбраннаяОперация.Значение=2 Тогда
				Состояние("Очищается очередь на операцию проведения для текущего документа загрузки...");
				йй=йКомандаОтменитьСозданиеИПроведениеВыделенныхДокументов(NULL,КоличествоДокументовНаОперации);
				Если йй=0 Тогда
					Предупреждение("Очередь на операцию пуста.");
				Иначе
					Предупреждение("Из очереди на операцию исключено документов - "+йй);
				КонецЕсли;
			ИначеЕсли ВыбраннаяОперация.Значение=3 Тогда
				Состояние("Выбранные документы ставятся в очередь на операцию возврата к статусу готов...");
				йй=йКомандаУдалитьРанееСозданныеИПроведенныеДокументы(NULL,КоличествоДокументовНаОперации);
				Если йй=0 Тогда
					Предупреждение("К сожалению в выбранных строках нет документов для данной операции.");
				Иначе
					Предупреждение("В очередь на операцию возврата к статусу ГОТОВ встало документов - "+йй);
				КонецЕсли;
			ИначеЕсли ВыбраннаяОперация.Значение=4 Тогда
				йКомандаОтказатьДокументамЗагрузкиВОперацииЗагрузкиВЕИСУП(NULL);
			ИначеЕсли ВыбраннаяОперация.Значение=5 Тогда
				йВосстановитьДокументИзСтатусаОтказать(NULL);
			ИначеЕсли ВыбраннаяОперация.Значение=6 Тогда
				йДобавитьДокументВручную(NULL);
			ИначеЕсли ВыбраннаяОперация.Значение=7 Тогда
				йУдалитьРучнойДокумент(NULL);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура йНовыеСоответствияУслугНоменклатурам(Команда)
	Состояние("Идёт выгрузка несогласованных услуг в очередь на согласование...");
	ОбновитьСтатусыСогласованияНоменклатур();
	РСОС=РегистрыСведений.ttk_Task_Queue_СогласованиеНоменклатурИАналитик.СоздатьНаборЗаписей();
	Для каждого йСтр Из Объект.УслугиНоменклатуры Цикл
		Если йСтр.Статус = Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
			Продолжить;
		КонецЕсли;
		Если йСтр.НаСогласовании Тогда
			Продолжить;
		КонецЕсли;
		Если йСтр.Согласовано Тогда
			Продолжить;
		КонецЕсли;
		РСОС.Отбор.ДокументЗагрузки.Установить(Объект.Ссылка);
		РСОС.Отбор.СтрокаНомерДляНоменклатуры.Установить(йСтр.НомерСтроки);
		РСОС.Отбор.СтрокаНомерДляАналитики.Установить(0);
		РСОС.Прочитать();
		РСОС.Очистить();
		йРСОС=РСОС.Добавить();
		йРСОС.ДокументЗагрузки=Объект.Ссылка;
		йРСОС.СтрокаНомерДляНоменклатуры=йСтр.НомерСтроки;
		йРСОС.СтрокаНомерДляАналитики=0;
		йРСОС.УслугаИзБиллинга=йСтр.УслугаИзБиллинга;
		йРСОС.КодУслуги=йСтр.КодУслуги;
		йРСОС.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		йРСОС.Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
		йРСОС.Согласовано=Ложь;
		Попытка
			РСОС.Записать();
			йСтр.НаСогласовании=Истина;
		Исключение
			Продолжить;
		КонецПопытки;
		Модифицированность=Истина;
	КонецЦикла;
	ОбновитьТранспарантОшибок();
	Если Модифицированность Тогда
		йЗаписатьБыстро();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура абс_СтатусНовыйНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
 	Элементы.абс_СтатусНовый.СписокВыбора.Очистить();
	СсылкаСтатус = ?(ЗначениеЗаполнено(Объект.Ссылка.абс_Статус),Объект.Ссылка.абс_Статус,Объект.абс_Статус);
	Если СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
	 	Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
		Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных);
		Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
	// 	Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ЗагрузкаДанных);	
	//ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ЗагрузкаДанных Тогда
	// 	Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);	
	// 	Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ЗагрузкаДанных);	
	// 	Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных);	
	//ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных Тогда
	ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных Тогда
	 	Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);	
	 	Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных);	
	 	Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);	
	ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
	 	Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных);	
 		Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);	
 		Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
		Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
	ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
 		Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);	
 		Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);	
	ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.Отказ Тогда
		Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);	
		Элементы.абс_СтатусНовый.СписокВыбора.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция НетЗапретаПереходаСтатусов(СтатусТекущий, СтатусПоследующий, ДатаЗапрета)
	ПолныеПрава.УстановитьПараметрСоответствиеДатыЗапретаППД(Объект.Ссылка.Метаданные().Имя);
	Попытка
		ВТ_ОТаблицаЗапретаППД = ПараметрыСеанса.абс_СоответствиеДатыЗапертаППД.Получить().Скопировать();
	Исключение
		ВТ_ОТаблицаЗапретаППД=Новый ТаблицаЗначений; 
	КонецПопытки;
	ПолныеПрава.УстановитьПараметрСоответствиеДатыЗапретаППД();
	Для каждого йСтр Из ВТ_ОТаблицаЗапретаППД Цикл
		Если йСтр.Статус=СтатусТекущий И йСтр.СтатусНовый=СтатусПоследующий Тогда
			СтатусТекущий=Неопределено;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СтатусТекущий=Неопределено Тогда
		Если ЗначениеЗаполнено(йСтр.ДатаЗапрета) Тогда
			ДатаЗапрета=йСтр.ДатаЗапрета;
			Если йСтр.ДатаЗапрета>=Объект.Дата Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура НаложитьНаФормуНовыйСтатус(СтатусНаложения,Отказ=Ложь)
	// возможность перехода со статуса на статус
	СсылкаСтатус = ?(ЗначениеЗаполнено(Объект.Ссылка.абс_Статус),Объект.Ссылка.абс_Статус,Объект.абс_Статус);
	Если СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
		Если СтатусНаложения=Перечисления.абс_СтатусыПервичныхДокументов.ЗагрузкаДанных Тогда
			Если ПустаяСтрока(Объект.СессияTPI) Тогда
				Предупреждение("Из статуса Подготовка нельзя переходить в ЗагрузкаДанных если Сессия не выбрана");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ЗагрузкаДанных Тогда
		Если СтатусНаложения=Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
			Если (Объект.НоменклатурыВСогласовании+Объект.НоменклатурыСогласованы)>0 ИЛИ
				 (Объект.АналитикиВСогласовании+Объект.АналитикиСогласованы)>0 Тогда
				Предупреждение("Из статуса ЗагрузкаДанных нельзя переходить в Подготовка при согласовании номенклатур и аналитик");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
		ИначеЕсли СтатусНаложения=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
			РСХ=РегистрыСведений.ttk_ЗагруженныеСессииИзБиллинга.СоздатьНаборЗаписей();
			РСХ.Отбор.Документ.Установить(Объект.Ссылка);
			РСХ.Прочитать();
			ФлагОшибки=Ложь;
			Если РСХ.Количество()>0 Тогда
				Если РСХ[0].СессияID<>Объект.СессияID ИЛИ РСХ[0].ЖурналID<>Объект.ЖурналID Тогда
					ФлагОшибки=Истина;
				КонецЕсли;
			Иначе
				ФлагОшибки=Истина;
			КонецЕсли;
			Если ФлагОшибки Тогда
				Предупреждение("Из статуса ЗагрузкаДанных нельзя переходить в ОбработкаБухгалтером без загрузки выбранной сессии");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			йСтрокаИнфо="Из статуса ЗагрузкаДанных нельзя переходить в ОбработкаБухгалтером с неопознанн";
			Если Объект.СтавкиНДССОшибками>0 Тогда
				Предупреждение(йСтрокаИнфо+"ой СтавкойНДС");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			Если Объект.ВалютыСОшибками>0 Тогда
				Предупреждение(йСтрокаИнфо+"ой Валютой");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			Если Объект.КураторыСОшибками>0 Тогда
				Предупреждение(йСтрокаИнфо+"ым Куратором");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			Если (Объект.НоменклатурыСОшибками + Объект.НоменклатурыВСогласовании + Объект.НоменклатурыСогласованы)>0 Тогда
				Предупреждение(йСтрокаИнфо+"ой Услугой");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			//Если Объект.КонтрагентыСОшибками>0 Тогда
			//	Предупреждение(йСтрокаИнфо+"ыми Договорами");
			//	Отказ=Истина;
			//	Возврат;
			//КонецЕсли;
			Если (Объект.АналитикиСОшибками + Объект.АналитикиВСогласовании + Объект.АналитикиСогласованы)>0 Тогда
				Предупреждение(йСтрокаИнфо+"ой Аналитикой");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных Тогда
		Если СтатусНаложения=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
			РСХ=РегистрыСведений.ttk_ЗагруженныеСессииИзБиллинга.СоздатьНаборЗаписей();
			РСХ.Отбор.Документ.Установить(Объект.Ссылка);
			РСХ.Прочитать();
			ФлагОшибки=Ложь;
			Если РСХ.Количество()>0 Тогда
				Если РСХ[0].СессияID<>Объект.СессияID ИЛИ РСХ[0].ЖурналID<>Объект.ЖурналID Тогда
					ФлагОшибки=Истина;
				КонецЕсли;
			Иначе
				ФлагОшибки=Истина;
			КонецЕсли;
			Если ФлагОшибки Тогда
				Предупреждение("Из статуса ОбработкаДанных нельзя переходить в ОбработкаБухгалтером без загрузки выбранной сессии");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			йСтрокаИнфо="Из статуса ОбработкаДанных нельзя переходить в ОбработкаБухгалтером с неопознанн";
			Если Объект.СтавкиНДССОшибками>0 Тогда
				Предупреждение(йСтрокаИнфо+"ой СтавкойНДС");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			Если Объект.ВалютыСОшибками>0 Тогда
				Предупреждение(йСтрокаИнфо+"ой Валютой");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			Если Объект.КураторыСОшибками>0 Тогда
				Предупреждение(йСтрокаИнфо+"ым Куратором");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			Если (Объект.НоменклатурыСОшибками + Объект.НоменклатурыВСогласовании + Объект.НоменклатурыСогласованы)>0 Тогда
				Предупреждение(йСтрокаИнфо+"ой Услугой");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			//Если Объект.КонтрагентыСОшибками>0 Тогда
			//	Предупреждение(йСтрокаИнфо+"ыми Договорами");
			//	Отказ=Истина;
			//	Возврат;
			//КонецЕсли;
			Если (Объект.АналитикиСОшибками + Объект.АналитикиВСогласовании + Объект.АналитикиСогласованы)>0 Тогда
				Предупреждение(йСтрокаИнфо+"ой Аналитикой");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
		Если СтатусНаложения=Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
			Если Объект.КоличествоДокументовРеализацииВЗавершено=(Объект.ДокументыРеализацииБезОшибок+Объект.ДокументыРеализацииСОшибками) И
				 Объект.КоличествоДокументовКорректировкиРеализацииВЗавершено=(Объект.ДокументыКорректировкиРеализацииБезОшибок+Объект.ДокументыКорректировкиРеализацииСОшибками) Тогда
			Иначе
// здесь вставить ошибочные строки
				йСтрокаИнфо="";
				Для каждого йСтр Из Объект.Документы Цикл
					Если йСтр.ТипЗагрузкиДокумента = Перечисления.ttk_ОперацииСДокументамиНачислений.Отказать Тогда
						Продолжить;
					КонецЕсли;
					Если йСтр.Статус = Перечисления.ttk_СтатусыЭлементовЗагрузки.Проведен Тогда
						Продолжить;
					КонецЕсли;
					йСтрокаИнфо=йСтрокаИнфо+?(ПустаяСтрока(йСтрокаИнфо),"",Символы.ВК+Символы.ПС)+"["+йСтр.НомерСтроки+"]["+йСтр.Статус+"]"+?(ПустаяСтрока(йСтр.НомерКорректировкиРеализации)," реализация "+йСтр.НомерРеализации," корректировка реализации "+йСтр.НомерКорректировкиРеализации)+" от "+Формат(йСтр.ДатаДокумента,"ДЛФ=ДД");
				КонецЦикла;
				Предупреждение("Из статуса ОбработкаБухгалтером нельзя переходить в Завершен пока все документы не обработаны:"+Символы.ВК+Символы.ПС+йСтрокаИнфо);
				Отказ=Истина;
				Возврат;
			КонецЕсли;
		ИначеЕсли СтатусНаложения=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных Тогда
		//ИначеЕсли СтатусНаложения=Перечисления.абс_СтатусыПервичныхДокументов.ЗагрузкаДанных Тогда
			Если Объект.КоличествоДокументовРеализацииВЗавершено<>Объект.КоличествоДокументовРеализацииВОтказе ИЛИ
				 Объект.КоличествоДокументовКорректировкиРеализацииВЗавершено<>Объект.КоличествоДокументовКорректировкиРеализацииВОтказе Тогда
				Предупреждение("Из статуса ОбработкаБухгалтером нельзя переходить в ОбработкаДанных пока есть хоть один обработанный документ");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// видимость элементов формы
	//Элементы.СессияTPI.Доступность=Ложь;
	Элементы.СессияTPI.ТолькоПросмотр=Истина;
	Элементы.КнопкаВыбораСессии.Видимость=Ложь;
	Элементы.КнопкаЗаписать.Видимость=Истина;
	Элементы.КнопкаПровести.Видимость=Ложь;
	Элементы.КнопкаПодМенюОпераций.Видимость=Истина;
	Элементы.КнопкаСоздатьДоговор.Видимость=Ложь;
	Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Документы.Видимость=Истина;
	ФлагДоступностиНоменклатуры=(СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных);
	// доступность полей ссылок на документы таблицы Документы
	ФлагДоступностиДокументов=(СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
	йТаблДокументы=Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Документы.ПодчиненныеЭлементы.ТаблицаДокументы.ПодчиненныеЭлементы;
		йПакетДокументов=йТаблДокументы.ТаблицаДокументыПакетДокументов.ПодчиненныеЭлементы;
			йГруппаСчетНаОплату=йПакетДокументов.ТаблицаДокументыГруппаСчетНаОплату.ПодчиненныеЭлементы;
				йГруппаСчетНаОплату.ТаблицаДокументыНомерСчета.Доступность=ФлагДоступностиДокументов;
			йГруппаРеализация=йПакетДокументов.ТаблицаДокументыГруппаРеализация.ПодчиненныеЭлементы;
				йГруппаРеализация.ТаблицаДокументыНомерРеализации.Доступность=ФлагДоступностиДокументов;
				йГруппаРеализация.ТаблицаДокументыДатаДокумента.Доступность=ФлагДоступностиДокументов;
		йПакетСФ=йТаблДокументы.ТаблицаДокументыГруппаСчетФактура.ПодчиненныеЭлементы;
			йПакетСФ.ТаблицаДокументыНомерСчетаФактуры.Доступность=ФлагДоступностиДокументов;
		йПакетКорректировки=йТаблДокументы.ТаблицаДокументыГруппаПакетКорректировки.ПодчиненныеЭлементы;
			йПакетДО=йПакетКорректировки.ТаблицаДокументыГруппаДокументОснование.ПодчиненныеЭлементы;
				йПакетДО.ТаблицаДокументыНомерДокументаОснования.Доступность=ФлагДоступностиДокументов;
				йПакетДО.ТаблицаДокументыДокументОснование.КнопкаВыбора=ФлагДоступностиДокументов;
				йПакетДО.ТаблицаДокументыДокументОснование.КнопкаОчистки=ФлагДоступностиДокументов;
			йПакетДК=йПакетКорректировки.ТаблицаДокументыГруппаКорректировкиРеализации.ПодчиненныеЭлементы;
				йПакетДК.ТаблицаДокументыНомерКорректировкиРеализации.Доступность=ФлагДоступностиДокументов;
	// доступность функций с договором таблицы Контрагенты / Договоры
	ФлагДоступностиДоговоров=(СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером ИЛИ
							  СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных);
	йТаблДоговоры=Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.КонтрагентыДоговоры.ПодчиненныеЭлементы.ТаблицаКонтрагентыДоговоры.ПодчиненныеЭлементы.ТаблицаКонтрагентыДоговорыГруппаДоговор.ПодчиненныеЭлементы;
		йТаблДоговоры.ТаблицаКонтрагентыДоговорыДоговор.КнопкаВыбора=ФлагДоступностиДоговоров;
		йТаблДоговоры.ТаблицаКонтрагентыДоговорыДоговор.КнопкаОчистки=ФлагДоступностиДоговоров;
	// доступность колонки Заказ, ЗаказПокупателя и Номенклатура в таблице Деталировка
	ФлагВидимостиЗаказов=Объект.МестонахождениеБиллинга.ВестиУчетПоЗаказам;
	йТаблДеталировка=Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Деталировка.ПодчиненныеЭлементы.ТаблицаДеталировка.ПодчиненныеЭлементы;
	йТаблДеталировка.ТаблицаДеталировкаГруппаНоменклатура.ПодчиненныеЭлементы.ТаблицаДеталировкаЗаказ.Видимость=ФлагВидимостиЗаказов;
	йТаблДеталировка.ТаблицаДеталировкаГруппаНоменклатура.ПодчиненныеЭлементы.ТаблицаДеталировкаЗаказ.Доступность=ФлагВидимостиЗаказов;
	ФлагВидимостиДокументовЗаказов=Объект.МестонахождениеБиллинга.СоздаватьЗаказыВ1С;
	йТаблДеталировка.ТаблицаДеталировкаГруппаНоменклатура.ПодчиненныеЭлементы.ТаблицаДеталировкаЗаказПокупателя.Видимость=ФлагВидимостиДокументовЗаказов;
	йТаблДеталировка.ТаблицаДеталировкаГруппаНоменклатура.ПодчиненныеЭлементы.ТаблицаДеталировкаЗаказПокупателя.Доступность=ФлагВидимостиДокументовЗаказов;
	Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.УслугиНоменклатуры.ПодчиненныеЭлементы.ТаблицаУслугиНоменклатуры.ПодчиненныеЭлементы.ТаблицаУслугиНоменклатурыГруппаУслугаВЕИСУПе.ПодчиненныеЭлементы.ТаблицаУслугиНоменклатурыНоменклатура.Доступность=ФлагДоступностиНоменклатуры;
	Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Аналитики.ПодчиненныеЭлементы.ТаблицаАналитики.ПодчиненныеЭлементы.ТаблицаАналитикиГруппаПоискАналитики.ПодчиненныеЭлементы.ТаблицаАналитикиНоменклатура.Доступность=ФлагДоступностиНоменклатуры;
	йТаблДеталировка.ТаблицаДеталировкаГруппаНоменклатура.ПодчиненныеЭлементы.ТаблицаДеталировкаНоменклатура.Доступность=ФлагДоступностиНоменклатуры;
	//
	Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.КонтрагентыДоговоры.Видимость=Ложь;
	Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.УслугиНоменклатуры.Видимость=Ложь;
	Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Аналитики.Видимость=Ложь;
	Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Кураторы.Видимость=Ложь;
	Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Валюты.Видимость=Ложь;
	Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.СтавкиНДС.Видимость=Ложь;
	Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Деталировка.Видимость=Истина;
	Элементы.КнопкаОперацииСоответствияУслугНоменклатурам.Видимость=Ложь;
	Элементы.КнопкаОперацииСоответствияАналитики.Видимость=Ложь;
	Если СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
		//Элементы.СессияTPI.Доступность=Истина;
		Элементы.СессияTPI.ТолькоПросмотр=Ложь;
		Элементы.КнопкаПодМенюОпераций.Видимость=Ложь;
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Документы.Видимость=Ложь;
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Деталировка.Видимость=Ложь;
	ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ЗагрузкаДанных Тогда
		Если НЕ ((Объект.НоменклатурыСОшибками+Объект.НоменклатурыВСогласовании)=0 И Объект.НоменклатурыСогласованы>0) Тогда
			Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.УслугиНоменклатуры.Видимость=Истина;
		КонецЕсли;
		Элементы.КнопкаСоздатьДоговор.Видимость=Истина;
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.КонтрагентыДоговоры.Видимость=Истина;
		Если НЕ ((Объект.АналитикиСОшибками+Объект.АналитикиВСогласовании)=0 И Объект.АналитикиСогласованы>0) Тогда
			Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Аналитики.Видимость=Истина;
		КонецЕсли;
		Если (Объект.НоменклатурыВСогласовании=0 И Объект.АналитикиВСогласовании=0) Тогда
			Элементы.КнопкаВыбораСессии.Видимость=Истина;
		КонецЕсли;
		Если Объект.НоменклатурыСОшибками>0 Тогда
			Элементы.КнопкаОперацииСоответствияУслугНоменклатурам.Видимость=Истина;
		КонецЕсли;
		Если Объект.АналитикиСОшибками>0 Тогда
			Элементы.КнопкаОперацииСоответствияАналитики.Видимость=Истина;
		КонецЕсли;
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Кураторы.Видимость=Истина;
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Валюты.Видимость=Истина;
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.СтавкиНДС.Видимость=Истина;
	ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаДанных Тогда
		Если НЕ ((Объект.НоменклатурыСОшибками+Объект.НоменклатурыВСогласовании)=0 И Объект.НоменклатурыСогласованы>0) Тогда
			Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.УслугиНоменклатуры.Видимость=Истина;
		КонецЕсли;
		Элементы.КнопкаСоздатьДоговор.Видимость=Истина;
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.КонтрагентыДоговоры.Видимость=Истина;
		Если НЕ ((Объект.АналитикиСОшибками+Объект.АналитикиВСогласовании)=0 И Объект.АналитикиСогласованы>0) Тогда
			Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Аналитики.Видимость=Истина;
		КонецЕсли;
		Если (Объект.НоменклатурыВСогласовании=0 И Объект.АналитикиВСогласовании=0) Тогда
			Элементы.КнопкаВыбораСессии.Видимость=Истина;
		КонецЕсли;
		Если Объект.НоменклатурыСОшибками>0 Тогда
			Элементы.КнопкаОперацииСоответствияУслугНоменклатурам.Видимость=Истина;
		КонецЕсли;
		Если Объект.АналитикиСОшибками>0 Тогда
			Элементы.КнопкаОперацииСоответствияАналитики.Видимость=Истина;
		КонецЕсли;
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Кураторы.Видимость=Истина;
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Валюты.Видимость=Истина;
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.СтавкиНДС.Видимость=Истина;
	ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
		Элементы.КнопкаСоздатьДоговор.Видимость=Истина;
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.КонтрагентыДоговоры.Видимость=Истина;
	ИначеЕсли СсылкаСтатус=Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.КонтрагентыДоговоры.Видимость=Истина;
		Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Аналитики.Видимость=Истина;
		Элементы.КнопкаПодМенюОпераций.Видимость=Ложь;
	КонецЕсли;
	Если СтатусНаложения=Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
		Элементы.КнопкаЗаписать.Видимость=Ложь;
		Элементы.КнопкаПровести.Видимость=Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура абс_СтатусНовыйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение<>Объект.Ссылка.абс_Статус Тогда
		ФлагПопыткиСменыСтатуса=Истина;
	Иначе
		ФлагПопыткиСменыСтатуса=Ложь;
	КонецЕсли;
	Отказ=Ложь;
	НаложитьНаФормуНовыйСтатус(ВыбранноеЗначение,Отказ);
	Если Отказ И ФлагПопыткиСменыСтатуса Тогда
		СтандартнаяОбработка=Ложь;
	КонецЕсли;
	Если НЕ Отказ И ФлагПопыткиСменыСтатуса Тогда
		Модифицированность = Истина;
		ОтображениеМодифицированности();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура йПровестиВЗавершение(Команда)
	ПараметрыЗаписи=Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписиДокумента",РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведенияДокумента",РежимПроведенияДокумента.Неоперативный);
	ЭтаФорма.Записать(ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура йНовыеСоответствияНоменклатурАналитикам(Команда)
	Состояние("Идёт выгрузка несогласованных аналитик в очередь на согласование...");
	ОбновитьСтатусыСогласованияАналитик();
	РСОС=РегистрыСведений.ttk_Task_Queue_СогласованиеНоменклатурИАналитик.СоздатьНаборЗаписей();
	Для каждого йСтр Из Объект.Аналитики Цикл
		Если йСтр.Статус = Перечисления.ttk_СтатусыЭлементовЗагрузки.Готов Тогда
			Продолжить;
		КонецЕсли;
		Если йСтр.НаСогласовании Тогда
			Продолжить;
		КонецЕсли;
		Если йСтр.Согласовано Тогда
			Продолжить;
		КонецЕсли;
		РСОС.Отбор.ДокументЗагрузки.Установить(Объект.Ссылка);
		РСОС.Отбор.СтрокаНомерДляНоменклатуры.Установить(0);
		РСОС.Отбор.СтрокаНомерДляАналитики.Установить(йСтр.НомерСтроки);
		РСОС.Прочитать();
		РСОС.Очистить();
		йРСОС=РСОС.Добавить();
		йРСОС.ДокументЗагрузки=Объект.Ссылка;
		йРСОС.СтрокаНомерДляНоменклатуры=0;
		йРСОС.СтрокаНомерДляАналитики=йСтр.НомерСтроки;
		йРСОС.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		йРСОС.Номенклатура=йСтр.Номенклатура;
		//йРСОС.ТипКонтрагента=йСтр.ТипКонтрагента;
		йРСОС.ЦФО=йСтр.ЦФО;
		//йРСОС.ЦФУ=йСтр.ЦФУ;
		йРСОС.НоменклатурнаяГруппа=йСтр.НоменклатурнаяГруппа;
		//йРСОС.БюджетнаяСтатья=йСтр.БюджетнаяСтатья;
		йРСОС.Согласовано=Ложь;
		Попытка
			РСОС.Записать();
			йСтр.НаСогласовании=Истина;
		Исключение
			Продолжить;
		КонецПопытки;
		Модифицированность=Истина;
	КонецЦикла;
	ОбновитьТранспарантОшибок();
	Если Модифицированность Тогда
		йЗаписатьБыстро();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыНомерРеализации" ИЛИ
		 Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыНомерСчета" Тогда
		Отказ=Элемент.ТекущиеДанные.ЭтоКорректировка;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыНомерКорректировкиРеализации" ИЛИ
			  Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыДокументОснование" Тогда
		Отказ=(НЕ Элемент.ТекущиеДанные.ЭтоКорректировка);
	КонецЕсли;
	//Если Элемент.ТекущиеДанные.Статус = Перечисления.ttk_СтатусыЭлементовЗагрузки.Проведен Тогда
	//	Отказ=Истина;
	//	Возврат;
	//КонецЕсли;
	//Если Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыНомерСчетаФактуры" Тогда
	//	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетФактура) Тогда
	//		Отказ=Истина;
	//	КонецЕсли;
	//ИначеЕсли Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыКонтрагент" ИЛИ
	//		  Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыДоговор" ИЛИ
	//		  Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыКуратор" ИЛИ
	//		  Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыЦФО" ИЛИ
	//		  Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыВалюта" ИЛИ
	//		  Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыСчетФактура" Тогда
	//ИначеЕсли ПустаяСтрока(Элементы.ТаблицаДокументы.ТекущиеДанные.НомерКорректировкиРеализации) Тогда
	//	Если Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыДатаДокумента" Тогда
	//		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетНаОплату) ИЛИ
	//			 ЗначениеЗаполнено(Элемент.ТекущиеДанные.Реализация) ИЛИ
	//			 ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетФактура) Тогда
	//			Отказ=Истина;
	//		КонецЕсли;
	//	ИначеЕсли Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыСчетНаОплату" ИЛИ
	//			  Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыРеализация" Тогда
	//	ИначеЕсли Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыНомерСчета" Тогда
	//		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетНаОплату) Тогда
	//			Отказ=Истина;
	//		КонецЕсли;
	//	ИначеЕсли Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыНомерРеализации" Тогда
	//		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Реализация) Тогда
	//			Отказ=Истина;
	//		КонецЕсли;
	//	Иначе
	//		Отказ=Истина;
	//	КонецЕсли;
	//Иначе
	//	Если Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыДатаДокумента" Тогда
	//		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.КорректировкаРеализации) ИЛИ
	//			 ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетФактура) Тогда
	//			Отказ=Истина;
	//		КонецЕсли;
	//	ИначеЕсли Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыКорректировкаРеализации" ИЛИ
	//			  Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыДокументОснование" ИЛИ
	//			  Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыДокументМиграции" ИЛИ
	//			  Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыОрганизацияМиграции" ИЛИ
	//			  Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыДоговорМиграции" Тогда
	//	ИначеЕсли Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыНомерДокументаОснования" Тогда
	//		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДокументОснование) Тогда
	//			Отказ=Истина;
	//		КонецЕсли;
	//	ИначеЕсли Элемент.ТекущийЭлемент.Имя="ТаблицаДокументыНомерКорректировкиРеализации" Тогда
	//		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.КорректировкаРеализации) Тогда
	//			Отказ=Истина;
	//		КонецЕсли;
	//	Иначе
	//		Отказ=Истина;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПоискДокументаПоНомеру(ТипДока, НомерДока, ДатаДока, йОрганизация=Неопределено,УровеньПоиска=4)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НомерДока",НомерДока);
	Запрос.УстановитьПараметр("Организация",йОрганизация);
	Запрос.УстановитьПараметр("ДатаДока",ДатаДока);
	Запрос.УстановитьПараметр("МесяцЗагрузки",Год(ДатаДока)*100+Месяц(ДатаДока));
	Запрос.УстановитьПараметр("ГодЗагрузки",Год(ДатаДока));
	Дока=ТипДока;
	Для йй=1 По УровеньПоиска Цикл
		Запрос.УстановитьПараметр("ШиринаДиапазона",йй);
		Если ТипЗнч(ТипДока)=Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			             |	СчетНаОплатуПокупателю.Ссылка КАК Документ
			             |ИЗ
			             |	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
			             |ГДЕ
			             |	ВЫБОР
			             |			КОГДА &ШиринаДиапазона = 1
			             |				ТОГДА НАЧАЛОПЕРИОДА(СчетНаОплатуПокупателю.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаДока, ДЕНЬ)
			             |			КОГДА &ШиринаДиапазона = 2
			             |				ТОГДА НАЧАЛОПЕРИОДА(СчетНаОплатуПокупателю.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ДатаДока, МЕСЯЦ)
			             |			КОГДА &ШиринаДиапазона = 3
			             |				ТОГДА НАЧАЛОПЕРИОДА(СчетНаОплатуПокупателю.Дата, ГОД) = НАЧАЛОПЕРИОДА(&ДатаДока, ГОД)
			             |			ИНАЧЕ ИСТИНА
			             |		КОНЕЦ
			             |	И СчетНаОплатуПокупателю.Номер = &НомерДока
			             |	И ВЫБОР
			             |			КОГДА &Организация = НЕОПРЕДЕЛЕНО
			             |				ТОГДА ИСТИНА
			             |			ИНАЧЕ &Организация = СчетНаОплатуПокупателю.Организация
			             |		КОНЕЦ";
		ИначеЕсли ТипЗнч(ТипДока)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			             |	РеализацияТоваровУслуг.Ссылка КАК Документ
			             |ИЗ
			             |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			             |ГДЕ
			             |	ВЫБОР
			             |			КОГДА &ШиринаДиапазона = 1
			             |				ТОГДА НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаДока, ДЕНЬ)
			             |			КОГДА &ШиринаДиапазона = 2
			             |				ТОГДА НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ДатаДока, МЕСЯЦ)
			             |			КОГДА &ШиринаДиапазона = 3
			             |				ТОГДА НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ГОД) = НАЧАЛОПЕРИОДА(&ДатаДока, ГОД)
			             |			ИНАЧЕ ИСТИНА
			             |		КОНЕЦ
			             |	И РеализацияТоваровУслуг.Номер = &НомерДока
			             |	И ВЫБОР
			             |			КОГДА &Организация = НЕОПРЕДЕЛЕНО
			             |				ТОГДА ИСТИНА
			             |			ИНАЧЕ &Организация = РеализацияТоваровУслуг.Организация
			             |		КОНЕЦ";
		ИначеЕсли ТипЗнч(ТипДока)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			             |	КорректировкаРеализации.Ссылка КАК Документ
			             |ИЗ
			             |	Документ.КорректировкаРеализации КАК КорректировкаРеализации
			             |ГДЕ
			             |	ВЫБОР
			             |			КОГДА &ШиринаДиапазона = 1
			             |				ТОГДА НАЧАЛОПЕРИОДА(КорректировкаРеализации.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаДока, ДЕНЬ)
			             |			КОГДА &ШиринаДиапазона = 2
			             |				ТОГДА НАЧАЛОПЕРИОДА(КорректировкаРеализации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ДатаДока, МЕСЯЦ)
			             |			КОГДА &ШиринаДиапазона = 3
			             |				ТОГДА НАЧАЛОПЕРИОДА(КорректировкаРеализации.Дата, ГОД) = НАЧАЛОПЕРИОДА(&ДатаДока, ГОД)
			             |			ИНАЧЕ ИСТИНА
			             |		КОНЕЦ
			             |	И КорректировкаРеализации.Номер = &НомерДока
			             |	И ВЫБОР
			             |			КОГДА &Организация = НЕОПРЕДЕЛЕНО
			             |				ТОГДА ИСТИНА
			             |			ИНАЧЕ &Организация = КорректировкаРеализации.Организация
			             |		КОНЕЦ";
		ИначеЕсли ТипЗнч(ТипДока)=Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			             |	СчетФактураВыданный.Ссылка КАК Документ
			             |ИЗ
			             |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			             |ГДЕ
			             |	ВЫБОР
			             |			КОГДА &ШиринаДиапазона = 1
			             |				ТОГДА НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаДока, ДЕНЬ)
			             |			КОГДА &ШиринаДиапазона = 2
			             |				ТОГДА НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ДатаДока, МЕСЯЦ)
			             |			КОГДА &ШиринаДиапазона = 3
			             |				ТОГДА НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ГОД) = НАЧАЛОПЕРИОДА(&ДатаДока, ГОД)
			             |			ИНАЧЕ ИСТИНА
			             |		КОНЕЦ
			             |	И СчетФактураВыданный.Номер = &НомерДока
			             |	И ВЫБОР
			             |			КОГДА &Организация = НЕОПРЕДЕЛЕНО
			             |				ТОГДА ИСТИНА
			             |			ИНАЧЕ &Организация = СчетФактураВыданный.Организация
			             |		КОНЕЦ";
		КонецЕсли;
		Доки=Запрос.Выполнить().Выбрать();
		Если Доки.Следующий() Тогда
			Дока=Доки.Документ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Дока;
КонецФункции

&НаКлиенте
Процедура ТаблицаДокументыНомерСчетаПриИзменении(Элемент)
	Состояние("Идёт определение счёта на оплату по номеру...");
	Элементы.ТаблицаДокументы.ТекущиеДанные.СчетНаОплату=ПоискДокументаПоНомеру(
															Документы.СчетНаОплатуПокупателю.ПустаяСсылка(),
															Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСчета,
															Элементы.ТаблицаДокументы.ТекущиеДанные.ДатаДокумента,
															Объект.Организация,3);
	ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСтроки-1);
	ОбновитьТранспарантОшибок();
	//Если Модифицированность Тогда
	//	Записать();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыНомерРеализацииПриИзменении(Элемент)
	Состояние("Идёт определение реализации по номеру...");
	Элементы.ТаблицаДокументы.ТекущиеДанные.Реализация=ПоискДокументаПоНомеру(
														Документы.РеализацияТоваровУслуг.ПустаяСсылка(),
														Элементы.ТаблицаДокументы.ТекущиеДанные.НомерРеализации,
														Элементы.ТаблицаДокументы.ТекущиеДанные.ДатаДокумента,
														Объект.Организация,3);
	Для каждого йСтр Из Объект.Деталировка Цикл
		Если йСтр.ИндексДокумента<>Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСтроки Тогда
			Продолжить;
		КонецЕсли;
		йСтр.НомерДокумента=Элементы.ТаблицаДокументы.ТекущиеДанные.НомерРеализации;
	КонецЦикла;
	ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСтроки-1);
	ОбновитьТранспарантОшибок();
	//Если Модифицированность Тогда
	//	Записать();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыНомерСчетаФактурыПриИзменении(Элемент)
	Состояние("Идёт определение счёта-фактуры выданного по номеру...");
	Элементы.ТаблицаДокументы.ТекущиеДанные.СчетФактура=ПоискДокументаПоНомеру(
														Документы.СчетФактураВыданный.ПустаяСсылка(),
														Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСчетаФактуры,
														Элементы.ТаблицаДокументы.ТекущиеДанные.ДатаДокумента,
														Объект.Организация,3);
	ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСтроки-1);
	ОбновитьТранспарантОшибок();
	//Если Модифицированность Тогда
	//	Записать();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыНомерДокументаОснованияПриИзменении(Элемент)
	Состояние("Идёт определение документов корректировки по номеру документа основания...");
	Элементы.ТаблицаДокументы.ТекущиеДанные.ДокументОснование=Неопределено;
	ОбновитьПараметрыСтрокиДокументКорректировка(Элементы.ТаблицаДокументы.ТекущиеДанные);
	ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСтроки-1);
	ОбновитьТранспарантОшибок();
	//Если Модифицированность Тогда
	//	Записать();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыНомерКорректировкиРеализацииПриИзменении(Элемент)
	Состояние("Идёт определение документов корректировки по номеру корректировки реализации...");
	Элементы.ТаблицаДокументы.ТекущиеДанные.ДокументОснование=Неопределено;
	ОбновитьПараметрыСтрокиДокументКорректировка(Элементы.ТаблицаДокументы.ТекущиеДанные);
	Для каждого йСтр Из Объект.Деталировка Цикл
		Если йСтр.ИндексДокумента<>Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСтроки Тогда
			Продолжить;
		КонецЕсли;
		йСтр.НомерДокумента=Элементы.ТаблицаДокументы.ТекущиеДанные.НомерКорректировкиРеализации;
	КонецЦикла;
	ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСтроки-1);
	ОбновитьТранспарантОшибок();
	//Если Модифицированность Тогда
	//	Записать();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыДатаДокументаПриИзменении(Элемент)
	Состояние("Идёт определение всех документов начисления при смене даты документа...");
	Если ПустаяСтрока(Элементы.ТаблицаДокументы.ТекущиеДанные.НомерКорректировкиРеализации) Тогда
		Элементы.ТаблицаДокументы.ТекущиеДанные.СчетНаОплату=ПоискДокументаПоНомеру(
															 Документы.СчетНаОплатуПокупателю.ПустаяСсылка(),
															 Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСчета,
															 Элементы.ТаблицаДокументы.ТекущиеДанные.ДатаДокумента,
															 Объект.Организация,3);
		Элементы.ТаблицаДокументы.ТекущиеДанные.Реализация=ПоискДокументаПоНомеру(
															Документы.РеализацияТоваровУслуг.ПустаяСсылка(),
															Элементы.ТаблицаДокументы.ТекущиеДанные.НомерРеализации,
															Элементы.ТаблицаДокументы.ТекущиеДанные.ДатаДокумента,
															Объект.Организация,3);
		Элементы.ТаблицаДокументы.ТекущиеДанные.СчетФактура=ПоискДокументаПоНомеру(
															Документы.СчетФактураВыданный.ПустаяСсылка(),
															Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСчетаФактуры,
															Элементы.ТаблицаДокументы.ТекущиеДанные.ДатаДокумента,
															Объект.Организация,3);
//	Иначе
//		Элементы.ТаблицаДокументы.ТекущиеДанные.ДокументОснование=Неопределено;
//		ОбновитьПараметрыСтрокиДокументКорректировка(Элементы.ТаблицаДокументы.ТекущиеДанные);
	КонецЕсли;
	ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСтроки-1);
	ОбновитьТранспарантОшибок();
	//Если Модифицированность Тогда
	//	Записать();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьДеталировкуПоФильтруПриИзменении(Элемент)
	ОбновитьФильтрациюДеталировки();	
КонецПроцедуры

&НаКлиенте
Процедура йКомандаСоздатьКуратора(Команда)
	МассивОперации=Новый Массив;
	МассивОперации=Элементы.ТаблицаКураторы.ВыделенныеСтроки;
	КолКур=Объект.Кураторы.Количество();
	Для йИнд=0 По МассивОперации.Количество()-1 Цикл
		йНомСтр=МассивОперации[йИнд];
		йНомСтр=йНомСтр-Цел(йНомСтр/КолКур)*КолКур;
		йСтр=Объект.Кураторы[йНомСтр];
		Если ЗначениеЗаполнено(йСтр.Куратор) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			йКуратор=Справочники.абс_Кураторы.СоздатьЭлемент();
			йКуратор.Наименование = йСтр.НаименованиеКуратор;
			йКуратор.Организация = Объект.Организация;
			йКуратор.ЦФО = Справочники.Подразделения.ПустаяСсылка();
			йКуратор.Записать();
			йСтр.Куратор=йКуратор.Ссылка;
			ОбновитьДанныеПоКуратору(йСтр.НомерСтроки);
			Сообщить("Строка "+йСтр.НомерСтроки+" набор [НаименованиеКуратора="+йСтр.НаименованиеКуратор+"] создан куратор "+йСтр.Куратор+" [код="+йСтр.Куратор.Код+"]");
		Исключение
		КонецПопытки;
	КонецЦикла;
	Элементы.ТаблицаКураторы.ВыделенныеСтроки.Очистить();
	Элементы.ТаблицаКураторы.ВыделенныеСтроки.Добавить(0);
	ОбновитьТранспарантОшибок();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоКуратору(ИндексКуратора)
	ТекДанные=Объект.Кураторы[ИндексКуратора-1];
	ОбновлениеСтатусаОбъектаЗагрузки(,,,ИндексКуратора-1);
	Для каждого йСтр Из Объект.Документы Цикл
		Если йСтр.ИндексКуратора<>ИндексКуратора Тогда
			Продолжить;
		КонецЕсли;
		йСтр.Куратор=ТекДанные.Куратор;
		йСтр.ЦФО=ТекДанные.ЦФО;
		ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,йСтр.НомерСтроки-1);
	КонецЦикла;
	Модифицированность=Истина;
	ОтображениеМодифицированности();
КонецПроцедуры

&НаКлиенте
Процедура ПолеКураторыСмотретьТолькоОшибкиПриИзменении(Элемент)
	ОбновитьФильтрациюКураторов();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКураторыКураторОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ТекДанные=Элементы.ТаблицаКураторы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Куратор) Тогда
		Предупреждение("Поле Куратор не заполнено");
		Возврат;
	КонецЕсли;
	ЦФОСтарый=ТекДанные.ЦФО;
	ФормаЭлемента=ТекДанные.Куратор.Ссылка.ПолучитьФорму("ФормаЭлемента");
	ФормаЭлемента.ОткрытьМодально();
	Если ЦФОСтарый=ТекДанные.Куратор.ЦФО Тогда
		Возврат;
	КонецЕсли;
	Состояние("Обновляется информация после редактирования Куратора...");
	ТекДанные.ЦФО=ТекДанные.Куратор.ЦФО;
	ОбновитьДанныеПоКуратору(ТекДанные.НомерСтроки);
	ОбновитьТранспарантОшибок();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФильтрациюДокументов()
	Отбор = Новый Структура;
	Если СмотретьДокументыТолькоОшибки Тогда
		Отбор.Вставить("СтатусОшибка", Истина);
	КонецЕсли;
	Если ПустаяСтрока(ЭтаФорма.ТекущийФильтрДокументов) Тогда
		ЭтаФорма.СмотретьДокументыПоФильтру=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьДокументыПоФильтру.Доступность=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьДокументыПоФильтру.Заголовок="";
	Иначе
		ЭтаФорма.Элементы.ПолеСмотретьДокументыПоФильтру.Доступность=Истина;
		Если ЭтаФорма.СмотретьДокументыПоФильтру Тогда
			Если ЭтаФорма.ТекущийТипФильтрацииДокументов Тогда
				ТекДанные=Неопределено;
				йИндекс="";
				йЗаголовок="Отбор по ";
				Если ЭтаФорма.ТекущийФильтрДокументов="Договоры" Тогда
					ТекДанные=Элементы.ТаблицаКонтрагентыДоговоры.ТекущиеДанные;
					йЗаголовок=йЗаголовок+"Договору";
					йИндекс="ИндексДоговора";
				ИначеЕсли ЭтаФорма.ТекущийФильтрДокументов="Кураторы" Тогда
					ТекДанные=Элементы.ТаблицаКураторы.ТекущиеДанные;
					йЗаголовок=йЗаголовок+"Куратору";
					йИндекс="ИндексКуратора";
				ИначеЕсли ЭтаФорма.ТекущийФильтрДокументов="Валюты" Тогда
					ТекДанные=Элементы.ТаблицаВалюты.ТекущиеДанные;
					йЗаголовок=йЗаголовок+"Валюте";
					йИндекс="ИндексВалюты";
				КонецЕсли;
				Если ТекДанные<>Неопределено Тогда
					ЭтаФорма.Элементы.ПолеСмотретьДокументыПоФильтру.Заголовок=йЗаголовок+" "+ЭтаФорма.ТекущийФильтрНаименование;
					Отбор.Вставить(йИндекс, ТекДанные.НомерСтроки);
				Иначе
					ЭтаФорма.СмотретьДокументыПоФильтру=Ложь;
					ЭтаФорма.Элементы.ПолеСмотретьДокументыПоФильтру.Доступность=Ложь;
					ЭтаФорма.Элементы.ПолеСмотретьДокументыПоФильтру.Заголовок="";
				КонецЕсли;
			Иначе
				ЭтаФорма.Элементы.ПолеСмотретьДокументыПоФильтру.Заголовок="Ссылка из Деталировки "+ЭтаФорма.ТекущийФильтрНаименование;
				Отбор.Вставить("НомерСтроки", Элементы.ТаблицаДеталировка.ТекущиеДанные.ИндексДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.ТаблицаДокументы.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФильтрациюДоговоров()
	Отбор = Новый Структура;
	Если СмотретьКонтрагентыДоговорыТолькоОшибки Тогда
		Отбор.Вставить("СтатусОшибка", Истина);
	КонецЕсли;
	Если ЭтаФорма.СмотретьКонтрагентыДоговорыНовые Тогда
		Отбор.Вставить("НовыйДоговор", Истина);
	КонецЕсли;
	Если ПустаяСтрока(ЭтаФорма.ТекущийФильтрДоговоров) Тогда
		ЭтаФорма.СмотретьДоговорыПоФильтру=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьКонтрагентовДоговорыПоФильтру.Доступность=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьКонтрагентовДоговорыПоФильтру.Заголовок="";
	Иначе
		ЭтаФорма.Элементы.ПолеСмотретьКонтрагентовДоговорыПоФильтру.Доступность=Истина;
		Если ЭтаФорма.СмотретьДоговорыПоФильтру Тогда
			Если ЭтаФорма.ТекущийТипФильтрацииДоговоров Тогда
				ТекДанные=Неопределено;
				йИндекс="";
				йЗаголовок="Отбор по ";
				Если ЭтаФорма.ТекущийФильтрДоговоров="Валюты" Тогда
					ТекДанные=Элементы.ТаблицаВалюты.ТекущиеДанные;
					йЗаголовок=йЗаголовок+"Валюте";
					йИндекс="ИндексВалюты";
				КонецЕсли;
				Если ТекДанные<>Неопределено Тогда
					ЭтаФорма.Элементы.ПолеСмотретьКонтрагентовДоговорыПоФильтру.Заголовок=йЗаголовок+" "+ЭтаФорма.ТекущийФильтрНаименование;
					Отбор.Вставить(йИндекс, ТекДанные.НомерСтроки);
				Иначе
					ЭтаФорма.СмотретьДоговорыПоФильтру=Ложь;
					ЭтаФорма.Элементы.ПолеСмотретьКонтрагентовДоговорыПоФильтру.Доступность=Ложь;
					ЭтаФорма.Элементы.ПолеСмотретьКонтрагентовДоговорыПоФильтру.Заголовок="";
				КонецЕсли;
			Иначе
				ТекДанные=Неопределено;
				йЗаголовок="Ссылка из ";
				Если ЭтаФорма.ТекущийФильтрДоговоров="Документы" Тогда
					ТекДанные=Элементы.ТаблицаДокументы.ТекущиеДанные;
					йЗаголовок=йЗаголовок+"Документа";
				ИначеЕсли ЭтаФорма.ТекущийФильтрДоговоров="Деталировка" Тогда
					ТекДанные=Элементы.ТаблицаДеталировка.ТекущиеДанные;
					йЗаголовок=йЗаголовок+"Деталировки";
				ИначеЕсли ЭтаФорма.ТекущийФильтрДоговоров="Задолженность" Тогда
					ТекДанные=Элементы.ТаблицаЗадолженностиМГМН.ТекущиеДанные;
					йЗаголовок=йЗаголовок+"Задолженности";
				КонецЕсли;
				ЭтаФорма.Элементы.ПолеСмотретьКонтрагентовДоговорыПоФильтру.Заголовок=йЗаголовок+" "+ЭтаФорма.ТекущийФильтрНаименование;
				Отбор.Вставить("НомерСтроки",ТекДанные.ИндексДоговора);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.ТаблицаКонтрагентыДоговоры.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФильтрациюУслуг()
	Отбор = Новый Структура;
	Если СмотретьУслугиНоменклатурыТолькоОшибки Тогда
		Отбор.Вставить("СтатусОшибка", Истина);
	КонецЕсли;
	Если ПустаяСтрока(ЭтаФорма.ТекущийФильтрУслугиНоменклатуры) Тогда
		ЭтаФорма.СмотретьУслугиНоменклатурыПоФильтру=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьУслугиНоменклатурыПоФильтру.Доступность=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьУслугиНоменклатурыПоФильтру.Заголовок="";
	Иначе
		ЭтаФорма.Элементы.ПолеСмотретьУслугиНоменклатурыПоФильтру.Доступность=Истина;
		Если ЭтаФорма.СмотретьУслугиНоменклатурыПоФильтру Тогда
			ЭтаФорма.Элементы.ПолеСмотретьУслугиНоменклатурыПоФильтру.Заголовок="Ссылка из Деталировки "+ЭтаФорма.ТекущийФильтрНаименование;
			Отбор.Вставить("НомерСтроки",Элементы.ТаблицаДеталировка.ТекущиеДанные.ИндексУслуги);
		КонецЕсли;
	КонецЕсли;
	Элементы.ТаблицаУслугиНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФильтрациюАналитик()
	Отбор = Новый Структура;
	Если СмотретьАналитикиТолькоОшибки Тогда
		Отбор.Вставить("СтатусОшибка", Истина);
	КонецЕсли;
	Если ПустаяСтрока(ЭтаФорма.ТекущийФильтрАналитик) Тогда
		ЭтаФорма.СмотретьАналитикиПоФильтру=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьАналитикиПоФильтру.Доступность=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьАналитикиПоФильтру.Заголовок="";
	Иначе
		ЭтаФорма.Элементы.ПолеСмотретьАналитикиПоФильтру.Доступность=Истина;
		Если ЭтаФорма.СмотретьАналитикиПоФильтру Тогда
			ЭтаФорма.Элементы.ПолеСмотретьАналитикиПоФильтру.Заголовок="Ссылка из Деталировки "+ЭтаФорма.ТекущийФильтрНаименование;
			Отбор.Вставить("НомерСтроки",Элементы.ТаблицаДеталировка.ТекущиеДанные.ИндексАналитики);
		КонецЕсли;
	КонецЕсли;
	Элементы.ТаблицаАналитики.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФильтрациюКураторов()
	Отбор = Новый Структура;
	Если СмотретьКураторыТолькоОшибки Тогда
		Отбор.Вставить("СтатусОшибка", Истина);
	КонецЕсли;
	Если ПустаяСтрока(ЭтаФорма.ТекущийФильтрКураторов) Тогда
		ЭтаФорма.СмотретьКураторыПоФильтру=Ложь;
		ЭтаФорма.Элементы.ПолеКураторыСмотретьПоФильтру.Доступность=Ложь;
		ЭтаФорма.Элементы.ПолеКураторыСмотретьПоФильтру.Заголовок="";
	Иначе
		ЭтаФорма.Элементы.ПолеКураторыСмотретьПоФильтру.Доступность=Истина;
		Если ЭтаФорма.СмотретьКураторыПоФильтру Тогда
			ТекДанные=Неопределено;
			йЗаголовок="Ссылка из ";
			Если ЭтаФорма.ТекущийФильтрКураторов="Документы" Тогда
				ТекДанные=Элементы.ТаблицаДокументы.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Документа";
			ИначеЕсли ЭтаФорма.ТекущийФильтрКураторов="Деталировка" Тогда
				ТекДанные=Элементы.ТаблицаДеталировка.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Деталировки";
			КонецЕсли;
			ЭтаФорма.Элементы.ПолеКураторыСмотретьПоФильтру.Заголовок=йЗаголовок+" "+ЭтаФорма.ТекущийФильтрНаименование;
			Отбор.Вставить("НомерСтроки",ТекДанные.ИндексКуратора);
		КонецЕсли;
	КонецЕсли;
	Элементы.ТаблицаКураторы.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФильтрациюВалюты()
	Отбор = Новый Структура;
	Если ПустаяСтрока(ЭтаФорма.ТекущийФильтрВалюты) Тогда
		ЭтаФорма.СмотретьВалютыПоФильтру=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьВалютыПоФильтру.Доступность=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьВалютыПоФильтру.Заголовок="";
	Иначе
		ЭтаФорма.Элементы.ПолеСмотретьВалютыПоФильтру.Доступность=Истина;
		Если ЭтаФорма.СмотретьВалютыПоФильтру Тогда
			ТекДанные=Неопределено;
			йЗаголовок="Ссылка из ";
			Если ЭтаФорма.ТекущийФильтрВалюты="Документы" Тогда
				ТекДанные=Элементы.ТаблицаДокументы.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Документа";
			ИначеЕсли ЭтаФорма.ТекущийФильтрВалюты="Договоры" Тогда
				ТекДанные=Элементы.ТаблицаКонтрагентыДоговоры.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Договора";
			ИначеЕсли ЭтаФорма.ТекущийФильтрВалюты="СтавкиНДС" Тогда
				ТекДанные=Элементы.ТаблицаСтавкиНДС.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Ставки НДС";
			ИначеЕсли ЭтаФорма.ТекущийФильтрВалюты="Деталировка" Тогда
				ТекДанные=Элементы.ТаблицаДеталировка.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Деталировки";
			КонецЕсли;
			ЭтаФорма.Элементы.ПолеСмотретьВалютыПоФильтру.Заголовок=йЗаголовок+" "+ЭтаФорма.ТекущийФильтрНаименование;
			Отбор.Вставить("НомерСтроки",ТекДанные.ИндексВалюты);
		КонецЕсли;
	КонецЕсли;
	Элементы.ТаблицаВалюты.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФильтрациюСтавкиНДС()
	Отбор = Новый Структура;
	Если ПустаяСтрока(ЭтаФорма.ТекущийФильтрСтавкиНДС) Тогда
		ЭтаФорма.СмотретьСтавкуНДСПоФильтру=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьСтавкуНДСПоФильтру.Доступность=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьСтавкуНДСПоФильтру.Заголовок="";
	Иначе
		ЭтаФорма.Элементы.ПолеСмотретьСтавкуНДСПоФильтру.Доступность=Истина;
		Если ЭтаФорма.СмотретьСтавкуНДСПоФильтру Тогда
			Если ЭтаФорма.ТекущийТипФильтрацииСтавкиНДС Тогда
				ТекДанные=Неопределено;
				йИндекс="";
				йЗаголовок="Отбор по ";
				Если ЭтаФорма.ТекущийФильтрСтавкиНДС="Валюты" Тогда
					ТекДанные=Элементы.ТаблицаВалюты.ТекущиеДанные;
					йЗаголовок=йЗаголовок+"Валюте";
					йИндекс="ИндексВалюты";
				КонецЕсли;
				Если ТекДанные<>Неопределено Тогда
					ЭтаФорма.Элементы.ПолеСмотретьСтавкуНДСПоФильтру.Заголовок=йЗаголовок+" "+ЭтаФорма.ТекущийФильтрНаименование;
					Отбор.Вставить(йИндекс, ТекДанные.НомерСтроки);
				Иначе
					ЭтаФорма.СмотретьСтавкуНДСПоФильтру=Ложь;
					ЭтаФорма.Элементы.ПолеСмотретьСтавкуНДСПоФильтру.Доступность=Ложь;
					ЭтаФорма.Элементы.ПолеСмотретьСтавкуНДСПоФильтру.Заголовок="";
				КонецЕсли;
			Иначе
				ТекДанные=Неопределено;
				йЗаголовок="Ссылка из ";
				Если ЭтаФорма.ТекущийФильтрСтавкиНДС="Деталировка" Тогда
					ТекДанные=Элементы.ТаблицаДеталировка.ТекущиеДанные;
					йЗаголовок=йЗаголовок+"Деталировки";
				КонецЕсли;
				ЭтаФорма.Элементы.ПолеСмотретьСтавкуНДСПоФильтру.Заголовок=йЗаголовок+" "+ЭтаФорма.ТекущийФильтрНаименование;
				Отбор.Вставить("НомерСтроки",ТекДанные.ИндексСтавкиНДС);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.ТаблицаСтавкиНДС.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

&НаКлиенте
Процедура ТаблоРасшифровки(ТекущаяЗакладка)
	СтандартнаяОбработка=Ложь;
	ФормаРасшифровки = ПолучитьФорму("Документ.ttk_ЗагрузкаНачисленийИзБиллинга.Форма.ФормаРасшифровкиУправляемая");
	ФормаРасшифровки.ЗакрыватьПриЗакрытииВладельца=Истина;
	ФормаРасшифровки.ВладелецФормы=ЭтаФорма.ЭтаФорма;
	СледующаяЗакладка=ФормаРасшифровки.ОткрытьМодально();
	Если СледующаяЗакладка = Неопределено Тогда
		Возврат;
	ИначеЕсли СледующаяЗакладка = "" Тогда
		Возврат;
	Иначе
		ИнициализацияФильтровТаблиц();
	КонецЕсли;
	йИ=Найти(СледующаяЗакладка,"##");
	Если йИ>0 Тогда
		ЭтаФорма.ТекущийФильтрНаименование=СокрЛП(Сред(СледующаяЗакладка,йИ+2));
		СледующаяЗакладка=Сред(СледующаяЗакладка,1,йИ-1);
	Иначе
		ЭтаФорма.ТекущийФильтрНаименование="";
	КонецЕсли;
	Если СледующаяЗакладка = "Документы" Тогда
		// переход по ссылке из Деталировки
		// переход по отбору из Договоры, Кураторы и Валюты
		ЭтаФорма.ТекущийТипФильтрацииДокументов=(НЕ (ТекущаяЗакладка = "Деталировка"));
		ЭтаФорма.ТекущийФильтрДокументов=ТекущаяЗакладка;
		ЭтаФорма.СмотретьДокументыПоФильтру=Истина;
		Элементы.ГруппаТаблицы.ТекущаяСтраница=Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Документы;
		ОбновитьФильтрациюДокументов();	
	ИначеЕсли СледующаяЗакладка = "Договоры" Тогда
		// переход по ссылке из Документы, Деталировки, Задолженность МГМН
		// переход по отбору из Валюты
		ЭтаФорма.ТекущийТипФильтрацииДоговоров=(ТекущаяЗакладка = "Валюты");
		ЭтаФорма.ТекущийФильтрДоговоров=ТекущаяЗакладка;
		ЭтаФорма.СмотретьДоговорыПоФильтру=Истина;
		Элементы.ГруппаТаблицы.ТекущаяСтраница=Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.КонтрагентыДоговоры;
		ОбновитьФильтрациюДоговоров();	
	ИначеЕсли СледующаяЗакладка = "Услуги" Тогда
		// переход по ссылке из Деталировки
		// переход по отбору не предусмотрен 
		ЭтаФорма.ТекущийФильтрУслугиНоменклатуры=ТекущаяЗакладка;
		ЭтаФорма.СмотретьУслугиНоменклатурыПоФильтру=Истина;
		Элементы.ГруппаТаблицы.ТекущаяСтраница=Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.УслугиНоменклатуры;
		ОбновитьФильтрациюУслуг();	
	ИначеЕсли СледующаяЗакладка = "Аналитики" Тогда
		// переход по ссылке из Деталировки
		// переход по отбору не предусмотрен 
		ЭтаФорма.ТекущийФильтрАналитик=ТекущаяЗакладка;
		ЭтаФорма.СмотретьАналитикиПоФильтру=Истина;
		Элементы.ГруппаТаблицы.ТекущаяСтраница=Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Аналитики;
		ОбновитьФильтрациюАналитик();	
	ИначеЕсли СледующаяЗакладка = "Кураторы" Тогда
		// переход по ссылке из Документы, Деталировки
		// переход по отбору не предусмотрен 
		ЭтаФорма.ТекущийФильтрКураторов=ТекущаяЗакладка;
		ЭтаФорма.СмотретьКураторыПоФильтру=Истина;
		Элементы.ГруппаТаблицы.ТекущаяСтраница=Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Кураторы;
		ОбновитьФильтрациюКураторов();	
	ИначеЕсли СледующаяЗакладка = "Валюты" Тогда
		// переход по ссылке из Документы, Договоры, Ставки НДС, Деталировки 
		// переход по отбору не предусмотрен 
		ЭтаФорма.ТекущийФильтрВалюты=ТекущаяЗакладка;
		ЭтаФорма.СмотретьВалютыПоФильтру=Истина;
		Элементы.ГруппаТаблицы.ТекущаяСтраница=Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Валюты;
		ОбновитьФильтрациюВалюты();	
	ИначеЕсли СледующаяЗакладка = "СтавкиНДС" Тогда
		// переход по ссылке из Деталировки
		// переход по отбору из Валюты 
		ЭтаФорма.ТекущийТипФильтрацииСтавкиНДС=(ТекущаяЗакладка = "Валюты");
		ЭтаФорма.ТекущийФильтрСтавкиНДС=ТекущаяЗакладка;
		ЭтаФорма.СмотретьСтавкуНДСПоФильтру=Истина;
		Элементы.ГруппаТаблицы.ТекущаяСтраница=Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.СтавкиНДС;
		ОбновитьФильтрациюСтавкиНДС();	
	ИначеЕсли СледующаяЗакладка = "Деталировка" Тогда
		// переход по ссылке не предусмотрен
		// переход по отбору из Документа, Договора, Услуги, Аналитики, Ставки НДС, Валюты, Куратора 
		ЭтаФорма.ТекущийФильтрДеталировки=ТекущаяЗакладка;
		ЭтаФорма.СмотретьДеталировкуПоФильтру=Истина;
		Элементы.ГруппаТаблицы.ТекущаяСтраница=Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.Деталировка;
		ОбновитьФильтрациюДеталировки();	
	ИначеЕсли СледующаяЗакладка = "Задолженность" Тогда
		// переход по ссылке не предусмотрен
		// переход по отбору из Договора 
		ЭтаФорма.ТекущийФильтрЗадолженности=ТекущаяЗакладка;
		ЭтаФорма.СмотретьЗадолженностьПоФильтру=Истина;
		Элементы.ГруппаТаблицы.ТекущаяСтраница=Элементы.ГруппаТаблицы.ПодчиненныеЭлементы.СтраницаЗадолженностьМГМН;
		ОбновитьФильтрациюЗадолженности();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура йПосмотретьРашифровкуКураторы(Команда)
	ТаблоРасшифровки("Кураторы");
КонецПроцедуры

&НаКлиенте
Процедура йПосмотретьРашифровкуКонтрагентыДоговоры(Команда)
	ТаблоРасшифровки("Договоры");
КонецПроцедуры

&НаКлиенте
Процедура йПосмотретьРасшифровкуВалюты(Команда)
	ТаблоРасшифровки("Валюты");
КонецПроцедуры

&НаКлиенте
Процедура йПосмотретьРасшифровкуСтавкиНДС(Команда)
	ТаблоРасшифровки("СтавкиНДС");
КонецПроцедуры

&НаКлиенте
Процедура йПосмотретьРасшифровкуУслуги(Команда)
	ТаблоРасшифровки("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура йПосмотретьРасшифровкуАналитики(Команда)
	ТаблоРасшифровки("Аналитики");
КонецПроцедуры

&НаКлиенте
Процедура йПосмотретьРасшифровкуДокументов(Команда)
	ТаблоРасшифровки("Документы");
КонецПроцедуры

&НаКлиенте
Процедура йПосмотретьРасшифровкуДеталировки(Команда)
	ТаблоРасшифровки("Деталировка");
КонецПроцедуры

&НаКлиенте
Процедура ПолеКураторыСмотретьПоФильтруПриИзменении(Элемент)
	ОбновитьФильтрациюКураторов();	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьВалютыПоФильтруПриИзменении(Элемент)
	ОбновитьФильтрациюВалюты();	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьСтавкуНДСПоФильтруПриИзменении(Элемент)
	ОбновитьФильтрациюСтавкиНДС();	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьУслугиНоменклатурыПоФильтруПриИзменении(Элемент)
	ОбновитьФильтрациюУслуг();	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьКонтрагентовДоговорыПоФильтруПриИзменении(Элемент)
	ОбновитьФильтрациюДоговоров();	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьАналитикиПоФильтруПриИзменении(Элемент)
	ОбновитьФильтрациюАналитик();	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьДокументыПоФильтруПриИзменении(Элемент)
	ОбновитьФильтрациюДокументов();	
КонецПроцедуры

&НаКлиенте
Процедура ПолеКонтрагентыДоговорыТолькоНовыеПриИзменении(Элемент)
	ОбновитьФильтрациюДоговоров();
КонецПроцедуры

&НаКлиенте
Функция ОбновитьНоменклатурнуюГруппу(йНоменклатура,йКатегорияУслуги,йЦФО)
	йНГ=Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	Если ЗначениеЗаполнено(йКатегорияУслуги) И ЗначениеЗаполнено(йЦФО) Тогда
		// по новому алгоритму
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		             |	ttk_СоответствиеУслугПоКатегориямСрезПоследних.НоменклатурнаяГруппа
		             |ИЗ
		             |	РегистрСведений.ttk_СоответствиеУслугПоКатегориям.СрезПоследних(&ДатаУчета, ) КАК ttk_СоответствиеУслугПоКатегориямСрезПоследних
		             |ГДЕ
		             |	ttk_СоответствиеУслугПоКатегориямСрезПоследних.ЦФО = &йЦФО
		             |	И ttk_СоответствиеУслугПоКатегориямСрезПоследних.Номенклатура = &йКУ";
		Запрос.УстановитьПараметр("ДатаУчета",НачалоМесяца(Объект.Дата));
		Запрос.УстановитьПараметр("йЦФО",йЦФО);
		Запрос.УстановитьПараметр("йКУ",йКатегорияУслуги);
		НГы=Запрос.Выполнить().Выбрать();
		Если НГы.Следующий() Тогда
			йНГ=НГы.НоменклатурнаяГруппа;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(йНГ) И ЗначениеЗаполнено(йНоменклатура) Тогда
		// по старому алгоритму
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		             |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		             |ИЗ
		             |	РегистрСведений.абс_СоответствиеНоменклатурыБюджетнымАналитикам КАК абс_СоответствиеНоменклатурыБюджетнымАналитикам
		             |ГДЕ
		             |	абс_СоответствиеНоменклатурыБюджетнымАналитикам.Организация = &Организация
		             |	И абс_СоответствиеНоменклатурыБюджетнымАналитикам.НоменклатурнаяГруппа.абс_СтатусНоменклатурнойГруппы = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)
		             |	И абс_СоответствиеНоменклатурыБюджетнымАналитикам.Номенклатура = &йНома
		             |	И ВЫБОР
		             |			КОГДА &йЦФО ЕСТЬ NULL 
		             |				ТОГДА ИСТИНА
		             |			ИНАЧЕ абс_СоответствиеНоменклатурыБюджетнымАналитикам.ЦФО = &йЦФО
		             |		КОНЕЦ";
		Запрос.УстановитьПараметр("Организация",Объект.Организация);
		Запрос.УстановитьПараметр("йНома",йНоменклатура);
		Если ЗначениеЗаполнено(йЦФО) Тогда
			// жёсткий поиск
			Запрос.УстановитьПараметр("йЦФО",йЦФО);
			НГы=Запрос.Выполнить().Выбрать();
			Если НГы.Следующий() Тогда
				йНГ=НГы.НоменклатурнаяГруппа;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(йНГ) Тогда
			// мягкий поиск
			Запрос.УстановитьПараметр("йЦФО",NULL);
			НГы=Запрос.Выполнить().Выбрать();
			Если НГы.Следующий() Тогда
				йНГ=НГы.НоменклатурнаяГруппа;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат йНГ;
КонецФункции

&НаКлиенте
Функция ОбновитьБюджетнуюСтатью(йНГ,йЦФО,йЦФУ)
	йБС=Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ДХ001");
	Если ЗначениеЗаполнено(йНГ) И ЗначениеЗаполнено(йЦФО) И ЗначениеЗаполнено(йЦФУ) Тогда
		Запрос=Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		             |	СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Ссылка КАК СтатьяОборотов
		             |ПОМЕСТИТЬ ВТ_ОборотыБюджетов
		             |ИЗ
		             |	Справочник.СтатьиОборотовПоБюджетам.абс_ПериодыИспользования КАК СтатьиОборотовПоБюджетамабс_ПериодыИспользования
		             |ГДЕ
		             |	СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Использование
		             |	И ГОД(СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Период) = &ГодЗагрузки
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		             |	kwr_СоответствиеАналитикБУиУУСрезПоследних.СтатьиОборотовПоБюджетам КАК БюджетнаяСтатья
		             |ИЗ
		             |	РегистрСведений.kwr_СоответствиеАналитикБУиУУ.СрезПоследних(
		             |			&ДатаУчета,
		             |			СчетХозрасчетный.Код = ""90.01.1""
		             |				И СтатьиОборотовПоБюджетам В
		             |					(ВЫБРАТЬ
		             |						ВТ_.СтатьяОборотов
		             |					ИЗ
		             |						ВТ_ОборотыБюджетов КАК ВТ_)) КАК kwr_СоответствиеАналитикБУиУУСрезПоследних
		             |ГДЕ
		             |	kwr_СоответствиеАналитикБУиУУСрезПоследних.СтатьиОборотовПоБюджетам <> &БС_DEF
		             |	И (ВЫРАЗИТЬ(kwr_СоответствиеАналитикБУиУУСрезПоследних.СубконтоХозр1 КАК Справочник.НоменклатурныеГруппы)) = &йНГ
		             |	И kwr_СоответствиеАналитикБУиУУСрезПоследних.ЦФУ = &йЦФУ
		             |	И kwr_СоответствиеАналитикБУиУУСрезПоследних.ЦФО = &йЦФО";
		Запрос.УстановитьПараметр("ДатаУчета",НачалоМесяца(Объект.Дата));
		Запрос.УстановитьПараметр("ГодЗагрузки",Цел(Объект.MONT_F/100));
		Запрос.УстановитьПараметр("йЦФО",йЦФО);
		Запрос.УстановитьПараметр("йЦФУ",йЦФУ);
		Запрос.УстановитьПараметр("БС_DEF",йБС);
		Запрос.УстановитьПараметр("йНГ",йНГ);
		БСы=Запрос.Выполнить().Выбрать();
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		Если БСы.Следующий() Тогда
			йБС=БСы.БюджетнаяСтатья;
		КонецЕсли;
	КонецЕсли;
	Возврат йБС;
КонецФункции

&НаКлиенте
Процедура ТаблицаДеталировкаЦФУПриИзменении(Элемент)
	//ОбновитьАналитикиПоЦФОиЦФУ("ЦФУ",Элементы.ТаблицаДеталировка.ТекущиеДанные,Элементы.ТаблицаДеталировка.ТекущиеДанные.ЦФУ);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДеталировкаЦФОПриИзменении(Элемент)
	//ОбновитьАналитикиПоЦФОиЦФУ("ЦФО",Элементы.ТаблицаДеталировка.ТекущиеДанные,Элементы.ТаблицаДеталировка.ТекущиеДанные.ЦФО);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАналитикиПоЦФОиЦФУ(ТипЦентра, ТекДанные, ВыбранноеЗначение)
	йНоменклатура=ТекДанные.Номенклатура;
	йКатегорияУслуги=ТекДанные.КатегорияУслуги;
	Если ТипЦентра = "ЦФО" Тогда
		йЦФО=ВыбранноеЗначение;
		йЦФУ=ТекДанные.ЦФУ;
	Иначе
		йЦФО=ТекДанные.ЦФО;
		йЦФУ=ВыбранноеЗначение;
	КонецЕсли;
	йНГ=ОбновитьНоменклатурнуюГруппу(йНоменклатура,йКатегорияУслуги,йЦФО);
	йБС=ОбновитьБюджетнуюСтатью(йНГ,йЦФО,йЦФУ);
	Если ТипЦентра = "ЦФО" Тогда
		Если йЦФО<>ТекДанные.ЦФО ИЛИ йНГ<>ТекДанные.НоменклатурнаяГруппа ИЛИ йБС<>ТекДанные.БюджетнаяСтатья Тогда
			Модифицированность=Истина;
		КонецЕсли;
		ТекДанные.ЦФО=йЦФО;
	Иначе
		Если йЦФУ<>ТекДанные.ЦФУ ИЛИ йНГ<>ТекДанные.НоменклатурнаяГруппа ИЛИ йБС<>ТекДанные.БюджетнаяСтатья Тогда
			Модифицированность=Истина;
		КонецЕсли;
		ТекДанные.ЦФУ=йЦФУ;
	КонецЕсли;
	ТекДанные.НоменклатурнаяГруппа=йНГ;
	ТекДанные.БюджетнаяСтатья=йБС;
	// обновить строку деталировки
	ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,ТекДанные.НомерСтроки-1,);
	// обновить строку документа
	ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,ТекДанные.ИндексДокумента-1);
	ОбновитьТранспарантОшибок();
	ОтображениеМодифицированности();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДеталировкаЦФУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбновитьАналитикиПоЦФОиЦФУ("ЦФУ",Элементы.ТаблицаДеталировка.ТекущиеДанные,ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДеталировкаЦФУОчистка(Элемент, СтандартнаяОбработка)
	ОбновитьАналитикиПоЦФОиЦФУ("ЦФУ",Элементы.ТаблицаДеталировка.ТекущиеДанные,Справочники.абс_ЦФУ.ПустаяСсылка());
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДеталировкаЦФООчистка(Элемент, СтандартнаяОбработка)
	ОбновитьАналитикиПоЦФОиЦФУ("ЦФО",Элементы.ТаблицаДеталировка.ТекущиеДанные,Справочники.Подразделения.ПустаяСсылка());
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДеталировкаЦФООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбновитьАналитикиПоЦФОиЦФУ("ЦФО",Элементы.ТаблицаДеталировка.ТекущиеДанные,ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные=Элементы.ТаблицаДокументы.ТекущиеДанные;
	СтандартнаяОбработка=Ложь;
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	Отбор = Новый Структура();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
		Отбор.Вставить("Контрагент", ТекДанные.Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Договор) Тогда
		Отбор.Вставить("ДокументыПоДоговоруКонтрагента", ТекДанные.Договор);
	КонецЕсли;
	ФлагВыбораТипа=Истина;
	Для каждого йСтр Из СписокТипов Цикл
		Если ТипЗнч(ТекДанные.ДокументОснование)=йСтр.Значение Тогда
			ФлагВыбораТипа=Ложь;
			ВыбранныйТип=йСтр.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ФлагВыбораТипа Тогда
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);
		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ВыбранныйТип = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	Если ТипЗнч(ДанныеВыбора) <> ВыбранныйТип Тогда
		ТекДАнные.ДокументОснование = Документы[Метаданные.НайтиПоТипу(ВыбранныйТип).Имя].ПустаяСсылка();
	КонецЕсли; 
	ФормаВыбора = Документы[Метаданные.НайтиПоТипу(ВыбранныйТип).Имя].ПолучитьФормуВыбора(,Элемент,);
	Для каждого ЭлементСтруктуры Из Отбор Цикл
		Если ФормаВыбора.Отбор.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
		Иначе
			Если НЕ ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ТипЗначения.СодержитТип(ТипЗнч(ЭлементСтруктуры.Значение)) Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
	КонецЦикла; 
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ТекДанные.ДокументОснование;
	КонецЕсли;
	ФормаВыбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура йСколькоДокументовНаОперации(Команда)
	Если Объект.КоличествоДокументовРеализацииНаИсполненииОперации+
		 Объект.КоличествоДокументовКорректировкиРеализацииНаИсполненииОперации > 0 Тогда
		Если КоличествоДокументовНаОперации>0 Тогда
			ОбновитьКнопкуОбновленияКоличестваДокументовНаОперации(КоличествоДокументовНаОперации);
		Иначе
			Состояние("Обновляется информация в документе загрузки по завершённым операциям...");
			ОбновитьСтатусыПослеОперации();
			//ОбновлениеСтатусовОбъектовЗагрузки();
			//ОбновитьСтатусыПослеОперацииСоСбоем();
			Состояние("Обновляется информационный транспарант...");
			ОбновитьТранспарантОшибок();
			ОбновитьКнопкуОбновленияКоличестваДокументовНаОперации(КоличествоДокументовНаОперации);
			Если Модифицированность Тогда
				Состояние("Идёт сохранение документа загрузки начислений из биллинга...");
				йЗаписатьБыстро();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыПослеОперацииСоСбоем()
	Для каждого йСтрока Из Объект.Документы Цикл
		Если йСтрока.ОперацияСДокументом = Перечисления.ttk_ОперацииСДокументамиНачислений.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		йСтрока.ОперацияСДокументом = Перечисления.ttk_ОперацииСДокументамиНачислений.ПустаяСсылка();
		ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,йСтрока.НомерСтроки-1);
		Модифицированность=Истина;
	КонецЦикла;
	ОтображениеМодифицированности();
КонецПроцедуры

&НаКлиенте
Процедура йЗаписатьБыстроНаФорме()
	йЗаписатьБыстро();
	Отказ=Ложь;
	НаложитьНаФормуНовыйСтатус(Объект.Ссылка.абс_Статус,Отказ);
КонецПроцедуры

&НаСервере
Процедура йЗаписатьБыстро()
	//ЭОбъект=РеквизитФормыВЗначение("Объект").ЗаписатьБыстро();
	ЭОбъект=РеквизитФормыВЗначение("Объект");
	Если Объект.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
	Иначе
		Если Объект.Проведен Тогда
			ЭОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения,РежимПроведенияДокумента.Неоперативный);
		Иначе
			ЭОбъект.ОбменДанными.Загрузка=Истина;
			ЭОбъект.Записать();
			ЭОбъект.ОбменДанными.Загрузка=Ложь;
		КонецЕсли;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ЭОбъект,"Объект");
	Модифицированность=Ложь;
	Элементы.ДекорацияОсобоеВнимание.Заголовок = "";
	Элементы.ДекорацияЗначенияТекущегоСтатуса.Заголовок=Объект.Ссылка.абс_Статус;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТаблицыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьДеталировкуОшибкиАналитикиПриИзменении(Элемент)
	ОбновитьФильтрациюДеталировки();	
КонецПроцедуры

&НаКлиенте
Процедура йКомандаСоздатьИПровестиДокументЗадолженностиМГМН(Команда)
	Если ЗначениеЗаполнено(Объект.ДокументЗадолженностьМГМН) Тогда
		йОпер = "удаления документа Задолженности МГМН из ЕИСУП";
	Иначе
		йОпер = "создания и проведения документа Задолженности МГМН";
	КонецЕсли;
	Если Вопрос("Поставить в очередь операцию "+йОпер+"?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	РОО=РегистрыСведений.ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СоздатьНаборЗаписей();
	РОО.Отбор.ДокументЗагрузки.Установить(Объект.Ссылка);
	РОО.Отбор.СтрокаНомер.Установить(0);
	РОО.Прочитать();
	РОО.Очистить();
	йРОО=РОО.Добавить();
	йРОО.ДокументЗагрузки = Объект.Ссылка;
	йРОО.СтрокаНомер = 0;
	йРОО.Пул = 0;
	йРОО.НачалоОперации = Дата(1,1,1);
	йРОО.ОкончаниеОперации = Дата(1,1,1);
	йРОО.Ответственный = ?(ЗначениеЗаполнено(Объект.МестонахождениеБиллинга.ПользовательПоУмолчанию),Объект.МестонахождениеБиллинга.ПользовательПоУмолчанию,глЗначениеПеременной("глТекущийПользователь"));
	Если ЗначениеЗаполнено(Объект.ДокументЗадолженностьМГМН) Тогда
		йРОО.ЦельОперации = Перечисления.ttk_ОперацииСДокументамиНачислений.Готов;
		йРОО.ЗадолженностьМГМН = Объект.ДокументЗадолженностьМГМН.Ссылка;
		РОО.Записать();
		Объект.ОперацияСДокументомЗадолженностиМГМН = Перечисления.ttk_ОперацииСДокументамиНачислений.Готов;
	Иначе
		йРОО.ЦельОперации = Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение;
		РОО.Записать();
		Объект.ОперацияСДокументомЗадолженностиМГМН = Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение;
	КонецЕсли;
	Модифицированность=Истина;
	ОбновитьШапкуТаблицыДокументаЗадолженностиМГМН();
	ОбновитьТранспарантОшибок();
	Если Модифицированность Тогда
		йЗаписатьБыстро();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура йКомандаСменыТипаЗагрузкиДокументаЗадолженностиМГМН(Команда)
	Если Объект.ТипЗагрузкиДокументаЗадолженностиМГМН = Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение Тогда
		йТип="Отказать в загрузке";
	Иначе
		йТип="Разрешить загрузку";
	КонецЕсли;
	Если Вопрос(йТип+" документа Задолженности МГМН",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ТипЗагрузкиДокументаЗадолженностиМГМН = Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение Тогда
		Объект.ТипЗагрузкиДокументаЗадолженностиМГМН=Перечисления.ttk_ОперацииСДокументамиНачислений.Отказать;
	Иначе
		Объект.ТипЗагрузкиДокументаЗадолженностиМГМН=Перечисления.ttk_ОперацииСДокументамиНачислений.Проведение;
	КонецЕсли;
	ОбновитьШапкуТаблицыДокументаЗадолженностиМГМН();
	ОбновитьТранспарантОшибок();
	Если Модифицированность Тогда
		йЗаписатьБыстро();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура йКомандаПроверитьСтатусОперацииСДокументомЗадолженности(Команда)
	РОО=РегистрыСведений.ttk_Task_Queue_ЗагрузкаНачисленийИзБиллинга.СоздатьНаборЗаписей();
	РОО.Отбор.ДокументЗагрузки.Установить(Объект.Ссылка);
	РОО.Отбор.СтрокаНомер.Установить(0);
	РОО.Прочитать();
	Если РОО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	йРОО=РОО[0];
	Если НЕ ЗначениеЗаполнено(йРОО.НачалоОперации) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(йРОО.ОкончаниеОперации) Тогда
		Возврат;
	КонецЕсли;
	Объект.ДокументЗадолженностьМГМН = йРОО.ЗадолженностьМГМН.Ссылка;
	РОО.Очистить();
	РОО.Записать();
	Объект.ОперацияСДокументомЗадолженностиМГМН = Перечисления.ttk_ОперацииСДокументамиНачислений.ПустаяСсылка();
	ФлагГотов=Истина;
	Для йИнд=0 По Объект.ЗадолженностьМГМН.Количество()-1 Цикл
		ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,,йИнд);
		Если Объект.ЗадолженностьМГМН[йИнд].СтатусОшибка Тогда
			ФлагГотов=Ложь;
		КонецЕсли;
	КонецЦикла;
	ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,,,ФлагГотов);
	ОбновитьТранспарантОшибок();
	Если Модифицированность Тогда
		йЗаписатьБыстро();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФильтрациюЗадолженности()
	Отбор = Новый Структура;
	Если СмотретьЗадолженностьТолькоОшибки Тогда
		Отбор.Вставить("СтатусОшибка", Истина);
	КонецЕсли;
	Если ПустаяСтрока(ЭтаФорма.ТекущийФильтрЗадолженности) Тогда
		ЭтаФорма.СмотретьЗадолженностьПоФильтру=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьЗадолженностьПоФильтру.Доступность=Ложь;
		ЭтаФорма.Элементы.ПолеСмотретьЗадолженностьПоФильтру.Заголовок="";
	Иначе
		ЭтаФорма.Элементы.ПолеСмотретьЗадолженностьПоФильтру.Доступность=Истина;
		Если ЭтаФорма.СмотретьЗадолженностьПоФильтру Тогда
			ТекДанные=Неопределено;
			йИндекс="";
			йЗаголовок="Отбор по ";
			Если ЭтаФорма.ТекущийФильтрЗадолженности="Договоры" Тогда
				ТекДанные=Элементы.ТаблицаКонтрагентыДоговоры.ТекущиеДанные;
				йЗаголовок=йЗаголовок+"Договору";
				йИндекс="ИндексДоговора";
			КонецЕсли;
			Если ТекДанные<>Неопределено Тогда
				ЭтаФорма.Элементы.ПолеСмотретьЗадолженностьПоФильтру.Заголовок=йЗаголовок+" "+ЭтаФорма.ТекущийФильтрНаименование;
				Отбор.Вставить(йИндекс, ТекДанные.НомерСтроки);
			Иначе
				ЭтаФорма.СмотретьЗадолженностьПоФильтру=Ложь;
				ЭтаФорма.Элементы.ПолеСмотретьЗадолженностьПоФильтру.Доступность=Ложь;
				ЭтаФорма.Элементы.ПолеСмотретьЗадолженностьПоФильтру.Заголовок="";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.ТаблицаЗадолженностиМГМН.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьЗадолженностьПоФильтруПриИзменении(Элемент)
	ОбновитьФильтрациюЗадолженности();
КонецПроцедуры

&НаКлиенте
Процедура ПолеСмотретьЗадолженностьТолькоОшибкиПриИзменении(Элемент)
	ОбновитьФильтрациюЗадолженности();
КонецПроцедуры

&НаКлиенте
Процедура йПосмотретьРасшифровкуЗадолженности(Команда)
	ТаблоРасшифровки("Задолженность");
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеМодифицированности()
	Если Модифицированность Тогда
		Элементы.ДекорацияОсобоеВнимание.Заголовок = "НЕОБХОДИМО ЗАПИСАТЬ ИЗМЕНЕНИЯ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыДокументОснованиеПриИзменении(Элемент)
	Состояние("Идёт определение документа корректировки по выбранному документу основанию...");
	ОбновитьПараметрыСтрокиДокументКорректировка(Элементы.ТаблицаДокументы.ТекущиеДанные);
	ОбновлениеСтатусаОбъектаЗагрузки(,,,,,,,Элементы.ТаблицаДокументы.ТекущиеДанные.НомерСтроки-1);
	ОбновитьТранспарантОшибок();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентыДоговорыДоговорОчистка(Элемент, СтандартнаяОбработка)
	ТекДанные=Элементы.ТаблицаКонтрагентыДоговоры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Договор) Тогда
		Возврат;
	КонецЕсли;
	ТекДанные.Договор=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Состояние("Обновляется информация после удаления договора...");
	ОбновитьДанныеПоДоговору(ТекДанные.НомерСтроки);
	ОбновитьТранспарантОшибок();
КонецПроцедуры

&НаКлиенте
Процедура йКомандаСоздатьЗаказ(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура абс_СтатусНовыйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	абс_СтатусНовыйНачалоВыбораИзСписка(Элемент, Ложь);
	
КонецПроцедуры
