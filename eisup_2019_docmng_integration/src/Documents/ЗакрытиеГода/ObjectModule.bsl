Перем мУдалятьДвижения;

Перем мКонДата;
Перем мКонГраница;
Перем мПроводкиБУ;
Перем мПроводкиНУ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ПериодРегистрации");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если Месяц(СтруктураШапкиДокумента.ПериодРегистрации) <> 12 Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Закрытие года может вводиться только за период 'Декабрь'", Отказ, Заголовок);
	КонецЕсли;
	//Проверка отмечено ли хотя бы одно действие
	Если не (РеформацияБалансаБУ или ЗакрытиеСчетовНУ ) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбраны выполняемые действия",Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проводит закрытие субсчетов 99, 90 и 91 счетов
Процедура ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ, Заголовок) 
	
	 Если не СтруктураШапкиДокумента.РеформацияБалансаБУ Тогда
		 Возврат;
	 КонецЕсли;
	 
		 
	 // Закрытие 99 счетов в БУ и реформация баланса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.ПрибылиИУбытки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Прибыль = 0;
	Пока Выборка.Следующий() Цикл
		СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);
		Прибыль = Прибыль + СуммаСписания;

		Если Выборка.Счет = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеОблагаемыеЕНВД Тогда
			СуммаСписания = 0;
		КонецЕсли;
		
		Если СуммаСписания > 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период                    = мКонДата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = Выборка.Счет;
			Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеОблагаемыеЕНВД;
			Проводка.Сумма                     = СуммаСписания;
			Проводка.Содержание                = "Реформация баланса";
			Проводка.НомерЖурнала              = "ФР";
			
		КонецЕсли;
		
		Если СуммаСписания < 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период                    = мКонДата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеОблагаемыеЕНВД;
			Проводка.СчетКт                    = Выборка.Счет;
			Проводка.Сумма                     = - СуммаСписания;
			Проводка.Содержание                = "Реформация баланса";
			Проводка.НомерЖурнала              = "ФР";
			
		КонецЕсли;
	КонецЦикла;
			
	Если Прибыль > 0 Тогда
		
		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = мКонДата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеОблагаемыеЕНВД;
		Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
		Проводка.Сумма                     = Прибыль;
		Проводка.Содержание                = "Реформация баланса";
		Проводка.НомерЖурнала              = "ФР";
	КонецЕсли;
	
	Если Прибыль < 0 Тогда
		
		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = мКонДата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
		Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеОблагаемыеЕНВД;
		Проводка.Сумма                     = - Прибыль;
		Проводка.Содержание                = "Реформация баланса";
		Проводка.НомерЖурнала              = "ФР";
	КонецЕсли;
	
	// закрытие 90 счетов в БУ
			
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.Продажи);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);

		Если Выборка.Счет = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаСписания > 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период                    = мКонДата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = Выборка.Счет;
			Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
			Проводка.Сумма                     = СуммаСписания;
			Проводка.Содержание                = "Закрытие года";
			Проводка.НомерЖурнала              = "ФР";
			
		КонецЕсли;
		
		Если СуммаСписания < 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период                    = мКонДата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
			Проводка.СчетКт                    = Выборка.Счет;
			Проводка.Сумма                     = - СуммаСписания;
			Проводка.Содержание                = "Закрытие года";
			Проводка.НомерЖурнала              = "ФР";
			
		КонецЕсли;
	КонецЦикла;

		// закрытие 91 счетов в БУ
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);

		Если Выборка.Счет = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаСписания > 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период                    = мКонДата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = Выборка.Счет;
			Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
			Проводка.Сумма                     = СуммаСписания;
			Проводка.Содержание                = "Закрытие года";
			Проводка.НомерЖурнала              = "ФР";
			
		КонецЕсли;
		
		Если СуммаСписания < 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период                    = мКонДата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
			Проводка.СчетКт                    = Выборка.Счет;
			Проводка.Сумма                     = - СуммаСписания;
			Проводка.Содержание                = "Закрытие года";
			Проводка.НомерЖурнала              = "ФР";
			
		КонецЕсли;
	КонецЦикла;
	
		ПараметрыУчетнойПолитикиРегл = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
			ПоддержкаПБУ18 = ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18;
		Иначе
			ПоддержкаПБУ18 = Ложь;
		КонецЕсли; 
	
	Если ПоддержкаПБУ18 Тогда
		ПересчетОНАиОНО(СтруктураШапкиДокумента, мПроводкиБУ);
	КонецЕсли;
	
	//АБС ВСТАВКА 38148  28.01.2014 16:54:18  Шамов
	//необходимо свернуть сальдо по 99.01.1
	Счет99_01_1 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеОблагаемыеЕНВД;
	Счет000 = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",        Счет99_01_1);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &Счет, , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	
	Результат = Запрос.Выполнить();
	тзСальдо99   = Результат.Выгрузить();
	
	Для Каждого Проводка Из мПроводкиБУ Цикл
		Если Проводка.СчетДт = Счет99_01_1 ТОгда
			СтрокаТЗ = тзСальдо99.Добавить();
			СтрокаТЗ.Субконто1 = Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки];
			СтрокаТЗ.СуммаДт = Проводка.Сумма;
			СтрокаТЗ.СуммаКт = 0;
		ИначеЕсли Проводка.СчетКт = Счет99_01_1 ТОгда
			СтрокаТЗ = тзСальдо99.Добавить();
			СтрокаТЗ.Субконто1 = Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки];
			СтрокаТЗ.СуммаДт = 0;
			СтрокаТЗ.СуммаКт = Проводка.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	тзСальдо99.Свернуть("Субконто1", "СуммаДт,СуммаКт");
	
	Если тзСальдо99.Итог("СуммаДт") <> тзСальдо99.Итог("СуммаДт") ТОгда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Сальдо по 99.01.1 не закрыто",ЛОжь, Заголовок);
	Иначе	
		Для Каждого СтрокаТЗ Из тзСальдо99 Цикл
			
			ТекСальдо = СтрокаТЗ.СуммаДт - СтрокаТЗ.СуммаКт;
			
			Если ТекСальдо = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период                    = мКонДата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт                    = Счет000;
			Проводка.СчетКт                    = Счет99_01_1;
			Если СтрокаТЗ.Субконто1 = Неопределено Тогда
				Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки] = Перечисления.ПрибылиИУбытки.ПустаяСсылка();
			Иначе
				Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки] = СтрокаТЗ.Субконто1; 
			КонецЕсли;
			Проводка.Сумма                     = ТекСальдо;
				
			Проводка.Содержание                = "Реформация баланса";
			Проводка.НомерЖурнала              = "ФР";	
			
		КонецЦикла;
	КонецЕсли;
	//АБС ВСТАВКА 38148 КОНЕЦ
	
КонецПроцедуры

//АБС Кряковкин 20141020 
//Изменено заполнение даты в проводках с даты документа на мКонДата  
Процедура ЗакрытиеСчетовНУ(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ЗакрытиеСчетовНУ Тогда
		Возврат;
	КонецЕсли;
			
	// Закрытие 99 счетов 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мКонДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",      ПланыСчетов.Налоговый.ПрибылиИУбытки);
	Запрос.УстановитьПараметр("ВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОбороты.Счет КАК Счет,
	|	НалоговыйОбороты.ВидУчета КАК ВидУчета,
	|	НалоговыйОбороты.Субконто1 КАК Субконто1,
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), &ВидСубконто, Организация = &Организация, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.ВидУчета,
	|	НалоговыйОбороты.Счет,
	|	НалоговыйОбороты.Субконто1
	|ИТОГИ
	|	СУММА(СуммаОборотДт),
	|	СУММА(СуммаОборотКт)
	|ПО
	|	Счет,
	|	ВидУчета,
	|	Субконто1";
		
		
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	ВыборкаВидУчета = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ВидУчета");
	Пока ВыборкаВидУчета.Следующий() Цикл
		ВыборкаСчет = ВыборкаВидУчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Счет");
		Прибыль = 0;

		Пока ВыборкаСчет.Следующий() Цикл
			Выборка = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Субконто1");
			Пока Выборка.Следующий() Цикл

				СуммаСписания =  ?(Выборка.СуммаОборотКт = Null, 0, Выборка.СуммаОборотКт) - ?(Выборка.СуммаОборотДт = Null, 0, Выборка.СуммаОборотДт);
				Прибыль = Прибыль + СуммаСписания;
				
				Если Выборка.Субконто1 = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж Тогда
					СуммаСписания = 0;
				КонецЕсли;
				
				Если СуммаСписания > 0 Тогда
					
					Проводка = мПроводкиНУ.Добавить();
					Проводка.Период                    = мКонДата;
					Проводка.Организация               = СтруктураШапкиДокумента.Организация;
					Проводка.СчетДт                    = Выборка.Счет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
					Проводка.СчетКт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
					Проводка.Сумма                     = СуммаСписания;
					Проводка.Содержание                = "Закрытие года";
					Проводка.НомерЖурнала              = "ФР";
					Проводка.ВидУчетаДт                = ВыборкаВидУчета.ВидУчета;
					Проводка.ВидУчетаКт                = ВыборкаВидУчета.ВидУчета;
				КонецЕсли;
				
				Если СуммаСписания < 0 Тогда
					
					Проводка = мПроводкиНУ.Добавить();
					Проводка.Период                    = мКонДата;
					Проводка.Организация               = СтруктураШапкиДокумента.Организация;
					Проводка.СчетКт                    = Выборка.Счет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
					Проводка.СчетДт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
					Проводка.Сумма                     = - СуммаСписания;
					Проводка.Содержание                = "Закрытие года";
					Проводка.НомерЖурнала              = "ФР";
					Проводка.ВидУчетаДт                = ВыборкаВидУчета.ВидУчета;
					Проводка.ВидУчетаКт                = ВыборкаВидУчета.ВидУчета;
				
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если Прибыль > 0 Тогда
			
			Проводка = мПроводкиНУ.Добавить();
			Проводка.Период                    = мКонДата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
			Проводка.Сумма                     = Прибыль;
			Проводка.Содержание                = "Закрытие года";
			Проводка.НомерЖурнала              = "ФР";
			Проводка.ВидУчетаДт                = ВыборкаВидУчета.ВидУчета;
		КонецЕсли;
		
		Если Прибыль < 0 Тогда
			
			Проводка = мПроводкиНУ.Добавить();
			Проводка.Период                    = мКонДата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетКт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
			Проводка.Сумма                     = - Прибыль;
			Проводка.Содержание                = "Закрытие года";
			Проводка.НомерЖурнала              = "ФР";
			Проводка.ВидУчетаКт                = ВыборкаВидУчета.ВидУчета;
		КонецЕсли;
	КонецЦикла;
		
		
		
	// закрытие счетов в НУ
	СписокСчетовДляЗакрытия = Новый Массив;
	
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ФСС);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ПФР_нак);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ПФР_страх);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ФФОМС);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ТФОМС);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ЕСН_ФБ);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ФСС_НСиПЗ);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииПокупныхТоваров);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.СебестоимостьПродаж);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.Продажи_ЭкспортныеПошлины);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ПрибыльУбытокОтПродаж);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииОсновныхСредств);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииНематериальныхАктивов);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииОбъектовСтроительства);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииИмущественныхПрав);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииЦенныхБумаг);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВнереализационныеДоходы);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейОсновныхСредств);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейНематериальныхАктивов);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейОбъектовСтроительства);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейПрочегоИмущества);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейИмущественныхПрав);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейЦенныхБумаг);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВнереализационныеРасходы);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВнереализационныеРасходыРаспределяемые);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ПрочиеКосвенныеРасходы);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.Прочие);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.СальдоПрочихДоходовИРасходов);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыплатыВпользуФизЛицПоП_1_48);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ДругиеВыплатыПоП_1_48);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыплатыВпользуФизЛицПоП_49);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ДругиеВыплатыПоП_49);
	СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ДоходыРасходыНеУчитываемые);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",        СписокСчетовДляЗакрытия);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОстатки.Счет КАК Счет,
	|	НалоговыйОстатки.ВидУчета,
	|	СУММА(НалоговыйОстатки.СуммаОстатокДт) КАК СуммаДт,
	|	СУММА(НалоговыйОстатки.СуммаОстатокКт) КАК СуммаКт,
	|	СУММА(НалоговыйОстатки.КоличествоОстатокДт) КАК КоличествоДт,
	|	СУММА(НалоговыйОстатки.КоличествоОстатокКт) КАК КоличествоКт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|		&ДатаКон,
	|		Счет В ИЕРАРХИИ (&Счет),
	|		,
	|		Организация = &Организация) КАК НалоговыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстатки.Счет,
	|	НалоговыйОстатки.ВидУчета";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Выборка Из Результат Цикл
		СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);
		КоличествоСписания =  ?(Выборка.КоличествоКт = Null, 0, Выборка.КоличествоКт) - ?(Выборка.КоличествоДт = Null, 0, Выборка.КоличествоДт);
		Если СуммаСписания > 0 Тогда
			
			Проводка = мПроводкиНУ.Добавить();
			Проводка.Период                    = мКонДата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = Выборка.Счет;
			Если КоличествоСписания <> 0 Тогда
				Проводка.КоличествоДт          = КоличествоСписания;
			КонецЕсли;
			Проводка.Сумма                     = СуммаСписания;
			Проводка.Содержание                = "Закрытие года";
			Проводка.НомерЖурнала              = "ФР";
			Проводка.ВидУчетаДт                 = Выборка.ВидУчета;
		КонецЕсли;
		
		Если СуммаСписания < 0 Тогда
			
			Проводка = мПроводкиНУ.Добавить();
			Проводка.Период                    = мКонДата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетКт                    = Выборка.Счет;
			Проводка.Сумма                     = - СуммаСписания;
			Если КоличествоСписания <> 0 Тогда
				Проводка.КоличествоКт          = - КоличествоСписания;
			КонецЕсли;
			Проводка.Содержание                = "Закрытие года";
			Проводка.НомерЖурнала              = "ФР";
			Проводка.ВидУчетаКт                 = Выборка.ВидУчета;
			
			
		КонецЕсли;
	КонецЦикла;
	
	мПроводкиНУ.Записать(Ложь);
	
КонецПроцедуры

Процедура ПересчетОНАиОНО(СтруктураШапкиДокумента, мПроводкиБУ)
	
	СтруктураШапкиДокумента.Дата = КонецМесяца(КонецДня(СтруктураШапкиДокумента.Дата)) + 1;
	НоваяСтавка = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента) * 100;
	
	СтруктураШапкиДокумента.Дата = Дата;
	СтараяСтавка = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента) * 100;
	
	Если НоваяСтавка = СтараяСтавка Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВидовАктивовИОбязательств = НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств();
	ТаблицаОНАОНО =  Новый ТаблицаЗначений;
	ТаблицаОНАОНО.Колонки.Добавить("Счет");
	ТаблицаОНАОНО.Колонки.Добавить("Вид");
	ТаблицаОНАОНО.Колонки.Добавить("Разница");
	ТаблицаОНАОНО.Колонки.Добавить("НоваяСумма");
	ТаблицаОНАОНО.Колонки.Добавить("СтараяСумма");
	
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		
		ТаблицаВидаАктивовИОбязательств = НалоговыйУчет.ОстаткиВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства,СтруктураШапкиДокумента.Организация, НачалоГода(СтруктураШапкиДокумента.ДАта), мКонГраница);
		Если ТаблицаВидаАктивовИОбязательств.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаВидаАктивовИОбязательств.Свернуть("СчетОНАОНО,СтараяСумма","Сумма");
		
		Для каждого Строка Из ТаблицаВидаАктивовИОбязательств Цикл
			СтрокаТаблицаОНАОНО = ТаблицаОНАОНО.Добавить();
			СтрокаТаблицаОНАОНО.Счет = Строка.СчетОНАОНО;
			СтрокаТаблицаОНАОНО.Вид = СтрокаВидАктиваОбязательства.ВидАктивовОбязательств;
			СтрокаТаблицаОНАОНО.НоваяСумма = Окр(Строка.Сумма * НоваяСтавка / 100, 2);
			СтрокаТаблицаОНАОНО.СтараяСумма = Строка.СтараяСумма;
			СтрокаТаблицаОНАОНО.Разница = 0;

			
        КОнецЦикла;
	КонецЦикла;
	
	ТаблицаОНАОНО.Свернуть("Счет,Вид,СтараяСумма","НоваяСумма,Разница");
	
	
		Для каждого Строка Из ТаблицаОНАОНО Цикл
			Строка.Разница = Строка.НоваяСумма - Строка.СтараяСумма;
        КОнецЦикла;
	
	Для Каждого Выборка Из ТаблицаОНАОНО Цикл
		
		Если Выборка.Счет.Код = "09" И Не Выборка.Разница = 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.НомерЖурнала = "";
			Проводка.Содержание   = "Пересчет по ставке " + НоваяСтавка + "%";
			
			Если  Выборка.Разница > 0  Тогда
				Проводка.Сумма        = Выборка.Разница;
				Проводка.СчетДт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Вид);
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			Иначе
				Проводка.Сумма        = - Выборка.Разница;
				Проводка.СчетКт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Вид);
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			КонецЕсли;
		КонецЕсли;
	
		Если Выборка.Счет.Код = "77" И Не Выборка.Разница = 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.НомерЖурнала = "";
			Проводка.Содержание   = "Пересчет по ставке " + НоваяСтавка + "%";
			
			Если  Выборка.Разница > 0  Тогда
				Проводка.Сумма        = Выборка.Разница;
				Проводка.СчетКт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Вид);
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			Иначе
				Проводка.Сумма        = - Выборка.Разница;
				Проводка.СчетДт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Вид);
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	мПроводкиБУ = Движения.Хозрасчетный;
	ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	мПроводкиНУ = Движения.Налоговый;
    ЗакрытиеСчетовНУ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

//АБС Кряковкин 20141020
Функция ПолучитьДатуРеорганизации(ДЗО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	абс_ДатаРеорганизацииДЗО.ДатаРеорганизации КАК Дата
		|ИЗ
		|	РегистрСведений.абс_ДатаРеорганизацииДЗО КАК абс_ДатаРеорганизацииДЗО
		|ГДЕ
		//АБС ИЗМЕНЕНИЕ   21.01.2015 12:51:49  Шамов
		//|	абс_ДатаРеорганизацииДЗО.Организация = &Организация";
		|	абс_ДатаРеорганизацииДЗО.Организация = &ДЗО
		|	И абс_ДатаРеорганизацииДЗО.Организация.абс_СтатусОрганизации <> ЗНАЧЕНИЕ(Перечисление.абс_СтатусОрганизации.Филиал)";
		//АБС ИЗМЕНЕНИЕ  КОНЕЦ

	Запрос.УстановитьПараметр("ДЗО", ДЗО);
    Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	Иначе 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Дата;
	КонецЕсли;	
		
КонецФункции // ПолучитьДатуРеорганизации(Элемент.Значение)()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	мКонДата    = КонецМесяца (ПериодРегистрации);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
			
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	Заголовок = "";
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//АБС Кряковкин 20141020 нач
	Если не Отказ Тогда 
		ДатаРеорганизации = ПолучитьДатуРеорганизации(СтруктураШапкиДокумента.Организация);
		Если Не ДатаРеорганизации = Неопределено Тогда
			
			мКонДата    = КонецМесяца (ДатаРеорганизации);
			мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
		КонецЕсли;
	КонецЕсли;
	//Кряковкин кон

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

#Если Клиент Тогда
	
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчет.ПечатьСправкиРасчета(Отчеты.СправкаРасчетПересчетСтоимостиОтложенныхНалоговыхАктивовИОбязательств, Новый Структура("Организация, Дата", Организация, Дата));
	
КонецПроцедуры // Печать

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	ПараметрыУчетнойПолитикиРегл = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	
	Возврат Новый Структура("Переоценка", "Пересчет стоимости ОНА и ОНО");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм(
#КонецЕсли

