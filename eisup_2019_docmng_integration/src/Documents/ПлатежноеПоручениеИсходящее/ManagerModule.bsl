// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтра - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

// Форматирует сумму прописью документаВалютаДенежныхСредств
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек, ВалютаДенежныхСредств)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = ВалютаДенежныхСредств.ПараметрыПрописиНаРусском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0")-1);
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,Найти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

Функция ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(ПечатаемыйДокумент)
	
	СписокОшибок = Новый СписокЗначений();
	
	П101 = СокрЛП(ПечатаемыйДокумент.СтатусСоставителя);
	П104 = СокрЛП(ПечатаемыйДокумент.КодБК);
	П105 = СокрЛП(ПечатаемыйДокумент.КодОКАТО);
	Если ПечатаемыйДокумент.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		П105 = ?(ПустаяСтрока(П105), "0", П105);
	КонецЕсли;
	П106 = СокрЛП(ПечатаемыйДокумент.ПоказательОснования);
	П107 = ?(ПустаяСтрока(СокрЛП(СтрЗаменить(ПечатаемыйДокумент.ПоказательПериода, ".", ""))) = 1, "", ПечатаемыйДокумент.ПоказательПериода);
	П107 = ?(СокрЛП(СтрЗаменить(ПечатаемыйДокумент.ПоказательПериода, ".", "")) = "0", "", ПечатаемыйДокумент.ПоказательПериода);
	П108 = СокрЛП(ПечатаемыйДокумент.ПоказательНомера);
	П109 = ?(НЕ ЗначениеЗаполнено(ПечатаемыйДокумент.ПоказательДаты), "0", Строка(ПечатаемыйДокумент.ПоказательДаты));
	П110 = СокрЛП(ПечатаемыйДокумент.ПоказательТипа);
	
	// Проверки, обшие для всех видов перечислений в бюджет
	
	Если (Найти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20", П101) = 0) 
		ИЛИ ПустаяСтрока(СокрЛП(П101)) Тогда
		СписокОшибок.Добавить("Неверное значение поля ""Статус составителя"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если (СтрЗаменить(П104, "0", "") = "") И (Найти(П101, "07") = 0) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле ""КБК"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	// Проверки, зависящие от вида перечисления в бюджет
	
	
	//Выводим список найденных ошибок
	
	Для Ном = 0 по СписокОшибок.Количество()-1 Цикл
		Сообщить(СписокОшибок.Получить(Ном), СтатусСообщения.Важное);
	КонецЦикла;
	
	Возврат СписокОшибок;
	
КонецФункции // ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет()

 

// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения(МассивОбъектов,ОбъектыПечати) Экспорт
    ПечатаемыйДокумент = МассивОбъектов;
	Организация = ПечатаемыйДокумент.Организация;
	СчетОрганизации = ПечатаемыйДокумент.СчетОрганизации;
	СчетКонтрагента = ПечатаемыйДокумент.СчетКонтрагента;
	Если ПечатаемыйДокумент.Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если ПечатаемыйДокумент.Контрагент.Пустая() И Не ПечатаемыйДокумент.ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерПечать=ОбщегоНазначения.ПолучитьНомерНаПечать(ПечатаемыйДокумент);
	
	//Крамаренко Д.М.
	//отключено за ненадобностью и непониманием целей
	//Если Прав(НомерПечать,3)="000" Тогда
	//	Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
	//	Возврат Неопределено;
	//КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
	Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

	МесяцПрописью   = СчетОрганизации.МесяцПрописью;
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	ФорматДаты      = "ДФ=" + ?(МесяцПрописью = 1,"'дд ММММ гггг'","'дд.ММ.гггг'");
	БанкОрганизации = ?(НЕ ЗначениеЗаполнено(СчетОрганизации.БанкДляРасчетов), СчетОрганизации.Банк, СчетОрганизации.БанкДляРасчетов);
	БанкКонтрагента = ?(НЕ ЗначениеЗаполнено(СчетКонтрагента.БанкДляРасчетов), СчетКонтрагента.Банк, СчетКонтрагента.БанкДляРасчетов);

	Обл.Параметры.НаименованиеНомер       = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерПечать;
	Обл.Параметры.ДатаДокумента           = Формат(ПечатаемыйДокумент.Дата,ФорматДаты);
	Обл.Параметры.ВидПлатежа              = ПечатаемыйДокумент.ВидПлатежа;
	Обл.Параметры.СуммаЧислом             = ФорматироватьСумму(ПечатаемыйДокумент.СуммаДокумента,СуммаБезКопеек);                              
	Обл.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(ПечатаемыйДокумент.СуммаДокумента,СуммаБезКопеек, ПечатаемыйДокумент.ВалютаДокумента);

	Обл.Параметры.ПлательщикИНН           = "ИНН " + ?(ПустаяСтрока(ПечатаемыйДокумент.ИННПлательщика), Организация.ИНН, СокрЛП(ПечатаемыйДокумент.ИННПлательщика));
	Обл.Параметры.ПлательщикКПП           = "КПП " + ?(ПустаяСтрока(ПечатаемыйДокумент.КППплательщика),?(ПечатаемыйДокумент.ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога,"0",""),СокрЛП(ПечатаемыйДокумент.КППплательщика));	
	
	Если СчетОрганизации.БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондент="";
	Иначе	
		СтрКорреспондент= " р/с " + СчетОрганизации.НомерСчета+ " в " + СчетОрганизации.Банк + " " + СчетОрганизации.Банк.Город;	
	КонецЕсли;
	
	Если ПечатаемыйДокумент.ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ТекстПлательщикПечать=?(ПустаяСтрока(Организация.НаименованиеПлательщикаПриПеречисленииНалогов),
								?(ПустаяСтрока(ПечатаемыйДокумент.ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ПечатаемыйДокумент.ТекстПлательщика)),Организация.НаименованиеПлательщикаПриПеречисленииНалогов+СтрКорреспондент);
	Иначе
        ТекстПлательщикПечать=?(ПустаяСтрока(ПечатаемыйДокумент.ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ПечатаемыйДокумент.ТекстПлательщика));
		
	КонецЕсли;
	
	Обл.Параметры.Плательщик              = ТекстПлательщикПечать;
	Обл.Параметры.БанкПлательщика         = "" + БанкОрганизации + " " + БанкОрганизации.Город;

	Обл.Параметры.НомерСчетаПлательщика   = ВернутьРасчетныйСчет(СчетОрганизации);

	Обл.Параметры.БикБанкаПлательщика     = БанкОрганизации.Код;
	Обл.Параметры.СчетБанкаПлательщика    = БанкОрганизации.КоррСчет;
	
	Если НЕ ПечатаемыйДокумент.ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ПечатаемыйДокумент.ИННПолучателя), ПечатаемыйДокумент.Контрагент.ИНН, СокрЛП(ПечатаемыйДокумент.ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(ПечатаемыйДокумент.КПППолучателя),"",СокрЛП(ПечатаемыйДокумент.КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ПечатаемыйДокумент.ТекстПолучателя),ПечатаемыйДокумент.Контрагент.НаименованиеПолное,СокрЛП(ПечатаемыйДокумент.ТекстПолучателя));
		
	Иначе
		
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ПечатаемыйДокумент.ИННПолучателя), Организация.ИНН, СокрЛП(ПечатаемыйДокумент.ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(ПечатаемыйДокумент.КПППолучателя),"",СокрЛП(ПечатаемыйДокумент.КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ПечатаемыйДокумент.ТекстПолучателя),Организация.НаименованиеПолное,СокрЛП(ПечатаемыйДокумент.ТекстПолучателя));
		
	КонецЕсли;
		
	Обл.Параметры.БанкПолучателя          = "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
	Обл.Параметры.БикБанкаПолучателя      = БанкКонтрагента.Код;
	Обл.Параметры.СчетБанкаПолучателя     = БанкКонтрагента.КоррСчет;

	Обл.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(ПечатаемыйДокумент.СчетКонтрагента);

	Обл.Параметры.НазначениеПлатежа       = СокрЛП(ПечатаемыйДокумент.НазначениеПлатежа);
	Обл.Параметры.Очередность             = ПечатаемыйДокумент.ОчередностьПлатежа;
	Обл.Параметры.СрокПлатежа             = "";

	// Реквизиты для перечисления в бюджет
	
	Если ПечатаемыйДокумент.ПеречислениеВБюджет Тогда
		
		ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(ПечатаемыйДокумент);
		
		Обл.Параметры.СтатусСоставителя   = ?(ПустаяСтрока(ПечатаемыйДокумент.СтатусСоставителя),"0",СокрЛП(ПечатаемыйДокумент.СтатусСоставителя));
		Обл.Параметры.КодБК               = ?(ПустаяСтрока(ПечатаемыйДокумент.КодБК),"",СокрЛП(ПечатаемыйДокумент.КодБК));
		Обл.Параметры.КодОКАТО            = ?(ПустаяСтрока(ПечатаемыйДокумент.КодОКАТО),
			?(ПечатаемыйДокумент.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж, "0", ""),
			СокрЛП(ПечатаемыйДокумент.КодОКАТО));
		Обл.Параметры.ПоказательОснования = ?(ПустаяСтрока(ПечатаемыйДокумент.ПоказательОснования),"0",СокрЛП(ПечатаемыйДокумент.ПоказательОснования));
		Обл.Параметры.ПоказательНомера    = ?(ПустаяСтрока(ПечатаемыйДокумент.ПоказательНомера),"0",СокрЛП(ПечатаемыйДокумент.ПоказательНомера));
		Обл.Параметры.ПоказательДаты      = ?(ПечатаемыйДокумент.ПоказательДаты = '00010101000000',"0",Формат(ПечатаемыйДокумент.ПоказательДаты,"ДФ='дд.ММ.гггг'"));
		//Обл.Параметры.ПоказательТипа      = ?(ПустаяСтрока(ПечатаемыйДокумент.ПоказательТипа),"0",СокрЛП(ПечатаемыйДокумент.ПоказательТипа));
		Обл.Параметры.ПоказательТипа      = СокрЛП(ПечатаемыйДокумент.ПоказательТипа);
		Если (ПустаяСтрока(ПечатаемыйДокумент.ПоказательПериода)) ИЛИ (ПечатаемыйДокумент.ПоказательПериода = "  .  .    ") Тогда
			Обл.Параметры.ПоказательПериода = "0";
		Иначе
			Обл.Параметры.ПоказательПериода = СокрЛП(ПечатаемыйДокумент.ПоказательПериода);
		КонецЕсли;
		
	КонецЕсли;

	ТабДокумент.Вывести(Обл);

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

 // Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст ошибки)
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в которой был выведен объект)
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПлатежноеПоручение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПлатежноеПоручение", "Платежное поручение", ПечатьПлатежногоПоручения(МассивОбъектов, ОбъектыПечати));
	//КонецЕсли;

КонецПроцедуры


// Описывает соответствие между именами реквизитов платежа в бюджет, используемыми в модуле ПлатежиВБюджетКлиентСервер,
// и именами реквизитов документа.
//
Функция РеквизитыДокументаДляПлатежаВБюджет()
	
	Реквизиты = Новый Соответствие;
	
	Реквизиты.Вставить("ВидПеречисления",      "ВидПеречисленияВБюджет");
	Реквизиты.Вставить("ИдентификаторПлатежа", "ИдентификаторПлатежа");
	Реквизиты.Вставить("СтатусПлательщика",    "СтатусСоставителя");
	Реквизиты.Вставить("КБК",                  "КодБК");
	Реквизиты.Вставить("КодТерритории",        "КодОКАТО");
	Реквизиты.Вставить("ОснованиеПлатежа",     "ПоказательОснования");
	Реквизиты.Вставить("НалоговыйПериод",      "ПоказательПериода");
	Реквизиты.Вставить("НомерДокумента",       "ПоказательНомера");
	Реквизиты.Вставить("ДатаДокумента",        "ПоказательДаты");
	Реквизиты.Вставить("ТипПлатежа",           "ПоказательТипа");
	
	Возврат Реквизиты;
	
КонецФункции

// Контекст платежа используется для вызова методов модуля ПлатежиВБюджетКлиентСервер
//
Функция КонтекстПлатежногоДокумента(Объект) Экспорт
	
	ИсточникДанных = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	ИсточникДанных.Период         = Объект.Дата;
	ИсточникДанных.Организация    = Объект.Организация;
	ИсточникДанных.СчетПолучателя = Объект.СчетКонтрагента;
	
	Возврат ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанных);
	
КонецФункции

// Возвращает реквизиты платежа в бюджет с именами, используемыми в модуле ПлатежиВБюджетКлиентСервер
// 
Функция РеквизитыПлатежаВБюджет(Объект) Экспорт
	
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	
	РеквизитыДокумента = РеквизитыДокументаДляПлатежаВБюджет();
	ЗначенияРеквизитовДокумента = Новый Структура;
	Для Каждого Реквизит Из РеквизитыДокумента Цикл
		ЗначенияРеквизитовДокумента.Вставить(Реквизит.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовДокумента, Объект);
	
	Для Каждого Реквизит Из РеквизитыДокумента Цикл
		Значение = ЗначенияРеквизитовДокумента[Реквизит.Значение];
		
		// Раньше у некоторых реквизитов была фиксированная допустимая длина.
		// Поэтому в ИБ могли остаться значения с лишними пробелами справа.
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Значение = СокрП(Значение);
		КонецЕсли;
		
		РеквизитыПлатежаВБюджет[Реквизит.Ключ] = Значение;
		
	КонецЦикла;
	
	// В документе ПоказательДаты хранится в виде даты, а не строки
	Если ТипЗнч(РеквизитыПлатежаВБюджет.ДатаДокумента) = Тип("Дата") Тогда
		Если ЗначениеЗаполнено(РеквизитыПлатежаВБюджет.ДатаДокумента) Тогда
			РеквизитыПлатежаВБюджет.ДатаДокумента = ПлатежиВБюджетКлиентСервер.ПреобразоватьДатуКСтроке(РеквизитыПлатежаВБюджет.ДатаДокумента);
		Иначе
			РеквизитыПлатежаВБюджет.ДатаДокумента = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
		КонецЕсли;
	КонецЕсли;
	
	Возврат РеквизитыПлатежаВБюджет;
	
КонецФункции

// Заполняет реквизиты платежа в бюджет по структуре с ключами, имена которых 
// используются в модуле ПлатежиВБюджетКлиентСервер
// 
Процедура УстановитьЗначенияРеквизитовПлатежаВБюджет(Объект, ЗначенияЗаполнения, ДобавитьСвойстваВСтруктуру = Ложь) Экспорт
	
	РеквизитыДокумента = РеквизитыДокументаДляПлатежаВБюджет();
	ЗначенияРеквизитовДокумента = Новый Структура;
	Для Каждого ЗначениеЗаполнения Из ЗначенияЗаполнения Цикл
		ИмяРеквизитаДокумента = РеквизитыДокумента[ЗначениеЗаполнения.Ключ];
		ЗначенияРеквизитовДокумента.Вставить(ИмяРеквизитаДокумента, ЗначениеЗаполнения.Значение);
	КонецЦикла;
	
	Если Не ДобавитьСвойстваВСтруктуру Или ТипЗнч(Объект) <> Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитовДокумента);
		
	Иначе
		
		Для Каждого КлючИЗначение Из ЗначенияРеквизитовДокумента Цикл
			Объект.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыПлатежаВБюджетПоУмолчанию(Дата, Организация, СчетПолучателя, ПеречислениеВБюджет) Экспорт
	
	// Получим значения по умолчанию в терминах модуля ПлатежиВБюджетКлиентСервер
	Если Не ПеречислениеВБюджет Тогда
		
		ЗначенияПоУмолчанию = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
		
	Иначе
		
		СвойстваКонтекста = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
		СвойстваКонтекста.Период         = Дата;
		СвойстваКонтекста.Организация    = Организация;
		СвойстваКонтекста.СчетПолучателя = СчетПолучателя;
		
		Контекст = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(СвойстваКонтекста);
		
		ЗначенияПоУмолчанию = ПлатежиВБюджетКлиентСервер.ЗначенияПоУмолчанию(Контекст);
		
	КонецЕсли;
	
	// Переведем на язык документа
	Результат = Новый Структура;
	УстановитьЗначенияРеквизитовПлатежаВБюджет(
		Результат,           // Куда
		ЗначенияПоУмолчанию, // Откуда
		Истина);             // Добавлять свойства в "куда"
		
	Возврат Результат;

КонецФункции
