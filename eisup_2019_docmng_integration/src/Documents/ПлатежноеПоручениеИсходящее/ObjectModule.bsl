Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем АвтоЗначенияРеквизитов Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

//Определение периода движений документа
Перем ДатаДвижений;

Перем РасчетыВозврат;

Перем мСтруктураПараметровДенежныхСредств;

//АБС+++ Гончаров 14.06.2013
Перем абс_ЗаписьПрограммно Экспорт;
//\\АБС--- Гончаров 14.06.2013

//АБС ВСТАВКА 35020 16.11.2013 10:08:43  Мачихина
Перем ЕстьУчетПоСтатьямДДС Экспорт;
//АБС ВСТАВКА 35020 КОНЕЦ

// Start КТТК Ермолов Е.Л.  13.01.2016 Избежать лишних обменов с ИСУЗК

Перем мИзменен Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() И Не ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерПечать=ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	
	//Крамаренко Д.М.
	//отключено за ненадобностью и непониманием целей
	////Если Прав(НомерПечать,3)="000" Тогда
	////	Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
	////	Возврат Неопределено;
	////КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
	Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

	МесяцПрописью   = СчетОрганизации.МесяцПрописью;
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	ФорматДаты      = "ДФ=" + ?(МесяцПрописью = 1,"'дд ММММ гггг'","'дд.ММ.гггг'");
	БанкОрганизации = ?(НЕ ЗначениеЗаполнено(СчетОрганизации.БанкДляРасчетов), СчетОрганизации.Банк, СчетОрганизации.БанкДляРасчетов);
	БанкКонтрагента = ?(НЕ ЗначениеЗаполнено(СчетКонтрагента.БанкДляРасчетов), СчетКонтрагента.Банк, СчетКонтрагента.БанкДляРасчетов);

	Обл.Параметры.НаименованиеНомер       = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерПечать;
	Обл.Параметры.ДатаДокумента           = Формат(Дата,ФорматДаты);
	Обл.Параметры.ВидПлатежа              = ВидПлатежа;
	Обл.Параметры.СуммаЧислом             = ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);

	Обл.Параметры.ПлательщикИНН           = "ИНН " + ?(ПустаяСтрока(ИННПлательщика), Организация.ИНН, СокрЛП(ИННПлательщика));
	Обл.Параметры.ПлательщикКПП           = "КПП " + ?(ПустаяСтрока(КППплательщика),?(ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога,"0",""),СокрЛП(КППплательщика));	
	
	Если СчетОрганизации.БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондент="";
	Иначе	
		СтрКорреспондент= " р/с " + СчетОрганизации.НомерСчета+ " в " + СчетОрганизации.Банк + " " + СчетОрганизации.Банк.Город;	
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ТекстПлательщикПечать=?(ПустаяСтрока(Организация.НаименованиеПлательщикаПриПеречисленииНалогов),
								?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика)),Организация.НаименованиеПлательщикаПриПеречисленииНалогов+СтрКорреспондент);
	Иначе
        ТекстПлательщикПечать=?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика));
		
	КонецЕсли;
	
	Обл.Параметры.Плательщик              = ТекстПлательщикПечать;
	Обл.Параметры.БанкПлательщика         = "" + БанкОрганизации + " " + БанкОрганизации.Город;

	Обл.Параметры.НомерСчетаПлательщика   = ВернутьРасчетныйСчет(СчетОрганизации);

	Обл.Параметры.БикБанкаПлательщика     = БанкОрганизации.Код;
	Обл.Параметры.СчетБанкаПлательщика    = БанкОрганизации.КоррСчет;
	
	Если НЕ ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Контрагент.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(КПППолучателя),"",СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Контрагент.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		
	Иначе
		
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Организация.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(КПППолучателя),"",СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Организация.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		
	КонецЕсли;
		
	Обл.Параметры.БанкПолучателя          = "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
	Обл.Параметры.БикБанкаПолучателя      = БанкКонтрагента.Код;
	Обл.Параметры.СчетБанкаПолучателя     = БанкКонтрагента.КоррСчет;

	Обл.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(СчетКонтрагента);

	Обл.Параметры.НазначениеПлатежа       = СокрЛП(НазначениеПлатежа);
	Обл.Параметры.Очередность             = ОчередностьПлатежа;
	Обл.Параметры.СрокПлатежа             = "";

	// Реквизиты для перечисления в бюджет
	
	Если ПеречислениеВБюджет Тогда
		
		ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет();
		
		Обл.Параметры.СтатусСоставителя   = ?(ПустаяСтрока(СтатусСоставителя),"0",СокрЛП(СтатусСоставителя));
		Обл.Параметры.КодБК               = ?(ПустаяСтрока(КодБК),"",СокрЛП(КодБК));
		Обл.Параметры.КодОКАТО            = ?(ПустаяСтрока(КодОКАТО),
			?(ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж, "0", ""),
			СокрЛП(КодОКАТО));
		Обл.Параметры.ПоказательОснования = ?(ПустаяСтрока(ПоказательОснования),"0",СокрЛП(ПоказательОснования));
		Обл.Параметры.ПоказательНомера    = ?(ПустаяСтрока(ПоказательНомера),"0",СокрЛП(ПоказательНомера));
		Обл.Параметры.ПоказательДаты      = ?(ПоказательДаты = '00010101000000',"0",Формат(ПоказательДаты,"ДФ='дд.ММ.гггг'"));
		//Обл.Параметры.ПоказательТипа      = ?(ПустаяСтрока(ПоказательТипа),"0",СокрЛП(ПоказательТипа));
		
		//+++ #7727346 - Григорьев Денис
		Обл.Параметры.ПоказательТипа = СокрЛП(ПоказательТипа); 
		//--- #7727346 - Гргорьев Денис 
		
		Если (ПустаяСтрока(ПоказательПериода)) ИЛИ (ПоказательПериода = "  .  .    ") Тогда
			Обл.Параметры.ПоказательПериода = "0";
		Иначе
			Обл.Параметры.ПоказательПериода = СокрЛП(ПоказательПериода);
		КонецЕсли;
		
	КонецЕсли;

	ТабДокумент.Вывести(Обл);

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

// Формирует печатную форму 
// заявки
//
Функция ПечатьПеречисленияЗарплаты()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ИтоговаяСумма = 0;
	
	Макет = ПолучитьМакет("ВедомостьПоПеречислениеЗПНаПК");
	Обл   = Макет.ПолучитьОбласть("Заголовок");
	
	Обл.Параметры.ДатаФормирования= Дата;
	Обл.Параметры.НаименованиеОрганизации= "" + Организация;
	
	ЗапросПоНС = Новый Запрос("ВЫБРАТЬ
	                          |	БанковскиеСчета.Ссылка,
	                          |	БанковскиеСчета.НомерСчета
	                          |ИЗ
	                          |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	                          |ГДЕ
	                          |	БанковскиеСчета.Ссылка = &Ссылка");
	
	ЗапросПоНС.УстановитьПараметр("Ссылка", СчетКонтрагента);
	Выборка = ЗапросПоНС.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Обл.Параметры.РасчетныйСчетОрганизации= "Р/С №" + Выборка.НомерСчета;
	
	ТабДокумент.Вывести(Обл);
	
	Для каждого СтрокаПлатежа ИЗ ПеречислениеЗаработнойПлаты Цикл
		
		ЗапросПоВедомости = Новый Запрос("ВЫБРАТЬ
		                                 |	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
		                                 |	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма,
		                                 |	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
		                                 |ИЗ
		                                 |	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		                                 |ГДЕ
		                                 |	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка");
		
		
		ЗапросПоВедомости.УстановитьПараметр("Ссылка", СтрокаПлатежа.Ведомость);
		
		ВыборкаФизЛиц = ЗапросПоВедомости.Выполнить().Выбрать();
		
		Пока ВыборкаФизЛиц.Следующий() Цикл
		
		ЗапросПоФизЛицу = Новый Запрос("ВЫБРАТЬ
		                               |	ФизическиеЛица.Наименование
		                               |ИЗ
		                               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		                               |ГДЕ
		                               |	ФизическиеЛица.Ссылка = &Ссылка");
		
		ЗапросПоФизЛицу.УстановитьПараметр("Ссылка", ВыборкаФизЛиц.ФизЛицо);
		
		
		Обл   = Макет.ПолучитьОбласть("СтрокаВыплаты");
		
		Выборка = ЗапросПоФизЛицу.выполнить().Выбрать();
		Выборка.Следующий();
		
		// заполняем данные физ лица
		Обл.Параметры.ФИОСотрудника = Выборка.Наименование;
		
		Обл.Параметры.Сумма = ВыборкаФизЛиц.Сумма;
		ИтоговаяСумма = ИтоговаяСумма + ВыборкаФизЛиц.Сумма;
		
		// заполняем лицевой счет
		
		ЗапросПоЛС = Новый Запрос(
		"ВЫБРАТЬ
		|	ЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета
		|ИЗ
		|	РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
		|ГДЕ
		|	ЛицевыеСчетаРаботниковОрганизации.ФизЛицо = &ФизЛицо
		|	И ЛицевыеСчетаРаботниковОрганизации.Организация = &Организация
		|	И ЛицевыеСчетаРаботниковОрганизации.Банк = &Банк");
		
		ЗапросПоЛС.УстановитьПараметр("ФизЛицо", ВыборкаФизЛиц.ФизЛицо);
		ЗапросПоЛС.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛС.УстановитьПараметр("Банк", Контрагент);
		
		ВыборкаЛС = ЗапросПоЛС.Выполнить().Выбрать();
		
		Если ВыборкаЛС.Следующий() Тогда
			Обл.Параметры.ЛицевойСчет = ВыборкаЛС.НомерЛицевогоСчета;
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);
		
	КонецЦикла;
		
	КонецЦикла;
	
	
	Обл=Макет.ПолучитьОбласть("Подвал");
	Обл.Параметры.СуммаИтого = ИтоговаяСумма;
	ТабДокумент.Вывести(Обл);
	
	// Первую колонку не печатаем
	ТабДокумент.ОбластьПечати = ТабДокумент.Область(1,1,ТабДокумент.ВысотаТаблицы,ТабДокумент.ШиринаТаблицы);
	
	Возврат ТабДокумент;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПлатежноеПоручение" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПлатежногоПоручения();
		
	ИначеЕсли ИмяМакета = "ПечатьПеречисленияЗарплаты" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПеречисленияЗарплаты();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПлатежноеПоручение,ПечатьПеречисленияЗарплаты","Платежное поручение", "Ведомость для перечисления зарплаты");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтра - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = СчетОрганизации.ВалютаДенежныхСредств.ПараметрыПрописиНаРусском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0")-1);
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,Найти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

Процедура ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110)

	Если ПустаяСтрока(П105) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле ""Код ОКАТО"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если П101 = "08" Тогда
		
		СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Статус составителя"" на закладке ""Перечисление в бюджет""." 
			+ Символы.ПС + Символы.Таб + "Статус ""08"" соответствует виду перечисления ""Иной платеж"".");
		
		Если СтрЗаменить(П106, "0", "") <> "" Тогда 
			СписокОшибок.Добавить("При статусе составителя ""08"" следует указать ""0"" в поле ""Основание платежа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П107, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П108, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Номер документа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П109, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Дата документа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П110, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" следует указать ""0"" в поле ""Тип платежа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		
	Иначе
		
		Если СтрЗаменить(СокрЛП(П106), "0", "") = "" Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106) <> 2 Тогда
			СписокОшибок.ДобавитьЗначение("Возможно, неверно заполнено поле ""Основание платежа"" на закладке ""Перечисление в бюджет"".");
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				СписокОшибок.Добавить("При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Перечисление в бюджет"".");
			КонецЕсли;
		ИначеЕсли Найти("ТР, РС, ОТ, РТ, ВУ, ПР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				
				Если НЕ ММ="" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;	
				
				Если НЕ ГГ="" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				
				Если (Найти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 12)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				ИначеЕсли (Найти("КВ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 4)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				ИначеЕсли (Найти("ПЛ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 2)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				ИначеЕсли (Найти("ГД", ДД) > 0) Тогда
					Если (ММ <> 0)или
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(П107) Тогда
						СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108, "0", "") <> "" Тогда
				СписокОшибок.Добавить("При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле ""Номер документа"" на закладке ""Перечисление в бюджет"".");
			КонецЕсли;
			Если Найти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109, "0", "") <> "" Тогда
					СписокОшибок.Добавить("При основании платежа ""ЗД"" не должно заполняться поле ""Дата документа"" на закладке ""Перечисление в бюджет"".");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("БФ", П106) > 0 Тогда
		Иначе
			СписокОшибок.Добавить("Неверно указано значение в поле ""Основание платежа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П110,"0","")="" Тогда
		ИначеЕсли Найти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ", П110) > 0 Тогда
		Иначе
			СписокОшибок.Добавить("Неверно указано значение в поле ""Тип платежа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110)

	Если П101 = "08" Тогда
		СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Статус составителя"" на закладке ""Перечисление в бюджет""." 
			+ Символы.ПС + Символы.Таб + "Статус ""08"" соответствует виду перечисления ""Иной платеж"".");
	КонецЕсли;
	
	Если ПустаяСтрока(П105) Тогда
		СписокОшибок.Добавить("Возможно, следует указать значение в поле ""Код ОКАТО"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если (СтрЗаменить(СокрЛП(П106), "0", "") <> "")
		И (Найти("ДЕ, ПО, КВ, КТ, ИД, ИП, ТУ, БД, ИН, КП", П106) = 0) Тогда
		СписокОшибок.Добавить("Неверно указано значение в поле ""Основание платежа"" на закладке ""Перечисление в бюджет""."); 
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(П107) Тогда
		СписокОшибок.Добавить("Возможно, следует указать значение в поле ""Код таможенного органа"" на закладке ""Перечисление в бюджет""."); 
	КонецЕсли;
	
	Если (СтрЗаменить(П110,"0","") <> "") 
		И (Найти("ТП, ШТ, ЗД, ПЕ", П110) = 0) Тогда
		СписокОшибок.Добавить("Неверно указано значение в поле ""Тип платежа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(СписокОшибок, П101, П105, П106, П107, П108, П109, П110)

	Если П101 <> "08" Тогда
		СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Статус составителя"" на закладке ""Перечисление в бюджет""." 
			+ Символы.ПС + Символы.Таб + "Вид перечисления ""Иной платеж"" соответствует статусу составителя ""08"".");
	КонецЕсли;
		
	Если ПустаяСтрока(П105) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле ""Код ОКАТО"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П106, "0", "") <> "" Тогда 
		СписокОшибок.Добавить("Следует указать ""0"" в поле ""Основание платежа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П107, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Следует указать ""0"" в поле ""Налоговый период"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П108, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Следует указать ""0"" в поле ""Номер документа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П109, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Не следует заполнять поле ""Дата документа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П110, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Следует указать ""0"" в поле ""Тип платежа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет()
	
	СписокОшибок = Новый СписокЗначений();
	
	П101 = СокрЛП(СтатусСоставителя);
	П104 = СокрЛП(КодБК);
	П105 = СокрЛП(КодОКАТО);
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		П105 = ?(ПустаяСтрока(П105), "0", П105);
	КонецЕсли;
	П106 = СокрЛП(ПоказательОснования);
	П107 = ?(ПустаяСтрока(СокрЛП(СтрЗаменить(ПоказательПериода, ".", ""))) = 1, "", ПоказательПериода);
	П107 = ?(СокрЛП(СтрЗаменить(ПоказательПериода, ".", "")) = "0", "", ПоказательПериода);
	П108 = СокрЛП(ПоказательНомера);
	П109 = ?(НЕ ЗначениеЗаполнено(ПоказательДаты), "0", Строка(ПоказательДаты));
	П110 = СокрЛП(ПоказательТипа);
	
	// Проверки, обшие для всех видов перечислений в бюджет
	
	Если (Найти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20", П101) = 0) 
		ИЛИ ПустаяСтрока(СокрЛП(П101)) Тогда
		СписокОшибок.Добавить("Неверное значение поля ""Статус составителя"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если (СтрЗаменить(П104, "0", "") = "") И (Найти(П101, "07") = 0) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле ""КБК"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	// Проверки, зависящие от вида перечисления в бюджет
	
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110);
	ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110);
	Иначе
		ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(СписокОшибок, П101, П105, П106, П107, П108, П109, П110);
	КонецЕсли;
	
	//Выводим список найденных ошибок
	
	Для Ном = 0 по СписокОшибок.Количество()-1 Цикл
		Сообщить(СписокОшибок.Получить(Ном), СтатусСообщения.Важное);
	КонецЦикла;
	
	Возврат СписокОшибок;
	
КонецФункции // ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет()

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказуУпр(ДокументОснование, СтрокаПлатеж)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);
	
	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Сделка = Выборка.Сделка;
		Если Выборка.Сумма < 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.Сумма*(-1);
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма*(-1),
			СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказуУпр()

//// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
//// по заявке в регистре "ЗаявкиНаРасходованиеСредств"
////
//Процедура ЗаполнитьПоЗаявкеППУпр() Экспорт
//	
//	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
//	Запрос = Новый Запрос;
//	//АБС-Пр2+
//	//Запрос.Текст =
//	//"ВЫБРАТЬ
//	//|	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаПлатежа,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Контрагент КАК Контрагент,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец.ОсновнойБанковскийСчет КАК СчетКонтрагента,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.ДокументРасчетовСКонтрагентом,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.РасчетныйДокумент КАК РасчетныйДокументРаботника,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Ссылка КАК ЗаявкаНаРасходование,
//	//|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Получатель КАК Получатель
//	//|ИЗ
//	//|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(, ЗаявкаНаРасходование = &ДокументЗаявка) КАК ЗаявкиНаРасходованиеСредствОстатки";
//	//
//	
//	Запрос.Текст = "ВЫБРАТЬ
//				   |	абс_СчетНаОплатуОплаты.ЗРС,
//				   |	абс_СчетНаОплатуОплаты.ДоговорКонтрагента,
//				   |	абс_СчетНаОплатуОплаты.ЦФО,
//				   |	абс_СчетНаОплатуОплаты.ЦФУ,
//				   |	абс_СчетНаОплатуОплаты.БюджетнаяСтатья,
//				   |	абс_СчетНаОплатуОплаты.ТипСети,
//				   |	абс_СчетНаОплатуОплаты.КВ,
//				   |	абс_СчетНаОплатуОплаты.ТЭО,
//				   |	абс_СчетНаОплатуОплаты.ТипКонтрагента,
//				   |	абс_СчетНаОплатуОплаты.ТипРасхода
//				   |ПОМЕСТИТЬ втАналитикаСчетов
//				   |ИЗ
//				   |	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
//				   |ГДЕ
//				   |	абс_СчетНаОплатуОплаты.ЗРС = &ДокументОснование
//				   |
//				   |СГРУППИРОВАТЬ ПО
//				   |	абс_СчетНаОплатуОплаты.ТипРасхода,
//				   |	абс_СчетНаОплатуОплаты.ТипКонтрагента,
//				   |	абс_СчетНаОплатуОплаты.ТЭО,
//				   |	абс_СчетНаОплатуОплаты.КВ,
//				   |	абс_СчетНаОплатуОплаты.ТипСети,
//				   |	абс_СчетНаОплатуОплаты.БюджетнаяСтатья,
//				   |	абс_СчетНаОплатуОплаты.ЦФУ,
//				   |	абс_СчетНаОплатуОплаты.ЦФО,
//				   |	абс_СчетНаОплатуОплаты.ЗРС,
//				   |	абс_СчетНаОплатуОплаты.ДоговорКонтрагента
//				   |;
//				   |
//				   |////////////////////////////////////////////////////////////////////////////////
//				   |ВЫБРАТЬ
//				   |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование КАК ЗаявкаНаРасходование,
//				   |	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
//				   |	ЗаявкиНаРасходованиеСредствОстатки.Контрагент КАК Контрагент,
//				   |	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
//				   |	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец.ОсновнойБанковскийСчет КАК СчетКонтрагента,
//				   |	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
//				   |	ЗаявкиНаРасходованиеСредствОстатки.ДокументРасчетовСКонтрагентом,
//				   |	ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
//				   |	ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
//				   |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Получатель КАК Получатель,
//				   |	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
//				   |	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаПлатежа
//				   |ПОМЕСТИТЬ втЗРСОстатки
//				   |ИЗ
//				   |	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(, ЗаявкаНаРасходование = &ДокументОснование) КАК ЗаявкиНаРасходованиеСредствОстатки
//				   |;
//				   |
//				   |////////////////////////////////////////////////////////////////////////////////
//				   |ВЫБРАТЬ
//				   |	втАналитикаСчетов.ЗРС,
//				   |	втАналитикаСчетов.ЦФО,
//				   |	втАналитикаСчетов.ЦФУ,
//				   |	втАналитикаСчетов.БюджетнаяСтатья КАК СтатьяОборотов,
//				   |	втАналитикаСчетов.ТипСети,
//				   |	втАналитикаСчетов.КВ,
//				   |	втАналитикаСчетов.ТЭО,
//				   |	втАналитикаСчетов.ТипКонтрагента,
//				   |	втАналитикаСчетов.ТипРасхода,
//				   |	втЗРСОстатки.ДоговорКонтрагента,
//				   |	втЗРСОстатки.ВалютаВзаиморасчетов,
//				   |	втЗРСОстатки.Контрагент,
//				   |	втЗРСОстатки.СчетКонтрагента,
//				   |	втЗРСОстатки.Сделка,
//				   |	втЗРСОстатки.ДокументРасчетовСКонтрагентом,
//				   |	втЗРСОстатки.СтатьяДвиженияДенежныхСредств,
//				   |	втЗРСОстатки.Проект,
//				   |	втЗРСОстатки.ЗаявкаНаРасходование,
//				   |	втЗРСОстатки.Получатель,
//				   |	втЗРСОстатки.СуммаВзаиморасчетов,
//				   |	втЗРСОстатки.СуммаПлатежа
//				   |ИЗ
//				   |	втЗРСОстатки КАК втЗРСОстатки
//				   |		ЛЕВОЕ СОЕДИНЕНИЕ втАналитикаСчетов КАК втАналитикаСчетов
//				   |		ПО втЗРСОстатки.ЗаявкаНаРасходование = втАналитикаСчетов.ЗРС
//				   |			И втЗРСОстатки.ДоговорКонтрагента = втАналитикаСчетов.ДоговорКонтрагента";
//				   
//	//Запрос.УстановитьПараметр("ПлатежноеПоручение",	Ссылка);		////	   
//	Запрос.УстановитьПараметр("ДокументОснование",	ДокументОснование);
//	
//	СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
//	
//	РезультатЗапроса=Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		
//		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
//			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
//			
//			СтрокаПлатеж				 = РасшифровкаПлатежа.Добавить();
//			СтрокаПлатеж.СуммаПлатежа	 = Выборка.СуммаПлатежа;
//			Контрагент					 = Выборка.Контрагент;
//			
//		Иначе
//			
//			Контрагент = Выборка.Контрагент;
//			
//			Если ЗначениеЗаполнено(Контрагент) Тогда
//				СчетКонтрагента = Выборка.СчетКонтрагента;
//			КонецЕсли;
//			
//			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
//			
//			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
//			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
//			
//			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
//				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
//				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
//			Иначе
//				
//				СтруктураКурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
//				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
//				
//				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
//					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
//					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
//				КонецЕсли;
//				
//			КонецЕсли;
//			
//			СтрокаПлатеж.СтавкаНДС						 = СтавкаНДС;
//			СтрокаПлатеж.Сделка							 = Выборка.Сделка;
//			СтрокаПлатеж.ДокументРасчетовСКонтрагентом	 = Выборка.ДокументРасчетовСКонтрагентом;
//			СтрокаПлатеж.ДоговорКонтрагента				 = Выборка.ДоговорКонтрагента;
//			
//			УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
//			
//		КонецЕсли;
//		
//		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств	 = Выборка.СтатьяДвиженияДенежныхСредств;
//		СтрокаПлатеж.Проект							 = Выборка.Проект;
//		СтрокаПлатеж.ДокументПланированияПлатежа	 = Выборка.ЗаявкаНаРасходование;
//		СтрокаПлатеж.СуммаПлатежаПлан				 = СтрокаПлатеж.СуммаПлатежа;
//		СтрокаПлатеж.КурсВзаиморасчетовПлан			 = СтрокаПлатеж.КурсВзаиморасчетов;
//		
//		//АБС-Пр2+
//		СтрокаПлатеж.абс_БюджетнаяСтатья = Выборка.СтатьяОборотов;
//		СтрокаПлатеж.абс_КВ				 = Выборка.КВ;
//		СтрокаПлатеж.абс_ТипКонтрагента	 = Выборка.ТипКонтрагента;
//		СтрокаПлатеж.абс_ТипРасхода		 = Выборка.ТипРасхода;		
//		СтрокаПлатеж.абс_ТипСети	     = Выборка.ТипСети;
//		СтрокаПлатеж.абс_ТЭО			 = Выборка.ТЭО;
//		СтрокаПлатеж.абс_ЦФО			 = Выборка.ЦФО;
//		СтрокаПлатеж.абс_ЦФУ			 = Выборка.ЦФУ;
//		
//	КонецЦикла;
//	
//	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
//	
//КонецПроцедуры // ЗаполнитьПоЗаявкеППУпр()
//
//
// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
// по заявке в регистре "ЗаявкиНаРасходованиеСредств"
//
Процедура ЗаполнитьПоЗаявкеППУпр() Экспорт
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
	Запрос = Новый Запрос;
	// {{ТТК Лапин А. Заявка № 7742484 07.09.2016 начало
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	//|	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаПлатежа,
	//|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	//|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	//|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Контрагент КАК Контрагент,
	//|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец.ОсновнойБанковскийСчет КАК СчетКонтрагента,
	//|	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
	//|	ЗаявкиНаРасходованиеСредствОстатки.ДокументРасчетовСКонтрагентом,
	//|	ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	//|	ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
	//|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
	//|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.РасчетныйДокумент КАК РасчетныйДокументРаботника,
	//|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Ссылка КАК ЗаявкаНаРасходование,
	//|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Получатель КАК Получатель
	//|ИЗ
	//|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(, ЗаявкаНаРасходование = &ДокументЗаявка) КАК ЗаявкиНаРасходованиеСредствОстатки";
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкиНаРасходованиеСредств.СуммаВзаиморасчетов,
	|	ЗаявкиНаРасходованиеСредств.Сумма КАК СуммаПлатежа,
	|	ЗаявкиНаРасходованиеСредств.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаявкиНаРасходованиеСредств.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.Контрагент КАК Контрагент,
	|	ЗаявкиНаРасходованиеСредств.ДоговорКонтрагента.Владелец.ОсновнойБанковскийСчет КАК СчетКонтрагента,
	|	ЗаявкиНаРасходованиеСредств.Сделка КАК Сделка,
	|	ЗаявкиНаРасходованиеСредств.ДокументРасчетовСКонтрагентом,
	|	ЗаявкиНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ЗаявкиНаРасходованиеСредств.Проект КАК Проект,
	|	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
	|	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.РасчетныйДокумент КАК РасчетныйДокументРаботника,
	|	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.Ссылка КАК ЗаявкаНаРасходование,
	|	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.Получатель КАК Получатель,
	|	ЗаявкиНаРасходованиеСредств.Организация
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаРасходованиеСредств КАК ЗаявкиНаРасходованиеСредств
	|ГДЕ
	|	ЗаявкиНаРасходованиеСредств.Регистратор = &документЗаявка";
	// }}ТТК Лапин А. Заявка № 7742484 07.09.2016 окончание
	
	Запрос.УстановитьПараметр("ДокументЗаявка",ДокументОснование);
	
	СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
	
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			
			СтрокаПлатеж				 = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа	 = Выборка.СуммаПлатежа;
			Контрагент					 = Выборка.Контрагент;
			
		Иначе
			
			Контрагент = Выборка.Контрагент;
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				СчетКонтрагента = Выборка.СчетКонтрагента;
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				
				СтруктураКурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаПлатеж.СтавкаНДС						 = СтавкаНДС;
			СтрокаПлатеж.Сделка							 = Выборка.Сделка;
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом	 = Выборка.ДокументРасчетовСКонтрагентом;
			СтрокаПлатеж.ДоговорКонтрагента				 = Выборка.ДоговорКонтрагента;
			
			УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЕсли;
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств	 = Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект							 = Выборка.Проект;
		СтрокаПлатеж.ДокументПланированияПлатежа	 = Выборка.ЗаявкаНаРасходование;
		СтрокаПлатеж.СуммаПлатежаПлан				 = СтрокаПлатеж.СуммаПлатежа;
		СтрокаПлатеж.КурсВзаиморасчетовПлан			 = СтрокаПлатеж.КурсВзаиморасчетов;
		
	КонецЦикла;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры // ЗаполнитьПоЗаявкеППУпр()


// Возвращает таблицу, аналогичную таблице "Расшифровка платежа" с добавленной колонкой "СуммаУпр"
//
Процедура ПолучитьТаблицуПлатежейППУпр()
	
	Запрос = Новый Запрос;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
		ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(Дата, ВалютаДокумента, Ссылка, "ПлатежноеПоручениеИсходящее")

	Иначе
		
		Если ПеречислениеЗаработнойПлаты.Количество() > 0 Тогда
		
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
			|	НЕОПРЕДЕЛЕНО КАК Сделка,
			|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетовСКонтрагентом,
			|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
			|	НЕОПРЕДЕЛЕНО КАК ВедениеВзаиморасчетов,
			|	ПеречислениеЗаработнойПлатыДок.СуммаПлатежа КАК СуммаПлатежа,
			|	ПеречислениеЗаработнойПлатыДок.СуммаПлатежа КАК СуммаВзаиморасчетов,
			|	ПеречислениеЗаработнойПлатыДок.СуммаПлатежа КАК СуммаПлатежаПлан,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &ВалютаДокумента = &ВалютаУпрУчета
			|				ТОГДА ПеречислениеЗаработнойПлатыДок.СуммаПлатежа
			|			КОГДА &ВалютаДокумента <> &ВалютаУпрУчета
			|					И КурсыДокумента.Курс <> 0
			|					И КурсыУпрУчета.Курс <> 0
			|				ТОГДА ПеречислениеЗаработнойПлатыДок.СуммаПлатежа * КурсыДокумента.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &ВалютаДокумента = &ВалютаРеглУчета
			|				ТОГДА ПеречислениеЗаработнойПлатыДок.СуммаПлатежа
			|			КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
			|					ИЛИ КурсыДокумента.Курс ЕСТЬ NULL 
			|				ТОГДА 0
			|			КОГДА &ВалютаДокумента <> &ВалютаРеглУчета
			|					И КурсыДокумента.Курс <> 0
			|				ТОГДА ПеречислениеЗаработнойПлатыДок.СуммаПлатежа * КурсыДокумента.Курс / КурсыДокумента.Кратность
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
			|	ПеречислениеЗаработнойПлатыДок.СтатьяДвиженияДенежныхСредств,
			|	ПеречислениеЗаработнойПлатыДок.ДокументПланированияПлатежа,
			|	ПеречислениеЗаработнойПлатыДок.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь КАК ВключатьВПлатежныйКалендарь,
			|	ПеречислениеЗаработнойПлатыДок.Проект,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Курс
			|	КОНЕЦ КАК КурсДокумента,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Кратность
			|	КОНЕЦ КАК КратностьДокумента,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Курс
			|	КОНЕЦ КАК КурсУпрУчета,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Кратность
			|	КОНЕЦ КАК КратностьУпрУчета
			|ИЗ
			|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗаработнойПлатыДок
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсыДокумента
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ПеречислениеЗаработнойПлатыДок.Ссылка = &Ссылка";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
			|	НЕОПРЕДЕЛЕНО КАК Сделка,
			|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетовСКонтрагентом,
			|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
			|	НЕОПРЕДЕЛЕНО КАК ВедениеВзаиморасчетов,
			|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаПлатежа,
			|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаВзаиморасчетов,
			|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаПлатежаПлан,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &ВалютаДокумента = &ВалютаУпрУчета
			|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента
			|			КОГДА &ВалютаДокумента <> &ВалютаУпрУчета
			|					И КурсыДокумента.Курс <> 0
			|					И КурсыУпрУчета.Курс <> 0
			|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента * КурсыДокумента.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &ВалютаДокумента = &ВалютаРеглУчета
			|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента
			|			КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
			|					ИЛИ КурсыДокумента.Курс ЕСТЬ NULL 
			|				ТОГДА 0
			|			КОГДА &ВалютаДокумента <> &ВалютаРеглУчета
			|					И КурсыДокумента.Курс <> 0
			|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента * КурсыДокумента.Курс / КурсыДокумента.Кратность
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) КАК СтатьяДвиженияДенежныхСредств,
			|	ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка) КАК ДокументПланированияПлатежа,
			|	ЛОЖЬ КАК ВключатьВПлатежныйКалендарь,
			|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Курс
			|	КОНЕЦ КАК КурсДокумента,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Кратность
			|	КОНЕЦ КАК КратностьДокумента,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Курс
			|	КОНЕЦ КАК КурсУпрУчета,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Кратность
			|	КОНЕЦ КАК КратностьУпрУчета
			|ИЗ
			|	Документ.ПлатежноеПоручениеИсходящее КАК ВыплатаЗаработнойПлатыДок
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсыДокумента
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ВыплатаЗаработнойПлатыДок.Ссылка = &Ссылка";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаДокумента",   ДатаДвижений);
		Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
		Запрос.УстановитьПараметр("ВалютаУпрУчета",  глЗначениеПеременной("ВалютаУправленческогоУчета"));
		Запрос.УстановитьПараметр("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
		Запрос.УстановитьПараметр("Ссылка",          Ссылка);
		
		ТаблицаПлатежейУпр = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	//АБС Чалавиев 04.03.2014 22890
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		ТаблицаПлатежейУпр.Очистить();
		ТаблицаПлатежейУпр.Колонки.Добавить("ФизЛицо",Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаПлатежейУпр.Колонки.Добавить("РасчетныйДокументРаботника",Новый ОписаниеТипов("ДокументСсылка.АвансовыйОтчет"));
		
		//АБС ВСТАВКА 39801  18.03.2014 12:04:43  Стрельцов
		Если РасшифровкаПлатежаПодотчетникам.Количество() > 0 Тогда
		//\\АБС ВСТАВКА 39801 Стрельцов КОНЕЦ
			Для каждого ТекущаяСтрока из РасшифровкаПлатежаПодотчетникам Цикл
				НоваяСтрока = ТаблицаПлатежейУпр.Добавить();
				НоваяСтрока.ВестиПоДокументамРасчетовСКонтрагентом =  ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
				НоваяСтрока.ФизЛицо = ТекущаяСтрока.ФизЛицо;
				НоваяСтрока.РасчетныйДокументРаботника = ТекущаяСтрока.РасчетныйДокументРаботника;
				НоваяСтрока.СуммаПлатежа = ТекущаяСтрока.Сумма;
				НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаПлатежа;
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = ТекущаяСтрока.СтатьяДвиженияДенежныхСредств;
				НоваяСтрока.ДокументПланированияПлатежа = ТекущаяСтрока.ДокументПланированияПлатежа;
				НоваяСтрока.ВключатьВПлатежныйКалендарь = ТекущаяСтрока.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь; 
				НоваяСтрока.Проект = ТекущаяСтрока.Проект;
				НоваяСтрока.СуммаПлатежаПлан = ТекущаяСтрока.СуммаПлатежаПлан;
				НоваяСтрока.СуммаУпр = НоваяСтрока.СуммаПлатежа;
				НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаПлатежа;
				НоваяСтрока.КурсДокумента = 1; //АБС - предусматривается, что валютных взаиморасчетов не будет
				НоваяСтрока.КратностьДокумента = 1;
				НоваяСтрока.КурсУпрУчета = 1;
				НоваяСтрока.КратностьУпрУчета = 1;
			КонецЦикла;
		//АБС ВСТАВКА 39801  18.03.2014 12:04:43  Стрельцов
		Иначе
			НоваяСтрока = ТаблицаПлатежейУпр.Добавить();
			НоваяСтрока.ВестиПоДокументамРасчетовСКонтрагентом =  ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
			НоваяСтрока.ФизЛицо = ФизЛицо;
			НоваяСтрока.РасчетныйДокументРаботника = РасчетныйДокументРаботника;
			НоваяСтрока.СуммаПлатежа = СуммаДокумента;
			НоваяСтрока.СуммаВзаиморасчетов = СуммаДокумента;
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.ДокументПланированияПлатежа = РасшифровкаПлатежа[0].ДокументПланированияПлатежа;
			НоваяСтрока.ВключатьВПлатежныйКалендарь = НоваяСтрока.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь; 
			НоваяСтрока.Проект = РасшифровкаПлатежа[0].Проект;
			НоваяСтрока.СуммаПлатежаПлан = РасшифровкаПлатежа[0].СуммаПлатежаПлан;
			НоваяСтрока.СуммаУпр = НоваяСтрока.СуммаПлатежа;
			НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаПлатежа;
			НоваяСтрока.КурсДокумента = 1; //АБС - предусматривается, что валютных взаиморасчетов не будет
			НоваяСтрока.КратностьДокумента = 1;
			НоваяСтрока.КурсУпрУчета = 1;
			НоваяСтрока.КратностьУпрУчета = 1;
		КонецЕсли;
		//\\АБС ВСТАВКА 39801 Стрельцов КОНЕЦ		
		
		ТаблицаПлатежейУпр.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");   
		
	КонецЕсли;
	//АБС Чалавиев 04.03.2014 22890
КонецПроцедуры // ПолучитьТаблицуПлатежейППУпр()

Процедура ЗаполнитьНастройкуКнигиУСН() Экспорт

	#Если Клиент Тогда
	Если РучнаяНастройка_УСН Тогда
		ТекстВороса = 
		"Отражение платежа в Книге учета доходов и расходов настроено вручную.
		|Перезаполнить показатели Книги учета доходов и расходов?";
		Если Вопрос(ТекстВороса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			РучнаяНастройка_УСН = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли

	СуммаДляКУДиР = СуммаДокумента;

	Если НЕ ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		КурсВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СуммаДляКУДиР = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР, ВалютаДокумента, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
	КонецЕсли;

	Если НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата) Тогда

		Графа4_УСН      = СуммаДляКУДиР;
		Графа5_УСН      = СуммаДляКУДиР;
		Графа6_УСН      = 0;
		Графа7_УСН      = 0;
		НДС_УСН         = 0;
		ДоходыЕНВД_УСН  = Ложь;
		РасходыЕНВД_УСН = Ложь;
		Содержание_УСН  = "" + ВидОперации + ".";

		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
			Содержание_УСН = "Возврат денежных средств покупателю";
			Графа4_УСН      = 0;
			Графа5_УСН      = 0;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьНастройкуКнигиУСН()
 
// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплата()

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("ДатаОплаты","Не указана дата оплаты документа банком!");
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет, на который производится перевод!");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

	СтруктураПолей = Новый Структура("Организация,СуммаДокумента, Ответственный");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");

	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками Тогда

		СтруктураПолей.Вставить("ФизЛицо","Не указан работник");
		СтруктураПолей.Вставить("ДоговорЗайма","Не указан договор займа с работником");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		
		//АБС+ 
		
		//СтруктураПолей.Вставить("ФизЛицо","Не указано подотчетное лицо");
		//СтруктураПолей.Вставить("ВалютаВзаиморасчетовРаботника","Не указана валюта взаиморасчетов с подотчетным лицом");
        	
		СтруктураПолей.Вставить("ВалютаВзаиморасчетовРаботника","Не указана валюта взаиморасчетов с подотчетным лицом");
		Если РасшифровкаПлатежаПодотчетникам.Количество()=0 Тогда
			СтруктураПолей.Вставить("ФизЛицо","Не указано подотчетное лицо");
		Иначе
			Для каждого ТекСтрока Из РасшифровкаПлатежаПодотчетникам Цикл
				Если ТекСтрока.ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					СтруктураПолей.Вставить("ФизЛицо","Не указано подотчетное лицо (Строка "+ТекСтрока.НомерСтроки+")");
				КонецЕсли;
			КонецЦикла;	
		Конецесли;
		//АБС
       		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда

	Иначе
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)

	Если НЕ ЗначениеЗаполнено(Значение) Тогда 

		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		//АБС
		Если Не УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "абс_ПроведениеПлатежаБезСтатьи") Тогда
			ПроверитьЗначение(Платеж.СтатьяДвиженияДенежныхСредств,Отказ, Заголовок,"Статья движения денежных средств");	
		КонецЕсли;
		//АБС
		Если Не Отказ Тогда

			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;

			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)

	//АБС
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику И РасшифровкаПлатежаПодотчетникам.Количество() > 0 Тогда
		//АБС ИЗМЕНЕНИЕ 35018  13.11.2013 13:55:13  Мачихина
		Если Оплачено Тогда
			ДвиженияПоРегистрамУпрПодотчетника(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
			ДвиженияПоРегистрамРеглПодотчетника();
			возврат;
		Иначе
			возврат;
		КонецЕсли;
		//АБС ИЗМЕНЕНИЕ 35018 КОНЕЦ
		
	КонецЕсли;	
	//АБС\\	
	
	// << Казаков Е.Л. 28.03.2017
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		Если РасшифровкаПлатежа.Количество()>0 Тогда
			ОбработанныеЗаявки = Новый СписокЗначений();
			Для к=1 По РасшифровкаПлатежа.Количество() Цикл
				Если ЗначениеЗаполнено(РасшифровкаПлатежа[к-1].ДокументПланированияПлатежа) Тогда
					Заявка = РасшифровкаПлатежа[к-1].ДокументПланированияПлатежа;
					Если НЕ ОбработанныеЗаявки.НайтиПоЗначению(Заявка)=Неопределено Тогда
						Продолжить;
					КонецЕсли;	
					ОбработанныеЗаявки.Добавить(Заявка);
					Для Каждого СтрокаЗаявки Из Заявка.Оплаты Цикл
						Если СтрокаЗаявки.СчетНаОплату.Налог Тогда
							ЗарегистрироватьВыплатуНДФЛсАренды(СтрокаЗаявки.СчетНаОплату, СтрокаЗаявки.Оплата);
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;	
		Иначе	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СвязанныеДокументы.Ссылка
				|ИЗ
				|	КритерийОтбора.СвязанныеДокументы(&ППИ) КАК СвязанныеДокументы";
			
			Запрос.УстановитьПараметр("ППИ", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.абс_СчетНаОплату") Тогда
					Если ВыборкаДетальныеЗаписи.Ссылка.Налог Тогда
						ЗарегистрироватьВыплатуНДФЛсАренды(ВыборкаДетальныеЗаписи.Ссылка, СтрокаЗаявки.Оплата);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
	
	КонецЕсли;	
	// Казаков Е.Л. 28.03.2017 >>
	
	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли; 

КонецПроцедуры // ДвиженияПоРегистрам()

// << Казаков Е.Л. 28.03.2017
Процедура	ЗарегистрироватьВыплатуНДФЛсАренды(СчетНаОплатуНалога, Оплата)
	СчетНаОплатуАренды = СчетНаОплатуНалога.ДокументОснование;
	ВидДоговораАренда = Справочники.абс_ПредметДоговораГК.ДоговорАренды;
	Если НЕ ЗначениеЗаполнено(СчетНаОплатуАренды) Тогда
		Возврат;
		//// выбор счета на оплату аренды
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	абс_СчетНаОплату.Ссылка КАК Ссылка
		//|ИЗ
		//|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
		//|ГДЕ
		//|	абс_СчетНаОплату.ДоговорКонтрагента.абс_ВидДоговора = &абс_ВидДоговора
		//|	И абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
		//|	И абс_СчетНаОплату.Организация = &Организация
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Ссылка УБЫВ";
		//
		//Запрос.УстановитьПараметр("абс_ВидДоговора", ВидДоговораАренда);
		//Запрос.УстановитьПараметр("ЗакупочныйЗаказ", СчетНаОплатуНалога.ЗакупочныйЗаказ);
		//Запрос.УстановитьПараметр("Организация", Организация);
		//
		//РезультатЗапроса = Запрос.Выполнить();
		//
		//ТаблицаСчетов = РезультатЗапроса.Выгрузить();
		//СчетНаОплатуАренды = ТаблицаСчетов.ВыбратьСтроку("Выберите счет на оплату аренды");
		//Если НЕ ЗначениеЗаполнено(СчетНаОплатуАренды) Тогда
		//	Возврат;
		//КонецЕсли;	
	КонецЕсли;	
	//Если СчетНаОплатуАренды <> СчетНаОплатуНалога.ДокументОснование Тогда
	//	СчетНаОплатуНалогаОбъект = ДокументОснование.ПолучитьОбъект();
	//	СчетНаОплатуНалогаОбъект.ДокументОснование = СчетНаОплатуАренды;
	//	СчетНаОплатуНалогаОбъект.Записать(РежимЗаписиДокумента.Запись);
	//КонецЕсли;	
	
	Если СчетНаОплатуАренды.ДоговорКонтрагента.абс_ВидДоговора = ВидДоговораАренда Тогда
		Проводка = Движения.ttk_ВыплатаНДФЛсАренды.Добавить();
		Проводка.ФизическоеЛицо = СчетНаОплатуАренды.Контрагент.абс_ФизЛицо;
		Проводка.Организация = Организация;
		Проводка.СуммаНДФЛ = СчетНаОплатуНалога.СуммаПлатежа;
		Проводка.СуммаВыплатыФЛ = СчетНаОплатуАренды.СуммаПлатежа;
		Проводка.СуммаАренды = СчетНаОплатуНалога.СуммаПлатежа + СчетНаОплатуАренды.СуммаПлатежа;
		Проводка.Контрагент = СчетНаОплатуАренды.Контрагент;
		Проводка.ДоговорКонтрагента = СчетНаОплатуАренды.ДоговорКонтрагента;
		Проводка.СчетНаВыплатуАренды = СчетНаОплатуАренды;
		Проводка.КомментарийВыгрузкиВИСУЗК = ttk_КомментарийВыгрузкиВИСУЗК;
		Проводка.Оплата = Оплата;
	КонецЕсли;	
КонецПроцедуры
// Казаков Е.Л. 28.03.2017 >>

//АБС 
Процедура ДвиженияПоРегистрамРеглПодотчетника()
			
	ВидСчетаОрг = СчетОрганизации.ВидСчета;
	ВалютаСчета = СчетОрганизации.ВалютаДенежныхСредств;
	ВалютаРег = мВалютаРегламентированногоУчета;
	РасчетыВВалюте = Ложь;
	Если ВидСчетаОрг = "Расчетный" Тогда
		Если ((ВалютаСчета = ВалютаРег) ИЛИ (Не ЗначениеЗаполнено(ВалютаСчета))) Тогда
			СчетКт = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Иначе
			СчетКт = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
			РасчетыВВалюте = Истина;
		КонецЕсли;
	ИначеЕсли ВидСчетаОрг = "Депозитный" Тогда
		Если ((ВалютаСчета = ВалютаРег) ИЛИ (Не ЗначениеЗаполнено(ВалютаСчета))) Тогда
			СчетКт = ПланыСчетов.Хозрасчетный.ДепозитныеСчета;
		Иначе
			СчетКт = ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал;
			РасчетыВВалюте = Истина;
		КонецЕсли;
	Иначе
		Если ((ВалютаСчета = ВалютаРег) ИЛИ (Не ЗначениеЗаполнено(ВалютаСчета))) Тогда
			СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
		Иначе
			СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчетаВал;
			РасчетыВВалюте = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;	
	
	Для Каждого ТекущаяСтрока Из РасшифровкаПлатежаПодотчетникам Цикл
		Проводка = ПроводкиБУ.Добавить();			
		Проводка.Период      = Дата;
		Проводка.Активность  = Истина;
		Проводка.Организация = Организация;			
		Проводка.Содержание = "Перечисление средств подотчетнику";			
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
		Проводка.СубконтоДт.РаботникиОрганизации = ТекущаяСтрока.ФизЛицо;
		Проводка.СубконтоДт.ВидыПодотчетныхСумм  = ТекущаяСтрока.ВидПодотчетнойСуммы;
		Проводка.СчетКт = СчетКт;
		Проводка.СубконтоКт.БанковскиеСчета = СчетОрганизации;
		Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = ТекущаяСтрока.СтатьяДвиженияДенежныхСредств;
		Проводка.Сумма = ТекущаяСтрока.Сумма;	
	КонецЦикла;	
	
КонецПроцедуры
Процедура ДвиженияПоРегистрамУпрПодотчетника(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)
	
	мСтруктураПараметровДенежныхСредств.Вставить("РасчетыВозврат",            РасчетыВозврат);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",     ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",       СчетОрганизации);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",              ДатаДвижений);
	мСтруктураПараметровДенежныхСредств.Вставить("ФизЛицо",                    ФизЛицо);
	мСтруктураПараметровДенежныхСредств.Вставить("РасчетныйДокументРаботника", РасчетныйДокументРаботника);

	ТаблицаПлатежейУпр.Очистить();
	
	//АБС ВСТАВКА 39801  18.03.2014 12:24:36  Стрельцов
	КолонкаФизЛицо = ТаблицаПлатежейУпр.Колонки.Найти("ФизЛицо");
	Если КолонкаФизЛицо = Неопределено ТОгда
		ТаблицаПлатежейУпр.Колонки.Добавить("ФизЛицо",Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Иначе
		Если Не КолонкаФизЛицо.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
			ТаблицаПлатежейУпр.Колонки.Удалить(КолонкаФизЛицо);
			ТаблицаПлатежейУпр.Колонки.Добавить("ФизЛицо",Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		КонецЕсли;
	КонецЕсли;
	
	КолонкаРасчДокумент = ТаблицаПлатежейУпр.Колонки.Найти("РасчетныйДокументРаботника");
	Если КолонкаРасчДокумент = Неопределено ТОгда
		ТаблицаПлатежейУпр.Колонки.Добавить("РасчетныйДокументРаботника",Новый ОписаниеТипов("ДокументСсылка.АвансовыйОтчет"));
	Иначе
		Если Не КолонкаРасчДокумент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.АвансовыйОтчет")) Тогда
			ТаблицаПлатежейУпр.Колонки.Удалить(КолонкаРасчДокумент);
			ТаблицаПлатежейУпр.Колонки.Добавить("РасчетныйДокументРаботника",Новый ОписаниеТипов("ДокументСсылка.АвансовыйОтчет"));
		КонецЕсли;
	КонецЕсли;
	//\\АБС ВСТАВКА 39801 КОНЕЦ

	Для каждого ТекущаяСтрока из РасшифровкаПлатежаПодотчетникам Цикл
		НоваяСтрока = ТаблицаПлатежейУпр.Добавить();
		НоваяСтрока.ВестиПоДокументамРасчетовСКонтрагентом =  СтруктураШапкиДокумента.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
		НоваяСтрока.ФизЛицо = ТекущаяСтрока.ФизЛицо;
		НоваяСтрока.РасчетныйДокументРаботника = ТекущаяСтрока.РасчетныйДокументРаботника;
		НоваяСтрока.СуммаПлатежа = ТекущаяСтрока.Сумма;
		НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаПлатежа;
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = ТекущаяСтрока.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.ДокументПланированияПлатежа = ТекущаяСтрока.ДокументПланированияПлатежа;
		НоваяСтрока.ВключатьВПлатежныйКалендарь = ТекущаяСтрока.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь; 
		НоваяСтрока.Проект = ТекущаяСтрока.Проект;
		НоваяСтрока.СуммаПлатежаПлан = ТекущаяСтрока.СуммаПлатежаПлан;
		НоваяСтрока.СуммаУпр = НоваяСтрока.СуммаПлатежа;
		НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаПлатежа;
		НоваяСтрока.КурсДокумента = 1; //АБС - предусматривается, что валютных взаиморасчетов не будет
		НоваяСтрока.КратностьДокумента = 1;
		НоваяСтрока.КурсУпрУчета = 1;
		НоваяСтрока.КратностьУпрУчета = 1;
	КонецЦикла;
	
	ТаблицаПлатежейУпр.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");   
	
	УправлениеДенежнымиСредствами.ПровестиСписаниеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);
 	
КонецПроцедуры
//\\АБС

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)
	
	мСтруктураПараметровДенежныхСредств.Вставить("РасчетыВозврат",            РасчетыВозврат);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",     ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",       СчетОрганизации);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",              ДатаДвижений);
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКассаПолучатель", СчетКонтрагента);
		мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредствПолучатель",  Перечисления.ВидыДенежныхСредств.Безналичные);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("ФизЛицо",                    ФизЛицо);
		мСтруктураПараметровДенежныхСредств.Вставить("РасчетныйДокументРаботника", РасчетныйДокументРаботника);
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.ПровестиСписаниеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);

	//АБС
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда   
		
		Если РасшифровкаПлатежаПодотчетникам.Количество()=0 Тогда
			ТаблицаПлатежейУпр[0].СуммаПлатежа = СуммаДокумента;
			ТаблицаПлатежейУпр[0].СуммаУпр = СуммаДокумента ;
			
		Иначе
			ТаблицаПлатежейУпр[0].СуммаПлатежа = РасшифровкаПлатежаПодотчетникам.Итог("Сумма");
			ТаблицаПлатежейУпр[0].СуммаУпр =РасшифровкаПлатежаПодотчетникам.Итог("Сумма") ;
		КонецЕсли;
		
	КонецЕсли;	
	//АБС-
		
		
КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	Иначе
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРазницам(Отказ, ПроводкиНУ, СуммаПроводки)
	
	УчетнаяПолитикаБух = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если НЕ УчетнаяПолитикаБух.ПоддержкаПБУ18 Тогда
		Возврат;
	КонецЕсли;              
	
	мКэшСчетов = Новый Соответствие;
	
		
		СуммаВПроводку = СуммаПроводки;
		
		Если ТипЗнч(СубконтоНУДт1)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СубконтоНУДт1.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СубконтоНУДт2)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СубконтоНУДт2.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СубконтоНУДт3)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СубконтоНУДт3.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СубконтоНУДт1)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СубконтоНУДт1.ВидПрочихДоходовИРасходов;
		ИначеЕсли ТипЗнч(СубконтоНУДт2)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СубконтоНУДт2.ВидПрочихДоходовИРасходов;
		ИначеЕсли ТипЗнч(СубконтоНУДт3)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СубконтоНУДт3.ВидПрочихДоходовИРасходов;
		Иначе
			ВидЗатрат = "";
		КонецЕсли;
		
		Если ВидЗатрат = "" Тогда
			
			СтруктураСчетаВКэше = мКэшСчетов[СчетУчетаРасчетовСКонтрагентом];
			Если СтруктураСчетаВКэше = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), Ложь, Дата);
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом] = Новый Соответствие;
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом].Вставить("", СчетНУСоответствующийСчетуБУ);
			Иначе
				СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[""];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), Ложь, Дата);
					СтруктураСчетаВКэше.Вставить("", СчетНУСоответствующийСчетуБУ);
				КонецЕсли;								
			КонецЕсли;
			
			Если СчетНУСоответствующийСчетуБУ = СчетУчетаРасчетовСКонтрагентомНУ	Тогда
				Возврат;
			КонецЕсли;
		Иначе
			
			СтруктураСчетаВКэше = мКэшСчетов[СчетУчетаРасчетовСКонтрагентом];
			Если СтруктураСчетаВКэше = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СчетУчетаРасчетовСКонтрагентом, ВидЗатрат), Ложь, Дата);
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом] = Новый Соответствие;
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом].Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
			Иначе
				СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[ВидЗатрат];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СчетУчетаРасчетовСКонтрагентом, ВидЗатрат), Ложь, Дата);
					СтруктураСчетаВКэше.Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
				КонецЕсли;								
			КонецЕсли;
			
			Если СчетНУСоответствующийСчетуБУ = СчетУчетаРасчетовСКонтрагентомНУ	Тогда
				Возврат;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ)	Тогда
				
				СтруктураСчетаВКэше = мКэшСчетов[СчетУчетаРасчетовСКонтрагентом];
				Если СтруктураСчетаВКэше = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), Ложь, Дата);
					мКэшСчетов[СчетУчетаРасчетовСКонтрагентом] = Новый Соответствие;
					мКэшСчетов[СчетУчетаРасчетовСКонтрагентом].Вставить("", СчетНУСоответствующийСчетуБУ);
				Иначе
					СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[""];
					Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
						СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), Ложь, Дата);
						СтруктураСчетаВКэше.Вставить("", СчетНУСоответствующийСчетуБУ);
					КонецЕсли;								
				КонецЕсли;
				
				Если СчетНУСоответствующийСчетуБУ = СчетУчетаРасчетовСКонтрагентомНУ	Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ) Тогда
			Сообщить("Не найдено соответствие для счета БУ " +  СчетУчетаРасчетовСКонтрагентом + ", разницы между БУ и НУ не рассчитаны");
			Возврат;
		КонецЕсли;
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "" + ВидОперации;
		
		Проводка.СчетДт      = СчетНУСоответствующийСчетуБУ;
		
		Если СчетНУСоответствующийСчетуБУ = ПланыСчетов.Налоговый.РасходыБудущихПериодовНаДобровольноеСтрахованиеРаботников Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СубконтоДт3);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СубконтоДт3);
		КонецЕсли;
		
		Проводка.Сумма = СуммаПроводки;
		Если ТипЗнч(СубконтоНУДт1) = Тип("СправочникСсылка.СтатьиЗатрат") И СубконтоНУДт1.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СубконтоНУДт1.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт2) = Тип("СправочникСсылка.СтатьиЗатрат") И СубконтоНУДт2.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт2) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СубконтоНУДт2.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт3) = Тип("СправочникСсылка.СтатьиЗатрат") И СубконтоНУДт3.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт3) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СубконтоНУДт3.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		Иначе
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР;
		КонецЕсли;
		Проводка.ВидУчетаДт = ВидУчета;
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "" + ВидОперации;
		Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентомНУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СубконтоНУДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СубконтоНУДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СубконтоНУДт3);
		Проводка.Сумма = - СуммаПроводки;
		
		Проводка.ВидУчетаДт = ВидУчета;
		
КонецПроцедуры

// Формирует запрос по табличной части документа
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоДокПлатежноеПоручение()

	Запрос = Новый Запрос;
	
	Если ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументПеречислениеЗаработнойПлаты.Ссылка.ДатаОплаты КАК Период,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты,
		|	&СпособВыплаты КАК СпособВыплаты,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК СуммаВзаиморасчетов
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ДокументПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|			ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|				И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|				И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ДокументПеречислениеЗаработнойПлаты.Ведомость
		|ГДЕ
		|	ДокументПеречислениеЗаработнойПлаты.Ссылка = &Ссылка
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументПеречислениеЗаработнойПлаты.Ссылка.ДатаОплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодРегистрации,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) <> 0";
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументПеречислениеЗаработнойПлаты.Ссылка.Дата КАК Период,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
		|	&СпособВыплаты КАК СпособВыплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК СуммаВзаиморасчетов
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ДокументПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|			ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|				И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|				И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ДокументПеречислениеЗаработнойПлаты.Ведомость
		|ГДЕ
		|	ДокументПеречислениеЗаработнойПлаты.Ссылка = &Ссылка
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументПеречислениеЗаработнойПлаты.Ссылка.Дата,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) <> 0";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("СпособВыплаты",	Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоДокПлатежноеПоручение

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.Оплачено) Тогда
		Возврат;
	КонецЕсли; 
	
	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	ДатаДока   = ДатаДвижений;
	
	РасчетыВВалюте = Ложь;
	СчетКт = УправлениеДенежнымиСредствами.ОпределитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетОрганизации, мВалютаРегламентированногоУчета, РасчетыВВалюте);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
		мУпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
		
		Если НЕ мУпрощенныйУчетВзаиморасчетов Тогда
			
			Если Оплачено И ОтраженоВОперУчете Тогда
				
				ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
				// По регистру регламентированных расчетов с работниками
				
				Выборка = СформироватьЗапросПоДокПлатежноеПоручение().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					СтрокаДвижения = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвижения,Выборка);
					СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Расход;
				КонецЦикла;
				
				// По регистру расчетов с бюджетом по НДФЛ
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Ссылка",Ссылка);
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА ПлДок.Ссылка.Дата > КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
				|			ТОГДА ПлДок.Ссылка.Дата
				|		ИНАЧЕ КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
				|	КОНЕЦ КАК ДатаНДФЛ
				|ИЗ
				|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлДок
				|ГДЕ
				|	ПлДок.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ПлДок.Ссылка.Дата";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ДатаНДФЛ = Выборка.ДатаНДФЛ;
				
				СтруктураДокумента = Новый Структура("ДатаНДФЛ,Ссылка,Период,ОбособленноеПодразделение,Организация",ДатаНДФЛ,Ссылка,Дата,Организация,ГоловнаяОрганизация);
				
				ТекстТаблицыВыплаты = 
				"ВЫБРАТЬ
				|	ЗарплатаКВыплате.Физлицо КАК ФизЛицо,
				|	СУММА(ЗарплатаКВыплате.Сумма) КАК Сумма
				|ПОМЕСТИТЬ ВТВыплатыФизлицам
				|ИЗ
				|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлДок
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
				|			ПО ЗарплатаКВыплате.Ссылка = РанееВыплаченныеСуммы.Ведомость
				|				И ЗарплатаКВыплате.Физлицо = РанееВыплаченныеСуммы.Физлицо
				|				И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
				|		ПО ПлДок.Ведомость = ЗарплатаКВыплате.Ссылка
				|ГДЕ
				|	ПлДок.Ссылка = &ДокументСсылка
				|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗарплатаКВыплате.Физлицо
				|
				|ИМЕЮЩИЕ
				|	СУММА(ЗарплатаКВыплате.Сумма) <> 0
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ФизЛицо";
				
				ПроведениеРасчетовПереопределяемый.СформироватьРасчетыПоНДФЛПриВыплате(СтруктураДокумента, ТекстТаблицыВыплаты, Движения.НДФЛРасчетыСБюджетом);
				
			КонецЕсли;
			
		КонецЕсли; 
		
		// Определим способ ведения учета расчетов с персоналом - сводно/подробно
		ВестиРеглУчетРасчетовСПерсоналомПодробно = Не глЗначениеПеременной("ВестиРеглУчетРасчетовСПерсоналомСводно");
		
		Для каждого СтрокаВыплат Из ПеречислениеЗаработнойПлаты Цикл
			
			ДокументВыплаты = СтрокаВыплат.Ведомость;
			
			ТабЧасть        = ДокументВыплаты.Зарплата;
			НомерВедомости  = ДокументВыплаты.Номер;
			ДатаВедомости   = ДокументВыплаты.Дата;
			
			Для Каждого СтрокаТЧ из ТабЧасть Цикл
				
				Если СтрокаТЧ.Сумма > 0 Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = ДатаДока;
					Проводка.Организация = Организация;
					Проводка.Содержание  = "Перечисление зарплаты в банк по ведомости №" + 
					НомерВедомости + " от " + ДатаВедомости;
					Проводка.Сумма       = СтрокаТЧ.Сумма;
					
					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.ФизЛицо);
					КонецЕсли;
					
					Проводка.СчетКт      = СчетКт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаВыплат.СтатьяДвиженияДенежныхСредств);
					
				КонецЕсли;
				
				Если СтрокаТЧ.КомпенсацияЗаЗадержкуЗарплаты > 0 Тогда
					
					Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен счет учета(БУ) для компенсации за задержку зарплаты!",Отказ, Заголовок);
						Прервать;
					КонецЕсли;
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период			= СтруктураШапкиДокумента.Дата;
					Проводка.Активность		= Истина;
					Проводка.Организация	= Организация;
					Проводка.Сумма			= СтрокаТЧ.КомпенсацияЗаЗадержкуЗарплаты;
					
					Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
					Если СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоПрочимОперациям) Тогда
						
						Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.ФизЛицо);
							//Проводка.СубконтоДт.РаботникиОрганизации = СтрокаТЧ.ФизЛицо;
						КонецЕсли;
						
					Иначе
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
						
					КонецЕсли; 
					
					Проводка.Содержание		= "Компенсация за задержку выплаты зарплаты по ведомости №" + ДокументВыплаты.Номер + " от " + ДокументВыплаты.Дата;
					Проводка.СчетКт			= СчетКт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
					//Бобылев А.А. 12.09.2017 №77178107
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						
						Проводка = ПроводкиНУ.Добавить();
						
						Проводка.Период			= СтруктураШапкиДокумента.Дата;
						Проводка.Активность		= Истина;
						Проводка.Организация	= Организация;
						Проводка.Сумма			= СтрокаТЧ.КомпенсацияЗаЗадержкуЗарплаты;
						
						Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентомНУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоНУДт1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоНУДт2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоНУДт3);
						
						Проводка.Содержание		= "Компенсация за задержку выплаты зарплаты по ведомости №" + ДокументВыплаты.Номер + " от " + ДокументВыплаты.Дата;
						Проводка.СчетКт			= ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);		
					КонецЕсли;
					//Бобылев А.А. 12.09.2017 №77178107
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами Тогда
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок,СчетКт);
		Если Не (СтруктураПараметровДДС = Ложь) тогда
			
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям);
			
		Иначе
			БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенегПрочийРасход(ЭтотОбъект, РасчетыВВалюте, СчетКт, СтруктураШапкиДокумента,Отказ,Заголовок);
		Конецесли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Расчеты по кредитам и займам";
		
		Проводка.СчетДт      = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].ДоговорКонтрагента);
		
		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента,
				СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента, 1, 
				СтруктураШапкиДокумента.КратностьДокумента, 1);
		Иначе
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику
		Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДвижений;
		Проводка.Организация = Организация;
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога тогда
			Проводка.Содержание  = "Перечисление налога";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками тогда
			Проводка.Содержание  = "Расчеты по кредитам и займам с работниками";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			Проводка.Содержание = "Перечисление средств подотчетнику";
		Иначе
			Проводка.Содержание  = "Прочее списание денежных средств";
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.ФизЛицо);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			Если РасчетыВВалюте Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизации", СтруктураШапкиДокумента.ФизЛицо);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПодотчетныхСумм", абс_ВидПодотчетнойСуммы); //АБС Коломиец
		Иначе
			Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
			
		КонецЕсли;
		
		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			//Абс заявка 1683
			Если ЗначениеЗаполнено(РасшифровкаПлатежа.Количество()>0) Тогда
				абс_Курс = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
				//АБС 3584
				Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
					СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));
					абс_Курс        = СтруктураКурсаВалютаДокумента.Курс;
				КонецЕсли;
				
				//АБС 3584
				Если ЗначениеЗаполнено(абс_Курс) Тогда
					
					//Абс заявка 1683
					СуммаПроводки = СтруктураШапкиДокумента.СуммаДокумента*абс_Курс;
				Иначе
					СуммаПроводки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
					СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
					КурсДокумента, 1, 
					КратностьДокумента, 1);
					
				КонецЕсли;
			 		
			Иначе	
				СуммаПроводки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				КурсДокумента, 1, 
				КратностьДокумента, 1);
			КонецЕсли;	//Абс заявка 1683
		Иначе
			СуммаПроводки = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		Проводка.Сумма = СуммаПроводки;
		
		// << Казаков Е.Л. 24.04.2017
		Если Константы.ttk_ФормироватьПроводкиПоНачислениюНДФЛсАрендыИзППИ.Получить() Тогда
		Если РасшифровкаПлатежа.Количество()>0 Тогда
			ОбработанныеЗаявки = Новый СписокЗначений();
			Для к=1 По РасшифровкаПлатежа.Количество() Цикл
				Если ЗначениеЗаполнено(РасшифровкаПлатежа[к-1].ДокументПланированияПлатежа) Тогда
					Заявка = РасшифровкаПлатежа[к-1].ДокументПланированияПлатежа;
					Если НЕ ОбработанныеЗаявки.НайтиПоЗначению(Заявка)=Неопределено Тогда
						Продолжить;
					КонецЕсли;	
					ОбработанныеЗаявки.Добавить(Заявка);
					Для Каждого СтрокаЗаявки Из Заявка.Оплаты Цикл
						Если СтрокаЗаявки.СчетНаОплату.Налог Тогда
							СчетНаОплатуНалога = СтрокаЗаявки.СчетНаОплату;
							СчетНаОплатуАренды = СчетНаОплатуНалога.ДокументОснование;
							Если ЗначениеЗаполнено(СчетНаОплатуАренды) Тогда
								Если СчетНаОплатуАренды.ДоговорКонтрагента.абс_ВидДоговора = Справочники.абс_ПредметДоговораГК.ДоговорАренды Тогда
									
									Проводка2 = ПроводкиБУ.Добавить();
									
									Проводка2.Период      = ДатаДвижений;
									Проводка2.Организация = Организация;
									Проводка2.Содержание  = "Начисление налога";
									
									Проводка2.СчетКт      = СчетУчетаРасчетовСКонтрагентом;
									БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, 1, СубконтоДт1);
									БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, 2, СубконтоДт2);
									БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, 3, СубконтоДт3);
									
									Проводка2.СчетДт      = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.05");
									БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт, Проводка2.СубконтоДт, 1, СчетНаОплатуАренды.Контрагент);
									БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт, Проводка2.СубконтоДт, 2, СчетНаОплатуАренды.ДоговорКонтрагента);
									
									Проводка2.Сумма = СчетНаОплатуНалога.СуммаПлатежа;
									
								КонецЕсли;	
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;	
		Иначе	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СвязанныеДокументы.Ссылка
				|ИЗ
				|	КритерийОтбора.СвязанныеДокументы(&ППИ) КАК СвязанныеДокументы";
			Запрос.УстановитьПараметр("ППИ", Ссылка);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.абс_СчетНаОплату") Тогда
					Если ВыборкаДетальныеЗаписи.Ссылка.Налог Тогда
						СчетНаОплатуНалога = ВыборкаДетальныеЗаписи.Ссылка;
						СчетНаОплатуАренды = СчетНаОплатуНалога.ДокументОснование;
						Если ЗначениеЗаполнено(СчетНаОплатуАренды) Тогда
							Если СчетНаОплатуАренды.ДоговорКонтрагента.абс_ВидДоговора = Справочники.абс_ПредметДоговораГК.ДоговорАренды Тогда
								
								Проводка2 = ПроводкиБУ.Добавить();
								
								Проводка2.Период      = ДатаДвижений;
								Проводка2.Организация = Организация;
								Проводка2.Содержание  = "Начисление налога";
								
								Проводка2.СчетКт      = СчетУчетаРасчетовСКонтрагентом;
								БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, 1, СубконтоДт1);
								БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, 2, СубконтоДт2);
								БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, 3, СубконтоДт3);
								
								Проводка2.СчетДт      = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.05");
								БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт, Проводка2.СубконтоДт, 1, СчетНаОплатуАренды.Контрагент);
								БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт, Проводка2.СубконтоДт, 2, СчетНаОплатуАренды.ДоговорКонтрагента);
								
								Проводка2.Сумма = СчетНаОплатуНалога.СуммаПлатежа;
								
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
	
		КонецЕсли;	
		КонецЕсли;	
		// << Казаков Е.Л. 24.04.2017
		
		// Сформируем проводку по НУ
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			// +++ T#7723272 2017.05.12 Гущина
			// Было   Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ)... 
			Если  ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ)
				И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
				// --- T#7723272 2017.05.12 Гущина
				
				Проводка.Сумма = СуммаПроводки;
				
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Прочее списание денежных средств";
				
				Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентомНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоНУДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоНУДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоНУДт3);
				
				Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ДоговорКонтрагента);
				
				Проводка.Сумма = СуммаПроводки;
				
				ДвиженияПоРазницам(Отказ, ПроводкиНУ, СуммаПроводки);
			// +++ T#7723272 2017.05.12 Гущина
			ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику  тогда
				Проводка=ПроводкиНУ.Добавить();
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Перечисление денежных средств подотчетнику";
				Проводка.СчетДт  = ?(РасчетыВВалюте,ПланыСчетов.Налоговый.НайтиПоКоду("71.21"),ПланыСчетов.Налоговый.НайтиПоКоду("71.01"));
				Проводка.СубконтоДт.РаботникиОрганизации = СтруктураШапкиДокумента.ФизЛицо;
				Проводка.СубконтоДт.ВидыПодотчетныхСумм = абс_ВидПодотчетнойСуммы;
				
				// Кт как в ПрочееСписаниеБезналичныхДенежныхСредств
				Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ДоговорКонтрагента);
				
			    Проводка.Сумма = СуммаПроводки;
			КонецЕсли;
			// --- T#7723272 2017.05.12 Гущина
			
		КонецЕсли;
		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		ВидСчетаОрг = СтруктураШапкиДокумента.СчетКонтрагента.ВидСчета;
		ВалютаСчета = СтруктураШапкиДокумента.СчетКонтрагента.ВалютаДенежныхСредств;
		
		РасчетыВВалюте = Ложь;
		СчетДт = УправлениеДенежнымиСредствами.ОпределитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетКонтрагента, мВалютаРегламентированногоУчета, РасчетыВВалюте);
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Перевод средств на другой счет организации";
		
		Проводка.СчетДт      = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента, 1, 
				СтруктураШапкиДокумента.КратностьДокумента, 1);
		Иначе
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		НалоговыйУчетУСН.ПрочееДДС(ЭтотОбъект);
	КонецЕсли;
	//АБС ВСТАВКА 48907  05.11.2014 14:43:57  Шамов
	Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента
		И (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств) Тогда
		Для Каждого СтрокаТЗ Из абс_СчетаФактуры Цикл
			ПроводкаСФ = ПроводкиБУ.Добавить();
			ЗаполнитьЗначенияСвойств(ПроводкаСФ, Проводка);
			Для Каждого ВидСубконто Из ПроводкаСФ.СчетДт.ВидыСубконто Цикл
				ПроводкаСФ.СубконтоДт[ВидСубконто.ВидСубконто] = Проводка.СубконтоДт[ВидСубконто.ВидСубконто];
			КонецЦикла;
			Для Каждого ВидСубконто Из ПроводкаСФ.СчетКт.ВидыСубконто Цикл
				ПроводкаСФ.СубконтоКт[ВидСубконто.ВидСубконто] = Проводка.СубконтоКт[ВидСубконто.ВидСубконто];
			КонецЦикла;
			ПроводкаСФ.Сумма = СтрокаТЗ.Сумма;
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаСФ.СчетДт, ПроводкаСФ.СубконтоДт, 3, СтрокаТЗ.СчетФактура);
		КонецЦикла;
		Если ПроводкиБУ.Количество() > 1 Тогда
			ПроводкиБУ.Удалить(Проводка);			
		КонецЕсли;
	КонецЕсли;		
	//АБС ВСТАВКА 48907 КОНЕЦ
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)

	Если ОтраженоВОперУчете 
		//АБС ВСТАВКА 18616 НАЧАЛО
		И (НЕ Оплачено или НЕ Ссылка.Оплачено)
		И (Режим = РежимПроведенияДокумента.Оперативный или не Константы.абс_КонтрольПоЗаявкам_В_ППИ_В_ЛюбомРежимеЗаписиВыключить.Получить())
		//\\АБС ВСТАВКА 18616 КОНЕЦ
		И (НЕ ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет) Тогда

		ЕстьРазрешение=УправлениеДопПравамиПользователей.ПравоРазрешитьПроведениеПлатежаБезЗаявки();
		
		УправлениеДенежнымиСредствами.ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
			СчетОрганизации,СуммаДокумента,ТаблицаПлатежейУпр, ЕстьРазрешение);
					
		// Проверяем остаток доступных денежных средств
		СвободныйОстаток = УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(СчетОрганизации,Дата,ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"));
		Если СвободныйОстаток < СуммаДокумента Тогда

			Сообщить(Заголовок+"
			|Сумма документа превышает возможный к использованию остаток денежных средств
			|по "+СчетОрганизации.Наименование+".
			|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2; ЧН=0")+" "+ВалютаДокумента+"
			|Сумма документа = "+Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);

			Если НЕ УправлениеДопПравамиПользователей.ПравоРазрешитьПревышениеСвободногоОстаткаДС() Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И (ОтраженоВОперУчете ИЛИ (ОтражатьВБухгалтерскомУчете И Оплачено)) Тогда

		ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
		
		Если Не Отказ Тогда
			УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(Дата, ТаблицаПлатежейУпр, Отказ, Заголовок,РасчетыВозврат);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП И НЕ ПеречислениеЗаработнойПлаты.Количество()=0 Тогда
		
		//Проверка на соответствие суммы по ведомостям сумме документа
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СУММА(ЗарплатаКВыплате.Сумма + ЗарплатаКВыплате.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаВыплачено
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
		|		ПО ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплате.Ссылка
		|
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если НЕ (Результат.Следующий() И Результат.СуммаВыплачено=СуммаДокумента) Тогда
			Сообщить("Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.");
			Отказ=Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Режим, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда

		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");

		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда

			ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			
			УправлениеДенежнымиСредствами.ПроверитьСоответствиеРаботникаОрганизации(ФизЛицо, Организация, Дата, Отказ, Заголовок);
			
		ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);

		КонецЕсли;
		

	КонецЕсли;

КонецПроцедуры

Функция СформироватьСтруктуруКурсыВалютУпр()

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",  глЗначениеПеременной("ВалютаУправленческогоУчета").Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", ВалютаДокумента.Код);

	СтруктураКурсыВалют = УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,?(ДатаОплаты = '00010101', Дата, КонецДня(ДатаОплаты)));

	Возврат СтруктураКурсыВалют;

КонецФункции

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)

	Если НЕ (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Основание.ФормаОплаты = Перечисления.ВидыДенежныхСредств.Наличные Тогда
		Сообщить("Заявка оформлена на расходование наличных денежных средств.");
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	УправлениеДенежнымиСредствами.ПроверитьСогласованиеЗаявок(Основание, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//АБС+ Тупиков 17236
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка КАК ПлатежноеПоручение,
	               |	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа,
	               |	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.СуммаДокумента,
	               |	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВалютаДокумента
	               |ИЗ
	               |	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	               |ГДЕ
	               |	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа = &ЗаявкаНаРасходованиеСредств
	               |	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Организация = &Организация";
	Запрос.УстановитьПараметр("ЗаявкаНаРасходованиеСредств", Основание);
	Запрос.УстановитьПараметр("Организация", Основание.Организация);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		Сообщить("По заявке на расходование средств " + Основание.Номер + " от " + Основание.Дата + " ранее уже были сделаны платежные поручения исходящие: ");
		Для Каждого Стр Из Результат Цикл
			Сообщить("" + Стр.ПлатежноеПоручение + " на сумму " + Стр.СуммаДокумента + " " + Стр.ВалютаДокумента); 
		КонецЦикла;
	КонецЕсли;
	//АБС- Тупиков			   
	
	//АБС ВСТАВКА 36332  11.12.2013 14:27:58  Шамов
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
	//АБС ВСТАВКА 36332 КОНЕЦ
		ВидОперацииЗаявка = Основание.ВидОперации;

		УправлениеДенежнымиСредствами.ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииЗаявка);
	//АБС ВСТАВКА 36332  11.12.2013 14:27:58  Шамов
	КонецЕсли;
	//АБС ВСТАВКА 36332 КОНЕЦ
	Организация = Основание.Организация;
	ВалютаДокумента = Основание.ВалютаДокумента;

	Если ЗначениеЗаполнено(Основание.БанковскийСчетКасса) Тогда
		СчетОрганизации = Основание.БанковскийСчетКасса;
	ИначеЕсли Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ВалютаДокумента Тогда
		СчетОрганизации= Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

	Ответственный     = Основание.Ответственный;
	ДокументОснование = Основание.Ссылка;
	
	Подразделение     = Основание.ЦФО;
	
	Если ВалютаДокумента.Пустая() Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли;

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ЗаполнитьПоЗаявкеППУпр();
	//АБС-Е Параметры бюджетирования
	ЭтотОбъект.абс_БюджетнаяСтатья	=Основание.СтатьяОборотов;
	ЭтотОбъект.абс_КВ				=Основание.абс_КВ;
	ЭтотОбъект.абс_ТипКонтрагента	=Основание.абс_ТипКонтрагента;
	ЭтотОбъект.абс_ТипРасхода		=Основание.абс_ТипРасхода;
	
	ЭтотОбъект.абс_ТипСети			=Основание.абс_ТипСети;
	ЭтотОбъект.абс_ТЭО				=Основание.абс_ТЭО;
	ЭтотОбъект.абс_ЦФО				=Основание.ЦФО;
	ЭтотОбъект.абс_ЦФУ				=Основание.абс_ЦФУ;
	//\\АБС-Е
	
	// АБС ВСТАВКА 3300
	ЗапросСтавкиНДС = Новый Запрос();
	
	ЗапросСтавкиНДС.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.СтавкаНДС
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредствОплаты.Ссылка В (&ЗаявкаСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.СтавкаНДС";
	
	ЗапросСтавкиНДС.УстановитьПараметр("ЗаявкаСсылка", РасшифровкаПлатежа.Выгрузить(,"ДокументПланированияПлатежа"));
	ВыборкаСтавкиНДС = ЗапросСтавкиНДС.Выполнить().Выбрать();
	
	Если ВыборкаСтавкиНДС.Количество() = 1 Тогда
		
		ВыборкаСтавкиНДС.Следующий();
		
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			СтрокаРасшифровки.СтавкаНДС = ВыборкаСтавкиНДС.СчетНаОплатуСтавкаНДС;
			
			УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаРасшифровки);
			
		КонецЦикла;
	КонецЕсли;
	// АБС ВСТАВКА 3300 КОНЕЦ
	                     	
	// АБС ВСТАВКА 3103
	Если НЕ Основание.Оплаты.Количество() > 1 Тогда
		ПроставитьДокументыВзаиморасчетовПоДоговорам();
	КонецЕсли;	
	// АБС ВСТАВКА 3103 КОНЕЦ
	
	// АБС ВСТАВКА 5083
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "абс_ЗаполнятьНазначениеПлатежаПоЗРС") Тогда
		
		ЗаполнитьПоЗРС();		
		
	КонецЕсли;	
	// АБС ВСТАВКА 5083 КОНЕЦ
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОснованиюРегл(Основание)
	
	ВидОперации       = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП;
	ВалютаДокумента   = мВалютаРегламентированногоУчета;
	КурсДокумента     = 1;
	КратностьДокумента= 1;
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	
	ТаблицаВыплат = ЗарплатаКВыплатеОрганизацийДополнительный.ПолучитьДанныеДляВыплаты(Основание.Ссылка);
	
	Если ТаблицаВыплат.Количество() = 0 Тогда
		ВызватьИсключение "По текущей ведомости нет сумм к выплате!";
	Иначе	
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание);

		ТаблицаВыплат.Свернуть("Ведомость", "СуммаКВыплате");
		//АБС ВСТАВКА   26.12.2014 14:16:12  Хазеев
		Если ЗначениеЗаполнено(ТаблицаВыплат[0].Ведомость) Тогда
		//АБС ВСТАВКА  КОНЕЦ 
			СтрокаВедомость = ПеречислениеЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость		= ТаблицаВыплат[0].Ведомость;
			СтрокаВедомость.СуммаПлатежа	= ТаблицаВыплат[0].СуммаКВыплате;
			СуммаДокумента					= ТаблицаВыплат[0].СуммаКВыплате;
		//АБС ВСТАВКА   26.12.2014 14:16:12  Хазеев
		КонецЕсли;
		//АБС ВСТАВКА  КОНЕЦ 
		СтрокаПлатеж.СуммаПлатежа		= СуммаДокумента;
		Организация						= Основание.Организация;
		
		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаДокумента Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж)

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура выполняет заполнение суммы документа и суммы взаиморасчетов по регистру расчетов с подотчетными лицами
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ФизЛицо",              ФизЛицо);
	Запрос.УстановитьПараметр("РасчетныйДокумент",    РасчетныйДокументРаботника);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовРаботника);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаДолга
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			,
	|			Организация = &Организация
	|				И ФизЛицо = &ФизЛицо
	|				И РасчетныйДокумент = &РасчетныйДокумент
	|				И Валюта = &ВалютаВзаиморасчетов) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток < 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов, 
		    ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
		    СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		    СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

// Возвращает список статусов отправителя п/п на перечисление в бюджет
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями статуса отправителя
//
Функция ПолучитьСписокСтатусовОтправителя() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("01", "01 - налогоплательщик (плательщик сборов) - юридическое лицо");
	Список.Добавить("02", "02 - налоговый агент");
	Список.Добавить("03", "03 - организация федеральной почтовой связи, оформившая расчетный документ на перечисление в бюджетную систему Российской Федерации платежей, уплачиваемых физическими лицами");
	Список.Добавить("04", "04 - налоговый орган");
	Список.Добавить("05", "05 - территориальные органы Федеральной службы судебных приставов");
	Список.Добавить("06", "06 - участник внешнеэкономической деятельности - юридическое лицо");
	Список.Добавить("07", "07 - таможенный орган");
	Список.Добавить("08", "08 - плательщик иных платежей, осуществляющий перечисление платежей в бюджетную систему Российской Федерации (кроме платежей, администрируемых налоговыми органами)");
	Список.Добавить("09", "09 - налогоплательщик (плательщик сборов) – индивидуальный предприниматель");
	Список.Добавить("10", "10 - налогоплательщик (плательщик сборов) – частный нотариус");
	Список.Добавить("11", "11 - налогоплательщик (плательщик сборов) – адвокат, учредивший адвокатский кабинет");
	Список.Добавить("12", "12 - налогоплательщик (плательщик сборов) – глава крестьянского (фермерского) хозяйства");
	Список.Добавить("13", "13 - налогоплательщик (плательщик сборов) – иное физическое лицо – клиент банка (владелец счета)");
	Список.Добавить("14", "14 - налогоплательщик, производящий выплаты физическим лицам (п.п. 1 п.1 ст. 235 Налогового кодекса Российской Федерации)");
	Список.Добавить("15", "15 - кредитная организация, оформившая расчетный документ на общую сумму на перечисление в бюджетную систему Российской Федерации платежей, уплачиваемых физическими лицами без открытия банковского счета");
	Список.Добавить("16", "16 - участник внешнеэкономической деятельности - физическое лицо");
	Список.Добавить("17", "17 - участник внешнеэкономической деятельности - индивидуальный предприниматель");
	Список.Добавить("18", "18 - плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации возложена обязанность по уплате таможенных платежей");
	Список.Добавить("19", "19 - организации, оформившие расчетный документ на перечисление на счет органа Федерального казначейства денежных средств, удержанных из заработка (дохода) должника - физического лица в счет погашения задолженности по таможенным платежам");
	Список.Добавить("20", "20 - кредитная организация, оформившая расчетный документ по каждому платежу физического лица на перечисление таможенных платежей, уплачиваемых физическими лицами без открытия банковского счета");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокСтатусовОтправителя()

// Возвращает список показателей основания п/п на перечисление в бюджет налогового платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями основания
//
Функция ПолучитьСписокОснованийНалоговогоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ТП", "ТП - платежи текущего года");
	Список.Добавить("ЗД", "ЗД - добровольное погашение задолженности по истекшим налоговым периодам");
	Список.Добавить("БФ","БФ - текущие платежи физических лиц – клиентов банка (владельцев счета), уплачиваемые со своего банковского счета");
	Список.Добавить("ТР", "ТР - погашение задолженности по требованию об уплате налогов (сборов) от налогового органа");
	Список.Добавить("РС", "РС - погашение рассроченной задолженности");
	Список.Добавить("ОТ", "ОТ - погашение отсроченной задолженности");
	Список.Добавить("РТ", "РТ - погашение реструктурируемой задолженности");
	Список.Добавить("ВУ", "ВУ - погашение отсроченной задолженности в связи с введением внешнего управления");
	Список.Добавить("ПР", "ПР - погашение задолженности, приостановленной к взысканию");
	Список.Добавить("АП", "АП - погашение задолженности по акту проверки");
	Список.Добавить("АР", "АР - погашение задолженности по исполнительному документу");
	
	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокОснованийНалоговогоПлатежа()

// Возвращает список показателей основания п/п на перечисление в бюджет таможенного платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями основания
//
Функция ПолучитьСписокОснованийТаможенногоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ДЕ", "ДЕ - таможенная декларация");
	Список.Добавить("ПО", "ПО - таможенный приходный ордер");
	Список.Добавить("КВ", "КВ - постановление-квитанция (при уплате штрафа)");
	Список.Добавить("КТ", "КТ - форма корректировки таможенной стоимости и таможенных платежей");
	Список.Добавить("ИД", "ИД - исполнительный документ");
	Список.Добавить("ИП", "ИП - инкассовое поручение");
	Список.Добавить("ТУ", "ТУ - требование об уплате таможенных платежей");
	Список.Добавить("БД", "БД - документы бухгалтерских служб таможенных органов");
	Список.Добавить("ИН", "ИН - документ инкассации");
	Список.Добавить("КП", "КП - соглашение о взаимодействии при уплате крупными плательщиками суммарных платежей в централизованном порядке");

	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокОснованийТаможенногоПлатежа()

// Возвращает список показателей типа платежа п/п на перечисление в бюджет налогового платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями типа
//
Функция ПолучитьСписокПоказателейТипаНалоговогоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("НС", "НС - уплата налога или сбора");
	Список.Добавить("ПЛ", "ПЛ - уплата платежа");
	Список.Добавить("ГП", "ГП - уплата пошлины");
	Список.Добавить("ВЗ", "ВЗ - уплата взноса");
	Список.Добавить("АВ", "АВ - уплата аванса или предоплата (в том числе декадные платежи)");
	Список.Добавить("ПЕ", "ПЕ - уплата пени");
	Список.Добавить("ПЦ", "ПЦ - уплата процентов");
	Список.Добавить("СА", "СА - налоговые санкции, установленные Налоговым кодексом РФ");
	Список.Добавить("АШ", "АШ - административные штрафы");
	Список.Добавить("ИШ", "ИШ - иные штрафы, установленные соответствующими нормативными актами");
	
	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокПоказателейТипаНалоговогоПлатежа()

// Возвращает список показателей типа платежа п/п на перечисление в бюджет таможенного платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями типа
//
Функция ПолучитьСписокПоказателейТипаТаможенногоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ТП", "ТП - текущий платеж");
	Список.Добавить("ШТ", "ШТ - уплата штрафа");
	Список.Добавить("ЗД", "ЗД - уплата в счет погашения задолженности");
	Список.Добавить("ПЕ", "ПЕ - уплата пени");

	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокПоказателейТипаТаможенногоПлатежа()

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       			, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                       			, "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьДенежныеСредстваКомитента"       , "КонтролироватьДенежныеСредстваКомитента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;

	Иначе	
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("КурсДокумента", КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента", КратностьДокумента);

	ДатаДвижений=?(Оплачено,УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата,ДатаОплаты),Дата);
	СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаДвижений);
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если (Основание <> Неопределено) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание))) Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ДокументОснование  = Основание.Ссылка;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	КонецЕсли;

	СпособЗаполнения = "Не заполнять";
	ВалютаДокумента  = мВалютаРегламентированногоУчета;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();

		ВидОперации  = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;

		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		КонецЕсли;

		Если ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
			СчетОрганизации = Основание.СтруктурнаяЕдиница;
		Иначе
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		Если НЕ СчетОрганизации.Пустая() Тогда
			ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;	
		СтрокаПлатеж.СтавкаНДС  =УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		КонецЕсли;

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		
		
		//АБС+ Тупиков (закомментировано, т.к. документ расчетов подставляться не должен
		//Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		//	
		//	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
		//	
		//КонецЕсли;
		
		Если Основание.Проведен Тогда
			СпособЗаполнения = "По взаиморасчетам";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		СчетОрганизации  = Организация.ОсновнойБанковскийСчет;

		Если ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) И Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=СчетОрганизации.ВалютаДенежныхСредств Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если НЕ СчетОрганизации.Пустая() Тогда
			ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;	

		СтрокаПлатеж.СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику;
		ФизЛицо                       = Основание.ФизЛицо;
		РасчетныйДокументРаботника    = Основание;
		ВалютаВзаиморасчетовРаботника = Основание.ВалютаДокумента;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;	
		
		СпособЗаполнения = "По взаиморасчетам с подотчетным лицом";
		
		СтрокаПлатеж.Проект = Основание.Проект; //АБС-Пр2 10362
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.БюджетнаяОперация") Тогда

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();

		ВидОперации  = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		Контрагент   = Основание.Контрагент;
		#Если Клиент Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		#КонецЕсли
		СтрокаПлатеж = РасшифровкаПлатежа[0];

		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = ВалютаДокумента;
		Иначе
			ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;

		// Получаем курсы валют
		СтруктураГруппаВалют = Новый Структура;
		СтруктураГруппаВалют.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов.Код);
		СтруктураГруппаВалют.Вставить("ВалютаДокумента",      ВалютаДокумента.Код);
		СтруктураГруппаВалют.Вставить("ВалютаОперации",       Основание.ВалютаДокумента.Код);

		СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,Дата);

		КурсДокумента      = СтруктураКурсыВалют.ВалютаДокументаКурс;
		КратностьДокумента = СтруктураКурсыВалют.ВалютаДокументаКратность;

		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсыВалют.ВалютаВзаиморасчетовКурс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсыВалют.ВалютаВзаиморасчетовКратность;
		
		СтрокаПлатеж.Проект=Основание.Проект;		
		Подразделение=Основание.ЦФО;

		КурсОперации      = СтруктураКурсыВалют.ВалютаОперацииКурс;
		КратностьОперации = СтруктураКурсыВалют.ВалютаОперацииКратность;

		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Основание.Сумма,
		                            Основание.ВалютаДокумента, 
		                            ВалютаДокумента,
		                            КурсОперации, КурсДокумента,
		                            КратностьОперации, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента,
		                            ВалютаДокумента, 
		                            ВалютаВзаиморасчетов,
		                            КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                            КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками;

		ФизЛицо                          = Основание.ФизЛицо;
		ДоговорЗайма                     = Основание;
		ВалютаВзаиморасчетовРаботника    = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаЗайма;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
    //АБС ВСТАВКА 36332  11.12.2013 11:06:50  Шамов
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		//\\АБС ВСТАВКА 39137 КОНЕЦ
	    // Start КТТК Ермолов Е.Л.  19.06.2014 000026784
		Если Основание.Оплаты.Количество() > 0 Тогда
			СчетНаОплату = Основание.Оплаты[0].СчетНаОплату;
			Если ЗначениеЗаполнено(СчетНаОплату) И СчетНаОплату.Налог Тогда 
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, СчетНаОплату,
				"ВидПеречисленияВБюджет,СтатусСоставителя,КодБК,КодОКАТО,ПоказательДаты,ПоказательНомера,ПоказательОснования,ПоказательПериода,ПоказательТипа,ПеречислениеВБюджет");
				ПеречислениеВБюджет = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Stop КТТК Ермолов Е.Л.  19.06.2014
		
		СтатьяВыплатаЗП = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Выплата зарплаты", Истина);
		
		Если Основание.РасшифровкаПлатежа.Количество() > 0 Тогда
			СтрокаРасшифровки = Основание.РасшифровкаПлатежа[0]; 
			// Start КТТК Ермолов Е.Л.  11.06.2015 000033272
			//Если СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = СтатьяВыплатаЗП Тогда
			Если Основание.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП Тогда 	
			// Stop КТТК Ермолов Е.Л.  11.06.2015
				//это заявка на перечисление зарплаты
				//АБС ИЗМЕНЕНИЕ 36617  20.12.2013 10:42:17  Шамов
				//ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание);
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, ,"Номер,Дата,Проведен");
				//АБС ИЗМЕНЕНИЕ 36617 КОНЕЦ
				ВидОперации  		= Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП;
				
				Для Каждого СтрокаОплаты Из Основание.Оплаты Цикл
					
					ТаблицаВыплат = ЗарплатаКВыплатеОрганизацийДополнительный.ПолучитьДанныеДляВыплаты(СтрокаОплаты.СчетНаОплату.ДокументОснование);
					
					Если ТаблицаВыплат.Количество() <> 0 Тогда
						
						ТаблицаВыплат.Свернуть("Ведомость", "СуммаКВыплате");
						
						СтрокаВедомость = ПеречислениеЗаработнойПлаты.Добавить();
						СтрокаВедомость.Ведомость						= ТаблицаВыплат[0].Ведомость;
						СтрокаВедомость.СтатьяДвиженияДенежныхСредств 	= СтатьяВыплатаЗП;
						СтрокаВедомость.СуммаПлатежа					= ТаблицаВыплат[0].СуммаКВыплате;
						СтрокаВедомость.ДокументПланированияПлатежа		= Основание;
						СуммаДокумента									= СуммаДокумента + ТаблицаВыплат[0].СуммаКВыплате;
						Организация										= СтрокаОплаты.СчетНаОплату.Организация;
						
						Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаДокумента Тогда
							СчетОрганизации = Организация.ОсновнойБанковскийСчет;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
			// Казаков Е.Л. 22.08.2017  Заявка 77137563 НАЧАЛО	
			ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда 				
				Если НЕ Основание.Проведен Тогда
					Сообщить("Заявка на расходование средств не проведена. Платежное поручение не заполнено!");
					Возврат;
				КонецЕсли;	
			// Казаков Е.Л. 22.08.2017  Заявка 77137563 ОКОНЧАНИЕ
			КонецЕсли;
		КонецЕсли;
	//АБС ВСТАВКА 36332 КОНЕЦ
	
	   //АБС ВСТАВКА 39137  28.03.2014 11:33:04  Стрельцов
		Основание_ТЧОплаты = Основание.Оплаты;
		МассивСтрокСчетовНаОплатуНДС = Новый Массив;
		Для каждого СтрокаОплаты Из Основание_ТЧОплаты Цикл
			ДокСчетНаОплату = СтрокаОплаты.СчетНаОплату;
			Если ЗначениеЗаполнено(ДокСчетНаОплату) Тогда
				СчетНаОплатуСвязанный = абс_СерверныеФункции.НайтиПодчиненныйСчетНаОплату(ДокСчетНаОплату);
				Если СчетНаОплатуСвязанный <> Неопределено И СчетНаОплатуСвязанный.Налог И СчетНаОплатуСвязанный.Проведен Тогда
					МассивСтрокСчетовНаОплатуНДС.Добавить(СтрокаОплаты.НомерСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаСообщения = "";
		Если МассивСтрокСчетовНаОплатуНДС.Количество() = 1 Тогда
			СтрокаСообщения = "По счету, указанного в строке № "+Строка(МассивСтрокСчетовНаОплатуНДС[0])+" табличной части ""Оплаты"" в данной заявке на расходование ДС, требуется создать документ П/П на уплату НДС за нерезидента";
		Иначе
			СтрНомСтрок = "";
			Для а = 0 По МассивСтрокСчетовНаОплатуНДС.ВГраница() Цикл
				СтрНомСтрок = СтрНомСтрок+?(ПустаяСтрока(СтрНомСтрок),"",", ")+МассивСтрокСчетовНаОплатуНДС[а];
			КонецЦикла;
			СтрокаСообщения = "По счетам, указанным в строках № "+СтрНомСтрок+" табличной части ""Оплаты"" в данной заявке на расходование ДС, требуется создать документ П/П на уплату НДС за нерезидента";
		КонецЕсли;
		Если МассивСтрокСчетовНаОплатуНДС.Количество() > 0 Тогда
			#Если Клиент Тогда
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					Предупреждение(СтрокаСообщения);
				#КонецЕсли
				Сообщить(СтрокаСообщения, СтатусСообщения.Внимание);
			#КонецЕсли
		КонецЕсли;
		//\\АБС ВСТАВКА 39137 КОНЕЦ
	КонецЕсли;
	
	ЗаполнитьДокументПоОснованиюУпр(Основание);
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
		
		ШапкаОснования = ЗарплатаКВыплатеОрганизацийДополнительный.ПолучитьДанныеДокумента(Основание);
		
		Если НЕ ШапкаОснования.Проведен Тогда
			ВызватьИсключение "Платежная ведомость не проведена! Заполнение не выполнялось.";
		КонецЕсли;
		
		Если ШапкаОснования.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			ВызватьИсключение "Платежная ведомость оформлена на выплату через кассу! Заполнение не выполнялось.";
		КонецЕсли;
		
		ЗаполнитьДокументПоОснованиюРегл(ШапкаОснования);
		
	КонецЕсли;

	Если СпособЗаполнения = "По заказу" Тогда

		ЗаполнитьПоЗаказуУпр(Основание, СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		
		УправлениеДенежнымиСредствами.ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,-1);
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		
		ПроверкаКурсовВалют(СтрокаПлатеж);
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
		
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда

		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = Основание.СуммаДокумента - Основание.СуммаВознаграждения;
		КонецЕсли;

		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования           = СтруктураКурсаОснования.Курс;
		КратностьОснования      = СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                 КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;

	Если (Основание <> Неопределено) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)))
		И Основание.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда

		Если Основание.ОтражатьВБухгалтерскомУчете Тогда

			Если Основание.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = Основание.СчетУчетаРасчетовСКонтрагентом;
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = Основание.СчетУчетаРасчетовПоАвансам;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Ответственный      = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	ОтраженоВОперУчете = Истина;
	
	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	КонецЕсли;

	ЗаполнениеПоШаблону(Основание);
	//АБС ВСТАВКА №44859 НАЧАЛО «24 июня 2014 г.», Пополитов
	//АБС ВСТАВКА 45237  15.07.2014 11:37:00  Шамов
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	//АБС ВСТАВКА 45237 КОНЕЦ 
 	абс_Юзабилити();
	//АБС ВСТАВКА 45237  15.07.2014 11:37:00  Шамов
	#КонецЕсли
	//АБС ВСТАВКА 45237 КОНЕЦ 
 	//\\АБС ВСТАВКА №44859 КОНЕЦ	
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, Режим);
	КонецЕсли;
	
	// Гущина 2017.03.14 D2016-1103-3058 +++
	Если Статус = Перечисления.абсСтатусыПлатежей.Отказ тогда 
		//Оплачено = Ложь; 
		Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//  Заявку на расход в отказ
		Если ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") или ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеСредств")Тогда
			ЗРС = ЭтотОбъект.ДокументОснование.ПолучитьОбъект();
			ЗРС.Статус = Перечисления.абсСтатусыПлатежей.Отказ;
			ЗРС.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Для каждого Стр_Счет из ЗРС.Оплаты цикл
				Если ЗначениеЗаполнено(Стр_Счет.СчетНаОплату) тогда
					СчетНаОплату_=Стр_Счет.СчетНаОплату.ПолучитьОбъект();
					//СчетНаОплату_ = Документы.абс_СчетНаОплату.СоздатьДокумент();
					//	СчетНаОплату_.СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован;
					Для каждого СтрОплат из СчетНаОплату_.Оплаты цикл
						Если ЗначениеЗаполнено(СтрОплат.Оплата) тогда
							 // сначала в Согласован, но ниже в отказ.
							 //!!! Два раза т.к. при записи счета поменяет статус оплаты.
							 //По ТЗ оплата "отказ", счет "согласован".
							Оплата_=СтрОплат.Оплата.ПолучитьОбъект();
							Оплата_.СтатусОплаты = Перечисления.абсСтатусыСчетов.Согласован; 
							Оплата_.Записать(РежимЗаписиДокумента.ОтменаПроведения);  
							СтрОплат.СтатусОплаты = Оплата_.СтатусОплаты; 
						КонецЕсли;
						//НФС 2018
						Если НЕ ЗначениеЗаполнено(СтрОплат.ttk_ОбъектБюджетирования) Тогда
							СтрОплат.ttk_ОбъектБюджетирования = Справочники.ttk_ОбъектыБюджетирования.НайтиПоРеквизиту("Организация", Организация.Код);
						КонецЕсли;						
					КонецЦикла;	
					СчетНаОплату_.СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован;					
					СчетНаОплату_.Записать();
					
				КонецЕсли;	
				Если ЗначениеЗаполнено(Стр_Счет.Оплата) тогда
					Оплата_=Стр_Счет.Оплата.ПолучитьОбъект();
					Оплата_.СтатусОплаты = Перечисления.абсСтатусыСчетов.Отказ;
					Оплата_.Записать();
					Стр_Счет.Оплата = Оплата_.СтатусОплаты;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
		Возврат;
	КонецЕсли;		
	// Гущина 2017.03.14 D2016-1103-3058 ---

	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	РасчетыВозврат=УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НЕ ОтраженоВОперУчете И НЕ Оплачено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")",Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не совпадают сумма документа и ее расшифровка.",Отказ, Заголовок);
	КонецЕсли;
	
	абс_ПроверятьСчетаВзаиморасчетов 	= ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику И ОтражатьВБухгалтерскомУчете;
	абс_ЕстьОшибкиВСчетахВзаиморасчетов = Ложь;	
       	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			Продолжить;
		КонецЕсли;	
		
		//АБС
		Если Не УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "абс_ПроведениеПлатежаБезСтатьи") Тогда
			ПроверитьЗначение(Платеж.СтатьяДвиженияДенежныхСредств,Отказ, Заголовок,"Статья движения денежных средств");	
		КонецЕсли;
		
		//Заявка 4552
		// АБС ВСТАВКА ИЗМЕНЕНО Фролов 20120311
		// Для пользователей ДЗО не проверяем счета учета взариморасчетов
		Если НЕ ПараметрыСеанса.абс_ПользовательДЗО Тогда
			              			
			Если ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) и ЗначениеЗаполнено(Платеж.СчетУчетаРасчетовСКонтрагентом)  И 
				ЗначениеЗаполнено(Платеж.СчетУчетаРасчетовПоАвансам) И ОтражатьВБухгалтерскомУчете И Оплачено Тогда
				
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Платеж.ДоговорКонтрагента.Владелец, Платеж.ДоговорКонтрагента);
				Если Платеж.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
					Если Платеж.СчетУчетаРасчетовСКонтрагентом <> СчетаУчета.СчетРасчетов или 
						Платеж.СчетУчетаРасчетовПоАвансам <> СчетаУчета.СчетАвансов Тогда
						Сообщить("Счета расчетов/авансов, указанные в документе " +Платеж.СчетУчетаРасчетовСКонтрагентом+"/"+Платеж.СчетУчетаРасчетовПоАвансам+" не совпадают с указанными для договора "+СчетаУчета.СчетРасчетов+"/"+СчетаУчета.СчетАвансов);
						
					КонецЕсли;
				ИначеЕсли Платеж.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
					Если Платеж.СчетУчетаРасчетовСКонтрагентом <> СчетаУчета.СчетРасчетовПокупателя или 
						Платеж.СчетУчетаРасчетовПоАвансам <> СчетаУчета.СчетАвансовПокупателя Тогда
						Сообщить("Счета расчетов/авансов, указанные в документе " +Платеж.СчетУчетаРасчетовСКонтрагентом+"/"+Платеж.СчетУчетаРасчетовПоАвансам+" не совпадают с указанными для договора "+СчетаУчета.СчетРасчетовПокупателя+"/"+СчетаУчета.СчетАвансовПокупателя);
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		//Заявка 4552
		//АБС
		
		Если абс_ПроверятьСчетаВзаиморасчетов Тогда
			
			абс_ЕстьОшибкиВСчетахВзаиморасчетов = абс_ЕстьОшибкиВСчетахВзаиморасчетов ИЛИ 
				НЕ абс_СлужебныеФункции.ПроверитьСчетаРасчетовАвансов(Платеж.СчетУчетаРасчетовСКонтрагентом, Платеж.СчетУчетаРасчетовПоАвансам, "Поставщики", Отказ);	
			
		КонецЕсли;		
		
	КонецЦикла;
		
	Если абс_ЕстьОшибкиВСчетахВзаиморасчетов Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Счета учета расчетов с контрагентами не соответствует счетам учета авасов.", Отказ);
	КонецЕсли;	
       	
	Если Оплачено Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплата(), Отказ, Заголовок);
	КонецЕсли;
	
	Если ОтраженоВОперУчете Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(), Отказ, Заголовок);
	КонецЕсли;
	
	ПолучитьТаблицуПлатежейППУпр();
	
	Если НЕ Отказ Тогда
		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);
	КонецЕсли;
	
	ПроверитьЗаполнениеДокументаРегл(Отказ, Режим, Заголовок);

	СтруктураКурсыВалют = СформироватьСтруктуруКурсыВалютУпр();
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете тогда
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
					СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
					мВалютаРегламентированногоУчета, Истина,Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
	КонецЕсли;
	
	// АБС Фролов для проведения по бюджету
	//запишем движения, т.к. они пригодятся для проведения по бюджету.
	Движения.Хозрасчетный.Записать();
	// АБС Фролов для проведения по бюджету КОНЕЦ	
	//*****АБС Гетц. Для проведения по проектному учету
	Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Записать();
	//*****АБС Гетц.\\
	
	//АБС ВСТАВКА 39137  28.03.2014 11:33:04  Стрельцов
	МассивСообщений = Новый Массив;
	РезультатПоискаНомеровСтрок = абс_СерверныеФункции.НайтиПодчиненныеСчетаНаОплатуИзППИ(Ссылка);
	НайденныеНомераСтрок = РезультатПоискаНомеровСтрок.Выбрать();
	Если НайденныеНомераСтрок.Количество() = 1 Тогда
		НайденныеНомераСтрок.Следующий();
		СтрокаСообщения = "По счету, указанному в строке № "+Строка(НайденныеНомераСтрок.НомерСтрокиЗРДС)+" табличной части ""Оплаты"" в заявке на расходование ДС, указанной в данном документе П/П"+Символы.ПС+
							"требуется создать документ П/П на уплату НДС за нерезидента";
		МассивСообщений.Добавить(СтрокаСообщения);
	Иначе
		Пока НайденныеНомераСтрок.Следующий() Цикл
			СтрокаСообщения = "По счету, указанному в строке № "+Строка(НайденныеНомераСтрок.НомерСтрокиЗРДС)+" табличной части ""Оплаты"" в заявке на расходование ДС, указанной в строке № "+НайденныеНомераСтрок.НомерСтрокиППИ+" данного документа П/П"+Символы.ПС+
							"требуется создать документ П/П на уплату НДС за нерезидента";
			МассивСообщений.Добавить(СтрокаСообщения);
		КонецЦикла;
	КонецЕсли;
		
	Для каждого СтрСообщение Из МассивСообщений Цикл
		#Если Клиент Тогда
			Сообщить(СтрокаСообщения, СтатусСообщения.Внимание);	
		#КонецЕсли
	КонецЦикла;
	//\\АБС ВСТАВКА 39137 КОНЕЦ
	//Исаенко С.П. 09.11.2018 задача 1046
	Если Не Отказ Тогда
		Отказ = ttk_ОбщегоНазначения.ttk_ИспользованиеЗапрещенныхСтатейДДС(ЭтотОбъект);
	КонецЕсли;	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	
	НомерПечать=ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	
	//Крамаренко Д.М.
	//отключено за ненадобностью и непониманием целей
	//Если Прав(НомерПечать,3)="000" Тогда
	//	Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
	//	Отказ=Истина;
	//КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если ВидОперации.Пустая() Тогда 
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбран вид операции!",Отказ);	
	КонецЕсли;	
	// Start КТТК Ермолов Е.Л.  11.01.2015 Реализуем хоть какую-нибудь возможность отключать ненужный обмен с контрагентами
	Если Не мИзменен И ЭтотОбъект.Модифицированность() Тогда
		мИзменен = ЭтотОбъект.Модифицированность();
	КонецЕсли;
	// Stop КТТК Ермолов Е.Л.  11.01.2015	
	
	//+++ #7727346 - Григорьев Денис
	Если ПеречислениеВБюджет И ДополнительныеСвойства.Свойство("ТипПлатежа") Тогда
		ПоказательТипа = ?(ДополнительныеСвойства.ТипПлатежа = Неопределено, "", ДополнительныеСвойства.ТипПлатежа);
	КонецЕсли;
	//--- #7727346 - Гргорьев Денис 	
	
	// Гущина 2017.03.14 D2016-1103-3058 +++
	СтатусСтарый = Ссылка.Статус;
	Если Статус = Перечисления.абсСтатусыПлатежей.Отказ  тогда   
		Если  РольДоступна("ПравоАдминистрирования")  ИЛИ    РольДоступна("ttk_ОтменаППИ") тогда  
			// пользователи с этими ролями могут менять статус на Отказ
		иначе 
			Сообщить("Недостаточно прав для перевода в отказ!");
			Отказ=Истина;
		КонецЕсли;	
		Если  СтатусСтарый = Перечисления.абсСтатусыПлатежей.Оплачен тогда
			Сообщить("Из статуса ""оплачен"" нельзя переводить в отказ!");
			//Статус =  СтатусСтарый;
			Отказ=Истина;
		КонецЕсли;
		//Если Ссылка.Оплачено тогда   Дмитрий сказал убрать!!!
		//	Сообщить("В документе установлен флажок ""Оплачено""!  Нельзя переводить в отказ!");
		//	//Статус =  СтатусСтарый;
		//	Отказ=Истина;
		//КонецЕсли;	
		
	КонецЕсли;	
	Если СтатусСтарый = Перечисления.абсСтатусыПлатежей.Отказ и Оплачено тогда   
			Сообщить("Нельзя установить ""Оплачено"" т.к. документ в статусе ""Отказ""!");
			Отказ=Истина;
    КонецЕсли;	
	// Гущина 2017.03.14 D2016-1103-3058 ---
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//АБС
	Если ЭтотОбъект.РасшифровкаПлатежа.Количество()>0 Тогда
		ЗРС = РасшифровкаПлатежа[0].ДокументПланированияПлатежа;
		Если ЗначениеЗаполнено(ЗРС) И 
			 ТипЗнч(ЗРС) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
			 Если Не ЗРС.абс_ЕстьППИ Тогда
				Об = ЗРС.ПолучитьОбъект();
				Об.ОбменДанными.Загрузка = Истина;
				Об.абс_ЕстьППИ=Истина;
				Об.Записать();
			 КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ
	
	// Start КТТК Ермолов Е.Л.  11.01.2015 Реализуем хоть какую-нибудь возможность отключать ненужный обмен с контрагентами
	Если Не (ЭтотОбъект.Модифицированность() ИЛИ мИзменен) Тогда
		Возврат;
	КонецЕсли;
	// Stop КТТК Ермолов Е.Л.  11.01.2015	
	
	
	//АБС+++ Гончаров 18.04.2013
		
	//АБС ИЗМЕНЕНИЕ 37022  27.12.2013 15:15:48  Шамов
	Если Константы.абс_СинхронизацияВыплатыЗарплаты.Получить() И (абс_ПроверитьППИнаВыплатуЗП() ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП) Тогда
		ТекстСообщения = "Вызов абс_WebServiceСервер из ПриЗаписи ППИ ЗП";
		ЗаписьЖурналаРегистрации("WSСсылки.abs_ISUZK_Viplata_Zarplati", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПлатежноеПоручениеИсходящее, Ссылка, ТекстСообщения);
		
		абс_WebServiceСервер.абс_СинхронизацияВыплатЗППриЗаписи(Ссылка, Отказ);
		абс_ЗаписьПрограммно = Истина;
		
		Если Отказ Тогда
			ТекстСообщения = "Ошибка вызова абс_WebServiceСервер из ПриЗаписи ППИ ЗП";
			ЗаписьЖурналаРегистрации("WSСсылки.abs_ISUZK_Viplata_Zarplati", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПлатежноеПоручениеИсходящее, Ссылка, ТекстСообщения);
		Иначе
			ТекстСообщения = "Успешный вызов абс_WebServiceСервер из ПриЗаписи ППИ ЗП";
			ЗаписьЖурналаРегистрации("WSСсылки.abs_ISUZK_Viplata_Zarplati", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПлатежноеПоручениеИсходящее, Ссылка, ТекстСообщения);
		КонецЕсли;
	КонецЕСли;	
	
	Если Константы.абс_СинхронизацияВыплатыЗарплаты.Получить() И (абс_ПроверитьППИнаРасчетыСБюджетом() И ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога) Тогда
		ТекстСообщения = "Вызов абс_WebServiceСервер из ПриЗаписи ППИ Налог";
		ЗаписьЖурналаРегистрации("WSСсылки.abs_ISUZK_Viplata_Zarplati", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПлатежноеПоручениеИсходящее, Ссылка, ТекстСообщения);
		
		абс_WebServiceСервер.абс_СинхронизацияВыплатНалоговПриЗаписи(Ссылка, Отказ);
		абс_ЗаписьПрограммно = Истина;
		
		Если Отказ Тогда
			ТекстСообщения = "Ошибка вызова абс_WebServiceСервер из ПриЗаписи ППИ Налог";
			ЗаписьЖурналаРегистрации("WSСсылки.abs_ISUZK_Viplata_Zarplati", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПлатежноеПоручениеИсходящее, Ссылка, ТекстСообщения);
		Иначе
			ТекстСообщения = "Успешный вызов абс_WebServiceСервер из ПриЗаписи ППИ Налог";
			ЗаписьЖурналаРегистрации("WSСсылки.abs_ISUZK_Viplata_Zarplati", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПлатежноеПоручениеИсходящее, Ссылка, ТекстСообщения);
		КонецЕсли;
	КонецЕСли;
	
	Если Константы.абс_СинхронизацияВыплатыЗарплаты.Получить() И (абс_ПроверитьППИнаРасчетыПоНДФЛ() И (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств)) Тогда
		ТекстСообщения = "Вызов абс_WebServiceСервер из ПриЗаписи ППИ НДФЛ";
		ЗаписьЖурналаРегистрации("WSСсылки.abs_ISUZK_Viplata_Zarplati", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПлатежноеПоручениеИсходящее, Ссылка, ТекстСообщения);
		
		абс_WebServiceСервер.абс_СинхронизацияВыплатНДФЛПриЗаписи(Ссылка, Отказ);
		абс_ЗаписьПрограммно = Истина;
		
		Если Отказ Тогда
			ТекстСообщения = "Ошибка вызова абс_WebServiceСервер из ПриЗаписи ППИ НДФЛ";
			ЗаписьЖурналаРегистрации("WSСсылки.abs_ISUZK_Viplata_Zarplati", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПлатежноеПоручениеИсходящее, Ссылка, ТекстСообщения);
		Иначе
			ТекстСообщения = "Успешный вызов абс_WebServiceСервер из ПриЗаписи ППИ НДФЛ";
			ЗаписьЖурналаРегистрации("WSСсылки.abs_ISUZK_Viplata_Zarplati", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПлатежноеПоручениеИсходящее, Ссылка, ТекстСообщения);
		КонецЕсли;
	КонецЕСли;
	//АБС ИЗМЕНЕНИЕ 37022 КОНЕЦ
	
	//\\АБС--- Гончаров 18.04.2013
		
КонецПроцедуры

//АБС+++ Гончаров 18.04.2013
Функция абс_ПроверитьППИнаРасчетыПоНДФЛ()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	""ППИ"" КАК ТипОплаты,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Номер КАК НомерР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата КАК ДатаР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КодБК
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.абс_КБКДляРасчетовПоНДФЛ.СрезПоследних(&Дата, ) КАК абс_КБКДляРасчетовПоНДФЛСрезПоследних
		|		ПО ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КодБК = абс_КБКДляРасчетовПоНДФЛСрезПоследних.КБК
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = &СтатьяДвиженияДенежныхСредств"; 
		
		// нач ВСТАВКА Нарыжный 02.10.2013 32471
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	""ППИ"" КАК ТипОплаты,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Номер КАК НомерР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата КАК ДатаР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КодБК
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.абс_КБКДляРасчетовПоНДФЛ.СрезПоследних(&Дата, ) КАК абс_КБКДляРасчетовПоНДФЛСрезПоследних
		|		ПО ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КодБК = абс_КБКДляРасчетовПоНДФЛСрезПоследних.КБК
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = &СтатьяДвиженияДенежныхСредств
		|	И абс_КБКДляРасчетовПоНДФЛСрезПоследних.ИспользуетсяДляНДФЛ"; 
		
		// кон ВСТАВКА Нарыжный 02.10.2013 32471
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", Константы.абс_СтатьяДДСРасчетыПоНДФЛ.Получить());
	Результат = Запрос.Выполнить();  
	ВыборкаДетальныеЗаписи = Результат.Выбрать();   
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция абс_ПроверитьППИнаРасчетыСБюджетом()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	""ППИ"" КАК ТипОплаты,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Номер КАК НомерР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата КАК ДатаР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КодБК
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога)
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = &СтатьяДвиженияДенежныхСредств";
	// нач ВСТАВКА Нарыжный 02.10.2013 32471	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	""ППИ"" КАК ТипОплаты,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Номер КАК НомерР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата КАК ДатаР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КодБК
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.абс_КБКДляРасчетовПоНДФЛ.СрезПоследних(&Дата, ) КАК абс_КБКДляРасчетовПоНДФЛСрезПоследних
		|		ПО ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.КодБК = абс_КБКДляРасчетовПоНДФЛСрезПоследних.КБК
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога)
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = &СтатьяДвиженияДенежныхСредств
		|	И абс_КБКДляРасчетовПоНДФЛСрезПоследних.ИспользуетсяДляВБФ
		|	И абс_КБКДляРасчетовПоНДФЛСрезПоследних.ПлатежВБФПереноситсяВИСУЗК";
		Запрос.УстановитьПараметр("Дата", Дата);
	// кон ВСТАВКА Нарыжный 02.10.2013 32471	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", Константы.абс_СтатьяДДСРасчетыСВнебюджетнымиФондами.Получить());
	Результат = Запрос.Выполнить();  
	ВыборкаДетальныеЗаписи = Результат.Выбрать();   
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция абс_ПроверитьППИнаВыплатуЗП()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование КАК Ведомость,
		|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.Дата КАК Дата,
		|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование.Номер КАК Номер,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено,
		|	"""" КАК ФизЛицо,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	""ППИ"" КАК ТипОплаты,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Номер КАК НомерР,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата КАК ДатаР
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
		|		ПО ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа = ЗаявкаНаРасходованиеСредствОплаты.Ссылка
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
		|	И ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДокументОснование ССЫЛКА Документ.ЗарплатаКВыплатеОрганизаций"; 
	Запрос.УстановитьПараметр("Ссылка", Ссылка);  
	Результат = Запрос.Выполнить();  
	ВыборкаДетальныеЗаписи = Результат.Выбрать();   
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	Возврат Ложь;
КонецФункции	
//\\АБС--- Гончаров 18.04.2013

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЧастичнаяОплата Тогда
		Сообщить("По документу "+ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка)+" уже прошла частичная оплата.
		|Перед отменой проведения документа необходимо отменить проведение платежных ордеров.");
		Отказ=Истина;
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	ЧастичнаяОплата   = Ложь;
	// Start КТТК Ермолов Е.Л.  16.11.2015 000035239
	// {{ТТК Лапин А. Заявка № 04.03.2016 начало
	// {{ТТК Лапин А. Заявка №7717399, 7723597, 7723264  04.03.2016 начало 
	Если НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП 
		И НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
		И НЕ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств 
				И ЭтотОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ТД239")) // выплата алиментов
		И НЕ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств 
				И ЭтотОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ТД107")) // Отправлено в филиалы/КТТ
		И НЕ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств 
				И ЭтотОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ТД108")) // Прочие расходы по текущей деятельности
			Тогда
	
		ЭтотОбъект.РасшифровкаПлатежа.Очистить();
		ЭтотОбъект.ПеречислениеЗаработнойПлаты.Очистить();
		ЭтотОбъект.РасшифровкаПлатежаПодотчетникам.Очистить();
		ЭтотОбъект.абс_СчетаФактуры.Очистить();
		ЭтотОбъект.Работники.Очистить();
		
		ТекСтатья = ОбъектКопирования.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		ЭтотОбъект.СтатьяДвиженияДенежныхСредств = ТекСтатья;
		
		НовСтрока = ЭтотОбъект.РасшифровкаПлатежа.Добавить();
		НовСтрока.СтатьяДвиженияДенежныхСредств = ТекСтатья;
		
		СуммаДокумента		= 0;
		СуммаВзаиморасчетов = 0;
		СуммаПлатежа		= 0;	
		СуммаНДС			= 0;
	
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
	КонецЕсли;
	// }}ТТК Лапин А. Заявка № 7717399, 7723597, 7723264 04.03.2016 окончание
	// Stop КТТК Ермолов Е.Л.  16.11.2015	
	
	// {{ТТК Лапин А. Заявка № 7737686 04.07.2016 начало
	ОбособленноеПодразделение = Справочники.абс_ОбособленныеПодразделения.ПустаяСсылка();
	КПП = "";
	// }}ТТК Лапин А. Заявка № 7737686 04.07.2016 окончание
	
КонецПроцедуры

// АБС ВСТАВКА 3301
Функция ПолучитьТипБулево()
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Тип("Булево"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Процедура ПроставитьДокументыВзаиморасчетовПоДоговорам(ВызваноИнтеррактивно = Ложь) Экспорт
	
	ЕстьДоговорыПоДокументам = Ложь;
	
	ТабРасшифровки = РасшифровкаПлатежа.Выгрузить(,"НомерСтроки, ДоговорКонтрагента, ДокументПланированияПлатежа");
	
	ТабРасшифровки.Колонки.Добавить("ВестиПоДокументамРасчетовСКонтрагентом", ПолучитьТипБулево());
	
	Для Каждого СтрокаРасшифровки Из ТабРасшифровки Цикл		
		СтрокаРасшифровки.ВестиПоДокументамРасчетовСКонтрагентом = СтрокаРасшифровки.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
		ЕстьДоговорыПоДокументам = ЕстьДоговорыПоДокументам ИЛИ СтрокаРасшифровки.ВестиПоДокументамРасчетовСКонтрагентом;
	КонецЦикла;	
	
	Если НЕ ЕстьДоговорыПоДокументам Тогда
		Если ВызваноИнтеррактивно Тогда
			Сообщить("По выбранным договорам не ведется учет по документам расчетов.");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка,
	//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.НомерСтроки,
	//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента,
	//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа
	//|ПОМЕСТИТЬ ВТ_РасшифровкаППИ
	//|ИЗ
	//|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	//|ГДЕ
	//|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	//|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДоговорКонтрагента,
	//|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.НомерВходящегоСчета,
	//|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДатаВходящегоСчета,
	//|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату,
	//|	ЗаявкаНаРасходованиеСредствОплаты.Ссылка КАК ЗРС,
	//|	ВТ_РасшифровкаППИ.Ссылка КАК ППИ,
	//|	ВТ_РасшифровкаППИ.НомерСтроки КАК НомерСтрокиППИ
	//|ПОМЕСТИТЬ ВТ_ВходящиеСчета
	//|ИЗ
	//|	ВТ_РасшифровкаППИ КАК ВТ_РасшифровкаППИ
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
	//|		ПО (ВТ_РасшифровкаППИ.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом)
	//|			И ВТ_РасшифровкаППИ.ДоговорКонтрагента = ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДоговорКонтрагента
	//|			И ВТ_РасшифровкаППИ.ДокументПланированияПлатежа = ЗаявкаНаРасходованиеСредствОплаты.Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_ВходящиеСчета.ППИ,
	//|	ПоступлениеТоваровУслуг.Ссылка КАК ПТУ,
	//|	ВТ_ВходящиеСчета.НомерСтрокиППИ,
	//|	ВТ_ВходящиеСчета.СчетНаОплату,
	//|	ВТ_ВходящиеСчета.СчетНаОплатуНомерВходящегоСчета,
	//|	ВТ_ВходящиеСчета.СчетНаОплатуДатаВходящегоСчета
	//|ИЗ
	//|	ВТ_ВходящиеСчета КАК ВТ_ВходящиеСчета
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//|		ПО ВТ_ВходящиеСчета.СчетНаОплату.ЗакупочныйЗаказ = ПоступлениеТоваровУслуг.абс_ЗакупочныйЗаказ
	//|			И ВТ_ВходящиеСчета.СчетНаОплату.ДоговорКонтрагента = ПоступлениеТоваровУслуг.ДоговорКонтрагента
	//|			И ВТ_ВходящиеСчета.СчетНаОплатуНомерВходящегоСчета = ПоступлениеТоваровУслуг.НомерВходящегоДокумента";
	//
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ППИСсылка КАК Ссылка,
	|	Табрасшифровки.НомерСтроки КАК НомерСтроки,
	|	Табрасшифровки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Табрасшифровки.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
	|	Табрасшифровки.ВестиПоДокументамРасчетовСКонтрагентом КАК ВестиПоДокументамРасчетовСКонтрагентом
	|ПОМЕСТИТЬ ВТ_расшифровкаППИ
	|ИЗ
	|	&РасшифровкаППИ КАК Табрасшифровки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДоговорКонтрагента,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.НомерВходящегоСчета,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДатаВходящегоСчета,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату,
	|	ЗаявкаНаРасходованиеСредствОплаты.Ссылка КАК ЗРС,
	|	ВТ_РасшифровкаППИ.Ссылка КАК ППИ,
	|	ВТ_РасшифровкаППИ.НомерСтроки КАК НомерСтрокиППИ
	|ПОМЕСТИТЬ ВТ_ВходящиеСчета
	|ИЗ
	|	ВТ_расшифровкаППИ КАК ВТ_РасшифровкаППИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
	|		ПО (ВТ_РасшифровкаППИ.ВестиПоДокументамРасчетовСКонтрагентом)
	|			И ВТ_РасшифровкаППИ.ДоговорКонтрагента = ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДоговорКонтрагента
	|			И ВТ_РасшифровкаППИ.ДокументПланированияПлатежа = ЗаявкаНаРасходованиеСредствОплаты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВходящиеСчета.ППИ,
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПТУ,
	|	ВТ_ВходящиеСчета.НомерСтрокиППИ,
	|	ВТ_ВходящиеСчета.СчетНаОплату,
	|	ВТ_ВходящиеСчета.СчетНаОплатуНомерВходящегоСчета,
	|	ВТ_ВходящиеСчета.СчетНаОплатуДатаВходящегоСчета,
	|	ВТ_ВходящиеСчета.ЗРС
	|ИЗ
	|	ВТ_ВходящиеСчета КАК ВТ_ВходящиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ВТ_ВходящиеСчета.СчетНаОплату.ЗакупочныйЗаказ = ПоступлениеТоваровУслуг.абс_ЗакупочныйЗаказ
	|			И ВТ_ВходящиеСчета.СчетНаОплату.ДоговорКонтрагента = ПоступлениеТоваровУслуг.ДоговорКонтрагента
	|			И ВТ_ВходящиеСчета.СчетНаОплатуНомерВходящегоСчета = ПоступлениеТоваровУслуг.НомерВходящегоДокумента";
	
	Запрос.УстановитьПараметр("ППИСсылка", Ссылка);
	Запрос.УстановитьПараметр("РасшифровкаППИ", ТабРасшифровки);
	
	ТабЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтрокиПоДокументам = ТабРасшифровки.НайтиСтроки(Новый Структура("ВестиПоДокументамРасчетовСКонтрагентом", Истина));
	
	Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
		
		Если НЕ СтрокаРасшифровки.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			Продолжить;
		КонецЕсли;
				
		СтрокиЗапроса = ТабЗапроса.НайтиСтроки(Новый Структура("НомерСтрокиППИ", СтрокаРасшифровки.НомерСтроки));
		
		Если СтрокиЗапроса.Количество() > 1 Тогда
			ТекстСообщения = "По строке платежного поручения №" + СтрокаРасшифровки.НомерСтроки + " найдено " + СтрокиЗапроса.Количество() + " документов поставки:
			|";
			
			Для Каждого СтрокаЗапроса Из СтрокиЗапроса Цикл
				ТекстСообщения = ТекстСообщения + СтрокаЗапроса.ПТУ + " входящий номер: " + СтрокаЗапроса.СчетНаОплатуНомерВходящегоСчета + "
				|";
			КонецЦикла;
			
			ТекстСообщения = ТекстСообщения + "Необходимо разбить указанную строчку расшифровки на " + СтрокиЗапроса.Количество() + " и проставить указанные документы расчетов вручную.";
			ТектсСообщения = ТекстСообщения + Символы.ПС + "По умолчанию проставлен первый документ расчетов.";
			
			ОбщегоНазначения.СообщитьИнформациюПользователю(ТекстСообщения);
			
		КонецЕсли;	
		
		Если НЕ СтрокиЗапроса.Количество() = 1 Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДокументРасчетовСКонтрагентом) Тогда
				СтрокаРасшифровки.ДокументРасчетовСКонтрагентом = СтрокиЗапроса[0].ПТУ;
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;	
	
КонецПроцедуры	
// АБС ВСТАВКА 3301 КОНЕЦ

// АБС ВСТАВКА 5083
Процедура ЗаполнитьПоЗРС()
	
	Если РасшифровкаПлатежа.Количество() > 0 Тогда 
		
		НазначениеПлатежа = РасшифровкаПлатежа[0].ДокументПланированияПлатежа.Описание;
		
		СтавкаНДСДокумента = РасшифровкаПлатежа[0].СтавкаНДС 
	КонецЕсли;
		
КонецПроцедуры
// АБС ВСТАВКА 5083 КОНЕЦ

//АБС ВСТАВКА №5011 НАЧАЛО
Процедура ЗаполнениеПоШаблону(Основание, ИзДокумента = Ложь) Экспорт
	
	НомерСчета = " ";
	ДатаСчета  = " ";
	ДатаСчета  = " ";
	врНазначение = "";
	ДоговорИзЗаявкиНаРасходованиеСредств = Ложь;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
			
			запрос = новый запрос;
			запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	абс_СчетНаОплатуОплаты.Ссылка,
			               |	абс_СчетНаОплатуОплаты.Ссылка.ДатаВходящегоСчета,
			               |	абс_СчетНаОплатуОплаты.Ссылка.НомерВходящегоСчета,
			               |	абс_СчетНаОплатуОплаты.Ссылка.НазначениеПлатежа
			               |ИЗ
			               |	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
			               |ГДЕ
			               |	абс_СчетНаОплатуОплаты.ЗРС = &ЗРС
			               |	И (НЕ абс_СчетНаОплатуОплаты.Ссылка.ПометкаУдаления)
			               |	И абс_СчетНаОплатуОплаты.Ссылка.Организация = &Организация
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	абс_СчетНаОплатуОплаты.Ссылка,
			               |	абс_СчетНаОплатуОплаты.Ссылка.ДатаВходящегоСчета,
			               |	абс_СчетНаОплатуОплаты.Ссылка.НомерВходящегоСчета,
			               |	абс_СчетНаОплатуОплаты.Ссылка.НазначениеПлатежа
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	абс_СчетНаОплатуОплаты.Ссылка.Дата УБЫВ";
						   
			запрос.УстановитьПараметр("Организация",Организация);
			запрос.УстановитьПараметр("ЗРС",Основание);
			Результ = запрос.Выполнить().Выбрать();
			Если Результ.Следующий() Тогда
				НомерСчета = Результ.НомерВходящегоСчета;
				ДатаСчета  = Результ.ДатаВходящегоСчета; 
				врНазначение = Результ.НазначениеПлатежа; 
			КонецЕсли;			
			
			Если Основание.РасшифровкаПлатежа.Количество() > 0 и Не ИзДокумента Тогда
				ДоговорИзЗаявкиНаРасходованиеСредств = Истина;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ДоговорИзЗаявкиНаРасходованиеСредств = Истина Тогда
		врДоговор = Основание.РасшифровкаПлатежа[0].ДоговорКонтрагента; 			
	Иначе	                   			
		врДоговор = ЭтотОбъект.ДоговорКонтрагента;
	КонецЕсли;		
	
	НазначениеПлатежа = "Оплата по счету "+НомерСчета+" от "+Формат(ДатаСчета,"ДФ=dd.MM.yyyy")+" за "+врНазначение+" по договору "+врДоговор+ " ";

	ТекстНазначение = НазначениеПлатежа;
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет  ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		Если Найти(НазначениеПлатежа,"Налоги начислены и перечислены. НДС не облагается")=0 Тогда
		НазначениеПлатежа = НазначениеПлатежа+Символы.ПС+"Налоги начислены и перечислены. НДС не облагается";
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	//Возврат;
	АдресСуммы = Найти(НазначениеПлатежа, "Сумма");
	
	Если АдресСуммы > 0 Тогда
		ТекстНазначение = Лев(НазначениеПлатежа, АдресСуммы - 2);
	Иначе
		ТекстНазначение = НазначениеПлатежа;
	КонецЕсли;

	АдресВтчНДС = Найти(ТекстНазначение, "В т.ч. НДС");
	
	Если АдресВтчНДС > 0 Тогда
		ТекстНазначение = Лев(ТекстНазначение, АдресВтчНДС - 3);
	Иначе
		ТекстНазначение = ТекстНазначение;
	КонецЕсли;
	
	АдресБезНДС = Найти(ТекстНазначение, "Без налога (НДС)");
	
	Если АдресБезНДС > 0 Тогда
		ТекстНазначение = Лев(ТекстНазначение, АдресБезНДС - 3);
	Иначе
		ТекстНазначение = ТекстНазначение;
	КонецЕсли;
	
	Если СчетОрганизации.ВыводитьСумму Тогда
		ТекстСумма = "Сумма " + Формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	Иначе
		ТекстСумма ="";
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);	
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ТекстНДС = "";
	
		ТабНДС=РасшифровкаПлатежа.Выгрузить();
		ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		Для Каждого СтрокаНДС ИЗ ТабНДС Цикл
			ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
			Если НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС) ИЛИ СтрокаНДС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ТекстНДС = ТекстНДС + "Без налога (НДС)";
			Иначе
				ТекстНДС = ТекстНДС + "НДС(" + СтрокаНДС.СтавкаНДС + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
			КонецЕсли;
		
		КонецЦикла;
		
		Если ТабНДС.Итог("СуммаНДС") > 0 Тогда
			ТекстНДС = "В т.ч. " + ТекстНДС;
		КонецЕсли;
		//Сторчевой А.Н. 20.04.2017 77101234 {                                   
		//ТекстСумма = ТекстСумма + Символы.ПС + ТекстНДС;
		ТекстСумма = ТекстСумма + ТекстНДС;
		// } Сторчевой А.Н. 20.04.2017 77101234
		
	КонецЕсли;
	
	НазначениеПлатежа = ТекстНазначение + ТекстСумма;
	ЗаполнитьКомментарийПоНазначениюПлатежа();//АБС-Пр2 9265
	
КонецПроцедуры	
//\\АБС ВСТАВКА №5011 КОНЕЦ


//АБС Чалавиев 19.03.2014 35987
Процедура ЗаполнениеПоСчету(Основание) Экспорт
	
	Если ЗначениеЗаполнено(Основание) Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
			
			запрос = новый запрос;
			запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	абс_СчетНаОплатуОплаты.Ссылка,
			               |	абс_СчетНаОплатуОплаты.Ссылка.ДатаВходящегоСчета,
			               |	абс_СчетНаОплатуОплаты.Ссылка.НомерВходящегоСчета,
			               |	абс_СчетНаОплатуОплаты.Ссылка.НазначениеПлатежа
			               |ИЗ
			               |	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
			               |ГДЕ
			               |	абс_СчетНаОплатуОплаты.ЗРС = &ЗРС
			               |	И (НЕ абс_СчетНаОплатуОплаты.Ссылка.ПометкаУдаления)
			               |	И абс_СчетНаОплатуОплаты.Ссылка.Организация = &Организация
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	абс_СчетНаОплатуОплаты.Ссылка,
			               |	абс_СчетНаОплатуОплаты.Ссылка.ДатаВходящегоСчета,
			               |	абс_СчетНаОплатуОплаты.Ссылка.НомерВходящегоСчета,
			               |	абс_СчетНаОплатуОплаты.Ссылка.НазначениеПлатежа
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	абс_СчетНаОплатуОплаты.Ссылка.Дата УБЫВ";
						   
			запрос.УстановитьПараметр("Организация",Организация);
			запрос.УстановитьПараметр("ЗРС",Основание);
			Результ = запрос.Выполнить().Выбрать();
			Если Результ.Следующий() Тогда
				НазначениеПлатежа = Результ.НазначениеПлатежа; 
			КонецЕсли;			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗаполнитьКомментарийПоНазначениюПлатежа();//АБС-Пр2 9265
	
КонецПроцедуры	
//АБС Чалавиев 19.03.2014 35987

Процедура ЗаполнитьКомментарийПоНазначениюПлатежа() Экспорт //АБС-Пр2 9265
	
	Если ПараметрыСеанса.абс_ПользовательДЗО И (СокрЛП(Комментарий) = "" ИЛИ СокрЛП(Комментарий) = "Оплата по счету   от   за  по договору" ИЛИ Организация.Префикс = "MUV") Тогда	// КТТК Ермолов Е.Л.  09.02.2015 000029252	
		Комментарий = СокрЛП(СтрЗаменить(НазначениеПлатежа, Символы.ПС, " "));		
	КонецЕсли;
	
КонецПроцедуры

//АБС ВСТАВКА 35020 16.11.2013 10:08:43  Мачихина
// Возвращает признак ведения в информационной базе учета по статьям ДДС
//
Функция ЕстьУчетПоСтатьямДДС() Экспорт
	
	Возврат НЕ (ПланыСчетов.Хозрасчетный.Касса.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") = Неопределено);
	
КонецФункции //ЕстьУчетПоСтатьямДДС()
//АБС ВСТАВКА 35020 КОНЕЦ

//АБС ВСТАВКА №44859 НАЧАЛО «24 июня 2014 г.», Пополитов
Процедура абс_Юзабилити() Экспорт 
	
	//АБС ВСТАВКА 45237  15.07.2014 11:37:00  Шамов
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	//АБС ВСТАВКА 45237 КОНЕЦ 
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
	Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
	Если ЗначениеЗаполнено(ДокументОснование) 
		и ТипЗнч(ДокументОснование)= Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
		и АвтоЗначенияРеквизитов.Свойство("КПППлательщика")
		и Не ЗначениеЗаполнено(АвтоЗначенияРеквизитов.КПППлательщика) Тогда
			АвтоЗначенияРеквизитов.КПППлательщика = ДокументОснование.Организация.КПП; 					
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОснование) 
		и ТипЗнч(ДокументОснование)= Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
		и АвтоЗначенияРеквизитов.Свойство("КПППолучателя")
		и Не ЗначениеЗаполнено(АвтоЗначенияРеквизитов.КПППолучателя) Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			ВладелецСчетаПолучателя = ДокументОснование.Организация;
		Иначе
			ВладелецСчетаПолучателя = ДокументОснование.Контрагент;
		КонецЕсли;		
		
			АвтоЗначенияРеквизитов.КПППолучателя = ВладелецСчетаПолучателя.КПП; 					
		КонецЕсли;
		
		
	// {{ТТК Сладков А. Заявка № 7737686  30.06.2016 начало
	Если ПеречислениеВБюджет = Истина Тогда
		АвтоЗначенияРеквизитов.КПППлательщика = КПП;
	КонецЕсли;
	// }}ТТК Сладков А. Заявка № 7737686  30.06.2016 окончание

	ЗаполнитьЗначенияСвойств(ЭтотОбъект,АвтоЗначенияРеквизитов);	
	//АБС ВСТАВКА 45237  15.07.2014 11:37:00  Шамов
	#КонецЕсли
	//АБС ВСТАВКА 45237 КОНЕЦ 

КонецПроцедуры	
//\\АБС ВСТАВКА №44859 КОНЕЦ 

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные);

//АБС+++ Гончаров 14.06.2013
абс_ЗаписьПрограммно = Ложь;
//\\АБС--- Гончаров 14.06.2013

//АБС ВСТАВКА 35020 16.11.2013 10:08:43  Мачихина
ЕстьУчетПоСтатьямДДС = УправлениеДенежнымиСредствами.ЕстьУчетПоСтатьямДДС();
//АБС ВСТАВКА 35020 КОНЕЦ
мИзменен = Ложь;
