Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт; 
// Хранит список статусов в порядке их следования
Перем мСписокСтатусов Экспорт;


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		//ДанныеЗаполнения = Документы.ЗаявкаНаРасходованиеСредств.НайтиПоНомеру();
		Организация = ДанныеЗаполнения.Организация;
		Валюта = ДанныеЗаполнения.ВалютаДокумента;
		ВалютнаяСумма = ДанныеЗаполнения.СуммаДокумента;
		КурсДокумента = ДанныеЗаполнения.КурсДокумента;
		КратностьДокумента = ДанныеЗаполнения.КратностьДокумента;
		СтруктураКурсаРеглВалюта = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
		КурсРегл        = СтруктураКурсаРеглВалюта.Курс;
		КратностьРегл   = СтруктураКурсаРеглВалюта.Кратность;
		СуммаДокумента      = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ВалютнаяСумма, Валюта, мВалютаРегламентированногоУчета, КурсДокумента,
		КурсРегл, КратностьДокумента, КратностьРегл);
		
		Контрагент = ДанныеЗаполнения.Контрагент;
		НазваниеЦФО = СокрЛП(ДанныеЗаполнения.ЦФО.Наименование);
		ОснованиеПлатежа = ДанныеЗаполнения.Описание;
		Для Каждого СтрокаПлатеж Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
			НовСтрока = СоставПлатежей.Добавить();
			НовСтрока.Валюта = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			НовСтрока.ВалютнаяСумма = СтрокаПлатеж.СуммаВзаиморасчетов;
			НовСтрока.Сумма = СтрокаПлатеж.СуммаПлатежа;
			НовСтрока.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
			НовСтрока.ДатаПлатежа = ДанныеЗаполнения.ДатаРасхода;
			НовСтрока.ЗакупочныйЗаказ = ДанныеЗаполнения.ЗакупочныйЗаказ;
			НовСтрока.ЗаявкаНаОплату = ДанныеЗаполнения;
			НовСтрока.КурсВзаиморасчетов = СтрокаПлатеж.КурсВзаиморасчетов;
			НовСтрока.КратностьВзаиморасчетов = СтрокаПлатеж.КратностьВзаиморасчетов;
		КонецЦикла;
	КонецЕсли;
	глТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ТипЗнч(Контрагент) = Тип("Строка")  Тогда
		СоставПлатежей.Очистить();
		НоваяСтрока = СоставПлатежей.Добавить();
		НоваяСтрока.СуммаПлатежа = СуммаПлатежа;
		НоваяСтрока.ВалютнаяСумма = ВалютнаяСумма;
		НоваяСтрока.Курс = Курс;
		Новаястрока.Валюта = Валюта;
	КонецЕсли;	
	
	СуммаПлатежа = СоставПлатежей.Итог("СуммаПлатежа");
	ВалютнаяСумма = СоставПлатежей.Итог("ВалютнаяСумма");
	
	// Обновим статусы оплат по платежу
	СтатусОплат = Неопределено;
	
	 
	
	Если    СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Подготовка
		ИЛИ СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Разутвержден Тогда
		СтатусОплат = Перечисления.абсСтатусыСчетов.Исполнение;
	ИначеЕсли СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Утвержден Тогда
		СтатусОплат = Перечисления.абсСтатусыСчетов.Утвержден;
	КонецЕсли;
	
	Если НЕ СтатусОплат = Неопределено Тогда
		ИндексСтатусаОплат = мСписокСтатусов.Найти(СтатусОплат);
		Для Каждого СтрокаПлатежа Из СоставПлатежей Цикл
			ИндексСтатусаПлатежа =  мСписокСтатусов.Найти(СтрокаПлатежа.Оплата.СтатусОплаты);
			Если ИндексСтатусаПлатежа<=ИндексСтатусаОплат Тогда
			Если НЕ СтрокаПлатежа.Оплата.СтатусОплаты = СтатусОплат Тогда
				абс_УправлениеЗакупками.ИзменитьСтатусОплатыСчета(СтрокаПлатежа.Оплата, СтатусОплат);
			КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//Обработка наименования ПП
	Если Не ЗначениеЗаполнено(ЭтотОбъект.НаименованиеКонтрагента) И ЗначениеЗаполнено(ЭтотОбъект.Контрагент) 
		И ТипЗнч(Контрагент)=Тип("СправочникСсылка.Контрагенты") Тогда
		НаименованиеКонтрагента = Контрагент.абс_НаименованиеПП;
		
	КонецЕсли;
	
	//
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр абс_ПланПлатежей 
	Движения.абс_ПланПлатежей.Записывать = Истина;
	Движения.абс_ПланПлатежей.Очистить();
	Движение = Движения.абс_ПланПлатежей.Добавить();
	Движение.Период = Дата;
	Движение.ЦФО = ЦФО;
	Движение.СтатьяОборотов = БюджетнаяСтатья;
	Движение.Контрагент = Контрагент;
	Движение.абс_ТипКонтрагента = ТипКонтрагента;
	Движение.абс_ЦФУ = ЦФУ;
	Движение.абс_ТипСети = ТипСети;
	Движение.абс_КВ = КВ;
	Движение.абс_ТЭО = КВ;
	Движение.абс_ТипРасхода = ТипРасхода;
	Движение.Организация = Организация;
	Движение.ВнеПлана = ВнеПлана;
	Движение.НомерНедели = НомерЖурнала;
	Движение.НазначениеПлатежа = НазначениеПлатежа;
	Движение.Валюта = Валюта;
	Движение.ВалютнаяСумма = ВалютнаяСумма;
	Движение.Сумма = СуммаПлатежа;
	Если СоставПлатежей.Количество()>0 Тогда
		
		ДокСчет = СоставПлатежей[0].Счет;
		Если ЗначениеЗаполнено(ДокСчет) Тогда
			
			Движение.СтатьяДвиженияДенежныхСредств = ДокСчет.СтатьяДвиженияДенежныхСредств;
			Если Не ЗначениеЗаполнено(Движение.абс_ТипКонтрагента) И 
				ЗначениеЗаполнено(ДокСчет.ТипКонтрагента) Тогда
				Движение.абс_ТипКонтрагента = ДокСчет.ТипКонтрагента;
				
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(Движение.абс_КВ) И 
				ЗначениеЗаполнено(ДокСчет.КВ) Тогда
				Движение.абс_КВ = ДокСчет.КВ;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Движение.абс_ТипРасхода) И 
				ЗначениеЗаполнено(ДокСчет.ТипРасхода) Тогда
				Движение.абс_ТипРасхода = ДокСчет.ТипРасхода;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Движение.абс_ТипСети) И 
				ЗначениеЗаполнено(ДокСчет.ТипСети) Тогда
				Движение.абс_ТипСети = ДокСчет.ТипСети;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Движение.абс_ТЭО) И 
				ЗначениеЗаполнено(ДокСчет.ТЭО) Тогда
				Движение.абс_ТЭО = ДокСчет.ТЭО;
			КонецЕсли;
			
			
		КонецЕсли;	
	КонецЕсли;


	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета 	= глЗначениеПеременной("ВалютаУправленческогоУчета");
// Заполним список статусов для определения минимального статуса документа
мСписокСтатусов = абс_БизнесПроцессы.ПолучитьМассивСтатусовСчетаНаОплату();

