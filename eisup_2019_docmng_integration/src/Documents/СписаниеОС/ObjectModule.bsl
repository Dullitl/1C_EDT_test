Перем мУдалятьДвижения;

//12.12.2017 Крамаренко Д.М.
//T#7769333 — Необходимо завести статусы в документы
Перем мРолиПользователя Экспорт;
//12.12.2017 Крамаренко Д.М.
//T#7769333 — Необходимо завести статусы в документы

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСкопирован Экспорт; // хранит признак копирования документа

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
Перем ТабЗатрат;
Перем ПроводкиНУ;
Перем мТабСостояний Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция возращает параметры ОС
	//
	Функция ПолучитьПробегАвто( ОбъектОС,  НачДата, КонДата, ПечатьПоДаннымУпрУчета = Истина)
		
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВыработкаОС.ОсновноеСредство КАК ОбъектОС,
		|	ВыработкаОС.ПараметрВыработки,
		|	ВыработкаОС.КоличествоОборот КАК Пробег
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&КонДата, ОсновноеСредство = &ОС) КАК РегСведенияОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(&НачГраница, &КонГраница, , ОсновноеСредство = &ОС) КАК ВыработкаОС
		|		ПО РегСведенияОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
		|			И РегСведенияОС.ПараметрВыработки = ВыработкаОС.ПараметрВыработки";
		
		Если НЕ ПечатьПоДаннымУпрУчета тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПервоначальныеСведенияОС","ПервоначальныеСведенияОСБухгалтерскийУчет");
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("КонДата", КонДата);
		Запрос.УстановитьПараметр("НачГраница", Новый Граница(НачДата, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонДата, ВидГраницы.Включая));
		
		Запрос.УстановитьПараметр("ОС", ОбъектОС);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		РезультатЗапроса.Следующий();
		
		Возврат РезультатЗапроса.Пробег;
		
	КонецФункции // ПолучитьПробегАвто()
	
	// Функция формирует табличный документ с печатной формой ОС4
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьСписаниеОС(ПечатьПоДаннымУпрУчета = Истина)
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеОС_ОС4";
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписаниеОС.Номер КАК НомерДок,
		|	СписаниеОС.Дата КАК ДатаДок,
		|	СписаниеОС.Событие КАК Событие,
		|	СписаниеОС.ПричинаСписания КАК ПричинаСписания,
		|	СписаниеОС.Организация КАК Организация,
		|	СписаниеОС.Организация.КодПоОКПО КАК КодПоОКПО,
		|	СписаниеОС.Организация.НаименованиеПолное КАК НаимОрганизация
		|ИЗ
		|	Документ.СписаниеОС КАК СписаниеОС
		|ГДЕ
		|	СписаниеОС.Ссылка = &Ссылка";
		СтруктураДока = Запрос.Выполнить().Выбрать();
		СтруктураДока.Следующий();
		
		СведенияОРуководителеГлавбухе = УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОРуководителеГлавБухе(СтруктураДока.Организация,СтруктураДока.ДатаДок);
		
		// определимся с переменными, зависящими от типа учета
		НазваниеРегистраПервоначальныхСведений = "ПервоначальныеСведенияОС";
		НазваниеРегистраМестонахождения = "МестонахождениеОС";
		
		Запрос = Новый Запрос();
		
		Если ПечатьПоДаннымУпрУчета тогда
			кВидуУчета			= "управленческому";
			cВидаУчета 	 	  	= "управленческого";
			НазваниеАмортизации = "Амортизация";
			НазваниеАмортизацииЗаМесяц = "АмортизацияЗаМесяц";
			НазваниеСтоимости		   = "Стоимость";	
			ВалютаПечати = глЗначениеПеременной("ВалютаУправленческогоУчета");
			СоединениеПоСчетам = "";
			СтрокиСчетов	   = "";
		Иначе
			кВидуУчета 		 	= "бухгалтерскому";
			cВидаУчета 		 	= "бухгалтерского";
			ВалютаПечати 	 	= глЗначениеПеременной("ВалютаРегламентированногоУчета");
			НазваниеАмортизации = "АмортизацияБУ";
			НазваниеАмортизацииЗаМесяц = "АмортизацияЗаМесяцБУ";
			НазваниеСтоимости		   = "СтоимостьБУ";	
			НазваниеРегистраПервоначальныхСведений = НазваниеРегистраПервоначальныхСведений+"БухгалтерскийУчет";
			НазваниеРегистраМестонахождения        = НазваниеРегистраМестонахождения+"БухгалтерскийУчет";
			СтрокиСчетов	   = "	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СубСчет,
			|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации,";
			СоединениеПоСчетам = "		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&Дата,
			|Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОС
			|		ПО СписаниеОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство";
			Запрос.УстановитьПараметр("Организация",СтруктураДока.Организация);
			Запрос.УстановитьПараметр("Дата",СтруктураДока.ДатаДок);
			
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписаниеОСОС.НомерСтроки                                 КАК НП,
		|	СписаниеОСОС.ОсновноеСредство                            КАК ОС,
		|	СписаниеОСОС.ОсновноеСредство.Код                        КАК ИнвНомерУпр,
		|	СписаниеОСОС.ОсновноеСредство.ЗаводскойНомер             КАК ЗаводскойНомер,
		|	СписаниеОСОС.ОсновноеСредство.Автотранспорт              КАК Автотранспорт,
		|	СписаниеОСОС.ОсновноеСредство.ДатаВыпуска                КАК ГодВыпуска,
		|	СписаниеОСОС.ОсновноеСредство.НаименованиеПолное         КАК НаименованиеОС,
		|	СписаниеОСОС.ОсновноеСредство.ГруппаОС                   КАК Группа,
		|	ЕСТЬNULL(СписаниеОСОС."+НазваниеАмортизации+", 0)        КАК НачАмортизация,
		|	ЕСТЬNULL(СписаниеОСОС."+НазваниеСтоимости+", 0)          КАК Стоимость,
		|	ЕСТЬNULL(СписаниеОСОС."+НазваниеАмортизацииЗаМесяц+", 0) КАК АмортизацияЗаМесяц,
		|	ЕСТЬNULL(СписаниеОСОС.СписаноНаЗатраты, ЛОЖЬ)            КАК СписаноНаЗатраты,
		|	"+СтрокиСчетов+"
		|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПервоначальнаяСтоимость, 0) КАК НачСтоимость,
		|	МестонахождениеОсновныхСредствСрезПоследних.МОЛ,
		|	МестонахождениеОсновныхСредствСрезПоследних.Местонахождение КАК НаимПодразделение,
		|	МестонахождениеОсновныхСредствСрезПоследних.МОЛ.Код КАК ТабНомерМОЛ
		|ИЗ
		|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраПервоначальныхСведений+".СрезПоследних КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
		|		ПО СписаниеОСОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраМестонахождения+".СрезПоследних КАК МестонахождениеОсновныхСредствСрезПоследних
		|		ПО СписаниеОСОС.ОсновноеСредство = МестонахождениеОсновныхСредствСрезПоследних.ОсновноеСредство
		|		"+СоединениеПоСчетам+"
		|ГДЕ
		|	СписаниеОСОС.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	СписаниеОСОС.НомерСтроки";
		РезультатЗапросаПоОС = Запрос.Выполнить();
		
		Если РезультатЗапросаПоОС.Пустой() тогда
			// скорее всего в табличной части документа нет ни строчки
			// или нет записей в регистре
			Возврат Неопределено;
		КонецЕсли;
		
		ВыборкаОС = РезультатЗапросаПоОС.Выбрать();
		
		Если ВыборкаОС.Количество() = 1 Тогда
			
			ВыборкаОС.Следующий();
			
			Если ВыборкаОС.Автотранспорт Тогда 
				Макет = ПолучитьМакет("ОС4а");
			Иначе
				Макет = ПолучитьМакет("ОС4");
			КонецЕсли;
			
			Область = Макет.ПолучитьОбласть("Заголовок");
			Область.Параметры.Заполнить(СтруктураДока);
			Область.Параметры.Заполнить(ВыборкаОС);
			Область.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
			Область.Параметры.Валюта 	 = ВалютаПечати;
			Область.Параметры.кВидуУчета = кВидуУчета;
			Область.Параметры.cВидаУчета = cВидаУчета;
			
			//АБС заявка 536
			//Если Не ЗначениеЗаполнено(ОбъектСтроительства) Тогда
			Если Не ВыборкаОС.Автотранспорт Тогда 
				Если ОС.Количество()>0 Тогда
					Область.Параметры.НомерДоговора = СокрЛП(КомиссияТМЦ.Номер);
					ДатаПриказа = КомиссияТМЦ.Дата;
					Если ЗначениеЗаполнено(ДатаПриказа) Тогда
						Область.Параметры.ДатаДоговора = ДатаПриказа;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			//КонецЕсли;
			
			
			ДокументПринятияКУчету     = "";
			ДокументВводаВЭксплуатацию = "";
			ПринятоКУчету              = "";
			ВведеноВЭксплуатацию       = "";
			
			// получим состояния ос 
			СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(ВыборкаОС.ОС, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,
			ПечатьПоДаннымУпрУчета,СтруктураДока.Организация);
			ДокументВводаВЭксплуатацию = СтруктПараметров["ИмяДок"];
			ВведеноВЭксплуатацию	   = СтруктПараметров["Дата"];
			
			СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(ВыборкаОС.ОС, Перечисления.СостоянияОС.ПринятоКУчету,
			ПечатьПоДаннымУпрУчета,СтруктураДока.Организация);
			ДокументПринятияКУчету  = СтруктПараметров["ИмяДок"];
			ПринятоКУчету		  	= СтруктПараметров["Дата"];
			
			Если ВыборкаОС.Автотранспорт Тогда
				Область.Параметры.ВведеноВЭксплуатацию = ВведеноВЭксплуатацию;
				Если ДокументВводаВЭксплуатацию = Неопределено или ВведеноВЭксплуатацию = Неопределено Тогда
					Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаОС.ОС, Дата, Дата, ПечатьПоДаннымУпрУчета);
				Иначе
					Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаОС.ОС, ВведеноВЭксплуатацию, Дата, ПечатьПоДаннымУпрУчета);
				КонецЕсли;
			Иначе
				Область.Параметры.СрокЭкспл  = ?(ЗначениеЗаполнено(ВведеноВЭксплуатацию),
				УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВведеноВЭксплуатацию, Дата),
				0); 
			КонецЕсли;
			
			СтоимостьОС   = ?(ВыборкаОС.СписаноНаЗатраты, ВыборкаОС.НачСтоимость, ВыборкаОС.Стоимость);
			АмортизацияОС = ?(ВыборкаОС.СписаноНаЗатраты, 0, ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц);
			
			Область.Параметры.ПринятоКУчету  = ПринятоКУчету;
			Область.Параметры.НачСтоимость   = СтоимостьОС;
			Область.Параметры.НачАмортизация = АмортизацияОС;
			//Область.Параметры.ОстСтоимость   = ?(ВыборкаОС.СписаноНаЗатраты, "0", СтоимостьОС - АмортизацияОС);
			Область.Параметры.ОстСтоимость   = ?(ВыборкаОС.СписаноНаЗатраты, "0", ?(ЗначениеЗаполнено(СтоимостьОС - АмортизацияОС),СтоимостьОС - АмортизацияОС,"0"));
			Если ПечатьПоДаннымУпрУчета тогда
				Область.Параметры.ИнвНомер = ВыборкаОС.ИнвНомерУпр;
			Иначе
				ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(СтруктураДока.ДатаДок,
				Новый Структура("ОсновноеСредство",ВыборкаОС.ОС));
				ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
				Область.Параметры.ИнвНомер = ИнвНомерБух;
			КонецЕсли;
			
			Если ПустаяСтрока(ВыборкаОС.НаименованиеОС) Тогда
				Область.Параметры.НаименованиеОС = СокрЛП(ВыборкаОС.ОС);
			КонецЕсли; 
			
			ТабДокумент.Вывести(Область);
			
			//АБС заявка 1652
			Запрос = Новый Запрос;
			
			запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КомиссияТМЦЧленыКомиссии.ЧленКомиссии КАК Членкомиссии,
			|	КомиссияТМЦЧленыКомиссии.Председатель,
			|	ВЫБОР
			|		КОГДА КомиссияТМЦЧленыКомиссии.Председатель
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Поле1,
			|	РаботникиОрганизацийСрезПоследних.Должность
			|ИЗ
			|	Справочник.КомиссияТМЦ.ЧленыКомиссии КАК КомиссияТМЦЧленыКомиссии
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
			|		ПО КомиссияТМЦЧленыКомиссии.ЧленКомиссии.Наименование = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Наименование
			|ГДЕ
			|	КомиссияТМЦЧленыКомиссии.Ссылка = &Комиссия
			|
			|УПОРЯДОЧИТЬ ПО
			|	Поле1";
			
			
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("Комиссия",КомиссияТМЦ);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				если (Выборка.председатель=истина)  тогда
					ТабОбласть1=Макет.ПолучитьОбласть("Область1");
					табобласть1.Параметры.Заполнить(выборка);
					ТабДокумент.вывести(ТабОбласть1);
				иначеесли (Выборка.председатель=ложь)  тогда
					ТабОбласть2=Макет.ПолучитьОбласть("Область2");
					табобласть2.Параметры.Заполнить(выборка);
					ТабДокумент.вывести(ТабОбласть2);
				конецесли;
				
			КонецЦикла;
			
			Если ВЫборка.Количество() =0 Тогда
				
				ТабОбласть1=Макет.ПолучитьОбласть("Область1");
				ТабДокумент.вывести(ТабОбласть1);
				ТабОбласть2=Макет.ПолучитьОбласть("Область2");
				ТабДокумент.вывести(ТабОбласть2);
				
			КонецЕсли;
			ТабОбласть3=Макет.ПолучитьОбласть("Область3");	
			ТабДокумент.вывести(ТабОбласть3);
			//АБС Заявка 1652
			
		Иначе
			
			Макет  = ПолучитьМакет("ОС4б");
			
			Шапка = Макет.ПолучитьОбласть("Шапка0");
			Шапка.Параметры.Заполнить(СтруктураДока);
			Шапка.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
			//АБС Заявка 1652
			ВыборкаОС.Следующий();
			Шапка.Параметры.Заполнить(ВыборкаОС);
			ВыборкаОС.Сбросить();
			
			//АБС Заявка 1652
			
			Шапка.Параметры.cВидаУчета = cВидаУчета;
			ТабДокумент.Вывести(Шапка);
			
			Шапка = Макет.ПолучитьОбласть("Шапка1");
			Шапка.Параметры.Заполнить(СтруктураДока);
			Шапка.Параметры.Валюта = ВалютаПечати;
			
			ТабДокумент.Вывести(Шапка);
			
			Строка1 = Макет.ПолучитьОбласть("Строка1");
			
			Пока ВыборкаОС.Следующий() Цикл
				
				Строка1.Параметры.Заполнить(ВыборкаОС);
				Строка1.Параметры.Заполнить(СтруктураДока);
				
				СтоимостьОС   = ?(ВыборкаОС.СписаноНаЗатраты, ВыборкаОС.НачСтоимость, ВыборкаОС.Стоимость);
				АмортизацияОС = ?(ВыборкаОС.СписаноНаЗатраты, 0, ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц);
				
				Строка1.Параметры.НачСтоимость   = СтоимостьОС;
				Строка1.Параметры.НачАмортизация = АмортизацияОС;
				//Строка1.Параметры.ОстСтоимость   = ?(ВыборкаОС.СписаноНаЗатраты, "0", СтоимостьОС - АмортизацияОС);
				Строка1.Параметры.ОстСтоимость   = ?(ВыборкаОС.СписаноНаЗатраты, "0", ?(ЗначениеЗаполнено(СтоимостьОС - АмортизацияОС),СтоимостьОС - АмортизацияОС,"0"));
				
				ДокументПринятияКУчету     = "";
				ДокументВводаВЭксплуатацию = "";
				ПринятоКУчету              = "";
				ВведеноВЭксплуатацию       = "";
				
				// получим состояния ос 
				СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(ВыборкаОС.ОС, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,
				ПечатьПоДаннымУпрУчета,СтруктураДока.Организация);
				ДокументВводаВЭксплуатацию = СтруктПараметров["ИмяДок"];
				ВведеноВЭксплуатацию	   = СтруктПараметров["Дата"];
				
				СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(ВыборкаОС.ОС, Перечисления.СостоянияОС.ПринятоКУчету,
				ПечатьПоДаннымУпрУчета,СтруктураДока.Организация);
				ДокументПринятияКУчету  = СтруктПараметров["ИмяДок"];
				ПринятоКУчету		  	= СтруктПараметров["Дата"];
				
				Строка1.Параметры.СрокЭкспл  = ?(ЗначениеЗаполнено(ВведеноВЭксплуатацию),
				УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВведеноВЭксплуатацию, Дата),
				0); 
				
				Если ПечатьПоДаннымУпрУчета тогда
					Строка1.Параметры.ИнвНомер = ВыборкаОС.ИнвНомерУпр;
				Иначе
					ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(СтруктураДока.ДатаДок,
					Новый Структура("ОсновноеСредство",ВыборкаОС.ОС));
					ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
					Строка1.Параметры.ИнвНомер = ИнвНомерБух;
				КонецЕсли;
				
				Если ПустаяСтрока(ВыборкаОС.НаименованиеОС) Тогда
					Строка1.Параметры.НаименованиеОС = СокрЛП(ВыборкаОС.ОС);
				КонецЕсли; 
				
				Строка1.Параметры.Причина = СтруктураДока.ПричинаСписания;
				
				ТабДокумент.Вывести(Строка1);
				
			КонецЦикла;
			
			Шапка = Макет.ПолучитьОбласть("Шапка2");
			Шапка.Параметры.Заполнить(СтруктураДока);
			//Шапка.Параметры.Валюта = ВалютаПечати;
			//Шапка.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
			ТабДокумент.Вывести(Шапка);
			
			//АБС заявка 1652
			Запрос = Новый Запрос;
			
			запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КомиссияТМЦЧленыКомиссии.ЧленКомиссии КАК Членкомиссии,
			|	КомиссияТМЦЧленыКомиссии.Председатель,
			|	ВЫБОР
			|		КОГДА КомиссияТМЦЧленыКомиссии.Председатель
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Поле1,
			|	РаботникиОрганизацийСрезПоследних.Должность
			|ИЗ
			|	Справочник.КомиссияТМЦ.ЧленыКомиссии КАК КомиссияТМЦЧленыКомиссии
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
			|		ПО КомиссияТМЦЧленыКомиссии.ЧленКомиссии.Наименование = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Наименование
			|ГДЕ
			|	КомиссияТМЦЧленыКомиссии.Ссылка = &Комиссия
			|
			|УПОРЯДОЧИТЬ ПО
			|	Поле1";
			
			
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("Комиссия",КомиссияТМЦ);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				если (Выборка.председатель=истина)  тогда
					ТабОбласть1=Макет.ПолучитьОбласть("Область1");
					табобласть1.Параметры.Заполнить(выборка);
					ТабДокумент.вывести(ТабОбласть1);
				иначеесли (Выборка.председатель=ложь)  тогда
					ТабОбласть2=Макет.ПолучитьОбласть("Область2");
					табобласть2.Параметры.Заполнить(выборка);
					ТабДокумент.вывести(ТабОбласть2);
				конецесли;
				
			КонецЦикла;
			
			Если ВЫборка.Количество() =0 Тогда
				
				ТабОбласть1=Макет.ПолучитьОбласть("Область1");
				ТабДокумент.вывести(ТабОбласть1);
				ТабОбласть2=Макет.ПолучитьОбласть("Область2");
				ТабДокумент.вывести(ТабОбласть2);
				
			КонецЕсли;
			
			Шапка = Макет.ПолучитьОбласть("Шапка3");
			Шапка.Параметры.Заполнить(СтруктураДока);
			Шапка.Параметры.Валюта = ВалютаПечати;
			Шапка.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
			ТабДокумент.Вывести(Шапка);
			
			
			//АБС заявка 1652 
			
		КонецЕсли;
		
		ТабДокумент.АвтоМасштаб = Истина;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ПолеСверху = 0;
		ТабДокумент.ПолеСнизу = 0;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьСписаниеТоваров()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		//T#7769333 — Необходимо завести статусы в документы	
		//ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			//Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			//Возврат;
		КонецЕсли;
		
		Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "ОС4упр" тогда
			ТабДокумент = ПечатьСписаниеОС();
		ИначеЕсли ИмяМакета = "ОС4бух" тогда
			ТабДокумент = ПечатьСписаниеОС(Ложь);
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли; 
			
		КонецЕсли;
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
		
	КонецПроцедуры // Печать
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("ОС4упр","Форма ОС-4 (упр. учет)");
		СтруктураМакетов.Вставить("ОС4бух","Форма ОС-4 (бух. учет)");
		
		Возврат СтруктураМакетов;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Событие,ОС.Стоимость, ОС.Амортизация, ОС.АмортизацияЗаМесяц, ОС.ОстСтоимость, ОС.СписаноНаЗатраты";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "СобытиеРегл,СчетСписанияБУ, СубконтоБУ, ОС.СтоимостьБУ, ОС.АмортизацияБУ, ОС.АмортизацияЗаМесяцБУ, ОС.ОстСтоимостьБУ, ОС.СписаноНаЗатратыБУ";
	мСтрокаРеквизитыНалУчета = "СчетСписанияНУ, СубконтоНУ, ОС.СтоимостьНУ, ОС.АмортизацияНУ, ОС.АмортизацияЗаМесяцНУ, ОС.ОстСтоимостьНУ, ОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Событие";
	
КонецПроцедуры

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетСписанияБУ,СчетСписанияНУ,СобытиеРегл";
	
КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
	Перечисления.ВидыСобытийОС.Списание,
	ПредставлениеРеквизита,Отказ);
	
КонецПроцедуры

// Проверяет правильность заполнения регл. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
	Перечисления.ВидыСобытийОС.Списание,
	ПредставлениеРеквизита,Отказ);
	
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Событие";
	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок, Истина);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет список обязательных параметров табл. части
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСУпр(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Стоимость";
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(РежимПроведения,Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	//АБС ВСТАВКА №30924 НАЧАЛО «16 февраля 2015 г.», Пополитов
	//Закомментировано по заявке, для списание ОС с нулевой стоимостью
 	//ДополнитьОбязательныеРеквизитыТабОСУпр(РеквизитыТабОС);
 	//\\АБС ВСТАВКА №30924 КОНЕЦ
 	                                
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		// Проверим возможность снятия ОС с учета
		Для каждого СтрокаОС из ОС Цикл
			Если ОтражатьВБухгалтерскомУчете тогда
				//АБС 
				Если Не ЭтотОбъект.абс_КонтрольСнятия Тогда
					УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьСнятияСУчета(СтрокаОС.ОсновноеСредство,Дата,Отказ,Организация);
				КонецЕсли;
			КонецЕсли;
			Если ОтражатьВУправленческомУчете тогда
				Если Не ЭтотОбъект.абс_КонтрольСнятия Тогда
					УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьСнятияСУчета(СтрокаОС.ОсновноеСредство,Дата,Отказ);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитовТЧ()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)
	
	//АБС начало заявка Цвили
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТЗ.ОсновноеСредство
	|ПОМЕСТИТЬ ВТЗ
	|ИЗ
	|	&ВТЗ_ОС КАК ВТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство,
	|	СостоянияОС.Состояние
	|ПОМЕСТИТЬ Упр
	|ИЗ
	|	РегистрСведений.СостоянияОС КАК СостоянияОС
	|ГДЕ
	|	СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.Состояние
	|ПОМЕСТИТЬ БУ
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗ.ОсновноеСредство КАК ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА БУ.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоБУ,
	|	ВЫБОР
	|		КОГДА Упр.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоУУ
	|ИЗ
	|	ВТЗ КАК ВТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ БУ КАК БУ
	|		ПО ВТЗ.ОсновноеСредство = БУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ Упр КАК Упр
	|		ПО ВТЗ.ОсновноеСредство = Упр.ОсновноеСредство";
	Запрос.УстановитьПараметр("ВТЗ_ОС",ТаблицаПоОС);
	мТабСостояний = Запрос.Выполнить().Выгрузить(); 	
	
	//АБС конец заявка Цвили 	
	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок);
	//АБС НАЧАЛО Заявка на модификацию 07.13
	Если ВидОперации = Перечисления.абс_ВидыОперацийСписанияОС.Списание Тогда
		ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок);
	Иначе
		ДвиженияПоРегистрамРеглМеждуФилиалами(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок);
	КонецЕсли; 	
	//\\АБС
	
КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДока = Дата;
	
	АмортизацияОС              = Движения.СтоимостьОС;
	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация.Очистить();
	
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
	
	Для каждого СтрокаОС из ТаблицаПоОС Цикл
		
		Если СтрокаОС.АмортизацияЗаМесяц > 0 Тогда
			
			ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");
			
			НоваяСтрока    = ТабАмортизации.Добавить();
			
			НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяц;
			НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_УУ);
			
			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			
			Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяц;
			Движение.Стоимость        = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// вызов процедуры списания амортизации по направлениям
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);
	
	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьПриход();
	
	СостояниеОС           = Движения.СостоянияОС;
	СобытиеОС             = Движения.СобытияОС;
	АмортизацияОС         = Движения.СтоимостьОС;
	ОССписанныеНаЗатраты  = Движения.ОССписанныеНаЗатраты;
	НачислениеАмортизации = Движения.НачислениеАмортизацииОС;
	
	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация.Очистить();
	
	ТаблицаДвиженийОССписанныеНаЗатраты = ОССписанныеНаЗатраты.Выгрузить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		// Движения по регистру НачислениеАмортизации
		Движение = НачислениеАмортизации.Добавить();
		
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.НачислятьАмортизацию = Ложь;
		Движение.НачислятьАмортизациюВТекущемМесяце = Ложь;
		
		// Движения по регистру СобытияОС
		Движение = СобытиеОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Событие              = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента = Метаданные().Представление();
		Движение.НомерДокумента    = Номер;
		
		// Движения по регистру СостоянияОС
		//Движение = СостояниеОС.Добавить();
		//Движение.Период               = ДатаДока;
		//Движение.ОсновноеСредство     = ТекОС;
		//Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
		//Движение.ДатаСостояния		  = ДатаДока;
		
		//АБС Заявка Цвили
		Если мТабСостояний<>Неопределено Тогда
			СтрокаСостояния =  мТабСостояний.Найти(ТекОС,"ОсновноеСредство");
			Если СтрокаСостояния<>Неопределено Тогда
				Если Не СтрокаСостояния.СнятоУУ  Тогда
					Движение = СостояниеОС.Добавить();
					Движение.Период               = ДатаДока;
					Движение.ОсновноеСредство     = ТекОС;
					Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
					Движение.ДатаСостояния		  = ДатаДока;
					
					
				КонецЕсли;
			Иначе
				
				Движение = СостояниеОС.Добавить();
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
				Движение.ДатаСостояния		  = ДатаДока;
				
				
			КонецЕсли;
		Иначе
			
			Движение = СостояниеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
			Движение.ДатаСостояния		  = ДатаДока;
			
			//АБС заявка Цвили
		КонецЕсли;
		//\\АБС
		
		
		Если НЕ СтрокаТЧ.СписаноНаЗатраты Тогда
			
			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			
			Движение.ОсновноеСредство = ТекОС;
			Движение.Амортизация      = СтрокаТЧ.Амортизация+СтрокаТЧ.АмортизацияЗаМесяц;
			Движение.Стоимость        = СтрокаТЧ.Стоимость;
			
		Иначе
			// Движения по регистру ОССписанныеНаЗатраты
			Движение = ТаблицаДвиженийОССписанныеНаЗатраты.Добавить();
			
			Движение.ОсновноеСредство = ТекОС;
			Движение.Стоимость        = СтрокаТЧ.Стоимость;
			
		КонецЕсли;
		
	КонецЦикла;
	
	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьРасход();
	
	ОССписанныеНаЗатраты.мПериод   = ДатаДока;
	ОССписанныеНаЗатраты.мТаблицаДвижений = ТаблицаДвиженийОССписанныеНаЗатраты;
	Движения.ОССписанныеНаЗатраты.ВыполнитьРасход();
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)
	
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация",  ТекОрганизация);
	Запрос.УстановитьПараметр("ТекДата",         ДатаДока);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство                                              КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство          КАК ОС_БУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета                 КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета                     КАК СчетУчетаНУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство              КАК ОС_НУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации     КАК СчетНачисленияАмортизацииНУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|";
	ТаблицаСчетов  = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат
		
		АмортизацияОС  = Движения.СтоимостьОСБухгалтерскийУчет;
		
		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();
		
		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Сумма",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
		
		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
			
			Если НЕ (СтрокаОС.АмортизацияЗаМесяцБУ = 0) Тогда
				
				НоваяСтрока = ТабАмортизации.Добавить();
				
				НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцБУ;
				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
				
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_БУ);
				
				СтрокаТЗ = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
				Если СтрокаТЗ <> Неопределено Тогда
					
					НоваяСтрока.СчетАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииБУ;
					
				Иначе
					
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + СтрокаОС.ОсновноеСредство.Наименование +
					" не отражалось в бух. учете в организации " + ТекОрганизация, Отказ); 	
					Возврат;
					
				КонецЕсли;
				
				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				
				Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцБУ;
				Движение.Стоимость        = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//вызов процедуры списания амортизации по направлениям
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","ОС");
		ТабАмортизацииБУ = ТабАмортизации;
		
		АмортизацияОС.мПериод          = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();
		
		СобытиеОС             = Движения.СобытияОСОрганизаций;
		СостояниеОС			  = Движения.СостоянияОСОрганизаций;	
		АмортизацияОС         = Движения.СтоимостьОСБухгалтерскийУчет;
		ОССписанныеНаЗатраты  = Движения.ОССписанныеНаЗатратыОрганизаций;
		НачислениеАмортизации = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
		ПроводкиБУ            = Движения.Хозрасчетный;
		
		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();
		
		ТаблицаДвиженийОССписанныеНаЗатраты = ОССписанныеНаЗатраты.Выгрузить();
		
		Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
			
			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			// Движения по регистру НачислениеАмортизации
			Движение = НачислениеАмортизации.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.НачислятьАмортизацию = Ложь;
			
			// Движения по регистру СобытияОС
			Движение = СобытиеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
			Движение.НазваниеДокумента 	  = Метаданные().Представление();
			Движение.НомерДокумента		  = Номер;
			
			// Движения по регистру СостоянияОС
			//АБС Заявка Цвили
			Если мТабСостояний<>Неопределено Тогда
				СтрокаСостояния =  мТабСостояний.Найти(ТекОС,"ОсновноеСредство");
				Если СтрокаСостояния<>Неопределено Тогда
					Если Не СтрокаСостояния.СнятоБУ  Тогда
						Движение = СостояниеОС.Добавить();
						Движение.Период               = ДатаДока;
						Движение.ОсновноеСредство     = ТекОС;
						Движение.Организация          = ТекОрганизация;
						Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
						Движение.ДатаСостояния		  = ДатаДока;
						
						
					КонецЕсли;
				Иначе
					
					Движение = СостояниеОС.Добавить();
					Движение.Период               = ДатаДока;
					Движение.ОсновноеСредство     = ТекОС;
					Движение.Организация          = ТекОрганизация;
					Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
					Движение.ДатаСостояния		  = ДатаДока;
					
					
				КонецЕсли;
			Иначе
				
				Движение = СостояниеОС.Добавить();
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
				Движение.ДатаСостояния		  = ДатаДока;
				
				//АБС заявка Цвили
			КонецЕсли;
			//\\АБС
			Если НЕ СтрокаТЧ.СписаноНаЗатратыБУ И НЕ (СтрокаТЧ.СтоимостьБУ = 0) Тогда
				
				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				Движение.ОсновноеСредство = ТекОС;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаТЧ.АмортизацияБУ+СтрокаТЧ.АмортизацияЗаМесяцБУ;
				Движение.Стоимость        = СтрокаТЧ.СтоимостьБУ;
				Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Списание;
				
				СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_БУ");
				
				Если СтрокаТЗ <> Неопределено Тогда
					
					СчетУчетаСтоимости  = СтрокаТЗ.СчетУчетаБУ;
					СчетУчетаАмортизации= СтрокаТЗ.СчетНачисленияАмортизацииБУ;
					
				Иначе
					
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + ТекОс.Наименование +
					" не отражалось в бух. учете в организации " + ТекОрганизация,Отказ); 	
					Возврат;
					
				КонецЕсли;
				
				// списание амортизации Д 02.01 К 01.09
				СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
				
				Если НЕ (СуммаПроводки = 0) Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "Списание ОС";
					Проводка.Сумма        = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";
					
					Проводка.СчетДт      = СчетУчетаАмортизации;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
				КонецЕсли;
				
				// списание балансовой стоимости Д 01.09 К 01.01
				СуммаПроводки = СтрокаТЧ.СтоимостьБУ;
				
				Если НЕ (СуммаПроводки = 0) Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Сумма        = СтрокаТЧ.СтоимостьБУ;
					Проводка.Содержание   = "Списание ОС";
					Проводка.НомерЖурнала = "ОС";
					
					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Проводка.СчетКт      = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
				КонецЕсли;
				
				// списание остаточной стоимости Д 99.01 (91.02) К 01.09
				СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
				
				Если НЕ (СуммаПроводки = 0) Тогда       					
					Если ПричинаСписания.абс_ПричинаСписанияВНУ = Перечисления.абс_ПричинаСписанияВНУ.НедостачаПриИнвентаризации Тогда 
						//на 94 счет
						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = ТекОрганизация;
						Проводка.Содержание   = "Списание ОС";
						Проводка.Сумма        = СуммаПроводки;
						Проводка.НомерЖурнала = "ОС";  					
						Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);				
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС); 
						//с 94 счета
						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = ТекОрганизация;
						Проводка.Содержание   = "Списание ОС";
						Проводка.Сумма        = СуммаПроводки;
						Проводка.НомерЖурнала = "ОС";  					
						Проводка.СчетДт = СтруктураШапкиДокумента.СчетСписанияБУ;
						Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоБУ) Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоБУ);
						КонецЕсли;					
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС); 							
					Иначе					
						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = ТекОрганизация;
						Проводка.Содержание   = "Списание ОС";
						Проводка.Сумма        = СуммаПроводки;
						Проводка.НомерЖурнала = "ОС";  					
						Проводка.СчетДт = СтруктураШапкиДокумента.СчетСписанияБУ;
						Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоБУ) Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоБУ);
						КонецЕсли;					
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС); 					
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				// Движения по регистру ОССписанныеНаЗатраты
				Движение = ТаблицаДвиженийОССписанныеНаЗатраты.Добавить();
				
				Движение.ОсновноеСредство = ТекОС;
				Движение.Организация      = ТекОрганизация;
				Движение.Стоимость        = СтрокаТЧ.СтоимостьБУ;
				
			КонецЕсли;
			
		КонецЦикла;
		
		АмортизацияОС.мПериод                    = ДатаДока;
		АмортизацияОС.мТаблицаДвижений           = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьРасход();
		
		ОССписанныеНаЗатраты.мПериод             = ДатаДока;
		ОССписанныеНаЗатраты.мТаблицаДвижений    = ТаблицаДвиженийОССписанныеНаЗатраты;
		Движения.ОССписанныеНаЗатратыОрганизаций.ВыполнитьРасход();
		
		ПроводкиБУ.Записать(Ложь);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
		
		ПроводкиНУ = Движения.Налоговый;
		
		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат
		
		АмортизацияОСНУ = Движения.СтоимостьОСНалоговыйУчет;
		
		ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
		ТаблицаДвиженийАмортизацияНУ.Очистить();
		
		ТаблицаДвиженийСтоимостьНУ = ТаблицаДвиженийАмортизацияНУ.Скопировать();
		
		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Сумма",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("СчетУчетаНУ");
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
		ТабАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
		
		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
			
			//Если СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			//	И (СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный
			//	И НЕ (((СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа)
			//	И (СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения))
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа)) Тогда
			//	Продолжить;
			//КонецЕсли;
			
			//Начало изменения по заявке № 7717171 (Григорьев Денис)			
			Если Организация <> Справочники.Организации.НайтиПоКоду("000000008") Тогда //Игнорируем для организации "ВОЛГАТРАНСТЕЛЕКОМ"
				Если не абс_СписыватьВ_НУ_ОС(СтруктураШапкиДокумента,СтрокаТЧ) Тогда
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			//Конец изменения по заявке № 7717171 (Григорьев Денис)
			
			Если НЕ (СтрокаОС.АмортизацияЗаМесяцНУ = 0) Тогда
				
				НоваяСтрока = ТабАмортизации.Добавить();
				
				НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцНУ;
				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
				
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_НУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_НУ);
				
				СтрокаТЗ = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_НУ");
				Если СтрокаТЗ <> Неопределено Тогда
					НоваяСтрока.СчетАмортизацииНУ = СтрокаТЗ.СчетНачисленияАмортизацииНУ;
					НоваяСтрока.СчетУчетаНУ       = СтрокаТЗ.СчетУчетаНУ;
				Иначе
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + СтрокаОС.ОсновноеСредство.Наименование +
					" не отражалось в налог. учете в организации " + ТекОрганизация, Отказ); 	
					Возврат;
				КонецЕсли;
				
				Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();
				
				Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцНУ;
				Движение.Стоимость        = 0;
				
				НоваяСтрока.СуммаКапитальныхВложенийВключаемыхВРасходы = СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Включение амортизационной премии в состав расходов.
		ТабКапитальныхВложений = ТабАмортизации.Скопировать();
		ТабКапитальныхВложений.Колонки.Добавить("СуммаБУ",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабКапитальныхВложений.Колонки.Добавить("СуммаПР",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабКапитальныхВложений.Колонки.Удалить("Сумма");
		
		// Формирование списка основных средств, по которым отражается амортизационная премия
		СписокОС = Новый Массив;
		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
			
			//Если НЕ (СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			//	И (СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный
			//	И НЕ (((СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа)
			//	И (СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения))
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа))) Тогда
			
			//Начало изменения по заявке № 7717171 (Григорьев Денис)
			Если Организация <> Справочники.Организации.НайтиПоКоду("000000008") Тогда //Игнорируем для организации "ВОЛГАТРАНСТЕЛЕКОМ"
				Если абс_СписыватьВ_НУ_ОС(СтруктураШапкиДокумента,СтрокаОС) Тогда
					СписокОС.Добавить(СтрокаОС.ОсновноеСредство);
				КонецЕсли;
			Иначе
				СписокОС.Добавить(СтрокаОС.ОсновноеСредство);
			КонецЕсли;
			//Конец изменения по заявке № 7717171 (Григорьев Денис)
			
		КонецЦикла;
		
		Если СписокОС.Количество() > 0 Тогда
			НалоговыйУчет.РасчетАмортизационнойПремии(ЭтотОбъект, СтруктураШапкиДокумента, СписокОС, ТабКапитальныхВложений, ПроводкиНУ, ТаблицаДвиженийСтоимостьНУ, Отказ, Заголовок);			
		КонецЕсли;
		
		//вызов процедуры списания амортизации по направлениям
		Если СписокОС.Количество() > 0 
			И  СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, "ОС", СписокОС, ТабАмортизации, ТабЗатрат, ТабАмортизацииБУ);
		КонецЕсли;
		
		Если СписокОС.Количество() > 0 Тогда 			
			ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Нал", "ОС");
			ПроводкиНУ.Записать(Ложь);
		КонецЕсли;
		
		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийСтоимостьНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();
		
		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьПриход();
		
		АмортизацияОСНУ          = Движения.СтоимостьОСНалоговыйУчет;
		НачислениеАмортизацииНУ  = Движения.НачислениеАмортизацииОСНалоговыйУчет;
		
		ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
		ТаблицаДвиженийАмортизацияНУ.Очистить();
		
		абс_ПричинаСписанияВНУ = ПричинаСписания.абс_ПричинаСписанияВНУ;
		СписокАморГрупп = Новый СписокЗначений;
		СписокАморГрупп.Добавить(Перечисления.АмортизационныеГруппы.ВосьмаяГруппа);
		СписокАморГрупп.Добавить(Перечисления.АмортизационныеГруппы.ДевятаяГруппа);
		СписокАморГрупп.Добавить(Перечисления.АмортизационныеГруппы.ДесятаяГруппа);
		СписокАморГрупп.Добавить(Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа);
		СписокГруппОС = новый СписокЗначений;
		СписокГруппОС.Добавить(Перечисления.ГруппыОС.Здания);
		СписокГруппОС.Добавить(Перечисления.ГруппыОС.Сооружения);
		                		
		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
			
			//Если СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			//	И (СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный
			//	И НЕ (((СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа)
			//	И (СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения))
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа)) Тогда
			//	Продолжить;
			//КонецЕсли;
			
			//Начало изменения по заявке № 7717171 (Григорьев Денис)
			Если Организация <> Справочники.Организации.НайтиПоКоду("000000008") Тогда //Игнорируем для организации "ВОЛГАТРАНСТЕЛЕКОМ"
				Если не абс_СписыватьВ_НУ_ОС(СтруктураШапкиДокумента,СтрокаТЧ) Тогда
					Продолжить;
				КонецЕсли;			
			КонецЕсли;
			//Конец изменения по заявке № 7717171 (Григорьев Денис)
			
			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			ВремСписыватьПо_НУ = Истина;
			Если абс_ПричинаСписанияВНУ = Перечисления.абс_ПричинаСписанияВНУ.ПрекращениеИспользования
				и СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный 
				и ((СписокАморГрупп.НайтиПоЗначению(ТекОС.АмортизационнаяГруппа) <> Неопределено
				и СписокГруппОС.НайтиПоЗначению(ТекОС.ГруппаОС) = Неопределено) // Гущина 2016.10.14 7752342 замена условия. было  <> Неопределено. Сейчас если 8-10 группы НО не здания и сооружения
			или СписокАморГрупп.НайтиПоЗначению(ТекОС.АмортизационнаяГруппа) = Неопределено) Тогда	
				ВремСписыватьПо_НУ = Ложь;
			КонецЕсли;			
			
			Если НЕ (СтрокаТЧ.СтоимостьНУ = 0) Тогда
				
				Если ВремСписыватьПо_НУ Тогда
					// Движения по регистру НачислениеАмортизации
					Движение = НачислениеАмортизацииНУ.Добавить();
					Движение.Организация          = ТекОрганизация;
					Движение.Период               = ДатаДока;
					Движение.ОсновноеСредство     = ТекОС;
					Движение.НачислятьАмортизацию = Ложь;  				
					// Движения по регистру СтоимостьОС
					Движение = ТаблицаДвиженийАмортизацияНУ.Добавить(); 				
					Движение.ОсновноеСредство = ТекОС;
					Движение.Организация      = ТекОрганизация;
					Движение.Амортизация      = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
					Движение.Стоимость        = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
					Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Списание;
				КонецЕсли;
				
				СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_НУ");
				Если СтрокаТЗ <> Неопределено Тогда  					
					СчетУчетаСтоимости   = СтрокаТЗ.СчетУчетаНУ;
					СчетУчетаАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииНУ;					
				КонецЕсли;
				
				// списание балансовой стоимости Д 01.09 К 01.01
				СуммаПроводки = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ; 				
				Если НЕ (СуммаПроводки = 0) Тогда 					
					Проводка = ПроводкиНУ.Добавить(); 					
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "Списание ОС";
					Проводка.Сумма        = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС"; 					
					Проводка.СчетДт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);  					
					Проводка.СчетКт      = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС); 
					Если не ВремСписыватьПо_НУ Тогда
	                    Проводка.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
						Проводка.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
					КонецЕсли;
				КонецЕсли;				
				
				// списание амортизации Д 02.01 К 01.09
				СуммаПроводки = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;   				
				Если НЕ (СуммаПроводки = 0) Тогда 					
					Проводка = ПроводкиНУ.Добавить(); 					
					Проводка.Период      = ДатаДока;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Списание ОС";
					Проводка.Сумма       = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС"; 					
					Проводка.СчетДт      = СчетУчетаАмортизации;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС); 					
					Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					Если не ВремСписыватьПо_НУ Тогда
	                    Проводка.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
						Проводка.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
					КонецЕсли;  					
				КонецЕсли;
				     			
				// списание остаточной стоимости Д 99.01 (91.02) К 01.09
				СуммаПроводки = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.АмортизацияНУ - СтрокаТЧ.АмортизацияЗаМесяцНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				Если НЕ (СуммаПроводки = 0) Тогда 
					
					Если абс_ПричинаСписанияВНУ = Перечисления.абс_ПричинаСписанияВНУ.НедостачаПриИнвентаризации Тогда    						
						//на 94
						Проводка = ПроводкиНУ.Добавить(); 					
						Проводка.Период      = ДатаДока;
						Проводка.Организация = ТекОрганизация;
						Проводка.Содержание  = "Списание ОС";
						Проводка.Сумма       = СуммаПроводки;
						Проводка.НомерЖурнала= "ОС";					
						Проводка.СчетДт      = ПланыСчетов.Налоговый.НедостачиИПотериОтПорчиЦенностей;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "ОсновныеСредства", ТекОС); 
						Проводка.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
						Проводка.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
						Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
						//с 94
						Проводка = ПроводкиНУ.Добавить(); 					
						Проводка.Период      = ДатаДока;
						Проводка.Организация = ТекОрганизация;
						Проводка.Содержание  = "Списание ОС";
						Проводка.Сумма       = СуммаПроводки;
						Проводка.НомерЖурнала = "ОС";					
						Проводка.СчетДт      = СтруктураШапкиДокумента.СчетСписанияНУ;
						Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоНУ) Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоНУ);
						КонецЕсли; 					
						Проводка.СчетКт      = ПланыСчетов.Налоговый.НедостачиИПотериОтПорчиЦенностей;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "ОсновныеСредства", ТекОС); 
	                    Проводка.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
						Проводка.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
						
					Иначе	 						
						Проводка = ПроводкиНУ.Добавить(); 					
						Проводка.Период      = ДатаДока;
						Проводка.Организация = ТекОрганизация;
						Проводка.Содержание  = "Списание ОС";
						Проводка.Сумма       = СуммаПроводки;
						Проводка.НомерЖурнала = "ОС";					
						Проводка.СчетДт      = СтруктураШапкиДокумента.СчетСписанияНУ;
						Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоНУ) Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоНУ);
						КонецЕсли; 					
						Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
						Если не ВремСписыватьПо_НУ Тогда
							Проводка.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
							Проводка.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
						КонецЕсли;

					КонецЕсли; 					
				КонецЕсли;  				
			КонецЕсли;
			
		КонецЦикла;
		
		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();
		
		// Рассчитаем разницы в амортизации на месяц списания
		Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			
			// Формирование массива основных средств, по которым рассчитываются разницы
			МассивОС = Новый Массив;
			Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
				
				//Если НЕ (СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
				//	И (СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный
				//	И НЕ (((СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
				//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
				//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа)
				//	И (СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
				//	ИЛИ СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения))
				//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа)))
				//	ИЛИ СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы
				//	Тогда
				
				//Начало изменения по заявке № 7717171 (Григорьев Денис)
				Если Организация <> Справочники.Организации.НайтиПоКоду("000000008") Тогда //Игнорируем для организации "ВОЛГАТРАНСТЕЛЕКОМ"
					Если абс_СписыватьВ_НУ_ОС(СтруктураШапкиДокумента,СтрокаТЧ) Тогда 
						МассивОС.Добавить(СтрокаОС.ОсновноеСредство); 					
					КонецЕсли;
				Иначе 
					МассивОС.Добавить(СтрокаОС.ОсновноеСредство); 					
				КонецЕсли;
				//Конец изменения по заявке № 7717171 (Григорьев Денис)
				
			КонецЦикла;
			
			Если МассивОС.Количество() > 0 Тогда
				ДвиженияПоРазницам(СтруктураШапкиДокумента, МассивОС, ТаблицаСчетов);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И НЕ Отказ Тогда
		ПроводкиНУ.Записать(Ложь);
		
		//Начало изменения по заявке № 7717171 (Григорьев Денис)
		Если Организация = Справочники.Организации.НайтиПоКоду("000000008") Тогда //Только для организации "ВОЛГАТРАНСТЕЛЕКОМ"
			ДвиженияНУ = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
			ДвиженияНУ.Отбор.Регистратор.Установить(Ссылка);
			ДвиженияНУ.Прочитать();
			Таб = ДвиженияНУ.Выгрузить();
			Для Каждого СтрОС Из ОС Цикл
				Если Дата < '20160101000000' Тогда
					Стоимость = 40000;
				Иначе
					Стоимость = 100000;
				КонецЕсли;				
				Если СтрокаОС.Стоимость <= Стоимость Тогда				
					Для Каждого ПроводкаНУ Из Таб Цикл
						Если ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.НайтиПоКоду("10.12") И ПроводкаНУ.СубконтоДт1 = СтрОС.ОсновноеСредство Тогда							
							ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.ОСвОрганизации;
							ПроводкаНУ.ВидСубконтоКт1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;							
							ПроводкаНУ.СубконтоКт1 = СтрокаОС.ОсновноеСредство;
							ПроводкаНУ.ВидСубконтоКт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
							ПроводкаНУ.СубконтоКт2 = Неопределено;
							ПроводкаНУ.ВидСубконтоКт3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
							ПроводкаНУ.СубконтоКт3 = Неопределено;
						КонецЕсли;			
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			ДвиженияНУ.Загрузить(Таб);
			ДвиженияНУ.Записать();
		КонецЕсли;
		//Конец изменения по заявке № 7717171 (Григорьев Денис)
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДвиженияПоРазницам(СтруктураШапкиДокумента, СписокОС, ТаблицаПоОС)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
		Возврат;
	КонецЕсли;
	
	// Списание разниц счета 01 и 02
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1 КАК Субконто1,
	|	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
	|	0 КАК Сумма02ВР,
	|	0 КАК Сумма01ПР,
	|	0 КАК Сумма01ВР,
	|	0 КАК Сумма01
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|			&КонДата,
	|			Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС),
	|			&ВидСубконто,
	|			ВидУчета = &ВидУчетаПР
	|				И Организация = &Организация
	|				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокКт,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|			&КонДата,
	|			Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС),
	|			&ВидСубконто,
	|			ВидУчета = &ВидУчетаВР
	|				И Организация = &Организация
	|				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|			&КонДата,
	|			Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации),
	|			&ВидСубконто,
	|			ВидУчета = &ВидУчетаПР
	|				И Организация = &Организация
	|				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|			&КонДата,
	|			Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации),
	|			&ВидСубконто,
	|			ВидУчета = &ВидУчетаВР
	|				И Организация = &Организация
	|				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонДата,
	|			Счет В ИЕРАРХИИ (&ХозрасчетныйОСвОрганизации),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	|ИТОГИ
	|	СУММА(Сумма02ПР),
	|	СУММА(Сумма02ВР),
	|	СУММА(Сумма01ПР),
	|	СУММА(Сумма01ВР),
	|	СУММА(Сумма01)
	|ПО
	|	Субконто1";
	
	
	Запрос.УстановитьПараметр("НачДата",  НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонДата",  Новый Граница(КонецМесяца(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("ВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	Запрос.УстановитьПараметр("ХозрасчетныйОСвОрганизации", Массив);
	Запрос.УстановитьПараметр("НалоговыйАмортизацияОС", ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
	Массив.Добавить(ПланыСчетов.Налоговый.ДоходныеВложенияВ_МЦ);
	Запрос.УстановитьПараметр("НалоговыйОСвОрганизации", Массив);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Список = ОС.Выгрузить();
	
	ЕстьПередачаОС = абс_БизнесПроцессыПривелегированный.ЕстьПередачаОС(Новый Структура("СсылкаНаОбъект",Ссылка));
	СчетНУ0101 = ПланыСчетов.Налоговый.ОСвОрганизации;
	СчетНУ1012 = ПланыСчетов.Налоговый.НайтиПоКоду("10.12");
	   	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
		Если СтрокаТаблицы = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		//Романова Н.Г. 23.09.2016  7744519 
		СчетУчетаНУ = СчетНУ0101;

		ПараметрыОС = ТаблицаПоОС.Найти(Выборка.Субконто1, "ОС_НУ");
		Если ПараметрыОС = Неопределено Тогда
			ПараметрыОС = ТаблицаПоОС.Найти(Выборка.Субконто1,"ОС_БУ");
			Если ПараметрыОС = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//СчетУчетаНУ                 = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетУчетаБУ), Ложь, СтруктураШапкиДокумента.Дата);
			//Романова Н.Г. 23.09.2016  7744519 
			СчетНачисленияАмортизацииНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетНачисленияАмортизацииБУ), Ложь, СтруктураШапкиДокумента.Дата);
		Иначе
			//Если Не ЗначениеЗаполнено(ПараметрыОС.СчетУчетаНУ) Тогда
			//	СчетУчетаНУ                 = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетУчетаБУ), Ложь, СтруктураШапкиДокумента.Дата);
			//Иначе
			//	Если ПараметрыОС.СчетУчетаНУ = СчетНУ1012 Тогда 
			//		СчетУчетаНУ = СчетНУ0101;
			//	Иначе 
			//		СчетУчетаНУ                 = ПараметрыОС.СчетУчетаНУ;
			//	КонецЕсли;
			//КонецЕсли;
			//Романова Н.Г. 23.09.2016  7744519 
			Если Не ЗначениеЗаполнено(ПараметрыОС.СчетНачисленияАмортизацииНУ) Тогда
				СчетНачисленияАмортизацииНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетНачисленияАмортизацииБУ), Ложь, СтруктураШапкиДокумента.Дата);
			Иначе
				СчетНачисленияАмортизацииНУ = ПараметрыОС.СчетНачисленияАмортизацииНУ;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.Сумма01Вр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация; 			
			ПроводкаНУ.СчетКт       = СчетУчетаНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
			ПроводкаНУ.Содержание   = "Списание ОС";
			
			//АВИЗО
			Если ЕстьПередачаОС <> Неопределено Тогда
				ПроводкаНУ.СчетДт       = СчетСписанияНУ;	
			Иначе	
				ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			КонецЕсли;
			//АВИЗО
			
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
		КонецЕсли;
		
		Если Выборка.Сумма02Вр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация; 			
			ПроводкаНУ.СчетДт       = СчетНачисленияАмортизацииНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма02Вр;
			ПроводкаНУ.Содержание   = "Списание ОС";
			
			//АВИЗО
			Если ЕстьПередачаОС <> Неопределено Тогда
				ПроводкаНУ.СчетКт       = СчетСписанияНУ;
			Иначе	
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			КонецЕсли;
			//АВИЗО
			
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";			
		КонецЕсли;		
		
		Если Выборка.Сумма01Вр - Выборка.Сумма02Вр <> 0 Тогда 			
			Если ПричинаСписания.абс_ПричинаСписанияВНУ = Перечисления.абс_ПричинаСписанияВНУ.НедостачаПриИнвентаризации Тогда 				
				//на 94 счет
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;			
				ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.НедостачиИПотериОтПорчиЦенностей;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;//T#7720559 Гущина 2017.05.02 Было: ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;, а НедостачаПриИнвентаризации только в элементе спр. причик с кодом 000000014 
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
				ПроводкаНУ.Содержание   = "Списание ОС";
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
				ПроводкаНУ.НомерЖурнала = "ВР"; 	
				//с 94 счет
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;			
				ПроводкаНУ.СчетДт       = СчетСписанияНУ;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство); 
				//+++T#7720559 Гущина 2017.05.02 Было:
				//ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				//ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
				//--- T#7720559 Гущина 2017.05.02
				ПроводкаНУ.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
				ПроводкаНУ.Содержание   = "Списание ОС";
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.НедостачиИПотериОтПорчиЦенностей; 
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			 
				ПроводкаНУ.НомерЖурнала = "ВР"; 				
			Иначе	
				
				Если ЕстьПередачаОС = Неопределено Тогда     //АВИЗО
					ПроводкаНУ              = ПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;			
					ПроводкаНУ.СчетДт       = СчетСписанияНУ;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
					ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
					ПроводкаНУ.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
					ПроводкаНУ.Содержание   = "Списание ОС";
					ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
					ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
					ПроводкаНУ.НомерЖурнала = "ВР";
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.Сумма01Пр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;			
			ПроводкаНУ.СчетКт       = СчетУчетаНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
			ПроводкаНУ.Содержание   = "Списание ОС";
			
			//АВИЗО
			Если ЕстьПередачаОС <> Неопределено Тогда
				ПроводкаНУ.СчетДт       = СчетСписанияНУ;
			Иначе	
				ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
		    КонецЕсли;
			//АВИЗО
			
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
		КонецЕсли;
		
		Если Выборка.Сумма02Пр <> 0 Тогда		
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;   			
			ПроводкаНУ.СчетДт       = СчетНачисленияАмортизацииНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма02Пр;
			ПроводкаНУ.Содержание   = "Списание ОС";
			
			//АВИЗО
			Если ЕстьПередачаОС <> Неопределено Тогда
				ПроводкаНУ.СчетКт       = СчетСписанияНУ;
			Иначе	
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			КонецЕсли;
			//АВИЗО
			
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
		КонецЕсли;		
		
		Если Выборка.Сумма01Пр - Выборка.Сумма02Пр <> 0 Тогда
			Если ПричинаСписания.абс_ПричинаСписанияВНУ = Перечисления.абс_ПричинаСписанияВНУ.НедостачаПриИнвентаризации Тогда 				
				//на 94 счет
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;			
				ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.НедостачиИПотериОтПорчиЦенностей;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);  
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
				ПроводкаНУ.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
				ПроводкаНУ.Содержание   = "Списание ОС";
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
				ПроводкаНУ.НомерЖурнала = "ПР";
				//с 94 счет
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.СчетДт       = СчетСписанияНУ;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				ПроводкаНУ.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
				ПроводкаНУ.Содержание   = "Списание ОС";
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.НедостачиИПотериОтПорчиЦенностей; 
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1); 			 
				ПроводкаНУ.НомерЖурнала = "ПР";
			Иначе			
				Если ЕстьПередачаОС = Неопределено Тогда  //АВИЗО
					ПроводкаНУ              = ПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.СчетДт       = СчетСписанияНУ;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
					ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
					ПроводкаНУ.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
					ПроводкаНУ.Содержание   = "Списание ОС";
					ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
					ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
					ПроводкаНУ.НомерЖурнала = "ПР";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;
	
	ПроводкиНУ.Записать(Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		
		СтрокаТабличнойЧасти = ОС.Добавить();
		
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		
		Организация = Основание.Организация;
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			Если ТекСтрокаОС.НаличиеПоДаннымУчета И НЕ ТекСтрокаОС.НаличиеФактическое Тогда
				
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "Обработка проведения" 
//
Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	//12.12.2017 Крамаренко Д.М.
	//T#7769333 — Необходимо завести статусы в документы
	Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПроведениеДокументовПоОС) = Неопределено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Только сотрудник с ролью ""Ответственный за документы по ОС"" может проводить документ!",Отказ);
		Возврат;
	КонецЕсли;	
	//12.12.2017 Крамаренко Д.М.
	//T#7769333 — Необходимо завести статусы в документы
	
	//Бобылев А.А. 10.09.2018	CHG149
	//При проведении должны проверяться 2 условия. Если хоть одно не выполнено, добавляется 3 условие. При невыполнении 3 условия - выдать ошибку.
	ПервоеУсловие = Ложь;
	Если Событие = Справочники.СобытияОС.НайтиПоКоду("000000011") Тогда
		ПервоеУсловие = Истина;
	КонецЕсли;
	//Проверяем, чтобы не было ТС
	Индекс = 0;
	Для каждого Элемент ИЗ ОС Цикл
		Индекс = Индекс + 1;
		Если Элемент.ОсновноеСредство.Автотранспорт И ПервоеУсловие Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Запрещено списывать автотранспорт при выбранном событии в строке " + Индекс,Отказ);
		//ИначеЕсли Элемент.ОсновноеСредство.Автотранспорт И НЕ ПервоеУсловие  Тогда
		//	Если НЕ ПроверкаРегистраТС(Элемент.ОсновноеСредство) Тогда
		//		ttk_ОбщегоНазначения.СообщитьОбОшибке("В строке " + Индекс + " в качестве основного средства выбран автотранспорт, находящийся на регистрационном учете.",Отказ);
		//	КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Бобылев А.А. --------------------
	
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ПериодРегистрации", КонецМесяца(Дата));
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("ПоддержкаПБУ18, МетодНачисленияАмортизацииНУ");
		ttk_ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух", СтруктураПолейУчетнойПолитикиНУ);
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(РежимПроведения,Отказ, Заголовок, СтруктураШапкиДокумента);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство",     "ОсновноеСредство");
	СтруктураПолей.Вставить("Стоимость",            "Стоимость");
	СтруктураПолей.Вставить("Амортизация",          "Амортизация");
	СтруктураПолей.Вставить("АмортизацияЗаМесяц",   "АмортизацияЗаМесяц");
	СтруктураПолей.Вставить("СписаноНаЗатраты",     "СписаноНаЗатраты");
	
	СтруктураПолей.Вставить("СтоимостьБУ",          "СтоимостьБУ");
	СтруктураПолей.Вставить("АмортизацияБУ",        "АмортизацияБУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ", "АмортизацияЗаМесяцБУ");
	СтруктураПолей.Вставить("СписаноНаЗатратыБУ",   "СписаноНаЗатратыБУ");
	
	СтруктураПолей.Вставить("СтоимостьНУ",          "СтоимостьНУ");
	СтруктураПолей.Вставить("АмортизацияНУ",        "АмортизацияНУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ", "АмортизацияЗаМесяцНУ");
	
	СтруктураПолей.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходыНУ", "СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
	
	// подготовка таблицы для списания
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",       Дата);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство                                                                         КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство                      КАК ОС_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство                          КАК ОС_НУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                                       КАК ОС_УУ,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации     КАК Направление_НУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации                  КАК Направление_УУ,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов    КАК ПорядокВключенияСтоимостиВСоставРасходовНУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство";
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПООс.Колонки.Добавить("ПорядокВключенияСтоимостиВСоставРасходовНУ");
	
	Для Каждого СтрокаОС ИЗ ТаблицаПоОС Цикл
		СтрокаНаправлений = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
		СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = ?(СтрокаНаправлений = Неопределено, Ложь, СтрокаНаправлений.ПорядокВключенияСтоимостиВСоставРасходовНУ);
	КонецЦикла;
	
	//АБС ВСТАВКА №14902 НАЧАЛО
	Если Константы.абс_КонтрольСписанияОС.Получить() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобытияОС.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ вр
		|ИЗ
		|	Справочник.СобытияОС КАК СобытияОС
		|ГДЕ
		|	(НЕ СобытияОС.ПометкаУдаления)
		|	И СобытияОС.абс_КонтролироватьПриСписании
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	События.ОсновноеСредство КАК ОсновноеСредство,
		|	События.Событие
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(
		|			,
		|			Организация В (&Организация)
		|				И ОсновноеСредство В (&ОсновноеСредство)
		|				И Событие В
		|					(ВЫБРАТЬ
		|						вр.Ссылка
		|					ИЗ
		|						вр КАК вр)) КАК События
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ вр";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ОсновноеСредство",ОС.ВыгрузитьКолонку("ОсновноеСредство"));
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока РезультатЗапроса.Следующий() Цикл
			Сообщить("ОС - """+РезультатЗапроса.ОсновноеСредство + """ уже было в событии - "+РезультатЗапроса.Событие,СтатусСообщения.Важное); 
			Отказ = Истина;
		КонецЦикла;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	//\\АБС ВСТАВКА №14902 КОНЕЦ
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок);
	КонецЕсли;
	
	//Филиализация
	Если абс_БизнесПроцессыПривелегированный.ЕстьПередачаОС(Новый Структура("СсылкаНаОбъект",Ссылка)) <> Неопределено Тогда
		Если Не Отказ Тогда
			Для каждого Стр Из ОС Цикл
				мОС = Стр.ОсновноеСредство.ПолучитьОбъект();
				мОС.абс_СтатусОС = Перечисления.абс_СтатусыОС.Закрыт;
			// {{KM WARE Малыгин П.К. Заявка № 08.12.2015 начало
			// Изменение кодов старого и нового ОС нужно свести в одну функцию в одном месте
					
		
			//	Если Не ЗначениеЗаполнено(мОС.абс_КодДляПоиска) Тогда
			//		мОС.абс_КодДляПоиска          = мОС.Код;	
			//	КонецЕсли;
			//	
			//	Если Не ЗначениеЗаполнено(мОС.абс_НаименованиеДляПоиска) Тогда
			//		мОС.абс_НаименованиеДляПоиска = мОС.Наименование;
			//	КонецЕсли;
			//
			//	мОС.Код          = "_" + Прав(СокрЛП(мОС.абс_КодДляПоиска),СтрДлина(СокрЛП(мОС.абс_КодДляПоиска)) - 1);
			//	//	мОС.Наименование = "_" + Прав(СокрЛП(мОС.абс_НаименованиеДляПоиска),СтрДлина(СокрЛП(мОС.абс_НаименованиеДляПоиска)) - 1);
			//	мОС.Наименование = " " + мОС.абс_НаименованиеДляПоиска;
			
			// }}KM WARE Малыгин П.К. Заявка № 08.12.2015 окончание 	
				мОС.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//Филиализация
	
 // {{KM WARE Агапов Н.А. Заявка №34547 21.09.2015 начало
 //Оставляем списание только по табличной части
 
// {{KM WARE Семенов И.С. Заявка №32982 23.07.2015 начало
// списываем ВСЕ остатки по НУ, ВНЕ зависимости от того, что в документе
//	если (НЕ Отказ) и ОтражатьВНалоговомУчете тогда
//		Дв=Движения.Налоговый;
//		если Дв.Количество()>0 тогда
//			Дв.Записать();
//		конецесли;
////		Дв.Очистить();
//		Дв.Прочитать();
//		Сч01=ПланыСчетов.Налоговый.НайтиПоКоду("01.01");
//		Сч02=ПланыСчетов.Налоговый.НайтиПоКоду("02.01");
//		Сч09=ПланыСчетов.Налоговый.НайтиПоКоду("01.09");
//		
//		зп=новый запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
//						|	А.СчетДт,
//						|	А.ОсновноеСредство,
//						|	А.СубконтоДт1,
//						|	А.СубконтоДт2,
//						|	А.СубконтоДт3,
//						|	СУММА(А.Сумма) КАК Сумма
//						|ИЗ
//						|	(ВЫБРАТЬ
//						|		Соот.СчетНУ КАК СчетДт,
//						|		ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК ОсновноеСредство,
//						|		ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
//						|		ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
//						|		ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
//						|		ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма
//						|	ИЗ
//						|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ХозрасчетныйДвиженияССубконто
//						|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&КонГраница, ВидЗатратНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.Амортизация)) КАК Соот
//						|			ПО (Соот.СчетБУ = ХозрасчетныйДвиженияССубконто.СчетДт)
//						|				И (Соот.Учитывается)
//						|	ГДЕ
//						|		ХозрасчетныйДвиженияССубконто.Регистратор = &Регистратор
//						|		И ХозрасчетныйДвиженияССубконто.СчетКт = &Сч02
//						|	
//						|	ОБЪЕДИНИТЬ ВСЕ
//						|	
//						|	ВЫБРАТЬ
//						|		ХозрасчетныйДвиженияССубконто.СчетДт,
//						|		ХозрасчетныйДвиженияССубконто.СубконтоКт1,
//						|		ХозрасчетныйДвиженияССубконто.СубконтоДт1,
//						|		ХозрасчетныйДвиженияССубконто.СубконтоДт2,
//						|		ХозрасчетныйДвиженияССубконто.СубконтоДт3,
//						|		-ХозрасчетныйДвиженияССубконто.Сумма
//						|	ИЗ
//						|		РегистрБухгалтерии.Налоговый.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ХозрасчетныйДвиженияССубконто
//						|	ГДЕ
//						|		ХозрасчетныйДвиженияССубконто.Регистратор = &Регистратор
//						|		И ХозрасчетныйДвиженияССубконто.СчетКт = &СчНУ02) КАК А
//						|
//						|СГРУППИРОВАТЬ ПО
//						|	А.СчетДт,
//						|	А.ОсновноеСредство,
//						|	А.СубконтоДт1,
//						|	А.СубконтоДт2,
//						|	А.СубконтоДт3");
//		зп.УстановитьПараметр("Сч02",ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.01"));
//		зп.УстановитьПараметр("СчНУ02",Сч02);
//		зп.УстановитьПараметр("Регистратор",Ссылка);
//		зп.УстановитьПараметр("КонГраница",
//			новый Граница(ЭтотОбъект.МоментВремени(),ВидГраницы.Включая));
//		рз=зп.Выполнить().Выбрать();
//		ТЗАмортТекМес=новый таблицаЗначений;
//		ТЗАмортТекМес.Колонки.Добавить("ОсновноеСредство");
//		ТЗАмортТекМес.Колонки.Добавить("Сумма");
//		ПроводкиЕсть=ложь;
//		пока рз.Следующий() цикл
//			если рз.Сумма<>0 Тогда
//				ЗаполнитьЗначенияСвойств(ТЗАмортТекМес.Добавить(),рз);
//				стН=дв.Добавить();
//				стН.ВидУчетаДт=Перечисления.ВидыУчетаПоПБУ18.ВР;
//				стН.ВидУчетаКт=Перечисления.ВидыУчетаПоПБУ18.ВР;
//				стН.ДатаЗаписи=Дата;
//				стН.Организация=Организация;
//				стН.Сумма=рз.Сумма;
//				стН.СчетДт=рз.СчетДт;
//				стН.СчетКт=Сч02;
//				БухгалтерскийУчет.УстановитьСубконто(стН.СчетДт, стН.СубконтоДт,1, рз.СубконтоДт1);
//				БухгалтерскийУчет.УстановитьСубконто(стН.СчетДт, стН.СубконтоДт,2, рз.СубконтоДт2);
//				БухгалтерскийУчет.УстановитьСубконто(стН.СчетДт, стН.СубконтоДт,3, рз.СубконтоДт3);
//				БухгалтерскийУчет.УстановитьСубконто(стН.СчетКт, стН.СубконтоКт, "ОсновныеСредства", рз.ОсновноеСредство);
//				ПроводкиЕсть=истина;
//			конецесли;
//		конеццикла;
//		если ПроводкиЕсть тогда
//			Дв.Записать();
////			Дв.Очистить();
//		конецесли;
//		зп=новый запрос("ВЫБРАТЬ разрешенные
//						|	НалоговыйОстатки.Счет,
//						|	НалоговыйОстатки.Субконто1 КАК Субконто1,
//						|	НалоговыйОстатки.ВидУчета КАК ВидУчета,
//						|	НалоговыйОстатки.СуммаОстаток
//						|ИЗ
//						|	РегистрБухгалтерии.Налоговый.Остатки(
//						|			&КонГраница,
//						|			Счет = &Сч01
//						|				ИЛИ Счет = &Сч02,
//						|			&мСубконтоОсновныеСредства,
//						|			Субконто1 в (&мОсновныеСредства)
//						|				И Организация = &Организация) КАК НалоговыйОстатки
//						|ИТОГИ ПО
//						|	Субконто1,
//						|	ВидУчета");
//		зп.УстановитьПараметр("КонГраница",
//			новый Граница(ЭтотОбъект.МоментВремени(),ВидГраницы.Включая));
//			
//		зп.УстановитьПараметр("ВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
//		зп.УстановитьПараметр("ПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
//		зп.УстановитьПараметр("Сч01",Сч01);
//		зп.УстановитьПараметр("Сч02",Сч02);
//		мОсновныеСредства=ОС.ВыгрузитьКолонку("ОсновноеСредство");
//		зп.УстановитьПараметр("мОсновныеСредства",мОсновныеСредства);
//		мСубконтоОсновныеСредства=новый массив;
//		мСубконтоОсновныеСредства.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
//		зп.УстановитьПараметр("мСубконтоОсновныеСредства",мСубконтоОсновныеСредства);
//		зп.УстановитьПараметр("Организация",Организация);
//		рз=зп.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//		ПроводкиЕсть=ложь;
//		пока рз.Следующий() цикл
//			рз2=рз.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//			пока рз2.Следующий() цикл
//				рз3=рз2.Выбрать();
//				Сумма09=0;
//				//СуммаДобаленнойАмортизацииВР=0;
//				//если рз2.ВидУчета=Перечисления.ВидыУчетаПоПБУ18.ВР тогда
//				//	м=ТЗАмортТекМес.НайтиСтроки(новый структура("ОсновноеСредство",рз2.ОсновноеСредство));
//				//	если м.Количество()>0 Тогда
//				//		СуммаДобаленнойАмортизацииВР=м[0].Сумма;
//				//	конецесли;
//				//конецесли;
//				пока рз3.Следующий() цикл
//					ПроводкиЕсть=истина;
//					стН=дв.Добавить();
//					стН.ВидУчетаДт=рз3.ВидУчета;
//					стН.ВидУчетаКт=рз3.ВидУчета;
//					стН.ДатаЗаписи=Дата;
//					стН.Организация=Организация;
//					стН.Сумма=рз3.СуммаОстаток;
//					Сумма09=Сумма09+стН.Сумма;
//					если рз3.Счет=Сч01 тогда
//						стН.СчетДт=Сч09;
//						стН.СчетКт=Сч01;
//					иначе
//						стН.СчетДт=Сч02;
//						стН.СчетКт=Сч09;
//						стН.Сумма=-стН.Сумма;//-СуммаДобаленнойАмортизацииВР;
//					конецесли;
////					Сумма09=Сумма09-СуммаДобаленнойАмортизацииВР;
//					БухгалтерскийУчет.УстановитьСубконто(стН.СчетДт, стН.СубконтоДт, "ОсновныеСредства", рз3.Субконто1);
//					БухгалтерскийУчет.УстановитьСубконто(стН.СчетКт, стН.СубконтоКт, "ОсновныеСредства", рз3.Субконто1);
//				конеццикла;
//				если Сумма09<>0 тогда
//					стН=дв.Добавить();
//					стН.ВидУчетаДт=рз2.ВидУчета;
//					стН.ВидУчетаКт=рз2.ВидУчета;
//					стН.ДатаЗаписи=Дата;
//					стН.Организация=Организация;
//					стН.Сумма=Сумма09;
//					стН.СчетДт=СчетСписанияНУ;
//					стН.СчетКт=Сч09;
//					Сумма09=Сумма09+стН.Сумма;
//					БухгалтерскийУчет.УстановитьСубконто(стН.СчетКт, стН.СубконтоКт, "ОсновныеСредства", рз2.Субконто1);
//					БухгалтерскийУчет.УстановитьСубконто(стН.СчетДт, стН.СубконтоДт, 1, СубконтоНУ);
//				конецесли;
//			конеццикла;
//		конеццикла;
//		если ПроводкиЕсть тогда
//			Дв.Записать();
//		конецесли;
//	конецесли;
// }}KM WARE Семенов И.С. Заявка №32982 23.07.2015 окончание
// }}KM WARE Агапов Н.А. Заявка №34547 21.09.2015 окончание
КонецПроцедуры // ОбработкаПроведения()


//Бобылев А.А. 10.09.2018 CHG149
Функция ПроверкаРегистраТС(ОС)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрацияТранспортныхСредствСрезПоследних.ВидЗаписи
	               |ИЗ
	               |	РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(&ТекущаяДата, ОсновноеСредство = &ОС) КАК РегистрацияТранспортныхСредствСрезПоследних";
	Запрос.УстановитьПараметр("текущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОС", ОС);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Выборка.ВидЗаписи = Перечисления.ВидЗаписиОРегистрации.СнятиеСРегистрационногоУчета Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
//Бобылев А.А.-----------

//Филиализация
Процедура ОбработкаУдаленияПроведения(Отказ)
	Если абс_БизнесПроцессыПривелегированный.ЕстьПередачаОС(Новый Структура("СсылкаНаОбъект",Ссылка)) <>  Неопределено Тогда
		Если Не Отказ Тогда
		// {{KM WARE Малыгин П.К. Заявка № 29.10.2015 начало
		// Это не нужно
		
			//Для каждого Стр Из ОС Цикл
			//	мОС = Стр.ОсновноеСредство.ПолучитьОбъект();
			//	мОС.Код          = мОС.абс_КодДляПоиска;	
			//	мОС.Наименование = мОС.абс_НаименованиеДляПоиска;
			//	мОС.абс_СтатусОС = Перечисления.абс_СтатусыОС.Согласовано;
			//	мОС.Записать();
			//КонецЦикла;
			

		// }}KM WARE Малыгин П.К. Заявка № 29.10.2015 окончание 		
			КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Филиализация

// Процедура - обработчик события "При копировании" 
//
Процедура ПриКопировании(ОбъектКопирования)
	
	мСкопирован = Истина;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ДвиженияПоРегистрамРеглМеждуФилиалами(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)
	
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация",  ТекОрганизация);
	Запрос.УстановитьПараметр("ТекДата",         ДатаДока);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство                                              КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство          КАК ОС_БУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета                 КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета                     КАК СчетУчетаНУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство              КАК ОС_НУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации     КАК СчетНачисленияАмортизацииНУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|";
	ТаблицаСчетов  = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат
		
		АмортизацияОС  = Движения.СтоимостьОСБухгалтерскийУчет;
		
		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();
		
		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Сумма",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
		
		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
			
			Если НЕ (СтрокаОС.АмортизацияЗаМесяцБУ = 0) Тогда
				
				НоваяСтрока = ТабАмортизации.Добавить();
				
				НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцБУ;
				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
				
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_БУ);
				
				СтрокаТЗ = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
				Если СтрокаТЗ <> Неопределено Тогда
					
					НоваяСтрока.СчетАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииБУ;
					
				Иначе
					
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + СтрокаОС.ОсновноеСредство.Наименование +
					" не отражалось в бух. учете в организации " + ТекОрганизация, Отказ); 	
					Возврат;
					
				КонецЕсли;
				
				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				
				Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцБУ;
				Движение.Стоимость        = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//вызов процедуры списания амортизации по направлениям
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","ОС");
		ТабАмортизацииБУ = ТабАмортизации;
		
		АмортизацияОС.мПериод          = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();
		
		СобытиеОС             = Движения.СобытияОСОрганизаций;
		СостояниеОС			  = Движения.СостоянияОСОрганизаций;	
		АмортизацияОС         = Движения.СтоимостьОСБухгалтерскийУчет;
		ОССписанныеНаЗатраты  = Движения.ОССписанныеНаЗатратыОрганизаций;
		НачислениеАмортизации = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
		ПроводкиБУ            = Движения.Хозрасчетный;
		
		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();
		
		ТаблицаДвиженийОССписанныеНаЗатраты = ОССписанныеНаЗатраты.Выгрузить();
		
		Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
			//АБС Заявка на модификацию 07.13
			абс_СчетСписанияБУ = СтруктураШапкиДокумента.СчетСписанияБУ;
			//\\
			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			// Движения по регистру НачислениеАмортизации
			Движение = НачислениеАмортизации.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.НачислятьАмортизацию = Ложь;
			
			// Движения по регистру СобытияОС
			Движение = СобытиеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
			Движение.НазваниеДокумента 	  = Метаданные().Представление();
			Движение.НомерДокумента		  = Номер;
			
			// Движения по регистру СостоянияОС
			//Движение = СостояниеОС.Добавить();
			//Движение.Период               = ДатаДока;
			//Движение.ОсновноеСредство     = ТекОС;
			//Движение.Организация          = ТекОрганизация;
			//Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
			//Движение.ДатаСостояния		  = ДатаДока;
			
			//АБС Заявка Цвили
			Если мТабСостояний<>Неопределено Тогда
				СтрокаСостояния =  мТабСостояний.Найти(ТекОС,"ОсновноеСредство");
				Если СтрокаСостояния<>Неопределено Тогда
					Если Не СтрокаСостояния.СнятоБУ  Тогда
						Движение = СостояниеОС.Добавить();
						Движение.Период               = ДатаДока;
						Движение.ОсновноеСредство     = ТекОС;
						Движение.Организация          = ТекОрганизация;
						Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
						Движение.ДатаСостояния		  = ДатаДока;
						
						
					КонецЕсли;
				Иначе
					
					Движение = СостояниеОС.Добавить();
					Движение.Период               = ДатаДока;
					Движение.ОсновноеСредство     = ТекОС;
					Движение.Организация          = ТекОрганизация;
					Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
					Движение.ДатаСостояния		  = ДатаДока;
					
					
				КонецЕсли;
			Иначе
				
				Движение = СостояниеОС.Добавить();
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
				Движение.ДатаСостояния		  = ДатаДока;
				
				//АБС заявка Цвили
			КонецЕсли;
			//\\АБС
			
			
			Если НЕ СтрокаТЧ.СписаноНаЗатратыБУ И НЕ (СтрокаТЧ.СтоимостьБУ = 0) Тогда
				
				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				Движение.ОсновноеСредство = ТекОС;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаТЧ.АмортизацияБУ+СтрокаТЧ.АмортизацияЗаМесяцБУ;
				Движение.Стоимость        = СтрокаТЧ.СтоимостьБУ;
				Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Списание;
				
				СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_БУ");
				
				Если СтрокаТЗ <> Неопределено Тогда
					
					СчетУчетаСтоимости  = СтрокаТЗ.СчетУчетаБУ;
					СчетУчетаАмортизации= СтрокаТЗ.СчетНачисленияАмортизацииБУ;
					
				Иначе
					
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + ТекОс.Наименование +
					" не отражалось в бух. учете в организации " + ТекОрганизация,Отказ); 	
					Возврат;
					
				КонецЕсли;
				
				// списание амортизации Д 02.01 К 01.09
				СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
				
				Если НЕ (СуммаПроводки = 0) Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "Списание ОС";
					Проводка.Сумма        = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";
					
					Проводка.СчетДт      = СчетУчетаАмортизации;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Проводка.СчетКт      = абс_СчетСписанияБУ;
					Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоБУ) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоБУ);
					КонецЕсли;
					
				КонецЕсли;
				
				// списание балансовой стоимости Д 01.09 К 01.01
				СуммаПроводки = СтрокаТЧ.СтоимостьБУ;
				
				Если НЕ (СуммаПроводки = 0) Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Сумма        = СтрокаТЧ.СтоимостьБУ;
					Проводка.Содержание   = "Списание ОС";
					Проводка.НомерЖурнала = "ОС";
					
					Проводка.СчетДт      = абс_СчетСписанияБУ;
					Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоБУ) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоБУ);
					КонецЕсли;
					
					Проводка.СчетКт      = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
				КонецЕсли;
				
				//// списание остаточной стоимости Д 99.01 (91.02) К 01.09
				//СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
				
				//Если НЕ (СуммаПроводки = 0) Тогда
				
				//	Проводка = ПроводкиБУ.Добавить();
				//	Проводка.Период       = ДатаДока;
				//	Проводка.Организация  = ТекОрганизация;
				//	Проводка.Содержание   = "Списание ОС";
				//	Проводка.Сумма        = СуммаПроводки;
				//	Проводка.НомерЖурнала = "ОС";
				
				//	Проводка.СчетДт = СтруктураШапкиДокумента.СчетСписанияБУ;
				//	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоБУ) Тогда
				//		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоБУ);
				//	КонецЕсли;
				//							 
				//	//Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
				//	Проводка.СчетКт      = абс_СчетСписанияБУ;
				//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
				//КонецЕсли;
				
			Иначе
				
				// Движения по регистру ОССписанныеНаЗатраты
				Движение = ТаблицаДвиженийОССписанныеНаЗатраты.Добавить();
				
				Движение.ОсновноеСредство = ТекОС;
				Движение.Организация      = ТекОрганизация;
				Движение.Стоимость        = СтрокаТЧ.СтоимостьБУ;
				
			КонецЕсли;
			
		КонецЦикла;
		
		АмортизацияОС.мПериод                    = ДатаДока;
		АмортизацияОС.мТаблицаДвижений           = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьРасход();
		
		ОССписанныеНаЗатраты.мПериод             = ДатаДока;
		ОССписанныеНаЗатраты.мТаблицаДвижений    = ТаблицаДвиженийОССписанныеНаЗатраты;
		Движения.ОССписанныеНаЗатратыОрганизаций.ВыполнитьРасход();
		
		ПроводкиБУ.Записать(Ложь);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
		
		ПроводкиНУ = Движения.Налоговый;
		
		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат
		
		АмортизацияОСНУ = Движения.СтоимостьОСНалоговыйУчет;
		
		ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
		ТаблицаДвиженийАмортизацияНУ.Очистить();
		
		ТаблицаДвиженийСтоимостьНУ = ТаблицаДвиженийАмортизацияНУ.Скопировать();
		
		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Сумма",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("СчетУчетаНУ");
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
		ТабАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
		
		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
			
			//Если СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			//	И (СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный
			//	И НЕ (((СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа)
			//	И (СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения))
			//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа)) Тогда
			//	Продолжить;
			//КонецЕсли;
			
			Если НЕ (СтрокаОС.АмортизацияЗаМесяцНУ = 0) Тогда
				
				НоваяСтрока = ТабАмортизации.Добавить();
				
				НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцНУ;
				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
				
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_НУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_НУ);
				
				СтрокаТЗ = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_НУ");
				Если СтрокаТЗ <> Неопределено Тогда
					НоваяСтрока.СчетАмортизацииНУ = СтрокаТЗ.СчетНачисленияАмортизацииНУ;
					НоваяСтрока.СчетУчетаНУ       = СтрокаТЗ.СчетУчетаНУ;
				Иначе
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + СтрокаОС.ОсновноеСредство.Наименование +
					" не отражалось в налог. учете в организации " + ТекОрганизация, Отказ); 	
					Возврат;
				КонецЕсли;
				
				Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();
				
				Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцНУ;
				Движение.Стоимость        = 0;
				
				НоваяСтрока.СуммаКапитальныхВложенийВключаемыхВРасходы = СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Включение амортизационной премии в состав расходов.
		ТабКапитальныхВложений = ТабАмортизации.Скопировать();
		ТабКапитальныхВложений.Колонки.Добавить("СуммаБУ",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабКапитальныхВложений.Колонки.Добавить("СуммаПР",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабКапитальныхВложений.Колонки.Удалить("Сумма");
		
		// Формирование списка основных средств, по которым отражается амортизационная премия
		СписокОС = Новый Массив;
		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
			
			//Если НЕ (СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			//  И (СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный
			//	И НЕ (((СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
			//			 ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
			//			 ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа)
			//		   И (СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
			//			  ИЛИ СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения))
			//	  ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа))) Тогда
			
			СписокОС.Добавить(СтрокаОС.ОсновноеСредство);
			
			//КонецЕсли;
			
		КонецЦикла;
		
		Если СписокОС.Количество() > 0 Тогда
			НалоговыйУчет.РасчетАмортизационнойПремии(ЭтотОбъект, СтруктураШапкиДокумента, СписокОС, ТабКапитальныхВложений, ПроводкиНУ, ТаблицаДвиженийСтоимостьНУ, Отказ, Заголовок);			
		КонецЕсли;
		
		//вызов процедуры списания амортизации по направлениям
		Если  СписокОС.Количество() > 0 
			И  СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, "ОС", СписокОС, ТабАмортизации, ТабЗатрат, ТабАмортизацииБУ);
		КонецЕсли;
		
		Если  СписокОС.Количество() > 0 Тогда
			
			ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Нал", "ОС");
			ПроводкиНУ.Записать(Ложь);
		КонецЕсли;
		
		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийСтоимостьНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();
		
		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьПриход();
		
		АмортизацияОСНУ          = Движения.СтоимостьОСНалоговыйУчет;
		НачислениеАмортизацииНУ  = Движения.НачислениеАмортизацииОСНалоговыйУчет;
		
		ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
		ТаблицаДвиженийАмортизацияНУ.Очистить();
		
		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
			
			// Если СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			//   И (СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный
			//	 И НЕ (((СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
			//			  ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
			//			  ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа)
			//			И (СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
			//			   ИЛИ СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения))
			//	   ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа)) Тогда
			//	   Продолжить;
			//КонецЕсли;
			//АБС НАЧАЛО Заявка на модификацию 07.13
			абс_СчетСписанияНУ = СтруктураШапкиДокумента.СчетСписанияНУ;
			//\\АБС
			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			Если НЕ (СтрокаТЧ.СтоимостьНУ = 0) Тогда
				
				// Движения по регистру НачислениеАмортизации
				Движение = НачислениеАмортизацииНУ.Добавить();
				Движение.Организация          = ТекОрганизация;
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.НачислятьАмортизацию = Ложь;
				
				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();
				
				Движение.ОсновноеСредство = ТекОС;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
				Движение.Стоимость        = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Списание;
				
				СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_НУ");
				Если СтрокаТЗ <> Неопределено Тогда
					
					СчетУчетаСтоимости   = СтрокаТЗ.СчетУчетаНУ;
					СчетУчетаАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииНУ;
					
				КонецЕсли;
				
				// списание амортизации Д 02.01 К 01.09
				СуммаПроводки = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
				
				Если НЕ (СуммаПроводки = 0) Тогда
					
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период      = ДатаДока;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Списание ОС";
					Проводка.Сумма       = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";
					
					Проводка.СчетДт      = СчетУчетаАмортизации;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					//Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					Проводка.СчетКт      = абс_СчетСписанияНУ;
					Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоНУ) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоНУ);
					КонецЕсли;
					
				КонецЕсли;
				
				// списание балансовой стоимости Д 01.09 К 01.01
				СуммаПроводки = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				
				Если НЕ (СуммаПроводки = 0) Тогда
					
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "Списание ОС";
					Проводка.Сумма        = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";
					
					//Проводка.СчетДт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					Проводка.СчетДт      = абс_СчетСписанияНУ;
					Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоНУ) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоНУ);
					КонецЕсли;
					
					Проводка.СчетКт      = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
				КонецЕсли;
				
				//// списание остаточной стоимости Д 99.01 (91.02) К 01.09
				//СуммаПроводки = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.АмортизацияНУ - СтрокаТЧ.АмортизацияЗаМесяцНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				
				//Если НЕ (СуммаПроводки = 0) Тогда
				
				//	Проводка = ПроводкиНУ.Добавить();
				
				//	Проводка.Период      = ДатаДока;
				//	Проводка.Организация = ТекОрганизация;
				//	Проводка.Содержание  = "Списание ОС";
				//	Проводка.Сумма       = СуммаПроводки;
				//	Проводка.НомерЖурнала = "ОС";
				
				//	Проводка.СчетДт      = СтруктураШапкиДокумента.СчетСписанияНУ;
				//	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоНУ) Тогда
				//		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоНУ);
				//	КонецЕсли;
				
				//	//Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
				//	Проводка.СчетКт      = абс_СчетСписанияНУ;
				//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
				//КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();
		
		// Рассчитаем разницы в амортизации на месяц списания
		Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			
			// Формирование массива основных средств, по которым рассчитываются разницы
			МассивОС = Новый Массив;
			Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
				
				//  Если НЕ (СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
				//И (СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный
				//  И НЕ (((СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
				//		   ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
				//		   ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа)
				//		 И (СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
				//			ИЛИ СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения))
				//	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа))) Тогда
				
				МассивОС.Добавить(СтрокаОС.ОсновноеСредство);
				
				//КонецЕсли;
				
			КонецЦикла;
			
			Если МассивОС.Количество() > 0 Тогда
				ДвиженияПоРазницам(СтруктураШапкиДокумента, МассивОС, ТаблицаСчетов);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И НЕ Отказ Тогда
		ПроводкиНУ.Записать(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

//АБС ВСТАВКА №20336 НАЧАЛО
Функция абс_СписыватьВ_НУ_ОС(СтруктураШапкиДокумента,СтрокаТЧ)
	
	абс_СписыватьВ_НУ = Ложь;
	Если не СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		Возврат абс_СписыватьВ_НУ;
	КонецЕсли;	
	
	врГруппаОС = СтрокаТЧ.ОсновноеСредство.ГруппаОС;
	врАмортизационнаяГруппа = СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа;
	абс_ПричинаСписанияВНУ = ПричинаСписания.абс_ПричинаСписанияВНУ;
	СписокАморГрупп = Новый СписокЗначений;
	СписокАморГрупп.Добавить(Перечисления.АмортизационныеГруппы.ВосьмаяГруппа);
	СписокАморГрупп.Добавить(Перечисления.АмортизационныеГруппы.ДевятаяГруппа);
	СписокАморГрупп.Добавить(Перечисления.АмортизационныеГруппы.ДесятаяГруппа);
	СписокАморГрупп.Добавить(Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа);
	СписокГруппОС = новый СписокЗначений;
	СписокГруппОС.Добавить(Перечисления.ГруппыОС.Здания);
	СписокГруппОС.Добавить(Перечисления.ГруппыОС.Сооружения);
	
	Если абс_ПричинаСписанияВНУ.Пустая()
		или абс_ПричинаСписанияВНУ = Перечисления.абс_ПричинаСписанияВНУ.НеСписыватьВНУ
		//при частичном списании, списание в НУ происходит документом "абс_ЧастичнаяЛиквидацияОС"
		или абс_ПричинаСписанияВНУ = Перечисления.абс_ПричинаСписанияВНУ.ЧастичнаяЛиквидация Тогда
		абс_СписыватьВ_НУ = Ложь;
		
	ИначеЕсли абс_ПричинаСписанияВНУ = Перечисления.абс_ПричинаСписанияВНУ.ВСвязиСЧрезвычайнымиОбстоятельствами
		или абс_ПричинаСписанияВНУ = Перечисления.абс_ПричинаСписанияВНУ.ПеремещениеВнутриКомпании
		или абс_ПричинаСписанияВНУ = Перечисления.абс_ПричинаСписанияВНУ.НедостачаПриИнвентаризации Тогда	
		//Для любого метода амортизации и любых ОС
		//если причина "НедостачаПриИнвентаризации" списание с использованием счета 94, иначе списание без использования счета 94
		абс_СписыватьВ_НУ = Истина;
		
	ИначеЕсли абс_ПричинаСписанияВНУ = Перечисления.абс_ПричинаСписанияВНУ.ПрекращениеИспользования Тогда	
		
		Если СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный 
			и ((СписокАморГрупп.НайтиПоЗначению(врАмортизационнаяГруппа) <> Неопределено
				 и СписокГруппОС.НайтиПоЗначению(врГруппаОС) = Неопределено) // Гущина 2016.10.14 7752342 замена условия. было  <> Неопределено. Сейчас если 8-10 группы НО не здания и сооружения
				или СписокАморГрупп.НайтиПоЗначению(врАмортизационнаяГруппа) = Неопределено) Тогда	
            абс_СписыватьВ_НУ = Истина;
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда 
			абс_СписыватьВ_НУ = Истина;			
		КонецЕсли;
			
	КонецЕсли;
		  	
	Возврат абс_СписыватьВ_НУ;	
		
КонецФункции	

//\\АБС ВСТАВКА №20336 КОНЕЦ

мСкопирован = Ложь;

мТабСостояний = Неопределено;
//12.12.2017 Крамаренко Д.М.
//T#7769333 — Необходимо завести статусы в документы
мРолиПользователя 		= абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь"));
//12.12.2017 Крамаренко Д.М.
//T#7769333 — Необходимо завести статусы в документы