Перем ЗапретОткрытияДокумента Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные табличные части для заполнения
//
// Возвращаемое значение:
//   Список значений с именами табличных частей
//
Функция ПолучитьТабличныеЧастиДляЗаполнения() Экспорт

	ТабличныеЧасти = Новый СписокЗначений;
	
	Возврат ТабличныеЧасти;

КонецФункции // ПолучитьТабличныеЧастиДляЗаполнения()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Копирует значения движения в строку сторно нового движения
// для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор,ВидДвижения");
	
	// вид движения
	Если МетаданныеОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		Движение.ВидДвижения = Строка.ВидДвижения;
	КонецЕсли;
	
	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл
		Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвижениеСторно

// Копирует значения движения по регистру бухгалтерии в строку сторно я
// нового движени для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");
	
	// субконто
	Если МетаданныеОбъект.Корреспонденция Тогда

		Для каждого Субконто Из Строка.СубконтоДт Цикл
			Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Для каждого Субконто Из Строка.СубконтоКт Цикл
			Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

	Иначе

		Для каждого Субконто Из Строка.Субконто Цикл
			Движение.Субконто[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

	КонецЕсли;
	
	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл

		Если МДОбъект.ПризнакУчета = Неопределено Тогда
			Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
		Иначе

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
				Движение[МДОбъект.Имя + "Дт"] = - Строка[МДОбъект.Имя + "Дт"];
			КонецЕсли;

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
				Движение[МДОбъект.Имя + "Кт"] = - Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвиженияСторноПоРегиструБухгалтерии()

// Процедура выполняет сторнирование документа
//
Процедура СторнированиеДокумента(СторнируемыйДокумент, ДействиеНеВыполнено, СторнироватьРегистры = истина, СторнироватьПроводки = истина) 
	
	Если НЕ ЗначениеЗаполнено(СторнируемыйДокумент) Тогда
		Сообщить("Не выбран сторнируемый документ.");
		ДействиеНеВыполнено = Истина;
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумент	= СторнируемыйДокумент.Метаданные();
	МетаданныеДвиженияКорректировкаЗаписейРегистров = ЭтотОбъект.Метаданные().Движения;

	Для Каждого МетаданныеРегистр Из МетаданныеДокумент.Движения Цикл

		Если НЕ ПравоДоступа("Чтение", МетаданныеРегистр) Тогда
			Продолжить;
		КонецЕсли;		
		// если документ "Корректировка записей регистров" не может иметь таких движений,
		// то это не сторнируемый регистр
		Если НЕ МетаданныеДвиженияКорректировкаЗаписейРегистров.Содержит(МетаданныеРегистр) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборДвижений = Движения[МетаданныеРегистр.Имя];			
		
		ЭтоРегистрБухгалтерии = Ложь;
		Если СторнироватьПроводки И Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистр) Тогда
			
			СторнируемыйНаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			ЭтоРегистрБухгалтерии = Истина;
			
		ИначеЕсли СторнироватьРегистры И Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда
		   
			СторнируемыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		СторнируемыйНаборЗаписей.Отбор.Регистратор.Значение = СторнируемыйДокумент;
		СторнируемыйНаборЗаписей.Прочитать();
		
		Для Каждого ДвижениеСторнируемое Из СторнируемыйНаборЗаписей Цикл  
			ДвижениеСторно = НаборДвижений.Добавить(); 			
			// реквизиты
			Если ЭтоРегистрБухгалтерии Тогда
				ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			Иначе
				ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			КонецЕсли; 
			ДвижениеСторно.Период = Дата;			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура запускает выполнение действий, указанных в табличной части "Выполняемые действия"
//
Процедура ВыполнитьДействияДокумента() Экспорт
	
	Если ЗаполнениеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// проверка заполнения ТЧ "Выполняемые действия"
	ЕстьОшибки = Ложь;
	СтруктураОбязательныхПолей = Новый Структура("Действие");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ЗаполнениеДвижений", СтруктураОбязательныхПолей, ЕстьОшибки, Заголовок);
	Если ЕстьОшибки Тогда
		Сообщить("Указанные в табличной части действия не выполнены");
		Возврат;
	КонецЕсли;
	
	// очистка существующих движений
	ОчищатьДвижения = Ложь;
	
	Для каждого Набор Из Движения Цикл
		
		Если Набор.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Клиент Тогда
			Если НЕ ОчищатьДвижения Тогда	
				Ответ = Вопрос("Существующие движения регистров и проводки будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,,,"Заполнить движения");
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
				
				ОчищатьДвижения = Истина;
			КонецЕсли;	
		#КонецЕсли

		Набор.Очистить();
		
	КонецЦикла;
	
	Если ТаблицаРегистровНакопления.Количество() > 0 Тогда
		ТаблицаРегистровНакопления.Очистить();
	КонецЕсли;
	Если ТаблицаРегистровСведений.Количество() > 0 Тогда
		ТаблицаРегистровСведений.Очистить();
	КонецЕсли;
	Если ТаблицаРегистровБухгалтерии.Количество() > 0 Тогда
		ТаблицаРегистровБухгалтерии.Очистить();
	КонецЕсли;
	
	// выполнение действий указанных в ТЧ "Выполняемые действия" документа
	Для каждого СтрокаТЧ из ЗаполнениеДвижений Цикл
		
		ДействиеНеВыполнено = Ложь;
		Если ТипЗнч(СтрокаТЧ.Действие) = Тип("Строка") Тогда
			
			Если СтрокаТЧ.Действие = "Сторно движений документа" Тогда
				СторнированиеДокумента(СтрокаТЧ.Документ,ДействиеНеВыполнено);
				Если ДействиеНеВыполнено Тогда
					Сообщить("Действие в строке "+СтрокаТЧ.НомерСтроки+" не выполнено!",СтатусСообщения.Важное);
				КонецЕсли;
			Иначе
				Сообщить("Неправильное наименование базового действия, строка № "+СтрокаТЧ.НомерСтроки+" не обработана.");
			КонецЕсли;
			
		Иначе
			
			#Если Клиент Тогда
				
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = СтрокаТЧ.Действие.ПолучитьОбъект();
			
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Строка "+СтрокаТЧ.НомерСтроки+". Ошибка получения внешней обработки действия. Возможно обработка была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Попытка
				Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Исключение
				Сообщить("Строка "+СтрокаТЧ.НомерСтроки+". Ошибка исполнения внешней обработки действия."+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);
				Возврат;
			КонецПопытки;
			
			Попытка
				Обработка.Инициализировать(СтрокаТЧ.Документ, ЭтотОбъект,ДействиеНеВыполнено);
				Если ДействиеНеВыполнено Тогда
					Сообщить("Действие в строке "+СтрокаТЧ.НомерСтроки+" не выполнено!",СтатусСообщения.Важное);
				КонецЕсли;
			Исключение
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Действие в строке "+СтрокаТЧ.НомерСтроки+" не выполнено!");
			КонецПопытки;
			
			#КонецЕсли
			
		КонецЕсли;
	КонецЦикла;
	
	//обновить настройки
	Для каждого Набор Из Движения Цикл
		Если Набор.Количество() > 0 Тогда
			МетаданныеРегистр = Набор.Метаданные();
			
			Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда
				НоваяСтрока = ТаблицаРегистровНакопления.Добавить();
				НоваяСтрока.Имя = МетаданныеРегистр.Имя;
				НоваяСтрока.Представление = МетаданныеРегистр.Синоним;
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеРегистр) Тогда
				НоваяСтрока = ТаблицаРегистровСведений.Добавить();
				НоваяСтрока.Имя = МетаданныеРегистр.Имя;
				НоваяСтрока.Представление = МетаданныеРегистр.Синоним;
			ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистр) Тогда
				НоваяСтрока = ТаблицаРегистровБухгалтерии.Добавить();
				НоваяСтрока.Имя = МетаданныеРегистр.Имя;
				НоваяСтрока.Представление = МетаданныеРегистр.Синоним;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает/снимает признак активности движений документа
//
Процедура УстановитьАктивностьДвижений(ФлагАктивности)
	
	ТаблицаДвижений = ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(Ссылка);
	
	Для Каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
		
		// Имя регистра передается как значение, 
		// полученное с помощью функции ПолноеИмя() метаданных регистра
		ПозицияТочки = Найти(СтрокаТаблицыДвижений.Имя, ".");
		ТипРегистра = Лев(СтрокаТаблицыДвижений.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаТаблицыДвижений.Имя, ПозицияТочки + 1));
		
		Движение = Движения[ИмяРегистра];
		Движение.Прочитать();

		Для Каждого Строка Из Движение Цикл
			Строка.Активность = ФлагАктивности;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьАктивностьДвижений()

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.КорректировкаЗаписейРегистров") Тогда
		Возврат;
	КонецЕсли;
	Заголовок = "Копирование документа: "+СокрЛП(ОбъектКопирования);
	ТаблицаРегистров_ДвиженияДокументаОснования = ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(ОбъектКопирования.Ссылка);
	Для каждого Строка из ТаблицаРегистров_ДвиженияДокументаОснования цикл
		//В таблице имя регистра хранится в виде РегистрСведений.<ИмяРегистра>, РегистрНакопления.<ИмяРегистра> и т.д.
		ПолноеИмяРегистра = СокрЛП(Строка.Имя);
		ПозицияТочки = Найти(ПолноеИмяРегистра,".");
		ТипРегистра = Лев(ПолноеИмяРегистра,ПозицияТочки-1);
		//Для получения метаданных тип регистра должен быть не РегистрНакопления а РегистрыНакопления - необходимо изменить тип регистра
		ТипРегистра = СтрЗаменить(ТипРегистра,"Регистр","Регистры");
		ИмяРегистра = Прав(СокрЛП(Строка.Имя),стрДлина(СокрЛП(Строка.Имя))-ПозицияТочки);
		МетаданныеРегистра = Метаданные[ТипРегистра][ИмяРегистра];
		Если НЕ (ПравоДоступа("Изменение", МетаданныеРегистра) И ПравоДоступа("Чтение", МетаданныеРегистра)) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Недостаточно прав доступа к регистру """+ИмяРегистра+"""",ЗапретОткрытияДокумента,Заголовок);
			Продолжить;
		КонецЕсли;
		Набор = ОбъектКопирования.Движения[ИмяРегистра];
		//Используется попытка на случай наличия ограничений доступа к регистру на уровне записей
		Попытка
			Набор.Прочитать();
		Исключение
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Установлено ограничение доступа на уровне записей к регистру """+ИмяРегистра+"""",ЗапретОткрытияДокумента,Заголовок);
			Продолжить;
		КонецПопытки;
		
		НаборТекущегоОбъекта = Движения[ИмяРегистра];
		Если Найти(нрег(ТипРегистра),"бухгалтерии")<>0 Тогда
			Для каждого ЗаписьНабора Из Набор Цикл
				
				НоваяЗапись = НаборТекущегоОбъекта.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,"Период,Регистратор,СубконтоДт,СубконтоКт");
				
				Для каждого Субконто Из ЗаписьНабора.СубконтоДт Цикл
					НоваяЗапись.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
				КонецЦикла;

				Для каждого Субконто Из ЗаписьНабора.СубконтоКт Цикл
					НоваяЗапись.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
				КонецЦикла;
				НоваяЗапись.Период      = ТекущаяДата();
			КонецЦикла;
		Иначе
			Для каждого ЗаписьНабора Из Набор Цикл
			
				НоваяЗапись = НаборТекущегоОбъекта.Добавить();
				Если Найти(нрег(ТипРегистра),"накопления")<>0 Тогда
					Если МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
						НоваяЗапись.ВидДвижения = ЗаписьНабора.ВидДвижения;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,"Период,Регистратор,ВидДвижения")
				Иначе
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,"Период,Регистратор")
				КонецЕсли;
				НоваяЗапись.Период      = ТекущаяДата();
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	Если  ЗапретОткрытияДокумента Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть скопирован!",ЗапретОткрытияДокумента,Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления") <> ПометкаУдаления Тогда
		УстановитьАктивностьДвижений(НЕ ПометкаУдаления);
	ИначеЕсли ПометкаУдаления Тогда
		//запись помеченного на удаление документа с активными записями
		УстановитьАктивностьДвижений(Ложь);
	КонецЕсли;
	
    //АБС ВСТАВКА 26543 НАЧАЛО
    
    //+++ А.Ю.Браун удалим партии после 31.мая 2014г. т.к. это дата с которой партии не используются
    //!!!Не учитывается несколько документов в табличной части списка документов!!! 
    Если Дата >= Дата("20140601000000") Тогда

        Если ЗаполнениеДвижений.Количество() > 0 Тогда
        
            // Организацию берем из первой строки таблицы документов.
            ОбъектДокумент = ЗаполнениеДвижений[0].Документ.ПолучитьОбъект();
            Если ОбъектДокумент.Метаданные().Реквизиты.Найти("Организация") <> Неопределено 
                И ОбъектДокумент.Метаданные().Реквизиты["Организация"].Тип.СодержитТип(Тип("СправочникСсылка.Организации"))
                И ОбъектДокумент.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
                    
                    //Считаем способ списания МПЗ
                    Запрос = Новый Запрос;
                    Запрос.Текст = 
                        "ВЫБРАТЬ
                        |    УчетнаяПолитикаОрганизацийСрезПоследних.СпособОценкиМПЗ
                        |ИЗ
                        |    РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";

                    Запрос.УстановитьПараметр("Организация", ОбъектДокумент.Организация);
                    Запрос.УстановитьПараметр("Период", Дата);

                    Результат = Запрос.Выполнить();

                    //При способе списания "По средней стоимости" обнуляем документ прихода
                    Если НЕ Результат.Пустой() Тогда
                        Выборка = Результат.Выбрать();
                        
                        Выборка.Следующий();
                        Если Выборка.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
                            УдалитьПартииИзТабличныхЧастейДвижений();
                        КонецЕсли; 
                    КонецЕсли; 
            КонецЕсли; 
        КонецЕсли; 
    КонецЕсли; 
    
    //АБС ВСТАВКА 26543 КОНЕЦ
    
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
		// Заполнение шапки
		ИспользоватьЗаполнениеДвижений = ДанныеЗаполнения.ИспользоватьЗаполнениеДвижений;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Ответственный = ДанныеЗаполнения.Ответственный;
		Для Каждого ТекСтрокаЗаполнениеДвижений Из ДанныеЗаполнения.ЗаполнениеДвижений Цикл
			НоваяСтрока = ЗаполнениеДвижений.Добавить();
			НоваяСтрока.Действие = ТекСтрокаЗаполнениеДвижений.Действие;
			НоваяСтрока.Документ = ТекСтрокаЗаполнениеДвижений.Документ;
			НоваяСтрока.Примечание = ТекСтрокаЗаполнениеДвижений.Примечание;
		КонецЦикла;
		Для Каждого ТекСтрокаТаблицаРегистровБухгалтерии Из ДанныеЗаполнения.ТаблицаРегистровБухгалтерии Цикл
			НоваяСтрока = ТаблицаРегистровБухгалтерии.Добавить();
			НоваяСтрока.Имя = ТекСтрокаТаблицаРегистровБухгалтерии.Имя;
			НоваяСтрока.Представление = ТекСтрокаТаблицаРегистровБухгалтерии.Представление;
		КонецЦикла;
		Для Каждого ТекСтрокаТаблицаРегистровНакопления Из ДанныеЗаполнения.ТаблицаРегистровНакопления Цикл
			НоваяСтрока = ТаблицаРегистровНакопления.Добавить();
			НоваяСтрока.Имя = ТекСтрокаТаблицаРегистровНакопления.Имя;
			НоваяСтрока.Представление = ТекСтрокаТаблицаРегистровНакопления.Представление;
		КонецЦикла;
		Для Каждого ТекСтрокаТаблицаРегистровСведений Из ДанныеЗаполнения.ТаблицаРегистровСведений Цикл
			НоваяСтрока = ТаблицаРегистровСведений.Добавить();
			НоваяСтрока.Имя = ТекСтрокаТаблицаРегистровСведений.Имя;
			НоваяСтрока.Представление = ТекСтрокаТаблицаРегистровСведений.Представление;
		КонецЦикла;
		
		МетаданныеДокумент	= ДанныеЗаполнения.Метаданные(); 
		Для Каждого МетаданныеРегистр Из МетаданныеДокумент.Движения Цикл	
			 			 
			Если НЕ ПравоДоступа("Чтение", МетаданныеРегистр) Тогда
				Продолжить;
			КонецЕсли;			
			
			ДопПараметр = "";
			Если Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистр) Тогда
				Регистр = "РегистрБухгалтерии"; ДопПараметр = ".ОборотыДтКт(,,Регистратор,,,,,)"; //".ДвиженияССубконто(,,Регистратор = &Регистратор,,)"; //
			ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда	
				Регистр = "РегистрНакопления";
			ИначеЕсли Метаданные.РегистрыРасчета.Содержит(МетаданныеРегистр) Тогда	
				Регистр = "РегистрРасчета";      
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеРегистр) Тогда	
				Регистр = "РегистрСведений";				
			Иначе
				Продолжить;
			КонецЕсли;				
			
			Запрос = новый запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ "+Регистр+"."+МетаданныеРегистр.Имя+ДопПараметр+" КАК Регистр
			|ГДЕ Регистр.Регистратор = &Регистратор";
			Запрос.УстановитьПараметр("Регистратор",ДанныеЗаполнения);
			
			ТЗ = Запрос.Выполнить().Выгрузить();			
			
			Если ТЗ.Количество() > 0 Тогда
				
				Если ТЗ.Колонки.Найти("ВидСубконтоДт1") = Неопределено Тогда
					ТЗ.Колонки.Добавить("ВидСубконтоДт1",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));	
				КонецЕсли;	
				Если ТЗ.Колонки.Найти("ВидСубконтоДт2") = Неопределено Тогда
					ТЗ.Колонки.Добавить("ВидСубконтоДт2",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));	
				КонецЕсли;
				Если ТЗ.Колонки.Найти("ВидСубконтоДт3") = Неопределено Тогда
					ТЗ.Колонки.Добавить("ВидСубконтоДт3",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));	
				КонецЕсли;
				Если ТЗ.Колонки.Найти("ВидСубконтоКт1") = Неопределено Тогда
					ТЗ.Колонки.Добавить("ВидСубконтоКт1",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));	
				КонецЕсли;
				Если ТЗ.Колонки.Найти("ВидСубконтоКт2") = Неопределено Тогда
					ТЗ.Колонки.Добавить("ВидСубконтоКт2",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));	
				КонецЕсли;
				Если ТЗ.Колонки.Найти("ВидСубконтоКт3") = Неопределено Тогда
					ТЗ.Колонки.Добавить("ВидСубконтоКт3",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));	
				КонецЕсли;				
				
				Для каждого СТР из ТЗ Цикл
					
					Если ТЗ.Колонки.Найти("СчетДт") = Неопределено
						или ТЗ.Колонки.Найти("СчетКт") = Неопределено Тогда
						Продолжить;	
					КонецЕсли;	
					
					Для каждого Колонка из ТЗ.Колонки Цикл
						Если СТР[Колонка.Имя] = NULL Тогда
							СТР[Колонка.Имя] = Неопределено;	
						КонецЕсли;	
					КонецЦикла;	
						
					//Дт
					КолСубконтоДт = СТР.СчетДт.ВидыСубконто.Количество();
					
					Если СТР.СубконтоДт1 = Неопределено и КолСубконтоДт >=1 Тогда
						//Вид субконто
						КодСубконто = СТР.СчетДт.ВидыСубконто[0].ВидСубконто.Код;
						СТР.ВидСубконтоДт1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(КодСубконто);
						//Пустая ссылка
						СТР.СубконтоДт1 = СТР.СчетДт.ВидыСубконто[0].ВидСубконто.ТипЗначения.ПривестиЗначение();
					ИначеЕсли КолСубконтоДт >=1 Тогда
						КодСубконто = СТР.СчетДт.ВидыСубконто[0].ВидСубконто.Код;
						СТР.ВидСубконтоДт1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(КодСубконто);						
					КонецЕсли;	
					Если СТР.СубконтоДт2 = Неопределено и КолСубконтоДт >=2 Тогда
						//Вид субконто
						КодСубконто = СТР.СчетДт.ВидыСубконто[1].ВидСубконто.Код;
						СТР.ВидСубконтоДт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(КодСубконто);						
						//Пустая ссылка                 
						СТР.СубконтоДт2 = СТР.СчетДт.ВидыСубконто[1].ВидСубконто.ТипЗначения.ПривестиЗначение();
					ИначеЕсли КолСубконтоДт >=2 Тогда
						КодСубконто = СТР.СчетДт.ВидыСубконто[1].ВидСубконто.Код;
						СТР.ВидСубконтоДт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(КодСубконто);						
					КонецЕсли;	
					Если СТР.СубконтоДт3 = Неопределено и КолСубконтоДт >=3 Тогда
						//Вид субконто
						КодСубконто = СТР.СчетДт.ВидыСубконто[2].ВидСубконто.Код;
						СТР.ВидСубконтоДт3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(КодСубконто);							
						//Пустая ссылка
						СТР.СубконтоДт3 = СТР.СчетДт.ВидыСубконто[2].ВидСубконто.ТипЗначения.ПривестиЗначение();						
					ИначеЕсли КолСубконтоДт >=3 Тогда
						КодСубконто = СТР.СчетДт.ВидыСубконто[2].ВидСубконто.Код;
						СТР.ВидСубконтоДт3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(КодСубконто);						
					КонецЕсли;
					
					//Кт
					КолСубконтоКт = СТР.СчетКт.ВидыСубконто.Количество();
					
					Если СТР.СубконтоКт1 = Неопределено и КолСубконтоКт >=1 Тогда
						//Вид субконто
						КодСубконто = СТР.СчетКт.ВидыСубконто[0].ВидСубконто.Код;
						СТР.ВидСубконтоКт1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(КодСубконто);						
						//Пустая ссылка
						СТР.СубконтоКт1 = СТР.СчетКт.ВидыСубконто[0].ВидСубконто.ТипЗначения.ПривестиЗначение();
					ИначеЕсли КолСубконтоКт >=1 Тогда
						КодСубконто = СТР.СчетКт.ВидыСубконто[0].ВидСубконто.Код;
						СТР.ВидСубконтоКт1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(КодСубконто);						
					КонецЕсли;	
					
					Если СТР.СубконтоКт2 = Неопределено и КолСубконтоКт >=2 Тогда
						//Вид субконто
						КодСубконто = СТР.СчетКт.ВидыСубконто[1].ВидСубконто.Код;
						СТР.ВидСубконтоКт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(КодСубконто);							
						//Пустая ссылка
						СТР.СубконтоКт2 = СТР.СчетКт.ВидыСубконто[1].ВидСубконто.ТипЗначения.ПривестиЗначение();						
					ИначеЕсли КолСубконтоКт >=2 Тогда
						КодСубконто = СТР.СчетКт.ВидыСубконто[1].ВидСубконто.Код;
						СТР.ВидСубконтоКт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(КодСубконто);						
					КонецЕсли;	
					Если СТР.СубконтоКт3 = Неопределено и КолСубконтоКт >=3 Тогда
						//Вид субконто
						КодСубконто = СТР.СчетКт.ВидыСубконто[2].ВидСубконто.Код;
						СТР.ВидСубконтоКт3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(КодСубконто);							
						//Пустая ссылка
						СТР.СубконтоКт3 = СТР.СчетКт.ВидыСубконто[2].ВидСубконто.ТипЗначения.ПривестиЗначение();						
					ИначеЕсли КолСубконтоКт >=3 Тогда
						КодСубконто = СТР.СчетКт.ВидыСубконто[2].ВидСубконто.Код;
						СТР.ВидСубконтоКт3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(КодСубконто);						
					КонецЕсли;	
					
				КонецЦикла;	
								
				ЭтотОбъект.Движения[МетаданныеРегистр.Имя].Загрузить(ТЗ);
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//АБС ВСТАВКА 26543 НАЧАЛО

Процедура УдалитьПартииИзТабличныхЧастейДвижений()
    
    НалоговыйСчетУчета = ПланыСчетов.Налоговый.НайтиПоКоду("10.02");
    ХозрасчетныйСчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.02");
    
    Для каждого РегистрРедактируемыхДвижений Из ТаблицаРегистровНакопления Цикл
        Если ХозрасчетныйСчетУчета <> Неопределено И ХозрасчетныйСчетУчета <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
            Если РегистрРедактируемыхДвижений.Имя = "ПартииТоваровНаСкладахБухгалтерскийУчет" Тогда
                Для каждого Движение Из Движения[РегистрРедактируемыхДвижений.Имя] Цикл
                    Если Движение.СчетУчета = ХозрасчетныйСчетУчета Тогда
                        Движение.ДокументОприходования = Неопределено;
                    КонецЕсли; 
                КонецЦикла; 
            КонецЕсли; 
        КонецЕсли; 
        Если НалоговыйСчетУчета <> Неопределено И НалоговыйСчетУчета <> ПланыСчетов.Налоговый.ПустаяСсылка() Тогда
            Если РегистрРедактируемыхДвижений.Имя = "ПартииТоваровНаСкладахНалоговыйУчет" Тогда
                Для каждого Движение Из Движения[РегистрРедактируемыхДвижений.Имя] Цикл
                    Если Движение.СчетУчета = НалоговыйСчетУчета Тогда
                        Движение.ДокументОприходования = Неопределено;
                    КонецЕсли; 
                КонецЦикла; 
            КонецЕсли; 
        КонецЕсли; 
    КонецЦикла; 
КонецПроцедуры

//АБС ВСТАВКА 26543 КОНЕЦ

ЗапретОткрытияДокумента = Ложь;
