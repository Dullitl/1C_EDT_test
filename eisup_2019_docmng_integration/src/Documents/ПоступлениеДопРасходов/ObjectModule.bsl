Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем УчетнаяПолитикаРегл;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

// АБС ВСТАВКА Начало
Перем мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа Экспорт;
// АБС ВСТАВКА Конец

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция ПечатьПоступлениеДопРасходов()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Курс",            ЭтотОбъект.КурсВзаиморасчетов);
	Запрос.УстановитьПараметр("Кратность",       ЭтотОбъект.КратностьВзаиморасчетов);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Организация,
	|	Содержание ,
	|	СуммаДокумента КАК СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	СтавкаНДС,
	|	ВложенныйЗапросТовары.СуммаНДСТовары + ВложенныйЗапросОборудование.СуммаНДСТовары+ СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапросТовары.СуммаДенег     + ВложенныйЗапросОборудование.СуммаДенег               КАК СуммаДенег,
	|	ВложенныйЗапросТовары.Количество     + ВложенныйЗапросОборудование.Количество               КАК Количество
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов,
	|	(ВЫБРАТЬ
	|		ВЫБОР КОГДА СУММА(ПоступлениеДопРасходовТовары.Сумма)             ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ СУММА(ПоступлениеДопРасходовТовары.Сумма)             КОНЕЦ КАК СуммаДенег,
	|		ВЫБОР КОГДА СУММА(ПоступлениеДопРасходовТовары.СуммаНДС)          ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ СУММА(ПоступлениеДопРасходовТовары.СуммаНДС)          КОНЕЦ КАК СуммаНДСТовары,
	|		ВЫБОР КОГДА КОЛИЧЕСТВО(ПоступлениеДопРасходовТовары.Номенклатура) ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КОЛИЧЕСТВО(ПоступлениеДопРасходовТовары.Номенклатура) КОНЕЦ КАК Количество
	|
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Товары       КАК ПоступлениеДопРасходовТовары
	|
	|	ГДЕ
	|		Ссылка = &ТекущийДокумент) КАК ВложенныйЗапросТовары,
	|
	|	(ВЫБРАТЬ
	|		ВЫБОР КОГДА СУММА(ПоступлениеДопРасходовОборудование.Сумма)             ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ СУММА(ПоступлениеДопРасходовОборудование.Сумма)             КОНЕЦ КАК СуммаДенег,
	|		ВЫБОР КОГДА СУММА(ПоступлениеДопРасходовОборудование.СуммаНДС)          ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ СУММА(ПоступлениеДопРасходовОборудование.СуммаНДС)          КОНЕЦ КАК СуммаНДСТовары,
	|		ВЫБОР КОГДА КОЛИЧЕСТВО(ПоступлениеДопРасходовОборудование.Номенклатура) ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КОЛИЧЕСТВО(ПоступлениеДопРасходовОборудование.Номенклатура) КОНЕЦ КАК Количество
	|
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Оборудование КАК ПоступлениеДопРасходовОборудование
	|
	|	ГДЕ
	|		Ссылка = &ТекущийДокумент) КАК ВложенныйЗапросОборудование
	|
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеДопРасходов_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Доп. расходы");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	СуммаВсего = Шапка.СуммаДокумента - ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
	СуммаИтого = СуммаВсего;

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьМакета.Параметры.НомерСтроки = 1;
	ОбластьМакета.Параметры.Товар       = Шапка.Содержание;
	ОбластьМакета.Параметры.Цена        = СуммаВсего;
	ОбластьМакета.Параметры.Количество  = 1;
	ОбластьМакета.Параметры.Сумма       = СуммаВсего;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаИтого);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Шапка.СуммаНДС);
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = СуммаВсего + ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + 1
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // Печать

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

		// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПоступлениеДопРасходов();
		
	ИначеЕсли ИмяМакета = "СправкаРасчетВал" тогда

		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("Накладная","Доп. расходы");
	СтруктураМакетов.Вставить( "СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетов);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансов);
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет заполниение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДокументОснование, ТабЧасть) Экспорт
	
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;

	ИмяДокумента = ДокументОснование.Метаданные().Имя;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	ИмяТабЧасти = ?(ТабЧасть = Оборудование, "Оборудование", "Товары");

	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.Ссылка,
	|	Док.Ссылка.ВалютаДокумента,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Ссылка.УчитыватьНДС УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС СуммаВключаетНДС,
	|	Док.Количество,
	|	Док.ЕдиницаИзмерения,
	|	" + ?(ИмяДокумента = "ПоступлениеТоваровУслуг" И ТабЧасть = Товары, "Док.Заказ КАК ЗаказПокупателя,",      "") + "
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.СчетУчетаБУ,
	|	Док.СчетУчетаНУ,
	|	Док.СчетУчетаНДС
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ИмяТабЧасти  + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Табчасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ДокументПартии             = ДокументОснование;

		Если ИмяДокумента = "ПоступлениеТоваровУслуг"
		   И ТабЧасть = Товары Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		КонецЕсли;

		СтрокаТабличнойЧасти.СуммаТовара = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0), Выборка.ВалютаДокумента,
		                                   ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                   Курс,
		                                   ЗаполнениеДокументов.КратностьДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                   Кратность);

		ЗаполнитьСтрокуТоварыПоПоступлениюТоваровРегл(СтрокаТабличнойЧасти, Выборка);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

Процедура ЗаполнитьСтрокуТоварыПоПоступлениюТоваровРегл(СтрокаТабличнойЧасти, Выборка)

	СтрокаТабличнойЧасти.СчетУчетаБУ  = Выборка.СчетУчетаБУ;
	СтрокаТабличнойЧасти.СчетУчетаНДС = Выборка.СчетУчетаНДС;
	СтрокаТабличнойЧасти.СчетУчетаНУ  = Выборка.СчетУчетаНУ;

КонецПроцедуры // ЗаполнитьСтрокуТоварыПоПоступлениюТоваровРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ТаблицаТоваров.Колонки.Добавить("Качество");
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	Если (ТаблицаТоваров.Колонки.Найти("СуммаВзаиморасчетов") = Неопределено) тогда
		ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;

	// Недостающие поля.
	ТаблицаТоваров.Колонки.Добавить("СтатусПартии");
	ТаблицаТоваров.Колонки.Добавить("Заказ");
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

		// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.Вес = СтрокаТаблицы.Вес;

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий И НЕ НДСВключенВСтоимость Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
			СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтоимостьСНДС, 
				СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
				СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
				СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		КонецЕсли;

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтоимостьСНДС, 
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.НДС, 
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		                                 
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Стоимость, 
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		Если СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей=Истина Тогда
			СтрокаТаблицы.Заказ = СтрокаТаблицы.ЗаказПокупателя;
		КонецЕсли;

		Если СтрокаТаблицы.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
			Если СтрокаТаблицы.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию; 
			Иначе
				СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный; 
			КонецЕсли;

		ИначеЕсли СтрокаТаблицы.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВПереработку;

		ИначеЕсли СтрокаТаблицы.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			Если СтрокаТаблицы.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию; 
			Иначе
				СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный; 
			КонецЕсли;
		Иначе
			СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный; 
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Процедура добавляет в таблицы данные о суммах распределения.
//
Процедура ДобавитьРаспределение( ТаблицаПоТоварам, ТаблицаПоОборудованию, СтруктураШапкиДокумента)
	
	Если ТаблицаПоТоварам.Колонки.Найти("СуммаУпрРаспределения") = Неопределено тогда
		ТаблицаПоТоварам.Колонки.Добавить("СуммаУпрРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ТаблицаПоТоварам.Колонки.Найти("НДСУпрРаспределения") = Неопределено тогда
		ТаблицаПоТоварам.Колонки.Добавить("НДСУпрРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ТаблицаПоОборудованию.Колонки.Найти("СуммаУпрРаспределения") = Неопределено тогда
		ТаблицаПоОборудованию.Колонки.Добавить("СуммаУпрРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ТаблицаПоОборудованию.Колонки.Найти("НДСУпрРаспределения") = Неопределено тогда
		ТаблицаПоОборудованию.Колонки.Добавить("НДСУпрРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
		
	// Сумма к распределению
	Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий И НЕ НДСВключенВСтоимость Тогда
		СуммаВсего = Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СуммаНДС, 0);
	Иначе
		//СуммаВсего = Сумма - ?(УчитыватьНДС И НЕ СуммаВключаетНДС, 0, СуммаНДС);
		СуммаВсего = Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, 0, СуммаНДС);
	КонецЕсли;
	СуммаВсегоСНДС = Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СуммаНДС, 0);
		
	СуммаВсегоУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаВсего, 
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект,	мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
	СуммаВсегоСНДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаВсегоСНДС, 
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект,	мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
	СуммаВсегоНДСУпр  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаНДС, 
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект,	мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КолКоэф    = ?(СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу, "Вес",
			     ?(СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество", "СуммаТовара"));
	МассивКоэф = ТаблицаПоТоварам.ВыгрузитьКолонку(КолКоэф);
		
	Для Каждого СтрокаТЧ Из ТаблицаПоОборудованию Цикл
		МассивКоэф.Добавить(СтрокаТЧ[КолКоэф]);
	КонецЦикла;
		
	МассивСумм     = ttk_ОбщегоНазначения.РаспределитьПропорционально( СуммаВсегоУпр, МассивКоэф, 2);
	МассивСуммСНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально( СуммаВсегоСНДСУпр, МассивКоэф, 2);
	МассивНДСУпр   = ttk_ОбщегоНазначения.РаспределитьПропорционально( СуммаВсегоНДСУпр,  МассивКоэф, 2,ЛОЖЬ);
		
	Если Не МассивСумм = Неопределено Тогда
		СтрокТоваров = ТаблицаПоТоварам.Количество() - 1;
		Для К = 0 По СтрокТоваров Цикл
			ТаблицаПоТоварам[К].Стоимость             = ТаблицаПоТоварам[К].Стоимость + ?(СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий И НЕ НДСВключенВСтоимость,МассивСумм[К],МассивСуммСНДС[К]);
			ТаблицаПоТоварам[К].СуммаУпрРаспределения = ТаблицаПоТоварам[К].СуммаУпрРаспределения + МассивСуммСНДС[К];
			ТаблицаПоТоварам[К].НДСУпрРаспределения   = ТаблицаПоТоварам[К].НДСУпр    + МассивНДСУпр[К];
		КонецЦикла;
		Для К = 0 По ТаблицаПоОборудованию.Количество() - 1 Цикл
			ТаблицаПоОборудованию[К].Стоимость              = ТаблицаПоОборудованию[К].Стоимость + ?(СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий И НЕ НДСВключенВСтоимость,МассивСумм[К + СтрокТоваров + 1],МассивСуммСНДС[К + СтрокТоваров + 1]);
			ТаблицаПоОборудованию[К].СуммаУпрРаспределения  = ТаблицаПоОборудованию[К].СуммаУпрРаспределения + МассивСуммСНДС[К + СтрокТоваров + 1];
			ТаблицаПоОборудованию[К].НДСУпрРаспределения    = ТаблицаПоОборудованию[К].НДСУпр    + МассивНДСУпр[К + СтрокТоваров + 1];
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Колонки.Найти("СуммаВзаиморасчетовРаспределения") = Неопределено тогда
		ТаблицаПоТоварам.Колонки.Добавить("СуммаВзаиморасчетовРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ТаблицаПоТоварам.Колонки.Найти("СуммаРеглРаспределения") = Неопределено тогда
		ТаблицаПоТоварам.Колонки.Добавить("СуммаРеглРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ТаблицаПоОборудованию.Колонки.Найти("СуммаВзаиморасчетовРаспределения") = Неопределено тогда
		ТаблицаПоОборудованию.Колонки.Добавить("СуммаВзаиморасчетовРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ТаблицаПоОборудованию.Колонки.Найти("СуммаРеглРаспределения") = Неопределено тогда
		ТаблицаПоОборудованию.Колонки.Добавить("СуммаРеглРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;

	// Сумма к распределению
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);
	
	//СуммаРегл нужна не только для БУ, но и для взаиморасчетов по документам расчетов
	СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		Сумма - ?(СуммаВключаетНДС, СуммаНДС, 0),
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),	Данные.Курс,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета), Данные.Кратность);

	СуммаНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаНДС,
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Данные.Курс,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета), Данные.Кратность);

	СуммаРасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтруктураШапкиДокумента.Сумма + ?(СтруктураШапкиДокумента.СуммаВключаетНДС,0, СтруктураШапкиДокумента.СуммаНДС),
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВзаиморасчетов,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВзаиморасчетов);
		
	КолКоэф    = ?( СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу,       "Вес",
			     ?( СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество", "СуммаТовара"));
	МассивКоэф = ТаблицаПоТоварам.ВыгрузитьКолонку(КолКоэф);
		
	Для Каждого СтрокаТЧ Из ТаблицаПоОборудованию Цикл
		МассивКоэф.Добавить(СтрокаТЧ[КолКоэф]);
	КонецЦикла;
		
	МассивСуммРегл = ttk_ОбщегоНазначения.РаспределитьПропорционально( СуммаРегл,     МассивКоэф, 2);
	МассивНДСРегл  = ttk_ОбщегоНазначения.РаспределитьПропорционально( СуммаНДСРегл,  МассивКоэф, 2);
	МассивСумм     = ttk_ОбщегоНазначения.РаспределитьПропорционально( Сумма,     МассивКоэф, 2);
	МассивНДС      = ttk_ОбщегоНазначения.РаспределитьПропорционально( СуммаНДС,  МассивКоэф, 2);
	МассивРасчеты  = ttk_ОбщегоНазначения.РаспределитьПропорционально( СуммаРасчетов, МассивКоэф, 2);
		
	СтрокТоваров = ТаблицаПоТоварам.Количество() - 1;
	Для К = 0 По СтрокТоваров Цикл
		Если Не МассивСуммРегл = Неопределено Тогда
			ТаблицаПоТоварам[К].ПроводкаСуммаРаспределения       = ТаблицаПоТоварам[К].ПроводкаСуммаРаспределения       + МассивСуммРегл[К];
		КонецЕсли;
		Если Не МассивНДСРегл = Неопределено Тогда
			ТаблицаПоТоварам[К].ПроводкаСуммаНДСРаспределения    = ТаблицаПоТоварам[К].ПроводкаСуммаНДСРаспределения    + МассивНДСРегл[К];
		КонецЕсли;
		Если Не МассивРасчеты = Неопределено Тогда
			ТаблицаПоТоварам[К].СуммаВзаиморасчетовРаспределения = ТаблицаПоТоварам[К].СуммаВзаиморасчетовРаспределения + МассивРасчеты[К];
		КонецЕсли;
		Если Не МассивСумм = Неопределено Тогда
			ТаблицаПоТоварам[К].Сумма = ТаблицаПоТоварам[К].Сумма + МассивСумм[К];
		КонецЕсли;
		Если Не МассивНДС = Неопределено Тогда
			ТаблицаПоТоварам[К].НДС = ТаблицаПоТоварам[К].НДС + МассивНДС[К];
		КонецЕсли;
	КонецЦикла;
		
	Для К = 0 По ТаблицаПоОборудованию.Количество() - 1 Цикл
		Если Не МассивСуммРегл = Неопределено Тогда
			ТаблицаПоОборудованию[К].ПроводкаСуммаРаспределения       = ТаблицаПоОборудованию[К].ПроводкаСуммаРаспределения       + МассивСуммРегл[К + СтрокТоваров + 1];
		КонецЕсли;
		Если Не МассивНДСРегл = Неопределено Тогда
			ТаблицаПоОборудованию[К].ПроводкаСуммаНДСРаспределения    = ТаблицаПоОборудованию[К].ПроводкаСуммаНДСРаспределения    + МассивНДСРегл[К + СтрокТоваров + 1];
		КонецЕсли;
		Если Не МассивРасчеты = Неопределено Тогда
			ТаблицаПоОборудованию[К].СуммаВзаиморасчетовРаспределения = ТаблицаПоОборудованию[К].СуммаВзаиморасчетовРаспределения + МассивРасчеты[К + СтрокТоваров + 1];
		КонецЕсли;
		Если Не МассивСумм = Неопределено Тогда
			ТаблицаПоОборудованию[К].Сумма = ТаблицаПоОборудованию[К].Сумма + МассивСумм[К + СтрокТоваров + 1];
		КонецЕсли;
		Если Не МассивНДС = Неопределено Тогда
			ТаблицаПоОборудованию[К].НДС = ТаблицаПоОборудованию[К].НДС + МассивНДС[К + СтрокТоваров + 1];
		КонецЕсли;
	КонецЦикла;
		
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		СтрокаТаблицы.СуммаРеглРаспределения = СтрокаТаблицы.ПроводкаСуммаРаспределения + СтрокаТаблицы.ПроводкаСуммаНДСРаспределения;
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ТаблицаПоОборудованию Цикл
		СтрокаТаблицы.СуммаРеглРаспределения = СтрокаТаблицы.ПроводкаСуммаРаспределения + СтрокаТаблицы.ПроводкаСуммаНДСРаспределения;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьРаспределение()

Процедура РаспределитьПоСкладам(ТаблицаПоТоварам, ТаблицаРаспределенияПоСкладам, СтруктураШапкиДокумента, СтатусПартии, Отказ, Заголовок)
	
	ДопСтроки = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из ТаблицаПоТоварам.Колонки Цикл
		ДопСтроки.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	ТаблицаПоТоварам.Колонки.Добавить("ФлагСтаройСтроки");
	
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		// В таблице распределения по складам могут быть записи с любыми комбинациями 
		// ДокументОприходования, Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры
		// Отберем нужные
		СтруктураПоиска = Новый Структура ("ДокументОприходования, Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры, СтатусПартии",
											Строка.ДокументОприходования,
											Строка.Номенклатура,
											Строка.СерияНоменклатуры,
											Строка.ХарактеристикаНоменклатуры,
											СтатусПартии);
		МассивСтрокРаспределения = ТаблицаРаспределенияПоСкладам.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрокРаспределения.Количество() = 0 тогда
			ТекстСообщения = "Не найден в документе "+ Строка.ДокументОприходования
			+ " товар " + Строка.Номенклатура
			+ ?(Строка.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + Строка.ХарактеристикаНоменклатуры, "")
			+ ?(Строка.Номенклатура.ВестиУчетПоСериям, ", серия: " + Строка.СерияНоменклатуры, "");
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		ИтогоКоличество = 0;
		Для Каждого Элемент Из МассивСтрокРаспределения Цикл
			ИтогоКоличество = ИтогоКоличество + Элемент.Количество;
		КонецЦикла;
		
		РаспределяемаяСумма 							= Строка.Стоимость;
		РаспределяемаяПроводкаСумма 					= Строка.ПроводкаСумма;
		РаспределяемаяПроводкаСуммаНДС 					= Строка.ПроводкаСуммаНДС;
		РаспределяемаяСуммаВзаиморасчетов 				= Строка.СуммаВзаиморасчетов;
		РаспределяемаяПроводкаСуммаРаспределения 		= Строка.ПроводкаСуммаРаспределения;
		РаспределяемаяПроводкаСуммаНДСРаспределения 	= Строка.ПроводкаСуммаНДСРаспределения;
		РаспределяемаяСуммаВзаиморасчетовРаспределения 	= Строка.СуммаВзаиморасчетовРаспределения;
		РаспределяемаяСуммаУпрРаспределения 			= Строка.СуммаУпрРаспределения;
		
		
		РаспределяемаяСуммаРег 							= Строка.Сумма;
		РаспределяемаяНДСРег 							= Строка.НДС;
		РаспределяемаяСуммаУпр 							= Строка.СуммаУпр;
		РаспределяемаяНДСУпр 							= Строка.НДСУпр;
		РаспределяемаяНДСУпрРаспределения 				= Строка.НДСУпрРаспределения;

        РаспределяемоеКоличество 						= Строка.Количество;
		Для Каждого Элемент Из МассивСтрокРаспределения Цикл
			
			Если ИтогоКоличество<=0 Тогда         
				Прервать;
			КонецЕсли;
			
			Если Элемент.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДопСтрока = ДопСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(ДопСтрока,Строка);
			
			ДопСтрока.Склад 	= Элемент.Склад;
			ДопСтрока.ВидСклада = Элемент.ВидСклада;
			
			Если Элемент.Количество<ИтогоКоличество Тогда
				КоэффРаспред = Элемент.Количество/ИтогоКоличество;
			Иначе
				КоэффРаспред = 1;
			КонецЕсли;
			
			ДопСтрока.Стоимость 						= Окр(РаспределяемаяСумма * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.ПроводкаСумма 					= Окр(РаспределяемаяПроводкаСумма * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.ПроводкаСуммаНДС 					= Окр(РаспределяемаяПроводкаСуммаНДС * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.СуммаВзаиморасчетов 				= Окр(РаспределяемаяСуммаВзаиморасчетов * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.ПроводкаСуммаРаспределения 		= Окр(РаспределяемаяПроводкаСуммаРаспределения * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.ПроводкаСуммаНДСРаспределения 	= Окр(РаспределяемаяПроводкаСуммаНДСРаспределения * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.СуммаВзаиморасчетовРаспределения 	= Окр(РаспределяемаяСуммаВзаиморасчетовРаспределения * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.СуммаУпрРаспределения 			= Окр(РаспределяемаяСуммаУпрРаспределения * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.НДСУпрРаспределения 				= Окр(РаспределяемаяНДСУпрРаспределения * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.Сумма 							= Окр(РаспределяемаяСуммаРег * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.НДС 								= Окр(РаспределяемаяНДСРег * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.СуммаУпр 							= Окр(РаспределяемаяСуммаУпр * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.НДСУпр 							= Окр(РаспределяемаяНДСУпр * КоэффРаспред,2,РежимОкругления.Окр15как20);
			
			ДопСтрока.Количество 						= Окр(РаспределяемоеКоличество * КоэффРаспред,3,РежимОкругления.Окр15как20);


			РаспределяемаяСумма 							= РаспределяемаяСумма - ДопСтрока.Стоимость;
			РаспределяемаяПроводкаСумма 					= РаспределяемаяПроводкаСумма  - ДопСтрока.ПроводкаСумма;
			РаспределяемаяПроводкаСуммаНДС 					= РаспределяемаяПроводкаСуммаНДС - ДопСтрока.ПроводкаСуммаНДС;
			РаспределяемаяСуммаВзаиморасчетов 				= РаспределяемаяСуммаВзаиморасчетов - ДопСтрока.СуммаВзаиморасчетов;
			РаспределяемаяПроводкаСуммаРаспределения 		= РаспределяемаяПроводкаСуммаРаспределения - ДопСтрока.ПроводкаСуммаРаспределения;
			РаспределяемаяПроводкаСуммаНДСРаспределения 	= РаспределяемаяПроводкаСуммаНДСРаспределения - ДопСтрока.ПроводкаСуммаНДСРаспределения;
			РаспределяемаяСуммаВзаиморасчетовРаспределения 	= РаспределяемаяСуммаВзаиморасчетовРаспределения - ДопСтрока.СуммаВзаиморасчетовРаспределения;
			РаспределяемаяСуммаУпрРаспределения 			= РаспределяемаяСуммаУпрРаспределения - ДопСтрока.СуммаУпрРаспределения;
            РаспределяемаяНДСУпрРаспределения 				= РаспределяемаяНДСУпрРаспределения - ДопСтрока.НДСУпрРаспределения;

				
			РаспределяемаяСуммаРег 							= РаспределяемаяСуммаРег - ДопСтрока.Сумма;
			РаспределяемаяНДСРег 							= РаспределяемаяНДСРег - ДопСтрока.НДС;
			РаспределяемаяСуммаУпр 							= РаспределяемаяСуммаУпр - ДопСтрока.СуммаУпр;
			РаспределяемаяНДСУпр 							= РаспределяемаяНДСУпр - ДопСтрока.НДСУпр;

			РаспределяемоеКоличество 						= РаспределяемоеКоличество - ДопСтрока.Количество;
			
			ИтогоКоличество = ИтогоКоличество - Элемент.Количество;
			
		КонецЦикла;
		// Исходная строка будет с 0 суммой
		Строка.Стоимость = 0;
		Строка.ПроводкаСуммаРаспределения = 0;
		Строка.ФлагСтаройСтроки = Истина;
	КонецЦикла;
	
	// Теперь доп строки добавим в таблицу по товарам
	Для Каждого ДопСтрока Из ДопСтроки Цикл
		НоваяСтрока = ТаблицаПоТоварам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ДопСтрока);
	КонецЦикла;
			
	// После обработки удалим строки с нулевыми суммами
	Инд=0;
	Пока Инд<ТаблицаПоТоварам.Количество() Цикл
		Если ТаблицаПоТоварам[Инд].ФлагСтаройСтроки = Истина Тогда
			ТаблицаПоТоварам.Удалить(Инд);
		Иначе
			Инд = Инд+1;
		КонецЕсли;
	КонецЦикла;

	ТаблицаПоТоварам.Колонки.Удалить("ФлагСтаройСтроки");
	
КонецПроцедуры//РаспределитьПоСкладам

Процедура РаспределитьДопРасходыТоваровПоСкладам(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ЗапросРаспределенияПоСкладам = Новый Запрос;
	ЗапросРаспределенияПоСкладам.Текст = "ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка КАК ДокументОприходования,
	                                     |	ДокументОприходованияТовары.Склад КАК Склад,
	                                     |	ДокументОприходованияТовары.Склад.ВидСклада КАК ВидСклада,
	                                     |	ДокументОприходованияТовары.Номенклатура КАК Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент КАК Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма) КАК Сумма,
	                                     |	СУММА(ДокументОприходованияТовары.Количество) КАК Количество,
	                                     |	&СтатусПартии КАК СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ПоступлениеТоваровУслуг.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Склад.ВидСклада
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад.ВидСклада,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	&СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ПоступлениеТоваровУслугВНТТ.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Ссылка.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад.ВидСклада
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.Склад.ВидСклада,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	&СтатусПартии
	                                     |ИЗ
	                                     |	Документ.АвансовыйОтчет.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Склад.ВидСклада
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад.ВидСклада,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	ДокументОприходованияТовары.СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ОприходованиеТоваров.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СтатусПартии = &СтатусПартии
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.СтатусПартии,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад.ВидСклада
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	КомплектацияНоменклатуры.Ссылка,
	                                     |	КомплектацияНоменклатуры.Склад,
	                                     |	КомплектацияНоменклатуры.Склад.ВидСклада,
	                                     |	КомплектацияНоменклатуры.Номенклатура,
	                                     |	КомплектацияНоменклатуры.СерияНоменклатуры,
	                                     |	КомплектацияНоменклатуры.ХарактеристикаНоменклатуры,
	                                     |	КомплектацияНоменклатуры.Коэффициент,
	                                     |	СУММА(0),
	                                     |	СУММА(КомплектацияНоменклатуры.Количество),
	                                     |	КомплектацияНоменклатуры.СтатусПартии
	                                     |ИЗ
	                                     |	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	                                     |ГДЕ
	                                     |	КомплектацияНоменклатуры.Ссылка В(&Ссылка)
	                                     |	И КомплектацияНоменклатуры.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И КомплектацияНоменклатуры.СтатусПартии = &СтатусПартии
	                                     |	И КомплектацияНоменклатуры.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |	И КомплектацияНоменклатуры.Номенклатура В(&Номенклатура)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	КомплектацияНоменклатуры.Ссылка,
	                                     |	КомплектацияНоменклатуры.Склад,
	                                     |	КомплектацияНоменклатуры.Номенклатура,
	                                     |	КомплектацияНоменклатуры.Склад.ВидСклада,
	                                     |	КомплектацияНоменклатуры.СерияНоменклатуры,
	                                     |	КомплектацияНоменклатуры.ХарактеристикаНоменклатуры,
	                                     |	КомплектацияНоменклатуры.СтатусПартии,
	                                     |	КомплектацияНоменклатуры.Коэффициент";

	ЗапросРаспределенияПоСкладам.УстановитьПараметр("Ссылка", ТаблицаПоТоварам.ВыгрузитьКолонку("ДокументОприходования"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("Номенклатура", ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("ХарактеристикаНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("СерияНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	
	ТаблицаРаспределенияПоСкладам = ЗапросРаспределенияПоСкладам.Выполнить().Выгрузить();
	
	РаспределитьПоСкладам(ТаблицаПоТоварам, ТаблицаРаспределенияПоСкладам, СтруктураШапкиДокумента, Перечисления.СтатусыПартийТоваров.Купленный, Отказ, Заголовок);

КонецПроцедуры//РаспределитьДопРасходыТоваровПоСкладам

Процедура РаспределитьДопРасходыОборудованияПоСкладам(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ЗапросРаспределенияПоСкладам = Новый Запрос;
	ЗапросРаспределенияПоСкладам.Текст = "ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка КАК ДокументОприходования,
	                                     |	ДокументОприходованияТовары.Склад КАК Склад,
										 |	ДокументОприходованияТовары.Склад.ВидСклада КАК ВидСклада,
	                                     |	ДокументОприходованияТовары.Номенклатура КАК Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент КАК Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма) КАК Сумма,
	                                     |	СУММА(ДокументОприходованияТовары.Количество) КАК Количество,
	                                     |	&СтатусПартии КАК СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
										 |	ДокументОприходованияТовары.Ссылка.Склад.ВидСклада,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	ДокументОприходованияТовары.СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ОприходованиеТоваров.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СтатусПартии = &СтатусПартии
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.СтатусПартии";

	ЗапросРаспределенияПоСкладам.УстановитьПараметр("Ссылка", ТаблицаПоТоварам.ВыгрузитьКолонку("ДокументОприходования"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("Номенклатура", ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("ХарактеристикаНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("СерияНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"));
	СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование;
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("СтатусПартии", СтатусПартии);
	
	ТаблицаРаспределенияПоСкладам = ЗапросРаспределенияПоСкладам.Выполнить().Выгрузить();
	
	РаспределитьПоСкладам(ТаблицаПоТоварам, ТаблицаРаспределенияПоСкладам, СтруктураШапкиДокумента, СтатусПартии, Отказ, Заголовок);

КонецПроцедуры//РаспределитьДопРасходыТоваровПоСкладам

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Получаем информацию по валюте в которой нужно получить результат 
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма"                , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаРаспределения"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДСРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаРегл"                    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));


	ДополнитьВзаиморасчеты = (ТаблицаТоваров.Колонки.Найти("СуммаВзаиморасчетов") = Неопределено);
	Если ДополнитьВзаиморасчеты тогда
		ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.ПроводкаСумма = СтрокаТаблицы.Стоимость;

		НДС           = СтрокаТаблицы.НДС;
		СуммаПоСтроке = ?(СуммаВключаетНДС, СтрокаТаблицы.ПроводкаСумма - НДС, СтрокаТаблицы.ПроводкаСумма);

		СтрокаТаблицы.ПроводкаСумма = СуммаПоСтроке;

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации и ДополнитьВзаиморасчеты Тогда
			СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПоСтроке+НДС, СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов,
		    	                             СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
		КонецЕсли;
		// Сначала выполняем распределение в той валюте, в которой внесены данные в документ

		// Полученный результат распределения пересчитаем в валюту регламентированного учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ПроводкаСуммаНДС = СтрокаТаблицы.НДС;
            СтрокаТаблицы.СуммаРегл = СуммаПоСтроке + НДС;
		Иначе

			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ПроводкаСумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьДокумента,
			                                 Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета,
			                                 Данные.Кратность);
											 
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту((СуммаПоСтроке + НДС), СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета,
			                                 Данные.Кратность);
								 
		КонецЕсли;

	КонецЦикла;

	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

Функция ПодготовитьТаблицуОборудования(РезультатЗапросаПоОборудования, СтруктураШапкиДокумента)

	ТаблицаОборудования = РезультатЗапросаПоОборудования.Выгрузить();

	ТаблицаОборудования.Колонки.Добавить("Стоимость");
	ТаблицаОборудования.ЗагрузитьКолонку( ТаблицаОборудования.ВыгрузитьКолонку("Сумма"), "Стоимость");
	
	ТаблицаОборудования.Колонки.Добавить("Качество");
	ТаблицаОборудования.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	ПодготовитьТаблицуОборудованияРегл(ТаблицаОборудования, СтруктураШапкиДокумента);
	ПодготовитьТаблицуОборудованияУпр (ТаблицаОборудования, СтруктураШапкиДокумента);

	Возврат ТаблицаОборудования;

КонецФункции // ПодготовитьТаблицуОборудования()

Процедура ПодготовитьТаблицуОборудованияУпр(ТаблицаОборудования, СтруктураШапкиДокумента)

	Если ТаблицаОборудования.Колонки.Найти("СуммаВзаиморасчетов") = Неопределено тогда
		ТаблицаОборудования.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	ТаблицаОборудования.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаОборудования.Колонки.Добавить("НДСУпр",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Недостающие поля.
	ТаблицаОборудования.Колонки.Добавить("СтатусПартии");

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаОборудования Цикл

		НДС           = СтрокаТаблицы.НДС;
		СуммаПоСтроке = ?(СуммаВключаетНДС, СтрокаТаблицы.Стоимость - НДС, СтрокаТаблицы.Стоимость);

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий И НЕ НДСВключенВСтоимость Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
			СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтоимостьСНДС,
				ЗаполнениеДокументов.КурсДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета),
				КурсВзаиморасчетов,
				ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета),
				КратностьВзаиморасчетов);
		КонецЕсли;

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		                                 
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
				СтруктураШапкиДокумента.КурсДокумента,
				СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
				СтруктураШапкиДокумента.КратностьДокумента,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование; 

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуОборудованияУпр()

Процедура ПодготовитьТаблицуОборудованияРегл(ТаблицаОборудования, СтруктураШапкиДокумента)

	// Получаем информацию по валюте в которой нужно получить результат 
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);

	ТаблицаОборудования.Колонки.Добавить("ПроводкаСумма"                , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаОборудования.Колонки.Добавить("ПроводкаСуммаНДС"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаОборудования.Колонки.Добавить("ПроводкаСуммаРаспределения"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаОборудования.Колонки.Добавить("ПроводкаСуммаНДСРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    ТаблицаОборудования.Колонки.Добавить("СуммаРегл"                    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	ДополнитьВзаиморасчеты = (ТаблицаОборудования.Колонки.Найти("СуммаВзаиморасчетов") = Неопределено);
	Если ДополнитьВзаиморасчеты тогда
		ТаблицаОборудования.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОборудования Цикл

		СтрокаТаблицы.ПроводкаСумма = СтрокаТаблицы.Стоимость;

		НДС           = СтрокаТаблицы.НДС;
		СуммаПоСтроке = ?(СуммаВключаетНДС, СтрокаТаблицы.ПроводкаСумма - НДС, СтрокаТаблицы.ПроводкаСумма);

		СтрокаТаблицы.ПроводкаСумма = СуммаПоСтроке;

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации и ДополнитьВзаиморасчеты Тогда
			СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СуммаПоСтроке + НДС,
				СтруктураШапкиДокумента.КурсДокумента,
				СтруктураШапкиДокумента.КурсВзаиморасчетов,
				СтруктураШапкиДокумента.КратностьДокумента,
				СтруктураШапкиДокумента.КратностьВзаиморасчетов);
		КонецЕсли;

		// Сначала выполняем распределение в той валюте, в которой внесены данные в документ

		// Полученный результат распределения пересчитаем в валюту регламентированного учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ПроводкаСуммаНДС = СтрокаТаблицы.НДС;
			СтрокаТаблицы.СуммаРегл = СуммаПоСтроке + НДС;

		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ПроводкаСумма, СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
				СтруктураШапкиДокумента.КурсДокумента,
				Данные.Курс, 
				СтруктураШапкиДокумента.КратностьДокумента,
				Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
				СтруктураШапкиДокумента.КурсДокумента,
				Данные.Курс, 
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета,
				Данные.Кратность);
				
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту((СуммаПоСтроке + НДС), СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета,
			                                 Данные.Кратность);
	
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметров,СтруктураШапкиДокумента, ТаблицаПоТоварам)

	КолонкаСклада = ТаблицаПоТоварам.ВыгрузитьКолонку("Склад");

	//ПолучениеОсновныхДанных
	СтруктураКолонокТаблицы = Новый Структура();
	СтруктураКолонокТаблицы.Вставить("СуммаБезНДС","СуммаСНДС");
	СтруктураКолонокТаблицы.Вставить("НДС","СуммаНДС");
	СтруктураКолонокТаблицы.Вставить("СуммаБезНДСВал","СуммаВзаиморасчетов");
	СтруктураКолонокТаблицы.Вставить("НДСВал");
	СтруктураКолонокТаблицы.Вставить("Номенклатура");
	СтруктураКолонокТаблицы.Вставить("СчетУчетаБУ","КоррСчет");
	СтруктураКолонокТаблицы.Вставить("СчетУчетаНУ");
	СтруктураКолонокТаблицы.Вставить("СтатьяЗатратНУ");
	СтруктураКолонокТаблицы.Вставить("СчетУчетаНДС","СчетНДС");
	СтруктураКолонокТаблицы.Вставить("СтавкаНДС");
	СтруктураКолонокТаблицы.Вставить("Склад");
	СтруктураКолонокТаблицы.Вставить("Сделка");

	ТаблицаДвиженийДРРпП = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам,СтруктураКолонокТаблицы);

	СтрокиКУдалению = Новый Массив();

	ТаблицаДвиженийДРРпП.Колонки.Добавить("КоррСубконто1");
	ТаблицаДвиженийДРРпП.Колонки.Добавить("КоррСубконто2");
	ТаблицаДвиженийДРРпП.Колонки.Добавить("КоррСубконто3");
	ТаблицаДвиженийДРРпП.Колонки.Добавить("СубконтоНДС1");
	ТаблицаДвиженийДРРпП.Колонки.Добавить("СубконтоНДС2");
	ТаблицаДвиженийДРРпП.Колонки.Добавить("СубконтоНДС3");

	Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда

		ТаблицаДвиженийДРРпП.Колонки.Добавить("СубконтоНУ1");
		ТаблицаДвиженийДРРпП.Колонки.Добавить("СубконтоНУ2");
		ТаблицаДвиженийДРРпП.Колонки.Добавить("СубконтоНУ3");

	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвиженийДРРпП Цикл

		СтрокаТаблицы.СуммаВзаиморасчетов	= СтрокаТаблицы.СуммаВзаиморасчетов + СтрокаТаблицы.НДСВал;
		СтрокаТаблицы.СуммаСНДС			= СтрокаТаблицы.СуммаСНДС + СтрокаТаблицы.СуммаНДС;
			
		КоррСчет = СтрокаТаблицы["КоррСчет"];

		Если СтрокаТаблицы["КоррСчет"].Забалансовый тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
			Продолжить;
		КонецЕслИ;
		
		Для каждого ВидСубконто из КоррСчет.ВидыСубконто Цикл

			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы["Номенклатура"])) Тогда
				СтрокаТаблицы["КоррСубконто"+ВидСубконто.НомерСтроки] = СтрокаТаблицы["Номенклатура"];
			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы["Склад"])) Тогда
				СтрокаТаблицы["КоррСубконто"+ВидСубконто.НомерСтроки] = СтрокаТаблицы["Склад"];
			Конецесли;
		КонецЦикла;

		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда

			СчетНУ = СтрокаТаблицы["СчетУчетаНУ"];

			Для каждого ВидСубконто из СчетНУ.ВидыСубконто Цикл

				Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы["Номенклатура"])) Тогда
					СтрокаТаблицы["СубконтоНУ"+ВидСубконто.НомерСтроки] = СтрокаТаблицы["Номенклатура"];
				ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы["Склад"])) Тогда
					СтрокаТаблицы["СубконтоНУ"+ВидСубконто.НомерСтроки] = СтрокаТаблицы["Склад"];
				ИначеЕсли ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["СтатьиЗатрат"] Тогда
					СтрокаТаблицы["СубконтоНУ"+ВидСубконто.НомерСтроки] = СтрокаТаблицы["СтатьяЗатратНУ"];
				Конецесли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Для каждого Строка из СтрокиКУдалению Цикл
		ТаблицаДвиженийДРРпП.Удалить(Строка);
	КонецЦикла;

	СтруктураПараметров.Вставить("ВидЦенности",        Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
	СтруктураПараметров.Вставить("СуммаДокументаСНДС", СтруктураШапкиДокумента.СуммаДокумента);

	Возврат ТаблицаДвиженийДРРпП;

КонецФункции

Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
КонецПроцедуры // Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл()	

//АБС 36815
// Выполняет проверки,заполненности реквизитов ТТК (ЗЗ, Статус)
Процедура ПроверитьЗаполнениеШапкиТТК(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.абс_ЗакупочныйЗаказ.Пустая() Тогда
		Отказ = истина;
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен Закупочный Заказ!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.абс_ДатаПоставки) Тогда
		Отказ = Истина;
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена дата поставки!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Подразделение) Тогда
		Отказ = Истина;
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено подразделение (ЦФО)!", Отказ, Заголовок);
	КонецЕсли;	

	Если ЗначениеЗаполнено( СтруктураШапкиДокумента.абс_ЗакупочныйЗаказ) Тогда
		Если СтруктураШапкиДокумента.абс_ЗакупочныйЗаказ.УбыткиПрошлыхЛет Тогда
			Возврат;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.абс_ЗакупочныйЗаказ.РасходыБудущихПериодов Тогда
			Возврат;
		КонецЕсли;
		
		
		
		
		Если мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа <> '00010101'  
			и мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа <= СтруктураШапкиДокумента.Дата Тогда
			Запрос = Новый Запрос;
			
			Если абс_ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ,
				|	&СуммаДокумента КАК СуммаИзДокумента,
				|	ЕСТЬNULL(абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.СуммаОстаток, 0) КАК Остаток
				|ИЗ
				|	РегистрНакопления.абс_ГрафикПоставкиЗакупочногоЗаказа.Остатки(, ЗакупочныйЗаказ = &ЗакупочныйЗаказ) КАК абс_ГрафикПоставкиЗакупочногоЗаказаОстатки";
			Иначе
				
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ,
				|	&СуммаДокумента КАК СуммаИзДокумента,
				|	ЕСТЬNULL(абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.СуммаОстаток, 0) КАК Остаток
				|ИЗ
				|	РегистрНакопления.абс_ГрафикПоставкиЗакупочногоЗаказа.Остатки(
				|			,
				|			ЗакупочныйЗаказ = &ЗакупочныйЗаказ
				|				И ПериодПоставки = &ПериодПоставки) КАК абс_ГрафикПоставкиЗакупочногоЗаказаОстатки";
			КонецЕсли;
			
			врСуммаДокументаБезНДС = СтруктураШапкиДокумента.Сумма - ?(СтруктураШапкиДокумента.СуммаВключаетНДС,СтруктураШапкиДокумента.СуммаНДС,0);
			
			Запрос.УстановитьПараметр("ЗакупочныйЗаказ", абс_ЗакупочныйЗаказ);
			Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Дата,ВидГраницы.Исключая));
			Запрос.УстановитьПараметр("СуммаДокумента", врСуммаДокументаБезНДС);    
			Запрос.УстановитьПараметр("ПериодПоставки", НачалоМесяца(Дата));
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			ТекстСообщения = "";
			
			Если Выборка.Количество() = 0 Тогда
				Если абс_ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
					Если Не КонтрольЛимитов(врСуммаДокументаБезНДС,абс_ЗакупочныйЗаказ) Тогда
						Отказ = истина;
						ТекстСообщения = "Сумма по документу " + абс_ЗакупочныйЗаказ + " превышает сумму по графику поставок!";
					КонецЕсли;
				Иначе
					Отказ = истина;
					ТекстСообщения = "Сумма по документу " + абс_ЗакупочныйЗаказ + " превышает сумму по графику поставок!";
				КонецЕсли;
				
			Иначе
				
				
				
				Пока Выборка.Следующий() Цикл
					Если Выборка.СуммаИзДокумента > Выборка.Остаток Тогда
						Если Выборка.ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
							Если Не КонтрольЛимитов(Выборка.СуммаИзДокумента - Выборка.Остаток,Выборка.ЗакупочныйЗаказ) Тогда
								Отказ = истина;
								ТекстСообщения = "Сумма по документу " + Выборка.ЗакупочныйЗаказ + " превышает сумму по графику поставок!";
							КонецЕсли;
						Иначе
							Отказ = истина;
							ТекстСообщения = "Сумма по документу " + Выборка.ЗакупочныйЗаказ + " превышает сумму по графику поставок!" + Символы.ПС;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Отказ Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
			КонецЕсли;
			
			
		Иначе
			// АБС ВСТАВКА Фролов 1455
			Если СтруктураШапкиДокумента.абс_ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
				Возврат;
			КонецЕсли;
			// АБС ВСТАВКА Фролов 1455 КОНЕЦ		
			
			Запрос = Новый Запрос;
			
			Если СтруктураШапкиДокумента.абс_ЗакупочныйЗаказ.НефиксированнаяСумма Тогда 
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	НАЧАЛОПЕРИОДА(абс_СчетНаОплату.ПериодПлатежа, МЕСЯЦ) КАК Период,
				|	СУММА(абс_СчетНаОплату.ВалютнаяСумма) КАК СуммаСНДС
				|ИЗ
				|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
				|ГДЕ
				|	абс_СчетНаОплату.Проведен = ИСТИНА
				|	И абс_СчетНаОплату.ЗакупочныйЗаказ = &Ссылка
				|	И НАЧАЛОПЕРИОДА(абс_СчетНаОплату.ПериодПлатежа, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&дата, МЕСЯЦ)
				|
				|СГРУППИРОВАТЬ ПО
				|	НАЧАЛОПЕРИОДА(абс_СчетНаОплату.ПериодПлатежа, МЕСЯЦ)";
				
			Иначе
				
				Запрос.Текст=
				"ВЫБРАТЬ
				|	абс_ЗакупочныйЗаказГрафикПоставок.Период,
				|	СУММА(ЕСТЬNULL(абс_ЗакупочныйЗаказГрафикПоставок.ВалютнаяСуммаСНДС, 0)) КАК СуммаСНДС
				|ИЗ
				|	Документ.абс_ЗакупочныйЗаказ.ГрафикПоставок КАК абс_ЗакупочныйЗаказГрафикПоставок
				|ГДЕ
				|	абс_ЗакупочныйЗаказГрафикПоставок.Ссылка = &Ссылка
				|	И НАЧАЛОПЕРИОДА(абс_ЗакупочныйЗаказГрафикПоставок.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
				|
				|СГРУППИРОВАТЬ ПО
				|	абс_ЗакупочныйЗаказГрафикПоставок.Период";
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Дата"	,СтруктураШапкиДокумента.абс_ДатаПоставки);
			Запрос.УстановитьПараметр("Ссылка"	,СтруктураШапкиДокумента.абс_ЗакупочныйЗаказ);
			
			ЗапросПоСформированнымПоставкам = Новый Запрос(
			"ВЫБРАТЬ
			|	СУММА(ПоДокументам.СуммаДокумента) КАК СуммаДокумента,
			|	ПоДокументам.Период
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
			|		НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.абс_ДатаПоставки, МЕСЯЦ) КАК Период
			|	ИЗ
			|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
			|	ГДЕ
			|		НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.абс_ДатаПоставки, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
			|		И ПоступлениеТоваровУслуг.Проведен = ИСТИНА
			|		И ПоступлениеТоваровУслуг.ОтражатьВУправленческомУчете = ИСТИНА
			|		И ПоступлениеТоваровУслуг.абс_ЗакупочныйЗаказ = &Ссылка
			|		И (НЕ ПоступлениеТоваровУслуг.Ссылка = &ТекДокумент)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		АвансовыйОтчет.абс_СуммаДокументаБезНоменклатурыБезДвижений,
			|		НАЧАЛОПЕРИОДА(АвансовыйОтчет.абс_ДатаПоставки, МЕСЯЦ)
			|	ИЗ
			|		Документ.АвансовыйОтчет КАК АвансовыйОтчет
			|	ГДЕ
			|		НАЧАЛОПЕРИОДА(АвансовыйОтчет.абс_ДатаПоставки, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
			|		И АвансовыйОтчет.Проведен = ИСТИНА
			|		И АвансовыйОтчет.ОтражатьВУправленческомУчете = ИСТИНА
			|		И АвансовыйОтчет.абс_ЗакупочныйЗаказ = &Ссылка
			|		И (НЕ АвансовыйОтчет.Ссылка = &ТекДокумент)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ПоступлениеДопРасходов.СуммаДокумента,
			|		НАЧАЛОПЕРИОДА(ПоступлениеДопРасходов.абс_ДатаПоставки, МЕСЯЦ)
			|	ИЗ
			|		Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
			|	ГДЕ
			|		НАЧАЛОПЕРИОДА(ПоступлениеДопРасходов.абс_ДатаПоставки, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
			|		И ПоступлениеДопРасходов.Проведен = ИСТИНА
			|		И ПоступлениеДопРасходов.ОтражатьВУправленческомУчете = ИСТИНА
			|		И ПоступлениеДопРасходов.абс_ЗакупочныйЗаказ = &Ссылка
			|		И (НЕ ПоступлениеДопРасходов.Ссылка = &ТекДокумент)) КАК ПоДокументам
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоДокументам.Период");
			
			ЗапросПоСформированнымПоставкам.УстановитьПараметр("Дата"	, СтруктураШапкиДокумента.абс_ДатаПоставки);
			ЗапросПоСформированнымПоставкам.УстановитьПараметр("Ссылка"	, СтруктураШапкиДокумента.абс_ЗакупочныйЗаказ); 
			ЗапросПоСформированнымПоставкам.УстановитьПараметр("ТекДокумент", СтруктураШапкиДокумента.Ссылка);
			
			ВыборкаСформированныхПоставок = ЗапросПоСформированнымПоставкам.Выполнить().Выбрать();
			
			СуммаСформированныхПоставок = 0;
			
			Если ВыборкаСформированныхПоставок.Следующий() Тогда
				СуммаСформированныхПоставок = ВыборкаСформированныхПоставок.СуммаДокумента;
			КонецЕсли;
			
			ТекстСообщения = "";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				//Проверяем что сумма поступления <=сумме по графику
				//впоследствии в запрос нужно встроить контроль с учетом ранее отраженных документов
				Если Окр(Выборка.СуммаСНДС - СуммаСформированныхПоставок + 0.5) < Окр(СтруктураШапкиДокумента.СуммаДокумента) Тогда
					Отказ = истина;
					ТекстСообщения = "Сумма документа превышает сумму по графику поставок!";
					
					//ttk_ОбщегоНазначения.СообщитьОбОшибке( "Сумма документа превышает сумму по графику поставок!", Отказ, Заголовок);
				КонецЕсли;
			Иначе
				Отказ = истина;
				ТекстСообщения = "Не заполнен график поставок Закупочного Заказа на дату документа.";
				//ttk_ОбщегоНазначения.СообщитьОбОшибке( "Не заполнен график поставок Закупочного Заказа на дату документа", Отказ, Заголовок);
			КонецЕсли;
			
			Если Отказ И абс_ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
				
				ТекстСообщения = ТекстСообщения + " Для заказов с нефиксированной суммой график поставок формируется по счетам.";
				
			КонецЕсли;
			
			Если Отказ Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры
//\\АБС 36815

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, СпособРаспределения, 
	                                 |ВалютаДокумента");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, СпособРаспределения, 
	                                 |ВалютаДокумента, Контрагент, ДоговорКонтрагента, 
	                                 |КурсВзаиморасчетов,КратностьВзаиморасчетов");
	КонецЕсли;

	Если Сумма = 0 Тогда
		СтруктураОбязательныхПолей.Удалить("СпособРаспределения");
	КонецЕсли;

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		                      "По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
		                       |Заполните поле ""Заказ поставщику""!");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//АБС 56815
	ПроверитьЗаполнениеШапкиТТК(СтруктураШапкиДокумента, Отказ, Заголовок);
	//\\АБС 56815	

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		// АБС ВСТАВКА Фролов, попробуем проводить без партии
		//СтруктураОбязательныхПолей.Вставить("ДокументПартии");
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл()	

// Проверяет нет ли среди документов партии поступлений товаров на комиссию
//
Процедура ПроверитьЧтоНетКомиссии(ТаблицаПоТоварам, Отказ, Заголовок)
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварам Цикл
		Если СтрокаТаблицы.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части ""Товары"" в качестве документа партии выбрано поступление на комиссию.",
							   Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЧтоНетКомиссии()

// Если способ распределения установлен по весу, то проверяется сумма весов по всем строкам
//
Процедура ПроверитьВес(ТаблицаПоТоварам, Отказ, Заголовок)

	Если СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
		Если ТаблицаПоТоварам.Количество() > 0
		   И ТаблицаПоТоварам.Итог("Вес") = 0 Тогда
			ТекстСообщения = "Суммарный вес всех позиций номенклатуры равен нулю!";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, ИмяТабЧасти)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
    ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьВес(ТаблицаПоТоварам, Отказ, Заголовок);

	ПроверитьЧтоНетКомиссии(ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);
	
	Для Каждого СтрокаТаб Из ТаблицаПоТоварам Цикл
		Если СтрокаТаб.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке( "Нельзя относить доп. расходы на поступление материалов в переработку! (строка № " + СтрокаТаб.НомерСтроки + ")", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, 
								ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ,Заголовок,РежимПроведения)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок, РежимПроведения);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
		ТаблицыДокумента.Вставить("ТаблицаПоОборудованию",ТаблицаПоОборудованию);

		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ);
		
	КонецЕсли;
	
	ДвиженияПоРегистрамБухгалтерииРегл(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, РежимПроведения);
    ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок);
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
	                                             Отказ, Заголовок, СтруктураШапкиДокумента);
	// АБС ВСТАВКА 05448 начало
	Если мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа <> '00010101'  
		и мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа <= СтруктураШапкиДокумента.Дата Тогда
		ДвиженияПоРегиструГрафикПоставкиЗакупочногоЗаказа(СтруктураШапкиДокумента);
	КонецЕсли;
	// АБС ВСТАВКА 05448 конец

КонецПроцедуры

// Формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  СтруктураШапкиДокумента  - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам         - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоОборудованию    - таблица значений, содержащая данные для проведения и проверки ТЧ Оборудование
//  Отказ                    - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок, РежимПроведения)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(
		ЭтотОбъект,
		СтруктураШапкиДокумента, 
		мСтруктураПараметровВзаиморасчетов, 
		ТаблицаПоВзаиморасчетам, 
		ТаблицаПоРасчетам, 
		ВидДвиженияНакопления.Расход, 
		Отказ, 
		Заголовок);
	
	
	// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, 
		Отказ, 
		ТаблицаПоТоварам, 
		Неопределено, 
		ТаблицаПоОборудованию, 
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, 
		ЛОЖЬ,
		ЛОЖЬ);
	
	// ТОВАРЫ ПО РЕГИСТРУ доп.расходов для последующего распределения
	НаборДвижений = Движения.ДопРасходыНаПриобретениеТоваров;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ТабЗатрат = ТаблицаПоТоварам.Скопировать();
	
	// Из таблицы по товарам выделим строки, для которых НЕ заполнен документ оприходования
	Инд=0;
	Пока Инд<ТабЗатрат.Количество() Цикл
		
		Если ЗначениеЗаполнено(ТабЗатрат[Инд].ДокументОприходования) Тогда
			ТабЗатрат.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТабЗатрат.Колонки.Найти("Сумма")<>Неопределено Тогда
		ТабЗатрат.Колонки.Удалить("Сумма");
	КонецЕсли;
	ТабЗатрат.Колонки.Стоимость.Имя = "Сумма";
	
	// Заполним таблицу движений.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТабЗатрат, ТаблицаДвижений);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ДопРасходыНаПриобретениеТоваров.ВыполнитьПриход();
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		// ТОВАРЫ ПО РЕГИСТРУ Закупки.
		
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
		ТаблицаДвиженийЗакупки.Очистить();
		ТаблицаПоЗакупкам = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоЗакупкам.Колонки.ДокументОприходования.Имя = "ДокументЗакупки";
		ТаблицаПоЗакупкам.Колонки.НДС.Имя = "_НДС";
		ТаблицаПоЗакупкам.Колонки.НДСУпрРаспределения.Имя = "НДС";
		
		Для каждого СтрокаЗакупки из ТаблицаПоЗакупкам цикл
			СтрокаЗакупки.Стоимость = СтрокаЗакупки.СуммаУпр + СтрокаЗакупки.СуммаУпрРаспределения;
		КонецЦикла;
		
		//добавление движений по оборудованию
		Для каждого СтрокаОборудование из ТаблицаПоОборудованию цикл
			СтрокаЗакупки = ТаблицаПоЗакупкам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗакупки,СтрокаОборудование);
			СтрокаЗакупки.Стоимость = СтрокаЗакупки.СуммаУпр + СтрокаЗакупки.СуммаУпрРаспределения;
			СтрокаЗакупки.НДС = СтрокаОборудование.НДСУпрРаспределения;
			СтрокаЗакупки.ДокументЗакупки = СтрокаОборудование.ДокументОприходования;
		КонецЦикла;
		
		ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
		
		// Заполним таблицу движений.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоЗакупкам, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, 		  "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, 		  "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(0,                  "Количество");
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			ИЛИ (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			И  СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом) Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПоставщику");
		КонецЕсли;
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;
		
		
	КонецЕсли;
	
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()	

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

// Формирует бухгалтерские и налоговые проводки по регистрам бухгалтерии
// а также регистрирует НДС с распределяемых доп. расходов в регистре НДСДопРасходы
// 
Процедура ДвиженияПоРегистрамБухгалтерииРегл(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок, РежимПроведения)
	
	Если (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) 
	   И (ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации) Тогда

		ПроводкиБУ = Движения.Хозрасчетный;
		ПроводкиНУ = Движения.Налоговый;
		ДатаДока   = Дата;

		ИтогоВес         = 0;
		ИтогоКоличество  = ТаблицаПоТоварам.Итог("Количество");
		ИтогоСуммаТовара = ТаблицаПоТоварам.Итог("СуммаТовара");

		ОбщаяТаблицаДокумента = ТаблицаПоТоварам.Скопировать();
		Для Каждого СтрокаОборуд Из ТаблицаПоОборудованию Цикл
			НоваяСтрока = ОбщаяТаблицаДокумента.Добавить();
			ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений( НоваяСтрока, СтрокаОборуд, ТаблицаПоОборудованию);
		КонецЦикла;
		ОбщаяТаблицаДокумента.Колонки.Добавить("Сделка");
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ОбщаяТаблицаДокумента.ЗаполнитьЗначения(Неопределено, "Сделка");
		Иначе
			ОбщаяТаблицаДокумента.ЗаполнитьЗначения(Сделка, "Сделка");
		КонецЕсли;
		
		УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, , , ТаблицаПоОборудованию, , СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
		
		УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
			?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
			СтруктураШапкиДокумента, 
			Отказ, 
			ТаблицаПоТоварам, 
			Неопределено, 
			ТаблицаПоОборудованию, 
			ЛОЖЬ,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
			ЛОЖЬ);
		
        УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
				?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
				СтруктураШапкиДокумента, 
				Отказ, 
				ТаблицаПоТоварам, 
				Неопределено, 
				ТаблицаПоОборудованию, 
				ЛОЖЬ,
				ЛОЖЬ,
				СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);

		// Движения по взаиморасчетам
		СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок,, ТаблицаПоДокументамРасчетовСКонтрагентом);
		Если СтруктураПараметровЗачетАванса = ложь тогда
			//Отказ = Истина;
			СуммаАванса = 0;
		Иначе
			
			ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению( СтруктураПараметровЗачетАванса, СтруктураШапкиДокумента, ОбщаяТаблицаДокумента);
			СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, 
				ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению);
			
		КонецЕсли;

		Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
				СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ",Движения.Налоговый);
			Конецесли;
			БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса,
				мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
		Конецесли;

	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПроводкиБУ.Записать(ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПроводкиНУ.Записать(ложь);
    КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамБухгалтерииРегл()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок)
	
	Если (Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений = Движения.РасходыПриУСН;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвижений, 
							Перечисления.ВидыРасходовУСН.ДопРасходы, СтруктураШапкиДокумента.ДоговорКонтрагента,
							Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
							
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоОборудованию, ТаблицаДвижений, 
							Перечисления.ВидыРасходовУСН.Услуги, СтруктураШапкиДокумента.ДоговорКонтрагента,
							Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
																
	//Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
			
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ) Экспорт

	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ТабЧасть = ТаблицаДокумента.Значение;
			
		Если ТабЧасть.Количество()> 0 Тогда 
			Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
				УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТабЧасть, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если по договору с контрагентом организация выступает в качестве налогового агента, требуется отразить начисление НДС
	Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента);
	КонецЕсли; 

	// При необходимости отражаем в регистре партионного учета для НДС
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
			
		ТабЧасть = ТаблицаДокумента.Значение;
		Если Не ТабЧасть.Количество() = 0 Тогда
				
			ТаблицаДляНДСПартии = ТабЧасть.Скопировать(Новый Структура("Услуга", Ложь), 
									"ДокументОприходования, Склад, ВидЦенности, СчетУчетаЦенности, СчетУчетаНДС, Номенклатура, 
									|ХарактеристикаНоменклатуры, СерияНоменклатуры, Услуга, НДС, СуммаБезНДС, Количество");
			ТаблицаДляНДСПартии.Колонки.ДокументОприходования.Имя = "Партия";
			ТаблицаДляНДСПартии.ЗаполнитьЗначения(Истина, "Услуга");
			
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДляНДСПартии, , Отказ);
			
		КонецЕсли;
			
	КонецЦикла; 
	
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()	

Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)
	
	
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеРегл()	

Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СтавкаНДС"   ,   "Ссылка.СтавкаНДС");
	СтруктураПолей.Вставить("СчетУчетаБУ" ,   "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНДС",   "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНУ" ,   "СчетУчетаНУ");
	СтруктураПолей.Вставить("СтатьяЗатратНУ", "СтатьяЗатратНУ");
	СтруктураПолей.Вставить("ОтражениеВУСН"  ,"ОтражениеВУСН");
	
	СтруктураПолей.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()


// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    ТипОснования = ТипЗнч(Основание);
	
	//Документ можно вводить только на основании поступлений
	Если ТипОснования <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	  И ТипОснования <> Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		Возврат;
	КонецЕсли;	

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;
	
	Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И
		Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТоварыПоПоступлениюТоваров(Основание, Товары);

	Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ЗаполнитьТоварыПоПоступлениюТоваров(Основание, Оборудование);
	КонецЕсли;

	// Заполним счета учета расчетов
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
	
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура определяет параметры учетной политики. Процедура может вызываться при проведении документа в подсистеме НДС 
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ)

	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете)
		ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаРегл = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗ_БУ", УчетнаяПолитикаРегл.СпособОценкиМПЗ);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения=неопределено,Отказ = ложь) Экспорт
    // Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ttk_ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);



	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"       , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"        , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                 , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                 , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"                , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом" , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "УчетАгентскогоНДС"            , "УчетАгентскогоНДС");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидАгентскогоДоговора"        , "ВидАгентскогоДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "НалоговыйАгентПоОплате"       , "НалоговыйАгентПоОплате");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам" , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "СпособОценкиМПЗ"              , "СпособОценкиМПЗ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий", "НеВключатьНДСВСтоимостьПартий");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ = Ложь, Заголовок = "") Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();
	
	СтруктураПолей.Удалить("Количество");

	СтруктураПолей.Вставить("Услуга"                                     , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                                      , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                                   , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЗаказПокупателя"                            , "ЗаказПокупателя");
	СтруктураПолей.Вставить("СуммаТовара"                                , "СуммаТовара");
	СтруктураПолей.Вставить("Сумма"                                		 , "Сумма");
	СтруктураПолей.Вставить("НДС"                                		 , "СуммаНДС");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"                        , "ЗаказПокупателя.ВидОперации");
	СтруктураПолей.Вставить("ДокументОприходования"                      , "ДокументПартии");
																			
	СтруктураПолей.Вставить("ВидДоговораПартии"                          , "ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("ДокументПартииВидОперации"                  , "ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("ДокументПартииВидПоступления"               , "ДокументПартии.ВидПоступления");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"                      , "ЗаказПокупателя.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", "ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"               , "Номенклатура.ВестиПартионныйУчетПоСериям");
	
	СтруктураСложныхПолей = новый Структура();
	
	//АБС+ 9499
	//СтруктураСложныхПолей.Вставить("Склад"                                      , "ВЫБОР 
	//																			|КОГДА ДокументПартии ССЫЛКА Документ.ОприходованиеТоваров ИЛИ ДокументПартии ССЫЛКА Документ.ПоступлениеТоваровУслугВНТТ ТОГДА ДокументПартии.Склад
	//																			|КОГДА ДокументПартии.СкладОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары ТОГДА ДокументПартии.СкладОрдер.Склад
	//																			|ИНАЧЕ ДокументПартии.СкладОрдер КОНЕЦ"); 
    СтруктураСложныхПолей.Вставить("Склад"                                      , "Док.Склад"); 
	//АБС- 9499
	
	
	СтруктураСложныхПолей.Вставить("ВидСклада"                                      , "ВЫБОР 
																				|КОГДА ДокументПартии ССЫЛКА Документ.ОприходованиеТоваров ИЛИ ДокументПартии ССЫЛКА Документ.ПоступлениеТоваровУслугВНТТ ТОГДА 
																				|		ДокументПартии.Склад.ВидСклада
																				|КОГДА ДокументПартии.СкладОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары ТОГДА 
																				|		ДокументПартии.СкладОрдер.Склад.ВидСклада
																				|ИНАЧЕ ВЫРАЗИТЬ(ДокументПартии.СкладОрдер КАК Справочник.Склады).ВидСклада КОНЕЦ"); 
	СтруктураСложныхПолей.Вставить("Вес"                                        , "ВЫБОР
																				|КОГДА ЕдиницаИзмерения.Вес ЕСТЬ NULL ТОГДА 0
																				|ИНАЧЕ ЕдиницаИзмерения.Вес * Количество КОНЕЦ"); 
	СтруктураСложныхПолей.Вставить("Количество"                					, "ВЫБОР
																				|КОГДА Номенклатура.ЕдиницаХраненияОстатков ЕСТЬ NULL ТОГДА 0
																				|ИНАЧЕ Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КОНЕЦ");
																				
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);
	ТаблицаПоТоварам          = ПодготовитьТаблицуТоваров     (РезультатЗапросаПоТоварам,      СтруктураШапкиДокумента);

	СтруктураПолей.Удалить("ЗаказПокупателя");
	СтруктураПолей.Удалить("ВидЗаказаПокупателя");
	СтруктураПолей.Удалить("СкладЗаказаПокупателя");
	СтруктураПолей.Удалить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Удалить("ОтражениеВУСН");
	СтруктураПолей.Удалить("Количество");
	
	СтруктураСложныхПолей = новый Структура();
	
	//АБС+ 9499
	//СтруктураСложныхПолей.Вставить("Склад"                                      , "ВЫБОР КОГДА ДокументПартии ССЫЛКА Документ.ОприходованиеТоваров ТОГДА ДокументПартии.Склад
	//																			|КОГДА ДокументПартии.СкладОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары ТОГДА ДокументПартии.СкладОрдер.Склад
	//																			|ИНАЧЕ ДокументПартии.СкладОрдер КОНЕЦ"); 
	СтруктураСложныхПолей.Вставить("Склад"                                      , "Док.Склад"); 
	//АБС- 9499
	
	СтруктураСложныхПолей.Вставить("ВидСклада"                                      , "ВЫБОР КОГДА ДокументПартии ССЫЛКА Документ.ОприходованиеТоваров ТОГДА ДокументПартии.Склад.ВидСклада 
																				|КОГДА ДокументПартии.СкладОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары ТОГДА ДокументПартии.СкладОрдер.Склад.ВидСклада
																				|ИНАЧЕ ВЫРАЗИТЬ(ДокументПартии.СкладОрдер КАК Справочник.Склады).ВидСклада КОНЕЦ"); 
	СтруктураСложныхПолей.Вставить("Вес"                                        , "ВЫБОР
																				|КОГДА ЕдиницаИзмерения.Вес ЕСТЬ NULL ТОГДА 0
																				|ИНАЧЕ ЕдиницаИзмерения.Вес * Количество КОНЕЦ"); 
	СтруктураСложныхПолей.Вставить("Количество"            						, "ВЫБОР
																				|КОГДА Номенклатура.ЕдиницаХраненияОстатков ЕСТЬ NULL ТОГДА 0
																				|ИНАЧЕ Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КОНЕЦ");
	
	РезультатЗапросаПоОборудованию = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей, СтруктураСложныхПолей);
	ТаблицаПоОборудованию          = ПодготовитьТаблицуОборудования(РезультатЗапросаПоОборудованию, СтруктураШапкиДокумента);
	
	ДобавитьРаспределение( ТаблицаПоТоварам, ТаблицаПоОборудованию, СтруктураШапкиДокумента);
	
	Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам Тогда
		РаспределитьДопРасходыТоваровПоСкладам(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
		РаспределитьДопРасходыОборудованияПоСкладам(ТаблицаПоОборудованию, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	//Заполнение счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 		СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Оборудование", 	ТаблицаПоОборудованию, 	СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам,      СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОборудованию, СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
	КонецЕсли;
	
    БухгалтерскийУчет.СформироватьКолонкиДляСодержанияПроводкиПоВходящемуДокументу(ТаблицаПоТоварам, "вх.док.", НомерВходящегоДокумента, ДатаВходящегоДокумента);	
	БухгалтерскийУчет.СформироватьСодержаниеПроводкиПоВходящемуДокументу(ТаблицаПоТоварам, Содержание);
    БухгалтерскийУчет.СформироватьКолонкиДляСодержанияПроводкиПоВходящемуДокументу(ТаблицаПоОборудованию, "вх.док.", НомерВходящегоДокумента, ДатаВходящегоДокумента);	
	БухгалтерскийУчет.СформироватьСодержаниеПроводкиПоВходящемуДокументу(ТаблицаПоОборудованию, Содержание);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		И СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ);
	КонецЕсли;
	
	// Если шапка не заполнена корректна то дальше лучше не идти, поскольку возможны ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ,Заголовок);

	
	ПроводитьПоВзаиморасчетам = (ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации);
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Оборудование", ТаблицаПоТоварам, ТаблицаПоОборудованию);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);


	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок, "Товары");
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоОборудованию, СтруктураШапкиДокумента, Отказ, Заголовок, "Оборудование");

	//Проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 		ТаблицаПоТоварам, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Оборудование", 	ТаблицаПоОборудованию, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
			СтруктураШапкиДокумента.ДоговорКонтрагента,
			СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
			СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
			мВалютаРегламентированногоУчета, Ложь, Отказ, Заголовок);

	КонецЕсли;

	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, 
			ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ,Заголовок,РежимПроведения);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоОборудованию", ТаблицаПоТоварам, ТаблицаПоОборудованию));

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Сумма + Товары.Итог("Сумма") + Оборудование.Итог("Сумма")
	                 + ?(СуммаВключаетНДС, 0, (Товары.Итог("СуммаНДС")+ Оборудование.Итог("СуммаНДС") + СуммаНДС));
					 
	// АБС ВСТАВКА Пополитов 4233 НАЧАЛО
	абс_СуммаНДС = Товары.Итог("СуммаНДС")+ Оборудование.Итог("СуммаНДС") + СуммаНДС;
	//\\ АБС ВСТАВКА Пополитов 4233 КОНЕЦ 					 

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

// АБС ВСТАВКА 05448 Начало

// Проверка совпадения суммы по ТЧ Закупочные Заказы с суммами по остальным ТЧ
//
// Параметры:
//  Отказ     - флаг отказа в проведении,
//  Заголовок - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗакупочныеЗаказы(Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка,
	              |	СУММА(ПоступлениеТоваровУслугОбъектыСтроительства.Сумма) КАК Сумма,
	              |	СУММА(ВЫБОР
	              |			КОГДА ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.СуммаВключаетНДС
	              |				ТОГДА ПоступлениеТоваровУслугОбъектыСтроительства.СуммаНДС
	              |			ИНАЧЕ 0
	              |		КОНЕЦ) КАК СуммаНДС
	              |ПОМЕСТИТЬ ВТ_ОбъектыСтроительства
	              |ИЗ
	              |	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
	              |ГДЕ
	              |	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка = &Ссылка
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ПоступлениеТоваровУслугОборудование.Ссылка,
	              |	СУММА(ПоступлениеТоваровУслугОборудование.Сумма) КАК Сумма,
	              |	СУММА(ВЫБОР
	              |			КОГДА ПоступлениеТоваровУслугОборудование.Ссылка.СуммаВключаетНДС
	              |				ТОГДА ПоступлениеТоваровУслугОборудование.СуммаНДС
	              |			ИНАЧЕ 0
	              |		КОНЕЦ) КАК СуммаНДС
	              |ПОМЕСТИТЬ ВТ_Оборудование
	              |ИЗ
	              |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	              |ГДЕ
	              |	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ПоступлениеТоваровУслугОборудование.Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ПоступлениеТоваровУслугТовары.Ссылка,
	              |	СУММА(ПоступлениеТоваровУслугТовары.Сумма) КАК Сумма,
	              |	СУММА(ВЫБОР
	              |			КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	              |				ТОГДА ПоступлениеТоваровУслугТовары.СуммаНДС
	              |			ИНАЧЕ 0
	              |		КОНЕЦ) КАК СуммаНДС
	              |ПОМЕСТИТЬ ВТ_Товары
	              |ИЗ
	              |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	              |ГДЕ
	              |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ПоступлениеТоваровУслугТовары.Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ПоступлениеТоваровУслугабс_ЗакупочныеЗаказы.Ссылка,
	              |	СУММА(ПоступлениеТоваровУслугабс_ЗакупочныеЗаказы.абс_СуммаБезНДС) КАК абс_СуммаБезНДС
	              |ПОМЕСТИТЬ ВТ_ЗакупочныеЗаказы
	              |ИЗ
	              |	Документ.ПоступлениеТоваровУслуг.абс_ЗакупочныеЗаказы КАК ПоступлениеТоваровУслугабс_ЗакупочныеЗаказы
	              |ГДЕ
	              |	ПоступлениеТоваровУслугабс_ЗакупочныеЗаказы.Ссылка = &Ссылка
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ПоступлениеТоваровУслугабс_ЗакупочныеЗаказы.Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ПоступлениеТоваровУслугУслуги.Ссылка,
	              |	СУММА(ПоступлениеТоваровУслугУслуги.Сумма) КАК Сумма,
	              |	СУММА(ВЫБОР
	              |			КОГДА ПоступлениеТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	              |				ТОГДА ПоступлениеТоваровУслугУслуги.СуммаНДС
	              |			ИНАЧЕ 0
	              |		КОНЕЦ) КАК СуммаНДС
	              |ПОМЕСТИТЬ ВТ_Прочее
	              |ИЗ
	              |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	              |ГДЕ
	              |	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ПоступлениеТоваровУслугУслуги.Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка,
	              |	СУММА(ПоступлениеТоваровУслугВозвратнаяТара.Сумма) КАК Сумма
	              |ПОМЕСТИТЬ ВТ_Тара
	              |ИЗ
	              |	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслугВозвратнаяТара
	              |ГДЕ
	              |	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ВТ_ЗакупочныеЗаказы.Ссылка,
	              |	ЕСТЬNULL(ВТ_ЗакупочныеЗаказы.абс_СуммаБезНДС, 0) - (ЕСТЬNULL(ВТ_Прочее.Сумма, 0) - ЕСТЬNULL(ВТ_Прочее.СуммаНДС, 0)) - (ЕСТЬNULL(ВТ_Товары.Сумма, 0) - ЕСТЬNULL(ВТ_Товары.СуммаНДС, 0)) - ЕСТЬNULL(ВТ_Тара.Сумма, 0) - (ЕСТЬNULL(ВТ_Оборудование.Сумма, 0) - ЕСТЬNULL(ВТ_Оборудование.СуммаНДС, 0)) - (ЕСТЬNULL(ВТ_ОбъектыСтроительства.Сумма, 0) - ЕСТЬNULL(ВТ_ОбъектыСтроительства.СуммаНДС, 0)) КАК Поле1
	              |ИЗ
	              |	ВТ_ЗакупочныеЗаказы КАК ВТ_ЗакупочныеЗаказы
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	              |		ПО ВТ_ЗакупочныеЗаказы.Ссылка = ВТ_Товары.Ссылка
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Прочее КАК ВТ_Прочее
	              |		ПО ВТ_ЗакупочныеЗаказы.Ссылка = ВТ_Прочее.Ссылка
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Тара КАК ВТ_Тара
	              |		ПО ВТ_ЗакупочныеЗаказы.Ссылка = ВТ_Тара.Ссылка
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбъектыСтроительства КАК ВТ_ОбъектыСтроительства
	              |		ПО ВТ_ЗакупочныеЗаказы.Ссылка = ВТ_ОбъектыСтроительства.Ссылка
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Оборудование КАК ВТ_Оборудование
	              |		ПО ВТ_ЗакупочныеЗаказы.Ссылка = ВТ_Оборудование.Ссылка
	              |ГДЕ
	              |	ЕСТЬNULL(ВТ_ЗакупочныеЗаказы.абс_СуммаБезНДС, 0) - (ЕСТЬNULL(ВТ_Прочее.Сумма, 0) - ЕСТЬNULL(ВТ_Прочее.СуммаНДС, 0)) - (ЕСТЬNULL(ВТ_Товары.Сумма, 0) - ЕСТЬNULL(ВТ_Товары.СуммаНДС, 0)) - ЕСТЬNULL(ВТ_Тара.Сумма, 0) - (ЕСТЬNULL(ВТ_Оборудование.Сумма, 0) - ЕСТЬNULL(ВТ_Оборудование.СуммаНДС, 0)) - (ЕСТЬNULL(ВТ_ОбъектыСтроительства.Сумма, 0) - ЕСТЬNULL(ВТ_ОбъектыСтроительства.СуммаНДС, 0)) <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтрокаСообщенияОбОшибке = "Сумма документа не совпадает с суммой по Закупочным заказам!";
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // 

// АБС ВСТАВКА 9287 начало
Функция КонтрольЛимитов(СуммаПроверка,ДокЗЗ)
	
	
	//В ПТУ и авансовом отчёте этот участок закомментированн
	//Если НЕ ПараметрыСеанса.абс_ПользовательДЗО Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	Если УправлениеДопПравамиПользователей.РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Тогда
		возврат Истина;
	КонецЕсли;
	
	// {{ТТК Лапин А. Заявка Обнуление лимитов 27.10.2015 начало
	//	Если абс_Бюджетирование.ПоСтатьеРазрешеноПревышениеБюджета(ДокЗЗ.БюджетнаяСтатья) Тогда
	Если абс_Бюджетирование.ПоСтатьеРазрешеноПревышениеБюджета(ДокЗЗ.БюджетнаяСтатья, Организация) Тогда
	// }}ТТК Лапин А. Заявка № Обнуление лимитов 27.10.2015 окончание	
		возврат Истина;
	КонецЕсли;
	
	
	СтруктураАналитик = НОВЫЙ Структура;
	СтруктураАналитик.Вставить("Организация",ДокЗЗ.Организация);
	СтруктураАналитик.Вставить("абс_ЦФУ", ДокЗЗ.ЦФУ);
	СтруктураАналитик.Вставить("ЦФО", ДокЗЗ.ЦФО);
	СтруктураАналитик.Вставить("абс_ТипРасхода", ДокЗЗ.ТипРасхода);
	СтруктураАналитик.Вставить("абс_ТипКонтрагента", ДокЗЗ.ТипКонтрагента);
	СтруктураАналитик.Вставить("абс_ТипСети", ДокЗЗ.ТипСети);
	СтруктураАналитик.Вставить("абс_КВ",ДокЗЗ.КВ);
	СтруктураАналитик.Вставить("абс_ТЭО", ДокЗЗ.ТЭО);
	СтруктураАналитик.Вставить("СтатьяОборотов", ДокЗЗ.БюджетнаяСтатья);

	
	СтрокаСообщения = "";
	Остаток = абс_Бюджетирование.ОстатокЛимитаПоБюджету(НачалоМесяца(Дата),КонецМесяца(Дата), СтруктураАналитик);
	
	
	Если Остаток<СуммаПроверка Тогда
		Если Остаток = -2 тогда
			СтрокаСообщения = СтрокаСообщения+"В ПЕРИОДЕ "+ абс_СлужебныеФункции.ВернутьНазваниеМесяца(Дата)+" НЕ ЗАДАН ЛИМИТ!";
		Иначе
			СтрокаСообщения = СтрокаСообщения+"В ПЕРИОДЕ "+ абс_СлужебныеФункции.ВернутьНазваниеМесяца(Дата)+" СУММА ПРЕВЫШАЕТ ЛИМИТ! СУММА = "+СуммаПроверка+"; ЛИМИТ = "+Остаток+Символы.ПС;
		КонецЕсли;
		ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции	

Процедура СписатьЛимиты(СуммаПотрЛимитов,ДокЗЗ)
	Движения.КонтролируемыеЗначенияБюджетов.Записывать = Истина;
	Движения.КонтролируемыеЗначенияБюджетов.Очистить();
	Движения.КонтролируемыеЗначенияБюджетов.Записать();
	
	
	Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
	Движение.Период 					= Дата;
	Движение.СтатьяОборотов 			= ДокЗЗ.БюджетнаяСтатья;
	Движение.ЦФО 						= ДокЗЗ.ЦФО;
	Движение.абс_ТипКонтрагента 		= ДокЗЗ.ТипКонтрагента;
	Движение.абс_ТипСети 				= ДокЗЗ.ТипСети;
	Движение.абс_КВ 					= ДокЗЗ.КВ;
	Движение.абс_ТЭО 					= ДокЗЗ.ТЭО;
	Движение.абс_ЦФУ 					= ДокЗЗ.ЦФУ;
	Движение.абс_ТипРасхода 			= ДокЗЗ.ТипРасхода;
	Движение.Организация 				= Организация;
	Движение.СуммаСценарияИсполнение	= СуммаПотрЛимитов*КурсВзаиморасчетов;
	Движение.СуммаСценарияИсполнениеВал = СуммаПотрЛимитов;
	Движение.Валюта						= ВалютаДокумента;
	
КонецПроцедуры // )

Процедура ДвиженияПоРегиструГрафикПоставкиЗакупочногоЗаказа(СтруктураШапкиДокумента);
	Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Записывать = Истина;
	Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Очистить();
	врСуммаОтгрузки = 0;
	
	
	Если абс_ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.ПериодПоставки КАК ПериодПоставки,
		|	ЕСТЬNULL(абс_ГрафикПоставкиЗакупочногоЗаказаОстатки.СуммаОстаток, 0) КАК Остаток
		|ИЗ
		|	РегистрНакопления.абс_ГрафикПоставкиЗакупочногоЗаказа.Остатки(, ЗакупочныйЗаказ = &ЗакупочныйЗаказ) КАК абс_ГрафикПоставкиЗакупочногоЗаказаОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодПоставки";
		
		Запрос.УстановитьПараметр("ЗакупочныйЗаказ", абс_ЗакупочныйЗаказ);
		Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Дата,ВидГраницы.Исключая));
		
		врСуммаОтгрузки = СтруктураШапкиДокумента.Сумма - ?(СтруктураШапкиДокумента.СуммаВключаетНДС,СтруктураШапкиДокумента.СуммаНДС,0);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			врСуммаДвижения = Мин(врСуммаОтгрузки, Выборка.Остаток);
			Если врСуммаДвижения > 0 Тогда
				
				Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.Период = Дата;
				Движение.ЗакупочныйЗаказ = абс_ЗакупочныйЗаказ;
				Движение.ПериодПоставки = НачалоМесяца(Выборка.ПериодПоставки);
				Движение.Сумма = врСуммаДвижения;
				
				врСуммаОтгрузки = врСуммаОтгрузки -  врСуммаДвижения;
				
			КонецЕсли;	
		КонецЦикла;
		Если врСуммаОтгрузки  > 0 Тогда
			СписатьЛимиты(врСуммаОтгрузки,абс_ЗакупочныйЗаказ);
		КонецЕсли;
	Иначе
		
		Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.ЗакупочныйЗаказ = абс_ЗакупочныйЗаказ;
		Движение.ПериодПоставки = НачалоМесяца(Дата);
		Движение.Сумма = СтруктураШапкиДокумента.Сумма - ?(СтруктураШапкиДокумента.СуммаВключаетНДС,СтруктураШапкиДокумента.СуммаНДС,0);
	КонецЕсли;
КонецПроцедуры

// АБС ВСТАВКА 9287 конец


мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа = Константы.абс_ДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа.Получить();
// АБС ВСТАВКА 05448 конец


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Оборудование"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");
