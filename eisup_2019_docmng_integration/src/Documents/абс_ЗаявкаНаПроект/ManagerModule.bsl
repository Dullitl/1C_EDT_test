
Процедура ЗаполнитьСписокДоступныхСтатусов(Список,Ссылка) Экспорт	
	
	//АБС Изменение 12114 Родин Проектный учет
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	Список.Очистить();
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Список.Добавить(Перечисления.абс_СтатусыПроектов.Подготовка);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ссылка.СтатусПроекта) Тогда
		 Список.Добавить(Перечисления.абс_СтатусыПроектов.Подготовка);
		Возврат;
    Иначе
		Список.Добавить(Ссылка.СтатусПроекта);
	КонецЕсли;
	
	Если Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.Подготовка Тогда
		Список.Добавить(Перечисления.абс_СтатусыПроектов.ТехническоеСогласование);
		Список.Добавить(Перечисления.абс_СтатусыПроектов.Отказ);
	ИначеЕсли Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.ТехническоеСогласование Тогда
		
		РольИсполнителей = Справочники.РолиИсполнителей.ДиректорДирекции;	
		
		// {{ТТК Лапин А. Заявка № 000034027 24.09.2015 начало
		// {{ Старый код:
		//ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		//абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(
		//абс_БизнесПроцессы.ПолучитьПодразделениеДирекции(
		//Ссылка.Инициатор.абс_Сотрудник.ПодразделениеОрганизации),, Ссылка.Организация));
		// }} старый код 
		// {{ Новый код:
		ТекПодразделениеОрганизации = Ссылка.Инициатор.абс_Сотрудник.ПодразделениеОрганизации;
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ТекПодразделениеОрганизации,, Ссылка.Организация));
		
		ПользовательИсполнитель2 = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ТекПодразделениеОрганизации.Родитель,, Ссылка.Организация));
		
		//Если ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено ИЛИ НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПроектныйУчетЭкономистПроекта) = Неопределено Тогда
		Если ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено ИЛИ ПользовательИсполнитель2.Найти(мТекущийПользователь) <> Неопределено ИЛИ НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПроектныйУчетЭкономистПроекта) = Неопределено Тогда
		// }}ТТК Лапин А. Заявка № 000034027 24.09.2015 окончание

			Список.Добавить(Перечисления.абс_СтатусыПроектов.СогласованиеДЭИ);
			Список.Добавить(Перечисления.абс_СтатусыПроектов.Отказ);
			Список.Добавить(Перечисления.абс_СтатусыПроектов.Согласован);
		КонецЕсли;
		
	ИначеЕсли Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.СогласованиеДЭИ и НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеДЭИ) = Неопределено Тогда
		
		Если Ссылка.ВидПроекта <> Справочники.абс_ВидыПроектов.ВнеПроектов Тогда
			Список.Добавить(Перечисления.абс_СтатусыПроектов.РазработкаИИТРТЭО);
			Список.Добавить(Перечисления.абс_СтатусыПроектов.Согласован);
			Список.Добавить(Перечисления.абс_СтатусыПроектов.Отказ);
		Иначе	
			Список.Добавить(Перечисления.абс_СтатусыПроектов.Согласован);
			Список.Добавить(Перечисления.абс_СтатусыПроектов.Отказ);
		КонецЕсли;
		
	ИначеЕсли Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.РазработкаИИТРТЭО  и НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РазработкаИТРТЭО) = Неопределено Тогда
		Список.Добавить(Перечисления.абс_СтатусыПроектов.Согласован);
		Список.Добавить(Перечисления.абс_СтатусыПроектов.Отказ);
	ИначеЕсли Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.Отказ
		ИЛИ Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.ОтказСогласования Тогда	
			Список.Добавить(Перечисления.абс_СтатусыПроектов.Подготовка);
	КонецЕсли;	
	
	
	
	//Если Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.СогласованиеДТР Тогда
	//	
	//	Список.Добавить(Перечисления.абс_СтатусыПроектов.СогласованиеДЭИ);
	//	Список.Добавить(Перечисления.абс_СтатусыПроектов.Отказ);
	//	
	//ИначеЕсли Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.СогласованиеДЭИ Тогда
	//	
	//	Список.Добавить(Перечисления.абс_СтатусыПроектов.РазработкаТЭО);
	//	Список.Добавить(Перечисления.абс_СтатусыПроектов.Отказ);
	//	
	//ИначеЕсли Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.Подготовка Тогда	
	//	
	//	Список.Добавить(Перечисления.абс_СтатусыПроектов.СогласованиеДТР);
	//	
	//ИначеЕсли Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.Отказ
	//	ИЛИ Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.ОтказСогласования Тогда	
	//	
	//	Список.Добавить(Перечисления.абс_СтатусыПроектов.Подготовка);
	//	
	//ИначеЕсли Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.РазработкаТЭО Тогда
	//	
	//	Если ЗначениеЗаполнено(Ссылка.ТЭО) И Не Ссылка.ТЭО.Статус = Перечисления.абс_СтатусСогласованияТЭО.Согласован Тогда 
	//		Список.Добавить(Перечисления.абс_СтатусыПроектов.СогласованиеТЭО);
	//	ИначеЕсли ЗначениеЗаполнено(Ссылка.ТЭО) И Ссылка.ТЭО.Статус = Перечисления.абс_СтатусСогласованияТЭО.Согласован Тогда 
	//		Список.Добавить(Перечисления.абс_СтатусыПроектов.Согласован);
	//	КонецЕсли;
	//	Список.Добавить(Перечисления.абс_СтатусыПроектов.Отказ);
	//	
	//ИначеЕсли Ссылка.СтатусПроекта = Перечисления.абс_СтатусыПроектов.СогласованиеТЭО Тогда
	//	
	//	Если ЗначениеЗаполнено(Ссылка.ТЭО) И Ссылка.ТЭО.Статус = Перечисления.абс_СтатусСогласованияТЭО.Согласован Тогда 
	//		Список.Добавить(Перечисления.абс_СтатусыПроектов.Согласован);
	//	КонецЕсли;
	//	Список.Добавить(Перечисления.абс_СтатусыПроектов.Отказ);
	//	
	//КонецЕсли;
	
	Возврат;
	
	
КонецПроцедуры

Процедура СформироватьНоменклатурныеГруппыИПроекты(Ссылка) Экспорт
	НачатьТранзакцию();
	ДокОбъект = Ссылка.ПолучитьОбъект();	
	
	ЗаписыватьОбъект = Ложь;
	
	Если Не ЗначениеЗаполнено(Ссылка.Проект) Тогда
		
		Проект = Справочники.Проекты.СоздатьЭлемент();
		
	Иначе
		
		Проект = Ссылка.Проект.ПолучитьОбъект();
		
	КонецЕсли;
	
	
		
	Проект.Родитель = Ссылка.ГруппаПроектов;
	Проект.Наименование = Ссылка.НаименованиеПроекта;
	Проект.КодПроектаКомпании = Ссылка.КодТитула;
	Проект.Описание = Ссылка.ОписаниеПроекта;
	Проект.ДатаНачала = Ссылка.ДатаНачалаПроекта;
	Проект.ДатаОкончания = Ссылка.ДатаОкончанияПроекта;
	Проект.абс_Статус = Перечисления.абс_СтатусыПроектов.Действует;
	Проект.абс_ТЭО = Ссылка.ТЭО;
	Проект.абс_ВидПроекта = Ссылка.ВидПроекта;
	Проект.абс_Организация = Ссылка.Организация;
	Проект.абс_РуководительПроекта = Ссылка.РуководительПроекта;
	Проект.абс_Портфель = Ссылка.ПортфельПроекта;
	Проект.абс_ДоходныйПроект = Ссылка.Доходный;
	
	//АБС ВСТАВКА 100114 Родин Проектный учет
	Проект.абс_НеТребуетсяСогласованиеРПвЗЗ = Ссылка.НеТребуетсяСогласованиеРПвЗЗ;
	//АБС ВСТАВКА 100114 Родин Проектный учет
	
	Проект.Записать();
	
	СкопироватьФайлыИзЗаявки(Ссылка, Проект.Ссылка);
	
	ДокОбъект.Проект = Проект.Ссылка;
	ЗаписыватьОбъект = Истина;
	
	ДокументРегистрацииПлана = Документы.абс_ПлановыйГрафикОплат.СоздатьДокумент();
	ДокументРегистрацииПлана.Дата = Ссылка.Дата;
	ДокументРегистрацииПлана.Год = НачалоГода(Ссылка.Дата);
	ДокументРегистрацииПлана.ОперативныеДанные = Ложь;
	ДокументРегистрацииПлана.УсловиеОплаты = Перечисления.абс_ВидыУсловийОплатПоДоговорам.Поступление;
	ДокументРегистрацииПлана.Проект = Проект.Ссылка;
	
	
	Для Каждого СтрокаТЧ Из Ссылка.РасходыПроектов Цикл 
		НоваяСтрока = ДокументРегистрацииПлана.Оплаты.Добавить();
		НоваяСтрока.ПериодРегистрации = СтрокаТЧ.Период;
		НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
	КонецЦикла;
	
	Попытка
		ДокументРегистрацииПлана.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
	ДокументРегистрацииПлана = Документы.абс_ПлановыйГрафикОплат.СоздатьДокумент();
	ДокументРегистрацииПлана.Дата = Ссылка.Дата;
	ДокументРегистрацииПлана.Год = НачалоГода(Ссылка.Дата);
	ДокументРегистрацииПлана.ОперативныеДанные = Ложь;
	ДокументРегистрацииПлана.УсловиеОплаты = Перечисления.абс_ВидыУсловийОплатПоДоговорам.Реализация;
	ДокументРегистрацииПлана.Проект = Проект.Ссылка;
	
	Для Каждого СтрокаТЧ Из Ссылка.ДоходыПроектов Цикл 				
		НоваяСтрока = ДокументРегистрацииПлана.Оплаты.Добавить();
		НоваяСтрока.ПериодРегистрации = СтрокаТЧ.Период;
		НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
	КонецЦикла;
	
	Попытка
		ДокументРегистрацииПлана.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание);
	КонецПопытки;	
	
	Если ЗаписыватьОбъект Тогда
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

Процедура СкопироватьФайлыИзЗаявки(ЗаявкаНаПроект, Проект)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХранилищеДополнительнойИнформации.ИмяФайла КАК СТРОКА(50)) КАК ИмяФайла
	|ПОМЕСТИТЬ втФайлыПроекта
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка КАК Файл,
	|	ВЫРАЗИТЬ(ХранилищеДополнительнойИнформации.ИмяФайла КАК СТРОКА(50)) КАК ИмяФайла
	|ПОМЕСТИТЬ втФайлыЗаявки
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &ЗаявкаНаПроект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФайлыЗаявки.Файл
	|ИЗ
	|	втФайлыЗаявки КАК втФайлыЗаявки
	|ГДЕ
	|	НЕ втФайлыЗаявки.ИмяФайла В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					втФайлыПроекта.ИмяФайла
	|				ИЗ
	|					втФайлыПроекта КАК втФайлыПроекта)";
	Запрос.УстановитьПараметр("ЗаявкаНаПроект", ЗаявкаНаПроект);
	Запрос.УстановитьПараметр("Проект", Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НовыйЭлемент = Выборка.Файл.Скопировать();
		НовыйЭлемент.Объект = Проект;
		Попытка
			НовыйЭлемент.Записать();
		Исключение
			ОбщегоНазначения.Сообщение(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры