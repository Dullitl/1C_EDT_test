Процедура ПриЗаписи(Отказ)
	
	//Вставка 120114 Родин
	НеИспользоватьБП = глЗначениеПеременной("абс_ЗаявкаНаПроектБезБП");
	//Вставка 120114 Родин
	
	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусСогласованияПроекта(Ссылка);
	
	Если СтатусПроекта = СтатусПоРегистру Тогда
		Возврат;
	КонецЕсли;
	
	//Вставка 120114 Родин
	Если Не НеИспользоватьБП Тогда
		БПСогласование = абс_БизнесПроцессы.НайтиБизнесПроцессПоЗаявкеНаПроект(Ссылка, "абс_СогласованиеПроекта");
		
		Если СтатусПроекта = Перечисления.абс_СтатусыПроектов.Подготовка Тогда
			Если НЕ ЗначениеЗаполнено(БПСогласование) Тогда
				абс_БизнесПроцессы.ЗапуститьБПСогласованияЗаявкаНаПроект(Ссылка);
				ЗаписатьНовыйСтатус(СтатусПроекта , ПричинаИзмененияСтатуса);
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		ЗадачаСогласование = ПолучитьЗадачуПоСогласованию(СтатусПоРегистру);
		
		Если ЗадачаСогласование = Неопределено Тогда
			Сообщить("Не найдена задача для согласования");
			Отказ = Истина; //АБС ВСТАВКА Гетц 39547 21.03.2014
			Возврат;
		КонецЕсли;
		
		
		Если НЕ ЗадачаСогласование.Выполнена Тогда
			//Если ЗадачаСогласование.ПроверитьВыполнение() Тогда 
			ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();			
			ЗадачаОбъект.ВыполнитьЗадачу();
			//Иначе 
			//	ОбщегоНазначения.Сообщение("Не удалось записать документ в данном статусе");
			//	Отказ = Истина;
			//	Возврат;
			//КонецЕсли;
			
		КонецЕсли;
		
		абс_БизнесПроцессы.ЗакрытьОставшиесяЗадачиПоПроектам(БПСогласование);
		
		Если СтатусПроекта = Перечисления.абс_СтатусыПроектов.Согласован Тогда
			БП = БПСогласование.ПолучитьОбъект();
			БП.Завершен = Истина;
			БП.Записать();
		КонецЕсли;	
	КонецЕсли;
	//Вставка 120114 Родин
	
	ЗаписатьНовыйСтатус(СтатусПроекта , ПричинаИзмененияСтатуса);
	
КонецПроцедуры

Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовЗаявкиНаПроект.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ЗаявкаНаПроект.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера(); //ТекущаяДата();  АБС Коломиец 17233

	Запись.ЗаявкаНаПроект			= Ссылка;
	Запись.Пользователь 			= ТекПользователь;	
	Запись.СтатусЗаявкиНаПроект	    = НовыйСтатус;
	
	Запись.Комментарий 				= Комментарий;
	
	ОтветственныйСотрудник = абс_БизнесПроцессы.ПолучитьСотрудникаПользователя(ТекПользователь);
	
	Если НЕ ОтветственныйСотрудник = Неопределено Тогда
		Запись.ДолжностьОтветственного	= ОтветственныйСотрудник.Должность;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьЗадачуПоСогласованию(предСтатус) Экспорт
	
	БПСогласование = абс_БизнесПроцессы.НайтиБизнесПроцессПоЗаявкеНаПроект(Ссылка, "абс_СогласованиеПроекта");
	Если БПСогласование = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпТочек = Новый Массив;
	ТекСтатус = предСтатус;
	
	Если ТекСтатус = Перечисления.абс_СтатусыПроектов.Отказ ИЛИ
		ТекСтатус = Перечисления.абс_СтатусыПроектов.ОтказСогласования Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.ОтказСогласования);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПроектов.Подготовка Тогда	
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.ПодготовкаДокумента);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПроектов.СогласованиеДТР Тогда

	    СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.СогласованиеДТР);
	
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПроектов.СогласованиеДЭИ Тогда

	    СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.СогласованиеДЭИ);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПроектов.РазработкаТЭО Тогда

	    СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.РазработкаТЭО);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПроектов.СогласованиеТЭО Тогда 

		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.СогласованиеТЭО);
//Вставка Родин проектный учет
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПроектов.ТехническоеСогласование Тогда 
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.ТехническоеCогласование);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПроектов.РазработкаИИТРТЭО Тогда 
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.РазработкаИИТРТЭО);
	КонецЕсли;	
//Вставка Родин проектный учет
	Возврат абс_БизнесПроцессы.НайтиЗадачуЗаявкаНаПроект(БПСогласование, СпТочек ,, Истина);
	
КонецФункции	

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ТекСтатус = Ссылка.СтатусПроекта;	
	Если ТекСтатус = Перечисления.абс_СтатусыПроектов.Подготовка ИЛИ Не ЗначениеЗаполнено(ТекСтатус) Тогда
		
		//СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.СогласованиеДТР);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПроектов.СогласованиеДТР Тогда

	    //СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеПроекта.ТочкиМаршрута.СогласованиеДЭИ);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПроектов.СогласованиеДЭИ Тогда
		
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПроектов.РазработкаТЭО Тогда

	    ПроверяемыеРеквизиты.Добавить("Проекты.ТЭО");
		
	КонецЕсли;
	
	//АБС ВСТАВКА 45953  26.08.2014 12:48:36  Стрельцов
	Если ТекСтатус = Перечисления.абс_СтатусыПроектов.Подготовка 
		И ТекСтатус <> СтатусПроекта И СтатусПроекта <> Перечисления.абс_СтатусыПроектов.Отказ
		И ВидПроекта = Справочники.абс_ВидыПроектов.Строительный Тогда
		
		 ПроверяемыеРеквизиты.Добавить("КодТитула");
	КонецЕсли;
	//\\АБС ВСТАВКА 45953 КОНЕЦ
	
КонецПроцедуры	

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтатусПроекта = Перечисления.абс_СтатусыПроектов.Подготовка;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Не ЗначениеЗаполнено(Номер) И ЗначениеЗаполнено(Организация) Тогда
		УстановитьНовыйНомер(Организация.Префикс);
	КонецЕсли;	
	
	Если ВидОперации <> Перечисления.абс_ВидыОперацийЗаявкаНаПроект.АктуализацияДанныхПроекта Тогда
		ОборотыБюджетов.Очистить();
		ПлатежиПоПроектам.Очистить();
	КонецЕсли;
	
	//АБС ВСТАВКА 47329  29.09.2014 13:41:47  Шамов
	Если ВидОперации = Перечисления.абс_ВидыОперацийЗаявкаНаПроект.СозданиеПроекта 
		И ЗначениеЗаполнено(КодТитула) Тогда
		ПроверитьКодТитула(Отказ);
	КонецЕсли;
	//АБС ВСТАВКА 47329 КОНЕЦ
	
КонецПроцедуры

//абс Урал 11.12.2013 добавлено проведение по регистрам абс_ДДСПоПроектам, ОборотыБюджетов

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	//------------Движения по регистра ОборотыБюджетов, абс_ДДСПоПроектам
	
	Движения.абс_ДДСПоПроектам.Очистить();
	Движения.ОборотыБюджетов.Очистить();
	
	Движения.ОборотыБюджетов.БлокироватьДляИзменения   = Истина;
	Движения.абс_ДДСПоПроектам.БлокироватьДляИзменения = Истина;
	
	Движения.ОборотыБюджетов.Записать();
	Движения.абс_ДДСПоПроектам.Записать();
	
	Движения.абс_ДДСПоПроектам.Записывать = Истина;
	Движения.ОборотыБюджетов.Записывать = Истина;
	
	
	Если ВидОперации = Перечисления.абс_ВидыОперацийЗаявкаНаПроект.АктуализацияДанныхПроекта
		И (ОборотыБюджетов.Количество() > 0 Или ПлатежиПоПроектам.Количество() > 0) Тогда
					
		// Проверим правильность заполнения документа
		ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	
		СоответствиеТЧ_Регистру = НОвый Соответствие;
		БлокировкаДанных = Новый БлокировкаДанных;
		
		Если ОборотыБюджетов.Количество() Тогда
			СоответствиеТЧ_Регистру.Вставить("ОборотыБюджетов", "ОборотыБюджетов");
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрНакопления.ОборотыБюджетов");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировкиДанных.УстановитьЗначение("Проект", Проект);
		КонецЕсли;
		Если ПлатежиПоПроектам.Количество() Тогда
			СоответствиеТЧ_Регистру.Вставить("абс_ДДСПоПроектам", "ПлатежиПоПроектам");
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрНакопления.абс_ДДСПоПроектам");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировкиДанных.УстановитьЗначение("Проект", Проект);
			Доходные  = (ПлатежиПоПроектам.Найти(Перечисления.ВидыДвиженийПриходРасход.Приход, "ПриходРасход") <> Неопределено);
			Расходные = (ПлатежиПоПроектам.Найти(Перечисления.ВидыДвиженийПриходРасход.Расход, "ПриходРасход") <> Неопределено);
			Если Доходные И НЕ Расходные Тогда
				ЭлементБлокировкиДанных.УстановитьЗначение("ПриходРасход", Перечисления.ВидыДвиженийПриходРасход.Приход); 	
			ИначеЕсли Расходные И НЕ Доходные Тогда
				ЭлементБлокировкиДанных.УстановитьЗначение("ПриходРасход", Перечисления.ВидыДвиженийПриходРасход.Расход); 
			КонецЕсли;
		КонецЕсли;
		
		БлокировкаДанных.Заблокировать();
		
		СторнироватьДвижения();
		
		Для каждого ЭлементСоответствия Из СоответствиеТЧ_Регистру Цикл
		
			ТаблицаТЧ = ЭтотОбъект[ЭлементСоответствия.Значение].Выгрузить();
			ТаблицаТЧ.Колонки.Удалить("НомерСтроки");
		
			ПроверитьЗаполнениеТабЧасти(РежимПроведения, ЭлементСоответствия.Значение, ТаблицаТЧ, СтруктураШапкиДокумента, Отказ, Заголовок);
		
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		
			ЕСли ВидЗаполнения = "Сводно" Тогда
			
				ПодготовитьДвижения(ЭлементСоответствия, ТаблицаТЧ);
			
			ИначеЕСли ВидЗаполнения = "ПоДокументам" Тогда
			
				ПодготовитьДвиженияПоДокументам(ЭлементСоответствия, ТаблицаТЧ);
			
			КонецЕСли;
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураРеквизитовШапки = Новый Структура;
	СтруктураРеквизитовШапки.Вставить("Организация");
	СтруктураРеквизитовШапки.Вставить("ВидЗаполнения");
	СтруктураРеквизитовШапки.Вставить("Проект");
	СтруктураРеквизитовШапки.Вставить("ПериодДанных");
					
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураРеквизитовШапки, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеТабЧасти(РежимПроведения, ИмяТЧ, ТабТЧ, СтруктураШапкиДокумента, Отказ, Заголовок);

	ОбязательныеРеквизиты = "ПриходРасход";

	// Обязательные реквизиты...
	Если ИмяТЧ = "ОборотыБюджетов" Тогда
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты 
							  + ",ЦФО,
								|абс_ЦФУ,
								|СтатьяОборотов,
								|абс_ТипКонтрагента,
								//|СуммаУпр,
								//|СуммаСценария,
								//|ВалютнаяСумма,
								|";
	Иначе
		
		 ОбязательныеРеквизиты = ОбязательныеРеквизиты; 
						 //+ ", ФактОперФакт,
						 //   	|ОплатаАванс,
						 //   	|Документ,
						 //   	|Сумма,
						 //   	|СуммаРегл,
						 //  |";
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидЗаполнения = "ПоДокументам" Тогда
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты 
							  + ", ДокументРегистратор
								|";
							  
	КонецЕсли;
																														
	// Проверка заполнения обязательных реквизитов.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТЧ, Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);
	
	Если Отказ Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть проведен!");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	абс_ЗаявкаНаПроектОборотыБюджетов.НомерСтроки,
	               |	абс_ЗаявкаНаПроектОборотыБюджетов.ПриходРасход
	               |ИЗ
	               |	Документ.абс_ЗаявкаНаПроект.ОборотыБюджетов КАК абс_ЗаявкаНаПроектОборотыБюджетов
	               |ГДЕ
	               |	абс_ЗаявкаНаПроектОборотыБюджетов.Ссылка = &Ссылка
	               |	И (абс_ЗаявкаНаПроектОборотыБюджетов.СтатьяОборотов.абс_ДоходнаяСтатья
	               |				И абс_ЗаявкаНаПроектОборотыБюджетов.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
	               |			ИЛИ НЕ абс_ЗаявкаНаПроектОборотыБюджетов.СтатьяОборотов.абс_ДоходнаяСтатья
	               |				И абс_ЗаявкаНаПроектОборотыБюджетов.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход))";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Сообщить("В ТЧ ОборотыБюджетов["+Выборка.НомерСтроки+"] (" + Выборка.ПриходРасход + ") указана неверная статья оборотов.", СтатусСообщения.Важное);
		Отказ = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

//-------------------------------------------------
//
Процедура ПодготовитьДвижения(ДанныеСоответствия, ТаблицаДанных, ДокРегистратор = Неопределено)
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИзмерений = "";
	СтрокаРесурсов  = "";
	Для каждого Измерение Из Метаданные.РегистрыНакопления[ДанныеСоответствия.Ключ].Измерения Цикл
		Если ТаблицаДанных.Колонки.Найти(Измерение.Имя) <> Неопределено Тогда
			СтрокаИзмерений = ?(ПустаяСтрока(СтрокаИзмерений), "", СтрокаИзмерений + ",") + Измерение.Имя;
		КонецЕСли;
	КонецЦикла;
	Для каждого Ресурс Из Метаданные.РегистрыНакопления[ДанныеСоответствия.Ключ].Ресурсы Цикл
		Если ТаблицаДанных.Колонки.Найти(Ресурс.Имя) <> Неопределено Тогда
			СтрокаРесурсов = ?(ПустаяСтрока(СтрокаРесурсов), "", СтрокаРесурсов + ",") + Ресурс.Имя;
		КонецЕСли;
	КонецЦикла;
	
	ТаблицаДанных.Свернуть(СтрокаИзмерений, СтрокаРесурсов);
	
	ДвиженияДляДокумента(ДанныеСоответствия.Ключ, ТаблицаДанных, ДокРегистратор);
	
КонецПроцедуры

//----------------------------------------------------
//
Процедура ПодготовитьДвиженияПоДокументам(ДанныеСоответствия, ТаблицаДанных)
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕСли;
	
	ТекстЗапросаПолей = "";
	Для каждого КолонкаТЧ Из ТаблицаДанных.Колонки Цикл
		ТекстЗапросаПолей = ?(ПустаяСтрока(ТекстЗапросаПолей), "", ТекстЗапросаПолей + ", "+Символы.ПС) + "ИсточникДанных."+КолонкаТЧ.Имя;
	КонецЦикла;	
	ТекстЗапросаИсточникДанных = Символы.ПС + Символы.ПС + "ИЗ" + Символы.ПС + " Документ." + Метаданные().Имя + "." + ДанныеСоответствия.Значение + " КАК ИсточникДанных";
	ТекстЗапросаУсловие = Символы.ПС + Символы.ПС + "ГДЕ" + Символы.ПС + " ИсточникДанных.Ссылка = &ТекущийДокумент"; 
	ТекстЗапросаИтоги = Символы.ПС + Символы.ПС + "ИТОГИ ПО ДокументРегистратор";
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ "+ТекстЗапросаПолей+ТекстЗапросаИсточникДанных+ТекстЗапросаУсловие+ТекстЗапросаИтоги;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	ДеревоДанныхДокументов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	Для каждого СтрокаДереваДанныхДокументов Из ДеревоДанныхДокументов.Строки Цикл
		
		ТаблицаДанных.Очистить();
		
		Для Каждого СтрокаДетальныхДанныхДокумента Из СтрокаДереваДанныхДокументов.Строки Цикл
			
			СтрокаТаблицы = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДетальныхДанныхДокумента);
					
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДереваДанныхДокументов.ДокументРегистратор) ИЛИ СтрокаДереваДанныхДокументов.ДокументРегистратор = Неопределено Тогда					
			ПодготовитьДвижения(ДанныеСоответствия, ТаблицаДанных);
		Иначе
			ПодготовитьДвижения(ДанныеСоответствия, ТаблицаДанных, СтрокаДереваДанныхДокументов.ДокументРегистратор);
		КонецЕСли;
		
	КонецЦикла;
	
КонецПроцедуры

//----------------------------------------------------
//
Процедура ДвиженияДляДокумента(ИмяРегистра, ТаблицаИсточникДанных, ДокументРегистратор = Неопределено)
	
	ЕСли ДокументРегистратор = Неопределено Тогда
		ДвиженияДокумента = Движения[ИмяРегистра];
	Иначе
		ДвиженияДокумента = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		ДвиженияДокумента.Отбор.Регистратор.Установить(ДокументРегистратор);
		ДвиженияДокумента.Прочитать();
	КонецЕСли;
	
	Для каждого СтрокаТаблицы Из ТаблицаИсточникДанных Цикл
		Движение = ДвиженияДокумента.Добавить();
		Если Не ДокументРегистратор = Неопределено Тогда
			Движение.Регистратор = ДокументРегистратор;
			Движение.Период = ДокументРегистратор.Дата;	
		Иначе
			Движение.Период = Дата;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Движение, Ссылка);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Если ИмяРегистра = "ОборотыБюджетов" Тогда
			Движение.абс_ТЭО = ТЭО;
			Движение.Сценарий = глЗначениеПеременной("абс_СценарийДляФакта");
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ДокументРегистратор = Неопределено Тогда
		ДвиженияДокумента.БлокироватьДляИзменения = Истина;
		ДвиженияДокумента.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура СторнироватьДвижения()
	
	//ОборотыБюджетов
	Приходные = (ОборотыБюджетов.Найти(Перечисления.ВидыДвиженийПриходРасход.Приход, "ПриходРасход") <> Неопределено);
	Расходные = (ОборотыБюджетов.Найти(Перечисления.ВидыДвиженийПриходРасход.Расход, "ПриходРасход") <> Неопределено);

	Если Приходные И Расходные Тогда
		Доходная = Неопределено;
	ИначеЕсли Приходные Тогда
		Доходная = Истина;
	Иначе
		Доходная = Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОборотыБюджетовОбороты.Сценарий,
	               |	ОборотыБюджетовОбороты.Проект,
	               |	ОборотыБюджетовОбороты.ЦФО,
	               |	ОборотыБюджетовОбороты.СтатьяОборотов,
	               |	ОборотыБюджетовОбороты.Контрагент,
	               |	ОборотыБюджетовОбороты.Номенклатура,
	               |	ОборотыБюджетовОбороты.Валюта,
	               |	ОборотыБюджетовОбороты.абс_ТипКонтрагента,
	               |	ОборотыБюджетовОбороты.абс_ТипСети,
	               |	ОборотыБюджетовОбороты.абс_КВ,
	               |	ОборотыБюджетовОбороты.абс_ТЭО,
	               |	ОборотыБюджетовОбороты.абс_ЦФУ,
	               |	ОборотыБюджетовОбороты.абс_ТипРасхода,
	               |	ОборотыБюджетовОбороты.Организация,
	               |	ОборотыБюджетовОбороты.ДоговорКонтрагента,
	               |	ОборотыБюджетовОбороты.абс_СчетБУ,
				   |	ОборотыБюджетовОбороты.Период,
	               |	-ОборотыБюджетовОбороты.КоличествоОборот КАК Количество,
	               |	-ОборотыБюджетовОбороты.СуммаУпрОборот КАК СуммаУпр,
	               |	-ОборотыБюджетовОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСумма,
	               |	-ОборотыБюджетовОбороты.СуммаСценарияОборот КАК СуммаСценария
	               |ИЗ
	               |	РегистрНакопления.ОборотыБюджетов.Обороты(
	               |			,
	               |			&КонецПериода,
	               |			Регистратор,
	               |			Организация = &Организация
	               |				И Проект = &Проект И Сценарий = &Сценарий " + ?(Не Доходная = Неопределено , "И СтатьяОборотов.абс_ДоходнаяСтатья = &Доходная", "") + ") КАК ОборотыБюджетовОбороты";

	Запрос.Параметры.Вставить("КонецПериода", ПериодДанных);
	Запрос.Параметры.Вставить("Доходная", Доходная);
	Запрос.Параметры.Вставить("Проект", Проект);
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("Сценарий", глЗначениеПеременной("абс_СценарийДляФакта"));
	Запрос.Параметры.Вставить("ТЭО", ТЭО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ОборотыБюджетов.Добавить();
		Движение.Период = Дата;
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		
	КонецЦикла;
	
	//абс_ДДСПоПроектам
	Приходные = (ПлатежиПоПроектам.Найти(Перечисления.ВидыДвиженийПриходРасход.Приход, "ПриходРасход") <> Неопределено);
	Расходные = (ПлатежиПоПроектам.Найти(Перечисления.ВидыДвиженийПриходРасход.Расход, "ПриходРасход") <> Неопределено);

	Если Приходные И Расходные Тогда
		ПриходРасход = Неопределено;
	ИначеЕсли Приходные Тогда
		ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Приход;
	Иначе
		ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Расход;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	абс_ДДСПоПроектамОбороты.Контрагент,
	               |	абс_ДДСПоПроектамОбороты.ДоговорКонтрагента,
	               |	абс_ДДСПоПроектамОбороты.Проект,
	               |	абс_ДДСПоПроектамОбороты.ФактОперФакт,
	               |	абс_ДДСПоПроектамОбороты.ПриходРасход,
	               |	абс_ДДСПоПроектамОбороты.ОплатаАванс,
	               |	абс_ДДСПоПроектамОбороты.Документ,
				   |	абс_ДДСПоПроектамОбороты.Период,
	               |	-абс_ДДСПоПроектамОбороты.СуммаОборот КАК Сумма,
	               |	-абс_ДДСПоПроектамОбороты.СуммаРеглОборот КАК СуммаРегл
	               |ИЗ
	               |	РегистрНакопления.абс_ДДСПоПроектам.Обороты(
	               |			,
	               |			&КонецПериода,
	               |			Регистратор,
	               |			(&ПриходРасход = НЕОПРЕДЕЛЕНО
	               |				ИЛИ ПриходРасход = &ПриходРасход)
	               |				И Проект = &Проект) КАК абс_ДДСПоПроектамОбороты";

	Запрос.Параметры.Вставить("КонецПериода", ПериодДанных);
	Запрос.Параметры.Вставить("ПриходРасход", ПриходРасход);
	Запрос.Параметры.Вставить("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.абс_ДДСПоПроектам.Добавить();
		Движение.Период = Дата;
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		
	КонецЦикла;

КонецПроцедуры

//\\абс Урал 11.12.2013

//АБС ВСТАВКА 47329  29.09.2014 13:41:47  Шамов
Процедура ПроверитьКодТитула(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Проекты.Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Ссылка <> &Ссылка
		|	И Проекты.КодПроектаКомпании = &КодПроектаКомпании";

	Запрос.УстановитьПараметр("КодПроектаКомпании", КодТитула);
	Запрос.УстановитьПараметр("Ссылка", Проект);

	Результат = Запрос.Выполнить();
   	Если НЕ Результат.Пустой() Тогда
		Отказ = Истина;
		Сообщить("В базе уже существует проект с кодом проекта компании """ + КодТитула + """");
	КонецЕсли;
	
КонецПроцедуры
//АБС ВСТАВКА 47329 КОНЕЦ
