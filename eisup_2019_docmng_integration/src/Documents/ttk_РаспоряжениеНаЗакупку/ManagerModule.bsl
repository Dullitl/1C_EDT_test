
Процедура ЗаполнитьСписокДоступныхСтатусов(Список, Ссылка) Экспорт	
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	Список.Очистить();
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Список.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ссылка.Статус) Тогда
		Список.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
		Возврат;
    Иначе
		Список.Добавить(Ссылка.Статус);
	КонецЕсли;
	
	Если Ссылка.Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
		Список.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Согласован);
		Список.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отмена);
	ИначеЕсли Ссылка.Статус = Перечисления.абс_СтатусыПервичныхДокументов.Согласован Тогда
		
		РольИсполнителей = Справочники.РолиИсполнителей.ИнициаторПервичногоДокумента;
		
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
			абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(
				абс_БизнесПроцессы.ПолучитьПодразделениеДирекции(
					Ссылка.Ответственный.абс_Сотрудник.ПодразделениеОрганизации),, Ссылка.Организация));
		
		Если ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено ИЛИ НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ИнициаторПервичногоДокумента) = Неопределено Тогда
		
			//Список.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ис Согласован);			
			Список.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
			
		КонецЕсли;
	ИначеЕсли Ссылка.Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отмена Тогда	
		Список.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
	КонецЕсли;	
	
	Возврат;
	
КонецПроцедуры

Функция ПроверитьВозможностьЗаписиДокумента(Ссылка, МетодКонтроля, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Отказ = Ложь;
	ПараметрыВозврата = Новый Структура;
	
	Если МетодКонтроля = 0 Тогда
		Отказ = Истина;
		ПараметрыВозврата.Вставить("Отказ", Отказ);
		ПараметрыВозврата.Вставить("ТекстСообщения", "Не указан метод контроля.");
		ПараметрыВозврата.Вставить("Поле", "МетодКонтроля");
	КонецЕсли;
	
	//Проверим пересечение периодов использования лимитов
	Если Не Отказ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ttk_ЛимитыПоДоговорам.Распоряжение,
			|	ttk_ЛимитыПоДоговорам.НачалоПериода,
			|	ВЫБОР
			|		КОГДА ttk_ЛимитыПоДоговорам.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &Дт
			|		ИНАЧЕ ttk_ЛимитыПоДоговорам.ОкончаниеПериода
			|	КОНЕЦ КАК ОкончаниеПериода
			|ИЗ
			|	РегистрСведений.ttk_ЛимитыПоДоговорам КАК ttk_ЛимитыПоДоговорам
			|ГДЕ
			|	ttk_ЛимитыПоДоговорам.Организация = &Организация
			|	И ttk_ЛимитыПоДоговорам.Контрагент = &Контрагент
			|	И ttk_ЛимитыПоДоговорам.ДоговорКонтрагента = &Договор
			|	И ttk_ЛимитыПоДоговорам.Распоряжение <> &Распоряжение
			|
			|СГРУППИРОВАТЬ ПО
			|	ttk_ЛимитыПоДоговорам.Распоряжение,
			|	ttk_ЛимитыПоДоговорам.НачалоПериода,
			|	ВЫБОР
			|		КОГДА ttk_ЛимитыПоДоговорам.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &Дт
			|		ИНАЧЕ ttk_ЛимитыПоДоговорам.ОкончаниеПериода
			|	КОНЕЦ
			|
			|ИМЕЮЩИЕ
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ttk_ЛимитыПоДоговорам.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА &Дт
			|			ИНАЧЕ ttk_ЛимитыПоДоговорам.ОкончаниеПериода
			|		КОНЕЦ) > &НачалоПериода";
		Запрос.УстановитьПараметр("Организация", Ссылка.Организация);
		Запрос.УстановитьПараметр("Контрагент", Ссылка.Контрагент);
		Запрос.УстановитьПараметр("Договор", Ссылка.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Дт", КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ?(ЗначениеЗаполнено(ОкончаниеПериода), ОкончаниеПериода, Дата(1,1,1)));
		Запрос.УстановитьПараметр("Распоряжение", Ссылка);
		
		Выборка = Запрос.Выполнить();
		Если Не Выборка.Пустой() Тогда
			Отказ = Истина;		
			ПараметрыВозврата.Вставить("Отказ", Отказ);
			ПараметрыВозврата.Вставить("ТекстСообщения", "По данному договору уже существует действующее распоряжение на закупку.");
			ПараметрыВозврата.Вставить("Поле", "");
		КонецЕсли;
	КонецЕсли;
		
	Возврат ПараметрыВозврата;
	
КонецФункции

Функция ПроверитьРасширениеФайла(ПолноеИмяФайла) Экспорт
	
	РасширениеФайла = РаботаСФайлами.ПолучитьРасширениеФайла(РаботаСФайлами.ПолучитьИмяФайлаИзПолногоПути(ПолноеИмяФайла));
	
	Если Найти("doc;docx;xls;xlsx;rar;zip", РасширениеФайла) > 0 Тогда		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Указано недопустимое расширение файла.");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСсылкуНаСканКопиюРаспоряженияИзХранилища(СсылкаНаОбъект, ИмяФайла = Неопределено) Экспорт
	
	СсылкаНаФайлРаспоряжения = Справочники.ХранилищеДополнительнойИнформации.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ХранилищеДополнительнойИнформации.Ссылка КАК СсылкаНаФайлРаспоряжения
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.ПометкаУдаления = ЛОЖЬ
		|	И ХранилищеДополнительнойИнформации.Объект = &Объект";
	Если ИмяФайла <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ВЫРАЗИТЬ(ХранилищеДополнительнойИнформации.ИмяФайла КАК СТРОКА(255)) = &ИмяФайла";
		Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить();
	Если Не Выборка.Пустой() Тогда
		Результат = Выборка.Выгрузить();
		Для Каждого Стр Из Результат Цикл
			СсылкаНаФайлРаспоряжения = Стр.СсылкаНаФайлРаспоряжения;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СсылкаНаФайлРаспоряжения;
		
КонецФункции