
// АБС ВСТАВКА Согласование первичных документов

Перем мЗаполнениеНеУспешно Экспорт;
Перем мТекущийПользователь;
Перем ПериодСтатуса;

Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовАктовПриёмки.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.АктПриёмкиВыполненныхРабот.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
	ПериодСтатуса = Запись.Период;

	Запись.АктПриёмкиВыполненныхРабот = Ссылка;
	Запись.Исполнитель 			  	  = ТекПользователь;	
	Запись.СтатусАкта				  = НовыйСтатус;
		
	Запись.Комментарий 				  = Комментарий;
	
	ОтветственныйСотрудник = абс_БизнесПроцессы.ПолучитьСотрудникаПользователя(ТекПользователь);
	
	Если НЕ ОтветственныйСотрудник = Неопределено Тогда
		//Запись.ДолжностьОтветственного	= ОтветственныйСотрудник.Должность;
		Запись.Сотрудник				= ОтветственныйСотрудник;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция НайтиБПСогласование() Экспорт
	
	//Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоПервичномуДокументу(Ссылка, "абс_СогласованиеАктовПриемки");	
	
	ИмяБизнесПроцесса = "абс_СогласованиеАктовПриемки";
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ПервичныйДокумент = &ПервичныйДокумент И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("ПервичныйДокумент", Ссылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;

	
КонецФункции

Функция ПолучитьЗадачуПоПервичномуДокументуСогласование() Экспорт
	
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпТочек = Новый Массив;
	
	Статус = абс_Статус;
	
	Если Статус = Перечисления.абс_СтатусыАктовПриемки.Подготовка Тогда
		
		//СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеУточнениеОФК);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеУточнениеБухгалтером);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеОтказ);
		
	//ИначеЕсли Статус = Перечисления.абс_СтатусыАктовПриемки.СогласованиеОФК Тогда

	//	СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФО);	
		
	//ИначеЕсли Статус = Перечисления.абс_СтатусыАктовПриемки.УточнениеОФК Тогда

	//	СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеСогласованиеОФК);
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыАктовПриемки.УточнениеБухгалтерией Тогда

		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеОбработкаПринятыхДокументов);
				
	ИначеЕсли Статус = Перечисления.абс_СтатусыАктовПриемки.Отказ Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеОбработкаБухгалтерией);
		//СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеСогласованиеОФК);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеОбработкаПринятыхДокументов);
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыАктовПриемки.Завершен Тогда
		
		//СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеОбработкаБухгалтерией);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеОбработкаПринятыхДокументов);
				
	ИначеЕсли Статус = Перечисления.абс_СтатусыАктовПриемки.ОбработкаБухгалтером Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФО);	
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыАктовПриемки.ДокументыПринятыБухгалтером Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеОбработкаБухгалтерией);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеУточнениеБухгалтером);
		
	//ИначеЕсли Статус = Перечисления.абс_СтатусыАктовПриемки.СогласованиеОФК Тогда
	//	
	//	СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеУточнениеОФК);
	//	СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.ДействиеУточнениеБухгалтером);		
		
	КонецЕсли;
			
	Возврат абс_БизнесПроцессы.НайтиЗадачуЗЗ(БП, СпТочек ,, Ложь);

КонецФункции

Функция ПолучитьРежимЗаписиДокумента() Экспорт
	
	РежимЗаписи = Неопределено;
	
	Если 	абс_Статус = Перечисления.абс_СтатусыАктовПриемки.Подготовка
		ИЛИ абс_Статус = Перечисления.абс_СтатусыАктовПриемки.Отмена Тогда 
			
		Если Проведен Тогда
			
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
	Иначе
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
	КонецЕсли;
	
	Возврат РежимЗаписи;
	
КонецФункции
// АБС ВСТАВКА Согласование первичных документов КОНЕЦ


Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	//АБС Шамов 33159
	//Если Ссылка.Пустая() И Сотрудники.Количество()>0 ТОгда
	Если Сотрудники.Количество()>0 ТОгда  //АБС Чалавиев 25.12.2013 000020073
		СтрокаТЧ = Сотрудники[0];
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.абс_ДатаНачалаПериодаДляУчетаСтажа)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.абс_ДатаОкончанияПериодаДляУчетаСтажа) ТОгда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена дата начала или дата окончания работ!", Отказ);
		КонецЕсли;
	КонецЕсли;
	//\\АБС Шамов 33159
        	
	Если ПустаяСтрока(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	СуммаДокумента = Сотрудники.Итог("СуммаЗаРаботу");
	//Заявка 000020081
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Сотрудники);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	//
	
	//абс_БизнесПроцессы.УстановитьСтатусИСУЗКДляАктаПриёмки(ЭтотОбъект);
КонецПроцедуры

// Согласование актов
//Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
//	
//	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовАктовПриёмки.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.АктПриёмкиВыполненныхРабот.Установить(Ссылка);
//	НаборЗаписей.Прочитать();
//	
//	Запись = НаборЗаписей.Добавить();
//	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
//	Запись.АктПриёмкиВыполненныхРабот	= Ссылка;
//	Запись.Исполнитель	 				= глЗначениеПеременной("глТекущийПользователь");	
//	Запись.СтатусАкта					= НовыйСтатус;
//	Запись.Комментарий 					= Комментарий;
//	
//	НаборЗаписей.Записать();
//	
//КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Если обмен данными не делаем проверок
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// АБС ВСТАВКА
	Если абс_Статус = Перечисления.абс_СтатусыАктовПриемки.СогласованиеРуководителемЦФО Тогда
		
		Если Сотрудники.Количество() > 0 Тогда
			
			Если Не ЗначениеЗаполнено(Сотрудники[0].ДоговорПодряда) Тогда
				Сообщить("Не указан договор");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Сотрудники[0].Сотрудник) Тогда
				Сообщить("Не указан сотрудник");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если Сотрудники[0].СуммаЗаРаботу = 0 Тогда
				Сообщить("Не указана сумма акта");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если Сотрудники[0].СуммаЗаРаботу > Сотрудники[0].ДоговорПодряда.СуммаЗаРаботу Тогда
				Сообщить("Сумма акта превышает сумму договора");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка наличия файлов
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.ИмяФайла КАК Наименование,
		|	ХранилищеДополнительнойИнформации.Ссылка
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект = &Объект
		|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Файл)
		|	И ХранилищеДополнительнойИнформации.ПометкаУдаления = ЛОЖЬ");
		
		Запрос.УстановитьПараметр("Объект", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Сообщить("К акту не прикреплен ни один файл. Движение по статусам дальше невозможно.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
	КонецЕсли; 
	// АБС ВСТАВКА КОНЕЦ
	
	// АБС ВСТАВКА Согласование первичных документов
	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусАктаПриёмкиПоРегистру(Ссылка);
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	ДаннаяБазаНеКопия = абс_СерверныеФункции.абс_ДаннаяБазаНеКопия();
	Если не ДаннаяБазаНеКопия Тогда
		ЗаписатьНовыйСтатус(абс_Статус, абс_ПричинаИзмененияСтатуса);	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ		
	
	Если ДаннаяБазаНеКопия и (не абс_Статус = СтатусПоРегистру) Тогда
		ЗаписатьНовыйСтатус(абс_Статус, абс_ПричинаИзмененияСтатуса);
		
		// АБС ВСТАВКА ИНТЕГРАЦИЯ С ИСУЗК
		//Если ЗначениеЗаполнено(СтатусПоРегистру) Тогда
		
		// Создаем акт в ИСУЗК
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Абс_АктПриёмкиВыполненныхРабот.Номер,
		|	Абс_АктПриёмкиВыполненныхРабот.Дата,
		|	Абс_АктПриёмкиВыполненныхРабот.Организация.Код КАК Организация,
		|	Абс_АктПриёмкиВыполненныхРабот.Комментарий,
		|	Абс_АктПриёмкиВыполненныхРабот.ПодразделениеОрганизации.абс_КодИСУЗК КАК ПодразделениеОрганизации,
		|	Абс_АктПриёмкиВыполненныхРабот.МесяцНачисления,
		|	Абс_АктПриёмкиВыполненныхРабот.СуммаДокумента,
		|	Абс_АктПриёмкиВыполненныхРабот.абс_Статус КАК Статус,
		// нач закоммент Нарыжный 14.11.2013 35133
		//|	Абс_АктПриёмкиВыполненныхРаботСотрудники.Сотрудник.абс_КодИСУЗК КАК Сотрудник,
		// кон закоммент Нарыжный 14.11.2013 35133
		// нач ВСТАВКА Нарыжный 14.11.2013 35133
		|	Абс_АктПриёмкиВыполненныхРаботСотрудники.Сотрудник.абс_УникальныйИдентификаторСотрудника КАК Сотрудник,
		// кон ВСТАВКА Нарыжный 14.11.2013 35133
		|	Абс_АктПриёмкиВыполненныхРаботСотрудники.ДоговорПодряда.Номер,
		|	Абс_АктПриёмкиВыполненныхРаботСотрудники.ДоговорПодряда.Дата,
		|	Абс_АктПриёмкиВыполненныхРаботСотрудники.СуммаЗаРаботу,
		|	Абс_АктПриёмкиВыполненныхРаботСотрудники.абс_СодержаниеРабот КАК СодержаниеРабот,
		//АБС Шамов 33159 Вставка Начало				
		|	Абс_АктПриёмкиВыполненныхРаботСотрудники.абс_ДатаНачалаПериодаДляУчетаСтажа КАК ДатаНачалаПериодаДляУчетаСтажа,
		|	Абс_АктПриёмкиВыполненныхРаботСотрудники.абс_ДатаОкончанияПериодаДляУчетаСтажа КАК ДатаОкончанияПериодаДляУчетаСтажа,
		//\\АБС Шамов 33159 Вставка Конец
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК СтатусСтрока,
		|	Абс_АктПриёмкиВыполненныхРабот.Ответственный.Наименование КАК Ответственный,
		|	Абс_АктПриёмкиВыполненныхРабот.абс_ПричинаИзмененияСтатуса КАК ПричинаИзмененияСтатуса,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК СотрудникИзменившийСтатус,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодСтатуса,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ПользовательИзменившийСтатус
		|ИЗ
		|	Документ.Абс_АктПриёмкиВыполненныхРабот КАК Абс_АктПриёмкиВыполненныхРабот
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Абс_АктПриёмкиВыполненныхРабот.Сотрудники КАК Абс_АктПриёмкиВыполненныхРаботСотрудники
		|		ПО (Абс_АктПриёмкиВыполненныхРаботСотрудники.Ссылка = Абс_АктПриёмкиВыполненныхРабот.Ссылка)
		|ГДЕ
		|	Абс_АктПриёмкиВыполненныхРабот.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Результат Цикл
			
			Строка.СтатусСтрока = Строка(Строка.Статус);
			Строка.СотрудникИзменившийСтатус = мТекущийПользователь.абс_Сотрудник.абс_КодИСУЗК;
			Строка.ПериодСтатуса = ПериодСтатуса;
			Строка.ПользовательИзменившийСтатус = мТекущийПользователь.Наименование; 
			
		КонецЦикла;
		
		Результат.Колонки.Добавить("ОтражениеРасходаПоАналитике");
		ОРвА=Новый Структура;
		Для каждого йСтр Из ЭтотОбъект.ОтражениеРасходаПоАналитике Цикл
			йСтрока=Новый Массив;
			Попытка
				йСтрока.Добавить(йСтр.Субконто1.Код);
			Исключение
				йСтрока.Добавить(Строка(йСтр.Субконто1));
			КонецПопытки;
			Попытка
				йСтрока.Добавить(йСтр.Субконто2.Код);
			Исключение
				йСтрока.Добавить(Строка(йСтр.Субконто2));
			КонецПопытки;
			Попытка
				йСтрока.Добавить(йСтр.Субконто3.Код);
			Исключение
				йСтрока.Добавить(Строка(йСтр.Субконто3));
			КонецПопытки;
			йСтрока.Добавить(йСтр.Сумма);
			ОРвА.Вставить("Строка"+йСтр.НомерСтроки,йСтрока);
		КонецЦикла;
		Результат[0].ОтражениеРасходаПоАналитике=ЗначениеВСтрокуВнутр(ОРвА);
		//АБС Шамов 33159 Замена Начало				
		//ТаблицаДляВыгрузки = Результат.Скопировать(, "Номер, Дата, Организация, Комментарий, ПодразделениеОрганизации, МесяцНачисления, 
		//	| СуммаДокумента, Сотрудник, ДоговорПодрядаНомер, ДоговорПодрядаДата, СуммаЗаРаботу, СодержаниеРабот,   
		//	| СтатусСтрока, Ответственный, СотрудникИзменившийСтатус, ПричинаИзмененияСтатуса, ПериодСтатуса, ПользовательИзменившийСтатус");				
		ТаблицаДляВыгрузки = Результат.Скопировать(, "Номер, Дата, Организация, Комментарий, ПодразделениеОрганизации, МесяцНачисления, 
		| СуммаДокумента, Сотрудник, ДоговорПодрядаНомер, ДоговорПодрядаДата, СуммаЗаРаботу, СодержаниеРабот, ДатаНачалаПериодаДляУчетаСтажа, ДатаОкончанияПериодаДляУчетаСтажа,
		| СтатусСтрока, Ответственный, СотрудникИзменившийСтатус, ПричинаИзмененияСтатуса, ПериодСтатуса, ПользовательИзменившийСтатус, ОтражениеРасходаПоАналитике");				
		//\\АБС Шамов 33159 Замена Конец
		
		//Сообщить(ЗначениеВСтрокуВнутр(ТаблицаДляВыгрузки));
		
		СообщениеОбОшибке = "";
		ДокументСозданВИСУЗК = Ложь;
		Попытка
			ДокументСозданВИСУЗК = абс_WebServiceСервер.ИнициализацияDogovor_Act_Integration_Act(Номер, Дата, ЗначениеВСтрокуВнутр(ТаблицаДляВыгрузки), СообщениеОбОшибке);
		Исключение	
			Сообщить(СообщениеОбОшибке);
			Сообщить("Не удалось создать документ в базе ИСУЗК!");
			//СообщениеОбОшибке = "";
			//Отказ = Истина;
			//Возврат;
		КонецПопытки;
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			Сообщить(СообщениеОбОшибке);
			Сообщить("Не удалось создать документ в базе ИСУЗК!");
			//Отказ = Истина;
			//Возврат;
		КонецЕсли;	
		Если Не ДокументСозданВИСУЗК Тогда
			Сообщить("Не удалось создать документ в базе ИСУЗК!");
			//Отказ = Истина;
			//Возврат;
		Иначе
			Сообщить("Документ создан в базе ИСУЗК");
		КонецЕсли;
		
		//КонецЕсли; 			
		// АБС ВСТАВКА КОНЕЦ 
	КонецЕсли;
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	Если Не СогласованиеБезБП Тогда
		ВыполнитьЗадачиПоБП(Отказ);
	КонецЕсли;
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.ИмяФайла КАК Наименование,
	|	ХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Файл)
	|	И ХранилищеДополнительнойИнформации.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	ТЗФайлов = Запрос.Выполнить().Выгрузить();
	
	СписокФайлов = Новый Соответствие;
	Для Каждого ТекФайл Из ТЗФайлов Цикл
		ТекФайл = Новый Структура("Ссылка, Наименование", ТекФайл.Ссылка, ТекФайл.Ссылка.Наименование);
		СписокФайлов.Вставить(ТекФайл.Ссылка, ТекФайл);
	КонецЦикла;
	
	СообщениеОбОшибке = "";
	Попытка
		Результат = абс_WebServiceСервер.ИнициализацияDogovor_PersonData_PutFile(СписокФайлов, Ссылка, СообщениеОбОшибке, "Акт");
	Исключение
		Сообщить(СообщениеОбОшибке);
		СообщениеОбОшибке = "";
		//Отказ = Истина;
		//Возврат;
	КонецПопытки;
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Сообщить(СообщениеОбОшибке);
	КонецЕсли;
	
	//Для Каждого СтрокаТЗ Из ТЗФайлов Цикл
	//	ФайлОбъект = СтрокаТЗ.Ссылка.ПолучитьОбъект();
	//	Попытка
	//		ФайлОбъект.Удалить();
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла; 
	
КонецПроцедуры

Процедура ВыполнитьЗадачиПоБП(Отказ) Экспорт
	
	// Запустим БП если он еще не запущен
	Попытка
		Если абс_Статус = Перечисления.абс_СтатусыАктовПриемки.СогласованиеРуководителемЦФО Тогда
			БПСогласование = НайтиБПСогласование();
			
			Если Не ЗначениеЗаполнено(БПСогласование) Тогда
				//абс_БизнесПроцессы.ЗапуститьБПСогласованияПервичногоДокумента(Ссылка);	
				БП = БизнесПроцессы.абс_СогласованиеАктовПриемки.СоздатьБизнесПроцесс();
				БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
				БП.ПервичныйДокумент 		= Ссылка;
				БП.ПользовательИнициаторБП 	= Ответственный;

				БП.Записать();
					
				БП.Старт(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.Старт);

			КонецЕсли;
			
		КонецЕсли;
		
		Если абс_Статус = Перечисления.абс_СтатусыАктовПриемки.УточнениеБухгалтерией Тогда
			
			БПСогласование = НайтиБПСогласование();
			
			Если Не ЗначениеЗаполнено(БПСогласование) Тогда
				//абс_БизнесПроцессы.ЗапуститьБПСогласованияПервичногоДокументаУточнениеБухгалтером(Ссылка);
				БП = БизнесПроцессы.абс_СогласованиеАктовПриемки.СоздатьБизнесПроцесс();
				БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
				БП.ПервичныйДокумент 		= Ссылка;
				БП.ПользовательИнициаторБП 	= Ответственный;

				БП.Записать();
					
				БП.Старт(БизнесПроцессы.абс_СогласованиеАктовПриемки.ТочкиМаршрута.СтартУточнениеБухгалтером);

			КонецЕсли;
			
		КонецЕсли;
		
		// Попробуем закрыть задачу согласования
		ЗадачаСогласование = ПолучитьЗадачуПоПервичномуДокументуСогласование();
		
		Если ЗадачаСогласование = Неопределено Тогда
			Возврат;
		КонецЕсли;
				
		Если НЕ ЗадачаСогласование.Выполнена Тогда

			ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();			
			ЗадачаОбъект.ВыполнитьЗадачу();
		КонецЕсли;

	Исключение

		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи документа: " + ОписаниеОшибки() + ".", Отказ);
		
		Возврат;
	КонецПопытки;  
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	// АБС ВСТАВКА Создание на основании договора
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ДоговорНаВыполнениеРаботСФизЛицом") Тогда
		Если ДанныеЗаполнения.абс_СтатусДоговора <> Перечисления.абс_СтатусыДоговоровПодряда.Исполнение Тогда
			Сообщить("Акт можно создать только на основании договора в статусе Исполнение");
			мЗаполнениеНеУспешно = Истина;
			Возврат;
		КонецЕсли;
		Если ДанныеЗаполнения.ХарактерОплаты <> Перечисления.ХарактерВыплатыПоДоговору.абс_ПоАктамВыполненныхРабот Тогда
			Сообщить("Акт можно создавать только на основании договора с характером оплаты ""По актам выполненных работ""");
			мЗаполнениеНеУспешно = Истина;
			Возврат;
		КонецЕсли;
		
		Организация = ДанныеЗаполнения.Организация;
		
		НоваяСтрока = Сотрудники.Добавить();
		НоваяСтрока.ДоговорПодряда = ДанныеЗаполнения;
		НоваяСтрока.Сотрудник = ДанныеЗаполнения.Сотрудник;
	КонецЕсли;	
	// АБС ВСТАВКА КОНЕЦ
КонецПроцедуры

//Функция НайтиБПСогласование() Экспорт
//	
//	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоАктуПриёмки(Ссылка, "абсСогласованиеАктовПриёмки");
//	
//КонецФункции

//Функция ПолучитьЗадачуСогласование()
//	
//	БП = НайтиБПСогласование();
//	
//	Если БП = Неопределено Тогда
//		Возврат Неопределено;
//	КонецЕсли;

//	СпТочек = Новый Массив;
//	
//	ТекСтатус = Ссылка.абс_СтатусАкта;
//	
//	Если ТекСтатус = Перечисления.абсСтатусыАктовПриёмки.Подготовка Тогда
//		
//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеОтказ);
//		
//	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыАктовПриёмки.СогласованиеРукДеп Тогда
//		
//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеПодготовкаАПВР);
//		
//	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыАктовПриёмки.СогласованиеПВП Тогда		
//		
//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеСогласованиеРукДеп);

//	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыАктовПриёмки.Согласован Тогда		
//		
//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеСогласованиеПВП);

//	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыАктовПриёмки.ОбработкаБухгалтером Тогда		
//		
//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеСогласован);

//	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыАктовПриёмки.ПринятоДляРасчёта Тогда		
//		
//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеОбработкаБухгалтером);

//	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыАктовПриёмки.Завершён Тогда		
//		
//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеРасчётБухгалтером);

//	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыАктовПриёмки.Отмена Тогда		
//		
//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеПодготовкаАПВР);

//	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыАктовПриёмки.Отказ Тогда
//		
//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеСогласованиеРукДеп);
//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеСогласованиеПВП);
//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеОбработкаБухгалтером);
//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеСогласован);
//		
//	КонецЕсли;
//			
//	Возврат НайтиЗадачу(БП, СпТочек,,Ложь);

//КонецФункции

//Функция НайтиЗадачу(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено, ОтборПоИсполнителю = Истина)
//	
//	Если Исполнитель = Неопределено Тогда
//		Исполнитель = глЗначениеПеременной("глТекущийПользователь");
//	КонецЕсли;	
//	
//	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
//							   |	абсЗадачаДоговора.Ссылка
//							   |ИЗ
//							   |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
//							   |ГДЕ
//							   |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
//							   |	И абсЗадачаДоговора.ТочкаМаршрута В(&ТочкаМаршрута)
//							   |	И ВЫБОР
//							   |			КОГДА &ОтборПоИсполнителю
//							   |				ТОГДА абсЗадачаДоговора.Исполнитель = &Исполнитель
//							   |			ИНАЧЕ ИСТИНА
//							   |		КОНЕЦ
//							   |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
//							   |
//							   |УПОРЯДОЧИТЬ ПО
//							   |	абсЗадачаДоговора.Дата УБЫВ");
//							   
//							   
//	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс"		, БизнесПроцесс);
//	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута"		, ТочкаМаршрута);
//	ЗапросЗадач.УстановитьПараметр("Исполнитель"		, Исполнитель);
//	ЗапросЗадач.УстановитьПараметр("ОтборПоИсполнителю"	, ОтборПоИсполнителю);
//	
//	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
//	
//	ЗадачаСсылка = Неопределено;
//	
//	Если ВыборкаЗадач.Следующий() Тогда
//		ЗадачаСсылка = ВыборкаЗадач.Ссылка;
//	КонецЕсли;
//	
//	Возврат ЗадачаСсылка;
//	
//КонецФункции

//Процедура ВыполнитьЗадачуСогласование(ЗадачаСогласование)
//	
//	Если НЕ ЗадачаСогласование.Выполнена Тогда
//		
//		ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();		
//		ЗадачаОбъект.ВыполнитьЗадачу();
//		
//		Если НЕ ЗначениеЗаполнено(ЗадачаОбъект.БизнесПроцесс.АктПриёмкиВыполненныхРабот) Тогда
//			
//			БПОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();			
//			БПОбъект.АктПриёмкиВыполненныхРабот = Ссылка;
//			БПОбъект.Записать();
//			
//		КонецЕсли;
//	КонецЕсли;	
//	
//КонецПроцедуры

мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");