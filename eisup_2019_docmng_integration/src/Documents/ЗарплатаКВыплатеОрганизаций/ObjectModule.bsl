//АБС+++ Гончаров 16.04.2013
Перем абс_ВводПрограммно Экспорт;
Перем абс_WebService_ Экспорт;
//\\АБС--- Гончаров 16.04.2013

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

Процедура ПроверитьЗаполнениеШапки(ШапкаДокумента, Отказ, Заголовок = "")

	// Организация
	Если НЕ ЗначениеЗаполнено(ШапкаДокумента.Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указана организация, по которой выплачивается зарплата!", Отказ, Заголовок);
	КонецЕсли;
	
	// ХарактерВыплаты
	Если НЕ ЗначениеЗаполнено(ШапкаДокумента.ХарактерВыплаты) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан характер выплат!", Отказ, Заголовок);
	КонецЕсли;
	
	// Банк
	Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк И НЕ ЗначениеЗаполнено(ШапкаДокумента.Банк)Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан банк!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДокументОснование
	ТипОснования = ЗарплатаКВыплатеОрганизацийПереопределяемый.ТипОснованияПоХарактеруВыплаты(ХарактерВыплаты);
	Если ТипОснования <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда 
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан документ - основание!", Отказ, Заголовок);
		ИначеЕсли ТипЗнч(ДокументОснование) <> ТипОснования Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Тип документа-основания не соответствует характеру выплаты!", Отказ, Заголовок);
			НельзяАвтозаполнять = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКВыплатеОрганизацийПереопределяемый.ВыполнитьДополнительныеПроверкиДокумента(ШапкаДокумента, Отказ, Заголовок);	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиЗарплаты(СтрокаЗарплаты, УпрощенныйУчетВзаиморасчетов, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаЗарплаты.НомерСтроки) + ": ";
	
	// Работник
	Если НЕ ЗначениеЗаполнено(СтрокаЗарплаты.ФизЛицо) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Сумма
	Если (СтрокаЗарплаты.Сумма + СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты) = 0 Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю(СтрокаНачалаСообщенияОбОшибке + "не указана сумма к выплате. Строка пропущена.");
	КонецЕсли;
	Если (СтрокаЗарплаты.Сумма + СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты) < 0 Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указана отрицательная сумма к выплате!", Отказ, Заголовок);
	КонецЕсли;

	Если УпрощенныйУчетВзаиморасчетов Тогда
		Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу И (НЕ ЗначениеЗаполнено(СтрокаЗарплаты.ВыплаченностьЗарплаты) ИЛИ СтрокаЗарплаты.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.НеВыплачено) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не проставлена отметка о выплате или депонировании!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечатиРКО()

	УпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
	Запрос.УстановитьПараметр("Выплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("УпрощенныйУчетВзаиморасчетов", УпрощенныйУчетВзаиморасчетов);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки КАК НомерСтроки,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК Сумма,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование КАК ФИО,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|			ТОГДА "" сумма задепонирована""
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты <> &Выплачено
	|			ТОГДА "" сумма не помечена к выплате""
	|		КОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА "" сумма выплачена документом ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СостояниеСтроки,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Выплачено
	|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Представление
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеДокумента,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Выплачено
	|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВыводитьРКО,
	|	ВЫБОР
	|		КОГДА ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетДанныхДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(300)) КАК ДокументКемВыдан
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаДокумента,
	|				Физлицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо
	|					ИЗ
	|						Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|					ГДЕ
	|						ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|				&ДатаДокумента,
	|				Физлицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо
	|					ИЗ
	|						Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|					ГДЕ
	|						ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка)) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|		ПО ((НЕ &УпрощенныйУчетВзаиморасчетов))
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечатиРКО()

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",   Ссылка);
    Запрос.УстановитьПараметр("ДатаДокумента",	  Дата);
	Запрос.УстановитьПараметр("Выплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо.Наименование КАК ФизическоеЛицоНаименование,
		|	ОтветственныеЛицаСрезПоследних.Должность.Наименование КАК ДолжностьНаименование,
		|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛица.Комментарий
		|ПОМЕСТИТЬ ВТОтветственныеЛица
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&ДатаДокумента,
		|			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|				И ОтветственноеЛицо В (ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель), ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир), ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер))) КАК ОтветственныеЛицаСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтветственныеЛицаСрезПоследних.ДолжностьНаименование,
		|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ФИОФизЛицСрезПоследнихРуководитель.Фамилия, ОтветственныеЛицаСрезПоследних.ФизическоеЛицоНаименование) КАК ФИОРуководителя
		|ПОМЕСТИТЬ ВТДанныеОтветственныхЛиц
		|ИЗ
		|	ВТОтветственныеЛица КАК ОтветственныеЛицаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ
		|						ОтветственныеЛицаСрезПоследних.ФизическоеЛицо
		|					ИЗ
		|						ВТОтветственныеЛица КАК ОтветственныеЛицаСрезПоследних)) КАК ФИОФизЛицСрезПоследнихРуководитель
		|		ПО ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОтветственноеЛицо";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизаций.Номер КАК НомерДок,
		|	ЗарплатаКВыплатеОрганизаций.Дата КАК ДатаДок,
		|	ЗарплатаКВыплатеОрганизаций.Организация КАК Организация,
		|	ВЫРАЗИТЬ(ЗарплатаКВыплатеОрганизаций.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
		|	ЗарплатаКВыплатеОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ЗарплатаКВыплатеОрганизаций.ПодразделениеОрганизации.Наименование КАК Подразделение,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФИОРуководителя КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ДолжностьНаименование КАК ДолжностьРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.ФИОРуководителя КАК ФИОГлБуха,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихКассир.ФИОРуководителя КАК ФИОКассира,
		|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0) КАК Сумма,
		|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.ВсегоВыплачено, 0) КАК ВсегоВыплачено,
		|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.ВсегоДепонировано, 0) КАК ВсегоДепонировано,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0) = ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.ОплаченныеСуммы, 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОплаченоПолностью,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.КоличествоРКО
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОтветственныхЛиц КАК ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОтветственныхЛиц КАК ОтветственныеЛицаОрганизацийСрезПоследнихГлБух
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОтветственныхЛиц КАК ОтветственныеЛицаОрганизацийСрезПоследнихКассир
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследнихКассир.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ссылка,
		|			СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма,
		|			СУММА(ВЫБОР
		|					КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
		|						ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ВсегоДепонировано,
		|			СУММА(ВЫБОР
		|					КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Выплачено
		|						ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ВсегоВыплачено,
		|			СУММА(ВЫБОР
		|					КОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
		|						ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ОплаченныеСуммы,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор КАК Документ.РасходныйКассовыйОрдер)) КАК КоличествоРКО
		|		ИЗ
		|			Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|				ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
		|					И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость
		|		ГДЕ
		|			ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка) КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|		ПО ЗарплатаКВыплатеОрганизаций.Ссылка = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	&ДатаДокумента КАК Дата,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.НомерСтроки,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Сумма,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &ДокументСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо";
		
		ТекстЗапроса = ТекстЗапроса
			+"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////"
			+ Символы.ПС;
		
		// Добавляет текст запроса, формирующего временную таблицу РаботникиПредприятия,
		// которая содержить актуального на заданный момент сотрудника физлица
		ТекстЗапроса = ТекстЗапроса
			+ "//ТАБЛИЦАРАБОТНИКОВ"
			+ Символы.ПС
			+ "//КОНЕЦ ТАБЛИЦАРАБОТНИКОВ";
		УправлениеОтчетами.ПолучитьТаблицуРаботников(, ТекстЗапроса, "ВТДанныеДокумента", Истина);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
		
		Запрос.Текст = ТекстЗапроса
		+"
		|
		|////////////////////////////////////////////////////////////////////////////////"
		+ Символы.ПС
		+
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ЗарплатаКВыплатеОрганизацийЗарплата.ФизлицоНаименование) КАК ФизЛицо,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
		|			ТОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Представление
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ПредставлениеДокумента,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
		|			ТОГДА ""Задепонировано""
		|		КОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
		|			ТОГДА ""Выплачено""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ЗаписьОДепонировании,
		|	АктуальныеСотрудники.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	ВТДанныеДокумента КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				Физлицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК Физлицо
		|					ИЗ
		|						ВТДанныеДокумента КАК ЗарплатаКВыплатеОрганизацииЗарплата)) КАК ФИОФизЛицСрезПоследних
		|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
		|			И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаботникиПредприятия КАК АктуальныеСотрудники
		|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = АктуальныеСотрудники.Физлицо
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечатиРеестраДепонентов()

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",   Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	  Дата);
	
	Запрос.УстановитьПараметр("Обособленное",  Организация);
	Запрос.УстановитьПараметр("Организация",  ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты
	|ПОМЕСТИТЬ ВТСписокФизлиц
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	|			ИНАЧЕ """"
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|			ИНАЧЕ """"
	|		КОНЕЦ, ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование) КАК ФизЛицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК Сумма,
	|	ЕСТЬNULL(РаботникиОрганизаций.ПодразделениеОрганизации.Наименование, ДоговорникиОрганизаций.ПодразделениеОрганизации.Наименование) КАК Подразделение
	|ИЗ
	|	ВТСписокФизлиц КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаДокумента,
	|				Физлицо В
	|					(ВЫБРАТЬ
	|						СписокФизЛиц.ФизЛицо
	|					ИЗ
	|						ВТСписокФизлиц КАК СписокФизЛиц)) КАК ФИОФизЛицСрезПоследних
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|			ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаДокумента
	|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|			КОНЕЦ КАК ПодразделениеОрганизации
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|					&ДатаДокумента,
	|					Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|						И Организация = &Организация
	|						И Сотрудник.Физлицо В
	|							(ВЫБРАТЬ
	|								СписокФизЛиц.ФизЛицо
	|							ИЗ
	|								ВТСписокФизлиц КАК СписокФизЛиц)) КАК РаботникиОрганизацийСрезПоследних
	|		ГДЕ
	|			ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаДокумента
	|							И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|					ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			И ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаДокумента
	|							И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделениеЗавершения
	|					ИНАЧЕ РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение
	|				КОНЕЦ = &Обособленное) КАК РаботникиОрганизаций
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РаботникиОрганизаций.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДатыПоследнихДоговоров.Физлицо КАК Физлицо,
	|			МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации) КАК ПодразделениеОрганизации
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо КАК Физлицо,
	|				ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК Организация,
	|				МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала) КАК ДатаНачала
	|			ИЗ
	|				Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|			ГДЕ
	|				ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &ДатаДокумента
	|				И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &ДатаДокумента
	|				И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|				И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Обособленное
	|				И ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо В
	|						(ВЫБРАТЬ
	|							СписокФизЛиц.ФизЛицо
	|						ИЗ
	|							ВТСписокФизлиц КАК СписокФизЛиц)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо,
	|				ДоговорНаВыполнениеРаботСФизЛицом.Организация) КАК ДатыПоследнихДоговоров
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|				ПО ДатыПоследнихДоговоров.Физлицо = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
	|					И ДатыПоследнихДоговоров.Организация = ДоговорНаВыполнениеРаботСФизЛицом.Организация
	|					И ДатыПоследнихДоговоров.ДатаНачала = ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	|					И (ДоговорНаВыполнениеРаботСФизЛицом.Проведен)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДатыПоследнихДоговоров.Физлицо) КАК ДоговорникиОрганизаций
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ДоговорникиОрганизаций.Физлицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросДляПечатиРеестраДепонентов()

// Функция формирует основной запрос по сбору данных для расчетной ведомости.
//
// Параметры
//
// Возвращаемое значение:
//   РезультатЗапроса   – результат запроса.
//
Функция СформироватьЗапросТ49()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период",				НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяцаПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Запрос.УстановитьПараметр("ВидСтроки",			Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление);
	Запрос.УстановитьПараметр("Приход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Расход",				ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Выплачено",			Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("НеДействует",		Перечисления.ВидыДействияСНачислением.Прекратить);
	Авансы = Новый Массив;
	Авансы.Добавить(Перечисления.ХарактерВыплатыЗарплаты.АвансЗаПервуюПоловинуМесяца);
	Авансы.Добавить(Перечисления.ХарактерВыплатыЗарплаты.ПлановыйАванс);
	Запрос.УстановитьПараметр("Аванс",				Авансы);

	ПовременныеНачисления = Новый Массив;
	ПовременныеНачисления.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	ПовременныеНачисления.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	ПовременныеНачисления.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	ПовременныеНачисления.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	Запрос.УстановитьПараметр("ПовременныеНачисления",ПовременныеНачисления);
	Запрос.УстановитьПараметр("Сдельно",Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	Запрос.УстановитьПараметр("ОплатаПраздничныхИВыходных",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных);
	Запрос.УстановитьПараметр("ПраздничныйДень",Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);

	
	ИсполнительныеЛисты = Новый Массив;
	ИсполнительныеЛисты.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентом);
	ИсполнительныеЛисты.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомБезБЛ);
	ИсполнительныеЛисты.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПредела);
	ИсполнительныеЛисты.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПределаБезБЛ);
	ИсполнительныеЛисты.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой);
	ИсполнительныеЛисты.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммойДоПредела);
	Запрос.УстановитьПараметр("ИсполнительныеЛисты",ИсполнительныеЛисты);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Авторасчет,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|ПОМЕСТИТЬ ВТТабличнаяЧастьДокумента
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо";
				   
    Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо В
	|			(ВЫБРАТЬ 
	|				ФизЛица.ФизЛицо КАК ФизЛица
	|			ИЗ
	|				ВТТабличнаяЧастьДокумента КАК ФизЛица)
	|	И СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизации.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&ПовременныеНачисления)
	|			ТОГДА ""Повременно""
	|		КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = &Сдельно
	|			ТОГДА ""Сдельно""
	|		ИНАЧЕ ""Другие начисления""
	|	КОНЕЦ КАК Группа,
	|	1 КАК ПриоритетГруппы,
	|	ОсновныеНачисленияРаботниковОрганизации.Результат КАК Результат,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ОплатаПраздничныхИВыходных
	|			ТОГДА 0
	|		ИНАЧЕ ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней
	|	КОНЕЦ КАК ОтработаноДней,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ОплатаПраздничныхИВыходных
	|			ТОГДА 0
	|		ИНАЧЕ ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов
	|	КОНЕЦ КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ОплатаПраздничныхИВыходных
	|				И ПраздничныеДниКалендаря.ДатаКалендаря ЕСТЬ НЕ NULL 
	|			ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейПраздников,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ОплатаПраздничныхИВыходных
	|				И ПраздничныеДниКалендаря.ДатаКалендаря ЕСТЬ НЕ NULL 
	|			ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовПраздников,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ОплатаПраздничныхИВыходных
	|				И ПраздничныеДниКалендаря.ДатаКалендаря ЕСТЬ NULL 
	|			ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейВыходных,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ОплатаПраздничныхИВыходных
	|				И ПраздничныеДниКалендаря.ДатаКалендаря ЕСТЬ NULL 
	|			ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовВыходных,
	|	ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме КАК ДоходомВНатуральнойФорме
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
	|		ИЗ
	|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ГДЕ
	|			РегламентированныйПроизводственныйКалендарь.ВидДня = &ПраздничныйДень) КАК ПраздничныеДниКалендаря
	|		ПО ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало = ПраздничныеДниКалендаря.ДатаКалендаря
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации = &Период
	|	И ОсновныеНачисленияРаботниковОрганизации.Сотрудник В
	|			(ВЫБРАТЬ
	|				Сотрудники.Сотрудник КАК Сотрудник
	|			ИЗ
	|				ВТСотрудники КАК Сотрудники)
	|	И ОсновныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение = &Организация
	|	И (ОсновныеНачисленияРаботниковОрганизации.Результат <> 0
	|			ИЛИ ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней <> 0
	|			ИЛИ ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеНачисленияРаботниковОрганизации.ФизЛицо,
	|	""Другие начисления"",
	|	2,
	|	ДополнительныеНачисленияРаботниковОрганизации.Результат,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизации
	|ГДЕ
	|	ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &Период И &КонецМесяцаПериода
	|	И ДополнительныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение = &Организация
	|	И ДополнительныеНачисленияРаботниковОрганизации.Сотрудник В
	|			(ВЫБРАТЬ
	|				Сотрудники.Сотрудник КАК Сотрудник
	|			ИЗ
	|				ВТСотрудники КАК Сотрудники)
	|	И ДополнительныеНачисленияРаботниковОрганизации.Результат <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдержанияРаботниковОрганизации.ФизЛицо,
	|	ВЫБОР
	|		КОГДА УдержанияРаботниковОрганизации.ВидРасчета В (&ИсполнительныеЛисты)
	|			ТОГДА ""ИЛ""
	|		ИНАЧЕ ""Другие удержания""
	|	КОНЕЦ,
	|	3,
	|	УдержанияРаботниковОрганизации.Результат,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	NULL
	|ИЗ
	|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
	|ГДЕ
	|	УдержанияРаботниковОрганизации.ПериодРегистрации = &Период
	|	И УдержанияРаботниковОрганизации.Результат <> 0
	|	И УдержанияРаботниковОрганизации.ОбособленноеПодразделение = &Организация
	|	И УдержанияРаботниковОрганизации.ФизЛицо В
	|			(ВЫБРАТЬ
	|				ФизЛица.ФизЛицо КАК ФизЛица
	|			ИЗ
	|				ВТТабличнаяЧастьДокумента КАК ФизЛица)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	""НДФЛ"",
	|	3,
	|	НДФЛРасчетыСБюджетом.Налог,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	NULL
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.Период МЕЖДУ &Период И &КонецМесяцаПериода
	|	И НДФЛРасчетыСБюджетом.ВидДвижения = &Приход
	|	И НДФЛРасчетыСБюджетом.ВидСтроки = &ВидСтроки
	|	И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &Организация
	|	И НДФЛРасчетыСБюджетом.ИсчисленоИзЗарплаты
	|	И НДФЛРасчетыСБюджетом.ФизЛицо В
	|			(ВЫБРАТЬ
	|				ФизЛица.ФизЛицо КАК ФизЛица
	|			ИЗ
	|				ВТТабличнаяЧастьДокумента КАК ФизЛица)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПогашениеЗаймовРаботникамиОрганизаций.ФизЛицо,
	|	""Другие удержания"",
	|	3,
	|	ПогашениеЗаймовРаботникамиОрганизаций.ОсновнойДолг + ПогашениеЗаймовРаботникамиОрганизаций.Проценты,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОрганизаций
	|ГДЕ
	|	ПогашениеЗаймовРаботникамиОрганизаций.Период МЕЖДУ &Период И &КонецМесяцаПериода
	|	И ПогашениеЗаймовРаботникамиОрганизаций.ВидДвижения = &Расход
	|	И ПогашениеЗаймовРаботникамиОрганизаций.Организация = &Организация
	|	И ПогашениеЗаймовРаботникамиОрганизаций.УдержаноИзЗарплаты
	|	И ПогашениеЗаймовРаботникамиОрганизаций.ФизЛицо В
	|			(ВЫБРАТЬ
	|				ФизЛица.ФизЛицо КАК ФизЛица
	|			ИЗ
	|				ВТТабличнаяЧастьДокумента КАК ФизЛица)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Взаиморасчеты.Физлицо,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.ХарактерВыплаты В (&Аванс)
	|			ТОГДА ""Аванс""
	|		ИНАЧЕ ""Другие выплаты""
	|	КОНЕЦ,
	|	3,
	|	Взаиморасчеты.СуммаВзаиморасчетов,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|		ПО Взаиморасчеты.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
	|			И Взаиморасчеты.Регистратор = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор
	|			И (&Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость)
	|ГДЕ
	|	Взаиморасчеты.ВидДвижения = &Расход
	|	И Взаиморасчеты.Организация = &Организация
	|	И Взаиморасчеты.СуммаВзаиморасчетов <> 0
	|	И Взаиморасчеты.Период МЕЖДУ &Период И &КонецМесяцаПериода
	|	И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо ЕСТЬ NULL 
	|	И Взаиморасчеты.Физлицо В
	|			(ВЫБРАТЬ
	|				ФизЛица.ФизЛицо КАК ФизЛица
	|			ИЗ
	|				ВТТабличнаяЧастьДокумента КАК ФизЛица)
	|	И Взаиморасчеты.ХарактерВыплаты <> ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрНДФЛКЗачету.ФизЛицо,
	|	""Я"",
	|	5,
	|	РегистрНДФЛКЗачету.СуммаНДФЛКЗачетуОстаток,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	NULL
	|ИЗ
	|	РегистрНакопления.НДФЛКЗачету.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Физлицо В
	|					(ВЫБРАТЬ
	|						ФизЛица.ФизЛицо КАК ФизЛица
	|					ИЗ
	|						ВТТабличнаяЧастьДокумента КАК ФизЛица)) КАК РегистрНДФЛКЗачету
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СальдоНачальное.Физлицо,
	|	""Я"",
	|	5,
	|	СальдоНачальное.СуммаВзаиморасчетовОстаток,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Физлицо В
	|					(ВЫБРАТЬ
	|						ФизЛица.ФизЛицо КАК ФизЛица
	|					ИЗ
	|						ВТТабличнаяЧастьДокумента КАК ФизЛица)) КАК СальдоНачальное
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Взаиморасчеты.Физлицо,
	|	""Я"",
	|	5,
	|	-Взаиморасчеты.СуммаВзаиморасчетов,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|		ПО Взаиморасчеты.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
	|			И Взаиморасчеты.Регистратор = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор
	|			И (&Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость)
	|ГДЕ
	|	Взаиморасчеты.ВидДвижения = &Расход
	|	И Взаиморасчеты.Организация = &Организация
	|	И Взаиморасчеты.СуммаВзаиморасчетов <> 0
	|	И Взаиморасчеты.Период МЕЖДУ &Период И &КонецМесяцаПериода
	|	И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо ЕСТЬ NULL 
	|	И Взаиморасчеты.Физлицо В
	|			(ВЫБРАТЬ
	|				ФизЛица.ФизЛицо КАК ФизЛица
	|			ИЗ
	|				ВТТабличнаяЧастьДокумента КАК ФизЛица)
	|	И Взаиморасчеты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|	И Взаиморасчеты.ПериодВзаиморасчетов <> &Период";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки КАК НомерСтроки,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма КАК КВыплате,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование КАК ФизЛицоНаименование,
	|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.Имя = """"
	|			ТОГДА """"
	|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
	|			ТОГДА """"
	|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|	КОНЕЦ КАК ФИО,
	|	Данные.Группа,
	|	Данные.ПриоритетГруппы КАК ПриоритетГруппы,
	|	СУММА(Данные.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(Данные.ОтработаноЧасов) КАК ОтработаноЧасов,
	|	СУММА(Данные.Результат) КАК Результат,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Выплачено
	|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Представление
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеДокумента,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|			ТОГДА ""Задепонировано""
	|		КОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА ""Выплачено""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЗаписьОДепонировании,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &КонецМесяцаПериода
	|				И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Валюта1Завершения.Наименование
	|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Валюта1.Наименование
	|	КОНЕЦ КАК ВалютаНаименованиеТарифнойСтавки,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &КонецМесяцаПериода
	|				И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА ТарифныеСтавки.Валюта
	|					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Валюта1Завершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|					ТОГДА ТарифныеСтавки.Валюта
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Валюта1
	|			КОНЕЦ
	|	КОНЕЦ КАК ВалютаТарифнойСтавки,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &КонецМесяцаПериода
	|				И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА ТарифныеСтавки.Размер
	|					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Показатель1Завершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА ТарифныеСтавки.Размер
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Показатель1
	|			КОНЕЦ
	|	КОНЕЦ КАК ТарифнаяСтавка,
	|	СУММА(Данные.ДнейПраздников) КАК ДнейПраздников,
	|	СУММА(Данные.ЧасовПраздников) КАК ЧасовПраздников,
	|	СУММА(Данные.ДнейВыходных) КАК ДнейВыходных,
	|	СУММА(Данные.ЧасовВыходных) КАК ЧасовВыходных,
	|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
	|	РаботникиОрганизацииСрезПоследних.ТабельныйНомер,
	|	Данные.ДоходомВНатуральнойФорме
	|ИЗ
	|	ВТТабличнаяЧастьДокумента КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АктуальныеПриказы.Физлицо КАК Физлицо,
	|			АктуальныеПриказы.Организация КАК Организация,
	|			АктуальныеПриказы.Сотрудник.Код КАК ТабельныйНомер,
	|			ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &КонецМесяцаПериода
	|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения
	|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность
	|			КОНЕЦ КАК Должность
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПоследниеДаты.Физлицо КАК Физлицо,
	|				ПоследниеДаты.Организация КАК Организация,
	|				РаботникиОрганизаций.Сотрудник КАК Сотрудник
	|			ИЗ
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
	|					РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
	|					РаботникиОрганизаций.Организация КАК Организация
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ГДЕ
	|					РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|					И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|					И РаботникиОрганизаций.Сотрудник В
	|							(ВЫБРАТЬ
	|								Сотрудники.Сотрудник КАК Сотрудник
	|							ИЗ
	|								ВТСотрудники КАК Сотрудники)
	|					И РаботникиОрганизаций.Период <= &КонецМесяцаПериода
	|					И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					РаботникиОрганизаций.Сотрудник.Физлицо,
	|					РаботникиОрганизаций.Организация) КАК ПоследниеДаты
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|					ПО ПоследниеДаты.Период = РаботникиОрганизаций.Период
	|						И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|						И (РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|						И ПоследниеДаты.Организация = РаботникиОрганизаций.Организация
	|						И ПоследниеДаты.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо) КАК АктуальныеПриказы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&КонецМесяцаПериода,
	|						Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|							И Организация = &ГоловнаяОрганизация
	|							И Сотрудник В
	|								(ВЫБРАТЬ
	|									Сотрудники.Сотрудник КАК Сотрудник
	|								ИЗ
	|									ВТСотрудники КАК Сотрудники)) КАК РаботникиОрганизацийСрезПоследних
	|				ПО АктуальныеПриказы.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РаботникиОрганизацииСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|				&КонецМесяцаПериода,
	|				Организация = &ГоловнаяОрганизация
	|					И ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО
	|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|					И Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник КАК Сотрудник
	|						ИЗ
	|							ВТСотрудники КАК Сотрудники)) КАК ПлановыеНачисленияРаботниковОрганизацииСрезПоследних
	|		ПО (ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Действие <> &НеДействует)
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Сотрудник.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&КонецМесяцаПериода, ) КАК ТарифныеСтавки
	|		ПО (ВЫБОР
	|				КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &КонецМесяцаПериода
	|						И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ТарифныйРазряд1Завершения
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ТарифныйРазряд1
	|			КОНЕЦ = ТарифныеСтавки.ТарифныйРазряд)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&КонецМесяцаПериода,
	|				Физлицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ФизЛица.ФизЛицо КАК ФизЛица
	|					ИЗ
	|						ВТТабличнаяЧастьДокумента КАК ФизЛица)) КАК ФИОФизЛицСрезПоследних
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Данные КАК Данные
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = Данные.Физлицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты,
	|	Данные.Группа,
	|	Данные.ПриоритетГруппы,
	|	РаботникиОрганизацииСрезПоследних.Должность.Наименование,
	|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.Имя = """"
	|			ТОГДА """"
	|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
	|			ТОГДА """"
	|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Выплачено
	|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Представление
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|			ТОГДА ""Задепонировано""
	|		КОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА ""Выплачено""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &КонецМесяцаПериода
	|				И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Валюта1Завершения.Наименование
	|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Валюта1.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &КонецМесяцаПериода
	|				И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА ТарифныеСтавки.Валюта
	|					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Валюта1Завершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|					ТОГДА ТарифныеСтавки.Валюта
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Валюта1
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &КонецМесяцаПериода
	|				И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА ТарифныеСтавки.Размер
	|					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Показатель1Завершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА ТарифныеСтавки.Размер
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Показатель1
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование,
	|	РаботникиОрганизацииСрезПоследних.ТабельныйНомер,
	|	Данные.ДоходомВНатуральнойФорме
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ПриоритетГруппы";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой "Т-53".
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьТ53()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплатеОрганизаций_Т53";
	
	Макет 		= ПолучитьМакет("Т53");
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	
	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	ОбластьМакетаШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогПоСтранице = Макет.ПолучитьОбласть("ИтогПоЛисту");
	ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодвал.Параметры.РКО = "Расходный кассовый ордер № _______ от  ""___"" ___________ 20 ___ г.";
	
	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
	
	ВывестиДанныеРКО = Ложь;
	
	// выводим данные о руководителях организации
	Пока ВыборкаДляШапки.Следующий() Цикл
		
		ОбластьМакетаШапкаДокумента.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапкаДокумента.Параметры.ОтчетныйПериодС		= ПериодРегистрации;
 		ОбластьМакетаШапкаДокумента.Параметры.ОтчетныйПериодПо		= ?(НЕ ЗначениеЗаполнено(ПериодРегистрации),ПериодРегистрации,КонецМесяца(ПериодРегистрации));
 		ОбластьМакетаШапкаДокумента.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапкаДокумента.Параметры.НазваниеОрганизации);
		
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Если ВыборкаДляШапки.Сумма <> 0 Тогда
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДок = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаДляШапки.Сумма, Валюта);
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДокРублей = Цел(ВыборкаДляШапки.Сумма);
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДокКопеек = (ВыборкаДляШапки.Сумма - Цел(ВыборкаДляШапки.Сумма)) * 100
		КонецЕсли;
		Если ВыборкаДляШапки.ОплаченоПолностью Тогда
			Если ВыборкаДляШапки.ВсегоДепонировано > 0 Тогда
				ОбластьМакетаПодвал.Параметры.ВсегоДепонировано = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаДляШапки.ВсегоДепонировано, Валюта);
			Иначе 
				ОбластьМакетаПодвал.Параметры.ВсегоДепонировано = "---";
			КонецЕсли;
			Если ВыборкаДляШапки.ВсегоВыплачено > 0 Тогда
				ОбластьМакетаПодвал.Параметры.ВсегоВыплачено = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаДляШапки.ВсегоВыплачено, Валюта);
			Иначе 
				ОбластьМакетаПодвал.Параметры.ВсегоВыплачено = "---";
			КонецЕсли;
			ВывестиДанныеРКО = ВыборкаДляШапки.КоличествоРКО = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаШапкаДокумента);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0;
    // выводим данные по строкам документа.
	Пока ВыборкаРаботники.Следующий() Цикл
	
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаРаботники);
		Если ВывестиДанныеРКО И Не ПустаяСтрока(ВыборкаРаботники.ПредставлениеДокумента) Тогда
			ОбластьМакетаПодвал.Параметры.РКО = ВыборкаРаботники.ПредставлениеДокумента;
			ВывестиДанныеРКО = Ложь;
		КонецЕсли;
		ОбластьМакетаСтрока.Параметры.ЗаписьОДепонировании = ОбластьМакетаСтрока.Параметры.ЗаписьОДепонировании + " " + Символы.ПС + " ";
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			
			ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
			ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ВыведеноСтраниц = ВыведеноСтраниц + 1;
			ИтогоНаСтранице = 0;
			
		КонецЕсли;
		
		ОбластьМакетаСтрока.Параметры.НомерСтроки = ВыведеноСтрок;
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		ИтогоНаСтранице = ИтогоНаСтранице + ВыборкаРаботники.Сумма;

	КонецЦикла;
	
	ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
	ОбластьМакетаПодвал.Параметры.КоличествоЛистов = ?(ВыведеноСтрок = 0,"",ВыведеноСтраниц + 1);
	
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакетаСтрока.Параметры.Количество() Цикл
		ОбластьМакетаСтрока.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакетаСтрока.Параметры.Физлицо = " " + Символы.ПС + " ";
	Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ53()

// Функция формирует табличный документ с печатной формой "Т-49".
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьТ49()
	
	ТабДокумент                     = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб         = Истина;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплатеОрганизации_Т49";
	ТабДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	Макет		= ПолучитьМакет("Т49");
	
	// Сумма по документу.
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	// получаем данные по работникам для печати
	ВыборкаПоФЛ = СформироватьЗапросТ49().Выбрать();
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ИтоговаяКомпенсация = Зарплата.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	ВыводитьКомпенсацию = ИтоговаяКомпенсация > 0; 
	
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаШапкаТаблицы	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаПодвал			= Макет.ПолучитьОбласть("Подвал");
	ОбластьСтрока				= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвалСтр			= Макет.ПолучитьОбласть("ИтогоПоСтранице");
	
	Если Не ВыводитьКомпенсацию Тогда
		//удаляем колонку компенсации
		ОбластьМакетаШапка.УдалитьОбласть(ОбластьМакетаШапка.Область(1,23,ОбластьМакетаШапка.ВысотаТаблицы,23),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		ОбластьМакетаШапкаТаблицы.УдалитьОбласть(ОбластьМакетаШапкаТаблицы.Область(1,23,ОбластьМакетаШапкаТаблицы.ВысотаТаблицы,23),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		ОбластьМакетаПодвал.УдалитьОбласть(ОбластьМакетаПодвал.Область(1,23,ОбластьМакетаПодвал.ВысотаТаблицы,23),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		ОбластьСтрока.УдалитьОбласть(ОбластьСтрока.Область(1,23,ОбластьСтрока.ВысотаТаблицы,23),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		ОбластьПодвалСтр.УдалитьОбласть(ОбластьПодвалСтр.Область(1,23,ОбластьПодвалСтр.ВысотаТаблицы,23),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьСтрока);
	ВыводимыеОбласти.Добавить(ОбластьПодвалСтр);
	
	ОбластьМакетаПодвал.Параметры.РКО = "Расходный кассовый ордер № _______ от  ""___"" ___________ 20 ___ г.";
	ОбластьМакетаПодвал.Параметры.ИтогоПовременно		= 0;
	ОбластьМакетаПодвал.Параметры.ИтогоСдельно			= 0;
	ОбластьМакетаПодвал.Параметры.ИтогоДругое			= 0;
	ОбластьМакетаПодвал.Параметры.ИтогоВсегоНачислено	= 0;
	ОбластьМакетаПодвал.Параметры.ИтогоАванс			= 0;
	ОбластьМакетаПодвал.Параметры.ИтогоНДФЛ				= 0;
	ОбластьМакетаПодвал.Параметры.ИтогоИЛ				= 0;
	ОбластьМакетаПодвал.Параметры.ДругоеУдержано		= 0;
	ОбластьМакетаПодвал.Параметры.ДолгЗаОрганизацией	= 0;
	ОбластьМакетаПодвал.Параметры.ДолгЗаРаботником		= 0;
	ОбластьМакетаПодвал.Параметры.ИтогоКВыплате			= 0;
	// Начинаем новый отсчет итогов по странице
	ОбластьПодвалСтр.Параметры.Повременно			= 0;
	ОбластьПодвалСтр.Параметры.Сдельно				= 0;
	ОбластьПодвалСтр.Параметры.Другое				= 0;
	ОбластьПодвалСтр.Параметры.ВсегоНачислено		= 0;
	ОбластьПодвалСтр.Параметры.Аванс				= 0;
	ОбластьПодвалСтр.Параметры.НДФЛ					= 0;
	ОбластьПодвалСтр.Параметры.ИЛ					= 0;
	ОбластьПодвалСтр.Параметры.ДругоеУдержано		= 0;
	ОбластьПодвалСтр.Параметры.ДолгЗаОрганизацией	= 0;
	ОбластьПодвалСтр.Параметры.ДолгЗаРаботником		= 0;
	ОбластьПодвалСтр.Параметры.КВыплате				= 0;
		
	Если ВыводитьКомпенсацию Тогда
		ОбластьМакетаПодвал.Параметры.ИтогоКомпенсацияЗаЗадержкуЗарплаты	= 0;
		ОбластьПодвалСтр.Параметры.КомпенсацияЗаЗадержкуЗарплаты			= 0;
	КонецЕсли;
	// заполнение и вывод шапки отчета
	ОбластьМакетаШапка.Параметры.ОтчетныйПериодС  = ПериодРегистрации;
	ОбластьМакетаШапка.Параметры.ОтчетныйПериодПо = ?(НЕ ЗначениеЗаполнено(ПериодРегистрации),ПериодРегистрации,КонецМесяца(ПериодРегистрации));
	ОбластьМакетаШапка.Параметры.НомерДок		  = Номер;
	ОбластьМакетаШапка.Параметры.ДатаДок		  = Дата;
	
	ВывестиДанныеРКО = Ложь;
	Если ВыборкаДляШапки.Следующий() Тогда
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки);
		
		Если ВыборкаДляШапки.Сумма <> 0 Тогда
			ОбластьМакетаШапка.Параметры.СуммаВсегоПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаДляШапки.Сумма, ВалютаРегламентированногоУчета);
			ОбластьМакетаШапка.Параметры.СуммаДокРублей		= Цел(ВыборкаДляШапки.Сумма);
			ОбластьМакетаШапка.Параметры.СуммаДокКопеек		= (ВыборкаДляШапки.Сумма - Цел(ВыборкаДляШапки.Сумма)) * 100;
			ОбластьМакетаПодвал.Параметры.ИтогоКВыплате		= Зарплата.Итог("Сумма");
			Если ВыводитьКомпенсацию Тогда
				ОбластьМакетаПодвал.Параметры.ИтогоКомпенсацияЗаЗадержкуЗарплаты = ИтоговаяКомпенсация;
			КонецЕсли;
		КонецЕсли; 
		
		Если ВыборкаДляШапки.ОплаченоПолностью Тогда
			Если ВыборкаДляШапки.ВсегоДепонировано > 0 Тогда
				ОбластьМакетаПодвал.Параметры.ВсегоДепонировано = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаДляШапки.ВсегоДепонировано, ВалютаРегламентированногоУчета);
			Иначе 
				ОбластьМакетаПодвал.Параметры.ВсегоДепонировано = "---";
			КонецЕсли;
			Если ВыборкаДляШапки.ВсегоВыплачено > 0 Тогда
				ОбластьМакетаПодвал.Параметры.ВсегоВыплачено = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаДляШапки.ВсегоВыплачено, ВалютаРегламентированногоУчета);
			Иначе 
				ОбластьМакетаПодвал.Параметры.ВсегоВыплачено = "---";
			КонецЕсли;
			ВывестиДанныеРКО = ВыборкаДляШапки.КоличествоРКО = 1;
		КонецЕсли;
		
	КонецЕсли; 
	
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	НомерПП = 1;
	ВсегоСтрокДокумента = Зарплата.Количество();
		
	Пока ВыборкаПоФЛ.СледующийПоЗначениюПоля("ФизЛицо") Цикл
		
		ОбластьСтрока.Параметры.Заполнить(ВыборкаПоФЛ);
		
		Если ВывестиДанныеРКО И Не ПустаяСтрока(ВыборкаПоФЛ.ПредставлениеДокумента) Тогда
			ОбластьМакетаПодвал.Параметры.РКО = ВыборкаПоФЛ.ПредставлениеДокумента;
			ВывестиДанныеРКО = Ложь;
		КонецЕсли;
		
		// поправим ФИО
		Если ВыборкаПоФЛ.ФИО = Null Тогда
			ОбластьСтрока.Параметры.ФИО	= ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаПоФЛ.ФизЛицоНаименование);
		КонецЕсли;
		
		// тарифная ставка
		Если ЗначениеЗаполнено(ВыборкаПоФЛ.ТарифнаяСтавка) И ВыборкаПоФЛ.ВалютаТарифнойСтавки <> ВалютаРегламентированногоУчета Тогда
			ОбластьСтрока.Параметры.ТарифнаяСтавка = "" + ВыборкаПоФЛ.ТарифнаяСтавка + "(" + ВыборкаПоФЛ.ВалютаНаименованиеТарифнойСтавки + ")"
		КонецЕсли; 
		
		ОбластьСтрока.Параметры.Повременно			= 0;
		ОбластьСтрока.Параметры.Сдельно				= 0;
		ОбластьСтрока.Параметры.Другое				= 0;
		ОбластьСтрока.Параметры.Аванс				= 0;
		ОбластьСтрока.Параметры.НДФЛ				= 0;
		ОбластьСтрока.Параметры.ИЛ					= 0;
		ОбластьСтрока.Параметры.ВсегоНачислено		= 0;
		ОбластьСтрока.Параметры.ДругоеУдержано		= 0;
		ОбластьСтрока.Параметры.ДолгЗаОрганизацией	= 0;
		ОбластьСтрока.Параметры.ДолгЗаРаботником	= 0;
		ВсегоУдержано								= 0;
		НачальноеСальдо								= 0;
		КонечноеСальдо								= 0;
		ОтработаноДней								= 0;
		ОтработаноЧасов								= 0;
		ДнейПраздников								= 0;
		ЧасовПраздников								= 0;
		ДнейВыходных								= 0;
		ЧасовВыходных								= 0;
		ДоходВНатФорме                              = 0;
		
		Пока ВыборкаПоФЛ.Следующий() Цикл
			
			// обработка расчетов
			Если ВыборкаПоФЛ.Группа = "Повременно" Тогда
				
				ОбластьСтрока.Параметры.Повременно				= ВыборкаПоФЛ.Результат;
				// подсчет итогов по странице и ведомости
				ОбластьМакетаПодвал.Параметры.ИтогоПовременно	= ОбластьМакетаПодвал.Параметры.ИтогоПовременно	+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.Повременно			= ОбластьПодвалСтр.Параметры.Повременно			+ ВыборкаПоФЛ.Результат;
				Если ВыборкаПоФЛ.ДоходомВНатуральнойФорме тогда
					ДоходВНатФорме = ДоходВНатФорме + ВыборкаПоФЛ.Результат;
				КонецЕсли;
				ОбластьСтрока.Параметры.ВсегоНачислено			  = ОбластьСтрока.Параметры.ВсегоНачислено		+ ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ИтогоВсегоНачислено = ОбластьМакетаПодвал.Параметры.ИтогоВсегоНачислено + ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.ВсегоНачислено		  = ОбластьПодвалСтр.Параметры.ВсегоНачислено		+ ВыборкаПоФЛ.Результат;
				
				ОтработаноДней = ОтработаноДней + ВыборкаПоФЛ.ОтработаноДней;
				ОтработаноЧасов = ОтработаноЧасов + ВыборкаПоФЛ.ОтработаноЧасов;
				
			ИначеЕсли ВыборкаПоФЛ.Группа = "Сдельно" Тогда
				
				ОбластьСтрока.Параметры.Сдельно 				= ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ИтогоСдельно		= ОбластьМакетаПодвал.Параметры.ИтогоСдельно	+ ВыборкаПоФЛ.Результат; 
				ОбластьПодвалСтр.Параметры.Сдельно				= ОбластьПодвалСтр.Параметры.Сдельно			+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.ВсегоНачислено		= ОбластьПодвалСтр.Параметры.ВсегоНачислено		+ ВыборкаПоФЛ.Результат;
				Если ВыборкаПоФЛ.ДоходомВНатуральнойФорме тогда
					ДоходВНатФорме = ДоходВНатФорме + ВыборкаПоФЛ.Результат;
				КонецЕсли;
				
				ОбластьСтрока.Параметры.ВсегоНачислено = ОбластьСтрока.Параметры.ВсегоНачислено + ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ИтогоВсегоНачислено =  ОбластьМакетаПодвал.Параметры.ИтогоВсегоНачислено + ВыборкаПоФЛ.Результат;
				
				ОтработаноДней = ОтработаноДней + ВыборкаПоФЛ.ОтработаноДней;
				ОтработаноЧасов = ОтработаноЧасов + ВыборкаПоФЛ.ОтработаноЧасов;
				
			ИначеЕсли ВыборкаПоФЛ.Группа = "Другие начисления" Тогда
				
				ОбластьСтрока.Параметры.Другое					= ОбластьСтрока.Параметры.Другое + ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ИтогоДругое		= ОбластьМакетаПодвал.Параметры.ИтогоДругое		+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.Другое				= ОбластьПодвалСтр.Параметры.Другое				+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.ВсегоНачислено		= ОбластьПодвалСтр.Параметры.ВсегоНачислено		+ ВыборкаПоФЛ.Результат;
				Если ВыборкаПоФЛ.ДоходомВНатуральнойФорме тогда
					ДоходВНатФорме = ДоходВНатФорме + ВыборкаПоФЛ.Результат;
				КонецЕсли;
				
				
				ОбластьСтрока.Параметры.ВсегоНачислено = ОбластьСтрока.Параметры.ВсегоНачислено + ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ИтогоВсегоНачислено = ОбластьМакетаПодвал.Параметры.ИтогоВсегоНачислено + ВыборкаПоФЛ.Результат;
				
				ОтработаноДней = ОтработаноДней + ВыборкаПоФЛ.ОтработаноДней;
				ОтработаноЧасов = ОтработаноЧасов + ВыборкаПоФЛ.ОтработаноЧасов;
				
				ДнейПраздников = ДнейПраздников + ВыборкаПоФЛ.ДнейПраздников;
				ЧасовПраздников = ЧасовПраздников + ВыборкаПоФЛ.ЧасовПраздников;
				ДнейВыходных = ДнейВыходных + ВыборкаПоФЛ.ДнейВыходных;
				ЧасовВыходных = ЧасовВыходных + ВыборкаПоФЛ.ЧасовВыходных;
				
			ИначеЕсли ВыборкаПоФЛ.Группа = "Аванс" Тогда
				
				ОбластьСтрока.Параметры.Аванс					= ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ИтогоАванс		= ОбластьМакетаПодвал.Параметры.ИтогоАванс		+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.Аванс				= ОбластьПодвалСтр.Параметры.Аванс				+ ВыборкаПоФЛ.Результат;
				
				ВсегоУдержано = ВсегоУдержано + ВыборкаПоФЛ.Результат;
				
			ИначеЕсли ВыборкаПоФЛ.Группа = "Другие выплаты" Тогда
				
				ОбластьСтрока.Параметры.ДругоеУдержано			= ОбластьСтрока.Параметры.ДругоеУдержано		+ ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ДругоеУдержано	= ОбластьМакетаПодвал.Параметры.ДругоеУдержано	+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.ДругоеУдержано		= ОбластьПодвалСтр.Параметры.ДругоеУдержано		+ ВыборкаПоФЛ.Результат;
				ВсегоУдержано = ВсегоУдержано + ВыборкаПоФЛ.Результат;
				
			ИначеЕсли ВыборкаПоФЛ.Группа = "НДФЛ" Тогда
				
				ОбластьСтрока.Параметры.НДФЛ					= ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ИтогоНДФЛ			= ОбластьМакетаПодвал.Параметры.ИтогоНДФЛ		+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.НДФЛ					= ОбластьПодвалСтр.Параметры.НДФЛ				+ ВыборкаПоФЛ.Результат;
				
				ВсегоУдержано = ВсегоУдержано + ВыборкаПоФЛ.Результат;
				
			ИначеЕсли ВыборкаПоФЛ.Группа = "ИЛ" Тогда
				
				ОбластьСтрока.Параметры.ИЛ						= ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ИтогоИЛ			= ОбластьМакетаПодвал.Параметры.ИтогоИЛ			+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.ИЛ					= ОбластьПодвалСтр.Параметры.ИЛ					+ ВыборкаПоФЛ.Результат;
				
				ВсегоУдержано = ВсегоУдержано + ВыборкаПоФЛ.Результат;
				
			ИначеЕсли ВыборкаПоФЛ.Группа = "Другие удержания" Тогда
				
				ОбластьСтрока.Параметры.ДругоеУдержано			= ОбластьСтрока.Параметры.ДругоеУдержано		+ ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ДругоеУдержано	= ОбластьМакетаПодвал.Параметры.ДругоеУдержано	+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.ДругоеУдержано		= ОбластьПодвалСтр.Параметры.ДругоеУдержано		+ ВыборкаПоФЛ.Результат;
				
				ВсегоУдержано = ВсегоУдержано + ВыборкаПоФЛ.Результат;
				
			ИначеЕсли ВыборкаПоФЛ.Группа = "Я" Тогда // Конечное сальдо
				НачальноеСальдо = НачальноеСальдо + ВыборкаПоФЛ.Результат;
			КонецЕсли;
			
		КонецЦикла;
		
		// дней(часов) отработано
		ОбластьСтрока.Параметры.ОтработаноДнейЧасов = ОтработаноДней;
		Если ЗначениеЗаполнено(ОтработаноЧасов) Тогда
			ОбластьСтрока.Параметры.ОтработаноДнейЧасов = "" + ОбластьСтрока.Параметры.ОтработаноДнейЧасов + " (" + ОтработаноЧасов + ")"
		КонецЕсли; 
		ОбластьСтрока.Параметры.ДнейЧасовВыходных = ДнейВыходных;
		Если ЗначениеЗаполнено(ЧасовВыходных) Тогда
			ОбластьСтрока.Параметры.ДнейЧасовВыходных = "" + ОбластьСтрока.Параметры.ДнейЧасовВыходных + " (" + ЧасовВыходных + ")"
		КонецЕсли; 
		ОбластьСтрока.Параметры.ДнейЧасовПраздников = ДнейПраздников;
		Если ЗначениеЗаполнено(ЧасовПраздников) Тогда
			ОбластьСтрока.Параметры.ДнейЧасовПраздников = "" + ОбластьСтрока.Параметры.ДнейЧасовПраздников + " (" + ЧасовПраздников + ")"
		КонецЕсли;
		
		// итого к выплате по странице
		ОбластьПодвалСтр.Параметры.КВыплате						= ОбластьПодвалСтр.Параметры.КВыплате				+ ОбластьСтрока.Параметры.КВыплате;

		КонечноеСальдо = НачальноеСальдо + ОбластьСтрока.Параметры.ВсегоНачислено - ВсегоУдержано - ОбластьСтрока.Параметры.КВыплате- ДоходВНатФорме;
		Если КонечноеСальдо > 0 Тогда
			
			ОбластьСтрока.Параметры.ДолгЗаОрганизацией			= ОбластьСтрока.Параметры.ДолгЗаОрганизацией		+ КонечноеСальдо;
			ОбластьМакетаПодвал.Параметры.ДолгЗаОрганизацией	= ОбластьМакетаПодвал.Параметры.ДолгЗаОрганизацией	+ КонечноеСальдо;
			ОбластьПодвалСтр.Параметры.ДолгЗаОрганизацией		= ОбластьПодвалСтр.Параметры.ДолгЗаОрганизацией		+ КонечноеСальдо;
			
		Иначе
			
			ОбластьСтрока.Параметры.ДолгЗаРаботником			= ОбластьСтрока.Параметры.ДолгЗаРаботником			- КонечноеСальдо;
			ОбластьМакетаПодвал.Параметры.ДолгЗаРаботником		= ОбластьМакетаПодвал.Параметры.ДолгЗаРаботником	- КонечноеСальдо;
			ОбластьПодвалСтр.Параметры.ДолгЗаРаботником			= ОбластьПодвалСтр.Параметры.ДолгЗаРаботником		- КонечноеСальдо;
			
		КонецЕсли; 
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и НомерПП = ВсегоСтрокДокумента Тогда
			//все строки отчета перебрали, они все еще умещаются на странице
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			
			ОбластьПодвалСтр.Параметры.Повременно			= ОбластьПодвалСтр.Параметры.Повременно			- ОбластьСтрока.Параметры.Повременно;
			ОбластьПодвалСтр.Параметры.Сдельно				= ОбластьПодвалСтр.Параметры.Сдельно			- ОбластьСтрока.Параметры.Сдельно;
			ОбластьПодвалСтр.Параметры.Другое				= ОбластьПодвалСтр.Параметры.Другое				- ОбластьСтрока.Параметры.Другое;
			ОбластьПодвалСтр.Параметры.ВсегоНачислено		= ОбластьПодвалСтр.Параметры.ВсегоНачислено		- ОбластьСтрока.Параметры.ВсегоНачислено;
			ОбластьПодвалСтр.Параметры.Аванс				= ОбластьПодвалСтр.Параметры.Аванс				- ОбластьСтрока.Параметры.Аванс;
			ОбластьПодвалСтр.Параметры.НДФЛ					= ОбластьПодвалСтр.Параметры.НДФЛ				- ОбластьСтрока.Параметры.НДФЛ;
			ОбластьПодвалСтр.Параметры.ИЛ					= ОбластьПодвалСтр.Параметры.ИЛ					- ОбластьСтрока.Параметры.ИЛ;
			ОбластьПодвалСтр.Параметры.ДругоеУдержано		= ОбластьПодвалСтр.Параметры.ДругоеУдержано		- ОбластьСтрока.Параметры.ДругоеУдержано;
			ОбластьПодвалСтр.Параметры.ДолгЗаОрганизацией	= ОбластьПодвалСтр.Параметры.ДолгЗаОрганизацией	- ОбластьСтрока.Параметры.ДолгЗаОрганизацией;
			ОбластьПодвалСтр.Параметры.ДолгЗаРаботником		= ОбластьПодвалСтр.Параметры.ДолгЗаРаботником	- ОбластьСтрока.Параметры.ДолгЗаРаботником;
			ОбластьПодвалСтр.Параметры.КВыплате				= ОбластьПодвалСтр.Параметры.КВыплате			- ОбластьСтрока.Параметры.КВыплате;
			Если ВыводитьКомпенсацию Тогда
				ОбластьПодвалСтр.Параметры.КомпенсацияЗаЗадержкуЗарплаты = ОбластьПодвалСтр.Параметры.КомпенсацияЗаЗадержкуЗарплаты - ОбластьСтрока.Параметры.КомпенсацияЗаЗадержкуЗарплаты;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьПодвалСтр);
			
			// обнулим итоги по странице
			ОбластьПодвалСтр.Параметры.Повременно			= ОбластьСтрока.Параметры.Повременно;
			ОбластьПодвалСтр.Параметры.Сдельно				= ОбластьСтрока.Параметры.Сдельно;
			ОбластьПодвалСтр.Параметры.Другое				= ОбластьСтрока.Параметры.Другое;
			ОбластьПодвалСтр.Параметры.ВсегоНачислено		= ОбластьСтрока.Параметры.ВсегоНачислено;
			ОбластьПодвалСтр.Параметры.Аванс				= ОбластьСтрока.Параметры.Аванс;
			ОбластьПодвалСтр.Параметры.НДФЛ					= ОбластьСтрока.Параметры.НДФЛ;
			ОбластьПодвалСтр.Параметры.ИЛ					= ОбластьСтрока.Параметры.ИЛ;
			ОбластьПодвалСтр.Параметры.ДругоеУдержано		= ОбластьСтрока.Параметры.ДругоеУдержано;
			ОбластьПодвалСтр.Параметры.ДолгЗаОрганизацией	= ОбластьСтрока.Параметры.ДолгЗаОрганизацией;
			ОбластьПодвалСтр.Параметры.ДолгЗаРаботником		= ОбластьСтрока.Параметры.ДолгЗаРаботником;
			ОбластьПодвалСтр.Параметры.КВыплате				= ОбластьСтрока.Параметры.КВыплате;
			Если ВыводитьКомпенсацию Тогда
				ОбластьПодвалСтр.Параметры.КомпенсацияЗаЗадержкуЗарплаты = ОбластьСтрока.Параметры.КомпенсацияЗаЗадержкуЗарплаты;
			КонецЕсли;
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
		КонецЕсли;
		

		ОбластьСтрока.Параметры.НомерПП  = НомерПП;
		
		ТабДокумент.Вывести(ОбластьСтрока);
		НомерПП = НомерПП + 1;
		
	КонецЦикла;
		
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьСтрока);
	ВыводимыеОбласти.Добавить(ОбластьПодвалСтр);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьСтрока.Параметры.Количество() Цикл
		ОбластьСтрока.Параметры.Установить(Сч - 1,"");
	КонецЦикла;
	ОбластьСтрока.Параметры.Физлицо = " " + Символы.ПС + " ";
	Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьПодвалСтр);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ49()

// Функция формирует табличный документ с печатной формой "КО-02".
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
Функция ПечатьРКО()

	КомпонентаСклоненияФИО = глЗначениеПеременной("глКомпонентаСклоненияФИО");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплатеОрганизаций_РКО";
	
	Макет         = ПолучитьОбщийМакет("КО2");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	// счета учета
	ОбластьМакета.Параметры.ДебетСубСчет  = "70";
	ОбластьМакета.Параметры.КредитСубСчет = "50.01";
	
	// данные об организации
	СведенияОбОрганизации     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	ОбластьМакета.Параметры.ПредставлениеОрганизации	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.ОрганизацияПоОКПО			= СведенияОбОрганизации.КодПоОКПО;
	
	// выводим подписи ответственных лиц
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата);

	ОбластьМакета.Параметры.ФИОРуководителя       = Руководители.Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОКассира            = Руководители.Кассир;
	
	// прочие поля
	ПредставлениеДокумента = "Платежная ведомость № " + Номер + " от " + Формат(Дата,"ДЛФ=DD");
	ОбластьМакета.Параметры.Основание             = ПредставлениеДокумента;
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// получаем данные для печати
	ВыборкаРаботники = СформироватьЗапросДляПечатиРКО().Выбрать();
	
	Пока ВыборкаРаботники.Следующий() Цикл
		
		Если ВыборкаРаботники.ВыводитьРКО Тогда
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
			
			ТекстВыдать = "";
			Если ЗначениеЗаполнено(ВыборкаРаботники.Фамилия) Или ЗначениеЗаполнено(ВыборкаРаботники.Имя) Или ЗначениеЗаполнено(ВыборкаРаботники.Отчество) Тогда
				СообщениеОбОшибке = "";
				Если Не УниверсальныеМеханизмы.ПросклонятьФамилиюИмяОтчество(КомпонентаСклоненияФИО, ВыборкаРаботники.Фамилия, ВыборкаРаботники.Имя, ВыборкаРаботники.Отчество, 3,, ТекстВыдать, СообщениеОбОшибке) Тогда
					ttk_ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке);
				КонецЕсли;
			Иначе
				УниверсальныеМеханизмы.Просклонять(КомпонентаСклоненияФИО, ВыборкаРаботники.ФИО, 3,, ТекстВыдать);
			КонецЕсли;
			
			ОбластьМакета.Параметры.ФИОПолучателя = ТекстВыдать;
			ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаРаботники.Сумма, Валюта);
			ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = ?(ВыборкаРаботники.НетДанныхДокумента,"",
						ВыборкаРаботники.ДокументВидНаименование + " серия " +
						ВыборкаРаботники.ДокументСерия       + ", номер " +
						ВыборкаРаботники.ДокументНомер       + ", выдан " +
						Формат(ВыборкаРаботники.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
						СокрЛП(ВыборкаРаботники.ДокументКемВыдан));

			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		Иначе
			
			Если Не ПустаяСтрока(ПредставлениеДокумента) Тогда
				Сообщить("Печать документа " + ПредставлениеДокумента + ":");
				ПредставлениеДокумента = "";
			КонецЕсли;
			
			Сообщить(Символы.Таб + "по строке № " + ВыборкаРаботники.НомерСтроки +  
									ВыборкаРаботники.СостояниеСтроки + ВыборкаРаботники.ПредставлениеДокумента);
		КонецЕсли;
	
	КонецЦикла;

	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		Если Не ПустаяСтрока(ПредставлениеДокумента) Тогда
			Сообщить("Печать документа " + ПредставлениеДокумента + ":");
		КонецЕсли;
		Сообщить(Символы.Таб + "не обнаружено невыданных сумм, помеченных к выплате!");
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьРКО()

// Функция формирует табличный документ с печатной формой Реестр депонированных сумм.
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьРеестр()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплатеОрганизаций_Реестр";
	
	Макет 		= ПолучитьМакет("Реестр");
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечатиРеестраДепонентов().Выбрать();
	
	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	ОбластьМакетаШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогПоСтранице = Макет.ПолучитьОбласть("ИтогПоЛисту");
	ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
	
	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
	
	// выводим данные о руководителях организации
	Пока ВыборкаДляШапки.Следующий() Цикл
		ОбластьМакетаШапкаДокумента.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапкаДокумента.Параметры.НазваниеОрганизации = СокрЛП(ОбластьМакетаШапкаДокумента.Параметры.НазваниеОрганизации);
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаДляШапки);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // подписи
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаШапкаДокумента);
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0; Итого = 0;
    // выводим данные по строкам документа.
	Пока ВыборкаРаботники.Следующий() Цикл
	
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаРаботники);
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			
			ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
			ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ВыведеноСтраниц = ВыведеноСтраниц + 1;
			ИтогоНаСтранице = 0;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		ИтогоНаСтранице = ИтогоНаСтранице + ВыборкаРаботники.Сумма;
		Итого = Итого + ВыборкаРаботники.Сумма;

	КонецЦикла;

	Если ВыведеноСтрок > 0 Тогда 
		ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
	КонецЕсли;
	
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакетаСтрока.Параметры.Количество() Цикл
		ОбластьМакетаСтрока.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакетаСтрока.Параметры.Физлицо = " " + Символы.ПС + " ";
	Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
	ОбластьМакетаПодвал.Параметры.Итого = Итого;
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;
	
КонецФункции // ПечатьРеестр()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДОКУМЕНТА

// Функция возвращает таблицу зарплат физлиц по характеру выплаты документа 
//                  
// Параметры:
//   ФизЛица - массив физлиц, для которых нужно получить зарплату
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ПолучитьЗарплатуПоХарактеруВыплаты(ФизЛица = Неопределено)
	
	ЗарплатаПоХарактеру = ЗарплатаКВыплатеОрганизацийСервис.ПолучитьЗарплатуПоХарактеруВыплаты(ЭтотОбъект, ФизЛица);
	
	ЗарплатаПоХарактеру.Колонки.Добавить("Сумма");
	ЗарплатаПоХарактеру.Колонки.Добавить("Удержано");
	ЗарплатаПоХарактеру.Колонки.Добавить("КомпенсацияЗаЗадержкуЗарплаты");
	
	ЗарплатаПоХарактеру.Сортировать("ФизЛицо");
	
	Начислено = ЗарплатаПоХарактеру.ВыгрузитьКолонку("Начислено");
	ЗарплатаПоХарактеру.ЗагрузитьКолонку(Начислено, "Сумма");
	ЗарплатаПоХарактеру.ЗаполнитьЗначения(0, "Удержано, КомпенсацияЗаЗадержкуЗарплаты");
	
	ЗарплатаПоХарактеру.Индексы.Добавить("ФизЛицо");
	
	Возврат ЗарплатаПоХарактеру;
	
КонецФункции

// Функция возвращает таблицу зарплат, дополненную до указанного списка физлиц
//                  
//
// Параметры:
//   ТаблицаЗарплат - таблица значений с данными о зарплате физлиц
//   ФизЛица - массив физлиц, для которых нужно получить зарплату
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ДополнитьТаблицуЗарплат(ТаблицаЗарплат, ФизЛица)
	
	Для Каждого ФизЛицо Из ФизЛица Цикл
		Если ТаблицаЗарплат.Найти(ФизЛицо, "ФизЛицо") = Неопределено Тогда
			СтрокаЗарплаты = ТаблицаЗарплат.Добавить();
			СтрокаЗарплаты.ФизЛицо = ФизЛицо;
			СтрокаЗарплаты.Начислено = 0;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ТаблицаЗарплат
	
КонецФункции

// Функция выполняет очистику таблицы зарплат от нулевых и отрицательных сумм
//                  
// Параметры:
//   ТаблицаЗарплат - таблица значений с данными о зарплате физлиц
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ФильтроватьТаблицуЗарплат(ТаблицаЗарплат) Экспорт
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаЗарплаты Из ТаблицаЗарплат Цикл
		Если СтрокаЗарплаты.Сумма + СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты <= 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаЗарплаты);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаЗарплаты Из УдаляемыеСтроки Цикл
		ТаблицаЗарплат.Удалить(СтрокаЗарплаты);
	КонецЦикла;

	Возврат ТаблицаЗарплат
	
КонецФункции

// Процедура заполняет ТЧ документа "Зарплата" данными из переданной таблицы значений 
//
// Параметры:
//   ТаблицаЗарплат - таблица значений с данными о зарплате физлиц
//
Процедура ЗаполнитьПоТаблицеЗарплат(ТаблицаЗарплат)
	
	Если ТаблицаЗарплат.Количество() = 0 Тогда
		
		Зарплата.Очистить();
		
	Иначе
		
		// Загружаем отобранные строки в ТЧ документа
		Зарплата.Загрузить(ТаблицаЗарплат);
		
		УпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
		ВыплаченностьЗарплаты = ?(УпрощенныйУчетВзаиморасчетов, Перечисления.ВыплаченностьЗарплаты.Выплачено, Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
		
		// Устанавливаем для ТЧ Зарплата значения по умолчанию
		Для Каждого СтрокаЗарплаты Из Зарплата Цикл
			
			СтрокаЗарплаты.Авторасчет = Истина;
			СтрокаЗарплаты.ВыплаченностьЗарплаты = ВыплаченностьЗарплаты;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьФизлицаДляБанка(Физлица = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛицевыеСчетаРаботниковОрганизации.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
	|ГДЕ
	|	ЛицевыеСчетаРаботниковОрганизации.Организация = &Организация
	|	И ЛицевыеСчетаРаботниковОрганизации.Банк = &Банк
	|	И (&ПоВсемФизлицам
	|			ИЛИ ЛицевыеСчетаРаботниковОрганизации.ФизЛицо В (&Физлица))";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 		Физлица);	
	
	ФизЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
	
	Возврат ФизЛица
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА ДОКУМЕНТА

// Рассчитывает суммы к выплате по документу
//
// Параметры:
//	ТаблицаЗарплат
//
Функция РассчитатьТаблицуЗарплат(ТаблицаЗарплат)
	
	// Предварительный учет удержаний
	Если ПредварительныйУчетУдержаний Тогда
		ФизЛица = ТаблицаЗарплат.ВыгрузитьКолонку("ФизЛицо");
		УдержанияПлан = ЗарплатаКВыплатеОрганизацийСервис.ПолучитьКоэффициентыПлановыхУдержаний(ФизЛица, ПериодРегистрации, Организация);
		УдержанияНДФЛ = ЗарплатаКВыплатеОрганизацийСервис.ПолучитьКоэффициентыНДФЛ(ФизЛица, ПериодРегистрации);
	КонецЕсли;
	
	// Компенсация за задержку выплаты
	Если ДнейНеВыплаты > 0 Тогда
		ПроцентКомпенсации = ЗарплатаКВыплатеОрганизацийСервис.ОпределитьПроцентКомпенсации(Дата, ДнейНеВыплаты);
	КонецЕсли;

	// Округление результатов
	Если ЗначениеЗаполнено(Округление) Тогда
		ТочностьДо = ЗарплатаКВыплатеОрганизацийСервис.СпособОкругленияТочность(Округление);
	КонецЕсли;
	
	НулевыеСтроки = Новый Массив();
	
	Для Каждого СтрокаЗарплаты Из ТаблицаЗарплат Цикл
		
		// Процент выплаты
		Если ПроцентВыплаты <> 100 Тогда
			СтрокаЗарплаты.Начислено = СтрокаЗарплаты.Начислено * ПроцентВыплаты/100;
		КонецЕсли;
		
		СтрокаЗарплаты.Сумма = СтрокаЗарплаты.Начислено;
		
		// Предварительный учет удержаний
		Если ПредварительныйУчетУдержаний Тогда
			СтрокаПлан = УдержанияПлан.Найти(СтрокаЗарплаты.Физлицо, "Физлицо");
			УдерПлан = ?(СтрокаПлан = Неопределено, 0, СтрокаЗарплаты.Сумма * СтрокаПлан.Процент/100);
			
			СтрокаНДФЛ = УдержанияНДФЛ.Найти(СтрокаЗарплаты.Физлицо, "Физлицо");
			УдерНДФЛ = ?(СтрокаНДФЛ = Неопределено, 0, Окр(СтрокаЗарплаты.Сумма * СтрокаНДФЛ.Ставка/100, 0));
			
			СтрокаЗарплаты.Сумма = МАКС(СтрокаЗарплаты.Сумма - (УдерПлан + УдерНДФЛ), 0);
		КонецЕсли;
		
		// Округление результатов
		Если ЗначениеЗаполнено(Округление) Тогда
			СтрокаЗарплаты.Сумма = Окр(СтрокаЗарплаты.Сумма / ТочностьДо, 0) * ТочностьДо;
		КонецЕсли;
		
		СтрокаЗарплаты.Удержано = СтрокаЗарплаты.Начислено - СтрокаЗарплаты.Сумма;
		
		// Компенсация за задержку выплаты
		Если ДнейНеВыплаты > 0 Тогда
			СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты = СтрокаЗарплаты.Сумма * ПроцентКомпенсации
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаЗарплат
	
КонецФункции // РассчитатьЗарплату

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет суммы к выплате по документу
//
Процедура Автозаполнение(ФизЛица = Неопределено) Экспорт
	
	Заголовок = "Расчет документа: " + СокрЛП(ЭтотОбъект);
	
	Отказ = Ложь; // для возврата из процедуры, если проверка покажет, что обязательные реквизиты не заполнены
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ЭтотОбъект, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// При выплате через банк отбираем работников, имеющих в нем счета
	Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		ФизЛица = ПолучитьФизлицаДляБанка(ФизЛица);
		Если ФизЛица.Количество() = 0 Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не найдены лицевые счета сотрудников в банке " +"«"+ СокрЛП(Банк) +"»"+ "!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗарплат = ФильтроватьТаблицуЗарплат(ПолучитьЗарплатуПоХарактеруВыплаты(ФизЛица));

	РассчитатьТаблицуЗарплат(ТаблицаЗарплат);

	ЗаполнитьПоТаблицеЗарплат(ТаблицаЗарплат);
	
КонецПроцедуры // Рассчитать

// Рассчитывает суммы к выплате по документу
//
Процедура Рассчитать(ФизЛица = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ЭтотОбъект, Отказ, "Расчет документа: " + СокрЛП(ЭтотОбъект));

	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если ФизЛица = Неопределено Тогда
		ФизЛица = Зарплата.ВыгрузитьКолонку("Физлицо");
	КонецЕсли;
	
	// берем суммы начисленных зарплат по характеру выплаты
	ТаблицаЗарплат = ДополнитьТаблицуЗарплат(ФильтроватьТаблицуЗарплат(ПолучитьЗарплатуПоХарактеруВыплаты(ФизЛица)), ФизЛица);
	
	РассчитатьТаблицуЗарплат(ТаблицаЗарплат);
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗарплат Цикл
		СтрокаТЧ = Зарплата.Найти(СтрокаТаблицы.ФизЛицо, "ФизЛицо");
		Если СтрокаТЧ <> Неопределено И СтрокаТЧ.Авторасчет Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицы, "Сумма, Начислено, Удержано, КомпенсацияЗаЗадержкуЗарплаты")
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры // Рассчитать

// Функция добавляет указанного работника в ТЧ Зарплата
//
Функция ДобавитьРаботника(ФизЛицо) Экспорт
	
	Добавлен = Ложь;
	
	Если Зарплата.Найти(Физлицо, "ФизЛицо") = Неопределено Тогда
		
		СтрокаТабличнойЧасти = Зарплата.Добавить();
		
		СтрокаТабличнойЧасти.Физлицо = Физлицо;
		СтрокаТабличнойЧасти.Авторасчет = Истина;
		
		УпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
		ВыплаченностьЗарплаты = ?(УпрощенныйУчетВзаиморасчетов, Перечисления.ВыплаченностьЗарплаты.Выплачено, Перечисления.ВыплаченностьЗарплаты.НеВыплачено);

		СтрокаТабличнойЧасти.ВыплаченностьЗарплаты = ВыплаченностьЗарплаты;
		
		Добавлен = Истина;	
		
	КонецЕсли;

	Возврат Добавлен;
	
КонецФункции

Процедура ЗаменаЗначенийКолонкиВыплаченности(ВыбранноеЗначение) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Для каждого СтрокаТЧ Из Зарплата Цикл
			Если СтрокаТЧ.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.НеВыплачено ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ВыплаченностьЗарплаты) Тогда
				СтрокаТЧ.ВыплаченностьЗарплаты = ВыбранноеЗначение
			КонецЕсли;  
		КонецЦикла; 
	Иначе 	
		ТЧ = Зарплата.Выгрузить();
		ТЧ.ЗаполнитьЗначения(ВыбранноеЗначение, "ВыплаченностьЗарплаты");
		Зарплата.Загрузить(ТЧ);
	КонецЕсли; 
	
КонецПроцедуры // ЗаменаЗначенийВТабличнойЧасти()

// Очистка нулевых и отрицательных сумм
//
Процедура УдалитьПустыеСтроки() Экспорт
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаЗарплаты.Физлицо) ИЛИ (СтрокаЗарплаты.Сумма + СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты) <= 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаЗарплаты);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаЗарплаты Из УдаляемыеСтроки Цикл
		Зарплата.Удалить(СтрокаЗарплаты);
	КонецЦикла;

КонецПроцедуры

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Т53" тогда
		
		Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Платежная ведомость Т-53 формируется только при выплате через кассу!");
			Возврат Неопределено;
		КонецЕсли;
		
		Если Зарплата.Количество() > 1 И глЗначениеПеременной("глОграничитьКоличествоСотрудниковПриПечатиВедомости") Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Текущая настройка защиты персональных данных ограничивает количество сотрудников в ведомости, возможно печать ведомости только по одному сотруднику!");
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДокумент = ПечатьТ53();
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Платежная ведомость Т-53 "));
		
	ИначеЕсли ИмяМакета = "Т49" тогда
		
		Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Расчетно-платежная ведомость Т-49 формируется только при выплате через кассу!");
			Возврат Неопределено;
		КонецЕсли;
		
		Если Зарплата.Количество() > 1 И глЗначениеПеременной("глОграничитьКоличествоСотрудниковПриПечатиВедомости") Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Текущая настройка защиты персональных данных ограничивает количество сотрудников в ведомости, возможно печать ведомости только по одному сотруднику!");
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДокумент = ПечатьТ49();
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Платежная ведомость Т-49 "));
		
	ИначеЕсли ИмяМакета = "КО2" тогда
		
		Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			РаботаСДиалогами.ВывестиПредупреждение("РКО формируются только при выплате через кассу!");
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДокумент = ПечатьРКО();
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Расходные кассовые ордера "));
		КонецЕсли;
		
		
	ИначеЕсли ИмяМакета = "Реестр" тогда
		
		Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Реестр депонированных сумм формируется только при выплате через кассу!");
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДокумент = ПечатьРеестр();
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Реестр депонированных сумм "));
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "ПереченьСокр" тогда
		
		Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Список плательщиков в банк формируется только при выплате через банк!");
			Возврат Неопределено;
		КонецЕсли;
		
		// в параметре передается печатемый документ, ведомость (в данном случае одно и то же) и вариант вывода ФИО
		ТабДокумент = ФормированиеПечатныхФормДополнительный.ПечатьСписокПеречислений(Ссылка, Ссылка, Истина); 
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Список плательщиков в банк "));
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "ПереченьПолностью" тогда
		
		Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Список плательщиков в банк формируется только при выплате через банк!");
			Возврат Неопределено;
		КонецЕсли;
		
		// в параметре передается печатемый документ, ведомость (в данном случае одно и то же) вариант вывода ФИО
		ТабДокумент = ФормированиеПечатныхФормДополнительный.ПечатьСписокПеречислений(Ссылка, Ссылка, Ложь); // в параметре передается вариант вывода ФИО
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Список плательщиков в банк "));
		КонецЕсли;
	КонецЕсли;

КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Т53,Т49,КО2,Реестр,ПереченьСокр,ПереченьПолностью","Форма Т-53","Форма Т-49","РКО","Реестр депонированных сумм","Список плательщиков в банк (ФИО сокращенно)", "Список плательщиков в банк (ФИО полностью)");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ttk_ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;	
	
	//АБС+++ Гончаров 16.04.2013
	Если Не абс_ВводПрограммно И Константы.абс_СинхронизацияВыплатыЗарплаты.Получить() И Дата >= Константы.абс_ДатаНачалаСинхронизацииВыплатыЗП.Получить() Тогда
		Отказ = Истина;
		Сообщить("Ввод и корректировка данного документа осуществляеться в ""ИСУЗК""!");
	КонецЕсли;	
	//\\АБС--- Гончаров 16.04.2013	
	
	#Если Клиент ИЛИ ВнешнееСоединение Тогда
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	#Иначе
	ОбработкаКомментариев = "";
	#КонецЕсли

	//АБС+++ Гончаров 16.04.2013
	Если Не абс_WebService_ И Не абс_ВводПрограммно Тогда	
	//\\АБС--- Гончаров 16.04.2013
	
		ОбработкаКомментариев.УдалитьСообщения();
	
	//АБС+++ Гончаров 16.04.2013
	КонецЕсли;	
	//\\АБС--- Гончаров 16.04.2013
	
	// Нельзя отменять проведение документа, переданного для оплаты
	Если НЕ ОбменДанными.Загрузка И НЕ ПометкаУдаления И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если ЗарплатаКВыплатеОрганизацийПереопределяемый.ПолучитьДокументыНаОснованииЗарплатаКВыплате(Ссылка).Количество()  > 0 Тогда
			
			// Заголовок для сообщений об ошибках записи.
			Заголовок = "Отмена проведения документа: " + СокрЛП(Ссылка);
			
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Документ оплачен, отмена проведения невозможна!", Отказ, Заголовок);
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Зарплата.Итог("Сумма") + Зарплата.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Зарплата);
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//АБС+++ Гончаров 16.04.2013
	Если Не абс_ВводПрограммно И Константы.абс_СинхронизацияВыплатыЗарплаты.Получить() И Дата >= Константы.абс_ДатаНачалаСинхронизацииВыплатыЗП.Получить() Тогда
		Отказ = Истина;
	КонецЕсли;	
	//\\АБС--- Гончаров 16.04.2013
	
	//АБС+++ Гончаров 16.04.2013
	Если Не абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.Рассчитан ИЛИ Не абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.КОплате
		ИЛИ Не абс_Статус = Перечисления.абс_СтатусыВыплатыЗарплаты.Завершен И Константы.абс_СинхронизацияВыплатыЗарплаты.Получить()
		 И Дата >= Константы.абс_ДатаНачалаСинхронизацииВыплатыЗП.Получить() Тогда
		Возврат;
	КонецЕсли;	
	//\\АБС--- Гончаров 16.04.2013
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	
	//АБС+++ Гончаров 16.04.2013
	Если Не абс_WebService_ И Не абс_ВводПрограммно Тогда	
	//\\АБС--- Гончаров 16.04.2013
	
	ОбработкаКомментариев.УдалитьСообщения();
	
	//АБС+++ Гончаров 16.04.2013
	КонецЕсли;	
	//\\АБС--- Гончаров 16.04.2013	
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ЭтотОбъект, Отказ, Заголовок);
	
	УпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
	
	Если Не Отказ Тогда
		
		// Надо проверить табличную часть
		Для Каждого СтрокаЗарплаты Из Зарплата Цикл
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиЗарплаты(СтрокаЗарплаты, УпрощенныйУчетВзаиморасчетов, Отказ, Заголовок);
		КонецЦикла;
		
	КонецЕсли;
		
	Если НЕ Отказ Тогда
		ЗарплатаКВыплатеОрганизацийСервис.ПровестиПоХарактеруВыплаты(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ Отказ И УпрощенныйУчетВзаиморасчетов Тогда
		Для Каждого СтрокаЗарплаты Из Зарплата Цикл
			
			СтрокаДвижения = Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьРасход();
			
			СтрокаДвижения.Период       		= Дата;
			
			СтрокаДвижения.Организация			= Организация;
			СтрокаДвижения.Физлицо		 		= СтрокаЗарплаты.Физлицо;
			СтрокаДвижения.ПериодВзаиморасчетов	= ПериодРегистрации;
			
			СтрокаДвижения.СуммаВзаиморасчетов	= СтрокаЗарплаты.Сумма;
			
			СтрокаДвижения.ХарактерВыплаты		= ХарактерВыплаты;
			СтрокаДвижения.Ведомость     		= Ссылка;
			СтрокаДвижения.СпособВыплаты		= СпособВыплаты; 
			
			Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу И СтрокаЗарплаты.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Задепонировано Тогда
				
				СтрокаДвижения = Движения.ВзаиморасчетыСДепонентамиОрганизаций.ДобавитьПриход();
				
				СтрокаДвижения.Период				= Дата;
				
				СтрокаДвижения.Организация			= Организация;
				СтрокаДвижения.Физлицо		 		= СтрокаЗарплаты.Физлицо;
				СтрокаДвижения.Ведомость			= Ссылка;
				
				// Ресурсы
				СтрокаДвижения.Сумма				= СтрокаЗарплаты.Сумма + СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты; 
				
			КонецЕсли;	
			
			СтрокаДвижения = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
			
			СтрокаДвижения.ФизЛицо   = СтрокаЗарплаты.ФизЛицо;
			СтрокаДвижения.Ведомость = Ссылка;

		КонецЦикла;	
		
		// По регистру расчетов с бюджетом по НДФЛ
		ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		
		СтруктураДокумента = Новый Структура("ДатаНДФЛ,Ссылка,Период,ОбособленноеПодразделение,Организация",КонецМесяца(ПериодРегистрации),Ссылка,Дата,Организация,ГоловнаяОрганизация);
		
		ТекстТаблицыВыплаты = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплате.Физлицо КАК ФизЛицо,
		|	СУММА(ЗарплатаКВыплате.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТВыплатыФизлицам
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
		|ГДЕ
		|	ЗарплатаКВыплате.Ссылка = &ДокументСсылка
		|	И (ЗарплатаКВыплате.Ссылка.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
		|			ИЛИ ЗарплатаКВыплате.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|			ИЛИ ЗарплатаКВыплате.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплате.Физлицо
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗарплатаКВыплате.Сумма) <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";
		
		ПроведениеРасчетовПереопределяемый.СформироватьРасчетыПоНДФЛПриВыплате(СтруктураДокумента, ТекстТаблицыВыплаты, Движения.НДФЛРасчетыСБюджетом);
		
	КонецЕсли;	
	
	//АБС+++ Гончаров 16.04.2013
	Если Не абс_WebService_ И Не абс_ВводПрограммно Тогда	
	//\\АБС--- Гончаров 16.04.2013
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	//АБС+++ Гончаров 16.04.2013
	КонецЕсли;	
	//\\АБС--- Гончаров 16.04.2013
	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если Основание = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Если Основание.Свойство("ПредварительныйУчетУдержаний",) Тогда
			ДокОснование = Основание.Ссылка;
			УчетУдержаний= Основание.ПредварительныйУчетУдержаний;
		Иначе
			Возврат;			
		КонецЕсли;
		
	Иначе
		ДокОснование = Основание;
		УчетУдержаний= Ложь;
	КонецЕсли;
	
	ХарактерВыплаты	= ЗарплатаКВыплатеОрганизацийПереопределяемый.ХарактерВыплатыПоДокументу(ДокОснование);
	Если ХарактерВыплаты = НеОпределено Тогда
		Возврат
	КонецЕсли;	
	
	// Общие реквизиты
	ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, ДокОснование);
	Дата = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.НДФЛВозвратНалога") Тогда
		ПериодРегистрации = ДокОснование.МесяцНалоговогоПериода;
	Иначе
		ПериодРегистрации = ДокОснование.ПериодРегистрации;
	КонецЕсли;
	
	// Настройки расчета
	#Если Клиент Тогда
		ЗарплатаКВыплатеОрганизацийСервис.ЗаполнитьПоНастройкам(ЭтотОбъект);
	#Иначе
		НастройкиЗаполнения = ЗарплатаКВыплатеОрганизацийСервис.СоздатьНастройки();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиЗаполнения);
	#КонецЕсли
	
	СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
	ДокументОснование = ДокОснование;
	
	ПредварительныйУчетУдержаний = УчетУдержаний;
	ДнейНеВыплаты = 0;
	
	Автозаполнение();
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	//АБС+++ Гончаров 16.04.2013
	Если Константы.абс_СинхронизацияВыплатыЗарплаты.Получить() И Дата >= Константы.абс_ДатаНачалаСинхронизацииВыплатыЗП.Получить() Тогда
		Отказ = Истина;
		Сообщить("Ввод и корректировка данного документа осуществляеться в ""ИСУЗК""!");
	КонецЕСли;	
	//\\АБС--- Гончаров 16.04.2013
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	//АБС+++ Гончаров 16.04.2013
	Если Не абс_ВводПрограммно И Константы.абс_СинхронизацияВыплатыЗарплаты.Получить() И Дата >= Константы.абс_ДатаНачалаСинхронизацииВыплатыЗП.Получить() Тогда
		Отказ = Истина;
		Сообщить("Ввод и корректировка данного документа осуществляеться в ""ИСУЗК""!");
	КонецЕсли;	
	//\\АБС--- Гончаров 16.04.2013
КонецПроцедуры

//АБС+++ Гончаров 16.04.2013
абс_ВводПрограммно = Ложь;
абс_WebService_ = Ложь;
//\\АБС--- Гончаров 16.04.2013
