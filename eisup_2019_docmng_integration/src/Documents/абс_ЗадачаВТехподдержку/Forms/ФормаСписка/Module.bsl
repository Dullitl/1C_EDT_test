//АБС Шамов
Перем мОрганизацииДляОтчета;
//\\АБС Шамов

&НаКлиенте
Процедура СменитьСтатус(Команда)
	
	СтрокаСтатуса = Неопределено;
	Отказ = Ложь;
	СписокДокументов = Новый СписокЗначений;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		СписокДокументов.Добавить(ВыделеннаяСтрока.Ссылка);
		Если не СтрокаСтатуса = Неопределено Тогда
			Отказ = Отказ или не СтрокаСтатуса = ВыделеннаяСтрока.Ссылка.Статус;
		КонецЕсли;
		СтрокаСтатуса = ВыделеннаяСтрока.Ссылка.Статус; 	
	КонецЦикла;
	
	Если Отказ Тогда
		Сообщить("Выбранные документы имеют разный статус.
		|Для группового изменения статуса нужно выбрать документы одного статуса.",СтатусСообщения.Важное); 		
		Возврат;	
	КонецЕсли;	
	
	Если не ЗначениеЗаполнено(СтрокаСтатуса) или не ЗначениеЗаполнено(СписокДокументов) Тогда		
		Возврат;	
	КонецЕсли;
	
	СписокДоступныхСтатусов = Новый СписокЗначений; 
	Документы.абс_ЗадачаВТехподдержку.ЗаполнитьСписокДоступныхСтатусов(СписокДокументов[0].Значение, СписокДоступныхСтатусов);
	ФормаВыбораСтатуса = Документы.абс_ЗадачаВТехподдержку.ПолучитьФорму("ФормаГрупповогоВыбораСтатуса");	
	ФормаВыбораСтатуса.ЭлементыФормы.ВыбСтатус.СписокВыбора = СписокДоступныхСтатусов;
	ФормаВыбораСтатуса.ЭлементыФормы.ВыбСтатус.Значение 	= СтрокаСтатуса;	
	ФормаВыбораСтатуса.СписокПервичныхДокументов.ЗагрузитьЗначения(СписокДокументов.ВыгрузитьЗначения());
	
	РезультатВыбораСтатуса = ФормаВыбораСтатуса.ОткрытьМодально();	
	Если РезультатВыбораСтатуса = Неопределено 
		или РезультатВыбораСтатуса.СписокДокументов.Количество() = 0  
		или РезультатВыбораСтатуса.НовыйСтатус = СтрокаСтатуса Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьСтатусСпискаДокументов(РезультатВыбораСтатуса.СписокДокументов
									,РезультатВыбораСтатуса.ПричинаСменыСтатуса
									,РезультатВыбораСтатуса.НовыйСтатус);	
	
КонецПроцедуры   

&НаСервере
Процедура ИзменитьСтатусСпискаДокументов(СписокДокументов,ПричинаИзмененияСтатуса,НовыйСтатус)
	
	Для Каждого СтрокаДокументов Из СписокДокументов Цикл
				
		// Изменим текущий статус		
		ДокументСсылка = СтрокаДокументов.ПервичныйДокумент;  
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			Продолжить;
		КонецЕсли;	
		
		ДокументОбъект 			    = ДокументСсылка.ПолучитьОбъект();			
		СтарыйСтатус 			    = ДокументОбъект.Статус;		
		ДокументОбъект.Статус	    = НовыйСтатус;  
		ДокументОбъект.Исполнитель	= СтрокаДокументов.Исполнитель;
		ДокументОбъект.ПричинаИзмененияСтатуса = ПричинаИзмененияСтатуса;
		
		Попытка 
			ДокументОбъект.Записать();  			
			Сообщить("Первичный документ: " + ДокументСсылка + " переведен в статус " + НовыйСтатус + ".");
		Исключение			
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Первичный документ: " + ДокументСсылка + ": не удалось установить статус " + НовыйСтатус + ".");
		КонецПопытки;
		
	КонецЦикла;	 	
	  	
КонецПроцедуры
//АБС Шамов
&НаКлиенте
Процедура ПриОткрытии(Отказ)

	//// 	// блокировка ввода новых заявок 
	////Если Параметры.Ключ.Пустая() Тогда
	//////Если ЗначениеЗаполнено(Объект.Ссылка) ТОгда
		Если ТекущаяДата() >= '20160111' Тогда
			Если РольДоступна("ПолныеПрава") Тогда
				// а мы особенные
				
				Режим = РежимДиалогаВопрос.ДаНет;
				Текст = "ru = ""Новые заявки создавать нельзя, но Вы особенный... Действительно создать новую заявку?"";"
				+ " en = ""Do you want to continue?""";
				Ответ = Вопрос(НСтр(Текст), Режим, 0);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					// отказался, значит и ему нельзя
	              	Отказ = Истина;
					Возврат;
				КонецЕсли;
				
			Иначе
				// всем запрещено вводить
				Сообщить("Ввод новых заявок на поддержку по ЕИСУП и ИСУЗК заблокирован. Новые заявки следует создавать в SD.ttk.ru" );
				Предупреждение("Ввод новых заявок на поддержку по ЕИСУП и ИСУЗК заблокирован. Новые заявки следует создавать в SD.ttk.ru",20);
				Отказ = Истина;
				Возврат;  
			КонецЕсли; 
			Если Отказ Тогда
				Возврат;	
			КонецЕсли;
		КонецЕсли;
	//КонецЕсли;

	
	
	Элементы.ОтчетПоЗаявкам.Видимость = ПроверкаДоступностиОтчетаПоЗаявкам();
	
КонецПроцедуры

&НаСервере
Функция ПроверкаДоступностиОтчетаПоЗаявкам(ОрганизацииОтбор = Неопределено)
	
	ОрганизацииОтбор = Новый СписокЗначений;
	
	Если СокрЛП(ПараметрыСеанса.ТекущийПользователь.Наименование) = "Сотник Вячеслав Анатольевич" ТОгда
		//ему можно всё
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИИсполнители.Организация КАК Организация
		|ПОМЕСТИТЬ втОрганизацииИсполнителя
		|ИЗ
		|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|ГДЕ
		|	РолиИИсполнители.Исполнитель = &Исполнитель
		|	И РолиИИсполнители.Роль = &Роль
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОрганизацииИсполнителя.Организация
		|ИЗ
		|	втОрганизацииИсполнителя КАК втОрганизацииИсполнителя";

	Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Роль", Справочники.РолиИсполнителей.ДирМФС);

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() ТОгда
		//есть роль ДирМФС
		ОрганизацииОтбор.Очистить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		//заполним список организаций, по которым есть доступ
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НЕ ВыборкаДетальныеЗаписи.Организация.Пустая() Тогда
				ОрганизацииОтбор.Добавить(ВыборкаДетальныеЗаписи.Организация);		
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОтчетПоЗаявкам(Команда)
	
	ОрганизацииОтбор = Неопределено;
	ПроверкаДоступностиОтчетаПоЗаявкам(ОрганизацииОтбор);
	
	ОтчетОбъект = Отчеты.абс_ОтчетПоЗаявкам.Создать();
	ОтчетОбъект.ОрганизацииОтбор = ОрганизацииОтбор;
	ОтчетОбъект.ПолучитьФорму("Отчет.абс_ОтчетПоЗаявкам.Форма.ФормаОтчета").Открыть();
	
КонецПроцедуры
//\\АБС Шамов
