
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мРольАБСДоступна = РольДоступна("абс");
	
	ЗаполнитьСписокДоступныхСтатусов();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 		
		Объект.Статус 					= Перечисления.абс_СтатусыЗаявокВПоддержку.Подготовка;
		Объект.Инициатор 				= глЗначениеПеременной("глТекущийПользователь"); 		
		Объект.Организация				= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Объект.Инициатор, "ОсновнаяОрганизация");  		
		Объект.Исполнитель				= Справочники.Пользователи.ПустаяСсылка();
		Объект.ВключенаВПланРабот 		= Ложь;		
		Объект.ПлановаяДатаВыполнения	= Неопределено; 		
		Объект.ТекстОтвета				= "";
		Объект.Дата 					= ТекущаяДата();    		
		Объект.Исполнители.Очистить();
		Объект.СтарыйСтатус             = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.ПустаяСсылка");
		Объект.ДатаПоследнегоСтатуса    = Дата(1,1,1);
		Объект.ПричинаИзмененияСтатуса  = "";
		Объект.ПлановаяДатаВыполнения   = Дата(1,1,1);	
		Если Объект.ТипЗаявки = Перечисления.абс_ТипЗаявкиВПоддержку.ГарантийнаяРабота Тогда 
			Объект.ТипЗаявки = Перечисления.абс_ТипЗаявкиВПоддержку.Проблема;
		КонецЕсли;		
	КонецЕсли;
	
	мСтатус = Объект.Статус;
	мДатаВозможногоТестирования = Объект.ДатаВозможногоТестирования;
	мСтатусСсылки = Объект.Ссылка.Статус;
	
	Если мРольАБСДоступна Тогда
		мИсполнители.Загрузить(Объект.Исполнители.Выгрузить());
	КонецЕсли;
	
	Элементы.Исполнители.ТолькоПросмотр = Ложь;  	
	УстановитьВидимостьДоступностьРеквизитов();   	
	УстановитьРежимПросмотраДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхСтатусов()
	
	Документы.абс_ЗадачаВТехподдержку.ЗаполнитьСписокДоступныхСтатусов(Объект.Ссылка, Элементы.Статус.СписокВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Документы.абс_ЗадачаВТехподдержку.ЗаполнитьСписокДоступныхСтатусов(Объект.Ссылка, Элементы.Статус.СписокВыбора);
	
	УстановитьВидимостьДоступностьРеквизитов();
	
	УстановитьРежимПросмотраДокумента();
	
	мСтатусСсылки = Объект.Ссылка.Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	
	
	//АБС ВСТАВКА №15584 НАЧАЛО
	Если Элементы.ГруппаПараметры.Видимость Тогда
		Для каждого Стр Из Объект.Параметры Цикл
			Если НЕ ТипЗнч(Стр.ЗначениеПараметра) = Тип("Булево") и НЕ ЗначениеЗаполнено(Стр.ЗначениеПараметра) Тогда 
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен параметр «"+Стр.ИмяПараметра+"» на закладке «параметры»!", Отказ);				
			КонецЕсли;	
		КонецЦикла;	
		Если Отказ Тогда
			Возврат;	
		КонецЕсли;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №15584 КОНЕЦ
	
	//АБС ВСТАВКА №13163 НАЧАЛО
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.АнализДирМФС") Тогда  		
		Слова = "";
		ПроверитьСодержаниеЗаявки(Отказ,Слова);	 		
		Если Отказ Тогда     			
			Сообщить("В тексте вопроса обнаружены слова <"+Слова+"> - необходимо переоформить вопрос в более содержательной форме.",СтатусСообщения.Важное);	  			
			Возврат;   		
		КонецЕсли;			
	КонецЕсли;	
	//\\АБС ВСТАВКА №13163 КОНЕЦ
	
	//АБС ВСТАВКА №14399 НАЧАЛО
	Если НЕ ЗначениеЗаполнено(Объект.КлассификацияПроблемы) и НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле ""Вид проблемы"", документ не записан!", Отказ);	  			
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №14399 КОНЕЦ
	
	//АБС ВСТАВКА №24932 НАЧАЛО
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.ОжидаетТестирования") и не ЗначениеЗаполнено(Объект.ДатаВозможногоТестирования) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле ""Дата возможного тестирования"", документ не записан!", Отказ);	  			
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №24932 КОНЕЦ	
	
	Объект.ПричинаИзмененияСтатуса = "";
	Если СпрашиватьПричинуИзмененияСтатуса() Тогда
		ВвестиСтроку(Объект.ПричинаИзмененияСтатуса, "Введите причину изменения статуса",,Истина);		
		// АБС ВСТАВКА Вводим номера телефонов
		абс_БизнесПроцессыКлиент.ВвестиВнутреннийНомерТелефона(ПолучитьДанныеПользователя());     		
	КонецЕсли;   
	
	Если (Объект.Ссылка.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.Уточнение") 
		или Объект.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.ОшибкаТестирования")
		или Объект.Ссылка.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.ДополнительноеСогласование")) 
		и Объект.ПричинаИзмененияСтатуса = "" 
		и СпрашиватьПричинуИзмененияСтатуса() Тогда
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ввод причины изменения статуса обязателен, документ не записан!", Отказ);
		Возврат;
		
	//АБС ВСТАВКА №37974 НАЧАЛО «23 января 2014 г.», Пополитов  	
	ИначеЕсли (Объект.Ссылка.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.Уточнение") 
		или Объект.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.ОшибкаТестирования")
		или Объект.Ссылка.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.ДополнительноеСогласование")) 
		и Объект.ПричинаИзмененияСтатуса <> "" 
		и СпрашиватьПричинуИзмененияСтатуса() Тогда
		
		ОшибкаТестирования = Объект.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.ОшибкаТестирования");
		
		Объект.ТекстВопроса = СокрЛП(Объект.ТекстВопроса) 
								+ Символы.ПС + Символы.ПС + "----------------- " 
								+ СокрЛП(?(ОшибкаТестирования,Объект.Статус,Объект.Ссылка.Статус)) + " от " 
								+ Формат(абс_СерверныеФункции.ПолучитьДатуСервера(), "ДЛФ=DD")+ " -----------------"
								+ Символы.ПС + СокрЛП(Объект.ПричинаИзмененияСтатуса);
	ИначеЕсли Объект.Ссылка.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.ОшибкаТестирования") 
		и Объект.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.Исполнение") Тогда
		
		Объект.ТекстОтвета = СокрЛП(Объект.ТекстОтвета) 
								+ Символы.ПС + Символы.ПС + "----------------- " 
								+ СокрЛП(Объект.Статус) + " от " 
								+ Формат(абс_СерверныеФункции.ПолучитьДатуСервера(), "ДЛФ=DD")+ " -----------------"
								+ Символы.ПС + СокрЛП(Объект.ПричинаИзмененияСтатуса);								
	//\\АБС ВСТАВКА №37974 КОНЕЦ	
	КонецЕсли;	 
	
	Если Объект.ТипЗаявки = ПредопределенноеЗначение("Перечисление.абс_ТипЗаявкиВПоддержку.НезавершеннаяЗаявка")
		или Объект.ТипЗаявки = ПредопределенноеЗначение("Перечисление.абс_ТипЗаявкиВПоддержку.ДополнениеКЗаявке") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.НезавершеннаяЗаявка) Тогда
			Сообщить("Не выбрана заявка-основание.",СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		Если не Объект.ТипЗаявки = ПредопределенноеЗначение("Перечисление.абс_ТипЗаявкиВПоддержку.ГарантийнаяРабота") Тогда
			Объект.НезавершеннаяЗаявка = Неопределено;
		КонецЕсли;
	КонецЕСли;
	           	    	
	Если мРольАБСДоступна Тогда	
		Объект.Исполнители.Очистить();		
		Для Каждого мСтрИСполнитель Из мИсполнители Цикл 			
			СтрИсполнитель = Объект.Исполнители.Добавить(); 			
			СтрИсполнитель.Исполнитель = мСтрИсполнитель.Исполнитель;	
			СтрИсполнитель.РасшифровкаИсполнителя = мСтрИсполнитель.РасшифровкаИсполнителя;
			СтрИсполнитель.Часов = мСтрИсполнитель.Часов;
			СтрИсполнитель.Период = мСтрИсполнитель.Период;
			СтрИсполнитель.РасшифровкаРабот = мСтрИСполнитель.РасшифровкаРабот; 				
		КонецЦикла;
	КонецЕсли;	
	
	Объект.ИмяПК = ИмяКомпьютера(); 	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПользователя() 
	
	СтруктураПользователя = Новый Структура("Пользователь, ВнутреннийНомер");
	
	СтруктураПользователя.Пользователь 		= глЗначениеПеременной("глТекущийПользователь");
	СтруктураПользователя.ВнутреннийНомер 	= СтруктураПользователя.Пользователь.абс_ВнутреннийНомер;
	
	Возврат СтруктураПользователя;
	
КонецФункции

&НаСервере
Функция СпрашиватьПричинуИзмененияСтатуса()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат НЕ Объект.Статус = Объект.Ссылка.Статус;
	
КонецФункции

&НаСервере
Процедура УстановитьРежимПросмотраДокумента()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	//АБС ПОПОВ Оптимизация бизнес процессов и задач
	
	Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
		ТолькоПросмотр = Ложь;    		
		Элементы.Статус.ТолькоПросмотр = Ложь; 		
		Элементы.ЗаписатьИЗакрыть.Доступность 	= Истина;
		Элементы.Записать.Доступность 			= Истина;
		
	Иначе
		//\\АБС Попов
		ТекСтатус = Объект.Ссылка.Статус;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	абс_ТаблицаСтатусовБПТТК.РедактированиеДокумента,
		|	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса
		|ИЗ
		|	РегистрСведений.абс_ТаблицаСтатусовБПТТК КАК абс_ТаблицаСтатусовБПТТК
		|ГДЕ
		|	абс_ТаблицаСтатусовБПТТК.ВидБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.ЗаявкиВПоддержку)
		|	И абс_ТаблицаСтатусовБПТТК.Статус = &ТекСтатус");
		
		Запрос.УстановитьПараметр("ТекСтатус", ТекСтатус);
		
		РазрешеноРедактирование 		= Ложь;
		РазрешеноМенятьСтатус 			= Ложь;
		
		Выборка = Запрос.Выполнить().Выбрать();    		
		Пока Выборка.Следующий() Цикл
			Если НЕ мРолиПользователя.Найти(Выборка.ОтветственныйЗаИзменениеСтатуса) = Неопределено Тогда
				РазрешеноМенятьСтатус = Истина
			КонецЕсли;          			
			РазрешеноРедактирование = РазрешеноРедактирование ИЛИ Выборка.РедактированиеДокумента;
		КонецЦикла; 		
		
		// Добавили определение ответственных лиц по ответственным в подразделениях
		// поэтому не проверяем их по ролям пользователей.
		
		Если ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.Подготовка Тогда	
			РазрешеноМенятьСтатус = Истина;
		Иначе
			РазрешеноМенятьСтатус = Ложь;
		КонецЕсли;
		
		// Если есть задачи текущему пользователю, то ему разрешено изменить статус
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка
		|ИЗ
		|	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(
		|			&ТекПользователь,
		|			БизнесПроцесс.ЗадачаВПоддержку = &ЗаявкаСсылка
		|				И Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю");
		
		Запрос.УстановитьПараметр("ТекПользователь"		, мТекущийПользователь);
		Запрос.УстановитьПараметр("ЗаявкаСсылка"		, Объект.Ссылка);
		
		ВыборкаЗадач = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаЗадач.Следующий() Тогда  			
			РазрешеноМенятьСтатус = Истина; 			
		КонецЕсли;	 
		
		Если (Объект.Ссылка.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Уточнение ИЛИ
			Объект.Ссылка.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Отказ ИЛИ
			Объект.Ссылка.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОжидаетТестирования ИЛИ
			Объект.Ссылка.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ТестированиеИнициатором) И
			(Объект.Ссылка.Инициатор = мТекущийПользователь ИЛИ
			НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда 			
			РазрешеноМенятьСтатус = Истина;
		КонецЕсли;
		
		Если (Объект.Ссылка.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ДополнительноеСогласование
			и Объект.Ссылка.СотрудникДополнительногоСогласования = мТекущийПользователь) 
			или не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда  		 
			РазрешеноМенятьСтатус = Истина;
		КонецЕсли;	
		
		//АБС ВСТАВКА №40079 НАЧАЛО «28 марта 2014 г.», Пополитов
		Если мТекущийПользователь = Объект.Инициатор Тогда 			
			РазрешеноМенятьСтатус = Истина;
		КонецЕсли;	
		//\\АБС ВСТАВКА №40079 КОНЕЦ 	
		
		// Установим необходимый вид просмотра документа
		Если НЕ РазрешеноРедактирование Тогда 		
			ТолькоПросмотр = Истина;		
		Иначе   		
			ТолькоПросмотр = Ложь;		
		КонецЕсли;   	
		
		РазрешеноЗаписатьДокумент = (РазрешеноРедактирование ИЛИ РазрешеноМенятьСтатус); 	
		Элементы.Статус.ТолькоПросмотр = НЕ РазрешеноМенятьСтатус;    	
		Элементы.ЗаписатьИЗакрыть.Доступность 	= РазрешеноЗаписатьДокумент;
		Элементы.Записать.Доступность 			= РазрешеноЗаписатьДокумент;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Элементы.Статус.СписокВыбора.НайтиПоЗначению(мСтатус) = Неопределено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Выбран неверный статус.");  		
		мСтатус = Объект.Статус;
		Возврат;
	КонецЕсли;
		
	Если НЕ мСтатусСсылки = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.Уточнение") или НЕ ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		ПользователиИсполнители = ПолучитьСписокИсполнителейЗаявки(); 		
		Если НЕ ПользователиИсполнители = Неопределено Тогда  			
			ПользовательИсполнитель = ПользователиИсполнители.ВыбратьЭлемент("Выберите исполнителя для работы с заявкой."); 			
			Если НЕ ПользовательИсполнитель = Неопределено Тогда
				Объект.Исполнитель = ПользовательИсполнитель.Значение;
			Иначе
				мСтатус = Объект.Статус;
				Возврат;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	//Если Объект.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.Уточнение") Тогда
	//	Сообщить("Переведенная заявка из статуса ""Уточнение"" без комментария будет ЗАКРЫТА!!!",СтатусСообщения.Важное);
	//КонецЕсли;	
	//Если мСтатус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.ОшибкаТестирования") Тогда
	//	Сообщить("Переведенная заявка в статус ""Ошибка тестирования"" без комментария будет ЗАКРЫТА!!!",СтатусСообщения.Важное);
	//КонецЕсли;	
	
	//АБС ВСТАВКА №39121 НАЧАЛО «20 февраля 2014 г.», Пополитов
	Если мСтатус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.ДополнительноеСогласование") и не ЗначениеЗаполнено(Объект.СотрудникДополнительногоСогласования) Тогда
		ПользователиИсполнители = ПолучитьСписокИнициаторовЗаявки(); 		
		Если не ПользователиИсполнители = Неопределено Тогда  			
			ПользовательИсполнитель = ПользователиИсполнители.ВыбратьЭлемент("Выберите сотрудника для дополнительного согласования заявки."); 			
			Если НЕ ПользовательИсполнитель = Неопределено Тогда
				Объект.СотрудникДополнительногоСогласования = ПользовательИсполнитель.Значение;
			Иначе
				мСтатус = Объект.Статус;
				Возврат;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
 	//\\АБС ВСТАВКА №39121 КОНЕЦ  	
	
	Объект.Статус = мСтатус; 	
	УстановитьВидимостьДоступностьНаКлиенте();
	
КонецПроцедуры  

&НаСервере
Функция ПолучитьСписокИсполнителейЗаявки()
	    // Start КТТК Ермолов Е.Л.  21.07.2015 Повторяющиеся исполнители и ненужные исполнители АБС
		Организация = Неопределено;
		СписокРолей = Новый СписокЗначений;
		СписокРолей.Добавить(Справочники.РолиИсполнителей.ИсполнительЗаявкиНаПоддержку);
		Если мСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение и Не ЗначениеЗаполнено(Объект.Задача) Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				                      |	РолиИИсполнители.Исполнитель КАК Исполнитель
				                      |ИЗ
				                      |	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
				                      |ГДЕ
				                      |	РолиИИсполнители.Роль В(&СписокРолей)
				                      |	И ВЫБОР
				                      |			КОГДА &ОтборПоОрганизации
				                      |				ТОГДА РолиИИсполнители.Организация = &Организация
				                      |			ИНАЧЕ ИСТИНА
				                      |		КОНЕЦ
				                      |	И ПОДСТРОКА(РолиИИсполнители.Исполнитель.Наименование, 1, 3) <> ""АБС ""
				                      |			И ПОДСТРОКА(РолиИИсполнители.Исполнитель.Наименование, 1, 8) <> ""Калымкин""
				                      |			И ПОДСТРОКА(РолиИИсполнители.Исполнитель.Наименование, 1, 6) <> ""Павлов""
				                      |			И ПОДСТРОКА(РолиИИсполнители.Исполнитель.Наименование, 1, 13) <> ""Поддержка НСИ""
				                      |
				                      |УПОРЯДОЧИТЬ ПО
				                      |	Исполнитель");
							  
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ОтборПоОрганизации", НЕ Организация = Неопределено);
							  
		Запрос.УстановитьПараметр("СписокРолей", СписокРолей);
		
		СписокПользователиИсполнители = Новый СписокЗначений;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СписокПользователиИсполнители.Добавить(Выборка.Исполнитель);
		КонецЦикла;
	

		//СписокПользователиИсполнители = абс_БизнесПроцессы.ПолучитьПользователейРоли(Справочники.РолиИсполнителей.ИсполнительЗаявкиНаПоддержку);  		
		// Stop КТТК Ермолов Е.Л.  21.07.2015
		Возврат СписокПользователиИсполнители;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокИнициаторовЗаявки()
	
	Если мСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.ДополнительноеСогласование и Не ЗначениеЗаполнено(Объект.Задача) Тогда  		
		СписокПользователиИсполнители = абс_БизнесПроцессы.ПолучитьПользователейРоли(Справочники.РолиИсполнителей.ИнициаторЗаявкиВПоддержку, ?(Объект.Организация.Пустая(), Неопределено, Объект.Организация));  		
		Возврат СписокПользователиИсполнители; 		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	Попытка
		Записать();
	Исключение
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьРеквизитов()
	
	мТекущийПользователь 	= глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя 		= абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	Элементы.Дата.ТолькоПросмотр 	= Истина;
	Элементы.Номер.ТолькоПросмотр	= Истина;
	
	ВидимостьРеквизитовИсполнителя = ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.Исполнитель			.Видимость = ВидимостьРеквизитовИсполнителя;
	Элементы.ВключенаВПланРабот		.Видимость = ВидимостьРеквизитовИсполнителя;
	Элементы.ПлановаяДатаВыполнения	.Видимость = ВидимостьРеквизитовИсполнителя;
	
	Если мРолиПользователя.Найти(ПредопределенноеЗначение("Справочник.РолиИсполнителей.ИсполнительЗаявкиНаПоддержку")) = Неопределено Тогда
		
		Элементы.Исполнитель			.ТолькоПросмотр = Истина;
		Элементы.ВключенаВПланРабот		.ТолькоПросмотр = Истина;
		Элементы.ПлановаяДатаВыполнения	.ТолькоПросмотр = Истина;
		Элементы.ТекстОтвета			.ТолькоПросмотр = Истина;
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыЗаявокВПоддержку.Подготовка") Тогда
			Элементы.ТекстВопроса		.ТолькоПросмотр = Ложь;
			Элементы.ТекстВопроса		.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.ТекстВопроса 		.ТолькоПросмотр = Истина;
			Элементы.ТекстВопроса		.ТолькоПросмотр = Истина;
		КонецЕсли;		
	КонецЕсли;
	
	Если мРолиПользователя.Найти(ПредопределенноеЗначение("Справочник.РолиИсполнителей.ДирМФС")) = Неопределено Тогда //АБС-Пр2 11522
		Элементы.Приоритет.ТолькоПросмотр = Истина;
	КонецЕсли; //-
	
	Элементы.НезавершеннаяЗаявка.Видимость = Объект.ТипЗаявки = Перечисления.абс_ТипЗаявкиВПоддержку.НезавершеннаяЗаявка
											 или Объект.ТипЗаявки = Перечисления.абс_ТипЗаявкиВПоддержку.ДополнениеКЗаявке
											 или Объект.ТипЗаявки = Перечисления.абс_ТипЗаявкиВПоддержку.ГарантийнаяРабота;
											 
	Элементы.ГруппаПараметры.Видимость = ПроверкаВидимостиПараметров(); 											 
											 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаКлиенте()
	
	#Если ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыКлиентУправляемоеПриложение Тогда
		
		Элементы.ГруппаХодИсполнения.Видимость 		= Ложь;
		Элементы.ГруппаФайлы.Видимость 				= Ложь;
		Элементы.ОткрытьФайлы.Видимость				= Ложь;
		Элементы.ОбработатьЗаявку.Видимость			= Ложь;
		
	#Иначе
		
		Элементы.ОткрытьФайлы.Видимость = Истина;
		Элементы.ГруппаФайлы.Видимость	= Ложь;
		Элементы.ОбработатьЗаявку.Видимость	= Ложь;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Если РольДоступна("ПолныеПрава") и ПроверкаДоступностиМодулей() Тогда
				Элементы.ОбработатьЗаявку.Видимость	= Истина;
			КонецЕсли;
			
			Элементы.ГруппаХодИсполнения.Доступность = Истина;
			
			ОтборЗаявка = ХодИсполненияЗаявки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ОтборЗаявка.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
			ОтборЗаявка.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ЗаявкаВПоддержку");
			ОтборЗаявка.ПравоеЗначение	= Объект.Ссылка;
			ОтборЗаявка.Использование 	= Истина;
			
			ОтборЗаявка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			
			ОтборОбъект = Файлы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ОтборОбъект.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
			ОтборОбъект.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект");
			ОтборОбъект.ПравоеЗначение 	= Объект.Ссылка;
			ОтборОбъект.Использование	= Истина;
			
			ОтборОбъект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			
		Иначе
			
			Элементы.ГруппаХодИсполнения.Доступность = Ложь;
	
		КонецЕсли;
	#КонецЕсли
	
	//АБС ВСТАВКА №24932 НАЧАЛО «19 февраля 2014 г.», Пополитов
	Элементы.ДатаВозможногоТестирования.Видимость = Объект.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОжидаетТестирования;
	Если Объект.Ссылка.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ТестированиеИнициатором Тогда
	    Элементы.ДатаВозможногоТестирования.Вид = ВидПоляФормы.ПолеВвода; 		
	Иначе
		Элементы.ДатаВозможногоТестирования.Вид = ВидПоляФормы.ПолеНадписи;
	КонецЕсли;
 	//\\АБС ВСТАВКА №24932 КОНЕЦ  	
	
	//АБС ВСТАВКА №39121 НАЧАЛО «20 февраля 2014 г.», Пополитов
 	Элементы.СотрудникДополнительногоСогласования.Доступность = РольДоступна("ПолныеПрава") 
																или Объект.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ДополнительноеСогласование;
 	//\\АБС ВСТАВКА №39121 КОНЕЦ   	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// блокировка ввода новых заявок 
	Если Параметры.Ключ.Пустая() Тогда
	//Если ЗначениеЗаполнено(Объект.Ссылка) ТОгда
		Если ТекущаяДата() >= '20160111' Тогда
			Если РольДоступна("ПолныеПрава") Тогда
				// а мы особенные
				
				Режим = РежимДиалогаВопрос.ДаНет;
				Текст = "ru = ""Новые заявки создавать нельзя, но Вы особенный... Действительно создать новую заявку?"";"
				+ " en = ""Do you want to continue?""";
				Ответ = Вопрос(НСтр(Текст), Режим, 0);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					// отказался, значит и ему нельзя
	              	Отказ = Истина;
					Возврат;
				КонецЕсли;
				
			Иначе
				// всем запрещено вводить
				Сообщить("Ввод новых заявок на поддержку по ЕИСУП и ИСУЗК заблокирован. Новые заявки следует создавать в SD.ttk.ru" );
				Предупреждение("Ввод новых заявок на поддержку по ЕИСУП и ИСУЗК заблокирован. Новые заявки следует создавать в SD.ttk.ru",20);
				Отказ = Истина;
				Возврат;  
			КонецЕсли; 
			Если Отказ Тогда
				Возврат;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

		
	УстановитьВидимостьДоступностьНаКлиенте();
	Телефон = ОбновитьТелефон();
	//АБС ВСТАВКА №13163 НАЧАЛО
	Элементы.ВажностьЗаявки.Видимость = ПроверкаВидимостиВажностьЗаявки(); 
	//\\АБС ВСТАВКА №13163 КОНЕЦ
	
	//АБС ВСТАВКА №17327 НАЧАЛО
	Элементы.Задача.Видимость = ПроверкаВидимостиЗадач(); 
	//\\АБС ВСТАВКА №17327 КОНЕЦ	
	
	//АБС ВСТАВКА №13490 НАЧАЛО
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//Объект.Организация = ЗаполнитьОрганизацию();
		ЗаполнитьОрганизацию();		
	КонецЕсли;
	//\\АБС ВСТАВКА №13490 КОНЕЦ	
		                              
	ИмяПК  = ИмяКомпьютера();
		
	#Если не ТолстыйКлиентОбычноеПриложение Тогда 		
		Элементы.ПроверитьОрфографию.Видимость = ложь;
		Элементы.ПроверитьОрфографию1.Видимость = ложь; 				
	#КонецЕсли	

	Если РольДоступна("абс") Тогда
		Элементы.КомментарийДляИсполнителя.Видимость = Истина;
		Элементы.ТелефоннаяКонсультация.Видимость = не (Объект.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение
														и Объект.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОшибкаТестирования
														и Объект.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОбновлениеРабочегоПриложения)
	КонецЕсли;	 	
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда	
	Элементы.СменитьИнициатора.Видимость = КнопкаСменитьИнициатораВидимость();
	#КонецЕсли
	
 
КонецПроцедуры

&НаСервере
Функция КнопкаСменитьИнициатораВидимость()
	
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь"));
	Возврат (не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено
			или не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользовательДЗО) = Неопределено)
				и Объект.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ТестированиеИнициатором;
			
КонецФункции
    
&НаСервере
Процедура ЗаполнитьОрганизацию()
	
	Объект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");
	
КонецПроцедуры	

&НаСервере
Функция ПроверкаВидимостиЗадач()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь"); 
	мРолиПользователя    = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	Видимость =  мРолиПользователя.Найти(Справочники.РолиИсполнителей.ИнициаторПоЗадачамВЗаявкахВПоддержку) <> Неопределено
				или мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) <> Неопределено;
								
	Возврат Видимость;
	
КонецФункции

&НаСервере
Функция ПроверкаВидимостиВажностьЗаявки()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь"); 
	//мРолиПользователя    = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	Видимость = мТекущийПользователь = Объект.Инициатор;
	            //АБС ВСТАВКА №13163 НАЧАЛО
				//из заявки "...Данное поле сделать видимым только для иницатора заявки (для сотрудников НСИ и администраторов делать НЕвидимым)..."
				//или мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) <> Неопределено
				//\\АБС ВСТАВКА №13163 КОНЕЦ
								
	Возврат Видимость;
	
КонецФункции	

&НаСервере
Процедура ПроверитьСодержаниеЗаявки(Отказ,СписокСлов)
	
	запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	абс_ЗапрещенныеСлова.Наименование
	                      |ИЗ
	                      |	Справочник.абс_ЗапрещенныеСлова КАК абс_ЗапрещенныеСлова
	                      |ГДЕ
	                      |	(НЕ абс_ЗапрещенныеСлова.ПометкаУдаления)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	абс_ЗапрещенныеСлова.Наименование");
						  
	Результат = запрос.Выполнить().Выбрать();
	
	Текст = НРег(СокрЛП(Объект.ТекстВопроса));
	
	Пока Результат.Следующий() Цикл
		
		Строка = НРег(СокрЛП(Результат.Наименование));	
		
		Если Найти(Текст, Строка) > 0 Тогда
			СписокСлов = СписокСлов + "," + Строка;
			Отказ = Истина;
		КонецЕсли;		
		
	КонецЦикла;	
	
	СписокСлов = Сред(СписокСлов,2,СтрДлина(СписокСлов));
	
КонецПроцедуры 	

&НаСервере
Функция ОбновитьТелефон()
	
	Тектс = "";
	
	Если ЗначениеЗаполнено(Объект.Инициатор) Тогда
		Тектс = СтрЗаменить("("+Объект.Инициатор.Родитель.абс_ТелефонныйКодГруппы+") "+Объект.Инициатор.абс_ВнутреннийНомер,Символы.НПП,"");
	КонецЕсли;	
             	
	Возврат Тектс;
	
КонецФункции	

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьВидимостьДоступностьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлы(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Сначала надо записать заявку");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ОткрытьФорму("Справочник.ХранилищеДополнительнойИнформации.Форма.ФормаСпискаУправляемая", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПриИзменении(Элемент)
	
	Элементы.Исполнители.ТекущиеДанные.РасшифровкаИсполнителя = СокрЛП(Элементы.Исполнители.ТекущиеДанные.Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗаявкиПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНомерТелефона(Команда)
	
	Телефон = ОбновитьТелефон();
	
КонецПроцедуры

//АБС ВСТАВКА №15584 НАЧАЛО
&НаКлиенте
Процедура КлассификацияПроблемыПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНаКлиенте();
	
	ВидимостьПараметров = ПроверкаВидимостиПараметров(); 
	Элементы.ГруппаПараметры.Видимость = ВидимостьПараметров;
	Если ВидимостьПараметров Тогда
		ПолучитьПараметрыЗапроса();
	КонецЕсли;	                              	                                          
	
КонецПроцедуры

&НаСервере
Функция ПроверкаВидимостиПараметров()  
								
	Возврат НЕ РеквизитФормыВЗначение("Объект").ПолучитьЗапросомПараметры(Истина).Пустой();
	
КонецФункции

&НаСервере
Функция ПроверкаДоступностиМодулей()  
								
	Возврат НЕ РеквизитФормыВЗначение("Объект").ПолучитьЗапросомМодули().Пустой();
	
КонецФункции

&НаСервере
Процедура ПолучитьПараметрыЗапроса()
		
	Объект.Параметры.Загрузить(РеквизитФормыВЗначение("Объект").ПолучитьЗапросомПараметры(Истина).Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаявку(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда  		
		Сообщить("Перед выполнением модуля необходимо записать заявку!"); 		
		Возврат;       		
	КонецЕсли;

	Если НЕ абс_НеОткрытьФормуМодуляВЗаявках() Тогда 
		
		СписокЗначений = ПолучитьСписокМодулей();
		
		Если СписокЗначений.Количество() > 1 Тогда
		
			ДрФорм = ПолучитьОбщуюФорму("ФормаРаботыСоСпискомЗначений");
			ДрФорм.СписокЗначений = ПолучитьСписокМодулей();
			Модуль = ДрФорм.ОткрытьМодально();
			Если Модуль = Неопределено Тогда Возврат; КонецЕсли;
			
			ОбработкаЗаявки(Модуль.Значение);
			
			//ПараметрыФормы = Новый Структура("Ключ", Модуль.Значение); 
			////ОткрытьФорму("Справочник.абс_МодулиДляВыполнения.Форма.ФормаЭлемента", ПараметрыФормы);
			//врФорма = ПолучитьФорму("Справочник.абс_МодулиДляВыполнения.Форма.ФормаЭлемента", ПараметрыФормы);	
			//врФорма.Открыть();	
			//Для Каждого Строка Из Объект.Параметры Цикл 
			//	ПараметрыОтбора = Новый Структура;
			//	ПараметрыОтбора.Вставить("ИмяПараметра", Строка.ИмяПараметра);
			//	НайденныеСтроки = врФорма.Параметры.НайтиСтроки(ПараметрыОтбора);
			//	Для Каждого Стр Из НайденныеСтроки Цикл
			//		ЗаполнитьЗначенияСвойств(Стр,Строка); 
			//	КонецЦикла;
			//КонецЦикла;	
			
		ИначеЕсли СписокЗначений.Количество() = 1 Тогда	
			
			ОбработкаЗаявки(СписокЗначений[0].Значение);
			
		КонецЕсли;
		
	Иначе	
		
		//Выполнить все модули по порядку
		ОбработкаЗаявки();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция абс_НеОткрытьФормуМодуляВЗаявках()
	                        	
	Возврат Константы.абс_НеОткрытьФормуМодуляВЗаявках.Получить();
	
КонецФункции

&НаСервере
Процедура ОбработкаЗаявки(Модуль = Неопределено)
	                        	
	//Выполнить все модули по порядку
	РеквизитФормыВЗначение("Объект").ОбработатьЗаявкуНаСервере(Модуль);
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьСписокМодулей()
	
	Список = Новый СписокЗначений;
	ТЗ = РеквизитФормыВЗначение("Объект").ПолучитьЗапросомМодули().Выгрузить();
	Для Каждого Строка Из ТЗ Цикл
		Список.Добавить(Строка.Модуль,Строка.Модуль,,БиблиотекаКартинок.Лупа);	
	КонецЦикла;	
	
	Возврат Список;
	
КонецФункции
//\\АБС ВСТАВКА №15584 КОНЕЦ

&НаКлиенте
Процедура ПроверитьОрфографию(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Если не ТекущийЭлемент = Неопределено и ТекущийЭлемент.Имя = "ПроверитьОрфографию" Тогда
			Текст = Объект.ТекстВопроса; // Получаем текст
		Иначе	
			Текст = Объект.ТекстОтвета; // Получаем текст
		КонецЕсли;	
		
		ФормаПроверки = ПолучитьФорму("Документ.абс_ЗадачаВТехподдержку.Форма.ФормаПроверки",,Команда);
		ФормаПроверки.Текст = Текст;
		Текст = ФормаПроверки.ОткрытьМодально();
		Если СокрЛП(Текст) = "" или Текст = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Если не ТекущийЭлемент = Неопределено и ТекущийЭлемент.Имя = "ПроверитьОрфографию" Тогда
			Объект.ТекстВопроса = Текст;
		Иначе	
			Объект.ТекстОтвета = Текст;
		КонецЕсли;	
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура КомментарийДляИсполнителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВвестиСтроку(Объект.КомментарийДляИсполнителя,"Комментарий",,Истина);
	
КонецПроцедуры

 &НаСервере
Функция ПолучитьИсполнителя()
	
	СписокЗначений = Новый СписокЗначений;
	Для каждого Строка Из Объект.Задача.Исполнители Цикл
		СписокЗначений.Добавить(Строка.Исполнитель,,,БиблиотекаКартинок.Справочник);
	КонецЦикла;
	
	Возврат СписокЗначений;	
	
КонецФункции

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = НЕ ЗначениеЗаполнено(Объект.Задача);
	ВыбратьИсполнителяИзСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = НЕ ЗначениеЗаполнено(Объект.Задача);
	Если Не СтандартнаяОбработка Тогда
		ДанныеВыбора = ПолучитьИсполнителя();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = НЕ ЗначениеЗаполнено(Объект.Задача);	
	Если Не СтандартнаяОбработка Тогда
		ДанныеВыбора = ПолучитьИсполнителя();
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителяИзСписка()
	
	врИсполнитель = ВыбратьИзСписка(ПолучитьИсполнителя(),Элементы.Исполнитель);
	Если не врИсполнитель = Неопределено Тогда
		Объект.Исполнитель = врИсполнитель.Значение;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефоннаяКонсультацияПриИзменении(Элемент)
	
	времТекстОтвета = "Телефонная консультация, задача выполнена " + Формат(абс_СерверныеФункции.ПолучитьДатуСервера(),"ДЛФ=DD") + Символы.ПС;
	
	Если Объект.ТелефоннаяКонсультация Тогда
		Объект.ТекстОтвета = времТекстОтвета + Объект.ТекстОтвета;
		ЗаполнитьИсполнителя();
	Иначе
		Объект.ТекстОтвета = СтрЗаменить(Объект.ТекстОтвета,времТекстОтвета,"");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителя()
	
	Объект.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
	
КонецПроцедуры	

&НаСервере
Функция УсловиеВыбораСтатусаГарантийнаяРабота()
	
	Возврат РольДоступна("ПолныеПрава") 
			и не (Объект.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Выполнена
					или Объект.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Закрыта
					или Объект.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Отказ
					или Объект.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Отмена);
	
КонецФункции	

&НаСервере
Функция СписокВыбораТипаЗаявок()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	абс_ТипЗаявкиВПоддержку.Ссылка КАК Значение
	                      |ИЗ
	                      |	Перечисление.абс_ТипЗаявкиВПоддержку КАК абс_ТипЗаявкиВПоддержку
	                      |ГДЕ
	                      |	ВЫБОР
	                      |			КОГДА &ВыборГарантийнойРаботы
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ (НЕ абс_ТипЗаявкиВПоддержку.Ссылка = &ГарантийнаяРабота)
	                      |		КОНЕЦ");
	Запрос.УстановитьПараметр("ВыборГарантийнойРаботы",УсловиеВыбораСтатусаГарантийнаяРабота());
	Запрос.УстановитьПараметр("ГарантийнаяРабота",Перечисления.абс_ТипЗаявкиВПоддержку.ГарантийнаяРабота);					  
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
	
КонецФункции

&НаКлиенте
Процедура ТипЗаявкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элементы.ТипЗаявки.СписокВыбора.ЗагрузитьЗначения(СписокВыбораТипаЗаявок());

КонецПроцедуры

&НаКлиенте
Процедура СменитьИнициатора(Команда)
	
	ВсеПользователи = Справочники.Пользователи.ПолучитьФормуВыбора();
	Объект.Инициатор = ВсеПользователи.ОткрытьМодально();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВозможногоТестированияПриИзменении(Элемент)
	
	Объект.ДатаВозможногоТестирования = мДатаВозможногоТестирования;
	
КонецПроцедуры





