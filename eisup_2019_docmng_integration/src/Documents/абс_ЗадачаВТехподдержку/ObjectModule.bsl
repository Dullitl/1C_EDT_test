
Перем мТекИсполнитель Экспорт;
Перем мДатаВозможногоТестирования Экспорт;

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Подготовка;
	КонецЕсли;
		
	СписокСтатусов = Новый СписокЗначений();
	
	Документы.абс_ЗадачаВТехподдержку.ЗаполнитьСписокДоступныхСтатусов(Ссылка, СписокСтатусов);
	
	Если СписокСтатусов.НайтиПоЗначению(Статус) = Неопределено И ЗначениеЗаполнено(Ссылка) Тогда
						
		ttk_ОбщегоНазначения.СообщитьОбОшибке("" + Ссылка + ": Выбран неверный статус документа.", Отказ);
		
		Статус = Ссылка.Статус;
		
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение Тогда
		Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбран исполнитель задачи.", Отказ);	
		КонецЕсли;
		
		СменаИсполнителя = НЕ Исполнитель = Ссылка.Исполнитель;
		
	КонецЕсли;
	
	УточнениеИсполнителем = (Ссылка.Статус 	= Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение И 
							Статус 			= Перечисления.абс_СтатусыЗаявокВПоддержку.Уточнение)
							или 
							(Ссылка.Статус 	= Перечисления.абс_СтатусыЗаявокВПоддержку.Уточнение И 
							Статус 			= Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение);
							
	//АБС ВСТАВКА №6956 НАЧАЛО
	Если Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Уточнение
		и Ссылка.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение Тогда
		СтарыйСтатус = Ссылка.Статус;
	КонецЕсли;	
	//\\АБС ВСТАВКА №6956 КОНЕЦ
							
	//АБС обновляем дату последнего статуса
	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусЗаявкиПоРегистру(Ссылка); 	
	Если НЕ Статус = СтатусПоРегистру Тогда
		ЭтотОбъект.ДатаПоследнегоСтатуса = абс_СерверныеФункции.ПолучитьДатуСервера();		
	КонецЕсли; 	
	//АБС обновляем дату последнего статуса

	мТекИсполнитель = Ссылка.Исполнитель;
	//АБС ВСТАВКА №24932 НАЧАЛО «19 февраля 2014 г.», Пополитов
	мДатаВозможногоТестирования = Ссылка.ДатаВозможногоТестирования;
	Если не Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОжидаетТестирования Тогда
		ДатаВозможногоТестирования = '00010101';	
	КонецЕсли;
	//\\АБС ВСТАВКА №24932 КОНЕЦ 
	
	//АБС ВСТАВКА №39121 НАЧАЛО «20 февраля 2014 г.», Пополитов
	Если Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ДополнительноеСогласование Тогда
		ДополнительноеСогласование = Истина;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №39121 КОНЕЦ 	
	
КонецПроцедуры

Функция ВозможноЗапуститьЗаявку()
	
	мТекущийПользователь 	= глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя 		= абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДирМФС) = Неопределено) ИЛИ
		 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) ИЛИ
		 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользовательДЗО) = Неопределено) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ЗадачаВТехподдержку.Ссылка
	|ИЗ
	|	Документ.абс_ЗадачаВТехподдержку КАК абс_ЗадачаВТехподдержку
	|ГДЕ
	|	((абс_ЗадачаВТехподдержку.Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыЗаявокВПоддержку.ОжидаетТестирования)
	|				И абс_ЗадачаВТехподдержку.ДатаВозможногоТестирования <= &ТекущаяДата)
	|			ИЛИ (абс_ЗадачаВТехподдержку.Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыЗаявокВПоддержку.ТестированиеИнициатором)
	|				ИЛИ абс_ЗадачаВТехподдержку.Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыЗаявокВПоддержку.Уточнение)))
	|	И абс_ЗадачаВТехподдержку.Инициатор = &Инициатор
	|	И абс_ЗадачаВТехподдержку.Задача = ЗНАЧЕНИЕ(Справочник.абс_ЗадачиДляЗаявокВПоддержку.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("Инициатор", мТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", абс_СерверныеФункции.ПолучитьДатуСервера());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат НЕ Выборка.Следующий();
	
КонецФункции

Процедура ПриЗаписи(Отказ)
			
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СписокСтатусов = Новый СписокЗначений(); 	
	Документы.абс_ЗадачаВТехподдержку.ЗаполнитьСписокДоступныхСтатусов(Ссылка, СписокСтатусов);	
	                              	
	Попытка
	
		СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусЗаявкиПоРегистру(Ссылка);
		
		Если НЕ Статус = СтатусПоРегистру или Не мТекИсполнитель = Исполнитель Тогда
			Если Не мТекИсполнитель = Исполнитель Тогда
				Если ЗначениеЗаполнено(мТекИсполнитель) Тогда
					ПричинаИзмененияСтатуса = ПричинаИзмененияСтатуса+" // изменил исполнителя с «"+СокрЛП(мТекИсполнитель)+"» на «"+СокрЛП(Исполнитель)+"»";	
				Иначе	
					ПричинаИзмененияСтатуса = ПричинаИзмененияСтатуса+" // выбран исполнитель «"+СокрЛП(Исполнитель)+"»";
				КонецЕсли;	
			КонецЕсли;
			Если ДатаВозможногоТестирования <> мДатаВозможногоТестирования и Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОжидаетТестирования Тогда
				ПричинаИзмененияСтатуса = ПричинаИзмененияСтатуса+" // выбрана дата возможного тестирования «"+Формат(ДатаВозможногоТестирования,"ДЛФ=DD")+"»";	
			КонецЕсли;	
			//АБС ВСТАВКА №37974 НАЧАЛО «26 января 2015 г.», Пополитов     				
			Если Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.АнализДирМФС Тогда
				ПричинаИзмененияСтатуса = ПричинаИзмененияСтатуса + Символы.ВК + СокрЛП(ТекстВопроса);	
			КонецЕсли;	
			//\\АБС ВСТАВКА №37974 КОНЕЦ
			ЗаписатьНовыйСтатус(Статус, ПричинаИзмененияСтатуса);	
		КонецЕсли;
				
		// Регистрация заявок 
		МассивСтатусов = Новый Массив();  		
		МассивСтатусов.Добавить(Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение);
		МассивСтатусов.Добавить(Перечисления.абс_СтатусыЗаявокВПоддержку.ОшибкаТестирования);
		
		Если Задача.Пустая() и ((НЕ МассивСтатусов.Найти(Статус) = Неопределено И МассивСтатусов.Найти(СтатусПоРегистру) = Неопределено) 
			ИЛИ (НЕ Исполнитель = мТекИсполнитель И НЕ Исполнитель.Родитель = мТекИсполнитель.Родитель)) Тогда    			
			абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомлениеСопровожденияЕИСУП(Ссылка, Статус);    		
		КонецЕсли;		
		
		мТекИсполнитель = Исполнитель;
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		Если Не СогласованиеБезБП Тогда
			
			// Запустим БП если он еще не запущен
			Если (Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.АнализДирМФС 
				и СтатусПоРегистру = Перечисления.абс_СтатусыЗаявокВПоддержку.Подготовка)
				или (ЗначениеЗаполнено(Задача) 
				и Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение 
				и СтатусПоРегистру = Перечисления.абс_СтатусыЗаявокВПоддержку.Подготовка) Тогда
				
				Если ВозможноЗапуститьЗаявку() Тогда  				
					абс_БизнесПроцессы.ЗапуститьБПЗаявкиВПоддержку(Ссылка);						
				Иначе      					
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Для получения возможности отправки заявки на рассмотрение отработайте заявки, созданные Вами ранее, в статусе «тестирования инициатором», «уточнения» или «ожидает тестирования» с датой отсрочки равной или меньше текущего дня.", Отказ);
				КонецЕсли;	
				
			КонецЕсли;
		Иначе
			Если Не ВозможноЗапуститьЗаявку() Тогда  				
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Для получения возможности отправки заявки на рассмотрение отработайте заявки, созданные Вами ранее, в статусе «тестирования инициатором», «уточнения» или «ожидает тестирования» с датой отсрочки равной или меньше текущего дня.", Отказ);
			КонецЕсли;	
		КонецЕсли;

		
		Если Статус = СтатусПоРегистру Тогда
			Возврат;
		КонецЕсли;	
		
		Если Не СогласованиеБезБП Тогда
			// Попробуем закрыть задачу согласования
			ЗадачаЗаявка = ПолучитьЗадачуПоЗаявке();
			
			Если ЗадачаЗаявка = Неопределено или не ЗначениеЗаполнено(ЗадачаЗаявка) Тогда
				Возврат;
			КонецЕсли;
			
			Если ТипЗнч(ЗадачаЗаявка) = Тип("Массив") Тогда
			//Добавил массив так как была ошибка:
			//при переводе из статуса "уточнение" в "анализ Дир МФС" создавался новый БП
			//ошибку перевода исправил, но что бы закрыть куча БП, нужен массив БП
			//Так же закрываются все задачи по исполнителям, если изменился статус, логично
				Для каждого Строка Из ЗадачаЗаявка Цикл
					Если НЕ Строка.Выполнена Тогда   
						ЗадачаОбъект = Строка.ПолучитьОбъект();			
						// Лапин начало
						// {Старый код:
						// ЗадачаОбъект.ВыполнитьЗадачу(); // лапин
						// {Новый код:
						Если НЕ ЗадачаОбъект = Неопределено Тогда
							ЗадачаОбъект.ВыполнитьЗадачу();
						КонецЕсли;
						// Лапин начало окончание
					КонецЕсли;             	
				КонецЦикла;	
				
			Иначе
				
				Если НЕ ЗадачаЗаявка.Выполнена Тогда   
					ЗадачаОбъект = ЗадачаЗаявка.ПолучитьОбъект();			
					// Лапин начало
					// {Старый код:
					// ЗадачаОбъект.ВыполнитьЗадачу(); // лапин
					// {Новый код:
					Если НЕ ЗадачаОбъект = Неопределено Тогда
						ЗадачаОбъект.ВыполнитьЗадачу();
					КонецЕсли;
					// Лапин начало окончание
                КонецЕсли;
				
			КонецЕсли;	
		КонецЕсли;
		
		
	Исключение
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи документа: " + ОписаниеОшибки() + ".", Отказ);
		
		Возврат;
	КонецПопытки;
	// АБС Изменение Родин Отключение бизнес-процессов 110314

КонецПроцедуры

Функция НайтиБППоЗаявке() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоЗаявке(Ссылка, "абсЗаявкаВПоддержку");	
	
КонецФункции

Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовЗаявокВПоддержку.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ЗаявкаВПоддержку.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();

	Запись.ЗаявкаВПоддержку			= Ссылка;
	Запись.Пользователь 			= ТекПользователь;	
	Запись.Статус					= НовыйСтатус;

	Запись.Комментарий 				= Комментарий;	
	Запись.Компьютер 				= ИмяПК;
	
	//ОтветственныйСотрудник = абс_БизнесПроцессы.ПолучитьСотрудникаПользователя(ТекПользователь);
	//
	//Если НЕ ОтветственныйСотрудник = Неопределено Тогда
	//	Запись.ДолжностьОтветственного	= ОтветственныйСотрудник.Должность;
	//КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьЗадачуПоЗаявке() 	
		
	БП = НайтиБизнесПроцессПоЗаявке(Ссылка, "абсЗаявкаВПоддержку");
	
	Если БП = Неопределено или НЕ ЗначениеЗаполнено(БП) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпТочек = Новый СписокЗначений;
	
	Для Каждого ТочкаБП Из БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута Цикл
		ТекТочка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута[ТочкаБП.Имя];
		Если СпТочек.НайтиПоЗначению(ТекТочка) = Неопределено и ТочекиИсключенияДляОтбораЗадачи(ТекТочка) Тогда
			СпТочек.Добавить(ТекТочка);	
		КонецЕсли;				
	КонецЦикла;	 	                 	
			
	Возврат НайтиЗадачуПоддержки(БП, СпТочек ,, Ложь);
	
КонецФункции

Функция ТочекиИсключенияДляОтбораЗадачи(ТекТочка)
	
	ТекСтатус = Статус;
	Точка = Неопределено;
			            		
	Если ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.АнализДирМФС Тогда
		Точка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.ДействиеАнализДирМФС;		
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.Согласовано Тогда 			
		Точка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.ДействиеСогласовано;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение Тогда  		
		Точка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.ДействиеИсполнение;
					
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.ДополнительноеСогласование Тогда 
		Точка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.ДействиеДополнительноеСогласование;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.СогласованиеЧТЗ Тогда 
		Точка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.ДействиеСогласованиеЧТЗ;		
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОбновлениеРабочегоПриложения Тогда  		
		Точка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.Обновление;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.Уточнение Тогда	
		Точка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.ДействиеУточнение;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.ТестированиеДирМФС Тогда			
		Точка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.ДействиеТестированиеДирМФС;
	
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.ТестированиеИнициатором Тогда
		Точка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.ДействиеТестированиеИнициатором;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОжидаетТестирования Тогда		
		Точка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.ДействиеОжидаетТестирования;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОшибкаТестирования Тогда
		Точка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.ДействиеПроблема;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокВПоддержку.КонтрольАрхитектуры Тогда
		Точка = БизнесПроцессы.абсЗаявкаВПоддержку.ТочкиМаршрута.ДействиеКонтрольАрхитектуры;  //АБС ВСТАВКА 57369  28.05.2015 16:47:23  Коломиец
		
	КонецЕсли;	
	
	Возврат Точка = Неопределено или не Точка = ТекТочка;	
	
КонецФункции	

Функция НайтиБизнесПроцессПоЗаявке(ЗаявкаСсылка, ИмяБизнесПроцесса) Экспорт
	
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ЗадачаВПоддержку = &Заявка И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("Заявка", ЗаявкаСсылка);
	
	БП = ЗапросБП.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат БП;
		
КонецФункции

Функция НайтиЗадачуПоддержки(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено, ОтборПоИсполнителю = Истина) Экспорт
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ " + ?(ОтборПоИсполнителю, "
							   |	абсЗадачаДоговора.Исполнитель = &Исполнитель И ", "") + "
							   |	абсЗадачаДоговора.БизнесПроцесс в (&БизнесПроцесс)
	                           |	И абсЗадачаДоговора.ТочкаМаршрута В (&ТочкаМаршрута)
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
							   
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	
	Возврат ЗапросЗадач.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ОбработатьЗаявкуНаСервере(Модуль = Неопределено) Экспорт
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда 
		Сообщить("Недостаточно прав.");		
		Возврат;                       		
	КонецЕсли;
	
	Если Модуль <> Неопределено Тогда
		
		СтруктураПараметров = ПолучитьСтруктуруПараметров(Модуль);		
		Если СтруктураПараметров = Неопределено Тогда
			Возврат;
		КонецЕсли;                                          		
		ЗаписьЖурналаРегистрации("Выполнение модулей из заявки №"+ЭтотОбъект.Номер, УровеньЖурналаРегистрации.Информация, , , "Выполнен модуль " + СокрЛП(Модуль.Код) + ".");			
		Попытка 
			ТекстыЗапросов = ПолучитьСтруктуруТекстовЗапросов(Модуль);
		Исключение
			Сообщить("Ошибка при заполнении структуры запросов:" + Символы.ПС + ОписаниеОшибки());		
		КонецПопытки;                                                                                                     		
		абс_СерверныеФункции.ВыполнитьКодНаСервере(Модуль.ТекстМодуля, СтруктураПараметров, ТекстыЗапросов);                     		
		ЗаписьЖурналаРегистрации("Выполнение модулей из заявки №"+ЭтотОбъект.Номер, УровеньЖурналаРегистрации.Информация, , , "Выполнен модуль " + СокрЛП(Модуль.Код) + ".");
		             		
	Иначе	
		
		Модули = ПолучитьЗапросомМодули().Выгрузить();	
		
		Для каждого врСтрока Из Модули Цикл 
			
			Модуль = врСтрока.Модуль;
			
			СтруктураПараметров = ПолучитьСтруктуруПараметров(Модуль);		
			Если СтруктураПараметров = Неопределено Тогда
				Возврат;
			КонецЕсли;                                          		
			ЗаписьЖурналаРегистрации("Выполнение модулей из заявки №"+ЭтотОбъект.Номер, УровеньЖурналаРегистрации.Информация, , , "Выполнен модуль " + СокрЛП(Модуль.Код) + ".");			
			Попытка 
				ТекстыЗапросов = ПолучитьСтруктуруТекстовЗапросов(Модуль);
			Исключение
				Сообщить("Ошибка при заполнении структуры запросов:" + Символы.ПС + ОписаниеОшибки());		
			КонецПопытки;                                                                                                     		
			абс_СерверныеФункции.ВыполнитьКодНаСервере(Модуль.ТекстМодуля, СтруктураПараметров, ТекстыЗапросов);                     		
			ЗаписьЖурналаРегистрации("Выполнение модулей из заявки №"+ЭтотОбъект.Номер, УровеньЖурналаРегистрации.Информация, , , "Выполнен модуль " + СокрЛП(Модуль.Код) + ".");
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьСтруктуруПараметров(Модуль,Отказ = Ложь) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаПараметра Из ЭтотОбъект.Параметры Цикл  		
		Попытка   			
			СтруктураПараметров.Вставить(СтрокаПараметра.ИмяПараметра, СтрокаПараметра.ЗначениеПараметра); 			
		Исключение     			
			Отказ = Истина;
			Сообщить("Ошибка при установке параметра № " + СтрокаПараметра.НомерСтроки + ": " + СтрокаПараметра.ИмяПараметра + "");  			
		КонецПопытки; 		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	врПараметры = ПолучитьЗапросомПараметры(Ложь).Выгрузить();
	
	Для Каждого СтрокаПараметра Из врПараметры Цикл		
		Попытка  
			Если НЕ СтруктураПараметров.Свойство(СтрокаПараметра.ИмяПараметра) Тогда
				СтруктураПараметров.Вставить(СтрокаПараметра.ИмяПараметра, СтрокаПараметра.ЗначениеПараметра);
			КонецЕсли;
		Исключение     			
			Отказ = Истина;
			Сообщить("Ошибка при установке параметра № " + СтрокаПараметра.НомерСтроки + ": " + СтрокаПараметра.ИмяПараметра + "");    			
		КонецПопытки;   		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат СтруктураПараметров;
	
КонецФункции
 
Функция ПолучитьСтруктуруТекстовЗапросов(Модуль,Отказ = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Модуль",Модуль);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Запросы.ИмяЗапроса,
	               |	Запросы.ТекстЗапроса
	               |ИЗ
	               |	Справочник.абс_МодулиДляВыполнения.Запросы КАК Запросы
	               |ГДЕ
	               |	Запросы.Ссылка В(&Модуль)";
	
	врЗапросы = Запрос.Выполнить().Выгрузить();	
	
	СтруктураТекстовЗапросов = Новый Структура;
	
	Для Каждого СтрокаЗапрос Из врЗапросы Цикл
		
		СтруктураТекстовЗапросов.Вставить(СтрокаЗапрос.ИмяЗапроса, СтрокаЗапрос.ТекстЗапроса);
		
	КонецЦикла;
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ПолучитьЗапросомПараметры(Обязательный = Истина) Экспорт
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("КлассификацияПроблемы",ЭтотОбъект.КлассификацияПроблемы);
	Запрос.УстановитьПараметр("Обязательный",Обязательный);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Параметры.ИмяПараметра,
	               |	ВЫБОР
	               |		КОГДА Параметры.СинонимПараметра = """"
	               |			ТОГДА Параметры.ИмяПараметра
	               |		ИНАЧЕ Параметры.СинонимПараметра
	               |	КОНЕЦ КАК СинонимПараметра,
	               |	Параметры.ЗначениеПараметра
	               |ИЗ
	               |	Справочник.абс_КлассификацияПроблемСопровождения.Параметры КАК Параметры
	               |ГДЕ
	               |	Параметры.Ссылка В(&КлассификацияПроблемы)
	               |	И Параметры.Обязательный = &Обязательный
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Параметры.ИмяПараметра,
	               |	Параметры.ЗначениеПараметра,
	               |	ВЫБОР
	               |		КОГДА Параметры.СинонимПараметра = """"
	               |			ТОГДА Параметры.ИмяПараметра
	               |		ИНАЧЕ Параметры.СинонимПараметра
	               |	КОНЕЦ";
				   
	Возврат Запрос.Выполнить();	
	
КонецФункции

Функция ПолучитьЗапросомМодули() Экспорт
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("КлассификацияПроблемы",ЭтотОбъект.КлассификацияПроблемы);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Модули.НомерСтроки КАК НомерСтроки,
	               |	Модули.Модуль
	               |ИЗ
	               |	Справочник.абс_КлассификацияПроблемСопровождения.Модули КАК Модули
	               |ГДЕ
	               |	Модули.Ссылка В(&КлассификацияПроблемы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Модули.Модуль,
	               |	Модули.НомерСтроки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
				   
	Возврат Запрос.Выполнить();	
	
КонецФункции

мТекИсполнитель = Исполнитель;