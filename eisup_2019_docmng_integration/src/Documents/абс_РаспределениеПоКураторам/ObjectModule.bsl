Перем  СтруктураПодключения;

Функция ОбработатьДанныеЗагруженныеИзБиллинга()Экспорт
	
	КолСтрок = ДанныеБиллинга.Количество();	
	Счет = 0;
	Для каждого Строка Из ДанныеБиллинга Цикл
		Счет = Счет+1;
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		Состояние("Обрабатывается "+Счет+" из "+КолСтрок);
		#КонецЕсли
				
		//Поиск счета на оплату по FACTUREEXTERNALID
		СчетНаОплату = НайтиСчетНаОплату(СокрЛП(Строка.FACTURENUM));
		Строка.СчетНаОплату = СчетНаОплату;
		Если ЗначениеЗаполнено(Строка.СчетНаОплату) Тогда
			Строка.Накладная =  Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Строка.СчетНаОплату.Номер,Строка.СчетНаОплату.Дата);
			
			Если Не Строка.Накладная.пустая() Тогда 
				Строка.СуммаДокумента = Строка.Накладная.СуммаДокумента-Строка.Накладная.Услуги.Итог("СуммаНДС");
			КонецЕсли;
		КонецЕсли;
		
				
		
		//\\проверка ИНН и КПП
		//Если ЗначениеЗаполнено(СокрЛП(Строка.INN)) Тогда
		//ИННВерный = РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(СокрЛП(Строка.INN));
		//Если Не  ИННВерный Тогда     
		//	
		//	Строка.ТиповаяОшибка = Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.НайтиПоНаименованию("ИНН не соответствует требованиям");
		//	Строка.SESSIONERRORLOG = ""+Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.НайтиПоНаименованию("ИНН не соответствует требованиям"); 
		//Иначе
		//	Строка.ТиповаяОшибка   = Справочники.абс_ТиповыеОшибкиЗагрузкиБиллинга.ПустаяСсылка();
		//	Строка.SESSIONERRORLOG = СтрЗаменить(Строка.SESSIONERRORLOG,"ИНН не соответствует требованиям","1");
		//	
		//КонецЕсли;
		//КонецЕсли;
			
		////////////////
			
		////////////////////////
			////Поиск валюты
		//Валюта = НайтиВалюту(СокрЛп(Строка.CURRENCYCODE));
		
		//Ставка НДС
			//Количество
		
				
		
		//Дата документа.
		ДатаДокумента = ПреобразоватьКДате(СокрЛП(Строка.DELIVERYDATE));
		Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		Иначе
			Строка.ДатаДокумента =  ДатаДокумента;
		КонецЕсли;
		
		//Куратор
		Строка.абс_Куратор = НайтиКуратора(СокрЛП(Строка.KURATOR));
		//
		
		//Цена
		СуммаБЕЗНДС = ПолучитьСумму(Строка.SUMMABEZNDS_1);
		СуммаНДС = ПолучитьСумму(Строка.SUMMANDS_1);
		Сумма     = СуммаБЕЗНДС;
		СуммаНДС = СуммаНДС;
		
		
				
		//Сумма НДС
		Если  СуммаНДС = Неопределено Тогда
		Иначе
			Строка.СуммаНДС = СуммаНДС;
		КонецЕсли;
		
		//Сумма
		Если  Сумма = Неопределено Тогда
			Если Найти(Строка.SESSIONERRORLOG,"Сумма неправильного формата;")=0 Тогда
				Строка.SESSIONERRORLOG = Строка.SESSIONERRORLOG +Символы.ПС+ "Сумма неправильного формата;";
			КонецЕсли;	
		Иначе
			Строка.Сумма = Сумма;
			Строка.SESSIONERRORLOG = СтрЗаменить(Строка.SESSIONERRORLOG,"Сумма неправильного формата;","");		
		КонецЕсли;
		
		
		
		Строка.УникальныйИдентификаторЗаписи = Строка.EXTERNALLINEID;
		
		Если ЗначениеЗаполнено(Строка.Сумма) И ЗначениеЗаполнено(Строка.СуммаДокумента) Тогда
			 Строка.PERCENT = Окр((Строка.Сумма/(Строка.СуммаДокумента)),2);
		КонецЕсли;
		
		
			
	КонецЦикла;
	
	
КонецФункции

Функция НайтиКуратора(НаименованиеКуратора)
	Найд = Справочники.абс_Кураторы.НайтиПоНаименованию(НаименованиеКуратора,Истина);
	Если Найд.Пустая() Тогда
		НовКуратор = Справочники.абс_Кураторы.СоздатьЭлемент();
		НовКуратор.Наименование = НаименованиеКуратора;
		НовКуратор.УстановитьНовыйКод();
		НовКуратор.Записать();
		Найд = НовКуратор.Ссылка;
	КонецЕсли;
	
	Возврат Найд.Ссылка;
КонецФункции


Функция НайтиДоговорКонтрагента(Контрагент,НомерДоговора,Валюта)
	Запрос = НОвый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Владелец = &Владелец
	               |	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	               |	И ДоговорыКонтрагентов.Номер = &НомерДоговора
	               |	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта";
	Запрос.УстановитьПараметр("Владелец",Контрагент);
	Запрос.УстановитьПараметр("НомерДоговора",НомерДоговора);
	Запрос.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("Валюта",Валюта);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество()>0 Тогда
		РезультатЗапроса.Следующий();
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПреобразоватьКДате(СтрокаДата)
	
	ПустаяДата=Дата('00010101');
	СтрокаДата = СокрЛП(Лев(СтрокаДата,11));
	День=Лев(СтрокаДата,2);
	Месяц=Сред(СтрокаДата,4,2);
	Год=Прав(СтрокаДата,4);
	СтрокаДата=""+Год + Месяц +  День;
	
	Попытка 
		ДатаДокумента=Дата(СтрокаДата);
		
	Исключение
		Возврат ПустаяДата;	
	КонецПопытки;
	
	Возврат  ДатаДокумента;
	
КонецФункции

Функция НайтиСчетНаОплату(FACTURENUM)
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.FACTUREEXTERNALID = &FACTUREEXTERNALID";
	Запрос.УстановитьПараметр("FACTUREEXTERNALID",FACTURENUM);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество()>0 Тогда
		РезультатЗапроса.Следующий();
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСумму(Сумма) Экспорт
	Если НЕ ЗначениеЗаполнено(Сумма) Тогда
		Возврат 0;
		
	КонецЕсли;
	Сумма=СтрЗаменить(Сумма," ","");
	Сумма=СтрЗаменить(Сумма,".",",");
	Сумма=СтрЗаменить(Сумма,символы.НПП,"");
	
	Попытка
		ЧислоСумма=Число(Сумма);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Возврат ЧислоСумма;
	
КонецФункции

Функция ПолучитьСтавкуНДС(Ставка)
	Если  Ставка="18" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли  Ставка="КНБН" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли  Ставка="0" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
		
	Иначе 
		Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция НайтиКонтрагентаВБазе(ИНН, КПП, СтруктураИмени)
	
	Наименование = СтруктураИмени.Наименование;
	Если  ЗначениеЗаполнено(ИНН)   ТОгда
		//Ищем контрагента по ИНН и КПП
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП
		|	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)";
		Запрос.УстановитьПараметр("ИНН",ИНН);
		Запрос.УстановитьПараметр("КПП",КПП);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Количество() > 0 Тогда
			//с даными ИНН и КПП контраент не найден, произведем поиск по наименованию
			Если РезультатЗапроса.Количество() = 1 Тогда 
				
				РезультатЗапроса.Следующий();
				Контрагент = РезультатЗапроса.Ссылка;
				Возврат Контрагент;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст ="ВЫБРАТЬ
				|	Контрагенты.Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &ИНН
				|	И Контрагенты.КПП = &КПП
				|	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)
				|	И Контрагенты.абс_НаименованиеБиллинг = &Наименование";
				Запрос.УстановитьПараметр("ИНН",ИНН);
				Запрос.УстановитьПараметр("КПП",КПП);
				Запрос.УстановитьПараметр("Наименование",СтруктураИмени.Наименование);
				
				РезультатЗапроса = Запрос.Выполнить().Выбрать();
				Если РезультатЗапроса.Следующий() Тогда
					Возврат РезультатЗапроса.Ссылка;
					
				КонецЕсли;
				//Ищем контрагента по ИНН и КПП +наименование биллинга
				//Сообщить("Контрагент "+Наименование+" имеет "+РезультатЗапроса.Количество()+" аналогов по ИНН "+ИНН+"и КПП "+КПП);			
			КонецЕсли;
		Иначе 
			
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	Иначе
		
		//В случае если онтрагент Нерезидент произведем поиск по наименованию
		Запрос=Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.абс_НаименованиеБиллинг = &Наименование
		|	И (Контрагенты.ИНН = """"
		|			ИЛИ Контрагенты.ИНН = ""-"")
		|	И Контрагенты.абс_СтатусКонтрагента = ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный)";
		Запрос.УстановитьПараметр("Наименование",СтруктураИмени.Наименование);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если  РезультатЗапроса.Количество()>0 Тогда
			РезультатЗапроса.Следующий();
			Контрагент = РезультатЗапроса.Ссылка;
			Возврат  Контрагент;
		Иначе
			Возврат 	Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция НайтиНоменклатуруПоБилингКоду(BILLINGGLCODE)
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.BILLINGGLCODE = &BILLINGGLCODE ";
	Запрос.УстановитьПараметр("BILLINGGLCODE",BILLINGGLCODE);
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество()>0 Тогда
		РезультатЗапроса.Следующий();
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка(); 
	КонецЕсли;
	
КонецФункции

Функция НайтиВалюту(КодВалюты)
	
	//Если СтрДлина(СокрЛП(КодВалюты))=2 Тогда
	//	КодВалюты = "0"+КодВалюты;
	//КонецЕсли;
	
	
	Если Найти(КодВалюты,"810")>0 Тогда
		Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП("643"));
	ИначеЕсли Найти(КодВалюты,"250")>0 Тогда
		Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП("960"));	
	Иначе
		Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП(КодВалюты));
		
	КонецЕсли;	
	
	Возврат Валюта;
	
КонецФункции

Процедура СоздатьНенайденных(ТЧ)   Экспорт
	
	ТаблицаКонтрагентов=Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("ФЛ");
	ТаблицаКонтрагентов.Колонки.Добавить("Наименование");
	ТаблицаКонтрагентов.Колонки.Добавить("НаименованиеПолное");
	ТаблицаКонтрагентов.Колонки.Добавить("Адрес");
	ТаблицаКонтрагентов.Колонки.Добавить("ИНН");
	ТаблицаКонтрагентов.Колонки.Добавить("КПП"); 
	ТаблицаКонтрагентов.Колонки.Добавить("ЮрФизЛицо");
	ТаблицаКонтрагентов.Колонки.Добавить("Контрагент");
	
	
	
	Для каждого СТрока Из ТЧ Цикл
		ЮрЛицо=Неопределено;
		ДлинаИНН =СтрДлина(СокрЛП(Строка.INN));
		ДлинаКПП =СтрДлина(СокрЛП(Строка.KPP)); 
		Если ДлинаИНН = 10  И ДлинаКПП = 9 Тогда
			ЮрЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ИначеЕсли ДлинаИНН = 12 тогда
			ЮрЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		Иначе
			ЮрЛицо= Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;
		
		
		
		Если Не Строка.Контрагент.Пустая()
			Или Не ЗначениеЗаполнено(Строка.CUSTNAME_1)
			Или Не ЗначениеЗаполнено(Строка.FULLCUSTNAME)
			//ИЛИ Не ЗначениеЗаполнено(Строка.INN) 
			ИЛИ ЮрЛицо = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтотОбъект.УчитыватьОшибки Тогда
			Если ЗначениеЗаполнено(Строка.ТиповаяОшибка) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		
		НоваяСтрокаТЗ=ТаблицаКонтрагентов.Добавить();
		НоваяСтрокаТЗ.ФЛ=Истина;
		НоваяСтрокаТЗ.Наименование=СТрока.CUSTNAME_1;
		НоваяСтрокаТЗ.НаименованиеПолное=СТрока.FULLCUSTNAME;
		НоваяСтрокаТЗ.ИНН=СТрока.INN;
		НоваяСтрокаТЗ.КПП=СТрока.KPP;
		НоваяСтрокаТЗ.Адрес=СТрока.CUSTADDRESS;
		
		
		НоваяСтрокаТЗ.ЮрФизЛицо=ЮрЛицо;
	КонецЦикла;
	
	Если ТаблицаКонтрагентов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКонтрагентов.Свернуть("ФЛ,Наименование,НаименованиеПолное, ИНН,Адрес, КПП, ЮрФизЛицо,Контрагент");	
	Для Каждого Стр Из ТаблицаКонтрагентов Цикл
		
		СтруктураОтбора = Новый Структура("Наименование,ИНН,КПП");
		СтруктураОтбора.Наименование = Стр.Наименование;
		СтруктураОтбора.ИНН = Стр.ИНН;
		СтруктураОтбора.КПП = Стр.КПП;
		МасСтрок = ТаблицаКонтрагентов.НайтиСтроки(СтруктураОтбора);
		Если масСтрок.Количество()>0 Тогда
			Для каждого Эл из МасСтрок Цикл
				Эл.Адрес = Стр.Адрес;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	ТаблицаКонтрагентов.Свернуть("ФЛ,Наименование,НаименованиеПолное, ИНН,Адрес, КПП, ЮрФизЛицо,Контрагент");	
	ФормаЗагрузкаКонтрагентов= ПолучитьФорму("ФормаКонтрагентов");
	ТЗФормы=ФормаЗагрузкаКонтрагентов.Контрагенты;
	Для каждого СТрока Из  ТаблицаКонтрагентов Цикл
		НоваяСтрока= ТЗФормы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СТрока );
	КонецЦикла;
	МассивСозданныхКонтрагентов = Новый Массив;
	МассивСозданныхКонтрагентов = ФормаЗагрузкаКонтрагентов.ОткрытьМодально();
	
	Если МассивСозданныхКонтрагентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МакетОтчет=ПолучитьМакет("Контрагенты");
	ТабДок=Новый ТабличныйДокумент;
	ОбластьШапкаТаблицы = МакетОтчет.ПолучитьОбласть("Шапка");
	ОбластьСтроки= МакетОтчет.ПолучитьОбласть("Строка");
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	Для Каждого ЭлементТЗ из МассивСозданныхКонтрагентов Цикл
		Если ЗначениеЗаполнено(ЭлементТЗ) Тогда
			
			ОбластьСтроки.Параметры.Заполнить(ЭлементТЗ);
			ТабДок.Вывести(ОбластьСтроки);
		КонецЕсли;
		
	КонецЦикла;
	ТабДок.Показать();
	ТЧ=ДанныеБиллинга.Выгрузить();	
	Для Каждого СтрокаТЧ Из МассивСозданныхКонтрагентов Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ) Тогда
			СтруктураПоиска = Новый Структура("INN,KPP,CUSTNAME_1");	
			СтруктураПоиска.INN = СокрЛП(СтрокаТЧ.ИНН);
			СтруктураПоиска.KPP = СокрЛП(СтрокаТЧ.КПП);
			СтруктураПоиска.CUSTNAME_1 = СокрЛП(СтрокаТЧ.Наименование);
			
			
			МассивСтрок = ТЧ.НайтиСтроки(СтруктураПоиска);
			Если массивСтрок.Количество()>0 Тогда
				Для Каждого Элемент из МассивСтрок Цикл
					Элемент.НовыйКонтрагент = СтрокаТЧ;
					Элемент.Контрагент = СтрокаТЧ;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	ДанныеБиллинга.Очистить();
	ДанныеБиллинга.Загрузить(ТЧ);
КонецПроцедуры

Процедура СоздатьНенайденныеДоговора() Экспорт
	
	МассивДоговоров = Новый Массив;
	ТаблицаДог = Новый ТаблицаЗначений;
	ТаблицаДог = ДанныеБиллинга.Выгрузить();
	
	ТаблицаДог.Свернуть("Контрагент,Загружать,ДоговорКонтрагента,Валюта,DATADOGOVORA,NOMERDOGOVORA_1");
	Кол = 0;
	Для Каждого СтрокаДоговоров Из ТаблицаДог Цикл
		Если ЗначениеЗаполнено(СтрокаДоговоров.Контрагент) 
			и ЗначениеЗаполнено(СтрокаДоговоров.Валюта) 
			И ЗначениеЗаполнено(СтрокаДоговоров.NOMERDOGOVORA_1)
			И Не ЗначениеЗаполнено(СтрокаДоговоров.ДоговорКонтрагента)  Тогда
			Кол = Кол+1;
		КонецЕсли;	 	 
	КонецЦикла;
	
	Сч = 0;
	
	Для Каждого СтрокаДоговоров Из ТаблицаДог Цикл
		Если ЗначениеЗаполнено(СтрокаДоговоров.Контрагент) 
			и ЗначениеЗаполнено(СтрокаДоговоров.Валюта) 
			И ЗначениеЗаполнено(СтрокаДоговоров.NOMERDOGOVORA_1)
			И Не ЗначениеЗаполнено(СтрокаДоговоров.ДоговорКонтрагента) Тогда
			Сч = Сч+1;
			#Если Клиент Тогда
			состояние("Обрабатывается "+Сч+" из "+Кол);
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			СтрокаДоговоров.ДоговорКонтрагента = СоздатьДоговор(СтрокаДоговоров.Контрагент,СтрокаДоговоров.NOMERDOGOVORA_1,СтрокаДоговоров.DATADOGOVORA,СтрокаДоговоров.Валюта);
			МассивДоговоров.Добавить(СтрокаДоговоров.ДоговорКонтрагента);	
		КонецЕсли;
		
		
	КонецЦикла;
	//заполнение поля Договор в таблице
	Для Каждого ЭлДоговор Из МассивДоговоров Цикл
		
		Если ЗначениеЗаполнено(ЭлДоговор) Тогда 
			КодВалюты =  СтрЗаменить(ЭлДоговор.ВалютаВзаиморасчетов.Код,"643","810");
			СтруктураОтбора = Новый Структура("Контрагент,NOMERDOGOVORA_1,CURRENCYCODE");
			СтруктураОтбора.Вставить("Контрагент",ЭлДоговор.Владелец);
			СтруктураОтбора.Вставить("NOMERDOGOVORA_1",ЭлДоговор.Номер);
			СтруктураОтбора.Вставить("CURRENCYCODE",КодВалюты);
			НайденныеСтроки = ДанныеБиллинга.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество()>0 Тогда
				Для Каждого СтрБиллинга Из НайденныеСтроки Цикл
					СтрБиллинга.ДоговорКонтрагента = ЭлДоговор; 
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//заполнение поля Договор в таблице
	
	МакетОтчет=ПолучитьМакет("Договоры");
	ТабДок=Новый ТабличныйДокумент;
	ОбластьШапкаТаблицы = МакетОтчет.ПолучитьОбласть("Шапка");
	ОбластьСтроки= МакетОтчет.ПолучитьОбласть("Строка");
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	Для Каждого ЭлементТЗ из МассивДоговоров Цикл
		Если ЗначениеЗаполнено(ЭлементТЗ) Тогда
			
			ОбластьСтроки.Параметры.Заполнить(ЭлементТЗ);
			ОбластьСтроки.Параметры.КодКонтрагента = ЭлементТЗ.Владелец.Код;
			ОбластьСтроки.Параметры.НаименованиеКонтрагента = ЭлементТЗ.Владелец.Наименование;
			ОбластьСтроки.Параметры.НаименованиеПолное = ЭлементТЗ.Владелец.НаименованиеПолное;
			ОбластьСтроки.Параметры.ИНН = ЭлементТЗ.Владелец.ИНН;
			ОбластьСтроки.Параметры.КПП = ЭлементТЗ.Владелец.КПП;
			ТабДок.Вывести(ОбластьСтроки);
		КонецЕсли;
		
	КонецЦикла;
	ТабДок.Показать();
	
	
КонецПроцедуры

Функция СоздатьДоговор(Контрагент,НомерДоговора,ДатаДоговора,Валюта) Экспорт
	
	ПроверитьКонтрагента(Контрагент);
	НайденныйДоговор = НайтиДоговорКонтрагента(Контрагент,СокрЛП(НомерДоговора),Валюта);
	Если НайденныйДоговор.Пустая() Тогда
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорОбъект.Организация 	= Организация;
		ДоговорОбъект.Владелец 	    = Контрагент.ссылка;
		ДоговорОбъект.Номер 				= НомерДоговора;
		ДоговорОбъект.УстановитьНовыйКод("_");
		//ДоговорОбъект.абс_РегНомер          = СтрокаДоговора.РегНомер;
		ДоговорОбъект.Дата					= ДатаДоговора;
		ДоговорОбъект.абс_ДатаРегистрацииДоговора	= ДатаДоговора;
		
		ДоговорОбъект.абс_ДатаНачалаДействия		= ДатаДоговора;
		
		
		ДоговорОбъект.Наименование 			= "" + НомерДоговора + ?(ЗначениеЗаполнено(ДатаДоговора)," от " + Формат(ДатаДоговора,"ДФ=dd.MM.yyyy"),"");
		
		ДоговорОбъект.ВалютаВзаиморасчетов 	= Валюта;
		
		ДоговорОбъект.ВидДоговора			= Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Если  ДоговорОбъект.ВалютаВзаиморасчетов =Константы.ВалютаРегламентированногоУчета.Получить() 
			ИЛИ СокрЛП(Валюта.Код) ="36" ИЛИ СокрЛП(Валюта.Код) ="124" Тогда
			ДоговорОбъект.ВестиПоДокументамРасчетовСКонтрагентом =Ложь;	
		Иначе	
			ДоговорОбъект.ВестиПоДокументамРасчетовСКонтрагентом = Истина;
		КонецЕсли;
		ДоговорОбъект.абс_ТипДоговора       = Перечисления.абсТипыДоговоров.Договор;
		ДоговорОбъект.абс_ВидДоговора		= Справочники.абс_ПредметДоговораГК.ДоговорОказанияУслуг;
		ДоговорОбъект.ВедениеВзаиморасчетов	= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		ДоговорОбъект.абс_СтатусДоговора    = Перечисления.абсСтатусыДоговоров.Исполнение;;
		ДоговорОбъект.абс_Ответственный     = глЗначениеПеременной("глТекущийПользователь");
		
		//ДоговорОбъект.ОбменДанными.Загрузка = Истина;
		
		//Попытка
		ДоговорОбъект.Записать();
		Сообщить("Добавлен договор: " + ДоговорОбъект.Ссылка);
		
		Возврат ДоговорОбъект.Ссылка;
	Иначе
		Возврат НайденныйДоговор.Ссылка;
		
	КонецЕсли;
	
	//ЗаписатьНовыйСтатус(ДоговорОбъект.Ссылка,Перечисления.абсСтатусыДоговоров.Подготовка, "Загрузка данных");
	
КонецФункции

Процедура ПроверитьКонтрагента(Контрагент)
	
	Если Не Контрагент.Покупатель Тогда
		Об = Контрагент.ПолучитьОбъект();
		Об.Покупатель = Истина;
		Об.ОбменДанными.Загрузка = Истина;
		Об.Записать();
		Сообщить("Устанавливлен признак Покупатель для контрагента "+Контрагент);
	КонецЕсли;	
	
КонецПроцедуры

Процедура СоздатьСчетаНаОплату() Экспорт
	СозданныеДокументы.Очистить();
	СтруктураДокументов = Новый Структура("ДокументСчетНаОплату, ДокументРеализацияТиУ, ДокументСФ, Перезаписан");
	//Создадим документы Счет на оплату покупателя
	//По каждой уникальной строке ТЗ создаем свой счет на оплату.
	СтруктураПоиска = Новый Структура("FACTURENUM");
	ТЗБиллинга=ДанныеБиллинга.Выгрузить();
	ТЗСчетовНаОплату = ТЗБиллинга.Скопировать(,"FACTURENUM");
	ТЗСчетовНаОплату.Свернуть("FACTURENUM");
	Сч = 0;
	Кол = ТЗСчетовНаОплату.Количество();
	Для каждого СтрокаСчета Из ТЗСчетовНаОплату Цикл
		Сч = Сч+1;
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		Состояние("Обрабатывается "+Сч+" из "+Кол);
		#КонецЕсли
		//Осуществим проверку, можно ли загружать данный счет -
		//проверка осуществляется по всем строкам счета если 
		//хотябы одна строка счета некорректна, весь счет не будет загружен
		
		СтруктураПоиска.FACTURENUM = СтрокаСчета.FACTURENUM;
		НайденныеСтроки = ТЗБиллинга.НайтиСтроки(СтруктураПоиска);
		Если  НайденныеСтроки.Количество() =0 Тогда
			//Фатальная ошибка...
			Сообщить("Ошибка!!! Строки с номером: "+СтруктураПоиска.FACTURENUM+" в ТЗ Биллинга не найдены!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		//Проверяем все найденные строки на возможность загрузки Счета на оплату.
		Отказ = Ложь;
		ОтказПоОшибке = Ложь;
		Для Каждого СтрокаБиллинга Из НайденныеСтроки Цикл
			Если НЕ СтрокаБиллинга.Загружать ИЛИ НЕ СтрокаБиллинга.ЗагрузкаРазрешена	Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			Продолжить;
		КонецЦикла;	
		
		Если Отказ Тогда
			Продолжить;
			//Счет на оплату не создаем.
		КонецЕсли;
		
		Если НЕ НайденныеСтроки[0].СчетНаОплату.Пустая() Тогда
			//Документ уже существует, перезапишем его.
			ДокументСчет = НайденныеСтроки[0].СчетНаОплату.ПолучитьОбъект();
			ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
			ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента; 
			ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
			ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
			ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
			ДокументСчет.FACTUREEXTERNALID =НайденныеСтроки[0].FACTURENUM;
			ДокументСчет.номер =НайденныеСтроки[0].FACTURENUM;
			ДокументСчет.абс_СуммаНДСБиллинг =НайденныеСтроки[0].СуммаНДС; 
			ДокументСчет.Организация = Организация;
			ДокументСчет.УчитыватьНДС = Истина;
			ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
			
			Если ДокументСчет.Метаданные().ТабличныеЧасти.Найти("Менеджеры")<>Неопределено Тогда
				Если ДокументСчет.Менеджеры.Количество()=0 Тогда
					Строкаменеджеров = ДокументСчет.Менеджеры.Добавить();
					Строкаменеджеров.Описание = НайденныеСтроки[0].KURATOR;
				КонецЕсли;
			КонецЕсли;
			
			ДокументСчет.СуммаВключаетНДС = Ложь;
			Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
				ДокументСчет.КурсВзаиморасчетов =1;
			Иначе
				ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			ДокументСчет.КратностьВзаиморасчетов = 1;
			//Заполним ТЧ Услуги документа.
			ДокументСчет.Услуги.Очистить();
			Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
				НайдСтрокаУслуги = ДокументСчет.Услуги.найти(СтрокаУслуги.УникальныйИдентификаторЗаписи,"ИдСтроки");
				Если  НайдСтрокаУслуги = Неопределено Тогда
					НоваяСтрокаУслуг = ДокументСчет.Услуги.Добавить();
				Иначе
					НоваяСтрокаУслуг = НайдСтрокаУслуги;
				КонецЕсли;

					НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное;
					НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
					НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура; 
					НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
					НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
					НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
					НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
					
				
				
			КонецЦикла;
			НовыйДокумент =Ложь;
			
			
			//Документ
		Иначе
			
			//Создаем СчетНаОплату
			//
			НайдДокументСчетНаОплату = Документы.СчетНаОплатуПокупателю.НайтиПоРеквизиту("FACTUREEXTERNALID",НайденныеСтроки[0].FACTURENUM);
			Если НайдДокументСчетНаОплату.Пустая() Тогда
				ДокументСчет  = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
				НовыйДокумент = Истина;

			Иначе
				ДокументСчет =  НайдДокументСчетНаОплату.ПолучитьОбъект();
				НовыйДокумент =Ложь;
			КонецЕсли;
		
			ДокументСчет.абс_СуммаНДСБиллинг =НайденныеСтроки[0].СуммаНДС; 
			ДокументСчет.Дата = НайденныеСтроки[0].ДатаДокумента;
			ДокументСчет.УчитыватьНДС = Истина;
			ДокументСчет.ДатаОплаты = НайденныеСтроки[0].ДатаДокумента; 
			ДокументСчет.FACTUREEXTERNALID =НайденныеСтроки[0].FACTURENUM;
			ДокументСчет.Номер  =НайденныеСтроки[0].FACTURENUM;
			ДокументСчет.Контрагент =НайденныеСтроки[0].Контрагент;
			ДокументСчет.ДоговорКонтрагента = НайденныеСтроки[0].ДоговорКонтрагента;
			ДокументСчет.ВалютаДокумента = НайденныеСтроки[0].Валюта;
			ДокументСчет.Организация = Организация;
			ДокументСчет.СтруктурнаяЕдиница = СчетКасса;
			СуммаВключаетНДС = Ложь;
			Если ДокументСчет.Метаданные().ТабличныеЧасти.Найти("Менеджеры")<>Неопределено Тогда
				Если ДокументСчет.Менеджеры.Количество()=0 Тогда
					Строкаменеджеров = ДокументСчет.Менеджеры.Добавить();
					Строкаменеджеров.Описание = НайденныеСтроки[0].KURATOR;
				КонецЕсли;
			КонецЕсли;
			ДокументСчет.СуммаВключаетНДС = СуммаВключаетНДС;
			Если  НайденныеСтроки[0].Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
				ДокументСчет.КурсВзаиморасчетов =1;
			Иначе
				ДокументСчет.КурсВзаиморасчетов = ПолучитьКурс(НайденныеСтроки[0].ДатаДокумента, НайденныеСтроки[0].Валюта);
			КонецЕсли;
			ДокументСчет.КратностьВзаиморасчетов = 1;
			//Заполним ТЧ Услуги документа.
			Для каждого СтрокаУслуги ИЗ НайденныеСтроки Цикл
				НайдСтрокаУслуги = ДокументСчет.Услуги.найти(СтрокаУслуги.УникальныйИдентификаторЗаписи,"ИдСтроки");
				Если  НайдСтрокаУслуги = Неопределено Тогда
					НоваяСтрокаУслуг = ДокументСчет.Услуги.Добавить();
				Иначе
					НоваяСтрокаУслуг = НайдСтрокаУслуги;
				КонецЕсли;
	
					НоваяСтрокаУслуг.Содержание = СтрокаУслуги.Номенклатура.НаименованиеПолное;
					НоваяСтрокаУслуг.ИдСтроки = СтрокаУслуги.УникальныйИдентификаторЗаписи;
					НоваяСтрокаУслуг.Номенклатура = СтрокаУслуги.Номенклатура; 
					НоваяСтрокаУслуг.Количество = СтрокаУслуги.Количество;
					НоваяСтрокаУслуг.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
					НоваяСтрокаУслуг.Цена = СтрокаУслуги.Цена;
					НоваяСтрокаУслуг.Сумма = СтрокаУслуги.Сумма;
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуг, ДокументСчет);
					
								
			КонецЦикла;
					
		КонецЕсли;
		
		Попытка
			Если НовыйДокумент Тогда
				ДокументСчет.Записать();
				#Если Клиент Тогда
				Состояние("Создан документ: "+ДокументСчет.Ссылка);
				#КонецЕсли
				ДокСсылка = ДокументСчет.Ссылка;
				
			Иначе
				ДокументСчет.Записать();
				#Если Клиент Тогда
				Состояние("Перезаписан документ: "+ДокументСчет.Ссылка);
				#КонецЕсли
				ДокСсылка = ДокументСчет.Ссылка;
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		СтруктураДокументов.ДокументСчетНаОплату = ДокСсылка;
		
		
		//Если документ записан создадим документ реализация ТиУ на основании данного Счета
		//Если  НовыйДокумент Тогда
		//	СоздатьРеализациюТиУ(ДокСсылка, СтруктураДокументов);
		//Иначе
		//	СтруктураДокументов.перезаписан = Истина;
		//	ПерезаписатьДокументы(ДокСсылка,СтруктураДокументов);
		//	
		//КонецЕсли;
		//
		НСоздДок = СозданныеДокументы.Добавить();
		НСоздДок.ДокументСчетНаОплату = ДокСсылка;
		//ЗаполнитьЗначенияСвойств(НСоздДок, СтруктураДокументов);		
	КонецЦикла;
	
	//Обновление колонки СчетНаОплату в таблице ДанныеБиллинга
	Таб = СозданныеДокументы.Выгрузить();
	Таб.Свернуть("ДокументСчетНаОплату");
	Для Каждого Стр Из Таб Цикл
		Если ЗначениеЗаполнено(Стр.ДокументСчетНаОплату) Тогда
			СтруктураОтбора = Новый Структура("FACTURENUM");
			СтруктураОтбора.Вставить("FACTURENUM",СокрЛП(Стр.ДокументСчетНаОплату.FACTUREEXTERNALID));
			НайденныеСтроки = ДанныеБиллинга.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайдСтрока Из НайденныеСтроки Цикл
				НайдСтрока.СчетНаОплату = Стр.ДокументСчетНаОплату;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабСчетов.ДокументСчетНаОплату
	               |ПОМЕСТИТЬ ВТСчета
	               |ИЗ
	               |	&ТабСчетов КАК ТабСчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализацияТиУ,
	               |	ВТСчета.ДокументСчетНаОплату КАК ДокументСчетНаОплату,
	               |	СФ.Ссылка КАК ДокументСФ
	               |ИЗ
	               |	ВТСчета КАК ВТСчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ВТСчета.ДокументСчетНаОплату = РеализацияТоваровУслуг.абс_СчетНаОплатуПокупателю
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	               |			СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование.абс_СчетНаОплатуПокупателю КАК ДокументОснованиеабс_СчетНаОплатуПокупателю
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |		ГДЕ
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг) КАК СФ
	               |		ПО ВТСчета.ДокументСчетНаОплату = СФ.ДокументОснованиеабс_СчетНаОплатуПокупателю";
	Запрос.УстановитьПараметр("ТабСчетов",Таб);
	СозданныеДокументы.Загрузить(Запрос.Выполнить().Выгрузить());
	Сч = 0;
	Кол = СозданныеДокументы.Количество();
	Для Каждого Стр Из СозданныеДокументы Цикл
		  Сч = Сч+1;
		  #Если Клиент Тогда
		 Состояние("Обрабатывается "+Сч+" из "+Кол);
		 #КонецЕсли
		Если ЗначениеЗаполнено(Стр.ДокументРеализацияТиУ) И ЗначениеЗаполнено(Стр.ДокументСФ) Тогда
				ПерезаписатьДокументы(Стр);

		ИначеЕсли Не ЗначениеЗаполнено(Стр.ДокументРеализацияТиУ) И Не ЗначениеЗаполнено(Стр.ДокументСФ) Тогда
				СоздатьРеализациюТиУ(Стр);


		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

Процедура ПерезаписатьДокументы(СтрокаТЧ,СтруктураДокументов = Неопределено)
	ДокСсылка = СтрокаТЧ.ДокументСчетНаОплату;
	
	//Запрос=Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	РеализацияТоваровУслуг.Ссылка
	//|ИЗ
	//|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//|ГДЕ
	//|	РеализацияТоваровУслуг.абс_СчетНаОплатуПокупателю = &абс_СчетНаОплатуПокупателю
	//|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ";
	//Запрос.УстановитьПараметр("абс_СчетНаОплатуПокупателю",ДокСсылка);
	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//
	//Если  РезультатЗапроса.Количество() =0 Тогда
	//	//Если реализация отсутствует создаем реализацию и выходим
	//	СоздатьРеализациюТиУ(СтрокаТЧ);
	//	Возврат;
	//КонецЕсли;
	
	//РезультатЗапроса.Следующий();
	ДокРеализацияТиУ =  СтрокаТЧ.ДокументРеализацияТиУ.Ссылка.ПолучитьОбъект();
	ДокРеализацияТиУ.Услуги.Очистить();
	ДокРеализацияТиУ.Дата = ДокСсылка.Дата;
	ДокРеализацияТиУ.Заполнить(ДокСсылка);
	ДокРеализацияТиУ.Сделка = ДокСсылка;
	ДокРеализацияТиУ.КурсВзаиморасчетов =ДокСсылка.КурсВзаиморасчетов;
	ДокРеализацияТиУ.КратностьВзаиморасчетов =ДокСсылка.КратностьВзаиморасчетов;
	Попытка
		ДокРеализацияТиУ.Записать();
		СтрокаТЧ.ДокументРеализацияТиУ =ДокРеализацияТиУ.Ссылка; 
		//Сообщить("Документ "+ДокРеализацияТиУ.Ссылка + " Перезаписан! ")	;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	//СтруктураДокументов.ДокументРеализацияТиУ = ДокРеализацияТиУ.Ссылка;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = " ВЫБРАТЬ
	//|	СчетФактураВыданный.Ссылка
	//|ИЗ
	//|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	//|ГДЕ
	//|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	//|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ";
	//Запрос.УстановитьПараметр("ДокументОснование",ДокРеализацияТиУ.Ссылка );
	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//Если  РезультатЗапроса.Количество() =0 Тогда
	//	Возврат;
	//КонецЕсли;
	//РезультатЗапроса.Следующий();
	ДокСФ =  СтрокаТЧ.ДокументСФ.Ссылка.ПолучитьОбъект();
	ДокСФ.Дата = ДокРеализацияТиУ.Ссылка.Дата;
	ДокСФ.ДокументыОснования.Очистить();
	ДокСФ.Заполнить(ДокРеализацияТиУ.Ссылка);
	Попытка
		ДокСФ.Записать();
		СтрокаТЧ.ДокументСФ =ДокСФ.Ссылка;
		//Сообщить("Документ "+ДокСФ.Ссылка + " Перезаписан! ")	;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	//СтруктураДокументов.ДокументСФ = ДокСФ.Ссылка;
	
КонецПроцедуры

Функция ПолучитьКурс(Дата, Валюта)
	Отбор=Новый Структура("Валюта");
	Отбор.Валюта = Валюта; 
	ПоследняяЗапись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата,Отбор);
	Если ПоследняяЗапись.Количество()>0 Тогда
		Возврат ПоследняяЗапись.Курс;
	Иначе
		Возврат 1;
	КонецЕсли
КонецФункции

Процедура СоздатьРеализациюТиУ(СтрокаТЧ, СтруктураДокументов = Неопределено)
	
	ДокСсылка = СтрокаТЧ.ДокументСчетНаОплату;

	ДокРеализацияТиУ = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	ДокРеализацияТиУ.Дата = ДокСсылка.Дата;
	ДокРеализацияТиУ.Заполнить(ДокСсылка);
	ДокРеализацияТиУ.Сделка = ДокСсылка;
	Если ЗначениеЗаполнено(ДокСсылка.FACTUREEXTERNALID) Тогда
		ДокРеализацияТиУ.Номер = ДокСсылка.FACTUREEXTERNALID;
	КонецЕсли;
	Попытка
		ДокРеализацияТиУ.Записать(РежимЗаписиДокумента.Запись);
		СтрокаТЧ.ДокументРеализацияТиУ =ДокРеализацияТиУ.Ссылка; 
		//Сообщить("Документ "+ДокРеализацияТиУ.Ссылка + " Записан! ");
	Исключение
		ДокРеализацияТиУ.Записать(РежимЗаписиДокумента.Запись);
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	//СтруктураДокументов.ДокументРеализацияТиУ = ДокРеализацияТиУ.Ссылка;
	Если Не ЗначениеЗаполнено(ДокРеализацияТиУ.Ссылка) Тогда
		возврат;
	КонецЕсли;	
	
	//Попытаемся найти счет фактуру
	СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокРеализацияТиУ.Ссылка, "СчетФактураВыданный", Неопределено);
	
	ОбъектСчетаФактуры = Неопределено;
	
	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (Не ЗначениеЗаполнено(СчетФактура)) Тогда
		//Вводим новый документ на основании нашего
		
		ОбъектСчетаФактуры = Документы["СчетФактураВыданный"].СоздатьДокумент();
		// Если установлен отбор по виду счета-фактуры (на реализацию/на аванс...) - устанавливаем его в новом документе
		ОбъектСчетаФактуры.Заполнить(ДокРеализацияТиУ.Ссылка);
		ОбъектСчетаФактуры.Номер = ДокРеализацияТиУ.Ссылка.Номер;
		ОбъектСчетаФактуры.Дата  = ДокРеализацияТиУ.Ссылка.Дата;
		// Откроем форму для редактирования счета фактуры
		ОбъектСчетаФактуры.Записать();
		СтрокаТЧ.ДокументСФ =ОбъектСчетаФактуры.Ссылка;
		//СтруктураДокументов.ДокументСФ = ОбъектСчетаФактуры.Ссылка;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ВнестиИзмененияВSQL() Экспорт
	СтруктураПолей = Новый Структура("NOMERPLATEJKI,DATAPLATEJKI,EXTERNALLINEID,SESSIONERRORLOG,SESSIONISOK");
	Кол =0;	
	Для Каждого Стр Из ДанныеБиллинга Цикл
		
		Если ЗначениеЗаполнено(Стр.NOMERPLATEJKI) 
			ИЛИ ЗначениеЗаполнено(Стр.DATAPLATEJKI)
			ИЛИ СокрЛП(Стр.SESSIONERRORLOG)<>"1"
			Тогда
			Кол = Кол+1;	 
		КонецЕсли;
		
		
	КонецЦикла;
	
	Сч = 0;
	Для Каждого Стр Из ДанныеБиллинга Цикл
		
		//Если Стр.Загружать И Стр.ЗагрузкаРазрешена Тогда
		Если ЗначениеЗаполнено(Стр.NOMERPLATEJKI) 
			ИЛИ ЗначениеЗаполнено(Стр.DATAPLATEJKI)
			ИЛИ СокрЛП(Стр.SESSIONERRORLOG)<>"1"
			Тогда
			сч = Сч+1;
			#Если Клиент Тогда
			состояние("Обрабатывается "+Сч+" из "+Кол);
			#КонецЕсли
			СтруктураПолей.Вставить("NOMERPLATEJKI",Стр.NOMERPLATEJKI);
			СтруктураПолей.Вставить("DATAPLATEJKI",Стр.DATAPLATEJKI);
			СтруктураПолей.Вставить("SESSIONERRORLOG",Стр.SESSIONERRORLOG);
			СтруктураПолей.Вставить("SESSIONISOK",Стр.SESSIONISOK);
			СтруктураПолей.Вставить("EXTERNALLINEID",Стр.EXTERNALLINEID);
			
			ОбновитьДанныеВSQL(СтруктураПолей);
		КонецЕсли;
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДанныеВSQL(СтруктураПолей) Экспорт
	
	NOMERPLATEJKI = СтруктураПолей.NOMERPLATEJKI;
	DATAPLATEJKI = Формат(СтруктураПолей.DATAPLATEJKI,"ДФ=yyyyMMdd");
	Если Не ЗначениеЗаполнено(DATAPLATEJKI) Тогда
		DATAPLATEJKI = '00010101';
	КонецЕсли;
	
	EXTERNALLINEID = СтруктураПолей.EXTERNALLINEID;
	SESSIONERRORLOG = СтруктураПолей.SESSIONERRORLOG;
	SESSIONISOK = СтруктураПолей.SESSIONISOK;
	Если ЗначениеЗаполнено(NOMERPLATEJKI) 
		ИЛИ ЗначениеЗаполнено(DATAPLATEJKI)
		ИЛИ ЗначениеЗаполнено(SESSIONERRORLOG)
		ИЛИ ЗначениеЗаполнено(SESSIONISOK) Тогда
		ТекстЗапроса = 
		"UPDATE TTLEDGERJOURNALTRANSBILLING
		|SET "+?(ЗначениеЗаполнено(NOMERPLATEJKI)," NOMERPLATEJKI = '"+ NOMERPLATEJKI+"',","")+"
		|"+?(ЗначениеЗаполнено(DATAPLATEJKI)," DATAPLATEJKI  = '"+DATAPLATEJKI+"',","")+" 
		|SESSIONERRORLOG = '"+SESSIONERRORLOG+"',
		|SESSIONISOK = '"+SESSIONISOK+"'
		| WHERE  EXTERNALLINEID = "+EXTERNALLINEID;
		
		
		
		абс_СерверныеФункции.ОбновитьДанныеВSQL(ТекстЗапроса,СтруктураПодключения);
	КонецЕсли;	
КонецПроцедуры

Функция ЕстьЧисло(Текст) Экспорт
	
	ПервыйЗнакЧисло = Ложь;
	ПоследнийЗнакЧисло = Ложь;
	МассивЦифр = Новый Массив;
	МассивЦифр.Добавить("1");
	МассивЦифр.Добавить("2");
	МассивЦифр.Добавить("3");
	МассивЦифр.Добавить("4");
	МассивЦифр.Добавить("5");
	МассивЦифр.Добавить("6");
	МассивЦифр.Добавить("7");
	МассивЦифр.Добавить("8");
	МассивЦифр.Добавить("9");
	МассивЦифр.Добавить("0");
	поз = 0;
	Для Каждого Элемент Из МассивЦифр Цикл
		Если Найти(Текст,Элемент)>0 Тогда
			Возврат Найти(Текст,Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат 0;
	
КонецФункции

//Настройки подключения КТТК

СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
СтруктураПодключения.Вставить("Provider","kttk-1c-db");	
СтруктураПодключения.Вставить("DataSource","billing_old");	
СтруктураПодключения.Вставить("UserID","billing_old");	
СтруктураПодключения.Вставить("Password","jVxBPBZ2");

////Настройки подключения Абсолют-Софт
//СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
//СтруктураПодключения.Вставить("Provider","bd");	
//СтруктураПодключения.Вставить("DataSource","billing_old");	
//СтруктураПодключения.Вставить("UserID","sa");	
//СтруктураПодключения.Вставить("Password","AbsoluTSofT");

