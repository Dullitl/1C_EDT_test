Перем мВалютаРегламентированногоУчета Экспорт;

Перем мТекущийПользователь;
Перем мРолиПользователя;

// Если закупочный заказ перезаписывается из договора 
// то заполняется переменная мТекущийДоговор
// Признак согласования текущего договора попадает в переменную м ДоговорСогласован.
Перем мТекущийДоговор Экспорт;
Перем мДоговорСогласован Экспорт;

Перем мСменаОтветственногоДирККР Экспорт;
//ххх Брель Виктор Андреевич 27.04.2018 15:25:47, заявка <<<
Перем СтатусПоРегистру Экспорт;
// Брель Виктор Андреевич 27.04.2018 15:25:47 >>>

Перем мИзмененГрафикОплат Экспорт;
Перем мИзмененГрафикПоставок Экспорт;

Перем мРедактированиеСчетаУчета Экспорт;
Перем мСтруктураЗЗТоварыДоИзмененияСпецификации;
// АБС ВСТАВКА Начало
Перем мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа Экспорт;
// АБС ВСТАВКА Конец
Перем врПрошлыйСтатус;

//абс_Стрельцов+ добавлено: 17.09.2012
//при переносе ПУ
Перем мПроведениеПоМеханизмуПроектногоУчета;
//
//абс_Стрельцов-

//АБС_Стрельцов+ добавлено: 12.10.2012
//новое для ПУ
Перем мТаблицаПустыхПроектов;
Перем мТаблицаНеПустыхПроектов;
//
//АБС_Стрельцов-
//АБС ВСТАВКА 48294  01.10.2014 15:17:39  Шамов
Перем мКонтрольАналитикПройден Экспорт;
//АБС ВСТАВКА 48294 КОНЕЦ

// {{ТТК Сладков А. Заявка № 31.10.2016 начало	
Перем ПредыдущийСтатусПоРегистру;
// {{ТТК Сладков А. Заявка № 31.10.2016 начало

//АБС НАЧАЛО Задача №08759
Функция ПостроениеТаблицыВариантовАналитик(Дата, Знач СтруктураАналитик)
	
	СтруктураЗаполненныхАналитик = Новый Структура;
	Для каждого ЭлементСтруктуры из СтруктураАналитик Цикл
		// 20111114 Фролов Бага
		// Проблема в том что механизм построения аналитик отключен, но т.к. аналитика не заполнена по ней не происходит отборов
		// следовательно механизм не до конца отключен.
		//Если ЗначениеЗаполнено(ЭлементСтруктуры.значение) Тогда
		СтруктураЗаполненныхАналитик.Вставить(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
		//КонецЕсли;		
	КонецЦикла;
	
	// АБС ВСТАВКА Фролов 20120125 Не используем регистр установленных аналитик
	// т.к. аналитики все заполняются полостью.
	Возврат СтруктураЗаполненныхАналитик;
	
	//по СтруктураЗаполненныхАналитик создадим таблицу со всевозможными сочетаниями аналитик
	ТаблицаВариантовАналитик = Новый ТаблицаЗначений;
	ТаблицаВариантовАналитик.Колонки.Добавить("Структура");
	ТаблицаВариантовАналитик.Колонки.Добавить("Уровень");
	ТаблицаВариантовАналитик.Колонки.Добавить("Код");
	
	
	НоваяСтрока = ТаблицаВариантовАналитик.Добавить();
	НоваяСтрока.Структура = СтруктураЗаполненныхАналитик;
	НоваяСтрока.Уровень = СтруктураЗаполненныхАналитик.Количество();
	НоваяСтрока.Код = СформироватьКодСтруктуры(НоваяСтрока.Структура);
	
	МассивОбязательныхАналитик = Новый Массив;
	МассивОбязательныхАналитик.Добавить("СтатьяОборотов");
	МассивОбязательныхАналитик.Добавить("Организация");
	МассивОбязательныхАналитик.Добавить("абс_ЦФУ");
	МассивОбязательныхАналитик.Добавить("ЦФО");
	МассивОбязательныхАналитик.Добавить("абс_ТЭО");
	МассивОбязательныхАналитик.Добавить("абс_ТипСети");
	МассивОбязательныхАналитик.Добавить("абс_КВ");
	МассивОбязательныхАналитик.Добавить("абс_ТипКонтрагента");
	МассивОбязательныхАналитик.Добавить("абс_ТипРасхода");
	
	//
	//Если Найти(СтруктураАналитик.абс_ЦФУ.Наименование,"Связь")>0  Тогда
	//	Если Найти(СтруктураАналитик.СтатьяОборотов.Наименование,"КВ по поставке")>0 Тогда
	//		МассивОбязательныхАналитик.Добавить("абс_ТЭО");
	//		МассивОбязательныхАналитик.Добавить("абс_ТипСети");
	//	КонецЕсли; 		
	//КонецЕсли;
	//Если Найти(СтруктураАналитик.абс_ЦФУ.Наименование,"Администрация")>0  или Найти(СтруктураАналитик.абс_ЦФУ.Наименование,"Эксплуатация")>0 Тогда
	//	Если Найти(СтруктураАналитик.СтатьяОборотов.Наименование,"КВ по поставке")>0 Тогда
	//		МассивОбязательныхАналитик.Добавить("абс_КВ");			
	//	КонецЕсли; 		
	//КонецЕсли;	
	
	
	ЗаполнитьТаблицуВариантовАналитик(СтруктураЗаполненныхАналитик,ТаблицаВариантовАналитик, МассивОбязательныхАналитик);
	ТаблицаВариантовАналитик.Сортировать("Уровень Убыв");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// АБС ИЗМЕНЕНО Фролов 20110125 Необходимо проверять лимит на текущую дату.
	//Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Дата",КонецГода(Дата));
	Запрос.Текст=
	"ВЫБРАТЬ
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.СтатьяОборотов КАК СтатьяОборотов,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.ЦФО,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипКонтрагента КАК абс_ТипКонтрагента,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипСети КАК абс_ТипСети,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_КВ КАК абс_КВ,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТЭО КАК абс_ТЭО,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ЦФУ КАК абс_ЦФУ,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипРасхода КАК абс_ТипРасхода,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.Организация
	|ПОМЕСТИТЬ ВТ_ЛимитыПоСтатьям
	|ИЗ
	|	РегистрСведений.абс_УстановкаЛимитовПоСтатьям.СрезПоследних(&Дата, ) КАК абс_УстановкаЛимитовПоСтатьямСрезПоследних";
	
	Запрос.Выполнить();
	
	Для каждого ВариантНабораАналитик из ТаблицаВариантовАналитик Цикл
		
		УсловиеОтбора = "";
		Для каждого ЭлементСтруктуры из ВариантНабораАналитик.Структура Цикл
			УсловиеОтбора = УсловиеОтбора+" И ВТЛимитыПоСтатьям."+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ;
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
		КонецЦикла;
		УсловиеОтбора = СокрЛП(Сред(УсловиеОтбора,3));
		
		Запрос.Текст=
		"ВЫБРАТЬ *
		|ИЗ
		|	ВТ_ЛимитыПоСтатьям КАК ВТЛимитыПоСтатьям
		|ГДЕ
		|"+УсловиеОтбора;
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			возврат ВариантНабораАналитик.Структура;			
		КонецЕсли;
	КонецЦикла;
	возврат Неопределено;
КонецФункции

Процедура ЗаполнитьТаблицуВариантовАналитик(ЗНАЧ СтруктураЗаполненныхАналитик,ТаблицаВариантовАналитик, МассивОбязательныхАналитик)
	Для каждого УдаляемыйЭлементСтруктуры из СтруктураЗаполненныхАналитик Цикл
		Если МассивОбязательныхАналитик.Найти(УдаляемыйЭлементСтруктуры.Ключ)<>неопределено Тогда			
			продолжить;
		КонецЕсли;
		
		//создаем копию структуры без этого элемента
		КопияСтруктуры = Новый Структура;
		
		Для каждого ЭлементСтруктуры из СтруктураЗаполненныхАналитик Цикл
			Если УдаляемыйЭлементСтруктуры.Ключ = ЭлементСтруктуры.Ключ Тогда
				продолжить;
			КонецЕсли;
			
			КопияСтруктуры.Вставить(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
			
		КонецЦикла;
		
		КодКопииСтруктуры = СформироватьКодСтруктуры(КопияСтруктуры);
		Если КопияСтруктуры.Количество()>0 и ТаблицаВариантовАналитик.Найти(КодКопииСтруктуры,"Код")=неопределено Тогда
			НоваяСтрока = ТаблицаВариантовАналитик.Добавить();
			НоваяСтрока.Структура = КопияСтруктуры;
			НоваяСтрока.Уровень = КопияСтруктуры.Количество();
			НоваяСтрока.КОД = КодКопииСтруктуры;
			Если КопияСтруктуры.Количество()>1 Тогда
				ЗаполнитьТаблицуВариантовАналитик(КопияСтруктуры,ТаблицаВариантовАналитик, МассивОбязательныхАналитик);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьВсехРодителейПроекта(ТекущийПроект, СписокГрупп)
	
	РодительПроекта = ТекущийПроект.Родитель;
	Если РодительПроекта.Пустая() Тогда
		Возврат;
	Иначе
		Если РодительПроекта.абс_Case Тогда 
			СписокГрупп.Добавить(РодительПроекта);
		КонецЕсли;		
		ПолучитьВсехРодителейПроекта(РодительПроекта, СписокГрупп)
	КонецЕсли;	                      
	
КонецПроцедуры

Функция ОстатокЛимитаПоБюджету(Дата1, Дата2,СтруктураАналитик, НефиксированнаяСумма = Ложь, ЗакупочныйЗаказ = Неопределено)
	
	ВариантСтруктуры = ПостроениеТаблицыВариантовАналитик(Дата2,СтруктураАналитик);
	Если ВариантСтруктуры = Неопределено Тогда
		возврат -2;
	КонецЕсли;
	
	//нашли набор аналитик, по которым лимиты есть
	Запрос = НОВЫЙ Запрос;
	Запрос.УстановитьПараметр("Дата1",Дата1);
	Запрос.УстановитьПараметр("Дата2",Дата2);
	
	УсловиеОтбора = "";
	Для каждого ЭлементСтруктуры из ВариантСтруктуры Цикл
		
		// АБС ВСТАВКА 20120205 Отключаем контроль по аналитике "Тип контрагента", "Тип сети"
		// Инициатор: Калымкин
		
		Если ЭлементСтруктуры.Ключ = "абс_ТипКонтрагента" ИЛИ ЭлементСтруктуры.Ключ = "абс_ТипСети" Тогда
			Продолжить;
		КонецЕсли;
		
		// АБС ВСТАВКА 20120205 Отключаем контроль по аналитике "Тип контрагента", "Тип сети" КОНЕЦ
		
		//АБС НАЧАЛО Задача №08759
		//УсловиеОтбора = УсловиеОтбора+" И "+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ;
		Если ЭлементСтруктуры.Ключ = "Проект" Тогда
			УсловиеОтбора = УсловиеОтбора+" И "+ЭлементСтруктуры.Ключ+" В ИЕРАРХИИ(&"+ЭлементСтруктуры.Ключ+")";	
		Иначе
			УсловиеОтбора = УсловиеОтбора+" И "+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ;	
		КонецЕсли;
		//\\АБС КОНЕЦ Задача №08759
		
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
	КонецЦикла;
	УсловиеОтбора = СокрЛП(Сред(УсловиеОтбора,3));
	
	//Если Не НефиксированнаяСумма Тогда //АБС Коломиец 4870
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот, 0) - ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот, 0) < 0
	|					ИЛИ КонтролируемыеЗначенияБюджетовОбороты.Проект В (&Проект)
	|				ТОГДА ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот, 0) - ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Остаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот, 0) - ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот, 0) < 0
	|			ТОГДА ВЫБОР
	|					КОГДА КонтролируемыеЗначенияБюджетовОбороты.Проект.ЭтоГруппа
	|						ТОГДА КонтролируемыеЗначенияБюджетовОбороты.Проект
	|					ИНАЧЕ КонтролируемыеЗначенияБюджетовОбороты.Проект.Родитель
	|				КОНЕЦ
	|		ИНАЧЕ КонтролируемыеЗначенияБюджетовОбороты.Проект
	|	КОНЕЦ КАК Проект
	|ИЗ
	|	РегистрНакопления.КонтролируемыеЗначенияБюджетов.Обороты(&Дата1, &Дата2, , "+УсловиеОтбора+") КАК КонтролируемыеЗначенияБюджетовОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот, 0) - ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот, 0) < 0
	|			ТОГДА ВЫБОР
	|					КОГДА КонтролируемыеЗначенияБюджетовОбороты.Проект.ЭтоГруппа
	|						ТОГДА КонтролируемыеЗначенияБюджетовОбороты.Проект
	|					ИНАЧЕ КонтролируемыеЗначенияБюджетовОбороты.Проект.Родитель
	|				КОНЕЦ
	|		ИНАЧЕ КонтролируемыеЗначенияБюджетовОбороты.Проект
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Остаток";
	
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Попытка
	//		возврат Выборка.План-Выборка.Факт;                         
	//	Исключение
	//		возврат -1;
	//	КонецПопытки;
	//Иначе
	//	возврат -1;
	//КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции

Функция СформироватьКодСтруктуры(Структура)
	Код = "";
	Если Структура.Свойство("Организация") Тогда
		Код = Код+"0";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ЦФУ") Тогда
		Код = Код+"1";
	КонецЕсли;
	
	Если Структура.Свойство("ЦФО") Тогда
		Код = Код+"2";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ТипРасхода") Тогда
		Код = Код+"3";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ТипКонтрагента") Тогда
		Код = Код+"4";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ТипСети") Тогда
		Код = Код+"5";
	КонецЕсли;
	
	Если Структура.Свойство("абс_КВ") Тогда
		Код = Код+"6";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ТЭО") Тогда
		Код = Код+"7";
	КонецЕсли;
	
	Если Структура.Свойство("СтатьяОборотов") Тогда
		Код = Код+"8";
	КонецЕсли;
	
	возврат Код;
	
КонецФункции

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	//жестко переопределяем префикс
	Префикс = Прав(СокрЛП(Год(Дата)),2)+Формат(Месяц(Дата), "ЧЦ=2; ЧДЦ=0; ЧВН=");	
	//АБС ВСТАВКА   17.11.2014 10:20:51  Шамов
	//ПрефиксОрганизации = Организация.Префикс;
	//ВремПрефикс = "";
	//Если ЗначениеЗаполнено(ПрефиксОрганизации) Тогда  			
	//	//АБС ВСТАВКА 46015  24.09.2014 13:00:44  Шамов
	//	Запрос = Новый Запрос();
	//	Запрос.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.абс_ВидыДокументовДляНумерацииСКодомРегиона ГДЕ ВидДокумента = &ВидДокумента";
	//	Запрос.УстановитьПараметр("ВидДокумента", ЭтотОбъект.Метаданные().Имя);
	//	Результат = Запрос.Выполнить();
	//	
	//	Если Не Результат.Пустой() Тогда 
	//		ДатаНачалаНумерацииСКодамиРегионов = '00010101';
	//		НастройкиОрганизации = абс_НастройкиСистемы.ПолучитьНастройкиДляОрганизации(Организация);			
	//		Если НастройкиОрганизации.Свойство("ДатаНачалаНумерацииСКодамиРегионов") Тогда					
	//			ДатаНачалаНумерацииСКодамиРегионов = НастройкиОрганизации.ДатаНачалаНумерацииСКодамиРегионов;
	//		Иначе
	//			НастройкиОрганизации = абс_НастройкиСистемы.ПолучитьНастройкиДляОрганизации(Справочники.Организации.ПустаяСсылка());
	//			Если НастройкиОрганизации.Свойство("ДатаНачалаНумерацииСКодамиРегионов") Тогда					
	//				ДатаНачалаНумерацииСКодамиРегионов = НастройкиОрганизации.ДатаНачалаНумерацииСКодамиРегионов;
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЗначениеЗаполнено(ДатаНачалаНумерацииСКодамиРегионов)
	//			И ДатаНачалаНумерацииСКодамиРегионов <= Дата Тогда
	//			КодРегионаОрганизации = ОбщегоНазначения.УбратьНечисловыеСимволы(Организация.абс_КодРегиона);	
	//			Если ЗначениеЗаполнено(КодРегионаОрганизации) Тогда
	//				ВремПрефикс = ПрефиксОрганизации + "/" + КодРегионаОрганизации + "/";	
	//			КонецЕсли;	
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//Префикс = ВремПрефикс + Префикс;
	//АБС ВСТАВКА  КОНЕЦ 
	
КонецПроцедуры

//АБС_Стрельцов+ добавлено: 26.10.2012
//процедура заполнения графика поставок и графика оплат
//из регистра сведений "Условия оплаты по договорам" по переданному расходному договору документа
//
Процедура ВыполнитьЗаполнениеГрафиков(ДоговорИсточник) Экспорт
	
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:01:54  Поставка 
	Если Не глЗначениеПеременной("абс_ПроведениеПоМеханизмуПроектногоУчета") Тогда
		Возврат;
	КонецЕСли;
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ	
	
	ТЗПроектов = ДоговорИсточник.абс_Проекты.Выгрузить(, "Проект");		
	ТЗПроектов.Свернуть("Проект");
	Если ТЗПроектов.Количество() = 0 Тогда
		Возврат;
	КонецЕСли;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ПроектыДоговора", ТЗПроектов.ВыгрузитьКолонку("Проект"));
	ПараметрыЗапроса.Вставить("РасходныйДоговорДокумента", ДоговорИсточник);
	ПараметрыЗапроса.Вставить("ДатаОплат", 		КонецГода(ГодОплат));
	ПараметрыЗапроса.Вставить("ДатаПоставок", 	КонецГода(ГодПоставок));
	
	РезультатЗапроса = абс_СерверныеФункции.ПолучитьРезультатЗапросаДляЗаполненияГрафиков(ПараметрыЗапроса);
	
	ЕСли РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕСли;
	
	#Если Клиент Тогда
		
		Если Вопрос("Заполнить автоматически данные распределения проектов, графика оплат и графика поставок на основании данных проектов у выбранного договора?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Вопрос на продолжение действия")
			= КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	#КонецЕсли
	
	Если РаспределениеПоПроектам.Количество()>0 Тогда 
		РаспределениеПоПроектам.Очистить();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ВалютнаяСуммаБезНДС, ВалютнаяСуммаСНДС, ВалютнаяСуммаНДС, СуммаБезНДС, СуммаНДС, СуммаСНДС", 0, 0, 0, 0, 0, 0);
	
	Для Каждого СтрокаГрафика Из ГрафикОплат Цикл
		Если СтрокаГрафика.НомерСтроки = ГрафикОплат.Количество() Тогда
			Прервать;
		КонецЕСли;
		ЗаполнитьЗначенияСвойств(СтрокаГрафика, СтруктураРеквизитов);
	КонецЦикла;
	
	Для Каждого СтрокаГрафика Из ГрафикПоставок Цикл
		Если СтрокаГрафика.НомерСтроки = ГрафикПоставок.Количество() Тогда
			Прервать;
		КонецЕСли;
		ЗаполнитьЗначенияСвойств(СтрокаГрафика, СтруктураРеквизитов);
	КонецЦикла;
	
	ДеревоРезультат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаДерева0 Из ДеревоРезультат.Строки Цикл
		
		ТаблЧасть = ЭтотОбъект[СтрокаДерева0.ВидГрафика];
		
		Для Каждого СтрокаДерева1 Из СтрокаДерева0.Строки Цикл
			
			СтрокаТЧ = ТаблЧасть.Найти(СтрокаДерева1.Период, "Период");
			
			Если СтрокаТЧ = Неопределено Тогда
				Продолжить;
			КонецЕСли;
			
			СтрРП = РаспределениеПоПроектам.Найти(СтрокаДерева1.Проект, "Проект");
			Если СтрРП = Неопределено Тогда
				СтрРП = РаспределениеПоПроектам.Добавить();
				СтрРП.Проект = СтрокаДерева1.Проект;
				СтрРП.ДоляРаспределения = 1;
			КонецЕСли;
			
			СтрокаТЧ.Период = СтрокаДерева1.Период;
			СтрокаТЧ.СуммаСНДС = СтрокаТЧ.СуммаСНДС + СтрокаДерева1.СуммаСНДС;
			
			ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСДокумента);
			
			//пересчитаем суммы НДС и без НДС...
			СтрокаТЧ.СуммаНДС 	 = Окр(СтрокаТЧ.СуммаСНДС * ПроцентНДС / (100 + ПроцентНДС), 2);
			СтрокаТЧ.СуммаБезНДС = СтрокаТЧ.СуммаСНДС - СтрокаТЧ.СуммаНДС;
			
			// Пересчитаем в валюту документа...
			СтрокаТЧ.ВалютнаяСуммаСНДС = МодульВалютногоУчета.ПересчитатьВСуммуРегл(
			СтрокаТЧ.СуммаСНДС, ВалютаДокумента, мВалютаРегламентированногоУчета, Дата);
			
			СтрокаТЧ.ВалютнаяСуммаНДС 	 = Окр(СтрокаТЧ.ВалютнаяСуммаСНДС * ПроцентНДС / (100 + ПроцентНДС), 2);
			СтрокаТЧ.ВалютнаяСуммаБезНДС = СтрокаТЧ.ВалютнаяСуммаСНДС - СтрокаТЧ.ВалютнаяСуммаНДС;
			
			Если ТаблЧасть.Количество()>12 Тогда
				
				СтрокаИтог = ТаблЧасть[ТаблЧасть.Количество() - 2]; 			
				СтрокаИтог.СуммаСНДС = СтрокаИтог.СуммаСНДС + СтрокаДерева1.СуммаСНДС;
				СтрокаИтог.ВалютнаяСуммаСНДС = МодульВалютногоУчета.ПересчитатьВСуммуРегл(
				СтрокаИтог.СуммаСНДС, ВалютаДокумента, мВалютаРегламентированногоУчета, Дата);												
				СтрокаИтог.СуммаНДС = Окр(СтрокаИтог.СуммаСНДС * ПроцентНДС / (100 + ПроцентНДС), 2);
				СтрокаИтог.ВалютнаяСуммаНДС = Окр(СтрокаИтог.ВалютнаяСуммаСНДС * ПроцентНДС / (100 + ПроцентНДС), 2);   				
				СтрокаИтог.СуммаБезНДС = СтрокаИтог.СуммаСНДС - СтрокаИтог.СуммаНДС;
				СтрокаИтог.ВалютнаяСуммаБезНДС = СтрокаИтог.ВалютнаяСуммаСНДС - СтрокаИтог.ВалютнаяСуммаНДС;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если РаспределениеПоПроектам.Количество()>0 Тогда 
		РаспределениеПоПроектам.Свернуть("Проект","ДоляРаспределения");
	КонецЕсли;
	
КонецПроцедуры

//АБС_Стрельцов+ добавлено: 05.11.2012
//------------------------------------------------------------
Функция СформироватьДеревоПроектов(ТЗПроектов)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗ_Проекты.Период КАК ПериодРегистрации,
	|	ТЗ_Проекты.Проект,
	|	ТЗ_Проекты.СуммаСценарияИсполнение КАК Сумма
	|ПОМЕСТИТЬ ВТ_Проекты
	|ИЗ
	|	&ТЗ_Проекты КАК ТЗ_Проекты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Проекты.Проект КАК Проект,
	|	НАЧАЛОПЕРИОДА(ВТ_Проекты.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	|	СУММА(ВЫРАЗИТЬ(ВТ_Проекты.Сумма * (1 + &ПроцентНДС / 100) КАК ЧИСЛО(15, 2))) КАК Сумма
	|ИЗ
	|	ВТ_Проекты КАК ВТ_Проекты
	|ГДЕ
	|	ВТ_Проекты.Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Проекты.Проект,
	|	НАЧАЛОПЕРИОДА(ВТ_Проекты.ПериодРегистрации, МЕСЯЦ)
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Проект";
	
	Запрос.УстановитьПараметр("ПроцентНДС", УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСДокумента));			   
	Запрос.УстановитьПараметр("ТЗ_Проекты", ТЗПроектов);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

//--------------------------------------------------------------
//
Процедура ВыполнитьЗаполнениеДоговоров(ИсточникДанных) Экспорт
	
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:02:20  Поставка
	//Если Не глЗначениеПеременной("абс_ПроведениеПоМеханизмуПроектногоУчета") Тогда
	//	Возврат;
	//КонецЕсли;	
	
	Если НЕ мПроведениеПоМеханизмуПроектногоУчета Тогда
		Возврат;
	КонецЕсли;
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
	
	ЕСли Договоры.Количество() = 0 Тогда
		Возврат;
	КонецЕСли;
	
	//пока только для первого договора...
	МассивДоговоры = Договоры.ВыгрузитьКолонку("ДоговорКонтрагента");
	а = 0;
	Пока а < МассивДоговоры.Количество() Цикл
		Если МассивДоговоры[а] = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			МассивДоговоры.Удалить(а);
		Иначе
			а = а + 1;                                            
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДоговоры.Количество() = 0 Тогда
		Возврат;
	КонецЕСли;
	
	ТекущийДоговор = МассивДоговоры[0];
	
	ПараметрыДокументаОплат = Новый Соответствие();
	Если ТекущийДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ПараметрыДокументаОплат.Вставить(Перечисления.абс_ВидыУсловийОплатПоДоговорам.Реализация, ИсточникДанных.ГрафикПоставок);
		ПараметрыДокументаОплат.Вставить(Перечисления.абс_ВидыУсловийОплатПоДоговорам.РеализацияДДС, ИсточникДанных.ГрафикОплат);
		
	ИначеЕСли ТекущийДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		
		ПараметрыДокументаОплат.Вставить(Перечисления.абс_ВидыУсловийОплатПоДоговорам.Поступление, ИсточникДанных.ГрафикПоставок);
		ПараметрыДокументаОплат.Вставить(Перечисления.абс_ВидыУсловийОплатПоДоговорам.ПоступлениеДДС, ИсточникДанных.ГрафикОплат);
		
	КонецЕСли;
	
	ЕСли ИсточникДанных.ГрафикПоставок.Количество() = 0 И ИсточникДанных.ГрафикОплат.Количество() = 0 Тогда
		Возврат;
	КонецЕСли;
	
	ДоговорОбъект = ТекущийДоговор.ПолучитьОбъект();
	ДоговорОбъект.абс_Проекты.Очистить();
	
	Для каждого ЭлементСоответствия Из ПараметрыДокументаОплат Цикл
		
		ДЗПроектов = СформироватьДеревоПроектов(ЭлементСоответствия.Значение);
		
		Для каждого СтрокаПроекта Из ДЗПроектов.Строки Цикл
			
			Если ДоговорОбъект.абс_Проекты.Найти(СтрокаПроекта.Проект, "Проект") = Неопределено Тогда
				Стр = ДоговорОбъект.абс_Проекты.Добавить();
				Стр.Проект = СтрокаПроекта.Проект;
				Стр.Сумма = СтрокаПроекта.Строки.Итог("Сумма");
			КонецЕСли;
			
			//поиск документов "Плановый график" за текущий день по основным параметрам
			ПараметрыДокументаПГ = Новый Структура("УсловиеОплаты, ОперативныеДанные", ЭлементСоответствия.Ключ, Ложь);
			
			//поиск по основным параметрам без отбора по периоду регистрации. возвращается - массив документов "Плановый график"
			МассивДокументовПГ = абс_СерверныеФункции.НайтиПлановыйГрафик(ТекущийДоговор, СтрокаПроекта.Проект, ПараметрыДокументаПГ,, абс_СерверныеФункции.ПолучитьДатуСервера());
			
			ЕСли НЕ МассивДокументовПГ = Неопределено И МассивДокументовПГ.Количество() > 0 Тогда
				Для каждого СтрокаПериода Из СтрокаПроекта.Строки Цикл
					
					ПериодНайден = Ложь;
					ПлановыйГрафикОплат = Неопределено;
					
					Для каждого ДокументПГ Из МассивДокументовПГ Цикл
						СтрОплата = ДокументПГ.Оплаты.Найти(СтрокаПериода.ПериодРегистрации, "ПериодРегистрации");
						Если НЕ СтрОплата = Неопределено Тогда
							ПериодНайден = Истина;
							Если СтрОплата.Сумма <> СтрокаПериода.Сумма Тогда
								ПлановыйГрафикОплат = ДокументПГ.ПолучитьОбъект();
								Прервать;
							КонецЕСли;								
						КонецЕсли;	
					КонецЦикла;
					
					ЕСли НЕ ПериодНайден Тогда
						ПлановыйГрафикОплат = МассивДокументовПГ[0].ПолучитьОбъект();
					КонецЕСли;
					
					Если НЕ ПлановыйГрафикОплат = Неопределено Тогда
						ЕСли ПериодНайден Тогда
							СтрОплата = ПлановыйГрафикОплат.Оплаты.Найти(СтрокаПериода.ПериодРегистрации, "ПериодРегистрации"); 
						Иначе
							СтрОплата = ПлановыйГрафикОплат.Оплаты.Добавить(); 
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(СтрОплата, СтрокаПериода);
					КонецЕСли;
					
				КонецЦикла;	
			Иначе
				//создание нового документа "Плановый график"
				ПлановыйГрафикОплат = Документы.абс_ПлановыйГрафикОплат.СоздатьДокумент();
				
				Если ЭлементСоответствия.Ключ = Перечисления.абс_ВидыУсловийОплатПоДоговорам.РеализацияДДС
					Или ЭлементСоответствия.Ключ = Перечисления.абс_ВидыУсловийОплатПоДоговорам.ПоступлениеДДС Тогда
					ПлановыйГрафикОплат.Год = НачалоГода(ГодОплат);
				Иначе
					ПлановыйГрафикОплат.Год = НачалоГода(ГодПоставок);
				КонецЕСли;
				
				ПлановыйГрафикОплат.ДоговорКонтрагента = ТекущийДоговор;
				ПлановыйГрафикОплат.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
				ПлановыйГрафикОплат.Проект = СтрокаПроекта.Проект;
				
				ПлановыйГрафикОплат.ОперативныеДанные = Ложь;
				ПлановыйГрафикОплат.ЗаполненАвтоматически = Истина;
				ПлановыйГрафикОплат.УсловиеОплаты = ЭлементСоответствия.Ключ;
				
				ПлановыйГрафикОплат.Оплаты.Очистить();		
				Если СтрокаПроекта.Строки.Итог("Сумма")=0 Тогда 
					ПлановыйГрафикОплат.ДвиженияПоНулевымСуммам = Истина;		
				КонецЕсли;
				
				Для каждого СтрокаПериода Из СтрокаПроекта.Строки Цикл
					СтрОплата = ПлановыйГрафикОплат.Оплаты.Добавить();
					ЗаполнитьЗначенияСвойств(СтрОплата, СтрокаПериода);
				КонецЦикла;
				
			КонецЕСли;
			
			Попытка
				ПлановыйГрафикОплат.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДоговорОбъект.Записать();
	
КонецПроцедуры

//
//АБС_Стрельцов-

//АБС КОНЕЦ Задача №08759

//АБС+ 4100
Процедура ЗаписатьИзмененияГрафиков()
	
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:11:44  Поставка
	//ЛогированиеГрафикаПоставок = Константы.абс_ЛогированиеГрафикаПоставок.Получить();
	//ЛогированиеГрафикаОплат    = Константы.абс_ЛогированиеГрафикаОплат.Получить();
	
	ЛогированиеГрафикаПоставок = глЗначениеПеременной("абс_ЛогированиеГрафикаПоставок");
	ЛогированиеГрафикаОплат    = глЗначениеПеременной("абс_ЛогированиеГрафикаОплат");	
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
	
	Если ЛогированиеГрафикаПоставок Или ЛогированиеГрафикаОплат Тогда 
		
		ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
		ВидОплата   = Перечисления.абс_ВидГрафикаЗакупочногоЗаказа.Оплата;
		ВидПоставка = Перечисления.абс_ВидГрафикаЗакупочногоЗаказа.Поставка;
		
		//НаборЗаписей = РегистрыСведений.абс_ИзменениеГрафикаПоставкиОплаты.СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.ЗакупочныйЗаказ.Установить(Ссылка);
		
		Рег = РегистрыСведений.абс_ИзменениеГрафикаПоставкиОплаты;
		Отбор = Новый Структура("ЗакупочныйЗаказ", Ссылка);
		Выборка = Рег.Выбрать(,,Отбор);
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВидГрафика = ВидОплата И ЛогированиеГрафикаОплат И мИзмененГрафикОплат 
				Или Выборка.ВидГрафика = ВидПоставка И ЛогированиеГрафикаПоставок И мИзмененГрафикПоставок Тогда
				Выборка.ПолучитьМенеджерЗаписи().Удалить();
			КонецЕсли;
		КонецЦикла;
		
		Если ЛогированиеГрафикаОплат И мИзмененГрафикОплат Тогда			
			
			Запись = Рег.СоздатьМенеджерЗаписи(); 
			Запись.Период           = абс_СерверныеФункции.ПолучитьДатуСервера();                                                                         			
			Запись.ЗакупочныйЗаказ	= Ссылка;
			Запись.Пользователь 	= ТекПользователь;	
			Запись.ВидГрафика       = ВидОплата;
			Запись.Записать();
			
		КонецЕсли;
		
		Если ЛогированиеГрафикаПоставок И мИзмененГрафикПоставок Тогда
			
			Запись = Рег.СоздатьМенеджерЗаписи(); 
			Запись.Период           = абс_СерверныеФункции.ПолучитьДатуСервера();                                                                         			
			Запись.ЗакупочныйЗаказ	= Ссылка;
			Запись.Пользователь 	= ТекПользователь;	
			Запись.ВидГрафика       = ВидПоставка;
			Запись.Записать();
			
		КонецЕсли;
		
		//Если ЛогированиеГрафикаПоставок И мИзмененГрафикПоставок Тогда
		//	
		//	НаборЗаписей.Отбор.ВидГрафика.Установить(Перечисления.абс_ВидГрафикаЗакупочногоЗаказа.Поставка);
		//	НаборЗаписей.Прочитать();			
		//	
		//	Запись = НаборЗаписей.Добавить();
		//	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
		//	
		//	Запись.ЗакупочныйЗаказ			= Ссылка;
		//	Запись.Пользователь 			= ТекПользователь;	
		//	Запись.ВидГрафика           	= Перечисления.абс_ВидГрафикаЗакупочногоЗаказа.Поставка;
		//	
		//	НаборЗаписей.Записать();
		//	
		//КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры
//АБС- 4100

// АБС ВСТАВКА СогласованиеЗЗ
Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовЗакупочногоЗаказа.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ЗакупочныйЗаказ.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера(); //ТекущаяДата();  АБС Коломиец 17233
	
	Запись.ЗакупочныйЗаказ			= Ссылка;
	Запись.Пользователь 			= ТекПользователь;	
	Запись.СтатусЗакупочногоЗаказа	= НовыйСтатус;
	
	Запись.Комментарий 				= Комментарий;
	
	ОтветственныйСотрудник = абс_БизнесПроцессы.ПолучитьСотрудникаПользователя(ТекПользователь);
	
	Если НЕ ОтветственныйСотрудник = Неопределено Тогда
		Запись.ДолжностьОтветственного	= ОтветственныйСотрудник.Должность;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// АБС ВСТАВКА СогласованиеЗЗ КОНЕЦ

//АБС ВСТАВКА 

Процедура КонтрольЛимитов(Отказ) Экспорт
	
	Если УправлениеДопПравамиПользователей.РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Тогда
		возврат;
	КонецЕсли;

	Если УбыткиПрошлыхЛет Тогда
		//Сторчевой А.Н. 28.11.2016 7759076 {
		//Включаем контроль лимитов если константа заполнена и дата документа больше
		//Возврат;
		ttk_УчетБДРУбытковПрошлыхЛет = глЗначениеПеременной("ttk_УчетБДРУбытковПрошлыхЛет");
		Если НЕ (ЗначениеЗаполнено(ttk_УчетБДРУбытковПрошлыхЛет) и Дата>=ttk_УчетБДРУбытковПрошлыхЛет) Тогда
			Возврат;
		КонецЕсли;
		// } Сторчевой А.Н. 28.11.2016 7759076
	КонецЕсли;
	
	// {{ТТК Лапин А. Заявка Обнуление лимитов 27.10.2015 начало
	//	Если абс_Бюджетирование.ПоСтатьеРазрешеноПревышениеБюджета(БюджетнаяСтатья) Тогда
	//Сторчевой А.Н. НФС 2018 {
		//Если абс_Бюджетирование.ПоСтатьеРазрешеноПревышениеБюджета(БюджетнаяСтатья, Организация) Тогда
			// }}ТТК Лапин А. Заявка № Обнуление лимитов 27.10.2015 окончание
			//возврат;
	//} Сторчевой А.Н. НФС 2018

	
	Если КонсолидированныйЗЗПоОЗК Тогда
		Возврат;
	КонецЕсли;
	
	//абс_Стрельцов+ добавлено: 17.09.2012
	//доработки при переносе ПУ
	//---------------------------------------------
	абс_ВременнаяКонстантаВеденияПроектногоУчета = Ложь;  										//изменено: 03.10.2012
	Если абс_ВременнаяКонстантаВеденияПроектногоУчета Тогда //мПроведениеПоМеханизмуПроектногоУчета Тогда    //изменено: 03.10.2012
		
		//АБС НАЧАЛО Задача №08759
		
		ТЗДолиПоПроектам = РаспределениеПоПроектам.Выгрузить();
		Если ТЗДолиПоПроектам.Количество()=0 Тогда 
			н = ТЗДолиПоПроектам.Добавить();
			н.ДоляРаспределения = Товары.Итог("СуммаБезНДС");
		КонецЕсли;
		
		ИтогКоэфПоПроектам = ТЗДолиПоПроектам.Итог("ДоляРаспределения");
		
		//\\АБС КОНЕЦ Задача №08759
	Иначе
		СтруктураАналитик = НОВЫЙ Структура;
		СтруктураАналитик.Вставить("Организация",Организация);
		СтруктураАналитик.Вставить("абс_ЦФУ", ЦФУ);
		СтруктураАналитик.Вставить("ЦФО", ЦФО);
		СтруктураАналитик.Вставить("абс_ТипРасхода", ТипРасхода);
		СтруктураАналитик.Вставить("абс_ТипКонтрагента", ТипКонтрагента);
		СтруктураАналитик.Вставить("абс_ТипСети", ТипСети);
		СтруктураАналитик.Вставить("абс_КВ",КВ);
		СтруктураАналитик.Вставить("абс_ТЭО", ТЭО);
		СтруктураАналитик.Вставить("СтатьяОборотов", БюджетнаяСтатья);
	КонецЕсли;
	//----------------------------------------------------------------
	//абс_Стрельцов-
	//Сторчевой А.Н. НФС 2018 {
	КолонкиАналитик = "СтатьяОборотов, абс_ТипСети, абс_КВ, абс_ТЭО, абс_ЦФУ, ttk_ОбъектБюджетирования, ttk_Город";
	ТоварыТЗ = Товары.Выгрузить(,КолонкиАналитик);
	ТоварыТЗ.Свернуть(КолонкиАналитик);
	КоличествоРазныхНаборовАналитик = ТоварыТЗ.Количество();
	//} Сторчевой А.Н. НФС 2018
		
	СтрокаСообщения = "";
	Для каждого СтрокаГрафикаПоставок из ГрафикПоставок Цикл
		Если (НЕ СледГодПоставок и (СтрокаГрафикаПоставок.СуммаБезНДС=0 или СтрокаГрафикаПоставок.НомерСтроки>12*КоличествоРазныхНаборовАналитик))
			ИЛИ (СледГодПоставок и (СтрокаГрафикаПоставок.СуммаБезНДС=0 или СтрокаГрафикаПоставок.НомерСтроки>24*КоличествоРазныхНаборовАналитик)) Тогда
			продолжить;
		КонецЕсли;
		
		//НФС 2018
		//Временно блокировка
		//Крамаренко Д.М.
		////АБС ВСТАВКА №29472 НАЧАЛО «2 декабря 2014 г.», Пополитов
		//Если абс_Бюджетирование.МесяцаИсключенияИзКонтроляЛимитов(СтрокаГрафикаПоставок.Период, Организация) Тогда
		//	Продолжить;	
		//КонецЕсли;	
		////\\АБС ВСТАВКА №29472 КОНЕЦ
  	                   		
		//абс_Стрельцов+ добавлено: 17.09.2012
		//доработки при переносе ПУ
		//---------------------------------------------
		абс_ВременнаяКонстантаВеденияПроектногоУчета = Ложь;  										//изменено: 03.10.2012
		Если абс_ВременнаяКонстантаВеденияПроектногоУчета Тогда //мПроведениеПоМеханизмуПроектногоУчета Тогда    //изменено: 03.10.2012
			
			//АБС НАЧАЛО Задача №08759
			ТЗОстаткиПоПроектам = Новый ТаблицаЗначений;
			ТЗОстаткиПоПроектам.Колонки.Добавить("Проект");
			ТЗОстаткиПоПроектам.Колонки.Добавить("Остаток");
			
			Для Каждого СтрокаПроекта Из ТЗДолиПоПроектам Цикл
				//\\АБС КОНЕЦ Задача №08759
				СтруктураАналитик = НОВЫЙ Структура;
				СтруктураАналитик.Вставить("Организация",Организация);
				СтруктураАналитик.Вставить("абс_ЦФУ", ЦФУ);
				СтруктураАналитик.Вставить("ЦФО", ЦФО);
				СтруктураАналитик.Вставить("абс_ТипРасхода", ТипРасхода);
				СтруктураАналитик.Вставить("абс_ТипКонтрагента", ТипКонтрагента);
				СтруктураАналитик.Вставить("абс_ТипСети", ТипСети);
				СтруктураАналитик.Вставить("абс_КВ",КВ);
				СтруктураАналитик.Вставить("абс_ТЭО", ТЭО);
				СтруктураАналитик.Вставить("СтатьяОборотов", БюджетнаяСтатья);
				
				//Сторчевой А.Н. 05.12.2017 НФС {
				СтруктураАналитик.Вставить("СтатьяОборотов", СтрокаГрафикаПоставок.СтатьяОборотов);
				СтруктураАналитик.Вставить("абс_ТипСети", СтрокаГрафикаПоставок.абс_ТипСети);
				СтруктураАналитик.Вставить("абс_КВ", СтрокаГрафикаПоставок.абс_КВ);
				СтруктураАналитик.Вставить("абс_ТЭО", СтрокаГрафикаПоставок.абс_ТЭО);
				СтруктураАналитик.Вставить("абс_ЦФУ", СтрокаГрафикаПоставок.абс_ЦФУ);
				СтруктураАналитик.Вставить("ttk_ОбъектБюджетирования", СтрокаГрафикаПоставок.ttk_ОбъектБюджетирования);
				// } Сторчевой А.Н. 05.12.2017 НФС
				
				//абс_Стрельцов+ добавлено: 21.09.2012
				//для исключительной ситуации если текущий проект пустой
				//----------------------------------------------------------------------------
				Если НЕ ЗначениеЗаполнено(СтрокаПроекта.Проект) Или СтрокаПроекта.Проект = Справочники.Проекты.ПустаяСсылка() Тогда
					
					мСтруктураАналитик = ПостроитьСтруктуруАналитик();
					мСтруктураАналитик.НачалоПериода = НачалоМесяца(СтрокаГрафикаПоставок.Период);
					мСтруктураАналитик.КонецПериода	 = КонецМесяца(СтрокаГрафикаПоставок.Период);
					мСтруктураАналитик.Удалить("Проект");
					
					//Сторчевой А.Н. 05.12.2017 НФС {
					мСтруктураАналитик.Вставить("СтатьяОборотов", СтрокаГрафикаПоставок.СтатьяОборотов);
					мСтруктураАналитик.Вставить("ТипСети", СтрокаГрафикаПоставок.абс_ТипСети);
					мСтруктураАналитик.Вставить("КВ", СтрокаГрафикаПоставок.абс_КВ);
					мСтруктураАналитик.Вставить("ТЭО", СтрокаГрафикаПоставок.абс_ТЭО);
					мСтруктураАналитик.Вставить("ЦФУ", СтрокаГрафикаПоставок.абс_ЦФУ);
					мСтруктураАналитик.Вставить("ОбъектБюджетирования", СтрокаГрафикаПоставок.ttk_ОбъектБюджетирования);
					// } Сторчевой А.Н. 05.12.2017 НФС

					РезультатПоОсновнымАналитикам = абс_Бюджетирование.ПостроитьЗапросПоОстаткам(мСтруктураАналитик, мВалютаРегламентированногоУчета);
				КонецЕСли;
				//
				//абс_Стрельцов-
				
				//АБС НАЧАЛО Задача №08759
				СписокГрупп = Новый СписокЗначений;
				СписокГрупп.Добавить(СтрокаПроекта.Проект);
				ПолучитьВсехРодителейПроекта(СтрокаПроекта.Проект, СписокГрупп);
				СтруктураАналитик.Вставить("Проект", СписокГрупп);
				//\\АБС КОНЕЦ Задача №08759
				
				//АБС НАЧАЛО Задача №08759
				Остаток=0;
				//Остаток = абс_Бюджетирование.ОстатокЛимитаПоБюджету(НачалоМесяца(СтрокаГрафикаПоставок.Период),КонецМесяца(СтрокаГрафикаПоставок.Период), СтруктураАналитик, НефиксированнаяСумма, Ссылка);
				ТЗОстаткиПоПроектамТекущего = ОстатокЛимитаПоБюджету(НачалоМесяца(СтрокаГрафикаПоставок.Период),КонецМесяца(СтрокаГрафикаПоставок.Период), СтруктураАналитик, НефиксированнаяСумма, Ссылка);
				//\\АБС КОНЕЦ Задача №08759
				
				//АБС НАЧАЛО Задача №08759
				//СтрокаГрафикаПоставокСуммаБезНДС = СтрокаГрафикаПоставок.СуммаБезНДС;
				СтрокаГрафикаПоставокСуммаБезНДС = Окр(СтрокаГрафикаПоставок.СуммаБезНДС*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
				нСтрокаГрафикаПоставокСуммаБезНДС = СтрокаГрафикаПоставокСуммаБезНДС;
				
				//абс_Стрельцов+ добавлено: 21.09.2012
				//исключительная ситуация: если текущий проект пустой и таблица остатков тоже пустая
				//----------------------------------------------------------------------------
				ЕСли НЕ ЗначениеЗаполнено(СтрокаПроекта.Проект) Или СтрокаПроекта.Проект = Справочники.Проекты.ПустаяСсылка() Тогда
					Если (ТЗОстаткиПоПроектамТекущего.Количество() = 0) И РезультатПоОсновнымАналитикам.СуммаОстатокЛимита > СтрокаГрафикаПоставокСуммаБезНДС Тогда
						Продолжить;
					КонецЕСли;
				КонецЕсли;
				//----------------------------------------------------------------------------
				//абс_Стрельцов-
				
				Разница = 0;
				
				Для Каждого с Из ТЗОстаткиПоПроектамТекущего Цикл
					ТЗОстаткиПоПроектам.Свернуть("Проект", "Остаток");
					
					Если нСтрокаГрафикаПоставокСуммаБезНДС = 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					НайденнаяСтрокаВОбщейТаблице = ТЗОстаткиПоПроектам.Найти(с.Проект,"Проект");
					Если НайденнаяСтрокаВОбщейТаблице=Неопределено Тогда 
						Разница = нСтрокаГрафикаПоставокСуммаБезНДС - с.Остаток;
						Если Разница<=0 Тогда 
							н = ТЗОстаткиПоПроектам.Добавить();
							ЗаполнитьЗначенияСвойств(н, с);
							н.Остаток = Разница*-1;
							
							Остаток = Остаток + нСтрокаГрафикаПоставокСуммаБезНДС;
							нСтрокаГрафикаПоставокСуммаБезНДС = 0;
						Иначе
							Остаток = Остаток + с.Остаток;
							нСтрокаГрафикаПоставокСуммаБезНДС = нСтрокаГрафикаПоставокСуммаБезНДС-с.Остаток;		
						КонецЕсли;
					Иначе
						Разница = нСтрокаГрафикаПоставокСуммаБезНДС - НайденнаяСтрокаВОбщейТаблице.Остаток;
						Если Разница<=0 Тогда 
							НайденнаяСтрокаВОбщейТаблице.Остаток = Разница*-1;
							
							Остаток = Остаток + нСтрокаГрафикаПоставокСуммаБезНДС;
							нСтрокаГрафикаПоставокСуммаБезНДС = 0;
						Иначе
							Остаток = Остаток + НайденнаяСтрокаВОбщейТаблице.Остаток;
							НайденнаяСтрокаВОбщейТаблице.Остаток = 0;
							
							нСтрокаГрафикаПоставокСуммаБезНДС = Разница;		
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				//\\АБС КОНЕЦ Задача №08759
				
				//АБС НАЧАЛО Задача №08759
				//Если Остаток<СтрокаГрафикаПоставок.СуммаБезНДС Тогда
				Если нСтрокаГрафикаПоставокСуммаБезНДС>0 Тогда
					//\\АБС КОНЕЦ Задача №08759
					
					//АБС НАЧАЛО Задача №08759
					СтрокаСообщения = СтрокаСообщения+"Проект: " + Строка(СтрокаПроекта.Проект)+"; ";
					//\\АБС КОНЕЦ Задача №08759
					
					Если нСтрокаГрафикаПоставокСуммаБезНДС = СтрокаГрафикаПоставокСуммаБезНДС тогда
						СтрокаСообщения = СтрокаСообщения+"В периоде "+ Формат(СтрокаГрафикаПоставок.Период,"ДФ='MMMM yyyy'") + " г." +" не задан лимит!";
					Иначе
						//АБС НАЧАЛО Задача №08759
						//СтрокаСообщения = СтрокаСообщения+"В периоде "+ абс_СлужебныеФункции.ВернутьНазваниеМесяца(СтрокаГрафикаПоставок.Период)+ " " + Формат(СтрокаГрафикаПоставок.Период,"ДФ=yyyy") + " г." +" СУММА ПРЕВЫШАЕТ ЛИМИТ! СУММА = "+СтрокаГрафикаПоставок.СуммаБезНДС+"; ЛИМИТ = "+Остаток+Символы.ПС;
						СтрокаСообщения = СтрокаСообщения+"В периоде "+ Формат(СтрокаГрафикаПоставок.Период,"ДФ='MMMM yyyy'") + " г." + " сумма превышает лимит! Сумма = "+СтрокаГрафикаПоставокСуммаБезНДС+"; Лимит = "+Остаток+Символы.ПС;
						//\\АБС КОНЕЦ Задача №08759
						
					КонецЕсли;
				КонецЕсли;
				
				//АБС НАЧАЛО Задача №08759
			КонецЦикла;
			//\\АБС КОНЕЦ Задача №08759
		Иначе
			
			//Сторчевой А.Н. 05.12.2017 НФС 2018 {
			Если абс_Бюджетирование.ПоСтатьеРазрешеноПревышениеБюджета(СтрокаГрафикаПоставок.СтатьяОборотов, Организация) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураАналитик.Вставить("СтатьяОборотов", СтрокаГрафикаПоставок.СтатьяОборотов);
			//ххх Брель Виктор Андреевич 14.06.2018 16:02:30, заявка 77354995<<<
			// 14.06.2018 Убрали ТипСети
			//СтруктураАналитик.Вставить("абс_ТипСети", СтрокаГрафикаПоставок.абс_ТипСети);
			// Брель Виктор Андреевич 14.06.2018 16:02:30 >>>		
			СтруктураАналитик.Вставить("абс_КВ", СтрокаГрафикаПоставок.абс_КВ);
			СтруктураАналитик.Вставить("абс_ТЭО", СтрокаГрафикаПоставок.абс_ТЭО);
			СтруктураАналитик.Вставить("абс_ЦФУ", СтрокаГрафикаПоставок.абс_ЦФУ);
			СтруктураАналитик.Вставить("ttk_ОбъектБюджетирования", СтрокаГрафикаПоставок.ttk_ОбъектБюджетирования);
			//ххх Брель Виктор Андреевич 21.06.2018 16:59:18, заявка 77356750<<<
			СтруктураАналитик.Вставить("абс_ТипКонтрагента", ТипКонтрагента);
			// Брель Виктор Андреевич 21.06.2018 16:59:18 >>>
			
			// } Сторчевой А.Н. 05.12.2017 НФС 2018
			
			Остаток = абс_Бюджетирование.ОстатокЛимитаПоБюджету(НачалоМесяца(СтрокаГрафикаПоставок.Период),КонецМесяца(СтрокаГрафикаПоставок.Период), СтруктураАналитик, НефиксированнаяСумма, Ссылка);
			Если Остаток<СтрокаГрафикаПоставок.СуммаБезНДС Тогда
				Если Остаток = -2 тогда
					СтрокаСообщения = СтрокаСообщения+"В периоде "+ Формат(СтрокаГрафикаПоставок.Период,"ДФ='MMMM yyyy'") + " г." +" не задан лимит!";
				Иначе
					СтрокаСообщения = СтрокаСообщения+"В периоде "+ Формат(СтрокаГрафикаПоставок.Период,"ДФ='MMMM yyyy'") + " г." +" сумма превышает лимит! Сумма = "+СтрокаГрафикаПоставок.СуммаБезНДС+"; Лимит = "+Остаток+Символы.ПС;
				КонецЕсли;
				//Сторчевой А.Н. 05.12.2017 НФС 2018 {
				СтрокаСообщения = СтрокаСообщения + "По аналитикам:" + "
				| Статья оборотов - " + СтруктураАналитик.СтатьяОборотов + " "+ ?(ЗначениеЗаполнено(СтруктураАналитик.СтатьяОборотов),СтруктураАналитик.СтатьяОборотов.Код ," ")+"
				//ххх Брель Виктор Андреевич 14.06.2018 16:02:30, заявка 77354995<<<
				// 14.06.2018 Убрали ТипСети
				//| Тип сети - " + СтрокаГрафикаПоставок.абс_ТипСети + "
				// Брель Виктор Андреевич 14.06.2018 16:02:30 >>>		
				| КВ и ТЗ - " + СтруктураАналитик.абс_КВ + "
				| ТЭО - " + СтруктураАналитик.абс_ТЭО + "
				| ЦФУ - " + СтруктураАналитик.абс_ЦФУ + "
				| Объект бюджетирования - " + СтруктураАналитик.ttk_ОбъектБюджетирования +"
				| Тип контрагента: "    + СтруктураАналитик.абс_ТипКонтрагента + "
				|";
				// } Сторчевой А.Н. 05.12.2017 НФС 2018
			КонецЕсли;	
		КонецЕсли;
		//----------------------------------------------------------------
		//абс_Стрельцов-
		
	КонецЦикла;
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		Отказ = Истина;
		ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Строка(Ссылка), СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьСтруктуруЗЗ() Экспорт
	
	СтруктураЗЗ = Новый Структура();
	
	// Реквизиты документа
	Для Каждого РеквизитДокумента из ЭтотОбъект.Метаданные().Реквизиты Цикл
		
		Если НЕ СокрЛП(РеквизитДокумента.Имя) = "СтруктураЗЗДоИзмененияСпецификации" = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураЗЗ.Вставить(РеквизитДокумента.Имя, ЭтотОбъект[РеквизитДокумента.Имя]);
		
	КонецЦикла;
	
	// Табличные части 
	Для Каждого ТЧДокумента Из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
		
		СтруктураЗЗ.Вставить(ТЧДокумента.Имя, ЭтотОбъект[ТЧДокумента.Имя].Выгрузить());
		
	КонецЦикла;
	
	СтруктураЗЗ.Вставить("Дата", Дата);
	
	Возврат СтруктураЗЗ;
	
КонецФункции

Функция ПолучитьСтруктуруРевизитовИзменениеСпецификации() Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	
	// Аналитики
	СтруктураРеквизитов.Вставить("Организация"				, "Организация");
	СтруктураРеквизитов.Вставить("ЦФУ"						, "ЦФУ");
	СтруктураРеквизитов.Вставить("ЦФО"						, "ЦФО");
	СтруктураРеквизитов.Вставить("БюджетнаяСтатья"			, "Бюджетная статья");
	СтруктураРеквизитов.Вставить("ТипСети"					, "Тип сети");
	СтруктураРеквизитов.Вставить("КВ"						, "КВ");
	СтруктураРеквизитов.Вставить("ТЭО"						, "ТЭО");
	СтруктураРеквизитов.Вставить("БюджетнаяКатегория"		, "Бюджетная категория");
	СтруктураРеквизитов.Вставить("ТипРасхода"				, "Тип расхода");
	
	//АБС НАЧАЛО Задача №08759
	СтруктураРеквизитов.Вставить("Проект"					, "Проект");
	//\\АБС КОНЕЦ Задача №08759
	
	// Прочие реквизиты
	СтруктураРеквизитов.Вставить("ПодразделениеОрганизации"	, "Подразделение");
	СтруктураРеквизитов.Вставить("НефиксированнаяСумма"		, "Признак нефиксированной суммы");
	СтруктураРеквизитов.Вставить("УбыткиПрошлыхЛет"			, "Признак убытки прошлых лет");
	СтруктураРеквизитов.Вставить("ВалютаДокумента"			, "Валюта документа");
	СтруктураРеквизитов.Вставить("Контрагент"				, "Контрагент");
	СтруктураРеквизитов.Вставить("ТипЗакупочногоЗаказа"		, "Тип закупочного заказа");
	СтруктураРеквизитов.Вставить("ТипКонтрагента"			, "Тип контрагента");
	СтруктураРеквизитов.Вставить("ГодОплат"					, "Год оплат");
	СтруктураРеквизитов.Вставить("ГодПоставок"				, "Год поставок");
	СтруктураРеквизитов.Вставить("РасходыБудущихПериодов"	, "Признак РБП");
	
	СтруктураРеквизитов.Вставить("Дата"						, "Дата документа");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Проверяет изменения ЗЗ на статусе ИзменениеСпецификации
//  если спецификация изменилась меннее чем на 5% и не изменены аналитики
//  то возвращает Истина, иначе Ложь.
Функция ПроверитьИзменениеЗЗ(СтруктураЗЗ, ВыводитьСообщенияОбОшибке = Истина) Экспорт
	
	// 1. Проверяем изменнеие спецификации
	// 2. Проверяем изменение аналитик
	// 3. Проверяем изменение прочих реквизитов
	
	ТекстСообщения = "Проверка изменения реквизитов документа " + Ссылка + ":";
	
	ИзмененаСпецификация = Ложь;
	//Сторчевой А.Н. 14.11.2016 7757345 {
	//Если СтруктураЗЗ.ИтогСуммаСНДС * 0.95 > ИтогСуммаСНДС ИЛИ 
	//	СтруктураЗЗ.ИтогСуммаСНДС * 1.05 < ИтогСуммаСНДС Тогда
	//	
	//	ИзмененаСпецификация = Истина;
	//	
	//КонецЕсли;

	//Если ИзмененаСпецификация Тогда
	//	
	//	ТекстСообщения = ТекстСообщения + Символы.ПС + "Спецификация изменена более чем на 5%";
	//	
	//КонецЕсли;
	Если ЗначениеЗаполнено(ИтогСуммаБезНДССогласованная) Тогда
		//Проверим допустимый предел изменения итоговой суммы
		ПроцентОтклонения = (ИтогСуммаБезНДС - ИтогСуммаБезНДССогласованная) / ИтогСуммаБезНДССогласованная * 100;
		ПроцентОтклонения = ?(ПроцентОтклонения < 0, -ПроцентОтклонения, ПроцентОтклонения);
		Если НЕ ПроцентОтклонения = 0 Тогда 
			Если ПроцентОтклонения > 5 Тогда
				ИзмененаСпецификация = Истина;
				ТекстСообщения = ТекстСообщения + Символы.ПС + "Спецификация изменена более чем на 5%, перевод возможен только в статус " + Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка;
			Иначе
				ТекстСообщения = ТекстСообщения + Символы.ПС + "Спецификация изменена менее чем на 5%, перевод возможен только в статус " + Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК;
				ИзмененаСпецификация = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// } Сторчевой А.Н. 14.11.2016 7757345	
	
	СтруктураРеквизитов = ПолучитьСтруктуруРевизитовИзменениеСпецификации();
	
	ИзмененыРеквизиты = Ложь;
	
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		Если  НЕ ЭтотОбъект[КлючИЗначение.Ключ] = СтруктураЗЗ[КлючИЗначение.Ключ] Тогда
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Изменен реквизит """ + КлючИЗначение.Ключ + """.";
			
			ИзмененыРеквизиты = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзмененаСпецификация ИЛИ ИзмененыРеквизиты Тогда
		
		Если ВыводитьСообщенияОбОшибке Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
Конецфункции

// Спецификация не может быть изменена в случае если 
//  есть счета выше статуса согласован и согласованные поставки
Функция ВозможноИзменитьСпецификацию()
	
	// АБС ВСТАВКА 20110217 Фролов 
	// Необходимо отключить контроль статуса "Изменение спецификации" (Инициатор: Калымкин).
	
	Возврат Истина;
	// АБС ВСТАВКА 20110217 Фролов КОНЕЦ	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_СчетНаОплату.Ссылка КАК ПодчиненныйДокумент
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|ГДЕ
	|	абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И абс_СчетНаОплату.СтатусСчета В(&СтатусыСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.абс_ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И ПоступлениеТоваровУслуг.абс_Статус В(&СтатусыПоставки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.абс_ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И АвансовыйОтчет.абс_Статус В(&СтатусыПоставки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.абс_Статус В(&СтатусыПоставки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И ПоступлениеТоваровУслугТовары.Ссылка.абс_Статус В(&СтатусыПоставки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И ПоступлениеТоваровУслугОборудование.Ссылка.абс_Статус В(&СтатусыПоставки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
	|ГДЕ
	|	ПоступлениеТоваровУслугОбъектыСтроительства.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.абс_Статус В(&СтатусыПоставки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетТовары.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И АвансовыйОтчетТовары.Ссылка.абс_Статус В(&СтатусыПоставки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетОплатаПоставщикам.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
	|ГДЕ
	|	АвансовыйОтчетОплатаПоставщикам.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И АвансовыйОтчетОплатаПоставщикам.Ссылка.абс_Статус В(&СтатусыПоставки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетПрочее.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	|ГДЕ
	|	АвансовыйОтчетПрочее.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И АвансовыйОтчетПрочее.Ссылка.абс_Статус В(&СтатусыПоставки)");
	
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Ссылка);
	
	МассивСтатусовСчетов = Новый Массив();
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Исполнение);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Утвержден);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ГотовКОплате);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Оплачен);
	
	Запрос.УстановитьПараметр("СтатусыСчета"		, МассивСтатусовСчетов);
	
	МассивСтатусовПоставки = Новый Массив();
	//МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаСкладом);
	МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК);
	МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
	МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
	
	Запрос.УстановитьПараметр("СтатусыПоставки"     , МассивСтатусовПоставки);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

// Счет учета не может быть изменен в случае если 
//  есть согласованные поставки
Функция ВозможноИзменитьСчетаУчета() Экспорт  //АБС Коломиец 4737
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПодчиненныйДокумент
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.абс_ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И ПоступлениеТоваровУслуг.абс_Статус В(&СтатусыПоставки)
	|	И ПоступлениеТоваровУслуг.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.абс_ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И АвансовыйОтчет.абс_Статус В(&СтатусыПоставки)
	|	И АвансовыйОтчет.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.абс_Статус В(&СтатусыПоставки)
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И ПоступлениеТоваровУслугТовары.Ссылка.абс_Статус В(&СтатусыПоставки)
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И ПоступлениеТоваровУслугОборудование.Ссылка.абс_Статус В(&СтатусыПоставки)
	|	И ПоступлениеТоваровУслугОборудование.Ссылка.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
	|ГДЕ
	|	ПоступлениеТоваровУслугОбъектыСтроительства.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.абс_Статус В(&СтатусыПоставки)
	|	И ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетТовары.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И АвансовыйОтчетТовары.Ссылка.абс_Статус В(&СтатусыПоставки)
	|	И АвансовыйОтчетТовары.Ссылка.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетОплатаПоставщикам.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
	|ГДЕ
	|	АвансовыйОтчетОплатаПоставщикам.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И АвансовыйОтчетОплатаПоставщикам.Ссылка.абс_Статус В(&СтатусыПоставки)
	|	И АвансовыйОтчетОплатаПоставщикам.Ссылка.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетПрочее.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	|ГДЕ
	|	АвансовыйОтчетПрочее.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И АвансовыйОтчетПрочее.Ссылка.абс_Статус В(&СтатусыПоставки)
	|	И АвансовыйОтчетПрочее.Ссылка.Проведен = ИСТИНА");
	
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Ссылка);
	
	//МассивСтатусовСчетов = Новый Массив();
	//МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Исполнение);
	//МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Утвержден);
	//МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ГотовКОплате);
	//МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
	//МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
	//МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Оплачен);
	//
	//Запрос.УстановитьПараметр("СтатусыСчета"		, МассивСтатусовСчетов);
	
	МассивСтатусовПоставки = Новый Массив();
	МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером); 
	МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК);
	МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
	МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен); 
	
	Запрос.УстановитьПараметр("СтатусыПоставки"     , МассивСтатусовПоставки);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции //АБС Коломиец- 4737

Функция ВозможноИзменитьНефиксированнаяСумма() Экспорт  //АБС Коломиец 4870
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_СчетНаОплату.Ссылка КАК ПодчиненныйДокумент
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|ГДЕ
	|	абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И абс_СчетНаОплату.СтатусСчета В(&СтатусыСчета)");
	
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Ссылка);
	
	МассивСтатусовСчетов = Новый Массив();
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Исполнение);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Утвержден);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ГотовКОплате);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Оплачен);
	
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ВОплату);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеЗЗ);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
	
	Запрос.УстановитьПараметр("СтатусыСчета", МассивСтатусовСчетов);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

Процедура ПроверитьСчетаПоЗЗИзменнеиеСпецификации()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_СчетНаОплату.Ссылка КАК СчетНаОплатуСсылка
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|ГДЕ
	|	абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И абс_СчетНаОплату.СтатусСчета = ЗНАЧЕНИЕ(Перечисление.абсСтатусыСчетов.Согласован)");
	
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СчетОбъект = Выборка.СчетНаОплатуСсылка.ПолучитьОбъект();
		
		СчетОбъект.СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеЗЗ;
		
		СчетОбъект.ПричинаИзмененияСтатуса = "Закупочный заказ " + Ссылка + " отправлен на изменение спецификации.";
		
		СчетОбъект.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры

//АБС ВСТАВКА №10316 НАЧАЛО
Функция ПолучитьЗахваченныеЛимитыППТ()
	//***** АБС Гетц. Функция переработана для повышения произодительности. 24.01.14
	СтруктураППД = Новый ТаблицаЗначений;
	СтруктураППД.Колонки.Добавить("Период");
	СтруктураППД.Колонки.Добавить("СуммаБезНДС");
	СтруктураППД.Колонки.Добавить("ВалютнаяСуммаБезНДС");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	абс_ГрафикПоставкиЗакупочногоЗаказаОбороты.Период КАК Период,
	|	абс_ГрафикПоставкиЗакупочногоЗаказаОбороты.СуммаРасход КАК СуммаБезНДС,
	|	абс_ГрафикПоставкиЗакупочногоЗаказаОбороты.СуммаРасход КАК ВалютнаяСуммаБезНДС
	|ИЗ
	|	РегистрНакопления.абс_ГрафикПоставкиЗакупочногоЗаказа.Обороты(, , Регистратор, ЗакупочныйЗаказ = &ЗакупочныйЗаказ) КАК абс_ГрафикПоставкиЗакупочногоЗаказаОбороты
	|ГДЕ
	|	абс_ГрафикПоставкиЗакупочногоЗаказаОбороты.СуммаРасход > 0";
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат СтруктураППД;
	КонецЕсли;
	
	ВыборкаДетали = Результат.Выбрать();
	
	ДанныеВалютыРег = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Ссылка.Дата);
	
	Пока ВыборкаДетали.Следующий() Цикл 
		НоваяСтрока = СтруктураППД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
		Если Не Ссылка.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда			
			
			ДанныеВалютыЗЗ = МодульВалютногоУчета.ПолучитьКурсВалюты(Ссылка.ВалютаДокумента, ВыборкаДетали.Период);
			
			НоваяСтрока.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.ВалютнаяСуммаБезНДС, 
			Ссылка.ВалютаДокумента,   мВалютаРегламентированногоУчета, 
			ДанныеВалютыЗЗ.Курс,      ДанныеВалютыРег.Курс, 
			ДанныеВалютыЗЗ.Кратность, ДанныеВалютыРег.Кратность);			
			
		КонецЕсли;
		НоваяСтрока.Период = НачалоМесяца(НоваяСтрока.Период);
	КонецЦикла;
	
	СтруктураППД.Свернуть("Период", "СуммаБезНДС, ВалютнаяСуммаБезНДС");
	
	Возврат СтруктураППД;  
	
КонецФункции	

Процедура ЛимитимыПоПроведеннымППД()
	
	ТаблицаППД = ПолучитьЗахваченныеЛимитыППТ();
	Если ТаблицаППД = Неопределено или ТаблицаППД.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	//Сторчевой А.Н. 05.12.2017 НФС {
	КолонкиАналитик = "СтатьяОборотов, абс_ТипСети, абс_КВ, абс_ТЭО, абс_ЦФУ, ttk_ОбъектБюджетирования, ttk_Город";
	ТоварыТЗ = Товары.Выгрузить(,КолонкиАналитик);
	ТоварыТЗ.Свернуть(КолонкиАналитик);
	КоличествоРазныхНаборовАналитик = ТоварыТЗ.Количество();
	//} Сторчевой А.Н. 05.12.2017 НФС

	СтруктураЗЗ = СтруктураЗЗДоИзмененияСпецификации.Получить();
	//Сторчевой А.Н. 22.11.2016 {
	Если СтруктураЗЗ = Неопределено Тогда
		СтруктураЗЗ = ПолучитьСтруктуруЗЗ();
	КонецЕсли;
	// } Сторчевой А.Н. 22.11.2016 	
	Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Записывать = Истина;
	Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Очистить();	
	
	Для Каждого ТекСтрокаГрафикПоставок Из ГрафикПоставок Цикл
		Если (НЕ СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>12*КоличествоРазныхНаборовАналитик))
			ИЛИ (СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>24*КоличествоРазныхНаборовАналитик)) Тогда
			продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаППД.Найти(НачалоМесяца(ТекСтрокаГрафикПоставок.Период), "Период");
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;      		
		
		Если НайденнаяСтрока.СуммаБезНДС <> 0 или НайденнаяСтрока.ВалютнаяСуммаБезНДС <> 0 Тогда
			
			Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
			Движение.Период 					= ТекСтрокаГрафикПоставок.Период;
			//АБС ИЗМЕНЕНИЕ 35278  04.12.2013 19:01:10  Марат
			Попытка
				Если СтруктураЗЗ.БюджетнаяСтатья = Неопределено ИЛИ СтруктураЗЗ.БюджетнаяСтатья = Null Тогда 
					Движение.СтатьяОборотов = Справочники.СтатьиОборотовПоБюджетам.ПустаяСсылка();			
				Иначе
					Движение.СтатьяОборотов 			= СтруктураЗЗ.БюджетнаяСтатья;
				КонецЕсли;
			Исключение
				Движение.СтатьяОборотов = Справочники.СтатьиОборотовПоБюджетам.ПустаяСсылка(); 				
			КонецПопытки;
			//АБС ИЗМЕНЕНИЕ 35278 КОНЕЦ           
			                                      
			Движение.ЦФО 						= СтруктураЗЗ.ЦФО;
			//Движение.Проект 					= СтруктураЗЗ.Проект;
			//Движение.Контрагент 				= СтруктураЗЗ.Контрагент;
			Движение.абс_ТипКонтрагента 		= СтруктураЗЗ.ТипКонтрагента;
			Движение.абс_ТипСети 				= СтруктураЗЗ.ТипСети;
			Движение.абс_КВ 					= СтруктураЗЗ.КВ;
			Движение.абс_ТЭО 					= СтруктураЗЗ.ТЭО;
			Движение.абс_ЦФУ 					= СтруктураЗЗ.ЦФУ;
			Движение.абс_ТипРасхода 			= СтруктураЗЗ.ТипРасхода;
			Движение.Организация 				= СтруктураЗЗ.Организация;
			Движение.СуммаСценарияИсполнение	= Мин(ТекСтрокаГрафикПоставок.СуммаБезНДС,НайденнаяСтрока.СуммаБезНДС);
			Движение.СуммаСценарияИсполнениеВал = Мин(ТекСтрокаГрафикПоставок.ВалютнаяСуммаБезНДС,НайденнаяСтрока.ВалютнаяСуммаБезНДС);
			Движение.Валюта						= СтруктураЗЗ.ВалютаДокумента;
			//Сторчевой А.Н. 05.12.2017 НФС {
			Движение.СтатьяОборотов 			= ТекСтрокаГрафикПоставок.СтатьяОборотов;
			Движение.абс_ТипСети 				= ТекСтрокаГрафикПоставок.абс_ТипСети;
			Движение.абс_КВ 					= ТекСтрокаГрафикПоставок.абс_КВ;
			Движение.абс_ТЭО 					= ТекСтрокаГрафикПоставок.абс_ТЭО;
			Движение.абс_ЦФУ 					= ТекСтрокаГрафикПоставок.абс_ЦФУ;
			Движение.ttk_ОбъектБюджетирования	= ТекСтрокаГрафикПоставок.ttk_ОбъектБюджетирования;
			//Движение.ttk_Город		 			= ТекСтрокаГрафикПоставок.ttk_Город;
			// } Сторчевой А.Н. 05.12.2017 НФС

			Если мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа <= ТекСтрокаГрафикПоставок.Период Тогда
				
				Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Период = Дата;
				Движение.ЗакупочныйЗаказ = Ссылка;
				Движение.ПериодПоставки = НачалоМесяца(ТекСтрокаГрафикПоставок.Период);
				//Движение.Сумма = Мин(ТекСтрокаГрафикПоставок.ВалютнаяСуммаБезНДС,НайденнаяСтрока.ВалютнаяСуммаБезНДС); 
				//Сторчевой А.Н. 05.12.2017 НФС {
				Движение.Сумма =    ТекСтрокаГрафикПоставок.СуммаБезНДС;
				Движение.СтатьяОборотов 			= ТекСтрокаГрафикПоставок.СтатьяОборотов;
				Движение.абс_ТипСети 				= ТекСтрокаГрафикПоставок.абс_ТипСети;
				Движение.абс_КВ 					= ТекСтрокаГрафикПоставок.абс_КВ;
				Движение.абс_ТЭО 					= ТекСтрокаГрафикПоставок.абс_ТЭО;
				Движение.абс_ЦФУ 					= ТекСтрокаГрафикПоставок.абс_ЦФУ;
				Движение.ttk_ОбъектБюджетирования	= ТекСтрокаГрафикПоставок.ttk_ОбъектБюджетирования;
				//Движение.ttk_Город		 			= ТекСтрокаГрафикПоставок.ttk_Город;
				// } Сторчевой А.Н. 05.12.2017 НФС
			КонецЕсли;			
			
		КонецЕсли;
		
	КонецЦикла;		

КонецПроцедуры
//ххх Брель Виктор Андреевич 27.03.2018 11:44:01, заявка <<<
Функция Проверка_абс_ГрафикПоставкиЗакупочногоЗаказаОтрицОстатки(Отказ)
	 // ОТключена Брель
	 //Возврат Отказ;
	 // 
	 //ххх Брель Виктор Андреевич 14.06.2018 17:10:36, заявка 77354995<<<
	// 14.06.2018 Убрали ТипСети
	 // Брель Виктор Андреевич 14.06.2018 17:10:36 >>>
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    //+ Машута А. 02.11.2018 задача 765
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_КВ,
		//|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_ТЭО,
		//|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_ЦФУ,
		//|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.СтатьяОборотов,
		//|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.ttk_ОбъектБюджетирования,
		//|	НАЧАЛОПЕРИОДА(абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.ПериодПоставки, МЕСЯЦ) КАК Период,
		//|	СУММА(абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.СуммаКонечныйОстаток) КАК СуммаОстаток
		//|ИЗ
		//|	РегистрНакопления.абс_ГрафикПоставкиЗакупочногоЗаказа.ОстаткиИОбороты(, , , , ЗакупочныйЗаказ = &ЗакупочныйЗаказ) КАК абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты
		//|ГДЕ
		//|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.СуммаКонечныйОстаток < 0
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.СтатьяОборотов,
		//|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_ТЭО,
		//|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_ЦФУ,
		//|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_КВ,
		//|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.ttk_ОбъектБюджетирования,
		//|	НАЧАЛОПЕРИОДА(абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.ПериодПоставки, МЕСЯЦ)";
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_КВ,
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_ТЭО,
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_ЦФУ,
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.СтатьяОборотов,
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.ttk_ОбъектБюджетирования,
		|	НАЧАЛОПЕРИОДА(абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.ПериодПоставки, МЕСЯЦ) КАК Период,
		|	СУММА(абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.СуммаКонечныйОстаток) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.абс_ГрафикПоставкиЗакупочногоЗаказа.ОстаткиИОбороты(, , , , ЗакупочныйЗаказ = &ЗакупочныйЗаказ) КАК абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.абс_ЗакупочныйЗаказ.ГрафикПоставок КАК ЗакупочныйЗаказГрафикПоставок
		|		ПО абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.ЗакупочныйЗаказ = ЗакупочныйЗаказГрафикПоставок.Ссылка
		|		И абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_ТЭО = ЗакупочныйЗаказГрафикПоставок.абс_ТЭО
		|		И абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_ЦФУ = ЗакупочныйЗаказГрафикПоставок.абс_ЦФУ
		|		И абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_КВ = ЗакупочныйЗаказГрафикПоставок.абс_КВ
		|		И абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.ttk_ОбъектБюджетирования = ЗакупочныйЗаказГрафикПоставок.ttk_ОбъектБюджетирования
		|		И НАЧАЛОПЕРИОДА(абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.ПериодПоставки, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ЗакупочныйЗаказГрафикПоставок.Период, МЕСЯЦ)
		|		И ЗакупочныйЗаказГрафикПоставок.ВалютнаяСуммаБезНДС > 0
		|ГДЕ
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.СуммаКонечныйОстаток < 0
		|
		|СГРУППИРОВАТЬ ПО
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.СтатьяОборотов,
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_ТЭО,
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_ЦФУ,
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.абс_КВ,
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.ttk_ОбъектБюджетирования,
		|	НАЧАЛОПЕРИОДА(абс_ГрафикПоставкиЗакупочногоЗаказаОстаткиИОбороты.ПериодПоставки, МЕСЯЦ)";		
		//- Машута А. 02.11.2018 задача 765
		
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Ссылка);
	//Запрос.УстановитьПараметр("КонецПериодаГод", КонецГода(Ссылка.Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтрокаДляПроверки = РезультатЗапроса.Выбрать();
	
	Пока СтрокаДляПроверки.Следующий() Цикл

			 СписокАналитик = ?(ЗначениеЗаполнено(СтрокаДляПроверки.ttk_ОбъектБюджетирования),"
			 | Объект Бюджетирования: "+Строка(СтрокаДляПроверки.ttk_ОбъектБюджетирования)+ " ("+Строка(СтрокаДляПроверки.ttk_ОбъектБюджетирования.Код)+") "+",","")+
			?(ЗначениеЗаполнено(СтрокаДляПроверки.абс_ЦФУ),Строка("
			| ЦФУ: "+СтрокаДляПроверки.абс_ЦФУ)+",","")+
			?(ЗначениеЗаполнено(СтрокаДляПроверки.абс_ТЭО),Строка("
			| Технико-экономическое обоснование: "+СтрокаДляПроверки.абс_ТЭО)+",","")+
			//ххх Брель Виктор Андреевич 14.06.2018 17:10:36, заявка 77354995<<<
			// 14.06.2018 Убрали ТипСети
			//?(ЗначениеЗаполнено(СтрокаДляПроверки.абс_ТипСети),Строка("
			//| Тип сетей/услуг: " +СтрокаДляПроверки.абс_ТипСети)+",","")+
			// Брель Виктор Андреевич 14.06.2018 17:11:42 >>>			 
			?(ЗначениеЗаполнено(СтрокаДляПроверки.СтатьяОборотов),Строка("
			| Статья оборотов: "+СтрокаДляПроверки.СтатьяОборотов)+",","")+
			?(ЗначениеЗаполнено(СтрокаДляПроверки.абс_КВ),Строка("
			| КВ: " +СтрокаДляПроверки.абс_КВ)+",","");
			
			ТекстСообщенияОбОшибке = Строка(СтрокаДляПроверки.Период)+ " Контроль отрицательных остатков по графику поставок: " + СписокАналитик + "остаток: " + СтрокаДляПроверки.СуммаОстаток;
			Отказ = Истина;
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
			//Прервать;
	КонецЦикла;
	Возврат Отказ;
КонецФункции
// Брель Виктор Андреевич 27.03.2018 11:44:01 >>>

//\\АБС ВСТАВКА №10316 КОНЕЦ

Функция КонтрольДоговоров(Текст  = "") Экспорт 
	
	//АБС ВСТАВКА №15153 НАЧАЛО
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:16:00  Поставка	 
	Если глЗначениеПеременной("абс_ВыклКонтрольДоговоровВЗЗ")
		или НЕ ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ТМЦУслуги Тогда
		Возврат "";
	КонецЕсли;	
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗЗ.ДоговорКонтрагента
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.Договоры КАК ЗЗ
	|ГДЕ
	|	ЗЗ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗЗ.ДоговорКонтрагента";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат "Не указан договор, на закладке «Договоры»!";
	КонецЕсли;
	//\\АБС ВСТАВКА №15153 КОНЕЦ
	
КонецФункции

// ПРОЦЕДУРЫ ОБРАБОТЧИКИ ПРЕДОПРЕДЕЛННЫХ СОБЫТИЙ

Функция КонтрольПроверкаППДнаОФК()
	
	Отказ = Ложь;
	
	СтатусыПоставки = Новый Массив();
	СтатусыПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вр
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.абс_ЗакупочныеЗаказы КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	(ПоступлениеТоваровУслуг.Ссылка.абс_ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|			ИЛИ ПоступлениеТоваровУслуг.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ)
	|	И ПоступлениеТоваровУслуг.Ссылка.абс_Статус В(&СтатусыПоставки)
	|	И ПоступлениеТоваровУслуг.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.абс_ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И АвансовыйОтчет.абс_Статус В(&СтатусыПоставки)
	|	И АвансовыйОтчет.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вр.Ссылка
	|ИЗ
	|	вр КАК вр
	|
	|СГРУППИРОВАТЬ ПО
	|	вр.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вр");
	
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Ссылка); 
	Запрос.УстановитьПараметр("СтатусыПоставки", СтатусыПоставки);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции	

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//ххх Брель Виктор Андреевич 21.06.2018 11:52:32, заявка 77356750<<<
	КВпоПост = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВпоПост");
	ГоловнаяКомпания = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК02020013");
	ТК0101ДЗОТТК = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК0101");
	ТК0102ФилиалыТТК = Справочники.абс_ТипыКонтрагентов.НайтиПоКоду("ТК0102");
	// Брель Виктор Андреевич 21.06.2018 11:52:32 >>>
	
	КВпоПост = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВпоПост");
	
	Если УбыткиПрошлыхЛет Тогда
		//Сторчевой А.Н. 28.11.2016 7759076 {
		//Включаем контроль лимитов если константа заполнена и дата документа больше
		//Возврат;
		ttk_УчетБДРУбытковПрошлыхЛет = глЗначениеПеременной("ttk_УчетБДРУбытковПрошлыхЛет");
		Если НЕ (ЗначениеЗаполнено(ttk_УчетБДРУбытковПрошлыхЛет) и Дата>=ttk_УчетБДРУбытковПрошлыхЛет) Тогда
			Возврат;
		КонецЕсли;
		// } Сторчевой А.Н. 28.11.2016 7759076
	КонецЕсли;
	
	Если КонсолидированныйЗЗПоОЗК Тогда
		Возврат;
	КонецЕсли;
	//абс_Стрельцов+ добавлено: 17.09.2012
	//при переносе ПУ
	//---------------------------------------------------
	//Если мПроведениеПоМеханизмуПроектногоУчета Тогда
	
	//АБС НАЧАЛО Задача №08759
	
	//АБС_Стрельцов+ добавлено: 12.10.2012
	//новое для ПУ
	//------------------------------------
	//ТЧ_Товары = Товары.Выгрузить(, "абс_Проект, СуммаБезНДС");
	//ТЧ_Товары.Колонки.абс_Проект.Имя 	= "Проект";
	//ТЧ_Товары.Колонки.СуммаБезНДС.Имя 	= "ДоляРаспределения";
	ТЧ_Товары = ПолучитьТаблицуСпецификацииСУчетомРаспределения(); //АБС Гетц 27.02.13
	
	//ТЗДолиПоПроектам = абс_БюджетированиеПривилегированный.ПолучитьТаблицуРаспределенияПоПроектам(РаспределениеПоПроектам.Выгрузить(), "Все");
	ТЗДолиПоПроектам = абс_БюджетированиеПривилегированный.ПолучитьТаблицуРаспределенияПоПроектам(ПолучитьТаблицуРаспределенияПоПроектам_ЗЗ(ТЧ_Товары), "Все");
	//-----------------------------------
	//АБС_Стрельцов-
	
	Если ТЗДолиПоПроектам.Количество()=0 Тогда
		//АБС_Стрельцов+ изменено: 12.10.2012
		//новое для ПУ
		//------------------------------------
		ТаблицаПроектов = абс_БюджетированиеПривилегированный.ПолучитьТаблицуРаспределенияПоПроектам(ТЧ_Товары, "Все");
		Для каждого СтрокаТабл Из ТаблицаПроектов Цикл
			н = ТЗДолиПоПроектам.Добавить();
			ЗаполнитьЗначенияСвойств(н, СтрокаТабл);
			//н.ДоляРаспределения = Товары.Итог("СуммаБезНДС");
		КонецЦикла;	
	Иначе
		ТаблицаПроектов = абс_БюджетированиеПривилегированный.ПолучитьТаблицуРаспределенияПоПроектам(ТЧ_Товары, "НеПустые");
		Для каждого СтрокаТабл Из ТаблицаПроектов Цикл
			н = ТЗДолиПоПроектам.Добавить();
			ЗаполнитьЗначенияСвойств(н, СтрокаТабл);
		КонецЦикла;
		//------------------------------------
		//АБС_Стрельцов-
	КонецЕсли;
	
	//АБС_Стрельцов+ изменено: 12.10.2012
	//новое для ПУ
	//------------------------------------		
	ТЗДолиПоПроектам.Свернуть("Проект", "ДоляРаспределения");
	//------------------------------------
	//АБС_Стрельцов-
	
	ИтогКоэфПоПроектам = ТЗДолиПоПроектам.Итог("ДоляРаспределения");
	
	//\\АБС КОНЕЦ Задача №
	
	ТЗДолиПоПроектамГрафикаПоставок = ТЗДолиПоПроектам.Скопировать();
	МассивОбщихДолей = ТЗДолиПоПроектам.ВыгрузитьКолонку("ДоляРаспределения");
	
	//КонецЕСли;
	//-----------------------------------------------------
	//абс_Стрельцов-
	
	//Сторчевой А.Н. 05.12.2017 НФС {
	КолонкиАналитик = "СтатьяОборотов, абс_ТипСети, абс_КВ, абс_ТЭО, абс_ЦФУ, ttk_ОбъектБюджетирования, ttk_Город";
	ТоварыТЗ = Товары.Выгрузить(,КолонкиАналитик);
	ТоварыТЗ.Свернуть(КолонкиАналитик);
	КоличествоРазныхНаборовАналитик = ТоварыТЗ.Количество();
	//} Сторчевой А.Н. 05.12.2017 НФС
	//ххх Брель Виктор Андреевич 25.04.2018 11:06:00, заявка <<<
	
	Если   	
			Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ
		ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отменен	Тогда
		
		Движения.КонтролируемыеЗначенияБюджетов.Записывать = Истина;
		Движения.КонтролируемыеЗначенияБюджетов.Очистить();			
		 
		//АБС ВСТАВКА №10316,18687 НАЧАЛО
		Если НЕ НефиксированнаяСумма 
			и НЕ Отказ Тогда  	
			//ххх Брель Виктор Андреевич 27.03.2018 11:42:03, заявка <<
			//ЛимитимыПоПроведеннымППД();
			// Брель Виктор Андреевич 27.03.2018 11:42:03 >>>

		КонецЕсли;	
		//\\АБС ВСТАВКА №10316,18687 КОНЕЦ

		// На статусе Утверждение директором дирекции контролируем, но не забираем лимит. 
	//ИначеЕсли Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции ИЛИ 
	//	Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента ИЛИ 
	//	Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО Тогда
	//	
	//	Движения.КонтролируемыеЗначенияБюджетов.Записывать = Истина;
	//	Движения.КонтролируемыеЗначенияБюджетов.Очистить();
	//	Движения.КонтролируемыеЗначенияБюджетов.Записать();
	//	
	//	//КонтрольЛимитов(Отказ);
	//	
	//	Если Отказ Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Если НефиксированнаяСумма Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	//абс_Стрельцов+ добавлено: 17.09.2012
	//	//при переносе ПУ
	//	//----------------------------------------------------------
	//	//Если мПроведениеПоМеханизмуПроектногоУчета Тогда
	//	
	//	//АБС НАЧАЛО Задача №08759
	//	//Для Каждого СтрокаПроекта Из ТЗДолиПоПроектам Цикл
	//	//\\АБС КОНЕЦ Задача №08759
	//	Для Каждого ТекСтрокаГрафикПоставок Из ГрафикПоставок Цикл
	//		
	//		Если (НЕ СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>12*КоличествоРазныхНаборовАналитик))
	//			ИЛИ (СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>24*КоличествоРазныхНаборовАналитик)) Тогда
	//			продолжить;
	//		КонецЕсли;
	//		
	//		//АБС_Стрельцов+ добавлено: 15.10.2012
	//		//новый алгоритм распределения по проектам
	//		//-------------------------------------
	//		ТЗДолиПоПроектамГрафикаПоставок.ЗаполнитьЗначения(0, "ДоляРаспределения");
	//		
	//		МассивНовыхДолей = ttk_ОбщегоНазначения.РаспределитьПропорционально(ТекСтрокаГрафикПоставок.СуммаБезНДС, МассивОбщихДолей, 3);
	//		ТЗДолиПоПроектамГрафикаПоставок.ЗагрузитьКолонку(МассивНовыхДолей, "ДоляРаспределения");
	//		
	//		ИтогКоэфПоПроектам = ТЗДолиПоПроектамГрафикаПоставок.Итог("ДоляРаспределения");
	//		//------------------------------------
	//		//АБС_Стрельцов-
	//		
	//		//Для каждого СтрокаПроекта Из ТЗДолиПоПроектамГрафикаПоставок Цикл
	//		//	
	//			Если СтрокаПроекта.ДоляРаспределения = 0 Тогда
	//				Продолжить;
	//			КонецЕСли;
	//			
	//			Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
	//			Движение.Период 					= ТекСтрокаГрафикПоставок.Период;
	//			Движение.СтатьяОборотов 			= БюджетнаяСтатья;
	//			Движение.ЦФО 						= ЦФО;
	//			
	//			//Движение.Контрагент 				= Контрагент;
	//			Движение.абс_ТипКонтрагента 		= ТипКонтрагента;
	//			Движение.абс_ТипСети 				= ТипСети;
	//			Движение.абс_КВ 					= КВ;
	//			Движение.абс_ТЭО 					= ТЭО;
	//			Движение.абс_ЦФУ 					= ЦФУ;
	//			Движение.абс_ТипРасхода 			= ТипРасхода;
	//			Движение.Организация 				= Организация;
	//			
	//			//АБС НАЧАЛО Задача №08759
	//			//Движение.СуммаСценарияИсполнение	= ТекСтрокаГрафикПоставок.СуммаБезНДС;
	//			//Движение.СуммаСценарияИсполнениеВал = ТекСтрокаГрафикПоставок.ВалютнаяСуммаБезНДС;
	//			
	//			Движение.Проект = СтрокаПроекта.Проект;
	//			
	//			Движение.СуммаСценарияИсполнение	= Окр(ТекСтрокаГрафикПоставок.СуммаБезНДС*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
	//			Движение.СуммаСценарияИсполнениеВал = Окр(ТекСтрокаГрафикПоставок.ВалютнаяСуммаБезНДС*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
	//			//\\АБС КОНЕЦ Задача №08759
	//			//Сторчевой А.Н. 05.12.2017 НФС {
	//			Движение.СтатьяОборотов 			= ТекСтрокаГрафикПоставок.СтатьяОборотов;
	//			Движение.абс_ТипСети 				= ТекСтрокаГрафикПоставок.абс_ТипСети;
	//			Движение.абс_КВ 					= ТекСтрокаГрафикПоставок.абс_КВ;
	//			Движение.абс_ТЭО 					= ТекСтрокаГрафикПоставок.абс_ТЭО;
	//			Движение.абс_ЦФУ 					= ТекСтрокаГрафикПоставок.абс_ЦФУ;
	//			Движение.ttk_ОбъектБюджетирования	= ТекСтрокаГрафикПоставок.ttk_ОбъектБюджетирования;
	//			//Движение.ttk_Города		 			= ТекСтрокаГрафикПоставок.ttk_Города;
	//			// } Сторчевой А.Н. 05.12.2017 НФС
	//			Движение.Валюта						= ЭтотОбъект.ВалютаДокумента;
	//			
	//		//КонецЦикла;
	//	КонецЦикла;
	//	ПроеведениеПоГрафикамОплат(Отказ);
	//	//АБС НАЧАЛО Задача №08759
	//	//КонецЦикла;		 
	//	//\\АБС КОНЕЦ Задача №08759
	//	//Иначе
	//	//	Для Каждого ТекСтрокаГрафикПоставок Из ГрафикПоставок Цикл
	//	//		
	//	//		Если (НЕ СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>12))
	//	//ИЛИ (СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>24)) Тогда
	//	//			продолжить;
	//	//		КонецЕсли;
	//	//		
	//	//		Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
	//	//		Движение.Период 					= ТекСтрокаГрафикПоставок.Период;
	//	//		Движение.СтатьяОборотов 			= БюджетнаяСтатья;
	//	//		Движение.ЦФО 						= ЦФО;
	//	//		//Движение.Проект 					= Проект;
	//	//		//Движение.Контрагент 				= Контрагент;
	//	//		Движение.абс_ТипКонтрагента 		= ТипКонтрагента;
	//	//		Движение.абс_ТипСети 				= ТипСети;
	//	//		Движение.абс_КВ 					= КВ;
	//	//		Движение.абс_ТЭО 					= ТЭО;
	//	//		Движение.абс_ЦФУ 					= ЦФУ;
	//	//		Движение.абс_ТипРасхода 			= ТипРасхода;
	//	//		Движение.Организация 				= Организация;
	//	//		Движение.СуммаСценарияИсполнение	= ТекСтрокаГрафикПоставок.СуммаБезНДС;
	//	//		Движение.СуммаСценарияИсполнениеВал = ТекСтрокаГрафикПоставок.ВалютнаяСуммаБезНДС;
	//	//		Движение.Валюта						= ЭтотОбъект.ВалютаДокумента;
	//	//		
	//	//	КонецЦикла;
	//	//КонецЕСли;
	//	//-----------------------------------------------------
	//	//абс_Стрельцов-
	//	
	//	// На статусе УтверждениеОФК или Согласован еще раз контролируем лимит и забираем его.
	Иначе
		//Если	Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК
		//ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован 
		//ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УточненоДляОФК
		//ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение Тогда
		НеПроверять = НеПроверятьЗЗ(СтатусПоРегистру,Статус);

		// регистр КонтролируемыеЗначенияБюджетов 
		Движения.КонтролируемыеЗначенияБюджетов.Записывать = Истина;
		Движения.КонтролируемыеЗначенияБюджетов.Очистить();		
		Движения.КонтролируемыеЗначенияБюджетов.Записать();
		
		// Отключить контроль лимитов при переводе в статус "подготовка" из любого другого статуса кроме "подготова"
		Если Не НеПроверять Тогда
		КонтрольЛимитов(Отказ);
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НефиксированнаяСумма Тогда
			Возврат;
		КонецЕсли;
		
		//абс_Стрельцов+ добавлено: 17.09.2012
		//при переносе ПУ
		//--------------------------------------------------
		//Если мПроведениеПоМеханизмуПроектногоУчета Тогда
		
		//АБС НАЧАЛО Задача №08759
		//Для Каждого СтрокаПроекта Из ТЗДолиПоПроектам Цикл
		//\\АБС КОНЕЦ Задача №08759
		
		Для Каждого ТекСтрокаГрафикПоставок Из ГрафикПоставок Цикл
			
			Если (НЕ СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>12*КоличествоРазныхНаборовАналитик))
				ИЛИ (СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>24*КоличествоРазныхНаборовАналитик)) Тогда
				продолжить;
			КонецЕсли;
			
			//АБС_Стрельцов+ добавлено: 15.10.2012
			//новый алгоритм распределения по проектам
			//-------------------------------------
			ТЗДолиПоПроектамГрафикаПоставок.ЗаполнитьЗначения(0, "ДоляРаспределения");
			
			МассивНовыхДолей = ttk_ОбщегоНазначения.РаспределитьПропорционально(ТекСтрокаГрафикПоставок.СуммаБезНДС, МассивОбщихДолей, 3);
			ТЗДолиПоПроектамГрафикаПоставок.ЗагрузитьКолонку(МассивНовыхДолей, "ДоляРаспределения");
			
			ИтогКоэфПоПроектам = ТЗДолиПоПроектамГрафикаПоставок.Итог("ДоляРаспределения");
			//------------------------------------
			//АБС_Стрельцов-
			
			Для каждого СтрокаПроекта Из ТЗДолиПоПроектамГрафикаПоставок Цикл
				
				Если СтрокаПроекта.ДоляРаспределения = 0 Тогда
					Продолжить;
				КонецЕСли;
				
				Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
				Движение.Период 					= ТекСтрокаГрафикПоставок.Период;
				Движение.СтатьяОборотов 			= БюджетнаяСтатья;
				Движение.ЦФО 						= ЦФО;
				
				//Движение.Контрагент 				= Контрагент;
				//ххх Брель Виктор Андреевич 21.06.2018 11:52:32, заявка 77356750<<<
				Если ТипКонтрагента.Родитель = ТК0101ДЗОТТК ИЛИ    ТипКонтрагента.Родитель.Родитель = ТК0101ДЗОТТК ИЛИ ТипКонтрагента.Родитель.Родитель.Родитель = ТК0101ДЗОТТК ИЛИ
					ТипКонтрагента.Родитель = ТК0102ФилиалыТТК ИЛИ        ТипКонтрагента.Родитель.Родитель = ТК0102ФилиалыТТК ИЛИ ТипКонтрагента.Родитель.Родитель.Родитель = ТК0102ФилиалыТТК ИЛИ
					ТипКонтрагента = ГоловнаяКомпания Тогда
					Движение.абс_ТипКонтрагента 		= ТипКонтрагента;
				КонецЕсли;
				// Брель Виктор Андреевич 21.06.2018 11:52:32 >>>

				//Движение.абс_ТипСети 				= ТипСети;
				
				//ххх Брель Виктор Андреевич 21.06.2018 13:10:12, заявка 77356750<<<
				Если  БюджетнаяСтатья = КВпоПост Тогда
					Движение.абс_КВ 					= ТекСтрокаГрафикПоставок.абс_КВ;
				КонецЕсли;
				// Брель Виктор Андреевич 21.06.2018 13:10:12 >>>

				Движение.абс_ТЭО 					= ТекСтрокаГрафикПоставок.абс_ТЭО;
				Движение.абс_ЦФУ 					= ТекСтрокаГрафикПоставок.абс_ЦФУ;
				Движение.абс_ТипРасхода 			= ТипРасхода;
				Движение.Организация 				= Организация;
				Движение.ttk_ОбъектБюджетирования	= ТекСтрокаГрафикПоставок.ttk_ОбъектБюджетирования;
				Движение.Валюта						= ЭтотОбъект.ВалютаДокумента;
				Движение.СтатьяОборотов 			= ТекСтрокаГрафикПоставок.СтатьяОборотов;
				Движение.Проект = СтрокаПроекта.Проект;
				Движение.СуммаСценарияИсполнение	= Окр(ТекСтрокаГрафикПоставок.СуммаБезНДС*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
				Движение.СуммаСценарияИсполнениеВал = Окр(ТекСтрокаГрафикПоставок.ВалютнаяСуммаБезНДС*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
				//АБС НАЧАЛО Задача №08759
				//Движение.СуммаСценарияИсполнение	= ТекСтрокаГрафикПоставок.СуммаБезНДС;
				//Движение.СуммаСценарияИсполнениеВал = ТекСтрокаГрафикПоставок.ВалютнаяСуммаБезНДС;
				
				
				//\\АБС КОНЕЦ Задача №08759
				
				//Сторчевой А.Н. 05.12.2017 НФС {
				//Движение.абс_ТипСети 				= ТекСтрокаГрафикПоставок.абс_ТипСети;
				//Движение.абс_КВ 					= ТекСтрокаГрафикПоставок.абс_КВ;
				//Движение.абс_ТЭО 					= ТекСтрокаГрафикПоставок.абс_ТЭО;
				//Движение.абс_ЦФУ 					= ТекСтрокаГрафикПоставок.абс_ЦФУ;
				//Движение.ttk_Города		 			= ТекСтрокаГрафикПоставок.ttk_Города;
				// } Сторчевой А.Н. 05.12.2017 НФС
			КонецЦикла;
			
		КонецЦикла;
		ПроеведениеПоГрафикамОплат(Отказ);
		//АБС_Стрельцов+ добавлено: 05.11.2012
		//если установлен флаг "Синхронизация графиков по договорам",
		//------------------------------------------------------------------------------------------------
		ЕСли СинхронизацияГрафиковПоДоговорам Тогда
			ЕСли (ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ТМЦУслуги И Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован) 
				ИЛИ (ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование И Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение) Тогда
				
				ТЗПроектовГП = Движения.КонтролируемыеЗначенияБюджетов.Выгрузить(, "Период, Проект, СуммаСценарияИсполнение");
				ТЗПроектовГО = ТЗПроектовГП.СкопироватьКолонки();
				
				Для Каждого ТекСтрокаГрафикОплат Из ГрафикОплат Цикл
					
					Если (НЕ СледГодОплат и (ТекСтрокаГрафикОплат.СуммаБезНДС=0 или ТекСтрокаГрафикОплат.НомерСтроки>12))
						ИЛИ (СледГодОплат и (ТекСтрокаГрафикОплат.СуммаБезНДС=0 или ТекСтрокаГрафикОплат.НомерСтроки>24)) Тогда
						продолжить;
					КонецЕсли;
					
					ТЗДолиПоПроектамГрафикаПоставок.ЗаполнитьЗначения(0, "ДоляРаспределения");
					
					МассивНовыхДолей = ttk_ОбщегоНазначения.РаспределитьПропорционально(ТекСтрокаГрафикОплат.СуммаБезНДС, МассивОбщихДолей, 3);
					ТЗДолиПоПроектамГрафикаПоставок.ЗагрузитьКолонку(МассивНовыхДолей, "ДоляРаспределения");
					
					ИтогКоэфПоПроектам = ТЗДолиПоПроектамГрафикаПоставок.Итог("ДоляРаспределения");
					
					Если ИтогКоэфПоПроектам = 0 Тогда
						Продолжить;
					КонецЕСли;
					
					Для каждого СтрокаПроекта Из ТЗДолиПоПроектамГрафикаПоставок Цикл
						
						Если СтрокаПроекта.ДоляРаспределения = 0 Тогда
							Продолжить;
						КонецЕСли;
						
						СтрокаТаблицыГО = ТЗПроектовГО.Добавить();
						СтрокаТаблицыГО.Период = ТекСтрокаГрафикОплат.Период;
						СтрокаТаблицыГО.Проект = СтрокаПроекта.Проект;
						
						СтрокаТаблицыГО.СуммаСценарияИсполнение	= Окр(ТекСтрокаГрафикОплат.СуммаБезНДС*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
						
					КонецЦикла;
					
				КонецЦикла;
				
				ТаблицыГрафиков = Новый Структура("ГрафикПоставок, ГрафикОплат", ТЗПроектовГП, ТЗПроектовГО);
				
				ВыполнитьЗаполнениеДоговоров(ТаблицыГрафиков);
				
			КонецЕСли;
			
		КонецЕСли;
		//------------------------------------------------------------------------------------------------
		//АБС_Стрельцов-
		
		//АБС НАЧАЛО Задача №08759
		//КонецЦикла;
		//\\АБС КОНЕЦ Задача №08759
		
		//Иначе
		//	
		//	Для Каждого ТекСтрокаГрафикПоставок Из ГрафикПоставок Цикл
		//		
		//		Если (НЕ СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>12))
		//ИЛИ (СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>24)) Тогда
		//			продолжить;
		//		КонецЕсли;
		//		
		//		Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
		//		Движение.Период 					= ТекСтрокаГрафикПоставок.Период;
		//		Движение.СтатьяОборотов 			= БюджетнаяСтатья;
		//		Движение.ЦФО 						= ЦФО;
		//		//Движение.Проект 					= Проект;
		//		//Движение.Контрагент 				= Контрагент;
		//		Движение.абс_ТипКонтрагента 		= ТипКонтрагента;
		//		Движение.абс_ТипСети 				= ТипСети;
		//		Движение.абс_КВ 					= КВ;
		//		Движение.абс_ТЭО 					= ТЭО;
		//		Движение.абс_ЦФУ 					= ЦФУ;
		//		Движение.абс_ТипРасхода 			= ТипРасхода;
		//		Движение.Организация 				= Организация;
		//		Движение.СуммаСценарияИсполнение	= ТекСтрокаГрафикПоставок.СуммаБезНДС;
		//		Движение.СуммаСценарияИсполнениеВал = ТекСтрокаГрафикПоставок.ВалютнаяСуммаБезНДС;
		//		Движение.Валюта						= ЭтотОбъект.ВалютаДокумента;
		//		
		//	КонецЦикла;
		//	
		//КонецЕСли;
		//-----------------------------------------
		//абс_Стрельцов-
		
	//Иначе
	//	
	//	Движения.КонтролируемыеЗначенияБюджетов.Записывать = Истина;
	//	Движения.КонтролируемыеЗначенияБюджетов.Очистить();
	//	Движения.КонтролируемыеЗначенияБюджетов.Записать();
	//	
	//	КонтрольЛимитов(Отказ);
	//	
	//	Если Отказ Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Если НефиксированнаяСумма Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	//абс_Стрельцов+ добавлено: 17.09.2012
	//	//при переносе ПУ
	//	//--------------------------------------------------
	//	//Если мПроведениеПоМеханизмуПроектногоУчета Тогда
	//	
	//	//АБС НАЧАЛО Задача №08759
	//	//Для Каждого СтрокаПроекта Из ТЗДолиПоПроектам Цикл
	//	//\\АБС КОНЕЦ Задача №08759
	//	
	//	Для Каждого ТекСтрокаГрафикПоставок Из ГрафикПоставок Цикл
	//		
	//		Если (НЕ СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>12*КоличествоРазныхНаборовАналитик))
	//			ИЛИ (СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>24*КоличествоРазныхНаборовАналитик)) Тогда
	//			продолжить;
	//		КонецЕсли;
	//		
	//		//АБС_Стрельцов+ добавлено: 15.10.2012
	//		//новый алгоритм распределения по проектам
	//		//-------------------------------------
	//		ТЗДолиПоПроектамГрафикаПоставок.ЗаполнитьЗначения(0, "ДоляРаспределения");
	//		
	//		МассивНовыхДолей = ttk_ОбщегоНазначения.РаспределитьПропорционально(ТекСтрокаГрафикПоставок.СуммаБезНДС, МассивОбщихДолей, 3);
	//		ТЗДолиПоПроектамГрафикаПоставок.ЗагрузитьКолонку(МассивНовыхДолей, "ДоляРаспределения");
	//		
	//		ИтогКоэфПоПроектам = ТЗДолиПоПроектамГрафикаПоставок.Итог("ДоляРаспределения");
	//		//------------------------------------
	//		//АБС_Стрельцов-
	//		
	//		Для каждого СтрокаПроекта Из ТЗДолиПоПроектамГрафикаПоставок Цикл
	//			
	//			Если СтрокаПроекта.ДоляРаспределения = 0 Тогда
	//				Продолжить;
	//			КонецЕСли;
	//			
	//			Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
	//			Движение.Период 					= ТекСтрокаГрафикПоставок.Период;
	//			Движение.СтатьяОборотов 			= БюджетнаяСтатья;
	//			Движение.ЦФО 						= ЦФО;
	//			
	//			//Движение.Контрагент 				= Контрагент;
	//			Движение.абс_ТипКонтрагента 		= ТипКонтрагента;
	//			Движение.абс_ТипСети 				= ТипСети;
	//			Движение.абс_КВ 					= КВ;
	//			Движение.абс_ТЭО 					= ТЭО;
	//			Движение.абс_ЦФУ 					= ЦФУ;
	//			Движение.абс_ТипРасхода 			= ТипРасхода;
	//			Движение.Организация 				= Организация;
	//			
	//			//АБС НАЧАЛО Задача №08759
	//			//Движение.СуммаСценарияИсполнение	= ТекСтрокаГрафикПоставок.СуммаБезНДС;
	//			//Движение.СуммаСценарияИсполнениеВал = ТекСтрокаГрафикПоставок.ВалютнаяСуммаБезНДС;
	//			
	//			Движение.Проект = СтрокаПроекта.Проект;
	//			
	//			Движение.СуммаСценарияИсполнение	= Окр(ТекСтрокаГрафикПоставок.СуммаБезНДС*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
	//			Движение.СуммаСценарияИсполнениеВал = Окр(ТекСтрокаГрафикПоставок.ВалютнаяСуммаБезНДС*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
	//			//\\АБС КОНЕЦ Задача №08759
	//			
	//			Движение.Валюта						= ЭтотОбъект.ВалютаДокумента;
	//			//Сторчевой А.Н. 05.12.2017 НФС {
	//			Движение.СтатьяОборотов 			= ТекСтрокаГрафикПоставок.СтатьяОборотов;
	//			Движение.абс_ТипСети 				= ТекСтрокаГрафикПоставок.абс_ТипСети;
	//			Движение.абс_КВ 					= ТекСтрокаГрафикПоставок.абс_КВ;
	//			Движение.абс_ТЭО 					= ТекСтрокаГрафикПоставок.абс_ТЭО;
	//			Движение.абс_ЦФУ 					= ТекСтрокаГрафикПоставок.абс_ЦФУ;
	//			Движение.ttk_ОбъектБюджетирования	= ТекСтрокаГрафикПоставок.ttk_ОбъектБюджетирования;
	//			//Движение.ttk_Города		 			= ТекСтрокаГрафикПоставок.ttk_Города;
	//			// } Сторчевой А.Н. 05.12.2017 НФС
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//	ПроеведениеПоГрафикамОплат(Отказ);
		//АБС НАЧАЛО Задача №08759
		//КонецЦикла;
		//\\АБС КОНЕЦ Задача №08759
		//Иначе
		//	Для Каждого ТекСтрокаГрафикПоставок Из ГрафикПоставок Цикл
		//		
		//		Если (НЕ СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>12))
		//ИЛИ (СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>24)) Тогда
		//			продолжить;
		//		КонецЕсли;
		//		
		//		Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
		//		Движение.Период 					= ТекСтрокаГрафикПоставок.Период;
		//		Движение.СтатьяОборотов 			= БюджетнаяСтатья;
		//		Движение.ЦФО 						= ЦФО;
		//		//Движение.Проект 					= Проект;
		//		//Движение.Контрагент 				= Контрагент;
		//		Движение.абс_ТипКонтрагента 		= ТипКонтрагента;
		//		Движение.абс_ТипСети 				= ТипСети;
		//		Движение.абс_КВ 					= КВ;
		//		Движение.абс_ТЭО 					= ТЭО;
		//		Движение.абс_ЦФУ 					= ЦФУ;
		//		Движение.абс_ТипРасхода 			= ТипРасхода;
		//		Движение.Организация 				= Организация;
		//		Движение.СуммаСценарияИсполнение	= ТекСтрокаГрафикПоставок.СуммаБезНДС;
		//		Движение.СуммаСценарияИсполнениеВал = ТекСтрокаГрафикПоставок.ВалютнаяСуммаБезНДС;
		//		Движение.Валюта						= ЭтотОбъект.ВалютаДокумента;
		//		
		//	КонецЦикла;		
		//КонецЕсли;
		//-----------------------------------------
		//абс_Стрельцов-
		
	КонецЕсли;
	// АБС ВСТАВКА 02390 Начало
	 	
	// Брель Виктор Андреевич 25.04.2018 11:06:00 >>>

    //ххх Брель Виктор Андреевич 28.03.2018 16:10:12, заявка <<<
	Если НЕ НефиксированнаяСумма Тогда
		
		Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Записывать = Истина;
		Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Очистить();
		Если Статус <> Перечисления.абсСтатусЗакупочногоЗаказа.Отказ И
			Статус <> Перечисления.абсСтатусЗакупочногоЗаказа.Отменен Тогда
			Для Каждого ТекСтрокаГрафикПоставок Из ГрафикПоставок Цикл   
				Если (НЕ СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>12*КоличествоРазныхНаборовАналитик))
					ИЛИ (СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>24*КоличествоРазныхНаборовАналитик)) Тогда
					продолжить;
				КонецЕсли;  
				Если мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа <> '00010101'  
					и мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа <= ТекСтрокаГрафикПоставок.Период Тогда
					
					Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
					Движение.Период =  НачалоМесяца(ТекСтрокаГрафикПоставок.Период);
					Движение.ЗакупочныйЗаказ = Ссылка;
					Движение.ПериодПоставки = НачалоМесяца(ТекСтрокаГрафикПоставок.Период);
					Движение.Сумма = ТекСтрокаГрафикПоставок.ВалютнаяСуммаБезНДС;
					//Движение.СуммаРуб = ТекСтрокаГрафикПоставок.СуммаБезНДС;
					//Сторчевой А.Н. 05.12.2017 НФС {
					Движение.СтатьяОборотов 			= ТекСтрокаГрафикПоставок.СтатьяОборотов;
					Движение.абс_ТипСети 				= ТекСтрокаГрафикПоставок.абс_ТипСети;
					Движение.абс_КВ 					= ТекСтрокаГрафикПоставок.абс_КВ;
					Движение.абс_ТЭО 					= ТекСтрокаГрафикПоставок.абс_ТЭО;
					Движение.абс_ЦФУ 					= ТекСтрокаГрафикПоставок.абс_ЦФУ;
					Движение.ttk_ОбъектБюджетирования	= ТекСтрокаГрафикПоставок.ttk_ОбъектБюджетирования;
					//Движение.ttk_Город		 			= ТекСтрокаГрафикПоставок.ttk_Город;
					// } Сторчевой А.Н. 05.12.2017 НФС
				КонецЕсли;
			КонецЦикла;
			Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Записать();
			Если НЕ НеПроверять Тогда
				Проверка_абс_ГрафикПоставкиЗакупочногоЗаказаОтрицОстатки(Отказ);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 	
	
		// Брель Виктор Андреевич 28.03.2018 16:10:12 >>>

	// АБС ВСТАВКА 02390 Конец
	
	// {{ТТК Сладков А. Заявка № 31.10.2016 начало		
	Если ПредыдущийСтатусПоРегистру <> Неопределено Тогда
		
		Если ПредыдущийСтатусПоРегистру  = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован 
			И  Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации Тогда 
				
			ЗаписатьИсториюИзмененияГрафикаПоставок();	
			
		ИначеЕсли ПредыдущийСтатусПоРегистру  = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации 
			И  Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда 
			
			 ЗаписатьИсториюИзмененияГрафикаПоставок(Истина);	
			 
		КонецЕсли;
		
	КонецЕсли;
	// }}ТТК Сладков А. Заявка № 31.10.2016 окончание

КонецПроцедуры

Функция ПроверитьОтклонение(Знач Число1, Знач Число2)
	
	ОтклонениеНеДопустимо = Ложь;
	ДопустимоеОтклонение  = 0.9;
	
	Число1 = ?(Число1 = Null или Число1 = Неопределено,0,Число1);	
	Число2 = ?(Число2 = Null или Число2 = Неопределено,0,Число2);
	
	Если (Число1 - Число2) > ДопустимоеОтклонение или (Число1 - Число2) < -ДопустимоеОтклонение Тогда
		ОтклонениеНеДопустимо = Истина;
	КонецЕсли;	
	Если (Число2 - Число1) > ДопустимоеОтклонение или (Число2 - Число1) < -ДопустимоеОтклонение Тогда
		ОтклонениеНеДопустимо = Истина;
	КонецЕсли;	
	
	Возврат ОтклонениеНеДопустимо;	
	
КонецФункции	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	 //ххх Брель Виктор Андреевич 27.04.2018 18:08:44, заявка <<<
	 Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		 Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Очистить();
		 Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Записать();
		 Проверка_абс_ГрафикПоставкиЗакупочногоЗаказаОтрицОстатки(Отказ);
	КонецЕсли;

	 // Брель Виктор Андреевич 27.04.2018 18:08:44 >>>
	 
	Если ЭтоНовый() Тогда 
		Если СтрДлина(СокрЛП(ЭтотОбъект.Номер)) > 9 Тогда 
			ЭтотОбъект.Номер = Лев(ЭтотОбъект.Номер, 4)+ Прав(ЭтотОбъект.Номер, 5);
		КонецЕсли;
	КонецЕсли;
	
	Если КонсолидированныйЗЗПоОЗК Тогда
		
		Если НЕ ЭтоНовый() И НЕ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка И НЕ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
			
			ПроверитьКонсолидированныеЗЗПоОЗК(Отказ);
			
		КонецЕсли;
		
		Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК Тогда
			Для Каждого ЗЗ_ОЗК Из ЗакупочныеЗаказыОЗК Цикл		
				Если ЗЗ_ОЗК.ЗакупочныйЗаказ.Статус <> Статус Тогда
					ttk_ОбщегоНазначения.СообщитьОбОшибке(Строка(ЗЗ_ОЗК.ЗакупочныйЗаказ) + " не в статусе ""Обработка дир ККР в КТТК""", Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
			
			СтатусОрганизации = абс_БизнесПроцессыПривелегированный.ПолучитьСтатусОрганизацииСотрудникаПользователя(мТекущийПользователь);
			Если (СтатусОрганизации <> Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация
				И СтатусОрганизации <> Перечисления.абс_СтатусОрганизации.Филиал) 
				И ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ИнвестиционноеСтроительство Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(Строка(Ссылка) + ": Запрещено формировать закупочные заказы с типом Оборудование через ОЗК", Отказ);
			КонецЕсли;
			
		КонецЕсли;   
		
		//	СтруктураЗЗДоИзмененияСпецификации = Новый ХранилищеЗначения(ПолучитьСтруктуруЗЗ());
		
		Если Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка 
			И Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК
			И Не Отказ Тогда
			
			ТребуетсяПодтверждениеСпецификации = Ложь;
			Если СинхронизироватьСпецификациюЗЗОЗК(ТребуетсяПодтверждениеСпецификации) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Закупочный заказ " + Ссылка + " невозможно перевести в статус " + Статус + ".", Отказ);
			ИначеЕсли ТребуетсяПодтверждениеСпецификации Тогда
				Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//АБС ВСТАВКА №11689 НАЧАЛО
	Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение и НЕ НефиксированнаяСумма Тогда
		Отказ = КонтрольПроверкаППДнаОФК();
		Если Отказ Тогда
			Сообщить("Есть документы ППД в статусе ""Согласование ОФК""!",СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	
	//\\АБС ВСТАВКА №11689 КОНЕЦ	
	
	//АБС ВСТАВКА №11811 НАЧАЛО 
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:19:19  Поставка
	//Сторчевой А.Н. 28.11.2016 7759076 {
	ttk_УчетБДРУбытковПрошлыхЛет = глЗначениеПеременной("ttk_УчетБДРУбытковПрошлыхЛет");
	// } Сторчевой А.Н. 28.11.2016 7759076 
	Если НЕ глЗначениеПеременной("абс_ВыклКонтрольСтатусаЗавершенВЗакупочномЗаказе")
		//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ
		//Сторчевой А.Н. 28.11.2016 7759076 {
		//Включаем контроль лимитов если константа заполнена и дата документа больше
		//И НЕ УбыткиПрошлыхЛет
		И (НЕ УбыткиПрошлыхЛет ИЛИ (ЗначениеЗаполнено(ttk_УчетБДРУбытковПрошлыхЛет) и Дата>=ttk_УчетБДРУбытковПрошлыхЛет))
		// } Сторчевой А.Н. 28.11.2016 7759076
		И Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершен Тогда
		
		Запрос = Новый Запрос; 								  
		Запрос.УстановитьПараметр("ЗакупочныйЗаказ"	, Ссылка);
		СтатусСчета = Новый Массив;
		СтатусСчета.Добавить(Перечисления.абсСтатусыСчетов.ВОплату);
		СтатусСчета.Добавить(Перечисления.абсСтатусыСчетов.Исполнение);
		СтатусСчета.Добавить(Перечисления.абсСтатусыСчетов.Утвержден);
		СтатусСчета.Добавить(Перечисления.абсСтатусыСчетов.ГотовКОплате);
		СтатусСчета.Добавить(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
		СтатусСчета.Добавить(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
		СтатусСчета.Добавить(Перечисления.абсСтатусыСчетов.Оплачен);
		Запрос.УстановитьПараметр("СтатусСчета"	, СтатусСчета);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОбороты.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ,
		|	СУММА(абс_ГрафикПоставкиЗакупочногоЗаказаОбороты.СуммаПриход) КАК СуммаПриход,
		|	СУММА(абс_ГрафикПоставкиЗакупочногоЗаказаОбороты.СуммаРасход) КАК СуммаРасход
		|ПОМЕСТИТЬ КонтрольПоставок
		|ИЗ
		|	РегистрНакопления.абс_ГрафикПоставкиЗакупочногоЗаказа.Обороты(, , , ) КАК абс_ГрафикПоставкиЗакупочногоЗаказаОбороты
		|ГДЕ
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОбороты.ЗакупочныйЗаказ В(&ЗакупочныйЗаказ)
		|
		|СГРУППИРОВАТЬ ПО
		|	абс_ГрафикПоставкиЗакупочногоЗаказаОбороты.ЗакупочныйЗаказ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗакупочныйЗаказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	абс_СчетНаОплату.Ссылка.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ,
		|	СУММА(ЕСТЬNULL(абс_СчетНаОплату.ВалютнаяСумма, 0) - ЕСТЬNULL(абс_СчетНаОплату.ВалютнаяСумма, 0) * ВЫБОР
		|			КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))
		|				ТОГДА 0.1525423729
		|			КОГДА абс_СчетНаОплату.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110))
		|				ТОГДА 0.1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаОплат
		|ПОМЕСТИТЬ Оплаты
		|ИЗ
		|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
		|ГДЕ
		|	абс_СчетНаОплату.Ссылка.Проведен
		|	И (НЕ абс_СчетНаОплату.Ссылка.ПометкаУдаления)
		|	И абс_СчетНаОплату.СтатусСчета В(&СтатусСчета)
		|	И абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
		|
		|СГРУППИРОВАТЬ ПО
		|	абс_СчетНаОплату.Ссылка.ЗакупочныйЗаказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрольПоставок.ЗакупочныйЗаказ,
		|	КонтрольПоставок.СуммаПриход,
		|	КонтрольПоставок.СуммаРасход,
		|	Оплаты.СуммаОплат
		|ПОМЕСТИТЬ РезультатДанных
		|ИЗ
		|	КонтрольПоставок КАК КонтрольПоставок
		|		ПОЛНОЕ СОЕДИНЕНИЕ Оплаты КАК Оплаты
		|		ПО КонтрольПоставок.ЗакупочныйЗаказ = Оплаты.ЗакупочныйЗаказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КонтрольПоставок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Оплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РезультатДанных.ЗакупочныйЗаказ,
		|	СУММА(ВЫРАЗИТЬ(РезультатДанных.СуммаПриход КАК ЧИСЛО(20, 3))) КАК СуммаПриход,
		|	СУММА(ВЫРАЗИТЬ(РезультатДанных.СуммаРасход КАК ЧИСЛО(20, 3))) КАК СуммаРасход,
		|	СУММА(ВЫРАЗИТЬ(РезультатДанных.СуммаОплат КАК ЧИСЛО(20, 3))) КАК СуммаОплат
		|ИЗ
		|	РезультатДанных КАК РезультатДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатДанных.ЗакупочныйЗаказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ РезультатДанных";
		
		врЗапрос = Запрос.Выполнить();
		Если врЗапрос.Пустой() Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Статус ""Завершен"" может быть установлен в ЗЗ при условии, что график поставок закрыт ППД",Отказ);// и прошла оплата!",Отказ);
		КонецЕсли;	
		
		//Контроль по "сумма оплат" отключен по заявке №15719
		
		Выборка = врЗапрос.Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаПриход = ?(Выборка.СуммаПриход = Null,0,Выборка.СуммаПриход);
			СуммаРасход = ?(Выборка.СуммаРасход = Null,0,Выборка.СуммаРасход);
			//СуммаОплат  = ?(Выборка.СуммаОплат = Null,0,Выборка.СуммаОплат);
			Если ПроверитьОтклонение(СуммаПриход, СуммаРасход) 
				//или ПроверитьОтклонение(СуммаПриход, СуммаОплат)	
				//или ПроверитьОтклонение(СуммаРасход, СуммаОплат) 
				Тогда
				//Если ПроверитьОтклонение(СуммаПриход, СуммаРасход) Тогда
				//	Сообщить("График поставок не закрыт!",СтатусСообщения.Важное);	
				//КонецЕсли;	
				//Если ПроверитьОтклонение(СуммаПриход, СуммаОплат) Тогда
				//	Сообщить("Не прошла оплата!",СтатусСообщения.Важное);	
				//КонецЕсли;	
				Сообщить("Сумма по графику поставок = "+СуммаПриход+", сумма поставок = "+СуммаРасход,СтатусСообщения.Важное);//+", сумма оплат = "+СуммаОплат,СтатусСообщения.Важное);
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Статус ""Завершен"" может быть установлен в ЗЗ при условии, что график поставок закрыт ППД",Отказ);// и прошла оплата!",Отказ);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;	
	//\\АБС ВСТАВКА №11811 КОНЕЦ
	
	// Проверим выбранный статус
	СписокСтатусов = Новый СписокЗначений;
	ЗаполнитьСписокДоступныхСтатусов(СписокСтатусов);
	
	//Условие для ситуации, когда при выводе договора в статус "исполнение", обрабатываются ЗЗ из "ОжидаетДоговор" в "Согласован"
	//При записи договора ЗЗ может перейти только в статус Отказ или Согласован.
	Если НЕ (ЗначениеЗаполнено(мТекущийДоговор) 
		И Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор 
		И (Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован или Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ)) Тогда
		
		Если СписокСтатусов.НайтиПоЗначению(Статус) = Неопределено Тогда  			
			ttk_ОбщегоНазначения.СообщитьОбОшибке("" + Ссылка + ": Выбран неверный статус документа.", Отказ);  			
			Статус = Ссылка.Статус; 			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	врПрошлыйСтатус = Ссылка.Статус;
	
	//АБС_Стрельцов+ добавлено: 12.10.2012
	//новое для ПУ
	//------------------------------------
	//ТЧ_Товары = Товары.Выгрузить(, "абс_Проект, СуммаБезНДС");
	//ТЧ_Товары.Колонки.абс_Проект.Имя 	= "Проект";
	//ТЧ_Товары.Колонки.СуммаБезНДС.Имя 	= "ДоляРаспределения";
	//
	//ТаблицаПроектов = абс_БюджетированиеПривилегированный.ПолучитьТаблицуРаспределенияПоПроектам(ТЧ_Товары, "Пустые");
	//	
	//ИтогДоляРаспределенияПустыхПроектов = ТаблицаПроектов.Итог("ДоляРаспределения");
	
	//------------------------------------
	//АБС_Стрельцов-
	
	ИтогСуммаСНДС = Товары.Итог("СуммаСНДС");
	ИтогСуммаБезНДС = Товары.Итог("СуммаБезНДС");
	
	//абс_Стрельцов+ добавлено: 18.09.2012
	//при переносе ПУ
	//---------------------------------------------------
	//Если мПроведениеПоМеханизмуПроектногоУчета Тогда
	//	//АБС НАЧАЛО Задача №08759
	//	Если РаспределениеПоПроектам.Количество()>0 И Окр(РаспределениеПоПроектам.Итог("ДоляРаспределения")) <> Окр(ИтогДоляРаспределенияПустыхПроектов) Тогда//ИтогСуммаБезНДС Тогда  //абс_Стрельцов+ изменено: 12.10.2012
	//		
	//		//абс_Стрельцов+ добавлено: 17.09.2012
	//		//при переносе ПУ
	//		//замена Предупреждение
	//		Сообщить("Итог по колонке ""Доля распределения"" должен быть равен сумме по спецификации по пустым проектам!", СтатусСообщения.Важное);
	//		//
	//		//абс_Стрельцов-
	//		
	//		Отказ = Истина;
	//	КонецЕсли;
	// 	//\\АБС КОНЕЦ Задача №08759
	//КонецЕСли;
	//----------------------------------------------------
	//абс_Стрельцов-
	
	// Если ЗЗ отправляется на изменение спецификации, то сохраним структуру ЗЗ.
	Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации И
		НЕ абс_БизнесПроцессы.ПолучитьСтатусыИзмененияСпецификации().Найти(Ссылка.Статус) = Неопределено Тогда
		
		// Проверим можно ли изменить спецификацию
		Если НЕ ВозможноИзменитьСпецификацию() Тогда
			
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Закупочный заказ " + Ссылка + " невозможно отправить на изменение спецификации, т.к. есть счета в исполнении и поставки.", Отказ);
			
			Возврат;			
		КонецЕсли;
		
		СтруктураЗЗДоИзмененияСпецификации = Новый ХранилищеЗначения(ПолучитьСтруктуруЗЗ());
		
	КонецЕсли;
	
	// Если уходим со статуса изменения спецификации проверяем 
	Если 	Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации И 
		НЕ Ссылка.Статус = Статус Тогда
		
		СтруктураЗЗ = СтруктураЗЗДоИзмененияСпецификации.Получить();
		
		// Если пытаемся вернуть в статус согласован, то должны проверить изменение реквизитов
		Если НЕ абс_БизнесПроцессы.ПолучитьСтатусыИзмененияСпецификации().Найти(Статус) = Неопределено Тогда
			
			Если НЕ ПроверитьИзменениеЗЗ(СтруктураЗЗ) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Закупочный заказ " + Ссылка + " невозможно перевести в статус " + Статус + ".", Отказ);
			КонецЕсли;
			
		КонецЕсли;		 
	КонецЕсли;
	
	// АБС ВСТАВКА 1881  //Изменено 181213 Проектный учет Родин
	Если Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка И
		(Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП) Тогда
		//Изменено 181213 Проектный учет Родин
		Если ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование Тогда
			
			Если НЕ ЗначениеЗаполнено(МонтажОборудования) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбран монтраж оборудования", Отказ);
			КонецЕсли;
		Иначе
			
			МонтажОборудования = Неопределено;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТипКонтрагента) Тогда
			
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбран тип контрагента.", Отказ);
			
		КонецЕсли;
		
		// Проверим организацию, ЦФО, контрагента ППД
		Запрос = Новый Запрос;		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоДокументам.Ссылка,
		|	ПоДокументам.Подразделение КАК Подразделение,
		|	ПоДокументам.Организация КАК Организация,
		|	ПоДокументам.Контрагент КАК Контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
		|		ВЫБОР
		|			КОГДА ПоступлениеТоваровУслуг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|				ТОГДА ПоступлениеТоваровУслуг.Ссылка.Подразделение
		|			ИНАЧЕ ПоступлениеТоваровУслуг.Подразделение
		|		КОНЕЦ КАК Подразделение,
		|		ПоступлениеТоваровУслуг.Ссылка.Организация КАК Организация,
		|		ПоступлениеТоваровУслуг.Ссылка.Контрагент КАК Контрагент
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Ссылка.Проведен
		|		И ПоступлениеТоваровУслуг.Ссылка.ОтражатьВУправленческомУчете
		|		И ВЫБОР
		|				КОГДА ПоступлениеТоваровУслуг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|					ТОГДА ПоступлениеТоваровУслуг.Ссылка.абс_ЗакупочныйЗаказ = &ЗЗ
		|				ИНАЧЕ ПоступлениеТоваровУслуг.абс_ЗакупочныйЗаказТЧ = &ЗЗ
		|			КОНЕЦ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПоступлениеТоваровУслуг.Ссылка,
		|		ВЫБОР
		|			КОГДА ПоступлениеТоваровУслуг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|				ТОГДА ПоступлениеТоваровУслуг.Ссылка.Подразделение
		|			ИНАЧЕ ПоступлениеТоваровУслуг.Подразделение
		|		КОНЕЦ,
		|		ПоступлениеТоваровУслуг.Ссылка.Организация,
		|		ПоступлениеТоваровУслуг.Ссылка.Контрагент
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		АвансовыйОтчет.Ссылка,
		|		АвансовыйОтчет.Подразделение,
		|		АвансовыйОтчет.Организация,
		|		NULL
		|	ИЗ
		|		Документ.АвансовыйОтчет КАК АвансовыйОтчет
		|	ГДЕ
		|		АвансовыйОтчет.Проведен
		|		И АвансовыйОтчет.ОтражатьВУправленческомУчете
		|		И АвансовыйОтчет.абс_ЗакупочныйЗаказ = &ЗЗ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		АвансовыйОтчет.Ссылка,
		|		АвансовыйОтчет.Подразделение,
		|		АвансовыйОтчет.Организация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПоступлениеДопРасходов.Ссылка,
		|		ПоступлениеДопРасходов.Подразделение,
		|		ПоступлениеДопРасходов.Организация,
		|		ПоступлениеДопРасходов.Контрагент
		|	ИЗ
		|		Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
		|	ГДЕ
		|		ПоступлениеДопРасходов.Проведен
		|		И ПоступлениеДопРасходов.ОтражатьВУправленческомУчете
		|		И ПоступлениеДопРасходов.абс_ЗакупочныйЗаказ = &ЗЗ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПоступлениеДопРасходов.Ссылка,
		|		ПоступлениеДопРасходов.Подразделение,
		|		ПоступлениеДопРасходов.Организация,
		|		ПоступлениеДопРасходов.Контрагент) КАК ПоДокументам
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоДокументам.Ссылка,
		|	ПоДокументам.Подразделение,
		|	ПоДокументам.Организация,
		|	ПоДокументам.Контрагент";
		
		Запрос.УстановитьПараметр("ЗЗ", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = "Проверка ППД по ЗЗ:";
			
			Если НЕ Выборка.Организация = Организация Тогда
				
				Отказ = Истина;
				ТекстСообщения = ТекстСообщения + Символы.ПС + "ППД " + Выборка.Ссылка + " введен по другой организации.";
				
			КонецЕсли;
			
			Если НЕ Выборка.Подразделение = ЦФО Тогда
				
				Отказ = Истина;
				ТекстСообщения = ТекстСообщения + Символы.ПС + "ППД " + Выборка.Ссылка + " введен по другому ЦФО.";				
				
			КонецЕсли;
			
			
			//Абс_Тупиков начало 06032012
			Если Не Ссылка.АгентскаяСхема Тогда
				
				Если НЕ Выборка.Контрагент = Контрагент И НЕ ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					
					Отказ = Истина;
					ТекстСообщения = ТекстСообщения + Символы.ПС + "ППД " + Выборка.Ссылка + " введен по другому контрагенту.";
					
				КонецЕсли;
				
			КонецЕсли;
			//Абс_Тупиков конец
			
			Если Отказ Тогда
				
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Контроль используемых ЦФО, ЦФУ, СтатьиОборотовПоБюджетам
		Отказ = ttk_ОбщегоНазначения.КонтрольИспользуемых_ЦФО_ЦФУ_БюджетнаяСтатья(ЭтотОбъект, Отказ);		
		
		// АБС ВСТАВКА Фролов 20121026
		//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:20:05  Поставка
		Если глЗначениеПеременной("абс_КонтрольГодаВБюджетныхАналитиках") И Не КонсолидированныйЗЗПоОЗК Тогда
			//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
			
			ТекПериод = ГодПоставок;  			
			абс_Бюджетирование.ПроверитьСтатьюОборотовПоГодуИспользования(БюджетнаяСтатья, ТекПериод, Ссылка, Отказ);
			
			ПлюсОдинГод = СледГодОплат или СледГодПоставок; 
			абс_Бюджетирование.ПроверитьЦФОПоГодуИспользования(ЦФО, ТекПериод, Ссылка, Отказ, ПлюсОдинГод);
			
		КонецЕсли;			
		// АБС ВСТАВКА Фролов 20121026 КОНЕЦ
		
	КонецЕсли;
	// АБС ВСТАВКА 1881 КОНЕЦ
	
	// АБС ВСТАВКА 3910
	Если (Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации И (Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение)) ИЛИ 
		(Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка И (Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции или Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП)) Тогда    //Изменено 181213 Проектный учет Родин
		
		
		Если НЕ НефиксированнаяСумма 
			//Сторчевой А.Н. 28.11.2016 7759076 {
			//Включаем контроль лимитов если константа заполнена и дата документа больше
			//И НЕ УбыткиПрошлыхЛет
			И (НЕ УбыткиПрошлыхЛет ИЛИ (ЗначениеЗаполнено(ttk_УчетБДРУбытковПрошлыхЛет) и Дата>=ttk_УчетБДРУбытковПрошлыхЛет))
			// } Сторчевой А.Н. 28.11.2016 7759076
			Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ГрафикПоставокЗЗ.Период,
			|	ГрафикПоставокЗЗ.ВалютнаяСуммаБезНДС - ЕСТЬNULL(абс_ГрафикПоставкиЗакупочногоЗаказаОбороты.СуммаРасход, 0) КАК ПревышениеГрафика,
			|	ГрафикПоставокЗЗ.ВалютнаяСуммаБезНДС КАК СуммаПоГрафику,
			|	ЕСТЬNULL(абс_ГрафикПоставкиЗакупочногоЗаказаОбороты.СуммаРасход, 0) КАК СуммаПоставок
			|ИЗ
			|	(ВЫБРАТЬ
			|		НАЧАЛОПЕРИОДА(абс_ЗакупочныйЗаказГрафикПоставок.Период, МЕСЯЦ) КАК Период,
			|		абс_ЗакупочныйЗаказГрафикПоставок.ВалютнаяСуммаБезНДС КАК ВалютнаяСуммаБезНДС
			|	ИЗ
			|		Документ.абс_ЗакупочныйЗаказ.ГрафикПоставок КАК абс_ЗакупочныйЗаказГрафикПоставок
			|	ГДЕ
			|		абс_ЗакупочныйЗаказГрафикПоставок.Ссылка = &ЗакупочныйЗаказ) КАК ГрафикПоставокЗЗ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.абс_ГрафикПоставкиЗакупочногоЗаказа.Обороты(, , , ЗакупочныйЗаказ = &ЗакупочныйЗаказ) КАК абс_ГрафикПоставкиЗакупочногоЗаказаОбороты
			|		ПО ГрафикПоставокЗЗ.Период = абс_ГрафикПоставкиЗакупочногоЗаказаОбороты.ПериодПоставки");
			
			Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ПревышениеГрафика < 0 Тогда
					ttk_ОбщегоНазначения.СообщитьОбОшибке("В периоде " + Формат(Выборка.Период, "ДФ='MMMM yyyy'") + " обнаружено превышение сумм графика поставок.", Отказ);
				КонецЕсли;
				
			КонецЦикла;			
		КонецЕсли;
	КонецЕсли;
	// АБС ВСТАВКА 3910 КОНЕЦ
	
	//АБС ВСТАВКА №45569 НАЧАЛО «5 августа 2014 г.», Пополитов
	//В конференции с Плютто А. и Дмитрием Х., решили, что данный контроль тут не нужен
		////АБС ВСТАВКА 45268  18.07.2014 18:19:32  Стрельцов
		//Если Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка 
		//	И (Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции или Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП) Тогда
		//	
		//	КонтрольЛимитов(Отказ);
		//	
		//КонецЕсли;
		////\\АБС ВСТАВКА 45268 КОНЕЦ
 	//\\АБС ВСТАВКА №45569 КОНЕЦ
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникОтветствененого = абс_БизнесПроцессыПривелегированный.ПолучитьСотрудникаПользователя(Ответственный);
	
	Если СотрудникОтветствененого = Неопределено Тогда
		Дирекция 	= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Департамент = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Дирекция 	= абс_БизнесПроцессыПривелегированный.ПолучитьПодразделениеДирекции(СотрудникОтветствененого);
	Департамент = абс_БизнесПроцессыПривелегированный.ПолучитьПодразделениеДепартамента(СотрудникОтветствененого);
	
	Если 	Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован
		ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение Тогда
		ЗЗСогласован = Истина;
	ИначеЕсли НЕ Ссылка.ЗЗСогласован 
		ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда //Сторчевой А.Н. в статусе подготовка ЗЗ не согласован
		ЗЗСогласован = Ложь;
	КонецЕсли;
	
	Если (Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение И Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение) И
		(НЕ Ссылка.ОтветственныйСотрудникДирККР = ОтветственныйСотрудникДирККР) И ЗначениеЗаполнено(Ссылка.ОтветственныйСотрудникДирККР) Тогда
		
		мСменаОтветственногоДирККР = Истина; 
		
	КонецЕсли;
	
	ПерезаполнитьСчетаВПоставках(); //АБС Коломиец 4737	
	//***** Абсолют-Софт. Гетц. Проектный учет.
	Если мПроведениеПоМеханизмуПроектногоУчета Тогда 
		
		НеобходимаПроверкаЗаполнения = РегистрыСведений.абс_КонтрольЗаполненияПроектов.НеобходимаПроверкаЗаполненияПроекта(Новый Структура("ЦФО, ЦФУ, БюджетнаяСтатья", ЦФО, ЦФУ, БюджетнаяСтатья));
		
		Если НеобходимаПроверкаЗаполнения 
			И Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка
			И (Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции или Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП) Тогда   //Изменено 181213 Проектный учет Родин
			
			РегистрыСведений.абс_КонтрольАналитикПроектныйУчет.ВыполнитьПроверкуДокументаПроектныйУчет(ЭтотОбъект, Организация, Отказ);
			
		КонецЕсли;
	КонецЕсли;
	//***** Абсолют-Софт \\
	
	ОборудованиеЧерезОЗК = ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ИнвестиционноеСтроительство;	
	
	//АБС ИЗМЕНЕНИЕ 48294  01.10.2014 15:18:21  Шамов
	//Если КонтрольАналитикПройден()
	//	И (Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка
	//	ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение
	//	ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ
	//	ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отменен) Тогда 
	Если (
		//ххх Брель Виктор Андреевич 25.04.2018 16:10:53, заявка <<<
		//Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка ИЛИ
		//ИЛИ 
		//Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение
		//ИЛИ 
		// Брель Виктор Андреевич 25.04.2018 16:10:53 >>>
		Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ
		ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отменен) Тогда 
		//Если КонтрольАналитикПройден(Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка) Тогда  //Сторчевой А.Н. 14.12.2016 7762029 Добавил параметр в функцию
		//АБС ИЗМЕНЕНИЕ 48294 КОНЕЦ		
		Если Проведен Тогда			
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе                			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли; 
		//АБС ВСТАВКА 48294  01.10.2014 15:18:21  Шамов
		//Иначе
		//РежимЗаписи = РежимЗаписиДокумента.Проведение; 		
		//КонецЕсли;
		//АБС ВСТАВКА 48294 КОНЕЦ
	ИначеЕсли Статус <> Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка Тогда		
		РежимЗаписи = РежимЗаписиДокумента.Проведение; 		
	КонецЕсли; 	
	
	Если Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка И          //АБС Коломиец 20532
		(Статус <> Ссылка.Статус И Статус <> Перечисления.абсСтатусЗакупочногоЗаказа.Отказ) Тогда  
		Если НЕ абс_БизнесПроцессы.ПроверитьНаличиеФайловБюджетныйКомитет(Ссылка) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не приложен файл подтверждения от Бюджетного комитета.", Отказ);
		КонецЕсли;		
	КонецЕсли;
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусЗЗПоРегистру(Ссылка);
	
	Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК 
		ИЛИ (Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение И 
		СтатусПоРегистру = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК)
		ИЛИ (Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение И 
		СтатусПоРегистру = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК) Тогда
		СтатусУточненияЗЗ = СтатусПоРегистру;
	КонецЕсли;
	
	Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации  Тогда
		СтатусИзмененияСпецификации = СтатусПоРегистру;
	КонецЕсли;		
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	//Сторчевой А.Н. 14.11.2016 7757345 {
	Если (Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение И 
		СтатусПоРегистру = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО)
		ИЛИ (Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение И 
		СтатусПоРегистру = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента)		
		ИЛИ (Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение И 
		СтатусПоРегистру = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение) Тогда
		СтатусУточненияЗЗ = СтатусПоРегистру;
	КонецЕсли;
	Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда            
		Если НЕ ЗначениеЗаполнено(ИтогСуммаБезНДССогласованная) Тогда
			ИтогСуммаБезНДССогласованная = ИтогСуммаБезНДС; //Для хранения согласованнной суммы при проверке изменения ее на 5% 
		КонецЕсли;
	ИначеЕсли Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка Тогда
		ИтогСуммаБезНДССогласованная = 0;
	КонецЕсли;
	// } Сторчевой А.Н. 14.11.2016 7757345
		
КонецПроцедуры // ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		
		ЗаписатьИзмененияГрафиков();  //АБС 4100
		
		СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусЗЗПоРегистру(Ссылка);
		
		// {{ТТК Сладков А. Заявка № 31.10.2016 начало	
		ПредыдущийСтатусПоРегистру = СтатусПоРегистру;
		// {{ТТК Сладков А. Заявка № 31.10.2016 начало	

		
		Если НЕ Статус = СтатусПоРегистру Тогда
			ЗаписатьНовыйСтатус(Статус, ПричинаИзмененияСтатуса);		
		КонецЕсли;
		
		Если мСменаОтветственногоДирККР = Истина Тогда
			ЗаписатьНовыйСтатус(Статус, "Смена ответственного сотрудника ДирККР на " + Строка(ОтветственныйСотрудникДирККР) + ". " + ПричинаИзмененияСтатуса);		
		КонецЕсли;
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		СогласованиеБезБП = Истина; //Сторчевой А.Н. 11.11.2016 Отключем БП для ЗЗ 
		Если Не СогласованиеБезБП Тогда
			// Запустим БП если он еще не запущен
			Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции Тогда
				БПСогласование = НайтиБПСогласование();
				
				Если Не ЗначениеЗаполнено(БПСогласование) Тогда
					абс_БизнесПроцессы.ЗапуститьБПСогласованияЗЗ(Ссылка);	
				КонецЕсли;
				
			КонецЕсли;
			
			//Изменено 261213 Проектный учет Родин
			Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента или Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП Тогда   //АБС-Пр2 3861
				//Изменено 261213 Проектный учет Родин
				
				БПСогласование = НайтиБПСогласование();
				
				Если Не ЗначениеЗаполнено(БПСогласование) Тогда
					//Сторчевой Здачи ЗЗ абс_БизнесПроцессы.ЗапуститьБПСогласованияЗЗРуководительДепартамента(Ссылка);	
					абс_БизнесПроцессы.ЗапуститьБПСогласованияЗЗ(Ссылка);  //АБС Коломиец 19797
				КонецЕсли;
				
			КонецЕсли;
			
			Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО Тогда  //АБС Коломиец 19797
				БПСогласование = НайтиБПСогласование();
				
				Если Не ЗначениеЗаполнено(БПСогласование) Тогда
					абс_БизнесПроцессы.ЗапуститьБПСогласованияЗЗ(Ссылка);	
				КонецЕсли;
				
			КонецЕсли;		
			
			Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК ИЛИ
				(Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение И 
				СтатусПоРегистру = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК)Тогда
				
				БПСогласование = НайтиБПСогласование();
				
				БПОбъект = БПСогласование.ПолучитьОбъект();
				
				БПОбъект.СтатусУточненияЗЗ = СтатусПоРегистру;
				
				БПОбъект.Записать();
				
			КонецЕсли;
			
			Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации И
				НЕ абс_БизнесПроцессы.ПолучитьСтатусыИзмененияСпецификации().Найти(СтатусПоРегистру) = Неопределено Тогда
				
				БПСогласование = НайтиБПСогласование();
				
				Если НЕ ЗначениеЗаполнено(БПСогласование) Тогда
					
					БПсогласование = абс_БизнесПроцессы.ЗапуститьБПСогласованияЗЗИзменениеСпецификации(Ссылка, СтатусПоРегистру);	
					
				Иначе
					
					БПОбъект = БПСогласование.ПолучитьОбъект();
					
					БПОбъект.СтатусИзмененияСпецификации = СтатусПоРегистру;
					
					БПОбъект.Записать();
					
				КонецЕсли;
				
				// Если есть согласованные счета по ЗЗ, то отправить счета на Согласование ЗЗ.
				ПроверитьСчетаПоЗЗИзменнеиеСпецификации();
				
			КонецЕсли;		
		Иначе
			Если Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации И
				НЕ абс_БизнесПроцессы.ПолучитьСтатусыИзмененияСпецификации().Найти(СтатусПоРегистру) = Неопределено Тогда
				// Если есть согласованные счета по ЗЗ, то отправить счета на Согласование ЗЗ.
				ПроверитьСчетаПоЗЗИзменнеиеСпецификации();
			КонецЕсли;		
		КонецЕсли;
		
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		
		Если КонсолидированныйЗЗПоОЗК И 
			(Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершен ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт) Тогда
			
			Для Каждого ЗакупочныйЗаказОЗК Из ЗакупочныеЗаказыОЗК Цикл
				
				Если ЗакупочныйЗаказОЗК.ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК Тогда
					
					ЗЗ = ЗакупочныйЗаказОЗК.ЗакупочныйЗаказ.ПолучитьОбъект();
					ЗЗ.Статус = Статус;
					
					Попытка
						ЗЗ.Записать();
					Исключение
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при синхронизации статусов " + Строка(ЗЗ) + ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		Если Не СогласованиеБезБП Тогда
			// Попробуем закрыть задачу согласования
			ЗадачаСогласование = ПолучитьЗадачуПоЗЗСогласование();
			
			//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 18:38:32  Поставка
			абс_БизнесПроцессыПривелегированный.ВыполнитьЗадачу(ЗадачаСогласование);
			//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
		КонецЕсли;
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		
	Исключение
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи документа: " + ОписаниеОшибки() + ".", Отказ);
		
		Возврат;
	КонецПопытки;
	
	//АБС_Стрельцов+++ добавлено: 27.11.2012
	//--------------------------------------
	//Если мПроведениеПоМеханизмуПроектногоУчета И ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование Тогда
	//	Для каждого СтрокаТЧ Из Товары Цикл
	//		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.абс_Проект) Тогда
	//			Сообщить("В строке № "+СтрокаТЧ.НомерСтроки+ " не заполнен проект!", СтатусСообщения.Обычное);
	//		КонецЕсли;
	//		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
	//			Сообщить("В строке № "+СтрокаТЧ.НомерСтроки+ " не заполнен заказ покупателя!", СтатусСообщения.Обычное);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//-------------------------------------
	//АБС_Стрельцов---
	
КонецПроцедуры // ПриЗаписи(Отказ)


// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С БИЗНЕС-ПРОЦЕССАМИ

Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоЗЗ(Ссылка, "абсСогласованиеЗакупочногоЗаказа");	
	
КонецФункции

Функция ПолучитьЗадачуПоЗЗСогласование() Экспорт
	
	БП = НайтиБПСогласование();
	
	//АБС ВСТАВКА №6830 НАЧАЛО
	Если Не ЗначениеЗаполнено(БП) 
		и Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение 
		и врПрошлыйСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершен Тогда
		
		абс_БизнесПроцессы.ЗапуститьБПСогласованияЗЗ(Ссылка);	
		
	КонецЕсли;	
	//\\АБС ВСТАВКА №6830 КОНЕЦ
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпТочек = Новый Массив;
	
	ТекСтатус = Ссылка.Статус;
	
	Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОтказ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеИзменениеСпецификации);
		//АБС ВСТАВКА №36405 НАЧАЛО
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОжидаетДоговор);
		//\\АБС ВСТАВКА №36405 КОНЕЦ
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеУточненияОФК);
		
		//ВСТАВКА 181213 Проектный учет Родин	
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.СогласованиеРП);
		//ВСТАВКА 181213 Проектный учет Родин	
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДиректоромДирекции);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеУточненияОФК);
		
		//ВСТАВКА 181213 Проектный учет Родин	
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.СогласованиеРП);
		//ВСТАВКА 181213 Проектный учет Родин				
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДиректоромДирекции);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемДепартамента);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеУточненияОФК);
		
		//ВСТАВКА 181213 Проектный учет Родин	
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.СогласованиеРП);
		//ВСТАВКА 181213 Проектный учет Родин	
		
		//Проектный учет
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДиректоромДирекции);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемДепартамента);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФО);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеУточненияОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеПрвоеркаУточненияОФК);
		//Проектный учет
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДиректоромДирекции);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемДепартамента);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФО);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеУточненияОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеПрвоеркаУточненияОФК);
		
		//Проектный учет
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.СогласованиеРуководителемБлока);
		//Проектный учет
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУточнение);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеЦОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеУточненияОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеПрвоеркаУточненияОФК);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеУточненияОФК);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеПервымВицеПрезидентом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеПрезидентом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеИзменениеСпецификации);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОжидаетДоговор);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУ);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеПервымВицеПрезидентом);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОжидаетДоговор);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеПервымВицеПрезидентом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеПрезидентом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеИзменениеСпецификации);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОжидаетДоговор);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеПервымВицеПрезидентом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеПрезидентом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеПрвоеркаУточненияОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККРвКТТК); // АБС 19636
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеЗакупочныйЗаказСогласован);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеИзменениеСпецификации);
		
		Если мСменаОтветственногоДирККР = Истина Тогда
			
			СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаСотрудникомДирККР);
			
		КонецЕсли;
		
		// АБС 19636
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеДТРвКТТК Тогда	
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеИзменениеСпецификации);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОжидаетДоговор);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеЗакупочныйЗаказСогласован);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК Тогда	
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДТРвКТТК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеПодтверждениеСпецификации);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККРвКТТК);	
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККР);  ////
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершен Тогда	
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККРвКТТК);
		// АБС 19636 КОНЕЦ
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаСотрудникомДирККР);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеЗакупочныйЗаказСогласован);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаСотрудникомДирККР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККРвКТТК); // АБС 19636
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДТРвКТТК);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОжидаетДоговор);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеЗакупочныйЗаказСогласован);
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККРвКТТК); // АБС 19636
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаСотрудникомДирККР);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеЦОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДиректоромДирекции);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемДепартамента);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФО);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеУточненияОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеПрвоеркаУточненияОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДТРвКТТК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеПодтверждениеСпецификации);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККРвКТТК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаСотрудникомДирККР);		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДиректоромДирекции);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемДепартамента);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФО);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУ);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УточненоДляОФК Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУточнение);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДиректоромДирекции);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемДепартамента);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФО);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОжидаетДоговор);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеПервымВицеПрезидентом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеПрезидентом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДТРвКТТК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеПодтверждениеСпецификации);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККРвКТТК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаДирККР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОбработкаСотрудникомДирККР);
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Отменен Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеОтказ);
		
	КонецЕсли;
	
	Возврат абс_БизнесПроцессы.НайтиЗадачуЗЗ(БП, СпТочек ,, Ложь);
	
КонецФункции

//Сторчевой А.Н. 31.08.2016 7745861 { 
//Добавлена новая процедура "ЗаполнитьСписокДоступныхСтатусов" и переименована старая "ЗаполнитьСписокДоступныхСтатусов_УдалитьПослеЗавершенияПроекта"
Процедура ЗаполнитьСписокДоступныхСтатусов(Список) Экспорт	
	
	Список.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Список.Добавить(Статус);
		Возврат;
	КонецЕсли;                    
	
	Список.Добавить(Ссылка.Статус);
	
	
	//Изменено 261213 Проектный учет Родин
	ИспользоватьПроектныйУчет =  глЗначениеПеременной("абс_СогласованиеРП");
	
	//Вставка 100114 Проектный учет Родин
	НеТребуетсяСогласованиеРП =  Ложь;
	//Вставка 100114 Проектный учет Родин
	
	СписокРуководителей = Новый Массив;
	Для каждого Стр Из РаспределениеПоПроектам Цикл
		Если ЗначениеЗаполнено(Стр.Проект.абс_РуководительПроекта) Тогда
			
			ПользовательРуководитель = Справочники.Пользователи.НайтиПоРеквизиту("абс_Сотрудник",Стр.Проект.абс_РуководительПроекта);
			
			Если ПользовательРуководитель <> Справочники.Пользователи.ПустаяСсылка() и СписокРуководителей.Найти(ПользовательРуководитель) = Неопределено Тогда
				СписокРуководителей.Добавить(ПользовательРуководитель);	
			КонецЕсли;
			
			//Вставка 100114 Проектный учет Родин
			Если Стр.Проект.абс_НеТребуетсяСогласованиеРПвЗЗ Тогда
				НеТребуетсяСогласованиеРП =  Истина;
			КонецЕсли;	
			//Вставка 100114 Проектный учет Родин
			
		КонецЕсли;
	КонецЦикла;
	//Изменено 261213 Проектный учет Родин
	
	
	
	Если КонсолидированныйЗЗПоОЗК Тогда
		
		//Изменено 261213 Проектный учет Родин
		Если Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка  или Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП Тогда
			
			Если Ссылка.Статус <> Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП и ИспользоватьПроектныйУчет и Не НефиксированнаяСумма и  СписокРуководителей.Найти(мТекущийПользователь) = Неопределено Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП);
			ИначеЕсли (ИспользоватьПроектныйУчет и НефиксированнаяСумма) ИЛИ  (СписокРуководителей.Найти(мТекущийПользователь) <> Неопределено и ИспользоватьПроектныйУчет) ИЛИ НЕ ИспользоватьПроектныйУчет Тогда  
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации);
			КонецЕсли;	
			//Изменено 261213 Проектный учет Родин
			
		ИначеЕсли Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершен);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации);
			
		ИначеЕсли Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации Тогда
			
			ТребуетсяПодтвержениеСпецфикации = Ложь;
			Для Каждого ЗЗ_ОЗК Из ЗакупочныеЗаказыОЗК Цикл
				Если ЗЗ_ОЗК.ЗакупочныйЗаказ.Статус <> Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК Тогда
					ТребуетсяПодтвержениеСпецфикации = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ТребуетсяПодтвержениеСпецфикации Тогда 
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ВозможноУточнениеИнициатором 	= Ложь;
	РазрешеноСогласование 			= Ложь;
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	СогласованиеБезБП = Истина; //Сторчевой А.Н. 11.11.2016 Отключем БП для ЗЗ 
	Если Не СогласованиеБезБП Тогда	
		// Если есть задачи текущему пользователю, то ему разрешено изменить статус
		//АБС ВСТАВКА №44882 НАЧАЛО «26 июня 2014 г.», Пополитов    	  	
		//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		//|	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка
		//|ИЗ
		//|	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(
		//|			&ТекПользователь,
		//|			ОбъектЗадачи = &ЗЗСсылка
		//|				И Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю");
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	абсЗадачаДоговора.Ссылка
		                      |ИЗ
		                      |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
		                      |ГДЕ
		                      |	абсЗадачаДоговора.ОбъектЗадачи = &ЗЗСсылка
		                      |	И НЕ абсЗадачаДоговора.Выполнена
		                      |	И (абсЗадачаДоговора.Роль В (&СписокРолей)
		                      |			ИЛИ абсЗадачаДоговора.Исполнитель = &ТекПользователь)");
							  
		Запрос.УстановитьПараметр("СписокРолей"		, мРолиПользователя);
		//\\АБС ВСТАВКА №44882 КОНЕЦ
		Запрос.УстановитьПараметр("ТекПользователь"	, мТекущийПользователь);
		Запрос.УстановитьПараметр("ЗЗСсылка"		, Ссылка);

		ВыборкаЗадач = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаЗадач.Следующий() Тогда
			
			РазрешеноСогласование = Истина;
			
		КонецЕсли;	
		РазрешеноСогласование = Истина; //Сторчевой А.Н. 09.11.2016 Решили Отключить БП
	Иначе
		РазрешеноСогласование = Истина;
	КонецЕсли;
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	
	
	ТекСтатус = Ссылка.Статус;
	
	//Если Ответственный = мТекущийПользователь Тогда
	//	СтатусыУточненияИнициатором = абс_БизнесПроцессы.ПолучитьСтатусыУточненияИнициатором();
	//	
	//	Если НЕ СтатусыУточненияИнициатором.Найти(Ссылка.Статус) = Неопределено Тогда
	//		
	//		ВозможноУточнениеИнициатором = Истина;
	//		
	//		Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК);
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
	
	// Какое может быть согласование если нету задачи пользователю.
	Если НЕ РазрешеноСогласование И 
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка     И
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ И  // ТТК Лапин 05.05.2016
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован     И 
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение     И
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершение     И   //АБС-Пр2 11957
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершен       И
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор И
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Проектный учет
	СогласованиеРуководителемБлокаВЗЗ = ПараметрыСеанса.абс_НастройкиСистемы.СогласованиеРуководителемБлокаВЗЗ;
	Если СогласованиеРуководителемБлокаВЗЗ Тогда 	
		ПревышаетЛимитПоБлоку = РегистрыСведений.абс_ЛимитыПоБлокам.ПревышенЛимитПоЦФО(ИтогСуммаСНДС,ЦФО);
		ПользовательРуководительБлока = РегистрыСведений.абс_РуководителиБлока.ПользовательЯвляетсяРуководителемБлока(ЦФО,мТекущийПользователь);
	Иначе
		ПревышаетЛимитПоБлоку = Ложь;
		ПользовательРуководительБлока = Ложь;
	КонецЕсли;
	//Проектный учет
	
	
	//Изменено 261213 Проектный учет Родин
	
	// {{ТТК Лапин А. Согласование Целевого использования средств статей бюджета 05.05.2016 начало
	//Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка или ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП Тогда
	//Сторчевой А.Н. 18.04.2017 77102115 { Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка или ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП или ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ Тогда
	Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка Тогда
		//Закомментировано//Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка Тогда
		//Запрос = Новый Запрос;
		//Запрос.Текст =
		//"ВЫБРАТЬ
		//|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.РольСогласователя,
		//|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.БюджетнаяСтатья
		//|ИЗ
		//|	РегистрСведений.ttk_СтатьиСОсобымКонтролемЦелевогоИспользования КАК ttk_СтатьиСОсобымКонтролемЦелевогоИспользования
		//|ГДЕ
		//|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.БюджетнаяСтатья = &БюджетнаяСтатья";
		//
		//Запрос.УстановитьПараметр("БюджетнаяСтатья", БюджетнаяСтатья.Ссылка);
		//
		//ТЗРезультат = Запрос.Выполнить().Выгрузить();
		//
		//// Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
		//// {{ТТК Лапин А. Согласование Целевого использования средств статей бюджета 19.05.2016 начало
		//		
		////Если ТЗРезультат.количество() > 0 И (НЕ мРолиПользователя.Найти(ТЗРезультат[0].РольСогласователя) = Неопределено) Тогда //РолиИсполнителей.СогласованиеЦИ
		//
		//Если ТЗРезультат.Количество() > 0 Тогда
		//	
		//	Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка Тогда
		//		
		//		// если статья в списке контроллируемых статей, то только в Согласование ЦИ или в Отказ
		//		// }}ТТК Лапин А. Заявка № 19.05.2016 окончание
		//		
		//		Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ);
		//		Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
		//		
		//		Возврат;
		//		
		//	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ Тогда	
		//		
		//		// проверим, есть ли роль СогласованиеЦИ у текущего ответственного юзера
		//		Если (НЕ мРолиПользователя.Найти(ТЗРезультат[0].РольСогласователя) = Неопределено) Тогда //РолиИсполнителей.СогласованиеЦИ
		//			// из Согласование ЦИ может вывести только имеющий Роль... 
		//			// направляет далее, в зависимости от прочих параметров ЗЗ
		//			// также добавляю возможность отказа для всех вариантов дальнейшего развития...
		//			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
		//			
		//			Если ТекСтатус <> Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП и ИспользоватьПроектныйУчет и Не НефиксированнаяСумма и  СписокРуководителей.Найти(мТекущийПользователь) = Неопределено  и Не НеТребуетсяСогласованиеРП Тогда
		//				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП);
		//				
		//			ИначеЕсли (ИспользоватьПроектныйУчет и НефиксированнаяСумма) ИЛИ (СписокРуководителей.Найти(мТекущийПользователь) <> Неопределено и ИспользоватьПроектныйУчет) ИЛИ (НеТребуетсяСогласованиеРП и ИспользоватьПроектныйУчет) или Не ИспользоватьПроектныйУчет Тогда  
		//				
		//				Если глЗначениеПеременной("абс_ОтклАлгоритмСогласованияЗЗ2013") = Истина  Тогда
		//					// {{АРТ саТерра <Токарев Н.А.> <Дата 16.07.2015> начало
		//					// перевод КТТК на работу по согл. закуп. заказов на единую схему с филиалами и в части стутусов директор дирекции и рук. департамента
		//					// {{
		//					//ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация    //АБС Коломиец 19797  				
		//					// }}
		//					// }}АРТ саТерра <Токарев Н.А.> <16.07.2015> окончание
		//					
		//					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
		//					Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
		//						Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
		//						И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
		//						Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
		//						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);				
		//					ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
		//						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Утве);
		//					КонецЕсли;		
		//				Иначе  				
		//					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.ДиректорДирекции);   				
		//					Если ОтветственныеДирекции = Неопределено ИЛИ ОтветственныеДирекции.Количество() = 0 Тогда
		//						//Проверка по Департаменту
		//						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента);  					
		//						Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
		//							Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда 							
		//								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
		//							КонецЕсли;    						
		//						Иначе   
		//							Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда   							
		//								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);  							
		//								ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
		//							КонецЕсли;   						
		//						КонецЕсли;
		//					Иначе   					
		//						//Проверка по Департаменту
		//						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента); 					
		//						Если НЕ (ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0) Тогда
		//							
		//							ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
		//							Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
		//								Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
		//								И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
		//								Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
		//								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
		//							ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
		//								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
		//							КонецЕсли;						
		//						ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
		//							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
		//						КонецЕсли;		
		//					КонецЕсли;
		//				КонецЕсли;
		//				
		//				//Старая схема согласования			
		//			ИначеЕсли Не ИспользоватьПроектныйУчет Тогда 	
		//				
		//				Если глЗначениеПеременной("абс_ОтклАлгоритмСогласованияЗЗ2013") = Истина ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда   //АБС Коломиец 19797  				
		//					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
		//					Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
		//						Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
		//						И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
		//						Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
		//						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);				
		//					ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
		//						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
		//					КонецЕсли;		
		//				Иначе  				
		//					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.ДиректорДирекции);   				
		//					Если ОтветственныеДирекции = Неопределено ИЛИ ОтветственныеДирекции.Количество() = 0 Тогда
		//						//Проверка по Департаменту
		//						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента);  					
		//						Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
		//							Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда 							
		//								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
		//							КонецЕсли;    						
		//						Иначе   
		//							Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда   							
		//								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);  							
		//								ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
		//							КонецЕсли;   						
		//						КонецЕсли;
		//					Иначе  					
		//						//Проверка по Департаменту
		//						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента); 					
		//						Если НЕ (ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0) Тогда
		//							
		//							ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
		//							Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
		//								Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
		//								И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
		//								Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
		//								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
		//							ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
		//								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
		//							КонецЕсли;						
		//						ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
		//							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
		//						КонецЕсли;						
		//					КонецЕсли;
		//				КонецЕсли;
		//				
		//			КонецЕсли;	
		//			
		//			
		//		КонецЕсли; //  из Согласование ЦИ  Лапин 19.05.2016
		//		
		//	КонецЕсли;
		//	
		//Иначе // Лапин 19.05.2016 предыдущий вариант не учитывающий и не требующий согласование Целевого использования
		// Закомментировано } Сторчевой А.Н. 18.04.2017 77102115	
			Если ТекСтатус <> Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП и ИспользоватьПроектныйУчет и Не НефиксированнаяСумма и  СписокРуководителей.Найти(мТекущийПользователь) = Неопределено  и Не НеТребуетсяСогласованиеРП Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП);
				
			ИначеЕсли (ИспользоватьПроектныйУчет и НефиксированнаяСумма) ИЛИ (СписокРуководителей.Найти(мТекущийПользователь) <> Неопределено и ИспользоватьПроектныйУчет) ИЛИ (НеТребуетсяСогласованиеРП и ИспользоватьПроектныйУчет) или Не ИспользоватьПроектныйУчет Тогда  
				
				Если глЗначениеПеременной("абс_ОтклАлгоритмСогласованияЗЗ2013") = Истина  Тогда
					// {{АРТ саТерра <Токарев Н.А.> <Дата 16.07.2015> начало
					// перевод КТТК на работу по согл. закуп. заказов на единую схему с филиалами и в части стутусов директор дирекции и рук. департамента
					// {{
					//ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация    //АБС Коломиец 19797  				
					// }}
					// }}АРТ саТерра <Токарев Н.А.> <16.07.2015> окончание
					
					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
					Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
						Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
						И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
						Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);				
					ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
					КонецЕсли;		
				Иначе  				
					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.ДиректорДирекции);   				
					Если ОтветственныеДирекции = Неопределено ИЛИ ОтветственныеДирекции.Количество() = 0 Тогда
						//Проверка по Департаменту
						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента);  					
						Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
							Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда 							
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
							КонецЕсли;    						
						Иначе   
							Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда   							
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);  							
								ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
							КонецЕсли;   						
						КонецЕсли;
					Иначе   					
						//Проверка по Департаменту
						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента); 					
						Если НЕ (ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0) Тогда
							
							ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
							Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
								Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
								И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
								Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
							ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
							КонецЕсли;						
						ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
						КонецЕсли;		
					КонецЕсли;
				КонецЕсли;
				
				//Старая схема согласования			
			ИначеЕсли Не ИспользоватьПроектныйУчет Тогда 	
				
				Если глЗначениеПеременной("абс_ОтклАлгоритмСогласованияЗЗ2013") = Истина ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда   //АБС Коломиец 19797  				
					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
					Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
						Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
						И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
						Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);				
					ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
					КонецЕсли;		
				Иначе  				
					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.ДиректорДирекции);   				
					Если ОтветственныеДирекции = Неопределено ИЛИ ОтветственныеДирекции.Количество() = 0 Тогда
						//Проверка по Департаменту
						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента);  					
						Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
							Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда 							
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
							КонецЕсли;    						
						Иначе   
							Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда   							
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);  							
								ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
							КонецЕсли;   						
						КонецЕсли;
					Иначе  					
						//Проверка по Департаменту
						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента); 					
						Если НЕ (ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0) Тогда
							
							ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
							Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
								Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
								И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
								Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
							ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
							КонецЕсли;						
						ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
						КонецЕсли;						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
			
		// {{ТТК Лапин А. Заявка № 05.05.2016 окончание						 	
		//Сторчевой А.Н. 18.04.2017 77102115 {КонецЕсли;	
		// }}ТТК Лапин А. Заявка № 05.05.2016 окончание						
	//Сторчевой А.Н. 18.04.2017 77102115 {                                   
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.РольСогласователя,
		|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.БюджетнаяСтатья
		|ИЗ
		|	РегистрСведений.ttk_СтатьиСОсобымКонтролемЦелевогоИспользования КАК ttk_СтатьиСОсобымКонтролемЦелевогоИспользования
		|ГДЕ
		|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.БюджетнаяСтатья В (&БюджетнаяСтатья)";
		
		//Сторчевой А.Н. НФС 2018 {
		//Запрос.УстановитьПараметр("БюджетнаяСтатья", БюджетнаяСтатья.Ссылка);
		КолонкиАналитик = "СтатьяОборотов";
		ТоварыТЗ = Товары.Выгрузить(,КолонкиАналитик);
		ТоварыТЗ.Свернуть(КолонкиАналитик);
		МассивСтатей = ТоварыТЗ.ВыгрузитьКолонку(КолонкиАналитик);
		Запрос.УстановитьПараметр("БюджетнаяСтатья", МассивСтатей);
		//} Сторчевой А.Н. НФС 2018
		
		ВыборкаЦИ = Запрос.Выполнить().Выбрать();
		Если ВыборкаЦИ.Следующий() Тогда
			Если НЕ мРолиПользователя.Найти(ВыборкаЦИ.РольСогласователя) = Неопределено
				или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК);
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			КонецЕсли;
		КонецЕсли;
	// } Сторчевой А.Н. 18.04.2017 77102115		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента Тогда
		
		//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:22:40  Поставка
		//Если Константы.абс_ОтклАлгоритмСогласованияЗЗ2013.Получить() = Истина ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда   //АБС Коломиец 19797
		
		// {{ТТК Лапин А. Заявка № 7722845  01.03.2016 начало
		//Если глЗначениеПеременной("абс_ОтклАлгоритмСогласованияЗЗ2013") = Истина ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда //АБС Коломиец 19797  // Alex Lapin 01.02.2016 коммент
		Если глЗначениеПеременной("абс_ОтклАлгоритмСогласованияЗЗ2013") = Истина Тогда   //АБС Коломиец 19797
		// }}ТТК Лапин А. Заявка № 7722845  01.03.2016 окончание
		
		//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
			
			Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено Тогда
				//Сторчевой А.Н. Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
				
				ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
				
				// Если это ответственный департамента, имеет роль руководителя департамента
				// если если это суперпользователь
				Если 	((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) = Неопределено) И
					(НЕ ОтветственныеДепартамента.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))  
					ИЛИ
					(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
					
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
					
					ОтветственныеЦФО = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО);
					
					Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) И
						(НЕ ОтветственныеЦФО.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))
						ИЛИ
						(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
						
						//Проектный учет
						Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ Тогда
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
						Иначе	
							//Сторчевой А.Н. Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
						КонецЕсли;
						//Проектный учет
						
					КонецЕсли;
					
				КонецЕсли;
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			КонецЕсли;	
		Иначе
			
			//Проверка по Департаменту
			ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента);
			
			Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
				//в ЦФО
				Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено Тогда
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
					//КонецЕсли;
					Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) = Неопределено Тогда
						
						ОтветственныеЦФО = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО);
						
						Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) И
							(НЕ ОтветственныеЦФО.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))
							ИЛИ 
							(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
							
						//Проектный учет
						Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ Тогда
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
						Иначе	
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
						КонецЕсли;
						//Проектный учет
							
						КонецЕсли;
						
					КонецЕсли;
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);					
				КонецЕсли;
			Иначе   //в Департамент
				//Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено Тогда //Сторчевой А.Н. не нужно проверять эту роль
					//Сторчевой А.Н. Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
					
					ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
					
					Если 	((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) = Неопределено) И
						(НЕ ОтветственныеДепартамента.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))  
						ИЛИ
						(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
						
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
						                                                                                                   
						ОтветственныеЦФО = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО);
						
						Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) И
							(НЕ ОтветственныеЦФО.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))
							ИЛИ
							(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
							
						//Проектный учет
						Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ Тогда
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
						//Иначе	
							//Сторчевой А.Н. Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
						КонецЕсли;
						//Проектный учет
							
						КонецЕсли;
						
					КонецЕсли;
					
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
					
				//КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//Проектный учет
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока Тогда
		
		Если ПользовательРуководительБлока Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);					
		КонецЕсли;
		//Проектный учет
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента Тогда
		
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
			
			ОтветственныеЦФО = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО);
			
			Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) И
				(НЕ ОтветственныеЦФО.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))
				ИЛИ 
				(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
				
				//Проектный учет
				Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ Тогда
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
				Иначе
					//Сторчевой А.Н. Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
				КонецЕсли;
				//Проектный учет
			КонецЕсли;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО Тогда
		
		//Сторчевой А.Н. 20.02.2017 7772477 {							
		Если Ответственный = мТекущийПользователь 
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда							
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
		КонецЕсли;
		// } Сторчевой А.Н. 20.02.2017 7772477

		МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО,, Организация));
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		//СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		
		//АБС ВСТАВКА   07.04.2015 18:00:59  Шамов
		Если ПараметрыСеанса.абс_НастройкиСистемы.ЗапретСогласованияРуководителямиЦФОФилиалов = Истина Тогда
			Если ЦФО = ПараметрыСеанса.абс_НастройкиСистемы.ЦФОДляЗапрета
				И БюджетнаяСтатья = ПараметрыСеанса.абс_НастройкиСистемы.БюджетнаяСтатьяДляЗапрета Тогда
				ОрганизацияКТТК = ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК;
				МассивИсполнителейКТТК = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
				абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО,, ОрганизацияКТТК));
				Если МассивИсполнителейКТТК.Найти(мТекущийПользователь) = Неопределено Тогда
					Возврат;	
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
		//АБС ВСТАВКА  КОНЕЦ
		Если МассивИсполнителей.Найти(мТекущийПользователь) <> Неопределено Тогда
			//Сторчевой А.Н. 20.02.2017 7772477 Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			//Сторчевой А.Н. 14.11.2016 7757345 {
			//Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено И Не СогласованиеБезБП) ИЛИ (СогласованиеБезБП И МассивИсполнителей.Найти(мТекущийПользователь) <> Неопределено) Тогда
			Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) Тогда
				// } Сторчевой А.Н. 14.11.2016 7757345	
				//Проектный учет
				Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ Тогда
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
				Иначе
					Если СокрЛП(Организация.Наименование) = "КТТК" Тогда
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК);
					Иначе
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
					КонецЕсли;
				КонецЕсли;
				//Проектный учет                               
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			КонецЕсли;
			// АБС Изменение Родин Отключение бизнес-процессов 110314			
		КонецЕсли;

			
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК Тогда
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		//СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП"); 		
		ПодразделениеОФК = глЗначениеПеременной("абс_ПодразделениеОФК");
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
									абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,Организация));	
		//Сторчевой А.Н. 14.11.2016 7757345 {							
		Если Ответственный = мТекущийПользователь Тогда							
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
		КонецЕсли;
		// } Сторчевой А.Н. 14.11.2016 7757345
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено //И ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено)
			ИЛИ НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
			//Сторчевой А.Н. 18.04.2017 77102115 {                                   
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.РольСогласователя,
			|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.БюджетнаяСтатья
			|ИЗ
			|	РегистрСведений.ttk_СтатьиСОсобымКонтролемЦелевогоИспользования КАК ttk_СтатьиСОсобымКонтролемЦелевогоИспользования
			|ГДЕ
			|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.БюджетнаяСтатья В (&БюджетнаяСтатья)";
			
			//Сторчевой А.Н. НФС 2018 {
			//Запрос.УстановитьПараметр("БюджетнаяСтатья", БюджетнаяСтатья.Ссылка);
			КолонкиАналитик = "СтатьяОборотов";
			ТоварыТЗ = Товары.Выгрузить(,КолонкиАналитик);
			ТоварыТЗ.Свернуть(КолонкиАналитик);
			МассивСтатей = ТоварыТЗ.ВыгрузитьКолонку(КолонкиАналитик);
			Запрос.УстановитьПараметр("БюджетнаяСтатья", МассивСтатей);
			//} Сторчевой А.Н. НФС 2018
			ТЗРезультат = Запрос.Выполнить().Выгрузить();
			Если ТЗРезультат.Количество() > 0 Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ);
			Иначе	
				// } Сторчевой А.Н. 18.04.2017 77102115
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК);
				//Сторчевой А.Н. 77102115 {
			КонецЕсли;
			// } Сторчевой А.Н. 77102115
		КонецЕсли;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);              
			
		//КонецЕсли;
		// } Сторчевой А.Н. 7753723
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК Тогда                   
		//Сторчевой А.Н.
		//СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		
		//ПодразделениеДФМ = Константы.абс_ПодразделениеДФМ.Получить();
		//ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		//абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(,,Организация));
		ОрганизацияКТТК = ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК;
		ПодразделениеОФК = глЗначениеПеременной("абс_ПодразделениеОФК");
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,ОрганизацияКТТК));
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено И ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено)
			ИЛИ НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			Если ЗЗСогласован Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			Иначе
				ДоговорыВИсполнении = Истина;
				
				Для Каждого СтрокаДоговора Из Договоры Цикл
					
					Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
						Продолжить;
					КонецЕсли;
					
					//абс Родин Лимитный контроль
					ДоговорыВИсполнении = ДоговорыВИсполнении 
					И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение  ИЛИ 
					СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
					СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
					СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
					//абс Родин Лимитный контроль
					
				КонецЦикла;
				
				Если (ОборудованиеЧерезОЗК ИЛИ ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ИнвестиционноеСтроительство)
					И Договоры.Количество() = 0 Тогда
					ДоговорыВИсполнении = Ложь;
				КонецЕсли;
				
				ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
				Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
				Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
				
				Если ИтогСуммаСНДС < ПределСуммыУтверждения И ДоговорыВИсполнении Тогда
					
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
					
				ИначеЕсли ИтогСуммаСНДС < ПределСуммыУтверждения И НЕ ДоговорыВИсполнении Тогда
					
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
					
				Иначе
					
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам);
					
				КонецЕсли;			
				
				//ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
				//Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
				//Справочники.РолиИсполнителей.РуководительЦФУ);   
				//Если ИтогСуммаСНДС < ПределСуммыУтверждения И ДоговорыВИсполнении Тогда 				
				//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован); 				
				//ИначеЕсли ИтогСуммаСНДС < ПределСуммыУтверждения И НЕ ДоговорыВИсполнении Тогда 
				//	Если не ОборудованиеЧерезОЗК Тогда
				//		Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
				//	КонецЕсли;
				//Иначе       			
				//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ);  				
				//КонецЕсли;
				//Если ДоговорыВИсполнении Тогда 				
				//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован); 				
				//ИначеЕсли НЕ ДоговорыВИсполнении Тогда 
				//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
				//КонецЕсли;
				//АБС ВСТАВКА №20697 НАЧАЛО
				//Если ОборудованиеЧерезОЗК Тогда			
				//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
				//КонецЕсли;
				//\\АБС ВСТАВКА №20697 КОНЕЦ
				
				// 20110822 Активирована, добавленная ранее возможность отправки на уточнение на ОФК.
				
				//Проектный учет
				//Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ  Тогда
				//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
				//Иначе	
				//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
				//КонецЕсли;
				//Проектный учет
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			КонецЕсли;
		//Сторчевой А.Н. 15.12.2016 7762029 {
		ИначеЕсли Ответственный = мТекущийПользователь Тогда							
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
		// } Сторчевой А.Н. 15.12.2016 7762029	
		КонецЕсли;//Сторчевой А.Н.
	//\\АБС ВСТАВКА №47738 КОНЕЦ

	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ Тогда
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		
		ПодразделениеДФМ = Константы.абс_ПодразделениеДФМ.Получить();
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеДФМ,,Организация));	
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДФМ) = Неопределено И Не СогласованиеБезБП) ИЛИ (СогласованиеБезБП И ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено) Тогда
			
			ДоговорыВИсполнении = Истина;
			
			Для Каждого СтрокаДоговора Из Договоры Цикл
				
				Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
					Продолжить;
				КонецЕсли;
				
				//абс Родин Лимитный контроль
				ДоговорыВИсполнении = ДоговорыВИсполнении 
				И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
				//абс Родин Лимитный контроль
				
			КонецЦикла;
			
			Если (ОборудованиеЧерезОЗК ИЛИ ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ИнвестиционноеСтроительство)
				И Договоры.Количество() = 0 Тогда
				ДоговорыВИсполнении = Ложь;
			КонецЕсли;
			
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
			Справочники.РолиИсполнителей.РуководительЦФУ);   
			Если ИтогСуммаСНДС < ПределСуммыУтверждения И ДоговорыВИсполнении Тогда 				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован); 				
			ИначеЕсли ИтогСуммаСНДС < ПределСуммыУтверждения И НЕ ДоговорыВИсполнении Тогда 
				Если не ОборудованиеЧерезОЗК Тогда
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
				КонецЕсли;
			Иначе       			
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ);  				
			КонецЕсли;
			
			//АБС ВСТАВКА №20697 НАЧАЛО
			Если ОборудованиеЧерезОЗК Тогда			
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
			КонецЕсли;
			//\\АБС ВСТАВКА №20697 КОНЕЦ
			
			// 20110822 Активирована, добавленная ранее возможность отправки на уточнение на ОФК.
			
			//Проектный учет
			Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ  Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
			Иначе	
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
			КонецЕсли;
			//Проектный учет
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			
		КонецЕсли;
		// АБС Изменение Родин Отключение бизнес-процессов 110314
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ Тогда
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
			МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФУ,, Организация));	
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФУ) = Неопределено И Не СогласованиеБезБП) ИЛИ (СогласованиеБезБП И МассивИсполнителей.Найти(мТекущийПользователь) <> Неопределено) Тогда
			
			ДоговорыВИсполнении = Истина;
			
			Для Каждого СтрокаДоговора Из Договоры Цикл
				
				Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
					Продолжить;
				КонецЕсли;
				
				//абс Родин Лимитный контроль
				ДоговорыВИсполнении = ДоговорыВИсполнении 
				И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
				//абс Родин Лимитный контроль
				
			КонецЦикла;
			
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
			Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
			
			Если ИтогСуммаСНДС < ПределСуммыУтверждения И ДоговорыВИсполнении Тогда
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
				
			ИначеЕсли ИтогСуммаСНДС < ПределСуммыУтверждения И НЕ ДоговорыВИсполнении Тогда
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
				
			Иначе
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам);
				
			КонецЕсли;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
		КонецЕсли;
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		                                                                                                                 
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам Тогда
		
		//Сторчевой А.Н. 14.11.2016 7757345 {							
		Если Ответственный = мТекущийПользователь Тогда							
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
		КонецЕсли;
		// } Сторчевой А.Н. 14.11.2016 7757345
		ОрганизацияКТТК = ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК;
		ПодразделениеОФК = глЗначениеПеременной("абс_ПодразделениеОФК");
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
									абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(,,ОрганизацияКТТК));

		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПервыйВицеПрезидент) = Неопределено Тогда
			
			ДоговорыВИсполнении = Истина;
			
			Для Каждого СтрокаДоговора Из Договоры Цикл
				
				Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
					Продолжить;
				КонецЕсли;
				
				//абс Родин Лимитный контроль
				ДоговорыВИсполнении = ДоговорыВИсполнении 
				И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
				//абс Родин Лимитный контроль
				
			КонецЦикла;
			
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
			Справочники.РолиИсполнителей.Президент);
			
			Если ИтогСуммаСНДС < ПределСуммыУтверждения И ДоговорыВИсполнении Тогда  				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован); 				
			ИначеЕсли ИтогСуммаСНДС < ПределСуммыУтверждения И НЕ ДоговорыВИсполнении Тогда 				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);  				
			Иначе                                                                       				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом);				
			КонецЕсли;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.Президент) = Неопределено Тогда
			
			ДоговорыВИсполнении = Истина;
			
			Для Каждого СтрокаДоговора Из Договоры Цикл
				
				Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
					Продолжить;
				КонецЕсли;
				
				//абс Родин Лимитный контроль
				ДоговорыВИсполнении = ДоговорыВИсполнении 
				И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
				//абс Родин Лимитный контроль
				
			КонецЦикла;
			
			Если ДоговорыВИсполнении Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
			Иначе
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
			КонецЕсли;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			
		КонецЕсли;                         
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отменен);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			Список.Добавить(СтатусУточненияЗЗ);
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			//СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
			//
			//Если Не СогласованиеБезБП Тогда
			//	БПСогласование = НайтиБПСогласование();
			//	Если не БПСогласование = Неопределено Тогда
			//		текСтатусУточненияЗЗ = БПСогласование.СтатусУточненияЗЗ;
			//	Иначе	
			//		текСтатусУточненияЗЗ = СтатусУточненияЗЗ;	
			//	КонецЕсли;
			//Иначе
			//	БПСогласование = Неопределено;
			//	текСтатусУточненияЗЗ = СтатусУточненияЗЗ;
			//КонецЕсли;
			
			//Если (НЕ БПСогласование = Неопределено И Не СогласованиеБезБП) ИЛИ СогласованиеБезБП Тогда  				
			//	Если текСтатусУточненияЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК Тогда   					
			//		Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УточненоДляОФК);  					
			//	КонецЕсли;      				
			//КонецЕсли;
			//
			//// АБС Изменение Родин Отключение бизнес-процессов 110314
			//Если СтатусУточненияЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК Тогда 
			//	Список.Добавить(СтатусУточненияЗЗ);				
			//КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
			// АБС ВСТАВКА АБС-Ф 4669
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = неопределено И
			Ответственный = мТекущийПользователь) 
			Тогда
			
			//Сторчевой А.Н. 14.11.2016 7757345 {
			//Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеГрафика);			 
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт);
			
			// } Сторчевой А.Н. 14.11.2016 7757345
		КонецЕсли;
		
		Если МожноПеревестиВИсполнение() Тогда    			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение);  			
		КонецЕсли;
		
		// АБС 19636
		//Если ОборудованиеЧерезОЗК Тогда  			
		//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеДТРвКТТК);
		//КонецЕсли;
		// АБС 19636 КОНЕЦ
		//Сторчевой А.Н. 14.11.2016 7757345 {
		//АБС-Пр2 11957+
		//Если Ответственный = мТекущийПользователь 
		//	ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)
		//	ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
		//	
		//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершение);
		//	
		//КонецЕсли;
		//-
		// } Сторчевой А.Н. 14.11.2016 7757345
		//АБС-Пр2 11173+
		//Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)
		//	ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
		//	
		//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт);
		//	
		//КонецЕсли;
		//-
		
		//АБС Коломиец 18409+
		ТекСотрудник = абс_БизнесПроцессы.ПолучитьСотрудникаПользователя(мТекущийПользователь);
		
		//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:25:37  Поставка
		
		Если ЗначениеЗаполнено(ТекСотрудник) И ТекСотрудник.ПодразделениеОрганизации = глЗначениеПеременной("абс_ПодразделениеОЗОиП") Тогда   
			//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
			//Сторчевой А.Н. 14.11.2016 7757345 {
			//Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			// } Сторчевой А.Н. 14.11.2016 7757345
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение); 
		КонецЕсли;
		// } Сторчевой А.Н. 14.11.2016 7757345
		//АБС Коломиец 18409-
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК);
			
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			//СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
			//Если Не СогласованиеБезБП Тогда
			//	БПСогласование = НайтиБПСогласование();
			//	//АБС ВСТАВКА №40748 НАЧАЛО «24 апреля 2014 г.», Пополитов    				
			//	Если не БПСогласование = Неопределено Тогда
			//		мСтатусИзмененияСпецификации     = БПСогласование.СтатусИзмененияСпецификации;
			//	Иначе	
			//		мСтатусИзмененияСпецификации     = СтатусИзмененияСпецификации;	
			//	КонецЕсли;                       
			//	//\\АБС ВСТАВКА №40748 КОНЕЦ 
			//Иначе
			//	БПСогласование = Неопределено;
			//	мСтатусИзмененияСпецификации     = СтатусИзмененияСпецификации;
			//КонецЕсли;
			//
			//Если (НЕ БПСогласование = Неопределено И Не СогласованиеБезБП) ИЛИ СогласованиеБезБП Тогда
			//	Список.Добавить(мСтатусИзмененияСпецификации);
			//КонецЕсли;
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			
		КонецЕсли;
	//Сторчевой А.Н. 14.11.2016 7757345 {	
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеГрафика Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
			// АБС ВСТАВКА АБС-Ф 4669
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = неопределено И
			Ответственный = мТекущийПользователь) 
			Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК);
		КонецЕсли;
	// } Сторчевой А.Н. 14.11.2016 7757345	
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение Тогда
		
		Если Ответственный = мТекущийПользователь //ИЛИ РазрешеноСогласование 
			ИЛИ	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт);  			
		КонецЕсли;
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) ИЛИ 
			(НЕ ОборудованиеЧерезОЗК И (НЕ мРолиПользователя.найти(Справочники.РолиИсполнителей.ДирККР) = Неопределено)) Тогда // АБС 19636
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);
			
		КонецЕсли;	
		
		//АБС ВСТАВКА №6830 НАЧАЛО
		//Сторчевой А.Н. 14.11.2016 7757345 {
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДирККР) = Неопределено) 
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			
		КонецЕсли;	
		// } Сторчевой А.Н. 14.11.2016 7757345
		// АБС 19636
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеДТРвКТТК Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт);  			
		КонецЕсли;
		
		Если НЕ мРолиПользователя.найти(Справочники.РолиИсполнителей.СогласованиеДТРвКТТК) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
		КонецЕсли;
		
		//Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ЗЗвСтатусЗавершен) = Неопределено) 
		//	ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
		//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершен);
		//КонецЕсли;	
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК Тогда
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		ПодразделениеДирККР = Константы.абс_ПодразделениеДирККР.Получить();
		МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
	абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеДирККР,,Справочники.Организации.НайтиПоНаименованию("КТТК",Истина))); // с отбором по организации
	
	
		Если ((Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование) и Не СогласованиеБезБП) ИЛИ СогласованиеБезБП Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт); 
			Если ОборудованиеЧерезОЗК Тогда			
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеБюджета);			
			КонецЕсли;			
		КонецЕсли;
		
		
		Если (НЕ мРолиПользователя.найти(Справочники.РолиИсполнителей.ДирККРвКТТК) = Неопределено И Не СогласованиеБезБП) ИЛИ (СогласованиеБезБП И МассивИсполнителей.Найти(мТекущийПользователь) <> Неопределено) Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации);
		КонецЕсли;
		
		Если НЕ СогласованиеБезБП Тогда 
			Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ЗЗвСтатусЗавершен) = Неопределено) ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)
				Тогда
				Список.Добавить(?(НЕ ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование, Перечисления.абсСтатусЗакупочногоЗаказа.Завершен, Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение));
			КонецЕсли;	
		Иначе
			Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ЗЗвСтатусЗавершен) = Неопределено) ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)
				Тогда
				
				Если МассивИсполнителей.Найти(мТекущийПользователь) <> Неопределено Тогда
					Список.Добавить(?(НЕ ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование, Перечисления.абсСтатусЗакупочногоЗаказа.Завершен, Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение));
				КонецЕсли;
				
			КонецЕсли;	
		КонецЕсли;
		
		// АБС 19636 КОНЕЦ
		// АБС Изменение Родин Отключение бизнес-процессов 110314
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование Тогда
			//Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);  
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
		КонецЕсли;
		
		//Если НЕ мРолиПользователя.найти(Справочники.РолиИсполнителей.СогласованиеДТРвКТТК) = Неопределено Тогда
		//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
		//КонецЕсли;
		
		//БПСогласование = НайтиБПСогласование();
		//
		//Если НЕ БПСогласование = Неопределено Тогда
		//	
		//	Список.Добавить(БПСогласование.СтатусИзмененияСпецификации);
		
		//КонецЕсли;
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершение Тогда    //АБС-Пр2 11957 +
		
		Если Ответственный = мТекущийПользователь 
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)    
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
			
		КонецЕсли;   
		
		Если  (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)    
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершен);
			
		КонецЕсли; 		
		//АБС-Пр2- 
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершен Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ЗЗвСтатусЗавершен) = Неопределено) 
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение);
			
		КонецЕсли;
		//\\АБС ВСТАВКА №6830 КОНЕЦ
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)     //АБС-Пр2 11957 +
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
			
		КонецЕсли;   //АБС-Пр2- 
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор Тогда
		
		ДоговорыВИсполнении = Истина;
		ЕстьДоговорВПодготовке = Ложь;
		
		Для Каждого СтрокаДоговора Из Договоры Цикл
			
			Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
				Продолжить;
			КонецЕсли;
			
			//Родин лимиты по договорам
			ДоговорыВИсполнении = ДоговорыВИсполнении И 
			((СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ 
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка ИЛИ
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки) ИЛИ 
			(СтрокаДоговора.ДоговорКонтрагента = мТекущийДоговор И мДоговорСогласован));
			 //Родин лимиты по договорам

			ЕстьДоговорВПодготовке = ЕстьДоговорВПодготовке или 	
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка;
			
		КонецЦикла;
		
		Если (ОборудованиеЧерезОЗК ИЛИ ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ИнвестиционноеСтроительство)
			И Договоры.Количество() = 0 Тогда
			ДоговорыВИсполнении = Ложь;
		КонецЕсли;
		
		Если ДоговорыВИсполнении Тогда
			Если ЗначениеЗаполнено(мТекущийДоговор) ИЛИ 
				Ответственный = мТекущийПользователь Тогда				 
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
			КонецЕсли;
		КонецЕсли;
		
		//АБС ВСТАВКА №20697 НАЧАЛО
		Если ОборудованиеЧерезОЗК Тогда			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
		КонецЕсли;
		//\\АБС ВСТАВКА №20697 КОНЕЦ		
		
		//АБС ВСТАВКА 14877 НАЧАЛО 		
		Если //ЕстьДоговорВПодготовке Тогда
		//	Если ЗначениеЗаполнено(мТекущийДоговор) ИЛИ 
				Ответственный = мТекущийПользователь ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда 				 
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			//КонецЕсли;  				
		КонецЕсли;	
		//\\АБС ВСТАВКА 14877 КОНЕЦ
		
		//Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) или 
		//	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда			
		//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);                     			
		//КонецЕсли;		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт Тогда
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Отменен Тогда
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросИзменений Тогда
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			
			ПодразделениеОФК = Константы.абс_ПодразделениеОФК.Получить();
			
			ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
			абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,Организация));	
			
			
			СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
			
			Если Не СогласованиеБезБП Тогда
				БПСогласование = НайтиБПСогласование();
				Если не БПСогласование = Неопределено Тогда
					текСтатусУточненияЗЗ = БПСогласование.СтатусУточненияЗЗ;
				Иначе	
					текСтатусУточненияЗЗ = СтатусУточненияЗЗ;	
				КонецЕсли; 					
			Иначе
				БПСогласование = Неопределено;   
				текСтатусУточненияЗЗ = СтатусУточненияЗЗ;
			КонецЕсли;
			
			Если (НЕ БПСогласование = Неопределено И Не СогласованиеБезБП) ИЛИ (СогласованиеБезБП И ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено) Тогда
				Список.Добавить(текСтатусУточненияЗЗ);
			КонецЕсли;
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УточненоДляОФК Тогда
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		
		ПодразделениеОФК = Константы.абс_ПодразделениеОФК.Получить();
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,Организация));	
		
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено И НЕ СогласованиеБезБП) ИЛИ (СогласованиеБезБП И ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено) Тогда
			
			//Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			
		КонецЕсли;
		// АБС Изменение Родин Отключение бизнес-процессов 110314
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеБюджета Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ВозможноУточнениеИнициатором Тогда
		Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено Тогда
			ЭлементУточнить = Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			
			Если НЕ ЭлементУточнить = Неопределено Тогда
				Список.Удалить(ЭлементУточнить);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если ОборудованиеЧерезОЗК Тогда
		
		Для Каждого КлючИЗначение Из Список Цикл
			
			Если КлючИЗначение.Значение = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда
				
				КлючИЗначение.Значение = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеДТРвКТТК;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьСписокДоступныхСтатусов_удалитьПослеЗавершинияПроектаМелащенко(Список) Экспорт	
	
	Список.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Список.Добавить(Статус);
		Возврат;
	КонецЕсли;                    
	
	Список.Добавить(Ссылка.Статус);
	
	
	//Изменено 261213 Проектный учет Родин
	ИспользоватьПроектныйУчет =  глЗначениеПеременной("абс_СогласованиеРП");
	
	//Вставка 100114 Проектный учет Родин
	НеТребуетсяСогласованиеРП =  Ложь;
	//Вставка 100114 Проектный учет Родин
	
	СписокРуководителей = Новый Массив;
	Для каждого Стр Из РаспределениеПоПроектам Цикл
		Если ЗначениеЗаполнено(Стр.Проект.абс_РуководительПроекта) Тогда
			
			ПользовательРуководитель = Справочники.Пользователи.НайтиПоРеквизиту("абс_Сотрудник",Стр.Проект.абс_РуководительПроекта);
			
			Если ПользовательРуководитель <> Справочники.Пользователи.ПустаяСсылка() и СписокРуководителей.Найти(ПользовательРуководитель) = Неопределено Тогда
				СписокРуководителей.Добавить(ПользовательРуководитель);	
			КонецЕсли;
			
			//Вставка 100114 Проектный учет Родин
			Если Стр.Проект.абс_НеТребуетсяСогласованиеРПвЗЗ Тогда
				НеТребуетсяСогласованиеРП =  Истина;
			КонецЕсли;	
			//Вставка 100114 Проектный учет Родин
			
		КонецЕсли;
	КонецЦикла;
	//Изменено 261213 Проектный учет Родин
	
	
	
	Если КонсолидированныйЗЗПоОЗК Тогда
		
		//Изменено 261213 Проектный учет Родин
		Если Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка  или Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП Тогда
			
			Если Ссылка.Статус <> Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП и ИспользоватьПроектныйУчет и Не НефиксированнаяСумма и  СписокРуководителей.Найти(мТекущийПользователь) = Неопределено Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП);
			ИначеЕсли (ИспользоватьПроектныйУчет и НефиксированнаяСумма) ИЛИ  (СписокРуководителей.Найти(мТекущийПользователь) <> Неопределено и ИспользоватьПроектныйУчет) ИЛИ НЕ ИспользоватьПроектныйУчет Тогда  
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации);
			КонецЕсли;	
			//Изменено 261213 Проектный учет Родин
			
		ИначеЕсли Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершен);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации);
			
		ИначеЕсли Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации Тогда
			
			ТребуетсяПодтвержениеСпецфикации = Ложь;
			Для Каждого ЗЗ_ОЗК Из ЗакупочныеЗаказыОЗК Цикл
				Если ЗЗ_ОЗК.ЗакупочныйЗаказ.Статус <> Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК Тогда
					ТребуетсяПодтвержениеСпецфикации = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ТребуетсяПодтвержениеСпецфикации Тогда 
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ВозможноУточнениеИнициатором 	= Ложь;
	РазрешеноСогласование 			= Ложь;
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	Если Не СогласованиеБезБП Тогда	
		// Если есть задачи текущему пользователю, то ему разрешено изменить статус
		//АБС ВСТАВКА №44882 НАЧАЛО «26 июня 2014 г.», Пополитов    	  	
		//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		//|	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка
		//|ИЗ
		//|	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(
		//|			&ТекПользователь,
		//|			ОбъектЗадачи = &ЗЗСсылка
		//|				И Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю");
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	абсЗадачаДоговора.Ссылка
		                      |ИЗ
		                      |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
		                      |ГДЕ
		                      |	абсЗадачаДоговора.ОбъектЗадачи = &ЗЗСсылка
		                      |	И НЕ абсЗадачаДоговора.Выполнена
		                      |	И (абсЗадачаДоговора.Роль В (&СписокРолей)
		                      |			ИЛИ абсЗадачаДоговора.Исполнитель = &ТекПользователь)");
							  
		Запрос.УстановитьПараметр("СписокРолей"		, мРолиПользователя);
		//\\АБС ВСТАВКА №44882 КОНЕЦ
		Запрос.УстановитьПараметр("ТекПользователь"	, мТекущийПользователь);
		Запрос.УстановитьПараметр("ЗЗСсылка"		, Ссылка);

		ВыборкаЗадач = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаЗадач.Следующий() Тогда
			
			РазрешеноСогласование = Истина;
					
		КонецЕсли;		
	Иначе
		РазрешеноСогласование = Истина;
	КонецЕсли;
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	
	ТекСтатус = Ссылка.Статус;
	
	Если Ответственный = мТекущийПользователь Тогда
		СтатусыУточненияИнициатором = абс_БизнесПроцессы.ПолучитьСтатусыУточненияИнициатором();
		
		Если НЕ СтатусыУточненияИнициатором.Найти(Ссылка.Статус) = Неопределено Тогда
			
			ВозможноУточнениеИнициатором = Истина;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК);
			
		КонецЕсли;
	КонецЕсли;
	
	
	// Какое может быть согласование если нету задачи пользователю.
	Если НЕ РазрешеноСогласование И 
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ И  // ТТК Лапин 07.09.2016  Заявка № 7746188 
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка     И
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ И  // ТТК Лапин 05.05.2016
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован     И 
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение     И
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершение     И   //АБС-Пр2 11957
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершен       И
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор И
		НЕ Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Проектный учет
	СогласованиеРуководителемБлокаВЗЗ = ПараметрыСеанса.абс_НастройкиСистемы.СогласованиеРуководителемБлокаВЗЗ;
	Если СогласованиеРуководителемБлокаВЗЗ Тогда 	
		ПревышаетЛимитПоБлоку = РегистрыСведений.абс_ЛимитыПоБлокам.ПревышенЛимитПоЦФО(ИтогСуммаСНДС,ЦФО);
		ПользовательРуководительБлока = РегистрыСведений.абс_РуководителиБлока.ПользовательЯвляетсяРуководителемБлока(ЦФО,мТекущийПользователь);
	Иначе
		ПревышаетЛимитПоБлоку = Ложь;
		ПользовательРуководительБлока = Ложь;
	КонецЕсли;
	//Проектный учет
	
	
	//Изменено 261213 Проектный учет Родин
	
	// {{ТТК Лапин А. Согласование Целевого использования средств статей бюджета 05.05.2016 начало
	//Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка или ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП Тогда
	Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка или ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП или ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ Тогда
		
		//Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.РольСогласователя,
		|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.БюджетнаяСтатья
		|ИЗ
		|	РегистрСведений.ttk_СтатьиСОсобымКонтролемЦелевогоИспользования КАК ttk_СтатьиСОсобымКонтролемЦелевогоИспользования
		|ГДЕ
		|	ttk_СтатьиСОсобымКонтролемЦелевогоИспользования.БюджетнаяСтатья = &БюджетнаяСтатья";
		
		Запрос.УстановитьПараметр("БюджетнаяСтатья", БюджетнаяСтатья.Ссылка);
		
		ТЗРезультат = Запрос.Выполнить().Выгрузить();
		
		// Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
		// {{ТТК Лапин А. Согласование Целевого использования средств статей бюджета 19.05.2016 начало
				
		//Если ТЗРезультат.количество() > 0 И (НЕ мРолиПользователя.Найти(ТЗРезультат[0].РольСогласователя) = Неопределено) Тогда //РолиИсполнителей.СогласованиеЦИ
		
		Если ТЗРезультат.Количество() > 0 Тогда
			
			Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка Тогда
				
				// если статья в списке контроллируемых статей, то только в Согласование ЦИ или в Отказ
				// }}ТТК Лапин А. Заявка № 19.05.2016 окончание
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ);
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
				
				Возврат;
				
			ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦИ Тогда	
				
				// проверим, есть ли роль СогласованиеЦИ у текущего ответственного юзера
				Если (НЕ мРолиПользователя.Найти(ТЗРезультат[0].РольСогласователя) = Неопределено) Тогда //РолиИсполнителей.СогласованиеЦИ
					// из Согласование ЦИ может вывести только имеющий Роль... 
					// направляет далее, в зависимости от прочих параметров ЗЗ
					// также добавляю возможность отказа для всех вариантов дальнейшего развития...
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
					
					Если ТекСтатус <> Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП и ИспользоватьПроектныйУчет и Не НефиксированнаяСумма и  СписокРуководителей.Найти(мТекущийПользователь) = Неопределено  и Не НеТребуетсяСогласованиеРП Тогда
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП);
						
					ИначеЕсли (ИспользоватьПроектныйУчет и НефиксированнаяСумма) ИЛИ (СписокРуководителей.Найти(мТекущийПользователь) <> Неопределено и ИспользоватьПроектныйУчет) ИЛИ (НеТребуетсяСогласованиеРП и ИспользоватьПроектныйУчет) или Не ИспользоватьПроектныйУчет Тогда  
						
						Если глЗначениеПеременной("абс_ОтклАлгоритмСогласованияЗЗ2013") = Истина  Тогда
							// {{АРТ саТерра <Токарев Н.А.> <Дата 16.07.2015> начало
							// перевод КТТК на работу по согл. закуп. заказов на единую схему с филиалами и в части стутусов директор дирекции и рук. департамента
							// {{
							//ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация    //АБС Коломиец 19797  				
							// }}
							// }}АРТ саТерра <Токарев Н.А.> <16.07.2015> окончание
							
							ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
							Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
								Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
								И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
								Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);				
							ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
							КонецЕсли;		
						Иначе  				
							ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.ДиректорДирекции);   				
							Если ОтветственныеДирекции = Неопределено ИЛИ ОтветственныеДирекции.Количество() = 0 Тогда
								//Проверка по Департаменту
								ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента);  					
								Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
									Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда 							
										Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
									КонецЕсли;    						
								Иначе   
									Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда   							
										Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);  							
										ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
									КонецЕсли;   						
								КонецЕсли;
							Иначе   					
								//Проверка по Департаменту
								ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента); 					
								Если НЕ (ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0) Тогда
									
									ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
									Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
										Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
										И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
										Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
										Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
									ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
										Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
									КонецЕсли;						
								ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
									Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
								КонецЕсли;		
							КонецЕсли;
						КонецЕсли;
						
						//Старая схема согласования			
					ИначеЕсли Не ИспользоватьПроектныйУчет Тогда 	
						
						Если глЗначениеПеременной("абс_ОтклАлгоритмСогласованияЗЗ2013") = Истина ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда   //АБС Коломиец 19797  				
							ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
							Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
								Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
								И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
								Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);				
							ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
							КонецЕсли;		
						Иначе  				
							ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.ДиректорДирекции);   				
							Если ОтветственныеДирекции = Неопределено ИЛИ ОтветственныеДирекции.Количество() = 0 Тогда
								//Проверка по Департаменту
								ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента);  					
								Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
									Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда 							
										Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
									КонецЕсли;    						
								Иначе   
									Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда   							
										Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);  							
										ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
									КонецЕсли;   						
								КонецЕсли;
							Иначе  					
								//Проверка по Департаменту
								ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента); 					
								Если НЕ (ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0) Тогда
									
									ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
									Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
										Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
										И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
										Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
										Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
									ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
										Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
									КонецЕсли;						
								ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
									Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
								КонецЕсли;						
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;	
					
					
				КонецЕсли; //  из Согласование ЦИ  Лапин 19.05.2016
				
			КонецЕсли;
			
		Иначе // Лапин 19.05.2016 предыдущий вариант не учитывающий и не требующий согласование Целевого использования
			
			Если ТекСтатус <> Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП и ИспользоватьПроектныйУчет и Не НефиксированнаяСумма и  СписокРуководителей.Найти(мТекущийПользователь) = Неопределено  и Не НеТребуетсяСогласованиеРП Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП);
				
			ИначеЕсли (ИспользоватьПроектныйУчет и НефиксированнаяСумма) ИЛИ (СписокРуководителей.Найти(мТекущийПользователь) <> Неопределено и ИспользоватьПроектныйУчет) ИЛИ (НеТребуетсяСогласованиеРП и ИспользоватьПроектныйУчет) или Не ИспользоватьПроектныйУчет Тогда  
				
				Если глЗначениеПеременной("абс_ОтклАлгоритмСогласованияЗЗ2013") = Истина  Тогда
					// {{АРТ саТерра <Токарев Н.А.> <Дата 16.07.2015> начало
					// перевод КТТК на работу по согл. закуп. заказов на единую схему с филиалами и в части стутусов директор дирекции и рук. департамента
					// {{
					//ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация    //АБС Коломиец 19797  				
					// }}
					// }}АРТ саТерра <Токарев Н.А.> <16.07.2015> окончание
					
					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
					Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
						Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
						И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
						Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);				
					ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
					КонецЕсли;		
				Иначе  				
					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.ДиректорДирекции);   				
					Если ОтветственныеДирекции = Неопределено ИЛИ ОтветственныеДирекции.Количество() = 0 Тогда
						//Проверка по Департаменту
						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента);  					
						Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
							Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда 							
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
							КонецЕсли;    						
						Иначе   
							Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда   							
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);  							
								ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
							КонецЕсли;   						
						КонецЕсли;
					Иначе   					
						//Проверка по Департаменту
						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента); 					
						Если НЕ (ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0) Тогда
							
							ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
							Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
								Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
								И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
								Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
							ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
							КонецЕсли;						
						ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
						КонецЕсли;		
					КонецЕсли;
				КонецЕсли;
				
				//Старая схема согласования			
			ИначеЕсли Не ИспользоватьПроектныйУчет Тогда 	
				
				Если глЗначениеПеременной("абс_ОтклАлгоритмСогласованияЗЗ2013") = Истина ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда   //АБС Коломиец 19797  				
					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
					Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
						Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
						И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
						Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);				
					ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
					КонецЕсли;		
				Иначе  				
					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.ДиректорДирекции);   				
					Если ОтветственныеДирекции = Неопределено ИЛИ ОтветственныеДирекции.Количество() = 0 Тогда
						//Проверка по Департаменту
						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента);  					
						Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
							Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда 							
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
							КонецЕсли;    						
						Иначе   
							Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда   							
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);  							
								ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
							КонецЕсли;   						
						КонецЕсли;
					Иначе  					
						//Проверка по Департаменту
						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента); 					
						Если НЕ (ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0) Тогда
							
							ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация);
							Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
								Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
								И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
								Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
							ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
								Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
							КонецЕсли;						
						ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
						КонецЕсли;						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
			
		// {{ТТК Лапин А. Заявка № 05.05.2016 окончание						 	
		КонецЕсли;	
		// }}ТТК Лапин А. Заявка № 05.05.2016 окончание						
				
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции Тогда
		
		//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:22:40  Поставка
		//Если Константы.абс_ОтклАлгоритмСогласованияЗЗ2013.Получить() = Истина ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда   //АБС Коломиец 19797
		
		// {{ТТК Лапин А. Заявка № 7722845  01.03.2016 начало
		//Если глЗначениеПеременной("абс_ОтклАлгоритмСогласованияЗЗ2013") = Истина ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда //АБС Коломиец 19797  // Alex Lapin 01.02.2016 коммент
		Если глЗначениеПеременной("абс_ОтклАлгоритмСогласованияЗЗ2013") = Истина Тогда   //АБС Коломиец 19797
		// }}ТТК Лапин А. Заявка № 7722845  01.03.2016 окончание
		
		//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
			
			Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
				
				ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
				
				// Если это ответственный департамента, имеет роль руководителя департамента
				// если если это суперпользователь
				Если 	((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) = Неопределено) И
					(НЕ ОтветственныеДепартамента.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))  
					ИЛИ
					(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
					
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
					
					ОтветственныеЦФО = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО);
					
					Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) И
						(НЕ ОтветственныеЦФО.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))
						ИЛИ
						(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
						
						//Проектный учет
						Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ Тогда
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
						Иначе	
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
						КонецЕсли;
						//Проектный учет
						
					КонецЕсли;
					
				КонецЕсли;
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			КонецЕсли;	
		Иначе
			
			//Проверка по Департаменту
			ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Организация, Справочники.РолиИсполнителей.РуководительДепартамента);
			
			Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
				//в ЦФО
				Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено Тогда
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
					//КонецЕсли;
					Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) = Неопределено Тогда
						
						ОтветственныеЦФО = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО);
						
						Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) И
							(НЕ ОтветственныеЦФО.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))
							ИЛИ 
							(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
							
						//Проектный учет
						Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ Тогда
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
						Иначе	
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
						КонецЕсли;
						//Проектный учет
							
						КонецЕсли;
						
					КонецЕсли;
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);					
				КонецЕсли;
			Иначе   //в Департамент
				Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено Тогда
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
					
					ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Департамент);
					
					Если 	((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) = Неопределено) И
						(НЕ ОтветственныеДепартамента.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))  
						ИЛИ
						(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
						
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
						
						ОтветственныеЦФО = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО);
						
						Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) И
							(НЕ ОтветственныеЦФО.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))
							ИЛИ
							(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
							
						//Проектный учет
						Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ Тогда
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
						Иначе	
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
						КонецЕсли;
						//Проектный учет
							
						КонецЕсли;
						
					КонецЕсли;
					
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//Проектный учет
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока Тогда
		
		Если ПользовательРуководительБлока Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);					
		КонецЕсли;
		//Проектный учет
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента Тогда
		
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
			
			ОтветственныеЦФО = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО);
			
			Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) И
				(НЕ ОтветственныеЦФО.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))
				ИЛИ 
				(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
				
				//Проектный учет
				Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ Тогда
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
				Иначе
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
				КонецЕсли;
				//Проектный учет
			КонецЕсли;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО Тогда
		
		МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО,, Организация));
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		
		//АБС ВСТАВКА   07.04.2015 18:00:59  Шамов
		Если ПараметрыСеанса.абс_НастройкиСистемы.ЗапретСогласованияРуководителямиЦФОФилиалов = Истина Тогда
			Если ЦФО = ПараметрыСеанса.абс_НастройкиСистемы.ЦФОДляЗапрета
				И БюджетнаяСтатья = ПараметрыСеанса.абс_НастройкиСистемы.БюджетнаяСтатьяДляЗапрета Тогда
				ОрганизацияКТТК = ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК;
				МассивИсполнителейКТТК = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
				абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФО,, ОрганизацияКТТК));
				Если МассивИсполнителейКТТК.Найти(мТекущийПользователь) = Неопределено Тогда
					Возврат;	
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
		//АБС ВСТАВКА  КОНЕЦ 
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено И Не СогласованиеБезБП) ИЛИ (СогласованиеБезБП И МассивИсполнителей.Найти(мТекущийПользователь) <> Неопределено) Тогда
			
			//Проектный учет
			Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
			Иначе	
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
			КонецЕсли;
			//Проектный учет
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
		КонецЕсли;
		// АБС Изменение Родин Отключение бизнес-процессов 110314
			
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК Тогда
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП"); 		
		ПодразделениеОФК = глЗначениеПеременной("абс_ПодразделениеОФК");
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
									абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,Организация));	
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено И Не СогласованиеБезБП) ИЛИ (СогласованиеБезБП И ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено) Тогда
			//АБС ВСТАВКА №47738 НАЧАЛО «1 октября 2014 г.», Пополитов
			//Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК);
			//\\АБС ВСТАВКА №47738 КОНЕЦ   		
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
		КонецЕсли;
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		
	//АБС ВСТАВКА №47738 НАЧАЛО «1 октября 2014 г.», Пополитов	
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК Тогда
		
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");  
		ПодразделениеОФК = глЗначениеПеременной("абс_ПодразделениеОФК");
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
			абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК));	
			
		мРолиПользователяКТТК = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь,ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК);	
		Если (НЕ мРолиПользователяКТТК.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено И Не СогласованиеБезБП) ИЛИ (СогласованиеБезБП И ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено) Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);			
		КонецЕсли;
	//\\АБС ВСТАВКА №47738 КОНЕЦ
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ Тогда
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		
		ПодразделениеДФМ = Константы.абс_ПодразделениеДФМ.Получить();
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеДФМ,,Организация));	
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДФМ) = Неопределено И Не СогласованиеБезБП) ИЛИ (СогласованиеБезБП И ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено) Тогда
			
			ДоговорыВИсполнении = Истина;
			
			Для Каждого СтрокаДоговора Из Договоры Цикл
				
				Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
					Продолжить;
				КонецЕсли;
				
				//абс Родин Лимитный контроль
				ДоговорыВИсполнении = ДоговорыВИсполнении 
				И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
				//абс Родин Лимитный контроль
				
			КонецЦикла;
			
			Если (ОборудованиеЧерезОЗК ИЛИ ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ИнвестиционноеСтроительство)
				И Договоры.Количество() = 0 Тогда
				ДоговорыВИсполнении = Ложь;
			КонецЕсли;
			
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
			Справочники.РолиИсполнителей.РуководительЦФУ);   
			Если ИтогСуммаСНДС < ПределСуммыУтверждения И ДоговорыВИсполнении Тогда 				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован); 				
			ИначеЕсли ИтогСуммаСНДС < ПределСуммыУтверждения И НЕ ДоговорыВИсполнении Тогда 
				Если не ОборудованиеЧерезОЗК Тогда
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
				КонецЕсли;
			Иначе       			
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ);  				
			КонецЕсли;
			
			//АБС ВСТАВКА №20697 НАЧАЛО
			Если ОборудованиеЧерезОЗК Тогда			
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
			КонецЕсли;
			//\\АБС ВСТАВКА №20697 КОНЕЦ
			
			// 20110822 Активирована, добавленная ранее возможность отправки на уточнение на ОФК.
			
			//Проектный учет
			Если Не НефиксированнаяСумма И ПревышаетЛимитПоБлоку И СогласованиеРуководителемБлокаВЗЗ  Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока);
			Иначе	
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
			КонецЕсли;
			//Проектный учет
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			
		КонецЕсли;
		// АБС Изменение Родин Отключение бизнес-процессов 110314
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ Тогда
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
			МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЦФУ,, Организация));	
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФУ) = Неопределено И Не СогласованиеБезБП) ИЛИ (СогласованиеБезБП И МассивИсполнителей.Найти(мТекущийПользователь) <> Неопределено) Тогда
			
			ДоговорыВИсполнении = Истина;
			
			Для Каждого СтрокаДоговора Из Договоры Цикл
				
				Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
					Продолжить;
				КонецЕсли;
				
				//абс Родин Лимитный контроль
				ДоговорыВИсполнении = ДоговорыВИсполнении 
				И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
				//абс Родин Лимитный контроль
				
			КонецЦикла;
			
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
			Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
			
			Если ИтогСуммаСНДС < ПределСуммыУтверждения И ДоговорыВИсполнении Тогда
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
				
			ИначеЕсли ИтогСуммаСНДС < ПределСуммыУтверждения И НЕ ДоговорыВИсполнении Тогда
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
				
			Иначе
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам);
				
			КонецЕсли;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
		КонецЕсли;
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПервыйВицеПрезидент) = Неопределено Тогда
			
			ДоговорыВИсполнении = Истина;
			
			Для Каждого СтрокаДоговора Из Договоры Цикл
				
				Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
					Продолжить;
				КонецЕсли;
				
				//абс Родин Лимитный контроль
				ДоговорыВИсполнении = ДоговорыВИсполнении 
				И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
				//абс Родин Лимитный контроль
				
			КонецЦикла;
			
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
			Справочники.РолиИсполнителей.Президент);
			
			Если ИтогСуммаСНДС < ПределСуммыУтверждения И ДоговорыВИсполнении Тогда  				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован); 				
			ИначеЕсли ИтогСуммаСНДС < ПределСуммыУтверждения И НЕ ДоговорыВИсполнении Тогда 				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);  				
			Иначе                                                                       				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом);				
			КонецЕсли;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.Президент) = Неопределено Тогда
			
			ДоговорыВИсполнении = Истина;
			
			Для Каждого СтрокаДоговора Из Договоры Цикл
				
				Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
					Продолжить;
				КонецЕсли;
				
				//абс Родин Лимитный контроль
				ДоговорыВИсполнении = ДоговорыВИсполнении 
				И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
				//абс Родин Лимитный контроль
				
			КонецЦикла;
			
			Если ДоговорыВИсполнении Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
			Иначе
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
			КонецЕсли;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отменен);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
			
			Если Не СогласованиеБезБП Тогда
				БПСогласование = НайтиБПСогласование();
				Если не БПСогласование = Неопределено Тогда
					текСтатусУточненияЗЗ = БПСогласование.СтатусУточненияЗЗ;
				Иначе	
					текСтатусУточненияЗЗ = СтатусУточненияЗЗ;	
				КонецЕсли;
			Иначе
				БПСогласование = Неопределено;
				текСтатусУточненияЗЗ = СтатусУточненияЗЗ;
			КонецЕсли;
			
			Если (НЕ БПСогласование = Неопределено И Не СогласованиеБезБП) ИЛИ СогласованиеБезБП Тогда  				
				Если текСтатусУточненияЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК Тогда   					
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УточненоДляОФК);  					
				КонецЕсли;      				
			КонецЕсли;
			
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			Если СтатусУточненияЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК Тогда 
				Список.Добавить(СтатусУточненияЗЗ);				
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
			// АБС ВСТАВКА АБС-Ф 4669
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = неопределено И
			Ответственный = мТекущийПользователь) 
			Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);
			
		КонецЕсли;
		
		Если МожноПеревестиВИсполнение() Тогда    			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение);  			
		КонецЕсли;
		
		// АБС 19636
		Если ОборудованиеЧерезОЗК Тогда  			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеДТРвКТТК);
		КонецЕсли;
		// АБС 19636 КОНЕЦ
		
		//АБС-Пр2 11957+
		Если Ответственный = мТекущийПользователь 
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершение);
			
		КонецЕсли;
		//-
		
		//АБС-Пр2 11173+
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершен);
			
		КонецЕсли;
		//-
		
		//АБС Коломиец 18409+
		ТекСотрудник = абс_БизнесПроцессы.ПолучитьСотрудникаПользователя(мТекущийПользователь);
		
		//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:25:37  Поставка		
		Если ЗначениеЗаполнено(ТекСотрудник) И ТекСотрудник.ПодразделениеОрганизации = глЗначениеПеременной("абс_ПодразделениеОЗОиП") Тогда   
			//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ); 
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение); 
		КонецЕсли;
		//АБС Коломиец 18409-
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
			
			Если Не СогласованиеБезБП Тогда
				БПСогласование = НайтиБПСогласование();
				//АБС ВСТАВКА №40748 НАЧАЛО «24 апреля 2014 г.», Пополитов    				
				Если не БПСогласование = Неопределено Тогда
					мСтатусИзмененияСпецификации     = БПСогласование.СтатусИзмененияСпецификации;
				Иначе	
					мСтатусИзмененияСпецификации     = СтатусИзмененияСпецификации;	
				КонецЕсли;                       
				//\\АБС ВСТАВКА №40748 КОНЕЦ 
			Иначе
				БПСогласование = Неопределено;
				мСтатусИзмененияСпецификации     = СтатусИзмененияСпецификации;
			КонецЕсли;
			
			Если (НЕ БПСогласование = Неопределено И Не СогласованиеБезБП) ИЛИ СогласованиеБезБП Тогда
				Список.Добавить(мСтатусИзмененияСпецификации);
			КонецЕсли;
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			
		КонецЕсли;		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт);  			
		КонецЕсли;
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) ИЛИ 
			(НЕ ОборудованиеЧерезОЗК И (НЕ мРолиПользователя.найти(Справочники.РолиИсполнителей.ДирККР) = Неопределено)) Тогда // АБС 19636
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);
			
		КонецЕсли;	
		
		//АБС ВСТАВКА №6830 НАЧАЛО
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ЗЗвСтатусЗавершен) = Неопределено) 
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершен);
			
		КонецЕсли;	
		
		// АБС 19636
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеДТРвКТТК Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт);  			
		КонецЕсли;
		
		Если НЕ мРолиПользователя.найти(Справочники.РолиИсполнителей.СогласованиеДТРвКТТК) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
		КонецЕсли;
		
		//Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ЗЗвСтатусЗавершен) = Неопределено) 
		//	ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
		//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершен);
		//КонецЕсли;	
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК Тогда
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		ПодразделениеДирККР = Константы.абс_ПодразделениеДирККР.Получить();
		МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
	абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеДирККР,,Справочники.Организации.НайтиПоНаименованию("КТТК",Истина))); // с отбором по организации
	
	
		Если ((Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование) и Не СогласованиеБезБП) ИЛИ СогласованиеБезБП Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт); 
			Если ОборудованиеЧерезОЗК Тогда			
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеБюджета);			
			КонецЕсли;			
		КонецЕсли;
		
		
		Если (НЕ мРолиПользователя.найти(Справочники.РолиИсполнителей.ДирККРвКТТК) = Неопределено И Не СогласованиеБезБП) ИЛИ (СогласованиеБезБП И МассивИсполнителей.Найти(мТекущийПользователь) <> Неопределено) Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации);
		КонецЕсли;
		
		Если НЕ СогласованиеБезБП Тогда 
			Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ЗЗвСтатусЗавершен) = Неопределено) ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)
				Тогда
				Список.Добавить(?(НЕ ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование, Перечисления.абсСтатусЗакупочногоЗаказа.Завершен, Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение));
			КонецЕсли;	
		Иначе
			Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ЗЗвСтатусЗавершен) = Неопределено) ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)
				Тогда
				
				Если МассивИсполнителей.Найти(мТекущийПользователь) <> Неопределено Тогда
					Список.Добавить(?(НЕ ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование, Перечисления.абсСтатусЗакупочногоЗаказа.Завершен, Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение));
				КонецЕсли;
				
			КонецЕсли;	
		КонецЕсли;
		
		// АБС 19636 КОНЕЦ
		// АБС Изменение Родин Отключение бизнес-процессов 110314
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование Тогда
			//Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);  
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
		КонецЕсли;
		
		//Если НЕ мРолиПользователя.найти(Справочники.РолиИсполнителей.СогласованиеДТРвКТТК) = Неопределено Тогда
		//	Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
		//КонецЕсли;
		
		//БПСогласование = НайтиБПСогласование();
		//
		//Если НЕ БПСогласование = Неопределено Тогда
		//	
		//	Список.Добавить(БПСогласование.СтатусИзмененияСпецификации);
		
		//КонецЕсли;
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершение Тогда    //АБС-Пр2 11957 +
		
		Если Ответственный = мТекущийПользователь 
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)    
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
			
		КонецЕсли;   
		
		Если  (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)    
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершен);
			
		КонецЕсли; 		
		//АБС-Пр2- 
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершен Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ЗЗвСтатусЗавершен) = Неопределено) 
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение);
			
		КонецЕсли;
		//\\АБС ВСТАВКА №6830 КОНЕЦ
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)     //АБС-Пр2 11957 +
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
			
		КонецЕсли;   //АБС-Пр2- 
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор Тогда
		
		ДоговорыВИсполнении = Истина;
		ЕстьДоговорВПодготовке = Ложь;
		
		Для Каждого СтрокаДоговора Из Договоры Цикл
			
			Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
				Продолжить;
			КонецЕсли;
			
			//Родин лимиты по договорам
			ДоговорыВИсполнении = ДоговорыВИсполнении И 
			((СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ 
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка ИЛИ
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки) ИЛИ 
			(СтрокаДоговора.ДоговорКонтрагента = мТекущийДоговор И мДоговорСогласован));
			 //Родин лимиты по договорам

			ЕстьДоговорВПодготовке = ЕстьДоговорВПодготовке или 	
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка;
			
		КонецЦикла;
		
		Если (ОборудованиеЧерезОЗК ИЛИ ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ИнвестиционноеСтроительство)
			И Договоры.Количество() = 0 Тогда
			ДоговорыВИсполнении = Ложь;
		КонецЕсли;
		
		Если ДоговорыВИсполнении Тогда
			Если ЗначениеЗаполнено(мТекущийДоговор) ИЛИ 
				Ответственный = мТекущийПользователь Тогда				 
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
			КонецЕсли;
		КонецЕсли;
		
		//АБС ВСТАВКА №20697 НАЧАЛО
		Если ОборудованиеЧерезОЗК Тогда			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
		КонецЕсли;
		//\\АБС ВСТАВКА №20697 КОНЕЦ		
		
		//АБС ВСТАВКА 14877 НАЧАЛО 		
		Если ЕстьДоговорВПодготовке Тогда
			Если ЗначениеЗаполнено(мТекущийДоговор) ИЛИ 
				Ответственный = мТекущийПользователь Тогда 				 
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			КонецЕсли;  				
		КонецЕсли;	
		//\\АБС ВСТАВКА 14877 КОНЕЦ
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) или 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);                     			
		КонецЕсли;		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт Тогда
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Отменен Тогда
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросИзменений Тогда
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			
			ПодразделениеОФК = Константы.абс_ПодразделениеОФК.Получить();
			
			ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
			абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,Организация));	
			
			
			СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
			
			Если Не СогласованиеБезБП Тогда
				БПСогласование = НайтиБПСогласование();
				Если не БПСогласование = Неопределено Тогда
					текСтатусУточненияЗЗ = БПСогласование.СтатусУточненияЗЗ;
				Иначе	
					текСтатусУточненияЗЗ = СтатусУточненияЗЗ;	
				КонецЕсли; 					
			Иначе
				БПСогласование = Неопределено;   
				текСтатусУточненияЗЗ = СтатусУточненияЗЗ;
			КонецЕсли;
			
			Если (НЕ БПСогласование = Неопределено И Не СогласованиеБезБП) ИЛИ (СогласованиеБезБП И ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено) Тогда
				Список.Добавить(текСтатусУточненияЗЗ);
			КонецЕсли;
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УточненоДляОФК Тогда
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		
		ПодразделениеОФК = Константы.абс_ПодразделениеОФК.Получить();
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,Организация));	
		
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено И НЕ СогласованиеБезБП) ИЛИ (СогласованиеБезБП И ПользовательИсполнитель.Найти(мТекущийПользователь) <> Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			
		КонецЕсли;
		// АБС Изменение Родин Отключение бизнес-процессов 110314
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеБюджета Тогда
		
		Если Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ВозможноУточнениеИнициатором Тогда
		Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено Тогда
			ЭлементУточнить = Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			
			Если НЕ ЭлементУточнить = Неопределено Тогда
				Список.Удалить(ЭлементУточнить);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если ОборудованиеЧерезОЗК Тогда
		
		Для Каждого КлючИЗначение Из Список Цикл
			
			Если КлючИЗначение.Значение = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда
				
				КлючИЗначение.Значение = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеДТРвКТТК;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры
// } Сторчевой А.Н. 31.08.2016 7745861

Функция МожноПеревестиВИсполнение() Экспорт
	
	Если ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование Тогда
		Если (НЕ ОборудованиеЧерезОЗК И НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДирККР) = Неопределено) Тогда // АБС 19636
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ТМЦУслуги Тогда
		
		Возврат Ложь;
		
		//или ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.РБП 
		Если Ответственный = мТекущийПользователь Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникДК) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


//АБС ВСТАВКА КОНЕЦ

Функция КонтрольГрафикаОплат(ДатаОплаты, СуммаОплаты) Экспорт
	
	Если НефиксированнаяСумма или УбыткиПрошлыхЛет Тогда
		//Сторчевой А.Н. 28.11.2016 7759076 {
		//Включаем контроль лимитов если константа заполнена и дата документа больше
		//Возврат Истина;
		ttk_УчетБДРУбытковПрошлыхЛет = глЗначениеПеременной("ttk_УчетБДРУбытковПрошлыхЛет");
		Если НЕ (ЗначениеЗаполнено(ttk_УчетБДРУбытковПрошлыхЛет) и Дата>=ttk_УчетБДРУбытковПрошлыхЛет) Тогда
			Возврат Истина;
		КонецЕсли;
		// } Сторчевой А.Н. 28.11.2016 7759076		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОплатыПоГрафику.ВалютнаяСуммаСНДС КАК ВалютнаяСуммаПоГрафику,
	|	ОплатыПоГрафику.СуммаСНДС КАК СуммаПоГрафику,
	|	ЕСТЬNULL(ПроведенныеОплаты.ВалютнаяСумма, 0) КАК ВалютнаяСуммаОплат,
	|	ЕСТЬNULL(ПроведенныеОплаты.СуммаПлатежа, 0) КАК СуммаОплат
	|ИЗ
	|	(ВЫБРАТЬ
	|		абс_ЗакупочныйЗаказГрафикОплат.Период КАК Период,
	|		СУММА(абс_ЗакупочныйЗаказГрафикОплат.ВалютнаяСуммаСНДС) КАК ВалютнаяСуммаСНДС,
	|		СУММА(абс_ЗакупочныйЗаказГрафикОплат.СуммаСНДС) КАК СуммаСНДС
	|	ИЗ
	|		Документ.абс_ЗакупочныйЗаказ.ГрафикОплат КАК абс_ЗакупочныйЗаказГрафикОплат
	|	ГДЕ
	|		абс_ЗакупочныйЗаказГрафикОплат.Ссылка = &ЗЗСсылка
	|		И абс_ЗакупочныйЗаказГрафикОплат.Период = &ПериодОплаты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		абс_ЗакупочныйЗаказГрафикОплат.Период) КАК ОплатыПоГрафику
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(абс_СчетНаОплату.СуммаПлатежа) КАК СуммаПлатежа,
	|			СУММА(абс_СчетНаОплату.ВалютнаяСумма) КАК ВалютнаяСумма,
	|			НАЧАЛОПЕРИОДА(абс_СчетНаОплату.ДатаПлатежа, МЕСЯЦ) КАК ПериодОплаты
	|		ИЗ
	|			Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|		ГДЕ
	|			абс_СчетНаОплату.Проведен = ИСТИНА
	|			И НАЧАЛОПЕРИОДА(абс_СчетНаОплату.ДатаПлатежа, МЕСЯЦ) = &ПериодОплаты
	|			И абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗЗСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НАЧАЛОПЕРИОДА(абс_СчетНаОплату.ДатаПлатежа, МЕСЯЦ)) КАК ПроведенныеОплаты
	|		ПО ОплатыПоГрафику.Период = ПроведенныеОплаты.ПериодОплаты");
	
	Запрос.УстановитьПараметр("ЗЗСсылка"	, Ссылка);
	Запрос.УстановитьПараметр("ПериодОплаты", НачалоМесяца(ДатаОплаты));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОплатаОк = Ложь;
	
	ОстатокПоГрафику = 0;
	
	Если Выборка.Следующий() Тогда
		
		ОстатокПоГрафику = Выборка.СуммаПоГрафику - Выборка.СуммаОплат;
		
	КонецЕсли;
	
	Если ОстатокПоГрафику - СуммаОплаты >= 0 Тогда
		ОплатаОк = Истина;
	КонецЕсли;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если НЕ ОплатаОк Тогда
		Сообщить("Оплата на " + Формат(ДатаОплаты, "ДФ=ММММ") + " " + Формат(ГодОплат, "ДФ=гггг") + " превышает график оплат: 
		|	Остаток по графику: " + Формат(ОстатокПоГрафику, "ЧРД=.; ЧРГ=' '") + " " + Строка(ВалютаРегл) + " 
		|	Сумма проведенных счетов на оплату: " + Формат(СуммаОплаты, "ЧРД=.; ЧРГ=' '") + " " + Строка(ВалютаРегл) + ".");
	КонецЕсли;
	
	Возврат ОплатаОк;
	
КонецФункции

Функция КонтрольГрафикаПоставок(ДатаОплаты, СуммаОплаты, ВалютаПоставки) Экспорт
	
	Возврат Истина;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОплатыПоГрафику.ВалютнаяСуммаСНДС КАК ВалютнаяСуммаПоГрафику,
	|	ОплатыПоГрафику.СуммаСНДС КАК СуммаПоГрафику,
	|	ЕСТЬNULL(ПроведенныеОплаты.ВалютнаяСумма, 0) КАК ВалютнаяСуммаОплат,
	|	ЕСТЬNULL(ПроведенныеОплаты.СуммаПлатежа, 0) КАК СуммаОплат
	|ИЗ
	|	(ВЫБРАТЬ
	|		абс_ЗакупочныйЗаказГрафикОплат.Период КАК Период,
	|		СУММА(абс_ЗакупочныйЗаказГрафикОплат.ВалютнаяСуммаСНДС) КАК ВалютнаяСуммаСНДС,
	|		СУММА(абс_ЗакупочныйЗаказГрафикОплат.СуммаСНДС) КАК СуммаСНДС
	|	ИЗ
	|		Документ.абс_ЗакупочныйЗаказ.ГрафикОплат КАК абс_ЗакупочныйЗаказГрафикОплат
	|	ГДЕ
	|		абс_ЗакупочныйЗаказГрафикОплат.Ссылка = &ЗЗСсылка
	|		И абс_ЗакупочныйЗаказГрафикОплат.Период = &ПериодОплаты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		абс_ЗакупочныйЗаказГрафикОплат.Период) КАК ОплатыПоГрафику
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(абс_СчетНаОплату.СуммаПлатежа) КАК СуммаПлатежа,
	|			СУММА(абс_СчетНаОплату.ВалютнаяСумма) КАК ВалютнаяСумма,
	|			НАЧАЛОПЕРИОДА(абс_СчетНаОплату.ДатаПлатежа, МЕСЯЦ) КАК ПериодОплаты
	|		ИЗ
	|			Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|		ГДЕ
	|			абс_СчетНаОплату.Проведен = ИСТИНА
	|			И НАЧАЛОПЕРИОДА(абс_СчетНаОплату.ДатаПлатежа, МЕСЯЦ) = &ПериодОплаты
	|			И абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗЗСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НАЧАЛОПЕРИОДА(абс_СчетНаОплату.ДатаПлатежа, МЕСЯЦ)) КАК ПроведенныеОплаты
	|		ПО ОплатыПоГрафику.Период = ПроведенныеОплаты.ПериодОплаты");
	
	Запрос.УстановитьПараметр("ЗЗСсылка"	, Ссылка);
	Запрос.УстановитьПараметр("ПериодОплаты", НачалоМесяца(ДатаОплаты));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОплатаОк = Ложь;
	
	ОстатокПоГрафику = 0;
	
	Если Выборка.Следующий() Тогда
		
		ОстатокПоГрафику = Выборка.СуммаПоГрафику - Выборка.СуммаОплат;
		
	КонецЕсли;
	
	Если ОстатокПоГрафику - СуммаОплаты >= 0 Тогда
		ОплатаОк = Истина;
	КонецЕсли;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если НЕ ОплатаОк Тогда
		Сообщить("Оплата на " + Формат(ДатаОплаты, "ДФ=ММММ") + " " + Формат(ГодОплат, "ДФ=гггг") + " превышает график оплат: 
		|	Остаток по графику: " + Формат(ОстатокПоГрафику, "ЧРД=.; ЧРГ=' '") + " " + Строка(ВалютаРегл) + " 
		|	Сумма проведенных счетов на оплату: " + Формат(СуммаОплаты, "ЧРД=.; ЧРГ=' '") + " " + Строка(ВалютаРегл) + ".");
	КонецЕсли;
	
	Возврат ОплатаОк;
	
КонецФункции

Функция КонтрольСуммГрафика(СуммаОсновная, СуммаКонтролируемая, ПроцентКонтроля) Экспорт
	
	// Контроль по проценту
	РазностьСумм = Окр(СуммаОсновная) - Окр(СуммаКонтролируемая);
	
	Если РазностьСумм < 0 Тогда
		РазностьСумм = - РазностьСумм;
	КонецЕсли;
	
	Возврат РазностьСумм<=1;
	
	// Контроль до целового с округлением вверх
	//Возврат НЕ Окр(СуммаКонтролируемая) > Окр(СуммаОсновная + 0.5);
	
КонецФункции

Функция ПолучитьВидДеятельностиПоЦФУ(ЦФУ) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	абс_ЦФУ.Ссылка КАК ЦФУ,
	|	абс_ВидыДеятельностиКТТК.Ссылка КАК ВидДеятельности
	|ИЗ
	|	Справочник.абс_ЦФУ КАК абс_ЦФУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.абс_ВидыДеятельностиКТТК КАК абс_ВидыДеятельностиКТТК
	|		ПО абс_ЦФУ.Наименование = абс_ВидыДеятельностиКТТК.Наименование
	|ГДЕ
	|	абс_ЦФУ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЦФУ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.ВидДеятельности) Тогда
		Возврат Выборка.ВидДеятельности;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Функция создает договор в случае отсутствия
//
Функция СформироватьДоговор(СтруктураВыбора) Экспорт
	
	ДоговорКонтрагента = СтруктураВыбора.ДоговорКонтрагента;
	ТипДоговора        = СтруктураВыбора.ТипДоговора;
	ВходящийНомер      = СтруктураВыбора.ВходящийНомер;
	ВалютаДоговора     = СтруктураВыбора.ВалютаДоговора;
	ДатаДоговора       = СтруктураВыбора.ДатаДоговора;
	
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ТипДоговора<>Перечисления.абс_ТипыДоговоров.Договор 
			И Не КонсолидированныйЗЗПоОЗК Тогда
			
			//АБС №3657 ВСТАВКА НАЧАЛО
			ИмяПоискаНаименования = ""+ТипДоговора+" № "+ВходящийНомер;
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                      |	ДоговорыКонтрагентов.Ссылка
			                      |ИЗ
			                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			                      |ГДЕ
			                      |	ДоговорыКонтрагентов.Владелец = &Контрагент
			                      |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
			                      |	И НЕ ДоговорыКонтрагентов.ЭтоГруппа
			                      |	И ДоговорыКонтрагентов.Наименование ПОДОБНО &Наименование
			                      |	И ГОД(ДоговорыКонтрагентов.Дата) = ГОД(&ГодДоговора)");
			Запрос.УстановитьПараметр("Контрагент",Контрагент);
			Запрос.УстановитьПараметр("Наименование",ИмяПоискаНаименования);
			//АБС ВСТАВКА №31856 НАЧАЛО «3 марта 2015 г.», Пополитов
   	        Запрос.УстановитьПараметр("ГодДоговора",?(ЗначениеЗаполнено(ГодОплат),ГодОплат,ГодПоставок));
   			//\\АБС ВСТАВКА №31856 КОНЕЦ  	
			
			НайденнаяСсылка = Запрос.Выполнить().Выбрать();
			Если НайденнаяСсылка.Следующий() Тогда
				
				НеобходимоПерезаписатьЗЗ = Ложь;
				
				СтруктураОтбора = Новый Структура("ТипДоговора,ВходящийНомер,ВалютаДоговора,ДатаДоговора");
				СтруктураОтбора.Вставить("ТипДоговора"		, ТипДоговора);
				СтруктураОтбора.Вставить("ВходящийНомер"	, ВходящийНомер);
				СтруктураОтбора.Вставить("ВалютаДоговора"	, ВалютаДоговора);
				СтруктураОтбора.Вставить("ДатаДоговора"	    , ДатаДоговора);
				
				МассивСтрок = Договоры.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрок.Количество()>0 Тогда
					НеобходимоПерезаписатьЗЗ = Истина;
					МассивСтрок[0].ДоговорКонтрагента = НайденнаяСсылка.Ссылка;
					мДоговоры	= Договоры.Выгрузить();
				КонецЕсли;
				
				Если НеобходимоПерезаписатьЗЗ Тогда
					Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				
				ДоговорКонтрагента = НайденнаяСсылка.Ссылка;     				
				
				Возврат ДоговорКонтрагента;
				
			КонецЕсли;				
			//\\АБС №3657 ВСТАВКА КОНЕЦ  			
			
			НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговор.Владелец = Контрагент;
			НовыйДоговор.абс_ВидДоговора=Справочники.абс_ПредметДоговораГК.БезДоговора;
			НовыйДоговор.абс_ТипДоговора = Перечисления.абсТипыДоговоров.Договор;
			НовыйДоговор.Номер = ""+ТипДоговора+" "+?(ЗначениеЗаполнено(ВходящийНомер),ВходящийНомер,"");
			НовыйДоговор.Дата = ?(ЗначениеЗаполнено(ДатаДоговора),ДатаДоговора,'00010101');
			Если ЗначениеЗаполнено(ТипДоговора) Тогда
				НовыйДоговор.абс_ТипДоговора = ТипДоговора;
			КонецЕсли;	
			НовыйДоговор.Организация = Организация;
			НовыйДоговор.Наименование = ""+ТипДоговора+" № "+ВходящийНомер;
			НовыйДоговор.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Исполнение;
			НовыйДоговор.абс_Ответственный =глЗначениеПеременной("ГлТекущийПользователь");
			
			//АБС ВСТАВКА №7047 НАЧАЛО
			перемВедениеВзаиморасчетов = ВедениеВзаиморасчетовПоУмолчанию(Организация);
			Если перемВедениеВзаиморасчетов = Неопределено 
				или перемВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка() Тогда
				перемВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;	
			КонецЕсли;	
			//АБС ВСТАВКА №7047 КОНЕЦ
			
			НовыйДоговор.ВедениеВзаиморасчетов=перемВедениеВзаиморасчетов;
			НовыйДоговор.ВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(ВалютаДоговора),ВалютаДоговора,мВалютаРегламентированногоУчета);
			НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			
			//АБС+ Тупиков 20.11.2012
			НовыйДоговор.РасчетыВУсловныхЕдиницах = ?(НовыйДоговор.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета И НЕ Контрагент.абс_ТипыКонтрагентов.НеЯвляетсяРезидентом, Истина, Ложь);
			//АБС- Тупиков
			
			НовыйДоговор.абс_ВидДеятельности = ПолучитьВидДеятельностиПоЦФУ(ЦФУ);
			
			
			//Трансфертное ценообразование Родин
			Если НовыйДоговор.Владелец.ИНН = "7708503727" Тогда 
				ПараметрыТЦО = СтруктураВыбора.ПараметрыТЦО;
				НовыйДоговор.абс_КодНаименованияСделки                                  = ПараметрыТЦО.абс_КодНаименованияСделки;
				НовыйДоговор.абс_КодОснованияОтнесенияСделкиККонтролируемой             = ПараметрыТЦО.абс_КодОснованияОтнесенияСделкиККонтролируемой;
				НовыйДоговор.абс_КодПредметаСделкиОКВЭД                                 = ПараметрыТЦО.абс_КодПредметаСделкиОКВЭД;
				НовыйДоговор.абс_КодПредметаСделкиОКП                                   = ПараметрыТЦО.абс_КодПредметаСделкиОКП;
				НовыйДоговор.абс_КодПредметаСделкиТНВЭД                                 = ПараметрыТЦО.абс_КодПредметаСделкиТНВЭД;
				НовыйДоговор.абс_КодСтороныСделки                                       = ПараметрыТЦО.абс_КодСтороныСделки;
				НовыйДоговор.абс_КодСтраныПроисхожденияПредметаСделкиОКСМ               = ПараметрыТЦО.абс_КодСтраныПроисхожденияПредметаСделкиОКСМ;
				НовыйДоговор.абс_КоличествоУчастниковСделки                             = ПараметрыТЦО.абс_КоличествоУчастниковСделки;
				НовыйДоговор.абс_НаименованиеПредметаСделки                             = ПараметрыТЦО.абс_НаименованиеПредметаСделки;
				НовыйДоговор.абс_ОсобенностиОтнесенияСделкиККонтролируемой              = ПараметрыТЦО.абс_ОсобенностиОтнесенияСделкиККонтролируемой;
				НовыйДоговор.абс_ОтноситсяКГруппеОднородныхСделок                       = ПараметрыТЦО.абс_ОтноситсяКГруппеОднородныхСделок;
				НовыйДоговор.абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования     = ПараметрыТЦО.абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования;
				НовыйДоговор.абс_СпособОпределенияЦенКонтролируемыхСделок               = ПараметрыТЦО.абс_СпособОпределенияЦенКонтролируемыхСделок;
				НовыйДоговор.абс_ТипПредметаСделки                                      = ПараметрыТЦО.абс_ТипПредметаСделки;
			КонецЕсли;
			//Трансфертное ценообразование Родин
			
			
			//Если КонсолидированныйЗЗПоОЗК Тогда //АБС Коломиец
			//	НовыйДоговор.абс_ВидДоговора=Справочники.абс_ПредметДоговораГК.ДоговорПодрядаПоИСзаДЗО;
			//	НовыйДоговор.абс_ТипДоговора = Перечисления.абсТипыДоговоров.ДоговорТрехсторонний;
			//	НовыйДоговор.Наименование = ""+Перечисления.абсТипыДоговоров.ДоговорТрехсторонний+" № "+ВходящийНомер;				
			//	Филиалы = Новый ТаблицаЗначений;
			//	Филиалы.Колонки.Добавить("Филиал");
			//	Для Каждого ЗЗОЗК Из ЗакупочныеЗаказыОЗК Цикл
			//		Стр = Филиалы.Добавить();
			//		Стр.Филиал = ЗЗОЗК.ЗакупочныйЗаказ.Организация;
			//	КонецЦикла;
			//	Филиалы.Свернуть("Филиал");
			//	НовыйДоговор.абс_Филиалы.Загрузить(Филиалы);
			//	НовыйДоговор.ОбменДанными.Загрузка = Истина;
			//	НовыйДоговор.Записать();
			//	НовыйДоговор.ОбменДанными.Загрузка = Ложь;
			//	НовыйДоговор.абс_АвтоматическиСоздаватьДоговораСФилиалами = Истина;				
			//КонецЕсли;
			
			//НовыйДоговор.ОбменДанными.Загрузка = Истина;
			Попытка
				
				НеобходимоПерезаписатьЗЗ = Ложь;
				
				НовыйДоговор.абс_ПричинаИзмененияСтатуса = "Автоматическое создание по документу " + Ссылка;
				
				НовыйДоговор.Записать();
				//
				СтруктураОтбора = Новый Структура("ТипДоговора,ВходящийНомер,ВалютаДоговора,ДатаДоговора");
				СтруктураОтбора.Вставить("ТипДоговора"		, ТипДоговора);
				СтруктураОтбора.Вставить("ВходящийНомер"	, ВходящийНомер);
				СтруктураОтбора.Вставить("ВалютаДоговора"	, ВалютаДоговора);
				СтруктураОтбора.Вставить("ДатаДоговора"	, ДатаДоговора);
				
				МассивСтрок = Договоры.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрок.Количество()>0 Тогда
					НеобходимоПерезаписатьЗЗ = Истина;
					МассивСтрок[0].ДоговорКонтрагента = НовыйДоговор.Ссылка;
					мДоговоры	= Договоры.Выгрузить();
				КонецЕсли;
				
				Если НеобходимоПерезаписатьЗЗ Тогда
					Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				
				ДоговорКонтрагента = НовыйДоговор.Ссылка;
				
			Исключение
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при создании служебного договора. " + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	Возврат ДоговорКонтрагента;
КонецФункции

//АБС ВСТАВКА №7047 НАЧАЛО
Функция ВедениеВзаиморасчетовПоУмолчанию(Знач перемОрганизация)
	
	ЗначПерем = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.ВедениеВзаиморасчетовПоДоговорам
	|ИЗ
	|	РегистрСведений.абс_ОсновныеЗначенияПоУмолчаниюВРазрезеОрганизация КАК Регистр
	|ГДЕ
	|	Регистр.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", перемОрганизация);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ЗначПерем = Результат.ВедениеВзаиморасчетовПоДоговорам;
	КонецЕсли;	
	
	Возврат ЗначПерем;
	
КонецФункции	
//\\АБС ВСТАВКА №7047 КОНЕЦ

Функция ПостроитьСтруктуруАналитик() Экспорт
	
	СтруктураАналитик = НОВЫЙ Структура;
	СтруктураАналитик.Вставить("Организация"		, Организация);
	СтруктураАналитик.Вставить("ЦФУ"			, ЦФУ);
	СтруктураАналитик.Вставить("ЦФО"			, ЦФО);
	//СтруктураАналитик.Вставить("ТипРасхода"		, ТипРасхода);
	СтруктураАналитик.Вставить("ТипКонтрагента"	, Справочники.абс_ТипыКонтрагентов.ПустаяСсылка());
	//Сторчевой А.Н. НФС 2018//СтруктураАналитик.Вставить("ТипСети"		, ТипСети);
	СтруктураАналитик.Вставить("КВ"				, Справочники.абс_КапитальныеВложения.ПустаяСсылка());
	СтруктураАналитик.Вставить("ТЭО"			, ТЭО);
	СтруктураАналитик.Вставить("СтатьяОборотов"		,БюджетнаяСтатья);
	СтруктураАналитик.Вставить("ОбъектБюджетирования"		,Неопределено);
	
	//абс_Стрельцов+ добавлено: 17.09.2012
	//при переносе ПУ
	абс_ВременнаяКонстантаВеденияПроектногоУчета = Ложь;  										//изменено: 03.10.2012
	Если абс_ВременнаяКонстантаВеденияПроектногоУчета Тогда //мПроведениеПоМеханизмуПроектногоУчета Тогда    //изменено: 03.10.2012
		
		//АБС НАЧАЛО Задача №08759	
		ТЗДолиПоПроектам = РаспределениеПоПроектам.Выгрузить();
		Если ТЗДолиПоПроектам.Количество()=0 Тогда 
			н = ТЗДолиПоПроектам.Добавить();
			н.ДоляРаспределения = Товары.Итог("СуммаБезНДС");
		КонецЕсли;
		
		СписокГрупп = Новый СписокЗначений;
		Для Каждого СтрокаПроекта Из ТЗДолиПоПроектам Цикл
			
			СписокГрупп.Добавить(СтрокаПроекта.Проект);
			ПолучитьВсехРодителейПроекта(СтрокаПроекта.Проект, СписокГрупп);
			СтруктураАналитик.Вставить("Проект", СписокГрупп);
			
		КонецЦикла;
		//\\АБС КОНЕЦ Задача №08759
		//Иначе
		//	СтруктураАналитик.Вставить("Проект", Проект);
	КонецЕСли;
	//
	//абс_Стрельцов-
	
	СтруктураАналитик.Вставить("НачалоПериода"		, НачалоГода(ГодПоставок));
	СтруктураАналитик.Вставить("КонецПериода"		, КонецГода(ГодПоставок));
	
	Возврат СтруктураАналитик;
КонецФункции

Функция ПостроитьЗапросПоОстаткам(СтруктураПолей,Валюта,ТолькоИнформацияОНаличииЛимита = Ложь) Экспорт
	
	Если Валюта =мВалютаРегламентированногоУчета Тогда
		РесурсПлан = "СуммаУпрОборот";
		РесурсЛимитКонтроль = "СуммаСценарияКонтрольОборот";
		РесурсЛимитИсполнение = "СуммаСценарияИсполнениеОборот";
	Иначе
		РесурсПлан = "ВалютнаяСуммаОборот";
		РесурсЛимитКонтроль = "СуммаСценарияКонтрольВалОборот";
		РесурсЛимитИсполнение = "СуммаСценарияИсполнениеВалОборот";		
	КонецЕсли;
	
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьЛимит",Ложь);
	ТаблицаЛимитов = Новый ТаблицаЗначений;
	Результат.Вставить("ТаблицаЛимитов",ТаблицаЛимитов);
	Результат.Вставить("СуммаПлан",0);
	Результат.Вставить("СуммаЛимита",0);
	Результат.Вставить("СуммаОстатокЛимита",0);
	
	
	СтруктураАналитик = НОВЫЙ Структура;
	СтруктураАналитик.Вставить("Организация"		, СтруктураПолей.Организация);
	СтруктураАналитик.Вставить("абс_ЦФУ"			, СтруктураПолей.абс_ЦФУ);
	СтруктураАналитик.Вставить("ЦФО"				, СтруктураПолей.абс_ЦФО);
	СтруктураАналитик.Вставить("абс_ТипРасхода"		, СтруктураПолей.абс_ТипРасхода);
	СтруктураАналитик.Вставить("абс_ТипКонтрагента"	, СтруктураПолей.абс_ТипКонтрагента);
	СтруктураАналитик.Вставить("абс_ТипСети"		, СтруктураПолей.абс_ТипСети);
	СтруктураАналитик.Вставить("абс_КВ"				, СтруктураПолей.абс_КВ);
	СтруктураАналитик.Вставить("абс_ТЭО"			, СтруктураПолей.абс_ТЭО);
	СтруктураАналитик.Вставить("СтатьяОборотов"		, СтруктураПолей.СтатьяОборотов);
	
	//АБС НАЧАЛО Задача №08759
	Если СтруктураПолей.Свойство("Проект") Тогда
		СтруктураАналитик.Вставить("Проект"				, СтруктураПолей.Проект);
	КонецЕСли;
	//\\АБС КОНЕЦ Задача №08759
	
	Запрос = Новый Запрос;
	
	СтрокаОтбора = "";
	Для каждого ЭлементСтруктуры из СтруктураАналитик Цикл
		Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
			//АБС НАЧАЛО Задача №08759
			//УсловиеОтбора = УсловиеОтбора+" И "+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ;
			Если ЭлементСтруктуры.Ключ = "Проект" Тогда
				УсловиеОтбора = УсловиеОтбора+" И "+ЭлементСтруктуры.Ключ+" В(&"+ЭлементСтруктуры.Ключ+")";	
			Иначе
				УсловиеОтбора = УсловиеОтбора+" И "+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ;	
			КонецЕсли;
			//\\АБС КОНЕЦ Задача №08759
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
		КонецЕсли;
		
	КонецЦикла;
	СтрокаОтбора = Сред(СтрокаОтбора,3);
	
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:26:19  Поставка
	Запрос.УстановитьПараметр("Сценарий",глЗначениеПеременной("абс_СценарийДляЗЗ"));
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
	Если Не ЗначениеЗаполнено(СтруктураПолей.ПериодМесяц) Тогда
		СтруктураПолей.ПериодМесяц = Дата;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(СтруктураПолей.ПериодМесяц));
	Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(СтруктураПолей.ПериодМесяц));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.СтатьяОборотов,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.ЦФО,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипКонтрагента КАК ТипКонтрагента,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипСети КАК ТипСети,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_КВ КАК КВ,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТЭО КАК ТЭО,
	//АБС НАЧАЛО Задача №08759
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.Проект КАК Проект,
	//\\АБС КОНЕЦ Задача №08759
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ЦФУ КАК ЦФУ,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипРасхода КАК ТипРасхода,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.Организация
	|ИЗ
	|	РегистрСведений.абс_УстановкаЛимитовПоСтатьям.СрезПоследних(&ДатаКон,"+СтрокаОтбора+" ) КАК абс_УстановкаЛимитовПоСтатьямСрезПоследних";
	//"+СтрокаОтбора+"
	ТаблицаЛимитов = Запрос.Выполнить().Выгрузить();
	Если ТаблицаЛимитов.Количество()>0 Тогда
		Результат.ЕстьЛимит = истина;
		Результат.ТаблицаЛимитов = ТаблицаЛимитов.Скопировать();
		
	Иначе
		Результат.ЕстьЛимит = Ложь;
	КонецЕсли;
	
	Если ТолькоИнформацияОНаличииЛимита Тогда
		возврат Результат;
	КонецЕсли;
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЕСТЬNULL(ОборотыБюджетов."+РесурсПлан+", 0)) КАК СуммаПлан,
	|	ОборотыБюджетов.Сценарий
	|ИЗ
	|	РегистрНакопления.ОборотыБюджетов.Обороты(&ДатаНач, &ДатаКон, , "+СтрокаОтбора+") КАК ОборотыБюджетов
	|ГДЕ
	|	ОборотыБюджетов.Сценарий = &Сценарий
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыБюджетов.Сценарий";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.СуммаПлан = Выборка.СуммаПлан;
	Иначе
		Результат.СуммаПлан = 0;
	КонецЕсли;
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЕСТЬNULL(ОборотыБюджетов."+РесурсЛимитКонтроль+", 0)) КАК СуммаЛимита,
	|	СУММА(ЕСТЬNULL(ОборотыБюджетов."+РесурсЛимитИсполнение+", 0)) КАК СуммаЛимитаИсполнение,
	|	ОборотыБюджетов.Сценарий
	|ИЗ
	|	РегистрНакопления.КонтролируемыеЗначенияБюджетов.Обороты(&ДатаНач, &ДатаКон, , "+СтрокаОтбора+") КАК ОборотыБюджетов
	|ГДЕ
	|	ОборотыБюджетов.Сценарий = &Сценарий
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыБюджетов.Сценарий";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.СуммаЛимита = Выборка.СуммаЛимита;
		Результат.СуммаОстатокЛимита = Выборка.СуммаЛимита - Выборка.СуммаЛимитаИсполнение;
	Иначе
		Результат.СуммаЛимита = 0;
		Результат.СуммаОстатокЛимита = 0;
		
	КонецЕсли;
	возврат Результат;
КонецФункции

Процедура ПодсчетИтогов(ТабличнаяЧасть,ТабличнаяЧастьИсточник,Число) Экспорт
	
	// 1. Возьмем итоговую сумму без НДС из табличной части спецификации, 
	// 2. Возьмем ставку НДС из шапки документа
	// 3. Пересчитаем итог по графику относительно п.1 по ставки п.2
	
	Если ТабличнаяЧасть.Количество() >= Число + 1 Тогда
		
		СтрокаТЧ = ТабличнаяЧасть[Число];   		
		СтрокаТЧ.ВалютнаяСуммаБезНДС 	= ТабличнаяЧастьИсточник.Итог("ВалютнаясуммаБезНДС");
		//СтрокаТЧ.ВалютнаяСуммаНДС 	= ТабличнаяЧастьИсточник.Итог("ВалютнаяСуммаНДС");
		СтрокаТЧ.ВалютнаяСуммаСНДС 		= ТабличнаяЧастьИсточник.Итог("ВалютнаяСуммаСНДС");
		СтрокаТЧ.ВалютнаяСуммаНДС		= СтрокаТЧ.ВалютнаяСуммаСНДС - СтрокаТЧ.ВалютнаяСуммаБезНДС;					
		СтрокаТЧ.СуммаБезНДС 			= ТабличнаяЧастьИсточник.Итог("СуммаБезНДС");	
		//СтрокаТЧ.СуммаНДС 			= ТабличнаяЧастьИсточник.Итог("СуммаНДС");
		СтрокаТЧ.СуммаСНДС				= ТабличнаяЧастьИсточник.Итог("СуммаСНДС");
		СтрокаТЧ.СуммаНДС				= СтрокаТЧ.СуммаСНДС - СтрокаТЧ.СуммаБезНДС;		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВалютнаяСуммаБезНДСПриИзменении(Таблица,ИтогоКолонка,врИзмененГрафикОплат = Ложь) Экспорт
	 //ххх Брель Виктор Андреевич 20.04.2018 12:05:55, заявка <<<
	// 1. Пересчитываем итог по сумме без НДС.
	// 2. Данные по каждой строке считаем распределением
	
	//АБС+ Тупиков 22.11.2012
	ПодсчетИтогов(Таблица, Товары, ИтогоКолонка);
	//АБС-
	Для Н = 0 по ИтогоКолонка - 2 Цикл
	
		
		ПарметрОтбора = Новый   Структура;
		ПарметрОтбора.Вставить("ttk_ОбъектБюджетирования",Таблица[Н].ttk_ОбъектБюджетирования);
		ПарметрОтбора.Вставить("абс_ЦФУ",Таблица[Н].абс_ЦФУ);
		ПарметрОтбора.Вставить("абс_ТЭО",Таблица[Н].абс_ТЭО);
		ПарметрОтбора.Вставить("абс_КВ",Таблица[Н].абс_КВ);
		//ПарметрОтбора.Вставить("абс_ТипСети",Таблица[Н].абс_ТипСети);
		ПарметрОтбора.Вставить("СтатьяОборотов",Таблица[Н].СтатьяОборотов);
		
		НайденыеСтрокиТовары  = Товары.НайтиСтроки(ПарметрОтбора);
		
		НесколькоСтавкокНДС = Новый ТаблицаЗначений;
		НесколькоСтавкокНДС.Колонки.Добавить("НДС");
		Для Каждого ЭлементМассива Из НайденыеСтрокиТовары Цикл
			НоваяСтрока = НесколькоСтавкокНДС.Добавить();
			НоваяСтрока.НДС = ЭлементМассива.СтавкаНДС;
		КонецЦикла;
		НесколькоСтавкокНДС.Свернуть("НДС");
		Если 	НайденыеСтрокиТовары.Количество() = 0 ИЛИ НесколькоСтавкокНДС.Количество()>1 Тогда
			СтавкаНДСДокументаСтрока = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтавкаНДСДокументаСтрока = НайденыеСтрокиТовары[0].СтавкаНДС;
		КонецЕсли;
		ПроцентНДССтрока = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСДокументаСтрока);  		
		Таблица[Н].ВалютнаяСуммаНДС 		= Окр(Таблица[Н].ВалютнаяСуммаБезНДС / 100 * ПроцентНДССтрока, 2);		
		Таблица[Н].ВалютнаяСуммаСНДС 		= Таблица[Н].ВалютнаяСуммаБезНДС + Таблица[Н].ВалютнаяСуммаНДС; 		
		// Пересчитаем по валюте
		Таблица[Н].СуммаБезНДС = МодульВалютногоУчета.ПересчитатьВСуммуРегл(
		Таблица[Н].ВалютнаяСуммаБезНДС, мВалютаРегламентированногоУчета, ВалютаДокумента, Дата); 		
		Таблица[Н].СуммаНДС 	= Окр(Таблица[Н].СуммаБезНДС / 100 * ПроцентНДССтрока, 2);
		Таблица[Н].СуммаСНДС	= Таблица[Н].СуммаБезНДС + Таблица[Н].СуммаНДС;
		
		
		
	КонецЦикла;
	СтрокаИтога = Таблица[ИтогоКолонка-1]; 	
	СтрокаИтога.ВалютнаяСуммаБезНДС = 0;  		
	СтрокаИтога.ВалютнаяСуммаСНДС =0;  	
	СтрокаИтога.ВалютнаяСуммаНДС =0;
	СтрокаИтога.СуммаБезНДС = 0;  		
	СтрокаИтога.СуммаНДС = 0;  		
	СтрокаИтога.СуммаСНДС = 0;  		
	
	Для Н = 0 по ИтогоКолонка - 2 Цикл
		
		СтрокаИтога.ВалютнаяСуммаБезНДС = СтрокаИтога.ВалютнаяСуммаБезНДС + Таблица[Н].ВалютнаяСуммаБезНДС;  		
		СтрокаИтога.ВалютнаяСуммаСНДС = СтрокаИтога.ВалютнаяСуммаСНДС + Таблица[Н].ВалютнаяСуммаСНДС;  		
		СтрокаИтога.ВалютнаяСуммаНДС = СтрокаИтога.ВалютнаяСуммаНДС + Таблица[Н].ВалютнаяСуммаНДС;  		
		СтрокаИтога.СуммаБезНДС = СтрокаИтога.СуммаБезНДС + Таблица[Н].СуммаБезНДС;  		
		СтрокаИтога.СуммаНДС = СтрокаИтога.СуммаНДС + Таблица[Н].СуммаНДС;  		
		СтрокаИтога.СуммаСНДС = СтрокаИтога.СуммаСНДС + Таблица[Н].СуммаСНДС;  		
		
	КонецЦикла;

	//
	//Для Н = 0 по ИтогоКолонка - 2 Цикл
	//	
	//	СтрокаИтога.ВалютнаяСуммаБезНДС = СтрокаИтога.ВалютнаяСуммаБезНДС + Таблица[Н].ВалютнаяСуммаБезНДС;  		
	//	МассивРаспределения.Добавить(Таблица[Н].ВалютнаяСуммаБезНДС);
	//	
	//КонецЦикла;
	//
	
	
	//
	//Если СтрокаИтога.ВалютнаяСуммаБезНДС = Таблица[ИтогоКолонка].ВалютнаяСуммаБезНДС Тогда
	//	
	//	СтрокаИтога.ВалютнаяСуммаНДС 	= Таблица[ИтогоКолонка].ВалютнаяСуммаНДС;
	//	СтрокаИтога.ВалютнаяСуммаСНДС	= Таблица[ИтогоКолонка].ВалютнаяСуммаСНДС;		
	//	СтрокаИтога.СуммаБезНДС			= Таблица[ИтогоКолонка].СуммаБезНДС;
	//	СтрокаИтога.СуммаНДС			= Таблица[ИтогоКолонка].СуммаНДС;
	//	СтрокаИтога.СуммаСНДС			= Таблица[ИтогоКолонка].СуммаСНДС;
	//	
	//Иначе
	//	
		//ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСДокумента);  		
		//СтрокаИтога.ВалютнаяСуммаНДС 		= Окр(СтрокаИтога.ВалютнаяСуммаБезНДС / 100 * ПроцентНДС, 2);		
		//СтрокаИтога.ВалютнаяСуммаСНДС 		= СтрокаИтога.ВалютнаяСуммаБезНДС + СтрокаИтога.ВалютнаяСуммаНДС; 		
		//// Пересчитаем по валюте
		//СтрокаИтога.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьВСуммуРегл(
		//СтрокаИтога.ВалютнаяСуммаБезНДС, мВалютаРегламентированногоУчета, ВалютаДокумента, Дата); 		
		//СтрокаИтога.СуммаНДС 	= Окр(СтрокаИтога.СуммаБезНДС / 100 * ПроцентНДС, 2);
		//СтрокаИтога.СуммаСНДС	= СтрокаИтога.СуммаБезНДС + СтрокаИтога.СуммаНДС;
	//	
	//КонецЕсли;
	
	//МассивВалютнаяСуммаНДС 	= ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаИтога.ВалютнаяСуммаНДС	, МассивРаспределения, 2);		
	//МассивВалютнаяСуммаСНДС = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаИтога.ВалютнаяСуммаСНДС, МассивРаспределения, 2);		
	//МассивСуммаБезНДС 		= ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаИтога.СуммаБезНДС		, МассивРаспределения, 2);		
	//МассивСуммаНДС 			= ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаИтога.СуммаНДС			, МассивРаспределения, 2);		
	//МассивСуммаСНДС 		= ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаИтога.СуммаСНДС		, МассивРаспределения, 2);			
	
	//Для Н = 0 по ИтогоКолонка - 2 Цикл
	//	Если НЕ МассивВалютнаяСуммаНДС = Неопределено Тогда
	//		Таблица[Н].ВалютнаяСуммаНДС 	= МассивВалютнаяСуммаНДС[Н];
	//	Иначе
	//		Таблица[Н].ВалютнаяСуммаНДС = 0;
	//	КонецЕсли;
	//	
	//	Если НЕ МассивВалютнаяСуммаСНДС = Неопределено Тогда
	//		Таблица[Н].ВалютнаяСуммаСНДС 	= МассивВалютнаяСуммаСНДС[Н];
	//	Иначе
	//		Таблица[Н].ВалютнаяСуммаСНДС = 0;
	//	КонецЕсли;
	//	
	//	Если НЕ МассивСуммаБезНДС = Неопределено Тогда
	//		Таблица[Н].СуммаБезНДС 			= МассивСуммаБезНДС[Н];
	//	Иначе
	//		Таблица[Н].СуммаБезНДС = 0;
	//	КонецЕсли;
	//	
	//	Если НЕ МассивСуммаНДС = Неопределено Тогда
	//		Таблица[Н].СуммаНДС 			= МассивСуммаНДС[Н];
	//	Иначе
	//		Таблица[Н].СуммаНДС = 0;
	//	КонецЕсли;
	//	
	//	Если НЕ МассивСуммаСНДС = Неопределено Тогда
	//		Таблица[Н].СуммаСНДС 			= МассивСуммаСНДС[Н];
	//	Иначе
	//		Таблица[Н].СуммаСНДС = 0;
	//	КонецЕсли;
	//	
	//КонецЦикла;
		 
	 // Брель Виктор Андреевич 20.04.2018 12:05:55 >>>
	 

	мИзмененГрафикОплат = врИзмененГрафикОплат; //АБС 4100
	
КонецПроцедуры

Процедура ПересчитатьГрафикПоставок() Экспорт
	
	ИтогоКолонкаПоставок = ?(СледГодПоставок,25,13);
	ВалютнаяСуммаБезНДСПриИзменении(ГрафикПоставок,ИтогоКолонкаПоставок);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если  НЕ (
		 //ххх Брель Виктор Андреевич 25.04.2018 19:01:09, заявка <<<
			Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка ИЛИ 
		//ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение
		//ИЛИ 
			 
		 // Брель Виктор Андреевич 25.04.2018 19:01:09 >>>
		Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ
		ИЛИ Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отменен) Тогда
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение документа.", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнитьСчетаВПоставках() //АБС Коломиец 4737+	
	
	Если мРедактированиеСчетаУчета Тогда
		
		//ТоварыДоИзменения = СтруктураЗЗДоИзмененияСпецификации.Получить().Товары;
		
		//найти измененные строки
		//тзНоменклатураДляИзменения = Новый ТаблицаЗначений;
		//тзНоменклатураДляИзменения.Колонки.Добавить("Номенклатура");
		//тзНоменклатураДляИзменения.Колонки.Добавить("СчетУчетаБУ");
		//
		//Для Каждого СтрТовары Из Товары Цикл
		//	
		//	Отбор = Новый Структура();
		//	Отбор.Вставить("Номенклатура", СтрТовары.Номенклатура);
		//	Отбор.Вставить("НомерСтроки",  СтрТовары.НомерСтроки);
		
		//	СтрокиТоварыДоИзменения = ТоварыДоИзменения.НайтиСтроки(Отбор);
		//	
		//	Для Каждого СтрТоварыДоИзменения Из СтрокиТоварыДоИзменения Цикл
		//		
		//		Если СтрТоварыДоИзменения.СчетУчетаБУ <> СтрТовары.СчетУчетаБУ Тогда
		//			
		//			НовСтр = тзНоменклатураДляИзменения.Добавить();
		//			НовСтр.Номенклатура = СтрТовары.Номенклатура;
		//			НовСтр.СчетУчетаБУ  = СтрТовары.СчетУчетаБУ;
		//				 
		//	КонецЕсли;
		//		
		//	КонецЦикла;
		//				
		//КонецЦикла;
		
		//найти документы для изменения		
		
		тзНоменклатураДляИзменения = Товары;
		
		Если тзНоменклатураДляИзменения.Количество() > 0 Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументПоставки
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
			|ГДЕ
			|	ПоступлениеТоваровУслуг.абс_ЗакупочныйЗаказ = &ЗакупочныйЗаказ
			|	И (НЕ ПоступлениеТоваровУслуг.абс_Статус В (&СтатусыПоставки))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	АвансовыйОтчет.Ссылка
			|ИЗ
			|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
			|ГДЕ
			|	АвансовыйОтчет.абс_ЗакупочныйЗаказ = &ЗакупочныйЗаказ
			|	И (НЕ АвансовыйОтчет.абс_Статус В (&СтатусыПоставки))");
			
			Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Ссылка);
			
			МассивСтатусовСчетов = Новый Массив();
			МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Исполнение);
			МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Утвержден);
			МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ГотовКОплате);
			МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
			МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
			МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Оплачен);
			
			Запрос.УстановитьПараметр("СтатусыСчета"		, МассивСтатусовСчетов);
			
			МассивСтатусовПоставки = Новый Массив();
			МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером); 
			МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК);
			МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
			МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен); 
			
			Запрос.УстановитьПараметр("СтатусыПоставки"     , МассивСтатусовПоставки);
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрРезультат Из Результат Цикл
				
				ДокПоставки = СтрРезультат.ДокументПоставки.ПолучитьОбъект();
				ПерезаполненСчет = Ложь;
				
				Для Каждого СтрНоменклатураДляИзменения Из тзНоменклатураДляИзменения Цикл
					
					Если  Не СтрНоменклатураДляИзменения.Номенклатура.Услуга
						И Не СтрНоменклатураДляИзменения.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
						
						Отбор = Новый Структура();
						Отбор.Вставить("Номенклатура", СтрНоменклатураДляИзменения.Номенклатура);
						
						//тч Товары
						СтрокиДокПоставкиДляИзменения = ДокПоставки.Товары.НайтиСтроки(Отбор);
						
						Для Каждого СтрДокПоставки Из СтрокиДокПоставкиДляИзменения Цикл
							
							Если СтрДокПоставки.СчетУчетаБУ <> СтрНоменклатураДляИзменения.СчетУчетаБУ Тогда
								СтрДокПоставки.СчетУчетаБУ = СтрНоменклатураДляИзменения.СчетУчетаБУ;
								СтрДокПоставки.СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрДокПоставки.СчетУчетаБУ));
								ПерезаполненСчет = Истина;
							КонецЕсли;
							
						КонецЦикла;
						
						//тч Оборудование
						Если ТипЗнч(ДокПоставки) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
							
							СтрокиДокПоставкиДляИзменения = ДокПоставки.Оборудование.НайтиСтроки(Отбор);
							
							Для Каждого СтрДокПоставки Из СтрокиДокПоставкиДляИзменения Цикл
								
								Если СтрДокПоставки.СчетУчетаБУ <> СтрНоменклатураДляИзменения.СчетУчетаБУ Тогда
									СтрДокПоставки.СчетУчетаБУ = СтрНоменклатураДляИзменения.СчетУчетаБУ;
									СтрДокПоставки.СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрДокПоставки.СчетУчетаБУ));
									ПерезаполненСчет = Истина;
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				Если ПерезаполненСчет Тогда
					Попытка 
						Если ДокПоставки.Проведен Тогда
							ДокПоставки.Записать(РежимЗаписиДокумента.Проведение);
						Иначе
							ДокПоставки.Записать();
						КонецЕсли;
						Сообщить("В документе " + Строка(ДокПоставки) + " установлены счета учета номенклатуры в соответствии с закупочным заказом.");
					Исключение
						Сообщить("Не удалось записать документ " + Строка(ДокПоставки) + ". Необходимо перезаполнить счета учета в соответствии с закупочным заказом.");
					КонецПопытки; 
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры//АБС Коломиец-

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)  //АБС-Пр2 10650
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)      //АБС-Пр2 10650
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ОбъектКопирования.Ссылка);
	//Сторчевой А.Н. 14.12.2016 7762029 {
	//Очищаем не нужные данные в реквизитах
	ЭтотОбъект.СтруктураЗЗДоИзмененияСпецификации = Неопределено;
	// } Сторчевой А.Н. 14.12.2016 7762029
КонецПроцедуры

Функция ВернутьСуммуПоЗЗ(ДокументПоставки) Экспорт
	
	ТипДокументаПоставки = ТипЗнч(ДокументПоставки);
	СуммаПоставки = 0;
	Если ТипДокументаПоставки = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		врСуммаВключаетНДС = ДокументПоставки.СуммаВключаетНДС;
		абс_ЗакупочныйЗаказ = ДокументПоставки.абс_ЗакупочныйЗаказ;
		
		Для Каждого СтрокаТЧ Из ДокументПоставки.Товары Цикл
			ЗакупочныйЗаказТЧ = ?(ЗначениеЗаполнено(СтрокаТЧ.абс_ЗакупочныйЗаказТЧ),СтрокаТЧ.абс_ЗакупочныйЗаказТЧ,абс_ЗакупочныйЗаказ);
			Если ЗакупочныйЗаказТЧ = Ссылка Тогда
				СуммаПоставки	   = СуммаПоставки + СтрокаТЧ.Сумма - ?(врСуммаВключаетНДС,СтрокаТЧ.СуммаНДС,0);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ДокументПоставки.Услуги Цикл
			ЗакупочныйЗаказТЧ = ?(ЗначениеЗаполнено(СтрокаТЧ.абс_ЗакупочныйЗаказТЧ),СтрокаТЧ.абс_ЗакупочныйЗаказТЧ,абс_ЗакупочныйЗаказ);
			
			Если ЗакупочныйЗаказТЧ = Ссылка Тогда
				СуммаПоставки	   = СуммаПоставки + СтрокаТЧ.Сумма - ?(врСуммаВключаетНДС,СтрокаТЧ.СуммаНДС,0);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ДокументПоставки.Оборудование Цикл
			ЗакупочныйЗаказТЧ = ?(ЗначениеЗаполнено(СтрокаТЧ.абс_ЗакупочныйЗаказТЧ),СтрокаТЧ.абс_ЗакупочныйЗаказТЧ,абс_ЗакупочныйЗаказ);
			Если ЗакупочныйЗаказТЧ = Ссылка Тогда
				СуммаПоставки	   = СуммаПоставки + СтрокаТЧ.Сумма - ?(врСуммаВключаетНДС,СтрокаТЧ.СуммаНДС,0);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ДокументПоставки.ОбъектыСтроительства Цикл
			ЗакупочныйЗаказТЧ = ?(ЗначениеЗаполнено(СтрокаТЧ.абс_ЗакупочныйЗаказТЧ),СтрокаТЧ.абс_ЗакупочныйЗаказТЧ,абс_ЗакупочныйЗаказ);
			Если ЗакупочныйЗаказТЧ = Ссылка Тогда
				СуммаПоставки	   = СуммаПоставки + СтрокаТЧ.Сумма - ?(врСуммаВключаетНДС,СтрокаТЧ.СуммаНДС,0);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипДокументаПоставки = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ЗапросНоменклатураБезЛимитов = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	абс_СписокНоменклатурыБезПроведенияПоЛимитам.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.абс_СписокНоменклатурыБезПроведенияПоЛимитам КАК абс_СписокНоменклатурыБезПроведенияПоЛимитам");
		
		МассивНоменклатурыБезЛимитов = ЗапросНоменклатураБезЛимитов.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
		
		врСуммаВключаетНДС = ДокументПоставки.СуммаВключаетНДС;
		абс_ЗакупочныйЗаказ = ДокументПоставки.абс_ЗакупочныйЗаказ;
		
		Для Каждого СтрокаТЧ Из ДокументПоставки.Товары Цикл 
			Если МассивНоменклатурыБезЛимитов.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
				ЗакупочныйЗаказТЧ = ?(ЗначениеЗаполнено(СтрокаТЧ.абс_ЗакупочныйЗаказТЧ),СтрокаТЧ.абс_ЗакупочныйЗаказТЧ,абс_ЗакупочныйЗаказ);
				Если ЗакупочныйЗаказТЧ = Ссылка Тогда
					СуммаПоставки	   = СуммаПоставки + СтрокаТЧ.Сумма - ?(врСуммаВключаетНДС,СтрокаТЧ.СуммаНДС,0);    
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ДокументПоставки.Прочее Цикл 
			Если МассивНоменклатурыБезЛимитов.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
				ЗакупочныйЗаказТЧ = ?(ЗначениеЗаполнено(СтрокаТЧ.абс_ЗакупочныйЗаказТЧ),СтрокаТЧ.абс_ЗакупочныйЗаказТЧ,абс_ЗакупочныйЗаказ);
				Если ЗакупочныйЗаказТЧ = Ссылка Тогда
					СуммаПоставки	   = СуммаПоставки + СтрокаТЧ.Сумма - ?(врСуммаВключаетНДС,СтрокаТЧ.СуммаНДС,0);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипДокументаПоставки = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		СуммаПоставки = ДокументПоставки.Сумма - ?(ДокументПоставки.СуммаВключаетНДС,ДокументПоставки.СуммаНДС,0);
		
		
	КонецЕсли; 
	Возврат Формат(СуммаПоставки,"ЧЦ=15; ЧДЦ=2");
	
КонецФункции

//АБС ВСТАВКА №15838 НАЧАЛО
Функция КонтрольАналитикПройден(Проверить = Ложь) Экспорт //Сторчевой А.Н. 14.12.2016 7762029 Добавил параметр "Проверить"
	
	//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:27:07  Поставка
	Если НЕ глЗначениеПеременной("абс_КонтрольАналитикВЗЗ") Тогда
		Возврат Истина;
	КонецЕсли;	
	//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 
	//АБС ВСТАВКА 49362  17.11.2014 20:26:14  Шамов
	Если Ссылка.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;	
	//АБС ВСТАВКА 49362 КОНЕЦ 
	//АБС ВСТАВКА 48294  01.10.2014 15:21:10  Шамов
	//Сторчевой А.Н. 14.12.2016 7762029 {
	//Если мКонтрольАналитикПройден <> Неопределено Тогда
	Если мКонтрольАналитикПройден <> Неопределено и Не Проверить Тогда
	// } Сторчевой А.Н. 14.12.2016 7762029
		Возврат мКонтрольАналитикПройден;
	КонецЕсли;
	//АБС ВСТАВКА 48294 КОНЕЦ
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_СчетНаОплату.Ссылка КАК ПодчиненныйДокумент
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|ГДЕ
	|	абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И (НЕ абс_СчетНаОплату.СтатусСчета В (&СтатусыСчета))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.абс_ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И (НЕ ПоступлениеТоваровУслуг.абс_Статус В (&СтатусыПоставки))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.абс_ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И (НЕ АвансовыйОтчет.абс_Статус В (&СтатусыПоставки))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И (НЕ ПоступлениеТоваровУслугУслуги.Ссылка.абс_Статус В (&СтатусыПоставки))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И (НЕ ПоступлениеТоваровУслугТовары.Ссылка.абс_Статус В (&СтатусыПоставки))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И (НЕ ПоступлениеТоваровУслугОборудование.Ссылка.абс_Статус В (&СтатусыПоставки))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
	|ГДЕ
	|	ПоступлениеТоваровУслугОбъектыСтроительства.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И (НЕ ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.абс_Статус В (&СтатусыПоставки))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетТовары.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И (НЕ АвансовыйОтчетТовары.Ссылка.абс_Статус В (&СтатусыПоставки))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетОплатаПоставщикам.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
	|ГДЕ
	|	АвансовыйОтчетОплатаПоставщикам.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И (НЕ АвансовыйОтчетОплатаПоставщикам.Ссылка.абс_Статус В (&СтатусыПоставки))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетПрочее.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	|ГДЕ
	|	АвансовыйОтчетПрочее.абс_ЗакупочныйЗаказТЧ = &ЗакупочныйЗаказ
	|	И (НЕ АвансовыйОтчетПрочее.Ссылка.абс_Статус В (&СтатусыПоставки))");
	
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Ссылка);
	
	МассивСтатусовСчетов = Новый Массив();
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Подготовка);	
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Отменен);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
	Запрос.УстановитьПараметр("СтатусыСчета", МассивСтатусовСчетов); 	
	МассивСтатусовПоставки = Новый Массив();
	МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
	МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отмена);
	МассивСтатусовПоставки.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
	Запрос.УстановитьПараметр("СтатусыПоставки", МассивСтатусовПоставки);
	
	//АБС ИЗМЕНЕНИЕ 48294  01.10.2014 15:21:39  Шамов
	//Возврат Запрос.Выполнить().Пустой();
	мКонтрольАналитикПройден = Запрос.Выполнить().Пустой();
	Возврат мКонтрольАналитикПройден;
	//АБС ИЗМЕНЕНИЕ 48294 КОНЕЦ	
	
КонецФункции
//\\АБС ВСТАВКА №15838 КОНЕЦ

//АБС ВСТАВКА №37749 НАЧАЛО «23 января 2014 г.», Пополитов
Процедура ИзменитьЗадачуПользователя(Знач СтарПользователь, Знач НовыйПользователь) Экспорт 
	
	БП = НайтиБПСогласование();
	Если БП = Неопределено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не завершённых бизнес-процессов по закупочному заказу не найдено! Возможны проблемы со сменой статусов.");
		Возврат;
	КонецЕсли;
	
	ТочкаМаршрута = Неопределено;
	
	СпТочек = Новый Массив;	
	Для Каждого ТекТочкаМаршрута Из БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута Цикл
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута[ТекТочкаМаршрута.Имя]);
	КонецЦикла;
	
	//Удаляем задачи по старому инициатору, заменять инициатора не стал, если задач нет, то потом проблемы со статусом
	ЗадачаСсылка = абс_БизнесПроцессы.НайтиЗадачуЗЗ(БП, СпТочек, СтарПользователь, Истина); 	
	Если не ЗадачаСсылка = Неопределено Тогда
		ТочкаМаршрута = ЗадачаСсылка.ТочкаМаршрута;
		СтараяЗадача = ЗадачаСсылка.ПолучитьОбъект();	
		СтараяЗадача.Исполнитель = НовыйПользователь;	
		СтараяЗадача.Записать();
		Возврат;
	КонецЕсли;	
	     	
	Если ТочкаМаршрута = Неопределено Тогда
		ЗадачаСсылка = абс_БизнесПроцессы.НайтиЗадачуЗЗ(БП, СпТочек, , Ложь); 	
		Если не ЗадачаСсылка = Неопределено Тогда
			ТочкаМаршрута = ЗадачаСсылка.ТочкаМаршрута;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ТочкаМаршрута = Неопределено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не завершённых задач по закупочному заказу не найдено! Возможны проблемы со сменой статусов.");
		Возврат;	
	КонецЕсли;
	
	//Создаём новую задачу по новому инициатору
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	НоваяЗадача.БизнесПроцесс 		= БП;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
	НоваяЗадача.Дата 				= абс_СерверныеФункции.ПолучитьДатуСервера();
	НоваяЗадача.Наименование 		= Строка(Ссылка) + ", изменение спецификации."; 	
	НоваяЗадача.Исполнитель			= НовыйПользователь;
	НоваяЗадача.ОбъектЗадачи 		= Ссылка;
	НоваяЗадача.ВидЗадачи 			= Справочники.ВидыЗадачПользователей.ЗакупочныйЗаказ;
	НоваяЗадача.ИнициаторБП			= БП.ПользовательИнициаторБП;	
	НоваяЗадача.Записать();
			
КонецПроцедуры	
//\\АБС ВСТАВКА №37749 КОНЕЦ

Процедура ПроверитьКонсолидированныеЗЗПоОЗК(Отказ) 
	
	ЗапросЗЗ = Новый Запрос();
	
	ЗапросЗЗ.Текст = 
	"ВЫБРАТЬ
	|	абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.ЗакупочныйЗаказ,
	|	абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.Ссылка
	|ИЗ
	|	Документ.абс_ЗакупочныйЗаказ.ЗакупочныеЗаказыОЗК КАК абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК
	|ГДЕ
	|	абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.Ссылка <> &Ссылка
	|	И абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.Ссылка.КонсолидированныйЗЗПоОЗК
	|	И (НЕ абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.Подготовка), ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.Отказ)))
	|	И абс_ЗакупочныйЗаказЗакупочныеЗаказыОЗК.ЗакупочныйЗаказ В(&СписокЗЗ)";
	
	ЗапросЗЗ.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросЗЗ.УстановитьПараметр("СписокЗЗ", ЗакупочныеЗаказыОЗК.ВыгрузитьКолонку("ЗакупочныйЗаказ"));
	
	Выборка = ЗапросЗЗ.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("По закупочным заказам уже введены консолидированные ЗЗ:", Отказ);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("ЗЗ " + Выборка.ЗакупочныйЗаказ + " уже выбран в консолидированном ЗЗ: " + Выборка.Ссылка);
		
	КонецЦикла;	
	
КонецПроцедуры

//Функция создает договор в случае отсутствия
//
Функция СформироватьДоговорОЗК(СтруктураВыбора) Экспорт
	
	ДоговорКонтрагента = СтруктураВыбора.ДоговорКонтрагента;
	ТипДоговора        = Перечисления.абсТипыДоговоров.Договор;
	ВходящийНомер      = СтруктураВыбора.ВходящийНомер;
	ВалютаДоговора     = СтруктураВыбора.ВалютаДоговора;
	ДатаДоговора       = СтруктураВыбора.ДатаДоговора;
	
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Владелец = Контрагент;
		НовыйДоговор.Номер = ВходящийНомер;//""+ТипДоговора+" "+?(ЗначениеЗаполнено(ВходящийНомер),ВходящийНомер,"");
		НовыйДоговор.Дата = ?(ЗначениеЗаполнено(ДатаДоговора),ДатаДоговора,'00010101');
		Если ЗначениеЗаполнено(ТипДоговора) Тогда
			НовыйДоговор.абс_ТипДоговора = ТипДоговора;
		КонецЕсли;	
		НовыйДоговор.Организация = Организация;
		НовыйДоговор.Наименование = ""+ТипДоговора+" № "+ВходящийНомер;
		НовыйДоговор.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Исполнение;
		НовыйДоговор.абс_Ответственный =глЗначениеПеременной("ГлТекущийПользователь");
		
		//АБС ВСТАВКА №7047 НАЧАЛО
		перемВедениеВзаиморасчетов = ВедениеВзаиморасчетовПоУмолчанию(Организация);
		Если перемВедениеВзаиморасчетов = Неопределено 
			или перемВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка() Тогда
			перемВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;	
		КонецЕсли;	
		//АБС ВСТАВКА №7047 КОНЕЦ
		
		НовыйДоговор.ВедениеВзаиморасчетов=перемВедениеВзаиморасчетов;
		НовыйДоговор.ВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(ВалютаДоговора),ВалютаДоговора,мВалютаРегламентированногоУчета);
		НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		
		//АБС+ Тупиков 20.11.2012
		НовыйДоговор.РасчетыВУсловныхЕдиницах = ?(НовыйДоговор.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета И НЕ Контрагент.абс_ТипыКонтрагентов.НеЯвляетсяРезидентом, Истина, Ложь);
		//АБС- Тупиков
		
		НовыйДоговор.абс_ВидДеятельности = ПолучитьВидДеятельностиПоЦФУ(ЦФУ);
		
		НовыйДоговор.абс_ВидДоговора=Справочники.абс_ПредметДоговораГК.ДоговорПодрядаПоИСзаДЗО;				
		Филиалы = Новый ТаблицаЗначений;
		Филиалы.Колонки.Добавить("Филиал");
		Для Каждого ЗЗОЗК Из ЗакупочныеЗаказыОЗК Цикл
			Стр = Филиалы.Добавить();
			Стр.Филиал = ЗЗОЗК.ЗакупочныйЗаказ.Организация;
		КонецЦикла;
		Филиалы.Свернуть("Филиал");
		НовыйДоговор.абс_Филиалы.Загрузить(Филиалы);
		НовыйДоговор.абс_АвтоматическиСоздаватьДоговораСФилиалами = Истина;				
		ФормаДоговора = НовыйДоговор.ПолучитьФорму("ФормаЭлемента").ОткрытьМодально();
		
		//ДоговорКонтрагента = НовыйДоговор.Ссылка;
		
	Иначе
		
		НовыйДоговор = СтруктураВыбора.ДоговорКонтрагента.ПолучитьОбъект();
		Филиалы = Новый ТаблицаЗначений;
		Филиалы.Колонки.Добавить("Филиал");
		Для Каждого ЗЗОЗК Из ЗакупочныеЗаказыОЗК Цикл
			Стр = Филиалы.Добавить();
			Стр.Филиал = ЗЗОЗК.ЗакупочныйЗаказ.Организация;
		КонецЦикла;
		Филиалы.Свернуть("Филиал");
		
		Для Каждого СтрФилиал Из Филиалы Цикл 
			Если НовыйДоговор.абс_Филиалы.Найти(СтрФилиал.Филиал, "Филиал") = Неопределено Тогда
				НовСтр = НовыйДоговор.абс_Филиалы.Добавить();
				НовСтр.Филиал = СтрФилиал.Филиал;
			КонецЕсли;
		КонецЦикла;
		//НовыйДоговор.абс_Филиалы.Загрузить(Филиалы);
		НовыйДоговор.абс_АвтоматическиСоздаватьДоговораСФилиалами = Истина;
		
		Попытка
			Записать();			
		Исключение
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи Закупочного заказа. " + ОписаниеОшибки());
		КонецПопытки;
		
		//Если НовыйДоговор.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение Тогда
		//	
		//	НовыйДоговор.обменданными.загрузка = истина;
		//	НовыйДоговор.Записать();
		//	НовыйДоговор.обменданными.загрузка = Ложь;
		//	
		//	ТабДоговоров = НовыйДоговор.абс_Филиалы.Выгрузить();
		//	
		//	СтруктураРеквизитовДоговора = Новый Структура;		
		//	
		//	МетаданныеДоговора = НовыйДоговор.Метаданные();
		//	
		//	Для Каждого Реквизит Из МетаданныеДоговора.Реквизиты Цикл
		//		СтруктураРеквизитовДоговора.Вставить(Реквизит.Имя, НовыйДоговор[Реквизит.Имя]);
		//	КонецЦикла;
		//	
		//	СтруктураРеквизитовДоговора.Вставить("Владелец", НовыйДоговор.Владелец);
		//	СтруктураРеквизитовДоговора.Вставить("Наименование", НовыйДоговор.Наименование);
		//	
		//	ЕстьОшибки = абс_БизнесПроцессыПривелегированный.ОбновитьСоздатьДоговорыСФилиалами(НовыйДоговор.Ссылка, СтруктураРеквизитовДоговора, ТабДоговоров);
		//	
		//	Если ЕстьОшибки Тогда
		//		ttk_ОбщегоНазначения.СообщитьОбОшибке("Создание договоров по филиалам произведено с ошибками.");
		//	КонецЕсли;
		//КонецЕсли;
		//ФормаДоговора = НовыйДоговор.ПолучитьФорму("ФормаЭлемента").ОткрытьМодально();		
		НовыйДоговор.Записать();
		
		//ДоговорКонтрагента = НовыйДоговор.Ссылка;
		
	КонецЕсли;
	
	Возврат ДоговорКонтрагента;
	
КонецФункции

Процедура КонтрольЛимитовОЗК(Отказ) Экспорт 
	
	Если УправлениеДопПравамиПользователей.РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Тогда
		возврат;
	КонецЕсли;
	
	Если УбыткиПрошлыхЛет Тогда
		//Сторчевой А.Н. 28.11.2016 7759076 {
		//Включаем контроль лимитов если константа заполнена и дата документа больше
		//Возврат;
		ttk_УчетБДРУбытковПрошлыхЛет = глЗначениеПеременной("ttk_УчетБДРУбытковПрошлыхЛет");
		Если НЕ (ЗначениеЗаполнено(ttk_УчетБДРУбытковПрошлыхЛет) и Дата>=ttk_УчетБДРУбытковПрошлыхЛет) Тогда
			Возврат;
		КонецЕсли;
		// } Сторчевой А.Н. 28.11.2016 7759076
	КонецЕсли;
	
	// {{ТТК Лапин А. Заявка Обнуление лимитов 27.10.2015 начало
	//	Если абс_Бюджетирование.ПоСтатьеРазрешеноПревышениеБюджета(БюджетнаяСтатья) Тогда
	Если абс_Бюджетирование.ПоСтатьеРазрешеноПревышениеБюджета(БюджетнаяСтатья, Организация) Тогда
	// }}ТТК Лапин А. Заявка № Обнуление лимитов 27.10.2015 окончание	
		возврат;
	КонецЕсли;
	
	Если КонсолидированныйЗЗПоОЗК Тогда
		Возврат;
	КонецЕсли;
	
	//абс_Стрельцов+ добавлено: 17.09.2012
	//доработки при переносе ПУ
	//---------------------------------------------
	абс_ВременнаяКонстантаВеденияПроектногоУчета = Ложь;  										//изменено: 03.10.2012
	Если абс_ВременнаяКонстантаВеденияПроектногоУчета Тогда //мПроведениеПоМеханизмуПроектногоУчета Тогда    //изменено: 03.10.2012
		
		//АБС НАЧАЛО Задача №08759
		
		ТЗДолиПоПроектам = РаспределениеПоПроектам.Выгрузить();
		Если ТЗДолиПоПроектам.Количество()=0 Тогда 
			н = ТЗДолиПоПроектам.Добавить();
			н.ДоляРаспределения = Товары.Итог("СуммаБезНДС");
		КонецЕсли;
		
		ИтогКоэфПоПроектам = ТЗДолиПоПроектам.Итог("ДоляРаспределения");
		
		//\\АБС КОНЕЦ Задача №08759
	Иначе
		СтруктураАналитик = НОВЫЙ Структура;
		СтруктураАналитик.Вставить("Организация",Организация);
		СтруктураАналитик.Вставить("абс_ЦФУ", ЦФУ);
		СтруктураАналитик.Вставить("ЦФО", ЦФО);
		СтруктураАналитик.Вставить("абс_ТипРасхода", ТипРасхода);
		СтруктураАналитик.Вставить("абс_ТипКонтрагента", ТипКонтрагента);
		СтруктураАналитик.Вставить("абс_ТипСети", ТипСети);
		СтруктураАналитик.Вставить("абс_КВ",КВ);
		СтруктураАналитик.Вставить("абс_ТЭО", ТЭО);
		СтруктураАналитик.Вставить("СтатьяОборотов", БюджетнаяСтатья);
	КонецЕсли;
	//----------------------------------------------------------------
	//абс_Стрельцов-
	
	СтрокаСообщения = "";
	//Для каждого СтрокаГрафикаПоставок из ГрафикПоставок Цикл
	//	//Если (НЕ СледГодПоставок и (СтрокаГрафикаПоставок.СуммаБезНДС=0 или СтрокаГрафикаПоставок.НомерСтроки>12))
	//	//	ИЛИ (СледГодПоставок и (СтрокаГрафикаПоставок.СуммаБезНДС=0 или СтрокаГрафикаПоставок.НомерСтроки>24)) Тогда
	//	//	продолжить;
	//	//КонецЕсли;
	//	
	//	//абс_Стрельцов+ добавлено: 17.09.2012
	//	//доработки при переносе ПУ
	//	//---------------------------------------------
	//	абс_ВременнаяКонстантаВеденияПроектногоУчета = Ложь;  										//изменено: 03.10.2012
	//	Если абс_ВременнаяКонстантаВеденияПроектногоУчета Тогда //мПроведениеПоМеханизмуПроектногоУчета Тогда    //изменено: 03.10.2012
	//		
	//		//АБС НАЧАЛО Задача №08759
	//		ТЗОстаткиПоПроектам = Новый ТаблицаЗначений;
	//		ТЗОстаткиПоПроектам.Колонки.Добавить("Проект");
	//		ТЗОстаткиПоПроектам.Колонки.Добавить("Остаток");
	//		
	//		Для Каждого СтрокаПроекта Из ТЗДолиПоПроектам Цикл
	//			//\\АБС КОНЕЦ Задача №08759
	//			СтруктураАналитик = НОВЫЙ Структура;
	//			СтруктураАналитик.Вставить("Организация",Организация);
	//			СтруктураАналитик.Вставить("абс_ЦФУ", ЦФУ);
	//			СтруктураАналитик.Вставить("ЦФО", ЦФО);
	//			СтруктураАналитик.Вставить("абс_ТипРасхода", ТипРасхода);
	//			СтруктураАналитик.Вставить("абс_ТипКонтрагента", ТипКонтрагента);
	//			СтруктураАналитик.Вставить("абс_ТипСети", ТипСети);
	//			СтруктураАналитик.Вставить("абс_КВ",КВ);
	//			СтруктураАналитик.Вставить("абс_ТЭО", ТЭО);
	//			СтруктураАналитик.Вставить("СтатьяОборотов", БюджетнаяСтатья);
	//			
	//			//абс_Стрельцов+ добавлено: 21.09.2012
	//			//для исключительной ситуации если текущий проект пустой
	//			//----------------------------------------------------------------------------
	//			Если НЕ ЗначениеЗаполнено(СтрокаПроекта.Проект) Или СтрокаПроекта.Проект = Справочники.Проекты.ПустаяСсылка() Тогда
	//				
	//				мСтруктураАналитик = ПостроитьСтруктуруАналитик();
	//				мСтруктураАналитик.НачалоПериода = НачалоМесяца(СтрокаГрафикаПоставок.Период);
	//				мСтруктураАналитик.КонецПериода	 = КонецМесяца(СтрокаГрафикаПоставок.Период);
	//				мСтруктураАналитик.Удалить("Проект");
	//				
	//				РезультатПоОсновнымАналитикам = абс_Бюджетирование.ПостроитьЗапросПоОстаткам(мСтруктураАналитик, мВалютаРегламентированногоУчета);
	//			КонецЕСли;
	//			//
	//			//абс_Стрельцов-
	//			
	//			//АБС НАЧАЛО Задача №08759
	//			СписокГрупп = Новый СписокЗначений;
	//			СписокГрупп.Добавить(СтрокаПроекта.Проект);
	//			ПолучитьВсехРодителейПроекта(СтрокаПроекта.Проект, СписокГрупп);
	//			СтруктураАналитик.Вставить("Проект", СписокГрупп);
	//			//\\АБС КОНЕЦ Задача №08759
	//			
	//			//АБС НАЧАЛО Задача №08759
	//			Остаток=0;
	//			//Остаток = абс_Бюджетирование.ОстатокЛимитаПоБюджету(НачалоМесяца(СтрокаГрафикаПоставок.Период),КонецМесяца(СтрокаГрафикаПоставок.Период), СтруктураАналитик, НефиксированнаяСумма, Ссылка);
	//			ТЗОстаткиПоПроектамТекущего = ОстатокЛимитаПоБюджету(НачалоМесяца(СтрокаГрафикаПоставок.Период),КонецМесяца(СтрокаГрафикаПоставок.Период), СтруктураАналитик, НефиксированнаяСумма, Ссылка);
	//			//\\АБС КОНЕЦ Задача №08759
	//							
	//			//АБС НАЧАЛО Задача №08759
	//			//СтрокаГрафикаПоставокСуммаБезНДС = СтрокаГрафикаПоставок.СуммаБезНДС;
	//			СтрокаГрафикаПоставокСуммаБезНДС = Окр(СтрокаГрафикаПоставок.СуммаБезНДС*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
	//			нСтрокаГрафикаПоставокСуммаБезНДС = СтрокаГрафикаПоставокСуммаБезНДС;
	//			
	//			//абс_Стрельцов+ добавлено: 21.09.2012
	//			//исключительная ситуация: если текущий проект пустой и таблица остатков тоже пустая
	//			//----------------------------------------------------------------------------
	//			ЕСли НЕ ЗначениеЗаполнено(СтрокаПроекта.Проект) Или СтрокаПроекта.Проект = Справочники.Проекты.ПустаяСсылка() Тогда
	//				Если (ТЗОстаткиПоПроектамТекущего.Количество() = 0) И РезультатПоОсновнымАналитикам.СуммаОстатокЛимита > СтрокаГрафикаПоставокСуммаБезНДС Тогда
	//					Продолжить;
	//				КонецЕСли;
	//			КонецЕсли;
	//			//----------------------------------------------------------------------------
	//			//абс_Стрельцов-
	//			
	//			Разница = 0;
	//			
	//			Для Каждого с Из ТЗОстаткиПоПроектамТекущего Цикл
	//				ТЗОстаткиПоПроектам.Свернуть("Проект", "Остаток");
	//				
	//				Если нСтрокаГрафикаПоставокСуммаБезНДС = 0 Тогда 
	//					Продолжить;
	//				КонецЕсли;
	//				
	//				НайденнаяСтрокаВОбщейТаблице = ТЗОстаткиПоПроектам.Найти(с.Проект,"Проект");
	//				Если НайденнаяСтрокаВОбщейТаблице=Неопределено Тогда 
	//					Разница = нСтрокаГрафикаПоставокСуммаБезНДС - с.Остаток;
	//					Если Разница<=0 Тогда 
	//						н = ТЗОстаткиПоПроектам.Добавить();
	//						ЗаполнитьЗначенияСвойств(н, с);
	//						н.Остаток = Разница*-1;
	//						
	//						Остаток = Остаток + нСтрокаГрафикаПоставокСуммаБезНДС;
	//						нСтрокаГрафикаПоставокСуммаБезНДС = 0;
	//					Иначе
	//						Остаток = Остаток + с.Остаток;
	//						нСтрокаГрафикаПоставокСуммаБезНДС = нСтрокаГрафикаПоставокСуммаБезНДС-с.Остаток;		
	//					КонецЕсли;
	//				Иначе
	//					Разница = нСтрокаГрафикаПоставокСуммаБезНДС - НайденнаяСтрокаВОбщейТаблице.Остаток;
	//					Если Разница<=0 Тогда 
	//						НайденнаяСтрокаВОбщейТаблице.Остаток = Разница*-1;
	//						
	//						Остаток = Остаток + нСтрокаГрафикаПоставокСуммаБезНДС;
	//						нСтрокаГрафикаПоставокСуммаБезНДС = 0;
	//					Иначе
	//						Остаток = Остаток + НайденнаяСтрокаВОбщейТаблице.Остаток;
	//						НайденнаяСтрокаВОбщейТаблице.Остаток = 0;
	//						
	//						нСтрокаГрафикаПоставокСуммаБезНДС = Разница;		
	//					КонецЕсли;
	//				КонецЕсли;
	//			КонецЦикла;
	//			//\\АБС КОНЕЦ Задача №08759
	//			
	//			//АБС НАЧАЛО Задача №08759
	//			//Если Остаток<СтрокаГрафикаПоставок.СуммаБезНДС Тогда
	//			Если нСтрокаГрафикаПоставокСуммаБезНДС>0 Тогда
	//				//\\АБС КОНЕЦ Задача №08759
	//				
	//				//АБС НАЧАЛО Задача №08759
	//				СтрокаСообщения = СтрокаСообщения+"Проект: " + Строка(СтрокаПроекта.Проект)+"; ";
	//				//\\АБС КОНЕЦ Задача №08759
	//				
	//				Если нСтрокаГрафикаПоставокСуммаБезНДС = СтрокаГрафикаПоставокСуммаБезНДС тогда
	//					СтрокаСообщения = СтрокаСообщения+"В периоде "+ Формат(СтрокаГрафикаПоставок.Период,"ДФ='MMMM yyyy'") + " г." +" не задан лимит!";
	//				Иначе
	//					//АБС НАЧАЛО Задача №08759
	//					//СтрокаСообщения = СтрокаСообщения+"В периоде "+ абс_СлужебныеФункции.ВернутьНазваниеМесяца(СтрокаГрафикаПоставок.Период)+ " " + Формат(СтрокаГрафикаПоставок.Период,"ДФ=yyyy") + " г." +" СУММА ПРЕВЫШАЕТ ЛИМИТ! СУММА = "+СтрокаГрафикаПоставок.СуммаБезНДС+"; ЛИМИТ = "+Остаток+Символы.ПС;
	//					СтрокаСообщения = СтрокаСообщения+"В периоде "+ Формат(СтрокаГрафикаПоставок.Период,"ДФ='MMMM yyyy'") + " г." + " сумма превышает лимит! Сумма = "+СтрокаГрафикаПоставокСуммаБезНДС+"; Лимит = "+Остаток+Символы.ПС;
	//					//\\АБС КОНЕЦ Задача №08759
	//					
	//				КонецЕсли;
	//			КонецЕсли;
	//			
	//			//АБС НАЧАЛО Задача №08759
	//		КонецЦикла;
	//		//\\АБС КОНЕЦ Задача №08759
	////	Иначе
	//		Остаток = абс_Бюджетирование.ОстатокЛимитаПоБюджету(НачалоМесяца(СтрокаГрафикаПоставок.Период),КонецМесяца(СтрокаГрафикаПоставок.Период), СтруктураАналитик, НефиксированнаяСумма, Ссылка);
	//		Если Остаток<СтрокаГрафикаПоставок.СуммаБезНДС Тогда
	//			Если Остаток = -2 тогда
	//				СтрокаСообщения = СтрокаСообщения+"В периоде "+ Формат(СтрокаГрафикаПоставок.Период,"ДФ='MMMM yyyy'") + " г." +" не задан лимит!";
	//			Иначе
	//				СтрокаСообщения = СтрокаСообщения+"В периоде "+ Формат(СтрокаГрафикаПоставок.Период,"ДФ='MMMM yyyy'") + " г." +" сумма превышает лимит! Сумма = "+СтрокаГрафикаПоставок.СуммаБезНДС+"; Лимит = "+Остаток+Символы.ПС;
	//			КонецЕсли;
	//		КонецЕсли;	
	//	КонецЕсли;
	//----------------------------------------------------------------
	//абс_Стрельцов-
	
	//КонецЦикла;
	
	//	Иначе
	Остаток = абс_Бюджетирование.ОстатокЛимитаПоБюджету(НачалоГода(Дата), КонецГода(Дата), СтруктураАналитик, НефиксированнаяСумма, Ссылка);
	Если Остаток < Товары.Итог("СуммаБезНДС") Тогда
		Если Остаток = -2 тогда
			СтрокаСообщения = СтрокаСообщения+"В периоде "+ Формат(Дата,"ДФ='yyyy'") + " г." +" не задан лимит!";
		Иначе
			СтрокаСообщения = СтрокаСообщения+"В периоде "+ Формат(Дата,"ДФ='yyyy'") + " г." +" сумма превышает лимит! Сумма = "+Товары.Итог("СуммаБезНДС")+"; Лимит = "+Остаток+Символы.ПС;
		КонецЕсли;
	КонецЕсли;	
	
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		Отказ = Истина;
		ttk_ОбщегоНазначения.СообщитьОбОшибке(Строка(Ссылка) + " " + СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры	

Функция СинхронизироватьСпецификациюЗЗОЗК(ТребуетсяПодтверждениеСпецификации)
	
	Отказ = Ложь;
	
	Для Каждого СтрокаОЗК Из ЗакупочныеЗаказыОЗК Цикл
		
		ЗакупочныйЗаказОЗК = СтрокаОЗК.ЗакупочныйЗаказ;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ЗакупочныйЗаказОЗК", ЗакупочныйЗаказОЗК);
		
		СтрокиСпецификации = Товары.НайтиСтроки(ПараметрыОтбора);
		
		Если ЗакупочныйЗаказОЗК.Товары.Количество() <> СтрокиСпецификации.Количество() Тогда
			СпецификацияИзменена = Истина;
		Иначе
			СпецификацияИзменена = Ложь;			
			
			Для Каждого СтрСпец Из СтрокиСпецификации Цикл				
				ПараметрыОтбора       = Новый Структура; 
				ПараметрыОтбораФилиал = Новый Структура;
				Для Каждого РеквизитСтрСпец Из Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
					Если РеквизитСтрСпец.Имя <> "ЗакупочныйЗаказОЗК" И РеквизитСтрСпец.Имя <> "ОрганизацияОЗК" Тогда
						//СтрСпец[РеквизитСтрСпец.Имя] <> СтрСпецФилиал[РеквизитСтрСпец.Имя] Тогда
						//СпецификацияИзменена = Истина;
						ПараметрыОтбораФилиал.Вставить(РеквизитСтрСпец.Имя, СтрСпец[РеквизитСтрСпец.Имя]);
					КонецЕсли;
					ПараметрыОтбора.Вставить(РеквизитСтрСпец.Имя, СтрСпец[РеквизитСтрСпец.Имя]);
				КонецЦикла;
				
				СтрСпецФилиал = ЗакупочныйЗаказОЗК.Товары.НайтиСтроки(ПараметрыОтбораФилиал);
				СтрСпецТекЗЗ  = Товары.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрСпецФилиал.Количество() <> СтрСпецТекЗЗ.Количество() Тогда
					СпецификацияИзменена = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не СпецификацияИзменена Тогда
			Продолжить;
		Иначе
			ТребуетсяПодтверждениеСпецификации = Истина;
		КонецЕсли;
		
		ЗакупочныйЗаказОЗКДляИзменения = ЗакупочныйЗаказОЗК.ПолучитьОбъект();
		
		ОтказОЗК = Ложь;
		НомерСтрокиИтогоПоСпецификации = ?(ЗакупочныйЗаказОЗК.СледГодПоставок, 26, 14) - 1;
		
		СуммаБезНДСПоСпецификации = 0;
		СуммаСНДСПоСпецификации   = 0;
		Для Каждого СтрСпец Из СтрокиСпецификации Цикл
			СуммаБезНДСПоСпецификации = СуммаБезНДСПоСпецификации + СтрСпец.СуммаБезНДС;
			СуммаСНДСПоСпецификации   = СуммаСНДСПоСпецификации + СтрСпец.СуммаСНДС;
		КонецЦикла;
		Если (СуммаБезНДСПоСпецификации <> 0 ИЛИ СуммаСНДСПоСпецификации <> 0)И ЗакупочныйЗаказОЗК.ГрафикПоставок.Итог("СуммаБезНДС") = 0 Тогда
			ОтказОЗК = Истина;
			Отказ = Истина;
			Сообщить("Не заполнен график поставок в " + Строка(ЗакупочныйЗаказОЗК) + ". Невозможно синхронизировать спецификации");
			Возврат Отказ;
		КонецЕсли;
		
		ЗакупочныйЗаказОЗКДляИзменения.Товары.Очистить();
		Для Каждого СтрСпец Из СтрокиСпецификации Цикл
			НовСтр = ЗакупочныйЗаказОЗКДляИзменения.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрСпец);
		КонецЦикла;
		//ЗакупочныйЗаказОЗКДляИзменения.Товары.Загрузить(СтрокиСпецификации);
		
		Для Каждого СтрСпецификация Из ЗакупочныйЗаказОЗКДляИзменения.Товары Цикл
			
			СтрСпецификация.ЗакупочныйЗаказОЗК = Документы.абс_ЗакупочныйЗаказ.ПустаяСсылка();
			СтрСпецификация.ОрганизацияОЗК     = Справочники.Организации.ПустаяСсылка();
			
		КонецЦикла;
		
		СтрокаИтогоПоСпецификации = ЗакупочныйЗаказОЗКДляИзменения.ГрафикПоставок[НомерСтрокиИтогоПоСпецификации];
		
		Если СтрокаИтогоПоСпецификации.СуммаБезНДС <> СуммаБезНДСПоСпецификации ИЛИ СтрокаИтогоПоСпецификации.СуммаСНДС <> СуммаСНДСПоСпецификации Тогда
			ТабличнаяЧастьИсточник    = ЗакупочныйЗаказОЗКДляИзменения.Товары;  		
			СтрокаИтогоПоСпецификации.ВалютнаяСуммаБезНДС 	= ТабличнаяЧастьИсточник.Итог("ВалютнаяСуммаБезНДС");
			СтрокаИтогоПоСпецификации.ВалютнаяСуммаСНДС 	= ТабличнаяЧастьИсточник.Итог("ВалютнаяСуммаСНДС");
			//СтрокаИтогоПоСпецификации.ВалютнаяСуммаНДС		= СтрокаИтогоПоСпецификации.ВалютнаяСуммаСНДС - СтрокаИтогоПоСпецификации.ВалютнаяСуммаБезНДС;					
			СтрокаИтогоПоСпецификации.СуммаБезНДС 			= ТабличнаяЧастьИсточник.Итог("СуммаБезНДС");	
			СтрокаИтогоПоСпецификации.СуммаСНДС				= ТабличнаяЧастьИсточник.Итог("СуммаСНДС");
			//СтрокаИтогоПоСпецификации.СуммаНДС				= СтрокаИтогоПоСпецификации.СуммаСНДС - СтрокаИтогоПоСпецификации.СуммаБезНДС;		
			
			РаспределитьИзменениеСпецификацииВграфикеПоставокОЗК("ВалютнаяСуммаБезНДС", ЗакупочныйЗаказОЗКДляИзменения, НомерСтрокиИтогоПоСпецификации, СуммаБезНДСПоСпецификации);
			РаспределитьИзменениеСпецификацииВграфикеПоставокОЗК("ВалютнаяСуммаСНДС", ЗакупочныйЗаказОЗКДляИзменения, НомерСтрокиИтогоПоСпецификации, СуммаСНДСПоСпецификации);
			РаспределитьИзменениеСпецификацииВграфикеПоставокОЗК("СуммаБезНДС", ЗакупочныйЗаказОЗКДляИзменения, НомерСтрокиИтогоПоСпецификации, СуммаБезНДСПоСпецификации);
			РаспределитьИзменениеСпецификацииВграфикеПоставокОЗК("СуммаСНДС", ЗакупочныйЗаказОЗКДляИзменения, НомерСтрокиИтогоПоСпецификации, СуммаСНДСПоСпецификации);
			
			НомерТекСтроки = 0;
			Пока НомерТекСтроки <= НомерСтрокиИтогоПоСпецификации Цикл
				ТекСтрока = ЗакупочныйЗаказОЗКДляИзменения.ГрафикПоставок[НомерТекСтроки];
				ТекСтрока.ВалютнаяСуммаНДС = ТекСтрока.ВалютнаяСуммаСНДС - ТекСтрока.ВалютнаяСуммаБезНДС;
				ТекСтрока.СуммаНДС		   = ТекСтрока.СуммаСНДС - ТекСтрока.СуммаБезНДС;
				НомерТекСтроки = НомерТекСтроки + 1;
			КонецЦикла;
			
			//КонецЕсли;
			//ЗакупочныйЗаказОЗКДляИзменения.КонтрольЛимитовОЗК(ОтказОКЗ);
			ЗакупочныйЗаказОЗКДляИзменения.КонтрольЛимитов(ОтказОЗК);
			
		КонецЕсли;
		
		Если ОтказОЗК Тогда
			Отказ = Истина;
			Возврат Отказ;
		Иначе	
			Попытка
				//ЗакупочныйЗаказОЗКДляИзменения = ЗакупочныйЗаказОЗК.ПолучитьОбъект();
				ЗакупочныйЗаказОЗКДляИзменения.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации;
				ЗакупочныйЗаказОЗКДляИзменения.Записать();
			Исключение
				Отказ = Истина;
				Сообщить("Ошибка при записи Закупочного заказа. " + ОписаниеОшибки());
				Возврат Отказ;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

Процедура РаспределитьИзменениеСпецификацииВграфикеПоставокОЗК(СуммаДляИзменения, ЗакупочныйЗаказОЗКДляИзменения, НомерСтрокиИтогоПоСпецификации, СуммаПоСпецификации)
	
	//СтрокаИтогоПоСпецификации = ГрафикПоставок[НомерСтрокиИтогоПоСпецификации];	
	СуммаДляРаспределения = СуммаПоСпецификации - ЗакупочныйЗаказОЗКДляИзменения.ГрафикПоставок[НомерСтрокиИтогоПоСпецификации-1][СуммаДляИзменения];
	НомерТекСтроки = 0;
	МассивРаспределения = Новый Массив;     
	Пока НомерТекСтроки < НомерСтрокиИтогоПоСпецификации - 1 Цикл
		МассивРаспределения.Добавить(ЗакупочныйЗаказОЗКДляИзменения.ГрафикПоставок[НомерТекСтроки][СуммаДляИзменения]);
		НомерТекСтроки = НомерТекСтроки + 1;			
	КонецЦикла;
	МассивПослеРаспределения = ttk_ОбщегоНазначения.РаспределитьПропорционально(СуммаДляРаспределения, МассивРаспределения);
	Инд = 0;
	СуммаДляИзмененияИтог = 0;
	Для Каждого Стр Из МассивПослеРаспределения Цикл
		ЗакупочныйЗаказОЗКДляИзменения.ГрафикПоставок[Инд][СуммаДляИзменения] = ЗакупочныйЗаказОЗКДляИзменения.ГрафикПоставок[Инд][СуммаДляИзменения] + Стр;
		СуммаДляИзмененияИтог = СуммаДляИзмененияИтог + ЗакупочныйЗаказОЗКДляИзменения.ГрафикПоставок[Инд][СуммаДляИзменения];
		Инд = Инд + 1;
	КонецЦикла;
	//ЗакупочныйЗаказОЗКДляИзменения.ГрафикПоставок.ЗагрузитьКолонку(МассивПослеРаспределения, СуммаДляИзменения);
	ЗакупочныйЗаказОЗКДляИзменения.ГрафикПоставок[НомерСтрокиИтогоПоСпецификации-1][СуммаДляИзменения] = СуммаДляИзмененияИтог;
	
КонецПроцедуры

//АБС Гетц 27.02.13. Проектный учет
Функция ПолучитьТаблицуРаспределенияПоПроектам_ЗЗ(ТЧ_Товары = Неопределено) Экспорт 
	Если ТЧ_Товары = Неопределено Тогда 
		ТЧ_Товары = ПолучитьТаблицуСпецификацииСУчетомРаспределения();
	КонецЕсли;
	
	Если РаспределениеПоПроектам.Количество() = 0 Тогда
		Возврат РаспределениеПоПроектам.Выгрузить();
	КонецЕСли;
	
	ТаблицаПроектов = абс_БюджетированиеПривилегированный.ПолучитьТаблицуРаспределенияПоПроектам(ТЧ_Товары, "Пустые");
	
	ТЗ_РаспределениеПоПроектам = РаспределениеПоПроектам.Выгрузить();
	ЕСли ТаблицаПроектов.Количество() = 0 Тогда		
		ТЗ_РаспределениеПоПроектам.ЗаполнитьЗначения(0, "ДоляРаспределения");
		Возврат ТЗ_РаспределениеПоПроектам;
	КонецЕСли;
	
	ИтогСуммаБезНДС = ТаблицаПроектов.Итог("ДоляРаспределения");
	
	МассивДолей = ТЗ_РаспределениеПоПроектам.ВыгрузитьКолонку("ДоляРаспределения");
	
	МассивСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(ИтогСуммаБезНДС, МассивДолей, , Истина);
	
	Если МассивСумм <> Неопределено Тогда
		ТЗ_РаспределениеПоПроектам.ЗагрузитьКолонку(МассивСумм, "ДоляРаспределения");
	КонецЕСли;
	Возврат ТЗ_РаспределениеПоПроектам;
КонецФункции

Функция ПолучитьТаблицуСпецификацииСУчетомРаспределения()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втТовары.абс_Проект КАК Проект,
	|	втТовары.ЦенаБезНДС КАК Цена,
	|	втТовары.КлючСтроки КАК КлючСтроки,
	|	втТовары.СуммаБезНДС КАК Сумма
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&втТовары КАК втТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРаспределениеСпецификацииВнеш.Номенклатура,
	|	втРаспределениеСпецификацииВнеш.Проект,
	|	втРаспределениеСпецификацииВнеш.Количество,
	|	втРаспределениеСпецификацииВнеш.КлючСтроки
	|ПОМЕСТИТЬ втРаспределениеСпецификации
	|ИЗ
	|	&втРаспределениеСпецификацииВнеш КАК втРаспределениеСпецификацииВнеш
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втРаспределениеСпецификации.Проект, втТовары.Проект) КАК Проект,
	|	ВЫБОР
	|		КОГДА втРаспределениеСпецификации.Проект ЕСТЬ NULL 
	|			ТОГДА втТовары.Сумма
	|		ИНАЧЕ втРаспределениеСпецификации.Количество * втТовары.Цена
	|	КОНЕЦ КАК ДоляРаспределения
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРаспределениеСпецификации КАК втРаспределениеСпецификации
	|		ПО втТовары.КлючСтроки = втРаспределениеСпецификации.КлючСтроки";
	Запрос.УстановитьПараметр("втТовары",  Товары.Выгрузить());
	Запрос.УстановитьПараметр("втРаспределениеСпецификацииВнеш", РаспределениеСпецификацииПоПроектам.Выгрузить());
	ТЧ_Товары = Запрос.Выполнить().Выгрузить();
	Возврат ТЧ_Товары;
КонецФункции

Функция ПолучитьТаблицуТоваровСУчетомРаспределения() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втТовары.Номенклатура,
	|	втТовары.Содержание,
	|	втТовары.СтавкаНДС,
	|	втТовары.ВалютнаяЦенаБезНДС,
	|	втТовары.НДСВалютнаяЦена,
	|	втТовары.ВалютнаяЦенаСНДС,
	|	втТовары.ЦенаБезНДС,
	|	втТовары.НДСЦена,
	|	втТовары.ЦенаСНДС,
	|	втТовары.Количество,
	|	втТовары.ВалютнаяСуммаБезНДС,
	|	втТовары.ВалютнаяСуммаСНДС,
	|	втТовары.СуммаБезНДС,
	|	втТовары.СуммаСНДС,
	|	втТовары.КодировкаСклада,
	|	втТовары.СчетУчетаБУ,
	|	втТовары.Заказ,
	|	втТовары.абс_Проект,
	|	втТовары.ЗакупочныйЗаказОЗК,
	|	втТовары.ОрганизацияОЗК,
	|	втТовары.КлючСтроки,
	//Сторчевой А.Н. 05.12.2017 НФС {
	|	втТовары.СтатьяОборотов,
	|	втТовары.абс_ТипСети,
	|	втТовары.абс_КВ,
	|	втТовары.абс_ТЭО,
	|	втТовары.абс_ЦФУ,
	|	втТовары.ttk_ОбъектБюджетирования,
	|	втТовары.ttk_Город,
	//} Сторчевой А.Н. 05.12.2017 НФС
	|	втТовары.НомерСтроки
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&втТовары КАК втТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРаспределениеСпецификацииВнеш.Номенклатура,
	|	втРаспределениеСпецификацииВнеш.Проект,
	|	втРаспределениеСпецификацииВнеш.Количество,
	|	втРаспределениеСпецификацииВнеш.КлючСтроки
	|ПОМЕСТИТЬ втРаспределениеСпецификации
	|ИЗ
	|	&втРаспределениеСпецификацииВнеш КАК втРаспределениеСпецификацииВнеш
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втРаспределениеСпецификации.Проект, втТовары.абс_Проект) КАК абс_Проект,
	|	ВЫБОР
	|		КОГДА втРаспределениеСпецификации.Проект ЕСТЬ NULL 
	|			ТОГДА втТовары.Количество
	|		ИНАЧЕ втРаспределениеСпецификации.Количество
	|	КОНЕЦ КАК Количество,
	|	втТовары.Номенклатура,
	|	втТовары.Содержание,
	|	втТовары.СтавкаНДС,
	|	втТовары.ВалютнаяЦенаБезНДС,
	|	втТовары.НДСВалютнаяЦена,
	|	втТовары.ВалютнаяЦенаСНДС,
	|	втТовары.ЦенаБезНДС,
	|	втТовары.НДСЦена,
	|	втТовары.ЦенаСНДС,
	|	втТовары.ВалютнаяСуммаБезНДС,
	|	втТовары.ВалютнаяСуммаСНДС,
	|	втТовары.СуммаБезНДС,
	|	втТовары.СуммаСНДС,
	|	втТовары.КодировкаСклада,
	|	втТовары.СчетУчетаБУ,
	|	втТовары.Заказ,
	|	втТовары.ЗакупочныйЗаказОЗК,
	|	втТовары.ОрганизацияОЗК,
	|	втТовары.КлючСтроки,
	//Сторчевой А.Н. 05.12.2017 НФС {
	|	втТовары.СтатьяОборотов,
	|	втТовары.абс_ТипСети,
	|	втТовары.абс_КВ,
	|	втТовары.абс_ТЭО,
	|	втТовары.абс_ЦФУ,
	|	втТовары.ttk_ОбъектБюджетирования,
	|	втТовары.ttk_Город,
	//} Сторчевой А.Н. 05.12.2017 НФС
	|	втТовары.НомерСтроки
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРаспределениеСпецификации КАК втРаспределениеСпецификации
	|		ПО втТовары.КлючСтроки = втРаспределениеСпецификации.КлючСтроки";
	Запрос.УстановитьПараметр("втТовары",  Товары.Выгрузить());
	Запрос.УстановитьПараметр("втРаспределениеСпецификацииВнеш", РаспределениеСпецификацииПоПроектам.Выгрузить());
	ТЧ_Товары = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЧ Из ТЧ_Товары Цикл 
		ПересчитатьСуммуТабличнойЧасти(СтрокаТЧ, "Количество", Истина);
	КонецЦикла;
	Возврат ТЧ_Товары;
КонецФункции

Процедура ПроеведениеПоГрафикамОплат(Отказ)
	
	Движения.абс_ГрафикПлатежейПоЗакупочномуЗаказу.Записывать = Истина;
	Движения.абс_ГрафикПлатежейПоЗакупочномуЗаказу.Очистить();		
	Движения.абс_ГрафикПлатежейПоЗакупочномуЗаказу.Записать();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НефиксированнаяСумма Тогда
		Возврат;
	КонецЕсли;
	
	ТЧ_Товары = ПолучитьТаблицуСпецификацииСУчетомРаспределения();
	ТЗДолиПоПроектамГрафикаПоставок = абс_БюджетированиеПривилегированный.ПолучитьТаблицуРаспределенияПоПроектам(ПолучитьТаблицуРаспределенияПоПроектам_ЗЗ(ТЧ_Товары), "Все");
	//***** Проектный учет. Гетц. 13.05.13
	Если ТЗДолиПоПроектамГрафикаПоставок.Количество() = 0 Тогда
		ТаблицаПроектов = абс_БюджетированиеПривилегированный.ПолучитьТаблицуРаспределенияПоПроектам(ТЧ_Товары, "Все");
		Для каждого СтрокаТабл Из ТаблицаПроектов Цикл
			н = ТЗДолиПоПроектамГрафикаПоставок.Добавить();
			ЗаполнитьЗначенияСвойств(н, СтрокаТабл);
		КонецЦикла;	
	Иначе
		ТаблицаПроектов = абс_БюджетированиеПривилегированный.ПолучитьТаблицуРаспределенияПоПроектам(ТЧ_Товары, "НеПустые");
		Для Каждого СтрокаТабл Из ТаблицаПроектов Цикл
			н = ТЗДолиПоПроектамГрафикаПоставок.Добавить();
			ЗаполнитьЗначенияСвойств(н, СтрокаТабл);
		КонецЦикла;
	КонецЕсли;
	//***** Проектный учет. Гетц. 13.05.13
	МассивОбщихДолей = ТЗДолиПоПроектамГрафикаПоставок.ВыгрузитьКолонку("ДоляРаспределения");
	
	//Сторчевой А.Н. 05.12.2017 НФС {
	КолонкиАналитик = "СтатьяОборотов, абс_КВ, абс_ТЭО, абс_ЦФУ, ttk_ОбъектБюджетирования, ttk_Город";
	ТоварыТЗ = Товары.Выгрузить(,КолонкиАналитик);
	ТоварыТЗ.Свернуть(КолонкиАналитик);
	КоличествоРазныхНаборовАналитик = ТоварыТЗ.Количество();
	//} Сторчевой А.Н. 05.12.2017 НФС
	
	Для Каждого ТекСтрокаГрафикПоставок Из ГрафикОплат Цикл
		
		Если (НЕ СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>12*КоличествоРазныхНаборовАналитик))
			ИЛИ (СледГодПоставок и (ТекСтрокаГрафикПоставок.СуммаБезНДС=0 или ТекСтрокаГрафикПоставок.НомерСтроки>24*КоличествоРазныхНаборовАналитик)) Тогда
			продолжить;
		КонецЕсли;
		
		ТЗДолиПоПроектамГрафикаПоставок.ЗаполнитьЗначения(0, "ДоляРаспределения");
		
		МассивНовыхДолей = ttk_ОбщегоНазначения.РаспределитьПропорционально(ТекСтрокаГрафикПоставок.СуммаБезНДС, МассивОбщихДолей, 3);
		Если МассивНовыхДолей = Неопределено Или МассивНовыхДолей.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		ТЗДолиПоПроектамГрафикаПоставок.ЗагрузитьКолонку(МассивНовыхДолей, "ДоляРаспределения");
		
		ИтогКоэфПоПроектам = ТЗДолиПоПроектамГрафикаПоставок.Итог("ДоляРаспределения");
		
		Для каждого СтрокаПроекта Из ТЗДолиПоПроектамГрафикаПоставок Цикл
			
			Если СтрокаПроекта.ДоляРаспределения = 0 Тогда
				Продолжить;
			КонецЕСли;
			
			//АБС ВСТАВКА 39454  06.03.2014 9:37:12  Шамов
			Если НЕ ЗначениеЗаполнено(ТекСтрокаГрафикПоставок.Период) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен период в графике оплат, строка " + ТекСтрокаГрафикПоставок.НомерСтроки, Отказ);
				Продолжить;
			КонецЕсли;
			//АБС ВСТАВКА 39454 КОНЕЦ
			
			Движение = Движения.абс_ГрафикПлатежейПоЗакупочномуЗаказу.Добавить();
			Движение.Период 					= ТекСтрокаГрафикПоставок.Период;			
			Движение.ЦФО 						= ЦФО;
			Движение.ЦФУ 						= ЦФУ;
			Движение.Контрагент 				= Контрагент;
			Движение.КВ	 						= КВ;						
			Движение.Организация 				= Организация;
			
			Движение.Проект = СтрокаПроекта.Проект;
			
			Движение.СуммаБезНДС				= Окр(ТекСтрокаГрафикПоставок.СуммаБезНДС*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
			Движение.СуммаСНДС 					= Окр(ТекСтрокаГрафикПоставок.СуммаСНДС*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);			
			
			Движение.Валюта						= ЭтотОбъект.ВалютаДокумента;
			
			//Сторчевой А.Н. 05.12.2017 НФС {
			Движение.СтатьяОборотов 			= ТекСтрокаГрафикПоставок.СтатьяОборотов;
			//Движение.абс_ТипСети 				= ТекСтрокаГрафикПоставок.абс_ТипСети;
			Движение.КВ		 					= ТекСтрокаГрафикПоставок.абс_КВ;
			Движение.абс_ТЭО 					= ТекСтрокаГрафикПоставок.абс_ТЭО;
			Движение.ЦФУ 						= ТекСтрокаГрафикПоставок.абс_ЦФУ;
			Движение.ttk_ОбъектБюджетирования	= ТекСтрокаГрафикПоставок.ttk_ОбъектБюджетирования;
			Движение.ttk_Город		 			= ТекСтрокаГрафикПоставок.ttk_Город;
			// } Сторчевой А.Н. 05.12.2017 НФС
			
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

// Рассчитать реквизиты табличной части. 17.05.2013 процедура перенесена в модуль объекта, Гетц
Процедура ПересчитатьСуммуТабличнойЧасти(СтрокаТабличнойЧасти,ТекущаяКолонка = "ЦенаБезНДС", НеВыполнятьПересчетВВалюту = Ложь) Экспорт 
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Количество = СтрокаТабличнойЧасти.Количество;
	СтавкаНДС  = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	Если Количество = 0 Тогда
		
		СтрокаТабличнойЧасти.ЦенаСНДС           = 0;	
		СтрокаТабличнойЧасти.ЦенаБезНДС         = 0;
		СтрокаТабличнойЧасти.НДСЦена            = 0; 	
		СтрокаТабличнойЧасти.СуммаСНДС          = 0;
		СтрокаТабличнойЧасти.СуммаБезНДС        = 0;
		СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС = 0;
		СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС   = 0;
		СтрокаТабличнойЧасти.НДСВалютнаяЦена    = 0;		
		СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС= 0;
		СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС  = 0;		
		
		Возврат;
		
	КонецЕсли;	
	
	Структура = Новый Структура("Количество, СтавкаНДС");
	ПересчетВВалюту = ложь;
	
	Если ТекущаяКолонка = "ЦенаБезНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 	
		
		ПересчетВВалюту = Истина;
		
		СтрокаТабличнойЧасти.СуммаБезНДС         = СтрокаТабличнойЧасти.ЦенаБезНДС * Количество;  				
		СтрокаТабличнойЧасти.ЦенаСНДС   		 = (СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС)) / Количество; 
		СтрокаТабличнойЧасти.НДСЦена             = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ЦенаСНДС
		, Истина //УчитыватьНДС
		, Истина //СуммаВключаетНДС
		, СтавкаНДС); 		
		СтрокаТабличнойЧасти.СуммаСНДС           = ?(СуммаВключаетНДС
		,СтрокаТабличнойЧасти.ЦенаСНДС * Количество
		,СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС));
		
	ИначеЕсли ТекущаяКолонка = "ЦенаСНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 
		
		ПересчетВВалюту = Истина;
		
		СтрокаТабличнойЧасти.НДСЦена             = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ЦенаСНДС
		, Истина //УчитыватьНДС
		, Истина //СуммаВключаетНДС
		, СтавкаНДС);
		СтрокаТабличнойЧасти.ЦенаБезНДС   		 = СтрокаТабличнойЧасти.ЦенаСНДС - СтрокаТабличнойЧасти.НДСЦена;														 		 		
		СтрокаТабличнойЧасти.СуммаБезНДС         = СтрокаТабличнойЧасти.ЦенаБезНДС * Количество;  
		СтрокаТабличнойЧасти.СуммаСНДС           = ?(СуммаВключаетНДС
		,СтрокаТабличнойЧасти.ЦенаСНДС * Количество
		,СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС));	
		
	КонецЕсли;																
	Если ТекущаяКолонка = "ВалютнаяЦенаБезНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 		
		
		СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС = СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС * Количество;  				
		СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС    = (СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС)) / Количество; 
		СтрокаТабличнойЧасти.НДСВалютнаяЦена     = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС
		, Истина //УчитыватьНДС
		, Истина //СуммаВключаетНДС
		, СтавкаНДС); 		
		СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС   = ?(СуммаВключаетНДС
		,СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС * Количество
		,СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС)); 		
		
	ИначеЕсли ТекущаяКолонка = "ВалютнаяЦенаСНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 		
		
		СтрокаТабличнойЧасти.НДСВалютнаяЦена     = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС
		, Истина //УчитыватьНДС
		, Истина //СуммаВключаетНДС
		, СтавкаНДС);
		СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС  = СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС - СтрокаТабличнойЧасти.НДСВалютнаяЦена;														 		 		
		СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС = СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС * Количество;   
		СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС   = ?(СуммаВключаетНДС
		,СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС * Количество
		,СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС)); 
		
	ИначеЕсли ТекущаяКолонка = "НДСЦена" Тогда 		
		
		ПересчетВВалюту = Истина;
		
		СтрокаТабличнойЧасти.СуммаБезНДС         = СтрокаТабличнойЧасти.ЦенаБезНДС * Количество;  
		СтрокаТабличнойЧасти.СуммаСНДС           = ?(СуммаВключаетНДС
		,СтрокаТабличнойЧасти.ЦенаСНДС * Количество
		,СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС));
		
	ИначеЕсли ТекущаяКолонка = "НДСВалютнаяЦена" Тогда 		
		
		СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС = СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС * Количество;   
		СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС   = ?(СуммаВключаетНДС
		,СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС * Количество
		,СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС)); 	
		
	ИначеЕсли ТекущаяКолонка = "СуммаБезНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 		
		
		ПересчетВВалюту = Истина;
		
		СтрокаТабличнойЧасти.ЦенаСНДС    		 = (СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС)) / Количество; 
		СтрокаТабличнойЧасти.НДСЦена     		 = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ЦенаСНДС
		, Истина //УчитыватьНДС
		, Истина //СуммаВключаетНДС
		, СтавкаНДС); 		
		СтрокаТабличнойЧасти.СуммаСНДС           = ?(СуммаВключаетНДС
		,СтрокаТабличнойЧасти.ЦенаСНДС * Количество
		,СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС));	
		СтрокаТабличнойЧасти.ЦенаБезНДС  		 = (СтрокаТабличнойЧасти.СуммаСНДС - УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС)) / Количество; 
		
	ИначеЕсли ТекущаяКолонка = "СуммаСНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 		
		
		ПересчетВВалюту = Истина;
		
		СтрокаТабличнойЧасти.ЦенаБезНДС  		 = (СтрокаТабличнойЧасти.СуммаСНДС - УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаСНДС
		, Истина //УчитыватьНДС
		, Истина //СуммаВключаетНДС
		, СтавкаНДС)) / Количество; 
		СтрокаТабличнойЧасти.НДСЦена     		 = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ЦенаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС); 		
		СтрокаТабличнойЧасти.СуммаБезНДС         = СтрокаТабличнойЧасти.ЦенаБезНДС * Количество; 	
		СтрокаТабличнойЧасти.ЦенаСНДС   		 = (СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС)) / Количество; 																	
		
	ИначеЕсли ТекущаяКолонка = "ВалютнаяСуммаБезНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 		
		
		СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС    = (СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС)) / Количество; 
		СтрокаТабличнойЧасти.НДСВалютнаяЦена     = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС
		, Истина //УчитыватьНДС
		, Истина //СуммаВключаетНДС
		, СтавкаНДС); 		
		СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС   = ?(СуммаВключаетНДС
		,СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС * Количество
		,СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС)); 	
		СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС  = (СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС - УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС)) / Количество; 
		
	ИначеЕсли ТекущаяКолонка = "ВалютнаяСуммаСНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 		
		
		СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС  = (СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС - УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС
		, Истина //УчитыватьНДС
		, Истина //СуммаВключаетНДС
		, СтавкаНДС)) / Количество; 
		СтрокаТабличнойЧасти.НДСВалютнаяЦена     = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС); 		
		СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС = СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС * Количество; 	
		СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС    = (СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
		, Истина //УчитыватьНДС
		, Ложь   //СуммаВключаетНДС
		, СтавкаНДС)) / Количество; 		
		
	КонецЕсли;														
	
	врПересчитать = Новый Структура("НДСЦена, ЦенаБезНДС, ЦенаСНДС, СуммаБезНДС, СуммаСНДС",
	"НДСВалютнаяЦена", "ВалютнаяЦенаБезНДС", "ВалютнаяЦенаСНДС", "ВалютнаяСуммаБезНДС", "ВалютнаяСуммаСНДС");
	
	Если не ПересчетВВалюту Тогда
		
		Для каждого врСтрока Из врПересчитать Цикл
			СтрокаТабличнойЧасти[врСтрока.Ключ] = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти[врСтрока.Значение],мВалютаРегламентированногоУчета ,ВалютаДокумента , Дата);	
		КонецЦикла;	
		
	Иначе 
		Если Не НеВыполнятьПересчетВВалюту Тогда //***** Абсолют-Софт. Гетц. Принудительно запрещаем пересчет валютных сумм по текущему курсу 12.07.2013, задача 28857
			Для каждого врСтрока Из врПересчитать Цикл
				СтрокаТабличнойЧасти[врСтрока.Значение] = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти[врСтрока.Ключ],ВалютаДокумента ,мВалютаРегламентированногоУчета , Дата);	
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//\\

// {{ТТК Сладков А. Заявка № 31.10.2016 начало
Процедура ЗаписатьИсториюИзмененияГрафикаПоставок(Корректировка=Ложь)
	
	 Запрос = новый Запрос;
	 
	 Запрос.Текст=
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	абс_ЗакупочныйЗаказГрафикПоставок.Период,
	 |	СУММА(абс_ЗакупочныйЗаказГрафикПоставок.СуммаСНДС) КАК СуммаСНДС
	 |ПОМЕСТИТЬ ВТ_ТЧ
	 |ИЗ
	 |	Документ.абс_ЗакупочныйЗаказ.ГрафикПоставок КАК абс_ЗакупочныйЗаказГрафикПоставок
	 |ГДЕ
	 |	абс_ЗакупочныйЗаказГрафикПоставок.Ссылка = &СсылкаНаДокумент
	 |	И НЕ абс_ЗакупочныйЗаказГрафикПоставок.Период = ДАТАВРЕМЯ(1, 1, 1)
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	абс_ЗакупочныйЗаказГрафикПоставок.Период
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ВТ_ТЧ.Период,
	 |	ВТ_ТЧ.СуммаСНДС,
	 |	ВЫБОР
	 |		КОГДА ЕСТЬNULL(ttk_ИсторияИзмененияГрафикаПоставокСрезПоследних.СуммаДоИзменения, ""Запись отсутствует"") = ""Запись отсутствует""
	 |			ТОГДА ""Запись отсутствует""
	 |		ИНАЧЕ ""Запись присутствует""
	 |	КОНЕЦ КАК НаличиеПервоначальнойСуммы,
	 |	ЕСТЬNULL(ttk_ИсторияИзмененияГрафикаПоставокСрезПоследних.Сумма, 0) КАК Сумма,
	 |	ЕСТЬNULL(ttk_ИсторияИзмененияГрафикаПоставокСрезПоследних.СуммаДоИзменения, 0) КАК СуммаДоИзменения
	 |ИЗ
	 |	ВТ_ТЧ КАК ВТ_ТЧ
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ttk_ИсторияИзмененияГрафикаПоставок.СрезПоследних(
	 |				,
	 |				Документ = &СсылкаНаДокумент
	 |					И ПериодГрафика В
	 |						(ВЫБРАТЬ
	 |							ВТ_ТЧ.Период
	 |						ИЗ
	 |							ВТ_ТЧ)) КАК ttk_ИсторияИзмененияГрафикаПоставокСрезПоследних
	 |		ПО ВТ_ТЧ.Период = ttk_ИсторияИзмененияГрафикаПоставокСрезПоследних.ПериодГрафика";

	 Запрос.УстановитьПараметр("СсылкаНаДокумент",Ссылка);
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 
	 
	НаборЗаписей = РегистрыСведений.ttk_ИсторияИзмененияГрафикаПоставок.СоздатьНаборЗаписей(); 

	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка); 

	НаборЗаписей.Прочитать();
	 
	 Пока Выборка.Следующий() Цикл
		 
		 
		 Если  Выборка.НаличиеПервоначальнойСуммы = "Запись отсутствует" ИЛИ Корректировка = Ложь Тогда
			 
			НоваяЗапись 					= НаборЗаписей.Добавить(); 
			НоваяЗапись.Период 				= ТекущаяДата(); 
			НоваяЗапись.Документ 			= Ссылка; 
			НоваяЗапись.ПериодГрафика 		= Выборка.Период; 
			
			НоваяЗапись.СуммаДоИзменения    = Выборка.СуммаСНДС; 
			НоваяЗапись.Сумма			 	= Выборка.СуммаСНДС; 
			НоваяЗапись.АвторЗаписи 		= глЗначениеПеременной("глТекущийПользователь"); 
			
			НаборЗаписей.Записать(); 

		ИначеЕсли Выборка.СуммаСНДС<>Выборка.Сумма Тогда
			
			НоваяЗапись 					= НаборЗаписей.Добавить(); 
			НоваяЗапись.Период 				= ТекущаяДата(); 
			НоваяЗапись.Документ 			= Ссылка; 
			НоваяЗапись.ПериодГрафика 		= Выборка.Период; 
			
			НоваяЗапись.СуммаДоИзменения	= Выборка.СуммаДоИзменения; 
			НоваяЗапись.Сумма			 	= Выборка.СуммаСНДС; 
			НоваяЗапись.АвторЗаписи 		= глЗначениеПеременной("глТекущийПользователь");
			
			
		КонецЕсли;
		 
	 КонецЦикла;
	 
	 НаборЗаписей.Записать(); 

КонецПроцедуры
// }}ТТК Сладков А. Заявка № 31.10.2016 окончание
//ххх Брель Виктор Андреевич 27.04.2018 14:40:05, заявка <<<
Функция НеПроверятьЗЗ(ПредыдущийСтатус,ТекущийСтатус)
	Возврат ((ПредыдущийСтатус<>Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка  И ПредыдущийСтатус<>Неопределено  )
	И (ТекущийСтатус =Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка)) 	
	ИЛИ ( (ПредыдущийСтатус<>Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеГрафика И ПредыдущийСтатус<>Неопределено)
	И (ТекущийСтатус =Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеГрафика));  
КонецФункции

// Брель Виктор Андреевич 27.04.2018 14:40:05 >>>

//абс_Стрельцов+ добавлено: 17.09.2012
//при переносе ПУ
//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:29:26  Поставка
мПроведениеПоМеханизмуПроектногоУчета = глЗначениеПеременной("абс_ПроведениеПоМеханизмуПроектногоУчета");
//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ 

//
//абс_Стрельцов-

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
//Сторчевой А.Н. 17.01.2017 7766416 {                                                                                 
//Добавили отбор по организации при получении доступных ролей пользователя
//мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь, ?(ЗначениеЗаполнено(Ссылка.Организация), Ссылка.Организация, Неопределено));
// } Сторчевой А.Н. 17.01.2017 7766416

мИзмененГрафикОплат = Ложь;
мИзмененГрафикПоставок = Ложь;

мРедактированиеСчетаУчета = Ложь;

//АБС ИЗМЕНЕНИЕ 36495  13.12.2013 17:30:10  Поставка
//мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа = Константы.абс_ДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа.Получить();
мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа = глЗначениеПеременной("абс_ДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа");
//АБС ИЗМЕНЕНИЕ 36495 КОНЕЦ
